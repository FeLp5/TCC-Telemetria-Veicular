

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jan 24 19:04:55 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    80                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    87                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    88  0000                     
    89                           ; Version 1.45
    90                           ; Generated 16/11/2017 GMT
    91                           ; 
    92                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC18F4550 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     
   124                           	psect	idataBANK1
   125  003498                     __pidataBANK1:
   126                           	opt stack 0
   127                           
   128                           ;initializer for _fileName
   129  003498  63                 	db	99
   130  003499  68                 	db	104
   131  00349A  65                 	db	101
   132  00349B  63                 	db	99
   133  00349C  6B                 	db	107
   134  00349D  2E                 	db	46
   135  00349E  74                 	db	116
   136  00349F  78                 	db	120
   137  0034A0  74                 	db	116
   138  0034A1  00                 	db	0
   139                           
   140                           ;initializer for escreve_inteiro_uart@F3956
   141  0034A2  30                 	db	48
   142  0034A3  30                 	db	48
   143  0034A4  30                 	db	48
   144  0034A5  30                 	db	48
   145  0034A6  30                 	db	48
   146  0034A7  30                 	db	48
   147  0034A8  00                 	db	0
   148                           
   149                           ;initializer for escreve_inteiro_lcd@F3966
   150  0034A9  30                 	db	48
   151  0034AA  30                 	db	48
   152  0034AB  30                 	db	48
   153  0034AC  30                 	db	48
   154  0034AD  30                 	db	48
   155  0034AE  30                 	db	48
   156  0034AF  00                 	db	0
   157                           
   158                           	psect	mediumconst
   159  00604C                     __pmediumconst:
   160                           	opt stack 0
   161  00604C  00                 	db	0
   162  00604D                     create_name@cvt:
   163                           	opt stack 0
   164  00604D  80                 	db	128
   165  00604E  9A                 	db	154
   166  00604F  90                 	db	144
   167  006050  41                 	db	65
   168  006051  8E                 	db	142
   169  006052  41                 	db	65
   170  006053  8F                 	db	143
   171  006054  80                 	db	128
   172  006055  45                 	db	69
   173  006056  45                 	db	69
   174  006057  45                 	db	69
   175  006058  49                 	db	73
   176  006059  49                 	db	73
   177  00605A  49                 	db	73
   178  00605B  8E                 	db	142
   179  00605C  8F                 	db	143
   180  00605D  90                 	db	144
   181  00605E  92                 	db	146
   182  00605F  92                 	db	146
   183  006060  4F                 	db	79
   184  006061  99                 	db	153
   185  006062  4F                 	db	79
   186  006063  55                 	db	85
   187  006064  55                 	db	85
   188  006065  59                 	db	89
   189  006066  99                 	db	153
   190  006067  9A                 	db	154
   191  006068  9B                 	db	155
   192  006069  9C                 	db	156
   193  00606A  9D                 	db	157
   194  00606B  9E                 	db	158
   195  00606C  9F                 	db	159
   196  00606D  41                 	db	65
   197  00606E  49                 	db	73
   198  00606F  4F                 	db	79
   199  006070  55                 	db	85
   200  006071  A5                 	db	165
   201  006072  A5                 	db	165
   202  006073  A6                 	db	166
   203  006074  A7                 	db	167
   204  006075  A8                 	db	168
   205  006076  A9                 	db	169
   206  006077  AA                 	db	170
   207  006078  AB                 	db	171
   208  006079  AC                 	db	172
   209  00607A  21                 	db	33
   210  00607B  AE                 	db	174
   211  00607C  AF                 	db	175
   212  00607D  B0                 	db	176
   213  00607E  B1                 	db	177
   214  00607F  B2                 	db	178
   215  006080  B3                 	db	179
   216  006081  B4                 	db	180
   217  006082  B5                 	db	181
   218  006083  B6                 	db	182
   219  006084  B7                 	db	183
   220  006085  B8                 	db	184
   221  006086  B9                 	db	185
   222  006087  BA                 	db	186
   223  006088  BB                 	db	187
   224  006089  BC                 	db	188
   225  00608A  BD                 	db	189
   226  00608B  BE                 	db	190
   227  00608C  BF                 	db	191
   228  00608D  C0                 	db	192
   229  00608E  C1                 	db	193
   230  00608F  C2                 	db	194
   231  006090  C3                 	db	195
   232  006091  C4                 	db	196
   233  006092  C5                 	db	197
   234  006093  C6                 	db	198
   235  006094  C7                 	db	199
   236  006095  C8                 	db	200
   237  006096  C9                 	db	201
   238  006097  CA                 	db	202
   239  006098  CB                 	db	203
   240  006099  CC                 	db	204
   241  00609A  CD                 	db	205
   242  00609B  CE                 	db	206
   243  00609C  CF                 	db	207
   244  00609D  D0                 	db	208
   245  00609E  D1                 	db	209
   246  00609F  D2                 	db	210
   247  0060A0  D3                 	db	211
   248  0060A1  D4                 	db	212
   249  0060A2  D5                 	db	213
   250  0060A3  D6                 	db	214
   251  0060A4  D7                 	db	215
   252  0060A5  D8                 	db	216
   253  0060A6  D9                 	db	217
   254  0060A7  DA                 	db	218
   255  0060A8  DB                 	db	219
   256  0060A9  DC                 	db	220
   257  0060AA  DD                 	db	221
   258  0060AB  DE                 	db	222
   259  0060AC  DF                 	db	223
   260  0060AD  E0                 	db	224
   261  0060AE  E1                 	db	225
   262  0060AF  E2                 	db	226
   263  0060B0  E3                 	db	227
   264  0060B1  E4                 	db	228
   265  0060B2  E5                 	db	229
   266  0060B3  E6                 	db	230
   267  0060B4  E7                 	db	231
   268  0060B5  E8                 	db	232
   269  0060B6  E9                 	db	233
   270  0060B7  EA                 	db	234
   271  0060B8  EB                 	db	235
   272  0060B9  EC                 	db	236
   273  0060BA  ED                 	db	237
   274  0060BB  EE                 	db	238
   275  0060BC  EF                 	db	239
   276  0060BD  F0                 	db	240
   277  0060BE  F1                 	db	241
   278  0060BF  F2                 	db	242
   279  0060C0  F3                 	db	243
   280  0060C1  F4                 	db	244
   281  0060C2  F5                 	db	245
   282  0060C3  F6                 	db	246
   283  0060C4  F7                 	db	247
   284  0060C5  F8                 	db	248
   285  0060C6  F9                 	db	249
   286  0060C7  FA                 	db	250
   287  0060C8  FB                 	db	251
   288  0060C9  FC                 	db	252
   289  0060CA  FD                 	db	253
   290  0060CB  FE                 	db	254
   291  0060CC  FF                 	db	255
   292  0060CD                     __end_ofcreate_name@cvt:
   293                           	opt stack 0
   294  0060CD                     _dpowers:
   295                           	opt stack 0
   296  0060CD  0001               	dw	1
   297  0060CF  0000               	dw	0
   298  0060D1  000A               	dw	10
   299  0060D3  0000               	dw	0
   300  0060D5  0064               	dw	100
   301  0060D7  0000               	dw	0
   302  0060D9  03E8               	dw	1000
   303  0060DB  0000               	dw	0
   304  0060DD  2710               	dw	10000
   305  0060DF  0000               	dw	0
   306  0060E1  86A0               	dw	34464
   307  0060E3  0001               	dw	1
   308  0060E5  4240               	dw	16960
   309  0060E7  000F               	dw	15
   310  0060E9  9680               	dw	38528
   311  0060EB  0098               	dw	152
   312  0060ED  E100               	dw	57600
   313  0060EF  05F5               	dw	1525
   314  0060F1  CA00               	dw	51712
   315  0060F3  3B9A               	dw	15258
   316  0060F5                     __end_of_dpowers:
   317                           	opt stack 0
   318  0060F5                     __powers_:
   319                           	opt stack 0
   320  0060F5  00                 	db	0
   321  0060F6  80                 	db	128
   322  0060F7  3F                 	db	63
   323  0060F8  00                 	db	0
   324  0060F9  20                 	db	32
   325  0060FA  41                 	db	65
   326  0060FB  00                 	db	0
   327  0060FC  C8                 	db	200
   328  0060FD  42                 	db	66
   329  0060FE  00                 	db	0
   330  0060FF  7A                 	db	122
   331  006100  44                 	db	68
   332  006101  40                 	db	64
   333  006102  1C                 	db	28
   334  006103  46                 	db	70
   335  006104  50                 	db	80
   336  006105  C3                 	db	195
   337  006106  47                 	db	71
   338  006107  24                 	db	36
   339  006108  74                 	db	116
   340  006109  49                 	db	73
   341  00610A  97                 	db	151
   342  00610B  18                 	db	24
   343  00610C  4B                 	db	75
   344  00610D  BC                 	db	188
   345  00610E  BE                 	db	190
   346  00610F  4C                 	db	76
   347  006110  6B                 	db	107
   348  006111  6E                 	db	110
   349  006112  4E                 	db	78
   350  006113  03                 	db	3
   351  006114  15                 	db	21
   352  006115  50                 	db	80
   353  006116  79                 	db	121
   354  006117  AD                 	db	173
   355  006118  60                 	db	96
   356  006119  F3                 	db	243
   357  00611A  49                 	db	73
   358  00611B  71                 	db	113
   359  00611C                     __end_of__powers_:
   360                           	opt stack 0
   361  00611C                     __npowers_:
   362                           	opt stack 0
   363  00611C  00                 	db	0
   364  00611D  80                 	db	128
   365  00611E  3F                 	db	63
   366  00611F  CD                 	db	205
   367  006120  CC                 	db	204
   368  006121  3D                 	db	61
   369  006122  D7                 	db	215
   370  006123  23                 	db	35
   371  006124  3C                 	db	60
   372  006125  12                 	db	18
   373  006126  83                 	db	131
   374  006127  3A                 	db	58
   375  006128  B7                 	db	183
   376  006129  D1                 	db	209
   377  00612A  38                 	db	56
   378  00612B  C6                 	db	198
   379  00612C  27                 	db	39
   380  00612D  37                 	db	55
   381  00612E  38                 	db	56
   382  00612F  86                 	db	134
   383  006130  35                 	db	53
   384  006131  C0                 	db	192
   385  006132  D6                 	db	214
   386  006133  33                 	db	51
   387  006134  CC                 	db	204
   388  006135  2B                 	db	43
   389  006136  32                 	db	50
   390  006137  70                 	db	112
   391  006138  89                 	db	137
   392  006139  30                 	db	48
   393  00613A  E7                 	db	231
   394  00613B  DB                 	db	219
   395  00613C  2E                 	db	46
   396  00613D  E5                 	db	229
   397  00613E  3C                 	db	60
   398  00613F  1E                 	db	30
   399  006140  42                 	db	66
   400  006141  A2                 	db	162
   401  006142  0D                 	db	13
   402  006143                     __end_of__npowers_:
   403                           	opt stack 0
   404  006143                     mensagem_inicial@F4037:
   405                           	opt stack 0
   406  006143  20                 	db	32
   407  006144  31                 	db	49
   408  006145  38                 	db	56
   409  006146  2F                 	db	47
   410  006147  30                 	db	48
   411  006148  31                 	db	49
   412  006149  2F                 	db	47
   413  00614A  32                 	db	50
   414  00614B  30                 	db	48
   415  00614C  32                 	db	50
   416  00614D  32                 	db	50
   417  00614E  20                 	db	32
   418  00614F  20                 	db	32
   419  006150  20                 	db	32
   420  006151  00                 	db	0
   421  006152  00                 	db	0
   422  006153  00                 	db	0
   423  006154                     __end_ofmensagem_inicial@F4037:
   424                           	opt stack 0
   425  006154                     mensagem_inicial@F4035:
   426                           	opt stack 0
   427  006154  53                 	db	83
   428  006155  44                 	db	68
   429  006156  43                 	db	67
   430  006157  61                 	db	97
   431  006158  72                 	db	114
   432  006159  64                 	db	100
   433  00615A  20                 	db	32
   434  00615B  49                 	db	73
   435  00615C  6E                 	db	110
   436  00615D  69                 	db	105
   437  00615E  74                 	db	116
   438  00615F  20                 	db	32
   439  006160  20                 	db	32
   440  006161  20                 	db	32
   441  006162  00                 	db	0
   442  006163  00                 	db	0
   443  006164  00                 	db	0
   444  006165                     __end_ofmensagem_inicial@F4035:
   445                           	opt stack 0
   446  006165                     leitura_chave@F3842:
   447                           	opt stack 0
   448  006165  20                 	db	32
   449  006166  49                 	db	73
   450  006167  67                 	db	103
   451  006168  6E                 	db	110
   452  006169  20                 	db	32
   453  00616A  4F                 	db	79
   454  00616B  6E                 	db	110
   455  00616C  00                 	db	0
   456  00616D  00                 	db	0
   457  00616E  00                 	db	0
   458  00616F  00                 	db	0
   459  006170  00                 	db	0
   460  006171  00                 	db	0
   461  006172  00                 	db	0
   462  006173  00                 	db	0
   463  006174  00                 	db	0
   464  006175  00                 	db	0
   465  006176                     __end_ofleitura_chave@F3842:
   466                           	opt stack 0
   467  006176                     leitura_chave@F3840:
   468                           	opt stack 0
   469  006176  20                 	db	32
   470  006177  49                 	db	73
   471  006178  67                 	db	103
   472  006179  6E                 	db	110
   473  00617A  20                 	db	32
   474  00617B  43                 	db	67
   475  00617C  72                 	db	114
   476  00617D  61                 	db	97
   477  00617E  6E                 	db	110
   478  00617F  6B                 	db	107
   479  006180  00                 	db	0
   480  006181  00                 	db	0
   481  006182  00                 	db	0
   482  006183  00                 	db	0
   483  006184  00                 	db	0
   484  006185  00                 	db	0
   485  006186  00                 	db	0
   486  006187                     __end_ofleitura_chave@F3840:
   487                           	opt stack 0
   488  006187                     leitura_chave@F3838:
   489                           	opt stack 0
   490  006187  20                 	db	32
   491  006188  49                 	db	73
   492  006189  67                 	db	103
   493  00618A  6E                 	db	110
   494  00618B  20                 	db	32
   495  00618C  4F                 	db	79
   496  00618D  66                 	db	102
   497  00618E  66                 	db	102
   498  00618F  00                 	db	0
   499  006190  00                 	db	0
   500  006191  00                 	db	0
   501  006192  00                 	db	0
   502  006193  00                 	db	0
   503  006194  00                 	db	0
   504  006195  00                 	db	0
   505  006196  00                 	db	0
   506  006197  00                 	db	0
   507  006198                     __end_ofleitura_chave@F3838:
   508                           	opt stack 0
   509  0000                     _PCL	set	4089
   510  0000                     _PCLATH	set	4090
   511  0000                     _PIE1bits	set	3997
   512  0000                     _RCSTA	set	4011
   513  0000                     _TXSTA	set	4012
   514  0000                     _RCREG	set	4014
   515  0000                     _RCSTAbits	set	4011
   516  0000                     _TXREG	set	4013
   517  0000                     _SPBRG	set	4015
   518  0000                     _PIR2bits	set	4001
   519  0000                     _EECON2	set	4007
   520  0000                     _EECON1bits	set	4006
   521  0000                     _EEDATA	set	4008
   522  0000                     _EEADR	set	4009
   523  0000                     _PR2	set	4043
   524  0000                     _TMR2	set	4044
   525  0000                     _T2CON	set	4042
   526  0000                     _OSCCONbits	set	4051
   527  0000                     _TRISE	set	3990
   528  0000                     _TRISC	set	3988
   529  0000                     _TRISA	set	3986
   530  0000                     _TRISD	set	3989
   531  0000                     _LATB	set	3978
   532  0000                     _TRISB	set	3987
   533  0000                     _T0CONbits	set	4053
   534  0000                     _TMR0L	set	4054
   535  0000                     _TMR0H	set	4055
   536  0000                     _PIE1	set	3997
   537  0000                     _INTCON3	set	4080
   538  0000                     _INTCON2	set	4081
   539  0000                     _INTCON	set	4082
   540  0000                     _SPPCFG	set	3939
   541  0000                     _SPPCON	set	3941
   542  0000                     _T0CON	set	4053
   543  0000                     _PORTDbits	set	3971
   544  0000                     _TRISDbits	set	3989
   545  0000                     _PORTEbits	set	3972
   546  0000                     _PORTCbits	set	3970
   547  0000                     _ADRESL	set	4035
   548  0000                     _ADRESH	set	4036
   549  0000                     _ADCON0	set	4034
   550  0000                     _ADCON0bits	set	4034
   551  0000                     _ADCON2bits	set	4032
   552  0000                     _ADCON1bits	set	4033
   553  0000                     _ADCON1	set	4033
   554  0000                     _SSPBUF	set	4041
   555  0000                     _PIR1bits	set	3998
   556  0000                     _TRISCbits	set	3988
   557  0000                     _SSPSTATbits	set	4039
   558  0000                     _TRISBbits	set	3987
   559  0000                     _SSPCON1	set	4038
   560  0000                     _SSPSTAT	set	4039
   561  0000                     _SSPCON1bits	set	4038
   562  0000                     _INTCONbits	set	4082
   563  0000                     _LATBbits	set	3978
   564  0000                     _PORTAbits	set	3968
   565  0000                     _TRISAbits	set	3986
   566  0000                     _INT0IE	set	32660
   567  0000                     _INT0IF	set	32657
   568  0000                     _T0IF	set	32658
   569  0000                     _TMR0IF	set	32658
   570  0000                     _RCIF	set	31989
   571  0000                     _TRMT	set	32097
   572  0000                     _TXEN	set	32101
   573  0000                     _CREN	set	32092
   574  0000                     _SPEN	set	32095
   575  0000                     _SYNC	set	32100
   576  0000                     _BRGH	set	32098
   577  0000                     _TMR2IF	set	31985
   578  006198                     STR_12:
   579  006198  73                 	db	115	;'s'
   580  006199  79                 	db	121	;'y'
   581  00619A  73                 	db	115	;'s'
   582  00619B  74                 	db	116	;'t'
   583  00619C  20                 	db	32
   584  00619D  69                 	db	105	;'i'
   585  00619E  6E                 	db	110	;'n'
   586  00619F  69                 	db	105	;'i'
   587  0061A0  63                 	db	99	;'c'
   588  0061A1  69                 	db	105	;'i'
   589  0061A2  61                 	db	97	;'a'
   590  0061A3  6C                 	db	108	;'l'
   591  0061A4  69                 	db	105	;'i'
   592  0061A5  7A                 	db	122	;'z'
   593  0061A6  65                 	db	101	;'e'
   594  0061A7  64                 	db	100	;'d'
   595  0061A8  00                 	db	0
   596  0061A9                     STR_1:
   597  0061A9  53                 	db	83	;'S'
   598  0061AA  50                 	db	80	;'P'
   599  0061AB  49                 	db	73	;'I'
   600  0061AC  20                 	db	32
   601  0061AD  63                 	db	99	;'c'
   602  0061AE  6F                 	db	111	;'o'
   603  0061AF  6E                 	db	110	;'n'
   604  0061B0  66                 	db	102	;'f'
   605  0061B1  69                 	db	105	;'i'
   606  0061B2  67                 	db	103	;'g'
   607  0061B3  75                 	db	117	;'u'
   608  0061B4  72                 	db	114	;'r'
   609  0061B5  61                 	db	97	;'a'
   610  0061B6  64                 	db	100	;'d'
   611  0061B7  61                 	db	97	;'a'
   612  0061B8  21                 	db	33
   613  0061B9  00                 	db	0
   614  0061BA                     STR_21:
   615  0061BA  61                 	db	97	;'a'
   616  0061BB  62                 	db	98	;'b'
   617  0061BC  72                 	db	114	;'r'
   618  0061BD  69                 	db	105	;'i'
   619  0061BE  72                 	db	114	;'r'
   620  0061BF  20                 	db	32
   621  0061C0  6F                 	db	111	;'o'
   622  0061C1  20                 	db	32
   623  0061C2  61                 	db	97	;'a'
   624  0061C3  72                 	db	114	;'r'
   625  0061C4  71                 	db	113	;'q'
   626  0061C5  75                 	db	117	;'u'
   627  0061C6  69                 	db	105	;'i'
   628  0061C7  76                 	db	118	;'v'
   629  0061C8  6F                 	db	111	;'o'
   630  0061C9  00                 	db	0
   631  0061CA                     STR_11:
   632  0061CA  6D                 	db	109	;'m'
   633  0061CB  6F                 	db	111	;'o'
   634  0061CC  75                 	db	117	;'u'
   635  0061CD  6E                 	db	110	;'n'
   636  0061CE  74                 	db	116	;'t'
   637  0061CF  20                 	db	32
   638  0061D0  66                 	db	102	;'f'
   639  0061D1  69                 	db	105	;'i'
   640  0061D2  6C                 	db	108	;'l'
   641  0061D3  65                 	db	101	;'e'
   642  0061D4  20                 	db	32
   643  0061D5  73                 	db	115	;'s'
   644  0061D6  79                 	db	121	;'y'
   645  0061D7  73                 	db	115	;'s'
   646  0061D8  00                 	db	0
   647  0061D9                     STR_18:
   648  0061D9  45                 	db	69	;'E'
   649  0061DA  72                 	db	114	;'r'
   650  0061DB  72                 	db	114	;'r'
   651  0061DC  6F                 	db	111	;'o'
   652  0061DD  20                 	db	32
   653  0061DE  74                 	db	116	;'t'
   654  0061DF  65                 	db	101	;'e'
   655  0061E0  6E                 	db	110	;'n'
   656  0061E1  74                 	db	116	;'t'
   657  0061E2  61                 	db	97	;'a'
   658  0061E3  6E                 	db	110	;'n'
   659  0061E4  64                 	db	100	;'d'
   660  0061E5  6F                 	db	111	;'o'
   661  0061E6  00                 	db	0
   662  0061E7                     STR_10:
   663  0061E7  41                 	db	65	;'A'
   664  0061E8  74                 	db	116	;'t'
   665  0061E9  74                 	db	116	;'t'
   666  0061EA  65                 	db	101	;'e'
   667  0061EB  6D                 	db	109	;'m'
   668  0061EC  70                 	db	112	;'p'
   669  0061ED  74                 	db	116	;'t'
   670  0061EE  69                 	db	105	;'i'
   671  0061EF  6E                 	db	110	;'n'
   672  0061F0  67                 	db	103	;'g'
   673  0061F1  20                 	db	32
   674  0061F2  74                 	db	116	;'t'
   675  0061F3  6F                 	db	111	;'o'
   676  0061F4  00                 	db	0
   677  0061F5                     STR_19:
   678  0061F5  6C                 	db	108	;'l'
   679  0061F6  65                 	db	101	;'e'
   680  0061F7  72                 	db	114	;'r'
   681  0061F8  20                 	db	32
   682  0061F9  6F                 	db	111	;'o'
   683  0061FA  20                 	db	32
   684  0061FB  61                 	db	97	;'a'
   685  0061FC  72                 	db	114	;'r'
   686  0061FD  71                 	db	113	;'q'
   687  0061FE  75                 	db	117	;'u'
   688  0061FF  69                 	db	105	;'i'
   689  006200  76                 	db	118	;'v'
   690  006201  6F                 	db	111	;'o'
   691  006202  00                 	db	0
   692  006203                     STR_17:
   693  006203  6C                 	db	108	;'l'
   694  006204  65                 	db	101	;'e'
   695  006205  6E                 	db	110	;'n'
   696  006206  64                 	db	100	;'d'
   697  006207  6F                 	db	111	;'o'
   698  006208  20                 	db	32
   699  006209  61                 	db	97	;'a'
   700  00620A  72                 	db	114	;'r'
   701  00620B  71                 	db	113	;'q'
   702  00620C  75                 	db	117	;'u'
   703  00620D  69                 	db	105	;'i'
   704  00620E  76                 	db	118	;'v'
   705  00620F  6F                 	db	111	;'o'
   706  006210  00                 	db	0
   707  006211                     STR_5:
   708  006211  42                 	db	66	;'B'
   709  006212  79                 	db	121	;'y'
   710  006213  74                 	db	116	;'t'
   711  006214  65                 	db	101	;'e'
   712  006215  73                 	db	115	;'s'
   713  006216  20                 	db	32
   714  006217  63                 	db	99	;'c'
   715  006218  72                 	db	114	;'r'
   716  006219  69                 	db	105	;'i'
   717  00621A  61                 	db	97	;'a'
   718  00621B  64                 	db	100	;'d'
   719  00621C  6F                 	db	111	;'o'
   720  00621D  21                 	db	33
   721  00621E  00                 	db	0
   722  00621F                     STR_2:
   723  00621F  43                 	db	67	;'C'
   724  006220  61                 	db	97	;'a'
   725  006221  72                 	db	114	;'r'
   726  006222  74                 	db	116	;'t'
   727  006223  E3                 	db	-29
   728  006224  6F                 	db	111	;'o'
   729  006225  20                 	db	32
   730  006226  41                 	db	65	;'A'
   731  006227  63                 	db	99	;'c'
   732  006228  65                 	db	101	;'e'
   733  006229  69                 	db	105	;'i'
   734  00622A  74                 	db	116	;'t'
   735  00622B  6F                 	db	111	;'o'
   736  00622C  00                 	db	0
   737  00622D                     STR_16:
   738  00622D  53                 	db	83	;'S'
   739  00622E  44                 	db	68	;'D'
   740  00622F  43                 	db	67	;'C'
   741  006230  61                 	db	97	;'a'
   742  006231  72                 	db	114	;'r'
   743  006232  64                 	db	100	;'d'
   744  006233  20                 	db	32
   745  006234  65                 	db	101	;'e'
   746  006235  72                 	db	114	;'r'
   747  006236  72                 	db	114	;'r'
   748  006237  6F                 	db	111	;'o'
   749  006238  72                 	db	114	;'r'
   750  006239  00                 	db	0
   751  00623A                     STR_4:
   752  00623A  42                 	db	66	;'B'
   753  00623B  6C                 	db	108	;'l'
   754  00623C  6F                 	db	111	;'o'
   755  00623D  63                 	db	99	;'c'
   756  00623E  6F                 	db	111	;'o'
   757  00623F  20                 	db	32
   758  006240  64                 	db	100	;'d'
   759  006241  65                 	db	101	;'e'
   760  006242  20                 	db	32
   761  006243  35                 	db	53	;'5'
   762  006244  31                 	db	49	;'1'
   763  006245  32                 	db	50	;'2'
   764  006246  00                 	db	0
   765  006247                     STR_8:
   766  006247  63                 	db	99	;'c'
   767  006248  68                 	db	104	;'h'
   768  006249  65                 	db	101	;'e'
   769  00624A  63                 	db	99	;'c'
   770  00624B  6B                 	db	107	;'k'
   771  00624C  2E                 	db	46
   772  00624D  74                 	db	116	;'t'
   773  00624E  78                 	db	120	;'x'
   774  00624F  74                 	db	116	;'t'
   775  006250  00                 	db	0
   776  006251  25                 	db	37
   777  006252  64                 	db	100	;'d'
   778  006253  3A                 	db	58	;':'
   779  006254  25                 	db	37
   780  006255  64                 	db	100	;'d'
   781  006256  3A                 	db	58	;':'
   782  006257  25                 	db	37
   783  006258  64                 	db	100	;'d'
   784  006259  00                 	db	0
   785  00625A                     STR_3:
   786  00625A  45                 	db	69	;'E'
   787  00625B  72                 	db	114	;'r'
   788  00625C  72                 	db	114	;'r'
   789  00625D  6F                 	db	111	;'o'
   790  00625E  72                 	db	114	;'r'
   791  00625F  21                 	db	33
   792  006260  21                 	db	33
   793  006261  21                 	db	33
   794  006262  00                 	db	0
   795  006263                     STR_14:
   796  006263  53                 	db	83	;'S'
   797  006264  44                 	db	68	;'D'
   798  006265  5F                 	db	95	;'_'
   799  006266  43                 	db	67	;'C'
   800  006267  61                 	db	97	;'a'
   801  006268  72                 	db	114	;'r'
   802  006269  64                 	db	100	;'d'
   803  00626A  00                 	db	0
   804  00626B                     STR_6:
   805  00626B  49                 	db	73	;'I'
   806  00626C  6E                 	db	110	;'n'
   807  00626D  69                 	db	105	;'i'
   808  00626E  74                 	db	116	;'t'
   809  00626F  20                 	db	32
   810  006270  4F                 	db	79	;'O'
   811  006271  4B                 	db	75	;'K'
   812  006272  00                 	db	0
   813  006273                     STR_22:
   814  006273  25                 	db	37
   815  006274  2E                 	db	46
   816  006275  30                 	db	48	;'0'
   817  006276  35                 	db	53	;'5'
   818  006277  66                 	db	102	;'f'
   819  006278  00                 	db	0
   820  006279  0D                 	db	13
   821  00627A  0A                 	db	10
   822  00627B  00                 	db	0
   823  00627C                     STR_7:
   824  00627C  2E                 	db	46
   825  00627D  2E                 	db	46
   826  00627E  00                 	db	0
   827  0000                     
   828                           ; #config settings
   829  00627F  00                 	db	0	; dummy byte at the end
   830  0000                     
   831                           	psect	cinit
   832  002E7C                     __pcinit:
   833                           	opt stack 0
   834  002E7C                     start_initialization:
   835                           	opt stack 0
   836  002E7C                     __initialization:
   837                           	opt stack 0
   838                           
   839                           ; Initialize objects allocated to BANK1 (24 bytes)
   840                           ; load TBLPTR registers with __pidataBANK1
   841  002E7C  0E98               	movlw	low __pidataBANK1
   842  002E7E  6EF6               	movwf	tblptrl,c
   843  002E80  0E34               	movlw	high __pidataBANK1
   844  002E82  6EF7               	movwf	tblptrh,c
   845  002E84  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   846  002E86  6EF8               	movwf	tblptru,c
   847  002E88  EE01  F0CD         	lfsr	0,__pdataBANK1
   848  002E8C  EE10 F018          	lfsr	1,24
   849  002E90                     copy_data0:
   850  002E90  0009               	tblrd		*+
   851  002E92  CFF5 FFEE          	movff	tablat,postinc0
   852  002E96  50E5               	movf	postdec1,w,c
   853  002E98  50E1               	movf	fsr1l,w,c
   854  002E9A  E1FA               	bnz	copy_data0
   855                           
   856                           ; Clear objects allocated to BIGRAM (512 bytes)
   857  002E9C  EE02  F0AD         	lfsr	0,__pbssBIGRAM
   858  002EA0  EE12 F000          	lfsr	1,512
   859  002EA4                     clear_0:
   860  002EA4  6AEE               	clrf	postinc0,c
   861  002EA6  50E5               	movf	postdec1,w,c
   862  002EA8  50E1               	movf	fsr1l,w,c
   863  002EAA  E1FC               	bnz	clear_0
   864  002EAC  50E2               	movf	fsr1h,w,c
   865  002EAE  E1FA               	bnz	clear_0
   866                           
   867                           ; Clear objects allocated to BANK2 (128 bytes)
   868  002EB0  EE02  F000         	lfsr	0,__pbssBANK2
   869  002EB4  0E80               	movlw	128
   870  002EB6                     clear_1:
   871  002EB6  6AEE               	clrf	postinc0,c
   872  002EB8  06E8               	decf	wreg,f,c
   873  002EBA  E1FD               	bnz	clear_1
   874                           
   875                           ; Clear objects allocated to BANK1 (142 bytes)
   876  002EBC  EE01  F000         	lfsr	0,__pbssBANK1
   877  002EC0  0E8E               	movlw	142
   878  002EC2                     clear_2:
   879  002EC2  6AEE               	clrf	postinc0,c
   880  002EC4  06E8               	decf	wreg,f,c
   881  002EC6  E1FD               	bnz	clear_2
   882                           
   883                           ; Clear objects allocated to BANK0 (8 bytes)
   884  002EC8  EE00  F0D1         	lfsr	0,__pbssBANK0
   885  002ECC  0E08               	movlw	8
   886  002ECE                     clear_3:
   887  002ECE  6AEE               	clrf	postinc0,c
   888  002ED0  06E8               	decf	wreg,f,c
   889  002ED2  E1FD               	bnz	clear_3
   890                           
   891                           ; Clear objects allocated to COMRAM (24 bytes)
   892  002ED4  EE00  F02E         	lfsr	0,__pbssCOMRAM
   893  002ED8  0E18               	movlw	24
   894  002EDA                     clear_4:
   895  002EDA  6AEE               	clrf	postinc0,c
   896  002EDC  06E8               	decf	wreg,f,c
   897  002EDE  E1FD               	bnz	clear_4
   898  002EE0                     end_of_initialization:
   899                           	opt stack 0
   900  002EE0                     __end_of__initialization:
   901                           	opt stack 0
   902  002EE0  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   903  002EE2  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   904  002EE4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   905  002EE6  6EF8               	movwf	tblptru,c
   906  002EE8  0100               	movlb	0
   907  002EEA  EF50  F019         	goto	_main	;jump to C main() function
   908                           tblptru	equ	0xFF8
   909                           tblptrh	equ	0xFF7
   910                           tblptrl	equ	0xFF6
   911                           tablat	equ	0xFF5
   912                           postinc0	equ	0xFEE
   913                           wreg	equ	0xFE8
   914                           postdec1	equ	0xFE5
   915                           fsr1h	equ	0xFE2
   916                           fsr1l	equ	0xFE1
   917                           
   918                           	psect	bssCOMRAM
   919  00002E                     __pbssCOMRAM:
   920                           	opt stack 0
   921  00002E                     _tempo_tarefa:
   922                           	opt stack 0
   923  00002E                     	ds	4
   924  000032                     _GGA_CODE:
   925                           	opt stack 0
   926  000032                     	ds	3
   927  000035                     _GGA_Index:
   928                           	opt stack 0
   929  000035                     	ds	2
   930  000037                     _FatFs:
   931                           	opt stack 0
   932  000037                     	ds	2
   933  000039                     _IsItGGAString:
   934                           	opt stack 0
   935  000039                     	ds	1
   936  00003A                     _CommaCounter:
   937                           	opt stack 0
   938  00003A                     	ds	1
   939  00003B                     _E_W:
   940                           	opt stack 0
   941  00003B                     	ds	1
   942  00003C                     _N_S:
   943                           	opt stack 0
   944  00003C                     	ds	1
   945  00003D                     acende_led4@flag:
   946                           	opt stack 0
   947  00003D                     	ds	1
   948  00003E                     _tarefa_em_execucao:
   949                           	opt stack 0
   950  00003E                     	ds	1
   951  00003F                     _sinaliza_int_timer:
   952                           	opt stack 0
   953  00003F                     	ds	1
   954  000040                     _data_uart_recebe:
   955                           	opt stack 0
   956  000040                     	ds	1
   957  000041                     _s:
   958                           	opt stack 0
   959  000041                     	ds	1
   960  000042                     _Result:
   961                           	opt stack 0
   962  000042                     	ds	1
   963  000043                     timer_dois@flag:
   964                           	opt stack 0
   965  000043                     	ds	1
   966  000044                     _estado:
   967                           	opt stack 0
   968  000044                     	ds	1
   969  000045                     _dado:
   970                           	opt stack 0
   971  000045                     	ds	1
   972                           tblptru	equ	0xFF8
   973                           tblptrh	equ	0xFF7
   974                           tblptrl	equ	0xFF6
   975                           tablat	equ	0xFF5
   976                           postinc0	equ	0xFEE
   977                           wreg	equ	0xFE8
   978                           postdec1	equ	0xFE5
   979                           fsr1h	equ	0xFE2
   980                           fsr1l	equ	0xFE1
   981                           
   982                           	psect	bssBANK0
   983  0000D1                     __pbssBANK0:
   984                           	opt stack 0
   985  0000D1                     _p_tarefas:
   986                           	opt stack 0
   987  0000D1                     	ds	4
   988  0000D5                     _timeout_tarefa:
   989                           	opt stack 0
   990  0000D5                     	ds	2
   991  0000D7                     _flag:
   992                           	opt stack 0
   993  0000D7                     	ds	2
   994                           tblptru	equ	0xFF8
   995                           tblptrh	equ	0xFF7
   996                           tblptrl	equ	0xFF6
   997                           tablat	equ	0xFF5
   998                           postinc0	equ	0xFEE
   999                           wreg	equ	0xFE8
  1000                           postdec1	equ	0xFE5
  1001                           fsr1h	equ	0xFE2
  1002                           fsr1l	equ	0xFE1
  1003                           
  1004                           	psect	bssBANK1
  1005  000100                     __pbssBANK1:
  1006                           	opt stack 0
  1007  000100                     _valor_leitura_adc:
  1008                           	opt stack 0
  1009  000100                     	ds	38
  1010  000126                     _GGA_Pointers:
  1011                           	opt stack 0
  1012  000126                     	ds	20
  1013  00013A                     _txt:
  1014                           	opt stack 0
  1015  00013A                     	ds	20
  1016  00014E                     _info_chaves:
  1017                           	opt stack 0
  1018  00014E                     	ds	7
  1019  000155                     _tempo_backup:
  1020                           	opt stack 0
  1021  000155                     	ds	4
  1022  000159                     _fileSize:
  1023                           	opt stack 0
  1024  000159                     	ds	4
  1025  00015D                     _rd:
  1026                           	opt stack 0
  1027  00015D                     	ds	2
  1028  00015F                     _data_buffer_32:
  1029                           	opt stack 0
  1030  00015F                     	ds	32
  1031  00017F                     _Data_Buffer:
  1032                           	opt stack 0
  1033  00017F                     	ds	15
  1034                           tblptru	equ	0xFF8
  1035                           tblptrh	equ	0xFF7
  1036                           tblptrl	equ	0xFF6
  1037                           tablat	equ	0xFF5
  1038                           postinc0	equ	0xFEE
  1039                           wreg	equ	0xFE8
  1040                           postdec1	equ	0xFE5
  1041                           fsr1h	equ	0xFE2
  1042                           fsr1l	equ	0xFE1
  1043                           
  1044                           	psect	dataBANK1
  1045  0001CD                     __pdataBANK1:
  1046                           	opt stack 0
  1047  0001CD                     _fileName:
  1048                           	opt stack 0
  1049  0001CD                     	ds	10
  1050  0001D7                     escreve_inteiro_uart@F3956:
  1051                           	opt stack 0
  1052  0001D7                     	ds	7
  1053  0001DE                     escreve_inteiro_lcd@F3966:
  1054                           	opt stack 0
  1055  0001DE                     	ds	7
  1056                           tblptru	equ	0xFF8
  1057                           tblptrh	equ	0xFF7
  1058                           tblptrl	equ	0xFF6
  1059                           tablat	equ	0xFF5
  1060                           postinc0	equ	0xFEE
  1061                           wreg	equ	0xFE8
  1062                           postdec1	equ	0xFE5
  1063                           fsr1h	equ	0xFE2
  1064                           fsr1l	equ	0xFE1
  1065                           
  1066                           	psect	bssBANK2
  1067  000200                     __pbssBANK2:
  1068                           	opt stack 0
  1069  000200                     _GGA_Buffer:
  1070                           	opt stack 0
  1071  000200                     	ds	80
  1072  000250                     _folder:
  1073                           	opt stack 0
  1074  000250                     	ds	48
  1075                           tblptru	equ	0xFF8
  1076                           tblptrh	equ	0xFF7
  1077                           tblptrl	equ	0xFF6
  1078                           tablat	equ	0xFF5
  1079                           postinc0	equ	0xFEE
  1080                           wreg	equ	0xFE8
  1081                           postdec1	equ	0xFE5
  1082                           fsr1h	equ	0xFE2
  1083                           fsr1l	equ	0xFE1
  1084                           
  1085                           	psect	bssBIGRAM
  1086  0002AD                     __pbssBIGRAM:
  1087                           	opt stack 0
  1088  0002AD                     disk_readp@arr:
  1089                           	opt stack 0
  1090  0002AD                     	ds	512
  1091                           tblptru	equ	0xFF8
  1092                           tblptrh	equ	0xFF7
  1093                           tblptrl	equ	0xFF6
  1094                           tablat	equ	0xFF5
  1095                           postinc0	equ	0xFEE
  1096                           wreg	equ	0xFE8
  1097                           postdec1	equ	0xFE5
  1098                           fsr1h	equ	0xFE2
  1099                           fsr1l	equ	0xFE1
  1100                           
  1101                           	psect	cstackBANK2
  1102  000280                     __pcstackBANK2:
  1103                           	opt stack 0
  1104  000280                     SDCard@FResult:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x0
  1108  000280                     	ds	1
  1109  000281                     SDCard@br:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x1
  1113  000281                     	ds	2
  1114  000283                     SDCard@fs:
  1115                           	opt stack 0
  1116                           
  1117                           ; 42 bytes @ 0x3
  1118  000283                     	ds	42
  1119                           tblptru	equ	0xFF8
  1120                           tblptrh	equ	0xFF7
  1121                           tblptrl	equ	0xFF6
  1122                           tablat	equ	0xFF5
  1123                           postinc0	equ	0xFEE
  1124                           wreg	equ	0xFE8
  1125                           postdec1	equ	0xFE5
  1126                           fsr1h	equ	0xFE2
  1127                           fsr1l	equ	0xFE1
  1128                           
  1129                           	psect	cstackBANK1
  1130  00018E                     __pcstackBANK1:
  1131                           	opt stack 0
  1132  00018E                     pf_open@sp:
  1133                           	opt stack 0
  1134                           
  1135                           ; 12 bytes @ 0x0
  1136  00018E                     	ds	12
  1137  00019A                     pf_open@dir:
  1138                           	opt stack 0
  1139                           
  1140                           ; 32 bytes @ 0xC
  1141  00019A                     	ds	32
  1142  0001BA                     pf_open@res:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x2C
  1146  0001BA                     	ds	1
  1147  0001BB                     pf_open@fs:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x2D
  1151  0001BB                     	ds	2
  1152  0001BD                     pf_open@dj:
  1153                           	opt stack 0
  1154                           
  1155                           ; 16 bytes @ 0x2F
  1156  0001BD                     	ds	16
  1157                           tblptru	equ	0xFF8
  1158                           tblptrh	equ	0xFF7
  1159                           tblptrl	equ	0xFF6
  1160                           tablat	equ	0xFF5
  1161                           postinc0	equ	0xFEE
  1162                           wreg	equ	0xFE8
  1163                           postdec1	equ	0xFE5
  1164                           fsr1h	equ	0xFE2
  1165                           fsr1l	equ	0xFE1
  1166                           
  1167                           	psect	cstackBANK0
  1168  000060                     __pcstackBANK0:
  1169                           	opt stack 0
  1170  000060                     ??_disk_initialize:
  1171  000060                     ??_disk_writep:
  1172  000060                     ??_clust2sect:
  1173  000060                     ??_configura_baudrate_uart:
  1174  000060                     create_name@d:
  1175                           	opt stack 0
  1176  000060                     disk_readp@rd:
  1177                           	opt stack 0
  1178  000060                     mensagem_inicial@msg_linha_um:
  1179                           	opt stack 0
  1180                           
  1181                           ; 17 bytes @ 0x0
  1182  000060                     	ds	1
  1183  000061                     create_name@p:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x1
  1187  000061                     	ds	1
  1188  000062                     disk_initialize@i:
  1189                           	opt stack 0
  1190  000062                     disk_readp@sector:
  1191                           	opt stack 0
  1192                           
  1193                           ; 4 bytes @ 0x2
  1194  000062                     	ds	1
  1195  000063                     create_name@ni:
  1196                           	opt stack 0
  1197                           
  1198                           ; 1 bytes @ 0x3
  1199  000063                     	ds	1
  1200  000064                     create_name@si:
  1201                           	opt stack 0
  1202  000064                     disk_initialize@count1:
  1203                           	opt stack 0
  1204  000064                     disk_writep@i:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x4
  1208  000064                     	ds	1
  1209  000065                     create_name@sfn:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x5
  1213  000065                     	ds	1
  1214  000066                     disk_initialize@stat:
  1215                           	opt stack 0
  1216  000066                     disk_readp@offset:
  1217                           	opt stack 0
  1218  000066                     disk_writep@j:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x6
  1222  000066                     	ds	1
  1223  000067                     create_name@i:
  1224                           	opt stack 0
  1225  000067                     disk_initialize@count2:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x7
  1229  000067                     	ds	1
  1230  000068                     disk_writep@buff:
  1231                           	opt stack 0
  1232  000068                     create_name@c:
  1233                           	opt stack 0
  1234  000068                     disk_readp@count:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x8
  1238  000068                     	ds	1
  1239  000069                     disk_initialize@buff:
  1240                           	opt stack 0
  1241  000069                     _dir_rewind$1692:
  1242                           	opt stack 0
  1243                           
  1244                           ; 4 bytes @ 0x9
  1245  000069                     	ds	1
  1246  00006A                     disk_readp@ptr:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0xA
  1250  00006A                     	ds	1
  1251  00006B                     disk_readp@start_add:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0xB
  1255  00006B                     	ds	2
  1256  00006D                     dir_rewind@fs:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0xD
  1260  00006D                     	ds	2
  1261  00006F                     disk_readp@buff:
  1262                           	opt stack 0
  1263  00006F                     dir_rewind@clst:
  1264                           	opt stack 0
  1265                           
  1266                           ; 4 bytes @ 0xF
  1267  00006F                     	ds	1
  1268  000070                     disk_readp@length:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x10
  1272  000070                     	ds	1
  1273  000071                     mensagem_inicial@msg_dois:
  1274                           	opt stack 0
  1275                           
  1276                           ; 17 bytes @ 0x11
  1277  000071                     	ds	1
  1278  000072                     ??_get_fat:
  1279  000072                     check_fs@buf:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0x12
  1283  000072                     	ds	2
  1284  000074                     check_fs@sect:
  1285                           	opt stack 0
  1286                           
  1287                           ; 4 bytes @ 0x14
  1288  000074                     	ds	4
  1289  000078                     pf_mount@fs:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x18
  1293  000078                     	ds	2
  1294  00007A                     ??_pf_mount:
  1295                           
  1296                           ; 1 bytes @ 0x1A
  1297  00007A                     	ds	14
  1298  000088                     _get_fat$1632:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x28
  1302  000088                     	ds	2
  1303  00008A                     get_fat@wc:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0x2A
  1307  00008A                     	ds	2
  1308  00008C                     get_fat@ofs:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x2C
  1312  00008C                     	ds	2
  1313  00008E                     get_fat@buf:
  1314                           	opt stack 0
  1315                           
  1316                           ; 4 bytes @ 0x2E
  1317  00008E                     	ds	2
  1318  000090                     pf_mount@buf:
  1319                           	opt stack 0
  1320                           
  1321                           ; 36 bytes @ 0x30
  1322  000090                     	ds	2
  1323  000092                     get_fat@bc:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x32
  1327  000092                     	ds	2
  1328  000094                     get_fat@fs:
  1329                           	opt stack 0
  1330                           
  1331                           ; 2 bytes @ 0x34
  1332  000094                     	ds	2
  1333  000096                     dir_next@dj:
  1334                           	opt stack 0
  1335  000096                     pf_read@buff:
  1336                           	opt stack 0
  1337  000096                     pf_write@buff:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x36
  1341  000096                     	ds	2
  1342  000098                     ??_dir_next:
  1343  000098                     pf_read@btr:
  1344                           	opt stack 0
  1345  000098                     pf_write@btw:
  1346                           	opt stack 0
  1347                           
  1348                           ; 2 bytes @ 0x38
  1349  000098                     	ds	2
  1350  00009A                     pf_read@br:
  1351                           	opt stack 0
  1352  00009A                     pf_write@bw:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x3A
  1356  00009A                     	ds	2
  1357  00009C                     ??_pf_read:
  1358  00009C                     ??_pf_write:
  1359                           
  1360                           ; 1 bytes @ 0x3C
  1361  00009C                     	ds	3
  1362  00009F                     dir_next@fs:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0x3F
  1366  00009F                     	ds	2
  1367  0000A1                     dir_next@clst:
  1368                           	opt stack 0
  1369                           
  1370                           ; 4 bytes @ 0x41
  1371  0000A1                     	ds	3
  1372  0000A4                     pf_read@dr:
  1373                           	opt stack 0
  1374  0000A4                     pf_write@p:
  1375                           	opt stack 0
  1376                           
  1377                           ; 2 bytes @ 0x44
  1378  0000A4                     	ds	1
  1379  0000A5                     dir_next@i:
  1380                           	opt stack 0
  1381  0000A5                     pf_read@rbuff:
  1382                           	opt stack 0
  1383                           
  1384                           ; 2 bytes @ 0x45
  1385  0000A5                     	ds	1
  1386  0000A6                     pf_write@sect:
  1387                           	opt stack 0
  1388                           
  1389                           ; 4 bytes @ 0x46
  1390  0000A6                     	ds	1
  1391  0000A7                     dir_find@dj:
  1392                           	opt stack 0
  1393  0000A7                     _pf_read$1886:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x47
  1397  0000A7                     	ds	2
  1398  0000A9                     dir_find@dir:
  1399                           	opt stack 0
  1400  0000A9                     pf_read@sect:
  1401                           	opt stack 0
  1402                           
  1403                           ; 4 bytes @ 0x49
  1404  0000A9                     	ds	1
  1405  0000AA                     pf_write@remain:
  1406                           	opt stack 0
  1407                           
  1408                           ; 4 bytes @ 0x4A
  1409  0000AA                     	ds	1
  1410  0000AB                     ??_dir_find:
  1411                           
  1412                           ; 1 bytes @ 0x4B
  1413  0000AB                     	ds	2
  1414  0000AD                     dir_find@c:
  1415                           	opt stack 0
  1416  0000AD                     pf_read@remain:
  1417                           	opt stack 0
  1418                           
  1419                           ; 4 bytes @ 0x4D
  1420  0000AD                     	ds	1
  1421  0000AE                     dir_find@res:
  1422                           	opt stack 0
  1423  0000AE                     pf_write@clst:
  1424                           	opt stack 0
  1425                           
  1426                           ; 4 bytes @ 0x4E
  1427  0000AE                     	ds	1
  1428  0000AF                     follow_path@dj:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x4F
  1432  0000AF                     	ds	2
  1433  0000B1                     follow_path@dir:
  1434                           	opt stack 0
  1435  0000B1                     pf_read@clst:
  1436                           	opt stack 0
  1437                           
  1438                           ; 4 bytes @ 0x51
  1439  0000B1                     	ds	1
  1440  0000B2                     pf_write@cs:
  1441                           	opt stack 0
  1442                           
  1443                           ; 1 bytes @ 0x52
  1444  0000B2                     	ds	1
  1445  0000B3                     follow_path@path:
  1446                           	opt stack 0
  1447  0000B3                     pf_write@wcnt:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x53
  1451  0000B3                     	ds	1
  1452  0000B4                     pf_mount@tsect:
  1453                           	opt stack 0
  1454                           
  1455                           ; 4 bytes @ 0x54
  1456  0000B4                     	ds	1
  1457  0000B5                     follow_path@res:
  1458                           	opt stack 0
  1459  0000B5                     pf_read@cs:
  1460                           	opt stack 0
  1461  0000B5                     pf_write@fs:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x55
  1465  0000B5                     	ds	1
  1466  0000B6                     pf_open@path:
  1467                           	opt stack 0
  1468  0000B6                     pf_read@rcnt:
  1469                           	opt stack 0
  1470                           
  1471                           ; 2 bytes @ 0x56
  1472  0000B6                     	ds	2
  1473  0000B8                     ??_pf_open:
  1474  0000B8                     pf_read@fs:
  1475                           	opt stack 0
  1476  0000B8                     pf_mount@mclst:
  1477                           	opt stack 0
  1478                           
  1479                           ; 4 bytes @ 0x58
  1480  0000B8                     	ds	4
  1481  0000BC                     pf_mount@bsect:
  1482                           	opt stack 0
  1483                           
  1484                           ; 4 bytes @ 0x5C
  1485  0000BC                     	ds	4
  1486  0000C0                     pf_mount@fsize:
  1487                           	opt stack 0
  1488                           
  1489                           ; 4 bytes @ 0x60
  1490  0000C0                     	ds	4
  1491  0000C4                     pf_mount@fmt:
  1492                           	opt stack 0
  1493                           
  1494                           ; 1 bytes @ 0x64
  1495  0000C4                     	ds	10
  1496  0000CE                     
  1497                           ; 1 bytes @ 0x6E
  1498  0000CE                     	ds	2
  1499  0000D0                     escalonador@cont:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x70
  1503  0000D0                     	ds	1
  1504                           tblptru	equ	0xFF8
  1505                           tblptrh	equ	0xFF7
  1506                           tblptrl	equ	0xFF6
  1507                           tablat	equ	0xFF5
  1508                           postinc0	equ	0xFEE
  1509                           wreg	equ	0xFE8
  1510                           postdec1	equ	0xFE5
  1511                           fsr1h	equ	0xFE2
  1512                           fsr1l	equ	0xFE1
  1513                           
  1514                           	psect	cstackCOMRAM
  1515  000001                     __pcstackCOMRAM:
  1516                           	opt stack 0
  1517  000001                     tratamento_uart@received_char:
  1518                           	opt stack 0
  1519  000001                     i2write_timer_zero@timer0:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x0
  1523  000001                     	ds	2
  1524  000003                     i2write_timer_zero@timer:
  1525                           	opt stack 0
  1526                           
  1527                           ; 2 bytes @ 0x2
  1528  000003                     	ds	2
  1529  000005                     ??_isr:
  1530                           
  1531                           ; 1 bytes @ 0x4
  1532  000005                     	ds	20
  1533  000019                     isr@cont:
  1534                           	opt stack 0
  1535                           
  1536                           ; 1 bytes @ 0x18
  1537  000019                     	ds	1
  1538  00001A                     ??_recebe_dado_SPI:
  1539  00001A                     ??_WriteSPI_:
  1540  00001A                     ??_shrc_seta_bit:
  1541  00001A                     ??_shrc_apaga_bit:
  1542  00001A                     ?_leitura_adc:
  1543                           	opt stack 0
  1544  00001A                     ?_mem_cmp:
  1545                           	opt stack 0
  1546  00001A                     ?_get_clust:
  1547                           	opt stack 0
  1548  00001A                     ?___lmul:
  1549                           	opt stack 0
  1550  00001A                     ?___aldiv:
  1551                           	opt stack 0
  1552  00001A                     ?___lldiv:
  1553                           	opt stack 0
  1554  00001A                     envia_dados_shrc@contador:
  1555                           	opt stack 0
  1556  00001A                     delay@contador_ext:
  1557                           	opt stack 0
  1558  00001A                     readover@a:
  1559                           	opt stack 0
  1560  00001A                     write_timer_zero@timer0:
  1561                           	opt stack 0
  1562  00001A                     mem_set@dst:
  1563                           	opt stack 0
  1564  00001A                     mem_cmp@dst:
  1565                           	opt stack 0
  1566  00001A                     get_clust@dir:
  1567                           	opt stack 0
  1568  00001A                     ___lmul@multiplier:
  1569                           	opt stack 0
  1570  00001A                     ___aldiv@dividend:
  1571                           	opt stack 0
  1572  00001A                     ___lldiv@dividend:
  1573                           	opt stack 0
  1574                           
  1575                           ; 4 bytes @ 0x19
  1576  00001A                     	ds	1
  1577  00001B                     envia_dados_shrc@data_to_shrc:
  1578                           	opt stack 0
  1579  00001B                     delay@contador_int:
  1580                           	opt stack 0
  1581                           
  1582                           ; 1 bytes @ 0x1A
  1583  00001B                     	ds	1
  1584  00001C                     ??_leitura_adc:
  1585  00001C                     shrc_seta_bit@posicao_bit:
  1586                           	opt stack 0
  1587  00001C                     shrc_apaga_bit@posicao_bit:
  1588                           	opt stack 0
  1589  00001C                     recebe_dado_SPI@temp_var:
  1590                           	opt stack 0
  1591  00001C                     WriteSPI_@TempVar:
  1592                           	opt stack 0
  1593  00001C                     escreve_cmd_lcd@comando:
  1594                           	opt stack 0
  1595  00001C                     endereco_cursor_lcd@endereco:
  1596                           	opt stack 0
  1597  00001C                     escreve_caractere_lcd@data:
  1598                           	opt stack 0
  1599  00001C                     write_timer_zero@timer:
  1600                           	opt stack 0
  1601  00001C                     mem_set@val:
  1602                           	opt stack 0
  1603  00001C                     mem_cmp@src:
  1604                           	opt stack 0
  1605                           
  1606                           ; 2 bytes @ 0x1B
  1607  00001C                     	ds	1
  1608  00001D                     ??_init_lcd:
  1609  00001D                     response@buff:
  1610                           	opt stack 0
  1611  00001D                     WriteSPI_@dado:
  1612                           	opt stack 0
  1613  00001D                     posicao_cursor_lcd@coluna:
  1614                           	opt stack 0
  1615  00001D                     escreve_frase_ram_lcd@buffer:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x1C
  1619  00001D                     	ds	1
  1620  00001E                     ??_dummy_clocks:
  1621  00001E                     ??_get_clust:
  1622  00001E                     posicao_cursor_lcd@linha:
  1623                           	opt stack 0
  1624  00001E                     mem_set@cnt:
  1625                           	opt stack 0
  1626  00001E                     mem_cmp@cnt:
  1627                           	opt stack 0
  1628  00001E                     command@arg:
  1629                           	opt stack 0
  1630  00001E                     ___lmul@multiplicand:
  1631                           	opt stack 0
  1632  00001E                     ___aldiv@divisor:
  1633                           	opt stack 0
  1634  00001E                     ___lldiv@divisor:
  1635                           	opt stack 0
  1636                           
  1637                           ; 4 bytes @ 0x1D
  1638  00001E                     	ds	1
  1639  00001F                     posicao_cursor_lcd@endereco:
  1640                           	opt stack 0
  1641                           
  1642                           ; 1 bytes @ 0x1E
  1643  00001F                     	ds	1
  1644  000020                     ??_mensagem_inicial:
  1645  000020                     ??_mem_cmp:
  1646  000020                     dummy_clocks@n:
  1647                           	opt stack 0
  1648  000020                     inicializa_SPI@bus_mode:
  1649                           	opt stack 0
  1650  000020                     leitura_adc@canal:
  1651                           	opt stack 0
  1652  000020                     mem_set@d:
  1653                           	opt stack 0
  1654                           
  1655                           ; 2 bytes @ 0x1F
  1656  000020                     	ds	1
  1657  000021                     ??_leitura_continua_adc:
  1658  000021                     inicializa_SPI@smp_phase:
  1659                           	opt stack 0
  1660  000021                     dummy_clocks@i:
  1661                           	opt stack 0
  1662                           
  1663                           ; 2 bytes @ 0x20
  1664  000021                     	ds	1
  1665  000022                     command@CRC:
  1666                           	opt stack 0
  1667  000022                     inicializa_SPI@sync_mode:
  1668                           	opt stack 0
  1669  000022                     ___aldiv@counter:
  1670                           	opt stack 0
  1671  000022                     create_name@dj:
  1672                           	opt stack 0
  1673  000022                     ___lmul@product:
  1674                           	opt stack 0
  1675  000022                     ___lldiv@quotient:
  1676                           	opt stack 0
  1677                           
  1678                           ; 4 bytes @ 0x21
  1679  000022                     	ds	1
  1680  000023                     ??_command:
  1681  000023                     ___aldiv@sign:
  1682                           	opt stack 0
  1683  000023                     mem_cmp@d:
  1684                           	opt stack 0
  1685                           
  1686                           ; 2 bytes @ 0x22
  1687  000023                     	ds	1
  1688  000024                     command@CMD:
  1689                           	opt stack 0
  1690  000024                     create_name@path:
  1691                           	opt stack 0
  1692  000024                     ___aldiv@quotient:
  1693                           	opt stack 0
  1694                           
  1695                           ; 4 bytes @ 0x23
  1696  000024                     	ds	1
  1697  000025                     command@argument:
  1698                           	opt stack 0
  1699  000025                     mem_cmp@s:
  1700                           	opt stack 0
  1701                           
  1702                           ; 2 bytes @ 0x24
  1703  000025                     	ds	1
  1704  000026                     ??_reset:
  1705  000026                     ??_disk_readp:
  1706  000026                     ??_create_name:
  1707  000026                     ?_clust2sect:
  1708                           	opt stack 0
  1709  000026                     ___lldiv@counter:
  1710                           	opt stack 0
  1711  000026                     get_clust@fs:
  1712                           	opt stack 0
  1713  000026                     disk_writep@wr:
  1714                           	opt stack 0
  1715  000026                     clust2sect@clst:
  1716                           	opt stack 0
  1717                           
  1718                           ; 4 bytes @ 0x25
  1719  000026                     	ds	1
  1720  000027                     leitura_continua_adc@cont_int:
  1721                           	opt stack 0
  1722  000027                     mem_cmp@r:
  1723                           	opt stack 0
  1724                           
  1725                           ; 2 bytes @ 0x26
  1726  000027                     	ds	1
  1727  000028                     leitura_continua_adc@cont:
  1728                           	opt stack 0
  1729  000028                     reset@i:
  1730                           	opt stack 0
  1731  000028                     get_clust@clst:
  1732                           	opt stack 0
  1733  000028                     configura_baudrate_uart@baudrate:
  1734                           	opt stack 0
  1735                           
  1736                           ; 4 bytes @ 0x27
  1737  000028                     	ds	1
  1738  000029                     disk_writep@sc:
  1739                           	opt stack 0
  1740                           
  1741                           ; 4 bytes @ 0x28
  1742  000029                     	ds	1
  1743  00002A                     ??_check_fs:
  1744  00002A                     ?_get_fat:
  1745                           	opt stack 0
  1746  00002A                     reset@count:
  1747                           	opt stack 0
  1748  00002A                     clust2sect@fs:
  1749                           	opt stack 0
  1750  00002A                     get_fat@clst:
  1751                           	opt stack 0
  1752                           
  1753                           ; 4 bytes @ 0x29
  1754  00002A                     	ds	2
  1755  00002C                     reset@buff:
  1756                           	opt stack 0
  1757  00002C                     dir_rewind@dj:
  1758                           	opt stack 0
  1759  00002C                     configura_baudrate_uart@x:
  1760                           	opt stack 0
  1761                           
  1762                           ; 2 bytes @ 0x2B
  1763  00002C                     	ds	2
  1764  00002E                     tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1h	equ	0xFE2
  1772                           fsr1l	equ	0xFE1
  1773                           
  1774                           ; 1 bytes @ 0x2D
  1775 ;;
  1776 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1777 ;;
  1778 ;; *************** function _main *****************
  1779 ;; Defined at:
  1780 ;;		line 221 in file "main.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1794 ;;      Params:         0       0       0       0       0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1797 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1798 ;;Total ram usage:        0 bytes
  1799 ;; Hardware stack levels required when called:   13
  1800 ;; This function calls:
  1801 ;;		_controle_shrc
  1802 ;;		_escalonador
  1803 ;;		_inicializa_SPI
  1804 ;;		_inicializa_shrc
  1805 ;;		_inicializa_tarefas
  1806 ;;		_inicializa_uart
  1807 ;;		_init_hardware
  1808 ;;		_init_lcd
  1809 ;;		_leitura_chaves_sistema
  1810 ;;		_leitura_continua_adc
  1811 ;;		_mensagem_inicial
  1812 ;; This function is called by:
  1813 ;;		Startup code after reset
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text0
  1818  0032A0                     __ptext0:
  1819                           	opt stack 0
  1820  0032A0                     _main:
  1821                           	opt stack 18
  1822                           
  1823                           ;main.c: 223: init_hardware();
  1824                           
  1825                           ;incstack = 0
  1826  0032A0  EC64  F01A         	call	_init_hardware	;wreg free
  1827                           
  1828                           ;main.c: 224: inicializa_uart();
  1829  0032A4  EC11  F01A         	call	_inicializa_uart	;wreg free
  1830                           
  1831                           ;main.c: 225: init_lcd();
  1832  0032A8  EC6C  F015         	call	_init_lcd	;wreg free
  1833                           
  1834                           ;main.c: 226: inicializa_shrc();
  1835  0032AC  ECBF  F01A         	call	_inicializa_shrc	;wreg free
  1836                           
  1837                           ;main.c: 228: mensagem_inicial();
  1838  0032B0  ECC7  F016         	call	_mensagem_inicial	;wreg free
  1839                           
  1840                           ;main.c: 229: inicializa_tarefas();
  1841  0032B4  EC8F  F019         	call	_inicializa_tarefas	;wreg free
  1842                           
  1843                           ;main.c: 230: inicializa_SPI(0,3,1);
  1844  0032B8  0E03               	movlw	3
  1845  0032BA  6E20               	movwf	inicializa_SPI@bus_mode,c
  1846  0032BC  0E01               	movlw	1
  1847  0032BE  6E21               	movwf	inicializa_SPI@smp_phase,c
  1848  0032C0  0E00               	movlw	0
  1849  0032C2  EC89  F016         	call	_inicializa_SPI
  1850  0032C6                     
  1851                           ;main.c: 234: {
  1852                           ;main.c: 236: if ((sinaliza_int_timer == 1) && (2))
  1853  0032C6  043F               	decf	_sinaliza_int_timer,w,c
  1854  0032C8  A4D8               	btfss	status,2,c
  1855  0032CA  D004               	goto	l1090
  1856                           
  1857                           ;main.c: 237: {
  1858                           ;main.c: 238: sinaliza_int_timer = 0;
  1859  0032CC  0E00               	movlw	0
  1860  0032CE  6E3F               	movwf	_sinaliza_int_timer,c
  1861                           
  1862                           ;main.c: 239: escalonador();
  1863  0032D0  EC1A  F015         	call	_escalonador	;wreg free
  1864  0032D4                     l1090:
  1865                           
  1866                           ;main.c: 240: }
  1867                           ;main.c: 241: leitura_chaves_sistema();
  1868  0032D4  EC71  F019         	call	_leitura_chaves_sistema	;wreg free
  1869                           
  1870                           ;main.c: 242: controle_shrc();
  1871  0032D8  ECB0  F01A         	call	_controle_shrc	;wreg free
  1872                           
  1873                           ;main.c: 243: leitura_continua_adc();
  1874  0032DC  EC27  F011         	call	_leitura_continua_adc	;wreg free
  1875  0032E0  D7F2               	goto	l1089
  1876  0032E2                     __end_of_main:
  1877                           	opt stack 0
  1878                           tblptru	equ	0xFF8
  1879                           tblptrh	equ	0xFF7
  1880                           tblptrl	equ	0xFF6
  1881                           tablat	equ	0xFF5
  1882                           postinc0	equ	0xFEE
  1883                           wreg	equ	0xFE8
  1884                           postdec1	equ	0xFE5
  1885                           fsr1h	equ	0xFE2
  1886                           fsr1l	equ	0xFE1
  1887                           status	equ	0xFD8
  1888                           
  1889 ;; *************** function _mensagem_inicial *****************
  1890 ;; Defined at:
  1891 ;;		line 255 in file "main.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  1896 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  1    wreg      void 
  1899 ;; Registers used:
  1900 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1906 ;;      Params:         0       0       0       0       0       0       0       0       0
  1907 ;;      Locals:         0      34       0       0       0       0       0       0       0
  1908 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1909 ;;      Totals:         2      34       0       0       0       0       0       0       0
  1910 ;;Total ram usage:       36 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; Hardware stack levels required when called:    5
  1913 ;; This function calls:
  1914 ;;		_escreve_cmd_lcd
  1915 ;;		_escreve_frase_ram_lcd
  1916 ;;		_posicao_cursor_lcd
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text1
  1923  002D8E                     __ptext1:
  1924                           	opt stack 0
  1925  002D8E                     _mensagem_inicial:
  1926                           	opt stack 25
  1927                           
  1928                           ;main.c: 257: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  1929                           
  1930                           ;incstack = 0
  1931  002D8E  0E54               	movlw	low mensagem_inicial@F4035
  1932  002D90  6EF6               	movwf	tblptrl,c
  1933  002D92                     	if	1	;There is more than 1 active tblptr byte
  1934  002D92  0E61               	movlw	high mensagem_inicial@F4035
  1935  002D94  6EF7               	movwf	tblptrh,c
  1936  002D96                     	endif
  1937  002D96                     	if	0	;There are less than 3 active tblptr bytes
  1938  002D96                     	endif
  1939  002D96  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  1940  002D9A  0E10               	movlw	16
  1941  002D9C                     u10870:
  1942  002D9C  0009               	tblrd		*+
  1943  002D9E  CFF5 FFDE          	movff	tablat,postinc2
  1944  002DA2  06E8               	decf	wreg,f,c
  1945  002DA4  E2FB               	bc	u10870
  1946                           
  1947                           ;main.c: 258: const unsigned char msg_dois[17] = " 18/01/2022   ";
  1948  002DA6  0E43               	movlw	low mensagem_inicial@F4037
  1949  002DA8  6EF6               	movwf	tblptrl,c
  1950  002DAA                     	if	1	;There is more than 1 active tblptr byte
  1951  002DAA  0E61               	movlw	high mensagem_inicial@F4037
  1952  002DAC  6EF7               	movwf	tblptrh,c
  1953  002DAE                     	endif
  1954  002DAE                     	if	0	;There are less than 3 active tblptr bytes
  1955  002DAE                     	endif
  1956  002DAE  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  1957  002DB2  0E10               	movlw	16
  1958  002DB4                     u10880:
  1959  002DB4  0009               	tblrd		*+
  1960  002DB6  CFF5 FFDE          	movff	tablat,postinc2
  1961  002DBA  06E8               	decf	wreg,f,c
  1962  002DBC  E2FB               	bc	u10880
  1963                           
  1964                           ;main.c: 260: posicao_cursor_lcd(1,0);
  1965  002DBE  0E00               	movlw	0
  1966  002DC0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1967  002DC2  0E01               	movlw	1
  1968  002DC4  ECE8  F017         	call	_posicao_cursor_lcd
  1969                           
  1970                           ;main.c: 261: escreve_frase_ram_lcd(msg_linha_um);
  1971  002DC8  0E60               	movlw	low mensagem_inicial@msg_linha_um
  1972  002DCA  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1973  002DCC  0E00               	movlw	high mensagem_inicial@msg_linha_um
  1974  002DCE  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1975  002DD0  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  1976                           
  1977                           ;main.c: 263: posicao_cursor_lcd(2,0);
  1978  002DD4  0E00               	movlw	0
  1979  002DD6  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1980  002DD8  0E02               	movlw	2
  1981  002DDA  ECE8  F017         	call	_posicao_cursor_lcd
  1982                           
  1983                           ;main.c: 264: escreve_frase_ram_lcd(msg_dois);
  1984  002DDE  0E71               	movlw	low mensagem_inicial@msg_dois
  1985  002DE0  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1986  002DE2  0E00               	movlw	high mensagem_inicial@msg_dois
  1987  002DE4  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1988  002DE6  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  1989                           
  1990                           ;main.c: 266: _delay((unsigned long)((1000)*(48000000/4000.0)));
  1991  002DEA  0E3D               	movlw	61
  1992  002DEC  6E21               	movwf	(??_mensagem_inicial+1)& (0+255),c
  1993  002DEE  0EE1               	movlw	225
  1994  002DF0  6E20               	movwf	??_mensagem_inicial& (0+255),c
  1995  002DF2  0E40               	movlw	64
  1996  002DF4                     u12097:
  1997  002DF4  2EE8               	decfsz	wreg,f,c
  1998  002DF6  D7FE               	bra	u12097
  1999  002DF8  2E20               	decfsz	??_mensagem_inicial& (0+255),f,c
  2000  002DFA  D7FC               	bra	u12097
  2001  002DFC  2E21               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  2002  002DFE  D7FA               	bra	u12097
  2003                           
  2004                           ;main.c: 267: escreve_cmd_lcd(0b00000001);
  2005  002E00  0E01               	movlw	1
  2006  002E02  EC02  F016         	call	_escreve_cmd_lcd
  2007  002E06  0012               	return		;funcret
  2008  002E08                     __end_of_mensagem_inicial:
  2009                           	opt stack 0
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           postdec1	equ	0xFE5
  2017                           fsr1h	equ	0xFE2
  2018                           fsr1l	equ	0xFE1
  2019                           postinc2	equ	0xFDE
  2020                           status	equ	0xFD8
  2021                           
  2022 ;; *************** function _leitura_continua_adc *****************
  2023 ;; Defined at:
  2024 ;;		line 109 in file "bibliotecas/adc.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;		None
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;  cont_int        1   38[COMRAM] unsigned char 
  2029 ;;  cont            1   39[COMRAM] unsigned char 
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      void 
  2032 ;; Registers used:
  2033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2039 ;;      Params:         0       0       0       0       0       0       0       0       0
  2040 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2041 ;;      Temps:          6       0       0       0       0       0       0       0       0
  2042 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2043 ;;Total ram usage:        8 bytes
  2044 ;; Hardware stack levels used:    1
  2045 ;; Hardware stack levels required when called:    3
  2046 ;; This function calls:
  2047 ;;		_leitura_adc
  2048 ;; This function is called by:
  2049 ;;		_main
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text2
  2054  00224E                     __ptext2:
  2055                           	opt stack 0
  2056  00224E                     _leitura_continua_adc:
  2057                           	opt stack 27
  2058                           
  2059                           ;adc.c: 111: for(unsigned char cont = 0; cont < 2; cont++)
  2060                           
  2061                           ;incstack = 0
  2062  00224E  0E00               	movlw	0
  2063  002250  6E28               	movwf	leitura_continua_adc@cont,c
  2064  002252                     l6118:
  2065  002252  0E01               	movlw	1
  2066  002254  6428               	cpfsgt	leitura_continua_adc@cont,c
  2067  002256  D001               	goto	l181
  2068  002258  0012               	return	
  2069  00225A                     l181:
  2070                           
  2071                           ;adc.c: 112: {
  2072                           ;adc.c: 113: for(unsigned char cont_int = 0; cont_int < 8; cont_int++)
  2073  00225A  0E00               	movlw	0
  2074  00225C  6E27               	movwf	leitura_continua_adc@cont_int,c
  2075  00225E                     l6124:
  2076  00225E  0E07               	movlw	7
  2077  002260  6427               	cpfsgt	leitura_continua_adc@cont_int,c
  2078  002262  D001               	goto	l183
  2079  002264  D05D               	goto	u5790
  2080  002266                     l183:
  2081                           
  2082                           ;adc.c: 114: {
  2083                           ;adc.c: 115: valor_leitura_adc[cont].leituras[cont_int] = leitura_adc(cont);
  2084  002266  5028               	movf	leitura_continua_adc@cont,w,c
  2085  002268  EC55  F018         	call	_leitura_adc
  2086  00226C  5027               	movf	leitura_continua_adc@cont_int,w,c
  2087  00226E  0D02               	mullw	2
  2088  002270  0E01               	movlw	1
  2089  002272  26F3               	addwf	prodl,f,c
  2090  002274  0E00               	movlw	0
  2091  002276  22F4               	addwfc	prodh,f,c
  2092  002278  0E00               	movlw	low _valor_leitura_adc
  2093  00227A  6E21               	movwf	??_leitura_continua_adc& (0+255),c
  2094  00227C  0E01               	movlw	high _valor_leitura_adc
  2095  00227E  6E22               	movwf	(??_leitura_continua_adc+1)& (0+255),c
  2096  002280  50F3               	movf	prodl,w,c
  2097  002282  2621               	addwf	??_leitura_continua_adc,f,c
  2098  002284  50F4               	movf	prodh,w,c
  2099  002286  2222               	addwfc	??_leitura_continua_adc+1,f,c
  2100  002288  5028               	movf	leitura_continua_adc@cont,w,c
  2101  00228A  0D13               	mullw	19
  2102  00228C  50F3               	movf	prodl,w,c
  2103  00228E  2421               	addwf	??_leitura_continua_adc,w,c
  2104  002290  6ED9               	movwf	fsr2l,c
  2105  002292  50F4               	movf	prodh,w,c
  2106  002294  2022               	addwfc	??_leitura_continua_adc+1,w,c
  2107  002296  6EDA               	movwf	fsr2h,c
  2108  002298  C01A  FFDE         	movff	?_leitura_adc,postinc2
  2109  00229C  C01B  FFDD         	movff	?_leitura_adc+1,postdec2
  2110                           
  2111                           ;adc.c: 116: valor_leitura_adc[cont].media = valor_leitura_adc[cont].media + valor_leitu
      +                          ra_adc[cont].leituras[cont_int];
  2112  0022A0  5027               	movf	leitura_continua_adc@cont_int,w,c
  2113  0022A2  0D02               	mullw	2
  2114  0022A4  0E01               	movlw	1
  2115  0022A6  26F3               	addwf	prodl,f,c
  2116  0022A8  0E00               	movlw	0
  2117  0022AA  22F4               	addwfc	prodh,f,c
  2118  0022AC  0E00               	movlw	low _valor_leitura_adc
  2119  0022AE  6E21               	movwf	??_leitura_continua_adc& (0+255),c
  2120  0022B0  0E01               	movlw	high _valor_leitura_adc
  2121  0022B2  6E22               	movwf	(??_leitura_continua_adc+1)& (0+255),c
  2122  0022B4  50F3               	movf	prodl,w,c
  2123  0022B6  2621               	addwf	??_leitura_continua_adc,f,c
  2124  0022B8  50F4               	movf	prodh,w,c
  2125  0022BA  2222               	addwfc	??_leitura_continua_adc+1,f,c
  2126  0022BC  5028               	movf	leitura_continua_adc@cont,w,c
  2127  0022BE  0D13               	mullw	19
  2128  0022C0  50F3               	movf	prodl,w,c
  2129  0022C2  2421               	addwf	??_leitura_continua_adc,w,c
  2130  0022C4  6ED9               	movwf	fsr2l,c
  2131  0022C6  50F4               	movf	prodh,w,c
  2132  0022C8  2022               	addwfc	??_leitura_continua_adc+1,w,c
  2133  0022CA  6EDA               	movwf	fsr2h,c
  2134  0022CC  CFDE F023          	movff	postinc2,??_leitura_continua_adc+2
  2135  0022D0  CFDD F024          	movff	postdec2,??_leitura_continua_adc+3
  2136  0022D4  5028               	movf	leitura_continua_adc@cont,w,c
  2137  0022D6  0D13               	mullw	19
  2138  0022D8  0E11               	movlw	17
  2139  0022DA  26F3               	addwf	prodl,f,c
  2140  0022DC  0E00               	movlw	0
  2141  0022DE  22F4               	addwfc	prodh,f,c
  2142  0022E0  0E00               	movlw	low _valor_leitura_adc
  2143  0022E2  24F3               	addwf	prodl,w,c
  2144  0022E4  6ED9               	movwf	fsr2l,c
  2145  0022E6  0E01               	movlw	high _valor_leitura_adc
  2146  0022E8  20F4               	addwfc	prodh,w,c
  2147  0022EA  6EDA               	movwf	fsr2h,c
  2148  0022EC  CFDE F025          	movff	postinc2,??_leitura_continua_adc+4
  2149  0022F0  CFDD F026          	movff	postdec2,??_leitura_continua_adc+5
  2150  0022F4  5023               	movf	??_leitura_continua_adc+2,w,c
  2151  0022F6  2625               	addwf	??_leitura_continua_adc+4,f,c
  2152  0022F8  5024               	movf	??_leitura_continua_adc+3,w,c
  2153  0022FA  2226               	addwfc	??_leitura_continua_adc+5,f,c
  2154  0022FC  5028               	movf	leitura_continua_adc@cont,w,c
  2155  0022FE  0D13               	mullw	19
  2156  002300  0E11               	movlw	17
  2157  002302  26F3               	addwf	prodl,f,c
  2158  002304  0E00               	movlw	0
  2159  002306  22F4               	addwfc	prodh,f,c
  2160  002308  0E00               	movlw	low _valor_leitura_adc
  2161  00230A  24F3               	addwf	prodl,w,c
  2162  00230C  6ED9               	movwf	fsr2l,c
  2163  00230E  0E01               	movlw	high _valor_leitura_adc
  2164  002310  20F4               	addwfc	prodh,w,c
  2165  002312  6EDA               	movwf	fsr2h,c
  2166  002314  C025  FFDE         	movff	??_leitura_continua_adc+4,postinc2
  2167  002318  C026  FFDD         	movff	??_leitura_continua_adc+5,postdec2
  2168  00231C  2A27               	incf	leitura_continua_adc@cont_int,f,c
  2169  00231E  D79F               	goto	l6124
  2170  002320                     u5790:
  2171                           
  2172                           ;adc.c: 117: }
  2173                           ;adc.c: 118: valor_leitura_adc[cont].media = valor_leitura_adc[cont].media / 8;
  2174  002320  5028               	movf	leitura_continua_adc@cont,w,c
  2175  002322  0D13               	mullw	19
  2176  002324  0E11               	movlw	17
  2177  002326  26F3               	addwf	prodl,f,c
  2178  002328  0E00               	movlw	0
  2179  00232A  22F4               	addwfc	prodh,f,c
  2180  00232C  0E00               	movlw	low _valor_leitura_adc
  2181  00232E  24F3               	addwf	prodl,w,c
  2182  002330  6ED9               	movwf	fsr2l,c
  2183  002332  0E01               	movlw	high _valor_leitura_adc
  2184  002334  20F4               	addwfc	prodh,w,c
  2185  002336  6EDA               	movwf	fsr2h,c
  2186  002338  CFDE F021          	movff	postinc2,??_leitura_continua_adc
  2187  00233C  CFDD F022          	movff	postdec2,??_leitura_continua_adc+1
  2188  002340  90D8               	bcf	status,0,c
  2189  002342  3222               	rrcf	??_leitura_continua_adc+1,f,c
  2190  002344  3221               	rrcf	??_leitura_continua_adc,f,c
  2191  002346  90D8               	bcf	status,0,c
  2192  002348  3222               	rrcf	??_leitura_continua_adc+1,f,c
  2193  00234A  3221               	rrcf	??_leitura_continua_adc,f,c
  2194  00234C  90D8               	bcf	status,0,c
  2195  00234E  3222               	rrcf	??_leitura_continua_adc+1,f,c
  2196  002350  3221               	rrcf	??_leitura_continua_adc,f,c
  2197  002352  5028               	movf	leitura_continua_adc@cont,w,c
  2198  002354  0D13               	mullw	19
  2199  002356  0E11               	movlw	17
  2200  002358  26F3               	addwf	prodl,f,c
  2201  00235A  0E00               	movlw	0
  2202  00235C  22F4               	addwfc	prodh,f,c
  2203  00235E  0E00               	movlw	low _valor_leitura_adc
  2204  002360  24F3               	addwf	prodl,w,c
  2205  002362  6ED9               	movwf	fsr2l,c
  2206  002364  0E01               	movlw	high _valor_leitura_adc
  2207  002366  20F4               	addwfc	prodh,w,c
  2208  002368  6EDA               	movwf	fsr2h,c
  2209  00236A  C021  FFDE         	movff	??_leitura_continua_adc,postinc2
  2210  00236E  C022  FFDD         	movff	??_leitura_continua_adc+1,postdec2
  2211  002372  2A28               	incf	leitura_continua_adc@cont,f,c
  2212  002374  D76E               	goto	l6118
  2213  002376                     __end_of_leitura_continua_adc:
  2214                           	opt stack 0
  2215                           tblptru	equ	0xFF8
  2216                           tblptrh	equ	0xFF7
  2217                           tblptrl	equ	0xFF6
  2218                           tablat	equ	0xFF5
  2219                           prodh	equ	0xFF4
  2220                           prodl	equ	0xFF3
  2221                           postinc0	equ	0xFEE
  2222                           wreg	equ	0xFE8
  2223                           postdec1	equ	0xFE5
  2224                           fsr1h	equ	0xFE2
  2225                           fsr1l	equ	0xFE1
  2226                           postinc2	equ	0xFDE
  2227                           postdec2	equ	0xFDD
  2228                           fsr2h	equ	0xFDA
  2229                           fsr2l	equ	0xFD9
  2230                           status	equ	0xFD8
  2231                           
  2232 ;; *************** function _leitura_adc *****************
  2233 ;; Defined at:
  2234 ;;		line 76 in file "bibliotecas/adc.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;  canal           1    wreg     unsigned char 
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;  canal           1   31[COMRAM] unsigned char 
  2239 ;; Return value:  Size  Location     Type
  2240 ;;                  2   25[COMRAM] unsigned int 
  2241 ;; Registers used:
  2242 ;;		wreg, status,2, status,0
  2243 ;; Tracked objects:
  2244 ;;		On entry : 0/0
  2245 ;;		On exit  : 0/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2248 ;;      Params:         2       0       0       0       0       0       0       0       0
  2249 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2250 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2251 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2252 ;;Total ram usage:        7 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; Hardware stack levels required when called:    2
  2255 ;; This function calls:
  2256 ;;		Nothing
  2257 ;; This function is called by:
  2258 ;;		_leitura_continua_adc
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           	psect	text3
  2263  0030AA                     __ptext3:
  2264                           	opt stack 0
  2265  0030AA                     _leitura_adc:
  2266                           	opt stack 27
  2267                           
  2268                           ;incstack = 0
  2269                           ;leitura_adc@canal stored from wreg
  2270  0030AA  6E20               	movwf	leitura_adc@canal,c
  2271                           
  2272                           ;adc.c: 78: switch(canal)
  2273  0030AC  D009               	goto	l169
  2274  0030AE                     
  2275                           ;adc.c: 81: ADCON0 = 0x01;
  2276  0030AE  0E01               	movlw	1
  2277  0030B0  D005               	goto	L3
  2278  0030B2                     
  2279                           ;adc.c: 85: ADCON0 = 0x05;
  2280  0030B2  0E05               	movlw	5
  2281  0030B4  D003               	goto	L3
  2282  0030B6                     
  2283                           ;adc.c: 89: ADCON0 = 0x09;
  2284  0030B6  0E09               	movlw	9
  2285  0030B8  D001               	goto	L3
  2286  0030BA                     
  2287                           ;adc.c: 93: ADCON0 = 0x0D;
  2288  0030BA  0E0D               	movlw	13
  2289  0030BC                     L3:
  2290  0030BC  6EC2               	movwf	4034,c	;volatile
  2291                           
  2292                           ;adc.c: 96: }
  2293                           
  2294                           ;adc.c: 94: break;
  2295  0030BE  D00D               	goto	l171
  2296  0030C0                     l169:
  2297  0030C0  5020               	movf	leitura_adc@canal,w,c
  2298                           
  2299                           ; Switch size 1, requested type "space"
  2300                           ; Number of cases is 4, Range of values is 0 to 3
  2301                           ; switch strategies available:
  2302                           ; Name         Instructions Cycles
  2303                           ; simple_byte           13     7 (average)
  2304                           ;	Chosen strategy is simple_byte
  2305  0030C2  0A00               	xorlw	0	; case 0
  2306  0030C4  B4D8               	btfsc	status,2,c
  2307  0030C6  D7F3               	goto	l170
  2308  0030C8  0A01               	xorlw	1	; case 1
  2309  0030CA  B4D8               	btfsc	status,2,c
  2310  0030CC  D7F2               	goto	l172
  2311  0030CE  0A03               	xorlw	3	; case 2
  2312  0030D0  B4D8               	btfsc	status,2,c
  2313  0030D2  D7F1               	goto	l173
  2314  0030D4  0A01               	xorlw	1	; case 3
  2315  0030D6  B4D8               	btfsc	status,2,c
  2316  0030D8  D7F0               	goto	l174
  2317  0030DA                     l171:
  2318                           
  2319                           ;adc.c: 97: ADCON0bits.GO=1;
  2320  0030DA  82C2               	bsf	4034,1,c	;volatile
  2321  0030DC  B2C2               	btfsc	4034,1,c	;volatile
  2322  0030DE  D7FE               	goto	l176
  2323                           
  2324                           ;adc.c: 100: return ((((unsigned int)ADRESH)<<2)|(ADRESL>>6));
  2325  0030E0  CFC3 F01C          	movff	4035,??_leitura_adc	;volatile
  2326  0030E4  0E06               	movlw	6
  2327  0030E6  6E1D               	movwf	(??_leitura_adc+1)& (0+255),c
  2328  0030E8                     u5585:
  2329  0030E8  90D8               	bcf	status,0,c
  2330  0030EA  321C               	rrcf	??_leitura_adc,f,c
  2331  0030EC  2E1D               	decfsz	(??_leitura_adc+1)& (0+255),f,c
  2332  0030EE  D7FC               	goto	u5585
  2333  0030F0  501C               	movf	??_leitura_adc,w,c
  2334  0030F2  CFC4 F01E          	movff	4036,??_leitura_adc+2	;volatile
  2335  0030F6  6A1F               	clrf	(??_leitura_adc+3)& (0+255),c
  2336  0030F8  90D8               	bcf	status,0,c
  2337  0030FA  361E               	rlcf	??_leitura_adc+2,f,c
  2338  0030FC  361F               	rlcf	??_leitura_adc+3,f,c
  2339  0030FE  90D8               	bcf	status,0,c
  2340  003100  361E               	rlcf	??_leitura_adc+2,f,c
  2341  003102  361F               	rlcf	??_leitura_adc+3,f,c
  2342  003104  101E               	iorwf	??_leitura_adc+2,w,c
  2343  003106  6E1A               	movwf	?_leitura_adc,c
  2344  003108  501F               	movf	??_leitura_adc+3,w,c
  2345  00310A  6E1B               	movwf	?_leitura_adc+1,c
  2346  00310C  0012               	return	
  2347  00310E                     __end_of_leitura_adc:
  2348                           	opt stack 0
  2349                           tblptru	equ	0xFF8
  2350                           tblptrh	equ	0xFF7
  2351                           tblptrl	equ	0xFF6
  2352                           tablat	equ	0xFF5
  2353                           prodh	equ	0xFF4
  2354                           prodl	equ	0xFF3
  2355                           postinc0	equ	0xFEE
  2356                           wreg	equ	0xFE8
  2357                           postdec1	equ	0xFE5
  2358                           fsr1h	equ	0xFE2
  2359                           fsr1l	equ	0xFE1
  2360                           postinc2	equ	0xFDE
  2361                           postdec2	equ	0xFDD
  2362                           fsr2h	equ	0xFDA
  2363                           fsr2l	equ	0xFD9
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _leitura_chaves_sistema *****************
  2367 ;; Defined at:
  2368 ;;		line 47 in file "bibliotecas/chaves.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2382 ;;      Params:         0       0       0       0       0       0       0       0       0
  2383 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2384 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2385 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2386 ;;Total ram usage:        0 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    2
  2389 ;; This function calls:
  2390 ;;		Nothing
  2391 ;; This function is called by:
  2392 ;;		_main
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text4
  2397  0032E2                     __ptext4:
  2398                           	opt stack 0
  2399  0032E2                     _leitura_chaves_sistema:
  2400                           	opt stack 28
  2401                           
  2402                           ;chaves.c: 49: info_chaves[0] = PORTCbits.RC0;
  2403                           
  2404                           ;incstack = 0
  2405  0032E2  0E00               	movlw	0
  2406  0032E4  B082               	btfsc	3970,0,c	;volatile
  2407  0032E6  0E01               	movlw	1
  2408  0032E8  0101               	movlb	1	; () banked
  2409  0032EA  6F4E               	movwf	_info_chaves& (0+255),b
  2410                           
  2411                           ;chaves.c: 50: info_chaves[1] = PORTCbits.RC1;
  2412  0032EC  0E00               	movlw	0
  2413  0032EE  B282               	btfsc	3970,1,c	;volatile
  2414  0032F0  0E01               	movlw	1
  2415  0032F2  6F4F               	movwf	(_info_chaves+1)& (0+255),b
  2416                           
  2417                           ;chaves.c: 51: info_chaves[2] = PORTCbits.RC2;
  2418  0032F4  0E00               	movlw	0
  2419  0032F6  B482               	btfsc	3970,2,c	;volatile
  2420  0032F8  0E01               	movlw	1
  2421  0032FA  6F50               	movwf	(_info_chaves+2)& (0+255),b
  2422                           
  2423                           ;chaves.c: 52: info_chaves[3] = PORTAbits.RA2;
  2424  0032FC  0E00               	movlw	0
  2425  0032FE  B480               	btfsc	3968,2,c	;volatile
  2426  003300  0E01               	movlw	1
  2427  003302  6F51               	movwf	(_info_chaves+3)& (0+255),b
  2428                           
  2429                           ;chaves.c: 53: info_chaves[4] = PORTAbits.RA5;
  2430  003304  0E00               	movlw	0
  2431  003306  BA80               	btfsc	3968,5,c	;volatile
  2432  003308  0E01               	movlw	1
  2433  00330A  6F52               	movwf	(_info_chaves+4)& (0+255),b
  2434                           
  2435                           ;chaves.c: 54: info_chaves[5] = PORTEbits.RE0;
  2436  00330C  0E00               	movlw	0
  2437  00330E  B084               	btfsc	3972,0,c	;volatile
  2438  003310  0E01               	movlw	1
  2439  003312  6F53               	movwf	(_info_chaves+5)& (0+255),b
  2440                           
  2441                           ;chaves.c: 55: info_chaves[6] = PORTEbits.RE1;
  2442  003314  0E00               	movlw	0
  2443  003316  B284               	btfsc	3972,1,c	;volatile
  2444  003318  0E01               	movlw	1
  2445  00331A  6F54               	movwf	(_info_chaves+6)& (0+255),b
  2446                           
  2447                           ; BSR set to: 1
  2448  00331C  0012               	return		;funcret
  2449  00331E                     __end_of_leitura_chaves_sistema:
  2450                           	opt stack 0
  2451                           tblptru	equ	0xFF8
  2452                           tblptrh	equ	0xFF7
  2453                           tblptrl	equ	0xFF6
  2454                           tablat	equ	0xFF5
  2455                           prodh	equ	0xFF4
  2456                           prodl	equ	0xFF3
  2457                           postinc0	equ	0xFEE
  2458                           wreg	equ	0xFE8
  2459                           postdec1	equ	0xFE5
  2460                           fsr1h	equ	0xFE2
  2461                           fsr1l	equ	0xFE1
  2462                           postinc2	equ	0xFDE
  2463                           postdec2	equ	0xFDD
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _init_lcd *****************
  2469 ;; Defined at:
  2470 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;		None
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;		None
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  1    wreg      void 
  2477 ;; Registers used:
  2478 ;;		wreg, status,2, status,0, cstack
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2484 ;;      Params:         0       0       0       0       0       0       0       0       0
  2485 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2486 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2487 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2488 ;;Total ram usage:        1 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    4
  2491 ;; This function calls:
  2492 ;;		_delay
  2493 ;;		_escreve_cmd_lcd
  2494 ;; This function is called by:
  2495 ;;		_main
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499                           	psect	text5
  2500  002AD8                     __ptext5:
  2501                           	opt stack 0
  2502  002AD8                     _init_lcd:
  2503                           	opt stack 26
  2504                           
  2505                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2506                           
  2507                           ; BSR set to: 1
  2508                           ;incstack = 0
  2509  002AD8  9495               	bcf	3989,2,c	;volatile
  2510                           
  2511                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2512  002ADA  9295               	bcf	3989,1,c	;volatile
  2513                           
  2514                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2515  002ADC  9095               	bcf	3989,0,c	;volatile
  2516                           
  2517                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2518  002ADE  9895               	bcf	3989,4,c	;volatile
  2519                           
  2520                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2521  002AE0  9A95               	bcf	3989,5,c	;volatile
  2522                           
  2523                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2524  002AE2  9C95               	bcf	3989,6,c	;volatile
  2525                           
  2526                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2527  002AE4  9E95               	bcf	3989,7,c	;volatile
  2528                           
  2529                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2530  002AE6  9483               	bcf	3971,2,c	;volatile
  2531                           
  2532                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2533  002AE8  9283               	bcf	3971,1,c	;volatile
  2534                           
  2535                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2536  002AEA  9083               	bcf	3971,0,c	;volatile
  2537                           
  2538                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2539  002AEC  9E83               	bcf	3971,7,c	;volatile
  2540                           
  2541                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2542  002AEE  9C83               	bcf	3971,6,c	;volatile
  2543                           
  2544                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2545  002AF0  8A83               	bsf	3971,5,c	;volatile
  2546                           
  2547                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2548  002AF2  8883               	bsf	3971,4,c	;volatile
  2549                           
  2550                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2551  002AF4  0EEA               	movlw	234
  2552  002AF6  6E1D               	movwf	??_init_lcd& (0+255),c
  2553  002AF8  0EC3               	movlw	195
  2554  002AFA                     u12107:
  2555  002AFA  2EE8               	decfsz	wreg,f,c
  2556  002AFC  D7FE               	bra	u12107
  2557  002AFE  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2558  002B00  D7FC               	bra	u12107
  2559  002B02  F000               	nop	
  2560                           
  2561                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2562  002B04  8083               	bsf	3971,0,c	;volatile
  2563                           
  2564                           ;display_lcd.c: 108: delay();
  2565  002B06  ECFF  F019         	call	_delay	;wreg free
  2566                           
  2567                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2568  002B0A  9083               	bcf	3971,0,c	;volatile
  2569                           
  2570                           ;display_lcd.c: 110: delay();
  2571  002B0C  ECFF  F019         	call	_delay	;wreg free
  2572                           
  2573                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2574  002B10  0E4E               	movlw	78
  2575  002B12  6E1D               	movwf	??_init_lcd& (0+255),c
  2576  002B14  0EEB               	movlw	235
  2577  002B16                     u12117:
  2578  002B16  2EE8               	decfsz	wreg,f,c
  2579  002B18  D7FE               	bra	u12117
  2580  002B1A  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2581  002B1C  D7FC               	bra	u12117
  2582  002B1E  F000               	nop	
  2583                           
  2584                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2585  002B20  8083               	bsf	3971,0,c	;volatile
  2586                           
  2587                           ;display_lcd.c: 119: delay();
  2588  002B22  ECFF  F019         	call	_delay	;wreg free
  2589                           
  2590                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2591  002B26  9083               	bcf	3971,0,c	;volatile
  2592                           
  2593                           ;display_lcd.c: 121: delay();
  2594  002B28  ECFF  F019         	call	_delay	;wreg free
  2595                           
  2596                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2597  002B2C  0E4E               	movlw	78
  2598  002B2E  6E1D               	movwf	??_init_lcd& (0+255),c
  2599  002B30  0EEB               	movlw	235
  2600  002B32                     u12127:
  2601  002B32  2EE8               	decfsz	wreg,f,c
  2602  002B34  D7FE               	bra	u12127
  2603  002B36  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2604  002B38  D7FC               	bra	u12127
  2605  002B3A  F000               	nop	
  2606                           
  2607                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2608  002B3C  8083               	bsf	3971,0,c	;volatile
  2609                           
  2610                           ;display_lcd.c: 130: delay();
  2611  002B3E  ECFF  F019         	call	_delay	;wreg free
  2612                           
  2613                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2614  002B42  9083               	bcf	3971,0,c	;volatile
  2615                           
  2616                           ;display_lcd.c: 132: delay();
  2617  002B44  ECFF  F019         	call	_delay	;wreg free
  2618                           
  2619                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2620  002B48  9E83               	bcf	3971,7,c	;volatile
  2621                           
  2622                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2623  002B4A  9C83               	bcf	3971,6,c	;volatile
  2624                           
  2625                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2626  002B4C  8A83               	bsf	3971,5,c	;volatile
  2627                           
  2628                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2629  002B4E  9883               	bcf	3971,4,c	;volatile
  2630                           
  2631                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2632  002B50  8083               	bsf	3971,0,c	;volatile
  2633                           
  2634                           ;display_lcd.c: 143: delay();
  2635  002B52  ECFF  F019         	call	_delay	;wreg free
  2636                           
  2637                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2638  002B56  9083               	bcf	3971,0,c	;volatile
  2639                           
  2640                           ;display_lcd.c: 145: delay();
  2641  002B58  ECFF  F019         	call	_delay	;wreg free
  2642                           
  2643                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2644  002B5C  0E28               	movlw	40
  2645  002B5E  EC02  F016         	call	_escreve_cmd_lcd
  2646                           
  2647                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2648  002B62  0E06               	movlw	6
  2649  002B64  EC02  F016         	call	_escreve_cmd_lcd
  2650                           
  2651                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2652  002B68  0E0E               	movlw	14
  2653  002B6A  EC02  F016         	call	_escreve_cmd_lcd
  2654                           
  2655                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2656  002B6E  0E01               	movlw	1
  2657  002B70  EC02  F016         	call	_escreve_cmd_lcd
  2658  002B74  0012               	return		;funcret
  2659  002B76                     __end_of_init_lcd:
  2660                           	opt stack 0
  2661                           tblptru	equ	0xFF8
  2662                           tblptrh	equ	0xFF7
  2663                           tblptrl	equ	0xFF6
  2664                           tablat	equ	0xFF5
  2665                           prodh	equ	0xFF4
  2666                           prodl	equ	0xFF3
  2667                           postinc0	equ	0xFEE
  2668                           wreg	equ	0xFE8
  2669                           postdec1	equ	0xFE5
  2670                           fsr1h	equ	0xFE2
  2671                           fsr1l	equ	0xFE1
  2672                           postinc2	equ	0xFDE
  2673                           postdec2	equ	0xFDD
  2674                           fsr2h	equ	0xFDA
  2675                           fsr2l	equ	0xFD9
  2676                           status	equ	0xFD8
  2677                           
  2678 ;; *************** function _init_hardware *****************
  2679 ;; Defined at:
  2680 ;;		line 55 in file "bibliotecas/hardware.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;		None
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;		None
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  1    wreg      void 
  2687 ;; Registers used:
  2688 ;;		wreg, status,2, cstack
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2694 ;;      Params:         0       0       0       0       0       0       0       0       0
  2695 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2696 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2697 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2698 ;;Total ram usage:        0 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    4
  2701 ;; This function calls:
  2702 ;;		_config_timer_dois
  2703 ;;		_config_timer_zero
  2704 ;;		_init_interrupt
  2705 ;;		_init_oscilador
  2706 ;;		_init_ports
  2707 ;; This function is called by:
  2708 ;;		_main
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           	psect	text6
  2713  0034C8                     __ptext6:
  2714                           	opt stack 0
  2715  0034C8                     _init_hardware:
  2716                           	opt stack 26
  2717                           
  2718                           ;hardware.c: 58: init_oscilador();
  2719                           
  2720                           ;incstack = 0
  2721  0034C8  ECBB  F01A         	call	_init_oscilador	;wreg free
  2722                           
  2723                           ;hardware.c: 61: init_ports();
  2724  0034CC  EC58  F01A         	call	_init_ports	;wreg free
  2725                           
  2726                           ;hardware.c: 64: config_timer_zero();
  2727  0034D0  EC3F  F01A         	call	_config_timer_zero	;wreg free
  2728                           
  2729                           ;hardware.c: 67: config_timer_dois();
  2730  0034D4  ECA4  F01A         	call	_config_timer_dois	;wreg free
  2731                           
  2732                           ;hardware.c: 70: init_interrupt();
  2733  0034D8  EC79  F01A         	call	_init_interrupt	;wreg free
  2734  0034DC  0012               	return		;funcret
  2735  0034DE                     __end_of_init_hardware:
  2736                           	opt stack 0
  2737                           tblptru	equ	0xFF8
  2738                           tblptrh	equ	0xFF7
  2739                           tblptrl	equ	0xFF6
  2740                           tablat	equ	0xFF5
  2741                           prodh	equ	0xFF4
  2742                           prodl	equ	0xFF3
  2743                           postinc0	equ	0xFEE
  2744                           wreg	equ	0xFE8
  2745                           postdec1	equ	0xFE5
  2746                           fsr1h	equ	0xFE2
  2747                           fsr1l	equ	0xFE1
  2748                           postinc2	equ	0xFDE
  2749                           postdec2	equ	0xFDD
  2750                           fsr2h	equ	0xFDA
  2751                           fsr2l	equ	0xFD9
  2752                           status	equ	0xFD8
  2753                           
  2754 ;; *************** function _init_ports *****************
  2755 ;; Defined at:
  2756 ;;		line 154 in file "bibliotecas/hardware.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;		None
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;		None
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg, status,2
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2770 ;;      Params:         0       0       0       0       0       0       0       0       0
  2771 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2772 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2773 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2774 ;;Total ram usage:        0 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    2
  2777 ;; This function calls:
  2778 ;;		Nothing
  2779 ;; This function is called by:
  2780 ;;		_init_hardware
  2781 ;; This function uses a non-reentrant model
  2782 ;;
  2783                           
  2784                           	psect	text7
  2785  0034B0                     __ptext7:
  2786                           	opt stack 0
  2787  0034B0                     _init_ports:
  2788                           	opt stack 27
  2789                           
  2790                           ;hardware.c: 156: TRISB = 0b00000001;
  2791                           
  2792                           ;incstack = 0
  2793  0034B0  0E01               	movlw	1
  2794  0034B2  6E93               	movwf	3987,c	;volatile
  2795                           
  2796                           ;hardware.c: 157: LATB = 0xFF;
  2797  0034B4  688A               	setf	3978,c	;volatile
  2798                           
  2799                           ;hardware.c: 158: TRISD = 0x00;
  2800  0034B6  0E00               	movlw	0
  2801  0034B8  6E95               	movwf	3989,c	;volatile
  2802                           
  2803                           ;hardware.c: 159: TRISA = 0b00000111;
  2804  0034BA  0E07               	movlw	7
  2805  0034BC  6E92               	movwf	3986,c	;volatile
  2806                           
  2807                           ;hardware.c: 160: TRISC = 0x01111111;
  2808  0034BE  0E11               	movlw	17
  2809  0034C0  6E94               	movwf	3988,c	;volatile
  2810                           
  2811                           ;hardware.c: 161: TRISE = 0b00000011;
  2812  0034C2  0E03               	movlw	3
  2813  0034C4  6E96               	movwf	3990,c	;volatile
  2814  0034C6  0012               	return		;funcret
  2815  0034C8                     __end_of_init_ports:
  2816                           	opt stack 0
  2817                           tblptru	equ	0xFF8
  2818                           tblptrh	equ	0xFF7
  2819                           tblptrl	equ	0xFF6
  2820                           tablat	equ	0xFF5
  2821                           prodh	equ	0xFF4
  2822                           prodl	equ	0xFF3
  2823                           postinc0	equ	0xFEE
  2824                           wreg	equ	0xFE8
  2825                           postdec1	equ	0xFE5
  2826                           fsr1h	equ	0xFE2
  2827                           fsr1l	equ	0xFE1
  2828                           postinc2	equ	0xFDE
  2829                           postdec2	equ	0xFDD
  2830                           fsr2h	equ	0xFDA
  2831                           fsr2l	equ	0xFD9
  2832                           status	equ	0xFD8
  2833                           
  2834 ;; *************** function _init_oscilador *****************
  2835 ;; Defined at:
  2836 ;;		line 171 in file "bibliotecas/hardware.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;		None
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		None
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2850 ;;      Params:         0       0       0       0       0       0       0       0       0
  2851 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2852 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2853 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2854 ;;Total ram usage:        0 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    2
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_init_hardware
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text8
  2865  003576                     __ptext8:
  2866                           	opt stack 0
  2867  003576                     _init_oscilador:
  2868                           	opt stack 27
  2869                           
  2870                           ;hardware.c: 174: OSCCONbits.IRCF0 = 1;
  2871                           
  2872                           ;incstack = 0
  2873  003576  88D3               	bsf	4051,4,c	;volatile
  2874                           
  2875                           ;hardware.c: 175: OSCCONbits.IRCF1 = 1;
  2876  003578  8AD3               	bsf	4051,5,c	;volatile
  2877                           
  2878                           ;hardware.c: 176: OSCCONbits.IRCF2 = 1;
  2879  00357A  8CD3               	bsf	4051,6,c	;volatile
  2880  00357C  0012               	return		;funcret
  2881  00357E                     __end_of_init_oscilador:
  2882                           	opt stack 0
  2883                           tblptru	equ	0xFF8
  2884                           tblptrh	equ	0xFF7
  2885                           tblptrl	equ	0xFF6
  2886                           tablat	equ	0xFF5
  2887                           prodh	equ	0xFF4
  2888                           prodl	equ	0xFF3
  2889                           postinc0	equ	0xFEE
  2890                           wreg	equ	0xFE8
  2891                           postdec1	equ	0xFE5
  2892                           fsr1h	equ	0xFE2
  2893                           fsr1l	equ	0xFE1
  2894                           postinc2	equ	0xFDE
  2895                           postdec2	equ	0xFDD
  2896                           fsr2h	equ	0xFDA
  2897                           fsr2l	equ	0xFD9
  2898                           status	equ	0xFD8
  2899                           
  2900 ;; *************** function _init_interrupt *****************
  2901 ;; Defined at:
  2902 ;;		line 98 in file "bibliotecas/hardware.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;		None
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		wreg, status,2
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2916 ;;      Params:         0       0       0       0       0       0       0       0       0
  2917 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2919 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2920 ;;Total ram usage:        0 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    2
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_init_hardware
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           	psect	text9
  2931  0034F2                     __ptext9:
  2932                           	opt stack 0
  2933  0034F2                     _init_interrupt:
  2934                           	opt stack 27
  2935                           
  2936                           ;hardware.c: 100: INTCON = 0b11110000;
  2937                           
  2938                           ;incstack = 0
  2939  0034F2  0EF0               	movlw	240
  2940  0034F4  6EF2               	movwf	intcon,c	;volatile
  2941                           
  2942                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2943  0034F6  0E00               	movlw	0
  2944  0034F8  6EF1               	movwf	intcon2,c	;volatile
  2945                           
  2946                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2947  0034FA  0E00               	movlw	0
  2948  0034FC  6EF0               	movwf	intcon3,c	;volatile
  2949                           
  2950                           ;hardware.c: 104: PIE1 = 0b00100000;
  2951  0034FE  0E20               	movlw	32
  2952  003500  6E9D               	movwf	3997,c	;volatile
  2953  003502  0012               	return		;funcret
  2954  003504                     __end_of_init_interrupt:
  2955                           	opt stack 0
  2956                           tblptru	equ	0xFF8
  2957                           tblptrh	equ	0xFF7
  2958                           tblptrl	equ	0xFF6
  2959                           tablat	equ	0xFF5
  2960                           prodh	equ	0xFF4
  2961                           prodl	equ	0xFF3
  2962                           intcon	equ	0xFF2
  2963                           intcon2	equ	0xFF1
  2964                           intcon3	equ	0xFF0
  2965                           postinc0	equ	0xFEE
  2966                           wreg	equ	0xFE8
  2967                           postdec1	equ	0xFE5
  2968                           fsr1h	equ	0xFE2
  2969                           fsr1l	equ	0xFE1
  2970                           postinc2	equ	0xFDE
  2971                           postdec2	equ	0xFDD
  2972                           fsr2h	equ	0xFDA
  2973                           fsr2l	equ	0xFD9
  2974                           status	equ	0xFD8
  2975                           
  2976 ;; *************** function _config_timer_zero *****************
  2977 ;; Defined at:
  2978 ;;		line 83 in file "bibliotecas/hardware.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;		None
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;		None
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, status,2, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2992 ;;      Params:         0       0       0       0       0       0       0       0       0
  2993 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2994 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2995 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2996 ;;Total ram usage:        0 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    3
  2999 ;; This function calls:
  3000 ;;		_write_timer_zero
  3001 ;; This function is called by:
  3002 ;;		_init_hardware
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text10
  3007  00347E                     __ptext10:
  3008                           	opt stack 0
  3009  00347E                     _config_timer_zero:
  3010                           	opt stack 26
  3011                           
  3012                           ;hardware.c: 85: T0CON = 0b11000011;
  3013                           
  3014                           ;incstack = 0
  3015  00347E  0EC3               	movlw	195
  3016  003480  6ED5               	movwf	4053,c	;volatile
  3017                           
  3018                           ;hardware.c: 86: SPPCON = 0b00000000;
  3019  003482  0E00               	movlw	0
  3020  003484  6E65               	movwf	3941,c	;volatile
  3021                           
  3022                           ;hardware.c: 87: SPPCFG = 0b00000000;
  3023  003486  0E00               	movlw	0
  3024  003488  6E63               	movwf	3939,c	;volatile
  3025                           
  3026                           ;hardware.c: 88: write_timer_zero(0x0083);
  3027  00348A  0E00               	movlw	0
  3028  00348C  6E1B               	movwf	write_timer_zero@timer0+1,c
  3029  00348E  0E83               	movlw	131
  3030  003490  6E1A               	movwf	write_timer_zero@timer0,c
  3031  003492  EC82  F01A         	call	_write_timer_zero	;wreg free
  3032  003496  0012               	return		;funcret
  3033  003498                     __end_of_config_timer_zero:
  3034                           	opt stack 0
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           prodh	equ	0xFF4
  3040                           prodl	equ	0xFF3
  3041                           intcon	equ	0xFF2
  3042                           intcon2	equ	0xFF1
  3043                           intcon3	equ	0xFF0
  3044                           postinc0	equ	0xFEE
  3045                           wreg	equ	0xFE8
  3046                           postdec1	equ	0xFE5
  3047                           fsr1h	equ	0xFE2
  3048                           fsr1l	equ	0xFE1
  3049                           postinc2	equ	0xFDE
  3050                           postdec2	equ	0xFDD
  3051                           fsr2h	equ	0xFDA
  3052                           fsr2l	equ	0xFD9
  3053                           status	equ	0xFD8
  3054                           
  3055 ;; *************** function _write_timer_zero *****************
  3056 ;; Defined at:
  3057 ;;		line 138 in file "bibliotecas/hardware.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  timer0          2   25[COMRAM] unsigned int 
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;  timer           2   27[COMRAM] struct Timers
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  1    wreg      void 
  3064 ;; Registers used:
  3065 ;;		None
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3071 ;;      Params:         2       0       0       0       0       0       0       0       0
  3072 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3073 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3074 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3075 ;;Total ram usage:        4 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    2
  3078 ;; This function calls:
  3079 ;;		Nothing
  3080 ;; This function is called by:
  3081 ;;		_config_timer_zero
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           	psect	text11
  3086  003504                     __ptext11:
  3087                           	opt stack 0
  3088  003504                     _write_timer_zero:
  3089                           	opt stack 26
  3090                           
  3091                           ;hardware.c: 140: union Timers timer;
  3092                           ;hardware.c: 142: timer.lt = timer0;
  3093                           
  3094                           ;incstack = 0
  3095  003504  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  3096  003508  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  3097                           
  3098                           ;hardware.c: 144: TMR0H = timer.bt[1];
  3099  00350C  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  3100                           
  3101                           ;hardware.c: 145: TMR0L = timer.bt[0];
  3102  003510  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  3103  003514  0012               	return		;funcret
  3104  003516                     __end_of_write_timer_zero:
  3105                           	opt stack 0
  3106                           tblptru	equ	0xFF8
  3107                           tblptrh	equ	0xFF7
  3108                           tblptrl	equ	0xFF6
  3109                           tablat	equ	0xFF5
  3110                           prodh	equ	0xFF4
  3111                           prodl	equ	0xFF3
  3112                           intcon	equ	0xFF2
  3113                           intcon2	equ	0xFF1
  3114                           intcon3	equ	0xFF0
  3115                           postinc0	equ	0xFEE
  3116                           wreg	equ	0xFE8
  3117                           postdec1	equ	0xFE5
  3118                           fsr1h	equ	0xFE2
  3119                           fsr1l	equ	0xFE1
  3120                           postinc2	equ	0xFDE
  3121                           postdec2	equ	0xFDD
  3122                           fsr2h	equ	0xFDA
  3123                           fsr2l	equ	0xFD9
  3124                           status	equ	0xFD8
  3125                           
  3126 ;; *************** function _config_timer_dois *****************
  3127 ;; Defined at:
  3128 ;;		line 200 in file "bibliotecas/hardware.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;		None
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;		None
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      void 
  3135 ;; Registers used:
  3136 ;;		wreg, status,2
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3142 ;;      Params:         0       0       0       0       0       0       0       0       0
  3143 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3144 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3145 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3146 ;;Total ram usage:        0 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    2
  3149 ;; This function calls:
  3150 ;;		Nothing
  3151 ;; This function is called by:
  3152 ;;		_init_hardware
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text12
  3157  003548                     __ptext12:
  3158                           	opt stack 0
  3159  003548                     _config_timer_dois:
  3160                           	opt stack 27
  3161                           
  3162                           ;hardware.c: 202: T2CON = 0b00000100;
  3163                           
  3164                           ;incstack = 0
  3165  003548  0E04               	movlw	4
  3166  00354A  6ECA               	movwf	4042,c	;volatile
  3167                           
  3168                           ;hardware.c: 203: TMR2 = 0;
  3169  00354C  0E00               	movlw	0
  3170  00354E  6ECC               	movwf	4044,c	;volatile
  3171                           
  3172                           ;hardware.c: 204: PR2 = 0xFF;
  3173  003550  68CB               	setf	4043,c	;volatile
  3174  003552  0012               	return		;funcret
  3175  003554                     __end_of_config_timer_dois:
  3176                           	opt stack 0
  3177                           tblptru	equ	0xFF8
  3178                           tblptrh	equ	0xFF7
  3179                           tblptrl	equ	0xFF6
  3180                           tablat	equ	0xFF5
  3181                           prodh	equ	0xFF4
  3182                           prodl	equ	0xFF3
  3183                           intcon	equ	0xFF2
  3184                           intcon2	equ	0xFF1
  3185                           intcon3	equ	0xFF0
  3186                           postinc0	equ	0xFEE
  3187                           wreg	equ	0xFE8
  3188                           postdec1	equ	0xFE5
  3189                           fsr1h	equ	0xFE2
  3190                           fsr1l	equ	0xFE1
  3191                           postinc2	equ	0xFDE
  3192                           postdec2	equ	0xFDD
  3193                           fsr2h	equ	0xFDA
  3194                           fsr2l	equ	0xFD9
  3195                           status	equ	0xFD8
  3196                           
  3197 ;; *************** function _inicializa_uart *****************
  3198 ;; Defined at:
  3199 ;;		line 206 in file "bibliotecas/uart.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;		None
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;		None
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  1    wreg      void 
  3206 ;; Registers used:
  3207 ;;		wreg, status,2, status,0, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3213 ;;      Params:         0       0       0       0       0       0       0       0       0
  3214 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3215 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3216 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3217 ;;Total ram usage:        0 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:    4
  3220 ;; This function calls:
  3221 ;;		_configura_baudrate_uart
  3222 ;; This function is called by:
  3223 ;;		_main
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           	psect	text13
  3228  003422                     __ptext13:
  3229                           	opt stack 0
  3230  003422                     _inicializa_uart:
  3231                           	opt stack 26
  3232                           
  3233                           ;uart.c: 208: TRISCbits.RC6 = 0;
  3234                           
  3235                           ;incstack = 0
  3236  003422  9C94               	bcf	3988,6,c	;volatile
  3237                           
  3238                           ;uart.c: 209: TRISCbits.RC7 = 0;
  3239  003424  9E94               	bcf	3988,7,c	;volatile
  3240                           
  3241                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  3242  003426  0E80               	movlw	128
  3243  003428  6E28               	movwf	configura_baudrate_uart@baudrate,c
  3244  00342A  0E25               	movlw	37
  3245  00342C  6E29               	movwf	configura_baudrate_uart@baudrate+1,c
  3246  00342E  0E00               	movlw	0
  3247  003430  6E2A               	movwf	configura_baudrate_uart@baudrate+2,c
  3248  003432  0E00               	movlw	0
  3249  003434  6E2B               	movwf	configura_baudrate_uart@baudrate+3,c
  3250  003436  EC8F  F010         	call	_configura_baudrate_uart	;wreg free
  3251                           
  3252                           ;uart.c: 213: TXSTA = 0x20;
  3253  00343A  0E20               	movlw	32
  3254  00343C  6EAC               	movwf	4012,c	;volatile
  3255                           
  3256                           ;uart.c: 214: RCSTA = 0x90;
  3257  00343E  0E90               	movlw	144
  3258  003440  6EAB               	movwf	4011,c	;volatile
  3259  003442  0012               	return		;funcret
  3260  003444                     __end_of_inicializa_uart:
  3261                           	opt stack 0
  3262                           tblptru	equ	0xFF8
  3263                           tblptrh	equ	0xFF7
  3264                           tblptrl	equ	0xFF6
  3265                           tablat	equ	0xFF5
  3266                           prodh	equ	0xFF4
  3267                           prodl	equ	0xFF3
  3268                           intcon	equ	0xFF2
  3269                           intcon2	equ	0xFF1
  3270                           intcon3	equ	0xFF0
  3271                           postinc0	equ	0xFEE
  3272                           wreg	equ	0xFE8
  3273                           postdec1	equ	0xFE5
  3274                           fsr1h	equ	0xFE2
  3275                           fsr1l	equ	0xFE1
  3276                           postinc2	equ	0xFDE
  3277                           postdec2	equ	0xFDD
  3278                           fsr2h	equ	0xFDA
  3279                           fsr2l	equ	0xFD9
  3280                           status	equ	0xFD8
  3281                           
  3282 ;; *************** function _configura_baudrate_uart *****************
  3283 ;; Defined at:
  3284 ;;		line 50 in file "bibliotecas/uart.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;  baudrate        4   39[COMRAM] const long 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;  x               2   43[COMRAM] unsigned int 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      unsigned char 
  3291 ;; Registers used:
  3292 ;;		wreg, status,2, status,0, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3298 ;;      Params:         4       0       0       0       0       0       0       0       0
  3299 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3300 ;;      Temps:          0       8       0       0       0       0       0       0       0
  3301 ;;      Totals:         6       8       0       0       0       0       0       0       0
  3302 ;;Total ram usage:       14 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    3
  3305 ;; This function calls:
  3306 ;;		___aldiv
  3307 ;; This function is called by:
  3308 ;;		_inicializa_uart
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text14
  3313  00211E                     __ptext14:
  3314                           	opt stack 0
  3315  00211E                     _configura_baudrate_uart:
  3316                           	opt stack 26
  3317                           
  3318                           ;uart.c: 52: unsigned int x;
  3319                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  3320                           
  3321                           ;incstack = 0
  3322  00211E  C028  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  3323  002122  C029  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  3324  002126  C02A  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  3325  00212A  C02B  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  3326  00212E  0E06               	movlw	6
  3327  002130                     u10595:
  3328  002130  90D8               	bcf	status,0,c
  3329  002132  0100               	movlb	0	; () banked
  3330  002134  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  3331  002136  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3332  002138  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3333  00213A  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3334  00213C  2EE8               	decfsz	wreg,f,c
  3335  00213E  D7F8               	goto	u10595
  3336  002140  1F60               	comf	??_configura_baudrate_uart& (0+255),f,b
  3337  002142  1F61               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3338  002144  1F62               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3339  002146  1F63               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3340  002148  2B60               	incf	??_configura_baudrate_uart& (0+255),f,b
  3341  00214A  0E00               	movlw	0
  3342  00214C  2361               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  3343  00214E  2362               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  3344  002150  2363               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  3345  002152  0E00               	movlw	0
  3346  002154  2560               	addwf	??_configura_baudrate_uart& (0+255),w,b
  3347  002156  6E1A               	movwf	___aldiv@dividend,c
  3348  002158  0E6C               	movlw	108
  3349  00215A  2161               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  3350  00215C  6E1B               	movwf	___aldiv@dividend+1,c
  3351  00215E  0EDC               	movlw	220
  3352  002160  2162               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  3353  002162  6E1C               	movwf	___aldiv@dividend+2,c
  3354  002164  0E02               	movlw	2
  3355  002166  2163               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  3356  002168  6E1D               	movwf	___aldiv@dividend+3,c
  3357  00216A  C028  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  3358  00216E  C029  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  3359  002172  C02A  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  3360  002176  C02B  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  3361  00217A  0E06               	movlw	6
  3362  00217C                     u10605:
  3363  00217C  90D8               	bcf	status,0,c
  3364  00217E  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  3365  002180  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  3366  002182  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  3367  002184  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  3368  002186  2EE8               	decfsz	wreg,f,c
  3369  002188  D7F9               	goto	u10605
  3370  00218A  C064  F01E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  3371  00218E  C065  F01F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  3372  002192  C066  F020         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  3373  002196  C067  F021         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  3374  00219A  ECED  F013         	call	___aldiv	;wreg free
  3375  00219E  C01A  F02C         	movff	?___aldiv,configura_baudrate_uart@x
  3376  0021A2  C01B  F02D         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  3377                           
  3378                           ;uart.c: 55: if(x > 255)
  3379  0021A6  042D               	decf	configura_baudrate_uart@x+1,w,c
  3380  0021A8  A0D8               	btfss	status,0,c
  3381  0021AA  D045               	goto	l915
  3382                           
  3383                           ;uart.c: 56: {
  3384                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  3385  0021AC  C028  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  3386  0021B0  C029  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  3387  0021B4  C02A  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  3388  0021B8  C02B  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  3389  0021BC  0E04               	movlw	4
  3390  0021BE                     u10625:
  3391  0021BE  90D8               	bcf	status,0,c
  3392  0021C0  0100               	movlb	0	; () banked
  3393  0021C2  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  3394  0021C4  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3395  0021C6  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3396  0021C8  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3397  0021CA  2EE8               	decfsz	wreg,f,c
  3398  0021CC  D7F8               	goto	u10625
  3399  0021CE  1F60               	comf	??_configura_baudrate_uart& (0+255),f,b
  3400  0021D0  1F61               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3401  0021D2  1F62               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3402  0021D4  1F63               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3403  0021D6  2B60               	incf	??_configura_baudrate_uart& (0+255),f,b
  3404  0021D8  0E00               	movlw	0
  3405  0021DA  2361               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  3406  0021DC  2362               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  3407  0021DE  2363               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  3408  0021E0  0E00               	movlw	0
  3409  0021E2  2560               	addwf	??_configura_baudrate_uart& (0+255),w,b
  3410  0021E4  6E1A               	movwf	___aldiv@dividend,c
  3411  0021E6  0E6C               	movlw	108
  3412  0021E8  2161               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  3413  0021EA  6E1B               	movwf	___aldiv@dividend+1,c
  3414  0021EC  0EDC               	movlw	220
  3415  0021EE  2162               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  3416  0021F0  6E1C               	movwf	___aldiv@dividend+2,c
  3417  0021F2  0E02               	movlw	2
  3418  0021F4  2163               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  3419  0021F6  6E1D               	movwf	___aldiv@dividend+3,c
  3420  0021F8  C028  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  3421  0021FC  C029  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  3422  002200  C02A  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  3423  002204  C02B  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  3424  002208  0E04               	movlw	4
  3425  00220A                     u10635:
  3426  00220A  90D8               	bcf	status,0,c
  3427  00220C  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  3428  00220E  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  3429  002210  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  3430  002212  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  3431  002214  2EE8               	decfsz	wreg,f,c
  3432  002216  D7F9               	goto	u10635
  3433  002218  C064  F01E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  3434  00221C  C065  F01F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  3435  002220  C066  F020         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  3436  002224  C067  F021         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  3437  002228  ECED  F013         	call	___aldiv	;wreg free
  3438  00222C  C01A  F02C         	movff	?___aldiv,configura_baudrate_uart@x
  3439  002230  C01B  F02D         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  3440                           
  3441                           ;uart.c: 58: BRGH = 1;
  3442  002234  84AC               	bsf	4012,2,c	;volatile
  3443  002236                     l915:
  3444                           
  3445                           ;uart.c: 59: }
  3446                           ;uart.c: 60: if(x < 256)
  3447  002236  042D               	decf	configura_baudrate_uart@x+1,w,c
  3448  002238  B0D8               	btfsc	status,0,c
  3449  00223A  0012               	return	
  3450                           
  3451                           ;uart.c: 61: {
  3452                           ;uart.c: 62: SPBRG = x;
  3453  00223C  C02C  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  3454                           
  3455                           ;uart.c: 63: SYNC = 0;
  3456  002240  98AC               	bcf	4012,4,c	;volatile
  3457                           
  3458                           ;uart.c: 64: SPEN = 1;
  3459  002242  8EAB               	bsf	4011,7,c	;volatile
  3460                           
  3461                           ;uart.c: 65: TRISCbits.RC7 = 1;
  3462  002244  8E94               	bsf	3988,7,c	;volatile
  3463                           
  3464                           ;uart.c: 66: TRISCbits.RC6 = 1;
  3465  002246  8C94               	bsf	3988,6,c	;volatile
  3466                           
  3467                           ;uart.c: 67: CREN = 1;
  3468  002248  88AB               	bsf	4011,4,c	;volatile
  3469                           
  3470                           ;uart.c: 68: TXEN = 1;
  3471  00224A  8AAC               	bsf	4012,5,c	;volatile
  3472                           
  3473                           ;uart.c: 70: return (1);
  3474                           ;	Return value of _configura_baudrate_uart is never used
  3475  00224C  0012               	return	
  3476  00224E                     __end_of_configura_baudrate_uart:
  3477                           	opt stack 0
  3478                           tblptru	equ	0xFF8
  3479                           tblptrh	equ	0xFF7
  3480                           tblptrl	equ	0xFF6
  3481                           tablat	equ	0xFF5
  3482                           prodh	equ	0xFF4
  3483                           prodl	equ	0xFF3
  3484                           intcon	equ	0xFF2
  3485                           intcon2	equ	0xFF1
  3486                           intcon3	equ	0xFF0
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           postdec1	equ	0xFE5
  3490                           fsr1h	equ	0xFE2
  3491                           fsr1l	equ	0xFE1
  3492                           postinc2	equ	0xFDE
  3493                           postdec2	equ	0xFDD
  3494                           fsr2h	equ	0xFDA
  3495                           fsr2l	equ	0xFD9
  3496                           status	equ	0xFD8
  3497                           
  3498 ;; *************** function ___aldiv *****************
  3499 ;; Defined at:
  3500 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  dividend        4   25[COMRAM] long 
  3503 ;;  divisor         4   29[COMRAM] long 
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;  quotient        4   35[COMRAM] long 
  3506 ;;  sign            1   34[COMRAM] unsigned char 
  3507 ;;  counter         1   33[COMRAM] unsigned char 
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  4   25[COMRAM] long 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2, status,0
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3517 ;;      Params:         8       0       0       0       0       0       0       0       0
  3518 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3519 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3520 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3521 ;;Total ram usage:       14 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    2
  3524 ;; This function calls:
  3525 ;;		Nothing
  3526 ;; This function is called by:
  3527 ;;		_configura_baudrate_uart
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text15
  3532  0027DA                     __ptext15:
  3533                           	opt stack 0
  3534  0027DA                     ___aldiv:
  3535                           	opt stack 26
  3536                           
  3537                           ;incstack = 0
  3538  0027DA  0E00               	movlw	0
  3539  0027DC  6E23               	movwf	___aldiv@sign,c
  3540  0027DE  AE21               	btfss	___aldiv@divisor+3,7,c
  3541  0027E0  D00A               	goto	l1383
  3542  0027E2  1E21               	comf	___aldiv@divisor+3,f,c
  3543  0027E4  1E20               	comf	___aldiv@divisor+2,f,c
  3544  0027E6  1E1F               	comf	___aldiv@divisor+1,f,c
  3545  0027E8  6C1E               	negf	___aldiv@divisor,c
  3546  0027EA  0E00               	movlw	0
  3547  0027EC  221F               	addwfc	___aldiv@divisor+1,f,c
  3548  0027EE  2220               	addwfc	___aldiv@divisor+2,f,c
  3549  0027F0  2221               	addwfc	___aldiv@divisor+3,f,c
  3550  0027F2  0E01               	movlw	1
  3551  0027F4  6E23               	movwf	___aldiv@sign,c
  3552  0027F6                     l1383:
  3553  0027F6  AE1D               	btfss	___aldiv@dividend+3,7,c
  3554  0027F8  D00A               	goto	l1384
  3555  0027FA  1E1D               	comf	___aldiv@dividend+3,f,c
  3556  0027FC  1E1C               	comf	___aldiv@dividend+2,f,c
  3557  0027FE  1E1B               	comf	___aldiv@dividend+1,f,c
  3558  002800  6C1A               	negf	___aldiv@dividend,c
  3559  002802  0E00               	movlw	0
  3560  002804  221B               	addwfc	___aldiv@dividend+1,f,c
  3561  002806  221C               	addwfc	___aldiv@dividend+2,f,c
  3562  002808  221D               	addwfc	___aldiv@dividend+3,f,c
  3563  00280A  0E01               	movlw	1
  3564  00280C  1A23               	xorwf	___aldiv@sign,f,c
  3565  00280E                     l1384:
  3566  00280E  0E00               	movlw	0
  3567  002810  6E24               	movwf	___aldiv@quotient,c
  3568  002812  0E00               	movlw	0
  3569  002814  6E25               	movwf	___aldiv@quotient+1,c
  3570  002816  0E00               	movlw	0
  3571  002818  6E26               	movwf	___aldiv@quotient+2,c
  3572  00281A  0E00               	movlw	0
  3573  00281C  6E27               	movwf	___aldiv@quotient+3,c
  3574  00281E  501E               	movf	___aldiv@divisor,w,c
  3575  002820  101F               	iorwf	___aldiv@divisor+1,w,c
  3576  002822  1020               	iorwf	___aldiv@divisor+2,w,c
  3577  002824  1021               	iorwf	___aldiv@divisor+3,w,c
  3578  002826  B4D8               	btfsc	status,2,c
  3579  002828  D02A               	goto	l1391
  3580  00282A  0E01               	movlw	1
  3581  00282C  6E22               	movwf	___aldiv@counter,c
  3582  00282E  D006               	goto	l1386
  3583  002830  90D8               	bcf	status,0,c
  3584  002832  361E               	rlcf	___aldiv@divisor,f,c
  3585  002834  361F               	rlcf	___aldiv@divisor+1,f,c
  3586  002836  3620               	rlcf	___aldiv@divisor+2,f,c
  3587  002838  3621               	rlcf	___aldiv@divisor+3,f,c
  3588  00283A  2A22               	incf	___aldiv@counter,f,c
  3589  00283C                     l1386:
  3590  00283C  AE21               	btfss	___aldiv@divisor+3,7,c
  3591  00283E  D7F8               	goto	l1387
  3592  002840                     u5540:
  3593  002840  90D8               	bcf	status,0,c
  3594  002842  3624               	rlcf	___aldiv@quotient,f,c
  3595  002844  3625               	rlcf	___aldiv@quotient+1,f,c
  3596  002846  3626               	rlcf	___aldiv@quotient+2,f,c
  3597  002848  3627               	rlcf	___aldiv@quotient+3,f,c
  3598  00284A  501E               	movf	___aldiv@divisor,w,c
  3599  00284C  5C1A               	subwf	___aldiv@dividend,w,c
  3600  00284E  501F               	movf	___aldiv@divisor+1,w,c
  3601  002850  581B               	subwfb	___aldiv@dividend+1,w,c
  3602  002852  5020               	movf	___aldiv@divisor+2,w,c
  3603  002854  581C               	subwfb	___aldiv@dividend+2,w,c
  3604  002856  5021               	movf	___aldiv@divisor+3,w,c
  3605  002858  581D               	subwfb	___aldiv@dividend+3,w,c
  3606  00285A  A0D8               	btfss	status,0,c
  3607  00285C  D009               	goto	l1390
  3608  00285E  501E               	movf	___aldiv@divisor,w,c
  3609  002860  5E1A               	subwf	___aldiv@dividend,f,c
  3610  002862  501F               	movf	___aldiv@divisor+1,w,c
  3611  002864  5A1B               	subwfb	___aldiv@dividend+1,f,c
  3612  002866  5020               	movf	___aldiv@divisor+2,w,c
  3613  002868  5A1C               	subwfb	___aldiv@dividend+2,f,c
  3614  00286A  5021               	movf	___aldiv@divisor+3,w,c
  3615  00286C  5A1D               	subwfb	___aldiv@dividend+3,f,c
  3616  00286E  8024               	bsf	___aldiv@quotient,0,c
  3617  002870                     l1390:
  3618  002870  90D8               	bcf	status,0,c
  3619  002872  3221               	rrcf	___aldiv@divisor+3,f,c
  3620  002874  3220               	rrcf	___aldiv@divisor+2,f,c
  3621  002876  321F               	rrcf	___aldiv@divisor+1,f,c
  3622  002878  321E               	rrcf	___aldiv@divisor,f,c
  3623  00287A  2E22               	decfsz	___aldiv@counter,f,c
  3624  00287C  D7E1               	goto	u5540
  3625  00287E                     l1391:
  3626  00287E  5023               	movf	___aldiv@sign,w,c
  3627  002880  B4D8               	btfsc	status,2,c
  3628  002882  D008               	goto	l1392
  3629  002884  1E27               	comf	___aldiv@quotient+3,f,c
  3630  002886  1E26               	comf	___aldiv@quotient+2,f,c
  3631  002888  1E25               	comf	___aldiv@quotient+1,f,c
  3632  00288A  6C24               	negf	___aldiv@quotient,c
  3633  00288C  0E00               	movlw	0
  3634  00288E  2225               	addwfc	___aldiv@quotient+1,f,c
  3635  002890  2226               	addwfc	___aldiv@quotient+2,f,c
  3636  002892  2227               	addwfc	___aldiv@quotient+3,f,c
  3637  002894                     l1392:
  3638  002894  C024  F01A         	movff	___aldiv@quotient,?___aldiv
  3639  002898  C025  F01B         	movff	___aldiv@quotient+1,?___aldiv+1
  3640  00289C  C026  F01C         	movff	___aldiv@quotient+2,?___aldiv+2
  3641  0028A0  C027  F01D         	movff	___aldiv@quotient+3,?___aldiv+3
  3642  0028A4  0012               	return	
  3643  0028A6                     __end_of___aldiv:
  3644                           	opt stack 0
  3645                           tblptru	equ	0xFF8
  3646                           tblptrh	equ	0xFF7
  3647                           tblptrl	equ	0xFF6
  3648                           tablat	equ	0xFF5
  3649                           prodh	equ	0xFF4
  3650                           prodl	equ	0xFF3
  3651                           intcon	equ	0xFF2
  3652                           intcon2	equ	0xFF1
  3653                           intcon3	equ	0xFF0
  3654                           postinc0	equ	0xFEE
  3655                           wreg	equ	0xFE8
  3656                           postdec1	equ	0xFE5
  3657                           fsr1h	equ	0xFE2
  3658                           fsr1l	equ	0xFE1
  3659                           postinc2	equ	0xFDE
  3660                           postdec2	equ	0xFDD
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function _inicializa_tarefas *****************
  3666 ;; Defined at:
  3667 ;;		line 170 in file "main.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;		None
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;		None
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      void 
  3674 ;; Registers used:
  3675 ;;		wreg, status,2, status,0
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3681 ;;      Params:         0       0       0       0       0       0       0       0       0
  3682 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3684 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3685 ;;Total ram usage:        0 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    2
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_main
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text16
  3696  00331E                     __ptext16:
  3697                           	opt stack 0
  3698  00331E                     _inicializa_tarefas:
  3699                           	opt stack 28
  3700                           
  3701                           ;main.c: 173: p_tarefas[0] = acende_led4;
  3702                           
  3703                           ;incstack = 0
  3704  00331E  0EDA               	movlw	low _acende_led4
  3705  003320  0100               	movlb	0	; () banked
  3706  003322  6FD1               	movwf	_p_tarefas& (0+255),b
  3707  003324  0E33               	movlw	high _acende_led4
  3708  003326  6FD2               	movwf	(_p_tarefas+1)& (0+255),b
  3709                           
  3710                           ;main.c: 174: p_tarefas[1] = SDCard;
  3711  003328  0E3C               	movlw	low _SDCard
  3712  00332A  6FD3               	movwf	(_p_tarefas+2)& (0+255),b
  3713  00332C  0E1A               	movlw	high _SDCard
  3714  00332E  6FD4               	movwf	(_p_tarefas+3)& (0+255),b
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;main.c: 178: tempo_backup[0] = 1000;
  3718  003330  0E03               	movlw	3
  3719  003332  0101               	movlb	1	; () banked
  3720  003334  6F56               	movwf	(_tempo_backup+1)& (0+255),b
  3721  003336  0EE8               	movlw	232
  3722  003338  6F55               	movwf	_tempo_backup& (0+255),b
  3723                           
  3724                           ; BSR set to: 1
  3725                           ;main.c: 179: tempo_backup[1] = 2000;
  3726  00333A  0E07               	movlw	7
  3727  00333C  6F58               	movwf	(_tempo_backup+3)& (0+255),b
  3728  00333E  0ED0               	movlw	208
  3729  003340  6F57               	movwf	(_tempo_backup+2)& (0+255),b
  3730                           
  3731                           ; BSR set to: 1
  3732                           ;main.c: 183: tempo_tarefa[0] = 1000;
  3733  003342  0E03               	movlw	3
  3734  003344  6E2F               	movwf	_tempo_tarefa+1,c
  3735  003346  0EE8               	movlw	232
  3736  003348  6E2E               	movwf	_tempo_tarefa,c
  3737                           
  3738                           ; BSR set to: 1
  3739                           ;main.c: 184: tempo_tarefa[1] = 2000;
  3740  00334A  0E07               	movlw	7
  3741  00334C  6E31               	movwf	_tempo_tarefa+3,c
  3742  00334E  0ED0               	movlw	208
  3743  003350  6E30               	movwf	_tempo_tarefa+2,c
  3744                           
  3745                           ; BSR set to: 1
  3746                           ;main.c: 187: tarefa_em_execucao = 0;
  3747  003352  0E00               	movlw	0
  3748  003354  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3749                           
  3750                           ; BSR set to: 1
  3751  003356  0012               	return		;funcret
  3752  003358                     __end_of_inicializa_tarefas:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           intcon	equ	0xFF2
  3761                           intcon2	equ	0xFF1
  3762                           intcon3	equ	0xFF0
  3763                           postinc0	equ	0xFEE
  3764                           wreg	equ	0xFE8
  3765                           postdec1	equ	0xFE5
  3766                           fsr1h	equ	0xFE2
  3767                           fsr1l	equ	0xFE1
  3768                           postinc2	equ	0xFDE
  3769                           postdec2	equ	0xFDD
  3770                           fsr2h	equ	0xFDA
  3771                           fsr2l	equ	0xFD9
  3772                           status	equ	0xFD8
  3773                           
  3774 ;; *************** function _inicializa_shrc *****************
  3775 ;; Defined at:
  3776 ;;		line 47 in file "bibliotecas/SHRC.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      void 
  3783 ;; Registers used:
  3784 ;;		None
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3790 ;;      Params:         0       0       0       0       0       0       0       0       0
  3791 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3792 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3793 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3794 ;;Total ram usage:        0 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    2
  3797 ;; This function calls:
  3798 ;;		Nothing
  3799 ;; This function is called by:
  3800 ;;		_main
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           	psect	text17
  3805  00357E                     __ptext17:
  3806                           	opt stack 0
  3807  00357E                     _inicializa_shrc:
  3808                           	opt stack 28
  3809                           
  3810                           ;SHRC.c: 49: LATBbits.LATB5 = 0;
  3811                           
  3812                           ; BSR set to: 1
  3813                           ;incstack = 0
  3814  00357E  9A8A               	bcf	3978,5,c	;volatile
  3815                           
  3816                           ;SHRC.c: 50: LATBbits.LATB6 = 0;
  3817  003580  9C8A               	bcf	3978,6,c	;volatile
  3818                           
  3819                           ;SHRC.c: 51: LATBbits.LATB7 = 0;
  3820  003582  9E8A               	bcf	3978,7,c	;volatile
  3821  003584  0012               	return		;funcret
  3822  003586                     __end_of_inicializa_shrc:
  3823                           	opt stack 0
  3824                           tblptru	equ	0xFF8
  3825                           tblptrh	equ	0xFF7
  3826                           tblptrl	equ	0xFF6
  3827                           tablat	equ	0xFF5
  3828                           prodh	equ	0xFF4
  3829                           prodl	equ	0xFF3
  3830                           intcon	equ	0xFF2
  3831                           intcon2	equ	0xFF1
  3832                           intcon3	equ	0xFF0
  3833                           postinc0	equ	0xFEE
  3834                           wreg	equ	0xFE8
  3835                           postdec1	equ	0xFE5
  3836                           fsr1h	equ	0xFE2
  3837                           fsr1l	equ	0xFE1
  3838                           postinc2	equ	0xFDE
  3839                           postdec2	equ	0xFDD
  3840                           fsr2h	equ	0xFDA
  3841                           fsr2l	equ	0xFD9
  3842                           status	equ	0xFD8
  3843                           
  3844 ;; *************** function _inicializa_SPI *****************
  3845 ;; Defined at:
  3846 ;;		line 49 in file "bibliotecas/SPI.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  sync_mode       1    wreg     unsigned char 
  3849 ;;  bus_mode        1   31[COMRAM] unsigned char 
  3850 ;;  smp_phase       1   32[COMRAM] unsigned char 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  sync_mode       1   33[COMRAM] unsigned char 
  3853 ;; Return value:  Size  Location     Type
  3854 ;;                  1    wreg      void 
  3855 ;; Registers used:
  3856 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3857 ;; Tracked objects:
  3858 ;;		On entry : 0/0
  3859 ;;		On exit  : 0/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3862 ;;      Params:         2       0       0       0       0       0       0       0       0
  3863 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3864 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3865 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3866 ;;Total ram usage:        3 bytes
  3867 ;; Hardware stack levels used:    1
  3868 ;; Hardware stack levels required when called:    5
  3869 ;; This function calls:
  3870 ;;		_escreve_cmd_lcd
  3871 ;;		_escreve_frase_ram_lcd
  3872 ;;		_posicao_cursor_lcd
  3873 ;; This function is called by:
  3874 ;;		_main
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           	psect	text18
  3879  002D12                     __ptext18:
  3880                           	opt stack 0
  3881  002D12                     _inicializa_SPI:
  3882                           	opt stack 25
  3883                           
  3884                           ;incstack = 0
  3885                           ;inicializa_SPI@sync_mode stored from wreg
  3886  002D12  6E22               	movwf	inicializa_SPI@sync_mode,c
  3887                           
  3888                           ;SPI.c: 51: SSPCON1bits.SSPEN = 0;
  3889  002D14  9AC6               	bcf	4038,5,c	;volatile
  3890                           
  3891                           ;SPI.c: 52: SSPSTAT &= 0x3F;
  3892  002D16  0E3F               	movlw	63
  3893  002D18  16C7               	andwf	4039,f,c	;volatile
  3894                           
  3895                           ;SPI.c: 53: SSPCON1 = 0x00;
  3896  002D1A  0E00               	movlw	0
  3897  002D1C  6EC6               	movwf	4038,c	;volatile
  3898                           
  3899                           ;SPI.c: 54: SSPCON1 |= sync_mode<<7;
  3900  002D1E  4022               	rrncf	inicializa_SPI@sync_mode,w,c
  3901  002D20  0B80               	andlw	128
  3902  002D22  12C6               	iorwf	4038,f,c	;volatile
  3903                           
  3904                           ;SPI.c: 55: SSPSTAT |= smp_phase;
  3905  002D24  5021               	movf	inicializa_SPI@smp_phase,w,c
  3906  002D26  12C7               	iorwf	4039,f,c	;volatile
  3907                           
  3908                           ;SPI.c: 56: TRISBbits.RB4 = 0;
  3909  002D28  9893               	bcf	3987,4,c	;volatile
  3910                           
  3911                           ;SPI.c: 57: switch(bus_mode)
  3912  002D2A  D005               	goto	l122
  3913  002D2C                     l123:
  3914                           
  3915                           ;SPI.c: 60: SSPSTATbits.CKE = 1;
  3916  002D2C  8CC7               	bsf	4039,6,c	;volatile
  3917                           
  3918                           ;SPI.c: 61: break;
  3919  002D2E  D015               	goto	l128
  3920  002D30                     l125:
  3921                           
  3922                           ;SPI.c: 63: SSPSTATbits.CKE = 1;
  3923  002D30  8CC7               	bsf	4039,6,c	;volatile
  3924  002D32                     l126:
  3925                           
  3926                           ;SPI.c: 67: SSPCON1bits.CKP = 1;
  3927  002D32  88C6               	bsf	4038,4,c	;volatile
  3928                           
  3929                           ;SPI.c: 71: }
  3930                           
  3931                           ;SPI.c: 70: break;
  3932                           
  3933                           ;SPI.c: 69: default:
  3934                           
  3935                           ;SPI.c: 68: break;
  3936  002D34  D012               	goto	l128
  3937  002D36                     l122:
  3938  002D36  5020               	movf	inicializa_SPI@bus_mode,w,c
  3939                           
  3940                           ; Switch size 1, requested type "space"
  3941                           ; Number of cases is 3, Range of values is 0 to 3
  3942                           ; switch strategies available:
  3943                           ; Name         Instructions Cycles
  3944                           ; simple_byte           10     6 (average)
  3945                           ;	Chosen strategy is simple_byte
  3946  002D38  0A00               	xorlw	0	; case 0
  3947  002D3A  B4D8               	btfsc	status,2,c
  3948  002D3C  D7F7               	goto	l123
  3949  002D3E  0A02               	xorlw	2	; case 2
  3950  002D40  B4D8               	btfsc	status,2,c
  3951  002D42  D7F6               	goto	l125
  3952  002D44  0A01               	xorlw	1	; case 3
  3953  002D46  B4D8               	btfsc	status,2,c
  3954  002D48  D7F4               	goto	l126
  3955                           
  3956                           ;SPI.c: 73: switch( sync_mode )
  3957  002D4A  D007               	goto	l128
  3958  002D4C                     l129:
  3959                           
  3960                           ;SPI.c: 76: TRISBbits.RB1 = 1;
  3961  002D4C  8293               	bsf	3987,1,c	;volatile
  3962                           
  3963                           ;SPI.c: 77: TRISBbits.RB4 = 1;
  3964  002D4E  8893               	bsf	3987,4,c	;volatile
  3965                           
  3966                           ;SPI.c: 78: break;
  3967  002D50  D00C               	goto	l130
  3968  002D52                     l131:
  3969                           
  3970                           ;SPI.c: 81: TRISBbits.RB1 = 1;
  3971  002D52  8293               	bsf	3987,1,c	;volatile
  3972                           
  3973                           ;SPI.c: 82: break;
  3974  002D54  D00A               	goto	l130
  3975  002D56                     l132:
  3976                           
  3977                           ;SPI.c: 85: TRISBbits.RB1 = 0;
  3978  002D56  9293               	bcf	3987,1,c	;volatile
  3979                           
  3980                           ;SPI.c: 87: }
  3981                           
  3982                           ;SPI.c: 86: break;
  3983  002D58  D008               	goto	l130
  3984  002D5A                     l128:
  3985  002D5A  5022               	movf	inicializa_SPI@sync_mode,w,c
  3986                           
  3987                           ; Switch size 1, requested type "space"
  3988                           ; Number of cases is 2, Range of values is 4 to 5
  3989                           ; switch strategies available:
  3990                           ; Name         Instructions Cycles
  3991                           ; simple_byte            7     4 (average)
  3992                           ;	Chosen strategy is simple_byte
  3993  002D5C  0A04               	xorlw	4	; case 4
  3994  002D5E  B4D8               	btfsc	status,2,c
  3995  002D60  D7F5               	goto	l129
  3996  002D62  0A01               	xorlw	1	; case 5
  3997  002D64  B4D8               	btfsc	status,2,c
  3998  002D66  D7F5               	goto	l131
  3999  002D68  D7F6               	goto	l132
  4000  002D6A                     l130:
  4001                           
  4002                           ;SPI.c: 89: TRISBbits.RB0 = 1;
  4003  002D6A  8093               	bsf	3987,0,c	;volatile
  4004                           
  4005                           ;SPI.c: 90: TRISCbits.RC7 = 0;
  4006  002D6C  9E94               	bcf	3988,7,c	;volatile
  4007                           
  4008                           ;SPI.c: 93: SSPCON1 |= 0x20;
  4009  002D6E  8AC6               	bsf	4038,5,c	;volatile
  4010                           
  4011                           ;SPI.c: 94: posicao_cursor_lcd(1,1);
  4012  002D70  0E01               	movlw	1
  4013  002D72  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4014  002D74  0E01               	movlw	1
  4015  002D76  ECE8  F017         	call	_posicao_cursor_lcd
  4016                           
  4017                           ;SPI.c: 95: escreve_frase_ram_lcd("SPI configurada!");
  4018  002D7A  0EA9               	movlw	low STR_1
  4019  002D7C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4020  002D7E  0E61               	movlw	high STR_1
  4021  002D80  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4022  002D82  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4023                           
  4024                           ;SPI.c: 96: escreve_cmd_lcd(0b00000001);
  4025  002D86  0E01               	movlw	1
  4026  002D88  EC02  F016         	call	_escreve_cmd_lcd
  4027  002D8C  0012               	return		;funcret
  4028  002D8E                     __end_of_inicializa_SPI:
  4029                           	opt stack 0
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           intcon	equ	0xFF2
  4037                           intcon2	equ	0xFF1
  4038                           intcon3	equ	0xFF0
  4039                           postinc0	equ	0xFEE
  4040                           wreg	equ	0xFE8
  4041                           postdec1	equ	0xFE5
  4042                           fsr1h	equ	0xFE2
  4043                           fsr1l	equ	0xFE1
  4044                           postinc2	equ	0xFDE
  4045                           postdec2	equ	0xFDD
  4046                           fsr2h	equ	0xFDA
  4047                           fsr2l	equ	0xFD9
  4048                           status	equ	0xFD8
  4049                           
  4050 ;; *************** function _escalonador *****************
  4051 ;; Defined at:
  4052 ;;		line 198 in file "main.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  cont            1  112[BANK0 ] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4066 ;;      Params:         0       0       0       0       0       0       0       0       0
  4067 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4068 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4069 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4070 ;;Total ram usage:        3 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:   12
  4073 ;; This function calls:
  4074 ;;		_SDCard
  4075 ;;		_acende_led4
  4076 ;; This function is called by:
  4077 ;;		_main
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text19
  4082  002A34                     __ptext19:
  4083                           	opt stack 0
  4084  002A34                     _escalonador:
  4085                           	opt stack 18
  4086                           
  4087                           ;main.c: 200: unsigned char cont;
  4088                           ;main.c: 201: for(cont = 0; cont<2;cont++)
  4089                           
  4090                           ;incstack = 0
  4091  002A34  0E00               	movlw	0
  4092  002A36  0100               	movlb	0	; () banked
  4093  002A38  6FD0               	movwf	escalonador@cont& (0+255),b
  4094  002A3A                     l9440:
  4095                           
  4096                           ; BSR set to: 0
  4097  002A3A  0E01               	movlw	1
  4098  002A3C  65D0               	cpfsgt	escalonador@cont& (0+255),b
  4099  002A3E  D001               	goto	l1081
  4100  002A40  0012               	return	
  4101  002A42                     l1081:
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;main.c: 202: {
  4105                           ;main.c: 203: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  4106                           
  4107                           ; BSR set to: 0
  4108  002A42  51D0               	movf	escalonador@cont& (0+255),w,b
  4109  002A44  0D02               	mullw	2
  4110  002A46  0ED1               	movlw	low _p_tarefas
  4111  002A48  24F3               	addwf	prodl,w,c
  4112  002A4A  6ED9               	movwf	fsr2l,c
  4113  002A4C  0E00               	movlw	high _p_tarefas
  4114  002A4E  20F4               	addwfc	prodh,w,c
  4115  002A50  6EDA               	movwf	fsr2h,c
  4116  002A52  50DE               	movf	postinc2,w,c
  4117  002A54  10DE               	iorwf	postinc2,w,c
  4118  002A56  B4D8               	btfsc	status,2,c
  4119  002A58  D03D               	goto	l1083
  4120                           
  4121                           ; BSR set to: 0
  4122  002A5A  51D0               	movf	escalonador@cont& (0+255),w,b
  4123  002A5C  0D02               	mullw	2
  4124  002A5E  0E2E               	movlw	low _tempo_tarefa
  4125  002A60  24F3               	addwf	prodl,w,c
  4126  002A62  6ED9               	movwf	fsr2l,c
  4127  002A64  0E00               	movlw	high _tempo_tarefa
  4128  002A66  20F4               	addwfc	prodh,w,c
  4129  002A68  6EDA               	movwf	fsr2h,c
  4130  002A6A  50DE               	movf	postinc2,w,c
  4131  002A6C  10DE               	iorwf	postinc2,w,c
  4132  002A6E  A4D8               	btfss	status,2,c
  4133  002A70  D031               	goto	l1083
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;main.c: 204: {
  4137                           ;main.c: 205: tarefa_em_execucao = 1;
  4138  002A72  0E01               	movlw	1
  4139  002A74  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  4140                           
  4141                           ;main.c: 206: timeout_tarefa = 65000;
  4142  002A76  0EFD               	movlw	253
  4143  002A78  6FD6               	movwf	(_timeout_tarefa+1)& (0+255),b
  4144  002A7A  0EE8               	movlw	232
  4145  002A7C  6FD5               	movwf	_timeout_tarefa& (0+255),b
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;main.c: 207: p_tarefas[cont]();
  4149  002A7E  51D0               	movf	escalonador@cont& (0+255),w,b
  4150  002A80  0D02               	mullw	2
  4151  002A82  0ED1               	movlw	low _p_tarefas
  4152  002A84  24F3               	addwf	prodl,w,c
  4153  002A86  6ED9               	movwf	fsr2l,c
  4154  002A88  0E00               	movlw	high _p_tarefas
  4155  002A8A  20F4               	addwfc	prodh,w,c
  4156  002A8C  6EDA               	movwf	fsr2h,c
  4157  002A8E  D801               	call	u10858
  4158  002A90  D00A               	goto	u10859
  4159  002A92                     u10858:
  4160  002A92  0005               	push	
  4161  002A94  6EFA               	movwf	pclath,c
  4162  002A96  50DE               	movf	postinc2,w,c
  4163  002A98  6EFD               	movwf	tosl,c
  4164  002A9A  50DE               	movf	postinc2,w,c
  4165  002A9C  6EFE               	movwf	tosh,c
  4166  002A9E  50F8               	movf	tblptru,w,c
  4167  002AA0  6EFF               	movwf	tosu,c
  4168  002AA2  50FA               	movf	pclath,w,c
  4169  002AA4  0012               	return		;indir
  4170  002AA6                     u10859:
  4171                           
  4172                           ;main.c: 208: tarefa_em_execucao = 0;
  4173  002AA6  0E00               	movlw	0
  4174  002AA8  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  4175                           
  4176                           ;main.c: 209: tempo_tarefa[cont] = tempo_backup[cont];
  4177  002AAA  0100               	movlb	0	; () banked
  4178  002AAC  51D0               	movf	escalonador@cont& (0+255),w,b
  4179  002AAE  0D02               	mullw	2
  4180  002AB0  0E55               	movlw	low _tempo_backup
  4181  002AB2  24F3               	addwf	prodl,w,c
  4182  002AB4  6ED9               	movwf	fsr2l,c
  4183  002AB6  0E01               	movlw	high _tempo_backup
  4184  002AB8  20F4               	addwfc	prodh,w,c
  4185  002ABA  6EDA               	movwf	fsr2h,c
  4186  002ABC  51D0               	movf	escalonador@cont& (0+255),w,b
  4187  002ABE  0D02               	mullw	2
  4188  002AC0  0E2E               	movlw	low _tempo_tarefa
  4189  002AC2  24F3               	addwf	prodl,w,c
  4190  002AC4  6EE1               	movwf	fsr1l,c
  4191  002AC6  0E00               	movlw	high _tempo_tarefa
  4192  002AC8  20F4               	addwfc	prodh,w,c
  4193  002ACA  6EE2               	movwf	fsr1h,c
  4194  002ACC  CFDE FFE6          	movff	postinc2,postinc1
  4195  002AD0  CFDD FFE5          	movff	postdec2,postdec1
  4196  002AD4                     l1083:
  4197                           
  4198                           ; BSR set to: 0
  4199                           
  4200                           ; BSR set to: 0
  4201  002AD4  2BD0               	incf	escalonador@cont& (0+255),f,b
  4202  002AD6  D7B1               	goto	l9440
  4203  002AD8                     __end_of_escalonador:
  4204                           	opt stack 0
  4205                           tosu	equ	0xFFF
  4206                           tosh	equ	0xFFE
  4207                           tosl	equ	0xFFD
  4208                           pclath	equ	0xFFA
  4209                           tblptru	equ	0xFF8
  4210                           tblptrh	equ	0xFF7
  4211                           tblptrl	equ	0xFF6
  4212                           tablat	equ	0xFF5
  4213                           prodh	equ	0xFF4
  4214                           prodl	equ	0xFF3
  4215                           intcon	equ	0xFF2
  4216                           intcon2	equ	0xFF1
  4217                           intcon3	equ	0xFF0
  4218                           postinc0	equ	0xFEE
  4219                           wreg	equ	0xFE8
  4220                           postinc1	equ	0xFE6
  4221                           postdec1	equ	0xFE5
  4222                           fsr1h	equ	0xFE2
  4223                           fsr1l	equ	0xFE1
  4224                           postinc2	equ	0xFDE
  4225                           postdec2	equ	0xFDD
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8
  4229                           
  4230 ;; *************** function _SDCard *****************
  4231 ;; Defined at:
  4232 ;;		line 271 in file "main.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;		None
  4235 ;; Auto vars:     Size  Location     Type
  4236 ;;  fs             42    3[BANK2 ] struct .
  4237 ;;  br              2    1[BANK2 ] unsigned short 
  4238 ;;  FResult         1    0[BANK2 ] enum E3832
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  1    wreg      void 
  4241 ;; Registers used:
  4242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4248 ;;      Params:         0       0       0       0       0       0       0       0       0
  4249 ;;      Locals:         0       0       0      45       0       0       0       0       0
  4250 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4251 ;;      Totals:         0       0       0      45       0       0       0       0       0
  4252 ;;Total ram usage:       45 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:   11
  4255 ;; This function calls:
  4256 ;;		_escreve_cmd_lcd
  4257 ;;		_escreve_frase_ram_lcd
  4258 ;;		_pf_mount
  4259 ;;		_pf_open
  4260 ;;		_pf_read
  4261 ;;		_pf_write
  4262 ;;		_posicao_cursor_lcd
  4263 ;;		_proceed
  4264 ;;		_readover
  4265 ;; This function is called by:
  4266 ;;		_inicializa_tarefas
  4267 ;;		_escalonador
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text20
  4272  001A3C                     __ptext20:
  4273                           	opt stack 0
  4274  001A3C                     _SDCard:
  4275                           	opt stack 18
  4276                           
  4277                           ;main.c: 273: T0CONbits.TMR0ON = 0;
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;incstack = 0
  4281  001A3C  9ED5               	bcf	4053,7,c	;volatile
  4282                           
  4283                           ;main.c: 274: FRESULT FResult;
  4284                           ;main.c: 275: FATFS fs;
  4285                           ;main.c: 276: WORD br;
  4286                           ;main.c: 278: posicao_cursor_lcd(1,0);
  4287  001A3E  0E00               	movlw	0
  4288  001A40  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4289  001A42  0E01               	movlw	1
  4290  001A44  ECE8  F017         	call	_posicao_cursor_lcd
  4291                           
  4292                           ;main.c: 279: escreve_frase_ram_lcd("Attempting to");
  4293  001A48  0EE7               	movlw	low STR_10
  4294  001A4A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4295  001A4C  0E61               	movlw	high STR_10
  4296  001A4E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4297  001A50  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4298                           
  4299                           ;main.c: 280: posicao_cursor_lcd(2,0);
  4300  001A54  0E00               	movlw	0
  4301  001A56  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4302  001A58  0E02               	movlw	2
  4303  001A5A  ECE8  F017         	call	_posicao_cursor_lcd
  4304                           
  4305                           ;main.c: 281: escreve_frase_ram_lcd("mount file sys");
  4306  001A5E  0ECA               	movlw	low STR_11
  4307  001A60  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4308  001A62  0E61               	movlw	high STR_11
  4309  001A64  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4310  001A66  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4311                           
  4312                           ;main.c: 282: escreve_cmd_lcd(0b00000001);
  4313  001A6A  0E01               	movlw	1
  4314  001A6C  EC02  F016         	call	_escreve_cmd_lcd
  4315                           
  4316                           ;main.c: 285: proceed();
  4317  001A70  ECAA  F01A         	call	_proceed	;wreg free
  4318                           
  4319                           ;main.c: 286: if((FResult = pf_mount(&fs)) == FR_OK )
  4320  001A74  0E83               	movlw	low SDCard@fs
  4321  001A76  0100               	movlb	0	; () banked
  4322  001A78  6F78               	movwf	pf_mount@fs& (0+255),b
  4323  001A7A  0E02               	movlw	high SDCard@fs
  4324  001A7C  6F79               	movwf	(pf_mount@fs+1)& (0+255),b
  4325  001A7E  EC09  F000         	call	_pf_mount	;wreg free
  4326  001A82  0102               	movlb	2	; () banked
  4327  001A84  6F80               	movwf	SDCard@FResult& (0+255),b
  4328  001A86  5180               	movf	SDCard@FResult& (0+255),w,b
  4329  001A88  A4D8               	btfss	status,2,c
  4330  001A8A  D0AB               	goto	l1103
  4331                           
  4332                           ; BSR set to: 2
  4333                           ;main.c: 287: {
  4334                           ;main.c: 288: posicao_cursor_lcd(1,0);
  4335  001A8C  0E00               	movlw	0
  4336  001A8E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4337  001A90  0E01               	movlw	1
  4338  001A92  ECE8  F017         	call	_posicao_cursor_lcd
  4339                           
  4340                           ;main.c: 289: escreve_frase_ram_lcd("syst inicialized");
  4341  001A96  0E98               	movlw	low STR_12
  4342  001A98  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4343  001A9A  0E61               	movlw	high STR_12
  4344  001A9C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4345  001A9E  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4346                           
  4347                           ;main.c: 292: FResult = pf_open("check.txt" );
  4348  001AA2  0E47               	movlw	low STR_8
  4349  001AA4  0100               	movlb	0	; () banked
  4350  001AA6  6FB6               	movwf	pf_open@path& (0+255),b
  4351  001AA8  0E62               	movlw	high STR_8
  4352  001AAA  6FB7               	movwf	(pf_open@path+1)& (0+255),b
  4353  001AAC  ECA5  F00E         	call	_pf_open	;wreg free
  4354  001AB0  0102               	movlb	2	; () banked
  4355  001AB2  6F80               	movwf	SDCard@FResult& (0+255),b
  4356                           
  4357                           ; BSR set to: 2
  4358                           ;main.c: 294: if( FResult == FR_OK )
  4359  001AB4  5180               	movf	SDCard@FResult& (0+255),w,b
  4360  001AB6  A4D8               	btfss	status,2,c
  4361  001AB8  D07A               	goto	l1104
  4362                           
  4363                           ; BSR set to: 2
  4364                           ;main.c: 295: {
  4365                           ;main.c: 297: if( (FResult = pf_write("SD_Card", 5, &br)) == FR_OK )
  4366  001ABA  0E63               	movlw	low STR_14
  4367  001ABC  0100               	movlb	0	; () banked
  4368  001ABE  6F96               	movwf	pf_write@buff& (0+255),b
  4369  001AC0  0E62               	movlw	high STR_14
  4370  001AC2  6F97               	movwf	(pf_write@buff+1)& (0+255),b
  4371  001AC4  0E00               	movlw	0
  4372  001AC6  6F99               	movwf	(pf_write@btw+1)& (0+255),b
  4373  001AC8  0E05               	movlw	5
  4374  001ACA  6F98               	movwf	pf_write@btw& (0+255),b
  4375  001ACC  0E81               	movlw	low SDCard@br
  4376  001ACE  6F9A               	movwf	pf_write@bw& (0+255),b
  4377  001AD0  0E02               	movlw	high SDCard@br
  4378  001AD2  6F9B               	movwf	(pf_write@bw+1)& (0+255),b
  4379  001AD4  EC23  F003         	call	_pf_write	;wreg free
  4380  001AD8  0102               	movlb	2	; () banked
  4381  001ADA  6F80               	movwf	SDCard@FResult& (0+255),b
  4382  001ADC  5180               	movf	SDCard@FResult& (0+255),w,b
  4383  001ADE  A4D8               	btfss	status,2,c
  4384  001AE0  D00C               	goto	l1105
  4385                           
  4386                           ; BSR set to: 2
  4387                           ;main.c: 298: {
  4388                           ;main.c: 299: posicao_cursor_lcd(1,0);
  4389  001AE2  0E00               	movlw	0
  4390  001AE4  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4391  001AE6  0E01               	movlw	1
  4392  001AE8  ECE8  F017         	call	_posicao_cursor_lcd
  4393                           
  4394                           ;main.c: 300: escreve_frase_ram_lcd("syst inicialized");
  4395  001AEC  0E98               	movlw	low STR_12
  4396  001AEE  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4397  001AF0  0E61               	movlw	high STR_12
  4398  001AF2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4399  001AF4  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4400                           
  4401                           ;main.c: 301: }
  4402  001AF8  D00F               	goto	l1109
  4403  001AFA                     l1105:
  4404                           
  4405                           ;main.c: 302: else
  4406                           ;main.c: 303: {
  4407                           ;main.c: 304: escreve_cmd_lcd(0b00000001);
  4408  001AFA  0E01               	movlw	1
  4409  001AFC  EC02  F016         	call	_escreve_cmd_lcd
  4410                           
  4411                           ;main.c: 305: posicao_cursor_lcd(1,0);
  4412  001B00  0E00               	movlw	0
  4413  001B02  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4414  001B04  0E01               	movlw	1
  4415  001B06  ECE8  F017         	call	_posicao_cursor_lcd
  4416                           
  4417                           ;main.c: 306: escreve_frase_ram_lcd("SDCard error");
  4418  001B0A  0E2D               	movlw	low STR_16
  4419  001B0C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4420  001B0E  0E62               	movlw	high STR_16
  4421  001B10  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4422  001B12  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4423  001B16                     l1107:
  4424  001B16  D7FF               	goto	l1107
  4425  001B18                     l1109:
  4426                           
  4427                           ;main.c: 308: }
  4428                           ;main.c: 309: escreve_cmd_lcd(0b00000001);
  4429  001B18  0E01               	movlw	1
  4430  001B1A  EC02  F016         	call	_escreve_cmd_lcd
  4431                           
  4432                           ;main.c: 312: posicao_cursor_lcd(1,0);
  4433  001B1E  0E00               	movlw	0
  4434  001B20  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4435  001B22  0E01               	movlw	1
  4436  001B24  ECE8  F017         	call	_posicao_cursor_lcd
  4437                           
  4438                           ;main.c: 313: escreve_frase_ram_lcd("lendo arquivo");
  4439  001B28  0E03               	movlw	low STR_17
  4440  001B2A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4441  001B2C  0E62               	movlw	high STR_17
  4442  001B2E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4443  001B30  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4444                           
  4445                           ;main.c: 317: {
  4446                           ;main.c: 318: readover(1);
  4447                           
  4448                           ;main.c: 316: do
  4449  001B34  0E00               	movlw	0
  4450  001B36  6E1B               	movwf	readover@a+1,c
  4451  001B38  0E01               	movlw	1
  4452  001B3A  6E1A               	movwf	readover@a,c
  4453  001B3C  ECB6  F01A         	call	_readover	;wreg free
  4454                           
  4455                           ;main.c: 321: if( (FResult = pf_read(data_buffer_32, 31, &br)) == FR_OK )
  4456  001B40  0E5F               	movlw	low _data_buffer_32
  4457  001B42  0100               	movlb	0	; () banked
  4458  001B44  6F96               	movwf	pf_read@buff& (0+255),b
  4459  001B46  0E01               	movlw	high _data_buffer_32
  4460  001B48  6F97               	movwf	(pf_read@buff+1)& (0+255),b
  4461  001B4A  0E00               	movlw	0
  4462  001B4C  6F99               	movwf	(pf_read@btr+1)& (0+255),b
  4463  001B4E  0E1F               	movlw	31
  4464  001B50  6F98               	movwf	pf_read@btr& (0+255),b
  4465  001B52  0E81               	movlw	low SDCard@br
  4466  001B54  6F9A               	movwf	pf_read@br& (0+255),b
  4467  001B56  0E02               	movlw	high SDCard@br
  4468  001B58  6F9B               	movwf	(pf_read@br+1)& (0+255),b
  4469  001B5A  EC76  F007         	call	_pf_read	;wreg free
  4470  001B5E  0102               	movlb	2	; () banked
  4471  001B60  6F80               	movwf	SDCard@FResult& (0+255),b
  4472  001B62  5180               	movf	SDCard@FResult& (0+255),w,b
  4473  001B64  A4D8               	btfss	status,2,c
  4474  001B66  D009               	goto	l1111
  4475                           
  4476                           ; BSR set to: 2
  4477                           ;main.c: 322: {
  4478                           ;main.c: 324: data_buffer_32[br] = 0;
  4479  001B68  0E5F               	movlw	low _data_buffer_32
  4480  001B6A  2581               	addwf	SDCard@br& (0+255),w,b
  4481  001B6C  6ED9               	movwf	fsr2l,c
  4482  001B6E  0E01               	movlw	high _data_buffer_32
  4483  001B70  2182               	addwfc	(SDCard@br+1)& (0+255),w,b
  4484  001B72  6EDA               	movwf	fsr2h,c
  4485  001B74  0E00               	movlw	0
  4486  001B76  6EDF               	movwf	indf2,c
  4487                           
  4488                           ;main.c: 325: break;
  4489  001B78  D035               	goto	l1124
  4490  001B7A                     l1111:
  4491                           
  4492                           ; BSR set to: 2
  4493                           ;main.c: 328: else
  4494                           ;main.c: 329: {
  4495                           ;main.c: 331: escreve_cmd_lcd(0b00000001);
  4496                           
  4497                           ; BSR set to: 2
  4498  001B7A  0E01               	movlw	1
  4499  001B7C  EC02  F016         	call	_escreve_cmd_lcd
  4500                           
  4501                           ;main.c: 332: posicao_cursor_lcd(1,0);
  4502  001B80  0E00               	movlw	0
  4503  001B82  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4504  001B84  0E01               	movlw	1
  4505  001B86  ECE8  F017         	call	_posicao_cursor_lcd
  4506                           
  4507                           ;main.c: 333: escreve_frase_ram_lcd("Erro tentando");
  4508  001B8A  0ED9               	movlw	low STR_18
  4509  001B8C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4510  001B8E  0E61               	movlw	high STR_18
  4511  001B90  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4512  001B92  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4513                           
  4514                           ;main.c: 334: posicao_cursor_lcd(2,0);
  4515  001B96  0E00               	movlw	0
  4516  001B98  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4517  001B9A  0E02               	movlw	2
  4518  001B9C  ECE8  F017         	call	_posicao_cursor_lcd
  4519                           
  4520                           ;main.c: 335: escreve_frase_ram_lcd("ler o arquivo");
  4521  001BA0  0EF5               	movlw	low STR_19
  4522  001BA2  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4523  001BA4  0E61               	movlw	high STR_19
  4524  001BA6  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4525  001BA8  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4526  001BAC                     l1114:
  4527  001BAC  D7FF               	goto	l1114
  4528  001BAE                     l1104:
  4529                           
  4530                           ; BSR set to: 2
  4531                           ;main.c: 341: else
  4532                           ;main.c: 342: {
  4533                           ;main.c: 343: escreve_cmd_lcd(0b00000001);
  4534                           
  4535                           ; BSR set to: 2
  4536  001BAE  0E01               	movlw	1
  4537  001BB0  EC02  F016         	call	_escreve_cmd_lcd
  4538                           
  4539                           ;main.c: 344: posicao_cursor_lcd(1,0);
  4540  001BB4  0E00               	movlw	0
  4541  001BB6  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4542  001BB8  0E01               	movlw	1
  4543  001BBA  ECE8  F017         	call	_posicao_cursor_lcd
  4544                           
  4545                           ;main.c: 345: escreve_frase_ram_lcd("Erro tentando");
  4546  001BBE  0ED9               	movlw	low STR_18
  4547  001BC0  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4548  001BC2  0E61               	movlw	high STR_18
  4549  001BC4  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4550  001BC6  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4551                           
  4552                           ;main.c: 346: posicao_cursor_lcd(2,0);
  4553  001BCA  0E00               	movlw	0
  4554  001BCC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4555  001BCE  0E02               	movlw	2
  4556  001BD0  ECE8  F017         	call	_posicao_cursor_lcd
  4557                           
  4558                           ;main.c: 347: escreve_frase_ram_lcd("abrir o arquivo");
  4559  001BD4  0EBA               	movlw	low STR_21
  4560  001BD6  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4561  001BD8  0E61               	movlw	high STR_21
  4562  001BDA  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4563  001BDC  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4564  001BE0                     l1118:
  4565  001BE0  D7FF               	goto	l1118
  4566  001BE2                     l1103:
  4567                           
  4568                           ;main.c: 351: else
  4569                           ;main.c: 352: {
  4570                           ;main.c: 354: while( 1 );
  4571  001BE2  D7FF               	goto	l1103
  4572  001BE4                     l1124:
  4573                           
  4574                           ;main.c: 355: }
  4575                           ;main.c: 373: if( FResult != FR_OK )
  4576  001BE4  0102               	movlb	2	; () banked
  4577  001BE6  5180               	movf	SDCard@FResult& (0+255),w,b
  4578  001BE8  A4D8               	btfss	status,2,c
  4579  001BEA                     u10700:
  4580                           
  4581                           ;main.c: 374: {
  4582                           ;main.c: 379: while( 1 );
  4583  001BEA  D7FF               	goto	u10700
  4584  001BEC                     
  4585                           ;main.c: 380: }
  4586                           ;main.c: 383: while(1);
  4587  001BEC  D7FF               	goto	l1128
  4588  001BEE                     __end_of_SDCard:
  4589                           	opt stack 0
  4590                           tosu	equ	0xFFF
  4591                           tosh	equ	0xFFE
  4592                           tosl	equ	0xFFD
  4593                           pclath	equ	0xFFA
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodh	equ	0xFF4
  4599                           prodl	equ	0xFF3
  4600                           intcon	equ	0xFF2
  4601                           intcon2	equ	0xFF1
  4602                           intcon3	equ	0xFF0
  4603                           postinc0	equ	0xFEE
  4604                           wreg	equ	0xFE8
  4605                           postinc1	equ	0xFE6
  4606                           postdec1	equ	0xFE5
  4607                           fsr1h	equ	0xFE2
  4608                           fsr1l	equ	0xFE1
  4609                           indf2	equ	0xFDF
  4610                           postinc2	equ	0xFDE
  4611                           postdec2	equ	0xFDD
  4612                           fsr2h	equ	0xFDA
  4613                           fsr2l	equ	0xFD9
  4614                           status	equ	0xFD8
  4615                           
  4616 ;; *************** function _acende_led4 *****************
  4617 ;; Defined at:
  4618 ;;		line 388 in file "main.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;		None
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  1    wreg      void 
  4625 ;; Registers used:
  4626 ;;		wreg, status,2, status,0, cstack
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4632 ;;      Params:         0       0       0       0       0       0       0       0       0
  4633 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4635 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4636 ;;Total ram usage:        0 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    3
  4639 ;; This function calls:
  4640 ;;		_shrc_apaga_bit
  4641 ;;		_shrc_seta_bit
  4642 ;; This function is called by:
  4643 ;;		_inicializa_tarefas
  4644 ;;		_escalonador
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           	psect	text21
  4649  0033DA                     __ptext21:
  4650                           	opt stack 0
  4651  0033DA                     _acende_led4:
  4652                           	opt stack 26
  4653                           
  4654                           ;main.c: 389: static unsigned char flag = 0;
  4655                           ;main.c: 390: flag = !flag;
  4656                           
  4657                           ;incstack = 0
  4658  0033DA  503D               	movf	acende_led4@flag,w,c
  4659  0033DC  A4D8               	btfss	status,2,c
  4660  0033DE  D002               	goto	u5720
  4661  0033E0  0E01               	movlw	1
  4662  0033E2  D001               	goto	u5730
  4663  0033E4                     u5720:
  4664  0033E4  0E00               	movlw	0
  4665  0033E6                     u5730:
  4666  0033E6  6E3D               	movwf	acende_led4@flag,c
  4667                           
  4668                           ;main.c: 391: if(!flag)
  4669  0033E8  503D               	movf	acende_led4@flag,w,c
  4670  0033EA  A4D8               	btfss	status,2,c
  4671  0033EC  D004               	goto	l1137
  4672                           
  4673                           ;main.c: 392: {
  4674                           ;main.c: 393: shrc_seta_bit(0);
  4675  0033EE  0E00               	movlw	0
  4676  0033F0  EC31  F01A         	call	_shrc_seta_bit
  4677                           
  4678                           ;main.c: 394: }
  4679  0033F4  0012               	return	
  4680  0033F6                     l1137:
  4681                           
  4682                           ;main.c: 395: else
  4683                           ;main.c: 396: {
  4684                           ;main.c: 397: shrc_apaga_bit(0);
  4685  0033F6  0E00               	movlw	0
  4686  0033F8  EC22  F01A         	call	_shrc_apaga_bit
  4687  0033FC  0012               	return	
  4688  0033FE                     __end_of_acende_led4:
  4689                           	opt stack 0
  4690                           tosu	equ	0xFFF
  4691                           tosh	equ	0xFFE
  4692                           tosl	equ	0xFFD
  4693                           pclath	equ	0xFFA
  4694                           tblptru	equ	0xFF8
  4695                           tblptrh	equ	0xFF7
  4696                           tblptrl	equ	0xFF6
  4697                           tablat	equ	0xFF5
  4698                           prodh	equ	0xFF4
  4699                           prodl	equ	0xFF3
  4700                           intcon	equ	0xFF2
  4701                           intcon2	equ	0xFF1
  4702                           intcon3	equ	0xFF0
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           postinc1	equ	0xFE6
  4706                           postdec1	equ	0xFE5
  4707                           fsr1h	equ	0xFE2
  4708                           fsr1l	equ	0xFE1
  4709                           indf2	equ	0xFDF
  4710                           postinc2	equ	0xFDE
  4711                           postdec2	equ	0xFDD
  4712                           fsr2h	equ	0xFDA
  4713                           fsr2l	equ	0xFD9
  4714                           status	equ	0xFD8
  4715                           
  4716 ;; *************** function _shrc_seta_bit *****************
  4717 ;; Defined at:
  4718 ;;		line 119 in file "bibliotecas/SHRC.c"
  4719 ;; Parameters:    Size  Location     Type
  4720 ;;  posicao_bit     1    wreg     unsigned char 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  posicao_bit     1   27[COMRAM] unsigned char 
  4723 ;; Return value:  Size  Location     Type
  4724 ;;                  1    wreg      void 
  4725 ;; Registers used:
  4726 ;;		wreg, status,2, status,0
  4727 ;; Tracked objects:
  4728 ;;		On entry : 0/0
  4729 ;;		On exit  : 0/0
  4730 ;;		Unchanged: 0/0
  4731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4732 ;;      Params:         0       0       0       0       0       0       0       0       0
  4733 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4734 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4735 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4736 ;;Total ram usage:        3 bytes
  4737 ;; Hardware stack levels used:    1
  4738 ;; Hardware stack levels required when called:    2
  4739 ;; This function calls:
  4740 ;;		Nothing
  4741 ;; This function is called by:
  4742 ;;		_acende_led4
  4743 ;;		_timer_dois
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           	psect	text22
  4748  003462                     __ptext22:
  4749                           	opt stack 0
  4750  003462                     _shrc_seta_bit:
  4751                           	opt stack 26
  4752                           
  4753                           ;incstack = 0
  4754                           ;shrc_seta_bit@posicao_bit stored from wreg
  4755  003462  6E1C               	movwf	shrc_seta_bit@posicao_bit,c
  4756                           
  4757                           ;SHRC.c: 121: dado |= (1<<posicao_bit);
  4758  003464  C01C  F01A         	movff	shrc_seta_bit@posicao_bit,??_shrc_seta_bit
  4759  003468  0E01               	movlw	1
  4760  00346A  6E1B               	movwf	(??_shrc_seta_bit+1)& (0+255),c
  4761  00346C  2A1A               	incf	??_shrc_seta_bit,f,c
  4762  00346E  D002               	goto	u4964
  4763  003470                     u4965:
  4764  003470  90D8               	bcf	status,0,c
  4765  003472  361B               	rlcf	??_shrc_seta_bit+1,f,c
  4766  003474                     u4964:
  4767  003474  2E1A               	decfsz	??_shrc_seta_bit,f,c
  4768  003476  D7FC               	goto	u4965
  4769  003478  501B               	movf	??_shrc_seta_bit+1,w,c
  4770  00347A  1245               	iorwf	_dado,f,c
  4771  00347C  0012               	return		;funcret
  4772  00347E                     __end_of_shrc_seta_bit:
  4773                           	opt stack 0
  4774                           tosu	equ	0xFFF
  4775                           tosh	equ	0xFFE
  4776                           tosl	equ	0xFFD
  4777                           pclath	equ	0xFFA
  4778                           tblptru	equ	0xFF8
  4779                           tblptrh	equ	0xFF7
  4780                           tblptrl	equ	0xFF6
  4781                           tablat	equ	0xFF5
  4782                           prodh	equ	0xFF4
  4783                           prodl	equ	0xFF3
  4784                           intcon	equ	0xFF2
  4785                           intcon2	equ	0xFF1
  4786                           intcon3	equ	0xFF0
  4787                           postinc0	equ	0xFEE
  4788                           wreg	equ	0xFE8
  4789                           postinc1	equ	0xFE6
  4790                           postdec1	equ	0xFE5
  4791                           fsr1h	equ	0xFE2
  4792                           fsr1l	equ	0xFE1
  4793                           indf2	equ	0xFDF
  4794                           postinc2	equ	0xFDE
  4795                           postdec2	equ	0xFDD
  4796                           fsr2h	equ	0xFDA
  4797                           fsr2l	equ	0xFD9
  4798                           status	equ	0xFD8
  4799                           
  4800 ;; *************** function _shrc_apaga_bit *****************
  4801 ;; Defined at:
  4802 ;;		line 124 in file "bibliotecas/SHRC.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;  posicao_bit     1    wreg     unsigned char 
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;  posicao_bit     1   27[COMRAM] unsigned char 
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2, status,0
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4816 ;;      Params:         0       0       0       0       0       0       0       0       0
  4817 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4818 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4819 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4820 ;;Total ram usage:        3 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    2
  4823 ;; This function calls:
  4824 ;;		Nothing
  4825 ;; This function is called by:
  4826 ;;		_acende_led4
  4827 ;;		_timer_dois
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           	psect	text23
  4832  003444                     __ptext23:
  4833                           	opt stack 0
  4834  003444                     _shrc_apaga_bit:
  4835                           	opt stack 26
  4836                           
  4837                           ;incstack = 0
  4838                           ;shrc_apaga_bit@posicao_bit stored from wreg
  4839  003444  6E1C               	movwf	shrc_apaga_bit@posicao_bit,c
  4840                           
  4841                           ;SHRC.c: 126: dado &= ~(1<<posicao_bit);
  4842  003446  C01C  F01A         	movff	shrc_apaga_bit@posicao_bit,??_shrc_apaga_bit
  4843  00344A  0E01               	movlw	1
  4844  00344C  6E1B               	movwf	(??_shrc_apaga_bit+1)& (0+255),c
  4845  00344E  2A1A               	incf	??_shrc_apaga_bit,f,c
  4846  003450  D002               	goto	u4974
  4847  003452                     u4975:
  4848  003452  90D8               	bcf	status,0,c
  4849  003454  361B               	rlcf	??_shrc_apaga_bit+1,f,c
  4850  003456                     u4974:
  4851  003456  2E1A               	decfsz	??_shrc_apaga_bit,f,c
  4852  003458  D7FC               	goto	u4975
  4853  00345A  501B               	movf	??_shrc_apaga_bit+1,w,c
  4854  00345C  0AFF               	xorlw	255
  4855  00345E  1645               	andwf	_dado,f,c
  4856  003460  0012               	return		;funcret
  4857  003462                     __end_of_shrc_apaga_bit:
  4858                           	opt stack 0
  4859                           tosu	equ	0xFFF
  4860                           tosh	equ	0xFFE
  4861                           tosl	equ	0xFFD
  4862                           pclath	equ	0xFFA
  4863                           tblptru	equ	0xFF8
  4864                           tblptrh	equ	0xFF7
  4865                           tblptrl	equ	0xFF6
  4866                           tablat	equ	0xFF5
  4867                           prodh	equ	0xFF4
  4868                           prodl	equ	0xFF3
  4869                           intcon	equ	0xFF2
  4870                           intcon2	equ	0xFF1
  4871                           intcon3	equ	0xFF0
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           postinc1	equ	0xFE6
  4875                           postdec1	equ	0xFE5
  4876                           fsr1h	equ	0xFE2
  4877                           fsr1l	equ	0xFE1
  4878                           indf2	equ	0xFDF
  4879                           postinc2	equ	0xFDE
  4880                           postdec2	equ	0xFDD
  4881                           fsr2h	equ	0xFDA
  4882                           fsr2l	equ	0xFD9
  4883                           status	equ	0xFD8
  4884                           
  4885 ;; *************** function _readover *****************
  4886 ;; Defined at:
  4887 ;;		line 24 in file "bibliotecas/diskio.c"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;  a               2   25[COMRAM] int 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;		None
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  1    wreg      void 
  4894 ;; Registers used:
  4895 ;;		None
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4901 ;;      Params:         2       0       0       0       0       0       0       0       0
  4902 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4903 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4904 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4905 ;;Total ram usage:        2 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    2
  4908 ;; This function calls:
  4909 ;;		Nothing
  4910 ;; This function is called by:
  4911 ;;		_SDCard
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text24
  4916  00356C                     __ptext24:
  4917                           	opt stack 0
  4918  00356C                     _readover:
  4919                           	opt stack 26
  4920                           
  4921                           ;diskio.c: 26: flag = a;
  4922                           
  4923                           ;incstack = 0
  4924  00356C  C01A  F0D7         	movff	readover@a,_flag
  4925  003570  C01B  F0D8         	movff	readover@a+1,_flag+1
  4926  003574  0012               	return		;funcret
  4927  003576                     __end_of_readover:
  4928                           	opt stack 0
  4929                           tosu	equ	0xFFF
  4930                           tosh	equ	0xFFE
  4931                           tosl	equ	0xFFD
  4932                           pclath	equ	0xFFA
  4933                           tblptru	equ	0xFF8
  4934                           tblptrh	equ	0xFF7
  4935                           tblptrl	equ	0xFF6
  4936                           tablat	equ	0xFF5
  4937                           prodh	equ	0xFF4
  4938                           prodl	equ	0xFF3
  4939                           intcon	equ	0xFF2
  4940                           intcon2	equ	0xFF1
  4941                           intcon3	equ	0xFF0
  4942                           postinc0	equ	0xFEE
  4943                           wreg	equ	0xFE8
  4944                           postinc1	equ	0xFE6
  4945                           postdec1	equ	0xFE5
  4946                           fsr1h	equ	0xFE2
  4947                           fsr1l	equ	0xFE1
  4948                           indf2	equ	0xFDF
  4949                           postinc2	equ	0xFDE
  4950                           postdec2	equ	0xFDD
  4951                           fsr2h	equ	0xFDA
  4952                           fsr2l	equ	0xFD9
  4953                           status	equ	0xFD8
  4954                           
  4955 ;; *************** function _pf_write *****************
  4956 ;; Defined at:
  4957 ;;		line 919 in file "bibliotecas/pff.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;  buff            2   54[BANK0 ] PTR const void 
  4960 ;;		 -> STR_14(8), 
  4961 ;;  btw             2   56[BANK0 ] unsigned int 
  4962 ;;  bw              2   58[BANK0 ] PTR unsigned int 
  4963 ;;		 -> SDCard@br(2), 
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  clst            4   78[BANK0 ] unsigned long 
  4966 ;;  remain          4   74[BANK0 ] unsigned long 
  4967 ;;  sect            4   70[BANK0 ] unsigned long 
  4968 ;;  fs              2   85[BANK0 ] PTR struct .
  4969 ;;		 -> SDCard@fs(42), NULL(0), 
  4970 ;;  wcnt            2   83[BANK0 ] unsigned int 
  4971 ;;  p               2   68[BANK0 ] PTR const unsigned char 
  4972 ;;		 -> STR_14(8), 
  4973 ;;  cs              1   82[BANK0 ] unsigned char 
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      enum E43
  4976 ;; Registers used:
  4977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4983 ;;      Params:         0       6       0       0       0       0       0       0       0
  4984 ;;      Locals:         0      19       0       0       0       0       0       0       0
  4985 ;;      Temps:          0       8       0       0       0       0       0       0       0
  4986 ;;      Totals:         0      33       0       0       0       0       0       0       0
  4987 ;;Total ram usage:       33 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:    7
  4990 ;; This function calls:
  4991 ;;		_clust2sect
  4992 ;;		_disk_writep
  4993 ;;		_get_fat
  4994 ;; This function is called by:
  4995 ;;		_SDCard
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           	psect	text25
  5000  000646                     __ptext25:
  5001                           	opt stack 0
  5002  000646                     _pf_write:
  5003                           	opt stack 21
  5004                           
  5005                           ;pff.c: 925: DWORD clst;
  5006                           ;pff.c: 926: DWORD sect, remain;
  5007                           ;pff.c: 927: const BYTE *p = buff;
  5008                           
  5009                           ;incstack = 0
  5010  000646  C096  F0A4         	movff	pf_write@buff,pf_write@p
  5011  00064A  C097  F0A5         	movff	pf_write@buff+1,pf_write@p+1
  5012                           
  5013                           ;pff.c: 928: BYTE cs;
  5014                           ;pff.c: 929: UINT wcnt;
  5015                           ;pff.c: 930: FATFS *fs = FatFs;
  5016  00064E  C037  F0B5         	movff	_FatFs,pf_write@fs
  5017  000652  C038  F0B6         	movff	_FatFs+1,pf_write@fs+1
  5018                           
  5019                           ;pff.c: 933: *bw = 0;
  5020  000656  C09A  FFD9         	movff	pf_write@bw,fsr2l
  5021  00065A  C09B  FFDA         	movff	pf_write@bw+1,fsr2h
  5022  00065E  0E00               	movlw	0
  5023  000660  6EDE               	movwf	postinc2,c
  5024  000662  0E00               	movlw	0
  5025  000664  6EDD               	movwf	postdec2,c
  5026                           
  5027                           ;pff.c: 934: if (!fs) return FR_NOT_ENABLED;
  5028  000666  0100               	movlb	0	; () banked
  5029  000668  51B5               	movf	pf_write@fs& (0+255),w,b
  5030  00066A  11B6               	iorwf	(pf_write@fs+1)& (0+255),w,b
  5031  00066C  A4D8               	btfss	status,2,c
  5032  00066E  D002               	goto	l821
  5033                           
  5034                           ; BSR set to: 0
  5035  000670  0E05               	movlw	5
  5036                           
  5037                           ; BSR set to: 0
  5038  000672  0012               	return	
  5039  000674                     l821:
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;pff.c: 935: if (!(fs->flag & 0x01))
  5043                           
  5044                           ; BSR set to: 0
  5045  000674  EE20 F001          	lfsr	2,1
  5046  000678  51B5               	movf	pf_write@fs& (0+255),w,b
  5047  00067A  26D9               	addwf	fsr2l,f,c
  5048  00067C  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5049  00067E  22DA               	addwfc	fsr2h,f,c
  5050  000680  B0DF               	btfsc	indf2,0,c
  5051  000682  D002               	goto	l823
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;pff.c: 936: return FR_NOT_OPENED;
  5055  000684  0E04               	movlw	4
  5056                           
  5057                           ; BSR set to: 0
  5058  000686  0012               	return	
  5059  000688                     l823:
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;pff.c: 938: if (!btw) {
  5063                           
  5064                           ; BSR set to: 0
  5065  000688  5198               	movf	pf_write@btw& (0+255),w,b
  5066  00068A  1199               	iorwf	(pf_write@btw+1)& (0+255),w,b
  5067  00068C  A4D8               	btfss	status,2,c
  5068  00068E  D031               	goto	l824
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;pff.c: 939: if ((fs->flag & 0x40) && disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_E
      +                          RR;};
  5072  000690  EE20 F001          	lfsr	2,1
  5073  000694  51B5               	movf	pf_write@fs& (0+255),w,b
  5074  000696  26D9               	addwf	fsr2l,f,c
  5075  000698  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5076  00069A  22DA               	addwfc	fsr2h,f,c
  5077  00069C  ACDF               	btfss	indf2,6,c
  5078  00069E  D01E               	goto	l825
  5079                           
  5080                           ; BSR set to: 0
  5081  0006A0  0E00               	movlw	0
  5082  0006A2  6E26               	movwf	disk_writep@wr,c
  5083  0006A4  0E00               	movlw	0
  5084  0006A6  6E27               	movwf	disk_writep@wr+1,c
  5085  0006A8  0E00               	movlw	0
  5086  0006AA  6E28               	movwf	disk_writep@wr+2,c
  5087  0006AC  0E00               	movlw	0
  5088  0006AE  6E29               	movwf	disk_writep@sc,c
  5089  0006B0  0E00               	movlw	0
  5090  0006B2  6E2A               	movwf	disk_writep@sc+1,c
  5091  0006B4  0E00               	movlw	0
  5092  0006B6  6E2B               	movwf	disk_writep@sc+2,c
  5093  0006B8  0E00               	movlw	0
  5094  0006BA  6E2C               	movwf	disk_writep@sc+3,c
  5095  0006BC  ECEF  F00F         	call	_disk_writep	;wreg free
  5096  0006C0  0900               	iorlw	0
  5097  0006C2  B4D8               	btfsc	status,2,c
  5098  0006C4  D00B               	goto	l825
  5099  0006C6  0100               	movlb	0	; () banked
  5100  0006C8  EE20 F001          	lfsr	2,1
  5101  0006CC  51B5               	movf	pf_write@fs& (0+255),w,b
  5102  0006CE  26D9               	addwf	fsr2l,f,c
  5103  0006D0  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5104  0006D2  22DA               	addwfc	fsr2h,f,c
  5105  0006D4  0E00               	movlw	0
  5106  0006D6  6EDF               	movwf	indf2,c
  5107                           
  5108                           ; BSR set to: 0
  5109  0006D8  0E01               	movlw	1
  5110                           
  5111                           ; BSR set to: 0
  5112  0006DA  0012               	return	
  5113  0006DC                     l825:
  5114                           
  5115                           ;pff.c: 940: fs->flag &= ~0x40;
  5116                           
  5117                           ; BSR set to: 0
  5118  0006DC  0100               	movlb	0	; () banked
  5119  0006DE  EE20 F001          	lfsr	2,1
  5120  0006E2  51B5               	movf	pf_write@fs& (0+255),w,b
  5121  0006E4  26D9               	addwf	fsr2l,f,c
  5122  0006E6  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5123  0006E8  22DA               	addwfc	fsr2h,f,c
  5124  0006EA  0EBF               	movlw	191
  5125  0006EC  16DF               	andwf	indf2,f,c
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;pff.c: 941: return FR_OK;
  5129  0006EE  0E00               	movlw	0
  5130                           
  5131                           ; BSR set to: 0
  5132  0006F0  0012               	return	
  5133  0006F2                     l824:
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;pff.c: 943: if (!(fs->flag & 0x40))
  5137                           
  5138                           ; BSR set to: 0
  5139  0006F2  EE20 F001          	lfsr	2,1
  5140  0006F6  51B5               	movf	pf_write@fs& (0+255),w,b
  5141  0006F8  26D9               	addwf	fsr2l,f,c
  5142  0006FA  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5143  0006FC  22DA               	addwfc	fsr2h,f,c
  5144  0006FE  BCDF               	btfsc	indf2,6,c
  5145  000700  D00E               	goto	l827
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;pff.c: 944: fs->fptr &= 0xFFFFFE00;
  5149  000702  EE20 F016          	lfsr	2,22
  5150  000706  51B5               	movf	pf_write@fs& (0+255),w,b
  5151  000708  26D9               	addwf	fsr2l,f,c
  5152  00070A  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5153  00070C  22DA               	addwfc	fsr2h,f,c
  5154  00070E  0E00               	movlw	0
  5155  000710  16DE               	andwf	postinc2,f,c
  5156  000712  0EFE               	movlw	254
  5157  000714  16DE               	andwf	postinc2,f,c
  5158  000716  0EFF               	movlw	255
  5159  000718  16DE               	andwf	postinc2,f,c
  5160  00071A  0EFF               	movlw	255
  5161  00071C  16DE               	andwf	postinc2,f,c
  5162  00071E                     l827:
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;pff.c: 945: }
  5166                           ;pff.c: 946: remain = fs->fsize - fs->fptr;
  5167                           
  5168                           ; BSR set to: 0
  5169  00071E  EE20 F01A          	lfsr	2,26
  5170  000722  51B5               	movf	pf_write@fs& (0+255),w,b
  5171  000724  26D9               	addwf	fsr2l,f,c
  5172  000726  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5173  000728  22DA               	addwfc	fsr2h,f,c
  5174  00072A  CFDE F09C          	movff	postinc2,??_pf_write
  5175  00072E  CFDE F09D          	movff	postinc2,??_pf_write+1
  5176  000732  CFDE F09E          	movff	postinc2,??_pf_write+2
  5177  000736  CFDE F09F          	movff	postinc2,??_pf_write+3
  5178  00073A  EE20 F016          	lfsr	2,22
  5179  00073E  51B5               	movf	pf_write@fs& (0+255),w,b
  5180  000740  26D9               	addwf	fsr2l,f,c
  5181  000742  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5182  000744  22DA               	addwfc	fsr2h,f,c
  5183  000746  CFDE F0A0          	movff	postinc2,??_pf_write+4
  5184  00074A  CFDE F0A1          	movff	postinc2,??_pf_write+5
  5185  00074E  CFDE F0A2          	movff	postinc2,??_pf_write+6
  5186  000752  CFDE F0A3          	movff	postinc2,??_pf_write+7
  5187  000756  1FA0               	comf	(??_pf_write+4)& (0+255),f,b
  5188  000758  1FA1               	comf	(??_pf_write+5)& (0+255),f,b
  5189  00075A  1FA2               	comf	(??_pf_write+6)& (0+255),f,b
  5190  00075C  1FA3               	comf	(??_pf_write+7)& (0+255),f,b
  5191  00075E  2BA0               	incf	(??_pf_write+4)& (0+255),f,b
  5192  000760  0E00               	movlw	0
  5193  000762  23A1               	addwfc	(??_pf_write+5)& (0+255),f,b
  5194  000764  23A2               	addwfc	(??_pf_write+6)& (0+255),f,b
  5195  000766  23A3               	addwfc	(??_pf_write+7)& (0+255),f,b
  5196  000768  519C               	movf	??_pf_write& (0+255),w,b
  5197  00076A  25A0               	addwf	(??_pf_write+4)& (0+255),w,b
  5198  00076C  6FAA               	movwf	pf_write@remain& (0+255),b
  5199  00076E  519D               	movf	(??_pf_write+1)& (0+255),w,b
  5200  000770  21A1               	addwfc	(??_pf_write+5)& (0+255),w,b
  5201  000772  6FAB               	movwf	(pf_write@remain+1)& (0+255),b
  5202  000774  519E               	movf	(??_pf_write+2)& (0+255),w,b
  5203  000776  21A2               	addwfc	(??_pf_write+6)& (0+255),w,b
  5204  000778  6FAC               	movwf	(pf_write@remain+2)& (0+255),b
  5205  00077A  519F               	movf	(??_pf_write+3)& (0+255),w,b
  5206  00077C  21A3               	addwfc	(??_pf_write+7)& (0+255),w,b
  5207  00077E  6FAD               	movwf	(pf_write@remain+3)& (0+255),b
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;pff.c: 947: if (btw > remain) btw = (UINT)remain;
  5211  000780  5198               	movf	pf_write@btw& (0+255),w,b
  5212  000782  6F9C               	movwf	??_pf_write& (0+255),b
  5213  000784  5199               	movf	(pf_write@btw+1)& (0+255),w,b
  5214  000786  6F9D               	movwf	(??_pf_write+1)& (0+255),b
  5215  000788  6B9E               	clrf	(??_pf_write+2)& (0+255),b
  5216  00078A  6B9F               	clrf	(??_pf_write+3)& (0+255),b
  5217  00078C  519C               	movf	??_pf_write& (0+255),w,b
  5218  00078E  5DAA               	subwf	pf_write@remain& (0+255),w,b
  5219  000790  519D               	movf	(??_pf_write+1)& (0+255),w,b
  5220  000792  59AB               	subwfb	(pf_write@remain+1)& (0+255),w,b
  5221  000794  519E               	movf	(??_pf_write+2)& (0+255),w,b
  5222  000796  59AC               	subwfb	(pf_write@remain+2)& (0+255),w,b
  5223  000798  519F               	movf	(??_pf_write+3)& (0+255),w,b
  5224  00079A  59AD               	subwfb	(pf_write@remain+3)& (0+255),w,b
  5225  00079C  B0D8               	btfsc	status,0,c
  5226  00079E  D1AC               	goto	l840
  5227                           
  5228                           ; BSR set to: 0
  5229  0007A0  C0AA  F098         	movff	pf_write@remain,pf_write@btw
  5230  0007A4  C0AB  F099         	movff	pf_write@remain+1,pf_write@btw+1
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;pff.c: 949: while (btw) {
  5234  0007A8  D1A7               	goto	l840
  5235  0007AA                     
  5236                           ; BSR set to: 0
  5237                           ;pff.c: 950: if ((UINT)fs->fptr % 512 == 0) {
  5238                           
  5239                           ; BSR set to: 0
  5240  0007AA  0EFF               	movlw	255
  5241  0007AC  6F9C               	movwf	??_pf_write& (0+255),b
  5242  0007AE  0E01               	movlw	1
  5243  0007B0  6F9D               	movwf	(??_pf_write+1)& (0+255),b
  5244  0007B2  EE20 F016          	lfsr	2,22
  5245  0007B6  51B5               	movf	pf_write@fs& (0+255),w,b
  5246  0007B8  26D9               	addwf	fsr2l,f,c
  5247  0007BA  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5248  0007BC  22DA               	addwfc	fsr2h,f,c
  5249  0007BE  CFDE F09E          	movff	postinc2,??_pf_write+2
  5250  0007C2  CFDD F09F          	movff	postdec2,??_pf_write+3
  5251  0007C6  519C               	movf	??_pf_write& (0+255),w,b
  5252  0007C8  179E               	andwf	(??_pf_write+2)& (0+255),f,b
  5253  0007CA  519D               	movf	(??_pf_write+1)& (0+255),w,b
  5254  0007CC  179F               	andwf	(??_pf_write+3)& (0+255),f,b
  5255  0007CE  519E               	movf	(??_pf_write+2)& (0+255),w,b
  5256  0007D0  119F               	iorwf	(??_pf_write+3)& (0+255),w,b
  5257  0007D2  A4D8               	btfss	status,2,c
  5258  0007D4  D0E9               	goto	l831
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;pff.c: 951: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  5262  0007D6  EE20 F016          	lfsr	2,22
  5263  0007DA  51B5               	movf	pf_write@fs& (0+255),w,b
  5264  0007DC  26D9               	addwf	fsr2l,f,c
  5265  0007DE  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5266  0007E0  22DA               	addwfc	fsr2h,f,c
  5267  0007E2  CFDE F09C          	movff	postinc2,??_pf_write
  5268  0007E6  CFDE F09D          	movff	postinc2,??_pf_write+1
  5269  0007EA  CFDE F09E          	movff	postinc2,??_pf_write+2
  5270  0007EE  CFDE F09F          	movff	postinc2,??_pf_write+3
  5271  0007F2  0E0A               	movlw	10
  5272  0007F4  D005               	goto	u10480
  5273  0007F6                     u10485:
  5274  0007F6  90D8               	bcf	status,0,c
  5275  0007F8  339F               	rrcf	(??_pf_write+3)& (0+255),f,b
  5276  0007FA  339E               	rrcf	(??_pf_write+2)& (0+255),f,b
  5277  0007FC  339D               	rrcf	(??_pf_write+1)& (0+255),f,b
  5278  0007FE  339C               	rrcf	??_pf_write& (0+255),f,b
  5279  000800                     u10480:
  5280  000800  2EE8               	decfsz	wreg,f,c
  5281  000802  D7F9               	goto	u10485
  5282  000804  EE20 F002          	lfsr	2,2
  5283  000808  51B5               	movf	pf_write@fs& (0+255),w,b
  5284  00080A  26D9               	addwf	fsr2l,f,c
  5285  00080C  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5286  00080E  22DA               	addwfc	fsr2h,f,c
  5287  000810  50DF               	movf	indf2,w,c
  5288  000812  6FA0               	movwf	(??_pf_write+4)& (0+255),b
  5289  000814  05A0               	decf	(??_pf_write+4)& (0+255),w,b
  5290  000816  159C               	andwf	??_pf_write& (0+255),w,b
  5291  000818  6FB2               	movwf	pf_write@cs& (0+255),b
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;pff.c: 952: if (!cs) {
  5295  00081A  51B2               	movf	pf_write@cs& (0+255),w,b
  5296  00081C  A4D8               	btfss	status,2,c
  5297  00081E  D054               	goto	l832
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;pff.c: 953: if (fs->fptr == 0)
  5301  000820  EE20 F016          	lfsr	2,22
  5302  000824  51B5               	movf	pf_write@fs& (0+255),w,b
  5303  000826  26D9               	addwf	fsr2l,f,c
  5304  000828  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5305  00082A  22DA               	addwfc	fsr2h,f,c
  5306  00082C  50DE               	movf	postinc2,w,c
  5307  00082E  10DE               	iorwf	postinc2,w,c
  5308  000830  10DE               	iorwf	postinc2,w,c
  5309  000832  10DE               	iorwf	postinc2,w,c
  5310  000834  A4D8               	btfss	status,2,c
  5311  000836  D00F               	goto	l833
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;pff.c: 954: clst = fs->org_clust;
  5315  000838  EE20 F01E          	lfsr	2,30
  5316  00083C  51B5               	movf	pf_write@fs& (0+255),w,b
  5317  00083E  26D9               	addwf	fsr2l,f,c
  5318  000840  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5319  000842  22DA               	addwfc	fsr2h,f,c
  5320  000844  CFDE F0AE          	movff	postinc2,pf_write@clst
  5321  000848  CFDE F0AF          	movff	postinc2,pf_write@clst+1
  5322  00084C  CFDE F0B0          	movff	postinc2,pf_write@clst+2
  5323  000850  CFDE F0B1          	movff	postinc2,pf_write@clst+3
  5324  000854  D018               	goto	l834
  5325  000856                     l833:
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;pff.c: 955: else
  5329                           ;pff.c: 956: clst = get_fat(fs->curr_clust);
  5330                           
  5331                           ; BSR set to: 0
  5332  000856  EE20 F022          	lfsr	2,34
  5333  00085A  51B5               	movf	pf_write@fs& (0+255),w,b
  5334  00085C  26D9               	addwf	fsr2l,f,c
  5335  00085E  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5336  000860  22DA               	addwfc	fsr2h,f,c
  5337  000862  CFDE F02A          	movff	postinc2,get_fat@clst
  5338  000866  CFDE F02B          	movff	postinc2,get_fat@clst+1
  5339  00086A  CFDE F02C          	movff	postinc2,get_fat@clst+2
  5340  00086E  CFDE F02D          	movff	postinc2,get_fat@clst+3
  5341  000872  EC82  F005         	call	_get_fat	;wreg free
  5342  000876  C02A  F0AE         	movff	?_get_fat,pf_write@clst
  5343  00087A  C02B  F0AF         	movff	?_get_fat+1,pf_write@clst+1
  5344  00087E  C02C  F0B0         	movff	?_get_fat+2,pf_write@clst+2
  5345  000882  C02D  F0B1         	movff	?_get_fat+3,pf_write@clst+3
  5346  000886                     l834:
  5347                           
  5348                           ;pff.c: 957: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  5349  000886  0100               	movlb	0	; () banked
  5350  000888  51B1               	movf	(pf_write@clst+3)& (0+255),w,b
  5351  00088A  11B0               	iorwf	(pf_write@clst+2)& (0+255),w,b
  5352  00088C  11AF               	iorwf	(pf_write@clst+1)& (0+255),w,b
  5353  00088E  E10E               	bnz	l9160
  5354  000890  0E02               	movlw	2
  5355  000892  5DAE               	subwf	pf_write@clst& (0+255),w,b
  5356  000894  B0D8               	btfsc	status,0,c
  5357  000896  D00A               	goto	l835
  5358                           
  5359                           ; BSR set to: 0
  5360  000898  EE20 F001          	lfsr	2,1
  5361  00089C  51B5               	movf	pf_write@fs& (0+255),w,b
  5362  00089E  26D9               	addwf	fsr2l,f,c
  5363  0008A0  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5364  0008A2  22DA               	addwfc	fsr2h,f,c
  5365  0008A4  0E00               	movlw	0
  5366  0008A6  6EDF               	movwf	indf2,c
  5367                           
  5368                           ; BSR set to: 0
  5369  0008A8  0E01               	movlw	1
  5370                           
  5371                           ; BSR set to: 0
  5372  0008AA  0012               	return	
  5373  0008AC                     l835:
  5374  0008AC                     l9160:
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;pff.c: 958: fs->curr_clust = clst;
  5378  0008AC  EE20 F022          	lfsr	2,34
  5379  0008B0  51B5               	movf	pf_write@fs& (0+255),w,b
  5380  0008B2  26D9               	addwf	fsr2l,f,c
  5381  0008B4  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5382  0008B6  22DA               	addwfc	fsr2h,f,c
  5383  0008B8  C0AE  FFDE         	movff	pf_write@clst,postinc2
  5384  0008BC  C0AF  FFDE         	movff	pf_write@clst+1,postinc2
  5385  0008C0  C0B0  FFDE         	movff	pf_write@clst+2,postinc2
  5386  0008C4  C0B1  FFDE         	movff	pf_write@clst+3,postinc2
  5387  0008C8                     l832:
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;pff.c: 959: }
  5391                           ;pff.c: 960: sect = clust2sect(fs->curr_clust);
  5392                           
  5393                           ; BSR set to: 0
  5394  0008C8  EE20 F022          	lfsr	2,34
  5395  0008CC  51B5               	movf	pf_write@fs& (0+255),w,b
  5396  0008CE  26D9               	addwf	fsr2l,f,c
  5397  0008D0  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5398  0008D2  22DA               	addwfc	fsr2h,f,c
  5399  0008D4  CFDE F026          	movff	postinc2,clust2sect@clst
  5400  0008D8  CFDE F027          	movff	postinc2,clust2sect@clst+1
  5401  0008DC  CFDE F028          	movff	postinc2,clust2sect@clst+2
  5402  0008E0  CFDE F029          	movff	postinc2,clust2sect@clst+3
  5403  0008E4  ECB7  F014         	call	_clust2sect	;wreg free
  5404  0008E8  C026  F0A6         	movff	?_clust2sect,pf_write@sect
  5405  0008EC  C027  F0A7         	movff	?_clust2sect+1,pf_write@sect+1
  5406  0008F0  C028  F0A8         	movff	?_clust2sect+2,pf_write@sect+2
  5407  0008F4  C029  F0A9         	movff	?_clust2sect+3,pf_write@sect+3
  5408                           
  5409                           ;pff.c: 961: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  5410  0008F8  0100               	movlb	0	; () banked
  5411  0008FA  51A6               	movf	pf_write@sect& (0+255),w,b
  5412  0008FC  11A7               	iorwf	(pf_write@sect+1)& (0+255),w,b
  5413  0008FE  11A8               	iorwf	(pf_write@sect+2)& (0+255),w,b
  5414  000900  11A9               	iorwf	(pf_write@sect+3)& (0+255),w,b
  5415  000902  A4D8               	btfss	status,2,c
  5416  000904  D00A               	goto	l836
  5417                           
  5418                           ; BSR set to: 0
  5419  000906  EE20 F001          	lfsr	2,1
  5420  00090A  51B5               	movf	pf_write@fs& (0+255),w,b
  5421  00090C  26D9               	addwf	fsr2l,f,c
  5422  00090E  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5423  000910  22DA               	addwfc	fsr2h,f,c
  5424  000912  0E00               	movlw	0
  5425  000914  6EDF               	movwf	indf2,c
  5426                           
  5427                           ; BSR set to: 0
  5428  000916  0E01               	movlw	1
  5429                           
  5430                           ; BSR set to: 0
  5431  000918  0012               	return	
  5432  00091A                     l836:
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;pff.c: 962: fs->dsect = sect + cs;
  5436                           
  5437                           ; BSR set to: 0
  5438  00091A  51B2               	movf	pf_write@cs& (0+255),w,b
  5439  00091C  25A6               	addwf	pf_write@sect& (0+255),w,b
  5440  00091E  6F9C               	movwf	??_pf_write& (0+255),b
  5441  000920  0E00               	movlw	0
  5442  000922  21A7               	addwfc	(pf_write@sect+1)& (0+255),w,b
  5443  000924  6F9D               	movwf	(??_pf_write+1)& (0+255),b
  5444  000926  0E00               	movlw	0
  5445  000928  21A8               	addwfc	(pf_write@sect+2)& (0+255),w,b
  5446  00092A  6F9E               	movwf	(??_pf_write+2)& (0+255),b
  5447  00092C  0E00               	movlw	0
  5448  00092E  21A9               	addwfc	(pf_write@sect+3)& (0+255),w,b
  5449  000930  6F9F               	movwf	(??_pf_write+3)& (0+255),b
  5450  000932  EE20 F026          	lfsr	2,38
  5451  000936  51B5               	movf	pf_write@fs& (0+255),w,b
  5452  000938  26D9               	addwf	fsr2l,f,c
  5453  00093A  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5454  00093C  22DA               	addwfc	fsr2h,f,c
  5455  00093E  C09C  FFDE         	movff	??_pf_write,postinc2
  5456  000942  C09D  FFDE         	movff	??_pf_write+1,postinc2
  5457  000946  C09E  FFDE         	movff	??_pf_write+2,postinc2
  5458  00094A  C09F  FFDE         	movff	??_pf_write+3,postinc2
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;pff.c: 963: if (disk_writep(0, fs->dsect)) {fs->flag = 0; return FR_DISK_ERR;};
  5462  00094E  0E00               	movlw	0
  5463  000950  6E26               	movwf	disk_writep@wr,c
  5464  000952  0E00               	movlw	0
  5465  000954  6E27               	movwf	disk_writep@wr+1,c
  5466  000956  0E00               	movlw	0
  5467  000958  6E28               	movwf	disk_writep@wr+2,c
  5468  00095A  EE20 F026          	lfsr	2,38
  5469  00095E  51B5               	movf	pf_write@fs& (0+255),w,b
  5470  000960  26D9               	addwf	fsr2l,f,c
  5471  000962  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5472  000964  22DA               	addwfc	fsr2h,f,c
  5473  000966  CFDE F029          	movff	postinc2,disk_writep@sc
  5474  00096A  CFDE F02A          	movff	postinc2,disk_writep@sc+1
  5475  00096E  CFDE F02B          	movff	postinc2,disk_writep@sc+2
  5476  000972  CFDE F02C          	movff	postinc2,disk_writep@sc+3
  5477  000976  ECEF  F00F         	call	_disk_writep	;wreg free
  5478  00097A  0900               	iorlw	0
  5479  00097C  B4D8               	btfsc	status,2,c
  5480  00097E  D00B               	goto	l837
  5481  000980  0100               	movlb	0	; () banked
  5482  000982  EE20 F001          	lfsr	2,1
  5483  000986  51B5               	movf	pf_write@fs& (0+255),w,b
  5484  000988  26D9               	addwf	fsr2l,f,c
  5485  00098A  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5486  00098C  22DA               	addwfc	fsr2h,f,c
  5487  00098E  0E00               	movlw	0
  5488  000990  6EDF               	movwf	indf2,c
  5489                           
  5490                           ; BSR set to: 0
  5491  000992  0E01               	movlw	1
  5492                           
  5493                           ; BSR set to: 0
  5494  000994  0012               	return	
  5495  000996                     l837:
  5496                           
  5497                           ;pff.c: 964: fs->flag |= 0x40;
  5498                           
  5499                           ; BSR set to: 0
  5500  000996  0100               	movlb	0	; () banked
  5501  000998  EE20 F001          	lfsr	2,1
  5502  00099C  51B5               	movf	pf_write@fs& (0+255),w,b
  5503  00099E  26D9               	addwf	fsr2l,f,c
  5504  0009A0  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5505  0009A2  22DA               	addwfc	fsr2h,f,c
  5506  0009A4  0E00               	movlw	0
  5507  0009A6  8CDB               	bsf	plusw2,6,c
  5508  0009A8                     l831:
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;pff.c: 965: }
  5512                           ;pff.c: 966: wcnt = 512 - (UINT)fs->fptr % 512;
  5513  0009A8  0EFF               	movlw	255
  5514  0009AA  6F9C               	movwf	??_pf_write& (0+255),b
  5515  0009AC  0E01               	movlw	1
  5516  0009AE  6F9D               	movwf	(??_pf_write+1)& (0+255),b
  5517  0009B0  EE20 F016          	lfsr	2,22
  5518  0009B4  51B5               	movf	pf_write@fs& (0+255),w,b
  5519  0009B6  26D9               	addwf	fsr2l,f,c
  5520  0009B8  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5521  0009BA  22DA               	addwfc	fsr2h,f,c
  5522  0009BC  CFDE F09E          	movff	postinc2,??_pf_write+2
  5523  0009C0  CFDD F09F          	movff	postdec2,??_pf_write+3
  5524  0009C4  519C               	movf	??_pf_write& (0+255),w,b
  5525  0009C6  179E               	andwf	(??_pf_write+2)& (0+255),f,b
  5526  0009C8  519D               	movf	(??_pf_write+1)& (0+255),w,b
  5527  0009CA  179F               	andwf	(??_pf_write+3)& (0+255),f,b
  5528  0009CC  1F9E               	comf	(??_pf_write+2)& (0+255),f,b
  5529  0009CE  1F9F               	comf	(??_pf_write+3)& (0+255),f,b
  5530  0009D0  4B9E               	infsnz	(??_pf_write+2)& (0+255),f,b
  5531  0009D2  2B9F               	incf	(??_pf_write+3)& (0+255),f,b
  5532  0009D4  0E00               	movlw	0
  5533  0009D6  259E               	addwf	(??_pf_write+2)& (0+255),w,b
  5534  0009D8  6FB3               	movwf	pf_write@wcnt& (0+255),b
  5535  0009DA  0E02               	movlw	2
  5536  0009DC  219F               	addwfc	(??_pf_write+3)& (0+255),w,b
  5537  0009DE  6FB4               	movwf	(pf_write@wcnt+1)& (0+255),b
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;pff.c: 967: if (wcnt > btw)wcnt = btw;
  5541  0009E0  51B3               	movf	pf_write@wcnt& (0+255),w,b
  5542  0009E2  5D98               	subwf	pf_write@btw& (0+255),w,b
  5543  0009E4  51B4               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5544  0009E6  5999               	subwfb	(pf_write@btw+1)& (0+255),w,b
  5545  0009E8  B0D8               	btfsc	status,0,c
  5546  0009EA  D004               	goto	l838
  5547                           
  5548                           ; BSR set to: 0
  5549  0009EC  C098  F0B3         	movff	pf_write@btw,pf_write@wcnt
  5550  0009F0  C099  F0B4         	movff	pf_write@btw+1,pf_write@wcnt+1
  5551  0009F4                     l838:
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;pff.c: 968: if (disk_writep(p, fs->dsect )) {fs->flag = 0; return FR_DISK_ERR;};
  5555                           
  5556                           ; BSR set to: 0
  5557  0009F4  C0A4  F026         	movff	pf_write@p,disk_writep@wr
  5558  0009F8  C0A5  F027         	movff	pf_write@p+1,disk_writep@wr+1
  5559  0009FC  5026               	movf	disk_writep@wr,w,c
  5560  0009FE  1027               	iorwf	disk_writep@wr+1,w,c
  5561  000A00  A4D8               	btfss	status,2,c
  5562  000A02  0E00               	movlw	low (__mediumconst shr (0+16))
  5563  000A04  6E28               	movwf	disk_writep@wr+2,c
  5564  000A06  EE20 F026          	lfsr	2,38
  5565  000A0A  51B5               	movf	pf_write@fs& (0+255),w,b
  5566  000A0C  26D9               	addwf	fsr2l,f,c
  5567  000A0E  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5568  000A10  22DA               	addwfc	fsr2h,f,c
  5569  000A12  CFDE F029          	movff	postinc2,disk_writep@sc
  5570  000A16  CFDE F02A          	movff	postinc2,disk_writep@sc+1
  5571  000A1A  CFDE F02B          	movff	postinc2,disk_writep@sc+2
  5572  000A1E  CFDE F02C          	movff	postinc2,disk_writep@sc+3
  5573  000A22  ECEF  F00F         	call	_disk_writep	;wreg free
  5574  000A26  0900               	iorlw	0
  5575  000A28  B4D8               	btfsc	status,2,c
  5576  000A2A  D00B               	goto	l839
  5577  000A2C  0100               	movlb	0	; () banked
  5578  000A2E  EE20 F001          	lfsr	2,1
  5579  000A32  51B5               	movf	pf_write@fs& (0+255),w,b
  5580  000A34  26D9               	addwf	fsr2l,f,c
  5581  000A36  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5582  000A38  22DA               	addwfc	fsr2h,f,c
  5583  000A3A  0E00               	movlw	0
  5584  000A3C  6EDF               	movwf	indf2,c
  5585                           
  5586                           ; BSR set to: 0
  5587  000A3E  0E01               	movlw	1
  5588                           
  5589                           ; BSR set to: 0
  5590  000A40  0012               	return	
  5591  000A42                     l839:
  5592                           
  5593                           ;pff.c: 969: fs->fptr += wcnt; p += wcnt;
  5594                           
  5595                           ; BSR set to: 0
  5596  000A42  0100               	movlb	0	; () banked
  5597  000A44  EE20 F016          	lfsr	2,22
  5598  000A48  51B5               	movf	pf_write@fs& (0+255),w,b
  5599  000A4A  26D9               	addwf	fsr2l,f,c
  5600  000A4C  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5601  000A4E  22DA               	addwfc	fsr2h,f,c
  5602  000A50  51B3               	movf	pf_write@wcnt& (0+255),w,b
  5603  000A52  26DE               	addwf	postinc2,f,c
  5604  000A54  51B4               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5605  000A56  22DE               	addwfc	postinc2,f,c
  5606  000A58  0E00               	movlw	0
  5607  000A5A  22DE               	addwfc	postinc2,f,c
  5608  000A5C  22DE               	addwfc	postinc2,f,c
  5609                           
  5610                           ; BSR set to: 0
  5611  000A5E  51B3               	movf	pf_write@wcnt& (0+255),w,b
  5612  000A60  27A4               	addwf	pf_write@p& (0+255),f,b
  5613  000A62  51B4               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5614  000A64  23A5               	addwfc	(pf_write@p+1)& (0+255),f,b
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;pff.c: 970: btw -= wcnt; *bw += wcnt;
  5618  000A66  51B3               	movf	pf_write@wcnt& (0+255),w,b
  5619  000A68  5F98               	subwf	pf_write@btw& (0+255),f,b
  5620  000A6A  51B4               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5621  000A6C  5B99               	subwfb	(pf_write@btw+1)& (0+255),f,b
  5622                           
  5623                           ; BSR set to: 0
  5624  000A6E  C09A  FFD9         	movff	pf_write@bw,fsr2l
  5625  000A72  C09B  FFDA         	movff	pf_write@bw+1,fsr2h
  5626  000A76  51B3               	movf	pf_write@wcnt& (0+255),w,b
  5627  000A78  26DE               	addwf	postinc2,f,c
  5628  000A7A  51B4               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5629  000A7C  22DD               	addwfc	postdec2,f,c
  5630                           
  5631                           ; BSR set to: 0
  5632                           ;pff.c: 971: if ((UINT)fs->fptr % 512 == 0) {
  5633  000A7E  0EFF               	movlw	255
  5634  000A80  6F9C               	movwf	??_pf_write& (0+255),b
  5635  000A82  0E01               	movlw	1
  5636  000A84  6F9D               	movwf	(??_pf_write+1)& (0+255),b
  5637  000A86  EE20 F016          	lfsr	2,22
  5638  000A8A  51B5               	movf	pf_write@fs& (0+255),w,b
  5639  000A8C  26D9               	addwf	fsr2l,f,c
  5640  000A8E  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5641  000A90  22DA               	addwfc	fsr2h,f,c
  5642  000A92  CFDE F09E          	movff	postinc2,??_pf_write+2
  5643  000A96  CFDD F09F          	movff	postdec2,??_pf_write+3
  5644  000A9A  519C               	movf	??_pf_write& (0+255),w,b
  5645  000A9C  179E               	andwf	(??_pf_write+2)& (0+255),f,b
  5646  000A9E  519D               	movf	(??_pf_write+1)& (0+255),w,b
  5647  000AA0  179F               	andwf	(??_pf_write+3)& (0+255),f,b
  5648  000AA2  519E               	movf	(??_pf_write+2)& (0+255),w,b
  5649  000AA4  119F               	iorwf	(??_pf_write+3)& (0+255),w,b
  5650  000AA6  A4D8               	btfss	status,2,c
  5651  000AA8  D027               	goto	l840
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;pff.c: 972: if (disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_ERR;};
  5655  000AAA  0E00               	movlw	0
  5656  000AAC  6E26               	movwf	disk_writep@wr,c
  5657  000AAE  0E00               	movlw	0
  5658  000AB0  6E27               	movwf	disk_writep@wr+1,c
  5659  000AB2  0E00               	movlw	0
  5660  000AB4  6E28               	movwf	disk_writep@wr+2,c
  5661  000AB6  0E00               	movlw	0
  5662  000AB8  6E29               	movwf	disk_writep@sc,c
  5663  000ABA  0E00               	movlw	0
  5664  000ABC  6E2A               	movwf	disk_writep@sc+1,c
  5665  000ABE  0E00               	movlw	0
  5666  000AC0  6E2B               	movwf	disk_writep@sc+2,c
  5667  000AC2  0E00               	movlw	0
  5668  000AC4  6E2C               	movwf	disk_writep@sc+3,c
  5669  000AC6  ECEF  F00F         	call	_disk_writep	;wreg free
  5670  000ACA  0900               	iorlw	0
  5671  000ACC  B4D8               	btfsc	status,2,c
  5672  000ACE  D00B               	goto	l841
  5673  000AD0  0100               	movlb	0	; () banked
  5674  000AD2  EE20 F001          	lfsr	2,1
  5675  000AD6  51B5               	movf	pf_write@fs& (0+255),w,b
  5676  000AD8  26D9               	addwf	fsr2l,f,c
  5677  000ADA  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5678  000ADC  22DA               	addwfc	fsr2h,f,c
  5679  000ADE  0E00               	movlw	0
  5680  000AE0  6EDF               	movwf	indf2,c
  5681                           
  5682                           ; BSR set to: 0
  5683  000AE2  0E01               	movlw	1
  5684                           
  5685                           ; BSR set to: 0
  5686  000AE4  0012               	return	
  5687  000AE6                     l841:
  5688                           
  5689                           ;pff.c: 973: fs->flag &= ~0x40;
  5690                           
  5691                           ; BSR set to: 0
  5692  000AE6  0100               	movlb	0	; () banked
  5693  000AE8  EE20 F001          	lfsr	2,1
  5694  000AEC  51B5               	movf	pf_write@fs& (0+255),w,b
  5695  000AEE  26D9               	addwf	fsr2l,f,c
  5696  000AF0  51B6               	movf	(pf_write@fs+1)& (0+255),w,b
  5697  000AF2  22DA               	addwfc	fsr2h,f,c
  5698  000AF4  0EBF               	movlw	191
  5699  000AF6  16DF               	andwf	indf2,f,c
  5700  000AF8                     l840:
  5701                           
  5702                           ; BSR set to: 0
  5703                           
  5704                           ; BSR set to: 0
  5705                           
  5706                           ; BSR set to: 0
  5707  000AF8  5198               	movf	pf_write@btw& (0+255),w,b
  5708  000AFA  1199               	iorwf	(pf_write@btw+1)& (0+255),w,b
  5709  000AFC  A4D8               	btfss	status,2,c
  5710  000AFE  D655               	goto	l830
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;pff.c: 974: }
  5714                           ;pff.c: 975: }
  5715                           ;pff.c: 977: return FR_OK;
  5716                           
  5717                           ; BSR set to: 0
  5718  000B00  0E00               	movlw	0
  5719  000B02  0012               	return	
  5720  000B04                     __end_of_pf_write:
  5721                           	opt stack 0
  5722                           tosu	equ	0xFFF
  5723                           tosh	equ	0xFFE
  5724                           tosl	equ	0xFFD
  5725                           pclath	equ	0xFFA
  5726                           tblptru	equ	0xFF8
  5727                           tblptrh	equ	0xFF7
  5728                           tblptrl	equ	0xFF6
  5729                           tablat	equ	0xFF5
  5730                           prodh	equ	0xFF4
  5731                           prodl	equ	0xFF3
  5732                           intcon	equ	0xFF2
  5733                           intcon2	equ	0xFF1
  5734                           intcon3	equ	0xFF0
  5735                           postinc0	equ	0xFEE
  5736                           wreg	equ	0xFE8
  5737                           postinc1	equ	0xFE6
  5738                           postdec1	equ	0xFE5
  5739                           fsr1h	equ	0xFE2
  5740                           fsr1l	equ	0xFE1
  5741                           indf2	equ	0xFDF
  5742                           postinc2	equ	0xFDE
  5743                           postdec2	equ	0xFDD
  5744                           plusw2	equ	0xFDB
  5745                           fsr2h	equ	0xFDA
  5746                           fsr2l	equ	0xFD9
  5747                           status	equ	0xFD8
  5748                           
  5749 ;; *************** function _disk_writep *****************
  5750 ;; Defined at:
  5751 ;;		line 283 in file "bibliotecas/diskio.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;  wr              3   37[COMRAM] PTR const unsigned char 
  5754 ;;		 -> STR_14(8), ROM(32767), 
  5755 ;;  sc              4   40[COMRAM] unsigned long 
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;  j               2    6[BANK0 ] int 
  5758 ;;  i               2    4[BANK0 ] int 
  5759 ;;  buff            1    8[BANK0 ] unsigned char 
  5760 ;;  res             1    0        enum E14
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  1    wreg      enum E14
  5763 ;; Registers used:
  5764 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5770 ;;      Params:         7       0       0       0       0       0       0       0       0
  5771 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5772 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5773 ;;      Totals:         7       9       0       0       0       0       0       0       0
  5774 ;;Total ram usage:       16 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    4
  5777 ;; This function calls:
  5778 ;;		_WriteSPI_
  5779 ;;		_command
  5780 ;;		_dummy_clocks
  5781 ;;		_proceed
  5782 ;;		_response
  5783 ;; This function is called by:
  5784 ;;		_pf_write
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           	psect	text26
  5789  001FDE                     __ptext26:
  5790                           	opt stack 0
  5791  001FDE                     _disk_writep:
  5792                           	opt stack 23
  5793                           
  5794                           ;diskio.c: 288: DRESULT res;
  5795                           ;diskio.c: 290: unsigned char buff;
  5796                           ;diskio.c: 291: int i=0,j;
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;incstack = 0
  5800  001FDE  0E00               	movlw	0
  5801  001FE0  0100               	movlb	0	; () banked
  5802  001FE2  6F65               	movwf	(disk_writep@i+1)& (0+255),b
  5803  001FE4  0E00               	movlw	0
  5804  001FE6  6F64               	movwf	disk_writep@i& (0+255),b
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;diskio.c: 295: dummy_clocks(8);
  5808  001FE8  0E08               	movlw	8
  5809  001FEA  ECAC  F019         	call	_dummy_clocks
  5810                           
  5811                           ;diskio.c: 296: command(0X58, sc*512, 0X00);
  5812  001FEE  C029  F060         	movff	disk_writep@sc,??_disk_writep
  5813  001FF2  C02A  F061         	movff	disk_writep@sc+1,??_disk_writep+1
  5814  001FF6  C02B  F062         	movff	disk_writep@sc+2,??_disk_writep+2
  5815  001FFA  C02C  F063         	movff	disk_writep@sc+3,??_disk_writep+3
  5816  001FFE  0E09               	movlw	9
  5817  002000                     u9845:
  5818  002000  90D8               	bcf	status,0,c
  5819  002002  0100               	movlb	0	; () banked
  5820  002004  3760               	rlcf	??_disk_writep& (0+255),f,b
  5821  002006  3761               	rlcf	(??_disk_writep+1)& (0+255),f,b
  5822  002008  3762               	rlcf	(??_disk_writep+2)& (0+255),f,b
  5823  00200A  3763               	rlcf	(??_disk_writep+3)& (0+255),f,b
  5824  00200C  2EE8               	decfsz	wreg,f,c
  5825  00200E  D7F8               	goto	u9845
  5826  002010  C060  F01E         	movff	??_disk_writep,command@arg
  5827  002014  C061  F01F         	movff	??_disk_writep+1,command@arg+1
  5828  002018  C062  F020         	movff	??_disk_writep+2,command@arg+2
  5829  00201C  C063  F021         	movff	??_disk_writep+3,command@arg+3
  5830  002020  0E00               	movlw	0
  5831  002022  6E22               	movwf	command@CRC,c
  5832  002024  0E58               	movlw	88
  5833  002026  EC87  F018         	call	_command
  5834                           
  5835                           ;diskio.c: 297: proceed();
  5836  00202A  ECAA  F01A         	call	_proceed	;wreg free
  5837  00202E                     
  5838                           ;diskio.c: 299: buff = response();
  5839  00202E  EC9D  F01A         	call	_response	;wreg free
  5840  002032  0100               	movlb	0	; () banked
  5841  002034  6F68               	movwf	disk_writep@buff& (0+255),b
  5842                           
  5843                           ;diskio.c: 300: }while(buff!=0x00);
  5844  002036  5168               	movf	disk_writep@buff& (0+255),w,b
  5845  002038  A4D8               	btfss	status,2,c
  5846  00203A  D7F9               	goto	l331
  5847                           
  5848                           ; BSR set to: 0
  5849                           ;diskio.c: 303: _delay((unsigned long)((2000)*(48000000/4000.0)));
  5850                           
  5851                           ; BSR set to: 0
  5852  00203C  0E7A               	movlw	122
  5853  00203E  0100               	movlb	0	; () banked
  5854  002040  6F61               	movwf	(??_disk_writep+1)& (0+255),b
  5855  002042  0EC1               	movlw	193
  5856  002044  6F60               	movwf	??_disk_writep& (0+255),b
  5857  002046  0E81               	movlw	129
  5858  002048                     u12137:
  5859  002048  2EE8               	decfsz	wreg,f,c
  5860  00204A  D7FE               	bra	u12137
  5861  00204C  2F60               	decfsz	??_disk_writep& (0+255),f,b
  5862  00204E  D7FC               	bra	u12137
  5863  002050  2F61               	decfsz	(??_disk_writep+1)& (0+255),f,b
  5864  002052  D7FA               	bra	u12137
  5865  002054  D000               	nop2	
  5866                           
  5867                           ;diskio.c: 306: dummy_clocks(8);
  5868  002056  0E08               	movlw	8
  5869  002058  ECAC  F019         	call	_dummy_clocks
  5870                           
  5871                           ;diskio.c: 308: WriteSPI_(0XFE);
  5872  00205C  0EFE               	movlw	254
  5873  00205E  EC09  F019         	call	_WriteSPI_
  5874                           
  5875                           ;diskio.c: 310: for(j=0;j<512;j++)
  5876  002062  0E00               	movlw	0
  5877  002064  0100               	movlb	0	; () banked
  5878  002066  6F67               	movwf	(disk_writep@j+1)& (0+255),b
  5879  002068  0E00               	movlw	0
  5880  00206A  6F66               	movwf	disk_writep@j& (0+255),b
  5881  00206C                     l8736:
  5882                           
  5883                           ; BSR set to: 0
  5884  00206C  BF67               	btfsc	(disk_writep@j+1)& (0+255),7,b
  5885  00206E  D004               	goto	l333
  5886  002070  0E02               	movlw	2
  5887  002072  5D67               	subwf	(disk_writep@j+1)& (0+255),w,b
  5888  002074  B0D8               	btfsc	status,0,c
  5889  002076  D023               	goto	u9880
  5890  002078                     l333:
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;diskio.c: 311: {
  5894                           ;diskio.c: 312: if(*wr!='\0')
  5895                           
  5896                           ; BSR set to: 0
  5897  002078  C026  FFF6         	movff	disk_writep@wr,tblptrl
  5898  00207C  C027  FFF7         	movff	disk_writep@wr+1,tblptrh
  5899  002080  C028  FFF8         	movff	disk_writep@wr+2,tblptru
  5900  002084  0008               	tblrd		*
  5901  002086  50F5               	movf	tablat,w,c
  5902  002088  0900               	iorlw	0
  5903  00208A  B4D8               	btfsc	status,2,c
  5904  00208C  D011               	goto	l335
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;diskio.c: 313: {
  5908                           ;diskio.c: 314: WriteSPI_(*wr);
  5909  00208E  C026  FFF6         	movff	disk_writep@wr,tblptrl
  5910  002092  C027  FFF7         	movff	disk_writep@wr+1,tblptrh
  5911  002096  C028  FFF8         	movff	disk_writep@wr+2,tblptru
  5912  00209A  0008               	tblrd		*
  5913  00209C  50F5               	movf	tablat,w,c
  5914  00209E  EC09  F019         	call	_WriteSPI_
  5915                           
  5916                           ;diskio.c: 315: wr++;
  5917  0020A2  0E01               	movlw	1
  5918  0020A4  2626               	addwf	disk_writep@wr,f,c
  5919  0020A6  0E00               	movlw	0
  5920  0020A8  2227               	addwfc	disk_writep@wr+1,f,c
  5921  0020AA  0E00               	movlw	0
  5922  0020AC  2228               	addwfc	disk_writep@wr+2,f,c
  5923                           
  5924                           ;diskio.c: 316: }
  5925  0020AE  D003               	goto	l336
  5926  0020B0                     l335:
  5927                           
  5928                           ;diskio.c: 317: else
  5929                           ;diskio.c: 318: WriteSPI_(0x00);
  5930  0020B0  0E00               	movlw	0
  5931  0020B2  EC09  F019         	call	_WriteSPI_
  5932  0020B6                     l336:
  5933  0020B6  0100               	movlb	0	; () banked
  5934  0020B8  4B66               	infsnz	disk_writep@j& (0+255),f,b
  5935  0020BA  2B67               	incf	(disk_writep@j+1)& (0+255),f,b
  5936  0020BC  D7D7               	goto	l8736
  5937  0020BE                     u9880:
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;diskio.c: 319: }
  5941                           ;diskio.c: 320: WriteSPI_(0XFF);
  5942                           
  5943                           ; BSR set to: 0
  5944  0020BE  0EFF               	movlw	255
  5945  0020C0  EC09  F019         	call	_WriteSPI_
  5946                           
  5947                           ;diskio.c: 321: WriteSPI_(0XFF);
  5948  0020C4  0EFF               	movlw	255
  5949  0020C6  EC09  F019         	call	_WriteSPI_
  5950                           
  5951                           ;diskio.c: 323: proceed();
  5952  0020CA  ECAA  F01A         	call	_proceed	;wreg free
  5953                           
  5954                           ;diskio.c: 325: _delay((unsigned long)((1000)*(48000000/4000.0)));
  5955  0020CE  0E3D               	movlw	61
  5956  0020D0  0100               	movlb	0	; () banked
  5957  0020D2  6F61               	movwf	(??_disk_writep+1)& (0+255),b
  5958  0020D4  0EE1               	movlw	225
  5959  0020D6  6F60               	movwf	??_disk_writep& (0+255),b
  5960  0020D8  0E3F               	movlw	63
  5961  0020DA                     u12147:
  5962  0020DA  2EE8               	decfsz	wreg,f,c
  5963  0020DC  D7FE               	bra	u12147
  5964  0020DE  2F60               	decfsz	??_disk_writep& (0+255),f,b
  5965  0020E0  D7FC               	bra	u12147
  5966  0020E2  2F61               	decfsz	(??_disk_writep+1)& (0+255),f,b
  5967  0020E4  D7FA               	bra	u12147
  5968  0020E6  D000               	nop2	
  5969                           
  5970                           ;diskio.c: 327: dummy_clocks(8);
  5971  0020E8  0E08               	movlw	8
  5972  0020EA  ECAC  F019         	call	_dummy_clocks
  5973                           
  5974                           ;diskio.c: 329: command(0X4D,0X00000000,0X00);
  5975  0020EE  0E00               	movlw	0
  5976  0020F0  6E1E               	movwf	command@arg,c
  5977  0020F2  0E00               	movlw	0
  5978  0020F4  6E1F               	movwf	command@arg+1,c
  5979  0020F6  0E00               	movlw	0
  5980  0020F8  6E20               	movwf	command@arg+2,c
  5981  0020FA  0E00               	movlw	0
  5982  0020FC  6E21               	movwf	command@arg+3,c
  5983  0020FE  0E00               	movlw	0
  5984  002100  6E22               	movwf	command@CRC,c
  5985  002102  0E4D               	movlw	77
  5986  002104  EC87  F018         	call	_command
  5987                           
  5988                           ;diskio.c: 330: proceed();
  5989  002108  ECAA  F01A         	call	_proceed	;wreg free
  5990  00210C                     
  5991                           ;diskio.c: 332: buff = response();
  5992  00210C  EC9D  F01A         	call	_response	;wreg free
  5993  002110  0100               	movlb	0	; () banked
  5994  002112  6F68               	movwf	disk_writep@buff& (0+255),b
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;diskio.c: 333: }while(buff!=0x00);
  5998  002114  5168               	movf	disk_writep@buff& (0+255),w,b
  5999  002116  A4D8               	btfss	status,2,c
  6000  002118  D7F9               	goto	l337
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;diskio.c: 335: return RES_OK;
  6004                           
  6005                           ; BSR set to: 0
  6006  00211A  0E00               	movlw	0
  6007  00211C  0012               	return	
  6008  00211E                     __end_of_disk_writep:
  6009                           	opt stack 0
  6010                           tosu	equ	0xFFF
  6011                           tosh	equ	0xFFE
  6012                           tosl	equ	0xFFD
  6013                           pclath	equ	0xFFA
  6014                           tblptru	equ	0xFF8
  6015                           tblptrh	equ	0xFF7
  6016                           tblptrl	equ	0xFF6
  6017                           tablat	equ	0xFF5
  6018                           prodh	equ	0xFF4
  6019                           prodl	equ	0xFF3
  6020                           intcon	equ	0xFF2
  6021                           intcon2	equ	0xFF1
  6022                           intcon3	equ	0xFF0
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           postinc1	equ	0xFE6
  6026                           postdec1	equ	0xFE5
  6027                           fsr1h	equ	0xFE2
  6028                           fsr1l	equ	0xFE1
  6029                           indf2	equ	0xFDF
  6030                           postinc2	equ	0xFDE
  6031                           postdec2	equ	0xFDD
  6032                           plusw2	equ	0xFDB
  6033                           fsr2h	equ	0xFDA
  6034                           fsr2l	equ	0xFD9
  6035                           status	equ	0xFD8
  6036                           
  6037 ;; *************** function _pf_read *****************
  6038 ;; Defined at:
  6039 ;;		line 863 in file "bibliotecas/pff.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  buff            2   54[BANK0 ] PTR void 
  6042 ;;		 -> data_buffer_32(32), 
  6043 ;;  btr             2   56[BANK0 ] unsigned int 
  6044 ;;  br              2   58[BANK0 ] PTR unsigned int 
  6045 ;;		 -> SDCard@br(2), 
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;  clst            4   81[BANK0 ] unsigned long 
  6048 ;;  remain          4   77[BANK0 ] unsigned long 
  6049 ;;  sect            4   73[BANK0 ] unsigned long 
  6050 ;;  fs              2   88[BANK0 ] PTR struct .
  6051 ;;		 -> SDCard@fs(42), NULL(0), 
  6052 ;;  rcnt            2   86[BANK0 ] unsigned int 
  6053 ;;  rbuff           2   69[BANK0 ] PTR unsigned char 
  6054 ;;		 -> data_buffer_32(32), 
  6055 ;;  cs              1   85[BANK0 ] unsigned char 
  6056 ;;  dr              1   68[BANK0 ] enum E73
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  1    wreg      enum E43
  6059 ;; Registers used:
  6060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6066 ;;      Params:         0       6       0       0       0       0       0       0       0
  6067 ;;      Locals:         0      22       0       0       0       0       0       0       0
  6068 ;;      Temps:          0       8       0       0       0       0       0       0       0
  6069 ;;      Totals:         0      36       0       0       0       0       0       0       0
  6070 ;;Total ram usage:       36 bytes
  6071 ;; Hardware stack levels used:    1
  6072 ;; Hardware stack levels required when called:    7
  6073 ;; This function calls:
  6074 ;;		_clust2sect
  6075 ;;		_disk_readp
  6076 ;;		_get_fat
  6077 ;; This function is called by:
  6078 ;;		_SDCard
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text27
  6083  000EEC                     __ptext27:
  6084                           	opt stack 0
  6085  000EEC                     _pf_read:
  6086                           	opt stack 21
  6087                           
  6088                           ;pff.c: 869: DRESULT dr;
  6089                           ;pff.c: 870: DWORD clst;
  6090                           ;pff.c: 871: DWORD sect, remain;
  6091                           ;pff.c: 872: UINT rcnt;
  6092                           ;pff.c: 873: BYTE cs, *rbuff = buff;
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;incstack = 0
  6096  000EEC  C096  F0A5         	movff	pf_read@buff,pf_read@rbuff
  6097  000EF0  C097  F0A6         	movff	pf_read@buff+1,pf_read@rbuff+1
  6098                           
  6099                           ;pff.c: 874: FATFS *fs = FatFs;
  6100  000EF4  C037  F0B8         	movff	_FatFs,pf_read@fs
  6101  000EF8  C038  F0B9         	movff	_FatFs+1,pf_read@fs+1
  6102                           
  6103                           ;pff.c: 877: *br = 0;
  6104  000EFC  C09A  FFD9         	movff	pf_read@br,fsr2l
  6105  000F00  C09B  FFDA         	movff	pf_read@br+1,fsr2h
  6106  000F04  0E00               	movlw	0
  6107  000F06  6EDE               	movwf	postinc2,c
  6108  000F08  0E00               	movlw	0
  6109  000F0A  6EDD               	movwf	postdec2,c
  6110                           
  6111                           ;pff.c: 878: if (!fs) return FR_NOT_ENABLED;
  6112  000F0C  0100               	movlb	0	; () banked
  6113  000F0E  51B8               	movf	pf_read@fs& (0+255),w,b
  6114  000F10  11B9               	iorwf	(pf_read@fs+1)& (0+255),w,b
  6115  000F12  A4D8               	btfss	status,2,c
  6116  000F14  D002               	goto	l800
  6117                           
  6118                           ; BSR set to: 0
  6119  000F16  0E05               	movlw	5
  6120                           
  6121                           ; BSR set to: 0
  6122  000F18  0012               	return	
  6123  000F1A                     l800:
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;pff.c: 879: if (!(fs->flag & 0x01))
  6127                           
  6128                           ; BSR set to: 0
  6129  000F1A  EE20 F001          	lfsr	2,1
  6130  000F1E  51B8               	movf	pf_read@fs& (0+255),w,b
  6131  000F20  26D9               	addwf	fsr2l,f,c
  6132  000F22  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6133  000F24  22DA               	addwfc	fsr2h,f,c
  6134  000F26  B0DF               	btfsc	indf2,0,c
  6135  000F28  D002               	goto	l802
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;pff.c: 880: return FR_NOT_OPENED;
  6139  000F2A  0E04               	movlw	4
  6140                           
  6141                           ; BSR set to: 0
  6142  000F2C  0012               	return	
  6143  000F2E                     l802:
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;pff.c: 882: remain = fs->fsize - fs->fptr;
  6147                           
  6148                           ; BSR set to: 0
  6149  000F2E  EE20 F01A          	lfsr	2,26
  6150  000F32  51B8               	movf	pf_read@fs& (0+255),w,b
  6151  000F34  26D9               	addwf	fsr2l,f,c
  6152  000F36  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6153  000F38  22DA               	addwfc	fsr2h,f,c
  6154  000F3A  CFDE F09C          	movff	postinc2,??_pf_read
  6155  000F3E  CFDE F09D          	movff	postinc2,??_pf_read+1
  6156  000F42  CFDE F09E          	movff	postinc2,??_pf_read+2
  6157  000F46  CFDE F09F          	movff	postinc2,??_pf_read+3
  6158  000F4A  EE20 F016          	lfsr	2,22
  6159  000F4E  51B8               	movf	pf_read@fs& (0+255),w,b
  6160  000F50  26D9               	addwf	fsr2l,f,c
  6161  000F52  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6162  000F54  22DA               	addwfc	fsr2h,f,c
  6163  000F56  CFDE F0A0          	movff	postinc2,??_pf_read+4
  6164  000F5A  CFDE F0A1          	movff	postinc2,??_pf_read+5
  6165  000F5E  CFDE F0A2          	movff	postinc2,??_pf_read+6
  6166  000F62  CFDE F0A3          	movff	postinc2,??_pf_read+7
  6167  000F66  1FA0               	comf	(??_pf_read+4)& (0+255),f,b
  6168  000F68  1FA1               	comf	(??_pf_read+5)& (0+255),f,b
  6169  000F6A  1FA2               	comf	(??_pf_read+6)& (0+255),f,b
  6170  000F6C  1FA3               	comf	(??_pf_read+7)& (0+255),f,b
  6171  000F6E  2BA0               	incf	(??_pf_read+4)& (0+255),f,b
  6172  000F70  0E00               	movlw	0
  6173  000F72  23A1               	addwfc	(??_pf_read+5)& (0+255),f,b
  6174  000F74  23A2               	addwfc	(??_pf_read+6)& (0+255),f,b
  6175  000F76  23A3               	addwfc	(??_pf_read+7)& (0+255),f,b
  6176  000F78  519C               	movf	??_pf_read& (0+255),w,b
  6177  000F7A  25A0               	addwf	(??_pf_read+4)& (0+255),w,b
  6178  000F7C  6FAD               	movwf	pf_read@remain& (0+255),b
  6179  000F7E  519D               	movf	(??_pf_read+1)& (0+255),w,b
  6180  000F80  21A1               	addwfc	(??_pf_read+5)& (0+255),w,b
  6181  000F82  6FAE               	movwf	(pf_read@remain+1)& (0+255),b
  6182  000F84  519E               	movf	(??_pf_read+2)& (0+255),w,b
  6183  000F86  21A2               	addwfc	(??_pf_read+6)& (0+255),w,b
  6184  000F88  6FAF               	movwf	(pf_read@remain+2)& (0+255),b
  6185  000F8A  519F               	movf	(??_pf_read+3)& (0+255),w,b
  6186  000F8C  21A3               	addwfc	(??_pf_read+7)& (0+255),w,b
  6187  000F8E  6FB0               	movwf	(pf_read@remain+3)& (0+255),b
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;pff.c: 883: if (btr > remain) btr = (UINT)remain;
  6191  000F90  5198               	movf	pf_read@btr& (0+255),w,b
  6192  000F92  6F9C               	movwf	??_pf_read& (0+255),b
  6193  000F94  5199               	movf	(pf_read@btr+1)& (0+255),w,b
  6194  000F96  6F9D               	movwf	(??_pf_read+1)& (0+255),b
  6195  000F98  6B9E               	clrf	(??_pf_read+2)& (0+255),b
  6196  000F9A  6B9F               	clrf	(??_pf_read+3)& (0+255),b
  6197  000F9C  519C               	movf	??_pf_read& (0+255),w,b
  6198  000F9E  5DAD               	subwf	pf_read@remain& (0+255),w,b
  6199  000FA0  519D               	movf	(??_pf_read+1)& (0+255),w,b
  6200  000FA2  59AE               	subwfb	(pf_read@remain+1)& (0+255),w,b
  6201  000FA4  519E               	movf	(??_pf_read+2)& (0+255),w,b
  6202  000FA6  59AF               	subwfb	(pf_read@remain+2)& (0+255),w,b
  6203  000FA8  519F               	movf	(??_pf_read+3)& (0+255),w,b
  6204  000FAA  59B0               	subwfb	(pf_read@remain+3)& (0+255),w,b
  6205  000FAC  B0D8               	btfsc	status,0,c
  6206  000FAE  D160               	goto	l804
  6207                           
  6208                           ; BSR set to: 0
  6209  000FB0  C0AD  F098         	movff	pf_read@remain,pf_read@btr
  6210  000FB4  C0AE  F099         	movff	pf_read@remain+1,pf_read@btr+1
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;pff.c: 885: while (btr) {
  6214  000FB8  D15B               	goto	l804
  6215  000FBA                     
  6216                           ; BSR set to: 0
  6217                           ;pff.c: 886: if ((fs->fptr % 512) == 0) {
  6218                           
  6219                           ; BSR set to: 0
  6220  000FBA  EE20 F016          	lfsr	2,22
  6221  000FBE  51B8               	movf	pf_read@fs& (0+255),w,b
  6222  000FC0  26D9               	addwf	fsr2l,f,c
  6223  000FC2  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6224  000FC4  22DA               	addwfc	fsr2h,f,c
  6225  000FC6  0EFF               	movlw	255
  6226  000FC8  14DE               	andwf	postinc2,w,c
  6227  000FCA  6F9C               	movwf	??_pf_read& (0+255),b
  6228  000FCC  0E01               	movlw	1
  6229  000FCE  14DE               	andwf	postinc2,w,c
  6230  000FD0  6F9D               	movwf	(??_pf_read+1)& (0+255),b
  6231  000FD2  0E00               	movlw	0
  6232  000FD4  14DE               	andwf	postinc2,w,c
  6233  000FD6  6F9E               	movwf	(??_pf_read+2)& (0+255),b
  6234  000FD8  0E00               	movlw	0
  6235  000FDA  14DE               	andwf	postinc2,w,c
  6236  000FDC  6F9F               	movwf	(??_pf_read+3)& (0+255),b
  6237  000FDE  519C               	movf	??_pf_read& (0+255),w,b
  6238  000FE0  119D               	iorwf	(??_pf_read+1)& (0+255),w,b
  6239  000FE2  119E               	iorwf	(??_pf_read+2)& (0+255),w,b
  6240  000FE4  119F               	iorwf	(??_pf_read+3)& (0+255),w,b
  6241  000FE6  A4D8               	btfss	status,2,c
  6242  000FE8  D0BC               	goto	l806
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;pff.c: 887: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  6246  000FEA  EE20 F016          	lfsr	2,22
  6247  000FEE  51B8               	movf	pf_read@fs& (0+255),w,b
  6248  000FF0  26D9               	addwf	fsr2l,f,c
  6249  000FF2  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6250  000FF4  22DA               	addwfc	fsr2h,f,c
  6251  000FF6  CFDE F09C          	movff	postinc2,??_pf_read
  6252  000FFA  CFDE F09D          	movff	postinc2,??_pf_read+1
  6253  000FFE  CFDE F09E          	movff	postinc2,??_pf_read+2
  6254  001002  CFDE F09F          	movff	postinc2,??_pf_read+3
  6255  001006  0E0A               	movlw	10
  6256  001008  D005               	goto	u10310
  6257  00100A                     u10315:
  6258  00100A  90D8               	bcf	status,0,c
  6259  00100C  339F               	rrcf	(??_pf_read+3)& (0+255),f,b
  6260  00100E  339E               	rrcf	(??_pf_read+2)& (0+255),f,b
  6261  001010  339D               	rrcf	(??_pf_read+1)& (0+255),f,b
  6262  001012  339C               	rrcf	??_pf_read& (0+255),f,b
  6263  001014                     u10310:
  6264  001014  2EE8               	decfsz	wreg,f,c
  6265  001016  D7F9               	goto	u10315
  6266  001018  EE20 F002          	lfsr	2,2
  6267  00101C  51B8               	movf	pf_read@fs& (0+255),w,b
  6268  00101E  26D9               	addwf	fsr2l,f,c
  6269  001020  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6270  001022  22DA               	addwfc	fsr2h,f,c
  6271  001024  50DF               	movf	indf2,w,c
  6272  001026  6FA0               	movwf	(??_pf_read+4)& (0+255),b
  6273  001028  05A0               	decf	(??_pf_read+4)& (0+255),w,b
  6274  00102A  159C               	andwf	??_pf_read& (0+255),w,b
  6275  00102C  6FB5               	movwf	pf_read@cs& (0+255),b
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;pff.c: 888: if (!cs) {
  6279  00102E  51B5               	movf	pf_read@cs& (0+255),w,b
  6280  001030  A4D8               	btfss	status,2,c
  6281  001032  D054               	goto	l807
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;pff.c: 889: if (fs->fptr == 0)
  6285  001034  EE20 F016          	lfsr	2,22
  6286  001038  51B8               	movf	pf_read@fs& (0+255),w,b
  6287  00103A  26D9               	addwf	fsr2l,f,c
  6288  00103C  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6289  00103E  22DA               	addwfc	fsr2h,f,c
  6290  001040  50DE               	movf	postinc2,w,c
  6291  001042  10DE               	iorwf	postinc2,w,c
  6292  001044  10DE               	iorwf	postinc2,w,c
  6293  001046  10DE               	iorwf	postinc2,w,c
  6294  001048  A4D8               	btfss	status,2,c
  6295  00104A  D00F               	goto	l808
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;pff.c: 890: clst = fs->org_clust;
  6299  00104C  EE20 F01E          	lfsr	2,30
  6300  001050  51B8               	movf	pf_read@fs& (0+255),w,b
  6301  001052  26D9               	addwf	fsr2l,f,c
  6302  001054  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6303  001056  22DA               	addwfc	fsr2h,f,c
  6304  001058  CFDE F0B1          	movff	postinc2,pf_read@clst
  6305  00105C  CFDE F0B2          	movff	postinc2,pf_read@clst+1
  6306  001060  CFDE F0B3          	movff	postinc2,pf_read@clst+2
  6307  001064  CFDE F0B4          	movff	postinc2,pf_read@clst+3
  6308  001068  D018               	goto	l809
  6309  00106A                     l808:
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;pff.c: 891: else
  6313                           ;pff.c: 892: clst = get_fat(fs->curr_clust);
  6314                           
  6315                           ; BSR set to: 0
  6316  00106A  EE20 F022          	lfsr	2,34
  6317  00106E  51B8               	movf	pf_read@fs& (0+255),w,b
  6318  001070  26D9               	addwf	fsr2l,f,c
  6319  001072  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6320  001074  22DA               	addwfc	fsr2h,f,c
  6321  001076  CFDE F02A          	movff	postinc2,get_fat@clst
  6322  00107A  CFDE F02B          	movff	postinc2,get_fat@clst+1
  6323  00107E  CFDE F02C          	movff	postinc2,get_fat@clst+2
  6324  001082  CFDE F02D          	movff	postinc2,get_fat@clst+3
  6325  001086  EC82  F005         	call	_get_fat	;wreg free
  6326  00108A  C02A  F0B1         	movff	?_get_fat,pf_read@clst
  6327  00108E  C02B  F0B2         	movff	?_get_fat+1,pf_read@clst+1
  6328  001092  C02C  F0B3         	movff	?_get_fat+2,pf_read@clst+2
  6329  001096  C02D  F0B4         	movff	?_get_fat+3,pf_read@clst+3
  6330  00109A                     l809:
  6331                           
  6332                           ;pff.c: 893: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  6333  00109A  0100               	movlb	0	; () banked
  6334  00109C  51B4               	movf	(pf_read@clst+3)& (0+255),w,b
  6335  00109E  11B3               	iorwf	(pf_read@clst+2)& (0+255),w,b
  6336  0010A0  11B2               	iorwf	(pf_read@clst+1)& (0+255),w,b
  6337  0010A2  E10E               	bnz	l9048
  6338  0010A4  0E02               	movlw	2
  6339  0010A6  5DB1               	subwf	pf_read@clst& (0+255),w,b
  6340  0010A8  B0D8               	btfsc	status,0,c
  6341  0010AA  D00A               	goto	l810
  6342                           
  6343                           ; BSR set to: 0
  6344  0010AC  EE20 F001          	lfsr	2,1
  6345  0010B0  51B8               	movf	pf_read@fs& (0+255),w,b
  6346  0010B2  26D9               	addwf	fsr2l,f,c
  6347  0010B4  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6348  0010B6  22DA               	addwfc	fsr2h,f,c
  6349  0010B8  0E00               	movlw	0
  6350  0010BA  6EDF               	movwf	indf2,c
  6351                           
  6352                           ; BSR set to: 0
  6353  0010BC  0E01               	movlw	1
  6354                           
  6355                           ; BSR set to: 0
  6356  0010BE  0012               	return	
  6357  0010C0                     l810:
  6358  0010C0                     l9048:
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;pff.c: 894: fs->curr_clust = clst;
  6362  0010C0  EE20 F022          	lfsr	2,34
  6363  0010C4  51B8               	movf	pf_read@fs& (0+255),w,b
  6364  0010C6  26D9               	addwf	fsr2l,f,c
  6365  0010C8  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6366  0010CA  22DA               	addwfc	fsr2h,f,c
  6367  0010CC  C0B1  FFDE         	movff	pf_read@clst,postinc2
  6368  0010D0  C0B2  FFDE         	movff	pf_read@clst+1,postinc2
  6369  0010D4  C0B3  FFDE         	movff	pf_read@clst+2,postinc2
  6370  0010D8  C0B4  FFDE         	movff	pf_read@clst+3,postinc2
  6371  0010DC                     l807:
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;pff.c: 895: }
  6375                           ;pff.c: 896: sect = clust2sect(fs->curr_clust);
  6376                           
  6377                           ; BSR set to: 0
  6378  0010DC  EE20 F022          	lfsr	2,34
  6379  0010E0  51B8               	movf	pf_read@fs& (0+255),w,b
  6380  0010E2  26D9               	addwf	fsr2l,f,c
  6381  0010E4  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6382  0010E6  22DA               	addwfc	fsr2h,f,c
  6383  0010E8  CFDE F026          	movff	postinc2,clust2sect@clst
  6384  0010EC  CFDE F027          	movff	postinc2,clust2sect@clst+1
  6385  0010F0  CFDE F028          	movff	postinc2,clust2sect@clst+2
  6386  0010F4  CFDE F029          	movff	postinc2,clust2sect@clst+3
  6387  0010F8  ECB7  F014         	call	_clust2sect	;wreg free
  6388  0010FC  C026  F0A9         	movff	?_clust2sect,pf_read@sect
  6389  001100  C027  F0AA         	movff	?_clust2sect+1,pf_read@sect+1
  6390  001104  C028  F0AB         	movff	?_clust2sect+2,pf_read@sect+2
  6391  001108  C029  F0AC         	movff	?_clust2sect+3,pf_read@sect+3
  6392                           
  6393                           ;pff.c: 897: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  6394  00110C  0100               	movlb	0	; () banked
  6395  00110E  51A9               	movf	pf_read@sect& (0+255),w,b
  6396  001110  11AA               	iorwf	(pf_read@sect+1)& (0+255),w,b
  6397  001112  11AB               	iorwf	(pf_read@sect+2)& (0+255),w,b
  6398  001114  11AC               	iorwf	(pf_read@sect+3)& (0+255),w,b
  6399  001116  A4D8               	btfss	status,2,c
  6400  001118  D00A               	goto	l811
  6401                           
  6402                           ; BSR set to: 0
  6403  00111A  EE20 F001          	lfsr	2,1
  6404  00111E  51B8               	movf	pf_read@fs& (0+255),w,b
  6405  001120  26D9               	addwf	fsr2l,f,c
  6406  001122  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6407  001124  22DA               	addwfc	fsr2h,f,c
  6408  001126  0E00               	movlw	0
  6409  001128  6EDF               	movwf	indf2,c
  6410                           
  6411                           ; BSR set to: 0
  6412  00112A  0E01               	movlw	1
  6413                           
  6414                           ; BSR set to: 0
  6415  00112C  0012               	return	
  6416  00112E                     l811:
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;pff.c: 898: fs->dsect = sect + cs;
  6420                           
  6421                           ; BSR set to: 0
  6422  00112E  51B5               	movf	pf_read@cs& (0+255),w,b
  6423  001130  25A9               	addwf	pf_read@sect& (0+255),w,b
  6424  001132  6F9C               	movwf	??_pf_read& (0+255),b
  6425  001134  0E00               	movlw	0
  6426  001136  21AA               	addwfc	(pf_read@sect+1)& (0+255),w,b
  6427  001138  6F9D               	movwf	(??_pf_read+1)& (0+255),b
  6428  00113A  0E00               	movlw	0
  6429  00113C  21AB               	addwfc	(pf_read@sect+2)& (0+255),w,b
  6430  00113E  6F9E               	movwf	(??_pf_read+2)& (0+255),b
  6431  001140  0E00               	movlw	0
  6432  001142  21AC               	addwfc	(pf_read@sect+3)& (0+255),w,b
  6433  001144  6F9F               	movwf	(??_pf_read+3)& (0+255),b
  6434  001146  EE20 F026          	lfsr	2,38
  6435  00114A  51B8               	movf	pf_read@fs& (0+255),w,b
  6436  00114C  26D9               	addwf	fsr2l,f,c
  6437  00114E  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6438  001150  22DA               	addwfc	fsr2h,f,c
  6439  001152  C09C  FFDE         	movff	??_pf_read,postinc2
  6440  001156  C09D  FFDE         	movff	??_pf_read+1,postinc2
  6441  00115A  C09E  FFDE         	movff	??_pf_read+2,postinc2
  6442  00115E  C09F  FFDE         	movff	??_pf_read+3,postinc2
  6443  001162                     l806:
  6444                           
  6445                           ; BSR set to: 0
  6446                           ;pff.c: 899: }
  6447                           ;pff.c: 900: rcnt = 512 - (UINT)fs->fptr % 512;
  6448  001162  0EFF               	movlw	255
  6449  001164  6F9C               	movwf	??_pf_read& (0+255),b
  6450  001166  0E01               	movlw	1
  6451  001168  6F9D               	movwf	(??_pf_read+1)& (0+255),b
  6452  00116A  EE20 F016          	lfsr	2,22
  6453  00116E  51B8               	movf	pf_read@fs& (0+255),w,b
  6454  001170  26D9               	addwf	fsr2l,f,c
  6455  001172  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6456  001174  22DA               	addwfc	fsr2h,f,c
  6457  001176  CFDE F09E          	movff	postinc2,??_pf_read+2
  6458  00117A  CFDD F09F          	movff	postdec2,??_pf_read+3
  6459  00117E  519C               	movf	??_pf_read& (0+255),w,b
  6460  001180  179E               	andwf	(??_pf_read+2)& (0+255),f,b
  6461  001182  519D               	movf	(??_pf_read+1)& (0+255),w,b
  6462  001184  179F               	andwf	(??_pf_read+3)& (0+255),f,b
  6463  001186  1F9E               	comf	(??_pf_read+2)& (0+255),f,b
  6464  001188  1F9F               	comf	(??_pf_read+3)& (0+255),f,b
  6465  00118A  4B9E               	infsnz	(??_pf_read+2)& (0+255),f,b
  6466  00118C  2B9F               	incf	(??_pf_read+3)& (0+255),f,b
  6467  00118E  0E00               	movlw	0
  6468  001190  259E               	addwf	(??_pf_read+2)& (0+255),w,b
  6469  001192  6FB6               	movwf	pf_read@rcnt& (0+255),b
  6470  001194  0E02               	movlw	2
  6471  001196  219F               	addwfc	(??_pf_read+3)& (0+255),w,b
  6472  001198  6FB7               	movwf	(pf_read@rcnt+1)& (0+255),b
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;pff.c: 901: if (rcnt > btr) rcnt = btr;
  6476  00119A  51B6               	movf	pf_read@rcnt& (0+255),w,b
  6477  00119C  5D98               	subwf	pf_read@btr& (0+255),w,b
  6478  00119E  51B7               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6479  0011A0  5999               	subwfb	(pf_read@btr+1)& (0+255),w,b
  6480  0011A2  B0D8               	btfsc	status,0,c
  6481  0011A4  D004               	goto	l812
  6482                           
  6483                           ; BSR set to: 0
  6484  0011A6  C098  F0B6         	movff	pf_read@btr,pf_read@rcnt
  6485  0011AA  C099  F0B7         	movff	pf_read@btr+1,pf_read@rcnt+1
  6486  0011AE                     l812:
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;pff.c: 902: dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
  6490                           
  6491                           ; BSR set to: 0
  6492  0011AE  5196               	movf	pf_read@buff& (0+255),w,b
  6493  0011B0  1197               	iorwf	(pf_read@buff+1)& (0+255),w,b
  6494  0011B2  B4D8               	btfsc	status,2,c
  6495  0011B4  D005               	goto	l814
  6496                           
  6497                           ; BSR set to: 0
  6498  0011B6  C0A5  F0A7         	movff	pf_read@rbuff,_pf_read$1886
  6499  0011BA  C0A6  F0A8         	movff	pf_read@rbuff+1,_pf_read$1886+1
  6500  0011BE  D004               	goto	l816
  6501  0011C0                     l814:
  6502                           
  6503                           ; BSR set to: 0
  6504                           
  6505                           ; BSR set to: 0
  6506  0011C0  0E00               	movlw	0
  6507  0011C2  6FA7               	movwf	_pf_read$1886& (0+255),b
  6508  0011C4  0E00               	movlw	0
  6509  0011C6  6FA8               	movwf	(_pf_read$1886+1)& (0+255),b
  6510  0011C8                     l816:
  6511                           
  6512                           ; BSR set to: 0
  6513                           
  6514                           ; BSR set to: 0
  6515  0011C8  C0A7  F060         	movff	_pf_read$1886,disk_readp@rd
  6516  0011CC  C0A8  F061         	movff	_pf_read$1886+1,disk_readp@rd+1
  6517  0011D0  EE20 F026          	lfsr	2,38
  6518  0011D4  51B8               	movf	pf_read@fs& (0+255),w,b
  6519  0011D6  26D9               	addwf	fsr2l,f,c
  6520  0011D8  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6521  0011DA  22DA               	addwfc	fsr2h,f,c
  6522  0011DC  CFDE F062          	movff	postinc2,disk_readp@sector
  6523  0011E0  CFDE F063          	movff	postinc2,disk_readp@sector+1
  6524  0011E4  CFDE F064          	movff	postinc2,disk_readp@sector+2
  6525  0011E8  CFDE F065          	movff	postinc2,disk_readp@sector+3
  6526  0011EC  EE20 F016          	lfsr	2,22
  6527  0011F0  51B8               	movf	pf_read@fs& (0+255),w,b
  6528  0011F2  26D9               	addwf	fsr2l,f,c
  6529  0011F4  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6530  0011F6  22DA               	addwfc	fsr2h,f,c
  6531  0011F8  CFDE F09C          	movff	postinc2,??_pf_read
  6532  0011FC  CFDD F09D          	movff	postdec2,??_pf_read+1
  6533  001200  0EFF               	movlw	255
  6534  001202  159C               	andwf	??_pf_read& (0+255),w,b
  6535  001204  6F66               	movwf	disk_readp@offset& (0+255),b
  6536  001206  0E01               	movlw	1
  6537  001208  159D               	andwf	(??_pf_read+1)& (0+255),w,b
  6538  00120A  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  6539  00120C  C0B6  F068         	movff	pf_read@rcnt,disk_readp@count
  6540  001210  C0B7  F069         	movff	pf_read@rcnt+1,disk_readp@count+1
  6541  001214  EC3E  F009         	call	_disk_readp	;wreg free
  6542  001218  0100               	movlb	0	; () banked
  6543  00121A  6FA4               	movwf	pf_read@dr& (0+255),b
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;pff.c: 903: if (dr) {fs->flag = 0; return FR_DISK_ERR;};
  6547  00121C  51A4               	movf	pf_read@dr& (0+255),w,b
  6548  00121E  B4D8               	btfsc	status,2,c
  6549  001220  D00A               	goto	l817
  6550                           
  6551                           ; BSR set to: 0
  6552  001222  EE20 F001          	lfsr	2,1
  6553  001226  51B8               	movf	pf_read@fs& (0+255),w,b
  6554  001228  26D9               	addwf	fsr2l,f,c
  6555  00122A  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6556  00122C  22DA               	addwfc	fsr2h,f,c
  6557  00122E  0E00               	movlw	0
  6558  001230  6EDF               	movwf	indf2,c
  6559                           
  6560                           ; BSR set to: 0
  6561  001232  0E01               	movlw	1
  6562                           
  6563                           ; BSR set to: 0
  6564  001234  0012               	return	
  6565  001236                     l817:
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;pff.c: 904: fs->fptr += rcnt; rbuff += rcnt;
  6569                           
  6570                           ; BSR set to: 0
  6571  001236  EE20 F016          	lfsr	2,22
  6572  00123A  51B8               	movf	pf_read@fs& (0+255),w,b
  6573  00123C  26D9               	addwf	fsr2l,f,c
  6574  00123E  51B9               	movf	(pf_read@fs+1)& (0+255),w,b
  6575  001240  22DA               	addwfc	fsr2h,f,c
  6576  001242  51B6               	movf	pf_read@rcnt& (0+255),w,b
  6577  001244  26DE               	addwf	postinc2,f,c
  6578  001246  51B7               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6579  001248  22DE               	addwfc	postinc2,f,c
  6580  00124A  0E00               	movlw	0
  6581  00124C  22DE               	addwfc	postinc2,f,c
  6582  00124E  22DE               	addwfc	postinc2,f,c
  6583                           
  6584                           ; BSR set to: 0
  6585  001250  51B6               	movf	pf_read@rcnt& (0+255),w,b
  6586  001252  27A5               	addwf	pf_read@rbuff& (0+255),f,b
  6587  001254  51B7               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6588  001256  23A6               	addwfc	(pf_read@rbuff+1)& (0+255),f,b
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;pff.c: 905: btr -= rcnt; *br += rcnt;
  6592  001258  51B6               	movf	pf_read@rcnt& (0+255),w,b
  6593  00125A  5F98               	subwf	pf_read@btr& (0+255),f,b
  6594  00125C  51B7               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6595  00125E  5B99               	subwfb	(pf_read@btr+1)& (0+255),f,b
  6596                           
  6597                           ; BSR set to: 0
  6598  001260  C09A  FFD9         	movff	pf_read@br,fsr2l
  6599  001264  C09B  FFDA         	movff	pf_read@br+1,fsr2h
  6600  001268  51B6               	movf	pf_read@rcnt& (0+255),w,b
  6601  00126A  26DE               	addwf	postinc2,f,c
  6602  00126C  51B7               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6603  00126E  22DD               	addwfc	postdec2,f,c
  6604  001270                     l804:
  6605                           
  6606                           ; BSR set to: 0
  6607                           
  6608                           ; BSR set to: 0
  6609  001270  5198               	movf	pf_read@btr& (0+255),w,b
  6610  001272  1199               	iorwf	(pf_read@btr+1)& (0+255),w,b
  6611  001274  A4D8               	btfss	status,2,c
  6612  001276  D6A1               	goto	l805
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;pff.c: 906: }
  6616                           ;pff.c: 908: return FR_OK;
  6617                           
  6618                           ; BSR set to: 0
  6619  001278  0E00               	movlw	0
  6620  00127A  0012               	return	
  6621  00127C                     __end_of_pf_read:
  6622                           	opt stack 0
  6623                           tosu	equ	0xFFF
  6624                           tosh	equ	0xFFE
  6625                           tosl	equ	0xFFD
  6626                           pclath	equ	0xFFA
  6627                           tblptru	equ	0xFF8
  6628                           tblptrh	equ	0xFF7
  6629                           tblptrl	equ	0xFF6
  6630                           tablat	equ	0xFF5
  6631                           prodh	equ	0xFF4
  6632                           prodl	equ	0xFF3
  6633                           intcon	equ	0xFF2
  6634                           intcon2	equ	0xFF1
  6635                           intcon3	equ	0xFF0
  6636                           postinc0	equ	0xFEE
  6637                           wreg	equ	0xFE8
  6638                           postinc1	equ	0xFE6
  6639                           postdec1	equ	0xFE5
  6640                           fsr1h	equ	0xFE2
  6641                           fsr1l	equ	0xFE1
  6642                           indf2	equ	0xFDF
  6643                           postinc2	equ	0xFDE
  6644                           postdec2	equ	0xFDD
  6645                           plusw2	equ	0xFDB
  6646                           fsr2h	equ	0xFDA
  6647                           fsr2l	equ	0xFD9
  6648                           status	equ	0xFD8
  6649                           
  6650 ;; *************** function _pf_open *****************
  6651 ;; Defined at:
  6652 ;;		line 829 in file "bibliotecas/pff.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;  path            2   86[BANK0 ] PTR const unsigned char 
  6655 ;;		 -> STR_13(10), 
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;  dir            32   12[BANK1 ] unsigned char [32]
  6658 ;;  dj             16   47[BANK1 ] struct .
  6659 ;;  sp             12    0[BANK1 ] unsigned char [12]
  6660 ;;  fs              2   45[BANK1 ] PTR struct .
  6661 ;;		 -> SDCard@fs(42), NULL(0), 
  6662 ;;  res             1   44[BANK1 ] enum E43
  6663 ;; Return value:  Size  Location     Type
  6664 ;;                  1    wreg      enum E43
  6665 ;; Registers used:
  6666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6672 ;;      Params:         0       2       0       0       0       0       0       0       0
  6673 ;;      Locals:         0       0      63       0       0       0       0       0       0
  6674 ;;      Temps:          0      22       0       0       0       0       0       0       0
  6675 ;;      Totals:         0      24      63       0       0       0       0       0       0
  6676 ;;Total ram usage:       87 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:   10
  6679 ;; This function calls:
  6680 ;;		_follow_path
  6681 ;;		_get_clust
  6682 ;; This function is called by:
  6683 ;;		_SDCard
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           	psect	text28
  6688  001D4A                     __ptext28:
  6689                           	opt stack 0
  6690  001D4A                     _pf_open:
  6691                           	opt stack 18
  6692                           
  6693                           ;pff.c: 833: FRESULT res;
  6694                           ;pff.c: 834: DIR_E dj;
  6695                           ;pff.c: 835: BYTE sp[12], dir[32];
  6696                           ;pff.c: 836: FATFS *fs = FatFs;
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;incstack = 0
  6700  001D4A  C037  F1BB         	movff	_FatFs,pf_open@fs
  6701  001D4E  C038  F1BC         	movff	_FatFs+1,pf_open@fs+1
  6702                           
  6703                           ;pff.c: 838: if (!fs) return FR_NOT_ENABLED;
  6704  001D52  0101               	movlb	1	; () banked
  6705  001D54  51BB               	movf	pf_open@fs& (0+255),w,b
  6706  001D56  11BC               	iorwf	(pf_open@fs+1)& (0+255),w,b
  6707  001D58  A4D8               	btfss	status,2,c
  6708  001D5A  D002               	goto	l792
  6709                           
  6710                           ; BSR set to: 1
  6711  001D5C  0E05               	movlw	5
  6712                           
  6713                           ; BSR set to: 1
  6714  001D5E  0012               	return	
  6715  001D60                     l792:
  6716                           
  6717                           ; BSR set to: 1
  6718                           ;pff.c: 840: fs->flag = 0;
  6719                           
  6720                           ; BSR set to: 1
  6721  001D60  EE20 F001          	lfsr	2,1
  6722  001D64  51BB               	movf	pf_open@fs& (0+255),w,b
  6723  001D66  26D9               	addwf	fsr2l,f,c
  6724  001D68  51BC               	movf	(pf_open@fs+1)& (0+255),w,b
  6725  001D6A  22DA               	addwfc	fsr2h,f,c
  6726  001D6C  0E00               	movlw	0
  6727  001D6E  6EDF               	movwf	indf2,c
  6728                           
  6729                           ; BSR set to: 1
  6730                           ;pff.c: 841: dj.fn = sp;
  6731  001D70  0E8E               	movlw	low pf_open@sp
  6732  001D72  6FBF               	movwf	(pf_open@dj+2)& (0+255),b
  6733  001D74  0E01               	movlw	high pf_open@sp
  6734  001D76  6FC0               	movwf	(pf_open@dj+3)& (0+255),b
  6735                           
  6736                           ; BSR set to: 1
  6737                           ;pff.c: 842: res = follow_path(&dj, dir, "check.txt" );
  6738  001D78  0EBD               	movlw	low pf_open@dj
  6739  001D7A  0100               	movlb	0	; () banked
  6740  001D7C  6FAF               	movwf	follow_path@dj& (0+255),b
  6741  001D7E  0E01               	movlw	high pf_open@dj
  6742  001D80  6FB0               	movwf	(follow_path@dj+1)& (0+255),b
  6743  001D82  0E9A               	movlw	low pf_open@dir
  6744  001D84  6FB1               	movwf	follow_path@dir& (0+255),b
  6745  001D86  0E01               	movlw	high pf_open@dir
  6746  001D88  6FB2               	movwf	(follow_path@dir+1)& (0+255),b
  6747  001D8A  0E47               	movlw	low STR_8
  6748  001D8C  6FB3               	movwf	follow_path@path& (0+255),b
  6749  001D8E  0E62               	movlw	high STR_8
  6750  001D90  6FB4               	movwf	(follow_path@path+1)& (0+255),b
  6751  001D92  ECE2  F012         	call	_follow_path	;wreg free
  6752  001D96  0101               	movlb	1	; () banked
  6753  001D98  6FBA               	movwf	pf_open@res& (0+255),b
  6754                           
  6755                           ; BSR set to: 1
  6756                           ;pff.c: 843: if (res != FR_OK) return res;
  6757  001D9A  51BA               	movf	pf_open@res& (0+255),w,b
  6758  001D9C  B4D8               	btfsc	status,2,c
  6759  001D9E  D002               	goto	l794
  6760                           
  6761                           ; BSR set to: 1
  6762  001DA0  51BA               	movf	pf_open@res& (0+255),w,b
  6763                           
  6764                           ; BSR set to: 1
  6765  001DA2  0012               	return	
  6766  001DA4                     l794:
  6767                           
  6768                           ; BSR set to: 1
  6769                           ;pff.c: 844: if (!dir[0] || (dir[11] & 0x10))
  6770                           
  6771                           ; BSR set to: 1
  6772  001DA4  519A               	movf	pf_open@dir& (0+255),w,b
  6773  001DA6  B4D8               	btfsc	status,2,c
  6774  001DA8  D002               	goto	u10260
  6775                           
  6776                           ; BSR set to: 1
  6777  001DAA  A9A5               	btfss	(pf_open@dir+11)& (0+255),4,b
  6778  001DAC  D002               	goto	l795
  6779  001DAE                     u10260:
  6780                           
  6781                           ; BSR set to: 1
  6782                           ;pff.c: 845: return FR_NO_FILE;
  6783                           
  6784                           ; BSR set to: 1
  6785  001DAE  0E03               	movlw	3
  6786                           
  6787                           ; BSR set to: 1
  6788  001DB0  0012               	return	
  6789  001DB2                     l795:
  6790                           
  6791                           ; BSR set to: 1
  6792                           ;pff.c: 847: fs->org_clust = get_clust(dir);
  6793                           
  6794                           ; BSR set to: 1
  6795  001DB2  0E9A               	movlw	low pf_open@dir
  6796  001DB4  6E1A               	movwf	get_clust@dir,c
  6797  001DB6  0E01               	movlw	high pf_open@dir
  6798  001DB8  6E1B               	movwf	get_clust@dir+1,c
  6799  001DBA  EC53  F014         	call	_get_clust	;wreg free
  6800  001DBE  0101               	movlb	1	; () banked
  6801  001DC0  EE20 F01E          	lfsr	2,30
  6802  001DC4  51BB               	movf	pf_open@fs& (0+255),w,b
  6803  001DC6  26D9               	addwf	fsr2l,f,c
  6804  001DC8  51BC               	movf	(pf_open@fs+1)& (0+255),w,b
  6805  001DCA  22DA               	addwfc	fsr2h,f,c
  6806  001DCC  C01A  FFDE         	movff	?_get_clust,postinc2
  6807  001DD0  C01B  FFDE         	movff	?_get_clust+1,postinc2
  6808  001DD4  C01C  FFDE         	movff	?_get_clust+2,postinc2
  6809  001DD8  C01D  FFDE         	movff	?_get_clust+3,postinc2
  6810                           
  6811                           ; BSR set to: 1
  6812                           ;pff.c: 848: fs->fsize = (DWORD)(((DWORD)*((BYTE*)(dir+28)+3)<<24)|((DWORD)*((BYTE*)(dir
      +                          +28)+2)<<16)|((WORD)*((BYTE*)(dir+28)+1)<<8)|*(BYTE*)(dir+28));
  6813  001DDC  51B7               	movf	(pf_open@dir+29)& (0+255),w,b
  6814  001DDE  0100               	movlb	0	; () banked
  6815  001DE0  6FB9               	movwf	(??_pf_open+1)& (0+255),b
  6816  001DE2  6BB8               	clrf	??_pf_open& (0+255),b
  6817  001DE4  C1B8  F0BA         	movff	pf_open@dir+30,??_pf_open+2
  6818  001DE8  6BBB               	clrf	(??_pf_open+3)& (0+255),b
  6819  001DEA  6BBC               	clrf	(??_pf_open+4)& (0+255),b
  6820  001DEC  6BBD               	clrf	(??_pf_open+5)& (0+255),b
  6821  001DEE  C0BB  F0BD         	movff	??_pf_open+3,??_pf_open+5
  6822  001DF2  C0BA  F0BC         	movff	??_pf_open+2,??_pf_open+4
  6823  001DF6  6BBB               	clrf	(??_pf_open+3)& (0+255),b
  6824  001DF8  6BBA               	clrf	(??_pf_open+2)& (0+255),b
  6825  001DFA  C1B9  F0BE         	movff	pf_open@dir+31,??_pf_open+6
  6826  001DFE  6BBF               	clrf	(??_pf_open+7)& (0+255),b
  6827  001E00  6BC0               	clrf	(??_pf_open+8)& (0+255),b
  6828  001E02  6BC1               	clrf	(??_pf_open+9)& (0+255),b
  6829  001E04  C0BE  F0C1         	movff	??_pf_open+6,??_pf_open+9
  6830  001E08  6BC0               	clrf	(??_pf_open+8)& (0+255),b
  6831  001E0A  6BBF               	clrf	(??_pf_open+7)& (0+255),b
  6832  001E0C  6BBE               	clrf	(??_pf_open+6)& (0+255),b
  6833  001E0E  51BA               	movf	(??_pf_open+2)& (0+255),w,b
  6834  001E10  11BE               	iorwf	(??_pf_open+6)& (0+255),w,b
  6835  001E12  6FC2               	movwf	(??_pf_open+10)& (0+255),b
  6836  001E14  51BB               	movf	(??_pf_open+3)& (0+255),w,b
  6837  001E16  11BF               	iorwf	(??_pf_open+7)& (0+255),w,b
  6838  001E18  6FC3               	movwf	(??_pf_open+11)& (0+255),b
  6839  001E1A  51BC               	movf	(??_pf_open+4)& (0+255),w,b
  6840  001E1C  11C0               	iorwf	(??_pf_open+8)& (0+255),w,b
  6841  001E1E  6FC4               	movwf	(??_pf_open+12)& (0+255),b
  6842  001E20  51BD               	movf	(??_pf_open+5)& (0+255),w,b
  6843  001E22  11C1               	iorwf	(??_pf_open+9)& (0+255),w,b
  6844  001E24  6FC5               	movwf	(??_pf_open+13)& (0+255),b
  6845  001E26  51B8               	movf	??_pf_open& (0+255),w,b
  6846  001E28  11C2               	iorwf	(??_pf_open+10)& (0+255),w,b
  6847  001E2A  6FC6               	movwf	(??_pf_open+14)& (0+255),b
  6848  001E2C  51B9               	movf	(??_pf_open+1)& (0+255),w,b
  6849  001E2E  11C3               	iorwf	(??_pf_open+11)& (0+255),w,b
  6850  001E30  6FC7               	movwf	(??_pf_open+15)& (0+255),b
  6851  001E32  0E00               	movlw	0
  6852  001E34  11C4               	iorwf	(??_pf_open+12)& (0+255),w,b
  6853  001E36  6FC8               	movwf	(??_pf_open+16)& (0+255),b
  6854  001E38  0E00               	movlw	0
  6855  001E3A  11C5               	iorwf	(??_pf_open+13)& (0+255),w,b
  6856  001E3C  6FC9               	movwf	(??_pf_open+17)& (0+255),b
  6857  001E3E  0101               	movlb	1	; () banked
  6858  001E40  51B6               	movf	(pf_open@dir+28)& (0+255),w,b
  6859  001E42  0100               	movlb	0	; () banked
  6860  001E44  11C6               	iorwf	(??_pf_open+14)& (0+255),w,b
  6861  001E46  6FCA               	movwf	(??_pf_open+18)& (0+255),b
  6862  001E48  51C7               	movf	(??_pf_open+15)& (0+255),w,b
  6863  001E4A  6FCB               	movwf	(??_pf_open+19)& (0+255),b
  6864  001E4C  51C8               	movf	(??_pf_open+16)& (0+255),w,b
  6865  001E4E  6FCC               	movwf	(??_pf_open+20)& (0+255),b
  6866  001E50  51C9               	movf	(??_pf_open+17)& (0+255),w,b
  6867  001E52  6FCD               	movwf	(??_pf_open+21)& (0+255),b
  6868  001E54  0101               	movlb	1	; () banked
  6869  001E56  EE20 F01A          	lfsr	2,26
  6870  001E5A  51BB               	movf	pf_open@fs& (0+255),w,b
  6871  001E5C  26D9               	addwf	fsr2l,f,c
  6872  001E5E  51BC               	movf	(pf_open@fs+1)& (0+255),w,b
  6873  001E60  22DA               	addwfc	fsr2h,f,c
  6874  001E62  C0CA  FFDE         	movff	??_pf_open+18,postinc2
  6875  001E66  C0CB  FFDE         	movff	??_pf_open+19,postinc2
  6876  001E6A  C0CC  FFDE         	movff	??_pf_open+20,postinc2
  6877  001E6E  C0CD  FFDE         	movff	??_pf_open+21,postinc2
  6878                           
  6879                           ; BSR set to: 1
  6880                           ;pff.c: 849: fs->fptr = 0;
  6881  001E72  EE20 F016          	lfsr	2,22
  6882  001E76  51BB               	movf	pf_open@fs& (0+255),w,b
  6883  001E78  26D9               	addwf	fsr2l,f,c
  6884  001E7A  51BC               	movf	(pf_open@fs+1)& (0+255),w,b
  6885  001E7C  22DA               	addwfc	fsr2h,f,c
  6886  001E7E  6ADE               	clrf	postinc2,c
  6887  001E80  6ADE               	clrf	postinc2,c
  6888  001E82  6ADE               	clrf	postinc2,c
  6889  001E84  6ADD               	clrf	postdec2,c
  6890                           
  6891                           ; BSR set to: 1
  6892                           ;pff.c: 850: fs->flag = 0x01;
  6893  001E86  EE20 F001          	lfsr	2,1
  6894  001E8A  51BB               	movf	pf_open@fs& (0+255),w,b
  6895  001E8C  26D9               	addwf	fsr2l,f,c
  6896  001E8E  51BC               	movf	(pf_open@fs+1)& (0+255),w,b
  6897  001E90  22DA               	addwfc	fsr2h,f,c
  6898  001E92  0E01               	movlw	1
  6899  001E94  6EDF               	movwf	indf2,c
  6900                           
  6901                           ; BSR set to: 1
  6902                           ;pff.c: 852: return FR_OK;
  6903  001E96  0E00               	movlw	0
  6904  001E98  0012               	return	
  6905  001E9A                     __end_of_pf_open:
  6906                           	opt stack 0
  6907                           tosu	equ	0xFFF
  6908                           tosh	equ	0xFFE
  6909                           tosl	equ	0xFFD
  6910                           pclath	equ	0xFFA
  6911                           tblptru	equ	0xFF8
  6912                           tblptrh	equ	0xFF7
  6913                           tblptrl	equ	0xFF6
  6914                           tablat	equ	0xFF5
  6915                           prodh	equ	0xFF4
  6916                           prodl	equ	0xFF3
  6917                           intcon	equ	0xFF2
  6918                           intcon2	equ	0xFF1
  6919                           intcon3	equ	0xFF0
  6920                           postinc0	equ	0xFEE
  6921                           wreg	equ	0xFE8
  6922                           postinc1	equ	0xFE6
  6923                           postdec1	equ	0xFE5
  6924                           fsr1h	equ	0xFE2
  6925                           fsr1l	equ	0xFE1
  6926                           indf2	equ	0xFDF
  6927                           postinc2	equ	0xFDE
  6928                           postdec2	equ	0xFDD
  6929                           plusw2	equ	0xFDB
  6930                           fsr2h	equ	0xFDA
  6931                           fsr2l	equ	0xFD9
  6932                           status	equ	0xFD8
  6933                           
  6934 ;; *************** function _follow_path *****************
  6935 ;; Defined at:
  6936 ;;		line 680 in file "bibliotecas/pff.c"
  6937 ;; Parameters:    Size  Location     Type
  6938 ;;  dj              2   79[BANK0 ] PTR struct .
  6939 ;;		 -> pf_open@dj(16), 
  6940 ;;  dir             2   81[BANK0 ] PTR unsigned char 
  6941 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6942 ;;  path            2   83[BANK0 ] PTR const unsigned char 
  6943 ;;		 -> STR_8(10), 
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;  res             1   85[BANK0 ] enum E43
  6946 ;; Return value:  Size  Location     Type
  6947 ;;                  1    wreg      enum E43
  6948 ;; Registers used:
  6949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6950 ;; Tracked objects:
  6951 ;;		On entry : 0/0
  6952 ;;		On exit  : 0/0
  6953 ;;		Unchanged: 0/0
  6954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6955 ;;      Params:         0       6       0       0       0       0       0       0       0
  6956 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6957 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6958 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6959 ;;Total ram usage:        7 bytes
  6960 ;; Hardware stack levels used:    1
  6961 ;; Hardware stack levels required when called:    9
  6962 ;; This function calls:
  6963 ;;		_create_name
  6964 ;;		_dir_find
  6965 ;;		_dir_rewind
  6966 ;;		_get_clust
  6967 ;; This function is called by:
  6968 ;;		_pf_open
  6969 ;;		_pf_opendir
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           
  6973                           	psect	text29
  6974  0025C4                     __ptext29:
  6975                           	opt stack 0
  6976  0025C4                     _follow_path:
  6977                           	opt stack 18
  6978                           
  6979                           ;pff.c: 686: FRESULT res;
  6980                           ;pff.c: 689: while (*path == ' ') path++;
  6981                           
  6982                           ; BSR set to: 1
  6983                           ;incstack = 0
  6984  0025C4  D003               	goto	l749
  6985  0025C6  0100               	movlb	0	; () banked
  6986  0025C8  4BB3               	infsnz	follow_path@path& (0+255),f,b
  6987  0025CA  2BB4               	incf	(follow_path@path+1)& (0+255),f,b
  6988  0025CC                     l749:
  6989                           
  6990                           ; BSR set to: 0
  6991  0025CC  C0B3  FFF6         	movff	follow_path@path,tblptrl
  6992  0025D0  C0B4  FFF7         	movff	follow_path@path+1,tblptrh
  6993  0025D4                     	if	0	;tblptru may be non-zero
  6994  0025D4                     	endif
  6995  0025D4                     	if	0	;tblptru may be non-zero
  6996  0025D4                     	endif
  6997  0025D4  0008               	tblrd		*
  6998  0025D6  50F5               	movf	tablat,w,c
  6999  0025D8  0A20               	xorlw	32
  7000  0025DA  B4D8               	btfsc	status,2,c
  7001  0025DC  D7F4               	goto	l750
  7002                           
  7003                           ;pff.c: 690: if (*path == '/') path++;
  7004  0025DE  C0B3  FFF6         	movff	follow_path@path,tblptrl
  7005  0025E2  C0B4  FFF7         	movff	follow_path@path+1,tblptrh
  7006  0025E6                     	if	0	;tblptru may be non-zero
  7007  0025E6                     	endif
  7008  0025E6                     	if	0	;tblptru may be non-zero
  7009  0025E6                     	endif
  7010  0025E6  0008               	tblrd		*
  7011  0025E8  50F5               	movf	tablat,w,c
  7012  0025EA  0A2F               	xorlw	47
  7013  0025EC  A4D8               	btfss	status,2,c
  7014  0025EE  D003               	goto	l752
  7015  0025F0  0100               	movlb	0	; () banked
  7016  0025F2  4BB3               	infsnz	follow_path@path& (0+255),f,b
  7017  0025F4  2BB4               	incf	(follow_path@path+1)& (0+255),f,b
  7018  0025F6                     l752:
  7019                           
  7020                           ;pff.c: 691: dj->sclust = 0;
  7021                           
  7022                           ; BSR set to: 0
  7023  0025F6  0100               	movlb	0	; () banked
  7024  0025F8  EE20 F004          	lfsr	2,4
  7025  0025FC  51AF               	movf	follow_path@dj& (0+255),w,b
  7026  0025FE  26D9               	addwf	fsr2l,f,c
  7027  002600  51B0               	movf	(follow_path@dj+1)& (0+255),w,b
  7028  002602  22DA               	addwfc	fsr2h,f,c
  7029  002604  6ADE               	clrf	postinc2,c
  7030  002606  6ADE               	clrf	postinc2,c
  7031  002608  6ADE               	clrf	postinc2,c
  7032  00260A  6ADD               	clrf	postdec2,c
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;pff.c: 693: if ((BYTE)*path < ' ') {
  7036  00260C  C0B3  FFF6         	movff	follow_path@path,tblptrl
  7037  002610  C0B4  FFF7         	movff	follow_path@path+1,tblptrh
  7038  002614                     	if	0	;tblptru may be non-zero
  7039  002614                     	endif
  7040  002614                     	if	0	;tblptru may be non-zero
  7041  002614                     	endif
  7042  002614  0E20               	movlw	32
  7043  002616  0008               	tblrd		*
  7044  002618  60F5               	cpfslt	tablat,c
  7045  00261A  D00F               	goto	l753
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;pff.c: 694: res = dir_rewind(dj);
  7049  00261C  C0AF  F02C         	movff	follow_path@dj,dir_rewind@dj
  7050  002620  C0B0  F02D         	movff	follow_path@dj+1,dir_rewind@dj+1
  7051  002624  ECBB  F011         	call	_dir_rewind	;wreg free
  7052  002628  0100               	movlb	0	; () banked
  7053  00262A  6FB5               	movwf	follow_path@res& (0+255),b
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;pff.c: 695: dir[0] = 0;
  7057  00262C  C0B1  FFD9         	movff	follow_path@dir,fsr2l
  7058  002630  C0B2  FFDA         	movff	follow_path@dir+1,fsr2h
  7059  002634  0E00               	movlw	0
  7060  002636  6EDF               	movwf	indf2,c
  7061                           
  7062                           ;pff.c: 697: } else {
  7063  002638  D04E               	goto	l757
  7064  00263A                     l753:
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;pff.c: 699: res = create_name(dj, &path);
  7068                           
  7069                           ; BSR set to: 0
  7070                           
  7071                           ;pff.c: 698: for (;;) {
  7072                           
  7073                           ; BSR set to: 0
  7074  00263A  C0AF  F022         	movff	follow_path@dj,create_name@dj
  7075  00263E  C0B0  F023         	movff	follow_path@dj+1,create_name@dj+1
  7076  002642  0EB3               	movlw	low follow_path@path
  7077  002644  6E24               	movwf	create_name@path,c
  7078  002646  0E00               	movlw	high follow_path@path
  7079  002648  6E25               	movwf	create_name@path+1,c
  7080  00264A  EC4D  F00F         	call	_create_name	;wreg free
  7081  00264E  0100               	movlb	0	; () banked
  7082  002650  6FB5               	movwf	follow_path@res& (0+255),b
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;pff.c: 700: if (res != FR_OK) break;
  7086  002652  51B5               	movf	follow_path@res& (0+255),w,b
  7087  002654  A4D8               	btfss	status,2,c
  7088  002656  D03F               	goto	l757
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;pff.c: 701: res = dir_find(dj, dir);
  7092                           
  7093                           ; BSR set to: 0
  7094                           
  7095                           ; BSR set to: 0
  7096  002658  C0AF  F0A7         	movff	follow_path@dj,dir_find@dj
  7097  00265C  C0B0  F0A8         	movff	follow_path@dj+1,dir_find@dj+1
  7098  002660  C0B1  F0A9         	movff	follow_path@dir,dir_find@dir
  7099  002664  C0B2  F0AA         	movff	follow_path@dir+1,dir_find@dir+1
  7100  002668  EC6D  F013         	call	_dir_find	;wreg free
  7101  00266C  0100               	movlb	0	; () banked
  7102  00266E  6FB5               	movwf	follow_path@res& (0+255),b
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;pff.c: 702: if (res != FR_OK) break;
  7106  002670  51B5               	movf	follow_path@res& (0+255),w,b
  7107  002672  A4D8               	btfss	status,2,c
  7108  002674  D030               	goto	l757
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;pff.c: 703: if (dj->fn[11]) break;
  7112                           
  7113                           ; BSR set to: 0
  7114                           
  7115                           ; BSR set to: 0
  7116  002676  EE20 F002          	lfsr	2,2
  7117  00267A  51AF               	movf	follow_path@dj& (0+255),w,b
  7118  00267C  26D9               	addwf	fsr2l,f,c
  7119  00267E  51B0               	movf	(follow_path@dj+1)& (0+255),w,b
  7120  002680  22DA               	addwfc	fsr2h,f,c
  7121  002682  EE10 F00B          	lfsr	1,11
  7122  002686  50DE               	movf	postinc2,w,c
  7123  002688  26E1               	addwf	fsr1l,f,c
  7124  00268A  50DD               	movf	postdec2,w,c
  7125  00268C  22E2               	addwfc	fsr1h,f,c
  7126  00268E  50E7               	movf	indf1,w,c
  7127  002690  A4D8               	btfss	status,2,c
  7128  002692  D021               	goto	l757
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;pff.c: 704: if (!(dir[11] & 0x10)) {
  7132                           
  7133                           ; BSR set to: 0
  7134                           
  7135                           ; BSR set to: 0
  7136  002694  EE20 F00B          	lfsr	2,11
  7137  002698  51B1               	movf	follow_path@dir& (0+255),w,b
  7138  00269A  26D9               	addwf	fsr2l,f,c
  7139  00269C  51B2               	movf	(follow_path@dir+1)& (0+255),w,b
  7140  00269E  22DA               	addwfc	fsr2h,f,c
  7141  0026A0  B8DF               	btfsc	indf2,4,c
  7142  0026A2  D003               	goto	l760
  7143                           
  7144                           ; BSR set to: 0
  7145                           ;pff.c: 705: res = FR_NO_FILE; break;
  7146  0026A4  0E03               	movlw	3
  7147  0026A6  6FB5               	movwf	follow_path@res& (0+255),b
  7148  0026A8  D016               	goto	l757
  7149  0026AA                     l760:
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;pff.c: 706: }
  7153                           ;pff.c: 707: dj->sclust = get_clust(dir);
  7154                           
  7155                           ; BSR set to: 0
  7156  0026AA  C0B1  F01A         	movff	follow_path@dir,get_clust@dir
  7157  0026AE  C0B2  F01B         	movff	follow_path@dir+1,get_clust@dir+1
  7158  0026B2  EC53  F014         	call	_get_clust	;wreg free
  7159  0026B6  0100               	movlb	0	; () banked
  7160  0026B8  EE20 F004          	lfsr	2,4
  7161  0026BC  51AF               	movf	follow_path@dj& (0+255),w,b
  7162  0026BE  26D9               	addwf	fsr2l,f,c
  7163  0026C0  51B0               	movf	(follow_path@dj+1)& (0+255),w,b
  7164  0026C2  22DA               	addwfc	fsr2h,f,c
  7165  0026C4  C01A  FFDE         	movff	?_get_clust,postinc2
  7166  0026C8  C01B  FFDE         	movff	?_get_clust+1,postinc2
  7167  0026CC  C01C  FFDE         	movff	?_get_clust+2,postinc2
  7168  0026D0  C01D  FFDE         	movff	?_get_clust+3,postinc2
  7169                           
  7170                           ;pff.c: 708: }
  7171  0026D4  D7B2               	goto	l753
  7172  0026D6                     l757:
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;pff.c: 709: }
  7176                           ;pff.c: 711: return res;
  7177                           
  7178                           ; BSR set to: 0
  7179                           
  7180                           ; BSR set to: 0
  7181  0026D6  51B5               	movf	follow_path@res& (0+255),w,b
  7182  0026D8  0012               	return	
  7183  0026DA                     __end_of_follow_path:
  7184                           	opt stack 0
  7185                           tosu	equ	0xFFF
  7186                           tosh	equ	0xFFE
  7187                           tosl	equ	0xFFD
  7188                           pclath	equ	0xFFA
  7189                           tblptru	equ	0xFF8
  7190                           tblptrh	equ	0xFF7
  7191                           tblptrl	equ	0xFF6
  7192                           tablat	equ	0xFF5
  7193                           prodh	equ	0xFF4
  7194                           prodl	equ	0xFF3
  7195                           intcon	equ	0xFF2
  7196                           intcon2	equ	0xFF1
  7197                           intcon3	equ	0xFF0
  7198                           postinc0	equ	0xFEE
  7199                           wreg	equ	0xFE8
  7200                           indf1	equ	0xFE7
  7201                           postinc1	equ	0xFE6
  7202                           postdec1	equ	0xFE5
  7203                           fsr1h	equ	0xFE2
  7204                           fsr1l	equ	0xFE1
  7205                           indf2	equ	0xFDF
  7206                           postinc2	equ	0xFDE
  7207                           postdec2	equ	0xFDD
  7208                           plusw2	equ	0xFDB
  7209                           fsr2h	equ	0xFDA
  7210                           fsr2l	equ	0xFD9
  7211                           status	equ	0xFD8
  7212                           
  7213 ;; *************** function _get_clust *****************
  7214 ;; Defined at:
  7215 ;;		line 414 in file "bibliotecas/pff.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;  dir             2   25[COMRAM] PTR unsigned char 
  7218 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;  clst            4   39[COMRAM] unsigned long 
  7221 ;;  fs              2   37[COMRAM] PTR struct .
  7222 ;;		 -> SDCard@fs(42), NULL(0), 
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  4   25[COMRAM] unsigned long 
  7225 ;; Registers used:
  7226 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7232 ;;      Params:         4       0       0       0       0       0       0       0       0
  7233 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7234 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7235 ;;      Totals:        18       0       0       0       0       0       0       0       0
  7236 ;;Total ram usage:       18 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:    2
  7239 ;; This function calls:
  7240 ;;		Nothing
  7241 ;; This function is called by:
  7242 ;;		_follow_path
  7243 ;;		_pf_open
  7244 ;;		_pf_opendir
  7245 ;; This function uses a non-reentrant model
  7246 ;;
  7247                           
  7248                           	psect	text30
  7249  0028A6                     __ptext30:
  7250                           	opt stack 0
  7251  0028A6                     _get_clust:
  7252                           	opt stack 25
  7253                           
  7254                           ;pff.c: 418: FATFS *fs = FatFs;
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;incstack = 0
  7258  0028A6  C037  F026         	movff	_FatFs,get_clust@fs
  7259  0028AA  C038  F027         	movff	_FatFs+1,get_clust@fs+1
  7260                           
  7261                           ;pff.c: 422: if (0 || (1 && fs->fs_type == 3)) {
  7262  0028AE  0E00               	movlw	0
  7263  0028B0  6E28               	movwf	get_clust@clst,c
  7264  0028B2  0E00               	movlw	0
  7265  0028B4  6E29               	movwf	get_clust@clst+1,c
  7266  0028B6  0E00               	movlw	0
  7267  0028B8  6E2A               	movwf	get_clust@clst+2,c
  7268  0028BA  0E00               	movlw	0
  7269  0028BC  6E2B               	movwf	get_clust@clst+3,c
  7270  0028BE  C026  FFD9         	movff	get_clust@fs,fsr2l
  7271  0028C2  C027  FFDA         	movff	get_clust@fs+1,fsr2h
  7272  0028C6  0E03               	movlw	3
  7273  0028C8  18DE               	xorwf	postinc2,w,c
  7274  0028CA  A4D8               	btfss	status,2,c
  7275  0028CC  D025               	goto	l664
  7276                           
  7277                           ;pff.c: 423: clst = (WORD)(((WORD)*((BYTE*)(dir+20)+1)<<8)|(WORD)*(BYTE*)(dir+20));
  7278  0028CE  EE20 F015          	lfsr	2,21
  7279  0028D2  501A               	movf	get_clust@dir,w,c
  7280  0028D4  26D9               	addwf	fsr2l,f,c
  7281  0028D6  501B               	movf	get_clust@dir+1,w,c
  7282  0028D8  22DA               	addwfc	fsr2h,f,c
  7283  0028DA  50DF               	movf	indf2,w,c
  7284  0028DC  6E1E               	movwf	??_get_clust& (0+255),c
  7285  0028DE  501E               	movf	??_get_clust,w,c
  7286  0028E0  6E20               	movwf	(??_get_clust+2)& (0+255),c
  7287  0028E2  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  7288  0028E4  EE20 F014          	lfsr	2,20
  7289  0028E8  501A               	movf	get_clust@dir,w,c
  7290  0028EA  26D9               	addwf	fsr2l,f,c
  7291  0028EC  501B               	movf	get_clust@dir+1,w,c
  7292  0028EE  22DA               	addwfc	fsr2h,f,c
  7293  0028F0  50DF               	movf	indf2,w,c
  7294  0028F2  6E21               	movwf	(??_get_clust+3)& (0+255),c
  7295  0028F4  5021               	movf	??_get_clust+3,w,c
  7296  0028F6  121F               	iorwf	??_get_clust+1,f,c
  7297  0028F8  0E00               	movlw	0
  7298  0028FA  1220               	iorwf	??_get_clust+2,f,c
  7299  0028FC  C01F  F028         	movff	??_get_clust+1,get_clust@clst
  7300  002900  C020  F029         	movff	??_get_clust+2,get_clust@clst+1
  7301  002904  6A2A               	clrf	get_clust@clst+2,c
  7302  002906  6A2B               	clrf	get_clust@clst+3,c
  7303                           
  7304                           ;pff.c: 424: clst <<= 16;
  7305  002908  0E10               	movlw	16
  7306  00290A                     u9535:
  7307  00290A  90D8               	bcf	status,0,c
  7308  00290C  3628               	rlcf	get_clust@clst,f,c
  7309  00290E  3629               	rlcf	get_clust@clst+1,f,c
  7310  002910  362A               	rlcf	get_clust@clst+2,f,c
  7311  002912  362B               	rlcf	get_clust@clst+3,f,c
  7312  002914  2EE8               	decfsz	wreg,f,c
  7313  002916  D7F9               	goto	u9535
  7314  002918                     l664:
  7315                           
  7316                           ;pff.c: 425: }
  7317                           ;pff.c: 426: clst |= (WORD)(((WORD)*((BYTE*)(dir+26)+1)<<8)|(WORD)*(BYTE*)(dir+26));
  7318  002918  EE20 F01B          	lfsr	2,27
  7319  00291C  501A               	movf	get_clust@dir,w,c
  7320  00291E  26D9               	addwf	fsr2l,f,c
  7321  002920  501B               	movf	get_clust@dir+1,w,c
  7322  002922  22DA               	addwfc	fsr2h,f,c
  7323  002924  50DF               	movf	indf2,w,c
  7324  002926  6E1E               	movwf	??_get_clust& (0+255),c
  7325  002928  501E               	movf	??_get_clust,w,c
  7326  00292A  6E20               	movwf	(??_get_clust+2)& (0+255),c
  7327  00292C  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  7328  00292E  EE20 F01A          	lfsr	2,26
  7329  002932  501A               	movf	get_clust@dir,w,c
  7330  002934  26D9               	addwf	fsr2l,f,c
  7331  002936  501B               	movf	get_clust@dir+1,w,c
  7332  002938  22DA               	addwfc	fsr2h,f,c
  7333  00293A  50DF               	movf	indf2,w,c
  7334  00293C  6E21               	movwf	(??_get_clust+3)& (0+255),c
  7335  00293E  5021               	movf	??_get_clust+3,w,c
  7336  002940  101F               	iorwf	??_get_clust+1,w,c
  7337  002942  6E22               	movwf	(??_get_clust+4)& (0+255),c
  7338  002944  5020               	movf	??_get_clust+2,w,c
  7339  002946  6E23               	movwf	(??_get_clust+5)& (0+255),c
  7340  002948  6A24               	clrf	(??_get_clust+6)& (0+255),c
  7341  00294A  6A25               	clrf	(??_get_clust+7)& (0+255),c
  7342  00294C  5022               	movf	??_get_clust+4,w,c
  7343  00294E  1228               	iorwf	get_clust@clst,f,c
  7344  002950  5023               	movf	??_get_clust+5,w,c
  7345  002952  1229               	iorwf	get_clust@clst+1,f,c
  7346  002954  5024               	movf	??_get_clust+6,w,c
  7347  002956  122A               	iorwf	get_clust@clst+2,f,c
  7348  002958  5025               	movf	??_get_clust+7,w,c
  7349  00295A  122B               	iorwf	get_clust@clst+3,f,c
  7350                           
  7351                           ;pff.c: 428: return clst;
  7352  00295C  C028  F01A         	movff	get_clust@clst,?_get_clust
  7353  002960  C029  F01B         	movff	get_clust@clst+1,?_get_clust+1
  7354  002964  C02A  F01C         	movff	get_clust@clst+2,?_get_clust+2
  7355  002968  C02B  F01D         	movff	get_clust@clst+3,?_get_clust+3
  7356  00296C  0012               	return	
  7357  00296E                     __end_of_get_clust:
  7358                           	opt stack 0
  7359                           tosu	equ	0xFFF
  7360                           tosh	equ	0xFFE
  7361                           tosl	equ	0xFFD
  7362                           pclath	equ	0xFFA
  7363                           tblptru	equ	0xFF8
  7364                           tblptrh	equ	0xFF7
  7365                           tblptrl	equ	0xFF6
  7366                           tablat	equ	0xFF5
  7367                           prodh	equ	0xFF4
  7368                           prodl	equ	0xFF3
  7369                           intcon	equ	0xFF2
  7370                           intcon2	equ	0xFF1
  7371                           intcon3	equ	0xFF0
  7372                           postinc0	equ	0xFEE
  7373                           wreg	equ	0xFE8
  7374                           indf1	equ	0xFE7
  7375                           postinc1	equ	0xFE6
  7376                           postdec1	equ	0xFE5
  7377                           fsr1h	equ	0xFE2
  7378                           fsr1l	equ	0xFE1
  7379                           indf2	equ	0xFDF
  7380                           postinc2	equ	0xFDE
  7381                           postdec2	equ	0xFDD
  7382                           plusw2	equ	0xFDB
  7383                           fsr2h	equ	0xFDA
  7384                           fsr2l	equ	0xFD9
  7385                           status	equ	0xFD8
  7386                           
  7387 ;; *************** function _dir_find *****************
  7388 ;; Defined at:
  7389 ;;		line 510 in file "bibliotecas/pff.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;  dj              2   71[BANK0 ] PTR struct .
  7392 ;;		 -> pf_open@dj(16), 
  7393 ;;  dir             2   73[BANK0 ] PTR unsigned char 
  7394 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;  res             1   78[BANK0 ] enum E43
  7397 ;;  c               1   77[BANK0 ] unsigned char 
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  1    wreg      enum E43
  7400 ;; Registers used:
  7401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7407 ;;      Params:         0       4       0       0       0       0       0       0       0
  7408 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7409 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7410 ;;      Totals:         0       8       0       0       0       0       0       0       0
  7411 ;;Total ram usage:        8 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:    8
  7414 ;; This function calls:
  7415 ;;		_dir_next
  7416 ;;		_dir_rewind
  7417 ;;		_disk_readp
  7418 ;;		_mem_cmp
  7419 ;; This function is called by:
  7420 ;;		_follow_path
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           	psect	text31
  7425  0026DA                     __ptext31:
  7426                           	opt stack 0
  7427  0026DA                     _dir_find:
  7428                           	opt stack 18
  7429                           
  7430                           ;pff.c: 515: FRESULT res;
  7431                           ;pff.c: 516: BYTE c;
  7432                           ;pff.c: 519: res = dir_rewind(dj);
  7433                           
  7434                           ;incstack = 0
  7435  0026DA  C0A7  F02C         	movff	dir_find@dj,dir_rewind@dj
  7436  0026DE  C0A8  F02D         	movff	dir_find@dj+1,dir_rewind@dj+1
  7437  0026E2  ECBB  F011         	call	_dir_rewind	;wreg free
  7438  0026E6  0100               	movlb	0	; () banked
  7439  0026E8  6FAE               	movwf	dir_find@res& (0+255),b
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;pff.c: 520: if (res != FR_OK) return res;
  7443  0026EA  51AE               	movf	dir_find@res& (0+255),w,b
  7444  0026EC  B4D8               	btfsc	status,2,c
  7445  0026EE  D002               	goto	l696
  7446                           
  7447                           ; BSR set to: 0
  7448  0026F0  51AE               	movf	dir_find@res& (0+255),w,b
  7449                           
  7450                           ; BSR set to: 0
  7451  0026F2  0012               	return	
  7452  0026F4                     l696:
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;pff.c: 523: res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)
  7456                           ;pff.c: 524: ? FR_DISK_ERR : FR_OK;
  7457                           
  7458                           ; BSR set to: 0
  7459                           
  7460                           ;pff.c: 522: do {
  7461                           
  7462                           ; BSR set to: 0
  7463  0026F4  C0A9  F060         	movff	dir_find@dir,disk_readp@rd
  7464  0026F8  C0AA  F061         	movff	dir_find@dir+1,disk_readp@rd+1
  7465  0026FC  EE20 F00C          	lfsr	2,12
  7466  002700  51A7               	movf	dir_find@dj& (0+255),w,b
  7467  002702  26D9               	addwf	fsr2l,f,c
  7468  002704  51A8               	movf	(dir_find@dj+1)& (0+255),w,b
  7469  002706  22DA               	addwfc	fsr2h,f,c
  7470  002708  CFDE F062          	movff	postinc2,disk_readp@sector
  7471  00270C  CFDE F063          	movff	postinc2,disk_readp@sector+1
  7472  002710  CFDE F064          	movff	postinc2,disk_readp@sector+2
  7473  002714  CFDE F065          	movff	postinc2,disk_readp@sector+3
  7474  002718  C0A7  FFD9         	movff	dir_find@dj,fsr2l
  7475  00271C  C0A8  FFDA         	movff	dir_find@dj+1,fsr2h
  7476  002720  CFDE F0AB          	movff	postinc2,??_dir_find
  7477  002724  CFDD F0AC          	movff	postdec2,??_dir_find+1
  7478  002728  0E0F               	movlw	15
  7479  00272A  17AB               	andwf	??_dir_find& (0+255),f,b
  7480  00272C  0E00               	movlw	0
  7481  00272E  17AC               	andwf	(??_dir_find+1)& (0+255),f,b
  7482  002730  0E05               	movlw	5
  7483  002732                     u9555:
  7484  002732  90D8               	bcf	status,0,c
  7485  002734  37AB               	rlcf	??_dir_find& (0+255),f,b
  7486  002736  37AC               	rlcf	(??_dir_find+1)& (0+255),f,b
  7487  002738  2EE8               	decfsz	wreg,f,c
  7488  00273A  D7FB               	goto	u9555
  7489  00273C  C0AB  F066         	movff	??_dir_find,disk_readp@offset
  7490  002740  C0AC  F067         	movff	??_dir_find+1,disk_readp@offset+1
  7491  002744  0E00               	movlw	0
  7492  002746  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  7493  002748  0E20               	movlw	32
  7494  00274A  6F68               	movwf	disk_readp@count& (0+255),b
  7495  00274C  EC3E  F009         	call	_disk_readp	;wreg free
  7496  002750  0900               	iorlw	0
  7497  002752  B4D8               	btfsc	status,2,c
  7498  002754  D002               	goto	u9560
  7499  002756  0E01               	movlw	1
  7500  002758  D001               	goto	u9570
  7501  00275A                     u9560:
  7502  00275A  0E00               	movlw	0
  7503  00275C                     u9570:
  7504  00275C  0100               	movlb	0	; () banked
  7505  00275E  6FAE               	movwf	dir_find@res& (0+255),b
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;pff.c: 525: if (res != FR_OK) break;
  7509  002760  51AE               	movf	dir_find@res& (0+255),w,b
  7510  002762  A4D8               	btfss	status,2,c
  7511  002764  D037               	goto	u9620
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;pff.c: 526: c = dir[0];
  7515                           
  7516                           ; BSR set to: 0
  7517                           
  7518                           ; BSR set to: 0
  7519  002766  C0A9  FFD9         	movff	dir_find@dir,fsr2l
  7520  00276A  C0AA  FFDA         	movff	dir_find@dir+1,fsr2h
  7521  00276E  50DF               	movf	indf2,w,c
  7522  002770  6FAD               	movwf	dir_find@c& (0+255),b
  7523                           
  7524                           ; BSR set to: 0
  7525                           ;pff.c: 527: if (c == 0) { res = FR_NO_FILE; break; }
  7526  002772  51AD               	movf	dir_find@c& (0+255),w,b
  7527  002774  A4D8               	btfss	status,2,c
  7528  002776  D003               	goto	l701
  7529                           
  7530                           ; BSR set to: 0
  7531  002778  0E03               	movlw	3
  7532  00277A  6FAE               	movwf	dir_find@res& (0+255),b
  7533  00277C  D02B               	goto	u9620
  7534  00277E                     l701:
  7535                           
  7536                           ; BSR set to: 0
  7537                           ;pff.c: 528: if (!(dir[11] & 0x08) && !mem_cmp(dir, dj->fn, 11))
  7538                           
  7539                           ; BSR set to: 0
  7540  00277E  EE20 F00B          	lfsr	2,11
  7541  002782  51A9               	movf	dir_find@dir& (0+255),w,b
  7542  002784  26D9               	addwf	fsr2l,f,c
  7543  002786  51AA               	movf	(dir_find@dir+1)& (0+255),w,b
  7544  002788  22DA               	addwfc	fsr2h,f,c
  7545  00278A  B6DF               	btfsc	indf2,3,c
  7546  00278C  D018               	goto	l702
  7547                           
  7548                           ; BSR set to: 0
  7549  00278E  C0A9  F01A         	movff	dir_find@dir,mem_cmp@dst
  7550  002792  C0AA  F01B         	movff	dir_find@dir+1,mem_cmp@dst+1
  7551  002796  EE20 F002          	lfsr	2,2
  7552  00279A  51A7               	movf	dir_find@dj& (0+255),w,b
  7553  00279C  26D9               	addwf	fsr2l,f,c
  7554  00279E  51A8               	movf	(dir_find@dj+1)& (0+255),w,b
  7555  0027A0  22DA               	addwfc	fsr2h,f,c
  7556  0027A2  CFDE F01C          	movff	postinc2,mem_cmp@src
  7557  0027A6  CFDD F01D          	movff	postdec2,mem_cmp@src+1
  7558  0027AA  0E00               	movlw	0
  7559  0027AC  6E1F               	movwf	mem_cmp@cnt+1,c
  7560  0027AE  0E0B               	movlw	11
  7561  0027B0  6E1E               	movwf	mem_cmp@cnt,c
  7562  0027B2  ECB0  F017         	call	_mem_cmp	;wreg free
  7563  0027B6  501A               	movf	?_mem_cmp,w,c
  7564  0027B8  101B               	iorwf	?_mem_cmp+1,w,c
  7565  0027BA  B4D8               	btfsc	status,2,c
  7566  0027BC  D00B               	goto	u9620
  7567  0027BE                     l702:
  7568                           
  7569                           ;pff.c: 530: res = dir_next(dj);
  7570  0027BE  C0A7  F096         	movff	dir_find@dj,dir_next@dj
  7571  0027C2  C0A8  F097         	movff	dir_find@dj+1,dir_next@dj+1
  7572  0027C6  EC40  F00C         	call	_dir_next	;wreg free
  7573  0027CA  0100               	movlb	0	; () banked
  7574  0027CC  6FAE               	movwf	dir_find@res& (0+255),b
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;pff.c: 531: } while (res == FR_OK);
  7578  0027CE  51AE               	movf	dir_find@res& (0+255),w,b
  7579  0027D0  B4D8               	btfsc	status,2,c
  7580  0027D2  D790               	goto	l696
  7581  0027D4                     u9620:
  7582                           
  7583                           ;pff.c: 533: return res;
  7584                           
  7585                           ; BSR set to: 0
  7586  0027D4  0100               	movlb	0	; () banked
  7587  0027D6  51AE               	movf	dir_find@res& (0+255),w,b
  7588  0027D8  0012               	return	
  7589  0027DA                     __end_of_dir_find:
  7590                           	opt stack 0
  7591                           tosu	equ	0xFFF
  7592                           tosh	equ	0xFFE
  7593                           tosl	equ	0xFFD
  7594                           pclath	equ	0xFFA
  7595                           tblptru	equ	0xFF8
  7596                           tblptrh	equ	0xFF7
  7597                           tblptrl	equ	0xFF6
  7598                           tablat	equ	0xFF5
  7599                           prodh	equ	0xFF4
  7600                           prodl	equ	0xFF3
  7601                           intcon	equ	0xFF2
  7602                           intcon2	equ	0xFF1
  7603                           intcon3	equ	0xFF0
  7604                           postinc0	equ	0xFEE
  7605                           wreg	equ	0xFE8
  7606                           indf1	equ	0xFE7
  7607                           postinc1	equ	0xFE6
  7608                           postdec1	equ	0xFE5
  7609                           fsr1h	equ	0xFE2
  7610                           fsr1l	equ	0xFE1
  7611                           indf2	equ	0xFDF
  7612                           postinc2	equ	0xFDE
  7613                           postdec2	equ	0xFDD
  7614                           plusw2	equ	0xFDB
  7615                           fsr2h	equ	0xFDA
  7616                           fsr2l	equ	0xFD9
  7617                           status	equ	0xFD8
  7618                           
  7619 ;; *************** function _mem_cmp *****************
  7620 ;; Defined at:
  7621 ;;		line 336 in file "bibliotecas/pff.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;  dst             2   25[COMRAM] PTR const void 
  7624 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  7625 ;;  src             2   27[COMRAM] PTR const void 
  7626 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  7627 ;;  cnt             2   29[COMRAM] int 
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;  r               2   38[COMRAM] int 
  7630 ;;  s               2   36[COMRAM] PTR const unsigned char 
  7631 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  7632 ;;  d               2   34[COMRAM] PTR const unsigned char 
  7633 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  7634 ;; Return value:  Size  Location     Type
  7635 ;;                  2   25[COMRAM] int 
  7636 ;; Registers used:
  7637 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7643 ;;      Params:         6       0       0       0       0       0       0       0       0
  7644 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7645 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7646 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7647 ;;Total ram usage:       15 bytes
  7648 ;; Hardware stack levels used:    1
  7649 ;; Hardware stack levels required when called:    2
  7650 ;; This function calls:
  7651 ;;		Nothing
  7652 ;; This function is called by:
  7653 ;;		_dir_find
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           	psect	text32
  7658  002F60                     __ptext32:
  7659                           	opt stack 0
  7660  002F60                     _mem_cmp:
  7661                           	opt stack 23
  7662                           
  7663                           ;pff.c: 337: const char *d = (const char *)dst, *s = (const char *)src;
  7664                           
  7665                           ; BSR set to: 0
  7666                           ;incstack = 0
  7667  002F60  C01A  F023         	movff	mem_cmp@dst,mem_cmp@d
  7668  002F64  C01B  F024         	movff	mem_cmp@dst+1,mem_cmp@d+1
  7669  002F68  C01C  F025         	movff	mem_cmp@src,mem_cmp@s
  7670  002F6C  C01D  F026         	movff	mem_cmp@src+1,mem_cmp@s+1
  7671                           
  7672                           ;pff.c: 338: int r = 0;
  7673  002F70  0E00               	movlw	0
  7674  002F72  6E28               	movwf	mem_cmp@r+1,c
  7675  002F74  0E00               	movlw	0
  7676  002F76  6E27               	movwf	mem_cmp@r,c
  7677  002F78  061E               	decf	mem_cmp@cnt,f,c
  7678  002F7A  A0D8               	btfss	status,0,c
  7679  002F7C  061F               	decf	mem_cmp@cnt+1,f,c
  7680  002F7E  281E               	incf	mem_cmp@cnt,w,c
  7681  002F80  E103               	bnz	u9220
  7682  002F82  281F               	incf	mem_cmp@cnt+1,w,c
  7683  002F84  B4D8               	btfsc	status,2,c
  7684  002F86  D01F               	goto	u9230
  7685  002F88                     u9220:
  7686  002F88  C025  FFD9         	movff	mem_cmp@s,fsr2l
  7687  002F8C  C026  FFDA         	movff	mem_cmp@s+1,fsr2h
  7688  002F90  4A25               	infsnz	mem_cmp@s,f,c
  7689  002F92  2A26               	incf	mem_cmp@s+1,f,c
  7690  002F94  50DF               	movf	indf2,w,c
  7691  002F96  6E20               	movwf	??_mem_cmp& (0+255),c
  7692  002F98  6A21               	clrf	(??_mem_cmp+1)& (0+255),c
  7693  002F9A  1E20               	comf	??_mem_cmp,f,c
  7694  002F9C  1E21               	comf	??_mem_cmp+1,f,c
  7695  002F9E  4A20               	infsnz	??_mem_cmp,f,c
  7696  002FA0  2A21               	incf	??_mem_cmp+1,f,c
  7697  002FA2  C023  FFD9         	movff	mem_cmp@d,fsr2l
  7698  002FA6  C024  FFDA         	movff	mem_cmp@d+1,fsr2h
  7699  002FAA  4A23               	infsnz	mem_cmp@d,f,c
  7700  002FAC  2A24               	incf	mem_cmp@d+1,f,c
  7701  002FAE  50DF               	movf	indf2,w,c
  7702  002FB0  6E22               	movwf	(??_mem_cmp+2)& (0+255),c
  7703  002FB2  5022               	movf	??_mem_cmp+2,w,c
  7704  002FB4  2420               	addwf	??_mem_cmp,w,c
  7705  002FB6  6E27               	movwf	mem_cmp@r,c
  7706  002FB8  0E00               	movlw	0
  7707  002FBA  2021               	addwfc	??_mem_cmp+1,w,c
  7708  002FBC  6E28               	movwf	mem_cmp@r+1,c
  7709  002FBE  5027               	movf	mem_cmp@r,w,c
  7710  002FC0  1028               	iorwf	mem_cmp@r+1,w,c
  7711  002FC2  B4D8               	btfsc	status,2,c
  7712  002FC4  D7D9               	goto	l631
  7713  002FC6                     u9230:
  7714                           
  7715                           ;pff.c: 340: return r;
  7716  002FC6  C027  F01A         	movff	mem_cmp@r,?_mem_cmp
  7717  002FCA  C028  F01B         	movff	mem_cmp@r+1,?_mem_cmp+1
  7718  002FCE  0012               	return		;funcret
  7719  002FD0                     __end_of_mem_cmp:
  7720                           	opt stack 0
  7721                           tosu	equ	0xFFF
  7722                           tosh	equ	0xFFE
  7723                           tosl	equ	0xFFD
  7724                           pclath	equ	0xFFA
  7725                           tblptru	equ	0xFF8
  7726                           tblptrh	equ	0xFF7
  7727                           tblptrl	equ	0xFF6
  7728                           tablat	equ	0xFF5
  7729                           prodh	equ	0xFF4
  7730                           prodl	equ	0xFF3
  7731                           intcon	equ	0xFF2
  7732                           intcon2	equ	0xFF1
  7733                           intcon3	equ	0xFF0
  7734                           postinc0	equ	0xFEE
  7735                           wreg	equ	0xFE8
  7736                           indf1	equ	0xFE7
  7737                           postinc1	equ	0xFE6
  7738                           postdec1	equ	0xFE5
  7739                           fsr1h	equ	0xFE2
  7740                           fsr1l	equ	0xFE1
  7741                           indf2	equ	0xFDF
  7742                           postinc2	equ	0xFDE
  7743                           postdec2	equ	0xFDD
  7744                           plusw2	equ	0xFDB
  7745                           fsr2h	equ	0xFDA
  7746                           fsr2l	equ	0xFD9
  7747                           status	equ	0xFD8
  7748                           
  7749 ;; *************** function _dir_rewind *****************
  7750 ;; Defined at:
  7751 ;;		line 437 in file "bibliotecas/pff.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  dj              2   43[COMRAM] PTR struct .
  7754 ;;		 -> pf_open@dj(16), 
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;  clst            4   15[BANK0 ] unsigned long 
  7757 ;;  fs              2   13[BANK0 ] PTR struct .
  7758 ;;		 -> SDCard@fs(42), NULL(0), 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  1    wreg      enum E43
  7761 ;; Registers used:
  7762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7768 ;;      Params:         2       0       0       0       0       0       0       0       0
  7769 ;;      Locals:         0      10       0       0       0       0       0       0       0
  7770 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7771 ;;      Totals:         2      14       0       0       0       0       0       0       0
  7772 ;;Total ram usage:       16 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    4
  7775 ;; This function calls:
  7776 ;;		_clust2sect
  7777 ;; This function is called by:
  7778 ;;		_dir_find
  7779 ;;		_follow_path
  7780 ;;		_pf_opendir
  7781 ;;		_pf_readdir
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           	psect	text33
  7786  002376                     __ptext33:
  7787                           	opt stack 0
  7788  002376                     _dir_rewind:
  7789                           	opt stack 22
  7790                           
  7791                           ;pff.c: 441: DWORD clst;
  7792                           ;pff.c: 442: FATFS *fs = FatFs;
  7793                           
  7794                           ;incstack = 0
  7795  002376  C037  F06D         	movff	_FatFs,dir_rewind@fs
  7796  00237A  C038  F06E         	movff	_FatFs+1,dir_rewind@fs+1
  7797                           
  7798                           ;pff.c: 445: dj->index = 0;
  7799  00237E  C02C  FFD9         	movff	dir_rewind@dj,fsr2l
  7800  002382  C02D  FFDA         	movff	dir_rewind@dj+1,fsr2h
  7801  002386  0E00               	movlw	0
  7802  002388  6EDE               	movwf	postinc2,c
  7803  00238A  0E00               	movlw	0
  7804  00238C  6EDD               	movwf	postdec2,c
  7805                           
  7806                           ;pff.c: 446: clst = dj->sclust;
  7807  00238E  EE20 F004          	lfsr	2,4
  7808  002392  502C               	movf	dir_rewind@dj,w,c
  7809  002394  26D9               	addwf	fsr2l,f,c
  7810  002396  502D               	movf	dir_rewind@dj+1,w,c
  7811  002398  22DA               	addwfc	fsr2h,f,c
  7812  00239A  CFDE F06F          	movff	postinc2,dir_rewind@clst
  7813  00239E  CFDE F070          	movff	postinc2,dir_rewind@clst+1
  7814  0023A2  CFDE F071          	movff	postinc2,dir_rewind@clst+2
  7815  0023A6  CFDE F072          	movff	postinc2,dir_rewind@clst+3
  7816                           
  7817                           ;pff.c: 447: if (clst == 1 || clst >= fs->n_fatent)
  7818  0023AA  0100               	movlb	0	; () banked
  7819  0023AC  056F               	decf	dir_rewind@clst& (0+255),w,b
  7820  0023AE  1170               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7821  0023B0  1171               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7822  0023B2  1172               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7823  0023B4  B4D8               	btfsc	status,2,c
  7824  0023B6  D010               	goto	u9250
  7825                           
  7826                           ; BSR set to: 0
  7827  0023B8  EE20 F006          	lfsr	2,6
  7828  0023BC  516D               	movf	dir_rewind@fs& (0+255),w,b
  7829  0023BE  26D9               	addwf	fsr2l,f,c
  7830  0023C0  516E               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7831  0023C2  22DA               	addwfc	fsr2h,f,c
  7832  0023C4  50DE               	movf	postinc2,w,c
  7833  0023C6  5D6F               	subwf	dir_rewind@clst& (0+255),w,b
  7834  0023C8  50DE               	movf	postinc2,w,c
  7835  0023CA  5970               	subwfb	(dir_rewind@clst+1)& (0+255),w,b
  7836  0023CC  50DE               	movf	postinc2,w,c
  7837  0023CE  5971               	subwfb	(dir_rewind@clst+2)& (0+255),w,b
  7838  0023D0  50DE               	movf	postinc2,w,c
  7839  0023D2  5972               	subwfb	(dir_rewind@clst+3)& (0+255),w,b
  7840  0023D4  A0D8               	btfss	status,0,c
  7841  0023D6  D002               	goto	l670
  7842  0023D8                     u9250:
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;pff.c: 448: return FR_DISK_ERR;
  7846                           
  7847                           ; BSR set to: 0
  7848  0023D8  0E01               	movlw	1
  7849                           
  7850                           ; BSR set to: 0
  7851  0023DA  0012               	return	
  7852  0023DC                     l670:
  7853                           
  7854                           ; BSR set to: 0
  7855                           
  7856                           ; BSR set to: 0
  7857  0023DC  516F               	movf	dir_rewind@clst& (0+255),w,b
  7858  0023DE  1170               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7859  0023E0  1171               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7860  0023E2  1172               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7861  0023E4  A4D8               	btfss	status,2,c
  7862  0023E6  D016               	goto	l674
  7863                           
  7864                           ; BSR set to: 0
  7865  0023E8  C06D  FFD9         	movff	dir_rewind@fs,fsr2l
  7866  0023EC  C06E  FFDA         	movff	dir_rewind@fs+1,fsr2h
  7867  0023F0  0E03               	movlw	3
  7868  0023F2  18DE               	xorwf	postinc2,w,c
  7869  0023F4  A4D8               	btfss	status,2,c
  7870  0023F6  D00E               	goto	l674
  7871                           
  7872                           ; BSR set to: 0
  7873                           ;pff.c: 450: clst = (DWORD)fs->dirbase;
  7874                           
  7875                           ; BSR set to: 0
  7876  0023F8  EE20 F00E          	lfsr	2,14
  7877  0023FC  516D               	movf	dir_rewind@fs& (0+255),w,b
  7878  0023FE  26D9               	addwf	fsr2l,f,c
  7879  002400  516E               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7880  002402  22DA               	addwfc	fsr2h,f,c
  7881  002404  CFDE F06F          	movff	postinc2,dir_rewind@clst
  7882  002408  CFDE F070          	movff	postinc2,dir_rewind@clst+1
  7883  00240C  CFDE F071          	movff	postinc2,dir_rewind@clst+2
  7884  002410  CFDE F072          	movff	postinc2,dir_rewind@clst+3
  7885  002414                     l674:
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;pff.c: 452: dj->sect = (0 || clst) ? clust2sect(clst) : fs->dirbase;
  7889  002414  EE20 F008          	lfsr	2,8
  7890  002418  502C               	movf	dir_rewind@dj,w,c
  7891  00241A  26D9               	addwf	fsr2l,f,c
  7892  00241C  502D               	movf	dir_rewind@dj+1,w,c
  7893  00241E  22DA               	addwfc	fsr2h,f,c
  7894  002420  C06F  FFDE         	movff	dir_rewind@clst,postinc2
  7895  002424  C070  FFDE         	movff	dir_rewind@clst+1,postinc2
  7896  002428  C071  FFDE         	movff	dir_rewind@clst+2,postinc2
  7897  00242C  C072  FFDE         	movff	dir_rewind@clst+3,postinc2
  7898                           
  7899                           ; BSR set to: 0
  7900  002430  516F               	movf	dir_rewind@clst& (0+255),w,b
  7901  002432  1170               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7902  002434  1171               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7903  002436  1172               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7904  002438  A4D8               	btfss	status,2,c
  7905  00243A  D00F               	goto	l678
  7906                           
  7907                           ; BSR set to: 0
  7908  00243C  EE20 F00E          	lfsr	2,14
  7909  002440  516D               	movf	dir_rewind@fs& (0+255),w,b
  7910  002442  26D9               	addwf	fsr2l,f,c
  7911  002444  516E               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7912  002446  22DA               	addwfc	fsr2h,f,c
  7913  002448  CFDE F069          	movff	postinc2,_dir_rewind$1692
  7914  00244C  CFDE F06A          	movff	postinc2,_dir_rewind$1692+1
  7915  002450  CFDE F06B          	movff	postinc2,_dir_rewind$1692+2
  7916  002454  CFDE F06C          	movff	postinc2,_dir_rewind$1692+3
  7917  002458  D012               	goto	l680
  7918  00245A                     l678:
  7919                           
  7920                           ; BSR set to: 0
  7921                           
  7922                           ; BSR set to: 0
  7923  00245A  C06F  F026         	movff	dir_rewind@clst,clust2sect@clst
  7924  00245E  C070  F027         	movff	dir_rewind@clst+1,clust2sect@clst+1
  7925  002462  C071  F028         	movff	dir_rewind@clst+2,clust2sect@clst+2
  7926  002466  C072  F029         	movff	dir_rewind@clst+3,clust2sect@clst+3
  7927  00246A  ECB7  F014         	call	_clust2sect	;wreg free
  7928  00246E  C026  F069         	movff	?_clust2sect,_dir_rewind$1692
  7929  002472  C027  F06A         	movff	?_clust2sect+1,_dir_rewind$1692+1
  7930  002476  C028  F06B         	movff	?_clust2sect+2,_dir_rewind$1692+2
  7931  00247A  C029  F06C         	movff	?_clust2sect+3,_dir_rewind$1692+3
  7932  00247E                     l680:
  7933  00247E  EE20 F00C          	lfsr	2,12
  7934  002482  502C               	movf	dir_rewind@dj,w,c
  7935  002484  26D9               	addwf	fsr2l,f,c
  7936  002486  502D               	movf	dir_rewind@dj+1,w,c
  7937  002488  22DA               	addwfc	fsr2h,f,c
  7938  00248A  C069  FFDE         	movff	_dir_rewind$1692,postinc2
  7939  00248E  C06A  FFDE         	movff	_dir_rewind$1692+1,postinc2
  7940  002492  C06B  FFDE         	movff	_dir_rewind$1692+2,postinc2
  7941  002496  C06C  FFDE         	movff	_dir_rewind$1692+3,postinc2
  7942                           
  7943                           ;pff.c: 454: return FR_OK;
  7944  00249A  0E00               	movlw	0
  7945  00249C  0012               	return	
  7946  00249E                     __end_of_dir_rewind:
  7947                           	opt stack 0
  7948                           tosu	equ	0xFFF
  7949                           tosh	equ	0xFFE
  7950                           tosl	equ	0xFFD
  7951                           pclath	equ	0xFFA
  7952                           tblptru	equ	0xFF8
  7953                           tblptrh	equ	0xFF7
  7954                           tblptrl	equ	0xFF6
  7955                           tablat	equ	0xFF5
  7956                           prodh	equ	0xFF4
  7957                           prodl	equ	0xFF3
  7958                           intcon	equ	0xFF2
  7959                           intcon2	equ	0xFF1
  7960                           intcon3	equ	0xFF0
  7961                           postinc0	equ	0xFEE
  7962                           wreg	equ	0xFE8
  7963                           indf1	equ	0xFE7
  7964                           postinc1	equ	0xFE6
  7965                           postdec1	equ	0xFE5
  7966                           fsr1h	equ	0xFE2
  7967                           fsr1l	equ	0xFE1
  7968                           indf2	equ	0xFDF
  7969                           postinc2	equ	0xFDE
  7970                           postdec2	equ	0xFDD
  7971                           plusw2	equ	0xFDB
  7972                           fsr2h	equ	0xFDA
  7973                           fsr2l	equ	0xFD9
  7974                           status	equ	0xFD8
  7975                           
  7976 ;; *************** function _dir_next *****************
  7977 ;; Defined at:
  7978 ;;		line 465 in file "bibliotecas/pff.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;  dj              2   54[BANK0 ] PTR struct .
  7981 ;;		 -> pf_open@dj(16), 
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;  clst            4   65[BANK0 ] unsigned long 
  7984 ;;  i               2   69[BANK0 ] unsigned short 
  7985 ;;  fs              2   63[BANK0 ] PTR struct .
  7986 ;;		 -> SDCard@fs(42), NULL(0), 
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  1    wreg      enum E43
  7989 ;; Registers used:
  7990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7991 ;; Tracked objects:
  7992 ;;		On entry : 0/0
  7993 ;;		On exit  : 0/0
  7994 ;;		Unchanged: 0/0
  7995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7996 ;;      Params:         0       2       0       0       0       0       0       0       0
  7997 ;;      Locals:         0       8       0       0       0       0       0       0       0
  7998 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7999 ;;      Totals:         0      17       0       0       0       0       0       0       0
  8000 ;;Total ram usage:       17 bytes
  8001 ;; Hardware stack levels used:    1
  8002 ;; Hardware stack levels required when called:    7
  8003 ;; This function calls:
  8004 ;;		_clust2sect
  8005 ;;		_get_fat
  8006 ;; This function is called by:
  8007 ;;		_dir_find
  8008 ;;		_dir_read
  8009 ;;		_pf_readdir
  8010 ;; This function uses a non-reentrant model
  8011 ;;
  8012                           
  8013                           	psect	text34
  8014  001880                     __ptext34:
  8015                           	opt stack 0
  8016  001880                     _dir_next:
  8017                           	opt stack 18
  8018                           
  8019                           ;pff.c: 469: DWORD clst;
  8020                           ;pff.c: 470: WORD i;
  8021                           ;pff.c: 471: FATFS *fs = FatFs;
  8022                           
  8023                           ;incstack = 0
  8024  001880  C037  F09F         	movff	_FatFs,dir_next@fs
  8025  001884  C038  F0A0         	movff	_FatFs+1,dir_next@fs+1
  8026                           
  8027                           ;pff.c: 474: i = dj->index + 1;
  8028  001888  C096  FFD9         	movff	dir_next@dj,fsr2l
  8029  00188C  C097  FFDA         	movff	dir_next@dj+1,fsr2h
  8030  001890  CFDE F098          	movff	postinc2,??_dir_next
  8031  001894  CFDD F099          	movff	postdec2,??_dir_next+1
  8032  001898  0E01               	movlw	1
  8033  00189A  0100               	movlb	0	; () banked
  8034  00189C  2598               	addwf	??_dir_next& (0+255),w,b
  8035  00189E  6FA5               	movwf	dir_next@i& (0+255),b
  8036  0018A0  0E00               	movlw	0
  8037  0018A2  2199               	addwfc	(??_dir_next+1)& (0+255),w,b
  8038  0018A4  6FA6               	movwf	(dir_next@i+1)& (0+255),b
  8039                           
  8040                           ; BSR set to: 0
  8041                           ;pff.c: 475: if (!i || !dj->sect)
  8042  0018A6  51A5               	movf	dir_next@i& (0+255),w,b
  8043  0018A8  11A6               	iorwf	(dir_next@i+1)& (0+255),w,b
  8044  0018AA  B4D8               	btfsc	status,2,c
  8045  0018AC  D00C               	goto	u9300
  8046                           
  8047                           ; BSR set to: 0
  8048  0018AE  EE20 F00C          	lfsr	2,12
  8049  0018B2  5196               	movf	dir_next@dj& (0+255),w,b
  8050  0018B4  26D9               	addwf	fsr2l,f,c
  8051  0018B6  5197               	movf	(dir_next@dj+1)& (0+255),w,b
  8052  0018B8  22DA               	addwfc	fsr2h,f,c
  8053  0018BA  50DE               	movf	postinc2,w,c
  8054  0018BC  10DE               	iorwf	postinc2,w,c
  8055  0018BE  10DE               	iorwf	postinc2,w,c
  8056  0018C0  10DE               	iorwf	postinc2,w,c
  8057  0018C2  A4D8               	btfss	status,2,c
  8058  0018C4  D002               	goto	l683
  8059  0018C6                     u9300:
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;pff.c: 476: return FR_NO_FILE;
  8063                           
  8064                           ; BSR set to: 0
  8065  0018C6  0E03               	movlw	3
  8066                           
  8067                           ; BSR set to: 0
  8068  0018C8  0012               	return	
  8069  0018CA                     l683:
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;pff.c: 478: if (!(i % 16)) {
  8073                           
  8074                           ; BSR set to: 0
  8075  0018CA  0E0F               	movlw	15
  8076  0018CC  15A5               	andwf	dir_next@i& (0+255),w,b
  8077  0018CE  6F98               	movwf	??_dir_next& (0+255),b
  8078  0018D0  0E00               	movlw	0
  8079  0018D2  15A6               	andwf	(dir_next@i+1)& (0+255),w,b
  8080  0018D4  6F99               	movwf	(??_dir_next+1)& (0+255),b
  8081  0018D6  5198               	movf	??_dir_next& (0+255),w,b
  8082  0018D8  1199               	iorwf	(??_dir_next+1)& (0+255),w,b
  8083  0018DA  A4D8               	btfss	status,2,c
  8084  0018DC  D0A5               	goto	l691
  8085                           
  8086                           ; BSR set to: 0
  8087                           ;pff.c: 479: dj->sect++;
  8088  0018DE  EE20 F00C          	lfsr	2,12
  8089  0018E2  5196               	movf	dir_next@dj& (0+255),w,b
  8090  0018E4  26D9               	addwf	fsr2l,f,c
  8091  0018E6  5197               	movf	(dir_next@dj+1)& (0+255),w,b
  8092  0018E8  22DA               	addwfc	fsr2h,f,c
  8093  0018EA  2ADE               	incf	postinc2,f,c
  8094  0018EC  0E00               	movlw	0
  8095  0018EE  22DE               	addwfc	postinc2,f,c
  8096  0018F0  22DE               	addwfc	postinc2,f,c
  8097  0018F2  22DE               	addwfc	postinc2,f,c
  8098                           
  8099                           ;pff.c: 481: if (dj->clust == 0) {
  8100  0018F4  EE20 F008          	lfsr	2,8
  8101  0018F8  5196               	movf	dir_next@dj& (0+255),w,b
  8102  0018FA  26D9               	addwf	fsr2l,f,c
  8103  0018FC  5197               	movf	(dir_next@dj+1)& (0+255),w,b
  8104  0018FE  22DA               	addwfc	fsr2h,f,c
  8105  001900  50DE               	movf	postinc2,w,c
  8106  001902  10DE               	iorwf	postinc2,w,c
  8107  001904  10DE               	iorwf	postinc2,w,c
  8108  001906  10DE               	iorwf	postinc2,w,c
  8109  001908  A4D8               	btfss	status,2,c
  8110  00190A  D00E               	goto	l688
  8111                           
  8112                           ; BSR set to: 0
  8113                           ;pff.c: 482: if (i >= fs->n_rootdir)
  8114  00190C  EE20 F004          	lfsr	2,4
  8115  001910  519F               	movf	dir_next@fs& (0+255),w,b
  8116  001912  26D9               	addwf	fsr2l,f,c
  8117  001914  51A0               	movf	(dir_next@fs+1)& (0+255),w,b
  8118  001916  22DA               	addwfc	fsr2h,f,c
  8119  001918  50DE               	movf	postinc2,w,c
  8120  00191A  5DA5               	subwf	dir_next@i& (0+255),w,b
  8121  00191C  50DE               	movf	postinc2,w,c
  8122  00191E  59A6               	subwfb	(dir_next@i+1)& (0+255),w,b
  8123  001920  A0D8               	btfss	status,0,c
  8124  001922  D082               	goto	l691
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;pff.c: 483: return FR_NO_FILE;
  8128  001924  0E03               	movlw	3
  8129                           
  8130                           ; BSR set to: 0
  8131  001926  0012               	return	
  8132  001928                     l688:
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;pff.c: 485: else {
  8136                           ;pff.c: 486: if (((i / 16) & (fs->csize - 1)) == 0) {
  8137                           
  8138                           ; BSR set to: 0
  8139  001928  C0A5  F098         	movff	dir_next@i,??_dir_next
  8140  00192C  C0A6  F099         	movff	dir_next@i+1,??_dir_next+1
  8141  001930  0E04               	movlw	4
  8142  001932  6F9A               	movwf	(??_dir_next+2)& (0+255),b
  8143  001934                     u9345:
  8144  001934  90D8               	bcf	status,0,c
  8145  001936  3399               	rrcf	(??_dir_next+1)& (0+255),f,b
  8146  001938  3398               	rrcf	??_dir_next& (0+255),f,b
  8147  00193A  2F9A               	decfsz	(??_dir_next+2)& (0+255),f,b
  8148  00193C  D7FB               	goto	u9345
  8149  00193E  0EFF               	movlw	255
  8150  001940  6F9B               	movwf	(??_dir_next+3)& (0+255),b
  8151  001942  0EFF               	movlw	255
  8152  001944  6F9C               	movwf	(??_dir_next+4)& (0+255),b
  8153  001946  EE20 F002          	lfsr	2,2
  8154  00194A  519F               	movf	dir_next@fs& (0+255),w,b
  8155  00194C  26D9               	addwf	fsr2l,f,c
  8156  00194E  51A0               	movf	(dir_next@fs+1)& (0+255),w,b
  8157  001950  22DA               	addwfc	fsr2h,f,c
  8158  001952  50DF               	movf	indf2,w,c
  8159  001954  6F9D               	movwf	(??_dir_next+5)& (0+255),b
  8160  001956  6B9E               	clrf	(??_dir_next+6)& (0+255),b
  8161  001958  519B               	movf	(??_dir_next+3)& (0+255),w,b
  8162  00195A  279D               	addwf	(??_dir_next+5)& (0+255),f,b
  8163  00195C  519C               	movf	(??_dir_next+4)& (0+255),w,b
  8164  00195E  239E               	addwfc	(??_dir_next+6)& (0+255),f,b
  8165  001960  5198               	movf	??_dir_next& (0+255),w,b
  8166  001962  179D               	andwf	(??_dir_next+5)& (0+255),f,b
  8167  001964  5199               	movf	(??_dir_next+1)& (0+255),w,b
  8168  001966  179E               	andwf	(??_dir_next+6)& (0+255),f,b
  8169  001968  519D               	movf	(??_dir_next+5)& (0+255),w,b
  8170  00196A  119E               	iorwf	(??_dir_next+6)& (0+255),w,b
  8171  00196C  A4D8               	btfss	status,2,c
  8172  00196E  D05C               	goto	l691
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;pff.c: 487: clst = get_fat(dj->clust);
  8176  001970  EE20 F008          	lfsr	2,8
  8177  001974  5196               	movf	dir_next@dj& (0+255),w,b
  8178  001976  26D9               	addwf	fsr2l,f,c
  8179  001978  5197               	movf	(dir_next@dj+1)& (0+255),w,b
  8180  00197A  22DA               	addwfc	fsr2h,f,c
  8181  00197C  CFDE F02A          	movff	postinc2,get_fat@clst
  8182  001980  CFDE F02B          	movff	postinc2,get_fat@clst+1
  8183  001984  CFDE F02C          	movff	postinc2,get_fat@clst+2
  8184  001988  CFDE F02D          	movff	postinc2,get_fat@clst+3
  8185  00198C  EC82  F005         	call	_get_fat	;wreg free
  8186  001990  C02A  F0A1         	movff	?_get_fat,dir_next@clst
  8187  001994  C02B  F0A2         	movff	?_get_fat+1,dir_next@clst+1
  8188  001998  C02C  F0A3         	movff	?_get_fat+2,dir_next@clst+2
  8189  00199C  C02D  F0A4         	movff	?_get_fat+3,dir_next@clst+3
  8190                           
  8191                           ;pff.c: 488: if (clst <= 1) return FR_DISK_ERR;
  8192  0019A0  0100               	movlb	0	; () banked
  8193  0019A2  51A4               	movf	(dir_next@clst+3)& (0+255),w,b
  8194  0019A4  11A3               	iorwf	(dir_next@clst+2)& (0+255),w,b
  8195  0019A6  11A2               	iorwf	(dir_next@clst+1)& (0+255),w,b
  8196  0019A8  E106               	bnz	l8402
  8197  0019AA  0E02               	movlw	2
  8198  0019AC  5DA1               	subwf	dir_next@clst& (0+255),w,b
  8199  0019AE  B0D8               	btfsc	status,0,c
  8200  0019B0  D002               	goto	l692
  8201                           
  8202                           ; BSR set to: 0
  8203  0019B2  0E01               	movlw	1
  8204                           
  8205                           ; BSR set to: 0
  8206  0019B4  0012               	return	
  8207  0019B6                     l692:
  8208  0019B6                     l8402:
  8209                           
  8210                           ; BSR set to: 0
  8211                           ;pff.c: 489: if (clst >= fs->n_fatent)
  8212  0019B6  EE20 F006          	lfsr	2,6
  8213  0019BA  519F               	movf	dir_next@fs& (0+255),w,b
  8214  0019BC  26D9               	addwf	fsr2l,f,c
  8215  0019BE  51A0               	movf	(dir_next@fs+1)& (0+255),w,b
  8216  0019C0  22DA               	addwfc	fsr2h,f,c
  8217  0019C2  50DE               	movf	postinc2,w,c
  8218  0019C4  5DA1               	subwf	dir_next@clst& (0+255),w,b
  8219  0019C6  50DE               	movf	postinc2,w,c
  8220  0019C8  59A2               	subwfb	(dir_next@clst+1)& (0+255),w,b
  8221  0019CA  50DE               	movf	postinc2,w,c
  8222  0019CC  59A3               	subwfb	(dir_next@clst+2)& (0+255),w,b
  8223  0019CE  50DE               	movf	postinc2,w,c
  8224  0019D0  59A4               	subwfb	(dir_next@clst+3)& (0+255),w,b
  8225  0019D2  A0D8               	btfss	status,0,c
  8226  0019D4  D002               	goto	l693
  8227                           
  8228                           ; BSR set to: 0
  8229                           ;pff.c: 490: return FR_NO_FILE;
  8230  0019D6  0E03               	movlw	3
  8231                           
  8232                           ; BSR set to: 0
  8233  0019D8  0012               	return	
  8234  0019DA                     l693:
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;pff.c: 491: dj->clust = clst;
  8238                           
  8239                           ; BSR set to: 0
  8240  0019DA  EE20 F008          	lfsr	2,8
  8241  0019DE  5196               	movf	dir_next@dj& (0+255),w,b
  8242  0019E0  26D9               	addwf	fsr2l,f,c
  8243  0019E2  5197               	movf	(dir_next@dj+1)& (0+255),w,b
  8244  0019E4  22DA               	addwfc	fsr2h,f,c
  8245  0019E6  C0A1  FFDE         	movff	dir_next@clst,postinc2
  8246  0019EA  C0A2  FFDE         	movff	dir_next@clst+1,postinc2
  8247  0019EE  C0A3  FFDE         	movff	dir_next@clst+2,postinc2
  8248  0019F2  C0A4  FFDE         	movff	dir_next@clst+3,postinc2
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;pff.c: 492: dj->sect = clust2sect(clst);
  8252  0019F6  C0A1  F026         	movff	dir_next@clst,clust2sect@clst
  8253  0019FA  C0A2  F027         	movff	dir_next@clst+1,clust2sect@clst+1
  8254  0019FE  C0A3  F028         	movff	dir_next@clst+2,clust2sect@clst+2
  8255  001A02  C0A4  F029         	movff	dir_next@clst+3,clust2sect@clst+3
  8256  001A06  ECB7  F014         	call	_clust2sect	;wreg free
  8257  001A0A  0100               	movlb	0	; () banked
  8258  001A0C  EE20 F00C          	lfsr	2,12
  8259  001A10  5196               	movf	dir_next@dj& (0+255),w,b
  8260  001A12  26D9               	addwf	fsr2l,f,c
  8261  001A14  5197               	movf	(dir_next@dj+1)& (0+255),w,b
  8262  001A16  22DA               	addwfc	fsr2h,f,c
  8263  001A18  C026  FFDE         	movff	?_clust2sect,postinc2
  8264  001A1C  C027  FFDE         	movff	?_clust2sect+1,postinc2
  8265  001A20  C028  FFDE         	movff	?_clust2sect+2,postinc2
  8266  001A24  C029  FFDE         	movff	?_clust2sect+3,postinc2
  8267  001A28                     l691:
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;pff.c: 493: }
  8271                           ;pff.c: 494: }
  8272                           ;pff.c: 495: }
  8273                           ;pff.c: 497: dj->index = i;
  8274                           
  8275                           ; BSR set to: 0
  8276                           
  8277                           ; BSR set to: 0
  8278                           
  8279                           ; BSR set to: 0
  8280  001A28  C096  FFD9         	movff	dir_next@dj,fsr2l
  8281  001A2C  C097  FFDA         	movff	dir_next@dj+1,fsr2h
  8282  001A30  C0A5  FFDE         	movff	dir_next@i,postinc2
  8283  001A34  C0A6  FFDD         	movff	dir_next@i+1,postdec2
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;pff.c: 499: return FR_OK;
  8287  001A38  0E00               	movlw	0
  8288  001A3A  0012               	return	
  8289  001A3C                     __end_of_dir_next:
  8290                           	opt stack 0
  8291                           tosu	equ	0xFFF
  8292                           tosh	equ	0xFFE
  8293                           tosl	equ	0xFFD
  8294                           pclath	equ	0xFFA
  8295                           tblptru	equ	0xFF8
  8296                           tblptrh	equ	0xFF7
  8297                           tblptrl	equ	0xFF6
  8298                           tablat	equ	0xFF5
  8299                           prodh	equ	0xFF4
  8300                           prodl	equ	0xFF3
  8301                           intcon	equ	0xFF2
  8302                           intcon2	equ	0xFF1
  8303                           intcon3	equ	0xFF0
  8304                           postinc0	equ	0xFEE
  8305                           wreg	equ	0xFE8
  8306                           indf1	equ	0xFE7
  8307                           postinc1	equ	0xFE6
  8308                           postdec1	equ	0xFE5
  8309                           fsr1h	equ	0xFE2
  8310                           fsr1l	equ	0xFE1
  8311                           indf2	equ	0xFDF
  8312                           postinc2	equ	0xFDE
  8313                           postdec2	equ	0xFDD
  8314                           plusw2	equ	0xFDB
  8315                           fsr2h	equ	0xFDA
  8316                           fsr2l	equ	0xFD9
  8317                           status	equ	0xFD8
  8318                           
  8319 ;; *************** function _get_fat *****************
  8320 ;; Defined at:
  8321 ;;		line 350 in file "bibliotecas/pff.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;  clst            4   41[COMRAM] unsigned long 
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;  bc              2   50[BANK0 ] unsigned int 
  8326 ;;  ofs             2   44[BANK0 ] unsigned int 
  8327 ;;  wc              2   42[BANK0 ] unsigned int 
  8328 ;;  buf             4   46[BANK0 ] unsigned char [4]
  8329 ;;  fs              2   52[BANK0 ] PTR struct .
  8330 ;;		 -> SDCard@fs(42), NULL(0), 
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  4   41[COMRAM] unsigned long 
  8333 ;; Registers used:
  8334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8340 ;;      Params:         4       0       0       0       0       0       0       0       0
  8341 ;;      Locals:         0      14       0       0       0       0       0       0       0
  8342 ;;      Temps:          0      22       0       0       0       0       0       0       0
  8343 ;;      Totals:         4      36       0       0       0       0       0       0       0
  8344 ;;Total ram usage:       40 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:    6
  8347 ;; This function calls:
  8348 ;;		_disk_readp
  8349 ;; This function is called by:
  8350 ;;		_dir_next
  8351 ;;		_pf_read
  8352 ;;		_pf_write
  8353 ;;		_pf_lseek
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           	psect	text35
  8358  000B04                     __ptext35:
  8359                           	opt stack 0
  8360  000B04                     _get_fat:
  8361                           	opt stack 21
  8362                           
  8363                           ;pff.c: 354: BYTE buf[4];
  8364                           ;pff.c: 355: FATFS *fs = FatFs;
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;incstack = 0
  8368  000B04  C037  F094         	movff	_FatFs,get_fat@fs
  8369  000B08  C038  F095         	movff	_FatFs+1,get_fat@fs+1
  8370                           
  8371                           ;pff.c: 357: if (clst < 2 || clst >= fs->n_fatent)
  8372  000B0C  502D               	movf	get_fat@clst+3,w,c
  8373  000B0E  102C               	iorwf	get_fat@clst+2,w,c
  8374  000B10  102B               	iorwf	get_fat@clst+1,w,c
  8375  000B12  E104               	bnz	u9080
  8376  000B14  0E02               	movlw	2
  8377  000B16  5C2A               	subwf	get_fat@clst,w,c
  8378  000B18  A0D8               	btfss	status,0,c
  8379  000B1A  D011               	goto	u9090
  8380  000B1C                     u9080:
  8381  000B1C  0100               	movlb	0	; () banked
  8382  000B1E  EE20 F006          	lfsr	2,6
  8383  000B22  5194               	movf	get_fat@fs& (0+255),w,b
  8384  000B24  26D9               	addwf	fsr2l,f,c
  8385  000B26  5195               	movf	(get_fat@fs+1)& (0+255),w,b
  8386  000B28  22DA               	addwfc	fsr2h,f,c
  8387  000B2A  50DE               	movf	postinc2,w,c
  8388  000B2C  5C2A               	subwf	get_fat@clst,w,c
  8389  000B2E  50DE               	movf	postinc2,w,c
  8390  000B30  582B               	subwfb	get_fat@clst+1,w,c
  8391  000B32  50DE               	movf	postinc2,w,c
  8392  000B34  582C               	subwfb	get_fat@clst+2,w,c
  8393  000B36  50DE               	movf	postinc2,w,c
  8394  000B38  582D               	subwfb	get_fat@clst+3,w,c
  8395  000B3A  A0D8               	btfss	status,0,c
  8396  000B3C  D1C0               	goto	l642
  8397  000B3E                     u9090:
  8398                           
  8399                           ;pff.c: 358: return 1;
  8400                           
  8401                           ; BSR set to: 0
  8402  000B3E  0E01               	movlw	1
  8403  000B40  6E2A               	movwf	?_get_fat,c
  8404  000B42  0E00               	movlw	0
  8405  000B44  6E2B               	movwf	?_get_fat+1,c
  8406  000B46  0E00               	movlw	0
  8407  000B48  6E2C               	movwf	?_get_fat+2,c
  8408  000B4A  0E00               	movlw	0
  8409  000B4C  6E2D               	movwf	?_get_fat+3,c
  8410  000B4E  0012               	return	
  8411  000B50                     l643:
  8412                           
  8413                           ;pff.c: 363: UINT wc, bc, ofs;
  8414                           ;pff.c: 365: bc = (UINT)clst; bc += bc / 2;
  8415  000B50  C02A  F092         	movff	get_fat@clst,get_fat@bc
  8416  000B54  C02B  F093         	movff	get_fat@clst+1,get_fat@bc+1
  8417  000B58  90D8               	bcf	status,0,c
  8418  000B5A  0100               	movlb	0	; () banked
  8419  000B5C  3193               	rrcf	(get_fat@bc+1)& (0+255),w,b
  8420  000B5E  6F73               	movwf	(??_get_fat+1)& (0+255),b
  8421  000B60  3192               	rrcf	get_fat@bc& (0+255),w,b
  8422  000B62  6F72               	movwf	??_get_fat& (0+255),b
  8423  000B64  5172               	movf	??_get_fat& (0+255),w,b
  8424  000B66  2792               	addwf	get_fat@bc& (0+255),f,b
  8425  000B68  5173               	movf	(??_get_fat+1)& (0+255),w,b
  8426  000B6A  2393               	addwfc	(get_fat@bc+1)& (0+255),f,b
  8427                           
  8428                           ;pff.c: 366: ofs = bc % 512; bc /= 512;
  8429  000B6C  0EFF               	movlw	255
  8430  000B6E  1592               	andwf	get_fat@bc& (0+255),w,b
  8431  000B70  6F8C               	movwf	get_fat@ofs& (0+255),b
  8432  000B72  0E01               	movlw	1
  8433  000B74  1593               	andwf	(get_fat@bc+1)& (0+255),w,b
  8434  000B76  6F8D               	movwf	(get_fat@ofs+1)& (0+255),b
  8435  000B78  0E09               	movlw	9
  8436  000B7A  6F72               	movwf	??_get_fat& (0+255),b
  8437  000B7C                     u9105:
  8438  000B7C  90D8               	bcf	status,0,c
  8439  000B7E  3393               	rrcf	(get_fat@bc+1)& (0+255),f,b
  8440  000B80  3392               	rrcf	get_fat@bc& (0+255),f,b
  8441  000B82  2F72               	decfsz	??_get_fat& (0+255),f,b
  8442  000B84  D7FB               	goto	u9105
  8443                           
  8444                           ;pff.c: 367: if (ofs != 511) {
  8445  000B86  298C               	incf	get_fat@ofs& (0+255),w,b
  8446  000B88  E103               	bnz	u9110
  8447  000B8A  058D               	decf	(get_fat@ofs+1)& (0+255),w,b
  8448  000B8C  B4D8               	btfsc	status,2,c
  8449  000B8E  D02C               	goto	l644
  8450  000B90                     u9110:
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;pff.c: 368: if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
  8454  000B90  0E8E               	movlw	low get_fat@buf
  8455  000B92  6F60               	movwf	disk_readp@rd& (0+255),b
  8456  000B94  0E00               	movlw	high get_fat@buf
  8457  000B96  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8458  000B98  EE20 F00A          	lfsr	2,10
  8459  000B9C  5194               	movf	get_fat@fs& (0+255),w,b
  8460  000B9E  26D9               	addwf	fsr2l,f,c
  8461  000BA0  5195               	movf	(get_fat@fs+1)& (0+255),w,b
  8462  000BA2  22DA               	addwfc	fsr2h,f,c
  8463  000BA4  CFDE F072          	movff	postinc2,??_get_fat
  8464  000BA8  CFDE F073          	movff	postinc2,??_get_fat+1
  8465  000BAC  CFDE F074          	movff	postinc2,??_get_fat+2
  8466  000BB0  CFDE F075          	movff	postinc2,??_get_fat+3
  8467  000BB4  5192               	movf	get_fat@bc& (0+255),w,b
  8468  000BB6  2572               	addwf	??_get_fat& (0+255),w,b
  8469  000BB8  6F62               	movwf	disk_readp@sector& (0+255),b
  8470  000BBA  5193               	movf	(get_fat@bc+1)& (0+255),w,b
  8471  000BBC  2173               	addwfc	(??_get_fat+1)& (0+255),w,b
  8472  000BBE  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8473  000BC0  0E00               	movlw	0
  8474  000BC2  2174               	addwfc	(??_get_fat+2)& (0+255),w,b
  8475  000BC4  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8476  000BC6  0E00               	movlw	0
  8477  000BC8  2175               	addwfc	(??_get_fat+3)& (0+255),w,b
  8478  000BCA  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8479  000BCC  C08C  F066         	movff	get_fat@ofs,disk_readp@offset
  8480  000BD0  C08D  F067         	movff	get_fat@ofs+1,disk_readp@offset+1
  8481  000BD4  0E00               	movlw	0
  8482  000BD6  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8483  000BD8  0E02               	movlw	2
  8484  000BDA  6F68               	movwf	disk_readp@count& (0+255),b
  8485  000BDC  EC3E  F009         	call	_disk_readp	;wreg free
  8486  000BE0  0900               	iorlw	0
  8487  000BE2  A4D8               	btfss	status,2,c
  8488  000BE4  D17A               	goto	l646
  8489  000BE6  D061               	goto	l649
  8490  000BE8                     l644:
  8491                           
  8492                           ;pff.c: 370: if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
  8493  000BE8  0E8E               	movlw	low get_fat@buf
  8494  000BEA  0100               	movlb	0	; () banked
  8495  000BEC  6F60               	movwf	disk_readp@rd& (0+255),b
  8496  000BEE  0E00               	movlw	high get_fat@buf
  8497  000BF0  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8498  000BF2  EE20 F00A          	lfsr	2,10
  8499  000BF6  5194               	movf	get_fat@fs& (0+255),w,b
  8500  000BF8  26D9               	addwf	fsr2l,f,c
  8501  000BFA  5195               	movf	(get_fat@fs+1)& (0+255),w,b
  8502  000BFC  22DA               	addwfc	fsr2h,f,c
  8503  000BFE  CFDE F072          	movff	postinc2,??_get_fat
  8504  000C02  CFDE F073          	movff	postinc2,??_get_fat+1
  8505  000C06  CFDE F074          	movff	postinc2,??_get_fat+2
  8506  000C0A  CFDE F075          	movff	postinc2,??_get_fat+3
  8507  000C0E  5192               	movf	get_fat@bc& (0+255),w,b
  8508  000C10  2572               	addwf	??_get_fat& (0+255),w,b
  8509  000C12  6F62               	movwf	disk_readp@sector& (0+255),b
  8510  000C14  5193               	movf	(get_fat@bc+1)& (0+255),w,b
  8511  000C16  2173               	addwfc	(??_get_fat+1)& (0+255),w,b
  8512  000C18  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8513  000C1A  0E00               	movlw	0
  8514  000C1C  2174               	addwfc	(??_get_fat+2)& (0+255),w,b
  8515  000C1E  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8516  000C20  0E00               	movlw	0
  8517  000C22  2175               	addwfc	(??_get_fat+3)& (0+255),w,b
  8518  000C24  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8519  000C26  0E01               	movlw	1
  8520  000C28  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  8521  000C2A  6966               	setf	disk_readp@offset& (0+255),b
  8522  000C2C  0E00               	movlw	0
  8523  000C2E  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8524  000C30  0E01               	movlw	1
  8525  000C32  6F68               	movwf	disk_readp@count& (0+255),b
  8526  000C34  EC3E  F009         	call	_disk_readp	;wreg free
  8527  000C38  0900               	iorlw	0
  8528  000C3A  A4D8               	btfss	status,2,c
  8529  000C3C  D14E               	goto	l646
  8530                           
  8531                           ;pff.c: 371: if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
  8532  000C3E  0E8F               	movlw	low (get_fat@buf+1)
  8533  000C40  0100               	movlb	0	; () banked
  8534  000C42  6F60               	movwf	disk_readp@rd& (0+255),b
  8535  000C44  0E00               	movlw	high (get_fat@buf+1)
  8536  000C46  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8537  000C48  EE20 F00A          	lfsr	2,10
  8538  000C4C  5194               	movf	get_fat@fs& (0+255),w,b
  8539  000C4E  26D9               	addwf	fsr2l,f,c
  8540  000C50  5195               	movf	(get_fat@fs+1)& (0+255),w,b
  8541  000C52  22DA               	addwfc	fsr2h,f,c
  8542  000C54  CFDE F072          	movff	postinc2,??_get_fat
  8543  000C58  CFDE F073          	movff	postinc2,??_get_fat+1
  8544  000C5C  CFDE F074          	movff	postinc2,??_get_fat+2
  8545  000C60  CFDE F075          	movff	postinc2,??_get_fat+3
  8546  000C64  5192               	movf	get_fat@bc& (0+255),w,b
  8547  000C66  2572               	addwf	??_get_fat& (0+255),w,b
  8548  000C68  6F76               	movwf	(??_get_fat+4)& (0+255),b
  8549  000C6A  5193               	movf	(get_fat@bc+1)& (0+255),w,b
  8550  000C6C  2173               	addwfc	(??_get_fat+1)& (0+255),w,b
  8551  000C6E  6F77               	movwf	(??_get_fat+5)& (0+255),b
  8552  000C70  0E00               	movlw	0
  8553  000C72  2174               	addwfc	(??_get_fat+2)& (0+255),w,b
  8554  000C74  6F78               	movwf	(??_get_fat+6)& (0+255),b
  8555  000C76  0E00               	movlw	0
  8556  000C78  2175               	addwfc	(??_get_fat+3)& (0+255),w,b
  8557  000C7A  6F79               	movwf	(??_get_fat+7)& (0+255),b
  8558  000C7C  0E01               	movlw	1
  8559  000C7E  2576               	addwf	(??_get_fat+4)& (0+255),w,b
  8560  000C80  6F62               	movwf	disk_readp@sector& (0+255),b
  8561  000C82  0E00               	movlw	0
  8562  000C84  2177               	addwfc	(??_get_fat+5)& (0+255),w,b
  8563  000C86  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8564  000C88  0E00               	movlw	0
  8565  000C8A  2178               	addwfc	(??_get_fat+6)& (0+255),w,b
  8566  000C8C  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8567  000C8E  0E00               	movlw	0
  8568  000C90  2179               	addwfc	(??_get_fat+7)& (0+255),w,b
  8569  000C92  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8570  000C94  0E00               	movlw	0
  8571  000C96  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  8572  000C98  0E00               	movlw	0
  8573  000C9A  6F66               	movwf	disk_readp@offset& (0+255),b
  8574  000C9C  0E00               	movlw	0
  8575  000C9E  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8576  000CA0  0E01               	movlw	1
  8577  000CA2  6F68               	movwf	disk_readp@count& (0+255),b
  8578  000CA4  EC3E  F009         	call	_disk_readp	;wreg free
  8579  000CA8  D79B               	goto	L4
  8580  000CAA                     l649:
  8581                           
  8582                           ;pff.c: 372: }
  8583                           ;pff.c: 373: wc = (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  8584  000CAA  0100               	movlb	0	; () banked
  8585  000CAC  518F               	movf	(get_fat@buf+1)& (0+255),w,b
  8586  000CAE  6F72               	movwf	??_get_fat& (0+255),b
  8587  000CB0  518E               	movf	get_fat@buf& (0+255),w,b
  8588  000CB2  6F8A               	movwf	get_fat@wc& (0+255),b
  8589  000CB4  C072  F08B         	movff	??_get_fat,get_fat@wc+1
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;pff.c: 374: return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  8593  000CB8  B02A               	btfsc	get_fat@clst,0,c
  8594  000CBA  D007               	goto	l651
  8595                           
  8596                           ; BSR set to: 0
  8597  000CBC  0EFF               	movlw	255
  8598  000CBE  158A               	andwf	get_fat@wc& (0+255),w,b
  8599  000CC0  6F88               	movwf	_get_fat$1632& (0+255),b
  8600  000CC2  0E0F               	movlw	15
  8601  000CC4  158B               	andwf	(get_fat@wc+1)& (0+255),w,b
  8602  000CC6  6F89               	movwf	(_get_fat$1632+1)& (0+255),b
  8603  000CC8  D00F               	goto	l653
  8604  000CCA                     l651:
  8605                           
  8606                           ; BSR set to: 0
  8607                           
  8608                           ; BSR set to: 0
  8609  000CCA  C08A  F072         	movff	get_fat@wc,??_get_fat
  8610  000CCE  C08B  F073         	movff	get_fat@wc+1,??_get_fat+1
  8611  000CD2  0E04               	movlw	4
  8612  000CD4  6F74               	movwf	(??_get_fat+2)& (0+255),b
  8613  000CD6                     u9165:
  8614  000CD6  90D8               	bcf	status,0,c
  8615  000CD8  3373               	rrcf	(??_get_fat+1)& (0+255),f,b
  8616  000CDA  3372               	rrcf	??_get_fat& (0+255),f,b
  8617  000CDC  2F74               	decfsz	(??_get_fat+2)& (0+255),f,b
  8618  000CDE  D7FB               	goto	u9165
  8619  000CE0  C072  F088         	movff	??_get_fat,_get_fat$1632
  8620  000CE4  C073  F089         	movff	??_get_fat+1,_get_fat$1632+1
  8621  000CE8                     l653:
  8622                           
  8623                           ; BSR set to: 0
  8624                           
  8625                           ; BSR set to: 0
  8626  000CE8  C088  F02A         	movff	_get_fat$1632,?_get_fat
  8627  000CEC  C089  F02B         	movff	_get_fat$1632+1,?_get_fat+1
  8628  000CF0  6A2C               	clrf	?_get_fat+2,c
  8629  000CF2  6A2D               	clrf	?_get_fat+3,c
  8630                           
  8631                           ; BSR set to: 0
  8632  000CF4  0012               	return	
  8633  000CF6                     
  8634                           ;pff.c: 379: if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) b
      +                          reak;
  8635                           
  8636                           ; BSR set to: 0
  8637  000CF6  0E8E               	movlw	low get_fat@buf
  8638  000CF8  0100               	movlb	0	; () banked
  8639  000CFA  6F60               	movwf	disk_readp@rd& (0+255),b
  8640  000CFC  0E00               	movlw	high get_fat@buf
  8641  000CFE  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8642  000D00  EE20 F00A          	lfsr	2,10
  8643  000D04  5194               	movf	get_fat@fs& (0+255),w,b
  8644  000D06  26D9               	addwf	fsr2l,f,c
  8645  000D08  5195               	movf	(get_fat@fs+1)& (0+255),w,b
  8646  000D0A  22DA               	addwfc	fsr2h,f,c
  8647  000D0C  CFDE F072          	movff	postinc2,??_get_fat
  8648  000D10  CFDE F073          	movff	postinc2,??_get_fat+1
  8649  000D14  CFDE F074          	movff	postinc2,??_get_fat+2
  8650  000D18  CFDE F075          	movff	postinc2,??_get_fat+3
  8651  000D1C  C02A  F076         	movff	get_fat@clst,??_get_fat+4
  8652  000D20  C02B  F077         	movff	get_fat@clst+1,??_get_fat+5
  8653  000D24  C02C  F078         	movff	get_fat@clst+2,??_get_fat+6
  8654  000D28  C02D  F079         	movff	get_fat@clst+3,??_get_fat+7
  8655  000D2C  C077  F076         	movff	??_get_fat+5,??_get_fat+4
  8656  000D30  C078  F077         	movff	??_get_fat+6,??_get_fat+5
  8657  000D34  C079  F078         	movff	??_get_fat+7,??_get_fat+6
  8658  000D38  6B79               	clrf	(??_get_fat+7)& (0+255),b
  8659  000D3A  5172               	movf	??_get_fat& (0+255),w,b
  8660  000D3C  2576               	addwf	(??_get_fat+4)& (0+255),w,b
  8661  000D3E  6F62               	movwf	disk_readp@sector& (0+255),b
  8662  000D40  5173               	movf	(??_get_fat+1)& (0+255),w,b
  8663  000D42  2177               	addwfc	(??_get_fat+5)& (0+255),w,b
  8664  000D44  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8665  000D46  5174               	movf	(??_get_fat+2)& (0+255),w,b
  8666  000D48  2178               	addwfc	(??_get_fat+6)& (0+255),w,b
  8667  000D4A  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8668  000D4C  5175               	movf	(??_get_fat+3)& (0+255),w,b
  8669  000D4E  2179               	addwfc	(??_get_fat+7)& (0+255),w,b
  8670  000D50  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8671  000D52  0EFF               	movlw	255
  8672  000D54  142A               	andwf	get_fat@clst,w,c
  8673  000D56  6F7A               	movwf	(??_get_fat+8)& (0+255),b
  8674  000D58  0E00               	movlw	0
  8675  000D5A  142B               	andwf	get_fat@clst+1,w,c
  8676  000D5C  6F7B               	movwf	(??_get_fat+9)& (0+255),b
  8677  000D5E  90D8               	bcf	status,0,c
  8678  000D60  357A               	rlcf	(??_get_fat+8)& (0+255),w,b
  8679  000D62  6F66               	movwf	disk_readp@offset& (0+255),b
  8680  000D64  357B               	rlcf	(??_get_fat+9)& (0+255),w,b
  8681  000D66  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  8682  000D68  0E00               	movlw	0
  8683  000D6A  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8684  000D6C  0E02               	movlw	2
  8685  000D6E  6F68               	movwf	disk_readp@count& (0+255),b
  8686  000D70  EC3E  F009         	call	_disk_readp	;wreg free
  8687  000D74  0900               	iorlw	0
  8688  000D76  A4D8               	btfss	status,2,c
  8689  000D78  D0B0               	goto	l646
  8690                           
  8691                           ;pff.c: 380: return (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  8692  000D7A  0100               	movlb	0	; () banked
  8693  000D7C  518E               	movf	get_fat@buf& (0+255),w,b
  8694  000D7E  C08F  F072         	movff	get_fat@buf+1,??_get_fat
  8695  000D82  6B73               	clrf	(??_get_fat+1)& (0+255),b
  8696  000D84  C072  F073         	movff	??_get_fat,??_get_fat+1
  8697  000D88  6B72               	clrf	??_get_fat& (0+255),b
  8698  000D8A  1372               	iorwf	??_get_fat& (0+255),f,b
  8699  000D8C  0E00               	movlw	0
  8700  000D8E  1373               	iorwf	(??_get_fat+1)& (0+255),f,b
  8701  000D90  C072  F02A         	movff	??_get_fat,?_get_fat
  8702  000D94  C073  F02B         	movff	??_get_fat+1,?_get_fat+1
  8703  000D98  6A2C               	clrf	?_get_fat+2,c
  8704  000D9A  6A2D               	clrf	?_get_fat+3,c
  8705                           
  8706                           ; BSR set to: 0
  8707  000D9C  0012               	return	
  8708  000D9E                     
  8709                           ;pff.c: 384: if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) b
      +                          reak;
  8710                           
  8711                           ; BSR set to: 0
  8712  000D9E  0E8E               	movlw	low get_fat@buf
  8713  000DA0  0100               	movlb	0	; () banked
  8714  000DA2  6F60               	movwf	disk_readp@rd& (0+255),b
  8715  000DA4  0E00               	movlw	high get_fat@buf
  8716  000DA6  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8717  000DA8  EE20 F00A          	lfsr	2,10
  8718  000DAC  5194               	movf	get_fat@fs& (0+255),w,b
  8719  000DAE  26D9               	addwf	fsr2l,f,c
  8720  000DB0  5195               	movf	(get_fat@fs+1)& (0+255),w,b
  8721  000DB2  22DA               	addwfc	fsr2h,f,c
  8722  000DB4  CFDE F072          	movff	postinc2,??_get_fat
  8723  000DB8  CFDE F073          	movff	postinc2,??_get_fat+1
  8724  000DBC  CFDE F074          	movff	postinc2,??_get_fat+2
  8725  000DC0  CFDE F075          	movff	postinc2,??_get_fat+3
  8726  000DC4  C02A  F076         	movff	get_fat@clst,??_get_fat+4
  8727  000DC8  C02B  F077         	movff	get_fat@clst+1,??_get_fat+5
  8728  000DCC  C02C  F078         	movff	get_fat@clst+2,??_get_fat+6
  8729  000DD0  C02D  F079         	movff	get_fat@clst+3,??_get_fat+7
  8730  000DD4  0E08               	movlw	8
  8731  000DD6  D005               	goto	u9180
  8732  000DD8                     u9185:
  8733  000DD8  90D8               	bcf	status,0,c
  8734  000DDA  3379               	rrcf	(??_get_fat+7)& (0+255),f,b
  8735  000DDC  3378               	rrcf	(??_get_fat+6)& (0+255),f,b
  8736  000DDE  3377               	rrcf	(??_get_fat+5)& (0+255),f,b
  8737  000DE0  3376               	rrcf	(??_get_fat+4)& (0+255),f,b
  8738  000DE2                     u9180:
  8739  000DE2  2EE8               	decfsz	wreg,f,c
  8740  000DE4  D7F9               	goto	u9185
  8741  000DE6  5172               	movf	??_get_fat& (0+255),w,b
  8742  000DE8  2576               	addwf	(??_get_fat+4)& (0+255),w,b
  8743  000DEA  6F62               	movwf	disk_readp@sector& (0+255),b
  8744  000DEC  5173               	movf	(??_get_fat+1)& (0+255),w,b
  8745  000DEE  2177               	addwfc	(??_get_fat+5)& (0+255),w,b
  8746  000DF0  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8747  000DF2  5174               	movf	(??_get_fat+2)& (0+255),w,b
  8748  000DF4  2178               	addwfc	(??_get_fat+6)& (0+255),w,b
  8749  000DF6  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8750  000DF8  5175               	movf	(??_get_fat+3)& (0+255),w,b
  8751  000DFA  2179               	addwfc	(??_get_fat+7)& (0+255),w,b
  8752  000DFC  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8753  000DFE  0E7F               	movlw	127
  8754  000E00  142A               	andwf	get_fat@clst,w,c
  8755  000E02  6F7A               	movwf	(??_get_fat+8)& (0+255),b
  8756  000E04  0E00               	movlw	0
  8757  000E06  142B               	andwf	get_fat@clst+1,w,c
  8758  000E08  6F7B               	movwf	(??_get_fat+9)& (0+255),b
  8759  000E0A  90D8               	bcf	status,0,c
  8760  000E0C  377A               	rlcf	(??_get_fat+8)& (0+255),f,b
  8761  000E0E  377B               	rlcf	(??_get_fat+9)& (0+255),f,b
  8762  000E10  90D8               	bcf	status,0,c
  8763  000E12  377A               	rlcf	(??_get_fat+8)& (0+255),f,b
  8764  000E14  377B               	rlcf	(??_get_fat+9)& (0+255),f,b
  8765  000E16  C07A  F066         	movff	??_get_fat+8,disk_readp@offset
  8766  000E1A  C07B  F067         	movff	??_get_fat+9,disk_readp@offset+1
  8767  000E1E  0E00               	movlw	0
  8768  000E20  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8769  000E22  0E04               	movlw	4
  8770  000E24  6F68               	movwf	disk_readp@count& (0+255),b
  8771  000E26  EC3E  F009         	call	_disk_readp	;wreg free
  8772  000E2A  0900               	iorlw	0
  8773  000E2C  A4D8               	btfss	status,2,c
  8774  000E2E  D055               	goto	l646
  8775                           
  8776                           ;pff.c: 385: return (DWORD)(((DWORD)*((BYTE*)(buf)+3)<<24)|((DWORD)*((BYTE*)(buf)+2)<<16
      +                          )|((WORD)*((BYTE*)(buf)+1)<<8)|*(BYTE*)(buf)) & 0x0FFFFFFF;
  8777  000E30  0100               	movlb	0	; () banked
  8778  000E32  518F               	movf	(get_fat@buf+1)& (0+255),w,b
  8779  000E34  6F73               	movwf	(??_get_fat+1)& (0+255),b
  8780  000E36  6B72               	clrf	??_get_fat& (0+255),b
  8781  000E38  C090  F074         	movff	get_fat@buf+2,??_get_fat+2
  8782  000E3C  6B75               	clrf	(??_get_fat+3)& (0+255),b
  8783  000E3E  6B76               	clrf	(??_get_fat+4)& (0+255),b
  8784  000E40  6B77               	clrf	(??_get_fat+5)& (0+255),b
  8785  000E42  C075  F077         	movff	??_get_fat+3,??_get_fat+5
  8786  000E46  C074  F076         	movff	??_get_fat+2,??_get_fat+4
  8787  000E4A  6B75               	clrf	(??_get_fat+3)& (0+255),b
  8788  000E4C  6B74               	clrf	(??_get_fat+2)& (0+255),b
  8789  000E4E  C091  F078         	movff	get_fat@buf+3,??_get_fat+6
  8790  000E52  6B79               	clrf	(??_get_fat+7)& (0+255),b
  8791  000E54  6B7A               	clrf	(??_get_fat+8)& (0+255),b
  8792  000E56  6B7B               	clrf	(??_get_fat+9)& (0+255),b
  8793  000E58  C078  F07B         	movff	??_get_fat+6,??_get_fat+9
  8794  000E5C  6B7A               	clrf	(??_get_fat+8)& (0+255),b
  8795  000E5E  6B79               	clrf	(??_get_fat+7)& (0+255),b
  8796  000E60  6B78               	clrf	(??_get_fat+6)& (0+255),b
  8797  000E62  5174               	movf	(??_get_fat+2)& (0+255),w,b
  8798  000E64  1178               	iorwf	(??_get_fat+6)& (0+255),w,b
  8799  000E66  6F7C               	movwf	(??_get_fat+10)& (0+255),b
  8800  000E68  5175               	movf	(??_get_fat+3)& (0+255),w,b
  8801  000E6A  1179               	iorwf	(??_get_fat+7)& (0+255),w,b
  8802  000E6C  6F7D               	movwf	(??_get_fat+11)& (0+255),b
  8803  000E6E  5176               	movf	(??_get_fat+4)& (0+255),w,b
  8804  000E70  117A               	iorwf	(??_get_fat+8)& (0+255),w,b
  8805  000E72  6F7E               	movwf	(??_get_fat+12)& (0+255),b
  8806  000E74  5177               	movf	(??_get_fat+5)& (0+255),w,b
  8807  000E76  117B               	iorwf	(??_get_fat+9)& (0+255),w,b
  8808  000E78  6F7F               	movwf	(??_get_fat+13)& (0+255),b
  8809  000E7A  5172               	movf	??_get_fat& (0+255),w,b
  8810  000E7C  117C               	iorwf	(??_get_fat+10)& (0+255),w,b
  8811  000E7E  6F80               	movwf	(??_get_fat+14)& (0+255),b
  8812  000E80  5173               	movf	(??_get_fat+1)& (0+255),w,b
  8813  000E82  117D               	iorwf	(??_get_fat+11)& (0+255),w,b
  8814  000E84  6F81               	movwf	(??_get_fat+15)& (0+255),b
  8815  000E86  0E00               	movlw	0
  8816  000E88  117E               	iorwf	(??_get_fat+12)& (0+255),w,b
  8817  000E8A  6F82               	movwf	(??_get_fat+16)& (0+255),b
  8818  000E8C  0E00               	movlw	0
  8819  000E8E  117F               	iorwf	(??_get_fat+13)& (0+255),w,b
  8820  000E90  6F83               	movwf	(??_get_fat+17)& (0+255),b
  8821  000E92  518E               	movf	get_fat@buf& (0+255),w,b
  8822  000E94  1180               	iorwf	(??_get_fat+14)& (0+255),w,b
  8823  000E96  6F84               	movwf	(??_get_fat+18)& (0+255),b
  8824  000E98  5181               	movf	(??_get_fat+15)& (0+255),w,b
  8825  000E9A  6F85               	movwf	(??_get_fat+19)& (0+255),b
  8826  000E9C  5182               	movf	(??_get_fat+16)& (0+255),w,b
  8827  000E9E  6F86               	movwf	(??_get_fat+20)& (0+255),b
  8828  000EA0  5183               	movf	(??_get_fat+17)& (0+255),w,b
  8829  000EA2  6F87               	movwf	(??_get_fat+21)& (0+255),b
  8830  000EA4  0EFF               	movlw	255
  8831  000EA6  1584               	andwf	(??_get_fat+18)& (0+255),w,b
  8832  000EA8  6E2A               	movwf	?_get_fat,c
  8833  000EAA  0EFF               	movlw	255
  8834  000EAC  1585               	andwf	(??_get_fat+19)& (0+255),w,b
  8835  000EAE  6E2B               	movwf	?_get_fat+1,c
  8836  000EB0  0EFF               	movlw	255
  8837  000EB2  1586               	andwf	(??_get_fat+20)& (0+255),w,b
  8838  000EB4  6E2C               	movwf	?_get_fat+2,c
  8839  000EB6  0E0F               	movlw	15
  8840  000EB8  1587               	andwf	(??_get_fat+21)& (0+255),w,b
  8841  000EBA  6E2D               	movwf	?_get_fat+3,c
  8842                           
  8843                           ; BSR set to: 0
  8844  000EBC  0012               	return	
  8845  000EBE                     l642:
  8846                           
  8847                           ; BSR set to: 0
  8848  000EBE  C094  FFD9         	movff	get_fat@fs,fsr2l
  8849  000EC2  C095  FFDA         	movff	get_fat@fs+1,fsr2h
  8850  000EC6  50DF               	movf	indf2,w,c
  8851                           
  8852                           ; Switch size 1, requested type "space"
  8853                           ; Number of cases is 3, Range of values is 1 to 3
  8854                           ; switch strategies available:
  8855                           ; Name         Instructions Cycles
  8856                           ; simple_byte           10     6 (average)
  8857                           ;	Chosen strategy is simple_byte
  8858  000EC8  0A01               	xorlw	1	; case 1
  8859  000ECA  B4D8               	btfsc	status,2,c
  8860  000ECC  D641               	goto	l643
  8861  000ECE  0A03               	xorlw	3	; case 2
  8862  000ED0  B4D8               	btfsc	status,2,c
  8863  000ED2  D711               	goto	l654
  8864  000ED4  0A01               	xorlw	1	; case 3
  8865  000ED6  B4D8               	btfsc	status,2,c
  8866  000ED8  D762               	goto	l656
  8867  000EDA                     l646:
  8868                           
  8869                           ;pff.c: 389: return 1;
  8870  000EDA  0E01               	movlw	1
  8871  000EDC  6E2A               	movwf	?_get_fat,c
  8872  000EDE  0E00               	movlw	0
  8873  000EE0  6E2B               	movwf	?_get_fat+1,c
  8874  000EE2  0E00               	movlw	0
  8875  000EE4  6E2C               	movwf	?_get_fat+2,c
  8876  000EE6  0E00               	movlw	0
  8877  000EE8  6E2D               	movwf	?_get_fat+3,c
  8878  000EEA  0012               	return	
  8879  000EEC                     __end_of_get_fat:
  8880                           	opt stack 0
  8881                           tosu	equ	0xFFF
  8882                           tosh	equ	0xFFE
  8883                           tosl	equ	0xFFD
  8884                           pclath	equ	0xFFA
  8885                           tblptru	equ	0xFF8
  8886                           tblptrh	equ	0xFF7
  8887                           tblptrl	equ	0xFF6
  8888                           tablat	equ	0xFF5
  8889                           prodh	equ	0xFF4
  8890                           prodl	equ	0xFF3
  8891                           intcon	equ	0xFF2
  8892                           intcon2	equ	0xFF1
  8893                           intcon3	equ	0xFF0
  8894                           postinc0	equ	0xFEE
  8895                           wreg	equ	0xFE8
  8896                           indf1	equ	0xFE7
  8897                           postinc1	equ	0xFE6
  8898                           postdec1	equ	0xFE5
  8899                           fsr1h	equ	0xFE2
  8900                           fsr1l	equ	0xFE1
  8901                           indf2	equ	0xFDF
  8902                           postinc2	equ	0xFDE
  8903                           postdec2	equ	0xFDD
  8904                           plusw2	equ	0xFDB
  8905                           fsr2h	equ	0xFDA
  8906                           fsr2l	equ	0xFD9
  8907                           status	equ	0xFD8
  8908                           
  8909 ;; *************** function _clust2sect *****************
  8910 ;; Defined at:
  8911 ;;		line 400 in file "bibliotecas/pff.c"
  8912 ;; Parameters:    Size  Location     Type
  8913 ;;  clst            4   37[COMRAM] unsigned long 
  8914 ;; Auto vars:     Size  Location     Type
  8915 ;;  fs              2   41[COMRAM] PTR struct .
  8916 ;;		 -> SDCard@fs(42), NULL(0), 
  8917 ;; Return value:  Size  Location     Type
  8918 ;;                  4   37[COMRAM] unsigned long 
  8919 ;; Registers used:
  8920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8921 ;; Tracked objects:
  8922 ;;		On entry : 0/0
  8923 ;;		On exit  : 0/0
  8924 ;;		Unchanged: 0/0
  8925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8926 ;;      Params:         4       0       0       0       0       0       0       0       0
  8927 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8928 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8929 ;;      Totals:         6       5       0       0       0       0       0       0       0
  8930 ;;Total ram usage:       11 bytes
  8931 ;; Hardware stack levels used:    1
  8932 ;; Hardware stack levels required when called:    3
  8933 ;; This function calls:
  8934 ;;		___lmul
  8935 ;; This function is called by:
  8936 ;;		_dir_rewind
  8937 ;;		_dir_next
  8938 ;;		_pf_read
  8939 ;;		_pf_write
  8940 ;;		_pf_lseek
  8941 ;; This function uses a non-reentrant model
  8942 ;;
  8943                           
  8944                           	psect	text36
  8945  00296E                     __ptext36:
  8946                           	opt stack 0
  8947  00296E                     _clust2sect:
  8948                           	opt stack 24
  8949                           
  8950                           ;pff.c: 404: FATFS *fs = FatFs;
  8951                           
  8952                           ;incstack = 0
  8953  00296E  C037  F02A         	movff	_FatFs,clust2sect@fs
  8954  002972  C038  F02B         	movff	_FatFs+1,clust2sect@fs+1
  8955                           
  8956                           ;pff.c: 407: clst -= 2;
  8957  002976  0E02               	movlw	2
  8958  002978  5E26               	subwf	clust2sect@clst,f,c
  8959  00297A  0E00               	movlw	0
  8960  00297C  5A27               	subwfb	clust2sect@clst+1,f,c
  8961  00297E  5A28               	subwfb	clust2sect@clst+2,f,c
  8962  002980  5A29               	subwfb	clust2sect@clst+3,f,c
  8963                           
  8964                           ;pff.c: 408: if (clst >= (fs->n_fatent - 2)) return 0;
  8965  002982  EE20 F006          	lfsr	2,6
  8966  002986  502A               	movf	clust2sect@fs,w,c
  8967  002988  26D9               	addwf	fsr2l,f,c
  8968  00298A  502B               	movf	clust2sect@fs+1,w,c
  8969  00298C  22DA               	addwfc	fsr2h,f,c
  8970  00298E  0EFE               	movlw	254
  8971  002990  24DE               	addwf	postinc2,w,c
  8972  002992  0100               	movlb	0	; () banked
  8973  002994  6F60               	movwf	??_clust2sect& (0+255),b
  8974  002996  0EFF               	movlw	255
  8975  002998  20DE               	addwfc	postinc2,w,c
  8976  00299A  6F61               	movwf	(??_clust2sect+1)& (0+255),b
  8977  00299C  0EFF               	movlw	255
  8978  00299E  20DE               	addwfc	postinc2,w,c
  8979  0029A0  6F62               	movwf	(??_clust2sect+2)& (0+255),b
  8980  0029A2  0EFF               	movlw	255
  8981  0029A4  20DE               	addwfc	postinc2,w,c
  8982  0029A6  6F63               	movwf	(??_clust2sect+3)& (0+255),b
  8983  0029A8  5160               	movf	??_clust2sect& (0+255),w,b
  8984  0029AA  5C26               	subwf	clust2sect@clst,w,c
  8985  0029AC  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  8986  0029AE  5827               	subwfb	clust2sect@clst+1,w,c
  8987  0029B0  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  8988  0029B2  5828               	subwfb	clust2sect@clst+2,w,c
  8989  0029B4  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  8990  0029B6  5829               	subwfb	clust2sect@clst+3,w,c
  8991  0029B8  A0D8               	btfss	status,0,c
  8992  0029BA  D009               	goto	l660
  8993                           
  8994                           ; BSR set to: 0
  8995  0029BC  0E00               	movlw	0
  8996  0029BE  6E26               	movwf	?_clust2sect,c
  8997  0029C0  0E00               	movlw	0
  8998  0029C2  6E27               	movwf	?_clust2sect+1,c
  8999  0029C4  0E00               	movlw	0
  9000  0029C6  6E28               	movwf	?_clust2sect+2,c
  9001  0029C8  0E00               	movlw	0
  9002  0029CA  6E29               	movwf	?_clust2sect+3,c
  9003                           
  9004                           ; BSR set to: 0
  9005  0029CC  0012               	return	
  9006  0029CE                     l660:
  9007                           
  9008                           ; BSR set to: 0
  9009                           ;pff.c: 409: return (DWORD)clst * fs->csize + fs->database;
  9010                           
  9011                           ; BSR set to: 0
  9012  0029CE  EE20 F012          	lfsr	2,18
  9013  0029D2  502A               	movf	clust2sect@fs,w,c
  9014  0029D4  26D9               	addwf	fsr2l,f,c
  9015  0029D6  502B               	movf	clust2sect@fs+1,w,c
  9016  0029D8  22DA               	addwfc	fsr2h,f,c
  9017  0029DA  CFDE F060          	movff	postinc2,??_clust2sect
  9018  0029DE  CFDE F061          	movff	postinc2,??_clust2sect+1
  9019  0029E2  CFDE F062          	movff	postinc2,??_clust2sect+2
  9020  0029E6  CFDE F063          	movff	postinc2,??_clust2sect+3
  9021  0029EA  EE20 F002          	lfsr	2,2
  9022  0029EE  502A               	movf	clust2sect@fs,w,c
  9023  0029F0  26D9               	addwf	fsr2l,f,c
  9024  0029F2  502B               	movf	clust2sect@fs+1,w,c
  9025  0029F4  22DA               	addwfc	fsr2h,f,c
  9026  0029F6  50DF               	movf	indf2,w,c
  9027  0029F8  6F64               	movwf	(??_clust2sect+4)& (0+255),b
  9028  0029FA  5164               	movf	(??_clust2sect+4)& (0+255),w,b
  9029  0029FC  6E1A               	movwf	___lmul@multiplier,c
  9030  0029FE  6A1B               	clrf	___lmul@multiplier+1,c
  9031  002A00  6A1C               	clrf	___lmul@multiplier+2,c
  9032  002A02  6A1D               	clrf	___lmul@multiplier+3,c
  9033  002A04  C026  F01E         	movff	clust2sect@clst,___lmul@multiplicand
  9034  002A08  C027  F01F         	movff	clust2sect@clst+1,___lmul@multiplicand+1
  9035  002A0C  C028  F020         	movff	clust2sect@clst+2,___lmul@multiplicand+2
  9036  002A10  C029  F021         	movff	clust2sect@clst+3,___lmul@multiplicand+3
  9037  002A14  ECB5  F018         	call	___lmul	;wreg free
  9038  002A18  0100               	movlb	0	; () banked
  9039  002A1A  5160               	movf	??_clust2sect& (0+255),w,b
  9040  002A1C  241A               	addwf	?___lmul,w,c
  9041  002A1E  6E26               	movwf	?_clust2sect,c
  9042  002A20  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  9043  002A22  201B               	addwfc	?___lmul+1,w,c
  9044  002A24  6E27               	movwf	?_clust2sect+1,c
  9045  002A26  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  9046  002A28  201C               	addwfc	?___lmul+2,w,c
  9047  002A2A  6E28               	movwf	?_clust2sect+2,c
  9048  002A2C  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  9049  002A2E  201D               	addwfc	?___lmul+3,w,c
  9050  002A30  6E29               	movwf	?_clust2sect+3,c
  9051  002A32  0012               	return	
  9052  002A34                     __end_of_clust2sect:
  9053                           	opt stack 0
  9054                           tosu	equ	0xFFF
  9055                           tosh	equ	0xFFE
  9056                           tosl	equ	0xFFD
  9057                           pclath	equ	0xFFA
  9058                           tblptru	equ	0xFF8
  9059                           tblptrh	equ	0xFF7
  9060                           tblptrl	equ	0xFF6
  9061                           tablat	equ	0xFF5
  9062                           prodh	equ	0xFF4
  9063                           prodl	equ	0xFF3
  9064                           intcon	equ	0xFF2
  9065                           intcon2	equ	0xFF1
  9066                           intcon3	equ	0xFF0
  9067                           postinc0	equ	0xFEE
  9068                           wreg	equ	0xFE8
  9069                           indf1	equ	0xFE7
  9070                           postinc1	equ	0xFE6
  9071                           postdec1	equ	0xFE5
  9072                           fsr1h	equ	0xFE2
  9073                           fsr1l	equ	0xFE1
  9074                           indf2	equ	0xFDF
  9075                           postinc2	equ	0xFDE
  9076                           postdec2	equ	0xFDD
  9077                           plusw2	equ	0xFDB
  9078                           fsr2h	equ	0xFDA
  9079                           fsr2l	equ	0xFD9
  9080                           status	equ	0xFD8
  9081                           
  9082 ;; *************** function _create_name *****************
  9083 ;; Defined at:
  9084 ;;		line 581 in file "bibliotecas/pff.c"
  9085 ;; Parameters:    Size  Location     Type
  9086 ;;  dj              2   33[COMRAM] PTR struct .
  9087 ;;		 -> pf_open@dj(16), 
  9088 ;;  path            2   35[COMRAM] PTR PTR const unsigned c
  9089 ;;		 -> follow_path@path(2), 
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;  d               1    0[BANK0 ] unsigned char 
  9092 ;;  sfn             2    5[BANK0 ] PTR unsigned char 
  9093 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  9094 ;;  p               2    1[BANK0 ] PTR const unsigned char 
  9095 ;;		 -> STR_8(10), 
  9096 ;;  c               1    8[BANK0 ] unsigned char 
  9097 ;;  i               1    7[BANK0 ] unsigned char 
  9098 ;;  si              1    4[BANK0 ] unsigned char 
  9099 ;;  ni              1    3[BANK0 ] unsigned char 
  9100 ;; Return value:  Size  Location     Type
  9101 ;;                  1    wreg      enum E43
  9102 ;; Registers used:
  9103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9104 ;; Tracked objects:
  9105 ;;		On entry : 0/0
  9106 ;;		On exit  : 0/0
  9107 ;;		Unchanged: 0/0
  9108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9109 ;;      Params:         4       0       0       0       0       0       0       0       0
  9110 ;;      Locals:         0       9       0       0       0       0       0       0       0
  9111 ;;      Temps:          7       0       0       0       0       0       0       0       0
  9112 ;;      Totals:        11       9       0       0       0       0       0       0       0
  9113 ;;Total ram usage:       20 bytes
  9114 ;; Hardware stack levels used:    1
  9115 ;; Hardware stack levels required when called:    3
  9116 ;; This function calls:
  9117 ;;		_mem_set
  9118 ;; This function is called by:
  9119 ;;		_follow_path
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           	psect	text37
  9124  001E9A                     __ptext37:
  9125                           	opt stack 0
  9126  001E9A                     _create_name:
  9127                           	opt stack 23
  9128                           
  9129                           ;pff.c: 586: BYTE c, ni, si, i, *sfn;
  9130                           ;pff.c: 587: const char *p;
  9131                           ;pff.c: 590: static const BYTE cvt[] = {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x4
      +                          5,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0
      +                          x9B,0x9C,0x9D,0x9E,0x9F, 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0x
  9132                           ;pff.c: 595: sfn = dj->fn;
  9133                           
  9134                           ; BSR set to: 0
  9135                           ;incstack = 0
  9136  001E9A  EE20 F002          	lfsr	2,2
  9137  001E9E  5022               	movf	create_name@dj,w,c
  9138  001EA0  26D9               	addwf	fsr2l,f,c
  9139  001EA2  5023               	movf	create_name@dj+1,w,c
  9140  001EA4  22DA               	addwfc	fsr2h,f,c
  9141  001EA6  CFDE F065          	movff	postinc2,create_name@sfn
  9142  001EAA  CFDD F066          	movff	postdec2,create_name@sfn+1
  9143                           
  9144                           ;pff.c: 596: mem_set(sfn, ' ', 11);
  9145  001EAE  C065  F01A         	movff	create_name@sfn,mem_set@dst
  9146  001EB2  C066  F01B         	movff	create_name@sfn+1,mem_set@dst+1
  9147  001EB6  0E00               	movlw	0
  9148  001EB8  6E1D               	movwf	mem_set@val+1,c
  9149  001EBA  0E20               	movlw	32
  9150  001EBC  6E1C               	movwf	mem_set@val,c
  9151  001EBE  0E00               	movlw	0
  9152  001EC0  6E1F               	movwf	mem_set@cnt+1,c
  9153  001EC2  0E0B               	movlw	11
  9154  001EC4  6E1E               	movwf	mem_set@cnt,c
  9155  001EC6  ECC3  F019         	call	_mem_set	;wreg free
  9156                           
  9157                           ;pff.c: 597: si = i = 0; ni = 8;
  9158  001ECA  0E00               	movlw	0
  9159  001ECC  0100               	movlb	0	; () banked
  9160  001ECE  6F67               	movwf	create_name@i& (0+255),b
  9161  001ED0  C067  F064         	movff	create_name@i,create_name@si
  9162                           
  9163                           ; BSR set to: 0
  9164  001ED4  0E08               	movlw	8
  9165  001ED6  6F63               	movwf	create_name@ni& (0+255),b
  9166                           
  9167                           ; BSR set to: 0
  9168                           ;pff.c: 598: p = *path;
  9169  001ED8  C024  FFD9         	movff	create_name@path,fsr2l
  9170  001EDC  C025  FFDA         	movff	create_name@path+1,fsr2h
  9171  001EE0  CFDE F061          	movff	postinc2,create_name@p
  9172  001EE4  CFDD F062          	movff	postdec2,create_name@p+1
  9173  001EE8                     
  9174                           ; BSR set to: 0
  9175                           ;pff.c: 600: c = p[si++];
  9176                           
  9177                           ; BSR set to: 0
  9178  001EE8  5164               	movf	create_name@si& (0+255),w,b
  9179  001EEA  0D01               	mullw	1
  9180  001EEC  C061  F026         	movff	create_name@p,??_create_name
  9181  001EF0  C062  F027         	movff	create_name@p+1,??_create_name+1
  9182  001EF4  50F3               	movf	prodl,w,c
  9183  001EF6  2626               	addwf	??_create_name,f,c
  9184  001EF8  50F4               	movf	prodh,w,c
  9185  001EFA  2227               	addwfc	??_create_name+1,f,c
  9186  001EFC  C026  FFF6         	movff	??_create_name,tblptrl
  9187  001F00  C027  FFF7         	movff	??_create_name+1,tblptrh
  9188  001F04                     	if	0	;tblptru may be non-zero
  9189  001F04                     	endif
  9190  001F04                     	if	0	;tblptru may be non-zero
  9191  001F04                     	endif
  9192  001F04  0008               	tblrd		*
  9193  001F06  CFF5 F068          	movff	tablat,create_name@c
  9194                           
  9195                           ; BSR set to: 0
  9196  001F0A  2B64               	incf	create_name@si& (0+255),f,b
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;pff.c: 601: if (c <= ' ' || c == '/') break;
  9200  001F0C  0E20               	movlw	32
  9201  001F0E  6568               	cpfsgt	create_name@c& (0+255),b
  9202  001F10  D044               	goto	l722
  9203                           
  9204                           ; BSR set to: 0
  9205  001F12  0E2F               	movlw	47
  9206  001F14  1968               	xorwf	create_name@c& (0+255),w,b
  9207  001F16  B4D8               	btfsc	status,2,c
  9208  001F18  D040               	goto	l722
  9209                           
  9210                           ; BSR set to: 0
  9211                           ;pff.c: 602: if (c == '.' || i >= ni) {
  9212                           
  9213                           ; BSR set to: 0
  9214                           
  9215                           ; BSR set to: 0
  9216  001F1A  0E2E               	movlw	46
  9217  001F1C  1968               	xorwf	create_name@c& (0+255),w,b
  9218  001F1E  B4D8               	btfsc	status,2,c
  9219  001F20  D004               	goto	u9660
  9220                           
  9221                           ; BSR set to: 0
  9222  001F22  5163               	movf	create_name@ni& (0+255),w,b
  9223  001F24  5D67               	subwf	create_name@i& (0+255),w,b
  9224  001F26  A0D8               	btfss	status,0,c
  9225  001F28  D00D               	goto	l723
  9226  001F2A                     u9660:
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;pff.c: 603: if (ni != 8 || c != '.') break;
  9230                           
  9231                           ; BSR set to: 0
  9232  001F2A  0E08               	movlw	8
  9233  001F2C  1963               	xorwf	create_name@ni& (0+255),w,b
  9234  001F2E  A4D8               	btfss	status,2,c
  9235  001F30  D034               	goto	l722
  9236                           
  9237                           ; BSR set to: 0
  9238  001F32  0E2E               	movlw	46
  9239  001F34  1968               	xorwf	create_name@c& (0+255),w,b
  9240  001F36  A4D8               	btfss	status,2,c
  9241  001F38  D030               	goto	l722
  9242                           
  9243                           ; BSR set to: 0
  9244                           ;pff.c: 604: i = 8; ni = 11;
  9245                           
  9246                           ; BSR set to: 0
  9247                           
  9248                           ; BSR set to: 0
  9249  001F3A  0E08               	movlw	8
  9250  001F3C  6F67               	movwf	create_name@i& (0+255),b
  9251  001F3E  0E0B               	movlw	11
  9252  001F40  6F63               	movwf	create_name@ni& (0+255),b
  9253                           
  9254                           ;pff.c: 605: continue;
  9255  001F42  D7D2               	goto	l718
  9256  001F44                     l723:
  9257                           
  9258                           ; BSR set to: 0
  9259                           ;pff.c: 606: }
  9260                           ;pff.c: 609: if (c >= 0x80)
  9261                           
  9262                           ; BSR set to: 0
  9263  001F44  0E7F               	movlw	127
  9264  001F46  6568               	cpfsgt	create_name@c& (0+255),b
  9265  001F48  D014               	goto	l731
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;pff.c: 610: c = cvt[c - 0x80];
  9269  001F4A  0E80               	movlw	128
  9270  001F4C  6E26               	movwf	??_create_name& (0+255),c
  9271  001F4E  0EFF               	movlw	255
  9272  001F50  6E27               	movwf	(??_create_name+1)& (0+255),c
  9273  001F52  5168               	movf	create_name@c& (0+255),w,b
  9274  001F54  6E28               	movwf	(??_create_name+2)& (0+255),c
  9275  001F56  6A29               	clrf	(??_create_name+3)& (0+255),c
  9276  001F58  5026               	movf	??_create_name,w,c
  9277  001F5A  2628               	addwf	??_create_name+2,f,c
  9278  001F5C  5027               	movf	??_create_name+1,w,c
  9279  001F5E  2229               	addwfc	??_create_name+3,f,c
  9280  001F60  0E4D               	movlw	low create_name@cvt
  9281  001F62  2428               	addwf	??_create_name+2,w,c
  9282  001F64  6EF6               	movwf	tblptrl,c
  9283  001F66  0E60               	movlw	high create_name@cvt
  9284  001F68  2029               	addwfc	??_create_name+3,w,c
  9285  001F6A  6EF7               	movwf	tblptrh,c
  9286  001F6C                     	if	0	;There are less than 3 active tblptr bytes
  9287  001F6C                     	endif
  9288  001F6C  0008               	tblrd		*
  9289  001F6E  CFF5 F068          	movff	tablat,create_name@c
  9290  001F72                     l731:
  9291                           
  9292                           ; BSR set to: 0
  9293                           
  9294                           ; BSR set to: 0
  9295  001F72  0E60               	movlw	96
  9296  001F74  6568               	cpfsgt	create_name@c& (0+255),b
  9297  001F76  D005               	goto	l733
  9298                           
  9299                           ; BSR set to: 0
  9300  001F78  0E7B               	movlw	123
  9301  001F7A  6168               	cpfslt	create_name@c& (0+255),b
  9302  001F7C  D002               	goto	l733
  9303                           
  9304                           ; BSR set to: 0
  9305  001F7E  0E20               	movlw	32
  9306  001F80  5F68               	subwf	create_name@c& (0+255),f,b
  9307  001F82                     l733:
  9308                           
  9309                           ; BSR set to: 0
  9310                           ;pff.c: 620: sfn[i++] = c;
  9311                           
  9312                           ; BSR set to: 0
  9313  001F82  5167               	movf	create_name@i& (0+255),w,b
  9314  001F84  0D01               	mullw	1
  9315  001F86  50F3               	movf	prodl,w,c
  9316  001F88  2565               	addwf	create_name@sfn& (0+255),w,b
  9317  001F8A  6ED9               	movwf	fsr2l,c
  9318  001F8C  50F4               	movf	prodh,w,c
  9319  001F8E  2166               	addwfc	(create_name@sfn+1)& (0+255),w,b
  9320  001F90  6EDA               	movwf	fsr2h,c
  9321  001F92  C068  FFDF         	movff	create_name@c,indf2
  9322                           
  9323                           ; BSR set to: 0
  9324  001F96  2B67               	incf	create_name@i& (0+255),f,b
  9325                           
  9326                           ; BSR set to: 0
  9327                           ;pff.c: 621: }
  9328                           ;pff.c: 622: }
  9329                           
  9330                           ; BSR set to: 0
  9331  001F98  D7A7               	goto	l718
  9332  001F9A                     l722:
  9333                           
  9334                           ; BSR set to: 0
  9335                           ;pff.c: 623: *path = &p[si];
  9336                           
  9337                           ; BSR set to: 0
  9338  001F9A  5164               	movf	create_name@si& (0+255),w,b
  9339  001F9C  0D01               	mullw	1
  9340  001F9E  C061  F026         	movff	create_name@p,??_create_name
  9341  001FA2  C062  F027         	movff	create_name@p+1,??_create_name+1
  9342  001FA6  50F3               	movf	prodl,w,c
  9343  001FA8  2626               	addwf	??_create_name,f,c
  9344  001FAA  50F4               	movf	prodh,w,c
  9345  001FAC  2227               	addwfc	??_create_name+1,f,c
  9346  001FAE  C024  FFD9         	movff	create_name@path,fsr2l
  9347  001FB2  C025  FFDA         	movff	create_name@path+1,fsr2h
  9348  001FB6  C026  FFDE         	movff	??_create_name,postinc2
  9349  001FBA  C027  FFDD         	movff	??_create_name+1,postdec2
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;pff.c: 625: sfn[11] = (c <= ' ') ? 1 : 0;
  9353  001FBE  EE20 F00B          	lfsr	2,11
  9354  001FC2  5165               	movf	create_name@sfn& (0+255),w,b
  9355  001FC4  26D9               	addwf	fsr2l,f,c
  9356  001FC6  5166               	movf	(create_name@sfn+1)& (0+255),w,b
  9357  001FC8  22DA               	addwfc	fsr2h,f,c
  9358  001FCA  0E20               	movlw	32
  9359  001FCC  6568               	cpfsgt	create_name@c& (0+255),b
  9360  001FCE  D001               	goto	u9731
  9361  001FD0  D002               	goto	u9730
  9362  001FD2                     u9731:
  9363  001FD2  0E01               	movlw	1
  9364  001FD4  D001               	goto	u9740
  9365  001FD6                     u9730:
  9366  001FD6  0E00               	movlw	0
  9367  001FD8                     u9740:
  9368  001FD8  6EDF               	movwf	indf2,c
  9369                           
  9370                           ; BSR set to: 0
  9371                           ;pff.c: 627: return FR_OK;
  9372  001FDA  0E00               	movlw	0
  9373  001FDC  0012               	return	
  9374  001FDE                     __end_of_create_name:
  9375                           	opt stack 0
  9376                           tosu	equ	0xFFF
  9377                           tosh	equ	0xFFE
  9378                           tosl	equ	0xFFD
  9379                           pclath	equ	0xFFA
  9380                           tblptru	equ	0xFF8
  9381                           tblptrh	equ	0xFF7
  9382                           tblptrl	equ	0xFF6
  9383                           tablat	equ	0xFF5
  9384                           prodh	equ	0xFF4
  9385                           prodl	equ	0xFF3
  9386                           intcon	equ	0xFF2
  9387                           intcon2	equ	0xFF1
  9388                           intcon3	equ	0xFF0
  9389                           postinc0	equ	0xFEE
  9390                           wreg	equ	0xFE8
  9391                           indf1	equ	0xFE7
  9392                           postinc1	equ	0xFE6
  9393                           postdec1	equ	0xFE5
  9394                           fsr1h	equ	0xFE2
  9395                           fsr1l	equ	0xFE1
  9396                           indf2	equ	0xFDF
  9397                           postinc2	equ	0xFDE
  9398                           postdec2	equ	0xFDD
  9399                           plusw2	equ	0xFDB
  9400                           fsr2h	equ	0xFDA
  9401                           fsr2l	equ	0xFD9
  9402                           status	equ	0xFD8
  9403                           
  9404 ;; *************** function _mem_set *****************
  9405 ;; Defined at:
  9406 ;;		line 329 in file "bibliotecas/pff.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;  dst             2   25[COMRAM] PTR void 
  9409 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  9410 ;;  val             2   27[COMRAM] int 
  9411 ;;  cnt             2   29[COMRAM] int 
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;  d               2   31[COMRAM] PTR unsigned char 
  9414 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  9415 ;; Return value:  Size  Location     Type
  9416 ;;                  1    wreg      void 
  9417 ;; Registers used:
  9418 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9419 ;; Tracked objects:
  9420 ;;		On entry : 0/0
  9421 ;;		On exit  : 0/0
  9422 ;;		Unchanged: 0/0
  9423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9424 ;;      Params:         6       0       0       0       0       0       0       0       0
  9425 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9426 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9427 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9428 ;;Total ram usage:        8 bytes
  9429 ;; Hardware stack levels used:    1
  9430 ;; Hardware stack levels required when called:    2
  9431 ;; This function calls:
  9432 ;;		Nothing
  9433 ;; This function is called by:
  9434 ;;		_create_name
  9435 ;; This function uses a non-reentrant model
  9436 ;;
  9437                           
  9438                           	psect	text38
  9439  003386                     __ptext38:
  9440                           	opt stack 0
  9441  003386                     _mem_set:
  9442                           	opt stack 23
  9443                           
  9444                           ;pff.c: 330: char *d = (char*)dst;
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;incstack = 0
  9448  003386  C01A  F020         	movff	mem_set@dst,mem_set@d
  9449  00338A  C01B  F021         	movff	mem_set@dst+1,mem_set@d+1
  9450                           
  9451                           ;pff.c: 331: while (cnt--) *d++ = (char)val;
  9452  00338E  D008               	goto	l624
  9453  003390                     l8324:
  9454  003390  C020  FFD9         	movff	mem_set@d,fsr2l
  9455  003394  C021  FFDA         	movff	mem_set@d+1,fsr2h
  9456  003398  C01C  FFDF         	movff	mem_set@val,indf2
  9457  00339C  4A20               	infsnz	mem_set@d,f,c
  9458  00339E  2A21               	incf	mem_set@d+1,f,c
  9459  0033A0                     l624:
  9460  0033A0  061E               	decf	mem_set@cnt,f,c
  9461  0033A2  A0D8               	btfss	status,0,c
  9462  0033A4  061F               	decf	mem_set@cnt+1,f,c
  9463  0033A6  281E               	incf	mem_set@cnt,w,c
  9464  0033A8  E1F3               	bnz	l8324
  9465  0033AA  281F               	incf	mem_set@cnt+1,w,c
  9466  0033AC  B4D8               	btfsc	status,2,c
  9467  0033AE  0012               	return	
  9468  0033B0  D7EF               	goto	l625
  9469  0033B2                     __end_of_mem_set:
  9470                           	opt stack 0
  9471                           tosu	equ	0xFFF
  9472                           tosh	equ	0xFFE
  9473                           tosl	equ	0xFFD
  9474                           pclath	equ	0xFFA
  9475                           tblptru	equ	0xFF8
  9476                           tblptrh	equ	0xFF7
  9477                           tblptrl	equ	0xFF6
  9478                           tablat	equ	0xFF5
  9479                           prodh	equ	0xFF4
  9480                           prodl	equ	0xFF3
  9481                           intcon	equ	0xFF2
  9482                           intcon2	equ	0xFF1
  9483                           intcon3	equ	0xFF0
  9484                           postinc0	equ	0xFEE
  9485                           wreg	equ	0xFE8
  9486                           indf1	equ	0xFE7
  9487                           postinc1	equ	0xFE6
  9488                           postdec1	equ	0xFE5
  9489                           fsr1h	equ	0xFE2
  9490                           fsr1l	equ	0xFE1
  9491                           indf2	equ	0xFDF
  9492                           postinc2	equ	0xFDE
  9493                           postdec2	equ	0xFDD
  9494                           plusw2	equ	0xFDB
  9495                           fsr2h	equ	0xFDA
  9496                           fsr2l	equ	0xFD9
  9497                           status	equ	0xFD8
  9498                           
  9499 ;; *************** function _pf_mount *****************
  9500 ;; Defined at:
  9501 ;;		line 755 in file "bibliotecas/pff.c"
  9502 ;; Parameters:    Size  Location     Type
  9503 ;;  fs              2   24[BANK0 ] PTR struct .
  9504 ;;		 -> SDCard@fs(42), 
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;  buf            36   48[BANK0 ] unsigned char [36]
  9507 ;;  fsize           4   96[BANK0 ] unsigned long 
  9508 ;;  bsect           4   92[BANK0 ] unsigned long 
  9509 ;;  mclst           4   88[BANK0 ] unsigned long 
  9510 ;;  tsect           4   84[BANK0 ] unsigned long 
  9511 ;;  fmt             1  100[BANK0 ] unsigned char 
  9512 ;; Return value:  Size  Location     Type
  9513 ;;                  1    wreg      enum E43
  9514 ;; Registers used:
  9515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9516 ;; Tracked objects:
  9517 ;;		On entry : 0/0
  9518 ;;		On exit  : 0/0
  9519 ;;		Unchanged: 0/0
  9520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9521 ;;      Params:         0       2       0       0       0       0       0       0       0
  9522 ;;      Locals:         0      53       0       0       0       0       0       0       0
  9523 ;;      Temps:          0      22       0       0       0       0       0       0       0
  9524 ;;      Totals:         0      77       0       0       0       0       0       0       0
  9525 ;;Total ram usage:       77 bytes
  9526 ;; Hardware stack levels used:    1
  9527 ;; Hardware stack levels required when called:    7
  9528 ;; This function calls:
  9529 ;;		___lldiv
  9530 ;;		___lmul
  9531 ;;		_check_fs
  9532 ;;		_disk_initialize
  9533 ;;		_disk_readp
  9534 ;; This function is called by:
  9535 ;;		_SDCard
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           	psect	text39
  9540  000012                     __ptext39:
  9541                           	opt stack 0
  9542  000012                     _pf_mount:
  9543                           	opt stack 21
  9544                           
  9545                           ;pff.c: 759: BYTE fmt, buf[36];
  9546                           ;pff.c: 760: DWORD bsect, fsize, tsect, mclst;
  9547                           ;pff.c: 763: FatFs = 0;
  9548                           
  9549                           ;incstack = 0
  9550  000012  0E00               	movlw	0
  9551  000014  6E37               	movwf	_FatFs,c
  9552  000016  0E00               	movlw	0
  9553  000018  6E38               	movwf	_FatFs+1,c
  9554                           
  9555                           ;pff.c: 764: if (disk_initialize() & 0x01)
  9556  00001A  ECE3  F00A         	call	_disk_initialize	;wreg free
  9557  00001E  0100               	movlb	0	; () banked
  9558  000020  6F7A               	movwf	??_pf_mount& (0+255),b
  9559  000022  A17A               	btfss	??_pf_mount& (0+255),0,b
  9560  000024  D002               	goto	l771
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;pff.c: 765: return FR_NOT_READY;
  9564  000026  0E02               	movlw	2
  9565                           
  9566                           ; BSR set to: 0
  9567  000028  0012               	return	
  9568  00002A                     l771:
  9569                           
  9570                           ; BSR set to: 0
  9571                           ;pff.c: 767: bsect = 0;
  9572                           
  9573                           ; BSR set to: 0
  9574  00002A  0E00               	movlw	0
  9575  00002C  6FBC               	movwf	pf_mount@bsect& (0+255),b
  9576  00002E  0E00               	movlw	0
  9577  000030  6FBD               	movwf	(pf_mount@bsect+1)& (0+255),b
  9578  000032  0E00               	movlw	0
  9579  000034  6FBE               	movwf	(pf_mount@bsect+2)& (0+255),b
  9580  000036  0E00               	movlw	0
  9581  000038  6FBF               	movwf	(pf_mount@bsect+3)& (0+255),b
  9582                           
  9583                           ; BSR set to: 0
  9584                           ;pff.c: 768: fmt = check_fs(buf, bsect);
  9585  00003A  0E90               	movlw	low pf_mount@buf
  9586  00003C  6F72               	movwf	check_fs@buf& (0+255),b
  9587  00003E  0E00               	movlw	high pf_mount@buf
  9588  000040  6F73               	movwf	(check_fs@buf+1)& (0+255),b
  9589  000042  C0BC  F074         	movff	pf_mount@bsect,check_fs@sect
  9590  000046  C0BD  F075         	movff	pf_mount@bsect+1,check_fs@sect+1
  9591  00004A  C0BE  F076         	movff	pf_mount@bsect+2,check_fs@sect+2
  9592  00004E  C0BF  F077         	movff	pf_mount@bsect+3,check_fs@sect+3
  9593  000052  ECF7  F00D         	call	_check_fs	;wreg free
  9594  000056  0100               	movlb	0	; () banked
  9595  000058  6FC4               	movwf	pf_mount@fmt& (0+255),b
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;pff.c: 769: if (fmt == 1) {
  9599  00005A  05C4               	decf	pf_mount@fmt& (0+255),w,b
  9600  00005C  A4D8               	btfss	status,2,c
  9601  00005E  D068               	goto	l776
  9602                           
  9603                           ; BSR set to: 0
  9604                           ;pff.c: 771: if (disk_readp(buf, bsect, 446, 16)) {
  9605  000060  0E90               	movlw	low pf_mount@buf
  9606  000062  6F60               	movwf	disk_readp@rd& (0+255),b
  9607  000064  0E00               	movlw	high pf_mount@buf
  9608  000066  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  9609  000068  C0BC  F062         	movff	pf_mount@bsect,disk_readp@sector
  9610  00006C  C0BD  F063         	movff	pf_mount@bsect+1,disk_readp@sector+1
  9611  000070  C0BE  F064         	movff	pf_mount@bsect+2,disk_readp@sector+2
  9612  000074  C0BF  F065         	movff	pf_mount@bsect+3,disk_readp@sector+3
  9613  000078  0E01               	movlw	1
  9614  00007A  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  9615  00007C  0EBE               	movlw	190
  9616  00007E  6F66               	movwf	disk_readp@offset& (0+255),b
  9617  000080  0E00               	movlw	0
  9618  000082  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  9619  000084  0E10               	movlw	16
  9620  000086  6F68               	movwf	disk_readp@count& (0+255),b
  9621  000088  EC3E  F009         	call	_disk_readp	;wreg free
  9622  00008C  0900               	iorlw	0
  9623  00008E  B4D8               	btfsc	status,2,c
  9624  000090  D002               	goto	l774
  9625                           
  9626                           ;pff.c: 772: fmt = 3;
  9627  000092  0E03               	movlw	3
  9628  000094  D04B               	goto	L5
  9629  000096                     l774:
  9630                           
  9631                           ;pff.c: 774: if (buf[4]) {
  9632                           
  9633                           ; BSR set to: 0
  9634  000096  0100               	movlb	0	; () banked
  9635  000098  5194               	movf	(pf_mount@buf+4)& (0+255),w,b
  9636  00009A  B4D8               	btfsc	status,2,c
  9637  00009C  D049               	goto	l776
  9638                           
  9639                           ; BSR set to: 0
  9640                           ;pff.c: 775: bsect = (DWORD)(((DWORD)*((BYTE*)(&buf[8])+3)<<24)|((DWORD)*((BYTE*)(&buf[8
      +                          ])+2)<<16)|((WORD)*((BYTE*)(&buf[8])+1)<<8)|*(BYTE*)(&buf[8]));
  9641  00009E  5199               	movf	(pf_mount@buf+9)& (0+255),w,b
  9642  0000A0  6F7B               	movwf	(??_pf_mount+1)& (0+255),b
  9643  0000A2  6B7A               	clrf	??_pf_mount& (0+255),b
  9644  0000A4  C09A  F07C         	movff	pf_mount@buf+10,??_pf_mount+2
  9645  0000A8  6B7D               	clrf	(??_pf_mount+3)& (0+255),b
  9646  0000AA  6B7E               	clrf	(??_pf_mount+4)& (0+255),b
  9647  0000AC  6B7F               	clrf	(??_pf_mount+5)& (0+255),b
  9648  0000AE  C07D  F07F         	movff	??_pf_mount+3,??_pf_mount+5
  9649  0000B2  C07C  F07E         	movff	??_pf_mount+2,??_pf_mount+4
  9650  0000B6  6B7D               	clrf	(??_pf_mount+3)& (0+255),b
  9651  0000B8  6B7C               	clrf	(??_pf_mount+2)& (0+255),b
  9652  0000BA  C09B  F080         	movff	pf_mount@buf+11,??_pf_mount+6
  9653  0000BE  6B81               	clrf	(??_pf_mount+7)& (0+255),b
  9654  0000C0  6B82               	clrf	(??_pf_mount+8)& (0+255),b
  9655  0000C2  6B83               	clrf	(??_pf_mount+9)& (0+255),b
  9656  0000C4  C080  F083         	movff	??_pf_mount+6,??_pf_mount+9
  9657  0000C8  6B82               	clrf	(??_pf_mount+8)& (0+255),b
  9658  0000CA  6B81               	clrf	(??_pf_mount+7)& (0+255),b
  9659  0000CC  6B80               	clrf	(??_pf_mount+6)& (0+255),b
  9660  0000CE  517C               	movf	(??_pf_mount+2)& (0+255),w,b
  9661  0000D0  1180               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9662  0000D2  6F84               	movwf	(??_pf_mount+10)& (0+255),b
  9663  0000D4  517D               	movf	(??_pf_mount+3)& (0+255),w,b
  9664  0000D6  1181               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9665  0000D8  6F85               	movwf	(??_pf_mount+11)& (0+255),b
  9666  0000DA  517E               	movf	(??_pf_mount+4)& (0+255),w,b
  9667  0000DC  1182               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9668  0000DE  6F86               	movwf	(??_pf_mount+12)& (0+255),b
  9669  0000E0  517F               	movf	(??_pf_mount+5)& (0+255),w,b
  9670  0000E2  1183               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9671  0000E4  6F87               	movwf	(??_pf_mount+13)& (0+255),b
  9672  0000E6  517A               	movf	??_pf_mount& (0+255),w,b
  9673  0000E8  1184               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9674  0000EA  6F88               	movwf	(??_pf_mount+14)& (0+255),b
  9675  0000EC  517B               	movf	(??_pf_mount+1)& (0+255),w,b
  9676  0000EE  1185               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9677  0000F0  6F89               	movwf	(??_pf_mount+15)& (0+255),b
  9678  0000F2  0E00               	movlw	0
  9679  0000F4  1186               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9680  0000F6  6F8A               	movwf	(??_pf_mount+16)& (0+255),b
  9681  0000F8  0E00               	movlw	0
  9682  0000FA  1187               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9683  0000FC  6F8B               	movwf	(??_pf_mount+17)& (0+255),b
  9684  0000FE  5198               	movf	(pf_mount@buf+8)& (0+255),w,b
  9685  000100  1188               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9686  000102  6FBC               	movwf	pf_mount@bsect& (0+255),b
  9687  000104  5189               	movf	(??_pf_mount+15)& (0+255),w,b
  9688  000106  6FBD               	movwf	(pf_mount@bsect+1)& (0+255),b
  9689  000108  518A               	movf	(??_pf_mount+16)& (0+255),w,b
  9690  00010A  6FBE               	movwf	(pf_mount@bsect+2)& (0+255),b
  9691  00010C  518B               	movf	(??_pf_mount+17)& (0+255),w,b
  9692  00010E  6FBF               	movwf	(pf_mount@bsect+3)& (0+255),b
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;pff.c: 776: fmt = check_fs(buf, bsect);
  9696  000110  0E90               	movlw	low pf_mount@buf
  9697  000112  6F72               	movwf	check_fs@buf& (0+255),b
  9698  000114  0E00               	movlw	high pf_mount@buf
  9699  000116  6F73               	movwf	(check_fs@buf+1)& (0+255),b
  9700  000118  C0BC  F074         	movff	pf_mount@bsect,check_fs@sect
  9701  00011C  C0BD  F075         	movff	pf_mount@bsect+1,check_fs@sect+1
  9702  000120  C0BE  F076         	movff	pf_mount@bsect+2,check_fs@sect+2
  9703  000124  C0BF  F077         	movff	pf_mount@bsect+3,check_fs@sect+3
  9704  000128  ECF7  F00D         	call	_check_fs	;wreg free
  9705  00012C                     L5:
  9706  00012C  0100               	movlb	0	; () banked
  9707  00012E  6FC4               	movwf	pf_mount@fmt& (0+255),b
  9708  000130                     l776:
  9709                           
  9710                           ; BSR set to: 0
  9711                           ;pff.c: 777: }
  9712                           ;pff.c: 778: }
  9713                           ;pff.c: 779: }
  9714                           ;pff.c: 780: if (fmt == 3) return FR_DISK_ERR;
  9715                           
  9716                           ; BSR set to: 0
  9717                           
  9718                           ; BSR set to: 0
  9719                           
  9720                           ; BSR set to: 0
  9721  000130  0E03               	movlw	3
  9722  000132  19C4               	xorwf	pf_mount@fmt& (0+255),w,b
  9723  000134  A4D8               	btfss	status,2,c
  9724  000136  D002               	goto	l777
  9725                           
  9726                           ; BSR set to: 0
  9727  000138  0E01               	movlw	1
  9728                           
  9729                           ; BSR set to: 0
  9730  00013A  0012               	return	
  9731  00013C                     l777:
  9732                           
  9733                           ; BSR set to: 0
  9734                           ;pff.c: 781: if (fmt) return FR_NO_FILESYSTEM;
  9735                           
  9736                           ; BSR set to: 0
  9737  00013C  51C4               	movf	pf_mount@fmt& (0+255),w,b
  9738  00013E  B4D8               	btfsc	status,2,c
  9739  000140  D002               	goto	l778
  9740                           
  9741                           ; BSR set to: 0
  9742  000142  0E06               	movlw	6
  9743                           
  9744                           ; BSR set to: 0
  9745  000144  0012               	return	
  9746  000146                     l778:
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;pff.c: 784: if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
  9750                           
  9751                           ; BSR set to: 0
  9752  000146  0E90               	movlw	low pf_mount@buf
  9753  000148  6F60               	movwf	disk_readp@rd& (0+255),b
  9754  00014A  0E00               	movlw	high pf_mount@buf
  9755  00014C  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  9756  00014E  C0BC  F062         	movff	pf_mount@bsect,disk_readp@sector
  9757  000152  C0BD  F063         	movff	pf_mount@bsect+1,disk_readp@sector+1
  9758  000156  C0BE  F064         	movff	pf_mount@bsect+2,disk_readp@sector+2
  9759  00015A  C0BF  F065         	movff	pf_mount@bsect+3,disk_readp@sector+3
  9760  00015E  0E00               	movlw	0
  9761  000160  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  9762  000162  0E0D               	movlw	13
  9763  000164  6F66               	movwf	disk_readp@offset& (0+255),b
  9764  000166  0E00               	movlw	0
  9765  000168  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  9766  00016A  0E24               	movlw	36
  9767  00016C  6F68               	movwf	disk_readp@count& (0+255),b
  9768  00016E  EC3E  F009         	call	_disk_readp	;wreg free
  9769  000172  0900               	iorlw	0
  9770  000174  B4D8               	btfsc	status,2,c
  9771  000176  D002               	goto	l779
  9772  000178  0E01               	movlw	1
  9773  00017A  0012               	return	
  9774  00017C                     l779:
  9775                           
  9776                           ;pff.c: 786: fsize = (WORD)(((WORD)*((BYTE*)(buf+22-13)+1)<<8)|(WORD)*(BYTE*)(buf+22-13)
      +                          );
  9777  00017C  0100               	movlb	0	; () banked
  9778  00017E  5199               	movf	(pf_mount@buf+9)& (0+255),w,b
  9779  000180  C09A  F07A         	movff	pf_mount@buf+10,??_pf_mount
  9780  000184  6B7B               	clrf	(??_pf_mount+1)& (0+255),b
  9781  000186  C07A  F07B         	movff	??_pf_mount,??_pf_mount+1
  9782  00018A  6B7A               	clrf	??_pf_mount& (0+255),b
  9783  00018C  137A               	iorwf	??_pf_mount& (0+255),f,b
  9784  00018E  0E00               	movlw	0
  9785  000190  137B               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9786  000192  C07A  F0C0         	movff	??_pf_mount,pf_mount@fsize
  9787  000196  C07B  F0C1         	movff	??_pf_mount+1,pf_mount@fsize+1
  9788  00019A  6BC2               	clrf	(pf_mount@fsize+2)& (0+255),b
  9789  00019C  6BC3               	clrf	(pf_mount@fsize+3)& (0+255),b
  9790                           
  9791                           ;pff.c: 787: if (!fsize) fsize = (DWORD)(((DWORD)*((BYTE*)(buf+36-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+36-13)+2)<<16)|((WORD)*((BYTE*)(buf+36-13)+1)<<8)|*(BYTE*)(buf+36-13));
  9792  00019E  51C0               	movf	pf_mount@fsize& (0+255),w,b
  9793  0001A0  11C1               	iorwf	(pf_mount@fsize+1)& (0+255),w,b
  9794  0001A2  11C2               	iorwf	(pf_mount@fsize+2)& (0+255),w,b
  9795  0001A4  11C3               	iorwf	(pf_mount@fsize+3)& (0+255),w,b
  9796  0001A6  A4D8               	btfss	status,2,c
  9797  0001A8  D039               	goto	l780
  9798                           
  9799                           ; BSR set to: 0
  9800  0001AA  51A8               	movf	(pf_mount@buf+24)& (0+255),w,b
  9801  0001AC  6F7B               	movwf	(??_pf_mount+1)& (0+255),b
  9802  0001AE  6B7A               	clrf	??_pf_mount& (0+255),b
  9803  0001B0  C0A9  F07C         	movff	pf_mount@buf+25,??_pf_mount+2
  9804  0001B4  6B7D               	clrf	(??_pf_mount+3)& (0+255),b
  9805  0001B6  6B7E               	clrf	(??_pf_mount+4)& (0+255),b
  9806  0001B8  6B7F               	clrf	(??_pf_mount+5)& (0+255),b
  9807  0001BA  C07D  F07F         	movff	??_pf_mount+3,??_pf_mount+5
  9808  0001BE  C07C  F07E         	movff	??_pf_mount+2,??_pf_mount+4
  9809  0001C2  6B7D               	clrf	(??_pf_mount+3)& (0+255),b
  9810  0001C4  6B7C               	clrf	(??_pf_mount+2)& (0+255),b
  9811  0001C6  C0AA  F080         	movff	pf_mount@buf+26,??_pf_mount+6
  9812  0001CA  6B81               	clrf	(??_pf_mount+7)& (0+255),b
  9813  0001CC  6B82               	clrf	(??_pf_mount+8)& (0+255),b
  9814  0001CE  6B83               	clrf	(??_pf_mount+9)& (0+255),b
  9815  0001D0  C080  F083         	movff	??_pf_mount+6,??_pf_mount+9
  9816  0001D4  6B82               	clrf	(??_pf_mount+8)& (0+255),b
  9817  0001D6  6B81               	clrf	(??_pf_mount+7)& (0+255),b
  9818  0001D8  6B80               	clrf	(??_pf_mount+6)& (0+255),b
  9819  0001DA  517C               	movf	(??_pf_mount+2)& (0+255),w,b
  9820  0001DC  1180               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9821  0001DE  6F84               	movwf	(??_pf_mount+10)& (0+255),b
  9822  0001E0  517D               	movf	(??_pf_mount+3)& (0+255),w,b
  9823  0001E2  1181               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9824  0001E4  6F85               	movwf	(??_pf_mount+11)& (0+255),b
  9825  0001E6  517E               	movf	(??_pf_mount+4)& (0+255),w,b
  9826  0001E8  1182               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9827  0001EA  6F86               	movwf	(??_pf_mount+12)& (0+255),b
  9828  0001EC  517F               	movf	(??_pf_mount+5)& (0+255),w,b
  9829  0001EE  1183               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9830  0001F0  6F87               	movwf	(??_pf_mount+13)& (0+255),b
  9831  0001F2  517A               	movf	??_pf_mount& (0+255),w,b
  9832  0001F4  1184               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9833  0001F6  6F88               	movwf	(??_pf_mount+14)& (0+255),b
  9834  0001F8  517B               	movf	(??_pf_mount+1)& (0+255),w,b
  9835  0001FA  1185               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9836  0001FC  6F89               	movwf	(??_pf_mount+15)& (0+255),b
  9837  0001FE  0E00               	movlw	0
  9838  000200  1186               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9839  000202  6F8A               	movwf	(??_pf_mount+16)& (0+255),b
  9840  000204  0E00               	movlw	0
  9841  000206  1187               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9842  000208  6F8B               	movwf	(??_pf_mount+17)& (0+255),b
  9843  00020A  51A7               	movf	(pf_mount@buf+23)& (0+255),w,b
  9844  00020C  1188               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9845  00020E  6FC0               	movwf	pf_mount@fsize& (0+255),b
  9846  000210  5189               	movf	(??_pf_mount+15)& (0+255),w,b
  9847  000212  6FC1               	movwf	(pf_mount@fsize+1)& (0+255),b
  9848  000214  518A               	movf	(??_pf_mount+16)& (0+255),w,b
  9849  000216  6FC2               	movwf	(pf_mount@fsize+2)& (0+255),b
  9850  000218  518B               	movf	(??_pf_mount+17)& (0+255),w,b
  9851  00021A  6FC3               	movwf	(pf_mount@fsize+3)& (0+255),b
  9852  00021C                     l780:
  9853                           
  9854                           ; BSR set to: 0
  9855                           ;pff.c: 789: fsize *= buf[16-13];
  9856                           
  9857                           ; BSR set to: 0
  9858  00021C  C0C0  F01A         	movff	pf_mount@fsize,___lmul@multiplier
  9859  000220  C0C1  F01B         	movff	pf_mount@fsize+1,___lmul@multiplier+1
  9860  000224  C0C2  F01C         	movff	pf_mount@fsize+2,___lmul@multiplier+2
  9861  000228  C0C3  F01D         	movff	pf_mount@fsize+3,___lmul@multiplier+3
  9862  00022C  5193               	movf	(pf_mount@buf+3)& (0+255),w,b
  9863  00022E  6E1E               	movwf	___lmul@multiplicand,c
  9864  000230  6A1F               	clrf	___lmul@multiplicand+1,c
  9865  000232  6A20               	clrf	___lmul@multiplicand+2,c
  9866  000234  6A21               	clrf	___lmul@multiplicand+3,c
  9867  000236  ECB5  F018         	call	___lmul	;wreg free
  9868  00023A  C01A  F0C0         	movff	?___lmul,pf_mount@fsize
  9869  00023E  C01B  F0C1         	movff	?___lmul+1,pf_mount@fsize+1
  9870  000242  C01C  F0C2         	movff	?___lmul+2,pf_mount@fsize+2
  9871  000246  C01D  F0C3         	movff	?___lmul+3,pf_mount@fsize+3
  9872                           
  9873                           ;pff.c: 790: fs->fatbase = bsect + (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYT
      +                          E*)(buf+14-13));
  9874  00024A  0100               	movlb	0	; () banked
  9875  00024C  5191               	movf	(pf_mount@buf+1)& (0+255),w,b
  9876  00024E  C092  F07A         	movff	pf_mount@buf+2,??_pf_mount
  9877  000252  6B7B               	clrf	(??_pf_mount+1)& (0+255),b
  9878  000254  C07A  F07B         	movff	??_pf_mount,??_pf_mount+1
  9879  000258  6B7A               	clrf	??_pf_mount& (0+255),b
  9880  00025A  137A               	iorwf	??_pf_mount& (0+255),f,b
  9881  00025C  0E00               	movlw	0
  9882  00025E  137B               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9883  000260  517A               	movf	??_pf_mount& (0+255),w,b
  9884  000262  25BC               	addwf	pf_mount@bsect& (0+255),w,b
  9885  000264  6F7C               	movwf	(??_pf_mount+2)& (0+255),b
  9886  000266  517B               	movf	(??_pf_mount+1)& (0+255),w,b
  9887  000268  21BD               	addwfc	(pf_mount@bsect+1)& (0+255),w,b
  9888  00026A  6F7D               	movwf	(??_pf_mount+3)& (0+255),b
  9889  00026C  0E00               	movlw	0
  9890  00026E  21BE               	addwfc	(pf_mount@bsect+2)& (0+255),w,b
  9891  000270  6F7E               	movwf	(??_pf_mount+4)& (0+255),b
  9892  000272  0E00               	movlw	0
  9893  000274  21BF               	addwfc	(pf_mount@bsect+3)& (0+255),w,b
  9894  000276  6F7F               	movwf	(??_pf_mount+5)& (0+255),b
  9895  000278  EE20 F00A          	lfsr	2,10
  9896  00027C  5178               	movf	pf_mount@fs& (0+255),w,b
  9897  00027E  26D9               	addwf	fsr2l,f,c
  9898  000280  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
  9899  000282  22DA               	addwfc	fsr2h,f,c
  9900  000284  C07C  FFDE         	movff	??_pf_mount+2,postinc2
  9901  000288  C07D  FFDE         	movff	??_pf_mount+3,postinc2
  9902  00028C  C07E  FFDE         	movff	??_pf_mount+4,postinc2
  9903  000290  C07F  FFDE         	movff	??_pf_mount+5,postinc2
  9904                           
  9905                           ; BSR set to: 0
  9906                           ;pff.c: 791: fs->csize = buf[13-13];
  9907  000294  EE20 F002          	lfsr	2,2
  9908  000298  5178               	movf	pf_mount@fs& (0+255),w,b
  9909  00029A  26D9               	addwf	fsr2l,f,c
  9910  00029C  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
  9911  00029E  22DA               	addwfc	fsr2h,f,c
  9912  0002A0  C090  FFDF         	movff	pf_mount@buf,indf2
  9913                           
  9914                           ; BSR set to: 0
  9915                           ;pff.c: 792: fs->n_rootdir = (WORD)(((WORD)*((BYTE*)(buf+17-13)+1)<<8)|(WORD)*(BYTE*)(bu
      +                          f+17-13));
  9916  0002A4  5194               	movf	(pf_mount@buf+4)& (0+255),w,b
  9917  0002A6  C095  F07A         	movff	pf_mount@buf+5,??_pf_mount
  9918  0002AA  6B7B               	clrf	(??_pf_mount+1)& (0+255),b
  9919  0002AC  C07A  F07B         	movff	??_pf_mount,??_pf_mount+1
  9920  0002B0  6B7A               	clrf	??_pf_mount& (0+255),b
  9921  0002B2  137A               	iorwf	??_pf_mount& (0+255),f,b
  9922  0002B4  0E00               	movlw	0
  9923  0002B6  137B               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9924  0002B8  EE20 F004          	lfsr	2,4
  9925  0002BC  5178               	movf	pf_mount@fs& (0+255),w,b
  9926  0002BE  26D9               	addwf	fsr2l,f,c
  9927  0002C0  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
  9928  0002C2  22DA               	addwfc	fsr2h,f,c
  9929  0002C4  C07A  FFDE         	movff	??_pf_mount,postinc2
  9930  0002C8  C07B  FFDD         	movff	??_pf_mount+1,postdec2
  9931                           
  9932                           ; BSR set to: 0
  9933                           ;pff.c: 793: tsect = (WORD)(((WORD)*((BYTE*)(buf+19-13)+1)<<8)|(WORD)*(BYTE*)(buf+19-13)
      +                          );
  9934  0002CC  5196               	movf	(pf_mount@buf+6)& (0+255),w,b
  9935  0002CE  C097  F07A         	movff	pf_mount@buf+7,??_pf_mount
  9936  0002D2  6B7B               	clrf	(??_pf_mount+1)& (0+255),b
  9937  0002D4  C07A  F07B         	movff	??_pf_mount,??_pf_mount+1
  9938  0002D8  6B7A               	clrf	??_pf_mount& (0+255),b
  9939  0002DA  137A               	iorwf	??_pf_mount& (0+255),f,b
  9940  0002DC  0E00               	movlw	0
  9941  0002DE  137B               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9942  0002E0  C07A  F0B4         	movff	??_pf_mount,pf_mount@tsect
  9943  0002E4  C07B  F0B5         	movff	??_pf_mount+1,pf_mount@tsect+1
  9944  0002E8  6BB6               	clrf	(pf_mount@tsect+2)& (0+255),b
  9945  0002EA  6BB7               	clrf	(pf_mount@tsect+3)& (0+255),b
  9946                           
  9947                           ; BSR set to: 0
  9948                           ;pff.c: 794: if (!tsect) tsect = (DWORD)(((DWORD)*((BYTE*)(buf+32-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+32-13)+2)<<16)|((WORD)*((BYTE*)(buf+32-13)+1)<<8)|*(BYTE*)(buf+32-13));
  9949  0002EC  51B4               	movf	pf_mount@tsect& (0+255),w,b
  9950  0002EE  11B5               	iorwf	(pf_mount@tsect+1)& (0+255),w,b
  9951  0002F0  11B6               	iorwf	(pf_mount@tsect+2)& (0+255),w,b
  9952  0002F2  11B7               	iorwf	(pf_mount@tsect+3)& (0+255),w,b
  9953  0002F4  A4D8               	btfss	status,2,c
  9954  0002F6  D039               	goto	l781
  9955                           
  9956                           ; BSR set to: 0
  9957  0002F8  51A4               	movf	(pf_mount@buf+20)& (0+255),w,b
  9958  0002FA  6F7B               	movwf	(??_pf_mount+1)& (0+255),b
  9959  0002FC  6B7A               	clrf	??_pf_mount& (0+255),b
  9960  0002FE  C0A5  F07C         	movff	pf_mount@buf+21,??_pf_mount+2
  9961  000302  6B7D               	clrf	(??_pf_mount+3)& (0+255),b
  9962  000304  6B7E               	clrf	(??_pf_mount+4)& (0+255),b
  9963  000306  6B7F               	clrf	(??_pf_mount+5)& (0+255),b
  9964  000308  C07D  F07F         	movff	??_pf_mount+3,??_pf_mount+5
  9965  00030C  C07C  F07E         	movff	??_pf_mount+2,??_pf_mount+4
  9966  000310  6B7D               	clrf	(??_pf_mount+3)& (0+255),b
  9967  000312  6B7C               	clrf	(??_pf_mount+2)& (0+255),b
  9968  000314  C0A6  F080         	movff	pf_mount@buf+22,??_pf_mount+6
  9969  000318  6B81               	clrf	(??_pf_mount+7)& (0+255),b
  9970  00031A  6B82               	clrf	(??_pf_mount+8)& (0+255),b
  9971  00031C  6B83               	clrf	(??_pf_mount+9)& (0+255),b
  9972  00031E  C080  F083         	movff	??_pf_mount+6,??_pf_mount+9
  9973  000322  6B82               	clrf	(??_pf_mount+8)& (0+255),b
  9974  000324  6B81               	clrf	(??_pf_mount+7)& (0+255),b
  9975  000326  6B80               	clrf	(??_pf_mount+6)& (0+255),b
  9976  000328  517C               	movf	(??_pf_mount+2)& (0+255),w,b
  9977  00032A  1180               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9978  00032C  6F84               	movwf	(??_pf_mount+10)& (0+255),b
  9979  00032E  517D               	movf	(??_pf_mount+3)& (0+255),w,b
  9980  000330  1181               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9981  000332  6F85               	movwf	(??_pf_mount+11)& (0+255),b
  9982  000334  517E               	movf	(??_pf_mount+4)& (0+255),w,b
  9983  000336  1182               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9984  000338  6F86               	movwf	(??_pf_mount+12)& (0+255),b
  9985  00033A  517F               	movf	(??_pf_mount+5)& (0+255),w,b
  9986  00033C  1183               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9987  00033E  6F87               	movwf	(??_pf_mount+13)& (0+255),b
  9988  000340  517A               	movf	??_pf_mount& (0+255),w,b
  9989  000342  1184               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9990  000344  6F88               	movwf	(??_pf_mount+14)& (0+255),b
  9991  000346  517B               	movf	(??_pf_mount+1)& (0+255),w,b
  9992  000348  1185               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9993  00034A  6F89               	movwf	(??_pf_mount+15)& (0+255),b
  9994  00034C  0E00               	movlw	0
  9995  00034E  1186               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9996  000350  6F8A               	movwf	(??_pf_mount+16)& (0+255),b
  9997  000352  0E00               	movlw	0
  9998  000354  1187               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9999  000356  6F8B               	movwf	(??_pf_mount+17)& (0+255),b
 10000  000358  51A3               	movf	(pf_mount@buf+19)& (0+255),w,b
 10001  00035A  1188               	iorwf	(??_pf_mount+14)& (0+255),w,b
 10002  00035C  6FB4               	movwf	pf_mount@tsect& (0+255),b
 10003  00035E  5189               	movf	(??_pf_mount+15)& (0+255),w,b
 10004  000360  6FB5               	movwf	(pf_mount@tsect+1)& (0+255),b
 10005  000362  518A               	movf	(??_pf_mount+16)& (0+255),w,b
 10006  000364  6FB6               	movwf	(pf_mount@tsect+2)& (0+255),b
 10007  000366  518B               	movf	(??_pf_mount+17)& (0+255),w,b
 10008  000368  6FB7               	movwf	(pf_mount@tsect+3)& (0+255),b
 10009  00036A                     l781:
 10010                           
 10011                           ; BSR set to: 0
 10012                           ;pff.c: 795: mclst = (tsect
 10013                           ;pff.c: 796: - (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYTE*)(buf+14-13)) - fs
      +                          ize - fs->n_rootdir / 16
 10014                           ;pff.c: 797: ) / fs->csize + 2;
 10015                           
 10016                           ; BSR set to: 0
 10017  00036A  EE20 F004          	lfsr	2,4
 10018  00036E  5178               	movf	pf_mount@fs& (0+255),w,b
 10019  000370  26D9               	addwf	fsr2l,f,c
 10020  000372  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
 10021  000374  22DA               	addwfc	fsr2h,f,c
 10022  000376  CFDE F07A          	movff	postinc2,??_pf_mount
 10023  00037A  CFDD F07B          	movff	postdec2,??_pf_mount+1
 10024  00037E  0E04               	movlw	4
 10025  000380  6F7C               	movwf	(??_pf_mount+2)& (0+255),b
 10026  000382                     u10155:
 10027  000382  90D8               	bcf	status,0,c
 10028  000384  337B               	rrcf	(??_pf_mount+1)& (0+255),f,b
 10029  000386  337A               	rrcf	??_pf_mount& (0+255),f,b
 10030  000388  2F7C               	decfsz	(??_pf_mount+2)& (0+255),f,b
 10031  00038A  D7FB               	goto	u10155
 10032  00038C  5191               	movf	(pf_mount@buf+1)& (0+255),w,b
 10033  00038E  C092  F07D         	movff	pf_mount@buf+2,??_pf_mount+3
 10034  000392  6B7E               	clrf	(??_pf_mount+4)& (0+255),b
 10035  000394  C07D  F07E         	movff	??_pf_mount+3,??_pf_mount+4
 10036  000398  6B7D               	clrf	(??_pf_mount+3)& (0+255),b
 10037  00039A  137D               	iorwf	(??_pf_mount+3)& (0+255),f,b
 10038  00039C  0E00               	movlw	0
 10039  00039E  137E               	iorwf	(??_pf_mount+4)& (0+255),f,b
 10040  0003A0  517D               	movf	(??_pf_mount+3)& (0+255),w,b
 10041  0003A2  257A               	addwf	??_pf_mount& (0+255),w,b
 10042  0003A4  6F7F               	movwf	(??_pf_mount+5)& (0+255),b
 10043  0003A6  517E               	movf	(??_pf_mount+4)& (0+255),w,b
 10044  0003A8  217B               	addwfc	(??_pf_mount+1)& (0+255),w,b
 10045  0003AA  6F80               	movwf	(??_pf_mount+6)& (0+255),b
 10046  0003AC  6B81               	clrf	(??_pf_mount+7)& (0+255),b
 10047  0003AE  B0D8               	btfsc	status,0,c
 10048  0003B0  2B81               	incf	(??_pf_mount+7)& (0+255),f,b
 10049  0003B2  6B82               	clrf	(??_pf_mount+8)& (0+255),b
 10050  0003B4  51C0               	movf	pf_mount@fsize& (0+255),w,b
 10051  0003B6  257F               	addwf	(??_pf_mount+5)& (0+255),w,b
 10052  0003B8  6F83               	movwf	(??_pf_mount+9)& (0+255),b
 10053  0003BA  51C1               	movf	(pf_mount@fsize+1)& (0+255),w,b
 10054  0003BC  2180               	addwfc	(??_pf_mount+6)& (0+255),w,b
 10055  0003BE  6F84               	movwf	(??_pf_mount+10)& (0+255),b
 10056  0003C0  51C2               	movf	(pf_mount@fsize+2)& (0+255),w,b
 10057  0003C2  2181               	addwfc	(??_pf_mount+7)& (0+255),w,b
 10058  0003C4  6F85               	movwf	(??_pf_mount+11)& (0+255),b
 10059  0003C6  51C3               	movf	(pf_mount@fsize+3)& (0+255),w,b
 10060  0003C8  2182               	addwfc	(??_pf_mount+8)& (0+255),w,b
 10061  0003CA  6F86               	movwf	(??_pf_mount+12)& (0+255),b
 10062  0003CC  1F83               	comf	(??_pf_mount+9)& (0+255),f,b
 10063  0003CE  1F84               	comf	(??_pf_mount+10)& (0+255),f,b
 10064  0003D0  1F85               	comf	(??_pf_mount+11)& (0+255),f,b
 10065  0003D2  1F86               	comf	(??_pf_mount+12)& (0+255),f,b
 10066  0003D4  2B83               	incf	(??_pf_mount+9)& (0+255),f,b
 10067  0003D6  0E00               	movlw	0
 10068  0003D8  2384               	addwfc	(??_pf_mount+10)& (0+255),f,b
 10069  0003DA  2385               	addwfc	(??_pf_mount+11)& (0+255),f,b
 10070  0003DC  2386               	addwfc	(??_pf_mount+12)& (0+255),f,b
 10071  0003DE  51B4               	movf	pf_mount@tsect& (0+255),w,b
 10072  0003E0  2583               	addwf	(??_pf_mount+9)& (0+255),w,b
 10073  0003E2  6E1A               	movwf	___lldiv@dividend,c
 10074  0003E4  51B5               	movf	(pf_mount@tsect+1)& (0+255),w,b
 10075  0003E6  2184               	addwfc	(??_pf_mount+10)& (0+255),w,b
 10076  0003E8  6E1B               	movwf	___lldiv@dividend+1,c
 10077  0003EA  51B6               	movf	(pf_mount@tsect+2)& (0+255),w,b
 10078  0003EC  2185               	addwfc	(??_pf_mount+11)& (0+255),w,b
 10079  0003EE  6E1C               	movwf	___lldiv@dividend+2,c
 10080  0003F0  51B7               	movf	(pf_mount@tsect+3)& (0+255),w,b
 10081  0003F2  2186               	addwfc	(??_pf_mount+12)& (0+255),w,b
 10082  0003F4  6E1D               	movwf	___lldiv@dividend+3,c
 10083  0003F6  EE20 F002          	lfsr	2,2
 10084  0003FA  5178               	movf	pf_mount@fs& (0+255),w,b
 10085  0003FC  26D9               	addwf	fsr2l,f,c
 10086  0003FE  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
 10087  000400  22DA               	addwfc	fsr2h,f,c
 10088  000402  50DF               	movf	indf2,w,c
 10089  000404  6F87               	movwf	(??_pf_mount+13)& (0+255),b
 10090  000406  5187               	movf	(??_pf_mount+13)& (0+255),w,b
 10091  000408  6E1E               	movwf	___lldiv@divisor,c
 10092  00040A  6A1F               	clrf	___lldiv@divisor+1,c
 10093  00040C  6A20               	clrf	___lldiv@divisor+2,c
 10094  00040E  6A21               	clrf	___lldiv@divisor+3,c
 10095  000410  EC48  F016         	call	___lldiv	;wreg free
 10096  000414  0E02               	movlw	2
 10097  000416  241A               	addwf	?___lldiv,w,c
 10098  000418  0100               	movlb	0	; () banked
 10099  00041A  6FB8               	movwf	pf_mount@mclst& (0+255),b
 10100  00041C  0E00               	movlw	0
 10101  00041E  201B               	addwfc	?___lldiv+1,w,c
 10102  000420  6FB9               	movwf	(pf_mount@mclst+1)& (0+255),b
 10103  000422  0E00               	movlw	0
 10104  000424  201C               	addwfc	?___lldiv+2,w,c
 10105  000426  6FBA               	movwf	(pf_mount@mclst+2)& (0+255),b
 10106  000428  0E00               	movlw	0
 10107  00042A  201D               	addwfc	?___lldiv+3,w,c
 10108  00042C  6FBB               	movwf	(pf_mount@mclst+3)& (0+255),b
 10109                           
 10110                           ; BSR set to: 0
 10111                           ;pff.c: 798: fs->n_fatent = (DWORD)mclst;
 10112  00042E  EE20 F006          	lfsr	2,6
 10113  000432  5178               	movf	pf_mount@fs& (0+255),w,b
 10114  000434  26D9               	addwf	fsr2l,f,c
 10115  000436  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
 10116  000438  22DA               	addwfc	fsr2h,f,c
 10117  00043A  C0B8  FFDE         	movff	pf_mount@mclst,postinc2
 10118  00043E  C0B9  FFDE         	movff	pf_mount@mclst+1,postinc2
 10119  000442  C0BA  FFDE         	movff	pf_mount@mclst+2,postinc2
 10120  000446  C0BB  FFDE         	movff	pf_mount@mclst+3,postinc2
 10121                           
 10122                           ; BSR set to: 0
 10123                           ;pff.c: 801: if (1 && mclst < 0xFF7)
 10124  00044A  0E00               	movlw	0
 10125  00044C  6FC4               	movwf	pf_mount@fmt& (0+255),b
 10126                           
 10127                           ; BSR set to: 0
 10128  00044E  51BB               	movf	(pf_mount@mclst+3)& (0+255),w,b
 10129  000450  11BA               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
 10130  000452  E108               	bnz	l8940
 10131  000454  0EF7               	movlw	247
 10132  000456  5DB8               	subwf	pf_mount@mclst& (0+255),w,b
 10133  000458  0E0F               	movlw	15
 10134  00045A  59B9               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
 10135  00045C  B0D8               	btfsc	status,0,c
 10136  00045E  D002               	goto	l782
 10137                           
 10138                           ; BSR set to: 0
 10139                           ;pff.c: 802: fmt = 1;
 10140  000460  0E01               	movlw	1
 10141  000462  6FC4               	movwf	pf_mount@fmt& (0+255),b
 10142  000464                     l782:
 10143  000464                     l8940:
 10144                           
 10145                           ; BSR set to: 0
 10146  000464  51BB               	movf	(pf_mount@mclst+3)& (0+255),w,b
 10147  000466  11BA               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
 10148  000468  E106               	bnz	u10170
 10149  00046A  0EF8               	movlw	248
 10150  00046C  5DB8               	subwf	pf_mount@mclst& (0+255),w,b
 10151  00046E  0E0F               	movlw	15
 10152  000470  59B9               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
 10153  000472  A0D8               	btfss	status,0,c
 10154  000474  D00B               	goto	l783
 10155  000476                     u10170:
 10156                           
 10157                           ; BSR set to: 0
 10158  000476  51BB               	movf	(pf_mount@mclst+3)& (0+255),w,b
 10159  000478  11BA               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
 10160  00047A  E108               	bnz	l8946
 10161  00047C  0EF7               	movlw	247
 10162  00047E  5DB8               	subwf	pf_mount@mclst& (0+255),w,b
 10163  000480  0EFF               	movlw	255
 10164  000482  59B9               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
 10165  000484  B0D8               	btfsc	status,0,c
 10166  000486  D002               	goto	l783
 10167                           
 10168                           ; BSR set to: 0
 10169                           ;pff.c: 804: fmt = 2;
 10170  000488  0E02               	movlw	2
 10171  00048A  6FC4               	movwf	pf_mount@fmt& (0+255),b
 10172  00048C                     l783:
 10173  00048C                     l8946:
 10174                           
 10175                           ; BSR set to: 0
 10176  00048C  51BB               	movf	(pf_mount@mclst+3)& (0+255),w,b
 10177  00048E  11BA               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
 10178  000490  E106               	bnz	u10190
 10179  000492  0EF7               	movlw	247
 10180  000494  5DB8               	subwf	pf_mount@mclst& (0+255),w,b
 10181  000496  0EFF               	movlw	255
 10182  000498  59B9               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
 10183  00049A  A0D8               	btfss	status,0,c
 10184  00049C  D002               	goto	l784
 10185  00049E                     u10190:
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;pff.c: 806: fmt = 3;
 10189  00049E  0E03               	movlw	3
 10190  0004A0  6FC4               	movwf	pf_mount@fmt& (0+255),b
 10191  0004A2                     l784:
 10192                           
 10193                           ; BSR set to: 0
 10194                           ;pff.c: 807: if (!fmt) return FR_NO_FILESYSTEM;
 10195  0004A2  51C4               	movf	pf_mount@fmt& (0+255),w,b
 10196  0004A4  A4D8               	btfss	status,2,c
 10197  0004A6  D002               	goto	l785
 10198                           
 10199                           ; BSR set to: 0
 10200  0004A8  0E06               	movlw	6
 10201                           
 10202                           ; BSR set to: 0
 10203  0004AA  0012               	return	
 10204  0004AC                     l785:
 10205                           
 10206                           ; BSR set to: 0
 10207                           ;pff.c: 810: if (0 || (1 && fmt == 3))
 10208                           
 10209                           ; BSR set to: 0
 10210  0004AC  C078  FFD9         	movff	pf_mount@fs,fsr2l
 10211  0004B0  C079  FFDA         	movff	pf_mount@fs+1,fsr2h
 10212  0004B4  C0C4  FFDF         	movff	pf_mount@fmt,indf2
 10213                           
 10214                           ; BSR set to: 0
 10215  0004B8  0E03               	movlw	3
 10216  0004BA  19C4               	xorwf	pf_mount@fmt& (0+255),w,b
 10217  0004BC  A4D8               	btfss	status,2,c
 10218  0004BE  D048               	goto	l786
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;pff.c: 811: fs->dirbase = (DWORD)(((DWORD)*((BYTE*)(buf+(44-13))+3)<<24)|((DWORD)*((BYT
      +                          E*)(buf+(44-13))+2)<<16)|((WORD)*((BYTE*)(buf+(44-13))+1)<<8)|*(BYTE*)(buf+(44-13)));
 10222                           
 10223                           ; BSR set to: 0
 10224  0004C0  51B0               	movf	(pf_mount@buf+32)& (0+255),w,b
 10225  0004C2  6F7B               	movwf	(??_pf_mount+1)& (0+255),b
 10226  0004C4  6B7A               	clrf	??_pf_mount& (0+255),b
 10227  0004C6  C0B1  F07C         	movff	pf_mount@buf+33,??_pf_mount+2
 10228  0004CA  6B7D               	clrf	(??_pf_mount+3)& (0+255),b
 10229  0004CC  6B7E               	clrf	(??_pf_mount+4)& (0+255),b
 10230  0004CE  6B7F               	clrf	(??_pf_mount+5)& (0+255),b
 10231  0004D0  C07D  F07F         	movff	??_pf_mount+3,??_pf_mount+5
 10232  0004D4  C07C  F07E         	movff	??_pf_mount+2,??_pf_mount+4
 10233  0004D8  6B7D               	clrf	(??_pf_mount+3)& (0+255),b
 10234  0004DA  6B7C               	clrf	(??_pf_mount+2)& (0+255),b
 10235  0004DC  C0B2  F080         	movff	pf_mount@buf+34,??_pf_mount+6
 10236  0004E0  6B81               	clrf	(??_pf_mount+7)& (0+255),b
 10237  0004E2  6B82               	clrf	(??_pf_mount+8)& (0+255),b
 10238  0004E4  6B83               	clrf	(??_pf_mount+9)& (0+255),b
 10239  0004E6  C080  F083         	movff	??_pf_mount+6,??_pf_mount+9
 10240  0004EA  6B82               	clrf	(??_pf_mount+8)& (0+255),b
 10241  0004EC  6B81               	clrf	(??_pf_mount+7)& (0+255),b
 10242  0004EE  6B80               	clrf	(??_pf_mount+6)& (0+255),b
 10243  0004F0  517C               	movf	(??_pf_mount+2)& (0+255),w,b
 10244  0004F2  1180               	iorwf	(??_pf_mount+6)& (0+255),w,b
 10245  0004F4  6F84               	movwf	(??_pf_mount+10)& (0+255),b
 10246  0004F6  517D               	movf	(??_pf_mount+3)& (0+255),w,b
 10247  0004F8  1181               	iorwf	(??_pf_mount+7)& (0+255),w,b
 10248  0004FA  6F85               	movwf	(??_pf_mount+11)& (0+255),b
 10249  0004FC  517E               	movf	(??_pf_mount+4)& (0+255),w,b
 10250  0004FE  1182               	iorwf	(??_pf_mount+8)& (0+255),w,b
 10251  000500  6F86               	movwf	(??_pf_mount+12)& (0+255),b
 10252  000502  517F               	movf	(??_pf_mount+5)& (0+255),w,b
 10253  000504  1183               	iorwf	(??_pf_mount+9)& (0+255),w,b
 10254  000506  6F87               	movwf	(??_pf_mount+13)& (0+255),b
 10255  000508  517A               	movf	??_pf_mount& (0+255),w,b
 10256  00050A  1184               	iorwf	(??_pf_mount+10)& (0+255),w,b
 10257  00050C  6F88               	movwf	(??_pf_mount+14)& (0+255),b
 10258  00050E  517B               	movf	(??_pf_mount+1)& (0+255),w,b
 10259  000510  1185               	iorwf	(??_pf_mount+11)& (0+255),w,b
 10260  000512  6F89               	movwf	(??_pf_mount+15)& (0+255),b
 10261  000514  0E00               	movlw	0
 10262  000516  1186               	iorwf	(??_pf_mount+12)& (0+255),w,b
 10263  000518  6F8A               	movwf	(??_pf_mount+16)& (0+255),b
 10264  00051A  0E00               	movlw	0
 10265  00051C  1187               	iorwf	(??_pf_mount+13)& (0+255),w,b
 10266  00051E  6F8B               	movwf	(??_pf_mount+17)& (0+255),b
 10267  000520  51AF               	movf	(pf_mount@buf+31)& (0+255),w,b
 10268  000522  1188               	iorwf	(??_pf_mount+14)& (0+255),w,b
 10269  000524  6F8C               	movwf	(??_pf_mount+18)& (0+255),b
 10270  000526  5189               	movf	(??_pf_mount+15)& (0+255),w,b
 10271  000528  6F8D               	movwf	(??_pf_mount+19)& (0+255),b
 10272  00052A  518A               	movf	(??_pf_mount+16)& (0+255),w,b
 10273  00052C  6F8E               	movwf	(??_pf_mount+20)& (0+255),b
 10274  00052E  518B               	movf	(??_pf_mount+17)& (0+255),w,b
 10275  000530  6F8F               	movwf	(??_pf_mount+21)& (0+255),b
 10276  000532  EE20 F00E          	lfsr	2,14
 10277  000536  5178               	movf	pf_mount@fs& (0+255),w,b
 10278  000538  26D9               	addwf	fsr2l,f,c
 10279  00053A  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
 10280  00053C  22DA               	addwfc	fsr2h,f,c
 10281  00053E  C08C  FFDE         	movff	??_pf_mount+18,postinc2
 10282  000542  C08D  FFDE         	movff	??_pf_mount+19,postinc2
 10283  000546  C08E  FFDE         	movff	??_pf_mount+20,postinc2
 10284  00054A  C08F  FFDE         	movff	??_pf_mount+21,postinc2
 10285  00054E  D028               	goto	l789
 10286  000550                     l786:
 10287                           
 10288                           ; BSR set to: 0
 10289                           ;pff.c: 812: else
 10290                           ;pff.c: 813: fs->dirbase = fs->fatbase + fsize;
 10291                           
 10292                           ; BSR set to: 0
 10293  000550  EE20 F00A          	lfsr	2,10
 10294  000554  5178               	movf	pf_mount@fs& (0+255),w,b
 10295  000556  26D9               	addwf	fsr2l,f,c
 10296  000558  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
 10297  00055A  22DA               	addwfc	fsr2h,f,c
 10298  00055C  CFDE F07A          	movff	postinc2,??_pf_mount
 10299  000560  CFDE F07B          	movff	postinc2,??_pf_mount+1
 10300  000564  CFDE F07C          	movff	postinc2,??_pf_mount+2
 10301  000568  CFDE F07D          	movff	postinc2,??_pf_mount+3
 10302  00056C  51C0               	movf	pf_mount@fsize& (0+255),w,b
 10303  00056E  257A               	addwf	??_pf_mount& (0+255),w,b
 10304  000570  6F7E               	movwf	(??_pf_mount+4)& (0+255),b
 10305  000572  51C1               	movf	(pf_mount@fsize+1)& (0+255),w,b
 10306  000574  217B               	addwfc	(??_pf_mount+1)& (0+255),w,b
 10307  000576  6F7F               	movwf	(??_pf_mount+5)& (0+255),b
 10308  000578  51C2               	movf	(pf_mount@fsize+2)& (0+255),w,b
 10309  00057A  217C               	addwfc	(??_pf_mount+2)& (0+255),w,b
 10310  00057C  6F80               	movwf	(??_pf_mount+6)& (0+255),b
 10311  00057E  51C3               	movf	(pf_mount@fsize+3)& (0+255),w,b
 10312  000580  217D               	addwfc	(??_pf_mount+3)& (0+255),w,b
 10313  000582  6F81               	movwf	(??_pf_mount+7)& (0+255),b
 10314  000584  EE20 F00E          	lfsr	2,14
 10315  000588  5178               	movf	pf_mount@fs& (0+255),w,b
 10316  00058A  26D9               	addwf	fsr2l,f,c
 10317  00058C  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
 10318  00058E  22DA               	addwfc	fsr2h,f,c
 10319  000590  C07E  FFDE         	movff	??_pf_mount+4,postinc2
 10320  000594  C07F  FFDE         	movff	??_pf_mount+5,postinc2
 10321  000598  C080  FFDE         	movff	??_pf_mount+6,postinc2
 10322  00059C  C081  FFDE         	movff	??_pf_mount+7,postinc2
 10323  0005A0                     l789:
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;pff.c: 814: fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;
 10327  0005A0  EE20 F00A          	lfsr	2,10
 10328  0005A4  5178               	movf	pf_mount@fs& (0+255),w,b
 10329  0005A6  26D9               	addwf	fsr2l,f,c
 10330  0005A8  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
 10331  0005AA  22DA               	addwfc	fsr2h,f,c
 10332  0005AC  CFDE F07A          	movff	postinc2,??_pf_mount
 10333  0005B0  CFDE F07B          	movff	postinc2,??_pf_mount+1
 10334  0005B4  CFDE F07C          	movff	postinc2,??_pf_mount+2
 10335  0005B8  CFDE F07D          	movff	postinc2,??_pf_mount+3
 10336  0005BC  EE20 F004          	lfsr	2,4
 10337  0005C0  5178               	movf	pf_mount@fs& (0+255),w,b
 10338  0005C2  26D9               	addwf	fsr2l,f,c
 10339  0005C4  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
 10340  0005C6  22DA               	addwfc	fsr2h,f,c
 10341  0005C8  CFDE F07E          	movff	postinc2,??_pf_mount+4
 10342  0005CC  CFDD F07F          	movff	postdec2,??_pf_mount+5
 10343  0005D0  0E04               	movlw	4
 10344  0005D2  6F80               	movwf	(??_pf_mount+6)& (0+255),b
 10345  0005D4                     u10225:
 10346  0005D4  90D8               	bcf	status,0,c
 10347  0005D6  337F               	rrcf	(??_pf_mount+5)& (0+255),f,b
 10348  0005D8  337E               	rrcf	(??_pf_mount+4)& (0+255),f,b
 10349  0005DA  2F80               	decfsz	(??_pf_mount+6)& (0+255),f,b
 10350  0005DC  D7FB               	goto	u10225
 10351  0005DE  517E               	movf	(??_pf_mount+4)& (0+255),w,b
 10352  0005E0  257A               	addwf	??_pf_mount& (0+255),w,b
 10353  0005E2  6F81               	movwf	(??_pf_mount+7)& (0+255),b
 10354  0005E4  517F               	movf	(??_pf_mount+5)& (0+255),w,b
 10355  0005E6  217B               	addwfc	(??_pf_mount+1)& (0+255),w,b
 10356  0005E8  6F82               	movwf	(??_pf_mount+8)& (0+255),b
 10357  0005EA  0E00               	movlw	0
 10358  0005EC  217C               	addwfc	(??_pf_mount+2)& (0+255),w,b
 10359  0005EE  6F83               	movwf	(??_pf_mount+9)& (0+255),b
 10360  0005F0  0E00               	movlw	0
 10361  0005F2  217D               	addwfc	(??_pf_mount+3)& (0+255),w,b
 10362  0005F4  6F84               	movwf	(??_pf_mount+10)& (0+255),b
 10363  0005F6  51C0               	movf	pf_mount@fsize& (0+255),w,b
 10364  0005F8  2581               	addwf	(??_pf_mount+7)& (0+255),w,b
 10365  0005FA  6F85               	movwf	(??_pf_mount+11)& (0+255),b
 10366  0005FC  51C1               	movf	(pf_mount@fsize+1)& (0+255),w,b
 10367  0005FE  2182               	addwfc	(??_pf_mount+8)& (0+255),w,b
 10368  000600  6F86               	movwf	(??_pf_mount+12)& (0+255),b
 10369  000602  51C2               	movf	(pf_mount@fsize+2)& (0+255),w,b
 10370  000604  2183               	addwfc	(??_pf_mount+9)& (0+255),w,b
 10371  000606  6F87               	movwf	(??_pf_mount+13)& (0+255),b
 10372  000608  51C3               	movf	(pf_mount@fsize+3)& (0+255),w,b
 10373  00060A  2184               	addwfc	(??_pf_mount+10)& (0+255),w,b
 10374  00060C  6F88               	movwf	(??_pf_mount+14)& (0+255),b
 10375  00060E  EE20 F012          	lfsr	2,18
 10376  000612  5178               	movf	pf_mount@fs& (0+255),w,b
 10377  000614  26D9               	addwf	fsr2l,f,c
 10378  000616  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
 10379  000618  22DA               	addwfc	fsr2h,f,c
 10380  00061A  C085  FFDE         	movff	??_pf_mount+11,postinc2
 10381  00061E  C086  FFDE         	movff	??_pf_mount+12,postinc2
 10382  000622  C087  FFDE         	movff	??_pf_mount+13,postinc2
 10383  000626  C088  FFDE         	movff	??_pf_mount+14,postinc2
 10384                           
 10385                           ;pff.c: 816: fs->flag = 0;
 10386  00062A  EE20 F001          	lfsr	2,1
 10387  00062E  5178               	movf	pf_mount@fs& (0+255),w,b
 10388  000630  26D9               	addwf	fsr2l,f,c
 10389  000632  5179               	movf	(pf_mount@fs+1)& (0+255),w,b
 10390  000634  22DA               	addwfc	fsr2h,f,c
 10391  000636  0E00               	movlw	0
 10392  000638  6EDF               	movwf	indf2,c
 10393                           
 10394                           ; BSR set to: 0
 10395                           ;pff.c: 817: FatFs = fs;
 10396  00063A  C078  F037         	movff	pf_mount@fs,_FatFs
 10397  00063E  C079  F038         	movff	pf_mount@fs+1,_FatFs+1
 10398                           
 10399                           ; BSR set to: 0
 10400                           ;pff.c: 819: return FR_OK;
 10401  000642  0E00               	movlw	0
 10402  000644  0012               	return	
 10403  000646                     __end_of_pf_mount:
 10404                           	opt stack 0
 10405                           tosu	equ	0xFFF
 10406                           tosh	equ	0xFFE
 10407                           tosl	equ	0xFFD
 10408                           pclath	equ	0xFFA
 10409                           tblptru	equ	0xFF8
 10410                           tblptrh	equ	0xFF7
 10411                           tblptrl	equ	0xFF6
 10412                           tablat	equ	0xFF5
 10413                           prodh	equ	0xFF4
 10414                           prodl	equ	0xFF3
 10415                           intcon	equ	0xFF2
 10416                           intcon2	equ	0xFF1
 10417                           intcon3	equ	0xFF0
 10418                           postinc0	equ	0xFEE
 10419                           wreg	equ	0xFE8
 10420                           indf1	equ	0xFE7
 10421                           postinc1	equ	0xFE6
 10422                           postdec1	equ	0xFE5
 10423                           fsr1h	equ	0xFE2
 10424                           fsr1l	equ	0xFE1
 10425                           indf2	equ	0xFDF
 10426                           postinc2	equ	0xFDE
 10427                           postdec2	equ	0xFDD
 10428                           plusw2	equ	0xFDB
 10429                           fsr2h	equ	0xFDA
 10430                           fsr2l	equ	0xFD9
 10431                           status	equ	0xFD8
 10432                           
 10433 ;; *************** function _disk_initialize *****************
 10434 ;; Defined at:
 10435 ;;		line 54 in file "bibliotecas/diskio.c"
 10436 ;; Parameters:    Size  Location     Type
 10437 ;;		None
 10438 ;; Auto vars:     Size  Location     Type
 10439 ;;  count2          2    7[BANK0 ] int 
 10440 ;;  count1          2    4[BANK0 ] int 
 10441 ;;  i               2    2[BANK0 ] int 
 10442 ;;  buff            1    9[BANK0 ] unsigned char 
 10443 ;;  stat            1    6[BANK0 ] unsigned char 
 10444 ;; Return value:  Size  Location     Type
 10445 ;;                  1    wreg      unsigned char 
 10446 ;; Registers used:
 10447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10448 ;; Tracked objects:
 10449 ;;		On entry : 0/0
 10450 ;;		On exit  : 0/0
 10451 ;;		Unchanged: 0/0
 10452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10453 ;;      Params:         0       0       0       0       0       0       0       0       0
 10454 ;;      Locals:         0       8       0       0       0       0       0       0       0
 10455 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10456 ;;      Totals:         0      10       0       0       0       0       0       0       0
 10457 ;;Total ram usage:       10 bytes
 10458 ;; Hardware stack levels used:    1
 10459 ;; Hardware stack levels required when called:    5
 10460 ;; This function calls:
 10461 ;;		_command
 10462 ;;		_dummy_clocks
 10463 ;;		_escreve_cmd_lcd
 10464 ;;		_escreve_frase_ram_lcd
 10465 ;;		_posicao_cursor_lcd
 10466 ;;		_proceed
 10467 ;;		_reset
 10468 ;;		_response
 10469 ;; This function is called by:
 10470 ;;		_pf_mount
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474                           	psect	text40
 10475  0015C6                     __ptext40:
 10476                           	opt stack 0
 10477  0015C6                     _disk_initialize:
 10478                           	opt stack 22
 10479                           
 10480                           ;diskio.c: 56: DSTATUS stat;
 10481                           ;diskio.c: 57: int i = 0, count1 = 0, count2 = 0;
 10482                           
 10483                           ;incstack = 0
 10484  0015C6  0E00               	movlw	0
 10485  0015C8  0100               	movlb	0	; () banked
 10486  0015CA  6F63               	movwf	(disk_initialize@i+1)& (0+255),b
 10487  0015CC  0E00               	movlw	0
 10488  0015CE  6F62               	movwf	disk_initialize@i& (0+255),b
 10489  0015D0  0E00               	movlw	0
 10490  0015D2  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
 10491  0015D4  0E00               	movlw	0
 10492  0015D6  6F64               	movwf	disk_initialize@count1& (0+255),b
 10493  0015D8  0E00               	movlw	0
 10494  0015DA  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
 10495  0015DC  0E00               	movlw	0
 10496  0015DE  6F67               	movwf	disk_initialize@count2& (0+255),b
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;diskio.c: 58: unsigned char buff;
 10500                           ;diskio.c: 59: reset();
 10501  0015E0  EC04  F017         	call	_reset	;wreg free
 10502                           
 10503                           ;diskio.c: 60: _delay((unsigned long)((500)*(48000000/4000.0)));
 10504  0015E4  0E1F               	movlw	31
 10505  0015E6  0100               	movlb	0	; () banked
 10506  0015E8  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10507  0015EA  0E71               	movlw	113
 10508  0015EC  6F60               	movwf	??_disk_initialize& (0+255),b
 10509  0015EE  0E1E               	movlw	30
 10510  0015F0                     u12157:
 10511  0015F0  2EE8               	decfsz	wreg,f,c
 10512  0015F2  D7FE               	bra	u12157
 10513  0015F4  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10514  0015F6  D7FC               	bra	u12157
 10515  0015F8  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10516  0015FA  D7FA               	bra	u12157
 10517  0015FC  F000               	nop	
 10518                           
 10519                           ;diskio.c: 61: dummy_clocks(8);
 10520  0015FE  0E08               	movlw	8
 10521  001600  ECAC  F019         	call	_dummy_clocks
 10522                           
 10523                           ;diskio.c: 62: command(0X41, 0X00000000, 0XFF);
 10524  001604  0E00               	movlw	0
 10525  001606  6E1E               	movwf	command@arg,c
 10526  001608  0E00               	movlw	0
 10527  00160A  6E1F               	movwf	command@arg+1,c
 10528  00160C  0E00               	movlw	0
 10529  00160E  6E20               	movwf	command@arg+2,c
 10530  001610  0E00               	movlw	0
 10531  001612  6E21               	movwf	command@arg+3,c
 10532  001614  0EFF               	movlw	255
 10533  001616  6E22               	movwf	command@CRC,c
 10534  001618  0E41               	movlw	65
 10535  00161A  EC87  F018         	call	_command
 10536                           
 10537                           ;diskio.c: 63: proceed();
 10538  00161E  ECAA  F01A         	call	_proceed	;wreg free
 10539  001622                     
 10540                           ;diskio.c: 65: buff = response();
 10541  001622  EC9D  F01A         	call	_response	;wreg free
 10542  001626  0100               	movlb	0	; () banked
 10543  001628  6F69               	movwf	disk_initialize@buff& (0+255),b
 10544                           
 10545                           ; BSR set to: 0
 10546                           ;diskio.c: 66: }while(buff!=0x01);
 10547  00162A  0569               	decf	disk_initialize@buff& (0+255),w,b
 10548  00162C  A4D8               	btfss	status,2,c
 10549  00162E  D7F9               	goto	l266
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;diskio.c: 68: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10553                           
 10554                           ; BSR set to: 0
 10555  001630  0E3D               	movlw	61
 10556  001632  0100               	movlb	0	; () banked
 10557  001634  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10558  001636  0EE1               	movlw	225
 10559  001638  6F60               	movwf	??_disk_initialize& (0+255),b
 10560  00163A  0E3F               	movlw	63
 10561  00163C                     u12167:
 10562  00163C  2EE8               	decfsz	wreg,f,c
 10563  00163E  D7FE               	bra	u12167
 10564  001640  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10565  001642  D7FC               	bra	u12167
 10566  001644  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10567  001646  D7FA               	bra	u12167
 10568  001648  D000               	nop2	
 10569                           
 10570                           ;diskio.c: 69: proceed();
 10571  00164A  ECAA  F01A         	call	_proceed	;wreg free
 10572                           
 10573                           ;diskio.c: 70: if (buff == 0x01)
 10574  00164E  0100               	movlb	0	; () banked
 10575  001650  0569               	decf	disk_initialize@buff& (0+255),w,b
 10576  001652  A4D8               	btfss	status,2,c
 10577  001654  D096               	goto	l268
 10578                           
 10579                           ; BSR set to: 0
 10580                           ;diskio.c: 71: {
 10581                           ;diskio.c: 73: _delay((unsigned long)((1)*(48000000/4000.0)));
 10582  001656  0E10               	movlw	16
 10583  001658  0100               	movlb	0	; () banked
 10584  00165A  6F60               	movwf	??_disk_initialize& (0+255),b
 10585  00165C  0E94               	movlw	148
 10586  00165E                     u12177:
 10587  00165E  2EE8               	decfsz	wreg,f,c
 10588  001660  D7FE               	bra	u12177
 10589  001662  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10590  001664  D7FC               	bra	u12177
 10591  001666  F000               	nop	
 10592                           
 10593                           ;diskio.c: 74: count1 = 0;
 10594  001668  0E00               	movlw	0
 10595  00166A  0100               	movlb	0	; () banked
 10596  00166C  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
 10597  00166E  0E00               	movlw	0
 10598  001670  6F64               	movwf	disk_initialize@count1& (0+255),b
 10599  001672                     
 10600                           ; BSR set to: 0
 10601                           ;diskio.c: 76: count2 = 0;
 10602                           
 10603                           ; BSR set to: 0
 10604  001672  0E00               	movlw	0
 10605  001674  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
 10606  001676  0E00               	movlw	0
 10607  001678  6F67               	movwf	disk_initialize@count2& (0+255),b
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;diskio.c: 77: dummy_clocks(8);
 10611  00167A  0E08               	movlw	8
 10612  00167C  ECAC  F019         	call	_dummy_clocks
 10613                           
 10614                           ;diskio.c: 78: command(0X77, 0X00000000, 0X95);
 10615  001680  0E00               	movlw	0
 10616  001682  6E1E               	movwf	command@arg,c
 10617  001684  0E00               	movlw	0
 10618  001686  6E1F               	movwf	command@arg+1,c
 10619  001688  0E00               	movlw	0
 10620  00168A  6E20               	movwf	command@arg+2,c
 10621  00168C  0E00               	movlw	0
 10622  00168E  6E21               	movwf	command@arg+3,c
 10623  001690  0E95               	movlw	149
 10624  001692  6E22               	movwf	command@CRC,c
 10625  001694  0E77               	movlw	119
 10626  001696  EC87  F018         	call	_command
 10627                           
 10628                           ;diskio.c: 79: buff = 0XFF;
 10629  00169A  0100               	movlb	0	; () banked
 10630  00169C  6969               	setf	disk_initialize@buff& (0+255),b
 10631  00169E                     
 10632                           ; BSR set to: 0
 10633                           ;diskio.c: 82: buff = response();
 10634                           
 10635                           ; BSR set to: 0
 10636  00169E  EC9D  F01A         	call	_response	;wreg free
 10637  0016A2  0100               	movlb	0	; () banked
 10638  0016A4  6F69               	movwf	disk_initialize@buff& (0+255),b
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;diskio.c: 83: count2++;
 10642  0016A6  4B67               	infsnz	disk_initialize@count2& (0+255),f,b
 10643  0016A8  2B68               	incf	(disk_initialize@count2+1)& (0+255),f,b
 10644                           
 10645                           ; BSR set to: 0
 10646                           ;diskio.c: 84: }while((buff!=0X01)&&(count2<10));
 10647  0016AA  0569               	decf	disk_initialize@buff& (0+255),w,b
 10648  0016AC  B4D8               	btfsc	status,2,c
 10649  0016AE  D008               	goto	u9780
 10650                           
 10651                           ; BSR set to: 0
 10652  0016B0  BF68               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
 10653  0016B2  D7F5               	goto	l270
 10654  0016B4  5168               	movf	(disk_initialize@count2+1)& (0+255),w,b
 10655  0016B6  E104               	bnz	l8640
 10656  0016B8  0E0A               	movlw	10
 10657  0016BA  5D67               	subwf	disk_initialize@count2& (0+255),w,b
 10658  0016BC  A0D8               	btfss	status,0,c
 10659  0016BE  D7EF               	goto	l270
 10660  0016C0                     u9780:
 10661  0016C0                     l8640:
 10662                           
 10663                           ; BSR set to: 0
 10664                           ;diskio.c: 86: _delay((unsigned long)((1)*(48000000/4000.0)));
 10665  0016C0  0E10               	movlw	16
 10666  0016C2  0100               	movlb	0	; () banked
 10667  0016C4  6F60               	movwf	??_disk_initialize& (0+255),b
 10668  0016C6  0E94               	movlw	148
 10669  0016C8                     u12187:
 10670  0016C8  2EE8               	decfsz	wreg,f,c
 10671  0016CA  D7FE               	bra	u12187
 10672  0016CC  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10673  0016CE  D7FC               	bra	u12187
 10674  0016D0  F000               	nop	
 10675                           
 10676                           ;diskio.c: 87: count2 = 0;
 10677  0016D2  0E00               	movlw	0
 10678  0016D4  0100               	movlb	0	; () banked
 10679  0016D6  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
 10680  0016D8  0E00               	movlw	0
 10681  0016DA  6F67               	movwf	disk_initialize@count2& (0+255),b
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;diskio.c: 88: dummy_clocks(8);
 10685  0016DC  0E08               	movlw	8
 10686  0016DE  ECAC  F019         	call	_dummy_clocks
 10687                           
 10688                           ;diskio.c: 90: command(0X69,0X40000000,0X95);
 10689  0016E2  0E00               	movlw	0
 10690  0016E4  6E1E               	movwf	command@arg,c
 10691  0016E6  0E00               	movlw	0
 10692  0016E8  6E1F               	movwf	command@arg+1,c
 10693  0016EA  0E00               	movlw	0
 10694  0016EC  6E20               	movwf	command@arg+2,c
 10695  0016EE  0E40               	movlw	64
 10696  0016F0  6E21               	movwf	command@arg+3,c
 10697  0016F2  0E95               	movlw	149
 10698  0016F4  6E22               	movwf	command@CRC,c
 10699  0016F6  0E69               	movlw	105
 10700  0016F8  EC87  F018         	call	_command
 10701                           
 10702                           ;diskio.c: 91: buff = 0XFF;
 10703  0016FC  0100               	movlb	0	; () banked
 10704  0016FE  6969               	setf	disk_initialize@buff& (0+255),b
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;diskio.c: 93: proceed();
 10708  001700  ECAA  F01A         	call	_proceed	;wreg free
 10709  001704                     
 10710                           ;diskio.c: 95: buff = response();
 10711  001704  EC9D  F01A         	call	_response	;wreg free
 10712  001708  0100               	movlb	0	; () banked
 10713  00170A  6F69               	movwf	disk_initialize@buff& (0+255),b
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;diskio.c: 96: count2++;
 10717  00170C  4B67               	infsnz	disk_initialize@count2& (0+255),f,b
 10718  00170E  2B68               	incf	(disk_initialize@count2+1)& (0+255),f,b
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;diskio.c: 97: }while((buff!=0X00) && count2<10);
 10722  001710  5169               	movf	disk_initialize@buff& (0+255),w,b
 10723  001712  B4D8               	btfsc	status,2,c
 10724  001714  D008               	goto	u9800
 10725                           
 10726                           ; BSR set to: 0
 10727  001716  BF68               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
 10728  001718  D7F5               	goto	l274
 10729  00171A  5168               	movf	(disk_initialize@count2+1)& (0+255),w,b
 10730  00171C  E104               	bnz	l8660
 10731  00171E  0E0A               	movlw	10
 10732  001720  5D67               	subwf	disk_initialize@count2& (0+255),w,b
 10733  001722  A0D8               	btfss	status,0,c
 10734  001724  D7EF               	goto	l274
 10735  001726                     u9800:
 10736  001726                     l8660:
 10737                           
 10738                           ; BSR set to: 0
 10739                           ;diskio.c: 98: }while(buff != 0X00);
 10740  001726  5169               	movf	disk_initialize@buff& (0+255),w,b
 10741  001728  A4D8               	btfss	status,2,c
 10742  00172A  D7A3               	goto	l269
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;diskio.c: 100: count1 = 0;
 10746                           
 10747                           ; BSR set to: 0
 10748  00172C  0E00               	movlw	0
 10749  00172E  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
 10750  001730  0E00               	movlw	0
 10751  001732  6F64               	movwf	disk_initialize@count1& (0+255),b
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;diskio.c: 102: _delay((unsigned long)((1)*(48000000/4000.0)));
 10755  001734  0E10               	movlw	16
 10756  001736  0100               	movlb	0	; () banked
 10757  001738  6F60               	movwf	??_disk_initialize& (0+255),b
 10758  00173A  0E94               	movlw	148
 10759  00173C                     u12197:
 10760  00173C  2EE8               	decfsz	wreg,f,c
 10761  00173E  D7FE               	bra	u12197
 10762  001740  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10763  001742  D7FC               	bra	u12197
 10764  001744  F000               	nop	
 10765                           
 10766                           ;diskio.c: 103: stat = 0X00;
 10767  001746  0E00               	movlw	0
 10768  001748  0100               	movlb	0	; () banked
 10769  00174A  6F66               	movwf	disk_initialize@stat& (0+255),b
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;diskio.c: 105: escreve_cmd_lcd(0b00000001);
 10773  00174C  0E01               	movlw	1
 10774  00174E  EC02  F016         	call	_escreve_cmd_lcd
 10775                           
 10776                           ;diskio.c: 106: posicao_cursor_lcd(1,0);
 10777  001752  0E00               	movlw	0
 10778  001754  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10779  001756  0E01               	movlw	1
 10780  001758  ECE8  F017         	call	_posicao_cursor_lcd
 10781                           
 10782                           ;diskio.c: 107: escreve_frase_ram_lcd("Cartão Aceito");
 10783  00175C  0E1F               	movlw	low STR_2
 10784  00175E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10785  001760  0E62               	movlw	high STR_2
 10786  001762  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10787  001764  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10788                           
 10789                           ;diskio.c: 108: _delay((unsigned long)((2000)*(48000000/4000.0)));
 10790  001768  0E7A               	movlw	122
 10791  00176A  0100               	movlb	0	; () banked
 10792  00176C  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10793  00176E  0EC1               	movlw	193
 10794  001770  6F60               	movwf	??_disk_initialize& (0+255),b
 10795  001772  0E81               	movlw	129
 10796  001774                     u12207:
 10797  001774  2EE8               	decfsz	wreg,f,c
 10798  001776  D7FE               	bra	u12207
 10799  001778  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10800  00177A  D7FC               	bra	u12207
 10801  00177C  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10802  00177E  D7FA               	bra	u12207
 10803  001780  D021               	goto	L6
 10804  001782                     l268:
 10805                           
 10806                           ;diskio.c: 110: else if(buff == 0x05)
 10807  001782  0E05               	movlw	5
 10808  001784  0100               	movlb	0	; () banked
 10809  001786  1969               	xorwf	disk_initialize@buff& (0+255),w,b
 10810  001788  A4D8               	btfss	status,2,c
 10811  00178A  D01D               	goto	l280
 10812                           
 10813                           ; BSR set to: 0
 10814                           ;diskio.c: 111: {
 10815                           ;diskio.c: 112: stat = 0x01;
 10816  00178C  0E01               	movlw	1
 10817  00178E  6F66               	movwf	disk_initialize@stat& (0+255),b
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;diskio.c: 114: escreve_cmd_lcd(0b00000001);
 10821  001790  0E01               	movlw	1
 10822  001792  EC02  F016         	call	_escreve_cmd_lcd
 10823                           
 10824                           ;diskio.c: 115: posicao_cursor_lcd(1,0);
 10825  001796  0E00               	movlw	0
 10826  001798  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10827  00179A  0E01               	movlw	1
 10828  00179C  ECE8  F017         	call	_posicao_cursor_lcd
 10829                           
 10830                           ;diskio.c: 116: escreve_frase_ram_lcd("Error!!!");
 10831  0017A0  0E5A               	movlw	low STR_3
 10832  0017A2  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10833  0017A4  0E62               	movlw	high STR_3
 10834  0017A6  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10835  0017A8  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10836                           
 10837                           ;diskio.c: 118: _delay((unsigned long)((3000)*(48000000/4000.0)));
 10838  0017AC  0EB7               	movlw	183
 10839  0017AE  0100               	movlb	0	; () banked
 10840  0017B0  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10841  0017B2  0EA1               	movlw	161
 10842  0017B4  6F60               	movwf	??_disk_initialize& (0+255),b
 10843  0017B6  0EC3               	movlw	195
 10844  0017B8                     u12217:
 10845  0017B8  2EE8               	decfsz	wreg,f,c
 10846  0017BA  D7FE               	bra	u12217
 10847  0017BC  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10848  0017BE  D7FC               	bra	u12217
 10849  0017C0  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10850  0017C2  D7FA               	bra	u12217
 10851  0017C4                     L6:
 10852  0017C4  D000               	nop2	
 10853  0017C6                     l280:
 10854                           
 10855                           ;diskio.c: 119: }
 10856                           ;diskio.c: 120: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10857  0017C6  0E3D               	movlw	61
 10858  0017C8  0100               	movlb	0	; () banked
 10859  0017CA  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10860  0017CC  0EE1               	movlw	225
 10861  0017CE  6F60               	movwf	??_disk_initialize& (0+255),b
 10862  0017D0  0E3F               	movlw	63
 10863  0017D2                     u12227:
 10864  0017D2  2EE8               	decfsz	wreg,f,c
 10865  0017D4  D7FE               	bra	u12227
 10866  0017D6  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10867  0017D8  D7FC               	bra	u12227
 10868  0017DA  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10869  0017DC  D7FA               	bra	u12227
 10870  0017DE  D000               	nop2	
 10871                           
 10872                           ;diskio.c: 122: dummy_clocks(8);
 10873  0017E0  0E08               	movlw	8
 10874  0017E2  ECAC  F019         	call	_dummy_clocks
 10875                           
 10876                           ;diskio.c: 123: command(0X50,0X00000200,0XFF);
 10877  0017E6  0E00               	movlw	0
 10878  0017E8  6E1E               	movwf	command@arg,c
 10879  0017EA  0E02               	movlw	2
 10880  0017EC  6E1F               	movwf	command@arg+1,c
 10881  0017EE  0E00               	movlw	0
 10882  0017F0  6E20               	movwf	command@arg+2,c
 10883  0017F2  0E00               	movlw	0
 10884  0017F4  6E21               	movwf	command@arg+3,c
 10885  0017F6  0EFF               	movlw	255
 10886  0017F8  6E22               	movwf	command@CRC,c
 10887  0017FA  0E50               	movlw	80
 10888  0017FC  EC87  F018         	call	_command
 10889                           
 10890                           ;diskio.c: 124: proceed();
 10891  001800  ECAA  F01A         	call	_proceed	;wreg free
 10892  001804                     
 10893                           ;diskio.c: 126: buff = response();
 10894  001804  EC9D  F01A         	call	_response	;wreg free
 10895  001808  0100               	movlb	0	; () banked
 10896  00180A  6F69               	movwf	disk_initialize@buff& (0+255),b
 10897                           
 10898                           ; BSR set to: 0
 10899                           ;diskio.c: 127: }while(buff!=0x00);
 10900  00180C  5169               	movf	disk_initialize@buff& (0+255),w,b
 10901  00180E  A4D8               	btfss	status,2,c
 10902  001810  D7F9               	goto	l281
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;diskio.c: 129: escreve_cmd_lcd(0b00000001);
 10906                           
 10907                           ; BSR set to: 0
 10908  001812  0E01               	movlw	1
 10909  001814  EC02  F016         	call	_escreve_cmd_lcd
 10910                           
 10911                           ;diskio.c: 130: posicao_cursor_lcd(1,0);
 10912  001818  0E00               	movlw	0
 10913  00181A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10914  00181C  0E01               	movlw	1
 10915  00181E  ECE8  F017         	call	_posicao_cursor_lcd
 10916                           
 10917                           ;diskio.c: 131: escreve_frase_ram_lcd("Bloco de 512");
 10918  001822  0E3A               	movlw	low STR_4
 10919  001824  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10920  001826  0E62               	movlw	high STR_4
 10921  001828  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10922  00182A  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10923                           
 10924                           ;diskio.c: 132: posicao_cursor_lcd(2,0);
 10925  00182E  0E00               	movlw	0
 10926  001830  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10927  001832  0E02               	movlw	2
 10928  001834  ECE8  F017         	call	_posicao_cursor_lcd
 10929                           
 10930                           ;diskio.c: 133: escreve_frase_ram_lcd("Bytes criado!");
 10931  001838  0E11               	movlw	low STR_5
 10932  00183A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10933  00183C  0E62               	movlw	high STR_5
 10934  00183E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10935  001840  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10936                           
 10937                           ;diskio.c: 134: _delay((unsigned long)((2000)*(48000000/4000.0)));
 10938  001844  0E7A               	movlw	122
 10939  001846  0100               	movlb	0	; () banked
 10940  001848  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10941  00184A  0EC1               	movlw	193
 10942  00184C  6F60               	movwf	??_disk_initialize& (0+255),b
 10943  00184E  0E81               	movlw	129
 10944  001850                     u12237:
 10945  001850  2EE8               	decfsz	wreg,f,c
 10946  001852  D7FE               	bra	u12237
 10947  001854  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10948  001856  D7FC               	bra	u12237
 10949  001858  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10950  00185A  D7FA               	bra	u12237
 10951  00185C  D000               	nop2	
 10952                           
 10953                           ;diskio.c: 135: escreve_cmd_lcd(0b00000001);
 10954  00185E  0E01               	movlw	1
 10955  001860  EC02  F016         	call	_escreve_cmd_lcd
 10956                           
 10957                           ;diskio.c: 136: posicao_cursor_lcd(1,0);
 10958  001864  0E00               	movlw	0
 10959  001866  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10960  001868  0E01               	movlw	1
 10961  00186A  ECE8  F017         	call	_posicao_cursor_lcd
 10962                           
 10963                           ;diskio.c: 137: escreve_frase_ram_lcd("Init OK");
 10964  00186E  0E6B               	movlw	low STR_6
 10965  001870  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10966  001872  0E62               	movlw	high STR_6
 10967  001874  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10968  001876  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10969                           
 10970                           ;diskio.c: 138: return stat;
 10971  00187A  0100               	movlb	0	; () banked
 10972  00187C  5166               	movf	disk_initialize@stat& (0+255),w,b
 10973  00187E  0012               	return	
 10974  001880                     __end_of_disk_initialize:
 10975                           	opt stack 0
 10976                           tosu	equ	0xFFF
 10977                           tosh	equ	0xFFE
 10978                           tosl	equ	0xFFD
 10979                           pclath	equ	0xFFA
 10980                           tblptru	equ	0xFF8
 10981                           tblptrh	equ	0xFF7
 10982                           tblptrl	equ	0xFF6
 10983                           tablat	equ	0xFF5
 10984                           prodh	equ	0xFF4
 10985                           prodl	equ	0xFF3
 10986                           intcon	equ	0xFF2
 10987                           intcon2	equ	0xFF1
 10988                           intcon3	equ	0xFF0
 10989                           postinc0	equ	0xFEE
 10990                           wreg	equ	0xFE8
 10991                           indf1	equ	0xFE7
 10992                           postinc1	equ	0xFE6
 10993                           postdec1	equ	0xFE5
 10994                           fsr1h	equ	0xFE2
 10995                           fsr1l	equ	0xFE1
 10996                           indf2	equ	0xFDF
 10997                           postinc2	equ	0xFDE
 10998                           postdec2	equ	0xFDD
 10999                           plusw2	equ	0xFDB
 11000                           fsr2h	equ	0xFDA
 11001                           fsr2l	equ	0xFD9
 11002                           status	equ	0xFD8
 11003                           
 11004 ;; *************** function _reset *****************
 11005 ;; Defined at:
 11006 ;;		line 33 in file "bibliotecas/diskio.c"
 11007 ;; Parameters:    Size  Location     Type
 11008 ;;		None
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;  count           2   41[COMRAM] int 
 11011 ;;  i               2   39[COMRAM] int 
 11012 ;;  buff            1   43[COMRAM] unsigned char 
 11013 ;; Return value:  Size  Location     Type
 11014 ;;                  1    wreg      void 
 11015 ;; Registers used:
 11016 ;;		wreg, status,2, status,0, cstack
 11017 ;; Tracked objects:
 11018 ;;		On entry : 0/0
 11019 ;;		On exit  : 0/0
 11020 ;;		Unchanged: 0/0
 11021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11022 ;;      Params:         0       0       0       0       0       0       0       0       0
 11023 ;;      Locals:         5       0       0       0       0       0       0       0       0
 11024 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11025 ;;      Totals:         7       0       0       0       0       0       0       0       0
 11026 ;;Total ram usage:        7 bytes
 11027 ;; Hardware stack levels used:    1
 11028 ;; Hardware stack levels required when called:    4
 11029 ;; This function calls:
 11030 ;;		_command
 11031 ;;		_dummy_clocks
 11032 ;;		_proceed
 11033 ;; This function is called by:
 11034 ;;		_disk_initialize
 11035 ;; This function uses a non-reentrant model
 11036 ;;
 11037                           
 11038                           	psect	text41
 11039  002E08                     __ptext41:
 11040                           	opt stack 0
 11041  002E08                     _reset:
 11042                           	opt stack 22
 11043                           
 11044                           ;diskio.c: 35: int i = 0, count = 0;
 11045                           
 11046                           ; BSR set to: 0
 11047                           ;incstack = 0
 11048  002E08  0E00               	movlw	0
 11049  002E0A  6E29               	movwf	reset@i+1,c
 11050  002E0C  0E00               	movlw	0
 11051  002E0E  6E28               	movwf	reset@i,c
 11052  002E10  0E00               	movlw	0
 11053  002E12  6E2B               	movwf	reset@count+1,c
 11054  002E14  0E00               	movlw	0
 11055  002E16  6E2A               	movwf	reset@count,c
 11056  002E18                     
 11057                           ;diskio.c: 39: dummy_clocks(8);
 11058  002E18  0E08               	movlw	8
 11059  002E1A  ECAC  F019         	call	_dummy_clocks
 11060                           
 11061                           ;diskio.c: 40: command(0X40, 0X00000000, 0X95);
 11062  002E1E  0E00               	movlw	0
 11063  002E20  6E1E               	movwf	command@arg,c
 11064  002E22  0E00               	movlw	0
 11065  002E24  6E1F               	movwf	command@arg+1,c
 11066  002E26  0E00               	movlw	0
 11067  002E28  6E20               	movwf	command@arg+2,c
 11068  002E2A  0E00               	movlw	0
 11069  002E2C  6E21               	movwf	command@arg+3,c
 11070  002E2E  0E95               	movlw	149
 11071  002E30  6E22               	movwf	command@CRC,c
 11072  002E32  0E40               	movlw	64
 11073  002E34  EC87  F018         	call	_command
 11074                           
 11075                           ;diskio.c: 41: proceed();
 11076  002E38  ECAA  F01A         	call	_proceed	;wreg free
 11077  002E3C                     
 11078                           ;diskio.c: 43: count++;
 11079  002E3C  4A2A               	infsnz	reset@count,f,c
 11080  002E3E  2A2B               	incf	reset@count+1,f,c
 11081                           
 11082                           ;diskio.c: 44: }while((buff!=0X01) && (count<10) );
 11083  002E40  042C               	decf	reset@buff,w,c
 11084  002E42  B4D8               	btfsc	status,2,c
 11085  002E44  D008               	goto	u9500
 11086  002E46  BE2B               	btfsc	reset@count+1,7,c
 11087  002E48  D7F9               	goto	l258
 11088  002E4A  502B               	movf	reset@count+1,w,c
 11089  002E4C  E104               	bnz	l8476
 11090  002E4E  0E0A               	movlw	10
 11091  002E50  5C2A               	subwf	reset@count,w,c
 11092  002E52  A0D8               	btfss	status,0,c
 11093  002E54  D7F3               	goto	l258
 11094  002E56                     u9500:
 11095  002E56                     l8476:
 11096                           
 11097                           ;diskio.c: 45: count = 0;
 11098  002E56  0E00               	movlw	0
 11099  002E58  6E2B               	movwf	reset@count+1,c
 11100  002E5A  0E00               	movlw	0
 11101  002E5C  6E2A               	movwf	reset@count,c
 11102                           
 11103                           ;diskio.c: 46: }while(buff!=0X01);
 11104  002E5E  042C               	decf	reset@buff,w,c
 11105  002E60  A4D8               	btfss	status,2,c
 11106  002E62  D7DA               	goto	l257
 11107                           
 11108                           ;diskio.c: 50: _delay((unsigned long)((2000)*(48000000/4000.0)));
 11109  002E64  0E7A               	movlw	122
 11110  002E66  6E27               	movwf	(??_reset+1)& (0+255),c
 11111  002E68  0EC1               	movlw	193
 11112  002E6A  6E26               	movwf	??_reset& (0+255),c
 11113  002E6C  0E82               	movlw	130
 11114  002E6E                     u12247:
 11115  002E6E  2EE8               	decfsz	wreg,f,c
 11116  002E70  D7FE               	bra	u12247
 11117  002E72  2E26               	decfsz	??_reset& (0+255),f,c
 11118  002E74  D7FC               	bra	u12247
 11119  002E76  2E27               	decfsz	(??_reset+1)& (0+255),f,c
 11120  002E78  D7FA               	bra	u12247
 11121  002E7A  0012               	return	
 11122  002E7C                     __end_of_reset:
 11123                           	opt stack 0
 11124                           tosu	equ	0xFFF
 11125                           tosh	equ	0xFFE
 11126                           tosl	equ	0xFFD
 11127                           pclath	equ	0xFFA
 11128                           tblptru	equ	0xFF8
 11129                           tblptrh	equ	0xFF7
 11130                           tblptrl	equ	0xFF6
 11131                           tablat	equ	0xFF5
 11132                           prodh	equ	0xFF4
 11133                           prodl	equ	0xFF3
 11134                           intcon	equ	0xFF2
 11135                           intcon2	equ	0xFF1
 11136                           intcon3	equ	0xFF0
 11137                           postinc0	equ	0xFEE
 11138                           wreg	equ	0xFE8
 11139                           indf1	equ	0xFE7
 11140                           postinc1	equ	0xFE6
 11141                           postdec1	equ	0xFE5
 11142                           fsr1h	equ	0xFE2
 11143                           fsr1l	equ	0xFE1
 11144                           indf2	equ	0xFDF
 11145                           postinc2	equ	0xFDE
 11146                           postdec2	equ	0xFDD
 11147                           plusw2	equ	0xFDB
 11148                           fsr2h	equ	0xFDA
 11149                           fsr2l	equ	0xFD9
 11150                           status	equ	0xFD8
 11151                           
 11152 ;; *************** function _escreve_cmd_lcd *****************
 11153 ;; Defined at:
 11154 ;;		line 162 in file "bibliotecas/display_lcd.c"
 11155 ;; Parameters:    Size  Location     Type
 11156 ;;  comando         1    wreg     unsigned char 
 11157 ;; Auto vars:     Size  Location     Type
 11158 ;;  comando         1   27[COMRAM] unsigned char 
 11159 ;; Return value:  Size  Location     Type
 11160 ;;                  1    wreg      void 
 11161 ;; Registers used:
 11162 ;;		wreg, status,2, status,0, cstack
 11163 ;; Tracked objects:
 11164 ;;		On entry : 0/0
 11165 ;;		On exit  : 0/0
 11166 ;;		Unchanged: 0/0
 11167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11168 ;;      Params:         0       0       0       0       0       0       0       0       0
 11169 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11170 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11171 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11172 ;;Total ram usage:        1 bytes
 11173 ;; Hardware stack levels used:    1
 11174 ;; Hardware stack levels required when called:    3
 11175 ;; This function calls:
 11176 ;;		_delay
 11177 ;; This function is called by:
 11178 ;;		_inicializa_SPI
 11179 ;;		_disk_initialize
 11180 ;;		_init_lcd
 11181 ;;		_mensagem_inicial
 11182 ;;		_SDCard
 11183 ;;		_leitura_chave
 11184 ;;		_cria_caractere_lcd
 11185 ;; This function uses a non-reentrant model
 11186 ;;
 11187                           
 11188                           	psect	text42
 11189  002C04                     __ptext42:
 11190                           	opt stack 0
 11191  002C04                     _escreve_cmd_lcd:
 11192                           	opt stack 26
 11193                           
 11194                           ;incstack = 0
 11195                           ;escreve_cmd_lcd@comando stored from wreg
 11196  002C04  6E1C               	movwf	escreve_cmd_lcd@comando,c
 11197                           
 11198                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 11199  002C06  9483               	bcf	3971,2,c	;volatile
 11200                           
 11201                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 11202  002C08  9283               	bcf	3971,1,c	;volatile
 11203                           
 11204                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 11205  002C0A  9083               	bcf	3971,0,c	;volatile
 11206                           
 11207                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 11208  002C0C  A81C               	btfss	escreve_cmd_lcd@comando,4,c
 11209  002C0E  D002               	goto	l368
 11210  002C10  8883               	bsf	3971,4,c	;volatile
 11211  002C12  D001               	goto	l369
 11212  002C14                     l368:
 11213                           
 11214                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 11215  002C14  9883               	bcf	3971,4,c	;volatile
 11216  002C16                     l369:
 11217                           
 11218                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 11219  002C16  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
 11220  002C18  D002               	goto	l370
 11221  002C1A  8A83               	bsf	3971,5,c	;volatile
 11222  002C1C  D001               	goto	l371
 11223  002C1E                     l370:
 11224                           
 11225                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 11226  002C1E  9A83               	bcf	3971,5,c	;volatile
 11227  002C20                     l371:
 11228                           
 11229                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 11230  002C20  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
 11231  002C22  D002               	goto	l372
 11232  002C24  8C83               	bsf	3971,6,c	;volatile
 11233  002C26  D001               	goto	l373
 11234  002C28                     l372:
 11235                           
 11236                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 11237  002C28  9C83               	bcf	3971,6,c	;volatile
 11238  002C2A                     l373:
 11239                           
 11240                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 11241  002C2A  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
 11242  002C2C  D002               	goto	l374
 11243  002C2E  8E83               	bsf	3971,7,c	;volatile
 11244  002C30  D001               	goto	l375
 11245  002C32                     l374:
 11246                           
 11247                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 11248  002C32  9E83               	bcf	3971,7,c	;volatile
 11249  002C34                     l375:
 11250                           
 11251                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 11252  002C34  8083               	bsf	3971,0,c	;volatile
 11253                           
 11254                           ;display_lcd.c: 181: delay();
 11255  002C36  ECFF  F019         	call	_delay	;wreg free
 11256                           
 11257                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 11258  002C3A  9083               	bcf	3971,0,c	;volatile
 11259                           
 11260                           ;display_lcd.c: 183: delay();
 11261  002C3C  ECFF  F019         	call	_delay	;wreg free
 11262                           
 11263                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 11264  002C40  A01C               	btfss	escreve_cmd_lcd@comando,0,c
 11265  002C42  D002               	goto	l376
 11266  002C44  8883               	bsf	3971,4,c	;volatile
 11267  002C46  D001               	goto	l377
 11268  002C48                     l376:
 11269                           
 11270                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 11271  002C48  9883               	bcf	3971,4,c	;volatile
 11272  002C4A                     l377:
 11273                           
 11274                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 11275  002C4A  A21C               	btfss	escreve_cmd_lcd@comando,1,c
 11276  002C4C  D002               	goto	l378
 11277  002C4E  8A83               	bsf	3971,5,c	;volatile
 11278  002C50  D001               	goto	l379
 11279  002C52                     l378:
 11280                           
 11281                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 11282  002C52  9A83               	bcf	3971,5,c	;volatile
 11283  002C54                     l379:
 11284                           
 11285                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 11286  002C54  A41C               	btfss	escreve_cmd_lcd@comando,2,c
 11287  002C56  D002               	goto	l380
 11288  002C58  8C83               	bsf	3971,6,c	;volatile
 11289  002C5A  D001               	goto	l381
 11290  002C5C                     l380:
 11291                           
 11292                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 11293  002C5C  9C83               	bcf	3971,6,c	;volatile
 11294  002C5E                     l381:
 11295                           
 11296                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 11297  002C5E  A61C               	btfss	escreve_cmd_lcd@comando,3,c
 11298  002C60  D002               	goto	l382
 11299  002C62  8E83               	bsf	3971,7,c	;volatile
 11300  002C64  D001               	goto	l383
 11301  002C66                     l382:
 11302                           
 11303                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 11304  002C66  9E83               	bcf	3971,7,c	;volatile
 11305  002C68                     l383:
 11306                           
 11307                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 11308  002C68  8083               	bsf	3971,0,c	;volatile
 11309                           
 11310                           ;display_lcd.c: 197: delay();
 11311  002C6A  ECFF  F019         	call	_delay	;wreg free
 11312                           
 11313                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 11314  002C6E  9083               	bcf	3971,0,c	;volatile
 11315                           
 11316                           ;display_lcd.c: 199: delay();
 11317  002C70  ECFF  F019         	call	_delay	;wreg free
 11318                           
 11319                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 11320  002C74  041C               	decf	escreve_cmd_lcd@comando,w,c
 11321  002C76  B4D8               	btfsc	status,2,c
 11322  002C78  D008               	goto	u9480
 11323  002C7A  0E02               	movlw	2
 11324  002C7C  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 11325  002C7E  B4D8               	btfsc	status,2,c
 11326  002C80  D004               	goto	u9480
 11327  002C82  0E03               	movlw	3
 11328  002C84  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 11329  002C86  A4D8               	btfss	status,2,c
 11330  002C88  0012               	return	
 11331  002C8A                     u9480:
 11332                           
 11333                           ;display_lcd.c: 205: { delay(); }
 11334  002C8A  ECFF  F019         	call	_delay	;wreg free
 11335  002C8E  0012               	return	
 11336  002C90                     __end_of_escreve_cmd_lcd:
 11337                           	opt stack 0
 11338                           tosu	equ	0xFFF
 11339                           tosh	equ	0xFFE
 11340                           tosl	equ	0xFFD
 11341                           pclath	equ	0xFFA
 11342                           tblptru	equ	0xFF8
 11343                           tblptrh	equ	0xFF7
 11344                           tblptrl	equ	0xFF6
 11345                           tablat	equ	0xFF5
 11346                           prodh	equ	0xFF4
 11347                           prodl	equ	0xFF3
 11348                           intcon	equ	0xFF2
 11349                           intcon2	equ	0xFF1
 11350                           intcon3	equ	0xFF0
 11351                           postinc0	equ	0xFEE
 11352                           wreg	equ	0xFE8
 11353                           indf1	equ	0xFE7
 11354                           postinc1	equ	0xFE6
 11355                           postdec1	equ	0xFE5
 11356                           fsr1h	equ	0xFE2
 11357                           fsr1l	equ	0xFE1
 11358                           indf2	equ	0xFDF
 11359                           postinc2	equ	0xFDE
 11360                           postdec2	equ	0xFDD
 11361                           plusw2	equ	0xFDB
 11362                           fsr2h	equ	0xFDA
 11363                           fsr2l	equ	0xFD9
 11364                           status	equ	0xFD8
 11365                           
 11366 ;; *************** function _check_fs *****************
 11367 ;; Defined at:
 11368 ;;		line 722 in file "bibliotecas/pff.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;  buf             2   18[BANK0 ] PTR unsigned char 
 11371 ;;		 -> pf_mount@buf(36), 
 11372 ;;  sect            4   20[BANK0 ] unsigned long 
 11373 ;; Auto vars:     Size  Location     Type
 11374 ;;		None
 11375 ;; Return value:  Size  Location     Type
 11376 ;;                  1    wreg      unsigned char 
 11377 ;; Registers used:
 11378 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11379 ;; Tracked objects:
 11380 ;;		On entry : 0/0
 11381 ;;		On exit  : 0/0
 11382 ;;		Unchanged: 0/0
 11383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11384 ;;      Params:         0       6       0       0       0       0       0       0       0
 11385 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11386 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11387 ;;      Totals:         4       6       0       0       0       0       0       0       0
 11388 ;;Total ram usage:       10 bytes
 11389 ;; Hardware stack levels used:    1
 11390 ;; Hardware stack levels required when called:    6
 11391 ;; This function calls:
 11392 ;;		_disk_readp
 11393 ;; This function is called by:
 11394 ;;		_pf_mount
 11395 ;; This function uses a non-reentrant model
 11396 ;;
 11397                           
 11398                           	psect	text43
 11399  001BEE                     __ptext43:
 11400                           	opt stack 0
 11401  001BEE                     _check_fs:
 11402                           	opt stack 21
 11403                           
 11404                           ;pff.c: 727: if (disk_readp(buf, sect, 510, 2))
 11405                           
 11406                           ;incstack = 0
 11407  001BEE  C072  F060         	movff	check_fs@buf,disk_readp@rd
 11408  001BF2  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 11409  001BF6  C074  F062         	movff	check_fs@sect,disk_readp@sector
 11410  001BFA  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 11411  001BFE  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 11412  001C02  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 11413  001C06  0E01               	movlw	1
 11414  001C08  0100               	movlb	0	; () banked
 11415  001C0A  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 11416  001C0C  0EFE               	movlw	254
 11417  001C0E  6F66               	movwf	disk_readp@offset& (0+255),b
 11418  001C10  0E00               	movlw	0
 11419  001C12  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 11420  001C14  0E02               	movlw	2
 11421  001C16  6F68               	movwf	disk_readp@count& (0+255),b
 11422  001C18  EC3E  F009         	call	_disk_readp	;wreg free
 11423  001C1C  0900               	iorlw	0
 11424  001C1E  B4D8               	btfsc	status,2,c
 11425  001C20  D002               	goto	l764
 11426                           
 11427                           ;pff.c: 728: return 3;
 11428  001C22  0E03               	movlw	3
 11429  001C24  0012               	return	
 11430  001C26                     l764:
 11431                           
 11432                           ;pff.c: 729: if ( (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf)) != 0xAA55)
 11433  001C26  0100               	movlb	0	; () banked
 11434  001C28  EE20 F001          	lfsr	2,1
 11435  001C2C  5172               	movf	check_fs@buf& (0+255),w,b
 11436  001C2E  26D9               	addwf	fsr2l,f,c
 11437  001C30  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 11438  001C32  22DA               	addwfc	fsr2h,f,c
 11439  001C34  50DF               	movf	indf2,w,c
 11440  001C36  6E2A               	movwf	??_check_fs& (0+255),c
 11441  001C38  502A               	movf	??_check_fs,w,c
 11442  001C3A  6E2C               	movwf	(??_check_fs+2)& (0+255),c
 11443  001C3C  6A2B               	clrf	(??_check_fs+1)& (0+255),c
 11444  001C3E  C072  FFD9         	movff	check_fs@buf,fsr2l
 11445  001C42  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 11446  001C46  50DF               	movf	indf2,w,c
 11447  001C48  6E2D               	movwf	(??_check_fs+3)& (0+255),c
 11448  001C4A  502D               	movf	??_check_fs+3,w,c
 11449  001C4C  122B               	iorwf	??_check_fs+1,f,c
 11450  001C4E  0E00               	movlw	0
 11451  001C50  122C               	iorwf	??_check_fs+2,f,c
 11452  001C52  0E55               	movlw	85
 11453  001C54  182B               	xorwf	??_check_fs+1,w,c
 11454  001C56  E104               	bnz	u9980
 11455  001C58  0EAA               	movlw	170
 11456  001C5A  182C               	xorwf	??_check_fs+2,w,c
 11457  001C5C  B4D8               	btfsc	status,2,c
 11458  001C5E  D002               	goto	l766
 11459  001C60                     u9980:
 11460                           
 11461                           ; BSR set to: 0
 11462                           ;pff.c: 730: {
 11463                           ;pff.c: 731: return 2;
 11464  001C60  0E02               	movlw	2
 11465                           
 11466                           ; BSR set to: 0
 11467  001C62  0012               	return	
 11468  001C64                     l766:
 11469                           
 11470                           ; BSR set to: 0
 11471                           
 11472                           ; BSR set to: 0
 11473  001C64  C072  F060         	movff	check_fs@buf,disk_readp@rd
 11474  001C68  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 11475  001C6C  C074  F062         	movff	check_fs@sect,disk_readp@sector
 11476  001C70  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 11477  001C74  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 11478  001C78  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 11479  001C7C  0E00               	movlw	0
 11480  001C7E  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 11481  001C80  0E36               	movlw	54
 11482  001C82  6F66               	movwf	disk_readp@offset& (0+255),b
 11483  001C84  0E00               	movlw	0
 11484  001C86  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 11485  001C88  0E02               	movlw	2
 11486  001C8A  6F68               	movwf	disk_readp@count& (0+255),b
 11487  001C8C  EC3E  F009         	call	_disk_readp	;wreg free
 11488  001C90  0900               	iorlw	0
 11489  001C92  A4D8               	btfss	status,2,c
 11490  001C94  D01F               	goto	l767
 11491  001C96  0100               	movlb	0	; () banked
 11492  001C98  EE20 F001          	lfsr	2,1
 11493  001C9C  5172               	movf	check_fs@buf& (0+255),w,b
 11494  001C9E  26D9               	addwf	fsr2l,f,c
 11495  001CA0  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 11496  001CA2  22DA               	addwfc	fsr2h,f,c
 11497  001CA4  50DF               	movf	indf2,w,c
 11498  001CA6  6E2A               	movwf	??_check_fs& (0+255),c
 11499  001CA8  502A               	movf	??_check_fs,w,c
 11500  001CAA  6E2C               	movwf	(??_check_fs+2)& (0+255),c
 11501  001CAC  6A2B               	clrf	(??_check_fs+1)& (0+255),c
 11502  001CAE  C072  FFD9         	movff	check_fs@buf,fsr2l
 11503  001CB2  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 11504  001CB6  50DF               	movf	indf2,w,c
 11505  001CB8  6E2D               	movwf	(??_check_fs+3)& (0+255),c
 11506  001CBA  502D               	movf	??_check_fs+3,w,c
 11507  001CBC  122B               	iorwf	??_check_fs+1,f,c
 11508  001CBE  0E00               	movlw	0
 11509  001CC0  122C               	iorwf	??_check_fs+2,f,c
 11510  001CC2  0E46               	movlw	70
 11511  001CC4  182B               	xorwf	??_check_fs+1,w,c
 11512  001CC6  E106               	bnz	l8834
 11513  001CC8  0E41               	movlw	65
 11514  001CCA  182C               	xorwf	??_check_fs+2,w,c
 11515  001CCC  A4D8               	btfss	status,2,c
 11516  001CCE  D002               	goto	l767
 11517                           
 11518                           ; BSR set to: 0
 11519                           ;pff.c: 734: return 0;
 11520  001CD0  0E00               	movlw	0
 11521                           
 11522                           ; BSR set to: 0
 11523  001CD2  0012               	return	
 11524  001CD4                     l767:
 11525  001CD4                     l8834:
 11526  001CD4  C072  F060         	movff	check_fs@buf,disk_readp@rd
 11527  001CD8  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 11528  001CDC  C074  F062         	movff	check_fs@sect,disk_readp@sector
 11529  001CE0  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 11530  001CE4  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 11531  001CE8  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 11532  001CEC  0E00               	movlw	0
 11533  001CEE  0100               	movlb	0	; () banked
 11534  001CF0  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 11535  001CF2  0E52               	movlw	82
 11536  001CF4  6F66               	movwf	disk_readp@offset& (0+255),b
 11537  001CF6  0E00               	movlw	0
 11538  001CF8  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 11539  001CFA  0E02               	movlw	2
 11540  001CFC  6F68               	movwf	disk_readp@count& (0+255),b
 11541  001CFE  EC3E  F009         	call	_disk_readp	;wreg free
 11542  001D02  0900               	iorlw	0
 11543  001D04  A4D8               	btfss	status,2,c
 11544  001D06  D01F               	goto	l768
 11545  001D08  0100               	movlb	0	; () banked
 11546  001D0A  EE20 F001          	lfsr	2,1
 11547  001D0E  5172               	movf	check_fs@buf& (0+255),w,b
 11548  001D10  26D9               	addwf	fsr2l,f,c
 11549  001D12  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 11550  001D14  22DA               	addwfc	fsr2h,f,c
 11551  001D16  50DF               	movf	indf2,w,c
 11552  001D18  6E2A               	movwf	??_check_fs& (0+255),c
 11553  001D1A  502A               	movf	??_check_fs,w,c
 11554  001D1C  6E2C               	movwf	(??_check_fs+2)& (0+255),c
 11555  001D1E  6A2B               	clrf	(??_check_fs+1)& (0+255),c
 11556  001D20  C072  FFD9         	movff	check_fs@buf,fsr2l
 11557  001D24  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 11558  001D28  50DF               	movf	indf2,w,c
 11559  001D2A  6E2D               	movwf	(??_check_fs+3)& (0+255),c
 11560  001D2C  502D               	movf	??_check_fs+3,w,c
 11561  001D2E  122B               	iorwf	??_check_fs+1,f,c
 11562  001D30  0E00               	movlw	0
 11563  001D32  122C               	iorwf	??_check_fs+2,f,c
 11564  001D34  0E46               	movlw	70
 11565  001D36  182B               	xorwf	??_check_fs+1,w,c
 11566  001D38  E106               	bnz	l8842
 11567  001D3A  0E41               	movlw	65
 11568  001D3C  182C               	xorwf	??_check_fs+2,w,c
 11569  001D3E  A4D8               	btfss	status,2,c
 11570  001D40  D002               	goto	l768
 11571                           
 11572                           ; BSR set to: 0
 11573                           ;pff.c: 736: return 0;
 11574  001D42  0E00               	movlw	0
 11575                           
 11576                           ; BSR set to: 0
 11577  001D44  0012               	return	
 11578  001D46                     l768:
 11579  001D46                     l8842:
 11580                           
 11581                           ;pff.c: 737: return 1;
 11582  001D46  0E01               	movlw	1
 11583  001D48  0012               	return	
 11584  001D4A                     __end_of_check_fs:
 11585                           	opt stack 0
 11586                           tosu	equ	0xFFF
 11587                           tosh	equ	0xFFE
 11588                           tosl	equ	0xFFD
 11589                           pclath	equ	0xFFA
 11590                           tblptru	equ	0xFF8
 11591                           tblptrh	equ	0xFF7
 11592                           tblptrl	equ	0xFF6
 11593                           tablat	equ	0xFF5
 11594                           prodh	equ	0xFF4
 11595                           prodl	equ	0xFF3
 11596                           intcon	equ	0xFF2
 11597                           intcon2	equ	0xFF1
 11598                           intcon3	equ	0xFF0
 11599                           postinc0	equ	0xFEE
 11600                           wreg	equ	0xFE8
 11601                           indf1	equ	0xFE7
 11602                           postinc1	equ	0xFE6
 11603                           postdec1	equ	0xFE5
 11604                           fsr1h	equ	0xFE2
 11605                           fsr1l	equ	0xFE1
 11606                           indf2	equ	0xFDF
 11607                           postinc2	equ	0xFDE
 11608                           postdec2	equ	0xFDD
 11609                           plusw2	equ	0xFDB
 11610                           fsr2h	equ	0xFDA
 11611                           fsr2l	equ	0xFD9
 11612                           status	equ	0xFD8
 11613                           
 11614 ;; *************** function _disk_readp *****************
 11615 ;; Defined at:
 11616 ;;		line 146 in file "bibliotecas/diskio.c"
 11617 ;; Parameters:    Size  Location     Type
 11618 ;;  rd              2    0[BANK0 ] PTR unsigned char 
 11619 ;;		 -> data_buffer_32(32), pf_readdir@dir(32), pf_opendir@dir(32), pf_open@dir(32), 
 11620 ;;		 -> pf_mount@buf(36), NULL(0), get_fat@buf(4), 
 11621 ;;  sector          4    2[BANK0 ] unsigned long 
 11622 ;;  offset          2    6[BANK0 ] unsigned int 
 11623 ;;  count           2    8[BANK0 ] unsigned int 
 11624 ;; Auto vars:     Size  Location     Type
 11625 ;;  start_add       4   11[BANK0 ] unsigned long 
 11626 ;;  length          2   16[BANK0 ] int 
 11627 ;;  i               2    0        int 
 11628 ;;  buff            1   15[BANK0 ] unsigned char 
 11629 ;;  ptr             1   10[BANK0 ] unsigned char 
 11630 ;;  res             1    0        enum E14
 11631 ;; Return value:  Size  Location     Type
 11632 ;;                  1    wreg      enum E14
 11633 ;; Registers used:
 11634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11635 ;; Tracked objects:
 11636 ;;		On entry : 0/0
 11637 ;;		On exit  : 0/0
 11638 ;;		Unchanged: 0/0
 11639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11640 ;;      Params:         0      10       0       0       0       0       0       0       0
 11641 ;;      Locals:         0       8       0       0       0       0       0       0       0
 11642 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11643 ;;      Totals:         4      18       0       0       0       0       0       0       0
 11644 ;;Total ram usage:       22 bytes
 11645 ;; Hardware stack levels used:    1
 11646 ;; Hardware stack levels required when called:    5
 11647 ;; This function calls:
 11648 ;;		_command
 11649 ;;		_dummy_clocks
 11650 ;;		_escreve_frase_ram_lcd
 11651 ;;		_posicao_cursor_lcd
 11652 ;;		_proceed
 11653 ;;		_response
 11654 ;; This function is called by:
 11655 ;;		_get_fat
 11656 ;;		_dir_find
 11657 ;;		_check_fs
 11658 ;;		_pf_mount
 11659 ;;		_pf_read
 11660 ;;		_dir_read
 11661 ;; This function uses a non-reentrant model
 11662 ;;
 11663                           
 11664                           	psect	text44
 11665  00127C                     __ptext44:
 11666                           	opt stack 0
 11667  00127C                     _disk_readp:
 11668                           	opt stack 21
 11669                           
 11670                           ;diskio.c: 153: DRESULT res;
 11671                           ;diskio.c: 154: unsigned char ptr=0X00,buff;
 11672                           
 11673                           ;incstack = 0
 11674  00127C  0E00               	movlw	0
 11675  00127E  0100               	movlb	0	; () banked
 11676  001280  6F6A               	movwf	disk_readp@ptr& (0+255),b
 11677                           
 11678                           ; BSR set to: 0
 11679                           ;diskio.c: 155: unsigned long int start_add;
 11680                           ;diskio.c: 156: static unsigned char arr[512];
 11681                           ;diskio.c: 157: int length,i;
 11682                           ;diskio.c: 159: if(offset == 0)
 11683  001282  5166               	movf	disk_readp@offset& (0+255),w,b
 11684  001284  1167               	iorwf	(disk_readp@offset+1)& (0+255),w,b
 11685  001286  A4D8               	btfss	status,2,c
 11686  001288  D0A4               	goto	l288
 11687                           
 11688                           ; BSR set to: 0
 11689                           ;diskio.c: 160: {
 11690                           ;diskio.c: 161: start_add = ((sector*512));
 11691  00128A  C062  F026         	movff	disk_readp@sector,??_disk_readp
 11692  00128E  C063  F027         	movff	disk_readp@sector+1,??_disk_readp+1
 11693  001292  C064  F028         	movff	disk_readp@sector+2,??_disk_readp+2
 11694  001296  C065  F029         	movff	disk_readp@sector+3,??_disk_readp+3
 11695  00129A  0E09               	movlw	9
 11696  00129C                     u8895:
 11697  00129C  90D8               	bcf	status,0,c
 11698  00129E  3626               	rlcf	??_disk_readp,f,c
 11699  0012A0  3627               	rlcf	??_disk_readp+1,f,c
 11700  0012A2  3628               	rlcf	??_disk_readp+2,f,c
 11701  0012A4  3629               	rlcf	??_disk_readp+3,f,c
 11702  0012A6  2EE8               	decfsz	wreg,f,c
 11703  0012A8  D7F9               	goto	u8895
 11704  0012AA  C026  F06B         	movff	??_disk_readp,disk_readp@start_add
 11705  0012AE  C027  F06C         	movff	??_disk_readp+1,disk_readp@start_add+1
 11706  0012B2  C028  F06D         	movff	??_disk_readp+2,disk_readp@start_add+2
 11707  0012B6  C029  F06E         	movff	??_disk_readp+3,disk_readp@start_add+3
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;diskio.c: 163: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11711  0012BA  0E3D               	movlw	61
 11712  0012BC  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 11713  0012BE  0EE1               	movlw	225
 11714  0012C0  6E26               	movwf	??_disk_readp& (0+255),c
 11715  0012C2  0E40               	movlw	64
 11716  0012C4                     u12257:
 11717  0012C4  2EE8               	decfsz	wreg,f,c
 11718  0012C6  D7FE               	bra	u12257
 11719  0012C8  2E26               	decfsz	??_disk_readp& (0+255),f,c
 11720  0012CA  D7FC               	bra	u12257
 11721  0012CC  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11722  0012CE  D7FA               	bra	u12257
 11723                           
 11724                           ;diskio.c: 165: dummy_clocks(8);
 11725  0012D0  0E08               	movlw	8
 11726  0012D2  ECAC  F019         	call	_dummy_clocks
 11727                           
 11728                           ;diskio.c: 166: command(0X52,start_add,0X00);
 11729  0012D6  C06B  F01E         	movff	disk_readp@start_add,command@arg
 11730  0012DA  C06C  F01F         	movff	disk_readp@start_add+1,command@arg+1
 11731  0012DE  C06D  F020         	movff	disk_readp@start_add+2,command@arg+2
 11732  0012E2  C06E  F021         	movff	disk_readp@start_add+3,command@arg+3
 11733  0012E6  0E00               	movlw	0
 11734  0012E8  6E22               	movwf	command@CRC,c
 11735  0012EA  0E52               	movlw	82
 11736  0012EC  EC87  F018         	call	_command
 11737                           
 11738                           ;diskio.c: 167: proceed();
 11739  0012F0  ECAA  F01A         	call	_proceed	;wreg free
 11740  0012F4                     
 11741                           ;diskio.c: 169: buff = response();
 11742  0012F4  EC9D  F01A         	call	_response	;wreg free
 11743  0012F8  0100               	movlb	0	; () banked
 11744  0012FA  6F6F               	movwf	disk_readp@buff& (0+255),b
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;diskio.c: 170: }while(buff!=0x00);
 11748  0012FC  516F               	movf	disk_readp@buff& (0+255),w,b
 11749  0012FE  A4D8               	btfss	status,2,c
 11750  001300  D7F9               	goto	l289
 11751                           
 11752                           ; BSR set to: 0
 11753                           ;diskio.c: 171: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11754                           
 11755                           ; BSR set to: 0
 11756  001302  0E3D               	movlw	61
 11757  001304  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 11758  001306  0EE1               	movlw	225
 11759  001308  6E26               	movwf	??_disk_readp& (0+255),c
 11760  00130A  0E40               	movlw	64
 11761  00130C                     u12267:
 11762  00130C  2EE8               	decfsz	wreg,f,c
 11763  00130E  D7FE               	bra	u12267
 11764  001310  2E26               	decfsz	??_disk_readp& (0+255),f,c
 11765  001312  D7FC               	bra	u12267
 11766  001314  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11767  001316  D7FA               	bra	u12267
 11768                           
 11769                           ;diskio.c: 173: proceed();
 11770  001318  ECAA  F01A         	call	_proceed	;wreg free
 11771  00131C                     
 11772                           ;diskio.c: 175: buff = response();
 11773  00131C  EC9D  F01A         	call	_response	;wreg free
 11774  001320  0100               	movlb	0	; () banked
 11775  001322  6F6F               	movwf	disk_readp@buff& (0+255),b
 11776                           
 11777                           ; BSR set to: 0
 11778                           ;diskio.c: 176: }while(buff!=0xFE);
 11779  001324  0EFE               	movlw	254
 11780  001326  196F               	xorwf	disk_readp@buff& (0+255),w,b
 11781  001328  A4D8               	btfss	status,2,c
 11782  00132A  D7F8               	goto	l291
 11783                           
 11784                           ; BSR set to: 0
 11785                           ;diskio.c: 177: length = 0;
 11786                           
 11787                           ; BSR set to: 0
 11788  00132C  0E00               	movlw	0
 11789  00132E  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11790  001330  0E00               	movlw	0
 11791  001332  6F70               	movwf	disk_readp@length& (0+255),b
 11792                           
 11793                           ;diskio.c: 178: while ( length < count )
 11794  001334  D00C               	goto	l293
 11795  001336                     
 11796                           ; BSR set to: 0
 11797                           ;diskio.c: 179: {
 11798                           ;diskio.c: 180: arr[length] = response();
 11799                           
 11800                           ; BSR set to: 0
 11801  001336  0EAD               	movlw	low disk_readp@arr
 11802  001338  2570               	addwf	disk_readp@length& (0+255),w,b
 11803  00133A  6ED9               	movwf	fsr2l,c
 11804  00133C  0E02               	movlw	high disk_readp@arr
 11805  00133E  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11806  001340  6EDA               	movwf	fsr2h,c
 11807  001342  EC9D  F01A         	call	_response	;wreg free
 11808  001346  6EDF               	movwf	indf2,c
 11809                           
 11810                           ;diskio.c: 181: length++;
 11811  001348  0100               	movlb	0	; () banked
 11812  00134A  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11813  00134C  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11814  00134E                     l293:
 11815                           
 11816                           ; BSR set to: 0
 11817                           
 11818                           ; BSR set to: 0
 11819  00134E  5168               	movf	disk_readp@count& (0+255),w,b
 11820  001350  5D70               	subwf	disk_readp@length& (0+255),w,b
 11821  001352  5169               	movf	(disk_readp@count+1)& (0+255),w,b
 11822  001354  5971               	subwfb	(disk_readp@length+1)& (0+255),w,b
 11823  001356  A0D8               	btfss	status,0,c
 11824  001358  D7EE               	goto	l294
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;diskio.c: 182: }
 11828                           ;diskio.c: 184: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11829                           
 11830                           ; BSR set to: 0
 11831  00135A  0E3D               	movlw	61
 11832  00135C  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 11833  00135E  0EE1               	movlw	225
 11834  001360  6E26               	movwf	??_disk_readp& (0+255),c
 11835  001362  0E40               	movlw	64
 11836  001364                     u12277:
 11837  001364  2EE8               	decfsz	wreg,f,c
 11838  001366  D7FE               	bra	u12277
 11839  001368  2E26               	decfsz	??_disk_readp& (0+255),f,c
 11840  00136A  D7FC               	bra	u12277
 11841  00136C  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11842  00136E  D7FA               	bra	u12277
 11843                           
 11844                           ;diskio.c: 186: dummy_clocks(8);
 11845  001370  0E08               	movlw	8
 11846  001372  ECAC  F019         	call	_dummy_clocks
 11847                           
 11848                           ;diskio.c: 187: command(0X4C,0X00000000,0X00);
 11849  001376  0E00               	movlw	0
 11850  001378  6E1E               	movwf	command@arg,c
 11851  00137A  0E00               	movlw	0
 11852  00137C  6E1F               	movwf	command@arg+1,c
 11853  00137E  0E00               	movlw	0
 11854  001380  6E20               	movwf	command@arg+2,c
 11855  001382  0E00               	movlw	0
 11856  001384  6E21               	movwf	command@arg+3,c
 11857  001386  0E00               	movlw	0
 11858  001388  6E22               	movwf	command@CRC,c
 11859  00138A  0E4C               	movlw	76
 11860  00138C  EC87  F018         	call	_command
 11861                           
 11862                           ;diskio.c: 188: proceed();
 11863  001390  ECAA  F01A         	call	_proceed	;wreg free
 11864  001394                     
 11865                           ;diskio.c: 190: buff = response();
 11866  001394  EC9D  F01A         	call	_response	;wreg free
 11867  001398  0100               	movlb	0	; () banked
 11868  00139A  6F6F               	movwf	disk_readp@buff& (0+255),b
 11869                           
 11870                           ; BSR set to: 0
 11871                           ;diskio.c: 191: }while(buff!=0xFF);
 11872  00139C  296F               	incf	disk_readp@buff& (0+255),w,b
 11873  00139E  A4D8               	btfss	status,2,c
 11874  0013A0  D7F9               	goto	l296
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;diskio.c: 193: length = 0;
 11878                           
 11879                           ; BSR set to: 0
 11880  0013A2  0E00               	movlw	0
 11881  0013A4  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11882  0013A6  0E00               	movlw	0
 11883  0013A8  6F70               	movwf	disk_readp@length& (0+255),b
 11884                           
 11885                           ;diskio.c: 195: while(arr[length]!='\0')
 11886  0013AA  D002               	goto	l298
 11887  0013AC                     
 11888                           ; BSR set to: 0
 11889                           ;diskio.c: 196: {
 11890                           ;diskio.c: 198: length++;
 11891                           
 11892                           ; BSR set to: 0
 11893  0013AC  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11894  0013AE  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11895  0013B0                     l298:
 11896                           
 11897                           ; BSR set to: 0
 11898                           
 11899                           ; BSR set to: 0
 11900  0013B0  0EAD               	movlw	low disk_readp@arr
 11901  0013B2  2570               	addwf	disk_readp@length& (0+255),w,b
 11902  0013B4  6ED9               	movwf	fsr2l,c
 11903  0013B6  0E02               	movlw	high disk_readp@arr
 11904  0013B8  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11905  0013BA  6EDA               	movwf	fsr2h,c
 11906  0013BC  50DF               	movf	indf2,w,c
 11907  0013BE  A4D8               	btfss	status,2,c
 11908  0013C0  D7F5               	goto	l299
 11909                           
 11910                           ; BSR set to: 0
 11911                           ;diskio.c: 199: }
 11912                           ;diskio.c: 201: *rd = length;
 11913                           
 11914                           ; BSR set to: 0
 11915  0013C2  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11916  0013C6  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11917  0013CA  C070  FFDF         	movff	disk_readp@length,indf2
 11918                           
 11919                           ; BSR set to: 0
 11920                           ;diskio.c: 202: return RES_OK;
 11921  0013CE  0E00               	movlw	0
 11922                           
 11923                           ; BSR set to: 0
 11924                           ;diskio.c: 203: }
 11925                           
 11926                           ; BSR set to: 0
 11927  0013D0  0012               	return	
 11928  0013D2                     l288:
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;diskio.c: 204: else
 11932                           ;diskio.c: 205: {
 11933                           ;diskio.c: 206: start_add = (sector*512);
 11934                           
 11935                           ; BSR set to: 0
 11936  0013D2  C062  F026         	movff	disk_readp@sector,??_disk_readp
 11937  0013D6  C063  F027         	movff	disk_readp@sector+1,??_disk_readp+1
 11938  0013DA  C064  F028         	movff	disk_readp@sector+2,??_disk_readp+2
 11939  0013DE  C065  F029         	movff	disk_readp@sector+3,??_disk_readp+3
 11940  0013E2  0E09               	movlw	9
 11941  0013E4                     u8955:
 11942  0013E4  90D8               	bcf	status,0,c
 11943  0013E6  3626               	rlcf	??_disk_readp,f,c
 11944  0013E8  3627               	rlcf	??_disk_readp+1,f,c
 11945  0013EA  3628               	rlcf	??_disk_readp+2,f,c
 11946  0013EC  3629               	rlcf	??_disk_readp+3,f,c
 11947  0013EE  2EE8               	decfsz	wreg,f,c
 11948  0013F0  D7F9               	goto	u8955
 11949  0013F2  C026  F06B         	movff	??_disk_readp,disk_readp@start_add
 11950  0013F6  C027  F06C         	movff	??_disk_readp+1,disk_readp@start_add+1
 11951  0013FA  C028  F06D         	movff	??_disk_readp+2,disk_readp@start_add+2
 11952  0013FE  C029  F06E         	movff	??_disk_readp+3,disk_readp@start_add+3
 11953                           
 11954                           ; BSR set to: 0
 11955                           ;diskio.c: 208: length = 0;
 11956  001402  0E00               	movlw	0
 11957  001404  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11958  001406  0E00               	movlw	0
 11959  001408  6F70               	movwf	disk_readp@length& (0+255),b
 11960                           
 11961                           ;diskio.c: 209: while(length<512)
 11962  00140A  D00A               	goto	l303
 11963  00140C                     
 11964                           ; BSR set to: 0
 11965                           ;diskio.c: 210: {
 11966                           ;diskio.c: 211: arr[length] = 0;
 11967                           
 11968                           ; BSR set to: 0
 11969  00140C  0EAD               	movlw	low disk_readp@arr
 11970  00140E  2570               	addwf	disk_readp@length& (0+255),w,b
 11971  001410  6ED9               	movwf	fsr2l,c
 11972  001412  0E02               	movlw	high disk_readp@arr
 11973  001414  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11974  001416  6EDA               	movwf	fsr2h,c
 11975  001418  0E00               	movlw	0
 11976  00141A  6EDF               	movwf	indf2,c
 11977                           
 11978                           ; BSR set to: 0
 11979                           ;diskio.c: 212: length++;
 11980  00141C  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11981  00141E  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11982  001420                     l303:
 11983                           
 11984                           ; BSR set to: 0
 11985                           
 11986                           ; BSR set to: 0
 11987  001420  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11988  001422  D7F4               	goto	l304
 11989  001424  0E02               	movlw	2
 11990  001426  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 11991  001428  A0D8               	btfss	status,0,c
 11992  00142A  D7F0               	goto	l304
 11993                           
 11994                           ; BSR set to: 0
 11995                           ;diskio.c: 213: }
 11996                           ;diskio.c: 215: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11997                           
 11998                           ; BSR set to: 0
 11999  00142C  0E3D               	movlw	61
 12000  00142E  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 12001  001430  0EE1               	movlw	225
 12002  001432  6E26               	movwf	??_disk_readp& (0+255),c
 12003  001434  0E40               	movlw	64
 12004  001436                     u12287:
 12005  001436  2EE8               	decfsz	wreg,f,c
 12006  001438  D7FE               	bra	u12287
 12007  00143A  2E26               	decfsz	??_disk_readp& (0+255),f,c
 12008  00143C  D7FC               	bra	u12287
 12009  00143E  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 12010  001440  D7FA               	bra	u12287
 12011                           
 12012                           ;diskio.c: 217: dummy_clocks(8);
 12013  001442  0E08               	movlw	8
 12014  001444  ECAC  F019         	call	_dummy_clocks
 12015                           
 12016                           ;diskio.c: 219: command(0X51,start_add,0X00);
 12017  001448  C06B  F01E         	movff	disk_readp@start_add,command@arg
 12018  00144C  C06C  F01F         	movff	disk_readp@start_add+1,command@arg+1
 12019  001450  C06D  F020         	movff	disk_readp@start_add+2,command@arg+2
 12020  001454  C06E  F021         	movff	disk_readp@start_add+3,command@arg+3
 12021  001458  0E00               	movlw	0
 12022  00145A  6E22               	movwf	command@CRC,c
 12023  00145C  0E51               	movlw	81
 12024  00145E  EC87  F018         	call	_command
 12025                           
 12026                           ;diskio.c: 220: proceed();
 12027  001462  ECAA  F01A         	call	_proceed	;wreg free
 12028  001466                     
 12029                           ;diskio.c: 222: buff = response();
 12030  001466  EC9D  F01A         	call	_response	;wreg free
 12031  00146A  0100               	movlb	0	; () banked
 12032  00146C  6F6F               	movwf	disk_readp@buff& (0+255),b
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;diskio.c: 223: }while(buff!=0x00);
 12036  00146E  516F               	movf	disk_readp@buff& (0+255),w,b
 12037  001470  A4D8               	btfss	status,2,c
 12038  001472  D7F9               	goto	l306
 12039  001474                     u8970:
 12040                           
 12041                           ; BSR set to: 0
 12042                           ;diskio.c: 225: buff = response();
 12043                           
 12044                           ; BSR set to: 0
 12045                           
 12046                           ;diskio.c: 224: do{
 12047                           
 12048                           ; BSR set to: 0
 12049  001474  EC9D  F01A         	call	_response	;wreg free
 12050  001478  0100               	movlb	0	; () banked
 12051  00147A  6F6F               	movwf	disk_readp@buff& (0+255),b
 12052                           
 12053                           ; BSR set to: 0
 12054                           ;diskio.c: 226: }while(buff!=0xFE);
 12055  00147C  0EFE               	movlw	254
 12056  00147E  196F               	xorwf	disk_readp@buff& (0+255),w,b
 12057  001480  A4D8               	btfss	status,2,c
 12058  001482  D7F8               	goto	u8970
 12059                           
 12060                           ; BSR set to: 0
 12061                           ;diskio.c: 228: length = 0;
 12062                           
 12063                           ; BSR set to: 0
 12064  001484  0E00               	movlw	0
 12065  001486  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 12066  001488  0E00               	movlw	0
 12067  00148A  6F70               	movwf	disk_readp@length& (0+255),b
 12068                           
 12069                           ;diskio.c: 229: while ( length < 512 )
 12070  00148C  D048               	goto	u9010
 12071  00148E                     l8188:
 12072                           
 12073                           ; BSR set to: 0
 12074                           ;diskio.c: 232: {
 12075                           ;diskio.c: 233: arr[length] = response();
 12076  00148E  0EAD               	movlw	low disk_readp@arr
 12077  001490  2570               	addwf	disk_readp@length& (0+255),w,b
 12078  001492  6ED9               	movwf	fsr2l,c
 12079  001494  0E02               	movlw	high disk_readp@arr
 12080  001496  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 12081  001498  6EDA               	movwf	fsr2h,c
 12082  00149A  EC9D  F01A         	call	_response	;wreg free
 12083  00149E  6EDF               	movwf	indf2,c
 12084                           
 12085                           ;diskio.c: 234: length++;
 12086  0014A0  0100               	movlb	0	; () banked
 12087  0014A2  4B70               	infsnz	disk_readp@length& (0+255),f,b
 12088  0014A4  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 12089  0014A6                     
 12090                           ; BSR set to: 0
 12091                           
 12092                           ; BSR set to: 0
 12093  0014A6  0766               	decf	disk_readp@offset& (0+255),f,b
 12094  0014A8  A0D8               	btfss	status,0,c
 12095  0014AA  0767               	decf	(disk_readp@offset+1)& (0+255),f,b
 12096  0014AC  2966               	incf	disk_readp@offset& (0+255),w,b
 12097  0014AE  E1EF               	bnz	l8188
 12098  0014B0  2967               	incf	(disk_readp@offset+1)& (0+255),w,b
 12099  0014B2  B4D8               	btfsc	status,2,c
 12100  0014B4  D019               	goto	l315
 12101  0014B6  D7EB               	goto	l313
 12102  0014B8                     l8194:
 12103                           
 12104                           ; BSR set to: 0
 12105                           ;diskio.c: 237: {
 12106                           ;diskio.c: 238: *rd = response();
 12107  0014B8  EC9D  F01A         	call	_response	;wreg free
 12108  0014BC  C060  FFD9         	movff	disk_readp@rd,fsr2l
 12109  0014C0  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 12110  0014C4  6EDF               	movwf	indf2,c
 12111                           
 12112                           ;diskio.c: 239: arr[length] = *rd;
 12113  0014C6  C060  FFD9         	movff	disk_readp@rd,fsr2l
 12114  0014CA  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 12115  0014CE  0EAD               	movlw	low disk_readp@arr
 12116  0014D0  0100               	movlb	0	; () banked
 12117  0014D2  2570               	addwf	disk_readp@length& (0+255),w,b
 12118  0014D4  6EE1               	movwf	fsr1l,c
 12119  0014D6  0E02               	movlw	high disk_readp@arr
 12120  0014D8  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 12121  0014DA  6EE2               	movwf	fsr1h,c
 12122  0014DC  CFDF FFE7          	movff	indf2,indf1
 12123                           
 12124                           ; BSR set to: 0
 12125                           ;diskio.c: 240: rd++;
 12126  0014E0  4B60               	infsnz	disk_readp@rd& (0+255),f,b
 12127  0014E2  2B61               	incf	(disk_readp@rd+1)& (0+255),f,b
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;diskio.c: 241: length++;
 12131  0014E4  4B70               	infsnz	disk_readp@length& (0+255),f,b
 12132  0014E6  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 12133  0014E8                     l315:
 12134                           
 12135                           ; BSR set to: 0
 12136                           
 12137                           ; BSR set to: 0
 12138  0014E8  0768               	decf	disk_readp@count& (0+255),f,b
 12139  0014EA  A0D8               	btfss	status,0,c
 12140  0014EC  0769               	decf	(disk_readp@count+1)& (0+255),f,b
 12141  0014EE  2968               	incf	disk_readp@count& (0+255),w,b
 12142  0014F0  E1E3               	bnz	l8194
 12143  0014F2  2969               	incf	(disk_readp@count+1)& (0+255),w,b
 12144  0014F4  B4D8               	btfsc	status,2,c
 12145  0014F6  D00D               	goto	l318
 12146  0014F8  D7DF               	goto	l316
 12147  0014FA                     
 12148                           ; BSR set to: 0
 12149                           ;diskio.c: 244: {
 12150                           ;diskio.c: 245: arr[length] = response();
 12151                           
 12152                           ; BSR set to: 0
 12153  0014FA  0EAD               	movlw	low disk_readp@arr
 12154  0014FC  2570               	addwf	disk_readp@length& (0+255),w,b
 12155  0014FE  6ED9               	movwf	fsr2l,c
 12156  001500  0E02               	movlw	high disk_readp@arr
 12157  001502  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 12158  001504  6EDA               	movwf	fsr2h,c
 12159  001506  EC9D  F01A         	call	_response	;wreg free
 12160  00150A  6EDF               	movwf	indf2,c
 12161                           
 12162                           ;diskio.c: 246: length++;
 12163  00150C  0100               	movlb	0	; () banked
 12164  00150E  4B70               	infsnz	disk_readp@length& (0+255),f,b
 12165  001510  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 12166  001512                     l318:
 12167                           
 12168                           ; BSR set to: 0
 12169                           
 12170                           ; BSR set to: 0
 12171  001512  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 12172  001514  D7F2               	goto	l319
 12173  001516  0E02               	movlw	2
 12174  001518  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 12175  00151A  A0D8               	btfss	status,0,c
 12176  00151C  D7EE               	goto	l319
 12177  00151E                     u9010:
 12178                           
 12179                           ; BSR set to: 0
 12180                           
 12181                           ; BSR set to: 0
 12182                           
 12183                           ; BSR set to: 0
 12184  00151E  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 12185  001520  D7C2               	goto	l312
 12186  001522  0E02               	movlw	2
 12187  001524  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 12188  001526  A0D8               	btfss	status,0,c
 12189  001528  D7BE               	goto	l312
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;diskio.c: 247: }
 12193                           ;diskio.c: 248: }
 12194                           ;diskio.c: 249: _delay((unsigned long)((1000)*(48000000/4000.0)));
 12195                           
 12196                           ; BSR set to: 0
 12197  00152A  0E3D               	movlw	61
 12198  00152C  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 12199  00152E  0EE1               	movlw	225
 12200  001530  6E26               	movwf	??_disk_readp& (0+255),c
 12201  001532  0E40               	movlw	64
 12202  001534                     u12297:
 12203  001534  2EE8               	decfsz	wreg,f,c
 12204  001536  D7FE               	bra	u12297
 12205  001538  2E26               	decfsz	??_disk_readp& (0+255),f,c
 12206  00153A  D7FC               	bra	u12297
 12207  00153C  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 12208  00153E  D7FA               	bra	u12297
 12209                           
 12210                           ;diskio.c: 255: command(0X4C,0X00000000,0X00);
 12211  001540  0E00               	movlw	0
 12212  001542  6E1E               	movwf	command@arg,c
 12213  001544  0E00               	movlw	0
 12214  001546  6E1F               	movwf	command@arg+1,c
 12215  001548  0E00               	movlw	0
 12216  00154A  6E20               	movwf	command@arg+2,c
 12217  00154C  0E00               	movlw	0
 12218  00154E  6E21               	movwf	command@arg+3,c
 12219  001550  0E00               	movlw	0
 12220  001552  6E22               	movwf	command@CRC,c
 12221  001554  0E4C               	movlw	76
 12222  001556  EC87  F018         	call	_command
 12223                           
 12224                           ;diskio.c: 256: proceed();
 12225  00155A  ECAA  F01A         	call	_proceed	;wreg free
 12226  00155E                     
 12227                           ;diskio.c: 258: buff = response();
 12228  00155E  EC9D  F01A         	call	_response	;wreg free
 12229  001562  0100               	movlb	0	; () banked
 12230  001564  6F6F               	movwf	disk_readp@buff& (0+255),b
 12231                           
 12232                           ; BSR set to: 0
 12233                           ;diskio.c: 259: }while(buff!=0xFF);
 12234  001566  296F               	incf	disk_readp@buff& (0+255),w,b
 12235  001568  A4D8               	btfss	status,2,c
 12236  00156A  D7F9               	goto	l322
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;diskio.c: 261: length = 0;
 12240                           
 12241                           ; BSR set to: 0
 12242  00156C  0E00               	movlw	0
 12243  00156E  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 12244  001570  0E00               	movlw	0
 12245  001572  6F70               	movwf	disk_readp@length& (0+255),b
 12246                           
 12247                           ; BSR set to: 0
 12248                           ;diskio.c: 262: if(flag == 1){
 12249  001574  05D7               	decf	_flag& (0+255),w,b
 12250  001576  11D8               	iorwf	(_flag+1)& (0+255),w,b
 12251  001578  B4D8               	btfsc	status,2,c
 12252  00157A  D003               	goto	l325
 12253  00157C  D00C               	goto	l324
 12254  00157E                     
 12255                           ; BSR set to: 0
 12256                           ;diskio.c: 264: {
 12257                           ;diskio.c: 266: length++;
 12258                           
 12259                           ; BSR set to: 0
 12260  00157E  4B70               	infsnz	disk_readp@length& (0+255),f,b
 12261  001580  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 12262  001582                     l325:
 12263                           
 12264                           ; BSR set to: 0
 12265                           
 12266                           ; BSR set to: 0
 12267  001582  0EAD               	movlw	low disk_readp@arr
 12268  001584  2570               	addwf	disk_readp@length& (0+255),w,b
 12269  001586  6ED9               	movwf	fsr2l,c
 12270  001588  0E02               	movlw	high disk_readp@arr
 12271  00158A  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 12272  00158C  6EDA               	movwf	fsr2h,c
 12273  00158E  50DF               	movf	indf2,w,c
 12274  001590  B4D8               	btfsc	status,2,c
 12275  001592  D00C               	goto	l328
 12276  001594  D7F4               	goto	l326
 12277  001596                     l324:
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;diskio.c: 269: else
 12281                           ;diskio.c: 270: {
 12282                           ;diskio.c: 271: posicao_cursor_lcd(2,0);
 12283                           
 12284                           ; BSR set to: 0
 12285  001596  0E00               	movlw	0
 12286  001598  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 12287  00159A  0E02               	movlw	2
 12288  00159C  ECE8  F017         	call	_posicao_cursor_lcd
 12289                           
 12290                           ;diskio.c: 272: escreve_frase_ram_lcd("..");
 12291  0015A0  0E7C               	movlw	low STR_7
 12292  0015A2  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 12293  0015A4  0E62               	movlw	high STR_7
 12294  0015A6  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 12295  0015A8  ECE0  F018         	call	_escreve_frase_ram_lcd	;wreg free
 12296  0015AC                     l328:
 12297                           
 12298                           ;diskio.c: 273: }
 12299                           ;diskio.c: 274: _delay((unsigned long)((2000)*(48000000/4000.0)));
 12300  0015AC  0E7A               	movlw	122
 12301  0015AE  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 12302  0015B0  0EC1               	movlw	193
 12303  0015B2  6E26               	movwf	??_disk_readp& (0+255),c
 12304  0015B4  0E82               	movlw	130
 12305  0015B6                     u12307:
 12306  0015B6  2EE8               	decfsz	wreg,f,c
 12307  0015B8  D7FE               	bra	u12307
 12308  0015BA  2E26               	decfsz	??_disk_readp& (0+255),f,c
 12309  0015BC  D7FC               	bra	u12307
 12310  0015BE  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 12311  0015C0  D7FA               	bra	u12307
 12312                           
 12313                           ;diskio.c: 276: return RES_OK;
 12314  0015C2  0E00               	movlw	0
 12315  0015C4  0012               	return	
 12316  0015C6                     __end_of_disk_readp:
 12317                           	opt stack 0
 12318                           tosu	equ	0xFFF
 12319                           tosh	equ	0xFFE
 12320                           tosl	equ	0xFFD
 12321                           pclath	equ	0xFFA
 12322                           tblptru	equ	0xFF8
 12323                           tblptrh	equ	0xFF7
 12324                           tblptrl	equ	0xFF6
 12325                           tablat	equ	0xFF5
 12326                           prodh	equ	0xFF4
 12327                           prodl	equ	0xFF3
 12328                           intcon	equ	0xFF2
 12329                           intcon2	equ	0xFF1
 12330                           intcon3	equ	0xFF0
 12331                           postinc0	equ	0xFEE
 12332                           wreg	equ	0xFE8
 12333                           indf1	equ	0xFE7
 12334                           postinc1	equ	0xFE6
 12335                           postdec1	equ	0xFE5
 12336                           fsr1h	equ	0xFE2
 12337                           fsr1l	equ	0xFE1
 12338                           indf2	equ	0xFDF
 12339                           postinc2	equ	0xFDE
 12340                           postdec2	equ	0xFDD
 12341                           plusw2	equ	0xFDB
 12342                           fsr2h	equ	0xFDA
 12343                           fsr2l	equ	0xFD9
 12344                           status	equ	0xFD8
 12345                           
 12346 ;; *************** function _response *****************
 12347 ;; Defined at:
 12348 ;;		line 319 in file "bibliotecas/SDCard.c"
 12349 ;; Parameters:    Size  Location     Type
 12350 ;;		None
 12351 ;; Auto vars:     Size  Location     Type
 12352 ;;  buff            1   28[COMRAM] unsigned char 
 12353 ;; Return value:  Size  Location     Type
 12354 ;;                  1    wreg      unsigned char 
 12355 ;; Registers used:
 12356 ;;		wreg, status,2, cstack
 12357 ;; Tracked objects:
 12358 ;;		On entry : 0/0
 12359 ;;		On exit  : 0/0
 12360 ;;		Unchanged: 0/0
 12361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12362 ;;      Params:         0       0       0       0       0       0       0       0       0
 12363 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12364 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12365 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12366 ;;Total ram usage:        1 bytes
 12367 ;; Hardware stack levels used:    1
 12368 ;; Hardware stack levels required when called:    3
 12369 ;; This function calls:
 12370 ;;		_recebe_dado_SPI
 12371 ;; This function is called by:
 12372 ;;		_disk_initialize
 12373 ;;		_disk_readp
 12374 ;;		_disk_writep
 12375 ;; This function uses a non-reentrant model
 12376 ;;
 12377                           
 12378                           	psect	text45
 12379  00353A                     __ptext45:
 12380                           	opt stack 0
 12381  00353A                     _response:
 12382                           	opt stack 22
 12383                           
 12384                           ;SDCard.c: 322: unsigned char buff;
 12385                           ;SDCard.c: 323: LATBbits.LATB4 = 1;
 12386                           
 12387                           ;incstack = 0
 12388  00353A  888A               	bsf	3978,4,c	;volatile
 12389                           
 12390                           ;SDCard.c: 324: buff= recebe_dado_SPI();
 12391  00353C  ECD9  F019         	call	_recebe_dado_SPI	;wreg free
 12392  003540  6E1D               	movwf	response@buff,c
 12393                           
 12394                           ;SDCard.c: 325: LATBbits.LATB4 = 0;
 12395  003542  988A               	bcf	3978,4,c	;volatile
 12396                           
 12397                           ;SDCard.c: 326: return buff;
 12398  003544  501D               	movf	response@buff,w,c
 12399  003546  0012               	return	
 12400  003548                     __end_of_response:
 12401                           	opt stack 0
 12402                           tosu	equ	0xFFF
 12403                           tosh	equ	0xFFE
 12404                           tosl	equ	0xFFD
 12405                           pclath	equ	0xFFA
 12406                           tblptru	equ	0xFF8
 12407                           tblptrh	equ	0xFF7
 12408                           tblptrl	equ	0xFF6
 12409                           tablat	equ	0xFF5
 12410                           prodh	equ	0xFF4
 12411                           prodl	equ	0xFF3
 12412                           intcon	equ	0xFF2
 12413                           intcon2	equ	0xFF1
 12414                           intcon3	equ	0xFF0
 12415                           postinc0	equ	0xFEE
 12416                           wreg	equ	0xFE8
 12417                           indf1	equ	0xFE7
 12418                           postinc1	equ	0xFE6
 12419                           postdec1	equ	0xFE5
 12420                           fsr1h	equ	0xFE2
 12421                           fsr1l	equ	0xFE1
 12422                           indf2	equ	0xFDF
 12423                           postinc2	equ	0xFDE
 12424                           postdec2	equ	0xFDD
 12425                           plusw2	equ	0xFDB
 12426                           fsr2h	equ	0xFDA
 12427                           fsr2l	equ	0xFD9
 12428                           status	equ	0xFD8
 12429                           
 12430 ;; *************** function _recebe_dado_SPI *****************
 12431 ;; Defined at:
 12432 ;;		line 107 in file "bibliotecas/SPI.c"
 12433 ;; Parameters:    Size  Location     Type
 12434 ;;		None
 12435 ;; Auto vars:     Size  Location     Type
 12436 ;;  temp_var        1   27[COMRAM] unsigned char 
 12437 ;; Return value:  Size  Location     Type
 12438 ;;                  1    wreg      unsigned char 
 12439 ;; Registers used:
 12440 ;;		wreg, status,2
 12441 ;; Tracked objects:
 12442 ;;		On entry : 0/0
 12443 ;;		On exit  : 0/0
 12444 ;;		Unchanged: 0/0
 12445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12446 ;;      Params:         0       0       0       0       0       0       0       0       0
 12447 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12448 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12449 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12450 ;;Total ram usage:        3 bytes
 12451 ;; Hardware stack levels used:    1
 12452 ;; Hardware stack levels required when called:    2
 12453 ;; This function calls:
 12454 ;;		Nothing
 12455 ;; This function is called by:
 12456 ;;		_response
 12457 ;; This function uses a non-reentrant model
 12458 ;;
 12459                           
 12460                           	psect	text46
 12461  0033B2                     __ptext46:
 12462                           	opt stack 0
 12463  0033B2                     _recebe_dado_SPI:
 12464                           	opt stack 22
 12465                           
 12466                           ;SPI.c: 109: PIR1bits.SSPIF = 0;
 12467                           
 12468                           ;incstack = 0
 12469  0033B2  969E               	bcf	3998,3,c	;volatile
 12470                           
 12471                           ;SPI.c: 110: unsigned char temp_var;
 12472                           ;SPI.c: 111: temp_var = SSPBUF;
 12473  0033B4  CFC9 F01C          	movff	4041,recebe_dado_SPI@temp_var	;volatile
 12474                           
 12475                           ;SPI.c: 112: SSPBUF = 0x00;
 12476  0033B8  0E00               	movlw	0
 12477  0033BA  6EC9               	movwf	4041,c	;volatile
 12478                           
 12479                           ;SPI.c: 113: _delay((unsigned long)((50)*(48000000/4000.0)));
 12480  0033BC  0E04               	movlw	4
 12481  0033BE  6E1B               	movwf	(??_recebe_dado_SPI+1)& (0+255),c
 12482  0033C0  0E0C               	movlw	12
 12483  0033C2  6E1A               	movwf	??_recebe_dado_SPI& (0+255),c
 12484  0033C4  0E34               	movlw	52
 12485  0033C6                     u12317:
 12486  0033C6  2EE8               	decfsz	wreg,f,c
 12487  0033C8  D7FE               	bra	u12317
 12488  0033CA  2E1A               	decfsz	??_recebe_dado_SPI& (0+255),f,c
 12489  0033CC  D7FC               	bra	u12317
 12490  0033CE  2E1B               	decfsz	(??_recebe_dado_SPI+1)& (0+255),f,c
 12491  0033D0  D7FA               	bra	u12317
 12492  0033D2  A69E               	btfss	3998,3,c	;volatile
 12493  0033D4  D7FE               	goto	l137
 12494                           
 12495                           ;SPI.c: 115: return (SSPBUF);
 12496  0033D6  50C9               	movf	4041,w,c	;volatile
 12497  0033D8  0012               	return	
 12498  0033DA                     __end_of_recebe_dado_SPI:
 12499                           	opt stack 0
 12500                           tosu	equ	0xFFF
 12501                           tosh	equ	0xFFE
 12502                           tosl	equ	0xFFD
 12503                           pclath	equ	0xFFA
 12504                           tblptru	equ	0xFF8
 12505                           tblptrh	equ	0xFF7
 12506                           tblptrl	equ	0xFF6
 12507                           tablat	equ	0xFF5
 12508                           prodh	equ	0xFF4
 12509                           prodl	equ	0xFF3
 12510                           intcon	equ	0xFF2
 12511                           intcon2	equ	0xFF1
 12512                           intcon3	equ	0xFF0
 12513                           postinc0	equ	0xFEE
 12514                           wreg	equ	0xFE8
 12515                           indf1	equ	0xFE7
 12516                           postinc1	equ	0xFE6
 12517                           postdec1	equ	0xFE5
 12518                           fsr1h	equ	0xFE2
 12519                           fsr1l	equ	0xFE1
 12520                           indf2	equ	0xFDF
 12521                           postinc2	equ	0xFDE
 12522                           postdec2	equ	0xFDD
 12523                           plusw2	equ	0xFDB
 12524                           fsr2h	equ	0xFDA
 12525                           fsr2l	equ	0xFD9
 12526                           status	equ	0xFD8
 12527                           
 12528 ;; *************** function _proceed *****************
 12529 ;; Defined at:
 12530 ;;		line 342 in file "bibliotecas/SDCard.c"
 12531 ;; Parameters:    Size  Location     Type
 12532 ;;		None
 12533 ;; Auto vars:     Size  Location     Type
 12534 ;;		None
 12535 ;; Return value:  Size  Location     Type
 12536 ;;                  1    wreg      void 
 12537 ;; Registers used:
 12538 ;;		wreg, status,2, cstack
 12539 ;; Tracked objects:
 12540 ;;		On entry : 0/0
 12541 ;;		On exit  : 0/0
 12542 ;;		Unchanged: 0/0
 12543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12544 ;;      Params:         0       0       0       0       0       0       0       0       0
 12545 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12546 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12547 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12548 ;;Total ram usage:        0 bytes
 12549 ;; Hardware stack levels used:    1
 12550 ;; Hardware stack levels required when called:    3
 12551 ;; This function calls:
 12552 ;;		_WriteSPI_
 12553 ;; This function is called by:
 12554 ;;		_reset
 12555 ;;		_disk_initialize
 12556 ;;		_disk_readp
 12557 ;;		_disk_writep
 12558 ;;		_SDCard
 12559 ;; This function uses a non-reentrant model
 12560 ;;
 12561                           
 12562                           	psect	text47
 12563  003554                     __ptext47:
 12564                           	opt stack 0
 12565  003554                     _proceed:
 12566                           	opt stack 25
 12567                           
 12568                           ;SDCard.c: 344: LATBbits.LATB4 = 1;
 12569                           
 12570                           ;incstack = 0
 12571  003554  888A               	bsf	3978,4,c	;volatile
 12572                           
 12573                           ;SDCard.c: 345: WriteSPI_(0xFF);
 12574  003556  0EFF               	movlw	255
 12575  003558  EC09  F019         	call	_WriteSPI_
 12576                           
 12577                           ;SDCard.c: 346: LATBbits.LATB4 = 0;
 12578  00355C  988A               	bcf	3978,4,c	;volatile
 12579  00355E  0012               	return		;funcret
 12580  003560                     __end_of_proceed:
 12581                           	opt stack 0
 12582                           tosu	equ	0xFFF
 12583                           tosh	equ	0xFFE
 12584                           tosl	equ	0xFFD
 12585                           pclath	equ	0xFFA
 12586                           tblptru	equ	0xFF8
 12587                           tblptrh	equ	0xFF7
 12588                           tblptrl	equ	0xFF6
 12589                           tablat	equ	0xFF5
 12590                           prodh	equ	0xFF4
 12591                           prodl	equ	0xFF3
 12592                           intcon	equ	0xFF2
 12593                           intcon2	equ	0xFF1
 12594                           intcon3	equ	0xFF0
 12595                           postinc0	equ	0xFEE
 12596                           wreg	equ	0xFE8
 12597                           indf1	equ	0xFE7
 12598                           postinc1	equ	0xFE6
 12599                           postdec1	equ	0xFE5
 12600                           fsr1h	equ	0xFE2
 12601                           fsr1l	equ	0xFE1
 12602                           indf2	equ	0xFDF
 12603                           postinc2	equ	0xFDE
 12604                           postdec2	equ	0xFDD
 12605                           plusw2	equ	0xFDB
 12606                           fsr2h	equ	0xFDA
 12607                           fsr2l	equ	0xFD9
 12608                           status	equ	0xFD8
 12609                           
 12610 ;; *************** function _posicao_cursor_lcd *****************
 12611 ;; Defined at:
 12612 ;;		line 271 in file "bibliotecas/display_lcd.c"
 12613 ;; Parameters:    Size  Location     Type
 12614 ;;  linha           1    wreg     unsigned char 
 12615 ;;  coluna          1   28[COMRAM] unsigned char 
 12616 ;; Auto vars:     Size  Location     Type
 12617 ;;  linha           1   29[COMRAM] unsigned char 
 12618 ;;  endereco        1   30[COMRAM] unsigned char 
 12619 ;; Return value:  Size  Location     Type
 12620 ;;                  1    wreg      void 
 12621 ;; Registers used:
 12622 ;;		wreg, status,2, status,0, cstack
 12623 ;; Tracked objects:
 12624 ;;		On entry : 0/0
 12625 ;;		On exit  : 0/0
 12626 ;;		Unchanged: 0/0
 12627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12628 ;;      Params:         1       0       0       0       0       0       0       0       0
 12629 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12630 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12631 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12632 ;;Total ram usage:        3 bytes
 12633 ;; Hardware stack levels used:    1
 12634 ;; Hardware stack levels required when called:    4
 12635 ;; This function calls:
 12636 ;;		_endereco_cursor_lcd
 12637 ;; This function is called by:
 12638 ;;		_inicializa_SPI
 12639 ;;		_disk_initialize
 12640 ;;		_disk_readp
 12641 ;;		_mensagem_inicial
 12642 ;;		_SDCard
 12643 ;;		_leitura_chave
 12644 ;; This function uses a non-reentrant model
 12645 ;;
 12646                           
 12647                           	psect	text48
 12648  002FD0                     __ptext48:
 12649                           	opt stack 0
 12650  002FD0                     _posicao_cursor_lcd:
 12651                           	opt stack 25
 12652                           
 12653                           ;incstack = 0
 12654                           ;posicao_cursor_lcd@linha stored from wreg
 12655  002FD0  6E1E               	movwf	posicao_cursor_lcd@linha,c
 12656                           
 12657                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 12658  002FD2  0E00               	movlw	0
 12659  002FD4  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12660                           
 12661                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 12662  002FD6  0E11               	movlw	17
 12663  002FD8  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 12664  002FDA  D02F               	goto	l407
 12665  002FDC  D01E               	goto	l408
 12666  002FDE                     l409:
 12667                           
 12668                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 12669  002FDE  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 12670                           
 12671                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 12672  002FE2  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12673  002FE4  EC20  F018         	call	_endereco_cursor_lcd
 12674                           
 12675                           ;display_lcd.c: 284: break;
 12676  002FE8  D026               	goto	l410
 12677  002FEA                     
 12678                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 12679  002FEA  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12680  002FEC  0F40               	addlw	64
 12681  002FEE  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12682                           
 12683                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 12684  002FF0  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12685  002FF2  EC20  F018         	call	_endereco_cursor_lcd
 12686                           
 12687                           ;display_lcd.c: 289: break;
 12688  002FF6  D01F               	goto	l410
 12689  002FF8                     
 12690                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 12691  002FF8  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12692  002FFA  0F14               	addlw	20
 12693  002FFC  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12694                           
 12695                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 12696  002FFE  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12697  003000  EC20  F018         	call	_endereco_cursor_lcd
 12698                           
 12699                           ;display_lcd.c: 294: break;
 12700  003004  D018               	goto	l410
 12701  003006                     
 12702                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 12703  003006  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12704  003008  0F54               	addlw	84
 12705  00300A  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12706                           
 12707                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 12708  00300C  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12709  00300E  EC20  F018         	call	_endereco_cursor_lcd
 12710                           
 12711                           ;display_lcd.c: 299: break;
 12712  003012  D011               	goto	l410
 12713  003014                     
 12714                           ;display_lcd.c: 302: endereco = 0x00U;
 12715  003014  0E00               	movlw	0
 12716  003016  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12717                           
 12718                           ;display_lcd.c: 304: }
 12719                           
 12720                           ;display_lcd.c: 303: break;
 12721  003018  D00E               	goto	l410
 12722  00301A                     l408:
 12723  00301A  501E               	movf	posicao_cursor_lcd@linha,w,c
 12724                           
 12725                           ; Switch size 1, requested type "space"
 12726                           ; Number of cases is 4, Range of values is 1 to 4
 12727                           ; switch strategies available:
 12728                           ; Name         Instructions Cycles
 12729                           ; simple_byte           13     7 (average)
 12730                           ;	Chosen strategy is simple_byte
 12731  00301C  0A01               	xorlw	1	; case 1
 12732  00301E  B4D8               	btfsc	status,2,c
 12733  003020  D7DE               	goto	l409
 12734  003022  0A03               	xorlw	3	; case 2
 12735  003024  B4D8               	btfsc	status,2,c
 12736  003026  D7E1               	goto	l411
 12737  003028  0A01               	xorlw	1	; case 3
 12738  00302A  B4D8               	btfsc	status,2,c
 12739  00302C  D7E5               	goto	l412
 12740  00302E  0A07               	xorlw	7	; case 4
 12741  003030  B4D8               	btfsc	status,2,c
 12742  003032  D7E9               	goto	l413
 12743  003034  D7EF               	goto	l414
 12744  003036                     l410:
 12745                           
 12746                           ;display_lcd.c: 306: coluna++;
 12747  003036  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 12748                           
 12749                           ;display_lcd.c: 307: }
 12750  003038  0012               	return	
 12751  00303A                     l407:
 12752                           
 12753                           ;display_lcd.c: 308: else
 12754                           ;display_lcd.c: 309: {
 12755                           ;display_lcd.c: 310: endereco = 0x00U;
 12756  00303A  0E00               	movlw	0
 12757  00303C  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12758  00303E  0012               	return	
 12759  003040                     __end_of_posicao_cursor_lcd:
 12760                           	opt stack 0
 12761                           tosu	equ	0xFFF
 12762                           tosh	equ	0xFFE
 12763                           tosl	equ	0xFFD
 12764                           pclath	equ	0xFFA
 12765                           tblptru	equ	0xFF8
 12766                           tblptrh	equ	0xFF7
 12767                           tblptrl	equ	0xFF6
 12768                           tablat	equ	0xFF5
 12769                           prodh	equ	0xFF4
 12770                           prodl	equ	0xFF3
 12771                           intcon	equ	0xFF2
 12772                           intcon2	equ	0xFF1
 12773                           intcon3	equ	0xFF0
 12774                           postinc0	equ	0xFEE
 12775                           wreg	equ	0xFE8
 12776                           indf1	equ	0xFE7
 12777                           postinc1	equ	0xFE6
 12778                           postdec1	equ	0xFE5
 12779                           fsr1h	equ	0xFE2
 12780                           fsr1l	equ	0xFE1
 12781                           indf2	equ	0xFDF
 12782                           postinc2	equ	0xFDE
 12783                           postdec2	equ	0xFDD
 12784                           plusw2	equ	0xFDB
 12785                           fsr2h	equ	0xFDA
 12786                           fsr2l	equ	0xFD9
 12787                           status	equ	0xFD8
 12788                           
 12789 ;; *************** function _endereco_cursor_lcd *****************
 12790 ;; Defined at:
 12791 ;;		line 218 in file "bibliotecas/display_lcd.c"
 12792 ;; Parameters:    Size  Location     Type
 12793 ;;  endereco        1    wreg     unsigned char 
 12794 ;; Auto vars:     Size  Location     Type
 12795 ;;  endereco        1   27[COMRAM] unsigned char 
 12796 ;; Return value:  Size  Location     Type
 12797 ;;                  1    wreg      void 
 12798 ;; Registers used:
 12799 ;;		wreg, status,2, status,0, cstack
 12800 ;; Tracked objects:
 12801 ;;		On entry : 0/0
 12802 ;;		On exit  : 0/0
 12803 ;;		Unchanged: 0/0
 12804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12805 ;;      Params:         0       0       0       0       0       0       0       0       0
 12806 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12807 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12808 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12809 ;;Total ram usage:        1 bytes
 12810 ;; Hardware stack levels used:    1
 12811 ;; Hardware stack levels required when called:    3
 12812 ;; This function calls:
 12813 ;;		_delay
 12814 ;; This function is called by:
 12815 ;;		_posicao_cursor_lcd
 12816 ;;		_cria_caractere_lcd
 12817 ;; This function uses a non-reentrant model
 12818 ;;
 12819                           
 12820                           	psect	text49
 12821  003040                     __ptext49:
 12822                           	opt stack 0
 12823  003040                     _endereco_cursor_lcd:
 12824                           	opt stack 25
 12825                           
 12826                           ;incstack = 0
 12827                           ;endereco_cursor_lcd@endereco stored from wreg
 12828  003040  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 12829                           
 12830                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 12831  003042  9483               	bcf	3971,2,c	;volatile
 12832                           
 12833                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 12834  003044  9283               	bcf	3971,1,c	;volatile
 12835                           
 12836                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 12837  003046  9083               	bcf	3971,0,c	;volatile
 12838                           
 12839                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 12840  003048  8E83               	bsf	3971,7,c	;volatile
 12841                           
 12842                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 12843  00304A  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 12844  00304C  D002               	goto	l390
 12845  00304E  8883               	bsf	3971,4,c	;volatile
 12846  003050  D001               	goto	l391
 12847  003052                     l390:
 12848                           
 12849                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 12850  003052  9883               	bcf	3971,4,c	;volatile
 12851  003054                     l391:
 12852                           
 12853                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 12854  003054  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 12855  003056  D002               	goto	l392
 12856  003058  8A83               	bsf	3971,5,c	;volatile
 12857  00305A  D001               	goto	l393
 12858  00305C                     l392:
 12859                           
 12860                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 12861  00305C  9A83               	bcf	3971,5,c	;volatile
 12862  00305E                     l393:
 12863                           
 12864                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 12865  00305E  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 12866  003060  D002               	goto	l394
 12867  003062  8C83               	bsf	3971,6,c	;volatile
 12868  003064  D001               	goto	l395
 12869  003066                     l394:
 12870                           
 12871                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 12872  003066  9C83               	bcf	3971,6,c	;volatile
 12873  003068                     l395:
 12874                           
 12875                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 12876  003068  8083               	bsf	3971,0,c	;volatile
 12877                           
 12878                           ;display_lcd.c: 236: delay();
 12879  00306A  ECFF  F019         	call	_delay	;wreg free
 12880                           
 12881                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 12882  00306E  9083               	bcf	3971,0,c	;volatile
 12883                           
 12884                           ;display_lcd.c: 238: delay();
 12885  003070  ECFF  F019         	call	_delay	;wreg free
 12886                           
 12887                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 12888  003074  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 12889  003076  D002               	goto	l396
 12890  003078  8883               	bsf	3971,4,c	;volatile
 12891  00307A  D001               	goto	l397
 12892  00307C                     l396:
 12893                           
 12894                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 12895  00307C  9883               	bcf	3971,4,c	;volatile
 12896  00307E                     l397:
 12897                           
 12898                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 12899  00307E  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 12900  003080  D002               	goto	l398
 12901  003082  8A83               	bsf	3971,5,c	;volatile
 12902  003084  D001               	goto	l399
 12903  003086                     l398:
 12904                           
 12905                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 12906  003086  9A83               	bcf	3971,5,c	;volatile
 12907  003088                     l399:
 12908                           
 12909                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 12910  003088  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 12911  00308A  D002               	goto	l400
 12912  00308C  8C83               	bsf	3971,6,c	;volatile
 12913  00308E  D001               	goto	l401
 12914  003090                     l400:
 12915                           
 12916                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 12917  003090  9C83               	bcf	3971,6,c	;volatile
 12918  003092                     l401:
 12919                           
 12920                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 12921  003092  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 12922  003094  D002               	goto	l402
 12923  003096  8E83               	bsf	3971,7,c	;volatile
 12924  003098  D001               	goto	l403
 12925  00309A                     l402:
 12926                           
 12927                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 12928  00309A  9E83               	bcf	3971,7,c	;volatile
 12929  00309C                     l403:
 12930                           
 12931                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 12932  00309C  8083               	bsf	3971,0,c	;volatile
 12933                           
 12934                           ;display_lcd.c: 252: delay();
 12935  00309E  ECFF  F019         	call	_delay	;wreg free
 12936                           
 12937                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 12938  0030A2  9083               	bcf	3971,0,c	;volatile
 12939                           
 12940                           ;display_lcd.c: 254: delay();
 12941  0030A4  ECFF  F019         	call	_delay	;wreg free
 12942  0030A8  0012               	return		;funcret
 12943  0030AA                     __end_of_endereco_cursor_lcd:
 12944                           	opt stack 0
 12945                           tosu	equ	0xFFF
 12946                           tosh	equ	0xFFE
 12947                           tosl	equ	0xFFD
 12948                           pclath	equ	0xFFA
 12949                           tblptru	equ	0xFF8
 12950                           tblptrh	equ	0xFF7
 12951                           tblptrl	equ	0xFF6
 12952                           tablat	equ	0xFF5
 12953                           prodh	equ	0xFF4
 12954                           prodl	equ	0xFF3
 12955                           intcon	equ	0xFF2
 12956                           intcon2	equ	0xFF1
 12957                           intcon3	equ	0xFF0
 12958                           postinc0	equ	0xFEE
 12959                           wreg	equ	0xFE8
 12960                           indf1	equ	0xFE7
 12961                           postinc1	equ	0xFE6
 12962                           postdec1	equ	0xFE5
 12963                           fsr1h	equ	0xFE2
 12964                           fsr1l	equ	0xFE1
 12965                           indf2	equ	0xFDF
 12966                           postinc2	equ	0xFDE
 12967                           postdec2	equ	0xFDD
 12968                           plusw2	equ	0xFDB
 12969                           fsr2h	equ	0xFDA
 12970                           fsr2l	equ	0xFD9
 12971                           status	equ	0xFD8
 12972                           
 12973 ;; *************** function _escreve_frase_ram_lcd *****************
 12974 ;; Defined at:
 12975 ;;		line 445 in file "bibliotecas/display_lcd.c"
 12976 ;; Parameters:    Size  Location     Type
 12977 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 12978 ;;		 -> STR_21(16), STR_20(14), STR_19(14), STR_18(14), 
 12979 ;;		 -> STR_17(14), STR_16(13), STR_15(17), STR_12(17), 
 12980 ;;		 -> STR_11(15), STR_10(14), mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 12981 ;;		 -> escreve_inteiro_lcd@texto(7), STR_7(3), STR_6(8), STR_5(14), 
 12982 ;;		 -> STR_4(13), STR_3(9), STR_2(14), leitura_chave@pos_ignicao_on(17), 
 12983 ;;		 -> leitura_chave@pos_ignicao_crank(17), leitura_chave@pos_ignicao_off(17), STR_1(17), 
 12984 ;; Auto vars:     Size  Location     Type
 12985 ;;		None
 12986 ;; Return value:  Size  Location     Type
 12987 ;;                  1    wreg      void 
 12988 ;; Registers used:
 12989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12990 ;; Tracked objects:
 12991 ;;		On entry : 0/0
 12992 ;;		On exit  : 0/0
 12993 ;;		Unchanged: 0/0
 12994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12995 ;;      Params:         2       0       0       0       0       0       0       0       0
 12996 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12997 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12998 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12999 ;;Total ram usage:        2 bytes
 13000 ;; Hardware stack levels used:    1
 13001 ;; Hardware stack levels required when called:    4
 13002 ;; This function calls:
 13003 ;;		_escreve_caractere_lcd
 13004 ;; This function is called by:
 13005 ;;		_inicializa_SPI
 13006 ;;		_disk_initialize
 13007 ;;		_disk_readp
 13008 ;;		_mensagem_inicial
 13009 ;;		_SDCard
 13010 ;;		_leitura_chave
 13011 ;;		_escreve_inteiro_lcd
 13012 ;; This function uses a non-reentrant model
 13013 ;;
 13014                           
 13015                           	psect	text50
 13016  0031C0                     __ptext50:
 13017                           	opt stack 0
 13018  0031C0                     _escreve_frase_ram_lcd:
 13019                           	opt stack 25
 13020                           
 13021                           ;display_lcd.c: 447: while(*buffer)
 13022                           
 13023                           ;incstack = 0
 13024  0031C0  D014               	goto	l452
 13025  0031C2                     
 13026                           ;display_lcd.c: 448: {
 13027                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 13028  0031C2  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13029  0031C6  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13030  0031CA  6AF8               	clrf	tblptru,c
 13031  0031CC  0E07               	movlw	(high __ramtop+-1)
 13032  0031CE  64F7               	cpfsgt	tblptrh,c
 13033  0031D0  D003               	bra	u8857
 13034  0031D2  0008               	tblrd		*
 13035  0031D4  50F5               	movf	tablat,w,c
 13036  0031D6  D005               	bra	u8850
 13037  0031D8                     u8857:
 13038  0031D8  CFF6 FFE9          	movff	tblptrl,fsr0l
 13039  0031DC  CFF7 FFEA          	movff	tblptrh,fsr0h
 13040  0031E0  50EF               	movf	indf0,w,c
 13041  0031E2                     u8850:
 13042  0031E2  EC77  F017         	call	_escreve_caractere_lcd
 13043                           
 13044                           ;display_lcd.c: 450: buffer++;
 13045  0031E6  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 13046  0031E8  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 13047  0031EA                     l452:
 13048  0031EA  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13049  0031EE  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13050  0031F2  6AF8               	clrf	tblptru,c
 13051  0031F4  0E07               	movlw	(high __ramtop+-1)
 13052  0031F6  64F7               	cpfsgt	tblptrh,c
 13053  0031F8  D003               	bra	u8867
 13054  0031FA  0008               	tblrd		*
 13055  0031FC  50F5               	movf	tablat,w,c
 13056  0031FE  D005               	bra	u8860
 13057  003200                     u8867:
 13058  003200  CFF6 FFE9          	movff	tblptrl,fsr0l
 13059  003204  CFF7 FFEA          	movff	tblptrh,fsr0h
 13060  003208  50EF               	movf	indf0,w,c
 13061  00320A                     u8860:
 13062  00320A  0900               	iorlw	0
 13063  00320C  B4D8               	btfsc	status,2,c
 13064  00320E  0012               	return	
 13065  003210  D7D8               	goto	l453
 13066  003212                     __end_of_escreve_frase_ram_lcd:
 13067                           	opt stack 0
 13068                           tosu	equ	0xFFF
 13069                           tosh	equ	0xFFE
 13070                           tosl	equ	0xFFD
 13071                           pclath	equ	0xFFA
 13072                           tblptru	equ	0xFF8
 13073                           tblptrh	equ	0xFF7
 13074                           tblptrl	equ	0xFF6
 13075                           tablat	equ	0xFF5
 13076                           prodh	equ	0xFF4
 13077                           prodl	equ	0xFF3
 13078                           intcon	equ	0xFF2
 13079                           intcon2	equ	0xFF1
 13080                           intcon3	equ	0xFF0
 13081                           indf0	equ	0xFEF
 13082                           postinc0	equ	0xFEE
 13083                           fsr0h	equ	0xFEA
 13084                           fsr0l	equ	0xFE9
 13085                           wreg	equ	0xFE8
 13086                           indf1	equ	0xFE7
 13087                           postinc1	equ	0xFE6
 13088                           postdec1	equ	0xFE5
 13089                           fsr1h	equ	0xFE2
 13090                           fsr1l	equ	0xFE1
 13091                           indf2	equ	0xFDF
 13092                           postinc2	equ	0xFDE
 13093                           postdec2	equ	0xFDD
 13094                           plusw2	equ	0xFDB
 13095                           fsr2h	equ	0xFDA
 13096                           fsr2l	equ	0xFD9
 13097                           status	equ	0xFD8
 13098                           
 13099 ;; *************** function _escreve_caractere_lcd *****************
 13100 ;; Defined at:
 13101 ;;		line 323 in file "bibliotecas/display_lcd.c"
 13102 ;; Parameters:    Size  Location     Type
 13103 ;;  data            1    wreg     unsigned char 
 13104 ;; Auto vars:     Size  Location     Type
 13105 ;;  data            1   27[COMRAM] unsigned char 
 13106 ;; Return value:  Size  Location     Type
 13107 ;;                  1    wreg      void 
 13108 ;; Registers used:
 13109 ;;		wreg, status,2, status,0, cstack
 13110 ;; Tracked objects:
 13111 ;;		On entry : 0/0
 13112 ;;		On exit  : 0/0
 13113 ;;		Unchanged: 0/0
 13114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13115 ;;      Params:         0       0       0       0       0       0       0       0       0
 13116 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13117 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13118 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13119 ;;Total ram usage:        1 bytes
 13120 ;; Hardware stack levels used:    1
 13121 ;; Hardware stack levels required when called:    3
 13122 ;; This function calls:
 13123 ;;		_delay
 13124 ;; This function is called by:
 13125 ;;		_escreve_frase_ram_lcd
 13126 ;;		_escreve_float_lcd
 13127 ;;		_escreve_frase_lcd
 13128 ;;		_cria_caractere_lcd
 13129 ;; This function uses a non-reentrant model
 13130 ;;
 13131                           
 13132                           	psect	text51
 13133  002EEE                     __ptext51:
 13134                           	opt stack 0
 13135  002EEE                     _escreve_caractere_lcd:
 13136                           	opt stack 25
 13137                           
 13138                           ;incstack = 0
 13139                           ;escreve_caractere_lcd@data stored from wreg
 13140  002EEE  6E1C               	movwf	escreve_caractere_lcd@data,c
 13141                           
 13142                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 13143  002EF0  9483               	bcf	3971,2,c	;volatile
 13144                           
 13145                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 13146  002EF2  8283               	bsf	3971,1,c	;volatile
 13147                           
 13148                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 13149  002EF4  9083               	bcf	3971,0,c	;volatile
 13150                           
 13151                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 13152  002EF6  A81C               	btfss	escreve_caractere_lcd@data,4,c
 13153  002EF8  D002               	goto	l419
 13154  002EFA  8883               	bsf	3971,4,c	;volatile
 13155  002EFC  D001               	goto	l420
 13156  002EFE                     l419:
 13157                           
 13158                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 13159  002EFE  9883               	bcf	3971,4,c	;volatile
 13160  002F00                     l420:
 13161                           
 13162                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 13163  002F00  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 13164  002F02  D002               	goto	l421
 13165  002F04  8A83               	bsf	3971,5,c	;volatile
 13166  002F06  D001               	goto	l422
 13167  002F08                     l421:
 13168                           
 13169                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 13170  002F08  9A83               	bcf	3971,5,c	;volatile
 13171  002F0A                     l422:
 13172                           
 13173                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 13174  002F0A  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 13175  002F0C  D002               	goto	l423
 13176  002F0E  8C83               	bsf	3971,6,c	;volatile
 13177  002F10  D001               	goto	l424
 13178  002F12                     l423:
 13179                           
 13180                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 13181  002F12  9C83               	bcf	3971,6,c	;volatile
 13182  002F14                     l424:
 13183                           
 13184                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 13185  002F14  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 13186  002F16  D002               	goto	l425
 13187  002F18  8E83               	bsf	3971,7,c	;volatile
 13188  002F1A  D001               	goto	l426
 13189  002F1C                     l425:
 13190                           
 13191                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 13192  002F1C  9E83               	bcf	3971,7,c	;volatile
 13193  002F1E                     l426:
 13194                           
 13195                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 13196  002F1E  8083               	bsf	3971,0,c	;volatile
 13197                           
 13198                           ;display_lcd.c: 342: delay();
 13199  002F20  ECFF  F019         	call	_delay	;wreg free
 13200                           
 13201                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 13202  002F24  9083               	bcf	3971,0,c	;volatile
 13203                           
 13204                           ;display_lcd.c: 344: delay();
 13205  002F26  ECFF  F019         	call	_delay	;wreg free
 13206                           
 13207                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 13208  002F2A  A01C               	btfss	escreve_caractere_lcd@data,0,c
 13209  002F2C  D002               	goto	l427
 13210  002F2E  8883               	bsf	3971,4,c	;volatile
 13211  002F30  D001               	goto	l428
 13212  002F32                     l427:
 13213                           
 13214                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 13215  002F32  9883               	bcf	3971,4,c	;volatile
 13216  002F34                     l428:
 13217                           
 13218                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 13219  002F34  A21C               	btfss	escreve_caractere_lcd@data,1,c
 13220  002F36  D002               	goto	l429
 13221  002F38  8A83               	bsf	3971,5,c	;volatile
 13222  002F3A  D001               	goto	l430
 13223  002F3C                     l429:
 13224                           
 13225                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 13226  002F3C  9A83               	bcf	3971,5,c	;volatile
 13227  002F3E                     l430:
 13228                           
 13229                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 13230  002F3E  A41C               	btfss	escreve_caractere_lcd@data,2,c
 13231  002F40  D002               	goto	l431
 13232  002F42  8C83               	bsf	3971,6,c	;volatile
 13233  002F44  D001               	goto	l432
 13234  002F46                     l431:
 13235                           
 13236                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 13237  002F46  9C83               	bcf	3971,6,c	;volatile
 13238  002F48                     l432:
 13239                           
 13240                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 13241  002F48  A61C               	btfss	escreve_caractere_lcd@data,3,c
 13242  002F4A  D002               	goto	l433
 13243  002F4C  8E83               	bsf	3971,7,c	;volatile
 13244  002F4E  D001               	goto	l434
 13245  002F50                     l433:
 13246                           
 13247                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 13248  002F50  9E83               	bcf	3971,7,c	;volatile
 13249  002F52                     l434:
 13250                           
 13251                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 13252  002F52  8083               	bsf	3971,0,c	;volatile
 13253                           
 13254                           ;display_lcd.c: 359: delay();
 13255  002F54  ECFF  F019         	call	_delay	;wreg free
 13256                           
 13257                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 13258  002F58  9083               	bcf	3971,0,c	;volatile
 13259                           
 13260                           ;display_lcd.c: 361: delay();
 13261  002F5A  ECFF  F019         	call	_delay	;wreg free
 13262  002F5E  0012               	return		;funcret
 13263  002F60                     __end_of_escreve_caractere_lcd:
 13264                           	opt stack 0
 13265                           tosu	equ	0xFFF
 13266                           tosh	equ	0xFFE
 13267                           tosl	equ	0xFFD
 13268                           pclath	equ	0xFFA
 13269                           tblptru	equ	0xFF8
 13270                           tblptrh	equ	0xFF7
 13271                           tblptrl	equ	0xFF6
 13272                           tablat	equ	0xFF5
 13273                           prodh	equ	0xFF4
 13274                           prodl	equ	0xFF3
 13275                           intcon	equ	0xFF2
 13276                           intcon2	equ	0xFF1
 13277                           intcon3	equ	0xFF0
 13278                           indf0	equ	0xFEF
 13279                           postinc0	equ	0xFEE
 13280                           fsr0h	equ	0xFEA
 13281                           fsr0l	equ	0xFE9
 13282                           wreg	equ	0xFE8
 13283                           indf1	equ	0xFE7
 13284                           postinc1	equ	0xFE6
 13285                           postdec1	equ	0xFE5
 13286                           fsr1h	equ	0xFE2
 13287                           fsr1l	equ	0xFE1
 13288                           indf2	equ	0xFDF
 13289                           postinc2	equ	0xFDE
 13290                           postdec2	equ	0xFDD
 13291                           plusw2	equ	0xFDB
 13292                           fsr2h	equ	0xFDA
 13293                           fsr2l	equ	0xFD9
 13294                           status	equ	0xFD8
 13295                           
 13296 ;; *************** function _delay *****************
 13297 ;; Defined at:
 13298 ;;		line 45 in file "bibliotecas/display_lcd.c"
 13299 ;; Parameters:    Size  Location     Type
 13300 ;;		None
 13301 ;; Auto vars:     Size  Location     Type
 13302 ;;  contador_int    1   26[COMRAM] unsigned char 
 13303 ;;  contador_ext    1   25[COMRAM] unsigned char 
 13304 ;; Return value:  Size  Location     Type
 13305 ;;                  1    wreg      void 
 13306 ;; Registers used:
 13307 ;;		wreg, status,2, status,0
 13308 ;; Tracked objects:
 13309 ;;		On entry : 0/0
 13310 ;;		On exit  : 0/0
 13311 ;;		Unchanged: 0/0
 13312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13313 ;;      Params:         0       0       0       0       0       0       0       0       0
 13314 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13315 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13316 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13317 ;;Total ram usage:        2 bytes
 13318 ;; Hardware stack levels used:    1
 13319 ;; Hardware stack levels required when called:    2
 13320 ;; This function calls:
 13321 ;;		Nothing
 13322 ;; This function is called by:
 13323 ;;		_init_lcd
 13324 ;;		_escreve_cmd_lcd
 13325 ;;		_endereco_cursor_lcd
 13326 ;;		_escreve_caractere_lcd
 13327 ;; This function uses a non-reentrant model
 13328 ;;
 13329                           
 13330                           	psect	text52
 13331  0033FE                     __ptext52:
 13332                           	opt stack 0
 13333  0033FE                     _delay:
 13334                           	opt stack 25
 13335                           
 13336                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 13337                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 13338                           
 13339                           ;incstack = 0
 13340  0033FE  0E00               	movlw	0
 13341  003400  6E1A               	movwf	delay@contador_ext,c
 13342  003402                     l7898:
 13343  003402  0E63               	movlw	99
 13344  003404  641A               	cpfsgt	delay@contador_ext,c
 13345  003406  D001               	goto	l358
 13346  003408  0012               	return	
 13347  00340A                     l358:
 13348                           
 13349                           ;display_lcd.c: 50: {
 13350                           ;display_lcd.c: 51: __nop();
 13351  00340A  F000               	nop	
 13352                           
 13353                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 13354  00340C  0E00               	movlw	0
 13355  00340E  6E1B               	movwf	delay@contador_int,c
 13356  003410                     l7904:
 13357  003410  0E31               	movlw	49
 13358  003412  641B               	cpfsgt	delay@contador_int,c
 13359  003414  D001               	goto	l360
 13360  003416  D003               	goto	u8620
 13361  003418                     l360:
 13362                           
 13363                           ;display_lcd.c: 53: {
 13364                           ;display_lcd.c: 54: __nop();
 13365  003418  F000               	nop	
 13366  00341A  2A1B               	incf	delay@contador_int,f,c
 13367  00341C  D7F9               	goto	l7904
 13368  00341E                     u8620:
 13369  00341E  2A1A               	incf	delay@contador_ext,f,c
 13370  003420  D7F0               	goto	l7898
 13371  003422                     __end_of_delay:
 13372                           	opt stack 0
 13373                           tosu	equ	0xFFF
 13374                           tosh	equ	0xFFE
 13375                           tosl	equ	0xFFD
 13376                           pclath	equ	0xFFA
 13377                           tblptru	equ	0xFF8
 13378                           tblptrh	equ	0xFF7
 13379                           tblptrl	equ	0xFF6
 13380                           tablat	equ	0xFF5
 13381                           prodh	equ	0xFF4
 13382                           prodl	equ	0xFF3
 13383                           intcon	equ	0xFF2
 13384                           intcon2	equ	0xFF1
 13385                           intcon3	equ	0xFF0
 13386                           indf0	equ	0xFEF
 13387                           postinc0	equ	0xFEE
 13388                           fsr0h	equ	0xFEA
 13389                           fsr0l	equ	0xFE9
 13390                           wreg	equ	0xFE8
 13391                           indf1	equ	0xFE7
 13392                           postinc1	equ	0xFE6
 13393                           postdec1	equ	0xFE5
 13394                           fsr1h	equ	0xFE2
 13395                           fsr1l	equ	0xFE1
 13396                           indf2	equ	0xFDF
 13397                           postinc2	equ	0xFDE
 13398                           postdec2	equ	0xFDD
 13399                           plusw2	equ	0xFDB
 13400                           fsr2h	equ	0xFDA
 13401                           fsr2l	equ	0xFD9
 13402                           status	equ	0xFD8
 13403                           
 13404 ;; *************** function _dummy_clocks *****************
 13405 ;; Defined at:
 13406 ;;		line 330 in file "bibliotecas/SDCard.c"
 13407 ;; Parameters:    Size  Location     Type
 13408 ;;  n               1    wreg     unsigned char 
 13409 ;; Auto vars:     Size  Location     Type
 13410 ;;  n               1   31[COMRAM] unsigned char 
 13411 ;;  i               2   32[COMRAM] unsigned int 
 13412 ;; Return value:  Size  Location     Type
 13413 ;;                  1    wreg      void 
 13414 ;; Registers used:
 13415 ;;		wreg, status,2, status,0, cstack
 13416 ;; Tracked objects:
 13417 ;;		On entry : 0/0
 13418 ;;		On exit  : 0/0
 13419 ;;		Unchanged: 0/0
 13420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13421 ;;      Params:         0       0       0       0       0       0       0       0       0
 13422 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13423 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13424 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13425 ;;Total ram usage:        5 bytes
 13426 ;; Hardware stack levels used:    1
 13427 ;; Hardware stack levels required when called:    3
 13428 ;; This function calls:
 13429 ;;		_WriteSPI_
 13430 ;; This function is called by:
 13431 ;;		_reset
 13432 ;;		_disk_initialize
 13433 ;;		_disk_readp
 13434 ;;		_disk_writep
 13435 ;; This function uses a non-reentrant model
 13436 ;;
 13437                           
 13438                           	psect	text53
 13439  003358                     __ptext53:
 13440                           	opt stack 0
 13441  003358                     _dummy_clocks:
 13442                           	opt stack 22
 13443                           
 13444                           ;incstack = 0
 13445                           ;dummy_clocks@n stored from wreg
 13446  003358  6E20               	movwf	dummy_clocks@n,c
 13447                           
 13448                           ;SDCard.c: 332: unsigned int i;
 13449                           ;SDCard.c: 333: for(i=0;i<n;i++)
 13450  00335A  0E00               	movlw	0
 13451  00335C  6E22               	movwf	dummy_clocks@i+1,c
 13452  00335E  0E00               	movlw	0
 13453  003360  6E21               	movwf	dummy_clocks@i,c
 13454  003362  D007               	goto	l50
 13455  003364                     l51:
 13456                           
 13457                           ;SDCard.c: 334: {
 13458                           ;SDCard.c: 335: LATBbits.LATB4 = 0;
 13459  003364  988A               	bcf	3978,4,c	;volatile
 13460                           
 13461                           ;SDCard.c: 336: WriteSPI_(0XFF);
 13462  003366  0EFF               	movlw	255
 13463  003368  EC09  F019         	call	_WriteSPI_
 13464                           
 13465                           ;SDCard.c: 337: LATBbits.LATB4 = 1;
 13466  00336C  888A               	bsf	3978,4,c	;volatile
 13467  00336E  4A21               	infsnz	dummy_clocks@i,f,c
 13468  003370  2A22               	incf	dummy_clocks@i+1,f,c
 13469  003372                     l50:
 13470  003372  5020               	movf	dummy_clocks@n,w,c
 13471  003374  6E1E               	movwf	??_dummy_clocks& (0+255),c
 13472  003376  6A1F               	clrf	(??_dummy_clocks+1)& (0+255),c
 13473  003378  501E               	movf	??_dummy_clocks,w,c
 13474  00337A  5C21               	subwf	dummy_clocks@i,w,c
 13475  00337C  501F               	movf	??_dummy_clocks+1,w,c
 13476  00337E  5822               	subwfb	dummy_clocks@i+1,w,c
 13477  003380  B0D8               	btfsc	status,0,c
 13478  003382  0012               	return	
 13479  003384  D7EF               	goto	l51
 13480  003386                     __end_of_dummy_clocks:
 13481                           	opt stack 0
 13482                           tosu	equ	0xFFF
 13483                           tosh	equ	0xFFE
 13484                           tosl	equ	0xFFD
 13485                           pclath	equ	0xFFA
 13486                           tblptru	equ	0xFF8
 13487                           tblptrh	equ	0xFF7
 13488                           tblptrl	equ	0xFF6
 13489                           tablat	equ	0xFF5
 13490                           prodh	equ	0xFF4
 13491                           prodl	equ	0xFF3
 13492                           intcon	equ	0xFF2
 13493                           intcon2	equ	0xFF1
 13494                           intcon3	equ	0xFF0
 13495                           indf0	equ	0xFEF
 13496                           postinc0	equ	0xFEE
 13497                           fsr0h	equ	0xFEA
 13498                           fsr0l	equ	0xFE9
 13499                           wreg	equ	0xFE8
 13500                           indf1	equ	0xFE7
 13501                           postinc1	equ	0xFE6
 13502                           postdec1	equ	0xFE5
 13503                           fsr1h	equ	0xFE2
 13504                           fsr1l	equ	0xFE1
 13505                           indf2	equ	0xFDF
 13506                           postinc2	equ	0xFDE
 13507                           postdec2	equ	0xFDD
 13508                           plusw2	equ	0xFDB
 13509                           fsr2h	equ	0xFDA
 13510                           fsr2l	equ	0xFD9
 13511                           status	equ	0xFD8
 13512                           
 13513 ;; *************** function _command *****************
 13514 ;; Defined at:
 13515 ;;		line 351 in file "bibliotecas/SDCard.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;  CMD             1    wreg     unsigned char 
 13518 ;;  arg             4   29[COMRAM] unsigned long 
 13519 ;;  CRC             1   33[COMRAM] unsigned char 
 13520 ;; Auto vars:     Size  Location     Type
 13521 ;;  CMD             1   35[COMRAM] unsigned char 
 13522 ;;  argument        1   36[COMRAM] unsigned char 
 13523 ;; Return value:  Size  Location     Type
 13524 ;;                  1    wreg      void 
 13525 ;; Registers used:
 13526 ;;		wreg, status,2, status,0, cstack
 13527 ;; Tracked objects:
 13528 ;;		On entry : 0/0
 13529 ;;		On exit  : 0/0
 13530 ;;		Unchanged: 0/0
 13531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13532 ;;      Params:         5       0       0       0       0       0       0       0       0
 13533 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13534 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13535 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13536 ;;Total ram usage:        8 bytes
 13537 ;; Hardware stack levels used:    1
 13538 ;; Hardware stack levels required when called:    3
 13539 ;; This function calls:
 13540 ;;		_WriteSPI_
 13541 ;; This function is called by:
 13542 ;;		_reset
 13543 ;;		_disk_initialize
 13544 ;;		_disk_readp
 13545 ;;		_disk_writep
 13546 ;; This function uses a non-reentrant model
 13547 ;;
 13548                           
 13549                           	psect	text54
 13550  00310E                     __ptext54:
 13551                           	opt stack 0
 13552  00310E                     _command:
 13553                           	opt stack 22
 13554                           
 13555                           ;incstack = 0
 13556                           ;command@CMD stored from wreg
 13557  00310E  6E24               	movwf	command@CMD,c
 13558                           
 13559                           ;SDCard.c: 353: LATBbits.LATB3 = ~LATBbits.LATB3;
 13560  003110  A68A               	btfss	3978,3,c	;volatile
 13561  003112  D002               	goto	u8830
 13562  003114  0E01               	movlw	1
 13563  003116  D001               	goto	u8836
 13564  003118                     u8830:
 13565  003118  0E00               	movlw	0
 13566  00311A                     u8836:
 13567  00311A  0AFF               	xorlw	255
 13568  00311C  6E23               	movwf	??_command& (0+255),c
 13569  00311E  4623               	rlncf	??_command,f,c
 13570  003120  4623               	rlncf	??_command,f,c
 13571  003122  4623               	rlncf	??_command,f,c
 13572  003124  508A               	movf	3978,w,c	;volatile
 13573  003126  1823               	xorwf	??_command,w,c
 13574  003128  0BF7               	andlw	-9
 13575  00312A  1823               	xorwf	??_command,w,c
 13576  00312C  6E8A               	movwf	3978,c	;volatile
 13577                           
 13578                           ;SDCard.c: 354: unsigned char argument = arg>>24;
 13579  00312E  C021  F025         	movff	command@arg+3,command@argument
 13580                           
 13581                           ;SDCard.c: 355: WriteSPI_(0xFF);
 13582  003132  0EFF               	movlw	255
 13583  003134  EC09  F019         	call	_WriteSPI_
 13584                           
 13585                           ;SDCard.c: 356: WriteSPI_(CMD);
 13586  003138  5024               	movf	command@CMD,w,c
 13587  00313A  EC09  F019         	call	_WriteSPI_
 13588                           
 13589                           ;SDCard.c: 357: WriteSPI_(argument);
 13590  00313E  5025               	movf	command@argument,w,c
 13591  003140  EC09  F019         	call	_WriteSPI_
 13592                           
 13593                           ;SDCard.c: 358: argument = arg>>16;
 13594  003144  C020  F025         	movff	command@arg+2,command@argument
 13595                           
 13596                           ;SDCard.c: 359: WriteSPI_(argument);
 13597  003148  5025               	movf	command@argument,w,c
 13598  00314A  EC09  F019         	call	_WriteSPI_
 13599                           
 13600                           ;SDCard.c: 360: argument = arg>>8;
 13601  00314E  C01F  F025         	movff	command@arg+1,command@argument
 13602                           
 13603                           ;SDCard.c: 361: WriteSPI_(argument);
 13604  003152  5025               	movf	command@argument,w,c
 13605  003154  EC09  F019         	call	_WriteSPI_
 13606                           
 13607                           ;SDCard.c: 362: argument = arg;
 13608  003158  C01E  F025         	movff	command@arg,command@argument
 13609                           
 13610                           ;SDCard.c: 363: WriteSPI_(argument);
 13611  00315C  5025               	movf	command@argument,w,c
 13612  00315E  EC09  F019         	call	_WriteSPI_
 13613                           
 13614                           ;SDCard.c: 364: WriteSPI_(CRC);
 13615  003162  5022               	movf	command@CRC,w,c
 13616  003164  EC09  F019         	call	_WriteSPI_
 13617  003168  0012               	return		;funcret
 13618  00316A                     __end_of_command:
 13619                           	opt stack 0
 13620                           tosu	equ	0xFFF
 13621                           tosh	equ	0xFFE
 13622                           tosl	equ	0xFFD
 13623                           pclath	equ	0xFFA
 13624                           tblptru	equ	0xFF8
 13625                           tblptrh	equ	0xFF7
 13626                           tblptrl	equ	0xFF6
 13627                           tablat	equ	0xFF5
 13628                           prodh	equ	0xFF4
 13629                           prodl	equ	0xFF3
 13630                           intcon	equ	0xFF2
 13631                           intcon2	equ	0xFF1
 13632                           intcon3	equ	0xFF0
 13633                           indf0	equ	0xFEF
 13634                           postinc0	equ	0xFEE
 13635                           fsr0h	equ	0xFEA
 13636                           fsr0l	equ	0xFE9
 13637                           wreg	equ	0xFE8
 13638                           indf1	equ	0xFE7
 13639                           postinc1	equ	0xFE6
 13640                           postdec1	equ	0xFE5
 13641                           fsr1h	equ	0xFE2
 13642                           fsr1l	equ	0xFE1
 13643                           indf2	equ	0xFDF
 13644                           postinc2	equ	0xFDE
 13645                           postdec2	equ	0xFDD
 13646                           plusw2	equ	0xFDB
 13647                           fsr2h	equ	0xFDA
 13648                           fsr2l	equ	0xFD9
 13649                           status	equ	0xFD8
 13650                           
 13651 ;; *************** function _WriteSPI_ *****************
 13652 ;; Defined at:
 13653 ;;		line 125 in file "bibliotecas/SPI.c"
 13654 ;; Parameters:    Size  Location     Type
 13655 ;;  dado            1    wreg     unsigned char 
 13656 ;; Auto vars:     Size  Location     Type
 13657 ;;  dado            1   28[COMRAM] unsigned char 
 13658 ;;  TempVar         1   27[COMRAM] unsigned char 
 13659 ;; Return value:  Size  Location     Type
 13660 ;;                  1    wreg      unsigned char 
 13661 ;; Registers used:
 13662 ;;		wreg, status,2, cstack
 13663 ;; Tracked objects:
 13664 ;;		On entry : 0/0
 13665 ;;		On exit  : 0/0
 13666 ;;		Unchanged: 0/0
 13667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13668 ;;      Params:         0       0       0       0       0       0       0       0       0
 13669 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13670 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13671 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13672 ;;Total ram usage:        4 bytes
 13673 ;; Hardware stack levels used:    1
 13674 ;; Hardware stack levels required when called:    2
 13675 ;; This function calls:
 13676 ;;		Nothing
 13677 ;; This function is called by:
 13678 ;;		_dummy_clocks
 13679 ;;		_proceed
 13680 ;;		_command
 13681 ;;		_disk_writep
 13682 ;; This function uses a non-reentrant model
 13683 ;;
 13684                           
 13685                           	psect	text55
 13686  003212                     __ptext55:
 13687                           	opt stack 0
 13688  003212                     _WriteSPI_:
 13689                           	opt stack 25
 13690                           
 13691                           ;incstack = 0
 13692                           ;WriteSPI_@dado stored from wreg
 13693  003212  6E1D               	movwf	WriteSPI_@dado,c
 13694                           
 13695                           ;SPI.c: 127: unsigned char TempVar;
 13696                           ;SPI.c: 128: TempVar = SSPBUF;
 13697  003214  CFC9 F01C          	movff	4041,WriteSPI_@TempVar	;volatile
 13698                           
 13699                           ;SPI.c: 129: PIR1bits.SSPIF = 0;
 13700  003218  969E               	bcf	3998,3,c	;volatile
 13701                           
 13702                           ;SPI.c: 130: SSPCON1bits.WCOL = 0;
 13703  00321A  9EC6               	bcf	4038,7,c	;volatile
 13704                           
 13705                           ;SPI.c: 131: SSPSTATbits.BF = 0;
 13706  00321C  90C7               	bcf	4039,0,c	;volatile
 13707                           
 13708                           ;SPI.c: 132: SSPBUF = 0x00;
 13709  00321E  0E00               	movlw	0
 13710  003220  6EC9               	movwf	4041,c	;volatile
 13711                           
 13712                           ;SPI.c: 133: _delay((unsigned long)((50)*(48000000/4000.0)));
 13713  003222  0E04               	movlw	4
 13714  003224  6E1B               	movwf	(??_WriteSPI_+1)& (0+255),c
 13715  003226  0E0C               	movlw	12
 13716  003228  6E1A               	movwf	??_WriteSPI_& (0+255),c
 13717  00322A  0E34               	movlw	52
 13718  00322C                     u12327:
 13719  00322C  2EE8               	decfsz	wreg,f,c
 13720  00322E  D7FE               	bra	u12327
 13721  003230  2E1A               	decfsz	??_WriteSPI_& (0+255),f,c
 13722  003232  D7FC               	bra	u12327
 13723  003234  2E1B               	decfsz	(??_WriteSPI_+1)& (0+255),f,c
 13724  003236  D7FA               	bra	u12327
 13725                           
 13726                           ;SPI.c: 134: SSPBUF = dado;
 13727  003238  C01D  FFC9         	movff	WriteSPI_@dado,4041	;volatile
 13728                           
 13729                           ;SPI.c: 135: if (SSPCON1 & 0x80 )
 13730  00323C  BEC6               	btfsc	4038,7,c	;volatile
 13731  00323E  0012               	return	
 13732  003240                     
 13733                           ;SPI.c: 139: else
 13734                           ;SPI.c: 140: {
 13735                           ;SPI.c: 141: while(!PIR1bits.SSPIF);
 13736  003240  A69E               	btfss	3998,3,c	;volatile
 13737  003242  D7FE               	goto	l142
 13738                           
 13739                           ;SPI.c: 142: _delay((unsigned long)((1000)*(48000000/4000.0)));
 13740  003244  0E3D               	movlw	61
 13741  003246  6E1B               	movwf	(??_WriteSPI_+1)& (0+255),c
 13742  003248  0EE1               	movlw	225
 13743  00324A  6E1A               	movwf	??_WriteSPI_& (0+255),c
 13744  00324C  0E40               	movlw	64
 13745  00324E                     u12337:
 13746  00324E  2EE8               	decfsz	wreg,f,c
 13747  003250  D7FE               	bra	u12337
 13748  003252  2E1A               	decfsz	??_WriteSPI_& (0+255),f,c
 13749  003254  D7FC               	bra	u12337
 13750  003256  2E1B               	decfsz	(??_WriteSPI_+1)& (0+255),f,c
 13751  003258  D7FA               	bra	u12337
 13752                           
 13753                           ;SPI.c: 144: return (0);
 13754                           ;	Return value of _WriteSPI_ is never used
 13755  00325A  0012               	return	
 13756  00325C                     __end_of_WriteSPI_:
 13757                           	opt stack 0
 13758                           tosu	equ	0xFFF
 13759                           tosh	equ	0xFFE
 13760                           tosl	equ	0xFFD
 13761                           pclath	equ	0xFFA
 13762                           tblptru	equ	0xFF8
 13763                           tblptrh	equ	0xFF7
 13764                           tblptrl	equ	0xFF6
 13765                           tablat	equ	0xFF5
 13766                           prodh	equ	0xFF4
 13767                           prodl	equ	0xFF3
 13768                           intcon	equ	0xFF2
 13769                           intcon2	equ	0xFF1
 13770                           intcon3	equ	0xFF0
 13771                           indf0	equ	0xFEF
 13772                           postinc0	equ	0xFEE
 13773                           fsr0h	equ	0xFEA
 13774                           fsr0l	equ	0xFE9
 13775                           wreg	equ	0xFE8
 13776                           indf1	equ	0xFE7
 13777                           postinc1	equ	0xFE6
 13778                           postdec1	equ	0xFE5
 13779                           fsr1h	equ	0xFE2
 13780                           fsr1l	equ	0xFE1
 13781                           indf2	equ	0xFDF
 13782                           postinc2	equ	0xFDE
 13783                           postdec2	equ	0xFDD
 13784                           plusw2	equ	0xFDB
 13785                           fsr2h	equ	0xFDA
 13786                           fsr2l	equ	0xFD9
 13787                           status	equ	0xFD8
 13788                           
 13789 ;; *************** function ___lmul *****************
 13790 ;; Defined at:
 13791 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13792 ;; Parameters:    Size  Location     Type
 13793 ;;  multiplier      4   25[COMRAM] unsigned long 
 13794 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13795 ;; Auto vars:     Size  Location     Type
 13796 ;;  product         4   33[COMRAM] unsigned long 
 13797 ;; Return value:  Size  Location     Type
 13798 ;;                  4   25[COMRAM] unsigned long 
 13799 ;; Registers used:
 13800 ;;		wreg, status,2, status,0
 13801 ;; Tracked objects:
 13802 ;;		On entry : 0/0
 13803 ;;		On exit  : 0/0
 13804 ;;		Unchanged: 0/0
 13805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13806 ;;      Params:         8       0       0       0       0       0       0       0       0
 13807 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13808 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13809 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13810 ;;Total ram usage:       12 bytes
 13811 ;; Hardware stack levels used:    1
 13812 ;; Hardware stack levels required when called:    2
 13813 ;; This function calls:
 13814 ;;		Nothing
 13815 ;; This function is called by:
 13816 ;;		_clust2sect
 13817 ;;		_pf_mount
 13818 ;;		_strtod
 13819 ;;		_atol
 13820 ;; This function uses a non-reentrant model
 13821 ;;
 13822                           
 13823                           	psect	text56
 13824  00316A                     __ptext56:
 13825                           	opt stack 0
 13826  00316A                     ___lmul:
 13827                           	opt stack 24
 13828                           
 13829                           ;incstack = 0
 13830  00316A  0E00               	movlw	0
 13831  00316C  6E22               	movwf	___lmul@product,c
 13832  00316E  0E00               	movlw	0
 13833  003170  6E23               	movwf	___lmul@product+1,c
 13834  003172  0E00               	movlw	0
 13835  003174  6E24               	movwf	___lmul@product+2,c
 13836  003176  0E00               	movlw	0
 13837  003178  6E25               	movwf	___lmul@product+3,c
 13838  00317A  A01A               	btfss	___lmul@multiplier,0,c
 13839  00317C  D008               	goto	l1336
 13840  00317E  501E               	movf	___lmul@multiplicand,w,c
 13841  003180  2622               	addwf	___lmul@product,f,c
 13842  003182  501F               	movf	___lmul@multiplicand+1,w,c
 13843  003184  2223               	addwfc	___lmul@product+1,f,c
 13844  003186  5020               	movf	___lmul@multiplicand+2,w,c
 13845  003188  2224               	addwfc	___lmul@product+2,f,c
 13846  00318A  5021               	movf	___lmul@multiplicand+3,w,c
 13847  00318C  2225               	addwfc	___lmul@product+3,f,c
 13848  00318E                     l1336:
 13849  00318E  90D8               	bcf	status,0,c
 13850  003190  361E               	rlcf	___lmul@multiplicand,f,c
 13851  003192  361F               	rlcf	___lmul@multiplicand+1,f,c
 13852  003194  3620               	rlcf	___lmul@multiplicand+2,f,c
 13853  003196  3621               	rlcf	___lmul@multiplicand+3,f,c
 13854  003198  90D8               	bcf	status,0,c
 13855  00319A  321D               	rrcf	___lmul@multiplier+3,f,c
 13856  00319C  321C               	rrcf	___lmul@multiplier+2,f,c
 13857  00319E  321B               	rrcf	___lmul@multiplier+1,f,c
 13858  0031A0  321A               	rrcf	___lmul@multiplier,f,c
 13859  0031A2  501A               	movf	___lmul@multiplier,w,c
 13860  0031A4  101B               	iorwf	___lmul@multiplier+1,w,c
 13861  0031A6  101C               	iorwf	___lmul@multiplier+2,w,c
 13862  0031A8  101D               	iorwf	___lmul@multiplier+3,w,c
 13863  0031AA  A4D8               	btfss	status,2,c
 13864  0031AC  D7E6               	goto	l1335
 13865  0031AE  C022  F01A         	movff	___lmul@product,?___lmul
 13866  0031B2  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13867  0031B6  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13868  0031BA  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13869  0031BE  0012               	return		;funcret
 13870  0031C0                     __end_of___lmul:
 13871                           	opt stack 0
 13872                           tosu	equ	0xFFF
 13873                           tosh	equ	0xFFE
 13874                           tosl	equ	0xFFD
 13875                           pclath	equ	0xFFA
 13876                           tblptru	equ	0xFF8
 13877                           tblptrh	equ	0xFF7
 13878                           tblptrl	equ	0xFF6
 13879                           tablat	equ	0xFF5
 13880                           prodh	equ	0xFF4
 13881                           prodl	equ	0xFF3
 13882                           intcon	equ	0xFF2
 13883                           intcon2	equ	0xFF1
 13884                           intcon3	equ	0xFF0
 13885                           indf0	equ	0xFEF
 13886                           postinc0	equ	0xFEE
 13887                           fsr0h	equ	0xFEA
 13888                           fsr0l	equ	0xFE9
 13889                           wreg	equ	0xFE8
 13890                           indf1	equ	0xFE7
 13891                           postinc1	equ	0xFE6
 13892                           postdec1	equ	0xFE5
 13893                           fsr1h	equ	0xFE2
 13894                           fsr1l	equ	0xFE1
 13895                           indf2	equ	0xFDF
 13896                           postinc2	equ	0xFDE
 13897                           postdec2	equ	0xFDD
 13898                           plusw2	equ	0xFDB
 13899                           fsr2h	equ	0xFDA
 13900                           fsr2l	equ	0xFD9
 13901                           status	equ	0xFD8
 13902                           
 13903 ;; *************** function ___lldiv *****************
 13904 ;; Defined at:
 13905 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 13906 ;; Parameters:    Size  Location     Type
 13907 ;;  dividend        4   25[COMRAM] unsigned long 
 13908 ;;  divisor         4   29[COMRAM] unsigned long 
 13909 ;; Auto vars:     Size  Location     Type
 13910 ;;  quotient        4   33[COMRAM] unsigned long 
 13911 ;;  counter         1   37[COMRAM] unsigned char 
 13912 ;; Return value:  Size  Location     Type
 13913 ;;                  4   25[COMRAM] unsigned long 
 13914 ;; Registers used:
 13915 ;;		wreg, status,2, status,0
 13916 ;; Tracked objects:
 13917 ;;		On entry : 0/0
 13918 ;;		On exit  : 0/0
 13919 ;;		Unchanged: 0/0
 13920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13921 ;;      Params:         8       0       0       0       0       0       0       0       0
 13922 ;;      Locals:         5       0       0       0       0       0       0       0       0
 13923 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13924 ;;      Totals:        13       0       0       0       0       0       0       0       0
 13925 ;;Total ram usage:       13 bytes
 13926 ;; Hardware stack levels used:    1
 13927 ;; Hardware stack levels required when called:    2
 13928 ;; This function calls:
 13929 ;;		Nothing
 13930 ;; This function is called by:
 13931 ;;		_pf_mount
 13932 ;;		_pf_lseek
 13933 ;;		_convert_time_to_UTC
 13934 ;;		_sprintf
 13935 ;; This function uses a non-reentrant model
 13936 ;;
 13937                           
 13938                           	psect	text57
 13939  002C90                     __ptext57:
 13940                           	opt stack 0
 13941  002C90                     ___lldiv:
 13942                           	opt stack 25
 13943                           
 13944                           ;incstack = 0
 13945  002C90  0E00               	movlw	0
 13946  002C92  6E22               	movwf	___lldiv@quotient,c
 13947  002C94  0E00               	movlw	0
 13948  002C96  6E23               	movwf	___lldiv@quotient+1,c
 13949  002C98  0E00               	movlw	0
 13950  002C9A  6E24               	movwf	___lldiv@quotient+2,c
 13951  002C9C  0E00               	movlw	0
 13952  002C9E  6E25               	movwf	___lldiv@quotient+3,c
 13953  002CA0  501E               	movf	___lldiv@divisor,w,c
 13954  002CA2  101F               	iorwf	___lldiv@divisor+1,w,c
 13955  002CA4  1020               	iorwf	___lldiv@divisor+2,w,c
 13956  002CA6  1021               	iorwf	___lldiv@divisor+3,w,c
 13957  002CA8  B4D8               	btfsc	status,2,c
 13958  002CAA  D02A               	goto	l1816
 13959  002CAC  0E01               	movlw	1
 13960  002CAE  6E26               	movwf	___lldiv@counter,c
 13961  002CB0  D006               	goto	l1811
 13962  002CB2  90D8               	bcf	status,0,c
 13963  002CB4  361E               	rlcf	___lldiv@divisor,f,c
 13964  002CB6  361F               	rlcf	___lldiv@divisor+1,f,c
 13965  002CB8  3620               	rlcf	___lldiv@divisor+2,f,c
 13966  002CBA  3621               	rlcf	___lldiv@divisor+3,f,c
 13967  002CBC  2A26               	incf	___lldiv@counter,f,c
 13968  002CBE                     l1811:
 13969  002CBE  AE21               	btfss	___lldiv@divisor+3,7,c
 13970  002CC0  D7F8               	goto	l1812
 13971  002CC2                     u10040:
 13972  002CC2  90D8               	bcf	status,0,c
 13973  002CC4  3622               	rlcf	___lldiv@quotient,f,c
 13974  002CC6  3623               	rlcf	___lldiv@quotient+1,f,c
 13975  002CC8  3624               	rlcf	___lldiv@quotient+2,f,c
 13976  002CCA  3625               	rlcf	___lldiv@quotient+3,f,c
 13977  002CCC  501E               	movf	___lldiv@divisor,w,c
 13978  002CCE  5C1A               	subwf	___lldiv@dividend,w,c
 13979  002CD0  501F               	movf	___lldiv@divisor+1,w,c
 13980  002CD2  581B               	subwfb	___lldiv@dividend+1,w,c
 13981  002CD4  5020               	movf	___lldiv@divisor+2,w,c
 13982  002CD6  581C               	subwfb	___lldiv@dividend+2,w,c
 13983  002CD8  5021               	movf	___lldiv@divisor+3,w,c
 13984  002CDA  581D               	subwfb	___lldiv@dividend+3,w,c
 13985  002CDC  A0D8               	btfss	status,0,c
 13986  002CDE  D009               	goto	l1815
 13987  002CE0  501E               	movf	___lldiv@divisor,w,c
 13988  002CE2  5E1A               	subwf	___lldiv@dividend,f,c
 13989  002CE4  501F               	movf	___lldiv@divisor+1,w,c
 13990  002CE6  5A1B               	subwfb	___lldiv@dividend+1,f,c
 13991  002CE8  5020               	movf	___lldiv@divisor+2,w,c
 13992  002CEA  5A1C               	subwfb	___lldiv@dividend+2,f,c
 13993  002CEC  5021               	movf	___lldiv@divisor+3,w,c
 13994  002CEE  5A1D               	subwfb	___lldiv@dividend+3,f,c
 13995  002CF0  8022               	bsf	___lldiv@quotient,0,c
 13996  002CF2                     l1815:
 13997  002CF2  90D8               	bcf	status,0,c
 13998  002CF4  3221               	rrcf	___lldiv@divisor+3,f,c
 13999  002CF6  3220               	rrcf	___lldiv@divisor+2,f,c
 14000  002CF8  321F               	rrcf	___lldiv@divisor+1,f,c
 14001  002CFA  321E               	rrcf	___lldiv@divisor,f,c
 14002  002CFC  2E26               	decfsz	___lldiv@counter,f,c
 14003  002CFE  D7E1               	goto	u10040
 14004  002D00                     l1816:
 14005  002D00  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 14006  002D04  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 14007  002D08  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 14008  002D0C  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 14009  002D10  0012               	return		;funcret
 14010  002D12                     __end_of___lldiv:
 14011                           	opt stack 0
 14012                           tosu	equ	0xFFF
 14013                           tosh	equ	0xFFE
 14014                           tosl	equ	0xFFD
 14015                           pclath	equ	0xFFA
 14016                           tblptru	equ	0xFF8
 14017                           tblptrh	equ	0xFF7
 14018                           tblptrl	equ	0xFF6
 14019                           tablat	equ	0xFF5
 14020                           prodh	equ	0xFF4
 14021                           prodl	equ	0xFF3
 14022                           intcon	equ	0xFF2
 14023                           intcon2	equ	0xFF1
 14024                           intcon3	equ	0xFF0
 14025                           indf0	equ	0xFEF
 14026                           postinc0	equ	0xFEE
 14027                           fsr0h	equ	0xFEA
 14028                           fsr0l	equ	0xFE9
 14029                           wreg	equ	0xFE8
 14030                           indf1	equ	0xFE7
 14031                           postinc1	equ	0xFE6
 14032                           postdec1	equ	0xFE5
 14033                           fsr1h	equ	0xFE2
 14034                           fsr1l	equ	0xFE1
 14035                           indf2	equ	0xFDF
 14036                           postinc2	equ	0xFDE
 14037                           postdec2	equ	0xFDD
 14038                           plusw2	equ	0xFDB
 14039                           fsr2h	equ	0xFDA
 14040                           fsr2l	equ	0xFD9
 14041                           status	equ	0xFD8
 14042                           
 14043 ;; *************** function _controle_shrc *****************
 14044 ;; Defined at:
 14045 ;;		line 112 in file "bibliotecas/SHRC.c"
 14046 ;; Parameters:    Size  Location     Type
 14047 ;;		None
 14048 ;; Auto vars:     Size  Location     Type
 14049 ;;		None
 14050 ;; Return value:  Size  Location     Type
 14051 ;;                  1    wreg      void 
 14052 ;; Registers used:
 14053 ;;		wreg, status,2, status,0, cstack
 14054 ;; Tracked objects:
 14055 ;;		On entry : 0/0
 14056 ;;		On exit  : 0/0
 14057 ;;		Unchanged: 0/0
 14058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14059 ;;      Params:         0       0       0       0       0       0       0       0       0
 14060 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14061 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14062 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14063 ;;Total ram usage:        0 bytes
 14064 ;; Hardware stack levels used:    1
 14065 ;; Hardware stack levels required when called:    3
 14066 ;; This function calls:
 14067 ;;		_ativa_latch_shrc
 14068 ;;		_envia_dados_shrc
 14069 ;; This function is called by:
 14070 ;;		_main
 14071 ;;		_timer_dois
 14072 ;; This function uses a non-reentrant model
 14073 ;;
 14074                           
 14075                           	psect	text58
 14076  003560                     __ptext58:
 14077                           	opt stack 0
 14078  003560                     _controle_shrc:
 14079                           	opt stack 27
 14080                           
 14081                           ;SHRC.c: 115: envia_dados_shrc(dado);
 14082                           
 14083                           ;incstack = 0
 14084  003560  5045               	movf	_dado,w,c
 14085  003562  EC2E  F019         	call	_envia_dados_shrc
 14086                           
 14087                           ;SHRC.c: 116: ativa_latch_shrc();
 14088  003566  EC6F  F01A         	call	_ativa_latch_shrc	;wreg free
 14089  00356A  0012               	return		;funcret
 14090  00356C                     __end_of_controle_shrc:
 14091                           	opt stack 0
 14092                           tosu	equ	0xFFF
 14093                           tosh	equ	0xFFE
 14094                           tosl	equ	0xFFD
 14095                           pclath	equ	0xFFA
 14096                           tblptru	equ	0xFF8
 14097                           tblptrh	equ	0xFF7
 14098                           tblptrl	equ	0xFF6
 14099                           tablat	equ	0xFF5
 14100                           prodh	equ	0xFF4
 14101                           prodl	equ	0xFF3
 14102                           intcon	equ	0xFF2
 14103                           intcon2	equ	0xFF1
 14104                           intcon3	equ	0xFF0
 14105                           indf0	equ	0xFEF
 14106                           postinc0	equ	0xFEE
 14107                           fsr0h	equ	0xFEA
 14108                           fsr0l	equ	0xFE9
 14109                           wreg	equ	0xFE8
 14110                           indf1	equ	0xFE7
 14111                           postinc1	equ	0xFE6
 14112                           postdec1	equ	0xFE5
 14113                           fsr1h	equ	0xFE2
 14114                           fsr1l	equ	0xFE1
 14115                           indf2	equ	0xFDF
 14116                           postinc2	equ	0xFDE
 14117                           postdec2	equ	0xFDD
 14118                           plusw2	equ	0xFDB
 14119                           fsr2h	equ	0xFDA
 14120                           fsr2l	equ	0xFD9
 14121                           status	equ	0xFD8
 14122                           
 14123 ;; *************** function _envia_dados_shrc *****************
 14124 ;; Defined at:
 14125 ;;		line 62 in file "bibliotecas/SHRC.c"
 14126 ;; Parameters:    Size  Location     Type
 14127 ;;  data_to_shrc    1    wreg     unsigned char 
 14128 ;; Auto vars:     Size  Location     Type
 14129 ;;  data_to_shrc    1   26[COMRAM] unsigned char 
 14130 ;;  contador        1   25[COMRAM] unsigned char 
 14131 ;; Return value:  Size  Location     Type
 14132 ;;                  1    wreg      void 
 14133 ;; Registers used:
 14134 ;;		wreg, status,2, status,0
 14135 ;; Tracked objects:
 14136 ;;		On entry : 0/0
 14137 ;;		On exit  : 0/0
 14138 ;;		Unchanged: 0/0
 14139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14140 ;;      Params:         0       0       0       0       0       0       0       0       0
 14141 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14142 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14143 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14144 ;;Total ram usage:        2 bytes
 14145 ;; Hardware stack levels used:    1
 14146 ;; Hardware stack levels required when called:    2
 14147 ;; This function calls:
 14148 ;;		Nothing
 14149 ;; This function is called by:
 14150 ;;		_controle_shrc
 14151 ;; This function uses a non-reentrant model
 14152 ;;
 14153                           
 14154                           	psect	text59
 14155  00325C                     __ptext59:
 14156                           	opt stack 0
 14157  00325C                     _envia_dados_shrc:
 14158                           	opt stack 27
 14159                           
 14160                           ;incstack = 0
 14161                           ;envia_dados_shrc@data_to_shrc stored from wreg
 14162  00325C  6E1B               	movwf	envia_dados_shrc@data_to_shrc,c
 14163                           
 14164                           ;SHRC.c: 64: unsigned char contador=0;
 14165  00325E  0E00               	movlw	0
 14166  003260  6E1A               	movwf	envia_dados_shrc@contador,c
 14167                           
 14168                           ;SHRC.c: 65: (INTCONbits.GIE = 0);
 14169  003262  9EF2               	bcf	intcon,7,c	;volatile
 14170                           
 14171                           ;SHRC.c: 67: while(contador<=7)
 14172  003264  D018               	goto	l73
 14173  003266                     
 14174                           ;SHRC.c: 68: {
 14175                           ;SHRC.c: 69: if((data_to_shrc & 0x80) == 0)
 14176  003266  BE1B               	btfsc	envia_dados_shrc@data_to_shrc,7,c
 14177  003268  D002               	goto	l75
 14178                           
 14179                           ;SHRC.c: 70: {
 14180                           ;SHRC.c: 71: LATBbits.LATB7 = 0;
 14181  00326A  9E8A               	bcf	3978,7,c	;volatile
 14182                           
 14183                           ;SHRC.c: 72: }
 14184  00326C  D001               	goto	l76
 14185  00326E                     l75:
 14186                           
 14187                           ;SHRC.c: 73: else
 14188                           ;SHRC.c: 74: {
 14189                           ;SHRC.c: 75: LATBbits.LATB7 = 1;
 14190  00326E  8E8A               	bsf	3978,7,c	;volatile
 14191  003270                     l76:
 14192                           
 14193                           ;SHRC.c: 76: }
 14194                           ;SHRC.c: 77: data_to_shrc = data_to_shrc << 1;
 14195  003270  501B               	movf	envia_dados_shrc@data_to_shrc,w,c
 14196  003272  241B               	addwf	envia_dados_shrc@data_to_shrc,w,c
 14197  003274  6E1B               	movwf	envia_dados_shrc@data_to_shrc,c
 14198                           
 14199                           ;SHRC.c: 78: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14200  003276  0E78               	movlw	120
 14201  003278                     u12347:
 14202  003278  2EE8               	decfsz	wreg,f,c
 14203  00327A  D7FE               	bra	u12347
 14204                           
 14205                           ;SHRC.c: 79: LATBbits.LATB6 = 1;
 14206  00327C  8C8A               	bsf	3978,6,c	;volatile
 14207                           
 14208                           ;SHRC.c: 80: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14209  00327E  0E78               	movlw	120
 14210  003280                     u12357:
 14211  003280  2EE8               	decfsz	wreg,f,c
 14212  003282  D7FE               	bra	u12357
 14213                           
 14214                           ;SHRC.c: 81: LATBbits.LATB7 = 0;
 14215  003284  9E8A               	bcf	3978,7,c	;volatile
 14216                           
 14217                           ;SHRC.c: 82: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14218  003286  0E78               	movlw	120
 14219  003288                     u12367:
 14220  003288  2EE8               	decfsz	wreg,f,c
 14221  00328A  D7FE               	bra	u12367
 14222                           
 14223                           ;SHRC.c: 83: LATBbits.LATB6 = 0;
 14224  00328C  9C8A               	bcf	3978,6,c	;volatile
 14225                           
 14226                           ;SHRC.c: 84: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14227  00328E  0E78               	movlw	120
 14228  003290                     u12377:
 14229  003290  2EE8               	decfsz	wreg,f,c
 14230  003292  D7FE               	bra	u12377
 14231                           
 14232                           ;SHRC.c: 85: contador++;
 14233  003294  2A1A               	incf	envia_dados_shrc@contador,f,c
 14234  003296                     l73:
 14235  003296  0E07               	movlw	7
 14236  003298  641A               	cpfsgt	envia_dados_shrc@contador,c
 14237  00329A  D7E5               	goto	l74
 14238                           
 14239                           ;SHRC.c: 86: }
 14240                           ;SHRC.c: 87: (INTCONbits.GIE = 1);
 14241  00329C  8EF2               	bsf	intcon,7,c	;volatile
 14242  00329E  0012               	return		;funcret
 14243  0032A0                     __end_of_envia_dados_shrc:
 14244                           	opt stack 0
 14245                           tosu	equ	0xFFF
 14246                           tosh	equ	0xFFE
 14247                           tosl	equ	0xFFD
 14248                           pclath	equ	0xFFA
 14249                           tblptru	equ	0xFF8
 14250                           tblptrh	equ	0xFF7
 14251                           tblptrl	equ	0xFF6
 14252                           tablat	equ	0xFF5
 14253                           prodh	equ	0xFF4
 14254                           prodl	equ	0xFF3
 14255                           intcon	equ	0xFF2
 14256                           intcon2	equ	0xFF1
 14257                           intcon3	equ	0xFF0
 14258                           indf0	equ	0xFEF
 14259                           postinc0	equ	0xFEE
 14260                           fsr0h	equ	0xFEA
 14261                           fsr0l	equ	0xFE9
 14262                           wreg	equ	0xFE8
 14263                           indf1	equ	0xFE7
 14264                           postinc1	equ	0xFE6
 14265                           postdec1	equ	0xFE5
 14266                           fsr1h	equ	0xFE2
 14267                           fsr1l	equ	0xFE1
 14268                           indf2	equ	0xFDF
 14269                           postinc2	equ	0xFDE
 14270                           postdec2	equ	0xFDD
 14271                           plusw2	equ	0xFDB
 14272                           fsr2h	equ	0xFDA
 14273                           fsr2l	equ	0xFD9
 14274                           status	equ	0xFD8
 14275                           
 14276 ;; *************** function _ativa_latch_shrc *****************
 14277 ;; Defined at:
 14278 ;;		line 96 in file "bibliotecas/SHRC.c"
 14279 ;; Parameters:    Size  Location     Type
 14280 ;;		None
 14281 ;; Auto vars:     Size  Location     Type
 14282 ;;		None
 14283 ;; Return value:  Size  Location     Type
 14284 ;;                  1    wreg      void 
 14285 ;; Registers used:
 14286 ;;		wreg
 14287 ;; Tracked objects:
 14288 ;;		On entry : 0/0
 14289 ;;		On exit  : 0/0
 14290 ;;		Unchanged: 0/0
 14291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14292 ;;      Params:         0       0       0       0       0       0       0       0       0
 14293 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14294 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14295 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14296 ;;Total ram usage:        0 bytes
 14297 ;; Hardware stack levels used:    1
 14298 ;; Hardware stack levels required when called:    2
 14299 ;; This function calls:
 14300 ;;		Nothing
 14301 ;; This function is called by:
 14302 ;;		_controle_shrc
 14303 ;; This function uses a non-reentrant model
 14304 ;;
 14305                           
 14306                           	psect	text60
 14307  0034DE                     __ptext60:
 14308                           	opt stack 0
 14309  0034DE                     _ativa_latch_shrc:
 14310                           	opt stack 27
 14311                           
 14312                           ;SHRC.c: 99: LATBbits.LATB5 = 0;
 14313                           
 14314                           ;incstack = 0
 14315  0034DE  9A8A               	bcf	3978,5,c	;volatile
 14316                           
 14317                           ;SHRC.c: 100: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14318  0034E0  0E78               	movlw	120
 14319  0034E2                     u12387:
 14320  0034E2  2EE8               	decfsz	wreg,f,c
 14321  0034E4  D7FE               	bra	u12387
 14322                           
 14323                           ;SHRC.c: 101: LATBbits.LATB5 = 1;
 14324  0034E6  8A8A               	bsf	3978,5,c	;volatile
 14325                           
 14326                           ;SHRC.c: 102: _delay((unsigned long)((60)*(48000000/4000000.0)));
 14327  0034E8  0EF0               	movlw	240
 14328  0034EA                     u12397:
 14329  0034EA  2EE8               	decfsz	wreg,f,c
 14330  0034EC  D7FE               	bra	u12397
 14331                           
 14332                           ;SHRC.c: 103: LATBbits.LATB5 = 0;
 14333  0034EE  9A8A               	bcf	3978,5,c	;volatile
 14334  0034F0  0012               	return		;funcret
 14335  0034F2                     __end_of_ativa_latch_shrc:
 14336                           	opt stack 0
 14337                           tosu	equ	0xFFF
 14338                           tosh	equ	0xFFE
 14339                           tosl	equ	0xFFD
 14340                           pclath	equ	0xFFA
 14341                           tblptru	equ	0xFF8
 14342                           tblptrh	equ	0xFF7
 14343                           tblptrl	equ	0xFF6
 14344                           tablat	equ	0xFF5
 14345                           prodh	equ	0xFF4
 14346                           prodl	equ	0xFF3
 14347                           intcon	equ	0xFF2
 14348                           intcon2	equ	0xFF1
 14349                           intcon3	equ	0xFF0
 14350                           indf0	equ	0xFEF
 14351                           postinc0	equ	0xFEE
 14352                           fsr0h	equ	0xFEA
 14353                           fsr0l	equ	0xFE9
 14354                           wreg	equ	0xFE8
 14355                           indf1	equ	0xFE7
 14356                           postinc1	equ	0xFE6
 14357                           postdec1	equ	0xFE5
 14358                           fsr1h	equ	0xFE2
 14359                           fsr1l	equ	0xFE1
 14360                           indf2	equ	0xFDF
 14361                           postinc2	equ	0xFDE
 14362                           postdec2	equ	0xFDD
 14363                           plusw2	equ	0xFDB
 14364                           fsr2h	equ	0xFDA
 14365                           fsr2l	equ	0xFD9
 14366                           status	equ	0xFD8
 14367                           
 14368 ;; *************** function _isr *****************
 14369 ;; Defined at:
 14370 ;;		line 111 in file "main.c"
 14371 ;; Parameters:    Size  Location     Type
 14372 ;;		None
 14373 ;; Auto vars:     Size  Location     Type
 14374 ;;  cont            1   24[COMRAM] unsigned char 
 14375 ;; Return value:  Size  Location     Type
 14376 ;;                  1    wreg      void 
 14377 ;; Registers used:
 14378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14379 ;; Tracked objects:
 14380 ;;		On entry : 0/0
 14381 ;;		On exit  : 0/0
 14382 ;;		Unchanged: 0/0
 14383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14384 ;;      Params:         0       0       0       0       0       0       0       0       0
 14385 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14386 ;;      Temps:         20       0       0       0       0       0       0       0       0
 14387 ;;      Totals:        21       0       0       0       0       0       0       0       0
 14388 ;;Total ram usage:       21 bytes
 14389 ;; Hardware stack levels used:    1
 14390 ;; Hardware stack levels required when called:    1
 14391 ;; This function calls:
 14392 ;;		_recebe_dado_uart
 14393 ;;		_tratamento_uart
 14394 ;;		i2_write_timer_zero
 14395 ;; This function is called by:
 14396 ;;		Interrupt level 2
 14397 ;; This function uses a non-reentrant model
 14398 ;;
 14399                           
 14400                           	psect	intcode
 14401  000008                     __pintcode:
 14402                           	opt stack 0
 14403  000008                     _isr:
 14404                           	opt stack 18
 14405                           
 14406                           ;incstack = 0
 14407  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14408  00000A  ED4F  F012         	call	int_func,f	;refresh shadow registers
 14409                           tosu	equ	0xFFF
 14410                           tosh	equ	0xFFE
 14411                           tosl	equ	0xFFD
 14412                           pclath	equ	0xFFA
 14413                           tblptru	equ	0xFF8
 14414                           tblptrh	equ	0xFF7
 14415                           tblptrl	equ	0xFF6
 14416                           tablat	equ	0xFF5
 14417                           prodh	equ	0xFF4
 14418                           prodl	equ	0xFF3
 14419                           intcon	equ	0xFF2
 14420                           intcon2	equ	0xFF1
 14421                           intcon3	equ	0xFF0
 14422                           indf0	equ	0xFEF
 14423                           postinc0	equ	0xFEE
 14424                           fsr0h	equ	0xFEA
 14425                           fsr0l	equ	0xFE9
 14426                           wreg	equ	0xFE8
 14427                           indf1	equ	0xFE7
 14428                           postinc1	equ	0xFE6
 14429                           postdec1	equ	0xFE5
 14430                           fsr1h	equ	0xFE2
 14431                           fsr1l	equ	0xFE1
 14432                           indf2	equ	0xFDF
 14433                           postinc2	equ	0xFDE
 14434                           postdec2	equ	0xFDD
 14435                           plusw2	equ	0xFDB
 14436                           fsr2h	equ	0xFDA
 14437                           fsr2l	equ	0xFD9
 14438                           status	equ	0xFD8
 14439                           
 14440                           	psect	intcode_body
 14441  00249E                     __pintcode_body:
 14442                           	opt stack 18
 14443  00249E                     int_func:
 14444                           	opt stack 18
 14445  00249E  0006               	pop		; remove dummy address from shadow register refresh
 14446  0024A0  CFFA F007          	movff	pclath,??_isr+2
 14447  0024A4  CFFB F008          	movff	pclatu,??_isr+3
 14448  0024A8  CFE9 F009          	movff	fsr0l,??_isr+4
 14449  0024AC  CFEA F00A          	movff	fsr0h,??_isr+5
 14450  0024B0  CFE1 F00B          	movff	fsr1l,??_isr+6
 14451  0024B4  CFE2 F00C          	movff	fsr1h,??_isr+7
 14452  0024B8  CFD9 F00D          	movff	fsr2l,??_isr+8
 14453  0024BC  CFDA F00E          	movff	fsr2h,??_isr+9
 14454  0024C0  CFF3 F00F          	movff	prodl,??_isr+10
 14455  0024C4  CFF4 F010          	movff	prodh,??_isr+11
 14456  0024C8  CFF6 F011          	movff	tblptrl,??_isr+12
 14457  0024CC  CFF7 F012          	movff	tblptrh,??_isr+13
 14458  0024D0  CFF8 F013          	movff	tblptru,??_isr+14
 14459  0024D4  CFF5 F014          	movff	tablat,??_isr+15
 14460  0024D8  C046  F015         	movff	btemp,??_isr+16
 14461  0024DC  C047  F016         	movff	btemp+1,??_isr+17
 14462  0024E0  C048  F017         	movff	btemp+2,??_isr+18
 14463  0024E4  C049  F018         	movff	btemp+3,??_isr+19
 14464                           
 14465                           ;main.c: 113: unsigned char cont;
 14466                           ;main.c: 116: if (PIE1bits.RCIE && PIR1bits.RCIF)
 14467  0024E8  BA9D               	btfsc	3997,5,c	;volatile
 14468  0024EA  AA9E               	btfss	3998,5,c	;volatile
 14469  0024EC  D007               	goto	i2l1067
 14470                           
 14471                           ;main.c: 117: {
 14472                           ;main.c: 118: data_uart_recebe = recebe_dado_uart();
 14473  0024EE  EC94  F01A         	call	_recebe_dado_uart	;wreg free
 14474  0024F2  6E40               	movwf	_data_uart_recebe,c
 14475                           
 14476                           ;main.c: 119: PIR1bits.RCIF = 0;
 14477  0024F4  9A9E               	bcf	3998,5,c	;volatile
 14478                           
 14479                           ;main.c: 120: tratamento_uart(data_uart_recebe);
 14480  0024F6  5040               	movf	_data_uart_recebe,w,c
 14481  0024F8  ECBB  F015         	call	_tratamento_uart
 14482  0024FC                     i2l1067:
 14483                           
 14484                           ;main.c: 122: }
 14485                           ;main.c: 125: unsigned char cont;
 14486                           ;main.c: 127: if (TMR0IF && T0IF)
 14487  0024FC  B4F2               	btfsc	intcon,2,c	;volatile
 14488  0024FE  A4F2               	btfss	intcon,2,c	;volatile
 14489  002500  D037               	goto	i2l1068
 14490                           
 14491                           ;main.c: 128: {
 14492                           ;main.c: 129: INTCONbits.TMR0IF = 0;
 14493  002502  94F2               	bcf	intcon,2,c	;volatile
 14494                           
 14495                           ;main.c: 130: sinaliza_int_timer = 1;
 14496  002504  0E01               	movlw	1
 14497  002506  6E3F               	movwf	_sinaliza_int_timer,c
 14498                           
 14499                           ;main.c: 132: for(cont= 0; cont<2;cont++)
 14500  002508  0E00               	movlw	0
 14501  00250A  6E19               	movwf	isr@cont,c
 14502  00250C                     i2l6954:
 14503  00250C  0E01               	movlw	1
 14504  00250E  6419               	cpfsgt	isr@cont,c
 14505  002510  D001               	goto	i2l1069
 14506  002512  D019               	goto	i2u732_40
 14507  002514                     i2l1069:
 14508                           
 14509                           ;main.c: 133: {
 14510                           ;main.c: 134: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 14511  002514  5019               	movf	isr@cont,w,c
 14512  002516  0D02               	mullw	2
 14513  002518  0E2E               	movlw	low _tempo_tarefa
 14514  00251A  24F3               	addwf	prodl,w,c
 14515  00251C  6ED9               	movwf	fsr2l,c
 14516  00251E  0E00               	movlw	high _tempo_tarefa
 14517  002520  20F4               	addwfc	prodh,w,c
 14518  002522  6EDA               	movwf	fsr2h,c
 14519  002524  50DE               	movf	postinc2,w,c
 14520  002526  10DE               	iorwf	postinc2,w,c
 14521  002528  B4D8               	btfsc	status,2,c
 14522  00252A  D00B               	goto	i2l1071
 14523  00252C  5019               	movf	isr@cont,w,c
 14524  00252E  0D02               	mullw	2
 14525  002530  0E2E               	movlw	low _tempo_tarefa
 14526  002532  24F3               	addwf	prodl,w,c
 14527  002534  6ED9               	movwf	fsr2l,c
 14528  002536  0E00               	movlw	high _tempo_tarefa
 14529  002538  20F4               	addwfc	prodh,w,c
 14530  00253A  6EDA               	movwf	fsr2h,c
 14531  00253C  06DE               	decf	postinc2,f,c
 14532  00253E  0E00               	movlw	0
 14533  002540  5ADD               	subwfb	postdec2,f,c
 14534  002542                     i2l1071:
 14535  002542  2A19               	incf	isr@cont,f,c
 14536  002544  D7E3               	goto	i2l6954
 14537  002546                     i2u732_40:
 14538                           
 14539                           ;main.c: 135: }
 14540                           ;main.c: 138: if(tarefa_em_execucao == 1)
 14541  002546  043E               	decf	_tarefa_em_execucao,w,c	;volatile
 14542  002548  A4D8               	btfss	status,2,c
 14543  00254A  D00C               	goto	i2l1073
 14544                           
 14545                           ;main.c: 139: {
 14546                           ;main.c: 140: timeout_tarefa--;
 14547  00254C  0100               	movlb	0	; () banked
 14548  00254E  07D5               	decf	_timeout_tarefa& (0+255),f,b
 14549  002550  A0D8               	btfss	status,0,c
 14550  002552  07D6               	decf	(_timeout_tarefa+1)& (0+255),f,b
 14551                           
 14552                           ; BSR set to: 0
 14553                           ;main.c: 141: if(!timeout_tarefa)
 14554  002554  51D5               	movf	_timeout_tarefa& (0+255),w,b
 14555  002556  11D6               	iorwf	(_timeout_tarefa+1)& (0+255),w,b
 14556  002558  A4D8               	btfss	status,2,c
 14557  00255A  D004               	goto	i2l1073
 14558                           
 14559                           ; BSR set to: 0
 14560                           ;main.c: 142: {
 14561                           ;main.c: 144: PCLATH = 0;
 14562  00255C  0E00               	movlw	0
 14563  00255E  6EFA               	movwf	pclath,c	;volatile
 14564                           
 14565                           ;main.c: 145: PCL = 0;
 14566  002560  0E00               	movlw	0
 14567  002562  6EF9               	movwf	pcl,c	;volatile
 14568  002564                     i2l1073:
 14569                           
 14570                           ;main.c: 146: }
 14571                           ;main.c: 147: }
 14572                           ;main.c: 150: write_timer_zero(0x0083);
 14573                           
 14574                           ; BSR set to: 0
 14575                           
 14576                           ; BSR set to: 0
 14577  002564  0E00               	movlw	0
 14578  002566  6E02               	movwf	i2write_timer_zero@timer0+1,c
 14579  002568  0E83               	movlw	131
 14580  00256A  6E01               	movwf	i2write_timer_zero@timer0,c
 14581  00256C  EC8B  F01A         	call	i2_write_timer_zero	;wreg free
 14582  002570                     i2l1068:
 14583                           
 14584                           ;main.c: 152: }
 14585                           ;main.c: 154: if (INT0IF && INT0IE)
 14586  002570  B2F2               	btfsc	intcon,1,c	;volatile
 14587  002572  A8F2               	btfss	intcon,4,c	;volatile
 14588  002574  D001               	goto	i2l1074
 14589                           
 14590                           ;main.c: 155: {
 14591                           ;main.c: 156: INT0IF = 0;
 14592  002576  92F2               	bcf	intcon,1,c	;volatile
 14593  002578                     i2l1074:
 14594  002578  C018  F049         	movff	??_isr+19,btemp+3
 14595  00257C  C017  F048         	movff	??_isr+18,btemp+2
 14596  002580  C016  F047         	movff	??_isr+17,btemp+1
 14597  002584  C015  F046         	movff	??_isr+16,btemp
 14598  002588  C014  FFF5         	movff	??_isr+15,tablat
 14599  00258C  C013  FFF8         	movff	??_isr+14,tblptru
 14600  002590  C012  FFF7         	movff	??_isr+13,tblptrh
 14601  002594  C011  FFF6         	movff	??_isr+12,tblptrl
 14602  002598  C010  FFF4         	movff	??_isr+11,prodh
 14603  00259C  C00F  FFF3         	movff	??_isr+10,prodl
 14604  0025A0  C00E  FFDA         	movff	??_isr+9,fsr2h
 14605  0025A4  C00D  FFD9         	movff	??_isr+8,fsr2l
 14606  0025A8  C00C  FFE2         	movff	??_isr+7,fsr1h
 14607  0025AC  C00B  FFE1         	movff	??_isr+6,fsr1l
 14608  0025B0  C00A  FFEA         	movff	??_isr+5,fsr0h
 14609  0025B4  C009  FFE9         	movff	??_isr+4,fsr0l
 14610  0025B8  C008  FFFB         	movff	??_isr+3,pclatu
 14611  0025BC  C007  FFFA         	movff	??_isr+2,pclath
 14612  0025C0  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14613  0025C2  0011               	retfie		f
 14614  0025C4                     __end_of_isr:
 14615                           	opt stack 0
 14616                           tosu	equ	0xFFF
 14617                           tosh	equ	0xFFE
 14618                           tosl	equ	0xFFD
 14619                           pclatu	equ	0xFFB
 14620                           pclath	equ	0xFFA
 14621                           pcl	equ	0xFF9
 14622                           tblptru	equ	0xFF8
 14623                           tblptrh	equ	0xFF7
 14624                           tblptrl	equ	0xFF6
 14625                           tablat	equ	0xFF5
 14626                           prodh	equ	0xFF4
 14627                           prodl	equ	0xFF3
 14628                           intcon	equ	0xFF2
 14629                           intcon2	equ	0xFF1
 14630                           intcon3	equ	0xFF0
 14631                           indf0	equ	0xFEF
 14632                           postinc0	equ	0xFEE
 14633                           fsr0h	equ	0xFEA
 14634                           fsr0l	equ	0xFE9
 14635                           wreg	equ	0xFE8
 14636                           indf1	equ	0xFE7
 14637                           postinc1	equ	0xFE6
 14638                           postdec1	equ	0xFE5
 14639                           fsr1h	equ	0xFE2
 14640                           fsr1l	equ	0xFE1
 14641                           indf2	equ	0xFDF
 14642                           postinc2	equ	0xFDE
 14643                           postdec2	equ	0xFDD
 14644                           plusw2	equ	0xFDB
 14645                           fsr2h	equ	0xFDA
 14646                           fsr2l	equ	0xFD9
 14647                           status	equ	0xFD8
 14648                           
 14649 ;; *************** function i2_write_timer_zero *****************
 14650 ;; Defined at:
 14651 ;;		line 138 in file "bibliotecas/hardware.c"
 14652 ;; Parameters:    Size  Location     Type
 14653 ;;  timer0          2    0[COMRAM] unsigned int 
 14654 ;; Auto vars:     Size  Location     Type
 14655 ;;  write_timer_    2    2[COMRAM] struct Timers
 14656 ;; Return value:  Size  Location     Type
 14657 ;;                  1    wreg      void 
 14658 ;; Registers used:
 14659 ;;		None
 14660 ;; Tracked objects:
 14661 ;;		On entry : 0/0
 14662 ;;		On exit  : 0/0
 14663 ;;		Unchanged: 0/0
 14664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14665 ;;      Params:         2       0       0       0       0       0       0       0       0
 14666 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14667 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14668 ;;      Totals:         4       0       0       0       0       0       0       0       0
 14669 ;;Total ram usage:        4 bytes
 14670 ;; Hardware stack levels used:    1
 14671 ;; This function calls:
 14672 ;;		Nothing
 14673 ;; This function is called by:
 14674 ;;		_isr
 14675 ;; This function uses a non-reentrant model
 14676 ;;
 14677                           
 14678                           	psect	text62
 14679  003516                     __ptext62:
 14680                           	opt stack 0
 14681  003516                     i2_write_timer_zero:
 14682                           	opt stack 18
 14683                           
 14684                           ;hardware.c: 140: union Timers timer;
 14685                           ;hardware.c: 142: timer.lt = timer0;
 14686                           
 14687                           ;incstack = 0
 14688  003516  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 14689  00351A  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 14690                           
 14691                           ;hardware.c: 144: TMR0H = timer.bt[1];
 14692  00351E  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 14693                           
 14694                           ;hardware.c: 145: TMR0L = timer.bt[0];
 14695  003522  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 14696  003526  0012               	return		;funcret
 14697  003528                     __end_ofi2_write_timer_zero:
 14698                           	opt stack 0
 14699                           tosu	equ	0xFFF
 14700                           tosh	equ	0xFFE
 14701                           tosl	equ	0xFFD
 14702                           pclatu	equ	0xFFB
 14703                           pclath	equ	0xFFA
 14704                           pcl	equ	0xFF9
 14705                           tblptru	equ	0xFF8
 14706                           tblptrh	equ	0xFF7
 14707                           tblptrl	equ	0xFF6
 14708                           tablat	equ	0xFF5
 14709                           prodh	equ	0xFF4
 14710                           prodl	equ	0xFF3
 14711                           intcon	equ	0xFF2
 14712                           intcon2	equ	0xFF1
 14713                           intcon3	equ	0xFF0
 14714                           indf0	equ	0xFEF
 14715                           postinc0	equ	0xFEE
 14716                           fsr0h	equ	0xFEA
 14717                           fsr0l	equ	0xFE9
 14718                           wreg	equ	0xFE8
 14719                           indf1	equ	0xFE7
 14720                           postinc1	equ	0xFE6
 14721                           postdec1	equ	0xFE5
 14722                           fsr1h	equ	0xFE2
 14723                           fsr1l	equ	0xFE1
 14724                           indf2	equ	0xFDF
 14725                           postinc2	equ	0xFDE
 14726                           postdec2	equ	0xFDD
 14727                           plusw2	equ	0xFDB
 14728                           fsr2h	equ	0xFDA
 14729                           fsr2l	equ	0xFD9
 14730                           status	equ	0xFD8
 14731                           
 14732 ;; *************** function _tratamento_uart *****************
 14733 ;; Defined at:
 14734 ;;		line 171 in file "bibliotecas/GPS.c"
 14735 ;; Parameters:    Size  Location     Type
 14736 ;;  received_cha    1    wreg     unsigned char 
 14737 ;; Auto vars:     Size  Location     Type
 14738 ;;  received_cha    1    0[COMRAM] unsigned char 
 14739 ;; Return value:  Size  Location     Type
 14740 ;;                  1    wreg      void 
 14741 ;; Registers used:
 14742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14743 ;; Tracked objects:
 14744 ;;		On entry : 0/0
 14745 ;;		On exit  : 0/0
 14746 ;;		Unchanged: 0/0
 14747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14748 ;;      Params:         0       0       0       0       0       0       0       0       0
 14749 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14750 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14751 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14752 ;;Total ram usage:        1 bytes
 14753 ;; Hardware stack levels used:    1
 14754 ;; This function calls:
 14755 ;;		Nothing
 14756 ;; This function is called by:
 14757 ;;		_isr
 14758 ;; This function uses a non-reentrant model
 14759 ;;
 14760                           
 14761                           	psect	text63
 14762  002B76                     __ptext63:
 14763                           	opt stack 0
 14764  002B76                     _tratamento_uart:
 14765                           	opt stack 18
 14766                           
 14767                           ;incstack = 0
 14768                           ;tratamento_uart@received_char stored from wreg
 14769  002B76  6E01               	movwf	tratamento_uart@received_char,c
 14770                           
 14771                           ;GPS.c: 173: if(received_char =='$'){
 14772  002B78  0E24               	movlw	36
 14773  002B7A  1801               	xorwf	tratamento_uart@received_char,w,c
 14774  002B7C  A4D8               	btfss	status,2,c
 14775  002B7E  D009               	goto	i2l1214
 14776                           
 14777                           ;GPS.c: 174: GGA_Index = 0;
 14778  002B80  0E00               	movlw	0
 14779  002B82  6E36               	movwf	_GGA_Index+1,c	;volatile
 14780  002B84  0E00               	movlw	0
 14781  002B86  6E35               	movwf	_GGA_Index,c	;volatile
 14782                           
 14783                           ;GPS.c: 175: IsItGGAString = 0;
 14784  002B88  0E00               	movlw	0
 14785  002B8A  6E39               	movwf	_IsItGGAString,c	;volatile
 14786                           
 14787                           ;GPS.c: 176: CommaCounter = 0;
 14788  002B8C  0E00               	movlw	0
 14789  002B8E  6E3A               	movwf	_CommaCounter,c
 14790                           
 14791                           ;GPS.c: 177: }
 14792  002B90  0012               	return	
 14793  002B92                     i2l1214:
 14794                           
 14795                           ;GPS.c: 178: else if(IsItGGAString == 1){
 14796  002B92  0439               	decf	_IsItGGAString,w,c	;volatile
 14797  002B94  A4D8               	btfss	status,2,c
 14798  002B96  D01A               	goto	i2l1216
 14799                           
 14800                           ;GPS.c: 179: if(received_char == ',' ) GGA_Pointers[CommaCounter++] = GGA_Index;
 14801  002B98  0E2C               	movlw	44
 14802  002B9A  1801               	xorwf	tratamento_uart@received_char,w,c
 14803  002B9C  A4D8               	btfss	status,2,c
 14804  002B9E  D00B               	goto	i2l1217
 14805  002BA0  503A               	movf	_CommaCounter,w,c
 14806  002BA2  0D01               	mullw	1
 14807  002BA4  0E26               	movlw	low _GGA_Pointers
 14808  002BA6  24F3               	addwf	prodl,w,c
 14809  002BA8  6ED9               	movwf	fsr2l,c
 14810  002BAA  0E01               	movlw	high _GGA_Pointers
 14811  002BAC  20F4               	addwfc	prodh,w,c
 14812  002BAE  6EDA               	movwf	fsr2h,c
 14813  002BB0  C035  FFDF         	movff	_GGA_Index,indf2	;volatile
 14814  002BB4  2A3A               	incf	_CommaCounter,f,c
 14815  002BB6                     i2l1217:
 14816                           
 14817                           ;GPS.c: 180: GGA_Buffer[GGA_Index++] = received_char;
 14818  002BB6  0E00               	movlw	low _GGA_Buffer
 14819  002BB8  2435               	addwf	_GGA_Index,w,c	;volatile
 14820  002BBA  6ED9               	movwf	fsr2l,c
 14821  002BBC  0E02               	movlw	high _GGA_Buffer
 14822  002BBE  2036               	addwfc	_GGA_Index+1,w,c	;volatile
 14823  002BC0  6EDA               	movwf	fsr2h,c
 14824  002BC2  C001  FFDF         	movff	tratamento_uart@received_char,indf2
 14825  002BC6  4A35               	infsnz	_GGA_Index,f,c	;volatile
 14826  002BC8  2A36               	incf	_GGA_Index+1,f,c	;volatile
 14827                           
 14828                           ;GPS.c: 181: }
 14829  002BCA  0012               	return	
 14830  002BCC                     i2l1216:
 14831                           
 14832                           ;GPS.c: 182: else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'){
 14833  002BCC  0E47               	movlw	71
 14834  002BCE  1832               	xorwf	_GGA_CODE,w,c
 14835  002BD0  A4D8               	btfss	status,2,c
 14836  002BD2  D011               	goto	i2l1219
 14837  002BD4  0E47               	movlw	71
 14838  002BD6  1833               	xorwf	_GGA_CODE+1,w,c
 14839  002BD8  A4D8               	btfss	status,2,c
 14840  002BDA  D00D               	goto	i2l1219
 14841  002BDC  0E41               	movlw	65
 14842  002BDE  1834               	xorwf	_GGA_CODE+2,w,c
 14843  002BE0  A4D8               	btfss	status,2,c
 14844  002BE2  D009               	goto	i2l1219
 14845                           
 14846                           ;GPS.c: 183: IsItGGAString = 1;
 14847  002BE4  0E01               	movlw	1
 14848  002BE6  6E39               	movwf	_IsItGGAString,c	;volatile
 14849                           
 14850                           ;GPS.c: 184: GGA_CODE[0] = 0; GGA_CODE[1] = 0; GGA_CODE[2] = 0;
 14851  002BE8  0E00               	movlw	0
 14852  002BEA  6E32               	movwf	_GGA_CODE,c
 14853  002BEC  0E00               	movlw	0
 14854  002BEE  6E33               	movwf	_GGA_CODE+1,c
 14855  002BF0  0E00               	movlw	0
 14856  002BF2  6E34               	movwf	_GGA_CODE+2,c
 14857                           
 14858                           ;GPS.c: 185: }
 14859  002BF4  0012               	return	
 14860  002BF6                     i2l1219:
 14861                           
 14862                           ;GPS.c: 186: else{
 14863                           ;GPS.c: 187: GGA_CODE[0] = GGA_CODE[1]; GGA_CODE[1] = GGA_CODE[2]; GGA_CODE[2] = receive
      +                          d_char;
 14864  002BF6  C033  F032         	movff	_GGA_CODE+1,_GGA_CODE
 14865  002BFA  C034  F033         	movff	_GGA_CODE+2,_GGA_CODE+1
 14866  002BFE  C001  F034         	movff	tratamento_uart@received_char,_GGA_CODE+2
 14867  002C02  0012               	return	
 14868  002C04                     __end_of_tratamento_uart:
 14869                           	opt stack 0
 14870                           tosu	equ	0xFFF
 14871                           tosh	equ	0xFFE
 14872                           tosl	equ	0xFFD
 14873                           pclatu	equ	0xFFB
 14874                           pclath	equ	0xFFA
 14875                           pcl	equ	0xFF9
 14876                           tblptru	equ	0xFF8
 14877                           tblptrh	equ	0xFF7
 14878                           tblptrl	equ	0xFF6
 14879                           tablat	equ	0xFF5
 14880                           prodh	equ	0xFF4
 14881                           prodl	equ	0xFF3
 14882                           intcon	equ	0xFF2
 14883                           intcon2	equ	0xFF1
 14884                           intcon3	equ	0xFF0
 14885                           indf0	equ	0xFEF
 14886                           postinc0	equ	0xFEE
 14887                           fsr0h	equ	0xFEA
 14888                           fsr0l	equ	0xFE9
 14889                           wreg	equ	0xFE8
 14890                           indf1	equ	0xFE7
 14891                           postinc1	equ	0xFE6
 14892                           postdec1	equ	0xFE5
 14893                           fsr1h	equ	0xFE2
 14894                           fsr1l	equ	0xFE1
 14895                           indf2	equ	0xFDF
 14896                           postinc2	equ	0xFDE
 14897                           postdec2	equ	0xFDD
 14898                           plusw2	equ	0xFDB
 14899                           fsr2h	equ	0xFDA
 14900                           fsr2l	equ	0xFD9
 14901                           status	equ	0xFD8
 14902                           
 14903 ;; *************** function _recebe_dado_uart *****************
 14904 ;; Defined at:
 14905 ;;		line 138 in file "bibliotecas/uart.c"
 14906 ;; Parameters:    Size  Location     Type
 14907 ;;		None
 14908 ;; Auto vars:     Size  Location     Type
 14909 ;;		None
 14910 ;; Return value:  Size  Location     Type
 14911 ;;                  1    wreg      unsigned char 
 14912 ;; Registers used:
 14913 ;;		wreg, status,2
 14914 ;; Tracked objects:
 14915 ;;		On entry : 0/0
 14916 ;;		On exit  : 0/0
 14917 ;;		Unchanged: 0/0
 14918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14919 ;;      Params:         0       0       0       0       0       0       0       0       0
 14920 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14921 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14922 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14923 ;;Total ram usage:        0 bytes
 14924 ;; Hardware stack levels used:    1
 14925 ;; This function calls:
 14926 ;;		Nothing
 14927 ;; This function is called by:
 14928 ;;		_isr
 14929 ;;		_recebe_string_uart
 14930 ;; This function uses a non-reentrant model
 14931 ;;
 14932                           
 14933                           	psect	text64
 14934  003528                     __ptext64:
 14935                           	opt stack 0
 14936  003528                     _recebe_dado_uart:
 14937                           	opt stack 18
 14938                           
 14939                           ;uart.c: 140: while(RCIF==0);
 14940                           
 14941                           ;incstack = 0
 14942  003528  AA9E               	btfss	3998,5,c	;volatile
 14943  00352A  D7FE               	goto	_recebe_dado_uart
 14944                           
 14945                           ;uart.c: 141: if(RCSTAbits.OERR)
 14946  00352C  A2AB               	btfss	4011,1,c	;volatile
 14947  00352E  D003               	goto	i2l941
 14948                           
 14949                           ;uart.c: 142: {
 14950                           ;uart.c: 143: CREN = 0;
 14951  003530  98AB               	bcf	4011,4,c	;volatile
 14952                           
 14953                           ;uart.c: 144: __nop();
 14954  003532  F000               	nop	
 14955                           
 14956                           ;uart.c: 145: CREN=1;
 14957  003534  88AB               	bsf	4011,4,c	;volatile
 14958  003536                     i2l941:
 14959                           
 14960                           ;uart.c: 146: }
 14961                           ;uart.c: 147: return(RCREG);
 14962  003536  50AE               	movf	4014,w,c	;volatile
 14963  003538  0012               	return	
 14964  00353A                     __end_of_recebe_dado_uart:
 14965                           	opt stack 0
 14966                           tosu	equ	0xFFF
 14967                           tosh	equ	0xFFE
 14968                           tosl	equ	0xFFD
 14969                           pclatu	equ	0xFFB
 14970                           pclath	equ	0xFFA
 14971                           pcl	equ	0xFF9
 14972                           tblptru	equ	0xFF8
 14973                           tblptrh	equ	0xFF7
 14974                           tblptrl	equ	0xFF6
 14975                           tablat	equ	0xFF5
 14976                           prodh	equ	0xFF4
 14977                           prodl	equ	0xFF3
 14978                           intcon	equ	0xFF2
 14979                           intcon2	equ	0xFF1
 14980                           intcon3	equ	0xFF0
 14981                           indf0	equ	0xFEF
 14982                           postinc0	equ	0xFEE
 14983                           fsr0h	equ	0xFEA
 14984                           fsr0l	equ	0xFE9
 14985                           wreg	equ	0xFE8
 14986                           indf1	equ	0xFE7
 14987                           postinc1	equ	0xFE6
 14988                           postdec1	equ	0xFE5
 14989                           fsr1h	equ	0xFE2
 14990                           fsr1l	equ	0xFE1
 14991                           indf2	equ	0xFDF
 14992                           postinc2	equ	0xFDE
 14993                           postdec2	equ	0xFDD
 14994                           plusw2	equ	0xFDB
 14995                           fsr2h	equ	0xFDA
 14996                           fsr2l	equ	0xFD9
 14997                           status	equ	0xFD8
 14998                           tosu	equ	0xFFF
 14999                           tosh	equ	0xFFE
 15000                           tosl	equ	0xFFD
 15001                           pclatu	equ	0xFFB
 15002                           pclath	equ	0xFFA
 15003                           pcl	equ	0xFF9
 15004                           tblptru	equ	0xFF8
 15005                           tblptrh	equ	0xFF7
 15006                           tblptrl	equ	0xFF6
 15007                           tablat	equ	0xFF5
 15008                           prodh	equ	0xFF4
 15009                           prodl	equ	0xFF3
 15010                           intcon	equ	0xFF2
 15011                           intcon2	equ	0xFF1
 15012                           intcon3	equ	0xFF0
 15013                           indf0	equ	0xFEF
 15014                           postinc0	equ	0xFEE
 15015                           fsr0h	equ	0xFEA
 15016                           fsr0l	equ	0xFE9
 15017                           wreg	equ	0xFE8
 15018                           indf1	equ	0xFE7
 15019                           postinc1	equ	0xFE6
 15020                           postdec1	equ	0xFE5
 15021                           fsr1h	equ	0xFE2
 15022                           fsr1l	equ	0xFE1
 15023                           indf2	equ	0xFDF
 15024                           postinc2	equ	0xFDE
 15025                           postdec2	equ	0xFDD
 15026                           plusw2	equ	0xFDB
 15027                           fsr2h	equ	0xFDA
 15028                           fsr2l	equ	0xFD9
 15029                           status	equ	0xFD8
 15030                           
 15031                           	psect	text65
 15032  000000                     __ptext65:
 15033                           	opt stack 0
 15034                           tosu	equ	0xFFF
 15035                           tosh	equ	0xFFE
 15036                           tosl	equ	0xFFD
 15037                           pclatu	equ	0xFFB
 15038                           pclath	equ	0xFFA
 15039                           pcl	equ	0xFF9
 15040                           tblptru	equ	0xFF8
 15041                           tblptrh	equ	0xFF7
 15042                           tblptrl	equ	0xFF6
 15043                           tablat	equ	0xFF5
 15044                           prodh	equ	0xFF4
 15045                           prodl	equ	0xFF3
 15046                           intcon	equ	0xFF2
 15047                           intcon2	equ	0xFF1
 15048                           intcon3	equ	0xFF0
 15049                           indf0	equ	0xFEF
 15050                           postinc0	equ	0xFEE
 15051                           fsr0h	equ	0xFEA
 15052                           fsr0l	equ	0xFE9
 15053                           wreg	equ	0xFE8
 15054                           indf1	equ	0xFE7
 15055                           postinc1	equ	0xFE6
 15056                           postdec1	equ	0xFE5
 15057                           fsr1h	equ	0xFE2
 15058                           fsr1l	equ	0xFE1
 15059                           indf2	equ	0xFDF
 15060                           postinc2	equ	0xFDE
 15061                           postdec2	equ	0xFDD
 15062                           plusw2	equ	0xFDB
 15063                           fsr2h	equ	0xFDA
 15064                           fsr2l	equ	0xFD9
 15065                           status	equ	0xFD8
 15066                           
 15067                           	psect	rparam
 15068  0000                     tosu	equ	0xFFF
 15069                           tosh	equ	0xFFE
 15070                           tosl	equ	0xFFD
 15071                           pclatu	equ	0xFFB
 15072                           pclath	equ	0xFFA
 15073                           pcl	equ	0xFF9
 15074                           tblptru	equ	0xFF8
 15075                           tblptrh	equ	0xFF7
 15076                           tblptrl	equ	0xFF6
 15077                           tablat	equ	0xFF5
 15078                           prodh	equ	0xFF4
 15079                           prodl	equ	0xFF3
 15080                           intcon	equ	0xFF2
 15081                           intcon2	equ	0xFF1
 15082                           intcon3	equ	0xFF0
 15083                           indf0	equ	0xFEF
 15084                           postinc0	equ	0xFEE
 15085                           fsr0h	equ	0xFEA
 15086                           fsr0l	equ	0xFE9
 15087                           wreg	equ	0xFE8
 15088                           indf1	equ	0xFE7
 15089                           postinc1	equ	0xFE6
 15090                           postdec1	equ	0xFE5
 15091                           fsr1h	equ	0xFE2
 15092                           fsr1l	equ	0xFE1
 15093                           indf2	equ	0xFDF
 15094                           postinc2	equ	0xFDE
 15095                           postdec2	equ	0xFDD
 15096                           plusw2	equ	0xFDB
 15097                           fsr2h	equ	0xFDA
 15098                           fsr2l	equ	0xFD9
 15099                           status	equ	0xFD8
 15100                           
 15101                           	psect	temp
 15102  000046                     btemp:
 15103                           	opt stack 0
 15104  000046                     	ds	1
 15105  0000                     int$flags	set	btemp
 15106  0000                     wtemp6	set	btemp+1
 15107                           tosu	equ	0xFFF
 15108                           tosh	equ	0xFFE
 15109                           tosl	equ	0xFFD
 15110                           pclatu	equ	0xFFB
 15111                           pclath	equ	0xFFA
 15112                           pcl	equ	0xFF9
 15113                           tblptru	equ	0xFF8
 15114                           tblptrh	equ	0xFF7
 15115                           tblptrl	equ	0xFF6
 15116                           tablat	equ	0xFF5
 15117                           prodh	equ	0xFF4
 15118                           prodl	equ	0xFF3
 15119                           intcon	equ	0xFF2
 15120                           intcon2	equ	0xFF1
 15121                           intcon3	equ	0xFF0
 15122                           indf0	equ	0xFEF
 15123                           postinc0	equ	0xFEE
 15124                           fsr0h	equ	0xFEA
 15125                           fsr0l	equ	0xFE9
 15126                           wreg	equ	0xFE8
 15127                           indf1	equ	0xFE7
 15128                           postinc1	equ	0xFE6
 15129                           postdec1	equ	0xFE5
 15130                           fsr1h	equ	0xFE2
 15131                           fsr1l	equ	0xFE1
 15132                           indf2	equ	0xFDF
 15133                           postinc2	equ	0xFDE
 15134                           postdec2	equ	0xFDD
 15135                           plusw2	equ	0xFDB
 15136                           fsr2h	equ	0xFDA
 15137                           fsr2l	equ	0xFD9
 15138                           status	equ	0xFD8


Data Sizes:
    Strings     231
    Constant    331
    Data        24
    BSS         814
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      69
    BANK0           160    113     121
    BANK1           256     63     229
    BANK2           256     45     173
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    pf_open@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[10]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(COMRAM[7]), 

    sp__memset	PTR void  size(2) Largest target is 15
		 -> GPS@GPS_Buffer(COMRAM[15]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> SDCard(), acende_led4(), 

    pf_readdir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_opendir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK2[2]), 

    pf_write@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    pf_write@buff	PTR const void  size(2) Largest target is 8
		 -> STR_14(CODE[8]), 

    pf_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_14(CODE[8]), 

    pf_read$1886	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), NULL(NULL[0]), 

    pf_read@br	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK2[2]), 

    pf_read@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    pf_read@buff	PTR void  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_read@rbuff	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_open@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_mount@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), 

    check_fs@buf	PTR unsigned char  size(2) Largest target is 36
		 -> pf_mount@buf(BANK0[36]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    follow_path@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    follow_path@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), 

    get_fileinfo@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), 

    create_name@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    create_name@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_read@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_find@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    dir_find@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_next@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_next@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_next@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    S1575$fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_rewind@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_rewind@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_rewind@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    get_clust@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    get_clust@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    FatFs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    get_fat@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    mem_set@dst	PTR void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 17
		 -> STR_21(CODE[16]), STR_20(CODE[14]), STR_19(CODE[14]), STR_18(CODE[14]), 
		 -> STR_17(CODE[14]), STR_16(CODE[13]), STR_15(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[15]), STR_10(CODE[14]), mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), STR_7(CODE[3]), STR_6(CODE[8]), STR_5(CODE[14]), 
		 -> STR_4(CODE[13]), STR_3(CODE[9]), STR_2(CODE[14]), leitura_chave@pos_ignicao_on(COMRAM[17]), 
		 -> leitura_chave@pos_ignicao_crank(COMRAM[17]), leitura_chave@pos_ignicao_off(COMRAM[17]), STR_1(CODE[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(COMRAM[7]), 

    disk_writep@wr	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_14(CODE[8]), ROM(CODE[32767]), 

    disk_readp@rd	PTR unsigned char  size(2) Largest target is 36
		 -> data_buffer_32(BANK1[32]), pf_readdir@dir(COMRAM[32]), pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 
		 -> pf_mount@buf(BANK0[36]), NULL(NULL[0]), get_fat@buf(BANK0[4]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _leitura_continua_adc->_leitura_adc
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _inicializa_SPI->_posicao_cursor_lcd
    _acende_led4->_shrc_apaga_bit
    _acende_led4->_shrc_seta_bit
    _pf_write->_get_fat
    _disk_writep->_command
    _pf_read->_get_fat
    _follow_path->_dir_rewind
    _dir_find->_dir_rewind
    _dir_rewind->_clust2sect
    _dir_next->_get_fat
    _get_fat->_disk_readp
    _clust2sect->___lmul
    _create_name->_mem_set
    _pf_mount->_check_fs
    _disk_initialize->_reset
    _reset->_command
    _escreve_cmd_lcd->_delay
    _check_fs->_disk_readp
    _disk_readp->_command
    _response->_recebe_dado_SPI
    _proceed->_WriteSPI_
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _dummy_clocks->_WriteSPI_
    _command->_WriteSPI_
    _controle_shrc->_envia_dados_shrc

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _main->_escalonador
    _inicializa_uart->_configura_baudrate_uart
    _SDCard->_pf_open
    _pf_write->_get_fat
    _pf_read->_get_fat
    _pf_open->_follow_path
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_rewind->_clust2sect
    _dir_next->_get_fat
    _get_fat->_disk_readp
    _pf_mount->_check_fs
    _check_fs->_disk_readp

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _SDCard->_pf_open

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _escalonador->_SDCard

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  158259
                      _controle_shrc
                        _escalonador
                     _inicializa_SPI
                    _inicializa_shrc
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
             _leitura_chaves_sistema
               _leitura_continua_adc
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    5743
                                             31 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _leitura_continua_adc                                 8     8      0     312
                                             32 COMRAM     8     8      0
                        _leitura_adc
 ---------------------------------------------------------------------------------
 (2) _leitura_adc                                          7     5      2      22
                                             25 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _leitura_chaves_sistema                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0     917
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4     917
                                             39 COMRAM     6     2      4
                                              0 BANK0      8     8      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     604
                                             25 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_shrc                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_SPI                                       3     1      2    5967
                                             31 COMRAM     3     1      2
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  144467
                                            110 BANK0      3     3      0
                             _SDCard *
                        _acende_led4 *
 ---------------------------------------------------------------------------------
 (2) _acende_led4                                          0     0      0      44
                     _shrc_apaga_bit
                      _shrc_seta_bit
 ---------------------------------------------------------------------------------
 (3) _shrc_seta_bit                                        3     3      0      22
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _shrc_apaga_bit                                       3     3      0      22
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SDCard                                              45    45      0  144200
                                              0 BANK2     45    45      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                           _pf_mount
                            _pf_open
                            _pf_read
                           _pf_write
                 _posicao_cursor_lcd
                            _proceed
                           _readover
 ---------------------------------------------------------------------------------
 (3) _readover                                             2     0      2     121
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _pf_write                                            33    27      6   21831
                                             54 BANK0     33    27      6
                         _clust2sect
                        _disk_writep
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _disk_writep                                         17    10      7    3498
                                             37 COMRAM     7     0      7
                                              0 BANK0      9     9      0
                          _WriteSPI_
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (3) _pf_read                                             36    30      6   31465
                                             54 BANK0     36    30      6
                         _clust2sect
                         _disk_readp
                            _get_fat
 ---------------------------------------------------------------------------------
 (3) _pf_open                                             87    85      2   41017
                                             86 BANK0     24    22      2
                                              0 BANK1     63    63      0
                        _follow_path
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _follow_path                                          7     1      6   39675
                                             79 BANK0      7     1      6
                        _create_name
                           _dir_find
                         _dir_rewind
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _get_clust                                           18    14      4     471
                                             25 COMRAM    18    14      4
 ---------------------------------------------------------------------------------
 (5) _dir_find                                             8     4      4   34105
                                             71 BANK0      8     4      4
                           _dir_next
                         _dir_rewind
                         _disk_readp
                            _mem_cmp
 ---------------------------------------------------------------------------------
 (6) _mem_cmp                                             15     9      6     468
                                             25 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (5) _dir_rewind                                          16    14      2    2323
                                             43 COMRAM     2     0      2
                                              5 BANK0     14    14      0
                         _clust2sect
 ---------------------------------------------------------------------------------
 (6) _dir_next                                            17    15      2   17314
                                             54 BANK0     17    15      2
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             40    36      4   14932
                                             41 COMRAM     4     0      4
                                             18 BANK0     36    36      0
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     7      4    1483
                                             37 COMRAM     6     2      4
                                              0 BANK0      5     5      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _create_name                                         20    16      4    1682
                                             33 COMRAM    11     7      4
                                              0 BANK0      9     9      0
                            _mem_set
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6     400
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _pf_mount                                            77    75      2   43372
                                             24 BANK0     77    75      2
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     10    10      0   11110
                                              0 BANK0     10    10      0
                            _command
                       _dummy_clocks
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                              _reset
                           _response
 ---------------------------------------------------------------------------------
 (5) _reset                                                7     7      0    2577
                                             37 COMRAM     7     7      0
                            _command
                       _dummy_clocks
                            _proceed
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   14072
                                             41 COMRAM     4     4      0
                                             18 BANK0      6     0      6
                         _disk_readp
 ---------------------------------------------------------------------------------
 (5) _disk_readp                                          25    15     10   13340
                                             37 COMRAM     4     4      0
                                              0 BANK0     18     8     10
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (6) _response                                             1     1      0      37
                                             28 COMRAM     1     1      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (7) _recebe_dado_SPI                                      3     3      0       3
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _proceed                                              0     0      0      34
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    2667
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2519
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _dummy_clocks                                         5     5      0     102
                                             29 COMRAM     5     5      0
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (6) _command                                              8     3      5    2336
                                             29 COMRAM     8     3      5
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (4) _WriteSPI_                                            4     4      0      34
                                             25 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     872
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    1525
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _controle_shrc                                        0     0      0      45
                   _ativa_latch_shrc
                   _envia_dados_shrc
 ---------------------------------------------------------------------------------
 (2) _envia_dados_shrc                                     2     2      0      45
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ativa_latch_shrc                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _isr                                                21    21      0     271
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                    _tratamento_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (13) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (13) _tratamento_uart                                     1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _controle_shrc
     _ativa_latch_shrc
     _envia_dados_shrc
   _escalonador
     _SDCard *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _pf_mount
         ___lldiv
         ___lmul
         _check_fs
           _disk_readp
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
         _disk_initialize
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _escreve_cmd_lcd
             _delay
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
           _reset
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _proceed
               _WriteSPI_
           _response
             _recebe_dado_SPI
         _disk_readp
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
       _pf_open
         _follow_path
           _create_name
             _mem_set
           _dir_find
             _dir_next
               _clust2sect
                 ___lmul
               _get_fat
                 _disk_readp
                   _command
                     _WriteSPI_
                   _dummy_clocks
                     _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _WriteSPI_
                   _response
                     _recebe_dado_SPI
             _dir_rewind
               _clust2sect
                 ___lmul
             _disk_readp
               _command
                 _WriteSPI_
               _dummy_clocks
                 _WriteSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _recebe_dado_SPI
             _mem_cmp
           _dir_rewind
             _clust2sect
               ___lmul
           _get_clust
         _get_clust
       _pf_read
         _clust2sect
           ___lmul
         _disk_readp
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
         _get_fat
           _disk_readp
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
       _pf_write
         _clust2sect
           ___lmul
         _disk_writep
           _WriteSPI_
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
         _get_fat
           _disk_readp
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _proceed
         _WriteSPI_
       _readover
     _acende_led4 *
       _shrc_apaga_bit
       _shrc_seta_bit
   _inicializa_SPI
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay
   _inicializa_shrc
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _leitura_chaves_sistema
   _leitura_continua_adc
     _leitura_adc
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   _tratamento_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     200      21       25.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     2D      AD       9       67.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     3F      E5       7       89.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     71      79       5       75.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     250      20        0.0%
DATA                 0      0     450       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jan 24 19:04:55 2022

        __end_of_mensagem_inicial 2E08                       get_fat@clst 002A  
                               _s 0041                      create_name@c 0068  
                    create_name@d 0060                      create_name@i 0067  
                    create_name@p 0061            __size_of_controle_shrc 000C  
                     _SSPSTATbits 000FC7                  ??_init_interrupt 001A  
                              l50 3372                                l51 3364  
                              l73 3296                                l74 3266  
                              l75 326E                                l76 3270  
                     __CFG_BOR$ON 000000                                _rd 015D  
                   pf_mount@bsect 00BC                       __CFG_BORV$3 000000  
                   pf_mount@mclst 00B8                     pf_mount@fsize 00C0  
                    ?_escalonador 0001                     create_name@dj 0022  
                   pf_mount@tsect 00B4                     create_name@ni 0063  
                   create_name@si 0064                  ?_inicializa_shrc 0001  
                ?_inicializa_uart 0001                               l130 2D6A  
                             l122 2D36                               l131 2D52  
                             l123 2D2C                               l132 2D56  
                             l125 2D30                               l142 3240  
                             l126 2D32                               l303 1420  
                             l400 3090                               l312 14A6  
                             l304 140C                               l128 2D5A  
                             l401 3092                               l137 33D2  
                             l313 148E                               l129 2D4C  
                             l402 309A                               l410 3036  
                             l322 155E                               l306 1466  
                             l170 30AE                               l403 309C  
                             l411 2FEA                               l315 14E8  
                             l331 202E                               l171 30DA  
                             l420 2F00                               l412 2FF8  
                             l324 1596                               l316 14B8  
                             l172 30B2                               l421 2F08  
                             l413 3006                               l325 1582  
                             l333 2078                               l173 30B6  
                             l181 225A                               l430 2F3E  
                             l422 2F0A                               l414 3014  
                             l326 157E                               l318 1512  
                             l270 169E                               l174 30BA  
                             l431 2F46                               l423 2F12  
                             l407 303A                               l319 14FA  
                             l335 20B0                               l183 2266  
                             l360 3418                               l432 2F48  
                             l424 2F14                               l408 301A  
                             l328 15AC                               l280 17C6  
                             l336 20B6                               l176 30DC  
                             l433 2F50                               l425 2F1C  
                             l409 2FDE                               l257 2E18  
                             l281 1804                               l337 210C  
                             l169 30C0                               l434 2F52  
                             l426 2F1E                               l370 2C1E  
                             l258 2E3C                               l274 1704  
                             l266 1622                               l427 2F32  
                             l419 2EFE                               l291 131C  
                             l371 2C20                               l428 2F34  
                             l452 31EA                               l380 2C5C  
                             l372 2C28                               l268 1782  
                             l429 2F3C                               l453 31C2  
                             l293 134E                               l381 2C5E  
                             l373 2C2A                               l269 1672  
                             l701 277E                               l358 340A  
                             l390 3052                               l294 1336  
                             l382 2C66                               l374 2C32  
                             l702 27BE                               l391 3054  
                             l383 2C68                               l375 2C34  
                             l631 2F78                               l392 305C  
                             l288 13D2                               l296 1394  
                             l376 2C48                               l368 2C14  
                             l624 33A0                               l800 0F1A  
                             l393 305E                               l289 12F4  
                             l377 2C4A                               l369 2C16  
                             l625 3390                               l394 3066  
                             l298 13B0                               l378 2C52  
                             l722 1F9A                               l642 0EBE  
                             l810 10C0                               l802 0F2E  
                             l395 3068                               l299 13AC  
                             l379 2C54                               l731 1F72  
                             l723 1F44                               l651 0CCA  
                             l643 0B50                               l811 112E  
                             l396 307C                               l660 29CE  
                             l644 0BE8                               l804 1270  
                             l812 11AE                               l397 307E  
                             l733 1F82                               l653 0CE8  
                             l805 0FBA                               l821 0674  
                             l398 3086                               l718 1EE8  
                             l646 0EDA                               l654 0CF6  
                             l670 23DC                               l750 25C6  
                             l814 11C0                               l806 1162  
                             l830 07AA                               l399 3088  
                             l807 10DC                               l831 09A8  
                             l823 0688                               l656 0D9E  
                             l680 247E                               l664 2918  
                             l760 26AA                               l752 25F6  
                             l816 11C8                               l808 106A  
                             l840 0AF8                               l832 08C8  
                             l824 06F2                               l649 0CAA  
                             l753 263A                               l817 1236  
                             l809 109A                               l841 0AE6  
                             l833 0856                               l825 06DC  
                             l674 2414                               l834 0886  
                             l771 002A                               l691 1A28  
                             l683 18CA                               l835 08AC  
                             l827 071E                               l915 2236  
                             l764 1C26                               l780 021C  
                             l692 19B6                               l836 091A  
                             l781 036A                               l693 19DA  
                             l757 26D6                               l749 25CC  
                             l837 0996                               l766 1C64  
                             l782 0464                               l774 0096  
                             l678 245A                               l838 09F4  
                             l767 1CD4                               l783 048C  
                             l839 0A42                               l768 1D46  
                             l784 04A2                               l776 0130  
                             l688 1928                               l696 26F4  
                             l792 1D60                               l785 04AC  
                             l777 013C                               l786 0550  
                             l778 0146                               l794 1DA4  
                             l779 017C                               l795 1DB2  
                             l789 05A0                               _PCL 000FF9  
                             _PR2 000FCB                       get_clust@fs 0026  
                             _E_W 003B                               _N_S 003C  
                ??_init_oscilador 001A                               _isr 0008  
               ??_tratamento_uart 0001                               _txt 013A  
                             prod 000FF3                               tosl 000FFD  
                             wreg 000FE8                      __CFG_FOSC$HS 000000  
                    disk_readp@rd 0060                    create_name@cvt 604D  
       __size_of_write_timer_zero 0012                    create_name@sfn 0065  
                    __CFG_LVP$OFF 000000           ??_escreve_frase_ram_lcd 001F  
                    __CFG_WDT$OFF 000000                              l1103 1BE2  
                            l1111 1B7A                              l1104 1BAE  
                            l1105 1AFA                              l1114 1BAC  
                            l1107 1B16                              l1124 1BE4  
                            l1109 1B18                              l1118 1BE0  
                            l1128 1BEC                              l1137 33F6  
                            l1081 2A42                              l1090 32D4  
                            l1083 2AD4                              l1335 317A  
                            l1336 318E                              l1089 32C6  
                            l1390 2870              __size_of_acende_led4 0024  
                            l1391 287E                              l1383 27F6  
                            l1392 2894                              l1384 280E  
                            l1386 283C                              l1811 2CBE  
                            l1387 2830                              l1812 2CB2  
                            l1815 2CF2                              l1816 2D00  
                            l6124 225E                              l6118 2252  
                            l8402 19B6                              l8324 3390  
                            ?_isr 0001                              l9048 10C0  
                            l9160 08AC                              l8194 14B8  
                            l8188 148E                              l7904 3410  
                            l8640 16C0                              l9440 2A3A  
                            l8476 2E56                              l8660 1726  
                            l8736 206C                              l8842 1D46  
                            l8834 1CD4                              l8940 0464  
                            l7898 3402                              l8946 048C  
           _escreve_caractere_lcd 2EEE                              STR_1 61A9  
                            STR_2 621F                              STR_3 625A  
                            STR_4 623A                              STR_5 6211  
                            STR_6 626B                              STR_7 627C  
                            STR_8 6247                              STR_9 6279  
                  timer_dois@flag 0043                              _BRGH 007D62  
                            _CREN 007D5C                              _T0IF 007F92  
                            _LATB 000F8A                              _PIE1 000F9D  
               _valor_leitura_adc 0100                              u5540 2840  
                            _RCIF 007CF5                              u5720 33E4  
                            u9010 151E                              u5730 33E6  
                            u9110 0B90                              u9105 0B7C  
                            u5585 30E8                              u9300 18C6  
                            u9220 2F88                              u4964 3474  
                            u4965 3470                              u9230 2FC6  
                            u4974 3456                              u5790 2320  
                            u4975 3452                              u9080 0B1C  
                            u9090 0B3E                              u9250 23D8  
                            u8620 341E                              u9500 2E56  
                            u9180 0DE2                              u9165 0CD6  
                    get_clust@dir 001A                              u9185 0DD8  
                            u9345 1934                              u9620 27D4  
                            u8830 3118                              u9535 290A  
                            u9480 2C8A                              u9800 1726  
                            u9560 275A                              u8850 31E2  
                            u9730 1FD6                              u9570 275C  
                            u9731 1FD2                              u9555 2732  
                            u8836 311A                              u8860 320A  
                            u9740 1FD8                              u9660 1F2A  
                            u8857 31D8                              u8970 1474  
                            u8867 3200                              u8955 13E4  
                            u9780 16C0                              u9845 2000  
                            u8895 129C                              u9880 20BE  
                            _TMR2 000FCC                              u9980 1C60  
                            _SPEN 007D5F                              _TRMT 007D61  
                            _TXEN 007D65                              _SYNC 007D64  
                            _dado 0045                              _flag 00D7  
                            _main 32A0                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 0046     __size_of_leitura_continua_adc 0128  
                            prodh 000FF4                              prodl 000FF3  
    tratamento_uart@received_char 0001                              start 000E  
                   __CFG_IESO$OFF 000000                     disk_readp@arr 02AD  
                   disk_readp@ptr 006A                      disk_writep@i 0064  
                    disk_writep@j 0066                     __CFG_MCLRE$ON 000000  
                    ?_follow_path 00AF                      ___param_bank 000000  
                 create_name@path 0024                             ??_isr 0005  
        __size_of_recebe_dado_SPI 0028                       _Data_Buffer 017F  
__size_of_configura_baudrate_uart 0130                     __CFG_PLLDIV$5 000000  
                 __end_of___aldiv 28A6                             ?_main 0001  
                           _EEADR 000FA9                             STR_10 61E7  
                           STR_11 61CA                             STR_20 61D9  
                           STR_12 6198                             STR_13 6247  
                           STR_21 61BA                             STR_22 6273  
                           STR_14 6263                             STR_15 6198  
                           STR_24 6251                             STR_16 622D  
                           STR_17 6203                             STR_18 61D9  
                           STR_19 61F5                   __end_of___lldiv 2D12  
                           u10040 2CC2                             u10310 1014  
                           u10225 05D4                             u10170 0476  
                           u10155 0382                             u10315 100A  
                           u10260 1DAE                             u10190 049E  
                           _T0CON 000FD5                             u12107 2AFA  
                           u10700 1BEA                             u10605 217C  
                           u12117 2B16                             u12207 1774  
                           u12127 2B32                             u10480 0800  
                           u12217 17B8                             u12137 2048  
                           u10625 21BE                             u12307 15B6  
                           u12227 17D2                             u12147 20DA  
                           u10635 220A                             u12317 33C6  
                           u12237 1850                             u12157 15F0  
                           u10485 07F6                             u12327 322C  
                           u12247 2E6E                             u12167 163C  
                           _T2CON 000FCA                             u12337 324E  
                           u12257 12C4                             u12177 165E  
                           u12097 2DF4                             u12347 3278  
                           u12267 130C                             u12187 16C8  
                           u10595 2130                             u12357 3280  
                           u12277 1364                             u12197 173C  
                           u10870 2D9C                             u12367 3288  
                           u12287 1436                             u10880 2DB4  
                           u12377 3290                             u12297 1534  
                           u10858 2A92                             u12387 34E2  
                           u10859 2AA6                             u12397 34EA  
                  _data_buffer_32 015F                      ?_leitura_adc 001A  
 __size_of_leitura_chaves_sistema 003C                             i2l941 3536  
                           _RCREG 000FAE                             _RCSTA 000FAB  
                   get_clust@clst 0028                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _SPBRG 000FAF  
                   __CFG_USBDIV$1 000000                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _FatFs 0037            __end_ofcreate_name@cvt 60CD  
                   __CFG_PWRT$OFF 000000               ___lmul@multiplicand 001E  
      __size_of_config_timer_dois 000C                    __CFG_FCMEN$OFF 000000  
      __size_of_config_timer_zero 001A                   __end_of_get_fat 0EEC  
                 __end_of_command 316A                             _delay 33FE  
                _envia_dados_shrc 325C                   __end_of_mem_cmp 2FD0  
                 __end_of_dpowers 60F5                   __end_of_mem_set 33B2  
                 __end_of_pf_read 127C                   __end_of_pf_open 1E9A  
        __size_of_escreve_cmd_lcd 008C                             _reset 2E08  
                   _controle_shrc 3560                             pclath 000FFA  
                           tablat 000FF5                   __end_of_proceed 3560  
                           plusw2 000FDB                             status 000FD8  
                           wtemp6 0047                    disk_readp@buff 006F  
                   disk_writep@sc 0029                     disk_writep@wr 0026  
                 __initialization 2E7C               disk_initialize@buff 0069  
             disk_initialize@stat 0066                      __end_of_main 32E2  
                    clust2sect@fs 002A                _inicializa_tarefas 331E  
                 escalonador@cont 00D0                            ??_main 002E  
             disk_readp@start_add 006B                     __activetblptr 000002  
             ?_inicializa_tarefas 0001                   __CFG_CCP2MX$OFF 000000  
                          ?_delay 0001            ?_escreve_caractere_lcd 0001  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                  ?_controle_shrc 0001                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _EEDATA 000FA8  
                          _EECON2 000FA7                            ?_reset 0001  
                          _INT0IE 007F94                            _INT0IF 007F91  
                   ?_dummy_clocks 0001                            i2l1214 2B92  
                          i2l1071 2542                            i2l1216 2BCC  
                          i2l1217 2BB6                            i2l1073 2564  
                          i2l1074 2578                            i2l1219 2BF6  
                          i2l1067 24FC                            i2l1068 2570  
                          i2l1069 2514                            _PCLATH 000FFA  
                          _INTCON 000FF2                            i2l6954 250C  
         __size_of_inicializa_SPI 007C                            _TMR0IF 007F92  
                          _TMR2IF 007CF1                            _SDCard 1A3C  
        __end_of_recebe_dado_uart 353A                            _SPPCFG 000F63  
                          _SPPCON 000F65                            _SSPBUF 000FC9  
          _leitura_chaves_sistema 32E2                  __end_of_check_fs 1D4A  
            ??_inicializa_tarefas 001A              __size_of_create_name 0144  
        __size_of_disk_initialize 02BA        __end_of_posicao_cursor_lcd 3040  
                __end_of_dir_find 27DA                  __end_of_dir_next 1A3C  
          __size_of_init_hardware 0016                  __end_of__powers_ 611C  
                          _Result 0042                            ___lmul 316A  
                       ??___aldiv 0022                    __CFG_STVREN$ON 000000  
            __size_of_disk_writep 0140                         ??___lldiv 0022  
                          _folder 0250                            _estado 0044  
                __end_of_init_lcd 2B76                            clear_0 2EA4  
                          clear_1 2EB6                            clear_2 2EC2  
                          clear_3 2ECE                            clear_4 2EDA  
                __end_of_pf_mount 0646                  __end_of_readover 3576  
                __end_of_pf_write 0B04          configura_baudrate_uart@x 002C  
                     pf_read@buff 0096                       pf_read@clst 00B1  
                     pf_read@sect 00A9                       pf_read@rcnt 00B6  
                       ??_get_fat 0072                         ??_command 0023  
                       ??_mem_cmp 0020                         ??_mem_set 0020  
                       ??_pf_read 009C                         ??_pf_open 00B8  
            __size_of_escalonador 00A4                 ??_recebe_dado_SPI 001A  
                 acende_led4@flag 003D                  __end_of_response 3548  
                    __mediumconst 604C                            reset@i 0028  
           write_timer_zero@timer 001C                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ??_proceed 001E                  _write_timer_zero 3504  
                     pf_open@path 00B6         escreve_caractere_lcd@data 001C  
                  ??_dummy_clocks 001E                        __accesstop 0060  
         __end_of__initialization 2EE0                   __CFG_PBADEN$OFF 000000  
              __size_of_WriteSPI_ 004A                       pf_mount@buf 0090  
                     pf_mount@fmt 00C4                   disk_readp@count 0068  
                   ___rparam_used 000001                 ??_escreve_cmd_lcd 001C  
                  __pcstackCOMRAM 0001                 ?_ativa_latch_shrc 0001  
                 _tratamento_uart 2B76       __end_of_endereco_cursor_lcd 30AA  
                    __pidataBANK1 3498                 ?_mensagem_inicial 0001  
         _configura_baudrate_uart 211E                     __end_of_delay 3422  
            __size_of_follow_path 0116                ??_ativa_latch_shrc 001A  
                   __end_of_reset 2E7C                ??_mensagem_inicial 0020  
                     pf_write@btw 0098                _tarefa_em_execucao 003E  
      __end_ofi2_write_timer_zero 3528   configura_baudrate_uart@baudrate 0028  
                 ??_controle_shrc 001C                     _init_hardware 34C8  
            __size_of_leitura_adc 0064                __size_of_get_clust 00C8  
                         ??_delay 001A                           ??_reset 0026  
    mensagem_inicial@msg_linha_um 0060                        __pbssBANK0 00D1  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
                  pf_write@remain 00AA    __size_of_escreve_frase_ram_lcd 0052  
   __end_of_escreve_frase_ram_lcd 3212                           ?_SDCard 0001  
       escreve_inteiro_uart@F3956 01D7             __end_of_shrc_seta_bit 347E  
                         ?___lmul 001A          __end_of_envia_dados_shrc 32A0  
           mensagem_inicial@F4035 6154             mensagem_inicial@F4037 6143  
         __size_of_shrc_apaga_bit 001E                 ??_disk_initialize 0060  
                  ___lmul@product 0022      __end_of_leitura_continua_adc 2376  
               __end_of_WriteSPI_ 325C                        _dir_rewind 2376  
                    _CommaCounter 003A                           _INTCON2 000FF1  
                         _INTCON3 000FF0                    ?_init_hardware 0001  
                       ?_check_fs 0072                        _disk_readp 127C  
                   ??_acende_led4 001D                    follow_path@dir 00B1  
                  follow_path@res 00B5                         ?_dir_find 00A7  
                       ?_dir_next 0096                           _SSPCON1 000FC6  
        __size_of_inicializa_shrc 0008          __size_of_inicializa_uart 0022  
                         _SSPSTAT 000FC7                        _clust2sect 296E  
                  _inicializa_SPI 2D12                   __CFG_VREGEN$OFF 000000  
                       ?_init_lcd 0001                   __size_of_SDCard 01B2  
         __end_of_tratamento_uart 2C04                         ?_pf_mount 0078  
                       ?_readover 001A                      _GGA_Pointers 0126  
                       ?_pf_write 0096                 __end_of__npowers_ 6143  
                         __Hparam 0000         ??_configura_baudrate_uart 0060  
                         __Lparam 0000                   _dir_rewind$1692 0069  
               __end_of_get_clust 296E                         ?_response 0001  
                         ___aldiv 27DA         shrc_apaga_bit@posicao_bit 001C  
                 __size_of___lmul 0056                           ___lldiv 2C90  
            __end_of_dummy_clocks 3386                           __pcinit 2E7C  
                    _get_fat$1632 0088                        _init_ports 34B0  
                         __ramtop 0800                           __ptext0 32A0  
                         __ptext1 2D8E                           __ptext2 224E  
                         __ptext3 30AA                           __ptext4 32E2  
                         __ptext5 2AD8                           __ptext6 34C8  
                         __ptext7 34B0                           __ptext8 3576  
                         __ptext9 34F2                           _get_fat 0B04  
                         _command 310E                         _GGA_Index 0035  
                       _T0CONbits 000FD5                           _mem_cmp 2F60  
         i2write_timer_zero@timer 0003       endereco_cursor_lcd@endereco 001C  
                         _dpowers 60CD                           _mem_set 3386  
                         _pf_read 0EEC                      __size_of_isr 25BC  
         ??_escreve_caractere_lcd 001C                           _pf_open 1D4A  
                      ??_check_fs 002A                  ___aldiv@dividend 001A  
                         _proceed 3554           __size_of_init_interrupt 0012  
                      ??_dir_find 00AB                        ??_dir_next 0098  
          __end_of_inicializa_SPI 2D8E                      pf_read@rbuff 00A5  
                  __pintcode_body 249E           ?_leitura_chaves_sistema 0001  
            end_of_initialization 2EE0                           isr@cont 0019  
      __end_ofleitura_chave@F3840 6187               __end_of_acende_led4 33FE  
      __end_ofleitura_chave@F3842 6176        __end_ofleitura_chave@F3838 6198  
         __size_of_init_oscilador 0008                     SDCard@FResult 0280  
                   __Lmediumconst 604C                        ??_init_lcd 001D  
                         int_func 249E                 ?_recebe_dado_uart 0001  
                      ??_pf_mount 007A                        ??_readover 001C  
                      ??_pf_write 009C            write_timer_zero@timer0 001A  
                 ___lldiv@divisor 001E                ??_recebe_dado_uart 0001  
                 ___lldiv@counter 0026          envia_dados_shrc@contador 001A  
                      ??_response 001D                         _RCSTAbits 000FAB  
        __end_of_write_timer_zero 3516                  ___aldiv@quotient 0024  
                         postdec1 000FE5                           postdec2 000FDD  
                 _recebe_dado_SPI 33B2                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                      dir_find@dj 00A7                         _PORTAbits 000F80  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                       _PORTEbits 000F84                   ??_init_hardware 001E  
              _posicao_cursor_lcd 2FD0                       ?_dir_rewind 002C  
                      dir_next@dj 0096                        dir_next@fs 009F  
 __end_of_configura_baudrate_uart 224E                       ?_disk_readp 0060  
                       _TRISAbits 000F92                         _TRISBbits 000F93  
                       _TRISCbits 000F94                         _TRISDbits 000F95  
                      get_fat@buf 008E                        get_fat@ofs 008C  
                 _escreve_cmd_lcd 2C04    __end_of_leitura_chaves_sistema 331E  
             ?_posicao_cursor_lcd 001D                   ?_inicializa_SPI 0020  
                WriteSPI_@TempVar 001C                       ?_clust2sect 0026  
                      command@CMD 0024                        command@CRC 0022  
                disk_readp@length 0070                  disk_readp@offset 0066  
                disk_readp@sector 0062                     ??_create_name 0026  
                      command@arg 001E                  disk_initialize@i 0062  
                 disk_writep@buff 0068                  ?_tratamento_uart 0001  
            _leitura_continua_adc 224E                 ??_inicializa_shrc 001A  
               ??_inicializa_uart 002E       __size_of_inicializa_tarefas 003A  
                  __end_of_SDCard 1BEE                     ??_disk_writep 0060  
                 command@argument 0025              ??_posicao_cursor_lcd 001E  
                  _shrc_apaga_bit 3444             disk_initialize@count1 0064  
           disk_initialize@count2 0067                     _IsItGGAString 0039  
                  __end_of___lmul 31C0                     ??_escalonador 00CE  
                     ?_init_ports 0001                    clust2sect@clst 0026  
             start_initialization 2E7C                     WriteSPI_@dado 001D  
       __size_of_ativa_latch_shrc 0014                       _acende_led4 33DA  
                     __end_of_isr 25C4         __size_of_mensagem_inicial 007A  
                      mem_cmp@cnt 001E                        mem_cmp@dst 001A  
                    pf_write@buff 0096                        mem_cmp@src 001C  
                    pf_write@clst 00AE                      pf_write@sect 00A6  
                    pf_write@wcnt 00B3                          ??_SDCard 002E  
              i2_write_timer_zero 3516             ?_leitura_continua_adc 0001  
         __end_of_recebe_dado_SPI 33DA                   _disk_initialize 15C6  
                      mem_set@cnt 001E                        mem_set@dst 001A  
                      mem_set@val 001C               __size_of_dir_rewind 0128  
                _data_uart_recebe 0040             __size_of_dummy_clocks 002E  
                   ??_follow_path 002E            __end_of_shrc_apaga_bit 3462  
             __size_of_disk_readp 034A               __end_of_create_name 1FDE  
             ?i2_write_timer_zero 0001                          ??___lmul 0022  
               ?_envia_dados_shrc 0001                        pf_read@btr 0098  
                     __pdataBANK1 01CD                  __CFG_LPT1OSC$OFF 000000  
             __size_of_clust2sect 00C6               __end_of_disk_writep 211E  
              ??_envia_dados_shrc 001A                        pf_open@dir 019A  
                      pf_open@res 01BA           __end_of_escreve_cmd_lcd 2C90  
                   ??_leitura_adc 001C      __size_of_endereco_cursor_lcd 006A  
                     __pbssBIGRAM 02AD                        pf_mount@fs 0078  
                     __pbssCOMRAM 002E                      _pf_read$1886 00A7  
                   __pcstackBANK0 0060                     __pcstackBANK1 018E  
                   __pcstackBANK2 0280                    _init_interrupt 34F2  
            ??i2_write_timer_zero 0003               __end_of_escalonador 2AD8  
                       _WriteSPI_ 3212                 __size_of_check_fs 015C  
           __end_of_controle_shrc 356C                      check_fs@sect 0074  
                      pf_write@cs 00B2                        pf_write@bw 009A  
                      pf_write@fs 00B5                 __size_of_dir_find 0100  
                    _dummy_clocks 3358                    _init_oscilador 3576  
               __size_of_dir_next 01BC               __size_of_init_ports 0018  
           _escreve_frase_ram_lcd 31C0                 __size_of_init_lcd 009E  
               delay@contador_int 001B                 delay@contador_ext 001A  
               __size_of_pf_mount 0634                 __size_of_readover 000A  
                 ?_shrc_apaga_bit 0001                 __size_of_pf_write 04BE  
                       __pintcode 0008                     __pmediumconst 604C  
                        SDCard@br 0281                          SDCard@fs 0283  
                        ?___aldiv 001A                          ?___lldiv 001A  
                       __npowers_ 611C                 __size_of_response 000E  
                       _get_clust 28A6                     follow_path@dj 00AF  
              _sinaliza_int_timer 003F               __end_of_follow_path 26DA  
                        ?_get_fat 002A                          ?_command 001E  
                        ?_mem_cmp 001A            __end_of_init_interrupt 3504  
                        ?_mem_set 001A                          ?_pf_read 0096  
                        ?_pf_open 00B6                        reset@count 002A  
  __size_of_escreve_caractere_lcd 0072                        ?_WriteSPI_ 0001  
   __end_of_escreve_caractere_lcd 2F60                          ?_proceed 0001  
                  __size_of_delay 0024                          _GGA_CODE 0032  
         __end_of_disk_initialize 1880               __end_of_leitura_adc 310E  
          __end_of_init_oscilador 357E            __size_of_shrc_seta_bit 001C  
                  __size_of_reset 0074                         _p_tarefas 00D1  
          ??_leitura_continua_adc 0021                   ___aldiv@divisor 001E  
                 ___aldiv@counter 0022                       _create_name 1E9A  
                        _LATBbits 000F8A                  ?_recebe_dado_SPI 0001  
                        _PIE1bits 000F9D                   follow_path@path 00B3  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                     _disk_writep 1FDE                          i2u732_40 2546  
               ?_write_timer_zero 001A                         dir_find@c 00AD  
              leitura_chave@F3840 6176                leitura_chave@F3842 6165  
              leitura_chave@F3838 6187          posicao_cursor_lcd@coluna 001D  
                       dir_next@i 00A5                ??_write_timer_zero 001C  
      posicao_cursor_lcd@endereco 001F                        ?_get_clust 001A  
                       get_fat@bc 0092                         get_fat@fs 0094  
       __size_of_recebe_dado_uart 0012                         get_fat@wc 008A  
                     _escalonador 2A34                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                        _ADCON2bits 000FC0  
                ?_escreve_cmd_lcd 0001                      ??_dir_rewind 0065  
     escreve_frase_ram_lcd@buffer 001D                  ??_inicializa_SPI 0022  
                 ?_init_interrupt 0001                      ??_disk_readp 0026  
                _ativa_latch_shrc 34DE                   _inicializa_shrc 357E  
                 _inicializa_uart 3422                  _mensagem_inicial 2D8E  
                 ?_init_oscilador 0001                      ??_clust2sect 0060  
               ___lmul@multiplier 001A                         copy_data0 2E90  
        ?_configura_baudrate_uart 0028            ?_escreve_frase_ram_lcd 001D  
                      _EECON1bits 000FA6      leitura_continua_adc@cont_int 0027  
        escreve_inteiro_lcd@F3966 01DE                          __Hrparam 0000  
              __end_of_dir_rewind 249E                       _info_chaves 014E  
                        __Lrparam 0000                       _follow_path 25C4  
              __end_of_disk_readp 15C6                         pf_read@br 009A  
                       pf_read@cs 00B5                         pf_read@dr 00A4  
                       pf_read@fs 00B8                     _shrc_seta_bit 3462  
                       pf_open@dj 01BD                         pf_open@fs 01BB  
                       pf_open@sp 018E                  __size_of___aldiv 00CC  
                __size_of___lldiv 0082                      ??_init_ports 001A  
              __end_of_clust2sect 2A34                       check_fs@buf 0072  
                       readover@a 001A                         pf_write@p 00A4  
                     _leitura_adc 30AA                  __size_of_get_fat 03E8  
                __size_of_command 005C             __end_of_init_hardware 34DE  
                        _check_fs 1BEE                  __size_of_mem_cmp 0070  
                __size_of_mem_set 002C                  __size_of_pf_read 0390  
                __size_of_pf_open 0150                      ?_acende_led4 0001  
                     ??_WriteSPI_ 001A                          _fileName 01CD  
                        __ptext10 347E                          __ptext11 3504  
                        __ptext20 1A3C                          __ptext12 3548  
                        __ptext21 33DA                          __ptext13 3422  
                        __ptext30 28A6                          __ptext22 3462  
                        __ptext14 211E                          __ptext31 26DA  
                        __ptext23 3444                          __ptext15 27DA  
                        __ptext40 15C6                          __ptext32 2F60  
                        __ptext24 356C                          __ptext16 331E  
                        __ptext41 2E08                          __ptext33 2376  
                        __ptext25 0646                          __ptext17 357E  
                        __ptext50 31C0                          __ptext42 2C04  
                        __ptext34 1880                          __ptext26 1FDE  
                        __ptext18 2D12                          __ptext51 2EEE  
                        __ptext43 1BEE                          __ptext35 0B04  
                        __ptext27 0EEC                          __ptext19 2A34  
                        __ptext60 34DE                          __ptext52 33FE  
                        __ptext44 127C                          __ptext36 296E  
                        __ptext28 1D4A                          __ptext53 3358  
                        __ptext45 353A                          __ptext37 1E9A  
                        __ptext29 25C4                          __ptext62 3516  
                        __ptext54 310E                          __ptext46 33B2  
                        __ptext38 3386                          __ptext63 2B76  
                        __ptext55 3212                          __ptext47 3554  
                        __ptext39 0012                          __ptext64 3528  
                        __ptext56 316A                          __ptext48 2FD0  
                        __ptext65 0000                          __ptext57 2C90  
                        __ptext49 3040                          __ptext58 3560  
                        __ptext59 325C                          _dir_find 26DA  
                        _fileSize 0159                          _dir_next 1880  
                        __powers_ 60F5                  __size_of_proceed 000C  
                      _GGA_Buffer 0200                  ?_disk_initialize 0001  
                  _timeout_tarefa 00D5                         reset@buff 002C  
      __end_of_inicializa_tarefas 3358          i2write_timer_zero@timer0 0001  
                        _init_lcd 2AD8                     __size_of_main 0042  
                        _pf_mount 0012                          _readover 356C  
             _endereco_cursor_lcd 3040                          _pf_write 0646  
              __end_of_init_ports 34C8                     dummy_clocks@i 0021  
                   dummy_clocks@n 0020          shrc_seta_bit@posicao_bit 001C  
                  ?_shrc_seta_bit 0001                          _response 353A  
     __size_of_posicao_cursor_lcd 0070                          int$flags 0046  
         posicao_cursor_lcd@linha 001E           inicializa_SPI@smp_phase 0021  
        __size_of_tratamento_uart 008E                     pf_read@remain 00AD  
                     ??_get_clust 001E          leitura_continua_adc@cont 0028  
         __end_of_inicializa_shrc 3586           __end_of_inicializa_uart 3444  
           __CFG_CPUDIV$OSC1_PLL2 000000              ?_endereco_cursor_lcd 0001  
                        mem_cmp@d 0023                          mem_cmp@r 0027  
                        mem_cmp@s 0025                        _INTCONbits 000FF2  
         inicializa_SPI@sync_mode 0022                          mem_set@d 0020  
                leitura_adc@canal 0020         __size_of_envia_dados_shrc 0044  
               _config_timer_dois 3548                      _tempo_backup 0155  
               _config_timer_zero 347E            inicializa_SPI@bus_mode 0020  
                        intlevel2 0000                ?_config_timer_dois 0001  
        mensagem_inicial@msg_dois 0071                ?_config_timer_zero 0001  
                    _tempo_tarefa 002E      envia_dados_shrc@data_to_shrc 001B  
                ??_shrc_apaga_bit 001A                  ___lldiv@dividend 001A  
             ??_config_timer_dois 001A                        _OSCCONbits 000FD3  
             ??_config_timer_zero 001E                  _recebe_dado_uart 3528  
           ??_endereco_cursor_lcd 001C          ??_leitura_chaves_sistema 001A  
                    response@buff 001D                  ___lldiv@quotient 0022  
                  dir_rewind@clst 006F                       dir_find@dir 00A9  
                     dir_find@res 00AE         __end_of_config_timer_dois 3554  
                    ___aldiv@sign 0023         __end_of_config_timer_zero 3498  
     __size_ofi2_write_timer_zero 0012                       _SSPCON1bits 000FC6  
                    dir_next@clst 00A1            escreve_cmd_lcd@comando 001C  
         recebe_dado_SPI@temp_var 001C                      ?_create_name 0022  
                    dir_rewind@dj 002C                      dir_rewind@fs 006D  
                 ??_shrc_seta_bit 001A     __end_ofmensagem_inicial@F4035 6165  
   __end_ofmensagem_inicial@F4037 6154                      ?_disk_writep 0026  
        __end_of_ativa_latch_shrc 34F2  
