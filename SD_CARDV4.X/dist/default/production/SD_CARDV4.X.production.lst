

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jan 20 20:47:24 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    85                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    86  0000                     
    87                           ; Version 1.45
    88                           ; Generated 16/11/2017 GMT
    89                           ; 
    90                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC18F4550 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     
   122                           	psect	idataBANK1
   123  0033F4                     __pidataBANK1:
   124                           	opt stack 0
   125                           
   126                           ;initializer for _fileName
   127  0033F4  63                 	db	99
   128  0033F5  68                 	db	104
   129  0033F6  65                 	db	101
   130  0033F7  63                 	db	99
   131  0033F8  6B                 	db	107
   132  0033F9  2E                 	db	46
   133  0033FA  74                 	db	116
   134  0033FB  78                 	db	120
   135  0033FC  74                 	db	116
   136  0033FD  00                 	db	0
   137                           
   138                           ;initializer for escreve_inteiro_uart@F3956
   139  0033FE  30                 	db	48
   140  0033FF  30                 	db	48
   141  003400  30                 	db	48
   142  003401  30                 	db	48
   143  003402  30                 	db	48
   144  003403  30                 	db	48
   145  003404  00                 	db	0
   146                           
   147                           ;initializer for escreve_inteiro_lcd@F3966
   148  003405  30                 	db	48
   149  003406  30                 	db	48
   150  003407  30                 	db	48
   151  003408  30                 	db	48
   152  003409  30                 	db	48
   153  00340A  30                 	db	48
   154  00340B  00                 	db	0
   155                           
   156                           	psect	mediumconst
   157  0060D0                     __pmediumconst:
   158                           	opt stack 0
   159  0060D0  00                 	db	0
   160  0060D1                     create_name@cvt:
   161                           	opt stack 0
   162  0060D1  80                 	db	128
   163  0060D2  9A                 	db	154
   164  0060D3  90                 	db	144
   165  0060D4  41                 	db	65
   166  0060D5  8E                 	db	142
   167  0060D6  41                 	db	65
   168  0060D7  8F                 	db	143
   169  0060D8  80                 	db	128
   170  0060D9  45                 	db	69
   171  0060DA  45                 	db	69
   172  0060DB  45                 	db	69
   173  0060DC  49                 	db	73
   174  0060DD  49                 	db	73
   175  0060DE  49                 	db	73
   176  0060DF  8E                 	db	142
   177  0060E0  8F                 	db	143
   178  0060E1  90                 	db	144
   179  0060E2  92                 	db	146
   180  0060E3  92                 	db	146
   181  0060E4  4F                 	db	79
   182  0060E5  99                 	db	153
   183  0060E6  4F                 	db	79
   184  0060E7  55                 	db	85
   185  0060E8  55                 	db	85
   186  0060E9  59                 	db	89
   187  0060EA  99                 	db	153
   188  0060EB  9A                 	db	154
   189  0060EC  9B                 	db	155
   190  0060ED  9C                 	db	156
   191  0060EE  9D                 	db	157
   192  0060EF  9E                 	db	158
   193  0060F0  9F                 	db	159
   194  0060F1  41                 	db	65
   195  0060F2  49                 	db	73
   196  0060F3  4F                 	db	79
   197  0060F4  55                 	db	85
   198  0060F5  A5                 	db	165
   199  0060F6  A5                 	db	165
   200  0060F7  A6                 	db	166
   201  0060F8  A7                 	db	167
   202  0060F9  A8                 	db	168
   203  0060FA  A9                 	db	169
   204  0060FB  AA                 	db	170
   205  0060FC  AB                 	db	171
   206  0060FD  AC                 	db	172
   207  0060FE  21                 	db	33
   208  0060FF  AE                 	db	174
   209  006100  AF                 	db	175
   210  006101  B0                 	db	176
   211  006102  B1                 	db	177
   212  006103  B2                 	db	178
   213  006104  B3                 	db	179
   214  006105  B4                 	db	180
   215  006106  B5                 	db	181
   216  006107  B6                 	db	182
   217  006108  B7                 	db	183
   218  006109  B8                 	db	184
   219  00610A  B9                 	db	185
   220  00610B  BA                 	db	186
   221  00610C  BB                 	db	187
   222  00610D  BC                 	db	188
   223  00610E  BD                 	db	189
   224  00610F  BE                 	db	190
   225  006110  BF                 	db	191
   226  006111  C0                 	db	192
   227  006112  C1                 	db	193
   228  006113  C2                 	db	194
   229  006114  C3                 	db	195
   230  006115  C4                 	db	196
   231  006116  C5                 	db	197
   232  006117  C6                 	db	198
   233  006118  C7                 	db	199
   234  006119  C8                 	db	200
   235  00611A  C9                 	db	201
   236  00611B  CA                 	db	202
   237  00611C  CB                 	db	203
   238  00611D  CC                 	db	204
   239  00611E  CD                 	db	205
   240  00611F  CE                 	db	206
   241  006120  CF                 	db	207
   242  006121  D0                 	db	208
   243  006122  D1                 	db	209
   244  006123  D2                 	db	210
   245  006124  D3                 	db	211
   246  006125  D4                 	db	212
   247  006126  D5                 	db	213
   248  006127  D6                 	db	214
   249  006128  D7                 	db	215
   250  006129  D8                 	db	216
   251  00612A  D9                 	db	217
   252  00612B  DA                 	db	218
   253  00612C  DB                 	db	219
   254  00612D  DC                 	db	220
   255  00612E  DD                 	db	221
   256  00612F  DE                 	db	222
   257  006130  DF                 	db	223
   258  006131  E0                 	db	224
   259  006132  E1                 	db	225
   260  006133  E2                 	db	226
   261  006134  E3                 	db	227
   262  006135  E4                 	db	228
   263  006136  E5                 	db	229
   264  006137  E6                 	db	230
   265  006138  E7                 	db	231
   266  006139  E8                 	db	232
   267  00613A  E9                 	db	233
   268  00613B  EA                 	db	234
   269  00613C  EB                 	db	235
   270  00613D  EC                 	db	236
   271  00613E  ED                 	db	237
   272  00613F  EE                 	db	238
   273  006140  EF                 	db	239
   274  006141  F0                 	db	240
   275  006142  F1                 	db	241
   276  006143  F2                 	db	242
   277  006144  F3                 	db	243
   278  006145  F4                 	db	244
   279  006146  F5                 	db	245
   280  006147  F6                 	db	246
   281  006148  F7                 	db	247
   282  006149  F8                 	db	248
   283  00614A  F9                 	db	249
   284  00614B  FA                 	db	250
   285  00614C  FB                 	db	251
   286  00614D  FC                 	db	252
   287  00614E  FD                 	db	253
   288  00614F  FE                 	db	254
   289  006150  FF                 	db	255
   290  006151                     __end_ofcreate_name@cvt:
   291                           	opt stack 0
   292  006151                     mensagem_inicial@F4033:
   293                           	opt stack 0
   294  006151  20                 	db	32
   295  006152  31                 	db	49
   296  006153  38                 	db	56
   297  006154  2F                 	db	47
   298  006155  30                 	db	48
   299  006156  31                 	db	49
   300  006157  2F                 	db	47
   301  006158  32                 	db	50
   302  006159  30                 	db	48
   303  00615A  32                 	db	50
   304  00615B  32                 	db	50
   305  00615C  20                 	db	32
   306  00615D  20                 	db	32
   307  00615E  20                 	db	32
   308  00615F  00                 	db	0
   309  006160  00                 	db	0
   310  006161  00                 	db	0
   311  006162                     __end_ofmensagem_inicial@F4033:
   312                           	opt stack 0
   313  006162                     mensagem_inicial@F4031:
   314                           	opt stack 0
   315  006162  53                 	db	83
   316  006163  44                 	db	68
   317  006164  43                 	db	67
   318  006165  61                 	db	97
   319  006166  72                 	db	114
   320  006167  64                 	db	100
   321  006168  20                 	db	32
   322  006169  49                 	db	73
   323  00616A  6E                 	db	110
   324  00616B  69                 	db	105
   325  00616C  74                 	db	116
   326  00616D  20                 	db	32
   327  00616E  20                 	db	32
   328  00616F  20                 	db	32
   329  006170  00                 	db	0
   330  006171  00                 	db	0
   331  006172  00                 	db	0
   332  006173                     __end_ofmensagem_inicial@F4031:
   333                           	opt stack 0
   334  006173                     leitura_chave@F3842:
   335                           	opt stack 0
   336  006173  20                 	db	32
   337  006174  49                 	db	73
   338  006175  67                 	db	103
   339  006176  6E                 	db	110
   340  006177  20                 	db	32
   341  006178  4F                 	db	79
   342  006179  6E                 	db	110
   343  00617A  00                 	db	0
   344  00617B  00                 	db	0
   345  00617C  00                 	db	0
   346  00617D  00                 	db	0
   347  00617E  00                 	db	0
   348  00617F  00                 	db	0
   349  006180  00                 	db	0
   350  006181  00                 	db	0
   351  006182  00                 	db	0
   352  006183  00                 	db	0
   353  006184                     __end_ofleitura_chave@F3842:
   354                           	opt stack 0
   355  006184                     leitura_chave@F3840:
   356                           	opt stack 0
   357  006184  20                 	db	32
   358  006185  49                 	db	73
   359  006186  67                 	db	103
   360  006187  6E                 	db	110
   361  006188  20                 	db	32
   362  006189  43                 	db	67
   363  00618A  72                 	db	114
   364  00618B  61                 	db	97
   365  00618C  6E                 	db	110
   366  00618D  6B                 	db	107
   367  00618E  00                 	db	0
   368  00618F  00                 	db	0
   369  006190  00                 	db	0
   370  006191  00                 	db	0
   371  006192  00                 	db	0
   372  006193  00                 	db	0
   373  006194  00                 	db	0
   374  006195                     __end_ofleitura_chave@F3840:
   375                           	opt stack 0
   376  006195                     leitura_chave@F3838:
   377                           	opt stack 0
   378  006195  20                 	db	32
   379  006196  49                 	db	73
   380  006197  67                 	db	103
   381  006198  6E                 	db	110
   382  006199  20                 	db	32
   383  00619A  4F                 	db	79
   384  00619B  66                 	db	102
   385  00619C  66                 	db	102
   386  00619D  00                 	db	0
   387  00619E  00                 	db	0
   388  00619F  00                 	db	0
   389  0061A0  00                 	db	0
   390  0061A1  00                 	db	0
   391  0061A2  00                 	db	0
   392  0061A3  00                 	db	0
   393  0061A4  00                 	db	0
   394  0061A5  00                 	db	0
   395  0061A6                     __end_ofleitura_chave@F3838:
   396                           	opt stack 0
   397  0000                     _PCL	set	4089
   398  0000                     _PCLATH	set	4090
   399  0000                     _PIE1bits	set	3997
   400  0000                     _RCSTA	set	4011
   401  0000                     _TXSTA	set	4012
   402  0000                     _RCREG	set	4014
   403  0000                     _RCSTAbits	set	4011
   404  0000                     _TXREG	set	4013
   405  0000                     _SPBRG	set	4015
   406  0000                     _PIR2bits	set	4001
   407  0000                     _EECON2	set	4007
   408  0000                     _EECON1bits	set	4006
   409  0000                     _EEDATA	set	4008
   410  0000                     _EEADR	set	4009
   411  0000                     _PR2	set	4043
   412  0000                     _TMR2	set	4044
   413  0000                     _T2CON	set	4042
   414  0000                     _OSCCONbits	set	4051
   415  0000                     _TRISE	set	3990
   416  0000                     _TRISC	set	3988
   417  0000                     _TRISA	set	3986
   418  0000                     _TRISD	set	3989
   419  0000                     _LATB	set	3978
   420  0000                     _TRISB	set	3987
   421  0000                     _T0CONbits	set	4053
   422  0000                     _TMR0L	set	4054
   423  0000                     _TMR0H	set	4055
   424  0000                     _PIE1	set	3997
   425  0000                     _INTCON3	set	4080
   426  0000                     _INTCON2	set	4081
   427  0000                     _INTCON	set	4082
   428  0000                     _SPPCFG	set	3939
   429  0000                     _SPPCON	set	3941
   430  0000                     _T0CON	set	4053
   431  0000                     _PORTDbits	set	3971
   432  0000                     _TRISDbits	set	3989
   433  0000                     _PORTEbits	set	3972
   434  0000                     _PORTCbits	set	3970
   435  0000                     _ADRESL	set	4035
   436  0000                     _ADRESH	set	4036
   437  0000                     _ADCON0	set	4034
   438  0000                     _ADCON0bits	set	4034
   439  0000                     _ADCON2bits	set	4032
   440  0000                     _ADCON1bits	set	4033
   441  0000                     _ADCON1	set	4033
   442  0000                     _SSPBUF	set	4041
   443  0000                     _PIR1bits	set	3998
   444  0000                     _TRISCbits	set	3988
   445  0000                     _SSPSTATbits	set	4039
   446  0000                     _TRISBbits	set	3987
   447  0000                     _SSPCON1	set	4038
   448  0000                     _SSPSTAT	set	4039
   449  0000                     _SSPCON1bits	set	4038
   450  0000                     _INTCONbits	set	4082
   451  0000                     _LATBbits	set	3978
   452  0000                     _PORTAbits	set	3968
   453  0000                     _TRISAbits	set	3986
   454  0000                     _INT0IE	set	32660
   455  0000                     _INT0IF	set	32657
   456  0000                     _T0IF	set	32658
   457  0000                     _TMR0IF	set	32658
   458  0000                     _RCIF	set	31989
   459  0000                     _TRMT	set	32097
   460  0000                     _TXEN	set	32101
   461  0000                     _CREN	set	32092
   462  0000                     _SPEN	set	32095
   463  0000                     _SYNC	set	32100
   464  0000                     _BRGH	set	32098
   465  0000                     _TMR2IF	set	31985
   466  0061A6                     STR_12:
   467  0061A6  73                 	db	115	;'s'
   468  0061A7  79                 	db	121	;'y'
   469  0061A8  73                 	db	115	;'s'
   470  0061A9  74                 	db	116	;'t'
   471  0061AA  20                 	db	32
   472  0061AB  69                 	db	105	;'i'
   473  0061AC  6E                 	db	110	;'n'
   474  0061AD  69                 	db	105	;'i'
   475  0061AE  63                 	db	99	;'c'
   476  0061AF  69                 	db	105	;'i'
   477  0061B0  61                 	db	97	;'a'
   478  0061B1  6C                 	db	108	;'l'
   479  0061B2  69                 	db	105	;'i'
   480  0061B3  7A                 	db	122	;'z'
   481  0061B4  65                 	db	101	;'e'
   482  0061B5  64                 	db	100	;'d'
   483  0061B6  00                 	db	0
   484  0061B7                     STR_1:
   485  0061B7  53                 	db	83	;'S'
   486  0061B8  50                 	db	80	;'P'
   487  0061B9  49                 	db	73	;'I'
   488  0061BA  20                 	db	32
   489  0061BB  63                 	db	99	;'c'
   490  0061BC  6F                 	db	111	;'o'
   491  0061BD  6E                 	db	110	;'n'
   492  0061BE  66                 	db	102	;'f'
   493  0061BF  69                 	db	105	;'i'
   494  0061C0  67                 	db	103	;'g'
   495  0061C1  75                 	db	117	;'u'
   496  0061C2  72                 	db	114	;'r'
   497  0061C3  61                 	db	97	;'a'
   498  0061C4  64                 	db	100	;'d'
   499  0061C5  61                 	db	97	;'a'
   500  0061C6  21                 	db	33
   501  0061C7  00                 	db	0
   502  0061C8                     STR_21:
   503  0061C8  61                 	db	97	;'a'
   504  0061C9  62                 	db	98	;'b'
   505  0061CA  72                 	db	114	;'r'
   506  0061CB  69                 	db	105	;'i'
   507  0061CC  72                 	db	114	;'r'
   508  0061CD  20                 	db	32
   509  0061CE  6F                 	db	111	;'o'
   510  0061CF  20                 	db	32
   511  0061D0  61                 	db	97	;'a'
   512  0061D1  72                 	db	114	;'r'
   513  0061D2  71                 	db	113	;'q'
   514  0061D3  75                 	db	117	;'u'
   515  0061D4  69                 	db	105	;'i'
   516  0061D5  76                 	db	118	;'v'
   517  0061D6  6F                 	db	111	;'o'
   518  0061D7  00                 	db	0
   519  0061D8                     STR_11:
   520  0061D8  6D                 	db	109	;'m'
   521  0061D9  6F                 	db	111	;'o'
   522  0061DA  75                 	db	117	;'u'
   523  0061DB  6E                 	db	110	;'n'
   524  0061DC  74                 	db	116	;'t'
   525  0061DD  20                 	db	32
   526  0061DE  66                 	db	102	;'f'
   527  0061DF  69                 	db	105	;'i'
   528  0061E0  6C                 	db	108	;'l'
   529  0061E1  65                 	db	101	;'e'
   530  0061E2  20                 	db	32
   531  0061E3  73                 	db	115	;'s'
   532  0061E4  79                 	db	121	;'y'
   533  0061E5  73                 	db	115	;'s'
   534  0061E6  00                 	db	0
   535  0061E7                     STR_18:
   536  0061E7  45                 	db	69	;'E'
   537  0061E8  72                 	db	114	;'r'
   538  0061E9  72                 	db	114	;'r'
   539  0061EA  6F                 	db	111	;'o'
   540  0061EB  20                 	db	32
   541  0061EC  74                 	db	116	;'t'
   542  0061ED  65                 	db	101	;'e'
   543  0061EE  6E                 	db	110	;'n'
   544  0061EF  74                 	db	116	;'t'
   545  0061F0  61                 	db	97	;'a'
   546  0061F1  6E                 	db	110	;'n'
   547  0061F2  64                 	db	100	;'d'
   548  0061F3  6F                 	db	111	;'o'
   549  0061F4  00                 	db	0
   550  0061F5                     STR_10:
   551  0061F5  41                 	db	65	;'A'
   552  0061F6  74                 	db	116	;'t'
   553  0061F7  74                 	db	116	;'t'
   554  0061F8  65                 	db	101	;'e'
   555  0061F9  6D                 	db	109	;'m'
   556  0061FA  70                 	db	112	;'p'
   557  0061FB  74                 	db	116	;'t'
   558  0061FC  69                 	db	105	;'i'
   559  0061FD  6E                 	db	110	;'n'
   560  0061FE  67                 	db	103	;'g'
   561  0061FF  20                 	db	32
   562  006200  74                 	db	116	;'t'
   563  006201  6F                 	db	111	;'o'
   564  006202  00                 	db	0
   565  006203                     STR_19:
   566  006203  6C                 	db	108	;'l'
   567  006204  65                 	db	101	;'e'
   568  006205  72                 	db	114	;'r'
   569  006206  20                 	db	32
   570  006207  6F                 	db	111	;'o'
   571  006208  20                 	db	32
   572  006209  61                 	db	97	;'a'
   573  00620A  72                 	db	114	;'r'
   574  00620B  71                 	db	113	;'q'
   575  00620C  75                 	db	117	;'u'
   576  00620D  69                 	db	105	;'i'
   577  00620E  76                 	db	118	;'v'
   578  00620F  6F                 	db	111	;'o'
   579  006210  00                 	db	0
   580  006211                     STR_17:
   581  006211  6C                 	db	108	;'l'
   582  006212  65                 	db	101	;'e'
   583  006213  6E                 	db	110	;'n'
   584  006214  64                 	db	100	;'d'
   585  006215  6F                 	db	111	;'o'
   586  006216  20                 	db	32
   587  006217  61                 	db	97	;'a'
   588  006218  72                 	db	114	;'r'
   589  006219  71                 	db	113	;'q'
   590  00621A  75                 	db	117	;'u'
   591  00621B  69                 	db	105	;'i'
   592  00621C  76                 	db	118	;'v'
   593  00621D  6F                 	db	111	;'o'
   594  00621E  00                 	db	0
   595  00621F                     STR_5:
   596  00621F  42                 	db	66	;'B'
   597  006220  79                 	db	121	;'y'
   598  006221  74                 	db	116	;'t'
   599  006222  65                 	db	101	;'e'
   600  006223  73                 	db	115	;'s'
   601  006224  20                 	db	32
   602  006225  63                 	db	99	;'c'
   603  006226  72                 	db	114	;'r'
   604  006227  69                 	db	105	;'i'
   605  006228  61                 	db	97	;'a'
   606  006229  64                 	db	100	;'d'
   607  00622A  6F                 	db	111	;'o'
   608  00622B  21                 	db	33
   609  00622C  00                 	db	0
   610  00622D                     STR_2:
   611  00622D  43                 	db	67	;'C'
   612  00622E  61                 	db	97	;'a'
   613  00622F  72                 	db	114	;'r'
   614  006230  74                 	db	116	;'t'
   615  006231  E3                 	db	-29
   616  006232  6F                 	db	111	;'o'
   617  006233  20                 	db	32
   618  006234  41                 	db	65	;'A'
   619  006235  63                 	db	99	;'c'
   620  006236  65                 	db	101	;'e'
   621  006237  69                 	db	105	;'i'
   622  006238  74                 	db	116	;'t'
   623  006239  6F                 	db	111	;'o'
   624  00623A  00                 	db	0
   625  00623B                     STR_16:
   626  00623B  53                 	db	83	;'S'
   627  00623C  44                 	db	68	;'D'
   628  00623D  43                 	db	67	;'C'
   629  00623E  61                 	db	97	;'a'
   630  00623F  72                 	db	114	;'r'
   631  006240  64                 	db	100	;'d'
   632  006241  20                 	db	32
   633  006242  65                 	db	101	;'e'
   634  006243  72                 	db	114	;'r'
   635  006244  72                 	db	114	;'r'
   636  006245  6F                 	db	111	;'o'
   637  006246  72                 	db	114	;'r'
   638  006247  00                 	db	0
   639  006248                     STR_4:
   640  006248  42                 	db	66	;'B'
   641  006249  6C                 	db	108	;'l'
   642  00624A  6F                 	db	111	;'o'
   643  00624B  63                 	db	99	;'c'
   644  00624C  6F                 	db	111	;'o'
   645  00624D  20                 	db	32
   646  00624E  64                 	db	100	;'d'
   647  00624F  65                 	db	101	;'e'
   648  006250  20                 	db	32
   649  006251  35                 	db	53	;'5'
   650  006252  31                 	db	49	;'1'
   651  006253  32                 	db	50	;'2'
   652  006254  00                 	db	0
   653  006255                     STR_8:
   654  006255  63                 	db	99	;'c'
   655  006256  68                 	db	104	;'h'
   656  006257  65                 	db	101	;'e'
   657  006258  63                 	db	99	;'c'
   658  006259  6B                 	db	107	;'k'
   659  00625A  2E                 	db	46
   660  00625B  74                 	db	116	;'t'
   661  00625C  78                 	db	120	;'x'
   662  00625D  74                 	db	116	;'t'
   663  00625E  00                 	db	0
   664  00625F                     STR_3:
   665  00625F  45                 	db	69	;'E'
   666  006260  72                 	db	114	;'r'
   667  006261  72                 	db	114	;'r'
   668  006262  6F                 	db	111	;'o'
   669  006263  72                 	db	114	;'r'
   670  006264  21                 	db	33
   671  006265  21                 	db	33
   672  006266  21                 	db	33
   673  006267  00                 	db	0
   674  006268                     STR_14:
   675  006268  53                 	db	83	;'S'
   676  006269  44                 	db	68	;'D'
   677  00626A  5F                 	db	95	;'_'
   678  00626B  43                 	db	67	;'C'
   679  00626C  61                 	db	97	;'a'
   680  00626D  72                 	db	114	;'r'
   681  00626E  64                 	db	100	;'d'
   682  00626F  00                 	db	0
   683  006270                     STR_6:
   684  006270  49                 	db	73	;'I'
   685  006271  6E                 	db	110	;'n'
   686  006272  69                 	db	105	;'i'
   687  006273  74                 	db	116	;'t'
   688  006274  20                 	db	32
   689  006275  4F                 	db	79	;'O'
   690  006276  4B                 	db	75	;'K'
   691  006277  00                 	db	0
   692  006278  0D                 	db	13
   693  006279  0A                 	db	10
   694  00627A  00                 	db	0
   695  00627B                     STR_7:
   696  00627B  2E                 	db	46
   697  00627C  2E                 	db	46
   698  00627D  00                 	db	0
   699  0000                     
   700                           ; #config settings
   701  00627E  00                 	db	0	; dummy byte at the end
   702  0000                     
   703                           	psect	cinit
   704  002FA2                     __pcinit:
   705                           	opt stack 0
   706  002FA2                     start_initialization:
   707                           	opt stack 0
   708  002FA2                     __initialization:
   709                           	opt stack 0
   710                           
   711                           ; Initialize objects allocated to BANK1 (24 bytes)
   712                           ; load TBLPTR registers with __pidataBANK1
   713  002FA2  0EF4               	movlw	low __pidataBANK1
   714  002FA4  6EF6               	movwf	tblptrl,c
   715  002FA6  0E33               	movlw	high __pidataBANK1
   716  002FA8  6EF7               	movwf	tblptrh,c
   717  002FAA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   718  002FAC  6EF8               	movwf	tblptru,c
   719  002FAE  EE01  F0D0         	lfsr	0,__pdataBANK1
   720  002FB2  EE10 F018          	lfsr	1,24
   721  002FB6                     copy_data0:
   722  002FB6  0009               	tblrd		*+
   723  002FB8  CFF5 FFEE          	movff	tablat,postinc0
   724  002FBC  50E5               	movf	postdec1,w,c
   725  002FBE  50E1               	movf	fsr1l,w,c
   726  002FC0  E1FA               	bnz	copy_data0
   727                           
   728                           ; Clear objects allocated to BIGRAM (512 bytes)
   729  002FC2  EE02  F02D         	lfsr	0,__pbssBIGRAM
   730  002FC6  EE12 F000          	lfsr	1,512
   731  002FCA                     clear_0:
   732  002FCA  6AEE               	clrf	postinc0,c
   733  002FCC  50E5               	movf	postdec1,w,c
   734  002FCE  50E1               	movf	fsr1l,w,c
   735  002FD0  E1FC               	bnz	clear_0
   736  002FD2  50E2               	movf	fsr1h,w,c
   737  002FD4  E1FA               	bnz	clear_0
   738                           
   739                           ; Clear objects allocated to BANK1 (145 bytes)
   740  002FD6  EE01  F000         	lfsr	0,__pbssBANK1
   741  002FDA  0E91               	movlw	145
   742  002FDC                     clear_1:
   743  002FDC  6AEE               	clrf	postinc0,c
   744  002FDE  06E8               	decf	wreg,f,c
   745  002FE0  E1FD               	bnz	clear_1
   746                           
   747                           ; Clear objects allocated to BANK0 (8 bytes)
   748  002FE2  EE00  F0D5         	lfsr	0,__pbssBANK0
   749  002FE6  0E08               	movlw	8
   750  002FE8                     clear_2:
   751  002FE8  6AEE               	clrf	postinc0,c
   752  002FEA  06E8               	decf	wreg,f,c
   753  002FEC  E1FD               	bnz	clear_2
   754                           
   755                           ; Clear objects allocated to COMRAM (25 bytes)
   756  002FEE  EE00  F02D         	lfsr	0,__pbssCOMRAM
   757  002FF2  0E19               	movlw	25
   758  002FF4                     clear_3:
   759  002FF4  6AEE               	clrf	postinc0,c
   760  002FF6  06E8               	decf	wreg,f,c
   761  002FF8  E1FD               	bnz	clear_3
   762  002FFA                     end_of_initialization:
   763                           	opt stack 0
   764  002FFA                     __end_of__initialization:
   765                           	opt stack 0
   766  002FFA  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   767  002FFC  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   768  002FFE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   769  003000  6EF8               	movwf	tblptru,c
   770  003002  0100               	movlb	0
   771  003004  EFFF  F018         	goto	_main	;jump to C main() function
   772                           tblptru	equ	0xFF8
   773                           tblptrh	equ	0xFF7
   774                           tblptrl	equ	0xFF6
   775                           tablat	equ	0xFF5
   776                           postinc0	equ	0xFEE
   777                           wreg	equ	0xFE8
   778                           postdec1	equ	0xFE5
   779                           fsr1h	equ	0xFE2
   780                           fsr1l	equ	0xFE1
   781                           
   782                           	psect	bssCOMRAM
   783  00002D                     __pbssCOMRAM:
   784                           	opt stack 0
   785  00002D                     _tempo_tarefa:
   786                           	opt stack 0
   787  00002D                     	ds	4
   788  000031                     _fileSize:
   789                           	opt stack 0
   790  000031                     	ds	4
   791  000035                     _timeout_tarefa:
   792                           	opt stack 0
   793  000035                     	ds	2
   794  000037                     _rd:
   795                           	opt stack 0
   796  000037                     	ds	2
   797  000039                     _FatFs:
   798                           	opt stack 0
   799  000039                     	ds	2
   800  00003B                     _flag:
   801                           	opt stack 0
   802  00003B                     	ds	2
   803  00003D                     acende_led4@flag:
   804                           	opt stack 0
   805  00003D                     	ds	1
   806  00003E                     _tarefa_em_execucao:
   807                           	opt stack 0
   808  00003E                     	ds	1
   809  00003F                     _sinaliza_int_timer:
   810                           	opt stack 0
   811  00003F                     	ds	1
   812  000040                     _data_uart_recebe:
   813                           	opt stack 0
   814  000040                     	ds	1
   815  000041                     _s:
   816                           	opt stack 0
   817  000041                     	ds	1
   818  000042                     _Result:
   819                           	opt stack 0
   820  000042                     	ds	1
   821  000043                     timer_dois@flag:
   822                           	opt stack 0
   823  000043                     	ds	1
   824  000044                     _estado:
   825                           	opt stack 0
   826  000044                     	ds	1
   827  000045                     _dado:
   828                           	opt stack 0
   829  000045                     	ds	1
   830                           tblptru	equ	0xFF8
   831                           tblptrh	equ	0xFF7
   832                           tblptrl	equ	0xFF6
   833                           tablat	equ	0xFF5
   834                           postinc0	equ	0xFEE
   835                           wreg	equ	0xFE8
   836                           postdec1	equ	0xFE5
   837                           fsr1h	equ	0xFE2
   838                           fsr1l	equ	0xFE1
   839                           
   840                           	psect	bssBANK0
   841  0000D5                     __pbssBANK0:
   842                           	opt stack 0
   843  0000D5                     _tempo_backup:
   844                           	opt stack 0
   845  0000D5                     	ds	4
   846  0000D9                     _p_tarefas:
   847                           	opt stack 0
   848  0000D9                     	ds	4
   849                           tblptru	equ	0xFF8
   850                           tblptrh	equ	0xFF7
   851                           tblptrl	equ	0xFF6
   852                           tablat	equ	0xFF5
   853                           postinc0	equ	0xFEE
   854                           wreg	equ	0xFE8
   855                           postdec1	equ	0xFE5
   856                           fsr1h	equ	0xFE2
   857                           fsr1l	equ	0xFE1
   858                           
   859                           	psect	bssBANK1
   860  000100                     __pbssBANK1:
   861                           	opt stack 0
   862  000100                     _folder:
   863                           	opt stack 0
   864  000100                     	ds	48
   865  000130                     _valor_leitura_adc:
   866                           	opt stack 0
   867  000130                     	ds	38
   868  000156                     _txt:
   869                           	opt stack 0
   870  000156                     	ds	20
   871  00016A                     _info_chaves:
   872                           	opt stack 0
   873  00016A                     	ds	7
   874  000171                     _data_buffer_32:
   875                           	opt stack 0
   876  000171                     	ds	32
   877                           tblptru	equ	0xFF8
   878                           tblptrh	equ	0xFF7
   879                           tblptrl	equ	0xFF6
   880                           tablat	equ	0xFF5
   881                           postinc0	equ	0xFEE
   882                           wreg	equ	0xFE8
   883                           postdec1	equ	0xFE5
   884                           fsr1h	equ	0xFE2
   885                           fsr1l	equ	0xFE1
   886                           
   887                           	psect	dataBANK1
   888  0001D0                     __pdataBANK1:
   889                           	opt stack 0
   890  0001D0                     _fileName:
   891                           	opt stack 0
   892  0001D0                     	ds	10
   893  0001DA                     escreve_inteiro_uart@F3956:
   894                           	opt stack 0
   895  0001DA                     	ds	7
   896  0001E1                     escreve_inteiro_lcd@F3966:
   897                           	opt stack 0
   898  0001E1                     	ds	7
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           postinc0	equ	0xFEE
   904                           wreg	equ	0xFE8
   905                           postdec1	equ	0xFE5
   906                           fsr1h	equ	0xFE2
   907                           fsr1l	equ	0xFE1
   908                           
   909                           	psect	bssBIGRAM
   910  00022D                     __pbssBIGRAM:
   911                           	opt stack 0
   912  00022D                     disk_readp@arr:
   913                           	opt stack 0
   914  00022D                     	ds	512
   915                           tblptru	equ	0xFF8
   916                           tblptrh	equ	0xFF7
   917                           tblptrl	equ	0xFF6
   918                           tablat	equ	0xFF5
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           postdec1	equ	0xFE5
   922                           fsr1h	equ	0xFE2
   923                           fsr1l	equ	0xFE1
   924                           
   925                           	psect	cstackBANK2
   926  000200                     __pcstackBANK2:
   927                           	opt stack 0
   928  000200                     SDCard@FResult:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x0
   932  000200                     	ds	1
   933  000201                     SDCard@br:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x1
   937  000201                     	ds	2
   938  000203                     SDCard@fs:
   939                           	opt stack 0
   940                           
   941                           ; 42 bytes @ 0x3
   942  000203                     	ds	42
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           postinc0	equ	0xFEE
   948                           wreg	equ	0xFE8
   949                           postdec1	equ	0xFE5
   950                           fsr1h	equ	0xFE2
   951                           fsr1l	equ	0xFE1
   952                           
   953                           	psect	cstackBANK1
   954  000191                     __pcstackBANK1:
   955                           	opt stack 0
   956  000191                     pf_open@sp:
   957                           	opt stack 0
   958                           
   959                           ; 12 bytes @ 0x0
   960  000191                     	ds	12
   961  00019D                     pf_open@dir:
   962                           	opt stack 0
   963                           
   964                           ; 32 bytes @ 0xC
   965  00019D                     	ds	32
   966  0001BD                     pf_open@res:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x2C
   970  0001BD                     	ds	1
   971  0001BE                     pf_open@fs:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x2D
   975  0001BE                     	ds	2
   976  0001C0                     pf_open@dj:
   977                           	opt stack 0
   978                           
   979                           ; 16 bytes @ 0x2F
   980  0001C0                     	ds	16
   981                           tblptru	equ	0xFF8
   982                           tblptrh	equ	0xFF7
   983                           tblptrl	equ	0xFF6
   984                           tablat	equ	0xFF5
   985                           postinc0	equ	0xFEE
   986                           wreg	equ	0xFE8
   987                           postdec1	equ	0xFE5
   988                           fsr1h	equ	0xFE2
   989                           fsr1l	equ	0xFE1
   990                           
   991                           	psect	cstackBANK0
   992  000060                     __pcstackBANK0:
   993                           	opt stack 0
   994  000060                     ??_disk_initialize:
   995  000060                     ??_disk_writep:
   996  000060                     ??_clust2sect:
   997  000060                     ??_configura_baudrate_uart:
   998  000060                     create_name@d:
   999                           	opt stack 0
  1000  000060                     disk_readp@rd:
  1001                           	opt stack 0
  1002  000060                     mensagem_inicial@msg_linha_um:
  1003                           	opt stack 0
  1004                           
  1005                           ; 17 bytes @ 0x0
  1006  000060                     	ds	1
  1007  000061                     create_name@p:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x1
  1011  000061                     	ds	1
  1012  000062                     disk_initialize@i:
  1013                           	opt stack 0
  1014  000062                     disk_readp@sector:
  1015                           	opt stack 0
  1016                           
  1017                           ; 4 bytes @ 0x2
  1018  000062                     	ds	1
  1019  000063                     create_name@ni:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x3
  1023  000063                     	ds	1
  1024  000064                     create_name@si:
  1025                           	opt stack 0
  1026  000064                     disk_initialize@count1:
  1027                           	opt stack 0
  1028  000064                     disk_writep@i:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x4
  1032  000064                     	ds	1
  1033  000065                     dir_rewind@dj:
  1034                           	opt stack 0
  1035  000065                     create_name@sfn:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x5
  1039  000065                     	ds	1
  1040  000066                     disk_initialize@stat:
  1041                           	opt stack 0
  1042  000066                     disk_readp@offset:
  1043                           	opt stack 0
  1044  000066                     disk_writep@j:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x6
  1048  000066                     	ds	1
  1049  000067                     create_name@i:
  1050                           	opt stack 0
  1051  000067                     disk_initialize@count2:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x7
  1055  000067                     	ds	1
  1056  000068                     disk_writep@buff:
  1057                           	opt stack 0
  1058  000068                     create_name@c:
  1059                           	opt stack 0
  1060  000068                     disk_readp@count:
  1061                           	opt stack 0
  1062  000068                     configura_baudrate_uart@x:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x8
  1066  000068                     	ds	1
  1067  000069                     disk_initialize@buff:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x9
  1071  000069                     	ds	1
  1072  00006A                     disk_readp@ptr:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0xA
  1076  00006A                     	ds	1
  1077  00006B                     disk_readp@start_add:
  1078                           	opt stack 0
  1079  00006B                     _dir_rewind$1692:
  1080                           	opt stack 0
  1081                           
  1082                           ; 4 bytes @ 0xB
  1083  00006B                     	ds	4
  1084  00006F                     disk_readp@buff:
  1085                           	opt stack 0
  1086  00006F                     dir_rewind@fs:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0xF
  1090  00006F                     	ds	1
  1091  000070                     disk_readp@length:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x10
  1095  000070                     	ds	1
  1096  000071                     dir_rewind@clst:
  1097                           	opt stack 0
  1098  000071                     mensagem_inicial@msg_dois:
  1099                           	opt stack 0
  1100                           
  1101                           ; 17 bytes @ 0x11
  1102  000071                     	ds	1
  1103  000072                     ?_get_fat:
  1104                           	opt stack 0
  1105  000072                     check_fs@buf:
  1106                           	opt stack 0
  1107  000072                     get_fat@clst:
  1108                           	opt stack 0
  1109                           
  1110                           ; 4 bytes @ 0x12
  1111  000072                     	ds	2
  1112  000074                     check_fs@sect:
  1113                           	opt stack 0
  1114                           
  1115                           ; 4 bytes @ 0x14
  1116  000074                     	ds	2
  1117  000076                     ??_get_fat:
  1118                           
  1119                           ; 1 bytes @ 0x16
  1120  000076                     	ds	2
  1121  000078                     ??_check_fs:
  1122                           
  1123                           ; 1 bytes @ 0x18
  1124  000078                     	ds	4
  1125  00007C                     pf_mount@fs:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x1C
  1129  00007C                     	ds	2
  1130  00007E                     ??_pf_mount:
  1131                           
  1132                           ; 1 bytes @ 0x1E
  1133  00007E                     	ds	14
  1134  00008C                     _get_fat$1632:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x2C
  1138  00008C                     	ds	2
  1139  00008E                     get_fat@wc:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x2E
  1143  00008E                     	ds	2
  1144  000090                     get_fat@ofs:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x30
  1148  000090                     	ds	2
  1149  000092                     get_fat@buf:
  1150                           	opt stack 0
  1151                           
  1152                           ; 4 bytes @ 0x32
  1153  000092                     	ds	2
  1154  000094                     pf_mount@buf:
  1155                           	opt stack 0
  1156                           
  1157                           ; 36 bytes @ 0x34
  1158  000094                     	ds	2
  1159  000096                     get_fat@bc:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x36
  1163  000096                     	ds	2
  1164  000098                     get_fat@fs:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x38
  1168  000098                     	ds	2
  1169  00009A                     dir_next@dj:
  1170                           	opt stack 0
  1171  00009A                     pf_read@buff:
  1172                           	opt stack 0
  1173  00009A                     pf_write@buff:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x3A
  1177  00009A                     	ds	2
  1178  00009C                     ??_dir_next:
  1179  00009C                     pf_read@btr:
  1180                           	opt stack 0
  1181  00009C                     pf_write@btw:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0x3C
  1185  00009C                     	ds	2
  1186  00009E                     pf_read@br:
  1187                           	opt stack 0
  1188  00009E                     pf_write@bw:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x3E
  1192  00009E                     	ds	2
  1193  0000A0                     ??_pf_read:
  1194  0000A0                     ??_pf_write:
  1195                           
  1196                           ; 1 bytes @ 0x40
  1197  0000A0                     	ds	3
  1198  0000A3                     dir_next@fs:
  1199                           	opt stack 0
  1200                           
  1201                           ; 2 bytes @ 0x43
  1202  0000A3                     	ds	2
  1203  0000A5                     dir_next@clst:
  1204                           	opt stack 0
  1205                           
  1206                           ; 4 bytes @ 0x45
  1207  0000A5                     	ds	3
  1208  0000A8                     pf_read@dr:
  1209                           	opt stack 0
  1210  0000A8                     pf_write@p:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x48
  1214  0000A8                     	ds	1
  1215  0000A9                     dir_next@i:
  1216                           	opt stack 0
  1217  0000A9                     pf_read@rbuff:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x49
  1221  0000A9                     	ds	1
  1222  0000AA                     pf_write@sect:
  1223                           	opt stack 0
  1224                           
  1225                           ; 4 bytes @ 0x4A
  1226  0000AA                     	ds	1
  1227  0000AB                     dir_find@dj:
  1228                           	opt stack 0
  1229  0000AB                     _pf_read$1886:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x4B
  1233  0000AB                     	ds	2
  1234  0000AD                     dir_find@dir:
  1235                           	opt stack 0
  1236  0000AD                     pf_read@sect:
  1237                           	opt stack 0
  1238                           
  1239                           ; 4 bytes @ 0x4D
  1240  0000AD                     	ds	1
  1241  0000AE                     pf_write@remain:
  1242                           	opt stack 0
  1243                           
  1244                           ; 4 bytes @ 0x4E
  1245  0000AE                     	ds	1
  1246  0000AF                     ??_dir_find:
  1247                           
  1248                           ; 1 bytes @ 0x4F
  1249  0000AF                     	ds	2
  1250  0000B1                     dir_find@c:
  1251                           	opt stack 0
  1252  0000B1                     pf_read@remain:
  1253                           	opt stack 0
  1254                           
  1255                           ; 4 bytes @ 0x51
  1256  0000B1                     	ds	1
  1257  0000B2                     dir_find@res:
  1258                           	opt stack 0
  1259  0000B2                     pf_write@clst:
  1260                           	opt stack 0
  1261                           
  1262                           ; 4 bytes @ 0x52
  1263  0000B2                     	ds	1
  1264  0000B3                     follow_path@dj:
  1265                           	opt stack 0
  1266                           
  1267                           ; 2 bytes @ 0x53
  1268  0000B3                     	ds	2
  1269  0000B5                     follow_path@dir:
  1270                           	opt stack 0
  1271  0000B5                     pf_read@clst:
  1272                           	opt stack 0
  1273                           
  1274                           ; 4 bytes @ 0x55
  1275  0000B5                     	ds	1
  1276  0000B6                     pf_write@cs:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x56
  1280  0000B6                     	ds	1
  1281  0000B7                     follow_path@path:
  1282                           	opt stack 0
  1283  0000B7                     pf_write@wcnt:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x57
  1287  0000B7                     	ds	1
  1288  0000B8                     pf_mount@tsect:
  1289                           	opt stack 0
  1290                           
  1291                           ; 4 bytes @ 0x58
  1292  0000B8                     	ds	1
  1293  0000B9                     follow_path@res:
  1294                           	opt stack 0
  1295  0000B9                     pf_read@cs:
  1296                           	opt stack 0
  1297  0000B9                     pf_write@fs:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x59
  1301  0000B9                     	ds	1
  1302  0000BA                     pf_open@path:
  1303                           	opt stack 0
  1304  0000BA                     pf_read@rcnt:
  1305                           	opt stack 0
  1306                           
  1307                           ; 2 bytes @ 0x5A
  1308  0000BA                     	ds	2
  1309  0000BC                     ??_pf_open:
  1310  0000BC                     pf_read@fs:
  1311                           	opt stack 0
  1312  0000BC                     pf_mount@mclst:
  1313                           	opt stack 0
  1314                           
  1315                           ; 4 bytes @ 0x5C
  1316  0000BC                     	ds	4
  1317  0000C0                     pf_mount@bsect:
  1318                           	opt stack 0
  1319                           
  1320                           ; 4 bytes @ 0x60
  1321  0000C0                     	ds	4
  1322  0000C4                     pf_mount@fsize:
  1323                           	opt stack 0
  1324                           
  1325                           ; 4 bytes @ 0x64
  1326  0000C4                     	ds	4
  1327  0000C8                     pf_mount@fmt:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x68
  1331  0000C8                     	ds	10
  1332  0000D2                     
  1333                           ; 1 bytes @ 0x72
  1334  0000D2                     	ds	2
  1335  0000D4                     escalonador@cont:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x74
  1339  0000D4                     	ds	1
  1340                           tblptru	equ	0xFF8
  1341                           tblptrh	equ	0xFF7
  1342                           tblptrl	equ	0xFF6
  1343                           tablat	equ	0xFF5
  1344                           postinc0	equ	0xFEE
  1345                           wreg	equ	0xFE8
  1346                           postdec1	equ	0xFE5
  1347                           fsr1h	equ	0xFE2
  1348                           fsr1l	equ	0xFE1
  1349                           
  1350                           	psect	cstackCOMRAM
  1351  000001                     __pcstackCOMRAM:
  1352                           	opt stack 0
  1353  000001                     i2write_timer_zero@timer0:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x0
  1357  000001                     	ds	2
  1358  000003                     i2write_timer_zero@timer:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x2
  1362  000003                     	ds	2
  1363  000005                     ??_isr:
  1364                           
  1365                           ; 1 bytes @ 0x4
  1366  000005                     	ds	20
  1367  000019                     isr@cont:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x18
  1371  000019                     	ds	1
  1372  00001A                     ??_recebe_dado_SPI:
  1373  00001A                     ??_WriteSPI_:
  1374  00001A                     ??_shrc_seta_bit:
  1375  00001A                     ??_shrc_apaga_bit:
  1376  00001A                     ?_leitura_adc:
  1377                           	opt stack 0
  1378  00001A                     ?_mem_cmp:
  1379                           	opt stack 0
  1380  00001A                     ?_get_clust:
  1381                           	opt stack 0
  1382  00001A                     ?___lmul:
  1383                           	opt stack 0
  1384  00001A                     ?___aldiv:
  1385                           	opt stack 0
  1386  00001A                     ?___lldiv:
  1387                           	opt stack 0
  1388  00001A                     envia_dados_shrc@contador:
  1389                           	opt stack 0
  1390  00001A                     delay@contador_ext:
  1391                           	opt stack 0
  1392  00001A                     readover@a:
  1393                           	opt stack 0
  1394  00001A                     write_timer_zero@timer0:
  1395                           	opt stack 0
  1396  00001A                     mem_set@dst:
  1397                           	opt stack 0
  1398  00001A                     mem_cmp@dst:
  1399                           	opt stack 0
  1400  00001A                     get_clust@dir:
  1401                           	opt stack 0
  1402  00001A                     ___lmul@multiplier:
  1403                           	opt stack 0
  1404  00001A                     ___aldiv@dividend:
  1405                           	opt stack 0
  1406  00001A                     ___lldiv@dividend:
  1407                           	opt stack 0
  1408                           
  1409                           ; 4 bytes @ 0x19
  1410  00001A                     	ds	1
  1411  00001B                     envia_dados_shrc@data_to_shrc:
  1412                           	opt stack 0
  1413  00001B                     delay@contador_int:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0x1A
  1417  00001B                     	ds	1
  1418  00001C                     ??_leitura_adc:
  1419  00001C                     shrc_seta_bit@posicao_bit:
  1420                           	opt stack 0
  1421  00001C                     shrc_apaga_bit@posicao_bit:
  1422                           	opt stack 0
  1423  00001C                     recebe_dado_SPI@temp_var:
  1424                           	opt stack 0
  1425  00001C                     WriteSPI_@TempVar:
  1426                           	opt stack 0
  1427  00001C                     escreve_cmd_lcd@comando:
  1428                           	opt stack 0
  1429  00001C                     endereco_cursor_lcd@endereco:
  1430                           	opt stack 0
  1431  00001C                     escreve_caractere_lcd@data:
  1432                           	opt stack 0
  1433  00001C                     write_timer_zero@timer:
  1434                           	opt stack 0
  1435  00001C                     mem_set@val:
  1436                           	opt stack 0
  1437  00001C                     mem_cmp@src:
  1438                           	opt stack 0
  1439                           
  1440                           ; 2 bytes @ 0x1B
  1441  00001C                     	ds	1
  1442  00001D                     ??_init_lcd:
  1443  00001D                     response@buff:
  1444                           	opt stack 0
  1445  00001D                     WriteSPI_@dado:
  1446                           	opt stack 0
  1447  00001D                     posicao_cursor_lcd@coluna:
  1448                           	opt stack 0
  1449  00001D                     escreve_frase_ram_lcd@buffer:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x1C
  1453  00001D                     	ds	1
  1454  00001E                     ??_dummy_clocks:
  1455  00001E                     ??_get_clust:
  1456  00001E                     posicao_cursor_lcd@linha:
  1457                           	opt stack 0
  1458  00001E                     mem_set@cnt:
  1459                           	opt stack 0
  1460  00001E                     mem_cmp@cnt:
  1461                           	opt stack 0
  1462  00001E                     command@arg:
  1463                           	opt stack 0
  1464  00001E                     ___lmul@multiplicand:
  1465                           	opt stack 0
  1466  00001E                     ___aldiv@divisor:
  1467                           	opt stack 0
  1468  00001E                     ___lldiv@divisor:
  1469                           	opt stack 0
  1470                           
  1471                           ; 4 bytes @ 0x1D
  1472  00001E                     	ds	1
  1473  00001F                     posicao_cursor_lcd@endereco:
  1474                           	opt stack 0
  1475                           
  1476                           ; 1 bytes @ 0x1E
  1477  00001F                     	ds	1
  1478  000020                     ??_mensagem_inicial:
  1479  000020                     ??_mem_cmp:
  1480  000020                     dummy_clocks@n:
  1481                           	opt stack 0
  1482  000020                     inicializa_SPI@bus_mode:
  1483                           	opt stack 0
  1484  000020                     leitura_adc@canal:
  1485                           	opt stack 0
  1486  000020                     mem_set@d:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x1F
  1490  000020                     	ds	1
  1491  000021                     ??_leitura_continua_adc:
  1492  000021                     inicializa_SPI@smp_phase:
  1493                           	opt stack 0
  1494  000021                     dummy_clocks@i:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x20
  1498  000021                     	ds	1
  1499  000022                     command@CRC:
  1500                           	opt stack 0
  1501  000022                     inicializa_SPI@sync_mode:
  1502                           	opt stack 0
  1503  000022                     ___aldiv@counter:
  1504                           	opt stack 0
  1505  000022                     create_name@dj:
  1506                           	opt stack 0
  1507  000022                     ___lmul@product:
  1508                           	opt stack 0
  1509  000022                     ___lldiv@quotient:
  1510                           	opt stack 0
  1511                           
  1512                           ; 4 bytes @ 0x21
  1513  000022                     	ds	1
  1514  000023                     ??_command:
  1515  000023                     ___aldiv@sign:
  1516                           	opt stack 0
  1517  000023                     mem_cmp@d:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x22
  1521  000023                     	ds	1
  1522  000024                     command@CMD:
  1523                           	opt stack 0
  1524  000024                     create_name@path:
  1525                           	opt stack 0
  1526  000024                     ___aldiv@quotient:
  1527                           	opt stack 0
  1528                           
  1529                           ; 4 bytes @ 0x23
  1530  000024                     	ds	1
  1531  000025                     command@argument:
  1532                           	opt stack 0
  1533  000025                     mem_cmp@s:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x24
  1537  000025                     	ds	1
  1538  000026                     ??_reset:
  1539  000026                     ??_disk_readp:
  1540  000026                     ??_create_name:
  1541  000026                     ?_clust2sect:
  1542                           	opt stack 0
  1543  000026                     ___lldiv@counter:
  1544                           	opt stack 0
  1545  000026                     get_clust@fs:
  1546                           	opt stack 0
  1547  000026                     disk_writep@wr:
  1548                           	opt stack 0
  1549  000026                     clust2sect@clst:
  1550                           	opt stack 0
  1551                           
  1552                           ; 4 bytes @ 0x25
  1553  000026                     	ds	1
  1554  000027                     leitura_continua_adc@cont_int:
  1555                           	opt stack 0
  1556  000027                     mem_cmp@r:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x26
  1560  000027                     	ds	1
  1561  000028                     leitura_continua_adc@cont:
  1562                           	opt stack 0
  1563  000028                     reset@i:
  1564                           	opt stack 0
  1565  000028                     get_clust@clst:
  1566                           	opt stack 0
  1567  000028                     configura_baudrate_uart@baudrate:
  1568                           	opt stack 0
  1569                           
  1570                           ; 4 bytes @ 0x27
  1571  000028                     	ds	1
  1572  000029                     disk_writep@sc:
  1573                           	opt stack 0
  1574                           
  1575                           ; 4 bytes @ 0x28
  1576  000029                     	ds	1
  1577  00002A                     reset@count:
  1578                           	opt stack 0
  1579  00002A                     clust2sect@fs:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0x29
  1583  00002A                     	ds	2
  1584  00002C                     reset@buff:
  1585                           	opt stack 0
  1586                           
  1587                           ; 1 bytes @ 0x2B
  1588  00002C                     	ds	1
  1589  00002D                     tblptru	equ	0xFF8
  1590                           tblptrh	equ	0xFF7
  1591                           tblptrl	equ	0xFF6
  1592                           tablat	equ	0xFF5
  1593                           postinc0	equ	0xFEE
  1594                           wreg	equ	0xFE8
  1595                           postdec1	equ	0xFE5
  1596                           fsr1h	equ	0xFE2
  1597                           fsr1l	equ	0xFE1
  1598                           
  1599                           ; 1 bytes @ 0x2C
  1600 ;;
  1601 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1602 ;;
  1603 ;; *************** function _main *****************
  1604 ;; Defined at:
  1605 ;;		line 219 in file "main.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;		None
  1610 ;; Return value:  Size  Location     Type
  1611 ;;                  1    wreg      void 
  1612 ;; Registers used:
  1613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1619 ;;      Params:         0       0       0       0       0       0       0       0       0
  1620 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1621 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1622 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1623 ;;Total ram usage:        0 bytes
  1624 ;; Hardware stack levels required when called:   13
  1625 ;; This function calls:
  1626 ;;		_controle_shrc
  1627 ;;		_escalonador
  1628 ;;		_inicializa_SPI
  1629 ;;		_inicializa_shrc
  1630 ;;		_inicializa_tarefas
  1631 ;;		_inicializa_uart
  1632 ;;		_init_hardware
  1633 ;;		_init_lcd
  1634 ;;		_leitura_chaves_sistema
  1635 ;;		_leitura_continua_adc
  1636 ;;		_mensagem_inicial
  1637 ;; This function is called by:
  1638 ;;		Startup code after reset
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           	psect	text0
  1643  0031FE                     __ptext0:
  1644                           	opt stack 0
  1645  0031FE                     _main:
  1646                           	opt stack 18
  1647                           
  1648                           ;main.c: 221: init_hardware();
  1649                           
  1650                           ;incstack = 0
  1651  0031FE  EC12  F01A         	call	_init_hardware	;wreg free
  1652                           
  1653                           ;main.c: 222: inicializa_uart();
  1654  003202  ECBF  F019         	call	_inicializa_uart	;wreg free
  1655                           
  1656                           ;main.c: 223: init_lcd();
  1657  003206  EC68  F015         	call	_init_lcd	;wreg free
  1658                           
  1659                           ;main.c: 224: inicializa_shrc();
  1660  00320A  EC6D  F01A         	call	_inicializa_shrc	;wreg free
  1661                           
  1662                           ;main.c: 226: mensagem_inicial();
  1663  00320E  EC7C  F016         	call	_mensagem_inicial	;wreg free
  1664                           
  1665                           ;main.c: 227: inicializa_tarefas();
  1666  003212  EC3E  F019         	call	_inicializa_tarefas	;wreg free
  1667                           
  1668                           ;main.c: 228: inicializa_SPI(0,3,1);
  1669  003216  0E03               	movlw	3
  1670  003218  6E20               	movwf	inicializa_SPI@bus_mode,c
  1671  00321A  0E01               	movlw	1
  1672  00321C  6E21               	movwf	inicializa_SPI@smp_phase,c
  1673  00321E  0E00               	movlw	0
  1674  003220  EC3E  F016         	call	_inicializa_SPI
  1675  003224                     
  1676                           ;main.c: 232: {
  1677                           ;main.c: 234: if ((sinaliza_int_timer == 1) && (2))
  1678  003224  043F               	decf	_sinaliza_int_timer,w,c
  1679  003226  A4D8               	btfss	status,2,c
  1680  003228  D004               	goto	l1088
  1681                           
  1682                           ;main.c: 235: {
  1683                           ;main.c: 236: sinaliza_int_timer = 0;
  1684  00322A  0E00               	movlw	0
  1685  00322C  6E3F               	movwf	_sinaliza_int_timer,c
  1686                           
  1687                           ;main.c: 237: escalonador();
  1688  00322E  EC16  F015         	call	_escalonador	;wreg free
  1689  003232                     l1088:
  1690                           
  1691                           ;main.c: 238: }
  1692                           ;main.c: 239: leitura_chaves_sistema();
  1693  003232  EC20  F019         	call	_leitura_chaves_sistema	;wreg free
  1694                           
  1695                           ;main.c: 240: controle_shrc();
  1696  003236  EC5E  F01A         	call	_controle_shrc	;wreg free
  1697                           
  1698                           ;main.c: 241: leitura_continua_adc();
  1699  00323A  ECBB  F011         	call	_leitura_continua_adc	;wreg free
  1700  00323E  D7F2               	goto	l1087
  1701  003240                     __end_of_main:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           postdec1	equ	0xFE5
  1710                           fsr1h	equ	0xFE2
  1711                           fsr1l	equ	0xFE1
  1712                           status	equ	0xFD8
  1713                           
  1714 ;; *************** function _mensagem_inicial *****************
  1715 ;; Defined at:
  1716 ;;		line 253 in file "main.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;		None
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  1721 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0
  1732 ;;      Locals:         0      34       0       0       0       0       0       0       0
  1733 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1734 ;;      Totals:         2      34       0       0       0       0       0       0       0
  1735 ;;Total ram usage:       36 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    5
  1738 ;; This function calls:
  1739 ;;		_escreve_cmd_lcd
  1740 ;;		_escreve_frase_ram_lcd
  1741 ;;		_posicao_cursor_lcd
  1742 ;; This function is called by:
  1743 ;;		_main
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text1
  1748  002CF8                     __ptext1:
  1749                           	opt stack 0
  1750  002CF8                     _mensagem_inicial:
  1751                           	opt stack 25
  1752                           
  1753                           ;main.c: 255: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  1754                           
  1755                           ;incstack = 0
  1756  002CF8  0E62               	movlw	low mensagem_inicial@F4031
  1757  002CFA  6EF6               	movwf	tblptrl,c
  1758  002CFC                     	if	1	;There is more than 1 active tblptr byte
  1759  002CFC  0E61               	movlw	high mensagem_inicial@F4031
  1760  002CFE  6EF7               	movwf	tblptrh,c
  1761  002D00                     	endif
  1762  002D00                     	if	0	;There are less than 3 active tblptr bytes
  1763  002D00                     	endif
  1764  002D00  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  1765  002D04  0E10               	movlw	16
  1766  002D06                     u8860:
  1767  002D06  0009               	tblrd		*+
  1768  002D08  CFF5 FFDE          	movff	tablat,postinc2
  1769  002D0C  06E8               	decf	wreg,f,c
  1770  002D0E  E2FB               	bc	u8860
  1771                           
  1772                           ;main.c: 256: const unsigned char msg_dois[17] = " 18/01/2022   ";
  1773  002D10  0E51               	movlw	low mensagem_inicial@F4033
  1774  002D12  6EF6               	movwf	tblptrl,c
  1775  002D14                     	if	1	;There is more than 1 active tblptr byte
  1776  002D14  0E61               	movlw	high mensagem_inicial@F4033
  1777  002D16  6EF7               	movwf	tblptrh,c
  1778  002D18                     	endif
  1779  002D18                     	if	0	;There are less than 3 active tblptr bytes
  1780  002D18                     	endif
  1781  002D18  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  1782  002D1C  0E10               	movlw	16
  1783  002D1E                     u8870:
  1784  002D1E  0009               	tblrd		*+
  1785  002D20  CFF5 FFDE          	movff	tablat,postinc2
  1786  002D24  06E8               	decf	wreg,f,c
  1787  002D26  E2FB               	bc	u8870
  1788                           
  1789                           ;main.c: 258: posicao_cursor_lcd(1,0);
  1790  002D28  0E00               	movlw	0
  1791  002D2A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1792  002D2C  0E01               	movlw	1
  1793  002D2E  EC64  F017         	call	_posicao_cursor_lcd
  1794                           
  1795                           ;main.c: 259: escreve_frase_ram_lcd(msg_linha_um);
  1796  002D32  0E60               	movlw	low mensagem_inicial@msg_linha_um
  1797  002D34  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1798  002D36  0E00               	movlw	high mensagem_inicial@msg_linha_um
  1799  002D38  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1800  002D3A  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  1801                           
  1802                           ;main.c: 261: posicao_cursor_lcd(2,0);
  1803  002D3E  0E00               	movlw	0
  1804  002D40  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1805  002D42  0E02               	movlw	2
  1806  002D44  EC64  F017         	call	_posicao_cursor_lcd
  1807                           
  1808                           ;main.c: 262: escreve_frase_ram_lcd(msg_dois);
  1809  002D48  0E71               	movlw	low mensagem_inicial@msg_dois
  1810  002D4A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1811  002D4C  0E00               	movlw	high mensagem_inicial@msg_dois
  1812  002D4E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1813  002D50  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  1814                           
  1815                           ;main.c: 264: _delay((unsigned long)((1000)*(48000000/4000.0)));
  1816  002D54  0E3D               	movlw	61
  1817  002D56  6E21               	movwf	(??_mensagem_inicial+1)& (0+255),c
  1818  002D58  0EE1               	movlw	225
  1819  002D5A  6E20               	movwf	??_mensagem_inicial& (0+255),c
  1820  002D5C  0E40               	movlw	64
  1821  002D5E                     u9277:
  1822  002D5E  2EE8               	decfsz	wreg,f,c
  1823  002D60  D7FE               	bra	u9277
  1824  002D62  2E20               	decfsz	??_mensagem_inicial& (0+255),f,c
  1825  002D64  D7FC               	bra	u9277
  1826  002D66  2E21               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  1827  002D68  D7FA               	bra	u9277
  1828                           
  1829                           ;main.c: 265: escreve_cmd_lcd(0b00000001);
  1830  002D6A  0E01               	movlw	1
  1831  002D6C  ECB7  F015         	call	_escreve_cmd_lcd
  1832  002D70  0012               	return		;funcret
  1833  002D72                     __end_of_mensagem_inicial:
  1834                           	opt stack 0
  1835                           tblptru	equ	0xFF8
  1836                           tblptrh	equ	0xFF7
  1837                           tblptrl	equ	0xFF6
  1838                           tablat	equ	0xFF5
  1839                           postinc0	equ	0xFEE
  1840                           wreg	equ	0xFE8
  1841                           postdec1	equ	0xFE5
  1842                           fsr1h	equ	0xFE2
  1843                           fsr1l	equ	0xFE1
  1844                           postinc2	equ	0xFDE
  1845                           status	equ	0xFD8
  1846                           
  1847 ;; *************** function _leitura_continua_adc *****************
  1848 ;; Defined at:
  1849 ;;		line 109 in file "bibliotecas/adc.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;		None
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  cont_int        1   38[COMRAM] unsigned char 
  1854 ;;  cont            1   39[COMRAM] unsigned char 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1864 ;;      Params:         0       0       0       0       0       0       0       0       0
  1865 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1866 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1867 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1868 ;;Total ram usage:        8 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    3
  1871 ;; This function calls:
  1872 ;;		_leitura_adc
  1873 ;; This function is called by:
  1874 ;;		_main
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text2
  1879  002376                     __ptext2:
  1880                           	opt stack 0
  1881  002376                     _leitura_continua_adc:
  1882                           	opt stack 27
  1883                           
  1884                           ;adc.c: 111: for(unsigned char cont = 0; cont < 2; cont++)
  1885                           
  1886                           ;incstack = 0
  1887  002376  0E00               	movlw	0
  1888  002378  6E28               	movwf	leitura_continua_adc@cont,c
  1889  00237A                     l5643:
  1890  00237A  0E01               	movlw	1
  1891  00237C  6428               	cpfsgt	leitura_continua_adc@cont,c
  1892  00237E  D001               	goto	l181
  1893  002380  0012               	return	
  1894  002382                     l181:
  1895                           
  1896                           ;adc.c: 112: {
  1897                           ;adc.c: 113: for(unsigned char cont_int = 0; cont_int < 8; cont_int++)
  1898  002382  0E00               	movlw	0
  1899  002384  6E27               	movwf	leitura_continua_adc@cont_int,c
  1900  002386                     l5649:
  1901  002386  0E07               	movlw	7
  1902  002388  6427               	cpfsgt	leitura_continua_adc@cont_int,c
  1903  00238A  D001               	goto	l183
  1904  00238C  D05D               	goto	u5650
  1905  00238E                     l183:
  1906                           
  1907                           ;adc.c: 114: {
  1908                           ;adc.c: 115: valor_leitura_adc[cont].leituras[cont_int] = leitura_adc(cont);
  1909  00238E  5028               	movf	leitura_continua_adc@cont,w,c
  1910  002390  EC04  F018         	call	_leitura_adc
  1911  002394  5027               	movf	leitura_continua_adc@cont_int,w,c
  1912  002396  0D02               	mullw	2
  1913  002398  0E01               	movlw	1
  1914  00239A  26F3               	addwf	prodl,f,c
  1915  00239C  0E00               	movlw	0
  1916  00239E  22F4               	addwfc	prodh,f,c
  1917  0023A0  0E30               	movlw	low _valor_leitura_adc
  1918  0023A2  6E21               	movwf	??_leitura_continua_adc& (0+255),c
  1919  0023A4  0E01               	movlw	high _valor_leitura_adc
  1920  0023A6  6E22               	movwf	(??_leitura_continua_adc+1)& (0+255),c
  1921  0023A8  50F3               	movf	prodl,w,c
  1922  0023AA  2621               	addwf	??_leitura_continua_adc,f,c
  1923  0023AC  50F4               	movf	prodh,w,c
  1924  0023AE  2222               	addwfc	??_leitura_continua_adc+1,f,c
  1925  0023B0  5028               	movf	leitura_continua_adc@cont,w,c
  1926  0023B2  0D13               	mullw	19
  1927  0023B4  50F3               	movf	prodl,w,c
  1928  0023B6  2421               	addwf	??_leitura_continua_adc,w,c
  1929  0023B8  6ED9               	movwf	fsr2l,c
  1930  0023BA  50F4               	movf	prodh,w,c
  1931  0023BC  2022               	addwfc	??_leitura_continua_adc+1,w,c
  1932  0023BE  6EDA               	movwf	fsr2h,c
  1933  0023C0  C01A  FFDE         	movff	?_leitura_adc,postinc2
  1934  0023C4  C01B  FFDD         	movff	?_leitura_adc+1,postdec2
  1935                           
  1936                           ;adc.c: 116: valor_leitura_adc[cont].media = valor_leitura_adc[cont].media + valor_leitu
      +                          ra_adc[cont].leituras[cont_int];
  1937  0023C8  5027               	movf	leitura_continua_adc@cont_int,w,c
  1938  0023CA  0D02               	mullw	2
  1939  0023CC  0E01               	movlw	1
  1940  0023CE  26F3               	addwf	prodl,f,c
  1941  0023D0  0E00               	movlw	0
  1942  0023D2  22F4               	addwfc	prodh,f,c
  1943  0023D4  0E30               	movlw	low _valor_leitura_adc
  1944  0023D6  6E21               	movwf	??_leitura_continua_adc& (0+255),c
  1945  0023D8  0E01               	movlw	high _valor_leitura_adc
  1946  0023DA  6E22               	movwf	(??_leitura_continua_adc+1)& (0+255),c
  1947  0023DC  50F3               	movf	prodl,w,c
  1948  0023DE  2621               	addwf	??_leitura_continua_adc,f,c
  1949  0023E0  50F4               	movf	prodh,w,c
  1950  0023E2  2222               	addwfc	??_leitura_continua_adc+1,f,c
  1951  0023E4  5028               	movf	leitura_continua_adc@cont,w,c
  1952  0023E6  0D13               	mullw	19
  1953  0023E8  50F3               	movf	prodl,w,c
  1954  0023EA  2421               	addwf	??_leitura_continua_adc,w,c
  1955  0023EC  6ED9               	movwf	fsr2l,c
  1956  0023EE  50F4               	movf	prodh,w,c
  1957  0023F0  2022               	addwfc	??_leitura_continua_adc+1,w,c
  1958  0023F2  6EDA               	movwf	fsr2h,c
  1959  0023F4  CFDE F023          	movff	postinc2,??_leitura_continua_adc+2
  1960  0023F8  CFDD F024          	movff	postdec2,??_leitura_continua_adc+3
  1961  0023FC  5028               	movf	leitura_continua_adc@cont,w,c
  1962  0023FE  0D13               	mullw	19
  1963  002400  0E11               	movlw	17
  1964  002402  26F3               	addwf	prodl,f,c
  1965  002404  0E00               	movlw	0
  1966  002406  22F4               	addwfc	prodh,f,c
  1967  002408  0E30               	movlw	low _valor_leitura_adc
  1968  00240A  24F3               	addwf	prodl,w,c
  1969  00240C  6ED9               	movwf	fsr2l,c
  1970  00240E  0E01               	movlw	high _valor_leitura_adc
  1971  002410  20F4               	addwfc	prodh,w,c
  1972  002412  6EDA               	movwf	fsr2h,c
  1973  002414  CFDE F025          	movff	postinc2,??_leitura_continua_adc+4
  1974  002418  CFDD F026          	movff	postdec2,??_leitura_continua_adc+5
  1975  00241C  5023               	movf	??_leitura_continua_adc+2,w,c
  1976  00241E  2625               	addwf	??_leitura_continua_adc+4,f,c
  1977  002420  5024               	movf	??_leitura_continua_adc+3,w,c
  1978  002422  2226               	addwfc	??_leitura_continua_adc+5,f,c
  1979  002424  5028               	movf	leitura_continua_adc@cont,w,c
  1980  002426  0D13               	mullw	19
  1981  002428  0E11               	movlw	17
  1982  00242A  26F3               	addwf	prodl,f,c
  1983  00242C  0E00               	movlw	0
  1984  00242E  22F4               	addwfc	prodh,f,c
  1985  002430  0E30               	movlw	low _valor_leitura_adc
  1986  002432  24F3               	addwf	prodl,w,c
  1987  002434  6ED9               	movwf	fsr2l,c
  1988  002436  0E01               	movlw	high _valor_leitura_adc
  1989  002438  20F4               	addwfc	prodh,w,c
  1990  00243A  6EDA               	movwf	fsr2h,c
  1991  00243C  C025  FFDE         	movff	??_leitura_continua_adc+4,postinc2
  1992  002440  C026  FFDD         	movff	??_leitura_continua_adc+5,postdec2
  1993  002444  2A27               	incf	leitura_continua_adc@cont_int,f,c
  1994  002446  D79F               	goto	l5649
  1995  002448                     u5650:
  1996                           
  1997                           ;adc.c: 117: }
  1998                           ;adc.c: 118: valor_leitura_adc[cont].media = valor_leitura_adc[cont].media / 8;
  1999  002448  5028               	movf	leitura_continua_adc@cont,w,c
  2000  00244A  0D13               	mullw	19
  2001  00244C  0E11               	movlw	17
  2002  00244E  26F3               	addwf	prodl,f,c
  2003  002450  0E00               	movlw	0
  2004  002452  22F4               	addwfc	prodh,f,c
  2005  002454  0E30               	movlw	low _valor_leitura_adc
  2006  002456  24F3               	addwf	prodl,w,c
  2007  002458  6ED9               	movwf	fsr2l,c
  2008  00245A  0E01               	movlw	high _valor_leitura_adc
  2009  00245C  20F4               	addwfc	prodh,w,c
  2010  00245E  6EDA               	movwf	fsr2h,c
  2011  002460  CFDE F021          	movff	postinc2,??_leitura_continua_adc
  2012  002464  CFDD F022          	movff	postdec2,??_leitura_continua_adc+1
  2013  002468  90D8               	bcf	status,0,c
  2014  00246A  3222               	rrcf	??_leitura_continua_adc+1,f,c
  2015  00246C  3221               	rrcf	??_leitura_continua_adc,f,c
  2016  00246E  90D8               	bcf	status,0,c
  2017  002470  3222               	rrcf	??_leitura_continua_adc+1,f,c
  2018  002472  3221               	rrcf	??_leitura_continua_adc,f,c
  2019  002474  90D8               	bcf	status,0,c
  2020  002476  3222               	rrcf	??_leitura_continua_adc+1,f,c
  2021  002478  3221               	rrcf	??_leitura_continua_adc,f,c
  2022  00247A  5028               	movf	leitura_continua_adc@cont,w,c
  2023  00247C  0D13               	mullw	19
  2024  00247E  0E11               	movlw	17
  2025  002480  26F3               	addwf	prodl,f,c
  2026  002482  0E00               	movlw	0
  2027  002484  22F4               	addwfc	prodh,f,c
  2028  002486  0E30               	movlw	low _valor_leitura_adc
  2029  002488  24F3               	addwf	prodl,w,c
  2030  00248A  6ED9               	movwf	fsr2l,c
  2031  00248C  0E01               	movlw	high _valor_leitura_adc
  2032  00248E  20F4               	addwfc	prodh,w,c
  2033  002490  6EDA               	movwf	fsr2h,c
  2034  002492  C021  FFDE         	movff	??_leitura_continua_adc,postinc2
  2035  002496  C022  FFDD         	movff	??_leitura_continua_adc+1,postdec2
  2036  00249A  2A28               	incf	leitura_continua_adc@cont,f,c
  2037  00249C  D76E               	goto	l5643
  2038  00249E                     __end_of_leitura_continua_adc:
  2039                           	opt stack 0
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           prodh	equ	0xFF4
  2045                           prodl	equ	0xFF3
  2046                           postinc0	equ	0xFEE
  2047                           wreg	equ	0xFE8
  2048                           postdec1	equ	0xFE5
  2049                           fsr1h	equ	0xFE2
  2050                           fsr1l	equ	0xFE1
  2051                           postinc2	equ	0xFDE
  2052                           postdec2	equ	0xFDD
  2053                           fsr2h	equ	0xFDA
  2054                           fsr2l	equ	0xFD9
  2055                           status	equ	0xFD8
  2056                           
  2057 ;; *************** function _leitura_adc *****************
  2058 ;; Defined at:
  2059 ;;		line 76 in file "bibliotecas/adc.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;  canal           1    wreg     unsigned char 
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;  canal           1   31[COMRAM] unsigned char 
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  2   25[COMRAM] unsigned int 
  2066 ;; Registers used:
  2067 ;;		wreg, status,2, status,0
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2073 ;;      Params:         2       0       0       0       0       0       0       0       0
  2074 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2075 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2076 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2077 ;;Total ram usage:        7 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; Hardware stack levels required when called:    2
  2080 ;; This function calls:
  2081 ;;		Nothing
  2082 ;; This function is called by:
  2083 ;;		_leitura_continua_adc
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           	psect	text3
  2088  003008                     __ptext3:
  2089                           	opt stack 0
  2090  003008                     _leitura_adc:
  2091                           	opt stack 27
  2092                           
  2093                           ;incstack = 0
  2094                           ;leitura_adc@canal stored from wreg
  2095  003008  6E20               	movwf	leitura_adc@canal,c
  2096                           
  2097                           ;adc.c: 78: switch(canal)
  2098  00300A  D009               	goto	l169
  2099  00300C                     
  2100                           ;adc.c: 81: ADCON0 = 0x01;
  2101  00300C  0E01               	movlw	1
  2102  00300E  D005               	goto	L3
  2103  003010                     
  2104                           ;adc.c: 85: ADCON0 = 0x05;
  2105  003010  0E05               	movlw	5
  2106  003012  D003               	goto	L3
  2107  003014                     
  2108                           ;adc.c: 89: ADCON0 = 0x09;
  2109  003014  0E09               	movlw	9
  2110  003016  D001               	goto	L3
  2111  003018                     
  2112                           ;adc.c: 93: ADCON0 = 0x0D;
  2113  003018  0E0D               	movlw	13
  2114  00301A                     L3:
  2115  00301A  6EC2               	movwf	4034,c	;volatile
  2116                           
  2117                           ;adc.c: 96: }
  2118                           
  2119                           ;adc.c: 94: break;
  2120  00301C  D00D               	goto	l171
  2121  00301E                     l169:
  2122  00301E  5020               	movf	leitura_adc@canal,w,c
  2123                           
  2124                           ; Switch size 1, requested type "space"
  2125                           ; Number of cases is 4, Range of values is 0 to 3
  2126                           ; switch strategies available:
  2127                           ; Name         Instructions Cycles
  2128                           ; simple_byte           13     7 (average)
  2129                           ;	Chosen strategy is simple_byte
  2130  003020  0A00               	xorlw	0	; case 0
  2131  003022  B4D8               	btfsc	status,2,c
  2132  003024  D7F3               	goto	l170
  2133  003026  0A01               	xorlw	1	; case 1
  2134  003028  B4D8               	btfsc	status,2,c
  2135  00302A  D7F2               	goto	l172
  2136  00302C  0A03               	xorlw	3	; case 2
  2137  00302E  B4D8               	btfsc	status,2,c
  2138  003030  D7F1               	goto	l173
  2139  003032  0A01               	xorlw	1	; case 3
  2140  003034  B4D8               	btfsc	status,2,c
  2141  003036  D7F0               	goto	l174
  2142  003038                     l171:
  2143                           
  2144                           ;adc.c: 97: ADCON0bits.GO=1;
  2145  003038  82C2               	bsf	4034,1,c	;volatile
  2146  00303A  B2C2               	btfsc	4034,1,c	;volatile
  2147  00303C  D7FE               	goto	l176
  2148                           
  2149                           ;adc.c: 100: return ((((unsigned int)ADRESH)<<2)|(ADRESL>>6));
  2150  00303E  CFC3 F01C          	movff	4035,??_leitura_adc	;volatile
  2151  003042  0E06               	movlw	6
  2152  003044  6E1D               	movwf	(??_leitura_adc+1)& (0+255),c
  2153  003046                     u5465:
  2154  003046  90D8               	bcf	status,0,c
  2155  003048  321C               	rrcf	??_leitura_adc,f,c
  2156  00304A  2E1D               	decfsz	(??_leitura_adc+1)& (0+255),f,c
  2157  00304C  D7FC               	goto	u5465
  2158  00304E  501C               	movf	??_leitura_adc,w,c
  2159  003050  CFC4 F01E          	movff	4036,??_leitura_adc+2	;volatile
  2160  003054  6A1F               	clrf	(??_leitura_adc+3)& (0+255),c
  2161  003056  90D8               	bcf	status,0,c
  2162  003058  361E               	rlcf	??_leitura_adc+2,f,c
  2163  00305A  361F               	rlcf	??_leitura_adc+3,f,c
  2164  00305C  90D8               	bcf	status,0,c
  2165  00305E  361E               	rlcf	??_leitura_adc+2,f,c
  2166  003060  361F               	rlcf	??_leitura_adc+3,f,c
  2167  003062  101E               	iorwf	??_leitura_adc+2,w,c
  2168  003064  6E1A               	movwf	?_leitura_adc,c
  2169  003066  501F               	movf	??_leitura_adc+3,w,c
  2170  003068  6E1B               	movwf	?_leitura_adc+1,c
  2171  00306A  0012               	return	
  2172  00306C                     __end_of_leitura_adc:
  2173                           	opt stack 0
  2174                           tblptru	equ	0xFF8
  2175                           tblptrh	equ	0xFF7
  2176                           tblptrl	equ	0xFF6
  2177                           tablat	equ	0xFF5
  2178                           prodh	equ	0xFF4
  2179                           prodl	equ	0xFF3
  2180                           postinc0	equ	0xFEE
  2181                           wreg	equ	0xFE8
  2182                           postdec1	equ	0xFE5
  2183                           fsr1h	equ	0xFE2
  2184                           fsr1l	equ	0xFE1
  2185                           postinc2	equ	0xFDE
  2186                           postdec2	equ	0xFDD
  2187                           fsr2h	equ	0xFDA
  2188                           fsr2l	equ	0xFD9
  2189                           status	equ	0xFD8
  2190                           
  2191 ;; *************** function _leitura_chaves_sistema *****************
  2192 ;; Defined at:
  2193 ;;		line 47 in file "bibliotecas/chaves.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;		None
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;		None
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  1    wreg      void 
  2200 ;; Registers used:
  2201 ;;		wreg
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2207 ;;      Params:         0       0       0       0       0       0       0       0       0
  2208 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2209 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2210 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2211 ;;Total ram usage:        0 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    2
  2214 ;; This function calls:
  2215 ;;		Nothing
  2216 ;; This function is called by:
  2217 ;;		_main
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	text4
  2222  003240                     __ptext4:
  2223                           	opt stack 0
  2224  003240                     _leitura_chaves_sistema:
  2225                           	opt stack 28
  2226                           
  2227                           ;chaves.c: 49: info_chaves[0] = PORTCbits.RC0;
  2228                           
  2229                           ;incstack = 0
  2230  003240  0E00               	movlw	0
  2231  003242  B082               	btfsc	3970,0,c	;volatile
  2232  003244  0E01               	movlw	1
  2233  003246  0101               	movlb	1	; () banked
  2234  003248  6F6A               	movwf	_info_chaves& (0+255),b
  2235                           
  2236                           ;chaves.c: 50: info_chaves[1] = PORTCbits.RC1;
  2237  00324A  0E00               	movlw	0
  2238  00324C  B282               	btfsc	3970,1,c	;volatile
  2239  00324E  0E01               	movlw	1
  2240  003250  6F6B               	movwf	(_info_chaves+1)& (0+255),b
  2241                           
  2242                           ;chaves.c: 51: info_chaves[2] = PORTCbits.RC2;
  2243  003252  0E00               	movlw	0
  2244  003254  B482               	btfsc	3970,2,c	;volatile
  2245  003256  0E01               	movlw	1
  2246  003258  6F6C               	movwf	(_info_chaves+2)& (0+255),b
  2247                           
  2248                           ;chaves.c: 52: info_chaves[3] = PORTAbits.RA2;
  2249  00325A  0E00               	movlw	0
  2250  00325C  B480               	btfsc	3968,2,c	;volatile
  2251  00325E  0E01               	movlw	1
  2252  003260  6F6D               	movwf	(_info_chaves+3)& (0+255),b
  2253                           
  2254                           ;chaves.c: 53: info_chaves[4] = PORTAbits.RA5;
  2255  003262  0E00               	movlw	0
  2256  003264  BA80               	btfsc	3968,5,c	;volatile
  2257  003266  0E01               	movlw	1
  2258  003268  6F6E               	movwf	(_info_chaves+4)& (0+255),b
  2259                           
  2260                           ;chaves.c: 54: info_chaves[5] = PORTEbits.RE0;
  2261  00326A  0E00               	movlw	0
  2262  00326C  B084               	btfsc	3972,0,c	;volatile
  2263  00326E  0E01               	movlw	1
  2264  003270  6F6F               	movwf	(_info_chaves+5)& (0+255),b
  2265                           
  2266                           ;chaves.c: 55: info_chaves[6] = PORTEbits.RE1;
  2267  003272  0E00               	movlw	0
  2268  003274  B284               	btfsc	3972,1,c	;volatile
  2269  003276  0E01               	movlw	1
  2270  003278  6F70               	movwf	(_info_chaves+6)& (0+255),b
  2271                           
  2272                           ; BSR set to: 1
  2273  00327A  0012               	return		;funcret
  2274  00327C                     __end_of_leitura_chaves_sistema:
  2275                           	opt stack 0
  2276                           tblptru	equ	0xFF8
  2277                           tblptrh	equ	0xFF7
  2278                           tblptrl	equ	0xFF6
  2279                           tablat	equ	0xFF5
  2280                           prodh	equ	0xFF4
  2281                           prodl	equ	0xFF3
  2282                           postinc0	equ	0xFEE
  2283                           wreg	equ	0xFE8
  2284                           postdec1	equ	0xFE5
  2285                           fsr1h	equ	0xFE2
  2286                           fsr1l	equ	0xFE1
  2287                           postinc2	equ	0xFDE
  2288                           postdec2	equ	0xFDD
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _init_lcd *****************
  2294 ;; Defined at:
  2295 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2309 ;;      Params:         0       0       0       0       0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2311 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2312 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2313 ;;Total ram usage:        1 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    4
  2316 ;; This function calls:
  2317 ;;		_delay
  2318 ;;		_escreve_cmd_lcd
  2319 ;; This function is called by:
  2320 ;;		_main
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text5
  2325  002AD0                     __ptext5:
  2326                           	opt stack 0
  2327  002AD0                     _init_lcd:
  2328                           	opt stack 26
  2329                           
  2330                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2331                           
  2332                           ; BSR set to: 1
  2333                           ;incstack = 0
  2334  002AD0  9495               	bcf	3989,2,c	;volatile
  2335                           
  2336                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2337  002AD2  9295               	bcf	3989,1,c	;volatile
  2338                           
  2339                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2340  002AD4  9095               	bcf	3989,0,c	;volatile
  2341                           
  2342                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2343  002AD6  9895               	bcf	3989,4,c	;volatile
  2344                           
  2345                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2346  002AD8  9A95               	bcf	3989,5,c	;volatile
  2347                           
  2348                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2349  002ADA  9C95               	bcf	3989,6,c	;volatile
  2350                           
  2351                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2352  002ADC  9E95               	bcf	3989,7,c	;volatile
  2353                           
  2354                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2355  002ADE  9483               	bcf	3971,2,c	;volatile
  2356                           
  2357                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2358  002AE0  9283               	bcf	3971,1,c	;volatile
  2359                           
  2360                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2361  002AE2  9083               	bcf	3971,0,c	;volatile
  2362                           
  2363                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2364  002AE4  9E83               	bcf	3971,7,c	;volatile
  2365                           
  2366                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2367  002AE6  9C83               	bcf	3971,6,c	;volatile
  2368                           
  2369                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2370  002AE8  8A83               	bsf	3971,5,c	;volatile
  2371                           
  2372                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2373  002AEA  8883               	bsf	3971,4,c	;volatile
  2374                           
  2375                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2376  002AEC  0EEA               	movlw	234
  2377  002AEE  6E1D               	movwf	??_init_lcd& (0+255),c
  2378  002AF0  0EC3               	movlw	195
  2379  002AF2                     u9287:
  2380  002AF2  2EE8               	decfsz	wreg,f,c
  2381  002AF4  D7FE               	bra	u9287
  2382  002AF6  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2383  002AF8  D7FC               	bra	u9287
  2384  002AFA  F000               	nop	
  2385                           
  2386                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2387  002AFC  8083               	bsf	3971,0,c	;volatile
  2388                           
  2389                           ;display_lcd.c: 108: delay();
  2390  002AFE  ECAD  F019         	call	_delay	;wreg free
  2391                           
  2392                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2393  002B02  9083               	bcf	3971,0,c	;volatile
  2394                           
  2395                           ;display_lcd.c: 110: delay();
  2396  002B04  ECAD  F019         	call	_delay	;wreg free
  2397                           
  2398                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2399  002B08  0E4E               	movlw	78
  2400  002B0A  6E1D               	movwf	??_init_lcd& (0+255),c
  2401  002B0C  0EEB               	movlw	235
  2402  002B0E                     u9297:
  2403  002B0E  2EE8               	decfsz	wreg,f,c
  2404  002B10  D7FE               	bra	u9297
  2405  002B12  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2406  002B14  D7FC               	bra	u9297
  2407  002B16  F000               	nop	
  2408                           
  2409                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2410  002B18  8083               	bsf	3971,0,c	;volatile
  2411                           
  2412                           ;display_lcd.c: 119: delay();
  2413  002B1A  ECAD  F019         	call	_delay	;wreg free
  2414                           
  2415                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2416  002B1E  9083               	bcf	3971,0,c	;volatile
  2417                           
  2418                           ;display_lcd.c: 121: delay();
  2419  002B20  ECAD  F019         	call	_delay	;wreg free
  2420                           
  2421                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2422  002B24  0E4E               	movlw	78
  2423  002B26  6E1D               	movwf	??_init_lcd& (0+255),c
  2424  002B28  0EEB               	movlw	235
  2425  002B2A                     u9307:
  2426  002B2A  2EE8               	decfsz	wreg,f,c
  2427  002B2C  D7FE               	bra	u9307
  2428  002B2E  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2429  002B30  D7FC               	bra	u9307
  2430  002B32  F000               	nop	
  2431                           
  2432                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2433  002B34  8083               	bsf	3971,0,c	;volatile
  2434                           
  2435                           ;display_lcd.c: 130: delay();
  2436  002B36  ECAD  F019         	call	_delay	;wreg free
  2437                           
  2438                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2439  002B3A  9083               	bcf	3971,0,c	;volatile
  2440                           
  2441                           ;display_lcd.c: 132: delay();
  2442  002B3C  ECAD  F019         	call	_delay	;wreg free
  2443                           
  2444                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2445  002B40  9E83               	bcf	3971,7,c	;volatile
  2446                           
  2447                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2448  002B42  9C83               	bcf	3971,6,c	;volatile
  2449                           
  2450                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2451  002B44  8A83               	bsf	3971,5,c	;volatile
  2452                           
  2453                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2454  002B46  9883               	bcf	3971,4,c	;volatile
  2455                           
  2456                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2457  002B48  8083               	bsf	3971,0,c	;volatile
  2458                           
  2459                           ;display_lcd.c: 143: delay();
  2460  002B4A  ECAD  F019         	call	_delay	;wreg free
  2461                           
  2462                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2463  002B4E  9083               	bcf	3971,0,c	;volatile
  2464                           
  2465                           ;display_lcd.c: 145: delay();
  2466  002B50  ECAD  F019         	call	_delay	;wreg free
  2467                           
  2468                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2469  002B54  0E28               	movlw	40
  2470  002B56  ECB7  F015         	call	_escreve_cmd_lcd
  2471                           
  2472                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2473  002B5A  0E06               	movlw	6
  2474  002B5C  ECB7  F015         	call	_escreve_cmd_lcd
  2475                           
  2476                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2477  002B60  0E0E               	movlw	14
  2478  002B62  ECB7  F015         	call	_escreve_cmd_lcd
  2479                           
  2480                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2481  002B66  0E01               	movlw	1
  2482  002B68  ECB7  F015         	call	_escreve_cmd_lcd
  2483  002B6C  0012               	return		;funcret
  2484  002B6E                     __end_of_init_lcd:
  2485                           	opt stack 0
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           prodh	equ	0xFF4
  2491                           prodl	equ	0xFF3
  2492                           postinc0	equ	0xFEE
  2493                           wreg	equ	0xFE8
  2494                           postdec1	equ	0xFE5
  2495                           fsr1h	equ	0xFE2
  2496                           fsr1l	equ	0xFE1
  2497                           postinc2	equ	0xFDE
  2498                           postdec2	equ	0xFDD
  2499                           fsr2h	equ	0xFDA
  2500                           fsr2l	equ	0xFD9
  2501                           status	equ	0xFD8
  2502                           
  2503 ;; *************** function _init_hardware *****************
  2504 ;; Defined at:
  2505 ;;		line 55 in file "bibliotecas/hardware.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;		None
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;		None
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      void 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2519 ;;      Params:         0       0       0       0       0       0       0       0       0
  2520 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2521 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2522 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2523 ;;Total ram usage:        0 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    4
  2526 ;; This function calls:
  2527 ;;		_config_timer_dois
  2528 ;;		_config_timer_zero
  2529 ;;		_init_interrupt
  2530 ;;		_init_oscilador
  2531 ;;		_init_ports
  2532 ;; This function is called by:
  2533 ;;		_main
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           	psect	text6
  2538  003424                     __ptext6:
  2539                           	opt stack 0
  2540  003424                     _init_hardware:
  2541                           	opt stack 26
  2542                           
  2543                           ;hardware.c: 58: init_oscilador();
  2544                           
  2545                           ;incstack = 0
  2546  003424  EC69  F01A         	call	_init_oscilador	;wreg free
  2547                           
  2548                           ;hardware.c: 61: init_ports();
  2549  003428  EC06  F01A         	call	_init_ports	;wreg free
  2550                           
  2551                           ;hardware.c: 64: config_timer_zero();
  2552  00342C  ECED  F019         	call	_config_timer_zero	;wreg free
  2553                           
  2554                           ;hardware.c: 67: config_timer_dois();
  2555  003430  EC52  F01A         	call	_config_timer_dois	;wreg free
  2556                           
  2557                           ;hardware.c: 70: init_interrupt();
  2558  003434  EC27  F01A         	call	_init_interrupt	;wreg free
  2559  003438  0012               	return		;funcret
  2560  00343A                     __end_of_init_hardware:
  2561                           	opt stack 0
  2562                           tblptru	equ	0xFF8
  2563                           tblptrh	equ	0xFF7
  2564                           tblptrl	equ	0xFF6
  2565                           tablat	equ	0xFF5
  2566                           prodh	equ	0xFF4
  2567                           prodl	equ	0xFF3
  2568                           postinc0	equ	0xFEE
  2569                           wreg	equ	0xFE8
  2570                           postdec1	equ	0xFE5
  2571                           fsr1h	equ	0xFE2
  2572                           fsr1l	equ	0xFE1
  2573                           postinc2	equ	0xFDE
  2574                           postdec2	equ	0xFDD
  2575                           fsr2h	equ	0xFDA
  2576                           fsr2l	equ	0xFD9
  2577                           status	equ	0xFD8
  2578                           
  2579 ;; *************** function _init_ports *****************
  2580 ;; Defined at:
  2581 ;;		line 154 in file "bibliotecas/hardware.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		wreg, status,2
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2595 ;;      Params:         0       0       0       0       0       0       0       0       0
  2596 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2597 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2598 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2599 ;;Total ram usage:        0 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    2
  2602 ;; This function calls:
  2603 ;;		Nothing
  2604 ;; This function is called by:
  2605 ;;		_init_hardware
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text7
  2610  00340C                     __ptext7:
  2611                           	opt stack 0
  2612  00340C                     _init_ports:
  2613                           	opt stack 27
  2614                           
  2615                           ;hardware.c: 156: TRISB = 0b00000001;
  2616                           
  2617                           ;incstack = 0
  2618  00340C  0E01               	movlw	1
  2619  00340E  6E93               	movwf	3987,c	;volatile
  2620                           
  2621                           ;hardware.c: 157: LATB = 0xFF;
  2622  003410  688A               	setf	3978,c	;volatile
  2623                           
  2624                           ;hardware.c: 158: TRISD = 0x00;
  2625  003412  0E00               	movlw	0
  2626  003414  6E95               	movwf	3989,c	;volatile
  2627                           
  2628                           ;hardware.c: 159: TRISA = 0b00000111;
  2629  003416  0E07               	movlw	7
  2630  003418  6E92               	movwf	3986,c	;volatile
  2631                           
  2632                           ;hardware.c: 160: TRISC = 0x01111111;
  2633  00341A  0E11               	movlw	17
  2634  00341C  6E94               	movwf	3988,c	;volatile
  2635                           
  2636                           ;hardware.c: 161: TRISE = 0b00000011;
  2637  00341E  0E03               	movlw	3
  2638  003420  6E96               	movwf	3990,c	;volatile
  2639  003422  0012               	return		;funcret
  2640  003424                     __end_of_init_ports:
  2641                           	opt stack 0
  2642                           tblptru	equ	0xFF8
  2643                           tblptrh	equ	0xFF7
  2644                           tblptrl	equ	0xFF6
  2645                           tablat	equ	0xFF5
  2646                           prodh	equ	0xFF4
  2647                           prodl	equ	0xFF3
  2648                           postinc0	equ	0xFEE
  2649                           wreg	equ	0xFE8
  2650                           postdec1	equ	0xFE5
  2651                           fsr1h	equ	0xFE2
  2652                           fsr1l	equ	0xFE1
  2653                           postinc2	equ	0xFDE
  2654                           postdec2	equ	0xFDD
  2655                           fsr2h	equ	0xFDA
  2656                           fsr2l	equ	0xFD9
  2657                           status	equ	0xFD8
  2658                           
  2659 ;; *************** function _init_oscilador *****************
  2660 ;; Defined at:
  2661 ;;		line 171 in file "bibliotecas/hardware.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;		None
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;		None
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		None
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2675 ;;      Params:         0       0       0       0       0       0       0       0       0
  2676 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2677 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2678 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2679 ;;Total ram usage:        0 bytes
  2680 ;; Hardware stack levels used:    1
  2681 ;; Hardware stack levels required when called:    2
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_init_hardware
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	text8
  2690  0034D2                     __ptext8:
  2691                           	opt stack 0
  2692  0034D2                     _init_oscilador:
  2693                           	opt stack 27
  2694                           
  2695                           ;hardware.c: 174: OSCCONbits.IRCF0 = 1;
  2696                           
  2697                           ;incstack = 0
  2698  0034D2  88D3               	bsf	4051,4,c	;volatile
  2699                           
  2700                           ;hardware.c: 175: OSCCONbits.IRCF1 = 1;
  2701  0034D4  8AD3               	bsf	4051,5,c	;volatile
  2702                           
  2703                           ;hardware.c: 176: OSCCONbits.IRCF2 = 1;
  2704  0034D6  8CD3               	bsf	4051,6,c	;volatile
  2705  0034D8  0012               	return		;funcret
  2706  0034DA                     __end_of_init_oscilador:
  2707                           	opt stack 0
  2708                           tblptru	equ	0xFF8
  2709                           tblptrh	equ	0xFF7
  2710                           tblptrl	equ	0xFF6
  2711                           tablat	equ	0xFF5
  2712                           prodh	equ	0xFF4
  2713                           prodl	equ	0xFF3
  2714                           postinc0	equ	0xFEE
  2715                           wreg	equ	0xFE8
  2716                           postdec1	equ	0xFE5
  2717                           fsr1h	equ	0xFE2
  2718                           fsr1l	equ	0xFE1
  2719                           postinc2	equ	0xFDE
  2720                           postdec2	equ	0xFDD
  2721                           fsr2h	equ	0xFDA
  2722                           fsr2l	equ	0xFD9
  2723                           status	equ	0xFD8
  2724                           
  2725 ;; *************** function _init_interrupt *****************
  2726 ;; Defined at:
  2727 ;;		line 98 in file "bibliotecas/hardware.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;		None
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;		None
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2741 ;;      Params:         0       0       0       0       0       0       0       0       0
  2742 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2743 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2744 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2745 ;;Total ram usage:        0 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    2
  2748 ;; This function calls:
  2749 ;;		Nothing
  2750 ;; This function is called by:
  2751 ;;		_init_hardware
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text9
  2756  00344E                     __ptext9:
  2757                           	opt stack 0
  2758  00344E                     _init_interrupt:
  2759                           	opt stack 27
  2760                           
  2761                           ;hardware.c: 100: INTCON = 0b11110000;
  2762                           
  2763                           ;incstack = 0
  2764  00344E  0EF0               	movlw	240
  2765  003450  6EF2               	movwf	intcon,c	;volatile
  2766                           
  2767                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2768  003452  0E00               	movlw	0
  2769  003454  6EF1               	movwf	intcon2,c	;volatile
  2770                           
  2771                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2772  003456  0E00               	movlw	0
  2773  003458  6EF0               	movwf	intcon3,c	;volatile
  2774                           
  2775                           ;hardware.c: 104: PIE1 = 0b00100000;
  2776  00345A  0E20               	movlw	32
  2777  00345C  6E9D               	movwf	3997,c	;volatile
  2778  00345E  0012               	return		;funcret
  2779  003460                     __end_of_init_interrupt:
  2780                           	opt stack 0
  2781                           tblptru	equ	0xFF8
  2782                           tblptrh	equ	0xFF7
  2783                           tblptrl	equ	0xFF6
  2784                           tablat	equ	0xFF5
  2785                           prodh	equ	0xFF4
  2786                           prodl	equ	0xFF3
  2787                           intcon	equ	0xFF2
  2788                           intcon2	equ	0xFF1
  2789                           intcon3	equ	0xFF0
  2790                           postinc0	equ	0xFEE
  2791                           wreg	equ	0xFE8
  2792                           postdec1	equ	0xFE5
  2793                           fsr1h	equ	0xFE2
  2794                           fsr1l	equ	0xFE1
  2795                           postinc2	equ	0xFDE
  2796                           postdec2	equ	0xFDD
  2797                           fsr2h	equ	0xFDA
  2798                           fsr2l	equ	0xFD9
  2799                           status	equ	0xFD8
  2800                           
  2801 ;; *************** function _config_timer_zero *****************
  2802 ;; Defined at:
  2803 ;;		line 83 in file "bibliotecas/hardware.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;		None
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;		None
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  1    wreg      void 
  2810 ;; Registers used:
  2811 ;;		wreg, status,2, cstack
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2817 ;;      Params:         0       0       0       0       0       0       0       0       0
  2818 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2819 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2820 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2821 ;;Total ram usage:        0 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    3
  2824 ;; This function calls:
  2825 ;;		_write_timer_zero
  2826 ;; This function is called by:
  2827 ;;		_init_hardware
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text10
  2832  0033DA                     __ptext10:
  2833                           	opt stack 0
  2834  0033DA                     _config_timer_zero:
  2835                           	opt stack 26
  2836                           
  2837                           ;hardware.c: 85: T0CON = 0b11000011;
  2838                           
  2839                           ;incstack = 0
  2840  0033DA  0EC3               	movlw	195
  2841  0033DC  6ED5               	movwf	4053,c	;volatile
  2842                           
  2843                           ;hardware.c: 86: SPPCON = 0b00000000;
  2844  0033DE  0E00               	movlw	0
  2845  0033E0  6E65               	movwf	3941,c	;volatile
  2846                           
  2847                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2848  0033E2  0E00               	movlw	0
  2849  0033E4  6E63               	movwf	3939,c	;volatile
  2850                           
  2851                           ;hardware.c: 88: write_timer_zero(0x0083);
  2852  0033E6  0E00               	movlw	0
  2853  0033E8  6E1B               	movwf	write_timer_zero@timer0+1,c
  2854  0033EA  0E83               	movlw	131
  2855  0033EC  6E1A               	movwf	write_timer_zero@timer0,c
  2856  0033EE  EC30  F01A         	call	_write_timer_zero	;wreg free
  2857  0033F2  0012               	return		;funcret
  2858  0033F4                     __end_of_config_timer_zero:
  2859                           	opt stack 0
  2860                           tblptru	equ	0xFF8
  2861                           tblptrh	equ	0xFF7
  2862                           tblptrl	equ	0xFF6
  2863                           tablat	equ	0xFF5
  2864                           prodh	equ	0xFF4
  2865                           prodl	equ	0xFF3
  2866                           intcon	equ	0xFF2
  2867                           intcon2	equ	0xFF1
  2868                           intcon3	equ	0xFF0
  2869                           postinc0	equ	0xFEE
  2870                           wreg	equ	0xFE8
  2871                           postdec1	equ	0xFE5
  2872                           fsr1h	equ	0xFE2
  2873                           fsr1l	equ	0xFE1
  2874                           postinc2	equ	0xFDE
  2875                           postdec2	equ	0xFDD
  2876                           fsr2h	equ	0xFDA
  2877                           fsr2l	equ	0xFD9
  2878                           status	equ	0xFD8
  2879                           
  2880 ;; *************** function _write_timer_zero *****************
  2881 ;; Defined at:
  2882 ;;		line 138 in file "bibliotecas/hardware.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  timer0          2   25[COMRAM] unsigned int 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  timer           2   27[COMRAM] struct Timers
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  1    wreg      void 
  2889 ;; Registers used:
  2890 ;;		None
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2896 ;;      Params:         2       0       0       0       0       0       0       0       0
  2897 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2898 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2899 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2900 ;;Total ram usage:        4 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    2
  2903 ;; This function calls:
  2904 ;;		Nothing
  2905 ;; This function is called by:
  2906 ;;		_config_timer_zero
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text11
  2911  003460                     __ptext11:
  2912                           	opt stack 0
  2913  003460                     _write_timer_zero:
  2914                           	opt stack 26
  2915                           
  2916                           ;hardware.c: 140: union Timers timer;
  2917                           ;hardware.c: 142: timer.lt = timer0;
  2918                           
  2919                           ;incstack = 0
  2920  003460  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2921  003464  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2922                           
  2923                           ;hardware.c: 144: TMR0H = timer.bt[1];
  2924  003468  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2925                           
  2926                           ;hardware.c: 145: TMR0L = timer.bt[0];
  2927  00346C  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2928  003470  0012               	return		;funcret
  2929  003472                     __end_of_write_timer_zero:
  2930                           	opt stack 0
  2931                           tblptru	equ	0xFF8
  2932                           tblptrh	equ	0xFF7
  2933                           tblptrl	equ	0xFF6
  2934                           tablat	equ	0xFF5
  2935                           prodh	equ	0xFF4
  2936                           prodl	equ	0xFF3
  2937                           intcon	equ	0xFF2
  2938                           intcon2	equ	0xFF1
  2939                           intcon3	equ	0xFF0
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           postdec1	equ	0xFE5
  2943                           fsr1h	equ	0xFE2
  2944                           fsr1l	equ	0xFE1
  2945                           postinc2	equ	0xFDE
  2946                           postdec2	equ	0xFDD
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _config_timer_dois *****************
  2952 ;; Defined at:
  2953 ;;		line 200 in file "bibliotecas/hardware.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;		None
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;		None
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  1    wreg      void 
  2960 ;; Registers used:
  2961 ;;		wreg, status,2
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2967 ;;      Params:         0       0       0       0       0       0       0       0       0
  2968 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2969 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2970 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2971 ;;Total ram usage:        0 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    2
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_init_hardware
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text12
  2982  0034A4                     __ptext12:
  2983                           	opt stack 0
  2984  0034A4                     _config_timer_dois:
  2985                           	opt stack 27
  2986                           
  2987                           ;hardware.c: 202: T2CON = 0b00000100;
  2988                           
  2989                           ;incstack = 0
  2990  0034A4  0E04               	movlw	4
  2991  0034A6  6ECA               	movwf	4042,c	;volatile
  2992                           
  2993                           ;hardware.c: 203: TMR2 = 0;
  2994  0034A8  0E00               	movlw	0
  2995  0034AA  6ECC               	movwf	4044,c	;volatile
  2996                           
  2997                           ;hardware.c: 204: PR2 = 0xFF;
  2998  0034AC  68CB               	setf	4043,c	;volatile
  2999  0034AE  0012               	return		;funcret
  3000  0034B0                     __end_of_config_timer_dois:
  3001                           	opt stack 0
  3002                           tblptru	equ	0xFF8
  3003                           tblptrh	equ	0xFF7
  3004                           tblptrl	equ	0xFF6
  3005                           tablat	equ	0xFF5
  3006                           prodh	equ	0xFF4
  3007                           prodl	equ	0xFF3
  3008                           intcon	equ	0xFF2
  3009                           intcon2	equ	0xFF1
  3010                           intcon3	equ	0xFF0
  3011                           postinc0	equ	0xFEE
  3012                           wreg	equ	0xFE8
  3013                           postdec1	equ	0xFE5
  3014                           fsr1h	equ	0xFE2
  3015                           fsr1l	equ	0xFE1
  3016                           postinc2	equ	0xFDE
  3017                           postdec2	equ	0xFDD
  3018                           fsr2h	equ	0xFDA
  3019                           fsr2l	equ	0xFD9
  3020                           status	equ	0xFD8
  3021                           
  3022 ;; *************** function _inicializa_uart *****************
  3023 ;; Defined at:
  3024 ;;		line 206 in file "bibliotecas/uart.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;		None
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;		None
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		wreg, status,2, status,0, cstack
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3038 ;;      Params:         0       0       0       0       0       0       0       0       0
  3039 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3040 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3041 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3042 ;;Total ram usage:        0 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    4
  3045 ;; This function calls:
  3046 ;;		_configura_baudrate_uart
  3047 ;; This function is called by:
  3048 ;;		_main
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text13
  3053  00337E                     __ptext13:
  3054                           	opt stack 0
  3055  00337E                     _inicializa_uart:
  3056                           	opt stack 26
  3057                           
  3058                           ;uart.c: 208: TRISCbits.RC6 = 0;
  3059                           
  3060                           ;incstack = 0
  3061  00337E  9C94               	bcf	3988,6,c	;volatile
  3062                           
  3063                           ;uart.c: 209: TRISCbits.RC7 = 0;
  3064  003380  9E94               	bcf	3988,7,c	;volatile
  3065                           
  3066                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  3067  003382  0E80               	movlw	128
  3068  003384  6E28               	movwf	configura_baudrate_uart@baudrate,c
  3069  003386  0E25               	movlw	37
  3070  003388  6E29               	movwf	configura_baudrate_uart@baudrate+1,c
  3071  00338A  0E00               	movlw	0
  3072  00338C  6E2A               	movwf	configura_baudrate_uart@baudrate+2,c
  3073  00338E  0E00               	movlw	0
  3074  003390  6E2B               	movwf	configura_baudrate_uart@baudrate+3,c
  3075  003392  EC8D  F010         	call	_configura_baudrate_uart	;wreg free
  3076                           
  3077                           ;uart.c: 213: TXSTA = 0x20;
  3078  003396  0E20               	movlw	32
  3079  003398  6EAC               	movwf	4012,c	;volatile
  3080                           
  3081                           ;uart.c: 214: RCSTA = 0x90;
  3082  00339A  0E90               	movlw	144
  3083  00339C  6EAB               	movwf	4011,c	;volatile
  3084  00339E  0012               	return		;funcret
  3085  0033A0                     __end_of_inicializa_uart:
  3086                           	opt stack 0
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           prodh	equ	0xFF4
  3092                           prodl	equ	0xFF3
  3093                           intcon	equ	0xFF2
  3094                           intcon2	equ	0xFF1
  3095                           intcon3	equ	0xFF0
  3096                           postinc0	equ	0xFEE
  3097                           wreg	equ	0xFE8
  3098                           postdec1	equ	0xFE5
  3099                           fsr1h	equ	0xFE2
  3100                           fsr1l	equ	0xFE1
  3101                           postinc2	equ	0xFDE
  3102                           postdec2	equ	0xFDD
  3103                           fsr2h	equ	0xFDA
  3104                           fsr2l	equ	0xFD9
  3105                           status	equ	0xFD8
  3106                           
  3107 ;; *************** function _configura_baudrate_uart *****************
  3108 ;; Defined at:
  3109 ;;		line 50 in file "bibliotecas/uart.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;  baudrate        4   39[COMRAM] const long 
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;  x               2    8[BANK0 ] unsigned int 
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  1    wreg      unsigned char 
  3116 ;; Registers used:
  3117 ;;		wreg, status,2, status,0, cstack
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3123 ;;      Params:         4       0       0       0       0       0       0       0       0
  3124 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3125 ;;      Temps:          0       8       0       0       0       0       0       0       0
  3126 ;;      Totals:         4      10       0       0       0       0       0       0       0
  3127 ;;Total ram usage:       14 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    3
  3130 ;; This function calls:
  3131 ;;		___aldiv
  3132 ;; This function is called by:
  3133 ;;		_inicializa_uart
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text14
  3138  00211A                     __ptext14:
  3139                           	opt stack 0
  3140  00211A                     _configura_baudrate_uart:
  3141                           	opt stack 26
  3142                           
  3143                           ;uart.c: 52: unsigned int x;
  3144                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  3145                           
  3146                           ;incstack = 0
  3147  00211A  C028  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  3148  00211E  C029  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  3149  002122  C02A  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  3150  002126  C02B  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  3151  00212A  0E06               	movlw	6
  3152  00212C                     u8585:
  3153  00212C  90D8               	bcf	status,0,c
  3154  00212E  0100               	movlb	0	; () banked
  3155  002130  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  3156  002132  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3157  002134  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3158  002136  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3159  002138  2EE8               	decfsz	wreg,f,c
  3160  00213A  D7F8               	goto	u8585
  3161  00213C  1F60               	comf	??_configura_baudrate_uart& (0+255),f,b
  3162  00213E  1F61               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3163  002140  1F62               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3164  002142  1F63               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3165  002144  2B60               	incf	??_configura_baudrate_uart& (0+255),f,b
  3166  002146  0E00               	movlw	0
  3167  002148  2361               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  3168  00214A  2362               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  3169  00214C  2363               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  3170  00214E  0E00               	movlw	0
  3171  002150  2560               	addwf	??_configura_baudrate_uart& (0+255),w,b
  3172  002152  6E1A               	movwf	___aldiv@dividend,c
  3173  002154  0E6C               	movlw	108
  3174  002156  2161               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  3175  002158  6E1B               	movwf	___aldiv@dividend+1,c
  3176  00215A  0EDC               	movlw	220
  3177  00215C  2162               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  3178  00215E  6E1C               	movwf	___aldiv@dividend+2,c
  3179  002160  0E02               	movlw	2
  3180  002162  2163               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  3181  002164  6E1D               	movwf	___aldiv@dividend+3,c
  3182  002166  C028  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  3183  00216A  C029  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  3184  00216E  C02A  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  3185  002172  C02B  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  3186  002176  0E06               	movlw	6
  3187  002178                     u8595:
  3188  002178  90D8               	bcf	status,0,c
  3189  00217A  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  3190  00217C  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  3191  00217E  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  3192  002180  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  3193  002182  2EE8               	decfsz	wreg,f,c
  3194  002184  D7F9               	goto	u8595
  3195  002186  C064  F01E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  3196  00218A  C065  F01F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  3197  00218E  C066  F020         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  3198  002192  C067  F021         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  3199  002196  ECE9  F013         	call	___aldiv	;wreg free
  3200  00219A  C01A  F068         	movff	?___aldiv,configura_baudrate_uart@x
  3201  00219E  C01B  F069         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  3202                           
  3203                           ;uart.c: 55: if(x > 255)
  3204  0021A2  0100               	movlb	0	; () banked
  3205  0021A4  0569               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  3206  0021A6  A0D8               	btfss	status,0,c
  3207  0021A8  D044               	goto	l915
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;uart.c: 56: {
  3211                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  3212  0021AA  C028  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  3213  0021AE  C029  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  3214  0021B2  C02A  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  3215  0021B6  C02B  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  3216  0021BA  0E04               	movlw	4
  3217  0021BC                     u8615:
  3218  0021BC  90D8               	bcf	status,0,c
  3219  0021BE  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  3220  0021C0  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3221  0021C2  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3222  0021C4  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3223  0021C6  2EE8               	decfsz	wreg,f,c
  3224  0021C8  D7F9               	goto	u8615
  3225  0021CA  1F60               	comf	??_configura_baudrate_uart& (0+255),f,b
  3226  0021CC  1F61               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  3227  0021CE  1F62               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  3228  0021D0  1F63               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  3229  0021D2  2B60               	incf	??_configura_baudrate_uart& (0+255),f,b
  3230  0021D4  0E00               	movlw	0
  3231  0021D6  2361               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  3232  0021D8  2362               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  3233  0021DA  2363               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  3234  0021DC  0E00               	movlw	0
  3235  0021DE  2560               	addwf	??_configura_baudrate_uart& (0+255),w,b
  3236  0021E0  6E1A               	movwf	___aldiv@dividend,c
  3237  0021E2  0E6C               	movlw	108
  3238  0021E4  2161               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  3239  0021E6  6E1B               	movwf	___aldiv@dividend+1,c
  3240  0021E8  0EDC               	movlw	220
  3241  0021EA  2162               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  3242  0021EC  6E1C               	movwf	___aldiv@dividend+2,c
  3243  0021EE  0E02               	movlw	2
  3244  0021F0  2163               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  3245  0021F2  6E1D               	movwf	___aldiv@dividend+3,c
  3246  0021F4  C028  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  3247  0021F8  C029  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  3248  0021FC  C02A  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  3249  002200  C02B  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  3250  002204  0E04               	movlw	4
  3251  002206                     u8625:
  3252  002206  90D8               	bcf	status,0,c
  3253  002208  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  3254  00220A  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  3255  00220C  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  3256  00220E  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  3257  002210  2EE8               	decfsz	wreg,f,c
  3258  002212  D7F9               	goto	u8625
  3259  002214  C064  F01E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  3260  002218  C065  F01F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  3261  00221C  C066  F020         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  3262  002220  C067  F021         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  3263  002224  ECE9  F013         	call	___aldiv	;wreg free
  3264  002228  C01A  F068         	movff	?___aldiv,configura_baudrate_uart@x
  3265  00222C  C01B  F069         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  3266                           
  3267                           ;uart.c: 58: BRGH = 1;
  3268  002230  84AC               	bsf	4012,2,c	;volatile
  3269  002232                     l915:
  3270                           
  3271                           ;uart.c: 59: }
  3272                           ;uart.c: 60: if(x < 256)
  3273  002232  0100               	movlb	0	; () banked
  3274  002234  0569               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  3275  002236  B0D8               	btfsc	status,0,c
  3276  002238  0012               	return	
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;uart.c: 61: {
  3280                           ;uart.c: 62: SPBRG = x;
  3281  00223A  C068  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  3282                           
  3283                           ;uart.c: 63: SYNC = 0;
  3284  00223E  98AC               	bcf	4012,4,c	;volatile
  3285                           
  3286                           ;uart.c: 64: SPEN = 1;
  3287  002240  8EAB               	bsf	4011,7,c	;volatile
  3288                           
  3289                           ;uart.c: 65: TRISCbits.RC7 = 1;
  3290  002242  8E94               	bsf	3988,7,c	;volatile
  3291                           
  3292                           ;uart.c: 66: TRISCbits.RC6 = 1;
  3293  002244  8C94               	bsf	3988,6,c	;volatile
  3294                           
  3295                           ;uart.c: 67: CREN = 1;
  3296  002246  88AB               	bsf	4011,4,c	;volatile
  3297                           
  3298                           ;uart.c: 68: TXEN = 1;
  3299  002248  8AAC               	bsf	4012,5,c	;volatile
  3300                           
  3301                           ;uart.c: 70: return (1);
  3302                           ;	Return value of _configura_baudrate_uart is never used
  3303  00224A  0012               	return	
  3304  00224C                     __end_of_configura_baudrate_uart:
  3305                           	opt stack 0
  3306                           tblptru	equ	0xFF8
  3307                           tblptrh	equ	0xFF7
  3308                           tblptrl	equ	0xFF6
  3309                           tablat	equ	0xFF5
  3310                           prodh	equ	0xFF4
  3311                           prodl	equ	0xFF3
  3312                           intcon	equ	0xFF2
  3313                           intcon2	equ	0xFF1
  3314                           intcon3	equ	0xFF0
  3315                           postinc0	equ	0xFEE
  3316                           wreg	equ	0xFE8
  3317                           postdec1	equ	0xFE5
  3318                           fsr1h	equ	0xFE2
  3319                           fsr1l	equ	0xFE1
  3320                           postinc2	equ	0xFDE
  3321                           postdec2	equ	0xFDD
  3322                           fsr2h	equ	0xFDA
  3323                           fsr2l	equ	0xFD9
  3324                           status	equ	0xFD8
  3325                           
  3326 ;; *************** function ___aldiv *****************
  3327 ;; Defined at:
  3328 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;  dividend        4   25[COMRAM] long 
  3331 ;;  divisor         4   29[COMRAM] long 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;  quotient        4   35[COMRAM] long 
  3334 ;;  sign            1   34[COMRAM] unsigned char 
  3335 ;;  counter         1   33[COMRAM] unsigned char 
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  4   25[COMRAM] long 
  3338 ;; Registers used:
  3339 ;;		wreg, status,2, status,0
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3345 ;;      Params:         8       0       0       0       0       0       0       0       0
  3346 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3347 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3348 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3349 ;;Total ram usage:       14 bytes
  3350 ;; Hardware stack levels used:    1
  3351 ;; Hardware stack levels required when called:    2
  3352 ;; This function calls:
  3353 ;;		Nothing
  3354 ;; This function is called by:
  3355 ;;		_configura_baudrate_uart
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           	psect	text15
  3360  0027D2                     __ptext15:
  3361                           	opt stack 0
  3362  0027D2                     ___aldiv:
  3363                           	opt stack 26
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;incstack = 0
  3367  0027D2  0E00               	movlw	0
  3368  0027D4  6E23               	movwf	___aldiv@sign,c
  3369  0027D6  AE21               	btfss	___aldiv@divisor+3,7,c
  3370  0027D8  D00A               	goto	l1197
  3371  0027DA  1E21               	comf	___aldiv@divisor+3,f,c
  3372  0027DC  1E20               	comf	___aldiv@divisor+2,f,c
  3373  0027DE  1E1F               	comf	___aldiv@divisor+1,f,c
  3374  0027E0  6C1E               	negf	___aldiv@divisor,c
  3375  0027E2  0E00               	movlw	0
  3376  0027E4  221F               	addwfc	___aldiv@divisor+1,f,c
  3377  0027E6  2220               	addwfc	___aldiv@divisor+2,f,c
  3378  0027E8  2221               	addwfc	___aldiv@divisor+3,f,c
  3379  0027EA  0E01               	movlw	1
  3380  0027EC  6E23               	movwf	___aldiv@sign,c
  3381  0027EE                     l1197:
  3382  0027EE  AE1D               	btfss	___aldiv@dividend+3,7,c
  3383  0027F0  D00A               	goto	l1198
  3384  0027F2  1E1D               	comf	___aldiv@dividend+3,f,c
  3385  0027F4  1E1C               	comf	___aldiv@dividend+2,f,c
  3386  0027F6  1E1B               	comf	___aldiv@dividend+1,f,c
  3387  0027F8  6C1A               	negf	___aldiv@dividend,c
  3388  0027FA  0E00               	movlw	0
  3389  0027FC  221B               	addwfc	___aldiv@dividend+1,f,c
  3390  0027FE  221C               	addwfc	___aldiv@dividend+2,f,c
  3391  002800  221D               	addwfc	___aldiv@dividend+3,f,c
  3392  002802  0E01               	movlw	1
  3393  002804  1A23               	xorwf	___aldiv@sign,f,c
  3394  002806                     l1198:
  3395  002806  0E00               	movlw	0
  3396  002808  6E24               	movwf	___aldiv@quotient,c
  3397  00280A  0E00               	movlw	0
  3398  00280C  6E25               	movwf	___aldiv@quotient+1,c
  3399  00280E  0E00               	movlw	0
  3400  002810  6E26               	movwf	___aldiv@quotient+2,c
  3401  002812  0E00               	movlw	0
  3402  002814  6E27               	movwf	___aldiv@quotient+3,c
  3403  002816  501E               	movf	___aldiv@divisor,w,c
  3404  002818  101F               	iorwf	___aldiv@divisor+1,w,c
  3405  00281A  1020               	iorwf	___aldiv@divisor+2,w,c
  3406  00281C  1021               	iorwf	___aldiv@divisor+3,w,c
  3407  00281E  B4D8               	btfsc	status,2,c
  3408  002820  D02A               	goto	l1205
  3409  002822  0E01               	movlw	1
  3410  002824  6E22               	movwf	___aldiv@counter,c
  3411  002826  D006               	goto	l1200
  3412  002828  90D8               	bcf	status,0,c
  3413  00282A  361E               	rlcf	___aldiv@divisor,f,c
  3414  00282C  361F               	rlcf	___aldiv@divisor+1,f,c
  3415  00282E  3620               	rlcf	___aldiv@divisor+2,f,c
  3416  002830  3621               	rlcf	___aldiv@divisor+3,f,c
  3417  002832  2A22               	incf	___aldiv@counter,f,c
  3418  002834                     l1200:
  3419  002834  AE21               	btfss	___aldiv@divisor+3,7,c
  3420  002836  D7F8               	goto	l1201
  3421  002838                     u8550:
  3422  002838  90D8               	bcf	status,0,c
  3423  00283A  3624               	rlcf	___aldiv@quotient,f,c
  3424  00283C  3625               	rlcf	___aldiv@quotient+1,f,c
  3425  00283E  3626               	rlcf	___aldiv@quotient+2,f,c
  3426  002840  3627               	rlcf	___aldiv@quotient+3,f,c
  3427  002842  501E               	movf	___aldiv@divisor,w,c
  3428  002844  5C1A               	subwf	___aldiv@dividend,w,c
  3429  002846  501F               	movf	___aldiv@divisor+1,w,c
  3430  002848  581B               	subwfb	___aldiv@dividend+1,w,c
  3431  00284A  5020               	movf	___aldiv@divisor+2,w,c
  3432  00284C  581C               	subwfb	___aldiv@dividend+2,w,c
  3433  00284E  5021               	movf	___aldiv@divisor+3,w,c
  3434  002850  581D               	subwfb	___aldiv@dividend+3,w,c
  3435  002852  A0D8               	btfss	status,0,c
  3436  002854  D009               	goto	l1204
  3437  002856  501E               	movf	___aldiv@divisor,w,c
  3438  002858  5E1A               	subwf	___aldiv@dividend,f,c
  3439  00285A  501F               	movf	___aldiv@divisor+1,w,c
  3440  00285C  5A1B               	subwfb	___aldiv@dividend+1,f,c
  3441  00285E  5020               	movf	___aldiv@divisor+2,w,c
  3442  002860  5A1C               	subwfb	___aldiv@dividend+2,f,c
  3443  002862  5021               	movf	___aldiv@divisor+3,w,c
  3444  002864  5A1D               	subwfb	___aldiv@dividend+3,f,c
  3445  002866  8024               	bsf	___aldiv@quotient,0,c
  3446  002868                     l1204:
  3447  002868  90D8               	bcf	status,0,c
  3448  00286A  3221               	rrcf	___aldiv@divisor+3,f,c
  3449  00286C  3220               	rrcf	___aldiv@divisor+2,f,c
  3450  00286E  321F               	rrcf	___aldiv@divisor+1,f,c
  3451  002870  321E               	rrcf	___aldiv@divisor,f,c
  3452  002872  2E22               	decfsz	___aldiv@counter,f,c
  3453  002874  D7E1               	goto	u8550
  3454  002876                     l1205:
  3455  002876  5023               	movf	___aldiv@sign,w,c
  3456  002878  B4D8               	btfsc	status,2,c
  3457  00287A  D008               	goto	l1206
  3458  00287C  1E27               	comf	___aldiv@quotient+3,f,c
  3459  00287E  1E26               	comf	___aldiv@quotient+2,f,c
  3460  002880  1E25               	comf	___aldiv@quotient+1,f,c
  3461  002882  6C24               	negf	___aldiv@quotient,c
  3462  002884  0E00               	movlw	0
  3463  002886  2225               	addwfc	___aldiv@quotient+1,f,c
  3464  002888  2226               	addwfc	___aldiv@quotient+2,f,c
  3465  00288A  2227               	addwfc	___aldiv@quotient+3,f,c
  3466  00288C                     l1206:
  3467  00288C  C024  F01A         	movff	___aldiv@quotient,?___aldiv
  3468  002890  C025  F01B         	movff	___aldiv@quotient+1,?___aldiv+1
  3469  002894  C026  F01C         	movff	___aldiv@quotient+2,?___aldiv+2
  3470  002898  C027  F01D         	movff	___aldiv@quotient+3,?___aldiv+3
  3471  00289C  0012               	return	
  3472  00289E                     __end_of___aldiv:
  3473                           	opt stack 0
  3474                           tblptru	equ	0xFF8
  3475                           tblptrh	equ	0xFF7
  3476                           tblptrl	equ	0xFF6
  3477                           tablat	equ	0xFF5
  3478                           prodh	equ	0xFF4
  3479                           prodl	equ	0xFF3
  3480                           intcon	equ	0xFF2
  3481                           intcon2	equ	0xFF1
  3482                           intcon3	equ	0xFF0
  3483                           postinc0	equ	0xFEE
  3484                           wreg	equ	0xFE8
  3485                           postdec1	equ	0xFE5
  3486                           fsr1h	equ	0xFE2
  3487                           fsr1l	equ	0xFE1
  3488                           postinc2	equ	0xFDE
  3489                           postdec2	equ	0xFDD
  3490                           fsr2h	equ	0xFDA
  3491                           fsr2l	equ	0xFD9
  3492                           status	equ	0xFD8
  3493                           
  3494 ;; *************** function _inicializa_tarefas *****************
  3495 ;; Defined at:
  3496 ;;		line 167 in file "main.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;		None
  3501 ;; Return value:  Size  Location     Type
  3502 ;;                  1    wreg      void 
  3503 ;; Registers used:
  3504 ;;		wreg, status,2, status,0
  3505 ;; Tracked objects:
  3506 ;;		On entry : 0/0
  3507 ;;		On exit  : 0/0
  3508 ;;		Unchanged: 0/0
  3509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3510 ;;      Params:         0       0       0       0       0       0       0       0       0
  3511 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3512 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3513 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3514 ;;Total ram usage:        0 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; Hardware stack levels required when called:    2
  3517 ;; This function calls:
  3518 ;;		Nothing
  3519 ;; This function is called by:
  3520 ;;		_main
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           	psect	text16
  3525  00327C                     __ptext16:
  3526                           	opt stack 0
  3527  00327C                     _inicializa_tarefas:
  3528                           	opt stack 28
  3529                           
  3530                           ;main.c: 170: p_tarefas[0] = acende_led4;
  3531                           
  3532                           ;incstack = 0
  3533  00327C  0E36               	movlw	low _acende_led4
  3534  00327E  0100               	movlb	0	; () banked
  3535  003280  6FD9               	movwf	_p_tarefas& (0+255),b
  3536  003282  0E33               	movlw	high _acende_led4
  3537  003284  6FDA               	movwf	(_p_tarefas+1)& (0+255),b
  3538                           
  3539                           ;main.c: 171: p_tarefas[1] = SDCard;
  3540  003286  0E38               	movlw	low _SDCard
  3541  003288  6FDB               	movwf	(_p_tarefas+2)& (0+255),b
  3542  00328A  0E1A               	movlw	high _SDCard
  3543  00328C  6FDC               	movwf	(_p_tarefas+3)& (0+255),b
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;main.c: 175: tempo_backup[0] = 1000;
  3547  00328E  0E03               	movlw	3
  3548  003290  6FD6               	movwf	(_tempo_backup+1)& (0+255),b
  3549  003292  0EE8               	movlw	232
  3550  003294  6FD5               	movwf	_tempo_backup& (0+255),b
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;main.c: 176: tempo_backup[1] = 2000;
  3554  003296  0E07               	movlw	7
  3555  003298  6FD8               	movwf	(_tempo_backup+3)& (0+255),b
  3556  00329A  0ED0               	movlw	208
  3557  00329C  6FD7               	movwf	(_tempo_backup+2)& (0+255),b
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;main.c: 180: tempo_tarefa[0] = 1000;
  3561  00329E  0E03               	movlw	3
  3562  0032A0  6E2E               	movwf	_tempo_tarefa+1,c
  3563  0032A2  0EE8               	movlw	232
  3564  0032A4  6E2D               	movwf	_tempo_tarefa,c
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;main.c: 181: tempo_tarefa[1] = 2000;
  3568  0032A6  0E07               	movlw	7
  3569  0032A8  6E30               	movwf	_tempo_tarefa+3,c
  3570  0032AA  0ED0               	movlw	208
  3571  0032AC  6E2F               	movwf	_tempo_tarefa+2,c
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;main.c: 184: tarefa_em_execucao = 0;
  3575  0032AE  0E00               	movlw	0
  3576  0032B0  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3577                           
  3578                           ; BSR set to: 0
  3579  0032B2  0012               	return		;funcret
  3580  0032B4                     __end_of_inicializa_tarefas:
  3581                           	opt stack 0
  3582                           tblptru	equ	0xFF8
  3583                           tblptrh	equ	0xFF7
  3584                           tblptrl	equ	0xFF6
  3585                           tablat	equ	0xFF5
  3586                           prodh	equ	0xFF4
  3587                           prodl	equ	0xFF3
  3588                           intcon	equ	0xFF2
  3589                           intcon2	equ	0xFF1
  3590                           intcon3	equ	0xFF0
  3591                           postinc0	equ	0xFEE
  3592                           wreg	equ	0xFE8
  3593                           postdec1	equ	0xFE5
  3594                           fsr1h	equ	0xFE2
  3595                           fsr1l	equ	0xFE1
  3596                           postinc2	equ	0xFDE
  3597                           postdec2	equ	0xFDD
  3598                           fsr2h	equ	0xFDA
  3599                           fsr2l	equ	0xFD9
  3600                           status	equ	0xFD8
  3601                           
  3602 ;; *************** function _inicializa_shrc *****************
  3603 ;; Defined at:
  3604 ;;		line 47 in file "bibliotecas/SHRC.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;		None
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;		None
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      void 
  3611 ;; Registers used:
  3612 ;;		None
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3618 ;;      Params:         0       0       0       0       0       0       0       0       0
  3619 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3620 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3621 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3622 ;;Total ram usage:        0 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    2
  3625 ;; This function calls:
  3626 ;;		Nothing
  3627 ;; This function is called by:
  3628 ;;		_main
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           	psect	text17
  3633  0034DA                     __ptext17:
  3634                           	opt stack 0
  3635  0034DA                     _inicializa_shrc:
  3636                           	opt stack 28
  3637                           
  3638                           ;SHRC.c: 49: LATBbits.LATB5 = 0;
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;incstack = 0
  3642  0034DA  9A8A               	bcf	3978,5,c	;volatile
  3643                           
  3644                           ;SHRC.c: 50: LATBbits.LATB6 = 0;
  3645  0034DC  9C8A               	bcf	3978,6,c	;volatile
  3646                           
  3647                           ;SHRC.c: 51: LATBbits.LATB7 = 0;
  3648  0034DE  9E8A               	bcf	3978,7,c	;volatile
  3649  0034E0  0012               	return		;funcret
  3650  0034E2                     __end_of_inicializa_shrc:
  3651                           	opt stack 0
  3652                           tblptru	equ	0xFF8
  3653                           tblptrh	equ	0xFF7
  3654                           tblptrl	equ	0xFF6
  3655                           tablat	equ	0xFF5
  3656                           prodh	equ	0xFF4
  3657                           prodl	equ	0xFF3
  3658                           intcon	equ	0xFF2
  3659                           intcon2	equ	0xFF1
  3660                           intcon3	equ	0xFF0
  3661                           postinc0	equ	0xFEE
  3662                           wreg	equ	0xFE8
  3663                           postdec1	equ	0xFE5
  3664                           fsr1h	equ	0xFE2
  3665                           fsr1l	equ	0xFE1
  3666                           postinc2	equ	0xFDE
  3667                           postdec2	equ	0xFDD
  3668                           fsr2h	equ	0xFDA
  3669                           fsr2l	equ	0xFD9
  3670                           status	equ	0xFD8
  3671                           
  3672 ;; *************** function _inicializa_SPI *****************
  3673 ;; Defined at:
  3674 ;;		line 49 in file "bibliotecas/SPI.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;  sync_mode       1    wreg     unsigned char 
  3677 ;;  bus_mode        1   31[COMRAM] unsigned char 
  3678 ;;  smp_phase       1   32[COMRAM] unsigned char 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  sync_mode       1   33[COMRAM] unsigned char 
  3681 ;; Return value:  Size  Location     Type
  3682 ;;                  1    wreg      void 
  3683 ;; Registers used:
  3684 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3690 ;;      Params:         2       0       0       0       0       0       0       0       0
  3691 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3693 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3694 ;;Total ram usage:        3 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; Hardware stack levels required when called:    5
  3697 ;; This function calls:
  3698 ;;		_escreve_cmd_lcd
  3699 ;;		_escreve_frase_ram_lcd
  3700 ;;		_posicao_cursor_lcd
  3701 ;; This function is called by:
  3702 ;;		_main
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           	psect	text18
  3707  002C7C                     __ptext18:
  3708                           	opt stack 0
  3709  002C7C                     _inicializa_SPI:
  3710                           	opt stack 25
  3711                           
  3712                           ;incstack = 0
  3713                           ;inicializa_SPI@sync_mode stored from wreg
  3714  002C7C  6E22               	movwf	inicializa_SPI@sync_mode,c
  3715                           
  3716                           ;SPI.c: 51: SSPCON1bits.SSPEN = 0;
  3717  002C7E  9AC6               	bcf	4038,5,c	;volatile
  3718                           
  3719                           ;SPI.c: 52: SSPSTAT &= 0x3F;
  3720  002C80  0E3F               	movlw	63
  3721  002C82  16C7               	andwf	4039,f,c	;volatile
  3722                           
  3723                           ;SPI.c: 53: SSPCON1 = 0x00;
  3724  002C84  0E00               	movlw	0
  3725  002C86  6EC6               	movwf	4038,c	;volatile
  3726                           
  3727                           ;SPI.c: 54: SSPCON1 |= sync_mode<<7;
  3728  002C88  4022               	rrncf	inicializa_SPI@sync_mode,w,c
  3729  002C8A  0B80               	andlw	128
  3730  002C8C  12C6               	iorwf	4038,f,c	;volatile
  3731                           
  3732                           ;SPI.c: 55: SSPSTAT |= smp_phase;
  3733  002C8E  5021               	movf	inicializa_SPI@smp_phase,w,c
  3734  002C90  12C7               	iorwf	4039,f,c	;volatile
  3735                           
  3736                           ;SPI.c: 56: TRISBbits.RB4 = 0;
  3737  002C92  9893               	bcf	3987,4,c	;volatile
  3738                           
  3739                           ;SPI.c: 57: switch(bus_mode)
  3740  002C94  D005               	goto	l122
  3741  002C96                     l123:
  3742                           
  3743                           ;SPI.c: 60: SSPSTATbits.CKE = 1;
  3744  002C96  8CC7               	bsf	4039,6,c	;volatile
  3745                           
  3746                           ;SPI.c: 61: break;
  3747  002C98  D015               	goto	l128
  3748  002C9A                     l125:
  3749                           
  3750                           ;SPI.c: 63: SSPSTATbits.CKE = 1;
  3751  002C9A  8CC7               	bsf	4039,6,c	;volatile
  3752  002C9C                     l126:
  3753                           
  3754                           ;SPI.c: 67: SSPCON1bits.CKP = 1;
  3755  002C9C  88C6               	bsf	4038,4,c	;volatile
  3756                           
  3757                           ;SPI.c: 71: }
  3758                           
  3759                           ;SPI.c: 70: break;
  3760                           
  3761                           ;SPI.c: 69: default:
  3762                           
  3763                           ;SPI.c: 68: break;
  3764  002C9E  D012               	goto	l128
  3765  002CA0                     l122:
  3766  002CA0  5020               	movf	inicializa_SPI@bus_mode,w,c
  3767                           
  3768                           ; Switch size 1, requested type "space"
  3769                           ; Number of cases is 3, Range of values is 0 to 3
  3770                           ; switch strategies available:
  3771                           ; Name         Instructions Cycles
  3772                           ; simple_byte           10     6 (average)
  3773                           ;	Chosen strategy is simple_byte
  3774  002CA2  0A00               	xorlw	0	; case 0
  3775  002CA4  B4D8               	btfsc	status,2,c
  3776  002CA6  D7F7               	goto	l123
  3777  002CA8  0A02               	xorlw	2	; case 2
  3778  002CAA  B4D8               	btfsc	status,2,c
  3779  002CAC  D7F6               	goto	l125
  3780  002CAE  0A01               	xorlw	1	; case 3
  3781  002CB0  B4D8               	btfsc	status,2,c
  3782  002CB2  D7F4               	goto	l126
  3783                           
  3784                           ;SPI.c: 73: switch( sync_mode )
  3785  002CB4  D007               	goto	l128
  3786  002CB6                     l129:
  3787                           
  3788                           ;SPI.c: 76: TRISBbits.RB1 = 1;
  3789  002CB6  8293               	bsf	3987,1,c	;volatile
  3790                           
  3791                           ;SPI.c: 77: TRISBbits.RB4 = 1;
  3792  002CB8  8893               	bsf	3987,4,c	;volatile
  3793                           
  3794                           ;SPI.c: 78: break;
  3795  002CBA  D00C               	goto	l130
  3796  002CBC                     l131:
  3797                           
  3798                           ;SPI.c: 81: TRISBbits.RB1 = 1;
  3799  002CBC  8293               	bsf	3987,1,c	;volatile
  3800                           
  3801                           ;SPI.c: 82: break;
  3802  002CBE  D00A               	goto	l130
  3803  002CC0                     l132:
  3804                           
  3805                           ;SPI.c: 85: TRISBbits.RB1 = 0;
  3806  002CC0  9293               	bcf	3987,1,c	;volatile
  3807                           
  3808                           ;SPI.c: 87: }
  3809                           
  3810                           ;SPI.c: 86: break;
  3811  002CC2  D008               	goto	l130
  3812  002CC4                     l128:
  3813  002CC4  5022               	movf	inicializa_SPI@sync_mode,w,c
  3814                           
  3815                           ; Switch size 1, requested type "space"
  3816                           ; Number of cases is 2, Range of values is 4 to 5
  3817                           ; switch strategies available:
  3818                           ; Name         Instructions Cycles
  3819                           ; simple_byte            7     4 (average)
  3820                           ;	Chosen strategy is simple_byte
  3821  002CC6  0A04               	xorlw	4	; case 4
  3822  002CC8  B4D8               	btfsc	status,2,c
  3823  002CCA  D7F5               	goto	l129
  3824  002CCC  0A01               	xorlw	1	; case 5
  3825  002CCE  B4D8               	btfsc	status,2,c
  3826  002CD0  D7F5               	goto	l131
  3827  002CD2  D7F6               	goto	l132
  3828  002CD4                     l130:
  3829                           
  3830                           ;SPI.c: 89: TRISBbits.RB0 = 1;
  3831  002CD4  8093               	bsf	3987,0,c	;volatile
  3832                           
  3833                           ;SPI.c: 90: TRISCbits.RC7 = 0;
  3834  002CD6  9E94               	bcf	3988,7,c	;volatile
  3835                           
  3836                           ;SPI.c: 93: SSPCON1 |= 0x20;
  3837  002CD8  8AC6               	bsf	4038,5,c	;volatile
  3838                           
  3839                           ;SPI.c: 94: posicao_cursor_lcd(1,1);
  3840  002CDA  0E01               	movlw	1
  3841  002CDC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3842  002CDE  0E01               	movlw	1
  3843  002CE0  EC64  F017         	call	_posicao_cursor_lcd
  3844                           
  3845                           ;SPI.c: 95: escreve_frase_ram_lcd("SPI configurada!");
  3846  002CE4  0EB7               	movlw	low STR_1
  3847  002CE6  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3848  002CE8  0E61               	movlw	high STR_1
  3849  002CEA  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3850  002CEC  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3851                           
  3852                           ;SPI.c: 96: escreve_cmd_lcd(0b00000001);
  3853  002CF0  0E01               	movlw	1
  3854  002CF2  ECB7  F015         	call	_escreve_cmd_lcd
  3855  002CF6  0012               	return		;funcret
  3856  002CF8                     __end_of_inicializa_SPI:
  3857                           	opt stack 0
  3858                           tblptru	equ	0xFF8
  3859                           tblptrh	equ	0xFF7
  3860                           tblptrl	equ	0xFF6
  3861                           tablat	equ	0xFF5
  3862                           prodh	equ	0xFF4
  3863                           prodl	equ	0xFF3
  3864                           intcon	equ	0xFF2
  3865                           intcon2	equ	0xFF1
  3866                           intcon3	equ	0xFF0
  3867                           postinc0	equ	0xFEE
  3868                           wreg	equ	0xFE8
  3869                           postdec1	equ	0xFE5
  3870                           fsr1h	equ	0xFE2
  3871                           fsr1l	equ	0xFE1
  3872                           postinc2	equ	0xFDE
  3873                           postdec2	equ	0xFDD
  3874                           fsr2h	equ	0xFDA
  3875                           fsr2l	equ	0xFD9
  3876                           status	equ	0xFD8
  3877                           
  3878 ;; *************** function _escalonador *****************
  3879 ;; Defined at:
  3880 ;;		line 195 in file "main.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;		None
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;  cont            1  116[BANK0 ] unsigned char 
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      void 
  3887 ;; Registers used:
  3888 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3894 ;;      Params:         0       0       0       0       0       0       0       0       0
  3895 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3896 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3897 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3898 ;;Total ram usage:        3 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:   12
  3901 ;; This function calls:
  3902 ;;		_SDCard
  3903 ;;		_acende_led4
  3904 ;; This function is called by:
  3905 ;;		_main
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text19
  3910  002A2C                     __ptext19:
  3911                           	opt stack 0
  3912  002A2C                     _escalonador:
  3913                           	opt stack 18
  3914                           
  3915                           ;main.c: 197: unsigned char cont;
  3916                           ;main.c: 198: for(cont = 0; cont<2;cont++)
  3917                           
  3918                           ;incstack = 0
  3919  002A2C  0E00               	movlw	0
  3920  002A2E  0100               	movlb	0	; () banked
  3921  002A30  6FD4               	movwf	escalonador@cont& (0+255),b
  3922  002A32                     l7811:
  3923                           
  3924                           ; BSR set to: 0
  3925  002A32  0E01               	movlw	1
  3926  002A34  65D4               	cpfsgt	escalonador@cont& (0+255),b
  3927  002A36  D001               	goto	l1079
  3928  002A38  0012               	return	
  3929  002A3A                     l1079:
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;main.c: 199: {
  3933                           ;main.c: 200: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3934                           
  3935                           ; BSR set to: 0
  3936  002A3A  51D4               	movf	escalonador@cont& (0+255),w,b
  3937  002A3C  0D02               	mullw	2
  3938  002A3E  0ED9               	movlw	low _p_tarefas
  3939  002A40  24F3               	addwf	prodl,w,c
  3940  002A42  6ED9               	movwf	fsr2l,c
  3941  002A44  0E00               	movlw	high _p_tarefas
  3942  002A46  20F4               	addwfc	prodh,w,c
  3943  002A48  6EDA               	movwf	fsr2h,c
  3944  002A4A  50DE               	movf	postinc2,w,c
  3945  002A4C  10DE               	iorwf	postinc2,w,c
  3946  002A4E  B4D8               	btfsc	status,2,c
  3947  002A50  D03D               	goto	l1081
  3948                           
  3949                           ; BSR set to: 0
  3950  002A52  51D4               	movf	escalonador@cont& (0+255),w,b
  3951  002A54  0D02               	mullw	2
  3952  002A56  0E2D               	movlw	low _tempo_tarefa
  3953  002A58  24F3               	addwf	prodl,w,c
  3954  002A5A  6ED9               	movwf	fsr2l,c
  3955  002A5C  0E00               	movlw	high _tempo_tarefa
  3956  002A5E  20F4               	addwfc	prodh,w,c
  3957  002A60  6EDA               	movwf	fsr2h,c
  3958  002A62  50DE               	movf	postinc2,w,c
  3959  002A64  10DE               	iorwf	postinc2,w,c
  3960  002A66  A4D8               	btfss	status,2,c
  3961  002A68  D031               	goto	l1081
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;main.c: 201: {
  3965                           ;main.c: 202: tarefa_em_execucao = 1;
  3966  002A6A  0E01               	movlw	1
  3967  002A6C  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  3968                           
  3969                           ;main.c: 203: timeout_tarefa = 65000;
  3970  002A6E  0EFD               	movlw	253
  3971  002A70  6E36               	movwf	_timeout_tarefa+1,c
  3972  002A72  0EE8               	movlw	232
  3973  002A74  6E35               	movwf	_timeout_tarefa,c
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;main.c: 204: p_tarefas[cont]();
  3977  002A76  51D4               	movf	escalonador@cont& (0+255),w,b
  3978  002A78  0D02               	mullw	2
  3979  002A7A  0ED9               	movlw	low _p_tarefas
  3980  002A7C  24F3               	addwf	prodl,w,c
  3981  002A7E  6ED9               	movwf	fsr2l,c
  3982  002A80  0E00               	movlw	high _p_tarefas
  3983  002A82  20F4               	addwfc	prodh,w,c
  3984  002A84  6EDA               	movwf	fsr2h,c
  3985  002A86  D801               	call	u8848
  3986  002A88  D00A               	goto	u8849
  3987  002A8A                     u8848:
  3988  002A8A  0005               	push	
  3989  002A8C  6EFA               	movwf	pclath,c
  3990  002A8E  50DE               	movf	postinc2,w,c
  3991  002A90  6EFD               	movwf	tosl,c
  3992  002A92  50DE               	movf	postinc2,w,c
  3993  002A94  6EFE               	movwf	tosh,c
  3994  002A96  50F8               	movf	tblptru,w,c
  3995  002A98  6EFF               	movwf	tosu,c
  3996  002A9A  50FA               	movf	pclath,w,c
  3997  002A9C  0012               	return		;indir
  3998  002A9E                     u8849:
  3999                           
  4000                           ;main.c: 205: tarefa_em_execucao = 0;
  4001  002A9E  0E00               	movlw	0
  4002  002AA0  6E3E               	movwf	_tarefa_em_execucao,c	;volatile
  4003                           
  4004                           ;main.c: 206: tempo_tarefa[cont] = tempo_backup[cont];
  4005  002AA2  0100               	movlb	0	; () banked
  4006  002AA4  51D4               	movf	escalonador@cont& (0+255),w,b
  4007  002AA6  0D02               	mullw	2
  4008  002AA8  0ED5               	movlw	low _tempo_backup
  4009  002AAA  24F3               	addwf	prodl,w,c
  4010  002AAC  6ED9               	movwf	fsr2l,c
  4011  002AAE  0E00               	movlw	high _tempo_backup
  4012  002AB0  20F4               	addwfc	prodh,w,c
  4013  002AB2  6EDA               	movwf	fsr2h,c
  4014  002AB4  51D4               	movf	escalonador@cont& (0+255),w,b
  4015  002AB6  0D02               	mullw	2
  4016  002AB8  0E2D               	movlw	low _tempo_tarefa
  4017  002ABA  24F3               	addwf	prodl,w,c
  4018  002ABC  6EE1               	movwf	fsr1l,c
  4019  002ABE  0E00               	movlw	high _tempo_tarefa
  4020  002AC0  20F4               	addwfc	prodh,w,c
  4021  002AC2  6EE2               	movwf	fsr1h,c
  4022  002AC4  CFDE FFE6          	movff	postinc2,postinc1
  4023  002AC8  CFDD FFE5          	movff	postdec2,postdec1
  4024  002ACC                     l1081:
  4025                           
  4026                           ; BSR set to: 0
  4027                           
  4028                           ; BSR set to: 0
  4029  002ACC  2BD4               	incf	escalonador@cont& (0+255),f,b
  4030  002ACE  D7B1               	goto	l7811
  4031  002AD0                     __end_of_escalonador:
  4032                           	opt stack 0
  4033                           tosu	equ	0xFFF
  4034                           tosh	equ	0xFFE
  4035                           tosl	equ	0xFFD
  4036                           pclath	equ	0xFFA
  4037                           tblptru	equ	0xFF8
  4038                           tblptrh	equ	0xFF7
  4039                           tblptrl	equ	0xFF6
  4040                           tablat	equ	0xFF5
  4041                           prodh	equ	0xFF4
  4042                           prodl	equ	0xFF3
  4043                           intcon	equ	0xFF2
  4044                           intcon2	equ	0xFF1
  4045                           intcon3	equ	0xFF0
  4046                           postinc0	equ	0xFEE
  4047                           wreg	equ	0xFE8
  4048                           postinc1	equ	0xFE6
  4049                           postdec1	equ	0xFE5
  4050                           fsr1h	equ	0xFE2
  4051                           fsr1l	equ	0xFE1
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _SDCard *****************
  4059 ;; Defined at:
  4060 ;;		line 269 in file "main.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;		None
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  fs             42    3[BANK2 ] struct .
  4065 ;;  br              2    1[BANK2 ] unsigned short 
  4066 ;;  FResult         1    0[BANK2 ] enum E3832
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  1    wreg      void 
  4069 ;; Registers used:
  4070 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4076 ;;      Params:         0       0       0       0       0       0       0       0       0
  4077 ;;      Locals:         0       0       0      45       0       0       0       0       0
  4078 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4079 ;;      Totals:         0       0       0      45       0       0       0       0       0
  4080 ;;Total ram usage:       45 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:   11
  4083 ;; This function calls:
  4084 ;;		_escreve_cmd_lcd
  4085 ;;		_escreve_frase_ram_lcd
  4086 ;;		_pf_mount
  4087 ;;		_pf_open
  4088 ;;		_pf_read
  4089 ;;		_pf_write
  4090 ;;		_posicao_cursor_lcd
  4091 ;;		_proceed
  4092 ;;		_readover
  4093 ;; This function is called by:
  4094 ;;		_inicializa_tarefas
  4095 ;;		_escalonador
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           	psect	text20
  4100  001A38                     __ptext20:
  4101                           	opt stack 0
  4102  001A38                     _SDCard:
  4103                           	opt stack 18
  4104                           
  4105                           ;main.c: 271: T0CONbits.TMR0ON = 0;
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;incstack = 0
  4109  001A38  9ED5               	bcf	4053,7,c	;volatile
  4110                           
  4111                           ;main.c: 272: FRESULT FResult;
  4112                           ;main.c: 273: FATFS fs;
  4113                           ;main.c: 274: WORD br;
  4114                           ;main.c: 276: posicao_cursor_lcd(1,0);
  4115  001A3A  0E00               	movlw	0
  4116  001A3C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4117  001A3E  0E01               	movlw	1
  4118  001A40  EC64  F017         	call	_posicao_cursor_lcd
  4119                           
  4120                           ;main.c: 277: escreve_frase_ram_lcd("Attempting to");
  4121  001A44  0EF5               	movlw	low STR_10
  4122  001A46  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4123  001A48  0E61               	movlw	high STR_10
  4124  001A4A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4125  001A4C  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4126                           
  4127                           ;main.c: 278: posicao_cursor_lcd(2,0);
  4128  001A50  0E00               	movlw	0
  4129  001A52  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4130  001A54  0E02               	movlw	2
  4131  001A56  EC64  F017         	call	_posicao_cursor_lcd
  4132                           
  4133                           ;main.c: 279: escreve_frase_ram_lcd("mount file sys");
  4134  001A5A  0ED8               	movlw	low STR_11
  4135  001A5C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4136  001A5E  0E61               	movlw	high STR_11
  4137  001A60  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4138  001A62  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4139                           
  4140                           ;main.c: 280: escreve_cmd_lcd(0b00000001);
  4141  001A66  0E01               	movlw	1
  4142  001A68  ECB7  F015         	call	_escreve_cmd_lcd
  4143                           
  4144                           ;main.c: 283: proceed();
  4145  001A6C  EC58  F01A         	call	_proceed	;wreg free
  4146                           
  4147                           ;main.c: 284: if((FResult = pf_mount(&fs)) == FR_OK )
  4148  001A70  0E03               	movlw	low SDCard@fs
  4149  001A72  0100               	movlb	0	; () banked
  4150  001A74  6F7C               	movwf	pf_mount@fs& (0+255),b
  4151  001A76  0E02               	movlw	high SDCard@fs
  4152  001A78  6F7D               	movwf	(pf_mount@fs+1)& (0+255),b
  4153  001A7A  EC09  F000         	call	_pf_mount	;wreg free
  4154  001A7E  0102               	movlb	2	; () banked
  4155  001A80  6F00               	movwf	SDCard@FResult& (0+255),b
  4156  001A82  5100               	movf	SDCard@FResult& (0+255),w,b
  4157  001A84  A4D8               	btfss	status,2,c
  4158  001A86  D0AB               	goto	l1101
  4159                           
  4160                           ; BSR set to: 2
  4161                           ;main.c: 285: {
  4162                           ;main.c: 286: posicao_cursor_lcd(1,0);
  4163  001A88  0E00               	movlw	0
  4164  001A8A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4165  001A8C  0E01               	movlw	1
  4166  001A8E  EC64  F017         	call	_posicao_cursor_lcd
  4167                           
  4168                           ;main.c: 287: escreve_frase_ram_lcd("syst inicialized");
  4169  001A92  0EA6               	movlw	low STR_12
  4170  001A94  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4171  001A96  0E61               	movlw	high STR_12
  4172  001A98  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4173  001A9A  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4174                           
  4175                           ;main.c: 290: FResult = pf_open("check.txt" );
  4176  001A9E  0E55               	movlw	low STR_8
  4177  001AA0  0100               	movlb	0	; () banked
  4178  001AA2  6FBA               	movwf	pf_open@path& (0+255),b
  4179  001AA4  0E62               	movlw	high STR_8
  4180  001AA6  6FBB               	movwf	(pf_open@path+1)& (0+255),b
  4181  001AA8  ECA3  F00E         	call	_pf_open	;wreg free
  4182  001AAC  0102               	movlb	2	; () banked
  4183  001AAE  6F00               	movwf	SDCard@FResult& (0+255),b
  4184                           
  4185                           ; BSR set to: 2
  4186                           ;main.c: 292: if( FResult == FR_OK )
  4187  001AB0  5100               	movf	SDCard@FResult& (0+255),w,b
  4188  001AB2  A4D8               	btfss	status,2,c
  4189  001AB4  D07A               	goto	l1102
  4190                           
  4191                           ; BSR set to: 2
  4192                           ;main.c: 293: {
  4193                           ;main.c: 295: if( (FResult = pf_write("SD_Card", 5, &br)) == FR_OK )
  4194  001AB6  0E68               	movlw	low STR_14
  4195  001AB8  0100               	movlb	0	; () banked
  4196  001ABA  6F9A               	movwf	pf_write@buff& (0+255),b
  4197  001ABC  0E62               	movlw	high STR_14
  4198  001ABE  6F9B               	movwf	(pf_write@buff+1)& (0+255),b
  4199  001AC0  0E00               	movlw	0
  4200  001AC2  6F9D               	movwf	(pf_write@btw+1)& (0+255),b
  4201  001AC4  0E05               	movlw	5
  4202  001AC6  6F9C               	movwf	pf_write@btw& (0+255),b
  4203  001AC8  0E01               	movlw	low SDCard@br
  4204  001ACA  6F9E               	movwf	pf_write@bw& (0+255),b
  4205  001ACC  0E02               	movlw	high SDCard@br
  4206  001ACE  6F9F               	movwf	(pf_write@bw+1)& (0+255),b
  4207  001AD0  EC23  F003         	call	_pf_write	;wreg free
  4208  001AD4  0102               	movlb	2	; () banked
  4209  001AD6  6F00               	movwf	SDCard@FResult& (0+255),b
  4210  001AD8  5100               	movf	SDCard@FResult& (0+255),w,b
  4211  001ADA  A4D8               	btfss	status,2,c
  4212  001ADC  D00C               	goto	l1103
  4213                           
  4214                           ; BSR set to: 2
  4215                           ;main.c: 296: {
  4216                           ;main.c: 297: posicao_cursor_lcd(1,0);
  4217  001ADE  0E00               	movlw	0
  4218  001AE0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4219  001AE2  0E01               	movlw	1
  4220  001AE4  EC64  F017         	call	_posicao_cursor_lcd
  4221                           
  4222                           ;main.c: 298: escreve_frase_ram_lcd("syst inicialized");
  4223  001AE8  0EA6               	movlw	low STR_12
  4224  001AEA  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4225  001AEC  0E61               	movlw	high STR_12
  4226  001AEE  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4227  001AF0  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4228                           
  4229                           ;main.c: 299: }
  4230  001AF4  D00F               	goto	l1107
  4231  001AF6                     l1103:
  4232                           
  4233                           ;main.c: 300: else
  4234                           ;main.c: 301: {
  4235                           ;main.c: 302: escreve_cmd_lcd(0b00000001);
  4236  001AF6  0E01               	movlw	1
  4237  001AF8  ECB7  F015         	call	_escreve_cmd_lcd
  4238                           
  4239                           ;main.c: 303: posicao_cursor_lcd(1,0);
  4240  001AFC  0E00               	movlw	0
  4241  001AFE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4242  001B00  0E01               	movlw	1
  4243  001B02  EC64  F017         	call	_posicao_cursor_lcd
  4244                           
  4245                           ;main.c: 304: escreve_frase_ram_lcd("SDCard error");
  4246  001B06  0E3B               	movlw	low STR_16
  4247  001B08  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4248  001B0A  0E62               	movlw	high STR_16
  4249  001B0C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4250  001B0E  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4251  001B12                     l1105:
  4252  001B12  D7FF               	goto	l1105
  4253  001B14                     l1107:
  4254                           
  4255                           ;main.c: 306: }
  4256                           ;main.c: 307: escreve_cmd_lcd(0b00000001);
  4257  001B14  0E01               	movlw	1
  4258  001B16  ECB7  F015         	call	_escreve_cmd_lcd
  4259                           
  4260                           ;main.c: 310: posicao_cursor_lcd(1,0);
  4261  001B1A  0E00               	movlw	0
  4262  001B1C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4263  001B1E  0E01               	movlw	1
  4264  001B20  EC64  F017         	call	_posicao_cursor_lcd
  4265                           
  4266                           ;main.c: 311: escreve_frase_ram_lcd("lendo arquivo");
  4267  001B24  0E11               	movlw	low STR_17
  4268  001B26  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4269  001B28  0E62               	movlw	high STR_17
  4270  001B2A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4271  001B2C  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4272                           
  4273                           ;main.c: 315: {
  4274                           ;main.c: 316: readover(1);
  4275                           
  4276                           ;main.c: 314: do
  4277  001B30  0E00               	movlw	0
  4278  001B32  6E1B               	movwf	readover@a+1,c
  4279  001B34  0E01               	movlw	1
  4280  001B36  6E1A               	movwf	readover@a,c
  4281  001B38  EC64  F01A         	call	_readover	;wreg free
  4282                           
  4283                           ;main.c: 319: if( (FResult = pf_read(data_buffer_32, 31, &br)) == FR_OK )
  4284  001B3C  0E71               	movlw	low _data_buffer_32
  4285  001B3E  0100               	movlb	0	; () banked
  4286  001B40  6F9A               	movwf	pf_read@buff& (0+255),b
  4287  001B42  0E01               	movlw	high _data_buffer_32
  4288  001B44  6F9B               	movwf	(pf_read@buff+1)& (0+255),b
  4289  001B46  0E00               	movlw	0
  4290  001B48  6F9D               	movwf	(pf_read@btr+1)& (0+255),b
  4291  001B4A  0E1F               	movlw	31
  4292  001B4C  6F9C               	movwf	pf_read@btr& (0+255),b
  4293  001B4E  0E01               	movlw	low SDCard@br
  4294  001B50  6F9E               	movwf	pf_read@br& (0+255),b
  4295  001B52  0E02               	movlw	high SDCard@br
  4296  001B54  6F9F               	movwf	(pf_read@br+1)& (0+255),b
  4297  001B56  EC74  F007         	call	_pf_read	;wreg free
  4298  001B5A  0102               	movlb	2	; () banked
  4299  001B5C  6F00               	movwf	SDCard@FResult& (0+255),b
  4300  001B5E  5100               	movf	SDCard@FResult& (0+255),w,b
  4301  001B60  A4D8               	btfss	status,2,c
  4302  001B62  D009               	goto	l1109
  4303                           
  4304                           ; BSR set to: 2
  4305                           ;main.c: 320: {
  4306                           ;main.c: 322: data_buffer_32[br] = 0;
  4307  001B64  0E71               	movlw	low _data_buffer_32
  4308  001B66  2501               	addwf	SDCard@br& (0+255),w,b
  4309  001B68  6ED9               	movwf	fsr2l,c
  4310  001B6A  0E01               	movlw	high _data_buffer_32
  4311  001B6C  2102               	addwfc	(SDCard@br+1)& (0+255),w,b
  4312  001B6E  6EDA               	movwf	fsr2h,c
  4313  001B70  0E00               	movlw	0
  4314  001B72  6EDF               	movwf	indf2,c
  4315                           
  4316                           ;main.c: 323: break;
  4317  001B74  D035               	goto	l1122
  4318  001B76                     l1109:
  4319                           
  4320                           ; BSR set to: 2
  4321                           ;main.c: 326: else
  4322                           ;main.c: 327: {
  4323                           ;main.c: 329: escreve_cmd_lcd(0b00000001);
  4324                           
  4325                           ; BSR set to: 2
  4326  001B76  0E01               	movlw	1
  4327  001B78  ECB7  F015         	call	_escreve_cmd_lcd
  4328                           
  4329                           ;main.c: 330: posicao_cursor_lcd(1,0);
  4330  001B7C  0E00               	movlw	0
  4331  001B7E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4332  001B80  0E01               	movlw	1
  4333  001B82  EC64  F017         	call	_posicao_cursor_lcd
  4334                           
  4335                           ;main.c: 331: escreve_frase_ram_lcd("Erro tentando");
  4336  001B86  0EE7               	movlw	low STR_18
  4337  001B88  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4338  001B8A  0E61               	movlw	high STR_18
  4339  001B8C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4340  001B8E  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4341                           
  4342                           ;main.c: 332: posicao_cursor_lcd(2,0);
  4343  001B92  0E00               	movlw	0
  4344  001B94  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4345  001B96  0E02               	movlw	2
  4346  001B98  EC64  F017         	call	_posicao_cursor_lcd
  4347                           
  4348                           ;main.c: 333: escreve_frase_ram_lcd("ler o arquivo");
  4349  001B9C  0E03               	movlw	low STR_19
  4350  001B9E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4351  001BA0  0E62               	movlw	high STR_19
  4352  001BA2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4353  001BA4  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4354  001BA8                     l1112:
  4355  001BA8  D7FF               	goto	l1112
  4356  001BAA                     l1102:
  4357                           
  4358                           ; BSR set to: 2
  4359                           ;main.c: 339: else
  4360                           ;main.c: 340: {
  4361                           ;main.c: 341: escreve_cmd_lcd(0b00000001);
  4362                           
  4363                           ; BSR set to: 2
  4364  001BAA  0E01               	movlw	1
  4365  001BAC  ECB7  F015         	call	_escreve_cmd_lcd
  4366                           
  4367                           ;main.c: 342: posicao_cursor_lcd(1,0);
  4368  001BB0  0E00               	movlw	0
  4369  001BB2  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4370  001BB4  0E01               	movlw	1
  4371  001BB6  EC64  F017         	call	_posicao_cursor_lcd
  4372                           
  4373                           ;main.c: 343: escreve_frase_ram_lcd("Erro tentando");
  4374  001BBA  0EE7               	movlw	low STR_18
  4375  001BBC  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4376  001BBE  0E61               	movlw	high STR_18
  4377  001BC0  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4378  001BC2  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4379                           
  4380                           ;main.c: 344: posicao_cursor_lcd(2,0);
  4381  001BC6  0E00               	movlw	0
  4382  001BC8  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4383  001BCA  0E02               	movlw	2
  4384  001BCC  EC64  F017         	call	_posicao_cursor_lcd
  4385                           
  4386                           ;main.c: 345: escreve_frase_ram_lcd("abrir o arquivo");
  4387  001BD0  0EC8               	movlw	low STR_21
  4388  001BD2  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4389  001BD4  0E61               	movlw	high STR_21
  4390  001BD6  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4391  001BD8  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4392  001BDC                     l1116:
  4393  001BDC  D7FF               	goto	l1116
  4394  001BDE                     l1101:
  4395                           
  4396                           ;main.c: 349: else
  4397                           ;main.c: 350: {
  4398                           ;main.c: 352: while( 1 );
  4399  001BDE  D7FF               	goto	l1101
  4400  001BE0                     l1122:
  4401                           
  4402                           ;main.c: 353: }
  4403                           ;main.c: 371: if( FResult != FR_OK )
  4404  001BE0  0102               	movlb	2	; () banked
  4405  001BE2  5100               	movf	SDCard@FResult& (0+255),w,b
  4406  001BE4  A4D8               	btfss	status,2,c
  4407  001BE6                     u8690:
  4408                           
  4409                           ;main.c: 372: {
  4410                           ;main.c: 377: while( 1 );
  4411  001BE6  D7FF               	goto	u8690
  4412  001BE8                     
  4413                           ;main.c: 378: }
  4414                           ;main.c: 381: while(1);
  4415  001BE8  D7FF               	goto	l1126
  4416  001BEA                     __end_of_SDCard:
  4417                           	opt stack 0
  4418                           tosu	equ	0xFFF
  4419                           tosh	equ	0xFFE
  4420                           tosl	equ	0xFFD
  4421                           pclath	equ	0xFFA
  4422                           tblptru	equ	0xFF8
  4423                           tblptrh	equ	0xFF7
  4424                           tblptrl	equ	0xFF6
  4425                           tablat	equ	0xFF5
  4426                           prodh	equ	0xFF4
  4427                           prodl	equ	0xFF3
  4428                           intcon	equ	0xFF2
  4429                           intcon2	equ	0xFF1
  4430                           intcon3	equ	0xFF0
  4431                           postinc0	equ	0xFEE
  4432                           wreg	equ	0xFE8
  4433                           postinc1	equ	0xFE6
  4434                           postdec1	equ	0xFE5
  4435                           fsr1h	equ	0xFE2
  4436                           fsr1l	equ	0xFE1
  4437                           indf2	equ	0xFDF
  4438                           postinc2	equ	0xFDE
  4439                           postdec2	equ	0xFDD
  4440                           fsr2h	equ	0xFDA
  4441                           fsr2l	equ	0xFD9
  4442                           status	equ	0xFD8
  4443                           
  4444 ;; *************** function _acende_led4 *****************
  4445 ;; Defined at:
  4446 ;;		line 386 in file "main.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;		None
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;		None
  4451 ;; Return value:  Size  Location     Type
  4452 ;;                  1    wreg      void 
  4453 ;; Registers used:
  4454 ;;		wreg, status,2, status,0, cstack
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4460 ;;      Params:         0       0       0       0       0       0       0       0       0
  4461 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4462 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4463 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4464 ;;Total ram usage:        0 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; Hardware stack levels required when called:    3
  4467 ;; This function calls:
  4468 ;;		_shrc_apaga_bit
  4469 ;;		_shrc_seta_bit
  4470 ;; This function is called by:
  4471 ;;		_inicializa_tarefas
  4472 ;;		_escalonador
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           	psect	text21
  4477  003336                     __ptext21:
  4478                           	opt stack 0
  4479  003336                     _acende_led4:
  4480                           	opt stack 26
  4481                           
  4482                           ;main.c: 387: static unsigned char flag = 0;
  4483                           ;main.c: 388: flag = !flag;
  4484                           
  4485                           ;incstack = 0
  4486  003336  503D               	movf	acende_led4@flag,w,c
  4487  003338  A4D8               	btfss	status,2,c
  4488  00333A  D002               	goto	u5600
  4489  00333C  0E01               	movlw	1
  4490  00333E  D001               	goto	u5610
  4491  003340                     u5600:
  4492  003340  0E00               	movlw	0
  4493  003342                     u5610:
  4494  003342  6E3D               	movwf	acende_led4@flag,c
  4495                           
  4496                           ;main.c: 389: if(!flag)
  4497  003344  503D               	movf	acende_led4@flag,w,c
  4498  003346  A4D8               	btfss	status,2,c
  4499  003348  D004               	goto	l1135
  4500                           
  4501                           ;main.c: 390: {
  4502                           ;main.c: 391: shrc_seta_bit(0);
  4503  00334A  0E00               	movlw	0
  4504  00334C  ECDF  F019         	call	_shrc_seta_bit
  4505                           
  4506                           ;main.c: 392: }
  4507  003350  0012               	return	
  4508  003352                     l1135:
  4509                           
  4510                           ;main.c: 393: else
  4511                           ;main.c: 394: {
  4512                           ;main.c: 395: shrc_apaga_bit(0);
  4513  003352  0E00               	movlw	0
  4514  003354  ECD0  F019         	call	_shrc_apaga_bit
  4515  003358  0012               	return	
  4516  00335A                     __end_of_acende_led4:
  4517                           	opt stack 0
  4518                           tosu	equ	0xFFF
  4519                           tosh	equ	0xFFE
  4520                           tosl	equ	0xFFD
  4521                           pclath	equ	0xFFA
  4522                           tblptru	equ	0xFF8
  4523                           tblptrh	equ	0xFF7
  4524                           tblptrl	equ	0xFF6
  4525                           tablat	equ	0xFF5
  4526                           prodh	equ	0xFF4
  4527                           prodl	equ	0xFF3
  4528                           intcon	equ	0xFF2
  4529                           intcon2	equ	0xFF1
  4530                           intcon3	equ	0xFF0
  4531                           postinc0	equ	0xFEE
  4532                           wreg	equ	0xFE8
  4533                           postinc1	equ	0xFE6
  4534                           postdec1	equ	0xFE5
  4535                           fsr1h	equ	0xFE2
  4536                           fsr1l	equ	0xFE1
  4537                           indf2	equ	0xFDF
  4538                           postinc2	equ	0xFDE
  4539                           postdec2	equ	0xFDD
  4540                           fsr2h	equ	0xFDA
  4541                           fsr2l	equ	0xFD9
  4542                           status	equ	0xFD8
  4543                           
  4544 ;; *************** function _shrc_seta_bit *****************
  4545 ;; Defined at:
  4546 ;;		line 119 in file "bibliotecas/SHRC.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;  posicao_bit     1    wreg     unsigned char 
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;  posicao_bit     1   27[COMRAM] unsigned char 
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  1    wreg      void 
  4553 ;; Registers used:
  4554 ;;		wreg, status,2, status,0
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4560 ;;      Params:         0       0       0       0       0       0       0       0       0
  4561 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4562 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4563 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4564 ;;Total ram usage:        3 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; Hardware stack levels required when called:    2
  4567 ;; This function calls:
  4568 ;;		Nothing
  4569 ;; This function is called by:
  4570 ;;		_acende_led4
  4571 ;;		_timer_dois
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text22
  4576  0033BE                     __ptext22:
  4577                           	opt stack 0
  4578  0033BE                     _shrc_seta_bit:
  4579                           	opt stack 26
  4580                           
  4581                           ;incstack = 0
  4582                           ;shrc_seta_bit@posicao_bit stored from wreg
  4583  0033BE  6E1C               	movwf	shrc_seta_bit@posicao_bit,c
  4584                           
  4585                           ;SHRC.c: 121: dado |= (1<<posicao_bit);
  4586  0033C0  C01C  F01A         	movff	shrc_seta_bit@posicao_bit,??_shrc_seta_bit
  4587  0033C4  0E01               	movlw	1
  4588  0033C6  6E1B               	movwf	(??_shrc_seta_bit+1)& (0+255),c
  4589  0033C8  2A1A               	incf	??_shrc_seta_bit,f,c
  4590  0033CA  D002               	goto	u4844
  4591  0033CC                     u4845:
  4592  0033CC  90D8               	bcf	status,0,c
  4593  0033CE  361B               	rlcf	??_shrc_seta_bit+1,f,c
  4594  0033D0                     u4844:
  4595  0033D0  2E1A               	decfsz	??_shrc_seta_bit,f,c
  4596  0033D2  D7FC               	goto	u4845
  4597  0033D4  501B               	movf	??_shrc_seta_bit+1,w,c
  4598  0033D6  1245               	iorwf	_dado,f,c
  4599  0033D8  0012               	return		;funcret
  4600  0033DA                     __end_of_shrc_seta_bit:
  4601                           	opt stack 0
  4602                           tosu	equ	0xFFF
  4603                           tosh	equ	0xFFE
  4604                           tosl	equ	0xFFD
  4605                           pclath	equ	0xFFA
  4606                           tblptru	equ	0xFF8
  4607                           tblptrh	equ	0xFF7
  4608                           tblptrl	equ	0xFF6
  4609                           tablat	equ	0xFF5
  4610                           prodh	equ	0xFF4
  4611                           prodl	equ	0xFF3
  4612                           intcon	equ	0xFF2
  4613                           intcon2	equ	0xFF1
  4614                           intcon3	equ	0xFF0
  4615                           postinc0	equ	0xFEE
  4616                           wreg	equ	0xFE8
  4617                           postinc1	equ	0xFE6
  4618                           postdec1	equ	0xFE5
  4619                           fsr1h	equ	0xFE2
  4620                           fsr1l	equ	0xFE1
  4621                           indf2	equ	0xFDF
  4622                           postinc2	equ	0xFDE
  4623                           postdec2	equ	0xFDD
  4624                           fsr2h	equ	0xFDA
  4625                           fsr2l	equ	0xFD9
  4626                           status	equ	0xFD8
  4627                           
  4628 ;; *************** function _shrc_apaga_bit *****************
  4629 ;; Defined at:
  4630 ;;		line 124 in file "bibliotecas/SHRC.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  posicao_bit     1    wreg     unsigned char 
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;  posicao_bit     1   27[COMRAM] unsigned char 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      void 
  4637 ;; Registers used:
  4638 ;;		wreg, status,2, status,0
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4644 ;;      Params:         0       0       0       0       0       0       0       0       0
  4645 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4646 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4647 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4648 ;;Total ram usage:        3 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    2
  4651 ;; This function calls:
  4652 ;;		Nothing
  4653 ;; This function is called by:
  4654 ;;		_acende_led4
  4655 ;;		_timer_dois
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text23
  4660  0033A0                     __ptext23:
  4661                           	opt stack 0
  4662  0033A0                     _shrc_apaga_bit:
  4663                           	opt stack 26
  4664                           
  4665                           ;incstack = 0
  4666                           ;shrc_apaga_bit@posicao_bit stored from wreg
  4667  0033A0  6E1C               	movwf	shrc_apaga_bit@posicao_bit,c
  4668                           
  4669                           ;SHRC.c: 126: dado &= ~(1<<posicao_bit);
  4670  0033A2  C01C  F01A         	movff	shrc_apaga_bit@posicao_bit,??_shrc_apaga_bit
  4671  0033A6  0E01               	movlw	1
  4672  0033A8  6E1B               	movwf	(??_shrc_apaga_bit+1)& (0+255),c
  4673  0033AA  2A1A               	incf	??_shrc_apaga_bit,f,c
  4674  0033AC  D002               	goto	u4854
  4675  0033AE                     u4855:
  4676  0033AE  90D8               	bcf	status,0,c
  4677  0033B0  361B               	rlcf	??_shrc_apaga_bit+1,f,c
  4678  0033B2                     u4854:
  4679  0033B2  2E1A               	decfsz	??_shrc_apaga_bit,f,c
  4680  0033B4  D7FC               	goto	u4855
  4681  0033B6  501B               	movf	??_shrc_apaga_bit+1,w,c
  4682  0033B8  0AFF               	xorlw	255
  4683  0033BA  1645               	andwf	_dado,f,c
  4684  0033BC  0012               	return		;funcret
  4685  0033BE                     __end_of_shrc_apaga_bit:
  4686                           	opt stack 0
  4687                           tosu	equ	0xFFF
  4688                           tosh	equ	0xFFE
  4689                           tosl	equ	0xFFD
  4690                           pclath	equ	0xFFA
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           prodh	equ	0xFF4
  4696                           prodl	equ	0xFF3
  4697                           intcon	equ	0xFF2
  4698                           intcon2	equ	0xFF1
  4699                           intcon3	equ	0xFF0
  4700                           postinc0	equ	0xFEE
  4701                           wreg	equ	0xFE8
  4702                           postinc1	equ	0xFE6
  4703                           postdec1	equ	0xFE5
  4704                           fsr1h	equ	0xFE2
  4705                           fsr1l	equ	0xFE1
  4706                           indf2	equ	0xFDF
  4707                           postinc2	equ	0xFDE
  4708                           postdec2	equ	0xFDD
  4709                           fsr2h	equ	0xFDA
  4710                           fsr2l	equ	0xFD9
  4711                           status	equ	0xFD8
  4712                           
  4713 ;; *************** function _readover *****************
  4714 ;; Defined at:
  4715 ;;		line 24 in file "bibliotecas/diskio.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;  a               2   25[COMRAM] int 
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;		None
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  1    wreg      void 
  4722 ;; Registers used:
  4723 ;;		None
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4729 ;;      Params:         2       0       0       0       0       0       0       0       0
  4730 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4731 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4732 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4733 ;;Total ram usage:        2 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:    2
  4736 ;; This function calls:
  4737 ;;		Nothing
  4738 ;; This function is called by:
  4739 ;;		_SDCard
  4740 ;; This function uses a non-reentrant model
  4741 ;;
  4742                           
  4743                           	psect	text24
  4744  0034C8                     __ptext24:
  4745                           	opt stack 0
  4746  0034C8                     _readover:
  4747                           	opt stack 26
  4748                           
  4749                           ;diskio.c: 26: flag = a;
  4750                           
  4751                           ;incstack = 0
  4752  0034C8  C01A  F03B         	movff	readover@a,_flag
  4753  0034CC  C01B  F03C         	movff	readover@a+1,_flag+1
  4754  0034D0  0012               	return		;funcret
  4755  0034D2                     __end_of_readover:
  4756                           	opt stack 0
  4757                           tosu	equ	0xFFF
  4758                           tosh	equ	0xFFE
  4759                           tosl	equ	0xFFD
  4760                           pclath	equ	0xFFA
  4761                           tblptru	equ	0xFF8
  4762                           tblptrh	equ	0xFF7
  4763                           tblptrl	equ	0xFF6
  4764                           tablat	equ	0xFF5
  4765                           prodh	equ	0xFF4
  4766                           prodl	equ	0xFF3
  4767                           intcon	equ	0xFF2
  4768                           intcon2	equ	0xFF1
  4769                           intcon3	equ	0xFF0
  4770                           postinc0	equ	0xFEE
  4771                           wreg	equ	0xFE8
  4772                           postinc1	equ	0xFE6
  4773                           postdec1	equ	0xFE5
  4774                           fsr1h	equ	0xFE2
  4775                           fsr1l	equ	0xFE1
  4776                           indf2	equ	0xFDF
  4777                           postinc2	equ	0xFDE
  4778                           postdec2	equ	0xFDD
  4779                           fsr2h	equ	0xFDA
  4780                           fsr2l	equ	0xFD9
  4781                           status	equ	0xFD8
  4782                           
  4783 ;; *************** function _pf_write *****************
  4784 ;; Defined at:
  4785 ;;		line 919 in file "bibliotecas/pff.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;  buff            2   58[BANK0 ] PTR const void 
  4788 ;;		 -> STR_14(8), 
  4789 ;;  btw             2   60[BANK0 ] unsigned int 
  4790 ;;  bw              2   62[BANK0 ] PTR unsigned int 
  4791 ;;		 -> SDCard@br(2), 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  clst            4   82[BANK0 ] unsigned long 
  4794 ;;  remain          4   78[BANK0 ] unsigned long 
  4795 ;;  sect            4   74[BANK0 ] unsigned long 
  4796 ;;  fs              2   89[BANK0 ] PTR struct .
  4797 ;;		 -> SDCard@fs(42), NULL(0), 
  4798 ;;  wcnt            2   87[BANK0 ] unsigned int 
  4799 ;;  p               2   72[BANK0 ] PTR const unsigned char 
  4800 ;;		 -> STR_14(8), 
  4801 ;;  cs              1   86[BANK0 ] unsigned char 
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      enum E43
  4804 ;; Registers used:
  4805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4811 ;;      Params:         0       6       0       0       0       0       0       0       0
  4812 ;;      Locals:         0      19       0       0       0       0       0       0       0
  4813 ;;      Temps:          0       8       0       0       0       0       0       0       0
  4814 ;;      Totals:         0      33       0       0       0       0       0       0       0
  4815 ;;Total ram usage:       33 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    7
  4818 ;; This function calls:
  4819 ;;		_clust2sect
  4820 ;;		_disk_writep
  4821 ;;		_get_fat
  4822 ;; This function is called by:
  4823 ;;		_SDCard
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           	psect	text25
  4828  000646                     __ptext25:
  4829                           	opt stack 0
  4830  000646                     _pf_write:
  4831                           	opt stack 21
  4832                           
  4833                           ;pff.c: 925: DWORD clst;
  4834                           ;pff.c: 926: DWORD sect, remain;
  4835                           ;pff.c: 927: const BYTE *p = buff;
  4836                           
  4837                           ;incstack = 0
  4838  000646  C09A  F0A8         	movff	pf_write@buff,pf_write@p
  4839  00064A  C09B  F0A9         	movff	pf_write@buff+1,pf_write@p+1
  4840                           
  4841                           ;pff.c: 928: BYTE cs;
  4842                           ;pff.c: 929: UINT wcnt;
  4843                           ;pff.c: 930: FATFS *fs = FatFs;
  4844  00064E  C039  F0B9         	movff	_FatFs,pf_write@fs
  4845  000652  C03A  F0BA         	movff	_FatFs+1,pf_write@fs+1
  4846                           
  4847                           ;pff.c: 933: *bw = 0;
  4848  000656  C09E  FFD9         	movff	pf_write@bw,fsr2l
  4849  00065A  C09F  FFDA         	movff	pf_write@bw+1,fsr2h
  4850  00065E  0E00               	movlw	0
  4851  000660  6EDE               	movwf	postinc2,c
  4852  000662  0E00               	movlw	0
  4853  000664  6EDD               	movwf	postdec2,c
  4854                           
  4855                           ;pff.c: 934: if (!fs) return FR_NOT_ENABLED;
  4856  000666  0100               	movlb	0	; () banked
  4857  000668  51B9               	movf	pf_write@fs& (0+255),w,b
  4858  00066A  11BA               	iorwf	(pf_write@fs+1)& (0+255),w,b
  4859  00066C  A4D8               	btfss	status,2,c
  4860  00066E  D002               	goto	l821
  4861                           
  4862                           ; BSR set to: 0
  4863  000670  0E05               	movlw	5
  4864                           
  4865                           ; BSR set to: 0
  4866  000672  0012               	return	
  4867  000674                     l821:
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;pff.c: 935: if (!(fs->flag & 0x01))
  4871                           
  4872                           ; BSR set to: 0
  4873  000674  EE20 F001          	lfsr	2,1
  4874  000678  51B9               	movf	pf_write@fs& (0+255),w,b
  4875  00067A  26D9               	addwf	fsr2l,f,c
  4876  00067C  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4877  00067E  22DA               	addwfc	fsr2h,f,c
  4878  000680  B0DF               	btfsc	indf2,0,c
  4879  000682  D002               	goto	l823
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;pff.c: 936: return FR_NOT_OPENED;
  4883  000684  0E04               	movlw	4
  4884                           
  4885                           ; BSR set to: 0
  4886  000686  0012               	return	
  4887  000688                     l823:
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;pff.c: 938: if (!btw) {
  4891                           
  4892                           ; BSR set to: 0
  4893  000688  519C               	movf	pf_write@btw& (0+255),w,b
  4894  00068A  119D               	iorwf	(pf_write@btw+1)& (0+255),w,b
  4895  00068C  A4D8               	btfss	status,2,c
  4896  00068E  D031               	goto	l824
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;pff.c: 939: if ((fs->flag & 0x40) && disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_E
      +                          RR;};
  4900  000690  EE20 F001          	lfsr	2,1
  4901  000694  51B9               	movf	pf_write@fs& (0+255),w,b
  4902  000696  26D9               	addwf	fsr2l,f,c
  4903  000698  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4904  00069A  22DA               	addwfc	fsr2h,f,c
  4905  00069C  ACDF               	btfss	indf2,6,c
  4906  00069E  D01E               	goto	l825
  4907                           
  4908                           ; BSR set to: 0
  4909  0006A0  0E00               	movlw	0
  4910  0006A2  6E26               	movwf	disk_writep@wr,c
  4911  0006A4  0E00               	movlw	0
  4912  0006A6  6E27               	movwf	disk_writep@wr+1,c
  4913  0006A8  0E00               	movlw	0
  4914  0006AA  6E28               	movwf	disk_writep@wr+2,c
  4915  0006AC  0E00               	movlw	0
  4916  0006AE  6E29               	movwf	disk_writep@sc,c
  4917  0006B0  0E00               	movlw	0
  4918  0006B2  6E2A               	movwf	disk_writep@sc+1,c
  4919  0006B4  0E00               	movlw	0
  4920  0006B6  6E2B               	movwf	disk_writep@sc+2,c
  4921  0006B8  0E00               	movlw	0
  4922  0006BA  6E2C               	movwf	disk_writep@sc+3,c
  4923  0006BC  ECED  F00F         	call	_disk_writep	;wreg free
  4924  0006C0  0900               	iorlw	0
  4925  0006C2  B4D8               	btfsc	status,2,c
  4926  0006C4  D00B               	goto	l825
  4927  0006C6  0100               	movlb	0	; () banked
  4928  0006C8  EE20 F001          	lfsr	2,1
  4929  0006CC  51B9               	movf	pf_write@fs& (0+255),w,b
  4930  0006CE  26D9               	addwf	fsr2l,f,c
  4931  0006D0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4932  0006D2  22DA               	addwfc	fsr2h,f,c
  4933  0006D4  0E00               	movlw	0
  4934  0006D6  6EDF               	movwf	indf2,c
  4935                           
  4936                           ; BSR set to: 0
  4937  0006D8  0E01               	movlw	1
  4938                           
  4939                           ; BSR set to: 0
  4940  0006DA  0012               	return	
  4941  0006DC                     l825:
  4942                           
  4943                           ;pff.c: 940: fs->flag &= ~0x40;
  4944                           
  4945                           ; BSR set to: 0
  4946  0006DC  0100               	movlb	0	; () banked
  4947  0006DE  EE20 F001          	lfsr	2,1
  4948  0006E2  51B9               	movf	pf_write@fs& (0+255),w,b
  4949  0006E4  26D9               	addwf	fsr2l,f,c
  4950  0006E6  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4951  0006E8  22DA               	addwfc	fsr2h,f,c
  4952  0006EA  0EBF               	movlw	191
  4953  0006EC  16DF               	andwf	indf2,f,c
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;pff.c: 941: return FR_OK;
  4957  0006EE  0E00               	movlw	0
  4958                           
  4959                           ; BSR set to: 0
  4960  0006F0  0012               	return	
  4961  0006F2                     l824:
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;pff.c: 943: if (!(fs->flag & 0x40))
  4965                           
  4966                           ; BSR set to: 0
  4967  0006F2  EE20 F001          	lfsr	2,1
  4968  0006F6  51B9               	movf	pf_write@fs& (0+255),w,b
  4969  0006F8  26D9               	addwf	fsr2l,f,c
  4970  0006FA  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4971  0006FC  22DA               	addwfc	fsr2h,f,c
  4972  0006FE  BCDF               	btfsc	indf2,6,c
  4973  000700  D00E               	goto	l827
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;pff.c: 944: fs->fptr &= 0xFFFFFE00;
  4977  000702  EE20 F016          	lfsr	2,22
  4978  000706  51B9               	movf	pf_write@fs& (0+255),w,b
  4979  000708  26D9               	addwf	fsr2l,f,c
  4980  00070A  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  4981  00070C  22DA               	addwfc	fsr2h,f,c
  4982  00070E  0E00               	movlw	0
  4983  000710  16DE               	andwf	postinc2,f,c
  4984  000712  0EFE               	movlw	254
  4985  000714  16DE               	andwf	postinc2,f,c
  4986  000716  0EFF               	movlw	255
  4987  000718  16DE               	andwf	postinc2,f,c
  4988  00071A  0EFF               	movlw	255
  4989  00071C  16DE               	andwf	postinc2,f,c
  4990  00071E                     l827:
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;pff.c: 945: }
  4994                           ;pff.c: 946: remain = fs->fsize - fs->fptr;
  4995                           
  4996                           ; BSR set to: 0
  4997  00071E  EE20 F01A          	lfsr	2,26
  4998  000722  51B9               	movf	pf_write@fs& (0+255),w,b
  4999  000724  26D9               	addwf	fsr2l,f,c
  5000  000726  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5001  000728  22DA               	addwfc	fsr2h,f,c
  5002  00072A  CFDE F0A0          	movff	postinc2,??_pf_write
  5003  00072E  CFDE F0A1          	movff	postinc2,??_pf_write+1
  5004  000732  CFDE F0A2          	movff	postinc2,??_pf_write+2
  5005  000736  CFDE F0A3          	movff	postinc2,??_pf_write+3
  5006  00073A  EE20 F016          	lfsr	2,22
  5007  00073E  51B9               	movf	pf_write@fs& (0+255),w,b
  5008  000740  26D9               	addwf	fsr2l,f,c
  5009  000742  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5010  000744  22DA               	addwfc	fsr2h,f,c
  5011  000746  CFDE F0A4          	movff	postinc2,??_pf_write+4
  5012  00074A  CFDE F0A5          	movff	postinc2,??_pf_write+5
  5013  00074E  CFDE F0A6          	movff	postinc2,??_pf_write+6
  5014  000752  CFDE F0A7          	movff	postinc2,??_pf_write+7
  5015  000756  1FA4               	comf	(??_pf_write+4)& (0+255),f,b
  5016  000758  1FA5               	comf	(??_pf_write+5)& (0+255),f,b
  5017  00075A  1FA6               	comf	(??_pf_write+6)& (0+255),f,b
  5018  00075C  1FA7               	comf	(??_pf_write+7)& (0+255),f,b
  5019  00075E  2BA4               	incf	(??_pf_write+4)& (0+255),f,b
  5020  000760  0E00               	movlw	0
  5021  000762  23A5               	addwfc	(??_pf_write+5)& (0+255),f,b
  5022  000764  23A6               	addwfc	(??_pf_write+6)& (0+255),f,b
  5023  000766  23A7               	addwfc	(??_pf_write+7)& (0+255),f,b
  5024  000768  51A0               	movf	??_pf_write& (0+255),w,b
  5025  00076A  25A4               	addwf	(??_pf_write+4)& (0+255),w,b
  5026  00076C  6FAE               	movwf	pf_write@remain& (0+255),b
  5027  00076E  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  5028  000770  21A5               	addwfc	(??_pf_write+5)& (0+255),w,b
  5029  000772  6FAF               	movwf	(pf_write@remain+1)& (0+255),b
  5030  000774  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  5031  000776  21A6               	addwfc	(??_pf_write+6)& (0+255),w,b
  5032  000778  6FB0               	movwf	(pf_write@remain+2)& (0+255),b
  5033  00077A  51A3               	movf	(??_pf_write+3)& (0+255),w,b
  5034  00077C  21A7               	addwfc	(??_pf_write+7)& (0+255),w,b
  5035  00077E  6FB1               	movwf	(pf_write@remain+3)& (0+255),b
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;pff.c: 947: if (btw > remain) btw = (UINT)remain;
  5039  000780  519C               	movf	pf_write@btw& (0+255),w,b
  5040  000782  6FA0               	movwf	??_pf_write& (0+255),b
  5041  000784  519D               	movf	(pf_write@btw+1)& (0+255),w,b
  5042  000786  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  5043  000788  6BA2               	clrf	(??_pf_write+2)& (0+255),b
  5044  00078A  6BA3               	clrf	(??_pf_write+3)& (0+255),b
  5045  00078C  51A0               	movf	??_pf_write& (0+255),w,b
  5046  00078E  5DAE               	subwf	pf_write@remain& (0+255),w,b
  5047  000790  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  5048  000792  59AF               	subwfb	(pf_write@remain+1)& (0+255),w,b
  5049  000794  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  5050  000796  59B0               	subwfb	(pf_write@remain+2)& (0+255),w,b
  5051  000798  51A3               	movf	(??_pf_write+3)& (0+255),w,b
  5052  00079A  59B1               	subwfb	(pf_write@remain+3)& (0+255),w,b
  5053  00079C  B0D8               	btfsc	status,0,c
  5054  00079E  D1AC               	goto	l840
  5055                           
  5056                           ; BSR set to: 0
  5057  0007A0  C0AE  F09C         	movff	pf_write@remain,pf_write@btw
  5058  0007A4  C0AF  F09D         	movff	pf_write@remain+1,pf_write@btw+1
  5059                           
  5060                           ; BSR set to: 0
  5061                           ;pff.c: 949: while (btw) {
  5062  0007A8  D1A7               	goto	l840
  5063  0007AA                     
  5064                           ; BSR set to: 0
  5065                           ;pff.c: 950: if ((UINT)fs->fptr % 512 == 0) {
  5066                           
  5067                           ; BSR set to: 0
  5068  0007AA  0EFF               	movlw	255
  5069  0007AC  6FA0               	movwf	??_pf_write& (0+255),b
  5070  0007AE  0E01               	movlw	1
  5071  0007B0  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  5072  0007B2  EE20 F016          	lfsr	2,22
  5073  0007B6  51B9               	movf	pf_write@fs& (0+255),w,b
  5074  0007B8  26D9               	addwf	fsr2l,f,c
  5075  0007BA  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5076  0007BC  22DA               	addwfc	fsr2h,f,c
  5077  0007BE  CFDE F0A2          	movff	postinc2,??_pf_write+2
  5078  0007C2  CFDD F0A3          	movff	postdec2,??_pf_write+3
  5079  0007C6  51A0               	movf	??_pf_write& (0+255),w,b
  5080  0007C8  17A2               	andwf	(??_pf_write+2)& (0+255),f,b
  5081  0007CA  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  5082  0007CC  17A3               	andwf	(??_pf_write+3)& (0+255),f,b
  5083  0007CE  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  5084  0007D0  11A3               	iorwf	(??_pf_write+3)& (0+255),w,b
  5085  0007D2  A4D8               	btfss	status,2,c
  5086  0007D4  D0E9               	goto	l831
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;pff.c: 951: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  5090  0007D6  EE20 F016          	lfsr	2,22
  5091  0007DA  51B9               	movf	pf_write@fs& (0+255),w,b
  5092  0007DC  26D9               	addwf	fsr2l,f,c
  5093  0007DE  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5094  0007E0  22DA               	addwfc	fsr2h,f,c
  5095  0007E2  CFDE F0A0          	movff	postinc2,??_pf_write
  5096  0007E6  CFDE F0A1          	movff	postinc2,??_pf_write+1
  5097  0007EA  CFDE F0A2          	movff	postinc2,??_pf_write+2
  5098  0007EE  CFDE F0A3          	movff	postinc2,??_pf_write+3
  5099  0007F2  0E0A               	movlw	10
  5100  0007F4  D005               	goto	u8410
  5101  0007F6                     u8415:
  5102  0007F6  90D8               	bcf	status,0,c
  5103  0007F8  33A3               	rrcf	(??_pf_write+3)& (0+255),f,b
  5104  0007FA  33A2               	rrcf	(??_pf_write+2)& (0+255),f,b
  5105  0007FC  33A1               	rrcf	(??_pf_write+1)& (0+255),f,b
  5106  0007FE  33A0               	rrcf	??_pf_write& (0+255),f,b
  5107  000800                     u8410:
  5108  000800  2EE8               	decfsz	wreg,f,c
  5109  000802  D7F9               	goto	u8415
  5110  000804  EE20 F002          	lfsr	2,2
  5111  000808  51B9               	movf	pf_write@fs& (0+255),w,b
  5112  00080A  26D9               	addwf	fsr2l,f,c
  5113  00080C  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5114  00080E  22DA               	addwfc	fsr2h,f,c
  5115  000810  50DF               	movf	indf2,w,c
  5116  000812  6FA4               	movwf	(??_pf_write+4)& (0+255),b
  5117  000814  05A4               	decf	(??_pf_write+4)& (0+255),w,b
  5118  000816  15A0               	andwf	??_pf_write& (0+255),w,b
  5119  000818  6FB6               	movwf	pf_write@cs& (0+255),b
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;pff.c: 952: if (!cs) {
  5123  00081A  51B6               	movf	pf_write@cs& (0+255),w,b
  5124  00081C  A4D8               	btfss	status,2,c
  5125  00081E  D054               	goto	l832
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;pff.c: 953: if (fs->fptr == 0)
  5129  000820  EE20 F016          	lfsr	2,22
  5130  000824  51B9               	movf	pf_write@fs& (0+255),w,b
  5131  000826  26D9               	addwf	fsr2l,f,c
  5132  000828  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5133  00082A  22DA               	addwfc	fsr2h,f,c
  5134  00082C  50DE               	movf	postinc2,w,c
  5135  00082E  10DE               	iorwf	postinc2,w,c
  5136  000830  10DE               	iorwf	postinc2,w,c
  5137  000832  10DE               	iorwf	postinc2,w,c
  5138  000834  A4D8               	btfss	status,2,c
  5139  000836  D00F               	goto	l833
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;pff.c: 954: clst = fs->org_clust;
  5143  000838  EE20 F01E          	lfsr	2,30
  5144  00083C  51B9               	movf	pf_write@fs& (0+255),w,b
  5145  00083E  26D9               	addwf	fsr2l,f,c
  5146  000840  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5147  000842  22DA               	addwfc	fsr2h,f,c
  5148  000844  CFDE F0B2          	movff	postinc2,pf_write@clst
  5149  000848  CFDE F0B3          	movff	postinc2,pf_write@clst+1
  5150  00084C  CFDE F0B4          	movff	postinc2,pf_write@clst+2
  5151  000850  CFDE F0B5          	movff	postinc2,pf_write@clst+3
  5152  000854  D018               	goto	l834
  5153  000856                     l833:
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;pff.c: 955: else
  5157                           ;pff.c: 956: clst = get_fat(fs->curr_clust);
  5158                           
  5159                           ; BSR set to: 0
  5160  000856  EE20 F022          	lfsr	2,34
  5161  00085A  51B9               	movf	pf_write@fs& (0+255),w,b
  5162  00085C  26D9               	addwf	fsr2l,f,c
  5163  00085E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5164  000860  22DA               	addwfc	fsr2h,f,c
  5165  000862  CFDE F072          	movff	postinc2,get_fat@clst
  5166  000866  CFDE F073          	movff	postinc2,get_fat@clst+1
  5167  00086A  CFDE F074          	movff	postinc2,get_fat@clst+2
  5168  00086E  CFDE F075          	movff	postinc2,get_fat@clst+3
  5169  000872  EC82  F005         	call	_get_fat	;wreg free
  5170  000876  C072  F0B2         	movff	?_get_fat,pf_write@clst
  5171  00087A  C073  F0B3         	movff	?_get_fat+1,pf_write@clst+1
  5172  00087E  C074  F0B4         	movff	?_get_fat+2,pf_write@clst+2
  5173  000882  C075  F0B5         	movff	?_get_fat+3,pf_write@clst+3
  5174  000886                     l834:
  5175                           
  5176                           ;pff.c: 957: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  5177  000886  0100               	movlb	0	; () banked
  5178  000888  51B5               	movf	(pf_write@clst+3)& (0+255),w,b
  5179  00088A  11B4               	iorwf	(pf_write@clst+2)& (0+255),w,b
  5180  00088C  11B3               	iorwf	(pf_write@clst+1)& (0+255),w,b
  5181  00088E  E10E               	bnz	l7487
  5182  000890  0E02               	movlw	2
  5183  000892  5DB2               	subwf	pf_write@clst& (0+255),w,b
  5184  000894  B0D8               	btfsc	status,0,c
  5185  000896  D00A               	goto	l835
  5186                           
  5187                           ; BSR set to: 0
  5188  000898  EE20 F001          	lfsr	2,1
  5189  00089C  51B9               	movf	pf_write@fs& (0+255),w,b
  5190  00089E  26D9               	addwf	fsr2l,f,c
  5191  0008A0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5192  0008A2  22DA               	addwfc	fsr2h,f,c
  5193  0008A4  0E00               	movlw	0
  5194  0008A6  6EDF               	movwf	indf2,c
  5195                           
  5196                           ; BSR set to: 0
  5197  0008A8  0E01               	movlw	1
  5198                           
  5199                           ; BSR set to: 0
  5200  0008AA  0012               	return	
  5201  0008AC                     l835:
  5202  0008AC                     l7487:
  5203                           
  5204                           ; BSR set to: 0
  5205                           ;pff.c: 958: fs->curr_clust = clst;
  5206  0008AC  EE20 F022          	lfsr	2,34
  5207  0008B0  51B9               	movf	pf_write@fs& (0+255),w,b
  5208  0008B2  26D9               	addwf	fsr2l,f,c
  5209  0008B4  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5210  0008B6  22DA               	addwfc	fsr2h,f,c
  5211  0008B8  C0B2  FFDE         	movff	pf_write@clst,postinc2
  5212  0008BC  C0B3  FFDE         	movff	pf_write@clst+1,postinc2
  5213  0008C0  C0B4  FFDE         	movff	pf_write@clst+2,postinc2
  5214  0008C4  C0B5  FFDE         	movff	pf_write@clst+3,postinc2
  5215  0008C8                     l832:
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;pff.c: 959: }
  5219                           ;pff.c: 960: sect = clust2sect(fs->curr_clust);
  5220                           
  5221                           ; BSR set to: 0
  5222  0008C8  EE20 F022          	lfsr	2,34
  5223  0008CC  51B9               	movf	pf_write@fs& (0+255),w,b
  5224  0008CE  26D9               	addwf	fsr2l,f,c
  5225  0008D0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5226  0008D2  22DA               	addwfc	fsr2h,f,c
  5227  0008D4  CFDE F026          	movff	postinc2,clust2sect@clst
  5228  0008D8  CFDE F027          	movff	postinc2,clust2sect@clst+1
  5229  0008DC  CFDE F028          	movff	postinc2,clust2sect@clst+2
  5230  0008E0  CFDE F029          	movff	postinc2,clust2sect@clst+3
  5231  0008E4  ECB3  F014         	call	_clust2sect	;wreg free
  5232  0008E8  C026  F0AA         	movff	?_clust2sect,pf_write@sect
  5233  0008EC  C027  F0AB         	movff	?_clust2sect+1,pf_write@sect+1
  5234  0008F0  C028  F0AC         	movff	?_clust2sect+2,pf_write@sect+2
  5235  0008F4  C029  F0AD         	movff	?_clust2sect+3,pf_write@sect+3
  5236                           
  5237                           ;pff.c: 961: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  5238  0008F8  0100               	movlb	0	; () banked
  5239  0008FA  51AA               	movf	pf_write@sect& (0+255),w,b
  5240  0008FC  11AB               	iorwf	(pf_write@sect+1)& (0+255),w,b
  5241  0008FE  11AC               	iorwf	(pf_write@sect+2)& (0+255),w,b
  5242  000900  11AD               	iorwf	(pf_write@sect+3)& (0+255),w,b
  5243  000902  A4D8               	btfss	status,2,c
  5244  000904  D00A               	goto	l836
  5245                           
  5246                           ; BSR set to: 0
  5247  000906  EE20 F001          	lfsr	2,1
  5248  00090A  51B9               	movf	pf_write@fs& (0+255),w,b
  5249  00090C  26D9               	addwf	fsr2l,f,c
  5250  00090E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5251  000910  22DA               	addwfc	fsr2h,f,c
  5252  000912  0E00               	movlw	0
  5253  000914  6EDF               	movwf	indf2,c
  5254                           
  5255                           ; BSR set to: 0
  5256  000916  0E01               	movlw	1
  5257                           
  5258                           ; BSR set to: 0
  5259  000918  0012               	return	
  5260  00091A                     l836:
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;pff.c: 962: fs->dsect = sect + cs;
  5264                           
  5265                           ; BSR set to: 0
  5266  00091A  51B6               	movf	pf_write@cs& (0+255),w,b
  5267  00091C  25AA               	addwf	pf_write@sect& (0+255),w,b
  5268  00091E  6FA0               	movwf	??_pf_write& (0+255),b
  5269  000920  0E00               	movlw	0
  5270  000922  21AB               	addwfc	(pf_write@sect+1)& (0+255),w,b
  5271  000924  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  5272  000926  0E00               	movlw	0
  5273  000928  21AC               	addwfc	(pf_write@sect+2)& (0+255),w,b
  5274  00092A  6FA2               	movwf	(??_pf_write+2)& (0+255),b
  5275  00092C  0E00               	movlw	0
  5276  00092E  21AD               	addwfc	(pf_write@sect+3)& (0+255),w,b
  5277  000930  6FA3               	movwf	(??_pf_write+3)& (0+255),b
  5278  000932  EE20 F026          	lfsr	2,38
  5279  000936  51B9               	movf	pf_write@fs& (0+255),w,b
  5280  000938  26D9               	addwf	fsr2l,f,c
  5281  00093A  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5282  00093C  22DA               	addwfc	fsr2h,f,c
  5283  00093E  C0A0  FFDE         	movff	??_pf_write,postinc2
  5284  000942  C0A1  FFDE         	movff	??_pf_write+1,postinc2
  5285  000946  C0A2  FFDE         	movff	??_pf_write+2,postinc2
  5286  00094A  C0A3  FFDE         	movff	??_pf_write+3,postinc2
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;pff.c: 963: if (disk_writep(0, fs->dsect)) {fs->flag = 0; return FR_DISK_ERR;};
  5290  00094E  0E00               	movlw	0
  5291  000950  6E26               	movwf	disk_writep@wr,c
  5292  000952  0E00               	movlw	0
  5293  000954  6E27               	movwf	disk_writep@wr+1,c
  5294  000956  0E00               	movlw	0
  5295  000958  6E28               	movwf	disk_writep@wr+2,c
  5296  00095A  EE20 F026          	lfsr	2,38
  5297  00095E  51B9               	movf	pf_write@fs& (0+255),w,b
  5298  000960  26D9               	addwf	fsr2l,f,c
  5299  000962  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5300  000964  22DA               	addwfc	fsr2h,f,c
  5301  000966  CFDE F029          	movff	postinc2,disk_writep@sc
  5302  00096A  CFDE F02A          	movff	postinc2,disk_writep@sc+1
  5303  00096E  CFDE F02B          	movff	postinc2,disk_writep@sc+2
  5304  000972  CFDE F02C          	movff	postinc2,disk_writep@sc+3
  5305  000976  ECED  F00F         	call	_disk_writep	;wreg free
  5306  00097A  0900               	iorlw	0
  5307  00097C  B4D8               	btfsc	status,2,c
  5308  00097E  D00B               	goto	l837
  5309  000980  0100               	movlb	0	; () banked
  5310  000982  EE20 F001          	lfsr	2,1
  5311  000986  51B9               	movf	pf_write@fs& (0+255),w,b
  5312  000988  26D9               	addwf	fsr2l,f,c
  5313  00098A  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5314  00098C  22DA               	addwfc	fsr2h,f,c
  5315  00098E  0E00               	movlw	0
  5316  000990  6EDF               	movwf	indf2,c
  5317                           
  5318                           ; BSR set to: 0
  5319  000992  0E01               	movlw	1
  5320                           
  5321                           ; BSR set to: 0
  5322  000994  0012               	return	
  5323  000996                     l837:
  5324                           
  5325                           ;pff.c: 964: fs->flag |= 0x40;
  5326                           
  5327                           ; BSR set to: 0
  5328  000996  0100               	movlb	0	; () banked
  5329  000998  EE20 F001          	lfsr	2,1
  5330  00099C  51B9               	movf	pf_write@fs& (0+255),w,b
  5331  00099E  26D9               	addwf	fsr2l,f,c
  5332  0009A0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5333  0009A2  22DA               	addwfc	fsr2h,f,c
  5334  0009A4  0E00               	movlw	0
  5335  0009A6  8CDB               	bsf	plusw2,6,c
  5336  0009A8                     l831:
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;pff.c: 965: }
  5340                           ;pff.c: 966: wcnt = 512 - (UINT)fs->fptr % 512;
  5341  0009A8  0EFF               	movlw	255
  5342  0009AA  6FA0               	movwf	??_pf_write& (0+255),b
  5343  0009AC  0E01               	movlw	1
  5344  0009AE  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  5345  0009B0  EE20 F016          	lfsr	2,22
  5346  0009B4  51B9               	movf	pf_write@fs& (0+255),w,b
  5347  0009B6  26D9               	addwf	fsr2l,f,c
  5348  0009B8  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5349  0009BA  22DA               	addwfc	fsr2h,f,c
  5350  0009BC  CFDE F0A2          	movff	postinc2,??_pf_write+2
  5351  0009C0  CFDD F0A3          	movff	postdec2,??_pf_write+3
  5352  0009C4  51A0               	movf	??_pf_write& (0+255),w,b
  5353  0009C6  17A2               	andwf	(??_pf_write+2)& (0+255),f,b
  5354  0009C8  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  5355  0009CA  17A3               	andwf	(??_pf_write+3)& (0+255),f,b
  5356  0009CC  1FA2               	comf	(??_pf_write+2)& (0+255),f,b
  5357  0009CE  1FA3               	comf	(??_pf_write+3)& (0+255),f,b
  5358  0009D0  4BA2               	infsnz	(??_pf_write+2)& (0+255),f,b
  5359  0009D2  2BA3               	incf	(??_pf_write+3)& (0+255),f,b
  5360  0009D4  0E00               	movlw	0
  5361  0009D6  25A2               	addwf	(??_pf_write+2)& (0+255),w,b
  5362  0009D8  6FB7               	movwf	pf_write@wcnt& (0+255),b
  5363  0009DA  0E02               	movlw	2
  5364  0009DC  21A3               	addwfc	(??_pf_write+3)& (0+255),w,b
  5365  0009DE  6FB8               	movwf	(pf_write@wcnt+1)& (0+255),b
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;pff.c: 967: if (wcnt > btw)wcnt = btw;
  5369  0009E0  51B7               	movf	pf_write@wcnt& (0+255),w,b
  5370  0009E2  5D9C               	subwf	pf_write@btw& (0+255),w,b
  5371  0009E4  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5372  0009E6  599D               	subwfb	(pf_write@btw+1)& (0+255),w,b
  5373  0009E8  B0D8               	btfsc	status,0,c
  5374  0009EA  D004               	goto	l838
  5375                           
  5376                           ; BSR set to: 0
  5377  0009EC  C09C  F0B7         	movff	pf_write@btw,pf_write@wcnt
  5378  0009F0  C09D  F0B8         	movff	pf_write@btw+1,pf_write@wcnt+1
  5379  0009F4                     l838:
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;pff.c: 968: if (disk_writep(p, fs->dsect )) {fs->flag = 0; return FR_DISK_ERR;};
  5383                           
  5384                           ; BSR set to: 0
  5385  0009F4  C0A8  F026         	movff	pf_write@p,disk_writep@wr
  5386  0009F8  C0A9  F027         	movff	pf_write@p+1,disk_writep@wr+1
  5387  0009FC  5026               	movf	disk_writep@wr,w,c
  5388  0009FE  1027               	iorwf	disk_writep@wr+1,w,c
  5389  000A00  A4D8               	btfss	status,2,c
  5390  000A02  0E00               	movlw	low (__mediumconst shr (0+16))
  5391  000A04  6E28               	movwf	disk_writep@wr+2,c
  5392  000A06  EE20 F026          	lfsr	2,38
  5393  000A0A  51B9               	movf	pf_write@fs& (0+255),w,b
  5394  000A0C  26D9               	addwf	fsr2l,f,c
  5395  000A0E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5396  000A10  22DA               	addwfc	fsr2h,f,c
  5397  000A12  CFDE F029          	movff	postinc2,disk_writep@sc
  5398  000A16  CFDE F02A          	movff	postinc2,disk_writep@sc+1
  5399  000A1A  CFDE F02B          	movff	postinc2,disk_writep@sc+2
  5400  000A1E  CFDE F02C          	movff	postinc2,disk_writep@sc+3
  5401  000A22  ECED  F00F         	call	_disk_writep	;wreg free
  5402  000A26  0900               	iorlw	0
  5403  000A28  B4D8               	btfsc	status,2,c
  5404  000A2A  D00B               	goto	l839
  5405  000A2C  0100               	movlb	0	; () banked
  5406  000A2E  EE20 F001          	lfsr	2,1
  5407  000A32  51B9               	movf	pf_write@fs& (0+255),w,b
  5408  000A34  26D9               	addwf	fsr2l,f,c
  5409  000A36  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5410  000A38  22DA               	addwfc	fsr2h,f,c
  5411  000A3A  0E00               	movlw	0
  5412  000A3C  6EDF               	movwf	indf2,c
  5413                           
  5414                           ; BSR set to: 0
  5415  000A3E  0E01               	movlw	1
  5416                           
  5417                           ; BSR set to: 0
  5418  000A40  0012               	return	
  5419  000A42                     l839:
  5420                           
  5421                           ;pff.c: 969: fs->fptr += wcnt; p += wcnt;
  5422                           
  5423                           ; BSR set to: 0
  5424  000A42  0100               	movlb	0	; () banked
  5425  000A44  EE20 F016          	lfsr	2,22
  5426  000A48  51B9               	movf	pf_write@fs& (0+255),w,b
  5427  000A4A  26D9               	addwf	fsr2l,f,c
  5428  000A4C  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5429  000A4E  22DA               	addwfc	fsr2h,f,c
  5430  000A50  51B7               	movf	pf_write@wcnt& (0+255),w,b
  5431  000A52  26DE               	addwf	postinc2,f,c
  5432  000A54  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5433  000A56  22DE               	addwfc	postinc2,f,c
  5434  000A58  0E00               	movlw	0
  5435  000A5A  22DE               	addwfc	postinc2,f,c
  5436  000A5C  22DE               	addwfc	postinc2,f,c
  5437                           
  5438                           ; BSR set to: 0
  5439  000A5E  51B7               	movf	pf_write@wcnt& (0+255),w,b
  5440  000A60  27A8               	addwf	pf_write@p& (0+255),f,b
  5441  000A62  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5442  000A64  23A9               	addwfc	(pf_write@p+1)& (0+255),f,b
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;pff.c: 970: btw -= wcnt; *bw += wcnt;
  5446  000A66  51B7               	movf	pf_write@wcnt& (0+255),w,b
  5447  000A68  5F9C               	subwf	pf_write@btw& (0+255),f,b
  5448  000A6A  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5449  000A6C  5B9D               	subwfb	(pf_write@btw+1)& (0+255),f,b
  5450                           
  5451                           ; BSR set to: 0
  5452  000A6E  C09E  FFD9         	movff	pf_write@bw,fsr2l
  5453  000A72  C09F  FFDA         	movff	pf_write@bw+1,fsr2h
  5454  000A76  51B7               	movf	pf_write@wcnt& (0+255),w,b
  5455  000A78  26DE               	addwf	postinc2,f,c
  5456  000A7A  51B8               	movf	(pf_write@wcnt+1)& (0+255),w,b
  5457  000A7C  22DD               	addwfc	postdec2,f,c
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;pff.c: 971: if ((UINT)fs->fptr % 512 == 0) {
  5461  000A7E  0EFF               	movlw	255
  5462  000A80  6FA0               	movwf	??_pf_write& (0+255),b
  5463  000A82  0E01               	movlw	1
  5464  000A84  6FA1               	movwf	(??_pf_write+1)& (0+255),b
  5465  000A86  EE20 F016          	lfsr	2,22
  5466  000A8A  51B9               	movf	pf_write@fs& (0+255),w,b
  5467  000A8C  26D9               	addwf	fsr2l,f,c
  5468  000A8E  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5469  000A90  22DA               	addwfc	fsr2h,f,c
  5470  000A92  CFDE F0A2          	movff	postinc2,??_pf_write+2
  5471  000A96  CFDD F0A3          	movff	postdec2,??_pf_write+3
  5472  000A9A  51A0               	movf	??_pf_write& (0+255),w,b
  5473  000A9C  17A2               	andwf	(??_pf_write+2)& (0+255),f,b
  5474  000A9E  51A1               	movf	(??_pf_write+1)& (0+255),w,b
  5475  000AA0  17A3               	andwf	(??_pf_write+3)& (0+255),f,b
  5476  000AA2  51A2               	movf	(??_pf_write+2)& (0+255),w,b
  5477  000AA4  11A3               	iorwf	(??_pf_write+3)& (0+255),w,b
  5478  000AA6  A4D8               	btfss	status,2,c
  5479  000AA8  D027               	goto	l840
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;pff.c: 972: if (disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_ERR;};
  5483  000AAA  0E00               	movlw	0
  5484  000AAC  6E26               	movwf	disk_writep@wr,c
  5485  000AAE  0E00               	movlw	0
  5486  000AB0  6E27               	movwf	disk_writep@wr+1,c
  5487  000AB2  0E00               	movlw	0
  5488  000AB4  6E28               	movwf	disk_writep@wr+2,c
  5489  000AB6  0E00               	movlw	0
  5490  000AB8  6E29               	movwf	disk_writep@sc,c
  5491  000ABA  0E00               	movlw	0
  5492  000ABC  6E2A               	movwf	disk_writep@sc+1,c
  5493  000ABE  0E00               	movlw	0
  5494  000AC0  6E2B               	movwf	disk_writep@sc+2,c
  5495  000AC2  0E00               	movlw	0
  5496  000AC4  6E2C               	movwf	disk_writep@sc+3,c
  5497  000AC6  ECED  F00F         	call	_disk_writep	;wreg free
  5498  000ACA  0900               	iorlw	0
  5499  000ACC  B4D8               	btfsc	status,2,c
  5500  000ACE  D00B               	goto	l841
  5501  000AD0  0100               	movlb	0	; () banked
  5502  000AD2  EE20 F001          	lfsr	2,1
  5503  000AD6  51B9               	movf	pf_write@fs& (0+255),w,b
  5504  000AD8  26D9               	addwf	fsr2l,f,c
  5505  000ADA  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5506  000ADC  22DA               	addwfc	fsr2h,f,c
  5507  000ADE  0E00               	movlw	0
  5508  000AE0  6EDF               	movwf	indf2,c
  5509                           
  5510                           ; BSR set to: 0
  5511  000AE2  0E01               	movlw	1
  5512                           
  5513                           ; BSR set to: 0
  5514  000AE4  0012               	return	
  5515  000AE6                     l841:
  5516                           
  5517                           ;pff.c: 973: fs->flag &= ~0x40;
  5518                           
  5519                           ; BSR set to: 0
  5520  000AE6  0100               	movlb	0	; () banked
  5521  000AE8  EE20 F001          	lfsr	2,1
  5522  000AEC  51B9               	movf	pf_write@fs& (0+255),w,b
  5523  000AEE  26D9               	addwf	fsr2l,f,c
  5524  000AF0  51BA               	movf	(pf_write@fs+1)& (0+255),w,b
  5525  000AF2  22DA               	addwfc	fsr2h,f,c
  5526  000AF4  0EBF               	movlw	191
  5527  000AF6  16DF               	andwf	indf2,f,c
  5528  000AF8                     l840:
  5529                           
  5530                           ; BSR set to: 0
  5531                           
  5532                           ; BSR set to: 0
  5533                           
  5534                           ; BSR set to: 0
  5535  000AF8  519C               	movf	pf_write@btw& (0+255),w,b
  5536  000AFA  119D               	iorwf	(pf_write@btw+1)& (0+255),w,b
  5537  000AFC  A4D8               	btfss	status,2,c
  5538  000AFE  D655               	goto	l830
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;pff.c: 974: }
  5542                           ;pff.c: 975: }
  5543                           ;pff.c: 977: return FR_OK;
  5544                           
  5545                           ; BSR set to: 0
  5546  000B00  0E00               	movlw	0
  5547  000B02  0012               	return	
  5548  000B04                     __end_of_pf_write:
  5549                           	opt stack 0
  5550                           tosu	equ	0xFFF
  5551                           tosh	equ	0xFFE
  5552                           tosl	equ	0xFFD
  5553                           pclath	equ	0xFFA
  5554                           tblptru	equ	0xFF8
  5555                           tblptrh	equ	0xFF7
  5556                           tblptrl	equ	0xFF6
  5557                           tablat	equ	0xFF5
  5558                           prodh	equ	0xFF4
  5559                           prodl	equ	0xFF3
  5560                           intcon	equ	0xFF2
  5561                           intcon2	equ	0xFF1
  5562                           intcon3	equ	0xFF0
  5563                           postinc0	equ	0xFEE
  5564                           wreg	equ	0xFE8
  5565                           postinc1	equ	0xFE6
  5566                           postdec1	equ	0xFE5
  5567                           fsr1h	equ	0xFE2
  5568                           fsr1l	equ	0xFE1
  5569                           indf2	equ	0xFDF
  5570                           postinc2	equ	0xFDE
  5571                           postdec2	equ	0xFDD
  5572                           plusw2	equ	0xFDB
  5573                           fsr2h	equ	0xFDA
  5574                           fsr2l	equ	0xFD9
  5575                           status	equ	0xFD8
  5576                           
  5577 ;; *************** function _disk_writep *****************
  5578 ;; Defined at:
  5579 ;;		line 283 in file "bibliotecas/diskio.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  wr              3   37[COMRAM] PTR const unsigned char 
  5582 ;;		 -> STR_14(8), ROM(32767), 
  5583 ;;  sc              4   40[COMRAM] unsigned long 
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;  j               2    6[BANK0 ] int 
  5586 ;;  i               2    4[BANK0 ] int 
  5587 ;;  buff            1    8[BANK0 ] unsigned char 
  5588 ;;  res             1    0        enum E14
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  1    wreg      enum E14
  5591 ;; Registers used:
  5592 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5598 ;;      Params:         7       0       0       0       0       0       0       0       0
  5599 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5600 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5601 ;;      Totals:         7       9       0       0       0       0       0       0       0
  5602 ;;Total ram usage:       16 bytes
  5603 ;; Hardware stack levels used:    1
  5604 ;; Hardware stack levels required when called:    4
  5605 ;; This function calls:
  5606 ;;		_WriteSPI_
  5607 ;;		_command
  5608 ;;		_dummy_clocks
  5609 ;;		_proceed
  5610 ;;		_response
  5611 ;; This function is called by:
  5612 ;;		_pf_write
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text26
  5617  001FDA                     __ptext26:
  5618                           	opt stack 0
  5619  001FDA                     _disk_writep:
  5620                           	opt stack 23
  5621                           
  5622                           ;diskio.c: 288: DRESULT res;
  5623                           ;diskio.c: 290: unsigned char buff;
  5624                           ;diskio.c: 291: int i=0,j;
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;incstack = 0
  5628  001FDA  0E00               	movlw	0
  5629  001FDC  0100               	movlb	0	; () banked
  5630  001FDE  6F65               	movwf	(disk_writep@i+1)& (0+255),b
  5631  001FE0  0E00               	movlw	0
  5632  001FE2  6F64               	movwf	disk_writep@i& (0+255),b
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;diskio.c: 295: dummy_clocks(8);
  5636  001FE4  0E08               	movlw	8
  5637  001FE6  EC5A  F019         	call	_dummy_clocks
  5638                           
  5639                           ;diskio.c: 296: command(0X58, sc*512, 0X00);
  5640  001FEA  C029  F060         	movff	disk_writep@sc,??_disk_writep
  5641  001FEE  C02A  F061         	movff	disk_writep@sc+1,??_disk_writep+1
  5642  001FF2  C02B  F062         	movff	disk_writep@sc+2,??_disk_writep+2
  5643  001FF6  C02C  F063         	movff	disk_writep@sc+3,??_disk_writep+3
  5644  001FFA  0E09               	movlw	9
  5645  001FFC                     u7775:
  5646  001FFC  90D8               	bcf	status,0,c
  5647  001FFE  0100               	movlb	0	; () banked
  5648  002000  3760               	rlcf	??_disk_writep& (0+255),f,b
  5649  002002  3761               	rlcf	(??_disk_writep+1)& (0+255),f,b
  5650  002004  3762               	rlcf	(??_disk_writep+2)& (0+255),f,b
  5651  002006  3763               	rlcf	(??_disk_writep+3)& (0+255),f,b
  5652  002008  2EE8               	decfsz	wreg,f,c
  5653  00200A  D7F8               	goto	u7775
  5654  00200C  C060  F01E         	movff	??_disk_writep,command@arg
  5655  002010  C061  F01F         	movff	??_disk_writep+1,command@arg+1
  5656  002014  C062  F020         	movff	??_disk_writep+2,command@arg+2
  5657  002018  C063  F021         	movff	??_disk_writep+3,command@arg+3
  5658  00201C  0E00               	movlw	0
  5659  00201E  6E22               	movwf	command@CRC,c
  5660  002020  0E58               	movlw	88
  5661  002022  EC36  F018         	call	_command
  5662                           
  5663                           ;diskio.c: 297: proceed();
  5664  002026  EC58  F01A         	call	_proceed	;wreg free
  5665  00202A                     
  5666                           ;diskio.c: 299: buff = response();
  5667  00202A  EC4B  F01A         	call	_response	;wreg free
  5668  00202E  0100               	movlb	0	; () banked
  5669  002030  6F68               	movwf	disk_writep@buff& (0+255),b
  5670                           
  5671                           ;diskio.c: 300: }while(buff!=0x00);
  5672  002032  5168               	movf	disk_writep@buff& (0+255),w,b
  5673  002034  A4D8               	btfss	status,2,c
  5674  002036  D7F9               	goto	l331
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;diskio.c: 303: _delay((unsigned long)((2000)*(48000000/4000.0)));
  5678                           
  5679                           ; BSR set to: 0
  5680  002038  0E7A               	movlw	122
  5681  00203A  0100               	movlb	0	; () banked
  5682  00203C  6F61               	movwf	(??_disk_writep+1)& (0+255),b
  5683  00203E  0EC1               	movlw	193
  5684  002040  6F60               	movwf	??_disk_writep& (0+255),b
  5685  002042  0E81               	movlw	129
  5686  002044                     u9317:
  5687  002044  2EE8               	decfsz	wreg,f,c
  5688  002046  D7FE               	bra	u9317
  5689  002048  2F60               	decfsz	??_disk_writep& (0+255),f,b
  5690  00204A  D7FC               	bra	u9317
  5691  00204C  2F61               	decfsz	(??_disk_writep+1)& (0+255),f,b
  5692  00204E  D7FA               	bra	u9317
  5693  002050  D000               	nop2	
  5694                           
  5695                           ;diskio.c: 306: dummy_clocks(8);
  5696  002052  0E08               	movlw	8
  5697  002054  EC5A  F019         	call	_dummy_clocks
  5698                           
  5699                           ;diskio.c: 308: WriteSPI_(0XFE);
  5700  002058  0EFE               	movlw	254
  5701  00205A  ECB8  F018         	call	_WriteSPI_
  5702                           
  5703                           ;diskio.c: 310: for(j=0;j<512;j++)
  5704  00205E  0E00               	movlw	0
  5705  002060  0100               	movlb	0	; () banked
  5706  002062  6F67               	movwf	(disk_writep@j+1)& (0+255),b
  5707  002064  0E00               	movlw	0
  5708  002066  6F66               	movwf	disk_writep@j& (0+255),b
  5709  002068                     l7063:
  5710                           
  5711                           ; BSR set to: 0
  5712  002068  BF67               	btfsc	(disk_writep@j+1)& (0+255),7,b
  5713  00206A  D004               	goto	l333
  5714  00206C  0E02               	movlw	2
  5715  00206E  5D67               	subwf	(disk_writep@j+1)& (0+255),w,b
  5716  002070  B0D8               	btfsc	status,0,c
  5717  002072  D023               	goto	u7810
  5718  002074                     l333:
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;diskio.c: 311: {
  5722                           ;diskio.c: 312: if(*wr!='\0')
  5723                           
  5724                           ; BSR set to: 0
  5725  002074  C026  FFF6         	movff	disk_writep@wr,tblptrl
  5726  002078  C027  FFF7         	movff	disk_writep@wr+1,tblptrh
  5727  00207C  C028  FFF8         	movff	disk_writep@wr+2,tblptru
  5728  002080  0008               	tblrd		*
  5729  002082  50F5               	movf	tablat,w,c
  5730  002084  0900               	iorlw	0
  5731  002086  B4D8               	btfsc	status,2,c
  5732  002088  D011               	goto	l335
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;diskio.c: 313: {
  5736                           ;diskio.c: 314: WriteSPI_(*wr);
  5737  00208A  C026  FFF6         	movff	disk_writep@wr,tblptrl
  5738  00208E  C027  FFF7         	movff	disk_writep@wr+1,tblptrh
  5739  002092  C028  FFF8         	movff	disk_writep@wr+2,tblptru
  5740  002096  0008               	tblrd		*
  5741  002098  50F5               	movf	tablat,w,c
  5742  00209A  ECB8  F018         	call	_WriteSPI_
  5743                           
  5744                           ;diskio.c: 315: wr++;
  5745  00209E  0E01               	movlw	1
  5746  0020A0  2626               	addwf	disk_writep@wr,f,c
  5747  0020A2  0E00               	movlw	0
  5748  0020A4  2227               	addwfc	disk_writep@wr+1,f,c
  5749  0020A6  0E00               	movlw	0
  5750  0020A8  2228               	addwfc	disk_writep@wr+2,f,c
  5751                           
  5752                           ;diskio.c: 316: }
  5753  0020AA  D003               	goto	l336
  5754  0020AC                     l335:
  5755                           
  5756                           ;diskio.c: 317: else
  5757                           ;diskio.c: 318: WriteSPI_(0x00);
  5758  0020AC  0E00               	movlw	0
  5759  0020AE  ECB8  F018         	call	_WriteSPI_
  5760  0020B2                     l336:
  5761  0020B2  0100               	movlb	0	; () banked
  5762  0020B4  4B66               	infsnz	disk_writep@j& (0+255),f,b
  5763  0020B6  2B67               	incf	(disk_writep@j+1)& (0+255),f,b
  5764  0020B8  D7D7               	goto	l7063
  5765  0020BA                     u7810:
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;diskio.c: 319: }
  5769                           ;diskio.c: 320: WriteSPI_(0XFF);
  5770                           
  5771                           ; BSR set to: 0
  5772  0020BA  0EFF               	movlw	255
  5773  0020BC  ECB8  F018         	call	_WriteSPI_
  5774                           
  5775                           ;diskio.c: 321: WriteSPI_(0XFF);
  5776  0020C0  0EFF               	movlw	255
  5777  0020C2  ECB8  F018         	call	_WriteSPI_
  5778                           
  5779                           ;diskio.c: 323: proceed();
  5780  0020C6  EC58  F01A         	call	_proceed	;wreg free
  5781                           
  5782                           ;diskio.c: 325: _delay((unsigned long)((1000)*(48000000/4000.0)));
  5783  0020CA  0E3D               	movlw	61
  5784  0020CC  0100               	movlb	0	; () banked
  5785  0020CE  6F61               	movwf	(??_disk_writep+1)& (0+255),b
  5786  0020D0  0EE1               	movlw	225
  5787  0020D2  6F60               	movwf	??_disk_writep& (0+255),b
  5788  0020D4  0E3F               	movlw	63
  5789  0020D6                     u9327:
  5790  0020D6  2EE8               	decfsz	wreg,f,c
  5791  0020D8  D7FE               	bra	u9327
  5792  0020DA  2F60               	decfsz	??_disk_writep& (0+255),f,b
  5793  0020DC  D7FC               	bra	u9327
  5794  0020DE  2F61               	decfsz	(??_disk_writep+1)& (0+255),f,b
  5795  0020E0  D7FA               	bra	u9327
  5796  0020E2  D000               	nop2	
  5797                           
  5798                           ;diskio.c: 327: dummy_clocks(8);
  5799  0020E4  0E08               	movlw	8
  5800  0020E6  EC5A  F019         	call	_dummy_clocks
  5801                           
  5802                           ;diskio.c: 329: command(0X4D,0X00000000,0X00);
  5803  0020EA  0E00               	movlw	0
  5804  0020EC  6E1E               	movwf	command@arg,c
  5805  0020EE  0E00               	movlw	0
  5806  0020F0  6E1F               	movwf	command@arg+1,c
  5807  0020F2  0E00               	movlw	0
  5808  0020F4  6E20               	movwf	command@arg+2,c
  5809  0020F6  0E00               	movlw	0
  5810  0020F8  6E21               	movwf	command@arg+3,c
  5811  0020FA  0E00               	movlw	0
  5812  0020FC  6E22               	movwf	command@CRC,c
  5813  0020FE  0E4D               	movlw	77
  5814  002100  EC36  F018         	call	_command
  5815                           
  5816                           ;diskio.c: 330: proceed();
  5817  002104  EC58  F01A         	call	_proceed	;wreg free
  5818  002108                     
  5819                           ;diskio.c: 332: buff = response();
  5820  002108  EC4B  F01A         	call	_response	;wreg free
  5821  00210C  0100               	movlb	0	; () banked
  5822  00210E  6F68               	movwf	disk_writep@buff& (0+255),b
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;diskio.c: 333: }while(buff!=0x00);
  5826  002110  5168               	movf	disk_writep@buff& (0+255),w,b
  5827  002112  A4D8               	btfss	status,2,c
  5828  002114  D7F9               	goto	l337
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;diskio.c: 335: return RES_OK;
  5832                           
  5833                           ; BSR set to: 0
  5834  002116  0E00               	movlw	0
  5835  002118  0012               	return	
  5836  00211A                     __end_of_disk_writep:
  5837                           	opt stack 0
  5838                           tosu	equ	0xFFF
  5839                           tosh	equ	0xFFE
  5840                           tosl	equ	0xFFD
  5841                           pclath	equ	0xFFA
  5842                           tblptru	equ	0xFF8
  5843                           tblptrh	equ	0xFF7
  5844                           tblptrl	equ	0xFF6
  5845                           tablat	equ	0xFF5
  5846                           prodh	equ	0xFF4
  5847                           prodl	equ	0xFF3
  5848                           intcon	equ	0xFF2
  5849                           intcon2	equ	0xFF1
  5850                           intcon3	equ	0xFF0
  5851                           postinc0	equ	0xFEE
  5852                           wreg	equ	0xFE8
  5853                           postinc1	equ	0xFE6
  5854                           postdec1	equ	0xFE5
  5855                           fsr1h	equ	0xFE2
  5856                           fsr1l	equ	0xFE1
  5857                           indf2	equ	0xFDF
  5858                           postinc2	equ	0xFDE
  5859                           postdec2	equ	0xFDD
  5860                           plusw2	equ	0xFDB
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8
  5864                           
  5865 ;; *************** function _pf_read *****************
  5866 ;; Defined at:
  5867 ;;		line 863 in file "bibliotecas/pff.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;  buff            2   58[BANK0 ] PTR void 
  5870 ;;		 -> data_buffer_32(32), 
  5871 ;;  btr             2   60[BANK0 ] unsigned int 
  5872 ;;  br              2   62[BANK0 ] PTR unsigned int 
  5873 ;;		 -> SDCard@br(2), 
  5874 ;; Auto vars:     Size  Location     Type
  5875 ;;  clst            4   85[BANK0 ] unsigned long 
  5876 ;;  remain          4   81[BANK0 ] unsigned long 
  5877 ;;  sect            4   77[BANK0 ] unsigned long 
  5878 ;;  fs              2   92[BANK0 ] PTR struct .
  5879 ;;		 -> SDCard@fs(42), NULL(0), 
  5880 ;;  rcnt            2   90[BANK0 ] unsigned int 
  5881 ;;  rbuff           2   73[BANK0 ] PTR unsigned char 
  5882 ;;		 -> data_buffer_32(32), 
  5883 ;;  cs              1   89[BANK0 ] unsigned char 
  5884 ;;  dr              1   72[BANK0 ] enum E73
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  1    wreg      enum E43
  5887 ;; Registers used:
  5888 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5894 ;;      Params:         0       6       0       0       0       0       0       0       0
  5895 ;;      Locals:         0      22       0       0       0       0       0       0       0
  5896 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5897 ;;      Totals:         0      36       0       0       0       0       0       0       0
  5898 ;;Total ram usage:       36 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    7
  5901 ;; This function calls:
  5902 ;;		_clust2sect
  5903 ;;		_disk_readp
  5904 ;;		_get_fat
  5905 ;; This function is called by:
  5906 ;;		_SDCard
  5907 ;; This function uses a non-reentrant model
  5908 ;;
  5909                           
  5910                           	psect	text27
  5911  000EE8                     __ptext27:
  5912                           	opt stack 0
  5913  000EE8                     _pf_read:
  5914                           	opt stack 21
  5915                           
  5916                           ;pff.c: 869: DRESULT dr;
  5917                           ;pff.c: 870: DWORD clst;
  5918                           ;pff.c: 871: DWORD sect, remain;
  5919                           ;pff.c: 872: UINT rcnt;
  5920                           ;pff.c: 873: BYTE cs, *rbuff = buff;
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;incstack = 0
  5924  000EE8  C09A  F0A9         	movff	pf_read@buff,pf_read@rbuff
  5925  000EEC  C09B  F0AA         	movff	pf_read@buff+1,pf_read@rbuff+1
  5926                           
  5927                           ;pff.c: 874: FATFS *fs = FatFs;
  5928  000EF0  C039  F0BC         	movff	_FatFs,pf_read@fs
  5929  000EF4  C03A  F0BD         	movff	_FatFs+1,pf_read@fs+1
  5930                           
  5931                           ;pff.c: 877: *br = 0;
  5932  000EF8  C09E  FFD9         	movff	pf_read@br,fsr2l
  5933  000EFC  C09F  FFDA         	movff	pf_read@br+1,fsr2h
  5934  000F00  0E00               	movlw	0
  5935  000F02  6EDE               	movwf	postinc2,c
  5936  000F04  0E00               	movlw	0
  5937  000F06  6EDD               	movwf	postdec2,c
  5938                           
  5939                           ;pff.c: 878: if (!fs) return FR_NOT_ENABLED;
  5940  000F08  0100               	movlb	0	; () banked
  5941  000F0A  51BC               	movf	pf_read@fs& (0+255),w,b
  5942  000F0C  11BD               	iorwf	(pf_read@fs+1)& (0+255),w,b
  5943  000F0E  A4D8               	btfss	status,2,c
  5944  000F10  D002               	goto	l800
  5945                           
  5946                           ; BSR set to: 0
  5947  000F12  0E05               	movlw	5
  5948                           
  5949                           ; BSR set to: 0
  5950  000F14  0012               	return	
  5951  000F16                     l800:
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;pff.c: 879: if (!(fs->flag & 0x01))
  5955                           
  5956                           ; BSR set to: 0
  5957  000F16  EE20 F001          	lfsr	2,1
  5958  000F1A  51BC               	movf	pf_read@fs& (0+255),w,b
  5959  000F1C  26D9               	addwf	fsr2l,f,c
  5960  000F1E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5961  000F20  22DA               	addwfc	fsr2h,f,c
  5962  000F22  B0DF               	btfsc	indf2,0,c
  5963  000F24  D002               	goto	l802
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;pff.c: 880: return FR_NOT_OPENED;
  5967  000F26  0E04               	movlw	4
  5968                           
  5969                           ; BSR set to: 0
  5970  000F28  0012               	return	
  5971  000F2A                     l802:
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;pff.c: 882: remain = fs->fsize - fs->fptr;
  5975                           
  5976                           ; BSR set to: 0
  5977  000F2A  EE20 F01A          	lfsr	2,26
  5978  000F2E  51BC               	movf	pf_read@fs& (0+255),w,b
  5979  000F30  26D9               	addwf	fsr2l,f,c
  5980  000F32  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5981  000F34  22DA               	addwfc	fsr2h,f,c
  5982  000F36  CFDE F0A0          	movff	postinc2,??_pf_read
  5983  000F3A  CFDE F0A1          	movff	postinc2,??_pf_read+1
  5984  000F3E  CFDE F0A2          	movff	postinc2,??_pf_read+2
  5985  000F42  CFDE F0A3          	movff	postinc2,??_pf_read+3
  5986  000F46  EE20 F016          	lfsr	2,22
  5987  000F4A  51BC               	movf	pf_read@fs& (0+255),w,b
  5988  000F4C  26D9               	addwf	fsr2l,f,c
  5989  000F4E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  5990  000F50  22DA               	addwfc	fsr2h,f,c
  5991  000F52  CFDE F0A4          	movff	postinc2,??_pf_read+4
  5992  000F56  CFDE F0A5          	movff	postinc2,??_pf_read+5
  5993  000F5A  CFDE F0A6          	movff	postinc2,??_pf_read+6
  5994  000F5E  CFDE F0A7          	movff	postinc2,??_pf_read+7
  5995  000F62  1FA4               	comf	(??_pf_read+4)& (0+255),f,b
  5996  000F64  1FA5               	comf	(??_pf_read+5)& (0+255),f,b
  5997  000F66  1FA6               	comf	(??_pf_read+6)& (0+255),f,b
  5998  000F68  1FA7               	comf	(??_pf_read+7)& (0+255),f,b
  5999  000F6A  2BA4               	incf	(??_pf_read+4)& (0+255),f,b
  6000  000F6C  0E00               	movlw	0
  6001  000F6E  23A5               	addwfc	(??_pf_read+5)& (0+255),f,b
  6002  000F70  23A6               	addwfc	(??_pf_read+6)& (0+255),f,b
  6003  000F72  23A7               	addwfc	(??_pf_read+7)& (0+255),f,b
  6004  000F74  51A0               	movf	??_pf_read& (0+255),w,b
  6005  000F76  25A4               	addwf	(??_pf_read+4)& (0+255),w,b
  6006  000F78  6FB1               	movwf	pf_read@remain& (0+255),b
  6007  000F7A  51A1               	movf	(??_pf_read+1)& (0+255),w,b
  6008  000F7C  21A5               	addwfc	(??_pf_read+5)& (0+255),w,b
  6009  000F7E  6FB2               	movwf	(pf_read@remain+1)& (0+255),b
  6010  000F80  51A2               	movf	(??_pf_read+2)& (0+255),w,b
  6011  000F82  21A6               	addwfc	(??_pf_read+6)& (0+255),w,b
  6012  000F84  6FB3               	movwf	(pf_read@remain+2)& (0+255),b
  6013  000F86  51A3               	movf	(??_pf_read+3)& (0+255),w,b
  6014  000F88  21A7               	addwfc	(??_pf_read+7)& (0+255),w,b
  6015  000F8A  6FB4               	movwf	(pf_read@remain+3)& (0+255),b
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;pff.c: 883: if (btr > remain) btr = (UINT)remain;
  6019  000F8C  519C               	movf	pf_read@btr& (0+255),w,b
  6020  000F8E  6FA0               	movwf	??_pf_read& (0+255),b
  6021  000F90  519D               	movf	(pf_read@btr+1)& (0+255),w,b
  6022  000F92  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  6023  000F94  6BA2               	clrf	(??_pf_read+2)& (0+255),b
  6024  000F96  6BA3               	clrf	(??_pf_read+3)& (0+255),b
  6025  000F98  51A0               	movf	??_pf_read& (0+255),w,b
  6026  000F9A  5DB1               	subwf	pf_read@remain& (0+255),w,b
  6027  000F9C  51A1               	movf	(??_pf_read+1)& (0+255),w,b
  6028  000F9E  59B2               	subwfb	(pf_read@remain+1)& (0+255),w,b
  6029  000FA0  51A2               	movf	(??_pf_read+2)& (0+255),w,b
  6030  000FA2  59B3               	subwfb	(pf_read@remain+2)& (0+255),w,b
  6031  000FA4  51A3               	movf	(??_pf_read+3)& (0+255),w,b
  6032  000FA6  59B4               	subwfb	(pf_read@remain+3)& (0+255),w,b
  6033  000FA8  B0D8               	btfsc	status,0,c
  6034  000FAA  D160               	goto	l804
  6035                           
  6036                           ; BSR set to: 0
  6037  000FAC  C0B1  F09C         	movff	pf_read@remain,pf_read@btr
  6038  000FB0  C0B2  F09D         	movff	pf_read@remain+1,pf_read@btr+1
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;pff.c: 885: while (btr) {
  6042  000FB4  D15B               	goto	l804
  6043  000FB6                     
  6044                           ; BSR set to: 0
  6045                           ;pff.c: 886: if ((fs->fptr % 512) == 0) {
  6046                           
  6047                           ; BSR set to: 0
  6048  000FB6  EE20 F016          	lfsr	2,22
  6049  000FBA  51BC               	movf	pf_read@fs& (0+255),w,b
  6050  000FBC  26D9               	addwf	fsr2l,f,c
  6051  000FBE  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6052  000FC0  22DA               	addwfc	fsr2h,f,c
  6053  000FC2  0EFF               	movlw	255
  6054  000FC4  14DE               	andwf	postinc2,w,c
  6055  000FC6  6FA0               	movwf	??_pf_read& (0+255),b
  6056  000FC8  0E01               	movlw	1
  6057  000FCA  14DE               	andwf	postinc2,w,c
  6058  000FCC  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  6059  000FCE  0E00               	movlw	0
  6060  000FD0  14DE               	andwf	postinc2,w,c
  6061  000FD2  6FA2               	movwf	(??_pf_read+2)& (0+255),b
  6062  000FD4  0E00               	movlw	0
  6063  000FD6  14DE               	andwf	postinc2,w,c
  6064  000FD8  6FA3               	movwf	(??_pf_read+3)& (0+255),b
  6065  000FDA  51A0               	movf	??_pf_read& (0+255),w,b
  6066  000FDC  11A1               	iorwf	(??_pf_read+1)& (0+255),w,b
  6067  000FDE  11A2               	iorwf	(??_pf_read+2)& (0+255),w,b
  6068  000FE0  11A3               	iorwf	(??_pf_read+3)& (0+255),w,b
  6069  000FE2  A4D8               	btfss	status,2,c
  6070  000FE4  D0BC               	goto	l806
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;pff.c: 887: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  6074  000FE6  EE20 F016          	lfsr	2,22
  6075  000FEA  51BC               	movf	pf_read@fs& (0+255),w,b
  6076  000FEC  26D9               	addwf	fsr2l,f,c
  6077  000FEE  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6078  000FF0  22DA               	addwfc	fsr2h,f,c
  6079  000FF2  CFDE F0A0          	movff	postinc2,??_pf_read
  6080  000FF6  CFDE F0A1          	movff	postinc2,??_pf_read+1
  6081  000FFA  CFDE F0A2          	movff	postinc2,??_pf_read+2
  6082  000FFE  CFDE F0A3          	movff	postinc2,??_pf_read+3
  6083  001002  0E0A               	movlw	10
  6084  001004  D005               	goto	u8240
  6085  001006                     u8245:
  6086  001006  90D8               	bcf	status,0,c
  6087  001008  33A3               	rrcf	(??_pf_read+3)& (0+255),f,b
  6088  00100A  33A2               	rrcf	(??_pf_read+2)& (0+255),f,b
  6089  00100C  33A1               	rrcf	(??_pf_read+1)& (0+255),f,b
  6090  00100E  33A0               	rrcf	??_pf_read& (0+255),f,b
  6091  001010                     u8240:
  6092  001010  2EE8               	decfsz	wreg,f,c
  6093  001012  D7F9               	goto	u8245
  6094  001014  EE20 F002          	lfsr	2,2
  6095  001018  51BC               	movf	pf_read@fs& (0+255),w,b
  6096  00101A  26D9               	addwf	fsr2l,f,c
  6097  00101C  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6098  00101E  22DA               	addwfc	fsr2h,f,c
  6099  001020  50DF               	movf	indf2,w,c
  6100  001022  6FA4               	movwf	(??_pf_read+4)& (0+255),b
  6101  001024  05A4               	decf	(??_pf_read+4)& (0+255),w,b
  6102  001026  15A0               	andwf	??_pf_read& (0+255),w,b
  6103  001028  6FB9               	movwf	pf_read@cs& (0+255),b
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;pff.c: 888: if (!cs) {
  6107  00102A  51B9               	movf	pf_read@cs& (0+255),w,b
  6108  00102C  A4D8               	btfss	status,2,c
  6109  00102E  D054               	goto	l807
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;pff.c: 889: if (fs->fptr == 0)
  6113  001030  EE20 F016          	lfsr	2,22
  6114  001034  51BC               	movf	pf_read@fs& (0+255),w,b
  6115  001036  26D9               	addwf	fsr2l,f,c
  6116  001038  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6117  00103A  22DA               	addwfc	fsr2h,f,c
  6118  00103C  50DE               	movf	postinc2,w,c
  6119  00103E  10DE               	iorwf	postinc2,w,c
  6120  001040  10DE               	iorwf	postinc2,w,c
  6121  001042  10DE               	iorwf	postinc2,w,c
  6122  001044  A4D8               	btfss	status,2,c
  6123  001046  D00F               	goto	l808
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;pff.c: 890: clst = fs->org_clust;
  6127  001048  EE20 F01E          	lfsr	2,30
  6128  00104C  51BC               	movf	pf_read@fs& (0+255),w,b
  6129  00104E  26D9               	addwf	fsr2l,f,c
  6130  001050  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6131  001052  22DA               	addwfc	fsr2h,f,c
  6132  001054  CFDE F0B5          	movff	postinc2,pf_read@clst
  6133  001058  CFDE F0B6          	movff	postinc2,pf_read@clst+1
  6134  00105C  CFDE F0B7          	movff	postinc2,pf_read@clst+2
  6135  001060  CFDE F0B8          	movff	postinc2,pf_read@clst+3
  6136  001064  D018               	goto	l809
  6137  001066                     l808:
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;pff.c: 891: else
  6141                           ;pff.c: 892: clst = get_fat(fs->curr_clust);
  6142                           
  6143                           ; BSR set to: 0
  6144  001066  EE20 F022          	lfsr	2,34
  6145  00106A  51BC               	movf	pf_read@fs& (0+255),w,b
  6146  00106C  26D9               	addwf	fsr2l,f,c
  6147  00106E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6148  001070  22DA               	addwfc	fsr2h,f,c
  6149  001072  CFDE F072          	movff	postinc2,get_fat@clst
  6150  001076  CFDE F073          	movff	postinc2,get_fat@clst+1
  6151  00107A  CFDE F074          	movff	postinc2,get_fat@clst+2
  6152  00107E  CFDE F075          	movff	postinc2,get_fat@clst+3
  6153  001082  EC82  F005         	call	_get_fat	;wreg free
  6154  001086  C072  F0B5         	movff	?_get_fat,pf_read@clst
  6155  00108A  C073  F0B6         	movff	?_get_fat+1,pf_read@clst+1
  6156  00108E  C074  F0B7         	movff	?_get_fat+2,pf_read@clst+2
  6157  001092  C075  F0B8         	movff	?_get_fat+3,pf_read@clst+3
  6158  001096                     l809:
  6159                           
  6160                           ;pff.c: 893: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  6161  001096  0100               	movlb	0	; () banked
  6162  001098  51B8               	movf	(pf_read@clst+3)& (0+255),w,b
  6163  00109A  11B7               	iorwf	(pf_read@clst+2)& (0+255),w,b
  6164  00109C  11B6               	iorwf	(pf_read@clst+1)& (0+255),w,b
  6165  00109E  E10E               	bnz	l7375
  6166  0010A0  0E02               	movlw	2
  6167  0010A2  5DB5               	subwf	pf_read@clst& (0+255),w,b
  6168  0010A4  B0D8               	btfsc	status,0,c
  6169  0010A6  D00A               	goto	l810
  6170                           
  6171                           ; BSR set to: 0
  6172  0010A8  EE20 F001          	lfsr	2,1
  6173  0010AC  51BC               	movf	pf_read@fs& (0+255),w,b
  6174  0010AE  26D9               	addwf	fsr2l,f,c
  6175  0010B0  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6176  0010B2  22DA               	addwfc	fsr2h,f,c
  6177  0010B4  0E00               	movlw	0
  6178  0010B6  6EDF               	movwf	indf2,c
  6179                           
  6180                           ; BSR set to: 0
  6181  0010B8  0E01               	movlw	1
  6182                           
  6183                           ; BSR set to: 0
  6184  0010BA  0012               	return	
  6185  0010BC                     l810:
  6186  0010BC                     l7375:
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;pff.c: 894: fs->curr_clust = clst;
  6190  0010BC  EE20 F022          	lfsr	2,34
  6191  0010C0  51BC               	movf	pf_read@fs& (0+255),w,b
  6192  0010C2  26D9               	addwf	fsr2l,f,c
  6193  0010C4  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6194  0010C6  22DA               	addwfc	fsr2h,f,c
  6195  0010C8  C0B5  FFDE         	movff	pf_read@clst,postinc2
  6196  0010CC  C0B6  FFDE         	movff	pf_read@clst+1,postinc2
  6197  0010D0  C0B7  FFDE         	movff	pf_read@clst+2,postinc2
  6198  0010D4  C0B8  FFDE         	movff	pf_read@clst+3,postinc2
  6199  0010D8                     l807:
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;pff.c: 895: }
  6203                           ;pff.c: 896: sect = clust2sect(fs->curr_clust);
  6204                           
  6205                           ; BSR set to: 0
  6206  0010D8  EE20 F022          	lfsr	2,34
  6207  0010DC  51BC               	movf	pf_read@fs& (0+255),w,b
  6208  0010DE  26D9               	addwf	fsr2l,f,c
  6209  0010E0  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6210  0010E2  22DA               	addwfc	fsr2h,f,c
  6211  0010E4  CFDE F026          	movff	postinc2,clust2sect@clst
  6212  0010E8  CFDE F027          	movff	postinc2,clust2sect@clst+1
  6213  0010EC  CFDE F028          	movff	postinc2,clust2sect@clst+2
  6214  0010F0  CFDE F029          	movff	postinc2,clust2sect@clst+3
  6215  0010F4  ECB3  F014         	call	_clust2sect	;wreg free
  6216  0010F8  C026  F0AD         	movff	?_clust2sect,pf_read@sect
  6217  0010FC  C027  F0AE         	movff	?_clust2sect+1,pf_read@sect+1
  6218  001100  C028  F0AF         	movff	?_clust2sect+2,pf_read@sect+2
  6219  001104  C029  F0B0         	movff	?_clust2sect+3,pf_read@sect+3
  6220                           
  6221                           ;pff.c: 897: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  6222  001108  0100               	movlb	0	; () banked
  6223  00110A  51AD               	movf	pf_read@sect& (0+255),w,b
  6224  00110C  11AE               	iorwf	(pf_read@sect+1)& (0+255),w,b
  6225  00110E  11AF               	iorwf	(pf_read@sect+2)& (0+255),w,b
  6226  001110  11B0               	iorwf	(pf_read@sect+3)& (0+255),w,b
  6227  001112  A4D8               	btfss	status,2,c
  6228  001114  D00A               	goto	l811
  6229                           
  6230                           ; BSR set to: 0
  6231  001116  EE20 F001          	lfsr	2,1
  6232  00111A  51BC               	movf	pf_read@fs& (0+255),w,b
  6233  00111C  26D9               	addwf	fsr2l,f,c
  6234  00111E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6235  001120  22DA               	addwfc	fsr2h,f,c
  6236  001122  0E00               	movlw	0
  6237  001124  6EDF               	movwf	indf2,c
  6238                           
  6239                           ; BSR set to: 0
  6240  001126  0E01               	movlw	1
  6241                           
  6242                           ; BSR set to: 0
  6243  001128  0012               	return	
  6244  00112A                     l811:
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;pff.c: 898: fs->dsect = sect + cs;
  6248                           
  6249                           ; BSR set to: 0
  6250  00112A  51B9               	movf	pf_read@cs& (0+255),w,b
  6251  00112C  25AD               	addwf	pf_read@sect& (0+255),w,b
  6252  00112E  6FA0               	movwf	??_pf_read& (0+255),b
  6253  001130  0E00               	movlw	0
  6254  001132  21AE               	addwfc	(pf_read@sect+1)& (0+255),w,b
  6255  001134  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  6256  001136  0E00               	movlw	0
  6257  001138  21AF               	addwfc	(pf_read@sect+2)& (0+255),w,b
  6258  00113A  6FA2               	movwf	(??_pf_read+2)& (0+255),b
  6259  00113C  0E00               	movlw	0
  6260  00113E  21B0               	addwfc	(pf_read@sect+3)& (0+255),w,b
  6261  001140  6FA3               	movwf	(??_pf_read+3)& (0+255),b
  6262  001142  EE20 F026          	lfsr	2,38
  6263  001146  51BC               	movf	pf_read@fs& (0+255),w,b
  6264  001148  26D9               	addwf	fsr2l,f,c
  6265  00114A  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6266  00114C  22DA               	addwfc	fsr2h,f,c
  6267  00114E  C0A0  FFDE         	movff	??_pf_read,postinc2
  6268  001152  C0A1  FFDE         	movff	??_pf_read+1,postinc2
  6269  001156  C0A2  FFDE         	movff	??_pf_read+2,postinc2
  6270  00115A  C0A3  FFDE         	movff	??_pf_read+3,postinc2
  6271  00115E                     l806:
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;pff.c: 899: }
  6275                           ;pff.c: 900: rcnt = 512 - (UINT)fs->fptr % 512;
  6276  00115E  0EFF               	movlw	255
  6277  001160  6FA0               	movwf	??_pf_read& (0+255),b
  6278  001162  0E01               	movlw	1
  6279  001164  6FA1               	movwf	(??_pf_read+1)& (0+255),b
  6280  001166  EE20 F016          	lfsr	2,22
  6281  00116A  51BC               	movf	pf_read@fs& (0+255),w,b
  6282  00116C  26D9               	addwf	fsr2l,f,c
  6283  00116E  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6284  001170  22DA               	addwfc	fsr2h,f,c
  6285  001172  CFDE F0A2          	movff	postinc2,??_pf_read+2
  6286  001176  CFDD F0A3          	movff	postdec2,??_pf_read+3
  6287  00117A  51A0               	movf	??_pf_read& (0+255),w,b
  6288  00117C  17A2               	andwf	(??_pf_read+2)& (0+255),f,b
  6289  00117E  51A1               	movf	(??_pf_read+1)& (0+255),w,b
  6290  001180  17A3               	andwf	(??_pf_read+3)& (0+255),f,b
  6291  001182  1FA2               	comf	(??_pf_read+2)& (0+255),f,b
  6292  001184  1FA3               	comf	(??_pf_read+3)& (0+255),f,b
  6293  001186  4BA2               	infsnz	(??_pf_read+2)& (0+255),f,b
  6294  001188  2BA3               	incf	(??_pf_read+3)& (0+255),f,b
  6295  00118A  0E00               	movlw	0
  6296  00118C  25A2               	addwf	(??_pf_read+2)& (0+255),w,b
  6297  00118E  6FBA               	movwf	pf_read@rcnt& (0+255),b
  6298  001190  0E02               	movlw	2
  6299  001192  21A3               	addwfc	(??_pf_read+3)& (0+255),w,b
  6300  001194  6FBB               	movwf	(pf_read@rcnt+1)& (0+255),b
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;pff.c: 901: if (rcnt > btr) rcnt = btr;
  6304  001196  51BA               	movf	pf_read@rcnt& (0+255),w,b
  6305  001198  5D9C               	subwf	pf_read@btr& (0+255),w,b
  6306  00119A  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6307  00119C  599D               	subwfb	(pf_read@btr+1)& (0+255),w,b
  6308  00119E  B0D8               	btfsc	status,0,c
  6309  0011A0  D004               	goto	l812
  6310                           
  6311                           ; BSR set to: 0
  6312  0011A2  C09C  F0BA         	movff	pf_read@btr,pf_read@rcnt
  6313  0011A6  C09D  F0BB         	movff	pf_read@btr+1,pf_read@rcnt+1
  6314  0011AA                     l812:
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;pff.c: 902: dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
  6318                           
  6319                           ; BSR set to: 0
  6320  0011AA  519A               	movf	pf_read@buff& (0+255),w,b
  6321  0011AC  119B               	iorwf	(pf_read@buff+1)& (0+255),w,b
  6322  0011AE  B4D8               	btfsc	status,2,c
  6323  0011B0  D005               	goto	l814
  6324                           
  6325                           ; BSR set to: 0
  6326  0011B2  C0A9  F0AB         	movff	pf_read@rbuff,_pf_read$1886
  6327  0011B6  C0AA  F0AC         	movff	pf_read@rbuff+1,_pf_read$1886+1
  6328  0011BA  D004               	goto	l816
  6329  0011BC                     l814:
  6330                           
  6331                           ; BSR set to: 0
  6332                           
  6333                           ; BSR set to: 0
  6334  0011BC  0E00               	movlw	0
  6335  0011BE  6FAB               	movwf	_pf_read$1886& (0+255),b
  6336  0011C0  0E00               	movlw	0
  6337  0011C2  6FAC               	movwf	(_pf_read$1886+1)& (0+255),b
  6338  0011C4                     l816:
  6339                           
  6340                           ; BSR set to: 0
  6341                           
  6342                           ; BSR set to: 0
  6343  0011C4  C0AB  F060         	movff	_pf_read$1886,disk_readp@rd
  6344  0011C8  C0AC  F061         	movff	_pf_read$1886+1,disk_readp@rd+1
  6345  0011CC  EE20 F026          	lfsr	2,38
  6346  0011D0  51BC               	movf	pf_read@fs& (0+255),w,b
  6347  0011D2  26D9               	addwf	fsr2l,f,c
  6348  0011D4  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6349  0011D6  22DA               	addwfc	fsr2h,f,c
  6350  0011D8  CFDE F062          	movff	postinc2,disk_readp@sector
  6351  0011DC  CFDE F063          	movff	postinc2,disk_readp@sector+1
  6352  0011E0  CFDE F064          	movff	postinc2,disk_readp@sector+2
  6353  0011E4  CFDE F065          	movff	postinc2,disk_readp@sector+3
  6354  0011E8  EE20 F016          	lfsr	2,22
  6355  0011EC  51BC               	movf	pf_read@fs& (0+255),w,b
  6356  0011EE  26D9               	addwf	fsr2l,f,c
  6357  0011F0  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6358  0011F2  22DA               	addwfc	fsr2h,f,c
  6359  0011F4  CFDE F0A0          	movff	postinc2,??_pf_read
  6360  0011F8  CFDD F0A1          	movff	postdec2,??_pf_read+1
  6361  0011FC  0EFF               	movlw	255
  6362  0011FE  15A0               	andwf	??_pf_read& (0+255),w,b
  6363  001200  6F66               	movwf	disk_readp@offset& (0+255),b
  6364  001202  0E01               	movlw	1
  6365  001204  15A1               	andwf	(??_pf_read+1)& (0+255),w,b
  6366  001206  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  6367  001208  C0BA  F068         	movff	pf_read@rcnt,disk_readp@count
  6368  00120C  C0BB  F069         	movff	pf_read@rcnt+1,disk_readp@count+1
  6369  001210  EC3C  F009         	call	_disk_readp	;wreg free
  6370  001214  0100               	movlb	0	; () banked
  6371  001216  6FA8               	movwf	pf_read@dr& (0+255),b
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;pff.c: 903: if (dr) {fs->flag = 0; return FR_DISK_ERR;};
  6375  001218  51A8               	movf	pf_read@dr& (0+255),w,b
  6376  00121A  B4D8               	btfsc	status,2,c
  6377  00121C  D00A               	goto	l817
  6378                           
  6379                           ; BSR set to: 0
  6380  00121E  EE20 F001          	lfsr	2,1
  6381  001222  51BC               	movf	pf_read@fs& (0+255),w,b
  6382  001224  26D9               	addwf	fsr2l,f,c
  6383  001226  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6384  001228  22DA               	addwfc	fsr2h,f,c
  6385  00122A  0E00               	movlw	0
  6386  00122C  6EDF               	movwf	indf2,c
  6387                           
  6388                           ; BSR set to: 0
  6389  00122E  0E01               	movlw	1
  6390                           
  6391                           ; BSR set to: 0
  6392  001230  0012               	return	
  6393  001232                     l817:
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;pff.c: 904: fs->fptr += rcnt; rbuff += rcnt;
  6397                           
  6398                           ; BSR set to: 0
  6399  001232  EE20 F016          	lfsr	2,22
  6400  001236  51BC               	movf	pf_read@fs& (0+255),w,b
  6401  001238  26D9               	addwf	fsr2l,f,c
  6402  00123A  51BD               	movf	(pf_read@fs+1)& (0+255),w,b
  6403  00123C  22DA               	addwfc	fsr2h,f,c
  6404  00123E  51BA               	movf	pf_read@rcnt& (0+255),w,b
  6405  001240  26DE               	addwf	postinc2,f,c
  6406  001242  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6407  001244  22DE               	addwfc	postinc2,f,c
  6408  001246  0E00               	movlw	0
  6409  001248  22DE               	addwfc	postinc2,f,c
  6410  00124A  22DE               	addwfc	postinc2,f,c
  6411                           
  6412                           ; BSR set to: 0
  6413  00124C  51BA               	movf	pf_read@rcnt& (0+255),w,b
  6414  00124E  27A9               	addwf	pf_read@rbuff& (0+255),f,b
  6415  001250  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6416  001252  23AA               	addwfc	(pf_read@rbuff+1)& (0+255),f,b
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;pff.c: 905: btr -= rcnt; *br += rcnt;
  6420  001254  51BA               	movf	pf_read@rcnt& (0+255),w,b
  6421  001256  5F9C               	subwf	pf_read@btr& (0+255),f,b
  6422  001258  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6423  00125A  5B9D               	subwfb	(pf_read@btr+1)& (0+255),f,b
  6424                           
  6425                           ; BSR set to: 0
  6426  00125C  C09E  FFD9         	movff	pf_read@br,fsr2l
  6427  001260  C09F  FFDA         	movff	pf_read@br+1,fsr2h
  6428  001264  51BA               	movf	pf_read@rcnt& (0+255),w,b
  6429  001266  26DE               	addwf	postinc2,f,c
  6430  001268  51BB               	movf	(pf_read@rcnt+1)& (0+255),w,b
  6431  00126A  22DD               	addwfc	postdec2,f,c
  6432  00126C                     l804:
  6433                           
  6434                           ; BSR set to: 0
  6435                           
  6436                           ; BSR set to: 0
  6437  00126C  519C               	movf	pf_read@btr& (0+255),w,b
  6438  00126E  119D               	iorwf	(pf_read@btr+1)& (0+255),w,b
  6439  001270  A4D8               	btfss	status,2,c
  6440  001272  D6A1               	goto	l805
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;pff.c: 906: }
  6444                           ;pff.c: 908: return FR_OK;
  6445                           
  6446                           ; BSR set to: 0
  6447  001274  0E00               	movlw	0
  6448  001276  0012               	return	
  6449  001278                     __end_of_pf_read:
  6450                           	opt stack 0
  6451                           tosu	equ	0xFFF
  6452                           tosh	equ	0xFFE
  6453                           tosl	equ	0xFFD
  6454                           pclath	equ	0xFFA
  6455                           tblptru	equ	0xFF8
  6456                           tblptrh	equ	0xFF7
  6457                           tblptrl	equ	0xFF6
  6458                           tablat	equ	0xFF5
  6459                           prodh	equ	0xFF4
  6460                           prodl	equ	0xFF3
  6461                           intcon	equ	0xFF2
  6462                           intcon2	equ	0xFF1
  6463                           intcon3	equ	0xFF0
  6464                           postinc0	equ	0xFEE
  6465                           wreg	equ	0xFE8
  6466                           postinc1	equ	0xFE6
  6467                           postdec1	equ	0xFE5
  6468                           fsr1h	equ	0xFE2
  6469                           fsr1l	equ	0xFE1
  6470                           indf2	equ	0xFDF
  6471                           postinc2	equ	0xFDE
  6472                           postdec2	equ	0xFDD
  6473                           plusw2	equ	0xFDB
  6474                           fsr2h	equ	0xFDA
  6475                           fsr2l	equ	0xFD9
  6476                           status	equ	0xFD8
  6477                           
  6478 ;; *************** function _pf_open *****************
  6479 ;; Defined at:
  6480 ;;		line 829 in file "bibliotecas/pff.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;  path            2   90[BANK0 ] PTR const unsigned char 
  6483 ;;		 -> STR_13(10), 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;  dir            32   12[BANK1 ] unsigned char [32]
  6486 ;;  dj             16   47[BANK1 ] struct .
  6487 ;;  sp             12    0[BANK1 ] unsigned char [12]
  6488 ;;  fs              2   45[BANK1 ] PTR struct .
  6489 ;;		 -> SDCard@fs(42), NULL(0), 
  6490 ;;  res             1   44[BANK1 ] enum E43
  6491 ;; Return value:  Size  Location     Type
  6492 ;;                  1    wreg      enum E43
  6493 ;; Registers used:
  6494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6500 ;;      Params:         0       2       0       0       0       0       0       0       0
  6501 ;;      Locals:         0       0      63       0       0       0       0       0       0
  6502 ;;      Temps:          0      22       0       0       0       0       0       0       0
  6503 ;;      Totals:         0      24      63       0       0       0       0       0       0
  6504 ;;Total ram usage:       87 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; Hardware stack levels required when called:   10
  6507 ;; This function calls:
  6508 ;;		_follow_path
  6509 ;;		_get_clust
  6510 ;; This function is called by:
  6511 ;;		_SDCard
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	text28
  6516  001D46                     __ptext28:
  6517                           	opt stack 0
  6518  001D46                     _pf_open:
  6519                           	opt stack 18
  6520                           
  6521                           ;pff.c: 833: FRESULT res;
  6522                           ;pff.c: 834: DIR_E dj;
  6523                           ;pff.c: 835: BYTE sp[12], dir[32];
  6524                           ;pff.c: 836: FATFS *fs = FatFs;
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;incstack = 0
  6528  001D46  C039  F1BE         	movff	_FatFs,pf_open@fs
  6529  001D4A  C03A  F1BF         	movff	_FatFs+1,pf_open@fs+1
  6530                           
  6531                           ;pff.c: 838: if (!fs) return FR_NOT_ENABLED;
  6532  001D4E  0101               	movlb	1	; () banked
  6533  001D50  51BE               	movf	pf_open@fs& (0+255),w,b
  6534  001D52  11BF               	iorwf	(pf_open@fs+1)& (0+255),w,b
  6535  001D54  A4D8               	btfss	status,2,c
  6536  001D56  D002               	goto	l792
  6537                           
  6538                           ; BSR set to: 1
  6539  001D58  0E05               	movlw	5
  6540                           
  6541                           ; BSR set to: 1
  6542  001D5A  0012               	return	
  6543  001D5C                     l792:
  6544                           
  6545                           ; BSR set to: 1
  6546                           ;pff.c: 840: fs->flag = 0;
  6547                           
  6548                           ; BSR set to: 1
  6549  001D5C  EE20 F001          	lfsr	2,1
  6550  001D60  51BE               	movf	pf_open@fs& (0+255),w,b
  6551  001D62  26D9               	addwf	fsr2l,f,c
  6552  001D64  51BF               	movf	(pf_open@fs+1)& (0+255),w,b
  6553  001D66  22DA               	addwfc	fsr2h,f,c
  6554  001D68  0E00               	movlw	0
  6555  001D6A  6EDF               	movwf	indf2,c
  6556                           
  6557                           ; BSR set to: 1
  6558                           ;pff.c: 841: dj.fn = sp;
  6559  001D6C  0E91               	movlw	low pf_open@sp
  6560  001D6E  6FC2               	movwf	(pf_open@dj+2)& (0+255),b
  6561  001D70  0E01               	movlw	high pf_open@sp
  6562  001D72  6FC3               	movwf	(pf_open@dj+3)& (0+255),b
  6563                           
  6564                           ; BSR set to: 1
  6565                           ;pff.c: 842: res = follow_path(&dj, dir, "check.txt" );
  6566  001D74  0EC0               	movlw	low pf_open@dj
  6567  001D76  0100               	movlb	0	; () banked
  6568  001D78  6FB3               	movwf	follow_path@dj& (0+255),b
  6569  001D7A  0E01               	movlw	high pf_open@dj
  6570  001D7C  6FB4               	movwf	(follow_path@dj+1)& (0+255),b
  6571  001D7E  0E9D               	movlw	low pf_open@dir
  6572  001D80  6FB5               	movwf	follow_path@dir& (0+255),b
  6573  001D82  0E01               	movlw	high pf_open@dir
  6574  001D84  6FB6               	movwf	(follow_path@dir+1)& (0+255),b
  6575  001D86  0E55               	movlw	low STR_8
  6576  001D88  6FB7               	movwf	follow_path@path& (0+255),b
  6577  001D8A  0E62               	movlw	high STR_8
  6578  001D8C  6FB8               	movwf	(follow_path@path+1)& (0+255),b
  6579  001D8E  ECDE  F012         	call	_follow_path	;wreg free
  6580  001D92  0101               	movlb	1	; () banked
  6581  001D94  6FBD               	movwf	pf_open@res& (0+255),b
  6582                           
  6583                           ; BSR set to: 1
  6584                           ;pff.c: 843: if (res != FR_OK) return res;
  6585  001D96  51BD               	movf	pf_open@res& (0+255),w,b
  6586  001D98  B4D8               	btfsc	status,2,c
  6587  001D9A  D002               	goto	l794
  6588                           
  6589                           ; BSR set to: 1
  6590  001D9C  51BD               	movf	pf_open@res& (0+255),w,b
  6591                           
  6592                           ; BSR set to: 1
  6593  001D9E  0012               	return	
  6594  001DA0                     l794:
  6595                           
  6596                           ; BSR set to: 1
  6597                           ;pff.c: 844: if (!dir[0] || (dir[11] & 0x10))
  6598                           
  6599                           ; BSR set to: 1
  6600  001DA0  519D               	movf	pf_open@dir& (0+255),w,b
  6601  001DA2  B4D8               	btfsc	status,2,c
  6602  001DA4  D002               	goto	u8190
  6603                           
  6604                           ; BSR set to: 1
  6605  001DA6  A9A8               	btfss	(pf_open@dir+11)& (0+255),4,b
  6606  001DA8  D002               	goto	l795
  6607  001DAA                     u8190:
  6608                           
  6609                           ; BSR set to: 1
  6610                           ;pff.c: 845: return FR_NO_FILE;
  6611                           
  6612                           ; BSR set to: 1
  6613  001DAA  0E03               	movlw	3
  6614                           
  6615                           ; BSR set to: 1
  6616  001DAC  0012               	return	
  6617  001DAE                     l795:
  6618                           
  6619                           ; BSR set to: 1
  6620                           ;pff.c: 847: fs->org_clust = get_clust(dir);
  6621                           
  6622                           ; BSR set to: 1
  6623  001DAE  0E9D               	movlw	low pf_open@dir
  6624  001DB0  6E1A               	movwf	get_clust@dir,c
  6625  001DB2  0E01               	movlw	high pf_open@dir
  6626  001DB4  6E1B               	movwf	get_clust@dir+1,c
  6627  001DB6  EC4F  F014         	call	_get_clust	;wreg free
  6628  001DBA  0101               	movlb	1	; () banked
  6629  001DBC  EE20 F01E          	lfsr	2,30
  6630  001DC0  51BE               	movf	pf_open@fs& (0+255),w,b
  6631  001DC2  26D9               	addwf	fsr2l,f,c
  6632  001DC4  51BF               	movf	(pf_open@fs+1)& (0+255),w,b
  6633  001DC6  22DA               	addwfc	fsr2h,f,c
  6634  001DC8  C01A  FFDE         	movff	?_get_clust,postinc2
  6635  001DCC  C01B  FFDE         	movff	?_get_clust+1,postinc2
  6636  001DD0  C01C  FFDE         	movff	?_get_clust+2,postinc2
  6637  001DD4  C01D  FFDE         	movff	?_get_clust+3,postinc2
  6638                           
  6639                           ; BSR set to: 1
  6640                           ;pff.c: 848: fs->fsize = (DWORD)(((DWORD)*((BYTE*)(dir+28)+3)<<24)|((DWORD)*((BYTE*)(dir
      +                          +28)+2)<<16)|((WORD)*((BYTE*)(dir+28)+1)<<8)|*(BYTE*)(dir+28));
  6641  001DD8  51BA               	movf	(pf_open@dir+29)& (0+255),w,b
  6642  001DDA  0100               	movlb	0	; () banked
  6643  001DDC  6FBD               	movwf	(??_pf_open+1)& (0+255),b
  6644  001DDE  6BBC               	clrf	??_pf_open& (0+255),b
  6645  001DE0  C1BB  F0BE         	movff	pf_open@dir+30,??_pf_open+2
  6646  001DE4  6BBF               	clrf	(??_pf_open+3)& (0+255),b
  6647  001DE6  6BC0               	clrf	(??_pf_open+4)& (0+255),b
  6648  001DE8  6BC1               	clrf	(??_pf_open+5)& (0+255),b
  6649  001DEA  C0BF  F0C1         	movff	??_pf_open+3,??_pf_open+5
  6650  001DEE  C0BE  F0C0         	movff	??_pf_open+2,??_pf_open+4
  6651  001DF2  6BBF               	clrf	(??_pf_open+3)& (0+255),b
  6652  001DF4  6BBE               	clrf	(??_pf_open+2)& (0+255),b
  6653  001DF6  C1BC  F0C2         	movff	pf_open@dir+31,??_pf_open+6
  6654  001DFA  6BC3               	clrf	(??_pf_open+7)& (0+255),b
  6655  001DFC  6BC4               	clrf	(??_pf_open+8)& (0+255),b
  6656  001DFE  6BC5               	clrf	(??_pf_open+9)& (0+255),b
  6657  001E00  C0C2  F0C5         	movff	??_pf_open+6,??_pf_open+9
  6658  001E04  6BC4               	clrf	(??_pf_open+8)& (0+255),b
  6659  001E06  6BC3               	clrf	(??_pf_open+7)& (0+255),b
  6660  001E08  6BC2               	clrf	(??_pf_open+6)& (0+255),b
  6661  001E0A  51BE               	movf	(??_pf_open+2)& (0+255),w,b
  6662  001E0C  11C2               	iorwf	(??_pf_open+6)& (0+255),w,b
  6663  001E0E  6FC6               	movwf	(??_pf_open+10)& (0+255),b
  6664  001E10  51BF               	movf	(??_pf_open+3)& (0+255),w,b
  6665  001E12  11C3               	iorwf	(??_pf_open+7)& (0+255),w,b
  6666  001E14  6FC7               	movwf	(??_pf_open+11)& (0+255),b
  6667  001E16  51C0               	movf	(??_pf_open+4)& (0+255),w,b
  6668  001E18  11C4               	iorwf	(??_pf_open+8)& (0+255),w,b
  6669  001E1A  6FC8               	movwf	(??_pf_open+12)& (0+255),b
  6670  001E1C  51C1               	movf	(??_pf_open+5)& (0+255),w,b
  6671  001E1E  11C5               	iorwf	(??_pf_open+9)& (0+255),w,b
  6672  001E20  6FC9               	movwf	(??_pf_open+13)& (0+255),b
  6673  001E22  51BC               	movf	??_pf_open& (0+255),w,b
  6674  001E24  11C6               	iorwf	(??_pf_open+10)& (0+255),w,b
  6675  001E26  6FCA               	movwf	(??_pf_open+14)& (0+255),b
  6676  001E28  51BD               	movf	(??_pf_open+1)& (0+255),w,b
  6677  001E2A  11C7               	iorwf	(??_pf_open+11)& (0+255),w,b
  6678  001E2C  6FCB               	movwf	(??_pf_open+15)& (0+255),b
  6679  001E2E  0E00               	movlw	0
  6680  001E30  11C8               	iorwf	(??_pf_open+12)& (0+255),w,b
  6681  001E32  6FCC               	movwf	(??_pf_open+16)& (0+255),b
  6682  001E34  0E00               	movlw	0
  6683  001E36  11C9               	iorwf	(??_pf_open+13)& (0+255),w,b
  6684  001E38  6FCD               	movwf	(??_pf_open+17)& (0+255),b
  6685  001E3A  0101               	movlb	1	; () banked
  6686  001E3C  51B9               	movf	(pf_open@dir+28)& (0+255),w,b
  6687  001E3E  0100               	movlb	0	; () banked
  6688  001E40  11CA               	iorwf	(??_pf_open+14)& (0+255),w,b
  6689  001E42  6FCE               	movwf	(??_pf_open+18)& (0+255),b
  6690  001E44  51CB               	movf	(??_pf_open+15)& (0+255),w,b
  6691  001E46  6FCF               	movwf	(??_pf_open+19)& (0+255),b
  6692  001E48  51CC               	movf	(??_pf_open+16)& (0+255),w,b
  6693  001E4A  6FD0               	movwf	(??_pf_open+20)& (0+255),b
  6694  001E4C  51CD               	movf	(??_pf_open+17)& (0+255),w,b
  6695  001E4E  6FD1               	movwf	(??_pf_open+21)& (0+255),b
  6696  001E50  0101               	movlb	1	; () banked
  6697  001E52  EE20 F01A          	lfsr	2,26
  6698  001E56  51BE               	movf	pf_open@fs& (0+255),w,b
  6699  001E58  26D9               	addwf	fsr2l,f,c
  6700  001E5A  51BF               	movf	(pf_open@fs+1)& (0+255),w,b
  6701  001E5C  22DA               	addwfc	fsr2h,f,c
  6702  001E5E  C0CE  FFDE         	movff	??_pf_open+18,postinc2
  6703  001E62  C0CF  FFDE         	movff	??_pf_open+19,postinc2
  6704  001E66  C0D0  FFDE         	movff	??_pf_open+20,postinc2
  6705  001E6A  C0D1  FFDE         	movff	??_pf_open+21,postinc2
  6706                           
  6707                           ; BSR set to: 1
  6708                           ;pff.c: 849: fs->fptr = 0;
  6709  001E6E  EE20 F016          	lfsr	2,22
  6710  001E72  51BE               	movf	pf_open@fs& (0+255),w,b
  6711  001E74  26D9               	addwf	fsr2l,f,c
  6712  001E76  51BF               	movf	(pf_open@fs+1)& (0+255),w,b
  6713  001E78  22DA               	addwfc	fsr2h,f,c
  6714  001E7A  6ADE               	clrf	postinc2,c
  6715  001E7C  6ADE               	clrf	postinc2,c
  6716  001E7E  6ADE               	clrf	postinc2,c
  6717  001E80  6ADD               	clrf	postdec2,c
  6718                           
  6719                           ; BSR set to: 1
  6720                           ;pff.c: 850: fs->flag = 0x01;
  6721  001E82  EE20 F001          	lfsr	2,1
  6722  001E86  51BE               	movf	pf_open@fs& (0+255),w,b
  6723  001E88  26D9               	addwf	fsr2l,f,c
  6724  001E8A  51BF               	movf	(pf_open@fs+1)& (0+255),w,b
  6725  001E8C  22DA               	addwfc	fsr2h,f,c
  6726  001E8E  0E01               	movlw	1
  6727  001E90  6EDF               	movwf	indf2,c
  6728                           
  6729                           ; BSR set to: 1
  6730                           ;pff.c: 852: return FR_OK;
  6731  001E92  0E00               	movlw	0
  6732  001E94  0012               	return	
  6733  001E96                     __end_of_pf_open:
  6734                           	opt stack 0
  6735                           tosu	equ	0xFFF
  6736                           tosh	equ	0xFFE
  6737                           tosl	equ	0xFFD
  6738                           pclath	equ	0xFFA
  6739                           tblptru	equ	0xFF8
  6740                           tblptrh	equ	0xFF7
  6741                           tblptrl	equ	0xFF6
  6742                           tablat	equ	0xFF5
  6743                           prodh	equ	0xFF4
  6744                           prodl	equ	0xFF3
  6745                           intcon	equ	0xFF2
  6746                           intcon2	equ	0xFF1
  6747                           intcon3	equ	0xFF0
  6748                           postinc0	equ	0xFEE
  6749                           wreg	equ	0xFE8
  6750                           postinc1	equ	0xFE6
  6751                           postdec1	equ	0xFE5
  6752                           fsr1h	equ	0xFE2
  6753                           fsr1l	equ	0xFE1
  6754                           indf2	equ	0xFDF
  6755                           postinc2	equ	0xFDE
  6756                           postdec2	equ	0xFDD
  6757                           plusw2	equ	0xFDB
  6758                           fsr2h	equ	0xFDA
  6759                           fsr2l	equ	0xFD9
  6760                           status	equ	0xFD8
  6761                           
  6762 ;; *************** function _follow_path *****************
  6763 ;; Defined at:
  6764 ;;		line 680 in file "bibliotecas/pff.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;  dj              2   83[BANK0 ] PTR struct .
  6767 ;;		 -> pf_open@dj(16), 
  6768 ;;  dir             2   85[BANK0 ] PTR unsigned char 
  6769 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6770 ;;  path            2   87[BANK0 ] PTR const unsigned char 
  6771 ;;		 -> STR_8(10), 
  6772 ;; Auto vars:     Size  Location     Type
  6773 ;;  res             1   89[BANK0 ] enum E43
  6774 ;; Return value:  Size  Location     Type
  6775 ;;                  1    wreg      enum E43
  6776 ;; Registers used:
  6777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6778 ;; Tracked objects:
  6779 ;;		On entry : 0/0
  6780 ;;		On exit  : 0/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6783 ;;      Params:         0       6       0       0       0       0       0       0       0
  6784 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6785 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6786 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6787 ;;Total ram usage:        7 bytes
  6788 ;; Hardware stack levels used:    1
  6789 ;; Hardware stack levels required when called:    9
  6790 ;; This function calls:
  6791 ;;		_create_name
  6792 ;;		_dir_find
  6793 ;;		_dir_rewind
  6794 ;;		_get_clust
  6795 ;; This function is called by:
  6796 ;;		_pf_open
  6797 ;;		_pf_opendir
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text29
  6802  0025BC                     __ptext29:
  6803                           	opt stack 0
  6804  0025BC                     _follow_path:
  6805                           	opt stack 18
  6806                           
  6807                           ;pff.c: 686: FRESULT res;
  6808                           ;pff.c: 689: while (*path == ' ') path++;
  6809                           
  6810                           ; BSR set to: 1
  6811                           ;incstack = 0
  6812  0025BC  D003               	goto	l749
  6813  0025BE  0100               	movlb	0	; () banked
  6814  0025C0  4BB7               	infsnz	follow_path@path& (0+255),f,b
  6815  0025C2  2BB8               	incf	(follow_path@path+1)& (0+255),f,b
  6816  0025C4                     l749:
  6817                           
  6818                           ; BSR set to: 0
  6819  0025C4  C0B7  FFF6         	movff	follow_path@path,tblptrl
  6820  0025C8  C0B8  FFF7         	movff	follow_path@path+1,tblptrh
  6821  0025CC                     	if	0	;tblptru may be non-zero
  6822  0025CC                     	endif
  6823  0025CC                     	if	0	;tblptru may be non-zero
  6824  0025CC                     	endif
  6825  0025CC  0008               	tblrd		*
  6826  0025CE  50F5               	movf	tablat,w,c
  6827  0025D0  0A20               	xorlw	32
  6828  0025D2  B4D8               	btfsc	status,2,c
  6829  0025D4  D7F4               	goto	l750
  6830                           
  6831                           ;pff.c: 690: if (*path == '/') path++;
  6832  0025D6  C0B7  FFF6         	movff	follow_path@path,tblptrl
  6833  0025DA  C0B8  FFF7         	movff	follow_path@path+1,tblptrh
  6834  0025DE                     	if	0	;tblptru may be non-zero
  6835  0025DE                     	endif
  6836  0025DE                     	if	0	;tblptru may be non-zero
  6837  0025DE                     	endif
  6838  0025DE  0008               	tblrd		*
  6839  0025E0  50F5               	movf	tablat,w,c
  6840  0025E2  0A2F               	xorlw	47
  6841  0025E4  A4D8               	btfss	status,2,c
  6842  0025E6  D003               	goto	l752
  6843  0025E8  0100               	movlb	0	; () banked
  6844  0025EA  4BB7               	infsnz	follow_path@path& (0+255),f,b
  6845  0025EC  2BB8               	incf	(follow_path@path+1)& (0+255),f,b
  6846  0025EE                     l752:
  6847                           
  6848                           ;pff.c: 691: dj->sclust = 0;
  6849                           
  6850                           ; BSR set to: 0
  6851  0025EE  0100               	movlb	0	; () banked
  6852  0025F0  EE20 F004          	lfsr	2,4
  6853  0025F4  51B3               	movf	follow_path@dj& (0+255),w,b
  6854  0025F6  26D9               	addwf	fsr2l,f,c
  6855  0025F8  51B4               	movf	(follow_path@dj+1)& (0+255),w,b
  6856  0025FA  22DA               	addwfc	fsr2h,f,c
  6857  0025FC  6ADE               	clrf	postinc2,c
  6858  0025FE  6ADE               	clrf	postinc2,c
  6859  002600  6ADE               	clrf	postinc2,c
  6860  002602  6ADD               	clrf	postdec2,c
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;pff.c: 693: if ((BYTE)*path < ' ') {
  6864  002604  C0B7  FFF6         	movff	follow_path@path,tblptrl
  6865  002608  C0B8  FFF7         	movff	follow_path@path+1,tblptrh
  6866  00260C                     	if	0	;tblptru may be non-zero
  6867  00260C                     	endif
  6868  00260C                     	if	0	;tblptru may be non-zero
  6869  00260C                     	endif
  6870  00260C  0E20               	movlw	32
  6871  00260E  0008               	tblrd		*
  6872  002610  60F5               	cpfslt	tablat,c
  6873  002612  D00F               	goto	l753
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;pff.c: 694: res = dir_rewind(dj);
  6877  002614  C0B3  F065         	movff	follow_path@dj,dir_rewind@dj
  6878  002618  C0B4  F066         	movff	follow_path@dj+1,dir_rewind@dj+1
  6879  00261C  EC26  F011         	call	_dir_rewind	;wreg free
  6880  002620  0100               	movlb	0	; () banked
  6881  002622  6FB9               	movwf	follow_path@res& (0+255),b
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;pff.c: 695: dir[0] = 0;
  6885  002624  C0B5  FFD9         	movff	follow_path@dir,fsr2l
  6886  002628  C0B6  FFDA         	movff	follow_path@dir+1,fsr2h
  6887  00262C  0E00               	movlw	0
  6888  00262E  6EDF               	movwf	indf2,c
  6889                           
  6890                           ;pff.c: 697: } else {
  6891  002630  D04E               	goto	l757
  6892  002632                     l753:
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;pff.c: 699: res = create_name(dj, &path);
  6896                           
  6897                           ; BSR set to: 0
  6898                           
  6899                           ;pff.c: 698: for (;;) {
  6900                           
  6901                           ; BSR set to: 0
  6902  002632  C0B3  F022         	movff	follow_path@dj,create_name@dj
  6903  002636  C0B4  F023         	movff	follow_path@dj+1,create_name@dj+1
  6904  00263A  0EB7               	movlw	low follow_path@path
  6905  00263C  6E24               	movwf	create_name@path,c
  6906  00263E  0E00               	movlw	high follow_path@path
  6907  002640  6E25               	movwf	create_name@path+1,c
  6908  002642  EC4B  F00F         	call	_create_name	;wreg free
  6909  002646  0100               	movlb	0	; () banked
  6910  002648  6FB9               	movwf	follow_path@res& (0+255),b
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;pff.c: 700: if (res != FR_OK) break;
  6914  00264A  51B9               	movf	follow_path@res& (0+255),w,b
  6915  00264C  A4D8               	btfss	status,2,c
  6916  00264E  D03F               	goto	l757
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;pff.c: 701: res = dir_find(dj, dir);
  6920                           
  6921                           ; BSR set to: 0
  6922                           
  6923                           ; BSR set to: 0
  6924  002650  C0B3  F0AB         	movff	follow_path@dj,dir_find@dj
  6925  002654  C0B4  F0AC         	movff	follow_path@dj+1,dir_find@dj+1
  6926  002658  C0B5  F0AD         	movff	follow_path@dir,dir_find@dir
  6927  00265C  C0B6  F0AE         	movff	follow_path@dir+1,dir_find@dir+1
  6928  002660  EC69  F013         	call	_dir_find	;wreg free
  6929  002664  0100               	movlb	0	; () banked
  6930  002666  6FB9               	movwf	follow_path@res& (0+255),b
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;pff.c: 702: if (res != FR_OK) break;
  6934  002668  51B9               	movf	follow_path@res& (0+255),w,b
  6935  00266A  A4D8               	btfss	status,2,c
  6936  00266C  D030               	goto	l757
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;pff.c: 703: if (dj->fn[11]) break;
  6940                           
  6941                           ; BSR set to: 0
  6942                           
  6943                           ; BSR set to: 0
  6944  00266E  EE20 F002          	lfsr	2,2
  6945  002672  51B3               	movf	follow_path@dj& (0+255),w,b
  6946  002674  26D9               	addwf	fsr2l,f,c
  6947  002676  51B4               	movf	(follow_path@dj+1)& (0+255),w,b
  6948  002678  22DA               	addwfc	fsr2h,f,c
  6949  00267A  EE10 F00B          	lfsr	1,11
  6950  00267E  50DE               	movf	postinc2,w,c
  6951  002680  26E1               	addwf	fsr1l,f,c
  6952  002682  50DD               	movf	postdec2,w,c
  6953  002684  22E2               	addwfc	fsr1h,f,c
  6954  002686  50E7               	movf	indf1,w,c
  6955  002688  A4D8               	btfss	status,2,c
  6956  00268A  D021               	goto	l757
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;pff.c: 704: if (!(dir[11] & 0x10)) {
  6960                           
  6961                           ; BSR set to: 0
  6962                           
  6963                           ; BSR set to: 0
  6964  00268C  EE20 F00B          	lfsr	2,11
  6965  002690  51B5               	movf	follow_path@dir& (0+255),w,b
  6966  002692  26D9               	addwf	fsr2l,f,c
  6967  002694  51B6               	movf	(follow_path@dir+1)& (0+255),w,b
  6968  002696  22DA               	addwfc	fsr2h,f,c
  6969  002698  B8DF               	btfsc	indf2,4,c
  6970  00269A  D003               	goto	l760
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;pff.c: 705: res = FR_NO_FILE; break;
  6974  00269C  0E03               	movlw	3
  6975  00269E  6FB9               	movwf	follow_path@res& (0+255),b
  6976  0026A0  D016               	goto	l757
  6977  0026A2                     l760:
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;pff.c: 706: }
  6981                           ;pff.c: 707: dj->sclust = get_clust(dir);
  6982                           
  6983                           ; BSR set to: 0
  6984  0026A2  C0B5  F01A         	movff	follow_path@dir,get_clust@dir
  6985  0026A6  C0B6  F01B         	movff	follow_path@dir+1,get_clust@dir+1
  6986  0026AA  EC4F  F014         	call	_get_clust	;wreg free
  6987  0026AE  0100               	movlb	0	; () banked
  6988  0026B0  EE20 F004          	lfsr	2,4
  6989  0026B4  51B3               	movf	follow_path@dj& (0+255),w,b
  6990  0026B6  26D9               	addwf	fsr2l,f,c
  6991  0026B8  51B4               	movf	(follow_path@dj+1)& (0+255),w,b
  6992  0026BA  22DA               	addwfc	fsr2h,f,c
  6993  0026BC  C01A  FFDE         	movff	?_get_clust,postinc2
  6994  0026C0  C01B  FFDE         	movff	?_get_clust+1,postinc2
  6995  0026C4  C01C  FFDE         	movff	?_get_clust+2,postinc2
  6996  0026C8  C01D  FFDE         	movff	?_get_clust+3,postinc2
  6997                           
  6998                           ;pff.c: 708: }
  6999  0026CC  D7B2               	goto	l753
  7000  0026CE                     l757:
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;pff.c: 709: }
  7004                           ;pff.c: 711: return res;
  7005                           
  7006                           ; BSR set to: 0
  7007                           
  7008                           ; BSR set to: 0
  7009  0026CE  51B9               	movf	follow_path@res& (0+255),w,b
  7010  0026D0  0012               	return	
  7011  0026D2                     __end_of_follow_path:
  7012                           	opt stack 0
  7013                           tosu	equ	0xFFF
  7014                           tosh	equ	0xFFE
  7015                           tosl	equ	0xFFD
  7016                           pclath	equ	0xFFA
  7017                           tblptru	equ	0xFF8
  7018                           tblptrh	equ	0xFF7
  7019                           tblptrl	equ	0xFF6
  7020                           tablat	equ	0xFF5
  7021                           prodh	equ	0xFF4
  7022                           prodl	equ	0xFF3
  7023                           intcon	equ	0xFF2
  7024                           intcon2	equ	0xFF1
  7025                           intcon3	equ	0xFF0
  7026                           postinc0	equ	0xFEE
  7027                           wreg	equ	0xFE8
  7028                           indf1	equ	0xFE7
  7029                           postinc1	equ	0xFE6
  7030                           postdec1	equ	0xFE5
  7031                           fsr1h	equ	0xFE2
  7032                           fsr1l	equ	0xFE1
  7033                           indf2	equ	0xFDF
  7034                           postinc2	equ	0xFDE
  7035                           postdec2	equ	0xFDD
  7036                           plusw2	equ	0xFDB
  7037                           fsr2h	equ	0xFDA
  7038                           fsr2l	equ	0xFD9
  7039                           status	equ	0xFD8
  7040                           
  7041 ;; *************** function _get_clust *****************
  7042 ;; Defined at:
  7043 ;;		line 414 in file "bibliotecas/pff.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;  dir             2   25[COMRAM] PTR unsigned char 
  7046 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;  clst            4   39[COMRAM] unsigned long 
  7049 ;;  fs              2   37[COMRAM] PTR struct .
  7050 ;;		 -> SDCard@fs(42), NULL(0), 
  7051 ;; Return value:  Size  Location     Type
  7052 ;;                  4   25[COMRAM] unsigned long 
  7053 ;; Registers used:
  7054 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7055 ;; Tracked objects:
  7056 ;;		On entry : 0/0
  7057 ;;		On exit  : 0/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7060 ;;      Params:         4       0       0       0       0       0       0       0       0
  7061 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7062 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7063 ;;      Totals:        18       0       0       0       0       0       0       0       0
  7064 ;;Total ram usage:       18 bytes
  7065 ;; Hardware stack levels used:    1
  7066 ;; Hardware stack levels required when called:    2
  7067 ;; This function calls:
  7068 ;;		Nothing
  7069 ;; This function is called by:
  7070 ;;		_follow_path
  7071 ;;		_pf_open
  7072 ;;		_pf_opendir
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text30
  7077  00289E                     __ptext30:
  7078                           	opt stack 0
  7079  00289E                     _get_clust:
  7080                           	opt stack 25
  7081                           
  7082                           ;pff.c: 418: FATFS *fs = FatFs;
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;incstack = 0
  7086  00289E  C039  F026         	movff	_FatFs,get_clust@fs
  7087  0028A2  C03A  F027         	movff	_FatFs+1,get_clust@fs+1
  7088                           
  7089                           ;pff.c: 422: if (0 || (1 && fs->fs_type == 3)) {
  7090  0028A6  0E00               	movlw	0
  7091  0028A8  6E28               	movwf	get_clust@clst,c
  7092  0028AA  0E00               	movlw	0
  7093  0028AC  6E29               	movwf	get_clust@clst+1,c
  7094  0028AE  0E00               	movlw	0
  7095  0028B0  6E2A               	movwf	get_clust@clst+2,c
  7096  0028B2  0E00               	movlw	0
  7097  0028B4  6E2B               	movwf	get_clust@clst+3,c
  7098  0028B6  C026  FFD9         	movff	get_clust@fs,fsr2l
  7099  0028BA  C027  FFDA         	movff	get_clust@fs+1,fsr2h
  7100  0028BE  0E03               	movlw	3
  7101  0028C0  18DE               	xorwf	postinc2,w,c
  7102  0028C2  A4D8               	btfss	status,2,c
  7103  0028C4  D025               	goto	l664
  7104                           
  7105                           ;pff.c: 423: clst = (WORD)(((WORD)*((BYTE*)(dir+20)+1)<<8)|(WORD)*(BYTE*)(dir+20));
  7106  0028C6  EE20 F015          	lfsr	2,21
  7107  0028CA  501A               	movf	get_clust@dir,w,c
  7108  0028CC  26D9               	addwf	fsr2l,f,c
  7109  0028CE  501B               	movf	get_clust@dir+1,w,c
  7110  0028D0  22DA               	addwfc	fsr2h,f,c
  7111  0028D2  50DF               	movf	indf2,w,c
  7112  0028D4  6E1E               	movwf	??_get_clust& (0+255),c
  7113  0028D6  501E               	movf	??_get_clust,w,c
  7114  0028D8  6E20               	movwf	(??_get_clust+2)& (0+255),c
  7115  0028DA  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  7116  0028DC  EE20 F014          	lfsr	2,20
  7117  0028E0  501A               	movf	get_clust@dir,w,c
  7118  0028E2  26D9               	addwf	fsr2l,f,c
  7119  0028E4  501B               	movf	get_clust@dir+1,w,c
  7120  0028E6  22DA               	addwfc	fsr2h,f,c
  7121  0028E8  50DF               	movf	indf2,w,c
  7122  0028EA  6E21               	movwf	(??_get_clust+3)& (0+255),c
  7123  0028EC  5021               	movf	??_get_clust+3,w,c
  7124  0028EE  121F               	iorwf	??_get_clust+1,f,c
  7125  0028F0  0E00               	movlw	0
  7126  0028F2  1220               	iorwf	??_get_clust+2,f,c
  7127  0028F4  C01F  F028         	movff	??_get_clust+1,get_clust@clst
  7128  0028F8  C020  F029         	movff	??_get_clust+2,get_clust@clst+1
  7129  0028FC  6A2A               	clrf	get_clust@clst+2,c
  7130  0028FE  6A2B               	clrf	get_clust@clst+3,c
  7131                           
  7132                           ;pff.c: 424: clst <<= 16;
  7133  002900  0E10               	movlw	16
  7134  002902                     u7465:
  7135  002902  90D8               	bcf	status,0,c
  7136  002904  3628               	rlcf	get_clust@clst,f,c
  7137  002906  3629               	rlcf	get_clust@clst+1,f,c
  7138  002908  362A               	rlcf	get_clust@clst+2,f,c
  7139  00290A  362B               	rlcf	get_clust@clst+3,f,c
  7140  00290C  2EE8               	decfsz	wreg,f,c
  7141  00290E  D7F9               	goto	u7465
  7142  002910                     l664:
  7143                           
  7144                           ;pff.c: 425: }
  7145                           ;pff.c: 426: clst |= (WORD)(((WORD)*((BYTE*)(dir+26)+1)<<8)|(WORD)*(BYTE*)(dir+26));
  7146  002910  EE20 F01B          	lfsr	2,27
  7147  002914  501A               	movf	get_clust@dir,w,c
  7148  002916  26D9               	addwf	fsr2l,f,c
  7149  002918  501B               	movf	get_clust@dir+1,w,c
  7150  00291A  22DA               	addwfc	fsr2h,f,c
  7151  00291C  50DF               	movf	indf2,w,c
  7152  00291E  6E1E               	movwf	??_get_clust& (0+255),c
  7153  002920  501E               	movf	??_get_clust,w,c
  7154  002922  6E20               	movwf	(??_get_clust+2)& (0+255),c
  7155  002924  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  7156  002926  EE20 F01A          	lfsr	2,26
  7157  00292A  501A               	movf	get_clust@dir,w,c
  7158  00292C  26D9               	addwf	fsr2l,f,c
  7159  00292E  501B               	movf	get_clust@dir+1,w,c
  7160  002930  22DA               	addwfc	fsr2h,f,c
  7161  002932  50DF               	movf	indf2,w,c
  7162  002934  6E21               	movwf	(??_get_clust+3)& (0+255),c
  7163  002936  5021               	movf	??_get_clust+3,w,c
  7164  002938  101F               	iorwf	??_get_clust+1,w,c
  7165  00293A  6E22               	movwf	(??_get_clust+4)& (0+255),c
  7166  00293C  5020               	movf	??_get_clust+2,w,c
  7167  00293E  6E23               	movwf	(??_get_clust+5)& (0+255),c
  7168  002940  6A24               	clrf	(??_get_clust+6)& (0+255),c
  7169  002942  6A25               	clrf	(??_get_clust+7)& (0+255),c
  7170  002944  5022               	movf	??_get_clust+4,w,c
  7171  002946  1228               	iorwf	get_clust@clst,f,c
  7172  002948  5023               	movf	??_get_clust+5,w,c
  7173  00294A  1229               	iorwf	get_clust@clst+1,f,c
  7174  00294C  5024               	movf	??_get_clust+6,w,c
  7175  00294E  122A               	iorwf	get_clust@clst+2,f,c
  7176  002950  5025               	movf	??_get_clust+7,w,c
  7177  002952  122B               	iorwf	get_clust@clst+3,f,c
  7178                           
  7179                           ;pff.c: 428: return clst;
  7180  002954  C028  F01A         	movff	get_clust@clst,?_get_clust
  7181  002958  C029  F01B         	movff	get_clust@clst+1,?_get_clust+1
  7182  00295C  C02A  F01C         	movff	get_clust@clst+2,?_get_clust+2
  7183  002960  C02B  F01D         	movff	get_clust@clst+3,?_get_clust+3
  7184  002964  0012               	return	
  7185  002966                     __end_of_get_clust:
  7186                           	opt stack 0
  7187                           tosu	equ	0xFFF
  7188                           tosh	equ	0xFFE
  7189                           tosl	equ	0xFFD
  7190                           pclath	equ	0xFFA
  7191                           tblptru	equ	0xFF8
  7192                           tblptrh	equ	0xFF7
  7193                           tblptrl	equ	0xFF6
  7194                           tablat	equ	0xFF5
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           intcon	equ	0xFF2
  7198                           intcon2	equ	0xFF1
  7199                           intcon3	equ	0xFF0
  7200                           postinc0	equ	0xFEE
  7201                           wreg	equ	0xFE8
  7202                           indf1	equ	0xFE7
  7203                           postinc1	equ	0xFE6
  7204                           postdec1	equ	0xFE5
  7205                           fsr1h	equ	0xFE2
  7206                           fsr1l	equ	0xFE1
  7207                           indf2	equ	0xFDF
  7208                           postinc2	equ	0xFDE
  7209                           postdec2	equ	0xFDD
  7210                           plusw2	equ	0xFDB
  7211                           fsr2h	equ	0xFDA
  7212                           fsr2l	equ	0xFD9
  7213                           status	equ	0xFD8
  7214                           
  7215 ;; *************** function _dir_find *****************
  7216 ;; Defined at:
  7217 ;;		line 510 in file "bibliotecas/pff.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;  dj              2   75[BANK0 ] PTR struct .
  7220 ;;		 -> pf_open@dj(16), 
  7221 ;;  dir             2   77[BANK0 ] PTR unsigned char 
  7222 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  7223 ;; Auto vars:     Size  Location     Type
  7224 ;;  res             1   82[BANK0 ] enum E43
  7225 ;;  c               1   81[BANK0 ] unsigned char 
  7226 ;; Return value:  Size  Location     Type
  7227 ;;                  1    wreg      enum E43
  7228 ;; Registers used:
  7229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7230 ;; Tracked objects:
  7231 ;;		On entry : 0/0
  7232 ;;		On exit  : 0/0
  7233 ;;		Unchanged: 0/0
  7234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7235 ;;      Params:         0       4       0       0       0       0       0       0       0
  7236 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7237 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7238 ;;      Totals:         0       8       0       0       0       0       0       0       0
  7239 ;;Total ram usage:        8 bytes
  7240 ;; Hardware stack levels used:    1
  7241 ;; Hardware stack levels required when called:    8
  7242 ;; This function calls:
  7243 ;;		_dir_next
  7244 ;;		_dir_rewind
  7245 ;;		_disk_readp
  7246 ;;		_mem_cmp
  7247 ;; This function is called by:
  7248 ;;		_follow_path
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           	psect	text31
  7253  0026D2                     __ptext31:
  7254                           	opt stack 0
  7255  0026D2                     _dir_find:
  7256                           	opt stack 18
  7257                           
  7258                           ;pff.c: 515: FRESULT res;
  7259                           ;pff.c: 516: BYTE c;
  7260                           ;pff.c: 519: res = dir_rewind(dj);
  7261                           
  7262                           ;incstack = 0
  7263  0026D2  C0AB  F065         	movff	dir_find@dj,dir_rewind@dj
  7264  0026D6  C0AC  F066         	movff	dir_find@dj+1,dir_rewind@dj+1
  7265  0026DA  EC26  F011         	call	_dir_rewind	;wreg free
  7266  0026DE  0100               	movlb	0	; () banked
  7267  0026E0  6FB2               	movwf	dir_find@res& (0+255),b
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;pff.c: 520: if (res != FR_OK) return res;
  7271  0026E2  51B2               	movf	dir_find@res& (0+255),w,b
  7272  0026E4  B4D8               	btfsc	status,2,c
  7273  0026E6  D002               	goto	l696
  7274                           
  7275                           ; BSR set to: 0
  7276  0026E8  51B2               	movf	dir_find@res& (0+255),w,b
  7277                           
  7278                           ; BSR set to: 0
  7279  0026EA  0012               	return	
  7280  0026EC                     l696:
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;pff.c: 523: res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)
  7284                           ;pff.c: 524: ? FR_DISK_ERR : FR_OK;
  7285                           
  7286                           ; BSR set to: 0
  7287                           
  7288                           ;pff.c: 522: do {
  7289                           
  7290                           ; BSR set to: 0
  7291  0026EC  C0AD  F060         	movff	dir_find@dir,disk_readp@rd
  7292  0026F0  C0AE  F061         	movff	dir_find@dir+1,disk_readp@rd+1
  7293  0026F4  EE20 F00C          	lfsr	2,12
  7294  0026F8  51AB               	movf	dir_find@dj& (0+255),w,b
  7295  0026FA  26D9               	addwf	fsr2l,f,c
  7296  0026FC  51AC               	movf	(dir_find@dj+1)& (0+255),w,b
  7297  0026FE  22DA               	addwfc	fsr2h,f,c
  7298  002700  CFDE F062          	movff	postinc2,disk_readp@sector
  7299  002704  CFDE F063          	movff	postinc2,disk_readp@sector+1
  7300  002708  CFDE F064          	movff	postinc2,disk_readp@sector+2
  7301  00270C  CFDE F065          	movff	postinc2,disk_readp@sector+3
  7302  002710  C0AB  FFD9         	movff	dir_find@dj,fsr2l
  7303  002714  C0AC  FFDA         	movff	dir_find@dj+1,fsr2h
  7304  002718  CFDE F0AF          	movff	postinc2,??_dir_find
  7305  00271C  CFDD F0B0          	movff	postdec2,??_dir_find+1
  7306  002720  0E0F               	movlw	15
  7307  002722  17AF               	andwf	??_dir_find& (0+255),f,b
  7308  002724  0E00               	movlw	0
  7309  002726  17B0               	andwf	(??_dir_find+1)& (0+255),f,b
  7310  002728  0E05               	movlw	5
  7311  00272A                     u7485:
  7312  00272A  90D8               	bcf	status,0,c
  7313  00272C  37AF               	rlcf	??_dir_find& (0+255),f,b
  7314  00272E  37B0               	rlcf	(??_dir_find+1)& (0+255),f,b
  7315  002730  2EE8               	decfsz	wreg,f,c
  7316  002732  D7FB               	goto	u7485
  7317  002734  C0AF  F066         	movff	??_dir_find,disk_readp@offset
  7318  002738  C0B0  F067         	movff	??_dir_find+1,disk_readp@offset+1
  7319  00273C  0E00               	movlw	0
  7320  00273E  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  7321  002740  0E20               	movlw	32
  7322  002742  6F68               	movwf	disk_readp@count& (0+255),b
  7323  002744  EC3C  F009         	call	_disk_readp	;wreg free
  7324  002748  0900               	iorlw	0
  7325  00274A  B4D8               	btfsc	status,2,c
  7326  00274C  D002               	goto	u7490
  7327  00274E  0E01               	movlw	1
  7328  002750  D001               	goto	u7500
  7329  002752                     u7490:
  7330  002752  0E00               	movlw	0
  7331  002754                     u7500:
  7332  002754  0100               	movlb	0	; () banked
  7333  002756  6FB2               	movwf	dir_find@res& (0+255),b
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;pff.c: 525: if (res != FR_OK) break;
  7337  002758  51B2               	movf	dir_find@res& (0+255),w,b
  7338  00275A  A4D8               	btfss	status,2,c
  7339  00275C  D037               	goto	u7550
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;pff.c: 526: c = dir[0];
  7343                           
  7344                           ; BSR set to: 0
  7345                           
  7346                           ; BSR set to: 0
  7347  00275E  C0AD  FFD9         	movff	dir_find@dir,fsr2l
  7348  002762  C0AE  FFDA         	movff	dir_find@dir+1,fsr2h
  7349  002766  50DF               	movf	indf2,w,c
  7350  002768  6FB1               	movwf	dir_find@c& (0+255),b
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;pff.c: 527: if (c == 0) { res = FR_NO_FILE; break; }
  7354  00276A  51B1               	movf	dir_find@c& (0+255),w,b
  7355  00276C  A4D8               	btfss	status,2,c
  7356  00276E  D003               	goto	l701
  7357                           
  7358                           ; BSR set to: 0
  7359  002770  0E03               	movlw	3
  7360  002772  6FB2               	movwf	dir_find@res& (0+255),b
  7361  002774  D02B               	goto	u7550
  7362  002776                     l701:
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;pff.c: 528: if (!(dir[11] & 0x08) && !mem_cmp(dir, dj->fn, 11))
  7366                           
  7367                           ; BSR set to: 0
  7368  002776  EE20 F00B          	lfsr	2,11
  7369  00277A  51AD               	movf	dir_find@dir& (0+255),w,b
  7370  00277C  26D9               	addwf	fsr2l,f,c
  7371  00277E  51AE               	movf	(dir_find@dir+1)& (0+255),w,b
  7372  002780  22DA               	addwfc	fsr2h,f,c
  7373  002782  B6DF               	btfsc	indf2,3,c
  7374  002784  D018               	goto	l702
  7375                           
  7376                           ; BSR set to: 0
  7377  002786  C0AD  F01A         	movff	dir_find@dir,mem_cmp@dst
  7378  00278A  C0AE  F01B         	movff	dir_find@dir+1,mem_cmp@dst+1
  7379  00278E  EE20 F002          	lfsr	2,2
  7380  002792  51AB               	movf	dir_find@dj& (0+255),w,b
  7381  002794  26D9               	addwf	fsr2l,f,c
  7382  002796  51AC               	movf	(dir_find@dj+1)& (0+255),w,b
  7383  002798  22DA               	addwfc	fsr2h,f,c
  7384  00279A  CFDE F01C          	movff	postinc2,mem_cmp@src
  7385  00279E  CFDD F01D          	movff	postdec2,mem_cmp@src+1
  7386  0027A2  0E00               	movlw	0
  7387  0027A4  6E1F               	movwf	mem_cmp@cnt+1,c
  7388  0027A6  0E0B               	movlw	11
  7389  0027A8  6E1E               	movwf	mem_cmp@cnt,c
  7390  0027AA  EC2C  F017         	call	_mem_cmp	;wreg free
  7391  0027AE  501A               	movf	?_mem_cmp,w,c
  7392  0027B0  101B               	iorwf	?_mem_cmp+1,w,c
  7393  0027B2  B4D8               	btfsc	status,2,c
  7394  0027B4  D00B               	goto	u7550
  7395  0027B6                     l702:
  7396                           
  7397                           ;pff.c: 530: res = dir_next(dj);
  7398  0027B6  C0AB  F09A         	movff	dir_find@dj,dir_next@dj
  7399  0027BA  C0AC  F09B         	movff	dir_find@dj+1,dir_next@dj+1
  7400  0027BE  EC3E  F00C         	call	_dir_next	;wreg free
  7401  0027C2  0100               	movlb	0	; () banked
  7402  0027C4  6FB2               	movwf	dir_find@res& (0+255),b
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;pff.c: 531: } while (res == FR_OK);
  7406  0027C6  51B2               	movf	dir_find@res& (0+255),w,b
  7407  0027C8  B4D8               	btfsc	status,2,c
  7408  0027CA  D790               	goto	l696
  7409  0027CC                     u7550:
  7410                           
  7411                           ;pff.c: 533: return res;
  7412                           
  7413                           ; BSR set to: 0
  7414  0027CC  0100               	movlb	0	; () banked
  7415  0027CE  51B2               	movf	dir_find@res& (0+255),w,b
  7416  0027D0  0012               	return	
  7417  0027D2                     __end_of_dir_find:
  7418                           	opt stack 0
  7419                           tosu	equ	0xFFF
  7420                           tosh	equ	0xFFE
  7421                           tosl	equ	0xFFD
  7422                           pclath	equ	0xFFA
  7423                           tblptru	equ	0xFF8
  7424                           tblptrh	equ	0xFF7
  7425                           tblptrl	equ	0xFF6
  7426                           tablat	equ	0xFF5
  7427                           prodh	equ	0xFF4
  7428                           prodl	equ	0xFF3
  7429                           intcon	equ	0xFF2
  7430                           intcon2	equ	0xFF1
  7431                           intcon3	equ	0xFF0
  7432                           postinc0	equ	0xFEE
  7433                           wreg	equ	0xFE8
  7434                           indf1	equ	0xFE7
  7435                           postinc1	equ	0xFE6
  7436                           postdec1	equ	0xFE5
  7437                           fsr1h	equ	0xFE2
  7438                           fsr1l	equ	0xFE1
  7439                           indf2	equ	0xFDF
  7440                           postinc2	equ	0xFDE
  7441                           postdec2	equ	0xFDD
  7442                           plusw2	equ	0xFDB
  7443                           fsr2h	equ	0xFDA
  7444                           fsr2l	equ	0xFD9
  7445                           status	equ	0xFD8
  7446                           
  7447 ;; *************** function _mem_cmp *****************
  7448 ;; Defined at:
  7449 ;;		line 336 in file "bibliotecas/pff.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;  dst             2   25[COMRAM] PTR const void 
  7452 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  7453 ;;  src             2   27[COMRAM] PTR const void 
  7454 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  7455 ;;  cnt             2   29[COMRAM] int 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;  r               2   38[COMRAM] int 
  7458 ;;  s               2   36[COMRAM] PTR const unsigned char 
  7459 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  7460 ;;  d               2   34[COMRAM] PTR const unsigned char 
  7461 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  2   25[COMRAM] int 
  7464 ;; Registers used:
  7465 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7471 ;;      Params:         6       0       0       0       0       0       0       0       0
  7472 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7473 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7474 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7475 ;;Total ram usage:       15 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    2
  7478 ;; This function calls:
  7479 ;;		Nothing
  7480 ;; This function is called by:
  7481 ;;		_dir_find
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           	psect	text32
  7486  002E58                     __ptext32:
  7487                           	opt stack 0
  7488  002E58                     _mem_cmp:
  7489                           	opt stack 23
  7490                           
  7491                           ;pff.c: 337: const char *d = (const char *)dst, *s = (const char *)src;
  7492                           
  7493                           ; BSR set to: 0
  7494                           ;incstack = 0
  7495  002E58  C01A  F023         	movff	mem_cmp@dst,mem_cmp@d
  7496  002E5C  C01B  F024         	movff	mem_cmp@dst+1,mem_cmp@d+1
  7497  002E60  C01C  F025         	movff	mem_cmp@src,mem_cmp@s
  7498  002E64  C01D  F026         	movff	mem_cmp@src+1,mem_cmp@s+1
  7499                           
  7500                           ;pff.c: 338: int r = 0;
  7501  002E68  0E00               	movlw	0
  7502  002E6A  6E28               	movwf	mem_cmp@r+1,c
  7503  002E6C  0E00               	movlw	0
  7504  002E6E  6E27               	movwf	mem_cmp@r,c
  7505  002E70  061E               	decf	mem_cmp@cnt,f,c
  7506  002E72  A0D8               	btfss	status,0,c
  7507  002E74  061F               	decf	mem_cmp@cnt+1,f,c
  7508  002E76  281E               	incf	mem_cmp@cnt,w,c
  7509  002E78  E103               	bnz	u7150
  7510  002E7A  281F               	incf	mem_cmp@cnt+1,w,c
  7511  002E7C  B4D8               	btfsc	status,2,c
  7512  002E7E  D01F               	goto	u7160
  7513  002E80                     u7150:
  7514  002E80  C025  FFD9         	movff	mem_cmp@s,fsr2l
  7515  002E84  C026  FFDA         	movff	mem_cmp@s+1,fsr2h
  7516  002E88  4A25               	infsnz	mem_cmp@s,f,c
  7517  002E8A  2A26               	incf	mem_cmp@s+1,f,c
  7518  002E8C  50DF               	movf	indf2,w,c
  7519  002E8E  6E20               	movwf	??_mem_cmp& (0+255),c
  7520  002E90  6A21               	clrf	(??_mem_cmp+1)& (0+255),c
  7521  002E92  1E20               	comf	??_mem_cmp,f,c
  7522  002E94  1E21               	comf	??_mem_cmp+1,f,c
  7523  002E96  4A20               	infsnz	??_mem_cmp,f,c
  7524  002E98  2A21               	incf	??_mem_cmp+1,f,c
  7525  002E9A  C023  FFD9         	movff	mem_cmp@d,fsr2l
  7526  002E9E  C024  FFDA         	movff	mem_cmp@d+1,fsr2h
  7527  002EA2  4A23               	infsnz	mem_cmp@d,f,c
  7528  002EA4  2A24               	incf	mem_cmp@d+1,f,c
  7529  002EA6  50DF               	movf	indf2,w,c
  7530  002EA8  6E22               	movwf	(??_mem_cmp+2)& (0+255),c
  7531  002EAA  5022               	movf	??_mem_cmp+2,w,c
  7532  002EAC  2420               	addwf	??_mem_cmp,w,c
  7533  002EAE  6E27               	movwf	mem_cmp@r,c
  7534  002EB0  0E00               	movlw	0
  7535  002EB2  2021               	addwfc	??_mem_cmp+1,w,c
  7536  002EB4  6E28               	movwf	mem_cmp@r+1,c
  7537  002EB6  5027               	movf	mem_cmp@r,w,c
  7538  002EB8  1028               	iorwf	mem_cmp@r+1,w,c
  7539  002EBA  B4D8               	btfsc	status,2,c
  7540  002EBC  D7D9               	goto	l631
  7541  002EBE                     u7160:
  7542                           
  7543                           ;pff.c: 340: return r;
  7544  002EBE  C027  F01A         	movff	mem_cmp@r,?_mem_cmp
  7545  002EC2  C028  F01B         	movff	mem_cmp@r+1,?_mem_cmp+1
  7546  002EC6  0012               	return		;funcret
  7547  002EC8                     __end_of_mem_cmp:
  7548                           	opt stack 0
  7549                           tosu	equ	0xFFF
  7550                           tosh	equ	0xFFE
  7551                           tosl	equ	0xFFD
  7552                           pclath	equ	0xFFA
  7553                           tblptru	equ	0xFF8
  7554                           tblptrh	equ	0xFF7
  7555                           tblptrl	equ	0xFF6
  7556                           tablat	equ	0xFF5
  7557                           prodh	equ	0xFF4
  7558                           prodl	equ	0xFF3
  7559                           intcon	equ	0xFF2
  7560                           intcon2	equ	0xFF1
  7561                           intcon3	equ	0xFF0
  7562                           postinc0	equ	0xFEE
  7563                           wreg	equ	0xFE8
  7564                           indf1	equ	0xFE7
  7565                           postinc1	equ	0xFE6
  7566                           postdec1	equ	0xFE5
  7567                           fsr1h	equ	0xFE2
  7568                           fsr1l	equ	0xFE1
  7569                           indf2	equ	0xFDF
  7570                           postinc2	equ	0xFDE
  7571                           postdec2	equ	0xFDD
  7572                           plusw2	equ	0xFDB
  7573                           fsr2h	equ	0xFDA
  7574                           fsr2l	equ	0xFD9
  7575                           status	equ	0xFD8
  7576                           
  7577 ;; *************** function _dir_rewind *****************
  7578 ;; Defined at:
  7579 ;;		line 437 in file "bibliotecas/pff.c"
  7580 ;; Parameters:    Size  Location     Type
  7581 ;;  dj              2    5[BANK0 ] PTR struct .
  7582 ;;		 -> pf_open@dj(16), 
  7583 ;; Auto vars:     Size  Location     Type
  7584 ;;  clst            4   17[BANK0 ] unsigned long 
  7585 ;;  fs              2   15[BANK0 ] PTR struct .
  7586 ;;		 -> SDCard@fs(42), NULL(0), 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  1    wreg      enum E43
  7589 ;; Registers used:
  7590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7596 ;;      Params:         0       2       0       0       0       0       0       0       0
  7597 ;;      Locals:         0      10       0       0       0       0       0       0       0
  7598 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7599 ;;      Totals:         0      16       0       0       0       0       0       0       0
  7600 ;;Total ram usage:       16 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    4
  7603 ;; This function calls:
  7604 ;;		_clust2sect
  7605 ;; This function is called by:
  7606 ;;		_dir_find
  7607 ;;		_follow_path
  7608 ;;		_pf_opendir
  7609 ;;		_pf_readdir
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           	psect	text33
  7614  00224C                     __ptext33:
  7615                           	opt stack 0
  7616  00224C                     _dir_rewind:
  7617                           	opt stack 22
  7618                           
  7619                           ;pff.c: 441: DWORD clst;
  7620                           ;pff.c: 442: FATFS *fs = FatFs;
  7621                           
  7622                           ;incstack = 0
  7623  00224C  C039  F06F         	movff	_FatFs,dir_rewind@fs
  7624  002250  C03A  F070         	movff	_FatFs+1,dir_rewind@fs+1
  7625                           
  7626                           ;pff.c: 445: dj->index = 0;
  7627  002254  C065  FFD9         	movff	dir_rewind@dj,fsr2l
  7628  002258  C066  FFDA         	movff	dir_rewind@dj+1,fsr2h
  7629  00225C  0E00               	movlw	0
  7630  00225E  6EDE               	movwf	postinc2,c
  7631  002260  0E00               	movlw	0
  7632  002262  6EDD               	movwf	postdec2,c
  7633                           
  7634                           ;pff.c: 446: clst = dj->sclust;
  7635  002264  0100               	movlb	0	; () banked
  7636  002266  EE20 F004          	lfsr	2,4
  7637  00226A  5165               	movf	dir_rewind@dj& (0+255),w,b
  7638  00226C  26D9               	addwf	fsr2l,f,c
  7639  00226E  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7640  002270  22DA               	addwfc	fsr2h,f,c
  7641  002272  CFDE F071          	movff	postinc2,dir_rewind@clst
  7642  002276  CFDE F072          	movff	postinc2,dir_rewind@clst+1
  7643  00227A  CFDE F073          	movff	postinc2,dir_rewind@clst+2
  7644  00227E  CFDE F074          	movff	postinc2,dir_rewind@clst+3
  7645                           
  7646                           ; BSR set to: 0
  7647                           ;pff.c: 447: if (clst == 1 || clst >= fs->n_fatent)
  7648  002282  0571               	decf	dir_rewind@clst& (0+255),w,b
  7649  002284  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7650  002286  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7651  002288  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7652  00228A  B4D8               	btfsc	status,2,c
  7653  00228C  D010               	goto	u7180
  7654                           
  7655                           ; BSR set to: 0
  7656  00228E  EE20 F006          	lfsr	2,6
  7657  002292  516F               	movf	dir_rewind@fs& (0+255),w,b
  7658  002294  26D9               	addwf	fsr2l,f,c
  7659  002296  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7660  002298  22DA               	addwfc	fsr2h,f,c
  7661  00229A  50DE               	movf	postinc2,w,c
  7662  00229C  5D71               	subwf	dir_rewind@clst& (0+255),w,b
  7663  00229E  50DE               	movf	postinc2,w,c
  7664  0022A0  5972               	subwfb	(dir_rewind@clst+1)& (0+255),w,b
  7665  0022A2  50DE               	movf	postinc2,w,c
  7666  0022A4  5973               	subwfb	(dir_rewind@clst+2)& (0+255),w,b
  7667  0022A6  50DE               	movf	postinc2,w,c
  7668  0022A8  5974               	subwfb	(dir_rewind@clst+3)& (0+255),w,b
  7669  0022AA  A0D8               	btfss	status,0,c
  7670  0022AC  D002               	goto	l670
  7671  0022AE                     u7180:
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;pff.c: 448: return FR_DISK_ERR;
  7675                           
  7676                           ; BSR set to: 0
  7677  0022AE  0E01               	movlw	1
  7678                           
  7679                           ; BSR set to: 0
  7680  0022B0  0012               	return	
  7681  0022B2                     l670:
  7682                           
  7683                           ; BSR set to: 0
  7684                           
  7685                           ; BSR set to: 0
  7686  0022B2  5171               	movf	dir_rewind@clst& (0+255),w,b
  7687  0022B4  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7688  0022B6  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7689  0022B8  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7690  0022BA  A4D8               	btfss	status,2,c
  7691  0022BC  D016               	goto	l674
  7692                           
  7693                           ; BSR set to: 0
  7694  0022BE  C06F  FFD9         	movff	dir_rewind@fs,fsr2l
  7695  0022C2  C070  FFDA         	movff	dir_rewind@fs+1,fsr2h
  7696  0022C6  0E03               	movlw	3
  7697  0022C8  18DE               	xorwf	postinc2,w,c
  7698  0022CA  A4D8               	btfss	status,2,c
  7699  0022CC  D00E               	goto	l674
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;pff.c: 450: clst = (DWORD)fs->dirbase;
  7703                           
  7704                           ; BSR set to: 0
  7705  0022CE  EE20 F00E          	lfsr	2,14
  7706  0022D2  516F               	movf	dir_rewind@fs& (0+255),w,b
  7707  0022D4  26D9               	addwf	fsr2l,f,c
  7708  0022D6  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7709  0022D8  22DA               	addwfc	fsr2h,f,c
  7710  0022DA  CFDE F071          	movff	postinc2,dir_rewind@clst
  7711  0022DE  CFDE F072          	movff	postinc2,dir_rewind@clst+1
  7712  0022E2  CFDE F073          	movff	postinc2,dir_rewind@clst+2
  7713  0022E6  CFDE F074          	movff	postinc2,dir_rewind@clst+3
  7714  0022EA                     l674:
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;pff.c: 452: dj->sect = (0 || clst) ? clust2sect(clst) : fs->dirbase;
  7718  0022EA  EE20 F008          	lfsr	2,8
  7719  0022EE  5165               	movf	dir_rewind@dj& (0+255),w,b
  7720  0022F0  26D9               	addwf	fsr2l,f,c
  7721  0022F2  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7722  0022F4  22DA               	addwfc	fsr2h,f,c
  7723  0022F6  C071  FFDE         	movff	dir_rewind@clst,postinc2
  7724  0022FA  C072  FFDE         	movff	dir_rewind@clst+1,postinc2
  7725  0022FE  C073  FFDE         	movff	dir_rewind@clst+2,postinc2
  7726  002302  C074  FFDE         	movff	dir_rewind@clst+3,postinc2
  7727                           
  7728                           ; BSR set to: 0
  7729  002306  5171               	movf	dir_rewind@clst& (0+255),w,b
  7730  002308  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  7731  00230A  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  7732  00230C  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  7733  00230E  A4D8               	btfss	status,2,c
  7734  002310  D00F               	goto	l678
  7735                           
  7736                           ; BSR set to: 0
  7737  002312  EE20 F00E          	lfsr	2,14
  7738  002316  516F               	movf	dir_rewind@fs& (0+255),w,b
  7739  002318  26D9               	addwf	fsr2l,f,c
  7740  00231A  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  7741  00231C  22DA               	addwfc	fsr2h,f,c
  7742  00231E  CFDE F06B          	movff	postinc2,_dir_rewind$1692
  7743  002322  CFDE F06C          	movff	postinc2,_dir_rewind$1692+1
  7744  002326  CFDE F06D          	movff	postinc2,_dir_rewind$1692+2
  7745  00232A  CFDE F06E          	movff	postinc2,_dir_rewind$1692+3
  7746  00232E  D012               	goto	l680
  7747  002330                     l678:
  7748                           
  7749                           ; BSR set to: 0
  7750                           
  7751                           ; BSR set to: 0
  7752  002330  C071  F026         	movff	dir_rewind@clst,clust2sect@clst
  7753  002334  C072  F027         	movff	dir_rewind@clst+1,clust2sect@clst+1
  7754  002338  C073  F028         	movff	dir_rewind@clst+2,clust2sect@clst+2
  7755  00233C  C074  F029         	movff	dir_rewind@clst+3,clust2sect@clst+3
  7756  002340  ECB3  F014         	call	_clust2sect	;wreg free
  7757  002344  C026  F06B         	movff	?_clust2sect,_dir_rewind$1692
  7758  002348  C027  F06C         	movff	?_clust2sect+1,_dir_rewind$1692+1
  7759  00234C  C028  F06D         	movff	?_clust2sect+2,_dir_rewind$1692+2
  7760  002350  C029  F06E         	movff	?_clust2sect+3,_dir_rewind$1692+3
  7761  002354                     l680:
  7762  002354  0100               	movlb	0	; () banked
  7763  002356  EE20 F00C          	lfsr	2,12
  7764  00235A  5165               	movf	dir_rewind@dj& (0+255),w,b
  7765  00235C  26D9               	addwf	fsr2l,f,c
  7766  00235E  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  7767  002360  22DA               	addwfc	fsr2h,f,c
  7768  002362  C06B  FFDE         	movff	_dir_rewind$1692,postinc2
  7769  002366  C06C  FFDE         	movff	_dir_rewind$1692+1,postinc2
  7770  00236A  C06D  FFDE         	movff	_dir_rewind$1692+2,postinc2
  7771  00236E  C06E  FFDE         	movff	_dir_rewind$1692+3,postinc2
  7772                           
  7773                           ; BSR set to: 0
  7774                           ;pff.c: 454: return FR_OK;
  7775  002372  0E00               	movlw	0
  7776  002374  0012               	return	
  7777  002376                     __end_of_dir_rewind:
  7778                           	opt stack 0
  7779                           tosu	equ	0xFFF
  7780                           tosh	equ	0xFFE
  7781                           tosl	equ	0xFFD
  7782                           pclath	equ	0xFFA
  7783                           tblptru	equ	0xFF8
  7784                           tblptrh	equ	0xFF7
  7785                           tblptrl	equ	0xFF6
  7786                           tablat	equ	0xFF5
  7787                           prodh	equ	0xFF4
  7788                           prodl	equ	0xFF3
  7789                           intcon	equ	0xFF2
  7790                           intcon2	equ	0xFF1
  7791                           intcon3	equ	0xFF0
  7792                           postinc0	equ	0xFEE
  7793                           wreg	equ	0xFE8
  7794                           indf1	equ	0xFE7
  7795                           postinc1	equ	0xFE6
  7796                           postdec1	equ	0xFE5
  7797                           fsr1h	equ	0xFE2
  7798                           fsr1l	equ	0xFE1
  7799                           indf2	equ	0xFDF
  7800                           postinc2	equ	0xFDE
  7801                           postdec2	equ	0xFDD
  7802                           plusw2	equ	0xFDB
  7803                           fsr2h	equ	0xFDA
  7804                           fsr2l	equ	0xFD9
  7805                           status	equ	0xFD8
  7806                           
  7807 ;; *************** function _dir_next *****************
  7808 ;; Defined at:
  7809 ;;		line 465 in file "bibliotecas/pff.c"
  7810 ;; Parameters:    Size  Location     Type
  7811 ;;  dj              2   58[BANK0 ] PTR struct .
  7812 ;;		 -> pf_open@dj(16), 
  7813 ;; Auto vars:     Size  Location     Type
  7814 ;;  clst            4   69[BANK0 ] unsigned long 
  7815 ;;  i               2   73[BANK0 ] unsigned short 
  7816 ;;  fs              2   67[BANK0 ] PTR struct .
  7817 ;;		 -> SDCard@fs(42), NULL(0), 
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  1    wreg      enum E43
  7820 ;; Registers used:
  7821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7827 ;;      Params:         0       2       0       0       0       0       0       0       0
  7828 ;;      Locals:         0       8       0       0       0       0       0       0       0
  7829 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7830 ;;      Totals:         0      17       0       0       0       0       0       0       0
  7831 ;;Total ram usage:       17 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    7
  7834 ;; This function calls:
  7835 ;;		_clust2sect
  7836 ;;		_get_fat
  7837 ;; This function is called by:
  7838 ;;		_dir_find
  7839 ;;		_dir_read
  7840 ;;		_pf_readdir
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           	psect	text34
  7845  00187C                     __ptext34:
  7846                           	opt stack 0
  7847  00187C                     _dir_next:
  7848                           	opt stack 18
  7849                           
  7850                           ;pff.c: 469: DWORD clst;
  7851                           ;pff.c: 470: WORD i;
  7852                           ;pff.c: 471: FATFS *fs = FatFs;
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;incstack = 0
  7856  00187C  C039  F0A3         	movff	_FatFs,dir_next@fs
  7857  001880  C03A  F0A4         	movff	_FatFs+1,dir_next@fs+1
  7858                           
  7859                           ;pff.c: 474: i = dj->index + 1;
  7860  001884  C09A  FFD9         	movff	dir_next@dj,fsr2l
  7861  001888  C09B  FFDA         	movff	dir_next@dj+1,fsr2h
  7862  00188C  CFDE F09C          	movff	postinc2,??_dir_next
  7863  001890  CFDD F09D          	movff	postdec2,??_dir_next+1
  7864  001894  0E01               	movlw	1
  7865  001896  0100               	movlb	0	; () banked
  7866  001898  259C               	addwf	??_dir_next& (0+255),w,b
  7867  00189A  6FA9               	movwf	dir_next@i& (0+255),b
  7868  00189C  0E00               	movlw	0
  7869  00189E  219D               	addwfc	(??_dir_next+1)& (0+255),w,b
  7870  0018A0  6FAA               	movwf	(dir_next@i+1)& (0+255),b
  7871                           
  7872                           ; BSR set to: 0
  7873                           ;pff.c: 475: if (!i || !dj->sect)
  7874  0018A2  51A9               	movf	dir_next@i& (0+255),w,b
  7875  0018A4  11AA               	iorwf	(dir_next@i+1)& (0+255),w,b
  7876  0018A6  B4D8               	btfsc	status,2,c
  7877  0018A8  D00C               	goto	u7230
  7878                           
  7879                           ; BSR set to: 0
  7880  0018AA  EE20 F00C          	lfsr	2,12
  7881  0018AE  519A               	movf	dir_next@dj& (0+255),w,b
  7882  0018B0  26D9               	addwf	fsr2l,f,c
  7883  0018B2  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7884  0018B4  22DA               	addwfc	fsr2h,f,c
  7885  0018B6  50DE               	movf	postinc2,w,c
  7886  0018B8  10DE               	iorwf	postinc2,w,c
  7887  0018BA  10DE               	iorwf	postinc2,w,c
  7888  0018BC  10DE               	iorwf	postinc2,w,c
  7889  0018BE  A4D8               	btfss	status,2,c
  7890  0018C0  D002               	goto	l683
  7891  0018C2                     u7230:
  7892                           
  7893                           ; BSR set to: 0
  7894                           ;pff.c: 476: return FR_NO_FILE;
  7895                           
  7896                           ; BSR set to: 0
  7897  0018C2  0E03               	movlw	3
  7898                           
  7899                           ; BSR set to: 0
  7900  0018C4  0012               	return	
  7901  0018C6                     l683:
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;pff.c: 478: if (!(i % 16)) {
  7905                           
  7906                           ; BSR set to: 0
  7907  0018C6  0E0F               	movlw	15
  7908  0018C8  15A9               	andwf	dir_next@i& (0+255),w,b
  7909  0018CA  6F9C               	movwf	??_dir_next& (0+255),b
  7910  0018CC  0E00               	movlw	0
  7911  0018CE  15AA               	andwf	(dir_next@i+1)& (0+255),w,b
  7912  0018D0  6F9D               	movwf	(??_dir_next+1)& (0+255),b
  7913  0018D2  519C               	movf	??_dir_next& (0+255),w,b
  7914  0018D4  119D               	iorwf	(??_dir_next+1)& (0+255),w,b
  7915  0018D6  A4D8               	btfss	status,2,c
  7916  0018D8  D0A5               	goto	l691
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;pff.c: 479: dj->sect++;
  7920  0018DA  EE20 F00C          	lfsr	2,12
  7921  0018DE  519A               	movf	dir_next@dj& (0+255),w,b
  7922  0018E0  26D9               	addwf	fsr2l,f,c
  7923  0018E2  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7924  0018E4  22DA               	addwfc	fsr2h,f,c
  7925  0018E6  2ADE               	incf	postinc2,f,c
  7926  0018E8  0E00               	movlw	0
  7927  0018EA  22DE               	addwfc	postinc2,f,c
  7928  0018EC  22DE               	addwfc	postinc2,f,c
  7929  0018EE  22DE               	addwfc	postinc2,f,c
  7930                           
  7931                           ;pff.c: 481: if (dj->clust == 0) {
  7932  0018F0  EE20 F008          	lfsr	2,8
  7933  0018F4  519A               	movf	dir_next@dj& (0+255),w,b
  7934  0018F6  26D9               	addwf	fsr2l,f,c
  7935  0018F8  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  7936  0018FA  22DA               	addwfc	fsr2h,f,c
  7937  0018FC  50DE               	movf	postinc2,w,c
  7938  0018FE  10DE               	iorwf	postinc2,w,c
  7939  001900  10DE               	iorwf	postinc2,w,c
  7940  001902  10DE               	iorwf	postinc2,w,c
  7941  001904  A4D8               	btfss	status,2,c
  7942  001906  D00E               	goto	l688
  7943                           
  7944                           ; BSR set to: 0
  7945                           ;pff.c: 482: if (i >= fs->n_rootdir)
  7946  001908  EE20 F004          	lfsr	2,4
  7947  00190C  51A3               	movf	dir_next@fs& (0+255),w,b
  7948  00190E  26D9               	addwf	fsr2l,f,c
  7949  001910  51A4               	movf	(dir_next@fs+1)& (0+255),w,b
  7950  001912  22DA               	addwfc	fsr2h,f,c
  7951  001914  50DE               	movf	postinc2,w,c
  7952  001916  5DA9               	subwf	dir_next@i& (0+255),w,b
  7953  001918  50DE               	movf	postinc2,w,c
  7954  00191A  59AA               	subwfb	(dir_next@i+1)& (0+255),w,b
  7955  00191C  A0D8               	btfss	status,0,c
  7956  00191E  D082               	goto	l691
  7957                           
  7958                           ; BSR set to: 0
  7959                           ;pff.c: 483: return FR_NO_FILE;
  7960  001920  0E03               	movlw	3
  7961                           
  7962                           ; BSR set to: 0
  7963  001922  0012               	return	
  7964  001924                     l688:
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;pff.c: 485: else {
  7968                           ;pff.c: 486: if (((i / 16) & (fs->csize - 1)) == 0) {
  7969                           
  7970                           ; BSR set to: 0
  7971  001924  C0A9  F09C         	movff	dir_next@i,??_dir_next
  7972  001928  C0AA  F09D         	movff	dir_next@i+1,??_dir_next+1
  7973  00192C  0E04               	movlw	4
  7974  00192E  6F9E               	movwf	(??_dir_next+2)& (0+255),b
  7975  001930                     u7275:
  7976  001930  90D8               	bcf	status,0,c
  7977  001932  339D               	rrcf	(??_dir_next+1)& (0+255),f,b
  7978  001934  339C               	rrcf	??_dir_next& (0+255),f,b
  7979  001936  2F9E               	decfsz	(??_dir_next+2)& (0+255),f,b
  7980  001938  D7FB               	goto	u7275
  7981  00193A  0EFF               	movlw	255
  7982  00193C  6F9F               	movwf	(??_dir_next+3)& (0+255),b
  7983  00193E  0EFF               	movlw	255
  7984  001940  6FA0               	movwf	(??_dir_next+4)& (0+255),b
  7985  001942  EE20 F002          	lfsr	2,2
  7986  001946  51A3               	movf	dir_next@fs& (0+255),w,b
  7987  001948  26D9               	addwf	fsr2l,f,c
  7988  00194A  51A4               	movf	(dir_next@fs+1)& (0+255),w,b
  7989  00194C  22DA               	addwfc	fsr2h,f,c
  7990  00194E  50DF               	movf	indf2,w,c
  7991  001950  6FA1               	movwf	(??_dir_next+5)& (0+255),b
  7992  001952  6BA2               	clrf	(??_dir_next+6)& (0+255),b
  7993  001954  519F               	movf	(??_dir_next+3)& (0+255),w,b
  7994  001956  27A1               	addwf	(??_dir_next+5)& (0+255),f,b
  7995  001958  51A0               	movf	(??_dir_next+4)& (0+255),w,b
  7996  00195A  23A2               	addwfc	(??_dir_next+6)& (0+255),f,b
  7997  00195C  519C               	movf	??_dir_next& (0+255),w,b
  7998  00195E  17A1               	andwf	(??_dir_next+5)& (0+255),f,b
  7999  001960  519D               	movf	(??_dir_next+1)& (0+255),w,b
  8000  001962  17A2               	andwf	(??_dir_next+6)& (0+255),f,b
  8001  001964  51A1               	movf	(??_dir_next+5)& (0+255),w,b
  8002  001966  11A2               	iorwf	(??_dir_next+6)& (0+255),w,b
  8003  001968  A4D8               	btfss	status,2,c
  8004  00196A  D05C               	goto	l691
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;pff.c: 487: clst = get_fat(dj->clust);
  8008  00196C  EE20 F008          	lfsr	2,8
  8009  001970  519A               	movf	dir_next@dj& (0+255),w,b
  8010  001972  26D9               	addwf	fsr2l,f,c
  8011  001974  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  8012  001976  22DA               	addwfc	fsr2h,f,c
  8013  001978  CFDE F072          	movff	postinc2,get_fat@clst
  8014  00197C  CFDE F073          	movff	postinc2,get_fat@clst+1
  8015  001980  CFDE F074          	movff	postinc2,get_fat@clst+2
  8016  001984  CFDE F075          	movff	postinc2,get_fat@clst+3
  8017  001988  EC82  F005         	call	_get_fat	;wreg free
  8018  00198C  C072  F0A5         	movff	?_get_fat,dir_next@clst
  8019  001990  C073  F0A6         	movff	?_get_fat+1,dir_next@clst+1
  8020  001994  C074  F0A7         	movff	?_get_fat+2,dir_next@clst+2
  8021  001998  C075  F0A8         	movff	?_get_fat+3,dir_next@clst+3
  8022                           
  8023                           ;pff.c: 488: if (clst <= 1) return FR_DISK_ERR;
  8024  00199C  0100               	movlb	0	; () banked
  8025  00199E  51A8               	movf	(dir_next@clst+3)& (0+255),w,b
  8026  0019A0  11A7               	iorwf	(dir_next@clst+2)& (0+255),w,b
  8027  0019A2  11A6               	iorwf	(dir_next@clst+1)& (0+255),w,b
  8028  0019A4  E106               	bnz	l6729
  8029  0019A6  0E02               	movlw	2
  8030  0019A8  5DA5               	subwf	dir_next@clst& (0+255),w,b
  8031  0019AA  B0D8               	btfsc	status,0,c
  8032  0019AC  D002               	goto	l692
  8033                           
  8034                           ; BSR set to: 0
  8035  0019AE  0E01               	movlw	1
  8036                           
  8037                           ; BSR set to: 0
  8038  0019B0  0012               	return	
  8039  0019B2                     l692:
  8040  0019B2                     l6729:
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;pff.c: 489: if (clst >= fs->n_fatent)
  8044  0019B2  EE20 F006          	lfsr	2,6
  8045  0019B6  51A3               	movf	dir_next@fs& (0+255),w,b
  8046  0019B8  26D9               	addwf	fsr2l,f,c
  8047  0019BA  51A4               	movf	(dir_next@fs+1)& (0+255),w,b
  8048  0019BC  22DA               	addwfc	fsr2h,f,c
  8049  0019BE  50DE               	movf	postinc2,w,c
  8050  0019C0  5DA5               	subwf	dir_next@clst& (0+255),w,b
  8051  0019C2  50DE               	movf	postinc2,w,c
  8052  0019C4  59A6               	subwfb	(dir_next@clst+1)& (0+255),w,b
  8053  0019C6  50DE               	movf	postinc2,w,c
  8054  0019C8  59A7               	subwfb	(dir_next@clst+2)& (0+255),w,b
  8055  0019CA  50DE               	movf	postinc2,w,c
  8056  0019CC  59A8               	subwfb	(dir_next@clst+3)& (0+255),w,b
  8057  0019CE  A0D8               	btfss	status,0,c
  8058  0019D0  D002               	goto	l693
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;pff.c: 490: return FR_NO_FILE;
  8062  0019D2  0E03               	movlw	3
  8063                           
  8064                           ; BSR set to: 0
  8065  0019D4  0012               	return	
  8066  0019D6                     l693:
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;pff.c: 491: dj->clust = clst;
  8070                           
  8071                           ; BSR set to: 0
  8072  0019D6  EE20 F008          	lfsr	2,8
  8073  0019DA  519A               	movf	dir_next@dj& (0+255),w,b
  8074  0019DC  26D9               	addwf	fsr2l,f,c
  8075  0019DE  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  8076  0019E0  22DA               	addwfc	fsr2h,f,c
  8077  0019E2  C0A5  FFDE         	movff	dir_next@clst,postinc2
  8078  0019E6  C0A6  FFDE         	movff	dir_next@clst+1,postinc2
  8079  0019EA  C0A7  FFDE         	movff	dir_next@clst+2,postinc2
  8080  0019EE  C0A8  FFDE         	movff	dir_next@clst+3,postinc2
  8081                           
  8082                           ; BSR set to: 0
  8083                           ;pff.c: 492: dj->sect = clust2sect(clst);
  8084  0019F2  C0A5  F026         	movff	dir_next@clst,clust2sect@clst
  8085  0019F6  C0A6  F027         	movff	dir_next@clst+1,clust2sect@clst+1
  8086  0019FA  C0A7  F028         	movff	dir_next@clst+2,clust2sect@clst+2
  8087  0019FE  C0A8  F029         	movff	dir_next@clst+3,clust2sect@clst+3
  8088  001A02  ECB3  F014         	call	_clust2sect	;wreg free
  8089  001A06  0100               	movlb	0	; () banked
  8090  001A08  EE20 F00C          	lfsr	2,12
  8091  001A0C  519A               	movf	dir_next@dj& (0+255),w,b
  8092  001A0E  26D9               	addwf	fsr2l,f,c
  8093  001A10  519B               	movf	(dir_next@dj+1)& (0+255),w,b
  8094  001A12  22DA               	addwfc	fsr2h,f,c
  8095  001A14  C026  FFDE         	movff	?_clust2sect,postinc2
  8096  001A18  C027  FFDE         	movff	?_clust2sect+1,postinc2
  8097  001A1C  C028  FFDE         	movff	?_clust2sect+2,postinc2
  8098  001A20  C029  FFDE         	movff	?_clust2sect+3,postinc2
  8099  001A24                     l691:
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;pff.c: 493: }
  8103                           ;pff.c: 494: }
  8104                           ;pff.c: 495: }
  8105                           ;pff.c: 497: dj->index = i;
  8106                           
  8107                           ; BSR set to: 0
  8108                           
  8109                           ; BSR set to: 0
  8110                           
  8111                           ; BSR set to: 0
  8112  001A24  C09A  FFD9         	movff	dir_next@dj,fsr2l
  8113  001A28  C09B  FFDA         	movff	dir_next@dj+1,fsr2h
  8114  001A2C  C0A9  FFDE         	movff	dir_next@i,postinc2
  8115  001A30  C0AA  FFDD         	movff	dir_next@i+1,postdec2
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;pff.c: 499: return FR_OK;
  8119  001A34  0E00               	movlw	0
  8120  001A36  0012               	return	
  8121  001A38                     __end_of_dir_next:
  8122                           	opt stack 0
  8123                           tosu	equ	0xFFF
  8124                           tosh	equ	0xFFE
  8125                           tosl	equ	0xFFD
  8126                           pclath	equ	0xFFA
  8127                           tblptru	equ	0xFF8
  8128                           tblptrh	equ	0xFF7
  8129                           tblptrl	equ	0xFF6
  8130                           tablat	equ	0xFF5
  8131                           prodh	equ	0xFF4
  8132                           prodl	equ	0xFF3
  8133                           intcon	equ	0xFF2
  8134                           intcon2	equ	0xFF1
  8135                           intcon3	equ	0xFF0
  8136                           postinc0	equ	0xFEE
  8137                           wreg	equ	0xFE8
  8138                           indf1	equ	0xFE7
  8139                           postinc1	equ	0xFE6
  8140                           postdec1	equ	0xFE5
  8141                           fsr1h	equ	0xFE2
  8142                           fsr1l	equ	0xFE1
  8143                           indf2	equ	0xFDF
  8144                           postinc2	equ	0xFDE
  8145                           postdec2	equ	0xFDD
  8146                           plusw2	equ	0xFDB
  8147                           fsr2h	equ	0xFDA
  8148                           fsr2l	equ	0xFD9
  8149                           status	equ	0xFD8
  8150                           
  8151 ;; *************** function _get_fat *****************
  8152 ;; Defined at:
  8153 ;;		line 350 in file "bibliotecas/pff.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;  clst            4   18[BANK0 ] unsigned long 
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;  bc              2   54[BANK0 ] unsigned int 
  8158 ;;  ofs             2   48[BANK0 ] unsigned int 
  8159 ;;  wc              2   46[BANK0 ] unsigned int 
  8160 ;;  buf             4   50[BANK0 ] unsigned char [4]
  8161 ;;  fs              2   56[BANK0 ] PTR struct .
  8162 ;;		 -> SDCard@fs(42), NULL(0), 
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  4   18[BANK0 ] unsigned long 
  8165 ;; Registers used:
  8166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8172 ;;      Params:         0       4       0       0       0       0       0       0       0
  8173 ;;      Locals:         0      14       0       0       0       0       0       0       0
  8174 ;;      Temps:          0      22       0       0       0       0       0       0       0
  8175 ;;      Totals:         0      40       0       0       0       0       0       0       0
  8176 ;;Total ram usage:       40 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    6
  8179 ;; This function calls:
  8180 ;;		_disk_readp
  8181 ;; This function is called by:
  8182 ;;		_dir_next
  8183 ;;		_pf_read
  8184 ;;		_pf_write
  8185 ;;		_pf_lseek
  8186 ;; This function uses a non-reentrant model
  8187 ;;
  8188                           
  8189                           	psect	text35
  8190  000B04                     __ptext35:
  8191                           	opt stack 0
  8192  000B04                     _get_fat:
  8193                           	opt stack 21
  8194                           
  8195                           ;pff.c: 354: BYTE buf[4];
  8196                           ;pff.c: 355: FATFS *fs = FatFs;
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;incstack = 0
  8200  000B04  C039  F098         	movff	_FatFs,get_fat@fs
  8201  000B08  C03A  F099         	movff	_FatFs+1,get_fat@fs+1
  8202                           
  8203                           ;pff.c: 357: if (clst < 2 || clst >= fs->n_fatent)
  8204  000B0C  0100               	movlb	0	; () banked
  8205  000B0E  5175               	movf	(get_fat@clst+3)& (0+255),w,b
  8206  000B10  1174               	iorwf	(get_fat@clst+2)& (0+255),w,b
  8207  000B12  1173               	iorwf	(get_fat@clst+1)& (0+255),w,b
  8208  000B14  E104               	bnz	u7010
  8209  000B16  0E02               	movlw	2
  8210  000B18  5D72               	subwf	get_fat@clst& (0+255),w,b
  8211  000B1A  A0D8               	btfss	status,0,c
  8212  000B1C  D010               	goto	u7020
  8213  000B1E                     u7010:
  8214                           
  8215                           ; BSR set to: 0
  8216  000B1E  EE20 F006          	lfsr	2,6
  8217  000B22  5198               	movf	get_fat@fs& (0+255),w,b
  8218  000B24  26D9               	addwf	fsr2l,f,c
  8219  000B26  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  8220  000B28  22DA               	addwfc	fsr2h,f,c
  8221  000B2A  50DE               	movf	postinc2,w,c
  8222  000B2C  5D72               	subwf	get_fat@clst& (0+255),w,b
  8223  000B2E  50DE               	movf	postinc2,w,c
  8224  000B30  5973               	subwfb	(get_fat@clst+1)& (0+255),w,b
  8225  000B32  50DE               	movf	postinc2,w,c
  8226  000B34  5974               	subwfb	(get_fat@clst+2)& (0+255),w,b
  8227  000B36  50DE               	movf	postinc2,w,c
  8228  000B38  5975               	subwfb	(get_fat@clst+3)& (0+255),w,b
  8229  000B3A  A0D8               	btfss	status,0,c
  8230  000B3C  D1BD               	goto	l642
  8231  000B3E                     u7020:
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;pff.c: 358: return 1;
  8235                           
  8236                           ; BSR set to: 0
  8237  000B3E  0E01               	movlw	1
  8238  000B40  6F72               	movwf	?_get_fat& (0+255),b
  8239  000B42  0E00               	movlw	0
  8240  000B44  6F73               	movwf	(?_get_fat+1)& (0+255),b
  8241  000B46  0E00               	movlw	0
  8242  000B48  6F74               	movwf	(?_get_fat+2)& (0+255),b
  8243  000B4A  0E00               	movlw	0
  8244  000B4C  6F75               	movwf	(?_get_fat+3)& (0+255),b
  8245                           
  8246                           ; BSR set to: 0
  8247  000B4E  0012               	return	
  8248  000B50                     l643:
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;pff.c: 363: UINT wc, bc, ofs;
  8252                           ;pff.c: 365: bc = (UINT)clst; bc += bc / 2;
  8253  000B50  C072  F096         	movff	get_fat@clst,get_fat@bc
  8254  000B54  C073  F097         	movff	get_fat@clst+1,get_fat@bc+1
  8255                           
  8256                           ; BSR set to: 0
  8257  000B58  90D8               	bcf	status,0,c
  8258  000B5A  3197               	rrcf	(get_fat@bc+1)& (0+255),w,b
  8259  000B5C  6F77               	movwf	(??_get_fat+1)& (0+255),b
  8260  000B5E  3196               	rrcf	get_fat@bc& (0+255),w,b
  8261  000B60  6F76               	movwf	??_get_fat& (0+255),b
  8262  000B62  5176               	movf	??_get_fat& (0+255),w,b
  8263  000B64  2796               	addwf	get_fat@bc& (0+255),f,b
  8264  000B66  5177               	movf	(??_get_fat+1)& (0+255),w,b
  8265  000B68  2397               	addwfc	(get_fat@bc+1)& (0+255),f,b
  8266                           
  8267                           ;pff.c: 366: ofs = bc % 512; bc /= 512;
  8268  000B6A  0EFF               	movlw	255
  8269  000B6C  1596               	andwf	get_fat@bc& (0+255),w,b
  8270  000B6E  6F90               	movwf	get_fat@ofs& (0+255),b
  8271  000B70  0E01               	movlw	1
  8272  000B72  1597               	andwf	(get_fat@bc+1)& (0+255),w,b
  8273  000B74  6F91               	movwf	(get_fat@ofs+1)& (0+255),b
  8274  000B76  0E09               	movlw	9
  8275  000B78  6F76               	movwf	??_get_fat& (0+255),b
  8276  000B7A                     u7035:
  8277  000B7A  90D8               	bcf	status,0,c
  8278  000B7C  3397               	rrcf	(get_fat@bc+1)& (0+255),f,b
  8279  000B7E  3396               	rrcf	get_fat@bc& (0+255),f,b
  8280  000B80  2F76               	decfsz	??_get_fat& (0+255),f,b
  8281  000B82  D7FB               	goto	u7035
  8282                           
  8283                           ;pff.c: 367: if (ofs != 511) {
  8284  000B84  2990               	incf	get_fat@ofs& (0+255),w,b
  8285  000B86  E103               	bnz	u7040
  8286  000B88  0591               	decf	(get_fat@ofs+1)& (0+255),w,b
  8287  000B8A  B4D8               	btfsc	status,2,c
  8288  000B8C  D02C               	goto	l644
  8289  000B8E                     u7040:
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;pff.c: 368: if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
  8293  000B8E  0E92               	movlw	low get_fat@buf
  8294  000B90  6F60               	movwf	disk_readp@rd& (0+255),b
  8295  000B92  0E00               	movlw	high get_fat@buf
  8296  000B94  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8297  000B96  EE20 F00A          	lfsr	2,10
  8298  000B9A  5198               	movf	get_fat@fs& (0+255),w,b
  8299  000B9C  26D9               	addwf	fsr2l,f,c
  8300  000B9E  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  8301  000BA0  22DA               	addwfc	fsr2h,f,c
  8302  000BA2  CFDE F076          	movff	postinc2,??_get_fat
  8303  000BA6  CFDE F077          	movff	postinc2,??_get_fat+1
  8304  000BAA  CFDE F078          	movff	postinc2,??_get_fat+2
  8305  000BAE  CFDE F079          	movff	postinc2,??_get_fat+3
  8306  000BB2  5196               	movf	get_fat@bc& (0+255),w,b
  8307  000BB4  2576               	addwf	??_get_fat& (0+255),w,b
  8308  000BB6  6F62               	movwf	disk_readp@sector& (0+255),b
  8309  000BB8  5197               	movf	(get_fat@bc+1)& (0+255),w,b
  8310  000BBA  2177               	addwfc	(??_get_fat+1)& (0+255),w,b
  8311  000BBC  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8312  000BBE  0E00               	movlw	0
  8313  000BC0  2178               	addwfc	(??_get_fat+2)& (0+255),w,b
  8314  000BC2  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8315  000BC4  0E00               	movlw	0
  8316  000BC6  2179               	addwfc	(??_get_fat+3)& (0+255),w,b
  8317  000BC8  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8318  000BCA  C090  F066         	movff	get_fat@ofs,disk_readp@offset
  8319  000BCE  C091  F067         	movff	get_fat@ofs+1,disk_readp@offset+1
  8320  000BD2  0E00               	movlw	0
  8321  000BD4  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8322  000BD6  0E02               	movlw	2
  8323  000BD8  6F68               	movwf	disk_readp@count& (0+255),b
  8324  000BDA  EC3C  F009         	call	_disk_readp	;wreg free
  8325  000BDE  0900               	iorlw	0
  8326  000BE0  A4D8               	btfss	status,2,c
  8327  000BE2  D178               	goto	l646
  8328  000BE4  D061               	goto	l649
  8329  000BE6                     l644:
  8330                           
  8331                           ;pff.c: 370: if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
  8332  000BE6  0E92               	movlw	low get_fat@buf
  8333  000BE8  0100               	movlb	0	; () banked
  8334  000BEA  6F60               	movwf	disk_readp@rd& (0+255),b
  8335  000BEC  0E00               	movlw	high get_fat@buf
  8336  000BEE  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8337  000BF0  EE20 F00A          	lfsr	2,10
  8338  000BF4  5198               	movf	get_fat@fs& (0+255),w,b
  8339  000BF6  26D9               	addwf	fsr2l,f,c
  8340  000BF8  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  8341  000BFA  22DA               	addwfc	fsr2h,f,c
  8342  000BFC  CFDE F076          	movff	postinc2,??_get_fat
  8343  000C00  CFDE F077          	movff	postinc2,??_get_fat+1
  8344  000C04  CFDE F078          	movff	postinc2,??_get_fat+2
  8345  000C08  CFDE F079          	movff	postinc2,??_get_fat+3
  8346  000C0C  5196               	movf	get_fat@bc& (0+255),w,b
  8347  000C0E  2576               	addwf	??_get_fat& (0+255),w,b
  8348  000C10  6F62               	movwf	disk_readp@sector& (0+255),b
  8349  000C12  5197               	movf	(get_fat@bc+1)& (0+255),w,b
  8350  000C14  2177               	addwfc	(??_get_fat+1)& (0+255),w,b
  8351  000C16  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8352  000C18  0E00               	movlw	0
  8353  000C1A  2178               	addwfc	(??_get_fat+2)& (0+255),w,b
  8354  000C1C  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8355  000C1E  0E00               	movlw	0
  8356  000C20  2179               	addwfc	(??_get_fat+3)& (0+255),w,b
  8357  000C22  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8358  000C24  0E01               	movlw	1
  8359  000C26  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  8360  000C28  6966               	setf	disk_readp@offset& (0+255),b
  8361  000C2A  0E00               	movlw	0
  8362  000C2C  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8363  000C2E  0E01               	movlw	1
  8364  000C30  6F68               	movwf	disk_readp@count& (0+255),b
  8365  000C32  EC3C  F009         	call	_disk_readp	;wreg free
  8366  000C36  0900               	iorlw	0
  8367  000C38  A4D8               	btfss	status,2,c
  8368  000C3A  D14C               	goto	l646
  8369                           
  8370                           ;pff.c: 371: if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
  8371  000C3C  0E93               	movlw	low (get_fat@buf+1)
  8372  000C3E  0100               	movlb	0	; () banked
  8373  000C40  6F60               	movwf	disk_readp@rd& (0+255),b
  8374  000C42  0E00               	movlw	high (get_fat@buf+1)
  8375  000C44  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8376  000C46  EE20 F00A          	lfsr	2,10
  8377  000C4A  5198               	movf	get_fat@fs& (0+255),w,b
  8378  000C4C  26D9               	addwf	fsr2l,f,c
  8379  000C4E  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  8380  000C50  22DA               	addwfc	fsr2h,f,c
  8381  000C52  CFDE F076          	movff	postinc2,??_get_fat
  8382  000C56  CFDE F077          	movff	postinc2,??_get_fat+1
  8383  000C5A  CFDE F078          	movff	postinc2,??_get_fat+2
  8384  000C5E  CFDE F079          	movff	postinc2,??_get_fat+3
  8385  000C62  5196               	movf	get_fat@bc& (0+255),w,b
  8386  000C64  2576               	addwf	??_get_fat& (0+255),w,b
  8387  000C66  6F7A               	movwf	(??_get_fat+4)& (0+255),b
  8388  000C68  5197               	movf	(get_fat@bc+1)& (0+255),w,b
  8389  000C6A  2177               	addwfc	(??_get_fat+1)& (0+255),w,b
  8390  000C6C  6F7B               	movwf	(??_get_fat+5)& (0+255),b
  8391  000C6E  0E00               	movlw	0
  8392  000C70  2178               	addwfc	(??_get_fat+2)& (0+255),w,b
  8393  000C72  6F7C               	movwf	(??_get_fat+6)& (0+255),b
  8394  000C74  0E00               	movlw	0
  8395  000C76  2179               	addwfc	(??_get_fat+3)& (0+255),w,b
  8396  000C78  6F7D               	movwf	(??_get_fat+7)& (0+255),b
  8397  000C7A  0E01               	movlw	1
  8398  000C7C  257A               	addwf	(??_get_fat+4)& (0+255),w,b
  8399  000C7E  6F62               	movwf	disk_readp@sector& (0+255),b
  8400  000C80  0E00               	movlw	0
  8401  000C82  217B               	addwfc	(??_get_fat+5)& (0+255),w,b
  8402  000C84  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8403  000C86  0E00               	movlw	0
  8404  000C88  217C               	addwfc	(??_get_fat+6)& (0+255),w,b
  8405  000C8A  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8406  000C8C  0E00               	movlw	0
  8407  000C8E  217D               	addwfc	(??_get_fat+7)& (0+255),w,b
  8408  000C90  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8409  000C92  0E00               	movlw	0
  8410  000C94  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  8411  000C96  0E00               	movlw	0
  8412  000C98  6F66               	movwf	disk_readp@offset& (0+255),b
  8413  000C9A  0E00               	movlw	0
  8414  000C9C  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8415  000C9E  0E01               	movlw	1
  8416  000CA0  6F68               	movwf	disk_readp@count& (0+255),b
  8417  000CA2  EC3C  F009         	call	_disk_readp	;wreg free
  8418  000CA6  D79B               	goto	L4
  8419  000CA8                     l649:
  8420                           
  8421                           ;pff.c: 372: }
  8422                           ;pff.c: 373: wc = (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  8423  000CA8  0100               	movlb	0	; () banked
  8424  000CAA  5193               	movf	(get_fat@buf+1)& (0+255),w,b
  8425  000CAC  6F76               	movwf	??_get_fat& (0+255),b
  8426  000CAE  5192               	movf	get_fat@buf& (0+255),w,b
  8427  000CB0  6F8E               	movwf	get_fat@wc& (0+255),b
  8428  000CB2  C076  F08F         	movff	??_get_fat,get_fat@wc+1
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;pff.c: 374: return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  8432  000CB6  B172               	btfsc	get_fat@clst& (0+255),0,b
  8433  000CB8  D007               	goto	l651
  8434                           
  8435                           ; BSR set to: 0
  8436  000CBA  0EFF               	movlw	255
  8437  000CBC  158E               	andwf	get_fat@wc& (0+255),w,b
  8438  000CBE  6F8C               	movwf	_get_fat$1632& (0+255),b
  8439  000CC0  0E0F               	movlw	15
  8440  000CC2  158F               	andwf	(get_fat@wc+1)& (0+255),w,b
  8441  000CC4  6F8D               	movwf	(_get_fat$1632+1)& (0+255),b
  8442  000CC6  D00F               	goto	l653
  8443  000CC8                     l651:
  8444                           
  8445                           ; BSR set to: 0
  8446                           
  8447                           ; BSR set to: 0
  8448  000CC8  C08E  F076         	movff	get_fat@wc,??_get_fat
  8449  000CCC  C08F  F077         	movff	get_fat@wc+1,??_get_fat+1
  8450  000CD0  0E04               	movlw	4
  8451  000CD2  6F78               	movwf	(??_get_fat+2)& (0+255),b
  8452  000CD4                     u7095:
  8453  000CD4  90D8               	bcf	status,0,c
  8454  000CD6  3377               	rrcf	(??_get_fat+1)& (0+255),f,b
  8455  000CD8  3376               	rrcf	??_get_fat& (0+255),f,b
  8456  000CDA  2F78               	decfsz	(??_get_fat+2)& (0+255),f,b
  8457  000CDC  D7FB               	goto	u7095
  8458  000CDE  C076  F08C         	movff	??_get_fat,_get_fat$1632
  8459  000CE2  C077  F08D         	movff	??_get_fat+1,_get_fat$1632+1
  8460  000CE6                     l653:
  8461                           
  8462                           ; BSR set to: 0
  8463                           
  8464                           ; BSR set to: 0
  8465  000CE6  C08C  F072         	movff	_get_fat$1632,?_get_fat
  8466  000CEA  C08D  F073         	movff	_get_fat$1632+1,?_get_fat+1
  8467  000CEE  6B74               	clrf	(?_get_fat+2)& (0+255),b
  8468  000CF0  6B75               	clrf	(?_get_fat+3)& (0+255),b
  8469                           
  8470                           ; BSR set to: 0
  8471  000CF2  0012               	return	
  8472  000CF4                     
  8473                           ; BSR set to: 0
  8474                           ;pff.c: 379: if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) b
      +                          reak;
  8475                           
  8476                           ; BSR set to: 0
  8477  000CF4  0E92               	movlw	low get_fat@buf
  8478  000CF6  6F60               	movwf	disk_readp@rd& (0+255),b
  8479  000CF8  0E00               	movlw	high get_fat@buf
  8480  000CFA  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8481  000CFC  EE20 F00A          	lfsr	2,10
  8482  000D00  5198               	movf	get_fat@fs& (0+255),w,b
  8483  000D02  26D9               	addwf	fsr2l,f,c
  8484  000D04  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  8485  000D06  22DA               	addwfc	fsr2h,f,c
  8486  000D08  CFDE F076          	movff	postinc2,??_get_fat
  8487  000D0C  CFDE F077          	movff	postinc2,??_get_fat+1
  8488  000D10  CFDE F078          	movff	postinc2,??_get_fat+2
  8489  000D14  CFDE F079          	movff	postinc2,??_get_fat+3
  8490  000D18  C072  F07A         	movff	get_fat@clst,??_get_fat+4
  8491  000D1C  C073  F07B         	movff	get_fat@clst+1,??_get_fat+5
  8492  000D20  C074  F07C         	movff	get_fat@clst+2,??_get_fat+6
  8493  000D24  C075  F07D         	movff	get_fat@clst+3,??_get_fat+7
  8494  000D28  C07B  F07A         	movff	??_get_fat+5,??_get_fat+4
  8495  000D2C  C07C  F07B         	movff	??_get_fat+6,??_get_fat+5
  8496  000D30  C07D  F07C         	movff	??_get_fat+7,??_get_fat+6
  8497  000D34  6B7D               	clrf	(??_get_fat+7)& (0+255),b
  8498  000D36  5176               	movf	??_get_fat& (0+255),w,b
  8499  000D38  257A               	addwf	(??_get_fat+4)& (0+255),w,b
  8500  000D3A  6F62               	movwf	disk_readp@sector& (0+255),b
  8501  000D3C  5177               	movf	(??_get_fat+1)& (0+255),w,b
  8502  000D3E  217B               	addwfc	(??_get_fat+5)& (0+255),w,b
  8503  000D40  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8504  000D42  5178               	movf	(??_get_fat+2)& (0+255),w,b
  8505  000D44  217C               	addwfc	(??_get_fat+6)& (0+255),w,b
  8506  000D46  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8507  000D48  5179               	movf	(??_get_fat+3)& (0+255),w,b
  8508  000D4A  217D               	addwfc	(??_get_fat+7)& (0+255),w,b
  8509  000D4C  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8510  000D4E  0EFF               	movlw	255
  8511  000D50  1572               	andwf	get_fat@clst& (0+255),w,b
  8512  000D52  6F7E               	movwf	(??_get_fat+8)& (0+255),b
  8513  000D54  0E00               	movlw	0
  8514  000D56  1573               	andwf	(get_fat@clst+1)& (0+255),w,b
  8515  000D58  6F7F               	movwf	(??_get_fat+9)& (0+255),b
  8516  000D5A  90D8               	bcf	status,0,c
  8517  000D5C  357E               	rlcf	(??_get_fat+8)& (0+255),w,b
  8518  000D5E  6F66               	movwf	disk_readp@offset& (0+255),b
  8519  000D60  357F               	rlcf	(??_get_fat+9)& (0+255),w,b
  8520  000D62  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  8521  000D64  0E00               	movlw	0
  8522  000D66  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8523  000D68  0E02               	movlw	2
  8524  000D6A  6F68               	movwf	disk_readp@count& (0+255),b
  8525  000D6C  EC3C  F009         	call	_disk_readp	;wreg free
  8526  000D70  0900               	iorlw	0
  8527  000D72  A4D8               	btfss	status,2,c
  8528  000D74  D0AF               	goto	l646
  8529                           
  8530                           ;pff.c: 380: return (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  8531  000D76  0100               	movlb	0	; () banked
  8532  000D78  5192               	movf	get_fat@buf& (0+255),w,b
  8533  000D7A  C093  F076         	movff	get_fat@buf+1,??_get_fat
  8534  000D7E  6B77               	clrf	(??_get_fat+1)& (0+255),b
  8535  000D80  C076  F077         	movff	??_get_fat,??_get_fat+1
  8536  000D84  6B76               	clrf	??_get_fat& (0+255),b
  8537  000D86  1376               	iorwf	??_get_fat& (0+255),f,b
  8538  000D88  0E00               	movlw	0
  8539  000D8A  1377               	iorwf	(??_get_fat+1)& (0+255),f,b
  8540  000D8C  C076  F072         	movff	??_get_fat,?_get_fat
  8541  000D90  C077  F073         	movff	??_get_fat+1,?_get_fat+1
  8542  000D94  6B74               	clrf	(?_get_fat+2)& (0+255),b
  8543  000D96  6B75               	clrf	(?_get_fat+3)& (0+255),b
  8544                           
  8545                           ; BSR set to: 0
  8546  000D98  0012               	return	
  8547  000D9A                     
  8548                           ; BSR set to: 0
  8549                           ;pff.c: 384: if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) b
      +                          reak;
  8550                           
  8551                           ; BSR set to: 0
  8552  000D9A  0E92               	movlw	low get_fat@buf
  8553  000D9C  6F60               	movwf	disk_readp@rd& (0+255),b
  8554  000D9E  0E00               	movlw	high get_fat@buf
  8555  000DA0  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  8556  000DA2  EE20 F00A          	lfsr	2,10
  8557  000DA6  5198               	movf	get_fat@fs& (0+255),w,b
  8558  000DA8  26D9               	addwf	fsr2l,f,c
  8559  000DAA  5199               	movf	(get_fat@fs+1)& (0+255),w,b
  8560  000DAC  22DA               	addwfc	fsr2h,f,c
  8561  000DAE  CFDE F076          	movff	postinc2,??_get_fat
  8562  000DB2  CFDE F077          	movff	postinc2,??_get_fat+1
  8563  000DB6  CFDE F078          	movff	postinc2,??_get_fat+2
  8564  000DBA  CFDE F079          	movff	postinc2,??_get_fat+3
  8565  000DBE  C072  F07A         	movff	get_fat@clst,??_get_fat+4
  8566  000DC2  C073  F07B         	movff	get_fat@clst+1,??_get_fat+5
  8567  000DC6  C074  F07C         	movff	get_fat@clst+2,??_get_fat+6
  8568  000DCA  C075  F07D         	movff	get_fat@clst+3,??_get_fat+7
  8569  000DCE  0E08               	movlw	8
  8570  000DD0  D005               	goto	u7110
  8571  000DD2                     u7115:
  8572  000DD2  90D8               	bcf	status,0,c
  8573  000DD4  337D               	rrcf	(??_get_fat+7)& (0+255),f,b
  8574  000DD6  337C               	rrcf	(??_get_fat+6)& (0+255),f,b
  8575  000DD8  337B               	rrcf	(??_get_fat+5)& (0+255),f,b
  8576  000DDA  337A               	rrcf	(??_get_fat+4)& (0+255),f,b
  8577  000DDC                     u7110:
  8578  000DDC  2EE8               	decfsz	wreg,f,c
  8579  000DDE  D7F9               	goto	u7115
  8580  000DE0  5176               	movf	??_get_fat& (0+255),w,b
  8581  000DE2  257A               	addwf	(??_get_fat+4)& (0+255),w,b
  8582  000DE4  6F62               	movwf	disk_readp@sector& (0+255),b
  8583  000DE6  5177               	movf	(??_get_fat+1)& (0+255),w,b
  8584  000DE8  217B               	addwfc	(??_get_fat+5)& (0+255),w,b
  8585  000DEA  6F63               	movwf	(disk_readp@sector+1)& (0+255),b
  8586  000DEC  5178               	movf	(??_get_fat+2)& (0+255),w,b
  8587  000DEE  217C               	addwfc	(??_get_fat+6)& (0+255),w,b
  8588  000DF0  6F64               	movwf	(disk_readp@sector+2)& (0+255),b
  8589  000DF2  5179               	movf	(??_get_fat+3)& (0+255),w,b
  8590  000DF4  217D               	addwfc	(??_get_fat+7)& (0+255),w,b
  8591  000DF6  6F65               	movwf	(disk_readp@sector+3)& (0+255),b
  8592  000DF8  0E7F               	movlw	127
  8593  000DFA  1572               	andwf	get_fat@clst& (0+255),w,b
  8594  000DFC  6F7E               	movwf	(??_get_fat+8)& (0+255),b
  8595  000DFE  0E00               	movlw	0
  8596  000E00  1573               	andwf	(get_fat@clst+1)& (0+255),w,b
  8597  000E02  6F7F               	movwf	(??_get_fat+9)& (0+255),b
  8598  000E04  90D8               	bcf	status,0,c
  8599  000E06  377E               	rlcf	(??_get_fat+8)& (0+255),f,b
  8600  000E08  377F               	rlcf	(??_get_fat+9)& (0+255),f,b
  8601  000E0A  90D8               	bcf	status,0,c
  8602  000E0C  377E               	rlcf	(??_get_fat+8)& (0+255),f,b
  8603  000E0E  377F               	rlcf	(??_get_fat+9)& (0+255),f,b
  8604  000E10  C07E  F066         	movff	??_get_fat+8,disk_readp@offset
  8605  000E14  C07F  F067         	movff	??_get_fat+9,disk_readp@offset+1
  8606  000E18  0E00               	movlw	0
  8607  000E1A  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  8608  000E1C  0E04               	movlw	4
  8609  000E1E  6F68               	movwf	disk_readp@count& (0+255),b
  8610  000E20  EC3C  F009         	call	_disk_readp	;wreg free
  8611  000E24  0900               	iorlw	0
  8612  000E26  A4D8               	btfss	status,2,c
  8613  000E28  D055               	goto	l646
  8614                           
  8615                           ;pff.c: 385: return (DWORD)(((DWORD)*((BYTE*)(buf)+3)<<24)|((DWORD)*((BYTE*)(buf)+2)<<16
      +                          )|((WORD)*((BYTE*)(buf)+1)<<8)|*(BYTE*)(buf)) & 0x0FFFFFFF;
  8616  000E2A  0100               	movlb	0	; () banked
  8617  000E2C  5193               	movf	(get_fat@buf+1)& (0+255),w,b
  8618  000E2E  6F77               	movwf	(??_get_fat+1)& (0+255),b
  8619  000E30  6B76               	clrf	??_get_fat& (0+255),b
  8620  000E32  C094  F078         	movff	get_fat@buf+2,??_get_fat+2
  8621  000E36  6B79               	clrf	(??_get_fat+3)& (0+255),b
  8622  000E38  6B7A               	clrf	(??_get_fat+4)& (0+255),b
  8623  000E3A  6B7B               	clrf	(??_get_fat+5)& (0+255),b
  8624  000E3C  C079  F07B         	movff	??_get_fat+3,??_get_fat+5
  8625  000E40  C078  F07A         	movff	??_get_fat+2,??_get_fat+4
  8626  000E44  6B79               	clrf	(??_get_fat+3)& (0+255),b
  8627  000E46  6B78               	clrf	(??_get_fat+2)& (0+255),b
  8628  000E48  C095  F07C         	movff	get_fat@buf+3,??_get_fat+6
  8629  000E4C  6B7D               	clrf	(??_get_fat+7)& (0+255),b
  8630  000E4E  6B7E               	clrf	(??_get_fat+8)& (0+255),b
  8631  000E50  6B7F               	clrf	(??_get_fat+9)& (0+255),b
  8632  000E52  C07C  F07F         	movff	??_get_fat+6,??_get_fat+9
  8633  000E56  6B7E               	clrf	(??_get_fat+8)& (0+255),b
  8634  000E58  6B7D               	clrf	(??_get_fat+7)& (0+255),b
  8635  000E5A  6B7C               	clrf	(??_get_fat+6)& (0+255),b
  8636  000E5C  5178               	movf	(??_get_fat+2)& (0+255),w,b
  8637  000E5E  117C               	iorwf	(??_get_fat+6)& (0+255),w,b
  8638  000E60  6F80               	movwf	(??_get_fat+10)& (0+255),b
  8639  000E62  5179               	movf	(??_get_fat+3)& (0+255),w,b
  8640  000E64  117D               	iorwf	(??_get_fat+7)& (0+255),w,b
  8641  000E66  6F81               	movwf	(??_get_fat+11)& (0+255),b
  8642  000E68  517A               	movf	(??_get_fat+4)& (0+255),w,b
  8643  000E6A  117E               	iorwf	(??_get_fat+8)& (0+255),w,b
  8644  000E6C  6F82               	movwf	(??_get_fat+12)& (0+255),b
  8645  000E6E  517B               	movf	(??_get_fat+5)& (0+255),w,b
  8646  000E70  117F               	iorwf	(??_get_fat+9)& (0+255),w,b
  8647  000E72  6F83               	movwf	(??_get_fat+13)& (0+255),b
  8648  000E74  5176               	movf	??_get_fat& (0+255),w,b
  8649  000E76  1180               	iorwf	(??_get_fat+10)& (0+255),w,b
  8650  000E78  6F84               	movwf	(??_get_fat+14)& (0+255),b
  8651  000E7A  5177               	movf	(??_get_fat+1)& (0+255),w,b
  8652  000E7C  1181               	iorwf	(??_get_fat+11)& (0+255),w,b
  8653  000E7E  6F85               	movwf	(??_get_fat+15)& (0+255),b
  8654  000E80  0E00               	movlw	0
  8655  000E82  1182               	iorwf	(??_get_fat+12)& (0+255),w,b
  8656  000E84  6F86               	movwf	(??_get_fat+16)& (0+255),b
  8657  000E86  0E00               	movlw	0
  8658  000E88  1183               	iorwf	(??_get_fat+13)& (0+255),w,b
  8659  000E8A  6F87               	movwf	(??_get_fat+17)& (0+255),b
  8660  000E8C  5192               	movf	get_fat@buf& (0+255),w,b
  8661  000E8E  1184               	iorwf	(??_get_fat+14)& (0+255),w,b
  8662  000E90  6F88               	movwf	(??_get_fat+18)& (0+255),b
  8663  000E92  5185               	movf	(??_get_fat+15)& (0+255),w,b
  8664  000E94  6F89               	movwf	(??_get_fat+19)& (0+255),b
  8665  000E96  5186               	movf	(??_get_fat+16)& (0+255),w,b
  8666  000E98  6F8A               	movwf	(??_get_fat+20)& (0+255),b
  8667  000E9A  5187               	movf	(??_get_fat+17)& (0+255),w,b
  8668  000E9C  6F8B               	movwf	(??_get_fat+21)& (0+255),b
  8669  000E9E  0EFF               	movlw	255
  8670  000EA0  1588               	andwf	(??_get_fat+18)& (0+255),w,b
  8671  000EA2  6F72               	movwf	?_get_fat& (0+255),b
  8672  000EA4  0EFF               	movlw	255
  8673  000EA6  1589               	andwf	(??_get_fat+19)& (0+255),w,b
  8674  000EA8  6F73               	movwf	(?_get_fat+1)& (0+255),b
  8675  000EAA  0EFF               	movlw	255
  8676  000EAC  158A               	andwf	(??_get_fat+20)& (0+255),w,b
  8677  000EAE  6F74               	movwf	(?_get_fat+2)& (0+255),b
  8678  000EB0  0E0F               	movlw	15
  8679  000EB2  158B               	andwf	(??_get_fat+21)& (0+255),w,b
  8680  000EB4  6F75               	movwf	(?_get_fat+3)& (0+255),b
  8681                           
  8682                           ; BSR set to: 0
  8683  000EB6  0012               	return	
  8684  000EB8                     l642:
  8685                           
  8686                           ; BSR set to: 0
  8687                           
  8688                           ; BSR set to: 0
  8689  000EB8  C098  FFD9         	movff	get_fat@fs,fsr2l
  8690  000EBC  C099  FFDA         	movff	get_fat@fs+1,fsr2h
  8691  000EC0  50DF               	movf	indf2,w,c
  8692                           
  8693                           ; Switch size 1, requested type "space"
  8694                           ; Number of cases is 3, Range of values is 1 to 3
  8695                           ; switch strategies available:
  8696                           ; Name         Instructions Cycles
  8697                           ; simple_byte           10     6 (average)
  8698                           ;	Chosen strategy is simple_byte
  8699  000EC2  0A01               	xorlw	1	; case 1
  8700  000EC4  B4D8               	btfsc	status,2,c
  8701  000EC6  D644               	goto	l643
  8702  000EC8  0A03               	xorlw	3	; case 2
  8703  000ECA  B4D8               	btfsc	status,2,c
  8704  000ECC  D713               	goto	l654
  8705  000ECE  0A01               	xorlw	1	; case 3
  8706  000ED0  B4D8               	btfsc	status,2,c
  8707  000ED2  D763               	goto	l656
  8708  000ED4                     l646:
  8709                           
  8710                           ;pff.c: 389: return 1;
  8711                           
  8712                           ; BSR set to: 0
  8713  000ED4  0E01               	movlw	1
  8714  000ED6  0100               	movlb	0	; () banked
  8715  000ED8  6F72               	movwf	?_get_fat& (0+255),b
  8716  000EDA  0E00               	movlw	0
  8717  000EDC  6F73               	movwf	(?_get_fat+1)& (0+255),b
  8718  000EDE  0E00               	movlw	0
  8719  000EE0  6F74               	movwf	(?_get_fat+2)& (0+255),b
  8720  000EE2  0E00               	movlw	0
  8721  000EE4  6F75               	movwf	(?_get_fat+3)& (0+255),b
  8722  000EE6  0012               	return	
  8723  000EE8                     __end_of_get_fat:
  8724                           	opt stack 0
  8725                           tosu	equ	0xFFF
  8726                           tosh	equ	0xFFE
  8727                           tosl	equ	0xFFD
  8728                           pclath	equ	0xFFA
  8729                           tblptru	equ	0xFF8
  8730                           tblptrh	equ	0xFF7
  8731                           tblptrl	equ	0xFF6
  8732                           tablat	equ	0xFF5
  8733                           prodh	equ	0xFF4
  8734                           prodl	equ	0xFF3
  8735                           intcon	equ	0xFF2
  8736                           intcon2	equ	0xFF1
  8737                           intcon3	equ	0xFF0
  8738                           postinc0	equ	0xFEE
  8739                           wreg	equ	0xFE8
  8740                           indf1	equ	0xFE7
  8741                           postinc1	equ	0xFE6
  8742                           postdec1	equ	0xFE5
  8743                           fsr1h	equ	0xFE2
  8744                           fsr1l	equ	0xFE1
  8745                           indf2	equ	0xFDF
  8746                           postinc2	equ	0xFDE
  8747                           postdec2	equ	0xFDD
  8748                           plusw2	equ	0xFDB
  8749                           fsr2h	equ	0xFDA
  8750                           fsr2l	equ	0xFD9
  8751                           status	equ	0xFD8
  8752                           
  8753 ;; *************** function _clust2sect *****************
  8754 ;; Defined at:
  8755 ;;		line 400 in file "bibliotecas/pff.c"
  8756 ;; Parameters:    Size  Location     Type
  8757 ;;  clst            4   37[COMRAM] unsigned long 
  8758 ;; Auto vars:     Size  Location     Type
  8759 ;;  fs              2   41[COMRAM] PTR struct .
  8760 ;;		 -> SDCard@fs(42), NULL(0), 
  8761 ;; Return value:  Size  Location     Type
  8762 ;;                  4   37[COMRAM] unsigned long 
  8763 ;; Registers used:
  8764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8765 ;; Tracked objects:
  8766 ;;		On entry : 0/0
  8767 ;;		On exit  : 0/0
  8768 ;;		Unchanged: 0/0
  8769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8770 ;;      Params:         4       0       0       0       0       0       0       0       0
  8771 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8772 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8773 ;;      Totals:         6       5       0       0       0       0       0       0       0
  8774 ;;Total ram usage:       11 bytes
  8775 ;; Hardware stack levels used:    1
  8776 ;; Hardware stack levels required when called:    3
  8777 ;; This function calls:
  8778 ;;		___lmul
  8779 ;; This function is called by:
  8780 ;;		_dir_rewind
  8781 ;;		_dir_next
  8782 ;;		_pf_read
  8783 ;;		_pf_write
  8784 ;;		_pf_lseek
  8785 ;; This function uses a non-reentrant model
  8786 ;;
  8787                           
  8788                           	psect	text36
  8789  002966                     __ptext36:
  8790                           	opt stack 0
  8791  002966                     _clust2sect:
  8792                           	opt stack 24
  8793                           
  8794                           ;pff.c: 404: FATFS *fs = FatFs;
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;incstack = 0
  8798  002966  C039  F02A         	movff	_FatFs,clust2sect@fs
  8799  00296A  C03A  F02B         	movff	_FatFs+1,clust2sect@fs+1
  8800                           
  8801                           ;pff.c: 407: clst -= 2;
  8802  00296E  0E02               	movlw	2
  8803  002970  5E26               	subwf	clust2sect@clst,f,c
  8804  002972  0E00               	movlw	0
  8805  002974  5A27               	subwfb	clust2sect@clst+1,f,c
  8806  002976  5A28               	subwfb	clust2sect@clst+2,f,c
  8807  002978  5A29               	subwfb	clust2sect@clst+3,f,c
  8808                           
  8809                           ;pff.c: 408: if (clst >= (fs->n_fatent - 2)) return 0;
  8810  00297A  EE20 F006          	lfsr	2,6
  8811  00297E  502A               	movf	clust2sect@fs,w,c
  8812  002980  26D9               	addwf	fsr2l,f,c
  8813  002982  502B               	movf	clust2sect@fs+1,w,c
  8814  002984  22DA               	addwfc	fsr2h,f,c
  8815  002986  0EFE               	movlw	254
  8816  002988  24DE               	addwf	postinc2,w,c
  8817  00298A  0100               	movlb	0	; () banked
  8818  00298C  6F60               	movwf	??_clust2sect& (0+255),b
  8819  00298E  0EFF               	movlw	255
  8820  002990  20DE               	addwfc	postinc2,w,c
  8821  002992  6F61               	movwf	(??_clust2sect+1)& (0+255),b
  8822  002994  0EFF               	movlw	255
  8823  002996  20DE               	addwfc	postinc2,w,c
  8824  002998  6F62               	movwf	(??_clust2sect+2)& (0+255),b
  8825  00299A  0EFF               	movlw	255
  8826  00299C  20DE               	addwfc	postinc2,w,c
  8827  00299E  6F63               	movwf	(??_clust2sect+3)& (0+255),b
  8828  0029A0  5160               	movf	??_clust2sect& (0+255),w,b
  8829  0029A2  5C26               	subwf	clust2sect@clst,w,c
  8830  0029A4  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  8831  0029A6  5827               	subwfb	clust2sect@clst+1,w,c
  8832  0029A8  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  8833  0029AA  5828               	subwfb	clust2sect@clst+2,w,c
  8834  0029AC  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  8835  0029AE  5829               	subwfb	clust2sect@clst+3,w,c
  8836  0029B0  A0D8               	btfss	status,0,c
  8837  0029B2  D009               	goto	l660
  8838                           
  8839                           ; BSR set to: 0
  8840  0029B4  0E00               	movlw	0
  8841  0029B6  6E26               	movwf	?_clust2sect,c
  8842  0029B8  0E00               	movlw	0
  8843  0029BA  6E27               	movwf	?_clust2sect+1,c
  8844  0029BC  0E00               	movlw	0
  8845  0029BE  6E28               	movwf	?_clust2sect+2,c
  8846  0029C0  0E00               	movlw	0
  8847  0029C2  6E29               	movwf	?_clust2sect+3,c
  8848                           
  8849                           ; BSR set to: 0
  8850  0029C4  0012               	return	
  8851  0029C6                     l660:
  8852                           
  8853                           ; BSR set to: 0
  8854                           ;pff.c: 409: return (DWORD)clst * fs->csize + fs->database;
  8855                           
  8856                           ; BSR set to: 0
  8857  0029C6  EE20 F012          	lfsr	2,18
  8858  0029CA  502A               	movf	clust2sect@fs,w,c
  8859  0029CC  26D9               	addwf	fsr2l,f,c
  8860  0029CE  502B               	movf	clust2sect@fs+1,w,c
  8861  0029D0  22DA               	addwfc	fsr2h,f,c
  8862  0029D2  CFDE F060          	movff	postinc2,??_clust2sect
  8863  0029D6  CFDE F061          	movff	postinc2,??_clust2sect+1
  8864  0029DA  CFDE F062          	movff	postinc2,??_clust2sect+2
  8865  0029DE  CFDE F063          	movff	postinc2,??_clust2sect+3
  8866  0029E2  EE20 F002          	lfsr	2,2
  8867  0029E6  502A               	movf	clust2sect@fs,w,c
  8868  0029E8  26D9               	addwf	fsr2l,f,c
  8869  0029EA  502B               	movf	clust2sect@fs+1,w,c
  8870  0029EC  22DA               	addwfc	fsr2h,f,c
  8871  0029EE  50DF               	movf	indf2,w,c
  8872  0029F0  6F64               	movwf	(??_clust2sect+4)& (0+255),b
  8873  0029F2  5164               	movf	(??_clust2sect+4)& (0+255),w,b
  8874  0029F4  6E1A               	movwf	___lmul@multiplier,c
  8875  0029F6  6A1B               	clrf	___lmul@multiplier+1,c
  8876  0029F8  6A1C               	clrf	___lmul@multiplier+2,c
  8877  0029FA  6A1D               	clrf	___lmul@multiplier+3,c
  8878  0029FC  C026  F01E         	movff	clust2sect@clst,___lmul@multiplicand
  8879  002A00  C027  F01F         	movff	clust2sect@clst+1,___lmul@multiplicand+1
  8880  002A04  C028  F020         	movff	clust2sect@clst+2,___lmul@multiplicand+2
  8881  002A08  C029  F021         	movff	clust2sect@clst+3,___lmul@multiplicand+3
  8882  002A0C  EC64  F018         	call	___lmul	;wreg free
  8883  002A10  0100               	movlb	0	; () banked
  8884  002A12  5160               	movf	??_clust2sect& (0+255),w,b
  8885  002A14  241A               	addwf	?___lmul,w,c
  8886  002A16  6E26               	movwf	?_clust2sect,c
  8887  002A18  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  8888  002A1A  201B               	addwfc	?___lmul+1,w,c
  8889  002A1C  6E27               	movwf	?_clust2sect+1,c
  8890  002A1E  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  8891  002A20  201C               	addwfc	?___lmul+2,w,c
  8892  002A22  6E28               	movwf	?_clust2sect+2,c
  8893  002A24  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  8894  002A26  201D               	addwfc	?___lmul+3,w,c
  8895  002A28  6E29               	movwf	?_clust2sect+3,c
  8896  002A2A  0012               	return	
  8897  002A2C                     __end_of_clust2sect:
  8898                           	opt stack 0
  8899                           tosu	equ	0xFFF
  8900                           tosh	equ	0xFFE
  8901                           tosl	equ	0xFFD
  8902                           pclath	equ	0xFFA
  8903                           tblptru	equ	0xFF8
  8904                           tblptrh	equ	0xFF7
  8905                           tblptrl	equ	0xFF6
  8906                           tablat	equ	0xFF5
  8907                           prodh	equ	0xFF4
  8908                           prodl	equ	0xFF3
  8909                           intcon	equ	0xFF2
  8910                           intcon2	equ	0xFF1
  8911                           intcon3	equ	0xFF0
  8912                           postinc0	equ	0xFEE
  8913                           wreg	equ	0xFE8
  8914                           indf1	equ	0xFE7
  8915                           postinc1	equ	0xFE6
  8916                           postdec1	equ	0xFE5
  8917                           fsr1h	equ	0xFE2
  8918                           fsr1l	equ	0xFE1
  8919                           indf2	equ	0xFDF
  8920                           postinc2	equ	0xFDE
  8921                           postdec2	equ	0xFDD
  8922                           plusw2	equ	0xFDB
  8923                           fsr2h	equ	0xFDA
  8924                           fsr2l	equ	0xFD9
  8925                           status	equ	0xFD8
  8926                           
  8927 ;; *************** function _create_name *****************
  8928 ;; Defined at:
  8929 ;;		line 581 in file "bibliotecas/pff.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;  dj              2   33[COMRAM] PTR struct .
  8932 ;;		 -> pf_open@dj(16), 
  8933 ;;  path            2   35[COMRAM] PTR PTR const unsigned c
  8934 ;;		 -> follow_path@path(2), 
  8935 ;; Auto vars:     Size  Location     Type
  8936 ;;  d               1    0[BANK0 ] unsigned char 
  8937 ;;  sfn             2    5[BANK0 ] PTR unsigned char 
  8938 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8939 ;;  p               2    1[BANK0 ] PTR const unsigned char 
  8940 ;;		 -> STR_8(10), 
  8941 ;;  c               1    8[BANK0 ] unsigned char 
  8942 ;;  i               1    7[BANK0 ] unsigned char 
  8943 ;;  si              1    4[BANK0 ] unsigned char 
  8944 ;;  ni              1    3[BANK0 ] unsigned char 
  8945 ;; Return value:  Size  Location     Type
  8946 ;;                  1    wreg      enum E43
  8947 ;; Registers used:
  8948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8949 ;; Tracked objects:
  8950 ;;		On entry : 0/0
  8951 ;;		On exit  : 0/0
  8952 ;;		Unchanged: 0/0
  8953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8954 ;;      Params:         4       0       0       0       0       0       0       0       0
  8955 ;;      Locals:         0       9       0       0       0       0       0       0       0
  8956 ;;      Temps:          7       0       0       0       0       0       0       0       0
  8957 ;;      Totals:        11       9       0       0       0       0       0       0       0
  8958 ;;Total ram usage:       20 bytes
  8959 ;; Hardware stack levels used:    1
  8960 ;; Hardware stack levels required when called:    3
  8961 ;; This function calls:
  8962 ;;		_mem_set
  8963 ;; This function is called by:
  8964 ;;		_follow_path
  8965 ;; This function uses a non-reentrant model
  8966 ;;
  8967                           
  8968                           	psect	text37
  8969  001E96                     __ptext37:
  8970                           	opt stack 0
  8971  001E96                     _create_name:
  8972                           	opt stack 23
  8973                           
  8974                           ;pff.c: 586: BYTE c, ni, si, i, *sfn;
  8975                           ;pff.c: 587: const char *p;
  8976                           ;pff.c: 590: static const BYTE cvt[] = {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x4
      +                          5,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0
      +                          x9B,0x9C,0x9D,0x9E,0x9F, 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0x
  8977                           ;pff.c: 595: sfn = dj->fn;
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;incstack = 0
  8981  001E96  EE20 F002          	lfsr	2,2
  8982  001E9A  5022               	movf	create_name@dj,w,c
  8983  001E9C  26D9               	addwf	fsr2l,f,c
  8984  001E9E  5023               	movf	create_name@dj+1,w,c
  8985  001EA0  22DA               	addwfc	fsr2h,f,c
  8986  001EA2  CFDE F065          	movff	postinc2,create_name@sfn
  8987  001EA6  CFDD F066          	movff	postdec2,create_name@sfn+1
  8988                           
  8989                           ;pff.c: 596: mem_set(sfn, ' ', 11);
  8990  001EAA  C065  F01A         	movff	create_name@sfn,mem_set@dst
  8991  001EAE  C066  F01B         	movff	create_name@sfn+1,mem_set@dst+1
  8992  001EB2  0E00               	movlw	0
  8993  001EB4  6E1D               	movwf	mem_set@val+1,c
  8994  001EB6  0E20               	movlw	32
  8995  001EB8  6E1C               	movwf	mem_set@val,c
  8996  001EBA  0E00               	movlw	0
  8997  001EBC  6E1F               	movwf	mem_set@cnt+1,c
  8998  001EBE  0E0B               	movlw	11
  8999  001EC0  6E1E               	movwf	mem_set@cnt,c
  9000  001EC2  EC71  F019         	call	_mem_set	;wreg free
  9001                           
  9002                           ;pff.c: 597: si = i = 0; ni = 8;
  9003  001EC6  0E00               	movlw	0
  9004  001EC8  0100               	movlb	0	; () banked
  9005  001ECA  6F67               	movwf	create_name@i& (0+255),b
  9006  001ECC  C067  F064         	movff	create_name@i,create_name@si
  9007                           
  9008                           ; BSR set to: 0
  9009  001ED0  0E08               	movlw	8
  9010  001ED2  6F63               	movwf	create_name@ni& (0+255),b
  9011                           
  9012                           ; BSR set to: 0
  9013                           ;pff.c: 598: p = *path;
  9014  001ED4  C024  FFD9         	movff	create_name@path,fsr2l
  9015  001ED8  C025  FFDA         	movff	create_name@path+1,fsr2h
  9016  001EDC  CFDE F061          	movff	postinc2,create_name@p
  9017  001EE0  CFDD F062          	movff	postdec2,create_name@p+1
  9018  001EE4                     
  9019                           ; BSR set to: 0
  9020                           ;pff.c: 600: c = p[si++];
  9021                           
  9022                           ; BSR set to: 0
  9023  001EE4  5164               	movf	create_name@si& (0+255),w,b
  9024  001EE6  0D01               	mullw	1
  9025  001EE8  C061  F026         	movff	create_name@p,??_create_name
  9026  001EEC  C062  F027         	movff	create_name@p+1,??_create_name+1
  9027  001EF0  50F3               	movf	prodl,w,c
  9028  001EF2  2626               	addwf	??_create_name,f,c
  9029  001EF4  50F4               	movf	prodh,w,c
  9030  001EF6  2227               	addwfc	??_create_name+1,f,c
  9031  001EF8  C026  FFF6         	movff	??_create_name,tblptrl
  9032  001EFC  C027  FFF7         	movff	??_create_name+1,tblptrh
  9033  001F00                     	if	0	;tblptru may be non-zero
  9034  001F00                     	endif
  9035  001F00                     	if	0	;tblptru may be non-zero
  9036  001F00                     	endif
  9037  001F00  0008               	tblrd		*
  9038  001F02  CFF5 F068          	movff	tablat,create_name@c
  9039                           
  9040                           ; BSR set to: 0
  9041  001F06  2B64               	incf	create_name@si& (0+255),f,b
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;pff.c: 601: if (c <= ' ' || c == '/') break;
  9045  001F08  0E20               	movlw	32
  9046  001F0A  6568               	cpfsgt	create_name@c& (0+255),b
  9047  001F0C  D044               	goto	l722
  9048                           
  9049                           ; BSR set to: 0
  9050  001F0E  0E2F               	movlw	47
  9051  001F10  1968               	xorwf	create_name@c& (0+255),w,b
  9052  001F12  B4D8               	btfsc	status,2,c
  9053  001F14  D040               	goto	l722
  9054                           
  9055                           ; BSR set to: 0
  9056                           ;pff.c: 602: if (c == '.' || i >= ni) {
  9057                           
  9058                           ; BSR set to: 0
  9059                           
  9060                           ; BSR set to: 0
  9061  001F16  0E2E               	movlw	46
  9062  001F18  1968               	xorwf	create_name@c& (0+255),w,b
  9063  001F1A  B4D8               	btfsc	status,2,c
  9064  001F1C  D004               	goto	u7590
  9065                           
  9066                           ; BSR set to: 0
  9067  001F1E  5163               	movf	create_name@ni& (0+255),w,b
  9068  001F20  5D67               	subwf	create_name@i& (0+255),w,b
  9069  001F22  A0D8               	btfss	status,0,c
  9070  001F24  D00D               	goto	l723
  9071  001F26                     u7590:
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;pff.c: 603: if (ni != 8 || c != '.') break;
  9075                           
  9076                           ; BSR set to: 0
  9077  001F26  0E08               	movlw	8
  9078  001F28  1963               	xorwf	create_name@ni& (0+255),w,b
  9079  001F2A  A4D8               	btfss	status,2,c
  9080  001F2C  D034               	goto	l722
  9081                           
  9082                           ; BSR set to: 0
  9083  001F2E  0E2E               	movlw	46
  9084  001F30  1968               	xorwf	create_name@c& (0+255),w,b
  9085  001F32  A4D8               	btfss	status,2,c
  9086  001F34  D030               	goto	l722
  9087                           
  9088                           ; BSR set to: 0
  9089                           ;pff.c: 604: i = 8; ni = 11;
  9090                           
  9091                           ; BSR set to: 0
  9092                           
  9093                           ; BSR set to: 0
  9094  001F36  0E08               	movlw	8
  9095  001F38  6F67               	movwf	create_name@i& (0+255),b
  9096  001F3A  0E0B               	movlw	11
  9097  001F3C  6F63               	movwf	create_name@ni& (0+255),b
  9098                           
  9099                           ;pff.c: 605: continue;
  9100  001F3E  D7D2               	goto	l718
  9101  001F40                     l723:
  9102                           
  9103                           ; BSR set to: 0
  9104                           ;pff.c: 606: }
  9105                           ;pff.c: 609: if (c >= 0x80)
  9106                           
  9107                           ; BSR set to: 0
  9108  001F40  0E7F               	movlw	127
  9109  001F42  6568               	cpfsgt	create_name@c& (0+255),b
  9110  001F44  D014               	goto	l731
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;pff.c: 610: c = cvt[c - 0x80];
  9114  001F46  0E80               	movlw	128
  9115  001F48  6E26               	movwf	??_create_name& (0+255),c
  9116  001F4A  0EFF               	movlw	255
  9117  001F4C  6E27               	movwf	(??_create_name+1)& (0+255),c
  9118  001F4E  5168               	movf	create_name@c& (0+255),w,b
  9119  001F50  6E28               	movwf	(??_create_name+2)& (0+255),c
  9120  001F52  6A29               	clrf	(??_create_name+3)& (0+255),c
  9121  001F54  5026               	movf	??_create_name,w,c
  9122  001F56  2628               	addwf	??_create_name+2,f,c
  9123  001F58  5027               	movf	??_create_name+1,w,c
  9124  001F5A  2229               	addwfc	??_create_name+3,f,c
  9125  001F5C  0ED1               	movlw	low create_name@cvt
  9126  001F5E  2428               	addwf	??_create_name+2,w,c
  9127  001F60  6EF6               	movwf	tblptrl,c
  9128  001F62  0E60               	movlw	high create_name@cvt
  9129  001F64  2029               	addwfc	??_create_name+3,w,c
  9130  001F66  6EF7               	movwf	tblptrh,c
  9131  001F68                     	if	0	;There are less than 3 active tblptr bytes
  9132  001F68                     	endif
  9133  001F68  0008               	tblrd		*
  9134  001F6A  CFF5 F068          	movff	tablat,create_name@c
  9135  001F6E                     l731:
  9136                           
  9137                           ; BSR set to: 0
  9138                           
  9139                           ; BSR set to: 0
  9140  001F6E  0E60               	movlw	96
  9141  001F70  6568               	cpfsgt	create_name@c& (0+255),b
  9142  001F72  D005               	goto	l733
  9143                           
  9144                           ; BSR set to: 0
  9145  001F74  0E7B               	movlw	123
  9146  001F76  6168               	cpfslt	create_name@c& (0+255),b
  9147  001F78  D002               	goto	l733
  9148                           
  9149                           ; BSR set to: 0
  9150  001F7A  0E20               	movlw	32
  9151  001F7C  5F68               	subwf	create_name@c& (0+255),f,b
  9152  001F7E                     l733:
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;pff.c: 620: sfn[i++] = c;
  9156                           
  9157                           ; BSR set to: 0
  9158  001F7E  5167               	movf	create_name@i& (0+255),w,b
  9159  001F80  0D01               	mullw	1
  9160  001F82  50F3               	movf	prodl,w,c
  9161  001F84  2565               	addwf	create_name@sfn& (0+255),w,b
  9162  001F86  6ED9               	movwf	fsr2l,c
  9163  001F88  50F4               	movf	prodh,w,c
  9164  001F8A  2166               	addwfc	(create_name@sfn+1)& (0+255),w,b
  9165  001F8C  6EDA               	movwf	fsr2h,c
  9166  001F8E  C068  FFDF         	movff	create_name@c,indf2
  9167                           
  9168                           ; BSR set to: 0
  9169  001F92  2B67               	incf	create_name@i& (0+255),f,b
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;pff.c: 621: }
  9173                           ;pff.c: 622: }
  9174                           
  9175                           ; BSR set to: 0
  9176  001F94  D7A7               	goto	l718
  9177  001F96                     l722:
  9178                           
  9179                           ; BSR set to: 0
  9180                           ;pff.c: 623: *path = &p[si];
  9181                           
  9182                           ; BSR set to: 0
  9183  001F96  5164               	movf	create_name@si& (0+255),w,b
  9184  001F98  0D01               	mullw	1
  9185  001F9A  C061  F026         	movff	create_name@p,??_create_name
  9186  001F9E  C062  F027         	movff	create_name@p+1,??_create_name+1
  9187  001FA2  50F3               	movf	prodl,w,c
  9188  001FA4  2626               	addwf	??_create_name,f,c
  9189  001FA6  50F4               	movf	prodh,w,c
  9190  001FA8  2227               	addwfc	??_create_name+1,f,c
  9191  001FAA  C024  FFD9         	movff	create_name@path,fsr2l
  9192  001FAE  C025  FFDA         	movff	create_name@path+1,fsr2h
  9193  001FB2  C026  FFDE         	movff	??_create_name,postinc2
  9194  001FB6  C027  FFDD         	movff	??_create_name+1,postdec2
  9195                           
  9196                           ; BSR set to: 0
  9197                           ;pff.c: 625: sfn[11] = (c <= ' ') ? 1 : 0;
  9198  001FBA  EE20 F00B          	lfsr	2,11
  9199  001FBE  5165               	movf	create_name@sfn& (0+255),w,b
  9200  001FC0  26D9               	addwf	fsr2l,f,c
  9201  001FC2  5166               	movf	(create_name@sfn+1)& (0+255),w,b
  9202  001FC4  22DA               	addwfc	fsr2h,f,c
  9203  001FC6  0E20               	movlw	32
  9204  001FC8  6568               	cpfsgt	create_name@c& (0+255),b
  9205  001FCA  D001               	goto	u7661
  9206  001FCC  D002               	goto	u7660
  9207  001FCE                     u7661:
  9208  001FCE  0E01               	movlw	1
  9209  001FD0  D001               	goto	u7670
  9210  001FD2                     u7660:
  9211  001FD2  0E00               	movlw	0
  9212  001FD4                     u7670:
  9213  001FD4  6EDF               	movwf	indf2,c
  9214                           
  9215                           ; BSR set to: 0
  9216                           ;pff.c: 627: return FR_OK;
  9217  001FD6  0E00               	movlw	0
  9218  001FD8  0012               	return	
  9219  001FDA                     __end_of_create_name:
  9220                           	opt stack 0
  9221                           tosu	equ	0xFFF
  9222                           tosh	equ	0xFFE
  9223                           tosl	equ	0xFFD
  9224                           pclath	equ	0xFFA
  9225                           tblptru	equ	0xFF8
  9226                           tblptrh	equ	0xFF7
  9227                           tblptrl	equ	0xFF6
  9228                           tablat	equ	0xFF5
  9229                           prodh	equ	0xFF4
  9230                           prodl	equ	0xFF3
  9231                           intcon	equ	0xFF2
  9232                           intcon2	equ	0xFF1
  9233                           intcon3	equ	0xFF0
  9234                           postinc0	equ	0xFEE
  9235                           wreg	equ	0xFE8
  9236                           indf1	equ	0xFE7
  9237                           postinc1	equ	0xFE6
  9238                           postdec1	equ	0xFE5
  9239                           fsr1h	equ	0xFE2
  9240                           fsr1l	equ	0xFE1
  9241                           indf2	equ	0xFDF
  9242                           postinc2	equ	0xFDE
  9243                           postdec2	equ	0xFDD
  9244                           plusw2	equ	0xFDB
  9245                           fsr2h	equ	0xFDA
  9246                           fsr2l	equ	0xFD9
  9247                           status	equ	0xFD8
  9248                           
  9249 ;; *************** function _mem_set *****************
  9250 ;; Defined at:
  9251 ;;		line 329 in file "bibliotecas/pff.c"
  9252 ;; Parameters:    Size  Location     Type
  9253 ;;  dst             2   25[COMRAM] PTR void 
  9254 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  9255 ;;  val             2   27[COMRAM] int 
  9256 ;;  cnt             2   29[COMRAM] int 
  9257 ;; Auto vars:     Size  Location     Type
  9258 ;;  d               2   31[COMRAM] PTR unsigned char 
  9259 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  9260 ;; Return value:  Size  Location     Type
  9261 ;;                  1    wreg      void 
  9262 ;; Registers used:
  9263 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9264 ;; Tracked objects:
  9265 ;;		On entry : 0/0
  9266 ;;		On exit  : 0/0
  9267 ;;		Unchanged: 0/0
  9268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9269 ;;      Params:         6       0       0       0       0       0       0       0       0
  9270 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9271 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9272 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9273 ;;Total ram usage:        8 bytes
  9274 ;; Hardware stack levels used:    1
  9275 ;; Hardware stack levels required when called:    2
  9276 ;; This function calls:
  9277 ;;		Nothing
  9278 ;; This function is called by:
  9279 ;;		_create_name
  9280 ;; This function uses a non-reentrant model
  9281 ;;
  9282                           
  9283                           	psect	text38
  9284  0032E2                     __ptext38:
  9285                           	opt stack 0
  9286  0032E2                     _mem_set:
  9287                           	opt stack 23
  9288                           
  9289                           ;pff.c: 330: char *d = (char*)dst;
  9290                           
  9291                           ; BSR set to: 0
  9292                           ;incstack = 0
  9293  0032E2  C01A  F020         	movff	mem_set@dst,mem_set@d
  9294  0032E6  C01B  F021         	movff	mem_set@dst+1,mem_set@d+1
  9295                           
  9296                           ;pff.c: 331: while (cnt--) *d++ = (char)val;
  9297  0032EA  D008               	goto	l624
  9298  0032EC                     l6651:
  9299  0032EC  C020  FFD9         	movff	mem_set@d,fsr2l
  9300  0032F0  C021  FFDA         	movff	mem_set@d+1,fsr2h
  9301  0032F4  C01C  FFDF         	movff	mem_set@val,indf2
  9302  0032F8  4A20               	infsnz	mem_set@d,f,c
  9303  0032FA  2A21               	incf	mem_set@d+1,f,c
  9304  0032FC                     l624:
  9305  0032FC  061E               	decf	mem_set@cnt,f,c
  9306  0032FE  A0D8               	btfss	status,0,c
  9307  003300  061F               	decf	mem_set@cnt+1,f,c
  9308  003302  281E               	incf	mem_set@cnt,w,c
  9309  003304  E1F3               	bnz	l6651
  9310  003306  281F               	incf	mem_set@cnt+1,w,c
  9311  003308  B4D8               	btfsc	status,2,c
  9312  00330A  0012               	return	
  9313  00330C  D7EF               	goto	l625
  9314  00330E                     __end_of_mem_set:
  9315                           	opt stack 0
  9316                           tosu	equ	0xFFF
  9317                           tosh	equ	0xFFE
  9318                           tosl	equ	0xFFD
  9319                           pclath	equ	0xFFA
  9320                           tblptru	equ	0xFF8
  9321                           tblptrh	equ	0xFF7
  9322                           tblptrl	equ	0xFF6
  9323                           tablat	equ	0xFF5
  9324                           prodh	equ	0xFF4
  9325                           prodl	equ	0xFF3
  9326                           intcon	equ	0xFF2
  9327                           intcon2	equ	0xFF1
  9328                           intcon3	equ	0xFF0
  9329                           postinc0	equ	0xFEE
  9330                           wreg	equ	0xFE8
  9331                           indf1	equ	0xFE7
  9332                           postinc1	equ	0xFE6
  9333                           postdec1	equ	0xFE5
  9334                           fsr1h	equ	0xFE2
  9335                           fsr1l	equ	0xFE1
  9336                           indf2	equ	0xFDF
  9337                           postinc2	equ	0xFDE
  9338                           postdec2	equ	0xFDD
  9339                           plusw2	equ	0xFDB
  9340                           fsr2h	equ	0xFDA
  9341                           fsr2l	equ	0xFD9
  9342                           status	equ	0xFD8
  9343                           
  9344 ;; *************** function _pf_mount *****************
  9345 ;; Defined at:
  9346 ;;		line 755 in file "bibliotecas/pff.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  fs              2   28[BANK0 ] PTR struct .
  9349 ;;		 -> SDCard@fs(42), 
  9350 ;; Auto vars:     Size  Location     Type
  9351 ;;  buf            36   52[BANK0 ] unsigned char [36]
  9352 ;;  fsize           4  100[BANK0 ] unsigned long 
  9353 ;;  bsect           4   96[BANK0 ] unsigned long 
  9354 ;;  mclst           4   92[BANK0 ] unsigned long 
  9355 ;;  tsect           4   88[BANK0 ] unsigned long 
  9356 ;;  fmt             1  104[BANK0 ] unsigned char 
  9357 ;; Return value:  Size  Location     Type
  9358 ;;                  1    wreg      enum E43
  9359 ;; Registers used:
  9360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9361 ;; Tracked objects:
  9362 ;;		On entry : 0/0
  9363 ;;		On exit  : 0/0
  9364 ;;		Unchanged: 0/0
  9365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9366 ;;      Params:         0       2       0       0       0       0       0       0       0
  9367 ;;      Locals:         0      53       0       0       0       0       0       0       0
  9368 ;;      Temps:          0      22       0       0       0       0       0       0       0
  9369 ;;      Totals:         0      77       0       0       0       0       0       0       0
  9370 ;;Total ram usage:       77 bytes
  9371 ;; Hardware stack levels used:    1
  9372 ;; Hardware stack levels required when called:    7
  9373 ;; This function calls:
  9374 ;;		___lldiv
  9375 ;;		___lmul
  9376 ;;		_check_fs
  9377 ;;		_disk_initialize
  9378 ;;		_disk_readp
  9379 ;; This function is called by:
  9380 ;;		_SDCard
  9381 ;; This function uses a non-reentrant model
  9382 ;;
  9383                           
  9384                           	psect	text39
  9385  000012                     __ptext39:
  9386                           	opt stack 0
  9387  000012                     _pf_mount:
  9388                           	opt stack 21
  9389                           
  9390                           ;pff.c: 759: BYTE fmt, buf[36];
  9391                           ;pff.c: 760: DWORD bsect, fsize, tsect, mclst;
  9392                           ;pff.c: 763: FatFs = 0;
  9393                           
  9394                           ;incstack = 0
  9395  000012  0E00               	movlw	0
  9396  000014  6E39               	movwf	_FatFs,c
  9397  000016  0E00               	movlw	0
  9398  000018  6E3A               	movwf	_FatFs+1,c
  9399                           
  9400                           ;pff.c: 764: if (disk_initialize() & 0x01)
  9401  00001A  ECE1  F00A         	call	_disk_initialize	;wreg free
  9402  00001E  0100               	movlb	0	; () banked
  9403  000020  6F7E               	movwf	??_pf_mount& (0+255),b
  9404  000022  A17E               	btfss	??_pf_mount& (0+255),0,b
  9405  000024  D002               	goto	l771
  9406                           
  9407                           ; BSR set to: 0
  9408                           ;pff.c: 765: return FR_NOT_READY;
  9409  000026  0E02               	movlw	2
  9410                           
  9411                           ; BSR set to: 0
  9412  000028  0012               	return	
  9413  00002A                     l771:
  9414                           
  9415                           ; BSR set to: 0
  9416                           ;pff.c: 767: bsect = 0;
  9417                           
  9418                           ; BSR set to: 0
  9419  00002A  0E00               	movlw	0
  9420  00002C  6FC0               	movwf	pf_mount@bsect& (0+255),b
  9421  00002E  0E00               	movlw	0
  9422  000030  6FC1               	movwf	(pf_mount@bsect+1)& (0+255),b
  9423  000032  0E00               	movlw	0
  9424  000034  6FC2               	movwf	(pf_mount@bsect+2)& (0+255),b
  9425  000036  0E00               	movlw	0
  9426  000038  6FC3               	movwf	(pf_mount@bsect+3)& (0+255),b
  9427                           
  9428                           ; BSR set to: 0
  9429                           ;pff.c: 768: fmt = check_fs(buf, bsect);
  9430  00003A  0E94               	movlw	low pf_mount@buf
  9431  00003C  6F72               	movwf	check_fs@buf& (0+255),b
  9432  00003E  0E00               	movlw	high pf_mount@buf
  9433  000040  6F73               	movwf	(check_fs@buf+1)& (0+255),b
  9434  000042  C0C0  F074         	movff	pf_mount@bsect,check_fs@sect
  9435  000046  C0C1  F075         	movff	pf_mount@bsect+1,check_fs@sect+1
  9436  00004A  C0C2  F076         	movff	pf_mount@bsect+2,check_fs@sect+2
  9437  00004E  C0C3  F077         	movff	pf_mount@bsect+3,check_fs@sect+3
  9438  000052  ECF5  F00D         	call	_check_fs	;wreg free
  9439  000056  0100               	movlb	0	; () banked
  9440  000058  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;pff.c: 769: if (fmt == 1) {
  9444  00005A  05C8               	decf	pf_mount@fmt& (0+255),w,b
  9445  00005C  A4D8               	btfss	status,2,c
  9446  00005E  D068               	goto	l776
  9447                           
  9448                           ; BSR set to: 0
  9449                           ;pff.c: 771: if (disk_readp(buf, bsect, 446, 16)) {
  9450  000060  0E94               	movlw	low pf_mount@buf
  9451  000062  6F60               	movwf	disk_readp@rd& (0+255),b
  9452  000064  0E00               	movlw	high pf_mount@buf
  9453  000066  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  9454  000068  C0C0  F062         	movff	pf_mount@bsect,disk_readp@sector
  9455  00006C  C0C1  F063         	movff	pf_mount@bsect+1,disk_readp@sector+1
  9456  000070  C0C2  F064         	movff	pf_mount@bsect+2,disk_readp@sector+2
  9457  000074  C0C3  F065         	movff	pf_mount@bsect+3,disk_readp@sector+3
  9458  000078  0E01               	movlw	1
  9459  00007A  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  9460  00007C  0EBE               	movlw	190
  9461  00007E  6F66               	movwf	disk_readp@offset& (0+255),b
  9462  000080  0E00               	movlw	0
  9463  000082  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  9464  000084  0E10               	movlw	16
  9465  000086  6F68               	movwf	disk_readp@count& (0+255),b
  9466  000088  EC3C  F009         	call	_disk_readp	;wreg free
  9467  00008C  0900               	iorlw	0
  9468  00008E  B4D8               	btfsc	status,2,c
  9469  000090  D002               	goto	l774
  9470                           
  9471                           ;pff.c: 772: fmt = 3;
  9472  000092  0E03               	movlw	3
  9473  000094  D04B               	goto	L5
  9474  000096                     l774:
  9475                           
  9476                           ;pff.c: 774: if (buf[4]) {
  9477                           
  9478                           ; BSR set to: 0
  9479  000096  0100               	movlb	0	; () banked
  9480  000098  5198               	movf	(pf_mount@buf+4)& (0+255),w,b
  9481  00009A  B4D8               	btfsc	status,2,c
  9482  00009C  D049               	goto	l776
  9483                           
  9484                           ; BSR set to: 0
  9485                           ;pff.c: 775: bsect = (DWORD)(((DWORD)*((BYTE*)(&buf[8])+3)<<24)|((DWORD)*((BYTE*)(&buf[8
      +                          ])+2)<<16)|((WORD)*((BYTE*)(&buf[8])+1)<<8)|*(BYTE*)(&buf[8]));
  9486  00009E  519D               	movf	(pf_mount@buf+9)& (0+255),w,b
  9487  0000A0  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  9488  0000A2  6B7E               	clrf	??_pf_mount& (0+255),b
  9489  0000A4  C09E  F080         	movff	pf_mount@buf+10,??_pf_mount+2
  9490  0000A8  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9491  0000AA  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9492  0000AC  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  9493  0000AE  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  9494  0000B2  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  9495  0000B6  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9496  0000B8  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  9497  0000BA  C09F  F084         	movff	pf_mount@buf+11,??_pf_mount+6
  9498  0000BE  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9499  0000C0  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9500  0000C2  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  9501  0000C4  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  9502  0000C8  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9503  0000CA  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9504  0000CC  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  9505  0000CE  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  9506  0000D0  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9507  0000D2  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9508  0000D4  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9509  0000D6  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9510  0000D8  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9511  0000DA  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9512  0000DC  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9513  0000DE  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9514  0000E0  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9515  0000E2  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9516  0000E4  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9517  0000E6  517E               	movf	??_pf_mount& (0+255),w,b
  9518  0000E8  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9519  0000EA  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9520  0000EC  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9521  0000EE  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9522  0000F0  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  9523  0000F2  0E00               	movlw	0
  9524  0000F4  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9525  0000F6  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  9526  0000F8  0E00               	movlw	0
  9527  0000FA  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9528  0000FC  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  9529  0000FE  519C               	movf	(pf_mount@buf+8)& (0+255),w,b
  9530  000100  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9531  000102  6FC0               	movwf	pf_mount@bsect& (0+255),b
  9532  000104  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  9533  000106  6FC1               	movwf	(pf_mount@bsect+1)& (0+255),b
  9534  000108  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  9535  00010A  6FC2               	movwf	(pf_mount@bsect+2)& (0+255),b
  9536  00010C  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  9537  00010E  6FC3               	movwf	(pf_mount@bsect+3)& (0+255),b
  9538                           
  9539                           ; BSR set to: 0
  9540                           ;pff.c: 776: fmt = check_fs(buf, bsect);
  9541  000110  0E94               	movlw	low pf_mount@buf
  9542  000112  6F72               	movwf	check_fs@buf& (0+255),b
  9543  000114  0E00               	movlw	high pf_mount@buf
  9544  000116  6F73               	movwf	(check_fs@buf+1)& (0+255),b
  9545  000118  C0C0  F074         	movff	pf_mount@bsect,check_fs@sect
  9546  00011C  C0C1  F075         	movff	pf_mount@bsect+1,check_fs@sect+1
  9547  000120  C0C2  F076         	movff	pf_mount@bsect+2,check_fs@sect+2
  9548  000124  C0C3  F077         	movff	pf_mount@bsect+3,check_fs@sect+3
  9549  000128  ECF5  F00D         	call	_check_fs	;wreg free
  9550  00012C                     L5:
  9551  00012C  0100               	movlb	0	; () banked
  9552  00012E  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9553  000130                     l776:
  9554                           
  9555                           ; BSR set to: 0
  9556                           ;pff.c: 777: }
  9557                           ;pff.c: 778: }
  9558                           ;pff.c: 779: }
  9559                           ;pff.c: 780: if (fmt == 3) return FR_DISK_ERR;
  9560                           
  9561                           ; BSR set to: 0
  9562                           
  9563                           ; BSR set to: 0
  9564                           
  9565                           ; BSR set to: 0
  9566  000130  0E03               	movlw	3
  9567  000132  19C8               	xorwf	pf_mount@fmt& (0+255),w,b
  9568  000134  A4D8               	btfss	status,2,c
  9569  000136  D002               	goto	l777
  9570                           
  9571                           ; BSR set to: 0
  9572  000138  0E01               	movlw	1
  9573                           
  9574                           ; BSR set to: 0
  9575  00013A  0012               	return	
  9576  00013C                     l777:
  9577                           
  9578                           ; BSR set to: 0
  9579                           ;pff.c: 781: if (fmt) return FR_NO_FILESYSTEM;
  9580                           
  9581                           ; BSR set to: 0
  9582  00013C  51C8               	movf	pf_mount@fmt& (0+255),w,b
  9583  00013E  B4D8               	btfsc	status,2,c
  9584  000140  D002               	goto	l778
  9585                           
  9586                           ; BSR set to: 0
  9587  000142  0E06               	movlw	6
  9588                           
  9589                           ; BSR set to: 0
  9590  000144  0012               	return	
  9591  000146                     l778:
  9592                           
  9593                           ; BSR set to: 0
  9594                           ;pff.c: 784: if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
  9595                           
  9596                           ; BSR set to: 0
  9597  000146  0E94               	movlw	low pf_mount@buf
  9598  000148  6F60               	movwf	disk_readp@rd& (0+255),b
  9599  00014A  0E00               	movlw	high pf_mount@buf
  9600  00014C  6F61               	movwf	(disk_readp@rd+1)& (0+255),b
  9601  00014E  C0C0  F062         	movff	pf_mount@bsect,disk_readp@sector
  9602  000152  C0C1  F063         	movff	pf_mount@bsect+1,disk_readp@sector+1
  9603  000156  C0C2  F064         	movff	pf_mount@bsect+2,disk_readp@sector+2
  9604  00015A  C0C3  F065         	movff	pf_mount@bsect+3,disk_readp@sector+3
  9605  00015E  0E00               	movlw	0
  9606  000160  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
  9607  000162  0E0D               	movlw	13
  9608  000164  6F66               	movwf	disk_readp@offset& (0+255),b
  9609  000166  0E00               	movlw	0
  9610  000168  6F69               	movwf	(disk_readp@count+1)& (0+255),b
  9611  00016A  0E24               	movlw	36
  9612  00016C  6F68               	movwf	disk_readp@count& (0+255),b
  9613  00016E  EC3C  F009         	call	_disk_readp	;wreg free
  9614  000172  0900               	iorlw	0
  9615  000174  B4D8               	btfsc	status,2,c
  9616  000176  D002               	goto	l779
  9617  000178  0E01               	movlw	1
  9618  00017A  0012               	return	
  9619  00017C                     l779:
  9620                           
  9621                           ;pff.c: 786: fsize = (WORD)(((WORD)*((BYTE*)(buf+22-13)+1)<<8)|(WORD)*(BYTE*)(buf+22-13)
      +                          );
  9622  00017C  0100               	movlb	0	; () banked
  9623  00017E  519D               	movf	(pf_mount@buf+9)& (0+255),w,b
  9624  000180  C09E  F07E         	movff	pf_mount@buf+10,??_pf_mount
  9625  000184  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9626  000186  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9627  00018A  6B7E               	clrf	??_pf_mount& (0+255),b
  9628  00018C  137E               	iorwf	??_pf_mount& (0+255),f,b
  9629  00018E  0E00               	movlw	0
  9630  000190  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9631  000192  C07E  F0C4         	movff	??_pf_mount,pf_mount@fsize
  9632  000196  C07F  F0C5         	movff	??_pf_mount+1,pf_mount@fsize+1
  9633  00019A  6BC6               	clrf	(pf_mount@fsize+2)& (0+255),b
  9634  00019C  6BC7               	clrf	(pf_mount@fsize+3)& (0+255),b
  9635                           
  9636                           ;pff.c: 787: if (!fsize) fsize = (DWORD)(((DWORD)*((BYTE*)(buf+36-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+36-13)+2)<<16)|((WORD)*((BYTE*)(buf+36-13)+1)<<8)|*(BYTE*)(buf+36-13));
  9637  00019E  51C4               	movf	pf_mount@fsize& (0+255),w,b
  9638  0001A0  11C5               	iorwf	(pf_mount@fsize+1)& (0+255),w,b
  9639  0001A2  11C6               	iorwf	(pf_mount@fsize+2)& (0+255),w,b
  9640  0001A4  11C7               	iorwf	(pf_mount@fsize+3)& (0+255),w,b
  9641  0001A6  A4D8               	btfss	status,2,c
  9642  0001A8  D039               	goto	l780
  9643                           
  9644                           ; BSR set to: 0
  9645  0001AA  51AC               	movf	(pf_mount@buf+24)& (0+255),w,b
  9646  0001AC  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  9647  0001AE  6B7E               	clrf	??_pf_mount& (0+255),b
  9648  0001B0  C0AD  F080         	movff	pf_mount@buf+25,??_pf_mount+2
  9649  0001B4  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9650  0001B6  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9651  0001B8  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  9652  0001BA  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  9653  0001BE  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  9654  0001C2  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9655  0001C4  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  9656  0001C6  C0AE  F084         	movff	pf_mount@buf+26,??_pf_mount+6
  9657  0001CA  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9658  0001CC  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9659  0001CE  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  9660  0001D0  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  9661  0001D4  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9662  0001D6  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9663  0001D8  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  9664  0001DA  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  9665  0001DC  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9666  0001DE  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9667  0001E0  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9668  0001E2  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9669  0001E4  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9670  0001E6  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9671  0001E8  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9672  0001EA  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9673  0001EC  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9674  0001EE  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9675  0001F0  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9676  0001F2  517E               	movf	??_pf_mount& (0+255),w,b
  9677  0001F4  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9678  0001F6  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9679  0001F8  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9680  0001FA  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9681  0001FC  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  9682  0001FE  0E00               	movlw	0
  9683  000200  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9684  000202  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  9685  000204  0E00               	movlw	0
  9686  000206  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9687  000208  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  9688  00020A  51AB               	movf	(pf_mount@buf+23)& (0+255),w,b
  9689  00020C  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9690  00020E  6FC4               	movwf	pf_mount@fsize& (0+255),b
  9691  000210  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  9692  000212  6FC5               	movwf	(pf_mount@fsize+1)& (0+255),b
  9693  000214  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  9694  000216  6FC6               	movwf	(pf_mount@fsize+2)& (0+255),b
  9695  000218  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  9696  00021A  6FC7               	movwf	(pf_mount@fsize+3)& (0+255),b
  9697  00021C                     l780:
  9698                           
  9699                           ; BSR set to: 0
  9700                           ;pff.c: 789: fsize *= buf[16-13];
  9701                           
  9702                           ; BSR set to: 0
  9703  00021C  C0C4  F01A         	movff	pf_mount@fsize,___lmul@multiplier
  9704  000220  C0C5  F01B         	movff	pf_mount@fsize+1,___lmul@multiplier+1
  9705  000224  C0C6  F01C         	movff	pf_mount@fsize+2,___lmul@multiplier+2
  9706  000228  C0C7  F01D         	movff	pf_mount@fsize+3,___lmul@multiplier+3
  9707  00022C  5197               	movf	(pf_mount@buf+3)& (0+255),w,b
  9708  00022E  6E1E               	movwf	___lmul@multiplicand,c
  9709  000230  6A1F               	clrf	___lmul@multiplicand+1,c
  9710  000232  6A20               	clrf	___lmul@multiplicand+2,c
  9711  000234  6A21               	clrf	___lmul@multiplicand+3,c
  9712  000236  EC64  F018         	call	___lmul	;wreg free
  9713  00023A  C01A  F0C4         	movff	?___lmul,pf_mount@fsize
  9714  00023E  C01B  F0C5         	movff	?___lmul+1,pf_mount@fsize+1
  9715  000242  C01C  F0C6         	movff	?___lmul+2,pf_mount@fsize+2
  9716  000246  C01D  F0C7         	movff	?___lmul+3,pf_mount@fsize+3
  9717                           
  9718                           ;pff.c: 790: fs->fatbase = bsect + (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYT
      +                          E*)(buf+14-13));
  9719  00024A  0100               	movlb	0	; () banked
  9720  00024C  5195               	movf	(pf_mount@buf+1)& (0+255),w,b
  9721  00024E  C096  F07E         	movff	pf_mount@buf+2,??_pf_mount
  9722  000252  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9723  000254  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9724  000258  6B7E               	clrf	??_pf_mount& (0+255),b
  9725  00025A  137E               	iorwf	??_pf_mount& (0+255),f,b
  9726  00025C  0E00               	movlw	0
  9727  00025E  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9728  000260  517E               	movf	??_pf_mount& (0+255),w,b
  9729  000262  25C0               	addwf	pf_mount@bsect& (0+255),w,b
  9730  000264  6F80               	movwf	(??_pf_mount+2)& (0+255),b
  9731  000266  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9732  000268  21C1               	addwfc	(pf_mount@bsect+1)& (0+255),w,b
  9733  00026A  6F81               	movwf	(??_pf_mount+3)& (0+255),b
  9734  00026C  0E00               	movlw	0
  9735  00026E  21C2               	addwfc	(pf_mount@bsect+2)& (0+255),w,b
  9736  000270  6F82               	movwf	(??_pf_mount+4)& (0+255),b
  9737  000272  0E00               	movlw	0
  9738  000274  21C3               	addwfc	(pf_mount@bsect+3)& (0+255),w,b
  9739  000276  6F83               	movwf	(??_pf_mount+5)& (0+255),b
  9740  000278  EE20 F00A          	lfsr	2,10
  9741  00027C  517C               	movf	pf_mount@fs& (0+255),w,b
  9742  00027E  26D9               	addwf	fsr2l,f,c
  9743  000280  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9744  000282  22DA               	addwfc	fsr2h,f,c
  9745  000284  C080  FFDE         	movff	??_pf_mount+2,postinc2
  9746  000288  C081  FFDE         	movff	??_pf_mount+3,postinc2
  9747  00028C  C082  FFDE         	movff	??_pf_mount+4,postinc2
  9748  000290  C083  FFDE         	movff	??_pf_mount+5,postinc2
  9749                           
  9750                           ; BSR set to: 0
  9751                           ;pff.c: 791: fs->csize = buf[13-13];
  9752  000294  EE20 F002          	lfsr	2,2
  9753  000298  517C               	movf	pf_mount@fs& (0+255),w,b
  9754  00029A  26D9               	addwf	fsr2l,f,c
  9755  00029C  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9756  00029E  22DA               	addwfc	fsr2h,f,c
  9757  0002A0  C094  FFDF         	movff	pf_mount@buf,indf2
  9758                           
  9759                           ; BSR set to: 0
  9760                           ;pff.c: 792: fs->n_rootdir = (WORD)(((WORD)*((BYTE*)(buf+17-13)+1)<<8)|(WORD)*(BYTE*)(bu
      +                          f+17-13));
  9761  0002A4  5198               	movf	(pf_mount@buf+4)& (0+255),w,b
  9762  0002A6  C099  F07E         	movff	pf_mount@buf+5,??_pf_mount
  9763  0002AA  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9764  0002AC  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9765  0002B0  6B7E               	clrf	??_pf_mount& (0+255),b
  9766  0002B2  137E               	iorwf	??_pf_mount& (0+255),f,b
  9767  0002B4  0E00               	movlw	0
  9768  0002B6  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9769  0002B8  EE20 F004          	lfsr	2,4
  9770  0002BC  517C               	movf	pf_mount@fs& (0+255),w,b
  9771  0002BE  26D9               	addwf	fsr2l,f,c
  9772  0002C0  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9773  0002C2  22DA               	addwfc	fsr2h,f,c
  9774  0002C4  C07E  FFDE         	movff	??_pf_mount,postinc2
  9775  0002C8  C07F  FFDD         	movff	??_pf_mount+1,postdec2
  9776                           
  9777                           ; BSR set to: 0
  9778                           ;pff.c: 793: tsect = (WORD)(((WORD)*((BYTE*)(buf+19-13)+1)<<8)|(WORD)*(BYTE*)(buf+19-13)
      +                          );
  9779  0002CC  519A               	movf	(pf_mount@buf+6)& (0+255),w,b
  9780  0002CE  C09B  F07E         	movff	pf_mount@buf+7,??_pf_mount
  9781  0002D2  6B7F               	clrf	(??_pf_mount+1)& (0+255),b
  9782  0002D4  C07E  F07F         	movff	??_pf_mount,??_pf_mount+1
  9783  0002D8  6B7E               	clrf	??_pf_mount& (0+255),b
  9784  0002DA  137E               	iorwf	??_pf_mount& (0+255),f,b
  9785  0002DC  0E00               	movlw	0
  9786  0002DE  137F               	iorwf	(??_pf_mount+1)& (0+255),f,b
  9787  0002E0  C07E  F0B8         	movff	??_pf_mount,pf_mount@tsect
  9788  0002E4  C07F  F0B9         	movff	??_pf_mount+1,pf_mount@tsect+1
  9789  0002E8  6BBA               	clrf	(pf_mount@tsect+2)& (0+255),b
  9790  0002EA  6BBB               	clrf	(pf_mount@tsect+3)& (0+255),b
  9791                           
  9792                           ; BSR set to: 0
  9793                           ;pff.c: 794: if (!tsect) tsect = (DWORD)(((DWORD)*((BYTE*)(buf+32-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+32-13)+2)<<16)|((WORD)*((BYTE*)(buf+32-13)+1)<<8)|*(BYTE*)(buf+32-13));
  9794  0002EC  51B8               	movf	pf_mount@tsect& (0+255),w,b
  9795  0002EE  11B9               	iorwf	(pf_mount@tsect+1)& (0+255),w,b
  9796  0002F0  11BA               	iorwf	(pf_mount@tsect+2)& (0+255),w,b
  9797  0002F2  11BB               	iorwf	(pf_mount@tsect+3)& (0+255),w,b
  9798  0002F4  A4D8               	btfss	status,2,c
  9799  0002F6  D039               	goto	l781
  9800                           
  9801                           ; BSR set to: 0
  9802  0002F8  51A8               	movf	(pf_mount@buf+20)& (0+255),w,b
  9803  0002FA  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
  9804  0002FC  6B7E               	clrf	??_pf_mount& (0+255),b
  9805  0002FE  C0A9  F080         	movff	pf_mount@buf+21,??_pf_mount+2
  9806  000302  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9807  000304  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9808  000306  6B83               	clrf	(??_pf_mount+5)& (0+255),b
  9809  000308  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
  9810  00030C  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
  9811  000310  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9812  000312  6B80               	clrf	(??_pf_mount+2)& (0+255),b
  9813  000314  C0AA  F084         	movff	pf_mount@buf+22,??_pf_mount+6
  9814  000318  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9815  00031A  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9816  00031C  6B87               	clrf	(??_pf_mount+9)& (0+255),b
  9817  00031E  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
  9818  000322  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9819  000324  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9820  000326  6B84               	clrf	(??_pf_mount+6)& (0+255),b
  9821  000328  5180               	movf	(??_pf_mount+2)& (0+255),w,b
  9822  00032A  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9823  00032C  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9824  00032E  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9825  000330  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9826  000332  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9827  000334  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9828  000336  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9829  000338  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9830  00033A  5183               	movf	(??_pf_mount+5)& (0+255),w,b
  9831  00033C  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9832  00033E  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9833  000340  517E               	movf	??_pf_mount& (0+255),w,b
  9834  000342  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9835  000344  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
  9836  000346  517F               	movf	(??_pf_mount+1)& (0+255),w,b
  9837  000348  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9838  00034A  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
  9839  00034C  0E00               	movlw	0
  9840  00034E  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9841  000350  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
  9842  000352  0E00               	movlw	0
  9843  000354  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9844  000356  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
  9845  000358  51A7               	movf	(pf_mount@buf+19)& (0+255),w,b
  9846  00035A  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9847  00035C  6FB8               	movwf	pf_mount@tsect& (0+255),b
  9848  00035E  518D               	movf	(??_pf_mount+15)& (0+255),w,b
  9849  000360  6FB9               	movwf	(pf_mount@tsect+1)& (0+255),b
  9850  000362  518E               	movf	(??_pf_mount+16)& (0+255),w,b
  9851  000364  6FBA               	movwf	(pf_mount@tsect+2)& (0+255),b
  9852  000366  518F               	movf	(??_pf_mount+17)& (0+255),w,b
  9853  000368  6FBB               	movwf	(pf_mount@tsect+3)& (0+255),b
  9854  00036A                     l781:
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;pff.c: 795: mclst = (tsect
  9858                           ;pff.c: 796: - (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYTE*)(buf+14-13)) - fs
      +                          ize - fs->n_rootdir / 16
  9859                           ;pff.c: 797: ) / fs->csize + 2;
  9860                           
  9861                           ; BSR set to: 0
  9862  00036A  EE20 F004          	lfsr	2,4
  9863  00036E  517C               	movf	pf_mount@fs& (0+255),w,b
  9864  000370  26D9               	addwf	fsr2l,f,c
  9865  000372  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9866  000374  22DA               	addwfc	fsr2h,f,c
  9867  000376  CFDE F07E          	movff	postinc2,??_pf_mount
  9868  00037A  CFDD F07F          	movff	postdec2,??_pf_mount+1
  9869  00037E  0E04               	movlw	4
  9870  000380  6F80               	movwf	(??_pf_mount+2)& (0+255),b
  9871  000382                     u8085:
  9872  000382  90D8               	bcf	status,0,c
  9873  000384  337F               	rrcf	(??_pf_mount+1)& (0+255),f,b
  9874  000386  337E               	rrcf	??_pf_mount& (0+255),f,b
  9875  000388  2F80               	decfsz	(??_pf_mount+2)& (0+255),f,b
  9876  00038A  D7FB               	goto	u8085
  9877  00038C  5195               	movf	(pf_mount@buf+1)& (0+255),w,b
  9878  00038E  C096  F081         	movff	pf_mount@buf+2,??_pf_mount+3
  9879  000392  6B82               	clrf	(??_pf_mount+4)& (0+255),b
  9880  000394  C081  F082         	movff	??_pf_mount+3,??_pf_mount+4
  9881  000398  6B81               	clrf	(??_pf_mount+3)& (0+255),b
  9882  00039A  1381               	iorwf	(??_pf_mount+3)& (0+255),f,b
  9883  00039C  0E00               	movlw	0
  9884  00039E  1382               	iorwf	(??_pf_mount+4)& (0+255),f,b
  9885  0003A0  5181               	movf	(??_pf_mount+3)& (0+255),w,b
  9886  0003A2  257E               	addwf	??_pf_mount& (0+255),w,b
  9887  0003A4  6F83               	movwf	(??_pf_mount+5)& (0+255),b
  9888  0003A6  5182               	movf	(??_pf_mount+4)& (0+255),w,b
  9889  0003A8  217F               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9890  0003AA  6F84               	movwf	(??_pf_mount+6)& (0+255),b
  9891  0003AC  6B85               	clrf	(??_pf_mount+7)& (0+255),b
  9892  0003AE  B0D8               	btfsc	status,0,c
  9893  0003B0  2B85               	incf	(??_pf_mount+7)& (0+255),f,b
  9894  0003B2  6B86               	clrf	(??_pf_mount+8)& (0+255),b
  9895  0003B4  51C4               	movf	pf_mount@fsize& (0+255),w,b
  9896  0003B6  2583               	addwf	(??_pf_mount+5)& (0+255),w,b
  9897  0003B8  6F87               	movwf	(??_pf_mount+9)& (0+255),b
  9898  0003BA  51C5               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9899  0003BC  2184               	addwfc	(??_pf_mount+6)& (0+255),w,b
  9900  0003BE  6F88               	movwf	(??_pf_mount+10)& (0+255),b
  9901  0003C0  51C6               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9902  0003C2  2185               	addwfc	(??_pf_mount+7)& (0+255),w,b
  9903  0003C4  6F89               	movwf	(??_pf_mount+11)& (0+255),b
  9904  0003C6  51C7               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9905  0003C8  2186               	addwfc	(??_pf_mount+8)& (0+255),w,b
  9906  0003CA  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
  9907  0003CC  1F87               	comf	(??_pf_mount+9)& (0+255),f,b
  9908  0003CE  1F88               	comf	(??_pf_mount+10)& (0+255),f,b
  9909  0003D0  1F89               	comf	(??_pf_mount+11)& (0+255),f,b
  9910  0003D2  1F8A               	comf	(??_pf_mount+12)& (0+255),f,b
  9911  0003D4  2B87               	incf	(??_pf_mount+9)& (0+255),f,b
  9912  0003D6  0E00               	movlw	0
  9913  0003D8  2388               	addwfc	(??_pf_mount+10)& (0+255),f,b
  9914  0003DA  2389               	addwfc	(??_pf_mount+11)& (0+255),f,b
  9915  0003DC  238A               	addwfc	(??_pf_mount+12)& (0+255),f,b
  9916  0003DE  51B8               	movf	pf_mount@tsect& (0+255),w,b
  9917  0003E0  2587               	addwf	(??_pf_mount+9)& (0+255),w,b
  9918  0003E2  6E1A               	movwf	___lldiv@dividend,c
  9919  0003E4  51B9               	movf	(pf_mount@tsect+1)& (0+255),w,b
  9920  0003E6  2188               	addwfc	(??_pf_mount+10)& (0+255),w,b
  9921  0003E8  6E1B               	movwf	___lldiv@dividend+1,c
  9922  0003EA  51BA               	movf	(pf_mount@tsect+2)& (0+255),w,b
  9923  0003EC  2189               	addwfc	(??_pf_mount+11)& (0+255),w,b
  9924  0003EE  6E1C               	movwf	___lldiv@dividend+2,c
  9925  0003F0  51BB               	movf	(pf_mount@tsect+3)& (0+255),w,b
  9926  0003F2  218A               	addwfc	(??_pf_mount+12)& (0+255),w,b
  9927  0003F4  6E1D               	movwf	___lldiv@dividend+3,c
  9928  0003F6  EE20 F002          	lfsr	2,2
  9929  0003FA  517C               	movf	pf_mount@fs& (0+255),w,b
  9930  0003FC  26D9               	addwf	fsr2l,f,c
  9931  0003FE  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9932  000400  22DA               	addwfc	fsr2h,f,c
  9933  000402  50DF               	movf	indf2,w,c
  9934  000404  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
  9935  000406  518B               	movf	(??_pf_mount+13)& (0+255),w,b
  9936  000408  6E1E               	movwf	___lldiv@divisor,c
  9937  00040A  6A1F               	clrf	___lldiv@divisor+1,c
  9938  00040C  6A20               	clrf	___lldiv@divisor+2,c
  9939  00040E  6A21               	clrf	___lldiv@divisor+3,c
  9940  000410  ECFD  F015         	call	___lldiv	;wreg free
  9941  000414  0E02               	movlw	2
  9942  000416  241A               	addwf	?___lldiv,w,c
  9943  000418  0100               	movlb	0	; () banked
  9944  00041A  6FBC               	movwf	pf_mount@mclst& (0+255),b
  9945  00041C  0E00               	movlw	0
  9946  00041E  201B               	addwfc	?___lldiv+1,w,c
  9947  000420  6FBD               	movwf	(pf_mount@mclst+1)& (0+255),b
  9948  000422  0E00               	movlw	0
  9949  000424  201C               	addwfc	?___lldiv+2,w,c
  9950  000426  6FBE               	movwf	(pf_mount@mclst+2)& (0+255),b
  9951  000428  0E00               	movlw	0
  9952  00042A  201D               	addwfc	?___lldiv+3,w,c
  9953  00042C  6FBF               	movwf	(pf_mount@mclst+3)& (0+255),b
  9954                           
  9955                           ; BSR set to: 0
  9956                           ;pff.c: 798: fs->n_fatent = (DWORD)mclst;
  9957  00042E  EE20 F006          	lfsr	2,6
  9958  000432  517C               	movf	pf_mount@fs& (0+255),w,b
  9959  000434  26D9               	addwf	fsr2l,f,c
  9960  000436  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
  9961  000438  22DA               	addwfc	fsr2h,f,c
  9962  00043A  C0BC  FFDE         	movff	pf_mount@mclst,postinc2
  9963  00043E  C0BD  FFDE         	movff	pf_mount@mclst+1,postinc2
  9964  000442  C0BE  FFDE         	movff	pf_mount@mclst+2,postinc2
  9965  000446  C0BF  FFDE         	movff	pf_mount@mclst+3,postinc2
  9966                           
  9967                           ; BSR set to: 0
  9968                           ;pff.c: 801: if (1 && mclst < 0xFF7)
  9969  00044A  0E00               	movlw	0
  9970  00044C  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9971                           
  9972                           ; BSR set to: 0
  9973  00044E  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9974  000450  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9975  000452  E108               	bnz	l7267
  9976  000454  0EF7               	movlw	247
  9977  000456  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
  9978  000458  0E0F               	movlw	15
  9979  00045A  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9980  00045C  B0D8               	btfsc	status,0,c
  9981  00045E  D002               	goto	l782
  9982                           
  9983                           ; BSR set to: 0
  9984                           ;pff.c: 802: fmt = 1;
  9985  000460  0E01               	movlw	1
  9986  000462  6FC8               	movwf	pf_mount@fmt& (0+255),b
  9987  000464                     l782:
  9988  000464                     l7267:
  9989                           
  9990                           ; BSR set to: 0
  9991  000464  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
  9992  000466  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  9993  000468  E106               	bnz	u8100
  9994  00046A  0EF8               	movlw	248
  9995  00046C  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
  9996  00046E  0E0F               	movlw	15
  9997  000470  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  9998  000472  A0D8               	btfss	status,0,c
  9999  000474  D00B               	goto	l783
 10000  000476                     u8100:
 10001                           
 10002                           ; BSR set to: 0
 10003  000476  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
 10004  000478  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
 10005  00047A  E108               	bnz	l7273
 10006  00047C  0EF7               	movlw	247
 10007  00047E  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
 10008  000480  0EFF               	movlw	255
 10009  000482  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
 10010  000484  B0D8               	btfsc	status,0,c
 10011  000486  D002               	goto	l783
 10012                           
 10013                           ; BSR set to: 0
 10014                           ;pff.c: 804: fmt = 2;
 10015  000488  0E02               	movlw	2
 10016  00048A  6FC8               	movwf	pf_mount@fmt& (0+255),b
 10017  00048C                     l783:
 10018  00048C                     l7273:
 10019                           
 10020                           ; BSR set to: 0
 10021  00048C  51BF               	movf	(pf_mount@mclst+3)& (0+255),w,b
 10022  00048E  11BE               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
 10023  000490  E106               	bnz	u8120
 10024  000492  0EF7               	movlw	247
 10025  000494  5DBC               	subwf	pf_mount@mclst& (0+255),w,b
 10026  000496  0EFF               	movlw	255
 10027  000498  59BD               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
 10028  00049A  A0D8               	btfss	status,0,c
 10029  00049C  D002               	goto	l784
 10030  00049E                     u8120:
 10031                           
 10032                           ; BSR set to: 0
 10033                           ;pff.c: 806: fmt = 3;
 10034  00049E  0E03               	movlw	3
 10035  0004A0  6FC8               	movwf	pf_mount@fmt& (0+255),b
 10036  0004A2                     l784:
 10037                           
 10038                           ; BSR set to: 0
 10039                           ;pff.c: 807: if (!fmt) return FR_NO_FILESYSTEM;
 10040  0004A2  51C8               	movf	pf_mount@fmt& (0+255),w,b
 10041  0004A4  A4D8               	btfss	status,2,c
 10042  0004A6  D002               	goto	l785
 10043                           
 10044                           ; BSR set to: 0
 10045  0004A8  0E06               	movlw	6
 10046                           
 10047                           ; BSR set to: 0
 10048  0004AA  0012               	return	
 10049  0004AC                     l785:
 10050                           
 10051                           ; BSR set to: 0
 10052                           ;pff.c: 810: if (0 || (1 && fmt == 3))
 10053                           
 10054                           ; BSR set to: 0
 10055  0004AC  C07C  FFD9         	movff	pf_mount@fs,fsr2l
 10056  0004B0  C07D  FFDA         	movff	pf_mount@fs+1,fsr2h
 10057  0004B4  C0C8  FFDF         	movff	pf_mount@fmt,indf2
 10058                           
 10059                           ; BSR set to: 0
 10060  0004B8  0E03               	movlw	3
 10061  0004BA  19C8               	xorwf	pf_mount@fmt& (0+255),w,b
 10062  0004BC  A4D8               	btfss	status,2,c
 10063  0004BE  D048               	goto	l786
 10064                           
 10065                           ; BSR set to: 0
 10066                           ;pff.c: 811: fs->dirbase = (DWORD)(((DWORD)*((BYTE*)(buf+(44-13))+3)<<24)|((DWORD)*((BYT
      +                          E*)(buf+(44-13))+2)<<16)|((WORD)*((BYTE*)(buf+(44-13))+1)<<8)|*(BYTE*)(buf+(44-13)));
 10067                           
 10068                           ; BSR set to: 0
 10069  0004C0  51B4               	movf	(pf_mount@buf+32)& (0+255),w,b
 10070  0004C2  6F7F               	movwf	(??_pf_mount+1)& (0+255),b
 10071  0004C4  6B7E               	clrf	??_pf_mount& (0+255),b
 10072  0004C6  C0B5  F080         	movff	pf_mount@buf+33,??_pf_mount+2
 10073  0004CA  6B81               	clrf	(??_pf_mount+3)& (0+255),b
 10074  0004CC  6B82               	clrf	(??_pf_mount+4)& (0+255),b
 10075  0004CE  6B83               	clrf	(??_pf_mount+5)& (0+255),b
 10076  0004D0  C081  F083         	movff	??_pf_mount+3,??_pf_mount+5
 10077  0004D4  C080  F082         	movff	??_pf_mount+2,??_pf_mount+4
 10078  0004D8  6B81               	clrf	(??_pf_mount+3)& (0+255),b
 10079  0004DA  6B80               	clrf	(??_pf_mount+2)& (0+255),b
 10080  0004DC  C0B6  F084         	movff	pf_mount@buf+34,??_pf_mount+6
 10081  0004E0  6B85               	clrf	(??_pf_mount+7)& (0+255),b
 10082  0004E2  6B86               	clrf	(??_pf_mount+8)& (0+255),b
 10083  0004E4  6B87               	clrf	(??_pf_mount+9)& (0+255),b
 10084  0004E6  C084  F087         	movff	??_pf_mount+6,??_pf_mount+9
 10085  0004EA  6B86               	clrf	(??_pf_mount+8)& (0+255),b
 10086  0004EC  6B85               	clrf	(??_pf_mount+7)& (0+255),b
 10087  0004EE  6B84               	clrf	(??_pf_mount+6)& (0+255),b
 10088  0004F0  5180               	movf	(??_pf_mount+2)& (0+255),w,b
 10089  0004F2  1184               	iorwf	(??_pf_mount+6)& (0+255),w,b
 10090  0004F4  6F88               	movwf	(??_pf_mount+10)& (0+255),b
 10091  0004F6  5181               	movf	(??_pf_mount+3)& (0+255),w,b
 10092  0004F8  1185               	iorwf	(??_pf_mount+7)& (0+255),w,b
 10093  0004FA  6F89               	movwf	(??_pf_mount+11)& (0+255),b
 10094  0004FC  5182               	movf	(??_pf_mount+4)& (0+255),w,b
 10095  0004FE  1186               	iorwf	(??_pf_mount+8)& (0+255),w,b
 10096  000500  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
 10097  000502  5183               	movf	(??_pf_mount+5)& (0+255),w,b
 10098  000504  1187               	iorwf	(??_pf_mount+9)& (0+255),w,b
 10099  000506  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
 10100  000508  517E               	movf	??_pf_mount& (0+255),w,b
 10101  00050A  1188               	iorwf	(??_pf_mount+10)& (0+255),w,b
 10102  00050C  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
 10103  00050E  517F               	movf	(??_pf_mount+1)& (0+255),w,b
 10104  000510  1189               	iorwf	(??_pf_mount+11)& (0+255),w,b
 10105  000512  6F8D               	movwf	(??_pf_mount+15)& (0+255),b
 10106  000514  0E00               	movlw	0
 10107  000516  118A               	iorwf	(??_pf_mount+12)& (0+255),w,b
 10108  000518  6F8E               	movwf	(??_pf_mount+16)& (0+255),b
 10109  00051A  0E00               	movlw	0
 10110  00051C  118B               	iorwf	(??_pf_mount+13)& (0+255),w,b
 10111  00051E  6F8F               	movwf	(??_pf_mount+17)& (0+255),b
 10112  000520  51B3               	movf	(pf_mount@buf+31)& (0+255),w,b
 10113  000522  118C               	iorwf	(??_pf_mount+14)& (0+255),w,b
 10114  000524  6F90               	movwf	(??_pf_mount+18)& (0+255),b
 10115  000526  518D               	movf	(??_pf_mount+15)& (0+255),w,b
 10116  000528  6F91               	movwf	(??_pf_mount+19)& (0+255),b
 10117  00052A  518E               	movf	(??_pf_mount+16)& (0+255),w,b
 10118  00052C  6F92               	movwf	(??_pf_mount+20)& (0+255),b
 10119  00052E  518F               	movf	(??_pf_mount+17)& (0+255),w,b
 10120  000530  6F93               	movwf	(??_pf_mount+21)& (0+255),b
 10121  000532  EE20 F00E          	lfsr	2,14
 10122  000536  517C               	movf	pf_mount@fs& (0+255),w,b
 10123  000538  26D9               	addwf	fsr2l,f,c
 10124  00053A  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10125  00053C  22DA               	addwfc	fsr2h,f,c
 10126  00053E  C090  FFDE         	movff	??_pf_mount+18,postinc2
 10127  000542  C091  FFDE         	movff	??_pf_mount+19,postinc2
 10128  000546  C092  FFDE         	movff	??_pf_mount+20,postinc2
 10129  00054A  C093  FFDE         	movff	??_pf_mount+21,postinc2
 10130  00054E  D028               	goto	l789
 10131  000550                     l786:
 10132                           
 10133                           ; BSR set to: 0
 10134                           ;pff.c: 812: else
 10135                           ;pff.c: 813: fs->dirbase = fs->fatbase + fsize;
 10136                           
 10137                           ; BSR set to: 0
 10138  000550  EE20 F00A          	lfsr	2,10
 10139  000554  517C               	movf	pf_mount@fs& (0+255),w,b
 10140  000556  26D9               	addwf	fsr2l,f,c
 10141  000558  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10142  00055A  22DA               	addwfc	fsr2h,f,c
 10143  00055C  CFDE F07E          	movff	postinc2,??_pf_mount
 10144  000560  CFDE F07F          	movff	postinc2,??_pf_mount+1
 10145  000564  CFDE F080          	movff	postinc2,??_pf_mount+2
 10146  000568  CFDE F081          	movff	postinc2,??_pf_mount+3
 10147  00056C  51C4               	movf	pf_mount@fsize& (0+255),w,b
 10148  00056E  257E               	addwf	??_pf_mount& (0+255),w,b
 10149  000570  6F82               	movwf	(??_pf_mount+4)& (0+255),b
 10150  000572  51C5               	movf	(pf_mount@fsize+1)& (0+255),w,b
 10151  000574  217F               	addwfc	(??_pf_mount+1)& (0+255),w,b
 10152  000576  6F83               	movwf	(??_pf_mount+5)& (0+255),b
 10153  000578  51C6               	movf	(pf_mount@fsize+2)& (0+255),w,b
 10154  00057A  2180               	addwfc	(??_pf_mount+2)& (0+255),w,b
 10155  00057C  6F84               	movwf	(??_pf_mount+6)& (0+255),b
 10156  00057E  51C7               	movf	(pf_mount@fsize+3)& (0+255),w,b
 10157  000580  2181               	addwfc	(??_pf_mount+3)& (0+255),w,b
 10158  000582  6F85               	movwf	(??_pf_mount+7)& (0+255),b
 10159  000584  EE20 F00E          	lfsr	2,14
 10160  000588  517C               	movf	pf_mount@fs& (0+255),w,b
 10161  00058A  26D9               	addwf	fsr2l,f,c
 10162  00058C  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10163  00058E  22DA               	addwfc	fsr2h,f,c
 10164  000590  C082  FFDE         	movff	??_pf_mount+4,postinc2
 10165  000594  C083  FFDE         	movff	??_pf_mount+5,postinc2
 10166  000598  C084  FFDE         	movff	??_pf_mount+6,postinc2
 10167  00059C  C085  FFDE         	movff	??_pf_mount+7,postinc2
 10168  0005A0                     l789:
 10169                           
 10170                           ; BSR set to: 0
 10171                           ;pff.c: 814: fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;
 10172  0005A0  EE20 F00A          	lfsr	2,10
 10173  0005A4  517C               	movf	pf_mount@fs& (0+255),w,b
 10174  0005A6  26D9               	addwf	fsr2l,f,c
 10175  0005A8  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10176  0005AA  22DA               	addwfc	fsr2h,f,c
 10177  0005AC  CFDE F07E          	movff	postinc2,??_pf_mount
 10178  0005B0  CFDE F07F          	movff	postinc2,??_pf_mount+1
 10179  0005B4  CFDE F080          	movff	postinc2,??_pf_mount+2
 10180  0005B8  CFDE F081          	movff	postinc2,??_pf_mount+3
 10181  0005BC  EE20 F004          	lfsr	2,4
 10182  0005C0  517C               	movf	pf_mount@fs& (0+255),w,b
 10183  0005C2  26D9               	addwf	fsr2l,f,c
 10184  0005C4  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10185  0005C6  22DA               	addwfc	fsr2h,f,c
 10186  0005C8  CFDE F082          	movff	postinc2,??_pf_mount+4
 10187  0005CC  CFDD F083          	movff	postdec2,??_pf_mount+5
 10188  0005D0  0E04               	movlw	4
 10189  0005D2  6F84               	movwf	(??_pf_mount+6)& (0+255),b
 10190  0005D4                     u8155:
 10191  0005D4  90D8               	bcf	status,0,c
 10192  0005D6  3383               	rrcf	(??_pf_mount+5)& (0+255),f,b
 10193  0005D8  3382               	rrcf	(??_pf_mount+4)& (0+255),f,b
 10194  0005DA  2F84               	decfsz	(??_pf_mount+6)& (0+255),f,b
 10195  0005DC  D7FB               	goto	u8155
 10196  0005DE  5182               	movf	(??_pf_mount+4)& (0+255),w,b
 10197  0005E0  257E               	addwf	??_pf_mount& (0+255),w,b
 10198  0005E2  6F85               	movwf	(??_pf_mount+7)& (0+255),b
 10199  0005E4  5183               	movf	(??_pf_mount+5)& (0+255),w,b
 10200  0005E6  217F               	addwfc	(??_pf_mount+1)& (0+255),w,b
 10201  0005E8  6F86               	movwf	(??_pf_mount+8)& (0+255),b
 10202  0005EA  0E00               	movlw	0
 10203  0005EC  2180               	addwfc	(??_pf_mount+2)& (0+255),w,b
 10204  0005EE  6F87               	movwf	(??_pf_mount+9)& (0+255),b
 10205  0005F0  0E00               	movlw	0
 10206  0005F2  2181               	addwfc	(??_pf_mount+3)& (0+255),w,b
 10207  0005F4  6F88               	movwf	(??_pf_mount+10)& (0+255),b
 10208  0005F6  51C4               	movf	pf_mount@fsize& (0+255),w,b
 10209  0005F8  2585               	addwf	(??_pf_mount+7)& (0+255),w,b
 10210  0005FA  6F89               	movwf	(??_pf_mount+11)& (0+255),b
 10211  0005FC  51C5               	movf	(pf_mount@fsize+1)& (0+255),w,b
 10212  0005FE  2186               	addwfc	(??_pf_mount+8)& (0+255),w,b
 10213  000600  6F8A               	movwf	(??_pf_mount+12)& (0+255),b
 10214  000602  51C6               	movf	(pf_mount@fsize+2)& (0+255),w,b
 10215  000604  2187               	addwfc	(??_pf_mount+9)& (0+255),w,b
 10216  000606  6F8B               	movwf	(??_pf_mount+13)& (0+255),b
 10217  000608  51C7               	movf	(pf_mount@fsize+3)& (0+255),w,b
 10218  00060A  2188               	addwfc	(??_pf_mount+10)& (0+255),w,b
 10219  00060C  6F8C               	movwf	(??_pf_mount+14)& (0+255),b
 10220  00060E  EE20 F012          	lfsr	2,18
 10221  000612  517C               	movf	pf_mount@fs& (0+255),w,b
 10222  000614  26D9               	addwf	fsr2l,f,c
 10223  000616  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10224  000618  22DA               	addwfc	fsr2h,f,c
 10225  00061A  C089  FFDE         	movff	??_pf_mount+11,postinc2
 10226  00061E  C08A  FFDE         	movff	??_pf_mount+12,postinc2
 10227  000622  C08B  FFDE         	movff	??_pf_mount+13,postinc2
 10228  000626  C08C  FFDE         	movff	??_pf_mount+14,postinc2
 10229                           
 10230                           ;pff.c: 816: fs->flag = 0;
 10231  00062A  EE20 F001          	lfsr	2,1
 10232  00062E  517C               	movf	pf_mount@fs& (0+255),w,b
 10233  000630  26D9               	addwf	fsr2l,f,c
 10234  000632  517D               	movf	(pf_mount@fs+1)& (0+255),w,b
 10235  000634  22DA               	addwfc	fsr2h,f,c
 10236  000636  0E00               	movlw	0
 10237  000638  6EDF               	movwf	indf2,c
 10238                           
 10239                           ; BSR set to: 0
 10240                           ;pff.c: 817: FatFs = fs;
 10241  00063A  C07C  F039         	movff	pf_mount@fs,_FatFs
 10242  00063E  C07D  F03A         	movff	pf_mount@fs+1,_FatFs+1
 10243                           
 10244                           ; BSR set to: 0
 10245                           ;pff.c: 819: return FR_OK;
 10246  000642  0E00               	movlw	0
 10247  000644  0012               	return	
 10248  000646                     __end_of_pf_mount:
 10249                           	opt stack 0
 10250                           tosu	equ	0xFFF
 10251                           tosh	equ	0xFFE
 10252                           tosl	equ	0xFFD
 10253                           pclath	equ	0xFFA
 10254                           tblptru	equ	0xFF8
 10255                           tblptrh	equ	0xFF7
 10256                           tblptrl	equ	0xFF6
 10257                           tablat	equ	0xFF5
 10258                           prodh	equ	0xFF4
 10259                           prodl	equ	0xFF3
 10260                           intcon	equ	0xFF2
 10261                           intcon2	equ	0xFF1
 10262                           intcon3	equ	0xFF0
 10263                           postinc0	equ	0xFEE
 10264                           wreg	equ	0xFE8
 10265                           indf1	equ	0xFE7
 10266                           postinc1	equ	0xFE6
 10267                           postdec1	equ	0xFE5
 10268                           fsr1h	equ	0xFE2
 10269                           fsr1l	equ	0xFE1
 10270                           indf2	equ	0xFDF
 10271                           postinc2	equ	0xFDE
 10272                           postdec2	equ	0xFDD
 10273                           plusw2	equ	0xFDB
 10274                           fsr2h	equ	0xFDA
 10275                           fsr2l	equ	0xFD9
 10276                           status	equ	0xFD8
 10277                           
 10278 ;; *************** function _disk_initialize *****************
 10279 ;; Defined at:
 10280 ;;		line 54 in file "bibliotecas/diskio.c"
 10281 ;; Parameters:    Size  Location     Type
 10282 ;;		None
 10283 ;; Auto vars:     Size  Location     Type
 10284 ;;  count2          2    7[BANK0 ] int 
 10285 ;;  count1          2    4[BANK0 ] int 
 10286 ;;  i               2    2[BANK0 ] int 
 10287 ;;  buff            1    9[BANK0 ] unsigned char 
 10288 ;;  stat            1    6[BANK0 ] unsigned char 
 10289 ;; Return value:  Size  Location     Type
 10290 ;;                  1    wreg      unsigned char 
 10291 ;; Registers used:
 10292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10293 ;; Tracked objects:
 10294 ;;		On entry : 0/0
 10295 ;;		On exit  : 0/0
 10296 ;;		Unchanged: 0/0
 10297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10298 ;;      Params:         0       0       0       0       0       0       0       0       0
 10299 ;;      Locals:         0       8       0       0       0       0       0       0       0
 10300 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10301 ;;      Totals:         0      10       0       0       0       0       0       0       0
 10302 ;;Total ram usage:       10 bytes
 10303 ;; Hardware stack levels used:    1
 10304 ;; Hardware stack levels required when called:    5
 10305 ;; This function calls:
 10306 ;;		_command
 10307 ;;		_dummy_clocks
 10308 ;;		_escreve_cmd_lcd
 10309 ;;		_escreve_frase_ram_lcd
 10310 ;;		_posicao_cursor_lcd
 10311 ;;		_proceed
 10312 ;;		_reset
 10313 ;;		_response
 10314 ;; This function is called by:
 10315 ;;		_pf_mount
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text40
 10320  0015C2                     __ptext40:
 10321                           	opt stack 0
 10322  0015C2                     _disk_initialize:
 10323                           	opt stack 22
 10324                           
 10325                           ;diskio.c: 56: DSTATUS stat;
 10326                           ;diskio.c: 57: int i = 0, count1 = 0, count2 = 0;
 10327                           
 10328                           ;incstack = 0
 10329  0015C2  0E00               	movlw	0
 10330  0015C4  0100               	movlb	0	; () banked
 10331  0015C6  6F63               	movwf	(disk_initialize@i+1)& (0+255),b
 10332  0015C8  0E00               	movlw	0
 10333  0015CA  6F62               	movwf	disk_initialize@i& (0+255),b
 10334  0015CC  0E00               	movlw	0
 10335  0015CE  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
 10336  0015D0  0E00               	movlw	0
 10337  0015D2  6F64               	movwf	disk_initialize@count1& (0+255),b
 10338  0015D4  0E00               	movlw	0
 10339  0015D6  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
 10340  0015D8  0E00               	movlw	0
 10341  0015DA  6F67               	movwf	disk_initialize@count2& (0+255),b
 10342                           
 10343                           ; BSR set to: 0
 10344                           ;diskio.c: 58: unsigned char buff;
 10345                           ;diskio.c: 59: reset();
 10346  0015DC  ECB9  F016         	call	_reset	;wreg free
 10347                           
 10348                           ;diskio.c: 60: _delay((unsigned long)((500)*(48000000/4000.0)));
 10349  0015E0  0E1F               	movlw	31
 10350  0015E2  0100               	movlb	0	; () banked
 10351  0015E4  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10352  0015E6  0E71               	movlw	113
 10353  0015E8  6F60               	movwf	??_disk_initialize& (0+255),b
 10354  0015EA  0E1E               	movlw	30
 10355  0015EC                     u9337:
 10356  0015EC  2EE8               	decfsz	wreg,f,c
 10357  0015EE  D7FE               	bra	u9337
 10358  0015F0  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10359  0015F2  D7FC               	bra	u9337
 10360  0015F4  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10361  0015F6  D7FA               	bra	u9337
 10362  0015F8  F000               	nop	
 10363                           
 10364                           ;diskio.c: 61: dummy_clocks(8);
 10365  0015FA  0E08               	movlw	8
 10366  0015FC  EC5A  F019         	call	_dummy_clocks
 10367                           
 10368                           ;diskio.c: 62: command(0X41, 0X00000000, 0XFF);
 10369  001600  0E00               	movlw	0
 10370  001602  6E1E               	movwf	command@arg,c
 10371  001604  0E00               	movlw	0
 10372  001606  6E1F               	movwf	command@arg+1,c
 10373  001608  0E00               	movlw	0
 10374  00160A  6E20               	movwf	command@arg+2,c
 10375  00160C  0E00               	movlw	0
 10376  00160E  6E21               	movwf	command@arg+3,c
 10377  001610  0EFF               	movlw	255
 10378  001612  6E22               	movwf	command@CRC,c
 10379  001614  0E41               	movlw	65
 10380  001616  EC36  F018         	call	_command
 10381                           
 10382                           ;diskio.c: 63: proceed();
 10383  00161A  EC58  F01A         	call	_proceed	;wreg free
 10384  00161E                     
 10385                           ;diskio.c: 65: buff = response();
 10386  00161E  EC4B  F01A         	call	_response	;wreg free
 10387  001622  0100               	movlb	0	; () banked
 10388  001624  6F69               	movwf	disk_initialize@buff& (0+255),b
 10389                           
 10390                           ; BSR set to: 0
 10391                           ;diskio.c: 66: }while(buff!=0x01);
 10392  001626  0569               	decf	disk_initialize@buff& (0+255),w,b
 10393  001628  A4D8               	btfss	status,2,c
 10394  00162A  D7F9               	goto	l266
 10395                           
 10396                           ; BSR set to: 0
 10397                           ;diskio.c: 68: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10398                           
 10399                           ; BSR set to: 0
 10400  00162C  0E3D               	movlw	61
 10401  00162E  0100               	movlb	0	; () banked
 10402  001630  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10403  001632  0EE1               	movlw	225
 10404  001634  6F60               	movwf	??_disk_initialize& (0+255),b
 10405  001636  0E3F               	movlw	63
 10406  001638                     u9347:
 10407  001638  2EE8               	decfsz	wreg,f,c
 10408  00163A  D7FE               	bra	u9347
 10409  00163C  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10410  00163E  D7FC               	bra	u9347
 10411  001640  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10412  001642  D7FA               	bra	u9347
 10413  001644  D000               	nop2	
 10414                           
 10415                           ;diskio.c: 69: proceed();
 10416  001646  EC58  F01A         	call	_proceed	;wreg free
 10417                           
 10418                           ;diskio.c: 70: if (buff == 0x01)
 10419  00164A  0100               	movlb	0	; () banked
 10420  00164C  0569               	decf	disk_initialize@buff& (0+255),w,b
 10421  00164E  A4D8               	btfss	status,2,c
 10422  001650  D096               	goto	l268
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;diskio.c: 71: {
 10426                           ;diskio.c: 73: _delay((unsigned long)((1)*(48000000/4000.0)));
 10427  001652  0E10               	movlw	16
 10428  001654  0100               	movlb	0	; () banked
 10429  001656  6F60               	movwf	??_disk_initialize& (0+255),b
 10430  001658  0E94               	movlw	148
 10431  00165A                     u9357:
 10432  00165A  2EE8               	decfsz	wreg,f,c
 10433  00165C  D7FE               	bra	u9357
 10434  00165E  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10435  001660  D7FC               	bra	u9357
 10436  001662  F000               	nop	
 10437                           
 10438                           ;diskio.c: 74: count1 = 0;
 10439  001664  0E00               	movlw	0
 10440  001666  0100               	movlb	0	; () banked
 10441  001668  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
 10442  00166A  0E00               	movlw	0
 10443  00166C  6F64               	movwf	disk_initialize@count1& (0+255),b
 10444  00166E                     
 10445                           ; BSR set to: 0
 10446                           ;diskio.c: 76: count2 = 0;
 10447                           
 10448                           ; BSR set to: 0
 10449  00166E  0E00               	movlw	0
 10450  001670  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
 10451  001672  0E00               	movlw	0
 10452  001674  6F67               	movwf	disk_initialize@count2& (0+255),b
 10453                           
 10454                           ; BSR set to: 0
 10455                           ;diskio.c: 77: dummy_clocks(8);
 10456  001676  0E08               	movlw	8
 10457  001678  EC5A  F019         	call	_dummy_clocks
 10458                           
 10459                           ;diskio.c: 78: command(0X77, 0X00000000, 0X95);
 10460  00167C  0E00               	movlw	0
 10461  00167E  6E1E               	movwf	command@arg,c
 10462  001680  0E00               	movlw	0
 10463  001682  6E1F               	movwf	command@arg+1,c
 10464  001684  0E00               	movlw	0
 10465  001686  6E20               	movwf	command@arg+2,c
 10466  001688  0E00               	movlw	0
 10467  00168A  6E21               	movwf	command@arg+3,c
 10468  00168C  0E95               	movlw	149
 10469  00168E  6E22               	movwf	command@CRC,c
 10470  001690  0E77               	movlw	119
 10471  001692  EC36  F018         	call	_command
 10472                           
 10473                           ;diskio.c: 79: buff = 0XFF;
 10474  001696  0100               	movlb	0	; () banked
 10475  001698  6969               	setf	disk_initialize@buff& (0+255),b
 10476  00169A                     
 10477                           ; BSR set to: 0
 10478                           ;diskio.c: 82: buff = response();
 10479                           
 10480                           ; BSR set to: 0
 10481  00169A  EC4B  F01A         	call	_response	;wreg free
 10482  00169E  0100               	movlb	0	; () banked
 10483  0016A0  6F69               	movwf	disk_initialize@buff& (0+255),b
 10484                           
 10485                           ; BSR set to: 0
 10486                           ;diskio.c: 83: count2++;
 10487  0016A2  4B67               	infsnz	disk_initialize@count2& (0+255),f,b
 10488  0016A4  2B68               	incf	(disk_initialize@count2+1)& (0+255),f,b
 10489                           
 10490                           ; BSR set to: 0
 10491                           ;diskio.c: 84: }while((buff!=0X01)&&(count2<10));
 10492  0016A6  0569               	decf	disk_initialize@buff& (0+255),w,b
 10493  0016A8  B4D8               	btfsc	status,2,c
 10494  0016AA  D008               	goto	u7710
 10495                           
 10496                           ; BSR set to: 0
 10497  0016AC  BF68               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
 10498  0016AE  D7F5               	goto	l270
 10499  0016B0  5168               	movf	(disk_initialize@count2+1)& (0+255),w,b
 10500  0016B2  E104               	bnz	l6967
 10501  0016B4  0E0A               	movlw	10
 10502  0016B6  5D67               	subwf	disk_initialize@count2& (0+255),w,b
 10503  0016B8  A0D8               	btfss	status,0,c
 10504  0016BA  D7EF               	goto	l270
 10505  0016BC                     u7710:
 10506  0016BC                     l6967:
 10507                           
 10508                           ; BSR set to: 0
 10509                           ;diskio.c: 86: _delay((unsigned long)((1)*(48000000/4000.0)));
 10510  0016BC  0E10               	movlw	16
 10511  0016BE  0100               	movlb	0	; () banked
 10512  0016C0  6F60               	movwf	??_disk_initialize& (0+255),b
 10513  0016C2  0E94               	movlw	148
 10514  0016C4                     u9367:
 10515  0016C4  2EE8               	decfsz	wreg,f,c
 10516  0016C6  D7FE               	bra	u9367
 10517  0016C8  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10518  0016CA  D7FC               	bra	u9367
 10519  0016CC  F000               	nop	
 10520                           
 10521                           ;diskio.c: 87: count2 = 0;
 10522  0016CE  0E00               	movlw	0
 10523  0016D0  0100               	movlb	0	; () banked
 10524  0016D2  6F68               	movwf	(disk_initialize@count2+1)& (0+255),b
 10525  0016D4  0E00               	movlw	0
 10526  0016D6  6F67               	movwf	disk_initialize@count2& (0+255),b
 10527                           
 10528                           ; BSR set to: 0
 10529                           ;diskio.c: 88: dummy_clocks(8);
 10530  0016D8  0E08               	movlw	8
 10531  0016DA  EC5A  F019         	call	_dummy_clocks
 10532                           
 10533                           ;diskio.c: 90: command(0X69,0X40000000,0X95);
 10534  0016DE  0E00               	movlw	0
 10535  0016E0  6E1E               	movwf	command@arg,c
 10536  0016E2  0E00               	movlw	0
 10537  0016E4  6E1F               	movwf	command@arg+1,c
 10538  0016E6  0E00               	movlw	0
 10539  0016E8  6E20               	movwf	command@arg+2,c
 10540  0016EA  0E40               	movlw	64
 10541  0016EC  6E21               	movwf	command@arg+3,c
 10542  0016EE  0E95               	movlw	149
 10543  0016F0  6E22               	movwf	command@CRC,c
 10544  0016F2  0E69               	movlw	105
 10545  0016F4  EC36  F018         	call	_command
 10546                           
 10547                           ;diskio.c: 91: buff = 0XFF;
 10548  0016F8  0100               	movlb	0	; () banked
 10549  0016FA  6969               	setf	disk_initialize@buff& (0+255),b
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;diskio.c: 93: proceed();
 10553  0016FC  EC58  F01A         	call	_proceed	;wreg free
 10554  001700                     
 10555                           ;diskio.c: 95: buff = response();
 10556  001700  EC4B  F01A         	call	_response	;wreg free
 10557  001704  0100               	movlb	0	; () banked
 10558  001706  6F69               	movwf	disk_initialize@buff& (0+255),b
 10559                           
 10560                           ; BSR set to: 0
 10561                           ;diskio.c: 96: count2++;
 10562  001708  4B67               	infsnz	disk_initialize@count2& (0+255),f,b
 10563  00170A  2B68               	incf	(disk_initialize@count2+1)& (0+255),f,b
 10564                           
 10565                           ; BSR set to: 0
 10566                           ;diskio.c: 97: }while((buff!=0X00) && count2<10);
 10567  00170C  5169               	movf	disk_initialize@buff& (0+255),w,b
 10568  00170E  B4D8               	btfsc	status,2,c
 10569  001710  D008               	goto	u7730
 10570                           
 10571                           ; BSR set to: 0
 10572  001712  BF68               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
 10573  001714  D7F5               	goto	l274
 10574  001716  5168               	movf	(disk_initialize@count2+1)& (0+255),w,b
 10575  001718  E104               	bnz	l6987
 10576  00171A  0E0A               	movlw	10
 10577  00171C  5D67               	subwf	disk_initialize@count2& (0+255),w,b
 10578  00171E  A0D8               	btfss	status,0,c
 10579  001720  D7EF               	goto	l274
 10580  001722                     u7730:
 10581  001722                     l6987:
 10582                           
 10583                           ; BSR set to: 0
 10584                           ;diskio.c: 98: }while(buff != 0X00);
 10585  001722  5169               	movf	disk_initialize@buff& (0+255),w,b
 10586  001724  A4D8               	btfss	status,2,c
 10587  001726  D7A3               	goto	l269
 10588                           
 10589                           ; BSR set to: 0
 10590                           ;diskio.c: 100: count1 = 0;
 10591                           
 10592                           ; BSR set to: 0
 10593  001728  0E00               	movlw	0
 10594  00172A  6F65               	movwf	(disk_initialize@count1+1)& (0+255),b
 10595  00172C  0E00               	movlw	0
 10596  00172E  6F64               	movwf	disk_initialize@count1& (0+255),b
 10597                           
 10598                           ; BSR set to: 0
 10599                           ;diskio.c: 102: _delay((unsigned long)((1)*(48000000/4000.0)));
 10600  001730  0E10               	movlw	16
 10601  001732  0100               	movlb	0	; () banked
 10602  001734  6F60               	movwf	??_disk_initialize& (0+255),b
 10603  001736  0E94               	movlw	148
 10604  001738                     u9377:
 10605  001738  2EE8               	decfsz	wreg,f,c
 10606  00173A  D7FE               	bra	u9377
 10607  00173C  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10608  00173E  D7FC               	bra	u9377
 10609  001740  F000               	nop	
 10610                           
 10611                           ;diskio.c: 103: stat = 0X00;
 10612  001742  0E00               	movlw	0
 10613  001744  0100               	movlb	0	; () banked
 10614  001746  6F66               	movwf	disk_initialize@stat& (0+255),b
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;diskio.c: 105: escreve_cmd_lcd(0b00000001);
 10618  001748  0E01               	movlw	1
 10619  00174A  ECB7  F015         	call	_escreve_cmd_lcd
 10620                           
 10621                           ;diskio.c: 106: posicao_cursor_lcd(1,0);
 10622  00174E  0E00               	movlw	0
 10623  001750  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10624  001752  0E01               	movlw	1
 10625  001754  EC64  F017         	call	_posicao_cursor_lcd
 10626                           
 10627                           ;diskio.c: 107: escreve_frase_ram_lcd("Cartão Aceito");
 10628  001758  0E2D               	movlw	low STR_2
 10629  00175A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10630  00175C  0E62               	movlw	high STR_2
 10631  00175E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10632  001760  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10633                           
 10634                           ;diskio.c: 108: _delay((unsigned long)((2000)*(48000000/4000.0)));
 10635  001764  0E7A               	movlw	122
 10636  001766  0100               	movlb	0	; () banked
 10637  001768  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10638  00176A  0EC1               	movlw	193
 10639  00176C  6F60               	movwf	??_disk_initialize& (0+255),b
 10640  00176E  0E81               	movlw	129
 10641  001770                     u9387:
 10642  001770  2EE8               	decfsz	wreg,f,c
 10643  001772  D7FE               	bra	u9387
 10644  001774  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10645  001776  D7FC               	bra	u9387
 10646  001778  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10647  00177A  D7FA               	bra	u9387
 10648  00177C  D021               	goto	L6
 10649  00177E                     l268:
 10650                           
 10651                           ;diskio.c: 110: else if(buff == 0x05)
 10652  00177E  0E05               	movlw	5
 10653  001780  0100               	movlb	0	; () banked
 10654  001782  1969               	xorwf	disk_initialize@buff& (0+255),w,b
 10655  001784  A4D8               	btfss	status,2,c
 10656  001786  D01D               	goto	l280
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;diskio.c: 111: {
 10660                           ;diskio.c: 112: stat = 0x01;
 10661  001788  0E01               	movlw	1
 10662  00178A  6F66               	movwf	disk_initialize@stat& (0+255),b
 10663                           
 10664                           ; BSR set to: 0
 10665                           ;diskio.c: 114: escreve_cmd_lcd(0b00000001);
 10666  00178C  0E01               	movlw	1
 10667  00178E  ECB7  F015         	call	_escreve_cmd_lcd
 10668                           
 10669                           ;diskio.c: 115: posicao_cursor_lcd(1,0);
 10670  001792  0E00               	movlw	0
 10671  001794  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10672  001796  0E01               	movlw	1
 10673  001798  EC64  F017         	call	_posicao_cursor_lcd
 10674                           
 10675                           ;diskio.c: 116: escreve_frase_ram_lcd("Error!!!");
 10676  00179C  0E5F               	movlw	low STR_3
 10677  00179E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10678  0017A0  0E62               	movlw	high STR_3
 10679  0017A2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10680  0017A4  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10681                           
 10682                           ;diskio.c: 118: _delay((unsigned long)((3000)*(48000000/4000.0)));
 10683  0017A8  0EB7               	movlw	183
 10684  0017AA  0100               	movlb	0	; () banked
 10685  0017AC  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10686  0017AE  0EA1               	movlw	161
 10687  0017B0  6F60               	movwf	??_disk_initialize& (0+255),b
 10688  0017B2  0EC3               	movlw	195
 10689  0017B4                     u9397:
 10690  0017B4  2EE8               	decfsz	wreg,f,c
 10691  0017B6  D7FE               	bra	u9397
 10692  0017B8  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10693  0017BA  D7FC               	bra	u9397
 10694  0017BC  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10695  0017BE  D7FA               	bra	u9397
 10696  0017C0                     L6:
 10697  0017C0  D000               	nop2	
 10698  0017C2                     l280:
 10699                           
 10700                           ;diskio.c: 119: }
 10701                           ;diskio.c: 120: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10702  0017C2  0E3D               	movlw	61
 10703  0017C4  0100               	movlb	0	; () banked
 10704  0017C6  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10705  0017C8  0EE1               	movlw	225
 10706  0017CA  6F60               	movwf	??_disk_initialize& (0+255),b
 10707  0017CC  0E3F               	movlw	63
 10708  0017CE                     u9407:
 10709  0017CE  2EE8               	decfsz	wreg,f,c
 10710  0017D0  D7FE               	bra	u9407
 10711  0017D2  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10712  0017D4  D7FC               	bra	u9407
 10713  0017D6  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10714  0017D8  D7FA               	bra	u9407
 10715  0017DA  D000               	nop2	
 10716                           
 10717                           ;diskio.c: 122: dummy_clocks(8);
 10718  0017DC  0E08               	movlw	8
 10719  0017DE  EC5A  F019         	call	_dummy_clocks
 10720                           
 10721                           ;diskio.c: 123: command(0X50,0X00000200,0XFF);
 10722  0017E2  0E00               	movlw	0
 10723  0017E4  6E1E               	movwf	command@arg,c
 10724  0017E6  0E02               	movlw	2
 10725  0017E8  6E1F               	movwf	command@arg+1,c
 10726  0017EA  0E00               	movlw	0
 10727  0017EC  6E20               	movwf	command@arg+2,c
 10728  0017EE  0E00               	movlw	0
 10729  0017F0  6E21               	movwf	command@arg+3,c
 10730  0017F2  0EFF               	movlw	255
 10731  0017F4  6E22               	movwf	command@CRC,c
 10732  0017F6  0E50               	movlw	80
 10733  0017F8  EC36  F018         	call	_command
 10734                           
 10735                           ;diskio.c: 124: proceed();
 10736  0017FC  EC58  F01A         	call	_proceed	;wreg free
 10737  001800                     
 10738                           ;diskio.c: 126: buff = response();
 10739  001800  EC4B  F01A         	call	_response	;wreg free
 10740  001804  0100               	movlb	0	; () banked
 10741  001806  6F69               	movwf	disk_initialize@buff& (0+255),b
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;diskio.c: 127: }while(buff!=0x00);
 10745  001808  5169               	movf	disk_initialize@buff& (0+255),w,b
 10746  00180A  A4D8               	btfss	status,2,c
 10747  00180C  D7F9               	goto	l281
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;diskio.c: 129: escreve_cmd_lcd(0b00000001);
 10751                           
 10752                           ; BSR set to: 0
 10753  00180E  0E01               	movlw	1
 10754  001810  ECB7  F015         	call	_escreve_cmd_lcd
 10755                           
 10756                           ;diskio.c: 130: posicao_cursor_lcd(1,0);
 10757  001814  0E00               	movlw	0
 10758  001816  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10759  001818  0E01               	movlw	1
 10760  00181A  EC64  F017         	call	_posicao_cursor_lcd
 10761                           
 10762                           ;diskio.c: 131: escreve_frase_ram_lcd("Bloco de 512");
 10763  00181E  0E48               	movlw	low STR_4
 10764  001820  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10765  001822  0E62               	movlw	high STR_4
 10766  001824  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10767  001826  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10768                           
 10769                           ;diskio.c: 132: posicao_cursor_lcd(2,0);
 10770  00182A  0E00               	movlw	0
 10771  00182C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10772  00182E  0E02               	movlw	2
 10773  001830  EC64  F017         	call	_posicao_cursor_lcd
 10774                           
 10775                           ;diskio.c: 133: escreve_frase_ram_lcd("Bytes criado!");
 10776  001834  0E1F               	movlw	low STR_5
 10777  001836  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10778  001838  0E62               	movlw	high STR_5
 10779  00183A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10780  00183C  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10781                           
 10782                           ;diskio.c: 134: _delay((unsigned long)((2000)*(48000000/4000.0)));
 10783  001840  0E7A               	movlw	122
 10784  001842  0100               	movlb	0	; () banked
 10785  001844  6F61               	movwf	(??_disk_initialize+1)& (0+255),b
 10786  001846  0EC1               	movlw	193
 10787  001848  6F60               	movwf	??_disk_initialize& (0+255),b
 10788  00184A  0E81               	movlw	129
 10789  00184C                     u9417:
 10790  00184C  2EE8               	decfsz	wreg,f,c
 10791  00184E  D7FE               	bra	u9417
 10792  001850  2F60               	decfsz	??_disk_initialize& (0+255),f,b
 10793  001852  D7FC               	bra	u9417
 10794  001854  2F61               	decfsz	(??_disk_initialize+1)& (0+255),f,b
 10795  001856  D7FA               	bra	u9417
 10796  001858  D000               	nop2	
 10797                           
 10798                           ;diskio.c: 135: escreve_cmd_lcd(0b00000001);
 10799  00185A  0E01               	movlw	1
 10800  00185C  ECB7  F015         	call	_escreve_cmd_lcd
 10801                           
 10802                           ;diskio.c: 136: posicao_cursor_lcd(1,0);
 10803  001860  0E00               	movlw	0
 10804  001862  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10805  001864  0E01               	movlw	1
 10806  001866  EC64  F017         	call	_posicao_cursor_lcd
 10807                           
 10808                           ;diskio.c: 137: escreve_frase_ram_lcd("Init OK");
 10809  00186A  0E70               	movlw	low STR_6
 10810  00186C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10811  00186E  0E62               	movlw	high STR_6
 10812  001870  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10813  001872  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
 10814                           
 10815                           ;diskio.c: 138: return stat;
 10816  001876  0100               	movlb	0	; () banked
 10817  001878  5166               	movf	disk_initialize@stat& (0+255),w,b
 10818  00187A  0012               	return	
 10819  00187C                     __end_of_disk_initialize:
 10820                           	opt stack 0
 10821                           tosu	equ	0xFFF
 10822                           tosh	equ	0xFFE
 10823                           tosl	equ	0xFFD
 10824                           pclath	equ	0xFFA
 10825                           tblptru	equ	0xFF8
 10826                           tblptrh	equ	0xFF7
 10827                           tblptrl	equ	0xFF6
 10828                           tablat	equ	0xFF5
 10829                           prodh	equ	0xFF4
 10830                           prodl	equ	0xFF3
 10831                           intcon	equ	0xFF2
 10832                           intcon2	equ	0xFF1
 10833                           intcon3	equ	0xFF0
 10834                           postinc0	equ	0xFEE
 10835                           wreg	equ	0xFE8
 10836                           indf1	equ	0xFE7
 10837                           postinc1	equ	0xFE6
 10838                           postdec1	equ	0xFE5
 10839                           fsr1h	equ	0xFE2
 10840                           fsr1l	equ	0xFE1
 10841                           indf2	equ	0xFDF
 10842                           postinc2	equ	0xFDE
 10843                           postdec2	equ	0xFDD
 10844                           plusw2	equ	0xFDB
 10845                           fsr2h	equ	0xFDA
 10846                           fsr2l	equ	0xFD9
 10847                           status	equ	0xFD8
 10848                           
 10849 ;; *************** function _reset *****************
 10850 ;; Defined at:
 10851 ;;		line 33 in file "bibliotecas/diskio.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;		None
 10854 ;; Auto vars:     Size  Location     Type
 10855 ;;  count           2   41[COMRAM] int 
 10856 ;;  i               2   39[COMRAM] int 
 10857 ;;  buff            1   43[COMRAM] unsigned char 
 10858 ;; Return value:  Size  Location     Type
 10859 ;;                  1    wreg      void 
 10860 ;; Registers used:
 10861 ;;		wreg, status,2, status,0, cstack
 10862 ;; Tracked objects:
 10863 ;;		On entry : 0/0
 10864 ;;		On exit  : 0/0
 10865 ;;		Unchanged: 0/0
 10866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10867 ;;      Params:         0       0       0       0       0       0       0       0       0
 10868 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10869 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10870 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10871 ;;Total ram usage:        7 bytes
 10872 ;; Hardware stack levels used:    1
 10873 ;; Hardware stack levels required when called:    4
 10874 ;; This function calls:
 10875 ;;		_command
 10876 ;;		_dummy_clocks
 10877 ;;		_proceed
 10878 ;; This function is called by:
 10879 ;;		_disk_initialize
 10880 ;; This function uses a non-reentrant model
 10881 ;;
 10882                           
 10883                           	psect	text41
 10884  002D72                     __ptext41:
 10885                           	opt stack 0
 10886  002D72                     _reset:
 10887                           	opt stack 22
 10888                           
 10889                           ;diskio.c: 35: int i = 0, count = 0;
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;incstack = 0
 10893  002D72  0E00               	movlw	0
 10894  002D74  6E29               	movwf	reset@i+1,c
 10895  002D76  0E00               	movlw	0
 10896  002D78  6E28               	movwf	reset@i,c
 10897  002D7A  0E00               	movlw	0
 10898  002D7C  6E2B               	movwf	reset@count+1,c
 10899  002D7E  0E00               	movlw	0
 10900  002D80  6E2A               	movwf	reset@count,c
 10901  002D82                     
 10902                           ;diskio.c: 39: dummy_clocks(8);
 10903  002D82  0E08               	movlw	8
 10904  002D84  EC5A  F019         	call	_dummy_clocks
 10905                           
 10906                           ;diskio.c: 40: command(0X40, 0X00000000, 0X95);
 10907  002D88  0E00               	movlw	0
 10908  002D8A  6E1E               	movwf	command@arg,c
 10909  002D8C  0E00               	movlw	0
 10910  002D8E  6E1F               	movwf	command@arg+1,c
 10911  002D90  0E00               	movlw	0
 10912  002D92  6E20               	movwf	command@arg+2,c
 10913  002D94  0E00               	movlw	0
 10914  002D96  6E21               	movwf	command@arg+3,c
 10915  002D98  0E95               	movlw	149
 10916  002D9A  6E22               	movwf	command@CRC,c
 10917  002D9C  0E40               	movlw	64
 10918  002D9E  EC36  F018         	call	_command
 10919                           
 10920                           ;diskio.c: 41: proceed();
 10921  002DA2  EC58  F01A         	call	_proceed	;wreg free
 10922  002DA6                     
 10923                           ;diskio.c: 43: count++;
 10924  002DA6  4A2A               	infsnz	reset@count,f,c
 10925  002DA8  2A2B               	incf	reset@count+1,f,c
 10926                           
 10927                           ;diskio.c: 44: }while((buff!=0X01) && (count<10) );
 10928  002DAA  042C               	decf	reset@buff,w,c
 10929  002DAC  B4D8               	btfsc	status,2,c
 10930  002DAE  D008               	goto	u7430
 10931  002DB0  BE2B               	btfsc	reset@count+1,7,c
 10932  002DB2  D7F9               	goto	l258
 10933  002DB4  502B               	movf	reset@count+1,w,c
 10934  002DB6  E104               	bnz	l6803
 10935  002DB8  0E0A               	movlw	10
 10936  002DBA  5C2A               	subwf	reset@count,w,c
 10937  002DBC  A0D8               	btfss	status,0,c
 10938  002DBE  D7F3               	goto	l258
 10939  002DC0                     u7430:
 10940  002DC0                     l6803:
 10941                           
 10942                           ;diskio.c: 45: count = 0;
 10943  002DC0  0E00               	movlw	0
 10944  002DC2  6E2B               	movwf	reset@count+1,c
 10945  002DC4  0E00               	movlw	0
 10946  002DC6  6E2A               	movwf	reset@count,c
 10947                           
 10948                           ;diskio.c: 46: }while(buff!=0X01);
 10949  002DC8  042C               	decf	reset@buff,w,c
 10950  002DCA  A4D8               	btfss	status,2,c
 10951  002DCC  D7DA               	goto	l257
 10952                           
 10953                           ;diskio.c: 50: _delay((unsigned long)((2000)*(48000000/4000.0)));
 10954  002DCE  0E7A               	movlw	122
 10955  002DD0  6E27               	movwf	(??_reset+1)& (0+255),c
 10956  002DD2  0EC1               	movlw	193
 10957  002DD4  6E26               	movwf	??_reset& (0+255),c
 10958  002DD6  0E82               	movlw	130
 10959  002DD8                     u9427:
 10960  002DD8  2EE8               	decfsz	wreg,f,c
 10961  002DDA  D7FE               	bra	u9427
 10962  002DDC  2E26               	decfsz	??_reset& (0+255),f,c
 10963  002DDE  D7FC               	bra	u9427
 10964  002DE0  2E27               	decfsz	(??_reset+1)& (0+255),f,c
 10965  002DE2  D7FA               	bra	u9427
 10966  002DE4  0012               	return	
 10967  002DE6                     __end_of_reset:
 10968                           	opt stack 0
 10969                           tosu	equ	0xFFF
 10970                           tosh	equ	0xFFE
 10971                           tosl	equ	0xFFD
 10972                           pclath	equ	0xFFA
 10973                           tblptru	equ	0xFF8
 10974                           tblptrh	equ	0xFF7
 10975                           tblptrl	equ	0xFF6
 10976                           tablat	equ	0xFF5
 10977                           prodh	equ	0xFF4
 10978                           prodl	equ	0xFF3
 10979                           intcon	equ	0xFF2
 10980                           intcon2	equ	0xFF1
 10981                           intcon3	equ	0xFF0
 10982                           postinc0	equ	0xFEE
 10983                           wreg	equ	0xFE8
 10984                           indf1	equ	0xFE7
 10985                           postinc1	equ	0xFE6
 10986                           postdec1	equ	0xFE5
 10987                           fsr1h	equ	0xFE2
 10988                           fsr1l	equ	0xFE1
 10989                           indf2	equ	0xFDF
 10990                           postinc2	equ	0xFDE
 10991                           postdec2	equ	0xFDD
 10992                           plusw2	equ	0xFDB
 10993                           fsr2h	equ	0xFDA
 10994                           fsr2l	equ	0xFD9
 10995                           status	equ	0xFD8
 10996                           
 10997 ;; *************** function _escreve_cmd_lcd *****************
 10998 ;; Defined at:
 10999 ;;		line 162 in file "bibliotecas/display_lcd.c"
 11000 ;; Parameters:    Size  Location     Type
 11001 ;;  comando         1    wreg     unsigned char 
 11002 ;; Auto vars:     Size  Location     Type
 11003 ;;  comando         1   27[COMRAM] unsigned char 
 11004 ;; Return value:  Size  Location     Type
 11005 ;;                  1    wreg      void 
 11006 ;; Registers used:
 11007 ;;		wreg, status,2, status,0, cstack
 11008 ;; Tracked objects:
 11009 ;;		On entry : 0/0
 11010 ;;		On exit  : 0/0
 11011 ;;		Unchanged: 0/0
 11012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11013 ;;      Params:         0       0       0       0       0       0       0       0       0
 11014 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11015 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11016 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11017 ;;Total ram usage:        1 bytes
 11018 ;; Hardware stack levels used:    1
 11019 ;; Hardware stack levels required when called:    3
 11020 ;; This function calls:
 11021 ;;		_delay
 11022 ;; This function is called by:
 11023 ;;		_inicializa_SPI
 11024 ;;		_disk_initialize
 11025 ;;		_init_lcd
 11026 ;;		_mensagem_inicial
 11027 ;;		_SDCard
 11028 ;;		_leitura_chave
 11029 ;;		_cria_caractere_lcd
 11030 ;; This function uses a non-reentrant model
 11031 ;;
 11032                           
 11033                           	psect	text42
 11034  002B6E                     __ptext42:
 11035                           	opt stack 0
 11036  002B6E                     _escreve_cmd_lcd:
 11037                           	opt stack 26
 11038                           
 11039                           ;incstack = 0
 11040                           ;escreve_cmd_lcd@comando stored from wreg
 11041  002B6E  6E1C               	movwf	escreve_cmd_lcd@comando,c
 11042                           
 11043                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 11044  002B70  9483               	bcf	3971,2,c	;volatile
 11045                           
 11046                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 11047  002B72  9283               	bcf	3971,1,c	;volatile
 11048                           
 11049                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 11050  002B74  9083               	bcf	3971,0,c	;volatile
 11051                           
 11052                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 11053  002B76  A81C               	btfss	escreve_cmd_lcd@comando,4,c
 11054  002B78  D002               	goto	l368
 11055  002B7A  8883               	bsf	3971,4,c	;volatile
 11056  002B7C  D001               	goto	l369
 11057  002B7E                     l368:
 11058                           
 11059                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 11060  002B7E  9883               	bcf	3971,4,c	;volatile
 11061  002B80                     l369:
 11062                           
 11063                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 11064  002B80  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
 11065  002B82  D002               	goto	l370
 11066  002B84  8A83               	bsf	3971,5,c	;volatile
 11067  002B86  D001               	goto	l371
 11068  002B88                     l370:
 11069                           
 11070                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 11071  002B88  9A83               	bcf	3971,5,c	;volatile
 11072  002B8A                     l371:
 11073                           
 11074                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 11075  002B8A  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
 11076  002B8C  D002               	goto	l372
 11077  002B8E  8C83               	bsf	3971,6,c	;volatile
 11078  002B90  D001               	goto	l373
 11079  002B92                     l372:
 11080                           
 11081                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 11082  002B92  9C83               	bcf	3971,6,c	;volatile
 11083  002B94                     l373:
 11084                           
 11085                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 11086  002B94  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
 11087  002B96  D002               	goto	l374
 11088  002B98  8E83               	bsf	3971,7,c	;volatile
 11089  002B9A  D001               	goto	l375
 11090  002B9C                     l374:
 11091                           
 11092                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 11093  002B9C  9E83               	bcf	3971,7,c	;volatile
 11094  002B9E                     l375:
 11095                           
 11096                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 11097  002B9E  8083               	bsf	3971,0,c	;volatile
 11098                           
 11099                           ;display_lcd.c: 181: delay();
 11100  002BA0  ECAD  F019         	call	_delay	;wreg free
 11101                           
 11102                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 11103  002BA4  9083               	bcf	3971,0,c	;volatile
 11104                           
 11105                           ;display_lcd.c: 183: delay();
 11106  002BA6  ECAD  F019         	call	_delay	;wreg free
 11107                           
 11108                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 11109  002BAA  A01C               	btfss	escreve_cmd_lcd@comando,0,c
 11110  002BAC  D002               	goto	l376
 11111  002BAE  8883               	bsf	3971,4,c	;volatile
 11112  002BB0  D001               	goto	l377
 11113  002BB2                     l376:
 11114                           
 11115                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 11116  002BB2  9883               	bcf	3971,4,c	;volatile
 11117  002BB4                     l377:
 11118                           
 11119                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 11120  002BB4  A21C               	btfss	escreve_cmd_lcd@comando,1,c
 11121  002BB6  D002               	goto	l378
 11122  002BB8  8A83               	bsf	3971,5,c	;volatile
 11123  002BBA  D001               	goto	l379
 11124  002BBC                     l378:
 11125                           
 11126                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 11127  002BBC  9A83               	bcf	3971,5,c	;volatile
 11128  002BBE                     l379:
 11129                           
 11130                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 11131  002BBE  A41C               	btfss	escreve_cmd_lcd@comando,2,c
 11132  002BC0  D002               	goto	l380
 11133  002BC2  8C83               	bsf	3971,6,c	;volatile
 11134  002BC4  D001               	goto	l381
 11135  002BC6                     l380:
 11136                           
 11137                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 11138  002BC6  9C83               	bcf	3971,6,c	;volatile
 11139  002BC8                     l381:
 11140                           
 11141                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 11142  002BC8  A61C               	btfss	escreve_cmd_lcd@comando,3,c
 11143  002BCA  D002               	goto	l382
 11144  002BCC  8E83               	bsf	3971,7,c	;volatile
 11145  002BCE  D001               	goto	l383
 11146  002BD0                     l382:
 11147                           
 11148                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 11149  002BD0  9E83               	bcf	3971,7,c	;volatile
 11150  002BD2                     l383:
 11151                           
 11152                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 11153  002BD2  8083               	bsf	3971,0,c	;volatile
 11154                           
 11155                           ;display_lcd.c: 197: delay();
 11156  002BD4  ECAD  F019         	call	_delay	;wreg free
 11157                           
 11158                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 11159  002BD8  9083               	bcf	3971,0,c	;volatile
 11160                           
 11161                           ;display_lcd.c: 199: delay();
 11162  002BDA  ECAD  F019         	call	_delay	;wreg free
 11163                           
 11164                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 11165  002BDE  041C               	decf	escreve_cmd_lcd@comando,w,c
 11166  002BE0  B4D8               	btfsc	status,2,c
 11167  002BE2  D008               	goto	u7410
 11168  002BE4  0E02               	movlw	2
 11169  002BE6  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 11170  002BE8  B4D8               	btfsc	status,2,c
 11171  002BEA  D004               	goto	u7410
 11172  002BEC  0E03               	movlw	3
 11173  002BEE  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 11174  002BF0  A4D8               	btfss	status,2,c
 11175  002BF2  0012               	return	
 11176  002BF4                     u7410:
 11177                           
 11178                           ;display_lcd.c: 205: { delay(); }
 11179  002BF4  ECAD  F019         	call	_delay	;wreg free
 11180  002BF8  0012               	return	
 11181  002BFA                     __end_of_escreve_cmd_lcd:
 11182                           	opt stack 0
 11183                           tosu	equ	0xFFF
 11184                           tosh	equ	0xFFE
 11185                           tosl	equ	0xFFD
 11186                           pclath	equ	0xFFA
 11187                           tblptru	equ	0xFF8
 11188                           tblptrh	equ	0xFF7
 11189                           tblptrl	equ	0xFF6
 11190                           tablat	equ	0xFF5
 11191                           prodh	equ	0xFF4
 11192                           prodl	equ	0xFF3
 11193                           intcon	equ	0xFF2
 11194                           intcon2	equ	0xFF1
 11195                           intcon3	equ	0xFF0
 11196                           postinc0	equ	0xFEE
 11197                           wreg	equ	0xFE8
 11198                           indf1	equ	0xFE7
 11199                           postinc1	equ	0xFE6
 11200                           postdec1	equ	0xFE5
 11201                           fsr1h	equ	0xFE2
 11202                           fsr1l	equ	0xFE1
 11203                           indf2	equ	0xFDF
 11204                           postinc2	equ	0xFDE
 11205                           postdec2	equ	0xFDD
 11206                           plusw2	equ	0xFDB
 11207                           fsr2h	equ	0xFDA
 11208                           fsr2l	equ	0xFD9
 11209                           status	equ	0xFD8
 11210                           
 11211 ;; *************** function _check_fs *****************
 11212 ;; Defined at:
 11213 ;;		line 722 in file "bibliotecas/pff.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;  buf             2   18[BANK0 ] PTR unsigned char 
 11216 ;;		 -> pf_mount@buf(36), 
 11217 ;;  sect            4   20[BANK0 ] unsigned long 
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;		None
 11220 ;; Return value:  Size  Location     Type
 11221 ;;                  1    wreg      unsigned char 
 11222 ;; Registers used:
 11223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11229 ;;      Params:         0       6       0       0       0       0       0       0       0
 11230 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11231 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11232 ;;      Totals:         0      10       0       0       0       0       0       0       0
 11233 ;;Total ram usage:       10 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; Hardware stack levels required when called:    6
 11236 ;; This function calls:
 11237 ;;		_disk_readp
 11238 ;; This function is called by:
 11239 ;;		_pf_mount
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           	psect	text43
 11244  001BEA                     __ptext43:
 11245                           	opt stack 0
 11246  001BEA                     _check_fs:
 11247                           	opt stack 21
 11248                           
 11249                           ;pff.c: 727: if (disk_readp(buf, sect, 510, 2))
 11250                           
 11251                           ;incstack = 0
 11252  001BEA  C072  F060         	movff	check_fs@buf,disk_readp@rd
 11253  001BEE  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 11254  001BF2  C074  F062         	movff	check_fs@sect,disk_readp@sector
 11255  001BF6  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 11256  001BFA  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 11257  001BFE  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 11258  001C02  0E01               	movlw	1
 11259  001C04  0100               	movlb	0	; () banked
 11260  001C06  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 11261  001C08  0EFE               	movlw	254
 11262  001C0A  6F66               	movwf	disk_readp@offset& (0+255),b
 11263  001C0C  0E00               	movlw	0
 11264  001C0E  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 11265  001C10  0E02               	movlw	2
 11266  001C12  6F68               	movwf	disk_readp@count& (0+255),b
 11267  001C14  EC3C  F009         	call	_disk_readp	;wreg free
 11268  001C18  0900               	iorlw	0
 11269  001C1A  B4D8               	btfsc	status,2,c
 11270  001C1C  D002               	goto	l764
 11271                           
 11272                           ;pff.c: 728: return 3;
 11273  001C1E  0E03               	movlw	3
 11274  001C20  0012               	return	
 11275  001C22                     l764:
 11276                           
 11277                           ;pff.c: 729: if ( (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf)) != 0xAA55)
 11278  001C22  0100               	movlb	0	; () banked
 11279  001C24  EE20 F001          	lfsr	2,1
 11280  001C28  5172               	movf	check_fs@buf& (0+255),w,b
 11281  001C2A  26D9               	addwf	fsr2l,f,c
 11282  001C2C  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 11283  001C2E  22DA               	addwfc	fsr2h,f,c
 11284  001C30  50DF               	movf	indf2,w,c
 11285  001C32  6F78               	movwf	??_check_fs& (0+255),b
 11286  001C34  5178               	movf	??_check_fs& (0+255),w,b
 11287  001C36  6F7A               	movwf	(??_check_fs+2)& (0+255),b
 11288  001C38  6B79               	clrf	(??_check_fs+1)& (0+255),b
 11289  001C3A  C072  FFD9         	movff	check_fs@buf,fsr2l
 11290  001C3E  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 11291  001C42  50DF               	movf	indf2,w,c
 11292  001C44  6F7B               	movwf	(??_check_fs+3)& (0+255),b
 11293  001C46  517B               	movf	(??_check_fs+3)& (0+255),w,b
 11294  001C48  1379               	iorwf	(??_check_fs+1)& (0+255),f,b
 11295  001C4A  0E00               	movlw	0
 11296  001C4C  137A               	iorwf	(??_check_fs+2)& (0+255),f,b
 11297  001C4E  0E55               	movlw	85
 11298  001C50  1979               	xorwf	(??_check_fs+1)& (0+255),w,b
 11299  001C52  E104               	bnz	u7910
 11300  001C54  0EAA               	movlw	170
 11301  001C56  197A               	xorwf	(??_check_fs+2)& (0+255),w,b
 11302  001C58  B4D8               	btfsc	status,2,c
 11303  001C5A  D002               	goto	l766
 11304  001C5C                     u7910:
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;pff.c: 730: {
 11308                           ;pff.c: 731: return 2;
 11309  001C5C  0E02               	movlw	2
 11310                           
 11311                           ; BSR set to: 0
 11312  001C5E  0012               	return	
 11313  001C60                     l766:
 11314                           
 11315                           ; BSR set to: 0
 11316                           
 11317                           ; BSR set to: 0
 11318  001C60  C072  F060         	movff	check_fs@buf,disk_readp@rd
 11319  001C64  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 11320  001C68  C074  F062         	movff	check_fs@sect,disk_readp@sector
 11321  001C6C  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 11322  001C70  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 11323  001C74  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 11324  001C78  0E00               	movlw	0
 11325  001C7A  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 11326  001C7C  0E36               	movlw	54
 11327  001C7E  6F66               	movwf	disk_readp@offset& (0+255),b
 11328  001C80  0E00               	movlw	0
 11329  001C82  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 11330  001C84  0E02               	movlw	2
 11331  001C86  6F68               	movwf	disk_readp@count& (0+255),b
 11332  001C88  EC3C  F009         	call	_disk_readp	;wreg free
 11333  001C8C  0900               	iorlw	0
 11334  001C8E  A4D8               	btfss	status,2,c
 11335  001C90  D01F               	goto	l767
 11336  001C92  0100               	movlb	0	; () banked
 11337  001C94  EE20 F001          	lfsr	2,1
 11338  001C98  5172               	movf	check_fs@buf& (0+255),w,b
 11339  001C9A  26D9               	addwf	fsr2l,f,c
 11340  001C9C  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 11341  001C9E  22DA               	addwfc	fsr2h,f,c
 11342  001CA0  50DF               	movf	indf2,w,c
 11343  001CA2  6F78               	movwf	??_check_fs& (0+255),b
 11344  001CA4  5178               	movf	??_check_fs& (0+255),w,b
 11345  001CA6  6F7A               	movwf	(??_check_fs+2)& (0+255),b
 11346  001CA8  6B79               	clrf	(??_check_fs+1)& (0+255),b
 11347  001CAA  C072  FFD9         	movff	check_fs@buf,fsr2l
 11348  001CAE  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 11349  001CB2  50DF               	movf	indf2,w,c
 11350  001CB4  6F7B               	movwf	(??_check_fs+3)& (0+255),b
 11351  001CB6  517B               	movf	(??_check_fs+3)& (0+255),w,b
 11352  001CB8  1379               	iorwf	(??_check_fs+1)& (0+255),f,b
 11353  001CBA  0E00               	movlw	0
 11354  001CBC  137A               	iorwf	(??_check_fs+2)& (0+255),f,b
 11355  001CBE  0E46               	movlw	70
 11356  001CC0  1979               	xorwf	(??_check_fs+1)& (0+255),w,b
 11357  001CC2  E106               	bnz	l7161
 11358  001CC4  0E41               	movlw	65
 11359  001CC6  197A               	xorwf	(??_check_fs+2)& (0+255),w,b
 11360  001CC8  A4D8               	btfss	status,2,c
 11361  001CCA  D002               	goto	l767
 11362                           
 11363                           ; BSR set to: 0
 11364                           ;pff.c: 734: return 0;
 11365  001CCC  0E00               	movlw	0
 11366                           
 11367                           ; BSR set to: 0
 11368  001CCE  0012               	return	
 11369  001CD0                     l767:
 11370  001CD0                     l7161:
 11371  001CD0  C072  F060         	movff	check_fs@buf,disk_readp@rd
 11372  001CD4  C073  F061         	movff	check_fs@buf+1,disk_readp@rd+1
 11373  001CD8  C074  F062         	movff	check_fs@sect,disk_readp@sector
 11374  001CDC  C075  F063         	movff	check_fs@sect+1,disk_readp@sector+1
 11375  001CE0  C076  F064         	movff	check_fs@sect+2,disk_readp@sector+2
 11376  001CE4  C077  F065         	movff	check_fs@sect+3,disk_readp@sector+3
 11377  001CE8  0E00               	movlw	0
 11378  001CEA  0100               	movlb	0	; () banked
 11379  001CEC  6F67               	movwf	(disk_readp@offset+1)& (0+255),b
 11380  001CEE  0E52               	movlw	82
 11381  001CF0  6F66               	movwf	disk_readp@offset& (0+255),b
 11382  001CF2  0E00               	movlw	0
 11383  001CF4  6F69               	movwf	(disk_readp@count+1)& (0+255),b
 11384  001CF6  0E02               	movlw	2
 11385  001CF8  6F68               	movwf	disk_readp@count& (0+255),b
 11386  001CFA  EC3C  F009         	call	_disk_readp	;wreg free
 11387  001CFE  0900               	iorlw	0
 11388  001D00  A4D8               	btfss	status,2,c
 11389  001D02  D01F               	goto	l768
 11390  001D04  0100               	movlb	0	; () banked
 11391  001D06  EE20 F001          	lfsr	2,1
 11392  001D0A  5172               	movf	check_fs@buf& (0+255),w,b
 11393  001D0C  26D9               	addwf	fsr2l,f,c
 11394  001D0E  5173               	movf	(check_fs@buf+1)& (0+255),w,b
 11395  001D10  22DA               	addwfc	fsr2h,f,c
 11396  001D12  50DF               	movf	indf2,w,c
 11397  001D14  6F78               	movwf	??_check_fs& (0+255),b
 11398  001D16  5178               	movf	??_check_fs& (0+255),w,b
 11399  001D18  6F7A               	movwf	(??_check_fs+2)& (0+255),b
 11400  001D1A  6B79               	clrf	(??_check_fs+1)& (0+255),b
 11401  001D1C  C072  FFD9         	movff	check_fs@buf,fsr2l
 11402  001D20  C073  FFDA         	movff	check_fs@buf+1,fsr2h
 11403  001D24  50DF               	movf	indf2,w,c
 11404  001D26  6F7B               	movwf	(??_check_fs+3)& (0+255),b
 11405  001D28  517B               	movf	(??_check_fs+3)& (0+255),w,b
 11406  001D2A  1379               	iorwf	(??_check_fs+1)& (0+255),f,b
 11407  001D2C  0E00               	movlw	0
 11408  001D2E  137A               	iorwf	(??_check_fs+2)& (0+255),f,b
 11409  001D30  0E46               	movlw	70
 11410  001D32  1979               	xorwf	(??_check_fs+1)& (0+255),w,b
 11411  001D34  E106               	bnz	l7169
 11412  001D36  0E41               	movlw	65
 11413  001D38  197A               	xorwf	(??_check_fs+2)& (0+255),w,b
 11414  001D3A  A4D8               	btfss	status,2,c
 11415  001D3C  D002               	goto	l768
 11416                           
 11417                           ; BSR set to: 0
 11418                           ;pff.c: 736: return 0;
 11419  001D3E  0E00               	movlw	0
 11420                           
 11421                           ; BSR set to: 0
 11422  001D40  0012               	return	
 11423  001D42                     l768:
 11424  001D42                     l7169:
 11425                           
 11426                           ;pff.c: 737: return 1;
 11427  001D42  0E01               	movlw	1
 11428  001D44  0012               	return	
 11429  001D46                     __end_of_check_fs:
 11430                           	opt stack 0
 11431                           tosu	equ	0xFFF
 11432                           tosh	equ	0xFFE
 11433                           tosl	equ	0xFFD
 11434                           pclath	equ	0xFFA
 11435                           tblptru	equ	0xFF8
 11436                           tblptrh	equ	0xFF7
 11437                           tblptrl	equ	0xFF6
 11438                           tablat	equ	0xFF5
 11439                           prodh	equ	0xFF4
 11440                           prodl	equ	0xFF3
 11441                           intcon	equ	0xFF2
 11442                           intcon2	equ	0xFF1
 11443                           intcon3	equ	0xFF0
 11444                           postinc0	equ	0xFEE
 11445                           wreg	equ	0xFE8
 11446                           indf1	equ	0xFE7
 11447                           postinc1	equ	0xFE6
 11448                           postdec1	equ	0xFE5
 11449                           fsr1h	equ	0xFE2
 11450                           fsr1l	equ	0xFE1
 11451                           indf2	equ	0xFDF
 11452                           postinc2	equ	0xFDE
 11453                           postdec2	equ	0xFDD
 11454                           plusw2	equ	0xFDB
 11455                           fsr2h	equ	0xFDA
 11456                           fsr2l	equ	0xFD9
 11457                           status	equ	0xFD8
 11458                           
 11459 ;; *************** function _disk_readp *****************
 11460 ;; Defined at:
 11461 ;;		line 146 in file "bibliotecas/diskio.c"
 11462 ;; Parameters:    Size  Location     Type
 11463 ;;  rd              2    0[BANK0 ] PTR unsigned char 
 11464 ;;		 -> data_buffer_32(32), pf_readdir@dir(32), pf_opendir@dir(32), pf_open@dir(32), 
 11465 ;;		 -> pf_mount@buf(36), NULL(0), get_fat@buf(4), 
 11466 ;;  sector          4    2[BANK0 ] unsigned long 
 11467 ;;  offset          2    6[BANK0 ] unsigned int 
 11468 ;;  count           2    8[BANK0 ] unsigned int 
 11469 ;; Auto vars:     Size  Location     Type
 11470 ;;  start_add       4   11[BANK0 ] unsigned long 
 11471 ;;  length          2   16[BANK0 ] int 
 11472 ;;  i               2    0        int 
 11473 ;;  buff            1   15[BANK0 ] unsigned char 
 11474 ;;  ptr             1   10[BANK0 ] unsigned char 
 11475 ;;  res             1    0        enum E14
 11476 ;; Return value:  Size  Location     Type
 11477 ;;                  1    wreg      enum E14
 11478 ;; Registers used:
 11479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11480 ;; Tracked objects:
 11481 ;;		On entry : 0/0
 11482 ;;		On exit  : 0/0
 11483 ;;		Unchanged: 0/0
 11484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11485 ;;      Params:         0      10       0       0       0       0       0       0       0
 11486 ;;      Locals:         0       8       0       0       0       0       0       0       0
 11487 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11488 ;;      Totals:         4      18       0       0       0       0       0       0       0
 11489 ;;Total ram usage:       22 bytes
 11490 ;; Hardware stack levels used:    1
 11491 ;; Hardware stack levels required when called:    5
 11492 ;; This function calls:
 11493 ;;		_command
 11494 ;;		_dummy_clocks
 11495 ;;		_escreve_frase_ram_lcd
 11496 ;;		_posicao_cursor_lcd
 11497 ;;		_proceed
 11498 ;;		_response
 11499 ;; This function is called by:
 11500 ;;		_get_fat
 11501 ;;		_dir_find
 11502 ;;		_check_fs
 11503 ;;		_pf_mount
 11504 ;;		_pf_read
 11505 ;;		_dir_read
 11506 ;; This function uses a non-reentrant model
 11507 ;;
 11508                           
 11509                           	psect	text44
 11510  001278                     __ptext44:
 11511                           	opt stack 0
 11512  001278                     _disk_readp:
 11513                           	opt stack 21
 11514                           
 11515                           ;diskio.c: 153: DRESULT res;
 11516                           ;diskio.c: 154: unsigned char ptr=0X00,buff;
 11517                           
 11518                           ;incstack = 0
 11519  001278  0E00               	movlw	0
 11520  00127A  0100               	movlb	0	; () banked
 11521  00127C  6F6A               	movwf	disk_readp@ptr& (0+255),b
 11522                           
 11523                           ; BSR set to: 0
 11524                           ;diskio.c: 155: unsigned long int start_add;
 11525                           ;diskio.c: 156: static unsigned char arr[512];
 11526                           ;diskio.c: 157: int length,i;
 11527                           ;diskio.c: 159: if(offset == 0)
 11528  00127E  5166               	movf	disk_readp@offset& (0+255),w,b
 11529  001280  1167               	iorwf	(disk_readp@offset+1)& (0+255),w,b
 11530  001282  A4D8               	btfss	status,2,c
 11531  001284  D0A4               	goto	l288
 11532                           
 11533                           ; BSR set to: 0
 11534                           ;diskio.c: 160: {
 11535                           ;diskio.c: 161: start_add = ((sector*512));
 11536  001286  C062  F026         	movff	disk_readp@sector,??_disk_readp
 11537  00128A  C063  F027         	movff	disk_readp@sector+1,??_disk_readp+1
 11538  00128E  C064  F028         	movff	disk_readp@sector+2,??_disk_readp+2
 11539  001292  C065  F029         	movff	disk_readp@sector+3,??_disk_readp+3
 11540  001296  0E09               	movlw	9
 11541  001298                     u6825:
 11542  001298  90D8               	bcf	status,0,c
 11543  00129A  3626               	rlcf	??_disk_readp,f,c
 11544  00129C  3627               	rlcf	??_disk_readp+1,f,c
 11545  00129E  3628               	rlcf	??_disk_readp+2,f,c
 11546  0012A0  3629               	rlcf	??_disk_readp+3,f,c
 11547  0012A2  2EE8               	decfsz	wreg,f,c
 11548  0012A4  D7F9               	goto	u6825
 11549  0012A6  C026  F06B         	movff	??_disk_readp,disk_readp@start_add
 11550  0012AA  C027  F06C         	movff	??_disk_readp+1,disk_readp@start_add+1
 11551  0012AE  C028  F06D         	movff	??_disk_readp+2,disk_readp@start_add+2
 11552  0012B2  C029  F06E         	movff	??_disk_readp+3,disk_readp@start_add+3
 11553                           
 11554                           ; BSR set to: 0
 11555                           ;diskio.c: 163: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11556  0012B6  0E3D               	movlw	61
 11557  0012B8  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 11558  0012BA  0EE1               	movlw	225
 11559  0012BC  6E26               	movwf	??_disk_readp& (0+255),c
 11560  0012BE  0E40               	movlw	64
 11561  0012C0                     u9437:
 11562  0012C0  2EE8               	decfsz	wreg,f,c
 11563  0012C2  D7FE               	bra	u9437
 11564  0012C4  2E26               	decfsz	??_disk_readp& (0+255),f,c
 11565  0012C6  D7FC               	bra	u9437
 11566  0012C8  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11567  0012CA  D7FA               	bra	u9437
 11568                           
 11569                           ;diskio.c: 165: dummy_clocks(8);
 11570  0012CC  0E08               	movlw	8
 11571  0012CE  EC5A  F019         	call	_dummy_clocks
 11572                           
 11573                           ;diskio.c: 166: command(0X52,start_add,0X00);
 11574  0012D2  C06B  F01E         	movff	disk_readp@start_add,command@arg
 11575  0012D6  C06C  F01F         	movff	disk_readp@start_add+1,command@arg+1
 11576  0012DA  C06D  F020         	movff	disk_readp@start_add+2,command@arg+2
 11577  0012DE  C06E  F021         	movff	disk_readp@start_add+3,command@arg+3
 11578  0012E2  0E00               	movlw	0
 11579  0012E4  6E22               	movwf	command@CRC,c
 11580  0012E6  0E52               	movlw	82
 11581  0012E8  EC36  F018         	call	_command
 11582                           
 11583                           ;diskio.c: 167: proceed();
 11584  0012EC  EC58  F01A         	call	_proceed	;wreg free
 11585  0012F0                     
 11586                           ;diskio.c: 169: buff = response();
 11587  0012F0  EC4B  F01A         	call	_response	;wreg free
 11588  0012F4  0100               	movlb	0	; () banked
 11589  0012F6  6F6F               	movwf	disk_readp@buff& (0+255),b
 11590                           
 11591                           ; BSR set to: 0
 11592                           ;diskio.c: 170: }while(buff!=0x00);
 11593  0012F8  516F               	movf	disk_readp@buff& (0+255),w,b
 11594  0012FA  A4D8               	btfss	status,2,c
 11595  0012FC  D7F9               	goto	l289
 11596                           
 11597                           ; BSR set to: 0
 11598                           ;diskio.c: 171: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11599                           
 11600                           ; BSR set to: 0
 11601  0012FE  0E3D               	movlw	61
 11602  001300  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 11603  001302  0EE1               	movlw	225
 11604  001304  6E26               	movwf	??_disk_readp& (0+255),c
 11605  001306  0E40               	movlw	64
 11606  001308                     u9447:
 11607  001308  2EE8               	decfsz	wreg,f,c
 11608  00130A  D7FE               	bra	u9447
 11609  00130C  2E26               	decfsz	??_disk_readp& (0+255),f,c
 11610  00130E  D7FC               	bra	u9447
 11611  001310  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11612  001312  D7FA               	bra	u9447
 11613                           
 11614                           ;diskio.c: 173: proceed();
 11615  001314  EC58  F01A         	call	_proceed	;wreg free
 11616  001318                     
 11617                           ;diskio.c: 175: buff = response();
 11618  001318  EC4B  F01A         	call	_response	;wreg free
 11619  00131C  0100               	movlb	0	; () banked
 11620  00131E  6F6F               	movwf	disk_readp@buff& (0+255),b
 11621                           
 11622                           ; BSR set to: 0
 11623                           ;diskio.c: 176: }while(buff!=0xFE);
 11624  001320  0EFE               	movlw	254
 11625  001322  196F               	xorwf	disk_readp@buff& (0+255),w,b
 11626  001324  A4D8               	btfss	status,2,c
 11627  001326  D7F8               	goto	l291
 11628                           
 11629                           ; BSR set to: 0
 11630                           ;diskio.c: 177: length = 0;
 11631                           
 11632                           ; BSR set to: 0
 11633  001328  0E00               	movlw	0
 11634  00132A  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11635  00132C  0E00               	movlw	0
 11636  00132E  6F70               	movwf	disk_readp@length& (0+255),b
 11637                           
 11638                           ;diskio.c: 178: while ( length < count )
 11639  001330  D00C               	goto	l293
 11640  001332                     
 11641                           ; BSR set to: 0
 11642                           ;diskio.c: 179: {
 11643                           ;diskio.c: 180: arr[length] = response();
 11644                           
 11645                           ; BSR set to: 0
 11646  001332  0E2D               	movlw	low disk_readp@arr
 11647  001334  2570               	addwf	disk_readp@length& (0+255),w,b
 11648  001336  6ED9               	movwf	fsr2l,c
 11649  001338  0E02               	movlw	high disk_readp@arr
 11650  00133A  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11651  00133C  6EDA               	movwf	fsr2h,c
 11652  00133E  EC4B  F01A         	call	_response	;wreg free
 11653  001342  6EDF               	movwf	indf2,c
 11654                           
 11655                           ;diskio.c: 181: length++;
 11656  001344  0100               	movlb	0	; () banked
 11657  001346  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11658  001348  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11659  00134A                     l293:
 11660                           
 11661                           ; BSR set to: 0
 11662                           
 11663                           ; BSR set to: 0
 11664  00134A  5168               	movf	disk_readp@count& (0+255),w,b
 11665  00134C  5D70               	subwf	disk_readp@length& (0+255),w,b
 11666  00134E  5169               	movf	(disk_readp@count+1)& (0+255),w,b
 11667  001350  5971               	subwfb	(disk_readp@length+1)& (0+255),w,b
 11668  001352  A0D8               	btfss	status,0,c
 11669  001354  D7EE               	goto	l294
 11670                           
 11671                           ; BSR set to: 0
 11672                           ;diskio.c: 182: }
 11673                           ;diskio.c: 184: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11674                           
 11675                           ; BSR set to: 0
 11676  001356  0E3D               	movlw	61
 11677  001358  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 11678  00135A  0EE1               	movlw	225
 11679  00135C  6E26               	movwf	??_disk_readp& (0+255),c
 11680  00135E  0E40               	movlw	64
 11681  001360                     u9457:
 11682  001360  2EE8               	decfsz	wreg,f,c
 11683  001362  D7FE               	bra	u9457
 11684  001364  2E26               	decfsz	??_disk_readp& (0+255),f,c
 11685  001366  D7FC               	bra	u9457
 11686  001368  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11687  00136A  D7FA               	bra	u9457
 11688                           
 11689                           ;diskio.c: 186: dummy_clocks(8);
 11690  00136C  0E08               	movlw	8
 11691  00136E  EC5A  F019         	call	_dummy_clocks
 11692                           
 11693                           ;diskio.c: 187: command(0X4C,0X00000000,0X00);
 11694  001372  0E00               	movlw	0
 11695  001374  6E1E               	movwf	command@arg,c
 11696  001376  0E00               	movlw	0
 11697  001378  6E1F               	movwf	command@arg+1,c
 11698  00137A  0E00               	movlw	0
 11699  00137C  6E20               	movwf	command@arg+2,c
 11700  00137E  0E00               	movlw	0
 11701  001380  6E21               	movwf	command@arg+3,c
 11702  001382  0E00               	movlw	0
 11703  001384  6E22               	movwf	command@CRC,c
 11704  001386  0E4C               	movlw	76
 11705  001388  EC36  F018         	call	_command
 11706                           
 11707                           ;diskio.c: 188: proceed();
 11708  00138C  EC58  F01A         	call	_proceed	;wreg free
 11709  001390                     
 11710                           ;diskio.c: 190: buff = response();
 11711  001390  EC4B  F01A         	call	_response	;wreg free
 11712  001394  0100               	movlb	0	; () banked
 11713  001396  6F6F               	movwf	disk_readp@buff& (0+255),b
 11714                           
 11715                           ; BSR set to: 0
 11716                           ;diskio.c: 191: }while(buff!=0xFF);
 11717  001398  296F               	incf	disk_readp@buff& (0+255),w,b
 11718  00139A  A4D8               	btfss	status,2,c
 11719  00139C  D7F9               	goto	l296
 11720                           
 11721                           ; BSR set to: 0
 11722                           ;diskio.c: 193: length = 0;
 11723                           
 11724                           ; BSR set to: 0
 11725  00139E  0E00               	movlw	0
 11726  0013A0  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11727  0013A2  0E00               	movlw	0
 11728  0013A4  6F70               	movwf	disk_readp@length& (0+255),b
 11729                           
 11730                           ;diskio.c: 195: while(arr[length]!='\0')
 11731  0013A6  D002               	goto	l298
 11732  0013A8                     
 11733                           ; BSR set to: 0
 11734                           ;diskio.c: 196: {
 11735                           ;diskio.c: 198: length++;
 11736                           
 11737                           ; BSR set to: 0
 11738  0013A8  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11739  0013AA  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11740  0013AC                     l298:
 11741                           
 11742                           ; BSR set to: 0
 11743                           
 11744                           ; BSR set to: 0
 11745  0013AC  0E2D               	movlw	low disk_readp@arr
 11746  0013AE  2570               	addwf	disk_readp@length& (0+255),w,b
 11747  0013B0  6ED9               	movwf	fsr2l,c
 11748  0013B2  0E02               	movlw	high disk_readp@arr
 11749  0013B4  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11750  0013B6  6EDA               	movwf	fsr2h,c
 11751  0013B8  50DF               	movf	indf2,w,c
 11752  0013BA  A4D8               	btfss	status,2,c
 11753  0013BC  D7F5               	goto	l299
 11754                           
 11755                           ; BSR set to: 0
 11756                           ;diskio.c: 199: }
 11757                           ;diskio.c: 201: *rd = length;
 11758                           
 11759                           ; BSR set to: 0
 11760  0013BE  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11761  0013C2  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11762  0013C6  C070  FFDF         	movff	disk_readp@length,indf2
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;diskio.c: 202: return RES_OK;
 11766  0013CA  0E00               	movlw	0
 11767                           
 11768                           ; BSR set to: 0
 11769                           ;diskio.c: 203: }
 11770                           
 11771                           ; BSR set to: 0
 11772  0013CC  0012               	return	
 11773  0013CE                     l288:
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;diskio.c: 204: else
 11777                           ;diskio.c: 205: {
 11778                           ;diskio.c: 206: start_add = (sector*512);
 11779                           
 11780                           ; BSR set to: 0
 11781  0013CE  C062  F026         	movff	disk_readp@sector,??_disk_readp
 11782  0013D2  C063  F027         	movff	disk_readp@sector+1,??_disk_readp+1
 11783  0013D6  C064  F028         	movff	disk_readp@sector+2,??_disk_readp+2
 11784  0013DA  C065  F029         	movff	disk_readp@sector+3,??_disk_readp+3
 11785  0013DE  0E09               	movlw	9
 11786  0013E0                     u6885:
 11787  0013E0  90D8               	bcf	status,0,c
 11788  0013E2  3626               	rlcf	??_disk_readp,f,c
 11789  0013E4  3627               	rlcf	??_disk_readp+1,f,c
 11790  0013E6  3628               	rlcf	??_disk_readp+2,f,c
 11791  0013E8  3629               	rlcf	??_disk_readp+3,f,c
 11792  0013EA  2EE8               	decfsz	wreg,f,c
 11793  0013EC  D7F9               	goto	u6885
 11794  0013EE  C026  F06B         	movff	??_disk_readp,disk_readp@start_add
 11795  0013F2  C027  F06C         	movff	??_disk_readp+1,disk_readp@start_add+1
 11796  0013F6  C028  F06D         	movff	??_disk_readp+2,disk_readp@start_add+2
 11797  0013FA  C029  F06E         	movff	??_disk_readp+3,disk_readp@start_add+3
 11798                           
 11799                           ; BSR set to: 0
 11800                           ;diskio.c: 208: length = 0;
 11801  0013FE  0E00               	movlw	0
 11802  001400  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11803  001402  0E00               	movlw	0
 11804  001404  6F70               	movwf	disk_readp@length& (0+255),b
 11805                           
 11806                           ;diskio.c: 209: while(length<512)
 11807  001406  D00A               	goto	l303
 11808  001408                     
 11809                           ; BSR set to: 0
 11810                           ;diskio.c: 210: {
 11811                           ;diskio.c: 211: arr[length] = 0;
 11812                           
 11813                           ; BSR set to: 0
 11814  001408  0E2D               	movlw	low disk_readp@arr
 11815  00140A  2570               	addwf	disk_readp@length& (0+255),w,b
 11816  00140C  6ED9               	movwf	fsr2l,c
 11817  00140E  0E02               	movlw	high disk_readp@arr
 11818  001410  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11819  001412  6EDA               	movwf	fsr2h,c
 11820  001414  0E00               	movlw	0
 11821  001416  6EDF               	movwf	indf2,c
 11822                           
 11823                           ; BSR set to: 0
 11824                           ;diskio.c: 212: length++;
 11825  001418  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11826  00141A  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11827  00141C                     l303:
 11828                           
 11829                           ; BSR set to: 0
 11830                           
 11831                           ; BSR set to: 0
 11832  00141C  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11833  00141E  D7F4               	goto	l304
 11834  001420  0E02               	movlw	2
 11835  001422  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 11836  001424  A0D8               	btfss	status,0,c
 11837  001426  D7F0               	goto	l304
 11838                           
 11839                           ; BSR set to: 0
 11840                           ;diskio.c: 213: }
 11841                           ;diskio.c: 215: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11842                           
 11843                           ; BSR set to: 0
 11844  001428  0E3D               	movlw	61
 11845  00142A  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 11846  00142C  0EE1               	movlw	225
 11847  00142E  6E26               	movwf	??_disk_readp& (0+255),c
 11848  001430  0E40               	movlw	64
 11849  001432                     u9467:
 11850  001432  2EE8               	decfsz	wreg,f,c
 11851  001434  D7FE               	bra	u9467
 11852  001436  2E26               	decfsz	??_disk_readp& (0+255),f,c
 11853  001438  D7FC               	bra	u9467
 11854  00143A  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 11855  00143C  D7FA               	bra	u9467
 11856                           
 11857                           ;diskio.c: 217: dummy_clocks(8);
 11858  00143E  0E08               	movlw	8
 11859  001440  EC5A  F019         	call	_dummy_clocks
 11860                           
 11861                           ;diskio.c: 219: command(0X51,start_add,0X00);
 11862  001444  C06B  F01E         	movff	disk_readp@start_add,command@arg
 11863  001448  C06C  F01F         	movff	disk_readp@start_add+1,command@arg+1
 11864  00144C  C06D  F020         	movff	disk_readp@start_add+2,command@arg+2
 11865  001450  C06E  F021         	movff	disk_readp@start_add+3,command@arg+3
 11866  001454  0E00               	movlw	0
 11867  001456  6E22               	movwf	command@CRC,c
 11868  001458  0E51               	movlw	81
 11869  00145A  EC36  F018         	call	_command
 11870                           
 11871                           ;diskio.c: 220: proceed();
 11872  00145E  EC58  F01A         	call	_proceed	;wreg free
 11873  001462                     
 11874                           ;diskio.c: 222: buff = response();
 11875  001462  EC4B  F01A         	call	_response	;wreg free
 11876  001466  0100               	movlb	0	; () banked
 11877  001468  6F6F               	movwf	disk_readp@buff& (0+255),b
 11878                           
 11879                           ; BSR set to: 0
 11880                           ;diskio.c: 223: }while(buff!=0x00);
 11881  00146A  516F               	movf	disk_readp@buff& (0+255),w,b
 11882  00146C  A4D8               	btfss	status,2,c
 11883  00146E  D7F9               	goto	l306
 11884  001470                     u6900:
 11885                           
 11886                           ; BSR set to: 0
 11887                           ;diskio.c: 225: buff = response();
 11888                           
 11889                           ; BSR set to: 0
 11890                           
 11891                           ;diskio.c: 224: do{
 11892                           
 11893                           ; BSR set to: 0
 11894  001470  EC4B  F01A         	call	_response	;wreg free
 11895  001474  0100               	movlb	0	; () banked
 11896  001476  6F6F               	movwf	disk_readp@buff& (0+255),b
 11897                           
 11898                           ; BSR set to: 0
 11899                           ;diskio.c: 226: }while(buff!=0xFE);
 11900  001478  0EFE               	movlw	254
 11901  00147A  196F               	xorwf	disk_readp@buff& (0+255),w,b
 11902  00147C  A4D8               	btfss	status,2,c
 11903  00147E  D7F8               	goto	u6900
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;diskio.c: 228: length = 0;
 11907                           
 11908                           ; BSR set to: 0
 11909  001480  0E00               	movlw	0
 11910  001482  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 11911  001484  0E00               	movlw	0
 11912  001486  6F70               	movwf	disk_readp@length& (0+255),b
 11913                           
 11914                           ;diskio.c: 229: while ( length < 512 )
 11915  001488  D048               	goto	u6940
 11916  00148A                     l6515:
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;diskio.c: 232: {
 11920                           ;diskio.c: 233: arr[length] = response();
 11921  00148A  0E2D               	movlw	low disk_readp@arr
 11922  00148C  2570               	addwf	disk_readp@length& (0+255),w,b
 11923  00148E  6ED9               	movwf	fsr2l,c
 11924  001490  0E02               	movlw	high disk_readp@arr
 11925  001492  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11926  001494  6EDA               	movwf	fsr2h,c
 11927  001496  EC4B  F01A         	call	_response	;wreg free
 11928  00149A  6EDF               	movwf	indf2,c
 11929                           
 11930                           ;diskio.c: 234: length++;
 11931  00149C  0100               	movlb	0	; () banked
 11932  00149E  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11933  0014A0  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11934  0014A2                     
 11935                           ; BSR set to: 0
 11936                           
 11937                           ; BSR set to: 0
 11938  0014A2  0766               	decf	disk_readp@offset& (0+255),f,b
 11939  0014A4  A0D8               	btfss	status,0,c
 11940  0014A6  0767               	decf	(disk_readp@offset+1)& (0+255),f,b
 11941  0014A8  2966               	incf	disk_readp@offset& (0+255),w,b
 11942  0014AA  E1EF               	bnz	l6515
 11943  0014AC  2967               	incf	(disk_readp@offset+1)& (0+255),w,b
 11944  0014AE  B4D8               	btfsc	status,2,c
 11945  0014B0  D019               	goto	l315
 11946  0014B2  D7EB               	goto	l313
 11947  0014B4                     l6521:
 11948                           
 11949                           ; BSR set to: 0
 11950                           ;diskio.c: 237: {
 11951                           ;diskio.c: 238: *rd = response();
 11952  0014B4  EC4B  F01A         	call	_response	;wreg free
 11953  0014B8  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11954  0014BC  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11955  0014C0  6EDF               	movwf	indf2,c
 11956                           
 11957                           ;diskio.c: 239: arr[length] = *rd;
 11958  0014C2  C060  FFD9         	movff	disk_readp@rd,fsr2l
 11959  0014C6  C061  FFDA         	movff	disk_readp@rd+1,fsr2h
 11960  0014CA  0E2D               	movlw	low disk_readp@arr
 11961  0014CC  0100               	movlb	0	; () banked
 11962  0014CE  2570               	addwf	disk_readp@length& (0+255),w,b
 11963  0014D0  6EE1               	movwf	fsr1l,c
 11964  0014D2  0E02               	movlw	high disk_readp@arr
 11965  0014D4  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11966  0014D6  6EE2               	movwf	fsr1h,c
 11967  0014D8  CFDF FFE7          	movff	indf2,indf1
 11968                           
 11969                           ; BSR set to: 0
 11970                           ;diskio.c: 240: rd++;
 11971  0014DC  4B60               	infsnz	disk_readp@rd& (0+255),f,b
 11972  0014DE  2B61               	incf	(disk_readp@rd+1)& (0+255),f,b
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;diskio.c: 241: length++;
 11976  0014E0  4B70               	infsnz	disk_readp@length& (0+255),f,b
 11977  0014E2  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 11978  0014E4                     l315:
 11979                           
 11980                           ; BSR set to: 0
 11981                           
 11982                           ; BSR set to: 0
 11983  0014E4  0768               	decf	disk_readp@count& (0+255),f,b
 11984  0014E6  A0D8               	btfss	status,0,c
 11985  0014E8  0769               	decf	(disk_readp@count+1)& (0+255),f,b
 11986  0014EA  2968               	incf	disk_readp@count& (0+255),w,b
 11987  0014EC  E1E3               	bnz	l6521
 11988  0014EE  2969               	incf	(disk_readp@count+1)& (0+255),w,b
 11989  0014F0  B4D8               	btfsc	status,2,c
 11990  0014F2  D00D               	goto	l318
 11991  0014F4  D7DF               	goto	l316
 11992  0014F6                     
 11993                           ; BSR set to: 0
 11994                           ;diskio.c: 244: {
 11995                           ;diskio.c: 245: arr[length] = response();
 11996                           
 11997                           ; BSR set to: 0
 11998  0014F6  0E2D               	movlw	low disk_readp@arr
 11999  0014F8  2570               	addwf	disk_readp@length& (0+255),w,b
 12000  0014FA  6ED9               	movwf	fsr2l,c
 12001  0014FC  0E02               	movlw	high disk_readp@arr
 12002  0014FE  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 12003  001500  6EDA               	movwf	fsr2h,c
 12004  001502  EC4B  F01A         	call	_response	;wreg free
 12005  001506  6EDF               	movwf	indf2,c
 12006                           
 12007                           ;diskio.c: 246: length++;
 12008  001508  0100               	movlb	0	; () banked
 12009  00150A  4B70               	infsnz	disk_readp@length& (0+255),f,b
 12010  00150C  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 12011  00150E                     l318:
 12012                           
 12013                           ; BSR set to: 0
 12014                           
 12015                           ; BSR set to: 0
 12016  00150E  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 12017  001510  D7F2               	goto	l319
 12018  001512  0E02               	movlw	2
 12019  001514  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 12020  001516  A0D8               	btfss	status,0,c
 12021  001518  D7EE               	goto	l319
 12022  00151A                     u6940:
 12023                           
 12024                           ; BSR set to: 0
 12025                           
 12026                           ; BSR set to: 0
 12027                           
 12028                           ; BSR set to: 0
 12029  00151A  BF71               	btfsc	(disk_readp@length+1)& (0+255),7,b
 12030  00151C  D7C2               	goto	l312
 12031  00151E  0E02               	movlw	2
 12032  001520  5D71               	subwf	(disk_readp@length+1)& (0+255),w,b
 12033  001522  A0D8               	btfss	status,0,c
 12034  001524  D7BE               	goto	l312
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;diskio.c: 247: }
 12038                           ;diskio.c: 248: }
 12039                           ;diskio.c: 249: _delay((unsigned long)((1000)*(48000000/4000.0)));
 12040                           
 12041                           ; BSR set to: 0
 12042  001526  0E3D               	movlw	61
 12043  001528  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 12044  00152A  0EE1               	movlw	225
 12045  00152C  6E26               	movwf	??_disk_readp& (0+255),c
 12046  00152E  0E40               	movlw	64
 12047  001530                     u9477:
 12048  001530  2EE8               	decfsz	wreg,f,c
 12049  001532  D7FE               	bra	u9477
 12050  001534  2E26               	decfsz	??_disk_readp& (0+255),f,c
 12051  001536  D7FC               	bra	u9477
 12052  001538  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 12053  00153A  D7FA               	bra	u9477
 12054                           
 12055                           ;diskio.c: 255: command(0X4C,0X00000000,0X00);
 12056  00153C  0E00               	movlw	0
 12057  00153E  6E1E               	movwf	command@arg,c
 12058  001540  0E00               	movlw	0
 12059  001542  6E1F               	movwf	command@arg+1,c
 12060  001544  0E00               	movlw	0
 12061  001546  6E20               	movwf	command@arg+2,c
 12062  001548  0E00               	movlw	0
 12063  00154A  6E21               	movwf	command@arg+3,c
 12064  00154C  0E00               	movlw	0
 12065  00154E  6E22               	movwf	command@CRC,c
 12066  001550  0E4C               	movlw	76
 12067  001552  EC36  F018         	call	_command
 12068                           
 12069                           ;diskio.c: 256: proceed();
 12070  001556  EC58  F01A         	call	_proceed	;wreg free
 12071  00155A                     
 12072                           ;diskio.c: 258: buff = response();
 12073  00155A  EC4B  F01A         	call	_response	;wreg free
 12074  00155E  0100               	movlb	0	; () banked
 12075  001560  6F6F               	movwf	disk_readp@buff& (0+255),b
 12076                           
 12077                           ; BSR set to: 0
 12078                           ;diskio.c: 259: }while(buff!=0xFF);
 12079  001562  296F               	incf	disk_readp@buff& (0+255),w,b
 12080  001564  A4D8               	btfss	status,2,c
 12081  001566  D7F9               	goto	l322
 12082                           
 12083                           ; BSR set to: 0
 12084                           ;diskio.c: 261: length = 0;
 12085                           
 12086                           ; BSR set to: 0
 12087  001568  0E00               	movlw	0
 12088  00156A  6F71               	movwf	(disk_readp@length+1)& (0+255),b
 12089  00156C  0E00               	movlw	0
 12090  00156E  6F70               	movwf	disk_readp@length& (0+255),b
 12091                           
 12092                           ; BSR set to: 0
 12093                           ;diskio.c: 262: if(flag == 1){
 12094  001570  043B               	decf	_flag,w,c
 12095  001572  103C               	iorwf	_flag+1,w,c
 12096  001574  B4D8               	btfsc	status,2,c
 12097  001576  D003               	goto	l325
 12098  001578  D00C               	goto	l324
 12099  00157A                     
 12100                           ; BSR set to: 0
 12101                           ;diskio.c: 264: {
 12102                           ;diskio.c: 266: length++;
 12103                           
 12104                           ; BSR set to: 0
 12105  00157A  4B70               	infsnz	disk_readp@length& (0+255),f,b
 12106  00157C  2B71               	incf	(disk_readp@length+1)& (0+255),f,b
 12107  00157E                     l325:
 12108                           
 12109                           ; BSR set to: 0
 12110                           
 12111                           ; BSR set to: 0
 12112  00157E  0E2D               	movlw	low disk_readp@arr
 12113  001580  2570               	addwf	disk_readp@length& (0+255),w,b
 12114  001582  6ED9               	movwf	fsr2l,c
 12115  001584  0E02               	movlw	high disk_readp@arr
 12116  001586  2171               	addwfc	(disk_readp@length+1)& (0+255),w,b
 12117  001588  6EDA               	movwf	fsr2h,c
 12118  00158A  50DF               	movf	indf2,w,c
 12119  00158C  B4D8               	btfsc	status,2,c
 12120  00158E  D00C               	goto	l328
 12121  001590  D7F4               	goto	l326
 12122  001592                     l324:
 12123                           
 12124                           ; BSR set to: 0
 12125                           ;diskio.c: 269: else
 12126                           ;diskio.c: 270: {
 12127                           ;diskio.c: 271: posicao_cursor_lcd(2,0);
 12128                           
 12129                           ; BSR set to: 0
 12130  001592  0E00               	movlw	0
 12131  001594  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 12132  001596  0E02               	movlw	2
 12133  001598  EC64  F017         	call	_posicao_cursor_lcd
 12134                           
 12135                           ;diskio.c: 272: escreve_frase_ram_lcd("..");
 12136  00159C  0E7B               	movlw	low STR_7
 12137  00159E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 12138  0015A0  0E62               	movlw	high STR_7
 12139  0015A2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 12140  0015A4  EC8F  F018         	call	_escreve_frase_ram_lcd	;wreg free
 12141  0015A8                     l328:
 12142                           
 12143                           ;diskio.c: 273: }
 12144                           ;diskio.c: 274: _delay((unsigned long)((2000)*(48000000/4000.0)));
 12145  0015A8  0E7A               	movlw	122
 12146  0015AA  6E27               	movwf	(??_disk_readp+1)& (0+255),c
 12147  0015AC  0EC1               	movlw	193
 12148  0015AE  6E26               	movwf	??_disk_readp& (0+255),c
 12149  0015B0  0E82               	movlw	130
 12150  0015B2                     u9487:
 12151  0015B2  2EE8               	decfsz	wreg,f,c
 12152  0015B4  D7FE               	bra	u9487
 12153  0015B6  2E26               	decfsz	??_disk_readp& (0+255),f,c
 12154  0015B8  D7FC               	bra	u9487
 12155  0015BA  2E27               	decfsz	(??_disk_readp+1)& (0+255),f,c
 12156  0015BC  D7FA               	bra	u9487
 12157                           
 12158                           ;diskio.c: 276: return RES_OK;
 12159  0015BE  0E00               	movlw	0
 12160  0015C0  0012               	return	
 12161  0015C2                     __end_of_disk_readp:
 12162                           	opt stack 0
 12163                           tosu	equ	0xFFF
 12164                           tosh	equ	0xFFE
 12165                           tosl	equ	0xFFD
 12166                           pclath	equ	0xFFA
 12167                           tblptru	equ	0xFF8
 12168                           tblptrh	equ	0xFF7
 12169                           tblptrl	equ	0xFF6
 12170                           tablat	equ	0xFF5
 12171                           prodh	equ	0xFF4
 12172                           prodl	equ	0xFF3
 12173                           intcon	equ	0xFF2
 12174                           intcon2	equ	0xFF1
 12175                           intcon3	equ	0xFF0
 12176                           postinc0	equ	0xFEE
 12177                           wreg	equ	0xFE8
 12178                           indf1	equ	0xFE7
 12179                           postinc1	equ	0xFE6
 12180                           postdec1	equ	0xFE5
 12181                           fsr1h	equ	0xFE2
 12182                           fsr1l	equ	0xFE1
 12183                           indf2	equ	0xFDF
 12184                           postinc2	equ	0xFDE
 12185                           postdec2	equ	0xFDD
 12186                           plusw2	equ	0xFDB
 12187                           fsr2h	equ	0xFDA
 12188                           fsr2l	equ	0xFD9
 12189                           status	equ	0xFD8
 12190                           
 12191 ;; *************** function _response *****************
 12192 ;; Defined at:
 12193 ;;		line 319 in file "bibliotecas/SDCard.c"
 12194 ;; Parameters:    Size  Location     Type
 12195 ;;		None
 12196 ;; Auto vars:     Size  Location     Type
 12197 ;;  buff            1   28[COMRAM] unsigned char 
 12198 ;; Return value:  Size  Location     Type
 12199 ;;                  1    wreg      unsigned char 
 12200 ;; Registers used:
 12201 ;;		wreg, status,2, cstack
 12202 ;; Tracked objects:
 12203 ;;		On entry : 0/0
 12204 ;;		On exit  : 0/0
 12205 ;;		Unchanged: 0/0
 12206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12207 ;;      Params:         0       0       0       0       0       0       0       0       0
 12208 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12209 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12210 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12211 ;;Total ram usage:        1 bytes
 12212 ;; Hardware stack levels used:    1
 12213 ;; Hardware stack levels required when called:    3
 12214 ;; This function calls:
 12215 ;;		_recebe_dado_SPI
 12216 ;; This function is called by:
 12217 ;;		_disk_initialize
 12218 ;;		_disk_readp
 12219 ;;		_disk_writep
 12220 ;; This function uses a non-reentrant model
 12221 ;;
 12222                           
 12223                           	psect	text45
 12224  003496                     __ptext45:
 12225                           	opt stack 0
 12226  003496                     _response:
 12227                           	opt stack 22
 12228                           
 12229                           ;SDCard.c: 322: unsigned char buff;
 12230                           ;SDCard.c: 323: LATBbits.LATB4 = 1;
 12231                           
 12232                           ;incstack = 0
 12233  003496  888A               	bsf	3978,4,c	;volatile
 12234                           
 12235                           ;SDCard.c: 324: buff= recebe_dado_SPI();
 12236  003498  EC87  F019         	call	_recebe_dado_SPI	;wreg free
 12237  00349C  6E1D               	movwf	response@buff,c
 12238                           
 12239                           ;SDCard.c: 325: LATBbits.LATB4 = 0;
 12240  00349E  988A               	bcf	3978,4,c	;volatile
 12241                           
 12242                           ;SDCard.c: 326: return buff;
 12243  0034A0  501D               	movf	response@buff,w,c
 12244  0034A2  0012               	return	
 12245  0034A4                     __end_of_response:
 12246                           	opt stack 0
 12247                           tosu	equ	0xFFF
 12248                           tosh	equ	0xFFE
 12249                           tosl	equ	0xFFD
 12250                           pclath	equ	0xFFA
 12251                           tblptru	equ	0xFF8
 12252                           tblptrh	equ	0xFF7
 12253                           tblptrl	equ	0xFF6
 12254                           tablat	equ	0xFF5
 12255                           prodh	equ	0xFF4
 12256                           prodl	equ	0xFF3
 12257                           intcon	equ	0xFF2
 12258                           intcon2	equ	0xFF1
 12259                           intcon3	equ	0xFF0
 12260                           postinc0	equ	0xFEE
 12261                           wreg	equ	0xFE8
 12262                           indf1	equ	0xFE7
 12263                           postinc1	equ	0xFE6
 12264                           postdec1	equ	0xFE5
 12265                           fsr1h	equ	0xFE2
 12266                           fsr1l	equ	0xFE1
 12267                           indf2	equ	0xFDF
 12268                           postinc2	equ	0xFDE
 12269                           postdec2	equ	0xFDD
 12270                           plusw2	equ	0xFDB
 12271                           fsr2h	equ	0xFDA
 12272                           fsr2l	equ	0xFD9
 12273                           status	equ	0xFD8
 12274                           
 12275 ;; *************** function _recebe_dado_SPI *****************
 12276 ;; Defined at:
 12277 ;;		line 107 in file "bibliotecas/SPI.c"
 12278 ;; Parameters:    Size  Location     Type
 12279 ;;		None
 12280 ;; Auto vars:     Size  Location     Type
 12281 ;;  temp_var        1   27[COMRAM] unsigned char 
 12282 ;; Return value:  Size  Location     Type
 12283 ;;                  1    wreg      unsigned char 
 12284 ;; Registers used:
 12285 ;;		wreg, status,2
 12286 ;; Tracked objects:
 12287 ;;		On entry : 0/0
 12288 ;;		On exit  : 0/0
 12289 ;;		Unchanged: 0/0
 12290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12291 ;;      Params:         0       0       0       0       0       0       0       0       0
 12292 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12293 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12294 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12295 ;;Total ram usage:        3 bytes
 12296 ;; Hardware stack levels used:    1
 12297 ;; Hardware stack levels required when called:    2
 12298 ;; This function calls:
 12299 ;;		Nothing
 12300 ;; This function is called by:
 12301 ;;		_response
 12302 ;; This function uses a non-reentrant model
 12303 ;;
 12304                           
 12305                           	psect	text46
 12306  00330E                     __ptext46:
 12307                           	opt stack 0
 12308  00330E                     _recebe_dado_SPI:
 12309                           	opt stack 22
 12310                           
 12311                           ;SPI.c: 109: PIR1bits.SSPIF = 0;
 12312                           
 12313                           ;incstack = 0
 12314  00330E  969E               	bcf	3998,3,c	;volatile
 12315                           
 12316                           ;SPI.c: 110: unsigned char temp_var;
 12317                           ;SPI.c: 111: temp_var = SSPBUF;
 12318  003310  CFC9 F01C          	movff	4041,recebe_dado_SPI@temp_var	;volatile
 12319                           
 12320                           ;SPI.c: 112: SSPBUF = 0x00;
 12321  003314  0E00               	movlw	0
 12322  003316  6EC9               	movwf	4041,c	;volatile
 12323                           
 12324                           ;SPI.c: 113: _delay((unsigned long)((50)*(48000000/4000.0)));
 12325  003318  0E04               	movlw	4
 12326  00331A  6E1B               	movwf	(??_recebe_dado_SPI+1)& (0+255),c
 12327  00331C  0E0C               	movlw	12
 12328  00331E  6E1A               	movwf	??_recebe_dado_SPI& (0+255),c
 12329  003320  0E34               	movlw	52
 12330  003322                     u9497:
 12331  003322  2EE8               	decfsz	wreg,f,c
 12332  003324  D7FE               	bra	u9497
 12333  003326  2E1A               	decfsz	??_recebe_dado_SPI& (0+255),f,c
 12334  003328  D7FC               	bra	u9497
 12335  00332A  2E1B               	decfsz	(??_recebe_dado_SPI+1)& (0+255),f,c
 12336  00332C  D7FA               	bra	u9497
 12337  00332E  A69E               	btfss	3998,3,c	;volatile
 12338  003330  D7FE               	goto	l137
 12339                           
 12340                           ;SPI.c: 115: return (SSPBUF);
 12341  003332  50C9               	movf	4041,w,c	;volatile
 12342  003334  0012               	return	
 12343  003336                     __end_of_recebe_dado_SPI:
 12344                           	opt stack 0
 12345                           tosu	equ	0xFFF
 12346                           tosh	equ	0xFFE
 12347                           tosl	equ	0xFFD
 12348                           pclath	equ	0xFFA
 12349                           tblptru	equ	0xFF8
 12350                           tblptrh	equ	0xFF7
 12351                           tblptrl	equ	0xFF6
 12352                           tablat	equ	0xFF5
 12353                           prodh	equ	0xFF4
 12354                           prodl	equ	0xFF3
 12355                           intcon	equ	0xFF2
 12356                           intcon2	equ	0xFF1
 12357                           intcon3	equ	0xFF0
 12358                           postinc0	equ	0xFEE
 12359                           wreg	equ	0xFE8
 12360                           indf1	equ	0xFE7
 12361                           postinc1	equ	0xFE6
 12362                           postdec1	equ	0xFE5
 12363                           fsr1h	equ	0xFE2
 12364                           fsr1l	equ	0xFE1
 12365                           indf2	equ	0xFDF
 12366                           postinc2	equ	0xFDE
 12367                           postdec2	equ	0xFDD
 12368                           plusw2	equ	0xFDB
 12369                           fsr2h	equ	0xFDA
 12370                           fsr2l	equ	0xFD9
 12371                           status	equ	0xFD8
 12372                           
 12373 ;; *************** function _proceed *****************
 12374 ;; Defined at:
 12375 ;;		line 342 in file "bibliotecas/SDCard.c"
 12376 ;; Parameters:    Size  Location     Type
 12377 ;;		None
 12378 ;; Auto vars:     Size  Location     Type
 12379 ;;		None
 12380 ;; Return value:  Size  Location     Type
 12381 ;;                  1    wreg      void 
 12382 ;; Registers used:
 12383 ;;		wreg, status,2, cstack
 12384 ;; Tracked objects:
 12385 ;;		On entry : 0/0
 12386 ;;		On exit  : 0/0
 12387 ;;		Unchanged: 0/0
 12388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12389 ;;      Params:         0       0       0       0       0       0       0       0       0
 12390 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12391 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12392 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12393 ;;Total ram usage:        0 bytes
 12394 ;; Hardware stack levels used:    1
 12395 ;; Hardware stack levels required when called:    3
 12396 ;; This function calls:
 12397 ;;		_WriteSPI_
 12398 ;; This function is called by:
 12399 ;;		_reset
 12400 ;;		_disk_initialize
 12401 ;;		_disk_readp
 12402 ;;		_disk_writep
 12403 ;;		_SDCard
 12404 ;; This function uses a non-reentrant model
 12405 ;;
 12406                           
 12407                           	psect	text47
 12408  0034B0                     __ptext47:
 12409                           	opt stack 0
 12410  0034B0                     _proceed:
 12411                           	opt stack 25
 12412                           
 12413                           ;SDCard.c: 344: LATBbits.LATB4 = 1;
 12414                           
 12415                           ;incstack = 0
 12416  0034B0  888A               	bsf	3978,4,c	;volatile
 12417                           
 12418                           ;SDCard.c: 345: WriteSPI_(0xFF);
 12419  0034B2  0EFF               	movlw	255
 12420  0034B4  ECB8  F018         	call	_WriteSPI_
 12421                           
 12422                           ;SDCard.c: 346: LATBbits.LATB4 = 0;
 12423  0034B8  988A               	bcf	3978,4,c	;volatile
 12424  0034BA  0012               	return		;funcret
 12425  0034BC                     __end_of_proceed:
 12426                           	opt stack 0
 12427                           tosu	equ	0xFFF
 12428                           tosh	equ	0xFFE
 12429                           tosl	equ	0xFFD
 12430                           pclath	equ	0xFFA
 12431                           tblptru	equ	0xFF8
 12432                           tblptrh	equ	0xFF7
 12433                           tblptrl	equ	0xFF6
 12434                           tablat	equ	0xFF5
 12435                           prodh	equ	0xFF4
 12436                           prodl	equ	0xFF3
 12437                           intcon	equ	0xFF2
 12438                           intcon2	equ	0xFF1
 12439                           intcon3	equ	0xFF0
 12440                           postinc0	equ	0xFEE
 12441                           wreg	equ	0xFE8
 12442                           indf1	equ	0xFE7
 12443                           postinc1	equ	0xFE6
 12444                           postdec1	equ	0xFE5
 12445                           fsr1h	equ	0xFE2
 12446                           fsr1l	equ	0xFE1
 12447                           indf2	equ	0xFDF
 12448                           postinc2	equ	0xFDE
 12449                           postdec2	equ	0xFDD
 12450                           plusw2	equ	0xFDB
 12451                           fsr2h	equ	0xFDA
 12452                           fsr2l	equ	0xFD9
 12453                           status	equ	0xFD8
 12454                           
 12455 ;; *************** function _posicao_cursor_lcd *****************
 12456 ;; Defined at:
 12457 ;;		line 271 in file "bibliotecas/display_lcd.c"
 12458 ;; Parameters:    Size  Location     Type
 12459 ;;  linha           1    wreg     unsigned char 
 12460 ;;  coluna          1   28[COMRAM] unsigned char 
 12461 ;; Auto vars:     Size  Location     Type
 12462 ;;  linha           1   29[COMRAM] unsigned char 
 12463 ;;  endereco        1   30[COMRAM] unsigned char 
 12464 ;; Return value:  Size  Location     Type
 12465 ;;                  1    wreg      void 
 12466 ;; Registers used:
 12467 ;;		wreg, status,2, status,0, cstack
 12468 ;; Tracked objects:
 12469 ;;		On entry : 0/0
 12470 ;;		On exit  : 0/0
 12471 ;;		Unchanged: 0/0
 12472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12473 ;;      Params:         1       0       0       0       0       0       0       0       0
 12474 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12475 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12476 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12477 ;;Total ram usage:        3 bytes
 12478 ;; Hardware stack levels used:    1
 12479 ;; Hardware stack levels required when called:    4
 12480 ;; This function calls:
 12481 ;;		_endereco_cursor_lcd
 12482 ;; This function is called by:
 12483 ;;		_inicializa_SPI
 12484 ;;		_disk_initialize
 12485 ;;		_disk_readp
 12486 ;;		_mensagem_inicial
 12487 ;;		_SDCard
 12488 ;;		_leitura_chave
 12489 ;; This function uses a non-reentrant model
 12490 ;;
 12491                           
 12492                           	psect	text48
 12493  002EC8                     __ptext48:
 12494                           	opt stack 0
 12495  002EC8                     _posicao_cursor_lcd:
 12496                           	opt stack 25
 12497                           
 12498                           ;incstack = 0
 12499                           ;posicao_cursor_lcd@linha stored from wreg
 12500  002EC8  6E1E               	movwf	posicao_cursor_lcd@linha,c
 12501                           
 12502                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 12503  002ECA  0E00               	movlw	0
 12504  002ECC  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12505                           
 12506                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 12507  002ECE  0E11               	movlw	17
 12508  002ED0  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 12509  002ED2  D02F               	goto	l407
 12510  002ED4  D01E               	goto	l408
 12511  002ED6                     l409:
 12512                           
 12513                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 12514  002ED6  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 12515                           
 12516                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 12517  002EDA  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12518  002EDC  EC9C  F017         	call	_endereco_cursor_lcd
 12519                           
 12520                           ;display_lcd.c: 284: break;
 12521  002EE0  D026               	goto	l410
 12522  002EE2                     
 12523                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 12524  002EE2  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12525  002EE4  0F40               	addlw	64
 12526  002EE6  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12527                           
 12528                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 12529  002EE8  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12530  002EEA  EC9C  F017         	call	_endereco_cursor_lcd
 12531                           
 12532                           ;display_lcd.c: 289: break;
 12533  002EEE  D01F               	goto	l410
 12534  002EF0                     
 12535                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 12536  002EF0  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12537  002EF2  0F14               	addlw	20
 12538  002EF4  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12539                           
 12540                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 12541  002EF6  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12542  002EF8  EC9C  F017         	call	_endereco_cursor_lcd
 12543                           
 12544                           ;display_lcd.c: 294: break;
 12545  002EFC  D018               	goto	l410
 12546  002EFE                     
 12547                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 12548  002EFE  501D               	movf	posicao_cursor_lcd@coluna,w,c
 12549  002F00  0F54               	addlw	84
 12550  002F02  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12551                           
 12552                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 12553  002F04  501F               	movf	posicao_cursor_lcd@endereco,w,c
 12554  002F06  EC9C  F017         	call	_endereco_cursor_lcd
 12555                           
 12556                           ;display_lcd.c: 299: break;
 12557  002F0A  D011               	goto	l410
 12558  002F0C                     
 12559                           ;display_lcd.c: 302: endereco = 0x00U;
 12560  002F0C  0E00               	movlw	0
 12561  002F0E  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12562                           
 12563                           ;display_lcd.c: 304: }
 12564                           
 12565                           ;display_lcd.c: 303: break;
 12566  002F10  D00E               	goto	l410
 12567  002F12                     l408:
 12568  002F12  501E               	movf	posicao_cursor_lcd@linha,w,c
 12569                           
 12570                           ; Switch size 1, requested type "space"
 12571                           ; Number of cases is 4, Range of values is 1 to 4
 12572                           ; switch strategies available:
 12573                           ; Name         Instructions Cycles
 12574                           ; simple_byte           13     7 (average)
 12575                           ;	Chosen strategy is simple_byte
 12576  002F14  0A01               	xorlw	1	; case 1
 12577  002F16  B4D8               	btfsc	status,2,c
 12578  002F18  D7DE               	goto	l409
 12579  002F1A  0A03               	xorlw	3	; case 2
 12580  002F1C  B4D8               	btfsc	status,2,c
 12581  002F1E  D7E1               	goto	l411
 12582  002F20  0A01               	xorlw	1	; case 3
 12583  002F22  B4D8               	btfsc	status,2,c
 12584  002F24  D7E5               	goto	l412
 12585  002F26  0A07               	xorlw	7	; case 4
 12586  002F28  B4D8               	btfsc	status,2,c
 12587  002F2A  D7E9               	goto	l413
 12588  002F2C  D7EF               	goto	l414
 12589  002F2E                     l410:
 12590                           
 12591                           ;display_lcd.c: 306: coluna++;
 12592  002F2E  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 12593                           
 12594                           ;display_lcd.c: 307: }
 12595  002F30  0012               	return	
 12596  002F32                     l407:
 12597                           
 12598                           ;display_lcd.c: 308: else
 12599                           ;display_lcd.c: 309: {
 12600                           ;display_lcd.c: 310: endereco = 0x00U;
 12601  002F32  0E00               	movlw	0
 12602  002F34  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 12603  002F36  0012               	return	
 12604  002F38                     __end_of_posicao_cursor_lcd:
 12605                           	opt stack 0
 12606                           tosu	equ	0xFFF
 12607                           tosh	equ	0xFFE
 12608                           tosl	equ	0xFFD
 12609                           pclath	equ	0xFFA
 12610                           tblptru	equ	0xFF8
 12611                           tblptrh	equ	0xFF7
 12612                           tblptrl	equ	0xFF6
 12613                           tablat	equ	0xFF5
 12614                           prodh	equ	0xFF4
 12615                           prodl	equ	0xFF3
 12616                           intcon	equ	0xFF2
 12617                           intcon2	equ	0xFF1
 12618                           intcon3	equ	0xFF0
 12619                           postinc0	equ	0xFEE
 12620                           wreg	equ	0xFE8
 12621                           indf1	equ	0xFE7
 12622                           postinc1	equ	0xFE6
 12623                           postdec1	equ	0xFE5
 12624                           fsr1h	equ	0xFE2
 12625                           fsr1l	equ	0xFE1
 12626                           indf2	equ	0xFDF
 12627                           postinc2	equ	0xFDE
 12628                           postdec2	equ	0xFDD
 12629                           plusw2	equ	0xFDB
 12630                           fsr2h	equ	0xFDA
 12631                           fsr2l	equ	0xFD9
 12632                           status	equ	0xFD8
 12633                           
 12634 ;; *************** function _endereco_cursor_lcd *****************
 12635 ;; Defined at:
 12636 ;;		line 218 in file "bibliotecas/display_lcd.c"
 12637 ;; Parameters:    Size  Location     Type
 12638 ;;  endereco        1    wreg     unsigned char 
 12639 ;; Auto vars:     Size  Location     Type
 12640 ;;  endereco        1   27[COMRAM] unsigned char 
 12641 ;; Return value:  Size  Location     Type
 12642 ;;                  1    wreg      void 
 12643 ;; Registers used:
 12644 ;;		wreg, status,2, status,0, cstack
 12645 ;; Tracked objects:
 12646 ;;		On entry : 0/0
 12647 ;;		On exit  : 0/0
 12648 ;;		Unchanged: 0/0
 12649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12650 ;;      Params:         0       0       0       0       0       0       0       0       0
 12651 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12652 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12653 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12654 ;;Total ram usage:        1 bytes
 12655 ;; Hardware stack levels used:    1
 12656 ;; Hardware stack levels required when called:    3
 12657 ;; This function calls:
 12658 ;;		_delay
 12659 ;; This function is called by:
 12660 ;;		_posicao_cursor_lcd
 12661 ;;		_cria_caractere_lcd
 12662 ;; This function uses a non-reentrant model
 12663 ;;
 12664                           
 12665                           	psect	text49
 12666  002F38                     __ptext49:
 12667                           	opt stack 0
 12668  002F38                     _endereco_cursor_lcd:
 12669                           	opt stack 25
 12670                           
 12671                           ;incstack = 0
 12672                           ;endereco_cursor_lcd@endereco stored from wreg
 12673  002F38  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 12674                           
 12675                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 12676  002F3A  9483               	bcf	3971,2,c	;volatile
 12677                           
 12678                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 12679  002F3C  9283               	bcf	3971,1,c	;volatile
 12680                           
 12681                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 12682  002F3E  9083               	bcf	3971,0,c	;volatile
 12683                           
 12684                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 12685  002F40  8E83               	bsf	3971,7,c	;volatile
 12686                           
 12687                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 12688  002F42  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 12689  002F44  D002               	goto	l390
 12690  002F46  8883               	bsf	3971,4,c	;volatile
 12691  002F48  D001               	goto	l391
 12692  002F4A                     l390:
 12693                           
 12694                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 12695  002F4A  9883               	bcf	3971,4,c	;volatile
 12696  002F4C                     l391:
 12697                           
 12698                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 12699  002F4C  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 12700  002F4E  D002               	goto	l392
 12701  002F50  8A83               	bsf	3971,5,c	;volatile
 12702  002F52  D001               	goto	l393
 12703  002F54                     l392:
 12704                           
 12705                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 12706  002F54  9A83               	bcf	3971,5,c	;volatile
 12707  002F56                     l393:
 12708                           
 12709                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 12710  002F56  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 12711  002F58  D002               	goto	l394
 12712  002F5A  8C83               	bsf	3971,6,c	;volatile
 12713  002F5C  D001               	goto	l395
 12714  002F5E                     l394:
 12715                           
 12716                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 12717  002F5E  9C83               	bcf	3971,6,c	;volatile
 12718  002F60                     l395:
 12719                           
 12720                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 12721  002F60  8083               	bsf	3971,0,c	;volatile
 12722                           
 12723                           ;display_lcd.c: 236: delay();
 12724  002F62  ECAD  F019         	call	_delay	;wreg free
 12725                           
 12726                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 12727  002F66  9083               	bcf	3971,0,c	;volatile
 12728                           
 12729                           ;display_lcd.c: 238: delay();
 12730  002F68  ECAD  F019         	call	_delay	;wreg free
 12731                           
 12732                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 12733  002F6C  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 12734  002F6E  D002               	goto	l396
 12735  002F70  8883               	bsf	3971,4,c	;volatile
 12736  002F72  D001               	goto	l397
 12737  002F74                     l396:
 12738                           
 12739                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 12740  002F74  9883               	bcf	3971,4,c	;volatile
 12741  002F76                     l397:
 12742                           
 12743                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 12744  002F76  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 12745  002F78  D002               	goto	l398
 12746  002F7A  8A83               	bsf	3971,5,c	;volatile
 12747  002F7C  D001               	goto	l399
 12748  002F7E                     l398:
 12749                           
 12750                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 12751  002F7E  9A83               	bcf	3971,5,c	;volatile
 12752  002F80                     l399:
 12753                           
 12754                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 12755  002F80  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 12756  002F82  D002               	goto	l400
 12757  002F84  8C83               	bsf	3971,6,c	;volatile
 12758  002F86  D001               	goto	l401
 12759  002F88                     l400:
 12760                           
 12761                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 12762  002F88  9C83               	bcf	3971,6,c	;volatile
 12763  002F8A                     l401:
 12764                           
 12765                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 12766  002F8A  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 12767  002F8C  D002               	goto	l402
 12768  002F8E  8E83               	bsf	3971,7,c	;volatile
 12769  002F90  D001               	goto	l403
 12770  002F92                     l402:
 12771                           
 12772                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 12773  002F92  9E83               	bcf	3971,7,c	;volatile
 12774  002F94                     l403:
 12775                           
 12776                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 12777  002F94  8083               	bsf	3971,0,c	;volatile
 12778                           
 12779                           ;display_lcd.c: 252: delay();
 12780  002F96  ECAD  F019         	call	_delay	;wreg free
 12781                           
 12782                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 12783  002F9A  9083               	bcf	3971,0,c	;volatile
 12784                           
 12785                           ;display_lcd.c: 254: delay();
 12786  002F9C  ECAD  F019         	call	_delay	;wreg free
 12787  002FA0  0012               	return		;funcret
 12788  002FA2                     __end_of_endereco_cursor_lcd:
 12789                           	opt stack 0
 12790                           tosu	equ	0xFFF
 12791                           tosh	equ	0xFFE
 12792                           tosl	equ	0xFFD
 12793                           pclath	equ	0xFFA
 12794                           tblptru	equ	0xFF8
 12795                           tblptrh	equ	0xFF7
 12796                           tblptrl	equ	0xFF6
 12797                           tablat	equ	0xFF5
 12798                           prodh	equ	0xFF4
 12799                           prodl	equ	0xFF3
 12800                           intcon	equ	0xFF2
 12801                           intcon2	equ	0xFF1
 12802                           intcon3	equ	0xFF0
 12803                           postinc0	equ	0xFEE
 12804                           wreg	equ	0xFE8
 12805                           indf1	equ	0xFE7
 12806                           postinc1	equ	0xFE6
 12807                           postdec1	equ	0xFE5
 12808                           fsr1h	equ	0xFE2
 12809                           fsr1l	equ	0xFE1
 12810                           indf2	equ	0xFDF
 12811                           postinc2	equ	0xFDE
 12812                           postdec2	equ	0xFDD
 12813                           plusw2	equ	0xFDB
 12814                           fsr2h	equ	0xFDA
 12815                           fsr2l	equ	0xFD9
 12816                           status	equ	0xFD8
 12817                           
 12818 ;; *************** function _escreve_frase_ram_lcd *****************
 12819 ;; Defined at:
 12820 ;;		line 445 in file "bibliotecas/display_lcd.c"
 12821 ;; Parameters:    Size  Location     Type
 12822 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 12823 ;;		 -> STR_21(16), STR_20(14), STR_19(14), STR_18(14), 
 12824 ;;		 -> STR_17(14), STR_16(13), STR_15(17), STR_12(17), 
 12825 ;;		 -> STR_11(15), STR_10(14), mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 12826 ;;		 -> escreve_inteiro_lcd@texto(7), STR_7(3), STR_6(8), STR_5(14), 
 12827 ;;		 -> STR_4(13), STR_3(9), STR_2(14), leitura_chave@pos_ignicao_on(17), 
 12828 ;;		 -> leitura_chave@pos_ignicao_crank(17), leitura_chave@pos_ignicao_off(17), STR_1(17), 
 12829 ;; Auto vars:     Size  Location     Type
 12830 ;;		None
 12831 ;; Return value:  Size  Location     Type
 12832 ;;                  1    wreg      void 
 12833 ;; Registers used:
 12834 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12835 ;; Tracked objects:
 12836 ;;		On entry : 0/0
 12837 ;;		On exit  : 0/0
 12838 ;;		Unchanged: 0/0
 12839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12840 ;;      Params:         2       0       0       0       0       0       0       0       0
 12841 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12842 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12843 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12844 ;;Total ram usage:        2 bytes
 12845 ;; Hardware stack levels used:    1
 12846 ;; Hardware stack levels required when called:    4
 12847 ;; This function calls:
 12848 ;;		_escreve_caractere_lcd
 12849 ;; This function is called by:
 12850 ;;		_inicializa_SPI
 12851 ;;		_disk_initialize
 12852 ;;		_disk_readp
 12853 ;;		_mensagem_inicial
 12854 ;;		_SDCard
 12855 ;;		_leitura_chave
 12856 ;;		_escreve_inteiro_lcd
 12857 ;; This function uses a non-reentrant model
 12858 ;;
 12859                           
 12860                           	psect	text50
 12861  00311E                     __ptext50:
 12862                           	opt stack 0
 12863  00311E                     _escreve_frase_ram_lcd:
 12864                           	opt stack 25
 12865                           
 12866                           ;display_lcd.c: 447: while(*buffer)
 12867                           
 12868                           ;incstack = 0
 12869  00311E  D014               	goto	l452
 12870  003120                     
 12871                           ;display_lcd.c: 448: {
 12872                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 12873  003120  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 12874  003124  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 12875  003128  6AF8               	clrf	tblptru,c
 12876  00312A  0E07               	movlw	(high __ramtop+-1)
 12877  00312C  64F7               	cpfsgt	tblptrh,c
 12878  00312E  D003               	bra	u6787
 12879  003130  0008               	tblrd		*
 12880  003132  50F5               	movf	tablat,w,c
 12881  003134  D005               	bra	u6780
 12882  003136                     u6787:
 12883  003136  CFF6 FFE9          	movff	tblptrl,fsr0l
 12884  00313A  CFF7 FFEA          	movff	tblptrh,fsr0h
 12885  00313E  50EF               	movf	indf0,w,c
 12886  003140                     u6780:
 12887  003140  ECF3  F016         	call	_escreve_caractere_lcd
 12888                           
 12889                           ;display_lcd.c: 450: buffer++;
 12890  003144  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 12891  003146  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 12892  003148                     l452:
 12893  003148  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 12894  00314C  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 12895  003150  6AF8               	clrf	tblptru,c
 12896  003152  0E07               	movlw	(high __ramtop+-1)
 12897  003154  64F7               	cpfsgt	tblptrh,c
 12898  003156  D003               	bra	u6797
 12899  003158  0008               	tblrd		*
 12900  00315A  50F5               	movf	tablat,w,c
 12901  00315C  D005               	bra	u6790
 12902  00315E                     u6797:
 12903  00315E  CFF6 FFE9          	movff	tblptrl,fsr0l
 12904  003162  CFF7 FFEA          	movff	tblptrh,fsr0h
 12905  003166  50EF               	movf	indf0,w,c
 12906  003168                     u6790:
 12907  003168  0900               	iorlw	0
 12908  00316A  B4D8               	btfsc	status,2,c
 12909  00316C  0012               	return	
 12910  00316E  D7D8               	goto	l453
 12911  003170                     __end_of_escreve_frase_ram_lcd:
 12912                           	opt stack 0
 12913                           tosu	equ	0xFFF
 12914                           tosh	equ	0xFFE
 12915                           tosl	equ	0xFFD
 12916                           pclath	equ	0xFFA
 12917                           tblptru	equ	0xFF8
 12918                           tblptrh	equ	0xFF7
 12919                           tblptrl	equ	0xFF6
 12920                           tablat	equ	0xFF5
 12921                           prodh	equ	0xFF4
 12922                           prodl	equ	0xFF3
 12923                           intcon	equ	0xFF2
 12924                           intcon2	equ	0xFF1
 12925                           intcon3	equ	0xFF0
 12926                           indf0	equ	0xFEF
 12927                           postinc0	equ	0xFEE
 12928                           fsr0h	equ	0xFEA
 12929                           fsr0l	equ	0xFE9
 12930                           wreg	equ	0xFE8
 12931                           indf1	equ	0xFE7
 12932                           postinc1	equ	0xFE6
 12933                           postdec1	equ	0xFE5
 12934                           fsr1h	equ	0xFE2
 12935                           fsr1l	equ	0xFE1
 12936                           indf2	equ	0xFDF
 12937                           postinc2	equ	0xFDE
 12938                           postdec2	equ	0xFDD
 12939                           plusw2	equ	0xFDB
 12940                           fsr2h	equ	0xFDA
 12941                           fsr2l	equ	0xFD9
 12942                           status	equ	0xFD8
 12943                           
 12944 ;; *************** function _escreve_caractere_lcd *****************
 12945 ;; Defined at:
 12946 ;;		line 323 in file "bibliotecas/display_lcd.c"
 12947 ;; Parameters:    Size  Location     Type
 12948 ;;  data            1    wreg     unsigned char 
 12949 ;; Auto vars:     Size  Location     Type
 12950 ;;  data            1   27[COMRAM] unsigned char 
 12951 ;; Return value:  Size  Location     Type
 12952 ;;                  1    wreg      void 
 12953 ;; Registers used:
 12954 ;;		wreg, status,2, status,0, cstack
 12955 ;; Tracked objects:
 12956 ;;		On entry : 0/0
 12957 ;;		On exit  : 0/0
 12958 ;;		Unchanged: 0/0
 12959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12960 ;;      Params:         0       0       0       0       0       0       0       0       0
 12961 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12962 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12963 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12964 ;;Total ram usage:        1 bytes
 12965 ;; Hardware stack levels used:    1
 12966 ;; Hardware stack levels required when called:    3
 12967 ;; This function calls:
 12968 ;;		_delay
 12969 ;; This function is called by:
 12970 ;;		_escreve_frase_ram_lcd
 12971 ;;		_escreve_float_lcd
 12972 ;;		_escreve_frase_lcd
 12973 ;;		_cria_caractere_lcd
 12974 ;; This function uses a non-reentrant model
 12975 ;;
 12976                           
 12977                           	psect	text51
 12978  002DE6                     __ptext51:
 12979                           	opt stack 0
 12980  002DE6                     _escreve_caractere_lcd:
 12981                           	opt stack 25
 12982                           
 12983                           ;incstack = 0
 12984                           ;escreve_caractere_lcd@data stored from wreg
 12985  002DE6  6E1C               	movwf	escreve_caractere_lcd@data,c
 12986                           
 12987                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 12988  002DE8  9483               	bcf	3971,2,c	;volatile
 12989                           
 12990                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 12991  002DEA  8283               	bsf	3971,1,c	;volatile
 12992                           
 12993                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 12994  002DEC  9083               	bcf	3971,0,c	;volatile
 12995                           
 12996                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 12997  002DEE  A81C               	btfss	escreve_caractere_lcd@data,4,c
 12998  002DF0  D002               	goto	l419
 12999  002DF2  8883               	bsf	3971,4,c	;volatile
 13000  002DF4  D001               	goto	l420
 13001  002DF6                     l419:
 13002                           
 13003                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 13004  002DF6  9883               	bcf	3971,4,c	;volatile
 13005  002DF8                     l420:
 13006                           
 13007                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 13008  002DF8  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 13009  002DFA  D002               	goto	l421
 13010  002DFC  8A83               	bsf	3971,5,c	;volatile
 13011  002DFE  D001               	goto	l422
 13012  002E00                     l421:
 13013                           
 13014                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 13015  002E00  9A83               	bcf	3971,5,c	;volatile
 13016  002E02                     l422:
 13017                           
 13018                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 13019  002E02  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 13020  002E04  D002               	goto	l423
 13021  002E06  8C83               	bsf	3971,6,c	;volatile
 13022  002E08  D001               	goto	l424
 13023  002E0A                     l423:
 13024                           
 13025                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 13026  002E0A  9C83               	bcf	3971,6,c	;volatile
 13027  002E0C                     l424:
 13028                           
 13029                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 13030  002E0C  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 13031  002E0E  D002               	goto	l425
 13032  002E10  8E83               	bsf	3971,7,c	;volatile
 13033  002E12  D001               	goto	l426
 13034  002E14                     l425:
 13035                           
 13036                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 13037  002E14  9E83               	bcf	3971,7,c	;volatile
 13038  002E16                     l426:
 13039                           
 13040                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 13041  002E16  8083               	bsf	3971,0,c	;volatile
 13042                           
 13043                           ;display_lcd.c: 342: delay();
 13044  002E18  ECAD  F019         	call	_delay	;wreg free
 13045                           
 13046                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 13047  002E1C  9083               	bcf	3971,0,c	;volatile
 13048                           
 13049                           ;display_lcd.c: 344: delay();
 13050  002E1E  ECAD  F019         	call	_delay	;wreg free
 13051                           
 13052                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 13053  002E22  A01C               	btfss	escreve_caractere_lcd@data,0,c
 13054  002E24  D002               	goto	l427
 13055  002E26  8883               	bsf	3971,4,c	;volatile
 13056  002E28  D001               	goto	l428
 13057  002E2A                     l427:
 13058                           
 13059                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 13060  002E2A  9883               	bcf	3971,4,c	;volatile
 13061  002E2C                     l428:
 13062                           
 13063                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 13064  002E2C  A21C               	btfss	escreve_caractere_lcd@data,1,c
 13065  002E2E  D002               	goto	l429
 13066  002E30  8A83               	bsf	3971,5,c	;volatile
 13067  002E32  D001               	goto	l430
 13068  002E34                     l429:
 13069                           
 13070                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 13071  002E34  9A83               	bcf	3971,5,c	;volatile
 13072  002E36                     l430:
 13073                           
 13074                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 13075  002E36  A41C               	btfss	escreve_caractere_lcd@data,2,c
 13076  002E38  D002               	goto	l431
 13077  002E3A  8C83               	bsf	3971,6,c	;volatile
 13078  002E3C  D001               	goto	l432
 13079  002E3E                     l431:
 13080                           
 13081                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 13082  002E3E  9C83               	bcf	3971,6,c	;volatile
 13083  002E40                     l432:
 13084                           
 13085                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 13086  002E40  A61C               	btfss	escreve_caractere_lcd@data,3,c
 13087  002E42  D002               	goto	l433
 13088  002E44  8E83               	bsf	3971,7,c	;volatile
 13089  002E46  D001               	goto	l434
 13090  002E48                     l433:
 13091                           
 13092                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 13093  002E48  9E83               	bcf	3971,7,c	;volatile
 13094  002E4A                     l434:
 13095                           
 13096                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 13097  002E4A  8083               	bsf	3971,0,c	;volatile
 13098                           
 13099                           ;display_lcd.c: 359: delay();
 13100  002E4C  ECAD  F019         	call	_delay	;wreg free
 13101                           
 13102                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 13103  002E50  9083               	bcf	3971,0,c	;volatile
 13104                           
 13105                           ;display_lcd.c: 361: delay();
 13106  002E52  ECAD  F019         	call	_delay	;wreg free
 13107  002E56  0012               	return		;funcret
 13108  002E58                     __end_of_escreve_caractere_lcd:
 13109                           	opt stack 0
 13110                           tosu	equ	0xFFF
 13111                           tosh	equ	0xFFE
 13112                           tosl	equ	0xFFD
 13113                           pclath	equ	0xFFA
 13114                           tblptru	equ	0xFF8
 13115                           tblptrh	equ	0xFF7
 13116                           tblptrl	equ	0xFF6
 13117                           tablat	equ	0xFF5
 13118                           prodh	equ	0xFF4
 13119                           prodl	equ	0xFF3
 13120                           intcon	equ	0xFF2
 13121                           intcon2	equ	0xFF1
 13122                           intcon3	equ	0xFF0
 13123                           indf0	equ	0xFEF
 13124                           postinc0	equ	0xFEE
 13125                           fsr0h	equ	0xFEA
 13126                           fsr0l	equ	0xFE9
 13127                           wreg	equ	0xFE8
 13128                           indf1	equ	0xFE7
 13129                           postinc1	equ	0xFE6
 13130                           postdec1	equ	0xFE5
 13131                           fsr1h	equ	0xFE2
 13132                           fsr1l	equ	0xFE1
 13133                           indf2	equ	0xFDF
 13134                           postinc2	equ	0xFDE
 13135                           postdec2	equ	0xFDD
 13136                           plusw2	equ	0xFDB
 13137                           fsr2h	equ	0xFDA
 13138                           fsr2l	equ	0xFD9
 13139                           status	equ	0xFD8
 13140                           
 13141 ;; *************** function _delay *****************
 13142 ;; Defined at:
 13143 ;;		line 45 in file "bibliotecas/display_lcd.c"
 13144 ;; Parameters:    Size  Location     Type
 13145 ;;		None
 13146 ;; Auto vars:     Size  Location     Type
 13147 ;;  contador_int    1   26[COMRAM] unsigned char 
 13148 ;;  contador_ext    1   25[COMRAM] unsigned char 
 13149 ;; Return value:  Size  Location     Type
 13150 ;;                  1    wreg      void 
 13151 ;; Registers used:
 13152 ;;		wreg, status,2, status,0
 13153 ;; Tracked objects:
 13154 ;;		On entry : 0/0
 13155 ;;		On exit  : 0/0
 13156 ;;		Unchanged: 0/0
 13157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13158 ;;      Params:         0       0       0       0       0       0       0       0       0
 13159 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13160 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13161 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13162 ;;Total ram usage:        2 bytes
 13163 ;; Hardware stack levels used:    1
 13164 ;; Hardware stack levels required when called:    2
 13165 ;; This function calls:
 13166 ;;		Nothing
 13167 ;; This function is called by:
 13168 ;;		_init_lcd
 13169 ;;		_escreve_cmd_lcd
 13170 ;;		_endereco_cursor_lcd
 13171 ;;		_escreve_caractere_lcd
 13172 ;; This function uses a non-reentrant model
 13173 ;;
 13174                           
 13175                           	psect	text52
 13176  00335A                     __ptext52:
 13177                           	opt stack 0
 13178  00335A                     _delay:
 13179                           	opt stack 25
 13180                           
 13181                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 13182                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 13183                           
 13184                           ;incstack = 0
 13185  00335A  0E00               	movlw	0
 13186  00335C  6E1A               	movwf	delay@contador_ext,c
 13187  00335E                     l6225:
 13188  00335E  0E63               	movlw	99
 13189  003360  641A               	cpfsgt	delay@contador_ext,c
 13190  003362  D001               	goto	l358
 13191  003364  0012               	return	
 13192  003366                     l358:
 13193                           
 13194                           ;display_lcd.c: 50: {
 13195                           ;display_lcd.c: 51: __nop();
 13196  003366  F000               	nop	
 13197                           
 13198                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 13199  003368  0E00               	movlw	0
 13200  00336A  6E1B               	movwf	delay@contador_int,c
 13201  00336C                     l6231:
 13202  00336C  0E31               	movlw	49
 13203  00336E  641B               	cpfsgt	delay@contador_int,c
 13204  003370  D001               	goto	l360
 13205  003372  D003               	goto	u6550
 13206  003374                     l360:
 13207                           
 13208                           ;display_lcd.c: 53: {
 13209                           ;display_lcd.c: 54: __nop();
 13210  003374  F000               	nop	
 13211  003376  2A1B               	incf	delay@contador_int,f,c
 13212  003378  D7F9               	goto	l6231
 13213  00337A                     u6550:
 13214  00337A  2A1A               	incf	delay@contador_ext,f,c
 13215  00337C  D7F0               	goto	l6225
 13216  00337E                     __end_of_delay:
 13217                           	opt stack 0
 13218                           tosu	equ	0xFFF
 13219                           tosh	equ	0xFFE
 13220                           tosl	equ	0xFFD
 13221                           pclath	equ	0xFFA
 13222                           tblptru	equ	0xFF8
 13223                           tblptrh	equ	0xFF7
 13224                           tblptrl	equ	0xFF6
 13225                           tablat	equ	0xFF5
 13226                           prodh	equ	0xFF4
 13227                           prodl	equ	0xFF3
 13228                           intcon	equ	0xFF2
 13229                           intcon2	equ	0xFF1
 13230                           intcon3	equ	0xFF0
 13231                           indf0	equ	0xFEF
 13232                           postinc0	equ	0xFEE
 13233                           fsr0h	equ	0xFEA
 13234                           fsr0l	equ	0xFE9
 13235                           wreg	equ	0xFE8
 13236                           indf1	equ	0xFE7
 13237                           postinc1	equ	0xFE6
 13238                           postdec1	equ	0xFE5
 13239                           fsr1h	equ	0xFE2
 13240                           fsr1l	equ	0xFE1
 13241                           indf2	equ	0xFDF
 13242                           postinc2	equ	0xFDE
 13243                           postdec2	equ	0xFDD
 13244                           plusw2	equ	0xFDB
 13245                           fsr2h	equ	0xFDA
 13246                           fsr2l	equ	0xFD9
 13247                           status	equ	0xFD8
 13248                           
 13249 ;; *************** function _dummy_clocks *****************
 13250 ;; Defined at:
 13251 ;;		line 330 in file "bibliotecas/SDCard.c"
 13252 ;; Parameters:    Size  Location     Type
 13253 ;;  n               1    wreg     unsigned char 
 13254 ;; Auto vars:     Size  Location     Type
 13255 ;;  n               1   31[COMRAM] unsigned char 
 13256 ;;  i               2   32[COMRAM] unsigned int 
 13257 ;; Return value:  Size  Location     Type
 13258 ;;                  1    wreg      void 
 13259 ;; Registers used:
 13260 ;;		wreg, status,2, status,0, cstack
 13261 ;; Tracked objects:
 13262 ;;		On entry : 0/0
 13263 ;;		On exit  : 0/0
 13264 ;;		Unchanged: 0/0
 13265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13266 ;;      Params:         0       0       0       0       0       0       0       0       0
 13267 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13268 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13269 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13270 ;;Total ram usage:        5 bytes
 13271 ;; Hardware stack levels used:    1
 13272 ;; Hardware stack levels required when called:    3
 13273 ;; This function calls:
 13274 ;;		_WriteSPI_
 13275 ;; This function is called by:
 13276 ;;		_reset
 13277 ;;		_disk_initialize
 13278 ;;		_disk_readp
 13279 ;;		_disk_writep
 13280 ;; This function uses a non-reentrant model
 13281 ;;
 13282                           
 13283                           	psect	text53
 13284  0032B4                     __ptext53:
 13285                           	opt stack 0
 13286  0032B4                     _dummy_clocks:
 13287                           	opt stack 22
 13288                           
 13289                           ;incstack = 0
 13290                           ;dummy_clocks@n stored from wreg
 13291  0032B4  6E20               	movwf	dummy_clocks@n,c
 13292                           
 13293                           ;SDCard.c: 332: unsigned int i;
 13294                           ;SDCard.c: 333: for(i=0;i<n;i++)
 13295  0032B6  0E00               	movlw	0
 13296  0032B8  6E22               	movwf	dummy_clocks@i+1,c
 13297  0032BA  0E00               	movlw	0
 13298  0032BC  6E21               	movwf	dummy_clocks@i,c
 13299  0032BE  D007               	goto	l50
 13300  0032C0                     l51:
 13301                           
 13302                           ;SDCard.c: 334: {
 13303                           ;SDCard.c: 335: LATBbits.LATB4 = 0;
 13304  0032C0  988A               	bcf	3978,4,c	;volatile
 13305                           
 13306                           ;SDCard.c: 336: WriteSPI_(0XFF);
 13307  0032C2  0EFF               	movlw	255
 13308  0032C4  ECB8  F018         	call	_WriteSPI_
 13309                           
 13310                           ;SDCard.c: 337: LATBbits.LATB4 = 1;
 13311  0032C8  888A               	bsf	3978,4,c	;volatile
 13312  0032CA  4A21               	infsnz	dummy_clocks@i,f,c
 13313  0032CC  2A22               	incf	dummy_clocks@i+1,f,c
 13314  0032CE                     l50:
 13315  0032CE  5020               	movf	dummy_clocks@n,w,c
 13316  0032D0  6E1E               	movwf	??_dummy_clocks& (0+255),c
 13317  0032D2  6A1F               	clrf	(??_dummy_clocks+1)& (0+255),c
 13318  0032D4  501E               	movf	??_dummy_clocks,w,c
 13319  0032D6  5C21               	subwf	dummy_clocks@i,w,c
 13320  0032D8  501F               	movf	??_dummy_clocks+1,w,c
 13321  0032DA  5822               	subwfb	dummy_clocks@i+1,w,c
 13322  0032DC  B0D8               	btfsc	status,0,c
 13323  0032DE  0012               	return	
 13324  0032E0  D7EF               	goto	l51
 13325  0032E2                     __end_of_dummy_clocks:
 13326                           	opt stack 0
 13327                           tosu	equ	0xFFF
 13328                           tosh	equ	0xFFE
 13329                           tosl	equ	0xFFD
 13330                           pclath	equ	0xFFA
 13331                           tblptru	equ	0xFF8
 13332                           tblptrh	equ	0xFF7
 13333                           tblptrl	equ	0xFF6
 13334                           tablat	equ	0xFF5
 13335                           prodh	equ	0xFF4
 13336                           prodl	equ	0xFF3
 13337                           intcon	equ	0xFF2
 13338                           intcon2	equ	0xFF1
 13339                           intcon3	equ	0xFF0
 13340                           indf0	equ	0xFEF
 13341                           postinc0	equ	0xFEE
 13342                           fsr0h	equ	0xFEA
 13343                           fsr0l	equ	0xFE9
 13344                           wreg	equ	0xFE8
 13345                           indf1	equ	0xFE7
 13346                           postinc1	equ	0xFE6
 13347                           postdec1	equ	0xFE5
 13348                           fsr1h	equ	0xFE2
 13349                           fsr1l	equ	0xFE1
 13350                           indf2	equ	0xFDF
 13351                           postinc2	equ	0xFDE
 13352                           postdec2	equ	0xFDD
 13353                           plusw2	equ	0xFDB
 13354                           fsr2h	equ	0xFDA
 13355                           fsr2l	equ	0xFD9
 13356                           status	equ	0xFD8
 13357                           
 13358 ;; *************** function _command *****************
 13359 ;; Defined at:
 13360 ;;		line 351 in file "bibliotecas/SDCard.c"
 13361 ;; Parameters:    Size  Location     Type
 13362 ;;  CMD             1    wreg     unsigned char 
 13363 ;;  arg             4   29[COMRAM] unsigned long 
 13364 ;;  CRC             1   33[COMRAM] unsigned char 
 13365 ;; Auto vars:     Size  Location     Type
 13366 ;;  CMD             1   35[COMRAM] unsigned char 
 13367 ;;  argument        1   36[COMRAM] unsigned char 
 13368 ;; Return value:  Size  Location     Type
 13369 ;;                  1    wreg      void 
 13370 ;; Registers used:
 13371 ;;		wreg, status,2, status,0, cstack
 13372 ;; Tracked objects:
 13373 ;;		On entry : 0/0
 13374 ;;		On exit  : 0/0
 13375 ;;		Unchanged: 0/0
 13376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13377 ;;      Params:         5       0       0       0       0       0       0       0       0
 13378 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13379 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13380 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13381 ;;Total ram usage:        8 bytes
 13382 ;; Hardware stack levels used:    1
 13383 ;; Hardware stack levels required when called:    3
 13384 ;; This function calls:
 13385 ;;		_WriteSPI_
 13386 ;; This function is called by:
 13387 ;;		_reset
 13388 ;;		_disk_initialize
 13389 ;;		_disk_readp
 13390 ;;		_disk_writep
 13391 ;; This function uses a non-reentrant model
 13392 ;;
 13393                           
 13394                           	psect	text54
 13395  00306C                     __ptext54:
 13396                           	opt stack 0
 13397  00306C                     _command:
 13398                           	opt stack 22
 13399                           
 13400                           ;incstack = 0
 13401                           ;command@CMD stored from wreg
 13402  00306C  6E24               	movwf	command@CMD,c
 13403                           
 13404                           ;SDCard.c: 353: LATBbits.LATB3 = ~LATBbits.LATB3;
 13405  00306E  A68A               	btfss	3978,3,c	;volatile
 13406  003070  D002               	goto	u6760
 13407  003072  0E01               	movlw	1
 13408  003074  D001               	goto	u6766
 13409  003076                     u6760:
 13410  003076  0E00               	movlw	0
 13411  003078                     u6766:
 13412  003078  0AFF               	xorlw	255
 13413  00307A  6E23               	movwf	??_command& (0+255),c
 13414  00307C  4623               	rlncf	??_command,f,c
 13415  00307E  4623               	rlncf	??_command,f,c
 13416  003080  4623               	rlncf	??_command,f,c
 13417  003082  508A               	movf	3978,w,c	;volatile
 13418  003084  1823               	xorwf	??_command,w,c
 13419  003086  0BF7               	andlw	-9
 13420  003088  1823               	xorwf	??_command,w,c
 13421  00308A  6E8A               	movwf	3978,c	;volatile
 13422                           
 13423                           ;SDCard.c: 354: unsigned char argument = arg>>24;
 13424  00308C  C021  F025         	movff	command@arg+3,command@argument
 13425                           
 13426                           ;SDCard.c: 355: WriteSPI_(0xFF);
 13427  003090  0EFF               	movlw	255
 13428  003092  ECB8  F018         	call	_WriteSPI_
 13429                           
 13430                           ;SDCard.c: 356: WriteSPI_(CMD);
 13431  003096  5024               	movf	command@CMD,w,c
 13432  003098  ECB8  F018         	call	_WriteSPI_
 13433                           
 13434                           ;SDCard.c: 357: WriteSPI_(argument);
 13435  00309C  5025               	movf	command@argument,w,c
 13436  00309E  ECB8  F018         	call	_WriteSPI_
 13437                           
 13438                           ;SDCard.c: 358: argument = arg>>16;
 13439  0030A2  C020  F025         	movff	command@arg+2,command@argument
 13440                           
 13441                           ;SDCard.c: 359: WriteSPI_(argument);
 13442  0030A6  5025               	movf	command@argument,w,c
 13443  0030A8  ECB8  F018         	call	_WriteSPI_
 13444                           
 13445                           ;SDCard.c: 360: argument = arg>>8;
 13446  0030AC  C01F  F025         	movff	command@arg+1,command@argument
 13447                           
 13448                           ;SDCard.c: 361: WriteSPI_(argument);
 13449  0030B0  5025               	movf	command@argument,w,c
 13450  0030B2  ECB8  F018         	call	_WriteSPI_
 13451                           
 13452                           ;SDCard.c: 362: argument = arg;
 13453  0030B6  C01E  F025         	movff	command@arg,command@argument
 13454                           
 13455                           ;SDCard.c: 363: WriteSPI_(argument);
 13456  0030BA  5025               	movf	command@argument,w,c
 13457  0030BC  ECB8  F018         	call	_WriteSPI_
 13458                           
 13459                           ;SDCard.c: 364: WriteSPI_(CRC);
 13460  0030C0  5022               	movf	command@CRC,w,c
 13461  0030C2  ECB8  F018         	call	_WriteSPI_
 13462  0030C6  0012               	return		;funcret
 13463  0030C8                     __end_of_command:
 13464                           	opt stack 0
 13465                           tosu	equ	0xFFF
 13466                           tosh	equ	0xFFE
 13467                           tosl	equ	0xFFD
 13468                           pclath	equ	0xFFA
 13469                           tblptru	equ	0xFF8
 13470                           tblptrh	equ	0xFF7
 13471                           tblptrl	equ	0xFF6
 13472                           tablat	equ	0xFF5
 13473                           prodh	equ	0xFF4
 13474                           prodl	equ	0xFF3
 13475                           intcon	equ	0xFF2
 13476                           intcon2	equ	0xFF1
 13477                           intcon3	equ	0xFF0
 13478                           indf0	equ	0xFEF
 13479                           postinc0	equ	0xFEE
 13480                           fsr0h	equ	0xFEA
 13481                           fsr0l	equ	0xFE9
 13482                           wreg	equ	0xFE8
 13483                           indf1	equ	0xFE7
 13484                           postinc1	equ	0xFE6
 13485                           postdec1	equ	0xFE5
 13486                           fsr1h	equ	0xFE2
 13487                           fsr1l	equ	0xFE1
 13488                           indf2	equ	0xFDF
 13489                           postinc2	equ	0xFDE
 13490                           postdec2	equ	0xFDD
 13491                           plusw2	equ	0xFDB
 13492                           fsr2h	equ	0xFDA
 13493                           fsr2l	equ	0xFD9
 13494                           status	equ	0xFD8
 13495                           
 13496 ;; *************** function _WriteSPI_ *****************
 13497 ;; Defined at:
 13498 ;;		line 125 in file "bibliotecas/SPI.c"
 13499 ;; Parameters:    Size  Location     Type
 13500 ;;  dado            1    wreg     unsigned char 
 13501 ;; Auto vars:     Size  Location     Type
 13502 ;;  dado            1   28[COMRAM] unsigned char 
 13503 ;;  TempVar         1   27[COMRAM] unsigned char 
 13504 ;; Return value:  Size  Location     Type
 13505 ;;                  1    wreg      unsigned char 
 13506 ;; Registers used:
 13507 ;;		wreg, status,2, cstack
 13508 ;; Tracked objects:
 13509 ;;		On entry : 0/0
 13510 ;;		On exit  : 0/0
 13511 ;;		Unchanged: 0/0
 13512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13513 ;;      Params:         0       0       0       0       0       0       0       0       0
 13514 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13515 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13516 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13517 ;;Total ram usage:        4 bytes
 13518 ;; Hardware stack levels used:    1
 13519 ;; Hardware stack levels required when called:    2
 13520 ;; This function calls:
 13521 ;;		Nothing
 13522 ;; This function is called by:
 13523 ;;		_dummy_clocks
 13524 ;;		_proceed
 13525 ;;		_command
 13526 ;;		_disk_writep
 13527 ;; This function uses a non-reentrant model
 13528 ;;
 13529                           
 13530                           	psect	text55
 13531  003170                     __ptext55:
 13532                           	opt stack 0
 13533  003170                     _WriteSPI_:
 13534                           	opt stack 25
 13535                           
 13536                           ;incstack = 0
 13537                           ;WriteSPI_@dado stored from wreg
 13538  003170  6E1D               	movwf	WriteSPI_@dado,c
 13539                           
 13540                           ;SPI.c: 127: unsigned char TempVar;
 13541                           ;SPI.c: 128: TempVar = SSPBUF;
 13542  003172  CFC9 F01C          	movff	4041,WriteSPI_@TempVar	;volatile
 13543                           
 13544                           ;SPI.c: 129: PIR1bits.SSPIF = 0;
 13545  003176  969E               	bcf	3998,3,c	;volatile
 13546                           
 13547                           ;SPI.c: 130: SSPCON1bits.WCOL = 0;
 13548  003178  9EC6               	bcf	4038,7,c	;volatile
 13549                           
 13550                           ;SPI.c: 131: SSPSTATbits.BF = 0;
 13551  00317A  90C7               	bcf	4039,0,c	;volatile
 13552                           
 13553                           ;SPI.c: 132: SSPBUF = 0x00;
 13554  00317C  0E00               	movlw	0
 13555  00317E  6EC9               	movwf	4041,c	;volatile
 13556                           
 13557                           ;SPI.c: 133: _delay((unsigned long)((50)*(48000000/4000.0)));
 13558  003180  0E04               	movlw	4
 13559  003182  6E1B               	movwf	(??_WriteSPI_+1)& (0+255),c
 13560  003184  0E0C               	movlw	12
 13561  003186  6E1A               	movwf	??_WriteSPI_& (0+255),c
 13562  003188  0E34               	movlw	52
 13563  00318A                     u9507:
 13564  00318A  2EE8               	decfsz	wreg,f,c
 13565  00318C  D7FE               	bra	u9507
 13566  00318E  2E1A               	decfsz	??_WriteSPI_& (0+255),f,c
 13567  003190  D7FC               	bra	u9507
 13568  003192  2E1B               	decfsz	(??_WriteSPI_+1)& (0+255),f,c
 13569  003194  D7FA               	bra	u9507
 13570                           
 13571                           ;SPI.c: 134: SSPBUF = dado;
 13572  003196  C01D  FFC9         	movff	WriteSPI_@dado,4041	;volatile
 13573                           
 13574                           ;SPI.c: 135: if (SSPCON1 & 0x80 )
 13575  00319A  BEC6               	btfsc	4038,7,c	;volatile
 13576  00319C  0012               	return	
 13577  00319E                     
 13578                           ;SPI.c: 139: else
 13579                           ;SPI.c: 140: {
 13580                           ;SPI.c: 141: while(!PIR1bits.SSPIF);
 13581  00319E  A69E               	btfss	3998,3,c	;volatile
 13582  0031A0  D7FE               	goto	l142
 13583                           
 13584                           ;SPI.c: 142: _delay((unsigned long)((1000)*(48000000/4000.0)));
 13585  0031A2  0E3D               	movlw	61
 13586  0031A4  6E1B               	movwf	(??_WriteSPI_+1)& (0+255),c
 13587  0031A6  0EE1               	movlw	225
 13588  0031A8  6E1A               	movwf	??_WriteSPI_& (0+255),c
 13589  0031AA  0E40               	movlw	64
 13590  0031AC                     u9517:
 13591  0031AC  2EE8               	decfsz	wreg,f,c
 13592  0031AE  D7FE               	bra	u9517
 13593  0031B0  2E1A               	decfsz	??_WriteSPI_& (0+255),f,c
 13594  0031B2  D7FC               	bra	u9517
 13595  0031B4  2E1B               	decfsz	(??_WriteSPI_+1)& (0+255),f,c
 13596  0031B6  D7FA               	bra	u9517
 13597                           
 13598                           ;SPI.c: 144: return (0);
 13599                           ;	Return value of _WriteSPI_ is never used
 13600  0031B8  0012               	return	
 13601  0031BA                     __end_of_WriteSPI_:
 13602                           	opt stack 0
 13603                           tosu	equ	0xFFF
 13604                           tosh	equ	0xFFE
 13605                           tosl	equ	0xFFD
 13606                           pclath	equ	0xFFA
 13607                           tblptru	equ	0xFF8
 13608                           tblptrh	equ	0xFF7
 13609                           tblptrl	equ	0xFF6
 13610                           tablat	equ	0xFF5
 13611                           prodh	equ	0xFF4
 13612                           prodl	equ	0xFF3
 13613                           intcon	equ	0xFF2
 13614                           intcon2	equ	0xFF1
 13615                           intcon3	equ	0xFF0
 13616                           indf0	equ	0xFEF
 13617                           postinc0	equ	0xFEE
 13618                           fsr0h	equ	0xFEA
 13619                           fsr0l	equ	0xFE9
 13620                           wreg	equ	0xFE8
 13621                           indf1	equ	0xFE7
 13622                           postinc1	equ	0xFE6
 13623                           postdec1	equ	0xFE5
 13624                           fsr1h	equ	0xFE2
 13625                           fsr1l	equ	0xFE1
 13626                           indf2	equ	0xFDF
 13627                           postinc2	equ	0xFDE
 13628                           postdec2	equ	0xFDD
 13629                           plusw2	equ	0xFDB
 13630                           fsr2h	equ	0xFDA
 13631                           fsr2l	equ	0xFD9
 13632                           status	equ	0xFD8
 13633                           
 13634 ;; *************** function ___lmul *****************
 13635 ;; Defined at:
 13636 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;  multiplier      4   25[COMRAM] unsigned long 
 13639 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13640 ;; Auto vars:     Size  Location     Type
 13641 ;;  product         4   33[COMRAM] unsigned long 
 13642 ;; Return value:  Size  Location     Type
 13643 ;;                  4   25[COMRAM] unsigned long 
 13644 ;; Registers used:
 13645 ;;		wreg, status,2, status,0
 13646 ;; Tracked objects:
 13647 ;;		On entry : 0/0
 13648 ;;		On exit  : 0/0
 13649 ;;		Unchanged: 0/0
 13650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13651 ;;      Params:         8       0       0       0       0       0       0       0       0
 13652 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13653 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13654 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13655 ;;Total ram usage:       12 bytes
 13656 ;; Hardware stack levels used:    1
 13657 ;; Hardware stack levels required when called:    2
 13658 ;; This function calls:
 13659 ;;		Nothing
 13660 ;; This function is called by:
 13661 ;;		_clust2sect
 13662 ;;		_pf_mount
 13663 ;; This function uses a non-reentrant model
 13664 ;;
 13665                           
 13666                           	psect	text56
 13667  0030C8                     __ptext56:
 13668                           	opt stack 0
 13669  0030C8                     ___lmul:
 13670                           	opt stack 24
 13671                           
 13672                           ;incstack = 0
 13673  0030C8  0E00               	movlw	0
 13674  0030CA  6E22               	movwf	___lmul@product,c
 13675  0030CC  0E00               	movlw	0
 13676  0030CE  6E23               	movwf	___lmul@product+1,c
 13677  0030D0  0E00               	movlw	0
 13678  0030D2  6E24               	movwf	___lmul@product+2,c
 13679  0030D4  0E00               	movlw	0
 13680  0030D6  6E25               	movwf	___lmul@product+3,c
 13681  0030D8  A01A               	btfss	___lmul@multiplier,0,c
 13682  0030DA  D008               	goto	l1150
 13683  0030DC  501E               	movf	___lmul@multiplicand,w,c
 13684  0030DE  2622               	addwf	___lmul@product,f,c
 13685  0030E0  501F               	movf	___lmul@multiplicand+1,w,c
 13686  0030E2  2223               	addwfc	___lmul@product+1,f,c
 13687  0030E4  5020               	movf	___lmul@multiplicand+2,w,c
 13688  0030E6  2224               	addwfc	___lmul@product+2,f,c
 13689  0030E8  5021               	movf	___lmul@multiplicand+3,w,c
 13690  0030EA  2225               	addwfc	___lmul@product+3,f,c
 13691  0030EC                     l1150:
 13692  0030EC  90D8               	bcf	status,0,c
 13693  0030EE  361E               	rlcf	___lmul@multiplicand,f,c
 13694  0030F0  361F               	rlcf	___lmul@multiplicand+1,f,c
 13695  0030F2  3620               	rlcf	___lmul@multiplicand+2,f,c
 13696  0030F4  3621               	rlcf	___lmul@multiplicand+3,f,c
 13697  0030F6  90D8               	bcf	status,0,c
 13698  0030F8  321D               	rrcf	___lmul@multiplier+3,f,c
 13699  0030FA  321C               	rrcf	___lmul@multiplier+2,f,c
 13700  0030FC  321B               	rrcf	___lmul@multiplier+1,f,c
 13701  0030FE  321A               	rrcf	___lmul@multiplier,f,c
 13702  003100  501A               	movf	___lmul@multiplier,w,c
 13703  003102  101B               	iorwf	___lmul@multiplier+1,w,c
 13704  003104  101C               	iorwf	___lmul@multiplier+2,w,c
 13705  003106  101D               	iorwf	___lmul@multiplier+3,w,c
 13706  003108  A4D8               	btfss	status,2,c
 13707  00310A  D7E6               	goto	l1149
 13708  00310C  C022  F01A         	movff	___lmul@product,?___lmul
 13709  003110  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13710  003114  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13711  003118  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13712  00311C  0012               	return		;funcret
 13713  00311E                     __end_of___lmul:
 13714                           	opt stack 0
 13715                           tosu	equ	0xFFF
 13716                           tosh	equ	0xFFE
 13717                           tosl	equ	0xFFD
 13718                           pclath	equ	0xFFA
 13719                           tblptru	equ	0xFF8
 13720                           tblptrh	equ	0xFF7
 13721                           tblptrl	equ	0xFF6
 13722                           tablat	equ	0xFF5
 13723                           prodh	equ	0xFF4
 13724                           prodl	equ	0xFF3
 13725                           intcon	equ	0xFF2
 13726                           intcon2	equ	0xFF1
 13727                           intcon3	equ	0xFF0
 13728                           indf0	equ	0xFEF
 13729                           postinc0	equ	0xFEE
 13730                           fsr0h	equ	0xFEA
 13731                           fsr0l	equ	0xFE9
 13732                           wreg	equ	0xFE8
 13733                           indf1	equ	0xFE7
 13734                           postinc1	equ	0xFE6
 13735                           postdec1	equ	0xFE5
 13736                           fsr1h	equ	0xFE2
 13737                           fsr1l	equ	0xFE1
 13738                           indf2	equ	0xFDF
 13739                           postinc2	equ	0xFDE
 13740                           postdec2	equ	0xFDD
 13741                           plusw2	equ	0xFDB
 13742                           fsr2h	equ	0xFDA
 13743                           fsr2l	equ	0xFD9
 13744                           status	equ	0xFD8
 13745                           
 13746 ;; *************** function ___lldiv *****************
 13747 ;; Defined at:
 13748 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 13749 ;; Parameters:    Size  Location     Type
 13750 ;;  dividend        4   25[COMRAM] unsigned long 
 13751 ;;  divisor         4   29[COMRAM] unsigned long 
 13752 ;; Auto vars:     Size  Location     Type
 13753 ;;  quotient        4   33[COMRAM] unsigned long 
 13754 ;;  counter         1   37[COMRAM] unsigned char 
 13755 ;; Return value:  Size  Location     Type
 13756 ;;                  4   25[COMRAM] unsigned long 
 13757 ;; Registers used:
 13758 ;;		wreg, status,2, status,0
 13759 ;; Tracked objects:
 13760 ;;		On entry : 0/0
 13761 ;;		On exit  : 0/0
 13762 ;;		Unchanged: 0/0
 13763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13764 ;;      Params:         8       0       0       0       0       0       0       0       0
 13765 ;;      Locals:         5       0       0       0       0       0       0       0       0
 13766 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13767 ;;      Totals:        13       0       0       0       0       0       0       0       0
 13768 ;;Total ram usage:       13 bytes
 13769 ;; Hardware stack levels used:    1
 13770 ;; Hardware stack levels required when called:    2
 13771 ;; This function calls:
 13772 ;;		Nothing
 13773 ;; This function is called by:
 13774 ;;		_pf_mount
 13775 ;;		_pf_lseek
 13776 ;; This function uses a non-reentrant model
 13777 ;;
 13778                           
 13779                           	psect	text57
 13780  002BFA                     __ptext57:
 13781                           	opt stack 0
 13782  002BFA                     ___lldiv:
 13783                           	opt stack 25
 13784                           
 13785                           ;incstack = 0
 13786  002BFA  0E00               	movlw	0
 13787  002BFC  6E22               	movwf	___lldiv@quotient,c
 13788  002BFE  0E00               	movlw	0
 13789  002C00  6E23               	movwf	___lldiv@quotient+1,c
 13790  002C02  0E00               	movlw	0
 13791  002C04  6E24               	movwf	___lldiv@quotient+2,c
 13792  002C06  0E00               	movlw	0
 13793  002C08  6E25               	movwf	___lldiv@quotient+3,c
 13794  002C0A  501E               	movf	___lldiv@divisor,w,c
 13795  002C0C  101F               	iorwf	___lldiv@divisor+1,w,c
 13796  002C0E  1020               	iorwf	___lldiv@divisor+2,w,c
 13797  002C10  1021               	iorwf	___lldiv@divisor+3,w,c
 13798  002C12  B4D8               	btfsc	status,2,c
 13799  002C14  D02A               	goto	l1511
 13800  002C16  0E01               	movlw	1
 13801  002C18  6E26               	movwf	___lldiv@counter,c
 13802  002C1A  D006               	goto	l1506
 13803  002C1C  90D8               	bcf	status,0,c
 13804  002C1E  361E               	rlcf	___lldiv@divisor,f,c
 13805  002C20  361F               	rlcf	___lldiv@divisor+1,f,c
 13806  002C22  3620               	rlcf	___lldiv@divisor+2,f,c
 13807  002C24  3621               	rlcf	___lldiv@divisor+3,f,c
 13808  002C26  2A26               	incf	___lldiv@counter,f,c
 13809  002C28                     l1506:
 13810  002C28  AE21               	btfss	___lldiv@divisor+3,7,c
 13811  002C2A  D7F8               	goto	l1507
 13812  002C2C                     u7970:
 13813  002C2C  90D8               	bcf	status,0,c
 13814  002C2E  3622               	rlcf	___lldiv@quotient,f,c
 13815  002C30  3623               	rlcf	___lldiv@quotient+1,f,c
 13816  002C32  3624               	rlcf	___lldiv@quotient+2,f,c
 13817  002C34  3625               	rlcf	___lldiv@quotient+3,f,c
 13818  002C36  501E               	movf	___lldiv@divisor,w,c
 13819  002C38  5C1A               	subwf	___lldiv@dividend,w,c
 13820  002C3A  501F               	movf	___lldiv@divisor+1,w,c
 13821  002C3C  581B               	subwfb	___lldiv@dividend+1,w,c
 13822  002C3E  5020               	movf	___lldiv@divisor+2,w,c
 13823  002C40  581C               	subwfb	___lldiv@dividend+2,w,c
 13824  002C42  5021               	movf	___lldiv@divisor+3,w,c
 13825  002C44  581D               	subwfb	___lldiv@dividend+3,w,c
 13826  002C46  A0D8               	btfss	status,0,c
 13827  002C48  D009               	goto	l1510
 13828  002C4A  501E               	movf	___lldiv@divisor,w,c
 13829  002C4C  5E1A               	subwf	___lldiv@dividend,f,c
 13830  002C4E  501F               	movf	___lldiv@divisor+1,w,c
 13831  002C50  5A1B               	subwfb	___lldiv@dividend+1,f,c
 13832  002C52  5020               	movf	___lldiv@divisor+2,w,c
 13833  002C54  5A1C               	subwfb	___lldiv@dividend+2,f,c
 13834  002C56  5021               	movf	___lldiv@divisor+3,w,c
 13835  002C58  5A1D               	subwfb	___lldiv@dividend+3,f,c
 13836  002C5A  8022               	bsf	___lldiv@quotient,0,c
 13837  002C5C                     l1510:
 13838  002C5C  90D8               	bcf	status,0,c
 13839  002C5E  3221               	rrcf	___lldiv@divisor+3,f,c
 13840  002C60  3220               	rrcf	___lldiv@divisor+2,f,c
 13841  002C62  321F               	rrcf	___lldiv@divisor+1,f,c
 13842  002C64  321E               	rrcf	___lldiv@divisor,f,c
 13843  002C66  2E26               	decfsz	___lldiv@counter,f,c
 13844  002C68  D7E1               	goto	u7970
 13845  002C6A                     l1511:
 13846  002C6A  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 13847  002C6E  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 13848  002C72  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 13849  002C76  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 13850  002C7A  0012               	return		;funcret
 13851  002C7C                     __end_of___lldiv:
 13852                           	opt stack 0
 13853                           tosu	equ	0xFFF
 13854                           tosh	equ	0xFFE
 13855                           tosl	equ	0xFFD
 13856                           pclath	equ	0xFFA
 13857                           tblptru	equ	0xFF8
 13858                           tblptrh	equ	0xFF7
 13859                           tblptrl	equ	0xFF6
 13860                           tablat	equ	0xFF5
 13861                           prodh	equ	0xFF4
 13862                           prodl	equ	0xFF3
 13863                           intcon	equ	0xFF2
 13864                           intcon2	equ	0xFF1
 13865                           intcon3	equ	0xFF0
 13866                           indf0	equ	0xFEF
 13867                           postinc0	equ	0xFEE
 13868                           fsr0h	equ	0xFEA
 13869                           fsr0l	equ	0xFE9
 13870                           wreg	equ	0xFE8
 13871                           indf1	equ	0xFE7
 13872                           postinc1	equ	0xFE6
 13873                           postdec1	equ	0xFE5
 13874                           fsr1h	equ	0xFE2
 13875                           fsr1l	equ	0xFE1
 13876                           indf2	equ	0xFDF
 13877                           postinc2	equ	0xFDE
 13878                           postdec2	equ	0xFDD
 13879                           plusw2	equ	0xFDB
 13880                           fsr2h	equ	0xFDA
 13881                           fsr2l	equ	0xFD9
 13882                           status	equ	0xFD8
 13883                           
 13884 ;; *************** function _controle_shrc *****************
 13885 ;; Defined at:
 13886 ;;		line 112 in file "bibliotecas/SHRC.c"
 13887 ;; Parameters:    Size  Location     Type
 13888 ;;		None
 13889 ;; Auto vars:     Size  Location     Type
 13890 ;;		None
 13891 ;; Return value:  Size  Location     Type
 13892 ;;                  1    wreg      void 
 13893 ;; Registers used:
 13894 ;;		wreg, status,2, status,0, cstack
 13895 ;; Tracked objects:
 13896 ;;		On entry : 0/0
 13897 ;;		On exit  : 0/0
 13898 ;;		Unchanged: 0/0
 13899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13900 ;;      Params:         0       0       0       0       0       0       0       0       0
 13901 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13902 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13903 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13904 ;;Total ram usage:        0 bytes
 13905 ;; Hardware stack levels used:    1
 13906 ;; Hardware stack levels required when called:    3
 13907 ;; This function calls:
 13908 ;;		_ativa_latch_shrc
 13909 ;;		_envia_dados_shrc
 13910 ;; This function is called by:
 13911 ;;		_main
 13912 ;;		_timer_dois
 13913 ;; This function uses a non-reentrant model
 13914 ;;
 13915                           
 13916                           	psect	text58
 13917  0034BC                     __ptext58:
 13918                           	opt stack 0
 13919  0034BC                     _controle_shrc:
 13920                           	opt stack 27
 13921                           
 13922                           ;SHRC.c: 115: envia_dados_shrc(dado);
 13923                           
 13924                           ;incstack = 0
 13925  0034BC  5045               	movf	_dado,w,c
 13926  0034BE  ECDD  F018         	call	_envia_dados_shrc
 13927                           
 13928                           ;SHRC.c: 116: ativa_latch_shrc();
 13929  0034C2  EC1D  F01A         	call	_ativa_latch_shrc	;wreg free
 13930  0034C6  0012               	return		;funcret
 13931  0034C8                     __end_of_controle_shrc:
 13932                           	opt stack 0
 13933                           tosu	equ	0xFFF
 13934                           tosh	equ	0xFFE
 13935                           tosl	equ	0xFFD
 13936                           pclath	equ	0xFFA
 13937                           tblptru	equ	0xFF8
 13938                           tblptrh	equ	0xFF7
 13939                           tblptrl	equ	0xFF6
 13940                           tablat	equ	0xFF5
 13941                           prodh	equ	0xFF4
 13942                           prodl	equ	0xFF3
 13943                           intcon	equ	0xFF2
 13944                           intcon2	equ	0xFF1
 13945                           intcon3	equ	0xFF0
 13946                           indf0	equ	0xFEF
 13947                           postinc0	equ	0xFEE
 13948                           fsr0h	equ	0xFEA
 13949                           fsr0l	equ	0xFE9
 13950                           wreg	equ	0xFE8
 13951                           indf1	equ	0xFE7
 13952                           postinc1	equ	0xFE6
 13953                           postdec1	equ	0xFE5
 13954                           fsr1h	equ	0xFE2
 13955                           fsr1l	equ	0xFE1
 13956                           indf2	equ	0xFDF
 13957                           postinc2	equ	0xFDE
 13958                           postdec2	equ	0xFDD
 13959                           plusw2	equ	0xFDB
 13960                           fsr2h	equ	0xFDA
 13961                           fsr2l	equ	0xFD9
 13962                           status	equ	0xFD8
 13963                           
 13964 ;; *************** function _envia_dados_shrc *****************
 13965 ;; Defined at:
 13966 ;;		line 62 in file "bibliotecas/SHRC.c"
 13967 ;; Parameters:    Size  Location     Type
 13968 ;;  data_to_shrc    1    wreg     unsigned char 
 13969 ;; Auto vars:     Size  Location     Type
 13970 ;;  data_to_shrc    1   26[COMRAM] unsigned char 
 13971 ;;  contador        1   25[COMRAM] unsigned char 
 13972 ;; Return value:  Size  Location     Type
 13973 ;;                  1    wreg      void 
 13974 ;; Registers used:
 13975 ;;		wreg, status,2, status,0
 13976 ;; Tracked objects:
 13977 ;;		On entry : 0/0
 13978 ;;		On exit  : 0/0
 13979 ;;		Unchanged: 0/0
 13980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13981 ;;      Params:         0       0       0       0       0       0       0       0       0
 13982 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13983 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13984 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13985 ;;Total ram usage:        2 bytes
 13986 ;; Hardware stack levels used:    1
 13987 ;; Hardware stack levels required when called:    2
 13988 ;; This function calls:
 13989 ;;		Nothing
 13990 ;; This function is called by:
 13991 ;;		_controle_shrc
 13992 ;; This function uses a non-reentrant model
 13993 ;;
 13994                           
 13995                           	psect	text59
 13996  0031BA                     __ptext59:
 13997                           	opt stack 0
 13998  0031BA                     _envia_dados_shrc:
 13999                           	opt stack 27
 14000                           
 14001                           ;incstack = 0
 14002                           ;envia_dados_shrc@data_to_shrc stored from wreg
 14003  0031BA  6E1B               	movwf	envia_dados_shrc@data_to_shrc,c
 14004                           
 14005                           ;SHRC.c: 64: unsigned char contador=0;
 14006  0031BC  0E00               	movlw	0
 14007  0031BE  6E1A               	movwf	envia_dados_shrc@contador,c
 14008                           
 14009                           ;SHRC.c: 65: (INTCONbits.GIE = 0);
 14010  0031C0  9EF2               	bcf	intcon,7,c	;volatile
 14011                           
 14012                           ;SHRC.c: 67: while(contador<=7)
 14013  0031C2  D018               	goto	l73
 14014  0031C4                     
 14015                           ;SHRC.c: 68: {
 14016                           ;SHRC.c: 69: if((data_to_shrc & 0x80) == 0)
 14017  0031C4  BE1B               	btfsc	envia_dados_shrc@data_to_shrc,7,c
 14018  0031C6  D002               	goto	l75
 14019                           
 14020                           ;SHRC.c: 70: {
 14021                           ;SHRC.c: 71: LATBbits.LATB7 = 0;
 14022  0031C8  9E8A               	bcf	3978,7,c	;volatile
 14023                           
 14024                           ;SHRC.c: 72: }
 14025  0031CA  D001               	goto	l76
 14026  0031CC                     l75:
 14027                           
 14028                           ;SHRC.c: 73: else
 14029                           ;SHRC.c: 74: {
 14030                           ;SHRC.c: 75: LATBbits.LATB7 = 1;
 14031  0031CC  8E8A               	bsf	3978,7,c	;volatile
 14032  0031CE                     l76:
 14033                           
 14034                           ;SHRC.c: 76: }
 14035                           ;SHRC.c: 77: data_to_shrc = data_to_shrc << 1;
 14036  0031CE  501B               	movf	envia_dados_shrc@data_to_shrc,w,c
 14037  0031D0  241B               	addwf	envia_dados_shrc@data_to_shrc,w,c
 14038  0031D2  6E1B               	movwf	envia_dados_shrc@data_to_shrc,c
 14039                           
 14040                           ;SHRC.c: 78: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14041  0031D4  0E78               	movlw	120
 14042  0031D6                     u9527:
 14043  0031D6  2EE8               	decfsz	wreg,f,c
 14044  0031D8  D7FE               	bra	u9527
 14045                           
 14046                           ;SHRC.c: 79: LATBbits.LATB6 = 1;
 14047  0031DA  8C8A               	bsf	3978,6,c	;volatile
 14048                           
 14049                           ;SHRC.c: 80: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14050  0031DC  0E78               	movlw	120
 14051  0031DE                     u9537:
 14052  0031DE  2EE8               	decfsz	wreg,f,c
 14053  0031E0  D7FE               	bra	u9537
 14054                           
 14055                           ;SHRC.c: 81: LATBbits.LATB7 = 0;
 14056  0031E2  9E8A               	bcf	3978,7,c	;volatile
 14057                           
 14058                           ;SHRC.c: 82: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14059  0031E4  0E78               	movlw	120
 14060  0031E6                     u9547:
 14061  0031E6  2EE8               	decfsz	wreg,f,c
 14062  0031E8  D7FE               	bra	u9547
 14063                           
 14064                           ;SHRC.c: 83: LATBbits.LATB6 = 0;
 14065  0031EA  9C8A               	bcf	3978,6,c	;volatile
 14066                           
 14067                           ;SHRC.c: 84: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14068  0031EC  0E78               	movlw	120
 14069  0031EE                     u9557:
 14070  0031EE  2EE8               	decfsz	wreg,f,c
 14071  0031F0  D7FE               	bra	u9557
 14072                           
 14073                           ;SHRC.c: 85: contador++;
 14074  0031F2  2A1A               	incf	envia_dados_shrc@contador,f,c
 14075  0031F4                     l73:
 14076  0031F4  0E07               	movlw	7
 14077  0031F6  641A               	cpfsgt	envia_dados_shrc@contador,c
 14078  0031F8  D7E5               	goto	l74
 14079                           
 14080                           ;SHRC.c: 86: }
 14081                           ;SHRC.c: 87: (INTCONbits.GIE = 1);
 14082  0031FA  8EF2               	bsf	intcon,7,c	;volatile
 14083  0031FC  0012               	return		;funcret
 14084  0031FE                     __end_of_envia_dados_shrc:
 14085                           	opt stack 0
 14086                           tosu	equ	0xFFF
 14087                           tosh	equ	0xFFE
 14088                           tosl	equ	0xFFD
 14089                           pclath	equ	0xFFA
 14090                           tblptru	equ	0xFF8
 14091                           tblptrh	equ	0xFF7
 14092                           tblptrl	equ	0xFF6
 14093                           tablat	equ	0xFF5
 14094                           prodh	equ	0xFF4
 14095                           prodl	equ	0xFF3
 14096                           intcon	equ	0xFF2
 14097                           intcon2	equ	0xFF1
 14098                           intcon3	equ	0xFF0
 14099                           indf0	equ	0xFEF
 14100                           postinc0	equ	0xFEE
 14101                           fsr0h	equ	0xFEA
 14102                           fsr0l	equ	0xFE9
 14103                           wreg	equ	0xFE8
 14104                           indf1	equ	0xFE7
 14105                           postinc1	equ	0xFE6
 14106                           postdec1	equ	0xFE5
 14107                           fsr1h	equ	0xFE2
 14108                           fsr1l	equ	0xFE1
 14109                           indf2	equ	0xFDF
 14110                           postinc2	equ	0xFDE
 14111                           postdec2	equ	0xFDD
 14112                           plusw2	equ	0xFDB
 14113                           fsr2h	equ	0xFDA
 14114                           fsr2l	equ	0xFD9
 14115                           status	equ	0xFD8
 14116                           
 14117 ;; *************** function _ativa_latch_shrc *****************
 14118 ;; Defined at:
 14119 ;;		line 96 in file "bibliotecas/SHRC.c"
 14120 ;; Parameters:    Size  Location     Type
 14121 ;;		None
 14122 ;; Auto vars:     Size  Location     Type
 14123 ;;		None
 14124 ;; Return value:  Size  Location     Type
 14125 ;;                  1    wreg      void 
 14126 ;; Registers used:
 14127 ;;		wreg
 14128 ;; Tracked objects:
 14129 ;;		On entry : 0/0
 14130 ;;		On exit  : 0/0
 14131 ;;		Unchanged: 0/0
 14132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14133 ;;      Params:         0       0       0       0       0       0       0       0       0
 14134 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14135 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14136 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14137 ;;Total ram usage:        0 bytes
 14138 ;; Hardware stack levels used:    1
 14139 ;; Hardware stack levels required when called:    2
 14140 ;; This function calls:
 14141 ;;		Nothing
 14142 ;; This function is called by:
 14143 ;;		_controle_shrc
 14144 ;; This function uses a non-reentrant model
 14145 ;;
 14146                           
 14147                           	psect	text60
 14148  00343A                     __ptext60:
 14149                           	opt stack 0
 14150  00343A                     _ativa_latch_shrc:
 14151                           	opt stack 27
 14152                           
 14153                           ;SHRC.c: 99: LATBbits.LATB5 = 0;
 14154                           
 14155                           ;incstack = 0
 14156  00343A  9A8A               	bcf	3978,5,c	;volatile
 14157                           
 14158                           ;SHRC.c: 100: _delay((unsigned long)((30)*(48000000/4000000.0)));
 14159  00343C  0E78               	movlw	120
 14160  00343E                     u9567:
 14161  00343E  2EE8               	decfsz	wreg,f,c
 14162  003440  D7FE               	bra	u9567
 14163                           
 14164                           ;SHRC.c: 101: LATBbits.LATB5 = 1;
 14165  003442  8A8A               	bsf	3978,5,c	;volatile
 14166                           
 14167                           ;SHRC.c: 102: _delay((unsigned long)((60)*(48000000/4000000.0)));
 14168  003444  0EF0               	movlw	240
 14169  003446                     u9577:
 14170  003446  2EE8               	decfsz	wreg,f,c
 14171  003448  D7FE               	bra	u9577
 14172                           
 14173                           ;SHRC.c: 103: LATBbits.LATB5 = 0;
 14174  00344A  9A8A               	bcf	3978,5,c	;volatile
 14175  00344C  0012               	return		;funcret
 14176  00344E                     __end_of_ativa_latch_shrc:
 14177                           	opt stack 0
 14178                           tosu	equ	0xFFF
 14179                           tosh	equ	0xFFE
 14180                           tosl	equ	0xFFD
 14181                           pclath	equ	0xFFA
 14182                           tblptru	equ	0xFF8
 14183                           tblptrh	equ	0xFF7
 14184                           tblptrl	equ	0xFF6
 14185                           tablat	equ	0xFF5
 14186                           prodh	equ	0xFF4
 14187                           prodl	equ	0xFF3
 14188                           intcon	equ	0xFF2
 14189                           intcon2	equ	0xFF1
 14190                           intcon3	equ	0xFF0
 14191                           indf0	equ	0xFEF
 14192                           postinc0	equ	0xFEE
 14193                           fsr0h	equ	0xFEA
 14194                           fsr0l	equ	0xFE9
 14195                           wreg	equ	0xFE8
 14196                           indf1	equ	0xFE7
 14197                           postinc1	equ	0xFE6
 14198                           postdec1	equ	0xFE5
 14199                           fsr1h	equ	0xFE2
 14200                           fsr1l	equ	0xFE1
 14201                           indf2	equ	0xFDF
 14202                           postinc2	equ	0xFDE
 14203                           postdec2	equ	0xFDD
 14204                           plusw2	equ	0xFDB
 14205                           fsr2h	equ	0xFDA
 14206                           fsr2l	equ	0xFD9
 14207                           status	equ	0xFD8
 14208                           
 14209 ;; *************** function _isr *****************
 14210 ;; Defined at:
 14211 ;;		line 110 in file "main.c"
 14212 ;; Parameters:    Size  Location     Type
 14213 ;;		None
 14214 ;; Auto vars:     Size  Location     Type
 14215 ;;  cont            1   24[COMRAM] unsigned char 
 14216 ;; Return value:  Size  Location     Type
 14217 ;;                  1    wreg      void 
 14218 ;; Registers used:
 14219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14220 ;; Tracked objects:
 14221 ;;		On entry : 0/0
 14222 ;;		On exit  : 0/0
 14223 ;;		Unchanged: 0/0
 14224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14225 ;;      Params:         0       0       0       0       0       0       0       0       0
 14226 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14227 ;;      Temps:         20       0       0       0       0       0       0       0       0
 14228 ;;      Totals:        21       0       0       0       0       0       0       0       0
 14229 ;;Total ram usage:       21 bytes
 14230 ;; Hardware stack levels used:    1
 14231 ;; Hardware stack levels required when called:    1
 14232 ;; This function calls:
 14233 ;;		_recebe_dado_uart
 14234 ;;		i2_write_timer_zero
 14235 ;; This function is called by:
 14236 ;;		Interrupt level 2
 14237 ;; This function uses a non-reentrant model
 14238 ;;
 14239                           
 14240                           	psect	intcode
 14241  000008                     __pintcode:
 14242                           	opt stack 0
 14243  000008                     _isr:
 14244                           	opt stack 18
 14245                           
 14246                           ;incstack = 0
 14247  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14248  00000A  ED4F  F012         	call	int_func,f	;refresh shadow registers
 14249                           tosu	equ	0xFFF
 14250                           tosh	equ	0xFFE
 14251                           tosl	equ	0xFFD
 14252                           pclath	equ	0xFFA
 14253                           tblptru	equ	0xFF8
 14254                           tblptrh	equ	0xFF7
 14255                           tblptrl	equ	0xFF6
 14256                           tablat	equ	0xFF5
 14257                           prodh	equ	0xFF4
 14258                           prodl	equ	0xFF3
 14259                           intcon	equ	0xFF2
 14260                           intcon2	equ	0xFF1
 14261                           intcon3	equ	0xFF0
 14262                           indf0	equ	0xFEF
 14263                           postinc0	equ	0xFEE
 14264                           fsr0h	equ	0xFEA
 14265                           fsr0l	equ	0xFE9
 14266                           wreg	equ	0xFE8
 14267                           indf1	equ	0xFE7
 14268                           postinc1	equ	0xFE6
 14269                           postdec1	equ	0xFE5
 14270                           fsr1h	equ	0xFE2
 14271                           fsr1l	equ	0xFE1
 14272                           indf2	equ	0xFDF
 14273                           postinc2	equ	0xFDE
 14274                           postdec2	equ	0xFDD
 14275                           plusw2	equ	0xFDB
 14276                           fsr2h	equ	0xFDA
 14277                           fsr2l	equ	0xFD9
 14278                           status	equ	0xFD8
 14279                           
 14280                           	psect	intcode_body
 14281  00249E                     __pintcode_body:
 14282                           	opt stack 18
 14283  00249E                     int_func:
 14284                           	opt stack 18
 14285  00249E  0006               	pop		; remove dummy address from shadow register refresh
 14286  0024A0  CFFA F007          	movff	pclath,??_isr+2
 14287  0024A4  CFFB F008          	movff	pclatu,??_isr+3
 14288  0024A8  CFE9 F009          	movff	fsr0l,??_isr+4
 14289  0024AC  CFEA F00A          	movff	fsr0h,??_isr+5
 14290  0024B0  CFE1 F00B          	movff	fsr1l,??_isr+6
 14291  0024B4  CFE2 F00C          	movff	fsr1h,??_isr+7
 14292  0024B8  CFD9 F00D          	movff	fsr2l,??_isr+8
 14293  0024BC  CFDA F00E          	movff	fsr2h,??_isr+9
 14294  0024C0  CFF3 F00F          	movff	prodl,??_isr+10
 14295  0024C4  CFF4 F010          	movff	prodh,??_isr+11
 14296  0024C8  CFF6 F011          	movff	tblptrl,??_isr+12
 14297  0024CC  CFF7 F012          	movff	tblptrh,??_isr+13
 14298  0024D0  CFF8 F013          	movff	tblptru,??_isr+14
 14299  0024D4  CFF5 F014          	movff	tablat,??_isr+15
 14300  0024D8  C046  F015         	movff	btemp,??_isr+16
 14301  0024DC  C047  F016         	movff	btemp+1,??_isr+17
 14302  0024E0  C048  F017         	movff	btemp+2,??_isr+18
 14303  0024E4  C049  F018         	movff	btemp+3,??_isr+19
 14304                           
 14305                           ;main.c: 112: unsigned char cont;
 14306                           ;main.c: 115: if (PIE1bits.RCIE && PIR1bits.RCIF)
 14307  0024E8  BA9D               	btfsc	3997,5,c	;volatile
 14308  0024EA  AA9E               	btfss	3998,5,c	;volatile
 14309  0024EC  D004               	goto	i2l1065
 14310                           
 14311                           ;main.c: 116: {
 14312                           ;main.c: 117: data_uart_recebe = recebe_dado_uart();
 14313  0024EE  EC42  F01A         	call	_recebe_dado_uart	;wreg free
 14314  0024F2  6E40               	movwf	_data_uart_recebe,c
 14315                           
 14316                           ;main.c: 118: PIR1bits.RCIF = 0;
 14317  0024F4  9A9E               	bcf	3998,5,c	;volatile
 14318  0024F6                     i2l1065:
 14319                           
 14320                           ;main.c: 119: }
 14321                           ;main.c: 122: unsigned char cont;
 14322                           ;main.c: 124: if (TMR0IF && T0IF)
 14323  0024F6  B4F2               	btfsc	intcon,2,c	;volatile
 14324  0024F8  A4F2               	btfss	intcon,2,c	;volatile
 14325  0024FA  D036               	goto	i2l1066
 14326                           
 14327                           ;main.c: 125: {
 14328                           ;main.c: 126: INTCONbits.TMR0IF = 0;
 14329  0024FC  94F2               	bcf	intcon,2,c	;volatile
 14330                           
 14331                           ;main.c: 127: sinaliza_int_timer = 1;
 14332  0024FE  0E01               	movlw	1
 14333  002500  6E3F               	movwf	_sinaliza_int_timer,c
 14334                           
 14335                           ;main.c: 129: for(cont= 0; cont<2;cont++)
 14336  002502  0E00               	movlw	0
 14337  002504  6E19               	movwf	isr@cont,c
 14338  002506                     i2l6101:
 14339  002506  0E01               	movlw	1
 14340  002508  6419               	cpfsgt	isr@cont,c
 14341  00250A  D001               	goto	i2l1067
 14342  00250C  D019               	goto	i2u638_40
 14343  00250E                     i2l1067:
 14344                           
 14345                           ;main.c: 130: {
 14346                           ;main.c: 131: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 14347  00250E  5019               	movf	isr@cont,w,c
 14348  002510  0D02               	mullw	2
 14349  002512  0E2D               	movlw	low _tempo_tarefa
 14350  002514  24F3               	addwf	prodl,w,c
 14351  002516  6ED9               	movwf	fsr2l,c
 14352  002518  0E00               	movlw	high _tempo_tarefa
 14353  00251A  20F4               	addwfc	prodh,w,c
 14354  00251C  6EDA               	movwf	fsr2h,c
 14355  00251E  50DE               	movf	postinc2,w,c
 14356  002520  10DE               	iorwf	postinc2,w,c
 14357  002522  B4D8               	btfsc	status,2,c
 14358  002524  D00B               	goto	i2l1069
 14359  002526  5019               	movf	isr@cont,w,c
 14360  002528  0D02               	mullw	2
 14361  00252A  0E2D               	movlw	low _tempo_tarefa
 14362  00252C  24F3               	addwf	prodl,w,c
 14363  00252E  6ED9               	movwf	fsr2l,c
 14364  002530  0E00               	movlw	high _tempo_tarefa
 14365  002532  20F4               	addwfc	prodh,w,c
 14366  002534  6EDA               	movwf	fsr2h,c
 14367  002536  06DE               	decf	postinc2,f,c
 14368  002538  0E00               	movlw	0
 14369  00253A  5ADD               	subwfb	postdec2,f,c
 14370  00253C                     i2l1069:
 14371  00253C  2A19               	incf	isr@cont,f,c
 14372  00253E  D7E3               	goto	i2l6101
 14373  002540                     i2u638_40:
 14374                           
 14375                           ;main.c: 132: }
 14376                           ;main.c: 135: if(tarefa_em_execucao == 1)
 14377  002540  043E               	decf	_tarefa_em_execucao,w,c	;volatile
 14378  002542  A4D8               	btfss	status,2,c
 14379  002544  D00B               	goto	i2l1071
 14380                           
 14381                           ;main.c: 136: {
 14382                           ;main.c: 137: timeout_tarefa--;
 14383  002546  0635               	decf	_timeout_tarefa,f,c
 14384  002548  A0D8               	btfss	status,0,c
 14385  00254A  0636               	decf	_timeout_tarefa+1,f,c
 14386                           
 14387                           ;main.c: 138: if(!timeout_tarefa)
 14388  00254C  5035               	movf	_timeout_tarefa,w,c
 14389  00254E  1036               	iorwf	_timeout_tarefa+1,w,c
 14390  002550  A4D8               	btfss	status,2,c
 14391  002552  D004               	goto	i2l1071
 14392                           
 14393                           ;main.c: 139: {
 14394                           ;main.c: 141: PCLATH = 0;
 14395  002554  0E00               	movlw	0
 14396  002556  6EFA               	movwf	pclath,c	;volatile
 14397                           
 14398                           ;main.c: 142: PCL = 0;
 14399  002558  0E00               	movlw	0
 14400  00255A  6EF9               	movwf	pcl,c	;volatile
 14401  00255C                     i2l1071:
 14402                           
 14403                           ;main.c: 143: }
 14404                           ;main.c: 144: }
 14405                           ;main.c: 147: write_timer_zero(0x0083);
 14406  00255C  0E00               	movlw	0
 14407  00255E  6E02               	movwf	i2write_timer_zero@timer0+1,c
 14408  002560  0E83               	movlw	131
 14409  002562  6E01               	movwf	i2write_timer_zero@timer0,c
 14410  002564  EC39  F01A         	call	i2_write_timer_zero	;wreg free
 14411  002568                     i2l1066:
 14412                           
 14413                           ;main.c: 149: }
 14414                           ;main.c: 151: if (INT0IF && INT0IE)
 14415  002568  B2F2               	btfsc	intcon,1,c	;volatile
 14416  00256A  A8F2               	btfss	intcon,4,c	;volatile
 14417  00256C  D001               	goto	i2l1072
 14418                           
 14419                           ;main.c: 152: {
 14420                           ;main.c: 153: INT0IF = 0;
 14421  00256E  92F2               	bcf	intcon,1,c	;volatile
 14422  002570                     i2l1072:
 14423  002570  C018  F049         	movff	??_isr+19,btemp+3
 14424  002574  C017  F048         	movff	??_isr+18,btemp+2
 14425  002578  C016  F047         	movff	??_isr+17,btemp+1
 14426  00257C  C015  F046         	movff	??_isr+16,btemp
 14427  002580  C014  FFF5         	movff	??_isr+15,tablat
 14428  002584  C013  FFF8         	movff	??_isr+14,tblptru
 14429  002588  C012  FFF7         	movff	??_isr+13,tblptrh
 14430  00258C  C011  FFF6         	movff	??_isr+12,tblptrl
 14431  002590  C010  FFF4         	movff	??_isr+11,prodh
 14432  002594  C00F  FFF3         	movff	??_isr+10,prodl
 14433  002598  C00E  FFDA         	movff	??_isr+9,fsr2h
 14434  00259C  C00D  FFD9         	movff	??_isr+8,fsr2l
 14435  0025A0  C00C  FFE2         	movff	??_isr+7,fsr1h
 14436  0025A4  C00B  FFE1         	movff	??_isr+6,fsr1l
 14437  0025A8  C00A  FFEA         	movff	??_isr+5,fsr0h
 14438  0025AC  C009  FFE9         	movff	??_isr+4,fsr0l
 14439  0025B0  C008  FFFB         	movff	??_isr+3,pclatu
 14440  0025B4  C007  FFFA         	movff	??_isr+2,pclath
 14441  0025B8  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14442  0025BA  0011               	retfie		f
 14443  0025BC                     __end_of_isr:
 14444                           	opt stack 0
 14445                           tosu	equ	0xFFF
 14446                           tosh	equ	0xFFE
 14447                           tosl	equ	0xFFD
 14448                           pclatu	equ	0xFFB
 14449                           pclath	equ	0xFFA
 14450                           pcl	equ	0xFF9
 14451                           tblptru	equ	0xFF8
 14452                           tblptrh	equ	0xFF7
 14453                           tblptrl	equ	0xFF6
 14454                           tablat	equ	0xFF5
 14455                           prodh	equ	0xFF4
 14456                           prodl	equ	0xFF3
 14457                           intcon	equ	0xFF2
 14458                           intcon2	equ	0xFF1
 14459                           intcon3	equ	0xFF0
 14460                           indf0	equ	0xFEF
 14461                           postinc0	equ	0xFEE
 14462                           fsr0h	equ	0xFEA
 14463                           fsr0l	equ	0xFE9
 14464                           wreg	equ	0xFE8
 14465                           indf1	equ	0xFE7
 14466                           postinc1	equ	0xFE6
 14467                           postdec1	equ	0xFE5
 14468                           fsr1h	equ	0xFE2
 14469                           fsr1l	equ	0xFE1
 14470                           indf2	equ	0xFDF
 14471                           postinc2	equ	0xFDE
 14472                           postdec2	equ	0xFDD
 14473                           plusw2	equ	0xFDB
 14474                           fsr2h	equ	0xFDA
 14475                           fsr2l	equ	0xFD9
 14476                           status	equ	0xFD8
 14477                           
 14478 ;; *************** function i2_write_timer_zero *****************
 14479 ;; Defined at:
 14480 ;;		line 138 in file "bibliotecas/hardware.c"
 14481 ;; Parameters:    Size  Location     Type
 14482 ;;  timer0          2    0[COMRAM] unsigned int 
 14483 ;; Auto vars:     Size  Location     Type
 14484 ;;  write_timer_    2    2[COMRAM] struct Timers
 14485 ;; Return value:  Size  Location     Type
 14486 ;;                  1    wreg      void 
 14487 ;; Registers used:
 14488 ;;		None
 14489 ;; Tracked objects:
 14490 ;;		On entry : 0/0
 14491 ;;		On exit  : 0/0
 14492 ;;		Unchanged: 0/0
 14493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14494 ;;      Params:         2       0       0       0       0       0       0       0       0
 14495 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14496 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14497 ;;      Totals:         4       0       0       0       0       0       0       0       0
 14498 ;;Total ram usage:        4 bytes
 14499 ;; Hardware stack levels used:    1
 14500 ;; This function calls:
 14501 ;;		Nothing
 14502 ;; This function is called by:
 14503 ;;		_isr
 14504 ;; This function uses a non-reentrant model
 14505 ;;
 14506                           
 14507                           	psect	text62
 14508  003472                     __ptext62:
 14509                           	opt stack 0
 14510  003472                     i2_write_timer_zero:
 14511                           	opt stack 18
 14512                           
 14513                           ;hardware.c: 140: union Timers timer;
 14514                           ;hardware.c: 142: timer.lt = timer0;
 14515                           
 14516                           ;incstack = 0
 14517  003472  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 14518  003476  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 14519                           
 14520                           ;hardware.c: 144: TMR0H = timer.bt[1];
 14521  00347A  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 14522                           
 14523                           ;hardware.c: 145: TMR0L = timer.bt[0];
 14524  00347E  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 14525  003482  0012               	return		;funcret
 14526  003484                     __end_ofi2_write_timer_zero:
 14527                           	opt stack 0
 14528                           tosu	equ	0xFFF
 14529                           tosh	equ	0xFFE
 14530                           tosl	equ	0xFFD
 14531                           pclatu	equ	0xFFB
 14532                           pclath	equ	0xFFA
 14533                           pcl	equ	0xFF9
 14534                           tblptru	equ	0xFF8
 14535                           tblptrh	equ	0xFF7
 14536                           tblptrl	equ	0xFF6
 14537                           tablat	equ	0xFF5
 14538                           prodh	equ	0xFF4
 14539                           prodl	equ	0xFF3
 14540                           intcon	equ	0xFF2
 14541                           intcon2	equ	0xFF1
 14542                           intcon3	equ	0xFF0
 14543                           indf0	equ	0xFEF
 14544                           postinc0	equ	0xFEE
 14545                           fsr0h	equ	0xFEA
 14546                           fsr0l	equ	0xFE9
 14547                           wreg	equ	0xFE8
 14548                           indf1	equ	0xFE7
 14549                           postinc1	equ	0xFE6
 14550                           postdec1	equ	0xFE5
 14551                           fsr1h	equ	0xFE2
 14552                           fsr1l	equ	0xFE1
 14553                           indf2	equ	0xFDF
 14554                           postinc2	equ	0xFDE
 14555                           postdec2	equ	0xFDD
 14556                           plusw2	equ	0xFDB
 14557                           fsr2h	equ	0xFDA
 14558                           fsr2l	equ	0xFD9
 14559                           status	equ	0xFD8
 14560                           
 14561 ;; *************** function _recebe_dado_uart *****************
 14562 ;; Defined at:
 14563 ;;		line 138 in file "bibliotecas/uart.c"
 14564 ;; Parameters:    Size  Location     Type
 14565 ;;		None
 14566 ;; Auto vars:     Size  Location     Type
 14567 ;;		None
 14568 ;; Return value:  Size  Location     Type
 14569 ;;                  1    wreg      unsigned char 
 14570 ;; Registers used:
 14571 ;;		wreg, status,2
 14572 ;; Tracked objects:
 14573 ;;		On entry : 0/0
 14574 ;;		On exit  : 0/0
 14575 ;;		Unchanged: 0/0
 14576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14577 ;;      Params:         0       0       0       0       0       0       0       0       0
 14578 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14579 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14580 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14581 ;;Total ram usage:        0 bytes
 14582 ;; Hardware stack levels used:    1
 14583 ;; This function calls:
 14584 ;;		Nothing
 14585 ;; This function is called by:
 14586 ;;		_isr
 14587 ;;		_recebe_string_uart
 14588 ;; This function uses a non-reentrant model
 14589 ;;
 14590                           
 14591                           	psect	text63
 14592  003484                     __ptext63:
 14593                           	opt stack 0
 14594  003484                     _recebe_dado_uart:
 14595                           	opt stack 18
 14596                           
 14597                           ;uart.c: 140: while(RCIF==0);
 14598                           
 14599                           ;incstack = 0
 14600  003484  AA9E               	btfss	3998,5,c	;volatile
 14601  003486  D7FE               	goto	_recebe_dado_uart
 14602                           
 14603                           ;uart.c: 141: if(RCSTAbits.OERR)
 14604  003488  A2AB               	btfss	4011,1,c	;volatile
 14605  00348A  D003               	goto	i2l941
 14606                           
 14607                           ;uart.c: 142: {
 14608                           ;uart.c: 143: CREN = 0;
 14609  00348C  98AB               	bcf	4011,4,c	;volatile
 14610                           
 14611                           ;uart.c: 144: __nop();
 14612  00348E  F000               	nop	
 14613                           
 14614                           ;uart.c: 145: CREN=1;
 14615  003490  88AB               	bsf	4011,4,c	;volatile
 14616  003492                     i2l941:
 14617                           
 14618                           ;uart.c: 146: }
 14619                           ;uart.c: 147: return(RCREG);
 14620  003492  50AE               	movf	4014,w,c	;volatile
 14621  003494  0012               	return	
 14622  003496                     __end_of_recebe_dado_uart:
 14623                           	opt stack 0
 14624                           tosu	equ	0xFFF
 14625                           tosh	equ	0xFFE
 14626                           tosl	equ	0xFFD
 14627                           pclatu	equ	0xFFB
 14628                           pclath	equ	0xFFA
 14629                           pcl	equ	0xFF9
 14630                           tblptru	equ	0xFF8
 14631                           tblptrh	equ	0xFF7
 14632                           tblptrl	equ	0xFF6
 14633                           tablat	equ	0xFF5
 14634                           prodh	equ	0xFF4
 14635                           prodl	equ	0xFF3
 14636                           intcon	equ	0xFF2
 14637                           intcon2	equ	0xFF1
 14638                           intcon3	equ	0xFF0
 14639                           indf0	equ	0xFEF
 14640                           postinc0	equ	0xFEE
 14641                           fsr0h	equ	0xFEA
 14642                           fsr0l	equ	0xFE9
 14643                           wreg	equ	0xFE8
 14644                           indf1	equ	0xFE7
 14645                           postinc1	equ	0xFE6
 14646                           postdec1	equ	0xFE5
 14647                           fsr1h	equ	0xFE2
 14648                           fsr1l	equ	0xFE1
 14649                           indf2	equ	0xFDF
 14650                           postinc2	equ	0xFDE
 14651                           postdec2	equ	0xFDD
 14652                           plusw2	equ	0xFDB
 14653                           fsr2h	equ	0xFDA
 14654                           fsr2l	equ	0xFD9
 14655                           status	equ	0xFD8
 14656                           tosu	equ	0xFFF
 14657                           tosh	equ	0xFFE
 14658                           tosl	equ	0xFFD
 14659                           pclatu	equ	0xFFB
 14660                           pclath	equ	0xFFA
 14661                           pcl	equ	0xFF9
 14662                           tblptru	equ	0xFF8
 14663                           tblptrh	equ	0xFF7
 14664                           tblptrl	equ	0xFF6
 14665                           tablat	equ	0xFF5
 14666                           prodh	equ	0xFF4
 14667                           prodl	equ	0xFF3
 14668                           intcon	equ	0xFF2
 14669                           intcon2	equ	0xFF1
 14670                           intcon3	equ	0xFF0
 14671                           indf0	equ	0xFEF
 14672                           postinc0	equ	0xFEE
 14673                           fsr0h	equ	0xFEA
 14674                           fsr0l	equ	0xFE9
 14675                           wreg	equ	0xFE8
 14676                           indf1	equ	0xFE7
 14677                           postinc1	equ	0xFE6
 14678                           postdec1	equ	0xFE5
 14679                           fsr1h	equ	0xFE2
 14680                           fsr1l	equ	0xFE1
 14681                           indf2	equ	0xFDF
 14682                           postinc2	equ	0xFDE
 14683                           postdec2	equ	0xFDD
 14684                           plusw2	equ	0xFDB
 14685                           fsr2h	equ	0xFDA
 14686                           fsr2l	equ	0xFD9
 14687                           status	equ	0xFD8
 14688                           
 14689                           	psect	text64
 14690  000000                     __ptext64:
 14691                           	opt stack 0
 14692                           tosu	equ	0xFFF
 14693                           tosh	equ	0xFFE
 14694                           tosl	equ	0xFFD
 14695                           pclatu	equ	0xFFB
 14696                           pclath	equ	0xFFA
 14697                           pcl	equ	0xFF9
 14698                           tblptru	equ	0xFF8
 14699                           tblptrh	equ	0xFF7
 14700                           tblptrl	equ	0xFF6
 14701                           tablat	equ	0xFF5
 14702                           prodh	equ	0xFF4
 14703                           prodl	equ	0xFF3
 14704                           intcon	equ	0xFF2
 14705                           intcon2	equ	0xFF1
 14706                           intcon3	equ	0xFF0
 14707                           indf0	equ	0xFEF
 14708                           postinc0	equ	0xFEE
 14709                           fsr0h	equ	0xFEA
 14710                           fsr0l	equ	0xFE9
 14711                           wreg	equ	0xFE8
 14712                           indf1	equ	0xFE7
 14713                           postinc1	equ	0xFE6
 14714                           postdec1	equ	0xFE5
 14715                           fsr1h	equ	0xFE2
 14716                           fsr1l	equ	0xFE1
 14717                           indf2	equ	0xFDF
 14718                           postinc2	equ	0xFDE
 14719                           postdec2	equ	0xFDD
 14720                           plusw2	equ	0xFDB
 14721                           fsr2h	equ	0xFDA
 14722                           fsr2l	equ	0xFD9
 14723                           status	equ	0xFD8
 14724                           
 14725                           	psect	rparam
 14726  0000                     tosu	equ	0xFFF
 14727                           tosh	equ	0xFFE
 14728                           tosl	equ	0xFFD
 14729                           pclatu	equ	0xFFB
 14730                           pclath	equ	0xFFA
 14731                           pcl	equ	0xFF9
 14732                           tblptru	equ	0xFF8
 14733                           tblptrh	equ	0xFF7
 14734                           tblptrl	equ	0xFF6
 14735                           tablat	equ	0xFF5
 14736                           prodh	equ	0xFF4
 14737                           prodl	equ	0xFF3
 14738                           intcon	equ	0xFF2
 14739                           intcon2	equ	0xFF1
 14740                           intcon3	equ	0xFF0
 14741                           indf0	equ	0xFEF
 14742                           postinc0	equ	0xFEE
 14743                           fsr0h	equ	0xFEA
 14744                           fsr0l	equ	0xFE9
 14745                           wreg	equ	0xFE8
 14746                           indf1	equ	0xFE7
 14747                           postinc1	equ	0xFE6
 14748                           postdec1	equ	0xFE5
 14749                           fsr1h	equ	0xFE2
 14750                           fsr1l	equ	0xFE1
 14751                           indf2	equ	0xFDF
 14752                           postinc2	equ	0xFDE
 14753                           postdec2	equ	0xFDD
 14754                           plusw2	equ	0xFDB
 14755                           fsr2h	equ	0xFDA
 14756                           fsr2l	equ	0xFD9
 14757                           status	equ	0xFD8
 14758                           
 14759                           	psect	temp
 14760  000046                     btemp:
 14761                           	opt stack 0
 14762  000046                     	ds	1
 14763  0000                     int$flags	set	btemp
 14764  0000                     wtemp6	set	btemp+1
 14765                           tosu	equ	0xFFF
 14766                           tosh	equ	0xFFE
 14767                           tosl	equ	0xFFD
 14768                           pclatu	equ	0xFFB
 14769                           pclath	equ	0xFFA
 14770                           pcl	equ	0xFF9
 14771                           tblptru	equ	0xFF8
 14772                           tblptrh	equ	0xFF7
 14773                           tblptrl	equ	0xFF6
 14774                           tablat	equ	0xFF5
 14775                           prodh	equ	0xFF4
 14776                           prodl	equ	0xFF3
 14777                           intcon	equ	0xFF2
 14778                           intcon2	equ	0xFF1
 14779                           intcon3	equ	0xFF0
 14780                           indf0	equ	0xFEF
 14781                           postinc0	equ	0xFEE
 14782                           fsr0h	equ	0xFEA
 14783                           fsr0l	equ	0xFE9
 14784                           wreg	equ	0xFE8
 14785                           indf1	equ	0xFE7
 14786                           postinc1	equ	0xFE6
 14787                           postdec1	equ	0xFE5
 14788                           fsr1h	equ	0xFE2
 14789                           fsr1l	equ	0xFE1
 14790                           indf2	equ	0xFDF
 14791                           postinc2	equ	0xFDE
 14792                           postdec2	equ	0xFDD
 14793                           plusw2	equ	0xFDB
 14794                           fsr2h	equ	0xFDA
 14795                           fsr2l	equ	0xFD9
 14796                           status	equ	0xFD8


Data Sizes:
    Strings     216
    Constant    213
    Data        24
    BSS         690
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      69
    BANK0           160    117     125
    BANK1           256     63     232
    BANK2           256     45      45
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    pf_open@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[10]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(COMRAM[7]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> SDCard(), acende_led4(), 

    pf_readdir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_opendir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK2[2]), 

    pf_write@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    pf_write@buff	PTR const void  size(2) Largest target is 8
		 -> STR_14(CODE[8]), 

    pf_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_14(CODE[8]), 

    pf_read$1886	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), NULL(NULL[0]), 

    pf_read@br	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK2[2]), 

    pf_read@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    pf_read@buff	PTR void  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_read@rbuff	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_open@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    pf_mount@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), 

    check_fs@buf	PTR unsigned char  size(2) Largest target is 36
		 -> pf_mount@buf(BANK0[36]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    follow_path@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    follow_path@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), 

    get_fileinfo@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), 

    create_name@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    create_name@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_read@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_find@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    dir_find@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_next@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_next@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_next@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    S1575$fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_rewind@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    dir_rewind@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK1[16]), 

    dir_rewind@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    get_clust@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    get_clust@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    FatFs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    get_fat@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK2[42]), NULL(NULL[0]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 

    mem_set@dst	PTR void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK1[12]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 17
		 -> STR_21(CODE[16]), STR_20(CODE[14]), STR_19(CODE[14]), STR_18(CODE[14]), 
		 -> STR_17(CODE[14]), STR_16(CODE[13]), STR_15(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[15]), STR_10(CODE[14]), mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), STR_7(CODE[3]), STR_6(CODE[8]), STR_5(CODE[14]), 
		 -> STR_4(CODE[13]), STR_3(CODE[9]), STR_2(CODE[14]), leitura_chave@pos_ignicao_on(COMRAM[17]), 
		 -> leitura_chave@pos_ignicao_crank(COMRAM[17]), leitura_chave@pos_ignicao_off(COMRAM[17]), STR_1(CODE[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(COMRAM[7]), 

    disk_writep@wr	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_14(CODE[8]), ROM(CODE[32767]), 

    disk_readp@rd	PTR unsigned char  size(2) Largest target is 36
		 -> data_buffer_32(BANK1[32]), pf_readdir@dir(COMRAM[32]), pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK1[32]), 
		 -> pf_mount@buf(BANK0[36]), NULL(NULL[0]), get_fat@buf(BANK0[4]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _leitura_continua_adc->_leitura_adc
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _inicializa_SPI->_posicao_cursor_lcd
    _acende_led4->_shrc_apaga_bit
    _acende_led4->_shrc_seta_bit
    _pf_write->_disk_writep
    _disk_writep->_command
    _pf_read->_clust2sect
    _follow_path->_create_name
    _dir_rewind->_clust2sect
    _dir_next->_clust2sect
    _get_fat->_disk_readp
    _clust2sect->___lmul
    _create_name->_mem_set
    _disk_initialize->_reset
    _reset->_command
    _escreve_cmd_lcd->_delay
    _check_fs->_disk_readp
    _disk_readp->_command
    _response->_recebe_dado_SPI
    _proceed->_WriteSPI_
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _dummy_clocks->_WriteSPI_
    _command->_WriteSPI_
    _controle_shrc->_envia_dados_shrc

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _main->_escalonador
    _inicializa_uart->_configura_baudrate_uart
    _SDCard->_pf_open
    _pf_write->_get_fat
    _pf_read->_get_fat
    _pf_open->_follow_path
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_rewind->_clust2sect
    _dir_next->_get_fat
    _get_fat->_disk_readp
    _pf_mount->_check_fs
    _check_fs->_disk_readp

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _SDCard->_pf_open

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _escalonador->_SDCard

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  155880
                      _controle_shrc
                        _escalonador
                     _inicializa_SPI
                    _inicializa_shrc
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
             _leitura_chaves_sistema
               _leitura_continua_adc
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    5743
                                             31 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _leitura_continua_adc                                 8     8      0     312
                                             32 COMRAM     8     8      0
                        _leitura_adc
 ---------------------------------------------------------------------------------
 (2) _leitura_adc                                          7     5      2      22
                                             25 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _leitura_chaves_sistema                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             39 COMRAM     4     0      4
                                              0 BANK0     10    10      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                             25 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_shrc                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_SPI                                       3     1      2    5967
                                             31 COMRAM     3     1      2
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  141887
                                            114 BANK0      3     3      0
                             _SDCard *
                        _acende_led4 *
 ---------------------------------------------------------------------------------
 (2) _acende_led4                                          0     0      0      44
                     _shrc_apaga_bit
                      _shrc_seta_bit
 ---------------------------------------------------------------------------------
 (3) _shrc_seta_bit                                        3     3      0      22
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _shrc_apaga_bit                                       3     3      0      22
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SDCard                                              45    45      0  141620
                                              0 BANK2     45    45      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                           _pf_mount
                            _pf_open
                            _pf_read
                           _pf_write
                 _posicao_cursor_lcd
                            _proceed
                           _readover
 ---------------------------------------------------------------------------------
 (3) _readover                                             2     0      2     121
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _pf_write                                            33    27      6   21535
                                             58 BANK0     33    27      6
                         _clust2sect
                        _disk_writep
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _disk_writep                                         17    10      7    3498
                                             37 COMRAM     7     0      7
                                              0 BANK0      9     9      0
                          _WriteSPI_
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (3) _pf_read                                             36    30      6   31169
                                             58 BANK0     36    30      6
                         _clust2sect
                         _disk_readp
                            _get_fat
 ---------------------------------------------------------------------------------
 (3) _pf_open                                             87    85      2   40129
                                             90 BANK0     24    22      2
                                              0 BANK1     63    63      0
                        _follow_path
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _follow_path                                          7     1      6   38787
                                             83 BANK0      7     1      6
                        _create_name
                           _dir_find
                         _dir_rewind
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _get_clust                                           18    14      4     471
                                             25 COMRAM    18    14      4
 ---------------------------------------------------------------------------------
 (5) _dir_find                                             8     4      4   33513
                                             75 BANK0      8     4      4
                           _dir_next
                         _dir_rewind
                         _disk_readp
                            _mem_cmp
 ---------------------------------------------------------------------------------
 (6) _mem_cmp                                             15     9      6     468
                                             25 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (5) _dir_rewind                                          16    14      2    2027
                                              5 BANK0     16    14      2
                         _clust2sect
 ---------------------------------------------------------------------------------
 (6) _dir_next                                            17    15      2   17018
                                             58 BANK0     17    15      2
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             40    36      4   14932
                                             18 BANK0     40    36      4
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     7      4    1187
                                             37 COMRAM     6     2      4
                                              0 BANK0      5     5      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _create_name                                         20    16      4    1682
                                             33 COMRAM    11     7      4
                                              0 BANK0      9     9      0
                            _mem_set
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6     400
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _pf_mount                                            77    75      2   42272
                                             28 BANK0     77    75      2
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     10    10      0   11110
                                              0 BANK0     10    10      0
                            _command
                       _dummy_clocks
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                              _reset
                           _response
 ---------------------------------------------------------------------------------
 (5) _reset                                                7     7      0    2577
                                             37 COMRAM     7     7      0
                            _command
                       _dummy_clocks
                            _proceed
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   14072
                                             18 BANK0     10     4      6
                         _disk_readp
 ---------------------------------------------------------------------------------
 (5) _disk_readp                                          25    15     10   13340
                                             37 COMRAM     4     4      0
                                              0 BANK0     18     8     10
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (6) _response                                             1     1      0      37
                                             28 COMRAM     1     1      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (7) _recebe_dado_SPI                                      3     3      0       3
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _proceed                                              0     0      0      34
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    2667
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2519
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _dummy_clocks                                         5     5      0     102
                                             29 COMRAM     5     5      0
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (6) _command                                              8     3      5    2336
                                             29 COMRAM     8     3      5
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (4) _WriteSPI_                                            4     4      0      34
                                             25 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     576
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     721
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _controle_shrc                                        0     0      0      45
                   _ativa_latch_shrc
                   _envia_dados_shrc
 ---------------------------------------------------------------------------------
 (2) _envia_dados_shrc                                     2     2      0      45
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ativa_latch_shrc                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _isr                                                21    21      0     183
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (13) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (13) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _controle_shrc
     _ativa_latch_shrc
     _envia_dados_shrc
   _escalonador
     _SDCard *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _pf_mount
         ___lldiv
         ___lmul
         _check_fs
           _disk_readp
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
         _disk_initialize
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _escreve_cmd_lcd
             _delay
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
           _reset
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _proceed
               _WriteSPI_
           _response
             _recebe_dado_SPI
         _disk_readp
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
       _pf_open
         _follow_path
           _create_name
             _mem_set
           _dir_find
             _dir_next
               _clust2sect
                 ___lmul
               _get_fat
                 _disk_readp
                   _command
                     _WriteSPI_
                   _dummy_clocks
                     _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _WriteSPI_
                   _response
                     _recebe_dado_SPI
             _dir_rewind
               _clust2sect
                 ___lmul
             _disk_readp
               _command
                 _WriteSPI_
               _dummy_clocks
                 _WriteSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _recebe_dado_SPI
             _mem_cmp
           _dir_rewind
             _clust2sect
               ___lmul
           _get_clust
         _get_clust
       _pf_read
         _clust2sect
           ___lmul
         _disk_readp
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
         _get_fat
           _disk_readp
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
       _pf_write
         _clust2sect
           ___lmul
         _disk_writep
           _WriteSPI_
           _command
             _WriteSPI_
           _dummy_clocks
             _WriteSPI_
           _proceed
             _WriteSPI_
           _response
             _recebe_dado_SPI
         _get_fat
           _disk_readp
             _command
               _WriteSPI_
             _dummy_clocks
               _WriteSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _recebe_dado_SPI
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _proceed
         _WriteSPI_
       _readover
     _acende_led4 *
       _shrc_apaga_bit
       _shrc_seta_bit
   _inicializa_SPI
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay
   _inicializa_shrc
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _leitura_chaves_sistema
   _leitura_continua_adc
     _leitura_adc
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     200      21       25.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     2D      2D       9       17.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     3F      E8       7       90.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     75      7D       5       78.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D7      20        0.0%
DATA                 0      0     3D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jan 20 20:47:24 2022

        __end_of_mensagem_inicial 2D72                       get_fat@clst 0072  
                               _s 0041                      create_name@c 0068  
                    create_name@d 0060                      create_name@i 0067  
                    create_name@p 0061            __size_of_controle_shrc 000C  
                     _SSPSTATbits 000FC7                  ??_init_interrupt 001A  
                              l50 32CE                                l51 32C0  
                              l73 31F4                                l74 31C4  
                              l75 31CC                                l76 31CE  
                     __CFG_BOR$ON 000000                                _rd 0037  
                   pf_mount@bsect 00C0                       __CFG_BORV$3 000000  
                   pf_mount@mclst 00BC                     pf_mount@fsize 00C4  
                    ?_escalonador 0001                     create_name@dj 0022  
                   pf_mount@tsect 00B8                     create_name@ni 0063  
                   create_name@si 0064                  ?_inicializa_shrc 0001  
                ?_inicializa_uart 0001                               l130 2CD4  
                             l122 2CA0                               l131 2CBC  
                             l123 2C96                               l132 2CC0  
                             l125 2C9A                               l142 319E  
                             l126 2C9C                               l303 141C  
                             l400 2F88                               l312 14A2  
                             l304 1408                               l128 2CC4  
                             l401 2F8A                               l137 332E  
                             l313 148A                               l129 2CB6  
                             l402 2F92                               l410 2F2E  
                             l322 155A                               l306 1462  
                             l170 300C                               l403 2F94  
                             l411 2EE2                               l315 14E4  
                             l331 202A                               l171 3038  
                             l420 2DF8                               l412 2EF0  
                             l324 1592                               l316 14B4  
                             l172 3010                               l421 2E00  
                             l413 2EFE                               l325 157E  
                             l333 2074                               l173 3014  
                             l181 2382                               l430 2E36  
                             l422 2E02                               l414 2F0C  
                             l326 157A                               l318 150E  
                             l270 169A                               l174 3018  
                             l431 2E3E                               l423 2E0A  
                             l407 2F32                               l319 14F6  
                             l335 20AC                               l183 238E  
                             l360 3374                               l432 2E40  
                             l424 2E0C                               l408 2F12  
                             l328 15A8                               l280 17C2  
                             l336 20B2                               l176 303A  
                             l433 2E48                               l425 2E14  
                             l409 2ED6                               l257 2D82  
                             l281 1800                               l337 2108  
                             l169 301E                               l434 2E4A  
                             l426 2E16                               l370 2B88  
                             l258 2DA6                               l274 1700  
                             l266 161E                               l427 2E2A  
                             l419 2DF6                               l291 1318  
                             l371 2B8A                               l428 2E2C  
                             l452 3148                               l380 2BC6  
                             l372 2B92                               l268 177E  
                             l429 2E34                               l453 3120  
                             l293 134A                               l381 2BC8  
                             l373 2B94                               l269 166E  
                             l701 2776                               l358 3366  
                             l390 2F4A                               l294 1332  
                             l382 2BD0                               l374 2B9C  
                             l702 27B6                               l391 2F4C  
                             l383 2BD2                               l375 2B9E  
                             l631 2E70                               l392 2F54  
                             l288 13CE                               l296 1390  
                             l376 2BB2                               l368 2B7E  
                             l624 32FC                               l800 0F16  
                             l393 2F56                               l289 12F0  
                             l377 2BB4                               l369 2B80  
                             l625 32EC                               l394 2F5E  
                             l298 13AC                               l378 2BBC  
                             l722 1F96                               l642 0EB8  
                             l810 10BC                               l802 0F2A  
                             l395 2F60                               l299 13A8  
                             l379 2BBE                               l731 1F6E  
                             l723 1F40                               l651 0CC8  
                             l643 0B50                               l811 112A  
                             l396 2F74                               l660 29C6  
                             l644 0BE6                               l804 126C  
                             l812 11AA                               l397 2F76  
                             l733 1F7E                               l653 0CE6  
                             l805 0FB6                               l821 0674  
                             l398 2F7E                               l718 1EE4  
                             l646 0ED4                               l654 0CF4  
                             l670 22B2                               l750 25BE  
                             l814 11BC                               l806 115E  
                             l830 07AA                               l399 2F80  
                             l807 10D8                               l831 09A8  
                             l823 0688                               l656 0D9A  
                             l680 2354                               l664 2910  
                             l760 26A2                               l752 25EE  
                             l816 11C4                               l808 1066  
                             l840 0AF8                               l832 08C8  
                             l824 06F2                               l649 0CA8  
                             l753 2632                               l817 1232  
                             l809 1096                               l841 0AE6  
                             l833 0856                               l825 06DC  
                             l674 22EA                               l834 0886  
                             l771 002A                               l691 1A24  
                             l683 18C6                               l835 08AC  
                             l827 071E                               l915 2232  
                             l764 1C22                               l780 021C  
                             l692 19B2                               l836 091A  
                             l781 036A                               l693 19D6  
                             l757 26CE                               l749 25C4  
                             l837 0996                               l766 1C60  
                             l782 0464                               l774 0096  
                             l678 2330                               l838 09F4  
                             l767 1CD0                               l783 048C  
                             l839 0A42                               l768 1D42  
                             l784 04A2                               l776 0130  
                             l688 1924                               l696 26EC  
                             l792 1D5C                               l785 04AC  
                             l777 013C                               l786 0550  
                             l778 0146                               l794 1DA0  
                             l779 017C                               l795 1DAE  
                             l789 05A0                               _PCL 000FF9  
                             _PR2 000FCB                       get_clust@fs 0026  
                ??_init_oscilador 001A                               _isr 0008  
                             _txt 0156                               prod 000FF3  
                             tosl 000FFD                               wreg 000FE8  
                    __CFG_FOSC$HS 000000                      disk_readp@rd 0060  
                  create_name@cvt 60D1         __size_of_write_timer_zero 0012  
                  create_name@sfn 0065                      __CFG_LVP$OFF 000000  
         ??_escreve_frase_ram_lcd 001F                      __CFG_WDT$OFF 000000  
                            l1101 1BDE                              l1102 1BAA  
                            l1103 1AF6                              l1112 1BA8  
                            l1200 2834                              l1105 1B12  
                            l1201 2828                              l1122 1BE0  
                            l1107 1B14                              l1116 1BDC  
                            l1204 2868                              l1109 1B76  
                            l1205 2876                              l1150 30EC  
                            l1126 1BE8                              l1206 288C  
                            l1135 3352                              l1081 2ACC  
                            l1149 30D8                              l1510 2C5C  
                            l1511 2C6A                              l1079 2A3A  
                            l1087 3224                              l1088 3232  
                            l1506 2C28                              l1507 2C1C  
                            l1197 27EE                              l1198 2806  
            __size_of_acende_led4 0024                              l6231 336C  
                            l6225 335E                              l7063 2068  
                            l6521 14B4                              l7161 1CD0  
                            l6515 148A                              l5643 237A  
                            l7169 1D42                              l7273 048C  
                            l5649 2386                              l6803 2DC0  
                            l7267 0464                              l6651 32EC  
                            ?_isr 0001                              l7375 10BC  
                            l6729 19B2                              l7811 2A32  
                            l7487 08AC                              l6967 16BC  
                            l6987 1722             _escreve_caractere_lcd 2DE6  
                            STR_1 61B7                              STR_2 622D  
                            STR_3 625F                              STR_4 6248  
                            STR_5 621F                              STR_6 6270  
                            STR_7 627B                              STR_8 6255  
                            STR_9 6278                    timer_dois@flag 0043  
                            _BRGH 007D62                              _CREN 007D5C  
                            _T0IF 007F92                              _LATB 000F8A  
                            _PIE1 000F9D                              u7010 0B1E  
                            u7020 0B3E                              u7110 0DDC  
               _valor_leitura_adc 0130                              u7040 0B8E  
                            u5600 3340                              u5610 3342  
                            u7115 0DD2                              u7035 0B7A  
                            u8100 0476                              _RCIF 007CF5  
                            u7230 18C2                              u7150 2E80  
                            u8120 049E                              u7160 2EBE  
                            u5465 3046                              u7410 2BF4  
                            u5650 2448                              u7180 22AE  
                            u7500 2754                              u4844 33D0  
                            u4845 33CC                              u6550 337A  
                            u7430 2DC0                              u4854 33B2  
                            u7095 0CD4                              u4855 33AE  
                            u8240 1010                              u8410 0800  
                            u8155 05D4                              u7275 1930  
                            u6900 1470                              u8085 0382  
                            u8245 1006                              u7710 16BC  
                            u7550 27CC                              u8190 1DAA  
                            u8415 07F6                              u6760 3076  
                            u6825 1298                              u7465 2902  
                            u7730 1722                              u7490 2752  
                            u7810 20BA                              u9307 2B2A  
                            u6780 3140                              u6940 151A  
                            u7660 1FD2                              u7661 1FCE  
                            u7485 272A                              u9317 2044  
                            u6766 3078                              u6790 3168  
                            u7910 1C5C                              u7670 1FD4  
                            u7590 1F26                              u8550 2838  
                    get_clust@dir 001A                              u9407 17CE  
                            u9327 20D6                              u8615 21BC  
                            u9417 184C                              u9337 15EC  
                            u8625 2206                              u9507 318A  
                            u6787 3136                              u9427 2DD8  
                            u9347 1638                              u9517 31AC  
                            u6797 315E                              u6885 13E0  
                            u9437 12C0                              u9357 165A  
                            u9277 2D5E                              u9527 31D6  
                            u9447 1308                              u9367 16C4  
                            u7775 1FFC                              u9287 2AF2  
                            u9537 31DE                              u9457 1360  
                            u9377 1738                              u8585 212C  
                            u9297 2B0E                              u7970 2C2C  
                            u8690 1BE6                              u9547 31E6  
                            u9467 1432                              u9387 1770  
                            u8595 2178                              u8860 2D06  
                            u9557 31EE                              u9477 1530  
                            u9397 17B4                              u8870 2D1E  
                            u9567 343E                              u9487 15B2  
                            u8848 2A8A                              u9577 3446  
                            u9497 3322                              u8849 2A9E  
                            _TMR2 000FCC                              _SPEN 007D5F  
                            _TRMT 007D61                              _TXEN 007D65  
                            _SYNC 007D64                              _dado 0045  
                            _flag 003B                              _main 31FE  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0046  
   __size_of_leitura_continua_adc 0128                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
                   __CFG_IESO$OFF 000000                     disk_readp@arr 022D  
                   disk_readp@ptr 006A                      disk_writep@i 0064  
                    disk_writep@j 0066                     __CFG_MCLRE$ON 000000  
                    ?_follow_path 00B3                      ___param_bank 000000  
                 create_name@path 0024                             ??_isr 0005  
        __size_of_recebe_dado_SPI 0028  __size_of_configura_baudrate_uart 0132  
                   __CFG_PLLDIV$5 000000                   __end_of___aldiv 289E  
                           ?_main 0001                             _EEADR 000FA9  
                           STR_10 61F5                             STR_11 61D8  
                           STR_20 61E7                             STR_12 61A6  
                           STR_13 6255                             STR_21 61C8  
                           STR_14 6268                             STR_15 61A6  
                           STR_16 623B                             STR_17 6211  
                           STR_18 61E7                             STR_19 6203  
                 __end_of___lldiv 2C7C                             _T0CON 000FD5  
                           _T2CON 000FCA                    _data_buffer_32 0171  
                    ?_leitura_adc 001A   __size_of_leitura_chaves_sistema 003C  
                           i2l941 3492                             _RCREG 000FAE  
                           _RCSTA 000FAB                     get_clust@clst 0028  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _SPBRG 000FAF                     __CFG_USBDIV$1 000000  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TXREG 000FAD  
                           _TXSTA 000FAC                             _FatFs 0039  
          __end_ofcreate_name@cvt 6151                     __CFG_PWRT$OFF 000000  
             ___lmul@multiplicand 001E        __size_of_config_timer_dois 000C  
                  __CFG_FCMEN$OFF 000000        __size_of_config_timer_zero 001A  
                 __end_of_get_fat 0EE8                   __end_of_command 30C8  
                           _delay 335A                  _envia_dados_shrc 31BA  
                 __end_of_mem_cmp 2EC8                   __end_of_mem_set 330E  
                 __end_of_pf_read 1278                   __end_of_pf_open 1E96  
        __size_of_escreve_cmd_lcd 008C                             _reset 2D72  
                   _controle_shrc 34BC                             pclath 000FFA  
                           tablat 000FF5                   __end_of_proceed 34BC  
                           plusw2 000FDB                             status 000FD8  
                           wtemp6 0047                    disk_readp@buff 006F  
                   disk_writep@sc 0029                     disk_writep@wr 0026  
                 __initialization 2FA2               disk_initialize@buff 0069  
             disk_initialize@stat 0066                      __end_of_main 3240  
                    clust2sect@fs 002A                _inicializa_tarefas 327C  
                 escalonador@cont 00D4                            ??_main 002D  
             disk_readp@start_add 006B                     __activetblptr 000002  
             ?_inicializa_tarefas 0001                   __CFG_CCP2MX$OFF 000000  
                          ?_delay 0001            ?_escreve_caractere_lcd 0001  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                  ?_controle_shrc 0001                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _EEDATA 000FA8  
                          _EECON2 000FA7                            ?_reset 0001  
                          _INT0IE 007F94                            _INT0IF 007F91  
                   ?_dummy_clocks 0001                            i2l1071 255C  
                          i2l1072 2570                            i2l1065 24F6  
                          i2l1066 2568                            i2l1067 250E  
                          i2l1069 253C                            _PCLATH 000FFA  
                          i2l6101 2506                            _INTCON 000FF2  
         __size_of_inicializa_SPI 007C                            _TMR0IF 007F92  
                          _TMR2IF 007CF1                            _SDCard 1A38  
        __end_of_recebe_dado_uart 3496                            _SPPCFG 000F63  
                          _SPPCON 000F65                            _SSPBUF 000FC9  
          _leitura_chaves_sistema 3240                  __end_of_check_fs 1D46  
            ??_inicializa_tarefas 001A              __size_of_create_name 0144  
        __size_of_disk_initialize 02BA        __end_of_posicao_cursor_lcd 2F38  
                __end_of_dir_find 27D2                  __end_of_dir_next 1A38  
          __size_of_init_hardware 0016                            _Result 0042  
                          ___lmul 30C8                         ??___aldiv 0022  
                  __CFG_STVREN$ON 000000              __size_of_disk_writep 0140  
                       ??___lldiv 0022                            _folder 0100  
                          _estado 0044                  __end_of_init_lcd 2B6E  
                          clear_0 2FCA                            clear_1 2FDC  
                          clear_2 2FE8                            clear_3 2FF4  
                __end_of_pf_mount 0646                  __end_of_readover 34D2  
                __end_of_pf_write 0B04          configura_baudrate_uart@x 0068  
                     pf_read@buff 009A                       pf_read@clst 00B5  
                     pf_read@sect 00AD                       pf_read@rcnt 00BA  
                       ??_get_fat 0076                         ??_command 0023  
                       ??_mem_cmp 0020                         ??_mem_set 0020  
                       ??_pf_read 00A0                         ??_pf_open 00BC  
            __size_of_escalonador 00A4                 ??_recebe_dado_SPI 001A  
                 acende_led4@flag 003D                  __end_of_response 34A4  
                    __mediumconst 60D0                            reset@i 0028  
           write_timer_zero@timer 001C                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ??_proceed 001E                  _write_timer_zero 3460  
                     pf_open@path 00BA         escreve_caractere_lcd@data 001C  
                  ??_dummy_clocks 001E                        __accesstop 0060  
         __end_of__initialization 2FFA                   __CFG_PBADEN$OFF 000000  
              __size_of_WriteSPI_ 004A                       pf_mount@buf 0094  
                     pf_mount@fmt 00C8                   disk_readp@count 0068  
                   ___rparam_used 000001                 ??_escreve_cmd_lcd 001C  
                  __pcstackCOMRAM 0001                 ?_ativa_latch_shrc 0001  
     __end_of_endereco_cursor_lcd 2FA2                      __pidataBANK1 33F4  
               ?_mensagem_inicial 0001           _configura_baudrate_uart 211A  
                   __end_of_delay 337E              __size_of_follow_path 0116  
              ??_ativa_latch_shrc 001A                     __end_of_reset 2DE6  
              ??_mensagem_inicial 0020                       pf_write@btw 009C  
              _tarefa_em_execucao 003E        __end_ofi2_write_timer_zero 3484  
 configura_baudrate_uart@baudrate 0028                   ??_controle_shrc 001C  
                   _init_hardware 3424              __size_of_leitura_adc 0064  
              __size_of_get_clust 00C8                           ??_delay 001A  
                         ??_reset 0026      mensagem_inicial@msg_linha_um 0060  
                      __pbssBANK0 00D5                        __pbssBANK1 0100  
                  pf_write@remain 00AE    __size_of_escreve_frase_ram_lcd 0052  
   __end_of_escreve_frase_ram_lcd 3170                           ?_SDCard 0001  
       escreve_inteiro_uart@F3956 01DA             __end_of_shrc_seta_bit 33DA  
                         ?___lmul 001A          __end_of_envia_dados_shrc 31FE  
           mensagem_inicial@F4031 6162             mensagem_inicial@F4033 6151  
         __size_of_shrc_apaga_bit 001E                 ??_disk_initialize 0060  
                  ___lmul@product 0022      __end_of_leitura_continua_adc 249E  
               __end_of_WriteSPI_ 31BA                        _dir_rewind 224C  
                         _INTCON2 000FF1                           _INTCON3 000FF0  
                  ?_init_hardware 0001                         ?_check_fs 0072  
                      _disk_readp 1278                     ??_acende_led4 001D  
                  follow_path@dir 00B5                    follow_path@res 00B9  
                       ?_dir_find 00AB                         ?_dir_next 009A  
                         _SSPCON1 000FC6          __size_of_inicializa_shrc 0008  
        __size_of_inicializa_uart 0022                           _SSPSTAT 000FC7  
                      _clust2sect 2966                    _inicializa_SPI 2C7C  
                 __CFG_VREGEN$OFF 000000                         ?_init_lcd 0001  
                 __size_of_SDCard 01B2                         ?_pf_mount 007C  
                       ?_readover 001A                         ?_pf_write 009A  
                         __Hparam 0000         ??_configura_baudrate_uart 0060  
                         __Lparam 0000                   _dir_rewind$1692 006B  
               __end_of_get_clust 2966                         ?_response 0001  
                         ___aldiv 27D2         shrc_apaga_bit@posicao_bit 001C  
                 __size_of___lmul 0056                           ___lldiv 2BFA  
            __end_of_dummy_clocks 32E2                           __pcinit 2FA2  
                    _get_fat$1632 008C                        _init_ports 340C  
                         __ramtop 0800                           __ptext0 31FE  
                         __ptext1 2CF8                           __ptext2 2376  
                         __ptext3 3008                           __ptext4 3240  
                         __ptext5 2AD0                           __ptext6 3424  
                         __ptext7 340C                           __ptext8 34D2  
                         __ptext9 344E                           _get_fat 0B04  
                         _command 306C                         _T0CONbits 000FD5  
                         _mem_cmp 2E58           i2write_timer_zero@timer 0003  
     endereco_cursor_lcd@endereco 001C                           _mem_set 32E2  
                         _pf_read 0EE8                      __size_of_isr 25B4  
         ??_escreve_caractere_lcd 001C                           _pf_open 1D46  
                      ??_check_fs 0078                  ___aldiv@dividend 001A  
                         _proceed 34B0           __size_of_init_interrupt 0012  
                      ??_dir_find 00AF                        ??_dir_next 009C  
          __end_of_inicializa_SPI 2CF8                      pf_read@rbuff 00A9  
                  __pintcode_body 249E           ?_leitura_chaves_sistema 0001  
            end_of_initialization 2FFA                           isr@cont 0019  
      __end_ofleitura_chave@F3840 6195               __end_of_acende_led4 335A  
      __end_ofleitura_chave@F3842 6184        __end_ofleitura_chave@F3838 61A6  
         __size_of_init_oscilador 0008                     SDCard@FResult 0200  
                   __Lmediumconst 60D0                        ??_init_lcd 001D  
                         int_func 249E                 ?_recebe_dado_uart 0001  
                      ??_pf_mount 007E                        ??_readover 001C  
                      ??_pf_write 00A0            write_timer_zero@timer0 001A  
                 ___lldiv@divisor 001E                ??_recebe_dado_uart 0001  
                 ___lldiv@counter 0026          envia_dados_shrc@contador 001A  
                      ??_response 001D                         _RCSTAbits 000FAB  
        __end_of_write_timer_zero 3472                  ___aldiv@quotient 0024  
                         postdec1 000FE5                           postdec2 000FDD  
                 _recebe_dado_SPI 330E                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                      dir_find@dj 00AB                         _PORTAbits 000F80  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                       _PORTEbits 000F84                   ??_init_hardware 001E  
              _posicao_cursor_lcd 2EC8                       ?_dir_rewind 0065  
                      dir_next@dj 009A                        dir_next@fs 00A3  
 __end_of_configura_baudrate_uart 224C                       ?_disk_readp 0060  
                       _TRISAbits 000F92                         _TRISBbits 000F93  
                       _TRISCbits 000F94                         _TRISDbits 000F95  
                      get_fat@buf 0092                        get_fat@ofs 0090  
                 _escreve_cmd_lcd 2B6E    __end_of_leitura_chaves_sistema 327C  
             ?_posicao_cursor_lcd 001D                   ?_inicializa_SPI 0020  
                WriteSPI_@TempVar 001C                       ?_clust2sect 0026  
                      command@CMD 0024                        command@CRC 0022  
                disk_readp@length 0070                  disk_readp@offset 0066  
                disk_readp@sector 0062                     ??_create_name 0026  
                      command@arg 001E                  disk_initialize@i 0062  
                 disk_writep@buff 0068              _leitura_continua_adc 2376  
               ??_inicializa_shrc 001A                 ??_inicializa_uart 002C  
     __size_of_inicializa_tarefas 0038                    __end_of_SDCard 1BEA  
                   ??_disk_writep 0060                   command@argument 0025  
            ??_posicao_cursor_lcd 001E                    _shrc_apaga_bit 33A0  
           disk_initialize@count1 0064             disk_initialize@count2 0067  
                  __end_of___lmul 311E                     ??_escalonador 00D2  
                     ?_init_ports 0001                    clust2sect@clst 0026  
             start_initialization 2FA2                     WriteSPI_@dado 001D  
       __size_of_ativa_latch_shrc 0014                       _acende_led4 3336  
                     __end_of_isr 25BC         __size_of_mensagem_inicial 007A  
                      mem_cmp@cnt 001E                        mem_cmp@dst 001A  
                    pf_write@buff 009A                        mem_cmp@src 001C  
                    pf_write@clst 00B2                      pf_write@sect 00AA  
                    pf_write@wcnt 00B7                          ??_SDCard 002D  
              i2_write_timer_zero 3472             ?_leitura_continua_adc 0001  
         __end_of_recebe_dado_SPI 3336                   _disk_initialize 15C2  
                      mem_set@cnt 001E                        mem_set@dst 001A  
                      mem_set@val 001C               __size_of_dir_rewind 012A  
                _data_uart_recebe 0040             __size_of_dummy_clocks 002E  
                   ??_follow_path 002D            __end_of_shrc_apaga_bit 33BE  
             __size_of_disk_readp 034A               __end_of_create_name 1FDA  
             ?i2_write_timer_zero 0001                          ??___lmul 0022  
               ?_envia_dados_shrc 0001                        pf_read@btr 009C  
                     __pdataBANK1 01D0                  __CFG_LPT1OSC$OFF 000000  
             __size_of_clust2sect 00C6               __end_of_disk_writep 211A  
              ??_envia_dados_shrc 001A                        pf_open@dir 019D  
                      pf_open@res 01BD           __end_of_escreve_cmd_lcd 2BFA  
                   ??_leitura_adc 001C      __size_of_endereco_cursor_lcd 006A  
                     __pbssBIGRAM 022D                        pf_mount@fs 007C  
                     __pbssCOMRAM 002D                      _pf_read$1886 00AB  
                   __pcstackBANK0 0060                     __pcstackBANK1 0191  
                   __pcstackBANK2 0200                    _init_interrupt 344E  
            ??i2_write_timer_zero 0003               __end_of_escalonador 2AD0  
                       _WriteSPI_ 3170                 __size_of_check_fs 015C  
           __end_of_controle_shrc 34C8                      check_fs@sect 0074  
                      pf_write@cs 00B6                        pf_write@bw 009E  
                      pf_write@fs 00B9                 __size_of_dir_find 0100  
                    _dummy_clocks 32B4                    _init_oscilador 34D2  
               __size_of_dir_next 01BC               __size_of_init_ports 0018  
           _escreve_frase_ram_lcd 311E                 __size_of_init_lcd 009E  
               delay@contador_int 001B                 delay@contador_ext 001A  
               __size_of_pf_mount 0634                 __size_of_readover 000A  
                 ?_shrc_apaga_bit 0001                 __size_of_pf_write 04BE  
                       __pintcode 0008                     __pmediumconst 60D0  
                        SDCard@br 0201                          SDCard@fs 0203  
                        ?___aldiv 001A                          ?___lldiv 001A  
               __size_of_response 000E                         _get_clust 289E  
                   follow_path@dj 00B3                _sinaliza_int_timer 003F  
             __end_of_follow_path 26D2                          ?_get_fat 0072  
                        ?_command 001E                          ?_mem_cmp 001A  
          __end_of_init_interrupt 3460                          ?_mem_set 001A  
                        ?_pf_read 009A                          ?_pf_open 00BA  
                      reset@count 002A    __size_of_escreve_caractere_lcd 0072  
                      ?_WriteSPI_ 0001     __end_of_escreve_caractere_lcd 2E58  
                        ?_proceed 0001                    __size_of_delay 0024  
         __end_of_disk_initialize 187C               __end_of_leitura_adc 306C  
          __end_of_init_oscilador 34DA            __size_of_shrc_seta_bit 001C  
                  __size_of_reset 0074                         _p_tarefas 00D9  
          ??_leitura_continua_adc 0021                   ___aldiv@divisor 001E  
                 ___aldiv@counter 0022                       _create_name 1E96  
                        _LATBbits 000F8A                  ?_recebe_dado_SPI 0001  
                        _PIE1bits 000F9D                   follow_path@path 00B7  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                     _disk_writep 1FDA                          i2u638_40 2540  
               ?_write_timer_zero 001A                         dir_find@c 00B1  
              leitura_chave@F3840 6184                leitura_chave@F3842 6173  
              leitura_chave@F3838 6195          posicao_cursor_lcd@coluna 001D  
                       dir_next@i 00A9                ??_write_timer_zero 001C  
      posicao_cursor_lcd@endereco 001F                        ?_get_clust 001A  
                       get_fat@bc 0096                         get_fat@fs 0098  
       __size_of_recebe_dado_uart 0012                         get_fat@wc 008E  
                     _escalonador 2A2C                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                        _ADCON2bits 000FC0  
                ?_escreve_cmd_lcd 0001                      ??_dir_rewind 0067  
     escreve_frase_ram_lcd@buffer 001D                  ??_inicializa_SPI 0022  
                 ?_init_interrupt 0001                      ??_disk_readp 0026  
                _ativa_latch_shrc 343A                   _inicializa_shrc 34DA  
                 _inicializa_uart 337E                  _mensagem_inicial 2CF8  
                 ?_init_oscilador 0001                      ??_clust2sect 0060  
               ___lmul@multiplier 001A                         copy_data0 2FB6  
        ?_configura_baudrate_uart 0028            ?_escreve_frase_ram_lcd 001D  
                      _EECON1bits 000FA6      leitura_continua_adc@cont_int 0027  
        escreve_inteiro_lcd@F3966 01E1                          __Hrparam 0000  
              __end_of_dir_rewind 2376                       _info_chaves 016A  
                        __Lrparam 0000                       _follow_path 25BC  
              __end_of_disk_readp 15C2                         pf_read@br 009E  
                       pf_read@cs 00B9                         pf_read@dr 00A8  
                       pf_read@fs 00BC                     _shrc_seta_bit 33BE  
                       pf_open@dj 01C0                         pf_open@fs 01BE  
                       pf_open@sp 0191                  __size_of___aldiv 00CC  
                __size_of___lldiv 0082                      ??_init_ports 001A  
              __end_of_clust2sect 2A2C                       check_fs@buf 0072  
                       readover@a 001A                         pf_write@p 00A8  
                     _leitura_adc 3008                  __size_of_get_fat 03E4  
                __size_of_command 005C             __end_of_init_hardware 343A  
                        _check_fs 1BEA                  __size_of_mem_cmp 0070  
                __size_of_mem_set 002C                  __size_of_pf_read 0390  
                __size_of_pf_open 0150                      ?_acende_led4 0001  
                     ??_WriteSPI_ 001A                          _fileName 01D0  
                        __ptext10 33DA                          __ptext11 3460  
                        __ptext20 1A38                          __ptext12 34A4  
                        __ptext21 3336                          __ptext13 337E  
                        __ptext30 289E                          __ptext22 33BE  
                        __ptext14 211A                          __ptext31 26D2  
                        __ptext23 33A0                          __ptext15 27D2  
                        __ptext40 15C2                          __ptext32 2E58  
                        __ptext24 34C8                          __ptext16 327C  
                        __ptext41 2D72                          __ptext33 224C  
                        __ptext25 0646                          __ptext17 34DA  
                        __ptext50 311E                          __ptext42 2B6E  
                        __ptext34 187C                          __ptext26 1FDA  
                        __ptext18 2C7C                          __ptext51 2DE6  
                        __ptext43 1BEA                          __ptext35 0B04  
                        __ptext27 0EE8                          __ptext19 2A2C  
                        __ptext60 343A                          __ptext52 335A  
                        __ptext44 1278                          __ptext36 2966  
                        __ptext28 1D46                          __ptext53 32B4  
                        __ptext45 3496                          __ptext37 1E96  
                        __ptext29 25BC                          __ptext62 3472  
                        __ptext54 306C                          __ptext46 330E  
                        __ptext38 32E2                          __ptext63 3484  
                        __ptext55 3170                          __ptext47 34B0  
                        __ptext39 0012                          __ptext64 0000  
                        __ptext56 30C8                          __ptext48 2EC8  
                        __ptext57 2BFA                          __ptext49 2F38  
                        __ptext58 34BC                          __ptext59 31BA  
                        _dir_find 26D2                          _fileSize 0031  
                        _dir_next 187C                  __size_of_proceed 000C  
                ?_disk_initialize 0001                    _timeout_tarefa 0035  
                       reset@buff 002C        __end_of_inicializa_tarefas 32B4  
        i2write_timer_zero@timer0 0001                          _init_lcd 2AD0  
                   __size_of_main 0042                          _pf_mount 0012  
                        _readover 34C8               _endereco_cursor_lcd 2F38  
                        _pf_write 0646                __end_of_init_ports 3424  
                   dummy_clocks@i 0021                     dummy_clocks@n 0020  
        shrc_seta_bit@posicao_bit 001C                    ?_shrc_seta_bit 0001  
                        _response 3496       __size_of_posicao_cursor_lcd 0070  
                        int$flags 0046           posicao_cursor_lcd@linha 001E  
         inicializa_SPI@smp_phase 0021                     pf_read@remain 00B1  
                     ??_get_clust 001E          leitura_continua_adc@cont 0028  
         __end_of_inicializa_shrc 34E2           __end_of_inicializa_uart 33A0  
           __CFG_CPUDIV$OSC1_PLL2 000000              ?_endereco_cursor_lcd 0001  
                        mem_cmp@d 0023                          mem_cmp@r 0027  
                        mem_cmp@s 0025                        _INTCONbits 000FF2  
         inicializa_SPI@sync_mode 0022                          mem_set@d 0020  
                leitura_adc@canal 0020         __size_of_envia_dados_shrc 0044  
               _config_timer_dois 34A4                      _tempo_backup 00D5  
               _config_timer_zero 33DA            inicializa_SPI@bus_mode 0020  
                        intlevel2 0000                ?_config_timer_dois 0001  
        mensagem_inicial@msg_dois 0071                ?_config_timer_zero 0001  
                    _tempo_tarefa 002D      envia_dados_shrc@data_to_shrc 001B  
                ??_shrc_apaga_bit 001A                  ___lldiv@dividend 001A  
             ??_config_timer_dois 001A                        _OSCCONbits 000FD3  
             ??_config_timer_zero 001E                  _recebe_dado_uart 3484  
           ??_endereco_cursor_lcd 001C          ??_leitura_chaves_sistema 001A  
                    response@buff 001D                  ___lldiv@quotient 0022  
                  dir_rewind@clst 0071                       dir_find@dir 00AD  
                     dir_find@res 00B2         __end_of_config_timer_dois 34B0  
                    ___aldiv@sign 0023         __end_of_config_timer_zero 33F4  
     __size_ofi2_write_timer_zero 0012                       _SSPCON1bits 000FC6  
                    dir_next@clst 00A5            escreve_cmd_lcd@comando 001C  
         recebe_dado_SPI@temp_var 001C                      ?_create_name 0022  
                    dir_rewind@dj 0065                      dir_rewind@fs 006F  
                 ??_shrc_seta_bit 001A     __end_ofmensagem_inicial@F4031 6173  
   __end_ofmensagem_inicial@F4033 6162                      ?_disk_writep 0026  
        __end_of_ativa_latch_shrc 344E  
