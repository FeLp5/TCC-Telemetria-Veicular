Version 3.2 HI-TECH Software Intermediate Code
[; ;ff.h: 58: typedef unsigned int UINT;
[; ;ff.h: 59: typedef unsigned char BYTE;
[; ;ff.h: 60: typedef unsigned short WORD;
[; ;ff.h: 61: typedef unsigned long DWORD;
[; ;ff.h: 62: typedef WORD WCHAR;
[; ;ff.h: 82: typedef DWORD FSIZE_t;
[; ;ff.h: 83: typedef DWORD LBA_t;
[; ;ff.h: 105: typedef char TCHAR;
[; ;ff.h: 132: typedef struct {
[; ;ff.h: 133: BYTE fs_type;
[; ;ff.h: 134: BYTE pdrv;
[; ;ff.h: 135: BYTE n_fats;
[; ;ff.h: 136: BYTE wflag;
[; ;ff.h: 137: BYTE fsi_flag;
[; ;ff.h: 138: WORD id;
[; ;ff.h: 139: WORD n_rootdir;
[; ;ff.h: 140: WORD csize;
[; ;ff.h: 154: DWORD last_clst;
[; ;ff.h: 155: DWORD free_clst;
[; ;ff.h: 165: DWORD n_fatent;
[; ;ff.h: 166: DWORD fsize;
[; ;ff.h: 167: LBA_t volbase;
[; ;ff.h: 168: LBA_t fatbase;
[; ;ff.h: 169: LBA_t dirbase;
[; ;ff.h: 170: LBA_t database;
[; ;ff.h: 174: LBA_t winsect;
[; ;ff.h: 175: BYTE win[512];
[; ;ff.h: 176: } FATFS;
[; ;ff.h: 182: typedef struct {
[; ;ff.h: 183: FATFS* fs;
[; ;ff.h: 184: WORD id;
[; ;ff.h: 185: BYTE attr;
[; ;ff.h: 186: BYTE stat;
[; ;ff.h: 187: DWORD sclust;
[; ;ff.h: 188: FSIZE_t objsize;
[; ;ff.h: 199: } FFOBJID;
[; ;ff.h: 205: typedef struct {
[; ;ff.h: 206: FFOBJID obj;
[; ;ff.h: 207: BYTE flag;
[; ;ff.h: 208: BYTE err;
[; ;ff.h: 209: FSIZE_t fptr;
[; ;ff.h: 210: DWORD clust;
[; ;ff.h: 211: LBA_t sect;
[; ;ff.h: 213: LBA_t dir_sect;
[; ;ff.h: 214: BYTE* dir_ptr;
[; ;ff.h: 222: } FIL;
[; ;ff.h: 228: typedef struct {
[; ;ff.h: 229: FFOBJID obj;
[; ;ff.h: 230: DWORD dptr;
[; ;ff.h: 231: DWORD clust;
[; ;ff.h: 232: LBA_t sect;
[; ;ff.h: 233: BYTE* dir;
[; ;ff.h: 234: BYTE fn[12];
[; ;ff.h: 241: } DIR_E;
[; ;ff.h: 247: typedef struct {
[; ;ff.h: 248: FSIZE_t fsize;
[; ;ff.h: 249: WORD fdate;
[; ;ff.h: 250: WORD ftime;
[; ;ff.h: 251: BYTE fattrib;
[; ;ff.h: 256: TCHAR fname[12 + 1];
[; ;ff.h: 258: } FILINFO;
[; ;ff.h: 264: typedef struct {
[; ;ff.h: 265: BYTE fmt;
[; ;ff.h: 266: BYTE n_fat;
[; ;ff.h: 267: UINT align;
[; ;ff.h: 268: UINT n_root;
[; ;ff.h: 269: DWORD au_size;
[; ;ff.h: 270: } MKFS_PARM;
[; ;ff.h: 276: typedef enum {
[; ;ff.h: 277: FR_OK = 0,
[; ;ff.h: 278: FR_DISK_ERR,
[; ;ff.h: 279: FR_INT_ERR,
[; ;ff.h: 280: FR_NOT_READY,
[; ;ff.h: 281: FR_NO_FILE,
[; ;ff.h: 282: FR_NO_PATH,
[; ;ff.h: 283: FR_INVALID_NAME,
[; ;ff.h: 284: FR_DENIED,
[; ;ff.h: 285: FR_EXIST,
[; ;ff.h: 286: FR_INVALID_OBJECT,
[; ;ff.h: 287: FR_WRITE_PROTECTED,
[; ;ff.h: 288: FR_INVALID_DRIVE,
[; ;ff.h: 289: FR_NOT_ENABLED,
[; ;ff.h: 290: FR_NO_FILESYSTEM,
[; ;ff.h: 291: FR_MKFS_ABORTED,
[; ;ff.h: 292: FR_TIMEOUT,
[; ;ff.h: 293: FR_LOCKED,
[; ;ff.h: 294: FR_NOT_ENOUGH_CORE,
[; ;ff.h: 295: FR_TOO_MANY_OPEN_FILES,
[; ;ff.h: 296: FR_INVALID_PARAMETER
[; ;ff.h: 297: } FRESULT;
[; ;ff.h: 304: FRESULT f_open (FIL* fp, const TCHAR* path, BYTE mode);
[; ;ff.h: 305: FRESULT f_close (FIL* fp);
[; ;ff.h: 306: FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br);
[; ;ff.h: 307: FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);
[; ;ff.h: 308: FRESULT f_lseek (FIL* fp, FSIZE_t ofs);
[; ;ff.h: 309: FRESULT f_truncate (FIL* fp);
[; ;ff.h: 310: FRESULT f_sync (FIL* fp);
[; ;ff.h: 311: FRESULT f_opendir (DIR_E* dp, const TCHAR* path);
[; ;ff.h: 312: FRESULT f_closedir (DIR_E* dp);
[; ;ff.h: 313: FRESULT f_readdir (DIR_E* dp, FILINFO* fno);
[; ;ff.h: 314: FRESULT f_findfirst (DIR_E* dp, FILINFO* fno, const TCHAR* path, const TCHAR* pattern);
[; ;ff.h: 315: FRESULT f_findnext (DIR_E* dp, FILINFO* fno);
[; ;ff.h: 316: FRESULT f_mkdir (const TCHAR* path);
[; ;ff.h: 317: FRESULT f_unlink (const TCHAR* path);
[; ;ff.h: 318: FRESULT f_rename (const TCHAR* path_old, const TCHAR* path_new);
[; ;ff.h: 319: FRESULT f_stat (const TCHAR* path, FILINFO* fno);
[; ;ff.h: 320: FRESULT f_chmod (const TCHAR* path, BYTE attr, BYTE mask);
[; ;ff.h: 321: FRESULT f_utime (const TCHAR* path, const FILINFO* fno);
[; ;ff.h: 322: FRESULT f_chdir (const TCHAR* path);
[; ;ff.h: 323: FRESULT f_chdrive (const TCHAR* path);
[; ;ff.h: 324: FRESULT f_getcwd (TCHAR* buff, UINT len);
[; ;ff.h: 325: FRESULT f_getfree (const TCHAR* path, DWORD* nclst, FATFS** fatfs);
[; ;ff.h: 326: FRESULT f_getlabel (const TCHAR* path, TCHAR* label, DWORD* vsn);
[; ;ff.h: 327: FRESULT f_setlabel (const TCHAR* label);
[; ;ff.h: 328: FRESULT f_forward (FIL* fp, UINT(*func)(const BYTE*,UINT), UINT btf, UINT* bf);
[; ;ff.h: 329: FRESULT f_expand (FIL* fp, FSIZE_t fsz, BYTE opt);
[; ;ff.h: 330: FRESULT f_mount (FATFS* fs, const TCHAR* path, BYTE opt);
[; ;ff.h: 331: FRESULT f_mkfs (const TCHAR* path, const MKFS_PARM* opt, void* work, UINT len);
[; ;ff.h: 332: FRESULT f_fdisk (BYTE pdrv, const LBA_t ptbl[], void* work);
[; ;ff.h: 333: FRESULT f_setcp (WORD cp);
[; ;ff.h: 334: int f_putc (TCHAR c, FIL* fp);
[; ;ff.h: 335: int f_puts (const TCHAR* str, FIL* cp);
[; ;ff.h: 336: int f_printf (FIL* fp, const TCHAR* str, ...);
[; ;ff.h: 337: TCHAR* f_gets (TCHAR* buff, int len, FIL* fp);
[; ;ff.h: 356: DWORD get_fattime (void);
