
# 1 "bibliotecas/ff.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\__size_t.h"
typedef unsigned size_t;

# 14 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 36
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 58 "bibliotecas/ff.h"
typedef unsigned int UINT;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef unsigned long DWORD;
typedef WORD WCHAR;

# 82
typedef DWORD FSIZE_t;
typedef DWORD LBA_t;

# 105
typedef char TCHAR;

# 132
typedef struct {
BYTE fs_type;
BYTE pdrv;
BYTE n_fats;
BYTE wflag;
BYTE fsi_flag;
WORD id;
WORD n_rootdir;
WORD csize;

# 154
DWORD last_clst;
DWORD free_clst;

# 165
DWORD n_fatent;
DWORD fsize;
LBA_t volbase;
LBA_t fatbase;
LBA_t dirbase;
LBA_t database;

# 174
LBA_t winsect;
BYTE win[512];
} FATFS;

# 182
typedef struct {
FATFS* fs;
WORD id;
BYTE attr;
BYTE stat;
DWORD sclust;
FSIZE_t objsize;

# 199
} FFOBJID;

# 205
typedef struct {
FFOBJID obj;
BYTE flag;
BYTE err;
FSIZE_t fptr;
DWORD clust;
LBA_t sect;

LBA_t dir_sect;
BYTE* dir_ptr;

# 222
} FIL;

# 228
typedef struct {
FFOBJID obj;
DWORD dptr;
DWORD clust;
LBA_t sect;
BYTE* dir;
BYTE fn[12];

# 241
} DIR_E;

# 247
typedef struct {
FSIZE_t fsize;
WORD fdate;
WORD ftime;
BYTE fattrib;




TCHAR fname[12 + 1];

} FILINFO;

# 264
typedef struct {
BYTE fmt;
BYTE n_fat;
UINT align;
UINT n_root;
DWORD au_size;
} MKFS_PARM;

# 276
typedef enum {
FR_OK = 0,
FR_DISK_ERR,
FR_INT_ERR,
FR_NOT_READY,
FR_NO_FILE,
FR_NO_PATH,
FR_INVALID_NAME,
FR_DENIED,
FR_EXIST,
FR_INVALID_OBJECT,
FR_WRITE_PROTECTED,
FR_INVALID_DRIVE,
FR_NOT_ENABLED,
FR_NO_FILESYSTEM,
FR_MKFS_ABORTED,
FR_TIMEOUT,
FR_LOCKED,
FR_NOT_ENOUGH_CORE,
FR_TOO_MANY_OPEN_FILES,
FR_INVALID_PARAMETER
} FRESULT;

# 304
FRESULT f_open (FIL* fp, const TCHAR* path, BYTE mode);
FRESULT f_close (FIL* fp);
FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br);
FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);
FRESULT f_lseek (FIL* fp, FSIZE_t ofs);
FRESULT f_truncate (FIL* fp);
FRESULT f_sync (FIL* fp);
FRESULT f_opendir (DIR_E* dp, const TCHAR* path);
FRESULT f_closedir (DIR_E* dp);
FRESULT f_readdir (DIR_E* dp, FILINFO* fno);
FRESULT f_findfirst (DIR_E* dp, FILINFO* fno, const TCHAR* path, const TCHAR* pattern);
FRESULT f_findnext (DIR_E* dp, FILINFO* fno);
FRESULT f_mkdir (const TCHAR* path);
FRESULT f_unlink (const TCHAR* path);
FRESULT f_rename (const TCHAR* path_old, const TCHAR* path_new);
FRESULT f_stat (const TCHAR* path, FILINFO* fno);
FRESULT f_chmod (const TCHAR* path, BYTE attr, BYTE mask);
FRESULT f_utime (const TCHAR* path, const FILINFO* fno);
FRESULT f_chdir (const TCHAR* path);
FRESULT f_chdrive (const TCHAR* path);
FRESULT f_getcwd (TCHAR* buff, UINT len);
FRESULT f_getfree (const TCHAR* path, DWORD* nclst, FATFS** fatfs);
FRESULT f_getlabel (const TCHAR* path, TCHAR* label, DWORD* vsn);
FRESULT f_setlabel (const TCHAR* label);
FRESULT f_forward (FIL* fp, UINT(*func)(const BYTE*,UINT), UINT btf, UINT* bf);
FRESULT f_expand (FIL* fp, FSIZE_t fsz, BYTE opt);
FRESULT f_mount (FATFS* fs, const TCHAR* path, BYTE opt);
FRESULT f_mkfs (const TCHAR* path, const MKFS_PARM* opt, void* work, UINT len);
FRESULT f_fdisk (BYTE pdrv, const LBA_t ptbl[], void* work);
FRESULT f_setcp (WORD cp);
int f_putc (TCHAR c, FIL* fp);
int f_puts (const TCHAR* str, FIL* cp);
int f_printf (FIL* fp, const TCHAR* str, ...);
TCHAR* f_gets (TCHAR* buff, int len, FIL* fp);

# 356
DWORD get_fattime (void);

# 8 "bibliotecas/integer.h"
typedef struct{
unsigned int hora;
unsigned int min;
unsigned int seg;
unsigned char dia;
unsigned char mes;
unsigned char ano;
}fat_time;

typedef int INT;
typedef unsigned int UINT;


typedef signed char CHAR;
typedef unsigned char UCHAR;
typedef unsigned char BYTE;


typedef short SHORT;
typedef unsigned short USHORT;
typedef unsigned short WORD;


typedef long LONG;
typedef unsigned long ULONG;
typedef unsigned long DWORD;


typedef enum { FALSE = 0, TRUE } BOOL;

# 14 "bibliotecas/diskio.h"
typedef BYTE DSTATUS;


typedef enum {
RES_OK = 0,
RES_ERROR,
RES_WRPRT,
RES_NOTRDY,
RES_PARERR
} DRESULT;

# 29
DSTATUS disk_initialize (BYTE pdrv);
DSTATUS disk_status (BYTE pdrv);
DRESULT disk_read (BYTE pdrv, BYTE* buff, DWORD sector, BYTE count);

DRESULT disk_write (BYTE, const BYTE*, DWORD, BYTE);

DRESULT disk_ioctl (BYTE, BYTE, void*);
void disk_timerproc (void);

# 464 "bibliotecas/ff.c"
static FATFS* FatFs[1];
static WORD Fsid;

# 596
static const BYTE DbcTbl[] = {0x81, 0x9F, 0xE0, 0xFC, 0x40, 0x7E, 0x80, 0xFC, 0x00, 0x00};

# 614
static WORD ld_word (const BYTE* ptr)
{
WORD rv;

rv = ptr[1];
rv = rv << 8 | ptr[0];
return rv;
}

static DWORD ld_dword (const BYTE* ptr)
{
DWORD rv;

rv = ptr[3];
rv = rv << 8 | ptr[2];
rv = rv << 8 | ptr[1];
rv = rv << 8 | ptr[0];
return rv;
}

# 652
static void st_word (BYTE* ptr, WORD val)
{
*ptr++ = (BYTE)val; val >>= 8;
*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)
{
*ptr++ = (BYTE)val; val >>= 8;
*ptr++ = (BYTE)val; val >>= 8;
*ptr++ = (BYTE)val; val >>= 8;
*ptr++ = (BYTE)val;
}

# 688
static int dbc_1st (BYTE c)
{

# 696
if (c >= DbcTbl[0]) {
if (c <= DbcTbl[1]) return 1;
if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
}

# 703
return 0;
}



static int dbc_2nd (BYTE c)
{

# 717
if (c >= DbcTbl[4]) {
if (c <= DbcTbl[5]) return 1;
if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
}

# 725
return 0;
}

# 1025
static FRESULT sync_window (
FATFS* fs
)
{
FRESULT res = FR_OK;


if (fs->wflag) {
if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {
fs->wflag = 0;
if (fs->winsect - fs->fatbase < fs->fsize) {
if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);
}
} else {
res = FR_DISK_ERR;
}
}
return res;
}



static FRESULT move_window (
FATFS* fs,
LBA_t sect
)
{
FRESULT res = FR_OK;


if (sect != fs->winsect) {

res = sync_window(fs);

if (res == FR_OK) {
if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
sect = (LBA_t)0 - 1;
res = FR_DISK_ERR;
}
fs->winsect = sect;
}
}
return res;
}

# 1078
static FRESULT sync_fs (
FATFS* fs
)
{
FRESULT res;


res = sync_window(fs);
if (res == FR_OK) {
if (fs->fs_type == 3 && fs->fsi_flag == 1) {

memset(fs->win, 0, sizeof fs->win);
st_word(fs->win + 510, 0xAA55);
st_dword(fs->win + 0, 0x41615252);
st_dword(fs->win + 484, 0x61417272);
st_dword(fs->win + 488, fs->free_clst);
st_dword(fs->win + 492, fs->last_clst);
fs->winsect = fs->volbase + 1;
disk_write(fs->pdrv, fs->win, fs->winsect, 1);
fs->fsi_flag = 0;
}

if (disk_ioctl(fs->pdrv, 0, 0) != RES_OK) res = FR_DISK_ERR;
}

return res;
}

# 1114
static LBA_t clst2sect (
FATFS* fs,
DWORD clst
)
{
clst -= 2;
if (clst >= fs->n_fatent - 2) return 0;
return fs->database + (LBA_t)fs->csize * clst;
}

# 1131
static DWORD get_fat (
FFOBJID* obj,
DWORD clst
)
{
UINT wc, bc;
DWORD val;
FATFS *fs = obj->fs;


if (clst < 2 || clst >= fs->n_fatent) {
val = 1;

} else {
val = 0xFFFFFFFF;

switch (fs->fs_type) {
case 1 :
bc = (UINT)clst; bc += bc / 2;
if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
wc = fs->win[bc++ % ((UINT)512)];
if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
wc |= fs->win[bc % ((UINT)512)] << 8;
val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
break;

case 2 :
if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) break;
val = ld_word(fs->win + clst * 2 % ((UINT)512));
break;

case 3 :
if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) break;
val = ld_dword(fs->win + clst * 4 % ((UINT)512)) & 0x0FFFFFFF;
break;

# 1193
default:
val = 1;
}
}

return val;
}

# 1209
static FRESULT put_fat (
FATFS* fs,
DWORD clst,
DWORD val
)
{
UINT bc;
BYTE *p;
FRESULT res = FR_INT_ERR;


if (clst >= 2 && clst < fs->n_fatent) {
switch (fs->fs_type) {
case 1:
bc = (UINT)clst; bc += bc / 2;
res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
if (res != FR_OK) break;
p = fs->win + bc++ % ((UINT)512);
*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
fs->wflag = 1;
res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
if (res != FR_OK) break;
p = fs->win + bc % ((UINT)512);
*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
fs->wflag = 1;
break;

case 2:
res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
if (res != FR_OK) break;
st_word(fs->win + clst * 2 % ((UINT)512), (WORD)val);
fs->wflag = 1;
break;

case 3:

# 1247
res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
if (res != FR_OK) break;
if (!0 || fs->fs_type != 4) {
val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % ((UINT)512)) & 0xF0000000);
}
st_dword(fs->win + clst * 4 % ((UINT)512), val);
fs->wflag = 1;
break;
}
}
return res;
}

# 1399
static FRESULT remove_chain (
FFOBJID* obj,
DWORD clst,
DWORD pclst
)
{
FRESULT res = FR_OK;
DWORD nxt;
FATFS *fs = obj->fs;

# 1415
if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;


if (pclst != 0 && (!0 || fs->fs_type != 4 || obj->stat != 2)) {
res = put_fat(fs, pclst, 0xFFFFFFFF);
if (res != FR_OK) return res;
}


do {
nxt = get_fat(obj, clst);
if (nxt == 0) break;
if (nxt == 1) return FR_INT_ERR;
if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
if (!0 || fs->fs_type != 4) {
res = put_fat(fs, clst, 0);
if (res != FR_OK) return res;
}
if (fs->free_clst < fs->n_fatent - 2) {
fs->free_clst++;
fs->fsi_flag |= 1;
}

# 1455
clst = nxt;
} while (clst < fs->n_fatent);

# 1484
return FR_OK;
}

# 1494
static DWORD create_chain (
FFOBJID* obj,
DWORD clst
)
{
DWORD cs, ncl, scl;
FRESULT res;
FATFS *fs = obj->fs;


if (clst == 0) {
scl = fs->last_clst;
if (scl == 0 || scl >= fs->n_fatent) scl = 1;
}
else {
cs = get_fat(obj, clst);
if (cs < 2) return 1;
if (cs == 0xFFFFFFFF) return cs;
if (cs < fs->n_fatent) return cs;
scl = clst;
}
if (fs->free_clst == 0) return 0;

# 1543
{
ncl = 0;
if (scl == clst) {
ncl = scl + 1;
if (ncl >= fs->n_fatent) ncl = 2;
cs = get_fat(obj, ncl);
if (cs == 1 || cs == 0xFFFFFFFF) return cs;
if (cs != 0) {
cs = fs->last_clst;
if (cs >= 2 && cs < fs->n_fatent) scl = cs;
ncl = 0;
}
}
if (ncl == 0) {
ncl = scl;
for (;;) {
ncl++;
if (ncl >= fs->n_fatent) {
ncl = 2;
if (ncl > scl) return 0;
}
cs = get_fat(obj, ncl);
if (cs == 0) break;
if (cs == 1 || cs == 0xFFFFFFFF) return cs;
if (ncl == scl) return 0;
}
}
res = put_fat(fs, ncl, 0xFFFFFFFF);
if (res == FR_OK && clst != 0) {
res = put_fat(fs, clst, ncl);
}
}

if (res == FR_OK) {
fs->last_clst = ncl;
if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
fs->fsi_flag |= 1;
} else {
ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
}

return ncl;
}

# 1627
static FRESULT dir_clear (
FATFS *fs,
DWORD clst
)
{
LBA_t sect;
UINT n, szb;
BYTE *ibuf;


if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
sect = clst2sect(fs, clst);
fs->winsect = sect;
memset(fs->win, 0, sizeof fs->win);

# 1651
{
ibuf = fs->win; szb = 1;
for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
}
return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
}

# 1666
static FRESULT dir_sdi (
DIR_E* dp,
DWORD ofs
)
{
DWORD csz, clst;
FATFS *fs = dp->obj.fs;


if (ofs >= (DWORD)((0 && fs->fs_type == 4) ? 0x10000000 : 0x200000) || ofs % 32) {
return FR_INT_ERR;
}
dp->dptr = ofs;
clst = dp->obj.sclust;
if (clst == 0 && fs->fs_type >= 3) {
clst = (DWORD)fs->dirbase;
if (0) dp->obj.stat = 0;
}

if (clst == 0) {
if (ofs / 32 >= fs->n_rootdir) return FR_INT_ERR;
dp->sect = fs->dirbase;

} else {
csz = (DWORD)fs->csize * ((UINT)512);
while (ofs >= csz) {
clst = get_fat(&dp->obj, clst);
if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;
ofs -= csz;
}
dp->sect = clst2sect(fs, clst);
}
dp->clust = clst;
if (dp->sect == 0) return FR_INT_ERR;
dp->sect += ofs / ((UINT)512);
dp->dir = fs->win + (ofs % ((UINT)512));

return FR_OK;
}

# 1714
static FRESULT dir_next (
DIR_E* dp,
int stretch
)
{
DWORD ofs, clst;
FATFS *fs = dp->obj.fs;


ofs = dp->dptr + 32;
if (ofs >= (DWORD)((0 && fs->fs_type == 4) ? 0x10000000 : 0x200000)) dp->sect = 0;
if (dp->sect == 0) return FR_NO_FILE;

if (ofs % ((UINT)512) == 0) {
dp->sect++;

if (dp->clust == 0) {
if (ofs / 32 >= fs->n_rootdir) {
dp->sect = 0; return FR_NO_FILE;
}
}
else {
if ((ofs / ((UINT)512) & (fs->csize - 1)) == 0) {
clst = get_fat(&dp->obj, dp->clust);
if (clst <= 1) return FR_INT_ERR;
if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
if (clst >= fs->n_fatent) {

if (!stretch) {
dp->sect = 0; return FR_NO_FILE;
}
clst = create_chain(&dp->obj, dp->clust);
if (clst == 0) return FR_DENIED;
if (clst == 1) return FR_INT_ERR;
if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;
if (0) dp->obj.stat |= 4;

# 1755
}
dp->clust = clst;
dp->sect = clst2sect(fs, clst);
}
}
}
dp->dptr = ofs;
dp->dir = fs->win + ofs % ((UINT)512);

return FR_OK;
}

# 1775
static FRESULT dir_alloc (
DIR_E* dp,
UINT n_ent
)
{
FRESULT res;
UINT n;
FATFS *fs = dp->obj.fs;


res = dir_sdi(dp, 0);
if (res == FR_OK) {
n = 0;
do {
res = move_window(fs, dp->sect);
if (res != FR_OK) break;



if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {

if (++n == n_ent) break;
} else {
n = 0;
}
res = dir_next(dp, 1);
} while (res == FR_OK);
}

if (res == FR_NO_FILE) res = FR_DENIED;
return res;
}

# 1817
static DWORD ld_clust (
FATFS* fs,
const BYTE* dir
)
{
DWORD cl;

cl = ld_word(dir + 26);
if (fs->fs_type == 3) {
cl |= (DWORD)ld_word(dir + 20) << 16;
}

return cl;
}



static void st_clust (
FATFS* fs,
BYTE* dir,
DWORD cl
)
{
st_word(dir + 26, (WORD)cl);
if (fs->fs_type == 3) {
st_word(dir + 20, (WORD)(cl >> 16));
}
}

# 2275
static FRESULT dir_read (
DIR_E* dp,
int vol
)
{
FRESULT res = FR_NO_FILE;
FATFS *fs = dp->obj.fs;
BYTE attr, b;

# 2287
while (dp->sect) {
res = move_window(fs, dp->sect);
if (res != FR_OK) break;
b = dp->dir[0];
if (b == 0) {
res = FR_NO_FILE; break;
}

# 2310
{
dp->obj.attr = attr = dp->dir[11] & 0x3F;

# 2332
if (b != 0xE5 && b != '.' && attr != 0x0F && (int)((attr & ~0x20) == 0x08) == vol) {
break;
}

}
res = dir_next(dp, 0);
if (res != FR_OK) break;
}

if (res != FR_OK) dp->sect = 0;
return res;
}

# 2353
static FRESULT dir_find (
DIR_E* dp
)
{
FRESULT res;
FATFS *fs = dp->obj.fs;
BYTE c;

# 2364
res = dir_sdi(dp, 0);
if (res != FR_OK) return res;

# 2390
do {
res = move_window(fs, dp->sect);
if (res != FR_OK) break;
c = dp->dir[0];
if (c == 0) { res = FR_NO_FILE; break; }

# 2417
dp->obj.attr = dp->dir[11] & 0x3F;
if (!(dp->dir[11] & 0x08) && !memcmp(dp->dir, dp->fn, 11)) break;

res = dir_next(dp, 0);
} while (res == FR_OK);

return res;
}

# 2434
static FRESULT dir_register (
DIR_E* dp
)
{
FRESULT res;
FATFS *fs = dp->obj.fs;

# 2511
res = dir_alloc(dp, 1);




if (res == FR_OK) {
res = move_window(fs, dp->sect);
if (res == FR_OK) {
memset(dp->dir, 0, 32);
memcpy(dp->dir + 0, dp->fn, 11);

# 2524
fs->wflag = 1;
}
}

return res;
}

# 2540
static FRESULT dir_remove (
DIR_E* dp
)
{
FRESULT res;
FATFS *fs = dp->obj.fs;

# 2567
res = move_window(fs, dp->sect);
if (res == FR_OK) {
dp->dir[0] = 0xE5;
fs->wflag = 1;
}


return res;
}

# 2586
static void get_fileinfo (
DIR_E* dp,
FILINFO* fno
)
{
UINT si, di;

# 2598
TCHAR c;



fno->fname[0] = 0;
if (dp->sect == 0) return;

# 2692
si = di = 0;
while (si < 11) {
c = (TCHAR)dp->dir[si++];
if (c == ' ') continue;
if (c == 0x05) c = 0xE5;
if (si == 9) fno->fname[di++] = '.';
fno->fname[di++] = c;
}
fno->fname[di] = 0;


fno->fattrib = dp->dir[11] & 0x3F;
fno->fsize = ld_dword(dp->dir + 28);
fno->ftime = ld_word(dp->dir + 22 + 0);
fno->fdate = ld_word(dp->dir + 22 + 2);
}

# 2801
static FRESULT create_name (
DIR_E* dp,
const TCHAR** path
)
{

# 2933
BYTE c, d, *sfn;
UINT ni, si, i;
const char *p;


p = *path; sfn = dp->fn;
memset(sfn, ' ', 11);
si = i = 0; ni = 8;

# 2954
for (;;) {
c = (BYTE)p[si++];
if (c <= ' ') break;
if (((c) == '/' || (c) == '\\')) {
while (((p[si]) == '/' || (p[si]) == '\\')) si++;
break;
}
if (c == '.' || i >= ni) {
if (ni == 11 || c != '.') return FR_INVALID_NAME;
i = 8; ni = 11;
continue;
}

# 2975
if (dbc_1st(c)) {
d = (BYTE)p[si++];
if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;
sfn[i++] = c;
sfn[i++] = d;
} else {
if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;
if (((c) >= 'a' && (c) <= 'z')) c -= 0x20;
sfn[i++] = c;
}
}
*path = &p[si];
if (i == 0) return FR_INVALID_NAME;

if (sfn[0] == 0xE5) sfn[0] = 0x05;
sfn[11] = (c <= ' ' || p[si] <= ' ') ? 0x04 : 0;

return FR_OK;

}

# 3003
static FRESULT follow_path (
DIR_E* dp,
const TCHAR* path
)
{
FRESULT res;
BYTE ns;
FATFS *fs = dp->obj.fs;

# 3018
{
while (((*path) == '/' || (*path) == '\\')) path++;
dp->obj.sclust = 0;
}

# 3039
if ((UINT)*path < ' ') {
dp->fn[11] = 0x80;
res = dir_sdi(dp, 0);

} else {
for (;;) {
res = create_name(dp, &path);
if (res != FR_OK) break;
res = dir_find(dp);
ns = dp->fn[11];
if (res != FR_OK) {
if (res == FR_NO_FILE) {
if (0 && (ns & 0x20)) {
if (!(ns & 0x04)) continue;
dp->fn[11] = 0x80;
res = FR_OK;
} else {
if (!(ns & 0x04)) res = FR_NO_PATH;
}
}
break;
}
if (ns & 0x04) break;

if (!(dp->obj.attr & 0x10)) {
res = FR_NO_PATH; break;
}

# 3074
{
dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % ((UINT)512));
}
}
}

return res;
}

# 3090
static int get_ldnumber (
const TCHAR** path
)
{
const TCHAR *tp, *tt;
TCHAR tc;
int i;
int vol = -1;

# 3103
tt = tp = *path;
if (!tp) return vol;
do tc = *tt++; while (!((UINT)(tc) < (0 ? ' ' : '!')) && tc != ':');

if (tc == ':') {
i = 1;
if (((*tp) >= '0' && (*tp) <= '9') && tp + 2 == tt) {
i = (int)*tp - '0';
}

# 3125
if (i < 1) {
vol = i;
*path = tt;
}
return vol;
}

# 3154
vol = 0;

return vol;
}

# 3238
static UINT check_fs (
FATFS* fs,
LBA_t sect
)
{
WORD w, sign;
BYTE b;


fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;
if (move_window(fs, sect) != FR_OK) return 4;
sign = ld_word(fs->win + 510);

# 3253
b = fs->win[0];
if (b == 0xEB || b == 0xE9 || b == 0xE8) {
if (sign == 0xAA55 && !memcmp(fs->win + 82, "FAT32   ", 8)) {
return 0;
}

w = ld_word(fs->win + 11);
b = fs->win[13];
if ((w & (w - 1)) == 0 && w >= 512 && w <= 512
&& b != 0 && (b & (b - 1)) == 0
&& ld_word(fs->win + 14) != 0
&& (UINT)fs->win[16] - 1 <= 1
&& ld_word(fs->win + 17) != 0
&& (ld_word(fs->win + 19) >= 128 || ld_dword(fs->win + 32) >= 0x10000)
&& ld_word(fs->win + 22) != 0) {
return 0;
}
}
return sign == 0xAA55 ? 2 : 3;
}

# 3278
static UINT find_volume (
FATFS* fs,
UINT part
)
{
UINT fmt, i;
DWORD mbr_pt[4];


fmt = check_fs(fs, 0);
if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;

# 3314
if (0 && part > 4) return 3;
for (i = 0; i < 4; i++) {
mbr_pt[i] = ld_dword(fs->win + 446 + i * 16 + 8);
}
i = part ? part - 1 : 0;
do {
fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;
} while (part == 0 && fmt >= 2 && ++i < 4);
return fmt;
}

# 3332
static FRESULT mount_volume (
const TCHAR** path,
FATFS** rfs,
BYTE mode
)
{
int vol;
DSTATUS stat;
LBA_t bsect;
DWORD tsect, sysect, fasize, nclst, szbfat;
WORD nrsv;
FATFS *fs;
UINT fmt;



*rfs = 0;
vol = get_ldnumber(path);
if (vol < 0) return FR_INVALID_DRIVE;


fs = FatFs[vol];
if (!fs) return FR_NOT_ENABLED;

# 3358
*rfs = fs;

mode &= (BYTE)~0x01;
if (fs->fs_type != 0) {
stat = disk_status(fs->pdrv);
if (!(stat & 0x01)) {
if (!0 && mode && (stat & 0x04)) {
return FR_WRITE_PROTECTED;
}
return FR_OK;
}
}




fs->fs_type = 0;
fs->pdrv = (BYTE)(vol);
stat = disk_initialize(fs->pdrv);
if (stat & 0x01) {
return FR_NOT_READY;
}
if (!0 && mode && (stat & 0x04)) {
return FR_WRITE_PROTECTED;
}

# 3389
fmt = find_volume(fs, 0);
if (fmt == 4) return FR_DISK_ERR;
if (fmt >= 2) return FR_NO_FILESYSTEM;
bsect = fs->winsect;

# 3459
{
if (ld_word(fs->win + 11) != ((UINT)512)) return FR_NO_FILESYSTEM;

fasize = ld_word(fs->win + 22);
if (fasize == 0) fasize = ld_dword(fs->win + 36);
fs->fsize = fasize;

fs->n_fats = fs->win[16];
if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;
fasize *= fs->n_fats;

fs->csize = fs->win[13];
if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;

fs->n_rootdir = ld_word(fs->win + 17);
if (fs->n_rootdir % (((UINT)512) / 32)) return FR_NO_FILESYSTEM;

tsect = ld_word(fs->win + 19);
if (tsect == 0) tsect = ld_dword(fs->win + 32);

nrsv = ld_word(fs->win + 14);
if (nrsv == 0) return FR_NO_FILESYSTEM;


sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
if (tsect < sysect) return FR_NO_FILESYSTEM;
nclst = (tsect - sysect) / fs->csize;
if (nclst == 0) return FR_NO_FILESYSTEM;
fmt = 0;
if (nclst <= 0x0FFFFFF5) fmt = 3;
if (nclst <= 0xFFF5) fmt = 2;
if (nclst <= 0xFF5) fmt = 1;
if (fmt == 0) return FR_NO_FILESYSTEM;


fs->n_fatent = nclst + 2;
fs->volbase = bsect;
fs->fatbase = bsect + nrsv;
fs->database = bsect + sysect;
if (fmt == 3) {
if (ld_word(fs->win + 42) != 0) return FR_NO_FILESYSTEM;
if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;
fs->dirbase = ld_dword(fs->win + 44);
szbfat = fs->n_fatent * 4;
} else {
if (fs->n_rootdir == 0) return FR_NO_FILESYSTEM;
fs->dirbase = fs->fatbase + fasize;
szbfat = (fmt == 2) ?
fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
}
if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512)) return FR_NO_FILESYSTEM;



fs->last_clst = fs->free_clst = 0xFFFFFFFF;
fs->fsi_flag = 0x80;

if (fmt == 3
&& ld_word(fs->win + 48) == 1
&& move_window(fs, bsect + 1) == FR_OK)
{
fs->fsi_flag = 0;
if (ld_word(fs->win + 510) == 0xAA55
&& ld_dword(fs->win + 0) == 0x41615252
&& ld_dword(fs->win + 484) == 0x61417272)
{

fs->free_clst = ld_dword(fs->win + 488);


fs->last_clst = ld_dword(fs->win + 492);

}
}


}

fs->fs_type = (BYTE)fmt;
fs->id = ++Fsid;

# 3551
return FR_OK;
}

# 3561
static FRESULT validate (
FFOBJID* obj,
FATFS** rfs
)
{
FRESULT res = FR_INVALID_OBJECT;


if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {

# 3581
if (!(disk_status(obj->fs->pdrv) & 0x01)) {
res = FR_OK;
}

}
*rfs = (res == FR_OK) ? obj->fs : 0;
return res;
}

# 3605
FRESULT f_mount (
FATFS* fs,
const TCHAR* path,
BYTE opt
)
{
FATFS *cfs;
int vol;
FRESULT res;
const TCHAR *rp = path;



vol = get_ldnumber(&rp);
if (vol < 0) return FR_INVALID_DRIVE;
cfs = FatFs[vol];

if (cfs) {

# 3629
cfs->fs_type = 0;
}

if (fs) {
fs->fs_type = 0;

# 3637
}
FatFs[vol] = fs;

if (opt == 0) return FR_OK;

res = mount_volume(&path, &fs, 0);
return res;
}


DWORD get_fattime(void)
{
fat_time f_time;

return (DWORD)(f_time.ano ) << 25 |
(DWORD)(f_time.mes) << 21 |
(DWORD)(f_time.mes) << 16 |
(DWORD)(f_time.hora) << 11 |
(DWORD)(f_time.min) << 5 |
(DWORD)(f_time.seg) >> 1;
}

# 3663
FRESULT f_open (
FIL* fp,
const TCHAR* path,
BYTE mode
)
{
FRESULT res;
DIR_E dj;
FATFS *fs;

DWORD cl, bcs, clst, tm;
LBA_t sc;
FSIZE_t ofs;




if (!fp) return FR_INVALID_OBJECT;


mode &= 0 ? 0x01 : 0x01 | 0x02 | 0x08 | 0x04 | 0x10 | 0x30;
res = mount_volume(&path, &fs, mode);
if (res == FR_OK) {
dj.obj.fs = fs;
;
res = follow_path(&dj, path);

if (res == FR_OK) {
if (dj.fn[11] & 0x80) {
res = FR_INVALID_NAME;
}

# 3699
}

if (mode & (0x08 | 0x10 | 0x04)) {
if (res != FR_OK) {
if (res == FR_NO_FILE) {



res = dir_register(&dj);

}
mode |= 0x08;
}
else {
if (dj.obj.attr & (0x01 | 0x10)) {
res = FR_DENIED;
} else {
if (mode & 0x04) res = FR_EXIST;
}
}
if (res == FR_OK && (mode & 0x08)) {

# 3738
{

tm = get_fattime();
st_dword(dj.dir + 14, tm);
st_dword(dj.dir + 22, tm);
cl = ld_clust(fs, dj.dir);
dj.dir[11] = 0x20;
st_clust(fs, dj.dir, 0);
st_dword(dj.dir + 28, 0);
fs->wflag = 1;
if (cl != 0) {
sc = fs->winsect;
res = remove_chain(&dj.obj, cl, 0);
if (res == FR_OK) {
res = move_window(fs, sc);
fs->last_clst = cl - 1;
}
}
}
}
}
else {
if (res == FR_OK) {
if (dj.obj.attr & 0x10) {
res = FR_NO_FILE;
} else {
if ((mode & 0x02) && (dj.obj.attr & 0x01)) {
res = FR_DENIED;
}
}
}
}
if (res == FR_OK) {
if (mode & 0x08) mode |= 0x40;
fp->dir_sect = fs->winsect;
fp->dir_ptr = dj.dir;

# 3778
}

# 3791
if (res == FR_OK) {

# 3800
{
fp->obj.sclust = ld_clust(fs, dj.dir);
fp->obj.objsize = ld_dword(dj.dir + 28);
}

# 3807
fp->obj.fs = fs;
fp->obj.id = fs->id;
fp->flag = mode;
fp->err = 0;
fp->sect = 0;
fp->fptr = 0;

# 3817
if ((mode & 0x20) && fp->obj.objsize > 0) {
fp->fptr = fp->obj.objsize;
bcs = (DWORD)fs->csize * ((UINT)512);
clst = fp->obj.sclust;
for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
clst = get_fat(&fp->obj, clst);
if (clst <= 1) res = FR_INT_ERR;
if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
}
fp->clust = clst;
if (res == FR_OK && ofs % ((UINT)512)) {
sc = clst2sect(fs, clst);
if (sc == 0) {
res = FR_INT_ERR;
} else {
fp->sect = sc + (DWORD)(ofs / ((UINT)512));

# 3836
}
}

# 3841
}

}

;
}

if (res != FR_OK) fp->obj.fs = 0;

return res;
}

# 3860
FRESULT f_read (
FIL* fp,
void* buff,
UINT btr,
UINT* br
)
{
FRESULT res;
FATFS *fs;
DWORD clst;
LBA_t sect;
FSIZE_t remain;
UINT rcnt, cc, csect;
BYTE *rbuff = (BYTE*)buff;


*br = 0;
res = validate(&fp->obj, &fs);
if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) return res;
if (!(fp->flag & 0x01)) return FR_DENIED;
remain = fp->obj.objsize - fp->fptr;
if (btr > remain) btr = (UINT)remain;

for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
if (fp->fptr % ((UINT)512) == 0) {
csect = (UINT)(fp->fptr / ((UINT)512) & (fs->csize - 1));
if (csect == 0) {
if (fp->fptr == 0) {
clst = fp->obj.sclust;
} else {

# 3895
{
clst = get_fat(&fp->obj, fp->clust);
}
}
if (clst < 2) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
fp->clust = clst;
}
sect = clst2sect(fs, fp->clust);
if (sect == 0) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
sect += csect;
cc = btr / ((UINT)512);
if (cc > 0) {
if (csect + cc > fs->csize) {
cc = fs->csize - csect;
}
if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };


if (fs->wflag && fs->winsect - sect < cc) {
memcpy(rbuff + ((fs->winsect - sect) * ((UINT)512)), fs->win, ((UINT)512));
}

# 3923
rcnt = ((UINT)512) * cc;
continue;
}

# 3937
fp->sect = sect;
}
rcnt = ((UINT)512) - (UINT)fp->fptr % ((UINT)512);
if (rcnt > btr) rcnt = btr;

if (move_window(fs, fp->sect) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
memcpy(rbuff, fs->win + fp->fptr % ((UINT)512), rcnt);

# 3947
}

return FR_OK;
}

# 3960
FRESULT f_write (
FIL* fp,
const void* buff,
UINT btw,
UINT* bw
)
{
FRESULT res;
FATFS *fs;
DWORD clst;
LBA_t sect;
UINT wcnt, cc, csect;
const BYTE *wbuff = (const BYTE*)buff;


*bw = 0;
res = validate(&fp->obj, &fs);
if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) return res;
if (!(fp->flag & 0x02)) return FR_DENIED;


if ((!0 || fs->fs_type != 4) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
}

for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
if (fp->fptr % ((UINT)512) == 0) {
csect = (UINT)(fp->fptr / ((UINT)512)) & (fs->csize - 1);
if (csect == 0) {
if (fp->fptr == 0) {
clst = fp->obj.sclust;
if (clst == 0) {
clst = create_chain(&fp->obj, 0);
}
} else {

# 4000
{
clst = create_chain(&fp->obj, fp->clust);
}
}
if (clst == 0) break;
if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
fp->clust = clst;
if (fp->obj.sclust == 0) fp->obj.sclust = clst;
}

if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };

# 4018
sect = clst2sect(fs, fp->clust);
if (sect == 0) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
sect += csect;
cc = btw / ((UINT)512);
if (cc > 0) {
if (csect + cc > fs->csize) {
cc = fs->csize - csect;
}
if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };


if (fs->winsect - sect < cc) {
memcpy(fs->win, wbuff + ((fs->winsect - sect) * ((UINT)512)), ((UINT)512));
fs->wflag = 0;
}

# 4040
wcnt = ((UINT)512) * cc;
continue;
}

if (fp->fptr >= fp->obj.objsize) {
if (sync_window(fs) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
fs->winsect = sect;
}

# 4055
fp->sect = sect;
}
wcnt = ((UINT)512) - (UINT)fp->fptr % ((UINT)512);
if (wcnt > btw) wcnt = btw;

if (move_window(fs, fp->sect) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
memcpy(fs->win + fp->fptr % ((UINT)512), wbuff, wcnt);
fs->wflag = 1;

# 4067
}

fp->flag |= 0x40;

return FR_OK;
}

# 4081
FRESULT f_sync (
FIL* fp
)
{
FRESULT res;
FATFS *fs;
DWORD tm;
BYTE *dir;


res = validate(&fp->obj, &fs);
if (res == FR_OK) {
if (fp->flag & 0x40) {

# 4101
tm = get_fattime();

# 4133
{
res = move_window(fs, fp->dir_sect);
if (res == FR_OK) {
dir = fp->dir_ptr;
dir[11] |= 0x20;
st_clust(fp->obj.fs, dir, fp->obj.sclust);
st_dword(dir + 28, (DWORD)fp->obj.objsize);
st_dword(dir + 22, tm);
st_word(dir + 18, 0);
fs->wflag = 1;
res = sync_fs(fs);
fp->flag &= (BYTE)~0x40;
}
}
}
}

return res;
}

# 4162
FRESULT f_close (
FIL* fp
)
{
FRESULT res;
FATFS *fs;


res = f_sync(fp);
if (res == FR_OK)

{
res = validate(&fp->obj, &fs);
if (res == FR_OK) {




fp->obj.fs = 0;

# 4185
}
}
return res;
}

# 4377
FRESULT f_lseek (
FIL* fp,
FSIZE_t ofs
)
{
FRESULT res;
FATFS *fs;
DWORD clst, bcs;
LBA_t nsect;
FSIZE_t ifptr;

# 4393
res = validate(&fp->obj, &fs);
if (res == FR_OK) res = (FRESULT)fp->err;

# 4400
if (res != FR_OK) return res;

# 4455
{

# 4459
if (ofs > fp->obj.objsize && (0 || !(fp->flag & 0x02))) {
ofs = fp->obj.objsize;
}
ifptr = fp->fptr;
fp->fptr = nsect = 0;
if (ofs > 0) {
bcs = (DWORD)fs->csize * ((UINT)512);
if (ifptr > 0 &&
(ofs - 1) / bcs >= (ifptr - 1) / bcs) {
fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);
ofs -= fp->fptr;
clst = fp->clust;
} else {
clst = fp->obj.sclust;

if (clst == 0) {
clst = create_chain(&fp->obj, 0);
if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
fp->obj.sclust = clst;
}

fp->clust = clst;
}
if (clst != 0) {
while (ofs > bcs) {
ofs -= bcs; fp->fptr += bcs;

if (fp->flag & 0x02) {
if (0 && fp->fptr > fp->obj.objsize) {
fp->obj.objsize = fp->fptr;
fp->flag |= 0x40;
}
clst = create_chain(&fp->obj, clst);
if (clst == 0) {
ofs = 0; break;
}
} else

{
clst = get_fat(&fp->obj, clst);
}
if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
if (clst <= 1 || clst >= fs->n_fatent) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
fp->clust = clst;
}
fp->fptr += ofs;
if (ofs % ((UINT)512)) {
nsect = clst2sect(fs, clst);
if (nsect == 0) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
nsect += (DWORD)(ofs / ((UINT)512));
}
}
}
if (!0 && fp->fptr > fp->obj.objsize) {
fp->obj.objsize = fp->fptr;
fp->flag |= 0x40;
}
if (fp->fptr % ((UINT)512) && nsect != fp->sect) {

# 4527
fp->sect = nsect;
}
}

return res;
}

# 4541
FRESULT f_opendir (
DIR_E* dp,
const TCHAR* path
)
{
FRESULT res;
FATFS *fs;



if (!dp) return FR_INVALID_OBJECT;


res = mount_volume(&path, &fs, 0);
if (res == FR_OK) {
dp->obj.fs = fs;
;
res = follow_path(dp, path);
if (res == FR_OK) {
if (!(dp->fn[11] & 0x80)) {
if (dp->obj.attr & 0x10) {

# 4570
{
dp->obj.sclust = ld_clust(fs, dp->dir);
}
} else {
res = FR_NO_PATH;
}
}
if (res == FR_OK) {
dp->obj.id = fs->id;
res = dir_sdi(dp, 0);

# 4590
}
}
;
if (res == FR_NO_FILE) res = FR_NO_PATH;
}
if (res != FR_OK) dp->obj.fs = 0;

return res;
}

# 4607
FRESULT f_closedir (
DIR_E *dp
)
{
FRESULT res;
FATFS *fs;


res = validate(&dp->obj, &fs);
if (res == FR_OK) {




dp->obj.fs = 0;

# 4626
}
return res;
}

# 4637
FRESULT f_readdir (
DIR_E* dp,
FILINFO* fno
)
{
FRESULT res;
FATFS *fs;



res = validate(&dp->obj, &fs);
if (res == FR_OK) {
if (!fno) {
res = dir_sdi(dp, 0);
} else {
;
res = dir_read(dp, 0);
if (res == FR_NO_FILE) res = FR_OK;
if (res == FR_OK) {
get_fileinfo(dp, fno);
res = dir_next(dp, 0);
if (res == FR_NO_FILE) res = FR_OK;
}
;
}
}
return res;
}

# 4725
FRESULT f_stat (
const TCHAR* path,
FILINFO* fno
)
{
FRESULT res;
DIR_E dj;




res = mount_volume(&path, &dj.obj.fs, 0);
if (res == FR_OK) {
;
res = follow_path(&dj, path);
if (res == FR_OK) {
if (dj.fn[11] & 0x80) {
res = FR_INVALID_NAME;
} else {
if (fno) get_fileinfo(&dj, fno);
}
}
;
}

return res;
}

# 4760
FRESULT f_getfree (
const TCHAR* path,
DWORD* nclst,
FATFS** fatfs
)
{
FRESULT res;
FATFS *fs;
DWORD nfree, clst, stat;
LBA_t sect;
UINT i;
FFOBJID obj;



res = mount_volume(&path, &fs, 0);
if (res == FR_OK) {
*fatfs = fs;

if (fs->free_clst <= fs->n_fatent - 2) {
*nclst = fs->free_clst;
} else {

nfree = 0;
if (fs->fs_type == 1) {
clst = 2; obj.fs = fs;
do {
stat = get_fat(&obj, clst);
if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
if (stat == 1) { res = FR_INT_ERR; break; }
if (stat == 0) nfree++;
} while (++clst < fs->n_fatent);
} else {

# 4814
{
clst = fs->n_fatent;
sect = fs->fatbase;
i = 0;
do {
if (i == 0) {
res = move_window(fs, sect++);
if (res != FR_OK) break;
}
if (fs->fs_type == 2) {
if (ld_word(fs->win + i) == 0) nfree++;
i += 2;
} else {
if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
i += 4;
}
i %= ((UINT)512);
} while (--clst);
}
}
if (res == FR_OK) {
*nclst = nfree;
fs->free_clst = nfree;
fs->fsi_flag |= 1;
}
}
}

return res;
}

# 4852
FRESULT f_truncate (
FIL* fp
)
{
FRESULT res;
FATFS *fs;
DWORD ncl;


res = validate(&fp->obj, &fs);
if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) return res;
if (!(fp->flag & 0x02)) return FR_DENIED;

if (fp->fptr < fp->obj.objsize) {
if (fp->fptr == 0) {
res = remove_chain(&fp->obj, fp->obj.sclust, 0);
fp->obj.sclust = 0;
} else {
ncl = get_fat(&fp->obj, fp->clust);
res = FR_OK;
if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
if (ncl == 1) res = FR_INT_ERR;
if (res == FR_OK && ncl < fs->n_fatent) {
res = remove_chain(&fp->obj, ncl, fp->clust);
}
}
fp->obj.objsize = fp->fptr;
fp->flag |= 0x40;

# 4889
if (res != FR_OK) { fp->err = (BYTE)(res); return res; };
}

return res;
}

# 4902
FRESULT f_unlink (
const TCHAR* path
)
{
FRESULT res;
DIR_E dj, sdj;
DWORD dclst = 0;
FATFS *fs;

# 4913




res = mount_volume(&path, &fs, 0x02);
if (res == FR_OK) {
dj.obj.fs = fs;
;
res = follow_path(&dj, path);
if (0 && res == FR_OK && (dj.fn[11] & 0x20)) {
res = FR_INVALID_NAME;
}

# 4928
if (res == FR_OK) {
if (dj.fn[11] & 0x80) {
res = FR_INVALID_NAME;
} else {
if (dj.obj.attr & 0x01) {
res = FR_DENIED;
}
}
if (res == FR_OK) {

# 4944
{
dclst = ld_clust(fs, dj.dir);
}
if (dj.obj.attr & 0x10) {

# 4953
{
sdj.obj.fs = fs;
sdj.obj.sclust = dclst;

# 4962
res = dir_sdi(&sdj, 0);
if (res == FR_OK) {
res = dir_read(&sdj, 0);
if (res == FR_OK) res = FR_DENIED;
if (res == FR_NO_FILE) res = FR_OK;
}
}
}
}
if (res == FR_OK) {
res = dir_remove(&dj);
if (res == FR_OK && dclst != 0) {



res = remove_chain(&dj.obj, dclst, 0);

}
if (res == FR_OK) res = sync_fs(fs);
}
}
;
}

return res;
}

# 4996
FRESULT f_mkdir (
const TCHAR* path
)
{
FRESULT res;
DIR_E dj;
FFOBJID sobj;
FATFS *fs;
DWORD dcl, pcl, tm;



res = mount_volume(&path, &fs, 0x02);
if (res == FR_OK) {
dj.obj.fs = fs;
;
res = follow_path(&dj, path);
if (res == FR_OK) res = FR_EXIST;
if (0 && res == FR_NO_FILE && (dj.fn[11] & 0x20)) {
res = FR_INVALID_NAME;
}
if (res == FR_NO_FILE) {
sobj.fs = fs;
dcl = create_chain(&sobj, 0);
res = FR_OK;
if (dcl == 0) res = FR_DENIED;
if (dcl == 1) res = FR_INT_ERR;
if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
tm = get_fattime();
if (res == FR_OK) {
res = dir_clear(fs, dcl);
if (res == FR_OK) {
if (!0 || fs->fs_type != 4) {
memset(fs->win + 0, ' ', 11);
fs->win[0] = '.';
fs->win[11] = 0x10;
st_dword(fs->win + 22, tm);
st_clust(fs, fs->win, dcl);
memcpy(fs->win + 32, fs->win, 32);
fs->win[32 + 1] = '.'; pcl = dj.obj.sclust;
st_clust(fs, fs->win + 32, pcl);
fs->wflag = 1;
}
res = dir_register(&dj);
}
}
if (res == FR_OK) {

# 5054
{
st_dword(dj.dir + 22, tm);
st_clust(fs, dj.dir, dcl);
dj.dir[11] = 0x10;
fs->wflag = 1;
}
if (res == FR_OK) {
res = sync_fs(fs);
}
} else {
remove_chain(&sobj, dcl, 0);
}
}
;
}

return res;
}

# 5080
FRESULT f_rename (
const TCHAR* path_old,
const TCHAR* path_new
)
{
FRESULT res;
DIR_E djo, djn;
FATFS *fs;
BYTE buf[0 ? 32 * 2 : 32], *dir;
LBA_t sect;



get_ldnumber(&path_new);
res = mount_volume(&path_old, &fs, 0x02);
if (res == FR_OK) {
djo.obj.fs = fs;
;
res = follow_path(&djo, path_old);
if (res == FR_OK && (djo.fn[11] & (0x20 | 0x80))) res = FR_INVALID_NAME;

# 5105
if (res == FR_OK) {

# 5132
{
memcpy(buf, djo.dir, 32);
memcpy(&djn, &djo, sizeof (DIR_E));
res = follow_path(&djn, path_new);
if (res == FR_OK) {
res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
}
if (res == FR_NO_FILE) {
res = dir_register(&djn);
if (res == FR_OK) {
dir = djn.dir;
memcpy(dir + 13, buf + 13, 32 - 13);
dir[11] = buf[11];
if (!(dir[11] & 0x10)) dir[11] |= 0x20;
fs->wflag = 1;
if ((dir[11] & 0x10) && djo.obj.sclust != djn.obj.sclust) {
sect = clst2sect(fs, ld_clust(fs, dir));
if (sect == 0) {
res = FR_INT_ERR;
} else {

res = move_window(fs, sect);
dir = fs->win + 32 * 1;
if (res == FR_OK && dir[1] == '.') {
st_clust(fs, dir, djn.obj.sclust);
fs->wflag = 1;
}
}
}
}
}
}
if (res == FR_OK) {
res = dir_remove(&djo);
if (res == FR_OK) {
res = sync_fs(fs);
}
}

}
;
}

return res;
}

# 6348
TCHAR* f_gets (
TCHAR* buff,
int len,
FIL* fp
)
{
int nc = 0;
TCHAR *p = buff;
BYTE s[4];
UINT rc;
DWORD dc;

# 6454
len -= 1;
while (nc < len) {
f_read(fp, s, 1, &rc);
if (rc != 1) break;
dc = s[0];
if (2 == 2 && dc == '\r') continue;
*p++ = (TCHAR)dc; nc++;
if (dc == '\n') break;
}


*p = 0;
return nc ? buff : 0;
}

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 6483 "bibliotecas/ff.c"
typedef struct {
FIL *fp;
int idx, nchr;

# 6492
BYTE buf[64];
} putbuff;




static void putc_bfd (putbuff* pb, TCHAR c)
{
UINT n;
int i, nc;

# 6510
if (2 == 2 && c == '\n') {
putc_bfd(pb, '\r');
}

i = pb->idx;
if (i < 0) return;
nc = pb->nchr;

# 6615
pb->buf[i++] = (BYTE)c;


if (i >= (int)(sizeof pb->buf) - 4) {
f_write(pb->fp, pb->buf, (UINT)i, &n);
i = (n == (UINT)i) ? 0 : -1;
}
pb->idx = i;
pb->nchr = nc + 1;
}




static int putc_flush (putbuff* pb)
{
UINT nw;

if ( pb->idx >= 0
&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
&& (UINT)pb->idx == nw) return pb->nchr;
return -1;
}




static void putc_init (putbuff* pb, FIL* fp)
{
memset(pb, 0, sizeof (putbuff));
pb->fp = fp;
}



int f_putc (
TCHAR c,
FIL* fp
)
{
putbuff pb;


putc_init(&pb, fp);
putc_bfd(&pb, c);
return putc_flush(&pb);
}

# 6670
int f_puts (
const TCHAR* str,
FIL* fp
)
{
putbuff pb;


putc_init(&pb, fp);
while (*str) putc_bfd(&pb, *str++);
return putc_flush(&pb);
}

# 6811
int f_printf (
FIL* fp,
const TCHAR* fmt,
...
)
{
va_list arp;
putbuff pb;
UINT i, j, w, f, r;
int prec;



DWORD v;

TCHAR tc, pad, *tp;
TCHAR nul = 0;
char d, str[32];


putc_init(&pb, fp);

*arp = __va_start();

for (;;) {
tc = *fmt++;
if (tc == 0) break;
if (tc != '%') {
putc_bfd(&pb, tc);
continue;
}
f = w = 0; pad = ' '; prec = -1;
tc = *fmt++;
if (tc == '0') {
pad = '0'; tc = *fmt++;
} else if (tc == '-') {
f = 2; tc = *fmt++;
}
if (tc == '*') {
w = (*(int *)__va_arg((*(int **)arp), (int)0));
tc = *fmt++;
} else {
while (((tc) >= '0' && (tc) <= '9')) {
w = w * 10 + tc - '0';
tc = *fmt++;
}
}
if (tc == '.') {
tc = *fmt++;
if (tc == '*') {
prec = (*(int *)__va_arg((*(int **)arp), (int)0));
tc = *fmt++;
} else {
prec = 0;
while (((tc) >= '0' && (tc) <= '9')) {
prec = prec * 10 + tc - '0';
tc = *fmt++;
}
}
}
if (tc == 'l') {
f |= 4; tc = *fmt++;

# 6878
}
if (tc == 0) break;
switch (tc) {
case 'b':
r = 2; break;
case 'o':
r = 8; break;
case 'd':
case 'u':
r = 10; break;
case 'x':
case 'X':
r = 16; break;
case 'c':
putc_bfd(&pb, (TCHAR)(*(int *)__va_arg((*(int **)arp), (int)0)));
continue;
case 's':
tp = (*(TCHAR* *)__va_arg((*(TCHAR* **)arp), (TCHAR*)0));
if (!tp) tp = &nul;
for (j = 0; tp[j]; j++) ;
if (prec >= 0 && j > (UINT)prec) j = prec;
for ( ; !(f & 2) && j < w; j++) putc_bfd(&pb, pad);
while (*tp && prec--) putc_bfd(&pb, *tp++);
while (j++ < w) putc_bfd(&pb, ' ');
continue;

# 6913
default:
putc_bfd(&pb, tc); continue;
}

# 6932
if (f & 4) {
v = (DWORD)(*(long *)__va_arg((*(long **)arp), (long)0));
} else {
v = (tc == 'd') ? (DWORD)(long)(*(int *)__va_arg((*(int **)arp), (int)0)) : (DWORD)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
}
if (tc == 'd' && (v & 0x80000000)) {
v = 0 - v; f |= 1;
}

i = 0;
do {
d = (char)(v % r); v /= r;
if (d > 9) d += (tc == 'x') ? 0x27 : 0x07;
str[i++] = d + '0';
} while (v && i < 32);
if (f & 1) str[i++] = '-';

for (j = i; !(f & 2) && j < w; j++) putc_bfd(&pb, pad);
do putc_bfd(&pb, (TCHAR)str[--i]); while (i);
while (j++ < w) putc_bfd(&pb, ' ');
}

;

return putc_flush(&pb);
}

