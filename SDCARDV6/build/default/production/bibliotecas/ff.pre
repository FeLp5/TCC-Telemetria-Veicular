
# 1 "bibliotecas/ff.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\__size_t.h"
typedef unsigned size_t;

# 14 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 36
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 58 "bibliotecas/ff.h"
typedef unsigned int UINT;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef unsigned long DWORD;
typedef WORD WCHAR;

# 82
typedef DWORD FSIZE_t;
typedef DWORD LBA_t;

# 105
typedef char TCHAR;

# 132
typedef struct {
BYTE fs_type;
BYTE pdrv;
BYTE n_fats;
BYTE wflag;
BYTE fsi_flag;
WORD id;
WORD n_rootdir;
WORD csize;

# 154
DWORD last_clst;
DWORD free_clst;

# 165
DWORD n_fatent;
DWORD fsize;
LBA_t volbase;
LBA_t fatbase;
LBA_t dirbase;
LBA_t database;

# 174
LBA_t winsect;
BYTE win[512];
} FATFS;

# 182
typedef struct {
FATFS* fs;
WORD id;
BYTE attr;
BYTE stat;
DWORD sclust;
FSIZE_t objsize;

# 199
} FFOBJID;

# 205
typedef struct {
FFOBJID obj;
BYTE flag;
BYTE err;
FSIZE_t fptr;
DWORD clust;
LBA_t sect;

LBA_t dir_sect;
BYTE* dir_ptr;

# 222
} FIL;

# 228
typedef struct {
FFOBJID obj;
DWORD dptr;
DWORD clust;
LBA_t sect;
BYTE* dir;
BYTE fn[12];

# 241
} DIR_E;

# 247
typedef struct {
FSIZE_t fsize;
WORD fdate;
WORD ftime;
BYTE fattrib;




TCHAR fname[12 + 1];

} FILINFO;

# 264
typedef struct {
BYTE fmt;
BYTE n_fat;
UINT align;
UINT n_root;
DWORD au_size;
} MKFS_PARM;

# 276
typedef enum {
FR_OK = 0,
FR_DISK_ERR,
FR_INT_ERR,
FR_NOT_READY,
FR_NO_FILE,
FR_NO_PATH,
FR_INVALID_NAME,
FR_DENIED,
FR_EXIST,
FR_INVALID_OBJECT,
FR_WRITE_PROTECTED,
FR_INVALID_DRIVE,
FR_NOT_ENABLED,
FR_NO_FILESYSTEM,
FR_MKFS_ABORTED,
FR_TIMEOUT,
FR_LOCKED,
FR_NOT_ENOUGH_CORE,
FR_TOO_MANY_OPEN_FILES,
FR_INVALID_PARAMETER
} FRESULT;

# 304
FRESULT f_open (FIL* fp, const TCHAR* path, BYTE mode);
FRESULT f_close (FIL* fp);
FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br);
FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);
FRESULT f_lseek (FIL* fp, FSIZE_t ofs);
FRESULT f_truncate (FIL* fp);
FRESULT f_sync (FIL* fp);
FRESULT f_opendir (DIR_E* dp, const TCHAR* path);
FRESULT f_closedir (DIR_E* dp);
FRESULT f_readdir (DIR_E* dp, FILINFO* fno);
FRESULT f_findfirst (DIR_E* dp, FILINFO* fno, const TCHAR* path, const TCHAR* pattern);
FRESULT f_findnext (DIR_E* dp, FILINFO* fno);
FRESULT f_mkdir (const TCHAR* path);
FRESULT f_unlink (const TCHAR* path);
FRESULT f_rename (const TCHAR* path_old, const TCHAR* path_new);
FRESULT f_stat (const TCHAR* path, FILINFO* fno);
FRESULT f_chmod (const TCHAR* path, BYTE attr, BYTE mask);
FRESULT f_utime (const TCHAR* path, const FILINFO* fno);
FRESULT f_chdir (const TCHAR* path);
FRESULT f_chdrive (const TCHAR* path);
FRESULT f_getcwd (TCHAR* buff, UINT len);
FRESULT f_getfree (const TCHAR* path, DWORD* nclst, FATFS** fatfs);
FRESULT f_getlabel (const TCHAR* path, TCHAR* label, DWORD* vsn);
FRESULT f_setlabel (const TCHAR* label);
FRESULT f_forward (FIL* fp, UINT(*func)(const BYTE*,UINT), UINT btf, UINT* bf);
FRESULT f_expand (FIL* fp, FSIZE_t fsz, BYTE opt);
FRESULT f_mount (FATFS* fs, const TCHAR* path, BYTE opt);
FRESULT f_mkfs (const TCHAR* path, const MKFS_PARM* opt, void* work, UINT len);
FRESULT f_fdisk (BYTE pdrv, const LBA_t ptbl[], void* work);
FRESULT f_setcp (WORD cp);
int f_putc (TCHAR c, FIL* fp);
int f_puts (const TCHAR* str, FIL* cp);
int f_printf (FIL* fp, const TCHAR* str, ...);
TCHAR* f_gets (TCHAR* buff, int len, FIL* fp);

# 356
DWORD get_fattime (void);

# 8 "bibliotecas/integer.h"
typedef struct{
unsigned int hora;
unsigned int min;
unsigned int seg;
unsigned char dia;
unsigned char mes;
unsigned char ano;
}fat_time;

typedef int INT;
typedef unsigned int UINT;


typedef signed char CHAR;
typedef unsigned char UCHAR;
typedef unsigned char BYTE;


typedef short SHORT;
typedef unsigned short USHORT;
typedef unsigned short WORD;


typedef long LONG;
typedef unsigned long ULONG;
typedef unsigned long DWORD;


typedef enum { FALSE = 0, TRUE } BOOL;

# 14 "bibliotecas/diskio.h"
typedef BYTE DSTATUS;


typedef enum {
RES_OK = 0,
RES_ERROR,
RES_WRPRT,
RES_NOTRDY,
RES_PARERR
} DRESULT;

# 29
DSTATUS disk_initialize (BYTE pdrv);
DSTATUS disk_status (BYTE pdrv);
DRESULT disk_read (BYTE pdrv, BYTE* buff, DWORD sector, BYTE count);

DRESULT disk_write (BYTE, const BYTE*, DWORD, BYTE);

DRESULT disk_ioctl (BYTE, BYTE, void*);
void disk_timerproc (void);

# 26 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 50 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\pic18f4550.h"
extern volatile unsigned char SPPDATA @ 0xF62;

asm("SPPDATA equ 0F62h");


typedef union {
struct {
unsigned DATA :8;
};
} SPPDATAbits_t;
extern volatile SPPDATAbits_t SPPDATAbits @ 0xF62;

# 70
extern volatile unsigned char SPPCFG @ 0xF63;

asm("SPPCFG equ 0F63h");


typedef union {
struct {
unsigned WS :4;
unsigned CLK1EN :1;
unsigned CSEN :1;
unsigned CLKCFG :2;
};
struct {
unsigned WS0 :1;
unsigned WS1 :1;
unsigned WS2 :1;
unsigned WS3 :1;
unsigned :2;
unsigned CLKCFG0 :1;
unsigned CLKCFG1 :1;
};
} SPPCFGbits_t;
extern volatile SPPCFGbits_t SPPCFGbits @ 0xF63;

# 147
extern volatile unsigned char SPPEPS @ 0xF64;

asm("SPPEPS equ 0F64h");


typedef union {
struct {
unsigned ADDR :4;
unsigned SPPBUSY :1;
unsigned :1;
unsigned WRSPP :1;
unsigned RDSPP :1;
};
struct {
unsigned ADDR0 :1;
unsigned ADDR1 :1;
unsigned ADDR2 :1;
unsigned ADDR3 :1;
};
struct {
unsigned :4;
unsigned BUSY :1;
};
} SPPEPSbits_t;
extern volatile SPPEPSbits_t SPPEPSbits @ 0xF64;

# 221
extern volatile unsigned char SPPCON @ 0xF65;

asm("SPPCON equ 0F65h");


typedef union {
struct {
unsigned SPPEN :1;
unsigned SPPOWN :1;
};
} SPPCONbits_t;
extern volatile SPPCONbits_t SPPCONbits @ 0xF65;

# 247
extern volatile unsigned short UFRM @ 0xF66;

asm("UFRM equ 0F66h");




extern volatile unsigned char UFRML @ 0xF66;

asm("UFRML equ 0F66h");


typedef union {
struct {
unsigned FRM :8;
};
struct {
unsigned FRM0 :1;
unsigned FRM1 :1;
unsigned FRM2 :1;
unsigned FRM3 :1;
unsigned FRM4 :1;
unsigned FRM5 :1;
unsigned FRM6 :1;
unsigned FRM7 :1;
};
struct {
unsigned FRML :8;
};
} UFRMLbits_t;
extern volatile UFRMLbits_t UFRMLbits @ 0xF66;

# 332
extern volatile unsigned char UFRMH @ 0xF67;

asm("UFRMH equ 0F67h");


typedef union {
struct {
unsigned FRM :3;
};
struct {
unsigned FRM8 :1;
unsigned FRM9 :1;
unsigned FRM10 :1;
};
} UFRMHbits_t;
extern volatile UFRMHbits_t UFRMHbits @ 0xF67;

# 372
extern volatile unsigned char UIR @ 0xF68;

asm("UIR equ 0F68h");


typedef union {
struct {
unsigned URSTIF :1;
unsigned UERRIF :1;
unsigned ACTVIF :1;
unsigned TRNIF :1;
unsigned IDLEIF :1;
unsigned STALLIF :1;
unsigned SOFIF :1;
};
} UIRbits_t;
extern volatile UIRbits_t UIRbits @ 0xF68;

# 428
extern volatile unsigned char UIE @ 0xF69;

asm("UIE equ 0F69h");


typedef union {
struct {
unsigned URSTIE :1;
unsigned UERRIE :1;
unsigned ACTVIE :1;
unsigned TRNIE :1;
unsigned IDLEIE :1;
unsigned STALLIE :1;
unsigned SOFIE :1;
};
} UIEbits_t;
extern volatile UIEbits_t UIEbits @ 0xF69;

# 484
extern volatile unsigned char UEIR @ 0xF6A;

asm("UEIR equ 0F6Ah");


typedef union {
struct {
unsigned PIDEF :1;
unsigned CRC5EF :1;
unsigned CRC16EF :1;
unsigned DFN8EF :1;
unsigned BTOEF :1;
unsigned :2;
unsigned BTSEF :1;
};
} UEIRbits_t;
extern volatile UEIRbits_t UEIRbits @ 0xF6A;

# 535
extern volatile unsigned char UEIE @ 0xF6B;

asm("UEIE equ 0F6Bh");


typedef union {
struct {
unsigned PIDEE :1;
unsigned CRC5EE :1;
unsigned CRC16EE :1;
unsigned DFN8EE :1;
unsigned BTOEE :1;
unsigned :2;
unsigned BTSEE :1;
};
} UEIEbits_t;
extern volatile UEIEbits_t UEIEbits @ 0xF6B;

# 586
extern volatile unsigned char USTAT @ 0xF6C;

asm("USTAT equ 0F6Ch");


typedef union {
struct {
unsigned :1;
unsigned PPBI :1;
unsigned DIR :1;
unsigned ENDP :4;
};
struct {
unsigned :3;
unsigned ENDP0 :1;
unsigned ENDP1 :1;
unsigned ENDP2 :1;
unsigned ENDP3 :1;
};
} USTATbits_t;
extern volatile USTATbits_t USTATbits @ 0xF6C;

# 646
extern volatile unsigned char UCON @ 0xF6D;

asm("UCON equ 0F6Dh");


typedef union {
struct {
unsigned :1;
unsigned SUSPND :1;
unsigned RESUME :1;
unsigned USBEN :1;
unsigned PKTDIS :1;
unsigned SE0 :1;
unsigned PPBRST :1;
};
} UCONbits_t;
extern volatile UCONbits_t UCONbits @ 0xF6D;

# 697
extern volatile unsigned char UADDR @ 0xF6E;

asm("UADDR equ 0F6Eh");


typedef union {
struct {
unsigned ADDR :7;
};
struct {
unsigned ADDR0 :1;
unsigned ADDR1 :1;
unsigned ADDR2 :1;
unsigned ADDR3 :1;
unsigned ADDR4 :1;
unsigned ADDR5 :1;
unsigned ADDR6 :1;
};
} UADDRbits_t;
extern volatile UADDRbits_t UADDRbits @ 0xF6E;

# 761
extern volatile unsigned char UCFG @ 0xF6F;

asm("UCFG equ 0F6Fh");


typedef union {
struct {
unsigned PPB :2;
unsigned FSEN :1;
unsigned UTRDIS :1;
unsigned UPUEN :1;
unsigned :1;
unsigned UOEMON :1;
unsigned UTEYE :1;
};
struct {
unsigned PPB0 :1;
unsigned PPB1 :1;
};
struct {
unsigned UPP0 :1;
unsigned UPP1 :1;
};
} UCFGbits_t;
extern volatile UCFGbits_t UCFGbits @ 0xF6F;

# 840
extern volatile unsigned char UEP0 @ 0xF70;

asm("UEP0 equ 0F70h");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EP0STALL :1;
unsigned EP0INEN :1;
unsigned EP0OUTEN :1;
unsigned EP0CONDIS :1;
unsigned EP0HSHK :1;
};
struct {
unsigned EPSTALL0 :1;
unsigned EPINEN0 :1;
unsigned EPOUTEN0 :1;
unsigned EPCONDIS0 :1;
unsigned EPHSHK0 :1;
};
} UEP0bits_t;
extern volatile UEP0bits_t UEP0bits @ 0xF70;

# 948
extern volatile unsigned char UEP1 @ 0xF71;

asm("UEP1 equ 0F71h");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EP1STALL :1;
unsigned EP1INEN :1;
unsigned EP1OUTEN :1;
unsigned EP1CONDIS :1;
unsigned EP1HSHK :1;
};
struct {
unsigned EPSTALL1 :1;
unsigned EPINEN1 :1;
unsigned EPOUTEN1 :1;
unsigned EPCONDIS1 :1;
unsigned EPHSHK1 :1;
};
} UEP1bits_t;
extern volatile UEP1bits_t UEP1bits @ 0xF71;

# 1056
extern volatile unsigned char UEP2 @ 0xF72;

asm("UEP2 equ 0F72h");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EP2STALL :1;
unsigned EP2INEN :1;
unsigned EP2OUTEN :1;
unsigned EP2CONDIS :1;
unsigned EP2HSHK :1;
};
struct {
unsigned EPSTALL2 :1;
unsigned EPINEN2 :1;
unsigned EPOUTEN2 :1;
unsigned EPCONDIS2 :1;
unsigned EPHSHK2 :1;
};
} UEP2bits_t;
extern volatile UEP2bits_t UEP2bits @ 0xF72;

# 1164
extern volatile unsigned char UEP3 @ 0xF73;

asm("UEP3 equ 0F73h");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EP3STALL :1;
unsigned EP3INEN :1;
unsigned EP3OUTEN :1;
unsigned EP3CONDIS :1;
unsigned EP3HSHK :1;
};
struct {
unsigned EPSTALL3 :1;
unsigned EPINEN3 :1;
unsigned EPOUTEN3 :1;
unsigned EPCONDIS3 :1;
unsigned EPHSHK3 :1;
};
} UEP3bits_t;
extern volatile UEP3bits_t UEP3bits @ 0xF73;

# 1272
extern volatile unsigned char UEP4 @ 0xF74;

asm("UEP4 equ 0F74h");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EP4STALL :1;
unsigned EP4INEN :1;
unsigned EP4OUTEN :1;
unsigned EP4CONDIS :1;
unsigned EP4HSHK :1;
};
struct {
unsigned EPSTALL4 :1;
unsigned EPINEN4 :1;
unsigned EPOUTEN4 :1;
unsigned EPCONDIS4 :1;
unsigned EPHSHK4 :1;
};
} UEP4bits_t;
extern volatile UEP4bits_t UEP4bits @ 0xF74;

# 1380
extern volatile unsigned char UEP5 @ 0xF75;

asm("UEP5 equ 0F75h");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EP5STALL :1;
unsigned EP5INEN :1;
unsigned EP5OUTEN :1;
unsigned EP5CONDIS :1;
unsigned EP5HSHK :1;
};
struct {
unsigned EPSTALL5 :1;
unsigned EPINEN5 :1;
unsigned EPOUTEN5 :1;
unsigned EPCONDIS5 :1;
unsigned EPHSHK5 :1;
};
} UEP5bits_t;
extern volatile UEP5bits_t UEP5bits @ 0xF75;

# 1488
extern volatile unsigned char UEP6 @ 0xF76;

asm("UEP6 equ 0F76h");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EP6STALL :1;
unsigned EP6INEN :1;
unsigned EP6OUTEN :1;
unsigned EP6CONDIS :1;
unsigned EP6HSHK :1;
};
struct {
unsigned EPSTALL6 :1;
unsigned EPINEN6 :1;
unsigned EPOUTEN6 :1;
unsigned EPCONDIS6 :1;
unsigned EPHSHK6 :1;
};
} UEP6bits_t;
extern volatile UEP6bits_t UEP6bits @ 0xF76;

# 1596
extern volatile unsigned char UEP7 @ 0xF77;

asm("UEP7 equ 0F77h");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EP7STALL :1;
unsigned EP7INEN :1;
unsigned EP7OUTEN :1;
unsigned EP7CONDIS :1;
unsigned EP7HSHK :1;
};
struct {
unsigned EPSTALL7 :1;
unsigned EPINEN7 :1;
unsigned EPOUTEN7 :1;
unsigned EPCONDIS7 :1;
unsigned EPHSHK7 :1;
};
} UEP7bits_t;
extern volatile UEP7bits_t UEP7bits @ 0xF77;

# 1704
extern volatile unsigned char UEP8 @ 0xF78;

asm("UEP8 equ 0F78h");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EPSTALL8 :1;
unsigned EPINEN8 :1;
unsigned EPOUTEN8 :1;
unsigned EPCONDIS8 :1;
unsigned EPHSHK8 :1;
};
} UEP8bits_t;
extern volatile UEP8bits_t UEP8bits @ 0xF78;

# 1780
extern volatile unsigned char UEP9 @ 0xF79;

asm("UEP9 equ 0F79h");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EPSTALL9 :1;
unsigned EPINEN9 :1;
unsigned EPOUTEN9 :1;
unsigned EPCONDIS9 :1;
unsigned EPHSHK9 :1;
};
} UEP9bits_t;
extern volatile UEP9bits_t UEP9bits @ 0xF79;

# 1856
extern volatile unsigned char UEP10 @ 0xF7A;

asm("UEP10 equ 0F7Ah");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EPSTALL10 :1;
unsigned EPINEN10 :1;
unsigned EPOUTEN10 :1;
unsigned EPCONDIS10 :1;
unsigned EPHSHK10 :1;
};
} UEP10bits_t;
extern volatile UEP10bits_t UEP10bits @ 0xF7A;

# 1932
extern volatile unsigned char UEP11 @ 0xF7B;

asm("UEP11 equ 0F7Bh");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EPSTALL11 :1;
unsigned EPINEN11 :1;
unsigned EPOUTEN11 :1;
unsigned EPCONDIS11 :1;
unsigned EPHSHK11 :1;
};
} UEP11bits_t;
extern volatile UEP11bits_t UEP11bits @ 0xF7B;

# 2008
extern volatile unsigned char UEP12 @ 0xF7C;

asm("UEP12 equ 0F7Ch");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EPSTALL12 :1;
unsigned EPINEN12 :1;
unsigned EPOUTEN12 :1;
unsigned EPCONDIS12 :1;
unsigned EPHSHK12 :1;
};
} UEP12bits_t;
extern volatile UEP12bits_t UEP12bits @ 0xF7C;

# 2084
extern volatile unsigned char UEP13 @ 0xF7D;

asm("UEP13 equ 0F7Dh");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EPSTALL13 :1;
unsigned EPINEN13 :1;
unsigned EPOUTEN13 :1;
unsigned EPCONDIS13 :1;
unsigned EPHSHK13 :1;
};
} UEP13bits_t;
extern volatile UEP13bits_t UEP13bits @ 0xF7D;

# 2160
extern volatile unsigned char UEP14 @ 0xF7E;

asm("UEP14 equ 0F7Eh");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EPSTALL14 :1;
unsigned EPINEN14 :1;
unsigned EPOUTEN14 :1;
unsigned EPCONDIS14 :1;
unsigned EPHSHK14 :1;
};
} UEP14bits_t;
extern volatile UEP14bits_t UEP14bits @ 0xF7E;

# 2236
extern volatile unsigned char UEP15 @ 0xF7F;

asm("UEP15 equ 0F7Fh");


typedef union {
struct {
unsigned EPSTALL :1;
unsigned EPINEN :1;
unsigned EPOUTEN :1;
unsigned EPCONDIS :1;
unsigned EPHSHK :1;
};
struct {
unsigned EPSTALL15 :1;
unsigned EPINEN15 :1;
unsigned EPOUTEN15 :1;
unsigned EPCONDIS15 :1;
unsigned EPHSHK15 :1;
};
} UEP15bits_t;
extern volatile UEP15bits_t UEP15bits @ 0xF7F;

# 2312
extern volatile unsigned char PORTA @ 0xF80;

asm("PORTA equ 0F80h");


typedef union {
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
};
struct {
unsigned AN0 :1;
unsigned AN1 :1;
unsigned AN2 :1;
unsigned AN3 :1;
unsigned T0CKI :1;
unsigned AN4 :1;
unsigned OSC2 :1;
};
struct {
unsigned :2;
unsigned VREFM :1;
unsigned VREFP :1;
unsigned :1;
unsigned LVDIN :1;
};
struct {
unsigned :5;
unsigned HLVDIN :1;
};
struct {
unsigned ULPWUIN :1;
};
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits @ 0xF80;

# 2451
extern volatile unsigned char PORTB @ 0xF81;

asm("PORTB equ 0F81h");


typedef union {
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
struct {
unsigned INT0 :1;
unsigned INT1 :1;
unsigned INT2 :1;
unsigned :2;
unsigned PGM :1;
unsigned PGC :1;
unsigned PGD :1;
};
struct {
unsigned :3;
unsigned CCP2_PA2 :1;
};
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits @ 0xF81;

# 2561
extern volatile unsigned char PORTC @ 0xF82;

asm("PORTC equ 0F82h");


typedef union {
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
struct {
unsigned T1OSO :1;
unsigned T1OSI :1;
unsigned CCP1 :1;
unsigned :3;
unsigned TX :1;
unsigned RX :1;
};
struct {
unsigned T13CKI :1;
unsigned :1;
unsigned P1A :1;
unsigned :3;
unsigned CK :1;
unsigned DT :1;
};
struct {
unsigned :1;
unsigned CCP2 :1;
unsigned PA1 :1;
};
struct {
unsigned :1;
unsigned PA2 :1;
};
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits @ 0xF82;

# 2703
extern volatile unsigned char PORTD @ 0xF83;

asm("PORTD equ 0F83h");


typedef union {
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;
};
struct {
unsigned SPP0 :1;
unsigned SPP1 :1;
unsigned SPP2 :1;
unsigned SPP3 :1;
unsigned SPP4 :1;
unsigned SPP5 :1;
unsigned SPP6 :1;
unsigned SPP7 :1;
};
struct {
unsigned :7;
unsigned SS2 :1;
};
} PORTDbits_t;
extern volatile PORTDbits_t PORTDbits @ 0xF83;

# 2824
extern volatile unsigned char PORTE @ 0xF84;

asm("PORTE equ 0F84h");


typedef union {
struct {
unsigned RE0 :1;
unsigned RE1 :1;
unsigned RE2 :1;
unsigned RE3 :1;
unsigned :3;
unsigned RDPU :1;
};
struct {
unsigned CK1SPP :1;
unsigned CK2SPP :1;
unsigned OESPP :1;
};
struct {
unsigned PD2 :1;
unsigned PC2 :1;
unsigned CCP10 :1;
unsigned CCP9E :1;
unsigned :3;
unsigned CCP2E :1;
};
struct {
unsigned RDE :1;
unsigned WRE :1;
unsigned CS :1;
unsigned PC3E :1;
unsigned :3;
unsigned PA2E :1;
};
struct {
unsigned :2;
unsigned PB2 :1;
unsigned :4;
unsigned RE7 :1;
};
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits @ 0xF84;

# 2971
extern volatile unsigned char LATA @ 0xF89;

asm("LATA equ 0F89h");


typedef union {
struct {
unsigned LATA0 :1;
unsigned LATA1 :1;
unsigned LATA2 :1;
unsigned LATA3 :1;
unsigned LATA4 :1;
unsigned LATA5 :1;
unsigned LATA6 :1;
};
struct {
unsigned LA0 :1;
unsigned LA1 :1;
unsigned LA2 :1;
unsigned LA3 :1;
unsigned LA4 :1;
unsigned LA5 :1;
unsigned LA6 :1;
};
} LATAbits_t;
extern volatile LATAbits_t LATAbits @ 0xF89;

# 3071
extern volatile unsigned char LATB @ 0xF8A;

asm("LATB equ 0F8Ah");


typedef union {
struct {
unsigned LATB0 :1;
unsigned LATB1 :1;
unsigned LATB2 :1;
unsigned LATB3 :1;
unsigned LATB4 :1;
unsigned LATB5 :1;
unsigned LATB6 :1;
unsigned LATB7 :1;
};
struct {
unsigned LB0 :1;
unsigned LB1 :1;
unsigned LB2 :1;
unsigned LB3 :1;
unsigned LB4 :1;
unsigned LB5 :1;
unsigned LB6 :1;
unsigned LB7 :1;
};
} LATBbits_t;
extern volatile LATBbits_t LATBbits @ 0xF8A;

# 3183
extern volatile unsigned char LATC @ 0xF8B;

asm("LATC equ 0F8Bh");


typedef union {
struct {
unsigned LATC0 :1;
unsigned LATC1 :1;
unsigned LATC2 :1;
unsigned :3;
unsigned LATC6 :1;
unsigned LATC7 :1;
};
struct {
unsigned LC0 :1;
unsigned LC1 :1;
unsigned LC2 :1;
unsigned :3;
unsigned LC6 :1;
unsigned LC7 :1;
};
} LATCbits_t;
extern volatile LATCbits_t LATCbits @ 0xF8B;

# 3261
extern volatile unsigned char LATD @ 0xF8C;

asm("LATD equ 0F8Ch");


typedef union {
struct {
unsigned LATD0 :1;
unsigned LATD1 :1;
unsigned LATD2 :1;
unsigned LATD3 :1;
unsigned LATD4 :1;
unsigned LATD5 :1;
unsigned LATD6 :1;
unsigned LATD7 :1;
};
struct {
unsigned LD0 :1;
unsigned LD1 :1;
unsigned LD2 :1;
unsigned LD3 :1;
unsigned LD4 :1;
unsigned LD5 :1;
unsigned LD6 :1;
unsigned LD7 :1;
};
} LATDbits_t;
extern volatile LATDbits_t LATDbits @ 0xF8C;

# 3373
extern volatile unsigned char LATE @ 0xF8D;

asm("LATE equ 0F8Dh");


typedef union {
struct {
unsigned LATE0 :1;
unsigned LATE1 :1;
unsigned LATE2 :1;
};
struct {
unsigned LE0 :1;
unsigned LE1 :1;
unsigned LE2 :1;
};
} LATEbits_t;
extern volatile LATEbits_t LATEbits @ 0xF8D;

# 3425
extern volatile unsigned char TRISA @ 0xF92;

asm("TRISA equ 0F92h");


extern volatile unsigned char DDRA @ 0xF92;

asm("DDRA equ 0F92h");


typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
unsigned TRISA6 :1;
};
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
};
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits @ 0xF92;

# 3528
typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
unsigned TRISA6 :1;
};
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
};
} DDRAbits_t;
extern volatile DDRAbits_t DDRAbits @ 0xF92;

# 3623
extern volatile unsigned char TRISB @ 0xF93;

asm("TRISB equ 0F93h");


extern volatile unsigned char DDRB @ 0xF93;

asm("DDRB equ 0F93h");


typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits @ 0xF93;

# 3738
typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} DDRBbits_t;
extern volatile DDRBbits_t DDRBbits @ 0xF93;

# 3845
extern volatile unsigned char TRISC @ 0xF94;

asm("TRISC equ 0F94h");


extern volatile unsigned char DDRC @ 0xF94;

asm("DDRC equ 0F94h");


typedef union {
struct {
unsigned TRISC0 :1;
unsigned TRISC1 :1;
unsigned TRISC2 :1;
unsigned :3;
unsigned TRISC6 :1;
unsigned TRISC7 :1;
};
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned :3;
unsigned RC6 :1;
unsigned RC7 :1;
};
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits @ 0xF94;

# 3926
typedef union {
struct {
unsigned TRISC0 :1;
unsigned TRISC1 :1;
unsigned TRISC2 :1;
unsigned :3;
unsigned TRISC6 :1;
unsigned TRISC7 :1;
};
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned :3;
unsigned RC6 :1;
unsigned RC7 :1;
};
} DDRCbits_t;
extern volatile DDRCbits_t DDRCbits @ 0xF94;

# 3999
extern volatile unsigned char TRISD @ 0xF95;

asm("TRISD equ 0F95h");


extern volatile unsigned char DDRD @ 0xF95;

asm("DDRD equ 0F95h");


typedef union {
struct {
unsigned TRISD0 :1;
unsigned TRISD1 :1;
unsigned TRISD2 :1;
unsigned TRISD3 :1;
unsigned TRISD4 :1;
unsigned TRISD5 :1;
unsigned TRISD6 :1;
unsigned TRISD7 :1;
};
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;
};
} TRISDbits_t;
extern volatile TRISDbits_t TRISDbits @ 0xF95;

# 4114
typedef union {
struct {
unsigned TRISD0 :1;
unsigned TRISD1 :1;
unsigned TRISD2 :1;
unsigned TRISD3 :1;
unsigned TRISD4 :1;
unsigned TRISD5 :1;
unsigned TRISD6 :1;
unsigned TRISD7 :1;
};
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;
};
} DDRDbits_t;
extern volatile DDRDbits_t DDRDbits @ 0xF95;

# 4221
extern volatile unsigned char TRISE @ 0xF96;

asm("TRISE equ 0F96h");


extern volatile unsigned char DDRE @ 0xF96;

asm("DDRE equ 0F96h");


typedef union {
struct {
unsigned TRISE0 :1;
unsigned TRISE1 :1;
unsigned TRISE2 :1;
};
struct {
unsigned RE0 :1;
unsigned RE1 :1;
unsigned RE2 :1;
};
} TRISEbits_t;
extern volatile TRISEbits_t TRISEbits @ 0xF96;

# 4276
typedef union {
struct {
unsigned TRISE0 :1;
unsigned TRISE1 :1;
unsigned TRISE2 :1;
};
struct {
unsigned RE0 :1;
unsigned RE1 :1;
unsigned RE2 :1;
};
} DDREbits_t;
extern volatile DDREbits_t DDREbits @ 0xF96;

# 4323
extern volatile unsigned char OSCTUNE @ 0xF9B;

asm("OSCTUNE equ 0F9Bh");


typedef union {
struct {
unsigned TUN :5;
unsigned :2;
unsigned INTSRC :1;
};
struct {
unsigned TUN0 :1;
unsigned TUN1 :1;
unsigned TUN2 :1;
unsigned TUN3 :1;
unsigned TUN4 :1;
};
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits @ 0xF9B;

# 4382
extern volatile unsigned char PIE1 @ 0xF9D;

asm("PIE1 equ 0F9Dh");


typedef union {
struct {
unsigned TMR1IE :1;
unsigned TMR2IE :1;
unsigned CCP1IE :1;
unsigned SSPIE :1;
unsigned TXIE :1;
unsigned RCIE :1;
unsigned ADIE :1;
unsigned SPPIE :1;
};
struct {
unsigned :4;
unsigned TX1IE :1;
unsigned RC1IE :1;
unsigned :1;
unsigned PSPIE :1;
};
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits @ 0xF9D;

# 4466
extern volatile unsigned char PIR1 @ 0xF9E;

asm("PIR1 equ 0F9Eh");


typedef union {
struct {
unsigned TMR1IF :1;
unsigned TMR2IF :1;
unsigned CCP1IF :1;
unsigned SSPIF :1;
unsigned TXIF :1;
unsigned RCIF :1;
unsigned ADIF :1;
unsigned SPPIF :1;
};
struct {
unsigned :4;
unsigned TX1IF :1;
unsigned RC1IF :1;
unsigned :1;
unsigned PSPIF :1;
};
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits @ 0xF9E;

# 4550
extern volatile unsigned char IPR1 @ 0xF9F;

asm("IPR1 equ 0F9Fh");


typedef union {
struct {
unsigned TMR1IP :1;
unsigned TMR2IP :1;
unsigned CCP1IP :1;
unsigned SSPIP :1;
unsigned TXIP :1;
unsigned RCIP :1;
unsigned ADIP :1;
unsigned SPPIP :1;
};
struct {
unsigned :4;
unsigned TX1IP :1;
unsigned RC1IP :1;
unsigned :1;
unsigned PSPIP :1;
};
} IPR1bits_t;
extern volatile IPR1bits_t IPR1bits @ 0xF9F;

# 4634
extern volatile unsigned char PIE2 @ 0xFA0;

asm("PIE2 equ 0FA0h");


typedef union {
struct {
unsigned CCP2IE :1;
unsigned TMR3IE :1;
unsigned HLVDIE :1;
unsigned BCLIE :1;
unsigned EEIE :1;
unsigned USBIE :1;
unsigned CMIE :1;
unsigned OSCFIE :1;
};
struct {
unsigned :2;
unsigned LVDIE :1;
};
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits @ 0xFA0;

# 4705
extern volatile unsigned char PIR2 @ 0xFA1;

asm("PIR2 equ 0FA1h");


typedef union {
struct {
unsigned CCP2IF :1;
unsigned TMR3IF :1;
unsigned HLVDIF :1;
unsigned BCLIF :1;
unsigned EEIF :1;
unsigned USBIF :1;
unsigned CMIF :1;
unsigned OSCFIF :1;
};
struct {
unsigned :2;
unsigned LVDIF :1;
};
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits @ 0xFA1;

# 4776
extern volatile unsigned char IPR2 @ 0xFA2;

asm("IPR2 equ 0FA2h");


typedef union {
struct {
unsigned CCP2IP :1;
unsigned TMR3IP :1;
unsigned HLVDIP :1;
unsigned BCLIP :1;
unsigned EEIP :1;
unsigned USBIP :1;
unsigned CMIP :1;
unsigned OSCFIP :1;
};
struct {
unsigned :2;
unsigned LVDIP :1;
};
} IPR2bits_t;
extern volatile IPR2bits_t IPR2bits @ 0xFA2;

# 4847
extern volatile unsigned char EECON1 @ 0xFA6;

asm("EECON1 equ 0FA6h");


typedef union {
struct {
unsigned RD :1;
unsigned WR :1;
unsigned WREN :1;
unsigned WRERR :1;
unsigned FREE :1;
unsigned :1;
unsigned CFGS :1;
unsigned EEPGD :1;
};
struct {
unsigned :6;
unsigned EEFS :1;
};
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits @ 0xFA6;

# 4913
extern volatile unsigned char EECON2 @ 0xFA7;

asm("EECON2 equ 0FA7h");




extern volatile unsigned char EEDATA @ 0xFA8;

asm("EEDATA equ 0FA8h");




extern volatile unsigned char EEADR @ 0xFA9;

asm("EEADR equ 0FA9h");




extern volatile unsigned char RCSTA @ 0xFAB;

asm("RCSTA equ 0FABh");


extern volatile unsigned char RCSTA1 @ 0xFAB;

asm("RCSTA1 equ 0FABh");


typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned :3;
unsigned ADEN :1;
};
struct {
unsigned :5;
unsigned SRENA :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
struct {
unsigned :6;
unsigned RC9 :1;
};
struct {
unsigned RCD8 :1;
};
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits @ 0xFAB;

# 5043
typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned :3;
unsigned ADEN :1;
};
struct {
unsigned :5;
unsigned SRENA :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
struct {
unsigned :6;
unsigned RC9 :1;
};
struct {
unsigned RCD8 :1;
};
} RCSTA1bits_t;
extern volatile RCSTA1bits_t RCSTA1bits @ 0xFAB;

# 5144
extern volatile unsigned char TXSTA @ 0xFAC;

asm("TXSTA equ 0FACh");


extern volatile unsigned char TXSTA1 @ 0xFAC;

asm("TXSTA1 equ 0FACh");


typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned SENDB :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned TX9D1 :1;
unsigned TRMT1 :1;
unsigned BRGH1 :1;
unsigned SENDB1 :1;
unsigned SYNC1 :1;
unsigned TXEN1 :1;
unsigned TX91 :1;
unsigned CSRC1 :1;
};
struct {
unsigned :6;
unsigned TX8_9 :1;
};
struct {
unsigned TXD8 :1;
};
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits @ 0xFAC;

# 5276
typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned SENDB :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned TX9D1 :1;
unsigned TRMT1 :1;
unsigned BRGH1 :1;
unsigned SENDB1 :1;
unsigned SYNC1 :1;
unsigned TXEN1 :1;
unsigned TX91 :1;
unsigned CSRC1 :1;
};
struct {
unsigned :6;
unsigned TX8_9 :1;
};
struct {
unsigned TXD8 :1;
};
} TXSTA1bits_t;
extern volatile TXSTA1bits_t TXSTA1bits @ 0xFAC;

# 5400
extern volatile unsigned char TXREG @ 0xFAD;

asm("TXREG equ 0FADh");


extern volatile unsigned char TXREG1 @ 0xFAD;

asm("TXREG1 equ 0FADh");




extern volatile unsigned char RCREG @ 0xFAE;

asm("RCREG equ 0FAEh");


extern volatile unsigned char RCREG1 @ 0xFAE;

asm("RCREG1 equ 0FAEh");




extern volatile unsigned char SPBRG @ 0xFAF;

asm("SPBRG equ 0FAFh");


extern volatile unsigned char SPBRG1 @ 0xFAF;

asm("SPBRG1 equ 0FAFh");




extern volatile unsigned char SPBRGH @ 0xFB0;

asm("SPBRGH equ 0FB0h");




extern volatile unsigned char T3CON @ 0xFB1;

asm("T3CON equ 0FB1h");


typedef union {
struct {
unsigned :2;
unsigned NOT_T3SYNC :1;
};
struct {
unsigned TMR3ON :1;
unsigned TMR3CS :1;
unsigned nT3SYNC :1;
unsigned T3CCP1 :1;
unsigned T3CKPS :2;
unsigned T3CCP2 :1;
unsigned RD16 :1;
};
struct {
unsigned :2;
unsigned T3SYNC :1;
unsigned :1;
unsigned T3CKPS0 :1;
unsigned T3CKPS1 :1;
};
struct {
unsigned :2;
unsigned T3NSYNC :1;
};
struct {
unsigned :3;
unsigned SOSCEN3 :1;
unsigned :3;
unsigned RD163 :1;
};
struct {
unsigned :7;
unsigned T3RD16 :1;
};
} T3CONbits_t;
extern volatile T3CONbits_t T3CONbits @ 0xFB1;

# 5564
extern volatile unsigned short TMR3 @ 0xFB2;

asm("TMR3 equ 0FB2h");




extern volatile unsigned char TMR3L @ 0xFB2;

asm("TMR3L equ 0FB2h");




extern volatile unsigned char TMR3H @ 0xFB3;

asm("TMR3H equ 0FB3h");




extern volatile unsigned char CMCON @ 0xFB4;

asm("CMCON equ 0FB4h");


typedef union {
struct {
unsigned CM :3;
unsigned CIS :1;
unsigned C1INV :1;
unsigned C2INV :1;
unsigned C1OUT :1;
unsigned C2OUT :1;
};
struct {
unsigned CM0 :1;
unsigned CM1 :1;
unsigned CM2 :1;
};
struct {
unsigned CMEN0 :1;
unsigned CMEN1 :1;
unsigned CMEN2 :1;
};
} CMCONbits_t;
extern volatile CMCONbits_t CMCONbits @ 0xFB4;

# 5675
extern volatile unsigned char CVRCON @ 0xFB5;

asm("CVRCON equ 0FB5h");


typedef union {
struct {
unsigned CVR :4;
unsigned CVRSS :1;
unsigned CVRR :1;
unsigned CVROE :1;
unsigned CVREN :1;
};
struct {
unsigned CVR0 :1;
unsigned CVR1 :1;
unsigned CVR2 :1;
unsigned CVR3 :1;
unsigned CVREF :1;
};
struct {
unsigned :6;
unsigned CVROEN :1;
};
} CVRCONbits_t;
extern volatile CVRCONbits_t CVRCONbits @ 0xFB5;

# 5760
extern volatile unsigned char ECCP1AS @ 0xFB6;

asm("ECCP1AS equ 0FB6h");


extern volatile unsigned char CCP1AS @ 0xFB6;

asm("CCP1AS equ 0FB6h");


typedef union {
struct {
unsigned PSSBD :2;
unsigned PSSAC :2;
unsigned ECCPAS :3;
unsigned ECCPASE :1;
};
struct {
unsigned PSSBD0 :1;
unsigned PSSBD1 :1;
unsigned PSSAC0 :1;
unsigned PSSAC1 :1;
unsigned ECCPAS0 :1;
unsigned ECCPAS1 :1;
unsigned ECCPAS2 :1;
};
} ECCP1ASbits_t;
extern volatile ECCP1ASbits_t ECCP1ASbits @ 0xFB6;

# 5845
typedef union {
struct {
unsigned PSSBD :2;
unsigned PSSAC :2;
unsigned ECCPAS :3;
unsigned ECCPASE :1;
};
struct {
unsigned PSSBD0 :1;
unsigned PSSBD1 :1;
unsigned PSSAC0 :1;
unsigned PSSAC1 :1;
unsigned ECCPAS0 :1;
unsigned ECCPAS1 :1;
unsigned ECCPAS2 :1;
};
} CCP1ASbits_t;
extern volatile CCP1ASbits_t CCP1ASbits @ 0xFB6;

# 5922
extern volatile unsigned char ECCP1DEL @ 0xFB7;

asm("ECCP1DEL equ 0FB7h");


extern volatile unsigned char CCP1DEL @ 0xFB7;

asm("CCP1DEL equ 0FB7h");


typedef union {
struct {
unsigned PDC :7;
unsigned PRSEN :1;
};
struct {
unsigned PDC0 :1;
unsigned PDC1 :1;
unsigned PDC2 :1;
unsigned PDC3 :1;
unsigned PDC4 :1;
unsigned PDC5 :1;
unsigned PDC6 :1;
};
} ECCP1DELbits_t;
extern volatile ECCP1DELbits_t ECCP1DELbits @ 0xFB7;

# 5995
typedef union {
struct {
unsigned PDC :7;
unsigned PRSEN :1;
};
struct {
unsigned PDC0 :1;
unsigned PDC1 :1;
unsigned PDC2 :1;
unsigned PDC3 :1;
unsigned PDC4 :1;
unsigned PDC5 :1;
unsigned PDC6 :1;
};
} CCP1DELbits_t;
extern volatile CCP1DELbits_t CCP1DELbits @ 0xFB7;

# 6060
extern volatile unsigned char BAUDCON @ 0xFB8;

asm("BAUDCON equ 0FB8h");


extern volatile unsigned char BAUDCTL @ 0xFB8;

asm("BAUDCTL equ 0FB8h");


typedef union {
struct {
unsigned ABDEN :1;
unsigned WUE :1;
unsigned :1;
unsigned BRG16 :1;
unsigned TXCKP :1;
unsigned RXDTP :1;
unsigned RCIDL :1;
unsigned ABDOVF :1;
};
struct {
unsigned :4;
unsigned SCKP :1;
unsigned :1;
unsigned RCMT :1;
};
struct {
unsigned :5;
unsigned RXCKP :1;
};
struct {
unsigned :1;
unsigned W4E :1;
};
} BAUDCONbits_t;
extern volatile BAUDCONbits_t BAUDCONbits @ 0xFB8;

# 6154
typedef union {
struct {
unsigned ABDEN :1;
unsigned WUE :1;
unsigned :1;
unsigned BRG16 :1;
unsigned TXCKP :1;
unsigned RXDTP :1;
unsigned RCIDL :1;
unsigned ABDOVF :1;
};
struct {
unsigned :4;
unsigned SCKP :1;
unsigned :1;
unsigned RCMT :1;
};
struct {
unsigned :5;
unsigned RXCKP :1;
};
struct {
unsigned :1;
unsigned W4E :1;
};
} BAUDCTLbits_t;
extern volatile BAUDCTLbits_t BAUDCTLbits @ 0xFB8;

# 6240
extern volatile unsigned char CCP2CON @ 0xFBA;

asm("CCP2CON equ 0FBAh");


typedef union {
struct {
unsigned CCP2M :4;
unsigned DC2B :2;
};
struct {
unsigned CCP2M0 :1;
unsigned CCP2M1 :1;
unsigned CCP2M2 :1;
unsigned CCP2M3 :1;
unsigned DC2B0 :1;
unsigned DC2B1 :1;
};
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits @ 0xFBA;

# 6304
extern volatile unsigned short CCPR2 @ 0xFBB;

asm("CCPR2 equ 0FBBh");




extern volatile unsigned char CCPR2L @ 0xFBB;

asm("CCPR2L equ 0FBBh");




extern volatile unsigned char CCPR2H @ 0xFBC;

asm("CCPR2H equ 0FBCh");




extern volatile unsigned char CCP1CON @ 0xFBD;

asm("CCP1CON equ 0FBDh");


extern volatile unsigned char ECCP1CON @ 0xFBD;

asm("ECCP1CON equ 0FBDh");


typedef union {
struct {
unsigned CCP1M :4;
unsigned DC1B :2;
unsigned P1M :2;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
unsigned DC1B0 :1;
unsigned DC1B1 :1;
unsigned P1M0 :1;
unsigned P1M1 :1;
};
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits @ 0xFBD;

# 6410
typedef union {
struct {
unsigned CCP1M :4;
unsigned DC1B :2;
unsigned P1M :2;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
unsigned DC1B0 :1;
unsigned DC1B1 :1;
unsigned P1M0 :1;
unsigned P1M1 :1;
};
} ECCP1CONbits_t;
extern volatile ECCP1CONbits_t ECCP1CONbits @ 0xFBD;

# 6487
extern volatile unsigned short CCPR1 @ 0xFBE;

asm("CCPR1 equ 0FBEh");




extern volatile unsigned char CCPR1L @ 0xFBE;

asm("CCPR1L equ 0FBEh");




extern volatile unsigned char CCPR1H @ 0xFBF;

asm("CCPR1H equ 0FBFh");




extern volatile unsigned char ADCON2 @ 0xFC0;

asm("ADCON2 equ 0FC0h");


typedef union {
struct {
unsigned ADCS :3;
unsigned ACQT :3;
unsigned :1;
unsigned ADFM :1;
};
struct {
unsigned ADCS0 :1;
unsigned ADCS1 :1;
unsigned ADCS2 :1;
unsigned ACQT0 :1;
unsigned ACQT1 :1;
unsigned ACQT2 :1;
};
} ADCON2bits_t;
extern volatile ADCON2bits_t ADCON2bits @ 0xFC0;

# 6579
extern volatile unsigned char ADCON1 @ 0xFC1;

asm("ADCON1 equ 0FC1h");


typedef union {
struct {
unsigned PCFG :4;
unsigned VCFG :2;
};
struct {
unsigned PCFG0 :1;
unsigned PCFG1 :1;
unsigned PCFG2 :1;
unsigned PCFG3 :1;
unsigned VCFG0 :1;
unsigned VCFG1 :1;
};
struct {
unsigned :3;
unsigned CHSN3 :1;
unsigned VCFG01 :1;
unsigned VCFG11 :1;
};
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits @ 0xFC1;

# 6664
extern volatile unsigned char ADCON0 @ 0xFC2;

asm("ADCON0 equ 0FC2h");


typedef union {
struct {
unsigned :1;
unsigned GO_NOT_DONE :1;
};
struct {
unsigned ADON :1;
unsigned GO_nDONE :1;
unsigned CHS :4;
};
struct {
unsigned :1;
unsigned GO_DONE :1;
unsigned CHS0 :1;
unsigned CHS1 :1;
unsigned CHS2 :1;
unsigned CHS3 :1;
};
struct {
unsigned :1;
unsigned DONE :1;
};
struct {
unsigned :1;
unsigned GO :1;
};
struct {
unsigned :1;
unsigned NOT_DONE :1;
};
struct {
unsigned :1;
unsigned nDONE :1;
};
struct {
unsigned :1;
unsigned GODONE :1;
};
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits @ 0xFC2;

# 6783
extern volatile unsigned short ADRES @ 0xFC3;

asm("ADRES equ 0FC3h");




extern volatile unsigned char ADRESL @ 0xFC3;

asm("ADRESL equ 0FC3h");




extern volatile unsigned char ADRESH @ 0xFC4;

asm("ADRESH equ 0FC4h");




extern volatile unsigned char SSPCON2 @ 0xFC5;

asm("SSPCON2 equ 0FC5h");


typedef union {
struct {
unsigned SEN :1;
unsigned RSEN :1;
unsigned PEN :1;
unsigned RCEN :1;
unsigned ACKEN :1;
unsigned ACKDT :1;
unsigned ACKSTAT :1;
unsigned GCEN :1;
};
} SSPCON2bits_t;
extern volatile SSPCON2bits_t SSPCON2bits @ 0xFC5;

# 6866
extern volatile unsigned char SSPCON1 @ 0xFC6;

asm("SSPCON1 equ 0FC6h");


typedef union {
struct {
unsigned SSPM :4;
unsigned CKP :1;
unsigned SSPEN :1;
unsigned SSPOV :1;
unsigned WCOL :1;
};
struct {
unsigned SSPM0 :1;
unsigned SSPM1 :1;
unsigned SSPM2 :1;
unsigned SSPM3 :1;
};
} SSPCON1bits_t;
extern volatile SSPCON1bits_t SSPCON1bits @ 0xFC6;

# 6936
extern volatile unsigned char SSPSTAT @ 0xFC7;

asm("SSPSTAT equ 0FC7h");


typedef union {
struct {
unsigned :2;
unsigned R_NOT_W :1;
};
struct {
unsigned :5;
unsigned D_NOT_A :1;
};
struct {
unsigned BF :1;
unsigned UA :1;
unsigned R_nW :1;
unsigned S :1;
unsigned P :1;
unsigned D_nA :1;
unsigned CKE :1;
unsigned SMP :1;
};
struct {
unsigned :2;
unsigned R_W :1;
unsigned :2;
unsigned D_A :1;
};
struct {
unsigned :2;
unsigned I2C_READ :1;
unsigned I2C_START :1;
unsigned I2C_STOP :1;
unsigned I2C_DAT :1;
};
struct {
unsigned :2;
unsigned nW :1;
unsigned :2;
unsigned nA :1;
};
struct {
unsigned :2;
unsigned NOT_WRITE :1;
};
struct {
unsigned :5;
unsigned NOT_ADDRESS :1;
};
struct {
unsigned :2;
unsigned nWRITE :1;
unsigned :2;
unsigned nADDRESS :1;
};
struct {
unsigned :2;
unsigned READ_WRITE :1;
unsigned :2;
unsigned DATA_ADDRESS :1;
};
struct {
unsigned :2;
unsigned R :1;
unsigned :2;
unsigned D :1;
};
struct {
unsigned :2;
unsigned RW :1;
unsigned START :1;
unsigned STOP :1;
unsigned DA :1;
};
struct {
unsigned :2;
unsigned NOT_W :1;
unsigned :2;
unsigned NOT_A :1;
};
} SSPSTATbits_t;
extern volatile SSPSTATbits_t SSPSTATbits @ 0xFC7;

# 7184
extern volatile unsigned char SSPADD @ 0xFC8;

asm("SSPADD equ 0FC8h");




extern volatile unsigned char SSPBUF @ 0xFC9;

asm("SSPBUF equ 0FC9h");




extern volatile unsigned char T2CON @ 0xFCA;

asm("T2CON equ 0FCAh");


typedef union {
struct {
unsigned T2CKPS :2;
unsigned TMR2ON :1;
unsigned TOUTPS :4;
};
struct {
unsigned T2CKPS0 :1;
unsigned T2CKPS1 :1;
unsigned :1;
unsigned T2OUTPS0 :1;
unsigned T2OUTPS1 :1;
unsigned T2OUTPS2 :1;
unsigned T2OUTPS3 :1;
};
struct {
unsigned :3;
unsigned TOUTPS0 :1;
unsigned TOUTPS1 :1;
unsigned TOUTPS2 :1;
unsigned TOUTPS3 :1;
};
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits @ 0xFCA;

# 7296
extern volatile unsigned char PR2 @ 0xFCB;

asm("PR2 equ 0FCBh");


extern volatile unsigned char MEMCON @ 0xFCB;

asm("MEMCON equ 0FCBh");


typedef union {
struct {
unsigned :7;
unsigned EBDIS :1;
};
struct {
unsigned :4;
unsigned WAIT0 :1;
};
struct {
unsigned :5;
unsigned WAIT1 :1;
};
struct {
unsigned WM0 :1;
};
struct {
unsigned :1;
unsigned WM1 :1;
};
} PR2bits_t;
extern volatile PR2bits_t PR2bits @ 0xFCB;

# 7355
typedef union {
struct {
unsigned :7;
unsigned EBDIS :1;
};
struct {
unsigned :4;
unsigned WAIT0 :1;
};
struct {
unsigned :5;
unsigned WAIT1 :1;
};
struct {
unsigned WM0 :1;
};
struct {
unsigned :1;
unsigned WM1 :1;
};
} MEMCONbits_t;
extern volatile MEMCONbits_t MEMCONbits @ 0xFCB;

# 7406
extern volatile unsigned char TMR2 @ 0xFCC;

asm("TMR2 equ 0FCCh");




extern volatile unsigned char T1CON @ 0xFCD;

asm("T1CON equ 0FCDh");


typedef union {
struct {
unsigned :2;
unsigned NOT_T1SYNC :1;
};
struct {
unsigned TMR1ON :1;
unsigned TMR1CS :1;
unsigned nT1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
unsigned T1RUN :1;
unsigned RD16 :1;
};
struct {
unsigned :2;
unsigned T1SYNC :1;
unsigned :1;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
};
struct {
unsigned :3;
unsigned SOSCEN :1;
unsigned :3;
unsigned T1RD16 :1;
};
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits @ 0xFCD;

# 7516
extern volatile unsigned short TMR1 @ 0xFCE;

asm("TMR1 equ 0FCEh");




extern volatile unsigned char TMR1L @ 0xFCE;

asm("TMR1L equ 0FCEh");




extern volatile unsigned char TMR1H @ 0xFCF;

asm("TMR1H equ 0FCFh");




extern volatile unsigned char RCON @ 0xFD0;

asm("RCON equ 0FD0h");


typedef union {
struct {
unsigned NOT_BOR :1;
};
struct {
unsigned :1;
unsigned NOT_POR :1;
};
struct {
unsigned :2;
unsigned NOT_PD :1;
};
struct {
unsigned :3;
unsigned NOT_TO :1;
};
struct {
unsigned :4;
unsigned NOT_RI :1;
};
struct {
unsigned nBOR :1;
unsigned nPOR :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned nRI :1;
unsigned :1;
unsigned SBOREN :1;
unsigned IPEN :1;
};
struct {
unsigned :7;
unsigned NOT_IPEN :1;
};
struct {
unsigned BOR :1;
unsigned POR :1;
unsigned PD :1;
unsigned TO :1;
unsigned RI :1;
unsigned :2;
unsigned nIPEN :1;
};
} RCONbits_t;
extern volatile RCONbits_t RCONbits @ 0xFD0;

# 7686
extern volatile unsigned char WDTCON @ 0xFD1;

asm("WDTCON equ 0FD1h");


typedef union {
struct {
unsigned SWDTEN :1;
};
struct {
unsigned SWDTE :1;
};
} WDTCONbits_t;
extern volatile WDTCONbits_t WDTCONbits @ 0xFD1;

# 7714
extern volatile unsigned char HLVDCON @ 0xFD2;

asm("HLVDCON equ 0FD2h");


extern volatile unsigned char LVDCON @ 0xFD2;

asm("LVDCON equ 0FD2h");


typedef union {
struct {
unsigned HLVDL :4;
unsigned HLVDEN :1;
unsigned IRVST :1;
unsigned :1;
unsigned VDIRMAG :1;
};
struct {
unsigned HLVDL0 :1;
unsigned HLVDL1 :1;
unsigned HLVDL2 :1;
unsigned HLVDL3 :1;
};
struct {
unsigned LVDL0 :1;
unsigned LVDL1 :1;
unsigned LVDL2 :1;
unsigned LVDL3 :1;
unsigned LVDEN :1;
unsigned IVRST :1;
};
struct {
unsigned LVV0 :1;
unsigned LVV1 :1;
unsigned LVV2 :1;
unsigned LVV3 :1;
unsigned :1;
unsigned BGST :1;
};
} HLVDCONbits_t;
extern volatile HLVDCONbits_t HLVDCONbits @ 0xFD2;

# 7853
typedef union {
struct {
unsigned HLVDL :4;
unsigned HLVDEN :1;
unsigned IRVST :1;
unsigned :1;
unsigned VDIRMAG :1;
};
struct {
unsigned HLVDL0 :1;
unsigned HLVDL1 :1;
unsigned HLVDL2 :1;
unsigned HLVDL3 :1;
};
struct {
unsigned LVDL0 :1;
unsigned LVDL1 :1;
unsigned LVDL2 :1;
unsigned LVDL3 :1;
unsigned LVDEN :1;
unsigned IVRST :1;
};
struct {
unsigned LVV0 :1;
unsigned LVV1 :1;
unsigned LVV2 :1;
unsigned LVV3 :1;
unsigned :1;
unsigned BGST :1;
};
} LVDCONbits_t;
extern volatile LVDCONbits_t LVDCONbits @ 0xFD2;

# 7984
extern volatile unsigned char OSCCON @ 0xFD3;

asm("OSCCON equ 0FD3h");


typedef union {
struct {
unsigned SCS :2;
unsigned IOFS :1;
unsigned OSTS :1;
unsigned IRCF :3;
unsigned IDLEN :1;
};
struct {
unsigned SCS0 :1;
unsigned SCS1 :1;
unsigned FLTS :1;
unsigned :1;
unsigned IRCF0 :1;
unsigned IRCF1 :1;
unsigned IRCF2 :1;
};
} OSCCONbits_t;
extern volatile OSCCONbits_t OSCCONbits @ 0xFD3;

# 8067
extern volatile unsigned char T0CON @ 0xFD5;

asm("T0CON equ 0FD5h");


typedef union {
struct {
unsigned T0PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned T08BIT :1;
unsigned TMR0ON :1;
};
struct {
unsigned T0PS0 :1;
unsigned T0PS1 :1;
unsigned T0PS2 :1;
};
} T0CONbits_t;
extern volatile T0CONbits_t T0CONbits @ 0xFD5;

# 8137
extern volatile unsigned short TMR0 @ 0xFD6;

asm("TMR0 equ 0FD6h");




extern volatile unsigned char TMR0L @ 0xFD6;

asm("TMR0L equ 0FD6h");




extern volatile unsigned char TMR0H @ 0xFD7;

asm("TMR0H equ 0FD7h");




extern volatile unsigned char STATUS @ 0xFD8;

asm("STATUS equ 0FD8h");


typedef union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned OV :1;
unsigned N :1;
};
struct {
unsigned CARRY :1;
unsigned :1;
unsigned ZERO :1;
unsigned OVERFLOW :1;
unsigned NEGATIVE :1;
};
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits @ 0xFD8;

# 8229
extern volatile unsigned short FSR2 @ 0xFD9;

asm("FSR2 equ 0FD9h");




extern volatile unsigned char FSR2L @ 0xFD9;

asm("FSR2L equ 0FD9h");




extern volatile unsigned char FSR2H @ 0xFDA;

asm("FSR2H equ 0FDAh");




extern volatile unsigned char PLUSW2 @ 0xFDB;

asm("PLUSW2 equ 0FDBh");




extern volatile unsigned char PREINC2 @ 0xFDC;

asm("PREINC2 equ 0FDCh");




extern volatile unsigned char POSTDEC2 @ 0xFDD;

asm("POSTDEC2 equ 0FDDh");




extern volatile unsigned char POSTINC2 @ 0xFDE;

asm("POSTINC2 equ 0FDEh");




extern volatile unsigned char INDF2 @ 0xFDF;

asm("INDF2 equ 0FDFh");




extern volatile unsigned char BSR @ 0xFE0;

asm("BSR equ 0FE0h");




extern volatile unsigned short FSR1 @ 0xFE1;

asm("FSR1 equ 0FE1h");




extern volatile unsigned char FSR1L @ 0xFE1;

asm("FSR1L equ 0FE1h");




extern volatile unsigned char FSR1H @ 0xFE2;

asm("FSR1H equ 0FE2h");




extern volatile unsigned char PLUSW1 @ 0xFE3;

asm("PLUSW1 equ 0FE3h");




extern volatile unsigned char PREINC1 @ 0xFE4;

asm("PREINC1 equ 0FE4h");




extern volatile unsigned char POSTDEC1 @ 0xFE5;

asm("POSTDEC1 equ 0FE5h");




extern volatile unsigned char POSTINC1 @ 0xFE6;

asm("POSTINC1 equ 0FE6h");




extern volatile unsigned char INDF1 @ 0xFE7;

asm("INDF1 equ 0FE7h");




extern volatile unsigned char WREG @ 0xFE8;

asm("WREG equ 0FE8h");




extern volatile unsigned short FSR0 @ 0xFE9;

asm("FSR0 equ 0FE9h");




extern volatile unsigned char FSR0L @ 0xFE9;

asm("FSR0L equ 0FE9h");




extern volatile unsigned char FSR0H @ 0xFEA;

asm("FSR0H equ 0FEAh");




extern volatile unsigned char PLUSW0 @ 0xFEB;

asm("PLUSW0 equ 0FEBh");




extern volatile unsigned char PREINC0 @ 0xFEC;

asm("PREINC0 equ 0FECh");




extern volatile unsigned char POSTDEC0 @ 0xFED;

asm("POSTDEC0 equ 0FEDh");




extern volatile unsigned char POSTINC0 @ 0xFEE;

asm("POSTINC0 equ 0FEEh");




extern volatile unsigned char INDF0 @ 0xFEF;

asm("INDF0 equ 0FEFh");




extern volatile unsigned char INTCON3 @ 0xFF0;

asm("INTCON3 equ 0FF0h");


typedef union {
struct {
unsigned INT1IF :1;
unsigned INT2IF :1;
unsigned :1;
unsigned INT1IE :1;
unsigned INT2IE :1;
unsigned :1;
unsigned INT1IP :1;
unsigned INT2IP :1;
};
struct {
unsigned INT1F :1;
unsigned INT2F :1;
unsigned :1;
unsigned INT1E :1;
unsigned INT2E :1;
unsigned :1;
unsigned INT1P :1;
unsigned INT2P :1;
};
} INTCON3bits_t;
extern volatile INTCON3bits_t INTCON3bits @ 0xFF0;

# 8503
extern volatile unsigned char INTCON2 @ 0xFF1;

asm("INTCON2 equ 0FF1h");


typedef union {
struct {
unsigned :7;
unsigned NOT_RBPU :1;
};
struct {
unsigned RBIP :1;
unsigned :1;
unsigned TMR0IP :1;
unsigned :1;
unsigned INTEDG2 :1;
unsigned INTEDG1 :1;
unsigned INTEDG0 :1;
unsigned nRBPU :1;
};
struct {
unsigned :2;
unsigned T0IP :1;
unsigned :4;
unsigned RBPU :1;
};
} INTCON2bits_t;
extern volatile INTCON2bits_t INTCON2bits @ 0xFF1;

# 8580
extern volatile unsigned char INTCON @ 0xFF2;

asm("INTCON equ 0FF2h");


typedef union {
struct {
unsigned RBIF :1;
unsigned INT0IF :1;
unsigned TMR0IF :1;
unsigned RBIE :1;
unsigned INT0IE :1;
unsigned TMR0IE :1;
unsigned PEIE_GIEL :1;
unsigned GIE_GIEH :1;
};
struct {
unsigned :1;
unsigned INT0F :1;
unsigned T0IF :1;
unsigned :1;
unsigned INT0E :1;
unsigned T0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned :6;
unsigned GIEL :1;
unsigned GIEH :1;
};
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits @ 0xFF2;

# 8697
extern volatile unsigned short PROD @ 0xFF3;

asm("PROD equ 0FF3h");




extern volatile unsigned char PRODL @ 0xFF3;

asm("PRODL equ 0FF3h");




extern volatile unsigned char PRODH @ 0xFF4;

asm("PRODH equ 0FF4h");




extern volatile unsigned char TABLAT @ 0xFF5;

asm("TABLAT equ 0FF5h");

# 8726
extern volatile unsigned short long TBLPTR @ 0xFF6;


asm("TBLPTR equ 0FF6h");




extern volatile unsigned char TBLPTRL @ 0xFF6;

asm("TBLPTRL equ 0FF6h");




extern volatile unsigned char TBLPTRH @ 0xFF7;

asm("TBLPTRH equ 0FF7h");




extern volatile unsigned char TBLPTRU @ 0xFF8;

asm("TBLPTRU equ 0FF8h");

# 8756
extern volatile unsigned short long PCLAT @ 0xFF9;


asm("PCLAT equ 0FF9h");



extern volatile unsigned short long PC @ 0xFF9;


asm("PC equ 0FF9h");




extern volatile unsigned char PCL @ 0xFF9;

asm("PCL equ 0FF9h");




extern volatile unsigned char PCLATH @ 0xFFA;

asm("PCLATH equ 0FFAh");




extern volatile unsigned char PCLATU @ 0xFFB;

asm("PCLATU equ 0FFBh");




extern volatile unsigned char STKPTR @ 0xFFC;

asm("STKPTR equ 0FFCh");


typedef union {
struct {
unsigned STKPTR :5;
unsigned :1;
unsigned STKUNF :1;
unsigned STKFUL :1;
};
struct {
unsigned STKPTR0 :1;
unsigned STKPTR1 :1;
unsigned STKPTR2 :1;
unsigned STKPTR3 :1;
unsigned STKPTR4 :1;
};
struct {
unsigned :7;
unsigned STKOVF :1;
};
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits @ 0xFFC;

# 8867
extern volatile unsigned short long TOS @ 0xFFD;


asm("TOS equ 0FFDh");




extern volatile unsigned char TOSL @ 0xFFD;

asm("TOSL equ 0FFDh");




extern volatile unsigned char TOSH @ 0xFFE;

asm("TOSH equ 0FFEh");




extern volatile unsigned char TOSU @ 0xFFF;

asm("TOSU equ 0FFFh");

# 8901
extern volatile __bit ABDEN @ (((unsigned) &BAUDCON)*8) + 0;

extern volatile __bit ABDOVF @ (((unsigned) &BAUDCON)*8) + 7;

extern volatile __bit ACKDT @ (((unsigned) &SSPCON2)*8) + 5;

extern volatile __bit ACKEN @ (((unsigned) &SSPCON2)*8) + 4;

extern volatile __bit ACKSTAT @ (((unsigned) &SSPCON2)*8) + 6;

extern volatile __bit ACQT0 @ (((unsigned) &ADCON2)*8) + 3;

extern volatile __bit ACQT1 @ (((unsigned) &ADCON2)*8) + 4;

extern volatile __bit ACQT2 @ (((unsigned) &ADCON2)*8) + 5;

extern volatile __bit ACTVIE @ (((unsigned) &UIE)*8) + 2;

extern volatile __bit ACTVIF @ (((unsigned) &UIR)*8) + 2;

extern volatile __bit ADCS0 @ (((unsigned) &ADCON2)*8) + 0;

extern volatile __bit ADCS1 @ (((unsigned) &ADCON2)*8) + 1;

extern volatile __bit ADCS2 @ (((unsigned) &ADCON2)*8) + 2;

extern volatile __bit ADDEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) ADDR0 @ (((unsigned) &SPPEPS)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) ADDR1 @ (((unsigned) &SPPEPS)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) ADDR2 @ (((unsigned) &SPPEPS)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) ADDR3 @ (((unsigned) &SPPEPS)*8) + 3;

extern volatile __bit ADDR4 @ (((unsigned) &UADDR)*8) + 4;

extern volatile __bit ADDR5 @ (((unsigned) &UADDR)*8) + 5;

extern volatile __bit ADDR6 @ (((unsigned) &UADDR)*8) + 6;

extern volatile __bit ADEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit ADFM @ (((unsigned) &ADCON2)*8) + 7;

extern volatile __bit ADIE @ (((unsigned) &PIE1)*8) + 6;

extern volatile __bit ADIF @ (((unsigned) &PIR1)*8) + 6;

extern volatile __bit ADIP @ (((unsigned) &IPR1)*8) + 6;

extern volatile __bit ADON @ (((unsigned) &ADCON0)*8) + 0;

extern volatile __bit AN0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit AN1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit AN2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit AN3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit AN4 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit BCLIE @ (((unsigned) &PIE2)*8) + 3;

extern volatile __bit BCLIF @ (((unsigned) &PIR2)*8) + 3;

extern volatile __bit BCLIP @ (((unsigned) &IPR2)*8) + 3;

extern volatile __bit BF @ (((unsigned) &SSPSTAT)*8) + 0;

extern volatile __bit BGST @ (((unsigned) &HLVDCON)*8) + 5;

extern volatile __bit BOR @ (((unsigned) &RCON)*8) + 0;

extern volatile __bit BRG16 @ (((unsigned) &BAUDCON)*8) + 3;

extern volatile __bit BRGH @ (((unsigned) &TXSTA)*8) + 2;

extern volatile __bit BRGH1 @ (((unsigned) &TXSTA)*8) + 2;

extern volatile __bit BTOEE @ (((unsigned) &UEIE)*8) + 4;

extern volatile __bit BTOEF @ (((unsigned) &UEIR)*8) + 4;

extern volatile __bit BTSEE @ (((unsigned) &UEIE)*8) + 7;

extern volatile __bit BTSEF @ (((unsigned) &UEIR)*8) + 7;

extern volatile __bit BUSY @ (((unsigned) &SPPEPS)*8) + 4;

extern volatile __bit C1INV @ (((unsigned) &CMCON)*8) + 4;

extern volatile __bit C1OUT @ (((unsigned) &CMCON)*8) + 6;

extern volatile __bit C2INV @ (((unsigned) &CMCON)*8) + 5;

extern volatile __bit C2OUT @ (((unsigned) &CMCON)*8) + 7;

extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;

extern volatile __bit CCP1 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit CCP10 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;

extern volatile __bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;

extern volatile __bit CCP1IP @ (((unsigned) &IPR1)*8) + 2;

extern volatile __bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;

extern volatile __bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;

extern volatile __bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;

extern volatile __bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;

extern volatile __bit CCP2 @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit CCP2E @ (((unsigned) &PORTE)*8) + 7;

extern volatile __bit CCP2IE @ (((unsigned) &PIE2)*8) + 0;

extern volatile __bit CCP2IF @ (((unsigned) &PIR2)*8) + 0;

extern volatile __bit CCP2IP @ (((unsigned) &IPR2)*8) + 0;

extern volatile __bit CCP2M0 @ (((unsigned) &CCP2CON)*8) + 0;

extern volatile __bit CCP2M1 @ (((unsigned) &CCP2CON)*8) + 1;

extern volatile __bit CCP2M2 @ (((unsigned) &CCP2CON)*8) + 2;

extern volatile __bit CCP2M3 @ (((unsigned) &CCP2CON)*8) + 3;

extern volatile __bit CCP2_PA2 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit CCP9E @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit CFGS @ (((unsigned) &EECON1)*8) + 6;

extern volatile __bit CHS0 @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit CHS1 @ (((unsigned) &ADCON0)*8) + 3;

extern volatile __bit CHS2 @ (((unsigned) &ADCON0)*8) + 4;

extern volatile __bit CHS3 @ (((unsigned) &ADCON0)*8) + 5;

extern volatile __bit CHSN3 @ (((unsigned) &ADCON1)*8) + 3;

extern volatile __bit CIS @ (((unsigned) &CMCON)*8) + 3;

extern volatile __bit CK @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit CK1SPP @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit CK2SPP @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit CKE @ (((unsigned) &SSPSTAT)*8) + 6;

extern volatile __bit CKP @ (((unsigned) &SSPCON1)*8) + 4;

extern volatile __bit CLK1EN @ (((unsigned) &SPPCFG)*8) + 4;

extern volatile __bit CLKCFG0 @ (((unsigned) &SPPCFG)*8) + 6;

extern volatile __bit CLKCFG1 @ (((unsigned) &SPPCFG)*8) + 7;

extern volatile __bit CM0 @ (((unsigned) &CMCON)*8) + 0;

extern volatile __bit CM1 @ (((unsigned) &CMCON)*8) + 1;

extern volatile __bit CM2 @ (((unsigned) &CMCON)*8) + 2;

extern volatile __bit CMEN0 @ (((unsigned) &CMCON)*8) + 0;

extern volatile __bit CMEN1 @ (((unsigned) &CMCON)*8) + 1;

extern volatile __bit CMEN2 @ (((unsigned) &CMCON)*8) + 2;

extern volatile __bit CMIE @ (((unsigned) &PIE2)*8) + 6;

extern volatile __bit CMIF @ (((unsigned) &PIR2)*8) + 6;

extern volatile __bit CMIP @ (((unsigned) &IPR2)*8) + 6;

extern volatile __bit CRC16EE @ (((unsigned) &UEIE)*8) + 2;

extern volatile __bit CRC16EF @ (((unsigned) &UEIR)*8) + 2;

extern volatile __bit CRC5EE @ (((unsigned) &UEIE)*8) + 1;

extern volatile __bit CRC5EF @ (((unsigned) &UEIR)*8) + 1;

extern volatile __bit CREN @ (((unsigned) &RCSTA)*8) + 4;

extern volatile __bit CS @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit CSEN @ (((unsigned) &SPPCFG)*8) + 5;

extern volatile __bit CSRC @ (((unsigned) &TXSTA)*8) + 7;

extern volatile __bit CSRC1 @ (((unsigned) &TXSTA)*8) + 7;

extern volatile __bit CVR0 @ (((unsigned) &CVRCON)*8) + 0;

extern volatile __bit CVR1 @ (((unsigned) &CVRCON)*8) + 1;

extern volatile __bit CVR2 @ (((unsigned) &CVRCON)*8) + 2;

extern volatile __bit CVR3 @ (((unsigned) &CVRCON)*8) + 3;

extern volatile __bit CVREF @ (((unsigned) &CVRCON)*8) + 4;

extern volatile __bit CVREN @ (((unsigned) &CVRCON)*8) + 7;

extern volatile __bit CVROE @ (((unsigned) &CVRCON)*8) + 6;

extern volatile __bit CVROEN @ (((unsigned) &CVRCON)*8) + 6;

extern volatile __bit CVRR @ (((unsigned) &CVRCON)*8) + 5;

extern volatile __bit CVRSS @ (((unsigned) &CVRCON)*8) + 4;

extern volatile __bit DA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit DATA_ADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;

extern volatile __bit DC1B0 @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit DC1B1 @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit DC2B0 @ (((unsigned) &CCP2CON)*8) + 4;

extern volatile __bit DC2B1 @ (((unsigned) &CCP2CON)*8) + 5;

extern volatile __bit DFN8EE @ (((unsigned) &UEIE)*8) + 3;

extern volatile __bit DFN8EF @ (((unsigned) &UEIR)*8) + 3;

extern volatile __bit DIR @ (((unsigned) &USTAT)*8) + 2;

extern volatile __bit DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit DT @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit D_A @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit D_NOT_A @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit D_nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit EBDIS @ (((unsigned) &PR2)*8) + 7;

extern volatile __bit ECCPAS0 @ (((unsigned) &ECCP1AS)*8) + 4;

extern volatile __bit ECCPAS1 @ (((unsigned) &ECCP1AS)*8) + 5;

extern volatile __bit ECCPAS2 @ (((unsigned) &ECCP1AS)*8) + 6;

extern volatile __bit ECCPASE @ (((unsigned) &ECCP1AS)*8) + 7;

extern volatile __bit EEFS @ (((unsigned) &EECON1)*8) + 6;

extern volatile __bit EEIE @ (((unsigned) &PIE2)*8) + 4;

extern volatile __bit EEIF @ (((unsigned) &PIR2)*8) + 4;

extern volatile __bit EEIP @ (((unsigned) &IPR2)*8) + 4;

extern volatile __bit EEPGD @ (((unsigned) &EECON1)*8) + 7;

extern volatile __bit ENDP0 @ (((unsigned) &USTAT)*8) + 3;

extern volatile __bit ENDP1 @ (((unsigned) &USTAT)*8) + 4;

extern volatile __bit ENDP2 @ (((unsigned) &USTAT)*8) + 5;

extern volatile __bit ENDP3 @ (((unsigned) &USTAT)*8) + 6;

extern volatile __bit EP0CONDIS @ (((unsigned) &UEP0)*8) + 3;

extern volatile __bit EP0HSHK @ (((unsigned) &UEP0)*8) + 4;

extern volatile __bit EP0INEN @ (((unsigned) &UEP0)*8) + 1;

extern volatile __bit EP0OUTEN @ (((unsigned) &UEP0)*8) + 2;

extern volatile __bit EP0STALL @ (((unsigned) &UEP0)*8) + 0;

extern volatile __bit EP1CONDIS @ (((unsigned) &UEP1)*8) + 3;

extern volatile __bit EP1HSHK @ (((unsigned) &UEP1)*8) + 4;

extern volatile __bit EP1INEN @ (((unsigned) &UEP1)*8) + 1;

extern volatile __bit EP1OUTEN @ (((unsigned) &UEP1)*8) + 2;

extern volatile __bit EP1STALL @ (((unsigned) &UEP1)*8) + 0;

extern volatile __bit EP2CONDIS @ (((unsigned) &UEP2)*8) + 3;

extern volatile __bit EP2HSHK @ (((unsigned) &UEP2)*8) + 4;

extern volatile __bit EP2INEN @ (((unsigned) &UEP2)*8) + 1;

extern volatile __bit EP2OUTEN @ (((unsigned) &UEP2)*8) + 2;

extern volatile __bit EP2STALL @ (((unsigned) &UEP2)*8) + 0;

extern volatile __bit EP3CONDIS @ (((unsigned) &UEP3)*8) + 3;

extern volatile __bit EP3HSHK @ (((unsigned) &UEP3)*8) + 4;

extern volatile __bit EP3INEN @ (((unsigned) &UEP3)*8) + 1;

extern volatile __bit EP3OUTEN @ (((unsigned) &UEP3)*8) + 2;

extern volatile __bit EP3STALL @ (((unsigned) &UEP3)*8) + 0;

extern volatile __bit EP4CONDIS @ (((unsigned) &UEP4)*8) + 3;

extern volatile __bit EP4HSHK @ (((unsigned) &UEP4)*8) + 4;

extern volatile __bit EP4INEN @ (((unsigned) &UEP4)*8) + 1;

extern volatile __bit EP4OUTEN @ (((unsigned) &UEP4)*8) + 2;

extern volatile __bit EP4STALL @ (((unsigned) &UEP4)*8) + 0;

extern volatile __bit EP5CONDIS @ (((unsigned) &UEP5)*8) + 3;

extern volatile __bit EP5HSHK @ (((unsigned) &UEP5)*8) + 4;

extern volatile __bit EP5INEN @ (((unsigned) &UEP5)*8) + 1;

extern volatile __bit EP5OUTEN @ (((unsigned) &UEP5)*8) + 2;

extern volatile __bit EP5STALL @ (((unsigned) &UEP5)*8) + 0;

extern volatile __bit EP6CONDIS @ (((unsigned) &UEP6)*8) + 3;

extern volatile __bit EP6HSHK @ (((unsigned) &UEP6)*8) + 4;

extern volatile __bit EP6INEN @ (((unsigned) &UEP6)*8) + 1;

extern volatile __bit EP6OUTEN @ (((unsigned) &UEP6)*8) + 2;

extern volatile __bit EP6STALL @ (((unsigned) &UEP6)*8) + 0;

extern volatile __bit EP7CONDIS @ (((unsigned) &UEP7)*8) + 3;

extern volatile __bit EP7HSHK @ (((unsigned) &UEP7)*8) + 4;

extern volatile __bit EP7INEN @ (((unsigned) &UEP7)*8) + 1;

extern volatile __bit EP7OUTEN @ (((unsigned) &UEP7)*8) + 2;

extern volatile __bit EP7STALL @ (((unsigned) &UEP7)*8) + 0;

extern volatile __bit EPCONDIS0 @ (((unsigned) &UEP0)*8) + 3;

extern volatile __bit EPCONDIS1 @ (((unsigned) &UEP1)*8) + 3;

extern volatile __bit EPCONDIS10 @ (((unsigned) &UEP10)*8) + 3;

extern volatile __bit EPCONDIS11 @ (((unsigned) &UEP11)*8) + 3;

extern volatile __bit EPCONDIS12 @ (((unsigned) &UEP12)*8) + 3;

extern volatile __bit EPCONDIS13 @ (((unsigned) &UEP13)*8) + 3;

extern volatile __bit EPCONDIS14 @ (((unsigned) &UEP14)*8) + 3;

extern volatile __bit EPCONDIS15 @ (((unsigned) &UEP15)*8) + 3;

extern volatile __bit EPCONDIS2 @ (((unsigned) &UEP2)*8) + 3;

extern volatile __bit EPCONDIS3 @ (((unsigned) &UEP3)*8) + 3;

extern volatile __bit EPCONDIS4 @ (((unsigned) &UEP4)*8) + 3;

extern volatile __bit EPCONDIS5 @ (((unsigned) &UEP5)*8) + 3;

extern volatile __bit EPCONDIS6 @ (((unsigned) &UEP6)*8) + 3;

extern volatile __bit EPCONDIS7 @ (((unsigned) &UEP7)*8) + 3;

extern volatile __bit EPCONDIS8 @ (((unsigned) &UEP8)*8) + 3;

extern volatile __bit EPCONDIS9 @ (((unsigned) &UEP9)*8) + 3;

extern volatile __bit EPHSHK0 @ (((unsigned) &UEP0)*8) + 4;

extern volatile __bit EPHSHK1 @ (((unsigned) &UEP1)*8) + 4;

extern volatile __bit EPHSHK10 @ (((unsigned) &UEP10)*8) + 4;

extern volatile __bit EPHSHK11 @ (((unsigned) &UEP11)*8) + 4;

extern volatile __bit EPHSHK12 @ (((unsigned) &UEP12)*8) + 4;

extern volatile __bit EPHSHK13 @ (((unsigned) &UEP13)*8) + 4;

extern volatile __bit EPHSHK14 @ (((unsigned) &UEP14)*8) + 4;

extern volatile __bit EPHSHK15 @ (((unsigned) &UEP15)*8) + 4;

extern volatile __bit EPHSHK2 @ (((unsigned) &UEP2)*8) + 4;

extern volatile __bit EPHSHK3 @ (((unsigned) &UEP3)*8) + 4;

extern volatile __bit EPHSHK4 @ (((unsigned) &UEP4)*8) + 4;

extern volatile __bit EPHSHK5 @ (((unsigned) &UEP5)*8) + 4;

extern volatile __bit EPHSHK6 @ (((unsigned) &UEP6)*8) + 4;

extern volatile __bit EPHSHK7 @ (((unsigned) &UEP7)*8) + 4;

extern volatile __bit EPHSHK8 @ (((unsigned) &UEP8)*8) + 4;

extern volatile __bit EPHSHK9 @ (((unsigned) &UEP9)*8) + 4;

extern volatile __bit EPINEN0 @ (((unsigned) &UEP0)*8) + 1;

extern volatile __bit EPINEN1 @ (((unsigned) &UEP1)*8) + 1;

extern volatile __bit EPINEN10 @ (((unsigned) &UEP10)*8) + 1;

extern volatile __bit EPINEN11 @ (((unsigned) &UEP11)*8) + 1;

extern volatile __bit EPINEN12 @ (((unsigned) &UEP12)*8) + 1;

extern volatile __bit EPINEN13 @ (((unsigned) &UEP13)*8) + 1;

extern volatile __bit EPINEN14 @ (((unsigned) &UEP14)*8) + 1;

extern volatile __bit EPINEN15 @ (((unsigned) &UEP15)*8) + 1;

extern volatile __bit EPINEN2 @ (((unsigned) &UEP2)*8) + 1;

extern volatile __bit EPINEN3 @ (((unsigned) &UEP3)*8) + 1;

extern volatile __bit EPINEN4 @ (((unsigned) &UEP4)*8) + 1;

extern volatile __bit EPINEN5 @ (((unsigned) &UEP5)*8) + 1;

extern volatile __bit EPINEN6 @ (((unsigned) &UEP6)*8) + 1;

extern volatile __bit EPINEN7 @ (((unsigned) &UEP7)*8) + 1;

extern volatile __bit EPINEN8 @ (((unsigned) &UEP8)*8) + 1;

extern volatile __bit EPINEN9 @ (((unsigned) &UEP9)*8) + 1;

extern volatile __bit EPOUTEN0 @ (((unsigned) &UEP0)*8) + 2;

extern volatile __bit EPOUTEN1 @ (((unsigned) &UEP1)*8) + 2;

extern volatile __bit EPOUTEN10 @ (((unsigned) &UEP10)*8) + 2;

extern volatile __bit EPOUTEN11 @ (((unsigned) &UEP11)*8) + 2;

extern volatile __bit EPOUTEN12 @ (((unsigned) &UEP12)*8) + 2;

extern volatile __bit EPOUTEN13 @ (((unsigned) &UEP13)*8) + 2;

extern volatile __bit EPOUTEN14 @ (((unsigned) &UEP14)*8) + 2;

extern volatile __bit EPOUTEN15 @ (((unsigned) &UEP15)*8) + 2;

extern volatile __bit EPOUTEN2 @ (((unsigned) &UEP2)*8) + 2;

extern volatile __bit EPOUTEN3 @ (((unsigned) &UEP3)*8) + 2;

extern volatile __bit EPOUTEN4 @ (((unsigned) &UEP4)*8) + 2;

extern volatile __bit EPOUTEN5 @ (((unsigned) &UEP5)*8) + 2;

extern volatile __bit EPOUTEN6 @ (((unsigned) &UEP6)*8) + 2;

extern volatile __bit EPOUTEN7 @ (((unsigned) &UEP7)*8) + 2;

extern volatile __bit EPOUTEN8 @ (((unsigned) &UEP8)*8) + 2;

extern volatile __bit EPOUTEN9 @ (((unsigned) &UEP9)*8) + 2;

extern volatile __bit EPSTALL0 @ (((unsigned) &UEP0)*8) + 0;

extern volatile __bit EPSTALL1 @ (((unsigned) &UEP1)*8) + 0;

extern volatile __bit EPSTALL10 @ (((unsigned) &UEP10)*8) + 0;

extern volatile __bit EPSTALL11 @ (((unsigned) &UEP11)*8) + 0;

extern volatile __bit EPSTALL12 @ (((unsigned) &UEP12)*8) + 0;

extern volatile __bit EPSTALL13 @ (((unsigned) &UEP13)*8) + 0;

extern volatile __bit EPSTALL14 @ (((unsigned) &UEP14)*8) + 0;

extern volatile __bit EPSTALL15 @ (((unsigned) &UEP15)*8) + 0;

extern volatile __bit EPSTALL2 @ (((unsigned) &UEP2)*8) + 0;

extern volatile __bit EPSTALL3 @ (((unsigned) &UEP3)*8) + 0;

extern volatile __bit EPSTALL4 @ (((unsigned) &UEP4)*8) + 0;

extern volatile __bit EPSTALL5 @ (((unsigned) &UEP5)*8) + 0;

extern volatile __bit EPSTALL6 @ (((unsigned) &UEP6)*8) + 0;

extern volatile __bit EPSTALL7 @ (((unsigned) &UEP7)*8) + 0;

extern volatile __bit EPSTALL8 @ (((unsigned) &UEP8)*8) + 0;

extern volatile __bit EPSTALL9 @ (((unsigned) &UEP9)*8) + 0;

extern volatile __bit FERR @ (((unsigned) &RCSTA)*8) + 2;

extern volatile __bit FLTS @ (((unsigned) &OSCCON)*8) + 2;

extern volatile __bit FREE @ (((unsigned) &EECON1)*8) + 4;

extern volatile __bit FRM0 @ (((unsigned) &UFRML)*8) + 0;

extern volatile __bit FRM1 @ (((unsigned) &UFRML)*8) + 1;

extern volatile __bit FRM10 @ (((unsigned) &UFRMH)*8) + 2;

extern volatile __bit FRM2 @ (((unsigned) &UFRML)*8) + 2;

extern volatile __bit FRM3 @ (((unsigned) &UFRML)*8) + 3;

extern volatile __bit FRM4 @ (((unsigned) &UFRML)*8) + 4;

extern volatile __bit FRM5 @ (((unsigned) &UFRML)*8) + 5;

extern volatile __bit FRM6 @ (((unsigned) &UFRML)*8) + 6;

extern volatile __bit FRM7 @ (((unsigned) &UFRML)*8) + 7;

extern volatile __bit FRM8 @ (((unsigned) &UFRMH)*8) + 0;

extern volatile __bit FRM9 @ (((unsigned) &UFRMH)*8) + 1;

extern volatile __bit FSEN @ (((unsigned) &UCFG)*8) + 2;

extern volatile __bit GCEN @ (((unsigned) &SSPCON2)*8) + 7;

extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GIEH @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GIEL @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit GIE_GIEH @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GO @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GODONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_NOT_DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_nDONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit HLVDEN @ (((unsigned) &HLVDCON)*8) + 4;

extern volatile __bit HLVDIE @ (((unsigned) &PIE2)*8) + 2;

extern volatile __bit HLVDIF @ (((unsigned) &PIR2)*8) + 2;

extern volatile __bit HLVDIN @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit HLVDIP @ (((unsigned) &IPR2)*8) + 2;

extern volatile __bit HLVDL0 @ (((unsigned) &HLVDCON)*8) + 0;

extern volatile __bit HLVDL1 @ (((unsigned) &HLVDCON)*8) + 1;

extern volatile __bit HLVDL2 @ (((unsigned) &HLVDCON)*8) + 2;

extern volatile __bit HLVDL3 @ (((unsigned) &HLVDCON)*8) + 3;

extern volatile __bit I2C_DAT @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit I2C_READ @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit I2C_START @ (((unsigned) &SSPSTAT)*8) + 3;

extern volatile __bit I2C_STOP @ (((unsigned) &SSPSTAT)*8) + 4;

extern volatile __bit IDLEIE @ (((unsigned) &UIE)*8) + 4;

extern volatile __bit IDLEIF @ (((unsigned) &UIR)*8) + 4;

extern volatile __bit IDLEN @ (((unsigned) &OSCCON)*8) + 7;

extern volatile __bit INT0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit INT0E @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INT0F @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit INT0IE @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INT0IF @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit INT1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit INT1E @ (((unsigned) &INTCON3)*8) + 3;

extern volatile __bit INT1F @ (((unsigned) &INTCON3)*8) + 0;

extern volatile __bit INT1IE @ (((unsigned) &INTCON3)*8) + 3;

extern volatile __bit INT1IF @ (((unsigned) &INTCON3)*8) + 0;

extern volatile __bit INT1IP @ (((unsigned) &INTCON3)*8) + 6;

extern volatile __bit INT1P @ (((unsigned) &INTCON3)*8) + 6;

extern volatile __bit INT2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit INT2E @ (((unsigned) &INTCON3)*8) + 4;

extern volatile __bit INT2F @ (((unsigned) &INTCON3)*8) + 1;

extern volatile __bit INT2IE @ (((unsigned) &INTCON3)*8) + 4;

extern volatile __bit INT2IF @ (((unsigned) &INTCON3)*8) + 1;

extern volatile __bit INT2IP @ (((unsigned) &INTCON3)*8) + 7;

extern volatile __bit INT2P @ (((unsigned) &INTCON3)*8) + 7;

extern volatile __bit INTEDG0 @ (((unsigned) &INTCON2)*8) + 6;

extern volatile __bit INTEDG1 @ (((unsigned) &INTCON2)*8) + 5;

extern volatile __bit INTEDG2 @ (((unsigned) &INTCON2)*8) + 4;

extern volatile __bit INTSRC @ (((unsigned) &OSCTUNE)*8) + 7;

extern volatile __bit IOFS @ (((unsigned) &OSCCON)*8) + 2;

extern volatile __bit IPEN @ (((unsigned) &RCON)*8) + 7;

extern volatile __bit IRCF0 @ (((unsigned) &OSCCON)*8) + 4;

extern volatile __bit IRCF1 @ (((unsigned) &OSCCON)*8) + 5;

extern volatile __bit IRCF2 @ (((unsigned) &OSCCON)*8) + 6;

extern volatile __bit IRVST @ (((unsigned) &HLVDCON)*8) + 5;

extern volatile __bit IVRST @ (((unsigned) &HLVDCON)*8) + 5;

extern volatile __bit LA0 @ (((unsigned) &LATA)*8) + 0;

extern volatile __bit LA1 @ (((unsigned) &LATA)*8) + 1;

extern volatile __bit LA2 @ (((unsigned) &LATA)*8) + 2;

extern volatile __bit LA3 @ (((unsigned) &LATA)*8) + 3;

extern volatile __bit LA4 @ (((unsigned) &LATA)*8) + 4;

extern volatile __bit LA5 @ (((unsigned) &LATA)*8) + 5;

extern volatile __bit LA6 @ (((unsigned) &LATA)*8) + 6;

extern volatile __bit LATA0 @ (((unsigned) &LATA)*8) + 0;

extern volatile __bit LATA1 @ (((unsigned) &LATA)*8) + 1;

extern volatile __bit LATA2 @ (((unsigned) &LATA)*8) + 2;

extern volatile __bit LATA3 @ (((unsigned) &LATA)*8) + 3;

extern volatile __bit LATA4 @ (((unsigned) &LATA)*8) + 4;

extern volatile __bit LATA5 @ (((unsigned) &LATA)*8) + 5;

extern volatile __bit LATA6 @ (((unsigned) &LATA)*8) + 6;

extern volatile __bit LATB0 @ (((unsigned) &LATB)*8) + 0;

extern volatile __bit LATB1 @ (((unsigned) &LATB)*8) + 1;

extern volatile __bit LATB2 @ (((unsigned) &LATB)*8) + 2;

extern volatile __bit LATB3 @ (((unsigned) &LATB)*8) + 3;

extern volatile __bit LATB4 @ (((unsigned) &LATB)*8) + 4;

extern volatile __bit LATB5 @ (((unsigned) &LATB)*8) + 5;

extern volatile __bit LATB6 @ (((unsigned) &LATB)*8) + 6;

extern volatile __bit LATB7 @ (((unsigned) &LATB)*8) + 7;

extern volatile __bit LATC0 @ (((unsigned) &LATC)*8) + 0;

extern volatile __bit LATC1 @ (((unsigned) &LATC)*8) + 1;

extern volatile __bit LATC2 @ (((unsigned) &LATC)*8) + 2;

extern volatile __bit LATC6 @ (((unsigned) &LATC)*8) + 6;

extern volatile __bit LATC7 @ (((unsigned) &LATC)*8) + 7;

extern volatile __bit LATD0 @ (((unsigned) &LATD)*8) + 0;

extern volatile __bit LATD1 @ (((unsigned) &LATD)*8) + 1;

extern volatile __bit LATD2 @ (((unsigned) &LATD)*8) + 2;

extern volatile __bit LATD3 @ (((unsigned) &LATD)*8) + 3;

extern volatile __bit LATD4 @ (((unsigned) &LATD)*8) + 4;

extern volatile __bit LATD5 @ (((unsigned) &LATD)*8) + 5;

extern volatile __bit LATD6 @ (((unsigned) &LATD)*8) + 6;

extern volatile __bit LATD7 @ (((unsigned) &LATD)*8) + 7;

extern volatile __bit LATE0 @ (((unsigned) &LATE)*8) + 0;

extern volatile __bit LATE1 @ (((unsigned) &LATE)*8) + 1;

extern volatile __bit LATE2 @ (((unsigned) &LATE)*8) + 2;

extern volatile __bit LB0 @ (((unsigned) &LATB)*8) + 0;

extern volatile __bit LB1 @ (((unsigned) &LATB)*8) + 1;

extern volatile __bit LB2 @ (((unsigned) &LATB)*8) + 2;

extern volatile __bit LB3 @ (((unsigned) &LATB)*8) + 3;

extern volatile __bit LB4 @ (((unsigned) &LATB)*8) + 4;

extern volatile __bit LB5 @ (((unsigned) &LATB)*8) + 5;

extern volatile __bit LB6 @ (((unsigned) &LATB)*8) + 6;

extern volatile __bit LB7 @ (((unsigned) &LATB)*8) + 7;

extern volatile __bit LC0 @ (((unsigned) &LATC)*8) + 0;

extern volatile __bit LC1 @ (((unsigned) &LATC)*8) + 1;

extern volatile __bit LC2 @ (((unsigned) &LATC)*8) + 2;

extern volatile __bit LC6 @ (((unsigned) &LATC)*8) + 6;

extern volatile __bit LC7 @ (((unsigned) &LATC)*8) + 7;

extern volatile __bit LD0 @ (((unsigned) &LATD)*8) + 0;

extern volatile __bit LD1 @ (((unsigned) &LATD)*8) + 1;

extern volatile __bit LD2 @ (((unsigned) &LATD)*8) + 2;

extern volatile __bit LD3 @ (((unsigned) &LATD)*8) + 3;

extern volatile __bit LD4 @ (((unsigned) &LATD)*8) + 4;

extern volatile __bit LD5 @ (((unsigned) &LATD)*8) + 5;

extern volatile __bit LD6 @ (((unsigned) &LATD)*8) + 6;

extern volatile __bit LD7 @ (((unsigned) &LATD)*8) + 7;

extern volatile __bit LE0 @ (((unsigned) &LATE)*8) + 0;

extern volatile __bit LE1 @ (((unsigned) &LATE)*8) + 1;

extern volatile __bit LE2 @ (((unsigned) &LATE)*8) + 2;

extern volatile __bit LVDEN @ (((unsigned) &HLVDCON)*8) + 4;

extern volatile __bit LVDIE @ (((unsigned) &PIE2)*8) + 2;

extern volatile __bit LVDIF @ (((unsigned) &PIR2)*8) + 2;

extern volatile __bit LVDIN @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit LVDIP @ (((unsigned) &IPR2)*8) + 2;

extern volatile __bit LVDL0 @ (((unsigned) &HLVDCON)*8) + 0;

extern volatile __bit LVDL1 @ (((unsigned) &HLVDCON)*8) + 1;

extern volatile __bit LVDL2 @ (((unsigned) &HLVDCON)*8) + 2;

extern volatile __bit LVDL3 @ (((unsigned) &HLVDCON)*8) + 3;

extern volatile __bit LVV0 @ (((unsigned) &HLVDCON)*8) + 0;

extern volatile __bit LVV1 @ (((unsigned) &HLVDCON)*8) + 1;

extern volatile __bit LVV2 @ (((unsigned) &HLVDCON)*8) + 2;

extern volatile __bit LVV3 @ (((unsigned) &HLVDCON)*8) + 3;

extern volatile __bit NEGATIVE @ (((unsigned) &STATUS)*8) + 4;

extern volatile __bit NOT_A @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit NOT_ADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit NOT_BOR @ (((unsigned) &RCON)*8) + 0;

extern volatile __bit NOT_DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit NOT_IPEN @ (((unsigned) &RCON)*8) + 7;

extern volatile __bit NOT_PD @ (((unsigned) &RCON)*8) + 2;

extern volatile __bit NOT_POR @ (((unsigned) &RCON)*8) + 1;

extern volatile __bit NOT_RBPU @ (((unsigned) &INTCON2)*8) + 7;

extern volatile __bit NOT_RI @ (((unsigned) &RCON)*8) + 4;

extern volatile __bit NOT_T1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit NOT_T3SYNC @ (((unsigned) &T3CON)*8) + 2;

extern volatile __bit NOT_TO @ (((unsigned) &RCON)*8) + 3;

extern volatile __bit NOT_W @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit NOT_WRITE @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit OERR @ (((unsigned) &RCSTA)*8) + 1;

extern volatile __bit OESPP @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit OSC2 @ (((unsigned) &PORTA)*8) + 6;

extern volatile __bit OSCFIE @ (((unsigned) &PIE2)*8) + 7;

extern volatile __bit OSCFIF @ (((unsigned) &PIR2)*8) + 7;

extern volatile __bit OSCFIP @ (((unsigned) &IPR2)*8) + 7;

extern volatile __bit OSTS @ (((unsigned) &OSCCON)*8) + 3;

extern volatile __bit OV @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit OVERFLOW @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit P1A @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit P1M0 @ (((unsigned) &CCP1CON)*8) + 6;

extern volatile __bit P1M1 @ (((unsigned) &CCP1CON)*8) + 7;

extern volatile __bit PA1 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit PA2 @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit PA2E @ (((unsigned) &PORTE)*8) + 7;

extern volatile __bit PB2 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit PC2 @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit PC3E @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit PCFG0 @ (((unsigned) &ADCON1)*8) + 0;

extern volatile __bit PCFG1 @ (((unsigned) &ADCON1)*8) + 1;

extern volatile __bit PCFG2 @ (((unsigned) &ADCON1)*8) + 2;

extern volatile __bit PCFG3 @ (((unsigned) &ADCON1)*8) + 3;

extern volatile __bit PD @ (((unsigned) &RCON)*8) + 2;

extern volatile __bit PD2 @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit PDC0 @ (((unsigned) &ECCP1DEL)*8) + 0;

extern volatile __bit PDC1 @ (((unsigned) &ECCP1DEL)*8) + 1;

extern volatile __bit PDC2 @ (((unsigned) &ECCP1DEL)*8) + 2;

extern volatile __bit PDC3 @ (((unsigned) &ECCP1DEL)*8) + 3;

extern volatile __bit PDC4 @ (((unsigned) &ECCP1DEL)*8) + 4;

extern volatile __bit PDC5 @ (((unsigned) &ECCP1DEL)*8) + 5;

extern volatile __bit PDC6 @ (((unsigned) &ECCP1DEL)*8) + 6;

extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PEIE_GIEL @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PEN @ (((unsigned) &SSPCON2)*8) + 2;

extern volatile __bit PGC @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit PGD @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit PGM @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit PIDEE @ (((unsigned) &UEIE)*8) + 0;

extern volatile __bit PIDEF @ (((unsigned) &UEIR)*8) + 0;

extern volatile __bit PKTDIS @ (((unsigned) &UCON)*8) + 4;

extern volatile __bit POR @ (((unsigned) &RCON)*8) + 1;

extern volatile __bit PPB0 @ (((unsigned) &UCFG)*8) + 0;

extern volatile __bit PPB1 @ (((unsigned) &UCFG)*8) + 1;

extern volatile __bit PPBI @ (((unsigned) &USTAT)*8) + 1;

extern volatile __bit PPBRST @ (((unsigned) &UCON)*8) + 6;

extern volatile __bit PRSEN @ (((unsigned) &ECCP1DEL)*8) + 7;

extern volatile __bit PSA @ (((unsigned) &T0CON)*8) + 3;

extern volatile __bit PSPIE @ (((unsigned) &PIE1)*8) + 7;

extern volatile __bit PSPIF @ (((unsigned) &PIR1)*8) + 7;

extern volatile __bit PSPIP @ (((unsigned) &IPR1)*8) + 7;

extern volatile __bit PSSAC0 @ (((unsigned) &ECCP1AS)*8) + 2;

extern volatile __bit PSSAC1 @ (((unsigned) &ECCP1AS)*8) + 3;

extern volatile __bit PSSBD0 @ (((unsigned) &ECCP1AS)*8) + 0;

extern volatile __bit PSSBD1 @ (((unsigned) &ECCP1AS)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RA0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RA1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RA2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RA3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RA4 @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RA5 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RA6 @ (((unsigned) &PORTA)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RB0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RB1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RB2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RB3 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RB4 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RB5 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RB6 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RB7 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit RBIP @ (((unsigned) &INTCON2)*8) + 0;

extern volatile __bit RBPU @ (((unsigned) &INTCON2)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) RC0 @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RC1 @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit RC1IE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RC1IF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RC1IP @ (((unsigned) &IPR1)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RC2 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit RC4 @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit RC5 @ (((unsigned) &PORTC)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RC6 @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RC7 @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit RC8_9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RC9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RCD8 @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit RCEN @ (((unsigned) &SSPCON2)*8) + 3;

extern volatile __bit RCIDL @ (((unsigned) &BAUDCON)*8) + 6;

extern volatile __bit RCIE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RCIF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RCIP @ (((unsigned) &IPR1)*8) + 5;

extern volatile __bit RCMT @ (((unsigned) &BAUDCON)*8) + 6;

extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RD0 @ (((unsigned) &PORTD)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RD1 @ (((unsigned) &PORTD)*8) + 1;

extern volatile __bit RD163 @ (((unsigned) &T3CON)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) RD2 @ (((unsigned) &PORTD)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RD3 @ (((unsigned) &PORTD)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RD4 @ (((unsigned) &PORTD)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RD5 @ (((unsigned) &PORTD)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RD6 @ (((unsigned) &PORTD)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RD7 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit RDE @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit RDPU @ (((unsigned) &PORTE)*8) + 7;

extern volatile __bit RDSPP @ (((unsigned) &SPPEPS)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) RE0 @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RE1 @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RE2 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit RE3 @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit RE7 @ (((unsigned) &PORTE)*8) + 7;

extern volatile __bit READ_WRITE @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit RESUME @ (((unsigned) &UCON)*8) + 2;

extern volatile __bit RI @ (((unsigned) &RCON)*8) + 4;

extern volatile __bit RSEN @ (((unsigned) &SSPCON2)*8) + 1;

extern volatile __bit RW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit RX @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit RX9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RX9D @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit RXCKP @ (((unsigned) &BAUDCON)*8) + 5;

extern volatile __bit RXDTP @ (((unsigned) &BAUDCON)*8) + 5;

extern volatile __bit R_NOT_W @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit R_W @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit R_nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit SBOREN @ (((unsigned) &RCON)*8) + 6;

extern volatile __bit SCKP @ (((unsigned) &BAUDCON)*8) + 4;

extern volatile __bit SCS0 @ (((unsigned) &OSCCON)*8) + 0;

extern volatile __bit SCS1 @ (((unsigned) &OSCCON)*8) + 1;

extern volatile __bit SE0 @ (((unsigned) &UCON)*8) + 5;

extern volatile __bit SEN @ (((unsigned) &SSPCON2)*8) + 0;

extern volatile __bit SENDB @ (((unsigned) &TXSTA)*8) + 3;

extern volatile __bit SENDB1 @ (((unsigned) &TXSTA)*8) + 3;

extern volatile __bit SMP @ (((unsigned) &SSPSTAT)*8) + 7;

extern volatile __bit SOFIE @ (((unsigned) &UIE)*8) + 6;

extern volatile __bit SOFIF @ (((unsigned) &UIR)*8) + 6;

extern volatile __bit SOSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit SOSCEN3 @ (((unsigned) &T3CON)*8) + 3;

extern volatile __bit SPEN @ (((unsigned) &RCSTA)*8) + 7;

extern volatile __bit SPP0 @ (((unsigned) &PORTD)*8) + 0;

extern volatile __bit SPP1 @ (((unsigned) &PORTD)*8) + 1;

extern volatile __bit SPP2 @ (((unsigned) &PORTD)*8) + 2;

extern volatile __bit SPP3 @ (((unsigned) &PORTD)*8) + 3;

extern volatile __bit SPP4 @ (((unsigned) &PORTD)*8) + 4;

extern volatile __bit SPP5 @ (((unsigned) &PORTD)*8) + 5;

extern volatile __bit SPP6 @ (((unsigned) &PORTD)*8) + 6;

extern volatile __bit SPP7 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit SPPBUSY @ (((unsigned) &SPPEPS)*8) + 4;

extern volatile __bit SPPEN @ (((unsigned) &SPPCON)*8) + 0;

extern volatile __bit SPPIE @ (((unsigned) &PIE1)*8) + 7;

extern volatile __bit SPPIF @ (((unsigned) &PIR1)*8) + 7;

extern volatile __bit SPPIP @ (((unsigned) &IPR1)*8) + 7;

extern volatile __bit SPPOWN @ (((unsigned) &SPPCON)*8) + 1;

extern volatile __bit SREN @ (((unsigned) &RCSTA)*8) + 5;

extern volatile __bit SRENA @ (((unsigned) &RCSTA)*8) + 5;

extern volatile __bit SS2 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit SSPEN @ (((unsigned) &SSPCON1)*8) + 5;

extern volatile __bit SSPIE @ (((unsigned) &PIE1)*8) + 3;

extern volatile __bit SSPIF @ (((unsigned) &PIR1)*8) + 3;

extern volatile __bit SSPIP @ (((unsigned) &IPR1)*8) + 3;

extern volatile __bit SSPM0 @ (((unsigned) &SSPCON1)*8) + 0;

extern volatile __bit SSPM1 @ (((unsigned) &SSPCON1)*8) + 1;

extern volatile __bit SSPM2 @ (((unsigned) &SSPCON1)*8) + 2;

extern volatile __bit SSPM3 @ (((unsigned) &SSPCON1)*8) + 3;

extern volatile __bit SSPOV @ (((unsigned) &SSPCON1)*8) + 6;

extern volatile __bit STALLIE @ (((unsigned) &UIE)*8) + 5;

extern volatile __bit STALLIF @ (((unsigned) &UIR)*8) + 5;

extern volatile __bit START @ (((unsigned) &SSPSTAT)*8) + 3;

extern volatile __bit STKFUL @ (((unsigned) &STKPTR)*8) + 7;

extern volatile __bit STKOVF @ (((unsigned) &STKPTR)*8) + 7;

extern volatile __bit STKPTR0 @ (((unsigned) &STKPTR)*8) + 0;

extern volatile __bit STKPTR1 @ (((unsigned) &STKPTR)*8) + 1;

extern volatile __bit STKPTR2 @ (((unsigned) &STKPTR)*8) + 2;

extern volatile __bit STKPTR3 @ (((unsigned) &STKPTR)*8) + 3;

extern volatile __bit STKPTR4 @ (((unsigned) &STKPTR)*8) + 4;

extern volatile __bit STKUNF @ (((unsigned) &STKPTR)*8) + 6;

extern volatile __bit STOP @ (((unsigned) &SSPSTAT)*8) + 4;

extern volatile __bit SUSPND @ (((unsigned) &UCON)*8) + 1;

extern volatile __bit SWDTE @ (((unsigned) &WDTCON)*8) + 0;

extern volatile __bit SWDTEN @ (((unsigned) &WDTCON)*8) + 0;

extern volatile __bit SYNC @ (((unsigned) &TXSTA)*8) + 4;

extern volatile __bit SYNC1 @ (((unsigned) &TXSTA)*8) + 4;

extern volatile __bit T08BIT @ (((unsigned) &T0CON)*8) + 6;

extern volatile __bit T0CKI @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit T0CS @ (((unsigned) &T0CON)*8) + 5;

extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit T0IP @ (((unsigned) &INTCON2)*8) + 2;

extern volatile __bit T0PS0 @ (((unsigned) &T0CON)*8) + 0;

extern volatile __bit T0PS1 @ (((unsigned) &T0CON)*8) + 1;

extern volatile __bit T0PS2 @ (((unsigned) &T0CON)*8) + 2;

extern volatile __bit T0SE @ (((unsigned) &T0CON)*8) + 4;

extern volatile __bit T13CKI @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;

extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;

extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit T1OSI @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit T1OSO @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit T1RD16 @ (((unsigned) &T1CON)*8) + 7;

extern volatile __bit T1RUN @ (((unsigned) &T1CON)*8) + 6;

extern volatile __bit T1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;

extern volatile __bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;

extern volatile __bit T2OUTPS0 @ (((unsigned) &T2CON)*8) + 3;

extern volatile __bit T2OUTPS1 @ (((unsigned) &T2CON)*8) + 4;

extern volatile __bit T2OUTPS2 @ (((unsigned) &T2CON)*8) + 5;

extern volatile __bit T2OUTPS3 @ (((unsigned) &T2CON)*8) + 6;

extern volatile __bit T3CCP1 @ (((unsigned) &T3CON)*8) + 3;

extern volatile __bit T3CCP2 @ (((unsigned) &T3CON)*8) + 6;

extern volatile __bit T3CKPS0 @ (((unsigned) &T3CON)*8) + 4;

extern volatile __bit T3CKPS1 @ (((unsigned) &T3CON)*8) + 5;

extern volatile __bit T3NSYNC @ (((unsigned) &T3CON)*8) + 2;

extern volatile __bit T3RD16 @ (((unsigned) &T3CON)*8) + 7;

extern volatile __bit T3SYNC @ (((unsigned) &T3CON)*8) + 2;

extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit TMR0IP @ (((unsigned) &INTCON2)*8) + 2;

extern volatile __bit TMR0ON @ (((unsigned) &T0CON)*8) + 7;

extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;

extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit TMR1IP @ (((unsigned) &IPR1)*8) + 0;

extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;

extern volatile __bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;

extern volatile __bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;

extern volatile __bit TMR2IP @ (((unsigned) &IPR1)*8) + 1;

extern volatile __bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;

extern volatile __bit TMR3CS @ (((unsigned) &T3CON)*8) + 1;

extern volatile __bit TMR3IE @ (((unsigned) &PIE2)*8) + 1;

extern volatile __bit TMR3IF @ (((unsigned) &PIR2)*8) + 1;

extern volatile __bit TMR3IP @ (((unsigned) &IPR2)*8) + 1;

extern volatile __bit TMR3ON @ (((unsigned) &T3CON)*8) + 0;

extern volatile __bit TO @ (((unsigned) &RCON)*8) + 3;

extern volatile __bit TOUTPS0 @ (((unsigned) &T2CON)*8) + 3;

extern volatile __bit TOUTPS1 @ (((unsigned) &T2CON)*8) + 4;

extern volatile __bit TOUTPS2 @ (((unsigned) &T2CON)*8) + 5;

extern volatile __bit TOUTPS3 @ (((unsigned) &T2CON)*8) + 6;

extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;

extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;

extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;

extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;

extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;

extern volatile __bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;

extern volatile __bit TRISA6 @ (((unsigned) &TRISA)*8) + 6;

extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;

extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;

extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;

extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;

extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;

extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;

extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;

extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;

extern volatile __bit TRISC0 @ (((unsigned) &TRISC)*8) + 0;

extern volatile __bit TRISC1 @ (((unsigned) &TRISC)*8) + 1;

extern volatile __bit TRISC2 @ (((unsigned) &TRISC)*8) + 2;

extern volatile __bit TRISC6 @ (((unsigned) &TRISC)*8) + 6;

extern volatile __bit TRISC7 @ (((unsigned) &TRISC)*8) + 7;

extern volatile __bit TRISD0 @ (((unsigned) &TRISD)*8) + 0;

extern volatile __bit TRISD1 @ (((unsigned) &TRISD)*8) + 1;

extern volatile __bit TRISD2 @ (((unsigned) &TRISD)*8) + 2;

extern volatile __bit TRISD3 @ (((unsigned) &TRISD)*8) + 3;

extern volatile __bit TRISD4 @ (((unsigned) &TRISD)*8) + 4;

extern volatile __bit TRISD5 @ (((unsigned) &TRISD)*8) + 5;

extern volatile __bit TRISD6 @ (((unsigned) &TRISD)*8) + 6;

extern volatile __bit TRISD7 @ (((unsigned) &TRISD)*8) + 7;

extern volatile __bit TRISE0 @ (((unsigned) &TRISE)*8) + 0;

extern volatile __bit TRISE1 @ (((unsigned) &TRISE)*8) + 1;

extern volatile __bit TRISE2 @ (((unsigned) &TRISE)*8) + 2;

extern volatile __bit TRMT @ (((unsigned) &TXSTA)*8) + 1;

extern volatile __bit TRMT1 @ (((unsigned) &TXSTA)*8) + 1;

extern volatile __bit TRNIE @ (((unsigned) &UIE)*8) + 3;

extern volatile __bit TRNIF @ (((unsigned) &UIR)*8) + 3;

extern volatile __bit TUN0 @ (((unsigned) &OSCTUNE)*8) + 0;

extern volatile __bit TUN1 @ (((unsigned) &OSCTUNE)*8) + 1;

extern volatile __bit TUN2 @ (((unsigned) &OSCTUNE)*8) + 2;

extern volatile __bit TUN3 @ (((unsigned) &OSCTUNE)*8) + 3;

extern volatile __bit TUN4 @ (((unsigned) &OSCTUNE)*8) + 4;

extern volatile __bit TX @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit TX1IE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TX1IF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit TX1IP @ (((unsigned) &IPR1)*8) + 4;

extern volatile __bit TX8_9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX91 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9D @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TX9D1 @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXCKP @ (((unsigned) &BAUDCON)*8) + 4;

extern volatile __bit TXD8 @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXEN @ (((unsigned) &TXSTA)*8) + 5;

extern volatile __bit TXEN1 @ (((unsigned) &TXSTA)*8) + 5;

extern volatile __bit TXIE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TXIF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit TXIP @ (((unsigned) &IPR1)*8) + 4;

extern volatile __bit UA @ (((unsigned) &SSPSTAT)*8) + 1;

extern volatile __bit UERRIE @ (((unsigned) &UIE)*8) + 1;

extern volatile __bit UERRIF @ (((unsigned) &UIR)*8) + 1;

extern volatile __bit ULPWUIN @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit UOEMON @ (((unsigned) &UCFG)*8) + 6;

extern volatile __bit UPP0 @ (((unsigned) &UCFG)*8) + 0;

extern volatile __bit UPP1 @ (((unsigned) &UCFG)*8) + 1;

extern volatile __bit UPUEN @ (((unsigned) &UCFG)*8) + 4;

extern volatile __bit URSTIE @ (((unsigned) &UIE)*8) + 0;

extern volatile __bit URSTIF @ (((unsigned) &UIR)*8) + 0;

extern volatile __bit USBEN @ (((unsigned) &UCON)*8) + 3;

extern volatile __bit USBIE @ (((unsigned) &PIE2)*8) + 5;

extern volatile __bit USBIF @ (((unsigned) &PIR2)*8) + 5;

extern volatile __bit USBIP @ (((unsigned) &IPR2)*8) + 5;

extern volatile __bit UTEYE @ (((unsigned) &UCFG)*8) + 7;

extern volatile __bit UTRDIS @ (((unsigned) &UCFG)*8) + 3;

extern volatile __bit VCFG0 @ (((unsigned) &ADCON1)*8) + 4;

extern volatile __bit VCFG01 @ (((unsigned) &ADCON1)*8) + 4;

extern volatile __bit VCFG1 @ (((unsigned) &ADCON1)*8) + 5;

extern volatile __bit VCFG11 @ (((unsigned) &ADCON1)*8) + 5;

extern volatile __bit VDIRMAG @ (((unsigned) &HLVDCON)*8) + 7;

extern volatile __bit VREFM @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit VREFP @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit W4E @ (((unsigned) &BAUDCON)*8) + 1;

extern volatile __bit WAIT0 @ (((unsigned) &PR2)*8) + 4;

extern volatile __bit WAIT1 @ (((unsigned) &PR2)*8) + 5;

extern volatile __bit WCOL @ (((unsigned) &SSPCON1)*8) + 7;

extern volatile __bit WM0 @ (((unsigned) &PR2)*8) + 0;

extern volatile __bit WM1 @ (((unsigned) &PR2)*8) + 1;

extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;

extern volatile __bit WRE @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;

extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;

extern volatile __bit WRSPP @ (((unsigned) &SPPEPS)*8) + 6;

extern volatile __bit WS0 @ (((unsigned) &SPPCFG)*8) + 0;

extern volatile __bit WS1 @ (((unsigned) &SPPCFG)*8) + 1;

extern volatile __bit WS2 @ (((unsigned) &SPPCFG)*8) + 2;

extern volatile __bit WS3 @ (((unsigned) &SPPCFG)*8) + 3;

extern volatile __bit WUE @ (((unsigned) &BAUDCON)*8) + 1;

extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;

extern volatile __bit nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nBOR @ (((unsigned) &RCON)*8) + 0;

extern volatile __bit nDONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit nIPEN @ (((unsigned) &RCON)*8) + 7;

extern volatile __bit nPD @ (((unsigned) &RCON)*8) + 2;

extern volatile __bit nPOR @ (((unsigned) &RCON)*8) + 1;

extern volatile __bit nRBPU @ (((unsigned) &INTCON2)*8) + 7;

extern volatile __bit nRI @ (((unsigned) &RCON)*8) + 4;

extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit nT3SYNC @ (((unsigned) &T3CON)*8) + 2;

extern volatile __bit nTO @ (((unsigned) &RCON)*8) + 3;

extern volatile __bit nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit nWRITE @ (((unsigned) &SSPSTAT)*8) + 2;

# 18 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\pic18.h"
__attribute__((__unsupported__("The " "flash_write" " routine is no longer supported. Please use the MPLAB X MCC."))) void flash_write(const unsigned char *, unsigned int, __far unsigned char *);
__attribute__((__unsupported__("The " "EraseFlash" " routine is no longer supported. Please use the MPLAB X MCC."))) void EraseFlash(unsigned long startaddr, unsigned long endaddr);


# 42
#pragma intrinsic(__nop)
extern void __nop(void);

# 135
__attribute__((__unsupported__("The " "Read_b_eep" " routine is no longer supported. Please use the MPLAB X MCC."))) unsigned char Read_b_eep(unsigned int badd);
__attribute__((__unsupported__("The " "Busy_eep" " routine is no longer supported. Please use the MPLAB X MCC."))) void Busy_eep(void);
__attribute__((__unsupported__("The " "Write_b_eep" " routine is no longer supported. Please use the MPLAB X MCC."))) void Write_b_eep(unsigned int badd, unsigned char bdat);

# 155
unsigned char __t1rd16on(void);
unsigned char __t3rd16on(void);


# 163
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);
#pragma intrinsic(_delaywdt)
extern __nonreentrant void _delaywdt(unsigned long);
#pragma intrinsic(_delay3)
extern __nonreentrant void _delay3(unsigned char);

# 34 "bibliotecas/hardware.h"
void init_hardware(void);
void write_timer_zero(unsigned int timer0);
void open_timer0(unsigned char config);
void ms_delay(unsigned int val);
void config_timer_dois(void);
void timer_dois(void);




typedef unsigned char uint8_t;
typedef unsigned int uint16_t;

# 199 "bibliotecas/display_lcd.h"
extern void init_lcd(void);

# 208
extern void escreve_cmd_lcd(unsigned char comando);

# 220
extern void endereco_cursor_lcd(unsigned char endereco);

# 236
extern void posicao_cursor_lcd(unsigned char linha, unsigned char coluna);

# 247
extern void escreve_caractere_lcd(char data);

# 261
extern void escreve_inteiro_lcd(int valor);

# 276
extern void escreve_float_lcd(float valor, char formatacao);

# 290
extern void escreve_frase_ram_lcd(char *buffer);

# 304
extern void escreve_frase_lcd(const char *buffer);

# 322
extern void cria_caractere_lcd(unsigned char endereco, const char *buffer);

# 332
void converte_inteiro_matriz(unsigned int val, char* str );

# 464 "bibliotecas/ff.c"
static FATFS* FatFs[1];
static WORD Fsid;

# 596
static const BYTE DbcTbl[] = {0x81, 0x9F, 0xE0, 0xFC, 0x40, 0x7E, 0x80, 0xFC, 0x00, 0x00};

# 614
static WORD ld_word (const BYTE* ptr)
{
WORD rv;

rv = ptr[1];
rv = rv << 8 | ptr[0];
return rv;
}

static DWORD ld_dword (const BYTE* ptr)
{
DWORD rv;

rv = ptr[3];
rv = rv << 8 | ptr[2];
rv = rv << 8 | ptr[1];
rv = rv << 8 | ptr[0];
return rv;
}

# 652
static void st_word (BYTE* ptr, WORD val)
{
*ptr++ = (BYTE)val; val >>= 8;
*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)
{
*ptr++ = (BYTE)val; val >>= 8;
*ptr++ = (BYTE)val; val >>= 8;
*ptr++ = (BYTE)val; val >>= 8;
*ptr++ = (BYTE)val;
}

# 688
static int dbc_1st (BYTE c)
{

# 696
if (c >= DbcTbl[0]) {
if (c <= DbcTbl[1]) return 1;
if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
}

# 703
return 0;
}



static int dbc_2nd (BYTE c)
{

# 717
if (c >= DbcTbl[4]) {
if (c <= DbcTbl[5]) return 1;
if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
}

# 725
return 0;
}

# 1025
static FRESULT sync_window (
FATFS* fs
)
{
FRESULT res = FR_OK;


if (fs->wflag) {
if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {
fs->wflag = 0;
if (fs->winsect - fs->fatbase < fs->fsize) {
if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);
}
} else {
res = FR_DISK_ERR;
}
}
return res;
}



static FRESULT move_window (
FATFS* fs,
LBA_t sect
)
{
FRESULT res = FR_OK;


if (sect != fs->winsect) {

res = sync_window(fs);

if (res == FR_OK) {
if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
sect = (LBA_t)0 - 1;
res = FR_DISK_ERR;
}
fs->winsect = sect;
}
}
return res;
}

# 1078
static FRESULT sync_fs (
FATFS* fs
)
{
FRESULT res;


res = sync_window(fs);
if (res == FR_OK) {
if (fs->fs_type == 3 && fs->fsi_flag == 1) {

memset(fs->win, 0, sizeof fs->win);
st_word(fs->win + 510, 0xAA55);
st_dword(fs->win + 0, 0x41615252);
st_dword(fs->win + 484, 0x61417272);
st_dword(fs->win + 488, fs->free_clst);
st_dword(fs->win + 492, fs->last_clst);
fs->winsect = fs->volbase + 1;
disk_write(fs->pdrv, fs->win, fs->winsect, 1);
fs->fsi_flag = 0;
}

if (disk_ioctl(fs->pdrv, 0, 0) != RES_OK) res = FR_DISK_ERR;
}

return res;
}

# 1114
static LBA_t clst2sect (
FATFS* fs,
DWORD clst
)
{
clst -= 2;
if (clst >= fs->n_fatent - 2) return 0;
return fs->database + (LBA_t)fs->csize * clst;
}

# 1131
static DWORD get_fat (
FFOBJID* obj,
DWORD clst
)
{
UINT wc, bc;
DWORD val;
FATFS *fs = obj->fs;


if (clst < 2 || clst >= fs->n_fatent) {
val = 1;

} else {
val = 0xFFFFFFFF;

switch (fs->fs_type) {
case 1 :
bc = (UINT)clst; bc += bc / 2;
if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
wc = fs->win[bc++ % ((UINT)512)];
if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
wc |= fs->win[bc % ((UINT)512)] << 8;
val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
break;

case 2 :
if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) break;
val = ld_word(fs->win + clst * 2 % ((UINT)512));
break;

case 3 :
if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) break;
val = ld_dword(fs->win + clst * 4 % ((UINT)512)) & 0x0FFFFFFF;
break;

# 1193
default:
val = 1;
}
}

return val;
}

# 1209
static FRESULT put_fat (
FATFS* fs,
DWORD clst,
DWORD val
)
{
UINT bc;
BYTE *p;
FRESULT res = FR_INT_ERR;


if (clst >= 2 && clst < fs->n_fatent) {
switch (fs->fs_type) {
case 1:
bc = (UINT)clst; bc += bc / 2;
res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
if (res != FR_OK) break;
p = fs->win + bc++ % ((UINT)512);
*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
fs->wflag = 1;
res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
if (res != FR_OK) break;
p = fs->win + bc % ((UINT)512);
*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
fs->wflag = 1;
break;

case 2:
res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
if (res != FR_OK) break;
st_word(fs->win + clst * 2 % ((UINT)512), (WORD)val);
fs->wflag = 1;
break;

case 3:

# 1247
res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
if (res != FR_OK) break;
if (!0 || fs->fs_type != 4) {
val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % ((UINT)512)) & 0xF0000000);
}
st_dword(fs->win + clst * 4 % ((UINT)512), val);
fs->wflag = 1;
break;
}
}
return res;
}

# 1399
static FRESULT remove_chain (
FFOBJID* obj,
DWORD clst,
DWORD pclst
)
{
FRESULT res = FR_OK;
DWORD nxt;
FATFS *fs = obj->fs;

# 1415
if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;


if (pclst != 0 && (!0 || fs->fs_type != 4 || obj->stat != 2)) {
res = put_fat(fs, pclst, 0xFFFFFFFF);
if (res != FR_OK) return res;
}


do {
nxt = get_fat(obj, clst);
if (nxt == 0) break;
if (nxt == 1) return FR_INT_ERR;
if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
if (!0 || fs->fs_type != 4) {
res = put_fat(fs, clst, 0);
if (res != FR_OK) return res;
}
if (fs->free_clst < fs->n_fatent - 2) {
fs->free_clst++;
fs->fsi_flag |= 1;
}

# 1455
clst = nxt;
} while (clst < fs->n_fatent);

# 1484
return FR_OK;
}

# 1494
static DWORD create_chain (
FFOBJID* obj,
DWORD clst
)
{
DWORD cs, ncl, scl;
FRESULT res;
FATFS *fs = obj->fs;


if (clst == 0) {
scl = fs->last_clst;
if (scl == 0 || scl >= fs->n_fatent) scl = 1;
}
else {
cs = get_fat(obj, clst);
if (cs < 2) return 1;
if (cs == 0xFFFFFFFF) return cs;
if (cs < fs->n_fatent) return cs;
scl = clst;
}
if (fs->free_clst == 0) return 0;

# 1543
{
ncl = 0;
if (scl == clst) {
ncl = scl + 1;
if (ncl >= fs->n_fatent) ncl = 2;
cs = get_fat(obj, ncl);
if (cs == 1 || cs == 0xFFFFFFFF) return cs;
if (cs != 0) {
cs = fs->last_clst;
if (cs >= 2 && cs < fs->n_fatent) scl = cs;
ncl = 0;
}
}
if (ncl == 0) {
ncl = scl;
for (;;) {
ncl++;
if (ncl >= fs->n_fatent) {
ncl = 2;
if (ncl > scl) return 0;
}
cs = get_fat(obj, ncl);
if (cs == 0) break;
if (cs == 1 || cs == 0xFFFFFFFF) return cs;
if (ncl == scl) return 0;
}
}
res = put_fat(fs, ncl, 0xFFFFFFFF);
if (res == FR_OK && clst != 0) {
res = put_fat(fs, clst, ncl);
}
}

if (res == FR_OK) {
fs->last_clst = ncl;
if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
fs->fsi_flag |= 1;
} else {
ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
}

return ncl;
}

# 1627
static FRESULT dir_clear (
FATFS *fs,
DWORD clst
)
{
LBA_t sect;
UINT n, szb;
BYTE *ibuf;


if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
sect = clst2sect(fs, clst);
fs->winsect = sect;
memset(fs->win, 0, sizeof fs->win);

# 1651
{
ibuf = fs->win; szb = 1;
for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
}
return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
}

# 1666
static FRESULT dir_sdi (
DIR_E* dp,
DWORD ofs
)
{
DWORD csz, clst;
FATFS *fs = dp->obj.fs;


if (ofs >= (DWORD)((0 && fs->fs_type == 4) ? 0x10000000 : 0x200000) || ofs % 32) {
return FR_INT_ERR;
}
dp->dptr = ofs;
clst = dp->obj.sclust;
if (clst == 0 && fs->fs_type >= 3) {
clst = (DWORD)fs->dirbase;
if (0) dp->obj.stat = 0;
}

if (clst == 0) {
if (ofs / 32 >= fs->n_rootdir) return FR_INT_ERR;
dp->sect = fs->dirbase;

} else {
csz = (DWORD)fs->csize * ((UINT)512);
while (ofs >= csz) {
clst = get_fat(&dp->obj, clst);
if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;
ofs -= csz;
}
dp->sect = clst2sect(fs, clst);
}
dp->clust = clst;
if (dp->sect == 0) return FR_INT_ERR;
dp->sect += ofs / ((UINT)512);
dp->dir = fs->win + (ofs % ((UINT)512));

return FR_OK;
}

# 1714
static FRESULT dir_next (
DIR_E* dp,
int stretch
)
{
DWORD ofs, clst;
FATFS *fs = dp->obj.fs;


ofs = dp->dptr + 32;
if (ofs >= (DWORD)((0 && fs->fs_type == 4) ? 0x10000000 : 0x200000)) dp->sect = 0;
if (dp->sect == 0) return FR_NO_FILE;

if (ofs % ((UINT)512) == 0) {
dp->sect++;

if (dp->clust == 0) {
if (ofs / 32 >= fs->n_rootdir) {
dp->sect = 0; return FR_NO_FILE;
}
}
else {
if ((ofs / ((UINT)512) & (fs->csize - 1)) == 0) {
clst = get_fat(&dp->obj, dp->clust);
if (clst <= 1) return FR_INT_ERR;
if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
if (clst >= fs->n_fatent) {

if (!stretch) {
dp->sect = 0; return FR_NO_FILE;
}
clst = create_chain(&dp->obj, dp->clust);
if (clst == 0) return FR_DENIED;
if (clst == 1) return FR_INT_ERR;
if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;
if (0) dp->obj.stat |= 4;

# 1755
}
dp->clust = clst;
dp->sect = clst2sect(fs, clst);
}
}
}
dp->dptr = ofs;
dp->dir = fs->win + ofs % ((UINT)512);

return FR_OK;
}

# 1775
static FRESULT dir_alloc (
DIR_E* dp,
UINT n_ent
)
{
FRESULT res;
UINT n;
FATFS *fs = dp->obj.fs;


res = dir_sdi(dp, 0);
if (res == FR_OK) {
n = 0;
do {
res = move_window(fs, dp->sect);
if (res != FR_OK) break;



if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {

if (++n == n_ent) break;
} else {
n = 0;
}
res = dir_next(dp, 1);
} while (res == FR_OK);
}

if (res == FR_NO_FILE) res = FR_DENIED;
return res;
}

# 1817
static DWORD ld_clust (
FATFS* fs,
const BYTE* dir
)
{
DWORD cl;

cl = ld_word(dir + 26);
if (fs->fs_type == 3) {
cl |= (DWORD)ld_word(dir + 20) << 16;
}

return cl;
}



static void st_clust (
FATFS* fs,
BYTE* dir,
DWORD cl
)
{
st_word(dir + 26, (WORD)cl);
if (fs->fs_type == 3) {
st_word(dir + 20, (WORD)(cl >> 16));
}
}

# 2275
static FRESULT dir_read (
DIR_E* dp,
int vol
)
{
FRESULT res = FR_NO_FILE;
FATFS *fs = dp->obj.fs;
BYTE attr, b;

# 2287
while (dp->sect) {
res = move_window(fs, dp->sect);
if (res != FR_OK) break;
b = dp->dir[0];
if (b == 0) {
res = FR_NO_FILE; break;
}

# 2310
{
dp->obj.attr = attr = dp->dir[11] & 0x3F;

# 2332
if (b != 0xE5 && b != '.' && attr != 0x0F && (int)((attr & ~0x20) == 0x08) == vol) {
break;
}

}
res = dir_next(dp, 0);
if (res != FR_OK) break;
}

if (res != FR_OK) dp->sect = 0;
return res;
}

# 2353
static FRESULT dir_find (
DIR_E* dp
)
{
FRESULT res;
FATFS *fs = dp->obj.fs;
BYTE c;

# 2364
res = dir_sdi(dp, 0);
if (res != FR_OK) return res;

# 2390
do {
res = move_window(fs, dp->sect);
if (res != FR_OK) break;
c = dp->dir[0];
if (c == 0) { res = FR_NO_FILE; break; }

# 2417
dp->obj.attr = dp->dir[11] & 0x3F;
if (!(dp->dir[11] & 0x08) && !memcmp(dp->dir, dp->fn, 11)) break;

res = dir_next(dp, 0);
} while (res == FR_OK);

return res;
}

# 2434
static FRESULT dir_register (
DIR_E* dp
)
{
FRESULT res;
FATFS *fs = dp->obj.fs;

# 2511
res = dir_alloc(dp, 1);




if (res == FR_OK) {
res = move_window(fs, dp->sect);
if (res == FR_OK) {
memset(dp->dir, 0, 32);
memcpy(dp->dir + 0, dp->fn, 11);

# 2524
fs->wflag = 1;
}
}

return res;
}

# 2540
static FRESULT dir_remove (
DIR_E* dp
)
{
FRESULT res;
FATFS *fs = dp->obj.fs;

# 2567
res = move_window(fs, dp->sect);
if (res == FR_OK) {
dp->dir[0] = 0xE5;
fs->wflag = 1;
}


return res;
}

# 2586
static void get_fileinfo (
DIR_E* dp,
FILINFO* fno
)
{
UINT si, di;

# 2598
TCHAR c;



fno->fname[0] = 0;
if (dp->sect == 0) return;

# 2692
si = di = 0;
while (si < 11) {
c = (TCHAR)dp->dir[si++];
if (c == ' ') continue;
if (c == 0x05) c = 0xE5;
if (si == 9) fno->fname[di++] = '.';
fno->fname[di++] = c;
}
fno->fname[di] = 0;


fno->fattrib = dp->dir[11] & 0x3F;
fno->fsize = ld_dword(dp->dir + 28);
fno->ftime = ld_word(dp->dir + 22 + 0);
fno->fdate = ld_word(dp->dir + 22 + 2);
}

# 2801
static FRESULT create_name (
DIR_E* dp,
const TCHAR** path
)
{

# 2933
BYTE c, d, *sfn;
UINT ni, si, i;
const char *p;


p = *path; sfn = dp->fn;
memset(sfn, ' ', 11);
si = i = 0; ni = 8;

# 2954
for (;;) {
c = (BYTE)p[si++];
if (c <= ' ') break;
if (((c) == '/' || (c) == '\\')) {
while (((p[si]) == '/' || (p[si]) == '\\')) si++;
break;
}
if (c == '.' || i >= ni) {
if (ni == 11 || c != '.') return FR_INVALID_NAME;
i = 8; ni = 11;
continue;
}

# 2975
if (dbc_1st(c)) {
d = (BYTE)p[si++];
if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;
sfn[i++] = c;
sfn[i++] = d;
} else {
if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;
if (((c) >= 'a' && (c) <= 'z')) c -= 0x20;
sfn[i++] = c;
}
}
*path = &p[si];
if (i == 0) return FR_INVALID_NAME;

if (sfn[0] == 0xE5) sfn[0] = 0x05;
sfn[11] = (c <= ' ' || p[si] <= ' ') ? 0x04 : 0;

return FR_OK;

}

# 3003
static FRESULT follow_path (
DIR_E* dp,
const TCHAR* path
)
{
FRESULT res;
BYTE ns;
FATFS *fs = dp->obj.fs;

# 3018
{
while (((*path) == '/' || (*path) == '\\')) path++;
dp->obj.sclust = 0;
}

# 3039
if ((UINT)*path < ' ') {
dp->fn[11] = 0x80;
res = dir_sdi(dp, 0);

} else {
for (;;) {
res = create_name(dp, &path);
if (res != FR_OK) break;
res = dir_find(dp);
ns = dp->fn[11];
if (res != FR_OK) {
if (res == FR_NO_FILE) {
if (0 && (ns & 0x20)) {
if (!(ns & 0x04)) continue;
dp->fn[11] = 0x80;
res = FR_OK;
} else {
if (!(ns & 0x04)) res = FR_NO_PATH;
}
}
break;
}
if (ns & 0x04) break;

if (!(dp->obj.attr & 0x10)) {
res = FR_NO_PATH; break;
}

# 3074
{
dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % ((UINT)512));
}
}
}

return res;
}

# 3090
static int get_ldnumber (
const TCHAR** path
)
{
const TCHAR *tp, *tt;
TCHAR tc;
int i;
int vol = -1;

# 3103
tt = tp = *path;
if (!tp) return vol;
do tc = *tt++; while (!((UINT)(tc) < (0 ? ' ' : '!')) && tc != ':');

if (tc == ':') {
i = 1;
if (((*tp) >= '0' && (*tp) <= '9') && tp + 2 == tt) {
i = (int)*tp - '0';
}

# 3125
if (i < 1) {
vol = i;
*path = tt;
}
return vol;
}

# 3154
vol = 0;

return vol;
}

# 3238
static UINT check_fs (
FATFS* fs,
LBA_t sect
)
{
WORD w, sign;
BYTE b;


fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;
if (move_window(fs, sect) != FR_OK) return 4;
sign = ld_word(fs->win + 510);

# 3253
b = fs->win[0];
if (b == 0xEB || b == 0xE9 || b == 0xE8) {
if (sign == 0xAA55 && !memcmp(fs->win + 82, "FAT32   ", 8)) {
return 0;
}

w = ld_word(fs->win + 11);
b = fs->win[13];
if ((w & (w - 1)) == 0 && w >= 512 && w <= 512
&& b != 0 && (b & (b - 1)) == 0
&& ld_word(fs->win + 14) != 0
&& (UINT)fs->win[16] - 1 <= 1
&& ld_word(fs->win + 17) != 0
&& (ld_word(fs->win + 19) >= 128 || ld_dword(fs->win + 32) >= 0x10000)
&& ld_word(fs->win + 22) != 0) {
return 0;
}
}
return sign == 0xAA55 ? 2 : 3;
}

# 3278
static UINT find_volume (
FATFS* fs,
UINT part
)
{
UINT fmt, i;
DWORD mbr_pt[4];


fmt = check_fs(fs, 0);
posicao_cursor_lcd(1,14);
escreve_inteiro_lcd(fmt);
if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;

# 3316
if (0 && part > 4) return 3;
for (i = 0; i < 4; i++) {
mbr_pt[i] = ld_dword(fs->win + 446 + i * 16 + 8);
}
i = part ? part - 1 : 0;
do {
fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;
} while (part == 0 && fmt >= 2 && ++i < 4);
return fmt;
}

# 3334
static FRESULT mount_volume (
const TCHAR** path,
FATFS** rfs,
BYTE mode
)
{
int vol;
DSTATUS stat;
LBA_t bsect;
DWORD tsect, sysect, fasize, nclst, szbfat;
WORD nrsv;
FATFS *fs;
UINT fmt;



*rfs = 0;
vol = get_ldnumber(path);
if (vol < 0) return FR_INVALID_DRIVE;


fs = FatFs[vol];
if (!fs) return FR_NOT_ENABLED;

# 3360
*rfs = fs;

mode &= (BYTE)~0x01;
if (fs->fs_type != 0) {
stat = disk_status(fs->pdrv);
if (!(stat & 0x01)) {
if (!0 && mode && (stat & 0x04)) {
return FR_WRITE_PROTECTED;
}
return FR_OK;
}
}




fs->fs_type = 0;
fs->pdrv = (BYTE)(vol);
stat = disk_initialize(fs->pdrv);
if (stat & 0x01) {
return FR_NOT_READY;
}
if (!0 && mode && (stat & 0x04)) {
return FR_WRITE_PROTECTED;
}

# 3391
fmt = find_volume(fs, 0);
if (fmt == 4) return FR_DISK_ERR;
if (fmt >= 2) return FR_NO_FILESYSTEM;
bsect = fs->winsect;

# 3461
{
if (ld_word(fs->win + 11) != ((UINT)512)) return FR_NO_FILESYSTEM;

fasize = ld_word(fs->win + 22);
if (fasize == 0) fasize = ld_dword(fs->win + 36);
fs->fsize = fasize;

fs->n_fats = fs->win[16];
if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;
fasize *= fs->n_fats;

fs->csize = fs->win[13];
if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;

fs->n_rootdir = ld_word(fs->win + 17);
if (fs->n_rootdir % (((UINT)512) / 32)) return FR_NO_FILESYSTEM;

tsect = ld_word(fs->win + 19);
if (tsect == 0) tsect = ld_dword(fs->win + 32);

nrsv = ld_word(fs->win + 14);
if (nrsv == 0) return FR_NO_FILESYSTEM;


sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
if (tsect < sysect) return FR_NO_FILESYSTEM;
nclst = (tsect - sysect) / fs->csize;
if (nclst == 0) return FR_NO_FILESYSTEM;
fmt = 0;
if (nclst <= 0x0FFFFFF5) fmt = 3;
if (nclst <= 0xFFF5) fmt = 2;
if (nclst <= 0xFF5) fmt = 1;
if (fmt == 0) return FR_NO_FILESYSTEM;


fs->n_fatent = nclst + 2;
fs->volbase = bsect;
fs->fatbase = bsect + nrsv;
fs->database = bsect + sysect;
if (fmt == 3) {
if (ld_word(fs->win + 42) != 0) return FR_NO_FILESYSTEM;
if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;
fs->dirbase = ld_dword(fs->win + 44);
szbfat = fs->n_fatent * 4;
} else {
if (fs->n_rootdir == 0) return FR_NO_FILESYSTEM;
fs->dirbase = fs->fatbase + fasize;
szbfat = (fmt == 2) ?
fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
}
if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512)) return FR_NO_FILESYSTEM;



fs->last_clst = fs->free_clst = 0xFFFFFFFF;
fs->fsi_flag = 0x80;

if (fmt == 3
&& ld_word(fs->win + 48) == 1
&& move_window(fs, bsect + 1) == FR_OK)
{
fs->fsi_flag = 0;
if (ld_word(fs->win + 510) == 0xAA55
&& ld_dword(fs->win + 0) == 0x41615252
&& ld_dword(fs->win + 484) == 0x61417272)
{

fs->free_clst = ld_dword(fs->win + 488);


fs->last_clst = ld_dword(fs->win + 492);

}
}


}

fs->fs_type = (BYTE)fmt;
fs->id = ++Fsid;

# 3553
return FR_OK;
}

# 3563
static FRESULT validate (
FFOBJID* obj,
FATFS** rfs
)
{
FRESULT res = FR_INVALID_OBJECT;


if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {

# 3583
if (!(disk_status(obj->fs->pdrv) & 0x01)) {
res = FR_OK;
}

}
*rfs = (res == FR_OK) ? obj->fs : 0;
return res;
}

# 3607
FRESULT f_mount (
FATFS* fs,
const TCHAR* path,
BYTE opt
)
{
FATFS *cfs;
int vol;
FRESULT res;
const TCHAR *rp = path;



vol = get_ldnumber(&rp);
if (vol < 0) return FR_INVALID_DRIVE;
cfs = FatFs[vol];

if (cfs) {

# 3631
cfs->fs_type = 0;
}

if (fs) {
fs->fs_type = 0;

# 3639
}
FatFs[vol] = fs;

if (opt == 0) return FR_OK;

res = mount_volume(&path, &fs, 0);
return res;
}


DWORD get_fattime(void)
{
fat_time f_time;

return (DWORD)(f_time.ano ) << 25 |
(DWORD)(f_time.mes) << 21 |
(DWORD)(f_time.mes) << 16 |
(DWORD)(f_time.hora) << 11 |
(DWORD)(f_time.min) << 5 |
(DWORD)(f_time.seg) >> 1;
}

# 3665
FRESULT f_open (
FIL* fp,
const TCHAR* path,
BYTE mode
)
{
FRESULT res;
DIR_E dj;
FATFS *fs;

DWORD cl, bcs, clst, tm;
LBA_t sc;
FSIZE_t ofs;




if (!fp) return FR_INVALID_OBJECT;


mode &= 0 ? 0x01 : 0x01 | 0x02 | 0x08 | 0x04 | 0x10 | 0x30;
res = mount_volume(&path, &fs, mode);
if (res == FR_OK) {
dj.obj.fs = fs;
;
res = follow_path(&dj, path);

if (res == FR_OK) {
if (dj.fn[11] & 0x80) {
res = FR_INVALID_NAME;
}

# 3701
}

if (mode & (0x08 | 0x10 | 0x04)) {
if (res != FR_OK) {
if (res == FR_NO_FILE) {



res = dir_register(&dj);

}
mode |= 0x08;
}
else {
if (dj.obj.attr & (0x01 | 0x10)) {
res = FR_DENIED;
} else {
if (mode & 0x04) res = FR_EXIST;
}
}
if (res == FR_OK && (mode & 0x08)) {

# 3740
{

tm = get_fattime();
st_dword(dj.dir + 14, tm);
st_dword(dj.dir + 22, tm);
cl = ld_clust(fs, dj.dir);
dj.dir[11] = 0x20;
st_clust(fs, dj.dir, 0);
st_dword(dj.dir + 28, 0);
fs->wflag = 1;
if (cl != 0) {
sc = fs->winsect;
res = remove_chain(&dj.obj, cl, 0);
if (res == FR_OK) {
res = move_window(fs, sc);
fs->last_clst = cl - 1;
}
}
}
}
}
else {
if (res == FR_OK) {
if (dj.obj.attr & 0x10) {
res = FR_NO_FILE;
} else {
if ((mode & 0x02) && (dj.obj.attr & 0x01)) {
res = FR_DENIED;
}
}
}
}
if (res == FR_OK) {
if (mode & 0x08) mode |= 0x40;
fp->dir_sect = fs->winsect;
fp->dir_ptr = dj.dir;

# 3780
}

# 3793
if (res == FR_OK) {

# 3802
{
fp->obj.sclust = ld_clust(fs, dj.dir);
fp->obj.objsize = ld_dword(dj.dir + 28);
}

# 3809
fp->obj.fs = fs;
fp->obj.id = fs->id;
fp->flag = mode;
fp->err = 0;
fp->sect = 0;
fp->fptr = 0;

# 3819
if ((mode & 0x20) && fp->obj.objsize > 0) {
fp->fptr = fp->obj.objsize;
bcs = (DWORD)fs->csize * ((UINT)512);
clst = fp->obj.sclust;
for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
clst = get_fat(&fp->obj, clst);
if (clst <= 1) res = FR_INT_ERR;
if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
}
fp->clust = clst;
if (res == FR_OK && ofs % ((UINT)512)) {
sc = clst2sect(fs, clst);
if (sc == 0) {
res = FR_INT_ERR;
} else {
fp->sect = sc + (DWORD)(ofs / ((UINT)512));

# 3838
}
}

# 3843
}

}

;
}

if (res != FR_OK) fp->obj.fs = 0;

return res;
}

# 3862
FRESULT f_read (
FIL* fp,
void* buff,
UINT btr,
UINT* br
)
{
FRESULT res;
FATFS *fs;
DWORD clst;
LBA_t sect;
FSIZE_t remain;
UINT rcnt, cc, csect;
BYTE *rbuff = (BYTE*)buff;


*br = 0;
res = validate(&fp->obj, &fs);
if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) return res;
if (!(fp->flag & 0x01)) return FR_DENIED;
remain = fp->obj.objsize - fp->fptr;
if (btr > remain) btr = (UINT)remain;

for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
if (fp->fptr % ((UINT)512) == 0) {
csect = (UINT)(fp->fptr / ((UINT)512) & (fs->csize - 1));
if (csect == 0) {
if (fp->fptr == 0) {
clst = fp->obj.sclust;
} else {

# 3897
{
clst = get_fat(&fp->obj, fp->clust);
}
}
if (clst < 2) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
fp->clust = clst;
}
sect = clst2sect(fs, fp->clust);
if (sect == 0) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
sect += csect;
cc = btr / ((UINT)512);
if (cc > 0) {
if (csect + cc > fs->csize) {
cc = fs->csize - csect;
}
if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };


if (fs->wflag && fs->winsect - sect < cc) {
memcpy(rbuff + ((fs->winsect - sect) * ((UINT)512)), fs->win, ((UINT)512));
}

# 3925
rcnt = ((UINT)512) * cc;
continue;
}

# 3939
fp->sect = sect;
}
rcnt = ((UINT)512) - (UINT)fp->fptr % ((UINT)512);
if (rcnt > btr) rcnt = btr;

if (move_window(fs, fp->sect) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
memcpy(rbuff, fs->win + fp->fptr % ((UINT)512), rcnt);

# 3949
}

return FR_OK;
}

# 3962
FRESULT f_write (
FIL* fp,
const void* buff,
UINT btw,
UINT* bw
)
{
FRESULT res;
FATFS *fs;
DWORD clst;
LBA_t sect;
UINT wcnt, cc, csect;
const BYTE *wbuff = (const BYTE*)buff;


*bw = 0;
res = validate(&fp->obj, &fs);
if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) return res;
if (!(fp->flag & 0x02)) return FR_DENIED;


if ((!0 || fs->fs_type != 4) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
}

for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
if (fp->fptr % ((UINT)512) == 0) {
csect = (UINT)(fp->fptr / ((UINT)512)) & (fs->csize - 1);
if (csect == 0) {
if (fp->fptr == 0) {
clst = fp->obj.sclust;
if (clst == 0) {
clst = create_chain(&fp->obj, 0);
}
} else {

# 4002
{
clst = create_chain(&fp->obj, fp->clust);
}
}
if (clst == 0) break;
if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
fp->clust = clst;
if (fp->obj.sclust == 0) fp->obj.sclust = clst;
}

if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };

# 4020
sect = clst2sect(fs, fp->clust);
if (sect == 0) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
sect += csect;
cc = btw / ((UINT)512);
if (cc > 0) {
if (csect + cc > fs->csize) {
cc = fs->csize - csect;
}
if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };


if (fs->winsect - sect < cc) {
memcpy(fs->win, wbuff + ((fs->winsect - sect) * ((UINT)512)), ((UINT)512));
fs->wflag = 0;
}

# 4042
wcnt = ((UINT)512) * cc;
continue;
}

if (fp->fptr >= fp->obj.objsize) {
if (sync_window(fs) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
fs->winsect = sect;
}

# 4057
fp->sect = sect;
}
wcnt = ((UINT)512) - (UINT)fp->fptr % ((UINT)512);
if (wcnt > btw) wcnt = btw;

if (move_window(fs, fp->sect) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
memcpy(fs->win + fp->fptr % ((UINT)512), wbuff, wcnt);
fs->wflag = 1;

# 4069
}

fp->flag |= 0x40;

return FR_OK;
}

# 4083
FRESULT f_sync (
FIL* fp
)
{
FRESULT res;
FATFS *fs;
DWORD tm;
BYTE *dir;


res = validate(&fp->obj, &fs);
if (res == FR_OK) {
if (fp->flag & 0x40) {

# 4103
tm = get_fattime();

# 4135
{
res = move_window(fs, fp->dir_sect);
if (res == FR_OK) {
dir = fp->dir_ptr;
dir[11] |= 0x20;
st_clust(fp->obj.fs, dir, fp->obj.sclust);
st_dword(dir + 28, (DWORD)fp->obj.objsize);
st_dword(dir + 22, tm);
st_word(dir + 18, 0);
fs->wflag = 1;
res = sync_fs(fs);
fp->flag &= (BYTE)~0x40;
}
}
}
}

return res;
}

# 4164
FRESULT f_close (
FIL* fp
)
{
FRESULT res;
FATFS *fs;


res = f_sync(fp);
if (res == FR_OK)

{
res = validate(&fp->obj, &fs);
if (res == FR_OK) {




fp->obj.fs = 0;

# 4187
}
}
return res;
}

# 4379
FRESULT f_lseek (
FIL* fp,
FSIZE_t ofs
)
{
FRESULT res;
FATFS *fs;
DWORD clst, bcs;
LBA_t nsect;
FSIZE_t ifptr;

# 4395
res = validate(&fp->obj, &fs);
if (res == FR_OK) res = (FRESULT)fp->err;

# 4402
if (res != FR_OK) return res;

# 4457
{

# 4461
if (ofs > fp->obj.objsize && (0 || !(fp->flag & 0x02))) {
ofs = fp->obj.objsize;
}
ifptr = fp->fptr;
fp->fptr = nsect = 0;
if (ofs > 0) {
bcs = (DWORD)fs->csize * ((UINT)512);
if (ifptr > 0 &&
(ofs - 1) / bcs >= (ifptr - 1) / bcs) {
fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);
ofs -= fp->fptr;
clst = fp->clust;
} else {
clst = fp->obj.sclust;

if (clst == 0) {
clst = create_chain(&fp->obj, 0);
if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
fp->obj.sclust = clst;
}

fp->clust = clst;
}
if (clst != 0) {
while (ofs > bcs) {
ofs -= bcs; fp->fptr += bcs;

if (fp->flag & 0x02) {
if (0 && fp->fptr > fp->obj.objsize) {
fp->obj.objsize = fp->fptr;
fp->flag |= 0x40;
}
clst = create_chain(&fp->obj, clst);
if (clst == 0) {
ofs = 0; break;
}
} else

{
clst = get_fat(&fp->obj, clst);
}
if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
if (clst <= 1 || clst >= fs->n_fatent) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
fp->clust = clst;
}
fp->fptr += ofs;
if (ofs % ((UINT)512)) {
nsect = clst2sect(fs, clst);
if (nsect == 0) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
nsect += (DWORD)(ofs / ((UINT)512));
}
}
}
if (!0 && fp->fptr > fp->obj.objsize) {
fp->obj.objsize = fp->fptr;
fp->flag |= 0x40;
}
if (fp->fptr % ((UINT)512) && nsect != fp->sect) {

# 4529
fp->sect = nsect;
}
}

return res;
}

# 4543
FRESULT f_opendir (
DIR_E* dp,
const TCHAR* path
)
{
FRESULT res;
FATFS *fs;



if (!dp) return FR_INVALID_OBJECT;


res = mount_volume(&path, &fs, 0);
if (res == FR_OK) {
dp->obj.fs = fs;
;
res = follow_path(dp, path);
if (res == FR_OK) {
if (!(dp->fn[11] & 0x80)) {
if (dp->obj.attr & 0x10) {

# 4572
{
dp->obj.sclust = ld_clust(fs, dp->dir);
}
} else {
res = FR_NO_PATH;
}
}
if (res == FR_OK) {
dp->obj.id = fs->id;
res = dir_sdi(dp, 0);

# 4592
}
}
;
if (res == FR_NO_FILE) res = FR_NO_PATH;
}
if (res != FR_OK) dp->obj.fs = 0;

return res;
}

# 4609
FRESULT f_closedir (
DIR_E *dp
)
{
FRESULT res;
FATFS *fs;


res = validate(&dp->obj, &fs);
if (res == FR_OK) {




dp->obj.fs = 0;

# 4628
}
return res;
}

# 4639
FRESULT f_readdir (
DIR_E* dp,
FILINFO* fno
)
{
FRESULT res;
FATFS *fs;



res = validate(&dp->obj, &fs);
if (res == FR_OK) {
if (!fno) {
res = dir_sdi(dp, 0);
} else {
;
res = dir_read(dp, 0);
if (res == FR_NO_FILE) res = FR_OK;
if (res == FR_OK) {
get_fileinfo(dp, fno);
res = dir_next(dp, 0);
if (res == FR_NO_FILE) res = FR_OK;
}
;
}
}
return res;
}

# 4727
FRESULT f_stat (
const TCHAR* path,
FILINFO* fno
)
{
FRESULT res;
DIR_E dj;




res = mount_volume(&path, &dj.obj.fs, 0);
if (res == FR_OK) {
;
res = follow_path(&dj, path);
if (res == FR_OK) {
if (dj.fn[11] & 0x80) {
res = FR_INVALID_NAME;
} else {
if (fno) get_fileinfo(&dj, fno);
}
}
;
}

return res;
}

# 4762
FRESULT f_getfree (
const TCHAR* path,
DWORD* nclst,
FATFS** fatfs
)
{
FRESULT res;
FATFS *fs;
DWORD nfree, clst, stat;
LBA_t sect;
UINT i;
FFOBJID obj;



res = mount_volume(&path, &fs, 0);
if (res == FR_OK) {
*fatfs = fs;

if (fs->free_clst <= fs->n_fatent - 2) {
*nclst = fs->free_clst;
} else {

nfree = 0;
if (fs->fs_type == 1) {
clst = 2; obj.fs = fs;
do {
stat = get_fat(&obj, clst);
if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
if (stat == 1) { res = FR_INT_ERR; break; }
if (stat == 0) nfree++;
} while (++clst < fs->n_fatent);
} else {

# 4816
{
clst = fs->n_fatent;
sect = fs->fatbase;
i = 0;
do {
if (i == 0) {
res = move_window(fs, sect++);
if (res != FR_OK) break;
}
if (fs->fs_type == 2) {
if (ld_word(fs->win + i) == 0) nfree++;
i += 2;
} else {
if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
i += 4;
}
i %= ((UINT)512);
} while (--clst);
}
}
if (res == FR_OK) {
*nclst = nfree;
fs->free_clst = nfree;
fs->fsi_flag |= 1;
}
}
}

return res;
}

# 4854
FRESULT f_truncate (
FIL* fp
)
{
FRESULT res;
FATFS *fs;
DWORD ncl;


res = validate(&fp->obj, &fs);
if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) return res;
if (!(fp->flag & 0x02)) return FR_DENIED;

if (fp->fptr < fp->obj.objsize) {
if (fp->fptr == 0) {
res = remove_chain(&fp->obj, fp->obj.sclust, 0);
fp->obj.sclust = 0;
} else {
ncl = get_fat(&fp->obj, fp->clust);
res = FR_OK;
if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
if (ncl == 1) res = FR_INT_ERR;
if (res == FR_OK && ncl < fs->n_fatent) {
res = remove_chain(&fp->obj, ncl, fp->clust);
}
}
fp->obj.objsize = fp->fptr;
fp->flag |= 0x40;

# 4891
if (res != FR_OK) { fp->err = (BYTE)(res); return res; };
}

return res;
}

# 4904
FRESULT f_unlink (
const TCHAR* path
)
{
FRESULT res;
DIR_E dj, sdj;
DWORD dclst = 0;
FATFS *fs;

# 4915




res = mount_volume(&path, &fs, 0x02);
if (res == FR_OK) {
dj.obj.fs = fs;
;
res = follow_path(&dj, path);
if (0 && res == FR_OK && (dj.fn[11] & 0x20)) {
res = FR_INVALID_NAME;
}

# 4930
if (res == FR_OK) {
if (dj.fn[11] & 0x80) {
res = FR_INVALID_NAME;
} else {
if (dj.obj.attr & 0x01) {
res = FR_DENIED;
}
}
if (res == FR_OK) {

# 4946
{
dclst = ld_clust(fs, dj.dir);
}
if (dj.obj.attr & 0x10) {

# 4955
{
sdj.obj.fs = fs;
sdj.obj.sclust = dclst;

# 4964
res = dir_sdi(&sdj, 0);
if (res == FR_OK) {
res = dir_read(&sdj, 0);
if (res == FR_OK) res = FR_DENIED;
if (res == FR_NO_FILE) res = FR_OK;
}
}
}
}
if (res == FR_OK) {
res = dir_remove(&dj);
if (res == FR_OK && dclst != 0) {



res = remove_chain(&dj.obj, dclst, 0);

}
if (res == FR_OK) res = sync_fs(fs);
}
}
;
}

return res;
}

# 4998
FRESULT f_mkdir (
const TCHAR* path
)
{
FRESULT res;
DIR_E dj;
FFOBJID sobj;
FATFS *fs;
DWORD dcl, pcl, tm;



res = mount_volume(&path, &fs, 0x02);
if (res == FR_OK) {
dj.obj.fs = fs;
;
res = follow_path(&dj, path);
if (res == FR_OK) res = FR_EXIST;
if (0 && res == FR_NO_FILE && (dj.fn[11] & 0x20)) {
res = FR_INVALID_NAME;
}
if (res == FR_NO_FILE) {
sobj.fs = fs;
dcl = create_chain(&sobj, 0);
res = FR_OK;
if (dcl == 0) res = FR_DENIED;
if (dcl == 1) res = FR_INT_ERR;
if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
tm = get_fattime();
if (res == FR_OK) {
res = dir_clear(fs, dcl);
if (res == FR_OK) {
if (!0 || fs->fs_type != 4) {
memset(fs->win + 0, ' ', 11);
fs->win[0] = '.';
fs->win[11] = 0x10;
st_dword(fs->win + 22, tm);
st_clust(fs, fs->win, dcl);
memcpy(fs->win + 32, fs->win, 32);
fs->win[32 + 1] = '.'; pcl = dj.obj.sclust;
st_clust(fs, fs->win + 32, pcl);
fs->wflag = 1;
}
res = dir_register(&dj);
}
}
if (res == FR_OK) {

# 5056
{
st_dword(dj.dir + 22, tm);
st_clust(fs, dj.dir, dcl);
dj.dir[11] = 0x10;
fs->wflag = 1;
}
if (res == FR_OK) {
res = sync_fs(fs);
}
} else {
remove_chain(&sobj, dcl, 0);
}
}
;
}

return res;
}

# 5082
FRESULT f_rename (
const TCHAR* path_old,
const TCHAR* path_new
)
{
FRESULT res;
DIR_E djo, djn;
FATFS *fs;
BYTE buf[0 ? 32 * 2 : 32], *dir;
LBA_t sect;



get_ldnumber(&path_new);
res = mount_volume(&path_old, &fs, 0x02);
if (res == FR_OK) {
djo.obj.fs = fs;
;
res = follow_path(&djo, path_old);
if (res == FR_OK && (djo.fn[11] & (0x20 | 0x80))) res = FR_INVALID_NAME;

# 5107
if (res == FR_OK) {

# 5134
{
memcpy(buf, djo.dir, 32);
memcpy(&djn, &djo, sizeof (DIR_E));
res = follow_path(&djn, path_new);
if (res == FR_OK) {
res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
}
if (res == FR_NO_FILE) {
res = dir_register(&djn);
if (res == FR_OK) {
dir = djn.dir;
memcpy(dir + 13, buf + 13, 32 - 13);
dir[11] = buf[11];
if (!(dir[11] & 0x10)) dir[11] |= 0x20;
fs->wflag = 1;
if ((dir[11] & 0x10) && djo.obj.sclust != djn.obj.sclust) {
sect = clst2sect(fs, ld_clust(fs, dir));
if (sect == 0) {
res = FR_INT_ERR;
} else {

res = move_window(fs, sect);
dir = fs->win + 32 * 1;
if (res == FR_OK && dir[1] == '.') {
st_clust(fs, dir, djn.obj.sclust);
fs->wflag = 1;
}
}
}
}
}
}
if (res == FR_OK) {
res = dir_remove(&djo);
if (res == FR_OK) {
res = sync_fs(fs);
}
}

}
;
}

return res;
}

# 6350
TCHAR* f_gets (
TCHAR* buff,
int len,
FIL* fp
)
{
int nc = 0;
TCHAR *p = buff;
BYTE s[4];
UINT rc;
DWORD dc;

# 6456
len -= 1;
while (nc < len) {
f_read(fp, s, 1, &rc);
if (rc != 1) break;
dc = s[0];
if (2 == 2 && dc == '\r') continue;
*p++ = (TCHAR)dc; nc++;
if (dc == '\n') break;
}


*p = 0;
return nc ? buff : 0;
}

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 6485 "bibliotecas/ff.c"
typedef struct {
FIL *fp;
int idx, nchr;

# 6494
BYTE buf[64];
} putbuff;




static void putc_bfd (putbuff* pb, TCHAR c)
{
UINT n;
int i, nc;

# 6512
if (2 == 2 && c == '\n') {
putc_bfd(pb, '\r');
}

i = pb->idx;
if (i < 0) return;
nc = pb->nchr;

# 6617
pb->buf[i++] = (BYTE)c;


if (i >= (int)(sizeof pb->buf) - 4) {
f_write(pb->fp, pb->buf, (UINT)i, &n);
i = (n == (UINT)i) ? 0 : -1;
}
pb->idx = i;
pb->nchr = nc + 1;
}




static int putc_flush (putbuff* pb)
{
UINT nw;

if ( pb->idx >= 0
&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
&& (UINT)pb->idx == nw) return pb->nchr;
return -1;
}




static void putc_init (putbuff* pb, FIL* fp)
{
memset(pb, 0, sizeof (putbuff));
pb->fp = fp;
}



int f_putc (
TCHAR c,
FIL* fp
)
{
putbuff pb;


putc_init(&pb, fp);
putc_bfd(&pb, c);
return putc_flush(&pb);
}

# 6672
int f_puts (
const TCHAR* str,
FIL* fp
)
{
putbuff pb;


putc_init(&pb, fp);
while (*str) putc_bfd(&pb, *str++);
return putc_flush(&pb);
}

# 6813
int f_printf (
FIL* fp,
const TCHAR* fmt,
...
)
{
va_list arp;
putbuff pb;
UINT i, j, w, f, r;
int prec;



DWORD v;

TCHAR tc, pad, *tp;
TCHAR nul = 0;
char d, str[32];


putc_init(&pb, fp);

*arp = __va_start();

for (;;) {
tc = *fmt++;
if (tc == 0) break;
if (tc != '%') {
putc_bfd(&pb, tc);
continue;
}
f = w = 0; pad = ' '; prec = -1;
tc = *fmt++;
if (tc == '0') {
pad = '0'; tc = *fmt++;
} else if (tc == '-') {
f = 2; tc = *fmt++;
}
if (tc == '*') {
w = (*(int *)__va_arg((*(int **)arp), (int)0));
tc = *fmt++;
} else {
while (((tc) >= '0' && (tc) <= '9')) {
w = w * 10 + tc - '0';
tc = *fmt++;
}
}
if (tc == '.') {
tc = *fmt++;
if (tc == '*') {
prec = (*(int *)__va_arg((*(int **)arp), (int)0));
tc = *fmt++;
} else {
prec = 0;
while (((tc) >= '0' && (tc) <= '9')) {
prec = prec * 10 + tc - '0';
tc = *fmt++;
}
}
}
if (tc == 'l') {
f |= 4; tc = *fmt++;

# 6880
}
if (tc == 0) break;
switch (tc) {
case 'b':
r = 2; break;
case 'o':
r = 8; break;
case 'd':
case 'u':
r = 10; break;
case 'x':
case 'X':
r = 16; break;
case 'c':
putc_bfd(&pb, (TCHAR)(*(int *)__va_arg((*(int **)arp), (int)0)));
continue;
case 's':
tp = (*(TCHAR* *)__va_arg((*(TCHAR* **)arp), (TCHAR*)0));
if (!tp) tp = &nul;
for (j = 0; tp[j]; j++) ;
if (prec >= 0 && j > (UINT)prec) j = prec;
for ( ; !(f & 2) && j < w; j++) putc_bfd(&pb, pad);
while (*tp && prec--) putc_bfd(&pb, *tp++);
while (j++ < w) putc_bfd(&pb, ' ');
continue;

# 6915
default:
putc_bfd(&pb, tc); continue;
}

# 6934
if (f & 4) {
v = (DWORD)(*(long *)__va_arg((*(long **)arp), (long)0));
} else {
v = (tc == 'd') ? (DWORD)(long)(*(int *)__va_arg((*(int **)arp), (int)0)) : (DWORD)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
}
if (tc == 'd' && (v & 0x80000000)) {
v = 0 - v; f |= 1;
}

i = 0;
do {
d = (char)(v % r); v /= r;
if (d > 9) d += (tc == 'x') ? 0x27 : 0x07;
str[i++] = d + '0';
} while (v && i < 32);
if (f & 1) str[i++] = '-';

for (j = i; !(f & 2) && j < w; j++) putc_bfd(&pb, pad);
do putc_bfd(&pb, (TCHAR)str[--i]); while (i);
while (j++ < w) putc_bfd(&pb, ' ');
}

;

return putc_flush(&pb);
}

