

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 11 15:39:45 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           ; Version 1.45
    83                           ; Generated 16/11/2017 GMT
    84                           ; 
    85                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F4550 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataBANK1
   118  003326                     __pidataBANK1:
   119                           	opt stack 0
   120                           
   121                           ;initializer for escreve_inteiro_uart@F3956
   122  003326  30                 	db	48
   123  003327  30                 	db	48
   124  003328  30                 	db	48
   125  003329  30                 	db	48
   126  00332A  30                 	db	48
   127  00332B  30                 	db	48
   128  00332C  00                 	db	0
   129                           
   130                           ;initializer for escreve_inteiro_lcd@F3966
   131  00332D  30                 	db	48
   132  00332E  30                 	db	48
   133  00332F  30                 	db	48
   134  003330  30                 	db	48
   135  003331  30                 	db	48
   136  003332  30                 	db	48
   137  003333  00                 	db	0
   138                           
   139                           ;initializer for _fileName
   140  003334  74                 	db	116
   141  003335  65                 	db	101
   142  003336  6C                 	db	108
   143  003337  65                 	db	101
   144  003338  6D                 	db	109
   145  003339  65                 	db	101
   146  00333A  74                 	db	116
   147  00333B  72                 	db	114
   148  00333C  69                 	db	105
   149  00333D  61                 	db	97
   150  00333E  2E                 	db	46
   151  00333F  74                 	db	116
   152  003340  78                 	db	120
   153  003341  74                 	db	116
   154  003342  00                 	db	0
   155                           
   156                           	psect	mediumconst
   157  00605A                     __pmediumconst:
   158                           	opt stack 0
   159  00605A  00                 	db	0
   160  00605B                     create_name@cvt:
   161                           	opt stack 0
   162  00605B  80                 	db	128
   163  00605C  9A                 	db	154
   164  00605D  90                 	db	144
   165  00605E  41                 	db	65
   166  00605F  8E                 	db	142
   167  006060  41                 	db	65
   168  006061  8F                 	db	143
   169  006062  80                 	db	128
   170  006063  45                 	db	69
   171  006064  45                 	db	69
   172  006065  45                 	db	69
   173  006066  49                 	db	73
   174  006067  49                 	db	73
   175  006068  49                 	db	73
   176  006069  8E                 	db	142
   177  00606A  8F                 	db	143
   178  00606B  90                 	db	144
   179  00606C  92                 	db	146
   180  00606D  92                 	db	146
   181  00606E  4F                 	db	79
   182  00606F  99                 	db	153
   183  006070  4F                 	db	79
   184  006071  55                 	db	85
   185  006072  55                 	db	85
   186  006073  59                 	db	89
   187  006074  99                 	db	153
   188  006075  9A                 	db	154
   189  006076  9B                 	db	155
   190  006077  9C                 	db	156
   191  006078  9D                 	db	157
   192  006079  9E                 	db	158
   193  00607A  9F                 	db	159
   194  00607B  41                 	db	65
   195  00607C  49                 	db	73
   196  00607D  4F                 	db	79
   197  00607E  55                 	db	85
   198  00607F  A5                 	db	165
   199  006080  A5                 	db	165
   200  006081  A6                 	db	166
   201  006082  A7                 	db	167
   202  006083  A8                 	db	168
   203  006084  A9                 	db	169
   204  006085  AA                 	db	170
   205  006086  AB                 	db	171
   206  006087  AC                 	db	172
   207  006088  21                 	db	33
   208  006089  AE                 	db	174
   209  00608A  AF                 	db	175
   210  00608B  B0                 	db	176
   211  00608C  B1                 	db	177
   212  00608D  B2                 	db	178
   213  00608E  B3                 	db	179
   214  00608F  B4                 	db	180
   215  006090  B5                 	db	181
   216  006091  B6                 	db	182
   217  006092  B7                 	db	183
   218  006093  B8                 	db	184
   219  006094  B9                 	db	185
   220  006095  BA                 	db	186
   221  006096  BB                 	db	187
   222  006097  BC                 	db	188
   223  006098  BD                 	db	189
   224  006099  BE                 	db	190
   225  00609A  BF                 	db	191
   226  00609B  C0                 	db	192
   227  00609C  C1                 	db	193
   228  00609D  C2                 	db	194
   229  00609E  C3                 	db	195
   230  00609F  C4                 	db	196
   231  0060A0  C5                 	db	197
   232  0060A1  C6                 	db	198
   233  0060A2  C7                 	db	199
   234  0060A3  C8                 	db	200
   235  0060A4  C9                 	db	201
   236  0060A5  CA                 	db	202
   237  0060A6  CB                 	db	203
   238  0060A7  CC                 	db	204
   239  0060A8  CD                 	db	205
   240  0060A9  CE                 	db	206
   241  0060AA  CF                 	db	207
   242  0060AB  D0                 	db	208
   243  0060AC  D1                 	db	209
   244  0060AD  D2                 	db	210
   245  0060AE  D3                 	db	211
   246  0060AF  D4                 	db	212
   247  0060B0  D5                 	db	213
   248  0060B1  D6                 	db	214
   249  0060B2  D7                 	db	215
   250  0060B3  D8                 	db	216
   251  0060B4  D9                 	db	217
   252  0060B5  DA                 	db	218
   253  0060B6  DB                 	db	219
   254  0060B7  DC                 	db	220
   255  0060B8  DD                 	db	221
   256  0060B9  DE                 	db	222
   257  0060BA  DF                 	db	223
   258  0060BB  E0                 	db	224
   259  0060BC  E1                 	db	225
   260  0060BD  E2                 	db	226
   261  0060BE  E3                 	db	227
   262  0060BF  E4                 	db	228
   263  0060C0  E5                 	db	229
   264  0060C1  E6                 	db	230
   265  0060C2  E7                 	db	231
   266  0060C3  E8                 	db	232
   267  0060C4  E9                 	db	233
   268  0060C5  EA                 	db	234
   269  0060C6  EB                 	db	235
   270  0060C7  EC                 	db	236
   271  0060C8  ED                 	db	237
   272  0060C9  EE                 	db	238
   273  0060CA  EF                 	db	239
   274  0060CB  F0                 	db	240
   275  0060CC  F1                 	db	241
   276  0060CD  F2                 	db	242
   277  0060CE  F3                 	db	243
   278  0060CF  F4                 	db	244
   279  0060D0  F5                 	db	245
   280  0060D1  F6                 	db	246
   281  0060D2  F7                 	db	247
   282  0060D3  F8                 	db	248
   283  0060D4  F9                 	db	249
   284  0060D5  FA                 	db	250
   285  0060D6  FB                 	db	251
   286  0060D7  FC                 	db	252
   287  0060D8  FD                 	db	253
   288  0060D9  FE                 	db	254
   289  0060DA  FF                 	db	255
   290  0060DB                     __end_ofcreate_name@cvt:
   291                           	opt stack 0
   292  0060DB                     leitura_chave@F3842:
   293                           	opt stack 0
   294  0060DB  20                 	db	32
   295  0060DC  49                 	db	73
   296  0060DD  67                 	db	103
   297  0060DE  6E                 	db	110
   298  0060DF  20                 	db	32
   299  0060E0  4F                 	db	79
   300  0060E1  6E                 	db	110
   301  0060E2  00                 	db	0
   302  0060E3  00                 	db	0
   303  0060E4  00                 	db	0
   304  0060E5  00                 	db	0
   305  0060E6  00                 	db	0
   306  0060E7  00                 	db	0
   307  0060E8  00                 	db	0
   308  0060E9  00                 	db	0
   309  0060EA  00                 	db	0
   310  0060EB  00                 	db	0
   311  0060EC                     __end_ofleitura_chave@F3842:
   312                           	opt stack 0
   313  0060EC                     leitura_chave@F3840:
   314                           	opt stack 0
   315  0060EC  20                 	db	32
   316  0060ED  49                 	db	73
   317  0060EE  67                 	db	103
   318  0060EF  6E                 	db	110
   319  0060F0  20                 	db	32
   320  0060F1  43                 	db	67
   321  0060F2  72                 	db	114
   322  0060F3  61                 	db	97
   323  0060F4  6E                 	db	110
   324  0060F5  6B                 	db	107
   325  0060F6  00                 	db	0
   326  0060F7  00                 	db	0
   327  0060F8  00                 	db	0
   328  0060F9  00                 	db	0
   329  0060FA  00                 	db	0
   330  0060FB  00                 	db	0
   331  0060FC  00                 	db	0
   332  0060FD                     __end_ofleitura_chave@F3840:
   333                           	opt stack 0
   334  0060FD                     leitura_chave@F3838:
   335                           	opt stack 0
   336  0060FD  20                 	db	32
   337  0060FE  49                 	db	73
   338  0060FF  67                 	db	103
   339  006100  6E                 	db	110
   340  006101  20                 	db	32
   341  006102  4F                 	db	79
   342  006103  66                 	db	102
   343  006104  66                 	db	102
   344  006105  00                 	db	0
   345  006106  00                 	db	0
   346  006107  00                 	db	0
   347  006108  00                 	db	0
   348  006109  00                 	db	0
   349  00610A  00                 	db	0
   350  00610B  00                 	db	0
   351  00610C  00                 	db	0
   352  00610D  00                 	db	0
   353  00610E                     __end_ofleitura_chave@F3838:
   354                           	opt stack 0
   355  00610E                     mensagem_inicial@F4011:
   356                           	opt stack 0
   357  00610E  20                 	db	32
   358  00610F  31                 	db	49
   359  006110  38                 	db	56
   360  006111  2F                 	db	47
   361  006112  30                 	db	48
   362  006113  31                 	db	49
   363  006114  2F                 	db	47
   364  006115  32                 	db	50
   365  006116  30                 	db	48
   366  006117  32                 	db	50
   367  006118  32                 	db	50
   368  006119  20                 	db	32
   369  00611A  20                 	db	32
   370  00611B  20                 	db	32
   371  00611C  00                 	db	0
   372  00611D  00                 	db	0
   373  00611E  00                 	db	0
   374  00611F                     __end_ofmensagem_inicial@F4011:
   375                           	opt stack 0
   376  00611F                     mensagem_inicial@F4009:
   377                           	opt stack 0
   378  00611F  53                 	db	83
   379  006120  44                 	db	68
   380  006121  43                 	db	67
   381  006122  61                 	db	97
   382  006123  72                 	db	114
   383  006124  64                 	db	100
   384  006125  20                 	db	32
   385  006126  49                 	db	73
   386  006127  6E                 	db	110
   387  006128  69                 	db	105
   388  006129  74                 	db	116
   389  00612A  20                 	db	32
   390  00612B  20                 	db	32
   391  00612C  20                 	db	32
   392  00612D  00                 	db	0
   393  00612E  00                 	db	0
   394  00612F  00                 	db	0
   395  006130                     __end_ofmensagem_inicial@F4009:
   396                           	opt stack 0
   397  006130                     _dpowers:
   398                           	opt stack 0
   399  006130  0001               	dw	1
   400  006132  000A               	dw	10
   401  006134  0064               	dw	100
   402  006136  03E8               	dw	1000
   403  006138  2710               	dw	10000
   404  00613A                     __end_of_dpowers:
   405                           	opt stack 0
   406  0000                     _RCSTA	set	4011
   407  0000                     _TXSTA	set	4012
   408  0000                     _RCREG	set	4014
   409  0000                     _RCSTAbits	set	4011
   410  0000                     _TXREG	set	4013
   411  0000                     _SPBRG	set	4015
   412  0000                     _PIR2bits	set	4001
   413  0000                     _EECON2	set	4007
   414  0000                     _EECON1bits	set	4006
   415  0000                     _EEDATA	set	4008
   416  0000                     _EEADR	set	4009
   417  0000                     _PR2	set	4043
   418  0000                     _TMR2	set	4044
   419  0000                     _T2CON	set	4042
   420  0000                     _OSCCONbits	set	4051
   421  0000                     _TRISE	set	3990
   422  0000                     _TRISC	set	3988
   423  0000                     _TRISA	set	3986
   424  0000                     _TRISD	set	3989
   425  0000                     _LATB	set	3978
   426  0000                     _TRISB	set	3987
   427  0000                     _TMR0L	set	4054
   428  0000                     _TMR0H	set	4055
   429  0000                     _PIE1	set	3997
   430  0000                     _INTCON3	set	4080
   431  0000                     _INTCON2	set	4081
   432  0000                     _INTCON	set	4082
   433  0000                     _SPPCFG	set	3939
   434  0000                     _SPPCON	set	3941
   435  0000                     _T0CON	set	4053
   436  0000                     _PORTDbits	set	3971
   437  0000                     _TRISDbits	set	3989
   438  0000                     _PORTEbits	set	3972
   439  0000                     _PORTCbits	set	3970
   440  0000                     _SSPBUF	set	4041
   441  0000                     _TRISCbits	set	3988
   442  0000                     _SSPSTATbits	set	4039
   443  0000                     _SSPCON1	set	4038
   444  0000                     _SSPSTAT	set	4039
   445  0000                     _SSPCON1bits	set	4038
   446  0000                     _PORTBbits	set	3969
   447  0000                     _TRISBbits	set	3987
   448  0000                     _T0CONbits	set	4053
   449  0000                     _LATBbits	set	3978
   450  0000                     _PORTAbits	set	3968
   451  0000                     _TRISAbits	set	3986
   452  0000                     _ADCON1	set	4033
   453  0000                     _PCL	set	4089
   454  0000                     _PCLATH	set	4090
   455  0000                     _INTCONbits	set	4082
   456  0000                     _PIR1bits	set	3998
   457  0000                     _PIE1bits	set	3997
   458  0000                     _RCIF	set	31989
   459  0000                     _TRMT	set	32097
   460  0000                     _TXEN	set	32101
   461  0000                     _CREN	set	32092
   462  0000                     _SPEN	set	32095
   463  0000                     _SYNC	set	32100
   464  0000                     _BRGH	set	32098
   465  0000                     _TMR2IF	set	31985
   466  0000                     _INT0IE	set	32660
   467  0000                     _INT0IF	set	32657
   468  0000                     _T0IF	set	32658
   469  0000                     _TMR0IF	set	32658
   470  00613A  53                 	db	83	;'S'
   471  00613B  50                 	db	80	;'P'
   472  00613C  49                 	db	73	;'I'
   473  00613D  20                 	db	32
   474  00613E  63                 	db	99	;'c'
   475  00613F  6F                 	db	111	;'o'
   476  006140  6E                 	db	110	;'n'
   477  006141  66                 	db	102	;'f'
   478  006142  69                 	db	105	;'i'
   479  006143  67                 	db	103	;'g'
   480  006144  75                 	db	117	;'u'
   481  006145  72                 	db	114	;'r'
   482  006146  61                 	db	97	;'a'
   483  006147  64                 	db	100	;'d'
   484  006148  61                 	db	97	;'a'
   485  006149  21                 	db	33
   486  00614A  00                 	db	0
   487  00614B                     STR_3:
   488  00614B  73                 	db	115	;'s'
   489  00614C  79                 	db	121	;'y'
   490  00614D  73                 	db	115	;'s'
   491  00614E  74                 	db	116	;'t'
   492  00614F  20                 	db	32
   493  006150  69                 	db	105	;'i'
   494  006151  6E                 	db	110	;'n'
   495  006152  69                 	db	105	;'i'
   496  006153  74                 	db	116	;'t'
   497  006154  69                 	db	105	;'i'
   498  006155  61                 	db	97	;'a'
   499  006156  6C                 	db	108	;'l'
   500  006157  69                 	db	105	;'i'
   501  006158  7A                 	db	122	;'z'
   502  006159  65                 	db	101	;'e'
   503  00615A  64                 	db	100	;'d'
   504  00615B  00                 	db	0
   505  00615C                     STR_14:
   506  00615C  61                 	db	97	;'a'
   507  00615D  62                 	db	98	;'b'
   508  00615E  72                 	db	114	;'r'
   509  00615F  69                 	db	105	;'i'
   510  006160  72                 	db	114	;'r'
   511  006161  20                 	db	32
   512  006162  6F                 	db	111	;'o'
   513  006163  20                 	db	32
   514  006164  61                 	db	97	;'a'
   515  006165  72                 	db	114	;'r'
   516  006166  71                 	db	113	;'q'
   517  006167  75                 	db	117	;'u'
   518  006168  69                 	db	105	;'i'
   519  006169  76                 	db	118	;'v'
   520  00616A  6F                 	db	111	;'o'
   521  00616B  00                 	db	0
   522  00616C                     STR_27:
   523  00616C  42                 	db	66	;'B'
   524  00616D  79                 	db	121	;'y'
   525  00616E  74                 	db	116	;'t'
   526  00616F  65                 	db	101	;'e'
   527  006170  73                 	db	115	;'s'
   528  006171  20                 	db	32
   529  006172  63                 	db	99	;'c'
   530  006173  72                 	db	114	;'r'
   531  006174  69                 	db	105	;'i'
   532  006175  61                 	db	97	;'a'
   533  006176  64                 	db	100	;'d'
   534  006177  6F                 	db	111	;'o'
   535  006178  21                 	db	33
   536  006179  00                 	db	0
   537  00617A                     STR_24:
   538  00617A  43                 	db	67	;'C'
   539  00617B  61                 	db	97	;'a'
   540  00617C  72                 	db	114	;'r'
   541  00617D  74                 	db	116	;'t'
   542  00617E  E3                 	db	-29
   543  00617F  6F                 	db	111	;'o'
   544  006180  20                 	db	32
   545  006181  41                 	db	65	;'A'
   546  006182  63                 	db	99	;'c'
   547  006183  65                 	db	101	;'e'
   548  006184  69                 	db	105	;'i'
   549  006185  74                 	db	116	;'t'
   550  006186  6F                 	db	111	;'o'
   551  006187  00                 	db	0
   552  006188                     STR_20:
   553  006188  43                 	db	67	;'C'
   554  006189  61                 	db	97	;'a'
   555  00618A  72                 	db	114	;'r'
   556  00618B  74                 	db	116	;'t'
   557  00618C  61                 	db	97	;'a'
   558  00618D  6F                 	db	111	;'o'
   559  00618E  20                 	db	32
   560  00618F  41                 	db	65	;'A'
   561  006190  63                 	db	99	;'c'
   562  006191  65                 	db	101	;'e'
   563  006192  69                 	db	105	;'i'
   564  006193  74                 	db	116	;'t'
   565  006194  6F                 	db	111	;'o'
   566  006195  00                 	db	0
   567  006196                     STR_10:
   568  006196  45                 	db	69	;'E'
   569  006197  72                 	db	114	;'r'
   570  006198  72                 	db	114	;'r'
   571  006199  6F                 	db	111	;'o'
   572  00619A  20                 	db	32
   573  00619B  74                 	db	116	;'t'
   574  00619C  65                 	db	101	;'e'
   575  00619D  6E                 	db	110	;'n'
   576  00619E  74                 	db	116	;'t'
   577  00619F  61                 	db	97	;'a'
   578  0061A0  6E                 	db	110	;'n'
   579  0061A1  64                 	db	100	;'d'
   580  0061A2  6F                 	db	111	;'o'
   581  0061A3  00                 	db	0
   582  0061A4                     STR_11:
   583  0061A4  6C                 	db	108	;'l'
   584  0061A5  65                 	db	101	;'e'
   585  0061A6  72                 	db	114	;'r'
   586  0061A7  20                 	db	32
   587  0061A8  6F                 	db	111	;'o'
   588  0061A9  20                 	db	32
   589  0061AA  61                 	db	97	;'a'
   590  0061AB  72                 	db	114	;'r'
   591  0061AC  71                 	db	113	;'q'
   592  0061AD  75                 	db	117	;'u'
   593  0061AE  69                 	db	105	;'i'
   594  0061AF  76                 	db	118	;'v'
   595  0061B0  6F                 	db	111	;'o'
   596  0061B1  00                 	db	0
   597  0061B2                     STR_7:
   598  0061B2  6C                 	db	108	;'l'
   599  0061B3  65                 	db	101	;'e'
   600  0061B4  6E                 	db	110	;'n'
   601  0061B5  64                 	db	100	;'d'
   602  0061B6  6F                 	db	111	;'o'
   603  0061B7  20                 	db	32
   604  0061B8  61                 	db	97	;'a'
   605  0061B9  72                 	db	114	;'r'
   606  0061BA  71                 	db	113	;'q'
   607  0061BB  75                 	db	117	;'u'
   608  0061BC  69                 	db	105	;'i'
   609  0061BD  76                 	db	118	;'v'
   610  0061BE  6F                 	db	111	;'o'
   611  0061BF  00                 	db	0
   612  0061C0                     STR_17:
   613  0061C0  45                 	db	69	;'E'
   614  0061C1  72                 	db	114	;'r'
   615  0061C2  72                 	db	114	;'r'
   616  0061C3  6F                 	db	111	;'o'
   617  0061C4  20                 	db	32
   618  0061C5  66                 	db	102	;'f'
   619  0061C6  69                 	db	105	;'i'
   620  0061C7  6C                 	db	108	;'l'
   621  0061C8  65                 	db	101	;'e'
   622  0061C9  73                 	db	115	;'s'
   623  0061CA  79                 	db	121	;'y'
   624  0061CB  73                 	db	115	;'s'
   625  0061CC  74                 	db	116	;'t'
   626  0061CD  00                 	db	0
   627  0061CE                     STR_26:
   628  0061CE  42                 	db	66	;'B'
   629  0061CF  6C                 	db	108	;'l'
   630  0061D0  6F                 	db	111	;'o'
   631  0061D1  63                 	db	99	;'c'
   632  0061D2  6F                 	db	111	;'o'
   633  0061D3  20                 	db	32
   634  0061D4  64                 	db	100	;'d'
   635  0061D5  65                 	db	101	;'e'
   636  0061D6  20                 	db	32
   637  0061D7  35                 	db	53	;'5'
   638  0061D8  31                 	db	49	;'1'
   639  0061D9  32                 	db	50	;'2'
   640  0061DA  00                 	db	0
   641  0061DB                     STR_16:
   642  0061DB  4E                 	db	78	;'N'
   643  0061DC  E3                 	db	-29
   644  0061DD  6F                 	db	111	;'o'
   645  0061DE  20                 	db	32
   646  0061DF  74                 	db	116	;'t'
   647  0061E0  6F                 	db	111	;'o'
   648  0061E1  20                 	db	32
   649  0061E2  50                 	db	80	;'P'
   650  0061E3  72                 	db	114	;'r'
   651  0061E4  65                 	db	101	;'e'
   652  0061E5  73                 	db	115	;'s'
   653  0061E6  6F                 	db	111	;'o'
   654  0061E7  00                 	db	0
   655  0061E8                     STR_6:
   656  0061E8  53                 	db	83	;'S'
   657  0061E9  44                 	db	68	;'D'
   658  0061EA  43                 	db	67	;'C'
   659  0061EB  61                 	db	97	;'a'
   660  0061EC  72                 	db	114	;'r'
   661  0061ED  64                 	db	100	;'d'
   662  0061EE  20                 	db	32
   663  0061EF  65                 	db	101	;'e'
   664  0061F0  72                 	db	114	;'r'
   665  0061F1  72                 	db	114	;'r'
   666  0061F2  6F                 	db	111	;'o'
   667  0061F3  72                 	db	114	;'r'
   668  0061F4  00                 	db	0
   669  0061F5                     STR_18:
   670  0061F5  74                 	db	116	;'t'
   671  0061F6  6F                 	db	111	;'o'
   672  0061F7  20                 	db	32
   673  0061F8  50                 	db	80	;'P'
   674  0061F9  72                 	db	114	;'r'
   675  0061FA  65                 	db	101	;'e'
   676  0061FB  73                 	db	115	;'s'
   677  0061FC  6F                 	db	111	;'o'
   678  0061FD  20                 	db	32
   679  0061FE  61                 	db	97	;'a'
   680  0061FF  71                 	db	113	;'q'
   681  006200  00                 	db	0
   682  006201                     STR_32:
   683  006201  65                 	db	101	;'e'
   684  006202  73                 	db	115	;'s'
   685  006203  63                 	db	99	;'c'
   686  006204  72                 	db	114	;'r'
   687  006205  69                 	db	105	;'i'
   688  006206  74                 	db	116	;'t'
   689  006207  61                 	db	97	;'a'
   690  006208  20                 	db	32
   691  006209  6F                 	db	111	;'o'
   692  00620A  6B                 	db	107	;'k'
   693  00620B  00                 	db	0
   694  00620C                     STR_9:
   695  00620C  53                 	db	83	;'S'
   696  00620D  69                 	db	105	;'i'
   697  00620E  73                 	db	115	;'s'
   698  00620F  74                 	db	116	;'t'
   699  006210  65                 	db	101	;'e'
   700  006211  6D                 	db	109	;'m'
   701  006212  61                 	db	97	;'a'
   702  006213  20                 	db	32
   703  006214  4F                 	db	79	;'O'
   704  006215  4B                 	db	75	;'K'
   705  006216  00                 	db	0
   706  006217                     STR_5:
   707  006217  45                 	db	69	;'E'
   708  006218  73                 	db	115	;'s'
   709  006219  63                 	db	99	;'c'
   710  00621A  72                 	db	114	;'r'
   711  00621B  65                 	db	101	;'e'
   712  00621C  76                 	db	118	;'v'
   713  00621D  65                 	db	101	;'e'
   714  00621E  6E                 	db	110	;'n'
   715  00621F  64                 	db	100	;'d'
   716  006220  6F                 	db	111	;'o'
   717  006221  00                 	db	0
   718  006222                     STR_21:
   719  006222  49                 	db	73	;'I'
   720  006223  6E                 	db	110	;'n'
   721  006224  69                 	db	105	;'i'
   722  006225  63                 	db	99	;'c'
   723  006226  69                 	db	105	;'i'
   724  006227  61                 	db	97	;'a'
   725  006228  6E                 	db	110	;'n'
   726  006229  64                 	db	100	;'d'
   727  00622A  6F                 	db	111	;'o'
   728  00622B  00                 	db	0
   729  00622C                     STR_30:
   730  00622C  53                 	db	83	;'S'
   731  00622D  79                 	db	121	;'y'
   732  00622E  73                 	db	115	;'s'
   733  00622F  74                 	db	116	;'t'
   734  006230  20                 	db	32
   735  006231  46                 	db	70	;'F'
   736  006232  41                 	db	65	;'A'
   737  006233  54                 	db	84	;'T'
   738  006234  00                 	db	0
   739  006235                     STR_25:
   740  006235  45                 	db	69	;'E'
   741  006236  72                 	db	114	;'r'
   742  006237  72                 	db	114	;'r'
   743  006238  6F                 	db	111	;'o'
   744  006239  72                 	db	114	;'r'
   745  00623A  21                 	db	33
   746  00623B  21                 	db	33
   747  00623C  21                 	db	33
   748  00623D  00                 	db	0
   749  00623E  25                 	db	37
   750  00623F  64                 	db	100	;'d'
   751  006240  3A                 	db	58	;':'
   752  006241  25                 	db	37
   753  006242  64                 	db	100	;'d'
   754  006243  3A                 	db	58	;':'
   755  006244  25                 	db	37
   756  006245  64                 	db	100	;'d'
   757  006246  00                 	db	0
   758  006247                     STR_31:
   759  006247  53                 	db	83	;'S'
   760  006248  79                 	db	121	;'y'
   761  006249  73                 	db	115	;'s'
   762  00624A  74                 	db	116	;'t'
   763  00624B  20                 	db	32
   764  00624C  4F                 	db	79	;'O'
   765  00624D  4B                 	db	75	;'K'
   766  00624E  00                 	db	0
   767  00624F                     STR_28:
   768  00624F  49                 	db	73	;'I'
   769  006250  6E                 	db	110	;'n'
   770  006251  69                 	db	105	;'i'
   771  006252  74                 	db	116	;'t'
   772  006253  20                 	db	32
   773  006254  4F                 	db	79	;'O'
   774  006255  4B                 	db	75	;'K'
   775  006256  00                 	db	0
   776  006257                     STR_8:
   777  006257  54                 	db	84	;'T'
   778  006258  6F                 	db	111	;'o'
   779  006259  20                 	db	32
   780  00625A  61                 	db	97	;'a'
   781  00625B  71                 	db	113	;'q'
   782  00625C  75                 	db	117	;'u'
   783  00625D  69                 	db	105	;'i'
   784  00625E  00                 	db	0
   785  00625F                     STR_23:
   786  00625F  53                 	db	83	;'S'
   787  006260  44                 	db	68	;'D'
   788  006261  43                 	db	67	;'C'
   789  006262  41                 	db	65	;'A'
   790  006263  52                 	db	82	;'R'
   791  006264  44                 	db	68	;'D'
   792  006265  00                 	db	0
   793  006266                     STR_22:
   794  006266  43                 	db	67	;'C'
   795  006267  61                 	db	97	;'a'
   796  006268  72                 	db	114	;'r'
   797  006269  74                 	db	116	;'t'
   798  00626A  61                 	db	97	;'a'
   799  00626B  6F                 	db	111	;'o'
   800  00626C  00                 	db	0
   801  00626D                     STR_15:
   802  00626D  45                 	db	69	;'E'
   803  00626E  52                 	db	82	;'R'
   804  00626F  52                 	db	82	;'R'
   805  006270  4F                 	db	79	;'O'
   806  006271  21                 	db	33
   807  006272  00                 	db	0
   808  006273                     STR_4:
   809  006273  53                 	db	83	;'S'
   810  006274  43                 	db	67	;'C'
   811  006275  61                 	db	97	;'a'
   812  006276  72                 	db	114	;'r'
   813  006277  64                 	db	100	;'d'
   814  006278  00                 	db	0
   815  006279  0D                 	db	13
   816  00627A  0A                 	db	10
   817  00627B  00                 	db	0
   818  00627C                     STR_29:
   819  00627C  2E                 	db	46
   820  00627D  2E                 	db	46
   821  00627E  00                 	db	0
   822  0000                     
   823                           ; #config settings
   824  00627F  00                 	db	0	; dummy byte at the end
   825  0000                     
   826                           	psect	cinit
   827  002D44                     __pcinit:
   828                           	opt stack 0
   829  002D44                     start_initialization:
   830                           	opt stack 0
   831  002D44                     __initialization:
   832                           	opt stack 0
   833                           
   834                           ; Initialize objects allocated to BANK1 (29 bytes)
   835                           ; load TBLPTR registers with __pidataBANK1
   836  002D44  0E26               	movlw	low __pidataBANK1
   837  002D46  6EF6               	movwf	tblptrl,c
   838  002D48  0E33               	movlw	high __pidataBANK1
   839  002D4A  6EF7               	movwf	tblptrh,c
   840  002D4C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   841  002D4E  6EF8               	movwf	tblptru,c
   842  002D50  EE01  F0DE         	lfsr	0,__pdataBANK1
   843  002D54  EE10 F01D          	lfsr	1,29
   844  002D58                     copy_data0:
   845  002D58  0009               	tblrd		*+
   846  002D5A  CFF5 FFEE          	movff	tablat,postinc0
   847  002D5E  50E5               	movf	postdec1,w,c
   848  002D60  50E1               	movf	fsr1l,w,c
   849  002D62  E1FA               	bnz	copy_data0
   850                           
   851                           ; Clear objects allocated to BIGRAM (512 bytes)
   852  002D64  EE02  F0D5         	lfsr	0,__pbssBIGRAM
   853  002D68  EE12 F000          	lfsr	1,512
   854  002D6C                     clear_0:
   855  002D6C  6AEE               	clrf	postinc0,c
   856  002D6E  50E5               	movf	postdec1,w,c
   857  002D70  50E1               	movf	fsr1l,w,c
   858  002D72  E1FC               	bnz	clear_0
   859  002D74  50E2               	movf	fsr1h,w,c
   860  002D76  E1FA               	bnz	clear_0
   861                           
   862                           ; Clear objects allocated to BANK2 (150 bytes)
   863  002D78  EE02  F000         	lfsr	0,__pbssBANK2
   864  002D7C  0E96               	movlw	150
   865  002D7E                     clear_1:
   866  002D7E  6AEE               	clrf	postinc0,c
   867  002D80  06E8               	decf	wreg,f,c
   868  002D82  E1FD               	bnz	clear_1
   869                           
   870                           ; Clear objects allocated to BANK1 (177 bytes)
   871  002D84  EE01  F000         	lfsr	0,__pbssBANK1
   872  002D88  0EB1               	movlw	177
   873  002D8A                     clear_2:
   874  002D8A  6AEE               	clrf	postinc0,c
   875  002D8C  06E8               	decf	wreg,f,c
   876  002D8E  E1FD               	bnz	clear_2
   877                           
   878                           ; Clear objects allocated to BANK0 (7 bytes)
   879  002D90  EE00  F0D2         	lfsr	0,__pbssBANK0
   880  002D94  0E07               	movlw	7
   881  002D96                     clear_3:
   882  002D96  6AEE               	clrf	postinc0,c
   883  002D98  06E8               	decf	wreg,f,c
   884  002D9A  E1FD               	bnz	clear_3
   885                           
   886                           ; Clear objects allocated to COMRAM (25 bytes)
   887  002D9C  EE00  F02D         	lfsr	0,__pbssCOMRAM
   888  002DA0  0E19               	movlw	25
   889  002DA2                     clear_4:
   890  002DA2  6AEE               	clrf	postinc0,c
   891  002DA4  06E8               	decf	wreg,f,c
   892  002DA6  E1FD               	bnz	clear_4
   893  002DA8                     end_of_initialization:
   894                           	opt stack 0
   895  002DA8                     __end_of__initialization:
   896                           	opt stack 0
   897  002DA8  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   898  002DAA  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   899  002DAC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   900  002DAE  6EF8               	movwf	tblptru,c
   901  002DB0  0100               	movlb	0
   902  002DB2  EF45  F019         	goto	_main	;jump to C main() function
   903                           tblptru	equ	0xFF8
   904                           tblptrh	equ	0xFF7
   905                           tblptrl	equ	0xFF6
   906                           tablat	equ	0xFF5
   907                           postinc0	equ	0xFEE
   908                           wreg	equ	0xFE8
   909                           postdec1	equ	0xFE5
   910                           fsr1h	equ	0xFE2
   911                           fsr1l	equ	0xFE1
   912                           
   913                           	psect	bssCOMRAM
   914  00002D                     __pbssCOMRAM:
   915                           	opt stack 0
   916  00002D                     _gga_code:
   917                           	opt stack 0
   918  00002D                     	ds	3
   919  000030                     _FatFs:
   920                           	opt stack 0
   921  000030                     	ds	2
   922  000032                     _rmc_index:
   923                           	opt stack 0
   924  000032                     	ds	2
   925  000034                     _gga_index:
   926                           	opt stack 0
   927  000034                     	ds	2
   928  000036                     _timeout_tarefa:
   929                           	opt stack 0
   930  000036                     	ds	2
   931  000038                     timer_dois@flag:
   932                           	opt stack 0
   933  000038                     	ds	1
   934  000039                     _estado:
   935                           	opt stack 0
   936  000039                     	ds	1
   937  00003A                     _dado:
   938                           	opt stack 0
   939  00003A                     	ds	1
   940  00003B                     _s:
   941                           	opt stack 0
   942  00003B                     	ds	1
   943  00003C                     _Result:
   944                           	opt stack 0
   945  00003C                     	ds	1
   946  00003D                     _is_it_rmc_string:
   947                           	opt stack 0
   948  00003D                     	ds	1
   949  00003E                     _is_it_gga_string:
   950                           	opt stack 0
   951  00003E                     	ds	1
   952  00003F                     _comma_counter_rmc:
   953                           	opt stack 0
   954  00003F                     	ds	1
   955  000040                     _comma_counter_gga:
   956                           	opt stack 0
   957  000040                     	ds	1
   958  000041                     _E_W:
   959                           	opt stack 0
   960  000041                     	ds	1
   961  000042                     _n_s:
   962                           	opt stack 0
   963  000042                     	ds	1
   964  000043                     _tarefa_em_execucao:
   965                           	opt stack 0
   966  000043                     	ds	1
   967  000044                     _sinaliza_int_timer:
   968                           	opt stack 0
   969  000044                     	ds	1
   970  000045                     _data_uart_recebe:
   971                           	opt stack 0
   972  000045                     	ds	1
   973                           tblptru	equ	0xFF8
   974                           tblptrh	equ	0xFF7
   975                           tblptrl	equ	0xFF6
   976                           tablat	equ	0xFF5
   977                           postinc0	equ	0xFEE
   978                           wreg	equ	0xFE8
   979                           postdec1	equ	0xFE5
   980                           fsr1h	equ	0xFE2
   981                           fsr1l	equ	0xFE1
   982                           
   983                           	psect	bssBANK0
   984  0000D2                     __pbssBANK0:
   985                           	opt stack 0
   986  0000D2                     _rmc_code:
   987                           	opt stack 0
   988  0000D2                     	ds	3
   989  0000D5                     _flag:
   990                           	opt stack 0
   991  0000D5                     	ds	2
   992  0000D7                     _rd:
   993                           	opt stack 0
   994  0000D7                     	ds	2
   995                           tblptru	equ	0xFF8
   996                           tblptrh	equ	0xFF7
   997                           tblptrl	equ	0xFF6
   998                           tablat	equ	0xFF5
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           postdec1	equ	0xFE5
  1002                           fsr1h	equ	0xFE2
  1003                           fsr1l	equ	0xFE1
  1004                           
  1005                           	psect	bssBANK1
  1006  000100                     __pbssBANK1:
  1007                           	opt stack 0
  1008  000100                     _folder:
  1009                           	opt stack 0
  1010  000100                     	ds	48
  1011  000130                     _txt:
  1012                           	opt stack 0
  1013  000130                     	ds	20
  1014  000144                     _gga_pointers:
  1015                           	opt stack 0
  1016  000144                     	ds	20
  1017  000158                     _rmc_pointers:
  1018                           	opt stack 0
  1019  000158                     	ds	12
  1020  000164                     _info_chaves:
  1021                           	opt stack 0
  1022  000164                     	ds	7
  1023  00016B                     _fileSize:
  1024                           	opt stack 0
  1025  00016B                     	ds	4
  1026  00016F                     _tempo_tarefa:
  1027                           	opt stack 0
  1028  00016F                     	ds	4
  1029  000173                     _tempo_backup:
  1030                           	opt stack 0
  1031  000173                     	ds	4
  1032  000177                     _p_tarefas:
  1033                           	opt stack 0
  1034  000177                     	ds	4
  1035  00017B                     _data_buffer_32:
  1036                           	opt stack 0
  1037  00017B                     	ds	32
  1038  00019B                     _data_buffer:
  1039                           	opt stack 0
  1040  00019B                     	ds	15
  1041  0001AA                     _dado_buffer:
  1042                           	opt stack 0
  1043  0001AA                     	ds	7
  1044                           tblptru	equ	0xFF8
  1045                           tblptrh	equ	0xFF7
  1046                           tblptrl	equ	0xFF6
  1047                           tablat	equ	0xFF5
  1048                           postinc0	equ	0xFEE
  1049                           wreg	equ	0xFE8
  1050                           postdec1	equ	0xFE5
  1051                           fsr1h	equ	0xFE2
  1052                           fsr1l	equ	0xFE1
  1053                           
  1054                           	psect	dataBANK1
  1055  0001DE                     __pdataBANK1:
  1056                           	opt stack 0
  1057  0001DE                     escreve_inteiro_uart@F3956:
  1058                           	opt stack 0
  1059  0001DE                     	ds	7
  1060  0001E5                     escreve_inteiro_lcd@F3966:
  1061                           	opt stack 0
  1062  0001E5                     	ds	7
  1063  0001EC                     _fileName:
  1064                           	opt stack 0
  1065  0001EC                     	ds	15
  1066                           tblptru	equ	0xFF8
  1067                           tblptrh	equ	0xFF7
  1068                           tblptrl	equ	0xFF6
  1069                           tablat	equ	0xFF5
  1070                           postinc0	equ	0xFEE
  1071                           wreg	equ	0xFE8
  1072                           postdec1	equ	0xFE5
  1073                           fsr1h	equ	0xFE2
  1074                           fsr1l	equ	0xFE1
  1075                           
  1076                           	psect	bssBANK2
  1077  000200                     __pbssBANK2:
  1078                           	opt stack 0
  1079  000200                     _gga_buffer:
  1080                           	opt stack 0
  1081  000200                     	ds	80
  1082  000250                     _rmc_buffer:
  1083                           	opt stack 0
  1084  000250                     	ds	70
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           postdec1	equ	0xFE5
  1092                           fsr1h	equ	0xFE2
  1093                           fsr1l	equ	0xFE1
  1094                           
  1095                           	psect	bssBIGRAM
  1096  0002D5                     __pbssBIGRAM:
  1097                           	opt stack 0
  1098  0002D5                     disk_readp@arr:
  1099                           	opt stack 0
  1100  0002D5                     	ds	512
  1101                           tblptru	equ	0xFF8
  1102                           tblptrh	equ	0xFF7
  1103                           tblptrl	equ	0xFF6
  1104                           tablat	equ	0xFF5
  1105                           postinc0	equ	0xFEE
  1106                           wreg	equ	0xFE8
  1107                           postdec1	equ	0xFE5
  1108                           fsr1h	equ	0xFE2
  1109                           fsr1l	equ	0xFE1
  1110                           
  1111                           	psect	cstackBANK2
  1112  000296                     __pcstackBANK2:
  1113                           	opt stack 0
  1114  000296                     pf_open@sp:
  1115                           	opt stack 0
  1116                           
  1117                           ; 12 bytes @ 0x0
  1118  000296                     	ds	12
  1119  0002A2                     pf_open@dir:
  1120                           	opt stack 0
  1121                           
  1122                           ; 32 bytes @ 0xC
  1123  0002A2                     	ds	32
  1124  0002C2                     pf_open@res:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x2C
  1128  0002C2                     	ds	1
  1129  0002C3                     pf_open@fs:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x2D
  1133  0002C3                     	ds	2
  1134  0002C5                     pf_open@dj:
  1135                           	opt stack 0
  1136                           
  1137                           ; 16 bytes @ 0x2F
  1138  0002C5                     	ds	16
  1139                           tblptru	equ	0xFF8
  1140                           tblptrh	equ	0xFF7
  1141                           tblptrl	equ	0xFF6
  1142                           tablat	equ	0xFF5
  1143                           postinc0	equ	0xFEE
  1144                           wreg	equ	0xFE8
  1145                           postdec1	equ	0xFE5
  1146                           fsr1h	equ	0xFE2
  1147                           fsr1l	equ	0xFE1
  1148                           
  1149                           	psect	cstackBANK1
  1150  0001B1                     __pcstackBANK1:
  1151                           	opt stack 0
  1152  0001B1                     SDCard@FResult:
  1153                           	opt stack 0
  1154                           
  1155                           ; 1 bytes @ 0x0
  1156  0001B1                     	ds	1
  1157  0001B2                     SDCard@br:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x1
  1161  0001B2                     	ds	2
  1162  0001B4                     SDCard@fs:
  1163                           	opt stack 0
  1164                           
  1165                           ; 42 bytes @ 0x3
  1166  0001B4                     	ds	42
  1167                           tblptru	equ	0xFF8
  1168                           tblptrh	equ	0xFF7
  1169                           tblptrl	equ	0xFF6
  1170                           tablat	equ	0xFF5
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           postdec1	equ	0xFE5
  1174                           fsr1h	equ	0xFE2
  1175                           fsr1l	equ	0xFE1
  1176                           
  1177                           	psect	cstackBANK0
  1178  000060                     __pcstackBANK0:
  1179                           	opt stack 0
  1180  000060                     ??_disk_readp:
  1181  000060                     ??_disk_writep:
  1182  000060                     ??_clust2sect:
  1183  000060                     create_name@d:
  1184                           	opt stack 0
  1185  000060                     disk_initialize@i:
  1186                           	opt stack 0
  1187  000060                     itoa@buf:
  1188                           	opt stack 0
  1189  000060                     mensagem_inicial@msg_linha_um:
  1190                           	opt stack 0
  1191                           
  1192                           ; 17 bytes @ 0x0
  1193  000060                     	ds	1
  1194  000061                     create_name@p:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x1
  1198  000061                     	ds	1
  1199  000062                     disk_initialize@count1:
  1200                           	opt stack 0
  1201  000062                     itoa@val:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x2
  1205  000062                     	ds	1
  1206  000063                     create_name@ni:
  1207                           	opt stack 0
  1208                           
  1209                           ; 1 bytes @ 0x3
  1210  000063                     	ds	1
  1211  000064                     disk_initialize@stat:
  1212                           	opt stack 0
  1213  000064                     disk_readp@ptr:
  1214                           	opt stack 0
  1215  000064                     create_name@si:
  1216                           	opt stack 0
  1217  000064                     disk_writep@i:
  1218                           	opt stack 0
  1219  000064                     itoa@base:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x4
  1223  000064                     	ds	1
  1224  000065                     disk_initialize@count2:
  1225                           	opt stack 0
  1226  000065                     dir_rewind@dj:
  1227                           	opt stack 0
  1228  000065                     create_name@sfn:
  1229                           	opt stack 0
  1230  000065                     disk_readp@start_add:
  1231                           	opt stack 0
  1232                           
  1233                           ; 4 bytes @ 0x5
  1234  000065                     	ds	1
  1235  000066                     disk_writep@j:
  1236                           	opt stack 0
  1237  000066                     escreve_inteiro_lcd@valor:
  1238                           	opt stack 0
  1239                           
  1240                           ; 2 bytes @ 0x6
  1241  000066                     	ds	1
  1242  000067                     disk_initialize@buff:
  1243                           	opt stack 0
  1244  000067                     create_name@i:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x7
  1248  000067                     	ds	1
  1249  000068                     disk_writep@buff:
  1250                           	opt stack 0
  1251  000068                     create_name@c:
  1252                           	opt stack 0
  1253  000068                     escreve_inteiro_lcd@texto:
  1254                           	opt stack 0
  1255                           
  1256                           ; 7 bytes @ 0x8
  1257  000068                     	ds	1
  1258  000069                     disk_readp@buff:
  1259                           	opt stack 0
  1260                           
  1261                           ; 1 bytes @ 0x9
  1262  000069                     	ds	1
  1263  00006A                     disk_readp@length:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0xA
  1267  00006A                     	ds	1
  1268  00006B                     _dir_rewind$1975:
  1269                           	opt stack 0
  1270                           
  1271                           ; 4 bytes @ 0xB
  1272  00006B                     	ds	1
  1273  00006C                     ?_get_fat:
  1274                           	opt stack 0
  1275  00006C                     check_fs@buf:
  1276                           	opt stack 0
  1277  00006C                     get_fat@clst:
  1278                           	opt stack 0
  1279                           
  1280                           ; 4 bytes @ 0xC
  1281  00006C                     	ds	2
  1282  00006E                     check_fs@sect:
  1283                           	opt stack 0
  1284                           
  1285                           ; 4 bytes @ 0xE
  1286  00006E                     	ds	1
  1287  00006F                     dir_rewind@fs:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0xF
  1291  00006F                     	ds	1
  1292  000070                     ??_get_fat:
  1293                           
  1294                           ; 1 bytes @ 0x10
  1295  000070                     	ds	1
  1296  000071                     dir_rewind@clst:
  1297                           	opt stack 0
  1298  000071                     mensagem_inicial@msg_dois:
  1299                           	opt stack 0
  1300                           
  1301                           ; 17 bytes @ 0x11
  1302  000071                     	ds	1
  1303  000072                     ??_check_fs:
  1304                           
  1305                           ; 1 bytes @ 0x12
  1306  000072                     	ds	4
  1307  000076                     pf_mount@fs:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x16
  1311  000076                     	ds	2
  1312  000078                     ??_pf_mount:
  1313                           
  1314                           ; 1 bytes @ 0x18
  1315  000078                     	ds	14
  1316  000086                     _get_fat$1915:
  1317                           	opt stack 0
  1318                           
  1319                           ; 2 bytes @ 0x26
  1320  000086                     	ds	2
  1321  000088                     get_fat@wc:
  1322                           	opt stack 0
  1323                           
  1324                           ; 2 bytes @ 0x28
  1325  000088                     	ds	2
  1326  00008A                     get_fat@ofs:
  1327                           	opt stack 0
  1328                           
  1329                           ; 2 bytes @ 0x2A
  1330  00008A                     	ds	2
  1331  00008C                     get_fat@buf:
  1332                           	opt stack 0
  1333                           
  1334                           ; 4 bytes @ 0x2C
  1335  00008C                     	ds	2
  1336  00008E                     pf_mount@buf:
  1337                           	opt stack 0
  1338                           
  1339                           ; 36 bytes @ 0x2E
  1340  00008E                     	ds	2
  1341  000090                     get_fat@bc:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x30
  1345  000090                     	ds	2
  1346  000092                     get_fat@fs:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x32
  1350  000092                     	ds	2
  1351  000094                     dir_next@dj:
  1352                           	opt stack 0
  1353  000094                     pf_read@buff:
  1354                           	opt stack 0
  1355  000094                     pf_write@buff:
  1356                           	opt stack 0
  1357                           
  1358                           ; 2 bytes @ 0x34
  1359  000094                     	ds	2
  1360  000096                     ??_dir_next:
  1361  000096                     pf_read@btr:
  1362                           	opt stack 0
  1363  000096                     pf_write@btw:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x36
  1367  000096                     	ds	2
  1368  000098                     pf_read@br:
  1369                           	opt stack 0
  1370  000098                     pf_write@bw:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x38
  1374  000098                     	ds	2
  1375  00009A                     ??_pf_write:
  1376  00009A                     ??_pf_read:
  1377                           
  1378                           ; 1 bytes @ 0x3A
  1379  00009A                     	ds	3
  1380  00009D                     dir_next@fs:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x3D
  1384  00009D                     	ds	2
  1385  00009F                     dir_next@clst:
  1386                           	opt stack 0
  1387                           
  1388                           ; 4 bytes @ 0x3F
  1389  00009F                     	ds	3
  1390  0000A2                     pf_read@dr:
  1391                           	opt stack 0
  1392  0000A2                     pf_write@p:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x42
  1396  0000A2                     	ds	1
  1397  0000A3                     dir_next@i:
  1398                           	opt stack 0
  1399  0000A3                     pf_read@rbuff:
  1400                           	opt stack 0
  1401                           
  1402                           ; 2 bytes @ 0x43
  1403  0000A3                     	ds	1
  1404  0000A4                     pf_write@sect:
  1405                           	opt stack 0
  1406                           
  1407                           ; 4 bytes @ 0x44
  1408  0000A4                     	ds	1
  1409  0000A5                     dir_find@dj:
  1410                           	opt stack 0
  1411  0000A5                     _pf_read$2169:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0x45
  1415  0000A5                     	ds	2
  1416  0000A7                     dir_find@dir:
  1417                           	opt stack 0
  1418  0000A7                     pf_read@sect:
  1419                           	opt stack 0
  1420                           
  1421                           ; 4 bytes @ 0x47
  1422  0000A7                     	ds	1
  1423  0000A8                     pf_write@remain:
  1424                           	opt stack 0
  1425                           
  1426                           ; 4 bytes @ 0x48
  1427  0000A8                     	ds	1
  1428  0000A9                     ??_dir_find:
  1429                           
  1430                           ; 1 bytes @ 0x49
  1431  0000A9                     	ds	2
  1432  0000AB                     dir_find@c:
  1433                           	opt stack 0
  1434  0000AB                     pf_read@remain:
  1435                           	opt stack 0
  1436                           
  1437                           ; 4 bytes @ 0x4B
  1438  0000AB                     	ds	1
  1439  0000AC                     dir_find@res:
  1440                           	opt stack 0
  1441  0000AC                     pf_write@clst:
  1442                           	opt stack 0
  1443                           
  1444                           ; 4 bytes @ 0x4C
  1445  0000AC                     	ds	1
  1446  0000AD                     follow_path@dj:
  1447                           	opt stack 0
  1448                           
  1449                           ; 2 bytes @ 0x4D
  1450  0000AD                     	ds	2
  1451  0000AF                     follow_path@dir:
  1452                           	opt stack 0
  1453  0000AF                     pf_read@clst:
  1454                           	opt stack 0
  1455                           
  1456                           ; 4 bytes @ 0x4F
  1457  0000AF                     	ds	1
  1458  0000B0                     pf_write@cs:
  1459                           	opt stack 0
  1460                           
  1461                           ; 1 bytes @ 0x50
  1462  0000B0                     	ds	1
  1463  0000B1                     follow_path@path:
  1464                           	opt stack 0
  1465  0000B1                     pf_write@wcnt:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x51
  1469  0000B1                     	ds	1
  1470  0000B2                     pf_mount@tsect:
  1471                           	opt stack 0
  1472                           
  1473                           ; 4 bytes @ 0x52
  1474  0000B2                     	ds	1
  1475  0000B3                     pf_read@cs:
  1476                           	opt stack 0
  1477  0000B3                     pf_write@fs:
  1478                           	opt stack 0
  1479                           
  1480                           ; 2 bytes @ 0x53
  1481  0000B3                     	ds	1
  1482  0000B4                     follow_path@res:
  1483                           	opt stack 0
  1484  0000B4                     pf_read@rcnt:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x54
  1488  0000B4                     	ds	1
  1489  0000B5                     pf_open@path:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x55
  1493  0000B5                     	ds	1
  1494  0000B6                     pf_read@fs:
  1495                           	opt stack 0
  1496  0000B6                     pf_mount@mclst:
  1497                           	opt stack 0
  1498                           
  1499                           ; 4 bytes @ 0x56
  1500  0000B6                     	ds	1
  1501  0000B7                     ??_pf_open:
  1502                           
  1503                           ; 1 bytes @ 0x57
  1504  0000B7                     	ds	3
  1505  0000BA                     pf_mount@bsect:
  1506                           	opt stack 0
  1507                           
  1508                           ; 4 bytes @ 0x5A
  1509  0000BA                     	ds	4
  1510  0000BE                     pf_mount@fsize:
  1511                           	opt stack 0
  1512                           
  1513                           ; 4 bytes @ 0x5E
  1514  0000BE                     	ds	4
  1515  0000C2                     pf_mount@fmt:
  1516                           	opt stack 0
  1517                           
  1518                           ; 1 bytes @ 0x62
  1519  0000C2                     	ds	11
  1520  0000CD                     ??_SDCard:
  1521                           
  1522                           ; 1 bytes @ 0x6D
  1523  0000CD                     	ds	2
  1524  0000CF                     
  1525                           ; 1 bytes @ 0x6F
  1526  0000CF                     	ds	2
  1527  0000D1                     escalonador@cont:
  1528                           	opt stack 0
  1529                           
  1530                           ; 1 bytes @ 0x71
  1531  0000D1                     	ds	1
  1532                           tblptru	equ	0xFF8
  1533                           tblptrh	equ	0xFF7
  1534                           tblptrl	equ	0xFF6
  1535                           tablat	equ	0xFF5
  1536                           postinc0	equ	0xFEE
  1537                           wreg	equ	0xFE8
  1538                           postdec1	equ	0xFE5
  1539                           fsr1h	equ	0xFE2
  1540                           fsr1l	equ	0xFE1
  1541                           
  1542                           	psect	cstackCOMRAM
  1543  000001                     __pcstackCOMRAM:
  1544                           	opt stack 0
  1545  000001                     tratamento_uart@received_char:
  1546                           	opt stack 0
  1547  000001                     i2write_timer_zero@timer0:
  1548                           	opt stack 0
  1549                           
  1550                           ; 2 bytes @ 0x0
  1551  000001                     	ds	2
  1552  000003                     i2write_timer_zero@timer:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x2
  1556  000003                     	ds	2
  1557  000005                     ??_isr:
  1558                           
  1559                           ; 1 bytes @ 0x4
  1560  000005                     	ds	20
  1561  000019                     isr@cont:
  1562                           	opt stack 0
  1563                           
  1564                           ; 1 bytes @ 0x18
  1565  000019                     	ds	1
  1566  00001A                     ??_recebe_dado_SPI:
  1567  00001A                     ?_mem_cmp:
  1568                           	opt stack 0
  1569  00001A                     ?___lwdiv:
  1570                           	opt stack 0
  1571  00001A                     ?___lwmod:
  1572                           	opt stack 0
  1573  00001A                     ?_get_clust:
  1574                           	opt stack 0
  1575  00001A                     ?___lmul:
  1576                           	opt stack 0
  1577  00001A                     ?___lldiv:
  1578                           	opt stack 0
  1579  00001A                     escreve_dado_SPI@contador:
  1580                           	opt stack 0
  1581  00001A                     delay@contador_ext:
  1582                           	opt stack 0
  1583  00001A                     readover@a:
  1584                           	opt stack 0
  1585  00001A                     write_timer_zero@timer0:
  1586                           	opt stack 0
  1587  00001A                     mem_set@dst:
  1588                           	opt stack 0
  1589  00001A                     mem_cmp@dst:
  1590                           	opt stack 0
  1591  00001A                     get_clust@dir:
  1592                           	opt stack 0
  1593  00001A                     ___lwdiv@dividend:
  1594                           	opt stack 0
  1595  00001A                     ___lwmod@dividend:
  1596                           	opt stack 0
  1597  00001A                     ___lmul@multiplier:
  1598                           	opt stack 0
  1599  00001A                     ___lldiv@dividend:
  1600                           	opt stack 0
  1601                           
  1602                           ; 4 bytes @ 0x19
  1603  00001A                     	ds	1
  1604  00001B                     escreve_dado_SPI@data_to_shrc:
  1605                           	opt stack 0
  1606  00001B                     delay@contador_int:
  1607                           	opt stack 0
  1608                           
  1609                           ; 1 bytes @ 0x1A
  1610  00001B                     	ds	1
  1611  00001C                     ??_dummy_clocks:
  1612  00001C                     recebe_dado_SPI@contador:
  1613                           	opt stack 0
  1614  00001C                     escreve_cmd_lcd@comando:
  1615                           	opt stack 0
  1616  00001C                     endereco_cursor_lcd@endereco:
  1617                           	opt stack 0
  1618  00001C                     escreve_caractere_lcd@data:
  1619                           	opt stack 0
  1620  00001C                     write_timer_zero@timer:
  1621                           	opt stack 0
  1622  00001C                     mem_set@val:
  1623                           	opt stack 0
  1624  00001C                     mem_cmp@src:
  1625                           	opt stack 0
  1626  00001C                     ___lwdiv@divisor:
  1627                           	opt stack 0
  1628  00001C                     ___lwmod@divisor:
  1629                           	opt stack 0
  1630  00001C                     command@arg:
  1631                           	opt stack 0
  1632                           
  1633                           ; 4 bytes @ 0x1B
  1634  00001C                     	ds	1
  1635  00001D                     ??_init_lcd:
  1636  00001D                     response@buff:
  1637                           	opt stack 0
  1638  00001D                     posicao_cursor_lcd@coluna:
  1639                           	opt stack 0
  1640  00001D                     escreve_frase_ram_lcd@buffer:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x1C
  1644  00001D                     	ds	1
  1645  00001E                     ??_get_clust:
  1646  00001E                     dummy_clocks@n:
  1647                           	opt stack 0
  1648  00001E                     posicao_cursor_lcd@linha:
  1649                           	opt stack 0
  1650  00001E                     ___lwdiv@counter:
  1651                           	opt stack 0
  1652  00001E                     ___lwmod@counter:
  1653                           	opt stack 0
  1654  00001E                     mem_set@cnt:
  1655                           	opt stack 0
  1656  00001E                     mem_cmp@cnt:
  1657                           	opt stack 0
  1658  00001E                     ___lmul@multiplicand:
  1659                           	opt stack 0
  1660  00001E                     ___lldiv@divisor:
  1661                           	opt stack 0
  1662                           
  1663                           ; 4 bytes @ 0x1D
  1664  00001E                     	ds	1
  1665  00001F                     posicao_cursor_lcd@endereco:
  1666                           	opt stack 0
  1667  00001F                     dummy_clocks@i:
  1668                           	opt stack 0
  1669  00001F                     ___lwdiv@quotient:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x1E
  1673  00001F                     	ds	1
  1674  000020                     ??_mensagem_inicial:
  1675  000020                     ??_mem_cmp:
  1676  000020                     command@CRC:
  1677                           	opt stack 0
  1678  000020                     mem_set@d:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x1F
  1682  000020                     	ds	1
  1683  000021                     command@CMD:
  1684                           	opt stack 0
  1685  000021                     utoa@buf:
  1686                           	opt stack 0
  1687                           
  1688                           ; 2 bytes @ 0x20
  1689  000021                     	ds	1
  1690  000022                     command@argument:
  1691                           	opt stack 0
  1692  000022                     create_name@dj:
  1693                           	opt stack 0
  1694  000022                     ___lmul@product:
  1695                           	opt stack 0
  1696  000022                     ___lldiv@quotient:
  1697                           	opt stack 0
  1698                           
  1699                           ; 4 bytes @ 0x21
  1700  000022                     	ds	1
  1701  000023                     ??_reset:
  1702  000023                     disk_readp@rd:
  1703                           	opt stack 0
  1704  000023                     mem_cmp@d:
  1705                           	opt stack 0
  1706  000023                     utoa@val:
  1707                           	opt stack 0
  1708  000023                     disk_writep@wr:
  1709                           	opt stack 0
  1710                           
  1711                           ; 3 bytes @ 0x22
  1712  000023                     	ds	1
  1713  000024                     create_name@path:
  1714                           	opt stack 0
  1715                           
  1716                           ; 2 bytes @ 0x23
  1717  000024                     	ds	1
  1718  000025                     reset@i:
  1719                           	opt stack 0
  1720  000025                     mem_cmp@s:
  1721                           	opt stack 0
  1722  000025                     utoa@base:
  1723                           	opt stack 0
  1724  000025                     disk_readp@sector:
  1725                           	opt stack 0
  1726                           
  1727                           ; 4 bytes @ 0x24
  1728  000025                     	ds	1
  1729  000026                     ??_create_name:
  1730  000026                     ?_clust2sect:
  1731                           	opt stack 0
  1732  000026                     ___lldiv@counter:
  1733                           	opt stack 0
  1734  000026                     get_clust@fs:
  1735                           	opt stack 0
  1736  000026                     disk_writep@sc:
  1737                           	opt stack 0
  1738  000026                     clust2sect@clst:
  1739                           	opt stack 0
  1740                           
  1741                           ; 4 bytes @ 0x25
  1742  000026                     	ds	1
  1743  000027                     reset@count:
  1744                           	opt stack 0
  1745  000027                     mem_cmp@r:
  1746                           	opt stack 0
  1747  000027                     utoa@v:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x26
  1751  000027                     	ds	1
  1752  000028                     get_clust@clst:
  1753                           	opt stack 0
  1754                           
  1755                           ; 4 bytes @ 0x27
  1756  000028                     	ds	1
  1757  000029                     reset@buff:
  1758                           	opt stack 0
  1759  000029                     utoa@c:
  1760                           	opt stack 0
  1761  000029                     disk_readp@offset:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x28
  1765  000029                     	ds	1
  1766  00002A                     ??_disk_initialize:
  1767  00002A                     clust2sect@fs:
  1768                           	opt stack 0
  1769  00002A                     itoa@cp:
  1770                           	opt stack 0
  1771                           
  1772                           ; 2 bytes @ 0x29
  1773  00002A                     	ds	1
  1774  00002B                     disk_readp@count:
  1775                           	opt stack 0
  1776                           
  1777                           ; 2 bytes @ 0x2A
  1778  00002B                     	ds	1
  1779  00002C                     
  1780                           ; 1 bytes @ 0x2B
  1781  00002C                     	ds	1
  1782  00002D                     tblptru	equ	0xFF8
  1783                           tblptrh	equ	0xFF7
  1784                           tblptrl	equ	0xFF6
  1785                           tablat	equ	0xFF5
  1786                           postinc0	equ	0xFEE
  1787                           wreg	equ	0xFE8
  1788                           postdec1	equ	0xFE5
  1789                           fsr1h	equ	0xFE2
  1790                           fsr1l	equ	0xFE1
  1791                           
  1792                           ; 1 bytes @ 0x2C
  1793 ;;
  1794 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1795 ;;
  1796 ;; *************** function _main *****************
  1797 ;; Defined at:
  1798 ;;		line 208 in file "main.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;		None
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;		None
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1812 ;;      Params:         0       0       0       0       0       0       0       0       0
  1813 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1815 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1816 ;;Total ram usage:        0 bytes
  1817 ;; Hardware stack levels required when called:   13
  1818 ;; This function calls:
  1819 ;;		_escalonador
  1820 ;;		_inicializa_shrc
  1821 ;;		_inicializa_tarefas
  1822 ;;		_init_hardware
  1823 ;;		_init_lcd
  1824 ;;		_leitura_chaves_sistema
  1825 ;;		_mensagem_inicial
  1826 ;; This function is called by:
  1827 ;;		Startup code after reset
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           	psect	text0
  1832  00328A                     __ptext0:
  1833                           	opt stack 0
  1834  00328A                     _main:
  1835                           	opt stack 18
  1836                           
  1837                           ;main.c: 210: init_hardware();
  1838                           
  1839                           ;incstack = 0
  1840  00328A  ECBB  F019         	call	_init_hardware	;wreg free
  1841                           
  1842                           ;main.c: 212: init_lcd();
  1843  00328E  EC52  F015         	call	_init_lcd	;wreg free
  1844                           
  1845                           ;main.c: 213: inicializa_shrc();
  1846  003292  ECF0  F019         	call	_inicializa_shrc	;wreg free
  1847                           
  1848                           ;main.c: 215: mensagem_inicial();
  1849  003296  EC28  F016         	call	_mensagem_inicial	;wreg free
  1850                           
  1851                           ;main.c: 216: inicializa_tarefas();
  1852  00329A  EC83  F019         	call	_inicializa_tarefas	;wreg free
  1853                           
  1854                           ;main.c: 218: ADCON1 = 0X0F;
  1855  00329E  0E0F               	movlw	15
  1856  0032A0  6EC1               	movwf	4033,c	;volatile
  1857  0032A2                     
  1858                           ;main.c: 220: {
  1859                           ;main.c: 222: if ((sinaliza_int_timer == 1) && (2))
  1860  0032A2  0444               	decf	_sinaliza_int_timer,w,c
  1861  0032A4  A4D8               	btfss	status,2,c
  1862  0032A6  D004               	goto	l88
  1863                           
  1864                           ;main.c: 223: {
  1865                           ;main.c: 224: sinaliza_int_timer = 0;
  1866  0032A8  0E00               	movlw	0
  1867  0032AA  6E44               	movwf	_sinaliza_int_timer,c
  1868                           
  1869                           ;main.c: 225: escalonador();
  1870  0032AC  ECAE  F014         	call	_escalonador	;wreg free
  1871  0032B0                     l88:
  1872                           
  1873                           ;main.c: 226: }
  1874                           ;main.c: 227: leitura_chaves_sistema();
  1875  0032B0  EC27  F019         	call	_leitura_chaves_sistema	;wreg free
  1876  0032B4  D7F6               	goto	l87
  1877  0032B6                     __end_of_main:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1h	equ	0xFE2
  1887                           fsr1l	equ	0xFE1
  1888                           status	equ	0xFD8
  1889                           
  1890 ;; *************** function _mensagem_inicial *****************
  1891 ;; Defined at:
  1892 ;;		line 238 in file "main.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;		None
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  1897 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1907 ;;      Params:         0       0       0       0       0       0       0       0       0
  1908 ;;      Locals:         0      34       0       0       0       0       0       0       0
  1909 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1910 ;;      Totals:         2      34       0       0       0       0       0       0       0
  1911 ;;Total ram usage:       36 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    5
  1914 ;; This function calls:
  1915 ;;		_escreve_cmd_lcd
  1916 ;;		_escreve_frase_ram_lcd
  1917 ;;		_posicao_cursor_lcd
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           	psect	text1
  1924  002C50                     __ptext1:
  1925                           	opt stack 0
  1926  002C50                     _mensagem_inicial:
  1927                           	opt stack 25
  1928                           
  1929                           ;main.c: 240: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  1930                           
  1931                           ;incstack = 0
  1932  002C50  0E1F               	movlw	low mensagem_inicial@F4009
  1933  002C52  6EF6               	movwf	tblptrl,c
  1934  002C54                     	if	1	;There is more than 1 active tblptr byte
  1935  002C54  0E61               	movlw	high mensagem_inicial@F4009
  1936  002C56  6EF7               	movwf	tblptrh,c
  1937  002C58                     	endif
  1938  002C58                     	if	0	;There are less than 3 active tblptr bytes
  1939  002C58                     	endif
  1940  002C58  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  1941  002C5C  0E10               	movlw	16
  1942  002C5E                     u9620:
  1943  002C5E  0009               	tblrd		*+
  1944  002C60  CFF5 FFDE          	movff	tablat,postinc2
  1945  002C64  06E8               	decf	wreg,f,c
  1946  002C66  E2FB               	bc	u9620
  1947                           
  1948                           ;main.c: 241: const unsigned char msg_dois[17] = " 18/01/2022   ";
  1949  002C68  0E0E               	movlw	low mensagem_inicial@F4011
  1950  002C6A  6EF6               	movwf	tblptrl,c
  1951  002C6C                     	if	1	;There is more than 1 active tblptr byte
  1952  002C6C  0E61               	movlw	high mensagem_inicial@F4011
  1953  002C6E  6EF7               	movwf	tblptrh,c
  1954  002C70                     	endif
  1955  002C70                     	if	0	;There are less than 3 active tblptr bytes
  1956  002C70                     	endif
  1957  002C70  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  1958  002C74  0E10               	movlw	16
  1959  002C76                     u9630:
  1960  002C76  0009               	tblrd		*+
  1961  002C78  CFF5 FFDE          	movff	tablat,postinc2
  1962  002C7C  06E8               	decf	wreg,f,c
  1963  002C7E  E2FB               	bc	u9630
  1964                           
  1965                           ;main.c: 243: posicao_cursor_lcd(1,0);
  1966  002C80  0E00               	movlw	0
  1967  002C82  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1968  002C84  0E01               	movlw	1
  1969  002C86  EC4C  F017         	call	_posicao_cursor_lcd
  1970                           
  1971                           ;main.c: 244: escreve_frase_ram_lcd(msg_linha_um);
  1972  002C8A  0E60               	movlw	low mensagem_inicial@msg_linha_um
  1973  002C8C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1974  002C8E  0E00               	movlw	high mensagem_inicial@msg_linha_um
  1975  002C90  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1976  002C92  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  1977                           
  1978                           ;main.c: 246: posicao_cursor_lcd(2,0);
  1979  002C96  0E00               	movlw	0
  1980  002C98  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  1981  002C9A  0E02               	movlw	2
  1982  002C9C  EC4C  F017         	call	_posicao_cursor_lcd
  1983                           
  1984                           ;main.c: 247: escreve_frase_ram_lcd(msg_dois);
  1985  002CA0  0E71               	movlw	low mensagem_inicial@msg_dois
  1986  002CA2  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  1987  002CA4  0E00               	movlw	high mensagem_inicial@msg_dois
  1988  002CA6  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  1989  002CA8  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  1990                           
  1991                           ;main.c: 248: _delay((unsigned long)((1000)*(48000000/4000.0)));
  1992  002CAC  0E3D               	movlw	61
  1993  002CAE  6E21               	movwf	(??_mensagem_inicial+1)& (0+255),c
  1994  002CB0  0EE1               	movlw	225
  1995  002CB2  6E20               	movwf	??_mensagem_inicial& (0+255),c
  1996  002CB4  0E40               	movlw	64
  1997  002CB6                     u10657:
  1998  002CB6  2EE8               	decfsz	wreg,f,c
  1999  002CB8  D7FE               	bra	u10657
  2000  002CBA  2E20               	decfsz	??_mensagem_inicial& (0+255),f,c
  2001  002CBC  D7FC               	bra	u10657
  2002  002CBE  2E21               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  2003  002CC0  D7FA               	bra	u10657
  2004                           
  2005                           ;main.c: 249: escreve_cmd_lcd(0b00000001);
  2006  002CC2  0E01               	movlw	1
  2007  002CC4  ECA1  F015         	call	_escreve_cmd_lcd
  2008  002CC8  0012               	return		;funcret
  2009  002CCA                     __end_of_mensagem_inicial:
  2010                           	opt stack 0
  2011                           tblptru	equ	0xFF8
  2012                           tblptrh	equ	0xFF7
  2013                           tblptrl	equ	0xFF6
  2014                           tablat	equ	0xFF5
  2015                           postinc0	equ	0xFEE
  2016                           wreg	equ	0xFE8
  2017                           postdec1	equ	0xFE5
  2018                           fsr1h	equ	0xFE2
  2019                           fsr1l	equ	0xFE1
  2020                           postinc2	equ	0xFDE
  2021                           status	equ	0xFD8
  2022                           
  2023 ;; *************** function _leitura_chaves_sistema *****************
  2024 ;; Defined at:
  2025 ;;		line 47 in file "bibliotecas/chaves.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;		None
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;		None
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      void 
  2032 ;; Registers used:
  2033 ;;		wreg
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2039 ;;      Params:         0       0       0       0       0       0       0       0       0
  2040 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2042 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2043 ;;Total ram usage:        0 bytes
  2044 ;; Hardware stack levels used:    1
  2045 ;; Hardware stack levels required when called:    2
  2046 ;; This function calls:
  2047 ;;		Nothing
  2048 ;; This function is called by:
  2049 ;;		_main
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text2
  2054  00324E                     __ptext2:
  2055                           	opt stack 0
  2056  00324E                     _leitura_chaves_sistema:
  2057                           	opt stack 28
  2058                           
  2059                           ;chaves.c: 49: info_chaves[0] = PORTCbits.RC0;
  2060                           
  2061                           ;incstack = 0
  2062  00324E  0E00               	movlw	0
  2063  003250  B082               	btfsc	3970,0,c	;volatile
  2064  003252  0E01               	movlw	1
  2065  003254  0101               	movlb	1	; () banked
  2066  003256  6F64               	movwf	_info_chaves& (0+255),b
  2067                           
  2068                           ;chaves.c: 50: info_chaves[1] = PORTCbits.RC1;
  2069  003258  0E00               	movlw	0
  2070  00325A  B282               	btfsc	3970,1,c	;volatile
  2071  00325C  0E01               	movlw	1
  2072  00325E  6F65               	movwf	(_info_chaves+1)& (0+255),b
  2073                           
  2074                           ;chaves.c: 51: info_chaves[2] = PORTCbits.RC2;
  2075  003260  0E00               	movlw	0
  2076  003262  B482               	btfsc	3970,2,c	;volatile
  2077  003264  0E01               	movlw	1
  2078  003266  6F66               	movwf	(_info_chaves+2)& (0+255),b
  2079                           
  2080                           ;chaves.c: 52: info_chaves[3] = PORTAbits.RA2;
  2081  003268  0E00               	movlw	0
  2082  00326A  B480               	btfsc	3968,2,c	;volatile
  2083  00326C  0E01               	movlw	1
  2084  00326E  6F67               	movwf	(_info_chaves+3)& (0+255),b
  2085                           
  2086                           ;chaves.c: 53: info_chaves[4] = PORTAbits.RA5;
  2087  003270  0E00               	movlw	0
  2088  003272  BA80               	btfsc	3968,5,c	;volatile
  2089  003274  0E01               	movlw	1
  2090  003276  6F68               	movwf	(_info_chaves+4)& (0+255),b
  2091                           
  2092                           ;chaves.c: 54: info_chaves[5] = PORTEbits.RE0;
  2093  003278  0E00               	movlw	0
  2094  00327A  B084               	btfsc	3972,0,c	;volatile
  2095  00327C  0E01               	movlw	1
  2096  00327E  6F69               	movwf	(_info_chaves+5)& (0+255),b
  2097                           
  2098                           ;chaves.c: 55: info_chaves[6] = PORTEbits.RE1;
  2099  003280  0E00               	movlw	0
  2100  003282  B284               	btfsc	3972,1,c	;volatile
  2101  003284  0E01               	movlw	1
  2102  003286  6F6A               	movwf	(_info_chaves+6)& (0+255),b
  2103                           
  2104                           ; BSR set to: 1
  2105  003288  0012               	return		;funcret
  2106  00328A                     __end_of_leitura_chaves_sistema:
  2107                           	opt stack 0
  2108                           tblptru	equ	0xFF8
  2109                           tblptrh	equ	0xFF7
  2110                           tblptrl	equ	0xFF6
  2111                           tablat	equ	0xFF5
  2112                           postinc0	equ	0xFEE
  2113                           wreg	equ	0xFE8
  2114                           postdec1	equ	0xFE5
  2115                           fsr1h	equ	0xFE2
  2116                           fsr1l	equ	0xFE1
  2117                           postinc2	equ	0xFDE
  2118                           status	equ	0xFD8
  2119                           
  2120 ;; *************** function _init_lcd *****************
  2121 ;; Defined at:
  2122 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;		None
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;		None
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  1    wreg      void 
  2129 ;; Registers used:
  2130 ;;		wreg, status,2, status,0, cstack
  2131 ;; Tracked objects:
  2132 ;;		On entry : 0/0
  2133 ;;		On exit  : 0/0
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2136 ;;      Params:         0       0       0       0       0       0       0       0       0
  2137 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2138 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2139 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2140 ;;Total ram usage:        1 bytes
  2141 ;; Hardware stack levels used:    1
  2142 ;; Hardware stack levels required when called:    4
  2143 ;; This function calls:
  2144 ;;		_delay
  2145 ;;		_escreve_cmd_lcd
  2146 ;; This function is called by:
  2147 ;;		_main
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           	psect	text3
  2152  002AA4                     __ptext3:
  2153                           	opt stack 0
  2154  002AA4                     _init_lcd:
  2155                           	opt stack 26
  2156                           
  2157                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2158                           
  2159                           ; BSR set to: 1
  2160                           ;incstack = 0
  2161  002AA4  9495               	bcf	3989,2,c	;volatile
  2162                           
  2163                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2164  002AA6  9295               	bcf	3989,1,c	;volatile
  2165                           
  2166                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2167  002AA8  9095               	bcf	3989,0,c	;volatile
  2168                           
  2169                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2170  002AAA  9895               	bcf	3989,4,c	;volatile
  2171                           
  2172                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2173  002AAC  9A95               	bcf	3989,5,c	;volatile
  2174                           
  2175                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2176  002AAE  9C95               	bcf	3989,6,c	;volatile
  2177                           
  2178                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2179  002AB0  9E95               	bcf	3989,7,c	;volatile
  2180                           
  2181                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2182  002AB2  9483               	bcf	3971,2,c	;volatile
  2183                           
  2184                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2185  002AB4  9283               	bcf	3971,1,c	;volatile
  2186                           
  2187                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2188  002AB6  9083               	bcf	3971,0,c	;volatile
  2189                           
  2190                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2191  002AB8  9E83               	bcf	3971,7,c	;volatile
  2192                           
  2193                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2194  002ABA  9C83               	bcf	3971,6,c	;volatile
  2195                           
  2196                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2197  002ABC  8A83               	bsf	3971,5,c	;volatile
  2198                           
  2199                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2200  002ABE  8883               	bsf	3971,4,c	;volatile
  2201                           
  2202                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2203  002AC0  0EEA               	movlw	234
  2204  002AC2  6E1D               	movwf	??_init_lcd& (0+255),c
  2205  002AC4  0EC3               	movlw	195
  2206  002AC6                     u10667:
  2207  002AC6  2EE8               	decfsz	wreg,f,c
  2208  002AC8  D7FE               	bra	u10667
  2209  002ACA  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2210  002ACC  D7FC               	bra	u10667
  2211  002ACE  F000               	nop	
  2212                           
  2213                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2214  002AD0  8083               	bsf	3971,0,c	;volatile
  2215                           
  2216                           ;display_lcd.c: 108: delay();
  2217  002AD2  EC71  F019         	call	_delay	;wreg free
  2218                           
  2219                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2220  002AD6  9083               	bcf	3971,0,c	;volatile
  2221                           
  2222                           ;display_lcd.c: 110: delay();
  2223  002AD8  EC71  F019         	call	_delay	;wreg free
  2224                           
  2225                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2226  002ADC  0E4E               	movlw	78
  2227  002ADE  6E1D               	movwf	??_init_lcd& (0+255),c
  2228  002AE0  0EEB               	movlw	235
  2229  002AE2                     u10677:
  2230  002AE2  2EE8               	decfsz	wreg,f,c
  2231  002AE4  D7FE               	bra	u10677
  2232  002AE6  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2233  002AE8  D7FC               	bra	u10677
  2234  002AEA  F000               	nop	
  2235                           
  2236                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2237  002AEC  8083               	bsf	3971,0,c	;volatile
  2238                           
  2239                           ;display_lcd.c: 119: delay();
  2240  002AEE  EC71  F019         	call	_delay	;wreg free
  2241                           
  2242                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2243  002AF2  9083               	bcf	3971,0,c	;volatile
  2244                           
  2245                           ;display_lcd.c: 121: delay();
  2246  002AF4  EC71  F019         	call	_delay	;wreg free
  2247                           
  2248                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2249  002AF8  0E4E               	movlw	78
  2250  002AFA  6E1D               	movwf	??_init_lcd& (0+255),c
  2251  002AFC  0EEB               	movlw	235
  2252  002AFE                     u10687:
  2253  002AFE  2EE8               	decfsz	wreg,f,c
  2254  002B00  D7FE               	bra	u10687
  2255  002B02  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2256  002B04  D7FC               	bra	u10687
  2257  002B06  F000               	nop	
  2258                           
  2259                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2260  002B08  8083               	bsf	3971,0,c	;volatile
  2261                           
  2262                           ;display_lcd.c: 130: delay();
  2263  002B0A  EC71  F019         	call	_delay	;wreg free
  2264                           
  2265                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2266  002B0E  9083               	bcf	3971,0,c	;volatile
  2267                           
  2268                           ;display_lcd.c: 132: delay();
  2269  002B10  EC71  F019         	call	_delay	;wreg free
  2270                           
  2271                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2272  002B14  9E83               	bcf	3971,7,c	;volatile
  2273                           
  2274                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2275  002B16  9C83               	bcf	3971,6,c	;volatile
  2276                           
  2277                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2278  002B18  8A83               	bsf	3971,5,c	;volatile
  2279                           
  2280                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2281  002B1A  9883               	bcf	3971,4,c	;volatile
  2282                           
  2283                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2284  002B1C  8083               	bsf	3971,0,c	;volatile
  2285                           
  2286                           ;display_lcd.c: 143: delay();
  2287  002B1E  EC71  F019         	call	_delay	;wreg free
  2288                           
  2289                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2290  002B22  9083               	bcf	3971,0,c	;volatile
  2291                           
  2292                           ;display_lcd.c: 145: delay();
  2293  002B24  EC71  F019         	call	_delay	;wreg free
  2294                           
  2295                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2296  002B28  0E28               	movlw	40
  2297  002B2A  ECA1  F015         	call	_escreve_cmd_lcd
  2298                           
  2299                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2300  002B2E  0E06               	movlw	6
  2301  002B30  ECA1  F015         	call	_escreve_cmd_lcd
  2302                           
  2303                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2304  002B34  0E0E               	movlw	14
  2305  002B36  ECA1  F015         	call	_escreve_cmd_lcd
  2306                           
  2307                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2308  002B3A  0E01               	movlw	1
  2309  002B3C  ECA1  F015         	call	_escreve_cmd_lcd
  2310  002B40  0012               	return		;funcret
  2311  002B42                     __end_of_init_lcd:
  2312                           	opt stack 0
  2313                           tblptru	equ	0xFF8
  2314                           tblptrh	equ	0xFF7
  2315                           tblptrl	equ	0xFF6
  2316                           tablat	equ	0xFF5
  2317                           postinc0	equ	0xFEE
  2318                           wreg	equ	0xFE8
  2319                           postdec1	equ	0xFE5
  2320                           fsr1h	equ	0xFE2
  2321                           fsr1l	equ	0xFE1
  2322                           postinc2	equ	0xFDE
  2323                           status	equ	0xFD8
  2324                           
  2325 ;; *************** function _init_hardware *****************
  2326 ;; Defined at:
  2327 ;;		line 55 in file "bibliotecas/hardware.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;		None
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;		None
  2332 ;; Return value:  Size  Location     Type
  2333 ;;                  1    wreg      void 
  2334 ;; Registers used:
  2335 ;;		wreg, status,2, cstack
  2336 ;; Tracked objects:
  2337 ;;		On entry : 0/0
  2338 ;;		On exit  : 0/0
  2339 ;;		Unchanged: 0/0
  2340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2341 ;;      Params:         0       0       0       0       0       0       0       0       0
  2342 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2343 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2344 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2345 ;;Total ram usage:        0 bytes
  2346 ;; Hardware stack levels used:    1
  2347 ;; Hardware stack levels required when called:    4
  2348 ;; This function calls:
  2349 ;;		_config_timer_dois
  2350 ;;		_config_timer_zero
  2351 ;;		_init_interrupt
  2352 ;;		_init_oscilador
  2353 ;;		_init_ports
  2354 ;; This function is called by:
  2355 ;;		_main
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text4
  2360  003376                     __ptext4:
  2361                           	opt stack 0
  2362  003376                     _init_hardware:
  2363                           	opt stack 26
  2364                           
  2365                           ;hardware.c: 58: init_oscilador();
  2366                           
  2367                           ;incstack = 0
  2368  003376  EC07  F01A         	call	_init_oscilador	;wreg free
  2369                           
  2370                           ;hardware.c: 61: init_ports();
  2371  00337A  ECAF  F019         	call	_init_ports	;wreg free
  2372                           
  2373                           ;hardware.c: 64: config_timer_zero();
  2374  00337E  ECA2  F019         	call	_config_timer_zero	;wreg free
  2375                           
  2376                           ;hardware.c: 67: config_timer_dois();
  2377  003382  ECEA  F019         	call	_config_timer_dois	;wreg free
  2378                           
  2379                           ;hardware.c: 70: init_interrupt();
  2380  003386  ECC6  F019         	call	_init_interrupt	;wreg free
  2381  00338A  0012               	return		;funcret
  2382  00338C                     __end_of_init_hardware:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           tblptrh	equ	0xFF7
  2386                           tblptrl	equ	0xFF6
  2387                           tablat	equ	0xFF5
  2388                           postinc0	equ	0xFEE
  2389                           wreg	equ	0xFE8
  2390                           postdec1	equ	0xFE5
  2391                           fsr1h	equ	0xFE2
  2392                           fsr1l	equ	0xFE1
  2393                           postinc2	equ	0xFDE
  2394                           status	equ	0xFD8
  2395                           
  2396 ;; *************** function _init_ports *****************
  2397 ;; Defined at:
  2398 ;;		line 154 in file "bibliotecas/hardware.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  1    wreg      void 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2412 ;;      Params:         0       0       0       0       0       0       0       0       0
  2413 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2415 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2416 ;;Total ram usage:        0 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    2
  2419 ;; This function calls:
  2420 ;;		Nothing
  2421 ;; This function is called by:
  2422 ;;		_init_hardware
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text5
  2427  00335E                     __ptext5:
  2428                           	opt stack 0
  2429  00335E                     _init_ports:
  2430                           	opt stack 27
  2431                           
  2432                           ;hardware.c: 156: TRISB = 0b00100001;
  2433                           
  2434                           ;incstack = 0
  2435  00335E  0E21               	movlw	33
  2436  003360  6E93               	movwf	3987,c	;volatile
  2437                           
  2438                           ;hardware.c: 157: LATB = 0xFF;
  2439  003362  688A               	setf	3978,c	;volatile
  2440                           
  2441                           ;hardware.c: 158: TRISD = 0x00;
  2442  003364  0E00               	movlw	0
  2443  003366  6E95               	movwf	3989,c	;volatile
  2444                           
  2445                           ;hardware.c: 159: TRISA = 0b00000111;
  2446  003368  0E07               	movlw	7
  2447  00336A  6E92               	movwf	3986,c	;volatile
  2448                           
  2449                           ;hardware.c: 160: TRISC = 0x01111111;
  2450  00336C  0E11               	movlw	17
  2451  00336E  6E94               	movwf	3988,c	;volatile
  2452                           
  2453                           ;hardware.c: 161: TRISE = 0b00000011;
  2454  003370  0E03               	movlw	3
  2455  003372  6E96               	movwf	3990,c	;volatile
  2456  003374  0012               	return		;funcret
  2457  003376                     __end_of_init_ports:
  2458                           	opt stack 0
  2459                           tblptru	equ	0xFF8
  2460                           tblptrh	equ	0xFF7
  2461                           tblptrl	equ	0xFF6
  2462                           tablat	equ	0xFF5
  2463                           postinc0	equ	0xFEE
  2464                           wreg	equ	0xFE8
  2465                           postdec1	equ	0xFE5
  2466                           fsr1h	equ	0xFE2
  2467                           fsr1l	equ	0xFE1
  2468                           postinc2	equ	0xFDE
  2469                           status	equ	0xFD8
  2470                           
  2471 ;; *************** function _init_oscilador *****************
  2472 ;; Defined at:
  2473 ;;		line 171 in file "bibliotecas/hardware.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;		None
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;		None
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      void 
  2480 ;; Registers used:
  2481 ;;		None
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2487 ;;      Params:         0       0       0       0       0       0       0       0       0
  2488 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2489 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2490 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2491 ;;Total ram usage:        0 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    2
  2494 ;; This function calls:
  2495 ;;		Nothing
  2496 ;; This function is called by:
  2497 ;;		_init_hardware
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           	psect	text6
  2502  00340E                     __ptext6:
  2503                           	opt stack 0
  2504  00340E                     _init_oscilador:
  2505                           	opt stack 27
  2506                           
  2507                           ;hardware.c: 174: OSCCONbits.IRCF0 = 1;
  2508                           
  2509                           ;incstack = 0
  2510  00340E  88D3               	bsf	4051,4,c	;volatile
  2511                           
  2512                           ;hardware.c: 175: OSCCONbits.IRCF1 = 1;
  2513  003410  8AD3               	bsf	4051,5,c	;volatile
  2514                           
  2515                           ;hardware.c: 176: OSCCONbits.IRCF2 = 1;
  2516  003412  8CD3               	bsf	4051,6,c	;volatile
  2517  003414  0012               	return		;funcret
  2518  003416                     __end_of_init_oscilador:
  2519                           	opt stack 0
  2520                           tblptru	equ	0xFF8
  2521                           tblptrh	equ	0xFF7
  2522                           tblptrl	equ	0xFF6
  2523                           tablat	equ	0xFF5
  2524                           postinc0	equ	0xFEE
  2525                           wreg	equ	0xFE8
  2526                           postdec1	equ	0xFE5
  2527                           fsr1h	equ	0xFE2
  2528                           fsr1l	equ	0xFE1
  2529                           postinc2	equ	0xFDE
  2530                           status	equ	0xFD8
  2531                           
  2532 ;; *************** function _init_interrupt *****************
  2533 ;; Defined at:
  2534 ;;		line 98 in file "bibliotecas/hardware.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		wreg, status,2
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2548 ;;      Params:         0       0       0       0       0       0       0       0       0
  2549 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2550 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2551 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2552 ;;Total ram usage:        0 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    2
  2555 ;; This function calls:
  2556 ;;		Nothing
  2557 ;; This function is called by:
  2558 ;;		_init_hardware
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562                           	psect	text7
  2563  00338C                     __ptext7:
  2564                           	opt stack 0
  2565  00338C                     _init_interrupt:
  2566                           	opt stack 27
  2567                           
  2568                           ;hardware.c: 100: INTCON = 0b11110000;
  2569                           
  2570                           ;incstack = 0
  2571  00338C  0EF0               	movlw	240
  2572  00338E  6EF2               	movwf	intcon,c	;volatile
  2573                           
  2574                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2575  003390  0E00               	movlw	0
  2576  003392  6EF1               	movwf	intcon2,c	;volatile
  2577                           
  2578                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2579  003394  0E00               	movlw	0
  2580  003396  6EF0               	movwf	intcon3,c	;volatile
  2581                           
  2582                           ;hardware.c: 104: PIE1 = 0b00100000;
  2583  003398  0E20               	movlw	32
  2584  00339A  6E9D               	movwf	3997,c	;volatile
  2585  00339C  0012               	return		;funcret
  2586  00339E                     __end_of_init_interrupt:
  2587                           	opt stack 0
  2588                           tblptru	equ	0xFF8
  2589                           tblptrh	equ	0xFF7
  2590                           tblptrl	equ	0xFF6
  2591                           tablat	equ	0xFF5
  2592                           intcon	equ	0xFF2
  2593                           intcon2	equ	0xFF1
  2594                           intcon3	equ	0xFF0
  2595                           postinc0	equ	0xFEE
  2596                           wreg	equ	0xFE8
  2597                           postdec1	equ	0xFE5
  2598                           fsr1h	equ	0xFE2
  2599                           fsr1l	equ	0xFE1
  2600                           postinc2	equ	0xFDE
  2601                           status	equ	0xFD8
  2602                           
  2603 ;; *************** function _config_timer_zero *****************
  2604 ;; Defined at:
  2605 ;;		line 83 in file "bibliotecas/hardware.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, status,2, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2619 ;;      Params:         0       0       0       0       0       0       0       0       0
  2620 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2622 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2623 ;;Total ram usage:        0 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    3
  2626 ;; This function calls:
  2627 ;;		_write_timer_zero
  2628 ;; This function is called by:
  2629 ;;		_init_hardware
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           	psect	text8
  2634  003344                     __ptext8:
  2635                           	opt stack 0
  2636  003344                     _config_timer_zero:
  2637                           	opt stack 26
  2638                           
  2639                           ;hardware.c: 85: T0CON = 0b11000011;
  2640                           
  2641                           ;incstack = 0
  2642  003344  0EC3               	movlw	195
  2643  003346  6ED5               	movwf	4053,c	;volatile
  2644                           
  2645                           ;hardware.c: 86: SPPCON = 0b00000000;
  2646  003348  0E00               	movlw	0
  2647  00334A  6E65               	movwf	3941,c	;volatile
  2648                           
  2649                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2650  00334C  0E00               	movlw	0
  2651  00334E  6E63               	movwf	3939,c	;volatile
  2652                           
  2653                           ;hardware.c: 88: write_timer_zero(0x0083);
  2654  003350  0E00               	movlw	0
  2655  003352  6E1B               	movwf	write_timer_zero@timer0+1,c
  2656  003354  0E83               	movlw	131
  2657  003356  6E1A               	movwf	write_timer_zero@timer0,c
  2658  003358  ECCF  F019         	call	_write_timer_zero	;wreg free
  2659  00335C  0012               	return		;funcret
  2660  00335E                     __end_of_config_timer_zero:
  2661                           	opt stack 0
  2662                           tblptru	equ	0xFF8
  2663                           tblptrh	equ	0xFF7
  2664                           tblptrl	equ	0xFF6
  2665                           tablat	equ	0xFF5
  2666                           intcon	equ	0xFF2
  2667                           intcon2	equ	0xFF1
  2668                           intcon3	equ	0xFF0
  2669                           postinc0	equ	0xFEE
  2670                           wreg	equ	0xFE8
  2671                           postdec1	equ	0xFE5
  2672                           fsr1h	equ	0xFE2
  2673                           fsr1l	equ	0xFE1
  2674                           postinc2	equ	0xFDE
  2675                           status	equ	0xFD8
  2676                           
  2677 ;; *************** function _write_timer_zero *****************
  2678 ;; Defined at:
  2679 ;;		line 138 in file "bibliotecas/hardware.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  timer0          2   25[COMRAM] unsigned int 
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  timer           2   27[COMRAM] struct Timers
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		None
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2693 ;;      Params:         2       0       0       0       0       0       0       0       0
  2694 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2695 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2696 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2697 ;;Total ram usage:        4 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    2
  2700 ;; This function calls:
  2701 ;;		Nothing
  2702 ;; This function is called by:
  2703 ;;		_config_timer_zero
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           	psect	text9
  2708  00339E                     __ptext9:
  2709                           	opt stack 0
  2710  00339E                     _write_timer_zero:
  2711                           	opt stack 26
  2712                           
  2713                           ;hardware.c: 140: union Timers timer;
  2714                           ;hardware.c: 142: timer.lt = timer0;
  2715                           
  2716                           ;incstack = 0
  2717  00339E  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2718  0033A2  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2719                           
  2720                           ;hardware.c: 144: TMR0H = timer.bt[1];
  2721  0033A6  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2722                           
  2723                           ;hardware.c: 145: TMR0L = timer.bt[0];
  2724  0033AA  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2725  0033AE  0012               	return		;funcret
  2726  0033B0                     __end_of_write_timer_zero:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           intcon	equ	0xFF2
  2733                           intcon2	equ	0xFF1
  2734                           intcon3	equ	0xFF0
  2735                           postinc0	equ	0xFEE
  2736                           wreg	equ	0xFE8
  2737                           postdec1	equ	0xFE5
  2738                           fsr1h	equ	0xFE2
  2739                           fsr1l	equ	0xFE1
  2740                           postinc2	equ	0xFDE
  2741                           status	equ	0xFD8
  2742                           
  2743 ;; *************** function _config_timer_dois *****************
  2744 ;; Defined at:
  2745 ;;		line 200 in file "bibliotecas/hardware.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;		None
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;		None
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg, status,2
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2759 ;;      Params:         0       0       0       0       0       0       0       0       0
  2760 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2761 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2762 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2763 ;;Total ram usage:        0 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; Hardware stack levels required when called:    2
  2766 ;; This function calls:
  2767 ;;		Nothing
  2768 ;; This function is called by:
  2769 ;;		_init_hardware
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text10
  2774  0033D4                     __ptext10:
  2775                           	opt stack 0
  2776  0033D4                     _config_timer_dois:
  2777                           	opt stack 27
  2778                           
  2779                           ;hardware.c: 202: T2CON = 0b00000100;
  2780                           
  2781                           ;incstack = 0
  2782  0033D4  0E04               	movlw	4
  2783  0033D6  6ECA               	movwf	4042,c	;volatile
  2784                           
  2785                           ;hardware.c: 203: TMR2 = 0;
  2786  0033D8  0E00               	movlw	0
  2787  0033DA  6ECC               	movwf	4044,c	;volatile
  2788                           
  2789                           ;hardware.c: 204: PR2 = 0xFF;
  2790  0033DC  68CB               	setf	4043,c	;volatile
  2791  0033DE  0012               	return		;funcret
  2792  0033E0                     __end_of_config_timer_dois:
  2793                           	opt stack 0
  2794                           tblptru	equ	0xFF8
  2795                           tblptrh	equ	0xFF7
  2796                           tblptrl	equ	0xFF6
  2797                           tablat	equ	0xFF5
  2798                           intcon	equ	0xFF2
  2799                           intcon2	equ	0xFF1
  2800                           intcon3	equ	0xFF0
  2801                           postinc0	equ	0xFEE
  2802                           wreg	equ	0xFE8
  2803                           postdec1	equ	0xFE5
  2804                           fsr1h	equ	0xFE2
  2805                           fsr1l	equ	0xFE1
  2806                           postinc2	equ	0xFDE
  2807                           status	equ	0xFD8
  2808                           
  2809 ;; *************** function _inicializa_tarefas *****************
  2810 ;; Defined at:
  2811 ;;		line 157 in file "main.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;		None
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;		None
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      void 
  2818 ;; Registers used:
  2819 ;;		wreg, status,2, status,0
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2825 ;;      Params:         0       0       0       0       0       0       0       0       0
  2826 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2827 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2828 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2829 ;;Total ram usage:        0 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    2
  2832 ;; This function calls:
  2833 ;;		Nothing
  2834 ;; This function is called by:
  2835 ;;		_main
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text11
  2840  003306                     __ptext11:
  2841                           	opt stack 0
  2842  003306                     _inicializa_tarefas:
  2843                           	opt stack 28
  2844                           
  2845                           ;main.c: 160: p_tarefas[0] = SDCard;
  2846                           
  2847                           ;incstack = 0
  2848  003306  0E0A               	movlw	low _SDCard
  2849  003308  0101               	movlb	1	; () banked
  2850  00330A  6F77               	movwf	_p_tarefas& (0+255),b
  2851  00330C  0E19               	movlw	high _SDCard
  2852  00330E  6F78               	movwf	(_p_tarefas+1)& (0+255),b
  2853                           
  2854                           ; BSR set to: 1
  2855                           ;main.c: 165: tempo_backup[0] = 5000;
  2856  003310  0E13               	movlw	19
  2857  003312  6F74               	movwf	(_tempo_backup+1)& (0+255),b
  2858  003314  0E88               	movlw	136
  2859  003316  6F73               	movwf	_tempo_backup& (0+255),b
  2860                           
  2861                           ; BSR set to: 1
  2862                           ;main.c: 171: tempo_tarefa[0] = 5000;
  2863  003318  0E13               	movlw	19
  2864  00331A  6F70               	movwf	(_tempo_tarefa+1)& (0+255),b
  2865  00331C  0E88               	movlw	136
  2866  00331E  6F6F               	movwf	_tempo_tarefa& (0+255),b
  2867                           
  2868                           ; BSR set to: 1
  2869                           ;main.c: 176: tarefa_em_execucao = 0;
  2870  003320  0E00               	movlw	0
  2871  003322  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  2872                           
  2873                           ; BSR set to: 1
  2874  003324  0012               	return		;funcret
  2875  003326                     __end_of_inicializa_tarefas:
  2876                           	opt stack 0
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           intcon	equ	0xFF2
  2882                           intcon2	equ	0xFF1
  2883                           intcon3	equ	0xFF0
  2884                           postinc0	equ	0xFEE
  2885                           wreg	equ	0xFE8
  2886                           postdec1	equ	0xFE5
  2887                           fsr1h	equ	0xFE2
  2888                           fsr1l	equ	0xFE1
  2889                           postinc2	equ	0xFDE
  2890                           status	equ	0xFD8
  2891                           
  2892 ;; *************** function _inicializa_shrc *****************
  2893 ;; Defined at:
  2894 ;;		line 48 in file "bibliotecas/SHRC.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;		None
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		None
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2908 ;;      Params:         0       0       0       0       0       0       0       0       0
  2909 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2910 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2911 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2912 ;;Total ram usage:        0 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    2
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		_main
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           	psect	text12
  2923  0033E0                     __ptext12:
  2924                           	opt stack 0
  2925  0033E0                     _inicializa_shrc:
  2926                           	opt stack 28
  2927                           
  2928                           ;SHRC.c: 51: TRISBbits.RB6 = 0;
  2929                           
  2930                           ; BSR set to: 1
  2931                           ;incstack = 0
  2932  0033E0  9C93               	bcf	3987,6,c	;volatile
  2933                           
  2934                           ;SHRC.c: 52: TRISBbits.RB5 = 1;
  2935  0033E2  8A93               	bsf	3987,5,c	;volatile
  2936                           
  2937                           ;SHRC.c: 53: TRISBbits.RB7 = 0;
  2938  0033E4  9E93               	bcf	3987,7,c	;volatile
  2939                           
  2940                           ;SHRC.c: 56: LATBbits.LATB6 = 0;
  2941  0033E6  9C8A               	bcf	3978,6,c	;volatile
  2942                           
  2943                           ;SHRC.c: 57: LATBbits.LATB7 = 0;
  2944  0033E8  9E8A               	bcf	3978,7,c	;volatile
  2945  0033EA  0012               	return		;funcret
  2946  0033EC                     __end_of_inicializa_shrc:
  2947                           	opt stack 0
  2948                           tblptru	equ	0xFF8
  2949                           tblptrh	equ	0xFF7
  2950                           tblptrl	equ	0xFF6
  2951                           tablat	equ	0xFF5
  2952                           intcon	equ	0xFF2
  2953                           intcon2	equ	0xFF1
  2954                           intcon3	equ	0xFF0
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           postdec1	equ	0xFE5
  2958                           fsr1h	equ	0xFE2
  2959                           fsr1l	equ	0xFE1
  2960                           postinc2	equ	0xFDE
  2961                           status	equ	0xFD8
  2962                           
  2963 ;; *************** function _escalonador *****************
  2964 ;; Defined at:
  2965 ;;		line 187 in file "main.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;		None
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  cont            1  113[BANK0 ] unsigned char 
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      void 
  2972 ;; Registers used:
  2973 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2979 ;;      Params:         0       0       0       0       0       0       0       0       0
  2980 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2981 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2982 ;;      Totals:         0       3       0       0       0       0       0       0       0
  2983 ;;Total ram usage:        3 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; Hardware stack levels required when called:   12
  2986 ;; This function calls:
  2987 ;;		_SDCard
  2988 ;; This function is called by:
  2989 ;;		_main
  2990 ;; This function uses a non-reentrant model
  2991 ;;
  2992                           
  2993                           	psect	text13
  2994  00295C                     __ptext13:
  2995                           	opt stack 0
  2996  00295C                     _escalonador:
  2997                           	opt stack 18
  2998                           
  2999                           ;main.c: 189: unsigned char cont;
  3000                           ;main.c: 190: for(cont = 0; cont<2;cont++)
  3001                           
  3002                           ;incstack = 0
  3003  00295C  0E00               	movlw	0
  3004  00295E  0100               	movlb	0	; () banked
  3005  002960  6FD1               	movwf	escalonador@cont& (0+255),b
  3006  002962                     l8668:
  3007                           
  3008                           ; BSR set to: 0
  3009  002962  0E01               	movlw	1
  3010  002964  65D1               	cpfsgt	escalonador@cont& (0+255),b
  3011  002966  D001               	goto	l79
  3012  002968  0012               	return	
  3013  00296A                     l79:
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;main.c: 191: {
  3017                           ;main.c: 192: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3018                           
  3019                           ; BSR set to: 0
  3020  00296A  51D1               	movf	escalonador@cont& (0+255),w,b
  3021  00296C  0D02               	mullw	2
  3022  00296E  0E77               	movlw	low _p_tarefas
  3023  002970  24F3               	addwf	prodl,w,c
  3024  002972  6ED9               	movwf	fsr2l,c
  3025  002974  0E01               	movlw	high _p_tarefas
  3026  002976  20F4               	addwfc	prodh,w,c
  3027  002978  6EDA               	movwf	fsr2h,c
  3028  00297A  50DE               	movf	postinc2,w,c
  3029  00297C  10DE               	iorwf	postinc2,w,c
  3030  00297E  B4D8               	btfsc	status,2,c
  3031  002980  D03D               	goto	l81
  3032                           
  3033                           ; BSR set to: 0
  3034  002982  51D1               	movf	escalonador@cont& (0+255),w,b
  3035  002984  0D02               	mullw	2
  3036  002986  0E6F               	movlw	low _tempo_tarefa
  3037  002988  24F3               	addwf	prodl,w,c
  3038  00298A  6ED9               	movwf	fsr2l,c
  3039  00298C  0E01               	movlw	high _tempo_tarefa
  3040  00298E  20F4               	addwfc	prodh,w,c
  3041  002990  6EDA               	movwf	fsr2h,c
  3042  002992  50DE               	movf	postinc2,w,c
  3043  002994  10DE               	iorwf	postinc2,w,c
  3044  002996  A4D8               	btfss	status,2,c
  3045  002998  D031               	goto	l81
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;main.c: 193: {
  3049                           ;main.c: 194: tarefa_em_execucao = 1;
  3050  00299A  0E01               	movlw	1
  3051  00299C  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3052                           
  3053                           ;main.c: 195: timeout_tarefa = 65000;
  3054  00299E  0EFD               	movlw	253
  3055  0029A0  6E37               	movwf	_timeout_tarefa+1,c
  3056  0029A2  0EE8               	movlw	232
  3057  0029A4  6E36               	movwf	_timeout_tarefa,c
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;main.c: 196: p_tarefas[cont]();
  3061  0029A6  51D1               	movf	escalonador@cont& (0+255),w,b
  3062  0029A8  0D02               	mullw	2
  3063  0029AA  0E77               	movlw	low _p_tarefas
  3064  0029AC  24F3               	addwf	prodl,w,c
  3065  0029AE  6ED9               	movwf	fsr2l,c
  3066  0029B0  0E01               	movlw	high _p_tarefas
  3067  0029B2  20F4               	addwfc	prodh,w,c
  3068  0029B4  6EDA               	movwf	fsr2h,c
  3069  0029B6  D801               	call	u9608
  3070  0029B8  D00A               	goto	u9609
  3071  0029BA                     u9608:
  3072  0029BA  0005               	push	
  3073  0029BC  6EFA               	movwf	pclath,c
  3074  0029BE  50DE               	movf	postinc2,w,c
  3075  0029C0  6EFD               	movwf	tosl,c
  3076  0029C2  50DE               	movf	postinc2,w,c
  3077  0029C4  6EFE               	movwf	tosh,c
  3078  0029C6  50F8               	movf	tblptru,w,c
  3079  0029C8  6EFF               	movwf	tosu,c
  3080  0029CA  50FA               	movf	pclath,w,c
  3081  0029CC  0012               	return		;indir
  3082  0029CE                     u9609:
  3083                           
  3084                           ;main.c: 197: tarefa_em_execucao = 0;
  3085  0029CE  0E00               	movlw	0
  3086  0029D0  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3087                           
  3088                           ;main.c: 198: tempo_tarefa[cont] = tempo_backup[cont];
  3089  0029D2  0100               	movlb	0	; () banked
  3090  0029D4  51D1               	movf	escalonador@cont& (0+255),w,b
  3091  0029D6  0D02               	mullw	2
  3092  0029D8  0E73               	movlw	low _tempo_backup
  3093  0029DA  24F3               	addwf	prodl,w,c
  3094  0029DC  6ED9               	movwf	fsr2l,c
  3095  0029DE  0E01               	movlw	high _tempo_backup
  3096  0029E0  20F4               	addwfc	prodh,w,c
  3097  0029E2  6EDA               	movwf	fsr2h,c
  3098  0029E4  51D1               	movf	escalonador@cont& (0+255),w,b
  3099  0029E6  0D02               	mullw	2
  3100  0029E8  0E6F               	movlw	low _tempo_tarefa
  3101  0029EA  24F3               	addwf	prodl,w,c
  3102  0029EC  6EE1               	movwf	fsr1l,c
  3103  0029EE  0E01               	movlw	high _tempo_tarefa
  3104  0029F0  20F4               	addwfc	prodh,w,c
  3105  0029F2  6EE2               	movwf	fsr1h,c
  3106  0029F4  CFDE FFE6          	movff	postinc2,postinc1
  3107  0029F8  CFDD FFE5          	movff	postdec2,postdec1
  3108  0029FC                     l81:
  3109                           
  3110                           ; BSR set to: 0
  3111                           
  3112                           ; BSR set to: 0
  3113  0029FC  2BD1               	incf	escalonador@cont& (0+255),f,b
  3114  0029FE  D7B1               	goto	l8668
  3115  002A00                     __end_of_escalonador:
  3116                           	opt stack 0
  3117                           tosu	equ	0xFFF
  3118                           tosh	equ	0xFFE
  3119                           tosl	equ	0xFFD
  3120                           pclath	equ	0xFFA
  3121                           tblptru	equ	0xFF8
  3122                           tblptrh	equ	0xFF7
  3123                           tblptrl	equ	0xFF6
  3124                           tablat	equ	0xFF5
  3125                           prodh	equ	0xFF4
  3126                           prodl	equ	0xFF3
  3127                           intcon	equ	0xFF2
  3128                           intcon2	equ	0xFF1
  3129                           intcon3	equ	0xFF0
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           postinc1	equ	0xFE6
  3133                           postdec1	equ	0xFE5
  3134                           fsr1h	equ	0xFE2
  3135                           fsr1l	equ	0xFE1
  3136                           postinc2	equ	0xFDE
  3137                           postdec2	equ	0xFDD
  3138                           fsr2h	equ	0xFDA
  3139                           fsr2l	equ	0xFD9
  3140                           status	equ	0xFD8
  3141                           
  3142 ;; *************** function _SDCard *****************
  3143 ;; Defined at:
  3144 ;;		line 130 in file "bibliotecas/SDCard.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;		None
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  fs             42    3[BANK1 ] struct .
  3149 ;;  br              2    1[BANK1 ] unsigned short 
  3150 ;;  FResult         1    0[BANK1 ] enum E3884
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3160 ;;      Params:         0       0       0       0       0       0       0       0       0
  3161 ;;      Locals:         0       0      45       0       0       0       0       0       0
  3162 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3163 ;;      Totals:         0       2      45       0       0       0       0       0       0
  3164 ;;Total ram usage:       47 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:   11
  3167 ;; This function calls:
  3168 ;;		_escreve_cmd_lcd
  3169 ;;		_escreve_frase_ram_lcd
  3170 ;;		_escreve_inteiro_lcd
  3171 ;;		_pf_mount
  3172 ;;		_pf_open
  3173 ;;		_pf_read
  3174 ;;		_pf_write
  3175 ;;		_posicao_cursor_lcd
  3176 ;;		_proceed
  3177 ;;		_readover
  3178 ;; This function is called by:
  3179 ;;		_inicializa_tarefas
  3180 ;;		_escalonador
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           	psect	text14
  3185  00190A                     __ptext14:
  3186                           	opt stack 0
  3187  00190A                     _SDCard:
  3188                           	opt stack 18
  3189                           
  3190                           ;SDCard.c: 132: T0CONbits.TMR0ON = 0;
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;incstack = 0
  3194  00190A  9ED5               	bcf	4053,7,c	;volatile
  3195                           
  3196                           ;SDCard.c: 134: FRESULT FResult;
  3197                           ;SDCard.c: 135: FATFS fs;
  3198                           ;SDCard.c: 136: WORD br = ".";
  3199  00190C  0E62               	movlw	high (STR_29+1)
  3200  00190E  0101               	movlb	1	; () banked
  3201  001910  6FB3               	movwf	(SDCard@br+1)& (0+255),b
  3202  001912  0E7D               	movlw	low (STR_29+1)
  3203  001914  6FB2               	movwf	SDCard@br& (0+255),b
  3204                           
  3205                           ; BSR set to: 1
  3206                           ;SDCard.c: 146: escreve_cmd_lcd(0b00000001);
  3207  001916  0E01               	movlw	1
  3208  001918  ECA1  F015         	call	_escreve_cmd_lcd
  3209                           
  3210                           ;SDCard.c: 149: proceed();
  3211  00191C  ECFC  F019         	call	_proceed	;wreg free
  3212                           
  3213                           ;SDCard.c: 150: if((FResult = pf_mount(&fs)) == FR_OK )
  3214  001920  0EB4               	movlw	low SDCard@fs
  3215  001922  0100               	movlb	0	; () banked
  3216  001924  6F76               	movwf	pf_mount@fs& (0+255),b
  3217  001926  0E01               	movlw	high SDCard@fs
  3218  001928  6F77               	movwf	(pf_mount@fs+1)& (0+255),b
  3219  00192A  EC09  F000         	call	_pf_mount	;wreg free
  3220  00192E  0101               	movlb	1	; () banked
  3221  001930  6FB1               	movwf	SDCard@FResult& (0+255),b
  3222  001932  51B1               	movf	SDCard@FResult& (0+255),w,b
  3223  001934  A4D8               	btfss	status,2,c
  3224  001936  D0F5               	goto	l293
  3225                           
  3226                           ; BSR set to: 1
  3227                           ;SDCard.c: 151: {
  3228                           ;SDCard.c: 152: posicao_cursor_lcd(1,0);
  3229  001938  0E00               	movlw	0
  3230  00193A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3231  00193C  0E01               	movlw	1
  3232  00193E  EC4C  F017         	call	_posicao_cursor_lcd
  3233                           
  3234                           ;SDCard.c: 153: escreve_frase_ram_lcd("syst initialized");
  3235  001942  0E4B               	movlw	low STR_3
  3236  001944  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3237  001946  0E61               	movlw	high STR_3
  3238  001948  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3239  00194A  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3240                           
  3241                           ;SDCard.c: 156: FResult = pf_open(fileName );
  3242  00194E  0EEC               	movlw	low _fileName
  3243  001950  0100               	movlb	0	; () banked
  3244  001952  6FB5               	movwf	pf_open@path& (0+255),b
  3245  001954  0E01               	movlw	high _fileName
  3246  001956  6FB6               	movwf	(pf_open@path+1)& (0+255),b
  3247  001958  EC4E  F00F         	call	_pf_open	;wreg free
  3248  00195C  0101               	movlb	1	; () banked
  3249  00195E  6FB1               	movwf	SDCard@FResult& (0+255),b
  3250                           
  3251                           ; BSR set to: 1
  3252                           ;SDCard.c: 157: posicao_cursor_lcd(1,0);
  3253  001960  0E00               	movlw	0
  3254  001962  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3255  001964  0E01               	movlw	1
  3256  001966  EC4C  F017         	call	_posicao_cursor_lcd
  3257                           
  3258                           ;SDCard.c: 158: escreve_inteiro_lcd(FResult);
  3259  00196A  C1B1  F066         	movff	SDCard@FResult,escreve_inteiro_lcd@valor
  3260  00196E  0100               	movlb	0	; () banked
  3261  001970  6B67               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3262  001972  EC08  F019         	call	_escreve_inteiro_lcd	;wreg free
  3263                           
  3264                           ;SDCard.c: 159: _delay((unsigned long)((2000)*(48000000/4000.0)));
  3265  001976  0E7A               	movlw	122
  3266  001978  0100               	movlb	0	; () banked
  3267  00197A  6FCE               	movwf	(??_SDCard+1)& (0+255),b
  3268  00197C  0EC1               	movlw	193
  3269  00197E  6FCD               	movwf	??_SDCard& (0+255),b
  3270  001980  0E81               	movlw	129
  3271  001982                     u10697:
  3272  001982  2EE8               	decfsz	wreg,f,c
  3273  001984  D7FE               	bra	u10697
  3274  001986  2FCD               	decfsz	??_SDCard& (0+255),f,b
  3275  001988  D7FC               	bra	u10697
  3276  00198A  2FCE               	decfsz	(??_SDCard+1)& (0+255),f,b
  3277  00198C  D7FA               	bra	u10697
  3278  00198E  D000               	nop2	
  3279                           
  3280                           ;SDCard.c: 161: if( FResult == FR_OK )
  3281  001990  0101               	movlb	1	; () banked
  3282  001992  51B1               	movf	SDCard@FResult& (0+255),w,b
  3283  001994  A4D8               	btfss	status,2,c
  3284  001996  D0AB               	goto	l294
  3285                           
  3286                           ; BSR set to: 1
  3287                           ;SDCard.c: 162: {
  3288                           ;SDCard.c: 163: _delay((unsigned long)((1000)*(48000000/4000.0)));
  3289  001998  0E3D               	movlw	61
  3290  00199A  0100               	movlb	0	; () banked
  3291  00199C  6FCE               	movwf	(??_SDCard+1)& (0+255),b
  3292  00199E  0EE1               	movlw	225
  3293  0019A0  6FCD               	movwf	??_SDCard& (0+255),b
  3294  0019A2  0E3F               	movlw	63
  3295  0019A4                     u10707:
  3296  0019A4  2EE8               	decfsz	wreg,f,c
  3297  0019A6  D7FE               	bra	u10707
  3298  0019A8  2FCD               	decfsz	??_SDCard& (0+255),f,b
  3299  0019AA  D7FC               	bra	u10707
  3300  0019AC  2FCE               	decfsz	(??_SDCard+1)& (0+255),f,b
  3301  0019AE  D7FA               	bra	u10707
  3302  0019B0  D000               	nop2	
  3303                           
  3304                           ;SDCard.c: 165: if( (FResult = pf_write("SCard", 5, &br)) == FR_OK )
  3305  0019B2  0E73               	movlw	low STR_4
  3306  0019B4  0100               	movlb	0	; () banked
  3307  0019B6  6F94               	movwf	pf_write@buff& (0+255),b
  3308  0019B8  0E62               	movlw	high STR_4
  3309  0019BA  6F95               	movwf	(pf_write@buff+1)& (0+255),b
  3310  0019BC  0E00               	movlw	0
  3311  0019BE  6F97               	movwf	(pf_write@btw+1)& (0+255),b
  3312  0019C0  0E05               	movlw	5
  3313  0019C2  6F96               	movwf	pf_write@btw& (0+255),b
  3314  0019C4  0EB2               	movlw	low SDCard@br
  3315  0019C6  6F98               	movwf	pf_write@bw& (0+255),b
  3316  0019C8  0E01               	movlw	high SDCard@br
  3317  0019CA  6F99               	movwf	(pf_write@bw+1)& (0+255),b
  3318  0019CC  EC23  F003         	call	_pf_write	;wreg free
  3319  0019D0  0101               	movlb	1	; () banked
  3320  0019D2  6FB1               	movwf	SDCard@FResult& (0+255),b
  3321  0019D4  51B1               	movf	SDCard@FResult& (0+255),w,b
  3322  0019D6  A4D8               	btfss	status,2,c
  3323  0019D8  D019               	goto	l295
  3324                           
  3325                           ; BSR set to: 1
  3326                           ;SDCard.c: 166: {
  3327                           ;SDCard.c: 167: posicao_cursor_lcd(1,0);
  3328  0019DA  0E00               	movlw	0
  3329  0019DC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3330  0019DE  0E01               	movlw	1
  3331  0019E0  EC4C  F017         	call	_posicao_cursor_lcd
  3332                           
  3333                           ;SDCard.c: 168: escreve_frase_ram_lcd("Escrevendo");
  3334  0019E4  0E17               	movlw	low STR_5
  3335  0019E6  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3336  0019E8  0E62               	movlw	high STR_5
  3337  0019EA  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3338  0019EC  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3339                           
  3340                           ;SDCard.c: 169: _delay((unsigned long)((2000)*(48000000/4000.0)));
  3341  0019F0  0E7A               	movlw	122
  3342  0019F2  0100               	movlb	0	; () banked
  3343  0019F4  6FCE               	movwf	(??_SDCard+1)& (0+255),b
  3344  0019F6  0EC1               	movlw	193
  3345  0019F8  6FCD               	movwf	??_SDCard& (0+255),b
  3346  0019FA  0E81               	movlw	129
  3347  0019FC                     u10717:
  3348  0019FC  2EE8               	decfsz	wreg,f,c
  3349  0019FE  D7FE               	bra	u10717
  3350  001A00  2FCD               	decfsz	??_SDCard& (0+255),f,b
  3351  001A02  D7FC               	bra	u10717
  3352  001A04  2FCE               	decfsz	(??_SDCard+1)& (0+255),f,b
  3353  001A06  D7FA               	bra	u10717
  3354  001A08  D000               	nop2	
  3355                           
  3356                           ;SDCard.c: 170: }
  3357  001A0A  D00F               	goto	l299
  3358  001A0C                     l295:
  3359                           
  3360                           ;SDCard.c: 171: else
  3361                           ;SDCard.c: 172: {
  3362                           ;SDCard.c: 173: escreve_cmd_lcd(0b00000001);
  3363  001A0C  0E01               	movlw	1
  3364  001A0E  ECA1  F015         	call	_escreve_cmd_lcd
  3365                           
  3366                           ;SDCard.c: 174: posicao_cursor_lcd(1,0);
  3367  001A12  0E00               	movlw	0
  3368  001A14  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3369  001A16  0E01               	movlw	1
  3370  001A18  EC4C  F017         	call	_posicao_cursor_lcd
  3371                           
  3372                           ;SDCard.c: 175: escreve_frase_ram_lcd("SDCard error");
  3373  001A1C  0EE8               	movlw	low STR_6
  3374  001A1E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3375  001A20  0E61               	movlw	high STR_6
  3376  001A22  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3377  001A24  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3378  001A28                     l297:
  3379  001A28  D7FF               	goto	l297
  3380  001A2A                     l299:
  3381                           
  3382                           ;SDCard.c: 177: }
  3383                           ;SDCard.c: 178: escreve_cmd_lcd(0b00000001);
  3384  001A2A  0E01               	movlw	1
  3385  001A2C  ECA1  F015         	call	_escreve_cmd_lcd
  3386                           
  3387                           ;SDCard.c: 181: posicao_cursor_lcd(1,0);
  3388  001A30  0E00               	movlw	0
  3389  001A32  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3390  001A34  0E01               	movlw	1
  3391  001A36  EC4C  F017         	call	_posicao_cursor_lcd
  3392                           
  3393                           ;SDCard.c: 182: escreve_frase_ram_lcd("lendo arquivo");
  3394  001A3A  0EB2               	movlw	low STR_7
  3395  001A3C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3396  001A3E  0E61               	movlw	high STR_7
  3397  001A40  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3398  001A42  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3399                           
  3400                           ;SDCard.c: 185: {
  3401                           ;SDCard.c: 186: readover(1);
  3402                           
  3403                           ;SDCard.c: 184: do
  3404  001A46  0E00               	movlw	0
  3405  001A48  6E1B               	movwf	readover@a+1,c
  3406  001A4A  0E01               	movlw	1
  3407  001A4C  6E1A               	movwf	readover@a,c
  3408  001A4E  EC02  F01A         	call	_readover	;wreg free
  3409                           
  3410                           ;SDCard.c: 187: posicao_cursor_lcd(1,0);
  3411  001A52  0E00               	movlw	0
  3412  001A54  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3413  001A56  0E01               	movlw	1
  3414  001A58  EC4C  F017         	call	_posicao_cursor_lcd
  3415                           
  3416                           ;SDCard.c: 188: escreve_frase_ram_lcd("To aqui");
  3417  001A5C  0E57               	movlw	low STR_8
  3418  001A5E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3419  001A60  0E62               	movlw	high STR_8
  3420  001A62  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3421  001A64  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3422                           
  3423                           ;SDCard.c: 190: if( (FResult = pf_read(data_buffer_32, 31, &br)) == FR_OK )
  3424  001A68  0E7B               	movlw	low _data_buffer_32
  3425  001A6A  0100               	movlb	0	; () banked
  3426  001A6C  6F94               	movwf	pf_read@buff& (0+255),b
  3427  001A6E  0E01               	movlw	high _data_buffer_32
  3428  001A70  6F95               	movwf	(pf_read@buff+1)& (0+255),b
  3429  001A72  0E00               	movlw	0
  3430  001A74  6F97               	movwf	(pf_read@btr+1)& (0+255),b
  3431  001A76  0E1F               	movlw	31
  3432  001A78  6F96               	movwf	pf_read@btr& (0+255),b
  3433  001A7A  0EB2               	movlw	low SDCard@br
  3434  001A7C  6F98               	movwf	pf_read@br& (0+255),b
  3435  001A7E  0E01               	movlw	high SDCard@br
  3436  001A80  6F99               	movwf	(pf_read@br+1)& (0+255),b
  3437  001A82  EC7F  F007         	call	_pf_read	;wreg free
  3438  001A86  0101               	movlb	1	; () banked
  3439  001A88  6FB1               	movwf	SDCard@FResult& (0+255),b
  3440  001A8A  51B1               	movf	SDCard@FResult& (0+255),w,b
  3441  001A8C  A4D8               	btfss	status,2,c
  3442  001A8E  D015               	goto	l301
  3443                           
  3444                           ; BSR set to: 1
  3445                           ;SDCard.c: 191: {
  3446                           ;SDCard.c: 193: posicao_cursor_lcd(2,0);
  3447  001A90  0E00               	movlw	0
  3448  001A92  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3449  001A94  0E02               	movlw	2
  3450  001A96  EC4C  F017         	call	_posicao_cursor_lcd
  3451                           
  3452                           ;SDCard.c: 194: escreve_frase_ram_lcd("Sistema OK");
  3453  001A9A  0E0C               	movlw	low STR_9
  3454  001A9C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3455  001A9E  0E62               	movlw	high STR_9
  3456  001AA0  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3457  001AA2  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3458                           
  3459                           ;SDCard.c: 195: data_buffer_32[br] = 0;
  3460  001AA6  0E7B               	movlw	low _data_buffer_32
  3461  001AA8  0101               	movlb	1	; () banked
  3462  001AAA  25B2               	addwf	SDCard@br& (0+255),w,b
  3463  001AAC  6ED9               	movwf	fsr2l,c
  3464  001AAE  0E01               	movlw	high _data_buffer_32
  3465  001AB0  21B3               	addwfc	(SDCard@br+1)& (0+255),w,b
  3466  001AB2  6EDA               	movwf	fsr2h,c
  3467  001AB4  0E00               	movlw	0
  3468  001AB6  6EDF               	movwf	indf2,c
  3469                           
  3470                           ;SDCard.c: 196: break;
  3471  001AB8  D040               	goto	l311
  3472  001ABA                     l301:
  3473                           
  3474                           ; BSR set to: 1
  3475                           ;SDCard.c: 199: else
  3476                           ;SDCard.c: 200: {
  3477                           ;SDCard.c: 202: escreve_cmd_lcd(0b00000001);
  3478                           
  3479                           ; BSR set to: 1
  3480  001ABA  0E01               	movlw	1
  3481  001ABC  ECA1  F015         	call	_escreve_cmd_lcd
  3482                           
  3483                           ;SDCard.c: 203: posicao_cursor_lcd(1,0);
  3484  001AC0  0E00               	movlw	0
  3485  001AC2  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3486  001AC4  0E01               	movlw	1
  3487  001AC6  EC4C  F017         	call	_posicao_cursor_lcd
  3488                           
  3489                           ;SDCard.c: 204: escreve_frase_ram_lcd("Erro tentando");
  3490  001ACA  0E96               	movlw	low STR_10
  3491  001ACC  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3492  001ACE  0E61               	movlw	high STR_10
  3493  001AD0  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3494  001AD2  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3495                           
  3496                           ;SDCard.c: 205: posicao_cursor_lcd(2,0);
  3497  001AD6  0E00               	movlw	0
  3498  001AD8  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3499  001ADA  0E02               	movlw	2
  3500  001ADC  EC4C  F017         	call	_posicao_cursor_lcd
  3501                           
  3502                           ;SDCard.c: 206: escreve_frase_ram_lcd("ler o arquivo");
  3503  001AE0  0EA4               	movlw	low STR_11
  3504  001AE2  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3505  001AE4  0E61               	movlw	high STR_11
  3506  001AE6  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3507  001AE8  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3508  001AEC                     l304:
  3509  001AEC  D7FF               	goto	l304
  3510  001AEE                     l294:
  3511                           
  3512                           ; BSR set to: 1
  3513                           ;SDCard.c: 214: else
  3514                           ;SDCard.c: 215: {
  3515                           ;SDCard.c: 216: escreve_cmd_lcd(0b00000001);
  3516                           
  3517                           ; BSR set to: 1
  3518  001AEE  0E01               	movlw	1
  3519  001AF0  ECA1  F015         	call	_escreve_cmd_lcd
  3520                           
  3521                           ;SDCard.c: 217: posicao_cursor_lcd(1,0);
  3522  001AF4  0E00               	movlw	0
  3523  001AF6  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3524  001AF8  0E01               	movlw	1
  3525  001AFA  EC4C  F017         	call	_posicao_cursor_lcd
  3526                           
  3527                           ;SDCard.c: 218: escreve_frase_ram_lcd("Erro tentando");
  3528  001AFE  0E96               	movlw	low STR_10
  3529  001B00  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3530  001B02  0E61               	movlw	high STR_10
  3531  001B04  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3532  001B06  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3533                           
  3534                           ;SDCard.c: 219: posicao_cursor_lcd(2,0);
  3535  001B0A  0E00               	movlw	0
  3536  001B0C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3537  001B0E  0E02               	movlw	2
  3538  001B10  EC4C  F017         	call	_posicao_cursor_lcd
  3539                           
  3540                           ;SDCard.c: 220: escreve_frase_ram_lcd("abrir o arquivo");
  3541  001B14  0E5C               	movlw	low STR_14
  3542  001B16  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3543  001B18  0E61               	movlw	high STR_14
  3544  001B1A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3545  001B1C  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3546  001B20                     l308:
  3547  001B20  D7FF               	goto	l308
  3548  001B22                     l293:
  3549                           
  3550                           ;SDCard.c: 224: else
  3551                           ;SDCard.c: 225: {
  3552                           ;SDCard.c: 227: posicao_cursor_lcd(1,0);
  3553  001B22  0E00               	movlw	0
  3554  001B24  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3555  001B26  0E01               	movlw	1
  3556  001B28  EC4C  F017         	call	_posicao_cursor_lcd
  3557                           
  3558                           ;SDCard.c: 228: escreve_frase_ram_lcd("ERRO!");
  3559  001B2C  0E6D               	movlw	low STR_15
  3560  001B2E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3561  001B30  0E62               	movlw	high STR_15
  3562  001B32  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3563  001B34  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3564  001B38                     l312:
  3565  001B38  D7FF               	goto	l312
  3566  001B3A                     l311:
  3567                           
  3568                           ;SDCard.c: 231: }
  3569                           ;SDCard.c: 233: posicao_cursor_lcd(1,0);
  3570  001B3A  0E00               	movlw	0
  3571  001B3C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3572  001B3E  0E01               	movlw	1
  3573  001B40  EC4C  F017         	call	_posicao_cursor_lcd
  3574                           
  3575                           ;SDCard.c: 234: escreve_frase_ram_lcd("Não to Preso");
  3576  001B44  0EDB               	movlw	low STR_16
  3577  001B46  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3578  001B48  0E61               	movlw	high STR_16
  3579  001B4A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3580  001B4C  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3581                           
  3582                           ;SDCard.c: 250: if( FResult != FR_OK )
  3583  001B50  0101               	movlb	1	; () banked
  3584  001B52  51B1               	movf	SDCard@FResult& (0+255),w,b
  3585  001B54  B4D8               	btfsc	status,2,c
  3586  001B56  D00C               	goto	l318
  3587                           
  3588                           ; BSR set to: 1
  3589                           ;SDCard.c: 251: {
  3590                           ;SDCard.c: 253: posicao_cursor_lcd(1,0);
  3591  001B58  0E00               	movlw	0
  3592  001B5A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3593  001B5C  0E01               	movlw	1
  3594  001B5E  EC4C  F017         	call	_posicao_cursor_lcd
  3595                           
  3596                           ;SDCard.c: 254: escreve_frase_ram_lcd("Erro filesyst");
  3597  001B62  0EC0               	movlw	low STR_17
  3598  001B64  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3599  001B66  0E61               	movlw	high STR_17
  3600  001B68  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3601  001B6A  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3602  001B6E                     l316:
  3603  001B6E  D7FF               	goto	l316
  3604  001B70                     l318:
  3605                           
  3606                           ;SDCard.c: 263: posicao_cursor_lcd(1,0);
  3607                           
  3608                           ;SDCard.c: 259: }
  3609                           ;SDCard.c: 262: while(1){
  3610  001B70  0E00               	movlw	0
  3611  001B72  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3612  001B74  0E01               	movlw	1
  3613  001B76  EC4C  F017         	call	_posicao_cursor_lcd
  3614                           
  3615                           ;SDCard.c: 264: escreve_frase_ram_lcd("to Preso aq");
  3616  001B7A  0EF5               	movlw	low STR_18
  3617  001B7C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3618  001B7E  0E61               	movlw	high STR_18
  3619  001B80  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3620  001B82  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  3621  001B86  D7F4               	goto	l318
  3622  001B88                     __end_of_SDCard:
  3623                           	opt stack 0
  3624                           tosu	equ	0xFFF
  3625                           tosh	equ	0xFFE
  3626                           tosl	equ	0xFFD
  3627                           pclath	equ	0xFFA
  3628                           tblptru	equ	0xFF8
  3629                           tblptrh	equ	0xFF7
  3630                           tblptrl	equ	0xFF6
  3631                           tablat	equ	0xFF5
  3632                           prodh	equ	0xFF4
  3633                           prodl	equ	0xFF3
  3634                           intcon	equ	0xFF2
  3635                           intcon2	equ	0xFF1
  3636                           intcon3	equ	0xFF0
  3637                           postinc0	equ	0xFEE
  3638                           wreg	equ	0xFE8
  3639                           postinc1	equ	0xFE6
  3640                           postdec1	equ	0xFE5
  3641                           fsr1h	equ	0xFE2
  3642                           fsr1l	equ	0xFE1
  3643                           indf2	equ	0xFDF
  3644                           postinc2	equ	0xFDE
  3645                           postdec2	equ	0xFDD
  3646                           fsr2h	equ	0xFDA
  3647                           fsr2l	equ	0xFD9
  3648                           status	equ	0xFD8
  3649                           
  3650 ;; *************** function _readover *****************
  3651 ;; Defined at:
  3652 ;;		line 25 in file "bibliotecas/diskio.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;  a               2   25[COMRAM] int 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;		None
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  1    wreg      void 
  3659 ;; Registers used:
  3660 ;;		None
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3666 ;;      Params:         2       0       0       0       0       0       0       0       0
  3667 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3669 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3670 ;;Total ram usage:        2 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    2
  3673 ;; This function calls:
  3674 ;;		Nothing
  3675 ;; This function is called by:
  3676 ;;		_SDCard
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           	psect	text15
  3681  003404                     __ptext15:
  3682                           	opt stack 0
  3683  003404                     _readover:
  3684                           	opt stack 26
  3685                           
  3686                           ;diskio.c: 27: flag = a;
  3687                           
  3688                           ;incstack = 0
  3689  003404  C01A  F0D5         	movff	readover@a,_flag
  3690  003408  C01B  F0D6         	movff	readover@a+1,_flag+1
  3691  00340C  0012               	return		;funcret
  3692  00340E                     __end_of_readover:
  3693                           	opt stack 0
  3694                           tosu	equ	0xFFF
  3695                           tosh	equ	0xFFE
  3696                           tosl	equ	0xFFD
  3697                           pclath	equ	0xFFA
  3698                           tblptru	equ	0xFF8
  3699                           tblptrh	equ	0xFF7
  3700                           tblptrl	equ	0xFF6
  3701                           tablat	equ	0xFF5
  3702                           prodh	equ	0xFF4
  3703                           prodl	equ	0xFF3
  3704                           intcon	equ	0xFF2
  3705                           intcon2	equ	0xFF1
  3706                           intcon3	equ	0xFF0
  3707                           postinc0	equ	0xFEE
  3708                           wreg	equ	0xFE8
  3709                           postinc1	equ	0xFE6
  3710                           postdec1	equ	0xFE5
  3711                           fsr1h	equ	0xFE2
  3712                           fsr1l	equ	0xFE1
  3713                           indf2	equ	0xFDF
  3714                           postinc2	equ	0xFDE
  3715                           postdec2	equ	0xFDD
  3716                           fsr2h	equ	0xFDA
  3717                           fsr2l	equ	0xFD9
  3718                           status	equ	0xFD8
  3719                           
  3720 ;; *************** function _pf_write *****************
  3721 ;; Defined at:
  3722 ;;		line 923 in file "bibliotecas/pff.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;  buff            2   52[BANK0 ] PTR const void 
  3725 ;;		 -> STR_4(6), 
  3726 ;;  btw             2   54[BANK0 ] unsigned int 
  3727 ;;  bw              2   56[BANK0 ] PTR unsigned int 
  3728 ;;		 -> SDCard@br(2), 
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;  clst            4   76[BANK0 ] unsigned long 
  3731 ;;  remain          4   72[BANK0 ] unsigned long 
  3732 ;;  sect            4   68[BANK0 ] unsigned long 
  3733 ;;  fs              2   83[BANK0 ] PTR struct .
  3734 ;;		 -> NULL(0), SDCard@fs(42), 
  3735 ;;  wcnt            2   81[BANK0 ] unsigned int 
  3736 ;;  p               2   66[BANK0 ] PTR const unsigned char 
  3737 ;;		 -> STR_4(6), 
  3738 ;;  cs              1   80[BANK0 ] unsigned char 
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  1    wreg      enum E3884
  3741 ;; Registers used:
  3742 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3748 ;;      Params:         0       6       0       0       0       0       0       0       0
  3749 ;;      Locals:         0      19       0       0       0       0       0       0       0
  3750 ;;      Temps:          0       8       0       0       0       0       0       0       0
  3751 ;;      Totals:         0      33       0       0       0       0       0       0       0
  3752 ;;Total ram usage:       33 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; Hardware stack levels required when called:    7
  3755 ;; This function calls:
  3756 ;;		_clust2sect
  3757 ;;		_disk_writep
  3758 ;;		_escreve_frase_ram_lcd
  3759 ;;		_get_fat
  3760 ;;		_posicao_cursor_lcd
  3761 ;; This function is called by:
  3762 ;;		_SDCard
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text16
  3767  000646                     __ptext16:
  3768                           	opt stack 0
  3769  000646                     _pf_write:
  3770                           	opt stack 21
  3771                           
  3772                           ;pff.c: 929: DWORD clst;
  3773                           ;pff.c: 930: DWORD sect, remain;
  3774                           ;pff.c: 931: const BYTE *p = buff;
  3775                           
  3776                           ;incstack = 0
  3777  000646  C094  F0A2         	movff	pf_write@buff,pf_write@p
  3778  00064A  C095  F0A3         	movff	pf_write@buff+1,pf_write@p+1
  3779                           
  3780                           ;pff.c: 932: BYTE cs;
  3781                           ;pff.c: 933: UINT wcnt;
  3782                           ;pff.c: 934: FATFS *fs = FatFs;
  3783  00064E  C030  F0B3         	movff	_FatFs,pf_write@fs
  3784  000652  C031  F0B4         	movff	_FatFs+1,pf_write@fs+1
  3785                           
  3786                           ;pff.c: 937: *bw = 0;
  3787  000656  C098  FFD9         	movff	pf_write@bw,fsr2l
  3788  00065A  C099  FFDA         	movff	pf_write@bw+1,fsr2h
  3789  00065E  0E00               	movlw	0
  3790  000660  6EDE               	movwf	postinc2,c
  3791  000662  0E00               	movlw	0
  3792  000664  6EDD               	movwf	postdec2,c
  3793                           
  3794                           ;pff.c: 938: if (!fs) return FR_NOT_ENABLED;
  3795  000666  0100               	movlb	0	; () banked
  3796  000668  51B3               	movf	pf_write@fs& (0+255),w,b
  3797  00066A  11B4               	iorwf	(pf_write@fs+1)& (0+255),w,b
  3798  00066C  A4D8               	btfss	status,2,c
  3799  00066E  D002               	goto	l1044
  3800                           
  3801                           ; BSR set to: 0
  3802  000670  0E05               	movlw	5
  3803                           
  3804                           ; BSR set to: 0
  3805  000672  0012               	return	
  3806  000674                     l1044:
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;pff.c: 939: if (!(fs->flag & 0x01))
  3810                           
  3811                           ; BSR set to: 0
  3812  000674  EE20 F001          	lfsr	2,1
  3813  000678  51B3               	movf	pf_write@fs& (0+255),w,b
  3814  00067A  26D9               	addwf	fsr2l,f,c
  3815  00067C  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  3816  00067E  22DA               	addwfc	fsr2h,f,c
  3817  000680  B0DF               	btfsc	indf2,0,c
  3818  000682  D002               	goto	l1046
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;pff.c: 940: return FR_NOT_OPENED;
  3822  000684  0E04               	movlw	4
  3823                           
  3824                           ; BSR set to: 0
  3825  000686  0012               	return	
  3826  000688                     l1046:
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;pff.c: 942: if (!btw) {
  3830                           
  3831                           ; BSR set to: 0
  3832  000688  5196               	movf	pf_write@btw& (0+255),w,b
  3833  00068A  1197               	iorwf	(pf_write@btw+1)& (0+255),w,b
  3834  00068C  A4D8               	btfss	status,2,c
  3835  00068E  D031               	goto	l1047
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;pff.c: 943: if ((fs->flag & 0x40) && disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_E
      +                          RR;};
  3839  000690  EE20 F001          	lfsr	2,1
  3840  000694  51B3               	movf	pf_write@fs& (0+255),w,b
  3841  000696  26D9               	addwf	fsr2l,f,c
  3842  000698  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  3843  00069A  22DA               	addwfc	fsr2h,f,c
  3844  00069C  ACDF               	btfss	indf2,6,c
  3845  00069E  D01E               	goto	l1048
  3846                           
  3847                           ; BSR set to: 0
  3848  0006A0  0E00               	movlw	0
  3849  0006A2  6E23               	movwf	disk_writep@wr,c
  3850  0006A4  0E00               	movlw	0
  3851  0006A6  6E24               	movwf	disk_writep@wr+1,c
  3852  0006A8  0E00               	movlw	0
  3853  0006AA  6E25               	movwf	disk_writep@wr+2,c
  3854  0006AC  0E00               	movlw	0
  3855  0006AE  6E26               	movwf	disk_writep@sc,c
  3856  0006B0  0E00               	movlw	0
  3857  0006B2  6E27               	movwf	disk_writep@sc+1,c
  3858  0006B4  0E00               	movlw	0
  3859  0006B6  6E28               	movwf	disk_writep@sc+2,c
  3860  0006B8  0E00               	movlw	0
  3861  0006BA  6E29               	movwf	disk_writep@sc+3,c
  3862  0006BC  ECF6  F00F         	call	_disk_writep	;wreg free
  3863  0006C0  0900               	iorlw	0
  3864  0006C2  B4D8               	btfsc	status,2,c
  3865  0006C4  D00B               	goto	l1048
  3866  0006C6  0100               	movlb	0	; () banked
  3867  0006C8  EE20 F001          	lfsr	2,1
  3868  0006CC  51B3               	movf	pf_write@fs& (0+255),w,b
  3869  0006CE  26D9               	addwf	fsr2l,f,c
  3870  0006D0  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  3871  0006D2  22DA               	addwfc	fsr2h,f,c
  3872  0006D4  0E00               	movlw	0
  3873  0006D6  6EDF               	movwf	indf2,c
  3874                           
  3875                           ; BSR set to: 0
  3876  0006D8  0E01               	movlw	1
  3877                           
  3878                           ; BSR set to: 0
  3879  0006DA  0012               	return	
  3880  0006DC                     l1048:
  3881                           
  3882                           ;pff.c: 944: fs->flag &= ~0x40;
  3883                           
  3884                           ; BSR set to: 0
  3885  0006DC  0100               	movlb	0	; () banked
  3886  0006DE  EE20 F001          	lfsr	2,1
  3887  0006E2  51B3               	movf	pf_write@fs& (0+255),w,b
  3888  0006E4  26D9               	addwf	fsr2l,f,c
  3889  0006E6  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  3890  0006E8  22DA               	addwfc	fsr2h,f,c
  3891  0006EA  0EBF               	movlw	191
  3892  0006EC  16DF               	andwf	indf2,f,c
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;pff.c: 945: return FR_OK;
  3896  0006EE  0E00               	movlw	0
  3897                           
  3898                           ; BSR set to: 0
  3899  0006F0  0012               	return	
  3900  0006F2                     l1047:
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;pff.c: 947: if (!(fs->flag & 0x40))
  3904                           
  3905                           ; BSR set to: 0
  3906  0006F2  EE20 F001          	lfsr	2,1
  3907  0006F6  51B3               	movf	pf_write@fs& (0+255),w,b
  3908  0006F8  26D9               	addwf	fsr2l,f,c
  3909  0006FA  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  3910  0006FC  22DA               	addwfc	fsr2h,f,c
  3911  0006FE  BCDF               	btfsc	indf2,6,c
  3912  000700  D00E               	goto	l1050
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;pff.c: 948: fs->fptr &= 0xFFFFFE00;
  3916  000702  EE20 F016          	lfsr	2,22
  3917  000706  51B3               	movf	pf_write@fs& (0+255),w,b
  3918  000708  26D9               	addwf	fsr2l,f,c
  3919  00070A  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  3920  00070C  22DA               	addwfc	fsr2h,f,c
  3921  00070E  0E00               	movlw	0
  3922  000710  16DE               	andwf	postinc2,f,c
  3923  000712  0EFE               	movlw	254
  3924  000714  16DE               	andwf	postinc2,f,c
  3925  000716  0EFF               	movlw	255
  3926  000718  16DE               	andwf	postinc2,f,c
  3927  00071A  0EFF               	movlw	255
  3928  00071C  16DE               	andwf	postinc2,f,c
  3929  00071E                     l1050:
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;pff.c: 949: }
  3933                           ;pff.c: 950: remain = fs->fsize - fs->fptr;
  3934                           
  3935                           ; BSR set to: 0
  3936  00071E  EE20 F01A          	lfsr	2,26
  3937  000722  51B3               	movf	pf_write@fs& (0+255),w,b
  3938  000724  26D9               	addwf	fsr2l,f,c
  3939  000726  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  3940  000728  22DA               	addwfc	fsr2h,f,c
  3941  00072A  CFDE F09A          	movff	postinc2,??_pf_write
  3942  00072E  CFDE F09B          	movff	postinc2,??_pf_write+1
  3943  000732  CFDE F09C          	movff	postinc2,??_pf_write+2
  3944  000736  CFDE F09D          	movff	postinc2,??_pf_write+3
  3945  00073A  EE20 F016          	lfsr	2,22
  3946  00073E  51B3               	movf	pf_write@fs& (0+255),w,b
  3947  000740  26D9               	addwf	fsr2l,f,c
  3948  000742  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  3949  000744  22DA               	addwfc	fsr2h,f,c
  3950  000746  CFDE F09E          	movff	postinc2,??_pf_write+4
  3951  00074A  CFDE F09F          	movff	postinc2,??_pf_write+5
  3952  00074E  CFDE F0A0          	movff	postinc2,??_pf_write+6
  3953  000752  CFDE F0A1          	movff	postinc2,??_pf_write+7
  3954  000756  1F9E               	comf	(??_pf_write+4)& (0+255),f,b
  3955  000758  1F9F               	comf	(??_pf_write+5)& (0+255),f,b
  3956  00075A  1FA0               	comf	(??_pf_write+6)& (0+255),f,b
  3957  00075C  1FA1               	comf	(??_pf_write+7)& (0+255),f,b
  3958  00075E  2B9E               	incf	(??_pf_write+4)& (0+255),f,b
  3959  000760  0E00               	movlw	0
  3960  000762  239F               	addwfc	(??_pf_write+5)& (0+255),f,b
  3961  000764  23A0               	addwfc	(??_pf_write+6)& (0+255),f,b
  3962  000766  23A1               	addwfc	(??_pf_write+7)& (0+255),f,b
  3963  000768  519A               	movf	??_pf_write& (0+255),w,b
  3964  00076A  259E               	addwf	(??_pf_write+4)& (0+255),w,b
  3965  00076C  6FA8               	movwf	pf_write@remain& (0+255),b
  3966  00076E  519B               	movf	(??_pf_write+1)& (0+255),w,b
  3967  000770  219F               	addwfc	(??_pf_write+5)& (0+255),w,b
  3968  000772  6FA9               	movwf	(pf_write@remain+1)& (0+255),b
  3969  000774  519C               	movf	(??_pf_write+2)& (0+255),w,b
  3970  000776  21A0               	addwfc	(??_pf_write+6)& (0+255),w,b
  3971  000778  6FAA               	movwf	(pf_write@remain+2)& (0+255),b
  3972  00077A  519D               	movf	(??_pf_write+3)& (0+255),w,b
  3973  00077C  21A1               	addwfc	(??_pf_write+7)& (0+255),w,b
  3974  00077E  6FAB               	movwf	(pf_write@remain+3)& (0+255),b
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;pff.c: 951: if (btw > remain) btw = (UINT)remain;
  3978  000780  5196               	movf	pf_write@btw& (0+255),w,b
  3979  000782  6F9A               	movwf	??_pf_write& (0+255),b
  3980  000784  5197               	movf	(pf_write@btw+1)& (0+255),w,b
  3981  000786  6F9B               	movwf	(??_pf_write+1)& (0+255),b
  3982  000788  6B9C               	clrf	(??_pf_write+2)& (0+255),b
  3983  00078A  6B9D               	clrf	(??_pf_write+3)& (0+255),b
  3984  00078C  519A               	movf	??_pf_write& (0+255),w,b
  3985  00078E  5DA8               	subwf	pf_write@remain& (0+255),w,b
  3986  000790  519B               	movf	(??_pf_write+1)& (0+255),w,b
  3987  000792  59A9               	subwfb	(pf_write@remain+1)& (0+255),w,b
  3988  000794  519C               	movf	(??_pf_write+2)& (0+255),w,b
  3989  000796  59AA               	subwfb	(pf_write@remain+2)& (0+255),w,b
  3990  000798  519D               	movf	(??_pf_write+3)& (0+255),w,b
  3991  00079A  59AB               	subwfb	(pf_write@remain+3)& (0+255),w,b
  3992  00079C  B0D8               	btfsc	status,0,c
  3993  00079E  D1AC               	goto	l1063
  3994                           
  3995                           ; BSR set to: 0
  3996  0007A0  C0A8  F096         	movff	pf_write@remain,pf_write@btw
  3997  0007A4  C0A9  F097         	movff	pf_write@remain+1,pf_write@btw+1
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;pff.c: 953: while (btw) {
  4001  0007A8  D1A7               	goto	l1063
  4002  0007AA                     
  4003                           ; BSR set to: 0
  4004                           ;pff.c: 954: if ((UINT)fs->fptr % 512 == 0) {
  4005                           
  4006                           ; BSR set to: 0
  4007  0007AA  0EFF               	movlw	255
  4008  0007AC  6F9A               	movwf	??_pf_write& (0+255),b
  4009  0007AE  0E01               	movlw	1
  4010  0007B0  6F9B               	movwf	(??_pf_write+1)& (0+255),b
  4011  0007B2  EE20 F016          	lfsr	2,22
  4012  0007B6  51B3               	movf	pf_write@fs& (0+255),w,b
  4013  0007B8  26D9               	addwf	fsr2l,f,c
  4014  0007BA  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4015  0007BC  22DA               	addwfc	fsr2h,f,c
  4016  0007BE  CFDE F09C          	movff	postinc2,??_pf_write+2
  4017  0007C2  CFDD F09D          	movff	postdec2,??_pf_write+3
  4018  0007C6  519A               	movf	??_pf_write& (0+255),w,b
  4019  0007C8  179C               	andwf	(??_pf_write+2)& (0+255),f,b
  4020  0007CA  519B               	movf	(??_pf_write+1)& (0+255),w,b
  4021  0007CC  179D               	andwf	(??_pf_write+3)& (0+255),f,b
  4022  0007CE  519C               	movf	(??_pf_write+2)& (0+255),w,b
  4023  0007D0  119D               	iorwf	(??_pf_write+3)& (0+255),w,b
  4024  0007D2  A4D8               	btfss	status,2,c
  4025  0007D4  D0E9               	goto	l1054
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;pff.c: 955: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  4029  0007D6  EE20 F016          	lfsr	2,22
  4030  0007DA  51B3               	movf	pf_write@fs& (0+255),w,b
  4031  0007DC  26D9               	addwf	fsr2l,f,c
  4032  0007DE  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4033  0007E0  22DA               	addwfc	fsr2h,f,c
  4034  0007E2  CFDE F09A          	movff	postinc2,??_pf_write
  4035  0007E6  CFDE F09B          	movff	postinc2,??_pf_write+1
  4036  0007EA  CFDE F09C          	movff	postinc2,??_pf_write+2
  4037  0007EE  CFDE F09D          	movff	postinc2,??_pf_write+3
  4038  0007F2  0E0A               	movlw	10
  4039  0007F4  D005               	goto	u9270
  4040  0007F6                     u9275:
  4041  0007F6  90D8               	bcf	status,0,c
  4042  0007F8  339D               	rrcf	(??_pf_write+3)& (0+255),f,b
  4043  0007FA  339C               	rrcf	(??_pf_write+2)& (0+255),f,b
  4044  0007FC  339B               	rrcf	(??_pf_write+1)& (0+255),f,b
  4045  0007FE  339A               	rrcf	??_pf_write& (0+255),f,b
  4046  000800                     u9270:
  4047  000800  2EE8               	decfsz	wreg,f,c
  4048  000802  D7F9               	goto	u9275
  4049  000804  EE20 F002          	lfsr	2,2
  4050  000808  51B3               	movf	pf_write@fs& (0+255),w,b
  4051  00080A  26D9               	addwf	fsr2l,f,c
  4052  00080C  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4053  00080E  22DA               	addwfc	fsr2h,f,c
  4054  000810  50DF               	movf	indf2,w,c
  4055  000812  6F9E               	movwf	(??_pf_write+4)& (0+255),b
  4056  000814  059E               	decf	(??_pf_write+4)& (0+255),w,b
  4057  000816  159A               	andwf	??_pf_write& (0+255),w,b
  4058  000818  6FB0               	movwf	pf_write@cs& (0+255),b
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;pff.c: 956: if (!cs) {
  4062  00081A  51B0               	movf	pf_write@cs& (0+255),w,b
  4063  00081C  A4D8               	btfss	status,2,c
  4064  00081E  D054               	goto	l1055
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;pff.c: 957: if (fs->fptr == 0)
  4068  000820  EE20 F016          	lfsr	2,22
  4069  000824  51B3               	movf	pf_write@fs& (0+255),w,b
  4070  000826  26D9               	addwf	fsr2l,f,c
  4071  000828  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4072  00082A  22DA               	addwfc	fsr2h,f,c
  4073  00082C  50DE               	movf	postinc2,w,c
  4074  00082E  10DE               	iorwf	postinc2,w,c
  4075  000830  10DE               	iorwf	postinc2,w,c
  4076  000832  10DE               	iorwf	postinc2,w,c
  4077  000834  A4D8               	btfss	status,2,c
  4078  000836  D00F               	goto	l1056
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;pff.c: 958: clst = fs->org_clust;
  4082  000838  EE20 F01E          	lfsr	2,30
  4083  00083C  51B3               	movf	pf_write@fs& (0+255),w,b
  4084  00083E  26D9               	addwf	fsr2l,f,c
  4085  000840  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4086  000842  22DA               	addwfc	fsr2h,f,c
  4087  000844  CFDE F0AC          	movff	postinc2,pf_write@clst
  4088  000848  CFDE F0AD          	movff	postinc2,pf_write@clst+1
  4089  00084C  CFDE F0AE          	movff	postinc2,pf_write@clst+2
  4090  000850  CFDE F0AF          	movff	postinc2,pf_write@clst+3
  4091  000854  D018               	goto	l1057
  4092  000856                     l1056:
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;pff.c: 959: else
  4096                           ;pff.c: 960: clst = get_fat(fs->curr_clust);
  4097                           
  4098                           ; BSR set to: 0
  4099  000856  EE20 F022          	lfsr	2,34
  4100  00085A  51B3               	movf	pf_write@fs& (0+255),w,b
  4101  00085C  26D9               	addwf	fsr2l,f,c
  4102  00085E  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4103  000860  22DA               	addwfc	fsr2h,f,c
  4104  000862  CFDE F06C          	movff	postinc2,get_fat@clst
  4105  000866  CFDE F06D          	movff	postinc2,get_fat@clst+1
  4106  00086A  CFDE F06E          	movff	postinc2,get_fat@clst+2
  4107  00086E  CFDE F06F          	movff	postinc2,get_fat@clst+3
  4108  000872  EC8D  F005         	call	_get_fat	;wreg free
  4109  000876  C06C  F0AC         	movff	?_get_fat,pf_write@clst
  4110  00087A  C06D  F0AD         	movff	?_get_fat+1,pf_write@clst+1
  4111  00087E  C06E  F0AE         	movff	?_get_fat+2,pf_write@clst+2
  4112  000882  C06F  F0AF         	movff	?_get_fat+3,pf_write@clst+3
  4113  000886                     l1057:
  4114                           
  4115                           ;pff.c: 961: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  4116  000886  0100               	movlb	0	; () banked
  4117  000888  51AF               	movf	(pf_write@clst+3)& (0+255),w,b
  4118  00088A  11AE               	iorwf	(pf_write@clst+2)& (0+255),w,b
  4119  00088C  11AD               	iorwf	(pf_write@clst+1)& (0+255),w,b
  4120  00088E  E10E               	bnz	l8400
  4121  000890  0E02               	movlw	2
  4122  000892  5DAC               	subwf	pf_write@clst& (0+255),w,b
  4123  000894  B0D8               	btfsc	status,0,c
  4124  000896  D00A               	goto	l1058
  4125                           
  4126                           ; BSR set to: 0
  4127  000898  EE20 F001          	lfsr	2,1
  4128  00089C  51B3               	movf	pf_write@fs& (0+255),w,b
  4129  00089E  26D9               	addwf	fsr2l,f,c
  4130  0008A0  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4131  0008A2  22DA               	addwfc	fsr2h,f,c
  4132  0008A4  0E00               	movlw	0
  4133  0008A6  6EDF               	movwf	indf2,c
  4134                           
  4135                           ; BSR set to: 0
  4136  0008A8  0E01               	movlw	1
  4137                           
  4138                           ; BSR set to: 0
  4139  0008AA  0012               	return	
  4140  0008AC                     l1058:
  4141  0008AC                     l8400:
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;pff.c: 962: fs->curr_clust = clst;
  4145  0008AC  EE20 F022          	lfsr	2,34
  4146  0008B0  51B3               	movf	pf_write@fs& (0+255),w,b
  4147  0008B2  26D9               	addwf	fsr2l,f,c
  4148  0008B4  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4149  0008B6  22DA               	addwfc	fsr2h,f,c
  4150  0008B8  C0AC  FFDE         	movff	pf_write@clst,postinc2
  4151  0008BC  C0AD  FFDE         	movff	pf_write@clst+1,postinc2
  4152  0008C0  C0AE  FFDE         	movff	pf_write@clst+2,postinc2
  4153  0008C4  C0AF  FFDE         	movff	pf_write@clst+3,postinc2
  4154  0008C8                     l1055:
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;pff.c: 963: }
  4158                           ;pff.c: 964: sect = clust2sect(fs->curr_clust);
  4159                           
  4160                           ; BSR set to: 0
  4161  0008C8  EE20 F022          	lfsr	2,34
  4162  0008CC  51B3               	movf	pf_write@fs& (0+255),w,b
  4163  0008CE  26D9               	addwf	fsr2l,f,c
  4164  0008D0  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4165  0008D2  22DA               	addwfc	fsr2h,f,c
  4166  0008D4  CFDE F026          	movff	postinc2,clust2sect@clst
  4167  0008D8  CFDE F027          	movff	postinc2,clust2sect@clst+1
  4168  0008DC  CFDE F028          	movff	postinc2,clust2sect@clst+2
  4169  0008E0  CFDE F029          	movff	postinc2,clust2sect@clst+3
  4170  0008E4  EC4B  F014         	call	_clust2sect	;wreg free
  4171  0008E8  C026  F0A4         	movff	?_clust2sect,pf_write@sect
  4172  0008EC  C027  F0A5         	movff	?_clust2sect+1,pf_write@sect+1
  4173  0008F0  C028  F0A6         	movff	?_clust2sect+2,pf_write@sect+2
  4174  0008F4  C029  F0A7         	movff	?_clust2sect+3,pf_write@sect+3
  4175                           
  4176                           ;pff.c: 965: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  4177  0008F8  0100               	movlb	0	; () banked
  4178  0008FA  51A4               	movf	pf_write@sect& (0+255),w,b
  4179  0008FC  11A5               	iorwf	(pf_write@sect+1)& (0+255),w,b
  4180  0008FE  11A6               	iorwf	(pf_write@sect+2)& (0+255),w,b
  4181  000900  11A7               	iorwf	(pf_write@sect+3)& (0+255),w,b
  4182  000902  A4D8               	btfss	status,2,c
  4183  000904  D00A               	goto	l1059
  4184                           
  4185                           ; BSR set to: 0
  4186  000906  EE20 F001          	lfsr	2,1
  4187  00090A  51B3               	movf	pf_write@fs& (0+255),w,b
  4188  00090C  26D9               	addwf	fsr2l,f,c
  4189  00090E  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4190  000910  22DA               	addwfc	fsr2h,f,c
  4191  000912  0E00               	movlw	0
  4192  000914  6EDF               	movwf	indf2,c
  4193                           
  4194                           ; BSR set to: 0
  4195  000916  0E01               	movlw	1
  4196                           
  4197                           ; BSR set to: 0
  4198  000918  0012               	return	
  4199  00091A                     l1059:
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;pff.c: 966: fs->dsect = sect + cs;
  4203                           
  4204                           ; BSR set to: 0
  4205  00091A  51B0               	movf	pf_write@cs& (0+255),w,b
  4206  00091C  25A4               	addwf	pf_write@sect& (0+255),w,b
  4207  00091E  6F9A               	movwf	??_pf_write& (0+255),b
  4208  000920  0E00               	movlw	0
  4209  000922  21A5               	addwfc	(pf_write@sect+1)& (0+255),w,b
  4210  000924  6F9B               	movwf	(??_pf_write+1)& (0+255),b
  4211  000926  0E00               	movlw	0
  4212  000928  21A6               	addwfc	(pf_write@sect+2)& (0+255),w,b
  4213  00092A  6F9C               	movwf	(??_pf_write+2)& (0+255),b
  4214  00092C  0E00               	movlw	0
  4215  00092E  21A7               	addwfc	(pf_write@sect+3)& (0+255),w,b
  4216  000930  6F9D               	movwf	(??_pf_write+3)& (0+255),b
  4217  000932  EE20 F026          	lfsr	2,38
  4218  000936  51B3               	movf	pf_write@fs& (0+255),w,b
  4219  000938  26D9               	addwf	fsr2l,f,c
  4220  00093A  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4221  00093C  22DA               	addwfc	fsr2h,f,c
  4222  00093E  C09A  FFDE         	movff	??_pf_write,postinc2
  4223  000942  C09B  FFDE         	movff	??_pf_write+1,postinc2
  4224  000946  C09C  FFDE         	movff	??_pf_write+2,postinc2
  4225  00094A  C09D  FFDE         	movff	??_pf_write+3,postinc2
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;pff.c: 967: if (disk_writep(0, fs->dsect)) {fs->flag = 0; return FR_DISK_ERR;};
  4229  00094E  0E00               	movlw	0
  4230  000950  6E23               	movwf	disk_writep@wr,c
  4231  000952  0E00               	movlw	0
  4232  000954  6E24               	movwf	disk_writep@wr+1,c
  4233  000956  0E00               	movlw	0
  4234  000958  6E25               	movwf	disk_writep@wr+2,c
  4235  00095A  EE20 F026          	lfsr	2,38
  4236  00095E  51B3               	movf	pf_write@fs& (0+255),w,b
  4237  000960  26D9               	addwf	fsr2l,f,c
  4238  000962  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4239  000964  22DA               	addwfc	fsr2h,f,c
  4240  000966  CFDE F026          	movff	postinc2,disk_writep@sc
  4241  00096A  CFDE F027          	movff	postinc2,disk_writep@sc+1
  4242  00096E  CFDE F028          	movff	postinc2,disk_writep@sc+2
  4243  000972  CFDE F029          	movff	postinc2,disk_writep@sc+3
  4244  000976  ECF6  F00F         	call	_disk_writep	;wreg free
  4245  00097A  0900               	iorlw	0
  4246  00097C  B4D8               	btfsc	status,2,c
  4247  00097E  D00B               	goto	l1060
  4248  000980  0100               	movlb	0	; () banked
  4249  000982  EE20 F001          	lfsr	2,1
  4250  000986  51B3               	movf	pf_write@fs& (0+255),w,b
  4251  000988  26D9               	addwf	fsr2l,f,c
  4252  00098A  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4253  00098C  22DA               	addwfc	fsr2h,f,c
  4254  00098E  0E00               	movlw	0
  4255  000990  6EDF               	movwf	indf2,c
  4256                           
  4257                           ; BSR set to: 0
  4258  000992  0E01               	movlw	1
  4259                           
  4260                           ; BSR set to: 0
  4261  000994  0012               	return	
  4262  000996                     l1060:
  4263                           
  4264                           ;pff.c: 968: fs->flag |= 0x40;
  4265                           
  4266                           ; BSR set to: 0
  4267  000996  0100               	movlb	0	; () banked
  4268  000998  EE20 F001          	lfsr	2,1
  4269  00099C  51B3               	movf	pf_write@fs& (0+255),w,b
  4270  00099E  26D9               	addwf	fsr2l,f,c
  4271  0009A0  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4272  0009A2  22DA               	addwfc	fsr2h,f,c
  4273  0009A4  0E00               	movlw	0
  4274  0009A6  8CDB               	bsf	plusw2,6,c
  4275  0009A8                     l1054:
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;pff.c: 969: }
  4279                           ;pff.c: 970: wcnt = 512 - (UINT)fs->fptr % 512;
  4280  0009A8  0EFF               	movlw	255
  4281  0009AA  6F9A               	movwf	??_pf_write& (0+255),b
  4282  0009AC  0E01               	movlw	1
  4283  0009AE  6F9B               	movwf	(??_pf_write+1)& (0+255),b
  4284  0009B0  EE20 F016          	lfsr	2,22
  4285  0009B4  51B3               	movf	pf_write@fs& (0+255),w,b
  4286  0009B6  26D9               	addwf	fsr2l,f,c
  4287  0009B8  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4288  0009BA  22DA               	addwfc	fsr2h,f,c
  4289  0009BC  CFDE F09C          	movff	postinc2,??_pf_write+2
  4290  0009C0  CFDD F09D          	movff	postdec2,??_pf_write+3
  4291  0009C4  519A               	movf	??_pf_write& (0+255),w,b
  4292  0009C6  179C               	andwf	(??_pf_write+2)& (0+255),f,b
  4293  0009C8  519B               	movf	(??_pf_write+1)& (0+255),w,b
  4294  0009CA  179D               	andwf	(??_pf_write+3)& (0+255),f,b
  4295  0009CC  1F9C               	comf	(??_pf_write+2)& (0+255),f,b
  4296  0009CE  1F9D               	comf	(??_pf_write+3)& (0+255),f,b
  4297  0009D0  4B9C               	infsnz	(??_pf_write+2)& (0+255),f,b
  4298  0009D2  2B9D               	incf	(??_pf_write+3)& (0+255),f,b
  4299  0009D4  0E00               	movlw	0
  4300  0009D6  259C               	addwf	(??_pf_write+2)& (0+255),w,b
  4301  0009D8  6FB1               	movwf	pf_write@wcnt& (0+255),b
  4302  0009DA  0E02               	movlw	2
  4303  0009DC  219D               	addwfc	(??_pf_write+3)& (0+255),w,b
  4304  0009DE  6FB2               	movwf	(pf_write@wcnt+1)& (0+255),b
  4305                           
  4306                           ; BSR set to: 0
  4307                           ;pff.c: 971: if (wcnt > btw)wcnt = btw;
  4308  0009E0  51B1               	movf	pf_write@wcnt& (0+255),w,b
  4309  0009E2  5D96               	subwf	pf_write@btw& (0+255),w,b
  4310  0009E4  51B2               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4311  0009E6  5997               	subwfb	(pf_write@btw+1)& (0+255),w,b
  4312  0009E8  B0D8               	btfsc	status,0,c
  4313  0009EA  D004               	goto	l1061
  4314                           
  4315                           ; BSR set to: 0
  4316  0009EC  C096  F0B1         	movff	pf_write@btw,pf_write@wcnt
  4317  0009F0  C097  F0B2         	movff	pf_write@btw+1,pf_write@wcnt+1
  4318  0009F4                     l1061:
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;pff.c: 972: if (disk_writep(p, fs->dsect )) {fs->flag = 0; return FR_DISK_ERR;};
  4322                           
  4323                           ; BSR set to: 0
  4324  0009F4  C0A2  F023         	movff	pf_write@p,disk_writep@wr
  4325  0009F8  C0A3  F024         	movff	pf_write@p+1,disk_writep@wr+1
  4326  0009FC  5023               	movf	disk_writep@wr,w,c
  4327  0009FE  1024               	iorwf	disk_writep@wr+1,w,c
  4328  000A00  A4D8               	btfss	status,2,c
  4329  000A02  0E00               	movlw	low (__mediumconst shr (0+16))
  4330  000A04  6E25               	movwf	disk_writep@wr+2,c
  4331  000A06  EE20 F026          	lfsr	2,38
  4332  000A0A  51B3               	movf	pf_write@fs& (0+255),w,b
  4333  000A0C  26D9               	addwf	fsr2l,f,c
  4334  000A0E  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4335  000A10  22DA               	addwfc	fsr2h,f,c
  4336  000A12  CFDE F026          	movff	postinc2,disk_writep@sc
  4337  000A16  CFDE F027          	movff	postinc2,disk_writep@sc+1
  4338  000A1A  CFDE F028          	movff	postinc2,disk_writep@sc+2
  4339  000A1E  CFDE F029          	movff	postinc2,disk_writep@sc+3
  4340  000A22  ECF6  F00F         	call	_disk_writep	;wreg free
  4341  000A26  0900               	iorlw	0
  4342  000A28  B4D8               	btfsc	status,2,c
  4343  000A2A  D00B               	goto	l1062
  4344  000A2C  0100               	movlb	0	; () banked
  4345  000A2E  EE20 F001          	lfsr	2,1
  4346  000A32  51B3               	movf	pf_write@fs& (0+255),w,b
  4347  000A34  26D9               	addwf	fsr2l,f,c
  4348  000A36  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4349  000A38  22DA               	addwfc	fsr2h,f,c
  4350  000A3A  0E00               	movlw	0
  4351  000A3C  6EDF               	movwf	indf2,c
  4352                           
  4353                           ; BSR set to: 0
  4354  000A3E  0E01               	movlw	1
  4355                           
  4356                           ; BSR set to: 0
  4357  000A40  0012               	return	
  4358  000A42                     l1062:
  4359                           
  4360                           ;pff.c: 973: fs->fptr += wcnt; p += wcnt;
  4361                           
  4362                           ; BSR set to: 0
  4363  000A42  0100               	movlb	0	; () banked
  4364  000A44  EE20 F016          	lfsr	2,22
  4365  000A48  51B3               	movf	pf_write@fs& (0+255),w,b
  4366  000A4A  26D9               	addwf	fsr2l,f,c
  4367  000A4C  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4368  000A4E  22DA               	addwfc	fsr2h,f,c
  4369  000A50  51B1               	movf	pf_write@wcnt& (0+255),w,b
  4370  000A52  26DE               	addwf	postinc2,f,c
  4371  000A54  51B2               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4372  000A56  22DE               	addwfc	postinc2,f,c
  4373  000A58  0E00               	movlw	0
  4374  000A5A  22DE               	addwfc	postinc2,f,c
  4375  000A5C  22DE               	addwfc	postinc2,f,c
  4376                           
  4377                           ; BSR set to: 0
  4378  000A5E  51B1               	movf	pf_write@wcnt& (0+255),w,b
  4379  000A60  27A2               	addwf	pf_write@p& (0+255),f,b
  4380  000A62  51B2               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4381  000A64  23A3               	addwfc	(pf_write@p+1)& (0+255),f,b
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;pff.c: 974: btw -= wcnt; *bw += wcnt;
  4385  000A66  51B1               	movf	pf_write@wcnt& (0+255),w,b
  4386  000A68  5F96               	subwf	pf_write@btw& (0+255),f,b
  4387  000A6A  51B2               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4388  000A6C  5B97               	subwfb	(pf_write@btw+1)& (0+255),f,b
  4389                           
  4390                           ; BSR set to: 0
  4391  000A6E  C098  FFD9         	movff	pf_write@bw,fsr2l
  4392  000A72  C099  FFDA         	movff	pf_write@bw+1,fsr2h
  4393  000A76  51B1               	movf	pf_write@wcnt& (0+255),w,b
  4394  000A78  26DE               	addwf	postinc2,f,c
  4395  000A7A  51B2               	movf	(pf_write@wcnt+1)& (0+255),w,b
  4396  000A7C  22DD               	addwfc	postdec2,f,c
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;pff.c: 975: if ((UINT)fs->fptr % 512 == 0) {
  4400  000A7E  0EFF               	movlw	255
  4401  000A80  6F9A               	movwf	??_pf_write& (0+255),b
  4402  000A82  0E01               	movlw	1
  4403  000A84  6F9B               	movwf	(??_pf_write+1)& (0+255),b
  4404  000A86  EE20 F016          	lfsr	2,22
  4405  000A8A  51B3               	movf	pf_write@fs& (0+255),w,b
  4406  000A8C  26D9               	addwf	fsr2l,f,c
  4407  000A8E  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4408  000A90  22DA               	addwfc	fsr2h,f,c
  4409  000A92  CFDE F09C          	movff	postinc2,??_pf_write+2
  4410  000A96  CFDD F09D          	movff	postdec2,??_pf_write+3
  4411  000A9A  519A               	movf	??_pf_write& (0+255),w,b
  4412  000A9C  179C               	andwf	(??_pf_write+2)& (0+255),f,b
  4413  000A9E  519B               	movf	(??_pf_write+1)& (0+255),w,b
  4414  000AA0  179D               	andwf	(??_pf_write+3)& (0+255),f,b
  4415  000AA2  519C               	movf	(??_pf_write+2)& (0+255),w,b
  4416  000AA4  119D               	iorwf	(??_pf_write+3)& (0+255),w,b
  4417  000AA6  A4D8               	btfss	status,2,c
  4418  000AA8  D027               	goto	l1063
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;pff.c: 976: if (disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_ERR;};
  4422  000AAA  0E00               	movlw	0
  4423  000AAC  6E23               	movwf	disk_writep@wr,c
  4424  000AAE  0E00               	movlw	0
  4425  000AB0  6E24               	movwf	disk_writep@wr+1,c
  4426  000AB2  0E00               	movlw	0
  4427  000AB4  6E25               	movwf	disk_writep@wr+2,c
  4428  000AB6  0E00               	movlw	0
  4429  000AB8  6E26               	movwf	disk_writep@sc,c
  4430  000ABA  0E00               	movlw	0
  4431  000ABC  6E27               	movwf	disk_writep@sc+1,c
  4432  000ABE  0E00               	movlw	0
  4433  000AC0  6E28               	movwf	disk_writep@sc+2,c
  4434  000AC2  0E00               	movlw	0
  4435  000AC4  6E29               	movwf	disk_writep@sc+3,c
  4436  000AC6  ECF6  F00F         	call	_disk_writep	;wreg free
  4437  000ACA  0900               	iorlw	0
  4438  000ACC  B4D8               	btfsc	status,2,c
  4439  000ACE  D00B               	goto	l1064
  4440  000AD0  0100               	movlb	0	; () banked
  4441  000AD2  EE20 F001          	lfsr	2,1
  4442  000AD6  51B3               	movf	pf_write@fs& (0+255),w,b
  4443  000AD8  26D9               	addwf	fsr2l,f,c
  4444  000ADA  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4445  000ADC  22DA               	addwfc	fsr2h,f,c
  4446  000ADE  0E00               	movlw	0
  4447  000AE0  6EDF               	movwf	indf2,c
  4448                           
  4449                           ; BSR set to: 0
  4450  000AE2  0E01               	movlw	1
  4451                           
  4452                           ; BSR set to: 0
  4453  000AE4  0012               	return	
  4454  000AE6                     l1064:
  4455                           
  4456                           ;pff.c: 977: fs->flag &= ~0x40;
  4457                           
  4458                           ; BSR set to: 0
  4459  000AE6  0100               	movlb	0	; () banked
  4460  000AE8  EE20 F001          	lfsr	2,1
  4461  000AEC  51B3               	movf	pf_write@fs& (0+255),w,b
  4462  000AEE  26D9               	addwf	fsr2l,f,c
  4463  000AF0  51B4               	movf	(pf_write@fs+1)& (0+255),w,b
  4464  000AF2  22DA               	addwfc	fsr2h,f,c
  4465  000AF4  0EBF               	movlw	191
  4466  000AF6  16DF               	andwf	indf2,f,c
  4467  000AF8                     l1063:
  4468                           
  4469                           ; BSR set to: 0
  4470                           
  4471                           ; BSR set to: 0
  4472                           
  4473                           ; BSR set to: 0
  4474  000AF8  5196               	movf	pf_write@btw& (0+255),w,b
  4475  000AFA  1197               	iorwf	(pf_write@btw+1)& (0+255),w,b
  4476  000AFC  A4D8               	btfss	status,2,c
  4477  000AFE  D655               	goto	l1053
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;pff.c: 978: }
  4481                           ;pff.c: 979: }
  4482                           ;pff.c: 980: posicao_cursor_lcd(2,0);
  4483                           
  4484                           ; BSR set to: 0
  4485  000B00  0E00               	movlw	0
  4486  000B02  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4487  000B04  0E02               	movlw	2
  4488  000B06  EC4C  F017         	call	_posicao_cursor_lcd
  4489                           
  4490                           ;pff.c: 981: escreve_frase_ram_lcd("escrita ok");
  4491  000B0A  0E01               	movlw	low STR_32
  4492  000B0C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4493  000B0E  0E62               	movlw	high STR_32
  4494  000B10  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4495  000B12  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4496                           
  4497                           ;pff.c: 982: return FR_OK;
  4498  000B16  0E00               	movlw	0
  4499  000B18  0012               	return	
  4500  000B1A                     __end_of_pf_write:
  4501                           	opt stack 0
  4502                           tosu	equ	0xFFF
  4503                           tosh	equ	0xFFE
  4504                           tosl	equ	0xFFD
  4505                           pclath	equ	0xFFA
  4506                           tblptru	equ	0xFF8
  4507                           tblptrh	equ	0xFF7
  4508                           tblptrl	equ	0xFF6
  4509                           tablat	equ	0xFF5
  4510                           prodh	equ	0xFF4
  4511                           prodl	equ	0xFF3
  4512                           intcon	equ	0xFF2
  4513                           intcon2	equ	0xFF1
  4514                           intcon3	equ	0xFF0
  4515                           postinc0	equ	0xFEE
  4516                           wreg	equ	0xFE8
  4517                           postinc1	equ	0xFE6
  4518                           postdec1	equ	0xFE5
  4519                           fsr1h	equ	0xFE2
  4520                           fsr1l	equ	0xFE1
  4521                           indf2	equ	0xFDF
  4522                           postinc2	equ	0xFDE
  4523                           postdec2	equ	0xFDD
  4524                           plusw2	equ	0xFDB
  4525                           fsr2h	equ	0xFDA
  4526                           fsr2l	equ	0xFD9
  4527                           status	equ	0xFD8
  4528                           
  4529 ;; *************** function _disk_writep *****************
  4530 ;; Defined at:
  4531 ;;		line 296 in file "bibliotecas/diskio.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  wr              3   34[COMRAM] PTR const unsigned char 
  4534 ;;		 -> ROM(32767), STR_4(6), 
  4535 ;;  sc              4   37[COMRAM] unsigned long 
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;  j               2    6[BANK0 ] int 
  4538 ;;  i               2    4[BANK0 ] int 
  4539 ;;  buff            1    8[BANK0 ] unsigned char 
  4540 ;;  res             1    0        enum E14
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  1    wreg      enum E14
  4543 ;; Registers used:
  4544 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4545 ;; Tracked objects:
  4546 ;;		On entry : 0/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4550 ;;      Params:         7       0       0       0       0       0       0       0       0
  4551 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4552 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4553 ;;      Totals:         7       9       0       0       0       0       0       0       0
  4554 ;;Total ram usage:       16 bytes
  4555 ;; Hardware stack levels used:    1
  4556 ;; Hardware stack levels required when called:    4
  4557 ;; This function calls:
  4558 ;;		_command
  4559 ;;		_dummy_clocks
  4560 ;;		_escreve_dado_SPI
  4561 ;;		_proceed
  4562 ;;		_response
  4563 ;; This function is called by:
  4564 ;;		_pf_write
  4565 ;; This function uses a non-reentrant model
  4566 ;;
  4567                           
  4568                           	psect	text17
  4569  001FEC                     __ptext17:
  4570                           	opt stack 0
  4571  001FEC                     _disk_writep:
  4572                           	opt stack 23
  4573                           
  4574                           ;diskio.c: 301: DRESULT res;
  4575                           ;diskio.c: 303: unsigned char buff;
  4576                           ;diskio.c: 304: int i=0,j;
  4577                           
  4578                           ;incstack = 0
  4579  001FEC  0E00               	movlw	0
  4580  001FEE  0100               	movlb	0	; () banked
  4581  001FF0  6F65               	movwf	(disk_writep@i+1)& (0+255),b
  4582  001FF2  0E00               	movlw	0
  4583  001FF4  6F64               	movwf	disk_writep@i& (0+255),b
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;diskio.c: 308: dummy_clocks(8);
  4587  001FF6  0E08               	movlw	8
  4588  001FF8  ECCA  F018         	call	_dummy_clocks
  4589                           
  4590                           ;diskio.c: 309: command(0X58, sc*512, 0X00);
  4591  001FFC  C026  F060         	movff	disk_writep@sc,??_disk_writep
  4592  002000  C027  F061         	movff	disk_writep@sc+1,??_disk_writep+1
  4593  002004  C028  F062         	movff	disk_writep@sc+2,??_disk_writep+2
  4594  002008  C029  F063         	movff	disk_writep@sc+3,??_disk_writep+3
  4595  00200C  0E09               	movlw	9
  4596  00200E                     u8775:
  4597  00200E  90D8               	bcf	status,0,c
  4598  002010  0100               	movlb	0	; () banked
  4599  002012  3760               	rlcf	??_disk_writep& (0+255),f,b
  4600  002014  3761               	rlcf	(??_disk_writep+1)& (0+255),f,b
  4601  002016  3762               	rlcf	(??_disk_writep+2)& (0+255),f,b
  4602  002018  3763               	rlcf	(??_disk_writep+3)& (0+255),f,b
  4603  00201A  2EE8               	decfsz	wreg,f,c
  4604  00201C  D7F8               	goto	u8775
  4605  00201E  C060  F01C         	movff	??_disk_writep,command@arg
  4606  002022  C061  F01D         	movff	??_disk_writep+1,command@arg+1
  4607  002026  C062  F01E         	movff	??_disk_writep+2,command@arg+2
  4608  00202A  C063  F01F         	movff	??_disk_writep+3,command@arg+3
  4609  00202E  0E00               	movlw	0
  4610  002030  6E20               	movwf	command@CRC,c
  4611  002032  0E58               	movlw	88
  4612  002034  ECE9  F018         	call	_command
  4613                           
  4614                           ;diskio.c: 310: proceed();
  4615  002038  ECFC  F019         	call	_proceed	;wreg free
  4616  00203C                     
  4617                           ;diskio.c: 312: buff = response();
  4618  00203C  ECF6  F019         	call	_response	;wreg free
  4619  002040  0100               	movlb	0	; () banked
  4620  002042  6F68               	movwf	disk_writep@buff& (0+255),b
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;diskio.c: 313: }while(buff!=0XFF);
  4624  002044  2968               	incf	disk_writep@buff& (0+255),w,b
  4625  002046  A4D8               	btfss	status,2,c
  4626  002048  D7F9               	goto	l550
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;diskio.c: 316: _delay((unsigned long)((2000)*(48000000/4000.0)));
  4630                           
  4631                           ; BSR set to: 0
  4632  00204A  0E7A               	movlw	122
  4633  00204C  0100               	movlb	0	; () banked
  4634  00204E  6F61               	movwf	(??_disk_writep+1)& (0+255),b
  4635  002050  0EC1               	movlw	193
  4636  002052  6F60               	movwf	??_disk_writep& (0+255),b
  4637  002054  0E81               	movlw	129
  4638  002056                     u10727:
  4639  002056  2EE8               	decfsz	wreg,f,c
  4640  002058  D7FE               	bra	u10727
  4641  00205A  2F60               	decfsz	??_disk_writep& (0+255),f,b
  4642  00205C  D7FC               	bra	u10727
  4643  00205E  2F61               	decfsz	(??_disk_writep+1)& (0+255),f,b
  4644  002060  D7FA               	bra	u10727
  4645  002062  D000               	nop2	
  4646                           
  4647                           ;diskio.c: 319: dummy_clocks(8);
  4648  002064  0E08               	movlw	8
  4649  002066  ECCA  F018         	call	_dummy_clocks
  4650                           
  4651                           ;diskio.c: 321: escreve_dado_SPI(0XFE);
  4652  00206A  0EFE               	movlw	254
  4653  00206C  EC64  F018         	call	_escreve_dado_SPI
  4654                           
  4655                           ;diskio.c: 323: for(j=0;j<512;j++)
  4656  002070  0E00               	movlw	0
  4657  002072  0100               	movlb	0	; () banked
  4658  002074  6F67               	movwf	(disk_writep@j+1)& (0+255),b
  4659  002076  0E00               	movlw	0
  4660  002078  6F66               	movwf	disk_writep@j& (0+255),b
  4661  00207A                     l8072:
  4662                           
  4663                           ; BSR set to: 0
  4664  00207A  BF67               	btfsc	(disk_writep@j+1)& (0+255),7,b
  4665  00207C  D004               	goto	l552
  4666  00207E  0E02               	movlw	2
  4667  002080  5D67               	subwf	(disk_writep@j+1)& (0+255),w,b
  4668  002082  B0D8               	btfsc	status,0,c
  4669  002084  D023               	goto	u8810
  4670  002086                     l552:
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;diskio.c: 324: {
  4674                           ;diskio.c: 325: if(*wr!='\0')
  4675                           
  4676                           ; BSR set to: 0
  4677  002086  C023  FFF6         	movff	disk_writep@wr,tblptrl
  4678  00208A  C024  FFF7         	movff	disk_writep@wr+1,tblptrh
  4679  00208E  C025  FFF8         	movff	disk_writep@wr+2,tblptru
  4680  002092  0008               	tblrd		*
  4681  002094  50F5               	movf	tablat,w,c
  4682  002096  0900               	iorlw	0
  4683  002098  B4D8               	btfsc	status,2,c
  4684  00209A  D011               	goto	l554
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;diskio.c: 326: {
  4688                           ;diskio.c: 327: escreve_dado_SPI(*wr);
  4689  00209C  C023  FFF6         	movff	disk_writep@wr,tblptrl
  4690  0020A0  C024  FFF7         	movff	disk_writep@wr+1,tblptrh
  4691  0020A4  C025  FFF8         	movff	disk_writep@wr+2,tblptru
  4692  0020A8  0008               	tblrd		*
  4693  0020AA  50F5               	movf	tablat,w,c
  4694  0020AC  EC64  F018         	call	_escreve_dado_SPI
  4695                           
  4696                           ;diskio.c: 328: wr++;
  4697  0020B0  0E01               	movlw	1
  4698  0020B2  2623               	addwf	disk_writep@wr,f,c
  4699  0020B4  0E00               	movlw	0
  4700  0020B6  2224               	addwfc	disk_writep@wr+1,f,c
  4701  0020B8  0E00               	movlw	0
  4702  0020BA  2225               	addwfc	disk_writep@wr+2,f,c
  4703                           
  4704                           ;diskio.c: 329: }
  4705  0020BC  D003               	goto	l555
  4706  0020BE                     l554:
  4707                           
  4708                           ;diskio.c: 330: else
  4709                           ;diskio.c: 331: escreve_dado_SPI(0x00);
  4710  0020BE  0E00               	movlw	0
  4711  0020C0  EC64  F018         	call	_escreve_dado_SPI
  4712  0020C4                     l555:
  4713  0020C4  0100               	movlb	0	; () banked
  4714  0020C6  4B66               	infsnz	disk_writep@j& (0+255),f,b
  4715  0020C8  2B67               	incf	(disk_writep@j+1)& (0+255),f,b
  4716  0020CA  D7D7               	goto	l8072
  4717  0020CC                     u8810:
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;diskio.c: 332: }
  4721                           ;diskio.c: 333: escreve_dado_SPI(0XFF);
  4722                           
  4723                           ; BSR set to: 0
  4724  0020CC  0EFF               	movlw	255
  4725  0020CE  EC64  F018         	call	_escreve_dado_SPI
  4726                           
  4727                           ;diskio.c: 334: escreve_dado_SPI(0XFF);
  4728  0020D2  0EFF               	movlw	255
  4729  0020D4  EC64  F018         	call	_escreve_dado_SPI
  4730                           
  4731                           ;diskio.c: 336: proceed();
  4732  0020D8  ECFC  F019         	call	_proceed	;wreg free
  4733                           
  4734                           ;diskio.c: 338: _delay((unsigned long)((1000)*(48000000/4000.0)));
  4735  0020DC  0E3D               	movlw	61
  4736  0020DE  0100               	movlb	0	; () banked
  4737  0020E0  6F61               	movwf	(??_disk_writep+1)& (0+255),b
  4738  0020E2  0EE1               	movlw	225
  4739  0020E4  6F60               	movwf	??_disk_writep& (0+255),b
  4740  0020E6  0E3F               	movlw	63
  4741  0020E8                     u10737:
  4742  0020E8  2EE8               	decfsz	wreg,f,c
  4743  0020EA  D7FE               	bra	u10737
  4744  0020EC  2F60               	decfsz	??_disk_writep& (0+255),f,b
  4745  0020EE  D7FC               	bra	u10737
  4746  0020F0  2F61               	decfsz	(??_disk_writep+1)& (0+255),f,b
  4747  0020F2  D7FA               	bra	u10737
  4748  0020F4  D000               	nop2	
  4749                           
  4750                           ;diskio.c: 340: dummy_clocks(8);
  4751  0020F6  0E08               	movlw	8
  4752  0020F8  ECCA  F018         	call	_dummy_clocks
  4753                           
  4754                           ;diskio.c: 342: command(0X4D,0X00000000,0X00);
  4755  0020FC  0E00               	movlw	0
  4756  0020FE  6E1C               	movwf	command@arg,c
  4757  002100  0E00               	movlw	0
  4758  002102  6E1D               	movwf	command@arg+1,c
  4759  002104  0E00               	movlw	0
  4760  002106  6E1E               	movwf	command@arg+2,c
  4761  002108  0E00               	movlw	0
  4762  00210A  6E1F               	movwf	command@arg+3,c
  4763  00210C  0E00               	movlw	0
  4764  00210E  6E20               	movwf	command@CRC,c
  4765  002110  0E4D               	movlw	77
  4766  002112  ECE9  F018         	call	_command
  4767                           
  4768                           ;diskio.c: 343: proceed();
  4769  002116  ECFC  F019         	call	_proceed	;wreg free
  4770  00211A                     
  4771                           ;diskio.c: 345: buff = response();
  4772  00211A  ECF6  F019         	call	_response	;wreg free
  4773  00211E  0100               	movlb	0	; () banked
  4774  002120  6F68               	movwf	disk_writep@buff& (0+255),b
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;diskio.c: 346: }while(buff!=0XFF);
  4778  002122  2968               	incf	disk_writep@buff& (0+255),w,b
  4779  002124  A4D8               	btfss	status,2,c
  4780  002126  D7F9               	goto	l556
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;diskio.c: 348: return RES_OK;
  4784                           
  4785                           ; BSR set to: 0
  4786  002128  0E00               	movlw	0
  4787  00212A  0012               	return	
  4788  00212C                     __end_of_disk_writep:
  4789                           	opt stack 0
  4790                           tosu	equ	0xFFF
  4791                           tosh	equ	0xFFE
  4792                           tosl	equ	0xFFD
  4793                           pclath	equ	0xFFA
  4794                           tblptru	equ	0xFF8
  4795                           tblptrh	equ	0xFF7
  4796                           tblptrl	equ	0xFF6
  4797                           tablat	equ	0xFF5
  4798                           prodh	equ	0xFF4
  4799                           prodl	equ	0xFF3
  4800                           intcon	equ	0xFF2
  4801                           intcon2	equ	0xFF1
  4802                           intcon3	equ	0xFF0
  4803                           postinc0	equ	0xFEE
  4804                           wreg	equ	0xFE8
  4805                           postinc1	equ	0xFE6
  4806                           postdec1	equ	0xFE5
  4807                           fsr1h	equ	0xFE2
  4808                           fsr1l	equ	0xFE1
  4809                           indf2	equ	0xFDF
  4810                           postinc2	equ	0xFDE
  4811                           postdec2	equ	0xFDD
  4812                           plusw2	equ	0xFDB
  4813                           fsr2h	equ	0xFDA
  4814                           fsr2l	equ	0xFD9
  4815                           status	equ	0xFD8
  4816                           
  4817 ;; *************** function _pf_read *****************
  4818 ;; Defined at:
  4819 ;;		line 863 in file "bibliotecas/pff.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;  buff            2   52[BANK0 ] PTR void 
  4822 ;;		 -> data_buffer_32(32), 
  4823 ;;  btr             2   54[BANK0 ] unsigned int 
  4824 ;;  br              2   56[BANK0 ] PTR unsigned int 
  4825 ;;		 -> SDCard@br(2), 
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;  clst            4   79[BANK0 ] unsigned long 
  4828 ;;  remain          4   75[BANK0 ] unsigned long 
  4829 ;;  sect            4   71[BANK0 ] unsigned long 
  4830 ;;  fs              2   86[BANK0 ] PTR struct .
  4831 ;;		 -> NULL(0), SDCard@fs(42), 
  4832 ;;  rcnt            2   84[BANK0 ] unsigned int 
  4833 ;;  rbuff           2   67[BANK0 ] PTR unsigned char 
  4834 ;;		 -> data_buffer_32(32), 
  4835 ;;  cs              1   83[BANK0 ] unsigned char 
  4836 ;;  dr              1   66[BANK0 ] enum E73
  4837 ;; Return value:  Size  Location     Type
  4838 ;;                  1    wreg      enum E3884
  4839 ;; Registers used:
  4840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4846 ;;      Params:         0       6       0       0       0       0       0       0       0
  4847 ;;      Locals:         0      22       0       0       0       0       0       0       0
  4848 ;;      Temps:          0       8       0       0       0       0       0       0       0
  4849 ;;      Totals:         0      36       0       0       0       0       0       0       0
  4850 ;;Total ram usage:       36 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    7
  4853 ;; This function calls:
  4854 ;;		_clust2sect
  4855 ;;		_disk_readp
  4856 ;;		_escreve_frase_ram_lcd
  4857 ;;		_get_fat
  4858 ;;		_posicao_cursor_lcd
  4859 ;; This function is called by:
  4860 ;;		_SDCard
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           	psect	text18
  4865  000EFE                     __ptext18:
  4866                           	opt stack 0
  4867  000EFE                     _pf_read:
  4868                           	opt stack 21
  4869                           
  4870                           ;pff.c: 869: DRESULT dr;
  4871                           ;pff.c: 870: DWORD clst;
  4872                           ;pff.c: 871: DWORD sect, remain;
  4873                           ;pff.c: 872: UINT rcnt;
  4874                           ;pff.c: 873: BYTE cs, *rbuff = buff;
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;incstack = 0
  4878  000EFE  C094  F0A3         	movff	pf_read@buff,pf_read@rbuff
  4879  000F02  C095  F0A4         	movff	pf_read@buff+1,pf_read@rbuff+1
  4880                           
  4881                           ;pff.c: 874: FATFS *fs = FatFs;
  4882  000F06  C030  F0B6         	movff	_FatFs,pf_read@fs
  4883  000F0A  C031  F0B7         	movff	_FatFs+1,pf_read@fs+1
  4884                           
  4885                           ;pff.c: 876: posicao_cursor_lcd(1,0);
  4886  000F0E  0E00               	movlw	0
  4887  000F10  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  4888  000F12  0E01               	movlw	1
  4889  000F14  EC4C  F017         	call	_posicao_cursor_lcd
  4890                           
  4891                           ;pff.c: 877: escreve_frase_ram_lcd("Syst FAT");
  4892  000F18  0E2C               	movlw	low STR_30
  4893  000F1A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  4894  000F1C  0E62               	movlw	high STR_30
  4895  000F1E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  4896  000F20  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  4897                           
  4898                           ;pff.c: 878: *br = 0;
  4899  000F24  C098  FFD9         	movff	pf_read@br,fsr2l
  4900  000F28  C099  FFDA         	movff	pf_read@br+1,fsr2h
  4901  000F2C  0E00               	movlw	0
  4902  000F2E  6EDE               	movwf	postinc2,c
  4903  000F30  0E00               	movlw	0
  4904  000F32  6EDD               	movwf	postdec2,c
  4905                           
  4906                           ;pff.c: 879: if (!fs) return FR_NOT_ENABLED;
  4907  000F34  0100               	movlb	0	; () banked
  4908  000F36  51B6               	movf	pf_read@fs& (0+255),w,b
  4909  000F38  11B7               	iorwf	(pf_read@fs+1)& (0+255),w,b
  4910  000F3A  A4D8               	btfss	status,2,c
  4911  000F3C  D002               	goto	l1023
  4912                           
  4913                           ; BSR set to: 0
  4914  000F3E  0E05               	movlw	5
  4915                           
  4916                           ; BSR set to: 0
  4917  000F40  0012               	return	
  4918  000F42                     l1023:
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;pff.c: 880: if (!(fs->flag & 0x01))
  4922                           
  4923                           ; BSR set to: 0
  4924  000F42  EE20 F001          	lfsr	2,1
  4925  000F46  51B6               	movf	pf_read@fs& (0+255),w,b
  4926  000F48  26D9               	addwf	fsr2l,f,c
  4927  000F4A  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  4928  000F4C  22DA               	addwfc	fsr2h,f,c
  4929  000F4E  B0DF               	btfsc	indf2,0,c
  4930  000F50  D002               	goto	l1025
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;pff.c: 881: return FR_NOT_OPENED;
  4934  000F52  0E04               	movlw	4
  4935                           
  4936                           ; BSR set to: 0
  4937  000F54  0012               	return	
  4938  000F56                     l1025:
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;pff.c: 884: remain = fs->fsize - fs->fptr;
  4942                           
  4943                           ; BSR set to: 0
  4944  000F56  EE20 F01A          	lfsr	2,26
  4945  000F5A  51B6               	movf	pf_read@fs& (0+255),w,b
  4946  000F5C  26D9               	addwf	fsr2l,f,c
  4947  000F5E  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  4948  000F60  22DA               	addwfc	fsr2h,f,c
  4949  000F62  CFDE F09A          	movff	postinc2,??_pf_read
  4950  000F66  CFDE F09B          	movff	postinc2,??_pf_read+1
  4951  000F6A  CFDE F09C          	movff	postinc2,??_pf_read+2
  4952  000F6E  CFDE F09D          	movff	postinc2,??_pf_read+3
  4953  000F72  EE20 F016          	lfsr	2,22
  4954  000F76  51B6               	movf	pf_read@fs& (0+255),w,b
  4955  000F78  26D9               	addwf	fsr2l,f,c
  4956  000F7A  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  4957  000F7C  22DA               	addwfc	fsr2h,f,c
  4958  000F7E  CFDE F09E          	movff	postinc2,??_pf_read+4
  4959  000F82  CFDE F09F          	movff	postinc2,??_pf_read+5
  4960  000F86  CFDE F0A0          	movff	postinc2,??_pf_read+6
  4961  000F8A  CFDE F0A1          	movff	postinc2,??_pf_read+7
  4962  000F8E  1F9E               	comf	(??_pf_read+4)& (0+255),f,b
  4963  000F90  1F9F               	comf	(??_pf_read+5)& (0+255),f,b
  4964  000F92  1FA0               	comf	(??_pf_read+6)& (0+255),f,b
  4965  000F94  1FA1               	comf	(??_pf_read+7)& (0+255),f,b
  4966  000F96  2B9E               	incf	(??_pf_read+4)& (0+255),f,b
  4967  000F98  0E00               	movlw	0
  4968  000F9A  239F               	addwfc	(??_pf_read+5)& (0+255),f,b
  4969  000F9C  23A0               	addwfc	(??_pf_read+6)& (0+255),f,b
  4970  000F9E  23A1               	addwfc	(??_pf_read+7)& (0+255),f,b
  4971  000FA0  519A               	movf	??_pf_read& (0+255),w,b
  4972  000FA2  259E               	addwf	(??_pf_read+4)& (0+255),w,b
  4973  000FA4  6FAB               	movwf	pf_read@remain& (0+255),b
  4974  000FA6  519B               	movf	(??_pf_read+1)& (0+255),w,b
  4975  000FA8  219F               	addwfc	(??_pf_read+5)& (0+255),w,b
  4976  000FAA  6FAC               	movwf	(pf_read@remain+1)& (0+255),b
  4977  000FAC  519C               	movf	(??_pf_read+2)& (0+255),w,b
  4978  000FAE  21A0               	addwfc	(??_pf_read+6)& (0+255),w,b
  4979  000FB0  6FAD               	movwf	(pf_read@remain+2)& (0+255),b
  4980  000FB2  519D               	movf	(??_pf_read+3)& (0+255),w,b
  4981  000FB4  21A1               	addwfc	(??_pf_read+7)& (0+255),w,b
  4982  000FB6  6FAE               	movwf	(pf_read@remain+3)& (0+255),b
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;pff.c: 885: if (btr > remain) btr = (UINT)remain;
  4986  000FB8  5196               	movf	pf_read@btr& (0+255),w,b
  4987  000FBA  6F9A               	movwf	??_pf_read& (0+255),b
  4988  000FBC  5197               	movf	(pf_read@btr+1)& (0+255),w,b
  4989  000FBE  6F9B               	movwf	(??_pf_read+1)& (0+255),b
  4990  000FC0  6B9C               	clrf	(??_pf_read+2)& (0+255),b
  4991  000FC2  6B9D               	clrf	(??_pf_read+3)& (0+255),b
  4992  000FC4  519A               	movf	??_pf_read& (0+255),w,b
  4993  000FC6  5DAB               	subwf	pf_read@remain& (0+255),w,b
  4994  000FC8  519B               	movf	(??_pf_read+1)& (0+255),w,b
  4995  000FCA  59AC               	subwfb	(pf_read@remain+1)& (0+255),w,b
  4996  000FCC  519C               	movf	(??_pf_read+2)& (0+255),w,b
  4997  000FCE  59AD               	subwfb	(pf_read@remain+2)& (0+255),w,b
  4998  000FD0  519D               	movf	(??_pf_read+3)& (0+255),w,b
  4999  000FD2  59AE               	subwfb	(pf_read@remain+3)& (0+255),w,b
  5000  000FD4  B0D8               	btfsc	status,0,c
  5001  000FD6  D160               	goto	l1027
  5002                           
  5003                           ; BSR set to: 0
  5004  000FD8  C0AB  F096         	movff	pf_read@remain,pf_read@btr
  5005  000FDC  C0AC  F097         	movff	pf_read@remain+1,pf_read@btr+1
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;pff.c: 887: while (btr) {
  5009  000FE0  D15B               	goto	l1027
  5010  000FE2                     
  5011                           ; BSR set to: 0
  5012                           ;pff.c: 888: if ((fs->fptr % 512) == 0) {
  5013                           
  5014                           ; BSR set to: 0
  5015  000FE2  EE20 F016          	lfsr	2,22
  5016  000FE6  51B6               	movf	pf_read@fs& (0+255),w,b
  5017  000FE8  26D9               	addwf	fsr2l,f,c
  5018  000FEA  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5019  000FEC  22DA               	addwfc	fsr2h,f,c
  5020  000FEE  0EFF               	movlw	255
  5021  000FF0  14DE               	andwf	postinc2,w,c
  5022  000FF2  6F9A               	movwf	??_pf_read& (0+255),b
  5023  000FF4  0E01               	movlw	1
  5024  000FF6  14DE               	andwf	postinc2,w,c
  5025  000FF8  6F9B               	movwf	(??_pf_read+1)& (0+255),b
  5026  000FFA  0E00               	movlw	0
  5027  000FFC  14DE               	andwf	postinc2,w,c
  5028  000FFE  6F9C               	movwf	(??_pf_read+2)& (0+255),b
  5029  001000  0E00               	movlw	0
  5030  001002  14DE               	andwf	postinc2,w,c
  5031  001004  6F9D               	movwf	(??_pf_read+3)& (0+255),b
  5032  001006  519A               	movf	??_pf_read& (0+255),w,b
  5033  001008  119B               	iorwf	(??_pf_read+1)& (0+255),w,b
  5034  00100A  119C               	iorwf	(??_pf_read+2)& (0+255),w,b
  5035  00100C  119D               	iorwf	(??_pf_read+3)& (0+255),w,b
  5036  00100E  A4D8               	btfss	status,2,c
  5037  001010  D0BC               	goto	l1029
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;pff.c: 889: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  5041  001012  EE20 F016          	lfsr	2,22
  5042  001016  51B6               	movf	pf_read@fs& (0+255),w,b
  5043  001018  26D9               	addwf	fsr2l,f,c
  5044  00101A  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5045  00101C  22DA               	addwfc	fsr2h,f,c
  5046  00101E  CFDE F09A          	movff	postinc2,??_pf_read
  5047  001022  CFDE F09B          	movff	postinc2,??_pf_read+1
  5048  001026  CFDE F09C          	movff	postinc2,??_pf_read+2
  5049  00102A  CFDE F09D          	movff	postinc2,??_pf_read+3
  5050  00102E  0E0A               	movlw	10
  5051  001030  D005               	goto	u9420
  5052  001032                     u9425:
  5053  001032  90D8               	bcf	status,0,c
  5054  001034  339D               	rrcf	(??_pf_read+3)& (0+255),f,b
  5055  001036  339C               	rrcf	(??_pf_read+2)& (0+255),f,b
  5056  001038  339B               	rrcf	(??_pf_read+1)& (0+255),f,b
  5057  00103A  339A               	rrcf	??_pf_read& (0+255),f,b
  5058  00103C                     u9420:
  5059  00103C  2EE8               	decfsz	wreg,f,c
  5060  00103E  D7F9               	goto	u9425
  5061  001040  EE20 F002          	lfsr	2,2
  5062  001044  51B6               	movf	pf_read@fs& (0+255),w,b
  5063  001046  26D9               	addwf	fsr2l,f,c
  5064  001048  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5065  00104A  22DA               	addwfc	fsr2h,f,c
  5066  00104C  50DF               	movf	indf2,w,c
  5067  00104E  6F9E               	movwf	(??_pf_read+4)& (0+255),b
  5068  001050  059E               	decf	(??_pf_read+4)& (0+255),w,b
  5069  001052  159A               	andwf	??_pf_read& (0+255),w,b
  5070  001054  6FB3               	movwf	pf_read@cs& (0+255),b
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;pff.c: 890: if (!cs) {
  5074  001056  51B3               	movf	pf_read@cs& (0+255),w,b
  5075  001058  A4D8               	btfss	status,2,c
  5076  00105A  D054               	goto	l1030
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;pff.c: 891: if (fs->fptr == 0)
  5080  00105C  EE20 F016          	lfsr	2,22
  5081  001060  51B6               	movf	pf_read@fs& (0+255),w,b
  5082  001062  26D9               	addwf	fsr2l,f,c
  5083  001064  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5084  001066  22DA               	addwfc	fsr2h,f,c
  5085  001068  50DE               	movf	postinc2,w,c
  5086  00106A  10DE               	iorwf	postinc2,w,c
  5087  00106C  10DE               	iorwf	postinc2,w,c
  5088  00106E  10DE               	iorwf	postinc2,w,c
  5089  001070  A4D8               	btfss	status,2,c
  5090  001072  D00F               	goto	l1031
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;pff.c: 892: clst = fs->org_clust;
  5094  001074  EE20 F01E          	lfsr	2,30
  5095  001078  51B6               	movf	pf_read@fs& (0+255),w,b
  5096  00107A  26D9               	addwf	fsr2l,f,c
  5097  00107C  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5098  00107E  22DA               	addwfc	fsr2h,f,c
  5099  001080  CFDE F0AF          	movff	postinc2,pf_read@clst
  5100  001084  CFDE F0B0          	movff	postinc2,pf_read@clst+1
  5101  001088  CFDE F0B1          	movff	postinc2,pf_read@clst+2
  5102  00108C  CFDE F0B2          	movff	postinc2,pf_read@clst+3
  5103  001090  D018               	goto	l1032
  5104  001092                     l1031:
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;pff.c: 893: else
  5108                           ;pff.c: 894: clst = get_fat(fs->curr_clust);
  5109                           
  5110                           ; BSR set to: 0
  5111  001092  EE20 F022          	lfsr	2,34
  5112  001096  51B6               	movf	pf_read@fs& (0+255),w,b
  5113  001098  26D9               	addwf	fsr2l,f,c
  5114  00109A  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5115  00109C  22DA               	addwfc	fsr2h,f,c
  5116  00109E  CFDE F06C          	movff	postinc2,get_fat@clst
  5117  0010A2  CFDE F06D          	movff	postinc2,get_fat@clst+1
  5118  0010A6  CFDE F06E          	movff	postinc2,get_fat@clst+2
  5119  0010AA  CFDE F06F          	movff	postinc2,get_fat@clst+3
  5120  0010AE  EC8D  F005         	call	_get_fat	;wreg free
  5121  0010B2  C06C  F0AF         	movff	?_get_fat,pf_read@clst
  5122  0010B6  C06D  F0B0         	movff	?_get_fat+1,pf_read@clst+1
  5123  0010BA  C06E  F0B1         	movff	?_get_fat+2,pf_read@clst+2
  5124  0010BE  C06F  F0B2         	movff	?_get_fat+3,pf_read@clst+3
  5125  0010C2                     l1032:
  5126                           
  5127                           ;pff.c: 895: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  5128  0010C2  0100               	movlb	0	; () banked
  5129  0010C4  51B2               	movf	(pf_read@clst+3)& (0+255),w,b
  5130  0010C6  11B1               	iorwf	(pf_read@clst+2)& (0+255),w,b
  5131  0010C8  11B0               	iorwf	(pf_read@clst+1)& (0+255),w,b
  5132  0010CA  E10E               	bnz	l8512
  5133  0010CC  0E02               	movlw	2
  5134  0010CE  5DAF               	subwf	pf_read@clst& (0+255),w,b
  5135  0010D0  B0D8               	btfsc	status,0,c
  5136  0010D2  D00A               	goto	l1033
  5137                           
  5138                           ; BSR set to: 0
  5139  0010D4  EE20 F001          	lfsr	2,1
  5140  0010D8  51B6               	movf	pf_read@fs& (0+255),w,b
  5141  0010DA  26D9               	addwf	fsr2l,f,c
  5142  0010DC  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5143  0010DE  22DA               	addwfc	fsr2h,f,c
  5144  0010E0  0E00               	movlw	0
  5145  0010E2  6EDF               	movwf	indf2,c
  5146                           
  5147                           ; BSR set to: 0
  5148  0010E4  0E01               	movlw	1
  5149                           
  5150                           ; BSR set to: 0
  5151  0010E6  0012               	return	
  5152  0010E8                     l1033:
  5153  0010E8                     l8512:
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;pff.c: 896: fs->curr_clust = clst;
  5157  0010E8  EE20 F022          	lfsr	2,34
  5158  0010EC  51B6               	movf	pf_read@fs& (0+255),w,b
  5159  0010EE  26D9               	addwf	fsr2l,f,c
  5160  0010F0  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5161  0010F2  22DA               	addwfc	fsr2h,f,c
  5162  0010F4  C0AF  FFDE         	movff	pf_read@clst,postinc2
  5163  0010F8  C0B0  FFDE         	movff	pf_read@clst+1,postinc2
  5164  0010FC  C0B1  FFDE         	movff	pf_read@clst+2,postinc2
  5165  001100  C0B2  FFDE         	movff	pf_read@clst+3,postinc2
  5166  001104                     l1030:
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;pff.c: 897: }
  5170                           ;pff.c: 898: sect = clust2sect(fs->curr_clust);
  5171                           
  5172                           ; BSR set to: 0
  5173  001104  EE20 F022          	lfsr	2,34
  5174  001108  51B6               	movf	pf_read@fs& (0+255),w,b
  5175  00110A  26D9               	addwf	fsr2l,f,c
  5176  00110C  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5177  00110E  22DA               	addwfc	fsr2h,f,c
  5178  001110  CFDE F026          	movff	postinc2,clust2sect@clst
  5179  001114  CFDE F027          	movff	postinc2,clust2sect@clst+1
  5180  001118  CFDE F028          	movff	postinc2,clust2sect@clst+2
  5181  00111C  CFDE F029          	movff	postinc2,clust2sect@clst+3
  5182  001120  EC4B  F014         	call	_clust2sect	;wreg free
  5183  001124  C026  F0A7         	movff	?_clust2sect,pf_read@sect
  5184  001128  C027  F0A8         	movff	?_clust2sect+1,pf_read@sect+1
  5185  00112C  C028  F0A9         	movff	?_clust2sect+2,pf_read@sect+2
  5186  001130  C029  F0AA         	movff	?_clust2sect+3,pf_read@sect+3
  5187                           
  5188                           ;pff.c: 899: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  5189  001134  0100               	movlb	0	; () banked
  5190  001136  51A7               	movf	pf_read@sect& (0+255),w,b
  5191  001138  11A8               	iorwf	(pf_read@sect+1)& (0+255),w,b
  5192  00113A  11A9               	iorwf	(pf_read@sect+2)& (0+255),w,b
  5193  00113C  11AA               	iorwf	(pf_read@sect+3)& (0+255),w,b
  5194  00113E  A4D8               	btfss	status,2,c
  5195  001140  D00A               	goto	l1034
  5196                           
  5197                           ; BSR set to: 0
  5198  001142  EE20 F001          	lfsr	2,1
  5199  001146  51B6               	movf	pf_read@fs& (0+255),w,b
  5200  001148  26D9               	addwf	fsr2l,f,c
  5201  00114A  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5202  00114C  22DA               	addwfc	fsr2h,f,c
  5203  00114E  0E00               	movlw	0
  5204  001150  6EDF               	movwf	indf2,c
  5205                           
  5206                           ; BSR set to: 0
  5207  001152  0E01               	movlw	1
  5208                           
  5209                           ; BSR set to: 0
  5210  001154  0012               	return	
  5211  001156                     l1034:
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;pff.c: 900: fs->dsect = sect + cs;
  5215                           
  5216                           ; BSR set to: 0
  5217  001156  51B3               	movf	pf_read@cs& (0+255),w,b
  5218  001158  25A7               	addwf	pf_read@sect& (0+255),w,b
  5219  00115A  6F9A               	movwf	??_pf_read& (0+255),b
  5220  00115C  0E00               	movlw	0
  5221  00115E  21A8               	addwfc	(pf_read@sect+1)& (0+255),w,b
  5222  001160  6F9B               	movwf	(??_pf_read+1)& (0+255),b
  5223  001162  0E00               	movlw	0
  5224  001164  21A9               	addwfc	(pf_read@sect+2)& (0+255),w,b
  5225  001166  6F9C               	movwf	(??_pf_read+2)& (0+255),b
  5226  001168  0E00               	movlw	0
  5227  00116A  21AA               	addwfc	(pf_read@sect+3)& (0+255),w,b
  5228  00116C  6F9D               	movwf	(??_pf_read+3)& (0+255),b
  5229  00116E  EE20 F026          	lfsr	2,38
  5230  001172  51B6               	movf	pf_read@fs& (0+255),w,b
  5231  001174  26D9               	addwf	fsr2l,f,c
  5232  001176  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5233  001178  22DA               	addwfc	fsr2h,f,c
  5234  00117A  C09A  FFDE         	movff	??_pf_read,postinc2
  5235  00117E  C09B  FFDE         	movff	??_pf_read+1,postinc2
  5236  001182  C09C  FFDE         	movff	??_pf_read+2,postinc2
  5237  001186  C09D  FFDE         	movff	??_pf_read+3,postinc2
  5238  00118A                     l1029:
  5239                           
  5240                           ; BSR set to: 0
  5241                           ;pff.c: 901: }
  5242                           ;pff.c: 902: rcnt = 512 - (UINT)fs->fptr % 512;
  5243  00118A  0EFF               	movlw	255
  5244  00118C  6F9A               	movwf	??_pf_read& (0+255),b
  5245  00118E  0E01               	movlw	1
  5246  001190  6F9B               	movwf	(??_pf_read+1)& (0+255),b
  5247  001192  EE20 F016          	lfsr	2,22
  5248  001196  51B6               	movf	pf_read@fs& (0+255),w,b
  5249  001198  26D9               	addwf	fsr2l,f,c
  5250  00119A  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5251  00119C  22DA               	addwfc	fsr2h,f,c
  5252  00119E  CFDE F09C          	movff	postinc2,??_pf_read+2
  5253  0011A2  CFDD F09D          	movff	postdec2,??_pf_read+3
  5254  0011A6  519A               	movf	??_pf_read& (0+255),w,b
  5255  0011A8  179C               	andwf	(??_pf_read+2)& (0+255),f,b
  5256  0011AA  519B               	movf	(??_pf_read+1)& (0+255),w,b
  5257  0011AC  179D               	andwf	(??_pf_read+3)& (0+255),f,b
  5258  0011AE  1F9C               	comf	(??_pf_read+2)& (0+255),f,b
  5259  0011B0  1F9D               	comf	(??_pf_read+3)& (0+255),f,b
  5260  0011B2  4B9C               	infsnz	(??_pf_read+2)& (0+255),f,b
  5261  0011B4  2B9D               	incf	(??_pf_read+3)& (0+255),f,b
  5262  0011B6  0E00               	movlw	0
  5263  0011B8  259C               	addwf	(??_pf_read+2)& (0+255),w,b
  5264  0011BA  6FB4               	movwf	pf_read@rcnt& (0+255),b
  5265  0011BC  0E02               	movlw	2
  5266  0011BE  219D               	addwfc	(??_pf_read+3)& (0+255),w,b
  5267  0011C0  6FB5               	movwf	(pf_read@rcnt+1)& (0+255),b
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;pff.c: 903: if (rcnt > btr) rcnt = btr;
  5271  0011C2  51B4               	movf	pf_read@rcnt& (0+255),w,b
  5272  0011C4  5D96               	subwf	pf_read@btr& (0+255),w,b
  5273  0011C6  51B5               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5274  0011C8  5997               	subwfb	(pf_read@btr+1)& (0+255),w,b
  5275  0011CA  B0D8               	btfsc	status,0,c
  5276  0011CC  D004               	goto	l1035
  5277                           
  5278                           ; BSR set to: 0
  5279  0011CE  C096  F0B4         	movff	pf_read@btr,pf_read@rcnt
  5280  0011D2  C097  F0B5         	movff	pf_read@btr+1,pf_read@rcnt+1
  5281  0011D6                     l1035:
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;pff.c: 904: dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
  5285                           
  5286                           ; BSR set to: 0
  5287  0011D6  5194               	movf	pf_read@buff& (0+255),w,b
  5288  0011D8  1195               	iorwf	(pf_read@buff+1)& (0+255),w,b
  5289  0011DA  B4D8               	btfsc	status,2,c
  5290  0011DC  D005               	goto	l1037
  5291                           
  5292                           ; BSR set to: 0
  5293  0011DE  C0A3  F0A5         	movff	pf_read@rbuff,_pf_read$2169
  5294  0011E2  C0A4  F0A6         	movff	pf_read@rbuff+1,_pf_read$2169+1
  5295  0011E6  D004               	goto	l1039
  5296  0011E8                     l1037:
  5297                           
  5298                           ; BSR set to: 0
  5299                           
  5300                           ; BSR set to: 0
  5301  0011E8  0E00               	movlw	0
  5302  0011EA  6FA5               	movwf	_pf_read$2169& (0+255),b
  5303  0011EC  0E00               	movlw	0
  5304  0011EE  6FA6               	movwf	(_pf_read$2169+1)& (0+255),b
  5305  0011F0                     l1039:
  5306                           
  5307                           ; BSR set to: 0
  5308                           
  5309                           ; BSR set to: 0
  5310  0011F0  C0A5  F023         	movff	_pf_read$2169,disk_readp@rd
  5311  0011F4  C0A6  F024         	movff	_pf_read$2169+1,disk_readp@rd+1
  5312  0011F8  EE20 F026          	lfsr	2,38
  5313  0011FC  51B6               	movf	pf_read@fs& (0+255),w,b
  5314  0011FE  26D9               	addwf	fsr2l,f,c
  5315  001200  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5316  001202  22DA               	addwfc	fsr2h,f,c
  5317  001204  CFDE F025          	movff	postinc2,disk_readp@sector
  5318  001208  CFDE F026          	movff	postinc2,disk_readp@sector+1
  5319  00120C  CFDE F027          	movff	postinc2,disk_readp@sector+2
  5320  001210  CFDE F028          	movff	postinc2,disk_readp@sector+3
  5321  001214  EE20 F016          	lfsr	2,22
  5322  001218  51B6               	movf	pf_read@fs& (0+255),w,b
  5323  00121A  26D9               	addwf	fsr2l,f,c
  5324  00121C  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5325  00121E  22DA               	addwfc	fsr2h,f,c
  5326  001220  CFDE F09A          	movff	postinc2,??_pf_read
  5327  001224  CFDD F09B          	movff	postdec2,??_pf_read+1
  5328  001228  0EFF               	movlw	255
  5329  00122A  159A               	andwf	??_pf_read& (0+255),w,b
  5330  00122C  6E29               	movwf	disk_readp@offset,c
  5331  00122E  0E01               	movlw	1
  5332  001230  159B               	andwf	(??_pf_read+1)& (0+255),w,b
  5333  001232  6E2A               	movwf	disk_readp@offset+1,c
  5334  001234  C0B4  F02B         	movff	pf_read@rcnt,disk_readp@count
  5335  001238  C0B5  F02C         	movff	pf_read@rcnt+1,disk_readp@count+1
  5336  00123C  EC5D  F009         	call	_disk_readp	;wreg free
  5337  001240  0100               	movlb	0	; () banked
  5338  001242  6FA2               	movwf	pf_read@dr& (0+255),b
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;pff.c: 905: if (dr) {fs->flag = 0; return FR_DISK_ERR;};
  5342  001244  51A2               	movf	pf_read@dr& (0+255),w,b
  5343  001246  B4D8               	btfsc	status,2,c
  5344  001248  D00A               	goto	l1040
  5345                           
  5346                           ; BSR set to: 0
  5347  00124A  EE20 F001          	lfsr	2,1
  5348  00124E  51B6               	movf	pf_read@fs& (0+255),w,b
  5349  001250  26D9               	addwf	fsr2l,f,c
  5350  001252  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5351  001254  22DA               	addwfc	fsr2h,f,c
  5352  001256  0E00               	movlw	0
  5353  001258  6EDF               	movwf	indf2,c
  5354                           
  5355                           ; BSR set to: 0
  5356  00125A  0E01               	movlw	1
  5357                           
  5358                           ; BSR set to: 0
  5359  00125C  0012               	return	
  5360  00125E                     l1040:
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;pff.c: 906: fs->fptr += rcnt; rbuff += rcnt;
  5364                           
  5365                           ; BSR set to: 0
  5366  00125E  EE20 F016          	lfsr	2,22
  5367  001262  51B6               	movf	pf_read@fs& (0+255),w,b
  5368  001264  26D9               	addwf	fsr2l,f,c
  5369  001266  51B7               	movf	(pf_read@fs+1)& (0+255),w,b
  5370  001268  22DA               	addwfc	fsr2h,f,c
  5371  00126A  51B4               	movf	pf_read@rcnt& (0+255),w,b
  5372  00126C  26DE               	addwf	postinc2,f,c
  5373  00126E  51B5               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5374  001270  22DE               	addwfc	postinc2,f,c
  5375  001272  0E00               	movlw	0
  5376  001274  22DE               	addwfc	postinc2,f,c
  5377  001276  22DE               	addwfc	postinc2,f,c
  5378                           
  5379                           ; BSR set to: 0
  5380  001278  51B4               	movf	pf_read@rcnt& (0+255),w,b
  5381  00127A  27A3               	addwf	pf_read@rbuff& (0+255),f,b
  5382  00127C  51B5               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5383  00127E  23A4               	addwfc	(pf_read@rbuff+1)& (0+255),f,b
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;pff.c: 907: btr -= rcnt;
  5387  001280  51B4               	movf	pf_read@rcnt& (0+255),w,b
  5388  001282  5F96               	subwf	pf_read@btr& (0+255),f,b
  5389  001284  51B5               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5390  001286  5B97               	subwfb	(pf_read@btr+1)& (0+255),f,b
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;pff.c: 908: *br += rcnt;
  5394  001288  C098  FFD9         	movff	pf_read@br,fsr2l
  5395  00128C  C099  FFDA         	movff	pf_read@br+1,fsr2h
  5396  001290  51B4               	movf	pf_read@rcnt& (0+255),w,b
  5397  001292  26DE               	addwf	postinc2,f,c
  5398  001294  51B5               	movf	(pf_read@rcnt+1)& (0+255),w,b
  5399  001296  22DD               	addwfc	postdec2,f,c
  5400  001298                     l1027:
  5401                           
  5402                           ; BSR set to: 0
  5403                           
  5404                           ; BSR set to: 0
  5405  001298  5196               	movf	pf_read@btr& (0+255),w,b
  5406  00129A  1197               	iorwf	(pf_read@btr+1)& (0+255),w,b
  5407  00129C  A4D8               	btfss	status,2,c
  5408  00129E  D6A1               	goto	l1028
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;pff.c: 909: }
  5412                           ;pff.c: 910: posicao_cursor_lcd(1,0);
  5413                           
  5414                           ; BSR set to: 0
  5415  0012A0  0E00               	movlw	0
  5416  0012A2  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  5417  0012A4  0E01               	movlw	1
  5418  0012A6  EC4C  F017         	call	_posicao_cursor_lcd
  5419                           
  5420                           ;pff.c: 911: escreve_frase_ram_lcd("Syst OK");
  5421  0012AA  0E47               	movlw	low STR_31
  5422  0012AC  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  5423  0012AE  0E62               	movlw	high STR_31
  5424  0012B0  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  5425  0012B2  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  5426                           
  5427                           ;pff.c: 912: return FR_OK;
  5428  0012B6  0E00               	movlw	0
  5429  0012B8  0012               	return	
  5430  0012BA                     __end_of_pf_read:
  5431                           	opt stack 0
  5432                           tosu	equ	0xFFF
  5433                           tosh	equ	0xFFE
  5434                           tosl	equ	0xFFD
  5435                           pclath	equ	0xFFA
  5436                           tblptru	equ	0xFF8
  5437                           tblptrh	equ	0xFF7
  5438                           tblptrl	equ	0xFF6
  5439                           tablat	equ	0xFF5
  5440                           prodh	equ	0xFF4
  5441                           prodl	equ	0xFF3
  5442                           intcon	equ	0xFF2
  5443                           intcon2	equ	0xFF1
  5444                           intcon3	equ	0xFF0
  5445                           postinc0	equ	0xFEE
  5446                           wreg	equ	0xFE8
  5447                           postinc1	equ	0xFE6
  5448                           postdec1	equ	0xFE5
  5449                           fsr1h	equ	0xFE2
  5450                           fsr1l	equ	0xFE1
  5451                           indf2	equ	0xFDF
  5452                           postinc2	equ	0xFDE
  5453                           postdec2	equ	0xFDD
  5454                           plusw2	equ	0xFDB
  5455                           fsr2h	equ	0xFDA
  5456                           fsr2l	equ	0xFD9
  5457                           status	equ	0xFD8
  5458                           
  5459 ;; *************** function _pf_open *****************
  5460 ;; Defined at:
  5461 ;;		line 829 in file "bibliotecas/pff.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;  path            2   85[BANK0 ] PTR const unsigned char 
  5464 ;;		 -> fileName(15), 
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;  dir            32   12[BANK2 ] unsigned char [32]
  5467 ;;  dj             16   47[BANK2 ] struct .
  5468 ;;  sp             12    0[BANK2 ] unsigned char [12]
  5469 ;;  fs              2   45[BANK2 ] PTR struct .
  5470 ;;		 -> NULL(0), SDCard@fs(42), 
  5471 ;;  res             1   44[BANK2 ] enum E43
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  1    wreg      enum E3884
  5474 ;; Registers used:
  5475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5481 ;;      Params:         0       2       0       0       0       0       0       0       0
  5482 ;;      Locals:         0       0       0      63       0       0       0       0       0
  5483 ;;      Temps:          0      22       0       0       0       0       0       0       0
  5484 ;;      Totals:         0      24       0      63       0       0       0       0       0
  5485 ;;Total ram usage:       87 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:   10
  5488 ;; This function calls:
  5489 ;;		_follow_path
  5490 ;;		_get_clust
  5491 ;; This function is called by:
  5492 ;;		_SDCard
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text19
  5497  001E9C                     __ptext19:
  5498                           	opt stack 0
  5499  001E9C                     _pf_open:
  5500                           	opt stack 18
  5501                           
  5502                           ;pff.c: 833: FRESULT res;
  5503                           ;pff.c: 834: DIR_E dj;
  5504                           ;pff.c: 835: BYTE sp[12], dir[32];
  5505                           ;pff.c: 836: FATFS *fs = FatFs;
  5506                           
  5507                           ;incstack = 0
  5508  001E9C  C030  F2C3         	movff	_FatFs,pf_open@fs
  5509  001EA0  C031  F2C4         	movff	_FatFs+1,pf_open@fs+1
  5510                           
  5511                           ;pff.c: 838: if (!fs) return FR_NOT_ENABLED;
  5512  001EA4  0102               	movlb	2	; () banked
  5513  001EA6  51C3               	movf	pf_open@fs& (0+255),w,b
  5514  001EA8  11C4               	iorwf	(pf_open@fs+1)& (0+255),w,b
  5515  001EAA  A4D8               	btfss	status,2,c
  5516  001EAC  D002               	goto	l1015
  5517                           
  5518                           ; BSR set to: 2
  5519  001EAE  0E05               	movlw	5
  5520                           
  5521                           ; BSR set to: 2
  5522  001EB0  0012               	return	
  5523  001EB2                     l1015:
  5524                           
  5525                           ; BSR set to: 2
  5526                           ;pff.c: 840: fs->flag = 0;
  5527                           
  5528                           ; BSR set to: 2
  5529  001EB2  EE20 F001          	lfsr	2,1
  5530  001EB6  51C3               	movf	pf_open@fs& (0+255),w,b
  5531  001EB8  26D9               	addwf	fsr2l,f,c
  5532  001EBA  51C4               	movf	(pf_open@fs+1)& (0+255),w,b
  5533  001EBC  22DA               	addwfc	fsr2h,f,c
  5534  001EBE  0E00               	movlw	0
  5535  001EC0  6EDF               	movwf	indf2,c
  5536                           
  5537                           ; BSR set to: 2
  5538                           ;pff.c: 841: dj.fn = sp;
  5539  001EC2  0E96               	movlw	low pf_open@sp
  5540  001EC4  6FC7               	movwf	(pf_open@dj+2)& (0+255),b
  5541  001EC6  0E02               	movlw	high pf_open@sp
  5542  001EC8  6FC8               	movwf	(pf_open@dj+3)& (0+255),b
  5543                           
  5544                           ; BSR set to: 2
  5545                           ;pff.c: 842: res = follow_path(&dj, dir, path);
  5546  001ECA  0EC5               	movlw	low pf_open@dj
  5547  001ECC  0100               	movlb	0	; () banked
  5548  001ECE  6FAD               	movwf	follow_path@dj& (0+255),b
  5549  001ED0  0E02               	movlw	high pf_open@dj
  5550  001ED2  6FAE               	movwf	(follow_path@dj+1)& (0+255),b
  5551  001ED4  0EA2               	movlw	low pf_open@dir
  5552  001ED6  6FAF               	movwf	follow_path@dir& (0+255),b
  5553  001ED8  0E02               	movlw	high pf_open@dir
  5554  001EDA  6FB0               	movwf	(follow_path@dir+1)& (0+255),b
  5555  001EDC  C0B5  F0B1         	movff	pf_open@path,follow_path@path
  5556  001EE0  C0B6  F0B2         	movff	pf_open@path+1,follow_path@path+1
  5557  001EE4  EC58  F012         	call	_follow_path	;wreg free
  5558  001EE8  0102               	movlb	2	; () banked
  5559  001EEA  6FC2               	movwf	pf_open@res& (0+255),b
  5560                           
  5561                           ; BSR set to: 2
  5562                           ;pff.c: 843: if (res != FR_OK) return res;
  5563  001EEC  51C2               	movf	pf_open@res& (0+255),w,b
  5564  001EEE  B4D8               	btfsc	status,2,c
  5565  001EF0  D002               	goto	l1017
  5566                           
  5567                           ; BSR set to: 2
  5568  001EF2  51C2               	movf	pf_open@res& (0+255),w,b
  5569                           
  5570                           ; BSR set to: 2
  5571  001EF4  0012               	return	
  5572  001EF6                     l1017:
  5573                           
  5574                           ; BSR set to: 2
  5575                           ;pff.c: 844: if (!dir[0] || (dir[11] & 0x10))
  5576                           
  5577                           ; BSR set to: 2
  5578  001EF6  51A2               	movf	pf_open@dir& (0+255),w,b
  5579  001EF8  B4D8               	btfsc	status,2,c
  5580  001EFA  D002               	goto	u9170
  5581                           
  5582                           ; BSR set to: 2
  5583  001EFC  A9AD               	btfss	(pf_open@dir+11)& (0+255),4,b
  5584  001EFE  D002               	goto	l1018
  5585  001F00                     u9170:
  5586                           
  5587                           ; BSR set to: 2
  5588                           ;pff.c: 845: return FR_NO_FILE;
  5589                           
  5590                           ; BSR set to: 2
  5591  001F00  0E03               	movlw	3
  5592                           
  5593                           ; BSR set to: 2
  5594  001F02  0012               	return	
  5595  001F04                     l1018:
  5596                           
  5597                           ; BSR set to: 2
  5598                           ;pff.c: 847: fs->org_clust = get_clust(dir);
  5599                           
  5600                           ; BSR set to: 2
  5601  001F04  0EA2               	movlw	low pf_open@dir
  5602  001F06  6E1A               	movwf	get_clust@dir,c
  5603  001F08  0E02               	movlw	high pf_open@dir
  5604  001F0A  6E1B               	movwf	get_clust@dir+1,c
  5605  001F0C  ECE7  F013         	call	_get_clust	;wreg free
  5606  001F10  0102               	movlb	2	; () banked
  5607  001F12  EE20 F01E          	lfsr	2,30
  5608  001F16  51C3               	movf	pf_open@fs& (0+255),w,b
  5609  001F18  26D9               	addwf	fsr2l,f,c
  5610  001F1A  51C4               	movf	(pf_open@fs+1)& (0+255),w,b
  5611  001F1C  22DA               	addwfc	fsr2h,f,c
  5612  001F1E  C01A  FFDE         	movff	?_get_clust,postinc2
  5613  001F22  C01B  FFDE         	movff	?_get_clust+1,postinc2
  5614  001F26  C01C  FFDE         	movff	?_get_clust+2,postinc2
  5615  001F2A  C01D  FFDE         	movff	?_get_clust+3,postinc2
  5616                           
  5617                           ; BSR set to: 2
  5618                           ;pff.c: 848: fs->fsize = (DWORD)(((DWORD)*((BYTE*)(dir+28)+3)<<24)|((DWORD)*((BYTE*)(dir
      +                          +28)+2)<<16)|((WORD)*((BYTE*)(dir+28)+1)<<8)|*(BYTE*)(dir+28));
  5619  001F2E  51BF               	movf	(pf_open@dir+29)& (0+255),w,b
  5620  001F30  0100               	movlb	0	; () banked
  5621  001F32  6FB8               	movwf	(??_pf_open+1)& (0+255),b
  5622  001F34  6BB7               	clrf	??_pf_open& (0+255),b
  5623  001F36  C2C0  F0B9         	movff	pf_open@dir+30,??_pf_open+2
  5624  001F3A  6BBA               	clrf	(??_pf_open+3)& (0+255),b
  5625  001F3C  6BBB               	clrf	(??_pf_open+4)& (0+255),b
  5626  001F3E  6BBC               	clrf	(??_pf_open+5)& (0+255),b
  5627  001F40  C0BA  F0BC         	movff	??_pf_open+3,??_pf_open+5
  5628  001F44  C0B9  F0BB         	movff	??_pf_open+2,??_pf_open+4
  5629  001F48  6BBA               	clrf	(??_pf_open+3)& (0+255),b
  5630  001F4A  6BB9               	clrf	(??_pf_open+2)& (0+255),b
  5631  001F4C  C2C1  F0BD         	movff	pf_open@dir+31,??_pf_open+6
  5632  001F50  6BBE               	clrf	(??_pf_open+7)& (0+255),b
  5633  001F52  6BBF               	clrf	(??_pf_open+8)& (0+255),b
  5634  001F54  6BC0               	clrf	(??_pf_open+9)& (0+255),b
  5635  001F56  C0BD  F0C0         	movff	??_pf_open+6,??_pf_open+9
  5636  001F5A  6BBF               	clrf	(??_pf_open+8)& (0+255),b
  5637  001F5C  6BBE               	clrf	(??_pf_open+7)& (0+255),b
  5638  001F5E  6BBD               	clrf	(??_pf_open+6)& (0+255),b
  5639  001F60  51B9               	movf	(??_pf_open+2)& (0+255),w,b
  5640  001F62  11BD               	iorwf	(??_pf_open+6)& (0+255),w,b
  5641  001F64  6FC1               	movwf	(??_pf_open+10)& (0+255),b
  5642  001F66  51BA               	movf	(??_pf_open+3)& (0+255),w,b
  5643  001F68  11BE               	iorwf	(??_pf_open+7)& (0+255),w,b
  5644  001F6A  6FC2               	movwf	(??_pf_open+11)& (0+255),b
  5645  001F6C  51BB               	movf	(??_pf_open+4)& (0+255),w,b
  5646  001F6E  11BF               	iorwf	(??_pf_open+8)& (0+255),w,b
  5647  001F70  6FC3               	movwf	(??_pf_open+12)& (0+255),b
  5648  001F72  51BC               	movf	(??_pf_open+5)& (0+255),w,b
  5649  001F74  11C0               	iorwf	(??_pf_open+9)& (0+255),w,b
  5650  001F76  6FC4               	movwf	(??_pf_open+13)& (0+255),b
  5651  001F78  51B7               	movf	??_pf_open& (0+255),w,b
  5652  001F7A  11C1               	iorwf	(??_pf_open+10)& (0+255),w,b
  5653  001F7C  6FC5               	movwf	(??_pf_open+14)& (0+255),b
  5654  001F7E  51B8               	movf	(??_pf_open+1)& (0+255),w,b
  5655  001F80  11C2               	iorwf	(??_pf_open+11)& (0+255),w,b
  5656  001F82  6FC6               	movwf	(??_pf_open+15)& (0+255),b
  5657  001F84  0E00               	movlw	0
  5658  001F86  11C3               	iorwf	(??_pf_open+12)& (0+255),w,b
  5659  001F88  6FC7               	movwf	(??_pf_open+16)& (0+255),b
  5660  001F8A  0E00               	movlw	0
  5661  001F8C  11C4               	iorwf	(??_pf_open+13)& (0+255),w,b
  5662  001F8E  6FC8               	movwf	(??_pf_open+17)& (0+255),b
  5663  001F90  0102               	movlb	2	; () banked
  5664  001F92  51BE               	movf	(pf_open@dir+28)& (0+255),w,b
  5665  001F94  0100               	movlb	0	; () banked
  5666  001F96  11C5               	iorwf	(??_pf_open+14)& (0+255),w,b
  5667  001F98  6FC9               	movwf	(??_pf_open+18)& (0+255),b
  5668  001F9A  51C6               	movf	(??_pf_open+15)& (0+255),w,b
  5669  001F9C  6FCA               	movwf	(??_pf_open+19)& (0+255),b
  5670  001F9E  51C7               	movf	(??_pf_open+16)& (0+255),w,b
  5671  001FA0  6FCB               	movwf	(??_pf_open+20)& (0+255),b
  5672  001FA2  51C8               	movf	(??_pf_open+17)& (0+255),w,b
  5673  001FA4  6FCC               	movwf	(??_pf_open+21)& (0+255),b
  5674  001FA6  0102               	movlb	2	; () banked
  5675  001FA8  EE20 F01A          	lfsr	2,26
  5676  001FAC  51C3               	movf	pf_open@fs& (0+255),w,b
  5677  001FAE  26D9               	addwf	fsr2l,f,c
  5678  001FB0  51C4               	movf	(pf_open@fs+1)& (0+255),w,b
  5679  001FB2  22DA               	addwfc	fsr2h,f,c
  5680  001FB4  C0C9  FFDE         	movff	??_pf_open+18,postinc2
  5681  001FB8  C0CA  FFDE         	movff	??_pf_open+19,postinc2
  5682  001FBC  C0CB  FFDE         	movff	??_pf_open+20,postinc2
  5683  001FC0  C0CC  FFDE         	movff	??_pf_open+21,postinc2
  5684                           
  5685                           ; BSR set to: 2
  5686                           ;pff.c: 849: fs->fptr = 0;
  5687  001FC4  EE20 F016          	lfsr	2,22
  5688  001FC8  51C3               	movf	pf_open@fs& (0+255),w,b
  5689  001FCA  26D9               	addwf	fsr2l,f,c
  5690  001FCC  51C4               	movf	(pf_open@fs+1)& (0+255),w,b
  5691  001FCE  22DA               	addwfc	fsr2h,f,c
  5692  001FD0  6ADE               	clrf	postinc2,c
  5693  001FD2  6ADE               	clrf	postinc2,c
  5694  001FD4  6ADE               	clrf	postinc2,c
  5695  001FD6  6ADD               	clrf	postdec2,c
  5696                           
  5697                           ; BSR set to: 2
  5698                           ;pff.c: 850: fs->flag = 0x01;
  5699  001FD8  EE20 F001          	lfsr	2,1
  5700  001FDC  51C3               	movf	pf_open@fs& (0+255),w,b
  5701  001FDE  26D9               	addwf	fsr2l,f,c
  5702  001FE0  51C4               	movf	(pf_open@fs+1)& (0+255),w,b
  5703  001FE2  22DA               	addwfc	fsr2h,f,c
  5704  001FE4  0E01               	movlw	1
  5705  001FE6  6EDF               	movwf	indf2,c
  5706                           
  5707                           ; BSR set to: 2
  5708                           ;pff.c: 852: return FR_OK;
  5709  001FE8  0E00               	movlw	0
  5710  001FEA  0012               	return	
  5711  001FEC                     __end_of_pf_open:
  5712                           	opt stack 0
  5713                           tosu	equ	0xFFF
  5714                           tosh	equ	0xFFE
  5715                           tosl	equ	0xFFD
  5716                           pclath	equ	0xFFA
  5717                           tblptru	equ	0xFF8
  5718                           tblptrh	equ	0xFF7
  5719                           tblptrl	equ	0xFF6
  5720                           tablat	equ	0xFF5
  5721                           prodh	equ	0xFF4
  5722                           prodl	equ	0xFF3
  5723                           intcon	equ	0xFF2
  5724                           intcon2	equ	0xFF1
  5725                           intcon3	equ	0xFF0
  5726                           postinc0	equ	0xFEE
  5727                           wreg	equ	0xFE8
  5728                           postinc1	equ	0xFE6
  5729                           postdec1	equ	0xFE5
  5730                           fsr1h	equ	0xFE2
  5731                           fsr1l	equ	0xFE1
  5732                           indf2	equ	0xFDF
  5733                           postinc2	equ	0xFDE
  5734                           postdec2	equ	0xFDD
  5735                           plusw2	equ	0xFDB
  5736                           fsr2h	equ	0xFDA
  5737                           fsr2l	equ	0xFD9
  5738                           status	equ	0xFD8
  5739                           
  5740 ;; *************** function _follow_path *****************
  5741 ;; Defined at:
  5742 ;;		line 680 in file "bibliotecas/pff.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;  dj              2   77[BANK0 ] PTR struct .
  5745 ;;		 -> pf_open@dj(16), 
  5746 ;;  dir             2   79[BANK0 ] PTR unsigned char 
  5747 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  5748 ;;  path            2   81[BANK0 ] PTR const unsigned char 
  5749 ;;		 -> fileName(15), 
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;  res             1   84[BANK0 ] enum E43
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      enum E43
  5754 ;; Registers used:
  5755 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5761 ;;      Params:         0       6       0       0       0       0       0       0       0
  5762 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5763 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5764 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5765 ;;Total ram usage:        8 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    9
  5768 ;; This function calls:
  5769 ;;		_create_name
  5770 ;;		_dir_find
  5771 ;;		_dir_rewind
  5772 ;;		_get_clust
  5773 ;; This function is called by:
  5774 ;;		_pf_open
  5775 ;;		_pf_opendir
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text20
  5780  0024B0                     __ptext20:
  5781                           	opt stack 0
  5782  0024B0                     _follow_path:
  5783                           	opt stack 18
  5784                           
  5785                           ;pff.c: 686: FRESULT res;
  5786                           ;pff.c: 689: while (*path == ' ') path++;
  5787                           
  5788                           ; BSR set to: 2
  5789                           ;incstack = 0
  5790  0024B0  D003               	goto	l972
  5791  0024B2  0100               	movlb	0	; () banked
  5792  0024B4  4BB1               	infsnz	follow_path@path& (0+255),f,b
  5793  0024B6  2BB2               	incf	(follow_path@path+1)& (0+255),f,b
  5794  0024B8                     l972:
  5795                           
  5796                           ; BSR set to: 0
  5797  0024B8  C0B1  FFD9         	movff	follow_path@path,fsr2l
  5798  0024BC  C0B2  FFDA         	movff	follow_path@path+1,fsr2h
  5799  0024C0  0E20               	movlw	32
  5800  0024C2  18DE               	xorwf	postinc2,w,c
  5801  0024C4  B4D8               	btfsc	status,2,c
  5802  0024C6  D7F5               	goto	l973
  5803                           
  5804                           ;pff.c: 690: if (*path == '/') path++;
  5805  0024C8  C0B1  FFD9         	movff	follow_path@path,fsr2l
  5806  0024CC  C0B2  FFDA         	movff	follow_path@path+1,fsr2h
  5807  0024D0  0E2F               	movlw	47
  5808  0024D2  18DE               	xorwf	postinc2,w,c
  5809  0024D4  A4D8               	btfss	status,2,c
  5810  0024D6  D003               	goto	l975
  5811  0024D8  0100               	movlb	0	; () banked
  5812  0024DA  4BB1               	infsnz	follow_path@path& (0+255),f,b
  5813  0024DC  2BB2               	incf	(follow_path@path+1)& (0+255),f,b
  5814  0024DE                     l975:
  5815                           
  5816                           ;pff.c: 691: dj->sclust = 0;
  5817                           
  5818                           ; BSR set to: 0
  5819  0024DE  0100               	movlb	0	; () banked
  5820  0024E0  EE20 F004          	lfsr	2,4
  5821  0024E4  51AD               	movf	follow_path@dj& (0+255),w,b
  5822  0024E6  26D9               	addwf	fsr2l,f,c
  5823  0024E8  51AE               	movf	(follow_path@dj+1)& (0+255),w,b
  5824  0024EA  22DA               	addwfc	fsr2h,f,c
  5825  0024EC  6ADE               	clrf	postinc2,c
  5826  0024EE  6ADE               	clrf	postinc2,c
  5827  0024F0  6ADE               	clrf	postinc2,c
  5828  0024F2  6ADD               	clrf	postdec2,c
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;pff.c: 693: if ((BYTE)*path < ' ') {
  5832  0024F4  C0B1  FFD9         	movff	follow_path@path,fsr2l
  5833  0024F8  C0B2  FFDA         	movff	follow_path@path+1,fsr2h
  5834  0024FC  0E20               	movlw	32
  5835  0024FE  60DF               	cpfslt	indf2,c
  5836  002500  D00F               	goto	l976
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;pff.c: 694: res = dir_rewind(dj);
  5840  002502  C0AD  F065         	movff	follow_path@dj,dir_rewind@dj
  5841  002506  C0AE  F066         	movff	follow_path@dj+1,dir_rewind@dj+1
  5842  00250A  EC31  F011         	call	_dir_rewind	;wreg free
  5843  00250E  0100               	movlb	0	; () banked
  5844  002510  6FB4               	movwf	follow_path@res& (0+255),b
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;pff.c: 695: dir[0] = 0;
  5848  002512  C0AF  FFD9         	movff	follow_path@dir,fsr2l
  5849  002516  C0B0  FFDA         	movff	follow_path@dir+1,fsr2h
  5850  00251A  0E00               	movlw	0
  5851  00251C  6EDF               	movwf	indf2,c
  5852                           
  5853                           ;pff.c: 697: } else {
  5854  00251E  D04E               	goto	l980
  5855  002520                     l976:
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;pff.c: 699: res = create_name(dj, &path);
  5859                           
  5860                           ; BSR set to: 0
  5861                           
  5862                           ;pff.c: 698: for (;;) {
  5863                           
  5864                           ; BSR set to: 0
  5865  002520  C0AD  F022         	movff	follow_path@dj,create_name@dj
  5866  002524  C0AE  F023         	movff	follow_path@dj+1,create_name@dj+1
  5867  002528  0EB1               	movlw	low follow_path@path
  5868  00252A  6E24               	movwf	create_name@path,c
  5869  00252C  0E00               	movlw	high follow_path@path
  5870  00252E  6E25               	movwf	create_name@path+1,c
  5871  002530  EC96  F010         	call	_create_name	;wreg free
  5872  002534  0100               	movlb	0	; () banked
  5873  002536  6FB4               	movwf	follow_path@res& (0+255),b
  5874                           
  5875                           ; BSR set to: 0
  5876                           ;pff.c: 700: if (res != FR_OK) break;
  5877  002538  51B4               	movf	follow_path@res& (0+255),w,b
  5878  00253A  A4D8               	btfss	status,2,c
  5879  00253C  D03F               	goto	l980
  5880                           
  5881                           ; BSR set to: 0
  5882                           ;pff.c: 701: res = dir_find(dj, dir);
  5883                           
  5884                           ; BSR set to: 0
  5885                           
  5886                           ; BSR set to: 0
  5887  00253E  C0AD  F0A5         	movff	follow_path@dj,dir_find@dj
  5888  002542  C0AE  F0A6         	movff	follow_path@dj+1,dir_find@dj+1
  5889  002546  C0AF  F0A7         	movff	follow_path@dir,dir_find@dir
  5890  00254A  C0B0  F0A8         	movff	follow_path@dir+1,dir_find@dir+1
  5891  00254E  EC67  F013         	call	_dir_find	;wreg free
  5892  002552  0100               	movlb	0	; () banked
  5893  002554  6FB4               	movwf	follow_path@res& (0+255),b
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;pff.c: 702: if (res != FR_OK) break;
  5897  002556  51B4               	movf	follow_path@res& (0+255),w,b
  5898  002558  A4D8               	btfss	status,2,c
  5899  00255A  D030               	goto	l980
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;pff.c: 703: if (dj->fn[11]) break;
  5903                           
  5904                           ; BSR set to: 0
  5905                           
  5906                           ; BSR set to: 0
  5907  00255C  EE20 F002          	lfsr	2,2
  5908  002560  51AD               	movf	follow_path@dj& (0+255),w,b
  5909  002562  26D9               	addwf	fsr2l,f,c
  5910  002564  51AE               	movf	(follow_path@dj+1)& (0+255),w,b
  5911  002566  22DA               	addwfc	fsr2h,f,c
  5912  002568  EE10 F00B          	lfsr	1,11
  5913  00256C  50DE               	movf	postinc2,w,c
  5914  00256E  26E1               	addwf	fsr1l,f,c
  5915  002570  50DD               	movf	postdec2,w,c
  5916  002572  22E2               	addwfc	fsr1h,f,c
  5917  002574  50E7               	movf	indf1,w,c
  5918  002576  A4D8               	btfss	status,2,c
  5919  002578  D021               	goto	l980
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;pff.c: 704: if (!(dir[11] & 0x10)) {
  5923                           
  5924                           ; BSR set to: 0
  5925                           
  5926                           ; BSR set to: 0
  5927  00257A  EE20 F00B          	lfsr	2,11
  5928  00257E  51AF               	movf	follow_path@dir& (0+255),w,b
  5929  002580  26D9               	addwf	fsr2l,f,c
  5930  002582  51B0               	movf	(follow_path@dir+1)& (0+255),w,b
  5931  002584  22DA               	addwfc	fsr2h,f,c
  5932  002586  B8DF               	btfsc	indf2,4,c
  5933  002588  D003               	goto	l983
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;pff.c: 705: res = FR_NO_FILE; break;
  5937  00258A  0E03               	movlw	3
  5938  00258C  6FB4               	movwf	follow_path@res& (0+255),b
  5939  00258E  D016               	goto	l980
  5940  002590                     l983:
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;pff.c: 706: }
  5944                           ;pff.c: 707: dj->sclust = get_clust(dir);
  5945                           
  5946                           ; BSR set to: 0
  5947  002590  C0AF  F01A         	movff	follow_path@dir,get_clust@dir
  5948  002594  C0B0  F01B         	movff	follow_path@dir+1,get_clust@dir+1
  5949  002598  ECE7  F013         	call	_get_clust	;wreg free
  5950  00259C  0100               	movlb	0	; () banked
  5951  00259E  EE20 F004          	lfsr	2,4
  5952  0025A2  51AD               	movf	follow_path@dj& (0+255),w,b
  5953  0025A4  26D9               	addwf	fsr2l,f,c
  5954  0025A6  51AE               	movf	(follow_path@dj+1)& (0+255),w,b
  5955  0025A8  22DA               	addwfc	fsr2h,f,c
  5956  0025AA  C01A  FFDE         	movff	?_get_clust,postinc2
  5957  0025AE  C01B  FFDE         	movff	?_get_clust+1,postinc2
  5958  0025B2  C01C  FFDE         	movff	?_get_clust+2,postinc2
  5959  0025B6  C01D  FFDE         	movff	?_get_clust+3,postinc2
  5960                           
  5961                           ;pff.c: 708: }
  5962  0025BA  D7B2               	goto	l976
  5963  0025BC                     l980:
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;pff.c: 709: }
  5967                           ;pff.c: 711: return res;
  5968                           
  5969                           ; BSR set to: 0
  5970                           
  5971                           ; BSR set to: 0
  5972  0025BC  51B4               	movf	follow_path@res& (0+255),w,b
  5973  0025BE  0012               	return	
  5974  0025C0                     __end_of_follow_path:
  5975                           	opt stack 0
  5976                           tosu	equ	0xFFF
  5977                           tosh	equ	0xFFE
  5978                           tosl	equ	0xFFD
  5979                           pclath	equ	0xFFA
  5980                           tblptru	equ	0xFF8
  5981                           tblptrh	equ	0xFF7
  5982                           tblptrl	equ	0xFF6
  5983                           tablat	equ	0xFF5
  5984                           prodh	equ	0xFF4
  5985                           prodl	equ	0xFF3
  5986                           intcon	equ	0xFF2
  5987                           intcon2	equ	0xFF1
  5988                           intcon3	equ	0xFF0
  5989                           postinc0	equ	0xFEE
  5990                           wreg	equ	0xFE8
  5991                           indf1	equ	0xFE7
  5992                           postinc1	equ	0xFE6
  5993                           postdec1	equ	0xFE5
  5994                           fsr1h	equ	0xFE2
  5995                           fsr1l	equ	0xFE1
  5996                           indf2	equ	0xFDF
  5997                           postinc2	equ	0xFDE
  5998                           postdec2	equ	0xFDD
  5999                           plusw2	equ	0xFDB
  6000                           fsr2h	equ	0xFDA
  6001                           fsr2l	equ	0xFD9
  6002                           status	equ	0xFD8
  6003                           
  6004 ;; *************** function _get_clust *****************
  6005 ;; Defined at:
  6006 ;;		line 414 in file "bibliotecas/pff.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;  dir             2   25[COMRAM] PTR unsigned char 
  6009 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  clst            4   39[COMRAM] unsigned long 
  6012 ;;  fs              2   37[COMRAM] PTR struct .
  6013 ;;		 -> NULL(0), SDCard@fs(42), 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  4   25[COMRAM] unsigned long 
  6016 ;; Registers used:
  6017 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6023 ;;      Params:         4       0       0       0       0       0       0       0       0
  6024 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6025 ;;      Temps:          8       0       0       0       0       0       0       0       0
  6026 ;;      Totals:        18       0       0       0       0       0       0       0       0
  6027 ;;Total ram usage:       18 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    2
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_follow_path
  6034 ;;		_pf_open
  6035 ;;		_pf_opendir
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text21
  6040  0027CE                     __ptext21:
  6041                           	opt stack 0
  6042  0027CE                     _get_clust:
  6043                           	opt stack 25
  6044                           
  6045                           ;pff.c: 418: FATFS *fs = FatFs;
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;incstack = 0
  6049  0027CE  C030  F026         	movff	_FatFs,get_clust@fs
  6050  0027D2  C031  F027         	movff	_FatFs+1,get_clust@fs+1
  6051                           
  6052                           ;pff.c: 422: if (0 || (1 && fs->fs_type == 3)) {
  6053  0027D6  0E00               	movlw	0
  6054  0027D8  6E28               	movwf	get_clust@clst,c
  6055  0027DA  0E00               	movlw	0
  6056  0027DC  6E29               	movwf	get_clust@clst+1,c
  6057  0027DE  0E00               	movlw	0
  6058  0027E0  6E2A               	movwf	get_clust@clst+2,c
  6059  0027E2  0E00               	movlw	0
  6060  0027E4  6E2B               	movwf	get_clust@clst+3,c
  6061  0027E6  C026  FFD9         	movff	get_clust@fs,fsr2l
  6062  0027EA  C027  FFDA         	movff	get_clust@fs+1,fsr2h
  6063  0027EE  0E03               	movlw	3
  6064  0027F0  18DE               	xorwf	postinc2,w,c
  6065  0027F2  A4D8               	btfss	status,2,c
  6066  0027F4  D025               	goto	l887
  6067                           
  6068                           ;pff.c: 423: clst = (WORD)(((WORD)*((BYTE*)(dir+20)+1)<<8)|(WORD)*(BYTE*)(dir+20));
  6069  0027F6  EE20 F015          	lfsr	2,21
  6070  0027FA  501A               	movf	get_clust@dir,w,c
  6071  0027FC  26D9               	addwf	fsr2l,f,c
  6072  0027FE  501B               	movf	get_clust@dir+1,w,c
  6073  002800  22DA               	addwfc	fsr2h,f,c
  6074  002802  50DF               	movf	indf2,w,c
  6075  002804  6E1E               	movwf	??_get_clust& (0+255),c
  6076  002806  501E               	movf	??_get_clust,w,c
  6077  002808  6E20               	movwf	(??_get_clust+2)& (0+255),c
  6078  00280A  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  6079  00280C  EE20 F014          	lfsr	2,20
  6080  002810  501A               	movf	get_clust@dir,w,c
  6081  002812  26D9               	addwf	fsr2l,f,c
  6082  002814  501B               	movf	get_clust@dir+1,w,c
  6083  002816  22DA               	addwfc	fsr2h,f,c
  6084  002818  50DF               	movf	indf2,w,c
  6085  00281A  6E21               	movwf	(??_get_clust+3)& (0+255),c
  6086  00281C  5021               	movf	??_get_clust+3,w,c
  6087  00281E  121F               	iorwf	??_get_clust+1,f,c
  6088  002820  0E00               	movlw	0
  6089  002822  1220               	iorwf	??_get_clust+2,f,c
  6090  002824  C01F  F028         	movff	??_get_clust+1,get_clust@clst
  6091  002828  C020  F029         	movff	??_get_clust+2,get_clust@clst+1
  6092  00282C  6A2A               	clrf	get_clust@clst+2,c
  6093  00282E  6A2B               	clrf	get_clust@clst+3,c
  6094                           
  6095                           ;pff.c: 424: clst <<= 16;
  6096  002830  0E10               	movlw	16
  6097  002832                     u8435:
  6098  002832  90D8               	bcf	status,0,c
  6099  002834  3628               	rlcf	get_clust@clst,f,c
  6100  002836  3629               	rlcf	get_clust@clst+1,f,c
  6101  002838  362A               	rlcf	get_clust@clst+2,f,c
  6102  00283A  362B               	rlcf	get_clust@clst+3,f,c
  6103  00283C  2EE8               	decfsz	wreg,f,c
  6104  00283E  D7F9               	goto	u8435
  6105  002840                     l887:
  6106                           
  6107                           ;pff.c: 425: }
  6108                           ;pff.c: 426: clst |= (WORD)(((WORD)*((BYTE*)(dir+26)+1)<<8)|(WORD)*(BYTE*)(dir+26));
  6109  002840  EE20 F01B          	lfsr	2,27
  6110  002844  501A               	movf	get_clust@dir,w,c
  6111  002846  26D9               	addwf	fsr2l,f,c
  6112  002848  501B               	movf	get_clust@dir+1,w,c
  6113  00284A  22DA               	addwfc	fsr2h,f,c
  6114  00284C  50DF               	movf	indf2,w,c
  6115  00284E  6E1E               	movwf	??_get_clust& (0+255),c
  6116  002850  501E               	movf	??_get_clust,w,c
  6117  002852  6E20               	movwf	(??_get_clust+2)& (0+255),c
  6118  002854  6A1F               	clrf	(??_get_clust+1)& (0+255),c
  6119  002856  EE20 F01A          	lfsr	2,26
  6120  00285A  501A               	movf	get_clust@dir,w,c
  6121  00285C  26D9               	addwf	fsr2l,f,c
  6122  00285E  501B               	movf	get_clust@dir+1,w,c
  6123  002860  22DA               	addwfc	fsr2h,f,c
  6124  002862  50DF               	movf	indf2,w,c
  6125  002864  6E21               	movwf	(??_get_clust+3)& (0+255),c
  6126  002866  5021               	movf	??_get_clust+3,w,c
  6127  002868  101F               	iorwf	??_get_clust+1,w,c
  6128  00286A  6E22               	movwf	(??_get_clust+4)& (0+255),c
  6129  00286C  5020               	movf	??_get_clust+2,w,c
  6130  00286E  6E23               	movwf	(??_get_clust+5)& (0+255),c
  6131  002870  6A24               	clrf	(??_get_clust+6)& (0+255),c
  6132  002872  6A25               	clrf	(??_get_clust+7)& (0+255),c
  6133  002874  5022               	movf	??_get_clust+4,w,c
  6134  002876  1228               	iorwf	get_clust@clst,f,c
  6135  002878  5023               	movf	??_get_clust+5,w,c
  6136  00287A  1229               	iorwf	get_clust@clst+1,f,c
  6137  00287C  5024               	movf	??_get_clust+6,w,c
  6138  00287E  122A               	iorwf	get_clust@clst+2,f,c
  6139  002880  5025               	movf	??_get_clust+7,w,c
  6140  002882  122B               	iorwf	get_clust@clst+3,f,c
  6141                           
  6142                           ;pff.c: 428: return clst;
  6143  002884  C028  F01A         	movff	get_clust@clst,?_get_clust
  6144  002888  C029  F01B         	movff	get_clust@clst+1,?_get_clust+1
  6145  00288C  C02A  F01C         	movff	get_clust@clst+2,?_get_clust+2
  6146  002890  C02B  F01D         	movff	get_clust@clst+3,?_get_clust+3
  6147  002894  0012               	return	
  6148  002896                     __end_of_get_clust:
  6149                           	opt stack 0
  6150                           tosu	equ	0xFFF
  6151                           tosh	equ	0xFFE
  6152                           tosl	equ	0xFFD
  6153                           pclath	equ	0xFFA
  6154                           tblptru	equ	0xFF8
  6155                           tblptrh	equ	0xFF7
  6156                           tblptrl	equ	0xFF6
  6157                           tablat	equ	0xFF5
  6158                           prodh	equ	0xFF4
  6159                           prodl	equ	0xFF3
  6160                           intcon	equ	0xFF2
  6161                           intcon2	equ	0xFF1
  6162                           intcon3	equ	0xFF0
  6163                           postinc0	equ	0xFEE
  6164                           wreg	equ	0xFE8
  6165                           indf1	equ	0xFE7
  6166                           postinc1	equ	0xFE6
  6167                           postdec1	equ	0xFE5
  6168                           fsr1h	equ	0xFE2
  6169                           fsr1l	equ	0xFE1
  6170                           indf2	equ	0xFDF
  6171                           postinc2	equ	0xFDE
  6172                           postdec2	equ	0xFDD
  6173                           plusw2	equ	0xFDB
  6174                           fsr2h	equ	0xFDA
  6175                           fsr2l	equ	0xFD9
  6176                           status	equ	0xFD8
  6177                           
  6178 ;; *************** function _dir_find *****************
  6179 ;; Defined at:
  6180 ;;		line 510 in file "bibliotecas/pff.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;  dj              2   69[BANK0 ] PTR struct .
  6183 ;;		 -> pf_open@dj(16), 
  6184 ;;  dir             2   71[BANK0 ] PTR unsigned char 
  6185 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;  res             1   76[BANK0 ] enum E43
  6188 ;;  c               1   75[BANK0 ] unsigned char 
  6189 ;; Return value:  Size  Location     Type
  6190 ;;                  1    wreg      enum E43
  6191 ;; Registers used:
  6192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6193 ;; Tracked objects:
  6194 ;;		On entry : 0/0
  6195 ;;		On exit  : 0/0
  6196 ;;		Unchanged: 0/0
  6197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6198 ;;      Params:         0       4       0       0       0       0       0       0       0
  6199 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6200 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6201 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6202 ;;Total ram usage:        8 bytes
  6203 ;; Hardware stack levels used:    1
  6204 ;; Hardware stack levels required when called:    8
  6205 ;; This function calls:
  6206 ;;		_dir_next
  6207 ;;		_dir_rewind
  6208 ;;		_disk_readp
  6209 ;;		_mem_cmp
  6210 ;; This function is called by:
  6211 ;;		_follow_path
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215                           	psect	text22
  6216  0026CE                     __ptext22:
  6217                           	opt stack 0
  6218  0026CE                     _dir_find:
  6219                           	opt stack 18
  6220                           
  6221                           ;pff.c: 515: FRESULT res;
  6222                           ;pff.c: 516: BYTE c;
  6223                           ;pff.c: 519: res = dir_rewind(dj);
  6224                           
  6225                           ;incstack = 0
  6226  0026CE  C0A5  F065         	movff	dir_find@dj,dir_rewind@dj
  6227  0026D2  C0A6  F066         	movff	dir_find@dj+1,dir_rewind@dj+1
  6228  0026D6  EC31  F011         	call	_dir_rewind	;wreg free
  6229  0026DA  0100               	movlb	0	; () banked
  6230  0026DC  6FAC               	movwf	dir_find@res& (0+255),b
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;pff.c: 520: if (res != FR_OK) return res;
  6234  0026DE  51AC               	movf	dir_find@res& (0+255),w,b
  6235  0026E0  B4D8               	btfsc	status,2,c
  6236  0026E2  D002               	goto	l919
  6237                           
  6238                           ; BSR set to: 0
  6239  0026E4  51AC               	movf	dir_find@res& (0+255),w,b
  6240                           
  6241                           ; BSR set to: 0
  6242  0026E6  0012               	return	
  6243  0026E8                     l919:
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;pff.c: 523: res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)
  6247                           ;pff.c: 524: ? FR_DISK_ERR : FR_OK;
  6248                           
  6249                           ; BSR set to: 0
  6250                           
  6251                           ;pff.c: 522: do {
  6252                           
  6253                           ; BSR set to: 0
  6254  0026E8  C0A7  F023         	movff	dir_find@dir,disk_readp@rd
  6255  0026EC  C0A8  F024         	movff	dir_find@dir+1,disk_readp@rd+1
  6256  0026F0  EE20 F00C          	lfsr	2,12
  6257  0026F4  51A5               	movf	dir_find@dj& (0+255),w,b
  6258  0026F6  26D9               	addwf	fsr2l,f,c
  6259  0026F8  51A6               	movf	(dir_find@dj+1)& (0+255),w,b
  6260  0026FA  22DA               	addwfc	fsr2h,f,c
  6261  0026FC  CFDE F025          	movff	postinc2,disk_readp@sector
  6262  002700  CFDE F026          	movff	postinc2,disk_readp@sector+1
  6263  002704  CFDE F027          	movff	postinc2,disk_readp@sector+2
  6264  002708  CFDE F028          	movff	postinc2,disk_readp@sector+3
  6265  00270C  C0A5  FFD9         	movff	dir_find@dj,fsr2l
  6266  002710  C0A6  FFDA         	movff	dir_find@dj+1,fsr2h
  6267  002714  CFDE F0A9          	movff	postinc2,??_dir_find
  6268  002718  CFDD F0AA          	movff	postdec2,??_dir_find+1
  6269  00271C  0E0F               	movlw	15
  6270  00271E  17A9               	andwf	??_dir_find& (0+255),f,b
  6271  002720  0E00               	movlw	0
  6272  002722  17AA               	andwf	(??_dir_find+1)& (0+255),f,b
  6273  002724  0E05               	movlw	5
  6274  002726                     u8455:
  6275  002726  90D8               	bcf	status,0,c
  6276  002728  37A9               	rlcf	??_dir_find& (0+255),f,b
  6277  00272A  37AA               	rlcf	(??_dir_find+1)& (0+255),f,b
  6278  00272C  2EE8               	decfsz	wreg,f,c
  6279  00272E  D7FB               	goto	u8455
  6280  002730  C0A9  F029         	movff	??_dir_find,disk_readp@offset
  6281  002734  C0AA  F02A         	movff	??_dir_find+1,disk_readp@offset+1
  6282  002738  0E00               	movlw	0
  6283  00273A  6E2C               	movwf	disk_readp@count+1,c
  6284  00273C  0E20               	movlw	32
  6285  00273E  6E2B               	movwf	disk_readp@count,c
  6286  002740  EC5D  F009         	call	_disk_readp	;wreg free
  6287  002744  0900               	iorlw	0
  6288  002746  B4D8               	btfsc	status,2,c
  6289  002748  D002               	goto	u8460
  6290  00274A  0E01               	movlw	1
  6291  00274C  D001               	goto	u8470
  6292  00274E                     u8460:
  6293  00274E  0E00               	movlw	0
  6294  002750                     u8470:
  6295  002750  0100               	movlb	0	; () banked
  6296  002752  6FAC               	movwf	dir_find@res& (0+255),b
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;pff.c: 525: if (res != FR_OK) break;
  6300  002754  51AC               	movf	dir_find@res& (0+255),w,b
  6301  002756  A4D8               	btfss	status,2,c
  6302  002758  D037               	goto	u8520
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;pff.c: 526: c = dir[0];
  6306                           
  6307                           ; BSR set to: 0
  6308                           
  6309                           ; BSR set to: 0
  6310  00275A  C0A7  FFD9         	movff	dir_find@dir,fsr2l
  6311  00275E  C0A8  FFDA         	movff	dir_find@dir+1,fsr2h
  6312  002762  50DF               	movf	indf2,w,c
  6313  002764  6FAB               	movwf	dir_find@c& (0+255),b
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;pff.c: 527: if (c == 0) { res = FR_NO_FILE; break; }
  6317  002766  51AB               	movf	dir_find@c& (0+255),w,b
  6318  002768  A4D8               	btfss	status,2,c
  6319  00276A  D003               	goto	l924
  6320                           
  6321                           ; BSR set to: 0
  6322  00276C  0E03               	movlw	3
  6323  00276E  6FAC               	movwf	dir_find@res& (0+255),b
  6324  002770  D02B               	goto	u8520
  6325  002772                     l924:
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;pff.c: 528: if (!(dir[11] & 0x08) && !mem_cmp(dir, dj->fn, 11))
  6329                           
  6330                           ; BSR set to: 0
  6331  002772  EE20 F00B          	lfsr	2,11
  6332  002776  51A7               	movf	dir_find@dir& (0+255),w,b
  6333  002778  26D9               	addwf	fsr2l,f,c
  6334  00277A  51A8               	movf	(dir_find@dir+1)& (0+255),w,b
  6335  00277C  22DA               	addwfc	fsr2h,f,c
  6336  00277E  B6DF               	btfsc	indf2,3,c
  6337  002780  D018               	goto	l925
  6338                           
  6339                           ; BSR set to: 0
  6340  002782  C0A7  F01A         	movff	dir_find@dir,mem_cmp@dst
  6341  002786  C0A8  F01B         	movff	dir_find@dir+1,mem_cmp@dst+1
  6342  00278A  EE20 F002          	lfsr	2,2
  6343  00278E  51A5               	movf	dir_find@dj& (0+255),w,b
  6344  002790  26D9               	addwf	fsr2l,f,c
  6345  002792  51A6               	movf	(dir_find@dj+1)& (0+255),w,b
  6346  002794  22DA               	addwfc	fsr2h,f,c
  6347  002796  CFDE F01C          	movff	postinc2,mem_cmp@src
  6348  00279A  CFDD F01D          	movff	postdec2,mem_cmp@src+1
  6349  00279E  0E00               	movlw	0
  6350  0027A0  6E1F               	movwf	mem_cmp@cnt+1,c
  6351  0027A2  0E0B               	movlw	11
  6352  0027A4  6E1E               	movwf	mem_cmp@cnt,c
  6353  0027A6  EC14  F017         	call	_mem_cmp	;wreg free
  6354  0027AA  501A               	movf	?_mem_cmp,w,c
  6355  0027AC  101B               	iorwf	?_mem_cmp+1,w,c
  6356  0027AE  B4D8               	btfsc	status,2,c
  6357  0027B0  D00B               	goto	u8520
  6358  0027B2                     l925:
  6359                           
  6360                           ;pff.c: 530: res = dir_next(dj);
  6361  0027B2  C0A5  F094         	movff	dir_find@dj,dir_next@dj
  6362  0027B6  C0A6  F095         	movff	dir_find@dj+1,dir_next@dj+1
  6363  0027BA  ECC4  F00D         	call	_dir_next	;wreg free
  6364  0027BE  0100               	movlb	0	; () banked
  6365  0027C0  6FAC               	movwf	dir_find@res& (0+255),b
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;pff.c: 531: } while (res == FR_OK);
  6369  0027C2  51AC               	movf	dir_find@res& (0+255),w,b
  6370  0027C4  B4D8               	btfsc	status,2,c
  6371  0027C6  D790               	goto	l919
  6372  0027C8                     u8520:
  6373                           
  6374                           ;pff.c: 533: return res;
  6375                           
  6376                           ; BSR set to: 0
  6377  0027C8  0100               	movlb	0	; () banked
  6378  0027CA  51AC               	movf	dir_find@res& (0+255),w,b
  6379  0027CC  0012               	return	
  6380  0027CE                     __end_of_dir_find:
  6381                           	opt stack 0
  6382                           tosu	equ	0xFFF
  6383                           tosh	equ	0xFFE
  6384                           tosl	equ	0xFFD
  6385                           pclath	equ	0xFFA
  6386                           tblptru	equ	0xFF8
  6387                           tblptrh	equ	0xFF7
  6388                           tblptrl	equ	0xFF6
  6389                           tablat	equ	0xFF5
  6390                           prodh	equ	0xFF4
  6391                           prodl	equ	0xFF3
  6392                           intcon	equ	0xFF2
  6393                           intcon2	equ	0xFF1
  6394                           intcon3	equ	0xFF0
  6395                           postinc0	equ	0xFEE
  6396                           wreg	equ	0xFE8
  6397                           indf1	equ	0xFE7
  6398                           postinc1	equ	0xFE6
  6399                           postdec1	equ	0xFE5
  6400                           fsr1h	equ	0xFE2
  6401                           fsr1l	equ	0xFE1
  6402                           indf2	equ	0xFDF
  6403                           postinc2	equ	0xFDE
  6404                           postdec2	equ	0xFDD
  6405                           plusw2	equ	0xFDB
  6406                           fsr2h	equ	0xFDA
  6407                           fsr2l	equ	0xFD9
  6408                           status	equ	0xFD8
  6409                           
  6410 ;; *************** function _mem_cmp *****************
  6411 ;; Defined at:
  6412 ;;		line 336 in file "bibliotecas/pff.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;  dst             2   25[COMRAM] PTR const void 
  6415 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6416 ;;  src             2   27[COMRAM] PTR const void 
  6417 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6418 ;;  cnt             2   29[COMRAM] int 
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;  r               2   38[COMRAM] int 
  6421 ;;  s               2   36[COMRAM] PTR const unsigned char 
  6422 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6423 ;;  d               2   34[COMRAM] PTR const unsigned char 
  6424 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  2   25[COMRAM] int 
  6427 ;; Registers used:
  6428 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6434 ;;      Params:         6       0       0       0       0       0       0       0       0
  6435 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6436 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6437 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6438 ;;Total ram usage:       15 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; Hardware stack levels required when called:    2
  6441 ;; This function calls:
  6442 ;;		Nothing
  6443 ;; This function is called by:
  6444 ;;		_dir_find
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           	psect	text23
  6449  002E28                     __ptext23:
  6450                           	opt stack 0
  6451  002E28                     _mem_cmp:
  6452                           	opt stack 23
  6453                           
  6454                           ;pff.c: 337: const char *d = (const char *)dst, *s = (const char *)src;
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;incstack = 0
  6458  002E28  C01A  F023         	movff	mem_cmp@dst,mem_cmp@d
  6459  002E2C  C01B  F024         	movff	mem_cmp@dst+1,mem_cmp@d+1
  6460  002E30  C01C  F025         	movff	mem_cmp@src,mem_cmp@s
  6461  002E34  C01D  F026         	movff	mem_cmp@src+1,mem_cmp@s+1
  6462                           
  6463                           ;pff.c: 338: int r = 0;
  6464  002E38  0E00               	movlw	0
  6465  002E3A  6E28               	movwf	mem_cmp@r+1,c
  6466  002E3C  0E00               	movlw	0
  6467  002E3E  6E27               	movwf	mem_cmp@r,c
  6468  002E40  061E               	decf	mem_cmp@cnt,f,c
  6469  002E42  A0D8               	btfss	status,0,c
  6470  002E44  061F               	decf	mem_cmp@cnt+1,f,c
  6471  002E46  281E               	incf	mem_cmp@cnt,w,c
  6472  002E48  E103               	bnz	u8060
  6473  002E4A  281F               	incf	mem_cmp@cnt+1,w,c
  6474  002E4C  B4D8               	btfsc	status,2,c
  6475  002E4E  D01F               	goto	u8070
  6476  002E50                     u8060:
  6477  002E50  C025  FFD9         	movff	mem_cmp@s,fsr2l
  6478  002E54  C026  FFDA         	movff	mem_cmp@s+1,fsr2h
  6479  002E58  4A25               	infsnz	mem_cmp@s,f,c
  6480  002E5A  2A26               	incf	mem_cmp@s+1,f,c
  6481  002E5C  50DF               	movf	indf2,w,c
  6482  002E5E  6E20               	movwf	??_mem_cmp& (0+255),c
  6483  002E60  6A21               	clrf	(??_mem_cmp+1)& (0+255),c
  6484  002E62  1E20               	comf	??_mem_cmp,f,c
  6485  002E64  1E21               	comf	??_mem_cmp+1,f,c
  6486  002E66  4A20               	infsnz	??_mem_cmp,f,c
  6487  002E68  2A21               	incf	??_mem_cmp+1,f,c
  6488  002E6A  C023  FFD9         	movff	mem_cmp@d,fsr2l
  6489  002E6E  C024  FFDA         	movff	mem_cmp@d+1,fsr2h
  6490  002E72  4A23               	infsnz	mem_cmp@d,f,c
  6491  002E74  2A24               	incf	mem_cmp@d+1,f,c
  6492  002E76  50DF               	movf	indf2,w,c
  6493  002E78  6E22               	movwf	(??_mem_cmp+2)& (0+255),c
  6494  002E7A  5022               	movf	??_mem_cmp+2,w,c
  6495  002E7C  2420               	addwf	??_mem_cmp,w,c
  6496  002E7E  6E27               	movwf	mem_cmp@r,c
  6497  002E80  0E00               	movlw	0
  6498  002E82  2021               	addwfc	??_mem_cmp+1,w,c
  6499  002E84  6E28               	movwf	mem_cmp@r+1,c
  6500  002E86  5027               	movf	mem_cmp@r,w,c
  6501  002E88  1028               	iorwf	mem_cmp@r+1,w,c
  6502  002E8A  B4D8               	btfsc	status,2,c
  6503  002E8C  D7D9               	goto	l854
  6504  002E8E                     u8070:
  6505                           
  6506                           ;pff.c: 340: return r;
  6507  002E8E  C027  F01A         	movff	mem_cmp@r,?_mem_cmp
  6508  002E92  C028  F01B         	movff	mem_cmp@r+1,?_mem_cmp+1
  6509  002E96  0012               	return		;funcret
  6510  002E98                     __end_of_mem_cmp:
  6511                           	opt stack 0
  6512                           tosu	equ	0xFFF
  6513                           tosh	equ	0xFFE
  6514                           tosl	equ	0xFFD
  6515                           pclath	equ	0xFFA
  6516                           tblptru	equ	0xFF8
  6517                           tblptrh	equ	0xFF7
  6518                           tblptrl	equ	0xFF6
  6519                           tablat	equ	0xFF5
  6520                           prodh	equ	0xFF4
  6521                           prodl	equ	0xFF3
  6522                           intcon	equ	0xFF2
  6523                           intcon2	equ	0xFF1
  6524                           intcon3	equ	0xFF0
  6525                           postinc0	equ	0xFEE
  6526                           wreg	equ	0xFE8
  6527                           indf1	equ	0xFE7
  6528                           postinc1	equ	0xFE6
  6529                           postdec1	equ	0xFE5
  6530                           fsr1h	equ	0xFE2
  6531                           fsr1l	equ	0xFE1
  6532                           indf2	equ	0xFDF
  6533                           postinc2	equ	0xFDE
  6534                           postdec2	equ	0xFDD
  6535                           plusw2	equ	0xFDB
  6536                           fsr2h	equ	0xFDA
  6537                           fsr2l	equ	0xFD9
  6538                           status	equ	0xFD8
  6539                           
  6540 ;; *************** function _dir_rewind *****************
  6541 ;; Defined at:
  6542 ;;		line 437 in file "bibliotecas/pff.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  dj              2    5[BANK0 ] PTR struct .
  6545 ;;		 -> pf_open@dj(16), 
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;  clst            4   17[BANK0 ] unsigned long 
  6548 ;;  fs              2   15[BANK0 ] PTR struct .
  6549 ;;		 -> NULL(0), SDCard@fs(42), 
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  1    wreg      enum E43
  6552 ;; Registers used:
  6553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6559 ;;      Params:         0       2       0       0       0       0       0       0       0
  6560 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6561 ;;      Temps:          0       4       0       0       0       0       0       0       0
  6562 ;;      Totals:         0      16       0       0       0       0       0       0       0
  6563 ;;Total ram usage:       16 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:    4
  6566 ;; This function calls:
  6567 ;;		_clust2sect
  6568 ;; This function is called by:
  6569 ;;		_dir_find
  6570 ;;		_follow_path
  6571 ;;		_pf_opendir
  6572 ;;		_pf_readdir
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           	psect	text24
  6577  002262                     __ptext24:
  6578                           	opt stack 0
  6579  002262                     _dir_rewind:
  6580                           	opt stack 22
  6581                           
  6582                           ;pff.c: 441: DWORD clst;
  6583                           ;pff.c: 442: FATFS *fs = FatFs;
  6584                           
  6585                           ;incstack = 0
  6586  002262  C030  F06F         	movff	_FatFs,dir_rewind@fs
  6587  002266  C031  F070         	movff	_FatFs+1,dir_rewind@fs+1
  6588                           
  6589                           ;pff.c: 445: dj->index = 0;
  6590  00226A  C065  FFD9         	movff	dir_rewind@dj,fsr2l
  6591  00226E  C066  FFDA         	movff	dir_rewind@dj+1,fsr2h
  6592  002272  0E00               	movlw	0
  6593  002274  6EDE               	movwf	postinc2,c
  6594  002276  0E00               	movlw	0
  6595  002278  6EDD               	movwf	postdec2,c
  6596                           
  6597                           ;pff.c: 446: clst = dj->sclust;
  6598  00227A  0100               	movlb	0	; () banked
  6599  00227C  EE20 F004          	lfsr	2,4
  6600  002280  5165               	movf	dir_rewind@dj& (0+255),w,b
  6601  002282  26D9               	addwf	fsr2l,f,c
  6602  002284  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  6603  002286  22DA               	addwfc	fsr2h,f,c
  6604  002288  CFDE F071          	movff	postinc2,dir_rewind@clst
  6605  00228C  CFDE F072          	movff	postinc2,dir_rewind@clst+1
  6606  002290  CFDE F073          	movff	postinc2,dir_rewind@clst+2
  6607  002294  CFDE F074          	movff	postinc2,dir_rewind@clst+3
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;pff.c: 447: if (clst == 1 || clst >= fs->n_fatent)
  6611  002298  0571               	decf	dir_rewind@clst& (0+255),w,b
  6612  00229A  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  6613  00229C  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  6614  00229E  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  6615  0022A0  B4D8               	btfsc	status,2,c
  6616  0022A2  D010               	goto	u8090
  6617                           
  6618                           ; BSR set to: 0
  6619  0022A4  EE20 F006          	lfsr	2,6
  6620  0022A8  516F               	movf	dir_rewind@fs& (0+255),w,b
  6621  0022AA  26D9               	addwf	fsr2l,f,c
  6622  0022AC  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  6623  0022AE  22DA               	addwfc	fsr2h,f,c
  6624  0022B0  50DE               	movf	postinc2,w,c
  6625  0022B2  5D71               	subwf	dir_rewind@clst& (0+255),w,b
  6626  0022B4  50DE               	movf	postinc2,w,c
  6627  0022B6  5972               	subwfb	(dir_rewind@clst+1)& (0+255),w,b
  6628  0022B8  50DE               	movf	postinc2,w,c
  6629  0022BA  5973               	subwfb	(dir_rewind@clst+2)& (0+255),w,b
  6630  0022BC  50DE               	movf	postinc2,w,c
  6631  0022BE  5974               	subwfb	(dir_rewind@clst+3)& (0+255),w,b
  6632  0022C0  A0D8               	btfss	status,0,c
  6633  0022C2  D002               	goto	l893
  6634  0022C4                     u8090:
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;pff.c: 448: return FR_DISK_ERR;
  6638                           
  6639                           ; BSR set to: 0
  6640  0022C4  0E01               	movlw	1
  6641                           
  6642                           ; BSR set to: 0
  6643  0022C6  0012               	return	
  6644  0022C8                     l893:
  6645                           
  6646                           ; BSR set to: 0
  6647                           
  6648                           ; BSR set to: 0
  6649  0022C8  5171               	movf	dir_rewind@clst& (0+255),w,b
  6650  0022CA  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  6651  0022CC  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  6652  0022CE  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  6653  0022D0  A4D8               	btfss	status,2,c
  6654  0022D2  D016               	goto	l897
  6655                           
  6656                           ; BSR set to: 0
  6657  0022D4  C06F  FFD9         	movff	dir_rewind@fs,fsr2l
  6658  0022D8  C070  FFDA         	movff	dir_rewind@fs+1,fsr2h
  6659  0022DC  0E03               	movlw	3
  6660  0022DE  18DE               	xorwf	postinc2,w,c
  6661  0022E0  A4D8               	btfss	status,2,c
  6662  0022E2  D00E               	goto	l897
  6663                           
  6664                           ; BSR set to: 0
  6665                           ;pff.c: 450: clst = (DWORD)fs->dirbase;
  6666                           
  6667                           ; BSR set to: 0
  6668  0022E4  EE20 F00E          	lfsr	2,14
  6669  0022E8  516F               	movf	dir_rewind@fs& (0+255),w,b
  6670  0022EA  26D9               	addwf	fsr2l,f,c
  6671  0022EC  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  6672  0022EE  22DA               	addwfc	fsr2h,f,c
  6673  0022F0  CFDE F071          	movff	postinc2,dir_rewind@clst
  6674  0022F4  CFDE F072          	movff	postinc2,dir_rewind@clst+1
  6675  0022F8  CFDE F073          	movff	postinc2,dir_rewind@clst+2
  6676  0022FC  CFDE F074          	movff	postinc2,dir_rewind@clst+3
  6677  002300                     l897:
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;pff.c: 452: dj->sect = (0 || clst) ? clust2sect(clst) : fs->dirbase;
  6681  002300  EE20 F008          	lfsr	2,8
  6682  002304  5165               	movf	dir_rewind@dj& (0+255),w,b
  6683  002306  26D9               	addwf	fsr2l,f,c
  6684  002308  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  6685  00230A  22DA               	addwfc	fsr2h,f,c
  6686  00230C  C071  FFDE         	movff	dir_rewind@clst,postinc2
  6687  002310  C072  FFDE         	movff	dir_rewind@clst+1,postinc2
  6688  002314  C073  FFDE         	movff	dir_rewind@clst+2,postinc2
  6689  002318  C074  FFDE         	movff	dir_rewind@clst+3,postinc2
  6690                           
  6691                           ; BSR set to: 0
  6692  00231C  5171               	movf	dir_rewind@clst& (0+255),w,b
  6693  00231E  1172               	iorwf	(dir_rewind@clst+1)& (0+255),w,b
  6694  002320  1173               	iorwf	(dir_rewind@clst+2)& (0+255),w,b
  6695  002322  1174               	iorwf	(dir_rewind@clst+3)& (0+255),w,b
  6696  002324  A4D8               	btfss	status,2,c
  6697  002326  D00F               	goto	l901
  6698                           
  6699                           ; BSR set to: 0
  6700  002328  EE20 F00E          	lfsr	2,14
  6701  00232C  516F               	movf	dir_rewind@fs& (0+255),w,b
  6702  00232E  26D9               	addwf	fsr2l,f,c
  6703  002330  5170               	movf	(dir_rewind@fs+1)& (0+255),w,b
  6704  002332  22DA               	addwfc	fsr2h,f,c
  6705  002334  CFDE F06B          	movff	postinc2,_dir_rewind$1975
  6706  002338  CFDE F06C          	movff	postinc2,_dir_rewind$1975+1
  6707  00233C  CFDE F06D          	movff	postinc2,_dir_rewind$1975+2
  6708  002340  CFDE F06E          	movff	postinc2,_dir_rewind$1975+3
  6709  002344  D012               	goto	l903
  6710  002346                     l901:
  6711                           
  6712                           ; BSR set to: 0
  6713                           
  6714                           ; BSR set to: 0
  6715  002346  C071  F026         	movff	dir_rewind@clst,clust2sect@clst
  6716  00234A  C072  F027         	movff	dir_rewind@clst+1,clust2sect@clst+1
  6717  00234E  C073  F028         	movff	dir_rewind@clst+2,clust2sect@clst+2
  6718  002352  C074  F029         	movff	dir_rewind@clst+3,clust2sect@clst+3
  6719  002356  EC4B  F014         	call	_clust2sect	;wreg free
  6720  00235A  C026  F06B         	movff	?_clust2sect,_dir_rewind$1975
  6721  00235E  C027  F06C         	movff	?_clust2sect+1,_dir_rewind$1975+1
  6722  002362  C028  F06D         	movff	?_clust2sect+2,_dir_rewind$1975+2
  6723  002366  C029  F06E         	movff	?_clust2sect+3,_dir_rewind$1975+3
  6724  00236A                     l903:
  6725  00236A  0100               	movlb	0	; () banked
  6726  00236C  EE20 F00C          	lfsr	2,12
  6727  002370  5165               	movf	dir_rewind@dj& (0+255),w,b
  6728  002372  26D9               	addwf	fsr2l,f,c
  6729  002374  5166               	movf	(dir_rewind@dj+1)& (0+255),w,b
  6730  002376  22DA               	addwfc	fsr2h,f,c
  6731  002378  C06B  FFDE         	movff	_dir_rewind$1975,postinc2
  6732  00237C  C06C  FFDE         	movff	_dir_rewind$1975+1,postinc2
  6733  002380  C06D  FFDE         	movff	_dir_rewind$1975+2,postinc2
  6734  002384  C06E  FFDE         	movff	_dir_rewind$1975+3,postinc2
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;pff.c: 454: return FR_OK;
  6738  002388  0E00               	movlw	0
  6739  00238A  0012               	return	
  6740  00238C                     __end_of_dir_rewind:
  6741                           	opt stack 0
  6742                           tosu	equ	0xFFF
  6743                           tosh	equ	0xFFE
  6744                           tosl	equ	0xFFD
  6745                           pclath	equ	0xFFA
  6746                           tblptru	equ	0xFF8
  6747                           tblptrh	equ	0xFF7
  6748                           tblptrl	equ	0xFF6
  6749                           tablat	equ	0xFF5
  6750                           prodh	equ	0xFF4
  6751                           prodl	equ	0xFF3
  6752                           intcon	equ	0xFF2
  6753                           intcon2	equ	0xFF1
  6754                           intcon3	equ	0xFF0
  6755                           postinc0	equ	0xFEE
  6756                           wreg	equ	0xFE8
  6757                           indf1	equ	0xFE7
  6758                           postinc1	equ	0xFE6
  6759                           postdec1	equ	0xFE5
  6760                           fsr1h	equ	0xFE2
  6761                           fsr1l	equ	0xFE1
  6762                           indf2	equ	0xFDF
  6763                           postinc2	equ	0xFDE
  6764                           postdec2	equ	0xFDD
  6765                           plusw2	equ	0xFDB
  6766                           fsr2h	equ	0xFDA
  6767                           fsr2l	equ	0xFD9
  6768                           status	equ	0xFD8
  6769                           
  6770 ;; *************** function _dir_next *****************
  6771 ;; Defined at:
  6772 ;;		line 465 in file "bibliotecas/pff.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  dj              2   52[BANK0 ] PTR struct .
  6775 ;;		 -> pf_open@dj(16), 
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;  clst            4   63[BANK0 ] unsigned long 
  6778 ;;  i               2   67[BANK0 ] unsigned short 
  6779 ;;  fs              2   61[BANK0 ] PTR struct .
  6780 ;;		 -> NULL(0), SDCard@fs(42), 
  6781 ;; Return value:  Size  Location     Type
  6782 ;;                  1    wreg      enum E43
  6783 ;; Registers used:
  6784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 0/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6790 ;;      Params:         0       2       0       0       0       0       0       0       0
  6791 ;;      Locals:         0       8       0       0       0       0       0       0       0
  6792 ;;      Temps:          0       7       0       0       0       0       0       0       0
  6793 ;;      Totals:         0      17       0       0       0       0       0       0       0
  6794 ;;Total ram usage:       17 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; Hardware stack levels required when called:    7
  6797 ;; This function calls:
  6798 ;;		_clust2sect
  6799 ;;		_get_fat
  6800 ;; This function is called by:
  6801 ;;		_dir_find
  6802 ;;		_dir_read
  6803 ;;		_pf_readdir
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           	psect	text25
  6808  001B88                     __ptext25:
  6809                           	opt stack 0
  6810  001B88                     _dir_next:
  6811                           	opt stack 18
  6812                           
  6813                           ;pff.c: 469: DWORD clst;
  6814                           ;pff.c: 470: WORD i;
  6815                           ;pff.c: 471: FATFS *fs = FatFs;
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;incstack = 0
  6819  001B88  C030  F09D         	movff	_FatFs,dir_next@fs
  6820  001B8C  C031  F09E         	movff	_FatFs+1,dir_next@fs+1
  6821                           
  6822                           ;pff.c: 474: i = dj->index + 1;
  6823  001B90  C094  FFD9         	movff	dir_next@dj,fsr2l
  6824  001B94  C095  FFDA         	movff	dir_next@dj+1,fsr2h
  6825  001B98  CFDE F096          	movff	postinc2,??_dir_next
  6826  001B9C  CFDD F097          	movff	postdec2,??_dir_next+1
  6827  001BA0  0E01               	movlw	1
  6828  001BA2  0100               	movlb	0	; () banked
  6829  001BA4  2596               	addwf	??_dir_next& (0+255),w,b
  6830  001BA6  6FA3               	movwf	dir_next@i& (0+255),b
  6831  001BA8  0E00               	movlw	0
  6832  001BAA  2197               	addwfc	(??_dir_next+1)& (0+255),w,b
  6833  001BAC  6FA4               	movwf	(dir_next@i+1)& (0+255),b
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;pff.c: 475: if (!i || !dj->sect)
  6837  001BAE  51A3               	movf	dir_next@i& (0+255),w,b
  6838  001BB0  11A4               	iorwf	(dir_next@i+1)& (0+255),w,b
  6839  001BB2  B4D8               	btfsc	status,2,c
  6840  001BB4  D00C               	goto	u8140
  6841                           
  6842                           ; BSR set to: 0
  6843  001BB6  EE20 F00C          	lfsr	2,12
  6844  001BBA  5194               	movf	dir_next@dj& (0+255),w,b
  6845  001BBC  26D9               	addwf	fsr2l,f,c
  6846  001BBE  5195               	movf	(dir_next@dj+1)& (0+255),w,b
  6847  001BC0  22DA               	addwfc	fsr2h,f,c
  6848  001BC2  50DE               	movf	postinc2,w,c
  6849  001BC4  10DE               	iorwf	postinc2,w,c
  6850  001BC6  10DE               	iorwf	postinc2,w,c
  6851  001BC8  10DE               	iorwf	postinc2,w,c
  6852  001BCA  A4D8               	btfss	status,2,c
  6853  001BCC  D002               	goto	l906
  6854  001BCE                     u8140:
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;pff.c: 476: return FR_NO_FILE;
  6858                           
  6859                           ; BSR set to: 0
  6860  001BCE  0E03               	movlw	3
  6861                           
  6862                           ; BSR set to: 0
  6863  001BD0  0012               	return	
  6864  001BD2                     l906:
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;pff.c: 478: if (!(i % 16)) {
  6868                           
  6869                           ; BSR set to: 0
  6870  001BD2  0E0F               	movlw	15
  6871  001BD4  15A3               	andwf	dir_next@i& (0+255),w,b
  6872  001BD6  6F96               	movwf	??_dir_next& (0+255),b
  6873  001BD8  0E00               	movlw	0
  6874  001BDA  15A4               	andwf	(dir_next@i+1)& (0+255),w,b
  6875  001BDC  6F97               	movwf	(??_dir_next+1)& (0+255),b
  6876  001BDE  5196               	movf	??_dir_next& (0+255),w,b
  6877  001BE0  1197               	iorwf	(??_dir_next+1)& (0+255),w,b
  6878  001BE2  A4D8               	btfss	status,2,c
  6879  001BE4  D0A5               	goto	l914
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;pff.c: 479: dj->sect++;
  6883  001BE6  EE20 F00C          	lfsr	2,12
  6884  001BEA  5194               	movf	dir_next@dj& (0+255),w,b
  6885  001BEC  26D9               	addwf	fsr2l,f,c
  6886  001BEE  5195               	movf	(dir_next@dj+1)& (0+255),w,b
  6887  001BF0  22DA               	addwfc	fsr2h,f,c
  6888  001BF2  2ADE               	incf	postinc2,f,c
  6889  001BF4  0E00               	movlw	0
  6890  001BF6  22DE               	addwfc	postinc2,f,c
  6891  001BF8  22DE               	addwfc	postinc2,f,c
  6892  001BFA  22DE               	addwfc	postinc2,f,c
  6893                           
  6894                           ;pff.c: 481: if (dj->clust == 0) {
  6895  001BFC  EE20 F008          	lfsr	2,8
  6896  001C00  5194               	movf	dir_next@dj& (0+255),w,b
  6897  001C02  26D9               	addwf	fsr2l,f,c
  6898  001C04  5195               	movf	(dir_next@dj+1)& (0+255),w,b
  6899  001C06  22DA               	addwfc	fsr2h,f,c
  6900  001C08  50DE               	movf	postinc2,w,c
  6901  001C0A  10DE               	iorwf	postinc2,w,c
  6902  001C0C  10DE               	iorwf	postinc2,w,c
  6903  001C0E  10DE               	iorwf	postinc2,w,c
  6904  001C10  A4D8               	btfss	status,2,c
  6905  001C12  D00E               	goto	l911
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;pff.c: 482: if (i >= fs->n_rootdir)
  6909  001C14  EE20 F004          	lfsr	2,4
  6910  001C18  519D               	movf	dir_next@fs& (0+255),w,b
  6911  001C1A  26D9               	addwf	fsr2l,f,c
  6912  001C1C  519E               	movf	(dir_next@fs+1)& (0+255),w,b
  6913  001C1E  22DA               	addwfc	fsr2h,f,c
  6914  001C20  50DE               	movf	postinc2,w,c
  6915  001C22  5DA3               	subwf	dir_next@i& (0+255),w,b
  6916  001C24  50DE               	movf	postinc2,w,c
  6917  001C26  59A4               	subwfb	(dir_next@i+1)& (0+255),w,b
  6918  001C28  A0D8               	btfss	status,0,c
  6919  001C2A  D082               	goto	l914
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;pff.c: 483: return FR_NO_FILE;
  6923  001C2C  0E03               	movlw	3
  6924                           
  6925                           ; BSR set to: 0
  6926  001C2E  0012               	return	
  6927  001C30                     l911:
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;pff.c: 485: else {
  6931                           ;pff.c: 486: if (((i / 16) & (fs->csize - 1)) == 0) {
  6932                           
  6933                           ; BSR set to: 0
  6934  001C30  C0A3  F096         	movff	dir_next@i,??_dir_next
  6935  001C34  C0A4  F097         	movff	dir_next@i+1,??_dir_next+1
  6936  001C38  0E04               	movlw	4
  6937  001C3A  6F98               	movwf	(??_dir_next+2)& (0+255),b
  6938  001C3C                     u8185:
  6939  001C3C  90D8               	bcf	status,0,c
  6940  001C3E  3397               	rrcf	(??_dir_next+1)& (0+255),f,b
  6941  001C40  3396               	rrcf	??_dir_next& (0+255),f,b
  6942  001C42  2F98               	decfsz	(??_dir_next+2)& (0+255),f,b
  6943  001C44  D7FB               	goto	u8185
  6944  001C46  0EFF               	movlw	255
  6945  001C48  6F99               	movwf	(??_dir_next+3)& (0+255),b
  6946  001C4A  0EFF               	movlw	255
  6947  001C4C  6F9A               	movwf	(??_dir_next+4)& (0+255),b
  6948  001C4E  EE20 F002          	lfsr	2,2
  6949  001C52  519D               	movf	dir_next@fs& (0+255),w,b
  6950  001C54  26D9               	addwf	fsr2l,f,c
  6951  001C56  519E               	movf	(dir_next@fs+1)& (0+255),w,b
  6952  001C58  22DA               	addwfc	fsr2h,f,c
  6953  001C5A  50DF               	movf	indf2,w,c
  6954  001C5C  6F9B               	movwf	(??_dir_next+5)& (0+255),b
  6955  001C5E  6B9C               	clrf	(??_dir_next+6)& (0+255),b
  6956  001C60  5199               	movf	(??_dir_next+3)& (0+255),w,b
  6957  001C62  279B               	addwf	(??_dir_next+5)& (0+255),f,b
  6958  001C64  519A               	movf	(??_dir_next+4)& (0+255),w,b
  6959  001C66  239C               	addwfc	(??_dir_next+6)& (0+255),f,b
  6960  001C68  5196               	movf	??_dir_next& (0+255),w,b
  6961  001C6A  179B               	andwf	(??_dir_next+5)& (0+255),f,b
  6962  001C6C  5197               	movf	(??_dir_next+1)& (0+255),w,b
  6963  001C6E  179C               	andwf	(??_dir_next+6)& (0+255),f,b
  6964  001C70  519B               	movf	(??_dir_next+5)& (0+255),w,b
  6965  001C72  119C               	iorwf	(??_dir_next+6)& (0+255),w,b
  6966  001C74  A4D8               	btfss	status,2,c
  6967  001C76  D05C               	goto	l914
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;pff.c: 487: clst = get_fat(dj->clust);
  6971  001C78  EE20 F008          	lfsr	2,8
  6972  001C7C  5194               	movf	dir_next@dj& (0+255),w,b
  6973  001C7E  26D9               	addwf	fsr2l,f,c
  6974  001C80  5195               	movf	(dir_next@dj+1)& (0+255),w,b
  6975  001C82  22DA               	addwfc	fsr2h,f,c
  6976  001C84  CFDE F06C          	movff	postinc2,get_fat@clst
  6977  001C88  CFDE F06D          	movff	postinc2,get_fat@clst+1
  6978  001C8C  CFDE F06E          	movff	postinc2,get_fat@clst+2
  6979  001C90  CFDE F06F          	movff	postinc2,get_fat@clst+3
  6980  001C94  EC8D  F005         	call	_get_fat	;wreg free
  6981  001C98  C06C  F09F         	movff	?_get_fat,dir_next@clst
  6982  001C9C  C06D  F0A0         	movff	?_get_fat+1,dir_next@clst+1
  6983  001CA0  C06E  F0A1         	movff	?_get_fat+2,dir_next@clst+2
  6984  001CA4  C06F  F0A2         	movff	?_get_fat+3,dir_next@clst+3
  6985                           
  6986                           ;pff.c: 488: if (clst <= 1) return FR_DISK_ERR;
  6987  001CA8  0100               	movlb	0	; () banked
  6988  001CAA  51A2               	movf	(dir_next@clst+3)& (0+255),w,b
  6989  001CAC  11A1               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6990  001CAE  11A0               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6991  001CB0  E106               	bnz	l7654
  6992  001CB2  0E02               	movlw	2
  6993  001CB4  5D9F               	subwf	dir_next@clst& (0+255),w,b
  6994  001CB6  B0D8               	btfsc	status,0,c
  6995  001CB8  D002               	goto	l915
  6996                           
  6997                           ; BSR set to: 0
  6998  001CBA  0E01               	movlw	1
  6999                           
  7000                           ; BSR set to: 0
  7001  001CBC  0012               	return	
  7002  001CBE                     l915:
  7003  001CBE                     l7654:
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;pff.c: 489: if (clst >= fs->n_fatent)
  7007  001CBE  EE20 F006          	lfsr	2,6
  7008  001CC2  519D               	movf	dir_next@fs& (0+255),w,b
  7009  001CC4  26D9               	addwf	fsr2l,f,c
  7010  001CC6  519E               	movf	(dir_next@fs+1)& (0+255),w,b
  7011  001CC8  22DA               	addwfc	fsr2h,f,c
  7012  001CCA  50DE               	movf	postinc2,w,c
  7013  001CCC  5D9F               	subwf	dir_next@clst& (0+255),w,b
  7014  001CCE  50DE               	movf	postinc2,w,c
  7015  001CD0  59A0               	subwfb	(dir_next@clst+1)& (0+255),w,b
  7016  001CD2  50DE               	movf	postinc2,w,c
  7017  001CD4  59A1               	subwfb	(dir_next@clst+2)& (0+255),w,b
  7018  001CD6  50DE               	movf	postinc2,w,c
  7019  001CD8  59A2               	subwfb	(dir_next@clst+3)& (0+255),w,b
  7020  001CDA  A0D8               	btfss	status,0,c
  7021  001CDC  D002               	goto	l916
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;pff.c: 490: return FR_NO_FILE;
  7025  001CDE  0E03               	movlw	3
  7026                           
  7027                           ; BSR set to: 0
  7028  001CE0  0012               	return	
  7029  001CE2                     l916:
  7030                           
  7031                           ; BSR set to: 0
  7032                           ;pff.c: 491: dj->clust = clst;
  7033                           
  7034                           ; BSR set to: 0
  7035  001CE2  EE20 F008          	lfsr	2,8
  7036  001CE6  5194               	movf	dir_next@dj& (0+255),w,b
  7037  001CE8  26D9               	addwf	fsr2l,f,c
  7038  001CEA  5195               	movf	(dir_next@dj+1)& (0+255),w,b
  7039  001CEC  22DA               	addwfc	fsr2h,f,c
  7040  001CEE  C09F  FFDE         	movff	dir_next@clst,postinc2
  7041  001CF2  C0A0  FFDE         	movff	dir_next@clst+1,postinc2
  7042  001CF6  C0A1  FFDE         	movff	dir_next@clst+2,postinc2
  7043  001CFA  C0A2  FFDE         	movff	dir_next@clst+3,postinc2
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;pff.c: 492: dj->sect = clust2sect(clst);
  7047  001CFE  C09F  F026         	movff	dir_next@clst,clust2sect@clst
  7048  001D02  C0A0  F027         	movff	dir_next@clst+1,clust2sect@clst+1
  7049  001D06  C0A1  F028         	movff	dir_next@clst+2,clust2sect@clst+2
  7050  001D0A  C0A2  F029         	movff	dir_next@clst+3,clust2sect@clst+3
  7051  001D0E  EC4B  F014         	call	_clust2sect	;wreg free
  7052  001D12  0100               	movlb	0	; () banked
  7053  001D14  EE20 F00C          	lfsr	2,12
  7054  001D18  5194               	movf	dir_next@dj& (0+255),w,b
  7055  001D1A  26D9               	addwf	fsr2l,f,c
  7056  001D1C  5195               	movf	(dir_next@dj+1)& (0+255),w,b
  7057  001D1E  22DA               	addwfc	fsr2h,f,c
  7058  001D20  C026  FFDE         	movff	?_clust2sect,postinc2
  7059  001D24  C027  FFDE         	movff	?_clust2sect+1,postinc2
  7060  001D28  C028  FFDE         	movff	?_clust2sect+2,postinc2
  7061  001D2C  C029  FFDE         	movff	?_clust2sect+3,postinc2
  7062  001D30                     l914:
  7063                           
  7064                           ; BSR set to: 0
  7065                           ;pff.c: 493: }
  7066                           ;pff.c: 494: }
  7067                           ;pff.c: 495: }
  7068                           ;pff.c: 497: dj->index = i;
  7069                           
  7070                           ; BSR set to: 0
  7071                           
  7072                           ; BSR set to: 0
  7073                           
  7074                           ; BSR set to: 0
  7075  001D30  C094  FFD9         	movff	dir_next@dj,fsr2l
  7076  001D34  C095  FFDA         	movff	dir_next@dj+1,fsr2h
  7077  001D38  C0A3  FFDE         	movff	dir_next@i,postinc2
  7078  001D3C  C0A4  FFDD         	movff	dir_next@i+1,postdec2
  7079                           
  7080                           ; BSR set to: 0
  7081                           ;pff.c: 499: return FR_OK;
  7082  001D40  0E00               	movlw	0
  7083  001D42  0012               	return	
  7084  001D44                     __end_of_dir_next:
  7085                           	opt stack 0
  7086                           tosu	equ	0xFFF
  7087                           tosh	equ	0xFFE
  7088                           tosl	equ	0xFFD
  7089                           pclath	equ	0xFFA
  7090                           tblptru	equ	0xFF8
  7091                           tblptrh	equ	0xFF7
  7092                           tblptrl	equ	0xFF6
  7093                           tablat	equ	0xFF5
  7094                           prodh	equ	0xFF4
  7095                           prodl	equ	0xFF3
  7096                           intcon	equ	0xFF2
  7097                           intcon2	equ	0xFF1
  7098                           intcon3	equ	0xFF0
  7099                           postinc0	equ	0xFEE
  7100                           wreg	equ	0xFE8
  7101                           indf1	equ	0xFE7
  7102                           postinc1	equ	0xFE6
  7103                           postdec1	equ	0xFE5
  7104                           fsr1h	equ	0xFE2
  7105                           fsr1l	equ	0xFE1
  7106                           indf2	equ	0xFDF
  7107                           postinc2	equ	0xFDE
  7108                           postdec2	equ	0xFDD
  7109                           plusw2	equ	0xFDB
  7110                           fsr2h	equ	0xFDA
  7111                           fsr2l	equ	0xFD9
  7112                           status	equ	0xFD8
  7113                           
  7114 ;; *************** function _get_fat *****************
  7115 ;; Defined at:
  7116 ;;		line 350 in file "bibliotecas/pff.c"
  7117 ;; Parameters:    Size  Location     Type
  7118 ;;  clst            4   12[BANK0 ] unsigned long 
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;  bc              2   48[BANK0 ] unsigned int 
  7121 ;;  ofs             2   42[BANK0 ] unsigned int 
  7122 ;;  wc              2   40[BANK0 ] unsigned int 
  7123 ;;  buf             4   44[BANK0 ] unsigned char [4]
  7124 ;;  fs              2   50[BANK0 ] PTR struct .
  7125 ;;		 -> NULL(0), SDCard@fs(42), 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  4   12[BANK0 ] unsigned long 
  7128 ;; Registers used:
  7129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7135 ;;      Params:         0       4       0       0       0       0       0       0       0
  7136 ;;      Locals:         0      14       0       0       0       0       0       0       0
  7137 ;;      Temps:          0      22       0       0       0       0       0       0       0
  7138 ;;      Totals:         0      40       0       0       0       0       0       0       0
  7139 ;;Total ram usage:       40 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    6
  7142 ;; This function calls:
  7143 ;;		_disk_readp
  7144 ;; This function is called by:
  7145 ;;		_dir_next
  7146 ;;		_pf_read
  7147 ;;		_pf_write
  7148 ;;		_pf_lseek
  7149 ;; This function uses a non-reentrant model
  7150 ;;
  7151                           
  7152                           	psect	text26
  7153  000B1A                     __ptext26:
  7154                           	opt stack 0
  7155  000B1A                     _get_fat:
  7156                           	opt stack 21
  7157                           
  7158                           ;pff.c: 354: BYTE buf[4];
  7159                           ;pff.c: 355: FATFS *fs = FatFs;
  7160                           
  7161                           ; BSR set to: 0
  7162                           ;incstack = 0
  7163  000B1A  C030  F092         	movff	_FatFs,get_fat@fs
  7164  000B1E  C031  F093         	movff	_FatFs+1,get_fat@fs+1
  7165                           
  7166                           ;pff.c: 357: if (clst < 2 || clst >= fs->n_fatent)
  7167  000B22  0100               	movlb	0	; () banked
  7168  000B24  516F               	movf	(get_fat@clst+3)& (0+255),w,b
  7169  000B26  116E               	iorwf	(get_fat@clst+2)& (0+255),w,b
  7170  000B28  116D               	iorwf	(get_fat@clst+1)& (0+255),w,b
  7171  000B2A  E104               	bnz	u7920
  7172  000B2C  0E02               	movlw	2
  7173  000B2E  5D6C               	subwf	get_fat@clst& (0+255),w,b
  7174  000B30  A0D8               	btfss	status,0,c
  7175  000B32  D010               	goto	u7930
  7176  000B34                     u7920:
  7177                           
  7178                           ; BSR set to: 0
  7179  000B34  EE20 F006          	lfsr	2,6
  7180  000B38  5192               	movf	get_fat@fs& (0+255),w,b
  7181  000B3A  26D9               	addwf	fsr2l,f,c
  7182  000B3C  5193               	movf	(get_fat@fs+1)& (0+255),w,b
  7183  000B3E  22DA               	addwfc	fsr2h,f,c
  7184  000B40  50DE               	movf	postinc2,w,c
  7185  000B42  5D6C               	subwf	get_fat@clst& (0+255),w,b
  7186  000B44  50DE               	movf	postinc2,w,c
  7187  000B46  596D               	subwfb	(get_fat@clst+1)& (0+255),w,b
  7188  000B48  50DE               	movf	postinc2,w,c
  7189  000B4A  596E               	subwfb	(get_fat@clst+2)& (0+255),w,b
  7190  000B4C  50DE               	movf	postinc2,w,c
  7191  000B4E  596F               	subwfb	(get_fat@clst+3)& (0+255),w,b
  7192  000B50  A0D8               	btfss	status,0,c
  7193  000B52  D1BD               	goto	l865
  7194  000B54                     u7930:
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;pff.c: 358: return 1;
  7198                           
  7199                           ; BSR set to: 0
  7200  000B54  0E01               	movlw	1
  7201  000B56  6F6C               	movwf	?_get_fat& (0+255),b
  7202  000B58  0E00               	movlw	0
  7203  000B5A  6F6D               	movwf	(?_get_fat+1)& (0+255),b
  7204  000B5C  0E00               	movlw	0
  7205  000B5E  6F6E               	movwf	(?_get_fat+2)& (0+255),b
  7206  000B60  0E00               	movlw	0
  7207  000B62  6F6F               	movwf	(?_get_fat+3)& (0+255),b
  7208                           
  7209                           ; BSR set to: 0
  7210  000B64  0012               	return	
  7211  000B66                     l866:
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;pff.c: 363: UINT wc, bc, ofs;
  7215                           ;pff.c: 365: bc = (UINT)clst; bc += bc / 2;
  7216  000B66  C06C  F090         	movff	get_fat@clst,get_fat@bc
  7217  000B6A  C06D  F091         	movff	get_fat@clst+1,get_fat@bc+1
  7218                           
  7219                           ; BSR set to: 0
  7220  000B6E  90D8               	bcf	status,0,c
  7221  000B70  3191               	rrcf	(get_fat@bc+1)& (0+255),w,b
  7222  000B72  6F71               	movwf	(??_get_fat+1)& (0+255),b
  7223  000B74  3190               	rrcf	get_fat@bc& (0+255),w,b
  7224  000B76  6F70               	movwf	??_get_fat& (0+255),b
  7225  000B78  5170               	movf	??_get_fat& (0+255),w,b
  7226  000B7A  2790               	addwf	get_fat@bc& (0+255),f,b
  7227  000B7C  5171               	movf	(??_get_fat+1)& (0+255),w,b
  7228  000B7E  2391               	addwfc	(get_fat@bc+1)& (0+255),f,b
  7229                           
  7230                           ;pff.c: 366: ofs = bc % 512; bc /= 512;
  7231  000B80  0EFF               	movlw	255
  7232  000B82  1590               	andwf	get_fat@bc& (0+255),w,b
  7233  000B84  6F8A               	movwf	get_fat@ofs& (0+255),b
  7234  000B86  0E01               	movlw	1
  7235  000B88  1591               	andwf	(get_fat@bc+1)& (0+255),w,b
  7236  000B8A  6F8B               	movwf	(get_fat@ofs+1)& (0+255),b
  7237  000B8C  0E09               	movlw	9
  7238  000B8E  6F70               	movwf	??_get_fat& (0+255),b
  7239  000B90                     u7945:
  7240  000B90  90D8               	bcf	status,0,c
  7241  000B92  3391               	rrcf	(get_fat@bc+1)& (0+255),f,b
  7242  000B94  3390               	rrcf	get_fat@bc& (0+255),f,b
  7243  000B96  2F70               	decfsz	??_get_fat& (0+255),f,b
  7244  000B98  D7FB               	goto	u7945
  7245                           
  7246                           ;pff.c: 367: if (ofs != 511) {
  7247  000B9A  298A               	incf	get_fat@ofs& (0+255),w,b
  7248  000B9C  E103               	bnz	u7950
  7249  000B9E  058B               	decf	(get_fat@ofs+1)& (0+255),w,b
  7250  000BA0  B4D8               	btfsc	status,2,c
  7251  000BA2  D02C               	goto	l867
  7252  000BA4                     u7950:
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;pff.c: 368: if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
  7256  000BA4  0E8C               	movlw	low get_fat@buf
  7257  000BA6  6E23               	movwf	disk_readp@rd,c
  7258  000BA8  0E00               	movlw	high get_fat@buf
  7259  000BAA  6E24               	movwf	disk_readp@rd+1,c
  7260  000BAC  EE20 F00A          	lfsr	2,10
  7261  000BB0  5192               	movf	get_fat@fs& (0+255),w,b
  7262  000BB2  26D9               	addwf	fsr2l,f,c
  7263  000BB4  5193               	movf	(get_fat@fs+1)& (0+255),w,b
  7264  000BB6  22DA               	addwfc	fsr2h,f,c
  7265  000BB8  CFDE F070          	movff	postinc2,??_get_fat
  7266  000BBC  CFDE F071          	movff	postinc2,??_get_fat+1
  7267  000BC0  CFDE F072          	movff	postinc2,??_get_fat+2
  7268  000BC4  CFDE F073          	movff	postinc2,??_get_fat+3
  7269  000BC8  5190               	movf	get_fat@bc& (0+255),w,b
  7270  000BCA  2570               	addwf	??_get_fat& (0+255),w,b
  7271  000BCC  6E25               	movwf	disk_readp@sector,c
  7272  000BCE  5191               	movf	(get_fat@bc+1)& (0+255),w,b
  7273  000BD0  2171               	addwfc	(??_get_fat+1)& (0+255),w,b
  7274  000BD2  6E26               	movwf	disk_readp@sector+1,c
  7275  000BD4  0E00               	movlw	0
  7276  000BD6  2172               	addwfc	(??_get_fat+2)& (0+255),w,b
  7277  000BD8  6E27               	movwf	disk_readp@sector+2,c
  7278  000BDA  0E00               	movlw	0
  7279  000BDC  2173               	addwfc	(??_get_fat+3)& (0+255),w,b
  7280  000BDE  6E28               	movwf	disk_readp@sector+3,c
  7281  000BE0  C08A  F029         	movff	get_fat@ofs,disk_readp@offset
  7282  000BE4  C08B  F02A         	movff	get_fat@ofs+1,disk_readp@offset+1
  7283  000BE8  0E00               	movlw	0
  7284  000BEA  6E2C               	movwf	disk_readp@count+1,c
  7285  000BEC  0E02               	movlw	2
  7286  000BEE  6E2B               	movwf	disk_readp@count,c
  7287  000BF0  EC5D  F009         	call	_disk_readp	;wreg free
  7288  000BF4  0900               	iorlw	0
  7289  000BF6  A4D8               	btfss	status,2,c
  7290  000BF8  D178               	goto	l869
  7291  000BFA  D061               	goto	l872
  7292  000BFC                     l867:
  7293                           
  7294                           ;pff.c: 370: if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
  7295  000BFC  0E8C               	movlw	low get_fat@buf
  7296  000BFE  6E23               	movwf	disk_readp@rd,c
  7297  000C00  0E00               	movlw	high get_fat@buf
  7298  000C02  6E24               	movwf	disk_readp@rd+1,c
  7299  000C04  0100               	movlb	0	; () banked
  7300  000C06  EE20 F00A          	lfsr	2,10
  7301  000C0A  5192               	movf	get_fat@fs& (0+255),w,b
  7302  000C0C  26D9               	addwf	fsr2l,f,c
  7303  000C0E  5193               	movf	(get_fat@fs+1)& (0+255),w,b
  7304  000C10  22DA               	addwfc	fsr2h,f,c
  7305  000C12  CFDE F070          	movff	postinc2,??_get_fat
  7306  000C16  CFDE F071          	movff	postinc2,??_get_fat+1
  7307  000C1A  CFDE F072          	movff	postinc2,??_get_fat+2
  7308  000C1E  CFDE F073          	movff	postinc2,??_get_fat+3
  7309  000C22  5190               	movf	get_fat@bc& (0+255),w,b
  7310  000C24  2570               	addwf	??_get_fat& (0+255),w,b
  7311  000C26  6E25               	movwf	disk_readp@sector,c
  7312  000C28  5191               	movf	(get_fat@bc+1)& (0+255),w,b
  7313  000C2A  2171               	addwfc	(??_get_fat+1)& (0+255),w,b
  7314  000C2C  6E26               	movwf	disk_readp@sector+1,c
  7315  000C2E  0E00               	movlw	0
  7316  000C30  2172               	addwfc	(??_get_fat+2)& (0+255),w,b
  7317  000C32  6E27               	movwf	disk_readp@sector+2,c
  7318  000C34  0E00               	movlw	0
  7319  000C36  2173               	addwfc	(??_get_fat+3)& (0+255),w,b
  7320  000C38  6E28               	movwf	disk_readp@sector+3,c
  7321  000C3A  0E01               	movlw	1
  7322  000C3C  6E2A               	movwf	disk_readp@offset+1,c
  7323  000C3E  6829               	setf	disk_readp@offset,c
  7324  000C40  0E00               	movlw	0
  7325  000C42  6E2C               	movwf	disk_readp@count+1,c
  7326  000C44  0E01               	movlw	1
  7327  000C46  6E2B               	movwf	disk_readp@count,c
  7328  000C48  EC5D  F009         	call	_disk_readp	;wreg free
  7329  000C4C  0900               	iorlw	0
  7330  000C4E  A4D8               	btfss	status,2,c
  7331  000C50  D14C               	goto	l869
  7332                           
  7333                           ;pff.c: 371: if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
  7334  000C52  0E8D               	movlw	low (get_fat@buf+1)
  7335  000C54  6E23               	movwf	disk_readp@rd,c
  7336  000C56  0E00               	movlw	high (get_fat@buf+1)
  7337  000C58  6E24               	movwf	disk_readp@rd+1,c
  7338  000C5A  0100               	movlb	0	; () banked
  7339  000C5C  EE20 F00A          	lfsr	2,10
  7340  000C60  5192               	movf	get_fat@fs& (0+255),w,b
  7341  000C62  26D9               	addwf	fsr2l,f,c
  7342  000C64  5193               	movf	(get_fat@fs+1)& (0+255),w,b
  7343  000C66  22DA               	addwfc	fsr2h,f,c
  7344  000C68  CFDE F070          	movff	postinc2,??_get_fat
  7345  000C6C  CFDE F071          	movff	postinc2,??_get_fat+1
  7346  000C70  CFDE F072          	movff	postinc2,??_get_fat+2
  7347  000C74  CFDE F073          	movff	postinc2,??_get_fat+3
  7348  000C78  5190               	movf	get_fat@bc& (0+255),w,b
  7349  000C7A  2570               	addwf	??_get_fat& (0+255),w,b
  7350  000C7C  6F74               	movwf	(??_get_fat+4)& (0+255),b
  7351  000C7E  5191               	movf	(get_fat@bc+1)& (0+255),w,b
  7352  000C80  2171               	addwfc	(??_get_fat+1)& (0+255),w,b
  7353  000C82  6F75               	movwf	(??_get_fat+5)& (0+255),b
  7354  000C84  0E00               	movlw	0
  7355  000C86  2172               	addwfc	(??_get_fat+2)& (0+255),w,b
  7356  000C88  6F76               	movwf	(??_get_fat+6)& (0+255),b
  7357  000C8A  0E00               	movlw	0
  7358  000C8C  2173               	addwfc	(??_get_fat+3)& (0+255),w,b
  7359  000C8E  6F77               	movwf	(??_get_fat+7)& (0+255),b
  7360  000C90  0E01               	movlw	1
  7361  000C92  2574               	addwf	(??_get_fat+4)& (0+255),w,b
  7362  000C94  6E25               	movwf	disk_readp@sector,c
  7363  000C96  0E00               	movlw	0
  7364  000C98  2175               	addwfc	(??_get_fat+5)& (0+255),w,b
  7365  000C9A  6E26               	movwf	disk_readp@sector+1,c
  7366  000C9C  0E00               	movlw	0
  7367  000C9E  2176               	addwfc	(??_get_fat+6)& (0+255),w,b
  7368  000CA0  6E27               	movwf	disk_readp@sector+2,c
  7369  000CA2  0E00               	movlw	0
  7370  000CA4  2177               	addwfc	(??_get_fat+7)& (0+255),w,b
  7371  000CA6  6E28               	movwf	disk_readp@sector+3,c
  7372  000CA8  0E00               	movlw	0
  7373  000CAA  6E2A               	movwf	disk_readp@offset+1,c
  7374  000CAC  0E00               	movlw	0
  7375  000CAE  6E29               	movwf	disk_readp@offset,c
  7376  000CB0  0E00               	movlw	0
  7377  000CB2  6E2C               	movwf	disk_readp@count+1,c
  7378  000CB4  0E01               	movlw	1
  7379  000CB6  6E2B               	movwf	disk_readp@count,c
  7380  000CB8  EC5D  F009         	call	_disk_readp	;wreg free
  7381  000CBC  D79B               	goto	L1
  7382  000CBE                     l872:
  7383                           
  7384                           ;pff.c: 372: }
  7385                           ;pff.c: 373: wc = (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  7386  000CBE  0100               	movlb	0	; () banked
  7387  000CC0  518D               	movf	(get_fat@buf+1)& (0+255),w,b
  7388  000CC2  6F70               	movwf	??_get_fat& (0+255),b
  7389  000CC4  518C               	movf	get_fat@buf& (0+255),w,b
  7390  000CC6  6F88               	movwf	get_fat@wc& (0+255),b
  7391  000CC8  C070  F089         	movff	??_get_fat,get_fat@wc+1
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;pff.c: 374: return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  7395  000CCC  B16C               	btfsc	get_fat@clst& (0+255),0,b
  7396  000CCE  D007               	goto	l874
  7397                           
  7398                           ; BSR set to: 0
  7399  000CD0  0EFF               	movlw	255
  7400  000CD2  1588               	andwf	get_fat@wc& (0+255),w,b
  7401  000CD4  6F86               	movwf	_get_fat$1915& (0+255),b
  7402  000CD6  0E0F               	movlw	15
  7403  000CD8  1589               	andwf	(get_fat@wc+1)& (0+255),w,b
  7404  000CDA  6F87               	movwf	(_get_fat$1915+1)& (0+255),b
  7405  000CDC  D00F               	goto	l876
  7406  000CDE                     l874:
  7407                           
  7408                           ; BSR set to: 0
  7409                           
  7410                           ; BSR set to: 0
  7411  000CDE  C088  F070         	movff	get_fat@wc,??_get_fat
  7412  000CE2  C089  F071         	movff	get_fat@wc+1,??_get_fat+1
  7413  000CE6  0E04               	movlw	4
  7414  000CE8  6F72               	movwf	(??_get_fat+2)& (0+255),b
  7415  000CEA                     u8005:
  7416  000CEA  90D8               	bcf	status,0,c
  7417  000CEC  3371               	rrcf	(??_get_fat+1)& (0+255),f,b
  7418  000CEE  3370               	rrcf	??_get_fat& (0+255),f,b
  7419  000CF0  2F72               	decfsz	(??_get_fat+2)& (0+255),f,b
  7420  000CF2  D7FB               	goto	u8005
  7421  000CF4  C070  F086         	movff	??_get_fat,_get_fat$1915
  7422  000CF8  C071  F087         	movff	??_get_fat+1,_get_fat$1915+1
  7423  000CFC                     l876:
  7424                           
  7425                           ; BSR set to: 0
  7426                           
  7427                           ; BSR set to: 0
  7428  000CFC  C086  F06C         	movff	_get_fat$1915,?_get_fat
  7429  000D00  C087  F06D         	movff	_get_fat$1915+1,?_get_fat+1
  7430  000D04  6B6E               	clrf	(?_get_fat+2)& (0+255),b
  7431  000D06  6B6F               	clrf	(?_get_fat+3)& (0+255),b
  7432                           
  7433                           ; BSR set to: 0
  7434  000D08  0012               	return	
  7435  000D0A                     
  7436                           ; BSR set to: 0
  7437                           ;pff.c: 379: if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) b
      +                          reak;
  7438                           
  7439                           ; BSR set to: 0
  7440  000D0A  0E8C               	movlw	low get_fat@buf
  7441  000D0C  6E23               	movwf	disk_readp@rd,c
  7442  000D0E  0E00               	movlw	high get_fat@buf
  7443  000D10  6E24               	movwf	disk_readp@rd+1,c
  7444  000D12  EE20 F00A          	lfsr	2,10
  7445  000D16  5192               	movf	get_fat@fs& (0+255),w,b
  7446  000D18  26D9               	addwf	fsr2l,f,c
  7447  000D1A  5193               	movf	(get_fat@fs+1)& (0+255),w,b
  7448  000D1C  22DA               	addwfc	fsr2h,f,c
  7449  000D1E  CFDE F070          	movff	postinc2,??_get_fat
  7450  000D22  CFDE F071          	movff	postinc2,??_get_fat+1
  7451  000D26  CFDE F072          	movff	postinc2,??_get_fat+2
  7452  000D2A  CFDE F073          	movff	postinc2,??_get_fat+3
  7453  000D2E  C06C  F074         	movff	get_fat@clst,??_get_fat+4
  7454  000D32  C06D  F075         	movff	get_fat@clst+1,??_get_fat+5
  7455  000D36  C06E  F076         	movff	get_fat@clst+2,??_get_fat+6
  7456  000D3A  C06F  F077         	movff	get_fat@clst+3,??_get_fat+7
  7457  000D3E  C075  F074         	movff	??_get_fat+5,??_get_fat+4
  7458  000D42  C076  F075         	movff	??_get_fat+6,??_get_fat+5
  7459  000D46  C077  F076         	movff	??_get_fat+7,??_get_fat+6
  7460  000D4A  6B77               	clrf	(??_get_fat+7)& (0+255),b
  7461  000D4C  5170               	movf	??_get_fat& (0+255),w,b
  7462  000D4E  2574               	addwf	(??_get_fat+4)& (0+255),w,b
  7463  000D50  6E25               	movwf	disk_readp@sector,c
  7464  000D52  5171               	movf	(??_get_fat+1)& (0+255),w,b
  7465  000D54  2175               	addwfc	(??_get_fat+5)& (0+255),w,b
  7466  000D56  6E26               	movwf	disk_readp@sector+1,c
  7467  000D58  5172               	movf	(??_get_fat+2)& (0+255),w,b
  7468  000D5A  2176               	addwfc	(??_get_fat+6)& (0+255),w,b
  7469  000D5C  6E27               	movwf	disk_readp@sector+2,c
  7470  000D5E  5173               	movf	(??_get_fat+3)& (0+255),w,b
  7471  000D60  2177               	addwfc	(??_get_fat+7)& (0+255),w,b
  7472  000D62  6E28               	movwf	disk_readp@sector+3,c
  7473  000D64  0EFF               	movlw	255
  7474  000D66  156C               	andwf	get_fat@clst& (0+255),w,b
  7475  000D68  6F78               	movwf	(??_get_fat+8)& (0+255),b
  7476  000D6A  0E00               	movlw	0
  7477  000D6C  156D               	andwf	(get_fat@clst+1)& (0+255),w,b
  7478  000D6E  6F79               	movwf	(??_get_fat+9)& (0+255),b
  7479  000D70  90D8               	bcf	status,0,c
  7480  000D72  3578               	rlcf	(??_get_fat+8)& (0+255),w,b
  7481  000D74  6E29               	movwf	disk_readp@offset,c
  7482  000D76  3579               	rlcf	(??_get_fat+9)& (0+255),w,b
  7483  000D78  6E2A               	movwf	disk_readp@offset+1,c
  7484  000D7A  0E00               	movlw	0
  7485  000D7C  6E2C               	movwf	disk_readp@count+1,c
  7486  000D7E  0E02               	movlw	2
  7487  000D80  6E2B               	movwf	disk_readp@count,c
  7488  000D82  EC5D  F009         	call	_disk_readp	;wreg free
  7489  000D86  0900               	iorlw	0
  7490  000D88  A4D8               	btfss	status,2,c
  7491  000D8A  D0AF               	goto	l869
  7492                           
  7493                           ;pff.c: 380: return (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  7494  000D8C  0100               	movlb	0	; () banked
  7495  000D8E  518C               	movf	get_fat@buf& (0+255),w,b
  7496  000D90  C08D  F070         	movff	get_fat@buf+1,??_get_fat
  7497  000D94  6B71               	clrf	(??_get_fat+1)& (0+255),b
  7498  000D96  C070  F071         	movff	??_get_fat,??_get_fat+1
  7499  000D9A  6B70               	clrf	??_get_fat& (0+255),b
  7500  000D9C  1370               	iorwf	??_get_fat& (0+255),f,b
  7501  000D9E  0E00               	movlw	0
  7502  000DA0  1371               	iorwf	(??_get_fat+1)& (0+255),f,b
  7503  000DA2  C070  F06C         	movff	??_get_fat,?_get_fat
  7504  000DA6  C071  F06D         	movff	??_get_fat+1,?_get_fat+1
  7505  000DAA  6B6E               	clrf	(?_get_fat+2)& (0+255),b
  7506  000DAC  6B6F               	clrf	(?_get_fat+3)& (0+255),b
  7507                           
  7508                           ; BSR set to: 0
  7509  000DAE  0012               	return	
  7510  000DB0                     
  7511                           ; BSR set to: 0
  7512                           ;pff.c: 384: if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) b
      +                          reak;
  7513                           
  7514                           ; BSR set to: 0
  7515  000DB0  0E8C               	movlw	low get_fat@buf
  7516  000DB2  6E23               	movwf	disk_readp@rd,c
  7517  000DB4  0E00               	movlw	high get_fat@buf
  7518  000DB6  6E24               	movwf	disk_readp@rd+1,c
  7519  000DB8  EE20 F00A          	lfsr	2,10
  7520  000DBC  5192               	movf	get_fat@fs& (0+255),w,b
  7521  000DBE  26D9               	addwf	fsr2l,f,c
  7522  000DC0  5193               	movf	(get_fat@fs+1)& (0+255),w,b
  7523  000DC2  22DA               	addwfc	fsr2h,f,c
  7524  000DC4  CFDE F070          	movff	postinc2,??_get_fat
  7525  000DC8  CFDE F071          	movff	postinc2,??_get_fat+1
  7526  000DCC  CFDE F072          	movff	postinc2,??_get_fat+2
  7527  000DD0  CFDE F073          	movff	postinc2,??_get_fat+3
  7528  000DD4  C06C  F074         	movff	get_fat@clst,??_get_fat+4
  7529  000DD8  C06D  F075         	movff	get_fat@clst+1,??_get_fat+5
  7530  000DDC  C06E  F076         	movff	get_fat@clst+2,??_get_fat+6
  7531  000DE0  C06F  F077         	movff	get_fat@clst+3,??_get_fat+7
  7532  000DE4  0E08               	movlw	8
  7533  000DE6  D005               	goto	u8020
  7534  000DE8                     u8025:
  7535  000DE8  90D8               	bcf	status,0,c
  7536  000DEA  3377               	rrcf	(??_get_fat+7)& (0+255),f,b
  7537  000DEC  3376               	rrcf	(??_get_fat+6)& (0+255),f,b
  7538  000DEE  3375               	rrcf	(??_get_fat+5)& (0+255),f,b
  7539  000DF0  3374               	rrcf	(??_get_fat+4)& (0+255),f,b
  7540  000DF2                     u8020:
  7541  000DF2  2EE8               	decfsz	wreg,f,c
  7542  000DF4  D7F9               	goto	u8025
  7543  000DF6  5170               	movf	??_get_fat& (0+255),w,b
  7544  000DF8  2574               	addwf	(??_get_fat+4)& (0+255),w,b
  7545  000DFA  6E25               	movwf	disk_readp@sector,c
  7546  000DFC  5171               	movf	(??_get_fat+1)& (0+255),w,b
  7547  000DFE  2175               	addwfc	(??_get_fat+5)& (0+255),w,b
  7548  000E00  6E26               	movwf	disk_readp@sector+1,c
  7549  000E02  5172               	movf	(??_get_fat+2)& (0+255),w,b
  7550  000E04  2176               	addwfc	(??_get_fat+6)& (0+255),w,b
  7551  000E06  6E27               	movwf	disk_readp@sector+2,c
  7552  000E08  5173               	movf	(??_get_fat+3)& (0+255),w,b
  7553  000E0A  2177               	addwfc	(??_get_fat+7)& (0+255),w,b
  7554  000E0C  6E28               	movwf	disk_readp@sector+3,c
  7555  000E0E  0E7F               	movlw	127
  7556  000E10  156C               	andwf	get_fat@clst& (0+255),w,b
  7557  000E12  6F78               	movwf	(??_get_fat+8)& (0+255),b
  7558  000E14  0E00               	movlw	0
  7559  000E16  156D               	andwf	(get_fat@clst+1)& (0+255),w,b
  7560  000E18  6F79               	movwf	(??_get_fat+9)& (0+255),b
  7561  000E1A  90D8               	bcf	status,0,c
  7562  000E1C  3778               	rlcf	(??_get_fat+8)& (0+255),f,b
  7563  000E1E  3779               	rlcf	(??_get_fat+9)& (0+255),f,b
  7564  000E20  90D8               	bcf	status,0,c
  7565  000E22  3778               	rlcf	(??_get_fat+8)& (0+255),f,b
  7566  000E24  3779               	rlcf	(??_get_fat+9)& (0+255),f,b
  7567  000E26  C078  F029         	movff	??_get_fat+8,disk_readp@offset
  7568  000E2A  C079  F02A         	movff	??_get_fat+9,disk_readp@offset+1
  7569  000E2E  0E00               	movlw	0
  7570  000E30  6E2C               	movwf	disk_readp@count+1,c
  7571  000E32  0E04               	movlw	4
  7572  000E34  6E2B               	movwf	disk_readp@count,c
  7573  000E36  EC5D  F009         	call	_disk_readp	;wreg free
  7574  000E3A  0900               	iorlw	0
  7575  000E3C  A4D8               	btfss	status,2,c
  7576  000E3E  D055               	goto	l869
  7577                           
  7578                           ;pff.c: 385: return (DWORD)(((DWORD)*((BYTE*)(buf)+3)<<24)|((DWORD)*((BYTE*)(buf)+2)<<16
      +                          )|((WORD)*((BYTE*)(buf)+1)<<8)|*(BYTE*)(buf)) & 0x0FFFFFFF;
  7579  000E40  0100               	movlb	0	; () banked
  7580  000E42  518D               	movf	(get_fat@buf+1)& (0+255),w,b
  7581  000E44  6F71               	movwf	(??_get_fat+1)& (0+255),b
  7582  000E46  6B70               	clrf	??_get_fat& (0+255),b
  7583  000E48  C08E  F072         	movff	get_fat@buf+2,??_get_fat+2
  7584  000E4C  6B73               	clrf	(??_get_fat+3)& (0+255),b
  7585  000E4E  6B74               	clrf	(??_get_fat+4)& (0+255),b
  7586  000E50  6B75               	clrf	(??_get_fat+5)& (0+255),b
  7587  000E52  C073  F075         	movff	??_get_fat+3,??_get_fat+5
  7588  000E56  C072  F074         	movff	??_get_fat+2,??_get_fat+4
  7589  000E5A  6B73               	clrf	(??_get_fat+3)& (0+255),b
  7590  000E5C  6B72               	clrf	(??_get_fat+2)& (0+255),b
  7591  000E5E  C08F  F076         	movff	get_fat@buf+3,??_get_fat+6
  7592  000E62  6B77               	clrf	(??_get_fat+7)& (0+255),b
  7593  000E64  6B78               	clrf	(??_get_fat+8)& (0+255),b
  7594  000E66  6B79               	clrf	(??_get_fat+9)& (0+255),b
  7595  000E68  C076  F079         	movff	??_get_fat+6,??_get_fat+9
  7596  000E6C  6B78               	clrf	(??_get_fat+8)& (0+255),b
  7597  000E6E  6B77               	clrf	(??_get_fat+7)& (0+255),b
  7598  000E70  6B76               	clrf	(??_get_fat+6)& (0+255),b
  7599  000E72  5172               	movf	(??_get_fat+2)& (0+255),w,b
  7600  000E74  1176               	iorwf	(??_get_fat+6)& (0+255),w,b
  7601  000E76  6F7A               	movwf	(??_get_fat+10)& (0+255),b
  7602  000E78  5173               	movf	(??_get_fat+3)& (0+255),w,b
  7603  000E7A  1177               	iorwf	(??_get_fat+7)& (0+255),w,b
  7604  000E7C  6F7B               	movwf	(??_get_fat+11)& (0+255),b
  7605  000E7E  5174               	movf	(??_get_fat+4)& (0+255),w,b
  7606  000E80  1178               	iorwf	(??_get_fat+8)& (0+255),w,b
  7607  000E82  6F7C               	movwf	(??_get_fat+12)& (0+255),b
  7608  000E84  5175               	movf	(??_get_fat+5)& (0+255),w,b
  7609  000E86  1179               	iorwf	(??_get_fat+9)& (0+255),w,b
  7610  000E88  6F7D               	movwf	(??_get_fat+13)& (0+255),b
  7611  000E8A  5170               	movf	??_get_fat& (0+255),w,b
  7612  000E8C  117A               	iorwf	(??_get_fat+10)& (0+255),w,b
  7613  000E8E  6F7E               	movwf	(??_get_fat+14)& (0+255),b
  7614  000E90  5171               	movf	(??_get_fat+1)& (0+255),w,b
  7615  000E92  117B               	iorwf	(??_get_fat+11)& (0+255),w,b
  7616  000E94  6F7F               	movwf	(??_get_fat+15)& (0+255),b
  7617  000E96  0E00               	movlw	0
  7618  000E98  117C               	iorwf	(??_get_fat+12)& (0+255),w,b
  7619  000E9A  6F80               	movwf	(??_get_fat+16)& (0+255),b
  7620  000E9C  0E00               	movlw	0
  7621  000E9E  117D               	iorwf	(??_get_fat+13)& (0+255),w,b
  7622  000EA0  6F81               	movwf	(??_get_fat+17)& (0+255),b
  7623  000EA2  518C               	movf	get_fat@buf& (0+255),w,b
  7624  000EA4  117E               	iorwf	(??_get_fat+14)& (0+255),w,b
  7625  000EA6  6F82               	movwf	(??_get_fat+18)& (0+255),b
  7626  000EA8  517F               	movf	(??_get_fat+15)& (0+255),w,b
  7627  000EAA  6F83               	movwf	(??_get_fat+19)& (0+255),b
  7628  000EAC  5180               	movf	(??_get_fat+16)& (0+255),w,b
  7629  000EAE  6F84               	movwf	(??_get_fat+20)& (0+255),b
  7630  000EB0  5181               	movf	(??_get_fat+17)& (0+255),w,b
  7631  000EB2  6F85               	movwf	(??_get_fat+21)& (0+255),b
  7632  000EB4  0EFF               	movlw	255
  7633  000EB6  1582               	andwf	(??_get_fat+18)& (0+255),w,b
  7634  000EB8  6F6C               	movwf	?_get_fat& (0+255),b
  7635  000EBA  0EFF               	movlw	255
  7636  000EBC  1583               	andwf	(??_get_fat+19)& (0+255),w,b
  7637  000EBE  6F6D               	movwf	(?_get_fat+1)& (0+255),b
  7638  000EC0  0EFF               	movlw	255
  7639  000EC2  1584               	andwf	(??_get_fat+20)& (0+255),w,b
  7640  000EC4  6F6E               	movwf	(?_get_fat+2)& (0+255),b
  7641  000EC6  0E0F               	movlw	15
  7642  000EC8  1585               	andwf	(??_get_fat+21)& (0+255),w,b
  7643  000ECA  6F6F               	movwf	(?_get_fat+3)& (0+255),b
  7644                           
  7645                           ; BSR set to: 0
  7646  000ECC  0012               	return	
  7647  000ECE                     l865:
  7648                           
  7649                           ; BSR set to: 0
  7650                           
  7651                           ; BSR set to: 0
  7652  000ECE  C092  FFD9         	movff	get_fat@fs,fsr2l
  7653  000ED2  C093  FFDA         	movff	get_fat@fs+1,fsr2h
  7654  000ED6  50DF               	movf	indf2,w,c
  7655                           
  7656                           ; Switch size 1, requested type "space"
  7657                           ; Number of cases is 3, Range of values is 1 to 3
  7658                           ; switch strategies available:
  7659                           ; Name         Instructions Cycles
  7660                           ; simple_byte           10     6 (average)
  7661                           ;	Chosen strategy is simple_byte
  7662  000ED8  0A01               	xorlw	1	; case 1
  7663  000EDA  B4D8               	btfsc	status,2,c
  7664  000EDC  D644               	goto	l866
  7665  000EDE  0A03               	xorlw	3	; case 2
  7666  000EE0  B4D8               	btfsc	status,2,c
  7667  000EE2  D713               	goto	l877
  7668  000EE4  0A01               	xorlw	1	; case 3
  7669  000EE6  B4D8               	btfsc	status,2,c
  7670  000EE8  D763               	goto	l879
  7671  000EEA                     l869:
  7672                           
  7673                           ;pff.c: 389: return 1;
  7674                           
  7675                           ; BSR set to: 0
  7676  000EEA  0E01               	movlw	1
  7677  000EEC  0100               	movlb	0	; () banked
  7678  000EEE  6F6C               	movwf	?_get_fat& (0+255),b
  7679  000EF0  0E00               	movlw	0
  7680  000EF2  6F6D               	movwf	(?_get_fat+1)& (0+255),b
  7681  000EF4  0E00               	movlw	0
  7682  000EF6  6F6E               	movwf	(?_get_fat+2)& (0+255),b
  7683  000EF8  0E00               	movlw	0
  7684  000EFA  6F6F               	movwf	(?_get_fat+3)& (0+255),b
  7685  000EFC  0012               	return	
  7686  000EFE                     __end_of_get_fat:
  7687                           	opt stack 0
  7688                           tosu	equ	0xFFF
  7689                           tosh	equ	0xFFE
  7690                           tosl	equ	0xFFD
  7691                           pclath	equ	0xFFA
  7692                           tblptru	equ	0xFF8
  7693                           tblptrh	equ	0xFF7
  7694                           tblptrl	equ	0xFF6
  7695                           tablat	equ	0xFF5
  7696                           prodh	equ	0xFF4
  7697                           prodl	equ	0xFF3
  7698                           intcon	equ	0xFF2
  7699                           intcon2	equ	0xFF1
  7700                           intcon3	equ	0xFF0
  7701                           postinc0	equ	0xFEE
  7702                           wreg	equ	0xFE8
  7703                           indf1	equ	0xFE7
  7704                           postinc1	equ	0xFE6
  7705                           postdec1	equ	0xFE5
  7706                           fsr1h	equ	0xFE2
  7707                           fsr1l	equ	0xFE1
  7708                           indf2	equ	0xFDF
  7709                           postinc2	equ	0xFDE
  7710                           postdec2	equ	0xFDD
  7711                           plusw2	equ	0xFDB
  7712                           fsr2h	equ	0xFDA
  7713                           fsr2l	equ	0xFD9
  7714                           status	equ	0xFD8
  7715                           
  7716 ;; *************** function _clust2sect *****************
  7717 ;; Defined at:
  7718 ;;		line 400 in file "bibliotecas/pff.c"
  7719 ;; Parameters:    Size  Location     Type
  7720 ;;  clst            4   37[COMRAM] unsigned long 
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;  fs              2   41[COMRAM] PTR struct .
  7723 ;;		 -> NULL(0), SDCard@fs(42), 
  7724 ;; Return value:  Size  Location     Type
  7725 ;;                  4   37[COMRAM] unsigned long 
  7726 ;; Registers used:
  7727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7728 ;; Tracked objects:
  7729 ;;		On entry : 0/0
  7730 ;;		On exit  : 0/0
  7731 ;;		Unchanged: 0/0
  7732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7733 ;;      Params:         4       0       0       0       0       0       0       0       0
  7734 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7735 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7736 ;;      Totals:         6       5       0       0       0       0       0       0       0
  7737 ;;Total ram usage:       11 bytes
  7738 ;; Hardware stack levels used:    1
  7739 ;; Hardware stack levels required when called:    3
  7740 ;; This function calls:
  7741 ;;		___lmul
  7742 ;; This function is called by:
  7743 ;;		_dir_rewind
  7744 ;;		_dir_next
  7745 ;;		_pf_read
  7746 ;;		_pf_write
  7747 ;;		_pf_lseek
  7748 ;; This function uses a non-reentrant model
  7749 ;;
  7750                           
  7751                           	psect	text27
  7752  002896                     __ptext27:
  7753                           	opt stack 0
  7754  002896                     _clust2sect:
  7755                           	opt stack 24
  7756                           
  7757                           ;pff.c: 404: FATFS *fs = FatFs;
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;incstack = 0
  7761  002896  C030  F02A         	movff	_FatFs,clust2sect@fs
  7762  00289A  C031  F02B         	movff	_FatFs+1,clust2sect@fs+1
  7763                           
  7764                           ;pff.c: 407: clst -= 2;
  7765  00289E  0E02               	movlw	2
  7766  0028A0  5E26               	subwf	clust2sect@clst,f,c
  7767  0028A2  0E00               	movlw	0
  7768  0028A4  5A27               	subwfb	clust2sect@clst+1,f,c
  7769  0028A6  5A28               	subwfb	clust2sect@clst+2,f,c
  7770  0028A8  5A29               	subwfb	clust2sect@clst+3,f,c
  7771                           
  7772                           ;pff.c: 408: if (clst >= (fs->n_fatent - 2)) return 0;
  7773  0028AA  EE20 F006          	lfsr	2,6
  7774  0028AE  502A               	movf	clust2sect@fs,w,c
  7775  0028B0  26D9               	addwf	fsr2l,f,c
  7776  0028B2  502B               	movf	clust2sect@fs+1,w,c
  7777  0028B4  22DA               	addwfc	fsr2h,f,c
  7778  0028B6  0EFE               	movlw	254
  7779  0028B8  24DE               	addwf	postinc2,w,c
  7780  0028BA  0100               	movlb	0	; () banked
  7781  0028BC  6F60               	movwf	??_clust2sect& (0+255),b
  7782  0028BE  0EFF               	movlw	255
  7783  0028C0  20DE               	addwfc	postinc2,w,c
  7784  0028C2  6F61               	movwf	(??_clust2sect+1)& (0+255),b
  7785  0028C4  0EFF               	movlw	255
  7786  0028C6  20DE               	addwfc	postinc2,w,c
  7787  0028C8  6F62               	movwf	(??_clust2sect+2)& (0+255),b
  7788  0028CA  0EFF               	movlw	255
  7789  0028CC  20DE               	addwfc	postinc2,w,c
  7790  0028CE  6F63               	movwf	(??_clust2sect+3)& (0+255),b
  7791  0028D0  5160               	movf	??_clust2sect& (0+255),w,b
  7792  0028D2  5C26               	subwf	clust2sect@clst,w,c
  7793  0028D4  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  7794  0028D6  5827               	subwfb	clust2sect@clst+1,w,c
  7795  0028D8  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  7796  0028DA  5828               	subwfb	clust2sect@clst+2,w,c
  7797  0028DC  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  7798  0028DE  5829               	subwfb	clust2sect@clst+3,w,c
  7799  0028E0  A0D8               	btfss	status,0,c
  7800  0028E2  D009               	goto	l883
  7801                           
  7802                           ; BSR set to: 0
  7803  0028E4  0E00               	movlw	0
  7804  0028E6  6E26               	movwf	?_clust2sect,c
  7805  0028E8  0E00               	movlw	0
  7806  0028EA  6E27               	movwf	?_clust2sect+1,c
  7807  0028EC  0E00               	movlw	0
  7808  0028EE  6E28               	movwf	?_clust2sect+2,c
  7809  0028F0  0E00               	movlw	0
  7810  0028F2  6E29               	movwf	?_clust2sect+3,c
  7811                           
  7812                           ; BSR set to: 0
  7813  0028F4  0012               	return	
  7814  0028F6                     l883:
  7815                           
  7816                           ; BSR set to: 0
  7817                           ;pff.c: 409: return (DWORD)clst * fs->csize + fs->database;
  7818                           
  7819                           ; BSR set to: 0
  7820  0028F6  EE20 F012          	lfsr	2,18
  7821  0028FA  502A               	movf	clust2sect@fs,w,c
  7822  0028FC  26D9               	addwf	fsr2l,f,c
  7823  0028FE  502B               	movf	clust2sect@fs+1,w,c
  7824  002900  22DA               	addwfc	fsr2h,f,c
  7825  002902  CFDE F060          	movff	postinc2,??_clust2sect
  7826  002906  CFDE F061          	movff	postinc2,??_clust2sect+1
  7827  00290A  CFDE F062          	movff	postinc2,??_clust2sect+2
  7828  00290E  CFDE F063          	movff	postinc2,??_clust2sect+3
  7829  002912  EE20 F002          	lfsr	2,2
  7830  002916  502A               	movf	clust2sect@fs,w,c
  7831  002918  26D9               	addwf	fsr2l,f,c
  7832  00291A  502B               	movf	clust2sect@fs+1,w,c
  7833  00291C  22DA               	addwfc	fsr2h,f,c
  7834  00291E  50DF               	movf	indf2,w,c
  7835  002920  6F64               	movwf	(??_clust2sect+4)& (0+255),b
  7836  002922  5164               	movf	(??_clust2sect+4)& (0+255),w,b
  7837  002924  6E1A               	movwf	___lmul@multiplier,c
  7838  002926  6A1B               	clrf	___lmul@multiplier+1,c
  7839  002928  6A1C               	clrf	___lmul@multiplier+2,c
  7840  00292A  6A1D               	clrf	___lmul@multiplier+3,c
  7841  00292C  C026  F01E         	movff	clust2sect@clst,___lmul@multiplicand
  7842  002930  C027  F01F         	movff	clust2sect@clst+1,___lmul@multiplicand+1
  7843  002934  C028  F020         	movff	clust2sect@clst+2,___lmul@multiplicand+2
  7844  002938  C029  F021         	movff	clust2sect@clst+3,___lmul@multiplicand+3
  7845  00293C  ECE7  F017         	call	___lmul	;wreg free
  7846  002940  0100               	movlb	0	; () banked
  7847  002942  5160               	movf	??_clust2sect& (0+255),w,b
  7848  002944  241A               	addwf	?___lmul,w,c
  7849  002946  6E26               	movwf	?_clust2sect,c
  7850  002948  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  7851  00294A  201B               	addwfc	?___lmul+1,w,c
  7852  00294C  6E27               	movwf	?_clust2sect+1,c
  7853  00294E  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  7854  002950  201C               	addwfc	?___lmul+2,w,c
  7855  002952  6E28               	movwf	?_clust2sect+2,c
  7856  002954  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  7857  002956  201D               	addwfc	?___lmul+3,w,c
  7858  002958  6E29               	movwf	?_clust2sect+3,c
  7859  00295A  0012               	return	
  7860  00295C                     __end_of_clust2sect:
  7861                           	opt stack 0
  7862                           tosu	equ	0xFFF
  7863                           tosh	equ	0xFFE
  7864                           tosl	equ	0xFFD
  7865                           pclath	equ	0xFFA
  7866                           tblptru	equ	0xFF8
  7867                           tblptrh	equ	0xFF7
  7868                           tblptrl	equ	0xFF6
  7869                           tablat	equ	0xFF5
  7870                           prodh	equ	0xFF4
  7871                           prodl	equ	0xFF3
  7872                           intcon	equ	0xFF2
  7873                           intcon2	equ	0xFF1
  7874                           intcon3	equ	0xFF0
  7875                           postinc0	equ	0xFEE
  7876                           wreg	equ	0xFE8
  7877                           indf1	equ	0xFE7
  7878                           postinc1	equ	0xFE6
  7879                           postdec1	equ	0xFE5
  7880                           fsr1h	equ	0xFE2
  7881                           fsr1l	equ	0xFE1
  7882                           indf2	equ	0xFDF
  7883                           postinc2	equ	0xFDE
  7884                           postdec2	equ	0xFDD
  7885                           plusw2	equ	0xFDB
  7886                           fsr2h	equ	0xFDA
  7887                           fsr2l	equ	0xFD9
  7888                           status	equ	0xFD8
  7889                           
  7890 ;; *************** function _create_name *****************
  7891 ;; Defined at:
  7892 ;;		line 581 in file "bibliotecas/pff.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;  dj              2   33[COMRAM] PTR struct .
  7895 ;;		 -> pf_open@dj(16), 
  7896 ;;  path            2   35[COMRAM] PTR PTR const unsigned c
  7897 ;;		 -> follow_path@path(2), 
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;  d               1    0[BANK0 ] unsigned char 
  7900 ;;  sfn             2    5[BANK0 ] PTR unsigned char 
  7901 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  7902 ;;  p               2    1[BANK0 ] PTR const unsigned char 
  7903 ;;		 -> fileName(15), 
  7904 ;;  c               1    8[BANK0 ] unsigned char 
  7905 ;;  i               1    7[BANK0 ] unsigned char 
  7906 ;;  si              1    4[BANK0 ] unsigned char 
  7907 ;;  ni              1    3[BANK0 ] unsigned char 
  7908 ;; Return value:  Size  Location     Type
  7909 ;;                  1    wreg      enum E43
  7910 ;; Registers used:
  7911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7917 ;;      Params:         4       0       0       0       0       0       0       0       0
  7918 ;;      Locals:         0       9       0       0       0       0       0       0       0
  7919 ;;      Temps:          7       0       0       0       0       0       0       0       0
  7920 ;;      Totals:        11       9       0       0       0       0       0       0       0
  7921 ;;Total ram usage:       20 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; Hardware stack levels required when called:    3
  7924 ;; This function calls:
  7925 ;;		_mem_set
  7926 ;; This function is called by:
  7927 ;;		_follow_path
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           	psect	text28
  7932  00212C                     __ptext28:
  7933                           	opt stack 0
  7934  00212C                     _create_name:
  7935                           	opt stack 23
  7936                           
  7937                           ;pff.c: 586: BYTE c, ni, si, i, *sfn;
  7938                           ;pff.c: 587: const char *p;
  7939                           ;pff.c: 590: static const BYTE cvt[] = {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x4
      +                          5,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0
      +                          x9B,0x9C,0x9D,0x9E,0x9F, 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0x
  7940                           ;pff.c: 595: sfn = dj->fn;
  7941                           
  7942                           ; BSR set to: 0
  7943                           ;incstack = 0
  7944  00212C  EE20 F002          	lfsr	2,2
  7945  002130  5022               	movf	create_name@dj,w,c
  7946  002132  26D9               	addwf	fsr2l,f,c
  7947  002134  5023               	movf	create_name@dj+1,w,c
  7948  002136  22DA               	addwfc	fsr2h,f,c
  7949  002138  CFDE F065          	movff	postinc2,create_name@sfn
  7950  00213C  CFDD F066          	movff	postdec2,create_name@sfn+1
  7951                           
  7952                           ;pff.c: 596: mem_set(sfn, ' ', 11);
  7953  002140  C065  F01A         	movff	create_name@sfn,mem_set@dst
  7954  002144  C066  F01B         	movff	create_name@sfn+1,mem_set@dst+1
  7955  002148  0E00               	movlw	0
  7956  00214A  6E1D               	movwf	mem_set@val+1,c
  7957  00214C  0E20               	movlw	32
  7958  00214E  6E1C               	movwf	mem_set@val,c
  7959  002150  0E00               	movlw	0
  7960  002152  6E1F               	movwf	mem_set@cnt+1,c
  7961  002154  0E0B               	movlw	11
  7962  002156  6E1E               	movwf	mem_set@cnt,c
  7963  002158  EC5B  F019         	call	_mem_set	;wreg free
  7964                           
  7965                           ;pff.c: 597: si = i = 0; ni = 8;
  7966  00215C  0E00               	movlw	0
  7967  00215E  0100               	movlb	0	; () banked
  7968  002160  6F67               	movwf	create_name@i& (0+255),b
  7969  002162  C067  F064         	movff	create_name@i,create_name@si
  7970                           
  7971                           ; BSR set to: 0
  7972  002166  0E08               	movlw	8
  7973  002168  6F63               	movwf	create_name@ni& (0+255),b
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;pff.c: 598: p = *path;
  7977  00216A  C024  FFD9         	movff	create_name@path,fsr2l
  7978  00216E  C025  FFDA         	movff	create_name@path+1,fsr2h
  7979  002172  CFDE F061          	movff	postinc2,create_name@p
  7980  002176  CFDD F062          	movff	postdec2,create_name@p+1
  7981  00217A                     
  7982                           ; BSR set to: 0
  7983                           ;pff.c: 600: c = p[si++];
  7984                           
  7985                           ; BSR set to: 0
  7986  00217A  5164               	movf	create_name@si& (0+255),w,b
  7987  00217C  0D01               	mullw	1
  7988  00217E  50F3               	movf	prodl,w,c
  7989  002180  2561               	addwf	create_name@p& (0+255),w,b
  7990  002182  6ED9               	movwf	fsr2l,c
  7991  002184  50F4               	movf	prodh,w,c
  7992  002186  2162               	addwfc	(create_name@p+1)& (0+255),w,b
  7993  002188  6EDA               	movwf	fsr2h,c
  7994  00218A  50DF               	movf	indf2,w,c
  7995  00218C  6F68               	movwf	create_name@c& (0+255),b
  7996                           
  7997                           ; BSR set to: 0
  7998  00218E  2B64               	incf	create_name@si& (0+255),f,b
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;pff.c: 601: if (c <= ' ' || c == '/') break;
  8002  002190  0E20               	movlw	32
  8003  002192  6568               	cpfsgt	create_name@c& (0+255),b
  8004  002194  D044               	goto	l945
  8005                           
  8006                           ; BSR set to: 0
  8007  002196  0E2F               	movlw	47
  8008  002198  1968               	xorwf	create_name@c& (0+255),w,b
  8009  00219A  B4D8               	btfsc	status,2,c
  8010  00219C  D040               	goto	l945
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;pff.c: 602: if (c == '.' || i >= ni) {
  8014                           
  8015                           ; BSR set to: 0
  8016                           
  8017                           ; BSR set to: 0
  8018  00219E  0E2E               	movlw	46
  8019  0021A0  1968               	xorwf	create_name@c& (0+255),w,b
  8020  0021A2  B4D8               	btfsc	status,2,c
  8021  0021A4  D004               	goto	u8560
  8022                           
  8023                           ; BSR set to: 0
  8024  0021A6  5163               	movf	create_name@ni& (0+255),w,b
  8025  0021A8  5D67               	subwf	create_name@i& (0+255),w,b
  8026  0021AA  A0D8               	btfss	status,0,c
  8027  0021AC  D00D               	goto	l946
  8028  0021AE                     u8560:
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;pff.c: 603: if (ni != 8 || c != '.') break;
  8032                           
  8033                           ; BSR set to: 0
  8034  0021AE  0E08               	movlw	8
  8035  0021B0  1963               	xorwf	create_name@ni& (0+255),w,b
  8036  0021B2  A4D8               	btfss	status,2,c
  8037  0021B4  D034               	goto	l945
  8038                           
  8039                           ; BSR set to: 0
  8040  0021B6  0E2E               	movlw	46
  8041  0021B8  1968               	xorwf	create_name@c& (0+255),w,b
  8042  0021BA  A4D8               	btfss	status,2,c
  8043  0021BC  D030               	goto	l945
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;pff.c: 604: i = 8; ni = 11;
  8047                           
  8048                           ; BSR set to: 0
  8049                           
  8050                           ; BSR set to: 0
  8051  0021BE  0E08               	movlw	8
  8052  0021C0  6F67               	movwf	create_name@i& (0+255),b
  8053  0021C2  0E0B               	movlw	11
  8054  0021C4  6F63               	movwf	create_name@ni& (0+255),b
  8055                           
  8056                           ;pff.c: 605: continue;
  8057  0021C6  D7D9               	goto	l941
  8058  0021C8                     l946:
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;pff.c: 606: }
  8062                           ;pff.c: 609: if (c >= 0x80)
  8063                           
  8064                           ; BSR set to: 0
  8065  0021C8  0E7F               	movlw	127
  8066  0021CA  6568               	cpfsgt	create_name@c& (0+255),b
  8067  0021CC  D014               	goto	l954
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;pff.c: 610: c = cvt[c - 0x80];
  8071  0021CE  0E80               	movlw	128
  8072  0021D0  6E26               	movwf	??_create_name& (0+255),c
  8073  0021D2  0EFF               	movlw	255
  8074  0021D4  6E27               	movwf	(??_create_name+1)& (0+255),c
  8075  0021D6  5168               	movf	create_name@c& (0+255),w,b
  8076  0021D8  6E28               	movwf	(??_create_name+2)& (0+255),c
  8077  0021DA  6A29               	clrf	(??_create_name+3)& (0+255),c
  8078  0021DC  5026               	movf	??_create_name,w,c
  8079  0021DE  2628               	addwf	??_create_name+2,f,c
  8080  0021E0  5027               	movf	??_create_name+1,w,c
  8081  0021E2  2229               	addwfc	??_create_name+3,f,c
  8082  0021E4  0E5B               	movlw	low create_name@cvt
  8083  0021E6  2428               	addwf	??_create_name+2,w,c
  8084  0021E8  6EF6               	movwf	tblptrl,c
  8085  0021EA  0E60               	movlw	high create_name@cvt
  8086  0021EC  2029               	addwfc	??_create_name+3,w,c
  8087  0021EE  6EF7               	movwf	tblptrh,c
  8088  0021F0                     	if	0	;There are less than 3 active tblptr bytes
  8089  0021F0                     	endif
  8090  0021F0  0008               	tblrd		*
  8091  0021F2  CFF5 F068          	movff	tablat,create_name@c
  8092  0021F6                     l954:
  8093                           
  8094                           ; BSR set to: 0
  8095                           
  8096                           ; BSR set to: 0
  8097  0021F6  0E60               	movlw	96
  8098  0021F8  6568               	cpfsgt	create_name@c& (0+255),b
  8099  0021FA  D005               	goto	l956
  8100                           
  8101                           ; BSR set to: 0
  8102  0021FC  0E7B               	movlw	123
  8103  0021FE  6168               	cpfslt	create_name@c& (0+255),b
  8104  002200  D002               	goto	l956
  8105                           
  8106                           ; BSR set to: 0
  8107  002202  0E20               	movlw	32
  8108  002204  5F68               	subwf	create_name@c& (0+255),f,b
  8109  002206                     l956:
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;pff.c: 620: sfn[i++] = c;
  8113                           
  8114                           ; BSR set to: 0
  8115  002206  5167               	movf	create_name@i& (0+255),w,b
  8116  002208  0D01               	mullw	1
  8117  00220A  50F3               	movf	prodl,w,c
  8118  00220C  2565               	addwf	create_name@sfn& (0+255),w,b
  8119  00220E  6ED9               	movwf	fsr2l,c
  8120  002210  50F4               	movf	prodh,w,c
  8121  002212  2166               	addwfc	(create_name@sfn+1)& (0+255),w,b
  8122  002214  6EDA               	movwf	fsr2h,c
  8123  002216  C068  FFDF         	movff	create_name@c,indf2
  8124                           
  8125                           ; BSR set to: 0
  8126  00221A  2B67               	incf	create_name@i& (0+255),f,b
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;pff.c: 621: }
  8130                           ;pff.c: 622: }
  8131                           
  8132                           ; BSR set to: 0
  8133  00221C  D7AE               	goto	l941
  8134  00221E                     l945:
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;pff.c: 623: *path = &p[si];
  8138                           
  8139                           ; BSR set to: 0
  8140  00221E  5164               	movf	create_name@si& (0+255),w,b
  8141  002220  0D01               	mullw	1
  8142  002222  C061  F026         	movff	create_name@p,??_create_name
  8143  002226  C062  F027         	movff	create_name@p+1,??_create_name+1
  8144  00222A  50F3               	movf	prodl,w,c
  8145  00222C  2626               	addwf	??_create_name,f,c
  8146  00222E  50F4               	movf	prodh,w,c
  8147  002230  2227               	addwfc	??_create_name+1,f,c
  8148  002232  C024  FFD9         	movff	create_name@path,fsr2l
  8149  002236  C025  FFDA         	movff	create_name@path+1,fsr2h
  8150  00223A  C026  FFDE         	movff	??_create_name,postinc2
  8151  00223E  C027  FFDD         	movff	??_create_name+1,postdec2
  8152                           
  8153                           ; BSR set to: 0
  8154                           ;pff.c: 625: sfn[11] = (c <= ' ') ? 1 : 0;
  8155  002242  EE20 F00B          	lfsr	2,11
  8156  002246  5165               	movf	create_name@sfn& (0+255),w,b
  8157  002248  26D9               	addwf	fsr2l,f,c
  8158  00224A  5166               	movf	(create_name@sfn+1)& (0+255),w,b
  8159  00224C  22DA               	addwfc	fsr2h,f,c
  8160  00224E  0E20               	movlw	32
  8161  002250  6568               	cpfsgt	create_name@c& (0+255),b
  8162  002252  D001               	goto	u8631
  8163  002254  D002               	goto	u8630
  8164  002256                     u8631:
  8165  002256  0E01               	movlw	1
  8166  002258  D001               	goto	u8640
  8167  00225A                     u8630:
  8168  00225A  0E00               	movlw	0
  8169  00225C                     u8640:
  8170  00225C  6EDF               	movwf	indf2,c
  8171                           
  8172                           ; BSR set to: 0
  8173                           ;pff.c: 627: return FR_OK;
  8174  00225E  0E00               	movlw	0
  8175  002260  0012               	return	
  8176  002262                     __end_of_create_name:
  8177                           	opt stack 0
  8178                           tosu	equ	0xFFF
  8179                           tosh	equ	0xFFE
  8180                           tosl	equ	0xFFD
  8181                           pclath	equ	0xFFA
  8182                           tblptru	equ	0xFF8
  8183                           tblptrh	equ	0xFF7
  8184                           tblptrl	equ	0xFF6
  8185                           tablat	equ	0xFF5
  8186                           prodh	equ	0xFF4
  8187                           prodl	equ	0xFF3
  8188                           intcon	equ	0xFF2
  8189                           intcon2	equ	0xFF1
  8190                           intcon3	equ	0xFF0
  8191                           postinc0	equ	0xFEE
  8192                           wreg	equ	0xFE8
  8193                           indf1	equ	0xFE7
  8194                           postinc1	equ	0xFE6
  8195                           postdec1	equ	0xFE5
  8196                           fsr1h	equ	0xFE2
  8197                           fsr1l	equ	0xFE1
  8198                           indf2	equ	0xFDF
  8199                           postinc2	equ	0xFDE
  8200                           postdec2	equ	0xFDD
  8201                           plusw2	equ	0xFDB
  8202                           fsr2h	equ	0xFDA
  8203                           fsr2l	equ	0xFD9
  8204                           status	equ	0xFD8
  8205                           
  8206 ;; *************** function _mem_set *****************
  8207 ;; Defined at:
  8208 ;;		line 329 in file "bibliotecas/pff.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  dst             2   25[COMRAM] PTR void 
  8211 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8212 ;;  val             2   27[COMRAM] int 
  8213 ;;  cnt             2   29[COMRAM] int 
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  d               2   31[COMRAM] PTR unsigned char 
  8216 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  8217 ;; Return value:  Size  Location     Type
  8218 ;;                  1    wreg      void 
  8219 ;; Registers used:
  8220 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8221 ;; Tracked objects:
  8222 ;;		On entry : 0/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8226 ;;      Params:         6       0       0       0       0       0       0       0       0
  8227 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8228 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8229 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8230 ;;Total ram usage:        8 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    2
  8233 ;; This function calls:
  8234 ;;		Nothing
  8235 ;; This function is called by:
  8236 ;;		_create_name
  8237 ;; This function uses a non-reentrant model
  8238 ;;
  8239                           
  8240                           	psect	text29
  8241  0032B6                     __ptext29:
  8242                           	opt stack 0
  8243  0032B6                     _mem_set:
  8244                           	opt stack 23
  8245                           
  8246                           ;pff.c: 330: char *d = (char*)dst;
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;incstack = 0
  8250  0032B6  C01A  F020         	movff	mem_set@dst,mem_set@d
  8251  0032BA  C01B  F021         	movff	mem_set@dst+1,mem_set@d+1
  8252                           
  8253                           ;pff.c: 331: while (cnt--) *d++ = (char)val;
  8254  0032BE  D008               	goto	l847
  8255  0032C0                     l7576:
  8256  0032C0  C020  FFD9         	movff	mem_set@d,fsr2l
  8257  0032C4  C021  FFDA         	movff	mem_set@d+1,fsr2h
  8258  0032C8  C01C  FFDF         	movff	mem_set@val,indf2
  8259  0032CC  4A20               	infsnz	mem_set@d,f,c
  8260  0032CE  2A21               	incf	mem_set@d+1,f,c
  8261  0032D0                     l847:
  8262  0032D0  061E               	decf	mem_set@cnt,f,c
  8263  0032D2  A0D8               	btfss	status,0,c
  8264  0032D4  061F               	decf	mem_set@cnt+1,f,c
  8265  0032D6  281E               	incf	mem_set@cnt,w,c
  8266  0032D8  E1F3               	bnz	l7576
  8267  0032DA  281F               	incf	mem_set@cnt+1,w,c
  8268  0032DC  B4D8               	btfsc	status,2,c
  8269  0032DE  0012               	return	
  8270  0032E0  D7EF               	goto	l848
  8271  0032E2                     __end_of_mem_set:
  8272                           	opt stack 0
  8273                           tosu	equ	0xFFF
  8274                           tosh	equ	0xFFE
  8275                           tosl	equ	0xFFD
  8276                           pclath	equ	0xFFA
  8277                           tblptru	equ	0xFF8
  8278                           tblptrh	equ	0xFF7
  8279                           tblptrl	equ	0xFF6
  8280                           tablat	equ	0xFF5
  8281                           prodh	equ	0xFF4
  8282                           prodl	equ	0xFF3
  8283                           intcon	equ	0xFF2
  8284                           intcon2	equ	0xFF1
  8285                           intcon3	equ	0xFF0
  8286                           postinc0	equ	0xFEE
  8287                           wreg	equ	0xFE8
  8288                           indf1	equ	0xFE7
  8289                           postinc1	equ	0xFE6
  8290                           postdec1	equ	0xFE5
  8291                           fsr1h	equ	0xFE2
  8292                           fsr1l	equ	0xFE1
  8293                           indf2	equ	0xFDF
  8294                           postinc2	equ	0xFDE
  8295                           postdec2	equ	0xFDD
  8296                           plusw2	equ	0xFDB
  8297                           fsr2h	equ	0xFDA
  8298                           fsr2l	equ	0xFD9
  8299                           status	equ	0xFD8
  8300                           
  8301 ;; *************** function _pf_mount *****************
  8302 ;; Defined at:
  8303 ;;		line 755 in file "bibliotecas/pff.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  fs              2   22[BANK0 ] PTR struct .
  8306 ;;		 -> SDCard@fs(42), 
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  buf            36   46[BANK0 ] unsigned char [36]
  8309 ;;  fsize           4   94[BANK0 ] unsigned long 
  8310 ;;  bsect           4   90[BANK0 ] unsigned long 
  8311 ;;  mclst           4   86[BANK0 ] unsigned long 
  8312 ;;  tsect           4   82[BANK0 ] unsigned long 
  8313 ;;  fmt             1   98[BANK0 ] unsigned char 
  8314 ;; Return value:  Size  Location     Type
  8315 ;;                  1    wreg      enum E3884
  8316 ;; Registers used:
  8317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8323 ;;      Params:         0       2       0       0       0       0       0       0       0
  8324 ;;      Locals:         0      53       0       0       0       0       0       0       0
  8325 ;;      Temps:          0      22       0       0       0       0       0       0       0
  8326 ;;      Totals:         0      77       0       0       0       0       0       0       0
  8327 ;;Total ram usage:       77 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    7
  8330 ;; This function calls:
  8331 ;;		___lldiv
  8332 ;;		___lmul
  8333 ;;		_check_fs
  8334 ;;		_disk_initialize
  8335 ;;		_disk_readp
  8336 ;; This function is called by:
  8337 ;;		_SDCard
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           	psect	text30
  8342  000012                     __ptext30:
  8343                           	opt stack 0
  8344  000012                     _pf_mount:
  8345                           	opt stack 21
  8346                           
  8347                           ;pff.c: 759: BYTE fmt, buf[36];
  8348                           ;pff.c: 760: DWORD bsect, fsize, tsect, mclst;
  8349                           ;pff.c: 763: FatFs = 0;
  8350                           
  8351                           ;incstack = 0
  8352  000012  0E00               	movlw	0
  8353  000014  6E30               	movwf	_FatFs,c
  8354  000016  0E00               	movlw	0
  8355  000018  6E31               	movwf	_FatFs+1,c
  8356                           
  8357                           ;pff.c: 764: if (disk_initialize() & 0x01)
  8358  00001A  EC0E  F00B         	call	_disk_initialize	;wreg free
  8359  00001E  0100               	movlb	0	; () banked
  8360  000020  6F78               	movwf	??_pf_mount& (0+255),b
  8361  000022  A178               	btfss	??_pf_mount& (0+255),0,b
  8362  000024  D002               	goto	l994
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;pff.c: 765: return FR_NOT_READY;
  8366  000026  0E02               	movlw	2
  8367                           
  8368                           ; BSR set to: 0
  8369  000028  0012               	return	
  8370  00002A                     l994:
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;pff.c: 767: bsect = 0;
  8374                           
  8375                           ; BSR set to: 0
  8376  00002A  0E00               	movlw	0
  8377  00002C  6FBA               	movwf	pf_mount@bsect& (0+255),b
  8378  00002E  0E00               	movlw	0
  8379  000030  6FBB               	movwf	(pf_mount@bsect+1)& (0+255),b
  8380  000032  0E00               	movlw	0
  8381  000034  6FBC               	movwf	(pf_mount@bsect+2)& (0+255),b
  8382  000036  0E00               	movlw	0
  8383  000038  6FBD               	movwf	(pf_mount@bsect+3)& (0+255),b
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;pff.c: 768: fmt = check_fs(buf, bsect);
  8387  00003A  0E8E               	movlw	low pf_mount@buf
  8388  00003C  6F6C               	movwf	check_fs@buf& (0+255),b
  8389  00003E  0E00               	movlw	high pf_mount@buf
  8390  000040  6F6D               	movwf	(check_fs@buf+1)& (0+255),b
  8391  000042  C0BA  F06E         	movff	pf_mount@bsect,check_fs@sect
  8392  000046  C0BB  F06F         	movff	pf_mount@bsect+1,check_fs@sect+1
  8393  00004A  C0BC  F070         	movff	pf_mount@bsect+2,check_fs@sect+2
  8394  00004E  C0BD  F071         	movff	pf_mount@bsect+3,check_fs@sect+3
  8395  000052  ECA2  F00E         	call	_check_fs	;wreg free
  8396  000056  0100               	movlb	0	; () banked
  8397  000058  6FC2               	movwf	pf_mount@fmt& (0+255),b
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;pff.c: 769: if (fmt == 1) {
  8401  00005A  05C2               	decf	pf_mount@fmt& (0+255),w,b
  8402  00005C  A4D8               	btfss	status,2,c
  8403  00005E  D068               	goto	l999
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;pff.c: 771: if (disk_readp(buf, bsect, 446, 16)) {
  8407  000060  0E8E               	movlw	low pf_mount@buf
  8408  000062  6E23               	movwf	disk_readp@rd,c
  8409  000064  0E00               	movlw	high pf_mount@buf
  8410  000066  6E24               	movwf	disk_readp@rd+1,c
  8411  000068  C0BA  F025         	movff	pf_mount@bsect,disk_readp@sector
  8412  00006C  C0BB  F026         	movff	pf_mount@bsect+1,disk_readp@sector+1
  8413  000070  C0BC  F027         	movff	pf_mount@bsect+2,disk_readp@sector+2
  8414  000074  C0BD  F028         	movff	pf_mount@bsect+3,disk_readp@sector+3
  8415  000078  0E01               	movlw	1
  8416  00007A  6E2A               	movwf	disk_readp@offset+1,c
  8417  00007C  0EBE               	movlw	190
  8418  00007E  6E29               	movwf	disk_readp@offset,c
  8419  000080  0E00               	movlw	0
  8420  000082  6E2C               	movwf	disk_readp@count+1,c
  8421  000084  0E10               	movlw	16
  8422  000086  6E2B               	movwf	disk_readp@count,c
  8423  000088  EC5D  F009         	call	_disk_readp	;wreg free
  8424  00008C  0900               	iorlw	0
  8425  00008E  B4D8               	btfsc	status,2,c
  8426  000090  D002               	goto	l997
  8427                           
  8428                           ;pff.c: 772: fmt = 3;
  8429  000092  0E03               	movlw	3
  8430  000094  D04B               	goto	L2
  8431  000096                     l997:
  8432                           
  8433                           ;pff.c: 774: if (buf[4]) {
  8434                           
  8435                           ; BSR set to: 0
  8436  000096  0100               	movlb	0	; () banked
  8437  000098  5192               	movf	(pf_mount@buf+4)& (0+255),w,b
  8438  00009A  B4D8               	btfsc	status,2,c
  8439  00009C  D049               	goto	l999
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;pff.c: 775: bsect = (DWORD)(((DWORD)*((BYTE*)(&buf[8])+3)<<24)|((DWORD)*((BYTE*)(&buf[8
      +                          ])+2)<<16)|((WORD)*((BYTE*)(&buf[8])+1)<<8)|*(BYTE*)(&buf[8]));
  8443  00009E  5197               	movf	(pf_mount@buf+9)& (0+255),w,b
  8444  0000A0  6F79               	movwf	(??_pf_mount+1)& (0+255),b
  8445  0000A2  6B78               	clrf	??_pf_mount& (0+255),b
  8446  0000A4  C098  F07A         	movff	pf_mount@buf+10,??_pf_mount+2
  8447  0000A8  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  8448  0000AA  6B7C               	clrf	(??_pf_mount+4)& (0+255),b
  8449  0000AC  6B7D               	clrf	(??_pf_mount+5)& (0+255),b
  8450  0000AE  C07B  F07D         	movff	??_pf_mount+3,??_pf_mount+5
  8451  0000B2  C07A  F07C         	movff	??_pf_mount+2,??_pf_mount+4
  8452  0000B6  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  8453  0000B8  6B7A               	clrf	(??_pf_mount+2)& (0+255),b
  8454  0000BA  C099  F07E         	movff	pf_mount@buf+11,??_pf_mount+6
  8455  0000BE  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  8456  0000C0  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  8457  0000C2  6B81               	clrf	(??_pf_mount+9)& (0+255),b
  8458  0000C4  C07E  F081         	movff	??_pf_mount+6,??_pf_mount+9
  8459  0000C8  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  8460  0000CA  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  8461  0000CC  6B7E               	clrf	(??_pf_mount+6)& (0+255),b
  8462  0000CE  517A               	movf	(??_pf_mount+2)& (0+255),w,b
  8463  0000D0  117E               	iorwf	(??_pf_mount+6)& (0+255),w,b
  8464  0000D2  6F82               	movwf	(??_pf_mount+10)& (0+255),b
  8465  0000D4  517B               	movf	(??_pf_mount+3)& (0+255),w,b
  8466  0000D6  117F               	iorwf	(??_pf_mount+7)& (0+255),w,b
  8467  0000D8  6F83               	movwf	(??_pf_mount+11)& (0+255),b
  8468  0000DA  517C               	movf	(??_pf_mount+4)& (0+255),w,b
  8469  0000DC  1180               	iorwf	(??_pf_mount+8)& (0+255),w,b
  8470  0000DE  6F84               	movwf	(??_pf_mount+12)& (0+255),b
  8471  0000E0  517D               	movf	(??_pf_mount+5)& (0+255),w,b
  8472  0000E2  1181               	iorwf	(??_pf_mount+9)& (0+255),w,b
  8473  0000E4  6F85               	movwf	(??_pf_mount+13)& (0+255),b
  8474  0000E6  5178               	movf	??_pf_mount& (0+255),w,b
  8475  0000E8  1182               	iorwf	(??_pf_mount+10)& (0+255),w,b
  8476  0000EA  6F86               	movwf	(??_pf_mount+14)& (0+255),b
  8477  0000EC  5179               	movf	(??_pf_mount+1)& (0+255),w,b
  8478  0000EE  1183               	iorwf	(??_pf_mount+11)& (0+255),w,b
  8479  0000F0  6F87               	movwf	(??_pf_mount+15)& (0+255),b
  8480  0000F2  0E00               	movlw	0
  8481  0000F4  1184               	iorwf	(??_pf_mount+12)& (0+255),w,b
  8482  0000F6  6F88               	movwf	(??_pf_mount+16)& (0+255),b
  8483  0000F8  0E00               	movlw	0
  8484  0000FA  1185               	iorwf	(??_pf_mount+13)& (0+255),w,b
  8485  0000FC  6F89               	movwf	(??_pf_mount+17)& (0+255),b
  8486  0000FE  5196               	movf	(pf_mount@buf+8)& (0+255),w,b
  8487  000100  1186               	iorwf	(??_pf_mount+14)& (0+255),w,b
  8488  000102  6FBA               	movwf	pf_mount@bsect& (0+255),b
  8489  000104  5187               	movf	(??_pf_mount+15)& (0+255),w,b
  8490  000106  6FBB               	movwf	(pf_mount@bsect+1)& (0+255),b
  8491  000108  5188               	movf	(??_pf_mount+16)& (0+255),w,b
  8492  00010A  6FBC               	movwf	(pf_mount@bsect+2)& (0+255),b
  8493  00010C  5189               	movf	(??_pf_mount+17)& (0+255),w,b
  8494  00010E  6FBD               	movwf	(pf_mount@bsect+3)& (0+255),b
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;pff.c: 776: fmt = check_fs(buf, bsect);
  8498  000110  0E8E               	movlw	low pf_mount@buf
  8499  000112  6F6C               	movwf	check_fs@buf& (0+255),b
  8500  000114  0E00               	movlw	high pf_mount@buf
  8501  000116  6F6D               	movwf	(check_fs@buf+1)& (0+255),b
  8502  000118  C0BA  F06E         	movff	pf_mount@bsect,check_fs@sect
  8503  00011C  C0BB  F06F         	movff	pf_mount@bsect+1,check_fs@sect+1
  8504  000120  C0BC  F070         	movff	pf_mount@bsect+2,check_fs@sect+2
  8505  000124  C0BD  F071         	movff	pf_mount@bsect+3,check_fs@sect+3
  8506  000128  ECA2  F00E         	call	_check_fs	;wreg free
  8507  00012C                     L2:
  8508  00012C  0100               	movlb	0	; () banked
  8509  00012E  6FC2               	movwf	pf_mount@fmt& (0+255),b
  8510  000130                     l999:
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;pff.c: 777: }
  8514                           ;pff.c: 778: }
  8515                           ;pff.c: 779: }
  8516                           ;pff.c: 780: if (fmt == 3) return FR_DISK_ERR;
  8517                           
  8518                           ; BSR set to: 0
  8519                           
  8520                           ; BSR set to: 0
  8521                           
  8522                           ; BSR set to: 0
  8523  000130  0E03               	movlw	3
  8524  000132  19C2               	xorwf	pf_mount@fmt& (0+255),w,b
  8525  000134  A4D8               	btfss	status,2,c
  8526  000136  D002               	goto	l1000
  8527                           
  8528                           ; BSR set to: 0
  8529  000138  0E01               	movlw	1
  8530                           
  8531                           ; BSR set to: 0
  8532  00013A  0012               	return	
  8533  00013C                     l1000:
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;pff.c: 781: if (fmt) return FR_NO_FILESYSTEM;
  8537                           
  8538                           ; BSR set to: 0
  8539  00013C  51C2               	movf	pf_mount@fmt& (0+255),w,b
  8540  00013E  B4D8               	btfsc	status,2,c
  8541  000140  D002               	goto	l1001
  8542                           
  8543                           ; BSR set to: 0
  8544  000142  0E06               	movlw	6
  8545                           
  8546                           ; BSR set to: 0
  8547  000144  0012               	return	
  8548  000146                     l1001:
  8549                           
  8550                           ; BSR set to: 0
  8551                           ;pff.c: 784: if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
  8552                           
  8553                           ; BSR set to: 0
  8554  000146  0E8E               	movlw	low pf_mount@buf
  8555  000148  6E23               	movwf	disk_readp@rd,c
  8556  00014A  0E00               	movlw	high pf_mount@buf
  8557  00014C  6E24               	movwf	disk_readp@rd+1,c
  8558  00014E  C0BA  F025         	movff	pf_mount@bsect,disk_readp@sector
  8559  000152  C0BB  F026         	movff	pf_mount@bsect+1,disk_readp@sector+1
  8560  000156  C0BC  F027         	movff	pf_mount@bsect+2,disk_readp@sector+2
  8561  00015A  C0BD  F028         	movff	pf_mount@bsect+3,disk_readp@sector+3
  8562  00015E  0E00               	movlw	0
  8563  000160  6E2A               	movwf	disk_readp@offset+1,c
  8564  000162  0E0D               	movlw	13
  8565  000164  6E29               	movwf	disk_readp@offset,c
  8566  000166  0E00               	movlw	0
  8567  000168  6E2C               	movwf	disk_readp@count+1,c
  8568  00016A  0E24               	movlw	36
  8569  00016C  6E2B               	movwf	disk_readp@count,c
  8570  00016E  EC5D  F009         	call	_disk_readp	;wreg free
  8571  000172  0900               	iorlw	0
  8572  000174  B4D8               	btfsc	status,2,c
  8573  000176  D002               	goto	l1002
  8574  000178  0E01               	movlw	1
  8575  00017A  0012               	return	
  8576  00017C                     l1002:
  8577                           
  8578                           ;pff.c: 786: fsize = (WORD)(((WORD)*((BYTE*)(buf+22-13)+1)<<8)|(WORD)*(BYTE*)(buf+22-13)
      +                          );
  8579  00017C  0100               	movlb	0	; () banked
  8580  00017E  5197               	movf	(pf_mount@buf+9)& (0+255),w,b
  8581  000180  C098  F078         	movff	pf_mount@buf+10,??_pf_mount
  8582  000184  6B79               	clrf	(??_pf_mount+1)& (0+255),b
  8583  000186  C078  F079         	movff	??_pf_mount,??_pf_mount+1
  8584  00018A  6B78               	clrf	??_pf_mount& (0+255),b
  8585  00018C  1378               	iorwf	??_pf_mount& (0+255),f,b
  8586  00018E  0E00               	movlw	0
  8587  000190  1379               	iorwf	(??_pf_mount+1)& (0+255),f,b
  8588  000192  C078  F0BE         	movff	??_pf_mount,pf_mount@fsize
  8589  000196  C079  F0BF         	movff	??_pf_mount+1,pf_mount@fsize+1
  8590  00019A  6BC0               	clrf	(pf_mount@fsize+2)& (0+255),b
  8591  00019C  6BC1               	clrf	(pf_mount@fsize+3)& (0+255),b
  8592                           
  8593                           ;pff.c: 787: if (!fsize) fsize = (DWORD)(((DWORD)*((BYTE*)(buf+36-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+36-13)+2)<<16)|((WORD)*((BYTE*)(buf+36-13)+1)<<8)|*(BYTE*)(buf+36-13));
  8594  00019E  51BE               	movf	pf_mount@fsize& (0+255),w,b
  8595  0001A0  11BF               	iorwf	(pf_mount@fsize+1)& (0+255),w,b
  8596  0001A2  11C0               	iorwf	(pf_mount@fsize+2)& (0+255),w,b
  8597  0001A4  11C1               	iorwf	(pf_mount@fsize+3)& (0+255),w,b
  8598  0001A6  A4D8               	btfss	status,2,c
  8599  0001A8  D039               	goto	l1003
  8600                           
  8601                           ; BSR set to: 0
  8602  0001AA  51A6               	movf	(pf_mount@buf+24)& (0+255),w,b
  8603  0001AC  6F79               	movwf	(??_pf_mount+1)& (0+255),b
  8604  0001AE  6B78               	clrf	??_pf_mount& (0+255),b
  8605  0001B0  C0A7  F07A         	movff	pf_mount@buf+25,??_pf_mount+2
  8606  0001B4  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  8607  0001B6  6B7C               	clrf	(??_pf_mount+4)& (0+255),b
  8608  0001B8  6B7D               	clrf	(??_pf_mount+5)& (0+255),b
  8609  0001BA  C07B  F07D         	movff	??_pf_mount+3,??_pf_mount+5
  8610  0001BE  C07A  F07C         	movff	??_pf_mount+2,??_pf_mount+4
  8611  0001C2  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  8612  0001C4  6B7A               	clrf	(??_pf_mount+2)& (0+255),b
  8613  0001C6  C0A8  F07E         	movff	pf_mount@buf+26,??_pf_mount+6
  8614  0001CA  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  8615  0001CC  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  8616  0001CE  6B81               	clrf	(??_pf_mount+9)& (0+255),b
  8617  0001D0  C07E  F081         	movff	??_pf_mount+6,??_pf_mount+9
  8618  0001D4  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  8619  0001D6  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  8620  0001D8  6B7E               	clrf	(??_pf_mount+6)& (0+255),b
  8621  0001DA  517A               	movf	(??_pf_mount+2)& (0+255),w,b
  8622  0001DC  117E               	iorwf	(??_pf_mount+6)& (0+255),w,b
  8623  0001DE  6F82               	movwf	(??_pf_mount+10)& (0+255),b
  8624  0001E0  517B               	movf	(??_pf_mount+3)& (0+255),w,b
  8625  0001E2  117F               	iorwf	(??_pf_mount+7)& (0+255),w,b
  8626  0001E4  6F83               	movwf	(??_pf_mount+11)& (0+255),b
  8627  0001E6  517C               	movf	(??_pf_mount+4)& (0+255),w,b
  8628  0001E8  1180               	iorwf	(??_pf_mount+8)& (0+255),w,b
  8629  0001EA  6F84               	movwf	(??_pf_mount+12)& (0+255),b
  8630  0001EC  517D               	movf	(??_pf_mount+5)& (0+255),w,b
  8631  0001EE  1181               	iorwf	(??_pf_mount+9)& (0+255),w,b
  8632  0001F0  6F85               	movwf	(??_pf_mount+13)& (0+255),b
  8633  0001F2  5178               	movf	??_pf_mount& (0+255),w,b
  8634  0001F4  1182               	iorwf	(??_pf_mount+10)& (0+255),w,b
  8635  0001F6  6F86               	movwf	(??_pf_mount+14)& (0+255),b
  8636  0001F8  5179               	movf	(??_pf_mount+1)& (0+255),w,b
  8637  0001FA  1183               	iorwf	(??_pf_mount+11)& (0+255),w,b
  8638  0001FC  6F87               	movwf	(??_pf_mount+15)& (0+255),b
  8639  0001FE  0E00               	movlw	0
  8640  000200  1184               	iorwf	(??_pf_mount+12)& (0+255),w,b
  8641  000202  6F88               	movwf	(??_pf_mount+16)& (0+255),b
  8642  000204  0E00               	movlw	0
  8643  000206  1185               	iorwf	(??_pf_mount+13)& (0+255),w,b
  8644  000208  6F89               	movwf	(??_pf_mount+17)& (0+255),b
  8645  00020A  51A5               	movf	(pf_mount@buf+23)& (0+255),w,b
  8646  00020C  1186               	iorwf	(??_pf_mount+14)& (0+255),w,b
  8647  00020E  6FBE               	movwf	pf_mount@fsize& (0+255),b
  8648  000210  5187               	movf	(??_pf_mount+15)& (0+255),w,b
  8649  000212  6FBF               	movwf	(pf_mount@fsize+1)& (0+255),b
  8650  000214  5188               	movf	(??_pf_mount+16)& (0+255),w,b
  8651  000216  6FC0               	movwf	(pf_mount@fsize+2)& (0+255),b
  8652  000218  5189               	movf	(??_pf_mount+17)& (0+255),w,b
  8653  00021A  6FC1               	movwf	(pf_mount@fsize+3)& (0+255),b
  8654  00021C                     l1003:
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;pff.c: 789: fsize *= buf[16-13];
  8658                           
  8659                           ; BSR set to: 0
  8660  00021C  C0BE  F01A         	movff	pf_mount@fsize,___lmul@multiplier
  8661  000220  C0BF  F01B         	movff	pf_mount@fsize+1,___lmul@multiplier+1
  8662  000224  C0C0  F01C         	movff	pf_mount@fsize+2,___lmul@multiplier+2
  8663  000228  C0C1  F01D         	movff	pf_mount@fsize+3,___lmul@multiplier+3
  8664  00022C  5191               	movf	(pf_mount@buf+3)& (0+255),w,b
  8665  00022E  6E1E               	movwf	___lmul@multiplicand,c
  8666  000230  6A1F               	clrf	___lmul@multiplicand+1,c
  8667  000232  6A20               	clrf	___lmul@multiplicand+2,c
  8668  000234  6A21               	clrf	___lmul@multiplicand+3,c
  8669  000236  ECE7  F017         	call	___lmul	;wreg free
  8670  00023A  C01A  F0BE         	movff	?___lmul,pf_mount@fsize
  8671  00023E  C01B  F0BF         	movff	?___lmul+1,pf_mount@fsize+1
  8672  000242  C01C  F0C0         	movff	?___lmul+2,pf_mount@fsize+2
  8673  000246  C01D  F0C1         	movff	?___lmul+3,pf_mount@fsize+3
  8674                           
  8675                           ;pff.c: 790: fs->fatbase = bsect + (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYT
      +                          E*)(buf+14-13));
  8676  00024A  0100               	movlb	0	; () banked
  8677  00024C  518F               	movf	(pf_mount@buf+1)& (0+255),w,b
  8678  00024E  C090  F078         	movff	pf_mount@buf+2,??_pf_mount
  8679  000252  6B79               	clrf	(??_pf_mount+1)& (0+255),b
  8680  000254  C078  F079         	movff	??_pf_mount,??_pf_mount+1
  8681  000258  6B78               	clrf	??_pf_mount& (0+255),b
  8682  00025A  1378               	iorwf	??_pf_mount& (0+255),f,b
  8683  00025C  0E00               	movlw	0
  8684  00025E  1379               	iorwf	(??_pf_mount+1)& (0+255),f,b
  8685  000260  5178               	movf	??_pf_mount& (0+255),w,b
  8686  000262  25BA               	addwf	pf_mount@bsect& (0+255),w,b
  8687  000264  6F7A               	movwf	(??_pf_mount+2)& (0+255),b
  8688  000266  5179               	movf	(??_pf_mount+1)& (0+255),w,b
  8689  000268  21BB               	addwfc	(pf_mount@bsect+1)& (0+255),w,b
  8690  00026A  6F7B               	movwf	(??_pf_mount+3)& (0+255),b
  8691  00026C  0E00               	movlw	0
  8692  00026E  21BC               	addwfc	(pf_mount@bsect+2)& (0+255),w,b
  8693  000270  6F7C               	movwf	(??_pf_mount+4)& (0+255),b
  8694  000272  0E00               	movlw	0
  8695  000274  21BD               	addwfc	(pf_mount@bsect+3)& (0+255),w,b
  8696  000276  6F7D               	movwf	(??_pf_mount+5)& (0+255),b
  8697  000278  EE20 F00A          	lfsr	2,10
  8698  00027C  5176               	movf	pf_mount@fs& (0+255),w,b
  8699  00027E  26D9               	addwf	fsr2l,f,c
  8700  000280  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  8701  000282  22DA               	addwfc	fsr2h,f,c
  8702  000284  C07A  FFDE         	movff	??_pf_mount+2,postinc2
  8703  000288  C07B  FFDE         	movff	??_pf_mount+3,postinc2
  8704  00028C  C07C  FFDE         	movff	??_pf_mount+4,postinc2
  8705  000290  C07D  FFDE         	movff	??_pf_mount+5,postinc2
  8706                           
  8707                           ; BSR set to: 0
  8708                           ;pff.c: 791: fs->csize = buf[13-13];
  8709  000294  EE20 F002          	lfsr	2,2
  8710  000298  5176               	movf	pf_mount@fs& (0+255),w,b
  8711  00029A  26D9               	addwf	fsr2l,f,c
  8712  00029C  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  8713  00029E  22DA               	addwfc	fsr2h,f,c
  8714  0002A0  C08E  FFDF         	movff	pf_mount@buf,indf2
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;pff.c: 792: fs->n_rootdir = (WORD)(((WORD)*((BYTE*)(buf+17-13)+1)<<8)|(WORD)*(BYTE*)(bu
      +                          f+17-13));
  8718  0002A4  5192               	movf	(pf_mount@buf+4)& (0+255),w,b
  8719  0002A6  C093  F078         	movff	pf_mount@buf+5,??_pf_mount
  8720  0002AA  6B79               	clrf	(??_pf_mount+1)& (0+255),b
  8721  0002AC  C078  F079         	movff	??_pf_mount,??_pf_mount+1
  8722  0002B0  6B78               	clrf	??_pf_mount& (0+255),b
  8723  0002B2  1378               	iorwf	??_pf_mount& (0+255),f,b
  8724  0002B4  0E00               	movlw	0
  8725  0002B6  1379               	iorwf	(??_pf_mount+1)& (0+255),f,b
  8726  0002B8  EE20 F004          	lfsr	2,4
  8727  0002BC  5176               	movf	pf_mount@fs& (0+255),w,b
  8728  0002BE  26D9               	addwf	fsr2l,f,c
  8729  0002C0  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  8730  0002C2  22DA               	addwfc	fsr2h,f,c
  8731  0002C4  C078  FFDE         	movff	??_pf_mount,postinc2
  8732  0002C8  C079  FFDD         	movff	??_pf_mount+1,postdec2
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;pff.c: 793: tsect = (WORD)(((WORD)*((BYTE*)(buf+19-13)+1)<<8)|(WORD)*(BYTE*)(buf+19-13)
      +                          );
  8736  0002CC  5194               	movf	(pf_mount@buf+6)& (0+255),w,b
  8737  0002CE  C095  F078         	movff	pf_mount@buf+7,??_pf_mount
  8738  0002D2  6B79               	clrf	(??_pf_mount+1)& (0+255),b
  8739  0002D4  C078  F079         	movff	??_pf_mount,??_pf_mount+1
  8740  0002D8  6B78               	clrf	??_pf_mount& (0+255),b
  8741  0002DA  1378               	iorwf	??_pf_mount& (0+255),f,b
  8742  0002DC  0E00               	movlw	0
  8743  0002DE  1379               	iorwf	(??_pf_mount+1)& (0+255),f,b
  8744  0002E0  C078  F0B2         	movff	??_pf_mount,pf_mount@tsect
  8745  0002E4  C079  F0B3         	movff	??_pf_mount+1,pf_mount@tsect+1
  8746  0002E8  6BB4               	clrf	(pf_mount@tsect+2)& (0+255),b
  8747  0002EA  6BB5               	clrf	(pf_mount@tsect+3)& (0+255),b
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;pff.c: 794: if (!tsect) tsect = (DWORD)(((DWORD)*((BYTE*)(buf+32-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+32-13)+2)<<16)|((WORD)*((BYTE*)(buf+32-13)+1)<<8)|*(BYTE*)(buf+32-13));
  8751  0002EC  51B2               	movf	pf_mount@tsect& (0+255),w,b
  8752  0002EE  11B3               	iorwf	(pf_mount@tsect+1)& (0+255),w,b
  8753  0002F0  11B4               	iorwf	(pf_mount@tsect+2)& (0+255),w,b
  8754  0002F2  11B5               	iorwf	(pf_mount@tsect+3)& (0+255),w,b
  8755  0002F4  A4D8               	btfss	status,2,c
  8756  0002F6  D039               	goto	l1004
  8757                           
  8758                           ; BSR set to: 0
  8759  0002F8  51A2               	movf	(pf_mount@buf+20)& (0+255),w,b
  8760  0002FA  6F79               	movwf	(??_pf_mount+1)& (0+255),b
  8761  0002FC  6B78               	clrf	??_pf_mount& (0+255),b
  8762  0002FE  C0A3  F07A         	movff	pf_mount@buf+21,??_pf_mount+2
  8763  000302  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  8764  000304  6B7C               	clrf	(??_pf_mount+4)& (0+255),b
  8765  000306  6B7D               	clrf	(??_pf_mount+5)& (0+255),b
  8766  000308  C07B  F07D         	movff	??_pf_mount+3,??_pf_mount+5
  8767  00030C  C07A  F07C         	movff	??_pf_mount+2,??_pf_mount+4
  8768  000310  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  8769  000312  6B7A               	clrf	(??_pf_mount+2)& (0+255),b
  8770  000314  C0A4  F07E         	movff	pf_mount@buf+22,??_pf_mount+6
  8771  000318  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  8772  00031A  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  8773  00031C  6B81               	clrf	(??_pf_mount+9)& (0+255),b
  8774  00031E  C07E  F081         	movff	??_pf_mount+6,??_pf_mount+9
  8775  000322  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  8776  000324  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  8777  000326  6B7E               	clrf	(??_pf_mount+6)& (0+255),b
  8778  000328  517A               	movf	(??_pf_mount+2)& (0+255),w,b
  8779  00032A  117E               	iorwf	(??_pf_mount+6)& (0+255),w,b
  8780  00032C  6F82               	movwf	(??_pf_mount+10)& (0+255),b
  8781  00032E  517B               	movf	(??_pf_mount+3)& (0+255),w,b
  8782  000330  117F               	iorwf	(??_pf_mount+7)& (0+255),w,b
  8783  000332  6F83               	movwf	(??_pf_mount+11)& (0+255),b
  8784  000334  517C               	movf	(??_pf_mount+4)& (0+255),w,b
  8785  000336  1180               	iorwf	(??_pf_mount+8)& (0+255),w,b
  8786  000338  6F84               	movwf	(??_pf_mount+12)& (0+255),b
  8787  00033A  517D               	movf	(??_pf_mount+5)& (0+255),w,b
  8788  00033C  1181               	iorwf	(??_pf_mount+9)& (0+255),w,b
  8789  00033E  6F85               	movwf	(??_pf_mount+13)& (0+255),b
  8790  000340  5178               	movf	??_pf_mount& (0+255),w,b
  8791  000342  1182               	iorwf	(??_pf_mount+10)& (0+255),w,b
  8792  000344  6F86               	movwf	(??_pf_mount+14)& (0+255),b
  8793  000346  5179               	movf	(??_pf_mount+1)& (0+255),w,b
  8794  000348  1183               	iorwf	(??_pf_mount+11)& (0+255),w,b
  8795  00034A  6F87               	movwf	(??_pf_mount+15)& (0+255),b
  8796  00034C  0E00               	movlw	0
  8797  00034E  1184               	iorwf	(??_pf_mount+12)& (0+255),w,b
  8798  000350  6F88               	movwf	(??_pf_mount+16)& (0+255),b
  8799  000352  0E00               	movlw	0
  8800  000354  1185               	iorwf	(??_pf_mount+13)& (0+255),w,b
  8801  000356  6F89               	movwf	(??_pf_mount+17)& (0+255),b
  8802  000358  51A1               	movf	(pf_mount@buf+19)& (0+255),w,b
  8803  00035A  1186               	iorwf	(??_pf_mount+14)& (0+255),w,b
  8804  00035C  6FB2               	movwf	pf_mount@tsect& (0+255),b
  8805  00035E  5187               	movf	(??_pf_mount+15)& (0+255),w,b
  8806  000360  6FB3               	movwf	(pf_mount@tsect+1)& (0+255),b
  8807  000362  5188               	movf	(??_pf_mount+16)& (0+255),w,b
  8808  000364  6FB4               	movwf	(pf_mount@tsect+2)& (0+255),b
  8809  000366  5189               	movf	(??_pf_mount+17)& (0+255),w,b
  8810  000368  6FB5               	movwf	(pf_mount@tsect+3)& (0+255),b
  8811  00036A                     l1004:
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;pff.c: 795: mclst = (tsect
  8815                           ;pff.c: 796: - (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYTE*)(buf+14-13)) - fs
      +                          ize - fs->n_rootdir / 16
  8816                           ;pff.c: 797: ) / fs->csize + 2;
  8817                           
  8818                           ; BSR set to: 0
  8819  00036A  EE20 F004          	lfsr	2,4
  8820  00036E  5176               	movf	pf_mount@fs& (0+255),w,b
  8821  000370  26D9               	addwf	fsr2l,f,c
  8822  000372  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  8823  000374  22DA               	addwfc	fsr2h,f,c
  8824  000376  CFDE F078          	movff	postinc2,??_pf_mount
  8825  00037A  CFDD F079          	movff	postdec2,??_pf_mount+1
  8826  00037E  0E04               	movlw	4
  8827  000380  6F7A               	movwf	(??_pf_mount+2)& (0+255),b
  8828  000382                     u9065:
  8829  000382  90D8               	bcf	status,0,c
  8830  000384  3379               	rrcf	(??_pf_mount+1)& (0+255),f,b
  8831  000386  3378               	rrcf	??_pf_mount& (0+255),f,b
  8832  000388  2F7A               	decfsz	(??_pf_mount+2)& (0+255),f,b
  8833  00038A  D7FB               	goto	u9065
  8834  00038C  518F               	movf	(pf_mount@buf+1)& (0+255),w,b
  8835  00038E  C090  F07B         	movff	pf_mount@buf+2,??_pf_mount+3
  8836  000392  6B7C               	clrf	(??_pf_mount+4)& (0+255),b
  8837  000394  C07B  F07C         	movff	??_pf_mount+3,??_pf_mount+4
  8838  000398  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  8839  00039A  137B               	iorwf	(??_pf_mount+3)& (0+255),f,b
  8840  00039C  0E00               	movlw	0
  8841  00039E  137C               	iorwf	(??_pf_mount+4)& (0+255),f,b
  8842  0003A0  517B               	movf	(??_pf_mount+3)& (0+255),w,b
  8843  0003A2  2578               	addwf	??_pf_mount& (0+255),w,b
  8844  0003A4  6F7D               	movwf	(??_pf_mount+5)& (0+255),b
  8845  0003A6  517C               	movf	(??_pf_mount+4)& (0+255),w,b
  8846  0003A8  2179               	addwfc	(??_pf_mount+1)& (0+255),w,b
  8847  0003AA  6F7E               	movwf	(??_pf_mount+6)& (0+255),b
  8848  0003AC  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  8849  0003AE  B0D8               	btfsc	status,0,c
  8850  0003B0  2B7F               	incf	(??_pf_mount+7)& (0+255),f,b
  8851  0003B2  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  8852  0003B4  51BE               	movf	pf_mount@fsize& (0+255),w,b
  8853  0003B6  257D               	addwf	(??_pf_mount+5)& (0+255),w,b
  8854  0003B8  6F81               	movwf	(??_pf_mount+9)& (0+255),b
  8855  0003BA  51BF               	movf	(pf_mount@fsize+1)& (0+255),w,b
  8856  0003BC  217E               	addwfc	(??_pf_mount+6)& (0+255),w,b
  8857  0003BE  6F82               	movwf	(??_pf_mount+10)& (0+255),b
  8858  0003C0  51C0               	movf	(pf_mount@fsize+2)& (0+255),w,b
  8859  0003C2  217F               	addwfc	(??_pf_mount+7)& (0+255),w,b
  8860  0003C4  6F83               	movwf	(??_pf_mount+11)& (0+255),b
  8861  0003C6  51C1               	movf	(pf_mount@fsize+3)& (0+255),w,b
  8862  0003C8  2180               	addwfc	(??_pf_mount+8)& (0+255),w,b
  8863  0003CA  6F84               	movwf	(??_pf_mount+12)& (0+255),b
  8864  0003CC  1F81               	comf	(??_pf_mount+9)& (0+255),f,b
  8865  0003CE  1F82               	comf	(??_pf_mount+10)& (0+255),f,b
  8866  0003D0  1F83               	comf	(??_pf_mount+11)& (0+255),f,b
  8867  0003D2  1F84               	comf	(??_pf_mount+12)& (0+255),f,b
  8868  0003D4  2B81               	incf	(??_pf_mount+9)& (0+255),f,b
  8869  0003D6  0E00               	movlw	0
  8870  0003D8  2382               	addwfc	(??_pf_mount+10)& (0+255),f,b
  8871  0003DA  2383               	addwfc	(??_pf_mount+11)& (0+255),f,b
  8872  0003DC  2384               	addwfc	(??_pf_mount+12)& (0+255),f,b
  8873  0003DE  51B2               	movf	pf_mount@tsect& (0+255),w,b
  8874  0003E0  2581               	addwf	(??_pf_mount+9)& (0+255),w,b
  8875  0003E2  6E1A               	movwf	___lldiv@dividend,c
  8876  0003E4  51B3               	movf	(pf_mount@tsect+1)& (0+255),w,b
  8877  0003E6  2182               	addwfc	(??_pf_mount+10)& (0+255),w,b
  8878  0003E8  6E1B               	movwf	___lldiv@dividend+1,c
  8879  0003EA  51B4               	movf	(pf_mount@tsect+2)& (0+255),w,b
  8880  0003EC  2183               	addwfc	(??_pf_mount+11)& (0+255),w,b
  8881  0003EE  6E1C               	movwf	___lldiv@dividend+2,c
  8882  0003F0  51B5               	movf	(pf_mount@tsect+3)& (0+255),w,b
  8883  0003F2  2184               	addwfc	(??_pf_mount+12)& (0+255),w,b
  8884  0003F4  6E1D               	movwf	___lldiv@dividend+3,c
  8885  0003F6  EE20 F002          	lfsr	2,2
  8886  0003FA  5176               	movf	pf_mount@fs& (0+255),w,b
  8887  0003FC  26D9               	addwf	fsr2l,f,c
  8888  0003FE  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  8889  000400  22DA               	addwfc	fsr2h,f,c
  8890  000402  50DF               	movf	indf2,w,c
  8891  000404  6F85               	movwf	(??_pf_mount+13)& (0+255),b
  8892  000406  5185               	movf	(??_pf_mount+13)& (0+255),w,b
  8893  000408  6E1E               	movwf	___lldiv@divisor,c
  8894  00040A  6A1F               	clrf	___lldiv@divisor+1,c
  8895  00040C  6A20               	clrf	___lldiv@divisor+2,c
  8896  00040E  6A21               	clrf	___lldiv@divisor+3,c
  8897  000410  ECE7  F015         	call	___lldiv	;wreg free
  8898  000414  0E02               	movlw	2
  8899  000416  241A               	addwf	?___lldiv,w,c
  8900  000418  0100               	movlb	0	; () banked
  8901  00041A  6FB6               	movwf	pf_mount@mclst& (0+255),b
  8902  00041C  0E00               	movlw	0
  8903  00041E  201B               	addwfc	?___lldiv+1,w,c
  8904  000420  6FB7               	movwf	(pf_mount@mclst+1)& (0+255),b
  8905  000422  0E00               	movlw	0
  8906  000424  201C               	addwfc	?___lldiv+2,w,c
  8907  000426  6FB8               	movwf	(pf_mount@mclst+2)& (0+255),b
  8908  000428  0E00               	movlw	0
  8909  00042A  201D               	addwfc	?___lldiv+3,w,c
  8910  00042C  6FB9               	movwf	(pf_mount@mclst+3)& (0+255),b
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;pff.c: 798: fs->n_fatent = (DWORD)mclst;
  8914  00042E  EE20 F006          	lfsr	2,6
  8915  000432  5176               	movf	pf_mount@fs& (0+255),w,b
  8916  000434  26D9               	addwf	fsr2l,f,c
  8917  000436  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  8918  000438  22DA               	addwfc	fsr2h,f,c
  8919  00043A  C0B6  FFDE         	movff	pf_mount@mclst,postinc2
  8920  00043E  C0B7  FFDE         	movff	pf_mount@mclst+1,postinc2
  8921  000442  C0B8  FFDE         	movff	pf_mount@mclst+2,postinc2
  8922  000446  C0B9  FFDE         	movff	pf_mount@mclst+3,postinc2
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;pff.c: 801: if (1 && mclst < 0xFF7)
  8926  00044A  0E00               	movlw	0
  8927  00044C  6FC2               	movwf	pf_mount@fmt& (0+255),b
  8928                           
  8929                           ; BSR set to: 0
  8930  00044E  51B9               	movf	(pf_mount@mclst+3)& (0+255),w,b
  8931  000450  11B8               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  8932  000452  E108               	bnz	l8264
  8933  000454  0EF7               	movlw	247
  8934  000456  5DB6               	subwf	pf_mount@mclst& (0+255),w,b
  8935  000458  0E0F               	movlw	15
  8936  00045A  59B7               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  8937  00045C  B0D8               	btfsc	status,0,c
  8938  00045E  D002               	goto	l1005
  8939                           
  8940                           ; BSR set to: 0
  8941                           ;pff.c: 802: fmt = 1;
  8942  000460  0E01               	movlw	1
  8943  000462  6FC2               	movwf	pf_mount@fmt& (0+255),b
  8944  000464                     l1005:
  8945  000464                     l8264:
  8946                           
  8947                           ; BSR set to: 0
  8948  000464  51B9               	movf	(pf_mount@mclst+3)& (0+255),w,b
  8949  000466  11B8               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  8950  000468  E106               	bnz	u9080
  8951  00046A  0EF8               	movlw	248
  8952  00046C  5DB6               	subwf	pf_mount@mclst& (0+255),w,b
  8953  00046E  0E0F               	movlw	15
  8954  000470  59B7               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  8955  000472  A0D8               	btfss	status,0,c
  8956  000474  D00B               	goto	l1006
  8957  000476                     u9080:
  8958                           
  8959                           ; BSR set to: 0
  8960  000476  51B9               	movf	(pf_mount@mclst+3)& (0+255),w,b
  8961  000478  11B8               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  8962  00047A  E108               	bnz	l8270
  8963  00047C  0EF7               	movlw	247
  8964  00047E  5DB6               	subwf	pf_mount@mclst& (0+255),w,b
  8965  000480  0EFF               	movlw	255
  8966  000482  59B7               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  8967  000484  B0D8               	btfsc	status,0,c
  8968  000486  D002               	goto	l1006
  8969                           
  8970                           ; BSR set to: 0
  8971                           ;pff.c: 804: fmt = 2;
  8972  000488  0E02               	movlw	2
  8973  00048A  6FC2               	movwf	pf_mount@fmt& (0+255),b
  8974  00048C                     l1006:
  8975  00048C                     l8270:
  8976                           
  8977                           ; BSR set to: 0
  8978  00048C  51B9               	movf	(pf_mount@mclst+3)& (0+255),w,b
  8979  00048E  11B8               	iorwf	(pf_mount@mclst+2)& (0+255),w,b
  8980  000490  E106               	bnz	u9100
  8981  000492  0EF7               	movlw	247
  8982  000494  5DB6               	subwf	pf_mount@mclst& (0+255),w,b
  8983  000496  0EFF               	movlw	255
  8984  000498  59B7               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  8985  00049A  A0D8               	btfss	status,0,c
  8986  00049C  D002               	goto	l1007
  8987  00049E                     u9100:
  8988                           
  8989                           ; BSR set to: 0
  8990                           ;pff.c: 806: fmt = 3;
  8991  00049E  0E03               	movlw	3
  8992  0004A0  6FC2               	movwf	pf_mount@fmt& (0+255),b
  8993  0004A2                     l1007:
  8994                           
  8995                           ; BSR set to: 0
  8996                           ;pff.c: 807: if (!fmt) return FR_NO_FILESYSTEM;
  8997  0004A2  51C2               	movf	pf_mount@fmt& (0+255),w,b
  8998  0004A4  A4D8               	btfss	status,2,c
  8999  0004A6  D002               	goto	l1008
  9000                           
  9001                           ; BSR set to: 0
  9002  0004A8  0E06               	movlw	6
  9003                           
  9004                           ; BSR set to: 0
  9005  0004AA  0012               	return	
  9006  0004AC                     l1008:
  9007                           
  9008                           ; BSR set to: 0
  9009                           ;pff.c: 810: if (0 || (1 && fmt == 3))
  9010                           
  9011                           ; BSR set to: 0
  9012  0004AC  C076  FFD9         	movff	pf_mount@fs,fsr2l
  9013  0004B0  C077  FFDA         	movff	pf_mount@fs+1,fsr2h
  9014  0004B4  C0C2  FFDF         	movff	pf_mount@fmt,indf2
  9015                           
  9016                           ; BSR set to: 0
  9017  0004B8  0E03               	movlw	3
  9018  0004BA  19C2               	xorwf	pf_mount@fmt& (0+255),w,b
  9019  0004BC  A4D8               	btfss	status,2,c
  9020  0004BE  D048               	goto	l1009
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;pff.c: 811: fs->dirbase = (DWORD)(((DWORD)*((BYTE*)(buf+(44-13))+3)<<24)|((DWORD)*((BYT
      +                          E*)(buf+(44-13))+2)<<16)|((WORD)*((BYTE*)(buf+(44-13))+1)<<8)|*(BYTE*)(buf+(44-13)));
  9024                           
  9025                           ; BSR set to: 0
  9026  0004C0  51AE               	movf	(pf_mount@buf+32)& (0+255),w,b
  9027  0004C2  6F79               	movwf	(??_pf_mount+1)& (0+255),b
  9028  0004C4  6B78               	clrf	??_pf_mount& (0+255),b
  9029  0004C6  C0AF  F07A         	movff	pf_mount@buf+33,??_pf_mount+2
  9030  0004CA  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  9031  0004CC  6B7C               	clrf	(??_pf_mount+4)& (0+255),b
  9032  0004CE  6B7D               	clrf	(??_pf_mount+5)& (0+255),b
  9033  0004D0  C07B  F07D         	movff	??_pf_mount+3,??_pf_mount+5
  9034  0004D4  C07A  F07C         	movff	??_pf_mount+2,??_pf_mount+4
  9035  0004D8  6B7B               	clrf	(??_pf_mount+3)& (0+255),b
  9036  0004DA  6B7A               	clrf	(??_pf_mount+2)& (0+255),b
  9037  0004DC  C0B0  F07E         	movff	pf_mount@buf+34,??_pf_mount+6
  9038  0004E0  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  9039  0004E2  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  9040  0004E4  6B81               	clrf	(??_pf_mount+9)& (0+255),b
  9041  0004E6  C07E  F081         	movff	??_pf_mount+6,??_pf_mount+9
  9042  0004EA  6B80               	clrf	(??_pf_mount+8)& (0+255),b
  9043  0004EC  6B7F               	clrf	(??_pf_mount+7)& (0+255),b
  9044  0004EE  6B7E               	clrf	(??_pf_mount+6)& (0+255),b
  9045  0004F0  517A               	movf	(??_pf_mount+2)& (0+255),w,b
  9046  0004F2  117E               	iorwf	(??_pf_mount+6)& (0+255),w,b
  9047  0004F4  6F82               	movwf	(??_pf_mount+10)& (0+255),b
  9048  0004F6  517B               	movf	(??_pf_mount+3)& (0+255),w,b
  9049  0004F8  117F               	iorwf	(??_pf_mount+7)& (0+255),w,b
  9050  0004FA  6F83               	movwf	(??_pf_mount+11)& (0+255),b
  9051  0004FC  517C               	movf	(??_pf_mount+4)& (0+255),w,b
  9052  0004FE  1180               	iorwf	(??_pf_mount+8)& (0+255),w,b
  9053  000500  6F84               	movwf	(??_pf_mount+12)& (0+255),b
  9054  000502  517D               	movf	(??_pf_mount+5)& (0+255),w,b
  9055  000504  1181               	iorwf	(??_pf_mount+9)& (0+255),w,b
  9056  000506  6F85               	movwf	(??_pf_mount+13)& (0+255),b
  9057  000508  5178               	movf	??_pf_mount& (0+255),w,b
  9058  00050A  1182               	iorwf	(??_pf_mount+10)& (0+255),w,b
  9059  00050C  6F86               	movwf	(??_pf_mount+14)& (0+255),b
  9060  00050E  5179               	movf	(??_pf_mount+1)& (0+255),w,b
  9061  000510  1183               	iorwf	(??_pf_mount+11)& (0+255),w,b
  9062  000512  6F87               	movwf	(??_pf_mount+15)& (0+255),b
  9063  000514  0E00               	movlw	0
  9064  000516  1184               	iorwf	(??_pf_mount+12)& (0+255),w,b
  9065  000518  6F88               	movwf	(??_pf_mount+16)& (0+255),b
  9066  00051A  0E00               	movlw	0
  9067  00051C  1185               	iorwf	(??_pf_mount+13)& (0+255),w,b
  9068  00051E  6F89               	movwf	(??_pf_mount+17)& (0+255),b
  9069  000520  51AD               	movf	(pf_mount@buf+31)& (0+255),w,b
  9070  000522  1186               	iorwf	(??_pf_mount+14)& (0+255),w,b
  9071  000524  6F8A               	movwf	(??_pf_mount+18)& (0+255),b
  9072  000526  5187               	movf	(??_pf_mount+15)& (0+255),w,b
  9073  000528  6F8B               	movwf	(??_pf_mount+19)& (0+255),b
  9074  00052A  5188               	movf	(??_pf_mount+16)& (0+255),w,b
  9075  00052C  6F8C               	movwf	(??_pf_mount+20)& (0+255),b
  9076  00052E  5189               	movf	(??_pf_mount+17)& (0+255),w,b
  9077  000530  6F8D               	movwf	(??_pf_mount+21)& (0+255),b
  9078  000532  EE20 F00E          	lfsr	2,14
  9079  000536  5176               	movf	pf_mount@fs& (0+255),w,b
  9080  000538  26D9               	addwf	fsr2l,f,c
  9081  00053A  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9082  00053C  22DA               	addwfc	fsr2h,f,c
  9083  00053E  C08A  FFDE         	movff	??_pf_mount+18,postinc2
  9084  000542  C08B  FFDE         	movff	??_pf_mount+19,postinc2
  9085  000546  C08C  FFDE         	movff	??_pf_mount+20,postinc2
  9086  00054A  C08D  FFDE         	movff	??_pf_mount+21,postinc2
  9087  00054E  D028               	goto	l1012
  9088  000550                     l1009:
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;pff.c: 812: else
  9092                           ;pff.c: 813: fs->dirbase = fs->fatbase + fsize;
  9093                           
  9094                           ; BSR set to: 0
  9095  000550  EE20 F00A          	lfsr	2,10
  9096  000554  5176               	movf	pf_mount@fs& (0+255),w,b
  9097  000556  26D9               	addwf	fsr2l,f,c
  9098  000558  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9099  00055A  22DA               	addwfc	fsr2h,f,c
  9100  00055C  CFDE F078          	movff	postinc2,??_pf_mount
  9101  000560  CFDE F079          	movff	postinc2,??_pf_mount+1
  9102  000564  CFDE F07A          	movff	postinc2,??_pf_mount+2
  9103  000568  CFDE F07B          	movff	postinc2,??_pf_mount+3
  9104  00056C  51BE               	movf	pf_mount@fsize& (0+255),w,b
  9105  00056E  2578               	addwf	??_pf_mount& (0+255),w,b
  9106  000570  6F7C               	movwf	(??_pf_mount+4)& (0+255),b
  9107  000572  51BF               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9108  000574  2179               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9109  000576  6F7D               	movwf	(??_pf_mount+5)& (0+255),b
  9110  000578  51C0               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9111  00057A  217A               	addwfc	(??_pf_mount+2)& (0+255),w,b
  9112  00057C  6F7E               	movwf	(??_pf_mount+6)& (0+255),b
  9113  00057E  51C1               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9114  000580  217B               	addwfc	(??_pf_mount+3)& (0+255),w,b
  9115  000582  6F7F               	movwf	(??_pf_mount+7)& (0+255),b
  9116  000584  EE20 F00E          	lfsr	2,14
  9117  000588  5176               	movf	pf_mount@fs& (0+255),w,b
  9118  00058A  26D9               	addwf	fsr2l,f,c
  9119  00058C  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9120  00058E  22DA               	addwfc	fsr2h,f,c
  9121  000590  C07C  FFDE         	movff	??_pf_mount+4,postinc2
  9122  000594  C07D  FFDE         	movff	??_pf_mount+5,postinc2
  9123  000598  C07E  FFDE         	movff	??_pf_mount+6,postinc2
  9124  00059C  C07F  FFDE         	movff	??_pf_mount+7,postinc2
  9125  0005A0                     l1012:
  9126                           
  9127                           ; BSR set to: 0
  9128                           ;pff.c: 814: fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;
  9129  0005A0  EE20 F00A          	lfsr	2,10
  9130  0005A4  5176               	movf	pf_mount@fs& (0+255),w,b
  9131  0005A6  26D9               	addwf	fsr2l,f,c
  9132  0005A8  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9133  0005AA  22DA               	addwfc	fsr2h,f,c
  9134  0005AC  CFDE F078          	movff	postinc2,??_pf_mount
  9135  0005B0  CFDE F079          	movff	postinc2,??_pf_mount+1
  9136  0005B4  CFDE F07A          	movff	postinc2,??_pf_mount+2
  9137  0005B8  CFDE F07B          	movff	postinc2,??_pf_mount+3
  9138  0005BC  EE20 F004          	lfsr	2,4
  9139  0005C0  5176               	movf	pf_mount@fs& (0+255),w,b
  9140  0005C2  26D9               	addwf	fsr2l,f,c
  9141  0005C4  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9142  0005C6  22DA               	addwfc	fsr2h,f,c
  9143  0005C8  CFDE F07C          	movff	postinc2,??_pf_mount+4
  9144  0005CC  CFDD F07D          	movff	postdec2,??_pf_mount+5
  9145  0005D0  0E04               	movlw	4
  9146  0005D2  6F7E               	movwf	(??_pf_mount+6)& (0+255),b
  9147  0005D4                     u9135:
  9148  0005D4  90D8               	bcf	status,0,c
  9149  0005D6  337D               	rrcf	(??_pf_mount+5)& (0+255),f,b
  9150  0005D8  337C               	rrcf	(??_pf_mount+4)& (0+255),f,b
  9151  0005DA  2F7E               	decfsz	(??_pf_mount+6)& (0+255),f,b
  9152  0005DC  D7FB               	goto	u9135
  9153  0005DE  517C               	movf	(??_pf_mount+4)& (0+255),w,b
  9154  0005E0  2578               	addwf	??_pf_mount& (0+255),w,b
  9155  0005E2  6F7F               	movwf	(??_pf_mount+7)& (0+255),b
  9156  0005E4  517D               	movf	(??_pf_mount+5)& (0+255),w,b
  9157  0005E6  2179               	addwfc	(??_pf_mount+1)& (0+255),w,b
  9158  0005E8  6F80               	movwf	(??_pf_mount+8)& (0+255),b
  9159  0005EA  0E00               	movlw	0
  9160  0005EC  217A               	addwfc	(??_pf_mount+2)& (0+255),w,b
  9161  0005EE  6F81               	movwf	(??_pf_mount+9)& (0+255),b
  9162  0005F0  0E00               	movlw	0
  9163  0005F2  217B               	addwfc	(??_pf_mount+3)& (0+255),w,b
  9164  0005F4  6F82               	movwf	(??_pf_mount+10)& (0+255),b
  9165  0005F6  51BE               	movf	pf_mount@fsize& (0+255),w,b
  9166  0005F8  257F               	addwf	(??_pf_mount+7)& (0+255),w,b
  9167  0005FA  6F83               	movwf	(??_pf_mount+11)& (0+255),b
  9168  0005FC  51BF               	movf	(pf_mount@fsize+1)& (0+255),w,b
  9169  0005FE  2180               	addwfc	(??_pf_mount+8)& (0+255),w,b
  9170  000600  6F84               	movwf	(??_pf_mount+12)& (0+255),b
  9171  000602  51C0               	movf	(pf_mount@fsize+2)& (0+255),w,b
  9172  000604  2181               	addwfc	(??_pf_mount+9)& (0+255),w,b
  9173  000606  6F85               	movwf	(??_pf_mount+13)& (0+255),b
  9174  000608  51C1               	movf	(pf_mount@fsize+3)& (0+255),w,b
  9175  00060A  2182               	addwfc	(??_pf_mount+10)& (0+255),w,b
  9176  00060C  6F86               	movwf	(??_pf_mount+14)& (0+255),b
  9177  00060E  EE20 F012          	lfsr	2,18
  9178  000612  5176               	movf	pf_mount@fs& (0+255),w,b
  9179  000614  26D9               	addwf	fsr2l,f,c
  9180  000616  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9181  000618  22DA               	addwfc	fsr2h,f,c
  9182  00061A  C083  FFDE         	movff	??_pf_mount+11,postinc2
  9183  00061E  C084  FFDE         	movff	??_pf_mount+12,postinc2
  9184  000622  C085  FFDE         	movff	??_pf_mount+13,postinc2
  9185  000626  C086  FFDE         	movff	??_pf_mount+14,postinc2
  9186                           
  9187                           ;pff.c: 816: fs->flag = 0;
  9188  00062A  EE20 F001          	lfsr	2,1
  9189  00062E  5176               	movf	pf_mount@fs& (0+255),w,b
  9190  000630  26D9               	addwf	fsr2l,f,c
  9191  000632  5177               	movf	(pf_mount@fs+1)& (0+255),w,b
  9192  000634  22DA               	addwfc	fsr2h,f,c
  9193  000636  0E00               	movlw	0
  9194  000638  6EDF               	movwf	indf2,c
  9195                           
  9196                           ; BSR set to: 0
  9197                           ;pff.c: 817: FatFs = fs;
  9198  00063A  C076  F030         	movff	pf_mount@fs,_FatFs
  9199  00063E  C077  F031         	movff	pf_mount@fs+1,_FatFs+1
  9200                           
  9201                           ; BSR set to: 0
  9202                           ;pff.c: 819: return FR_OK;
  9203  000642  0E00               	movlw	0
  9204  000644  0012               	return	
  9205  000646                     __end_of_pf_mount:
  9206                           	opt stack 0
  9207                           tosu	equ	0xFFF
  9208                           tosh	equ	0xFFE
  9209                           tosl	equ	0xFFD
  9210                           pclath	equ	0xFFA
  9211                           tblptru	equ	0xFF8
  9212                           tblptrh	equ	0xFF7
  9213                           tblptrl	equ	0xFF6
  9214                           tablat	equ	0xFF5
  9215                           prodh	equ	0xFF4
  9216                           prodl	equ	0xFF3
  9217                           intcon	equ	0xFF2
  9218                           intcon2	equ	0xFF1
  9219                           intcon3	equ	0xFF0
  9220                           postinc0	equ	0xFEE
  9221                           wreg	equ	0xFE8
  9222                           indf1	equ	0xFE7
  9223                           postinc1	equ	0xFE6
  9224                           postdec1	equ	0xFE5
  9225                           fsr1h	equ	0xFE2
  9226                           fsr1l	equ	0xFE1
  9227                           indf2	equ	0xFDF
  9228                           postinc2	equ	0xFDE
  9229                           postdec2	equ	0xFDD
  9230                           plusw2	equ	0xFDB
  9231                           fsr2h	equ	0xFDA
  9232                           fsr2l	equ	0xFD9
  9233                           status	equ	0xFD8
  9234                           
  9235 ;; *************** function _disk_initialize *****************
  9236 ;; Defined at:
  9237 ;;		line 57 in file "bibliotecas/diskio.c"
  9238 ;; Parameters:    Size  Location     Type
  9239 ;;		None
  9240 ;; Auto vars:     Size  Location     Type
  9241 ;;  count2          2    5[BANK0 ] int 
  9242 ;;  count1          2    2[BANK0 ] int 
  9243 ;;  i               2    0[BANK0 ] int 
  9244 ;;  buff            1    7[BANK0 ] unsigned char 
  9245 ;;  stat            1    4[BANK0 ] unsigned char 
  9246 ;; Return value:  Size  Location     Type
  9247 ;;                  1    wreg      unsigned char 
  9248 ;; Registers used:
  9249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9250 ;; Tracked objects:
  9251 ;;		On entry : 0/0
  9252 ;;		On exit  : 0/0
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9255 ;;      Params:         0       0       0       0       0       0       0       0       0
  9256 ;;      Locals:         0       8       0       0       0       0       0       0       0
  9257 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9258 ;;      Totals:         2       8       0       0       0       0       0       0       0
  9259 ;;Total ram usage:       10 bytes
  9260 ;; Hardware stack levels used:    1
  9261 ;; Hardware stack levels required when called:    5
  9262 ;; This function calls:
  9263 ;;		_command
  9264 ;;		_dummy_clocks
  9265 ;;		_escreve_cmd_lcd
  9266 ;;		_escreve_frase_ram_lcd
  9267 ;;		_posicao_cursor_lcd
  9268 ;;		_proceed
  9269 ;;		_reset
  9270 ;;		_response
  9271 ;; This function is called by:
  9272 ;;		_pf_mount
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           	psect	text31
  9277  00161C                     __ptext31:
  9278                           	opt stack 0
  9279  00161C                     _disk_initialize:
  9280                           	opt stack 22
  9281                           
  9282                           ;diskio.c: 59: DSTATUS stat;
  9283                           ;diskio.c: 60: int i = 0, count1 = 0, count2 = 0;
  9284                           
  9285                           ;incstack = 0
  9286  00161C  0E00               	movlw	0
  9287  00161E  0100               	movlb	0	; () banked
  9288  001620  6F61               	movwf	(disk_initialize@i+1)& (0+255),b
  9289  001622  0E00               	movlw	0
  9290  001624  6F60               	movwf	disk_initialize@i& (0+255),b
  9291  001626  0E00               	movlw	0
  9292  001628  6F63               	movwf	(disk_initialize@count1+1)& (0+255),b
  9293  00162A  0E00               	movlw	0
  9294  00162C  6F62               	movwf	disk_initialize@count1& (0+255),b
  9295  00162E  0E00               	movlw	0
  9296  001630  6F66               	movwf	(disk_initialize@count2+1)& (0+255),b
  9297  001632  0E00               	movlw	0
  9298  001634  6F65               	movwf	disk_initialize@count2& (0+255),b
  9299                           
  9300                           ; BSR set to: 0
  9301                           ;diskio.c: 61: unsigned char buff;
  9302                           ;diskio.c: 62: reset();
  9303  001636  EC65  F016         	call	_reset	;wreg free
  9304                           
  9305                           ;diskio.c: 63: posicao_cursor_lcd(1,0);
  9306  00163A  0E00               	movlw	0
  9307  00163C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  9308  00163E  0E01               	movlw	1
  9309  001640  EC4C  F017         	call	_posicao_cursor_lcd
  9310                           
  9311                           ;diskio.c: 64: escreve_frase_ram_lcd("Cartao Aceito");
  9312  001644  0E88               	movlw	low STR_20
  9313  001646  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  9314  001648  0E61               	movlw	high STR_20
  9315  00164A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  9316  00164C  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  9317                           
  9318                           ;diskio.c: 65: _delay((unsigned long)((500)*(48000000/4000.0)));
  9319  001650  0E1F               	movlw	31
  9320  001652  6E2B               	movwf	(??_disk_initialize+1)& (0+255),c
  9321  001654  0E71               	movlw	113
  9322  001656  6E2A               	movwf	??_disk_initialize& (0+255),c
  9323  001658  0E1E               	movlw	30
  9324  00165A                     u10747:
  9325  00165A  2EE8               	decfsz	wreg,f,c
  9326  00165C  D7FE               	bra	u10747
  9327  00165E  2E2A               	decfsz	??_disk_initialize& (0+255),f,c
  9328  001660  D7FC               	bra	u10747
  9329  001662  2E2B               	decfsz	(??_disk_initialize+1)& (0+255),f,c
  9330  001664  D7FA               	bra	u10747
  9331  001666  D000               	nop2	
  9332                           
  9333                           ;diskio.c: 66: dummy_clocks(8);
  9334  001668  0E08               	movlw	8
  9335  00166A  ECCA  F018         	call	_dummy_clocks
  9336                           
  9337                           ;diskio.c: 67: command(0X41, 0X00000000, 0XFF);
  9338  00166E  0E00               	movlw	0
  9339  001670  6E1C               	movwf	command@arg,c
  9340  001672  0E00               	movlw	0
  9341  001674  6E1D               	movwf	command@arg+1,c
  9342  001676  0E00               	movlw	0
  9343  001678  6E1E               	movwf	command@arg+2,c
  9344  00167A  0E00               	movlw	0
  9345  00167C  6E1F               	movwf	command@arg+3,c
  9346  00167E  0EFF               	movlw	255
  9347  001680  6E20               	movwf	command@CRC,c
  9348  001682  0E41               	movlw	65
  9349  001684  ECE9  F018         	call	_command
  9350                           
  9351                           ;diskio.c: 68: proceed();
  9352  001688  ECFC  F019         	call	_proceed	;wreg free
  9353                           
  9354                           ;diskio.c: 69: buff =0XFF;
  9355  00168C  0100               	movlb	0	; () banked
  9356  00168E  6967               	setf	disk_initialize@buff& (0+255),b
  9357  001690                     
  9358                           ; BSR set to: 0
  9359                           ;diskio.c: 71: buff = response();
  9360                           
  9361                           ; BSR set to: 0
  9362  001690  ECF6  F019         	call	_response	;wreg free
  9363  001694  0100               	movlb	0	; () banked
  9364  001696  6F67               	movwf	disk_initialize@buff& (0+255),b
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;diskio.c: 72: }while(buff!=0x01);
  9368  001698  0567               	decf	disk_initialize@buff& (0+255),w,b
  9369  00169A  A4D8               	btfss	status,2,c
  9370  00169C  D7F9               	goto	l485
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;diskio.c: 73: posicao_cursor_lcd(1,0);
  9374                           
  9375                           ; BSR set to: 0
  9376  00169E  0E00               	movlw	0
  9377  0016A0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  9378  0016A2  0E01               	movlw	1
  9379  0016A4  EC4C  F017         	call	_posicao_cursor_lcd
  9380                           
  9381                           ;diskio.c: 74: escreve_frase_ram_lcd("Iniciando");
  9382  0016A8  0E22               	movlw	low STR_21
  9383  0016AA  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  9384  0016AC  0E62               	movlw	high STR_21
  9385  0016AE  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  9386  0016B0  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  9387                           
  9388                           ;diskio.c: 76: _delay((unsigned long)((1000)*(48000000/4000.0)));
  9389  0016B4  0E3D               	movlw	61
  9390  0016B6  6E2B               	movwf	(??_disk_initialize+1)& (0+255),c
  9391  0016B8  0EE1               	movlw	225
  9392  0016BA  6E2A               	movwf	??_disk_initialize& (0+255),c
  9393  0016BC  0E40               	movlw	64
  9394  0016BE                     u10757:
  9395  0016BE  2EE8               	decfsz	wreg,f,c
  9396  0016C0  D7FE               	bra	u10757
  9397  0016C2  2E2A               	decfsz	??_disk_initialize& (0+255),f,c
  9398  0016C4  D7FC               	bra	u10757
  9399  0016C6  2E2B               	decfsz	(??_disk_initialize+1)& (0+255),f,c
  9400  0016C8  D7FA               	bra	u10757
  9401                           
  9402                           ;diskio.c: 77: proceed();
  9403  0016CA  ECFC  F019         	call	_proceed	;wreg free
  9404                           
  9405                           ;diskio.c: 78: if (buff == 0x01)
  9406  0016CE  0100               	movlb	0	; () banked
  9407  0016D0  0567               	decf	disk_initialize@buff& (0+255),w,b
  9408  0016D2  A4D8               	btfss	status,2,c
  9409  0016D4  D0A1               	goto	l487
  9410                           
  9411                           ; BSR set to: 0
  9412                           ;diskio.c: 79: {
  9413                           ;diskio.c: 81: _delay((unsigned long)((1)*(48000000/4000.0)));
  9414  0016D6  0E10               	movlw	16
  9415  0016D8  6E2A               	movwf	??_disk_initialize& (0+255),c
  9416  0016DA  0E94               	movlw	148
  9417  0016DC                     u10767:
  9418  0016DC  2EE8               	decfsz	wreg,f,c
  9419  0016DE  D7FE               	bra	u10767
  9420  0016E0  2E2A               	decfsz	??_disk_initialize& (0+255),f,c
  9421  0016E2  D7FC               	bra	u10767
  9422  0016E4  D000               	nop2	
  9423                           
  9424                           ;diskio.c: 82: count1 = 0;
  9425  0016E6  0E00               	movlw	0
  9426  0016E8  0100               	movlb	0	; () banked
  9427  0016EA  6F63               	movwf	(disk_initialize@count1+1)& (0+255),b
  9428  0016EC  0E00               	movlw	0
  9429  0016EE  6F62               	movwf	disk_initialize@count1& (0+255),b
  9430  0016F0                     
  9431                           ; BSR set to: 0
  9432                           ;diskio.c: 84: count2 = 0;
  9433                           
  9434                           ; BSR set to: 0
  9435  0016F0  0E00               	movlw	0
  9436  0016F2  6F66               	movwf	(disk_initialize@count2+1)& (0+255),b
  9437  0016F4  0E00               	movlw	0
  9438  0016F6  6F65               	movwf	disk_initialize@count2& (0+255),b
  9439                           
  9440                           ; BSR set to: 0
  9441                           ;diskio.c: 85: dummy_clocks(8);
  9442  0016F8  0E08               	movlw	8
  9443  0016FA  ECCA  F018         	call	_dummy_clocks
  9444                           
  9445                           ;diskio.c: 86: command(0X77, 0X00000000, 0X95);
  9446  0016FE  0E00               	movlw	0
  9447  001700  6E1C               	movwf	command@arg,c
  9448  001702  0E00               	movlw	0
  9449  001704  6E1D               	movwf	command@arg+1,c
  9450  001706  0E00               	movlw	0
  9451  001708  6E1E               	movwf	command@arg+2,c
  9452  00170A  0E00               	movlw	0
  9453  00170C  6E1F               	movwf	command@arg+3,c
  9454  00170E  0E95               	movlw	149
  9455  001710  6E20               	movwf	command@CRC,c
  9456  001712  0E77               	movlw	119
  9457  001714  ECE9  F018         	call	_command
  9458                           
  9459                           ;diskio.c: 87: buff = 0XFF;
  9460  001718  0100               	movlb	0	; () banked
  9461  00171A  6967               	setf	disk_initialize@buff& (0+255),b
  9462                           
  9463                           ; BSR set to: 0
  9464                           ;diskio.c: 89: proceed();
  9465  00171C  ECFC  F019         	call	_proceed	;wreg free
  9466  001720                     
  9467                           ;diskio.c: 91: buff = response();
  9468  001720  ECF6  F019         	call	_response	;wreg free
  9469  001724  0100               	movlb	0	; () banked
  9470  001726  6F67               	movwf	disk_initialize@buff& (0+255),b
  9471                           
  9472                           ; BSR set to: 0
  9473                           ;diskio.c: 92: count2++;
  9474  001728  4B65               	infsnz	disk_initialize@count2& (0+255),f,b
  9475  00172A  2B66               	incf	(disk_initialize@count2+1)& (0+255),f,b
  9476                           
  9477                           ;diskio.c: 93: }while((buff!=0X01)&&(count2<10));
  9478  00172C  0567               	decf	disk_initialize@buff& (0+255),w,b
  9479  00172E  B4D8               	btfsc	status,2,c
  9480  001730  D008               	goto	u8710
  9481                           
  9482                           ; BSR set to: 0
  9483  001732  BF66               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
  9484  001734  D7F5               	goto	l489
  9485  001736  5166               	movf	(disk_initialize@count2+1)& (0+255),w,b
  9486  001738  E104               	bnz	l7970
  9487  00173A  0E0A               	movlw	10
  9488  00173C  5D65               	subwf	disk_initialize@count2& (0+255),w,b
  9489  00173E  A0D8               	btfss	status,0,c
  9490  001740  D7EF               	goto	l489
  9491  001742                     u8710:
  9492  001742                     l7970:
  9493                           
  9494                           ; BSR set to: 0
  9495                           ;diskio.c: 94: posicao_cursor_lcd(1,0);
  9496  001742  0E00               	movlw	0
  9497  001744  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  9498  001746  0E01               	movlw	1
  9499  001748  EC4C  F017         	call	_posicao_cursor_lcd
  9500                           
  9501                           ;diskio.c: 95: escreve_frase_ram_lcd("Cartao");
  9502  00174C  0E66               	movlw	low STR_22
  9503  00174E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  9504  001750  0E62               	movlw	high STR_22
  9505  001752  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  9506  001754  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  9507                           
  9508                           ;diskio.c: 97: count2 = 0;
  9509  001758  0E00               	movlw	0
  9510  00175A  0100               	movlb	0	; () banked
  9511  00175C  6F66               	movwf	(disk_initialize@count2+1)& (0+255),b
  9512  00175E  0E00               	movlw	0
  9513  001760  6F65               	movwf	disk_initialize@count2& (0+255),b
  9514                           
  9515                           ; BSR set to: 0
  9516                           ;diskio.c: 98: dummy_clocks(8);
  9517  001762  0E08               	movlw	8
  9518  001764  ECCA  F018         	call	_dummy_clocks
  9519                           
  9520                           ;diskio.c: 100: command(0X69,0X40000000,0X95);
  9521  001768  0E00               	movlw	0
  9522  00176A  6E1C               	movwf	command@arg,c
  9523  00176C  0E00               	movlw	0
  9524  00176E  6E1D               	movwf	command@arg+1,c
  9525  001770  0E00               	movlw	0
  9526  001772  6E1E               	movwf	command@arg+2,c
  9527  001774  0E40               	movlw	64
  9528  001776  6E1F               	movwf	command@arg+3,c
  9529  001778  0E95               	movlw	149
  9530  00177A  6E20               	movwf	command@CRC,c
  9531  00177C  0E69               	movlw	105
  9532  00177E  ECE9  F018         	call	_command
  9533                           
  9534                           ;diskio.c: 101: buff = 0XFF;
  9535  001782  0100               	movlb	0	; () banked
  9536  001784  6967               	setf	disk_initialize@buff& (0+255),b
  9537  001786                     
  9538                           ; BSR set to: 0
  9539                           ;diskio.c: 105: buff = response();
  9540                           
  9541                           ; BSR set to: 0
  9542  001786  ECF6  F019         	call	_response	;wreg free
  9543  00178A  0100               	movlb	0	; () banked
  9544  00178C  6F67               	movwf	disk_initialize@buff& (0+255),b
  9545                           
  9546                           ; BSR set to: 0
  9547                           ;diskio.c: 106: count2++;
  9548  00178E  4B65               	infsnz	disk_initialize@count2& (0+255),f,b
  9549  001790  2B66               	incf	(disk_initialize@count2+1)& (0+255),f,b
  9550                           
  9551                           ; BSR set to: 0
  9552                           ;diskio.c: 109: }while((buff!=0X00) && count2<10);
  9553  001792  5167               	movf	disk_initialize@buff& (0+255),w,b
  9554  001794  B4D8               	btfsc	status,2,c
  9555  001796  D008               	goto	u8730
  9556                           
  9557                           ; BSR set to: 0
  9558  001798  BF66               	btfsc	(disk_initialize@count2+1)& (0+255),7,b
  9559  00179A  D7F5               	goto	l493
  9560  00179C  5166               	movf	(disk_initialize@count2+1)& (0+255),w,b
  9561  00179E  E104               	bnz	l7990
  9562  0017A0  0E0A               	movlw	10
  9563  0017A2  5D65               	subwf	disk_initialize@count2& (0+255),w,b
  9564  0017A4  A0D8               	btfss	status,0,c
  9565  0017A6  D7EF               	goto	l493
  9566  0017A8                     u8730:
  9567  0017A8                     l7990:
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;diskio.c: 110: }while(buff != 0X00);
  9571  0017A8  5167               	movf	disk_initialize@buff& (0+255),w,b
  9572  0017AA  A4D8               	btfss	status,2,c
  9573  0017AC  D7A1               	goto	l488
  9574                           
  9575                           ; BSR set to: 0
  9576                           ;diskio.c: 111: posicao_cursor_lcd(1,0);
  9577                           
  9578                           ; BSR set to: 0
  9579  0017AE  0E00               	movlw	0
  9580  0017B0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  9581  0017B2  0E01               	movlw	1
  9582  0017B4  EC4C  F017         	call	_posicao_cursor_lcd
  9583                           
  9584                           ;diskio.c: 112: escreve_frase_ram_lcd("SDCARD");
  9585  0017B8  0E5F               	movlw	low STR_23
  9586  0017BA  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  9587  0017BC  0E62               	movlw	high STR_23
  9588  0017BE  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  9589  0017C0  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  9590                           
  9591                           ;diskio.c: 113: count1 = 0;
  9592  0017C4  0E00               	movlw	0
  9593  0017C6  0100               	movlb	0	; () banked
  9594  0017C8  6F63               	movwf	(disk_initialize@count1+1)& (0+255),b
  9595  0017CA  0E00               	movlw	0
  9596  0017CC  6F62               	movwf	disk_initialize@count1& (0+255),b
  9597                           
  9598                           ; BSR set to: 0
  9599                           ;diskio.c: 115: _delay((unsigned long)((1)*(48000000/4000.0)));
  9600  0017CE  0E10               	movlw	16
  9601  0017D0  6E2A               	movwf	??_disk_initialize& (0+255),c
  9602  0017D2  0E94               	movlw	148
  9603  0017D4                     u10777:
  9604  0017D4  2EE8               	decfsz	wreg,f,c
  9605  0017D6  D7FE               	bra	u10777
  9606  0017D8  2E2A               	decfsz	??_disk_initialize& (0+255),f,c
  9607  0017DA  D7FC               	bra	u10777
  9608  0017DC  D000               	nop2	
  9609                           
  9610                           ;diskio.c: 116: stat = 0X00;
  9611  0017DE  0E00               	movlw	0
  9612  0017E0  0100               	movlb	0	; () banked
  9613  0017E2  6F64               	movwf	disk_initialize@stat& (0+255),b
  9614                           
  9615                           ; BSR set to: 0
  9616                           ;diskio.c: 118: escreve_cmd_lcd(0b00000001);
  9617  0017E4  0E01               	movlw	1
  9618  0017E6  ECA1  F015         	call	_escreve_cmd_lcd
  9619                           
  9620                           ;diskio.c: 119: posicao_cursor_lcd(1,0);
  9621  0017EA  0E00               	movlw	0
  9622  0017EC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  9623  0017EE  0E01               	movlw	1
  9624  0017F0  EC4C  F017         	call	_posicao_cursor_lcd
  9625                           
  9626                           ;diskio.c: 120: escreve_frase_ram_lcd("Cartão Aceito");
  9627  0017F4  0E7A               	movlw	low STR_24
  9628  0017F6  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  9629  0017F8  0E61               	movlw	high STR_24
  9630  0017FA  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  9631  0017FC  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  9632                           
  9633                           ;diskio.c: 121: _delay((unsigned long)((2000)*(48000000/4000.0)));
  9634  001800  0E7A               	movlw	122
  9635  001802  6E2B               	movwf	(??_disk_initialize+1)& (0+255),c
  9636  001804  0EC1               	movlw	193
  9637  001806  6E2A               	movwf	??_disk_initialize& (0+255),c
  9638  001808  0E82               	movlw	130
  9639  00180A                     u10787:
  9640  00180A  2EE8               	decfsz	wreg,f,c
  9641  00180C  D7FE               	bra	u10787
  9642  00180E  2E2A               	decfsz	??_disk_initialize& (0+255),f,c
  9643  001810  D7FC               	bra	u10787
  9644  001812  2E2B               	decfsz	(??_disk_initialize+1)& (0+255),f,c
  9645  001814  D7FA               	bra	u10787
  9646                           
  9647                           ;diskio.c: 122: }
  9648  001816  D020               	goto	l499
  9649  001818                     l487:
  9650                           
  9651                           ;diskio.c: 123: else if(buff == 0x05)
  9652  001818  0E05               	movlw	5
  9653  00181A  0100               	movlb	0	; () banked
  9654  00181C  1967               	xorwf	disk_initialize@buff& (0+255),w,b
  9655  00181E  A4D8               	btfss	status,2,c
  9656  001820  D01B               	goto	l499
  9657                           
  9658                           ; BSR set to: 0
  9659                           ;diskio.c: 124: {
  9660                           ;diskio.c: 125: stat = 0x01;
  9661  001822  0E01               	movlw	1
  9662  001824  6F64               	movwf	disk_initialize@stat& (0+255),b
  9663                           
  9664                           ; BSR set to: 0
  9665                           ;diskio.c: 127: escreve_cmd_lcd(0b00000001);
  9666  001826  0E01               	movlw	1
  9667  001828  ECA1  F015         	call	_escreve_cmd_lcd
  9668                           
  9669                           ;diskio.c: 128: posicao_cursor_lcd(1,0);
  9670  00182C  0E00               	movlw	0
  9671  00182E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  9672  001830  0E01               	movlw	1
  9673  001832  EC4C  F017         	call	_posicao_cursor_lcd
  9674                           
  9675                           ;diskio.c: 129: escreve_frase_ram_lcd("Error!!!");
  9676  001836  0E35               	movlw	low STR_25
  9677  001838  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  9678  00183A  0E62               	movlw	high STR_25
  9679  00183C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  9680  00183E  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  9681                           
  9682                           ;diskio.c: 131: _delay((unsigned long)((3000)*(48000000/4000.0)));
  9683  001842  0EB7               	movlw	183
  9684  001844  6E2B               	movwf	(??_disk_initialize+1)& (0+255),c
  9685  001846  0EA1               	movlw	161
  9686  001848  6E2A               	movwf	??_disk_initialize& (0+255),c
  9687  00184A  0EC4               	movlw	196
  9688  00184C                     u10797:
  9689  00184C  2EE8               	decfsz	wreg,f,c
  9690  00184E  D7FE               	bra	u10797
  9691  001850  2E2A               	decfsz	??_disk_initialize& (0+255),f,c
  9692  001852  D7FC               	bra	u10797
  9693  001854  2E2B               	decfsz	(??_disk_initialize+1)& (0+255),f,c
  9694  001856  D7FA               	bra	u10797
  9695  001858                     l499:
  9696                           
  9697                           ;diskio.c: 132: }
  9698                           ;diskio.c: 133: _delay((unsigned long)((1000)*(48000000/4000.0)));
  9699  001858  0E3D               	movlw	61
  9700  00185A  6E2B               	movwf	(??_disk_initialize+1)& (0+255),c
  9701  00185C  0EE1               	movlw	225
  9702  00185E  6E2A               	movwf	??_disk_initialize& (0+255),c
  9703  001860  0E40               	movlw	64
  9704  001862                     u10807:
  9705  001862  2EE8               	decfsz	wreg,f,c
  9706  001864  D7FE               	bra	u10807
  9707  001866  2E2A               	decfsz	??_disk_initialize& (0+255),f,c
  9708  001868  D7FC               	bra	u10807
  9709  00186A  2E2B               	decfsz	(??_disk_initialize+1)& (0+255),f,c
  9710  00186C  D7FA               	bra	u10807
  9711                           
  9712                           ;diskio.c: 135: dummy_clocks(8);
  9713  00186E  0E08               	movlw	8
  9714  001870  ECCA  F018         	call	_dummy_clocks
  9715                           
  9716                           ;diskio.c: 136: command(0X50,0X00000200,0XFF);
  9717  001874  0E00               	movlw	0
  9718  001876  6E1C               	movwf	command@arg,c
  9719  001878  0E02               	movlw	2
  9720  00187A  6E1D               	movwf	command@arg+1,c
  9721  00187C  0E00               	movlw	0
  9722  00187E  6E1E               	movwf	command@arg+2,c
  9723  001880  0E00               	movlw	0
  9724  001882  6E1F               	movwf	command@arg+3,c
  9725  001884  0EFF               	movlw	255
  9726  001886  6E20               	movwf	command@CRC,c
  9727  001888  0E50               	movlw	80
  9728  00188A  ECE9  F018         	call	_command
  9729                           
  9730                           ;diskio.c: 137: proceed();
  9731  00188E  ECFC  F019         	call	_proceed	;wreg free
  9732  001892                     
  9733                           ;diskio.c: 139: buff = response();
  9734  001892  ECF6  F019         	call	_response	;wreg free
  9735  001896  0100               	movlb	0	; () banked
  9736  001898  6F67               	movwf	disk_initialize@buff& (0+255),b
  9737                           
  9738                           ; BSR set to: 0
  9739                           ;diskio.c: 140: }while(buff!=0XFF);
  9740  00189A  2967               	incf	disk_initialize@buff& (0+255),w,b
  9741  00189C  A4D8               	btfss	status,2,c
  9742  00189E  D7F9               	goto	l500
  9743                           
  9744                           ; BSR set to: 0
  9745                           ;diskio.c: 142: escreve_cmd_lcd(0b00000001);
  9746                           
  9747                           ; BSR set to: 0
  9748  0018A0  0E01               	movlw	1
  9749  0018A2  ECA1  F015         	call	_escreve_cmd_lcd
  9750                           
  9751                           ;diskio.c: 143: posicao_cursor_lcd(1,0);
  9752  0018A6  0E00               	movlw	0
  9753  0018A8  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  9754  0018AA  0E01               	movlw	1
  9755  0018AC  EC4C  F017         	call	_posicao_cursor_lcd
  9756                           
  9757                           ;diskio.c: 144: escreve_frase_ram_lcd("Bloco de 512");
  9758  0018B0  0ECE               	movlw	low STR_26
  9759  0018B2  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  9760  0018B4  0E61               	movlw	high STR_26
  9761  0018B6  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  9762  0018B8  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  9763                           
  9764                           ;diskio.c: 145: posicao_cursor_lcd(2,0);
  9765  0018BC  0E00               	movlw	0
  9766  0018BE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  9767  0018C0  0E02               	movlw	2
  9768  0018C2  EC4C  F017         	call	_posicao_cursor_lcd
  9769                           
  9770                           ;diskio.c: 146: escreve_frase_ram_lcd("Bytes criado!");
  9771  0018C6  0E6C               	movlw	low STR_27
  9772  0018C8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  9773  0018CA  0E61               	movlw	high STR_27
  9774  0018CC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  9775  0018CE  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  9776                           
  9777                           ;diskio.c: 147: _delay((unsigned long)((2000)*(48000000/4000.0)));
  9778  0018D2  0E7A               	movlw	122
  9779  0018D4  6E2B               	movwf	(??_disk_initialize+1)& (0+255),c
  9780  0018D6  0EC1               	movlw	193
  9781  0018D8  6E2A               	movwf	??_disk_initialize& (0+255),c
  9782  0018DA  0E82               	movlw	130
  9783  0018DC                     u10817:
  9784  0018DC  2EE8               	decfsz	wreg,f,c
  9785  0018DE  D7FE               	bra	u10817
  9786  0018E0  2E2A               	decfsz	??_disk_initialize& (0+255),f,c
  9787  0018E2  D7FC               	bra	u10817
  9788  0018E4  2E2B               	decfsz	(??_disk_initialize+1)& (0+255),f,c
  9789  0018E6  D7FA               	bra	u10817
  9790                           
  9791                           ;diskio.c: 148: escreve_cmd_lcd(0b00000001);
  9792  0018E8  0E01               	movlw	1
  9793  0018EA  ECA1  F015         	call	_escreve_cmd_lcd
  9794                           
  9795                           ;diskio.c: 149: posicao_cursor_lcd(1,0);
  9796  0018EE  0E00               	movlw	0
  9797  0018F0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  9798  0018F2  0E01               	movlw	1
  9799  0018F4  EC4C  F017         	call	_posicao_cursor_lcd
  9800                           
  9801                           ;diskio.c: 150: escreve_frase_ram_lcd("Init OK");
  9802  0018F8  0E4F               	movlw	low STR_28
  9803  0018FA  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  9804  0018FC  0E62               	movlw	high STR_28
  9805  0018FE  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  9806  001900  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
  9807                           
  9808                           ;diskio.c: 151: return stat;
  9809  001904  0100               	movlb	0	; () banked
  9810  001906  5164               	movf	disk_initialize@stat& (0+255),w,b
  9811  001908  0012               	return	
  9812  00190A                     __end_of_disk_initialize:
  9813                           	opt stack 0
  9814                           tosu	equ	0xFFF
  9815                           tosh	equ	0xFFE
  9816                           tosl	equ	0xFFD
  9817                           pclath	equ	0xFFA
  9818                           tblptru	equ	0xFF8
  9819                           tblptrh	equ	0xFF7
  9820                           tblptrl	equ	0xFF6
  9821                           tablat	equ	0xFF5
  9822                           prodh	equ	0xFF4
  9823                           prodl	equ	0xFF3
  9824                           intcon	equ	0xFF2
  9825                           intcon2	equ	0xFF1
  9826                           intcon3	equ	0xFF0
  9827                           postinc0	equ	0xFEE
  9828                           wreg	equ	0xFE8
  9829                           indf1	equ	0xFE7
  9830                           postinc1	equ	0xFE6
  9831                           postdec1	equ	0xFE5
  9832                           fsr1h	equ	0xFE2
  9833                           fsr1l	equ	0xFE1
  9834                           indf2	equ	0xFDF
  9835                           postinc2	equ	0xFDE
  9836                           postdec2	equ	0xFDD
  9837                           plusw2	equ	0xFDB
  9838                           fsr2h	equ	0xFDA
  9839                           fsr2l	equ	0xFD9
  9840                           status	equ	0xFD8
  9841                           
  9842 ;; *************** function _reset *****************
  9843 ;; Defined at:
  9844 ;;		line 34 in file "bibliotecas/diskio.c"
  9845 ;; Parameters:    Size  Location     Type
  9846 ;;		None
  9847 ;; Auto vars:     Size  Location     Type
  9848 ;;  count           2   38[COMRAM] int 
  9849 ;;  i               2   36[COMRAM] int 
  9850 ;;  buff            1   40[COMRAM] unsigned char 
  9851 ;; Return value:  Size  Location     Type
  9852 ;;                  1    wreg      void 
  9853 ;; Registers used:
  9854 ;;		wreg, status,2, status,0, cstack
  9855 ;; Tracked objects:
  9856 ;;		On entry : 0/0
  9857 ;;		On exit  : 0/0
  9858 ;;		Unchanged: 0/0
  9859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9860 ;;      Params:         0       0       0       0       0       0       0       0       0
  9861 ;;      Locals:         5       0       0       0       0       0       0       0       0
  9862 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9863 ;;      Totals:         7       0       0       0       0       0       0       0       0
  9864 ;;Total ram usage:        7 bytes
  9865 ;; Hardware stack levels used:    1
  9866 ;; Hardware stack levels required when called:    4
  9867 ;; This function calls:
  9868 ;;		_command
  9869 ;;		_dummy_clocks
  9870 ;;		_proceed
  9871 ;;		_response
  9872 ;; This function is called by:
  9873 ;;		_disk_initialize
  9874 ;; This function uses a non-reentrant model
  9875 ;;
  9876                           
  9877                           	psect	text32
  9878  002CCA                     __ptext32:
  9879                           	opt stack 0
  9880  002CCA                     _reset:
  9881                           	opt stack 22
  9882                           
  9883                           ;diskio.c: 36: int i = 0, count = 0;
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;incstack = 0
  9887  002CCA  0E00               	movlw	0
  9888  002CCC  6E26               	movwf	reset@i+1,c
  9889  002CCE  0E00               	movlw	0
  9890  002CD0  6E25               	movwf	reset@i,c
  9891  002CD2  0E00               	movlw	0
  9892  002CD4  6E28               	movwf	reset@count+1,c
  9893  002CD6  0E00               	movlw	0
  9894  002CD8  6E27               	movwf	reset@count,c
  9895  002CDA                     
  9896                           ;diskio.c: 40: dummy_clocks(8);
  9897  002CDA  0E08               	movlw	8
  9898  002CDC  ECCA  F018         	call	_dummy_clocks
  9899                           
  9900                           ;diskio.c: 41: command(0X40, 0X00000000, 0X95);
  9901  002CE0  0E00               	movlw	0
  9902  002CE2  6E1C               	movwf	command@arg,c
  9903  002CE4  0E00               	movlw	0
  9904  002CE6  6E1D               	movwf	command@arg+1,c
  9905  002CE8  0E00               	movlw	0
  9906  002CEA  6E1E               	movwf	command@arg+2,c
  9907  002CEC  0E00               	movlw	0
  9908  002CEE  6E1F               	movwf	command@arg+3,c
  9909  002CF0  0E95               	movlw	149
  9910  002CF2  6E20               	movwf	command@CRC,c
  9911  002CF4  0E40               	movlw	64
  9912  002CF6  ECE9  F018         	call	_command
  9913                           
  9914                           ;diskio.c: 42: proceed();
  9915  002CFA  ECFC  F019         	call	_proceed	;wreg free
  9916  002CFE                     
  9917                           ;diskio.c: 44: buff = response();
  9918  002CFE  ECF6  F019         	call	_response	;wreg free
  9919  002D02  6E29               	movwf	reset@buff,c
  9920                           
  9921                           ;diskio.c: 45: count++;
  9922  002D04  4A27               	infsnz	reset@count,f,c
  9923  002D06  2A28               	incf	reset@count+1,f,c
  9924                           
  9925                           ;diskio.c: 47: }while((buff!=0X01) && (count<10) );
  9926  002D08  0429               	decf	reset@buff,w,c
  9927  002D0A  B4D8               	btfsc	status,2,c
  9928  002D0C  D008               	goto	u8400
  9929  002D0E  BE28               	btfsc	reset@count+1,7,c
  9930  002D10  D7F6               	goto	l477
  9931  002D12  5028               	movf	reset@count+1,w,c
  9932  002D14  E104               	bnz	l7768
  9933  002D16  0E0A               	movlw	10
  9934  002D18  5C27               	subwf	reset@count,w,c
  9935  002D1A  A0D8               	btfss	status,0,c
  9936  002D1C  D7F0               	goto	l477
  9937  002D1E                     u8400:
  9938  002D1E                     l7768:
  9939                           
  9940                           ;diskio.c: 48: count = 0;
  9941  002D1E  0E00               	movlw	0
  9942  002D20  6E28               	movwf	reset@count+1,c
  9943  002D22  0E00               	movlw	0
  9944  002D24  6E27               	movwf	reset@count,c
  9945                           
  9946                           ;diskio.c: 49: }while(buff!=0X01);
  9947  002D26  0429               	decf	reset@buff,w,c
  9948  002D28  A4D8               	btfss	status,2,c
  9949  002D2A  D7D7               	goto	l476
  9950                           
  9951                           ;diskio.c: 53: _delay((unsigned long)((2000)*(48000000/4000.0)));
  9952  002D2C  0E7A               	movlw	122
  9953  002D2E  6E24               	movwf	(??_reset+1)& (0+255),c
  9954  002D30  0EC1               	movlw	193
  9955  002D32  6E23               	movwf	??_reset& (0+255),c
  9956  002D34  0E82               	movlw	130
  9957  002D36                     u10827:
  9958  002D36  2EE8               	decfsz	wreg,f,c
  9959  002D38  D7FE               	bra	u10827
  9960  002D3A  2E23               	decfsz	??_reset& (0+255),f,c
  9961  002D3C  D7FC               	bra	u10827
  9962  002D3E  2E24               	decfsz	(??_reset+1)& (0+255),f,c
  9963  002D40  D7FA               	bra	u10827
  9964  002D42  0012               	return	
  9965  002D44                     __end_of_reset:
  9966                           	opt stack 0
  9967                           tosu	equ	0xFFF
  9968                           tosh	equ	0xFFE
  9969                           tosl	equ	0xFFD
  9970                           pclath	equ	0xFFA
  9971                           tblptru	equ	0xFF8
  9972                           tblptrh	equ	0xFF7
  9973                           tblptrl	equ	0xFF6
  9974                           tablat	equ	0xFF5
  9975                           prodh	equ	0xFF4
  9976                           prodl	equ	0xFF3
  9977                           intcon	equ	0xFF2
  9978                           intcon2	equ	0xFF1
  9979                           intcon3	equ	0xFF0
  9980                           postinc0	equ	0xFEE
  9981                           wreg	equ	0xFE8
  9982                           indf1	equ	0xFE7
  9983                           postinc1	equ	0xFE6
  9984                           postdec1	equ	0xFE5
  9985                           fsr1h	equ	0xFE2
  9986                           fsr1l	equ	0xFE1
  9987                           indf2	equ	0xFDF
  9988                           postinc2	equ	0xFDE
  9989                           postdec2	equ	0xFDD
  9990                           plusw2	equ	0xFDB
  9991                           fsr2h	equ	0xFDA
  9992                           fsr2l	equ	0xFD9
  9993                           status	equ	0xFD8
  9994                           
  9995 ;; *************** function _escreve_cmd_lcd *****************
  9996 ;; Defined at:
  9997 ;;		line 162 in file "bibliotecas/display_lcd.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;  comando         1    wreg     unsigned char 
 10000 ;; Auto vars:     Size  Location     Type
 10001 ;;  comando         1   27[COMRAM] unsigned char 
 10002 ;; Return value:  Size  Location     Type
 10003 ;;                  1    wreg      void 
 10004 ;; Registers used:
 10005 ;;		wreg, status,2, status,0, cstack
 10006 ;; Tracked objects:
 10007 ;;		On entry : 0/0
 10008 ;;		On exit  : 0/0
 10009 ;;		Unchanged: 0/0
 10010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10011 ;;      Params:         0       0       0       0       0       0       0       0       0
 10012 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10013 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10014 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10015 ;;Total ram usage:        1 bytes
 10016 ;; Hardware stack levels used:    1
 10017 ;; Hardware stack levels required when called:    3
 10018 ;; This function calls:
 10019 ;;		_delay
 10020 ;; This function is called by:
 10021 ;;		_mensagem_inicial
 10022 ;;		_SDCard
 10023 ;;		_disk_initialize
 10024 ;;		_init_lcd
 10025 ;;		_inicializa_SPI
 10026 ;;		_leitura_chave
 10027 ;;		_cria_caractere_lcd
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           	psect	text33
 10032  002B42                     __ptext33:
 10033                           	opt stack 0
 10034  002B42                     _escreve_cmd_lcd:
 10035                           	opt stack 26
 10036                           
 10037                           ;incstack = 0
 10038                           ;escreve_cmd_lcd@comando stored from wreg
 10039  002B42  6E1C               	movwf	escreve_cmd_lcd@comando,c
 10040                           
 10041                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 10042  002B44  9483               	bcf	3971,2,c	;volatile
 10043                           
 10044                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 10045  002B46  9283               	bcf	3971,1,c	;volatile
 10046                           
 10047                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 10048  002B48  9083               	bcf	3971,0,c	;volatile
 10049                           
 10050                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 10051  002B4A  A81C               	btfss	escreve_cmd_lcd@comando,4,c
 10052  002B4C  D002               	goto	l587
 10053  002B4E  8883               	bsf	3971,4,c	;volatile
 10054  002B50  D001               	goto	l588
 10055  002B52                     l587:
 10056                           
 10057                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 10058  002B52  9883               	bcf	3971,4,c	;volatile
 10059  002B54                     l588:
 10060                           
 10061                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 10062  002B54  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
 10063  002B56  D002               	goto	l589
 10064  002B58  8A83               	bsf	3971,5,c	;volatile
 10065  002B5A  D001               	goto	l590
 10066  002B5C                     l589:
 10067                           
 10068                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 10069  002B5C  9A83               	bcf	3971,5,c	;volatile
 10070  002B5E                     l590:
 10071                           
 10072                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 10073  002B5E  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
 10074  002B60  D002               	goto	l591
 10075  002B62  8C83               	bsf	3971,6,c	;volatile
 10076  002B64  D001               	goto	l592
 10077  002B66                     l591:
 10078                           
 10079                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 10080  002B66  9C83               	bcf	3971,6,c	;volatile
 10081  002B68                     l592:
 10082                           
 10083                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 10084  002B68  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
 10085  002B6A  D002               	goto	l593
 10086  002B6C  8E83               	bsf	3971,7,c	;volatile
 10087  002B6E  D001               	goto	l594
 10088  002B70                     l593:
 10089                           
 10090                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 10091  002B70  9E83               	bcf	3971,7,c	;volatile
 10092  002B72                     l594:
 10093                           
 10094                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 10095  002B72  8083               	bsf	3971,0,c	;volatile
 10096                           
 10097                           ;display_lcd.c: 181: delay();
 10098  002B74  EC71  F019         	call	_delay	;wreg free
 10099                           
 10100                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 10101  002B78  9083               	bcf	3971,0,c	;volatile
 10102                           
 10103                           ;display_lcd.c: 183: delay();
 10104  002B7A  EC71  F019         	call	_delay	;wreg free
 10105                           
 10106                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 10107  002B7E  A01C               	btfss	escreve_cmd_lcd@comando,0,c
 10108  002B80  D002               	goto	l595
 10109  002B82  8883               	bsf	3971,4,c	;volatile
 10110  002B84  D001               	goto	l596
 10111  002B86                     l595:
 10112                           
 10113                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 10114  002B86  9883               	bcf	3971,4,c	;volatile
 10115  002B88                     l596:
 10116                           
 10117                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 10118  002B88  A21C               	btfss	escreve_cmd_lcd@comando,1,c
 10119  002B8A  D002               	goto	l597
 10120  002B8C  8A83               	bsf	3971,5,c	;volatile
 10121  002B8E  D001               	goto	l598
 10122  002B90                     l597:
 10123                           
 10124                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 10125  002B90  9A83               	bcf	3971,5,c	;volatile
 10126  002B92                     l598:
 10127                           
 10128                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 10129  002B92  A41C               	btfss	escreve_cmd_lcd@comando,2,c
 10130  002B94  D002               	goto	l599
 10131  002B96  8C83               	bsf	3971,6,c	;volatile
 10132  002B98  D001               	goto	l600
 10133  002B9A                     l599:
 10134                           
 10135                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 10136  002B9A  9C83               	bcf	3971,6,c	;volatile
 10137  002B9C                     l600:
 10138                           
 10139                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 10140  002B9C  A61C               	btfss	escreve_cmd_lcd@comando,3,c
 10141  002B9E  D002               	goto	l601
 10142  002BA0  8E83               	bsf	3971,7,c	;volatile
 10143  002BA2  D001               	goto	l602
 10144  002BA4                     l601:
 10145                           
 10146                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 10147  002BA4  9E83               	bcf	3971,7,c	;volatile
 10148  002BA6                     l602:
 10149                           
 10150                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 10151  002BA6  8083               	bsf	3971,0,c	;volatile
 10152                           
 10153                           ;display_lcd.c: 197: delay();
 10154  002BA8  EC71  F019         	call	_delay	;wreg free
 10155                           
 10156                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 10157  002BAC  9083               	bcf	3971,0,c	;volatile
 10158                           
 10159                           ;display_lcd.c: 199: delay();
 10160  002BAE  EC71  F019         	call	_delay	;wreg free
 10161                           
 10162                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 10163  002BB2  041C               	decf	escreve_cmd_lcd@comando,w,c
 10164  002BB4  B4D8               	btfsc	status,2,c
 10165  002BB6  D008               	goto	u8380
 10166  002BB8  0E02               	movlw	2
 10167  002BBA  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 10168  002BBC  B4D8               	btfsc	status,2,c
 10169  002BBE  D004               	goto	u8380
 10170  002BC0  0E03               	movlw	3
 10171  002BC2  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 10172  002BC4  A4D8               	btfss	status,2,c
 10173  002BC6  0012               	return	
 10174  002BC8                     u8380:
 10175                           
 10176                           ;display_lcd.c: 205: { delay(); }
 10177  002BC8  EC71  F019         	call	_delay	;wreg free
 10178  002BCC  0012               	return	
 10179  002BCE                     __end_of_escreve_cmd_lcd:
 10180                           	opt stack 0
 10181                           tosu	equ	0xFFF
 10182                           tosh	equ	0xFFE
 10183                           tosl	equ	0xFFD
 10184                           pclath	equ	0xFFA
 10185                           tblptru	equ	0xFF8
 10186                           tblptrh	equ	0xFF7
 10187                           tblptrl	equ	0xFF6
 10188                           tablat	equ	0xFF5
 10189                           prodh	equ	0xFF4
 10190                           prodl	equ	0xFF3
 10191                           intcon	equ	0xFF2
 10192                           intcon2	equ	0xFF1
 10193                           intcon3	equ	0xFF0
 10194                           postinc0	equ	0xFEE
 10195                           wreg	equ	0xFE8
 10196                           indf1	equ	0xFE7
 10197                           postinc1	equ	0xFE6
 10198                           postdec1	equ	0xFE5
 10199                           fsr1h	equ	0xFE2
 10200                           fsr1l	equ	0xFE1
 10201                           indf2	equ	0xFDF
 10202                           postinc2	equ	0xFDE
 10203                           postdec2	equ	0xFDD
 10204                           plusw2	equ	0xFDB
 10205                           fsr2h	equ	0xFDA
 10206                           fsr2l	equ	0xFD9
 10207                           status	equ	0xFD8
 10208                           
 10209 ;; *************** function _check_fs *****************
 10210 ;; Defined at:
 10211 ;;		line 722 in file "bibliotecas/pff.c"
 10212 ;; Parameters:    Size  Location     Type
 10213 ;;  buf             2   12[BANK0 ] PTR unsigned char 
 10214 ;;		 -> pf_mount@buf(36), 
 10215 ;;  sect            4   14[BANK0 ] unsigned long 
 10216 ;; Auto vars:     Size  Location     Type
 10217 ;;		None
 10218 ;; Return value:  Size  Location     Type
 10219 ;;                  1    wreg      unsigned char 
 10220 ;; Registers used:
 10221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10222 ;; Tracked objects:
 10223 ;;		On entry : 0/0
 10224 ;;		On exit  : 0/0
 10225 ;;		Unchanged: 0/0
 10226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10227 ;;      Params:         0       6       0       0       0       0       0       0       0
 10228 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10229 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10230 ;;      Totals:         0      10       0       0       0       0       0       0       0
 10231 ;;Total ram usage:       10 bytes
 10232 ;; Hardware stack levels used:    1
 10233 ;; Hardware stack levels required when called:    6
 10234 ;; This function calls:
 10235 ;;		_disk_readp
 10236 ;; This function is called by:
 10237 ;;		_pf_mount
 10238 ;; This function uses a non-reentrant model
 10239 ;;
 10240                           
 10241                           	psect	text34
 10242  001D44                     __ptext34:
 10243                           	opt stack 0
 10244  001D44                     _check_fs:
 10245                           	opt stack 21
 10246                           
 10247                           ;pff.c: 727: if (disk_readp(buf, sect, 510, 2))
 10248                           
 10249                           ;incstack = 0
 10250  001D44  C06C  F023         	movff	check_fs@buf,disk_readp@rd
 10251  001D48  C06D  F024         	movff	check_fs@buf+1,disk_readp@rd+1
 10252  001D4C  C06E  F025         	movff	check_fs@sect,disk_readp@sector
 10253  001D50  C06F  F026         	movff	check_fs@sect+1,disk_readp@sector+1
 10254  001D54  C070  F027         	movff	check_fs@sect+2,disk_readp@sector+2
 10255  001D58  C071  F028         	movff	check_fs@sect+3,disk_readp@sector+3
 10256  001D5C  0E01               	movlw	1
 10257  001D5E  6E2A               	movwf	disk_readp@offset+1,c
 10258  001D60  0EFE               	movlw	254
 10259  001D62  6E29               	movwf	disk_readp@offset,c
 10260  001D64  0E00               	movlw	0
 10261  001D66  6E2C               	movwf	disk_readp@count+1,c
 10262  001D68  0E02               	movlw	2
 10263  001D6A  6E2B               	movwf	disk_readp@count,c
 10264  001D6C  EC5D  F009         	call	_disk_readp	;wreg free
 10265  001D70  0900               	iorlw	0
 10266  001D72  B4D8               	btfsc	status,2,c
 10267  001D74  D002               	goto	l987
 10268                           
 10269                           ;pff.c: 728: return 3;
 10270  001D76  0E03               	movlw	3
 10271  001D78  0012               	return	
 10272  001D7A                     l987:
 10273                           
 10274                           ;pff.c: 729: if ( (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf)) != 0xAA55)
 10275  001D7A  0100               	movlb	0	; () banked
 10276  001D7C  EE20 F001          	lfsr	2,1
 10277  001D80  516C               	movf	check_fs@buf& (0+255),w,b
 10278  001D82  26D9               	addwf	fsr2l,f,c
 10279  001D84  516D               	movf	(check_fs@buf+1)& (0+255),w,b
 10280  001D86  22DA               	addwfc	fsr2h,f,c
 10281  001D88  50DF               	movf	indf2,w,c
 10282  001D8A  6F72               	movwf	??_check_fs& (0+255),b
 10283  001D8C  5172               	movf	??_check_fs& (0+255),w,b
 10284  001D8E  6F74               	movwf	(??_check_fs+2)& (0+255),b
 10285  001D90  6B73               	clrf	(??_check_fs+1)& (0+255),b
 10286  001D92  C06C  FFD9         	movff	check_fs@buf,fsr2l
 10287  001D96  C06D  FFDA         	movff	check_fs@buf+1,fsr2h
 10288  001D9A  50DF               	movf	indf2,w,c
 10289  001D9C  6F75               	movwf	(??_check_fs+3)& (0+255),b
 10290  001D9E  5175               	movf	(??_check_fs+3)& (0+255),w,b
 10291  001DA0  1373               	iorwf	(??_check_fs+1)& (0+255),f,b
 10292  001DA2  0E00               	movlw	0
 10293  001DA4  1374               	iorwf	(??_check_fs+2)& (0+255),f,b
 10294  001DA6  0E55               	movlw	85
 10295  001DA8  1973               	xorwf	(??_check_fs+1)& (0+255),w,b
 10296  001DAA  E104               	bnz	u8920
 10297  001DAC  0EAA               	movlw	170
 10298  001DAE  1974               	xorwf	(??_check_fs+2)& (0+255),w,b
 10299  001DB0  B4D8               	btfsc	status,2,c
 10300  001DB2  D002               	goto	l989
 10301  001DB4                     u8920:
 10302                           
 10303                           ; BSR set to: 0
 10304                           ;pff.c: 730: {
 10305                           ;pff.c: 731: return 2;
 10306  001DB4  0E02               	movlw	2
 10307                           
 10308                           ; BSR set to: 0
 10309  001DB6  0012               	return	
 10310  001DB8                     l989:
 10311                           
 10312                           ; BSR set to: 0
 10313                           
 10314                           ; BSR set to: 0
 10315  001DB8  C06C  F023         	movff	check_fs@buf,disk_readp@rd
 10316  001DBC  C06D  F024         	movff	check_fs@buf+1,disk_readp@rd+1
 10317  001DC0  C06E  F025         	movff	check_fs@sect,disk_readp@sector
 10318  001DC4  C06F  F026         	movff	check_fs@sect+1,disk_readp@sector+1
 10319  001DC8  C070  F027         	movff	check_fs@sect+2,disk_readp@sector+2
 10320  001DCC  C071  F028         	movff	check_fs@sect+3,disk_readp@sector+3
 10321  001DD0  0E00               	movlw	0
 10322  001DD2  6E2A               	movwf	disk_readp@offset+1,c
 10323  001DD4  0E36               	movlw	54
 10324  001DD6  6E29               	movwf	disk_readp@offset,c
 10325  001DD8  0E00               	movlw	0
 10326  001DDA  6E2C               	movwf	disk_readp@count+1,c
 10327  001DDC  0E02               	movlw	2
 10328  001DDE  6E2B               	movwf	disk_readp@count,c
 10329  001DE0  EC5D  F009         	call	_disk_readp	;wreg free
 10330  001DE4  0900               	iorlw	0
 10331  001DE6  A4D8               	btfss	status,2,c
 10332  001DE8  D01F               	goto	l990
 10333  001DEA  0100               	movlb	0	; () banked
 10334  001DEC  EE20 F001          	lfsr	2,1
 10335  001DF0  516C               	movf	check_fs@buf& (0+255),w,b
 10336  001DF2  26D9               	addwf	fsr2l,f,c
 10337  001DF4  516D               	movf	(check_fs@buf+1)& (0+255),w,b
 10338  001DF6  22DA               	addwfc	fsr2h,f,c
 10339  001DF8  50DF               	movf	indf2,w,c
 10340  001DFA  6F72               	movwf	??_check_fs& (0+255),b
 10341  001DFC  5172               	movf	??_check_fs& (0+255),w,b
 10342  001DFE  6F74               	movwf	(??_check_fs+2)& (0+255),b
 10343  001E00  6B73               	clrf	(??_check_fs+1)& (0+255),b
 10344  001E02  C06C  FFD9         	movff	check_fs@buf,fsr2l
 10345  001E06  C06D  FFDA         	movff	check_fs@buf+1,fsr2h
 10346  001E0A  50DF               	movf	indf2,w,c
 10347  001E0C  6F75               	movwf	(??_check_fs+3)& (0+255),b
 10348  001E0E  5175               	movf	(??_check_fs+3)& (0+255),w,b
 10349  001E10  1373               	iorwf	(??_check_fs+1)& (0+255),f,b
 10350  001E12  0E00               	movlw	0
 10351  001E14  1374               	iorwf	(??_check_fs+2)& (0+255),f,b
 10352  001E16  0E46               	movlw	70
 10353  001E18  1973               	xorwf	(??_check_fs+1)& (0+255),w,b
 10354  001E1A  E106               	bnz	l8182
 10355  001E1C  0E41               	movlw	65
 10356  001E1E  1974               	xorwf	(??_check_fs+2)& (0+255),w,b
 10357  001E20  A4D8               	btfss	status,2,c
 10358  001E22  D002               	goto	l990
 10359                           
 10360                           ; BSR set to: 0
 10361                           ;pff.c: 734: return 0;
 10362  001E24  0E00               	movlw	0
 10363                           
 10364                           ; BSR set to: 0
 10365  001E26  0012               	return	
 10366  001E28                     l990:
 10367  001E28                     l8182:
 10368  001E28  C06C  F023         	movff	check_fs@buf,disk_readp@rd
 10369  001E2C  C06D  F024         	movff	check_fs@buf+1,disk_readp@rd+1
 10370  001E30  C06E  F025         	movff	check_fs@sect,disk_readp@sector
 10371  001E34  C06F  F026         	movff	check_fs@sect+1,disk_readp@sector+1
 10372  001E38  C070  F027         	movff	check_fs@sect+2,disk_readp@sector+2
 10373  001E3C  C071  F028         	movff	check_fs@sect+3,disk_readp@sector+3
 10374  001E40  0E00               	movlw	0
 10375  001E42  6E2A               	movwf	disk_readp@offset+1,c
 10376  001E44  0E52               	movlw	82
 10377  001E46  6E29               	movwf	disk_readp@offset,c
 10378  001E48  0E00               	movlw	0
 10379  001E4A  6E2C               	movwf	disk_readp@count+1,c
 10380  001E4C  0E02               	movlw	2
 10381  001E4E  6E2B               	movwf	disk_readp@count,c
 10382  001E50  EC5D  F009         	call	_disk_readp	;wreg free
 10383  001E54  0900               	iorlw	0
 10384  001E56  A4D8               	btfss	status,2,c
 10385  001E58  D01F               	goto	l991
 10386  001E5A  0100               	movlb	0	; () banked
 10387  001E5C  EE20 F001          	lfsr	2,1
 10388  001E60  516C               	movf	check_fs@buf& (0+255),w,b
 10389  001E62  26D9               	addwf	fsr2l,f,c
 10390  001E64  516D               	movf	(check_fs@buf+1)& (0+255),w,b
 10391  001E66  22DA               	addwfc	fsr2h,f,c
 10392  001E68  50DF               	movf	indf2,w,c
 10393  001E6A  6F72               	movwf	??_check_fs& (0+255),b
 10394  001E6C  5172               	movf	??_check_fs& (0+255),w,b
 10395  001E6E  6F74               	movwf	(??_check_fs+2)& (0+255),b
 10396  001E70  6B73               	clrf	(??_check_fs+1)& (0+255),b
 10397  001E72  C06C  FFD9         	movff	check_fs@buf,fsr2l
 10398  001E76  C06D  FFDA         	movff	check_fs@buf+1,fsr2h
 10399  001E7A  50DF               	movf	indf2,w,c
 10400  001E7C  6F75               	movwf	(??_check_fs+3)& (0+255),b
 10401  001E7E  5175               	movf	(??_check_fs+3)& (0+255),w,b
 10402  001E80  1373               	iorwf	(??_check_fs+1)& (0+255),f,b
 10403  001E82  0E00               	movlw	0
 10404  001E84  1374               	iorwf	(??_check_fs+2)& (0+255),f,b
 10405  001E86  0E46               	movlw	70
 10406  001E88  1973               	xorwf	(??_check_fs+1)& (0+255),w,b
 10407  001E8A  E106               	bnz	l8190
 10408  001E8C  0E41               	movlw	65
 10409  001E8E  1974               	xorwf	(??_check_fs+2)& (0+255),w,b
 10410  001E90  A4D8               	btfss	status,2,c
 10411  001E92  D002               	goto	l991
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;pff.c: 736: return 0;
 10415  001E94  0E00               	movlw	0
 10416                           
 10417                           ; BSR set to: 0
 10418  001E96  0012               	return	
 10419  001E98                     l991:
 10420  001E98                     l8190:
 10421                           
 10422                           ;pff.c: 737: return 1;
 10423  001E98  0E01               	movlw	1
 10424  001E9A  0012               	return	
 10425  001E9C                     __end_of_check_fs:
 10426                           	opt stack 0
 10427                           tosu	equ	0xFFF
 10428                           tosh	equ	0xFFE
 10429                           tosl	equ	0xFFD
 10430                           pclath	equ	0xFFA
 10431                           tblptru	equ	0xFF8
 10432                           tblptrh	equ	0xFF7
 10433                           tblptrl	equ	0xFF6
 10434                           tablat	equ	0xFF5
 10435                           prodh	equ	0xFF4
 10436                           prodl	equ	0xFF3
 10437                           intcon	equ	0xFF2
 10438                           intcon2	equ	0xFF1
 10439                           intcon3	equ	0xFF0
 10440                           postinc0	equ	0xFEE
 10441                           wreg	equ	0xFE8
 10442                           indf1	equ	0xFE7
 10443                           postinc1	equ	0xFE6
 10444                           postdec1	equ	0xFE5
 10445                           fsr1h	equ	0xFE2
 10446                           fsr1l	equ	0xFE1
 10447                           indf2	equ	0xFDF
 10448                           postinc2	equ	0xFDE
 10449                           postdec2	equ	0xFDD
 10450                           plusw2	equ	0xFDB
 10451                           fsr2h	equ	0xFDA
 10452                           fsr2l	equ	0xFD9
 10453                           status	equ	0xFD8
 10454                           
 10455 ;; *************** function _disk_readp *****************
 10456 ;; Defined at:
 10457 ;;		line 159 in file "bibliotecas/diskio.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;  rd              2   34[COMRAM] PTR unsigned char 
 10460 ;;		 -> pf_readdir@dir(32), pf_opendir@dir(32), pf_open@dir(32), pf_mount@buf(36), 
 10461 ;;		 -> NULL(0), get_fat@buf(4), data_buffer_32(32), 
 10462 ;;  sector          4   36[COMRAM] unsigned long 
 10463 ;;  offset          2   40[COMRAM] unsigned int 
 10464 ;;  count           2   42[COMRAM] unsigned int 
 10465 ;; Auto vars:     Size  Location     Type
 10466 ;;  start_add       4    5[BANK0 ] unsigned long 
 10467 ;;  length          2   10[BANK0 ] int 
 10468 ;;  i               2    0        int 
 10469 ;;  buff            1    9[BANK0 ] unsigned char 
 10470 ;;  ptr             1    4[BANK0 ] unsigned char 
 10471 ;;  res             1    0        enum E14
 10472 ;; Return value:  Size  Location     Type
 10473 ;;                  1    wreg      enum E14
 10474 ;; Registers used:
 10475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10481 ;;      Params:        10       0       0       0       0       0       0       0       0
 10482 ;;      Locals:         0       8       0       0       0       0       0       0       0
 10483 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10484 ;;      Totals:        10      12       0       0       0       0       0       0       0
 10485 ;;Total ram usage:       22 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; Hardware stack levels required when called:    5
 10488 ;; This function calls:
 10489 ;;		_command
 10490 ;;		_dummy_clocks
 10491 ;;		_escreve_frase_ram_lcd
 10492 ;;		_posicao_cursor_lcd
 10493 ;;		_proceed
 10494 ;;		_response
 10495 ;; This function is called by:
 10496 ;;		_get_fat
 10497 ;;		_dir_find
 10498 ;;		_check_fs
 10499 ;;		_pf_mount
 10500 ;;		_pf_read
 10501 ;;		_dir_read
 10502 ;; This function uses a non-reentrant model
 10503 ;;
 10504                           
 10505                           	psect	text35
 10506  0012BA                     __ptext35:
 10507                           	opt stack 0
 10508  0012BA                     _disk_readp:
 10509                           	opt stack 21
 10510                           
 10511                           ;diskio.c: 166: DRESULT res;
 10512                           ;diskio.c: 167: unsigned char ptr=0X00,buff;
 10513                           
 10514                           ;incstack = 0
 10515  0012BA  0E00               	movlw	0
 10516  0012BC  0100               	movlb	0	; () banked
 10517  0012BE  6F64               	movwf	disk_readp@ptr& (0+255),b
 10518                           
 10519                           ; BSR set to: 0
 10520                           ;diskio.c: 168: unsigned long int start_add;
 10521                           ;diskio.c: 169: static unsigned char arr[512];
 10522                           ;diskio.c: 170: int length,i;
 10523                           ;diskio.c: 172: if(offset == 0)
 10524  0012C0  5029               	movf	disk_readp@offset,w,c
 10525  0012C2  102A               	iorwf	disk_readp@offset+1,w,c
 10526  0012C4  A4D8               	btfss	status,2,c
 10527  0012C6  D0AA               	goto	l507
 10528                           
 10529                           ; BSR set to: 0
 10530                           ;diskio.c: 173: {
 10531                           ;diskio.c: 174: start_add = ((sector*512));
 10532  0012C8  C025  F060         	movff	disk_readp@sector,??_disk_readp
 10533  0012CC  C026  F061         	movff	disk_readp@sector+1,??_disk_readp+1
 10534  0012D0  C027  F062         	movff	disk_readp@sector+2,??_disk_readp+2
 10535  0012D4  C028  F063         	movff	disk_readp@sector+3,??_disk_readp+3
 10536  0012D8  0E09               	movlw	9
 10537  0012DA                     u7735:
 10538  0012DA  90D8               	bcf	status,0,c
 10539  0012DC  3760               	rlcf	??_disk_readp& (0+255),f,b
 10540  0012DE  3761               	rlcf	(??_disk_readp+1)& (0+255),f,b
 10541  0012E0  3762               	rlcf	(??_disk_readp+2)& (0+255),f,b
 10542  0012E2  3763               	rlcf	(??_disk_readp+3)& (0+255),f,b
 10543  0012E4  2EE8               	decfsz	wreg,f,c
 10544  0012E6  D7F9               	goto	u7735
 10545  0012E8  C060  F065         	movff	??_disk_readp,disk_readp@start_add
 10546  0012EC  C061  F066         	movff	??_disk_readp+1,disk_readp@start_add+1
 10547  0012F0  C062  F067         	movff	??_disk_readp+2,disk_readp@start_add+2
 10548  0012F4  C063  F068         	movff	??_disk_readp+3,disk_readp@start_add+3
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;diskio.c: 176: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10552  0012F8  0E3D               	movlw	61
 10553  0012FA  0100               	movlb	0	; () banked
 10554  0012FC  6F61               	movwf	(??_disk_readp+1)& (0+255),b
 10555  0012FE  0EE1               	movlw	225
 10556  001300  6F60               	movwf	??_disk_readp& (0+255),b
 10557  001302  0E3F               	movlw	63
 10558  001304                     u10837:
 10559  001304  2EE8               	decfsz	wreg,f,c
 10560  001306  D7FE               	bra	u10837
 10561  001308  2F60               	decfsz	??_disk_readp& (0+255),f,b
 10562  00130A  D7FC               	bra	u10837
 10563  00130C  2F61               	decfsz	(??_disk_readp+1)& (0+255),f,b
 10564  00130E  D7FA               	bra	u10837
 10565  001310  D000               	nop2	
 10566                           
 10567                           ;diskio.c: 178: dummy_clocks(8);
 10568  001312  0E08               	movlw	8
 10569  001314  ECCA  F018         	call	_dummy_clocks
 10570                           
 10571                           ;diskio.c: 179: command(0X52,start_add,0X00);
 10572  001318  C065  F01C         	movff	disk_readp@start_add,command@arg
 10573  00131C  C066  F01D         	movff	disk_readp@start_add+1,command@arg+1
 10574  001320  C067  F01E         	movff	disk_readp@start_add+2,command@arg+2
 10575  001324  C068  F01F         	movff	disk_readp@start_add+3,command@arg+3
 10576  001328  0E00               	movlw	0
 10577  00132A  6E20               	movwf	command@CRC,c
 10578  00132C  0E52               	movlw	82
 10579  00132E  ECE9  F018         	call	_command
 10580                           
 10581                           ;diskio.c: 180: proceed();
 10582  001332  ECFC  F019         	call	_proceed	;wreg free
 10583  001336                     
 10584                           ;diskio.c: 182: buff = response();
 10585  001336  ECF6  F019         	call	_response	;wreg free
 10586  00133A  0100               	movlb	0	; () banked
 10587  00133C  6F69               	movwf	disk_readp@buff& (0+255),b
 10588                           
 10589                           ; BSR set to: 0
 10590                           ;diskio.c: 183: }while(buff!=0XFF);
 10591  00133E  2969               	incf	disk_readp@buff& (0+255),w,b
 10592  001340  A4D8               	btfss	status,2,c
 10593  001342  D7F9               	goto	l508
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;diskio.c: 184: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10597                           
 10598                           ; BSR set to: 0
 10599  001344  0E3D               	movlw	61
 10600  001346  0100               	movlb	0	; () banked
 10601  001348  6F61               	movwf	(??_disk_readp+1)& (0+255),b
 10602  00134A  0EE1               	movlw	225
 10603  00134C  6F60               	movwf	??_disk_readp& (0+255),b
 10604  00134E  0E3F               	movlw	63
 10605  001350                     u10847:
 10606  001350  2EE8               	decfsz	wreg,f,c
 10607  001352  D7FE               	bra	u10847
 10608  001354  2F60               	decfsz	??_disk_readp& (0+255),f,b
 10609  001356  D7FC               	bra	u10847
 10610  001358  2F61               	decfsz	(??_disk_readp+1)& (0+255),f,b
 10611  00135A  D7FA               	bra	u10847
 10612  00135C  D000               	nop2	
 10613                           
 10614                           ;diskio.c: 186: proceed();
 10615  00135E  ECFC  F019         	call	_proceed	;wreg free
 10616  001362                     
 10617                           ;diskio.c: 188: buff = response();
 10618  001362  ECF6  F019         	call	_response	;wreg free
 10619  001366  0100               	movlb	0	; () banked
 10620  001368  6F69               	movwf	disk_readp@buff& (0+255),b
 10621                           
 10622                           ; BSR set to: 0
 10623                           ;diskio.c: 189: }while(buff!=0xFE);
 10624  00136A  0EFE               	movlw	254
 10625  00136C  1969               	xorwf	disk_readp@buff& (0+255),w,b
 10626  00136E  A4D8               	btfss	status,2,c
 10627  001370  D7F8               	goto	l510
 10628                           
 10629                           ; BSR set to: 0
 10630                           ;diskio.c: 190: length = 0;
 10631                           
 10632                           ; BSR set to: 0
 10633  001372  0E00               	movlw	0
 10634  001374  6F6B               	movwf	(disk_readp@length+1)& (0+255),b
 10635  001376  0E00               	movlw	0
 10636  001378  6F6A               	movwf	disk_readp@length& (0+255),b
 10637                           
 10638                           ;diskio.c: 191: while ( length < count )
 10639  00137A  D00C               	goto	l512
 10640  00137C                     
 10641                           ; BSR set to: 0
 10642                           ;diskio.c: 192: {
 10643                           ;diskio.c: 193: arr[length] = response();
 10644                           
 10645                           ; BSR set to: 0
 10646  00137C  0ED5               	movlw	low disk_readp@arr
 10647  00137E  256A               	addwf	disk_readp@length& (0+255),w,b
 10648  001380  6ED9               	movwf	fsr2l,c
 10649  001382  0E02               	movlw	high disk_readp@arr
 10650  001384  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 10651  001386  6EDA               	movwf	fsr2h,c
 10652  001388  ECF6  F019         	call	_response	;wreg free
 10653  00138C  6EDF               	movwf	indf2,c
 10654                           
 10655                           ;diskio.c: 194: length++;
 10656  00138E  0100               	movlb	0	; () banked
 10657  001390  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 10658  001392  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 10659  001394                     l512:
 10660                           
 10661                           ; BSR set to: 0
 10662                           
 10663                           ; BSR set to: 0
 10664  001394  502B               	movf	disk_readp@count,w,c
 10665  001396  5D6A               	subwf	disk_readp@length& (0+255),w,b
 10666  001398  502C               	movf	disk_readp@count+1,w,c
 10667  00139A  596B               	subwfb	(disk_readp@length+1)& (0+255),w,b
 10668  00139C  A0D8               	btfss	status,0,c
 10669  00139E  D7EE               	goto	l513
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;diskio.c: 195: }
 10673                           ;diskio.c: 197: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10674                           
 10675                           ; BSR set to: 0
 10676  0013A0  0E3D               	movlw	61
 10677  0013A2  0100               	movlb	0	; () banked
 10678  0013A4  6F61               	movwf	(??_disk_readp+1)& (0+255),b
 10679  0013A6  0EE1               	movlw	225
 10680  0013A8  6F60               	movwf	??_disk_readp& (0+255),b
 10681  0013AA  0E3F               	movlw	63
 10682  0013AC                     u10857:
 10683  0013AC  2EE8               	decfsz	wreg,f,c
 10684  0013AE  D7FE               	bra	u10857
 10685  0013B0  2F60               	decfsz	??_disk_readp& (0+255),f,b
 10686  0013B2  D7FC               	bra	u10857
 10687  0013B4  2F61               	decfsz	(??_disk_readp+1)& (0+255),f,b
 10688  0013B6  D7FA               	bra	u10857
 10689  0013B8  D000               	nop2	
 10690                           
 10691                           ;diskio.c: 199: dummy_clocks(8);
 10692  0013BA  0E08               	movlw	8
 10693  0013BC  ECCA  F018         	call	_dummy_clocks
 10694                           
 10695                           ;diskio.c: 200: command(0X4C,0X00000000,0X00);
 10696  0013C0  0E00               	movlw	0
 10697  0013C2  6E1C               	movwf	command@arg,c
 10698  0013C4  0E00               	movlw	0
 10699  0013C6  6E1D               	movwf	command@arg+1,c
 10700  0013C8  0E00               	movlw	0
 10701  0013CA  6E1E               	movwf	command@arg+2,c
 10702  0013CC  0E00               	movlw	0
 10703  0013CE  6E1F               	movwf	command@arg+3,c
 10704  0013D0  0E00               	movlw	0
 10705  0013D2  6E20               	movwf	command@CRC,c
 10706  0013D4  0E4C               	movlw	76
 10707  0013D6  ECE9  F018         	call	_command
 10708                           
 10709                           ;diskio.c: 201: proceed();
 10710  0013DA  ECFC  F019         	call	_proceed	;wreg free
 10711  0013DE                     
 10712                           ;diskio.c: 203: buff = response();
 10713  0013DE  ECF6  F019         	call	_response	;wreg free
 10714  0013E2  0100               	movlb	0	; () banked
 10715  0013E4  6F69               	movwf	disk_readp@buff& (0+255),b
 10716                           
 10717                           ; BSR set to: 0
 10718                           ;diskio.c: 204: }while(buff!=0xFF);
 10719  0013E6  2969               	incf	disk_readp@buff& (0+255),w,b
 10720  0013E8  A4D8               	btfss	status,2,c
 10721  0013EA  D7F9               	goto	l515
 10722                           
 10723                           ; BSR set to: 0
 10724                           ;diskio.c: 206: length = 0;
 10725                           
 10726                           ; BSR set to: 0
 10727  0013EC  0E00               	movlw	0
 10728  0013EE  6F6B               	movwf	(disk_readp@length+1)& (0+255),b
 10729  0013F0  0E00               	movlw	0
 10730  0013F2  6F6A               	movwf	disk_readp@length& (0+255),b
 10731                           
 10732                           ;diskio.c: 208: while(arr[length]!='\0')
 10733  0013F4  D002               	goto	l517
 10734  0013F6                     
 10735                           ; BSR set to: 0
 10736                           ;diskio.c: 209: {
 10737                           ;diskio.c: 211: length++;
 10738                           
 10739                           ; BSR set to: 0
 10740  0013F6  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 10741  0013F8  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 10742  0013FA                     l517:
 10743                           
 10744                           ; BSR set to: 0
 10745                           
 10746                           ; BSR set to: 0
 10747  0013FA  0ED5               	movlw	low disk_readp@arr
 10748  0013FC  256A               	addwf	disk_readp@length& (0+255),w,b
 10749  0013FE  6ED9               	movwf	fsr2l,c
 10750  001400  0E02               	movlw	high disk_readp@arr
 10751  001402  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 10752  001404  6EDA               	movwf	fsr2h,c
 10753  001406  50DF               	movf	indf2,w,c
 10754  001408  A4D8               	btfss	status,2,c
 10755  00140A  D7F5               	goto	l518
 10756                           
 10757                           ; BSR set to: 0
 10758                           ;diskio.c: 212: }
 10759                           ;diskio.c: 214: *rd = length;
 10760                           
 10761                           ; BSR set to: 0
 10762  00140C  C023  FFD9         	movff	disk_readp@rd,fsr2l
 10763  001410  C024  FFDA         	movff	disk_readp@rd+1,fsr2h
 10764  001414  C06A  FFDF         	movff	disk_readp@length,indf2
 10765                           
 10766                           ; BSR set to: 0
 10767                           ;diskio.c: 215: return RES_OK;
 10768  001418  0E00               	movlw	0
 10769                           
 10770                           ; BSR set to: 0
 10771                           ;diskio.c: 216: }
 10772                           
 10773                           ; BSR set to: 0
 10774  00141A  0012               	return	
 10775  00141C                     l507:
 10776                           
 10777                           ; BSR set to: 0
 10778                           ;diskio.c: 217: else
 10779                           ;diskio.c: 218: {
 10780                           ;diskio.c: 219: start_add = (sector*512);
 10781                           
 10782                           ; BSR set to: 0
 10783  00141C  C025  F060         	movff	disk_readp@sector,??_disk_readp
 10784  001420  C026  F061         	movff	disk_readp@sector+1,??_disk_readp+1
 10785  001424  C027  F062         	movff	disk_readp@sector+2,??_disk_readp+2
 10786  001428  C028  F063         	movff	disk_readp@sector+3,??_disk_readp+3
 10787  00142C  0E09               	movlw	9
 10788  00142E                     u7795:
 10789  00142E  90D8               	bcf	status,0,c
 10790  001430  3760               	rlcf	??_disk_readp& (0+255),f,b
 10791  001432  3761               	rlcf	(??_disk_readp+1)& (0+255),f,b
 10792  001434  3762               	rlcf	(??_disk_readp+2)& (0+255),f,b
 10793  001436  3763               	rlcf	(??_disk_readp+3)& (0+255),f,b
 10794  001438  2EE8               	decfsz	wreg,f,c
 10795  00143A  D7F9               	goto	u7795
 10796  00143C  C060  F065         	movff	??_disk_readp,disk_readp@start_add
 10797  001440  C061  F066         	movff	??_disk_readp+1,disk_readp@start_add+1
 10798  001444  C062  F067         	movff	??_disk_readp+2,disk_readp@start_add+2
 10799  001448  C063  F068         	movff	??_disk_readp+3,disk_readp@start_add+3
 10800                           
 10801                           ; BSR set to: 0
 10802                           ;diskio.c: 221: length = 0;
 10803  00144C  0E00               	movlw	0
 10804  00144E  6F6B               	movwf	(disk_readp@length+1)& (0+255),b
 10805  001450  0E00               	movlw	0
 10806  001452  6F6A               	movwf	disk_readp@length& (0+255),b
 10807                           
 10808                           ;diskio.c: 222: while(length<512)
 10809  001454  D00A               	goto	l522
 10810  001456                     
 10811                           ; BSR set to: 0
 10812                           ;diskio.c: 223: {
 10813                           ;diskio.c: 224: arr[length] = 0;
 10814                           
 10815                           ; BSR set to: 0
 10816  001456  0ED5               	movlw	low disk_readp@arr
 10817  001458  256A               	addwf	disk_readp@length& (0+255),w,b
 10818  00145A  6ED9               	movwf	fsr2l,c
 10819  00145C  0E02               	movlw	high disk_readp@arr
 10820  00145E  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 10821  001460  6EDA               	movwf	fsr2h,c
 10822  001462  0E00               	movlw	0
 10823  001464  6EDF               	movwf	indf2,c
 10824                           
 10825                           ; BSR set to: 0
 10826                           ;diskio.c: 225: length++;
 10827  001466  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 10828  001468  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 10829  00146A                     l522:
 10830                           
 10831                           ; BSR set to: 0
 10832                           
 10833                           ; BSR set to: 0
 10834  00146A  BF6B               	btfsc	(disk_readp@length+1)& (0+255),7,b
 10835  00146C  D7F4               	goto	l523
 10836  00146E  0E02               	movlw	2
 10837  001470  5D6B               	subwf	(disk_readp@length+1)& (0+255),w,b
 10838  001472  A0D8               	btfss	status,0,c
 10839  001474  D7F0               	goto	l523
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;diskio.c: 226: }
 10843                           ;diskio.c: 228: _delay((unsigned long)((1000)*(48000000/4000.0)));
 10844                           
 10845                           ; BSR set to: 0
 10846  001476  0E3D               	movlw	61
 10847  001478  0100               	movlb	0	; () banked
 10848  00147A  6F61               	movwf	(??_disk_readp+1)& (0+255),b
 10849  00147C  0EE1               	movlw	225
 10850  00147E  6F60               	movwf	??_disk_readp& (0+255),b
 10851  001480  0E3F               	movlw	63
 10852  001482                     u10867:
 10853  001482  2EE8               	decfsz	wreg,f,c
 10854  001484  D7FE               	bra	u10867
 10855  001486  2F60               	decfsz	??_disk_readp& (0+255),f,b
 10856  001488  D7FC               	bra	u10867
 10857  00148A  2F61               	decfsz	(??_disk_readp+1)& (0+255),f,b
 10858  00148C  D7FA               	bra	u10867
 10859  00148E  D000               	nop2	
 10860                           
 10861                           ;diskio.c: 230: dummy_clocks(8);
 10862  001490  0E08               	movlw	8
 10863  001492  ECCA  F018         	call	_dummy_clocks
 10864                           
 10865                           ;diskio.c: 232: command(0X51,start_add,0X00);
 10866  001496  C065  F01C         	movff	disk_readp@start_add,command@arg
 10867  00149A  C066  F01D         	movff	disk_readp@start_add+1,command@arg+1
 10868  00149E  C067  F01E         	movff	disk_readp@start_add+2,command@arg+2
 10869  0014A2  C068  F01F         	movff	disk_readp@start_add+3,command@arg+3
 10870  0014A6  0E00               	movlw	0
 10871  0014A8  6E20               	movwf	command@CRC,c
 10872  0014AA  0E51               	movlw	81
 10873  0014AC  ECE9  F018         	call	_command
 10874                           
 10875                           ;diskio.c: 233: proceed();
 10876  0014B0  ECFC  F019         	call	_proceed	;wreg free
 10877  0014B4                     
 10878                           ;diskio.c: 235: buff = response();
 10879  0014B4  ECF6  F019         	call	_response	;wreg free
 10880  0014B8  0100               	movlb	0	; () banked
 10881  0014BA  6F69               	movwf	disk_readp@buff& (0+255),b
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;diskio.c: 236: }while(buff!=0XFF);
 10885  0014BC  2969               	incf	disk_readp@buff& (0+255),w,b
 10886  0014BE  A4D8               	btfss	status,2,c
 10887  0014C0  D7F9               	goto	l525
 10888  0014C2                     u7810:
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;diskio.c: 238: buff = response();
 10892                           
 10893                           ; BSR set to: 0
 10894                           
 10895                           ;diskio.c: 237: do{
 10896                           
 10897                           ; BSR set to: 0
 10898  0014C2  ECF6  F019         	call	_response	;wreg free
 10899  0014C6  0100               	movlb	0	; () banked
 10900  0014C8  6F69               	movwf	disk_readp@buff& (0+255),b
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;diskio.c: 239: }while(buff!=0xFE);
 10904  0014CA  0EFE               	movlw	254
 10905  0014CC  1969               	xorwf	disk_readp@buff& (0+255),w,b
 10906  0014CE  A4D8               	btfss	status,2,c
 10907  0014D0  D7F8               	goto	u7810
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;diskio.c: 241: length = 0;
 10911                           
 10912                           ; BSR set to: 0
 10913  0014D2  0E00               	movlw	0
 10914  0014D4  6F6B               	movwf	(disk_readp@length+1)& (0+255),b
 10915  0014D6  0E00               	movlw	0
 10916  0014D8  6F6A               	movwf	disk_readp@length& (0+255),b
 10917                           
 10918                           ;diskio.c: 242: while ( length < 512 )
 10919  0014DA  D048               	goto	u7850
 10920  0014DC                     l7440:
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;diskio.c: 245: {
 10924                           ;diskio.c: 246: arr[length] = response();
 10925  0014DC  0ED5               	movlw	low disk_readp@arr
 10926  0014DE  256A               	addwf	disk_readp@length& (0+255),w,b
 10927  0014E0  6ED9               	movwf	fsr2l,c
 10928  0014E2  0E02               	movlw	high disk_readp@arr
 10929  0014E4  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 10930  0014E6  6EDA               	movwf	fsr2h,c
 10931  0014E8  ECF6  F019         	call	_response	;wreg free
 10932  0014EC  6EDF               	movwf	indf2,c
 10933                           
 10934                           ;diskio.c: 247: length++;
 10935  0014EE  0100               	movlb	0	; () banked
 10936  0014F0  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 10937  0014F2  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 10938  0014F4                     
 10939                           ; BSR set to: 0
 10940                           
 10941                           ; BSR set to: 0
 10942  0014F4  0629               	decf	disk_readp@offset,f,c
 10943  0014F6  A0D8               	btfss	status,0,c
 10944  0014F8  062A               	decf	disk_readp@offset+1,f,c
 10945  0014FA  2829               	incf	disk_readp@offset,w,c
 10946  0014FC  E1EF               	bnz	l7440
 10947  0014FE  282A               	incf	disk_readp@offset+1,w,c
 10948  001500  B4D8               	btfsc	status,2,c
 10949  001502  D019               	goto	l534
 10950  001504  D7EB               	goto	l532
 10951  001506                     l7446:
 10952                           
 10953                           ; BSR set to: 0
 10954                           ;diskio.c: 250: {
 10955                           ;diskio.c: 251: *rd = response();
 10956  001506  ECF6  F019         	call	_response	;wreg free
 10957  00150A  C023  FFD9         	movff	disk_readp@rd,fsr2l
 10958  00150E  C024  FFDA         	movff	disk_readp@rd+1,fsr2h
 10959  001512  6EDF               	movwf	indf2,c
 10960                           
 10961                           ;diskio.c: 252: arr[length] = *rd;
 10962  001514  C023  FFD9         	movff	disk_readp@rd,fsr2l
 10963  001518  C024  FFDA         	movff	disk_readp@rd+1,fsr2h
 10964  00151C  0ED5               	movlw	low disk_readp@arr
 10965  00151E  0100               	movlb	0	; () banked
 10966  001520  256A               	addwf	disk_readp@length& (0+255),w,b
 10967  001522  6EE1               	movwf	fsr1l,c
 10968  001524  0E02               	movlw	high disk_readp@arr
 10969  001526  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 10970  001528  6EE2               	movwf	fsr1h,c
 10971  00152A  CFDF FFE7          	movff	indf2,indf1
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;diskio.c: 253: rd++;
 10975  00152E  4A23               	infsnz	disk_readp@rd,f,c
 10976  001530  2A24               	incf	disk_readp@rd+1,f,c
 10977                           
 10978                           ; BSR set to: 0
 10979                           ;diskio.c: 254: length++;
 10980  001532  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 10981  001534  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 10982  001536                     l534:
 10983                           
 10984                           ; BSR set to: 0
 10985                           
 10986                           ; BSR set to: 0
 10987  001536  062B               	decf	disk_readp@count,f,c
 10988  001538  A0D8               	btfss	status,0,c
 10989  00153A  062C               	decf	disk_readp@count+1,f,c
 10990  00153C  282B               	incf	disk_readp@count,w,c
 10991  00153E  E1E3               	bnz	l7446
 10992  001540  282C               	incf	disk_readp@count+1,w,c
 10993  001542  B4D8               	btfsc	status,2,c
 10994  001544  D00D               	goto	l537
 10995  001546  D7DF               	goto	l535
 10996  001548                     
 10997                           ; BSR set to: 0
 10998                           ;diskio.c: 257: {
 10999                           ;diskio.c: 258: arr[length] = response();
 11000                           
 11001                           ; BSR set to: 0
 11002  001548  0ED5               	movlw	low disk_readp@arr
 11003  00154A  256A               	addwf	disk_readp@length& (0+255),w,b
 11004  00154C  6ED9               	movwf	fsr2l,c
 11005  00154E  0E02               	movlw	high disk_readp@arr
 11006  001550  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11007  001552  6EDA               	movwf	fsr2h,c
 11008  001554  ECF6  F019         	call	_response	;wreg free
 11009  001558  6EDF               	movwf	indf2,c
 11010                           
 11011                           ;diskio.c: 259: length++;
 11012  00155A  0100               	movlb	0	; () banked
 11013  00155C  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 11014  00155E  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 11015  001560                     l537:
 11016                           
 11017                           ; BSR set to: 0
 11018                           
 11019                           ; BSR set to: 0
 11020  001560  BF6B               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11021  001562  D7F2               	goto	l538
 11022  001564  0E02               	movlw	2
 11023  001566  5D6B               	subwf	(disk_readp@length+1)& (0+255),w,b
 11024  001568  A0D8               	btfss	status,0,c
 11025  00156A  D7EE               	goto	l538
 11026  00156C                     u7850:
 11027                           
 11028                           ; BSR set to: 0
 11029                           
 11030                           ; BSR set to: 0
 11031                           
 11032                           ; BSR set to: 0
 11033  00156C  BF6B               	btfsc	(disk_readp@length+1)& (0+255),7,b
 11034  00156E  D7C2               	goto	l531
 11035  001570  0E02               	movlw	2
 11036  001572  5D6B               	subwf	(disk_readp@length+1)& (0+255),w,b
 11037  001574  A0D8               	btfss	status,0,c
 11038  001576  D7BE               	goto	l531
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;diskio.c: 260: }
 11042                           ;diskio.c: 261: }
 11043                           ;diskio.c: 262: _delay((unsigned long)((1000)*(48000000/4000.0)));
 11044                           
 11045                           ; BSR set to: 0
 11046  001578  0E3D               	movlw	61
 11047  00157A  0100               	movlb	0	; () banked
 11048  00157C  6F61               	movwf	(??_disk_readp+1)& (0+255),b
 11049  00157E  0EE1               	movlw	225
 11050  001580  6F60               	movwf	??_disk_readp& (0+255),b
 11051  001582  0E3F               	movlw	63
 11052  001584                     u10877:
 11053  001584  2EE8               	decfsz	wreg,f,c
 11054  001586  D7FE               	bra	u10877
 11055  001588  2F60               	decfsz	??_disk_readp& (0+255),f,b
 11056  00158A  D7FC               	bra	u10877
 11057  00158C  2F61               	decfsz	(??_disk_readp+1)& (0+255),f,b
 11058  00158E  D7FA               	bra	u10877
 11059  001590  D000               	nop2	
 11060                           
 11061                           ;diskio.c: 268: command(0X4C,0X00000000,0X00);
 11062  001592  0E00               	movlw	0
 11063  001594  6E1C               	movwf	command@arg,c
 11064  001596  0E00               	movlw	0
 11065  001598  6E1D               	movwf	command@arg+1,c
 11066  00159A  0E00               	movlw	0
 11067  00159C  6E1E               	movwf	command@arg+2,c
 11068  00159E  0E00               	movlw	0
 11069  0015A0  6E1F               	movwf	command@arg+3,c
 11070  0015A2  0E00               	movlw	0
 11071  0015A4  6E20               	movwf	command@CRC,c
 11072  0015A6  0E4C               	movlw	76
 11073  0015A8  ECE9  F018         	call	_command
 11074                           
 11075                           ;diskio.c: 269: proceed();
 11076  0015AC  ECFC  F019         	call	_proceed	;wreg free
 11077  0015B0                     
 11078                           ;diskio.c: 271: buff = response();
 11079  0015B0  ECF6  F019         	call	_response	;wreg free
 11080  0015B4  0100               	movlb	0	; () banked
 11081  0015B6  6F69               	movwf	disk_readp@buff& (0+255),b
 11082                           
 11083                           ; BSR set to: 0
 11084                           ;diskio.c: 272: }while(buff!=0xFF);
 11085  0015B8  2969               	incf	disk_readp@buff& (0+255),w,b
 11086  0015BA  A4D8               	btfss	status,2,c
 11087  0015BC  D7F9               	goto	l541
 11088                           
 11089                           ; BSR set to: 0
 11090                           ;diskio.c: 274: length = 0;
 11091                           
 11092                           ; BSR set to: 0
 11093  0015BE  0E00               	movlw	0
 11094  0015C0  6F6B               	movwf	(disk_readp@length+1)& (0+255),b
 11095  0015C2  0E00               	movlw	0
 11096  0015C4  6F6A               	movwf	disk_readp@length& (0+255),b
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;diskio.c: 275: if(flag == 1){
 11100  0015C6  05D5               	decf	_flag& (0+255),w,b
 11101  0015C8  11D6               	iorwf	(_flag+1)& (0+255),w,b
 11102  0015CA  B4D8               	btfsc	status,2,c
 11103  0015CC  D003               	goto	l544
 11104  0015CE  D00C               	goto	l543
 11105  0015D0                     
 11106                           ; BSR set to: 0
 11107                           ;diskio.c: 277: {
 11108                           ;diskio.c: 279: length++;
 11109                           
 11110                           ; BSR set to: 0
 11111  0015D0  4B6A               	infsnz	disk_readp@length& (0+255),f,b
 11112  0015D2  2B6B               	incf	(disk_readp@length+1)& (0+255),f,b
 11113  0015D4                     l544:
 11114                           
 11115                           ; BSR set to: 0
 11116                           
 11117                           ; BSR set to: 0
 11118  0015D4  0ED5               	movlw	low disk_readp@arr
 11119  0015D6  256A               	addwf	disk_readp@length& (0+255),w,b
 11120  0015D8  6ED9               	movwf	fsr2l,c
 11121  0015DA  0E02               	movlw	high disk_readp@arr
 11122  0015DC  216B               	addwfc	(disk_readp@length+1)& (0+255),w,b
 11123  0015DE  6EDA               	movwf	fsr2h,c
 11124  0015E0  50DF               	movf	indf2,w,c
 11125  0015E2  B4D8               	btfsc	status,2,c
 11126  0015E4  D00C               	goto	l547
 11127  0015E6  D7F4               	goto	l545
 11128  0015E8                     l543:
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;diskio.c: 282: else
 11132                           ;diskio.c: 283: {
 11133                           ;diskio.c: 284: posicao_cursor_lcd(2,0);
 11134                           
 11135                           ; BSR set to: 0
 11136  0015E8  0E00               	movlw	0
 11137  0015EA  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 11138  0015EC  0E02               	movlw	2
 11139  0015EE  EC4C  F017         	call	_posicao_cursor_lcd
 11140                           
 11141                           ;diskio.c: 285: escreve_frase_ram_lcd("..");
 11142  0015F2  0E7C               	movlw	low STR_29
 11143  0015F4  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 11144  0015F6  0E62               	movlw	high STR_29
 11145  0015F8  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 11146  0015FA  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
 11147  0015FE                     l547:
 11148                           
 11149                           ;diskio.c: 286: }
 11150                           ;diskio.c: 287: _delay((unsigned long)((2000)*(48000000/4000.0)));
 11151  0015FE  0E7A               	movlw	122
 11152  001600  0100               	movlb	0	; () banked
 11153  001602  6F61               	movwf	(??_disk_readp+1)& (0+255),b
 11154  001604  0EC1               	movlw	193
 11155  001606  6F60               	movwf	??_disk_readp& (0+255),b
 11156  001608  0E81               	movlw	129
 11157  00160A                     u10887:
 11158  00160A  2EE8               	decfsz	wreg,f,c
 11159  00160C  D7FE               	bra	u10887
 11160  00160E  2F60               	decfsz	??_disk_readp& (0+255),f,b
 11161  001610  D7FC               	bra	u10887
 11162  001612  2F61               	decfsz	(??_disk_readp+1)& (0+255),f,b
 11163  001614  D7FA               	bra	u10887
 11164  001616  D000               	nop2	
 11165                           
 11166                           ;diskio.c: 289: return RES_OK;
 11167  001618  0E00               	movlw	0
 11168  00161A  0012               	return	
 11169  00161C                     __end_of_disk_readp:
 11170                           	opt stack 0
 11171                           tosu	equ	0xFFF
 11172                           tosh	equ	0xFFE
 11173                           tosl	equ	0xFFD
 11174                           pclath	equ	0xFFA
 11175                           tblptru	equ	0xFF8
 11176                           tblptrh	equ	0xFF7
 11177                           tblptrl	equ	0xFF6
 11178                           tablat	equ	0xFF5
 11179                           prodh	equ	0xFF4
 11180                           prodl	equ	0xFF3
 11181                           intcon	equ	0xFF2
 11182                           intcon2	equ	0xFF1
 11183                           intcon3	equ	0xFF0
 11184                           postinc0	equ	0xFEE
 11185                           wreg	equ	0xFE8
 11186                           indf1	equ	0xFE7
 11187                           postinc1	equ	0xFE6
 11188                           postdec1	equ	0xFE5
 11189                           fsr1h	equ	0xFE2
 11190                           fsr1l	equ	0xFE1
 11191                           indf2	equ	0xFDF
 11192                           postinc2	equ	0xFDE
 11193                           postdec2	equ	0xFDD
 11194                           plusw2	equ	0xFDB
 11195                           fsr2h	equ	0xFDA
 11196                           fsr2l	equ	0xFD9
 11197                           status	equ	0xFD8
 11198                           
 11199 ;; *************** function _response *****************
 11200 ;; Defined at:
 11201 ;;		line 48 in file "bibliotecas/SDCard.c"
 11202 ;; Parameters:    Size  Location     Type
 11203 ;;		None
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;  buff            1   28[COMRAM] unsigned char 
 11206 ;; Return value:  Size  Location     Type
 11207 ;;                  1    wreg      unsigned char 
 11208 ;; Registers used:
 11209 ;;		wreg, status,2, status,0, cstack
 11210 ;; Tracked objects:
 11211 ;;		On entry : 0/0
 11212 ;;		On exit  : 0/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11215 ;;      Params:         0       0       0       0       0       0       0       0       0
 11216 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11217 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11218 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11219 ;;Total ram usage:        1 bytes
 11220 ;; Hardware stack levels used:    1
 11221 ;; Hardware stack levels required when called:    3
 11222 ;; This function calls:
 11223 ;;		_recebe_dado_SPI
 11224 ;; This function is called by:
 11225 ;;		_reset
 11226 ;;		_disk_initialize
 11227 ;;		_disk_readp
 11228 ;;		_disk_writep
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           	psect	text36
 11233  0033EC                     __ptext36:
 11234                           	opt stack 0
 11235  0033EC                     _response:
 11236                           	opt stack 22
 11237                           
 11238                           ;SDCard.c: 51: unsigned char buff;
 11239                           ;SDCard.c: 52: LATBbits.LATB4 = 0;
 11240                           
 11241                           ;incstack = 0
 11242  0033EC  988A               	bcf	3978,4,c	;volatile
 11243                           
 11244                           ;SDCard.c: 53: buff= recebe_dado_SPI();
 11245  0033EE  ECB9  F017         	call	_recebe_dado_SPI	;wreg free
 11246  0033F2  6E1D               	movwf	response@buff,c
 11247                           
 11248                           ;SDCard.c: 55: return buff;
 11249  0033F4  501D               	movf	response@buff,w,c
 11250  0033F6  0012               	return	
 11251  0033F8                     __end_of_response:
 11252                           	opt stack 0
 11253                           tosu	equ	0xFFF
 11254                           tosh	equ	0xFFE
 11255                           tosl	equ	0xFFD
 11256                           pclath	equ	0xFFA
 11257                           tblptru	equ	0xFF8
 11258                           tblptrh	equ	0xFF7
 11259                           tblptrl	equ	0xFF6
 11260                           tablat	equ	0xFF5
 11261                           prodh	equ	0xFF4
 11262                           prodl	equ	0xFF3
 11263                           intcon	equ	0xFF2
 11264                           intcon2	equ	0xFF1
 11265                           intcon3	equ	0xFF0
 11266                           postinc0	equ	0xFEE
 11267                           wreg	equ	0xFE8
 11268                           indf1	equ	0xFE7
 11269                           postinc1	equ	0xFE6
 11270                           postdec1	equ	0xFE5
 11271                           fsr1h	equ	0xFE2
 11272                           fsr1l	equ	0xFE1
 11273                           indf2	equ	0xFDF
 11274                           postinc2	equ	0xFDE
 11275                           postdec2	equ	0xFDD
 11276                           plusw2	equ	0xFDB
 11277                           fsr2h	equ	0xFDA
 11278                           fsr2l	equ	0xFD9
 11279                           status	equ	0xFD8
 11280                           
 11281 ;; *************** function _recebe_dado_SPI *****************
 11282 ;; Defined at:
 11283 ;;		line 143 in file "bibliotecas/SHRC.c"
 11284 ;; Parameters:    Size  Location     Type
 11285 ;;		None
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;  contador        1   27[COMRAM] unsigned char 
 11288 ;; Return value:  Size  Location     Type
 11289 ;;                  1    wreg      unsigned char 
 11290 ;; Registers used:
 11291 ;;		wreg, status,2, status,0
 11292 ;; Tracked objects:
 11293 ;;		On entry : 0/0
 11294 ;;		On exit  : 0/0
 11295 ;;		Unchanged: 0/0
 11296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11297 ;;      Params:         0       0       0       0       0       0       0       0       0
 11298 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11299 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11300 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11301 ;;Total ram usage:        3 bytes
 11302 ;; Hardware stack levels used:    1
 11303 ;; Hardware stack levels required when called:    2
 11304 ;; This function calls:
 11305 ;;		Nothing
 11306 ;; This function is called by:
 11307 ;;		_response
 11308 ;; This function uses a non-reentrant model
 11309 ;;
 11310                           
 11311                           	psect	text37
 11312  002F72                     __ptext37:
 11313                           	opt stack 0
 11314  002F72                     _recebe_dado_SPI:
 11315                           	opt stack 22
 11316                           
 11317                           ;SHRC.c: 145: dado = 0;
 11318                           
 11319                           ;incstack = 0
 11320  002F72  0E00               	movlw	0
 11321  002F74  6E3A               	movwf	_dado,c
 11322                           
 11323                           ;SHRC.c: 147: unsigned char contador=0;
 11324  002F76  0E00               	movlw	0
 11325  002F78  6E1C               	movwf	recebe_dado_SPI@contador,c
 11326                           
 11327                           ;SHRC.c: 149: (INTCONbits.GIE = 0);
 11328  002F7A  9EF2               	bcf	intcon,7,c	;volatile
 11329                           
 11330                           ;SHRC.c: 151: while(contador<=7)
 11331  002F7C  D022               	goto	l348
 11332  002F7E                     
 11333                           ;SHRC.c: 152: {
 11334                           ;SHRC.c: 153: dado |= (PORTBbits.RB5 << (7-contador));
 11335  002F7E  501C               	movf	recebe_dado_SPI@contador,w,c
 11336  002F80  0800               	sublw	0
 11337  002F82  6E1A               	movwf	??_recebe_dado_SPI& (0+255),c
 11338  002F84  0E07               	movlw	7
 11339  002F86  261A               	addwf	??_recebe_dado_SPI,f,c
 11340  002F88  AA81               	btfss	3969,5,c	;volatile
 11341  002F8A  D003               	goto	u7470
 11342  002F8C  6A1B               	clrf	(??_recebe_dado_SPI+1)& (0+255),c
 11343  002F8E  2A1B               	incf	(??_recebe_dado_SPI+1)& (0+255),f,c
 11344  002F90  D001               	goto	u7478
 11345  002F92                     u7470:
 11346  002F92  6A1B               	clrf	(??_recebe_dado_SPI+1)& (0+255),c
 11347  002F94                     u7478:
 11348  002F94  2A1A               	incf	??_recebe_dado_SPI,f,c
 11349  002F96  D002               	goto	u7484
 11350  002F98                     u7485:
 11351  002F98  90D8               	bcf	status,0,c
 11352  002F9A  361B               	rlcf	??_recebe_dado_SPI+1,f,c
 11353  002F9C                     u7484:
 11354  002F9C  2E1A               	decfsz	??_recebe_dado_SPI,f,c
 11355  002F9E  D7FC               	goto	u7485
 11356  002FA0  501B               	movf	??_recebe_dado_SPI+1,w,c
 11357  002FA2  123A               	iorwf	_dado,f,c
 11358                           
 11359                           ;SHRC.c: 155: _delay((unsigned long)((30)*(48000000/4000000.0)));
 11360  002FA4  0E78               	movlw	120
 11361  002FA6                     u10897:
 11362  002FA6  2EE8               	decfsz	wreg,f,c
 11363  002FA8  D7FE               	bra	u10897
 11364                           
 11365                           ;SHRC.c: 156: LATBbits.LATB6 = 1;
 11366  002FAA  8C8A               	bsf	3978,6,c	;volatile
 11367                           
 11368                           ;SHRC.c: 157: _delay((unsigned long)((30)*(48000000/4000000.0)));
 11369  002FAC  0E78               	movlw	120
 11370  002FAE                     u10907:
 11371  002FAE  2EE8               	decfsz	wreg,f,c
 11372  002FB0  D7FE               	bra	u10907
 11373                           
 11374                           ;SHRC.c: 158: _delay((unsigned long)((30)*(48000000/4000000.0)));
 11375  002FB2  0E78               	movlw	120
 11376  002FB4                     u10917:
 11377  002FB4  2EE8               	decfsz	wreg,f,c
 11378  002FB6  D7FE               	bra	u10917
 11379                           
 11380                           ;SHRC.c: 159: LATBbits.LATB6 = 0;
 11381  002FB8  9C8A               	bcf	3978,6,c	;volatile
 11382                           
 11383                           ;SHRC.c: 160: _delay((unsigned long)((30)*(48000000/4000000.0)));
 11384  002FBA  0E78               	movlw	120
 11385  002FBC                     u10927:
 11386  002FBC  2EE8               	decfsz	wreg,f,c
 11387  002FBE  D7FE               	bra	u10927
 11388                           
 11389                           ;SHRC.c: 161: contador++;
 11390  002FC0  2A1C               	incf	recebe_dado_SPI@contador,f,c
 11391  002FC2                     l348:
 11392  002FC2  0E07               	movlw	7
 11393  002FC4  641C               	cpfsgt	recebe_dado_SPI@contador,c
 11394  002FC6  D7DB               	goto	l349
 11395                           
 11396                           ;SHRC.c: 162: }
 11397                           ;SHRC.c: 163: (INTCONbits.GIE = 1);
 11398  002FC8  8EF2               	bsf	intcon,7,c	;volatile
 11399                           
 11400                           ;SHRC.c: 164: return dado;
 11401  002FCA  503A               	movf	_dado,w,c
 11402  002FCC  0012               	return	
 11403  002FCE                     __end_of_recebe_dado_SPI:
 11404                           	opt stack 0
 11405                           tosu	equ	0xFFF
 11406                           tosh	equ	0xFFE
 11407                           tosl	equ	0xFFD
 11408                           pclath	equ	0xFFA
 11409                           tblptru	equ	0xFF8
 11410                           tblptrh	equ	0xFF7
 11411                           tblptrl	equ	0xFF6
 11412                           tablat	equ	0xFF5
 11413                           prodh	equ	0xFF4
 11414                           prodl	equ	0xFF3
 11415                           intcon	equ	0xFF2
 11416                           intcon2	equ	0xFF1
 11417                           intcon3	equ	0xFF0
 11418                           postinc0	equ	0xFEE
 11419                           wreg	equ	0xFE8
 11420                           indf1	equ	0xFE7
 11421                           postinc1	equ	0xFE6
 11422                           postdec1	equ	0xFE5
 11423                           fsr1h	equ	0xFE2
 11424                           fsr1l	equ	0xFE1
 11425                           indf2	equ	0xFDF
 11426                           postinc2	equ	0xFDE
 11427                           postdec2	equ	0xFDD
 11428                           plusw2	equ	0xFDB
 11429                           fsr2h	equ	0xFDA
 11430                           fsr2l	equ	0xFD9
 11431                           status	equ	0xFD8
 11432                           
 11433 ;; *************** function _proceed *****************
 11434 ;; Defined at:
 11435 ;;		line 87 in file "bibliotecas/SDCard.c"
 11436 ;; Parameters:    Size  Location     Type
 11437 ;;		None
 11438 ;; Auto vars:     Size  Location     Type
 11439 ;;		None
 11440 ;; Return value:  Size  Location     Type
 11441 ;;                  1    wreg      void 
 11442 ;; Registers used:
 11443 ;;		wreg, status,2, status,0, cstack
 11444 ;; Tracked objects:
 11445 ;;		On entry : 0/0
 11446 ;;		On exit  : 0/0
 11447 ;;		Unchanged: 0/0
 11448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11449 ;;      Params:         0       0       0       0       0       0       0       0       0
 11450 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11451 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11452 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11453 ;;Total ram usage:        0 bytes
 11454 ;; Hardware stack levels used:    1
 11455 ;; Hardware stack levels required when called:    3
 11456 ;; This function calls:
 11457 ;;		_escreve_dado_SPI
 11458 ;; This function is called by:
 11459 ;;		_SDCard
 11460 ;;		_reset
 11461 ;;		_disk_initialize
 11462 ;;		_disk_readp
 11463 ;;		_disk_writep
 11464 ;; This function uses a non-reentrant model
 11465 ;;
 11466                           
 11467                           	psect	text38
 11468  0033F8                     __ptext38:
 11469                           	opt stack 0
 11470  0033F8                     _proceed:
 11471                           	opt stack 25
 11472                           
 11473                           ;SDCard.c: 89: LATBbits.LATB4 = 0;
 11474                           
 11475                           ;incstack = 0
 11476  0033F8  988A               	bcf	3978,4,c	;volatile
 11477                           
 11478                           ;SDCard.c: 90: escreve_dado_SPI(0xFF);
 11479  0033FA  0EFF               	movlw	255
 11480  0033FC  EC64  F018         	call	_escreve_dado_SPI
 11481                           
 11482                           ;SDCard.c: 91: LATBbits.LATB4 = 1;
 11483  003400  888A               	bsf	3978,4,c	;volatile
 11484  003402  0012               	return		;funcret
 11485  003404                     __end_of_proceed:
 11486                           	opt stack 0
 11487                           tosu	equ	0xFFF
 11488                           tosh	equ	0xFFE
 11489                           tosl	equ	0xFFD
 11490                           pclath	equ	0xFFA
 11491                           tblptru	equ	0xFF8
 11492                           tblptrh	equ	0xFF7
 11493                           tblptrl	equ	0xFF6
 11494                           tablat	equ	0xFF5
 11495                           prodh	equ	0xFF4
 11496                           prodl	equ	0xFF3
 11497                           intcon	equ	0xFF2
 11498                           intcon2	equ	0xFF1
 11499                           intcon3	equ	0xFF0
 11500                           postinc0	equ	0xFEE
 11501                           wreg	equ	0xFE8
 11502                           indf1	equ	0xFE7
 11503                           postinc1	equ	0xFE6
 11504                           postdec1	equ	0xFE5
 11505                           fsr1h	equ	0xFE2
 11506                           fsr1l	equ	0xFE1
 11507                           indf2	equ	0xFDF
 11508                           postinc2	equ	0xFDE
 11509                           postdec2	equ	0xFDD
 11510                           plusw2	equ	0xFDB
 11511                           fsr2h	equ	0xFDA
 11512                           fsr2l	equ	0xFD9
 11513                           status	equ	0xFD8
 11514                           
 11515 ;; *************** function _posicao_cursor_lcd *****************
 11516 ;; Defined at:
 11517 ;;		line 271 in file "bibliotecas/display_lcd.c"
 11518 ;; Parameters:    Size  Location     Type
 11519 ;;  linha           1    wreg     unsigned char 
 11520 ;;  coluna          1   28[COMRAM] unsigned char 
 11521 ;; Auto vars:     Size  Location     Type
 11522 ;;  linha           1   29[COMRAM] unsigned char 
 11523 ;;  endereco        1   30[COMRAM] unsigned char 
 11524 ;; Return value:  Size  Location     Type
 11525 ;;                  1    wreg      void 
 11526 ;; Registers used:
 11527 ;;		wreg, status,2, status,0, cstack
 11528 ;; Tracked objects:
 11529 ;;		On entry : 0/0
 11530 ;;		On exit  : 0/0
 11531 ;;		Unchanged: 0/0
 11532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11533 ;;      Params:         1       0       0       0       0       0       0       0       0
 11534 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11535 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11536 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11537 ;;Total ram usage:        3 bytes
 11538 ;; Hardware stack levels used:    1
 11539 ;; Hardware stack levels required when called:    4
 11540 ;; This function calls:
 11541 ;;		_endereco_cursor_lcd
 11542 ;; This function is called by:
 11543 ;;		_mensagem_inicial
 11544 ;;		_SDCard
 11545 ;;		_disk_initialize
 11546 ;;		_disk_readp
 11547 ;;		_pf_read
 11548 ;;		_pf_write
 11549 ;;		_inicializa_SPI
 11550 ;;		_ReadSPI_
 11551 ;;		_leitura_chave
 11552 ;; This function uses a non-reentrant model
 11553 ;;
 11554                           
 11555                           	psect	text39
 11556  002E98                     __ptext39:
 11557                           	opt stack 0
 11558  002E98                     _posicao_cursor_lcd:
 11559                           	opt stack 25
 11560                           
 11561                           ;incstack = 0
 11562                           ;posicao_cursor_lcd@linha stored from wreg
 11563  002E98  6E1E               	movwf	posicao_cursor_lcd@linha,c
 11564                           
 11565                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 11566  002E9A  0E00               	movlw	0
 11567  002E9C  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 11568                           
 11569                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 11570  002E9E  0E11               	movlw	17
 11571  002EA0  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 11572  002EA2  D02F               	goto	l626
 11573  002EA4  D01E               	goto	l627
 11574  002EA6                     l628:
 11575                           
 11576                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 11577  002EA6  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 11578                           
 11579                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 11580  002EAA  501F               	movf	posicao_cursor_lcd@endereco,w,c
 11581  002EAC  EC84  F017         	call	_endereco_cursor_lcd
 11582                           
 11583                           ;display_lcd.c: 284: break;
 11584  002EB0  D026               	goto	l629
 11585  002EB2                     
 11586                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 11587  002EB2  501D               	movf	posicao_cursor_lcd@coluna,w,c
 11588  002EB4  0F40               	addlw	64
 11589  002EB6  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 11590                           
 11591                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 11592  002EB8  501F               	movf	posicao_cursor_lcd@endereco,w,c
 11593  002EBA  EC84  F017         	call	_endereco_cursor_lcd
 11594                           
 11595                           ;display_lcd.c: 289: break;
 11596  002EBE  D01F               	goto	l629
 11597  002EC0                     
 11598                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 11599  002EC0  501D               	movf	posicao_cursor_lcd@coluna,w,c
 11600  002EC2  0F14               	addlw	20
 11601  002EC4  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 11602                           
 11603                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 11604  002EC6  501F               	movf	posicao_cursor_lcd@endereco,w,c
 11605  002EC8  EC84  F017         	call	_endereco_cursor_lcd
 11606                           
 11607                           ;display_lcd.c: 294: break;
 11608  002ECC  D018               	goto	l629
 11609  002ECE                     
 11610                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 11611  002ECE  501D               	movf	posicao_cursor_lcd@coluna,w,c
 11612  002ED0  0F54               	addlw	84
 11613  002ED2  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 11614                           
 11615                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 11616  002ED4  501F               	movf	posicao_cursor_lcd@endereco,w,c
 11617  002ED6  EC84  F017         	call	_endereco_cursor_lcd
 11618                           
 11619                           ;display_lcd.c: 299: break;
 11620  002EDA  D011               	goto	l629
 11621  002EDC                     
 11622                           ;display_lcd.c: 302: endereco = 0x00U;
 11623  002EDC  0E00               	movlw	0
 11624  002EDE  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 11625                           
 11626                           ;display_lcd.c: 304: }
 11627                           
 11628                           ;display_lcd.c: 303: break;
 11629  002EE0  D00E               	goto	l629
 11630  002EE2                     l627:
 11631  002EE2  501E               	movf	posicao_cursor_lcd@linha,w,c
 11632                           
 11633                           ; Switch size 1, requested type "space"
 11634                           ; Number of cases is 4, Range of values is 1 to 4
 11635                           ; switch strategies available:
 11636                           ; Name         Instructions Cycles
 11637                           ; simple_byte           13     7 (average)
 11638                           ;	Chosen strategy is simple_byte
 11639  002EE4  0A01               	xorlw	1	; case 1
 11640  002EE6  B4D8               	btfsc	status,2,c
 11641  002EE8  D7DE               	goto	l628
 11642  002EEA  0A03               	xorlw	3	; case 2
 11643  002EEC  B4D8               	btfsc	status,2,c
 11644  002EEE  D7E1               	goto	l630
 11645  002EF0  0A01               	xorlw	1	; case 3
 11646  002EF2  B4D8               	btfsc	status,2,c
 11647  002EF4  D7E5               	goto	l631
 11648  002EF6  0A07               	xorlw	7	; case 4
 11649  002EF8  B4D8               	btfsc	status,2,c
 11650  002EFA  D7E9               	goto	l632
 11651  002EFC  D7EF               	goto	l633
 11652  002EFE                     l629:
 11653                           
 11654                           ;display_lcd.c: 306: coluna++;
 11655  002EFE  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 11656                           
 11657                           ;display_lcd.c: 307: }
 11658  002F00  0012               	return	
 11659  002F02                     l626:
 11660                           
 11661                           ;display_lcd.c: 308: else
 11662                           ;display_lcd.c: 309: {
 11663                           ;display_lcd.c: 310: endereco = 0x00U;
 11664  002F02  0E00               	movlw	0
 11665  002F04  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 11666  002F06  0012               	return	
 11667  002F08                     __end_of_posicao_cursor_lcd:
 11668                           	opt stack 0
 11669                           tosu	equ	0xFFF
 11670                           tosh	equ	0xFFE
 11671                           tosl	equ	0xFFD
 11672                           pclath	equ	0xFFA
 11673                           tblptru	equ	0xFF8
 11674                           tblptrh	equ	0xFF7
 11675                           tblptrl	equ	0xFF6
 11676                           tablat	equ	0xFF5
 11677                           prodh	equ	0xFF4
 11678                           prodl	equ	0xFF3
 11679                           intcon	equ	0xFF2
 11680                           intcon2	equ	0xFF1
 11681                           intcon3	equ	0xFF0
 11682                           postinc0	equ	0xFEE
 11683                           wreg	equ	0xFE8
 11684                           indf1	equ	0xFE7
 11685                           postinc1	equ	0xFE6
 11686                           postdec1	equ	0xFE5
 11687                           fsr1h	equ	0xFE2
 11688                           fsr1l	equ	0xFE1
 11689                           indf2	equ	0xFDF
 11690                           postinc2	equ	0xFDE
 11691                           postdec2	equ	0xFDD
 11692                           plusw2	equ	0xFDB
 11693                           fsr2h	equ	0xFDA
 11694                           fsr2l	equ	0xFD9
 11695                           status	equ	0xFD8
 11696                           
 11697 ;; *************** function _endereco_cursor_lcd *****************
 11698 ;; Defined at:
 11699 ;;		line 218 in file "bibliotecas/display_lcd.c"
 11700 ;; Parameters:    Size  Location     Type
 11701 ;;  endereco        1    wreg     unsigned char 
 11702 ;; Auto vars:     Size  Location     Type
 11703 ;;  endereco        1   27[COMRAM] unsigned char 
 11704 ;; Return value:  Size  Location     Type
 11705 ;;                  1    wreg      void 
 11706 ;; Registers used:
 11707 ;;		wreg, status,2, status,0, cstack
 11708 ;; Tracked objects:
 11709 ;;		On entry : 0/0
 11710 ;;		On exit  : 0/0
 11711 ;;		Unchanged: 0/0
 11712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11713 ;;      Params:         0       0       0       0       0       0       0       0       0
 11714 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11715 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11716 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11717 ;;Total ram usage:        1 bytes
 11718 ;; Hardware stack levels used:    1
 11719 ;; Hardware stack levels required when called:    3
 11720 ;; This function calls:
 11721 ;;		_delay
 11722 ;; This function is called by:
 11723 ;;		_posicao_cursor_lcd
 11724 ;;		_cria_caractere_lcd
 11725 ;; This function uses a non-reentrant model
 11726 ;;
 11727                           
 11728                           	psect	text40
 11729  002F08                     __ptext40:
 11730                           	opt stack 0
 11731  002F08                     _endereco_cursor_lcd:
 11732                           	opt stack 25
 11733                           
 11734                           ;incstack = 0
 11735                           ;endereco_cursor_lcd@endereco stored from wreg
 11736  002F08  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 11737                           
 11738                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 11739  002F0A  9483               	bcf	3971,2,c	;volatile
 11740                           
 11741                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 11742  002F0C  9283               	bcf	3971,1,c	;volatile
 11743                           
 11744                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 11745  002F0E  9083               	bcf	3971,0,c	;volatile
 11746                           
 11747                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 11748  002F10  8E83               	bsf	3971,7,c	;volatile
 11749                           
 11750                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 11751  002F12  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 11752  002F14  D002               	goto	l609
 11753  002F16  8883               	bsf	3971,4,c	;volatile
 11754  002F18  D001               	goto	l610
 11755  002F1A                     l609:
 11756                           
 11757                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 11758  002F1A  9883               	bcf	3971,4,c	;volatile
 11759  002F1C                     l610:
 11760                           
 11761                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 11762  002F1C  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 11763  002F1E  D002               	goto	l611
 11764  002F20  8A83               	bsf	3971,5,c	;volatile
 11765  002F22  D001               	goto	l612
 11766  002F24                     l611:
 11767                           
 11768                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 11769  002F24  9A83               	bcf	3971,5,c	;volatile
 11770  002F26                     l612:
 11771                           
 11772                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 11773  002F26  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 11774  002F28  D002               	goto	l613
 11775  002F2A  8C83               	bsf	3971,6,c	;volatile
 11776  002F2C  D001               	goto	l614
 11777  002F2E                     l613:
 11778                           
 11779                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 11780  002F2E  9C83               	bcf	3971,6,c	;volatile
 11781  002F30                     l614:
 11782                           
 11783                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 11784  002F30  8083               	bsf	3971,0,c	;volatile
 11785                           
 11786                           ;display_lcd.c: 236: delay();
 11787  002F32  EC71  F019         	call	_delay	;wreg free
 11788                           
 11789                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 11790  002F36  9083               	bcf	3971,0,c	;volatile
 11791                           
 11792                           ;display_lcd.c: 238: delay();
 11793  002F38  EC71  F019         	call	_delay	;wreg free
 11794                           
 11795                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 11796  002F3C  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 11797  002F3E  D002               	goto	l615
 11798  002F40  8883               	bsf	3971,4,c	;volatile
 11799  002F42  D001               	goto	l616
 11800  002F44                     l615:
 11801                           
 11802                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 11803  002F44  9883               	bcf	3971,4,c	;volatile
 11804  002F46                     l616:
 11805                           
 11806                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 11807  002F46  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 11808  002F48  D002               	goto	l617
 11809  002F4A  8A83               	bsf	3971,5,c	;volatile
 11810  002F4C  D001               	goto	l618
 11811  002F4E                     l617:
 11812                           
 11813                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 11814  002F4E  9A83               	bcf	3971,5,c	;volatile
 11815  002F50                     l618:
 11816                           
 11817                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 11818  002F50  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 11819  002F52  D002               	goto	l619
 11820  002F54  8C83               	bsf	3971,6,c	;volatile
 11821  002F56  D001               	goto	l620
 11822  002F58                     l619:
 11823                           
 11824                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 11825  002F58  9C83               	bcf	3971,6,c	;volatile
 11826  002F5A                     l620:
 11827                           
 11828                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 11829  002F5A  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 11830  002F5C  D002               	goto	l621
 11831  002F5E  8E83               	bsf	3971,7,c	;volatile
 11832  002F60  D001               	goto	l622
 11833  002F62                     l621:
 11834                           
 11835                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 11836  002F62  9E83               	bcf	3971,7,c	;volatile
 11837  002F64                     l622:
 11838                           
 11839                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 11840  002F64  8083               	bsf	3971,0,c	;volatile
 11841                           
 11842                           ;display_lcd.c: 252: delay();
 11843  002F66  EC71  F019         	call	_delay	;wreg free
 11844                           
 11845                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 11846  002F6A  9083               	bcf	3971,0,c	;volatile
 11847                           
 11848                           ;display_lcd.c: 254: delay();
 11849  002F6C  EC71  F019         	call	_delay	;wreg free
 11850  002F70  0012               	return		;funcret
 11851  002F72                     __end_of_endereco_cursor_lcd:
 11852                           	opt stack 0
 11853                           tosu	equ	0xFFF
 11854                           tosh	equ	0xFFE
 11855                           tosl	equ	0xFFD
 11856                           pclath	equ	0xFFA
 11857                           tblptru	equ	0xFF8
 11858                           tblptrh	equ	0xFF7
 11859                           tblptrl	equ	0xFF6
 11860                           tablat	equ	0xFF5
 11861                           prodh	equ	0xFF4
 11862                           prodl	equ	0xFF3
 11863                           intcon	equ	0xFF2
 11864                           intcon2	equ	0xFF1
 11865                           intcon3	equ	0xFF0
 11866                           postinc0	equ	0xFEE
 11867                           wreg	equ	0xFE8
 11868                           indf1	equ	0xFE7
 11869                           postinc1	equ	0xFE6
 11870                           postdec1	equ	0xFE5
 11871                           fsr1h	equ	0xFE2
 11872                           fsr1l	equ	0xFE1
 11873                           indf2	equ	0xFDF
 11874                           postinc2	equ	0xFDE
 11875                           postdec2	equ	0xFDD
 11876                           plusw2	equ	0xFDB
 11877                           fsr2h	equ	0xFDA
 11878                           fsr2l	equ	0xFD9
 11879                           status	equ	0xFD8
 11880                           
 11881 ;; *************** function _dummy_clocks *****************
 11882 ;; Defined at:
 11883 ;;		line 66 in file "bibliotecas/SDCard.c"
 11884 ;; Parameters:    Size  Location     Type
 11885 ;;  n               1    wreg     unsigned char 
 11886 ;; Auto vars:     Size  Location     Type
 11887 ;;  n               1   29[COMRAM] unsigned char 
 11888 ;;  i               2   30[COMRAM] unsigned int 
 11889 ;; Return value:  Size  Location     Type
 11890 ;;                  1    wreg      void 
 11891 ;; Registers used:
 11892 ;;		wreg, status,2, status,0, cstack
 11893 ;; Tracked objects:
 11894 ;;		On entry : 0/0
 11895 ;;		On exit  : 0/0
 11896 ;;		Unchanged: 0/0
 11897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11898 ;;      Params:         0       0       0       0       0       0       0       0       0
 11899 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11900 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11901 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11902 ;;Total ram usage:        5 bytes
 11903 ;; Hardware stack levels used:    1
 11904 ;; Hardware stack levels required when called:    3
 11905 ;; This function calls:
 11906 ;;		_escreve_dado_SPI
 11907 ;; This function is called by:
 11908 ;;		_reset
 11909 ;;		_disk_initialize
 11910 ;;		_disk_readp
 11911 ;;		_disk_writep
 11912 ;; This function uses a non-reentrant model
 11913 ;;
 11914                           
 11915                           	psect	text41
 11916  003194                     __ptext41:
 11917                           	opt stack 0
 11918  003194                     _dummy_clocks:
 11919                           	opt stack 22
 11920                           
 11921                           ;incstack = 0
 11922                           ;dummy_clocks@n stored from wreg
 11923  003194  6E1E               	movwf	dummy_clocks@n,c
 11924                           
 11925                           ;SDCard.c: 68: unsigned int i;
 11926                           ;SDCard.c: 69: _delay((unsigned long)((1)*(48000000/4000.0)));
 11927  003196  0E10               	movlw	16
 11928  003198  6E1C               	movwf	??_dummy_clocks& (0+255),c
 11929  00319A  0E94               	movlw	148
 11930  00319C                     u10937:
 11931  00319C  2EE8               	decfsz	wreg,f,c
 11932  00319E  D7FE               	bra	u10937
 11933  0031A0  2E1C               	decfsz	??_dummy_clocks& (0+255),f,c
 11934  0031A2  D7FC               	bra	u10937
 11935  0031A4  D000               	nop2	
 11936                           
 11937                           ;SDCard.c: 71: for(i=0;i<n;i++)
 11938  0031A6  0E00               	movlw	0
 11939  0031A8  6E20               	movwf	dummy_clocks@i+1,c
 11940  0031AA  0E00               	movlw	0
 11941  0031AC  6E1F               	movwf	dummy_clocks@i,c
 11942  0031AE  D007               	goto	l281
 11943  0031B0                     l282:
 11944                           
 11945                           ;SDCard.c: 72: {
 11946                           ;SDCard.c: 73: LATBbits.LATB4 = 1;
 11947  0031B0  888A               	bsf	3978,4,c	;volatile
 11948                           
 11949                           ;SDCard.c: 74: escreve_dado_SPI(0XFF);
 11950  0031B2  0EFF               	movlw	255
 11951  0031B4  EC64  F018         	call	_escreve_dado_SPI
 11952                           
 11953                           ;SDCard.c: 75: LATBbits.LATB4 = 0;
 11954  0031B8  988A               	bcf	3978,4,c	;volatile
 11955  0031BA  4A1F               	infsnz	dummy_clocks@i,f,c
 11956  0031BC  2A20               	incf	dummy_clocks@i+1,f,c
 11957  0031BE                     l281:
 11958  0031BE  501E               	movf	dummy_clocks@n,w,c
 11959  0031C0  6E1C               	movwf	??_dummy_clocks& (0+255),c
 11960  0031C2  6A1D               	clrf	(??_dummy_clocks+1)& (0+255),c
 11961  0031C4  501C               	movf	??_dummy_clocks,w,c
 11962  0031C6  5C1F               	subwf	dummy_clocks@i,w,c
 11963  0031C8  501D               	movf	??_dummy_clocks+1,w,c
 11964  0031CA  5820               	subwfb	dummy_clocks@i+1,w,c
 11965  0031CC  B0D8               	btfsc	status,0,c
 11966  0031CE  0012               	return	
 11967  0031D0  D7EF               	goto	l282
 11968  0031D2                     __end_of_dummy_clocks:
 11969                           	opt stack 0
 11970                           tosu	equ	0xFFF
 11971                           tosh	equ	0xFFE
 11972                           tosl	equ	0xFFD
 11973                           pclath	equ	0xFFA
 11974                           tblptru	equ	0xFF8
 11975                           tblptrh	equ	0xFF7
 11976                           tblptrl	equ	0xFF6
 11977                           tablat	equ	0xFF5
 11978                           prodh	equ	0xFF4
 11979                           prodl	equ	0xFF3
 11980                           intcon	equ	0xFF2
 11981                           intcon2	equ	0xFF1
 11982                           intcon3	equ	0xFF0
 11983                           postinc0	equ	0xFEE
 11984                           wreg	equ	0xFE8
 11985                           indf1	equ	0xFE7
 11986                           postinc1	equ	0xFE6
 11987                           postdec1	equ	0xFE5
 11988                           fsr1h	equ	0xFE2
 11989                           fsr1l	equ	0xFE1
 11990                           indf2	equ	0xFDF
 11991                           postinc2	equ	0xFDE
 11992                           postdec2	equ	0xFDD
 11993                           plusw2	equ	0xFDB
 11994                           fsr2h	equ	0xFDA
 11995                           fsr2l	equ	0xFD9
 11996                           status	equ	0xFD8
 11997                           
 11998 ;; *************** function _command *****************
 11999 ;; Defined at:
 12000 ;;		line 104 in file "bibliotecas/SDCard.c"
 12001 ;; Parameters:    Size  Location     Type
 12002 ;;  CMD             1    wreg     unsigned char 
 12003 ;;  arg             4   27[COMRAM] unsigned long 
 12004 ;;  CRC             1   31[COMRAM] unsigned char 
 12005 ;; Auto vars:     Size  Location     Type
 12006 ;;  CMD             1   32[COMRAM] unsigned char 
 12007 ;;  argument        1   33[COMRAM] unsigned char 
 12008 ;; Return value:  Size  Location     Type
 12009 ;;                  1    wreg      void 
 12010 ;; Registers used:
 12011 ;;		wreg, status,2, status,0, cstack
 12012 ;; Tracked objects:
 12013 ;;		On entry : 0/0
 12014 ;;		On exit  : 0/0
 12015 ;;		Unchanged: 0/0
 12016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12017 ;;      Params:         5       0       0       0       0       0       0       0       0
 12018 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12019 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12020 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12021 ;;Total ram usage:        7 bytes
 12022 ;; Hardware stack levels used:    1
 12023 ;; Hardware stack levels required when called:    3
 12024 ;; This function calls:
 12025 ;;		_escreve_dado_SPI
 12026 ;; This function is called by:
 12027 ;;		_reset
 12028 ;;		_disk_initialize
 12029 ;;		_disk_readp
 12030 ;;		_disk_writep
 12031 ;; This function uses a non-reentrant model
 12032 ;;
 12033                           
 12034                           	psect	text42
 12035  0031D2                     __ptext42:
 12036                           	opt stack 0
 12037  0031D2                     _command:
 12038                           	opt stack 22
 12039                           
 12040                           ;incstack = 0
 12041                           ;command@CMD stored from wreg
 12042  0031D2  6E21               	movwf	command@CMD,c
 12043                           
 12044                           ;SDCard.c: 106: unsigned char argument;
 12045                           ;SDCard.c: 107: escreve_dado_SPI(0xFF);
 12046  0031D4  0EFF               	movlw	255
 12047  0031D6  EC64  F018         	call	_escreve_dado_SPI
 12048                           
 12049                           ;SDCard.c: 108: escreve_dado_SPI(CMD);
 12050  0031DA  5021               	movf	command@CMD,w,c
 12051  0031DC  EC64  F018         	call	_escreve_dado_SPI
 12052                           
 12053                           ;SDCard.c: 109: argument = arg>>24;
 12054  0031E0  C01F  F022         	movff	command@arg+3,command@argument
 12055                           
 12056                           ;SDCard.c: 110: escreve_dado_SPI(argument);
 12057  0031E4  5022               	movf	command@argument,w,c
 12058  0031E6  EC64  F018         	call	_escreve_dado_SPI
 12059                           
 12060                           ;SDCard.c: 111: argument = arg>>16;
 12061  0031EA  C01E  F022         	movff	command@arg+2,command@argument
 12062                           
 12063                           ;SDCard.c: 112: escreve_dado_SPI(argument);
 12064  0031EE  5022               	movf	command@argument,w,c
 12065  0031F0  EC64  F018         	call	_escreve_dado_SPI
 12066                           
 12067                           ;SDCard.c: 113: argument = arg>>8;
 12068  0031F4  C01D  F022         	movff	command@arg+1,command@argument
 12069                           
 12070                           ;SDCard.c: 114: escreve_dado_SPI(argument);
 12071  0031F8  5022               	movf	command@argument,w,c
 12072  0031FA  EC64  F018         	call	_escreve_dado_SPI
 12073                           
 12074                           ;SDCard.c: 115: argument = arg;
 12075  0031FE  C01C  F022         	movff	command@arg,command@argument
 12076                           
 12077                           ;SDCard.c: 116: escreve_dado_SPI(argument);
 12078  003202  5022               	movf	command@argument,w,c
 12079  003204  EC64  F018         	call	_escreve_dado_SPI
 12080                           
 12081                           ;SDCard.c: 117: escreve_dado_SPI(CRC);
 12082  003208  5020               	movf	command@CRC,w,c
 12083  00320A  EC64  F018         	call	_escreve_dado_SPI
 12084  00320E  0012               	return		;funcret
 12085  003210                     __end_of_command:
 12086                           	opt stack 0
 12087                           tosu	equ	0xFFF
 12088                           tosh	equ	0xFFE
 12089                           tosl	equ	0xFFD
 12090                           pclath	equ	0xFFA
 12091                           tblptru	equ	0xFF8
 12092                           tblptrh	equ	0xFF7
 12093                           tblptrl	equ	0xFF6
 12094                           tablat	equ	0xFF5
 12095                           prodh	equ	0xFF4
 12096                           prodl	equ	0xFF3
 12097                           intcon	equ	0xFF2
 12098                           intcon2	equ	0xFF1
 12099                           intcon3	equ	0xFF0
 12100                           postinc0	equ	0xFEE
 12101                           wreg	equ	0xFE8
 12102                           indf1	equ	0xFE7
 12103                           postinc1	equ	0xFE6
 12104                           postdec1	equ	0xFE5
 12105                           fsr1h	equ	0xFE2
 12106                           fsr1l	equ	0xFE1
 12107                           indf2	equ	0xFDF
 12108                           postinc2	equ	0xFDE
 12109                           postdec2	equ	0xFDD
 12110                           plusw2	equ	0xFDB
 12111                           fsr2h	equ	0xFDA
 12112                           fsr2l	equ	0xFD9
 12113                           status	equ	0xFD8
 12114                           
 12115 ;; *************** function _escreve_dado_SPI *****************
 12116 ;; Defined at:
 12117 ;;		line 67 in file "bibliotecas/SHRC.c"
 12118 ;; Parameters:    Size  Location     Type
 12119 ;;  data_to_shrc    1    wreg     unsigned char 
 12120 ;; Auto vars:     Size  Location     Type
 12121 ;;  data_to_shrc    1   26[COMRAM] unsigned char 
 12122 ;;  contador        1   25[COMRAM] unsigned char 
 12123 ;; Return value:  Size  Location     Type
 12124 ;;                  1    wreg      void 
 12125 ;; Registers used:
 12126 ;;		wreg, status,2, status,0
 12127 ;; Tracked objects:
 12128 ;;		On entry : 0/0
 12129 ;;		On exit  : 0/0
 12130 ;;		Unchanged: 0/0
 12131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12132 ;;      Params:         0       0       0       0       0       0       0       0       0
 12133 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12134 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12135 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12136 ;;Total ram usage:        2 bytes
 12137 ;; Hardware stack levels used:    1
 12138 ;; Hardware stack levels required when called:    2
 12139 ;; This function calls:
 12140 ;;		Nothing
 12141 ;; This function is called by:
 12142 ;;		_dummy_clocks
 12143 ;;		_proceed
 12144 ;;		_command
 12145 ;;		_disk_writep
 12146 ;; This function uses a non-reentrant model
 12147 ;;
 12148                           
 12149                           	psect	text43
 12150  0030C8                     __ptext43:
 12151                           	opt stack 0
 12152  0030C8                     _escreve_dado_SPI:
 12153                           	opt stack 25
 12154                           
 12155                           ;incstack = 0
 12156                           ;escreve_dado_SPI@data_to_shrc stored from wreg
 12157  0030C8  6E1B               	movwf	escreve_dado_SPI@data_to_shrc,c
 12158                           
 12159                           ;SHRC.c: 69: LATBbits.LATB7 = 0;
 12160  0030CA  9E8A               	bcf	3978,7,c	;volatile
 12161                           
 12162                           ;SHRC.c: 70: unsigned char contador=0;
 12163  0030CC  0E00               	movlw	0
 12164  0030CE  6E1A               	movwf	escreve_dado_SPI@contador,c
 12165                           
 12166                           ;SHRC.c: 71: (INTCONbits.GIE = 0);
 12167  0030D0  9EF2               	bcf	intcon,7,c	;volatile
 12168                           
 12169                           ;SHRC.c: 73: while(contador<=7)
 12170  0030D2  D018               	goto	l340
 12171  0030D4                     
 12172                           ;SHRC.c: 74: {
 12173                           ;SHRC.c: 75: if((data_to_shrc & 0x80) == 0)
 12174  0030D4  BE1B               	btfsc	escreve_dado_SPI@data_to_shrc,7,c
 12175  0030D6  D002               	goto	l342
 12176                           
 12177                           ;SHRC.c: 76: {
 12178                           ;SHRC.c: 77: LATBbits.LATB7 = 0;
 12179  0030D8  9E8A               	bcf	3978,7,c	;volatile
 12180                           
 12181                           ;SHRC.c: 78: }
 12182  0030DA  D001               	goto	l343
 12183  0030DC                     l342:
 12184                           
 12185                           ;SHRC.c: 79: else
 12186                           ;SHRC.c: 80: {
 12187                           ;SHRC.c: 81: LATBbits.LATB7 = 1;
 12188  0030DC  8E8A               	bsf	3978,7,c	;volatile
 12189  0030DE                     l343:
 12190                           
 12191                           ;SHRC.c: 82: }
 12192                           ;SHRC.c: 83: data_to_shrc = data_to_shrc << 1;
 12193  0030DE  501B               	movf	escreve_dado_SPI@data_to_shrc,w,c
 12194  0030E0  241B               	addwf	escreve_dado_SPI@data_to_shrc,w,c
 12195  0030E2  6E1B               	movwf	escreve_dado_SPI@data_to_shrc,c
 12196                           
 12197                           ;SHRC.c: 84: _delay((unsigned long)((30)*(48000000/4000000.0)));
 12198  0030E4  0E78               	movlw	120
 12199  0030E6                     u10947:
 12200  0030E6  2EE8               	decfsz	wreg,f,c
 12201  0030E8  D7FE               	bra	u10947
 12202                           
 12203                           ;SHRC.c: 85: LATBbits.LATB6 = 1;
 12204  0030EA  8C8A               	bsf	3978,6,c	;volatile
 12205                           
 12206                           ;SHRC.c: 86: _delay((unsigned long)((30)*(48000000/4000000.0)));
 12207  0030EC  0E78               	movlw	120
 12208  0030EE                     u10957:
 12209  0030EE  2EE8               	decfsz	wreg,f,c
 12210  0030F0  D7FE               	bra	u10957
 12211                           
 12212                           ;SHRC.c: 87: LATBbits.LATB7 = 0;
 12213  0030F2  9E8A               	bcf	3978,7,c	;volatile
 12214                           
 12215                           ;SHRC.c: 88: _delay((unsigned long)((30)*(48000000/4000000.0)));
 12216  0030F4  0E78               	movlw	120
 12217  0030F6                     u10967:
 12218  0030F6  2EE8               	decfsz	wreg,f,c
 12219  0030F8  D7FE               	bra	u10967
 12220                           
 12221                           ;SHRC.c: 89: LATBbits.LATB6 = 0;
 12222  0030FA  9C8A               	bcf	3978,6,c	;volatile
 12223                           
 12224                           ;SHRC.c: 90: _delay((unsigned long)((30)*(48000000/4000000.0)));
 12225  0030FC  0E78               	movlw	120
 12226  0030FE                     u10977:
 12227  0030FE  2EE8               	decfsz	wreg,f,c
 12228  003100  D7FE               	bra	u10977
 12229                           
 12230                           ;SHRC.c: 91: contador++;
 12231  003102  2A1A               	incf	escreve_dado_SPI@contador,f,c
 12232  003104                     l340:
 12233  003104  0E07               	movlw	7
 12234  003106  641A               	cpfsgt	escreve_dado_SPI@contador,c
 12235  003108  D7E5               	goto	l341
 12236                           
 12237                           ;SHRC.c: 92: }
 12238                           ;SHRC.c: 93: (INTCONbits.GIE = 1);
 12239  00310A  8EF2               	bsf	intcon,7,c	;volatile
 12240  00310C  0012               	return		;funcret
 12241  00310E                     __end_of_escreve_dado_SPI:
 12242                           	opt stack 0
 12243                           tosu	equ	0xFFF
 12244                           tosh	equ	0xFFE
 12245                           tosl	equ	0xFFD
 12246                           pclath	equ	0xFFA
 12247                           tblptru	equ	0xFF8
 12248                           tblptrh	equ	0xFF7
 12249                           tblptrl	equ	0xFF6
 12250                           tablat	equ	0xFF5
 12251                           prodh	equ	0xFF4
 12252                           prodl	equ	0xFF3
 12253                           intcon	equ	0xFF2
 12254                           intcon2	equ	0xFF1
 12255                           intcon3	equ	0xFF0
 12256                           postinc0	equ	0xFEE
 12257                           wreg	equ	0xFE8
 12258                           indf1	equ	0xFE7
 12259                           postinc1	equ	0xFE6
 12260                           postdec1	equ	0xFE5
 12261                           fsr1h	equ	0xFE2
 12262                           fsr1l	equ	0xFE1
 12263                           indf2	equ	0xFDF
 12264                           postinc2	equ	0xFDE
 12265                           postdec2	equ	0xFDD
 12266                           plusw2	equ	0xFDB
 12267                           fsr2h	equ	0xFDA
 12268                           fsr2l	equ	0xFD9
 12269                           status	equ	0xFD8
 12270                           
 12271 ;; *************** function ___lmul *****************
 12272 ;; Defined at:
 12273 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 12274 ;; Parameters:    Size  Location     Type
 12275 ;;  multiplier      4   25[COMRAM] unsigned long 
 12276 ;;  multiplicand    4   29[COMRAM] unsigned long 
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;  product         4   33[COMRAM] unsigned long 
 12279 ;; Return value:  Size  Location     Type
 12280 ;;                  4   25[COMRAM] unsigned long 
 12281 ;; Registers used:
 12282 ;;		wreg, status,2, status,0
 12283 ;; Tracked objects:
 12284 ;;		On entry : 0/0
 12285 ;;		On exit  : 0/0
 12286 ;;		Unchanged: 0/0
 12287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12288 ;;      Params:         8       0       0       0       0       0       0       0       0
 12289 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12290 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12291 ;;      Totals:        12       0       0       0       0       0       0       0       0
 12292 ;;Total ram usage:       12 bytes
 12293 ;; Hardware stack levels used:    1
 12294 ;; Hardware stack levels required when called:    2
 12295 ;; This function calls:
 12296 ;;		Nothing
 12297 ;; This function is called by:
 12298 ;;		_clust2sect
 12299 ;;		_pf_mount
 12300 ;;		_atol
 12301 ;;		_strtod
 12302 ;; This function uses a non-reentrant model
 12303 ;;
 12304                           
 12305                           	psect	text44
 12306  002FCE                     __ptext44:
 12307                           	opt stack 0
 12308  002FCE                     ___lmul:
 12309                           	opt stack 24
 12310                           
 12311                           ;incstack = 0
 12312  002FCE  0E00               	movlw	0
 12313  002FD0  6E22               	movwf	___lmul@product,c
 12314  002FD2  0E00               	movlw	0
 12315  002FD4  6E23               	movwf	___lmul@product+1,c
 12316  002FD6  0E00               	movlw	0
 12317  002FD8  6E24               	movwf	___lmul@product+2,c
 12318  002FDA  0E00               	movlw	0
 12319  002FDC  6E25               	movwf	___lmul@product+3,c
 12320  002FDE  A01A               	btfss	___lmul@multiplier,0,c
 12321  002FE0  D008               	goto	l1224
 12322  002FE2  501E               	movf	___lmul@multiplicand,w,c
 12323  002FE4  2622               	addwf	___lmul@product,f,c
 12324  002FE6  501F               	movf	___lmul@multiplicand+1,w,c
 12325  002FE8  2223               	addwfc	___lmul@product+1,f,c
 12326  002FEA  5020               	movf	___lmul@multiplicand+2,w,c
 12327  002FEC  2224               	addwfc	___lmul@product+2,f,c
 12328  002FEE  5021               	movf	___lmul@multiplicand+3,w,c
 12329  002FF0  2225               	addwfc	___lmul@product+3,f,c
 12330  002FF2                     l1224:
 12331  002FF2  90D8               	bcf	status,0,c
 12332  002FF4  361E               	rlcf	___lmul@multiplicand,f,c
 12333  002FF6  361F               	rlcf	___lmul@multiplicand+1,f,c
 12334  002FF8  3620               	rlcf	___lmul@multiplicand+2,f,c
 12335  002FFA  3621               	rlcf	___lmul@multiplicand+3,f,c
 12336  002FFC  90D8               	bcf	status,0,c
 12337  002FFE  321D               	rrcf	___lmul@multiplier+3,f,c
 12338  003000  321C               	rrcf	___lmul@multiplier+2,f,c
 12339  003002  321B               	rrcf	___lmul@multiplier+1,f,c
 12340  003004  321A               	rrcf	___lmul@multiplier,f,c
 12341  003006  501A               	movf	___lmul@multiplier,w,c
 12342  003008  101B               	iorwf	___lmul@multiplier+1,w,c
 12343  00300A  101C               	iorwf	___lmul@multiplier+2,w,c
 12344  00300C  101D               	iorwf	___lmul@multiplier+3,w,c
 12345  00300E  A4D8               	btfss	status,2,c
 12346  003010  D7E6               	goto	l1223
 12347  003012  C022  F01A         	movff	___lmul@product,?___lmul
 12348  003016  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 12349  00301A  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 12350  00301E  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 12351  003022  0012               	return		;funcret
 12352  003024                     __end_of___lmul:
 12353                           	opt stack 0
 12354                           tosu	equ	0xFFF
 12355                           tosh	equ	0xFFE
 12356                           tosl	equ	0xFFD
 12357                           pclath	equ	0xFFA
 12358                           tblptru	equ	0xFF8
 12359                           tblptrh	equ	0xFF7
 12360                           tblptrl	equ	0xFF6
 12361                           tablat	equ	0xFF5
 12362                           prodh	equ	0xFF4
 12363                           prodl	equ	0xFF3
 12364                           intcon	equ	0xFF2
 12365                           intcon2	equ	0xFF1
 12366                           intcon3	equ	0xFF0
 12367                           postinc0	equ	0xFEE
 12368                           wreg	equ	0xFE8
 12369                           indf1	equ	0xFE7
 12370                           postinc1	equ	0xFE6
 12371                           postdec1	equ	0xFE5
 12372                           fsr1h	equ	0xFE2
 12373                           fsr1l	equ	0xFE1
 12374                           indf2	equ	0xFDF
 12375                           postinc2	equ	0xFDE
 12376                           postdec2	equ	0xFDD
 12377                           plusw2	equ	0xFDB
 12378                           fsr2h	equ	0xFDA
 12379                           fsr2l	equ	0xFD9
 12380                           status	equ	0xFD8
 12381                           
 12382 ;; *************** function ___lldiv *****************
 12383 ;; Defined at:
 12384 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 12385 ;; Parameters:    Size  Location     Type
 12386 ;;  dividend        4   25[COMRAM] unsigned long 
 12387 ;;  divisor         4   29[COMRAM] unsigned long 
 12388 ;; Auto vars:     Size  Location     Type
 12389 ;;  quotient        4   33[COMRAM] unsigned long 
 12390 ;;  counter         1   37[COMRAM] unsigned char 
 12391 ;; Return value:  Size  Location     Type
 12392 ;;                  4   25[COMRAM] unsigned long 
 12393 ;; Registers used:
 12394 ;;		wreg, status,2, status,0
 12395 ;; Tracked objects:
 12396 ;;		On entry : 0/0
 12397 ;;		On exit  : 0/0
 12398 ;;		Unchanged: 0/0
 12399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12400 ;;      Params:         8       0       0       0       0       0       0       0       0
 12401 ;;      Locals:         5       0       0       0       0       0       0       0       0
 12402 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12403 ;;      Totals:        13       0       0       0       0       0       0       0       0
 12404 ;;Total ram usage:       13 bytes
 12405 ;; Hardware stack levels used:    1
 12406 ;; Hardware stack levels required when called:    2
 12407 ;; This function calls:
 12408 ;;		Nothing
 12409 ;; This function is called by:
 12410 ;;		_pf_mount
 12411 ;;		_convert_time_to_utc
 12412 ;;		_pf_lseek
 12413 ;; This function uses a non-reentrant model
 12414 ;;
 12415                           
 12416                           	psect	text45
 12417  002BCE                     __ptext45:
 12418                           	opt stack 0
 12419  002BCE                     ___lldiv:
 12420                           	opt stack 25
 12421                           
 12422                           ;incstack = 0
 12423  002BCE  0E00               	movlw	0
 12424  002BD0  6E22               	movwf	___lldiv@quotient,c
 12425  002BD2  0E00               	movlw	0
 12426  002BD4  6E23               	movwf	___lldiv@quotient+1,c
 12427  002BD6  0E00               	movlw	0
 12428  002BD8  6E24               	movwf	___lldiv@quotient+2,c
 12429  002BDA  0E00               	movlw	0
 12430  002BDC  6E25               	movwf	___lldiv@quotient+3,c
 12431  002BDE  501E               	movf	___lldiv@divisor,w,c
 12432  002BE0  101F               	iorwf	___lldiv@divisor+1,w,c
 12433  002BE2  1020               	iorwf	___lldiv@divisor+2,w,c
 12434  002BE4  1021               	iorwf	___lldiv@divisor+3,w,c
 12435  002BE6  B4D8               	btfsc	status,2,c
 12436  002BE8  D02A               	goto	l1670
 12437  002BEA  0E01               	movlw	1
 12438  002BEC  6E26               	movwf	___lldiv@counter,c
 12439  002BEE  D006               	goto	l1665
 12440  002BF0  90D8               	bcf	status,0,c
 12441  002BF2  361E               	rlcf	___lldiv@divisor,f,c
 12442  002BF4  361F               	rlcf	___lldiv@divisor+1,f,c
 12443  002BF6  3620               	rlcf	___lldiv@divisor+2,f,c
 12444  002BF8  3621               	rlcf	___lldiv@divisor+3,f,c
 12445  002BFA  2A26               	incf	___lldiv@counter,f,c
 12446  002BFC                     l1665:
 12447  002BFC  AE21               	btfss	___lldiv@divisor+3,7,c
 12448  002BFE  D7F8               	goto	l1666
 12449  002C00                     u5050:
 12450  002C00  90D8               	bcf	status,0,c
 12451  002C02  3622               	rlcf	___lldiv@quotient,f,c
 12452  002C04  3623               	rlcf	___lldiv@quotient+1,f,c
 12453  002C06  3624               	rlcf	___lldiv@quotient+2,f,c
 12454  002C08  3625               	rlcf	___lldiv@quotient+3,f,c
 12455  002C0A  501E               	movf	___lldiv@divisor,w,c
 12456  002C0C  5C1A               	subwf	___lldiv@dividend,w,c
 12457  002C0E  501F               	movf	___lldiv@divisor+1,w,c
 12458  002C10  581B               	subwfb	___lldiv@dividend+1,w,c
 12459  002C12  5020               	movf	___lldiv@divisor+2,w,c
 12460  002C14  581C               	subwfb	___lldiv@dividend+2,w,c
 12461  002C16  5021               	movf	___lldiv@divisor+3,w,c
 12462  002C18  581D               	subwfb	___lldiv@dividend+3,w,c
 12463  002C1A  A0D8               	btfss	status,0,c
 12464  002C1C  D009               	goto	l1669
 12465  002C1E  501E               	movf	___lldiv@divisor,w,c
 12466  002C20  5E1A               	subwf	___lldiv@dividend,f,c
 12467  002C22  501F               	movf	___lldiv@divisor+1,w,c
 12468  002C24  5A1B               	subwfb	___lldiv@dividend+1,f,c
 12469  002C26  5020               	movf	___lldiv@divisor+2,w,c
 12470  002C28  5A1C               	subwfb	___lldiv@dividend+2,f,c
 12471  002C2A  5021               	movf	___lldiv@divisor+3,w,c
 12472  002C2C  5A1D               	subwfb	___lldiv@dividend+3,f,c
 12473  002C2E  8022               	bsf	___lldiv@quotient,0,c
 12474  002C30                     l1669:
 12475  002C30  90D8               	bcf	status,0,c
 12476  002C32  3221               	rrcf	___lldiv@divisor+3,f,c
 12477  002C34  3220               	rrcf	___lldiv@divisor+2,f,c
 12478  002C36  321F               	rrcf	___lldiv@divisor+1,f,c
 12479  002C38  321E               	rrcf	___lldiv@divisor,f,c
 12480  002C3A  2E26               	decfsz	___lldiv@counter,f,c
 12481  002C3C  D7E1               	goto	u5050
 12482  002C3E                     l1670:
 12483  002C3E  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 12484  002C42  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 12485  002C46  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 12486  002C4A  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 12487  002C4E  0012               	return		;funcret
 12488  002C50                     __end_of___lldiv:
 12489                           	opt stack 0
 12490                           tosu	equ	0xFFF
 12491                           tosh	equ	0xFFE
 12492                           tosl	equ	0xFFD
 12493                           pclath	equ	0xFFA
 12494                           tblptru	equ	0xFF8
 12495                           tblptrh	equ	0xFF7
 12496                           tblptrl	equ	0xFF6
 12497                           tablat	equ	0xFF5
 12498                           prodh	equ	0xFF4
 12499                           prodl	equ	0xFF3
 12500                           intcon	equ	0xFF2
 12501                           intcon2	equ	0xFF1
 12502                           intcon3	equ	0xFF0
 12503                           postinc0	equ	0xFEE
 12504                           wreg	equ	0xFE8
 12505                           indf1	equ	0xFE7
 12506                           postinc1	equ	0xFE6
 12507                           postdec1	equ	0xFE5
 12508                           fsr1h	equ	0xFE2
 12509                           fsr1l	equ	0xFE1
 12510                           indf2	equ	0xFDF
 12511                           postinc2	equ	0xFDE
 12512                           postdec2	equ	0xFDD
 12513                           plusw2	equ	0xFDB
 12514                           fsr2h	equ	0xFDA
 12515                           fsr2l	equ	0xFD9
 12516                           status	equ	0xFD8
 12517                           
 12518 ;; *************** function _escreve_inteiro_lcd *****************
 12519 ;; Defined at:
 12520 ;;		line 376 in file "bibliotecas/display_lcd.c"
 12521 ;; Parameters:    Size  Location     Type
 12522 ;;  valor           2    6[BANK0 ] int 
 12523 ;; Auto vars:     Size  Location     Type
 12524 ;;  texto           7    8[BANK0 ] unsigned char [7]
 12525 ;; Return value:  Size  Location     Type
 12526 ;;                  1    wreg      void 
 12527 ;; Registers used:
 12528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12529 ;; Tracked objects:
 12530 ;;		On entry : 0/0
 12531 ;;		On exit  : 0/0
 12532 ;;		Unchanged: 0/0
 12533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12534 ;;      Params:         0       2       0       0       0       0       0       0       0
 12535 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12536 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12537 ;;      Totals:         0       9       0       0       0       0       0       0       0
 12538 ;;Total ram usage:        9 bytes
 12539 ;; Hardware stack levels used:    1
 12540 ;; Hardware stack levels required when called:    5
 12541 ;; This function calls:
 12542 ;;		_escreve_frase_ram_lcd
 12543 ;;		_itoa
 12544 ;; This function is called by:
 12545 ;;		_SDCard
 12546 ;;		_ReadSPI_
 12547 ;;		_escreve_float_lcd
 12548 ;; This function uses a non-reentrant model
 12549 ;;
 12550                           
 12551                           	psect	text46
 12552  003210                     __ptext46:
 12553                           	opt stack 0
 12554  003210                     _escreve_inteiro_lcd:
 12555                           	opt stack 23
 12556                           
 12557                           ;display_lcd.c: 378: char texto[7] = "000000";
 12558                           
 12559                           ;incstack = 0
 12560  003210  EE21  F0E5         	lfsr	2,escreve_inteiro_lcd@F3966
 12561  003214  EE10  F068         	lfsr	1,escreve_inteiro_lcd@texto
 12562  003218  0E06               	movlw	6
 12563  00321A                     u9181:
 12564  00321A  CFDB FFE3          	movff	plusw2,plusw1
 12565  00321E  06E8               	decf	wreg,f,c
 12566  003220  E2FC               	bc	u9181
 12567                           
 12568                           ;display_lcd.c: 379: itoa(texto,valor, 10);
 12569  003222  0E68               	movlw	low escreve_inteiro_lcd@texto
 12570  003224  0100               	movlb	0	; () banked
 12571  003226  6F60               	movwf	itoa@buf& (0+255),b
 12572  003228  0E00               	movlw	high escreve_inteiro_lcd@texto
 12573  00322A  6F61               	movwf	(itoa@buf+1)& (0+255),b
 12574  00322C  C066  F062         	movff	escreve_inteiro_lcd@valor,itoa@val
 12575  003230  C067  F063         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
 12576  003234  0E00               	movlw	0
 12577  003236  6F65               	movwf	(itoa@base+1)& (0+255),b
 12578  003238  0E0A               	movlw	10
 12579  00323A  6F64               	movwf	itoa@base& (0+255),b
 12580  00323C  EC87  F018         	call	_itoa	;wreg free
 12581                           
 12582                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
 12583  003240  0E68               	movlw	low escreve_inteiro_lcd@texto
 12584  003242  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 12585  003244  0E00               	movlw	high escreve_inteiro_lcd@texto
 12586  003246  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 12587  003248  EC3B  F018         	call	_escreve_frase_ram_lcd	;wreg free
 12588  00324C  0012               	return		;funcret
 12589  00324E                     __end_of_escreve_inteiro_lcd:
 12590                           	opt stack 0
 12591                           tosu	equ	0xFFF
 12592                           tosh	equ	0xFFE
 12593                           tosl	equ	0xFFD
 12594                           pclath	equ	0xFFA
 12595                           tblptru	equ	0xFF8
 12596                           tblptrh	equ	0xFF7
 12597                           tblptrl	equ	0xFF6
 12598                           tablat	equ	0xFF5
 12599                           prodh	equ	0xFF4
 12600                           prodl	equ	0xFF3
 12601                           intcon	equ	0xFF2
 12602                           intcon2	equ	0xFF1
 12603                           intcon3	equ	0xFF0
 12604                           postinc0	equ	0xFEE
 12605                           wreg	equ	0xFE8
 12606                           indf1	equ	0xFE7
 12607                           postinc1	equ	0xFE6
 12608                           postdec1	equ	0xFE5
 12609                           plusw1	equ	0xFE3
 12610                           fsr1h	equ	0xFE2
 12611                           fsr1l	equ	0xFE1
 12612                           indf2	equ	0xFDF
 12613                           postinc2	equ	0xFDE
 12614                           postdec2	equ	0xFDD
 12615                           plusw2	equ	0xFDB
 12616                           fsr2h	equ	0xFDA
 12617                           fsr2l	equ	0xFD9
 12618                           status	equ	0xFD8
 12619                           
 12620 ;; *************** function _itoa *****************
 12621 ;; Defined at:
 12622 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 12623 ;; Parameters:    Size  Location     Type
 12624 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 12625 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 12626 ;;  val             2    2[BANK0 ] int 
 12627 ;;  base            2    4[BANK0 ] int 
 12628 ;; Auto vars:     Size  Location     Type
 12629 ;;  cp              2   41[COMRAM] PTR unsigned char 
 12630 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 12631 ;; Return value:  Size  Location     Type
 12632 ;;                  2    0[BANK0 ] PTR unsigned char 
 12633 ;; Registers used:
 12634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12635 ;; Tracked objects:
 12636 ;;		On entry : 0/0
 12637 ;;		On exit  : 0/0
 12638 ;;		Unchanged: 0/0
 12639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12640 ;;      Params:         0       6       0       0       0       0       0       0       0
 12641 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12642 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12643 ;;      Totals:         2       6       0       0       0       0       0       0       0
 12644 ;;Total ram usage:        8 bytes
 12645 ;; Hardware stack levels used:    1
 12646 ;; Hardware stack levels required when called:    4
 12647 ;; This function calls:
 12648 ;;		_utoa
 12649 ;; This function is called by:
 12650 ;;		_escreve_inteiro_lcd
 12651 ;;		_escreve_inteiro_uart
 12652 ;; This function uses a non-reentrant model
 12653 ;;
 12654                           
 12655                           	psect	text47
 12656  00310E                     __ptext47:
 12657                           	opt stack 0
 12658  00310E                     _itoa:
 12659                           	opt stack 23
 12660                           
 12661                           ;incstack = 0
 12662  00310E  C060  F02A         	movff	itoa@buf,itoa@cp
 12663  003112  C061  F02B         	movff	itoa@buf+1,itoa@cp+1
 12664  003116  0100               	movlb	0	; () banked
 12665  003118  AF63               	btfss	(itoa@val+1)& (0+255),7,b
 12666  00311A  D00C               	goto	l1631
 12667                           
 12668                           ; BSR set to: 0
 12669  00311C  C060  FFD9         	movff	itoa@buf,fsr2l
 12670  003120  C061  FFDA         	movff	itoa@buf+1,fsr2h
 12671  003124  0E2D               	movlw	45
 12672  003126  6EDF               	movwf	indf2,c
 12673                           
 12674                           ; BSR set to: 0
 12675  003128  4B60               	infsnz	itoa@buf& (0+255),f,b
 12676  00312A  2B61               	incf	(itoa@buf+1)& (0+255),f,b
 12677                           
 12678                           ; BSR set to: 0
 12679  00312C  6D62               	negf	itoa@val& (0+255),b
 12680  00312E  1F63               	comf	(itoa@val+1)& (0+255),f,b
 12681  003130  B0D8               	btfsc	status,0,c
 12682  003132  2B63               	incf	(itoa@val+1)& (0+255),f,b
 12683  003134                     l1631:
 12684                           
 12685                           ; BSR set to: 0
 12686                           
 12687                           ; BSR set to: 0
 12688  003134  C060  F021         	movff	itoa@buf,utoa@buf
 12689  003138  C061  F022         	movff	itoa@buf+1,utoa@buf+1
 12690  00313C  C062  F023         	movff	itoa@val,utoa@val
 12691  003140  C063  F024         	movff	itoa@val+1,utoa@val+1
 12692  003144  C064  F025         	movff	itoa@base,utoa@base
 12693  003148  C065  F026         	movff	itoa@base+1,utoa@base+1
 12694  00314C  EC00  F015         	call	_utoa	;wreg free
 12695  003150  0012               	return	
 12696  003152                     __end_of_itoa:
 12697                           	opt stack 0
 12698                           tosu	equ	0xFFF
 12699                           tosh	equ	0xFFE
 12700                           tosl	equ	0xFFD
 12701                           pclath	equ	0xFFA
 12702                           tblptru	equ	0xFF8
 12703                           tblptrh	equ	0xFF7
 12704                           tblptrl	equ	0xFF6
 12705                           tablat	equ	0xFF5
 12706                           prodh	equ	0xFF4
 12707                           prodl	equ	0xFF3
 12708                           intcon	equ	0xFF2
 12709                           intcon2	equ	0xFF1
 12710                           intcon3	equ	0xFF0
 12711                           postinc0	equ	0xFEE
 12712                           wreg	equ	0xFE8
 12713                           indf1	equ	0xFE7
 12714                           postinc1	equ	0xFE6
 12715                           postdec1	equ	0xFE5
 12716                           plusw1	equ	0xFE3
 12717                           fsr1h	equ	0xFE2
 12718                           fsr1l	equ	0xFE1
 12719                           indf2	equ	0xFDF
 12720                           postinc2	equ	0xFDE
 12721                           postdec2	equ	0xFDD
 12722                           plusw2	equ	0xFDB
 12723                           fsr2h	equ	0xFDA
 12724                           fsr2l	equ	0xFD9
 12725                           status	equ	0xFD8
 12726                           
 12727 ;; *************** function _utoa *****************
 12728 ;; Defined at:
 12729 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 12730 ;; Parameters:    Size  Location     Type
 12731 ;;  buf             2   32[COMRAM] PTR unsigned char 
 12732 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 12733 ;;  val             2   34[COMRAM] unsigned int 
 12734 ;;  base            2   36[COMRAM] int 
 12735 ;; Auto vars:     Size  Location     Type
 12736 ;;  v               2   38[COMRAM] unsigned int 
 12737 ;;  c               1   40[COMRAM] unsigned char 
 12738 ;; Return value:  Size  Location     Type
 12739 ;;                  2   32[COMRAM] PTR unsigned char 
 12740 ;; Registers used:
 12741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12742 ;; Tracked objects:
 12743 ;;		On entry : 0/0
 12744 ;;		On exit  : 0/0
 12745 ;;		Unchanged: 0/0
 12746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12747 ;;      Params:         6       0       0       0       0       0       0       0       0
 12748 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12749 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12750 ;;      Totals:         9       0       0       0       0       0       0       0       0
 12751 ;;Total ram usage:        9 bytes
 12752 ;; Hardware stack levels used:    1
 12753 ;; Hardware stack levels required when called:    3
 12754 ;; This function calls:
 12755 ;;		___lwdiv
 12756 ;;		___lwmod
 12757 ;; This function is called by:
 12758 ;;		_itoa
 12759 ;; This function uses a non-reentrant model
 12760 ;;
 12761                           
 12762                           	psect	text48
 12763  002A00                     __ptext48:
 12764                           	opt stack 0
 12765  002A00                     _utoa:
 12766                           	opt stack 23
 12767                           
 12768                           ;incstack = 0
 12769  002A00  C023  F027         	movff	utoa@val,utoa@v
 12770  002A04  C024  F028         	movff	utoa@val+1,utoa@v+1
 12771  002A08  C027  F01A         	movff	utoa@v,___lwdiv@dividend
 12772  002A0C  C028  F01B         	movff	utoa@v+1,___lwdiv@dividend+1
 12773  002A10  C025  F01C         	movff	utoa@base,___lwdiv@divisor
 12774  002A14  C026  F01D         	movff	utoa@base+1,___lwdiv@divisor+1
 12775  002A18  EC12  F018         	call	___lwdiv	;wreg free
 12776  002A1C  C01A  F027         	movff	?___lwdiv,utoa@v
 12777  002A20  C01B  F028         	movff	?___lwdiv+1,utoa@v+1
 12778  002A24  4A21               	infsnz	utoa@buf,f,c
 12779  002A26  2A22               	incf	utoa@buf+1,f,c
 12780  002A28  5027               	movf	utoa@v,w,c
 12781  002A2A  1028               	iorwf	utoa@v+1,w,c
 12782  002A2C  A4D8               	btfss	status,2,c
 12783  002A2E  D7EC               	goto	l1635
 12784  002A30  C021  FFD9         	movff	utoa@buf,fsr2l
 12785  002A34  C022  FFDA         	movff	utoa@buf+1,fsr2h
 12786  002A38  0E00               	movlw	0
 12787  002A3A  6EDF               	movwf	indf2,c
 12788  002A3C  0621               	decf	utoa@buf,f,c
 12789  002A3E  A0D8               	btfss	status,0,c
 12790  002A40  0622               	decf	utoa@buf+1,f,c
 12791  002A42  C023  F01A         	movff	utoa@val,___lwmod@dividend
 12792  002A46  C024  F01B         	movff	utoa@val+1,___lwmod@dividend+1
 12793  002A4A  C025  F01C         	movff	utoa@base,___lwmod@divisor
 12794  002A4E  C026  F01D         	movff	utoa@base+1,___lwmod@divisor+1
 12795  002A52  ECA9  F018         	call	___lwmod	;wreg free
 12796  002A56  501A               	movf	?___lwmod,w,c
 12797  002A58  6E29               	movwf	utoa@c,c
 12798  002A5A  C023  F01A         	movff	utoa@val,___lwdiv@dividend
 12799  002A5E  C024  F01B         	movff	utoa@val+1,___lwdiv@dividend+1
 12800  002A62  C025  F01C         	movff	utoa@base,___lwdiv@divisor
 12801  002A66  C026  F01D         	movff	utoa@base+1,___lwdiv@divisor+1
 12802  002A6A  EC12  F018         	call	___lwdiv	;wreg free
 12803  002A6E  C01A  F023         	movff	?___lwdiv,utoa@val
 12804  002A72  C01B  F024         	movff	?___lwdiv+1,utoa@val+1
 12805  002A76  0E09               	movlw	9
 12806  002A78  6429               	cpfsgt	utoa@c,c
 12807  002A7A  D002               	goto	l1638
 12808  002A7C  0E07               	movlw	7
 12809  002A7E  2629               	addwf	utoa@c,f,c
 12810  002A80                     l1638:
 12811  002A80  0E30               	movlw	48
 12812  002A82  2629               	addwf	utoa@c,f,c
 12813  002A84  C021  FFD9         	movff	utoa@buf,fsr2l
 12814  002A88  C022  FFDA         	movff	utoa@buf+1,fsr2h
 12815  002A8C  C029  FFDF         	movff	utoa@c,indf2
 12816  002A90  0621               	decf	utoa@buf,f,c
 12817  002A92  A0D8               	btfss	status,0,c
 12818  002A94  0622               	decf	utoa@buf+1,f,c
 12819  002A96  5023               	movf	utoa@val,w,c
 12820  002A98  1024               	iorwf	utoa@val+1,w,c
 12821  002A9A  A4D8               	btfss	status,2,c
 12822  002A9C  D7D2               	goto	l1637
 12823                           
 12824                           ;	Return value of _utoa is never used
 12825  002A9E  4A21               	infsnz	utoa@buf,f,c
 12826  002AA0  2A22               	incf	utoa@buf+1,f,c
 12827  002AA2  0012               	return	
 12828  002AA4                     __end_of_utoa:
 12829                           	opt stack 0
 12830                           tosu	equ	0xFFF
 12831                           tosh	equ	0xFFE
 12832                           tosl	equ	0xFFD
 12833                           pclath	equ	0xFFA
 12834                           tblptru	equ	0xFF8
 12835                           tblptrh	equ	0xFF7
 12836                           tblptrl	equ	0xFF6
 12837                           tablat	equ	0xFF5
 12838                           prodh	equ	0xFF4
 12839                           prodl	equ	0xFF3
 12840                           intcon	equ	0xFF2
 12841                           intcon2	equ	0xFF1
 12842                           intcon3	equ	0xFF0
 12843                           postinc0	equ	0xFEE
 12844                           wreg	equ	0xFE8
 12845                           indf1	equ	0xFE7
 12846                           postinc1	equ	0xFE6
 12847                           postdec1	equ	0xFE5
 12848                           plusw1	equ	0xFE3
 12849                           fsr1h	equ	0xFE2
 12850                           fsr1l	equ	0xFE1
 12851                           indf2	equ	0xFDF
 12852                           postinc2	equ	0xFDE
 12853                           postdec2	equ	0xFDD
 12854                           plusw2	equ	0xFDB
 12855                           fsr2h	equ	0xFDA
 12856                           fsr2l	equ	0xFD9
 12857                           status	equ	0xFD8
 12858                           
 12859 ;; *************** function ___lwmod *****************
 12860 ;; Defined at:
 12861 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 12862 ;; Parameters:    Size  Location     Type
 12863 ;;  dividend        2   25[COMRAM] unsigned int 
 12864 ;;  divisor         2   27[COMRAM] unsigned int 
 12865 ;; Auto vars:     Size  Location     Type
 12866 ;;  counter         1   29[COMRAM] unsigned char 
 12867 ;; Return value:  Size  Location     Type
 12868 ;;                  2   25[COMRAM] unsigned int 
 12869 ;; Registers used:
 12870 ;;		wreg, status,2, status,0
 12871 ;; Tracked objects:
 12872 ;;		On entry : 0/0
 12873 ;;		On exit  : 0/0
 12874 ;;		Unchanged: 0/0
 12875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12876 ;;      Params:         4       0       0       0       0       0       0       0       0
 12877 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12878 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12879 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12880 ;;Total ram usage:        5 bytes
 12881 ;; Hardware stack levels used:    1
 12882 ;; Hardware stack levels required when called:    2
 12883 ;; This function calls:
 12884 ;;		Nothing
 12885 ;; This function is called by:
 12886 ;;		_utoa
 12887 ;;		_converte_inteiro_matriz
 12888 ;;		_sprintf
 12889 ;; This function uses a non-reentrant model
 12890 ;;
 12891                           
 12892                           	psect	text49
 12893  003152                     __ptext49:
 12894                           	opt stack 0
 12895  003152                     ___lwmod:
 12896                           	opt stack 23
 12897                           
 12898                           ;incstack = 0
 12899  003152  501C               	movf	___lwmod@divisor,w,c
 12900  003154  101D               	iorwf	___lwmod@divisor+1,w,c
 12901  003156  B4D8               	btfsc	status,2,c
 12902  003158  D018               	goto	l1733
 12903  00315A  0E01               	movlw	1
 12904  00315C  6E1E               	movwf	___lwmod@counter,c
 12905  00315E  D004               	goto	l1728
 12906  003160  90D8               	bcf	status,0,c
 12907  003162  361C               	rlcf	___lwmod@divisor,f,c
 12908  003164  361D               	rlcf	___lwmod@divisor+1,f,c
 12909  003166  2A1E               	incf	___lwmod@counter,f,c
 12910  003168                     l1728:
 12911  003168  AE1D               	btfss	___lwmod@divisor+1,7,c
 12912  00316A  D7FA               	goto	l1729
 12913  00316C                     u8260:
 12914  00316C  501C               	movf	___lwmod@divisor,w,c
 12915  00316E  5C1A               	subwf	___lwmod@dividend,w,c
 12916  003170  501D               	movf	___lwmod@divisor+1,w,c
 12917  003172  581B               	subwfb	___lwmod@dividend+1,w,c
 12918  003174  A0D8               	btfss	status,0,c
 12919  003176  D004               	goto	l1732
 12920  003178  501C               	movf	___lwmod@divisor,w,c
 12921  00317A  5E1A               	subwf	___lwmod@dividend,f,c
 12922  00317C  501D               	movf	___lwmod@divisor+1,w,c
 12923  00317E  5A1B               	subwfb	___lwmod@dividend+1,f,c
 12924  003180                     l1732:
 12925  003180  90D8               	bcf	status,0,c
 12926  003182  321D               	rrcf	___lwmod@divisor+1,f,c
 12927  003184  321C               	rrcf	___lwmod@divisor,f,c
 12928  003186  2E1E               	decfsz	___lwmod@counter,f,c
 12929  003188  D7F1               	goto	u8260
 12930  00318A                     l1733:
 12931  00318A  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 12932  00318E  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 12933  003192  0012               	return		;funcret
 12934  003194                     __end_of___lwmod:
 12935                           	opt stack 0
 12936                           tosu	equ	0xFFF
 12937                           tosh	equ	0xFFE
 12938                           tosl	equ	0xFFD
 12939                           pclath	equ	0xFFA
 12940                           tblptru	equ	0xFF8
 12941                           tblptrh	equ	0xFF7
 12942                           tblptrl	equ	0xFF6
 12943                           tablat	equ	0xFF5
 12944                           prodh	equ	0xFF4
 12945                           prodl	equ	0xFF3
 12946                           intcon	equ	0xFF2
 12947                           intcon2	equ	0xFF1
 12948                           intcon3	equ	0xFF0
 12949                           postinc0	equ	0xFEE
 12950                           wreg	equ	0xFE8
 12951                           indf1	equ	0xFE7
 12952                           postinc1	equ	0xFE6
 12953                           postdec1	equ	0xFE5
 12954                           plusw1	equ	0xFE3
 12955                           fsr1h	equ	0xFE2
 12956                           fsr1l	equ	0xFE1
 12957                           indf2	equ	0xFDF
 12958                           postinc2	equ	0xFDE
 12959                           postdec2	equ	0xFDD
 12960                           plusw2	equ	0xFDB
 12961                           fsr2h	equ	0xFDA
 12962                           fsr2l	equ	0xFD9
 12963                           status	equ	0xFD8
 12964                           
 12965 ;; *************** function ___lwdiv *****************
 12966 ;; Defined at:
 12967 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 12968 ;; Parameters:    Size  Location     Type
 12969 ;;  dividend        2   25[COMRAM] unsigned int 
 12970 ;;  divisor         2   27[COMRAM] unsigned int 
 12971 ;; Auto vars:     Size  Location     Type
 12972 ;;  quotient        2   30[COMRAM] unsigned int 
 12973 ;;  counter         1   29[COMRAM] unsigned char 
 12974 ;; Return value:  Size  Location     Type
 12975 ;;                  2   25[COMRAM] unsigned int 
 12976 ;; Registers used:
 12977 ;;		wreg, status,2, status,0
 12978 ;; Tracked objects:
 12979 ;;		On entry : 0/0
 12980 ;;		On exit  : 0/0
 12981 ;;		Unchanged: 0/0
 12982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12983 ;;      Params:         4       0       0       0       0       0       0       0       0
 12984 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12985 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12986 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12987 ;;Total ram usage:        7 bytes
 12988 ;; Hardware stack levels used:    1
 12989 ;; Hardware stack levels required when called:    2
 12990 ;; This function calls:
 12991 ;;		Nothing
 12992 ;; This function is called by:
 12993 ;;		_utoa
 12994 ;;		_converte_inteiro_matriz
 12995 ;;		_sprintf
 12996 ;; This function uses a non-reentrant model
 12997 ;;
 12998                           
 12999                           	psect	text50
 13000  003024                     __ptext50:
 13001                           	opt stack 0
 13002  003024                     ___lwdiv:
 13003                           	opt stack 23
 13004                           
 13005                           ;incstack = 0
 13006  003024  0E00               	movlw	0
 13007  003026  6E20               	movwf	___lwdiv@quotient+1,c
 13008  003028  0E00               	movlw	0
 13009  00302A  6E1F               	movwf	___lwdiv@quotient,c
 13010  00302C  501C               	movf	___lwdiv@divisor,w,c
 13011  00302E  101D               	iorwf	___lwdiv@divisor+1,w,c
 13012  003030  B4D8               	btfsc	status,2,c
 13013  003032  D01C               	goto	l1723
 13014  003034  0E01               	movlw	1
 13015  003036  6E1E               	movwf	___lwdiv@counter,c
 13016  003038  D004               	goto	l1718
 13017  00303A  90D8               	bcf	status,0,c
 13018  00303C  361C               	rlcf	___lwdiv@divisor,f,c
 13019  00303E  361D               	rlcf	___lwdiv@divisor+1,f,c
 13020  003040  2A1E               	incf	___lwdiv@counter,f,c
 13021  003042                     l1718:
 13022  003042  AE1D               	btfss	___lwdiv@divisor+1,7,c
 13023  003044  D7FA               	goto	l1719
 13024  003046                     u8230:
 13025  003046  90D8               	bcf	status,0,c
 13026  003048  361F               	rlcf	___lwdiv@quotient,f,c
 13027  00304A  3620               	rlcf	___lwdiv@quotient+1,f,c
 13028  00304C  501C               	movf	___lwdiv@divisor,w,c
 13029  00304E  5C1A               	subwf	___lwdiv@dividend,w,c
 13030  003050  501D               	movf	___lwdiv@divisor+1,w,c
 13031  003052  581B               	subwfb	___lwdiv@dividend+1,w,c
 13032  003054  A0D8               	btfss	status,0,c
 13033  003056  D005               	goto	l1722
 13034  003058  501C               	movf	___lwdiv@divisor,w,c
 13035  00305A  5E1A               	subwf	___lwdiv@dividend,f,c
 13036  00305C  501D               	movf	___lwdiv@divisor+1,w,c
 13037  00305E  5A1B               	subwfb	___lwdiv@dividend+1,f,c
 13038  003060  801F               	bsf	___lwdiv@quotient,0,c
 13039  003062                     l1722:
 13040  003062  90D8               	bcf	status,0,c
 13041  003064  321D               	rrcf	___lwdiv@divisor+1,f,c
 13042  003066  321C               	rrcf	___lwdiv@divisor,f,c
 13043  003068  2E1E               	decfsz	___lwdiv@counter,f,c
 13044  00306A  D7ED               	goto	u8230
 13045  00306C                     l1723:
 13046  00306C  C01F  F01A         	movff	___lwdiv@quotient,?___lwdiv
 13047  003070  C020  F01B         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13048  003074  0012               	return		;funcret
 13049  003076                     __end_of___lwdiv:
 13050                           	opt stack 0
 13051                           tosu	equ	0xFFF
 13052                           tosh	equ	0xFFE
 13053                           tosl	equ	0xFFD
 13054                           pclath	equ	0xFFA
 13055                           tblptru	equ	0xFF8
 13056                           tblptrh	equ	0xFF7
 13057                           tblptrl	equ	0xFF6
 13058                           tablat	equ	0xFF5
 13059                           prodh	equ	0xFF4
 13060                           prodl	equ	0xFF3
 13061                           intcon	equ	0xFF2
 13062                           intcon2	equ	0xFF1
 13063                           intcon3	equ	0xFF0
 13064                           postinc0	equ	0xFEE
 13065                           wreg	equ	0xFE8
 13066                           indf1	equ	0xFE7
 13067                           postinc1	equ	0xFE6
 13068                           postdec1	equ	0xFE5
 13069                           plusw1	equ	0xFE3
 13070                           fsr1h	equ	0xFE2
 13071                           fsr1l	equ	0xFE1
 13072                           indf2	equ	0xFDF
 13073                           postinc2	equ	0xFDE
 13074                           postdec2	equ	0xFDD
 13075                           plusw2	equ	0xFDB
 13076                           fsr2h	equ	0xFDA
 13077                           fsr2l	equ	0xFD9
 13078                           status	equ	0xFD8
 13079                           
 13080 ;; *************** function _escreve_frase_ram_lcd *****************
 13081 ;; Defined at:
 13082 ;;		line 445 in file "bibliotecas/display_lcd.c"
 13083 ;; Parameters:    Size  Location     Type
 13084 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 13085 ;;		 -> STR_32(11), STR_31(8), STR_30(9), escreve_inteiro_lcd@texto(7), 
 13086 ;;		 -> STR_29(3), STR_28(8), STR_27(14), STR_26(13), 
 13087 ;;		 -> STR_25(9), STR_24(14), STR_23(7), STR_22(7), 
 13088 ;;		 -> STR_21(10), STR_20(14), leitura_chave@pos_ignicao_on(17), leitura_chave@pos_ignicao_crank(17), 
 13089 ;;		 -> leitura_chave@pos_ignicao_off(17), STR_19(17), STR_18(12), STR_17(14), 
 13090 ;;		 -> STR_16(13), STR_15(6), STR_14(16), STR_13(14), 
 13091 ;;		 -> STR_12(6), STR_11(14), STR_10(14), STR_9(11), 
 13092 ;;		 -> STR_8(8), STR_7(14), STR_6(13), STR_5(11), 
 13093 ;;		 -> STR_3(17), mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;		None
 13096 ;; Return value:  Size  Location     Type
 13097 ;;                  1    wreg      void 
 13098 ;; Registers used:
 13099 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13105 ;;      Params:         2       0       0       0       0       0       0       0       0
 13106 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13107 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13108 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13109 ;;Total ram usage:        2 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; Hardware stack levels required when called:    4
 13112 ;; This function calls:
 13113 ;;		_escreve_caractere_lcd
 13114 ;; This function is called by:
 13115 ;;		_mensagem_inicial
 13116 ;;		_SDCard
 13117 ;;		_disk_initialize
 13118 ;;		_disk_readp
 13119 ;;		_escreve_inteiro_lcd
 13120 ;;		_pf_read
 13121 ;;		_pf_write
 13122 ;;		_inicializa_SPI
 13123 ;;		_leitura_chave
 13124 ;; This function uses a non-reentrant model
 13125 ;;
 13126                           
 13127                           	psect	text51
 13128  003076                     __ptext51:
 13129                           	opt stack 0
 13130  003076                     _escreve_frase_ram_lcd:
 13131                           	opt stack 25
 13132                           
 13133                           ;display_lcd.c: 447: while(*buffer)
 13134                           
 13135                           ;incstack = 0
 13136  003076  D014               	goto	l671
 13137  003078                     
 13138                           ;display_lcd.c: 448: {
 13139                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 13140  003078  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13141  00307C  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13142  003080  6AF8               	clrf	tblptru,c
 13143  003082  0E07               	movlw	(high __ramtop+-1)
 13144  003084  64F7               	cpfsgt	tblptrh,c
 13145  003086  D003               	bra	u7687
 13146  003088  0008               	tblrd		*
 13147  00308A  50F5               	movf	tablat,w,c
 13148  00308C  D005               	bra	u7680
 13149  00308E                     u7687:
 13150  00308E  CFF6 FFE9          	movff	tblptrl,fsr0l
 13151  003092  CFF7 FFEA          	movff	tblptrh,fsr0h
 13152  003096  50EF               	movf	indf0,w,c
 13153  003098                     u7680:
 13154  003098  ECDB  F016         	call	_escreve_caractere_lcd
 13155                           
 13156                           ;display_lcd.c: 450: buffer++;
 13157  00309C  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 13158  00309E  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 13159  0030A0                     l671:
 13160  0030A0  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13161  0030A4  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13162  0030A8  6AF8               	clrf	tblptru,c
 13163  0030AA  0E07               	movlw	(high __ramtop+-1)
 13164  0030AC  64F7               	cpfsgt	tblptrh,c
 13165  0030AE  D003               	bra	u7697
 13166  0030B0  0008               	tblrd		*
 13167  0030B2  50F5               	movf	tablat,w,c
 13168  0030B4  D005               	bra	u7690
 13169  0030B6                     u7697:
 13170  0030B6  CFF6 FFE9          	movff	tblptrl,fsr0l
 13171  0030BA  CFF7 FFEA          	movff	tblptrh,fsr0h
 13172  0030BE  50EF               	movf	indf0,w,c
 13173  0030C0                     u7690:
 13174  0030C0  0900               	iorlw	0
 13175  0030C2  B4D8               	btfsc	status,2,c
 13176  0030C4  0012               	return	
 13177  0030C6  D7D8               	goto	l672
 13178  0030C8                     __end_of_escreve_frase_ram_lcd:
 13179                           	opt stack 0
 13180                           tosu	equ	0xFFF
 13181                           tosh	equ	0xFFE
 13182                           tosl	equ	0xFFD
 13183                           pclath	equ	0xFFA
 13184                           tblptru	equ	0xFF8
 13185                           tblptrh	equ	0xFF7
 13186                           tblptrl	equ	0xFF6
 13187                           tablat	equ	0xFF5
 13188                           prodh	equ	0xFF4
 13189                           prodl	equ	0xFF3
 13190                           intcon	equ	0xFF2
 13191                           intcon2	equ	0xFF1
 13192                           intcon3	equ	0xFF0
 13193                           indf0	equ	0xFEF
 13194                           postinc0	equ	0xFEE
 13195                           fsr0h	equ	0xFEA
 13196                           fsr0l	equ	0xFE9
 13197                           wreg	equ	0xFE8
 13198                           indf1	equ	0xFE7
 13199                           postinc1	equ	0xFE6
 13200                           postdec1	equ	0xFE5
 13201                           plusw1	equ	0xFE3
 13202                           fsr1h	equ	0xFE2
 13203                           fsr1l	equ	0xFE1
 13204                           indf2	equ	0xFDF
 13205                           postinc2	equ	0xFDE
 13206                           postdec2	equ	0xFDD
 13207                           plusw2	equ	0xFDB
 13208                           fsr2h	equ	0xFDA
 13209                           fsr2l	equ	0xFD9
 13210                           status	equ	0xFD8
 13211                           
 13212 ;; *************** function _escreve_caractere_lcd *****************
 13213 ;; Defined at:
 13214 ;;		line 323 in file "bibliotecas/display_lcd.c"
 13215 ;; Parameters:    Size  Location     Type
 13216 ;;  data            1    wreg     unsigned char 
 13217 ;; Auto vars:     Size  Location     Type
 13218 ;;  data            1   27[COMRAM] unsigned char 
 13219 ;; Return value:  Size  Location     Type
 13220 ;;                  1    wreg      void 
 13221 ;; Registers used:
 13222 ;;		wreg, status,2, status,0, cstack
 13223 ;; Tracked objects:
 13224 ;;		On entry : 0/0
 13225 ;;		On exit  : 0/0
 13226 ;;		Unchanged: 0/0
 13227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13228 ;;      Params:         0       0       0       0       0       0       0       0       0
 13229 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13230 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13231 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13232 ;;Total ram usage:        1 bytes
 13233 ;; Hardware stack levels used:    1
 13234 ;; Hardware stack levels required when called:    3
 13235 ;; This function calls:
 13236 ;;		_delay
 13237 ;; This function is called by:
 13238 ;;		_escreve_frase_ram_lcd
 13239 ;;		_escreve_float_lcd
 13240 ;;		_escreve_frase_lcd
 13241 ;;		_cria_caractere_lcd
 13242 ;; This function uses a non-reentrant model
 13243 ;;
 13244                           
 13245                           	psect	text52
 13246  002DB6                     __ptext52:
 13247                           	opt stack 0
 13248  002DB6                     _escreve_caractere_lcd:
 13249                           	opt stack 25
 13250                           
 13251                           ;incstack = 0
 13252                           ;escreve_caractere_lcd@data stored from wreg
 13253  002DB6  6E1C               	movwf	escreve_caractere_lcd@data,c
 13254                           
 13255                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 13256  002DB8  9483               	bcf	3971,2,c	;volatile
 13257                           
 13258                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 13259  002DBA  8283               	bsf	3971,1,c	;volatile
 13260                           
 13261                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 13262  002DBC  9083               	bcf	3971,0,c	;volatile
 13263                           
 13264                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 13265  002DBE  A81C               	btfss	escreve_caractere_lcd@data,4,c
 13266  002DC0  D002               	goto	l638
 13267  002DC2  8883               	bsf	3971,4,c	;volatile
 13268  002DC4  D001               	goto	l639
 13269  002DC6                     l638:
 13270                           
 13271                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 13272  002DC6  9883               	bcf	3971,4,c	;volatile
 13273  002DC8                     l639:
 13274                           
 13275                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 13276  002DC8  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 13277  002DCA  D002               	goto	l640
 13278  002DCC  8A83               	bsf	3971,5,c	;volatile
 13279  002DCE  D001               	goto	l641
 13280  002DD0                     l640:
 13281                           
 13282                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 13283  002DD0  9A83               	bcf	3971,5,c	;volatile
 13284  002DD2                     l641:
 13285                           
 13286                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 13287  002DD2  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 13288  002DD4  D002               	goto	l642
 13289  002DD6  8C83               	bsf	3971,6,c	;volatile
 13290  002DD8  D001               	goto	l643
 13291  002DDA                     l642:
 13292                           
 13293                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 13294  002DDA  9C83               	bcf	3971,6,c	;volatile
 13295  002DDC                     l643:
 13296                           
 13297                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 13298  002DDC  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 13299  002DDE  D002               	goto	l644
 13300  002DE0  8E83               	bsf	3971,7,c	;volatile
 13301  002DE2  D001               	goto	l645
 13302  002DE4                     l644:
 13303                           
 13304                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 13305  002DE4  9E83               	bcf	3971,7,c	;volatile
 13306  002DE6                     l645:
 13307                           
 13308                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 13309  002DE6  8083               	bsf	3971,0,c	;volatile
 13310                           
 13311                           ;display_lcd.c: 342: delay();
 13312  002DE8  EC71  F019         	call	_delay	;wreg free
 13313                           
 13314                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 13315  002DEC  9083               	bcf	3971,0,c	;volatile
 13316                           
 13317                           ;display_lcd.c: 344: delay();
 13318  002DEE  EC71  F019         	call	_delay	;wreg free
 13319                           
 13320                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 13321  002DF2  A01C               	btfss	escreve_caractere_lcd@data,0,c
 13322  002DF4  D002               	goto	l646
 13323  002DF6  8883               	bsf	3971,4,c	;volatile
 13324  002DF8  D001               	goto	l647
 13325  002DFA                     l646:
 13326                           
 13327                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 13328  002DFA  9883               	bcf	3971,4,c	;volatile
 13329  002DFC                     l647:
 13330                           
 13331                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 13332  002DFC  A21C               	btfss	escreve_caractere_lcd@data,1,c
 13333  002DFE  D002               	goto	l648
 13334  002E00  8A83               	bsf	3971,5,c	;volatile
 13335  002E02  D001               	goto	l649
 13336  002E04                     l648:
 13337                           
 13338                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 13339  002E04  9A83               	bcf	3971,5,c	;volatile
 13340  002E06                     l649:
 13341                           
 13342                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 13343  002E06  A41C               	btfss	escreve_caractere_lcd@data,2,c
 13344  002E08  D002               	goto	l650
 13345  002E0A  8C83               	bsf	3971,6,c	;volatile
 13346  002E0C  D001               	goto	l651
 13347  002E0E                     l650:
 13348                           
 13349                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 13350  002E0E  9C83               	bcf	3971,6,c	;volatile
 13351  002E10                     l651:
 13352                           
 13353                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 13354  002E10  A61C               	btfss	escreve_caractere_lcd@data,3,c
 13355  002E12  D002               	goto	l652
 13356  002E14  8E83               	bsf	3971,7,c	;volatile
 13357  002E16  D001               	goto	l653
 13358  002E18                     l652:
 13359                           
 13360                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 13361  002E18  9E83               	bcf	3971,7,c	;volatile
 13362  002E1A                     l653:
 13363                           
 13364                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 13365  002E1A  8083               	bsf	3971,0,c	;volatile
 13366                           
 13367                           ;display_lcd.c: 359: delay();
 13368  002E1C  EC71  F019         	call	_delay	;wreg free
 13369                           
 13370                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 13371  002E20  9083               	bcf	3971,0,c	;volatile
 13372                           
 13373                           ;display_lcd.c: 361: delay();
 13374  002E22  EC71  F019         	call	_delay	;wreg free
 13375  002E26  0012               	return		;funcret
 13376  002E28                     __end_of_escreve_caractere_lcd:
 13377                           	opt stack 0
 13378                           tosu	equ	0xFFF
 13379                           tosh	equ	0xFFE
 13380                           tosl	equ	0xFFD
 13381                           pclath	equ	0xFFA
 13382                           tblptru	equ	0xFF8
 13383                           tblptrh	equ	0xFF7
 13384                           tblptrl	equ	0xFF6
 13385                           tablat	equ	0xFF5
 13386                           prodh	equ	0xFF4
 13387                           prodl	equ	0xFF3
 13388                           intcon	equ	0xFF2
 13389                           intcon2	equ	0xFF1
 13390                           intcon3	equ	0xFF0
 13391                           indf0	equ	0xFEF
 13392                           postinc0	equ	0xFEE
 13393                           fsr0h	equ	0xFEA
 13394                           fsr0l	equ	0xFE9
 13395                           wreg	equ	0xFE8
 13396                           indf1	equ	0xFE7
 13397                           postinc1	equ	0xFE6
 13398                           postdec1	equ	0xFE5
 13399                           plusw1	equ	0xFE3
 13400                           fsr1h	equ	0xFE2
 13401                           fsr1l	equ	0xFE1
 13402                           indf2	equ	0xFDF
 13403                           postinc2	equ	0xFDE
 13404                           postdec2	equ	0xFDD
 13405                           plusw2	equ	0xFDB
 13406                           fsr2h	equ	0xFDA
 13407                           fsr2l	equ	0xFD9
 13408                           status	equ	0xFD8
 13409                           
 13410 ;; *************** function _delay *****************
 13411 ;; Defined at:
 13412 ;;		line 45 in file "bibliotecas/display_lcd.c"
 13413 ;; Parameters:    Size  Location     Type
 13414 ;;		None
 13415 ;; Auto vars:     Size  Location     Type
 13416 ;;  contador_int    1   26[COMRAM] unsigned char 
 13417 ;;  contador_ext    1   25[COMRAM] unsigned char 
 13418 ;; Return value:  Size  Location     Type
 13419 ;;                  1    wreg      void 
 13420 ;; Registers used:
 13421 ;;		wreg, status,2, status,0
 13422 ;; Tracked objects:
 13423 ;;		On entry : 0/0
 13424 ;;		On exit  : 0/0
 13425 ;;		Unchanged: 0/0
 13426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13427 ;;      Params:         0       0       0       0       0       0       0       0       0
 13428 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13429 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13430 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13431 ;;Total ram usage:        2 bytes
 13432 ;; Hardware stack levels used:    1
 13433 ;; Hardware stack levels required when called:    2
 13434 ;; This function calls:
 13435 ;;		Nothing
 13436 ;; This function is called by:
 13437 ;;		_init_lcd
 13438 ;;		_escreve_cmd_lcd
 13439 ;;		_endereco_cursor_lcd
 13440 ;;		_escreve_caractere_lcd
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444                           	psect	text53
 13445  0032E2                     __ptext53:
 13446                           	opt stack 0
 13447  0032E2                     _delay:
 13448                           	opt stack 25
 13449                           
 13450                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 13451                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 13452                           
 13453                           ;incstack = 0
 13454  0032E2  0E00               	movlw	0
 13455  0032E4  6E1A               	movwf	delay@contador_ext,c
 13456  0032E6                     l7136:
 13457  0032E6  0E63               	movlw	99
 13458  0032E8  641A               	cpfsgt	delay@contador_ext,c
 13459  0032EA  D001               	goto	l577
 13460  0032EC  0012               	return	
 13461  0032EE                     l577:
 13462                           
 13463                           ;display_lcd.c: 50: {
 13464                           ;display_lcd.c: 51: __nop();
 13465  0032EE  F000               	nop	
 13466                           
 13467                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 13468  0032F0  0E00               	movlw	0
 13469  0032F2  6E1B               	movwf	delay@contador_int,c
 13470  0032F4                     l7142:
 13471  0032F4  0E31               	movlw	49
 13472  0032F6  641B               	cpfsgt	delay@contador_int,c
 13473  0032F8  D001               	goto	l579
 13474  0032FA  D003               	goto	u7450
 13475  0032FC                     l579:
 13476                           
 13477                           ;display_lcd.c: 53: {
 13478                           ;display_lcd.c: 54: __nop();
 13479  0032FC  F000               	nop	
 13480  0032FE  2A1B               	incf	delay@contador_int,f,c
 13481  003300  D7F9               	goto	l7142
 13482  003302                     u7450:
 13483  003302  2A1A               	incf	delay@contador_ext,f,c
 13484  003304  D7F0               	goto	l7136
 13485  003306                     __end_of_delay:
 13486                           	opt stack 0
 13487                           tosu	equ	0xFFF
 13488                           tosh	equ	0xFFE
 13489                           tosl	equ	0xFFD
 13490                           pclath	equ	0xFFA
 13491                           tblptru	equ	0xFF8
 13492                           tblptrh	equ	0xFF7
 13493                           tblptrl	equ	0xFF6
 13494                           tablat	equ	0xFF5
 13495                           prodh	equ	0xFF4
 13496                           prodl	equ	0xFF3
 13497                           intcon	equ	0xFF2
 13498                           intcon2	equ	0xFF1
 13499                           intcon3	equ	0xFF0
 13500                           indf0	equ	0xFEF
 13501                           postinc0	equ	0xFEE
 13502                           fsr0h	equ	0xFEA
 13503                           fsr0l	equ	0xFE9
 13504                           wreg	equ	0xFE8
 13505                           indf1	equ	0xFE7
 13506                           postinc1	equ	0xFE6
 13507                           postdec1	equ	0xFE5
 13508                           plusw1	equ	0xFE3
 13509                           fsr1h	equ	0xFE2
 13510                           fsr1l	equ	0xFE1
 13511                           indf2	equ	0xFDF
 13512                           postinc2	equ	0xFDE
 13513                           postdec2	equ	0xFDD
 13514                           plusw2	equ	0xFDB
 13515                           fsr2h	equ	0xFDA
 13516                           fsr2l	equ	0xFD9
 13517                           status	equ	0xFD8
 13518                           
 13519 ;; *************** function _isr *****************
 13520 ;; Defined at:
 13521 ;;		line 96 in file "main.c"
 13522 ;; Parameters:    Size  Location     Type
 13523 ;;		None
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;  cont            1   24[COMRAM] unsigned char 
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1    wreg      void 
 13528 ;; Registers used:
 13529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13535 ;;      Params:         0       0       0       0       0       0       0       0       0
 13536 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13537 ;;      Temps:         20       0       0       0       0       0       0       0       0
 13538 ;;      Totals:        21       0       0       0       0       0       0       0       0
 13539 ;;Total ram usage:       21 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; Hardware stack levels required when called:    1
 13542 ;; This function calls:
 13543 ;;		_recebe_dado_uart
 13544 ;;		_tratamento_uart
 13545 ;;		i2_write_timer_zero
 13546 ;; This function is called by:
 13547 ;;		Interrupt level 2
 13548 ;; This function uses a non-reentrant model
 13549 ;;
 13550                           
 13551                           	psect	intcode
 13552  000008                     __pintcode:
 13553                           	opt stack 0
 13554  000008                     _isr:
 13555                           	opt stack 18
 13556                           
 13557                           ;incstack = 0
 13558  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13559  00000A  EDC6  F011         	call	int_func,f	;refresh shadow registers
 13560                           tosu	equ	0xFFF
 13561                           tosh	equ	0xFFE
 13562                           tosl	equ	0xFFD
 13563                           pclath	equ	0xFFA
 13564                           tblptru	equ	0xFF8
 13565                           tblptrh	equ	0xFF7
 13566                           tblptrl	equ	0xFF6
 13567                           tablat	equ	0xFF5
 13568                           prodh	equ	0xFF4
 13569                           prodl	equ	0xFF3
 13570                           intcon	equ	0xFF2
 13571                           intcon2	equ	0xFF1
 13572                           intcon3	equ	0xFF0
 13573                           indf0	equ	0xFEF
 13574                           postinc0	equ	0xFEE
 13575                           fsr0h	equ	0xFEA
 13576                           fsr0l	equ	0xFE9
 13577                           wreg	equ	0xFE8
 13578                           indf1	equ	0xFE7
 13579                           postinc1	equ	0xFE6
 13580                           postdec1	equ	0xFE5
 13581                           plusw1	equ	0xFE3
 13582                           fsr1h	equ	0xFE2
 13583                           fsr1l	equ	0xFE1
 13584                           indf2	equ	0xFDF
 13585                           postinc2	equ	0xFDE
 13586                           postdec2	equ	0xFDD
 13587                           plusw2	equ	0xFDB
 13588                           fsr2h	equ	0xFDA
 13589                           fsr2l	equ	0xFD9
 13590                           status	equ	0xFD8
 13591                           
 13592                           	psect	intcode_body
 13593  00238C                     __pintcode_body:
 13594                           	opt stack 18
 13595  00238C                     int_func:
 13596                           	opt stack 18
 13597  00238C  0006               	pop		; remove dummy address from shadow register refresh
 13598  00238E  CFFA F007          	movff	pclath,??_isr+2
 13599  002392  CFFB F008          	movff	pclatu,??_isr+3
 13600  002396  CFE9 F009          	movff	fsr0l,??_isr+4
 13601  00239A  CFEA F00A          	movff	fsr0h,??_isr+5
 13602  00239E  CFE1 F00B          	movff	fsr1l,??_isr+6
 13603  0023A2  CFE2 F00C          	movff	fsr1h,??_isr+7
 13604  0023A6  CFD9 F00D          	movff	fsr2l,??_isr+8
 13605  0023AA  CFDA F00E          	movff	fsr2h,??_isr+9
 13606  0023AE  CFF3 F00F          	movff	prodl,??_isr+10
 13607  0023B2  CFF4 F010          	movff	prodh,??_isr+11
 13608  0023B6  CFF6 F011          	movff	tblptrl,??_isr+12
 13609  0023BA  CFF7 F012          	movff	tblptrh,??_isr+13
 13610  0023BE  CFF8 F013          	movff	tblptru,??_isr+14
 13611  0023C2  CFF5 F014          	movff	tablat,??_isr+15
 13612  0023C6  C046  F015         	movff	btemp,??_isr+16
 13613  0023CA  C047  F016         	movff	btemp+1,??_isr+17
 13614  0023CE  C048  F017         	movff	btemp+2,??_isr+18
 13615  0023D2  C049  F018         	movff	btemp+3,??_isr+19
 13616                           
 13617                           ;main.c: 98: unsigned char cont;
 13618                           ;main.c: 101: if (PIE1bits.RCIE && PIR1bits.RCIF)
 13619  0023D6  BA9D               	btfsc	3997,5,c	;volatile
 13620  0023D8  AA9E               	btfss	3998,5,c	;volatile
 13621  0023DA  D007               	goto	i2l65
 13622                           
 13623                           ;main.c: 102: {
 13624                           ;main.c: 103: data_uart_recebe = recebe_dado_uart();
 13625  0023DC  ECE1  F019         	call	_recebe_dado_uart	;wreg free
 13626  0023E0  6E45               	movwf	_data_uart_recebe,c
 13627                           
 13628                           ;main.c: 104: PIR1bits.RCIF = 0;
 13629  0023E2  9A9E               	bcf	3998,5,c	;volatile
 13630                           
 13631                           ;main.c: 105: tratamento_uart(data_uart_recebe);
 13632  0023E4  5045               	movf	_data_uart_recebe,w,c
 13633  0023E6  ECE0  F012         	call	_tratamento_uart
 13634  0023EA                     i2l65:
 13635                           
 13636                           ;main.c: 109: }
 13637                           ;main.c: 112: unsigned char cont;
 13638                           ;main.c: 114: if (TMR0IF && T0IF)
 13639  0023EA  B4F2               	btfsc	intcon,2,c	;volatile
 13640  0023EC  A4F2               	btfss	intcon,2,c	;volatile
 13641  0023EE  D036               	goto	i2l66
 13642                           
 13643                           ;main.c: 115: {
 13644                           ;main.c: 116: INTCONbits.TMR0IF = 0;
 13645  0023F0  94F2               	bcf	intcon,2,c	;volatile
 13646                           
 13647                           ;main.c: 117: sinaliza_int_timer = 1;
 13648  0023F2  0E01               	movlw	1
 13649  0023F4  6E44               	movwf	_sinaliza_int_timer,c
 13650                           
 13651                           ;main.c: 119: for(cont= 0; cont<2;cont++)
 13652  0023F6  0E00               	movlw	0
 13653  0023F8  6E19               	movwf	isr@cont,c
 13654  0023FA                     i2l6454:
 13655  0023FA  0E01               	movlw	1
 13656  0023FC  6419               	cpfsgt	isr@cont,c
 13657  0023FE  D001               	goto	i2l67
 13658  002400  D019               	goto	i2u650_40
 13659  002402                     i2l67:
 13660                           
 13661                           ;main.c: 120: {
 13662                           ;main.c: 121: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 13663  002402  5019               	movf	isr@cont,w,c
 13664  002404  0D02               	mullw	2
 13665  002406  0E6F               	movlw	low _tempo_tarefa
 13666  002408  24F3               	addwf	prodl,w,c
 13667  00240A  6ED9               	movwf	fsr2l,c
 13668  00240C  0E01               	movlw	high _tempo_tarefa
 13669  00240E  20F4               	addwfc	prodh,w,c
 13670  002410  6EDA               	movwf	fsr2h,c
 13671  002412  50DE               	movf	postinc2,w,c
 13672  002414  10DE               	iorwf	postinc2,w,c
 13673  002416  B4D8               	btfsc	status,2,c
 13674  002418  D00B               	goto	i2l69
 13675  00241A  5019               	movf	isr@cont,w,c
 13676  00241C  0D02               	mullw	2
 13677  00241E  0E6F               	movlw	low _tempo_tarefa
 13678  002420  24F3               	addwf	prodl,w,c
 13679  002422  6ED9               	movwf	fsr2l,c
 13680  002424  0E01               	movlw	high _tempo_tarefa
 13681  002426  20F4               	addwfc	prodh,w,c
 13682  002428  6EDA               	movwf	fsr2h,c
 13683  00242A  06DE               	decf	postinc2,f,c
 13684  00242C  0E00               	movlw	0
 13685  00242E  5ADD               	subwfb	postdec2,f,c
 13686  002430                     i2l69:
 13687  002430  2A19               	incf	isr@cont,f,c
 13688  002432  D7E3               	goto	i2l6454
 13689  002434                     i2u650_40:
 13690                           
 13691                           ;main.c: 122: }
 13692                           ;main.c: 125: if(tarefa_em_execucao == 1)
 13693  002434  0443               	decf	_tarefa_em_execucao,w,c	;volatile
 13694  002436  A4D8               	btfss	status,2,c
 13695  002438  D00B               	goto	i2l71
 13696                           
 13697                           ;main.c: 126: {
 13698                           ;main.c: 127: timeout_tarefa--;
 13699  00243A  0636               	decf	_timeout_tarefa,f,c
 13700  00243C  A0D8               	btfss	status,0,c
 13701  00243E  0637               	decf	_timeout_tarefa+1,f,c
 13702                           
 13703                           ;main.c: 128: if(!timeout_tarefa)
 13704  002440  5036               	movf	_timeout_tarefa,w,c
 13705  002442  1037               	iorwf	_timeout_tarefa+1,w,c
 13706  002444  A4D8               	btfss	status,2,c
 13707  002446  D004               	goto	i2l71
 13708                           
 13709                           ;main.c: 129: {
 13710                           ;main.c: 131: PCLATH = 0;
 13711  002448  0E00               	movlw	0
 13712  00244A  6EFA               	movwf	pclath,c	;volatile
 13713                           
 13714                           ;main.c: 132: PCL = 0;
 13715  00244C  0E00               	movlw	0
 13716  00244E  6EF9               	movwf	pcl,c	;volatile
 13717  002450                     i2l71:
 13718                           
 13719                           ;main.c: 133: }
 13720                           ;main.c: 134: }
 13721                           ;main.c: 137: write_timer_zero(0x0083);
 13722  002450  0E00               	movlw	0
 13723  002452  6E02               	movwf	i2write_timer_zero@timer0+1,c
 13724  002454  0E83               	movlw	131
 13725  002456  6E01               	movwf	i2write_timer_zero@timer0,c
 13726  002458  ECD8  F019         	call	i2_write_timer_zero	;wreg free
 13727  00245C                     i2l66:
 13728                           
 13729                           ;main.c: 139: }
 13730                           ;main.c: 141: if (INT0IF && INT0IE)
 13731  00245C  B2F2               	btfsc	intcon,1,c	;volatile
 13732  00245E  A8F2               	btfss	intcon,4,c	;volatile
 13733  002460  D001               	goto	i2l72
 13734                           
 13735                           ;main.c: 142: {
 13736                           ;main.c: 143: INT0IF = 0;
 13737  002462  92F2               	bcf	intcon,1,c	;volatile
 13738  002464                     i2l72:
 13739  002464  C018  F049         	movff	??_isr+19,btemp+3
 13740  002468  C017  F048         	movff	??_isr+18,btemp+2
 13741  00246C  C016  F047         	movff	??_isr+17,btemp+1
 13742  002470  C015  F046         	movff	??_isr+16,btemp
 13743  002474  C014  FFF5         	movff	??_isr+15,tablat
 13744  002478  C013  FFF8         	movff	??_isr+14,tblptru
 13745  00247C  C012  FFF7         	movff	??_isr+13,tblptrh
 13746  002480  C011  FFF6         	movff	??_isr+12,tblptrl
 13747  002484  C010  FFF4         	movff	??_isr+11,prodh
 13748  002488  C00F  FFF3         	movff	??_isr+10,prodl
 13749  00248C  C00E  FFDA         	movff	??_isr+9,fsr2h
 13750  002490  C00D  FFD9         	movff	??_isr+8,fsr2l
 13751  002494  C00C  FFE2         	movff	??_isr+7,fsr1h
 13752  002498  C00B  FFE1         	movff	??_isr+6,fsr1l
 13753  00249C  C00A  FFEA         	movff	??_isr+5,fsr0h
 13754  0024A0  C009  FFE9         	movff	??_isr+4,fsr0l
 13755  0024A4  C008  FFFB         	movff	??_isr+3,pclatu
 13756  0024A8  C007  FFFA         	movff	??_isr+2,pclath
 13757  0024AC  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13758  0024AE  0011               	retfie		f
 13759  0024B0                     __end_of_isr:
 13760                           	opt stack 0
 13761                           tosu	equ	0xFFF
 13762                           tosh	equ	0xFFE
 13763                           tosl	equ	0xFFD
 13764                           pclatu	equ	0xFFB
 13765                           pclath	equ	0xFFA
 13766                           pcl	equ	0xFF9
 13767                           tblptru	equ	0xFF8
 13768                           tblptrh	equ	0xFF7
 13769                           tblptrl	equ	0xFF6
 13770                           tablat	equ	0xFF5
 13771                           prodh	equ	0xFF4
 13772                           prodl	equ	0xFF3
 13773                           intcon	equ	0xFF2
 13774                           intcon2	equ	0xFF1
 13775                           intcon3	equ	0xFF0
 13776                           indf0	equ	0xFEF
 13777                           postinc0	equ	0xFEE
 13778                           fsr0h	equ	0xFEA
 13779                           fsr0l	equ	0xFE9
 13780                           wreg	equ	0xFE8
 13781                           indf1	equ	0xFE7
 13782                           postinc1	equ	0xFE6
 13783                           postdec1	equ	0xFE5
 13784                           plusw1	equ	0xFE3
 13785                           fsr1h	equ	0xFE2
 13786                           fsr1l	equ	0xFE1
 13787                           indf2	equ	0xFDF
 13788                           postinc2	equ	0xFDE
 13789                           postdec2	equ	0xFDD
 13790                           plusw2	equ	0xFDB
 13791                           fsr2h	equ	0xFDA
 13792                           fsr2l	equ	0xFD9
 13793                           status	equ	0xFD8
 13794                           
 13795 ;; *************** function i2_write_timer_zero *****************
 13796 ;; Defined at:
 13797 ;;		line 138 in file "bibliotecas/hardware.c"
 13798 ;; Parameters:    Size  Location     Type
 13799 ;;  timer0          2    0[COMRAM] unsigned int 
 13800 ;; Auto vars:     Size  Location     Type
 13801 ;;  write_timer_    2    2[COMRAM] struct Timers
 13802 ;; Return value:  Size  Location     Type
 13803 ;;                  1    wreg      void 
 13804 ;; Registers used:
 13805 ;;		None
 13806 ;; Tracked objects:
 13807 ;;		On entry : 0/0
 13808 ;;		On exit  : 0/0
 13809 ;;		Unchanged: 0/0
 13810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13811 ;;      Params:         2       0       0       0       0       0       0       0       0
 13812 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13813 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13814 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13815 ;;Total ram usage:        4 bytes
 13816 ;; Hardware stack levels used:    1
 13817 ;; This function calls:
 13818 ;;		Nothing
 13819 ;; This function is called by:
 13820 ;;		_isr
 13821 ;; This function uses a non-reentrant model
 13822 ;;
 13823                           
 13824                           	psect	text55
 13825  0033B0                     __ptext55:
 13826                           	opt stack 0
 13827  0033B0                     i2_write_timer_zero:
 13828                           	opt stack 18
 13829                           
 13830                           ;hardware.c: 140: union Timers timer;
 13831                           ;hardware.c: 142: timer.lt = timer0;
 13832                           
 13833                           ;incstack = 0
 13834  0033B0  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 13835  0033B4  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 13836                           
 13837                           ;hardware.c: 144: TMR0H = timer.bt[1];
 13838  0033B8  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 13839                           
 13840                           ;hardware.c: 145: TMR0L = timer.bt[0];
 13841  0033BC  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 13842  0033C0  0012               	return		;funcret
 13843  0033C2                     __end_ofi2_write_timer_zero:
 13844                           	opt stack 0
 13845                           tosu	equ	0xFFF
 13846                           tosh	equ	0xFFE
 13847                           tosl	equ	0xFFD
 13848                           pclatu	equ	0xFFB
 13849                           pclath	equ	0xFFA
 13850                           pcl	equ	0xFF9
 13851                           tblptru	equ	0xFF8
 13852                           tblptrh	equ	0xFF7
 13853                           tblptrl	equ	0xFF6
 13854                           tablat	equ	0xFF5
 13855                           prodh	equ	0xFF4
 13856                           prodl	equ	0xFF3
 13857                           intcon	equ	0xFF2
 13858                           intcon2	equ	0xFF1
 13859                           intcon3	equ	0xFF0
 13860                           indf0	equ	0xFEF
 13861                           postinc0	equ	0xFEE
 13862                           fsr0h	equ	0xFEA
 13863                           fsr0l	equ	0xFE9
 13864                           wreg	equ	0xFE8
 13865                           indf1	equ	0xFE7
 13866                           postinc1	equ	0xFE6
 13867                           postdec1	equ	0xFE5
 13868                           plusw1	equ	0xFE3
 13869                           fsr1h	equ	0xFE2
 13870                           fsr1l	equ	0xFE1
 13871                           indf2	equ	0xFDF
 13872                           postinc2	equ	0xFDE
 13873                           postdec2	equ	0xFDD
 13874                           plusw2	equ	0xFDB
 13875                           fsr2h	equ	0xFDA
 13876                           fsr2l	equ	0xFD9
 13877                           status	equ	0xFD8
 13878                           
 13879 ;; *************** function _tratamento_uart *****************
 13880 ;; Defined at:
 13881 ;;		line 314 in file "bibliotecas/GPS.c"
 13882 ;; Parameters:    Size  Location     Type
 13883 ;;  received_cha    1    wreg     unsigned char 
 13884 ;; Auto vars:     Size  Location     Type
 13885 ;;  received_cha    1    0[COMRAM] unsigned char 
 13886 ;; Return value:  Size  Location     Type
 13887 ;;                  1    wreg      void 
 13888 ;; Registers used:
 13889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13890 ;; Tracked objects:
 13891 ;;		On entry : 0/0
 13892 ;;		On exit  : 0/0
 13893 ;;		Unchanged: 0/0
 13894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13895 ;;      Params:         0       0       0       0       0       0       0       0       0
 13896 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13897 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13898 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13899 ;;Total ram usage:        1 bytes
 13900 ;; Hardware stack levels used:    1
 13901 ;; This function calls:
 13902 ;;		Nothing
 13903 ;; This function is called by:
 13904 ;;		_isr
 13905 ;; This function uses a non-reentrant model
 13906 ;;
 13907                           
 13908                           	psect	text56
 13909  0025C0                     __ptext56:
 13910                           	opt stack 0
 13911  0025C0                     _tratamento_uart:
 13912                           	opt stack 18
 13913                           
 13914                           ;incstack = 0
 13915                           ;tratamento_uart@received_char stored from wreg
 13916  0025C0  6E01               	movwf	tratamento_uart@received_char,c
 13917                           
 13918                           ;GPS.c: 316: if(received_char =='$'){
 13919  0025C2  0E24               	movlw	36
 13920  0025C4  1801               	xorwf	tratamento_uart@received_char,w,c
 13921  0025C6  A4D8               	btfss	status,2,c
 13922  0025C8  D010               	goto	i2l182
 13923                           
 13924                           ;GPS.c: 317: gga_index = 0;
 13925  0025CA  0E00               	movlw	0
 13926  0025CC  6E35               	movwf	_gga_index+1,c	;volatile
 13927  0025CE  0E00               	movlw	0
 13928  0025D0  6E34               	movwf	_gga_index,c	;volatile
 13929                           
 13930                           ;GPS.c: 318: rmc_index = 0;
 13931  0025D2  0E00               	movlw	0
 13932  0025D4  6E33               	movwf	_rmc_index+1,c	;volatile
 13933  0025D6  0E00               	movlw	0
 13934  0025D8  6E32               	movwf	_rmc_index,c	;volatile
 13935                           
 13936                           ;GPS.c: 319: is_it_gga_string = 0;
 13937  0025DA  0E00               	movlw	0
 13938  0025DC  6E3E               	movwf	_is_it_gga_string,c	;volatile
 13939                           
 13940                           ;GPS.c: 320: is_it_rmc_string = 0;
 13941  0025DE  0E00               	movlw	0
 13942  0025E0  6E3D               	movwf	_is_it_rmc_string,c	;volatile
 13943                           
 13944                           ;GPS.c: 321: comma_counter_gga = 0;
 13945  0025E2  0E00               	movlw	0
 13946  0025E4  6E40               	movwf	_comma_counter_gga,c
 13947                           
 13948                           ;GPS.c: 322: comma_counter_rmc = 0;
 13949  0025E6  0E00               	movlw	0
 13950  0025E8  6E3F               	movwf	_comma_counter_rmc,c
 13951  0025EA                     i2l182:
 13952                           
 13953                           ;GPS.c: 323: }
 13954                           ;GPS.c: 325: if(is_it_gga_string == 1)
 13955  0025EA  043E               	decf	_is_it_gga_string,w,c	;volatile
 13956  0025EC  A4D8               	btfss	status,2,c
 13957  0025EE  D01A               	goto	i2l183
 13958                           
 13959                           ;GPS.c: 326: {
 13960                           ;GPS.c: 327: if(received_char == ',' )
 13961  0025F0  0E2C               	movlw	44
 13962  0025F2  1801               	xorwf	tratamento_uart@received_char,w,c
 13963  0025F4  A4D8               	btfss	status,2,c
 13964  0025F6  D00B               	goto	i2l184
 13965                           
 13966                           ;GPS.c: 328: {
 13967                           ;GPS.c: 329: gga_pointers[comma_counter_gga++] = gga_index;
 13968  0025F8  5040               	movf	_comma_counter_gga,w,c
 13969  0025FA  0D01               	mullw	1
 13970  0025FC  0E44               	movlw	low _gga_pointers
 13971  0025FE  24F3               	addwf	prodl,w,c
 13972  002600  6ED9               	movwf	fsr2l,c
 13973  002602  0E01               	movlw	high _gga_pointers
 13974  002604  20F4               	addwfc	prodh,w,c
 13975  002606  6EDA               	movwf	fsr2h,c
 13976  002608  C034  FFDF         	movff	_gga_index,indf2	;volatile
 13977  00260C  2A40               	incf	_comma_counter_gga,f,c
 13978  00260E                     i2l184:
 13979                           
 13980                           ;GPS.c: 330: }
 13981                           ;GPS.c: 331: gga_buffer[gga_index++] = received_char;
 13982  00260E  0E00               	movlw	low _gga_buffer
 13983  002610  2434               	addwf	_gga_index,w,c	;volatile
 13984  002612  6ED9               	movwf	fsr2l,c
 13985  002614  0E02               	movlw	high _gga_buffer
 13986  002616  2035               	addwfc	_gga_index+1,w,c	;volatile
 13987  002618  6EDA               	movwf	fsr2h,c
 13988  00261A  C001  FFDF         	movff	tratamento_uart@received_char,indf2
 13989  00261E  4A34               	infsnz	_gga_index,f,c	;volatile
 13990  002620  2A35               	incf	_gga_index+1,f,c	;volatile
 13991                           
 13992                           ;GPS.c: 332: }
 13993  002622  D01B               	goto	i2l187
 13994  002624                     i2l183:
 13995                           
 13996                           ;GPS.c: 333: else if(gga_code[0] == 'G' && gga_code[1] == 'G' && gga_code[2] == 'A'){
 13997  002624  0E47               	movlw	71
 13998  002626  182D               	xorwf	_gga_code,w,c
 13999  002628  A4D8               	btfss	status,2,c
 14000  00262A  D011               	goto	i2l186
 14001  00262C  0E47               	movlw	71
 14002  00262E  182E               	xorwf	_gga_code+1,w,c
 14003  002630  A4D8               	btfss	status,2,c
 14004  002632  D00D               	goto	i2l186
 14005  002634  0E41               	movlw	65
 14006  002636  182F               	xorwf	_gga_code+2,w,c
 14007  002638  A4D8               	btfss	status,2,c
 14008  00263A  D009               	goto	i2l186
 14009                           
 14010                           ;GPS.c: 334: is_it_gga_string = 1;
 14011  00263C  0E01               	movlw	1
 14012  00263E  6E3E               	movwf	_is_it_gga_string,c	;volatile
 14013                           
 14014                           ;GPS.c: 335: gga_code[0] = 0;
 14015  002640  0E00               	movlw	0
 14016  002642  6E2D               	movwf	_gga_code,c
 14017                           
 14018                           ;GPS.c: 336: gga_code[1] = 0;
 14019  002644  0E00               	movlw	0
 14020  002646  6E2E               	movwf	_gga_code+1,c
 14021                           
 14022                           ;GPS.c: 337: gga_code[2] = 0;
 14023  002648  0E00               	movlw	0
 14024  00264A  6E2F               	movwf	_gga_code+2,c
 14025                           
 14026                           ;GPS.c: 338: }
 14027  00264C  D006               	goto	i2l187
 14028  00264E                     i2l186:
 14029                           
 14030                           ;GPS.c: 339: else{
 14031                           ;GPS.c: 340: gga_code[0] = gga_code[1];
 14032  00264E  C02E  F02D         	movff	_gga_code+1,_gga_code
 14033                           
 14034                           ;GPS.c: 341: gga_code[1] = gga_code[2];
 14035  002652  C02F  F02E         	movff	_gga_code+2,_gga_code+1
 14036                           
 14037                           ;GPS.c: 342: gga_code[2] = received_char;
 14038  002656  C001  F02F         	movff	tratamento_uart@received_char,_gga_code+2
 14039  00265A                     i2l187:
 14040                           
 14041                           ;GPS.c: 343: }
 14042                           ;GPS.c: 345: if(is_it_rmc_string == 1)
 14043  00265A  043D               	decf	_is_it_rmc_string,w,c	;volatile
 14044  00265C  A4D8               	btfss	status,2,c
 14045  00265E  D01A               	goto	i2l188
 14046                           
 14047                           ;GPS.c: 346: {
 14048                           ;GPS.c: 347: if(received_char == ',' )
 14049  002660  0E2C               	movlw	44
 14050  002662  1801               	xorwf	tratamento_uart@received_char,w,c
 14051  002664  A4D8               	btfss	status,2,c
 14052  002666  D00B               	goto	i2l189
 14053                           
 14054                           ;GPS.c: 348: {
 14055                           ;GPS.c: 349: rmc_pointers[comma_counter_rmc++] = rmc_index;
 14056  002668  503F               	movf	_comma_counter_rmc,w,c
 14057  00266A  0D01               	mullw	1
 14058  00266C  0E58               	movlw	low _rmc_pointers
 14059  00266E  24F3               	addwf	prodl,w,c
 14060  002670  6ED9               	movwf	fsr2l,c
 14061  002672  0E01               	movlw	high _rmc_pointers
 14062  002674  20F4               	addwfc	prodh,w,c
 14063  002676  6EDA               	movwf	fsr2h,c
 14064  002678  C032  FFDF         	movff	_rmc_index,indf2	;volatile
 14065  00267C  2A3F               	incf	_comma_counter_rmc,f,c
 14066  00267E                     i2l189:
 14067                           
 14068                           ;GPS.c: 350: }
 14069                           ;GPS.c: 351: rmc_buffer[rmc_index++] = received_char;
 14070  00267E  0E50               	movlw	low _rmc_buffer
 14071  002680  2432               	addwf	_rmc_index,w,c	;volatile
 14072  002682  6ED9               	movwf	fsr2l,c
 14073  002684  0E02               	movlw	high _rmc_buffer
 14074  002686  2033               	addwfc	_rmc_index+1,w,c	;volatile
 14075  002688  6EDA               	movwf	fsr2h,c
 14076  00268A  C001  FFDF         	movff	tratamento_uart@received_char,indf2
 14077  00268E  4A32               	infsnz	_rmc_index,f,c	;volatile
 14078  002690  2A33               	incf	_rmc_index+1,f,c	;volatile
 14079                           
 14080                           ;GPS.c: 352: }
 14081  002692  0012               	return	
 14082  002694                     i2l188:
 14083                           
 14084                           ;GPS.c: 353: else if(rmc_code[0] == 'R' && rmc_code[1] == 'M' && rmc_code[2] == 'C'){
 14085  002694  0E52               	movlw	82
 14086  002696  0100               	movlb	0	; () banked
 14087  002698  19D2               	xorwf	_rmc_code& (0+255),w,b
 14088  00269A  A4D8               	btfss	status,2,c
 14089  00269C  D011               	goto	i2l191
 14090                           
 14091                           ; BSR set to: 0
 14092  00269E  0E4D               	movlw	77
 14093  0026A0  19D3               	xorwf	(_rmc_code+1)& (0+255),w,b
 14094  0026A2  A4D8               	btfss	status,2,c
 14095  0026A4  D00D               	goto	i2l191
 14096                           
 14097                           ; BSR set to: 0
 14098  0026A6  0E43               	movlw	67
 14099  0026A8  19D4               	xorwf	(_rmc_code+2)& (0+255),w,b
 14100  0026AA  A4D8               	btfss	status,2,c
 14101  0026AC  D009               	goto	i2l191
 14102                           
 14103                           ; BSR set to: 0
 14104                           ;GPS.c: 354: is_it_rmc_string = 1;
 14105  0026AE  0E01               	movlw	1
 14106  0026B0  6E3D               	movwf	_is_it_rmc_string,c	;volatile
 14107                           
 14108                           ;GPS.c: 355: rmc_code[0] = 0;
 14109  0026B2  0E00               	movlw	0
 14110  0026B4  6FD2               	movwf	_rmc_code& (0+255),b
 14111                           
 14112                           ;GPS.c: 356: rmc_code[1] = 0;
 14113  0026B6  0E00               	movlw	0
 14114  0026B8  6FD3               	movwf	(_rmc_code+1)& (0+255),b
 14115                           
 14116                           ;GPS.c: 357: rmc_code[2] = 0;
 14117  0026BA  0E00               	movlw	0
 14118  0026BC  6FD4               	movwf	(_rmc_code+2)& (0+255),b
 14119                           
 14120                           ;GPS.c: 358: }
 14121  0026BE  0012               	return	
 14122  0026C0                     i2l191:
 14123                           
 14124                           ; BSR set to: 0
 14125                           ;GPS.c: 359: else{
 14126                           ;GPS.c: 360: rmc_code[0] = rmc_code[1];
 14127  0026C0  C0D3  F0D2         	movff	_rmc_code+1,_rmc_code
 14128                           
 14129                           ;GPS.c: 361: rmc_code[1] = rmc_code[2];
 14130  0026C4  C0D4  F0D3         	movff	_rmc_code+2,_rmc_code+1
 14131                           
 14132                           ;GPS.c: 362: rmc_code[2] = received_char;
 14133  0026C8  C001  F0D4         	movff	tratamento_uart@received_char,_rmc_code+2
 14134                           
 14135                           ; BSR set to: 0
 14136  0026CC  0012               	return	
 14137  0026CE                     __end_of_tratamento_uart:
 14138                           	opt stack 0
 14139                           tosu	equ	0xFFF
 14140                           tosh	equ	0xFFE
 14141                           tosl	equ	0xFFD
 14142                           pclatu	equ	0xFFB
 14143                           pclath	equ	0xFFA
 14144                           pcl	equ	0xFF9
 14145                           tblptru	equ	0xFF8
 14146                           tblptrh	equ	0xFF7
 14147                           tblptrl	equ	0xFF6
 14148                           tablat	equ	0xFF5
 14149                           prodh	equ	0xFF4
 14150                           prodl	equ	0xFF3
 14151                           intcon	equ	0xFF2
 14152                           intcon2	equ	0xFF1
 14153                           intcon3	equ	0xFF0
 14154                           indf0	equ	0xFEF
 14155                           postinc0	equ	0xFEE
 14156                           fsr0h	equ	0xFEA
 14157                           fsr0l	equ	0xFE9
 14158                           wreg	equ	0xFE8
 14159                           indf1	equ	0xFE7
 14160                           postinc1	equ	0xFE6
 14161                           postdec1	equ	0xFE5
 14162                           plusw1	equ	0xFE3
 14163                           fsr1h	equ	0xFE2
 14164                           fsr1l	equ	0xFE1
 14165                           indf2	equ	0xFDF
 14166                           postinc2	equ	0xFDE
 14167                           postdec2	equ	0xFDD
 14168                           plusw2	equ	0xFDB
 14169                           fsr2h	equ	0xFDA
 14170                           fsr2l	equ	0xFD9
 14171                           status	equ	0xFD8
 14172                           
 14173 ;; *************** function _recebe_dado_uart *****************
 14174 ;; Defined at:
 14175 ;;		line 138 in file "bibliotecas/uart.c"
 14176 ;; Parameters:    Size  Location     Type
 14177 ;;		None
 14178 ;; Auto vars:     Size  Location     Type
 14179 ;;		None
 14180 ;; Return value:  Size  Location     Type
 14181 ;;                  1    wreg      unsigned char 
 14182 ;; Registers used:
 14183 ;;		wreg, status,2
 14184 ;; Tracked objects:
 14185 ;;		On entry : 0/0
 14186 ;;		On exit  : 0/0
 14187 ;;		Unchanged: 0/0
 14188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14189 ;;      Params:         0       0       0       0       0       0       0       0       0
 14190 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14191 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14192 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14193 ;;Total ram usage:        0 bytes
 14194 ;; Hardware stack levels used:    1
 14195 ;; This function calls:
 14196 ;;		Nothing
 14197 ;; This function is called by:
 14198 ;;		_isr
 14199 ;;		_recebe_string_uart
 14200 ;; This function uses a non-reentrant model
 14201 ;;
 14202                           
 14203                           	psect	text57
 14204  0033C2                     __ptext57:
 14205                           	opt stack 0
 14206  0033C2                     _recebe_dado_uart:
 14207                           	opt stack 18
 14208                           
 14209                           ;uart.c: 140: while(RCIF==0);
 14210                           
 14211                           ;incstack = 0
 14212  0033C2  AA9E               	btfss	3998,5,c	;volatile
 14213  0033C4  D7FE               	goto	_recebe_dado_uart
 14214                           
 14215                           ;uart.c: 141: if(RCSTAbits.OERR)
 14216  0033C6  A2AB               	btfss	4011,1,c	;volatile
 14217  0033C8  D003               	goto	i2l1164
 14218                           
 14219                           ;uart.c: 142: {
 14220                           ;uart.c: 143: CREN = 0;
 14221  0033CA  98AB               	bcf	4011,4,c	;volatile
 14222                           
 14223                           ;uart.c: 144: __nop();
 14224  0033CC  F000               	nop	
 14225                           
 14226                           ;uart.c: 145: CREN=1;
 14227  0033CE  88AB               	bsf	4011,4,c	;volatile
 14228  0033D0                     i2l1164:
 14229                           
 14230                           ;uart.c: 146: }
 14231                           ;uart.c: 147: return(RCREG);
 14232  0033D0  50AE               	movf	4014,w,c	;volatile
 14233  0033D2  0012               	return	
 14234  0033D4                     __end_of_recebe_dado_uart:
 14235                           	opt stack 0
 14236                           tosu	equ	0xFFF
 14237                           tosh	equ	0xFFE
 14238                           tosl	equ	0xFFD
 14239                           pclatu	equ	0xFFB
 14240                           pclath	equ	0xFFA
 14241                           pcl	equ	0xFF9
 14242                           tblptru	equ	0xFF8
 14243                           tblptrh	equ	0xFF7
 14244                           tblptrl	equ	0xFF6
 14245                           tablat	equ	0xFF5
 14246                           prodh	equ	0xFF4
 14247                           prodl	equ	0xFF3
 14248                           intcon	equ	0xFF2
 14249                           intcon2	equ	0xFF1
 14250                           intcon3	equ	0xFF0
 14251                           indf0	equ	0xFEF
 14252                           postinc0	equ	0xFEE
 14253                           fsr0h	equ	0xFEA
 14254                           fsr0l	equ	0xFE9
 14255                           wreg	equ	0xFE8
 14256                           indf1	equ	0xFE7
 14257                           postinc1	equ	0xFE6
 14258                           postdec1	equ	0xFE5
 14259                           plusw1	equ	0xFE3
 14260                           fsr1h	equ	0xFE2
 14261                           fsr1l	equ	0xFE1
 14262                           indf2	equ	0xFDF
 14263                           postinc2	equ	0xFDE
 14264                           postdec2	equ	0xFDD
 14265                           plusw2	equ	0xFDB
 14266                           fsr2h	equ	0xFDA
 14267                           fsr2l	equ	0xFD9
 14268                           status	equ	0xFD8
 14269                           tosu	equ	0xFFF
 14270                           tosh	equ	0xFFE
 14271                           tosl	equ	0xFFD
 14272                           pclatu	equ	0xFFB
 14273                           pclath	equ	0xFFA
 14274                           pcl	equ	0xFF9
 14275                           tblptru	equ	0xFF8
 14276                           tblptrh	equ	0xFF7
 14277                           tblptrl	equ	0xFF6
 14278                           tablat	equ	0xFF5
 14279                           prodh	equ	0xFF4
 14280                           prodl	equ	0xFF3
 14281                           intcon	equ	0xFF2
 14282                           intcon2	equ	0xFF1
 14283                           intcon3	equ	0xFF0
 14284                           indf0	equ	0xFEF
 14285                           postinc0	equ	0xFEE
 14286                           fsr0h	equ	0xFEA
 14287                           fsr0l	equ	0xFE9
 14288                           wreg	equ	0xFE8
 14289                           indf1	equ	0xFE7
 14290                           postinc1	equ	0xFE6
 14291                           postdec1	equ	0xFE5
 14292                           plusw1	equ	0xFE3
 14293                           fsr1h	equ	0xFE2
 14294                           fsr1l	equ	0xFE1
 14295                           indf2	equ	0xFDF
 14296                           postinc2	equ	0xFDE
 14297                           postdec2	equ	0xFDD
 14298                           plusw2	equ	0xFDB
 14299                           fsr2h	equ	0xFDA
 14300                           fsr2l	equ	0xFD9
 14301                           status	equ	0xFD8
 14302                           
 14303                           	psect	text58
 14304  000000                     __ptext58:
 14305                           	opt stack 0
 14306                           tosu	equ	0xFFF
 14307                           tosh	equ	0xFFE
 14308                           tosl	equ	0xFFD
 14309                           pclatu	equ	0xFFB
 14310                           pclath	equ	0xFFA
 14311                           pcl	equ	0xFF9
 14312                           tblptru	equ	0xFF8
 14313                           tblptrh	equ	0xFF7
 14314                           tblptrl	equ	0xFF6
 14315                           tablat	equ	0xFF5
 14316                           prodh	equ	0xFF4
 14317                           prodl	equ	0xFF3
 14318                           intcon	equ	0xFF2
 14319                           intcon2	equ	0xFF1
 14320                           intcon3	equ	0xFF0
 14321                           indf0	equ	0xFEF
 14322                           postinc0	equ	0xFEE
 14323                           fsr0h	equ	0xFEA
 14324                           fsr0l	equ	0xFE9
 14325                           wreg	equ	0xFE8
 14326                           indf1	equ	0xFE7
 14327                           postinc1	equ	0xFE6
 14328                           postdec1	equ	0xFE5
 14329                           plusw1	equ	0xFE3
 14330                           fsr1h	equ	0xFE2
 14331                           fsr1l	equ	0xFE1
 14332                           indf2	equ	0xFDF
 14333                           postinc2	equ	0xFDE
 14334                           postdec2	equ	0xFDD
 14335                           plusw2	equ	0xFDB
 14336                           fsr2h	equ	0xFDA
 14337                           fsr2l	equ	0xFD9
 14338                           status	equ	0xFD8
 14339                           
 14340                           	psect	rparam
 14341  0000                     tosu	equ	0xFFF
 14342                           tosh	equ	0xFFE
 14343                           tosl	equ	0xFFD
 14344                           pclatu	equ	0xFFB
 14345                           pclath	equ	0xFFA
 14346                           pcl	equ	0xFF9
 14347                           tblptru	equ	0xFF8
 14348                           tblptrh	equ	0xFF7
 14349                           tblptrl	equ	0xFF6
 14350                           tablat	equ	0xFF5
 14351                           prodh	equ	0xFF4
 14352                           prodl	equ	0xFF3
 14353                           intcon	equ	0xFF2
 14354                           intcon2	equ	0xFF1
 14355                           intcon3	equ	0xFF0
 14356                           indf0	equ	0xFEF
 14357                           postinc0	equ	0xFEE
 14358                           fsr0h	equ	0xFEA
 14359                           fsr0l	equ	0xFE9
 14360                           wreg	equ	0xFE8
 14361                           indf1	equ	0xFE7
 14362                           postinc1	equ	0xFE6
 14363                           postdec1	equ	0xFE5
 14364                           plusw1	equ	0xFE3
 14365                           fsr1h	equ	0xFE2
 14366                           fsr1l	equ	0xFE1
 14367                           indf2	equ	0xFDF
 14368                           postinc2	equ	0xFDE
 14369                           postdec2	equ	0xFDD
 14370                           plusw2	equ	0xFDB
 14371                           fsr2h	equ	0xFDA
 14372                           fsr2l	equ	0xFD9
 14373                           status	equ	0xFD8
 14374                           
 14375                           	psect	temp
 14376  000046                     btemp:
 14377                           	opt stack 0
 14378  000046                     	ds	1
 14379  0000                     int$flags	set	btemp
 14380  0000                     wtemp6	set	btemp+1
 14381                           tosu	equ	0xFFF
 14382                           tosh	equ	0xFFE
 14383                           tosl	equ	0xFFD
 14384                           pclatu	equ	0xFFB
 14385                           pclath	equ	0xFFA
 14386                           pcl	equ	0xFF9
 14387                           tblptru	equ	0xFF8
 14388                           tblptrh	equ	0xFF7
 14389                           tblptrl	equ	0xFF6
 14390                           tablat	equ	0xFF5
 14391                           prodh	equ	0xFF4
 14392                           prodl	equ	0xFF3
 14393                           intcon	equ	0xFF2
 14394                           intcon2	equ	0xFF1
 14395                           intcon3	equ	0xFF0
 14396                           indf0	equ	0xFEF
 14397                           postinc0	equ	0xFEE
 14398                           fsr0h	equ	0xFEA
 14399                           fsr0l	equ	0xFE9
 14400                           wreg	equ	0xFE8
 14401                           indf1	equ	0xFE7
 14402                           postinc1	equ	0xFE6
 14403                           postdec1	equ	0xFE5
 14404                           plusw1	equ	0xFE3
 14405                           fsr1h	equ	0xFE2
 14406                           fsr1l	equ	0xFE1
 14407                           indf2	equ	0xFDF
 14408                           postinc2	equ	0xFDE
 14409                           postdec2	equ	0xFDD
 14410                           plusw2	equ	0xFDB
 14411                           fsr2h	equ	0xFDA
 14412                           fsr2l	equ	0xFD9
 14413                           status	equ	0xFD8


Data Sizes:
    Strings     325
    Constant    223
    Data        29
    BSS         871
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      69
    BANK0           160    114     121
    BANK1           256     45     251
    BANK2           256     63     213
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    pf_readdir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    pf_opendir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    pf_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK1[2]), 

    pf_write@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    pf_write@buff	PTR const void  size(2) Largest target is 6
		 -> STR_4(CODE[6]), 

    pf_write@p	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_4(CODE[6]), 

    pf_read$2169	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), data_buffer_32(BANK1[32]), 

    pf_read@br	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@br(BANK1[2]), 

    pf_read@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    pf_read@buff	PTR void  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_read@rbuff	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> fileName(BANK1[15]), 

    pf_open@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    pf_mount@fs	PTR struct . size(2) Largest target is 42
		 -> SDCard@fs(BANK1[42]), 

    check_fs@buf	PTR unsigned char  size(2) Largest target is 36
		 -> pf_mount@buf(BANK0[36]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK2[32]), 

    follow_path@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    follow_path@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK2[16]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> fileName(BANK1[15]), 

    get_fileinfo@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 15
		 -> fileName(BANK1[15]), 

    create_name@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    create_name@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK2[16]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    dir_read@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    dir_find@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK2[32]), 

    dir_find@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK2[16]), 

    dir_next@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    dir_next@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK2[16]), 

    dir_next@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    S1856$fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    dir_rewind@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    dir_rewind@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK2[16]), 

    dir_rewind@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    get_clust@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK2[32]), 

    get_clust@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    FatFs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    get_fat@fs	PTR struct . size(2) Largest target is 42
		 -> NULL(NULL[0]), SDCard@fs(BANK1[42]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK2[32]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK2[32]), 

    mem_set@dst	PTR void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK2[12]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 17
		 -> STR_32(CODE[11]), STR_31(CODE[8]), STR_30(CODE[9]), escreve_inteiro_lcd@texto(BANK0[7]), 
		 -> STR_29(CODE[3]), STR_28(CODE[8]), STR_27(CODE[14]), STR_26(CODE[13]), 
		 -> STR_25(CODE[9]), STR_24(CODE[14]), STR_23(CODE[7]), STR_22(CODE[7]), 
		 -> STR_21(CODE[10]), STR_20(CODE[14]), leitura_chave@pos_ignicao_on(COMRAM[17]), leitura_chave@pos_ignicao_crank(COMRAM[17]), 
		 -> leitura_chave@pos_ignicao_off(COMRAM[17]), STR_19(CODE[17]), STR_18(CODE[12]), STR_17(CODE[14]), 
		 -> STR_16(CODE[13]), STR_15(CODE[6]), STR_14(CODE[16]), STR_13(CODE[14]), 
		 -> STR_12(CODE[6]), STR_11(CODE[14]), STR_10(CODE[14]), STR_9(CODE[11]), 
		 -> STR_8(CODE[8]), STR_7(CODE[14]), STR_6(CODE[13]), STR_5(CODE[11]), 
		 -> STR_3(CODE[17]), mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    disk_writep@wr	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), STR_4(CODE[6]), 

    disk_readp@rd	PTR unsigned char  size(2) Largest target is 36
		 -> pf_readdir@dir(COMRAM[32]), pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK2[32]), pf_mount@buf(BANK0[36]), 
		 -> NULL(NULL[0]), get_fat@buf(BANK0[4]), data_buffer_32(BANK1[32]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> SDCard(), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _disk_writep->_command
    _pf_read->_disk_readp
    _follow_path->_create_name
    _dir_find->_disk_readp
    _dir_rewind->_clust2sect
    _get_fat->_disk_readp
    _clust2sect->___lmul
    _create_name->_mem_set
    _pf_mount->_disk_readp
    _disk_initialize->_reset
    _reset->_command
    _escreve_cmd_lcd->_delay
    _check_fs->_disk_readp
    _disk_readp->_command
    _response->_recebe_dado_SPI
    _proceed->_escreve_dado_SPI
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _dummy_clocks->_escreve_dado_SPI
    _command->_escreve_dado_SPI
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _main->_escalonador
    _escalonador->_SDCard
    _SDCard->_pf_open
    _pf_write->_get_fat
    _pf_read->_get_fat
    _pf_open->_follow_path
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_rewind->_clust2sect
    _dir_next->_get_fat
    _get_fat->_disk_readp
    _pf_mount->_check_fs
    _check_fs->_disk_readp
    _escreve_inteiro_lcd->_itoa

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _escalonador->_SDCard

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _SDCard->_pf_open

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  199991
                        _escalonador
                    _inicializa_shrc
                 _inicializa_tarefas
                      _init_hardware
                           _init_lcd
             _leitura_chaves_sistema
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    8083
                                             31 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _leitura_chaves_sistema                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_shrc                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  191100
                                            111 BANK0      3     3      0
                             _SDCard *
 ---------------------------------------------------------------------------------
 (2) _SDCard                                              47    47      0  190877
                                            109 BANK0      2     2      0
                                              0 BANK1     45    45      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                           _pf_mount
                            _pf_open
                            _pf_read
                           _pf_write
                 _posicao_cursor_lcd
                            _proceed
                           _readover
 ---------------------------------------------------------------------------------
 (3) _readover                                             2     0      2      98
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _pf_write                                            33    27      6   32303
                                             52 BANK0     33    27      6
                         _clust2sect
                        _disk_writep
              _escreve_frase_ram_lcd
                            _get_fat
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (4) _disk_writep                                         17    10      7    3835
                                             34 COMRAM     7     0      7
                                              0 BANK0      9     9      0
                            _command
                       _dummy_clocks
                   _escreve_dado_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (3) _pf_read                                             36    30      6   44209
                                             52 BANK0     36    30      6
                         _clust2sect
                         _disk_readp
              _escreve_frase_ram_lcd
                            _get_fat
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _pf_open                                             87    85      2   46266
                                             85 BANK0     24    22      2
                                              0 BANK2     63    63      0
                        _follow_path
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _follow_path                                          8     2      6   44893
                                             77 BANK0      8     2      6
                        _create_name
                           _dir_find
                         _dir_rewind
                          _get_clust
 ---------------------------------------------------------------------------------
 (4) _get_clust                                           18    14      4     471
                                             25 COMRAM    18    14      4
 ---------------------------------------------------------------------------------
 (5) _dir_find                                             8     4      4   39323
                                             69 BANK0      8     4      4
                           _dir_next
                         _dir_rewind
                         _disk_readp
                            _mem_cmp
 ---------------------------------------------------------------------------------
 (6) _mem_cmp                                             15     9      6     468
                                             25 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (5) _dir_rewind                                          16    14      2    2323
                                              5 BANK0     16    14      2
                         _clust2sect
 ---------------------------------------------------------------------------------
 (6) _dir_next                                            17    15      2   19923
                                             52 BANK0     17    15      2
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             40    36      4   17541
                                             12 BANK0     40    36      4
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     7      4    1483
                                             37 COMRAM     6     2      4
                                              0 BANK0      5     5      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _create_name                                         20    16      4    1682
                                             33 COMRAM    11     7      4
                                              0 BANK0      9     9      0
                            _mem_set
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6     400
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _pf_mount                                            77    75      2   50854
                                             22 BANK0     77    75      2
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                         _disk_readp
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     10    10      0   14031
                                             41 COMRAM     2     2      0
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                              _reset
                           _response
 ---------------------------------------------------------------------------------
 (5) _reset                                                7     7      0    2886
                                             34 COMRAM     7     7      0
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   16681
                                             12 BANK0     10     4      6
                         _disk_readp
 ---------------------------------------------------------------------------------
 (5) _disk_readp                                          25    15     10   15949
                                             34 COMRAM    10     0     10
                                              0 BANK0     12    12      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (6) _response                                             1     1      0     102
                                             28 COMRAM     1     1      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (7) _recebe_dado_SPI                                      3     3      0      68
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _proceed                                              0     0      0     102
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    3927
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (6) _dummy_clocks                                         5     5      0     170
                                             27 COMRAM     5     5      0
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (6) _command                                              7     2      5    2404
                                             27 COMRAM     7     2      5
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (4) _escreve_dado_SPI                                     2     2      0     102
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     872
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     868
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                  9     7      2    8311
                                              6 BANK0      9     7      2
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 8     2      6    4232
                                             41 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     3      6    3459
                                             32 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4    1280
                                             25 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4    1469
                                             25 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    3599
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _isr                                                21    21      0     337
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                    _tratamento_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (13) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (13) _tratamento_uart                                     1     1      0     154
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _escalonador
     _SDCard *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _pf_mount
         ___lldiv
         ___lmul
         _check_fs
           _disk_readp
             _command
               _escreve_dado_SPI
             _dummy_clocks
               _escreve_dado_SPI
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _escreve_dado_SPI
             _response
               _recebe_dado_SPI
         _disk_initialize
           _command
             _escreve_dado_SPI
           _dummy_clocks
             _escreve_dado_SPI
           _escreve_cmd_lcd
             _delay
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _escreve_dado_SPI
           _reset
             _command
               _escreve_dado_SPI
             _dummy_clocks
               _escreve_dado_SPI
             _proceed
               _escreve_dado_SPI
             _response
               _recebe_dado_SPI
           _response
             _recebe_dado_SPI
         _disk_readp
           _command
             _escreve_dado_SPI
           _dummy_clocks
             _escreve_dado_SPI
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _escreve_dado_SPI
           _response
             _recebe_dado_SPI
       _pf_open
         _follow_path
           _create_name
             _mem_set
           _dir_find
             _dir_next
               _clust2sect
                 ___lmul
               _get_fat
                 _disk_readp
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
             _dir_rewind
               _clust2sect
                 ___lmul
             _disk_readp
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
             _mem_cmp
           _dir_rewind
             _clust2sect
               ___lmul
           _get_clust
         _get_clust
       _pf_read
         _clust2sect
           ___lmul
         _disk_readp
           _command
             _escreve_dado_SPI
           _dummy_clocks
             _escreve_dado_SPI
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _escreve_dado_SPI
           _response
             _recebe_dado_SPI
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _get_fat
           _disk_readp
             _command
               _escreve_dado_SPI
             _dummy_clocks
               _escreve_dado_SPI
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _escreve_dado_SPI
             _response
               _recebe_dado_SPI
         _posicao_cursor_lcd
           _endereco_cursor_lcd
             _delay
       _pf_write
         _clust2sect
           ___lmul
         _disk_writep
           _command
             _escreve_dado_SPI
           _dummy_clocks
             _escreve_dado_SPI
           _escreve_dado_SPI
           _proceed
             _escreve_dado_SPI
           _response
             _recebe_dado_SPI
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _get_fat
           _disk_readp
             _command
               _escreve_dado_SPI
             _dummy_clocks
               _escreve_dado_SPI
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _escreve_dado_SPI
             _response
               _recebe_dado_SPI
         _posicao_cursor_lcd
           _endereco_cursor_lcd
             _delay
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _proceed
         _escreve_dado_SPI
       _readover
   _inicializa_shrc
   _inicializa_tarefas
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _leitura_chaves_sistema
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   _tratamento_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     200      21       25.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     3F      D5       9       83.2%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2D      FB       7       98.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     72      79       5       75.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     28E      20        0.0%
DATA                 0      0     48E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 11 15:39:45 2022

       __end_of_mensagem_inicial 2CCA                      get_fat@clst 006C  
                              _s 003B                     create_name@c 0068  
                   create_name@d 0060                     create_name@i 0067  
                   create_name@p 0061                      _SSPSTATbits 000FC7  
               ??_init_interrupt 001A                               l81 29FC  
                             l79 296A                               l87 32A2  
                             l88 32B0     __size_of_escreve_inteiro_lcd 003E  
                    __CFG_BOR$ON 000000                               _rd 00D7  
                  pf_mount@bsect 00BA                      __CFG_BORV$3 000000  
                  pf_mount@mclst 00B6                    pf_mount@fsize 00BE  
                   ?_escalonador 0001                    create_name@dj 0022  
                  pf_mount@tsect 00B2                    create_name@ni 0063  
                  create_name@si 0064                 ?_inicializa_shrc 0001  
                            l301 1ABA                              l311 1B3A  
                            l312 1B38                              l304 1AEC  
                            l340 3104                              l500 1892  
                            l316 1B6E                              l308 1B20  
                            l341 30D4                              l342 30DC  
                            l510 1362                              l318 1B70  
                            l343 30DE                              l512 1394  
                            l600 2B9C                              l281 31BE  
                            l513 137C                              l601 2BA4  
                            l282 31B0                              l610 2F1C  
                            l522 146A                              l602 2BA6  
                            l611 2F24                              l531 14F4  
                            l523 1456                              l507 141C  
                            l515 13DE                              l620 2F5A  
                            l612 2F26                              l348 2FC2  
                            l532 14DC                              l508 1336  
                            l621 2F62                              l613 2F2E  
                            l349 2F7E                              l541 15B0  
                            l525 14B4                              l517 13FA  
                            l293 1B22                              l622 2F64  
                            l614 2F30                              l630 2EB2  
                            l534 1536                              l518 13F6  
                            l550 203C                              l294 1AEE  
                            l615 2F44                              l631 2EC0  
                            l543 15E8                              l535 1506  
                            l295 1A0C                              l640 2DD0  
                            l616 2F46                              l632 2ECE  
                            l544 15D4                              l552 2086  
                            l641 2DD2                              l617 2F4E  
                            l609 2F1A                              l633 2EDC  
                            l545 15D0                              l537 1560  
                            l297 1A28                              l650 2E0E  
                            l642 2DDA                              l618 2F50  
                            l626 2F02                              l538 1548  
                            l554 20BE                              l651 2E10  
                            l643 2DDC                              l619 2F58  
                            l627 2EE2                              l547 15FE  
                            l555 20C4                              l299 1A2A  
                            l652 2E18                              l644 2DE4  
                            l628 2EA6                              l476 2CDA  
                            l556 211A                              l653 2E1A  
                            l645 2DE6                              l629 2EFE  
                            l477 2CFE                              l493 1786  
                            l485 1690                              l901 2346  
                            l646 2DFA                              l638 2DC6  
                            l590 2B5E                              l647 2DFC  
                            l639 2DC8                              l671 30A0  
                            l591 2B66                              l487 1818  
                            l911 1C30                              l903 236A  
                            l648 2E04                              l672 3078  
                            l592 2B68                              l488 16F0  
                            l577 32EE                              l649 2E06  
                            l593 2B70                              l489 1720  
                            l594 2B72                              l914 1D30  
                            l906 1BD2                              l579 32FC  
                            l595 2B86                              l587 2B52  
                            l499 1858                              l915 1CBE  
                            l596 2B88                              l588 2B54  
                            l916 1CE2                              l924 2772  
                            l597 2B90                              l589 2B5C  
                            l941 217A                              l925 27B2  
                            l598 2B92                              l854 2E40  
                            l599 2B9A                              l847 32D0  
                            l919 26E8                              l848 32C0  
                            l872 0CBE                              l945 221E  
                            l865 0ECE                              l954 21F6  
                            l946 21C8                              l874 0CDE  
                            l866 0B66                              l883 28F6  
                            l867 0BFC                              l956 2206  
                            l876 0CFC                              l980 25BC  
                            l972 24B8                              l869 0EEA  
                            l877 0D0A                              l893 22C8  
                            l973 24B2                              l990 1E28  
                            l991 1E98                              l879 0DB0  
                            l887 2840                              l983 2590  
                            l975 24DE                              l976 2520  
                            l897 2300                              l994 002A  
                            l987 1D7A                              l989 1DB8  
                            l997 0096                              l999 0130  
                            _PCL 000FF9                              _PR2 000FCB  
                    get_clust@fs 0026                              _E_W 0041  
               ??_init_oscilador 001A                              _n_s 0042  
                            _isr 0008                ??_tratamento_uart 0001  
                            _txt 0130                              prod 000FF3  
                            tosl 000FFD                              wreg 000FE8  
                   __CFG_FOSC$HS 000000                     disk_readp@rd 0023  
                 create_name@cvt 605B        __size_of_write_timer_zero 0012  
                 create_name@sfn 0065                     __CFG_LVP$OFF 000000  
        ??_escreve_frase_ram_lcd 001F                     __CFG_WDT$OFF 000000  
                           l1000 013C                             l1001 0146  
                           l1002 017C                             l1003 021C  
                           l1012 05A0                             l1004 036A  
                           l1005 0464                             l1006 048C  
                           l1030 1104                             l1007 04A2  
                           l1015 1EB2                             l1031 1092  
                           l1023 0F42                             l1008 04AC  
                           l1040 125E                             l1032 10C2  
                           l1009 0550                             l1017 1EF6  
                           l1033 10E8                             l1025 0F56  
                           l1018 1F04                             l1034 1156  
                           l1050 071E                             l1027 1298  
                           l1035 11D6                             l1028 0FE2  
                           l1060 0996                             l1044 0674  
                           l1037 11E8                             l1029 118A  
                           l1061 09F4                             l1053 07AA  
                           l1062 0A42                             l1054 09A8  
                           l1046 0688                             l1223 2FDE  
                           l1039 11F0                             l1063 0AF8  
                           l1055 08C8                             l1047 06F2  
                           l1224 2FF2                             l1064 0AE6  
                           l1056 0856                             l1048 06DC  
                           l1057 0886                             l1058 08AC  
                           l1059 091A                             l1631 3134  
                           l1722 3062                             l1723 306C  
                           l1635 2A08                             l1732 3180  
                           l1733 318A                             l1637 2A42  
                           l1718 3042                             l1638 2A80  
                           l1670 2C3E                             l1719 303A  
                           l1728 3168                             l1729 3160  
                           l1665 2BFC                             l1666 2BF0  
                           l1669 2C30                             l7142 32F4  
                           l7136 32E6                             l7440 14DC  
                           l8072 207A                             l8400 08AC  
                           ?_isr 0001                             l7446 1506  
                           l8190 1E98                             l8182 1E28  
                           l8270 048C                             l8264 0464  
                           l8512 10E8                             l7654 1CBE  
                           l7576 32C0                             l7768 2D1E  
                           l7970 1742                             l8668 2962  
                           l7990 17A8            _escreve_caractere_lcd 2DB6  
                           STR_1 623E                             STR_2 627D  
                           STR_3 614B                             STR_4 6273  
                           STR_5 6217                             STR_6 61E8  
                           STR_7 61B2                             STR_8 6257  
                           STR_9 620C                   timer_dois@flag 0038  
                           _BRGH 007D62                             _T0IF 007F92  
                           _CREN 007D5C                             _LATB 000F8A  
                           _PIE1 000F9D                             u5050 2C00  
                           u8020 0DF2                             _RCIF 007CF5  
                           u8005 0CEA                             u8025 0DE8  
                           u9100 049E                             u8140 1BCE  
                           u8060 2E50                             u8230 3046  
                           u8070 2E8E                             i2l71 2450  
                           i2l72 2464                             u8400 2D1E  
                           i2l65 23EA                             i2l66 245C  
                           u7450 3302                             u8090 22C4  
                           i2l67 2402                             u8260 316C  
                           i2l69 2430                             u7470 2F92  
                           u9135 05D4                             u9080 0476  
                           u8520 27C8                             u9065 0382  
                           u8185 1C3C                             u7810 14C2  
                           u9170 1F00                             u8435 2832  
                           u7484 2F9C                             u8380 2BC8  
                           u8460 274E                             u9420 103C  
                           u9181 321A                             u7485 2F98  
                           u7478 2F94                             u8710 1742  
                           u8630 225A                             u8470 2750  
                           u9270 0800                     get_clust@dir 001A  
                           u7735 12DA                             u8631 2256  
                           u8455 2726                             u7680 3098  
                           u8640 225C                             u8560 21AE  
                           u7920 0B34                             u9425 1032  
                           u7690 30C0                             u7850 156C  
                           u8730 17A8                             u7930 0B54  
                           u8810 20CC                             u9275 07F6  
                           u9620 2C5E                             u7950 0BA4  
                           u9630 2C76                             u7687 308E  
                           u8920 1DB4                             u9608 29BA  
                           u7697 30B6                             u7945 0B90  
                           u9609 29CE                             u7795 142E  
                           u8775 200E                             _TMR2 000FCC  
                           _SPEN 007D5F                             _TRMT 007D61  
                           _TXEN 007D65                             _SYNC 007D64  
                           _dado 003A                             _flag 00D5  
                           _main 328A                             _itoa 310E  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           indf0 000FEF                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 0046  
                           _utoa 2A00                             prodh 000FF4  
                           prodl 000FF3     tratamento_uart@received_char 0001  
                           start 000E                    __CFG_IESO$OFF 000000  
                  disk_readp@arr 02D5                    disk_readp@ptr 0064  
                   disk_writep@i 0064                     disk_writep@j 0066  
                  __CFG_MCLRE$ON 000000                     ?_follow_path 00AD  
                   ___param_bank 000000                  create_name@path 0024  
                          ??_isr 0005         __size_of_recebe_dado_SPI 005C  
                  __CFG_PLLDIV$5 000000                            ?_main 0001  
                          ?_itoa 0060                            _EEADR 000FA9  
                          STR_10 6196                            STR_11 61A4  
                          STR_12 61E2                            STR_20 6188  
                          STR_13 6196                            STR_21 6222  
                          STR_22 6266                            STR_30 622C  
                          STR_14 615C                            STR_15 626D  
                          STR_23 625F                            STR_31 6247  
                          STR_32 6201                            STR_16 61DB  
                          STR_24 617A                            STR_33 6279  
                          STR_25 6235                            STR_17 61C0  
                          STR_18 61F5                            STR_26 61CE  
                          STR_27 616C                            STR_19 613A  
                          STR_28 624F                            STR_29 627C  
                __end_of___lldiv 2C50                            ?_utoa 0021  
                          _T0CON 000FD5                            u10707 19A4  
                          u10717 19FC                            u10807 1862  
                          u10727 2056                            _T2CON 000FCA  
                          u10817 18DC                            u10737 20E8  
                          u10657 2CB6                            u10907 2FAE  
                          u10827 2D36                            u10747 165A  
                          u10667 2AC6                            u10917 2FB4  
                          u10837 1304                            u10757 16BE  
                          u10677 2AE2                            u10927 2FBC  
                          u10847 1350                            u10767 16DC  
                          u10687 2AFE                            u10937 319C  
                          u10857 13AC                            u10777 17D4  
                          u10697 1982                            u10947 30E6  
                          u10867 1482                            u10787 180A  
                          u10957 30EE                            u10877 1584  
                          u10797 184C                            u10967 30F6  
                          u10887 160A                            u10977 30FE  
                          u10897 2FA6                   _data_buffer_32 017B  
                __end_of___lwdiv 3076                  __end_of___lwmod 3194  
__size_of_leitura_chaves_sistema 003C                            i2l182 25EA  
                          i2l191 26C0                            i2l183 2624  
                          i2l184 260E                            i2l186 264E  
                          i2l187 265A                            i2l188 2694  
                          i2l189 267E                            _RCREG 000FAE  
                          _RCSTA 000FAB                    get_clust@clst 0028  
                          _TMR0H 000FD7                            _TMR0L 000FD6  
                          _SPBRG 000FAF                    __CFG_USBDIV$1 000000  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                            _TXREG 000FAD  
                          _TXSTA 000FAC                            _FatFs 0030  
         __end_ofcreate_name@cvt 60DB                    __CFG_PWRT$OFF 000000  
            ___lmul@multiplicand 001E       __size_of_config_timer_dois 000C  
                 __CFG_FCMEN$OFF 000000       __size_of_config_timer_zero 001A  
                __end_of_get_fat 0EFE                  __end_of_command 3210  
                          _delay 32E2                  __end_of_mem_cmp 2E98  
                __end_of_dpowers 613A                  __end_of_mem_set 32E2  
                __end_of_pf_read 12BA                  __end_of_pf_open 1FEC  
       __size_of_escreve_cmd_lcd 008C                            _reset 2CCA  
                          pclath 000FFA                            tablat 000FF5  
                __end_of_proceed 3404                            plusw1 000FE3  
                          plusw2 000FDB                            utoa@c 0029  
                          utoa@v 0027                            status 000FD8  
   escreve_dado_SPI@data_to_shrc 001B                            wtemp6 0047  
                 disk_readp@buff 0069                    disk_writep@sc 0026  
                  disk_writep@wr 0023                  __initialization 2D44  
            disk_initialize@buff 0067              disk_initialize@stat 0064  
                   __end_of_main 32B6                     clust2sect@fs 002A  
                   __end_of_itoa 3152                     __end_of_utoa 2AA4  
             _inicializa_tarefas 3306                  escalonador@cont 00D1  
                         ??_main 002D                           ??_itoa 002A  
            disk_readp@start_add 0065                           ??_utoa 0027  
                  __activetblptr 000002              ?_inicializa_tarefas 0001  
                __CFG_CCP2MX$OFF 000000                           ?_delay 0001  
         ?_escreve_caractere_lcd 0001                           _ADCON1 000FC1  
                         _EEDATA 000FA8                           _EECON2 000FA7  
                         ?_reset 0001                           _INT0IE 007F94  
                         _INT0IF 007F91                    ?_dummy_clocks 0001  
                         i2l1164 33D0                           _PCLATH 000FFA  
                         _INTCON 000FF2                           i2l6454 23FA  
                         _TMR0IF 007F92                           _TMR2IF 007CF1  
                         _SDCard 190A         __end_of_recebe_dado_uart 33D4  
                         _SPPCFG 000F63                           _SPPCON 000F65  
               _is_it_gga_string 003E                           _SSPBUF 000FC9  
         _leitura_chaves_sistema 324E                 __end_of_check_fs 1E9C  
           ??_inicializa_tarefas 001A             __size_of_create_name 0136  
       __size_of_disk_initialize 02EE       __end_of_posicao_cursor_lcd 2F08  
               __end_of_dir_find 27CE                 __end_of_dir_next 1D44  
         __size_of_init_hardware 0016                           _Result 003C  
                         ___lmul 2FCE                   __CFG_STVREN$ON 000000  
           __size_of_disk_writep 0140                        ??___lldiv 0022  
                      ??___lwdiv 001E                        ??___lwmod 001E  
                         _folder 0100                           _estado 0039  
               __end_of_init_lcd 2B42                           clear_0 2D6C  
                         clear_1 2D7E                           clear_2 2D8A  
                         clear_3 2D96                           clear_4 2DA2  
               __end_of_pf_mount 0646                 __end_of_readover 340E  
               __end_of_pf_write 0B1A                      pf_read@buff 0094  
                    pf_read@clst 00AF                      pf_read@sect 00A7  
                    pf_read@rcnt 00B4                        ??_get_fat 0070  
                      ??_command 0021                        ??_mem_cmp 0020  
                      ??_mem_set 0020                           itoa@cp 002A  
                      ??_pf_read 009A                        ??_pf_open 00B7  
           __size_of_escalonador 00A4                ??_recebe_dado_SPI 001A  
       __end_of_escreve_dado_SPI 310E                 __end_of_response 33F8  
                   __mediumconst 605A                           reset@i 0025  
          write_timer_zero@timer 001C                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                      ??_proceed 001C                 _write_timer_zero 339E  
                    pf_open@path 00B5        escreve_caractere_lcd@data 001C  
                 ??_dummy_clocks 001C              _escreve_inteiro_lcd 3210  
                     __accesstop 0060          __end_of__initialization 2DA8  
                __CFG_PBADEN$OFF 000000                      pf_mount@buf 008E  
                    pf_mount@fmt 00C2                  disk_readp@count 002B  
                  ___rparam_used 000001                ??_escreve_cmd_lcd 001C  
                 __pcstackCOMRAM 0001                  _tratamento_uart 25C0  
    __end_of_endereco_cursor_lcd 2F72                     __pidataBANK1 3326  
              ?_mensagem_inicial 0001                    __end_of_delay 3306  
           __size_of_follow_path 0110             ?_escreve_inteiro_lcd 0066  
                  __end_of_reset 2D44               ??_mensagem_inicial 0020  
                    pf_write@btw 0096               _tarefa_em_execucao 0043  
     __end_ofi2_write_timer_zero 33C2                    _init_hardware 3376  
             __size_of_get_clust 00C8                          ??_delay 001A  
                        ??_reset 0023                 _is_it_rmc_string 003D  
   mensagem_inicial@msg_linha_um 0060                       __pbssBANK0 00D2  
                     __pbssBANK1 0100                       __pbssBANK2 0200  
                 pf_write@remain 00A8   __size_of_escreve_frase_ram_lcd 0052  
  __end_of_escreve_frase_ram_lcd 30C8                          ?_SDCard 0001  
      escreve_inteiro_uart@F3956 01DE                       _gga_buffer 0200  
                        ?___lmul 001A            mensagem_inicial@F4011 610E  
          mensagem_inicial@F4009 611F            ??_escreve_inteiro_lcd 002C  
              ??_disk_initialize 002A                   ___lmul@product 0022  
                   _gga_pointers 0144                       _dir_rewind 2262  
                        _INTCON2 000FF1                          _INTCON3 000FF0  
                 ?_init_hardware 0001                        ?_check_fs 006C  
                     _disk_readp 12BA                   follow_path@dir 00AF  
                 follow_path@res 00B4                        ?_dir_find 00A5  
                      ?_dir_next 0094                          _SSPCON1 000FC6  
       __size_of_inicializa_shrc 000C                          _SSPSTAT 000FC7  
                     _clust2sect 2896                  __CFG_VREGEN$OFF 000000  
                      ?_init_lcd 0001                  __size_of_SDCard 027E  
        __end_of_tratamento_uart 26CE                        ?_pf_mount 0076  
                      ?_readover 001A                        ?_pf_write 0094  
                        __Hparam 0000                          __Lparam 0000  
                _dir_rewind$1975 006B                __end_of_get_clust 2896  
                      ?_response 0001                  __size_of___lmul 0056  
                        ___lldiv 2BCE                          ___lwdiv 3024  
                        ___lwmod 3152             __end_of_dummy_clocks 31D2  
                        __pcinit 2D44                       _init_ports 335E  
                        __ramtop 0800                     _get_fat$1915 0086  
                        __ptext0 328A                          __ptext1 2C50  
                        __ptext2 324E                          __ptext3 2AA4  
                        __ptext4 3376                          __ptext5 335E  
                        __ptext6 340E                          __ptext7 338C  
                        __ptext8 3344                          __ptext9 339E  
                        _get_fat 0B1A                          _command 31D2  
                      _T0CONbits 000FD5                          _mem_cmp 2E28  
        i2write_timer_zero@timer 0003      endereco_cursor_lcd@endereco 001C  
                        _dpowers 6130                          _mem_set 32B6  
                        _pf_read 0EFE                     __size_of_isr 24A8  
        ??_escreve_caractere_lcd 001C                          _pf_open 1E9C  
                     ??_check_fs 0072                          _proceed 33F8  
        __size_of_init_interrupt 0012                       ??_dir_find 00A9  
                     ??_dir_next 0096                     pf_read@rbuff 00A3  
                 __pintcode_body 238C          ?_leitura_chaves_sistema 0001  
           end_of_initialization 2DA8                          isr@cont 0019  
     __end_ofleitura_chave@F3840 60FD       __end_ofleitura_chave@F3842 60EC  
     __end_ofleitura_chave@F3838 610E          __size_of_init_oscilador 0008  
                        itoa@buf 0060                          itoa@val 0062  
                  SDCard@FResult 01B1                    __Lmediumconst 605A  
                     ??_init_lcd 001D                          int_func 238C  
                     _rmc_buffer 0250                ?_recebe_dado_uart 0001  
                     ??_pf_mount 0078                       ??_readover 001C  
                     ??_pf_write 009A           write_timer_zero@timer0 001A  
                ___lldiv@divisor 001E               ??_recebe_dado_uart 0001  
                ___lldiv@counter 0026                       ??_response 001D  
                      _RCSTAbits 000FAB         __end_of_write_timer_zero 33B0  
                        postdec1 000FE5                          postdec2 000FDD  
                _recebe_dado_SPI 2F72                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                        utoa@buf 0021                          utoa@val 0023  
                     dir_find@dj 00A5                        _PORTAbits 000F80  
                      _PORTBbits 000F81                        _PORTCbits 000F82  
                      _PORTDbits 000F83                        _PORTEbits 000F84  
                ??_init_hardware 001E               _posicao_cursor_lcd 2E98  
                    ?_dir_rewind 0065                       dir_next@dj 0094  
                     dir_next@fs 009D                      ?_disk_readp 0023  
                      _TRISAbits 000F92                        _TRISBbits 000F93  
                      _TRISCbits 000F94                        _TRISDbits 000F95  
              ?_escreve_dado_SPI 0001                       get_fat@buf 008C  
                     get_fat@ofs 008A                  _escreve_cmd_lcd 2B42  
 __end_of_leitura_chaves_sistema 328A              ?_posicao_cursor_lcd 001D  
             ??_escreve_dado_SPI 001A                      ?_clust2sect 0026  
                     command@CMD 0021                       command@CRC 0020  
               disk_readp@length 006A                 disk_readp@offset 0029  
               disk_readp@sector 0025                    ??_create_name 0026  
                     command@arg 001C                 disk_initialize@i 0060  
                disk_writep@buff 0068                 ?_tratamento_uart 0001  
              ??_inicializa_shrc 001A      __size_of_inicializa_tarefas 0020  
                 __end_of_SDCard 1B88                    ??_disk_writep 0060  
                command@argument 0022             ??_posicao_cursor_lcd 001E  
          disk_initialize@count1 0062            disk_initialize@count2 0065  
                 __end_of___lmul 3024                    ??_escalonador 00CF  
                    ?_init_ports 0001                   clust2sect@clst 0026  
            start_initialization 2D44                      __end_of_isr 24B0  
      __size_of_mensagem_inicial 007A                       mem_cmp@cnt 001E  
                     mem_cmp@dst 001A                     pf_write@buff 0094  
                     mem_cmp@src 001C                     pf_write@clst 00AC  
                   pf_write@sect 00A4                     pf_write@wcnt 00B1  
                       ??_SDCard 00CD               i2_write_timer_zero 33B0  
        __end_of_recebe_dado_SPI 2FCE                  _disk_initialize 161C  
                     mem_set@cnt 001E                       mem_set@dst 001A  
                     mem_set@val 001C              __size_of_dir_rewind 012A  
               _data_uart_recebe 0045                      _dado_buffer 01AA  
          __size_of_dummy_clocks 003E                    ??_follow_path 00B3  
            __size_of_disk_readp 0362              __end_of_create_name 2262  
            ?i2_write_timer_zero 0001                         ??___lmul 0022  
                     pf_read@btr 0096                      __pdataBANK1 01DE  
               __CFG_LPT1OSC$OFF 000000              __size_of_clust2sect 00C6  
            __end_of_disk_writep 212C                       pf_open@dir 02A2  
                     pf_open@res 02C2          __end_of_escreve_cmd_lcd 2BCE  
   __size_of_endereco_cursor_lcd 006A                      __pbssBIGRAM 02D5  
                     pf_mount@fs 0076                      __pbssCOMRAM 002D  
                   _pf_read$2169 00A5                    __pcstackBANK0 0060  
                  __pcstackBANK1 01B1                    __pcstackBANK2 0296  
                 _init_interrupt 338C             ??i2_write_timer_zero 0003  
            __end_of_escalonador 2A00                      _data_buffer 019B  
              __size_of_check_fs 0158                     check_fs@sect 006E  
                     pf_write@cs 00B0                       pf_write@bw 0098  
                     pf_write@fs 00B3                __size_of_dir_find 0100  
                   _dummy_clocks 3194                   _init_oscilador 340E  
              __size_of_dir_next 01BC              __size_of_init_ports 0018  
          _escreve_frase_ram_lcd 3076      __end_of_escreve_inteiro_lcd 324E  
              __size_of_init_lcd 009E                 ___lwdiv@dividend 001A  
              delay@contador_int 001B                delay@contador_ext 001A  
              __size_of_pf_mount 0634                __size_of_readover 000A  
                      _gga_index 0034                __size_of_pf_write 04D4  
                      __pintcode 0008                    __pmediumconst 605A  
                       SDCard@br 01B2                         SDCard@fs 01B4  
                       ?___lldiv 001A                         ?___lwdiv 001A  
                       ?___lwmod 001A                __size_of_response 000C  
                      _get_clust 27CE                    follow_path@dj 00AD  
             _sinaliza_int_timer 0044              __end_of_follow_path 25C0  
                       ?_get_fat 006C                         ?_command 001C  
                       ?_mem_cmp 001A           __end_of_init_interrupt 339E  
                       ?_mem_set 001A                         ?_pf_read 0094  
                       ?_pf_open 00B5                       reset@count 0027  
 __size_of_escreve_caractere_lcd 0072    __end_of_escreve_caractere_lcd 2E28  
                       ?_proceed 0001                 ___lwdiv@quotient 001F  
                 __size_of_delay 0024          __end_of_disk_initialize 190A  
         __end_of_init_oscilador 3416                   __size_of_reset 007A  
                      _p_tarefas 0177                      _create_name 212C  
                       _LATBbits 000F8A                 ?_recebe_dado_SPI 0001  
                       _PIE1bits 000F9D                        _rmc_index 0032  
                follow_path@path 00B1                         _PIR1bits 000F9E  
                       _PIR2bits 000FA1                      _disk_writep 1FEC  
                       i2u650_40 2434                ?_write_timer_zero 001A  
                      dir_find@c 00AB               leitura_chave@F3840 60EC  
             leitura_chave@F3842 60DB               leitura_chave@F3838 60FD  
       posicao_cursor_lcd@coluna 001D                        dir_next@i 00A3  
             ??_write_timer_zero 001C       posicao_cursor_lcd@endereco 001F  
                     ?_get_clust 001A                        get_fat@bc 0090  
                      get_fat@fs 0092        __size_of_recebe_dado_uart 0012  
                      get_fat@wc 0088                      _escalonador 295C  
               ?_escreve_cmd_lcd 0001                     ??_dir_rewind 0067  
    escreve_frase_ram_lcd@buffer 001D                  ?_init_interrupt 0001  
                   ??_disk_readp 0060                  _inicializa_shrc 33E0  
               _mensagem_inicial 2C50                  ?_init_oscilador 0001  
                   ??_clust2sect 0060                ___lmul@multiplier 001A  
                      copy_data0 2D58           ?_escreve_frase_ram_lcd 001D  
                     _EECON1bits 000FA6         escreve_dado_SPI@contador 001A  
       escreve_inteiro_lcd@F3966 01E5                         __Hrparam 0000  
      __size_of_escreve_dado_SPI 0046               __end_of_dir_rewind 238C  
                    _info_chaves 0164                         __Lrparam 0000  
                    _follow_path 24B0               __end_of_disk_readp 161C  
                      pf_read@br 0098                        pf_read@cs 00B3  
                      pf_read@dr 00A2                        pf_read@fs 00B6  
                      pf_open@dj 02C5                        pf_open@fs 02C3  
                      pf_open@sp 0296                 __size_of___lldiv 0082  
               __size_of___lwdiv 0052                 __size_of___lwmod 0042  
                   ??_init_ports 001A               __end_of_clust2sect 295C  
       escreve_inteiro_lcd@valor 0066                      check_fs@buf 006C  
                      readover@a 001A         escreve_inteiro_lcd@texto 0068  
                      pf_write@p 00A2                 __size_of_get_fat 03E4  
               __size_of_command 003E            __end_of_init_hardware 338C  
                       _check_fs 1D44                 __size_of_mem_cmp 0070  
               __size_of_mem_set 002C                 __size_of_pf_read 03BC  
               __size_of_pf_open 0150                         _gga_code 002D  
                ___lwdiv@divisor 001C                  ___lwdiv@counter 001E  
                       _fileName 01EC                         __ptext10 33D4  
                       __ptext11 3306                         __ptext20 24B0  
                       __ptext12 33E0                         __ptext21 27CE  
                       __ptext13 295C                         __ptext30 0012  
                       __ptext22 26CE                         __ptext14 190A  
                       __ptext31 161C                         __ptext23 2E28  
                       __ptext15 3404                         __ptext40 2F08  
                       __ptext32 2CCA                         __ptext24 2262  
                       __ptext16 0646                         __ptext41 3194  
                       __ptext33 2B42                         __ptext25 1B88  
                       __ptext17 1FEC                         __ptext50 3024  
                       __ptext42 31D2                         __ptext34 1D44  
                       __ptext26 0B1A                         __ptext18 0EFE  
                       __ptext51 3076                         __ptext43 30C8  
                       __ptext35 12BA                         __ptext27 2896  
                       __ptext19 1E9C                         __ptext52 2DB6  
                       __ptext44 2FCE                         __ptext36 33EC  
                       __ptext28 212C                         __ptext53 32E2  
                       __ptext45 2BCE                         __ptext37 2F72  
                       __ptext29 32B6                         __ptext46 3210  
                       __ptext38 33F8                         __ptext55 33B0  
                       __ptext47 310E                         __ptext39 2E98  
                       __ptext56 25C0                         __ptext48 2A00  
                       __ptext57 33C2                         __ptext49 3152  
                       __ptext58 0000                         _dir_find 26CE  
                       _fileSize 016B                         _dir_next 1B88  
               __size_of_proceed 000C                 ?_disk_initialize 0001  
                 _timeout_tarefa 0036                     _rmc_pointers 0158  
                      reset@buff 0029       __end_of_inicializa_tarefas 3326  
       i2write_timer_zero@timer0 0001                         _init_lcd 2AA4  
                  __size_of_main 002C                    __size_of_itoa 0044  
                       _pf_mount 0012                    __size_of_utoa 00A4  
                       _readover 3404              _endereco_cursor_lcd 2F08  
                       _pf_write 0646               __end_of_init_ports 3376  
              _comma_counter_gga 0040                    dummy_clocks@i 001F  
                  dummy_clocks@n 001E                _comma_counter_rmc 003F  
                       _rmc_code 00D2                         _response 33EC  
    __size_of_posicao_cursor_lcd 0070                         int$flags 0046  
        posicao_cursor_lcd@linha 001E         __size_of_tratamento_uart 010E  
                  pf_read@remain 00AB                      ??_get_clust 001E  
        __end_of_inicializa_shrc 33EC            __CFG_CPUDIV$OSC1_PLL2 000000  
           ?_endereco_cursor_lcd 0001                         mem_cmp@d 0023  
                       mem_cmp@r 0027                         mem_cmp@s 0025  
                     _INTCONbits 000FF2                         mem_set@d 0020  
                       itoa@base 0064                _config_timer_dois 33D4  
                   _tempo_backup 0173                _config_timer_zero 3344  
                       intlevel2 0000               ?_config_timer_dois 0001  
       mensagem_inicial@msg_dois 0071               ?_config_timer_zero 0001  
                   _tempo_tarefa 016F                 ___lwmod@dividend 001A  
               ___lldiv@dividend 001A              ??_config_timer_dois 001A  
                     _OSCCONbits 000FD3              ??_config_timer_zero 001E  
               _recebe_dado_uart 33C2          recebe_dado_SPI@contador 001C  
                       utoa@base 0025            ??_endereco_cursor_lcd 001C  
       ??_leitura_chaves_sistema 001A                     response@buff 001D  
               ___lldiv@quotient 0022                  ___lwmod@divisor 001C  
                 dir_rewind@clst 0071                  ___lwmod@counter 001E  
                    dir_find@dir 00A7                      dir_find@res 00AC  
      __end_of_config_timer_dois 33E0        __end_of_config_timer_zero 335E  
    __size_ofi2_write_timer_zero 0012                      _SSPCON1bits 000FC6  
                   dir_next@clst 009F           escreve_cmd_lcd@comando 001C  
                   ?_create_name 0022                     dir_rewind@dj 0065  
                   dir_rewind@fs 006F                 _escreve_dado_SPI 30C8  
  __end_ofmensagem_inicial@F4011 611F    __end_ofmensagem_inicial@F4009 6130  
                   ?_disk_writep 0023  
