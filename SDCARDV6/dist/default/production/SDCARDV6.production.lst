

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 16 14:36:52 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   102                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.45
   111                           ; Generated 16/11/2017 GMT
   112                           ; 
   113                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F4550 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK1
   146  005224                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for _fileName
   150  005224  63                 	db	99
   151  005225  68                 	db	104
   152  005226  65                 	db	101
   153  005227  63                 	db	99
   154  005228  6B                 	db	107
   155  005229  2E                 	db	46
   156  00522A  74                 	db	116
   157  00522B  78                 	db	120
   158  00522C  74                 	db	116
   159  00522D  00                 	db	0
   160  00522E  00                 	db	0
   161  00522F  00                 	db	0
   162  005230  00                 	db	0
   163  005231  00                 	db	0
   164  005232  00                 	db	0
   165                           
   166                           ;initializer for escreve_inteiro_uart@F3956
   167  005233  30                 	db	48
   168  005234  30                 	db	48
   169  005235  30                 	db	48
   170  005236  30                 	db	48
   171  005237  30                 	db	48
   172  005238  30                 	db	48
   173  005239  00                 	db	0
   174                           
   175                           ;initializer for escreve_inteiro_lcd@F3966
   176  00523A  30                 	db	48
   177  00523B  30                 	db	48
   178  00523C  30                 	db	48
   179  00523D  30                 	db	48
   180  00523E  30                 	db	48
   181  00523F  30                 	db	48
   182  005240  00                 	db	0
   183                           
   184                           	psect	mediumconst
   185  0060F4                     __pmediumconst:
   186                           	opt stack 0
   187  0060F4  00                 	db	0
   188  0060F5                     _dpowers:
   189                           	opt stack 0
   190  0060F5  0001               	dw	1
   191  0060F7  0000               	dw	0
   192  0060F9  000A               	dw	10
   193  0060FB  0000               	dw	0
   194  0060FD  0064               	dw	100
   195  0060FF  0000               	dw	0
   196  006101  03E8               	dw	1000
   197  006103  0000               	dw	0
   198  006105  2710               	dw	10000
   199  006107  0000               	dw	0
   200  006109  86A0               	dw	34464
   201  00610B  0001               	dw	1
   202  00610D  4240               	dw	16960
   203  00610F  000F               	dw	15
   204  006111  9680               	dw	38528
   205  006113  0098               	dw	152
   206  006115  E100               	dw	57600
   207  006117  05F5               	dw	1525
   208  006119  CA00               	dw	51712
   209  00611B  3B9A               	dw	15258
   210  00611D                     __end_of_dpowers:
   211                           	opt stack 0
   212  00611D                     __powers_:
   213                           	opt stack 0
   214  00611D  00                 	db	0
   215  00611E  80                 	db	128
   216  00611F  3F                 	db	63
   217  006120  00                 	db	0
   218  006121  20                 	db	32
   219  006122  41                 	db	65
   220  006123  00                 	db	0
   221  006124  C8                 	db	200
   222  006125  42                 	db	66
   223  006126  00                 	db	0
   224  006127  7A                 	db	122
   225  006128  44                 	db	68
   226  006129  40                 	db	64
   227  00612A  1C                 	db	28
   228  00612B  46                 	db	70
   229  00612C  50                 	db	80
   230  00612D  C3                 	db	195
   231  00612E  47                 	db	71
   232  00612F  24                 	db	36
   233  006130  74                 	db	116
   234  006131  49                 	db	73
   235  006132  97                 	db	151
   236  006133  18                 	db	24
   237  006134  4B                 	db	75
   238  006135  BC                 	db	188
   239  006136  BE                 	db	190
   240  006137  4C                 	db	76
   241  006138  6B                 	db	107
   242  006139  6E                 	db	110
   243  00613A  4E                 	db	78
   244  00613B  03                 	db	3
   245  00613C  15                 	db	21
   246  00613D  50                 	db	80
   247  00613E  79                 	db	121
   248  00613F  AD                 	db	173
   249  006140  60                 	db	96
   250  006141  F3                 	db	243
   251  006142  49                 	db	73
   252  006143  71                 	db	113
   253  006144                     __end_of__powers_:
   254                           	opt stack 0
   255  006144                     __npowers_:
   256                           	opt stack 0
   257  006144  00                 	db	0
   258  006145  80                 	db	128
   259  006146  3F                 	db	63
   260  006147  CD                 	db	205
   261  006148  CC                 	db	204
   262  006149  3D                 	db	61
   263  00614A  D7                 	db	215
   264  00614B  23                 	db	35
   265  00614C  3C                 	db	60
   266  00614D  12                 	db	18
   267  00614E  83                 	db	131
   268  00614F  3A                 	db	58
   269  006150  B7                 	db	183
   270  006151  D1                 	db	209
   271  006152  38                 	db	56
   272  006153  C6                 	db	198
   273  006154  27                 	db	39
   274  006155  37                 	db	55
   275  006156  38                 	db	56
   276  006157  86                 	db	134
   277  006158  35                 	db	53
   278  006159  C0                 	db	192
   279  00615A  D6                 	db	214
   280  00615B  33                 	db	51
   281  00615C  CC                 	db	204
   282  00615D  2B                 	db	43
   283  00615E  32                 	db	50
   284  00615F  70                 	db	112
   285  006160  89                 	db	137
   286  006161  30                 	db	48
   287  006162  E7                 	db	231
   288  006163  DB                 	db	219
   289  006164  2E                 	db	46
   290  006165  E5                 	db	229
   291  006166  3C                 	db	60
   292  006167  1E                 	db	30
   293  006168  42                 	db	66
   294  006169  A2                 	db	162
   295  00616A  0D                 	db	13
   296  00616B                     __end_of__npowers_:
   297                           	opt stack 0
   298  00616B                     leitura_chave@F3842:
   299                           	opt stack 0
   300  00616B  20                 	db	32
   301  00616C  49                 	db	73
   302  00616D  67                 	db	103
   303  00616E  6E                 	db	110
   304  00616F  20                 	db	32
   305  006170  4F                 	db	79
   306  006171  6E                 	db	110
   307  006172  00                 	db	0
   308  006173  00                 	db	0
   309  006174  00                 	db	0
   310  006175  00                 	db	0
   311  006176  00                 	db	0
   312  006177  00                 	db	0
   313  006178  00                 	db	0
   314  006179  00                 	db	0
   315  00617A  00                 	db	0
   316  00617B  00                 	db	0
   317  00617C                     __end_ofleitura_chave@F3842:
   318                           	opt stack 0
   319  00617C                     leitura_chave@F3840:
   320                           	opt stack 0
   321  00617C  20                 	db	32
   322  00617D  49                 	db	73
   323  00617E  67                 	db	103
   324  00617F  6E                 	db	110
   325  006180  20                 	db	32
   326  006181  43                 	db	67
   327  006182  72                 	db	114
   328  006183  61                 	db	97
   329  006184  6E                 	db	110
   330  006185  6B                 	db	107
   331  006186  00                 	db	0
   332  006187  00                 	db	0
   333  006188  00                 	db	0
   334  006189  00                 	db	0
   335  00618A  00                 	db	0
   336  00618B  00                 	db	0
   337  00618C  00                 	db	0
   338  00618D                     __end_ofleitura_chave@F3840:
   339                           	opt stack 0
   340  00618D                     leitura_chave@F3838:
   341                           	opt stack 0
   342  00618D  20                 	db	32
   343  00618E  49                 	db	73
   344  00618F  67                 	db	103
   345  006190  6E                 	db	110
   346  006191  20                 	db	32
   347  006192  4F                 	db	79
   348  006193  66                 	db	102
   349  006194  66                 	db	102
   350  006195  00                 	db	0
   351  006196  00                 	db	0
   352  006197  00                 	db	0
   353  006198  00                 	db	0
   354  006199  00                 	db	0
   355  00619A  00                 	db	0
   356  00619B  00                 	db	0
   357  00619C  00                 	db	0
   358  00619D  00                 	db	0
   359  00619E                     __end_ofleitura_chave@F3838:
   360                           	opt stack 0
   361  0000                     _RCSTA	set	4011
   362  0000                     _TXSTA	set	4012
   363  0000                     _RCREG	set	4014
   364  0000                     _RCSTAbits	set	4011
   365  0000                     _TXREG	set	4013
   366  0000                     _SPBRG	set	4015
   367  0000                     _PIR2bits	set	4001
   368  0000                     _EECON2	set	4007
   369  0000                     _EECON1bits	set	4006
   370  0000                     _EEDATA	set	4008
   371  0000                     _EEADR	set	4009
   372  0000                     _PR2	set	4043
   373  0000                     _TMR2	set	4044
   374  0000                     _T2CON	set	4042
   375  0000                     _OSCCONbits	set	4051
   376  0000                     _TRISE	set	3990
   377  0000                     _TRISC	set	3988
   378  0000                     _TRISA	set	3986
   379  0000                     _TRISD	set	3989
   380  0000                     _LATB	set	3978
   381  0000                     _TRISB	set	3987
   382  0000                     _TMR0L	set	4054
   383  0000                     _TMR0H	set	4055
   384  0000                     _PIE1	set	3997
   385  0000                     _INTCON3	set	4080
   386  0000                     _INTCON2	set	4081
   387  0000                     _INTCON	set	4082
   388  0000                     _SPPCFG	set	3939
   389  0000                     _SPPCON	set	3941
   390  0000                     _T0CON	set	4053
   391  0000                     _PORTDbits	set	3971
   392  0000                     _TRISDbits	set	3989
   393  0000                     _PORTEbits	set	3972
   394  0000                     _PORTCbits	set	3970
   395  0000                     _SSPBUF	set	4041
   396  0000                     _TRISCbits	set	3988
   397  0000                     _SSPSTATbits	set	4039
   398  0000                     _SSPCON1	set	4038
   399  0000                     _SSPSTAT	set	4039
   400  0000                     _SSPCON1bits	set	4038
   401  0000                     _PORTBbits	set	3969
   402  0000                     _TRISBbits	set	3987
   403  0000                     _T0CONbits	set	4053
   404  0000                     _LATBbits	set	3978
   405  0000                     _PORTAbits	set	3968
   406  0000                     _TRISAbits	set	3986
   407  0000                     _ADCON1	set	4033
   408  0000                     _PCL	set	4089
   409  0000                     _PCLATH	set	4090
   410  0000                     _INTCONbits	set	4082
   411  0000                     _PIR1bits	set	3998
   412  0000                     _PIE1bits	set	3997
   413  0000                     _RCIF	set	31989
   414  0000                     _TRMT	set	32097
   415  0000                     _TXEN	set	32101
   416  0000                     _CREN	set	32092
   417  0000                     _SPEN	set	32095
   418  0000                     _SYNC	set	32100
   419  0000                     _BRGH	set	32098
   420  0000                     _TMR2IF	set	31985
   421  0000                     _INT0IE	set	32660
   422  0000                     _INT0IF	set	32657
   423  0000                     _T0IF	set	32658
   424  0000                     _TMR0IF	set	32658
   425  00619E  53                 	db	83	;'S'
   426  00619F  50                 	db	80	;'P'
   427  0061A0  49                 	db	73	;'I'
   428  0061A1  20                 	db	32
   429  0061A2  63                 	db	99	;'c'
   430  0061A3  6F                 	db	111	;'o'
   431  0061A4  6E                 	db	110	;'n'
   432  0061A5  66                 	db	102	;'f'
   433  0061A6  69                 	db	105	;'i'
   434  0061A7  67                 	db	103	;'g'
   435  0061A8  75                 	db	117	;'u'
   436  0061A9  72                 	db	114	;'r'
   437  0061AA  61                 	db	97	;'a'
   438  0061AB  64                 	db	100	;'d'
   439  0061AC  61                 	db	97	;'a'
   440  0061AD  21                 	db	33
   441  0061AE  00                 	db	0
   442  0061AF                     STR_12:
   443  0061AF  45                 	db	69	;'E'
   444  0061B0  52                 	db	82	;'R'
   445  0061B1  52                 	db	82	;'R'
   446  0061B2  4F                 	db	79	;'O'
   447  0061B3  52                 	db	82	;'R'
   448  0061B4  20                 	db	32
   449  0061B5  6F                 	db	111	;'o'
   450  0061B6  70                 	db	112	;'p'
   451  0061B7  65                 	db	101	;'e'
   452  0061B8  6E                 	db	110	;'n'
   453  0061B9  20                 	db	32
   454  0061BA  66                 	db	102	;'f'
   455  0061BB  69                 	db	105	;'i'
   456  0061BC  6C                 	db	108	;'l'
   457  0061BD  65                 	db	101	;'e'
   458  0061BE  00                 	db	0
   459  0061BF  49                 	db	73	;'I'
   460  0061C0  6E                 	db	110	;'n'
   461  0061C1  73                 	db	115	;'s'
   462  0061C2  69                 	db	105	;'i'
   463  0061C3  72                 	db	114	;'r'
   464  0061C4  61                 	db	97	;'a'
   465  0061C5  20                 	db	32
   466  0061C6  6F                 	db	111	;'o'
   467  0061C7  20                 	db	32
   468  0061C8  43                 	db	67	;'C'
   469  0061C9  61                 	db	97	;'a'
   470  0061CA  72                 	db	114	;'r'
   471  0061CB  74                 	db	116	;'t'
   472  0061CC  61                 	db	97	;'a'
   473  0061CD  6F                 	db	111	;'o'
   474  0061CE  00                 	db	0
   475  0061CF  22                 	db	34
   476  0061D0  2A                 	db	42
   477  0061D1  2B                 	db	43
   478  0061D2  2C                 	db	44
   479  0061D3  3A                 	db	58	;':'
   480  0061D4  3C                 	db	60	;'<'
   481  0061D5  3D                 	db	61	;'='
   482  0061D6  3E                 	db	62	;'>'
   483  0061D7  3F                 	db	63	;'?'
   484  0061D8  5B                 	db	91	;'['
   485  0061D9  5D                 	db	93	;']'
   486  0061DA  7C                 	db	124
   487  0061DB  7F                 	db	127
   488  0061DC  00                 	db	0
   489  0061DD  42                 	db	66	;'B'
   490  0061DE  79                 	db	121	;'y'
   491  0061DF  74                 	db	116	;'t'
   492  0061E0  65                 	db	101	;'e'
   493  0061E1  73                 	db	115	;'s'
   494  0061E2  20                 	db	32
   495  0061E3  63                 	db	99	;'c'
   496  0061E4  72                 	db	114	;'r'
   497  0061E5  69                 	db	105	;'i'
   498  0061E6  61                 	db	97	;'a'
   499  0061E7  64                 	db	100	;'d'
   500  0061E8  6F                 	db	111	;'o'
   501  0061E9  21                 	db	33
   502  0061EA  00                 	db	0
   503  0061EB  43                 	db	67	;'C'
   504  0061EC  61                 	db	97	;'a'
   505  0061ED  72                 	db	114	;'r'
   506  0061EE  74                 	db	116	;'t'
   507  0061EF  61                 	db	97	;'a'
   508  0061F0  6F                 	db	111	;'o'
   509  0061F1  20                 	db	32
   510  0061F2  41                 	db	65	;'A'
   511  0061F3  63                 	db	99	;'c'
   512  0061F4  65                 	db	101	;'e'
   513  0061F5  69                 	db	105	;'i'
   514  0061F6  74                 	db	116	;'t'
   515  0061F7  6F                 	db	111	;'o'
   516  0061F8  00                 	db	0
   517  0061F9                     STR_22:
   518  0061F9  4E                 	db	78	;'N'
   519  0061FA  4F                 	db	79	;'O'
   520  0061FB  20                 	db	32
   521  0061FC  41                 	db	65	;'A'
   522  0061FD  54                 	db	84	;'T'
   523  0061FE  41                 	db	65	;'A'
   524  0061FF  20                 	db	32
   525  006200  44                 	db	68	;'D'
   526  006201  52                 	db	82	;'R'
   527  006202  49                 	db	73	;'I'
   528  006203  56                 	db	86	;'V'
   529  006204  45                 	db	69	;'E'
   530  006205  00                 	db	0
   531  006206                     STR_23:
   532  006206  4E                 	db	78	;'N'
   533  006207  4F                 	db	79	;'O'
   534  006208  20                 	db	32
   535  006209  55                 	db	85	;'U'
   536  00620A  53                 	db	83	;'S'
   537  00620B  42                 	db	66	;'B'
   538  00620C  20                 	db	32
   539  00620D  44                 	db	68	;'D'
   540  00620E  52                 	db	82	;'R'
   541  00620F  49                 	db	73	;'I'
   542  006210  56                 	db	86	;'V'
   543  006211  45                 	db	69	;'E'
   544  006212  00                 	db	0
   545  006213  53                 	db	83	;'S'
   546  006214  45                 	db	69	;'E'
   547  006215  4D                 	db	77	;'M'
   548  006216  20                 	db	32
   549  006217  53                 	db	83	;'S'
   550  006218  44                 	db	68	;'D'
   551  006219  43                 	db	67	;'C'
   552  00621A  41                 	db	65	;'A'
   553  00621B  52                 	db	82	;'R'
   554  00621C  44                 	db	68	;'D'
   555  00621D  21                 	db	33
   556  00621E  21                 	db	33
   557  00621F  00                 	db	0
   558  006220  42                 	db	66	;'B'
   559  006221  6C                 	db	108	;'l'
   560  006222  6F                 	db	111	;'o'
   561  006223  63                 	db	99	;'c'
   562  006224  6F                 	db	111	;'o'
   563  006225  20                 	db	32
   564  006226  64                 	db	100	;'d'
   565  006227  65                 	db	101	;'e'
   566  006228  20                 	db	32
   567  006229  35                 	db	53	;'5'
   568  00622A  31                 	db	49	;'1'
   569  00622B  32                 	db	50	;'2'
   570  00622C  00                 	db	0
   571  00622D                     STR_11:
   572  00622D  46                 	db	70	;'F'
   573  00622E  69                 	db	105	;'i'
   574  00622F  6C                 	db	108	;'l'
   575  006230  65                 	db	101	;'e'
   576  006231  20                 	db	32
   577  006232  77                 	db	119	;'w'
   578  006233  72                 	db	114	;'r'
   579  006234  6F                 	db	111	;'o'
   580  006235  74                 	db	116	;'t'
   581  006236  65                 	db	101	;'e'
   582  006237  21                 	db	33
   583  006238  00                 	db	0
   584  006239                     STR_10:
   585  006239  48                 	db	72	;'H'
   586  00623A  65                 	db	101	;'e'
   587  00623B  6C                 	db	108	;'l'
   588  00623C  6C                 	db	108	;'l'
   589  00623D  6F                 	db	111	;'o'
   590  00623E  20                 	db	32
   591  00623F  57                 	db	87	;'W'
   592  006240  6F                 	db	111	;'o'
   593  006241  72                 	db	114	;'r'
   594  006242  6C                 	db	108	;'l'
   595  006243  64                 	db	100	;'d'
   596  006244  00                 	db	0
   597  006245                     STR_13:
   598  006245  45                 	db	69	;'E'
   599  006246  52                 	db	82	;'R'
   600  006247  52                 	db	82	;'R'
   601  006248  4F                 	db	79	;'O'
   602  006249  52                 	db	82	;'R'
   603  00624A  20                 	db	32
   604  00624B  6D                 	db	109	;'m'
   605  00624C  6F                 	db	111	;'o'
   606  00624D  75                 	db	117	;'u'
   607  00624E  6E                 	db	110	;'n'
   608  00624F  74                 	db	116	;'t'
   609  006250  00                 	db	0
   610  006251  45                 	db	69	;'E'
   611  006252  72                 	db	114	;'r'
   612  006253  72                 	db	114	;'r'
   613  006254  6F                 	db	111	;'o'
   614  006255  72                 	db	114	;'r'
   615  006256  21                 	db	33
   616  006257  21                 	db	33
   617  006258  21                 	db	33
   618  006259  00                 	db	0
   619  00625A                     STR_9:
   620  00625A  25                 	db	37
   621  00625B  64                 	db	100	;'d'
   622  00625C  3A                 	db	58	;':'
   623  00625D  25                 	db	37
   624  00625E  64                 	db	100	;'d'
   625  00625F  3A                 	db	58	;':'
   626  006260  25                 	db	37
   627  006261  64                 	db	100	;'d'
   628  006262  00                 	db	0
   629  006263                     STR_1:
   630  006263  48                 	db	72	;'H'
   631  006264  6F                 	db	111	;'o'
   632  006265  72                 	db	114	;'r'
   633  006266  61                 	db	97	;'a'
   634  006267  3A                 	db	58	;':'
   635  006268  00                 	db	0
   636  006269                     STR_2:
   637  006269  44                 	db	68	;'D'
   638  00626A  61                 	db	97	;'a'
   639  00626B  74                 	db	116	;'t'
   640  00626C  61                 	db	97	;'a'
   641  00626D  3A                 	db	58	;':'
   642  00626E  00                 	db	0
   643  00626F                     STR_3:
   644  00626F  25                 	db	37
   645  006270  2E                 	db	46
   646  006271  30                 	db	48	;'0'
   647  006272  37                 	db	55	;'7'
   648  006273  66                 	db	102	;'f'
   649  006274  00                 	db	0
   650  006275                     STR_5:
   651  006275  4C                 	db	76	;'L'
   652  006276  6F                 	db	111	;'o'
   653  006277  6E                 	db	110	;'n'
   654  006278  3A                 	db	58	;':'
   655  006279  00                 	db	0
   656  00627A  0D                 	db	13
   657  00627B  0A                 	db	10
   658  00627C  00                 	db	0
   659  00627D                     STR_6:
   660  00627D  7C                 	db	124
   661  00627E  00                 	db	0
   662  0000                     
   663                           ; #config settings
   664  00627F  00                 	db	0	; dummy byte at the end
   665  0000                     
   666                           	psect	cinit
   667  00484C                     __pcinit:
   668                           	opt stack 0
   669  00484C                     start_initialization:
   670                           	opt stack 0
   671  00484C                     __initialization:
   672                           	opt stack 0
   673                           
   674                           ; Initialize objects allocated to BANK1 (29 bytes)
   675                           ; load TBLPTR registers with __pidataBANK1
   676  00484C  0E24               	movlw	low __pidataBANK1
   677  00484E  6EF6               	movwf	tblptrl,c
   678  004850  0E52               	movlw	high __pidataBANK1
   679  004852  6EF7               	movwf	tblptrh,c
   680  004854  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   681  004856  6EF8               	movwf	tblptru,c
   682  004858  EE01  F0C9         	lfsr	0,__pdataBANK1
   683  00485C  EE10 F01D          	lfsr	1,29
   684  004860                     copy_data0:
   685  004860  0009               	tblrd		*+
   686  004862  CFF5 FFEE          	movff	tablat,postinc0
   687  004866  50E5               	movf	postdec1,w,c
   688  004868  50E1               	movf	fsr1l,w,c
   689  00486A  E1FA               	bnz	copy_data0
   690                           
   691                           ; Clear objects allocated to BIGRAM (1070 bytes)
   692  00486C  EE02  F0B7         	lfsr	0,__pbssBIGRAM
   693  004870  EE14 F02E          	lfsr	1,1070
   694  004874                     clear_0:
   695  004874  6AEE               	clrf	postinc0,c
   696  004876  50E5               	movf	postdec1,w,c
   697  004878  50E1               	movf	fsr1l,w,c
   698  00487A  E1FC               	bnz	clear_0
   699  00487C  50E2               	movf	fsr1h,w,c
   700  00487E  E1FA               	bnz	clear_0
   701                           
   702                           ; Clear objects allocated to BANK2 (150 bytes)
   703  004880  EE02  F000         	lfsr	0,__pbssBANK2
   704  004884  0E96               	movlw	150
   705  004886                     clear_1:
   706  004886  6AEE               	clrf	postinc0,c
   707  004888  06E8               	decf	wreg,f,c
   708  00488A  E1FD               	bnz	clear_1
   709                           
   710                           ; Clear objects allocated to BANK1 (169 bytes)
   711  00488C  EE01  F000         	lfsr	0,__pbssBANK1
   712  004890  0EA9               	movlw	169
   713  004892                     clear_2:
   714  004892  6AEE               	clrf	postinc0,c
   715  004894  06E8               	decf	wreg,f,c
   716  004896  E1FD               	bnz	clear_2
   717                           
   718                           ; Clear objects allocated to BANK0 (27 bytes)
   719  004898  EE00  F0E2         	lfsr	0,__pbssBANK0
   720  00489C  0E1B               	movlw	27
   721  00489E                     clear_3:
   722  00489E  6AEE               	clrf	postinc0,c
   723  0048A0  06E8               	decf	wreg,f,c
   724  0048A2  E1FD               	bnz	clear_3
   725                           
   726                           ; Clear objects allocated to COMRAM (24 bytes)
   727  0048A4  EE00  F02E         	lfsr	0,__pbssCOMRAM
   728  0048A8  0E18               	movlw	24
   729  0048AA                     clear_4:
   730  0048AA  6AEE               	clrf	postinc0,c
   731  0048AC  06E8               	decf	wreg,f,c
   732  0048AE  E1FD               	bnz	clear_4
   733  0048B0                     end_of_initialization:
   734                           	opt stack 0
   735  0048B0                     __end_of__initialization:
   736                           	opt stack 0
   737  0048B0  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   738  0048B2  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   739  0048B4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   740  0048B6  6EF8               	movwf	tblptru,c
   741  0048B8  0100               	movlb	0
   742  0048BA  EFCD  F028         	goto	_main	;jump to C main() function
   743                           tblptru	equ	0xFF8
   744                           tblptrh	equ	0xFF7
   745                           tblptrl	equ	0xFF6
   746                           tablat	equ	0xFF5
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           postdec1	equ	0xFE5
   750                           fsr1h	equ	0xFE2
   751                           fsr1l	equ	0xFE1
   752                           
   753                           	psect	bssCOMRAM
   754  00002E                     __pbssCOMRAM:
   755                           	opt stack 0
   756  00002E                     _rmc_code:
   757                           	opt stack 0
   758  00002E                     	ds	3
   759  000031                     _gga_code:
   760                           	opt stack 0
   761  000031                     	ds	3
   762  000034                     _FatFs:
   763                           	opt stack 0
   764  000034                     	ds	2
   765  000036                     _rmc_index:
   766                           	opt stack 0
   767  000036                     	ds	2
   768  000038                     _gga_index:
   769                           	opt stack 0
   770  000038                     	ds	2
   771  00003A                     timer_dois@flag:
   772                           	opt stack 0
   773  00003A                     	ds	1
   774  00003B                     _estado:
   775                           	opt stack 0
   776  00003B                     	ds	1
   777  00003C                     _dado:
   778                           	opt stack 0
   779  00003C                     	ds	1
   780  00003D                     _s:
   781                           	opt stack 0
   782  00003D                     	ds	1
   783  00003E                     _Result:
   784                           	opt stack 0
   785  00003E                     	ds	1
   786  00003F                     _is_it_rmc_string:
   787                           	opt stack 0
   788  00003F                     	ds	1
   789  000040                     _is_it_gga_string:
   790                           	opt stack 0
   791  000040                     	ds	1
   792  000041                     _comma_counter_rmc:
   793                           	opt stack 0
   794  000041                     	ds	1
   795  000042                     _comma_counter_gga:
   796                           	opt stack 0
   797  000042                     	ds	1
   798  000043                     _tarefa_em_execucao:
   799                           	opt stack 0
   800  000043                     	ds	1
   801  000044                     _sinaliza_int_timer:
   802                           	opt stack 0
   803  000044                     	ds	1
   804  000045                     _data_uart_recebe:
   805                           	opt stack 0
   806  000045                     	ds	1
   807                           tblptru	equ	0xFF8
   808                           tblptrh	equ	0xFF7
   809                           tblptrl	equ	0xFF6
   810                           tablat	equ	0xFF5
   811                           postinc0	equ	0xFEE
   812                           wreg	equ	0xFE8
   813                           postdec1	equ	0xFE5
   814                           fsr1h	equ	0xFE2
   815                           fsr1l	equ	0xFE1
   816                           
   817                           	psect	bssBANK0
   818  0000E2                     __pbssBANK0:
   819                           	opt stack 0
   820  0000E2                     _tempo_tarefa:
   821                           	opt stack 0
   822  0000E2                     	ds	4
   823  0000E6                     _tempo_backup:
   824                           	opt stack 0
   825  0000E6                     	ds	4
   826  0000EA                     _p_tarefas:
   827                           	opt stack 0
   828  0000EA                     	ds	4
   829  0000EE                     _Fsid:
   830                           	opt stack 0
   831  0000EE                     	ds	2
   832  0000F0                     _rd:
   833                           	opt stack 0
   834  0000F0                     	ds	2
   835  0000F2                     _timeout_tarefa:
   836                           	opt stack 0
   837  0000F2                     	ds	2
   838  0000F4                     _E_W:
   839                           	opt stack 0
   840  0000F4                     	ds	1
   841  0000F5                     _n_s:
   842                           	opt stack 0
   843  0000F5                     	ds	1
   844  0000F6                     _dado_buffer:
   845                           	opt stack 0
   846  0000F6                     	ds	7
   847                           tblptru	equ	0xFF8
   848                           tblptrh	equ	0xFF7
   849                           tblptrl	equ	0xFF6
   850                           tablat	equ	0xFF5
   851                           postinc0	equ	0xFEE
   852                           wreg	equ	0xFE8
   853                           postdec1	equ	0xFE5
   854                           fsr1h	equ	0xFE2
   855                           fsr1l	equ	0xFE1
   856                           
   857                           	psect	bssBANK1
   858  000100                     __pbssBANK1:
   859                           	opt stack 0
   860  000100                     _gga_buffer:
   861                           	opt stack 0
   862  000100                     	ds	80
   863  000150                     _txt:
   864                           	opt stack 0
   865  000150                     	ds	20
   866  000164                     _gga_pointers:
   867                           	opt stack 0
   868  000164                     	ds	20
   869  000178                     _rmc_pointers:
   870                           	opt stack 0
   871  000178                     	ds	12
   872  000184                     _f_time:
   873                           	opt stack 0
   874  000184                     	ds	9
   875  00018D                     _info_chaves:
   876                           	opt stack 0
   877  00018D                     	ds	7
   878  000194                     _fileSize:
   879                           	opt stack 0
   880  000194                     	ds	4
   881  000198                     _br:
   882                           	opt stack 0
   883  000198                     	ds	2
   884  00019A                     _data_buffer:
   885                           	opt stack 0
   886  00019A                     	ds	15
   887                           tblptru	equ	0xFF8
   888                           tblptrh	equ	0xFF7
   889                           tblptrl	equ	0xFF6
   890                           tablat	equ	0xFF5
   891                           postinc0	equ	0xFEE
   892                           wreg	equ	0xFE8
   893                           postdec1	equ	0xFE5
   894                           fsr1h	equ	0xFE2
   895                           fsr1l	equ	0xFE1
   896                           
   897                           	psect	dataBANK1
   898  0001C9                     __pdataBANK1:
   899                           	opt stack 0
   900  0001C9                     _fileName:
   901                           	opt stack 0
   902  0001C9                     	ds	15
   903  0001D8                     escreve_inteiro_uart@F3956:
   904                           	opt stack 0
   905  0001D8                     	ds	7
   906  0001DF                     escreve_inteiro_lcd@F3966:
   907                           	opt stack 0
   908  0001DF                     	ds	7
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           postdec1	equ	0xFE5
   916                           fsr1h	equ	0xFE2
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	bssBANK2
   920  000200                     __pbssBANK2:
   921                           	opt stack 0
   922  000200                     _rmc_buffer:
   923                           	opt stack 0
   924  000200                     	ds	70
   925  000246                     _folder:
   926                           	opt stack 0
   927  000246                     	ds	48
   928  000276                     _data_buffer_32:
   929                           	opt stack 0
   930  000276                     	ds	32
   931                           tblptru	equ	0xFF8
   932                           tblptrh	equ	0xFF7
   933                           tblptrl	equ	0xFF6
   934                           tablat	equ	0xFF5
   935                           postinc0	equ	0xFEE
   936                           wreg	equ	0xFE8
   937                           postdec1	equ	0xFE5
   938                           fsr1h	equ	0xFE2
   939                           fsr1l	equ	0xFE1
   940                           
   941                           	psect	bssBIGRAM
   942  0002B7                     __pbssBIGRAM:
   943                           	opt stack 0
   944  0002B7                     sdc_disk_read@arr:
   945                           	opt stack 0
   946  0002B7                     	ds	512
   947  0004B7                     _fs:
   948                           	opt stack 0
   949  0004B7                     	ds	558
   950                           tblptru	equ	0xFF8
   951                           tblptrh	equ	0xFF7
   952                           tblptrl	equ	0xFF6
   953                           tablat	equ	0xFF5
   954                           postinc0	equ	0xFEE
   955                           wreg	equ	0xFE8
   956                           postdec1	equ	0xFE5
   957                           fsr1h	equ	0xFE2
   958                           fsr1l	equ	0xFE1
   959                           
   960                           	psect	cstackBANK2
   961  000296                     __pcstackBANK2:
   962                           	opt stack 0
   963  000296                     SDCard@FResult:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x0
   967  000296                     	ds	1
   968  000297                     SDCard@fil:
   969                           	opt stack 0
   970                           
   971                           ; 32 bytes @ 0x1
   972  000297                     	ds	32
   973                           tblptru	equ	0xFF8
   974                           tblptrh	equ	0xFF7
   975                           tblptrl	equ	0xFF6
   976                           tablat	equ	0xFF5
   977                           postinc0	equ	0xFEE
   978                           wreg	equ	0xFE8
   979                           postdec1	equ	0xFE5
   980                           fsr1h	equ	0xFE2
   981                           fsr1l	equ	0xFE1
   982                           
   983                           	psect	cstackBANK1
   984  0001A9                     __pcstackBANK1:
   985                           	opt stack 0
   986  0001A9                     ??_f_write:
   987                           
   988                           ; 1 bytes @ 0x0
   989  0001A9                     	ds	16
   990  0001B9                     f_write@res:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x10
   994  0001B9                     	ds	1
   995  0001BA                     f_write@wbuff:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x11
   999  0001BA                     	ds	2
  1000  0001BC                     f_write@csect:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x13
  1004  0001BC                     	ds	1
  1005  0001BD                     f_write@cc:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x14
  1009  0001BD                     	ds	2
  1010  0001BF                     f_write@clst:
  1011                           	opt stack 0
  1012                           
  1013                           ; 4 bytes @ 0x16
  1014  0001BF                     	ds	4
  1015  0001C3                     f_write@sect:
  1016                           	opt stack 0
  1017                           
  1018                           ; 4 bytes @ 0x1A
  1019  0001C3                     	ds	4
  1020  0001C7                     f_write@wcnt:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x1E
  1024  0001C7                     	ds	2
  1025                           tblptru	equ	0xFF8
  1026                           tblptrh	equ	0xFF7
  1027                           tblptrl	equ	0xFF6
  1028                           tablat	equ	0xFF5
  1029                           postinc0	equ	0xFEE
  1030                           wreg	equ	0xFE8
  1031                           postdec1	equ	0xFE5
  1032                           fsr1h	equ	0xFE2
  1033                           fsr1l	equ	0xFE1
  1034                           
  1035                           	psect	cstackBANK0
  1036  000060                     __pcstackBANK0:
  1037                           	opt stack 0
  1038  000060                     ??_clust2sect:
  1039  000060                     ??_get_fattime:
  1040  000060                     ?___ftmul:
  1041                           	opt stack 0
  1042  000060                     get_dt@dt_pointer:
  1043                           	opt stack 0
  1044  000060                     sdc_disk_read@ptr:
  1045                           	opt stack 0
  1046  000060                     atol@sign:
  1047                           	opt stack 0
  1048  000060                     ___ftdiv@cntr:
  1049                           	opt stack 0
  1050  000060                     sdc_disk_write@i:
  1051                           	opt stack 0
  1052  000060                     ___ftmul@f1:
  1053                           	opt stack 0
  1054  000060                     ___lldiv@quotient:
  1055                           	opt stack 0
  1056                           
  1057                           ; 4 bytes @ 0x0
  1058  000060                     	ds	1
  1059  000061                     get_dt@index:
  1060                           	opt stack 0
  1061  000061                     ___ftdiv@f3:
  1062                           	opt stack 0
  1063  000061                     sdc_disk_read@start_add:
  1064                           	opt stack 0
  1065  000061                     atol@a:
  1066                           	opt stack 0
  1067                           
  1068                           ; 4 bytes @ 0x1
  1069  000061                     	ds	1
  1070  000062                     get_dt@dia:
  1071                           	opt stack 0
  1072  000062                     sdc_disk_write@j:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x2
  1076  000062                     	ds	1
  1077  000063                     get_dt@mes:
  1078                           	opt stack 0
  1079  000063                     ___ftmul@f2:
  1080                           	opt stack 0
  1081                           
  1082                           ; 3 bytes @ 0x3
  1083  000063                     	ds	1
  1084  000064                     get_dt@ano:
  1085                           	opt stack 0
  1086  000064                     sdc_disk_write@buff:
  1087                           	opt stack 0
  1088  000064                     ___ftdiv@exp:
  1089                           	opt stack 0
  1090  000064                     ___lldiv@counter:
  1091                           	opt stack 0
  1092                           
  1093                           ; 1 bytes @ 0x4
  1094  000064                     	ds	1
  1095  000065                     get_dt@dt_index:
  1096                           	opt stack 0
  1097  000065                     sdc_disk_read@buff:
  1098                           	opt stack 0
  1099  000065                     atol@c:
  1100                           	opt stack 0
  1101  000065                     ___ftdiv@sign:
  1102                           	opt stack 0
  1103  000065                     disk_write@buff:
  1104                           	opt stack 0
  1105                           
  1106                           ; 2 bytes @ 0x5
  1107  000065                     	ds	1
  1108  000066                     ??___ftmul:
  1109  000066                     ?_get_gpstime:
  1110                           	opt stack 0
  1111  000066                     get_dt@count:
  1112                           	opt stack 0
  1113  000066                     sdc_disk_read@length:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x6
  1117  000066                     	ds	1
  1118  000067                     disk_write@sector:
  1119                           	opt stack 0
  1120                           
  1121                           ; 4 bytes @ 0x7
  1122  000067                     	ds	1
  1123  000068                     disk_read@buff:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x8
  1127  000068                     	ds	1
  1128  000069                     ___ftmul@exp:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0x9
  1132  000069                     	ds	1
  1133  00006A                     ___ftmul@f3_as_product:
  1134                           	opt stack 0
  1135  00006A                     disk_read@sector:
  1136                           	opt stack 0
  1137                           
  1138                           ; 4 bytes @ 0xA
  1139  00006A                     	ds	1
  1140  00006B                     disk_write@count:
  1141                           	opt stack 0
  1142  00006B                     get_gpstime@time_buffer:
  1143                           	opt stack 0
  1144                           
  1145                           ; 15 bytes @ 0xB
  1146  00006B                     	ds	1
  1147  00006C                     disk_write@drv:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0xC
  1151  00006C                     	ds	1
  1152  00006D                     disk_write@res:
  1153                           	opt stack 0
  1154  00006D                     ___ftmul@cntr:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0xD
  1158  00006D                     	ds	1
  1159  00006E                     disk_read@count:
  1160                           	opt stack 0
  1161  00006E                     ___ftmul@sign:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0xE
  1165  00006E                     	ds	1
  1166  00006F                     ?_fround:
  1167                           	opt stack 0
  1168  00006F                     ?_scale:
  1169                           	opt stack 0
  1170  00006F                     ?___ftneg:
  1171                           	opt stack 0
  1172  00006F                     disk_read@drv:
  1173                           	opt stack 0
  1174  00006F                     ___ftneg@f1:
  1175                           	opt stack 0
  1176                           
  1177                           ; 3 bytes @ 0xF
  1178  00006F                     	ds	1
  1179  000070                     disk_read@res:
  1180                           	opt stack 0
  1181                           
  1182                           ; 1 bytes @ 0x10
  1183  000070                     	ds	1
  1184  000071                     move_window@fs:
  1185                           	opt stack 0
  1186                           
  1187                           ; 2 bytes @ 0x11
  1188  000071                     	ds	1
  1189  000072                     ?_strtod:
  1190                           	opt stack 0
  1191  000072                     strtod@s:
  1192                           	opt stack 0
  1193  000072                     _fround$3878:
  1194                           	opt stack 0
  1195  000072                     _scale$3879:
  1196                           	opt stack 0
  1197                           
  1198                           ; 3 bytes @ 0x12
  1199  000072                     	ds	1
  1200  000073                     move_window@sector:
  1201                           	opt stack 0
  1202                           
  1203                           ; 4 bytes @ 0x13
  1204  000073                     	ds	1
  1205  000074                     strtod@res:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x14
  1209  000074                     	ds	1
  1210  000075                     scale@scl:
  1211                           	opt stack 0
  1212  000075                     _fround$3877:
  1213                           	opt stack 0
  1214                           
  1215                           ; 3 bytes @ 0x15
  1216  000075                     	ds	1
  1217  000076                     ??_strtod:
  1218  000076                     ?___fttol:
  1219                           	opt stack 0
  1220  000076                     ___fttol@f1:
  1221                           	opt stack 0
  1222                           
  1223                           ; 3 bytes @ 0x16
  1224  000076                     	ds	1
  1225  000077                     ??_move_window:
  1226  000077                     strtod@eexp:
  1227                           	opt stack 0
  1228                           
  1229                           ; 1 bytes @ 0x17
  1230  000077                     	ds	1
  1231  000078                     fround@prec:
  1232                           	opt stack 0
  1233  000078                     strtod@flags:
  1234                           	opt stack 0
  1235                           
  1236                           ; 1 bytes @ 0x18
  1237  000078                     	ds	1
  1238  000079                     ?___ftadd:
  1239                           	opt stack 0
  1240  000079                     strtod@expon:
  1241                           	opt stack 0
  1242  000079                     ___ftadd@f1:
  1243                           	opt stack 0
  1244                           
  1245                           ; 3 bytes @ 0x19
  1246  000079                     	ds	1
  1247  00007A                     ??___fttol:
  1248  00007A                     get_gpstime@_time:
  1249                           	opt stack 0
  1250  00007A                     strtod@_u:
  1251                           	opt stack 0
  1252                           
  1253                           ; 4 bytes @ 0x1A
  1254  00007A                     	ds	2
  1255  00007C                     ___ftadd@f2:
  1256                           	opt stack 0
  1257                           
  1258                           ; 3 bytes @ 0x1C
  1259  00007C                     	ds	2
  1260  00007E                     ?_atof:
  1261                           	opt stack 0
  1262  00007E                     get_gpstime@index:
  1263                           	opt stack 0
  1264  00007E                     atof@s:
  1265                           	opt stack 0
  1266                           
  1267                           ; 2 bytes @ 0x1E
  1268  00007E                     	ds	1
  1269  00007F                     ??___ftadd:
  1270  00007F                     ___fttol@sign1:
  1271                           	opt stack 0
  1272                           
  1273                           ; 1 bytes @ 0x1F
  1274  00007F                     	ds	1
  1275  000080                     ___fttol@lval:
  1276                           	opt stack 0
  1277                           
  1278                           ; 4 bytes @ 0x20
  1279  000080                     	ds	1
  1280  000081                     ?_get_latitude:
  1281                           	opt stack 0
  1282  000081                     ?_get_longitude:
  1283                           	opt stack 0
  1284                           
  1285                           ; 3 bytes @ 0x21
  1286  000081                     	ds	1
  1287  000082                     ___ftadd@sign:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x22
  1291  000082                     	ds	1
  1292  000083                     move_window@nf:
  1293                           	opt stack 0
  1294  000083                     ___ftadd@exp2:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x23
  1298  000083                     	ds	1
  1299  000084                     ___ftadd@exp1:
  1300                           	opt stack 0
  1301  000084                     ___fttol@exp1:
  1302                           	opt stack 0
  1303  000084                     move_window@wsect:
  1304                           	opt stack 0
  1305                           
  1306                           ; 4 bytes @ 0x24
  1307  000084                     	ds	1
  1308  000085                     ?_convert_to_degrees:
  1309                           	opt stack 0
  1310  000085                     ?___ftsub:
  1311                           	opt stack 0
  1312  000085                     convert_to_degrees@nmea_lat_long:
  1313                           	opt stack 0
  1314  000085                     ___ftsub@f1:
  1315                           	opt stack 0
  1316  000085                     get_latitude@lat_buffer:
  1317                           	opt stack 0
  1318  000085                     get_longitude@long_buffer:
  1319                           	opt stack 0
  1320                           
  1321                           ; 15 bytes @ 0x25
  1322  000085                     	ds	3
  1323  000088                     ?_get_fat:
  1324                           	opt stack 0
  1325  000088                     sync@fs:
  1326                           	opt stack 0
  1327  000088                     get_fat@fs:
  1328                           	opt stack 0
  1329  000088                     put_fat@fs:
  1330                           	opt stack 0
  1331  000088                     convert_to_degrees@minutes:
  1332                           	opt stack 0
  1333  000088                     ___ftsub@f2:
  1334                           	opt stack 0
  1335                           
  1336                           ; 3 bytes @ 0x28
  1337  000088                     	ds	2
  1338  00008A                     ??_sync:
  1339  00008A                     get_fat@clst:
  1340                           	opt stack 0
  1341  00008A                     put_fat@clst:
  1342                           	opt stack 0
  1343                           
  1344                           ; 4 bytes @ 0x2A
  1345  00008A                     	ds	1
  1346  00008B                     ?_sprintf:
  1347                           	opt stack 0
  1348  00008B                     sprintf@sp:
  1349                           	opt stack 0
  1350  00008B                     convert_to_degrees@dec_deg:
  1351                           	opt stack 0
  1352                           
  1353                           ; 3 bytes @ 0x2B
  1354  00008B                     	ds	2
  1355  00008D                     sprintf@f:
  1356                           	opt stack 0
  1357                           
  1358                           ; 2 bytes @ 0x2D
  1359  00008D                     	ds	1
  1360  00008E                     ??_get_fat:
  1361  00008E                     sync@res:
  1362                           	opt stack 0
  1363  00008E                     convert_to_degrees@degrees:
  1364                           	opt stack 0
  1365  00008E                     put_fat@val:
  1366                           	opt stack 0
  1367                           
  1368                           ; 4 bytes @ 0x2E
  1369  00008E                     	ds	1
  1370  00008F                     f_sync@fp:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x2F
  1374  00008F                     	ds	1
  1375  000090                     convert_to_degrees@decimal:
  1376                           	opt stack 0
  1377                           
  1378                           ; 3 bytes @ 0x30
  1379  000090                     	ds	1
  1380  000091                     ??_f_sync:
  1381                           
  1382                           ; 1 bytes @ 0x31
  1383  000091                     	ds	1
  1384  000092                     ??_put_fat:
  1385                           
  1386                           ; 1 bytes @ 0x32
  1387  000092                     	ds	2
  1388  000094                     get_latitude@_latitude:
  1389                           	opt stack 0
  1390  000094                     get_longitude@_longitude:
  1391                           	opt stack 0
  1392                           
  1393                           ; 3 bytes @ 0x34
  1394  000094                     	ds	1
  1395  000095                     ??_sprintf:
  1396  000095                     f_sync@res:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x35
  1400  000095                     	ds	1
  1401  000096                     f_sync@tim:
  1402                           	opt stack 0
  1403                           
  1404                           ; 4 bytes @ 0x36
  1405  000096                     	ds	1
  1406  000097                     get_latitude@lat_pointer:
  1407                           	opt stack 0
  1408  000097                     get_longitude@long_pointer:
  1409                           	opt stack 0
  1410                           
  1411                           ; 1 bytes @ 0x37
  1412  000097                     	ds	1
  1413  000098                     get_latitude@index:
  1414                           	opt stack 0
  1415  000098                     get_longitude@index:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x38
  1419  000098                     	ds	1
  1420  000099                     get_latitude@lat_index:
  1421                           	opt stack 0
  1422  000099                     get_longitude@long_index:
  1423                           	opt stack 0
  1424                           
  1425                           ; 1 bytes @ 0x39
  1426  000099                     	ds	1
  1427  00009A                     f_sync@dir:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x3A
  1431  00009A                     	ds	1
  1432  00009B                     _sprintf$3880:
  1433                           	opt stack 0
  1434                           
  1435                           ; 3 bytes @ 0x3B
  1436  00009B                     	ds	1
  1437  00009C                     f_close@fp:
  1438                           	opt stack 0
  1439                           
  1440                           ; 2 bytes @ 0x3C
  1441  00009C                     	ds	2
  1442  00009E                     f_close@res:
  1443                           	opt stack 0
  1444  00009E                     sprintf@ap:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x3E
  1448  00009E                     	ds	2
  1449  0000A0                     sprintf@flag:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x40
  1453  0000A0                     	ds	2
  1454  0000A2                     sprintf@exp:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x42
  1458  0000A2                     	ds	2
  1459  0000A4                     sprintf@tmpval:
  1460                           	opt stack 0
  1461                           
  1462                           ; 4 bytes @ 0x44
  1463  0000A4                     	ds	4
  1464  0000A8                     _get_fat$2263:
  1465                           	opt stack 0
  1466  0000A8                     sprintf@val:
  1467                           	opt stack 0
  1468                           
  1469                           ; 4 bytes @ 0x48
  1470  0000A8                     	ds	2
  1471  0000AA                     get_fat@wc:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0x4A
  1475  0000AA                     	ds	2
  1476  0000AC                     get_fat@bc:
  1477                           	opt stack 0
  1478  0000AC                     sprintf@prec:
  1479                           	opt stack 0
  1480                           
  1481                           ; 2 bytes @ 0x4C
  1482  0000AC                     	ds	2
  1483  0000AE                     get_fat@p:
  1484                           	opt stack 0
  1485  0000AE                     sprintf@fval:
  1486                           	opt stack 0
  1487                           
  1488                           ; 3 bytes @ 0x4E
  1489  0000AE                     	ds	2
  1490  0000B0                     _put_fat$2289:
  1491                           	opt stack 0
  1492                           
  1493                           ; 2 bytes @ 0x50
  1494  0000B0                     	ds	1
  1495  0000B1                     sprintf@c:
  1496                           	opt stack 0
  1497                           
  1498                           ; 1 bytes @ 0x51
  1499  0000B1                     	ds	1
  1500  0000B2                     _put_fat$2290:
  1501                           	opt stack 0
  1502  0000B2                     convert_time_to_utc@utc_time:
  1503                           	opt stack 0
  1504                           
  1505                           ; 4 bytes @ 0x52
  1506  0000B2                     	ds	2
  1507  0000B4                     put_fat@bc:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x54
  1511  0000B4                     	ds	2
  1512  0000B6                     put_fat@res:
  1513                           	opt stack 0
  1514  0000B6                     _convert_time_to_utc$3876:
  1515                           	opt stack 0
  1516                           
  1517                           ; 4 bytes @ 0x56
  1518  0000B6                     	ds	1
  1519  0000B7                     put_fat@p:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x57
  1523  0000B7                     	ds	2
  1524  0000B9                     ?_create_chain:
  1525                           	opt stack 0
  1526  0000B9                     create_chain@fs:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x59
  1530  0000B9                     	ds	1
  1531  0000BA                     convert_time_to_utc@hour:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x5A
  1535  0000BA                     	ds	1
  1536  0000BB                     create_chain@clst:
  1537                           	opt stack 0
  1538                           
  1539                           ; 4 bytes @ 0x5B
  1540  0000BB                     	ds	1
  1541  0000BC                     convert_time_to_utc@min:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x5C
  1545  0000BC                     	ds	2
  1546  0000BE                     convert_time_to_utc@sec:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x5E
  1550  0000BE                     	ds	1
  1551  0000BF                     
  1552                           ; 1 bytes @ 0x5F
  1553  0000BF                     	ds	1
  1554  0000C0                     ??_gps:
  1555                           
  1556                           ; 1 bytes @ 0x60
  1557  0000C0                     	ds	2
  1558  0000C2                     gps@date:
  1559                           	opt stack 0
  1560                           
  1561                           ; 4 bytes @ 0x62
  1562  0000C2                     	ds	1
  1563  0000C3                     create_chain@scl:
  1564                           	opt stack 0
  1565                           
  1566                           ; 4 bytes @ 0x63
  1567  0000C3                     	ds	3
  1568  0000C6                     gps@gps_buffer:
  1569                           	opt stack 0
  1570                           
  1571                           ; 15 bytes @ 0x66
  1572  0000C6                     	ds	1
  1573  0000C7                     create_chain@cs:
  1574                           	opt stack 0
  1575                           
  1576                           ; 4 bytes @ 0x67
  1577  0000C7                     	ds	4
  1578  0000CB                     create_chain@ncl:
  1579                           	opt stack 0
  1580                           
  1581                           ; 4 bytes @ 0x6B
  1582  0000CB                     	ds	4
  1583  0000CF                     f_write@fp:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x6F
  1587  0000CF                     	ds	2
  1588  0000D1                     f_write@buff:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x71
  1592  0000D1                     	ds	2
  1593  0000D3                     f_write@btw:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x73
  1597  0000D3                     	ds	2
  1598  0000D5                     f_write@bw:
  1599                           	opt stack 0
  1600  0000D5                     gps@time:
  1601                           	opt stack 0
  1602                           
  1603                           ; 4 bytes @ 0x75
  1604  0000D5                     	ds	4
  1605  0000D9                     gps@latitude:
  1606                           	opt stack 0
  1607                           
  1608                           ; 3 bytes @ 0x79
  1609  0000D9                     	ds	3
  1610  0000DC                     gps@longitude:
  1611                           	opt stack 0
  1612                           
  1613                           ; 3 bytes @ 0x7C
  1614  0000DC                     	ds	3
  1615  0000DF                     
  1616                           ; 1 bytes @ 0x7F
  1617  0000DF                     	ds	2
  1618  0000E1                     escalonador@cont:
  1619                           	opt stack 0
  1620                           
  1621                           ; 1 bytes @ 0x81
  1622  0000E1                     	ds	1
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           postdec1	equ	0xFE5
  1630                           fsr1h	equ	0xFE2
  1631                           fsr1l	equ	0xFE1
  1632                           
  1633                           	psect	cstackCOMRAM
  1634  000001                     __pcstackCOMRAM:
  1635                           	opt stack 0
  1636  000001                     i2write_timer_zero@timer0:
  1637                           	opt stack 0
  1638                           
  1639                           ; 2 bytes @ 0x0
  1640  000001                     	ds	2
  1641  000003                     i2write_timer_zero@timer:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x2
  1645  000003                     	ds	2
  1646  000005                     ??_isr:
  1647                           
  1648                           ; 1 bytes @ 0x4
  1649  000005                     	ds	20
  1650  000019                     isr@cont:
  1651                           	opt stack 0
  1652                           
  1653                           ; 1 bytes @ 0x18
  1654  000019                     	ds	1
  1655  00001A                     ??_recebe_dado_SPI:
  1656  00001A                     ??_isdigit:
  1657  00001A                     ??_isspace:
  1658  00001A                     ?_strlen:
  1659                           	opt stack 0
  1660  00001A                     ?___awmod:
  1661                           	opt stack 0
  1662  00001A                     ?___ftpack:
  1663                           	opt stack 0
  1664  00001A                     ?__tdiv_to_l_:
  1665                           	opt stack 0
  1666  00001A                     ?__div_to_l_:
  1667                           	opt stack 0
  1668  00001A                     ?_get_fattime:
  1669                           	opt stack 0
  1670  00001A                     ?___lmul:
  1671                           	opt stack 0
  1672  00001A                     ?___llmod:
  1673                           	opt stack 0
  1674  00001A                     escreve_dado_SPI@contador:
  1675                           	opt stack 0
  1676  00001A                     delay@contador_ext:
  1677                           	opt stack 0
  1678  00001A                     disk_ioctl@ctrl:
  1679                           	opt stack 0
  1680  00001A                     write_timer_zero@timer0:
  1681                           	opt stack 0
  1682  00001A                     mem_cpy@dst:
  1683                           	opt stack 0
  1684  00001A                     mem_set@dst:
  1685                           	opt stack 0
  1686  00001A                     f_mount@fs:
  1687                           	opt stack 0
  1688  00001A                     ___awmod@dividend:
  1689                           	opt stack 0
  1690  00001A                     memset@p1:
  1691                           	opt stack 0
  1692  00001A                     strcat@to:
  1693                           	opt stack 0
  1694  00001A                     strlen@s:
  1695                           	opt stack 0
  1696  00001A                     __div_to_l_@f1:
  1697                           	opt stack 0
  1698  00001A                     ___ftpack@arg:
  1699                           	opt stack 0
  1700  00001A                     __tdiv_to_l_@f1:
  1701                           	opt stack 0
  1702  00001A                     ___ftge@ff1:
  1703                           	opt stack 0
  1704  00001A                     ___lmul@multiplier:
  1705                           	opt stack 0
  1706  00001A                     ___llmod@dividend:
  1707                           	opt stack 0
  1708                           
  1709                           ; 4 bytes @ 0x19
  1710  00001A                     	ds	1
  1711  00001B                     escreve_dado_SPI@data_to_shrc:
  1712                           	opt stack 0
  1713  00001B                     delay@contador_int:
  1714                           	opt stack 0
  1715  00001B                     _isdigit$3308:
  1716                           	opt stack 0
  1717  00001B                     _isspace$3311:
  1718                           	opt stack 0
  1719  00001B                     disk_ioctl@buff:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x1A
  1723  00001B                     	ds	1
  1724  00001C                     ??_strlen:
  1725  00001C                     ??_dummy_clocks:
  1726  00001C                     recebe_dado_SPI@contador:
  1727                           	opt stack 0
  1728  00001C                     escreve_cmd_lcd@comando:
  1729                           	opt stack 0
  1730  00001C                     endereco_cursor_lcd@endereco:
  1731                           	opt stack 0
  1732  00001C                     escreve_caractere_lcd@data:
  1733                           	opt stack 0
  1734  00001C                     isdigit@c:
  1735                           	opt stack 0
  1736  00001C                     isspace@c:
  1737                           	opt stack 0
  1738  00001C                     write_timer_zero@timer:
  1739                           	opt stack 0
  1740  00001C                     mem_cpy@src:
  1741                           	opt stack 0
  1742  00001C                     mem_set@val:
  1743                           	opt stack 0
  1744  00001C                     f_mount@rfs:
  1745                           	opt stack 0
  1746  00001C                     ___awmod@divisor:
  1747                           	opt stack 0
  1748  00001C                     memset@c:
  1749                           	opt stack 0
  1750  00001C                     strcat@from:
  1751                           	opt stack 0
  1752  00001C                     command@arg:
  1753                           	opt stack 0
  1754                           
  1755                           ; 4 bytes @ 0x1B
  1756  00001C                     	ds	1
  1757  00001D                     ??_init_lcd:
  1758  00001D                     response@buff:
  1759                           	opt stack 0
  1760  00001D                     posicao_cursor_lcd@coluna:
  1761                           	opt stack 0
  1762  00001D                     disk_ioctl@drv:
  1763                           	opt stack 0
  1764  00001D                     ___ftpack@exp:
  1765                           	opt stack 0
  1766  00001D                     escreve_frase_ram_lcd@buffer:
  1767                           	opt stack 0
  1768  00001D                     __div_to_l_@f2:
  1769                           	opt stack 0
  1770  00001D                     __tdiv_to_l_@f2:
  1771                           	opt stack 0
  1772  00001D                     ___ftge@ff2:
  1773                           	opt stack 0
  1774                           
  1775                           ; 3 bytes @ 0x1C
  1776  00001D                     	ds	1
  1777  00001E                     dummy_clocks@n:
  1778                           	opt stack 0
  1779  00001E                     posicao_cursor_lcd@linha:
  1780                           	opt stack 0
  1781  00001E                     disk_ioctl@res:
  1782                           	opt stack 0
  1783  00001E                     f_mount@vol:
  1784                           	opt stack 0
  1785  00001E                     ___awmod@counter:
  1786                           	opt stack 0
  1787  00001E                     ___ftpack@sign:
  1788                           	opt stack 0
  1789  00001E                     mem_cpy@cnt:
  1790                           	opt stack 0
  1791  00001E                     mem_set@cnt:
  1792                           	opt stack 0
  1793  00001E                     memset@n:
  1794                           	opt stack 0
  1795  00001E                     strlen@cp:
  1796                           	opt stack 0
  1797  00001E                     ___lmul@multiplicand:
  1798                           	opt stack 0
  1799  00001E                     ___llmod@divisor:
  1800                           	opt stack 0
  1801  00001E                     get_fattime@f_time:
  1802                           	opt stack 0
  1803                           
  1804                           ; 9 bytes @ 0x1D
  1805  00001E                     	ds	1
  1806  00001F                     ??___ftpack:
  1807  00001F                     posicao_cursor_lcd@endereco:
  1808                           	opt stack 0
  1809  00001F                     ___awmod@sign:
  1810                           	opt stack 0
  1811  00001F                     dummy_clocks@i:
  1812                           	opt stack 0
  1813  00001F                     strcat@cp:
  1814                           	opt stack 0
  1815                           
  1816                           ; 2 bytes @ 0x1E
  1817  00001F                     	ds	1
  1818  000020                     ??__tdiv_to_l_:
  1819  000020                     ??___ftge:
  1820  000020                     ?___awdiv:
  1821                           	opt stack 0
  1822  000020                     command@CRC:
  1823                           	opt stack 0
  1824  000020                     mem_cpy@d:
  1825                           	opt stack 0
  1826  000020                     mem_set@d:
  1827                           	opt stack 0
  1828  000020                     ___awdiv@dividend:
  1829                           	opt stack 0
  1830  000020                     memset@p:
  1831                           	opt stack 0
  1832  000020                     __div_to_l_@quot:
  1833                           	opt stack 0
  1834                           
  1835                           ; 4 bytes @ 0x1F
  1836  000020                     	ds	1
  1837  000021                     ?_get_dt:
  1838  000021                     command@CMD:
  1839                           	opt stack 0
  1840                           
  1841                           ; 1 bytes @ 0x20
  1842  000021                     	ds	1
  1843  000022                     ?___ftdiv:
  1844                           	opt stack 0
  1845  000022                     ?___altoft:
  1846                           	opt stack 0
  1847  000022                     ?___awtoft:
  1848                           	opt stack 0
  1849  000022                     ?___lltoft:
  1850                           	opt stack 0
  1851  000022                     command@argument:
  1852                           	opt stack 0
  1853  000022                     ___llmod@counter:
  1854                           	opt stack 0
  1855  000022                     mem_cpy@s:
  1856                           	opt stack 0
  1857  000022                     ___awdiv@divisor:
  1858                           	opt stack 0
  1859  000022                     ___awtoft@c:
  1860                           	opt stack 0
  1861  000022                     ___ftdiv@f1:
  1862                           	opt stack 0
  1863  000022                     ___lmul@product:
  1864                           	opt stack 0
  1865  000022                     ___altoft@c:
  1866                           	opt stack 0
  1867  000022                     ___lltoft@c:
  1868                           	opt stack 0
  1869                           
  1870                           ; 4 bytes @ 0x21
  1871  000022                     	ds	1
  1872  000023                     ?___lldiv:
  1873                           	opt stack 0
  1874  000023                     sdc_disk_status@cont:
  1875                           	opt stack 0
  1876  000023                     sdc_disk_read@p_buff:
  1877                           	opt stack 0
  1878  000023                     sdc_disk_write@p_buff:
  1879                           	opt stack 0
  1880  000023                     __tdiv_to_l_@quot:
  1881                           	opt stack 0
  1882  000023                     ___lldiv@dividend:
  1883                           	opt stack 0
  1884                           
  1885                           ; 4 bytes @ 0x22
  1886  000023                     	ds	1
  1887  000024                     sdc_disk_status@buff:
  1888                           	opt stack 0
  1889  000024                     ___awdiv@counter:
  1890                           	opt stack 0
  1891  000024                     __div_to_l_@cntr:
  1892                           	opt stack 0
  1893                           
  1894                           ; 1 bytes @ 0x23
  1895  000024                     	ds	1
  1896  000025                     ??_get_dt:
  1897  000025                     sdc_disk_status@stat:
  1898                           	opt stack 0
  1899  000025                     ___awdiv@sign:
  1900                           	opt stack 0
  1901  000025                     ___awtoft@sign:
  1902                           	opt stack 0
  1903  000025                     __div_to_l_@exp1:
  1904                           	opt stack 0
  1905  000025                     ___ftdiv@f2:
  1906                           	opt stack 0
  1907  000025                     sdc_disk_read@sector:
  1908                           	opt stack 0
  1909  000025                     sdc_disk_write@sector:
  1910                           	opt stack 0
  1911                           
  1912                           ; 4 bytes @ 0x24
  1913  000025                     	ds	1
  1914  000026                     ??___altoft:
  1915  000026                     ??___lltoft:
  1916  000026                     ?_atol:
  1917                           	opt stack 0
  1918  000026                     ?_clust2sect:
  1919                           	opt stack 0
  1920  000026                     disk_status@drv:
  1921                           	opt stack 0
  1922  000026                     clust2sect@fs:
  1923                           	opt stack 0
  1924  000026                     atol@s:
  1925                           	opt stack 0
  1926  000026                     ___awdiv@quotient:
  1927                           	opt stack 0
  1928                           
  1929                           ; 2 bytes @ 0x25
  1930  000026                     	ds	1
  1931  000027                     disk_status@stat:
  1932                           	opt stack 0
  1933  000027                     __tdiv_to_l_@cntr:
  1934                           	opt stack 0
  1935  000027                     ___lldiv@divisor:
  1936                           	opt stack 0
  1937                           
  1938                           ; 4 bytes @ 0x26
  1939  000027                     	ds	1
  1940  000028                     ??___ftdiv:
  1941  000028                     ?___wmul:
  1942                           	opt stack 0
  1943  000028                     __tdiv_to_l_@exp1:
  1944                           	opt stack 0
  1945  000028                     validate@fs:
  1946                           	opt stack 0
  1947  000028                     ___wmul@multiplier:
  1948                           	opt stack 0
  1949  000028                     clust2sect@clst:
  1950                           	opt stack 0
  1951                           
  1952                           ; 4 bytes @ 0x27
  1953  000028                     	ds	1
  1954  000029                     sdc_disk_read@count:
  1955                           	opt stack 0
  1956  000029                     sdc_disk_write@count:
  1957                           	opt stack 0
  1958                           
  1959                           ; 1 bytes @ 0x28
  1960  000029                     	ds	1
  1961  00002A                     ??_atol:
  1962  00002A                     ??_sdc_disk_read:
  1963  00002A                     ??_sdc_disk_write:
  1964  00002A                     ___altoft@exp:
  1965                           	opt stack 0
  1966  00002A                     ___lltoft@exp:
  1967                           	opt stack 0
  1968  00002A                     validate@id:
  1969                           	opt stack 0
  1970  00002A                     ___wmul@multiplicand:
  1971                           	opt stack 0
  1972                           
  1973                           ; 2 bytes @ 0x29
  1974  00002A                     	ds	1
  1975  00002B                     ___altoft@sign:
  1976                           	opt stack 0
  1977                           
  1978                           ; 1 bytes @ 0x2A
  1979  00002B                     	ds	1
  1980  00002C                     ??_validate:
  1981  00002C                     ___wmul@product:
  1982                           	opt stack 0
  1983                           
  1984                           ; 2 bytes @ 0x2B
  1985  00002C                     	ds	2
  1986  00002E                     tblptru	equ	0xFF8
  1987                           tblptrh	equ	0xFF7
  1988                           tblptrl	equ	0xFF6
  1989                           tablat	equ	0xFF5
  1990                           postinc0	equ	0xFEE
  1991                           wreg	equ	0xFE8
  1992                           postdec1	equ	0xFE5
  1993                           fsr1h	equ	0xFE2
  1994                           fsr1l	equ	0xFE1
  1995                           
  1996                           ; 1 bytes @ 0x2D
  1997 ;;
  1998 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1999 ;;
  2000 ;; *************** function _main *****************
  2001 ;; Defined at:
  2002 ;;		line 207 in file "main.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;		None
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;		None
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  1    wreg      void 
  2009 ;; Registers used:
  2010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2016 ;;      Params:         0       0       0       0       0       0       0       0       0
  2017 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2018 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2019 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2020 ;;Total ram usage:        0 bytes
  2021 ;; Hardware stack levels required when called:   13
  2022 ;; This function calls:
  2023 ;;		_escalonador
  2024 ;;		_inicializa_shrc
  2025 ;;		_inicializa_tarefas
  2026 ;;		_init_hardware
  2027 ;;		_init_lcd
  2028 ;; This function is called by:
  2029 ;;		Startup code after reset
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           	psect	text0
  2034  00519A                     __ptext0:
  2035                           	opt stack 0
  2036  00519A                     _main:
  2037                           	opt stack 18
  2038                           
  2039                           ;main.c: 209: init_hardware();
  2040                           
  2041                           ;incstack = 0
  2042  00519A  EC3A  F029         	call	_init_hardware	;wreg free
  2043                           
  2044                           ;main.c: 211: init_lcd();
  2045  00519E  ECC3  F021         	call	_init_lcd	;wreg free
  2046                           
  2047                           ;main.c: 212: inicializa_shrc();
  2048  0051A2  EC6F  F029         	call	_inicializa_shrc	;wreg free
  2049                           
  2050                           ;main.c: 215: inicializa_tarefas();;
  2051  0051A6  EC08  F028         	call	_inicializa_tarefas	;wreg free
  2052                           
  2053                           ;main.c: 217: ADCON1 = 0X0F;
  2054  0051AA  0E0F               	movlw	15
  2055  0051AC  6EC1               	movwf	4033,c	;volatile
  2056  0051AE                     
  2057                           ;main.c: 219: {
  2058                           ;main.c: 221: if ((sinaliza_int_timer == 1) && (2))
  2059  0051AE  0444               	decf	_sinaliza_int_timer,w,c
  2060  0051B0  A4D8               	btfss	status,2,c
  2061  0051B2  D7FD               	goto	l75
  2062                           
  2063                           ;main.c: 222: {
  2064                           ;main.c: 223: sinaliza_int_timer = 0;
  2065  0051B4  0E00               	movlw	0
  2066  0051B6  6E44               	movwf	_sinaliza_int_timer,c
  2067                           
  2068                           ;main.c: 224: escalonador();
  2069  0051B8  EC71  F021         	call	_escalonador	;wreg free
  2070  0051BC  D7F8               	goto	l75
  2071  0051BE                     __end_of_main:
  2072                           	opt stack 0
  2073                           tblptru	equ	0xFF8
  2074                           tblptrh	equ	0xFF7
  2075                           tblptrl	equ	0xFF6
  2076                           tablat	equ	0xFF5
  2077                           postinc0	equ	0xFEE
  2078                           wreg	equ	0xFE8
  2079                           postdec1	equ	0xFE5
  2080                           fsr1h	equ	0xFE2
  2081                           fsr1l	equ	0xFE1
  2082                           status	equ	0xFD8
  2083                           
  2084 ;; *************** function _init_lcd *****************
  2085 ;; Defined at:
  2086 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;		None
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;		None
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  1    wreg      void 
  2093 ;; Registers used:
  2094 ;;		wreg, status,2, status,0, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2100 ;;      Params:         0       0       0       0       0       0       0       0       0
  2101 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2102 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2103 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2104 ;;Total ram usage:        1 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; Hardware stack levels required when called:    4
  2107 ;; This function calls:
  2108 ;;		_delay
  2109 ;;		_escreve_cmd_lcd
  2110 ;; This function is called by:
  2111 ;;		_main
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text1
  2116  004386                     __ptext1:
  2117                           	opt stack 0
  2118  004386                     _init_lcd:
  2119                           	opt stack 26
  2120                           
  2121                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2122                           
  2123                           ;incstack = 0
  2124  004386  9495               	bcf	3989,2,c	;volatile
  2125                           
  2126                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2127  004388  9295               	bcf	3989,1,c	;volatile
  2128                           
  2129                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2130  00438A  9095               	bcf	3989,0,c	;volatile
  2131                           
  2132                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2133  00438C  9895               	bcf	3989,4,c	;volatile
  2134                           
  2135                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2136  00438E  9A95               	bcf	3989,5,c	;volatile
  2137                           
  2138                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2139  004390  9C95               	bcf	3989,6,c	;volatile
  2140                           
  2141                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2142  004392  9E95               	bcf	3989,7,c	;volatile
  2143                           
  2144                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2145  004394  9483               	bcf	3971,2,c	;volatile
  2146                           
  2147                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2148  004396  9283               	bcf	3971,1,c	;volatile
  2149                           
  2150                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2151  004398  9083               	bcf	3971,0,c	;volatile
  2152                           
  2153                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2154  00439A  9E83               	bcf	3971,7,c	;volatile
  2155                           
  2156                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2157  00439C  9C83               	bcf	3971,6,c	;volatile
  2158                           
  2159                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2160  00439E  8A83               	bsf	3971,5,c	;volatile
  2161                           
  2162                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2163  0043A0  8883               	bsf	3971,4,c	;volatile
  2164                           
  2165                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2166  0043A2  0EEA               	movlw	234
  2167  0043A4  6E1D               	movwf	??_init_lcd& (0+255),c
  2168  0043A6  0EC3               	movlw	195
  2169  0043A8                     u19157:
  2170  0043A8  2EE8               	decfsz	wreg,f,c
  2171  0043AA  D7FE               	bra	u19157
  2172  0043AC  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2173  0043AE  D7FC               	bra	u19157
  2174  0043B0  F000               	nop	
  2175                           
  2176                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2177  0043B2  8083               	bsf	3971,0,c	;volatile
  2178                           
  2179                           ;display_lcd.c: 108: delay();
  2180  0043B4  ECF1  F028         	call	_delay	;wreg free
  2181                           
  2182                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2183  0043B8  9083               	bcf	3971,0,c	;volatile
  2184                           
  2185                           ;display_lcd.c: 110: delay();
  2186  0043BA  ECF1  F028         	call	_delay	;wreg free
  2187                           
  2188                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2189  0043BE  0E4E               	movlw	78
  2190  0043C0  6E1D               	movwf	??_init_lcd& (0+255),c
  2191  0043C2  0EEB               	movlw	235
  2192  0043C4                     u19167:
  2193  0043C4  2EE8               	decfsz	wreg,f,c
  2194  0043C6  D7FE               	bra	u19167
  2195  0043C8  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2196  0043CA  D7FC               	bra	u19167
  2197  0043CC  F000               	nop	
  2198                           
  2199                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2200  0043CE  8083               	bsf	3971,0,c	;volatile
  2201                           
  2202                           ;display_lcd.c: 119: delay();
  2203  0043D0  ECF1  F028         	call	_delay	;wreg free
  2204                           
  2205                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2206  0043D4  9083               	bcf	3971,0,c	;volatile
  2207                           
  2208                           ;display_lcd.c: 121: delay();
  2209  0043D6  ECF1  F028         	call	_delay	;wreg free
  2210                           
  2211                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2212  0043DA  0E4E               	movlw	78
  2213  0043DC  6E1D               	movwf	??_init_lcd& (0+255),c
  2214  0043DE  0EEB               	movlw	235
  2215  0043E0                     u19177:
  2216  0043E0  2EE8               	decfsz	wreg,f,c
  2217  0043E2  D7FE               	bra	u19177
  2218  0043E4  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2219  0043E6  D7FC               	bra	u19177
  2220  0043E8  F000               	nop	
  2221                           
  2222                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2223  0043EA  8083               	bsf	3971,0,c	;volatile
  2224                           
  2225                           ;display_lcd.c: 130: delay();
  2226  0043EC  ECF1  F028         	call	_delay	;wreg free
  2227                           
  2228                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2229  0043F0  9083               	bcf	3971,0,c	;volatile
  2230                           
  2231                           ;display_lcd.c: 132: delay();
  2232  0043F2  ECF1  F028         	call	_delay	;wreg free
  2233                           
  2234                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2235  0043F6  9E83               	bcf	3971,7,c	;volatile
  2236                           
  2237                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2238  0043F8  9C83               	bcf	3971,6,c	;volatile
  2239                           
  2240                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2241  0043FA  8A83               	bsf	3971,5,c	;volatile
  2242                           
  2243                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2244  0043FC  9883               	bcf	3971,4,c	;volatile
  2245                           
  2246                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2247  0043FE  8083               	bsf	3971,0,c	;volatile
  2248                           
  2249                           ;display_lcd.c: 143: delay();
  2250  004400  ECF1  F028         	call	_delay	;wreg free
  2251                           
  2252                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2253  004404  9083               	bcf	3971,0,c	;volatile
  2254                           
  2255                           ;display_lcd.c: 145: delay();
  2256  004406  ECF1  F028         	call	_delay	;wreg free
  2257                           
  2258                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2259  00440A  0E28               	movlw	40
  2260  00440C  ECE6  F022         	call	_escreve_cmd_lcd
  2261                           
  2262                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2263  004410  0E06               	movlw	6
  2264  004412  ECE6  F022         	call	_escreve_cmd_lcd
  2265                           
  2266                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2267  004416  0E0E               	movlw	14
  2268  004418  ECE6  F022         	call	_escreve_cmd_lcd
  2269                           
  2270                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2271  00441C  0E01               	movlw	1
  2272  00441E  ECE6  F022         	call	_escreve_cmd_lcd
  2273  004422  0012               	return		;funcret
  2274  004424                     __end_of_init_lcd:
  2275                           	opt stack 0
  2276                           tblptru	equ	0xFF8
  2277                           tblptrh	equ	0xFF7
  2278                           tblptrl	equ	0xFF6
  2279                           tablat	equ	0xFF5
  2280                           postinc0	equ	0xFEE
  2281                           wreg	equ	0xFE8
  2282                           postdec1	equ	0xFE5
  2283                           fsr1h	equ	0xFE2
  2284                           fsr1l	equ	0xFE1
  2285                           status	equ	0xFD8
  2286                           
  2287 ;; *************** function _init_hardware *****************
  2288 ;; Defined at:
  2289 ;;		line 55 in file "bibliotecas/hardware.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;		None
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;		None
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  1    wreg      void 
  2296 ;; Registers used:
  2297 ;;		wreg, status,2, cstack
  2298 ;; Tracked objects:
  2299 ;;		On entry : 0/0
  2300 ;;		On exit  : 0/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2303 ;;      Params:         0       0       0       0       0       0       0       0       0
  2304 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2305 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2306 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2307 ;;Total ram usage:        0 bytes
  2308 ;; Hardware stack levels used:    1
  2309 ;; Hardware stack levels required when called:    4
  2310 ;; This function calls:
  2311 ;;		_config_timer_dois
  2312 ;;		_config_timer_zero
  2313 ;;		_init_interrupt
  2314 ;;		_init_oscilador
  2315 ;;		_init_ports
  2316 ;; This function is called by:
  2317 ;;		_main
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           	psect	text2
  2322  005274                     __ptext2:
  2323                           	opt stack 0
  2324  005274                     _init_hardware:
  2325                           	opt stack 26
  2326                           
  2327                           ;hardware.c: 58: init_oscilador();
  2328                           
  2329                           ;incstack = 0
  2330  005274  EC81  F029         	call	_init_oscilador	;wreg free
  2331                           
  2332                           ;hardware.c: 61: init_ports();
  2333  005278  EC2E  F029         	call	_init_ports	;wreg free
  2334                           
  2335                           ;hardware.c: 64: config_timer_zero();
  2336  00527C  EC21  F029         	call	_config_timer_zero	;wreg free
  2337                           
  2338                           ;hardware.c: 67: config_timer_dois();
  2339  005280  EC69  F029         	call	_config_timer_dois	;wreg free
  2340                           
  2341                           ;hardware.c: 70: init_interrupt();
  2342  005284  EC45  F029         	call	_init_interrupt	;wreg free
  2343  005288  0012               	return		;funcret
  2344  00528A                     __end_of_init_hardware:
  2345                           	opt stack 0
  2346                           tblptru	equ	0xFF8
  2347                           tblptrh	equ	0xFF7
  2348                           tblptrl	equ	0xFF6
  2349                           tablat	equ	0xFF5
  2350                           postinc0	equ	0xFEE
  2351                           wreg	equ	0xFE8
  2352                           postdec1	equ	0xFE5
  2353                           fsr1h	equ	0xFE2
  2354                           fsr1l	equ	0xFE1
  2355                           status	equ	0xFD8
  2356                           
  2357 ;; *************** function _init_ports *****************
  2358 ;; Defined at:
  2359 ;;		line 154 in file "bibliotecas/hardware.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;		None
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      void 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2373 ;;      Params:         0       0       0       0       0       0       0       0       0
  2374 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2376 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2377 ;;Total ram usage:        0 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    2
  2380 ;; This function calls:
  2381 ;;		Nothing
  2382 ;; This function is called by:
  2383 ;;		_init_hardware
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           	psect	text3
  2388  00525C                     __ptext3:
  2389                           	opt stack 0
  2390  00525C                     _init_ports:
  2391                           	opt stack 27
  2392                           
  2393                           ;hardware.c: 156: TRISB = 0b00100001;
  2394                           
  2395                           ;incstack = 0
  2396  00525C  0E21               	movlw	33
  2397  00525E  6E93               	movwf	3987,c	;volatile
  2398                           
  2399                           ;hardware.c: 157: LATB = 0xFF;
  2400  005260  688A               	setf	3978,c	;volatile
  2401                           
  2402                           ;hardware.c: 158: TRISD = 0x00;
  2403  005262  0E00               	movlw	0
  2404  005264  6E95               	movwf	3989,c	;volatile
  2405                           
  2406                           ;hardware.c: 159: TRISA = 0b00000111;
  2407  005266  0E07               	movlw	7
  2408  005268  6E92               	movwf	3986,c	;volatile
  2409                           
  2410                           ;hardware.c: 160: TRISC = 0x01111111;
  2411  00526A  0E11               	movlw	17
  2412  00526C  6E94               	movwf	3988,c	;volatile
  2413                           
  2414                           ;hardware.c: 161: TRISE = 0b00000011;
  2415  00526E  0E03               	movlw	3
  2416  005270  6E96               	movwf	3990,c	;volatile
  2417  005272  0012               	return		;funcret
  2418  005274                     __end_of_init_ports:
  2419                           	opt stack 0
  2420                           tblptru	equ	0xFF8
  2421                           tblptrh	equ	0xFF7
  2422                           tblptrl	equ	0xFF6
  2423                           tablat	equ	0xFF5
  2424                           postinc0	equ	0xFEE
  2425                           wreg	equ	0xFE8
  2426                           postdec1	equ	0xFE5
  2427                           fsr1h	equ	0xFE2
  2428                           fsr1l	equ	0xFE1
  2429                           status	equ	0xFD8
  2430                           
  2431 ;; *************** function _init_oscilador *****************
  2432 ;; Defined at:
  2433 ;;		line 171 in file "bibliotecas/hardware.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;		None
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;		None
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      void 
  2440 ;; Registers used:
  2441 ;;		None
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2447 ;;      Params:         0       0       0       0       0       0       0       0       0
  2448 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2449 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2450 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2451 ;;Total ram usage:        0 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; Hardware stack levels required when called:    2
  2454 ;; This function calls:
  2455 ;;		Nothing
  2456 ;; This function is called by:
  2457 ;;		_init_hardware
  2458 ;; This function uses a non-reentrant model
  2459 ;;
  2460                           
  2461                           	psect	text4
  2462  005302                     __ptext4:
  2463                           	opt stack 0
  2464  005302                     _init_oscilador:
  2465                           	opt stack 27
  2466                           
  2467                           ;hardware.c: 174: OSCCONbits.IRCF0 = 1;
  2468                           
  2469                           ;incstack = 0
  2470  005302  88D3               	bsf	4051,4,c	;volatile
  2471                           
  2472                           ;hardware.c: 175: OSCCONbits.IRCF1 = 1;
  2473  005304  8AD3               	bsf	4051,5,c	;volatile
  2474                           
  2475                           ;hardware.c: 176: OSCCONbits.IRCF2 = 1;
  2476  005306  8CD3               	bsf	4051,6,c	;volatile
  2477  005308  0012               	return		;funcret
  2478  00530A                     __end_of_init_oscilador:
  2479                           	opt stack 0
  2480                           tblptru	equ	0xFF8
  2481                           tblptrh	equ	0xFF7
  2482                           tblptrl	equ	0xFF6
  2483                           tablat	equ	0xFF5
  2484                           postinc0	equ	0xFEE
  2485                           wreg	equ	0xFE8
  2486                           postdec1	equ	0xFE5
  2487                           fsr1h	equ	0xFE2
  2488                           fsr1l	equ	0xFE1
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function _init_interrupt *****************
  2492 ;; Defined at:
  2493 ;;		line 98 in file "bibliotecas/hardware.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;		None
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;		None
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  1    wreg      void 
  2500 ;; Registers used:
  2501 ;;		wreg, status,2
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2507 ;;      Params:         0       0       0       0       0       0       0       0       0
  2508 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2509 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2510 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2511 ;;Total ram usage:        0 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    2
  2514 ;; This function calls:
  2515 ;;		Nothing
  2516 ;; This function is called by:
  2517 ;;		_init_hardware
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           	psect	text5
  2522  00528A                     __ptext5:
  2523                           	opt stack 0
  2524  00528A                     _init_interrupt:
  2525                           	opt stack 27
  2526                           
  2527                           ;hardware.c: 100: INTCON = 0b11110000;
  2528                           
  2529                           ;incstack = 0
  2530  00528A  0EF0               	movlw	240
  2531  00528C  6EF2               	movwf	intcon,c	;volatile
  2532                           
  2533                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2534  00528E  0E00               	movlw	0
  2535  005290  6EF1               	movwf	intcon2,c	;volatile
  2536                           
  2537                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2538  005292  0E00               	movlw	0
  2539  005294  6EF0               	movwf	intcon3,c	;volatile
  2540                           
  2541                           ;hardware.c: 104: PIE1 = 0b00100000;
  2542  005296  0E20               	movlw	32
  2543  005298  6E9D               	movwf	3997,c	;volatile
  2544  00529A  0012               	return		;funcret
  2545  00529C                     __end_of_init_interrupt:
  2546                           	opt stack 0
  2547                           tblptru	equ	0xFF8
  2548                           tblptrh	equ	0xFF7
  2549                           tblptrl	equ	0xFF6
  2550                           tablat	equ	0xFF5
  2551                           intcon	equ	0xFF2
  2552                           intcon2	equ	0xFF1
  2553                           intcon3	equ	0xFF0
  2554                           postinc0	equ	0xFEE
  2555                           wreg	equ	0xFE8
  2556                           postdec1	equ	0xFE5
  2557                           fsr1h	equ	0xFE2
  2558                           fsr1l	equ	0xFE1
  2559                           status	equ	0xFD8
  2560                           
  2561 ;; *************** function _config_timer_zero *****************
  2562 ;; Defined at:
  2563 ;;		line 83 in file "bibliotecas/hardware.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;		None
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;		None
  2568 ;; Return value:  Size  Location     Type
  2569 ;;                  1    wreg      void 
  2570 ;; Registers used:
  2571 ;;		wreg, status,2, cstack
  2572 ;; Tracked objects:
  2573 ;;		On entry : 0/0
  2574 ;;		On exit  : 0/0
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2577 ;;      Params:         0       0       0       0       0       0       0       0       0
  2578 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2579 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2580 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2581 ;;Total ram usage:        0 bytes
  2582 ;; Hardware stack levels used:    1
  2583 ;; Hardware stack levels required when called:    3
  2584 ;; This function calls:
  2585 ;;		_write_timer_zero
  2586 ;; This function is called by:
  2587 ;;		_init_hardware
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           	psect	text6
  2592  005242                     __ptext6:
  2593                           	opt stack 0
  2594  005242                     _config_timer_zero:
  2595                           	opt stack 26
  2596                           
  2597                           ;hardware.c: 85: T0CON = 0b11000011;
  2598                           
  2599                           ;incstack = 0
  2600  005242  0EC3               	movlw	195
  2601  005244  6ED5               	movwf	4053,c	;volatile
  2602                           
  2603                           ;hardware.c: 86: SPPCON = 0b00000000;
  2604  005246  0E00               	movlw	0
  2605  005248  6E65               	movwf	3941,c	;volatile
  2606                           
  2607                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2608  00524A  0E00               	movlw	0
  2609  00524C  6E63               	movwf	3939,c	;volatile
  2610                           
  2611                           ;hardware.c: 88: write_timer_zero(0x0083);
  2612  00524E  0E00               	movlw	0
  2613  005250  6E1B               	movwf	write_timer_zero@timer0+1,c
  2614  005252  0E83               	movlw	131
  2615  005254  6E1A               	movwf	write_timer_zero@timer0,c
  2616  005256  EC4E  F029         	call	_write_timer_zero	;wreg free
  2617  00525A  0012               	return		;funcret
  2618  00525C                     __end_of_config_timer_zero:
  2619                           	opt stack 0
  2620                           tblptru	equ	0xFF8
  2621                           tblptrh	equ	0xFF7
  2622                           tblptrl	equ	0xFF6
  2623                           tablat	equ	0xFF5
  2624                           intcon	equ	0xFF2
  2625                           intcon2	equ	0xFF1
  2626                           intcon3	equ	0xFF0
  2627                           postinc0	equ	0xFEE
  2628                           wreg	equ	0xFE8
  2629                           postdec1	equ	0xFE5
  2630                           fsr1h	equ	0xFE2
  2631                           fsr1l	equ	0xFE1
  2632                           status	equ	0xFD8
  2633                           
  2634 ;; *************** function _write_timer_zero *****************
  2635 ;; Defined at:
  2636 ;;		line 138 in file "bibliotecas/hardware.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  timer0          2   25[COMRAM] unsigned int 
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  timer           2   27[COMRAM] struct Timers
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		None
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2650 ;;      Params:         2       0       0       0       0       0       0       0       0
  2651 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2652 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2653 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2654 ;;Total ram usage:        4 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    2
  2657 ;; This function calls:
  2658 ;;		Nothing
  2659 ;; This function is called by:
  2660 ;;		_config_timer_zero
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           	psect	text7
  2665  00529C                     __ptext7:
  2666                           	opt stack 0
  2667  00529C                     _write_timer_zero:
  2668                           	opt stack 26
  2669                           
  2670                           ;hardware.c: 140: union Timers timer;
  2671                           ;hardware.c: 142: timer.lt = timer0;
  2672                           
  2673                           ;incstack = 0
  2674  00529C  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2675  0052A0  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2676                           
  2677                           ;hardware.c: 144: TMR0H = timer.bt[1];
  2678  0052A4  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2679                           
  2680                           ;hardware.c: 145: TMR0L = timer.bt[0];
  2681  0052A8  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2682  0052AC  0012               	return		;funcret
  2683  0052AE                     __end_of_write_timer_zero:
  2684                           	opt stack 0
  2685                           tblptru	equ	0xFF8
  2686                           tblptrh	equ	0xFF7
  2687                           tblptrl	equ	0xFF6
  2688                           tablat	equ	0xFF5
  2689                           intcon	equ	0xFF2
  2690                           intcon2	equ	0xFF1
  2691                           intcon3	equ	0xFF0
  2692                           postinc0	equ	0xFEE
  2693                           wreg	equ	0xFE8
  2694                           postdec1	equ	0xFE5
  2695                           fsr1h	equ	0xFE2
  2696                           fsr1l	equ	0xFE1
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _config_timer_dois *****************
  2700 ;; Defined at:
  2701 ;;		line 200 in file "bibliotecas/hardware.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;		None
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;		None
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  1    wreg      void 
  2708 ;; Registers used:
  2709 ;;		wreg, status,2
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2715 ;;      Params:         0       0       0       0       0       0       0       0       0
  2716 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2717 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2718 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2719 ;;Total ram usage:        0 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; Hardware stack levels required when called:    2
  2722 ;; This function calls:
  2723 ;;		Nothing
  2724 ;; This function is called by:
  2725 ;;		_init_hardware
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text8
  2730  0052D2                     __ptext8:
  2731                           	opt stack 0
  2732  0052D2                     _config_timer_dois:
  2733                           	opt stack 27
  2734                           
  2735                           ;hardware.c: 202: T2CON = 0b00000100;
  2736                           
  2737                           ;incstack = 0
  2738  0052D2  0E04               	movlw	4
  2739  0052D4  6ECA               	movwf	4042,c	;volatile
  2740                           
  2741                           ;hardware.c: 203: TMR2 = 0;
  2742  0052D6  0E00               	movlw	0
  2743  0052D8  6ECC               	movwf	4044,c	;volatile
  2744                           
  2745                           ;hardware.c: 204: PR2 = 0xFF;
  2746  0052DA  68CB               	setf	4043,c	;volatile
  2747  0052DC  0012               	return		;funcret
  2748  0052DE                     __end_of_config_timer_dois:
  2749                           	opt stack 0
  2750                           tblptru	equ	0xFF8
  2751                           tblptrh	equ	0xFF7
  2752                           tblptrl	equ	0xFF6
  2753                           tablat	equ	0xFF5
  2754                           intcon	equ	0xFF2
  2755                           intcon2	equ	0xFF1
  2756                           intcon3	equ	0xFF0
  2757                           postinc0	equ	0xFEE
  2758                           wreg	equ	0xFE8
  2759                           postdec1	equ	0xFE5
  2760                           fsr1h	equ	0xFE2
  2761                           fsr1l	equ	0xFE1
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function _inicializa_tarefas *****************
  2765 ;; Defined at:
  2766 ;;		line 157 in file "main.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, status,2, status,0
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2780 ;;      Params:         0       0       0       0       0       0       0       0       0
  2781 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2783 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2784 ;;Total ram usage:        0 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    2
  2787 ;; This function calls:
  2788 ;;		Nothing
  2789 ;; This function is called by:
  2790 ;;		_main
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           	psect	text9
  2795  005010                     __ptext9:
  2796                           	opt stack 0
  2797  005010                     _inicializa_tarefas:
  2798                           	opt stack 28
  2799                           
  2800                           ;main.c: 160: p_tarefas[0] = SDCard;
  2801                           
  2802                           ;incstack = 0
  2803  005010  0E38               	movlw	low _SDCard
  2804  005012  0100               	movlb	0	; () banked
  2805  005014  6FEA               	movwf	_p_tarefas& (0+255),b
  2806  005016  0E42               	movlw	high _SDCard
  2807  005018  6FEB               	movwf	(_p_tarefas+1)& (0+255),b
  2808                           
  2809                           ;main.c: 161: p_tarefas[1] = gps;
  2810  00501A  0EA4               	movlw	low _gps
  2811  00501C  6FEC               	movwf	(_p_tarefas+2)& (0+255),b
  2812  00501E  0E2E               	movlw	high _gps
  2813  005020  6FED               	movwf	(_p_tarefas+3)& (0+255),b
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;main.c: 164: tempo_backup[0] = 5000;
  2817  005022  0E13               	movlw	19
  2818  005024  6FE7               	movwf	(_tempo_backup+1)& (0+255),b
  2819  005026  0E88               	movlw	136
  2820  005028  6FE6               	movwf	_tempo_backup& (0+255),b
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;main.c: 165: tempo_backup[1] = 5000;
  2824  00502A  0E13               	movlw	19
  2825  00502C  6FE9               	movwf	(_tempo_backup+3)& (0+255),b
  2826  00502E  0E88               	movlw	136
  2827  005030  6FE8               	movwf	(_tempo_backup+2)& (0+255),b
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;main.c: 170: tempo_tarefa[0] = 5000;
  2831  005032  0E13               	movlw	19
  2832  005034  6FE3               	movwf	(_tempo_tarefa+1)& (0+255),b
  2833  005036  0E88               	movlw	136
  2834  005038  6FE2               	movwf	_tempo_tarefa& (0+255),b
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;main.c: 171: tempo_tarefa[1] = 5000;
  2838  00503A  0E13               	movlw	19
  2839  00503C  6FE5               	movwf	(_tempo_tarefa+3)& (0+255),b
  2840  00503E  0E88               	movlw	136
  2841  005040  6FE4               	movwf	(_tempo_tarefa+2)& (0+255),b
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;main.c: 175: tarefa_em_execucao = 0;
  2845  005042  0E00               	movlw	0
  2846  005044  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  2847                           
  2848                           ; BSR set to: 0
  2849  005046  0012               	return		;funcret
  2850  005048                     __end_of_inicializa_tarefas:
  2851                           	opt stack 0
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           intcon	equ	0xFF2
  2857                           intcon2	equ	0xFF1
  2858                           intcon3	equ	0xFF0
  2859                           postinc0	equ	0xFEE
  2860                           wreg	equ	0xFE8
  2861                           postdec1	equ	0xFE5
  2862                           fsr1h	equ	0xFE2
  2863                           fsr1l	equ	0xFE1
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function _inicializa_shrc *****************
  2867 ;; Defined at:
  2868 ;;		line 48 in file "bibliotecas/SHRC.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;		None
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		None
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2882 ;;      Params:         0       0       0       0       0       0       0       0       0
  2883 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2885 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2886 ;;Total ram usage:        0 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    2
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		_main
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	text10
  2897  0052DE                     __ptext10:
  2898                           	opt stack 0
  2899  0052DE                     _inicializa_shrc:
  2900                           	opt stack 28
  2901                           
  2902                           ;SHRC.c: 51: TRISBbits.RB6 = 0;
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;incstack = 0
  2906  0052DE  9C93               	bcf	3987,6,c	;volatile
  2907                           
  2908                           ;SHRC.c: 52: TRISBbits.RB5 = 1;
  2909  0052E0  8A93               	bsf	3987,5,c	;volatile
  2910                           
  2911                           ;SHRC.c: 53: TRISBbits.RB7 = 0;
  2912  0052E2  9E93               	bcf	3987,7,c	;volatile
  2913                           
  2914                           ;SHRC.c: 56: LATBbits.LATB6 = 0;
  2915  0052E4  9C8A               	bcf	3978,6,c	;volatile
  2916                           
  2917                           ;SHRC.c: 57: LATBbits.LATB7 = 0;
  2918  0052E6  9E8A               	bcf	3978,7,c	;volatile
  2919  0052E8  0012               	return		;funcret
  2920  0052EA                     __end_of_inicializa_shrc:
  2921                           	opt stack 0
  2922                           tblptru	equ	0xFF8
  2923                           tblptrh	equ	0xFF7
  2924                           tblptrl	equ	0xFF6
  2925                           tablat	equ	0xFF5
  2926                           intcon	equ	0xFF2
  2927                           intcon2	equ	0xFF1
  2928                           intcon3	equ	0xFF0
  2929                           postinc0	equ	0xFEE
  2930                           wreg	equ	0xFE8
  2931                           postdec1	equ	0xFE5
  2932                           fsr1h	equ	0xFE2
  2933                           fsr1l	equ	0xFE1
  2934                           status	equ	0xFD8
  2935                           
  2936 ;; *************** function _escalonador *****************
  2937 ;; Defined at:
  2938 ;;		line 186 in file "main.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;		None
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;  cont            1  129[BANK0 ] unsigned char 
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      void 
  2945 ;; Registers used:
  2946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2952 ;;      Params:         0       0       0       0       0       0       0       0       0
  2953 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2954 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2955 ;;      Totals:         0       3       0       0       0       0       0       0       0
  2956 ;;Total ram usage:        3 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:   12
  2959 ;; This function calls:
  2960 ;;		_SDCard
  2961 ;;		_gps
  2962 ;; This function is called by:
  2963 ;;		_main
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           	psect	text11
  2968  0042E2                     __ptext11:
  2969                           	opt stack 0
  2970  0042E2                     _escalonador:
  2971                           	opt stack 18
  2972                           
  2973                           ;main.c: 188: unsigned char cont;
  2974                           ;main.c: 189: for(cont = 0; cont<2;cont++)
  2975                           
  2976                           ;incstack = 0
  2977  0042E2  0E00               	movlw	0
  2978  0042E4  0100               	movlb	0	; () banked
  2979  0042E6  6FE1               	movwf	escalonador@cont& (0+255),b
  2980  0042E8                     l13468:
  2981                           
  2982                           ; BSR set to: 0
  2983  0042E8  0E01               	movlw	1
  2984  0042EA  65E1               	cpfsgt	escalonador@cont& (0+255),b
  2985  0042EC  D001               	goto	l67
  2986  0042EE  0012               	return	
  2987  0042F0                     l67:
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;main.c: 190: {
  2991                           ;main.c: 191: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  2992                           
  2993                           ; BSR set to: 0
  2994  0042F0  51E1               	movf	escalonador@cont& (0+255),w,b
  2995  0042F2  0D02               	mullw	2
  2996  0042F4  0EEA               	movlw	low _p_tarefas
  2997  0042F6  24F3               	addwf	prodl,w,c
  2998  0042F8  6ED9               	movwf	fsr2l,c
  2999  0042FA  0E00               	movlw	high _p_tarefas
  3000  0042FC  20F4               	addwfc	prodh,w,c
  3001  0042FE  6EDA               	movwf	fsr2h,c
  3002  004300  50DE               	movf	postinc2,w,c
  3003  004302  10DE               	iorwf	postinc2,w,c
  3004  004304  B4D8               	btfsc	status,2,c
  3005  004306  D03D               	goto	l69
  3006                           
  3007                           ; BSR set to: 0
  3008  004308  51E1               	movf	escalonador@cont& (0+255),w,b
  3009  00430A  0D02               	mullw	2
  3010  00430C  0EE2               	movlw	low _tempo_tarefa
  3011  00430E  24F3               	addwf	prodl,w,c
  3012  004310  6ED9               	movwf	fsr2l,c
  3013  004312  0E00               	movlw	high _tempo_tarefa
  3014  004314  20F4               	addwfc	prodh,w,c
  3015  004316  6EDA               	movwf	fsr2h,c
  3016  004318  50DE               	movf	postinc2,w,c
  3017  00431A  10DE               	iorwf	postinc2,w,c
  3018  00431C  A4D8               	btfss	status,2,c
  3019  00431E  D031               	goto	l69
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;main.c: 192: {
  3023                           ;main.c: 193: tarefa_em_execucao = 1;
  3024  004320  0E01               	movlw	1
  3025  004322  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3026                           
  3027                           ;main.c: 194: timeout_tarefa = 65000;
  3028  004324  0EFD               	movlw	253
  3029  004326  6FF3               	movwf	(_timeout_tarefa+1)& (0+255),b
  3030  004328  0EE8               	movlw	232
  3031  00432A  6FF2               	movwf	_timeout_tarefa& (0+255),b
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;main.c: 195: p_tarefas[cont]();
  3035  00432C  51E1               	movf	escalonador@cont& (0+255),w,b
  3036  00432E  0D02               	mullw	2
  3037  004330  0EEA               	movlw	low _p_tarefas
  3038  004332  24F3               	addwf	prodl,w,c
  3039  004334  6ED9               	movwf	fsr2l,c
  3040  004336  0E00               	movlw	high _p_tarefas
  3041  004338  20F4               	addwfc	prodh,w,c
  3042  00433A  6EDA               	movwf	fsr2h,c
  3043  00433C  D801               	call	u17368
  3044  00433E  D00A               	goto	u17369
  3045  004340                     u17368:
  3046  004340  0005               	push	
  3047  004342  6EFA               	movwf	pclath,c
  3048  004344  50DE               	movf	postinc2,w,c
  3049  004346  6EFD               	movwf	tosl,c
  3050  004348  50DE               	movf	postinc2,w,c
  3051  00434A  6EFE               	movwf	tosh,c
  3052  00434C  50F8               	movf	tblptru,w,c
  3053  00434E  6EFF               	movwf	tosu,c
  3054  004350  50FA               	movf	pclath,w,c
  3055  004352  0012               	return		;indir
  3056  004354                     u17369:
  3057                           
  3058                           ;main.c: 196: tarefa_em_execucao = 0;
  3059  004354  0E00               	movlw	0
  3060  004356  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3061                           
  3062                           ;main.c: 197: tempo_tarefa[cont] = tempo_backup[cont];
  3063  004358  0100               	movlb	0	; () banked
  3064  00435A  51E1               	movf	escalonador@cont& (0+255),w,b
  3065  00435C  0D02               	mullw	2
  3066  00435E  0EE6               	movlw	low _tempo_backup
  3067  004360  24F3               	addwf	prodl,w,c
  3068  004362  6ED9               	movwf	fsr2l,c
  3069  004364  0E00               	movlw	high _tempo_backup
  3070  004366  20F4               	addwfc	prodh,w,c
  3071  004368  6EDA               	movwf	fsr2h,c
  3072  00436A  51E1               	movf	escalonador@cont& (0+255),w,b
  3073  00436C  0D02               	mullw	2
  3074  00436E  0EE2               	movlw	low _tempo_tarefa
  3075  004370  24F3               	addwf	prodl,w,c
  3076  004372  6EE1               	movwf	fsr1l,c
  3077  004374  0E00               	movlw	high _tempo_tarefa
  3078  004376  20F4               	addwfc	prodh,w,c
  3079  004378  6EE2               	movwf	fsr1h,c
  3080  00437A  CFDE FFE6          	movff	postinc2,postinc1
  3081  00437E  CFDD FFE5          	movff	postdec2,postdec1
  3082  004382                     l69:
  3083                           
  3084                           ; BSR set to: 0
  3085                           
  3086                           ; BSR set to: 0
  3087  004382  2BE1               	incf	escalonador@cont& (0+255),f,b
  3088  004384  D7B1               	goto	l13468
  3089  004386                     __end_of_escalonador:
  3090                           	opt stack 0
  3091                           tosu	equ	0xFFF
  3092                           tosh	equ	0xFFE
  3093                           tosl	equ	0xFFD
  3094                           pclath	equ	0xFFA
  3095                           tblptru	equ	0xFF8
  3096                           tblptrh	equ	0xFF7
  3097                           tblptrl	equ	0xFF6
  3098                           tablat	equ	0xFF5
  3099                           prodh	equ	0xFF4
  3100                           prodl	equ	0xFF3
  3101                           intcon	equ	0xFF2
  3102                           intcon2	equ	0xFF1
  3103                           intcon3	equ	0xFF0
  3104                           postinc0	equ	0xFEE
  3105                           wreg	equ	0xFE8
  3106                           postinc1	equ	0xFE6
  3107                           postdec1	equ	0xFE5
  3108                           fsr1h	equ	0xFE2
  3109                           fsr1l	equ	0xFE1
  3110                           postinc2	equ	0xFDE
  3111                           postdec2	equ	0xFDD
  3112                           fsr2h	equ	0xFDA
  3113                           fsr2l	equ	0xFD9
  3114                           status	equ	0xFD8
  3115                           
  3116 ;; *************** function _SDCard *****************
  3117 ;; Defined at:
  3118 ;;		line 131 in file "bibliotecas/SDCard.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  fil            32    1[BANK2 ] struct .
  3123 ;;  FResult         1    0[BANK2 ] enum E3953
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      void 
  3126 ;; Registers used:
  3127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3133 ;;      Params:         0       0       0       0       0       0       0       0       0
  3134 ;;      Locals:         0       0       0      33       0       0       0       0       0
  3135 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3136 ;;      Totals:         0       0       0      33       0       0       0       0       0
  3137 ;;Total ram usage:       33 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:   11
  3140 ;; This function calls:
  3141 ;;		_escreve_cmd_lcd
  3142 ;;		_escreve_frase_ram_lcd
  3143 ;;		_f_close
  3144 ;;		_f_mount
  3145 ;;		_f_write
  3146 ;;		_posicao_cursor_lcd
  3147 ;;		_proceed
  3148 ;; This function is called by:
  3149 ;;		_inicializa_tarefas
  3150 ;;		_escalonador
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text12
  3155  004238                     __ptext12:
  3156                           	opt stack 0
  3157  004238                     _SDCard:
  3158                           	opt stack 18
  3159                           
  3160                           ;SDCard.c: 133: T0CONbits.TMR0ON = 0;
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;incstack = 0
  3164  004238  9ED5               	bcf	4053,7,c	;volatile
  3165                           
  3166                           ;SDCard.c: 135: FRESULT FResult;
  3167                           ;SDCard.c: 136: FIL fil;
  3168                           ;SDCard.c: 148: escreve_cmd_lcd(0b00000001);
  3169  00423A  0E01               	movlw	1
  3170  00423C  ECE6  F022         	call	_escreve_cmd_lcd
  3171                           
  3172                           ;SDCard.c: 151: proceed();
  3173  004240  EC7B  F029         	call	_proceed	;wreg free
  3174                           
  3175                           ;SDCard.c: 154: if((FResult = f_mount(1, &fs)) == FR_OK)
  3176  004244  0EB7               	movlw	low _fs
  3177  004246  6E1A               	movwf	f_mount@fs,c
  3178  004248  0E04               	movlw	high _fs
  3179  00424A  6E1B               	movwf	f_mount@fs+1,c
  3180  00424C  0E01               	movlw	1
  3181  00424E  EC3D  F025         	call	_f_mount
  3182  004252  0102               	movlb	2	; () banked
  3183  004254  6F96               	movwf	SDCard@FResult& (0+255),b
  3184  004256  5196               	movf	SDCard@FResult& (0+255),w,b
  3185  004258  A4D8               	btfss	status,2,c
  3186  00425A  D037               	goto	l305
  3187                           
  3188                           ; BSR set to: 2
  3189                           ;SDCard.c: 155: {
  3190                           ;SDCard.c: 156: if((FResult = f_write(&fil,"Hello World", 11, br)) == FR_OK)
  3191  00425C  0E97               	movlw	low SDCard@fil
  3192  00425E  0100               	movlb	0	; () banked
  3193  004260  6FCF               	movwf	f_write@fp& (0+255),b
  3194  004262  0E02               	movlw	high SDCard@fil
  3195  004264  6FD0               	movwf	(f_write@fp+1)& (0+255),b
  3196  004266  0E39               	movlw	low STR_10
  3197  004268  6FD1               	movwf	f_write@buff& (0+255),b
  3198  00426A  0E62               	movlw	high STR_10
  3199  00426C  6FD2               	movwf	(f_write@buff+1)& (0+255),b
  3200  00426E  0E00               	movlw	0
  3201  004270  6FD4               	movwf	(f_write@btw+1)& (0+255),b
  3202  004272  0E0B               	movlw	11
  3203  004274  6FD3               	movwf	f_write@btw& (0+255),b
  3204  004276  C198  F0D5         	movff	_br,f_write@bw
  3205  00427A  C199  F0D6         	movff	_br+1,f_write@bw+1
  3206  00427E  EC09  F000         	call	_f_write	;wreg free
  3207  004282  0102               	movlb	2	; () banked
  3208  004284  6F96               	movwf	SDCard@FResult& (0+255),b
  3209  004286  5196               	movf	SDCard@FResult& (0+255),w,b
  3210  004288  A4D8               	btfss	status,2,c
  3211  00428A  D013               	goto	l306
  3212                           
  3213                           ; BSR set to: 2
  3214                           ;SDCard.c: 157: {
  3215                           ;SDCard.c: 158: f_close(&fil);
  3216  00428C  0E97               	movlw	low SDCard@fil
  3217  00428E  0100               	movlb	0	; () banked
  3218  004290  6F9C               	movwf	f_close@fp& (0+255),b
  3219  004292  0E02               	movlw	high SDCard@fil
  3220  004294  6F9D               	movwf	(f_close@fp+1)& (0+255),b
  3221  004296  EC6C  F028         	call	_f_close	;wreg free
  3222                           
  3223                           ;SDCard.c: 159: posicao_cursor_lcd(1,0);
  3224  00429A  0E00               	movlw	0
  3225  00429C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3226  00429E  0E01               	movlw	1
  3227  0042A0  ECD0  F024         	call	_posicao_cursor_lcd
  3228                           
  3229                           ;SDCard.c: 160: escreve_frase_ram_lcd("File wrote!");
  3230  0042A4  0E2D               	movlw	low STR_11
  3231  0042A6  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3232  0042A8  0E62               	movlw	high STR_11
  3233  0042AA  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3234  0042AC  ECAB  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3235                           
  3236                           ;SDCard.c: 161: }
  3237  0042B0  0012               	return	
  3238  0042B2                     l306:
  3239                           
  3240                           ;SDCard.c: 162: else
  3241                           ;SDCard.c: 163: {
  3242                           ;SDCard.c: 164: posicao_cursor_lcd(1,0);
  3243  0042B2  0E00               	movlw	0
  3244  0042B4  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3245  0042B6  0E01               	movlw	1
  3246  0042B8  ECD0  F024         	call	_posicao_cursor_lcd
  3247                           
  3248                           ;SDCard.c: 165: escreve_frase_ram_lcd("ERROR open file");
  3249  0042BC  0EAF               	movlw	low STR_12
  3250  0042BE  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3251  0042C0  0E61               	movlw	high STR_12
  3252  0042C2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3253  0042C4  ECAB  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3254                           
  3255                           ;SDCard.c: 166: }
  3256                           ;SDCard.c: 169: }
  3257  0042C8  0012               	return	
  3258  0042CA                     l305:
  3259                           
  3260                           ;SDCard.c: 170: else
  3261                           ;SDCard.c: 171: {
  3262                           ;SDCard.c: 172: posicao_cursor_lcd(1,0);
  3263  0042CA  0E00               	movlw	0
  3264  0042CC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3265  0042CE  0E01               	movlw	1
  3266  0042D0  ECD0  F024         	call	_posicao_cursor_lcd
  3267                           
  3268                           ;SDCard.c: 173: escreve_frase_ram_lcd("ERROR mount");
  3269  0042D4  0E45               	movlw	low STR_13
  3270  0042D6  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3271  0042D8  0E62               	movlw	high STR_13
  3272  0042DA  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3273  0042DC  ECAB  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3274  0042E0  0012               	return	
  3275  0042E2                     __end_of_SDCard:
  3276                           	opt stack 0
  3277                           tosu	equ	0xFFF
  3278                           tosh	equ	0xFFE
  3279                           tosl	equ	0xFFD
  3280                           pclath	equ	0xFFA
  3281                           tblptru	equ	0xFF8
  3282                           tblptrh	equ	0xFF7
  3283                           tblptrl	equ	0xFF6
  3284                           tablat	equ	0xFF5
  3285                           prodh	equ	0xFF4
  3286                           prodl	equ	0xFF3
  3287                           intcon	equ	0xFF2
  3288                           intcon2	equ	0xFF1
  3289                           intcon3	equ	0xFF0
  3290                           postinc0	equ	0xFEE
  3291                           wreg	equ	0xFE8
  3292                           postinc1	equ	0xFE6
  3293                           postdec1	equ	0xFE5
  3294                           fsr1h	equ	0xFE2
  3295                           fsr1l	equ	0xFE1
  3296                           postinc2	equ	0xFDE
  3297                           postdec2	equ	0xFDD
  3298                           fsr2h	equ	0xFDA
  3299                           fsr2l	equ	0xFD9
  3300                           status	equ	0xFD8
  3301                           
  3302 ;; *************** function _gps *****************
  3303 ;; Defined at:
  3304 ;;		line 56 in file "bibliotecas/GPS.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;		None
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;  data_out       34    0        unsigned char [34]
  3309 ;;  gps_buffer     15  102[BANK0 ] unsigned char [15]
  3310 ;;  time            4  117[BANK0 ] unsigned long 
  3311 ;;  date            4   98[BANK0 ] unsigned long 
  3312 ;;  longitude       3  124[BANK0 ] float 
  3313 ;;  latitude        3  121[BANK0 ] float 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  1    wreg      void 
  3316 ;; Registers used:
  3317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3323 ;;      Params:         0       0       0       0       0       0       0       0       0
  3324 ;;      Locals:         0      29       0       0       0       0       0       0       0
  3325 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3326 ;;      Totals:         0      31       0       0       0       0       0       0       0
  3327 ;;Total ram usage:       31 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    7
  3330 ;; This function calls:
  3331 ;;		_convert_time_to_utc
  3332 ;;		_convert_to_degrees
  3333 ;;		_escreve_cmd_lcd
  3334 ;;		_escreve_frase_ram_lcd
  3335 ;;		_get_dt
  3336 ;;		_get_gpstime
  3337 ;;		_get_latitude
  3338 ;;		_get_longitude
  3339 ;;		_memset
  3340 ;;		_posicao_cursor_lcd
  3341 ;;		_sprintf
  3342 ;; This function is called by:
  3343 ;;		_inicializa_tarefas
  3344 ;;		_escalonador
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text13
  3349  002EA4                     __ptext13:
  3350                           	opt stack 0
  3351  002EA4                     _gps:
  3352                           	opt stack 22
  3353                           
  3354                           ;GPS.c: 59: unsigned char data_out[34];
  3355                           ;GPS.c: 60: unsigned long int time;
  3356                           ;GPS.c: 61: unsigned long int date;
  3357                           ;GPS.c: 62: float latitude, longitude;
  3358                           ;GPS.c: 63: char gps_buffer[15];
  3359                           ;GPS.c: 116: time = get_gpstime();
  3360                           
  3361                           ;incstack = 0
  3362  002EA4  ECEC  F023         	call	_get_gpstime	;wreg free
  3363  002EA8  C066  F0D5         	movff	?_get_gpstime,gps@time
  3364  002EAC  C067  F0D6         	movff	?_get_gpstime+1,gps@time+1
  3365  002EB0  C068  F0D7         	movff	?_get_gpstime+2,gps@time+2
  3366  002EB4  C069  F0D8         	movff	?_get_gpstime+3,gps@time+3
  3367                           
  3368                           ;GPS.c: 117: convert_time_to_utc(time);
  3369  002EB8  C0D5  F0B2         	movff	gps@time,convert_time_to_utc@utc_time
  3370  002EBC  C0D6  F0B3         	movff	gps@time+1,convert_time_to_utc@utc_time+1
  3371  002EC0  C0D7  F0B4         	movff	gps@time+2,convert_time_to_utc@utc_time+2
  3372  002EC4  C0D8  F0B5         	movff	gps@time+3,convert_time_to_utc@utc_time+3
  3373  002EC8  EC41  F01C         	call	_convert_time_to_utc	;wreg free
  3374                           
  3375                           ;GPS.c: 118: posicao_cursor_lcd(1,0);
  3376  002ECC  0E00               	movlw	0
  3377  002ECE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3378  002ED0  0E01               	movlw	1
  3379  002ED2  ECD0  F024         	call	_posicao_cursor_lcd
  3380                           
  3381                           ;GPS.c: 119: escreve_frase_ram_lcd("Hora:");
  3382  002ED6  0E63               	movlw	low STR_1
  3383  002ED8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3384  002EDA  0E62               	movlw	high STR_1
  3385  002EDC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3386  002EDE  ECAB  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3387                           
  3388                           ;GPS.c: 120: posicao_cursor_lcd(1,7);
  3389  002EE2  0E07               	movlw	7
  3390  002EE4  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3391  002EE6  0E01               	movlw	1
  3392  002EE8  ECD0  F024         	call	_posicao_cursor_lcd
  3393                           
  3394                           ;GPS.c: 121: escreve_frase_ram_lcd(data_buffer);
  3395  002EEC  0E9A               	movlw	low _data_buffer
  3396  002EEE  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3397  002EF0  0E01               	movlw	high _data_buffer
  3398  002EF2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3399  002EF4  ECAB  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3400                           
  3401                           ;GPS.c: 124: date = get_dt(rmc_pointers[7]);
  3402  002EF8  0101               	movlb	1	; () banked
  3403  002EFA  517F               	movf	(_rmc_pointers+7)& (0+255),w,b
  3404  002EFC  ECBA  F019         	call	_get_dt
  3405  002F00  C021  F0C2         	movff	?_get_dt,gps@date
  3406  002F04  C022  F0C3         	movff	?_get_dt+1,gps@date+1
  3407  002F08  C023  F0C4         	movff	?_get_dt+2,gps@date+2
  3408  002F0C  C024  F0C5         	movff	?_get_dt+3,gps@date+3
  3409                           
  3410                           ;GPS.c: 128: posicao_cursor_lcd(2,0);
  3411  002F10  0E00               	movlw	0
  3412  002F12  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3413  002F14  0E02               	movlw	2
  3414  002F16  ECD0  F024         	call	_posicao_cursor_lcd
  3415                           
  3416                           ;GPS.c: 129: escreve_frase_ram_lcd("Data:");
  3417  002F1A  0E69               	movlw	low STR_2
  3418  002F1C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3419  002F1E  0E62               	movlw	high STR_2
  3420  002F20  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3421  002F22  ECAB  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3422                           
  3423                           ;GPS.c: 131: posicao_cursor_lcd(2,7);
  3424  002F26  0E07               	movlw	7
  3425  002F28  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3426  002F2A  0E02               	movlw	2
  3427  002F2C  ECD0  F024         	call	_posicao_cursor_lcd
  3428                           
  3429                           ;GPS.c: 132: escreve_frase_ram_lcd(dado_buffer);
  3430  002F30  0EF6               	movlw	low _dado_buffer
  3431  002F32  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3432  002F34  0E00               	movlw	high _dado_buffer
  3433  002F36  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3434  002F38  ECAB  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3435                           
  3436                           ;GPS.c: 135: _delay((unsigned long)((2000)*(48000000/4000.0)));
  3437  002F3C  0E7A               	movlw	122
  3438  002F3E  0100               	movlb	0	; () banked
  3439  002F40  6FC1               	movwf	(??_gps+1)& (0+255),b
  3440  002F42  0EC1               	movlw	193
  3441  002F44  6FC0               	movwf	??_gps& (0+255),b
  3442  002F46  0E81               	movlw	129
  3443  002F48                     u19187:
  3444  002F48  2EE8               	decfsz	wreg,f,c
  3445  002F4A  D7FE               	bra	u19187
  3446  002F4C  2FC0               	decfsz	??_gps& (0+255),f,b
  3447  002F4E  D7FC               	bra	u19187
  3448  002F50  2FC1               	decfsz	(??_gps+1)& (0+255),f,b
  3449  002F52  D7FA               	bra	u19187
  3450  002F54  D000               	nop2	
  3451                           
  3452                           ;GPS.c: 136: escreve_cmd_lcd(0b00000001);
  3453  002F56  0E01               	movlw	1
  3454  002F58  ECE6  F022         	call	_escreve_cmd_lcd
  3455                           
  3456                           ;GPS.c: 139: latitude = get_latitude(gga_pointers[0]);
  3457  002F5C  0101               	movlb	1	; () banked
  3458  002F5E  5164               	movf	_gga_pointers& (0+255),w,b
  3459  002F60  ECA0  F022         	call	_get_latitude
  3460  002F64  C081  F0D9         	movff	?_get_latitude,gps@latitude
  3461  002F68  C082  F0DA         	movff	?_get_latitude+1,gps@latitude+1
  3462  002F6C  C083  F0DB         	movff	?_get_latitude+2,gps@latitude+2
  3463                           
  3464                           ;GPS.c: 140: latitude = convert_to_degrees(latitude);
  3465  002F70  C0D9  F085         	movff	gps@latitude,convert_to_degrees@nmea_lat_long
  3466  002F74  C0DA  F086         	movff	gps@latitude+1,convert_to_degrees@nmea_lat_long+1
  3467  002F78  C0DB  F087         	movff	gps@latitude+2,convert_to_degrees@nmea_lat_long+2
  3468  002F7C  EC0B  F01B         	call	_convert_to_degrees	;wreg free
  3469  002F80  C085  F0D9         	movff	?_convert_to_degrees,gps@latitude
  3470  002F84  C086  F0DA         	movff	?_convert_to_degrees+1,gps@latitude+1
  3471  002F88  C087  F0DB         	movff	?_convert_to_degrees+2,gps@latitude+2
  3472                           
  3473                           ;GPS.c: 141: sprintf(gps_buffer,"%.07f",latitude); ;
  3474  002F8C  0EC6               	movlw	low gps@gps_buffer
  3475  002F8E  0100               	movlb	0	; () banked
  3476  002F90  6F8B               	movwf	sprintf@sp& (0+255),b
  3477  002F92  0E00               	movlw	high gps@gps_buffer
  3478  002F94  6F8C               	movwf	(sprintf@sp+1)& (0+255),b
  3479  002F96  0E6F               	movlw	low STR_3
  3480  002F98  6F8D               	movwf	sprintf@f& (0+255),b
  3481  002F9A  0E62               	movlw	high STR_3
  3482  002F9C  6F8E               	movwf	(sprintf@f+1)& (0+255),b
  3483  002F9E  C0D9  F08F         	movff	gps@latitude,?_sprintf+4
  3484  002FA2  C0DA  F090         	movff	gps@latitude+1,?_sprintf+5
  3485  002FA6  C0DB  F091         	movff	gps@latitude+2,?_sprintf+6
  3486  002FAA  EC26  F004         	call	_sprintf	;wreg free
  3487                           
  3488                           ;GPS.c: 153: longitude = get_longitude(gga_pointers[2]);
  3489  002FAE  0101               	movlb	1	; () banked
  3490  002FB0  5166               	movf	(_gga_pointers+2)& (0+255),w,b
  3491  002FB2  EC5A  F022         	call	_get_longitude
  3492  002FB6  C081  F0DC         	movff	?_get_longitude,gps@longitude
  3493  002FBA  C082  F0DD         	movff	?_get_longitude+1,gps@longitude+1
  3494  002FBE  C083  F0DE         	movff	?_get_longitude+2,gps@longitude+2
  3495                           
  3496                           ;GPS.c: 154: longitude = convert_to_degrees(longitude);
  3497  002FC2  C0DC  F085         	movff	gps@longitude,convert_to_degrees@nmea_lat_long
  3498  002FC6  C0DD  F086         	movff	gps@longitude+1,convert_to_degrees@nmea_lat_long+1
  3499  002FCA  C0DE  F087         	movff	gps@longitude+2,convert_to_degrees@nmea_lat_long+2
  3500  002FCE  EC0B  F01B         	call	_convert_to_degrees	;wreg free
  3501  002FD2  C085  F0DC         	movff	?_convert_to_degrees,gps@longitude
  3502  002FD6  C086  F0DD         	movff	?_convert_to_degrees+1,gps@longitude+1
  3503  002FDA  C087  F0DE         	movff	?_convert_to_degrees+2,gps@longitude+2
  3504                           
  3505                           ;GPS.c: 155: sprintf(gps_buffer,"%.07f",longitude);
  3506  002FDE  0EC6               	movlw	low gps@gps_buffer
  3507  002FE0  0100               	movlb	0	; () banked
  3508  002FE2  6F8B               	movwf	sprintf@sp& (0+255),b
  3509  002FE4  0E00               	movlw	high gps@gps_buffer
  3510  002FE6  6F8C               	movwf	(sprintf@sp+1)& (0+255),b
  3511  002FE8  0E6F               	movlw	low STR_3
  3512  002FEA  6F8D               	movwf	sprintf@f& (0+255),b
  3513  002FEC  0E62               	movlw	high STR_3
  3514  002FEE  6F8E               	movwf	(sprintf@f+1)& (0+255),b
  3515  002FF0  C0DC  F08F         	movff	gps@longitude,?_sprintf+4
  3516  002FF4  C0DD  F090         	movff	gps@longitude+1,?_sprintf+5
  3517  002FF8  C0DE  F091         	movff	gps@longitude+2,?_sprintf+6
  3518  002FFC  EC26  F004         	call	_sprintf	;wreg free
  3519                           
  3520                           ;GPS.c: 157: posicao_cursor_lcd(2,0);
  3521  003000  0E00               	movlw	0
  3522  003002  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3523  003004  0E02               	movlw	2
  3524  003006  ECD0  F024         	call	_posicao_cursor_lcd
  3525                           
  3526                           ;GPS.c: 158: escreve_frase_ram_lcd("Lon:");
  3527  00300A  0E75               	movlw	low STR_5
  3528  00300C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3529  00300E  0E62               	movlw	high STR_5
  3530  003010  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3531  003012  ECAB  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3532                           
  3533                           ;GPS.c: 159: posicao_cursor_lcd(2,5);
  3534  003016  0E05               	movlw	5
  3535  003018  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3536  00301A  0E02               	movlw	2
  3537  00301C  ECD0  F024         	call	_posicao_cursor_lcd
  3538                           
  3539                           ;GPS.c: 160: escreve_frase_ram_lcd(gps_buffer);
  3540  003020  0EC6               	movlw	low gps@gps_buffer
  3541  003022  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3542  003024  0E00               	movlw	high gps@gps_buffer
  3543  003026  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3544  003028  ECAB  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3545                           
  3546                           ;GPS.c: 161: memset(gps_buffer,0,15);
  3547  00302C  0EC6               	movlw	low gps@gps_buffer
  3548  00302E  6E1A               	movwf	memset@p1,c
  3549  003030  0E00               	movlw	high gps@gps_buffer
  3550  003032  6E1B               	movwf	memset@p1+1,c
  3551  003034  0E00               	movlw	0
  3552  003036  6E1D               	movwf	memset@c+1,c
  3553  003038  0E00               	movlw	0
  3554  00303A  6E1C               	movwf	memset@c,c
  3555  00303C  0E00               	movlw	0
  3556  00303E  6E1F               	movwf	memset@n+1,c
  3557  003040  0E0F               	movlw	15
  3558  003042  6E1E               	movwf	memset@n,c
  3559  003044  EC40  F028         	call	_memset	;wreg free
  3560                           
  3561                           ;GPS.c: 163: _delay((unsigned long)((2000)*(48000000/4000.0)));
  3562  003048  0E7A               	movlw	122
  3563  00304A  0100               	movlb	0	; () banked
  3564  00304C  6FC1               	movwf	(??_gps+1)& (0+255),b
  3565  00304E  0EC1               	movlw	193
  3566  003050  6FC0               	movwf	??_gps& (0+255),b
  3567  003052  0E81               	movlw	129
  3568  003054                     u19197:
  3569  003054  2EE8               	decfsz	wreg,f,c
  3570  003056  D7FE               	bra	u19197
  3571  003058  2FC0               	decfsz	??_gps& (0+255),f,b
  3572  00305A  D7FC               	bra	u19197
  3573  00305C  2FC1               	decfsz	(??_gps+1)& (0+255),f,b
  3574  00305E  D7FA               	bra	u19197
  3575  003060  D000               	nop2	
  3576                           
  3577                           ;GPS.c: 164: escreve_cmd_lcd(0b00000001);
  3578  003062  0E01               	movlw	1
  3579  003064  ECE6  F022         	call	_escreve_cmd_lcd
  3580  003068  0012               	return		;funcret
  3581  00306A                     __end_of_gps:
  3582                           	opt stack 0
  3583                           tosu	equ	0xFFF
  3584                           tosh	equ	0xFFE
  3585                           tosl	equ	0xFFD
  3586                           pclath	equ	0xFFA
  3587                           tblptru	equ	0xFF8
  3588                           tblptrh	equ	0xFF7
  3589                           tblptrl	equ	0xFF6
  3590                           tablat	equ	0xFF5
  3591                           prodh	equ	0xFF4
  3592                           prodl	equ	0xFF3
  3593                           intcon	equ	0xFF2
  3594                           intcon2	equ	0xFF1
  3595                           intcon3	equ	0xFF0
  3596                           postinc0	equ	0xFEE
  3597                           wreg	equ	0xFE8
  3598                           postinc1	equ	0xFE6
  3599                           postdec1	equ	0xFE5
  3600                           fsr1h	equ	0xFE2
  3601                           fsr1l	equ	0xFE1
  3602                           postinc2	equ	0xFDE
  3603                           postdec2	equ	0xFDD
  3604                           fsr2h	equ	0xFDA
  3605                           fsr2l	equ	0xFD9
  3606                           status	equ	0xFD8
  3607                           
  3608 ;; *************** function _memset *****************
  3609 ;; Defined at:
  3610 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  p1              2   25[COMRAM] PTR void 
  3613 ;;		 -> gps@gps_buffer(15), 
  3614 ;;  c               2   27[COMRAM] int 
  3615 ;;  n               2   29[COMRAM] unsigned int 
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  p               2   31[COMRAM] PTR unsigned char 
  3618 ;;		 -> gps@gps_buffer(15), 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  2   25[COMRAM] PTR void 
  3621 ;; Registers used:
  3622 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3628 ;;      Params:         6       0       0       0       0       0       0       0       0
  3629 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3630 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3631 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3632 ;;Total ram usage:        8 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    2
  3635 ;; This function calls:
  3636 ;;		Nothing
  3637 ;; This function is called by:
  3638 ;;		_gps
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           	psect	text14
  3643  005080                     __ptext14:
  3644                           	opt stack 0
  3645  005080                     _memset:
  3646                           	opt stack 26
  3647                           
  3648                           ;incstack = 0
  3649  005080  C01A  F020         	movff	memset@p1,memset@p
  3650  005084  C01B  F021         	movff	memset@p1+1,memset@p+1
  3651  005088  D008               	goto	l2085
  3652  00508A                     l8866:
  3653  00508A  C020  FFD9         	movff	memset@p,fsr2l
  3654  00508E  C021  FFDA         	movff	memset@p+1,fsr2h
  3655  005092  C01C  FFDF         	movff	memset@c,indf2
  3656  005096  4A20               	infsnz	memset@p,f,c
  3657  005098  2A21               	incf	memset@p+1,f,c
  3658  00509A                     l2085:
  3659  00509A  061E               	decf	memset@n,f,c
  3660  00509C  A0D8               	btfss	status,0,c
  3661  00509E  061F               	decf	memset@n+1,f,c
  3662  0050A0  281E               	incf	memset@n,w,c
  3663  0050A2  E1F3               	bnz	l8866
  3664  0050A4  281F               	incf	memset@n+1,w,c
  3665  0050A6  B4D8               	btfsc	status,2,c
  3666  0050A8  0012               	return	
  3667  0050AA  D7EF               	goto	l2086
  3668  0050AC                     __end_of_memset:
  3669                           	opt stack 0
  3670                           tosu	equ	0xFFF
  3671                           tosh	equ	0xFFE
  3672                           tosl	equ	0xFFD
  3673                           pclath	equ	0xFFA
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           prodh	equ	0xFF4
  3679                           prodl	equ	0xFF3
  3680                           intcon	equ	0xFF2
  3681                           intcon2	equ	0xFF1
  3682                           intcon3	equ	0xFF0
  3683                           postinc0	equ	0xFEE
  3684                           wreg	equ	0xFE8
  3685                           postinc1	equ	0xFE6
  3686                           postdec1	equ	0xFE5
  3687                           fsr1h	equ	0xFE2
  3688                           fsr1l	equ	0xFE1
  3689                           indf2	equ	0xFDF
  3690                           postinc2	equ	0xFDE
  3691                           postdec2	equ	0xFDD
  3692                           fsr2h	equ	0xFDA
  3693                           fsr2l	equ	0xFD9
  3694                           status	equ	0xFD8
  3695                           
  3696 ;; *************** function _get_longitude *****************
  3697 ;; Defined at:
  3698 ;;		line 227 in file "bibliotecas/GPS.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;  long_pointer    1    wreg     unsigned char 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  long_pointer    1   55[BANK0 ] unsigned char 
  3703 ;;  long_buffer    15   37[BANK0 ] unsigned char [15]
  3704 ;;  _longitude      3   52[BANK0 ] float 
  3705 ;;  long_index      1   57[BANK0 ] unsigned char 
  3706 ;;  index           1   56[BANK0 ] unsigned char 
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  3   33[BANK0 ] float 
  3709 ;; Registers used:
  3710 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3716 ;;      Params:         0       3       0       0       0       0       0       0       0
  3717 ;;      Locals:         0      21       0       0       0       0       0       0       0
  3718 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3719 ;;      Totals:         0      25       0       0       0       0       0       0       0
  3720 ;;Total ram usage:       25 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    6
  3723 ;; This function calls:
  3724 ;;		_atof
  3725 ;; This function is called by:
  3726 ;;		_gps
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text15
  3731  0044B4                     __ptext15:
  3732                           	opt stack 0
  3733  0044B4                     _get_longitude:
  3734                           	opt stack 22
  3735                           
  3736                           ;incstack = 0
  3737                           ;get_longitude@long_pointer stored from wreg
  3738  0044B4  0100               	movlb	0	; () banked
  3739  0044B6  6F97               	movwf	get_longitude@long_pointer& (0+255),b
  3740                           
  3741                           ;GPS.c: 229: unsigned char long_index;
  3742                           ;GPS.c: 230: unsigned char index = long_pointer+1;
  3743  0044B8  0100               	movlb	0	; () banked
  3744  0044BA  2997               	incf	get_longitude@long_pointer& (0+255),w,b
  3745  0044BC  6F98               	movwf	get_longitude@index& (0+255),b
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;GPS.c: 231: char long_buffer[15];
  3749                           ;GPS.c: 232: float _longitude;
  3750                           ;GPS.c: 233: long_index=0;
  3751  0044BE  0E00               	movlw	0
  3752  0044C0  6F99               	movwf	get_longitude@long_index& (0+255),b
  3753                           
  3754                           ;GPS.c: 236: for( ; gga_buffer[index]!=','; index++){
  3755  0044C2  D014               	goto	l166
  3756  0044C4                     
  3757                           ; BSR set to: 0
  3758                           ;GPS.c: 237: long_buffer[long_index]= gga_buffer[index];
  3759                           
  3760                           ; BSR set to: 0
  3761  0044C4  5198               	movf	get_longitude@index& (0+255),w,b
  3762  0044C6  0D01               	mullw	1
  3763  0044C8  0E00               	movlw	low _gga_buffer
  3764  0044CA  24F3               	addwf	prodl,w,c
  3765  0044CC  6ED9               	movwf	fsr2l,c
  3766  0044CE  0E01               	movlw	high _gga_buffer
  3767  0044D0  20F4               	addwfc	prodh,w,c
  3768  0044D2  6EDA               	movwf	fsr2h,c
  3769  0044D4  5199               	movf	get_longitude@long_index& (0+255),w,b
  3770  0044D6  0D01               	mullw	1
  3771  0044D8  0E85               	movlw	low get_longitude@long_buffer
  3772  0044DA  24F3               	addwf	prodl,w,c
  3773  0044DC  6EE1               	movwf	fsr1l,c
  3774  0044DE  0E00               	movlw	high get_longitude@long_buffer
  3775  0044E0  20F4               	addwfc	prodh,w,c
  3776  0044E2  6EE2               	movwf	fsr1h,c
  3777  0044E4  CFDF FFE7          	movff	indf2,indf1
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;GPS.c: 238: long_index++;
  3781  0044E8  2B99               	incf	get_longitude@long_index& (0+255),f,b
  3782                           
  3783                           ; BSR set to: 0
  3784  0044EA  2B98               	incf	get_longitude@index& (0+255),f,b
  3785  0044EC                     l166:
  3786                           
  3787                           ; BSR set to: 0
  3788                           
  3789                           ; BSR set to: 0
  3790  0044EC  5198               	movf	get_longitude@index& (0+255),w,b
  3791  0044EE  0D01               	mullw	1
  3792  0044F0  0E00               	movlw	low _gga_buffer
  3793  0044F2  24F3               	addwf	prodl,w,c
  3794  0044F4  6ED9               	movwf	fsr2l,c
  3795  0044F6  0E01               	movlw	high _gga_buffer
  3796  0044F8  20F4               	addwfc	prodh,w,c
  3797  0044FA  6EDA               	movwf	fsr2h,c
  3798  0044FC  0E2C               	movlw	44
  3799  0044FE  18DE               	xorwf	postinc2,w,c
  3800  004500  A4D8               	btfss	status,2,c
  3801  004502  D7E0               	goto	l167
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;GPS.c: 239: }
  3805                           ;GPS.c: 240: long_index++;
  3806                           
  3807                           ; BSR set to: 0
  3808  004504  2B99               	incf	get_longitude@long_index& (0+255),f,b
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;GPS.c: 241: E_W = gga_buffer[long_index];
  3812  004506  5199               	movf	get_longitude@long_index& (0+255),w,b
  3813  004508  0D01               	mullw	1
  3814  00450A  0E00               	movlw	low _gga_buffer
  3815  00450C  24F3               	addwf	prodl,w,c
  3816  00450E  6ED9               	movwf	fsr2l,c
  3817  004510  0E01               	movlw	high _gga_buffer
  3818  004512  20F4               	addwfc	prodh,w,c
  3819  004514  6EDA               	movwf	fsr2h,c
  3820  004516  50DF               	movf	indf2,w,c
  3821  004518  6FF4               	movwf	_E_W& (0+255),b
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;GPS.c: 242: _longitude = atof(long_buffer);
  3825  00451A  0E85               	movlw	low get_longitude@long_buffer
  3826  00451C  6F7E               	movwf	atof@s& (0+255),b
  3827  00451E  0E00               	movlw	high get_longitude@long_buffer
  3828  004520  6F7F               	movwf	(atof@s+1)& (0+255),b
  3829  004522  ECDF  F028         	call	_atof	;wreg free
  3830  004526  C07E  F094         	movff	?_atof,get_longitude@_longitude
  3831  00452A  C07F  F095         	movff	?_atof+1,get_longitude@_longitude+1
  3832  00452E  C080  F096         	movff	?_atof+2,get_longitude@_longitude+2
  3833                           
  3834                           ;GPS.c: 243: return _longitude;
  3835  004532  C094  F081         	movff	get_longitude@_longitude,?_get_longitude
  3836  004536  C095  F082         	movff	get_longitude@_longitude+1,?_get_longitude+1
  3837  00453A  C096  F083         	movff	get_longitude@_longitude+2,?_get_longitude+2
  3838  00453E  0012               	return	
  3839  004540                     __end_of_get_longitude:
  3840                           	opt stack 0
  3841                           tosu	equ	0xFFF
  3842                           tosh	equ	0xFFE
  3843                           tosl	equ	0xFFD
  3844                           pclath	equ	0xFFA
  3845                           tblptru	equ	0xFF8
  3846                           tblptrh	equ	0xFF7
  3847                           tblptrl	equ	0xFF6
  3848                           tablat	equ	0xFF5
  3849                           prodh	equ	0xFF4
  3850                           prodl	equ	0xFF3
  3851                           intcon	equ	0xFF2
  3852                           intcon2	equ	0xFF1
  3853                           intcon3	equ	0xFF0
  3854                           postinc0	equ	0xFEE
  3855                           wreg	equ	0xFE8
  3856                           indf1	equ	0xFE7
  3857                           postinc1	equ	0xFE6
  3858                           postdec1	equ	0xFE5
  3859                           fsr1h	equ	0xFE2
  3860                           fsr1l	equ	0xFE1
  3861                           indf2	equ	0xFDF
  3862                           postinc2	equ	0xFDE
  3863                           postdec2	equ	0xFDD
  3864                           fsr2h	equ	0xFDA
  3865                           fsr2l	equ	0xFD9
  3866                           status	equ	0xFD8
  3867                           
  3868 ;; *************** function _get_latitude *****************
  3869 ;; Defined at:
  3870 ;;		line 201 in file "bibliotecas/GPS.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;  lat_pointer     1    wreg     unsigned char 
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;  lat_pointer     1   55[BANK0 ] unsigned char 
  3875 ;;  lat_buffer     15   37[BANK0 ] unsigned char [15]
  3876 ;;  _latitude       3   52[BANK0 ] float 
  3877 ;;  lat_index       1   57[BANK0 ] unsigned char 
  3878 ;;  index           1   56[BANK0 ] unsigned char 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  3   33[BANK0 ] float 
  3881 ;; Registers used:
  3882 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3888 ;;      Params:         0       3       0       0       0       0       0       0       0
  3889 ;;      Locals:         0      21       0       0       0       0       0       0       0
  3890 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3891 ;;      Totals:         0      25       0       0       0       0       0       0       0
  3892 ;;Total ram usage:       25 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    6
  3895 ;; This function calls:
  3896 ;;		_atof
  3897 ;; This function is called by:
  3898 ;;		_gps
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text16
  3903  004540                     __ptext16:
  3904                           	opt stack 0
  3905  004540                     _get_latitude:
  3906                           	opt stack 22
  3907                           
  3908                           ;incstack = 0
  3909                           ;get_latitude@lat_pointer stored from wreg
  3910  004540  0100               	movlb	0	; () banked
  3911  004542  6F97               	movwf	get_latitude@lat_pointer& (0+255),b
  3912                           
  3913                           ;GPS.c: 203: unsigned char lat_index = lat_pointer+1;
  3914  004544  0100               	movlb	0	; () banked
  3915  004546  2997               	incf	get_latitude@lat_pointer& (0+255),w,b
  3916  004548  6F99               	movwf	get_latitude@lat_index& (0+255),b
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;GPS.c: 204: unsigned char index = 0;
  3920  00454A  0E00               	movlw	0
  3921  00454C  6F98               	movwf	get_latitude@index& (0+255),b
  3922                           
  3923                           ;GPS.c: 205: char lat_buffer[15];
  3924                           ;GPS.c: 206: float _latitude;
  3925                           ;GPS.c: 209: for(;gga_buffer[lat_index]!=',';lat_index++){
  3926  00454E  D014               	goto	l160
  3927  004550                     
  3928                           ; BSR set to: 0
  3929                           ;GPS.c: 210: lat_buffer[index]= gga_buffer[lat_index];
  3930                           
  3931                           ; BSR set to: 0
  3932  004550  5199               	movf	get_latitude@lat_index& (0+255),w,b
  3933  004552  0D01               	mullw	1
  3934  004554  0E00               	movlw	low _gga_buffer
  3935  004556  24F3               	addwf	prodl,w,c
  3936  004558  6ED9               	movwf	fsr2l,c
  3937  00455A  0E01               	movlw	high _gga_buffer
  3938  00455C  20F4               	addwfc	prodh,w,c
  3939  00455E  6EDA               	movwf	fsr2h,c
  3940  004560  5198               	movf	get_latitude@index& (0+255),w,b
  3941  004562  0D01               	mullw	1
  3942  004564  0E85               	movlw	low get_latitude@lat_buffer
  3943  004566  24F3               	addwf	prodl,w,c
  3944  004568  6EE1               	movwf	fsr1l,c
  3945  00456A  0E00               	movlw	high get_latitude@lat_buffer
  3946  00456C  20F4               	addwfc	prodh,w,c
  3947  00456E  6EE2               	movwf	fsr1h,c
  3948  004570  CFDF FFE7          	movff	indf2,indf1
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;GPS.c: 211: index++;
  3952  004574  2B98               	incf	get_latitude@index& (0+255),f,b
  3953                           
  3954                           ; BSR set to: 0
  3955  004576  2B99               	incf	get_latitude@lat_index& (0+255),f,b
  3956  004578                     l160:
  3957                           
  3958                           ; BSR set to: 0
  3959                           
  3960                           ; BSR set to: 0
  3961  004578  5199               	movf	get_latitude@lat_index& (0+255),w,b
  3962  00457A  0D01               	mullw	1
  3963  00457C  0E00               	movlw	low _gga_buffer
  3964  00457E  24F3               	addwf	prodl,w,c
  3965  004580  6ED9               	movwf	fsr2l,c
  3966  004582  0E01               	movlw	high _gga_buffer
  3967  004584  20F4               	addwfc	prodh,w,c
  3968  004586  6EDA               	movwf	fsr2h,c
  3969  004588  0E2C               	movlw	44
  3970  00458A  18DE               	xorwf	postinc2,w,c
  3971  00458C  A4D8               	btfss	status,2,c
  3972  00458E  D7E0               	goto	l161
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;GPS.c: 212: }
  3976                           ;GPS.c: 213: lat_index++;
  3977                           
  3978                           ; BSR set to: 0
  3979  004590  2B99               	incf	get_latitude@lat_index& (0+255),f,b
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;GPS.c: 214: n_s = gga_buffer[lat_index];
  3983  004592  5199               	movf	get_latitude@lat_index& (0+255),w,b
  3984  004594  0D01               	mullw	1
  3985  004596  0E00               	movlw	low _gga_buffer
  3986  004598  24F3               	addwf	prodl,w,c
  3987  00459A  6ED9               	movwf	fsr2l,c
  3988  00459C  0E01               	movlw	high _gga_buffer
  3989  00459E  20F4               	addwfc	prodh,w,c
  3990  0045A0  6EDA               	movwf	fsr2h,c
  3991  0045A2  50DF               	movf	indf2,w,c
  3992  0045A4  6FF5               	movwf	_n_s& (0+255),b
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;GPS.c: 215: _latitude = atof(lat_buffer);
  3996  0045A6  0E85               	movlw	low get_latitude@lat_buffer
  3997  0045A8  6F7E               	movwf	atof@s& (0+255),b
  3998  0045AA  0E00               	movlw	high get_latitude@lat_buffer
  3999  0045AC  6F7F               	movwf	(atof@s+1)& (0+255),b
  4000  0045AE  ECDF  F028         	call	_atof	;wreg free
  4001  0045B2  C07E  F094         	movff	?_atof,get_latitude@_latitude
  4002  0045B6  C07F  F095         	movff	?_atof+1,get_latitude@_latitude+1
  4003  0045BA  C080  F096         	movff	?_atof+2,get_latitude@_latitude+2
  4004                           
  4005                           ;GPS.c: 216: return _latitude;
  4006  0045BE  C094  F081         	movff	get_latitude@_latitude,?_get_latitude
  4007  0045C2  C095  F082         	movff	get_latitude@_latitude+1,?_get_latitude+1
  4008  0045C6  C096  F083         	movff	get_latitude@_latitude+2,?_get_latitude+2
  4009  0045CA  0012               	return	
  4010  0045CC                     __end_of_get_latitude:
  4011                           	opt stack 0
  4012                           tosu	equ	0xFFF
  4013                           tosh	equ	0xFFE
  4014                           tosl	equ	0xFFD
  4015                           pclath	equ	0xFFA
  4016                           tblptru	equ	0xFF8
  4017                           tblptrh	equ	0xFF7
  4018                           tblptrl	equ	0xFF6
  4019                           tablat	equ	0xFF5
  4020                           prodh	equ	0xFF4
  4021                           prodl	equ	0xFF3
  4022                           intcon	equ	0xFF2
  4023                           intcon2	equ	0xFF1
  4024                           intcon3	equ	0xFF0
  4025                           postinc0	equ	0xFEE
  4026                           wreg	equ	0xFE8
  4027                           indf1	equ	0xFE7
  4028                           postinc1	equ	0xFE6
  4029                           postdec1	equ	0xFE5
  4030                           fsr1h	equ	0xFE2
  4031                           fsr1l	equ	0xFE1
  4032                           indf2	equ	0xFDF
  4033                           postinc2	equ	0xFDE
  4034                           postdec2	equ	0xFDD
  4035                           fsr2h	equ	0xFDA
  4036                           fsr2l	equ	0xFD9
  4037                           status	equ	0xFD8
  4038                           
  4039 ;; *************** function _atof *****************
  4040 ;; Defined at:
  4041 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atof.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;  s               2   30[BANK0 ] PTR const unsigned char 
  4044 ;;		 -> get_longitude@long_buffer(15), get_latitude@lat_buffer(15), 
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  3   30[BANK0 ] PTR const unsigned char 
  4049 ;; Registers used:
  4050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4056 ;;      Params:         0       3       0       0       0       0       0       0       0
  4057 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4058 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4059 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4060 ;;Total ram usage:        3 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    5
  4063 ;; This function calls:
  4064 ;;		_strtod
  4065 ;; This function is called by:
  4066 ;;		_get_latitude
  4067 ;;		_get_longitude
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           	psect	text17
  4072  0051BE                     __ptext17:
  4073                           	opt stack 0
  4074  0051BE                     _atof:
  4075                           	opt stack 22
  4076                           
  4077                           ;incstack = 0
  4078  0051BE  C07E  F072         	movff	atof@s,strtod@s
  4079  0051C2  C07F  F073         	movff	atof@s+1,strtod@s+1
  4080  0051C6  0E00               	movlw	0
  4081  0051C8  0100               	movlb	0	; () banked
  4082  0051CA  6F74               	movwf	strtod@res& (0+255),b
  4083  0051CC  0E00               	movlw	0
  4084  0051CE  6F75               	movwf	(strtod@res+1)& (0+255),b
  4085  0051D0  ECD1  F00E         	call	_strtod	;wreg free
  4086  0051D4  C072  F07E         	movff	?_strtod,?_atof
  4087  0051D8  C073  F07F         	movff	?_strtod+1,?_atof+1
  4088  0051DC  C074  F080         	movff	?_strtod+2,?_atof+2
  4089  0051E0  0012               	return	
  4090  0051E2                     __end_of_atof:
  4091                           	opt stack 0
  4092                           tosu	equ	0xFFF
  4093                           tosh	equ	0xFFE
  4094                           tosl	equ	0xFFD
  4095                           pclath	equ	0xFFA
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           prodh	equ	0xFF4
  4101                           prodl	equ	0xFF3
  4102                           intcon	equ	0xFF2
  4103                           intcon2	equ	0xFF1
  4104                           intcon3	equ	0xFF0
  4105                           postinc0	equ	0xFEE
  4106                           wreg	equ	0xFE8
  4107                           indf1	equ	0xFE7
  4108                           postinc1	equ	0xFE6
  4109                           postdec1	equ	0xFE5
  4110                           fsr1h	equ	0xFE2
  4111                           fsr1l	equ	0xFE1
  4112                           indf2	equ	0xFDF
  4113                           postinc2	equ	0xFDE
  4114                           postdec2	equ	0xFDD
  4115                           fsr2h	equ	0xFDA
  4116                           fsr2l	equ	0xFD9
  4117                           status	equ	0xFD8
  4118                           
  4119 ;; *************** function _strtod *****************
  4120 ;; Defined at:
  4121 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atof.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;  s               2   18[BANK0 ] PTR const unsigned char 
  4124 ;;		 -> get_longitude@long_buffer(15), get_latitude@lat_buffer(15), 
  4125 ;;  res             2   20[BANK0 ] PTR PTR const unsigned c
  4126 ;;		 -> NULL(0), 
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;  _u              4   26[BANK0 ] struct .
  4129 ;;  expon           1   25[BANK0 ] char 
  4130 ;;  flags           1   24[BANK0 ] unsigned char 
  4131 ;;  eexp            1   23[BANK0 ] char 
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  3   18[BANK0 ] char 
  4134 ;; Registers used:
  4135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4141 ;;      Params:         0       4       0       0       0       0       0       0       0
  4142 ;;      Locals:         0       7       0       0       0       0       0       0       0
  4143 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4144 ;;      Totals:         0      12       0       0       0       0       0       0       0
  4145 ;;Total ram usage:       12 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    4
  4148 ;; This function calls:
  4149 ;;		___altoft
  4150 ;;		___ftdiv
  4151 ;;		___ftge
  4152 ;;		___ftmul
  4153 ;;		___ftneg
  4154 ;;		___lmul
  4155 ;;		_isdigit
  4156 ;;		_isspace
  4157 ;; This function is called by:
  4158 ;;		_atof
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text18
  4163  001DA2                     __ptext18:
  4164                           	opt stack 0
  4165  001DA2                     _strtod:
  4166                           	opt stack 22
  4167                           
  4168                           ;incstack = 0
  4169  001DA2  0100               	movlb	0	; () banked
  4170  001DA4  5174               	movf	strtod@res& (0+255),w,b
  4171  001DA6  1175               	iorwf	(strtod@res+1)& (0+255),w,b
  4172  001DA8  B4D8               	btfsc	status,2,c
  4173  001DAA  D00C               	goto	l1691
  4174                           
  4175                           ; BSR set to: 0
  4176  001DAC  C074  FFD9         	movff	strtod@res,fsr2l
  4177  001DB0  C075  FFDA         	movff	strtod@res+1,fsr2h
  4178  001DB4  C072  FFDE         	movff	strtod@s,postinc2
  4179  001DB8  C073  FFDD         	movff	strtod@s+1,postdec2
  4180                           
  4181                           ; BSR set to: 0
  4182  001DBC  D003               	goto	l1691
  4183  001DBE                     
  4184                           ; BSR set to: 0
  4185  001DBE  0100               	movlb	0	; () banked
  4186  001DC0  4B72               	infsnz	strtod@s& (0+255),f,b
  4187  001DC2  2B73               	incf	(strtod@s+1)& (0+255),f,b
  4188  001DC4                     l1691:
  4189                           
  4190                           ; BSR set to: 0
  4191                           
  4192                           ; BSR set to: 0
  4193  001DC4  C072  FFD9         	movff	strtod@s,fsr2l
  4194  001DC8  C073  FFDA         	movff	strtod@s+1,fsr2h
  4195  001DCC  50DF               	movf	indf2,w,c
  4196  001DCE  6F77               	movwf	strtod@eexp& (0+255),b
  4197  001DD0  5177               	movf	strtod@eexp& (0+255),w,b
  4198  001DD2  EC94  F028         	call	_isspace
  4199  001DD6  B0D8               	btfsc	status,0,c
  4200  001DD8  D7F2               	goto	l1692
  4201  001DDA  0E00               	movlw	0
  4202  001DDC  0100               	movlb	0	; () banked
  4203  001DDE  6F78               	movwf	strtod@flags& (0+255),b
  4204                           
  4205                           ; BSR set to: 0
  4206  001DE0  0E2D               	movlw	45
  4207  001DE2  1977               	xorwf	strtod@eexp& (0+255),w,b
  4208  001DE4  A4D8               	btfss	status,2,c
  4209  001DE6  D003               	goto	l1694
  4210                           
  4211                           ; BSR set to: 0
  4212  001DE8  0E01               	movlw	1
  4213  001DEA  6F78               	movwf	strtod@flags& (0+255),b
  4214  001DEC  D004               	goto	u15010
  4215  001DEE                     l1694:
  4216                           
  4217                           ; BSR set to: 0
  4218                           
  4219                           ; BSR set to: 0
  4220  001DEE  0E2B               	movlw	43
  4221  001DF0  1977               	xorwf	strtod@eexp& (0+255),w,b
  4222  001DF2  A4D8               	btfss	status,2,c
  4223  001DF4  D002               	goto	l1696
  4224  001DF6                     u15010:
  4225                           
  4226                           ; BSR set to: 0
  4227  001DF6  4B72               	infsnz	strtod@s& (0+255),f,b
  4228  001DF8  2B73               	incf	(strtod@s+1)& (0+255),f,b
  4229  001DFA                     l1696:
  4230                           
  4231                           ; BSR set to: 0
  4232                           
  4233                           ; BSR set to: 0
  4234                           
  4235                           ; BSR set to: 0
  4236  001DFA  0E00               	movlw	0
  4237  001DFC  6F77               	movwf	strtod@eexp& (0+255),b
  4238                           
  4239                           ; BSR set to: 0
  4240  001DFE  0E00               	movlw	0
  4241  001E00  6F7A               	movwf	strtod@_u& (0+255),b
  4242  001E02  0E00               	movlw	0
  4243  001E04  6F7B               	movwf	(strtod@_u+1)& (0+255),b
  4244  001E06  0E00               	movlw	0
  4245  001E08  6F7C               	movwf	(strtod@_u+2)& (0+255),b
  4246  001E0A  0E00               	movlw	0
  4247  001E0C  6F7D               	movwf	(strtod@_u+3)& (0+255),b
  4248                           
  4249                           ; BSR set to: 0
  4250  001E0E  0E00               	movlw	0
  4251  001E10  6F79               	movwf	strtod@expon& (0+255),b
  4252  001E12                     
  4253                           ; BSR set to: 0
  4254                           
  4255                           ; BSR set to: 0
  4256  001E12  B978               	btfsc	strtod@flags& (0+255),4,b
  4257  001E14  D00A               	goto	l1698
  4258                           
  4259                           ; BSR set to: 0
  4260  001E16  C072  FFD9         	movff	strtod@s,fsr2l
  4261  001E1A  C073  FFDA         	movff	strtod@s+1,fsr2h
  4262  001E1E  0E2E               	movlw	46
  4263  001E20  18DE               	xorwf	postinc2,w,c
  4264  001E22  A4D8               	btfss	status,2,c
  4265  001E24  D002               	goto	l1698
  4266                           
  4267                           ; BSR set to: 0
  4268  001E26  8978               	bsf	strtod@flags& (0+255),4,b
  4269  001E28  D03E               	goto	l1705
  4270  001E2A                     l1698:
  4271                           
  4272                           ; BSR set to: 0
  4273                           
  4274                           ; BSR set to: 0
  4275  001E2A  C072  FFD9         	movff	strtod@s,fsr2l
  4276  001E2E  C073  FFDA         	movff	strtod@s+1,fsr2h
  4277  001E32  50DF               	movf	indf2,w,c
  4278  001E34  EC03  F029         	call	_isdigit
  4279  001E38  A0D8               	btfss	status,0,c
  4280  001E3A  D038               	goto	l1701
  4281  001E3C  0100               	movlb	0	; () banked
  4282  001E3E  8378               	bsf	strtod@flags& (0+255),1,b
  4283                           
  4284                           ; BSR set to: 0
  4285  001E40  0E08               	movlw	8
  4286  001E42  1977               	xorwf	strtod@eexp& (0+255),w,b
  4287  001E44  B4D8               	btfsc	status,2,c
  4288  001E46  D02D               	goto	l1702
  4289                           
  4290                           ; BSR set to: 0
  4291  001E48  B978               	btfsc	strtod@flags& (0+255),4,b
  4292                           
  4293                           ; BSR set to: 0
  4294  001E4A  0779               	decf	strtod@expon& (0+255),f,b
  4295                           
  4296                           ; BSR set to: 0
  4297  001E4C  2B77               	incf	strtod@eexp& (0+255),f,b
  4298                           
  4299                           ; BSR set to: 0
  4300  001E4E  C07A  F01A         	movff	strtod@_u,___lmul@multiplier
  4301  001E52  C07B  F01B         	movff	strtod@_u+1,___lmul@multiplier+1
  4302  001E56  C07C  F01C         	movff	strtod@_u+2,___lmul@multiplier+2
  4303  001E5A  C07D  F01D         	movff	strtod@_u+3,___lmul@multiplier+3
  4304  001E5E  0E0A               	movlw	10
  4305  001E60  6E1E               	movwf	___lmul@multiplicand,c
  4306  001E62  0E00               	movlw	0
  4307  001E64  6E1F               	movwf	___lmul@multiplicand+1,c
  4308  001E66  0E00               	movlw	0
  4309  001E68  6E20               	movwf	___lmul@multiplicand+2,c
  4310  001E6A  0E00               	movlw	0
  4311  001E6C  6E21               	movwf	___lmul@multiplicand+3,c
  4312  001E6E  EC2B  F026         	call	___lmul	;wreg free
  4313  001E72  C01A  F07A         	movff	?___lmul,strtod@_u
  4314  001E76  C01B  F07B         	movff	?___lmul+1,strtod@_u+1
  4315  001E7A  C01C  F07C         	movff	?___lmul+2,strtod@_u+2
  4316  001E7E  C01D  F07D         	movff	?___lmul+3,strtod@_u+3
  4317  001E82  C072  FFD9         	movff	strtod@s,fsr2l
  4318  001E86  C073  FFDA         	movff	strtod@s+1,fsr2h
  4319  001E8A  50DF               	movf	indf2,w,c
  4320  001E8C  0100               	movlb	0	; () banked
  4321  001E8E  6F76               	movwf	??_strtod& (0+255),b
  4322  001E90  0ED0               	movlw	208
  4323  001E92  2776               	addwf	??_strtod& (0+255),f,b
  4324  001E94  5176               	movf	??_strtod& (0+255),w,b
  4325  001E96  277A               	addwf	strtod@_u& (0+255),f,b
  4326  001E98  0E00               	movlw	0
  4327  001E9A  237B               	addwfc	(strtod@_u+1)& (0+255),f,b
  4328  001E9C  237C               	addwfc	(strtod@_u+2)& (0+255),f,b
  4329  001E9E  237D               	addwfc	(strtod@_u+3)& (0+255),f,b
  4330  001EA0  D002               	goto	l1705
  4331  001EA2                     l1702:
  4332                           
  4333                           ; BSR set to: 0
  4334  001EA2  A978               	btfss	strtod@flags& (0+255),4,b
  4335                           
  4336                           ; BSR set to: 0
  4337  001EA4  2B79               	incf	strtod@expon& (0+255),f,b
  4338  001EA6                     l1705:
  4339                           
  4340                           ; BSR set to: 0
  4341                           
  4342                           ; BSR set to: 0
  4343  001EA6  4B72               	infsnz	strtod@s& (0+255),f,b
  4344  001EA8  2B73               	incf	(strtod@s+1)& (0+255),f,b
  4345                           
  4346                           ; BSR set to: 0
  4347  001EAA  D7B3               	goto	l1697
  4348  001EAC                     l1701:
  4349                           
  4350                           ; BSR set to: 0
  4351  001EAC  0E00               	movlw	0
  4352  001EAE  0100               	movlb	0	; () banked
  4353  001EB0  6F77               	movwf	strtod@eexp& (0+255),b
  4354                           
  4355                           ; BSR set to: 0
  4356  001EB2  C072  FFD9         	movff	strtod@s,fsr2l
  4357  001EB6  C073  FFDA         	movff	strtod@s+1,fsr2h
  4358  001EBA  0E65               	movlw	101
  4359  001EBC  18DE               	xorwf	postinc2,w,c
  4360  001EBE  B4D8               	btfsc	status,2,c
  4361  001EC0  D008               	goto	u15090
  4362                           
  4363                           ; BSR set to: 0
  4364  001EC2  C072  FFD9         	movff	strtod@s,fsr2l
  4365  001EC6  C073  FFDA         	movff	strtod@s+1,fsr2h
  4366  001ECA  0E45               	movlw	69
  4367  001ECC  18DE               	xorwf	postinc2,w,c
  4368  001ECE  A4D8               	btfss	status,2,c
  4369  001ED0  D062               	goto	l1718
  4370  001ED2                     u15090:
  4371                           
  4372                           ; BSR set to: 0
  4373                           
  4374                           ; BSR set to: 0
  4375  001ED2  4B72               	infsnz	strtod@s& (0+255),f,b
  4376  001ED4  2B73               	incf	(strtod@s+1)& (0+255),f,b
  4377  001ED6  C072  FFD9         	movff	strtod@s,fsr2l
  4378  001EDA  C073  FFDA         	movff	strtod@s+1,fsr2h
  4379  001EDE  0E2D               	movlw	45
  4380  001EE0  18DE               	xorwf	postinc2,w,c
  4381  001EE2  A4D8               	btfss	status,2,c
  4382  001EE4  D002               	goto	l1709
  4383                           
  4384                           ; BSR set to: 0
  4385  001EE6  8778               	bsf	strtod@flags& (0+255),3,b
  4386  001EE8  D008               	goto	u15110
  4387  001EEA                     l1709:
  4388                           
  4389                           ; BSR set to: 0
  4390                           
  4391                           ; BSR set to: 0
  4392  001EEA  C072  FFD9         	movff	strtod@s,fsr2l
  4393  001EEE  C073  FFDA         	movff	strtod@s+1,fsr2h
  4394  001EF2  0E2B               	movlw	43
  4395  001EF4  18DE               	xorwf	postinc2,w,c
  4396  001EF6  A4D8               	btfss	status,2,c
  4397  001EF8  D002               	goto	l1712
  4398  001EFA                     u15110:
  4399                           
  4400                           ; BSR set to: 0
  4401                           
  4402                           ; BSR set to: 0
  4403                           
  4404                           ; BSR set to: 0
  4405                           
  4406                           ; BSR set to: 0
  4407                           
  4408                           ; BSR set to: 0
  4409  001EFA  4B72               	infsnz	strtod@s& (0+255),f,b
  4410  001EFC  2B73               	incf	(strtod@s+1)& (0+255),f,b
  4411  001EFE                     l1712:
  4412                           
  4413                           ; BSR set to: 0
  4414                           
  4415                           ; BSR set to: 0
  4416  001EFE  C072  FFD9         	movff	strtod@s,fsr2l
  4417  001F02  C073  FFDA         	movff	strtod@s+1,fsr2h
  4418  001F06  0E30               	movlw	48
  4419  001F08  18DE               	xorwf	postinc2,w,c
  4420  001F0A  B4D8               	btfsc	status,2,c
  4421  001F0C  D7F6               	goto	u15110
  4422                           
  4423                           ; BSR set to: 0
  4424                           
  4425                           ; BSR set to: 0
  4426  001F0E  C072  FFD9         	movff	strtod@s,fsr2l
  4427  001F12  C073  FFDA         	movff	strtod@s+1,fsr2h
  4428  001F16  50DF               	movf	indf2,w,c
  4429  001F18  EC03  F029         	call	_isdigit
  4430  001F1C  A0D8               	btfss	status,0,c
  4431  001F1E  D038               	goto	l1717
  4432  001F20  C072  FFD9         	movff	strtod@s,fsr2l
  4433  001F24  C073  FFDA         	movff	strtod@s+1,fsr2h
  4434  001F28  50DF               	movf	indf2,w,c
  4435  001F2A  0FD0               	addlw	208
  4436  001F2C  0100               	movlb	0	; () banked
  4437  001F2E  6F77               	movwf	strtod@eexp& (0+255),b
  4438                           
  4439                           ; BSR set to: 0
  4440  001F30  4B72               	infsnz	strtod@s& (0+255),f,b
  4441  001F32  2B73               	incf	(strtod@s+1)& (0+255),f,b
  4442                           
  4443                           ; BSR set to: 0
  4444  001F34  C072  FFD9         	movff	strtod@s,fsr2l
  4445  001F38  C073  FFDA         	movff	strtod@s+1,fsr2h
  4446  001F3C  50DF               	movf	indf2,w,c
  4447  001F3E  EC03  F029         	call	_isdigit
  4448  001F42  A0D8               	btfss	status,0,c
  4449  001F44  D025               	goto	l1717
  4450  001F46  C072  FFD9         	movff	strtod@s,fsr2l
  4451  001F4A  C073  FFDA         	movff	strtod@s+1,fsr2h
  4452  001F4E  50DF               	movf	indf2,w,c
  4453  001F50  0100               	movlb	0	; () banked
  4454  001F52  6F76               	movwf	??_strtod& (0+255),b
  4455  001F54  5177               	movf	strtod@eexp& (0+255),w,b
  4456  001F56  0D0A               	mullw	10
  4457  001F58  50F3               	movf	prodl,w,c
  4458  001F5A  2576               	addwf	??_strtod& (0+255),w,b
  4459  001F5C  0FD0               	addlw	208
  4460  001F5E  6F77               	movwf	strtod@eexp& (0+255),b
  4461                           
  4462                           ; BSR set to: 0
  4463  001F60  4B72               	infsnz	strtod@s& (0+255),f,b
  4464  001F62  2B73               	incf	(strtod@s+1)& (0+255),f,b
  4465                           
  4466                           ; BSR set to: 0
  4467  001F64  C072  FFD9         	movff	strtod@s,fsr2l
  4468  001F68  C073  FFDA         	movff	strtod@s+1,fsr2h
  4469  001F6C  50DF               	movf	indf2,w,c
  4470  001F6E  EC03  F029         	call	_isdigit
  4471  001F72  A0D8               	btfss	status,0,c
  4472  001F74  D00D               	goto	l1717
  4473  001F76  C072  FFD9         	movff	strtod@s,fsr2l
  4474  001F7A  C073  FFDA         	movff	strtod@s+1,fsr2h
  4475  001F7E  50DF               	movf	indf2,w,c
  4476  001F80  0100               	movlb	0	; () banked
  4477  001F82  6F76               	movwf	??_strtod& (0+255),b
  4478  001F84  5177               	movf	strtod@eexp& (0+255),w,b
  4479  001F86  0D0A               	mullw	10
  4480  001F88  50F3               	movf	prodl,w,c
  4481  001F8A  2576               	addwf	??_strtod& (0+255),w,b
  4482  001F8C  0FD0               	addlw	208
  4483  001F8E  6F77               	movwf	strtod@eexp& (0+255),b
  4484  001F90                     l1717:
  4485                           
  4486                           ; BSR set to: 0
  4487                           
  4488                           ; BSR set to: 0
  4489                           
  4490                           ; BSR set to: 0
  4491  001F90  0100               	movlb	0	; () banked
  4492  001F92  B778               	btfsc	strtod@flags& (0+255),3,b
  4493                           
  4494                           ; BSR set to: 0
  4495  001F94  6D77               	negf	strtod@eexp& (0+255),b
  4496  001F96                     l1718:
  4497                           
  4498                           ; BSR set to: 0
  4499                           
  4500                           ; BSR set to: 0
  4501                           
  4502                           ; BSR set to: 0
  4503  001F96  5177               	movf	strtod@eexp& (0+255),w,b
  4504  001F98  2779               	addwf	strtod@expon& (0+255),f,b
  4505                           
  4506                           ; BSR set to: 0
  4507  001F9A  5174               	movf	strtod@res& (0+255),w,b
  4508  001F9C  1175               	iorwf	(strtod@res+1)& (0+255),w,b
  4509  001F9E  A4D8               	btfss	status,2,c
  4510                           
  4511                           ; BSR set to: 0
  4512  001FA0  A378               	btfss	strtod@flags& (0+255),1,b
  4513  001FA2  D008               	goto	l1719
  4514                           
  4515                           ; BSR set to: 0
  4516  001FA4  C074  FFD9         	movff	strtod@res,fsr2l
  4517  001FA8  C075  FFDA         	movff	strtod@res+1,fsr2h
  4518  001FAC  C072  FFDE         	movff	strtod@s,postinc2
  4519  001FB0  C073  FFDD         	movff	strtod@s+1,postdec2
  4520  001FB4                     l1719:
  4521                           
  4522                           ; BSR set to: 0
  4523                           
  4524                           ; BSR set to: 0
  4525  001FB4  C07A  F022         	movff	strtod@_u,___altoft@c
  4526  001FB8  C07B  F023         	movff	strtod@_u+1,___altoft@c+1
  4527  001FBC  C07C  F024         	movff	strtod@_u+2,___altoft@c+2
  4528  001FC0  C07D  F025         	movff	strtod@_u+3,___altoft@c+3
  4529  001FC4  ECB0  F023         	call	___altoft	;wreg free
  4530  001FC8  C022  F07A         	movff	?___altoft,strtod@_u
  4531  001FCC  C023  F07B         	movff	?___altoft+1,strtod@_u+1
  4532  001FD0  C024  F07C         	movff	?___altoft+2,strtod@_u+2
  4533  001FD4  0100               	movlb	0	; () banked
  4534  001FD6  517A               	movf	strtod@_u& (0+255),w,b
  4535  001FD8  117B               	iorwf	(strtod@_u+1)& (0+255),w,b
  4536  001FDA  117C               	iorwf	(strtod@_u+2)& (0+255),w,b
  4537  001FDC  A4D8               	btfss	status,2,c
  4538  001FDE  D007               	goto	l1720
  4539                           
  4540                           ; BSR set to: 0
  4541  001FE0  0E00               	movlw	0
  4542  001FE2  6F72               	movwf	?_strtod& (0+255),b
  4543  001FE4  0E00               	movlw	0
  4544  001FE6  6F73               	movwf	(?_strtod+1)& (0+255),b
  4545  001FE8  0E00               	movlw	0
  4546  001FEA  6F74               	movwf	(?_strtod+2)& (0+255),b
  4547                           
  4548                           ; BSR set to: 0
  4549  001FEC  0012               	return	
  4550  001FEE                     l1720:
  4551                           
  4552                           ; BSR set to: 0
  4553                           
  4554                           ; BSR set to: 0
  4555  001FEE  AF79               	btfss	strtod@expon& (0+255),7,b
  4556  001FF0  D059               	goto	l1722
  4557                           
  4558                           ; BSR set to: 0
  4559  001FF2  6D79               	negf	strtod@expon& (0+255),b
  4560  001FF4  D017               	goto	l1723
  4561  001FF6                     
  4562                           ; BSR set to: 0
  4563                           
  4564                           ; BSR set to: 0
  4565  001FF6  C07A  F022         	movff	strtod@_u,___ftdiv@f1
  4566  001FFA  C07B  F023         	movff	strtod@_u+1,___ftdiv@f1+1
  4567  001FFE  C07C  F024         	movff	strtod@_u+2,___ftdiv@f1+2
  4568  002002  0E03               	movlw	3
  4569  002004  6E25               	movwf	___ftdiv@f2,c
  4570  002006  0E15               	movlw	21
  4571  002008  6E26               	movwf	___ftdiv@f2+1,c
  4572  00200A  0E50               	movlw	80
  4573  00200C  6E27               	movwf	___ftdiv@f2+2,c
  4574  00200E  ECF2  F01F         	call	___ftdiv	;wreg free
  4575  002012  C022  F07A         	movff	?___ftdiv,strtod@_u
  4576  002016  C023  F07B         	movff	?___ftdiv+1,strtod@_u+1
  4577  00201A  C024  F07C         	movff	?___ftdiv+2,strtod@_u+2
  4578  00201E  0EF6               	movlw	246
  4579  002020  0100               	movlb	0	; () banked
  4580  002022  2779               	addwf	strtod@expon& (0+255),f,b
  4581  002024                     l1723:
  4582                           
  4583                           ; BSR set to: 0
  4584                           
  4585                           ; BSR set to: 0
  4586  002024  5179               	movf	strtod@expon& (0+255),w,b
  4587  002026  0A80               	xorlw	128
  4588  002028  0F76               	addlw	-138
  4589  00202A  A0D8               	btfss	status,0,c
  4590  00202C  D017               	goto	l1726
  4591  00202E  D7E3               	goto	l1724
  4592  002030                     
  4593                           ; BSR set to: 0
  4594                           
  4595                           ; BSR set to: 0
  4596  002030  C07A  F022         	movff	strtod@_u,___ftdiv@f1
  4597  002034  C07B  F023         	movff	strtod@_u+1,___ftdiv@f1+1
  4598  002038  C07C  F024         	movff	strtod@_u+2,___ftdiv@f1+2
  4599  00203C  0E00               	movlw	0
  4600  00203E  6E25               	movwf	___ftdiv@f2,c
  4601  002040  0E20               	movlw	32
  4602  002042  6E26               	movwf	___ftdiv@f2+1,c
  4603  002044  0E41               	movlw	65
  4604  002046  6E27               	movwf	___ftdiv@f2+2,c
  4605  002048  ECF2  F01F         	call	___ftdiv	;wreg free
  4606  00204C  C022  F07A         	movff	?___ftdiv,strtod@_u
  4607  002050  C023  F07B         	movff	?___ftdiv+1,strtod@_u+1
  4608  002054  C024  F07C         	movff	?___ftdiv+2,strtod@_u+2
  4609  002058  0100               	movlb	0	; () banked
  4610  00205A  0779               	decf	strtod@expon& (0+255),f,b
  4611  00205C                     l1726:
  4612                           
  4613                           ; BSR set to: 0
  4614                           
  4615                           ; BSR set to: 0
  4616  00205C  5179               	movf	strtod@expon& (0+255),w,b
  4617  00205E  A4D8               	btfss	status,2,c
  4618  002060  D7E7               	goto	l1727
  4619                           
  4620                           ; BSR set to: 0
  4621                           
  4622                           ; BSR set to: 0
  4623  002062  C07A  F01A         	movff	strtod@_u,___ftge@ff1
  4624  002066  C07B  F01B         	movff	strtod@_u+1,___ftge@ff1+1
  4625  00206A  C07C  F01C         	movff	strtod@_u+2,___ftge@ff1+2
  4626  00206E  0E00               	movlw	0
  4627  002070  6E1D               	movwf	___ftge@ff2,c
  4628  002072  0E80               	movlw	128
  4629  002074  6E1E               	movwf	___ftge@ff2+1,c
  4630  002076  0E00               	movlw	0
  4631  002078  6E1F               	movwf	___ftge@ff2+2,c
  4632  00207A  EC12  F022         	call	___ftge	;wreg free
  4633  00207E  B0D8               	btfsc	status,0,c
  4634  002080  D06C               	goto	l1739
  4635  002082  0100               	movlb	0	; () banked
  4636  002084  A178               	btfss	strtod@flags& (0+255),0,b
  4637  002086  D007               	goto	l1730
  4638                           
  4639                           ; BSR set to: 0
  4640  002088  0E00               	movlw	0
  4641  00208A  6F72               	movwf	?_strtod& (0+255),b
  4642  00208C  0E80               	movlw	128
  4643  00208E  6F73               	movwf	(?_strtod+1)& (0+255),b
  4644  002090  0E80               	movlw	128
  4645  002092  6F74               	movwf	(?_strtod+2)& (0+255),b
  4646                           
  4647                           ; BSR set to: 0
  4648  002094  0012               	return	
  4649  002096                     l1730:
  4650                           
  4651                           ; BSR set to: 0
  4652                           
  4653                           ; BSR set to: 0
  4654  002096  0E00               	movlw	0
  4655  002098  6F72               	movwf	?_strtod& (0+255),b
  4656  00209A  0E80               	movlw	128
  4657  00209C  6F73               	movwf	(?_strtod+1)& (0+255),b
  4658  00209E  0E00               	movlw	0
  4659  0020A0  6F74               	movwf	(?_strtod+2)& (0+255),b
  4660                           
  4661                           ; BSR set to: 0
  4662  0020A2  0012               	return	
  4663  0020A4                     l1722:
  4664                           
  4665                           ; BSR set to: 0
  4666                           
  4667                           ; BSR set to: 0
  4668  0020A4  5179               	movf	strtod@expon& (0+255),w,b
  4669  0020A6  0A80               	xorlw	128
  4670  0020A8  0F7F               	addlw	-129
  4671  0020AA  B0D8               	btfsc	status,0,c
  4672  0020AC  D018               	goto	l1733
  4673  0020AE  D055               	goto	l1739
  4674  0020B0                     
  4675                           ; BSR set to: 0
  4676                           
  4677                           ; BSR set to: 0
  4678  0020B0  C07A  F060         	movff	strtod@_u,___ftmul@f1
  4679  0020B4  C07B  F061         	movff	strtod@_u+1,___ftmul@f1+1
  4680  0020B8  C07C  F062         	movff	strtod@_u+2,___ftmul@f1+2
  4681  0020BC  0E03               	movlw	3
  4682  0020BE  6F63               	movwf	___ftmul@f2& (0+255),b
  4683  0020C0  0E15               	movlw	21
  4684  0020C2  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  4685  0020C4  0E50               	movlw	80
  4686  0020C6  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  4687  0020C8  EC77  F01F         	call	___ftmul	;wreg free
  4688  0020CC  C060  F07A         	movff	?___ftmul,strtod@_u
  4689  0020D0  C061  F07B         	movff	?___ftmul+1,strtod@_u+1
  4690  0020D4  C062  F07C         	movff	?___ftmul+2,strtod@_u+2
  4691  0020D8  0EF6               	movlw	246
  4692  0020DA  0100               	movlb	0	; () banked
  4693  0020DC  2779               	addwf	strtod@expon& (0+255),f,b
  4694  0020DE                     l1733:
  4695                           
  4696                           ; BSR set to: 0
  4697                           
  4698                           ; BSR set to: 0
  4699  0020DE  0E0A               	movlw	10
  4700  0020E0  6179               	cpfslt	strtod@expon& (0+255),b
  4701  0020E2  D7E6               	goto	l1734
  4702  0020E4  D016               	goto	l1736
  4703  0020E6                     
  4704                           ; BSR set to: 0
  4705                           
  4706                           ; BSR set to: 0
  4707  0020E6  C07A  F060         	movff	strtod@_u,___ftmul@f1
  4708  0020EA  C07B  F061         	movff	strtod@_u+1,___ftmul@f1+1
  4709  0020EE  C07C  F062         	movff	strtod@_u+2,___ftmul@f1+2
  4710  0020F2  0E00               	movlw	0
  4711  0020F4  6F63               	movwf	___ftmul@f2& (0+255),b
  4712  0020F6  0E20               	movlw	32
  4713  0020F8  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  4714  0020FA  0E41               	movlw	65
  4715  0020FC  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  4716  0020FE  EC77  F01F         	call	___ftmul	;wreg free
  4717  002102  C060  F07A         	movff	?___ftmul,strtod@_u
  4718  002106  C061  F07B         	movff	?___ftmul+1,strtod@_u+1
  4719  00210A  C062  F07C         	movff	?___ftmul+2,strtod@_u+2
  4720  00210E  0100               	movlb	0	; () banked
  4721  002110  0779               	decf	strtod@expon& (0+255),f,b
  4722  002112                     l1736:
  4723                           
  4724                           ; BSR set to: 0
  4725                           
  4726                           ; BSR set to: 0
  4727  002112  5179               	movf	strtod@expon& (0+255),w,b
  4728  002114  A4D8               	btfss	status,2,c
  4729  002116  D7E7               	goto	l1737
  4730                           
  4731                           ; BSR set to: 0
  4732                           
  4733                           ; BSR set to: 0
  4734  002118  0EFF               	movlw	255
  4735  00211A  6E1A               	movwf	___ftge@ff1,c
  4736  00211C  0E7F               	movlw	127
  4737  00211E  6E1B               	movwf	___ftge@ff1+1,c
  4738  002120  0E7F               	movlw	127
  4739  002122  6E1C               	movwf	___ftge@ff1+2,c
  4740  002124  C07A  F01D         	movff	strtod@_u,___ftge@ff2
  4741  002128  C07B  F01E         	movff	strtod@_u+1,___ftge@ff2+1
  4742  00212C  C07C  F01F         	movff	strtod@_u+2,___ftge@ff2+2
  4743  002130  EC12  F022         	call	___ftge	;wreg free
  4744  002134  B0D8               	btfsc	status,0,c
  4745  002136  D011               	goto	l1739
  4746  002138  0100               	movlb	0	; () banked
  4747  00213A  A178               	btfss	strtod@flags& (0+255),0,b
  4748  00213C  D007               	goto	l1740
  4749                           
  4750                           ; BSR set to: 0
  4751  00213E  0E00               	movlw	0
  4752  002140  6F72               	movwf	?_strtod& (0+255),b
  4753  002142  0E80               	movlw	128
  4754  002144  6F73               	movwf	(?_strtod+1)& (0+255),b
  4755  002146  0E80               	movlw	128
  4756  002148  6F74               	movwf	(?_strtod+2)& (0+255),b
  4757                           
  4758                           ; BSR set to: 0
  4759  00214A  0012               	return	
  4760  00214C                     l1740:
  4761                           
  4762                           ; BSR set to: 0
  4763                           
  4764                           ; BSR set to: 0
  4765  00214C  0E00               	movlw	0
  4766  00214E  6F72               	movwf	?_strtod& (0+255),b
  4767  002150  0E80               	movlw	128
  4768  002152  6F73               	movwf	(?_strtod+1)& (0+255),b
  4769  002154  0E00               	movlw	0
  4770  002156  6F74               	movwf	(?_strtod+2)& (0+255),b
  4771                           
  4772                           ; BSR set to: 0
  4773  002158  0012               	return	
  4774  00215A                     l1739:
  4775                           
  4776                           ; BSR set to: 0
  4777                           
  4778                           ; BSR set to: 0
  4779  00215A  0100               	movlb	0	; () banked
  4780  00215C  A178               	btfss	strtod@flags& (0+255),0,b
  4781  00215E  D00E               	goto	l1741
  4782                           
  4783                           ; BSR set to: 0
  4784  002160  C07A  F06F         	movff	strtod@_u,___ftneg@f1
  4785  002164  C07B  F070         	movff	strtod@_u+1,___ftneg@f1+1
  4786  002168  C07C  F071         	movff	strtod@_u+2,___ftneg@f1+2
  4787  00216C  ECBA  F028         	call	___ftneg	;wreg free
  4788  002170  C06F  F07A         	movff	?___ftneg,strtod@_u
  4789  002174  C070  F07B         	movff	?___ftneg+1,strtod@_u+1
  4790  002178  C071  F07C         	movff	?___ftneg+2,strtod@_u+2
  4791  00217C                     l1741:
  4792  00217C  C07A  F072         	movff	strtod@_u,?_strtod
  4793  002180  C07B  F073         	movff	strtod@_u+1,?_strtod+1
  4794  002184  C07C  F074         	movff	strtod@_u+2,?_strtod+2
  4795  002188  0012               	return	
  4796  00218A                     __end_of_strtod:
  4797                           	opt stack 0
  4798                           tosu	equ	0xFFF
  4799                           tosh	equ	0xFFE
  4800                           tosl	equ	0xFFD
  4801                           pclath	equ	0xFFA
  4802                           tblptru	equ	0xFF8
  4803                           tblptrh	equ	0xFF7
  4804                           tblptrl	equ	0xFF6
  4805                           tablat	equ	0xFF5
  4806                           prodh	equ	0xFF4
  4807                           prodl	equ	0xFF3
  4808                           intcon	equ	0xFF2
  4809                           intcon2	equ	0xFF1
  4810                           intcon3	equ	0xFF0
  4811                           postinc0	equ	0xFEE
  4812                           wreg	equ	0xFE8
  4813                           indf1	equ	0xFE7
  4814                           postinc1	equ	0xFE6
  4815                           postdec1	equ	0xFE5
  4816                           fsr1h	equ	0xFE2
  4817                           fsr1l	equ	0xFE1
  4818                           indf2	equ	0xFDF
  4819                           postinc2	equ	0xFDE
  4820                           postdec2	equ	0xFDD
  4821                           fsr2h	equ	0xFDA
  4822                           fsr2l	equ	0xFD9
  4823                           status	equ	0xFD8
  4824                           
  4825 ;; *************** function _isspace *****************
  4826 ;; Defined at:
  4827 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;  c               1    wreg     unsigned char 
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;  c               1   27[COMRAM] unsigned char 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;		None               void
  4834 ;; Registers used:
  4835 ;;		wreg, status,2, status,0
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4841 ;;      Params:         0       0       0       0       0       0       0       0       0
  4842 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4843 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4844 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4845 ;;Total ram usage:        3 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    2
  4848 ;; This function calls:
  4849 ;;		Nothing
  4850 ;; This function is called by:
  4851 ;;		_strtod
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text19
  4856  005128                     __ptext19:
  4857                           	opt stack 0
  4858  005128                     _isspace:
  4859                           	opt stack 23
  4860                           
  4861                           ;incstack = 0
  4862                           ;isspace@c stored from wreg
  4863  005128  6E1C               	movwf	isspace@c,c
  4864  00512A  0E01               	movlw	1
  4865  00512C  6E1B               	movwf	_isspace$3311,c
  4866  00512E  0E20               	movlw	32
  4867  005130  181C               	xorwf	isspace@c,w,c
  4868  005132  B4D8               	btfsc	status,2,c
  4869  005134  D008               	goto	l1968
  4870  005136  0E0E               	movlw	14
  4871  005138  601C               	cpfslt	isspace@c,c
  4872  00513A  D003               	goto	u7890
  4873  00513C  0E09               	movlw	9
  4874  00513E  601C               	cpfslt	isspace@c,c
  4875  005140  D002               	goto	l1968
  4876  005142                     u7890:
  4877  005142  0E00               	movlw	0
  4878  005144  6E1B               	movwf	_isspace$3311,c
  4879  005146                     l1968:
  4880  005146  C01B  F01A         	movff	_isspace$3311,??_isspace
  4881  00514A  301A               	rrcf	??_isspace,w,c
  4882  00514C  0012               	return	
  4883  00514E                     __end_of_isspace:
  4884                           	opt stack 0
  4885                           tosu	equ	0xFFF
  4886                           tosh	equ	0xFFE
  4887                           tosl	equ	0xFFD
  4888                           pclath	equ	0xFFA
  4889                           tblptru	equ	0xFF8
  4890                           tblptrh	equ	0xFF7
  4891                           tblptrl	equ	0xFF6
  4892                           tablat	equ	0xFF5
  4893                           prodh	equ	0xFF4
  4894                           prodl	equ	0xFF3
  4895                           intcon	equ	0xFF2
  4896                           intcon2	equ	0xFF1
  4897                           intcon3	equ	0xFF0
  4898                           postinc0	equ	0xFEE
  4899                           wreg	equ	0xFE8
  4900                           indf1	equ	0xFE7
  4901                           postinc1	equ	0xFE6
  4902                           postdec1	equ	0xFE5
  4903                           fsr1h	equ	0xFE2
  4904                           fsr1l	equ	0xFE1
  4905                           indf2	equ	0xFDF
  4906                           postinc2	equ	0xFDE
  4907                           postdec2	equ	0xFDD
  4908                           fsr2h	equ	0xFDA
  4909                           fsr2l	equ	0xFD9
  4910                           status	equ	0xFD8
  4911                           
  4912 ;; *************** function ___altoft *****************
  4913 ;; Defined at:
  4914 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;  c               4   33[COMRAM] long 
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;  sign            1   42[COMRAM] unsigned char 
  4919 ;;  exp             1   41[COMRAM] unsigned char 
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  3   33[COMRAM] float 
  4922 ;; Registers used:
  4923 ;;		wreg, status,2, status,0, cstack
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4929 ;;      Params:         4       0       0       0       0       0       0       0       0
  4930 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4931 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4932 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4933 ;;Total ram usage:       10 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    3
  4936 ;; This function calls:
  4937 ;;		___ftpack
  4938 ;; This function is called by:
  4939 ;;		_strtod
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text20
  4944  004760                     __ptext20:
  4945                           	opt stack 0
  4946  004760                     ___altoft:
  4947                           	opt stack 22
  4948                           
  4949                           ;incstack = 0
  4950  004760  0E00               	movlw	0
  4951  004762  6E2B               	movwf	___altoft@sign,c
  4952  004764  0E8E               	movlw	142
  4953  004766  6E2A               	movwf	___altoft@exp,c
  4954  004768  AE25               	btfss	___altoft@c+3,7,c
  4955  00476A  D011               	goto	l1609
  4956  00476C  1E25               	comf	___altoft@c+3,f,c
  4957  00476E  1E24               	comf	___altoft@c+2,f,c
  4958  004770  1E23               	comf	___altoft@c+1,f,c
  4959  004772  6C22               	negf	___altoft@c,c
  4960  004774  0E00               	movlw	0
  4961  004776  2223               	addwfc	___altoft@c+1,f,c
  4962  004778  2224               	addwfc	___altoft@c+2,f,c
  4963  00477A  2225               	addwfc	___altoft@c+3,f,c
  4964  00477C  0E01               	movlw	1
  4965  00477E  6E2B               	movwf	___altoft@sign,c
  4966  004780  D006               	goto	l1609
  4967  004782  90D8               	bcf	status,0,c
  4968  004784  3225               	rrcf	___altoft@c+3,f,c
  4969  004786  3224               	rrcf	___altoft@c+2,f,c
  4970  004788  3223               	rrcf	___altoft@c+1,f,c
  4971  00478A  3222               	rrcf	___altoft@c,f,c
  4972  00478C  2A2A               	incf	___altoft@exp,f,c
  4973  00478E                     l1609:
  4974  00478E  0E00               	movlw	0
  4975  004790  1422               	andwf	___altoft@c,w,c
  4976  004792  6E26               	movwf	??___altoft& (0+255),c
  4977  004794  0E00               	movlw	0
  4978  004796  1423               	andwf	___altoft@c+1,w,c
  4979  004798  6E27               	movwf	(??___altoft+1)& (0+255),c
  4980  00479A  0E00               	movlw	0
  4981  00479C  1424               	andwf	___altoft@c+2,w,c
  4982  00479E  6E28               	movwf	(??___altoft+2)& (0+255),c
  4983  0047A0  0EFF               	movlw	255
  4984  0047A2  1425               	andwf	___altoft@c+3,w,c
  4985  0047A4  6E29               	movwf	(??___altoft+3)& (0+255),c
  4986  0047A6  5026               	movf	??___altoft,w,c
  4987  0047A8  1027               	iorwf	??___altoft+1,w,c
  4988  0047AA  1028               	iorwf	??___altoft+2,w,c
  4989  0047AC  1029               	iorwf	??___altoft+3,w,c
  4990  0047AE  A4D8               	btfss	status,2,c
  4991  0047B0  D7E8               	goto	l1610
  4992  0047B2  C022  F01A         	movff	___altoft@c,___ftpack@arg
  4993  0047B6  C023  F01B         	movff	___altoft@c+1,___ftpack@arg+1
  4994  0047BA  C024  F01C         	movff	___altoft@c+2,___ftpack@arg+2
  4995  0047BE  C02A  F01D         	movff	___altoft@exp,___ftpack@exp
  4996  0047C2  C02B  F01E         	movff	___altoft@sign,___ftpack@sign
  4997  0047C6  ECC5  F020         	call	___ftpack	;wreg free
  4998  0047CA  C01A  F022         	movff	?___ftpack,?___altoft
  4999  0047CE  C01B  F023         	movff	?___ftpack+1,?___altoft+1
  5000  0047D2  C01C  F024         	movff	?___ftpack+2,?___altoft+2
  5001  0047D6  0012               	return	
  5002  0047D8                     __end_of___altoft:
  5003                           	opt stack 0
  5004                           tosu	equ	0xFFF
  5005                           tosh	equ	0xFFE
  5006                           tosl	equ	0xFFD
  5007                           pclath	equ	0xFFA
  5008                           tblptru	equ	0xFF8
  5009                           tblptrh	equ	0xFF7
  5010                           tblptrl	equ	0xFF6
  5011                           tablat	equ	0xFF5
  5012                           prodh	equ	0xFF4
  5013                           prodl	equ	0xFF3
  5014                           intcon	equ	0xFF2
  5015                           intcon2	equ	0xFF1
  5016                           intcon3	equ	0xFF0
  5017                           postinc0	equ	0xFEE
  5018                           wreg	equ	0xFE8
  5019                           indf1	equ	0xFE7
  5020                           postinc1	equ	0xFE6
  5021                           postdec1	equ	0xFE5
  5022                           fsr1h	equ	0xFE2
  5023                           fsr1l	equ	0xFE1
  5024                           indf2	equ	0xFDF
  5025                           postinc2	equ	0xFDE
  5026                           postdec2	equ	0xFDD
  5027                           fsr2h	equ	0xFDA
  5028                           fsr2l	equ	0xFD9
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function _get_gpstime *****************
  5032 ;; Defined at:
  5033 ;;		line 178 in file "bibliotecas/GPS.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;		None
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  time_buffer    15   11[BANK0 ] unsigned char [15]
  5038 ;;  _time           4   26[BANK0 ] unsigned long 
  5039 ;;  index           1   30[BANK0 ] unsigned char 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  4    6[BANK0 ] unsigned long 
  5042 ;; Registers used:
  5043 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5049 ;;      Params:         0       4       0       0       0       0       0       0       0
  5050 ;;      Locals:         0      20       0       0       0       0       0       0       0
  5051 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5052 ;;      Totals:         0      25       0       0       0       0       0       0       0
  5053 ;;Total ram usage:       25 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    4
  5056 ;; This function calls:
  5057 ;;		_atol
  5058 ;; This function is called by:
  5059 ;;		_gps
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           	psect	text21
  5064  0047D8                     __ptext21:
  5065                           	opt stack 0
  5066  0047D8                     _get_gpstime:
  5067                           	opt stack 24
  5068                           
  5069                           ;GPS.c: 180: unsigned char index;
  5070                           ;GPS.c: 181: unsigned char time_buffer[15];
  5071                           ;GPS.c: 182: unsigned long int _time;
  5072                           ;GPS.c: 185: for(index = 0; gga_buffer[index]!=','; index++)
  5073                           
  5074                           ;incstack = 0
  5075  0047D8  0E00               	movlw	0
  5076  0047DA  0100               	movlb	0	; () banked
  5077  0047DC  6F7E               	movwf	get_gpstime@index& (0+255),b
  5078  0047DE  D013               	goto	l154
  5079  0047E0                     
  5080                           ; BSR set to: 0
  5081                           ;GPS.c: 186: {
  5082                           ;GPS.c: 187: time_buffer[index] = gga_buffer[index];
  5083                           
  5084                           ; BSR set to: 0
  5085  0047E0  517E               	movf	get_gpstime@index& (0+255),w,b
  5086  0047E2  0D01               	mullw	1
  5087  0047E4  0E00               	movlw	low _gga_buffer
  5088  0047E6  24F3               	addwf	prodl,w,c
  5089  0047E8  6ED9               	movwf	fsr2l,c
  5090  0047EA  0E01               	movlw	high _gga_buffer
  5091  0047EC  20F4               	addwfc	prodh,w,c
  5092  0047EE  6EDA               	movwf	fsr2h,c
  5093  0047F0  517E               	movf	get_gpstime@index& (0+255),w,b
  5094  0047F2  0D01               	mullw	1
  5095  0047F4  0E6B               	movlw	low get_gpstime@time_buffer
  5096  0047F6  24F3               	addwf	prodl,w,c
  5097  0047F8  6EE1               	movwf	fsr1l,c
  5098  0047FA  0E00               	movlw	high get_gpstime@time_buffer
  5099  0047FC  20F4               	addwfc	prodh,w,c
  5100  0047FE  6EE2               	movwf	fsr1h,c
  5101  004800  CFDF FFE7          	movff	indf2,indf1
  5102                           
  5103                           ; BSR set to: 0
  5104  004804  2B7E               	incf	get_gpstime@index& (0+255),f,b
  5105  004806                     l154:
  5106                           
  5107                           ; BSR set to: 0
  5108                           
  5109                           ; BSR set to: 0
  5110  004806  517E               	movf	get_gpstime@index& (0+255),w,b
  5111  004808  0D01               	mullw	1
  5112  00480A  0E00               	movlw	low _gga_buffer
  5113  00480C  24F3               	addwf	prodl,w,c
  5114  00480E  6ED9               	movwf	fsr2l,c
  5115  004810  0E01               	movlw	high _gga_buffer
  5116  004812  20F4               	addwfc	prodh,w,c
  5117  004814  6EDA               	movwf	fsr2h,c
  5118  004816  0E2C               	movlw	44
  5119  004818  18DE               	xorwf	postinc2,w,c
  5120  00481A  A4D8               	btfss	status,2,c
  5121  00481C  D7E1               	goto	l155
  5122                           
  5123                           ; BSR set to: 0
  5124                           ;GPS.c: 188: }
  5125                           ;GPS.c: 189: _time= atol(time_buffer);
  5126                           
  5127                           ; BSR set to: 0
  5128  00481E  0E6B               	movlw	low get_gpstime@time_buffer
  5129  004820  6E26               	movwf	atol@s,c
  5130  004822  0E00               	movlw	high get_gpstime@time_buffer
  5131  004824  6E27               	movwf	atol@s+1,c
  5132  004826  EC7E  F01E         	call	_atol	;wreg free
  5133  00482A  C026  F07A         	movff	?_atol,get_gpstime@_time
  5134  00482E  C027  F07B         	movff	?_atol+1,get_gpstime@_time+1
  5135  004832  C028  F07C         	movff	?_atol+2,get_gpstime@_time+2
  5136  004836  C029  F07D         	movff	?_atol+3,get_gpstime@_time+3
  5137                           
  5138                           ;GPS.c: 190: return _time;
  5139  00483A  C07A  F066         	movff	get_gpstime@_time,?_get_gpstime
  5140  00483E  C07B  F067         	movff	get_gpstime@_time+1,?_get_gpstime+1
  5141  004842  C07C  F068         	movff	get_gpstime@_time+2,?_get_gpstime+2
  5142  004846  C07D  F069         	movff	get_gpstime@_time+3,?_get_gpstime+3
  5143  00484A  0012               	return	
  5144  00484C                     __end_of_get_gpstime:
  5145                           	opt stack 0
  5146                           tosu	equ	0xFFF
  5147                           tosh	equ	0xFFE
  5148                           tosl	equ	0xFFD
  5149                           pclath	equ	0xFFA
  5150                           tblptru	equ	0xFF8
  5151                           tblptrh	equ	0xFF7
  5152                           tblptrl	equ	0xFF6
  5153                           tablat	equ	0xFF5
  5154                           prodh	equ	0xFF4
  5155                           prodl	equ	0xFF3
  5156                           intcon	equ	0xFF2
  5157                           intcon2	equ	0xFF1
  5158                           intcon3	equ	0xFF0
  5159                           postinc0	equ	0xFEE
  5160                           wreg	equ	0xFE8
  5161                           indf1	equ	0xFE7
  5162                           postinc1	equ	0xFE6
  5163                           postdec1	equ	0xFE5
  5164                           fsr1h	equ	0xFE2
  5165                           fsr1l	equ	0xFE1
  5166                           indf2	equ	0xFDF
  5167                           postinc2	equ	0xFDE
  5168                           postdec2	equ	0xFDD
  5169                           fsr2h	equ	0xFDA
  5170                           fsr2l	equ	0xFD9
  5171                           status	equ	0xFD8
  5172                           
  5173 ;; *************** function _atol *****************
  5174 ;; Defined at:
  5175 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atol.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  s               2   37[COMRAM] PTR const unsigned char 
  5178 ;;		 -> get_gpstime@time_buffer(15), 
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  a               4    1[BANK0 ] long 
  5181 ;;  c               1    5[BANK0 ] unsigned char 
  5182 ;;  sign            1    0[BANK0 ] unsigned char 
  5183 ;; Return value:  Size  Location     Type
  5184 ;;                  4   37[COMRAM] long 
  5185 ;; Registers used:
  5186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5192 ;;      Params:         4       0       0       0       0       0       0       0       0
  5193 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5194 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5195 ;;      Totals:         8       6       0       0       0       0       0       0       0
  5196 ;;Total ram usage:       14 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    3
  5199 ;; This function calls:
  5200 ;;		___lmul
  5201 ;;		_isdigit
  5202 ;; This function is called by:
  5203 ;;		_get_gpstime
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	text22
  5208  003CFC                     __ptext22:
  5209                           	opt stack 0
  5210  003CFC                     _atol:
  5211                           	opt stack 24
  5212                           
  5213                           ;incstack = 0
  5214  003CFC  C026  FFD9         	movff	atol@s,fsr2l
  5215  003D00  C027  FFDA         	movff	atol@s+1,fsr2h
  5216  003D04  50DF               	movf	indf2,w,c
  5217  003D06  0100               	movlb	0	; () banked
  5218  003D08  6F65               	movwf	atol@c& (0+255),b
  5219                           
  5220                           ; BSR set to: 0
  5221  003D0A  4A26               	infsnz	atol@s,f,c
  5222  003D0C  2A27               	incf	atol@s+1,f,c
  5223                           
  5224                           ; BSR set to: 0
  5225  003D0E  0E20               	movlw	32
  5226  003D10  1965               	xorwf	atol@c& (0+255),w,b
  5227  003D12  B4D8               	btfsc	status,2,c
  5228  003D14  D7F3               	goto	_atol
  5229                           
  5230                           ; BSR set to: 0
  5231  003D16  0E09               	movlw	9
  5232  003D18  1965               	xorwf	atol@c& (0+255),w,b
  5233  003D1A  B4D8               	btfsc	status,2,c
  5234  003D1C  D7EF               	goto	_atol
  5235                           
  5236                           ; BSR set to: 0
  5237                           
  5238                           ; BSR set to: 0
  5239  003D1E  0E00               	movlw	0
  5240  003D20  6F61               	movwf	atol@a& (0+255),b
  5241  003D22  0E00               	movlw	0
  5242  003D24  6F62               	movwf	(atol@a+1)& (0+255),b
  5243  003D26  0E00               	movlw	0
  5244  003D28  6F63               	movwf	(atol@a+2)& (0+255),b
  5245  003D2A  0E00               	movlw	0
  5246  003D2C  6F64               	movwf	(atol@a+3)& (0+255),b
  5247  003D2E  0E00               	movlw	0
  5248  003D30  6F60               	movwf	atol@sign& (0+255),b
  5249                           
  5250                           ; BSR set to: 0
  5251  003D32  0E2D               	movlw	45
  5252  003D34  1965               	xorwf	atol@c& (0+255),w,b
  5253  003D36  A4D8               	btfss	status,2,c
  5254  003D38  D002               	goto	l1751
  5255                           
  5256                           ; BSR set to: 0
  5257  003D3A  2B60               	incf	atol@sign& (0+255),f,b
  5258  003D3C  D028               	goto	L4
  5259  003D3E                     l1751:
  5260                           
  5261                           ; BSR set to: 0
  5262                           
  5263                           ; BSR set to: 0
  5264  003D3E  0E2B               	movlw	43
  5265  003D40  1965               	xorwf	atol@c& (0+255),w,b
  5266  003D42  A4D8               	btfss	status,2,c
  5267  003D44  D02C               	goto	l1754
  5268  003D46  D023               	goto	L4
  5269  003D48                     
  5270                           ; BSR set to: 0
  5271  003D48  C061  F01A         	movff	atol@a,___lmul@multiplier
  5272  003D4C  C062  F01B         	movff	atol@a+1,___lmul@multiplier+1
  5273  003D50  C063  F01C         	movff	atol@a+2,___lmul@multiplier+2
  5274  003D54  C064  F01D         	movff	atol@a+3,___lmul@multiplier+3
  5275  003D58  0E0A               	movlw	10
  5276  003D5A  6E1E               	movwf	___lmul@multiplicand,c
  5277  003D5C  0E00               	movlw	0
  5278  003D5E  6E1F               	movwf	___lmul@multiplicand+1,c
  5279  003D60  0E00               	movlw	0
  5280  003D62  6E20               	movwf	___lmul@multiplicand+2,c
  5281  003D64  0E00               	movlw	0
  5282  003D66  6E21               	movwf	___lmul@multiplicand+3,c
  5283  003D68  EC2B  F026         	call	___lmul	;wreg free
  5284  003D6C  C065  F02A         	movff	atol@c,??_atol
  5285  003D70  0ED0               	movlw	208
  5286  003D72  262A               	addwf	??_atol,f,c
  5287  003D74  502A               	movf	??_atol,w,c
  5288  003D76  241A               	addwf	?___lmul,w,c
  5289  003D78  0100               	movlb	0	; () banked
  5290  003D7A  6F61               	movwf	atol@a& (0+255),b
  5291  003D7C  0E00               	movlw	0
  5292  003D7E  201B               	addwfc	?___lmul+1,w,c
  5293  003D80  6F62               	movwf	(atol@a+1)& (0+255),b
  5294  003D82  0E00               	movlw	0
  5295  003D84  201C               	addwfc	?___lmul+2,w,c
  5296  003D86  6F63               	movwf	(atol@a+2)& (0+255),b
  5297  003D88  0E00               	movlw	0
  5298  003D8A  201D               	addwfc	?___lmul+3,w,c
  5299  003D8C  6F64               	movwf	(atol@a+3)& (0+255),b
  5300  003D8E                     L4:
  5301                           
  5302                           ; BSR set to: 0
  5303  003D8E  C026  FFD9         	movff	atol@s,fsr2l
  5304  003D92  C027  FFDA         	movff	atol@s+1,fsr2h
  5305  003D96  50DF               	movf	indf2,w,c
  5306  003D98  6F65               	movwf	atol@c& (0+255),b
  5307                           
  5308                           ; BSR set to: 0
  5309  003D9A  4A26               	infsnz	atol@s,f,c
  5310  003D9C  2A27               	incf	atol@s+1,f,c
  5311  003D9E                     l1754:
  5312                           
  5313                           ; BSR set to: 0
  5314                           
  5315                           ; BSR set to: 0
  5316  003D9E  5165               	movf	atol@c& (0+255),w,b
  5317  003DA0  EC03  F029         	call	_isdigit
  5318  003DA4  B0D8               	btfsc	status,0,c
  5319  003DA6  D7D0               	goto	l1755
  5320  003DA8  0100               	movlb	0	; () banked
  5321  003DAA  5160               	movf	atol@sign& (0+255),w,b
  5322  003DAC  B4D8               	btfsc	status,2,c
  5323  003DAE  D01A               	goto	l1757
  5324                           
  5325                           ; BSR set to: 0
  5326  003DB0  C061  F02A         	movff	atol@a,??_atol
  5327  003DB4  C062  F02B         	movff	atol@a+1,??_atol+1
  5328  003DB8  C063  F02C         	movff	atol@a+2,??_atol+2
  5329  003DBC  C064  F02D         	movff	atol@a+3,??_atol+3
  5330  003DC0  1E2A               	comf	??_atol,f,c
  5331  003DC2  1E2B               	comf	??_atol+1,f,c
  5332  003DC4  1E2C               	comf	??_atol+2,f,c
  5333  003DC6  1E2D               	comf	??_atol+3,f,c
  5334  003DC8  2A2A               	incf	??_atol,f,c
  5335  003DCA  0E00               	movlw	0
  5336  003DCC  222B               	addwfc	??_atol+1,f,c
  5337  003DCE  222C               	addwfc	??_atol+2,f,c
  5338  003DD0  222D               	addwfc	??_atol+3,f,c
  5339  003DD2  C02A  F026         	movff	??_atol,?_atol
  5340  003DD6  C02B  F027         	movff	??_atol+1,?_atol+1
  5341  003DDA  C02C  F028         	movff	??_atol+2,?_atol+2
  5342  003DDE  C02D  F029         	movff	??_atol+3,?_atol+3
  5343                           
  5344                           ; BSR set to: 0
  5345  003DE2  0012               	return	
  5346  003DE4                     l1757:
  5347                           
  5348                           ; BSR set to: 0
  5349  003DE4  C061  F026         	movff	atol@a,?_atol
  5350  003DE8  C062  F027         	movff	atol@a+1,?_atol+1
  5351  003DEC  C063  F028         	movff	atol@a+2,?_atol+2
  5352  003DF0  C064  F029         	movff	atol@a+3,?_atol+3
  5353                           
  5354                           ; BSR set to: 0
  5355  003DF4  0012               	return		;funcret
  5356  003DF6                     __end_of_atol:
  5357                           	opt stack 0
  5358                           tosu	equ	0xFFF
  5359                           tosh	equ	0xFFE
  5360                           tosl	equ	0xFFD
  5361                           pclath	equ	0xFFA
  5362                           tblptru	equ	0xFF8
  5363                           tblptrh	equ	0xFF7
  5364                           tblptrl	equ	0xFF6
  5365                           tablat	equ	0xFF5
  5366                           prodh	equ	0xFF4
  5367                           prodl	equ	0xFF3
  5368                           intcon	equ	0xFF2
  5369                           intcon2	equ	0xFF1
  5370                           intcon3	equ	0xFF0
  5371                           postinc0	equ	0xFEE
  5372                           wreg	equ	0xFE8
  5373                           indf1	equ	0xFE7
  5374                           postinc1	equ	0xFE6
  5375                           postdec1	equ	0xFE5
  5376                           fsr1h	equ	0xFE2
  5377                           fsr1l	equ	0xFE1
  5378                           indf2	equ	0xFDF
  5379                           postinc2	equ	0xFDE
  5380                           postdec2	equ	0xFDD
  5381                           fsr2h	equ	0xFDA
  5382                           fsr2l	equ	0xFD9
  5383                           status	equ	0xFD8
  5384                           
  5385 ;; *************** function _get_dt *****************
  5386 ;; Defined at:
  5387 ;;		line 253 in file "bibliotecas/GPS.c"
  5388 ;; Parameters:    Size  Location     Type
  5389 ;;  dt_pointer      1    wreg     unsigned char 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;  dt_pointer      1    0[BANK0 ] unsigned char 
  5392 ;;  _dt             4    0        unsigned long 
  5393 ;;  count           1    6[BANK0 ] unsigned char 
  5394 ;;  dt_index        1    5[BANK0 ] unsigned char 
  5395 ;;  ano             1    4[BANK0 ] unsigned char 
  5396 ;;  mes             1    3[BANK0 ] unsigned char 
  5397 ;;  dia             1    2[BANK0 ] unsigned char 
  5398 ;;  index           1    1[BANK0 ] unsigned char 
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  4   32[COMRAM] unsigned long 
  5401 ;; Registers used:
  5402 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5408 ;;      Params:         4       0       0       0       0       0       0       0       0
  5409 ;;      Locals:         0       7       0       0       0       0       0       0       0
  5410 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5411 ;;      Totals:         9       7       0       0       0       0       0       0       0
  5412 ;;Total ram usage:       16 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:    3
  5415 ;; This function calls:
  5416 ;;		_strcat
  5417 ;;		_strlen
  5418 ;; This function is called by:
  5419 ;;		_gps
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text23
  5424  003374                     __ptext23:
  5425                           	opt stack 0
  5426  003374                     _get_dt:
  5427                           	opt stack 25
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;incstack = 0
  5431                           ;get_dt@dt_pointer stored from wreg
  5432  003374  0100               	movlb	0	; () banked
  5433  003376  6F60               	movwf	get_dt@dt_pointer& (0+255),b
  5434                           
  5435                           ;GPS.c: 255: unsigned char dt_index = dt_pointer + 1;
  5436  003378  0100               	movlb	0	; () banked
  5437  00337A  2960               	incf	get_dt@dt_pointer& (0+255),w,b
  5438  00337C  6F65               	movwf	get_dt@dt_index& (0+255),b
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;GPS.c: 256: unsigned long int _dt;
  5442                           ;GPS.c: 257: unsigned char index;
  5443                           ;GPS.c: 258: unsigned char count;
  5444                           ;GPS.c: 259: unsigned char dia = "|";
  5445  00337E  0E7D               	movlw	low STR_6
  5446  003380  6F62               	movwf	get_dt@dia& (0+255),b
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;GPS.c: 260: unsigned char mes = "|";
  5450  003382  0E7D               	movlw	low STR_6
  5451  003384  6F63               	movwf	get_dt@mes& (0+255),b
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;GPS.c: 261: unsigned char ano = "|";
  5455  003386  0E7D               	movlw	low STR_6
  5456  003388  6F64               	movwf	get_dt@ano& (0+255),b
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;GPS.c: 262: index = 0;
  5460  00338A  0E00               	movlw	0
  5461  00338C  6F61               	movwf	get_dt@index& (0+255),b
  5462                           
  5463                           ;GPS.c: 265: for(;rmc_buffer[dt_index]!=',';dt_index++){
  5464  00338E  D014               	goto	l172
  5465  003390                     
  5466                           ; BSR set to: 0
  5467                           ;GPS.c: 266: dado_buffer[index]= rmc_buffer[dt_index];
  5468                           
  5469                           ; BSR set to: 0
  5470  003390  5165               	movf	get_dt@dt_index& (0+255),w,b
  5471  003392  0D01               	mullw	1
  5472  003394  0E00               	movlw	low _rmc_buffer
  5473  003396  24F3               	addwf	prodl,w,c
  5474  003398  6ED9               	movwf	fsr2l,c
  5475  00339A  0E02               	movlw	high _rmc_buffer
  5476  00339C  20F4               	addwfc	prodh,w,c
  5477  00339E  6EDA               	movwf	fsr2h,c
  5478  0033A0  5161               	movf	get_dt@index& (0+255),w,b
  5479  0033A2  0D01               	mullw	1
  5480  0033A4  0EF6               	movlw	low _dado_buffer
  5481  0033A6  24F3               	addwf	prodl,w,c
  5482  0033A8  6EE1               	movwf	fsr1l,c
  5483  0033AA  0E00               	movlw	high _dado_buffer
  5484  0033AC  20F4               	addwfc	prodh,w,c
  5485  0033AE  6EE2               	movwf	fsr1h,c
  5486  0033B0  CFDF FFE7          	movff	indf2,indf1
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;GPS.c: 267: index++;
  5490  0033B4  2B61               	incf	get_dt@index& (0+255),f,b
  5491                           
  5492                           ; BSR set to: 0
  5493  0033B6  2B65               	incf	get_dt@dt_index& (0+255),f,b
  5494  0033B8                     l172:
  5495                           
  5496                           ; BSR set to: 0
  5497                           
  5498                           ; BSR set to: 0
  5499  0033B8  5165               	movf	get_dt@dt_index& (0+255),w,b
  5500  0033BA  0D01               	mullw	1
  5501  0033BC  0E00               	movlw	low _rmc_buffer
  5502  0033BE  24F3               	addwf	prodl,w,c
  5503  0033C0  6ED9               	movwf	fsr2l,c
  5504  0033C2  0E02               	movlw	high _rmc_buffer
  5505  0033C4  20F4               	addwfc	prodh,w,c
  5506  0033C6  6EDA               	movwf	fsr2h,c
  5507  0033C8  0E2C               	movlw	44
  5508  0033CA  18DE               	xorwf	postinc2,w,c
  5509  0033CC  A4D8               	btfss	status,2,c
  5510  0033CE  D7E0               	goto	l173
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;GPS.c: 268: }
  5514                           ;GPS.c: 270: dado_buffer[strlen(dado_buffer) - 0] = '\0';
  5515                           
  5516                           ; BSR set to: 0
  5517  0033D0  0EF6               	movlw	low _dado_buffer
  5518  0033D2  6E1A               	movwf	strlen@s,c
  5519  0033D4  0E00               	movlw	high _dado_buffer
  5520  0033D6  6E1B               	movwf	strlen@s+1,c
  5521  0033D8  ECCE  F027         	call	_strlen	;wreg free
  5522  0033DC  0EF6               	movlw	low _dado_buffer
  5523  0033DE  241A               	addwf	?_strlen,w,c
  5524  0033E0  6ED9               	movwf	fsr2l,c
  5525  0033E2  0E00               	movlw	high _dado_buffer
  5526  0033E4  201B               	addwfc	?_strlen+1,w,c
  5527  0033E6  6EDA               	movwf	fsr2h,c
  5528  0033E8  0E00               	movlw	0
  5529  0033EA  6EDF               	movwf	indf2,c
  5530                           
  5531                           ;GPS.c: 272: for(count = 0;count<=7; count++)
  5532  0033EC  0E00               	movlw	0
  5533  0033EE  0100               	movlb	0	; () banked
  5534  0033F0  6F66               	movwf	get_dt@count& (0+255),b
  5535  0033F2                     l12642:
  5536                           
  5537                           ; BSR set to: 0
  5538  0033F2  0E07               	movlw	7
  5539  0033F4  6566               	cpfsgt	get_dt@count& (0+255),b
  5540  0033F6  D001               	goto	l175
  5541  0033F8  D061               	goto	u16180
  5542  0033FA                     l175:
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;GPS.c: 273: {
  5546                           ;GPS.c: 274: if(count < 2)
  5547                           
  5548                           ; BSR set to: 0
  5549  0033FA  0E02               	movlw	2
  5550  0033FC  6166               	cpfslt	get_dt@count& (0+255),b
  5551  0033FE  D01C               	goto	l177
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;GPS.c: 275: {
  5555                           ;GPS.c: 276: strcat(dia, dado_buffer[count]);
  5556  003400  5162               	movf	get_dt@dia& (0+255),w,b
  5557  003402  6E25               	movwf	??_get_dt& (0+255),c
  5558  003404  6A26               	clrf	(??_get_dt+1)& (0+255),c
  5559  003406  C025  F01A         	movff	??_get_dt,strcat@to
  5560  00340A  C026  F01B         	movff	??_get_dt+1,strcat@to+1
  5561  00340E  5166               	movf	get_dt@count& (0+255),w,b
  5562  003410  0D01               	mullw	1
  5563  003412  0EF6               	movlw	low _dado_buffer
  5564  003414  24F3               	addwf	prodl,w,c
  5565  003416  6ED9               	movwf	fsr2l,c
  5566  003418  0E00               	movlw	high _dado_buffer
  5567  00341A  20F4               	addwfc	prodh,w,c
  5568  00341C  6EDA               	movwf	fsr2h,c
  5569  00341E  50DF               	movf	indf2,w,c
  5570  003420  6E27               	movwf	(??_get_dt+2)& (0+255),c
  5571  003422  6A28               	clrf	(??_get_dt+3)& (0+255),c
  5572  003424  6A29               	clrf	(??_get_dt+4)& (0+255),c
  5573  003426  C027  F01C         	movff	??_get_dt+2,strcat@from
  5574  00342A  C028  F01D         	movff	??_get_dt+3,strcat@from+1
  5575  00342E  C029  F01E         	movff	??_get_dt+4,strcat@from+2
  5576  003432  ECD4  F026         	call	_strcat	;wreg free
  5577                           
  5578                           ;GPS.c: 277: }
  5579  003436  D03F               	goto	l180
  5580  003438                     l177:
  5581                           
  5582                           ;GPS.c: 278: else if(count>=2 && count<4)
  5583  003438  0E01               	movlw	1
  5584  00343A  0100               	movlb	0	; () banked
  5585  00343C  6566               	cpfsgt	get_dt@count& (0+255),b
  5586  00343E  D01F               	goto	l179
  5587                           
  5588                           ; BSR set to: 0
  5589  003440  0E04               	movlw	4
  5590  003442  6166               	cpfslt	get_dt@count& (0+255),b
  5591  003444  D01C               	goto	l179
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;GPS.c: 279: {
  5595                           ;GPS.c: 280: strcat(mes, dado_buffer[count]);
  5596  003446  5163               	movf	get_dt@mes& (0+255),w,b
  5597  003448  6E25               	movwf	??_get_dt& (0+255),c
  5598  00344A  6A26               	clrf	(??_get_dt+1)& (0+255),c
  5599  00344C  C025  F01A         	movff	??_get_dt,strcat@to
  5600  003450  C026  F01B         	movff	??_get_dt+1,strcat@to+1
  5601  003454  5166               	movf	get_dt@count& (0+255),w,b
  5602  003456  0D01               	mullw	1
  5603  003458  0EF6               	movlw	low _dado_buffer
  5604  00345A  24F3               	addwf	prodl,w,c
  5605  00345C  6ED9               	movwf	fsr2l,c
  5606  00345E  0E00               	movlw	high _dado_buffer
  5607  003460  20F4               	addwfc	prodh,w,c
  5608  003462  6EDA               	movwf	fsr2h,c
  5609  003464  50DF               	movf	indf2,w,c
  5610  003466  6E27               	movwf	(??_get_dt+2)& (0+255),c
  5611  003468  6A28               	clrf	(??_get_dt+3)& (0+255),c
  5612  00346A  6A29               	clrf	(??_get_dt+4)& (0+255),c
  5613  00346C  C027  F01C         	movff	??_get_dt+2,strcat@from
  5614  003470  C028  F01D         	movff	??_get_dt+3,strcat@from+1
  5615  003474  C029  F01E         	movff	??_get_dt+4,strcat@from+2
  5616  003478  ECD4  F026         	call	_strcat	;wreg free
  5617                           
  5618                           ;GPS.c: 281: }
  5619  00347C  D01C               	goto	l180
  5620  00347E                     l179:
  5621                           
  5622                           ;GPS.c: 282: else
  5623                           ;GPS.c: 283: {
  5624                           ;GPS.c: 284: strcat(ano, dado_buffer[count]);
  5625  00347E  0100               	movlb	0	; () banked
  5626  003480  5164               	movf	get_dt@ano& (0+255),w,b
  5627  003482  6E25               	movwf	??_get_dt& (0+255),c
  5628  003484  6A26               	clrf	(??_get_dt+1)& (0+255),c
  5629  003486  C025  F01A         	movff	??_get_dt,strcat@to
  5630  00348A  C026  F01B         	movff	??_get_dt+1,strcat@to+1
  5631  00348E  5166               	movf	get_dt@count& (0+255),w,b
  5632  003490  0D01               	mullw	1
  5633  003492  0EF6               	movlw	low _dado_buffer
  5634  003494  24F3               	addwf	prodl,w,c
  5635  003496  6ED9               	movwf	fsr2l,c
  5636  003498  0E00               	movlw	high _dado_buffer
  5637  00349A  20F4               	addwfc	prodh,w,c
  5638  00349C  6EDA               	movwf	fsr2h,c
  5639  00349E  50DF               	movf	indf2,w,c
  5640  0034A0  6E27               	movwf	(??_get_dt+2)& (0+255),c
  5641  0034A2  6A28               	clrf	(??_get_dt+3)& (0+255),c
  5642  0034A4  6A29               	clrf	(??_get_dt+4)& (0+255),c
  5643  0034A6  C027  F01C         	movff	??_get_dt+2,strcat@from
  5644  0034AA  C028  F01D         	movff	??_get_dt+3,strcat@from+1
  5645  0034AE  C029  F01E         	movff	??_get_dt+4,strcat@from+2
  5646  0034B2  ECD4  F026         	call	_strcat	;wreg free
  5647  0034B6                     l180:
  5648  0034B6  0100               	movlb	0	; () banked
  5649  0034B8  2B66               	incf	get_dt@count& (0+255),f,b
  5650  0034BA  D79B               	goto	l12642
  5651  0034BC                     u16180:
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;GPS.c: 285: }
  5655                           ;GPS.c: 286: }
  5656                           ;GPS.c: 290: f_time.dia = dia;
  5657  0034BC  C062  F18A         	movff	get_dt@dia,_f_time+6
  5658                           
  5659                           ;GPS.c: 291: f_time.mes = mes;
  5660  0034C0  C063  F18B         	movff	get_dt@mes,_f_time+7
  5661                           
  5662                           ;GPS.c: 292: f_time.ano = ano;
  5663  0034C4  C064  F18C         	movff	get_dt@ano,_f_time+8
  5664                           
  5665                           ; BSR set to: 0
  5666  0034C8  0012               	return		;funcret
  5667  0034CA                     __end_of_get_dt:
  5668                           	opt stack 0
  5669                           tosu	equ	0xFFF
  5670                           tosh	equ	0xFFE
  5671                           tosl	equ	0xFFD
  5672                           pclath	equ	0xFFA
  5673                           tblptru	equ	0xFF8
  5674                           tblptrh	equ	0xFF7
  5675                           tblptrl	equ	0xFF6
  5676                           tablat	equ	0xFF5
  5677                           prodh	equ	0xFF4
  5678                           prodl	equ	0xFF3
  5679                           intcon	equ	0xFF2
  5680                           intcon2	equ	0xFF1
  5681                           intcon3	equ	0xFF0
  5682                           postinc0	equ	0xFEE
  5683                           wreg	equ	0xFE8
  5684                           indf1	equ	0xFE7
  5685                           postinc1	equ	0xFE6
  5686                           postdec1	equ	0xFE5
  5687                           fsr1h	equ	0xFE2
  5688                           fsr1l	equ	0xFE1
  5689                           indf2	equ	0xFDF
  5690                           postinc2	equ	0xFDE
  5691                           postdec2	equ	0xFDD
  5692                           fsr2h	equ	0xFDA
  5693                           fsr2l	equ	0xFD9
  5694                           status	equ	0xFD8
  5695                           
  5696 ;; *************** function _strlen *****************
  5697 ;; Defined at:
  5698 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;  s               2   25[COMRAM] PTR const unsigned char 
  5701 ;;		 -> dado_buffer(7), 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;  cp              2   29[COMRAM] PTR const unsigned char 
  5704 ;;		 -> dado_buffer(7), 
  5705 ;; Return value:  Size  Location     Type
  5706 ;;                  2   25[COMRAM] unsigned int 
  5707 ;; Registers used:
  5708 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/0
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5714 ;;      Params:         2       0       0       0       0       0       0       0       0
  5715 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5716 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5717 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5718 ;;Total ram usage:        6 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; Hardware stack levels required when called:    2
  5721 ;; This function calls:
  5722 ;;		Nothing
  5723 ;; This function is called by:
  5724 ;;		_get_dt
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           	psect	text24
  5729  004F9C                     __ptext24:
  5730                           	opt stack 0
  5731  004F9C                     _strlen:
  5732                           	opt stack 25
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;incstack = 0
  5736  004F9C  C01A  F01E         	movff	strlen@s,strlen@cp
  5737  004FA0  C01B  F01F         	movff	strlen@s+1,strlen@cp+1
  5738  004FA4  D002               	goto	l2224
  5739  004FA6  4A1E               	infsnz	strlen@cp,f,c
  5740  004FA8  2A1F               	incf	strlen@cp+1,f,c
  5741  004FAA                     l2224:
  5742  004FAA  C01E  FFD9         	movff	strlen@cp,fsr2l
  5743  004FAE  C01F  FFDA         	movff	strlen@cp+1,fsr2h
  5744  004FB2  50DF               	movf	indf2,w,c
  5745  004FB4  A4D8               	btfss	status,2,c
  5746  004FB6  D7F7               	goto	l2225
  5747  004FB8  C01A  F01C         	movff	strlen@s,??_strlen
  5748  004FBC  C01B  F01D         	movff	strlen@s+1,??_strlen+1
  5749  004FC0  1E1C               	comf	??_strlen,f,c
  5750  004FC2  1E1D               	comf	??_strlen+1,f,c
  5751  004FC4  4A1C               	infsnz	??_strlen,f,c
  5752  004FC6  2A1D               	incf	??_strlen+1,f,c
  5753  004FC8  501E               	movf	strlen@cp,w,c
  5754  004FCA  241C               	addwf	??_strlen,w,c
  5755  004FCC  6E1A               	movwf	?_strlen,c
  5756  004FCE  501F               	movf	strlen@cp+1,w,c
  5757  004FD0  201D               	addwfc	??_strlen+1,w,c
  5758  004FD2  6E1B               	movwf	?_strlen+1,c
  5759  004FD4  0012               	return	
  5760  004FD6                     __end_of_strlen:
  5761                           	opt stack 0
  5762                           tosu	equ	0xFFF
  5763                           tosh	equ	0xFFE
  5764                           tosl	equ	0xFFD
  5765                           pclath	equ	0xFFA
  5766                           tblptru	equ	0xFF8
  5767                           tblptrh	equ	0xFF7
  5768                           tblptrl	equ	0xFF6
  5769                           tablat	equ	0xFF5
  5770                           prodh	equ	0xFF4
  5771                           prodl	equ	0xFF3
  5772                           intcon	equ	0xFF2
  5773                           intcon2	equ	0xFF1
  5774                           intcon3	equ	0xFF0
  5775                           postinc0	equ	0xFEE
  5776                           wreg	equ	0xFE8
  5777                           indf1	equ	0xFE7
  5778                           postinc1	equ	0xFE6
  5779                           postdec1	equ	0xFE5
  5780                           fsr1h	equ	0xFE2
  5781                           fsr1l	equ	0xFE1
  5782                           indf2	equ	0xFDF
  5783                           postinc2	equ	0xFDE
  5784                           postdec2	equ	0xFDD
  5785                           fsr2h	equ	0xFDA
  5786                           fsr2l	equ	0xFD9
  5787                           status	equ	0xFD8
  5788                           
  5789 ;; *************** function _strcat *****************
  5790 ;; Defined at:
  5791 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  to              2   25[COMRAM] PTR unsigned char 
  5794 ;;		 -> RAM(2047), 
  5795 ;;  from            3   27[COMRAM] PTR const unsigned char 
  5796 ;;		 -> ROM(32767), 
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  cp              2   30[COMRAM] PTR unsigned char 
  5799 ;;		 -> RAM(2047), 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  2   25[COMRAM] PTR unsigned char 
  5802 ;; Registers used:
  5803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5809 ;;      Params:         5       0       0       0       0       0       0       0       0
  5810 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5812 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5813 ;;Total ram usage:        7 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    2
  5816 ;; This function calls:
  5817 ;;		Nothing
  5818 ;; This function is called by:
  5819 ;;		_get_dt
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text25
  5824  004DA8                     __ptext25:
  5825                           	opt stack 0
  5826  004DA8                     _strcat:
  5827                           	opt stack 25
  5828                           
  5829                           ;incstack = 0
  5830  004DA8  C01A  F01F         	movff	strcat@to,strcat@cp
  5831  004DAC  C01B  F020         	movff	strcat@to+1,strcat@cp+1
  5832  004DB0  D002               	goto	l2215
  5833  004DB2  4A1F               	infsnz	strcat@cp,f,c
  5834  004DB4  2A20               	incf	strcat@cp+1,f,c
  5835  004DB6                     l2215:
  5836  004DB6  C01F  FFD9         	movff	strcat@cp,fsr2l
  5837  004DBA  C020  FFDA         	movff	strcat@cp+1,fsr2h
  5838  004DBE  50DF               	movf	indf2,w,c
  5839  004DC0  B4D8               	btfsc	status,2,c
  5840  004DC2  D009               	goto	l2218
  5841  004DC4  D7F6               	goto	l2216
  5842  004DC6  4A1F               	infsnz	strcat@cp,f,c
  5843  004DC8  2A20               	incf	strcat@cp+1,f,c
  5844  004DCA  0E01               	movlw	1
  5845  004DCC  261C               	addwf	strcat@from,f,c
  5846  004DCE  0E00               	movlw	0
  5847  004DD0  221D               	addwfc	strcat@from+1,f,c
  5848  004DD2  0E00               	movlw	0
  5849  004DD4  221E               	addwfc	strcat@from+2,f,c
  5850  004DD6                     l2218:
  5851  004DD6  C01C  FFF6         	movff	strcat@from,tblptrl
  5852  004DDA  C01D  FFF7         	movff	strcat@from+1,tblptrh
  5853  004DDE  C01E  FFF8         	movff	strcat@from+2,tblptru
  5854  004DE2  C01F  FFD9         	movff	strcat@cp,fsr2l
  5855  004DE6  C020  FFDA         	movff	strcat@cp+1,fsr2h
  5856  004DEA  0008               	tblrd		*
  5857  004DEC  CFF5 FFDF          	movff	tablat,indf2
  5858  004DF0  50DF               	movf	indf2,w,c
  5859  004DF2  B4D8               	btfsc	status,2,c
  5860  004DF4  0012               	return	
  5861  004DF6  D7E7               	goto	l2219
  5862  004DF8                     __end_of_strcat:
  5863                           	opt stack 0
  5864                           tosu	equ	0xFFF
  5865                           tosh	equ	0xFFE
  5866                           tosl	equ	0xFFD
  5867                           pclath	equ	0xFFA
  5868                           tblptru	equ	0xFF8
  5869                           tblptrh	equ	0xFF7
  5870                           tblptrl	equ	0xFF6
  5871                           tablat	equ	0xFF5
  5872                           prodh	equ	0xFF4
  5873                           prodl	equ	0xFF3
  5874                           intcon	equ	0xFF2
  5875                           intcon2	equ	0xFF1
  5876                           intcon3	equ	0xFF0
  5877                           postinc0	equ	0xFEE
  5878                           wreg	equ	0xFE8
  5879                           indf1	equ	0xFE7
  5880                           postinc1	equ	0xFE6
  5881                           postdec1	equ	0xFE5
  5882                           fsr1h	equ	0xFE2
  5883                           fsr1l	equ	0xFE1
  5884                           indf2	equ	0xFDF
  5885                           postinc2	equ	0xFDE
  5886                           postdec2	equ	0xFDD
  5887                           fsr2h	equ	0xFDA
  5888                           fsr2l	equ	0xFD9
  5889                           status	equ	0xFD8
  5890                           
  5891 ;; *************** function _convert_to_degrees *****************
  5892 ;; Defined at:
  5893 ;;		line 346 in file "bibliotecas/GPS.c"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;  nmea_lat_lon    3   37[BANK0 ] float 
  5896 ;; Auto vars:     Size  Location     Type
  5897 ;;  decimal         3   48[BANK0 ] float 
  5898 ;;  dec_deg         3   43[BANK0 ] float 
  5899 ;;  minutes         3   40[BANK0 ] float 
  5900 ;;  position        3    0        float 
  5901 ;;  degrees         2   46[BANK0 ] int 
  5902 ;; Return value:  Size  Location     Type
  5903 ;;                  3   37[BANK0 ] float 
  5904 ;; Registers used:
  5905 ;;		wreg, status,2, status,0, cstack
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5911 ;;      Params:         0       3       0       0       0       0       0       0       0
  5912 ;;      Locals:         0      11       0       0       0       0       0       0       0
  5913 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5914 ;;      Totals:         0      14       0       0       0       0       0       0       0
  5915 ;;Total ram usage:       14 bytes
  5916 ;; Hardware stack levels used:    1
  5917 ;; Hardware stack levels required when called:    4
  5918 ;; This function calls:
  5919 ;;		___awtoft
  5920 ;;		___ftadd
  5921 ;;		___ftdiv
  5922 ;;		___ftmul
  5923 ;;		___ftneg
  5924 ;;		___fttol
  5925 ;; This function is called by:
  5926 ;;		_gps
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text26
  5931  003616                     __ptext26:
  5932                           	opt stack 0
  5933  003616                     _convert_to_degrees:
  5934                           	opt stack 24
  5935                           
  5936                           ;GPS.c: 347: float minutes, dec_deg, decimal;
  5937                           ;GPS.c: 348: int degrees;
  5938                           ;GPS.c: 349: float position;
  5939                           ;GPS.c: 350: degrees = (int)(nmea_lat_long/100.00);
  5940                           
  5941                           ;incstack = 0
  5942  003616  0E00               	movlw	0
  5943  003618  6E25               	movwf	___ftdiv@f2,c
  5944  00361A  0EC8               	movlw	200
  5945  00361C  6E26               	movwf	___ftdiv@f2+1,c
  5946  00361E  0E42               	movlw	66
  5947  003620  6E27               	movwf	___ftdiv@f2+2,c
  5948  003622  C085  F022         	movff	convert_to_degrees@nmea_lat_long,___ftdiv@f1
  5949  003626  C086  F023         	movff	convert_to_degrees@nmea_lat_long+1,___ftdiv@f1+1
  5950  00362A  C087  F024         	movff	convert_to_degrees@nmea_lat_long+2,___ftdiv@f1+2
  5951  00362E  ECF2  F01F         	call	___ftdiv	;wreg free
  5952  003632  C022  F076         	movff	?___ftdiv,___fttol@f1
  5953  003636  C023  F077         	movff	?___ftdiv+1,___fttol@f1+1
  5954  00363A  C024  F078         	movff	?___ftdiv+2,___fttol@f1+2
  5955  00363E  ECFB  F01E         	call	___fttol	;wreg free
  5956  003642  C076  F08E         	movff	?___fttol,convert_to_degrees@degrees
  5957  003646  C077  F08F         	movff	?___fttol+1,convert_to_degrees@degrees+1
  5958                           
  5959                           ;GPS.c: 351: minutes = nmea_lat_long - degrees*100.00;
  5960  00364A  0E00               	movlw	0
  5961  00364C  0100               	movlb	0	; () banked
  5962  00364E  6F63               	movwf	___ftmul@f2& (0+255),b
  5963  003650  0EC8               	movlw	200
  5964  003652  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  5965  003654  0E42               	movlw	66
  5966  003656  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  5967  003658  C08E  F022         	movff	convert_to_degrees@degrees,___awtoft@c
  5968  00365C  C08F  F023         	movff	convert_to_degrees@degrees+1,___awtoft@c+1
  5969  003660  EC24  F028         	call	___awtoft	;wreg free
  5970  003664  C022  F060         	movff	?___awtoft,___ftmul@f1
  5971  003668  C023  F061         	movff	?___awtoft+1,___ftmul@f1+1
  5972  00366C  C024  F062         	movff	?___awtoft+2,___ftmul@f1+2
  5973  003670  EC77  F01F         	call	___ftmul	;wreg free
  5974  003674  C060  F06F         	movff	?___ftmul,___ftneg@f1
  5975  003678  C061  F070         	movff	?___ftmul+1,___ftneg@f1+1
  5976  00367C  C062  F071         	movff	?___ftmul+2,___ftneg@f1+2
  5977  003680  ECBA  F028         	call	___ftneg	;wreg free
  5978  003684  C06F  F079         	movff	?___ftneg,___ftadd@f1
  5979  003688  C070  F07A         	movff	?___ftneg+1,___ftadd@f1+1
  5980  00368C  C071  F07B         	movff	?___ftneg+2,___ftadd@f1+2
  5981  003690  C085  F07C         	movff	convert_to_degrees@nmea_lat_long,___ftadd@f2
  5982  003694  C086  F07D         	movff	convert_to_degrees@nmea_lat_long+1,___ftadd@f2+1
  5983  003698  C087  F07E         	movff	convert_to_degrees@nmea_lat_long+2,___ftadd@f2+2
  5984  00369C  EC35  F018         	call	___ftadd	;wreg free
  5985  0036A0  C079  F088         	movff	?___ftadd,convert_to_degrees@minutes
  5986  0036A4  C07A  F089         	movff	?___ftadd+1,convert_to_degrees@minutes+1
  5987  0036A8  C07B  F08A         	movff	?___ftadd+2,convert_to_degrees@minutes+2
  5988                           
  5989                           ;GPS.c: 352: dec_deg = minutes / 60.00;
  5990  0036AC  C088  F022         	movff	convert_to_degrees@minutes,___ftdiv@f1
  5991  0036B0  C089  F023         	movff	convert_to_degrees@minutes+1,___ftdiv@f1+1
  5992  0036B4  C08A  F024         	movff	convert_to_degrees@minutes+2,___ftdiv@f1+2
  5993  0036B8  0E00               	movlw	0
  5994  0036BA  6E25               	movwf	___ftdiv@f2,c
  5995  0036BC  0E70               	movlw	112
  5996  0036BE  6E26               	movwf	___ftdiv@f2+1,c
  5997  0036C0  0E42               	movlw	66
  5998  0036C2  6E27               	movwf	___ftdiv@f2+2,c
  5999  0036C4  ECF2  F01F         	call	___ftdiv	;wreg free
  6000  0036C8  C022  F08B         	movff	?___ftdiv,convert_to_degrees@dec_deg
  6001  0036CC  C023  F08C         	movff	?___ftdiv+1,convert_to_degrees@dec_deg+1
  6002  0036D0  C024  F08D         	movff	?___ftdiv+2,convert_to_degrees@dec_deg+2
  6003                           
  6004                           ;GPS.c: 353: decimal = degrees + dec_deg;
  6005  0036D4  C08E  F022         	movff	convert_to_degrees@degrees,___awtoft@c
  6006  0036D8  C08F  F023         	movff	convert_to_degrees@degrees+1,___awtoft@c+1
  6007  0036DC  EC24  F028         	call	___awtoft	;wreg free
  6008  0036E0  C022  F079         	movff	?___awtoft,___ftadd@f1
  6009  0036E4  C023  F07A         	movff	?___awtoft+1,___ftadd@f1+1
  6010  0036E8  C024  F07B         	movff	?___awtoft+2,___ftadd@f1+2
  6011  0036EC  C08B  F07C         	movff	convert_to_degrees@dec_deg,___ftadd@f2
  6012  0036F0  C08C  F07D         	movff	convert_to_degrees@dec_deg+1,___ftadd@f2+1
  6013  0036F4  C08D  F07E         	movff	convert_to_degrees@dec_deg+2,___ftadd@f2+2
  6014  0036F8  EC35  F018         	call	___ftadd	;wreg free
  6015  0036FC  C079  F090         	movff	?___ftadd,convert_to_degrees@decimal
  6016  003700  C07A  F091         	movff	?___ftadd+1,convert_to_degrees@decimal+1
  6017  003704  C07B  F092         	movff	?___ftadd+2,convert_to_degrees@decimal+2
  6018                           
  6019                           ;GPS.c: 354: if (n_s == 'S' || E_W == 'W') {
  6020  003708  0E53               	movlw	83
  6021  00370A  0100               	movlb	0	; () banked
  6022  00370C  19F5               	xorwf	_n_s& (0+255),w,b
  6023  00370E  B4D8               	btfsc	status,2,c
  6024  003710  D004               	goto	u16320
  6025                           
  6026                           ; BSR set to: 0
  6027  003712  0E57               	movlw	87
  6028  003714  19F4               	xorwf	_E_W& (0+255),w,b
  6029  003716  A4D8               	btfss	status,2,c
  6030  003718  D014               	goto	l190
  6031  00371A                     u16320:
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;GPS.c: 355: decimal *= -1;
  6035                           
  6036                           ; BSR set to: 0
  6037  00371A  C090  F060         	movff	convert_to_degrees@decimal,___ftmul@f1
  6038  00371E  C091  F061         	movff	convert_to_degrees@decimal+1,___ftmul@f1+1
  6039  003722  C092  F062         	movff	convert_to_degrees@decimal+2,___ftmul@f1+2
  6040  003726  0E00               	movlw	0
  6041  003728  6F63               	movwf	___ftmul@f2& (0+255),b
  6042  00372A  0E80               	movlw	128
  6043  00372C  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6044  00372E  0EBF               	movlw	191
  6045  003730  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6046  003732  EC77  F01F         	call	___ftmul	;wreg free
  6047  003736  C060  F090         	movff	?___ftmul,convert_to_degrees@decimal
  6048  00373A  C061  F091         	movff	?___ftmul+1,convert_to_degrees@decimal+1
  6049  00373E  C062  F092         	movff	?___ftmul+2,convert_to_degrees@decimal+2
  6050  003742                     l190:
  6051                           
  6052                           ;GPS.c: 356: }
  6053                           ;GPS.c: 358: return decimal;
  6054  003742  C090  F085         	movff	convert_to_degrees@decimal,?_convert_to_degrees
  6055  003746  C091  F086         	movff	convert_to_degrees@decimal+1,?_convert_to_degrees+1
  6056  00374A  C092  F087         	movff	convert_to_degrees@decimal+2,?_convert_to_degrees+2
  6057  00374E  0012               	return	
  6058  003750                     __end_of_convert_to_degrees:
  6059                           	opt stack 0
  6060                           tosu	equ	0xFFF
  6061                           tosh	equ	0xFFE
  6062                           tosl	equ	0xFFD
  6063                           pclath	equ	0xFFA
  6064                           tblptru	equ	0xFF8
  6065                           tblptrh	equ	0xFF7
  6066                           tblptrl	equ	0xFF6
  6067                           tablat	equ	0xFF5
  6068                           prodh	equ	0xFF4
  6069                           prodl	equ	0xFF3
  6070                           intcon	equ	0xFF2
  6071                           intcon2	equ	0xFF1
  6072                           intcon3	equ	0xFF0
  6073                           postinc0	equ	0xFEE
  6074                           wreg	equ	0xFE8
  6075                           indf1	equ	0xFE7
  6076                           postinc1	equ	0xFE6
  6077                           postdec1	equ	0xFE5
  6078                           fsr1h	equ	0xFE2
  6079                           fsr1l	equ	0xFE1
  6080                           indf2	equ	0xFDF
  6081                           postinc2	equ	0xFDE
  6082                           postdec2	equ	0xFDD
  6083                           fsr2h	equ	0xFDA
  6084                           fsr2l	equ	0xFD9
  6085                           status	equ	0xFD8
  6086                           
  6087 ;; *************** function ___ftdiv *****************
  6088 ;; Defined at:
  6089 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;  f1              3   33[COMRAM] float 
  6092 ;;  f2              3   36[COMRAM] float 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  f3              3    1[BANK0 ] float 
  6095 ;;  sign            1    5[BANK0 ] unsigned char 
  6096 ;;  exp             1    4[BANK0 ] unsigned char 
  6097 ;;  cntr            1    0[BANK0 ] unsigned char 
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  3   33[COMRAM] float 
  6100 ;; Registers used:
  6101 ;;		wreg, status,2, status,0, cstack
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6107 ;;      Params:         6       0       0       0       0       0       0       0       0
  6108 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6109 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6110 ;;      Totals:         9       6       0       0       0       0       0       0       0
  6111 ;;Total ram usage:       15 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:    3
  6114 ;; This function calls:
  6115 ;;		___ftpack
  6116 ;; This function is called by:
  6117 ;;		_convert_to_degrees
  6118 ;;		_strtod
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text27
  6123  003FE4                     __ptext27:
  6124                           	opt stack 0
  6125  003FE4                     ___ftdiv:
  6126                           	opt stack 22
  6127                           
  6128                           ;incstack = 0
  6129  003FE4  C024  F028         	movff	___ftdiv@f1+2,??___ftdiv
  6130  003FE8  6A29               	clrf	(??___ftdiv+1)& (0+255),c
  6131  003FEA  6A2A               	clrf	(??___ftdiv+2)& (0+255),c
  6132  003FEC  3423               	rlcf	___ftdiv@f1+1,w,c
  6133  003FEE  3628               	rlcf	??___ftdiv& (0+255),f,c
  6134  003FF0  E301               	bnc	u14271
  6135  003FF2  8029               	bsf	(??___ftdiv+1)& (0+255),0,c
  6136  003FF4                     u14271:
  6137  003FF4  5028               	movf	??___ftdiv,w,c
  6138  003FF6  0100               	movlb	0	; () banked
  6139  003FF8  6F64               	movwf	___ftdiv@exp& (0+255),b
  6140  003FFA  5164               	movf	___ftdiv@exp& (0+255),w,b
  6141  003FFC  A4D8               	btfss	status,2,c
  6142  003FFE  D007               	goto	l1895
  6143                           
  6144                           ; BSR set to: 0
  6145  004000  0E00               	movlw	0
  6146  004002  6E22               	movwf	?___ftdiv,c
  6147  004004  0E00               	movlw	0
  6148  004006  6E23               	movwf	?___ftdiv+1,c
  6149  004008  0E00               	movlw	0
  6150  00400A  6E24               	movwf	?___ftdiv+2,c
  6151                           
  6152                           ; BSR set to: 0
  6153  00400C  0012               	return	
  6154  00400E                     l1895:
  6155                           
  6156                           ; BSR set to: 0
  6157                           
  6158                           ; BSR set to: 0
  6159  00400E  C027  F028         	movff	___ftdiv@f2+2,??___ftdiv
  6160  004012  6A29               	clrf	(??___ftdiv+1)& (0+255),c
  6161  004014  6A2A               	clrf	(??___ftdiv+2)& (0+255),c
  6162  004016  3426               	rlcf	___ftdiv@f2+1,w,c
  6163  004018  3628               	rlcf	??___ftdiv& (0+255),f,c
  6164  00401A  E301               	bnc	u14291
  6165  00401C  8029               	bsf	(??___ftdiv+1)& (0+255),0,c
  6166  00401E                     u14291:
  6167  00401E  5028               	movf	??___ftdiv,w,c
  6168  004020  6F65               	movwf	___ftdiv@sign& (0+255),b
  6169  004022  5165               	movf	___ftdiv@sign& (0+255),w,b
  6170  004024  A4D8               	btfss	status,2,c
  6171  004026  D007               	goto	l1897
  6172                           
  6173                           ; BSR set to: 0
  6174  004028  0E00               	movlw	0
  6175  00402A  6E22               	movwf	?___ftdiv,c
  6176  00402C  0E00               	movlw	0
  6177  00402E  6E23               	movwf	?___ftdiv+1,c
  6178  004030  0E00               	movlw	0
  6179  004032  6E24               	movwf	?___ftdiv+2,c
  6180                           
  6181                           ; BSR set to: 0
  6182  004034  0012               	return	
  6183  004036                     l1897:
  6184                           
  6185                           ; BSR set to: 0
  6186                           
  6187                           ; BSR set to: 0
  6188  004036  0E00               	movlw	0
  6189  004038  6F61               	movwf	___ftdiv@f3& (0+255),b
  6190  00403A  0E00               	movlw	0
  6191  00403C  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
  6192  00403E  0E00               	movlw	0
  6193  004040  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
  6194                           
  6195                           ; BSR set to: 0
  6196  004042  5165               	movf	___ftdiv@sign& (0+255),w,b
  6197  004044  0F89               	addlw	137
  6198  004046  5F64               	subwf	___ftdiv@exp& (0+255),f,b
  6199                           
  6200                           ; BSR set to: 0
  6201  004048  C024  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
  6202                           
  6203                           ; BSR set to: 0
  6204  00404C  5027               	movf	___ftdiv@f2+2,w,c
  6205  00404E  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
  6206                           
  6207                           ; BSR set to: 0
  6208  004050  0E80               	movlw	128
  6209  004052  1765               	andwf	___ftdiv@sign& (0+255),f,b
  6210                           
  6211                           ; BSR set to: 0
  6212  004054  8E23               	bsf	___ftdiv@f1+1,7,c
  6213                           
  6214                           ; BSR set to: 0
  6215  004056  0EFF               	movlw	255
  6216  004058  1622               	andwf	___ftdiv@f1,f,c
  6217  00405A  0EFF               	movlw	255
  6218  00405C  1623               	andwf	___ftdiv@f1+1,f,c
  6219  00405E  0E00               	movlw	0
  6220  004060  1624               	andwf	___ftdiv@f1+2,f,c
  6221                           
  6222                           ; BSR set to: 0
  6223  004062  8E26               	bsf	___ftdiv@f2+1,7,c
  6224                           
  6225                           ; BSR set to: 0
  6226  004064  0EFF               	movlw	255
  6227  004066  1625               	andwf	___ftdiv@f2,f,c
  6228  004068  0EFF               	movlw	255
  6229  00406A  1626               	andwf	___ftdiv@f2+1,f,c
  6230  00406C  0E00               	movlw	0
  6231  00406E  1627               	andwf	___ftdiv@f2+2,f,c
  6232                           
  6233                           ; BSR set to: 0
  6234  004070  0E18               	movlw	24
  6235  004072  6F60               	movwf	___ftdiv@cntr& (0+255),b
  6236  004074                     
  6237                           ; BSR set to: 0
  6238                           
  6239                           ; BSR set to: 0
  6240  004074  90D8               	bcf	status,0,c
  6241  004076  3761               	rlcf	___ftdiv@f3& (0+255),f,b
  6242  004078  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  6243  00407A  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  6244                           
  6245                           ; BSR set to: 0
  6246  00407C  5025               	movf	___ftdiv@f2,w,c
  6247  00407E  5C22               	subwf	___ftdiv@f1,w,c
  6248  004080  5026               	movf	___ftdiv@f2+1,w,c
  6249  004082  5823               	subwfb	___ftdiv@f1+1,w,c
  6250  004084  5027               	movf	___ftdiv@f2+2,w,c
  6251  004086  5824               	subwfb	___ftdiv@f1+2,w,c
  6252  004088  A0D8               	btfss	status,0,c
  6253  00408A  D007               	goto	l1899
  6254                           
  6255                           ; BSR set to: 0
  6256  00408C  5025               	movf	___ftdiv@f2,w,c
  6257  00408E  5E22               	subwf	___ftdiv@f1,f,c
  6258  004090  5026               	movf	___ftdiv@f2+1,w,c
  6259  004092  5A23               	subwfb	___ftdiv@f1+1,f,c
  6260  004094  5027               	movf	___ftdiv@f2+2,w,c
  6261  004096  5A24               	subwfb	___ftdiv@f1+2,f,c
  6262                           
  6263                           ; BSR set to: 0
  6264  004098  8161               	bsf	___ftdiv@f3& (0+255),0,b
  6265  00409A                     l1899:
  6266                           
  6267                           ; BSR set to: 0
  6268  00409A  90D8               	bcf	status,0,c
  6269  00409C  3622               	rlcf	___ftdiv@f1,f,c
  6270  00409E  3623               	rlcf	___ftdiv@f1+1,f,c
  6271  0040A0  3624               	rlcf	___ftdiv@f1+2,f,c
  6272                           
  6273                           ; BSR set to: 0
  6274  0040A2  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
  6275  0040A4  D7E7               	goto	l1898
  6276                           
  6277                           ; BSR set to: 0
  6278                           
  6279                           ; BSR set to: 0
  6280  0040A6  C061  F01A         	movff	___ftdiv@f3,___ftpack@arg
  6281  0040AA  C062  F01B         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6282  0040AE  C063  F01C         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6283  0040B2  C064  F01D         	movff	___ftdiv@exp,___ftpack@exp
  6284  0040B6  C065  F01E         	movff	___ftdiv@sign,___ftpack@sign
  6285  0040BA  ECC5  F020         	call	___ftpack	;wreg free
  6286  0040BE  C01A  F022         	movff	?___ftpack,?___ftdiv
  6287  0040C2  C01B  F023         	movff	?___ftpack+1,?___ftdiv+1
  6288  0040C6  C01C  F024         	movff	?___ftpack+2,?___ftdiv+2
  6289  0040CA  0012               	return	
  6290  0040CC                     __end_of___ftdiv:
  6291                           	opt stack 0
  6292                           tosu	equ	0xFFF
  6293                           tosh	equ	0xFFE
  6294                           tosl	equ	0xFFD
  6295                           pclath	equ	0xFFA
  6296                           tblptru	equ	0xFF8
  6297                           tblptrh	equ	0xFF7
  6298                           tblptrl	equ	0xFF6
  6299                           tablat	equ	0xFF5
  6300                           prodh	equ	0xFF4
  6301                           prodl	equ	0xFF3
  6302                           intcon	equ	0xFF2
  6303                           intcon2	equ	0xFF1
  6304                           intcon3	equ	0xFF0
  6305                           postinc0	equ	0xFEE
  6306                           wreg	equ	0xFE8
  6307                           indf1	equ	0xFE7
  6308                           postinc1	equ	0xFE6
  6309                           postdec1	equ	0xFE5
  6310                           fsr1h	equ	0xFE2
  6311                           fsr1l	equ	0xFE1
  6312                           indf2	equ	0xFDF
  6313                           postinc2	equ	0xFDE
  6314                           postdec2	equ	0xFDD
  6315                           fsr2h	equ	0xFDA
  6316                           fsr2l	equ	0xFD9
  6317                           status	equ	0xFD8
  6318                           
  6319 ;; *************** function ___awtoft *****************
  6320 ;; Defined at:
  6321 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  6322 ;; Parameters:    Size  Location     Type
  6323 ;;  c               2   33[COMRAM] int 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;  sign            1   36[COMRAM] unsigned char 
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  3   33[COMRAM] float 
  6328 ;; Registers used:
  6329 ;;		wreg, status,2, status,0, cstack
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6335 ;;      Params:         3       0       0       0       0       0       0       0       0
  6336 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6337 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6338 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6339 ;;Total ram usage:        4 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:    3
  6342 ;; This function calls:
  6343 ;;		___ftpack
  6344 ;; This function is called by:
  6345 ;;		_convert_to_degrees
  6346 ;;		_escreve_float_lcd
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           	psect	text28
  6351  005048                     __ptext28:
  6352                           	opt stack 0
  6353  005048                     ___awtoft:
  6354                           	opt stack 24
  6355                           
  6356                           ;incstack = 0
  6357  005048  0E00               	movlw	0
  6358  00504A  6E25               	movwf	___awtoft@sign,c
  6359  00504C  AE23               	btfss	___awtoft@c+1,7,c
  6360  00504E  D006               	goto	l1795
  6361  005050  6C22               	negf	___awtoft@c,c
  6362  005052  1E23               	comf	___awtoft@c+1,f,c
  6363  005054  B0D8               	btfsc	status,0,c
  6364  005056  2A23               	incf	___awtoft@c+1,f,c
  6365  005058  0E01               	movlw	1
  6366  00505A  6E25               	movwf	___awtoft@sign,c
  6367  00505C                     l1795:
  6368  00505C  C022  F01A         	movff	___awtoft@c,___ftpack@arg
  6369  005060  C023  F01B         	movff	___awtoft@c+1,___ftpack@arg+1
  6370  005064  6A1C               	clrf	___ftpack@arg+2,c
  6371  005066  0E8E               	movlw	142
  6372  005068  6E1D               	movwf	___ftpack@exp,c
  6373  00506A  C025  F01E         	movff	___awtoft@sign,___ftpack@sign
  6374  00506E  ECC5  F020         	call	___ftpack	;wreg free
  6375  005072  C01A  F022         	movff	?___ftpack,?___awtoft
  6376  005076  C01B  F023         	movff	?___ftpack+1,?___awtoft+1
  6377  00507A  C01C  F024         	movff	?___ftpack+2,?___awtoft+2
  6378  00507E  0012               	return	
  6379  005080                     __end_of___awtoft:
  6380                           	opt stack 0
  6381                           tosu	equ	0xFFF
  6382                           tosh	equ	0xFFE
  6383                           tosl	equ	0xFFD
  6384                           pclath	equ	0xFFA
  6385                           tblptru	equ	0xFF8
  6386                           tblptrh	equ	0xFF7
  6387                           tblptrl	equ	0xFF6
  6388                           tablat	equ	0xFF5
  6389                           prodh	equ	0xFF4
  6390                           prodl	equ	0xFF3
  6391                           intcon	equ	0xFF2
  6392                           intcon2	equ	0xFF1
  6393                           intcon3	equ	0xFF0
  6394                           postinc0	equ	0xFEE
  6395                           wreg	equ	0xFE8
  6396                           indf1	equ	0xFE7
  6397                           postinc1	equ	0xFE6
  6398                           postdec1	equ	0xFE5
  6399                           fsr1h	equ	0xFE2
  6400                           fsr1l	equ	0xFE1
  6401                           indf2	equ	0xFDF
  6402                           postinc2	equ	0xFDE
  6403                           postdec2	equ	0xFDD
  6404                           fsr2h	equ	0xFDA
  6405                           fsr2l	equ	0xFD9
  6406                           status	equ	0xFD8
  6407                           
  6408 ;; *************** function _convert_time_to_utc *****************
  6409 ;; Defined at:
  6410 ;;		line 304 in file "bibliotecas/GPS.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;  utc_time        4   82[BANK0 ] unsigned long 
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  sec             2   94[BANK0 ] unsigned int 
  6415 ;;  min             2   92[BANK0 ] unsigned int 
  6416 ;;  hour            2   90[BANK0 ] unsigned int 
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  1    wreg      void 
  6419 ;; Registers used:
  6420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6426 ;;      Params:         0       4       0       0       0       0       0       0       0
  6427 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6429 ;;      Totals:         0      14       0       0       0       0       0       0       0
  6430 ;;Total ram usage:       14 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    6
  6433 ;; This function calls:
  6434 ;;		___lldiv
  6435 ;;		___llmod
  6436 ;;		_sprintf
  6437 ;; This function is called by:
  6438 ;;		_gps
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442                           	psect	text29
  6443  003882                     __ptext29:
  6444                           	opt stack 0
  6445  003882                     _convert_time_to_utc:
  6446                           	opt stack 22
  6447                           
  6448                           ;GPS.c: 306: unsigned int hour, min, sec;
  6449                           ;GPS.c: 308: hour = (utc_time / 10000) + -3;
  6450                           
  6451                           ;incstack = 0
  6452  003882  C0B2  F023         	movff	convert_time_to_utc@utc_time,___lldiv@dividend
  6453  003886  C0B3  F024         	movff	convert_time_to_utc@utc_time+1,___lldiv@dividend+1
  6454  00388A  C0B4  F025         	movff	convert_time_to_utc@utc_time+2,___lldiv@dividend+2
  6455  00388E  C0B5  F026         	movff	convert_time_to_utc@utc_time+3,___lldiv@dividend+3
  6456  003892  0E10               	movlw	16
  6457  003894  6E27               	movwf	___lldiv@divisor,c
  6458  003896  0E27               	movlw	39
  6459  003898  6E28               	movwf	___lldiv@divisor+1,c
  6460  00389A  0E00               	movlw	0
  6461  00389C  6E29               	movwf	___lldiv@divisor+2,c
  6462  00389E  0E00               	movlw	0
  6463  0038A0  6E2A               	movwf	___lldiv@divisor+3,c
  6464  0038A2  EC6E  F023         	call	___lldiv	;wreg free
  6465  0038A6  0EFD               	movlw	253
  6466  0038A8  2423               	addwf	?___lldiv,w,c
  6467  0038AA  0100               	movlb	0	; () banked
  6468  0038AC  6FBA               	movwf	convert_time_to_utc@hour& (0+255),b
  6469  0038AE  0EFF               	movlw	255
  6470  0038B0  2024               	addwfc	?___lldiv+1,w,c
  6471  0038B2  6FBB               	movwf	(convert_time_to_utc@hour+1)& (0+255),b
  6472                           
  6473                           ;GPS.c: 309: min = (utc_time % 10000) / 100;
  6474  0038B4  0E10               	movlw	16
  6475  0038B6  6E1E               	movwf	___llmod@divisor,c
  6476  0038B8  0E27               	movlw	39
  6477  0038BA  6E1F               	movwf	___llmod@divisor+1,c
  6478  0038BC  0E00               	movlw	0
  6479  0038BE  6E20               	movwf	___llmod@divisor+2,c
  6480  0038C0  0E00               	movlw	0
  6481  0038C2  6E21               	movwf	___llmod@divisor+3,c
  6482  0038C4  C0B2  F01A         	movff	convert_time_to_utc@utc_time,___llmod@dividend
  6483  0038C8  C0B3  F01B         	movff	convert_time_to_utc@utc_time+1,___llmod@dividend+1
  6484  0038CC  C0B4  F01C         	movff	convert_time_to_utc@utc_time+2,___llmod@dividend+2
  6485  0038D0  C0B5  F01D         	movff	convert_time_to_utc@utc_time+3,___llmod@dividend+3
  6486  0038D4  EC71  F025         	call	___llmod	;wreg free
  6487  0038D8  C01A  F023         	movff	?___llmod,___lldiv@dividend
  6488  0038DC  C01B  F024         	movff	?___llmod+1,___lldiv@dividend+1
  6489  0038E0  C01C  F025         	movff	?___llmod+2,___lldiv@dividend+2
  6490  0038E4  C01D  F026         	movff	?___llmod+3,___lldiv@dividend+3
  6491  0038E8  0E64               	movlw	100
  6492  0038EA  6E27               	movwf	___lldiv@divisor,c
  6493  0038EC  0E00               	movlw	0
  6494  0038EE  6E28               	movwf	___lldiv@divisor+1,c
  6495  0038F0  0E00               	movlw	0
  6496  0038F2  6E29               	movwf	___lldiv@divisor+2,c
  6497  0038F4  0E00               	movlw	0
  6498  0038F6  6E2A               	movwf	___lldiv@divisor+3,c
  6499  0038F8  EC6E  F023         	call	___lldiv	;wreg free
  6500  0038FC  C023  F0BC         	movff	?___lldiv,convert_time_to_utc@min
  6501  003900  C024  F0BD         	movff	?___lldiv+1,convert_time_to_utc@min+1
  6502                           
  6503                           ;GPS.c: 310: sec = (utc_time % 10000) % 100;
  6504  003904  0E10               	movlw	16
  6505  003906  6E1E               	movwf	___llmod@divisor,c
  6506  003908  0E27               	movlw	39
  6507  00390A  6E1F               	movwf	___llmod@divisor+1,c
  6508  00390C  0E00               	movlw	0
  6509  00390E  6E20               	movwf	___llmod@divisor+2,c
  6510  003910  0E00               	movlw	0
  6511  003912  6E21               	movwf	___llmod@divisor+3,c
  6512  003914  C0B2  F01A         	movff	convert_time_to_utc@utc_time,___llmod@dividend
  6513  003918  C0B3  F01B         	movff	convert_time_to_utc@utc_time+1,___llmod@dividend+1
  6514  00391C  C0B4  F01C         	movff	convert_time_to_utc@utc_time+2,___llmod@dividend+2
  6515  003920  C0B5  F01D         	movff	convert_time_to_utc@utc_time+3,___llmod@dividend+3
  6516  003924  EC71  F025         	call	___llmod	;wreg free
  6517  003928  C01A  F0B6         	movff	?___llmod,_convert_time_to_utc$3876
  6518  00392C  C01B  F0B7         	movff	?___llmod+1,_convert_time_to_utc$3876+1
  6519  003930  C01C  F0B8         	movff	?___llmod+2,_convert_time_to_utc$3876+2
  6520  003934  C01D  F0B9         	movff	?___llmod+3,_convert_time_to_utc$3876+3
  6521                           
  6522                           ;GPS.c: 310: sec = (utc_time % 10000) % 100;
  6523  003938  C0B6  F01A         	movff	_convert_time_to_utc$3876,___llmod@dividend
  6524  00393C  C0B7  F01B         	movff	_convert_time_to_utc$3876+1,___llmod@dividend+1
  6525  003940  C0B8  F01C         	movff	_convert_time_to_utc$3876+2,___llmod@dividend+2
  6526  003944  C0B9  F01D         	movff	_convert_time_to_utc$3876+3,___llmod@dividend+3
  6527  003948  0E64               	movlw	100
  6528  00394A  6E1E               	movwf	___llmod@divisor,c
  6529  00394C  0E00               	movlw	0
  6530  00394E  6E1F               	movwf	___llmod@divisor+1,c
  6531  003950  0E00               	movlw	0
  6532  003952  6E20               	movwf	___llmod@divisor+2,c
  6533  003954  0E00               	movlw	0
  6534  003956  6E21               	movwf	___llmod@divisor+3,c
  6535  003958  EC71  F025         	call	___llmod	;wreg free
  6536  00395C  C01A  F0BE         	movff	?___llmod,convert_time_to_utc@sec
  6537  003960  C01B  F0BF         	movff	?___llmod+1,convert_time_to_utc@sec+1
  6538                           
  6539                           ;GPS.c: 311: sprintf(data_buffer, "%d:%d:%d", hour,min,sec);
  6540  003964  0E9A               	movlw	low _data_buffer
  6541  003966  0100               	movlb	0	; () banked
  6542  003968  6F8B               	movwf	sprintf@sp& (0+255),b
  6543  00396A  0E01               	movlw	high _data_buffer
  6544  00396C  6F8C               	movwf	(sprintf@sp+1)& (0+255),b
  6545  00396E  0E5A               	movlw	low STR_9
  6546  003970  6F8D               	movwf	sprintf@f& (0+255),b
  6547  003972  0E62               	movlw	high STR_9
  6548  003974  6F8E               	movwf	(sprintf@f+1)& (0+255),b
  6549  003976  C0BA  F08F         	movff	convert_time_to_utc@hour,?_sprintf+4
  6550  00397A  C0BB  F090         	movff	convert_time_to_utc@hour+1,?_sprintf+5
  6551  00397E  C0BC  F091         	movff	convert_time_to_utc@min,?_sprintf+6
  6552  003982  C0BD  F092         	movff	convert_time_to_utc@min+1,?_sprintf+7
  6553  003986  C0BE  F093         	movff	convert_time_to_utc@sec,?_sprintf+8
  6554  00398A  C0BF  F094         	movff	convert_time_to_utc@sec+1,?_sprintf+9
  6555  00398E  EC26  F004         	call	_sprintf	;wreg free
  6556                           
  6557                           ;GPS.c: 313: f_time.hora = hour;
  6558  003992  C0BA  F184         	movff	convert_time_to_utc@hour,_f_time
  6559  003996  C0BB  F185         	movff	convert_time_to_utc@hour+1,_f_time+1
  6560                           
  6561                           ;GPS.c: 314: f_time.min = min;
  6562  00399A  C0BC  F186         	movff	convert_time_to_utc@min,_f_time+2
  6563  00399E  C0BD  F187         	movff	convert_time_to_utc@min+1,_f_time+3
  6564                           
  6565                           ;GPS.c: 315: f_time.seg = sec;
  6566  0039A2  C0BE  F188         	movff	convert_time_to_utc@sec,_f_time+4
  6567  0039A6  C0BF  F189         	movff	convert_time_to_utc@sec+1,_f_time+5
  6568  0039AA  0012               	return		;funcret
  6569  0039AC                     __end_of_convert_time_to_utc:
  6570                           	opt stack 0
  6571                           tosu	equ	0xFFF
  6572                           tosh	equ	0xFFE
  6573                           tosl	equ	0xFFD
  6574                           pclath	equ	0xFFA
  6575                           tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           prodh	equ	0xFF4
  6580                           prodl	equ	0xFF3
  6581                           intcon	equ	0xFF2
  6582                           intcon2	equ	0xFF1
  6583                           intcon3	equ	0xFF0
  6584                           postinc0	equ	0xFEE
  6585                           wreg	equ	0xFE8
  6586                           indf1	equ	0xFE7
  6587                           postinc1	equ	0xFE6
  6588                           postdec1	equ	0xFE5
  6589                           fsr1h	equ	0xFE2
  6590                           fsr1l	equ	0xFE1
  6591                           indf2	equ	0xFDF
  6592                           postinc2	equ	0xFDE
  6593                           postdec2	equ	0xFDD
  6594                           fsr2h	equ	0xFDA
  6595                           fsr2l	equ	0xFD9
  6596                           status	equ	0xFD8
  6597                           
  6598 ;; *************** function _sprintf *****************
  6599 ;; Defined at:
  6600 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  sp              2   43[BANK0 ] PTR unsigned char 
  6603 ;;		 -> gps@gps_buffer(15), data_buffer(15), 
  6604 ;;  f               2   45[BANK0 ] PTR const unsigned char 
  6605 ;;		 -> STR_9(9), STR_4(6), STR_3(6), 
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;  val             4   72[BANK0 ] unsigned long 
  6608 ;;  tmpval          4   68[BANK0 ] struct .
  6609 ;;  fval            3   78[BANK0 ] struct .
  6610 ;;  cp              3    0        PTR const unsigned char 
  6611 ;;  prec            2   76[BANK0 ] int 
  6612 ;;  exp             2   66[BANK0 ] int 
  6613 ;;  flag            2   64[BANK0 ] unsigned short 
  6614 ;;  ap              2   62[BANK0 ] PTR void [1]
  6615 ;;		 -> ?_sprintf(2), 
  6616 ;;  len             2    0        unsigned int 
  6617 ;;  width           2    0        int 
  6618 ;;  c               1   81[BANK0 ] char 
  6619 ;;  d               1    0        unsigned char 
  6620 ;; Return value:  Size  Location     Type
  6621 ;;                  2   43[BANK0 ] int 
  6622 ;; Registers used:
  6623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6629 ;;      Params:         0      10       0       0       0       0       0       0       0
  6630 ;;      Locals:         0      23       0       0       0       0       0       0       0
  6631 ;;      Temps:          0       6       0       0       0       0       0       0       0
  6632 ;;      Totals:         0      39       0       0       0       0       0       0       0
  6633 ;;Total ram usage:       39 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; Hardware stack levels required when called:    5
  6636 ;; This function calls:
  6637 ;;		___awdiv
  6638 ;;		___ftadd
  6639 ;;		___ftge
  6640 ;;		___ftmul
  6641 ;;		___ftneg
  6642 ;;		___ftsub
  6643 ;;		___fttol
  6644 ;;		___lldiv
  6645 ;;		___llmod
  6646 ;;		___lltoft
  6647 ;;		___wmul
  6648 ;;		__div_to_l_
  6649 ;;		__tdiv_to_l_
  6650 ;;		_fround
  6651 ;;		_isdigit
  6652 ;;		_scale
  6653 ;; This function is called by:
  6654 ;;		_gps
  6655 ;;		_convert_time_to_utc
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           	psect	text30
  6660  00084C                     __ptext30:
  6661                           	opt stack 0
  6662  00084C                     _sprintf:
  6663                           	opt stack 23
  6664                           
  6665                           ;doprnt.c: 494: va_list ap;
  6666                           ;doprnt.c: 499: signed char c;
  6667                           ;doprnt.c: 501: int width;
  6668                           ;doprnt.c: 504: int prec;
  6669                           ;doprnt.c: 508: unsigned short flag;
  6670                           ;doprnt.c: 515: char d;
  6671                           ;doprnt.c: 516: double fval;
  6672                           ;doprnt.c: 517: int exp;
  6673                           ;doprnt.c: 523: union {
  6674                           ;doprnt.c: 524: unsigned long vd;
  6675                           ;doprnt.c: 525: double integ;
  6676                           ;doprnt.c: 526: } tmpval;
  6677                           ;doprnt.c: 528: unsigned long val;
  6678                           ;doprnt.c: 529: unsigned len;
  6679                           ;doprnt.c: 530: const char * cp;
  6680                           ;doprnt.c: 533: *ap = __va_start();
  6681                           
  6682                           ;incstack = 0
  6683  00084C  0E8F               	movlw	low (?_sprintf+4)
  6684  00084E  0100               	movlb	0	; () banked
  6685  000850  6F9E               	movwf	sprintf@ap& (0+255),b
  6686  000852  0E00               	movlw	high (?_sprintf+4)
  6687  000854  6F9F               	movwf	(sprintf@ap+1)& (0+255),b
  6688                           
  6689                           ;doprnt.c: 536: while(c = *f++) {
  6690  000856  D3F7               	goto	u15710
  6691  000858                     
  6692                           ; BSR set to: 0
  6693                           ;doprnt.c: 538: if(c != '%')
  6694                           
  6695                           ; BSR set to: 0
  6696  000858  0E25               	movlw	37
  6697  00085A  19B1               	xorwf	sprintf@c& (0+255),w,b
  6698  00085C  B4D8               	btfsc	status,2,c
  6699  00085E  D009               	goto	l1455
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;doprnt.c: 540: {
  6703                           ;doprnt.c: 541: ((*sp++ = (c)));
  6704  000860  C08B  FFD9         	movff	sprintf@sp,fsr2l
  6705  000864  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  6706  000868  C0B1  FFDF         	movff	sprintf@c,indf2
  6707                           
  6708                           ; BSR set to: 0
  6709  00086C  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  6710  00086E  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  6711                           
  6712                           ;doprnt.c: 542: continue;
  6713  000870  D3EA               	goto	u15710
  6714  000872                     l1455:
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;doprnt.c: 543: }
  6718                           ;doprnt.c: 548: flag = 0;
  6719                           
  6720                           ; BSR set to: 0
  6721  000872  0E00               	movlw	0
  6722  000874  6FA1               	movwf	(sprintf@flag+1)& (0+255),b
  6723  000876  0E00               	movlw	0
  6724  000878  6FA0               	movwf	sprintf@flag& (0+255),b
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;doprnt.c: 611: if(*f == '.') {
  6728  00087A  C08D  FFF6         	movff	sprintf@f,tblptrl
  6729  00087E  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  6730  000882                     	if	0	;tblptru may be non-zero
  6731  000882                     	endif
  6732  000882                     	if	0	;tblptru may be non-zero
  6733  000882                     	endif
  6734  000882  0008               	tblrd		*
  6735  000884  50F5               	movf	tablat,w,c
  6736  000886  0A2E               	xorlw	46
  6737  000888  A4D8               	btfss	status,2,c
  6738  00088A  D02F               	goto	l1456
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;doprnt.c: 612: flag |= 0x4000;
  6742  00088C  8DA1               	bsf	(sprintf@flag+1)& (0+255),6,b
  6743                           
  6744                           ;doprnt.c: 613: f++;
  6745  00088E  4B8D               	infsnz	sprintf@f& (0+255),f,b
  6746  000890  2B8E               	incf	(sprintf@f+1)& (0+255),f,b
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;doprnt.c: 620: {
  6750                           ;doprnt.c: 621: prec = 0;
  6751  000892  0E00               	movlw	0
  6752  000894  6FAD               	movwf	(sprintf@prec+1)& (0+255),b
  6753  000896  0E00               	movlw	0
  6754  000898  6FAC               	movwf	sprintf@prec& (0+255),b
  6755                           
  6756                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6757  00089A  D01C               	goto	l1457
  6758  00089C                     
  6759                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6760                           
  6761                           ; BSR set to: 0
  6762  00089C  C0AC  F028         	movff	sprintf@prec,___wmul@multiplier
  6763  0008A0  C0AD  F029         	movff	sprintf@prec+1,___wmul@multiplier+1
  6764  0008A4  0E00               	movlw	0
  6765  0008A6  6E2B               	movwf	___wmul@multiplicand+1,c
  6766  0008A8  0E0A               	movlw	10
  6767  0008AA  6E2A               	movwf	___wmul@multiplicand,c
  6768  0008AC  ECA7  F028         	call	___wmul	;wreg free
  6769  0008B0  C08D  FFF6         	movff	sprintf@f,tblptrl
  6770  0008B4  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  6771  0008B8                     	if	0	;tblptru may be non-zero
  6772  0008B8                     	endif
  6773  0008B8                     	if	0	;tblptru may be non-zero
  6774  0008B8                     	endif
  6775  0008B8  0008               	tblrd		*
  6776  0008BA  50F5               	movf	tablat,w,c
  6777  0008BC  2628               	addwf	?___wmul,f,c
  6778  0008BE  0E00               	movlw	0
  6779  0008C0  2229               	addwfc	?___wmul+1,f,c
  6780  0008C2  0ED0               	movlw	208
  6781  0008C4  2428               	addwf	?___wmul,w,c
  6782  0008C6  0100               	movlb	0	; () banked
  6783  0008C8  6FAC               	movwf	sprintf@prec& (0+255),b
  6784  0008CA  0EFF               	movlw	255
  6785  0008CC  2029               	addwfc	?___wmul+1,w,c
  6786  0008CE  6FAD               	movwf	(sprintf@prec+1)& (0+255),b
  6787                           
  6788                           ; BSR set to: 0
  6789  0008D0  4B8D               	infsnz	sprintf@f& (0+255),f,b
  6790  0008D2  2B8E               	incf	(sprintf@f+1)& (0+255),f,b
  6791  0008D4                     l1457:
  6792                           
  6793                           ; BSR set to: 0
  6794                           
  6795                           ; BSR set to: 0
  6796  0008D4  C08D  FFF6         	movff	sprintf@f,tblptrl
  6797  0008D8  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  6798  0008DC                     	if	0	;tblptru may be non-zero
  6799  0008DC                     	endif
  6800  0008DC                     	if	0	;tblptru may be non-zero
  6801  0008DC                     	endif
  6802  0008DC  0008               	tblrd		*
  6803  0008DE  50F5               	movf	tablat,w,c
  6804  0008E0  EC03  F029         	call	_isdigit
  6805  0008E4  A0D8               	btfss	status,0,c
  6806  0008E6  D00A               	goto	l1461
  6807  0008E8  D7D9               	goto	l1458
  6808  0008EA                     l1456:
  6809                           
  6810                           ;doprnt.c: 626: prec = 0;
  6811  0008EA  0E00               	movlw	0
  6812  0008EC  0100               	movlb	0	; () banked
  6813  0008EE  6FAD               	movwf	(sprintf@prec+1)& (0+255),b
  6814  0008F0  0E00               	movlw	0
  6815  0008F2  6FAC               	movwf	sprintf@prec& (0+255),b
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;doprnt.c: 628: flag |= 0x1000;
  6819  0008F4  89A1               	bsf	(sprintf@flag+1)& (0+255),4,b
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;doprnt.c: 630: }
  6823                           ;doprnt.c: 635: switch(c = *f++) {
  6824  0008F6  D002               	goto	l1461
  6825  0008F8                     
  6826                           ; BSR set to: 0
  6827                           ;doprnt.c: 663: flag |= 0x400;
  6828                           
  6829                           ; BSR set to: 0
  6830  0008F8  85A1               	bsf	(sprintf@flag+1)& (0+255),2,b
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;doprnt.c: 698: case 'i':
  6834                           ;doprnt.c: 699: break;
  6835                           
  6836                           ; BSR set to: 0
  6837                           
  6838                           ;doprnt.c: 697: case 'd':
  6839                           
  6840                           ;doprnt.c: 664: break;
  6841  0008FA  D017               	goto	l1465
  6842  0008FC                     l1461:
  6843                           
  6844                           ; BSR set to: 0
  6845  0008FC  C08D  FFF6         	movff	sprintf@f,tblptrl
  6846  000900  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  6847  000904  0100               	movlb	0	; () banked
  6848  000906  4B8D               	infsnz	sprintf@f& (0+255),f,b
  6849  000908  2B8E               	incf	(sprintf@f+1)& (0+255),f,b
  6850  00090A                     	if	0	;tblptru may be non-zero
  6851  00090A                     	endif
  6852  00090A                     	if	0	;tblptru may be non-zero
  6853  00090A                     	endif
  6854  00090A  0008               	tblrd		*
  6855  00090C  CFF5 F0B1          	movff	tablat,sprintf@c
  6856  000910  51B1               	movf	sprintf@c& (0+255),w,b
  6857                           
  6858                           ; Switch size 1, requested type "space"
  6859                           ; Number of cases is 4, Range of values is 0 to 105
  6860                           ; switch strategies available:
  6861                           ; Name         Instructions Cycles
  6862                           ; simple_byte           13     7 (average)
  6863                           ;	Chosen strategy is simple_byte
  6864  000912  0A00               	xorlw	0	; case 0
  6865  000914  B4D8               	btfsc	status,2,c
  6866  000916  D3A4               	goto	u15720
  6867  000918  0A64               	xorlw	100	; case 100
  6868  00091A  B4D8               	btfsc	status,2,c
  6869  00091C  D006               	goto	l1465
  6870  00091E  0A02               	xorlw	2	; case 102
  6871  000920  B4D8               	btfsc	status,2,c
  6872  000922  D7EA               	goto	l1464
  6873  000924  0A0F               	xorlw	15	; case 105
  6874  000926  A4D8               	btfss	status,2,c
  6875  000928  D38E               	goto	u15710
  6876  00092A                     l1465:
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;doprnt.c: 825: if(flag & (0x700)) {
  6880                           
  6881                           ; BSR set to: 0
  6882  00092A  0E07               	movlw	7
  6883  00092C  15A1               	andwf	(sprintf@flag+1)& (0+255),w,b
  6884  00092E  B4D8               	btfsc	status,2,c
  6885  000930  D2C8               	goto	l1469
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;doprnt.c: 827: if(flag & 0x1000)
  6889  000932  A9A1               	btfss	(sprintf@flag+1)& (0+255),4,b
  6890  000934  D004               	goto	l1470
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;doprnt.c: 829: prec = 6;
  6894  000936  0E00               	movlw	0
  6895  000938  6FAD               	movwf	(sprintf@prec+1)& (0+255),b
  6896  00093A  0E06               	movlw	6
  6897  00093C  6FAC               	movwf	sprintf@prec& (0+255),b
  6898  00093E                     l1470:
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6902                           
  6903                           ; BSR set to: 0
  6904  00093E  C09E  FFD9         	movff	sprintf@ap,fsr2l
  6905  000942  C09F  FFDA         	movff	sprintf@ap+1,fsr2h
  6906  000946  CFDE F0AE          	movff	postinc2,sprintf@fval
  6907  00094A  CFDE F0AF          	movff	postinc2,sprintf@fval+1
  6908  00094E  CFDD F0B0          	movff	postdec2,sprintf@fval+2
  6909                           
  6910                           ; BSR set to: 0
  6911  000952  0E03               	movlw	3
  6912  000954  279E               	addwf	sprintf@ap& (0+255),f,b
  6913  000956  0E00               	movlw	0
  6914  000958  239F               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;doprnt.c: 831: if(fval < 0.0) {
  6918  00095A  AFB0               	btfss	(sprintf@fval+2)& (0+255),7,b
  6919  00095C  D011               	goto	l1471
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;doprnt.c: 832: fval = -fval;
  6923  00095E  C0AE  F06F         	movff	sprintf@fval,___ftneg@f1
  6924  000962  C0AF  F070         	movff	sprintf@fval+1,___ftneg@f1+1
  6925  000966  C0B0  F071         	movff	sprintf@fval+2,___ftneg@f1+2
  6926  00096A  ECBA  F028         	call	___ftneg	;wreg free
  6927  00096E  C06F  F0AE         	movff	?___ftneg,sprintf@fval
  6928  000972  C070  F0AF         	movff	?___ftneg+1,sprintf@fval+1
  6929  000976  C071  F0B0         	movff	?___ftneg+2,sprintf@fval+2
  6930                           
  6931                           ;doprnt.c: 833: flag |= 0x03;
  6932  00097A  0E03               	movlw	3
  6933  00097C  0100               	movlb	0	; () banked
  6934  00097E  13A0               	iorwf	sprintf@flag& (0+255),f,b
  6935  000980                     l1471:
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;doprnt.c: 834: }
  6939                           ;doprnt.c: 835: exp = 0;
  6940                           
  6941                           ; BSR set to: 0
  6942  000980  0E00               	movlw	0
  6943  000982  6FA3               	movwf	(sprintf@exp+1)& (0+255),b
  6944  000984  0E00               	movlw	0
  6945  000986  6FA2               	movwf	sprintf@exp& (0+255),b
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;doprnt.c: 836: if( fval!=0) {
  6949  000988  51AE               	movf	sprintf@fval& (0+255),w,b
  6950  00098A  11AF               	iorwf	(sprintf@fval+1)& (0+255),w,b
  6951  00098C  11B0               	iorwf	(sprintf@fval+2)& (0+255),w,b
  6952  00098E  B4D8               	btfsc	status,2,c
  6953  000990  D086               	goto	l1476
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6957  000992  0E82               	movlw	130
  6958  000994  6F95               	movwf	??_sprintf& (0+255),b
  6959  000996  0EFF               	movlw	255
  6960  000998  6F96               	movwf	(??_sprintf+1)& (0+255),b
  6961  00099A  C0AE  F097         	movff	sprintf@fval,??_sprintf+2
  6962  00099E  C0AF  F098         	movff	sprintf@fval+1,??_sprintf+3
  6963  0009A2  C0B0  F099         	movff	sprintf@fval+2,??_sprintf+4
  6964  0009A6  C0B1  F09A         	movff	sprintf@fval+3,??_sprintf+5
  6965  0009AA  0E10               	movlw	16
  6966  0009AC  D005               	goto	u15420
  6967  0009AE                     u15425:
  6968  0009AE  90D8               	bcf	status,0,c
  6969  0009B0  339A               	rrcf	(??_sprintf+5)& (0+255),f,b
  6970  0009B2  3399               	rrcf	(??_sprintf+4)& (0+255),f,b
  6971  0009B4  3398               	rrcf	(??_sprintf+3)& (0+255),f,b
  6972  0009B6  3397               	rrcf	(??_sprintf+2)& (0+255),f,b
  6973  0009B8                     u15420:
  6974  0009B8  2EE8               	decfsz	wreg,f,c
  6975  0009BA  D7F9               	goto	u15425
  6976  0009BC  5197               	movf	(??_sprintf+2)& (0+255),w,b
  6977  0009BE  2595               	addwf	??_sprintf& (0+255),w,b
  6978  0009C0  6FA2               	movwf	sprintf@exp& (0+255),b
  6979  0009C2  0E00               	movlw	0
  6980  0009C4  2196               	addwfc	(??_sprintf+1)& (0+255),w,b
  6981  0009C6  6FA3               	movwf	(sprintf@exp+1)& (0+255),b
  6982                           
  6983                           ; BSR set to: 0
  6984                           ;doprnt.c: 838: exp--;
  6985  0009C8  07A2               	decf	sprintf@exp& (0+255),f,b
  6986  0009CA  A0D8               	btfss	status,0,c
  6987  0009CC  07A3               	decf	(sprintf@exp+1)& (0+255),f,b
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;doprnt.c: 839: exp *= 3;
  6991  0009CE  C0A2  F028         	movff	sprintf@exp,___wmul@multiplier
  6992  0009D2  C0A3  F029         	movff	sprintf@exp+1,___wmul@multiplier+1
  6993  0009D6  0E00               	movlw	0
  6994  0009D8  6E2B               	movwf	___wmul@multiplicand+1,c
  6995  0009DA  0E03               	movlw	3
  6996  0009DC  6E2A               	movwf	___wmul@multiplicand,c
  6997  0009DE  ECA7  F028         	call	___wmul	;wreg free
  6998  0009E2  C028  F0A2         	movff	?___wmul,sprintf@exp
  6999  0009E6  C029  F0A3         	movff	?___wmul+1,sprintf@exp+1
  7000                           
  7001                           ;doprnt.c: 840: exp /= 10;
  7002  0009EA  C0A2  F020         	movff	sprintf@exp,___awdiv@dividend
  7003  0009EE  C0A3  F021         	movff	sprintf@exp+1,___awdiv@dividend+1
  7004  0009F2  0E00               	movlw	0
  7005  0009F4  6E23               	movwf	___awdiv@divisor+1,c
  7006  0009F6  0E0A               	movlw	10
  7007  0009F8  6E22               	movwf	___awdiv@divisor,c
  7008  0009FA  EC2C  F023         	call	___awdiv	;wreg free
  7009  0009FE  C020  F0A2         	movff	?___awdiv,sprintf@exp
  7010  000A02  C021  F0A3         	movff	?___awdiv+1,sprintf@exp+1
  7011                           
  7012                           ;doprnt.c: 841: if(exp < 0)
  7013  000A06  0100               	movlb	0	; () banked
  7014  000A08  AFA3               	btfss	(sprintf@exp+1)& (0+255),7,b
  7015  000A0A  D003               	goto	l1473
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;doprnt.c: 842: exp--;
  7019  000A0C  07A2               	decf	sprintf@exp& (0+255),f,b
  7020  000A0E  A0D8               	btfss	status,0,c
  7021  000A10  07A3               	decf	(sprintf@exp+1)& (0+255),f,b
  7022  000A12                     l1473:
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  7026                           
  7027                           ; BSR set to: 0
  7028  000A12  51A2               	movf	sprintf@exp& (0+255),w,b
  7029  000A14  0800               	sublw	0
  7030  000A16  ECC1  F00C         	call	_scale
  7031  000A1A  C06F  F0A4         	movff	?_scale,sprintf@tmpval
  7032  000A1E  C070  F0A5         	movff	?_scale+1,sprintf@tmpval+1
  7033  000A22  C071  F0A6         	movff	?_scale+2,sprintf@tmpval+2
  7034                           
  7035                           ;doprnt.c: 847: tmpval.integ *= fval;
  7036  000A26  C0A4  F060         	movff	sprintf@tmpval,___ftmul@f1
  7037  000A2A  C0A5  F061         	movff	sprintf@tmpval+1,___ftmul@f1+1
  7038  000A2E  C0A6  F062         	movff	sprintf@tmpval+2,___ftmul@f1+2
  7039  000A32  C0AE  F063         	movff	sprintf@fval,___ftmul@f2
  7040  000A36  C0AF  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  7041  000A3A  C0B0  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  7042  000A3E  EC77  F01F         	call	___ftmul	;wreg free
  7043  000A42  C060  F0A4         	movff	?___ftmul,sprintf@tmpval
  7044  000A46  C061  F0A5         	movff	?___ftmul+1,sprintf@tmpval+1
  7045  000A4A  C062  F0A6         	movff	?___ftmul+2,sprintf@tmpval+2
  7046                           
  7047                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  7048  000A4E  C0A4  F01A         	movff	sprintf@tmpval,___ftge@ff1
  7049  000A52  C0A5  F01B         	movff	sprintf@tmpval+1,___ftge@ff1+1
  7050  000A56  C0A6  F01C         	movff	sprintf@tmpval+2,___ftge@ff1+2
  7051  000A5A  0E00               	movlw	0
  7052  000A5C  6E1D               	movwf	___ftge@ff2,c
  7053  000A5E  0E80               	movlw	128
  7054  000A60  6E1E               	movwf	___ftge@ff2+1,c
  7055  000A62  0E3F               	movlw	63
  7056  000A64  6E1F               	movwf	___ftge@ff2+2,c
  7057  000A66  EC12  F022         	call	___ftge	;wreg free
  7058  000A6A  B0D8               	btfsc	status,0,c
  7059  000A6C  D005               	goto	l1474
  7060                           
  7061                           ;doprnt.c: 849: exp--;
  7062  000A6E  0100               	movlb	0	; () banked
  7063  000A70  07A2               	decf	sprintf@exp& (0+255),f,b
  7064  000A72  A0D8               	btfss	status,0,c
  7065  000A74  07A3               	decf	(sprintf@exp+1)& (0+255),f,b
  7066  000A76  D013               	goto	l1476
  7067  000A78                     l1474:
  7068                           
  7069                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  7070                           
  7071                           ; BSR set to: 0
  7072  000A78  C0A4  F01A         	movff	sprintf@tmpval,___ftge@ff1
  7073  000A7C  C0A5  F01B         	movff	sprintf@tmpval+1,___ftge@ff1+1
  7074  000A80  C0A6  F01C         	movff	sprintf@tmpval+2,___ftge@ff1+2
  7075  000A84  0E00               	movlw	0
  7076  000A86  6E1D               	movwf	___ftge@ff2,c
  7077  000A88  0E20               	movlw	32
  7078  000A8A  6E1E               	movwf	___ftge@ff2+1,c
  7079  000A8C  0E41               	movlw	65
  7080  000A8E  6E1F               	movwf	___ftge@ff2+2,c
  7081  000A90  EC12  F022         	call	___ftge	;wreg free
  7082  000A94  A0D8               	btfss	status,0,c
  7083  000A96  D003               	goto	l1476
  7084                           
  7085                           ;doprnt.c: 851: exp++;
  7086  000A98  0100               	movlb	0	; () banked
  7087  000A9A  4BA2               	infsnz	sprintf@exp& (0+255),f,b
  7088  000A9C  2BA3               	incf	(sprintf@exp+1)& (0+255),f,b
  7089  000A9E                     l1476:
  7090                           
  7091                           ;doprnt.c: 852: }
  7092                           ;doprnt.c: 1112: if(prec <= 12)
  7093                           
  7094                           ; BSR set to: 0
  7095                           
  7096                           ; BSR set to: 0
  7097                           
  7098                           ; BSR set to: 0
  7099  000A9E  0100               	movlb	0	; () banked
  7100  000AA0  BFAD               	btfsc	(sprintf@prec+1)& (0+255),7,b
  7101  000AA2  D006               	goto	u15460
  7102  000AA4  51AD               	movf	(sprintf@prec+1)& (0+255),w,b
  7103  000AA6  E11B               	bnz	l12188
  7104  000AA8  0E0D               	movlw	13
  7105  000AAA  5DAC               	subwf	sprintf@prec& (0+255),w,b
  7106  000AAC  B0D8               	btfsc	status,0,c
  7107  000AAE  D017               	goto	l1477
  7108  000AB0                     u15460:
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;doprnt.c: 1113: fval += fround(prec);
  7112  000AB0  C0AE  F079         	movff	sprintf@fval,___ftadd@f1
  7113  000AB4  C0AF  F07A         	movff	sprintf@fval+1,___ftadd@f1+1
  7114  000AB8  C0B0  F07B         	movff	sprintf@fval+2,___ftadd@f1+2
  7115  000ABC  51AC               	movf	sprintf@prec& (0+255),w,b
  7116  000ABE  EC3A  F015         	call	_fround
  7117  000AC2  C06F  F07C         	movff	?_fround,___ftadd@f2
  7118  000AC6  C070  F07D         	movff	?_fround+1,___ftadd@f2+1
  7119  000ACA  C071  F07E         	movff	?_fround+2,___ftadd@f2+2
  7120  000ACE  EC35  F018         	call	___ftadd	;wreg free
  7121  000AD2  C079  F0AE         	movff	?___ftadd,sprintf@fval
  7122  000AD6  C07A  F0AF         	movff	?___ftadd+1,sprintf@fval+1
  7123  000ADA  C07B  F0B0         	movff	?___ftadd+2,sprintf@fval+2
  7124  000ADE                     l1477:
  7125  000ADE                     l12188:
  7126                           
  7127                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  7128  000ADE  0100               	movlb	0	; () banked
  7129  000AE0  BFA3               	btfsc	(sprintf@exp+1)& (0+255),7,b
  7130  000AE2  D006               	goto	u15470
  7131  000AE4  51A3               	movf	(sprintf@exp+1)& (0+255),w,b
  7132  000AE6  E11F               	bnz	l12196
  7133  000AE8  0E0A               	movlw	10
  7134  000AEA  5DA2               	subwf	sprintf@exp& (0+255),w,b
  7135  000AEC  B0D8               	btfsc	status,0,c
  7136  000AEE  D01B               	goto	u15500
  7137  000AF0                     u15470:
  7138                           
  7139                           ; BSR set to: 0
  7140  000AF0  51AE               	movf	sprintf@fval& (0+255),w,b
  7141  000AF2  11AF               	iorwf	(sprintf@fval+1)& (0+255),w,b
  7142  000AF4  11B0               	iorwf	(sprintf@fval+2)& (0+255),w,b
  7143  000AF6  B4D8               	btfsc	status,2,c
  7144  000AF8  D055               	goto	l1478
  7145                           
  7146                           ; BSR set to: 0
  7147  000AFA  C0AE  F076         	movff	sprintf@fval,___fttol@f1
  7148  000AFE  C0AF  F077         	movff	sprintf@fval+1,___fttol@f1+1
  7149  000B02  C0B0  F078         	movff	sprintf@fval+2,___fttol@f1+2
  7150  000B06  ECFB  F01E         	call	___fttol	;wreg free
  7151  000B0A  0100               	movlb	0	; () banked
  7152  000B0C  5176               	movf	?___fttol& (0+255),w,b
  7153  000B0E  1177               	iorwf	(?___fttol+1)& (0+255),w,b
  7154  000B10  1178               	iorwf	(?___fttol+2)& (0+255),w,b
  7155  000B12  1179               	iorwf	(?___fttol+3)& (0+255),w,b
  7156  000B14  B4D8               	btfsc	status,2,c
  7157                           
  7158                           ; BSR set to: 0
  7159  000B16  BFA3               	btfsc	(sprintf@exp+1)& (0+255),7,b
  7160  000B18  D045               	goto	l1478
  7161  000B1A  51A3               	movf	(sprintf@exp+1)& (0+255),w,b
  7162  000B1C  E104               	bnz	l12196
  7163  000B1E  0E02               	movlw	2
  7164  000B20  5DA2               	subwf	sprintf@exp& (0+255),w,b
  7165  000B22  A0D8               	btfss	status,0,c
  7166  000B24  D03F               	goto	l1478
  7167  000B26                     u15500:
  7168  000B26                     l12196:
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  7172  000B26  C0A4  F01A         	movff	sprintf@tmpval,___ftge@ff1
  7173  000B2A  C0A5  F01B         	movff	sprintf@tmpval+1,___ftge@ff1+1
  7174  000B2E  C0A6  F01C         	movff	sprintf@tmpval+2,___ftge@ff1+2
  7175  000B32  0E70               	movlw	112
  7176  000B34  6E1D               	movwf	___ftge@ff2,c
  7177  000B36  0E89               	movlw	137
  7178  000B38  6E1E               	movwf	___ftge@ff2+1,c
  7179  000B3A  0E40               	movlw	64
  7180  000B3C  6E1F               	movwf	___ftge@ff2+2,c
  7181  000B3E  EC12  F022         	call	___ftge	;wreg free
  7182  000B42  B0D8               	btfsc	status,0,c
  7183  000B44  D003               	goto	l1481
  7184                           
  7185                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  7186  000B46  0100               	movlb	0	; () banked
  7187  000B48  0EF7               	movlw	247
  7188  000B4A  D002               	goto	L1
  7189  000B4C                     l1481:
  7190                           
  7191                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  7192                           
  7193                           ; BSR set to: 0
  7194  000B4C  0100               	movlb	0	; () banked
  7195  000B4E  0EF8               	movlw	248
  7196  000B50                     L1:
  7197  000B50  27A2               	addwf	sprintf@exp& (0+255),f,b
  7198  000B52  0EFF               	movlw	255
  7199  000B54  23A3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  7200                           
  7201                           ; BSR set to: 0
  7202                           ;doprnt.c: 1124: }
  7203                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  7204                           
  7205                           ; BSR set to: 0
  7206  000B56  51A2               	movf	sprintf@exp& (0+255),w,b
  7207  000B58  ECC1  F00C         	call	_scale
  7208  000B5C  C06F  F0A4         	movff	?_scale,sprintf@tmpval
  7209  000B60  C070  F0A5         	movff	?_scale+1,sprintf@tmpval+1
  7210  000B64  C071  F0A6         	movff	?_scale+2,sprintf@tmpval+2
  7211                           
  7212                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  7213  000B68  C0AE  F01A         	movff	sprintf@fval,__tdiv_to_l_@f1
  7214  000B6C  C0AF  F01B         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  7215  000B70  C0B0  F01C         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  7216  000B74  C0A4  F01D         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  7217  000B78  C0A5  F01E         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  7218  000B7C  C0A6  F01F         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  7219  000B80  ECA8  F01B         	call	__tdiv_to_l_	;wreg free
  7220  000B84  C01A  F0A8         	movff	?__tdiv_to_l_,sprintf@val
  7221  000B88  C01B  F0A9         	movff	?__tdiv_to_l_+1,sprintf@val+1
  7222  000B8C  C01C  F0AA         	movff	?__tdiv_to_l_+2,sprintf@val+2
  7223  000B90  C01D  F0AB         	movff	?__tdiv_to_l_+3,sprintf@val+3
  7224                           
  7225                           ;doprnt.c: 1129: fval = 0.0;
  7226  000B94  0E00               	movlw	0
  7227  000B96  0100               	movlb	0	; () banked
  7228  000B98  6FAE               	movwf	sprintf@fval& (0+255),b
  7229  000B9A  0E00               	movlw	0
  7230  000B9C  6FAF               	movwf	(sprintf@fval+1)& (0+255),b
  7231  000B9E  0E00               	movlw	0
  7232  000BA0  6FB0               	movwf	(sprintf@fval+2)& (0+255),b
  7233                           
  7234                           ;doprnt.c: 1130: } else {
  7235  000BA2  D033               	goto	l1487
  7236  000BA4                     l1478:
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;doprnt.c: 1131: val = (unsigned long)fval;
  7240                           
  7241                           ; BSR set to: 0
  7242  000BA4  C0AE  F076         	movff	sprintf@fval,___fttol@f1
  7243  000BA8  C0AF  F077         	movff	sprintf@fval+1,___fttol@f1+1
  7244  000BAC  C0B0  F078         	movff	sprintf@fval+2,___fttol@f1+2
  7245  000BB0  ECFB  F01E         	call	___fttol	;wreg free
  7246  000BB4  C076  F0A8         	movff	?___fttol,sprintf@val
  7247  000BB8  C077  F0A9         	movff	?___fttol+1,sprintf@val+1
  7248  000BBC  C078  F0AA         	movff	?___fttol+2,sprintf@val+2
  7249  000BC0  C079  F0AB         	movff	?___fttol+3,sprintf@val+3
  7250                           
  7251                           ;doprnt.c: 1132: fval -= (double)val;
  7252  000BC4  C0AE  F085         	movff	sprintf@fval,___ftsub@f1
  7253  000BC8  C0AF  F086         	movff	sprintf@fval+1,___ftsub@f1+1
  7254  000BCC  C0B0  F087         	movff	sprintf@fval+2,___ftsub@f1+2
  7255  000BD0  C0A8  F022         	movff	sprintf@val,___lltoft@c
  7256  000BD4  C0A9  F023         	movff	sprintf@val+1,___lltoft@c+1
  7257  000BD8  C0AA  F024         	movff	sprintf@val+2,___lltoft@c+2
  7258  000BDC  C0AB  F025         	movff	sprintf@val+3,___lltoft@c+3
  7259  000BE0  ECA4  F025         	call	___lltoft	;wreg free
  7260  000BE4  C022  F088         	movff	?___lltoft,___ftsub@f2
  7261  000BE8  C023  F089         	movff	?___lltoft+1,___ftsub@f2+1
  7262  000BEC  C024  F08A         	movff	?___lltoft+2,___ftsub@f2+2
  7263  000BF0  EC6F  F027         	call	___ftsub	;wreg free
  7264  000BF4  C085  F0AE         	movff	?___ftsub,sprintf@fval
  7265  000BF8  C086  F0AF         	movff	?___ftsub+1,sprintf@fval+1
  7266  000BFC  C087  F0B0         	movff	?___ftsub+2,sprintf@fval+2
  7267                           
  7268                           ;doprnt.c: 1133: exp = 0;
  7269  000C00  0E00               	movlw	0
  7270  000C02  0100               	movlb	0	; () banked
  7271  000C04  6FA3               	movwf	(sprintf@exp+1)& (0+255),b
  7272  000C06  0E00               	movlw	0
  7273  000C08  6FA2               	movwf	sprintf@exp& (0+255),b
  7274  000C0A                     l1487:
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;doprnt.c: 1134: }
  7278                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  7279                           
  7280                           ; BSR set to: 0
  7281  000C0A  0E01               	movlw	1
  7282  000C0C  6FB1               	movwf	sprintf@c& (0+255),b
  7283  000C0E                     l12216:
  7284                           
  7285                           ; BSR set to: 0
  7286  000C0E  0E0A               	movlw	10
  7287  000C10  19B1               	xorwf	sprintf@c& (0+255),w,b
  7288  000C12  B4D8               	btfsc	status,2,c
  7289  000C14  D018               	goto	u15540
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;doprnt.c: 1137: if(val < dpowers[c])
  7293                           
  7294                           ; BSR set to: 0
  7295                           
  7296                           ; BSR set to: 0
  7297  000C16  51B1               	movf	sprintf@c& (0+255),w,b
  7298  000C18  0D04               	mullw	4
  7299  000C1A  0EF5               	movlw	low _dpowers
  7300  000C1C  24F3               	addwf	prodl,w,c
  7301  000C1E  6EF6               	movwf	tblptrl,c
  7302  000C20  0E60               	movlw	high _dpowers
  7303  000C22  20F4               	addwfc	prodh,w,c
  7304  000C24  6EF7               	movwf	tblptrh,c
  7305  000C26                     	if	0	;There are less than 3 active tblptr bytes
  7306  000C26                     	endif
  7307  000C26  0009               	tblrd		*+
  7308  000C28  50F5               	movf	tablat,w,c
  7309  000C2A  5DA8               	subwf	sprintf@val& (0+255),w,b
  7310  000C2C  0009               	tblrd		*+
  7311  000C2E  50F5               	movf	tablat,w,c
  7312  000C30  59A9               	subwfb	(sprintf@val+1)& (0+255),w,b
  7313  000C32  0009               	tblrd		*+
  7314  000C34  50F5               	movf	tablat,w,c
  7315  000C36  59AA               	subwfb	(sprintf@val+2)& (0+255),w,b
  7316  000C38  0009               	tblrd		*+
  7317  000C3A  50F5               	movf	tablat,w,c
  7318  000C3C  59AB               	subwfb	(sprintf@val+3)& (0+255),w,b
  7319  000C3E  A0D8               	btfss	status,0,c
  7320  000C40  D002               	goto	u15540
  7321                           
  7322                           ; BSR set to: 0
  7323                           
  7324                           ; BSR set to: 0
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;doprnt.c: 1138: break;
  7328  000C42  2BB1               	incf	sprintf@c& (0+255),f,b
  7329  000C44  D7E4               	goto	l12216
  7330  000C46                     u15540:
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;doprnt.c: 1175: {
  7334                           ;doprnt.c: 1188: if(flag & 0x03)
  7335                           
  7336                           ; BSR set to: 0
  7337  000C46  0E03               	movlw	3
  7338  000C48  15A0               	andwf	sprintf@flag& (0+255),w,b
  7339  000C4A  6F95               	movwf	??_sprintf& (0+255),b
  7340  000C4C  0E00               	movlw	0
  7341  000C4E  15A1               	andwf	(sprintf@flag+1)& (0+255),w,b
  7342  000C50  6F96               	movwf	(??_sprintf+1)& (0+255),b
  7343  000C52  5195               	movf	??_sprintf& (0+255),w,b
  7344  000C54  1196               	iorwf	(??_sprintf+1)& (0+255),w,b
  7345  000C56  B4D8               	btfsc	status,2,c
  7346  000C58  D050               	goto	l1492
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  7350  000C5A  C08B  FFD9         	movff	sprintf@sp,fsr2l
  7351  000C5E  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  7352  000C62  0E2D               	movlw	45
  7353  000C64  D047               	goto	L2
  7354  000C66                     
  7355                           ; BSR set to: 0
  7356                           ;doprnt.c: 1200: {
  7357                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7358                           
  7359                           ; BSR set to: 0
  7360  000C66  C0A8  F023         	movff	sprintf@val,___lldiv@dividend
  7361  000C6A  C0A9  F024         	movff	sprintf@val+1,___lldiv@dividend+1
  7362  000C6E  C0AA  F025         	movff	sprintf@val+2,___lldiv@dividend+2
  7363  000C72  C0AB  F026         	movff	sprintf@val+3,___lldiv@dividend+3
  7364  000C76  51B1               	movf	sprintf@c& (0+255),w,b
  7365  000C78  0D04               	mullw	4
  7366  000C7A  0EF5               	movlw	low _dpowers
  7367  000C7C  24F3               	addwf	prodl,w,c
  7368  000C7E  6EF6               	movwf	tblptrl,c
  7369  000C80  0E60               	movlw	high _dpowers
  7370  000C82  20F4               	addwfc	prodh,w,c
  7371  000C84  6EF7               	movwf	tblptrh,c
  7372  000C86                     	if	0	;There are less than 3 active tblptr bytes
  7373  000C86                     	endif
  7374  000C86  0009               	tblrd		*+
  7375  000C88  CFF5 F027          	movff	tablat,___lldiv@divisor
  7376  000C8C  0009               	tblrd		*+
  7377  000C8E  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7378  000C92  0009               	tblrd		*+
  7379  000C94  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7380  000C98  000A               	tblrd		*-
  7381  000C9A  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7382  000C9E  EC6E  F023         	call	___lldiv	;wreg free
  7383  000CA2  C023  F0A4         	movff	?___lldiv,sprintf@tmpval
  7384  000CA6  C024  F0A5         	movff	?___lldiv+1,sprintf@tmpval+1
  7385  000CAA  C025  F0A6         	movff	?___lldiv+2,sprintf@tmpval+2
  7386  000CAE  C026  F0A7         	movff	?___lldiv+3,sprintf@tmpval+3
  7387                           
  7388                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7389  000CB2  C0A4  F01A         	movff	sprintf@tmpval,___llmod@dividend
  7390  000CB6  C0A5  F01B         	movff	sprintf@tmpval+1,___llmod@dividend+1
  7391  000CBA  C0A6  F01C         	movff	sprintf@tmpval+2,___llmod@dividend+2
  7392  000CBE  C0A7  F01D         	movff	sprintf@tmpval+3,___llmod@dividend+3
  7393  000CC2  0E0A               	movlw	10
  7394  000CC4  6E1E               	movwf	___llmod@divisor,c
  7395  000CC6  0E00               	movlw	0
  7396  000CC8  6E1F               	movwf	___llmod@divisor+1,c
  7397  000CCA  0E00               	movlw	0
  7398  000CCC  6E20               	movwf	___llmod@divisor+2,c
  7399  000CCE  0E00               	movlw	0
  7400  000CD0  6E21               	movwf	___llmod@divisor+3,c
  7401  000CD2  EC71  F025         	call	___llmod	;wreg free
  7402  000CD6  C01A  F0A4         	movff	?___llmod,sprintf@tmpval
  7403  000CDA  C01B  F0A5         	movff	?___llmod+1,sprintf@tmpval+1
  7404  000CDE  C01C  F0A6         	movff	?___llmod+2,sprintf@tmpval+2
  7405  000CE2  C01D  F0A7         	movff	?___llmod+3,sprintf@tmpval+3
  7406                           
  7407                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  7408  000CE6  0100               	movlb	0	; () banked
  7409  000CE8  51A4               	movf	sprintf@tmpval& (0+255),w,b
  7410  000CEA  0F30               	addlw	48
  7411  000CEC  C08B  FFD9         	movff	sprintf@sp,fsr2l
  7412  000CF0  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  7413  000CF4                     L2:
  7414  000CF4  6EDF               	movwf	indf2,c
  7415                           
  7416                           ; BSR set to: 0
  7417  000CF6  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  7418  000CF8  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  7419  000CFA                     l1492:
  7420                           
  7421                           ; BSR set to: 0
  7422                           
  7423                           ; BSR set to: 0
  7424  000CFA  07B1               	decf	sprintf@c& (0+255),f,b
  7425  000CFC  29B1               	incf	sprintf@c& (0+255),w,b
  7426  000CFE  B4D8               	btfsc	status,2,c
  7427  000D00  D00C               	goto	l1495
  7428  000D02  D7B1               	goto	l1493
  7429  000D04                     l12244:
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  7433  000D04  C08B  FFD9         	movff	sprintf@sp,fsr2l
  7434  000D08  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  7435  000D0C  0E30               	movlw	48
  7436  000D0E  6EDF               	movwf	indf2,c
  7437                           
  7438                           ; BSR set to: 0
  7439  000D10  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  7440  000D12  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;doprnt.c: 1209: exp--;
  7444  000D14  07A2               	decf	sprintf@exp& (0+255),f,b
  7445  000D16  A0D8               	btfss	status,0,c
  7446  000D18  07A3               	decf	(sprintf@exp+1)& (0+255),f,b
  7447  000D1A                     l1495:
  7448                           
  7449                           ; BSR set to: 0
  7450                           
  7451                           ; BSR set to: 0
  7452  000D1A  BFA3               	btfsc	(sprintf@exp+1)& (0+255),7,b
  7453  000D1C  D005               	goto	u15570
  7454  000D1E  51A3               	movf	(sprintf@exp+1)& (0+255),w,b
  7455  000D20  E1F1               	bnz	l12244
  7456  000D22  05A2               	decf	sprintf@exp& (0+255),w,b
  7457  000D24  B0D8               	btfsc	status,0,c
  7458  000D26  D7EE               	goto	l1496
  7459  000D28                     u15570:
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;doprnt.c: 1210: }
  7463                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7464                           
  7465                           ; BSR set to: 0
  7466  000D28  BFAD               	btfsc	(sprintf@prec+1)& (0+255),7,b
  7467  000D2A  D009               	goto	l1498
  7468  000D2C  51AD               	movf	(sprintf@prec+1)& (0+255),w,b
  7469  000D2E  E104               	bnz	u15580
  7470  000D30  0E09               	movlw	9
  7471  000D32  5DAC               	subwf	sprintf@prec& (0+255),w,b
  7472  000D34  A0D8               	btfss	status,0,c
  7473  000D36  D003               	goto	l1498
  7474  000D38                     u15580:
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7478  000D38  0E08               	movlw	8
  7479  000D3A  6FB1               	movwf	sprintf@c& (0+255),b
  7480  000D3C  D002               	goto	l1499
  7481  000D3E                     l1498:
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;doprnt.c: 1213: else
  7485                           ;doprnt.c: 1214: c = prec;
  7486  000D3E  C0AC  F0B1         	movff	sprintf@prec,sprintf@c
  7487  000D42                     l1499:
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;doprnt.c: 1215: prec -= c;
  7491                           
  7492                           ; BSR set to: 0
  7493  000D42  51B1               	movf	sprintf@c& (0+255),w,b
  7494  000D44  5FAC               	subwf	sprintf@prec& (0+255),f,b
  7495  000D46  0E00               	movlw	0
  7496  000D48  BFB1               	btfsc	sprintf@c& (0+255),7,b
  7497  000D4A  0EFF               	movlw	255
  7498  000D4C  5BAD               	subwfb	(sprintf@prec+1)& (0+255),f,b
  7499                           
  7500                           ; BSR set to: 0
  7501                           ;doprnt.c: 1219: if(c)
  7502  000D4E  51B1               	movf	sprintf@c& (0+255),w,b
  7503  000D50  B4D8               	btfsc	status,2,c
  7504  000D52  D008               	goto	l1500
  7505                           
  7506                           ; BSR set to: 0
  7507                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  7508  000D54  C08B  FFD9         	movff	sprintf@sp,fsr2l
  7509  000D58  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  7510  000D5C  0E2E               	movlw	46
  7511  000D5E  6EDF               	movwf	indf2,c
  7512                           
  7513                           ; BSR set to: 0
  7514  000D60  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  7515  000D62  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  7516  000D64                     l1500:
  7517                           
  7518                           ; BSR set to: 0
  7519                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7520                           
  7521                           ; BSR set to: 0
  7522  000D64  51B1               	movf	sprintf@c& (0+255),w,b
  7523  000D66  ECC1  F00C         	call	_scale
  7524  000D6A  C06F  F09B         	movff	?_scale,_sprintf$3880
  7525  000D6E  C070  F09C         	movff	?_scale+1,_sprintf$3880+1
  7526  000D72  C071  F09D         	movff	?_scale+2,_sprintf$3880+2
  7527                           
  7528                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7529  000D76  C0AE  F063         	movff	sprintf@fval,___ftmul@f2
  7530  000D7A  C0AF  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  7531  000D7E  C0B0  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  7532  000D82  C09B  F060         	movff	_sprintf$3880,___ftmul@f1
  7533  000D86  C09C  F061         	movff	_sprintf$3880+1,___ftmul@f1+1
  7534  000D8A  C09D  F062         	movff	_sprintf$3880+2,___ftmul@f1+2
  7535  000D8E  EC77  F01F         	call	___ftmul	;wreg free
  7536  000D92  C060  F076         	movff	?___ftmul,___fttol@f1
  7537  000D96  C061  F077         	movff	?___ftmul+1,___fttol@f1+1
  7538  000D9A  C062  F078         	movff	?___ftmul+2,___fttol@f1+2
  7539  000D9E  ECFB  F01E         	call	___fttol	;wreg free
  7540  000DA2  C076  F0A8         	movff	?___fttol,sprintf@val
  7541  000DA6  C077  F0A9         	movff	?___fttol+1,sprintf@val+1
  7542  000DAA  C078  F0AA         	movff	?___fttol+2,sprintf@val+2
  7543  000DAE  C079  F0AB         	movff	?___fttol+3,sprintf@val+3
  7544                           
  7545                           ;doprnt.c: 1228: while(c--) {
  7546  000DB2  D071               	goto	l1501
  7547  000DB4                     
  7548                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7549  000DB4  C0A8  F023         	movff	sprintf@val,___lldiv@dividend
  7550  000DB8  C0A9  F024         	movff	sprintf@val+1,___lldiv@dividend+1
  7551  000DBC  C0AA  F025         	movff	sprintf@val+2,___lldiv@dividend+2
  7552  000DC0  C0AB  F026         	movff	sprintf@val+3,___lldiv@dividend+3
  7553  000DC4  0100               	movlb	0	; () banked
  7554  000DC6  51B1               	movf	sprintf@c& (0+255),w,b
  7555  000DC8  0D04               	mullw	4
  7556  000DCA  0EF5               	movlw	low _dpowers
  7557  000DCC  24F3               	addwf	prodl,w,c
  7558  000DCE  6EF6               	movwf	tblptrl,c
  7559  000DD0  0E60               	movlw	high _dpowers
  7560  000DD2  20F4               	addwfc	prodh,w,c
  7561  000DD4  6EF7               	movwf	tblptrh,c
  7562  000DD6                     	if	0	;There are less than 3 active tblptr bytes
  7563  000DD6                     	endif
  7564  000DD6  0009               	tblrd		*+
  7565  000DD8  CFF5 F027          	movff	tablat,___lldiv@divisor
  7566  000DDC  0009               	tblrd		*+
  7567  000DDE  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7568  000DE2  0009               	tblrd		*+
  7569  000DE4  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7570  000DE8  000A               	tblrd		*-
  7571  000DEA  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7572  000DEE  EC6E  F023         	call	___lldiv	;wreg free
  7573  000DF2  C023  F0A4         	movff	?___lldiv,sprintf@tmpval
  7574  000DF6  C024  F0A5         	movff	?___lldiv+1,sprintf@tmpval+1
  7575  000DFA  C025  F0A6         	movff	?___lldiv+2,sprintf@tmpval+2
  7576  000DFE  C026  F0A7         	movff	?___lldiv+3,sprintf@tmpval+3
  7577                           
  7578                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7579  000E02  C0A4  F01A         	movff	sprintf@tmpval,___llmod@dividend
  7580  000E06  C0A5  F01B         	movff	sprintf@tmpval+1,___llmod@dividend+1
  7581  000E0A  C0A6  F01C         	movff	sprintf@tmpval+2,___llmod@dividend+2
  7582  000E0E  C0A7  F01D         	movff	sprintf@tmpval+3,___llmod@dividend+3
  7583  000E12  0E0A               	movlw	10
  7584  000E14  6E1E               	movwf	___llmod@divisor,c
  7585  000E16  0E00               	movlw	0
  7586  000E18  6E1F               	movwf	___llmod@divisor+1,c
  7587  000E1A  0E00               	movlw	0
  7588  000E1C  6E20               	movwf	___llmod@divisor+2,c
  7589  000E1E  0E00               	movlw	0
  7590  000E20  6E21               	movwf	___llmod@divisor+3,c
  7591  000E22  EC71  F025         	call	___llmod	;wreg free
  7592  000E26  C01A  F0A4         	movff	?___llmod,sprintf@tmpval
  7593  000E2A  C01B  F0A5         	movff	?___llmod+1,sprintf@tmpval+1
  7594  000E2E  C01C  F0A6         	movff	?___llmod+2,sprintf@tmpval+2
  7595  000E32  C01D  F0A7         	movff	?___llmod+3,sprintf@tmpval+3
  7596                           
  7597                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  7598  000E36  0100               	movlb	0	; () banked
  7599  000E38  51A4               	movf	sprintf@tmpval& (0+255),w,b
  7600  000E3A  0F30               	addlw	48
  7601  000E3C  C08B  FFD9         	movff	sprintf@sp,fsr2l
  7602  000E40  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  7603  000E44  6EDF               	movwf	indf2,c
  7604                           
  7605                           ; BSR set to: 0
  7606  000E46  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  7607  000E48  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;doprnt.c: 1232: val %= dpowers[c];
  7611  000E4A  C0A8  F01A         	movff	sprintf@val,___llmod@dividend
  7612  000E4E  C0A9  F01B         	movff	sprintf@val+1,___llmod@dividend+1
  7613  000E52  C0AA  F01C         	movff	sprintf@val+2,___llmod@dividend+2
  7614  000E56  C0AB  F01D         	movff	sprintf@val+3,___llmod@dividend+3
  7615  000E5A  51B1               	movf	sprintf@c& (0+255),w,b
  7616  000E5C  0D04               	mullw	4
  7617  000E5E  0EF5               	movlw	low _dpowers
  7618  000E60  24F3               	addwf	prodl,w,c
  7619  000E62  6EF6               	movwf	tblptrl,c
  7620  000E64  0E60               	movlw	high _dpowers
  7621  000E66  20F4               	addwfc	prodh,w,c
  7622  000E68  6EF7               	movwf	tblptrh,c
  7623  000E6A                     	if	0	;There are less than 3 active tblptr bytes
  7624  000E6A                     	endif
  7625  000E6A  0009               	tblrd		*+
  7626  000E6C  CFF5 F01E          	movff	tablat,___llmod@divisor
  7627  000E70  0009               	tblrd		*+
  7628  000E72  CFF5 F01F          	movff	tablat,___llmod@divisor+1
  7629  000E76  0009               	tblrd		*+
  7630  000E78  CFF5 F020          	movff	tablat,___llmod@divisor+2
  7631  000E7C  000A               	tblrd		*-
  7632  000E7E  CFF5 F021          	movff	tablat,___llmod@divisor+3
  7633  000E82  EC71  F025         	call	___llmod	;wreg free
  7634  000E86  C01A  F0A8         	movff	?___llmod,sprintf@val
  7635  000E8A  C01B  F0A9         	movff	?___llmod+1,sprintf@val+1
  7636  000E8E  C01C  F0AA         	movff	?___llmod+2,sprintf@val+2
  7637  000E92  C01D  F0AB         	movff	?___llmod+3,sprintf@val+3
  7638  000E96                     l1501:
  7639  000E96  0100               	movlb	0	; () banked
  7640  000E98  07B1               	decf	sprintf@c& (0+255),f,b
  7641  000E9A  29B1               	incf	sprintf@c& (0+255),w,b
  7642  000E9C  B4D8               	btfsc	status,2,c
  7643  000E9E  D00C               	goto	l1504
  7644  000EA0  D789               	goto	l1502
  7645  000EA2                     
  7646                           ; BSR set to: 0
  7647                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  7648                           
  7649                           ; BSR set to: 0
  7650  000EA2  C08B  FFD9         	movff	sprintf@sp,fsr2l
  7651  000EA6  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  7652  000EAA  0E30               	movlw	48
  7653  000EAC  6EDF               	movwf	indf2,c
  7654                           
  7655                           ; BSR set to: 0
  7656  000EAE  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  7657  000EB0  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;doprnt.c: 1237: prec--;
  7661  000EB2  07AC               	decf	sprintf@prec& (0+255),f,b
  7662  000EB4  A0D8               	btfss	status,0,c
  7663  000EB6  07AD               	decf	(sprintf@prec+1)& (0+255),f,b
  7664  000EB8                     l1504:
  7665                           
  7666                           ; BSR set to: 0
  7667                           
  7668                           ; BSR set to: 0
  7669  000EB8  51AC               	movf	sprintf@prec& (0+255),w,b
  7670  000EBA  11AD               	iorwf	(sprintf@prec+1)& (0+255),w,b
  7671  000EBC  B4D8               	btfsc	status,2,c
  7672  000EBE  D0C3               	goto	u15710
  7673  000EC0  D7F0               	goto	l1505
  7674  000EC2                     l1469:
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;doprnt.c: 1246: }
  7678                           ;doprnt.c: 1253: {
  7679                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7680                           
  7681                           ; BSR set to: 0
  7682  000EC2  C09E  FFD9         	movff	sprintf@ap,fsr2l
  7683  000EC6  C09F  FFDA         	movff	sprintf@ap+1,fsr2h
  7684  000ECA  CFDE F0A8          	movff	postinc2,sprintf@val
  7685  000ECE  CFDD F0A9          	movff	postdec2,sprintf@val+1
  7686  000ED2  0E00               	movlw	0
  7687  000ED4  BFA9               	btfsc	(sprintf@val+1)& (0+255),7,b
  7688  000ED6  0EFF               	movlw	-1
  7689  000ED8  6FAA               	movwf	(sprintf@val+2)& (0+255),b
  7690  000EDA  6FAB               	movwf	(sprintf@val+3)& (0+255),b
  7691                           
  7692                           ; BSR set to: 0
  7693  000EDC  0E02               	movlw	2
  7694  000EDE  279E               	addwf	sprintf@ap& (0+255),f,b
  7695  000EE0  0E00               	movlw	0
  7696  000EE2  239F               	addwfc	(sprintf@ap+1)& (0+255),f,b
  7697                           
  7698                           ; BSR set to: 0
  7699                           ;doprnt.c: 1261: if((long)val < 0) {
  7700  000EE4  AFAB               	btfss	(sprintf@val+3)& (0+255),7,b
  7701  000EE6  D00A               	goto	l1507
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;doprnt.c: 1262: flag |= 0x03;
  7705  000EE8  0E03               	movlw	3
  7706  000EEA  13A0               	iorwf	sprintf@flag& (0+255),f,b
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;doprnt.c: 1263: val = -val;
  7710  000EEC  1FAB               	comf	(sprintf@val+3)& (0+255),f,b
  7711  000EEE  1FAA               	comf	(sprintf@val+2)& (0+255),f,b
  7712  000EF0  1FA9               	comf	(sprintf@val+1)& (0+255),f,b
  7713  000EF2  6DA8               	negf	sprintf@val& (0+255),b
  7714  000EF4  0E00               	movlw	0
  7715  000EF6  23A9               	addwfc	(sprintf@val+1)& (0+255),f,b
  7716  000EF8  23AA               	addwfc	(sprintf@val+2)& (0+255),f,b
  7717  000EFA  23AB               	addwfc	(sprintf@val+3)& (0+255),f,b
  7718  000EFC                     l1507:
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;doprnt.c: 1264: }
  7722                           ;doprnt.c: 1266: }
  7723                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7724                           
  7725                           ; BSR set to: 0
  7726  000EFC  51AC               	movf	sprintf@prec& (0+255),w,b
  7727  000EFE  11AD               	iorwf	(sprintf@prec+1)& (0+255),w,b
  7728  000F00  A4D8               	btfss	status,2,c
  7729  000F02  D008               	goto	l1508
  7730                           
  7731                           ; BSR set to: 0
  7732  000F04  51A8               	movf	sprintf@val& (0+255),w,b
  7733  000F06  11A9               	iorwf	(sprintf@val+1)& (0+255),w,b
  7734  000F08  11AA               	iorwf	(sprintf@val+2)& (0+255),w,b
  7735  000F0A  11AB               	iorwf	(sprintf@val+3)& (0+255),w,b
  7736  000F0C  A4D8               	btfss	status,2,c
  7737  000F0E  D002               	goto	l1508
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;doprnt.c: 1291: prec++;
  7741  000F10  4BAC               	infsnz	sprintf@prec& (0+255),f,b
  7742  000F12  2BAD               	incf	(sprintf@prec+1)& (0+255),f,b
  7743  000F14                     l1508:
  7744                           
  7745                           ; BSR set to: 0
  7746                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7747                           
  7748                           ; BSR set to: 0
  7749  000F14  0E01               	movlw	1
  7750  000F16  6FB1               	movwf	sprintf@c& (0+255),b
  7751  000F18                     l12306:
  7752                           
  7753                           ; BSR set to: 0
  7754  000F18  0E0A               	movlw	10
  7755  000F1A  19B1               	xorwf	sprintf@c& (0+255),w,b
  7756  000F1C  B4D8               	btfsc	status,2,c
  7757  000F1E  D018               	goto	u15670
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;doprnt.c: 1306: if(val < dpowers[c])
  7761                           
  7762                           ; BSR set to: 0
  7763                           
  7764                           ; BSR set to: 0
  7765  000F20  51B1               	movf	sprintf@c& (0+255),w,b
  7766  000F22  0D04               	mullw	4
  7767  000F24  0EF5               	movlw	low _dpowers
  7768  000F26  24F3               	addwf	prodl,w,c
  7769  000F28  6EF6               	movwf	tblptrl,c
  7770  000F2A  0E60               	movlw	high _dpowers
  7771  000F2C  20F4               	addwfc	prodh,w,c
  7772  000F2E  6EF7               	movwf	tblptrh,c
  7773  000F30                     	if	0	;There are less than 3 active tblptr bytes
  7774  000F30                     	endif
  7775  000F30  0009               	tblrd		*+
  7776  000F32  50F5               	movf	tablat,w,c
  7777  000F34  5DA8               	subwf	sprintf@val& (0+255),w,b
  7778  000F36  0009               	tblrd		*+
  7779  000F38  50F5               	movf	tablat,w,c
  7780  000F3A  59A9               	subwfb	(sprintf@val+1)& (0+255),w,b
  7781  000F3C  0009               	tblrd		*+
  7782  000F3E  50F5               	movf	tablat,w,c
  7783  000F40  59AA               	subwfb	(sprintf@val+2)& (0+255),w,b
  7784  000F42  0009               	tblrd		*+
  7785  000F44  50F5               	movf	tablat,w,c
  7786  000F46  59AB               	subwfb	(sprintf@val+3)& (0+255),w,b
  7787  000F48  A0D8               	btfss	status,0,c
  7788  000F4A  D002               	goto	u15670
  7789                           
  7790                           ; BSR set to: 0
  7791                           
  7792                           ; BSR set to: 0
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;doprnt.c: 1307: break;
  7796  000F4C  2BB1               	incf	sprintf@c& (0+255),f,b
  7797  000F4E  D7E4               	goto	l12306
  7798  000F50                     u15670:
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;doprnt.c: 1339: if(c < prec)
  7802                           
  7803                           ; BSR set to: 0
  7804  000F50  0E80               	movlw	128
  7805  000F52  BFB1               	btfsc	sprintf@c& (0+255),7,b
  7806  000F54  0E7F               	movlw	127
  7807  000F56  6F95               	movwf	??_sprintf& (0+255),b
  7808  000F58  51AC               	movf	sprintf@prec& (0+255),w,b
  7809  000F5A  5DB1               	subwf	sprintf@c& (0+255),w,b
  7810  000F5C  51AD               	movf	(sprintf@prec+1)& (0+255),w,b
  7811  000F5E  0A80               	xorlw	128
  7812  000F60  5995               	subwfb	??_sprintf& (0+255),w,b
  7813  000F62  B0D8               	btfsc	status,0,c
  7814  000F64  D003               	goto	l1512
  7815                           
  7816                           ; BSR set to: 0
  7817                           ;doprnt.c: 1340: c = prec;
  7818  000F66  C0AC  F0B1         	movff	sprintf@prec,sprintf@c
  7819  000F6A  D010               	goto	l1514
  7820  000F6C                     l1512:
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;doprnt.c: 1341: else if(prec < c)
  7824                           
  7825                           ; BSR set to: 0
  7826  000F6C  51AD               	movf	(sprintf@prec+1)& (0+255),w,b
  7827  000F6E  0A80               	xorlw	128
  7828  000F70  6F95               	movwf	??_sprintf& (0+255),b
  7829  000F72  51B1               	movf	sprintf@c& (0+255),w,b
  7830  000F74  5DAC               	subwf	sprintf@prec& (0+255),w,b
  7831  000F76  0E80               	movlw	128
  7832  000F78  BFB1               	btfsc	sprintf@c& (0+255),7,b
  7833  000F7A  0E7F               	movlw	127
  7834  000F7C  5995               	subwfb	??_sprintf& (0+255),w,b
  7835  000F7E  B0D8               	btfsc	status,0,c
  7836  000F80  D005               	goto	l1514
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;doprnt.c: 1342: prec = c;
  7840  000F82  51B1               	movf	sprintf@c& (0+255),w,b
  7841  000F84  6FAC               	movwf	sprintf@prec& (0+255),b
  7842  000F86  6BAD               	clrf	(sprintf@prec+1)& (0+255),b
  7843  000F88  BFAC               	btfsc	sprintf@prec& (0+255),7,b
  7844  000F8A  07AD               	decf	(sprintf@prec+1)& (0+255),f,b
  7845  000F8C                     l1514:
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;doprnt.c: 1422: {
  7849                           ;doprnt.c: 1438: if(flag & 0x03)
  7850                           
  7851                           ; BSR set to: 0
  7852                           
  7853                           ; BSR set to: 0
  7854  000F8C  0E03               	movlw	3
  7855  000F8E  15A0               	andwf	sprintf@flag& (0+255),w,b
  7856  000F90  6F95               	movwf	??_sprintf& (0+255),b
  7857  000F92  0E00               	movlw	0
  7858  000F94  15A1               	andwf	(sprintf@flag+1)& (0+255),w,b
  7859  000F96  6F96               	movwf	(??_sprintf+1)& (0+255),b
  7860  000F98  5195               	movf	??_sprintf& (0+255),w,b
  7861  000F9A  1196               	iorwf	(??_sprintf+1)& (0+255),w,b
  7862  000F9C  B4D8               	btfsc	status,2,c
  7863  000F9E  D04B               	goto	l1516
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7867  000FA0  C08B  FFD9         	movff	sprintf@sp,fsr2l
  7868  000FA4  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  7869  000FA8  0E2D               	movlw	45
  7870  000FAA  6EDF               	movwf	indf2,c
  7871  000FAC  D042               	goto	l12336
  7872  000FAE                     l12332:
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;doprnt.c: 1478: {
  7876                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7877  000FAE  C0AC  F095         	movff	sprintf@prec,??_sprintf
  7878  000FB2  C0AD  F096         	movff	sprintf@prec+1,??_sprintf+1
  7879  000FB6  90D8               	bcf	status,0,c
  7880  000FB8  3795               	rlcf	??_sprintf& (0+255),f,b
  7881  000FBA  3796               	rlcf	(??_sprintf+1)& (0+255),f,b
  7882  000FBC  90D8               	bcf	status,0,c
  7883  000FBE  3795               	rlcf	??_sprintf& (0+255),f,b
  7884  000FC0  3796               	rlcf	(??_sprintf+1)& (0+255),f,b
  7885  000FC2  0EF5               	movlw	low _dpowers
  7886  000FC4  2595               	addwf	??_sprintf& (0+255),w,b
  7887  000FC6  6EF6               	movwf	tblptrl,c
  7888  000FC8  0E60               	movlw	high _dpowers
  7889  000FCA  2196               	addwfc	(??_sprintf+1)& (0+255),w,b
  7890  000FCC  6EF7               	movwf	tblptrh,c
  7891  000FCE                     	if	0	;There are less than 3 active tblptr bytes
  7892  000FCE                     	endif
  7893  000FCE  0009               	tblrd		*+
  7894  000FD0  CFF5 F027          	movff	tablat,___lldiv@divisor
  7895  000FD4  0009               	tblrd		*+
  7896  000FD6  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7897  000FDA  0009               	tblrd		*+
  7898  000FDC  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7899  000FE0  000A               	tblrd		*-
  7900  000FE2  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7901  000FE6  C0A8  F023         	movff	sprintf@val,___lldiv@dividend
  7902  000FEA  C0A9  F024         	movff	sprintf@val+1,___lldiv@dividend+1
  7903  000FEE  C0AA  F025         	movff	sprintf@val+2,___lldiv@dividend+2
  7904  000FF2  C0AB  F026         	movff	sprintf@val+3,___lldiv@dividend+3
  7905  000FF6  EC6E  F023         	call	___lldiv	;wreg free
  7906  000FFA  C023  F01A         	movff	?___lldiv,___llmod@dividend
  7907  000FFE  C024  F01B         	movff	?___lldiv+1,___llmod@dividend+1
  7908  001002  C025  F01C         	movff	?___lldiv+2,___llmod@dividend+2
  7909  001006  C026  F01D         	movff	?___lldiv+3,___llmod@dividend+3
  7910  00100A  0E0A               	movlw	10
  7911  00100C  6E1E               	movwf	___llmod@divisor,c
  7912  00100E  0E00               	movlw	0
  7913  001010  6E1F               	movwf	___llmod@divisor+1,c
  7914  001012  0E00               	movlw	0
  7915  001014  6E20               	movwf	___llmod@divisor+2,c
  7916  001016  0E00               	movlw	0
  7917  001018  6E21               	movwf	___llmod@divisor+3,c
  7918  00101A  EC71  F025         	call	___llmod	;wreg free
  7919  00101E  501A               	movf	?___llmod,w,c
  7920  001020  0F30               	addlw	48
  7921  001022  0100               	movlb	0	; () banked
  7922  001024  6FB1               	movwf	sprintf@c& (0+255),b
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;doprnt.c: 1523: }
  7926                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7927  001026  C08B  FFD9         	movff	sprintf@sp,fsr2l
  7928  00102A  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  7929  00102E  C0B1  FFDF         	movff	sprintf@c,indf2
  7930  001032                     l12336:
  7931                           
  7932                           ; BSR set to: 0
  7933  001032  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  7934  001034  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  7935  001036                     l1516:
  7936                           
  7937                           ; BSR set to: 0
  7938                           
  7939                           ; BSR set to: 0
  7940  001036  07AC               	decf	sprintf@prec& (0+255),f,b
  7941  001038  A0D8               	btfss	status,0,c
  7942  00103A  07AD               	decf	(sprintf@prec+1)& (0+255),f,b
  7943  00103C  29AC               	incf	sprintf@prec& (0+255),w,b
  7944  00103E  E1B7               	bnz	l12332
  7945  001040  29AD               	incf	(sprintf@prec+1)& (0+255),w,b
  7946  001042  A4D8               	btfss	status,2,c
  7947  001044  D7B4               	goto	l1517
  7948  001046                     u15710:
  7949                           
  7950                           ; BSR set to: 0
  7951                           
  7952                           ; BSR set to: 0
  7953                           
  7954                           ; BSR set to: 0
  7955  001046  C08D  FFF6         	movff	sprintf@f,tblptrl
  7956  00104A  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  7957  00104E  4B8D               	infsnz	sprintf@f& (0+255),f,b
  7958  001050  2B8E               	incf	(sprintf@f+1)& (0+255),f,b
  7959  001052                     	if	0	;tblptru may be non-zero
  7960  001052                     	endif
  7961  001052                     	if	0	;tblptru may be non-zero
  7962  001052                     	endif
  7963  001052  0008               	tblrd		*
  7964  001054  CFF5 F0B1          	movff	tablat,sprintf@c
  7965  001058  51B1               	movf	sprintf@c& (0+255),w,b
  7966  00105A  A4D8               	btfss	status,2,c
  7967  00105C  EF2C  F004         	goto	l1454
  7968  001060                     u15720:
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;doprnt.c: 1538: *sp = 0;
  7972                           
  7973                           ; BSR set to: 0
  7974                           
  7975                           ;doprnt.c: 1525: }
  7976                           ;doprnt.c: 1533: }
  7977                           ;doprnt.c: 1535: alldone:
  7978                           
  7979                           ; BSR set to: 0
  7980  001060  C08B  FFD9         	movff	sprintf@sp,fsr2l
  7981  001064  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  7982  001068  0E00               	movlw	0
  7983  00106A  6EDF               	movwf	indf2,c
  7984  00106C  0012               	return	
  7985  00106E                     __end_of_sprintf:
  7986                           	opt stack 0
  7987                           tosu	equ	0xFFF
  7988                           tosh	equ	0xFFE
  7989                           tosl	equ	0xFFD
  7990                           pclath	equ	0xFFA
  7991                           tblptru	equ	0xFF8
  7992                           tblptrh	equ	0xFF7
  7993                           tblptrl	equ	0xFF6
  7994                           tablat	equ	0xFF5
  7995                           prodh	equ	0xFF4
  7996                           prodl	equ	0xFF3
  7997                           intcon	equ	0xFF2
  7998                           intcon2	equ	0xFF1
  7999                           intcon3	equ	0xFF0
  8000                           postinc0	equ	0xFEE
  8001                           wreg	equ	0xFE8
  8002                           indf1	equ	0xFE7
  8003                           postinc1	equ	0xFE6
  8004                           postdec1	equ	0xFE5
  8005                           fsr1h	equ	0xFE2
  8006                           fsr1l	equ	0xFE1
  8007                           indf2	equ	0xFDF
  8008                           postinc2	equ	0xFDE
  8009                           postdec2	equ	0xFDD
  8010                           fsr2h	equ	0xFDA
  8011                           fsr2l	equ	0xFD9
  8012                           status	equ	0xFD8
  8013                           
  8014 ;; *************** function _scale *****************
  8015 ;; Defined at:
  8016 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;  scl             1    wreg     char 
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;  scl             1   21[BANK0 ] char 
  8021 ;; Return value:  Size  Location     Type
  8022 ;;                  3   15[BANK0 ] char 
  8023 ;; Registers used:
  8024 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8025 ;; Tracked objects:
  8026 ;;		On entry : 0/0
  8027 ;;		On exit  : 0/0
  8028 ;;		Unchanged: 0/0
  8029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8030 ;;      Params:         0       3       0       0       0       0       0       0       0
  8031 ;;      Locals:         0       4       0       0       0       0       0       0       0
  8032 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8033 ;;      Totals:         0       7       0       0       0       0       0       0       0
  8034 ;;Total ram usage:        7 bytes
  8035 ;; Hardware stack levels used:    1
  8036 ;; Hardware stack levels required when called:    4
  8037 ;; This function calls:
  8038 ;;		___awdiv
  8039 ;;		___awmod
  8040 ;;		___ftmul
  8041 ;;		___wmul
  8042 ;; This function is called by:
  8043 ;;		_sprintf
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           	psect	text31
  8048  001982                     __ptext31:
  8049                           	opt stack 0
  8050  001982                     _scale:
  8051                           	opt stack 23
  8052                           
  8053                           ; BSR set to: 0
  8054                           ;incstack = 0
  8055                           ;scale@scl stored from wreg
  8056  001982  0100               	movlb	0	; () banked
  8057  001984  6F75               	movwf	scale@scl& (0+255),b
  8058                           
  8059                           ;doprnt.c: 428: if(scl < 0) {
  8060  001986  0100               	movlb	0	; () banked
  8061  001988  AF75               	btfss	scale@scl& (0+255),7,b
  8062  00198A  D106               	goto	l1443
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;doprnt.c: 429: scl = -scl;
  8066  00198C  6D75               	negf	scale@scl& (0+255),b
  8067                           
  8068                           ;doprnt.c: 430: if(scl>=110)
  8069  00198E  5175               	movf	scale@scl& (0+255),w,b
  8070  001990  0A80               	xorlw	128
  8071  001992  0F12               	addlw	-238
  8072  001994  A0D8               	btfss	status,0,c
  8073  001996  D093               	goto	l1444
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8077  001998  0E00               	movlw	0
  8078  00199A  6E2B               	movwf	___wmul@multiplicand+1,c
  8079  00199C  0E03               	movlw	3
  8080  00199E  6E2A               	movwf	___wmul@multiplicand,c
  8081  0019A0  0E00               	movlw	0
  8082  0019A2  6E23               	movwf	___awdiv@divisor+1,c
  8083  0019A4  0E0A               	movlw	10
  8084  0019A6  6E22               	movwf	___awdiv@divisor,c
  8085  0019A8  0E00               	movlw	0
  8086  0019AA  6E1D               	movwf	___awmod@divisor+1,c
  8087  0019AC  0E64               	movlw	100
  8088  0019AE  6E1C               	movwf	___awmod@divisor,c
  8089  0019B0  5175               	movf	scale@scl& (0+255),w,b
  8090  0019B2  6E1A               	movwf	___awmod@dividend,c
  8091  0019B4  6A1B               	clrf	___awmod@dividend+1,c
  8092  0019B6  BE1A               	btfsc	___awmod@dividend,7,c
  8093  0019B8  061B               	decf	___awmod@dividend+1,f,c
  8094  0019BA  EC98  F024         	call	___awmod	;wreg free
  8095  0019BE  C01A  F020         	movff	?___awmod,___awdiv@dividend
  8096  0019C2  C01B  F021         	movff	?___awmod+1,___awdiv@dividend+1
  8097  0019C6  EC2C  F023         	call	___awdiv	;wreg free
  8098  0019CA  0E09               	movlw	9
  8099  0019CC  2420               	addwf	?___awdiv,w,c
  8100  0019CE  6E28               	movwf	___wmul@multiplier,c
  8101  0019D0  0E00               	movlw	0
  8102  0019D2  2021               	addwfc	?___awdiv+1,w,c
  8103  0019D4  6E29               	movwf	___wmul@multiplier+1,c
  8104  0019D6  ECA7  F028         	call	___wmul	;wreg free
  8105  0019DA  0E44               	movlw	low __npowers_
  8106  0019DC  2428               	addwf	?___wmul,w,c
  8107  0019DE  6EF6               	movwf	tblptrl,c
  8108  0019E0  0E61               	movlw	high __npowers_
  8109  0019E2  2029               	addwfc	?___wmul+1,w,c
  8110  0019E4  6EF7               	movwf	tblptrh,c
  8111  0019E6                     	if	0	;There are less than 3 active tblptr bytes
  8112  0019E6                     	endif
  8113  0019E6  0009               	tblrd		*+
  8114  0019E8  CFF5 F063          	movff	tablat,___ftmul@f2
  8115  0019EC  0009               	tblrd		*+
  8116  0019EE  CFF5 F064          	movff	tablat,___ftmul@f2+1
  8117  0019F2  000A               	tblrd		*-
  8118  0019F4  CFF5 F065          	movff	tablat,___ftmul@f2+2
  8119  0019F8  0E00               	movlw	0
  8120  0019FA  6E23               	movwf	___awdiv@divisor+1,c
  8121  0019FC  0E64               	movlw	100
  8122  0019FE  6E22               	movwf	___awdiv@divisor,c
  8123  001A00  0100               	movlb	0	; () banked
  8124  001A02  5175               	movf	scale@scl& (0+255),w,b
  8125  001A04  6E20               	movwf	___awdiv@dividend,c
  8126  001A06  6A21               	clrf	___awdiv@dividend+1,c
  8127  001A08  BE20               	btfsc	___awdiv@dividend,7,c
  8128  001A0A  0621               	decf	___awdiv@dividend+1,f,c
  8129  001A0C  EC2C  F023         	call	___awdiv	;wreg free
  8130  001A10  0E12               	movlw	18
  8131  001A12  2420               	addwf	?___awdiv,w,c
  8132  001A14  6E28               	movwf	___wmul@multiplier,c
  8133  001A16  0E00               	movlw	0
  8134  001A18  2021               	addwfc	?___awdiv+1,w,c
  8135  001A1A  6E29               	movwf	___wmul@multiplier+1,c
  8136  001A1C  0E00               	movlw	0
  8137  001A1E  6E2B               	movwf	___wmul@multiplicand+1,c
  8138  001A20  0E03               	movlw	3
  8139  001A22  6E2A               	movwf	___wmul@multiplicand,c
  8140  001A24  ECA7  F028         	call	___wmul	;wreg free
  8141  001A28  0E44               	movlw	low __npowers_
  8142  001A2A  2428               	addwf	?___wmul,w,c
  8143  001A2C  6EF6               	movwf	tblptrl,c
  8144  001A2E  0E61               	movlw	high __npowers_
  8145  001A30  2029               	addwfc	?___wmul+1,w,c
  8146  001A32  6EF7               	movwf	tblptrh,c
  8147  001A34                     	if	0	;There are less than 3 active tblptr bytes
  8148  001A34                     	endif
  8149  001A34  0009               	tblrd		*+
  8150  001A36  CFF5 F060          	movff	tablat,___ftmul@f1
  8151  001A3A  0009               	tblrd		*+
  8152  001A3C  CFF5 F061          	movff	tablat,___ftmul@f1+1
  8153  001A40  000A               	tblrd		*-
  8154  001A42  CFF5 F062          	movff	tablat,___ftmul@f1+2
  8155  001A46  EC77  F01F         	call	___ftmul	;wreg free
  8156  001A4A  C060  F072         	movff	?___ftmul,_scale$3879
  8157  001A4E  C061  F073         	movff	?___ftmul+1,_scale$3879+1
  8158  001A52  C062  F074         	movff	?___ftmul+2,_scale$3879+2
  8159                           
  8160                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8161  001A56  C072  F060         	movff	_scale$3879,___ftmul@f1
  8162  001A5A  C073  F061         	movff	_scale$3879+1,___ftmul@f1+1
  8163  001A5E  C074  F062         	movff	_scale$3879+2,___ftmul@f1+2
  8164  001A62  0E00               	movlw	0
  8165  001A64  6E2B               	movwf	___wmul@multiplicand+1,c
  8166  001A66  0E03               	movlw	3
  8167  001A68  6E2A               	movwf	___wmul@multiplicand,c
  8168  001A6A  0E00               	movlw	0
  8169  001A6C  6E1D               	movwf	___awmod@divisor+1,c
  8170  001A6E  0E0A               	movlw	10
  8171  001A70  6E1C               	movwf	___awmod@divisor,c
  8172  001A72  0100               	movlb	0	; () banked
  8173  001A74  5175               	movf	scale@scl& (0+255),w,b
  8174  001A76  6E1A               	movwf	___awmod@dividend,c
  8175  001A78  6A1B               	clrf	___awmod@dividend+1,c
  8176  001A7A  BE1A               	btfsc	___awmod@dividend,7,c
  8177  001A7C  061B               	decf	___awmod@dividend+1,f,c
  8178  001A7E  EC98  F024         	call	___awmod	;wreg free
  8179  001A82  C01A  F028         	movff	?___awmod,___wmul@multiplier
  8180  001A86  C01B  F029         	movff	?___awmod+1,___wmul@multiplier+1
  8181  001A8A  ECA7  F028         	call	___wmul	;wreg free
  8182  001A8E  0E44               	movlw	low __npowers_
  8183  001A90  2428               	addwf	?___wmul,w,c
  8184  001A92  6EF6               	movwf	tblptrl,c
  8185  001A94  0E61               	movlw	high __npowers_
  8186  001A96  2029               	addwfc	?___wmul+1,w,c
  8187  001A98  6EF7               	movwf	tblptrh,c
  8188  001A9A                     	if	0	;There are less than 3 active tblptr bytes
  8189  001A9A                     	endif
  8190  001A9A  0009               	tblrd		*+
  8191  001A9C  CFF5 F063          	movff	tablat,___ftmul@f2
  8192  001AA0  0009               	tblrd		*+
  8193  001AA2  CFF5 F064          	movff	tablat,___ftmul@f2+1
  8194  001AA6  000A               	tblrd		*-
  8195  001AA8  CFF5 F065          	movff	tablat,___ftmul@f2+2
  8196  001AAC  EC77  F01F         	call	___ftmul	;wreg free
  8197  001AB0  C060  F06F         	movff	?___ftmul,?_scale
  8198  001AB4  C061  F070         	movff	?___ftmul+1,?_scale+1
  8199  001AB8  C062  F071         	movff	?___ftmul+2,?_scale+2
  8200  001ABC  0012               	return	
  8201  001ABE                     l1444:
  8202                           
  8203                           ;doprnt.c: 432: else if(scl > 10)
  8204  001ABE  0100               	movlb	0	; () banked
  8205  001AC0  5175               	movf	scale@scl& (0+255),w,b
  8206  001AC2  0A80               	xorlw	128
  8207  001AC4  0F75               	addlw	-139
  8208  001AC6  A0D8               	btfss	status,0,c
  8209  001AC8  D054               	goto	l1447
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8213  001ACA  0E00               	movlw	0
  8214  001ACC  6E23               	movwf	___awdiv@divisor+1,c
  8215  001ACE  0E0A               	movlw	10
  8216  001AD0  6E22               	movwf	___awdiv@divisor,c
  8217  001AD2  5175               	movf	scale@scl& (0+255),w,b
  8218  001AD4  6E20               	movwf	___awdiv@dividend,c
  8219  001AD6  6A21               	clrf	___awdiv@dividend+1,c
  8220  001AD8  BE20               	btfsc	___awdiv@dividend,7,c
  8221  001ADA  0621               	decf	___awdiv@dividend+1,f,c
  8222  001ADC  EC2C  F023         	call	___awdiv	;wreg free
  8223  001AE0  0E09               	movlw	9
  8224  001AE2  2420               	addwf	?___awdiv,w,c
  8225  001AE4  6E28               	movwf	___wmul@multiplier,c
  8226  001AE6  0E00               	movlw	0
  8227  001AE8  2021               	addwfc	?___awdiv+1,w,c
  8228  001AEA  6E29               	movwf	___wmul@multiplier+1,c
  8229  001AEC  0E00               	movlw	0
  8230  001AEE  6E2B               	movwf	___wmul@multiplicand+1,c
  8231  001AF0  0E03               	movlw	3
  8232  001AF2  6E2A               	movwf	___wmul@multiplicand,c
  8233  001AF4  ECA7  F028         	call	___wmul	;wreg free
  8234  001AF8  0E44               	movlw	low __npowers_
  8235  001AFA  2428               	addwf	?___wmul,w,c
  8236  001AFC  6EF6               	movwf	tblptrl,c
  8237  001AFE  0E61               	movlw	high __npowers_
  8238  001B00  2029               	addwfc	?___wmul+1,w,c
  8239  001B02  6EF7               	movwf	tblptrh,c
  8240  001B04                     	if	0	;There are less than 3 active tblptr bytes
  8241  001B04                     	endif
  8242  001B04  0009               	tblrd		*+
  8243  001B06  CFF5 F060          	movff	tablat,___ftmul@f1
  8244  001B0A  0009               	tblrd		*+
  8245  001B0C  CFF5 F061          	movff	tablat,___ftmul@f1+1
  8246  001B10  000A               	tblrd		*-
  8247  001B12  CFF5 F062          	movff	tablat,___ftmul@f1+2
  8248  001B16  0E00               	movlw	0
  8249  001B18  6E2B               	movwf	___wmul@multiplicand+1,c
  8250  001B1A  0E03               	movlw	3
  8251  001B1C  6E2A               	movwf	___wmul@multiplicand,c
  8252  001B1E  0E00               	movlw	0
  8253  001B20  6E1D               	movwf	___awmod@divisor+1,c
  8254  001B22  0E0A               	movlw	10
  8255  001B24  6E1C               	movwf	___awmod@divisor,c
  8256  001B26  0100               	movlb	0	; () banked
  8257  001B28  5175               	movf	scale@scl& (0+255),w,b
  8258  001B2A  6E1A               	movwf	___awmod@dividend,c
  8259  001B2C  6A1B               	clrf	___awmod@dividend+1,c
  8260  001B2E  BE1A               	btfsc	___awmod@dividend,7,c
  8261  001B30  061B               	decf	___awmod@dividend+1,f,c
  8262  001B32  EC98  F024         	call	___awmod	;wreg free
  8263  001B36  C01A  F028         	movff	?___awmod,___wmul@multiplier
  8264  001B3A  C01B  F029         	movff	?___awmod+1,___wmul@multiplier+1
  8265  001B3E  ECA7  F028         	call	___wmul	;wreg free
  8266  001B42  0E44               	movlw	low __npowers_
  8267  001B44  2428               	addwf	?___wmul,w,c
  8268  001B46  6EF6               	movwf	tblptrl,c
  8269  001B48  0E61               	movlw	high __npowers_
  8270  001B4A  2029               	addwfc	?___wmul+1,w,c
  8271  001B4C  6EF7               	movwf	tblptrh,c
  8272  001B4E                     	if	0	;There are less than 3 active tblptr bytes
  8273  001B4E                     	endif
  8274  001B4E  0009               	tblrd		*+
  8275  001B50  CFF5 F063          	movff	tablat,___ftmul@f2
  8276  001B54  0009               	tblrd		*+
  8277  001B56  CFF5 F064          	movff	tablat,___ftmul@f2+1
  8278  001B5A  000A               	tblrd		*-
  8279  001B5C  CFF5 F065          	movff	tablat,___ftmul@f2+2
  8280  001B60  EC77  F01F         	call	___ftmul	;wreg free
  8281  001B64  C060  F06F         	movff	?___ftmul,?_scale
  8282  001B68  C061  F070         	movff	?___ftmul+1,?_scale+1
  8283  001B6C  C062  F071         	movff	?___ftmul+2,?_scale+2
  8284  001B70  0012               	return	
  8285  001B72                     l1447:
  8286                           
  8287                           ;doprnt.c: 434: return _npowers_[scl];
  8288  001B72  0100               	movlb	0	; () banked
  8289  001B74  5175               	movf	scale@scl& (0+255),w,b
  8290  001B76  0D03               	mullw	3
  8291  001B78  0E44               	movlw	low __npowers_
  8292  001B7A  24F3               	addwf	prodl,w,c
  8293  001B7C  6EF6               	movwf	tblptrl,c
  8294  001B7E  0E61               	movlw	high __npowers_
  8295  001B80  20F4               	addwfc	prodh,w,c
  8296  001B82  6EF7               	movwf	tblptrh,c
  8297  001B84                     	if	0	;There are less than 3 active tblptr bytes
  8298  001B84                     	endif
  8299  001B84  0009               	tblrd		*+
  8300  001B86  CFF5 F06F          	movff	tablat,?_scale
  8301  001B8A  0009               	tblrd		*+
  8302  001B8C  CFF5 F070          	movff	tablat,?_scale+1
  8303  001B90  000A               	tblrd		*-
  8304  001B92  CFF5 F071          	movff	tablat,?_scale+2
  8305                           
  8306                           ; BSR set to: 0
  8307  001B96  0012               	return	
  8308  001B98                     l1443:
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;doprnt.c: 435: }
  8312                           ;doprnt.c: 436: if(scl>=110)
  8313                           
  8314                           ; BSR set to: 0
  8315  001B98  5175               	movf	scale@scl& (0+255),w,b
  8316  001B9A  0A80               	xorlw	128
  8317  001B9C  0F12               	addlw	-238
  8318  001B9E  A0D8               	btfss	status,0,c
  8319  001BA0  D093               	goto	l1448
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8323  001BA2  0E00               	movlw	0
  8324  001BA4  6E2B               	movwf	___wmul@multiplicand+1,c
  8325  001BA6  0E03               	movlw	3
  8326  001BA8  6E2A               	movwf	___wmul@multiplicand,c
  8327  001BAA  0E00               	movlw	0
  8328  001BAC  6E23               	movwf	___awdiv@divisor+1,c
  8329  001BAE  0E0A               	movlw	10
  8330  001BB0  6E22               	movwf	___awdiv@divisor,c
  8331  001BB2  0E00               	movlw	0
  8332  001BB4  6E1D               	movwf	___awmod@divisor+1,c
  8333  001BB6  0E64               	movlw	100
  8334  001BB8  6E1C               	movwf	___awmod@divisor,c
  8335  001BBA  5175               	movf	scale@scl& (0+255),w,b
  8336  001BBC  6E1A               	movwf	___awmod@dividend,c
  8337  001BBE  6A1B               	clrf	___awmod@dividend+1,c
  8338  001BC0  BE1A               	btfsc	___awmod@dividend,7,c
  8339  001BC2  061B               	decf	___awmod@dividend+1,f,c
  8340  001BC4  EC98  F024         	call	___awmod	;wreg free
  8341  001BC8  C01A  F020         	movff	?___awmod,___awdiv@dividend
  8342  001BCC  C01B  F021         	movff	?___awmod+1,___awdiv@dividend+1
  8343  001BD0  EC2C  F023         	call	___awdiv	;wreg free
  8344  001BD4  0E09               	movlw	9
  8345  001BD6  2420               	addwf	?___awdiv,w,c
  8346  001BD8  6E28               	movwf	___wmul@multiplier,c
  8347  001BDA  0E00               	movlw	0
  8348  001BDC  2021               	addwfc	?___awdiv+1,w,c
  8349  001BDE  6E29               	movwf	___wmul@multiplier+1,c
  8350  001BE0  ECA7  F028         	call	___wmul	;wreg free
  8351  001BE4  0E1D               	movlw	low __powers_
  8352  001BE6  2428               	addwf	?___wmul,w,c
  8353  001BE8  6EF6               	movwf	tblptrl,c
  8354  001BEA  0E61               	movlw	high __powers_
  8355  001BEC  2029               	addwfc	?___wmul+1,w,c
  8356  001BEE  6EF7               	movwf	tblptrh,c
  8357  001BF0                     	if	0	;There are less than 3 active tblptr bytes
  8358  001BF0                     	endif
  8359  001BF0  0009               	tblrd		*+
  8360  001BF2  CFF5 F063          	movff	tablat,___ftmul@f2
  8361  001BF6  0009               	tblrd		*+
  8362  001BF8  CFF5 F064          	movff	tablat,___ftmul@f2+1
  8363  001BFC  000A               	tblrd		*-
  8364  001BFE  CFF5 F065          	movff	tablat,___ftmul@f2+2
  8365  001C02  0E00               	movlw	0
  8366  001C04  6E23               	movwf	___awdiv@divisor+1,c
  8367  001C06  0E64               	movlw	100
  8368  001C08  6E22               	movwf	___awdiv@divisor,c
  8369  001C0A  0100               	movlb	0	; () banked
  8370  001C0C  5175               	movf	scale@scl& (0+255),w,b
  8371  001C0E  6E20               	movwf	___awdiv@dividend,c
  8372  001C10  6A21               	clrf	___awdiv@dividend+1,c
  8373  001C12  BE20               	btfsc	___awdiv@dividend,7,c
  8374  001C14  0621               	decf	___awdiv@dividend+1,f,c
  8375  001C16  EC2C  F023         	call	___awdiv	;wreg free
  8376  001C1A  0E12               	movlw	18
  8377  001C1C  2420               	addwf	?___awdiv,w,c
  8378  001C1E  6E28               	movwf	___wmul@multiplier,c
  8379  001C20  0E00               	movlw	0
  8380  001C22  2021               	addwfc	?___awdiv+1,w,c
  8381  001C24  6E29               	movwf	___wmul@multiplier+1,c
  8382  001C26  0E00               	movlw	0
  8383  001C28  6E2B               	movwf	___wmul@multiplicand+1,c
  8384  001C2A  0E03               	movlw	3
  8385  001C2C  6E2A               	movwf	___wmul@multiplicand,c
  8386  001C2E  ECA7  F028         	call	___wmul	;wreg free
  8387  001C32  0E1D               	movlw	low __powers_
  8388  001C34  2428               	addwf	?___wmul,w,c
  8389  001C36  6EF6               	movwf	tblptrl,c
  8390  001C38  0E61               	movlw	high __powers_
  8391  001C3A  2029               	addwfc	?___wmul+1,w,c
  8392  001C3C  6EF7               	movwf	tblptrh,c
  8393  001C3E                     	if	0	;There are less than 3 active tblptr bytes
  8394  001C3E                     	endif
  8395  001C3E  0009               	tblrd		*+
  8396  001C40  CFF5 F060          	movff	tablat,___ftmul@f1
  8397  001C44  0009               	tblrd		*+
  8398  001C46  CFF5 F061          	movff	tablat,___ftmul@f1+1
  8399  001C4A  000A               	tblrd		*-
  8400  001C4C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  8401  001C50  EC77  F01F         	call	___ftmul	;wreg free
  8402  001C54  C060  F072         	movff	?___ftmul,_scale$3879
  8403  001C58  C061  F073         	movff	?___ftmul+1,_scale$3879+1
  8404  001C5C  C062  F074         	movff	?___ftmul+2,_scale$3879+2
  8405                           
  8406                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8407  001C60  C072  F060         	movff	_scale$3879,___ftmul@f1
  8408  001C64  C073  F061         	movff	_scale$3879+1,___ftmul@f1+1
  8409  001C68  C074  F062         	movff	_scale$3879+2,___ftmul@f1+2
  8410  001C6C  0E00               	movlw	0
  8411  001C6E  6E2B               	movwf	___wmul@multiplicand+1,c
  8412  001C70  0E03               	movlw	3
  8413  001C72  6E2A               	movwf	___wmul@multiplicand,c
  8414  001C74  0E00               	movlw	0
  8415  001C76  6E1D               	movwf	___awmod@divisor+1,c
  8416  001C78  0E0A               	movlw	10
  8417  001C7A  6E1C               	movwf	___awmod@divisor,c
  8418  001C7C  0100               	movlb	0	; () banked
  8419  001C7E  5175               	movf	scale@scl& (0+255),w,b
  8420  001C80  6E1A               	movwf	___awmod@dividend,c
  8421  001C82  6A1B               	clrf	___awmod@dividend+1,c
  8422  001C84  BE1A               	btfsc	___awmod@dividend,7,c
  8423  001C86  061B               	decf	___awmod@dividend+1,f,c
  8424  001C88  EC98  F024         	call	___awmod	;wreg free
  8425  001C8C  C01A  F028         	movff	?___awmod,___wmul@multiplier
  8426  001C90  C01B  F029         	movff	?___awmod+1,___wmul@multiplier+1
  8427  001C94  ECA7  F028         	call	___wmul	;wreg free
  8428  001C98  0E1D               	movlw	low __powers_
  8429  001C9A  2428               	addwf	?___wmul,w,c
  8430  001C9C  6EF6               	movwf	tblptrl,c
  8431  001C9E  0E61               	movlw	high __powers_
  8432  001CA0  2029               	addwfc	?___wmul+1,w,c
  8433  001CA2  6EF7               	movwf	tblptrh,c
  8434  001CA4                     	if	0	;There are less than 3 active tblptr bytes
  8435  001CA4                     	endif
  8436  001CA4  0009               	tblrd		*+
  8437  001CA6  CFF5 F063          	movff	tablat,___ftmul@f2
  8438  001CAA  0009               	tblrd		*+
  8439  001CAC  CFF5 F064          	movff	tablat,___ftmul@f2+1
  8440  001CB0  000A               	tblrd		*-
  8441  001CB2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  8442  001CB6  EC77  F01F         	call	___ftmul	;wreg free
  8443  001CBA  C060  F06F         	movff	?___ftmul,?_scale
  8444  001CBE  C061  F070         	movff	?___ftmul+1,?_scale+1
  8445  001CC2  C062  F071         	movff	?___ftmul+2,?_scale+2
  8446  001CC6  0012               	return	
  8447  001CC8                     l1448:
  8448                           
  8449                           ;doprnt.c: 438: else if(scl > 10)
  8450  001CC8  0100               	movlb	0	; () banked
  8451  001CCA  5175               	movf	scale@scl& (0+255),w,b
  8452  001CCC  0A80               	xorlw	128
  8453  001CCE  0F75               	addlw	-139
  8454  001CD0  A0D8               	btfss	status,0,c
  8455  001CD2  D054               	goto	l1450
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8459  001CD4  0E00               	movlw	0
  8460  001CD6  6E23               	movwf	___awdiv@divisor+1,c
  8461  001CD8  0E0A               	movlw	10
  8462  001CDA  6E22               	movwf	___awdiv@divisor,c
  8463  001CDC  5175               	movf	scale@scl& (0+255),w,b
  8464  001CDE  6E20               	movwf	___awdiv@dividend,c
  8465  001CE0  6A21               	clrf	___awdiv@dividend+1,c
  8466  001CE2  BE20               	btfsc	___awdiv@dividend,7,c
  8467  001CE4  0621               	decf	___awdiv@dividend+1,f,c
  8468  001CE6  EC2C  F023         	call	___awdiv	;wreg free
  8469  001CEA  0E09               	movlw	9
  8470  001CEC  2420               	addwf	?___awdiv,w,c
  8471  001CEE  6E28               	movwf	___wmul@multiplier,c
  8472  001CF0  0E00               	movlw	0
  8473  001CF2  2021               	addwfc	?___awdiv+1,w,c
  8474  001CF4  6E29               	movwf	___wmul@multiplier+1,c
  8475  001CF6  0E00               	movlw	0
  8476  001CF8  6E2B               	movwf	___wmul@multiplicand+1,c
  8477  001CFA  0E03               	movlw	3
  8478  001CFC  6E2A               	movwf	___wmul@multiplicand,c
  8479  001CFE  ECA7  F028         	call	___wmul	;wreg free
  8480  001D02  0E1D               	movlw	low __powers_
  8481  001D04  2428               	addwf	?___wmul,w,c
  8482  001D06  6EF6               	movwf	tblptrl,c
  8483  001D08  0E61               	movlw	high __powers_
  8484  001D0A  2029               	addwfc	?___wmul+1,w,c
  8485  001D0C  6EF7               	movwf	tblptrh,c
  8486  001D0E                     	if	0	;There are less than 3 active tblptr bytes
  8487  001D0E                     	endif
  8488  001D0E  0009               	tblrd		*+
  8489  001D10  CFF5 F060          	movff	tablat,___ftmul@f1
  8490  001D14  0009               	tblrd		*+
  8491  001D16  CFF5 F061          	movff	tablat,___ftmul@f1+1
  8492  001D1A  000A               	tblrd		*-
  8493  001D1C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  8494  001D20  0E00               	movlw	0
  8495  001D22  6E2B               	movwf	___wmul@multiplicand+1,c
  8496  001D24  0E03               	movlw	3
  8497  001D26  6E2A               	movwf	___wmul@multiplicand,c
  8498  001D28  0E00               	movlw	0
  8499  001D2A  6E1D               	movwf	___awmod@divisor+1,c
  8500  001D2C  0E0A               	movlw	10
  8501  001D2E  6E1C               	movwf	___awmod@divisor,c
  8502  001D30  0100               	movlb	0	; () banked
  8503  001D32  5175               	movf	scale@scl& (0+255),w,b
  8504  001D34  6E1A               	movwf	___awmod@dividend,c
  8505  001D36  6A1B               	clrf	___awmod@dividend+1,c
  8506  001D38  BE1A               	btfsc	___awmod@dividend,7,c
  8507  001D3A  061B               	decf	___awmod@dividend+1,f,c
  8508  001D3C  EC98  F024         	call	___awmod	;wreg free
  8509  001D40  C01A  F028         	movff	?___awmod,___wmul@multiplier
  8510  001D44  C01B  F029         	movff	?___awmod+1,___wmul@multiplier+1
  8511  001D48  ECA7  F028         	call	___wmul	;wreg free
  8512  001D4C  0E1D               	movlw	low __powers_
  8513  001D4E  2428               	addwf	?___wmul,w,c
  8514  001D50  6EF6               	movwf	tblptrl,c
  8515  001D52  0E61               	movlw	high __powers_
  8516  001D54  2029               	addwfc	?___wmul+1,w,c
  8517  001D56  6EF7               	movwf	tblptrh,c
  8518  001D58                     	if	0	;There are less than 3 active tblptr bytes
  8519  001D58                     	endif
  8520  001D58  0009               	tblrd		*+
  8521  001D5A  CFF5 F063          	movff	tablat,___ftmul@f2
  8522  001D5E  0009               	tblrd		*+
  8523  001D60  CFF5 F064          	movff	tablat,___ftmul@f2+1
  8524  001D64  000A               	tblrd		*-
  8525  001D66  CFF5 F065          	movff	tablat,___ftmul@f2+2
  8526  001D6A  EC77  F01F         	call	___ftmul	;wreg free
  8527  001D6E  C060  F06F         	movff	?___ftmul,?_scale
  8528  001D72  C061  F070         	movff	?___ftmul+1,?_scale+1
  8529  001D76  C062  F071         	movff	?___ftmul+2,?_scale+2
  8530  001D7A  0012               	return	
  8531  001D7C                     l1450:
  8532                           
  8533                           ;doprnt.c: 440: return _powers_[scl];
  8534  001D7C  0100               	movlb	0	; () banked
  8535  001D7E  5175               	movf	scale@scl& (0+255),w,b
  8536  001D80  0D03               	mullw	3
  8537  001D82  0E1D               	movlw	low __powers_
  8538  001D84  24F3               	addwf	prodl,w,c
  8539  001D86  6EF6               	movwf	tblptrl,c
  8540  001D88  0E61               	movlw	high __powers_
  8541  001D8A  20F4               	addwfc	prodh,w,c
  8542  001D8C  6EF7               	movwf	tblptrh,c
  8543  001D8E                     	if	0	;There are less than 3 active tblptr bytes
  8544  001D8E                     	endif
  8545  001D8E  0009               	tblrd		*+
  8546  001D90  CFF5 F06F          	movff	tablat,?_scale
  8547  001D94  0009               	tblrd		*+
  8548  001D96  CFF5 F070          	movff	tablat,?_scale+1
  8549  001D9A  000A               	tblrd		*-
  8550  001D9C  CFF5 F071          	movff	tablat,?_scale+2
  8551  001DA0  0012               	return	
  8552  001DA2                     __end_of_scale:
  8553                           	opt stack 0
  8554                           tosu	equ	0xFFF
  8555                           tosh	equ	0xFFE
  8556                           tosl	equ	0xFFD
  8557                           pclath	equ	0xFFA
  8558                           tblptru	equ	0xFF8
  8559                           tblptrh	equ	0xFF7
  8560                           tblptrl	equ	0xFF6
  8561                           tablat	equ	0xFF5
  8562                           prodh	equ	0xFF4
  8563                           prodl	equ	0xFF3
  8564                           intcon	equ	0xFF2
  8565                           intcon2	equ	0xFF1
  8566                           intcon3	equ	0xFF0
  8567                           postinc0	equ	0xFEE
  8568                           wreg	equ	0xFE8
  8569                           indf1	equ	0xFE7
  8570                           postinc1	equ	0xFE6
  8571                           postdec1	equ	0xFE5
  8572                           fsr1h	equ	0xFE2
  8573                           fsr1l	equ	0xFE1
  8574                           indf2	equ	0xFDF
  8575                           postinc2	equ	0xFDE
  8576                           postdec2	equ	0xFDD
  8577                           fsr2h	equ	0xFDA
  8578                           fsr2l	equ	0xFD9
  8579                           status	equ	0xFD8
  8580                           
  8581 ;; *************** function _isdigit *****************
  8582 ;; Defined at:
  8583 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;  c               1    wreg     unsigned char 
  8586 ;; Auto vars:     Size  Location     Type
  8587 ;;  c               1   27[COMRAM] unsigned char 
  8588 ;; Return value:  Size  Location     Type
  8589 ;;		None               void
  8590 ;; Registers used:
  8591 ;;		wreg, status,2, status,0
  8592 ;; Tracked objects:
  8593 ;;		On entry : 0/0
  8594 ;;		On exit  : 0/0
  8595 ;;		Unchanged: 0/0
  8596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8597 ;;      Params:         0       0       0       0       0       0       0       0       0
  8598 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8599 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8600 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8601 ;;Total ram usage:        3 bytes
  8602 ;; Hardware stack levels used:    1
  8603 ;; Hardware stack levels required when called:    2
  8604 ;; This function calls:
  8605 ;;		Nothing
  8606 ;; This function is called by:
  8607 ;;		_sprintf
  8608 ;;		_strtod
  8609 ;;		_atol
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           	psect	text32
  8614  005206                     __ptext32:
  8615                           	opt stack 0
  8616  005206                     _isdigit:
  8617                           	opt stack 25
  8618                           
  8619                           ;incstack = 0
  8620                           ;isdigit@c stored from wreg
  8621  005206  6E1C               	movwf	isdigit@c,c
  8622  005208  0E00               	movlw	0
  8623  00520A  6E1B               	movwf	_isdigit$3308,c
  8624  00520C  0E3A               	movlw	58
  8625  00520E  601C               	cpfslt	isdigit@c,c
  8626  005210  D005               	goto	l1963
  8627  005212  0E2F               	movlw	47
  8628  005214  641C               	cpfsgt	isdigit@c,c
  8629  005216  D002               	goto	l1963
  8630  005218  0E01               	movlw	1
  8631  00521A  6E1B               	movwf	_isdigit$3308,c
  8632  00521C                     l1963:
  8633  00521C  C01B  F01A         	movff	_isdigit$3308,??_isdigit
  8634  005220  301A               	rrcf	??_isdigit,w,c
  8635  005222  0012               	return	
  8636  005224                     __end_of_isdigit:
  8637                           	opt stack 0
  8638                           tosu	equ	0xFFF
  8639                           tosh	equ	0xFFE
  8640                           tosl	equ	0xFFD
  8641                           pclath	equ	0xFFA
  8642                           tblptru	equ	0xFF8
  8643                           tblptrh	equ	0xFF7
  8644                           tblptrl	equ	0xFF6
  8645                           tablat	equ	0xFF5
  8646                           prodh	equ	0xFF4
  8647                           prodl	equ	0xFF3
  8648                           intcon	equ	0xFF2
  8649                           intcon2	equ	0xFF1
  8650                           intcon3	equ	0xFF0
  8651                           postinc0	equ	0xFEE
  8652                           wreg	equ	0xFE8
  8653                           indf1	equ	0xFE7
  8654                           postinc1	equ	0xFE6
  8655                           postdec1	equ	0xFE5
  8656                           fsr1h	equ	0xFE2
  8657                           fsr1l	equ	0xFE1
  8658                           indf2	equ	0xFDF
  8659                           postinc2	equ	0xFDE
  8660                           postdec2	equ	0xFDD
  8661                           fsr2h	equ	0xFDA
  8662                           fsr2l	equ	0xFD9
  8663                           status	equ	0xFD8
  8664                           
  8665 ;; *************** function _fround *****************
  8666 ;; Defined at:
  8667 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  8668 ;; Parameters:    Size  Location     Type
  8669 ;;  prec            1    wreg     unsigned char 
  8670 ;; Auto vars:     Size  Location     Type
  8671 ;;  prec            1   24[BANK0 ] unsigned char 
  8672 ;; Return value:  Size  Location     Type
  8673 ;;                  3   15[BANK0 ] unsigned char 
  8674 ;; Registers used:
  8675 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8676 ;; Tracked objects:
  8677 ;;		On entry : 0/0
  8678 ;;		On exit  : 0/0
  8679 ;;		Unchanged: 0/0
  8680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8681 ;;      Params:         0       3       0       0       0       0       0       0       0
  8682 ;;      Locals:         0       7       0       0       0       0       0       0       0
  8683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8684 ;;      Totals:         0      10       0       0       0       0       0       0       0
  8685 ;;Total ram usage:       10 bytes
  8686 ;; Hardware stack levels used:    1
  8687 ;; Hardware stack levels required when called:    4
  8688 ;; This function calls:
  8689 ;;		___awdiv
  8690 ;;		___awmod
  8691 ;;		___ftmul
  8692 ;;		___wmul
  8693 ;; This function is called by:
  8694 ;;		_sprintf
  8695 ;; This function uses a non-reentrant model
  8696 ;;
  8697                           
  8698                           	psect	text33
  8699  002A74                     __ptext33:
  8700                           	opt stack 0
  8701  002A74                     _fround:
  8702                           	opt stack 23
  8703                           
  8704                           ;incstack = 0
  8705                           ;fround@prec stored from wreg
  8706  002A74  0100               	movlb	0	; () banked
  8707  002A76  6F78               	movwf	fround@prec& (0+255),b
  8708                           
  8709                           ;doprnt.c: 413: if(prec>=110)
  8710  002A78  0E6D               	movlw	109
  8711  002A7A  0100               	movlb	0	; () banked
  8712  002A7C  6578               	cpfsgt	fround@prec& (0+255),b
  8713  002A7E  D0A0               	goto	l1437
  8714                           
  8715                           ; BSR set to: 0
  8716                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8717  002A80  0E00               	movlw	0
  8718  002A82  6E2B               	movwf	___wmul@multiplicand+1,c
  8719  002A84  0E03               	movlw	3
  8720  002A86  6E2A               	movwf	___wmul@multiplicand,c
  8721  002A88  0E00               	movlw	0
  8722  002A8A  6E23               	movwf	___awdiv@divisor+1,c
  8723  002A8C  0E0A               	movlw	10
  8724  002A8E  6E22               	movwf	___awdiv@divisor,c
  8725  002A90  0E00               	movlw	0
  8726  002A92  6E1D               	movwf	___awmod@divisor+1,c
  8727  002A94  0E64               	movlw	100
  8728  002A96  6E1C               	movwf	___awmod@divisor,c
  8729  002A98  C078  F01A         	movff	fround@prec,___awmod@dividend
  8730  002A9C  6A1B               	clrf	___awmod@dividend+1,c
  8731  002A9E  EC98  F024         	call	___awmod	;wreg free
  8732  002AA2  C01A  F020         	movff	?___awmod,___awdiv@dividend
  8733  002AA6  C01B  F021         	movff	?___awmod+1,___awdiv@dividend+1
  8734  002AAA  EC2C  F023         	call	___awdiv	;wreg free
  8735  002AAE  0E09               	movlw	9
  8736  002AB0  2420               	addwf	?___awdiv,w,c
  8737  002AB2  6E28               	movwf	___wmul@multiplier,c
  8738  002AB4  0E00               	movlw	0
  8739  002AB6  2021               	addwfc	?___awdiv+1,w,c
  8740  002AB8  6E29               	movwf	___wmul@multiplier+1,c
  8741  002ABA  ECA7  F028         	call	___wmul	;wreg free
  8742  002ABE  0E44               	movlw	low __npowers_
  8743  002AC0  2428               	addwf	?___wmul,w,c
  8744  002AC2  6EF6               	movwf	tblptrl,c
  8745  002AC4  0E61               	movlw	high __npowers_
  8746  002AC6  2029               	addwfc	?___wmul+1,w,c
  8747  002AC8  6EF7               	movwf	tblptrh,c
  8748  002ACA                     	if	0	;There are less than 3 active tblptr bytes
  8749  002ACA                     	endif
  8750  002ACA  0009               	tblrd		*+
  8751  002ACC  CFF5 F063          	movff	tablat,___ftmul@f2
  8752  002AD0  0009               	tblrd		*+
  8753  002AD2  CFF5 F064          	movff	tablat,___ftmul@f2+1
  8754  002AD6  000A               	tblrd		*-
  8755  002AD8  CFF5 F065          	movff	tablat,___ftmul@f2+2
  8756  002ADC  0E00               	movlw	0
  8757  002ADE  6E23               	movwf	___awdiv@divisor+1,c
  8758  002AE0  0E64               	movlw	100
  8759  002AE2  6E22               	movwf	___awdiv@divisor,c
  8760  002AE4  C078  F020         	movff	fround@prec,___awdiv@dividend
  8761  002AE8  6A21               	clrf	___awdiv@dividend+1,c
  8762  002AEA  EC2C  F023         	call	___awdiv	;wreg free
  8763  002AEE  0E12               	movlw	18
  8764  002AF0  2420               	addwf	?___awdiv,w,c
  8765  002AF2  6E28               	movwf	___wmul@multiplier,c
  8766  002AF4  0E00               	movlw	0
  8767  002AF6  2021               	addwfc	?___awdiv+1,w,c
  8768  002AF8  6E29               	movwf	___wmul@multiplier+1,c
  8769  002AFA  0E00               	movlw	0
  8770  002AFC  6E2B               	movwf	___wmul@multiplicand+1,c
  8771  002AFE  0E03               	movlw	3
  8772  002B00  6E2A               	movwf	___wmul@multiplicand,c
  8773  002B02  ECA7  F028         	call	___wmul	;wreg free
  8774  002B06  0E44               	movlw	low __npowers_
  8775  002B08  2428               	addwf	?___wmul,w,c
  8776  002B0A  6EF6               	movwf	tblptrl,c
  8777  002B0C  0E61               	movlw	high __npowers_
  8778  002B0E  2029               	addwfc	?___wmul+1,w,c
  8779  002B10  6EF7               	movwf	tblptrh,c
  8780  002B12                     	if	0	;There are less than 3 active tblptr bytes
  8781  002B12                     	endif
  8782  002B12  0009               	tblrd		*+
  8783  002B14  CFF5 F060          	movff	tablat,___ftmul@f1
  8784  002B18  0009               	tblrd		*+
  8785  002B1A  CFF5 F061          	movff	tablat,___ftmul@f1+1
  8786  002B1E  000A               	tblrd		*-
  8787  002B20  CFF5 F062          	movff	tablat,___ftmul@f1+2
  8788  002B24  EC77  F01F         	call	___ftmul	;wreg free
  8789  002B28  C060  F075         	movff	?___ftmul,_fround$3877
  8790  002B2C  C061  F076         	movff	?___ftmul+1,_fround$3877+1
  8791  002B30  C062  F077         	movff	?___ftmul+2,_fround$3877+2
  8792                           
  8793                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8794  002B34  0E00               	movlw	0
  8795  002B36  6E2B               	movwf	___wmul@multiplicand+1,c
  8796  002B38  0E03               	movlw	3
  8797  002B3A  6E2A               	movwf	___wmul@multiplicand,c
  8798  002B3C  0E00               	movlw	0
  8799  002B3E  6E1D               	movwf	___awmod@divisor+1,c
  8800  002B40  0E0A               	movlw	10
  8801  002B42  6E1C               	movwf	___awmod@divisor,c
  8802  002B44  C078  F01A         	movff	fround@prec,___awmod@dividend
  8803  002B48  6A1B               	clrf	___awmod@dividend+1,c
  8804  002B4A  EC98  F024         	call	___awmod	;wreg free
  8805  002B4E  C01A  F028         	movff	?___awmod,___wmul@multiplier
  8806  002B52  C01B  F029         	movff	?___awmod+1,___wmul@multiplier+1
  8807  002B56  ECA7  F028         	call	___wmul	;wreg free
  8808  002B5A  0E44               	movlw	low __npowers_
  8809  002B5C  2428               	addwf	?___wmul,w,c
  8810  002B5E  6EF6               	movwf	tblptrl,c
  8811  002B60  0E61               	movlw	high __npowers_
  8812  002B62  2029               	addwfc	?___wmul+1,w,c
  8813  002B64  6EF7               	movwf	tblptrh,c
  8814  002B66                     	if	0	;There are less than 3 active tblptr bytes
  8815  002B66                     	endif
  8816  002B66  0009               	tblrd		*+
  8817  002B68  CFF5 F063          	movff	tablat,___ftmul@f2
  8818  002B6C  0009               	tblrd		*+
  8819  002B6E  CFF5 F064          	movff	tablat,___ftmul@f2+1
  8820  002B72  000A               	tblrd		*-
  8821  002B74  CFF5 F065          	movff	tablat,___ftmul@f2+2
  8822  002B78  C075  F060         	movff	_fround$3877,___ftmul@f1
  8823  002B7C  C076  F061         	movff	_fround$3877+1,___ftmul@f1+1
  8824  002B80  C077  F062         	movff	_fround$3877+2,___ftmul@f1+2
  8825  002B84  EC77  F01F         	call	___ftmul	;wreg free
  8826  002B88  C060  F072         	movff	?___ftmul,_fround$3878
  8827  002B8C  C061  F073         	movff	?___ftmul+1,_fround$3878+1
  8828  002B90  C062  F074         	movff	?___ftmul+2,_fround$3878+2
  8829                           
  8830                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8831  002B94  C072  F060         	movff	_fround$3878,___ftmul@f1
  8832  002B98  C073  F061         	movff	_fround$3878+1,___ftmul@f1+1
  8833  002B9C  C074  F062         	movff	_fround$3878+2,___ftmul@f1+2
  8834  002BA0  0E00               	movlw	0
  8835  002BA2  0100               	movlb	0	; () banked
  8836  002BA4  6F63               	movwf	___ftmul@f2& (0+255),b
  8837  002BA6  0E00               	movlw	0
  8838  002BA8  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  8839  002BAA  0E3F               	movlw	63
  8840  002BAC  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  8841  002BAE  EC77  F01F         	call	___ftmul	;wreg free
  8842  002BB2  C060  F06F         	movff	?___ftmul,?_fround
  8843  002BB6  C061  F070         	movff	?___ftmul+1,?_fround+1
  8844  002BBA  C062  F071         	movff	?___ftmul+2,?_fround+2
  8845  002BBE  0012               	return	
  8846  002BC0                     l1437:
  8847                           
  8848                           ;doprnt.c: 415: else if(prec > 10)
  8849  002BC0  0E0A               	movlw	10
  8850  002BC2  0100               	movlb	0	; () banked
  8851  002BC4  6578               	cpfsgt	fround@prec& (0+255),b
  8852  002BC6  D064               	goto	l1440
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8856  002BC8  0E00               	movlw	0
  8857  002BCA  6E2B               	movwf	___wmul@multiplicand+1,c
  8858  002BCC  0E03               	movlw	3
  8859  002BCE  6E2A               	movwf	___wmul@multiplicand,c
  8860  002BD0  0E00               	movlw	0
  8861  002BD2  6E1D               	movwf	___awmod@divisor+1,c
  8862  002BD4  0E0A               	movlw	10
  8863  002BD6  6E1C               	movwf	___awmod@divisor,c
  8864  002BD8  C078  F01A         	movff	fround@prec,___awmod@dividend
  8865  002BDC  6A1B               	clrf	___awmod@dividend+1,c
  8866  002BDE  EC98  F024         	call	___awmod	;wreg free
  8867  002BE2  C01A  F028         	movff	?___awmod,___wmul@multiplier
  8868  002BE6  C01B  F029         	movff	?___awmod+1,___wmul@multiplier+1
  8869  002BEA  ECA7  F028         	call	___wmul	;wreg free
  8870  002BEE  0E44               	movlw	low __npowers_
  8871  002BF0  2428               	addwf	?___wmul,w,c
  8872  002BF2  6EF6               	movwf	tblptrl,c
  8873  002BF4  0E61               	movlw	high __npowers_
  8874  002BF6  2029               	addwfc	?___wmul+1,w,c
  8875  002BF8  6EF7               	movwf	tblptrh,c
  8876  002BFA                     	if	0	;There are less than 3 active tblptr bytes
  8877  002BFA                     	endif
  8878  002BFA  0009               	tblrd		*+
  8879  002BFC  CFF5 F063          	movff	tablat,___ftmul@f2
  8880  002C00  0009               	tblrd		*+
  8881  002C02  CFF5 F064          	movff	tablat,___ftmul@f2+1
  8882  002C06  000A               	tblrd		*-
  8883  002C08  CFF5 F065          	movff	tablat,___ftmul@f2+2
  8884  002C0C  0E00               	movlw	0
  8885  002C0E  6E23               	movwf	___awdiv@divisor+1,c
  8886  002C10  0E0A               	movlw	10
  8887  002C12  6E22               	movwf	___awdiv@divisor,c
  8888  002C14  C078  F020         	movff	fround@prec,___awdiv@dividend
  8889  002C18  6A21               	clrf	___awdiv@dividend+1,c
  8890  002C1A  EC2C  F023         	call	___awdiv	;wreg free
  8891  002C1E  0E09               	movlw	9
  8892  002C20  2420               	addwf	?___awdiv,w,c
  8893  002C22  6E28               	movwf	___wmul@multiplier,c
  8894  002C24  0E00               	movlw	0
  8895  002C26  2021               	addwfc	?___awdiv+1,w,c
  8896  002C28  6E29               	movwf	___wmul@multiplier+1,c
  8897  002C2A  0E00               	movlw	0
  8898  002C2C  6E2B               	movwf	___wmul@multiplicand+1,c
  8899  002C2E  0E03               	movlw	3
  8900  002C30  6E2A               	movwf	___wmul@multiplicand,c
  8901  002C32  ECA7  F028         	call	___wmul	;wreg free
  8902  002C36  0E44               	movlw	low __npowers_
  8903  002C38  2428               	addwf	?___wmul,w,c
  8904  002C3A  6EF6               	movwf	tblptrl,c
  8905  002C3C  0E61               	movlw	high __npowers_
  8906  002C3E  2029               	addwfc	?___wmul+1,w,c
  8907  002C40  6EF7               	movwf	tblptrh,c
  8908  002C42                     	if	0	;There are less than 3 active tblptr bytes
  8909  002C42                     	endif
  8910  002C42  0009               	tblrd		*+
  8911  002C44  CFF5 F060          	movff	tablat,___ftmul@f1
  8912  002C48  0009               	tblrd		*+
  8913  002C4A  CFF5 F061          	movff	tablat,___ftmul@f1+1
  8914  002C4E  000A               	tblrd		*-
  8915  002C50  CFF5 F062          	movff	tablat,___ftmul@f1+2
  8916  002C54  EC77  F01F         	call	___ftmul	;wreg free
  8917  002C58  C060  F075         	movff	?___ftmul,_fround$3877
  8918  002C5C  C061  F076         	movff	?___ftmul+1,_fround$3877+1
  8919  002C60  C062  F077         	movff	?___ftmul+2,_fround$3877+2
  8920                           
  8921                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8922  002C64  C075  F060         	movff	_fround$3877,___ftmul@f1
  8923  002C68  C076  F061         	movff	_fround$3877+1,___ftmul@f1+1
  8924  002C6C  C077  F062         	movff	_fround$3877+2,___ftmul@f1+2
  8925  002C70  0E00               	movlw	0
  8926  002C72  0100               	movlb	0	; () banked
  8927  002C74  6F63               	movwf	___ftmul@f2& (0+255),b
  8928  002C76  0E00               	movlw	0
  8929  002C78  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  8930  002C7A  0E3F               	movlw	63
  8931  002C7C  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  8932  002C7E  EC77  F01F         	call	___ftmul	;wreg free
  8933  002C82  C060  F06F         	movff	?___ftmul,?_fround
  8934  002C86  C061  F070         	movff	?___ftmul+1,?_fround+1
  8935  002C8A  C062  F071         	movff	?___ftmul+2,?_fround+2
  8936  002C8E  0012               	return	
  8937  002C90                     l1440:
  8938                           
  8939                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8940  002C90  0100               	movlb	0	; () banked
  8941  002C92  5178               	movf	fround@prec& (0+255),w,b
  8942  002C94  0D03               	mullw	3
  8943  002C96  0E44               	movlw	low __npowers_
  8944  002C98  24F3               	addwf	prodl,w,c
  8945  002C9A  6EF6               	movwf	tblptrl,c
  8946  002C9C  0E61               	movlw	high __npowers_
  8947  002C9E  20F4               	addwfc	prodh,w,c
  8948  002CA0  6EF7               	movwf	tblptrh,c
  8949  002CA2                     	if	0	;There are less than 3 active tblptr bytes
  8950  002CA2                     	endif
  8951  002CA2  0009               	tblrd		*+
  8952  002CA4  CFF5 F060          	movff	tablat,___ftmul@f1
  8953  002CA8  0009               	tblrd		*+
  8954  002CAA  CFF5 F061          	movff	tablat,___ftmul@f1+1
  8955  002CAE  000A               	tblrd		*-
  8956  002CB0  CFF5 F062          	movff	tablat,___ftmul@f1+2
  8957  002CB4  0E00               	movlw	0
  8958  002CB6  6F63               	movwf	___ftmul@f2& (0+255),b
  8959  002CB8  0E00               	movlw	0
  8960  002CBA  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  8961  002CBC  0E3F               	movlw	63
  8962  002CBE  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  8963  002CC0  EC77  F01F         	call	___ftmul	;wreg free
  8964  002CC4  C060  F06F         	movff	?___ftmul,?_fround
  8965  002CC8  C061  F070         	movff	?___ftmul+1,?_fround+1
  8966  002CCC  C062  F071         	movff	?___ftmul+2,?_fround+2
  8967  002CD0  0012               	return	
  8968  002CD2                     __end_of_fround:
  8969                           	opt stack 0
  8970                           tosu	equ	0xFFF
  8971                           tosh	equ	0xFFE
  8972                           tosl	equ	0xFFD
  8973                           pclath	equ	0xFFA
  8974                           tblptru	equ	0xFF8
  8975                           tblptrh	equ	0xFF7
  8976                           tblptrl	equ	0xFF6
  8977                           tablat	equ	0xFF5
  8978                           prodh	equ	0xFF4
  8979                           prodl	equ	0xFF3
  8980                           intcon	equ	0xFF2
  8981                           intcon2	equ	0xFF1
  8982                           intcon3	equ	0xFF0
  8983                           postinc0	equ	0xFEE
  8984                           wreg	equ	0xFE8
  8985                           indf1	equ	0xFE7
  8986                           postinc1	equ	0xFE6
  8987                           postdec1	equ	0xFE5
  8988                           fsr1h	equ	0xFE2
  8989                           fsr1l	equ	0xFE1
  8990                           indf2	equ	0xFDF
  8991                           postinc2	equ	0xFDE
  8992                           postdec2	equ	0xFDD
  8993                           fsr2h	equ	0xFDA
  8994                           fsr2l	equ	0xFD9
  8995                           status	equ	0xFD8
  8996                           
  8997 ;; *************** function ___wmul *****************
  8998 ;; Defined at:
  8999 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9000 ;; Parameters:    Size  Location     Type
  9001 ;;  multiplier      2   39[COMRAM] unsigned int 
  9002 ;;  multiplicand    2   41[COMRAM] unsigned int 
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;  product         2   43[COMRAM] unsigned int 
  9005 ;; Return value:  Size  Location     Type
  9006 ;;                  2   39[COMRAM] unsigned int 
  9007 ;; Registers used:
  9008 ;;		wreg, status,2, status,0, prodl, prodh
  9009 ;; Tracked objects:
  9010 ;;		On entry : 0/0
  9011 ;;		On exit  : 0/0
  9012 ;;		Unchanged: 0/0
  9013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9014 ;;      Params:         4       0       0       0       0       0       0       0       0
  9015 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9016 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9017 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9018 ;;Total ram usage:        6 bytes
  9019 ;; Hardware stack levels used:    1
  9020 ;; Hardware stack levels required when called:    2
  9021 ;; This function calls:
  9022 ;;		Nothing
  9023 ;; This function is called by:
  9024 ;;		_fround
  9025 ;;		_scale
  9026 ;;		_sprintf
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           	psect	text34
  9031  00514E                     __ptext34:
  9032                           	opt stack 0
  9033  00514E                     ___wmul:
  9034                           	opt stack 24
  9035                           
  9036                           ;incstack = 0
  9037  00514E  5028               	movf	___wmul@multiplier,w,c
  9038  005150  022A               	mulwf	___wmul@multiplicand,c
  9039  005152  CFF3 F02C          	movff	prodl,___wmul@product
  9040  005156  CFF4 F02D          	movff	prodh,___wmul@product+1
  9041  00515A  5028               	movf	___wmul@multiplier,w,c
  9042  00515C  022B               	mulwf	___wmul@multiplicand+1,c
  9043  00515E  50F3               	movf	prodl,w,c
  9044  005160  262D               	addwf	___wmul@product+1,f,c
  9045  005162  5029               	movf	___wmul@multiplier+1,w,c
  9046  005164  022A               	mulwf	___wmul@multiplicand,c
  9047  005166  50F3               	movf	prodl,w,c
  9048  005168  262D               	addwf	___wmul@product+1,f,c
  9049  00516A  C02C  F028         	movff	___wmul@product,?___wmul
  9050  00516E  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  9051  005172  0012               	return	
  9052  005174                     __end_of___wmul:
  9053                           	opt stack 0
  9054                           tosu	equ	0xFFF
  9055                           tosh	equ	0xFFE
  9056                           tosl	equ	0xFFD
  9057                           pclath	equ	0xFFA
  9058                           tblptru	equ	0xFF8
  9059                           tblptrh	equ	0xFF7
  9060                           tblptrl	equ	0xFF6
  9061                           tablat	equ	0xFF5
  9062                           prodh	equ	0xFF4
  9063                           prodl	equ	0xFF3
  9064                           intcon	equ	0xFF2
  9065                           intcon2	equ	0xFF1
  9066                           intcon3	equ	0xFF0
  9067                           postinc0	equ	0xFEE
  9068                           wreg	equ	0xFE8
  9069                           indf1	equ	0xFE7
  9070                           postinc1	equ	0xFE6
  9071                           postdec1	equ	0xFE5
  9072                           fsr1h	equ	0xFE2
  9073                           fsr1l	equ	0xFE1
  9074                           indf2	equ	0xFDF
  9075                           postinc2	equ	0xFDE
  9076                           postdec2	equ	0xFDD
  9077                           fsr2h	equ	0xFDA
  9078                           fsr2l	equ	0xFD9
  9079                           status	equ	0xFD8
  9080                           
  9081 ;; *************** function ___ftmul *****************
  9082 ;; Defined at:
  9083 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  9084 ;; Parameters:    Size  Location     Type
  9085 ;;  f1              3    0[BANK0 ] float 
  9086 ;;  f2              3    3[BANK0 ] float 
  9087 ;; Auto vars:     Size  Location     Type
  9088 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
  9089 ;;  sign            1   14[BANK0 ] unsigned char 
  9090 ;;  cntr            1   13[BANK0 ] unsigned char 
  9091 ;;  exp             1    9[BANK0 ] unsigned char 
  9092 ;; Return value:  Size  Location     Type
  9093 ;;                  3    0[BANK0 ] float 
  9094 ;; Registers used:
  9095 ;;		wreg, status,2, status,0, cstack
  9096 ;; Tracked objects:
  9097 ;;		On entry : 0/0
  9098 ;;		On exit  : 0/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9101 ;;      Params:         0       6       0       0       0       0       0       0       0
  9102 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9103 ;;      Temps:          0       3       0       0       0       0       0       0       0
  9104 ;;      Totals:         0      15       0       0       0       0       0       0       0
  9105 ;;Total ram usage:       15 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    3
  9108 ;; This function calls:
  9109 ;;		___ftpack
  9110 ;; This function is called by:
  9111 ;;		_convert_to_degrees
  9112 ;;		_fround
  9113 ;;		_scale
  9114 ;;		_sprintf
  9115 ;;		_strtod
  9116 ;;		_escreve_float_lcd
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           	psect	text35
  9121  003EEE                     __ptext35:
  9122                           	opt stack 0
  9123  003EEE                     ___ftmul:
  9124                           	opt stack 23
  9125                           
  9126                           ;incstack = 0
  9127  003EEE  C062  F066         	movff	___ftmul@f1+2,??___ftmul
  9128  003EF2  0100               	movlb	0	; () banked
  9129  003EF4  6B67               	clrf	(??___ftmul+1)& (0+255),b
  9130  003EF6  6B68               	clrf	(??___ftmul+2)& (0+255),b
  9131  003EF8  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9132  003EFA  3766               	rlcf	??___ftmul& (0+255),f,b
  9133  003EFC  E301               	bnc	u14321
  9134  003EFE  8167               	bsf	(??___ftmul+1)& (0+255),0,b
  9135  003F00                     u14321:
  9136  003F00  5166               	movf	??___ftmul& (0+255),w,b
  9137  003F02  6F69               	movwf	___ftmul@exp& (0+255),b
  9138  003F04  5169               	movf	___ftmul@exp& (0+255),w,b
  9139  003F06  A4D8               	btfss	status,2,c
  9140  003F08  D007               	goto	l1927
  9141                           
  9142                           ; BSR set to: 0
  9143  003F0A  0E00               	movlw	0
  9144  003F0C  6F60               	movwf	?___ftmul& (0+255),b
  9145  003F0E  0E00               	movlw	0
  9146  003F10  6F61               	movwf	(?___ftmul+1)& (0+255),b
  9147  003F12  0E00               	movlw	0
  9148  003F14  6F62               	movwf	(?___ftmul+2)& (0+255),b
  9149                           
  9150                           ; BSR set to: 0
  9151  003F16  0012               	return	
  9152  003F18                     l1927:
  9153                           
  9154                           ; BSR set to: 0
  9155                           
  9156                           ; BSR set to: 0
  9157  003F18  C065  F066         	movff	___ftmul@f2+2,??___ftmul
  9158  003F1C  6B67               	clrf	(??___ftmul+1)& (0+255),b
  9159  003F1E  6B68               	clrf	(??___ftmul+2)& (0+255),b
  9160  003F20  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  9161  003F22  3766               	rlcf	??___ftmul& (0+255),f,b
  9162  003F24  E301               	bnc	u14341
  9163  003F26  8167               	bsf	(??___ftmul+1)& (0+255),0,b
  9164  003F28                     u14341:
  9165  003F28  5166               	movf	??___ftmul& (0+255),w,b
  9166  003F2A  6F6E               	movwf	___ftmul@sign& (0+255),b
  9167  003F2C  516E               	movf	___ftmul@sign& (0+255),w,b
  9168  003F2E  A4D8               	btfss	status,2,c
  9169  003F30  D007               	goto	l1929
  9170                           
  9171                           ; BSR set to: 0
  9172  003F32  0E00               	movlw	0
  9173  003F34  6F60               	movwf	?___ftmul& (0+255),b
  9174  003F36  0E00               	movlw	0
  9175  003F38  6F61               	movwf	(?___ftmul+1)& (0+255),b
  9176  003F3A  0E00               	movlw	0
  9177  003F3C  6F62               	movwf	(?___ftmul+2)& (0+255),b
  9178                           
  9179                           ; BSR set to: 0
  9180  003F3E  0012               	return	
  9181  003F40                     l1929:
  9182                           
  9183                           ; BSR set to: 0
  9184                           
  9185                           ; BSR set to: 0
  9186  003F40  516E               	movf	___ftmul@sign& (0+255),w,b
  9187  003F42  0F7B               	addlw	123
  9188  003F44  2769               	addwf	___ftmul@exp& (0+255),f,b
  9189                           
  9190                           ; BSR set to: 0
  9191  003F46  C062  F06E         	movff	___ftmul@f1+2,___ftmul@sign
  9192  003F4A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  9193  003F4C  1B6E               	xorwf	___ftmul@sign& (0+255),f,b
  9194  003F4E  0E80               	movlw	128
  9195  003F50  176E               	andwf	___ftmul@sign& (0+255),f,b
  9196                           
  9197                           ; BSR set to: 0
  9198  003F52  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  9199                           
  9200                           ; BSR set to: 0
  9201  003F54  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  9202                           
  9203                           ; BSR set to: 0
  9204  003F56  0EFF               	movlw	255
  9205  003F58  1763               	andwf	___ftmul@f2& (0+255),f,b
  9206  003F5A  0EFF               	movlw	255
  9207  003F5C  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  9208  003F5E  0E00               	movlw	0
  9209  003F60  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  9210                           
  9211                           ; BSR set to: 0
  9212  003F62  0E00               	movlw	0
  9213  003F64  6F6A               	movwf	___ftmul@f3_as_product& (0+255),b
  9214  003F66  0E00               	movlw	0
  9215  003F68  6F6B               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9216  003F6A  0E00               	movlw	0
  9217  003F6C  6F6C               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9218                           
  9219                           ; BSR set to: 0
  9220  003F6E  0E07               	movlw	7
  9221  003F70  6F6D               	movwf	___ftmul@cntr& (0+255),b
  9222  003F72                     
  9223                           ; BSR set to: 0
  9224                           
  9225                           ; BSR set to: 0
  9226  003F72  A160               	btfss	___ftmul@f1& (0+255),0,b
  9227  003F74  D006               	goto	l1931
  9228                           
  9229                           ; BSR set to: 0
  9230  003F76  5163               	movf	___ftmul@f2& (0+255),w,b
  9231  003F78  276A               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9232  003F7A  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  9233  003F7C  236B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9234  003F7E  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  9235  003F80  236C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9236  003F82                     l1931:
  9237                           
  9238                           ; BSR set to: 0
  9239                           
  9240                           ; BSR set to: 0
  9241  003F82  90D8               	bcf	status,0,c
  9242  003F84  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9243  003F86  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9244  003F88  3360               	rrcf	___ftmul@f1& (0+255),f,b
  9245  003F8A  90D8               	bcf	status,0,c
  9246  003F8C  3763               	rlcf	___ftmul@f2& (0+255),f,b
  9247  003F8E  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  9248  003F90  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  9249                           
  9250                           ; BSR set to: 0
  9251  003F92  2F6D               	decfsz	___ftmul@cntr& (0+255),f,b
  9252  003F94  D7EE               	goto	l1930
  9253                           
  9254                           ; BSR set to: 0
  9255                           
  9256                           ; BSR set to: 0
  9257  003F96  0E09               	movlw	9
  9258  003F98  6F6D               	movwf	___ftmul@cntr& (0+255),b
  9259  003F9A                     
  9260                           ; BSR set to: 0
  9261                           
  9262                           ; BSR set to: 0
  9263  003F9A  A160               	btfss	___ftmul@f1& (0+255),0,b
  9264  003F9C  D006               	goto	l1934
  9265                           
  9266                           ; BSR set to: 0
  9267  003F9E  5163               	movf	___ftmul@f2& (0+255),w,b
  9268  003FA0  276A               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9269  003FA2  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  9270  003FA4  236B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9271  003FA6  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  9272  003FA8  236C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9273  003FAA                     l1934:
  9274                           
  9275                           ; BSR set to: 0
  9276                           
  9277                           ; BSR set to: 0
  9278  003FAA  90D8               	bcf	status,0,c
  9279  003FAC  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9280  003FAE  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9281  003FB0  3360               	rrcf	___ftmul@f1& (0+255),f,b
  9282  003FB2  90D8               	bcf	status,0,c
  9283  003FB4  336C               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9284  003FB6  336B               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9285  003FB8  336A               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9286                           
  9287                           ; BSR set to: 0
  9288  003FBA  2F6D               	decfsz	___ftmul@cntr& (0+255),f,b
  9289  003FBC  D7EE               	goto	l1933
  9290                           
  9291                           ; BSR set to: 0
  9292                           
  9293                           ; BSR set to: 0
  9294  003FBE  C06A  F01A         	movff	___ftmul@f3_as_product,___ftpack@arg
  9295  003FC2  C06B  F01B         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9296  003FC6  C06C  F01C         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9297  003FCA  C069  F01D         	movff	___ftmul@exp,___ftpack@exp
  9298  003FCE  C06E  F01E         	movff	___ftmul@sign,___ftpack@sign
  9299  003FD2  ECC5  F020         	call	___ftpack	;wreg free
  9300  003FD6  C01A  F060         	movff	?___ftpack,?___ftmul
  9301  003FDA  C01B  F061         	movff	?___ftpack+1,?___ftmul+1
  9302  003FDE  C01C  F062         	movff	?___ftpack+2,?___ftmul+2
  9303  003FE2  0012               	return	
  9304  003FE4                     __end_of___ftmul:
  9305                           	opt stack 0
  9306                           tosu	equ	0xFFF
  9307                           tosh	equ	0xFFE
  9308                           tosl	equ	0xFFD
  9309                           pclath	equ	0xFFA
  9310                           tblptru	equ	0xFF8
  9311                           tblptrh	equ	0xFF7
  9312                           tblptrl	equ	0xFF6
  9313                           tablat	equ	0xFF5
  9314                           prodh	equ	0xFF4
  9315                           prodl	equ	0xFF3
  9316                           intcon	equ	0xFF2
  9317                           intcon2	equ	0xFF1
  9318                           intcon3	equ	0xFF0
  9319                           postinc0	equ	0xFEE
  9320                           wreg	equ	0xFE8
  9321                           indf1	equ	0xFE7
  9322                           postinc1	equ	0xFE6
  9323                           postdec1	equ	0xFE5
  9324                           fsr1h	equ	0xFE2
  9325                           fsr1l	equ	0xFE1
  9326                           indf2	equ	0xFDF
  9327                           postinc2	equ	0xFDE
  9328                           postdec2	equ	0xFDD
  9329                           fsr2h	equ	0xFDA
  9330                           fsr2l	equ	0xFD9
  9331                           status	equ	0xFD8
  9332                           
  9333 ;; *************** function ___awmod *****************
  9334 ;; Defined at:
  9335 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  9336 ;; Parameters:    Size  Location     Type
  9337 ;;  dividend        2   25[COMRAM] int 
  9338 ;;  divisor         2   27[COMRAM] int 
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;  sign            1   30[COMRAM] unsigned char 
  9341 ;;  counter         1   29[COMRAM] unsigned char 
  9342 ;; Return value:  Size  Location     Type
  9343 ;;                  2   25[COMRAM] int 
  9344 ;; Registers used:
  9345 ;;		wreg, status,2, status,0
  9346 ;; Tracked objects:
  9347 ;;		On entry : 0/0
  9348 ;;		On exit  : 0/0
  9349 ;;		Unchanged: 0/0
  9350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9351 ;;      Params:         4       0       0       0       0       0       0       0       0
  9352 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9353 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9354 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9355 ;;Total ram usage:        6 bytes
  9356 ;; Hardware stack levels used:    1
  9357 ;; Hardware stack levels required when called:    2
  9358 ;; This function calls:
  9359 ;;		Nothing
  9360 ;; This function is called by:
  9361 ;;		_fround
  9362 ;;		_scale
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           	psect	text36
  9367  004930                     __ptext36:
  9368                           	opt stack 0
  9369  004930                     ___awmod:
  9370                           	opt stack 24
  9371                           
  9372                           ;incstack = 0
  9373  004930  0E00               	movlw	0
  9374  004932  6E1F               	movwf	___awmod@sign,c
  9375  004934  AE1B               	btfss	___awmod@dividend+1,7,c
  9376  004936  D006               	goto	l1780
  9377  004938  6C1A               	negf	___awmod@dividend,c
  9378  00493A  1E1B               	comf	___awmod@dividend+1,f,c
  9379  00493C  B0D8               	btfsc	status,0,c
  9380  00493E  2A1B               	incf	___awmod@dividend+1,f,c
  9381  004940  0E01               	movlw	1
  9382  004942  6E1F               	movwf	___awmod@sign,c
  9383  004944                     l1780:
  9384  004944  AE1D               	btfss	___awmod@divisor+1,7,c
  9385  004946  D004               	goto	l1781
  9386  004948  6C1C               	negf	___awmod@divisor,c
  9387  00494A  1E1D               	comf	___awmod@divisor+1,f,c
  9388  00494C  B0D8               	btfsc	status,0,c
  9389  00494E  2A1D               	incf	___awmod@divisor+1,f,c
  9390  004950                     l1781:
  9391  004950  501C               	movf	___awmod@divisor,w,c
  9392  004952  101D               	iorwf	___awmod@divisor+1,w,c
  9393  004954  B4D8               	btfsc	status,2,c
  9394  004956  D018               	goto	l1788
  9395  004958  0E01               	movlw	1
  9396  00495A  6E1E               	movwf	___awmod@counter,c
  9397  00495C  D004               	goto	l1783
  9398  00495E  90D8               	bcf	status,0,c
  9399  004960  361C               	rlcf	___awmod@divisor,f,c
  9400  004962  361D               	rlcf	___awmod@divisor+1,f,c
  9401  004964  2A1E               	incf	___awmod@counter,f,c
  9402  004966                     l1783:
  9403  004966  AE1D               	btfss	___awmod@divisor+1,7,c
  9404  004968  D7FA               	goto	l1784
  9405  00496A                     u14470:
  9406  00496A  501C               	movf	___awmod@divisor,w,c
  9407  00496C  5C1A               	subwf	___awmod@dividend,w,c
  9408  00496E  501D               	movf	___awmod@divisor+1,w,c
  9409  004970  581B               	subwfb	___awmod@dividend+1,w,c
  9410  004972  A0D8               	btfss	status,0,c
  9411  004974  D004               	goto	l1787
  9412  004976  501C               	movf	___awmod@divisor,w,c
  9413  004978  5E1A               	subwf	___awmod@dividend,f,c
  9414  00497A  501D               	movf	___awmod@divisor+1,w,c
  9415  00497C  5A1B               	subwfb	___awmod@dividend+1,f,c
  9416  00497E                     l1787:
  9417  00497E  90D8               	bcf	status,0,c
  9418  004980  321D               	rrcf	___awmod@divisor+1,f,c
  9419  004982  321C               	rrcf	___awmod@divisor,f,c
  9420  004984  2E1E               	decfsz	___awmod@counter,f,c
  9421  004986  D7F1               	goto	u14470
  9422  004988                     l1788:
  9423  004988  501F               	movf	___awmod@sign,w,c
  9424  00498A  B4D8               	btfsc	status,2,c
  9425  00498C  D004               	goto	l1789
  9426  00498E  6C1A               	negf	___awmod@dividend,c
  9427  004990  1E1B               	comf	___awmod@dividend+1,f,c
  9428  004992  B0D8               	btfsc	status,0,c
  9429  004994  2A1B               	incf	___awmod@dividend+1,f,c
  9430  004996                     l1789:
  9431  004996  C01A  F01A         	movff	___awmod@dividend,?___awmod
  9432  00499A  C01B  F01B         	movff	___awmod@dividend+1,?___awmod+1
  9433  00499E  0012               	return	
  9434  0049A0                     __end_of___awmod:
  9435                           	opt stack 0
  9436                           tosu	equ	0xFFF
  9437                           tosh	equ	0xFFE
  9438                           tosl	equ	0xFFD
  9439                           pclath	equ	0xFFA
  9440                           tblptru	equ	0xFF8
  9441                           tblptrh	equ	0xFF7
  9442                           tblptrl	equ	0xFF6
  9443                           tablat	equ	0xFF5
  9444                           prodh	equ	0xFF4
  9445                           prodl	equ	0xFF3
  9446                           intcon	equ	0xFF2
  9447                           intcon2	equ	0xFF1
  9448                           intcon3	equ	0xFF0
  9449                           postinc0	equ	0xFEE
  9450                           wreg	equ	0xFE8
  9451                           indf1	equ	0xFE7
  9452                           postinc1	equ	0xFE6
  9453                           postdec1	equ	0xFE5
  9454                           fsr1h	equ	0xFE2
  9455                           fsr1l	equ	0xFE1
  9456                           indf2	equ	0xFDF
  9457                           postinc2	equ	0xFDE
  9458                           postdec2	equ	0xFDD
  9459                           fsr2h	equ	0xFDA
  9460                           fsr2l	equ	0xFD9
  9461                           status	equ	0xFD8
  9462                           
  9463 ;; *************** function ___awdiv *****************
  9464 ;; Defined at:
  9465 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;  dividend        2   31[COMRAM] int 
  9468 ;;  divisor         2   33[COMRAM] int 
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;  quotient        2   37[COMRAM] int 
  9471 ;;  sign            1   36[COMRAM] unsigned char 
  9472 ;;  counter         1   35[COMRAM] unsigned char 
  9473 ;; Return value:  Size  Location     Type
  9474 ;;                  2   31[COMRAM] int 
  9475 ;; Registers used:
  9476 ;;		wreg, status,2, status,0
  9477 ;; Tracked objects:
  9478 ;;		On entry : 0/0
  9479 ;;		On exit  : 0/0
  9480 ;;		Unchanged: 0/0
  9481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9482 ;;      Params:         4       0       0       0       0       0       0       0       0
  9483 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9484 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9485 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9486 ;;Total ram usage:        8 bytes
  9487 ;; Hardware stack levels used:    1
  9488 ;; Hardware stack levels required when called:    2
  9489 ;; This function calls:
  9490 ;;		Nothing
  9491 ;; This function is called by:
  9492 ;;		_fround
  9493 ;;		_scale
  9494 ;;		_sprintf
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           	psect	text37
  9499  004658                     __ptext37:
  9500                           	opt stack 0
  9501  004658                     ___awdiv:
  9502                           	opt stack 24
  9503                           
  9504                           ;incstack = 0
  9505  004658  0E00               	movlw	0
  9506  00465A  6E25               	movwf	___awdiv@sign,c
  9507  00465C  AE23               	btfss	___awdiv@divisor+1,7,c
  9508  00465E  D006               	goto	l1767
  9509  004660  6C22               	negf	___awdiv@divisor,c
  9510  004662  1E23               	comf	___awdiv@divisor+1,f,c
  9511  004664  B0D8               	btfsc	status,0,c
  9512  004666  2A23               	incf	___awdiv@divisor+1,f,c
  9513  004668  0E01               	movlw	1
  9514  00466A  6E25               	movwf	___awdiv@sign,c
  9515  00466C                     l1767:
  9516  00466C  AE21               	btfss	___awdiv@dividend+1,7,c
  9517  00466E  D006               	goto	l1768
  9518  004670  6C20               	negf	___awdiv@dividend,c
  9519  004672  1E21               	comf	___awdiv@dividend+1,f,c
  9520  004674  B0D8               	btfsc	status,0,c
  9521  004676  2A21               	incf	___awdiv@dividend+1,f,c
  9522  004678  0E01               	movlw	1
  9523  00467A  1A25               	xorwf	___awdiv@sign,f,c
  9524  00467C                     l1768:
  9525  00467C  0E00               	movlw	0
  9526  00467E  6E27               	movwf	___awdiv@quotient+1,c
  9527  004680  0E00               	movlw	0
  9528  004682  6E26               	movwf	___awdiv@quotient,c
  9529  004684  5022               	movf	___awdiv@divisor,w,c
  9530  004686  1023               	iorwf	___awdiv@divisor+1,w,c
  9531  004688  B4D8               	btfsc	status,2,c
  9532  00468A  D01C               	goto	l1775
  9533  00468C  0E01               	movlw	1
  9534  00468E  6E24               	movwf	___awdiv@counter,c
  9535  004690  D004               	goto	l1770
  9536  004692  90D8               	bcf	status,0,c
  9537  004694  3622               	rlcf	___awdiv@divisor,f,c
  9538  004696  3623               	rlcf	___awdiv@divisor+1,f,c
  9539  004698  2A24               	incf	___awdiv@counter,f,c
  9540  00469A                     l1770:
  9541  00469A  AE23               	btfss	___awdiv@divisor+1,7,c
  9542  00469C  D7FA               	goto	l1771
  9543  00469E                     u14410:
  9544  00469E  90D8               	bcf	status,0,c
  9545  0046A0  3626               	rlcf	___awdiv@quotient,f,c
  9546  0046A2  3627               	rlcf	___awdiv@quotient+1,f,c
  9547  0046A4  5022               	movf	___awdiv@divisor,w,c
  9548  0046A6  5C20               	subwf	___awdiv@dividend,w,c
  9549  0046A8  5023               	movf	___awdiv@divisor+1,w,c
  9550  0046AA  5821               	subwfb	___awdiv@dividend+1,w,c
  9551  0046AC  A0D8               	btfss	status,0,c
  9552  0046AE  D005               	goto	l1774
  9553  0046B0  5022               	movf	___awdiv@divisor,w,c
  9554  0046B2  5E20               	subwf	___awdiv@dividend,f,c
  9555  0046B4  5023               	movf	___awdiv@divisor+1,w,c
  9556  0046B6  5A21               	subwfb	___awdiv@dividend+1,f,c
  9557  0046B8  8026               	bsf	___awdiv@quotient,0,c
  9558  0046BA                     l1774:
  9559  0046BA  90D8               	bcf	status,0,c
  9560  0046BC  3223               	rrcf	___awdiv@divisor+1,f,c
  9561  0046BE  3222               	rrcf	___awdiv@divisor,f,c
  9562  0046C0  2E24               	decfsz	___awdiv@counter,f,c
  9563  0046C2  D7ED               	goto	u14410
  9564  0046C4                     l1775:
  9565  0046C4  5025               	movf	___awdiv@sign,w,c
  9566  0046C6  B4D8               	btfsc	status,2,c
  9567  0046C8  D004               	goto	l1776
  9568  0046CA  6C26               	negf	___awdiv@quotient,c
  9569  0046CC  1E27               	comf	___awdiv@quotient+1,f,c
  9570  0046CE  B0D8               	btfsc	status,0,c
  9571  0046D0  2A27               	incf	___awdiv@quotient+1,f,c
  9572  0046D2                     l1776:
  9573  0046D2  C026  F020         	movff	___awdiv@quotient,?___awdiv
  9574  0046D6  C027  F021         	movff	___awdiv@quotient+1,?___awdiv+1
  9575  0046DA  0012               	return	
  9576  0046DC                     __end_of___awdiv:
  9577                           	opt stack 0
  9578                           tosu	equ	0xFFF
  9579                           tosh	equ	0xFFE
  9580                           tosl	equ	0xFFD
  9581                           pclath	equ	0xFFA
  9582                           tblptru	equ	0xFF8
  9583                           tblptrh	equ	0xFF7
  9584                           tblptrl	equ	0xFF6
  9585                           tablat	equ	0xFF5
  9586                           prodh	equ	0xFF4
  9587                           prodl	equ	0xFF3
  9588                           intcon	equ	0xFF2
  9589                           intcon2	equ	0xFF1
  9590                           intcon3	equ	0xFF0
  9591                           postinc0	equ	0xFEE
  9592                           wreg	equ	0xFE8
  9593                           indf1	equ	0xFE7
  9594                           postinc1	equ	0xFE6
  9595                           postdec1	equ	0xFE5
  9596                           fsr1h	equ	0xFE2
  9597                           fsr1l	equ	0xFE1
  9598                           indf2	equ	0xFDF
  9599                           postinc2	equ	0xFDE
  9600                           postdec2	equ	0xFDD
  9601                           fsr2h	equ	0xFDA
  9602                           fsr2l	equ	0xFD9
  9603                           status	equ	0xFD8
  9604                           
  9605 ;; *************** function __tdiv_to_l_ *****************
  9606 ;; Defined at:
  9607 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  9608 ;; Parameters:    Size  Location     Type
  9609 ;;  f1              3   25[COMRAM] float 
  9610 ;;  f2              3   28[COMRAM] float 
  9611 ;; Auto vars:     Size  Location     Type
  9612 ;;  quot            4   34[COMRAM] unsigned long 
  9613 ;;  exp1            1   39[COMRAM] unsigned char 
  9614 ;;  cntr            1   38[COMRAM] unsigned char 
  9615 ;; Return value:  Size  Location     Type
  9616 ;;                  4   25[COMRAM] unsigned long 
  9617 ;; Registers used:
  9618 ;;		wreg, status,2, status,0
  9619 ;; Tracked objects:
  9620 ;;		On entry : 0/0
  9621 ;;		On exit  : 0/0
  9622 ;;		Unchanged: 0/0
  9623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9624 ;;      Params:         6       0       0       0       0       0       0       0       0
  9625 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9626 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9627 ;;      Totals:        15       0       0       0       0       0       0       0       0
  9628 ;;Total ram usage:       15 bytes
  9629 ;; Hardware stack levels used:    1
  9630 ;; Hardware stack levels required when called:    2
  9631 ;; This function calls:
  9632 ;;		Nothing
  9633 ;; This function is called by:
  9634 ;;		_sprintf
  9635 ;; This function uses a non-reentrant model
  9636 ;;
  9637                           
  9638                           	psect	text38
  9639  003750                     __ptext38:
  9640                           	opt stack 0
  9641  003750                     __tdiv_to_l_:
  9642                           	opt stack 25
  9643                           
  9644                           ;incstack = 0
  9645  003750  C01C  F020         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  9646  003754  6A21               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9647  003756  6A22               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9648  003758  341B               	rlcf	__tdiv_to_l_@f1+1,w,c
  9649  00375A  3620               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9650  00375C  E301               	bnc	u8521
  9651  00375E  8021               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9652  003760                     u8521:
  9653  003760  5020               	movf	??__tdiv_to_l_,w,c
  9654  003762  6E28               	movwf	__tdiv_to_l_@exp1,c
  9655  003764  5028               	movf	__tdiv_to_l_@exp1,w,c
  9656  003766  A4D8               	btfss	status,2,c
  9657  003768  D009               	goto	l1903
  9658  00376A  0E00               	movlw	0
  9659  00376C  6E1A               	movwf	?__tdiv_to_l_,c
  9660  00376E  0E00               	movlw	0
  9661  003770  6E1B               	movwf	?__tdiv_to_l_+1,c
  9662  003772  0E00               	movlw	0
  9663  003774  6E1C               	movwf	?__tdiv_to_l_+2,c
  9664  003776  0E00               	movlw	0
  9665  003778  6E1D               	movwf	?__tdiv_to_l_+3,c
  9666  00377A  0012               	return	
  9667  00377C                     l1903:
  9668  00377C  C01F  F020         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  9669  003780  6A21               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9670  003782  6A22               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9671  003784  341E               	rlcf	__tdiv_to_l_@f2+1,w,c
  9672  003786  3620               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9673  003788  E301               	bnc	u8541
  9674  00378A  8021               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9675  00378C                     u8541:
  9676  00378C  5020               	movf	??__tdiv_to_l_,w,c
  9677  00378E  6E27               	movwf	__tdiv_to_l_@cntr,c
  9678  003790  5027               	movf	__tdiv_to_l_@cntr,w,c
  9679  003792  A4D8               	btfss	status,2,c
  9680  003794  D009               	goto	l1905
  9681  003796  0E00               	movlw	0
  9682  003798  6E1A               	movwf	?__tdiv_to_l_,c
  9683  00379A  0E00               	movlw	0
  9684  00379C  6E1B               	movwf	?__tdiv_to_l_+1,c
  9685  00379E  0E00               	movlw	0
  9686  0037A0  6E1C               	movwf	?__tdiv_to_l_+2,c
  9687  0037A2  0E00               	movlw	0
  9688  0037A4  6E1D               	movwf	?__tdiv_to_l_+3,c
  9689  0037A6  0012               	return	
  9690  0037A8                     l1905:
  9691  0037A8  8E1B               	bsf	__tdiv_to_l_@f1+1,7,c
  9692  0037AA  0EFF               	movlw	255
  9693  0037AC  161A               	andwf	__tdiv_to_l_@f1,f,c
  9694  0037AE  0EFF               	movlw	255
  9695  0037B0  161B               	andwf	__tdiv_to_l_@f1+1,f,c
  9696  0037B2  0E00               	movlw	0
  9697  0037B4  161C               	andwf	__tdiv_to_l_@f1+2,f,c
  9698  0037B6  8E1E               	bsf	__tdiv_to_l_@f2+1,7,c
  9699  0037B8  0EFF               	movlw	255
  9700  0037BA  161D               	andwf	__tdiv_to_l_@f2,f,c
  9701  0037BC  0EFF               	movlw	255
  9702  0037BE  161E               	andwf	__tdiv_to_l_@f2+1,f,c
  9703  0037C0  0E00               	movlw	0
  9704  0037C2  161F               	andwf	__tdiv_to_l_@f2+2,f,c
  9705  0037C4  0E00               	movlw	0
  9706  0037C6  6E23               	movwf	__tdiv_to_l_@quot,c
  9707  0037C8  0E00               	movlw	0
  9708  0037CA  6E24               	movwf	__tdiv_to_l_@quot+1,c
  9709  0037CC  0E00               	movlw	0
  9710  0037CE  6E25               	movwf	__tdiv_to_l_@quot+2,c
  9711  0037D0  0E00               	movlw	0
  9712  0037D2  6E26               	movwf	__tdiv_to_l_@quot+3,c
  9713  0037D4  0E7F               	movlw	127
  9714  0037D6  5E28               	subwf	__tdiv_to_l_@exp1,f,c
  9715  0037D8  5027               	movf	__tdiv_to_l_@cntr,w,c
  9716  0037DA  0F98               	addlw	152
  9717  0037DC  5E28               	subwf	__tdiv_to_l_@exp1,f,c
  9718  0037DE  0E18               	movlw	24
  9719  0037E0  6E27               	movwf	__tdiv_to_l_@cntr,c
  9720  0037E2                     l1906:
  9721  0037E2  90D8               	bcf	status,0,c
  9722  0037E4  3623               	rlcf	__tdiv_to_l_@quot,f,c
  9723  0037E6  3624               	rlcf	__tdiv_to_l_@quot+1,f,c
  9724  0037E8  3625               	rlcf	__tdiv_to_l_@quot+2,f,c
  9725  0037EA  3626               	rlcf	__tdiv_to_l_@quot+3,f,c
  9726  0037EC  501D               	movf	__tdiv_to_l_@f2,w,c
  9727  0037EE  5C1A               	subwf	__tdiv_to_l_@f1,w,c
  9728  0037F0  501E               	movf	__tdiv_to_l_@f2+1,w,c
  9729  0037F2  581B               	subwfb	__tdiv_to_l_@f1+1,w,c
  9730  0037F4  501F               	movf	__tdiv_to_l_@f2+2,w,c
  9731  0037F6  581C               	subwfb	__tdiv_to_l_@f1+2,w,c
  9732  0037F8  A0D8               	btfss	status,0,c
  9733  0037FA  D007               	goto	l1907
  9734  0037FC  501D               	movf	__tdiv_to_l_@f2,w,c
  9735  0037FE  5E1A               	subwf	__tdiv_to_l_@f1,f,c
  9736  003800  501E               	movf	__tdiv_to_l_@f2+1,w,c
  9737  003802  5A1B               	subwfb	__tdiv_to_l_@f1+1,f,c
  9738  003804  501F               	movf	__tdiv_to_l_@f2+2,w,c
  9739  003806  5A1C               	subwfb	__tdiv_to_l_@f1+2,f,c
  9740  003808  8023               	bsf	__tdiv_to_l_@quot,0,c
  9741  00380A                     l1907:
  9742  00380A  90D8               	bcf	status,0,c
  9743  00380C  361A               	rlcf	__tdiv_to_l_@f1,f,c
  9744  00380E  361B               	rlcf	__tdiv_to_l_@f1+1,f,c
  9745  003810  361C               	rlcf	__tdiv_to_l_@f1+2,f,c
  9746  003812  2E27               	decfsz	__tdiv_to_l_@cntr,f,c
  9747  003814  D7E6               	goto	l1906
  9748  003816  AE28               	btfss	__tdiv_to_l_@exp1,7,c
  9749  003818  D016               	goto	l1909
  9750  00381A  5028               	movf	__tdiv_to_l_@exp1,w,c
  9751  00381C  0A80               	xorlw	128
  9752  00381E  0F97               	addlw	151
  9753  003820  B0D8               	btfsc	status,0,c
  9754  003822  D009               	goto	l1910
  9755  003824  0E00               	movlw	0
  9756  003826  6E1A               	movwf	?__tdiv_to_l_,c
  9757  003828  0E00               	movlw	0
  9758  00382A  6E1B               	movwf	?__tdiv_to_l_+1,c
  9759  00382C  0E00               	movlw	0
  9760  00382E  6E1C               	movwf	?__tdiv_to_l_+2,c
  9761  003830  0E00               	movlw	0
  9762  003832  6E1D               	movwf	?__tdiv_to_l_+3,c
  9763  003834  0012               	return	
  9764  003836                     l1910:
  9765  003836  90D8               	bcf	status,0,c
  9766  003838  3226               	rrcf	__tdiv_to_l_@quot+3,f,c
  9767  00383A  3225               	rrcf	__tdiv_to_l_@quot+2,f,c
  9768  00383C  3224               	rrcf	__tdiv_to_l_@quot+1,f,c
  9769  00383E  3223               	rrcf	__tdiv_to_l_@quot,f,c
  9770  003840  3E28               	incfsz	__tdiv_to_l_@exp1,f,c
  9771  003842  D7F9               	goto	l1910
  9772  003844  D015               	goto	u8600
  9773  003846                     l1909:
  9774  003846  0E17               	movlw	23
  9775  003848  6428               	cpfsgt	__tdiv_to_l_@exp1,c
  9776  00384A  D00F               	goto	l1915
  9777  00384C  0E00               	movlw	0
  9778  00384E  6E1A               	movwf	?__tdiv_to_l_,c
  9779  003850  0E00               	movlw	0
  9780  003852  6E1B               	movwf	?__tdiv_to_l_+1,c
  9781  003854  0E00               	movlw	0
  9782  003856  6E1C               	movwf	?__tdiv_to_l_+2,c
  9783  003858  0E00               	movlw	0
  9784  00385A  6E1D               	movwf	?__tdiv_to_l_+3,c
  9785  00385C  0012               	return	
  9786  00385E  90D8               	bcf	status,0,c
  9787  003860  3623               	rlcf	__tdiv_to_l_@quot,f,c
  9788  003862  3624               	rlcf	__tdiv_to_l_@quot+1,f,c
  9789  003864  3625               	rlcf	__tdiv_to_l_@quot+2,f,c
  9790  003866  3626               	rlcf	__tdiv_to_l_@quot+3,f,c
  9791  003868  0628               	decf	__tdiv_to_l_@exp1,f,c
  9792  00386A                     l1915:
  9793  00386A  5028               	movf	__tdiv_to_l_@exp1,w,c
  9794  00386C  A4D8               	btfss	status,2,c
  9795  00386E  D7F7               	goto	l1916
  9796  003870                     u8600:
  9797  003870  C023  F01A         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9798  003874  C024  F01B         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9799  003878  C025  F01C         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9800  00387C  C026  F01D         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9801  003880  0012               	return		;funcret
  9802  003882                     __end_of__tdiv_to_l_:
  9803                           	opt stack 0
  9804                           tosu	equ	0xFFF
  9805                           tosh	equ	0xFFE
  9806                           tosl	equ	0xFFD
  9807                           pclath	equ	0xFFA
  9808                           tblptru	equ	0xFF8
  9809                           tblptrh	equ	0xFF7
  9810                           tblptrl	equ	0xFF6
  9811                           tablat	equ	0xFF5
  9812                           prodh	equ	0xFF4
  9813                           prodl	equ	0xFF3
  9814                           intcon	equ	0xFF2
  9815                           intcon2	equ	0xFF1
  9816                           intcon3	equ	0xFF0
  9817                           postinc0	equ	0xFEE
  9818                           wreg	equ	0xFE8
  9819                           indf1	equ	0xFE7
  9820                           postinc1	equ	0xFE6
  9821                           postdec1	equ	0xFE5
  9822                           fsr1h	equ	0xFE2
  9823                           fsr1l	equ	0xFE1
  9824                           indf2	equ	0xFDF
  9825                           postinc2	equ	0xFDE
  9826                           postdec2	equ	0xFDD
  9827                           fsr2h	equ	0xFDA
  9828                           fsr2l	equ	0xFD9
  9829                           status	equ	0xFD8
  9830                           
  9831 ;; *************** function __div_to_l_ *****************
  9832 ;; Defined at:
  9833 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;  f1              3   25[COMRAM] unsigned long 
  9836 ;;  f2              3   28[COMRAM] unsigned long 
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;  quot            4   31[COMRAM] unsigned long 
  9839 ;;  exp1            1   36[COMRAM] unsigned char 
  9840 ;;  cntr            1   35[COMRAM] unsigned char 
  9841 ;; Return value:  Size  Location     Type
  9842 ;;                  4   25[COMRAM] unsigned long 
  9843 ;; Registers used:
  9844 ;;		wreg, status,2, status,0
  9845 ;; Tracked objects:
  9846 ;;		On entry : 0/0
  9847 ;;		On exit  : 0/0
  9848 ;;		Unchanged: 0/0
  9849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9850 ;;      Params:         6       0       0       0       0       0       0       0       0
  9851 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9852 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9853 ;;      Totals:        12       0       0       0       0       0       0       0       0
  9854 ;;Total ram usage:       12 bytes
  9855 ;; Hardware stack levels used:    1
  9856 ;; Hardware stack levels required when called:    2
  9857 ;; This function calls:
  9858 ;;		Nothing
  9859 ;; This function is called by:
  9860 ;;		_sprintf
  9861 ;; This function uses a non-reentrant model
  9862 ;;
  9863                           
  9864                           	psect	text39
  9865  0039AC                     __ptext39:
  9866                           	opt stack 0
  9867  0039AC                     __div_to_l_:
  9868                           	opt stack 25
  9869                           
  9870                           ;incstack = 0
  9871  0039AC  341C               	rlcf	__div_to_l_@f1+2,w,c
  9872  0039AE  341D               	rlcf	__div_to_l_@f1+3,w,c
  9873  0039B0  6E25               	movwf	__div_to_l_@exp1,c
  9874  0039B2  5025               	movf	__div_to_l_@exp1,w,c
  9875  0039B4  A4D8               	btfss	status,2,c
  9876  0039B6  D009               	goto	l1799
  9877  0039B8  0E00               	movlw	0
  9878  0039BA  6E1A               	movwf	?__div_to_l_,c
  9879  0039BC  0E00               	movlw	0
  9880  0039BE  6E1B               	movwf	?__div_to_l_+1,c
  9881  0039C0  0E00               	movlw	0
  9882  0039C2  6E1C               	movwf	?__div_to_l_+2,c
  9883  0039C4  0E00               	movlw	0
  9884  0039C6  6E1D               	movwf	?__div_to_l_+3,c
  9885  0039C8  0012               	return	
  9886  0039CA                     l1799:
  9887  0039CA  341F               	rlcf	__div_to_l_@f2+2,w,c
  9888  0039CC  3420               	rlcf	__div_to_l_@f2+3,w,c
  9889  0039CE  6E24               	movwf	__div_to_l_@cntr,c
  9890  0039D0  5024               	movf	__div_to_l_@cntr,w,c
  9891  0039D2  A4D8               	btfss	status,2,c
  9892  0039D4  D009               	goto	l1801
  9893  0039D6  0E00               	movlw	0
  9894  0039D8  6E1A               	movwf	?__div_to_l_,c
  9895  0039DA  0E00               	movlw	0
  9896  0039DC  6E1B               	movwf	?__div_to_l_+1,c
  9897  0039DE  0E00               	movlw	0
  9898  0039E0  6E1C               	movwf	?__div_to_l_+2,c
  9899  0039E2  0E00               	movlw	0
  9900  0039E4  6E1D               	movwf	?__div_to_l_+3,c
  9901  0039E6  0012               	return	
  9902  0039E8                     l1801:
  9903  0039E8  8E1C               	bsf	__div_to_l_@f1+2,7,c
  9904  0039EA  0EFF               	movlw	255
  9905  0039EC  161A               	andwf	__div_to_l_@f1,f,c
  9906  0039EE  0EFF               	movlw	255
  9907  0039F0  161B               	andwf	__div_to_l_@f1+1,f,c
  9908  0039F2  0EFF               	movlw	255
  9909  0039F4  161C               	andwf	__div_to_l_@f1+2,f,c
  9910  0039F6  0E00               	movlw	0
  9911  0039F8  161D               	andwf	__div_to_l_@f1+3,f,c
  9912  0039FA  8E1F               	bsf	__div_to_l_@f2+2,7,c
  9913  0039FC  0EFF               	movlw	255
  9914  0039FE  161D               	andwf	__div_to_l_@f2,f,c
  9915  003A00  0EFF               	movlw	255
  9916  003A02  161E               	andwf	__div_to_l_@f2+1,f,c
  9917  003A04  0EFF               	movlw	255
  9918  003A06  161F               	andwf	__div_to_l_@f2+2,f,c
  9919  003A08  0E00               	movlw	0
  9920  003A0A  1620               	andwf	__div_to_l_@f2+3,f,c
  9921  003A0C  0E00               	movlw	0
  9922  003A0E  6E20               	movwf	__div_to_l_@quot,c
  9923  003A10  0E00               	movlw	0
  9924  003A12  6E21               	movwf	__div_to_l_@quot+1,c
  9925  003A14  0E00               	movlw	0
  9926  003A16  6E22               	movwf	__div_to_l_@quot+2,c
  9927  003A18  0E00               	movlw	0
  9928  003A1A  6E23               	movwf	__div_to_l_@quot+3,c
  9929  003A1C  0E7F               	movlw	127
  9930  003A1E  5E25               	subwf	__div_to_l_@exp1,f,c
  9931  003A20  5024               	movf	__div_to_l_@cntr,w,c
  9932  003A22  0FA0               	addlw	160
  9933  003A24  5E25               	subwf	__div_to_l_@exp1,f,c
  9934  003A26  0E20               	movlw	32
  9935  003A28  6E24               	movwf	__div_to_l_@cntr,c
  9936  003A2A  90D8               	bcf	status,0,c
  9937  003A2C  3620               	rlcf	__div_to_l_@quot,f,c
  9938  003A2E  3621               	rlcf	__div_to_l_@quot+1,f,c
  9939  003A30  3622               	rlcf	__div_to_l_@quot+2,f,c
  9940  003A32  3623               	rlcf	__div_to_l_@quot+3,f,c
  9941  003A34  501D               	movf	__div_to_l_@f2,w,c
  9942  003A36  5C1A               	subwf	__div_to_l_@f1,w,c
  9943  003A38  501E               	movf	__div_to_l_@f2+1,w,c
  9944  003A3A  581B               	subwfb	__div_to_l_@f1+1,w,c
  9945  003A3C  501F               	movf	__div_to_l_@f2+2,w,c
  9946  003A3E  581C               	subwfb	__div_to_l_@f1+2,w,c
  9947  003A40  5020               	movf	__div_to_l_@f2+3,w,c
  9948  003A42  581D               	subwfb	__div_to_l_@f1+3,w,c
  9949  003A44  A0D8               	btfss	status,0,c
  9950  003A46  D009               	goto	l1803
  9951  003A48  501D               	movf	__div_to_l_@f2,w,c
  9952  003A4A  5E1A               	subwf	__div_to_l_@f1,f,c
  9953  003A4C  501E               	movf	__div_to_l_@f2+1,w,c
  9954  003A4E  5A1B               	subwfb	__div_to_l_@f1+1,f,c
  9955  003A50  501F               	movf	__div_to_l_@f2+2,w,c
  9956  003A52  5A1C               	subwfb	__div_to_l_@f1+2,f,c
  9957  003A54  5020               	movf	__div_to_l_@f2+3,w,c
  9958  003A56  5A1D               	subwfb	__div_to_l_@f1+3,f,c
  9959  003A58  8020               	bsf	__div_to_l_@quot,0,c
  9960  003A5A                     l1803:
  9961  003A5A  90D8               	bcf	status,0,c
  9962  003A5C  361A               	rlcf	__div_to_l_@f1,f,c
  9963  003A5E  361B               	rlcf	__div_to_l_@f1+1,f,c
  9964  003A60  361C               	rlcf	__div_to_l_@f1+2,f,c
  9965  003A62  361D               	rlcf	__div_to_l_@f1+3,f,c
  9966  003A64  2E24               	decfsz	__div_to_l_@cntr,f,c
  9967  003A66  D7E1               	goto	l1802
  9968  003A68  AE25               	btfss	__div_to_l_@exp1,7,c
  9969  003A6A  D016               	goto	l1805
  9970  003A6C  5025               	movf	__div_to_l_@exp1,w,c
  9971  003A6E  0A80               	xorlw	128
  9972  003A70  0F9F               	addlw	159
  9973  003A72  B0D8               	btfsc	status,0,c
  9974  003A74  D009               	goto	l1806
  9975  003A76  0E00               	movlw	0
  9976  003A78  6E1A               	movwf	?__div_to_l_,c
  9977  003A7A  0E00               	movlw	0
  9978  003A7C  6E1B               	movwf	?__div_to_l_+1,c
  9979  003A7E  0E00               	movlw	0
  9980  003A80  6E1C               	movwf	?__div_to_l_+2,c
  9981  003A82  0E00               	movlw	0
  9982  003A84  6E1D               	movwf	?__div_to_l_+3,c
  9983  003A86  0012               	return	
  9984  003A88                     l1806:
  9985  003A88  90D8               	bcf	status,0,c
  9986  003A8A  3223               	rrcf	__div_to_l_@quot+3,f,c
  9987  003A8C  3222               	rrcf	__div_to_l_@quot+2,f,c
  9988  003A8E  3221               	rrcf	__div_to_l_@quot+1,f,c
  9989  003A90  3220               	rrcf	__div_to_l_@quot,f,c
  9990  003A92  3E25               	incfsz	__div_to_l_@exp1,f,c
  9991  003A94  D7F9               	goto	l1806
  9992  003A96  D015               	goto	u8670
  9993  003A98                     l1805:
  9994  003A98  0E1F               	movlw	31
  9995  003A9A  6425               	cpfsgt	__div_to_l_@exp1,c
  9996  003A9C  D00F               	goto	l1811
  9997  003A9E  0E00               	movlw	0
  9998  003AA0  6E1A               	movwf	?__div_to_l_,c
  9999  003AA2  0E00               	movlw	0
 10000  003AA4  6E1B               	movwf	?__div_to_l_+1,c
 10001  003AA6  0E00               	movlw	0
 10002  003AA8  6E1C               	movwf	?__div_to_l_+2,c
 10003  003AAA  0E00               	movlw	0
 10004  003AAC  6E1D               	movwf	?__div_to_l_+3,c
 10005  003AAE  0012               	return	
 10006  003AB0  90D8               	bcf	status,0,c
 10007  003AB2  3620               	rlcf	__div_to_l_@quot,f,c
 10008  003AB4  3621               	rlcf	__div_to_l_@quot+1,f,c
 10009  003AB6  3622               	rlcf	__div_to_l_@quot+2,f,c
 10010  003AB8  3623               	rlcf	__div_to_l_@quot+3,f,c
 10011  003ABA  0625               	decf	__div_to_l_@exp1,f,c
 10012  003ABC                     l1811:
 10013  003ABC  5025               	movf	__div_to_l_@exp1,w,c
 10014  003ABE  A4D8               	btfss	status,2,c
 10015  003AC0  D7F7               	goto	l1812
 10016  003AC2                     u8670:
 10017  003AC2  C020  F01A         	movff	__div_to_l_@quot,?__div_to_l_
 10018  003AC6  C021  F01B         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 10019  003ACA  C022  F01C         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 10020  003ACE  C023  F01D         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 10021  003AD2  0012               	return		;funcret
 10022  003AD4                     __end_of__div_to_l_:
 10023                           	opt stack 0
 10024                           tosu	equ	0xFFF
 10025                           tosh	equ	0xFFE
 10026                           tosl	equ	0xFFD
 10027                           pclath	equ	0xFFA
 10028                           tblptru	equ	0xFF8
 10029                           tblptrh	equ	0xFF7
 10030                           tblptrl	equ	0xFF6
 10031                           tablat	equ	0xFF5
 10032                           prodh	equ	0xFF4
 10033                           prodl	equ	0xFF3
 10034                           intcon	equ	0xFF2
 10035                           intcon2	equ	0xFF1
 10036                           intcon3	equ	0xFF0
 10037                           postinc0	equ	0xFEE
 10038                           wreg	equ	0xFE8
 10039                           indf1	equ	0xFE7
 10040                           postinc1	equ	0xFE6
 10041                           postdec1	equ	0xFE5
 10042                           fsr1h	equ	0xFE2
 10043                           fsr1l	equ	0xFE1
 10044                           indf2	equ	0xFDF
 10045                           postinc2	equ	0xFDE
 10046                           postdec2	equ	0xFDD
 10047                           fsr2h	equ	0xFDA
 10048                           fsr2l	equ	0xFD9
 10049                           status	equ	0xFD8
 10050                           
 10051 ;; *************** function ___lltoft *****************
 10052 ;; Defined at:
 10053 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 10054 ;; Parameters:    Size  Location     Type
 10055 ;;  c               4   33[COMRAM] unsigned long 
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;  exp             1   41[COMRAM] unsigned char 
 10058 ;; Return value:  Size  Location     Type
 10059 ;;                  3   33[COMRAM] float 
 10060 ;; Registers used:
 10061 ;;		wreg, status,2, status,0, cstack
 10062 ;; Tracked objects:
 10063 ;;		On entry : 0/0
 10064 ;;		On exit  : 0/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10067 ;;      Params:         4       0       0       0       0       0       0       0       0
 10068 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10069 ;;      Temps:          4       0       0       0       0       0       0       0       0
 10070 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10071 ;;Total ram usage:        9 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; Hardware stack levels required when called:    3
 10074 ;; This function calls:
 10075 ;;		___ftpack
 10076 ;; This function is called by:
 10077 ;;		_sprintf
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           	psect	text40
 10082  004B48                     __ptext40:
 10083                           	opt stack 0
 10084  004B48                     ___lltoft:
 10085                           	opt stack 24
 10086                           
 10087                           ;incstack = 0
 10088  004B48  0E8E               	movlw	142
 10089  004B4A  6E2A               	movwf	___lltoft@exp,c
 10090  004B4C  D006               	goto	l2029
 10091  004B4E  90D8               	bcf	status,0,c
 10092  004B50  3225               	rrcf	___lltoft@c+3,f,c
 10093  004B52  3224               	rrcf	___lltoft@c+2,f,c
 10094  004B54  3223               	rrcf	___lltoft@c+1,f,c
 10095  004B56  3222               	rrcf	___lltoft@c,f,c
 10096  004B58  2A2A               	incf	___lltoft@exp,f,c
 10097  004B5A                     l2029:
 10098  004B5A  0E00               	movlw	0
 10099  004B5C  1422               	andwf	___lltoft@c,w,c
 10100  004B5E  6E26               	movwf	??___lltoft& (0+255),c
 10101  004B60  0E00               	movlw	0
 10102  004B62  1423               	andwf	___lltoft@c+1,w,c
 10103  004B64  6E27               	movwf	(??___lltoft+1)& (0+255),c
 10104  004B66  0E00               	movlw	0
 10105  004B68  1424               	andwf	___lltoft@c+2,w,c
 10106  004B6A  6E28               	movwf	(??___lltoft+2)& (0+255),c
 10107  004B6C  0EFF               	movlw	255
 10108  004B6E  1425               	andwf	___lltoft@c+3,w,c
 10109  004B70  6E29               	movwf	(??___lltoft+3)& (0+255),c
 10110  004B72  5026               	movf	??___lltoft,w,c
 10111  004B74  1027               	iorwf	??___lltoft+1,w,c
 10112  004B76  1028               	iorwf	??___lltoft+2,w,c
 10113  004B78  1029               	iorwf	??___lltoft+3,w,c
 10114  004B7A  A4D8               	btfss	status,2,c
 10115  004B7C  D7E8               	goto	l2030
 10116  004B7E  C022  F01A         	movff	___lltoft@c,___ftpack@arg
 10117  004B82  C023  F01B         	movff	___lltoft@c+1,___ftpack@arg+1
 10118  004B86  C024  F01C         	movff	___lltoft@c+2,___ftpack@arg+2
 10119  004B8A  C02A  F01D         	movff	___lltoft@exp,___ftpack@exp
 10120  004B8E  0E00               	movlw	0
 10121  004B90  6E1E               	movwf	___ftpack@sign,c
 10122  004B92  ECC5  F020         	call	___ftpack	;wreg free
 10123  004B96  C01A  F022         	movff	?___ftpack,?___lltoft
 10124  004B9A  C01B  F023         	movff	?___ftpack+1,?___lltoft+1
 10125  004B9E  C01C  F024         	movff	?___ftpack+2,?___lltoft+2
 10126  004BA2  0012               	return	
 10127  004BA4                     __end_of___lltoft:
 10128                           	opt stack 0
 10129                           tosu	equ	0xFFF
 10130                           tosh	equ	0xFFE
 10131                           tosl	equ	0xFFD
 10132                           pclath	equ	0xFFA
 10133                           tblptru	equ	0xFF8
 10134                           tblptrh	equ	0xFF7
 10135                           tblptrl	equ	0xFF6
 10136                           tablat	equ	0xFF5
 10137                           prodh	equ	0xFF4
 10138                           prodl	equ	0xFF3
 10139                           intcon	equ	0xFF2
 10140                           intcon2	equ	0xFF1
 10141                           intcon3	equ	0xFF0
 10142                           postinc0	equ	0xFEE
 10143                           wreg	equ	0xFE8
 10144                           indf1	equ	0xFE7
 10145                           postinc1	equ	0xFE6
 10146                           postdec1	equ	0xFE5
 10147                           fsr1h	equ	0xFE2
 10148                           fsr1l	equ	0xFE1
 10149                           indf2	equ	0xFDF
 10150                           postinc2	equ	0xFDE
 10151                           postdec2	equ	0xFDD
 10152                           fsr2h	equ	0xFDA
 10153                           fsr2l	equ	0xFD9
 10154                           status	equ	0xFD8
 10155                           
 10156 ;; *************** function ___llmod *****************
 10157 ;; Defined at:
 10158 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 10159 ;; Parameters:    Size  Location     Type
 10160 ;;  dividend        4   25[COMRAM] unsigned long 
 10161 ;;  divisor         4   29[COMRAM] unsigned long 
 10162 ;; Auto vars:     Size  Location     Type
 10163 ;;  counter         1   33[COMRAM] unsigned char 
 10164 ;; Return value:  Size  Location     Type
 10165 ;;                  4   25[COMRAM] unsigned long 
 10166 ;; Registers used:
 10167 ;;		wreg, status,2, status,0
 10168 ;; Tracked objects:
 10169 ;;		On entry : 0/0
 10170 ;;		On exit  : 0/0
 10171 ;;		Unchanged: 0/0
 10172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10173 ;;      Params:         8       0       0       0       0       0       0       0       0
 10174 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10175 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10176 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10177 ;;Total ram usage:        9 bytes
 10178 ;; Hardware stack levels used:    1
 10179 ;; Hardware stack levels required when called:    2
 10180 ;; This function calls:
 10181 ;;		Nothing
 10182 ;; This function is called by:
 10183 ;;		_convert_time_to_utc
 10184 ;;		_sprintf
 10185 ;; This function uses a non-reentrant model
 10186 ;;
 10187                           
 10188                           	psect	text41
 10189  004AE2                     __ptext41:
 10190                           	opt stack 0
 10191  004AE2                     ___llmod:
 10192                           	opt stack 25
 10193                           
 10194                           ;incstack = 0
 10195  004AE2  501E               	movf	___llmod@divisor,w,c
 10196  004AE4  101F               	iorwf	___llmod@divisor+1,w,c
 10197  004AE6  1020               	iorwf	___llmod@divisor+2,w,c
 10198  004AE8  1021               	iorwf	___llmod@divisor+3,w,c
 10199  004AEA  B4D8               	btfsc	status,2,c
 10200  004AEC  D024               	goto	l2023
 10201  004AEE  0E01               	movlw	1
 10202  004AF0  6E22               	movwf	___llmod@counter,c
 10203  004AF2  D006               	goto	l2018
 10204  004AF4  90D8               	bcf	status,0,c
 10205  004AF6  361E               	rlcf	___llmod@divisor,f,c
 10206  004AF8  361F               	rlcf	___llmod@divisor+1,f,c
 10207  004AFA  3620               	rlcf	___llmod@divisor+2,f,c
 10208  004AFC  3621               	rlcf	___llmod@divisor+3,f,c
 10209  004AFE  2A22               	incf	___llmod@counter,f,c
 10210  004B00                     l2018:
 10211  004B00  AE21               	btfss	___llmod@divisor+3,7,c
 10212  004B02  D7F8               	goto	l2019
 10213  004B04                     u9140:
 10214  004B04  501E               	movf	___llmod@divisor,w,c
 10215  004B06  5C1A               	subwf	___llmod@dividend,w,c
 10216  004B08  501F               	movf	___llmod@divisor+1,w,c
 10217  004B0A  581B               	subwfb	___llmod@dividend+1,w,c
 10218  004B0C  5020               	movf	___llmod@divisor+2,w,c
 10219  004B0E  581C               	subwfb	___llmod@dividend+2,w,c
 10220  004B10  5021               	movf	___llmod@divisor+3,w,c
 10221  004B12  581D               	subwfb	___llmod@dividend+3,w,c
 10222  004B14  A0D8               	btfss	status,0,c
 10223  004B16  D008               	goto	l2022
 10224  004B18  501E               	movf	___llmod@divisor,w,c
 10225  004B1A  5E1A               	subwf	___llmod@dividend,f,c
 10226  004B1C  501F               	movf	___llmod@divisor+1,w,c
 10227  004B1E  5A1B               	subwfb	___llmod@dividend+1,f,c
 10228  004B20  5020               	movf	___llmod@divisor+2,w,c
 10229  004B22  5A1C               	subwfb	___llmod@dividend+2,f,c
 10230  004B24  5021               	movf	___llmod@divisor+3,w,c
 10231  004B26  5A1D               	subwfb	___llmod@dividend+3,f,c
 10232  004B28                     l2022:
 10233  004B28  90D8               	bcf	status,0,c
 10234  004B2A  3221               	rrcf	___llmod@divisor+3,f,c
 10235  004B2C  3220               	rrcf	___llmod@divisor+2,f,c
 10236  004B2E  321F               	rrcf	___llmod@divisor+1,f,c
 10237  004B30  321E               	rrcf	___llmod@divisor,f,c
 10238  004B32  2E22               	decfsz	___llmod@counter,f,c
 10239  004B34  D7E7               	goto	u9140
 10240  004B36                     l2023:
 10241  004B36  C01A  F01A         	movff	___llmod@dividend,?___llmod
 10242  004B3A  C01B  F01B         	movff	___llmod@dividend+1,?___llmod+1
 10243  004B3E  C01C  F01C         	movff	___llmod@dividend+2,?___llmod+2
 10244  004B42  C01D  F01D         	movff	___llmod@dividend+3,?___llmod+3
 10245  004B46  0012               	return		;funcret
 10246  004B48                     __end_of___llmod:
 10247                           	opt stack 0
 10248                           tosu	equ	0xFFF
 10249                           tosh	equ	0xFFE
 10250                           tosl	equ	0xFFD
 10251                           pclath	equ	0xFFA
 10252                           tblptru	equ	0xFF8
 10253                           tblptrh	equ	0xFF7
 10254                           tblptrl	equ	0xFF6
 10255                           tablat	equ	0xFF5
 10256                           prodh	equ	0xFF4
 10257                           prodl	equ	0xFF3
 10258                           intcon	equ	0xFF2
 10259                           intcon2	equ	0xFF1
 10260                           intcon3	equ	0xFF0
 10261                           postinc0	equ	0xFEE
 10262                           wreg	equ	0xFE8
 10263                           indf1	equ	0xFE7
 10264                           postinc1	equ	0xFE6
 10265                           postdec1	equ	0xFE5
 10266                           fsr1h	equ	0xFE2
 10267                           fsr1l	equ	0xFE1
 10268                           indf2	equ	0xFDF
 10269                           postinc2	equ	0xFDE
 10270                           postdec2	equ	0xFDD
 10271                           fsr2h	equ	0xFDA
 10272                           fsr2l	equ	0xFD9
 10273                           status	equ	0xFD8
 10274                           
 10275 ;; *************** function ___lldiv *****************
 10276 ;; Defined at:
 10277 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 10278 ;; Parameters:    Size  Location     Type
 10279 ;;  dividend        4   34[COMRAM] unsigned long 
 10280 ;;  divisor         4   38[COMRAM] unsigned long 
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;  quotient        4    0[BANK0 ] unsigned long 
 10283 ;;  counter         1    4[BANK0 ] unsigned char 
 10284 ;; Return value:  Size  Location     Type
 10285 ;;                  4   34[COMRAM] unsigned long 
 10286 ;; Registers used:
 10287 ;;		wreg, status,2, status,0
 10288 ;; Tracked objects:
 10289 ;;		On entry : 0/0
 10290 ;;		On exit  : 0/0
 10291 ;;		Unchanged: 0/0
 10292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10293 ;;      Params:         8       0       0       0       0       0       0       0       0
 10294 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10295 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10296 ;;      Totals:         8       5       0       0       0       0       0       0       0
 10297 ;;Total ram usage:       13 bytes
 10298 ;; Hardware stack levels used:    1
 10299 ;; Hardware stack levels required when called:    2
 10300 ;; This function calls:
 10301 ;;		Nothing
 10302 ;; This function is called by:
 10303 ;;		_convert_time_to_utc
 10304 ;;		_sprintf
 10305 ;;		_chk_mounted
 10306 ;;		_f_lseek
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310                           	psect	text42
 10311  0046DC                     __ptext42:
 10312                           	opt stack 0
 10313  0046DC                     ___lldiv:
 10314                           	opt stack 25
 10315                           
 10316                           ;incstack = 0
 10317  0046DC  0E00               	movlw	0
 10318  0046DE  0100               	movlb	0	; () banked
 10319  0046E0  6F60               	movwf	___lldiv@quotient& (0+255),b
 10320  0046E2  0E00               	movlw	0
 10321  0046E4  6F61               	movwf	(___lldiv@quotient+1)& (0+255),b
 10322  0046E6  0E00               	movlw	0
 10323  0046E8  6F62               	movwf	(___lldiv@quotient+2)& (0+255),b
 10324  0046EA  0E00               	movlw	0
 10325  0046EC  6F63               	movwf	(___lldiv@quotient+3)& (0+255),b
 10326                           
 10327                           ; BSR set to: 0
 10328  0046EE  5027               	movf	___lldiv@divisor,w,c
 10329  0046F0  1028               	iorwf	___lldiv@divisor+1,w,c
 10330  0046F2  1029               	iorwf	___lldiv@divisor+2,w,c
 10331  0046F4  102A               	iorwf	___lldiv@divisor+3,w,c
 10332  0046F6  B4D8               	btfsc	status,2,c
 10333  0046F8  D02A               	goto	l2013
 10334                           
 10335                           ; BSR set to: 0
 10336  0046FA  0E01               	movlw	1
 10337  0046FC  6F64               	movwf	___lldiv@counter& (0+255),b
 10338  0046FE  D006               	goto	l2008
 10339  004700                     
 10340                           ; BSR set to: 0
 10341                           
 10342                           ; BSR set to: 0
 10343  004700  90D8               	bcf	status,0,c
 10344  004702  3627               	rlcf	___lldiv@divisor,f,c
 10345  004704  3628               	rlcf	___lldiv@divisor+1,f,c
 10346  004706  3629               	rlcf	___lldiv@divisor+2,f,c
 10347  004708  362A               	rlcf	___lldiv@divisor+3,f,c
 10348  00470A  2B64               	incf	___lldiv@counter& (0+255),f,b
 10349  00470C                     l2008:
 10350                           
 10351                           ; BSR set to: 0
 10352                           
 10353                           ; BSR set to: 0
 10354  00470C  AE2A               	btfss	___lldiv@divisor+3,7,c
 10355  00470E  D7F8               	goto	l2009
 10356  004710                     u15320:
 10357                           
 10358                           ; BSR set to: 0
 10359                           
 10360                           ; BSR set to: 0
 10361                           
 10362                           ; BSR set to: 0
 10363  004710  90D8               	bcf	status,0,c
 10364  004712  3760               	rlcf	___lldiv@quotient& (0+255),f,b
 10365  004714  3761               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 10366  004716  3762               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 10367  004718  3763               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 10368                           
 10369                           ; BSR set to: 0
 10370  00471A  5027               	movf	___lldiv@divisor,w,c
 10371  00471C  5C23               	subwf	___lldiv@dividend,w,c
 10372  00471E  5028               	movf	___lldiv@divisor+1,w,c
 10373  004720  5824               	subwfb	___lldiv@dividend+1,w,c
 10374  004722  5029               	movf	___lldiv@divisor+2,w,c
 10375  004724  5825               	subwfb	___lldiv@dividend+2,w,c
 10376  004726  502A               	movf	___lldiv@divisor+3,w,c
 10377  004728  5826               	subwfb	___lldiv@dividend+3,w,c
 10378  00472A  A0D8               	btfss	status,0,c
 10379  00472C  D009               	goto	l2012
 10380                           
 10381                           ; BSR set to: 0
 10382  00472E  5027               	movf	___lldiv@divisor,w,c
 10383  004730  5E23               	subwf	___lldiv@dividend,f,c
 10384  004732  5028               	movf	___lldiv@divisor+1,w,c
 10385  004734  5A24               	subwfb	___lldiv@dividend+1,f,c
 10386  004736  5029               	movf	___lldiv@divisor+2,w,c
 10387  004738  5A25               	subwfb	___lldiv@dividend+2,f,c
 10388  00473A  502A               	movf	___lldiv@divisor+3,w,c
 10389  00473C  5A26               	subwfb	___lldiv@dividend+3,f,c
 10390                           
 10391                           ; BSR set to: 0
 10392  00473E  8160               	bsf	___lldiv@quotient& (0+255),0,b
 10393  004740                     l2012:
 10394                           
 10395                           ; BSR set to: 0
 10396                           
 10397                           ; BSR set to: 0
 10398  004740  90D8               	bcf	status,0,c
 10399  004742  322A               	rrcf	___lldiv@divisor+3,f,c
 10400  004744  3229               	rrcf	___lldiv@divisor+2,f,c
 10401  004746  3228               	rrcf	___lldiv@divisor+1,f,c
 10402  004748  3227               	rrcf	___lldiv@divisor,f,c
 10403                           
 10404                           ; BSR set to: 0
 10405  00474A  2F64               	decfsz	___lldiv@counter& (0+255),f,b
 10406  00474C  D7E1               	goto	u15320
 10407  00474E                     l2013:
 10408                           
 10409                           ; BSR set to: 0
 10410                           
 10411                           ; BSR set to: 0
 10412  00474E  C060  F023         	movff	___lldiv@quotient,?___lldiv
 10413  004752  C061  F024         	movff	___lldiv@quotient+1,?___lldiv+1
 10414  004756  C062  F025         	movff	___lldiv@quotient+2,?___lldiv+2
 10415  00475A  C063  F026         	movff	___lldiv@quotient+3,?___lldiv+3
 10416                           
 10417                           ; BSR set to: 0
 10418  00475E  0012               	return		;funcret
 10419  004760                     __end_of___lldiv:
 10420                           	opt stack 0
 10421                           tosu	equ	0xFFF
 10422                           tosh	equ	0xFFE
 10423                           tosl	equ	0xFFD
 10424                           pclath	equ	0xFFA
 10425                           tblptru	equ	0xFF8
 10426                           tblptrh	equ	0xFF7
 10427                           tblptrl	equ	0xFF6
 10428                           tablat	equ	0xFF5
 10429                           prodh	equ	0xFF4
 10430                           prodl	equ	0xFF3
 10431                           intcon	equ	0xFF2
 10432                           intcon2	equ	0xFF1
 10433                           intcon3	equ	0xFF0
 10434                           postinc0	equ	0xFEE
 10435                           wreg	equ	0xFE8
 10436                           indf1	equ	0xFE7
 10437                           postinc1	equ	0xFE6
 10438                           postdec1	equ	0xFE5
 10439                           fsr1h	equ	0xFE2
 10440                           fsr1l	equ	0xFE1
 10441                           indf2	equ	0xFDF
 10442                           postinc2	equ	0xFDE
 10443                           postdec2	equ	0xFDD
 10444                           fsr2h	equ	0xFDA
 10445                           fsr2l	equ	0xFD9
 10446                           status	equ	0xFD8
 10447                           
 10448 ;; *************** function ___fttol *****************
 10449 ;; Defined at:
 10450 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 10451 ;; Parameters:    Size  Location     Type
 10452 ;;  f1              3   22[BANK0 ] float 
 10453 ;; Auto vars:     Size  Location     Type
 10454 ;;  lval            4   32[BANK0 ] unsigned long 
 10455 ;;  exp1            1   36[BANK0 ] unsigned char 
 10456 ;;  sign1           1   31[BANK0 ] unsigned char 
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  4   22[BANK0 ] long 
 10459 ;; Registers used:
 10460 ;;		wreg, status,2, status,0
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10466 ;;      Params:         0       4       0       0       0       0       0       0       0
 10467 ;;      Locals:         0       6       0       0       0       0       0       0       0
 10468 ;;      Temps:          0       5       0       0       0       0       0       0       0
 10469 ;;      Totals:         0      15       0       0       0       0       0       0       0
 10470 ;;Total ram usage:       15 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; Hardware stack levels required when called:    2
 10473 ;; This function calls:
 10474 ;;		Nothing
 10475 ;; This function is called by:
 10476 ;;		_convert_to_degrees
 10477 ;;		_sprintf
 10478 ;;		_escreve_float_lcd
 10479 ;; This function uses a non-reentrant model
 10480 ;;
 10481                           
 10482                           	psect	text43
 10483  003DF6                     __ptext43:
 10484                           	opt stack 0
 10485  003DF6                     ___fttol:
 10486                           	opt stack 25
 10487                           
 10488                           ; BSR set to: 0
 10489                           ;incstack = 0
 10490  003DF6  C078  F07A         	movff	___fttol@f1+2,??___fttol
 10491  003DFA  0100               	movlb	0	; () banked
 10492  003DFC  6B7B               	clrf	(??___fttol+1)& (0+255),b
 10493  003DFE  6B7C               	clrf	(??___fttol+2)& (0+255),b
 10494  003E00  3577               	rlcf	(___fttol@f1+1)& (0+255),w,b
 10495  003E02  377A               	rlcf	??___fttol& (0+255),f,b
 10496  003E04  E301               	bnc	u9021
 10497  003E06  817B               	bsf	(??___fttol+1)& (0+255),0,b
 10498  003E08                     u9021:
 10499  003E08  517A               	movf	??___fttol& (0+255),w,b
 10500  003E0A  6F84               	movwf	___fttol@exp1& (0+255),b
 10501  003E0C  5184               	movf	___fttol@exp1& (0+255),w,b
 10502  003E0E  A4D8               	btfss	status,2,c
 10503  003E10  D009               	goto	l1948
 10504                           
 10505                           ; BSR set to: 0
 10506  003E12  0E00               	movlw	0
 10507  003E14  6F76               	movwf	?___fttol& (0+255),b
 10508  003E16  0E00               	movlw	0
 10509  003E18  6F77               	movwf	(?___fttol+1)& (0+255),b
 10510  003E1A  0E00               	movlw	0
 10511  003E1C  6F78               	movwf	(?___fttol+2)& (0+255),b
 10512  003E1E  0E00               	movlw	0
 10513  003E20  6F79               	movwf	(?___fttol+3)& (0+255),b
 10514                           
 10515                           ; BSR set to: 0
 10516  003E22  0012               	return	
 10517  003E24                     l1948:
 10518                           
 10519                           ; BSR set to: 0
 10520                           
 10521                           ; BSR set to: 0
 10522  003E24  0E17               	movlw	23
 10523  003E26  6F7A               	movwf	??___fttol& (0+255),b
 10524  003E28  C076  F07B         	movff	___fttol@f1,??___fttol+1
 10525  003E2C  C077  F07C         	movff	___fttol@f1+1,??___fttol+2
 10526  003E30  C078  F07D         	movff	___fttol@f1+2,??___fttol+3
 10527  003E34  297A               	incf	??___fttol& (0+255),w,b
 10528  003E36  6F7E               	movwf	(??___fttol+4)& (0+255),b
 10529  003E38  D004               	goto	u9040
 10530  003E3A                     u9045:
 10531  003E3A  90D8               	bcf	status,0,c
 10532  003E3C  337D               	rrcf	(??___fttol+3)& (0+255),f,b
 10533  003E3E  337C               	rrcf	(??___fttol+2)& (0+255),f,b
 10534  003E40  337B               	rrcf	(??___fttol+1)& (0+255),f,b
 10535  003E42                     u9040:
 10536  003E42  2F7E               	decfsz	(??___fttol+4)& (0+255),f,b
 10537  003E44  D7FA               	goto	u9045
 10538  003E46  0100               	movlb	0	; () banked
 10539  003E48  517B               	movf	(??___fttol+1)& (0+255),w,b
 10540  003E4A  6F7F               	movwf	___fttol@sign1& (0+255),b
 10541                           
 10542                           ; BSR set to: 0
 10543  003E4C  8F77               	bsf	(___fttol@f1+1)& (0+255),7,b
 10544                           
 10545                           ; BSR set to: 0
 10546  003E4E  0EFF               	movlw	255
 10547  003E50  1776               	andwf	___fttol@f1& (0+255),f,b
 10548  003E52  0EFF               	movlw	255
 10549  003E54  1777               	andwf	(___fttol@f1+1)& (0+255),f,b
 10550  003E56  0E00               	movlw	0
 10551  003E58  1778               	andwf	(___fttol@f1+2)& (0+255),f,b
 10552                           
 10553                           ; BSR set to: 0
 10554  003E5A  5176               	movf	___fttol@f1& (0+255),w,b
 10555  003E5C  6F80               	movwf	___fttol@lval& (0+255),b
 10556  003E5E  5177               	movf	(___fttol@f1+1)& (0+255),w,b
 10557  003E60  6F81               	movwf	(___fttol@lval+1)& (0+255),b
 10558  003E62  5178               	movf	(___fttol@f1+2)& (0+255),w,b
 10559  003E64  6F82               	movwf	(___fttol@lval+2)& (0+255),b
 10560  003E66  6B83               	clrf	(___fttol@lval+3)& (0+255),b
 10561                           
 10562                           ; BSR set to: 0
 10563  003E68  0E8E               	movlw	142
 10564  003E6A  5F84               	subwf	___fttol@exp1& (0+255),f,b
 10565                           
 10566                           ; BSR set to: 0
 10567  003E6C  AF84               	btfss	___fttol@exp1& (0+255),7,b
 10568  003E6E  D016               	goto	l1950
 10569                           
 10570                           ; BSR set to: 0
 10571  003E70  5184               	movf	___fttol@exp1& (0+255),w,b
 10572  003E72  0A80               	xorlw	128
 10573  003E74  0F8F               	addlw	143
 10574  003E76  B0D8               	btfsc	status,0,c
 10575  003E78  D009               	goto	l1951
 10576                           
 10577                           ; BSR set to: 0
 10578  003E7A  0E00               	movlw	0
 10579  003E7C  6F76               	movwf	?___fttol& (0+255),b
 10580  003E7E  0E00               	movlw	0
 10581  003E80  6F77               	movwf	(?___fttol+1)& (0+255),b
 10582  003E82  0E00               	movlw	0
 10583  003E84  6F78               	movwf	(?___fttol+2)& (0+255),b
 10584  003E86  0E00               	movlw	0
 10585  003E88  6F79               	movwf	(?___fttol+3)& (0+255),b
 10586                           
 10587                           ; BSR set to: 0
 10588  003E8A  0012               	return	
 10589  003E8C                     l1951:
 10590                           
 10591                           ; BSR set to: 0
 10592                           
 10593                           ; BSR set to: 0
 10594                           
 10595                           ; BSR set to: 0
 10596  003E8C  90D8               	bcf	status,0,c
 10597  003E8E  3383               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10598  003E90  3382               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10599  003E92  3381               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10600  003E94  3380               	rrcf	___fttol@lval& (0+255),f,b
 10601                           
 10602                           ; BSR set to: 0
 10603  003E96  3F84               	incfsz	___fttol@exp1& (0+255),f,b
 10604  003E98  D7F9               	goto	l1951
 10605                           
 10606                           ; BSR set to: 0
 10607  003E9A  D015               	goto	u9080
 10608  003E9C                     l1950:
 10609                           
 10610                           ; BSR set to: 0
 10611                           
 10612                           ; BSR set to: 0
 10613  003E9C  0E17               	movlw	23
 10614  003E9E  6584               	cpfsgt	___fttol@exp1& (0+255),b
 10615  003EA0  D00F               	goto	l1956
 10616                           
 10617                           ; BSR set to: 0
 10618  003EA2  0E00               	movlw	0
 10619  003EA4  6F76               	movwf	?___fttol& (0+255),b
 10620  003EA6  0E00               	movlw	0
 10621  003EA8  6F77               	movwf	(?___fttol+1)& (0+255),b
 10622  003EAA  0E00               	movlw	0
 10623  003EAC  6F78               	movwf	(?___fttol+2)& (0+255),b
 10624  003EAE  0E00               	movlw	0
 10625  003EB0  6F79               	movwf	(?___fttol+3)& (0+255),b
 10626                           
 10627                           ; BSR set to: 0
 10628  003EB2  0012               	return	
 10629  003EB4                     
 10630                           ; BSR set to: 0
 10631                           
 10632                           ; BSR set to: 0
 10633  003EB4  90D8               	bcf	status,0,c
 10634  003EB6  3780               	rlcf	___fttol@lval& (0+255),f,b
 10635  003EB8  3781               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10636  003EBA  3782               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10637  003EBC  3783               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10638  003EBE  0784               	decf	___fttol@exp1& (0+255),f,b
 10639  003EC0                     l1956:
 10640                           
 10641                           ; BSR set to: 0
 10642                           
 10643                           ; BSR set to: 0
 10644  003EC0  5184               	movf	___fttol@exp1& (0+255),w,b
 10645  003EC2  A4D8               	btfss	status,2,c
 10646  003EC4  D7F7               	goto	l1957
 10647  003EC6                     u9080:
 10648                           
 10649                           ; BSR set to: 0
 10650                           
 10651                           ; BSR set to: 0
 10652                           
 10653                           ; BSR set to: 0
 10654  003EC6  517F               	movf	___fttol@sign1& (0+255),w,b
 10655  003EC8  B4D8               	btfsc	status,2,c
 10656  003ECA  D008               	goto	l1959
 10657                           
 10658                           ; BSR set to: 0
 10659  003ECC  1F83               	comf	(___fttol@lval+3)& (0+255),f,b
 10660  003ECE  1F82               	comf	(___fttol@lval+2)& (0+255),f,b
 10661  003ED0  1F81               	comf	(___fttol@lval+1)& (0+255),f,b
 10662  003ED2  6D80               	negf	___fttol@lval& (0+255),b
 10663  003ED4  0E00               	movlw	0
 10664  003ED6  2381               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10665  003ED8  2382               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10666  003EDA  2383               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10667  003EDC                     l1959:
 10668                           
 10669                           ; BSR set to: 0
 10670                           
 10671                           ; BSR set to: 0
 10672  003EDC  C080  F076         	movff	___fttol@lval,?___fttol
 10673  003EE0  C081  F077         	movff	___fttol@lval+1,?___fttol+1
 10674  003EE4  C082  F078         	movff	___fttol@lval+2,?___fttol+2
 10675  003EE8  C083  F079         	movff	___fttol@lval+3,?___fttol+3
 10676  003EEC  0012               	return	
 10677  003EEE                     __end_of___fttol:
 10678                           	opt stack 0
 10679                           tosu	equ	0xFFF
 10680                           tosh	equ	0xFFE
 10681                           tosl	equ	0xFFD
 10682                           pclath	equ	0xFFA
 10683                           tblptru	equ	0xFF8
 10684                           tblptrh	equ	0xFF7
 10685                           tblptrl	equ	0xFF6
 10686                           tablat	equ	0xFF5
 10687                           prodh	equ	0xFF4
 10688                           prodl	equ	0xFF3
 10689                           intcon	equ	0xFF2
 10690                           intcon2	equ	0xFF1
 10691                           intcon3	equ	0xFF0
 10692                           postinc0	equ	0xFEE
 10693                           wreg	equ	0xFE8
 10694                           indf1	equ	0xFE7
 10695                           postinc1	equ	0xFE6
 10696                           postdec1	equ	0xFE5
 10697                           fsr1h	equ	0xFE2
 10698                           fsr1l	equ	0xFE1
 10699                           indf2	equ	0xFDF
 10700                           postinc2	equ	0xFDE
 10701                           postdec2	equ	0xFDD
 10702                           fsr2h	equ	0xFDA
 10703                           fsr2l	equ	0xFD9
 10704                           status	equ	0xFD8
 10705                           
 10706 ;; *************** function ___ftsub *****************
 10707 ;; Defined at:
 10708 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 10709 ;; Parameters:    Size  Location     Type
 10710 ;;  f1              3   37[BANK0 ] float 
 10711 ;;  f2              3   40[BANK0 ] float 
 10712 ;; Auto vars:     Size  Location     Type
 10713 ;;		None
 10714 ;; Return value:  Size  Location     Type
 10715 ;;                  3   37[BANK0 ] float 
 10716 ;; Registers used:
 10717 ;;		wreg, status,2, status,0, cstack
 10718 ;; Tracked objects:
 10719 ;;		On entry : 0/0
 10720 ;;		On exit  : 0/0
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10723 ;;      Params:         0       6       0       0       0       0       0       0       0
 10724 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10725 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10726 ;;      Totals:         0       6       0       0       0       0       0       0       0
 10727 ;;Total ram usage:        6 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; Hardware stack levels required when called:    4
 10730 ;; This function calls:
 10731 ;;		___ftadd
 10732 ;; This function is called by:
 10733 ;;		_sprintf
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           	psect	text44
 10738  004EDE                     __ptext44:
 10739                           	opt stack 0
 10740  004EDE                     ___ftsub:
 10741                           	opt stack 23
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;incstack = 0
 10745  004EDE  0100               	movlb	0	; () banked
 10746  004EE0  5188               	movf	___ftsub@f2& (0+255),w,b
 10747  004EE2  1189               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10748  004EE4  118A               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10749  004EE6  B4D8               	btfsc	status,2,c
 10750  004EE8  D006               	goto	l1944
 10751                           
 10752                           ; BSR set to: 0
 10753  004EEA  0E00               	movlw	0
 10754  004EEC  1B88               	xorwf	___ftsub@f2& (0+255),f,b
 10755  004EEE  0E00               	movlw	0
 10756  004EF0  1B89               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10757  004EF2  0E80               	movlw	128
 10758  004EF4  1B8A               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10759  004EF6                     l1944:
 10760                           
 10761                           ; BSR set to: 0
 10762                           
 10763                           ; BSR set to: 0
 10764  004EF6  C085  F079         	movff	___ftsub@f1,___ftadd@f1
 10765  004EFA  C086  F07A         	movff	___ftsub@f1+1,___ftadd@f1+1
 10766  004EFE  C087  F07B         	movff	___ftsub@f1+2,___ftadd@f1+2
 10767  004F02  C088  F07C         	movff	___ftsub@f2,___ftadd@f2
 10768  004F06  C089  F07D         	movff	___ftsub@f2+1,___ftadd@f2+1
 10769  004F0A  C08A  F07E         	movff	___ftsub@f2+2,___ftadd@f2+2
 10770  004F0E  EC35  F018         	call	___ftadd	;wreg free
 10771  004F12  C079  F085         	movff	?___ftadd,?___ftsub
 10772  004F16  C07A  F086         	movff	?___ftadd+1,?___ftsub+1
 10773  004F1A  C07B  F087         	movff	?___ftadd+2,?___ftsub+2
 10774  004F1E  0012               	return	
 10775  004F20                     __end_of___ftsub:
 10776                           	opt stack 0
 10777                           tosu	equ	0xFFF
 10778                           tosh	equ	0xFFE
 10779                           tosl	equ	0xFFD
 10780                           pclath	equ	0xFFA
 10781                           tblptru	equ	0xFF8
 10782                           tblptrh	equ	0xFF7
 10783                           tblptrl	equ	0xFF6
 10784                           tablat	equ	0xFF5
 10785                           prodh	equ	0xFF4
 10786                           prodl	equ	0xFF3
 10787                           intcon	equ	0xFF2
 10788                           intcon2	equ	0xFF1
 10789                           intcon3	equ	0xFF0
 10790                           postinc0	equ	0xFEE
 10791                           wreg	equ	0xFE8
 10792                           indf1	equ	0xFE7
 10793                           postinc1	equ	0xFE6
 10794                           postdec1	equ	0xFE5
 10795                           fsr1h	equ	0xFE2
 10796                           fsr1l	equ	0xFE1
 10797                           indf2	equ	0xFDF
 10798                           postinc2	equ	0xFDE
 10799                           postdec2	equ	0xFDD
 10800                           fsr2h	equ	0xFDA
 10801                           fsr2l	equ	0xFD9
 10802                           status	equ	0xFD8
 10803                           
 10804 ;; *************** function ___ftadd *****************
 10805 ;; Defined at:
 10806 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 10807 ;; Parameters:    Size  Location     Type
 10808 ;;  f1              3   25[BANK0 ] float 
 10809 ;;  f2              3   28[BANK0 ] float 
 10810 ;; Auto vars:     Size  Location     Type
 10811 ;;  exp1            1   36[BANK0 ] unsigned char 
 10812 ;;  exp2            1   35[BANK0 ] unsigned char 
 10813 ;;  sign            1   34[BANK0 ] unsigned char 
 10814 ;; Return value:  Size  Location     Type
 10815 ;;                  3   25[BANK0 ] float 
 10816 ;; Registers used:
 10817 ;;		wreg, status,2, status,0, cstack
 10818 ;; Tracked objects:
 10819 ;;		On entry : 0/0
 10820 ;;		On exit  : 0/0
 10821 ;;		Unchanged: 0/0
 10822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10823 ;;      Params:         0       6       0       0       0       0       0       0       0
 10824 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10825 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10826 ;;      Totals:         0      12       0       0       0       0       0       0       0
 10827 ;;Total ram usage:       12 bytes
 10828 ;; Hardware stack levels used:    1
 10829 ;; Hardware stack levels required when called:    3
 10830 ;; This function calls:
 10831 ;;		___ftpack
 10832 ;; This function is called by:
 10833 ;;		_convert_to_degrees
 10834 ;;		_sprintf
 10835 ;;		___ftsub
 10836 ;;		_escreve_float_lcd
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           	psect	text45
 10841  00306A                     __ptext45:
 10842                           	opt stack 0
 10843  00306A                     ___ftadd:
 10844                           	opt stack 23
 10845                           
 10846                           ;incstack = 0
 10847  00306A  C07B  F07F         	movff	___ftadd@f1+2,??___ftadd
 10848  00306E  0100               	movlb	0	; () banked
 10849  003070  6B80               	clrf	(??___ftadd+1)& (0+255),b
 10850  003072  6B81               	clrf	(??___ftadd+2)& (0+255),b
 10851  003074  357A               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10852  003076  377F               	rlcf	??___ftadd& (0+255),f,b
 10853  003078  E301               	bnc	u14061
 10854  00307A  8180               	bsf	(??___ftadd+1)& (0+255),0,b
 10855  00307C                     u14061:
 10856  00307C  517F               	movf	??___ftadd& (0+255),w,b
 10857  00307E  6F84               	movwf	___ftadd@exp1& (0+255),b
 10858  003080  C07E  F07F         	movff	___ftadd@f2+2,??___ftadd
 10859  003084  6B80               	clrf	(??___ftadd+1)& (0+255),b
 10860  003086  6B81               	clrf	(??___ftadd+2)& (0+255),b
 10861  003088  357D               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10862  00308A  377F               	rlcf	??___ftadd& (0+255),f,b
 10863  00308C  E301               	bnc	u14071
 10864  00308E  8180               	bsf	(??___ftadd+1)& (0+255),0,b
 10865  003090                     u14071:
 10866  003090  517F               	movf	??___ftadd& (0+255),w,b
 10867  003092  6F83               	movwf	___ftadd@exp2& (0+255),b
 10868                           
 10869                           ; BSR set to: 0
 10870  003094  5184               	movf	___ftadd@exp1& (0+255),w,b
 10871  003096  B4D8               	btfsc	status,2,c
 10872  003098  D00B               	goto	u14100
 10873                           
 10874                           ; BSR set to: 0
 10875  00309A  5183               	movf	___ftadd@exp2& (0+255),w,b
 10876  00309C  5D84               	subwf	___ftadd@exp1& (0+255),w,b
 10877  00309E  B0D8               	btfsc	status,0,c
 10878  0030A0  D00E               	goto	l1862
 10879                           
 10880                           ; BSR set to: 0
 10881  0030A2  5184               	movf	___ftadd@exp1& (0+255),w,b
 10882  0030A4  0800               	sublw	0
 10883  0030A6  2583               	addwf	___ftadd@exp2& (0+255),w,b
 10884  0030A8  6F7F               	movwf	??___ftadd& (0+255),b
 10885  0030AA  0E18               	movlw	24
 10886  0030AC  657F               	cpfsgt	??___ftadd& (0+255),b
 10887  0030AE  D007               	goto	l1862
 10888  0030B0                     u14100:
 10889                           
 10890                           ; BSR set to: 0
 10891  0030B0  C07C  F079         	movff	___ftadd@f2,?___ftadd
 10892  0030B4  C07D  F07A         	movff	___ftadd@f2+1,?___ftadd+1
 10893  0030B8  C07E  F07B         	movff	___ftadd@f2+2,?___ftadd+2
 10894  0030BC  0012               	return	
 10895  0030BE                     l1862:
 10896                           
 10897                           ; BSR set to: 0
 10898                           
 10899                           ; BSR set to: 0
 10900  0030BE  5183               	movf	___ftadd@exp2& (0+255),w,b
 10901  0030C0  B4D8               	btfsc	status,2,c
 10902  0030C2  D00B               	goto	u14130
 10903                           
 10904                           ; BSR set to: 0
 10905  0030C4  5184               	movf	___ftadd@exp1& (0+255),w,b
 10906  0030C6  5D83               	subwf	___ftadd@exp2& (0+255),w,b
 10907  0030C8  B0D8               	btfsc	status,0,c
 10908  0030CA  D00E               	goto	l1866
 10909                           
 10910                           ; BSR set to: 0
 10911  0030CC  5183               	movf	___ftadd@exp2& (0+255),w,b
 10912  0030CE  0800               	sublw	0
 10913  0030D0  2584               	addwf	___ftadd@exp1& (0+255),w,b
 10914  0030D2  6F7F               	movwf	??___ftadd& (0+255),b
 10915  0030D4  0E18               	movlw	24
 10916  0030D6  657F               	cpfsgt	??___ftadd& (0+255),b
 10917  0030D8  D007               	goto	l1866
 10918  0030DA                     u14130:
 10919                           
 10920                           ; BSR set to: 0
 10921  0030DA  C079  F079         	movff	___ftadd@f1,?___ftadd
 10922  0030DE  C07A  F07A         	movff	___ftadd@f1+1,?___ftadd+1
 10923  0030E2  C07B  F07B         	movff	___ftadd@f1+2,?___ftadd+2
 10924  0030E6  0012               	return	
 10925  0030E8                     l1866:
 10926                           
 10927                           ; BSR set to: 0
 10928                           
 10929                           ; BSR set to: 0
 10930  0030E8  0E06               	movlw	6
 10931  0030EA  6F82               	movwf	___ftadd@sign& (0+255),b
 10932                           
 10933                           ; BSR set to: 0
 10934  0030EC  BF7B               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 10935                           
 10936                           ; BSR set to: 0
 10937  0030EE  8F82               	bsf	___ftadd@sign& (0+255),7,b
 10938                           
 10939                           ; BSR set to: 0
 10940                           
 10941                           ; BSR set to: 0
 10942  0030F0  BF7E               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 10943                           
 10944                           ; BSR set to: 0
 10945  0030F2  8D82               	bsf	___ftadd@sign& (0+255),6,b
 10946                           
 10947                           ; BSR set to: 0
 10948  0030F4  8F7A               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10949                           
 10950                           ; BSR set to: 0
 10951  0030F6  0EFF               	movlw	255
 10952  0030F8  1779               	andwf	___ftadd@f1& (0+255),f,b
 10953  0030FA  0EFF               	movlw	255
 10954  0030FC  177A               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10955  0030FE  0E00               	movlw	0
 10956  003100  177B               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10957  003102  8F7D               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10958                           
 10959                           ; BSR set to: 0
 10960  003104  0EFF               	movlw	255
 10961  003106  177C               	andwf	___ftadd@f2& (0+255),f,b
 10962  003108  0EFF               	movlw	255
 10963  00310A  177D               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10964  00310C  0E00               	movlw	0
 10965  00310E  177E               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10966                           
 10967                           ; BSR set to: 0
 10968  003110  5183               	movf	___ftadd@exp2& (0+255),w,b
 10969  003112  5D84               	subwf	___ftadd@exp1& (0+255),w,b
 10970  003114  B0D8               	btfsc	status,0,c
 10971  003116  D01B               	goto	l1871
 10972  003118                     u14160:
 10973                           
 10974                           ; BSR set to: 0
 10975                           
 10976                           ; BSR set to: 0
 10977  003118  90D8               	bcf	status,0,c
 10978  00311A  377C               	rlcf	___ftadd@f2& (0+255),f,b
 10979  00311C  377D               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10980  00311E  377E               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10981  003120  0783               	decf	___ftadd@exp2& (0+255),f,b
 10982                           
 10983                           ; BSR set to: 0
 10984  003122  5184               	movf	___ftadd@exp1& (0+255),w,b
 10985  003124  1983               	xorwf	___ftadd@exp2& (0+255),w,b
 10986  003126  B4D8               	btfsc	status,2,c
 10987  003128  D00D               	goto	l1876
 10988                           
 10989                           ; BSR set to: 0
 10990  00312A  0782               	decf	___ftadd@sign& (0+255),f,b
 10991  00312C  C082  F07F         	movff	___ftadd@sign,??___ftadd
 10992  003130  0E07               	movlw	7
 10993  003132  177F               	andwf	??___ftadd& (0+255),f,b
 10994  003134  B4D8               	btfsc	status,2,c
 10995  003136  D006               	goto	l1876
 10996  003138  D7EF               	goto	u14160
 10997  00313A                     
 10998                           ; BSR set to: 0
 10999                           
 11000                           ; BSR set to: 0
 11001  00313A  90D8               	bcf	status,0,c
 11002  00313C  337B               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11003  00313E  337A               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11004  003140  3379               	rrcf	___ftadd@f1& (0+255),f,b
 11005  003142  2B84               	incf	___ftadd@exp1& (0+255),f,b
 11006  003144                     l1876:
 11007                           
 11008                           ; BSR set to: 0
 11009                           
 11010                           ; BSR set to: 0
 11011  003144  5183               	movf	___ftadd@exp2& (0+255),w,b
 11012  003146  1984               	xorwf	___ftadd@exp1& (0+255),w,b
 11013  003148  B4D8               	btfsc	status,2,c
 11014  00314A  D01F               	goto	u14230
 11015  00314C  D7F6               	goto	l1877
 11016  00314E                     l1871:
 11017                           
 11018                           ; BSR set to: 0
 11019                           
 11020                           ; BSR set to: 0
 11021  00314E  5184               	movf	___ftadd@exp1& (0+255),w,b
 11022  003150  5D83               	subwf	___ftadd@exp2& (0+255),w,b
 11023  003152  B0D8               	btfsc	status,0,c
 11024  003154  D01A               	goto	u14230
 11025  003156                     u14200:
 11026                           
 11027                           ; BSR set to: 0
 11028                           
 11029                           ; BSR set to: 0
 11030  003156  90D8               	bcf	status,0,c
 11031  003158  3779               	rlcf	___ftadd@f1& (0+255),f,b
 11032  00315A  377A               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11033  00315C  377B               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11034  00315E  0784               	decf	___ftadd@exp1& (0+255),f,b
 11035                           
 11036                           ; BSR set to: 0
 11037  003160  5184               	movf	___ftadd@exp1& (0+255),w,b
 11038  003162  1983               	xorwf	___ftadd@exp2& (0+255),w,b
 11039  003164  B4D8               	btfsc	status,2,c
 11040  003166  D00D               	goto	l1885
 11041                           
 11042                           ; BSR set to: 0
 11043  003168  0782               	decf	___ftadd@sign& (0+255),f,b
 11044  00316A  C082  F07F         	movff	___ftadd@sign,??___ftadd
 11045  00316E  0E07               	movlw	7
 11046  003170  177F               	andwf	??___ftadd& (0+255),f,b
 11047  003172  B4D8               	btfsc	status,2,c
 11048  003174  D006               	goto	l1885
 11049  003176  D7EF               	goto	u14200
 11050  003178                     
 11051                           ; BSR set to: 0
 11052                           
 11053                           ; BSR set to: 0
 11054  003178  90D8               	bcf	status,0,c
 11055  00317A  337E               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11056  00317C  337D               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11057  00317E  337C               	rrcf	___ftadd@f2& (0+255),f,b
 11058  003180  2B83               	incf	___ftadd@exp2& (0+255),f,b
 11059  003182                     l1885:
 11060                           
 11061                           ; BSR set to: 0
 11062                           
 11063                           ; BSR set to: 0
 11064  003182  5183               	movf	___ftadd@exp2& (0+255),w,b
 11065  003184  1984               	xorwf	___ftadd@exp1& (0+255),w,b
 11066  003186  A4D8               	btfss	status,2,c
 11067  003188  D7F7               	goto	l1886
 11068  00318A                     u14230:
 11069                           
 11070                           ; BSR set to: 0
 11071                           
 11072                           ; BSR set to: 0
 11073                           
 11074                           ; BSR set to: 0
 11075  00318A  AF82               	btfss	___ftadd@sign& (0+255),7,b
 11076  00318C  D00C               	goto	l1888
 11077                           
 11078                           ; BSR set to: 0
 11079  00318E  0EFF               	movlw	255
 11080  003190  1B79               	xorwf	___ftadd@f1& (0+255),f,b
 11081  003192  0EFF               	movlw	255
 11082  003194  1B7A               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11083  003196  0EFF               	movlw	255
 11084  003198  1B7B               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11085  00319A  0E01               	movlw	1
 11086  00319C  2779               	addwf	___ftadd@f1& (0+255),f,b
 11087  00319E  0E00               	movlw	0
 11088  0031A0  237A               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11089  0031A2  0E00               	movlw	0
 11090  0031A4  237B               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11091  0031A6                     l1888:
 11092                           
 11093                           ; BSR set to: 0
 11094  0031A6  AD82               	btfss	___ftadd@sign& (0+255),6,b
 11095  0031A8  D00C               	goto	l1889
 11096                           
 11097                           ; BSR set to: 0
 11098  0031AA  0EFF               	movlw	255
 11099  0031AC  1B7C               	xorwf	___ftadd@f2& (0+255),f,b
 11100  0031AE  0EFF               	movlw	255
 11101  0031B0  1B7D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11102  0031B2  0EFF               	movlw	255
 11103  0031B4  1B7E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11104  0031B6  0E01               	movlw	1
 11105  0031B8  277C               	addwf	___ftadd@f2& (0+255),f,b
 11106  0031BA  0E00               	movlw	0
 11107  0031BC  237D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11108  0031BE  0E00               	movlw	0
 11109  0031C0  237E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11110  0031C2                     l1889:
 11111                           
 11112                           ; BSR set to: 0
 11113                           
 11114                           ; BSR set to: 0
 11115  0031C2  0E00               	movlw	0
 11116  0031C4  6F82               	movwf	___ftadd@sign& (0+255),b
 11117                           
 11118                           ; BSR set to: 0
 11119  0031C6  5179               	movf	___ftadd@f1& (0+255),w,b
 11120  0031C8  277C               	addwf	___ftadd@f2& (0+255),f,b
 11121  0031CA  517A               	movf	(___ftadd@f1+1)& (0+255),w,b
 11122  0031CC  237D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11123  0031CE  517B               	movf	(___ftadd@f1+2)& (0+255),w,b
 11124  0031D0  237E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11125                           
 11126                           ; BSR set to: 0
 11127  0031D2  AF7E               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11128  0031D4  D00E               	goto	l1890
 11129                           
 11130                           ; BSR set to: 0
 11131  0031D6  0EFF               	movlw	255
 11132  0031D8  1B7C               	xorwf	___ftadd@f2& (0+255),f,b
 11133  0031DA  0EFF               	movlw	255
 11134  0031DC  1B7D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11135  0031DE  0EFF               	movlw	255
 11136  0031E0  1B7E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11137  0031E2  0E01               	movlw	1
 11138  0031E4  277C               	addwf	___ftadd@f2& (0+255),f,b
 11139  0031E6  0E00               	movlw	0
 11140  0031E8  237D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11141  0031EA  0E00               	movlw	0
 11142  0031EC  237E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11143                           
 11144                           ; BSR set to: 0
 11145  0031EE  0E01               	movlw	1
 11146  0031F0  6F82               	movwf	___ftadd@sign& (0+255),b
 11147  0031F2                     l1890:
 11148                           
 11149                           ; BSR set to: 0
 11150                           
 11151                           ; BSR set to: 0
 11152  0031F2  C07C  F01A         	movff	___ftadd@f2,___ftpack@arg
 11153  0031F6  C07D  F01B         	movff	___ftadd@f2+1,___ftpack@arg+1
 11154  0031FA  C07E  F01C         	movff	___ftadd@f2+2,___ftpack@arg+2
 11155  0031FE  C084  F01D         	movff	___ftadd@exp1,___ftpack@exp
 11156  003202  C082  F01E         	movff	___ftadd@sign,___ftpack@sign
 11157  003206  ECC5  F020         	call	___ftpack	;wreg free
 11158  00320A  C01A  F079         	movff	?___ftpack,?___ftadd
 11159  00320E  C01B  F07A         	movff	?___ftpack+1,?___ftadd+1
 11160  003212  C01C  F07B         	movff	?___ftpack+2,?___ftadd+2
 11161  003216  0012               	return	
 11162  003218                     __end_of___ftadd:
 11163                           	opt stack 0
 11164                           tosu	equ	0xFFF
 11165                           tosh	equ	0xFFE
 11166                           tosl	equ	0xFFD
 11167                           pclath	equ	0xFFA
 11168                           tblptru	equ	0xFF8
 11169                           tblptrh	equ	0xFF7
 11170                           tblptrl	equ	0xFF6
 11171                           tablat	equ	0xFF5
 11172                           prodh	equ	0xFF4
 11173                           prodl	equ	0xFF3
 11174                           intcon	equ	0xFF2
 11175                           intcon2	equ	0xFF1
 11176                           intcon3	equ	0xFF0
 11177                           postinc0	equ	0xFEE
 11178                           wreg	equ	0xFE8
 11179                           indf1	equ	0xFE7
 11180                           postinc1	equ	0xFE6
 11181                           postdec1	equ	0xFE5
 11182                           fsr1h	equ	0xFE2
 11183                           fsr1l	equ	0xFE1
 11184                           indf2	equ	0xFDF
 11185                           postinc2	equ	0xFDE
 11186                           postdec2	equ	0xFDD
 11187                           fsr2h	equ	0xFDA
 11188                           fsr2l	equ	0xFD9
 11189                           status	equ	0xFD8
 11190                           
 11191 ;; *************** function ___ftpack *****************
 11192 ;; Defined at:
 11193 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 11194 ;; Parameters:    Size  Location     Type
 11195 ;;  arg             3   25[COMRAM] unsigned um
 11196 ;;  exp             1   28[COMRAM] unsigned char 
 11197 ;;  sign            1   29[COMRAM] unsigned char 
 11198 ;; Auto vars:     Size  Location     Type
 11199 ;;		None
 11200 ;; Return value:  Size  Location     Type
 11201 ;;                  3   25[COMRAM] float 
 11202 ;; Registers used:
 11203 ;;		wreg, status,2, status,0
 11204 ;; Tracked objects:
 11205 ;;		On entry : 0/0
 11206 ;;		On exit  : 0/0
 11207 ;;		Unchanged: 0/0
 11208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11209 ;;      Params:         5       0       0       0       0       0       0       0       0
 11210 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11211 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11212 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11213 ;;Total ram usage:        8 bytes
 11214 ;; Hardware stack levels used:    1
 11215 ;; Hardware stack levels required when called:    2
 11216 ;; This function calls:
 11217 ;;		Nothing
 11218 ;; This function is called by:
 11219 ;;		___altoft
 11220 ;;		___awtoft
 11221 ;;		___ftadd
 11222 ;;		___ftdiv
 11223 ;;		___ftmul
 11224 ;;		___lltoft
 11225 ;; This function uses a non-reentrant model
 11226 ;;
 11227                           
 11228                           	psect	text46
 11229  00418A                     __ptext46:
 11230                           	opt stack 0
 11231  00418A                     ___ftpack:
 11232                           	opt stack 23
 11233                           
 11234                           ;incstack = 0
 11235  00418A  501D               	movf	___ftpack@exp,w,c
 11236  00418C  B4D8               	btfsc	status,2,c
 11237  00418E  D005               	goto	u13840
 11238  004190  501A               	movf	___ftpack@arg,w,c
 11239  004192  101B               	iorwf	___ftpack@arg+1,w,c
 11240  004194  101C               	iorwf	___ftpack@arg+2,w,c
 11241  004196  A4D8               	btfss	status,2,c
 11242  004198  D00C               	goto	l1831
 11243  00419A                     u13840:
 11244  00419A  0E00               	movlw	0
 11245  00419C  6E1A               	movwf	?___ftpack,c
 11246  00419E  0E00               	movlw	0
 11247  0041A0  6E1B               	movwf	?___ftpack+1,c
 11248  0041A2  0E00               	movlw	0
 11249  0041A4  6E1C               	movwf	?___ftpack+2,c
 11250  0041A6  0012               	return	
 11251  0041A8  2A1D               	incf	___ftpack@exp,f,c
 11252  0041AA  90D8               	bcf	status,0,c
 11253  0041AC  321C               	rrcf	___ftpack@arg+2,f,c
 11254  0041AE  321B               	rrcf	___ftpack@arg+1,f,c
 11255  0041B0  321A               	rrcf	___ftpack@arg,f,c
 11256  0041B2                     l1831:
 11257  0041B2  0E00               	movlw	0
 11258  0041B4  141A               	andwf	___ftpack@arg,w,c
 11259  0041B6  6E1F               	movwf	??___ftpack& (0+255),c
 11260  0041B8  0E00               	movlw	0
 11261  0041BA  141B               	andwf	___ftpack@arg+1,w,c
 11262  0041BC  6E20               	movwf	(??___ftpack+1)& (0+255),c
 11263  0041BE  0EFE               	movlw	254
 11264  0041C0  141C               	andwf	___ftpack@arg+2,w,c
 11265  0041C2  6E21               	movwf	(??___ftpack+2)& (0+255),c
 11266  0041C4  501F               	movf	??___ftpack,w,c
 11267  0041C6  1020               	iorwf	??___ftpack+1,w,c
 11268  0041C8  1021               	iorwf	??___ftpack+2,w,c
 11269  0041CA  B4D8               	btfsc	status,2,c
 11270  0041CC  D00C               	goto	l1834
 11271  0041CE  D7EC               	goto	l1832
 11272  0041D0  2A1D               	incf	___ftpack@exp,f,c
 11273  0041D2  0E01               	movlw	1
 11274  0041D4  261A               	addwf	___ftpack@arg,f,c
 11275  0041D6  0E00               	movlw	0
 11276  0041D8  221B               	addwfc	___ftpack@arg+1,f,c
 11277  0041DA  0E00               	movlw	0
 11278  0041DC  221C               	addwfc	___ftpack@arg+2,f,c
 11279  0041DE  90D8               	bcf	status,0,c
 11280  0041E0  321C               	rrcf	___ftpack@arg+2,f,c
 11281  0041E2  321B               	rrcf	___ftpack@arg+1,f,c
 11282  0041E4  321A               	rrcf	___ftpack@arg,f,c
 11283  0041E6                     l1834:
 11284  0041E6  0E00               	movlw	0
 11285  0041E8  141A               	andwf	___ftpack@arg,w,c
 11286  0041EA  6E1F               	movwf	??___ftpack& (0+255),c
 11287  0041EC  0E00               	movlw	0
 11288  0041EE  141B               	andwf	___ftpack@arg+1,w,c
 11289  0041F0  6E20               	movwf	(??___ftpack+1)& (0+255),c
 11290  0041F2  0EFF               	movlw	255
 11291  0041F4  141C               	andwf	___ftpack@arg+2,w,c
 11292  0041F6  6E21               	movwf	(??___ftpack+2)& (0+255),c
 11293  0041F8  501F               	movf	??___ftpack,w,c
 11294  0041FA  1020               	iorwf	??___ftpack+1,w,c
 11295  0041FC  1021               	iorwf	??___ftpack+2,w,c
 11296  0041FE  B4D8               	btfsc	status,2,c
 11297  004200  D006               	goto	l1837
 11298  004202  D7E6               	goto	l1835
 11299  004204  061D               	decf	___ftpack@exp,f,c
 11300  004206  90D8               	bcf	status,0,c
 11301  004208  361A               	rlcf	___ftpack@arg,f,c
 11302  00420A  361B               	rlcf	___ftpack@arg+1,f,c
 11303  00420C  361C               	rlcf	___ftpack@arg+2,f,c
 11304  00420E                     l1837:
 11305  00420E  BE1B               	btfsc	___ftpack@arg+1,7,c
 11306  004210  D003               	goto	u13880
 11307  004212  0E02               	movlw	2
 11308  004214  601D               	cpfslt	___ftpack@exp,c
 11309  004216  D7F6               	goto	l1838
 11310  004218                     u13880:
 11311  004218  A01D               	btfss	___ftpack@exp,0,c
 11312  00421A  9E1B               	bcf	___ftpack@arg+1,7,c
 11313  00421C  90D8               	bcf	status,0,c
 11314  00421E  321D               	rrcf	___ftpack@exp,f,c
 11315  004220  501D               	movf	___ftpack@exp,w,c
 11316  004222  121C               	iorwf	___ftpack@arg+2,f,c
 11317  004224  501E               	movf	___ftpack@sign,w,c
 11318  004226  A4D8               	btfss	status,2,c
 11319  004228  8E1C               	bsf	___ftpack@arg+2,7,c
 11320  00422A  C01A  F01A         	movff	___ftpack@arg,?___ftpack
 11321  00422E  C01B  F01B         	movff	___ftpack@arg+1,?___ftpack+1
 11322  004232  C01C  F01C         	movff	___ftpack@arg+2,?___ftpack+2
 11323  004236  0012               	return	
 11324  004238                     __end_of___ftpack:
 11325                           	opt stack 0
 11326                           tosu	equ	0xFFF
 11327                           tosh	equ	0xFFE
 11328                           tosl	equ	0xFFD
 11329                           pclath	equ	0xFFA
 11330                           tblptru	equ	0xFF8
 11331                           tblptrh	equ	0xFF7
 11332                           tblptrl	equ	0xFF6
 11333                           tablat	equ	0xFF5
 11334                           prodh	equ	0xFF4
 11335                           prodl	equ	0xFF3
 11336                           intcon	equ	0xFF2
 11337                           intcon2	equ	0xFF1
 11338                           intcon3	equ	0xFF0
 11339                           postinc0	equ	0xFEE
 11340                           wreg	equ	0xFE8
 11341                           indf1	equ	0xFE7
 11342                           postinc1	equ	0xFE6
 11343                           postdec1	equ	0xFE5
 11344                           fsr1h	equ	0xFE2
 11345                           fsr1l	equ	0xFE1
 11346                           indf2	equ	0xFDF
 11347                           postinc2	equ	0xFDE
 11348                           postdec2	equ	0xFDD
 11349                           fsr2h	equ	0xFDA
 11350                           fsr2l	equ	0xFD9
 11351                           status	equ	0xFD8
 11352                           
 11353 ;; *************** function ___ftneg *****************
 11354 ;; Defined at:
 11355 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;  f1              3   15[BANK0 ] float 
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;		None
 11360 ;; Return value:  Size  Location     Type
 11361 ;;                  3   15[BANK0 ] float 
 11362 ;; Registers used:
 11363 ;;		wreg, status,2, status,0
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11369 ;;      Params:         0       3       0       0       0       0       0       0       0
 11370 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11371 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11372 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11373 ;;Total ram usage:        3 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    2
 11376 ;; This function calls:
 11377 ;;		Nothing
 11378 ;; This function is called by:
 11379 ;;		_convert_to_degrees
 11380 ;;		_sprintf
 11381 ;;		_strtod
 11382 ;;		_escreve_float_lcd
 11383 ;; This function uses a non-reentrant model
 11384 ;;
 11385                           
 11386                           	psect	text47
 11387  005174                     __ptext47:
 11388                           	opt stack 0
 11389  005174                     ___ftneg:
 11390                           	opt stack 25
 11391                           
 11392                           ;incstack = 0
 11393  005174  0100               	movlb	0	; () banked
 11394  005176  516F               	movf	___ftneg@f1& (0+255),w,b
 11395  005178  1170               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 11396  00517A  1171               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 11397  00517C  B4D8               	btfsc	status,2,c
 11398  00517E  D006               	goto	l1938
 11399                           
 11400                           ; BSR set to: 0
 11401  005180  0E00               	movlw	0
 11402  005182  1B6F               	xorwf	___ftneg@f1& (0+255),f,b
 11403  005184  0E00               	movlw	0
 11404  005186  1B70               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 11405  005188  0E80               	movlw	128
 11406  00518A  1B71               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 11407  00518C                     l1938:
 11408                           
 11409                           ; BSR set to: 0
 11410  00518C  C06F  F06F         	movff	___ftneg@f1,?___ftneg
 11411  005190  C070  F070         	movff	___ftneg@f1+1,?___ftneg+1
 11412  005194  C071  F071         	movff	___ftneg@f1+2,?___ftneg+2
 11413                           
 11414                           ; BSR set to: 0
 11415  005198  0012               	return		;funcret
 11416  00519A                     __end_of___ftneg:
 11417                           	opt stack 0
 11418                           tosu	equ	0xFFF
 11419                           tosh	equ	0xFFE
 11420                           tosl	equ	0xFFD
 11421                           pclath	equ	0xFFA
 11422                           tblptru	equ	0xFF8
 11423                           tblptrh	equ	0xFF7
 11424                           tblptrl	equ	0xFF6
 11425                           tablat	equ	0xFF5
 11426                           prodh	equ	0xFF4
 11427                           prodl	equ	0xFF3
 11428                           intcon	equ	0xFF2
 11429                           intcon2	equ	0xFF1
 11430                           intcon3	equ	0xFF0
 11431                           postinc0	equ	0xFEE
 11432                           wreg	equ	0xFE8
 11433                           indf1	equ	0xFE7
 11434                           postinc1	equ	0xFE6
 11435                           postdec1	equ	0xFE5
 11436                           fsr1h	equ	0xFE2
 11437                           fsr1l	equ	0xFE1
 11438                           indf2	equ	0xFDF
 11439                           postinc2	equ	0xFDE
 11440                           postdec2	equ	0xFDD
 11441                           fsr2h	equ	0xFDA
 11442                           fsr2l	equ	0xFD9
 11443                           status	equ	0xFD8
 11444                           
 11445 ;; *************** function ___ftge *****************
 11446 ;; Defined at:
 11447 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 11448 ;; Parameters:    Size  Location     Type
 11449 ;;  ff1             3   25[COMRAM] float 
 11450 ;;  ff2             3   28[COMRAM] float 
 11451 ;; Auto vars:     Size  Location     Type
 11452 ;;		None
 11453 ;; Return value:  Size  Location     Type
 11454 ;;		None               void
 11455 ;; Registers used:
 11456 ;;		wreg, status,2, status,0
 11457 ;; Tracked objects:
 11458 ;;		On entry : 0/0
 11459 ;;		On exit  : 0/0
 11460 ;;		Unchanged: 0/0
 11461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11462 ;;      Params:         6       0       0       0       0       0       0       0       0
 11463 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11464 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11465 ;;      Totals:         9       0       0       0       0       0       0       0       0
 11466 ;;Total ram usage:        9 bytes
 11467 ;; Hardware stack levels used:    1
 11468 ;; Hardware stack levels required when called:    2
 11469 ;; This function calls:
 11470 ;;		Nothing
 11471 ;; This function is called by:
 11472 ;;		_sprintf
 11473 ;;		_strtod
 11474 ;;		_escreve_float_lcd
 11475 ;; This function uses a non-reentrant model
 11476 ;;
 11477                           
 11478                           	psect	text48
 11479  004424                     __ptext48:
 11480                           	opt stack 0
 11481  004424                     ___ftge:
 11482                           	opt stack 25
 11483                           
 11484                           ; BSR set to: 0
 11485                           ;incstack = 0
 11486  004424  AE1C               	btfss	___ftge@ff1+2,7,c
 11487  004426  D016               	goto	l1920
 11488  004428  C01A  F020         	movff	___ftge@ff1,??___ftge
 11489  00442C  C01B  F021         	movff	___ftge@ff1+1,??___ftge+1
 11490  004430  C01C  F022         	movff	___ftge@ff1+2,??___ftge+2
 11491  004434  1E20               	comf	??___ftge,f,c
 11492  004436  1E21               	comf	??___ftge+1,f,c
 11493  004438  1E22               	comf	??___ftge+2,f,c
 11494  00443A  2A20               	incf	??___ftge,f,c
 11495  00443C  0E00               	movlw	0
 11496  00443E  2221               	addwfc	??___ftge+1,f,c
 11497  004440  2222               	addwfc	??___ftge+2,f,c
 11498  004442  0E00               	movlw	0
 11499  004444  2420               	addwf	??___ftge,w,c
 11500  004446  6E1A               	movwf	___ftge@ff1,c
 11501  004448  0E00               	movlw	0
 11502  00444A  2021               	addwfc	??___ftge+1,w,c
 11503  00444C  6E1B               	movwf	___ftge@ff1+1,c
 11504  00444E  0E80               	movlw	128
 11505  004450  2022               	addwfc	??___ftge+2,w,c
 11506  004452  6E1C               	movwf	___ftge@ff1+2,c
 11507  004454                     l1920:
 11508  004454  AE1F               	btfss	___ftge@ff2+2,7,c
 11509  004456  D016               	goto	l1921
 11510  004458  C01D  F020         	movff	___ftge@ff2,??___ftge
 11511  00445C  C01E  F021         	movff	___ftge@ff2+1,??___ftge+1
 11512  004460  C01F  F022         	movff	___ftge@ff2+2,??___ftge+2
 11513  004464  1E20               	comf	??___ftge,f,c
 11514  004466  1E21               	comf	??___ftge+1,f,c
 11515  004468  1E22               	comf	??___ftge+2,f,c
 11516  00446A  2A20               	incf	??___ftge,f,c
 11517  00446C  0E00               	movlw	0
 11518  00446E  2221               	addwfc	??___ftge+1,f,c
 11519  004470  2222               	addwfc	??___ftge+2,f,c
 11520  004472  0E00               	movlw	0
 11521  004474  2420               	addwf	??___ftge,w,c
 11522  004476  6E1D               	movwf	___ftge@ff2,c
 11523  004478  0E00               	movlw	0
 11524  00447A  2021               	addwfc	??___ftge+1,w,c
 11525  00447C  6E1E               	movwf	___ftge@ff2+1,c
 11526  00447E  0E80               	movlw	128
 11527  004480  2022               	addwfc	??___ftge+2,w,c
 11528  004482  6E1F               	movwf	___ftge@ff2+2,c
 11529  004484                     l1921:
 11530  004484  0E00               	movlw	0
 11531  004486  1A1A               	xorwf	___ftge@ff1,f,c
 11532  004488  0E00               	movlw	0
 11533  00448A  1A1B               	xorwf	___ftge@ff1+1,f,c
 11534  00448C  0E80               	movlw	128
 11535  00448E  1A1C               	xorwf	___ftge@ff1+2,f,c
 11536  004490  0E00               	movlw	0
 11537  004492  1A1D               	xorwf	___ftge@ff2,f,c
 11538  004494  0E00               	movlw	0
 11539  004496  1A1E               	xorwf	___ftge@ff2+1,f,c
 11540  004498  0E80               	movlw	128
 11541  00449A  1A1F               	xorwf	___ftge@ff2+2,f,c
 11542  00449C  501D               	movf	___ftge@ff2,w,c
 11543  00449E  5C1A               	subwf	___ftge@ff1,w,c
 11544  0044A0  501E               	movf	___ftge@ff2+1,w,c
 11545  0044A2  581B               	subwfb	___ftge@ff1+1,w,c
 11546  0044A4  501F               	movf	___ftge@ff2+2,w,c
 11547  0044A6  581C               	subwfb	___ftge@ff1+2,w,c
 11548  0044A8  B0D8               	btfsc	status,0,c
 11549  0044AA  D002               	goto	l6696
 11550  0044AC  90D8               	bcf	status,0,c
 11551  0044AE  0012               	return	
 11552  0044B0                     l6696:
 11553  0044B0  80D8               	bsf	status,0,c
 11554  0044B2  0012               	return	
 11555  0044B4                     __end_of___ftge:
 11556                           	opt stack 0
 11557                           tosu	equ	0xFFF
 11558                           tosh	equ	0xFFE
 11559                           tosl	equ	0xFFD
 11560                           pclath	equ	0xFFA
 11561                           tblptru	equ	0xFF8
 11562                           tblptrh	equ	0xFF7
 11563                           tblptrl	equ	0xFF6
 11564                           tablat	equ	0xFF5
 11565                           prodh	equ	0xFF4
 11566                           prodl	equ	0xFF3
 11567                           intcon	equ	0xFF2
 11568                           intcon2	equ	0xFF1
 11569                           intcon3	equ	0xFF0
 11570                           postinc0	equ	0xFEE
 11571                           wreg	equ	0xFE8
 11572                           indf1	equ	0xFE7
 11573                           postinc1	equ	0xFE6
 11574                           postdec1	equ	0xFE5
 11575                           fsr1h	equ	0xFE2
 11576                           fsr1l	equ	0xFE1
 11577                           indf2	equ	0xFDF
 11578                           postinc2	equ	0xFDE
 11579                           postdec2	equ	0xFDD
 11580                           fsr2h	equ	0xFDA
 11581                           fsr2l	equ	0xFD9
 11582                           status	equ	0xFD8
 11583                           
 11584 ;; *************** function _f_write *****************
 11585 ;; Defined at:
 11586 ;;		line 2125 in file "bibliotecas/ff.c"
 11587 ;; Parameters:    Size  Location     Type
 11588 ;;  fp              2  111[BANK0 ] PTR struct .
 11589 ;;		 -> SDCard@fil(32), 
 11590 ;;  buff            2  113[BANK0 ] PTR const void 
 11591 ;;		 -> STR_10(12), 
 11592 ;;  btw             2  115[BANK0 ] unsigned int 
 11593 ;;  bw              2  117[BANK0 ] PTR unsigned int 
 11594 ;;		 -> RAM(2047), 
 11595 ;; Auto vars:     Size  Location     Type
 11596 ;;  sect            4   26[BANK1 ] unsigned long 
 11597 ;;  clst            4   22[BANK1 ] unsigned long 
 11598 ;;  wcnt            2   30[BANK1 ] unsigned int 
 11599 ;;  cc              2   20[BANK1 ] unsigned int 
 11600 ;;  wbuff           2   17[BANK1 ] PTR const unsigned char 
 11601 ;;		 -> STR_10(12), 
 11602 ;;  csect           1   19[BANK1 ] unsigned char 
 11603 ;;  res             1   16[BANK1 ] enum E72
 11604 ;; Return value:  Size  Location     Type
 11605 ;;                  1    wreg      enum E3953
 11606 ;; Registers used:
 11607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11608 ;; Tracked objects:
 11609 ;;		On entry : 0/0
 11610 ;;		On exit  : 0/0
 11611 ;;		Unchanged: 0/0
 11612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11613 ;;      Params:         0       8       0       0       0       0       0       0       0
 11614 ;;      Locals:         0       0      16       0       0       0       0       0       0
 11615 ;;      Temps:          0       0      16       0       0       0       0       0       0
 11616 ;;      Totals:         0       8      32       0       0       0       0       0       0
 11617 ;;Total ram usage:       40 bytes
 11618 ;; Hardware stack levels used:    1
 11619 ;; Hardware stack levels required when called:   10
 11620 ;; This function calls:
 11621 ;;		_clust2sect
 11622 ;;		_create_chain
 11623 ;;		_disk_write
 11624 ;;		_mem_cpy
 11625 ;;		_move_window
 11626 ;;		_validate
 11627 ;; This function is called by:
 11628 ;;		_SDCard
 11629 ;; This function uses a non-reentrant model
 11630 ;;
 11631                           
 11632                           	psect	text49
 11633  000012                     __ptext49:
 11634                           	opt stack 0
 11635  000012                     _f_write:
 11636                           	opt stack 18
 11637                           
 11638                           ;ff.c: 2132: FRESULT res;
 11639                           ;ff.c: 2133: DWORD clst, sect;
 11640                           ;ff.c: 2134: UINT wcnt, cc;
 11641                           ;ff.c: 2135: const BYTE *wbuff = buff;
 11642                           
 11643                           ;incstack = 0
 11644  000012  C0D1  F1BA         	movff	f_write@buff,f_write@wbuff
 11645  000016  C0D2  F1BB         	movff	f_write@buff+1,f_write@wbuff+1
 11646                           
 11647                           ;ff.c: 2136: BYTE csect;
 11648                           ;ff.c: 2139: *bw = 0;
 11649  00001A  C0D5  FFD9         	movff	f_write@bw,fsr2l
 11650  00001E  C0D6  FFDA         	movff	f_write@bw+1,fsr2h
 11651  000022  0E00               	movlw	0
 11652  000024  6EDE               	movwf	postinc2,c
 11653  000026  0E00               	movlw	0
 11654  000028  6EDD               	movwf	postdec2,c
 11655                           
 11656                           ;ff.c: 2141: res = validate(fp->fs, fp->id);
 11657  00002A  C0CF  FFD9         	movff	f_write@fp,fsr2l
 11658  00002E  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 11659  000032  CFDE F028          	movff	postinc2,validate@fs
 11660  000036  CFDD F029          	movff	postdec2,validate@fs+1
 11661  00003A  0100               	movlb	0	; () banked
 11662  00003C  EE20 F002          	lfsr	2,2
 11663  000040  51CF               	movf	f_write@fp& (0+255),w,b
 11664  000042  26D9               	addwf	fsr2l,f,c
 11665  000044  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 11666  000046  22DA               	addwfc	fsr2h,f,c
 11667  000048  CFDE F02A          	movff	postinc2,validate@id
 11668  00004C  CFDD F02B          	movff	postdec2,validate@id+1
 11669  000050  EC81  F026         	call	_validate	;wreg free
 11670  000054  0101               	movlb	1	; () banked
 11671  000056  6FB9               	movwf	f_write@res& (0+255),b
 11672                           
 11673                           ; BSR set to: 1
 11674                           ;ff.c: 2142: if (res != FR_OK) return res;
 11675  000058  51B9               	movf	f_write@res& (0+255),w,b
 11676  00005A  B4D8               	btfsc	status,2,c
 11677  00005C  D002               	goto	l1335
 11678                           
 11679                           ; BSR set to: 1
 11680  00005E  51B9               	movf	f_write@res& (0+255),w,b
 11681                           
 11682                           ; BSR set to: 1
 11683  000060  0012               	return	
 11684  000062                     l1335:
 11685                           
 11686                           ; BSR set to: 1
 11687                           ;ff.c: 2143: if (fp->flag & 0x80)
 11688                           
 11689                           ; BSR set to: 1
 11690  000062  0100               	movlb	0	; () banked
 11691  000064  EE20 F004          	lfsr	2,4
 11692  000068  51CF               	movf	f_write@fp& (0+255),w,b
 11693  00006A  26D9               	addwf	fsr2l,f,c
 11694  00006C  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 11695  00006E  22DA               	addwfc	fsr2h,f,c
 11696  000070  AEDF               	btfss	indf2,7,c
 11697  000072  D002               	goto	l1337
 11698                           
 11699                           ; BSR set to: 0
 11700                           ;ff.c: 2144: return FR_INT_ERR;
 11701  000074  0E02               	movlw	2
 11702                           
 11703                           ; BSR set to: 0
 11704  000076  0012               	return	
 11705  000078                     l1337:
 11706                           
 11707                           ; BSR set to: 0
 11708                           ;ff.c: 2145: if (!(fp->flag & 0x02))
 11709                           
 11710                           ; BSR set to: 0
 11711  000078  EE20 F004          	lfsr	2,4
 11712  00007C  51CF               	movf	f_write@fp& (0+255),w,b
 11713  00007E  26D9               	addwf	fsr2l,f,c
 11714  000080  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 11715  000082  22DA               	addwfc	fsr2h,f,c
 11716  000084  B2DF               	btfsc	indf2,1,c
 11717  000086  D002               	goto	l1338
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;ff.c: 2146: return FR_DENIED;
 11721  000088  0E07               	movlw	7
 11722                           
 11723                           ; BSR set to: 0
 11724  00008A  0012               	return	
 11725  00008C                     l1338:
 11726                           
 11727                           ; BSR set to: 0
 11728                           ;ff.c: 2147: if (fp->fsize + btw < fp->fsize) btw = 0;
 11729                           
 11730                           ; BSR set to: 0
 11731  00008C  EE20 F00A          	lfsr	2,10
 11732  000090  51CF               	movf	f_write@fp& (0+255),w,b
 11733  000092  26D9               	addwf	fsr2l,f,c
 11734  000094  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 11735  000096  22DA               	addwfc	fsr2h,f,c
 11736  000098  EE10 F00A          	lfsr	1,10
 11737  00009C  51CF               	movf	f_write@fp& (0+255),w,b
 11738  00009E  26E1               	addwf	fsr1l,f,c
 11739  0000A0  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 11740  0000A2  22E2               	addwfc	fsr1h,f,c
 11741  0000A4  CFE6 F1AD          	movff	postinc1,??_f_write+4
 11742  0000A8  CFE6 F1AE          	movff	postinc1,??_f_write+5
 11743  0000AC  CFE6 F1AF          	movff	postinc1,??_f_write+6
 11744  0000B0  CFE6 F1B0          	movff	postinc1,??_f_write+7
 11745  0000B4  51D3               	movf	f_write@btw& (0+255),w,b
 11746  0000B6  0101               	movlb	1	; () banked
 11747  0000B8  25AD               	addwf	(??_f_write+4)& (0+255),w,b
 11748  0000BA  6FB1               	movwf	(??_f_write+8)& (0+255),b
 11749  0000BC  0100               	movlb	0	; () banked
 11750  0000BE  51D4               	movf	(f_write@btw+1)& (0+255),w,b
 11751  0000C0  0101               	movlb	1	; () banked
 11752  0000C2  21AE               	addwfc	(??_f_write+5)& (0+255),w,b
 11753  0000C4  6FB2               	movwf	(??_f_write+9)& (0+255),b
 11754  0000C6  0E00               	movlw	0
 11755  0000C8  21AF               	addwfc	(??_f_write+6)& (0+255),w,b
 11756  0000CA  6FB3               	movwf	(??_f_write+10)& (0+255),b
 11757  0000CC  0E00               	movlw	0
 11758  0000CE  21B0               	addwfc	(??_f_write+7)& (0+255),w,b
 11759  0000D0  6FB4               	movwf	(??_f_write+11)& (0+255),b
 11760  0000D2  50DE               	movf	postinc2,w,c
 11761  0000D4  5DB1               	subwf	(??_f_write+8)& (0+255),w,b
 11762  0000D6  50DE               	movf	postinc2,w,c
 11763  0000D8  59B2               	subwfb	(??_f_write+9)& (0+255),w,b
 11764  0000DA  50DE               	movf	postinc2,w,c
 11765  0000DC  59B3               	subwfb	(??_f_write+10)& (0+255),w,b
 11766  0000DE  50DE               	movf	postinc2,w,c
 11767  0000E0  59B4               	subwfb	(??_f_write+11)& (0+255),w,b
 11768  0000E2  B0D8               	btfsc	status,0,c
 11769  0000E4  D379               	goto	l1340
 11770                           
 11771                           ; BSR set to: 1
 11772  0000E6  0E00               	movlw	0
 11773  0000E8  0100               	movlb	0	; () banked
 11774  0000EA  6FD4               	movwf	(f_write@btw+1)& (0+255),b
 11775  0000EC  0E00               	movlw	0
 11776  0000EE  6FD3               	movwf	f_write@btw& (0+255),b
 11777                           
 11778                           ; BSR set to: 0
 11779                           ;ff.c: 2149: for ( ; btw;
 11780                           ;ff.c: 2150: wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 11781  0000F0  D373               	goto	l1340
 11782  0000F2                     
 11783                           ; BSR set to: 0
 11784                           ;ff.c: 2151: if ((fp->fptr % 512U) == 0) {
 11785                           
 11786                           ; BSR set to: 0
 11787  0000F2  EE20 F006          	lfsr	2,6
 11788  0000F6  51CF               	movf	f_write@fp& (0+255),w,b
 11789  0000F8  26D9               	addwf	fsr2l,f,c
 11790  0000FA  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 11791  0000FC  22DA               	addwfc	fsr2h,f,c
 11792  0000FE  0EFF               	movlw	255
 11793  000100  14DE               	andwf	postinc2,w,c
 11794  000102  0101               	movlb	1	; () banked
 11795  000104  6FA9               	movwf	??_f_write& (0+255),b
 11796  000106  0E01               	movlw	1
 11797  000108  14DE               	andwf	postinc2,w,c
 11798  00010A  6FAA               	movwf	(??_f_write+1)& (0+255),b
 11799  00010C  0E00               	movlw	0
 11800  00010E  14DE               	andwf	postinc2,w,c
 11801  000110  6FAB               	movwf	(??_f_write+2)& (0+255),b
 11802  000112  0E00               	movlw	0
 11803  000114  14DE               	andwf	postinc2,w,c
 11804  000116  6FAC               	movwf	(??_f_write+3)& (0+255),b
 11805  000118  51A9               	movf	??_f_write& (0+255),w,b
 11806  00011A  11AA               	iorwf	(??_f_write+1)& (0+255),w,b
 11807  00011C  11AB               	iorwf	(??_f_write+2)& (0+255),w,b
 11808  00011E  11AC               	iorwf	(??_f_write+3)& (0+255),w,b
 11809  000120  A4D8               	btfss	status,2,c
 11810  000122  D2A8               	goto	l1342
 11811                           
 11812                           ; BSR set to: 1
 11813                           ;ff.c: 2152: csect = (BYTE)(fp->fptr / 512U & (fp->fs->csize - 1));
 11814  000124  0100               	movlb	0	; () banked
 11815  000126  EE20 F006          	lfsr	2,6
 11816  00012A  51CF               	movf	f_write@fp& (0+255),w,b
 11817  00012C  26D9               	addwf	fsr2l,f,c
 11818  00012E  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 11819  000130  22DA               	addwfc	fsr2h,f,c
 11820  000132  CFDE F1A9          	movff	postinc2,??_f_write
 11821  000136  CFDE F1AA          	movff	postinc2,??_f_write+1
 11822  00013A  CFDE F1AB          	movff	postinc2,??_f_write+2
 11823  00013E  CFDE F1AC          	movff	postinc2,??_f_write+3
 11824  000142  0E0A               	movlw	10
 11825  000144  D006               	goto	u16420
 11826  000146                     u16425:
 11827  000146  0101               	movlb	1	; () banked
 11828  000148  90D8               	bcf	status,0,c
 11829  00014A  33AC               	rrcf	(??_f_write+3)& (0+255),f,b
 11830  00014C  33AB               	rrcf	(??_f_write+2)& (0+255),f,b
 11831  00014E  33AA               	rrcf	(??_f_write+1)& (0+255),f,b
 11832  000150  33A9               	rrcf	??_f_write& (0+255),f,b
 11833  000152                     u16420:
 11834  000152  2EE8               	decfsz	wreg,f,c
 11835  000154  D7F8               	goto	u16425
 11836  000156  C0CF  FFD9         	movff	f_write@fp,fsr2l
 11837  00015A  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 11838  00015E  EE10 F002          	lfsr	1,2
 11839  000162  50DE               	movf	postinc2,w,c
 11840  000164  26E1               	addwf	fsr1l,f,c
 11841  000166  50DD               	movf	postdec2,w,c
 11842  000168  22E2               	addwfc	fsr1h,f,c
 11843  00016A  50E7               	movf	indf1,w,c
 11844  00016C  6FAD               	movwf	(??_f_write+4)& (0+255),b
 11845  00016E  05AD               	decf	(??_f_write+4)& (0+255),w,b
 11846  000170  15A9               	andwf	??_f_write& (0+255),w,b
 11847  000172  6FBC               	movwf	f_write@csect& (0+255),b
 11848                           
 11849                           ; BSR set to: 1
 11850                           ;ff.c: 2153: if (!csect) {
 11851  000174  51BC               	movf	f_write@csect& (0+255),w,b
 11852  000176  A4D8               	btfss	status,2,c
 11853  000178  D0A9               	goto	l1343
 11854                           
 11855                           ; BSR set to: 1
 11856                           ;ff.c: 2154: if (fp->fptr == 0) {
 11857  00017A  0100               	movlb	0	; () banked
 11858  00017C  EE20 F006          	lfsr	2,6
 11859  000180  51CF               	movf	f_write@fp& (0+255),w,b
 11860  000182  26D9               	addwf	fsr2l,f,c
 11861  000184  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 11862  000186  22DA               	addwfc	fsr2h,f,c
 11863  000188  50DE               	movf	postinc2,w,c
 11864  00018A  10DE               	iorwf	postinc2,w,c
 11865  00018C  10DE               	iorwf	postinc2,w,c
 11866  00018E  10DE               	iorwf	postinc2,w,c
 11867  000190  A4D8               	btfss	status,2,c
 11868  000192  D040               	goto	l1344
 11869                           
 11870                           ; BSR set to: 0
 11871                           ;ff.c: 2155: clst = fp->org_clust;
 11872  000194  EE20 F00E          	lfsr	2,14
 11873  000198  51CF               	movf	f_write@fp& (0+255),w,b
 11874  00019A  26D9               	addwf	fsr2l,f,c
 11875  00019C  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 11876  00019E  22DA               	addwfc	fsr2h,f,c
 11877  0001A0  CFDE F1BF          	movff	postinc2,f_write@clst
 11878  0001A4  CFDE F1C0          	movff	postinc2,f_write@clst+1
 11879  0001A8  CFDE F1C1          	movff	postinc2,f_write@clst+2
 11880  0001AC  CFDE F1C2          	movff	postinc2,f_write@clst+3
 11881                           
 11882                           ; BSR set to: 0
 11883                           ;ff.c: 2156: if (clst == 0)
 11884  0001B0  0101               	movlb	1	; () banked
 11885  0001B2  51BF               	movf	f_write@clst& (0+255),w,b
 11886  0001B4  11C0               	iorwf	(f_write@clst+1)& (0+255),w,b
 11887  0001B6  11C1               	iorwf	(f_write@clst+2)& (0+255),w,b
 11888  0001B8  11C2               	iorwf	(f_write@clst+3)& (0+255),w,b
 11889  0001BA  A4D8               	btfss	status,2,c
 11890  0001BC  D04B               	goto	l1346
 11891                           
 11892                           ; BSR set to: 1
 11893                           ;ff.c: 2157: fp->org_clust = clst = create_chain(fp->fs, 0);
 11894  0001BE  C0CF  FFD9         	movff	f_write@fp,fsr2l
 11895  0001C2  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 11896  0001C6  CFDE F0B9          	movff	postinc2,create_chain@fs
 11897  0001CA  CFDD F0BA          	movff	postdec2,create_chain@fs+1
 11898  0001CE  0E00               	movlw	0
 11899  0001D0  0100               	movlb	0	; () banked
 11900  0001D2  6FBB               	movwf	create_chain@clst& (0+255),b
 11901  0001D4  0E00               	movlw	0
 11902  0001D6  6FBC               	movwf	(create_chain@clst+1)& (0+255),b
 11903  0001D8  0E00               	movlw	0
 11904  0001DA  6FBD               	movwf	(create_chain@clst+2)& (0+255),b
 11905  0001DC  0E00               	movlw	0
 11906  0001DE  6FBE               	movwf	(create_chain@clst+3)& (0+255),b
 11907  0001E0  EC57  F012         	call	_create_chain	;wreg free
 11908  0001E4  C0B9  F1BF         	movff	?_create_chain,f_write@clst
 11909  0001E8  C0BA  F1C0         	movff	?_create_chain+1,f_write@clst+1
 11910  0001EC  C0BB  F1C1         	movff	?_create_chain+2,f_write@clst+2
 11911  0001F0  C0BC  F1C2         	movff	?_create_chain+3,f_write@clst+3
 11912  0001F4  0100               	movlb	0	; () banked
 11913  0001F6  EE20 F00E          	lfsr	2,14
 11914  0001FA  51CF               	movf	f_write@fp& (0+255),w,b
 11915  0001FC  26D9               	addwf	fsr2l,f,c
 11916  0001FE  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 11917  000200  22DA               	addwfc	fsr2h,f,c
 11918  000202  C1BF  FFDE         	movff	f_write@clst,postinc2
 11919  000206  C1C0  FFDE         	movff	f_write@clst+1,postinc2
 11920  00020A  C1C1  FFDE         	movff	f_write@clst+2,postinc2
 11921  00020E  C1C2  FFDE         	movff	f_write@clst+3,postinc2
 11922                           
 11923                           ; BSR set to: 0
 11924                           ;ff.c: 2158: } else {
 11925  000212  D020               	goto	l1346
 11926  000214                     l1344:
 11927                           
 11928                           ; BSR set to: 0
 11929                           ;ff.c: 2159: clst = create_chain(fp->fs, fp->curr_clust);
 11930                           
 11931                           ; BSR set to: 0
 11932  000214  C0CF  FFD9         	movff	f_write@fp,fsr2l
 11933  000218  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 11934  00021C  CFDE F0B9          	movff	postinc2,create_chain@fs
 11935  000220  CFDD F0BA          	movff	postdec2,create_chain@fs+1
 11936  000224  EE20 F012          	lfsr	2,18
 11937  000228  51CF               	movf	f_write@fp& (0+255),w,b
 11938  00022A  26D9               	addwf	fsr2l,f,c
 11939  00022C  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 11940  00022E  22DA               	addwfc	fsr2h,f,c
 11941  000230  CFDE F0BB          	movff	postinc2,create_chain@clst
 11942  000234  CFDE F0BC          	movff	postinc2,create_chain@clst+1
 11943  000238  CFDE F0BD          	movff	postinc2,create_chain@clst+2
 11944  00023C  CFDE F0BE          	movff	postinc2,create_chain@clst+3
 11945  000240  EC57  F012         	call	_create_chain	;wreg free
 11946  000244  C0B9  F1BF         	movff	?_create_chain,f_write@clst
 11947  000248  C0BA  F1C0         	movff	?_create_chain+1,f_write@clst+1
 11948  00024C  C0BB  F1C1         	movff	?_create_chain+2,f_write@clst+2
 11949  000250  C0BC  F1C2         	movff	?_create_chain+3,f_write@clst+3
 11950  000254                     l1346:
 11951                           
 11952                           ;ff.c: 2160: }
 11953                           ;ff.c: 2161: if (clst == 0) break;
 11954  000254  0101               	movlb	1	; () banked
 11955  000256  51BF               	movf	f_write@clst& (0+255),w,b
 11956  000258  11C0               	iorwf	(f_write@clst+1)& (0+255),w,b
 11957  00025A  11C1               	iorwf	(f_write@clst+2)& (0+255),w,b
 11958  00025C  11C2               	iorwf	(f_write@clst+3)& (0+255),w,b
 11959  00025E  B4D8               	btfsc	status,2,c
 11960  000260  D2C0               	goto	u16630
 11961                           
 11962                           ; BSR set to: 1
 11963                           ;ff.c: 2162: if (clst == 1) { fp->flag |= 0x80; return FR_INT_ERR; };
 11964                           
 11965                           ; BSR set to: 1
 11966                           
 11967                           ; BSR set to: 1
 11968  000262  05BF               	decf	f_write@clst& (0+255),w,b
 11969  000264  11C0               	iorwf	(f_write@clst+1)& (0+255),w,b
 11970  000266  11C1               	iorwf	(f_write@clst+2)& (0+255),w,b
 11971  000268  11C2               	iorwf	(f_write@clst+3)& (0+255),w,b
 11972  00026A  A4D8               	btfss	status,2,c
 11973  00026C  D00B               	goto	l1349
 11974                           
 11975                           ; BSR set to: 1
 11976  00026E  0100               	movlb	0	; () banked
 11977  000270  EE20 F004          	lfsr	2,4
 11978  000274  51CF               	movf	f_write@fp& (0+255),w,b
 11979  000276  26D9               	addwf	fsr2l,f,c
 11980  000278  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 11981  00027A  22DA               	addwfc	fsr2h,f,c
 11982  00027C  0E00               	movlw	0
 11983  00027E  8EDB               	bsf	plusw2,7,c
 11984                           
 11985                           ; BSR set to: 0
 11986  000280  0E02               	movlw	2
 11987                           
 11988                           ; BSR set to: 0
 11989  000282  0012               	return	
 11990  000284                     l1349:
 11991                           
 11992                           ;ff.c: 2163: if (clst == 0xFFFFFFFF) { fp->flag |= 0x80; return FR_DISK_ERR; };
 11993                           
 11994                           ; BSR set to: 0
 11995  000284  0101               	movlb	1	; () banked
 11996  000286  29BF               	incf	f_write@clst& (0+255),w,b
 11997  000288  E112               	bnz	l12848
 11998  00028A  29C0               	incf	(f_write@clst+1)& (0+255),w,b
 11999  00028C  E110               	bnz	l12848
 12000  00028E  29C1               	incf	(f_write@clst+2)& (0+255),w,b
 12001  000290  E10E               	bnz	l12848
 12002  000292  29C2               	incf	(f_write@clst+3)& (0+255),w,b
 12003  000294  A4D8               	btfss	status,2,c
 12004  000296  D00B               	goto	l1350
 12005                           
 12006                           ; BSR set to: 1
 12007  000298  0100               	movlb	0	; () banked
 12008  00029A  EE20 F004          	lfsr	2,4
 12009  00029E  51CF               	movf	f_write@fp& (0+255),w,b
 12010  0002A0  26D9               	addwf	fsr2l,f,c
 12011  0002A2  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12012  0002A4  22DA               	addwfc	fsr2h,f,c
 12013  0002A6  0E00               	movlw	0
 12014  0002A8  8EDB               	bsf	plusw2,7,c
 12015                           
 12016                           ; BSR set to: 0
 12017  0002AA  0E01               	movlw	1
 12018                           
 12019                           ; BSR set to: 0
 12020  0002AC  0012               	return	
 12021  0002AE                     l1350:
 12022  0002AE                     l12848:
 12023                           
 12024                           ;ff.c: 2164: fp->curr_clust = clst;
 12025  0002AE  0100               	movlb	0	; () banked
 12026  0002B0  EE20 F012          	lfsr	2,18
 12027  0002B4  51CF               	movf	f_write@fp& (0+255),w,b
 12028  0002B6  26D9               	addwf	fsr2l,f,c
 12029  0002B8  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12030  0002BA  22DA               	addwfc	fsr2h,f,c
 12031  0002BC  C1BF  FFDE         	movff	f_write@clst,postinc2
 12032  0002C0  C1C0  FFDE         	movff	f_write@clst+1,postinc2
 12033  0002C4  C1C1  FFDE         	movff	f_write@clst+2,postinc2
 12034  0002C8  C1C2  FFDE         	movff	f_write@clst+3,postinc2
 12035  0002CC                     l1343:
 12036                           
 12037                           ;ff.c: 2165: }
 12038                           ;ff.c: 2167: if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))
 12039                           
 12040                           ; BSR set to: 0
 12041  0002CC  0100               	movlb	0	; () banked
 12042  0002CE  EE20 F016          	lfsr	2,22
 12043  0002D2  51CF               	movf	f_write@fp& (0+255),w,b
 12044  0002D4  26D9               	addwf	fsr2l,f,c
 12045  0002D6  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12046  0002D8  22DA               	addwfc	fsr2h,f,c
 12047  0002DA  C0CF  FFE1         	movff	f_write@fp,fsr1l
 12048  0002DE  C0D0  FFE2         	movff	f_write@fp+1,fsr1h
 12049  0002E2  EE00 F02A          	lfsr	0,42
 12050  0002E6  50E6               	movf	postinc1,w,c
 12051  0002E8  26E9               	addwf	fsr0l,f,c
 12052  0002EA  50E5               	movf	postdec1,w,c
 12053  0002EC  22EA               	addwfc	fsr0h,f,c
 12054  0002EE  50DE               	movf	postinc2,w,c
 12055  0002F0  18EE               	xorwf	postinc0,w,c
 12056  0002F2  E12A               	bnz	l12860
 12057  0002F4  50DE               	movf	postinc2,w,c
 12058  0002F6  18EE               	xorwf	postinc0,w,c
 12059  0002F8  E127               	bnz	l12860
 12060  0002FA  50DE               	movf	postinc2,w,c
 12061  0002FC  18EE               	xorwf	postinc0,w,c
 12062  0002FE  E124               	bnz	l12860
 12063  000300  50DE               	movf	postinc2,w,c
 12064  000302  18EE               	xorwf	postinc0,w,c
 12065  000304  A4D8               	btfss	status,2,c
 12066  000306  D020               	goto	l1351
 12067                           
 12068                           ; BSR set to: 0
 12069  000308  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12070  00030C  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12071  000310  CFDE F071          	movff	postinc2,move_window@fs
 12072  000314  CFDD F072          	movff	postdec2,move_window@fs+1
 12073  000318  0E00               	movlw	0
 12074  00031A  6F73               	movwf	move_window@sector& (0+255),b
 12075  00031C  0E00               	movlw	0
 12076  00031E  6F74               	movwf	(move_window@sector+1)& (0+255),b
 12077  000320  0E00               	movlw	0
 12078  000322  6F75               	movwf	(move_window@sector+2)& (0+255),b
 12079  000324  0E00               	movlw	0
 12080  000326  6F76               	movwf	(move_window@sector+3)& (0+255),b
 12081  000328  EC69  F016         	call	_move_window	;wreg free
 12082  00032C  0900               	iorlw	0
 12083  00032E  B4D8               	btfsc	status,2,c
 12084  000330  D00B               	goto	l1351
 12085                           
 12086                           ;ff.c: 2168: { fp->flag |= 0x80; return FR_DISK_ERR; };
 12087  000332  0100               	movlb	0	; () banked
 12088  000334  EE20 F004          	lfsr	2,4
 12089  000338  51CF               	movf	f_write@fp& (0+255),w,b
 12090  00033A  26D9               	addwf	fsr2l,f,c
 12091  00033C  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12092  00033E  22DA               	addwfc	fsr2h,f,c
 12093  000340  0E00               	movlw	0
 12094  000342  8EDB               	bsf	plusw2,7,c
 12095                           
 12096                           ; BSR set to: 0
 12097  000344  0E01               	movlw	1
 12098                           
 12099                           ; BSR set to: 0
 12100  000346  0012               	return	
 12101  000348                     l1351:
 12102  000348                     l12860:
 12103                           
 12104                           ;ff.c: 2176: sect = clust2sect(fp->fs, fp->curr_clust);
 12105  000348  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12106  00034C  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12107  000350  CFDE F026          	movff	postinc2,clust2sect@fs
 12108  000354  CFDD F027          	movff	postdec2,clust2sect@fs+1
 12109  000358  0100               	movlb	0	; () banked
 12110  00035A  EE20 F012          	lfsr	2,18
 12111  00035E  51CF               	movf	f_write@fp& (0+255),w,b
 12112  000360  26D9               	addwf	fsr2l,f,c
 12113  000362  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12114  000364  22DA               	addwfc	fsr2h,f,c
 12115  000366  CFDE F028          	movff	postinc2,clust2sect@clst
 12116  00036A  CFDE F029          	movff	postinc2,clust2sect@clst+1
 12117  00036E  CFDE F02A          	movff	postinc2,clust2sect@clst+2
 12118  000372  CFDE F02B          	movff	postinc2,clust2sect@clst+3
 12119  000376  EC66  F020         	call	_clust2sect	;wreg free
 12120  00037A  C026  F1C3         	movff	?_clust2sect,f_write@sect
 12121  00037E  C027  F1C4         	movff	?_clust2sect+1,f_write@sect+1
 12122  000382  C028  F1C5         	movff	?_clust2sect+2,f_write@sect+2
 12123  000386  C029  F1C6         	movff	?_clust2sect+3,f_write@sect+3
 12124                           
 12125                           ;ff.c: 2177: if (!sect) { fp->flag |= 0x80; return FR_INT_ERR; };
 12126  00038A  0101               	movlb	1	; () banked
 12127  00038C  51C3               	movf	f_write@sect& (0+255),w,b
 12128  00038E  11C4               	iorwf	(f_write@sect+1)& (0+255),w,b
 12129  000390  11C5               	iorwf	(f_write@sect+2)& (0+255),w,b
 12130  000392  11C6               	iorwf	(f_write@sect+3)& (0+255),w,b
 12131  000394  A4D8               	btfss	status,2,c
 12132  000396  D00B               	goto	l1352
 12133                           
 12134                           ; BSR set to: 1
 12135  000398  0100               	movlb	0	; () banked
 12136  00039A  EE20 F004          	lfsr	2,4
 12137  00039E  51CF               	movf	f_write@fp& (0+255),w,b
 12138  0003A0  26D9               	addwf	fsr2l,f,c
 12139  0003A2  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12140  0003A4  22DA               	addwfc	fsr2h,f,c
 12141  0003A6  0E00               	movlw	0
 12142  0003A8  8EDB               	bsf	plusw2,7,c
 12143                           
 12144                           ; BSR set to: 0
 12145  0003AA  0E02               	movlw	2
 12146                           
 12147                           ; BSR set to: 0
 12148  0003AC  0012               	return	
 12149  0003AE                     l1352:
 12150                           
 12151                           ;ff.c: 2178: sect += csect;
 12152                           
 12153                           ; BSR set to: 0
 12154  0003AE  0101               	movlb	1	; () banked
 12155  0003B0  51BC               	movf	f_write@csect& (0+255),w,b
 12156  0003B2  27C3               	addwf	f_write@sect& (0+255),f,b
 12157  0003B4  0E00               	movlw	0
 12158  0003B6  23C4               	addwfc	(f_write@sect+1)& (0+255),f,b
 12159  0003B8  23C5               	addwfc	(f_write@sect+2)& (0+255),f,b
 12160  0003BA  23C6               	addwfc	(f_write@sect+3)& (0+255),f,b
 12161                           
 12162                           ;ff.c: 2179: cc = btw / 512U;
 12163  0003BC  C0D3  F1A9         	movff	f_write@btw,??_f_write
 12164  0003C0  C0D4  F1AA         	movff	f_write@btw+1,??_f_write+1
 12165  0003C4  0E09               	movlw	9
 12166  0003C6  6FAB               	movwf	(??_f_write+2)& (0+255),b
 12167  0003C8                     u16525:
 12168  0003C8  90D8               	bcf	status,0,c
 12169  0003CA  33AA               	rrcf	(??_f_write+1)& (0+255),f,b
 12170  0003CC  33A9               	rrcf	??_f_write& (0+255),f,b
 12171  0003CE  2FAB               	decfsz	(??_f_write+2)& (0+255),f,b
 12172  0003D0  D7FB               	goto	u16525
 12173  0003D2  C1A9  F1BD         	movff	??_f_write,f_write@cc
 12174  0003D6  C1AA  F1BE         	movff	??_f_write+1,f_write@cc+1
 12175                           
 12176                           ;ff.c: 2180: if (cc) {
 12177  0003DA  51BD               	movf	f_write@cc& (0+255),w,b
 12178  0003DC  11BE               	iorwf	(f_write@cc+1)& (0+255),w,b
 12179  0003DE  B4D8               	btfsc	status,2,c
 12180  0003E0  D0F1               	goto	l1353
 12181                           
 12182                           ; BSR set to: 1
 12183                           ;ff.c: 2181: if (csect + cc > fp->fs->csize)
 12184  0003E2  51BC               	movf	f_write@csect& (0+255),w,b
 12185  0003E4  25BD               	addwf	f_write@cc& (0+255),w,b
 12186  0003E6  6FA9               	movwf	??_f_write& (0+255),b
 12187  0003E8  0E00               	movlw	0
 12188  0003EA  21BE               	addwfc	(f_write@cc+1)& (0+255),w,b
 12189  0003EC  6FAA               	movwf	(??_f_write+1)& (0+255),b
 12190  0003EE  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12191  0003F2  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12192  0003F6  EE10 F002          	lfsr	1,2
 12193  0003FA  50DE               	movf	postinc2,w,c
 12194  0003FC  26E1               	addwf	fsr1l,f,c
 12195  0003FE  50DD               	movf	postdec2,w,c
 12196  000400  22E2               	addwfc	fsr1h,f,c
 12197  000402  50E7               	movf	indf1,w,c
 12198  000404  6FAB               	movwf	(??_f_write+2)& (0+255),b
 12199  000406  6BAC               	clrf	(??_f_write+3)& (0+255),b
 12200  000408  51A9               	movf	??_f_write& (0+255),w,b
 12201  00040A  5DAB               	subwf	(??_f_write+2)& (0+255),w,b
 12202  00040C  51AA               	movf	(??_f_write+1)& (0+255),w,b
 12203  00040E  59AC               	subwfb	(??_f_write+3)& (0+255),w,b
 12204  000410  B0D8               	btfsc	status,0,c
 12205  000412  D019               	goto	l1354
 12206                           
 12207                           ; BSR set to: 1
 12208                           ;ff.c: 2182: cc = fp->fs->csize - csect;
 12209  000414  51BC               	movf	f_write@csect& (0+255),w,b
 12210  000416  6FA9               	movwf	??_f_write& (0+255),b
 12211  000418  6BAA               	clrf	(??_f_write+1)& (0+255),b
 12212  00041A  1FA9               	comf	??_f_write& (0+255),f,b
 12213  00041C  1FAA               	comf	(??_f_write+1)& (0+255),f,b
 12214  00041E  4BA9               	infsnz	??_f_write& (0+255),f,b
 12215  000420  2BAA               	incf	(??_f_write+1)& (0+255),f,b
 12216  000422  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12217  000426  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12218  00042A  EE10 F002          	lfsr	1,2
 12219  00042E  50DE               	movf	postinc2,w,c
 12220  000430  26E1               	addwf	fsr1l,f,c
 12221  000432  50DD               	movf	postdec2,w,c
 12222  000434  22E2               	addwfc	fsr1h,f,c
 12223  000436  50E7               	movf	indf1,w,c
 12224  000438  6FAB               	movwf	(??_f_write+2)& (0+255),b
 12225  00043A  51AB               	movf	(??_f_write+2)& (0+255),w,b
 12226  00043C  25A9               	addwf	??_f_write& (0+255),w,b
 12227  00043E  6FBD               	movwf	f_write@cc& (0+255),b
 12228  000440  0E00               	movlw	0
 12229  000442  21AA               	addwfc	(??_f_write+1)& (0+255),w,b
 12230  000444  6FBE               	movwf	(f_write@cc+1)& (0+255),b
 12231  000446                     l1354:
 12232                           
 12233                           ; BSR set to: 1
 12234                           ;ff.c: 2183: if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 12235                           
 12236                           ; BSR set to: 1
 12237  000446  C1BA  F065         	movff	f_write@wbuff,disk_write@buff
 12238  00044A  C1BB  F066         	movff	f_write@wbuff+1,disk_write@buff+1
 12239  00044E  C1C3  F067         	movff	f_write@sect,disk_write@sector
 12240  000452  C1C4  F068         	movff	f_write@sect+1,disk_write@sector+1
 12241  000456  C1C5  F069         	movff	f_write@sect+2,disk_write@sector+2
 12242  00045A  C1C6  F06A         	movff	f_write@sect+3,disk_write@sector+3
 12243  00045E  C1BD  F06B         	movff	f_write@cc,disk_write@count
 12244  000462  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12245  000466  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12246  00046A  EE10 F001          	lfsr	1,1
 12247  00046E  50DE               	movf	postinc2,w,c
 12248  000470  26E1               	addwf	fsr1l,f,c
 12249  000472  50DD               	movf	postdec2,w,c
 12250  000474  22E2               	addwfc	fsr1h,f,c
 12251  000476  50E7               	movf	indf1,w,c
 12252  000478  ECFC  F026         	call	_disk_write
 12253  00047C  0900               	iorlw	0
 12254  00047E  B4D8               	btfsc	status,2,c
 12255  000480  D00B               	goto	l1355
 12256                           
 12257                           ;ff.c: 2184: { fp->flag |= 0x80; return FR_DISK_ERR; };
 12258  000482  0100               	movlb	0	; () banked
 12259  000484  EE20 F004          	lfsr	2,4
 12260  000488  51CF               	movf	f_write@fp& (0+255),w,b
 12261  00048A  26D9               	addwf	fsr2l,f,c
 12262  00048C  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12263  00048E  22DA               	addwfc	fsr2h,f,c
 12264  000490  0E00               	movlw	0
 12265  000492  8EDB               	bsf	plusw2,7,c
 12266                           
 12267                           ; BSR set to: 0
 12268  000494  0E01               	movlw	1
 12269                           
 12270                           ; BSR set to: 0
 12271  000496  0012               	return	
 12272  000498                     l1355:
 12273                           
 12274                           ;ff.c: 2186: if (fp->fs->winsect - sect < cc) {
 12275                           
 12276                           ; BSR set to: 0
 12277  000498  0101               	movlb	1	; () banked
 12278  00049A  51BD               	movf	f_write@cc& (0+255),w,b
 12279  00049C  6FA9               	movwf	??_f_write& (0+255),b
 12280  00049E  51BE               	movf	(f_write@cc+1)& (0+255),w,b
 12281  0004A0  6FAA               	movwf	(??_f_write+1)& (0+255),b
 12282  0004A2  6BAB               	clrf	(??_f_write+2)& (0+255),b
 12283  0004A4  6BAC               	clrf	(??_f_write+3)& (0+255),b
 12284  0004A6  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12285  0004AA  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12286  0004AE  EE10 F02A          	lfsr	1,42
 12287  0004B2  50DE               	movf	postinc2,w,c
 12288  0004B4  26E1               	addwf	fsr1l,f,c
 12289  0004B6  50DD               	movf	postdec2,w,c
 12290  0004B8  22E2               	addwfc	fsr1h,f,c
 12291  0004BA  CFE6 F1AD          	movff	postinc1,??_f_write+4
 12292  0004BE  CFE6 F1AE          	movff	postinc1,??_f_write+5
 12293  0004C2  CFE6 F1AF          	movff	postinc1,??_f_write+6
 12294  0004C6  CFE6 F1B0          	movff	postinc1,??_f_write+7
 12295  0004CA  C1C3  F1B1         	movff	f_write@sect,??_f_write+8
 12296  0004CE  C1C4  F1B2         	movff	f_write@sect+1,??_f_write+9
 12297  0004D2  C1C5  F1B3         	movff	f_write@sect+2,??_f_write+10
 12298  0004D6  C1C6  F1B4         	movff	f_write@sect+3,??_f_write+11
 12299  0004DA  1FB1               	comf	(??_f_write+8)& (0+255),f,b
 12300  0004DC  1FB2               	comf	(??_f_write+9)& (0+255),f,b
 12301  0004DE  1FB3               	comf	(??_f_write+10)& (0+255),f,b
 12302  0004E0  1FB4               	comf	(??_f_write+11)& (0+255),f,b
 12303  0004E2  2BB1               	incf	(??_f_write+8)& (0+255),f,b
 12304  0004E4  0E00               	movlw	0
 12305  0004E6  23B2               	addwfc	(??_f_write+9)& (0+255),f,b
 12306  0004E8  23B3               	addwfc	(??_f_write+10)& (0+255),f,b
 12307  0004EA  23B4               	addwfc	(??_f_write+11)& (0+255),f,b
 12308  0004EC  51AD               	movf	(??_f_write+4)& (0+255),w,b
 12309  0004EE  25B1               	addwf	(??_f_write+8)& (0+255),w,b
 12310  0004F0  6FB5               	movwf	(??_f_write+12)& (0+255),b
 12311  0004F2  51AE               	movf	(??_f_write+5)& (0+255),w,b
 12312  0004F4  21B2               	addwfc	(??_f_write+9)& (0+255),w,b
 12313  0004F6  6FB6               	movwf	(??_f_write+13)& (0+255),b
 12314  0004F8  51AF               	movf	(??_f_write+6)& (0+255),w,b
 12315  0004FA  21B3               	addwfc	(??_f_write+10)& (0+255),w,b
 12316  0004FC  6FB7               	movwf	(??_f_write+14)& (0+255),b
 12317  0004FE  51B0               	movf	(??_f_write+7)& (0+255),w,b
 12318  000500  21B4               	addwfc	(??_f_write+11)& (0+255),w,b
 12319  000502  6FB8               	movwf	(??_f_write+15)& (0+255),b
 12320  000504  51A9               	movf	??_f_write& (0+255),w,b
 12321  000506  5DB5               	subwf	(??_f_write+12)& (0+255),w,b
 12322  000508  51AA               	movf	(??_f_write+1)& (0+255),w,b
 12323  00050A  59B6               	subwfb	(??_f_write+13)& (0+255),w,b
 12324  00050C  51AB               	movf	(??_f_write+2)& (0+255),w,b
 12325  00050E  59B7               	subwfb	(??_f_write+14)& (0+255),w,b
 12326  000510  51AC               	movf	(??_f_write+3)& (0+255),w,b
 12327  000512  59B8               	subwfb	(??_f_write+15)& (0+255),w,b
 12328  000514  B0D8               	btfsc	status,0,c
 12329  000516  D046               	goto	l1356
 12330                           
 12331                           ; BSR set to: 1
 12332                           ;ff.c: 2187: mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * 512U), 512U);
 12333  000518  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12334  00051C  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12335  000520  CFDE F1A9          	movff	postinc2,??_f_write
 12336  000524  CFDD F1AA          	movff	postdec2,??_f_write+1
 12337  000528  0E2E               	movlw	46
 12338  00052A  25A9               	addwf	??_f_write& (0+255),w,b
 12339  00052C  6E1A               	movwf	mem_cpy@dst,c
 12340  00052E  0E00               	movlw	0
 12341  000530  21AA               	addwfc	(??_f_write+1)& (0+255),w,b
 12342  000532  6E1B               	movwf	mem_cpy@dst+1,c
 12343  000534  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12344  000538  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12345  00053C  EE10 F02A          	lfsr	1,42
 12346  000540  50DE               	movf	postinc2,w,c
 12347  000542  26E1               	addwf	fsr1l,f,c
 12348  000544  50DD               	movf	postdec2,w,c
 12349  000546  22E2               	addwfc	fsr1h,f,c
 12350  000548  CFE6 F1AB          	movff	postinc1,??_f_write+2
 12351  00054C  CFE5 F1AC          	movff	postdec1,??_f_write+3
 12352  000550  C1C3  F1AD         	movff	f_write@sect,??_f_write+4
 12353  000554  C1C4  F1AE         	movff	f_write@sect+1,??_f_write+5
 12354  000558  1FAD               	comf	(??_f_write+4)& (0+255),f,b
 12355  00055A  1FAE               	comf	(??_f_write+5)& (0+255),f,b
 12356  00055C  4BAD               	infsnz	(??_f_write+4)& (0+255),f,b
 12357  00055E  2BAE               	incf	(??_f_write+5)& (0+255),f,b
 12358  000560  51AB               	movf	(??_f_write+2)& (0+255),w,b
 12359  000562  27AD               	addwf	(??_f_write+4)& (0+255),f,b
 12360  000564  51AC               	movf	(??_f_write+3)& (0+255),w,b
 12361  000566  23AE               	addwfc	(??_f_write+5)& (0+255),f,b
 12362  000568  0E09               	movlw	9
 12363  00056A                     u16575:
 12364  00056A  90D8               	bcf	status,0,c
 12365  00056C  37AD               	rlcf	(??_f_write+4)& (0+255),f,b
 12366  00056E  37AE               	rlcf	(??_f_write+5)& (0+255),f,b
 12367  000570  2EE8               	decfsz	wreg,f,c
 12368  000572  D7FB               	goto	u16575
 12369  000574  51AD               	movf	(??_f_write+4)& (0+255),w,b
 12370  000576  25BA               	addwf	f_write@wbuff& (0+255),w,b
 12371  000578  6E1C               	movwf	mem_cpy@src,c
 12372  00057A  51AE               	movf	(??_f_write+5)& (0+255),w,b
 12373  00057C  21BB               	addwfc	(f_write@wbuff+1)& (0+255),w,b
 12374  00057E  6E1D               	movwf	mem_cpy@src+1,c
 12375  000580  0E02               	movlw	2
 12376  000582  6E1F               	movwf	mem_cpy@cnt+1,c
 12377  000584  0E00               	movlw	0
 12378  000586  6E1E               	movwf	mem_cpy@cnt,c
 12379  000588  EC00  F026         	call	_mem_cpy	;wreg free
 12380                           
 12381                           ;ff.c: 2188: fp->fs->wflag = 0;
 12382  00058C  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12383  000590  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12384  000594  EE10 F004          	lfsr	1,4
 12385  000598  50DE               	movf	postinc2,w,c
 12386  00059A  26E1               	addwf	fsr1l,f,c
 12387  00059C  50DD               	movf	postdec2,w,c
 12388  00059E  22E2               	addwfc	fsr1h,f,c
 12389  0005A0  0E00               	movlw	0
 12390  0005A2  6EE7               	movwf	indf1,c
 12391  0005A4                     l1356:
 12392                           
 12393                           ;ff.c: 2189: }
 12394                           ;ff.c: 2196: wcnt = 512U * cc;
 12395  0005A4  C1BD  F1A9         	movff	f_write@cc,??_f_write
 12396  0005A8  C1BE  F1AA         	movff	f_write@cc+1,??_f_write+1
 12397  0005AC  0E09               	movlw	9
 12398  0005AE                     u16585:
 12399  0005AE  90D8               	bcf	status,0,c
 12400  0005B0  0101               	movlb	1	; () banked
 12401  0005B2  37A9               	rlcf	??_f_write& (0+255),f,b
 12402  0005B4  37AA               	rlcf	(??_f_write+1)& (0+255),f,b
 12403  0005B6  2EE8               	decfsz	wreg,f,c
 12404  0005B8  D7FA               	goto	u16585
 12405  0005BA  C1A9  F1C7         	movff	??_f_write,f_write@wcnt
 12406  0005BE  C1AA  F1C8         	movff	??_f_write+1,f_write@wcnt+1
 12407                           
 12408                           ;ff.c: 2197: continue;
 12409  0005C2  D0E7               	goto	l1357
 12410  0005C4                     l1353:
 12411                           
 12412                           ; BSR set to: 1
 12413                           ;ff.c: 2198: }
 12414                           ;ff.c: 2200: if (fp->fptr >= fp->fsize) {
 12415                           
 12416                           ; BSR set to: 1
 12417  0005C4  0100               	movlb	0	; () banked
 12418  0005C6  EE20 F00A          	lfsr	2,10
 12419  0005CA  51CF               	movf	f_write@fp& (0+255),w,b
 12420  0005CC  26D9               	addwf	fsr2l,f,c
 12421  0005CE  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12422  0005D0  22DA               	addwfc	fsr2h,f,c
 12423  0005D2  EE10 F006          	lfsr	1,6
 12424  0005D6  51CF               	movf	f_write@fp& (0+255),w,b
 12425  0005D8  26E1               	addwf	fsr1l,f,c
 12426  0005DA  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12427  0005DC  22E2               	addwfc	fsr1h,f,c
 12428  0005DE  50DE               	movf	postinc2,w,c
 12429  0005E0  5CE6               	subwf	postinc1,w,c
 12430  0005E2  50DE               	movf	postinc2,w,c
 12431  0005E4  58E6               	subwfb	postinc1,w,c
 12432  0005E6  50DE               	movf	postinc2,w,c
 12433  0005E8  58E6               	subwfb	postinc1,w,c
 12434  0005EA  50DE               	movf	postinc2,w,c
 12435  0005EC  58E6               	subwfb	postinc1,w,c
 12436  0005EE  A0D8               	btfss	status,0,c
 12437  0005F0  D032               	goto	l1358
 12438                           
 12439                           ; BSR set to: 0
 12440                           ;ff.c: 2201: if (move_window(fp->fs, 0)) { fp->flag |= 0x80; return FR_DISK_ERR; };
 12441  0005F2  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12442  0005F6  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12443  0005FA  CFDE F071          	movff	postinc2,move_window@fs
 12444  0005FE  CFDD F072          	movff	postdec2,move_window@fs+1
 12445  000602  0E00               	movlw	0
 12446  000604  6F73               	movwf	move_window@sector& (0+255),b
 12447  000606  0E00               	movlw	0
 12448  000608  6F74               	movwf	(move_window@sector+1)& (0+255),b
 12449  00060A  0E00               	movlw	0
 12450  00060C  6F75               	movwf	(move_window@sector+2)& (0+255),b
 12451  00060E  0E00               	movlw	0
 12452  000610  6F76               	movwf	(move_window@sector+3)& (0+255),b
 12453  000612  EC69  F016         	call	_move_window	;wreg free
 12454  000616  0900               	iorlw	0
 12455  000618  B4D8               	btfsc	status,2,c
 12456  00061A  D00B               	goto	l1359
 12457  00061C  0100               	movlb	0	; () banked
 12458  00061E  EE20 F004          	lfsr	2,4
 12459  000622  51CF               	movf	f_write@fp& (0+255),w,b
 12460  000624  26D9               	addwf	fsr2l,f,c
 12461  000626  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12462  000628  22DA               	addwfc	fsr2h,f,c
 12463  00062A  0E00               	movlw	0
 12464  00062C  8EDB               	bsf	plusw2,7,c
 12465                           
 12466                           ; BSR set to: 0
 12467  00062E  0E01               	movlw	1
 12468                           
 12469                           ; BSR set to: 0
 12470  000630  0012               	return	
 12471  000632                     l1359:
 12472                           
 12473                           ;ff.c: 2202: fp->fs->winsect = sect;
 12474                           
 12475                           ; BSR set to: 0
 12476  000632  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12477  000636  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12478  00063A  EE10 F02A          	lfsr	1,42
 12479  00063E  50DE               	movf	postinc2,w,c
 12480  000640  26E1               	addwf	fsr1l,f,c
 12481  000642  50DD               	movf	postdec2,w,c
 12482  000644  22E2               	addwfc	fsr1h,f,c
 12483  000646  C1C3  FFE6         	movff	f_write@sect,postinc1
 12484  00064A  C1C4  FFE6         	movff	f_write@sect+1,postinc1
 12485  00064E  C1C5  FFE6         	movff	f_write@sect+2,postinc1
 12486  000652  C1C6  FFE6         	movff	f_write@sect+3,postinc1
 12487  000656                     l1358:
 12488                           
 12489                           ;ff.c: 2203: }
 12490                           ;ff.c: 2211: fp->dsect = sect;
 12491  000656  0100               	movlb	0	; () banked
 12492  000658  EE20 F016          	lfsr	2,22
 12493  00065C  51CF               	movf	f_write@fp& (0+255),w,b
 12494  00065E  26D9               	addwf	fsr2l,f,c
 12495  000660  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12496  000662  22DA               	addwfc	fsr2h,f,c
 12497  000664  C1C3  FFDE         	movff	f_write@sect,postinc2
 12498  000668  C1C4  FFDE         	movff	f_write@sect+1,postinc2
 12499  00066C  C1C5  FFDE         	movff	f_write@sect+2,postinc2
 12500  000670  C1C6  FFDE         	movff	f_write@sect+3,postinc2
 12501  000674                     l1342:
 12502                           
 12503                           ;ff.c: 2212: }
 12504                           ;ff.c: 2213: wcnt = 512U - (fp->fptr % 512U);
 12505                           
 12506                           ; BSR set to: 0
 12507  000674  0EFF               	movlw	255
 12508  000676  0101               	movlb	1	; () banked
 12509  000678  6FA9               	movwf	??_f_write& (0+255),b
 12510  00067A  0E01               	movlw	1
 12511  00067C  6FAA               	movwf	(??_f_write+1)& (0+255),b
 12512  00067E  0100               	movlb	0	; () banked
 12513  000680  EE20 F006          	lfsr	2,6
 12514  000684  51CF               	movf	f_write@fp& (0+255),w,b
 12515  000686  26D9               	addwf	fsr2l,f,c
 12516  000688  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12517  00068A  22DA               	addwfc	fsr2h,f,c
 12518  00068C  CFDE F1AB          	movff	postinc2,??_f_write+2
 12519  000690  CFDD F1AC          	movff	postdec2,??_f_write+3
 12520  000694  0101               	movlb	1	; () banked
 12521  000696  51A9               	movf	??_f_write& (0+255),w,b
 12522  000698  17AB               	andwf	(??_f_write+2)& (0+255),f,b
 12523  00069A  51AA               	movf	(??_f_write+1)& (0+255),w,b
 12524  00069C  17AC               	andwf	(??_f_write+3)& (0+255),f,b
 12525  00069E  1FAB               	comf	(??_f_write+2)& (0+255),f,b
 12526  0006A0  1FAC               	comf	(??_f_write+3)& (0+255),f,b
 12527  0006A2  4BAB               	infsnz	(??_f_write+2)& (0+255),f,b
 12528  0006A4  2BAC               	incf	(??_f_write+3)& (0+255),f,b
 12529  0006A6  0E00               	movlw	0
 12530  0006A8  25AB               	addwf	(??_f_write+2)& (0+255),w,b
 12531  0006AA  6FC7               	movwf	f_write@wcnt& (0+255),b
 12532  0006AC  0E02               	movlw	2
 12533  0006AE  21AC               	addwfc	(??_f_write+3)& (0+255),w,b
 12534  0006B0  6FC8               	movwf	(f_write@wcnt+1)& (0+255),b
 12535                           
 12536                           ; BSR set to: 1
 12537                           ;ff.c: 2214: if (wcnt > btw) wcnt = btw;
 12538  0006B2  51C7               	movf	f_write@wcnt& (0+255),w,b
 12539  0006B4  0100               	movlb	0	; () banked
 12540  0006B6  5DD3               	subwf	f_write@btw& (0+255),w,b
 12541  0006B8  0101               	movlb	1	; () banked
 12542  0006BA  51C8               	movf	(f_write@wcnt+1)& (0+255),w,b
 12543  0006BC  0100               	movlb	0	; () banked
 12544  0006BE  59D4               	subwfb	(f_write@btw+1)& (0+255),w,b
 12545  0006C0  B0D8               	btfsc	status,0,c
 12546  0006C2  D004               	goto	l1360
 12547                           
 12548                           ; BSR set to: 0
 12549  0006C4  C0D3  F1C7         	movff	f_write@btw,f_write@wcnt
 12550  0006C8  C0D4  F1C8         	movff	f_write@btw+1,f_write@wcnt+1
 12551  0006CC                     l1360:
 12552                           
 12553                           ; BSR set to: 0
 12554                           ;ff.c: 2216: if (move_window(fp->fs, fp->dsect))
 12555                           
 12556                           ; BSR set to: 0
 12557  0006CC  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12558  0006D0  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12559  0006D4  CFDE F071          	movff	postinc2,move_window@fs
 12560  0006D8  CFDD F072          	movff	postdec2,move_window@fs+1
 12561  0006DC  EE20 F016          	lfsr	2,22
 12562  0006E0  51CF               	movf	f_write@fp& (0+255),w,b
 12563  0006E2  26D9               	addwf	fsr2l,f,c
 12564  0006E4  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12565  0006E6  22DA               	addwfc	fsr2h,f,c
 12566  0006E8  CFDE F073          	movff	postinc2,move_window@sector
 12567  0006EC  CFDE F074          	movff	postinc2,move_window@sector+1
 12568  0006F0  CFDE F075          	movff	postinc2,move_window@sector+2
 12569  0006F4  CFDE F076          	movff	postinc2,move_window@sector+3
 12570  0006F8  EC69  F016         	call	_move_window	;wreg free
 12571  0006FC  0900               	iorlw	0
 12572  0006FE  B4D8               	btfsc	status,2,c
 12573  000700  D00B               	goto	l1361
 12574                           
 12575                           ;ff.c: 2217: { fp->flag |= 0x80; return FR_DISK_ERR; };
 12576  000702  0100               	movlb	0	; () banked
 12577  000704  EE20 F004          	lfsr	2,4
 12578  000708  51CF               	movf	f_write@fp& (0+255),w,b
 12579  00070A  26D9               	addwf	fsr2l,f,c
 12580  00070C  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12581  00070E  22DA               	addwfc	fsr2h,f,c
 12582  000710  0E00               	movlw	0
 12583  000712  8EDB               	bsf	plusw2,7,c
 12584                           
 12585                           ; BSR set to: 0
 12586  000714  0E01               	movlw	1
 12587                           
 12588                           ; BSR set to: 0
 12589  000716  0012               	return	
 12590  000718                     l1361:
 12591                           
 12592                           ;ff.c: 2218: mem_cpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
 12593                           
 12594                           ; BSR set to: 0
 12595  000718  0EFF               	movlw	255
 12596  00071A  0101               	movlb	1	; () banked
 12597  00071C  6FA9               	movwf	??_f_write& (0+255),b
 12598  00071E  0E01               	movlw	1
 12599  000720  6FAA               	movwf	(??_f_write+1)& (0+255),b
 12600  000722  0100               	movlb	0	; () banked
 12601  000724  EE20 F006          	lfsr	2,6
 12602  000728  51CF               	movf	f_write@fp& (0+255),w,b
 12603  00072A  26D9               	addwf	fsr2l,f,c
 12604  00072C  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12605  00072E  22DA               	addwfc	fsr2h,f,c
 12606  000730  CFDE F1AB          	movff	postinc2,??_f_write+2
 12607  000734  CFDD F1AC          	movff	postdec2,??_f_write+3
 12608  000738  0101               	movlb	1	; () banked
 12609  00073A  51A9               	movf	??_f_write& (0+255),w,b
 12610  00073C  17AB               	andwf	(??_f_write+2)& (0+255),f,b
 12611  00073E  51AA               	movf	(??_f_write+1)& (0+255),w,b
 12612  000740  17AC               	andwf	(??_f_write+3)& (0+255),f,b
 12613  000742  0E2E               	movlw	46
 12614  000744  27AB               	addwf	(??_f_write+2)& (0+255),f,b
 12615  000746  0E00               	movlw	0
 12616  000748  23AC               	addwfc	(??_f_write+3)& (0+255),f,b
 12617  00074A  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12618  00074E  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12619  000752  CFDE F1AD          	movff	postinc2,??_f_write+4
 12620  000756  CFDD F1AE          	movff	postdec2,??_f_write+5
 12621  00075A  51AB               	movf	(??_f_write+2)& (0+255),w,b
 12622  00075C  25AD               	addwf	(??_f_write+4)& (0+255),w,b
 12623  00075E  6E1A               	movwf	mem_cpy@dst,c
 12624  000760  51AC               	movf	(??_f_write+3)& (0+255),w,b
 12625  000762  21AE               	addwfc	(??_f_write+5)& (0+255),w,b
 12626  000764  6E1B               	movwf	mem_cpy@dst+1,c
 12627  000766  C1BA  F01C         	movff	f_write@wbuff,mem_cpy@src
 12628  00076A  C1BB  F01D         	movff	f_write@wbuff+1,mem_cpy@src+1
 12629  00076E  C1C7  F01E         	movff	f_write@wcnt,mem_cpy@cnt
 12630  000772  C1C8  F01F         	movff	f_write@wcnt+1,mem_cpy@cnt+1
 12631  000776  EC00  F026         	call	_mem_cpy	;wreg free
 12632                           
 12633                           ;ff.c: 2219: fp->fs->wflag = 1;
 12634  00077A  C0CF  FFD9         	movff	f_write@fp,fsr2l
 12635  00077E  C0D0  FFDA         	movff	f_write@fp+1,fsr2h
 12636  000782  EE10 F004          	lfsr	1,4
 12637  000786  50DE               	movf	postinc2,w,c
 12638  000788  26E1               	addwf	fsr1l,f,c
 12639  00078A  50DD               	movf	postdec2,w,c
 12640  00078C  22E2               	addwfc	fsr1h,f,c
 12641  00078E  0E01               	movlw	1
 12642  000790  6EE7               	movwf	indf1,c
 12643  000792                     l1357:
 12644  000792  0101               	movlb	1	; () banked
 12645  000794  51C7               	movf	f_write@wcnt& (0+255),w,b
 12646  000796  27BA               	addwf	f_write@wbuff& (0+255),f,b
 12647  000798  51C8               	movf	(f_write@wcnt+1)& (0+255),w,b
 12648  00079A  23BB               	addwfc	(f_write@wbuff+1)& (0+255),f,b
 12649                           
 12650                           ; BSR set to: 1
 12651  00079C  0100               	movlb	0	; () banked
 12652  00079E  EE20 F006          	lfsr	2,6
 12653  0007A2  51CF               	movf	f_write@fp& (0+255),w,b
 12654  0007A4  26D9               	addwf	fsr2l,f,c
 12655  0007A6  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12656  0007A8  22DA               	addwfc	fsr2h,f,c
 12657  0007AA  0101               	movlb	1	; () banked
 12658  0007AC  51C7               	movf	f_write@wcnt& (0+255),w,b
 12659  0007AE  26DE               	addwf	postinc2,f,c
 12660  0007B0  51C8               	movf	(f_write@wcnt+1)& (0+255),w,b
 12661  0007B2  22DE               	addwfc	postinc2,f,c
 12662  0007B4  0E00               	movlw	0
 12663  0007B6  22DE               	addwfc	postinc2,f,c
 12664  0007B8  22DE               	addwfc	postinc2,f,c
 12665                           
 12666                           ; BSR set to: 1
 12667  0007BA  C0D5  FFD9         	movff	f_write@bw,fsr2l
 12668  0007BE  C0D6  FFDA         	movff	f_write@bw+1,fsr2h
 12669  0007C2  51C7               	movf	f_write@wcnt& (0+255),w,b
 12670  0007C4  26DE               	addwf	postinc2,f,c
 12671  0007C6  51C8               	movf	(f_write@wcnt+1)& (0+255),w,b
 12672  0007C8  22DD               	addwfc	postdec2,f,c
 12673                           
 12674                           ; BSR set to: 1
 12675  0007CA  51C7               	movf	f_write@wcnt& (0+255),w,b
 12676  0007CC  0100               	movlb	0	; () banked
 12677  0007CE  5FD3               	subwf	f_write@btw& (0+255),f,b
 12678  0007D0  0101               	movlb	1	; () banked
 12679  0007D2  51C8               	movf	(f_write@wcnt+1)& (0+255),w,b
 12680  0007D4  0100               	movlb	0	; () banked
 12681  0007D6  5BD4               	subwfb	(f_write@btw+1)& (0+255),f,b
 12682  0007D8                     l1340:
 12683                           
 12684                           ; BSR set to: 0
 12685  0007D8  0100               	movlb	0	; () banked
 12686  0007DA  51D3               	movf	f_write@btw& (0+255),w,b
 12687  0007DC  11D4               	iorwf	(f_write@btw+1)& (0+255),w,b
 12688  0007DE  A4D8               	btfss	status,2,c
 12689  0007E0  D488               	goto	l1341
 12690  0007E2                     u16630:
 12691                           
 12692                           ;ff.c: 2224: }
 12693                           ;ff.c: 2226: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
 12694                           
 12695                           ; BSR set to: 0
 12696  0007E2  0100               	movlb	0	; () banked
 12697  0007E4  EE20 F006          	lfsr	2,6
 12698  0007E8  51CF               	movf	f_write@fp& (0+255),w,b
 12699  0007EA  26D9               	addwf	fsr2l,f,c
 12700  0007EC  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12701  0007EE  22DA               	addwfc	fsr2h,f,c
 12702  0007F0  EE10 F00A          	lfsr	1,10
 12703  0007F4  51CF               	movf	f_write@fp& (0+255),w,b
 12704  0007F6  26E1               	addwf	fsr1l,f,c
 12705  0007F8  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12706  0007FA  22E2               	addwfc	fsr1h,f,c
 12707  0007FC  50DE               	movf	postinc2,w,c
 12708  0007FE  5CE6               	subwf	postinc1,w,c
 12709  000800  50DE               	movf	postinc2,w,c
 12710  000802  58E6               	subwfb	postinc1,w,c
 12711  000804  50DE               	movf	postinc2,w,c
 12712  000806  58E6               	subwfb	postinc1,w,c
 12713  000808  50DE               	movf	postinc2,w,c
 12714  00080A  58E6               	subwfb	postinc1,w,c
 12715  00080C  B0D8               	btfsc	status,0,c
 12716  00080E  D014               	goto	l1362
 12717                           
 12718                           ; BSR set to: 0
 12719  000810  EE20 F006          	lfsr	2,6
 12720  000814  51CF               	movf	f_write@fp& (0+255),w,b
 12721  000816  26D9               	addwf	fsr2l,f,c
 12722  000818  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12723  00081A  22DA               	addwfc	fsr2h,f,c
 12724  00081C  EE10 F00A          	lfsr	1,10
 12725  000820  51CF               	movf	f_write@fp& (0+255),w,b
 12726  000822  26E1               	addwf	fsr1l,f,c
 12727  000824  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12728  000826  22E2               	addwfc	fsr1h,f,c
 12729  000828  CFDE FFE6          	movff	postinc2,postinc1
 12730  00082C  CFDE FFE6          	movff	postinc2,postinc1
 12731  000830  CFDE FFE6          	movff	postinc2,postinc1
 12732  000834  CFDE FFE6          	movff	postinc2,postinc1
 12733  000838                     l1362:
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;ff.c: 2227: fp->flag |= 0x20;
 12737                           
 12738                           ; BSR set to: 0
 12739  000838  EE20 F004          	lfsr	2,4
 12740  00083C  51CF               	movf	f_write@fp& (0+255),w,b
 12741  00083E  26D9               	addwf	fsr2l,f,c
 12742  000840  51D0               	movf	(f_write@fp+1)& (0+255),w,b
 12743  000842  22DA               	addwfc	fsr2h,f,c
 12744  000844  0E00               	movlw	0
 12745  000846  8ADB               	bsf	plusw2,5,c
 12746                           
 12747                           ; BSR set to: 0
 12748                           ;ff.c: 2229: return FR_OK;
 12749  000848  0E00               	movlw	0
 12750  00084A  0012               	return	
 12751  00084C                     __end_of_f_write:
 12752                           	opt stack 0
 12753                           tosu	equ	0xFFF
 12754                           tosh	equ	0xFFE
 12755                           tosl	equ	0xFFD
 12756                           pclath	equ	0xFFA
 12757                           tblptru	equ	0xFF8
 12758                           tblptrh	equ	0xFF7
 12759                           tblptrl	equ	0xFF6
 12760                           tablat	equ	0xFF5
 12761                           prodh	equ	0xFF4
 12762                           prodl	equ	0xFF3
 12763                           intcon	equ	0xFF2
 12764                           intcon2	equ	0xFF1
 12765                           intcon3	equ	0xFF0
 12766                           postinc0	equ	0xFEE
 12767                           fsr0h	equ	0xFEA
 12768                           fsr0l	equ	0xFE9
 12769                           wreg	equ	0xFE8
 12770                           indf1	equ	0xFE7
 12771                           postinc1	equ	0xFE6
 12772                           postdec1	equ	0xFE5
 12773                           fsr1h	equ	0xFE2
 12774                           fsr1l	equ	0xFE1
 12775                           indf2	equ	0xFDF
 12776                           postinc2	equ	0xFDE
 12777                           postdec2	equ	0xFDD
 12778                           plusw2	equ	0xFDB
 12779                           fsr2h	equ	0xFDA
 12780                           fsr2l	equ	0xFD9
 12781                           status	equ	0xFD8
 12782                           
 12783 ;; *************** function _mem_cpy *****************
 12784 ;; Defined at:
 12785 ;;		line 232 in file "bibliotecas/ff.c"
 12786 ;; Parameters:    Size  Location     Type
 12787 ;;  dst             2   25[COMRAM] PTR void 
 12788 ;;		 -> NULL(0), 
 12789 ;;  src             2   27[COMRAM] PTR const void 
 12790 ;;		 -> f_readdir@sfn(12), f_opendir@sfn(12), f_open@sfn(12), NULL(0), 
 12791 ;;		 -> STR_10(12), 
 12792 ;;  cnt             2   29[COMRAM] int 
 12793 ;; Auto vars:     Size  Location     Type
 12794 ;;  s               2   33[COMRAM] PTR const unsigned char 
 12795 ;;		 -> f_readdir@sfn(12), f_opendir@sfn(12), f_open@sfn(12), NULL(0), 
 12796 ;;		 -> STR_10(12), 
 12797 ;;  d               2   31[COMRAM] PTR unsigned char 
 12798 ;;		 -> NULL(0), 
 12799 ;; Return value:  Size  Location     Type
 12800 ;;                  1    wreg      void 
 12801 ;; Registers used:
 12802 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 12803 ;; Tracked objects:
 12804 ;;		On entry : 0/0
 12805 ;;		On exit  : 0/0
 12806 ;;		Unchanged: 0/0
 12807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12808 ;;      Params:         6       0       0       0       0       0       0       0       0
 12809 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12810 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12811 ;;      Totals:        10       0       0       0       0       0       0       0       0
 12812 ;;Total ram usage:       10 bytes
 12813 ;; Hardware stack levels used:    1
 12814 ;; Hardware stack levels required when called:    2
 12815 ;; This function calls:
 12816 ;;		Nothing
 12817 ;; This function is called by:
 12818 ;;		_f_write
 12819 ;;		_dir_register
 12820 ;;		_f_read
 12821 ;; This function uses a non-reentrant model
 12822 ;;
 12823                           
 12824                           	psect	text50
 12825  004C00                     __ptext50:
 12826                           	opt stack 0
 12827  004C00                     _mem_cpy:
 12828                           	opt stack 25
 12829                           
 12830                           ;ff.c: 233: BYTE *d = (BYTE*)dst;
 12831                           
 12832                           ;incstack = 0
 12833  004C00  C01A  F020         	movff	mem_cpy@dst,mem_cpy@d
 12834  004C04  C01B  F021         	movff	mem_cpy@dst+1,mem_cpy@d+1
 12835                           
 12836                           ;ff.c: 234: const BYTE *s = (const BYTE*)src;
 12837  004C08  C01C  F022         	movff	mem_cpy@src,mem_cpy@s
 12838  004C0C  C01D  F023         	movff	mem_cpy@src+1,mem_cpy@s+1
 12839                           
 12840                           ;ff.c: 243: while (cnt--)
 12841  004C10  D019               	goto	l941
 12842  004C12                     l12448:
 12843                           
 12844                           ;ff.c: 244: *d++ = *s++;
 12845  004C12  C022  FFF6         	movff	mem_cpy@s,tblptrl
 12846  004C16  C023  FFF7         	movff	mem_cpy@s+1,tblptrh
 12847  004C1A  6AF8               	clrf	tblptru,c
 12848  004C1C  C020  FFD9         	movff	mem_cpy@d,fsr2l
 12849  004C20  C021  FFDA         	movff	mem_cpy@d+1,fsr2h
 12850  004C24  0E07               	movlw	(high __ramtop+-1)
 12851  004C26  64F7               	cpfsgt	tblptrh,c
 12852  004C28  D003               	bra	u15867
 12853  004C2A  0008               	tblrd		*
 12854  004C2C  50F5               	movf	tablat,w,c
 12855  004C2E  D005               	bra	u15860
 12856  004C30                     u15867:
 12857  004C30  CFF6 FFE9          	movff	tblptrl,fsr0l
 12858  004C34  CFF7 FFEA          	movff	tblptrh,fsr0h
 12859  004C38  50EF               	movf	indf0,w,c
 12860  004C3A                     u15860:
 12861  004C3A  6EDF               	movwf	indf2,c
 12862  004C3C  4A22               	infsnz	mem_cpy@s,f,c
 12863  004C3E  2A23               	incf	mem_cpy@s+1,f,c
 12864  004C40  4A20               	infsnz	mem_cpy@d,f,c
 12865  004C42  2A21               	incf	mem_cpy@d+1,f,c
 12866  004C44                     l941:
 12867  004C44  061E               	decf	mem_cpy@cnt,f,c
 12868  004C46  A0D8               	btfss	status,0,c
 12869  004C48  061F               	decf	mem_cpy@cnt+1,f,c
 12870  004C4A  281E               	incf	mem_cpy@cnt,w,c
 12871  004C4C  E1E2               	bnz	l12448
 12872  004C4E  281F               	incf	mem_cpy@cnt+1,w,c
 12873  004C50  B4D8               	btfsc	status,2,c
 12874  004C52  0012               	return	
 12875  004C54  D7DE               	goto	l942
 12876  004C56                     __end_of_mem_cpy:
 12877                           	opt stack 0
 12878                           tosu	equ	0xFFF
 12879                           tosh	equ	0xFFE
 12880                           tosl	equ	0xFFD
 12881                           pclath	equ	0xFFA
 12882                           tblptru	equ	0xFF8
 12883                           tblptrh	equ	0xFF7
 12884                           tblptrl	equ	0xFF6
 12885                           tablat	equ	0xFF5
 12886                           prodh	equ	0xFF4
 12887                           prodl	equ	0xFF3
 12888                           intcon	equ	0xFF2
 12889                           intcon2	equ	0xFF1
 12890                           intcon3	equ	0xFF0
 12891                           indf0	equ	0xFEF
 12892                           postinc0	equ	0xFEE
 12893                           fsr0h	equ	0xFEA
 12894                           fsr0l	equ	0xFE9
 12895                           wreg	equ	0xFE8
 12896                           indf1	equ	0xFE7
 12897                           postinc1	equ	0xFE6
 12898                           postdec1	equ	0xFE5
 12899                           fsr1h	equ	0xFE2
 12900                           fsr1l	equ	0xFE1
 12901                           indf2	equ	0xFDF
 12902                           postinc2	equ	0xFDE
 12903                           postdec2	equ	0xFDD
 12904                           plusw2	equ	0xFDB
 12905                           fsr2h	equ	0xFDA
 12906                           fsr2l	equ	0xFD9
 12907                           status	equ	0xFD8
 12908                           
 12909 ;; *************** function _create_chain *****************
 12910 ;; Defined at:
 12911 ;;		line 636 in file "bibliotecas/ff.c"
 12912 ;; Parameters:    Size  Location     Type
 12913 ;;  fs              2   89[BANK0 ] PTR struct .
 12914 ;;		 -> NULL(0), 
 12915 ;;  clst            4   91[BANK0 ] unsigned long 
 12916 ;; Auto vars:     Size  Location     Type
 12917 ;;  ncl             4  107[BANK0 ] unsigned long 
 12918 ;;  cs              4  103[BANK0 ] unsigned long 
 12919 ;;  scl             4   99[BANK0 ] unsigned long 
 12920 ;; Return value:  Size  Location     Type
 12921 ;;                  4   89[BANK0 ] unsigned long 
 12922 ;; Registers used:
 12923 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12924 ;; Tracked objects:
 12925 ;;		On entry : 0/0
 12926 ;;		On exit  : 0/0
 12927 ;;		Unchanged: 0/0
 12928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12929 ;;      Params:         0       6       0       0       0       0       0       0       0
 12930 ;;      Locals:         0      12       0       0       0       0       0       0       0
 12931 ;;      Temps:          0       4       0       0       0       0       0       0       0
 12932 ;;      Totals:         0      22       0       0       0       0       0       0       0
 12933 ;;Total ram usage:       22 bytes
 12934 ;; Hardware stack levels used:    1
 12935 ;; Hardware stack levels required when called:    9
 12936 ;; This function calls:
 12937 ;;		_get_fat
 12938 ;;		_put_fat
 12939 ;; This function is called by:
 12940 ;;		_f_write
 12941 ;;		_dir_next
 12942 ;;		_f_lseek
 12943 ;; This function uses a non-reentrant model
 12944 ;;
 12945                           
 12946                           	psect	text51
 12947  0024AE                     __ptext51:
 12948                           	opt stack 0
 12949  0024AE                     _create_chain:
 12950                           	opt stack 18
 12951                           
 12952                           ;ff.c: 641: DWORD cs, ncl, scl;
 12953                           ;ff.c: 644: if (clst == 0) {
 12954                           
 12955                           ;incstack = 0
 12956  0024AE  0100               	movlb	0	; () banked
 12957  0024B0  51BB               	movf	create_chain@clst& (0+255),w,b
 12958  0024B2  11BC               	iorwf	(create_chain@clst+1)& (0+255),w,b
 12959  0024B4  11BD               	iorwf	(create_chain@clst+2)& (0+255),w,b
 12960  0024B6  11BE               	iorwf	(create_chain@clst+3)& (0+255),w,b
 12961  0024B8  A4D8               	btfss	status,2,c
 12962  0024BA  D02D               	goto	l1045
 12963                           
 12964                           ; BSR set to: 0
 12965                           ;ff.c: 645: scl = fs->last_clust;
 12966  0024BC  EE20 F00A          	lfsr	2,10
 12967  0024C0  51B9               	movf	create_chain@fs& (0+255),w,b
 12968  0024C2  26D9               	addwf	fsr2l,f,c
 12969  0024C4  51BA               	movf	(create_chain@fs+1)& (0+255),w,b
 12970  0024C6  22DA               	addwfc	fsr2h,f,c
 12971  0024C8  CFDE F0C3          	movff	postinc2,create_chain@scl
 12972  0024CC  CFDE F0C4          	movff	postinc2,create_chain@scl+1
 12973  0024D0  CFDE F0C5          	movff	postinc2,create_chain@scl+2
 12974  0024D4  CFDE F0C6          	movff	postinc2,create_chain@scl+3
 12975                           
 12976                           ; BSR set to: 0
 12977                           ;ff.c: 646: if (!scl || scl >= fs->n_fatent) scl = 1;
 12978  0024D8  51C3               	movf	create_chain@scl& (0+255),w,b
 12979  0024DA  11C4               	iorwf	(create_chain@scl+1)& (0+255),w,b
 12980  0024DC  11C5               	iorwf	(create_chain@scl+2)& (0+255),w,b
 12981  0024DE  11C6               	iorwf	(create_chain@scl+3)& (0+255),w,b
 12982  0024E0  B4D8               	btfsc	status,2,c
 12983  0024E2  D010               	goto	u15900
 12984                           
 12985                           ; BSR set to: 0
 12986  0024E4  EE20 F016          	lfsr	2,22
 12987  0024E8  51B9               	movf	create_chain@fs& (0+255),w,b
 12988  0024EA  26D9               	addwf	fsr2l,f,c
 12989  0024EC  51BA               	movf	(create_chain@fs+1)& (0+255),w,b
 12990  0024EE  22DA               	addwfc	fsr2h,f,c
 12991  0024F0  50DE               	movf	postinc2,w,c
 12992  0024F2  5DC3               	subwf	create_chain@scl& (0+255),w,b
 12993  0024F4  50DE               	movf	postinc2,w,c
 12994  0024F6  59C4               	subwfb	(create_chain@scl+1)& (0+255),w,b
 12995  0024F8  50DE               	movf	postinc2,w,c
 12996  0024FA  59C5               	subwfb	(create_chain@scl+2)& (0+255),w,b
 12997  0024FC  50DE               	movf	postinc2,w,c
 12998  0024FE  59C6               	subwfb	(create_chain@scl+3)& (0+255),w,b
 12999  002500  A0D8               	btfss	status,0,c
 13000  002502  D052               	goto	l1049
 13001  002504                     u15900:
 13002                           
 13003                           ; BSR set to: 0
 13004                           
 13005                           ; BSR set to: 0
 13006  002504  0E01               	movlw	1
 13007  002506  6FC3               	movwf	create_chain@scl& (0+255),b
 13008  002508  0E00               	movlw	0
 13009  00250A  6FC4               	movwf	(create_chain@scl+1)& (0+255),b
 13010  00250C  0E00               	movlw	0
 13011  00250E  6FC5               	movwf	(create_chain@scl+2)& (0+255),b
 13012  002510  0E00               	movlw	0
 13013  002512  6FC6               	movwf	(create_chain@scl+3)& (0+255),b
 13014                           
 13015                           ; BSR set to: 0
 13016                           ;ff.c: 647: }
 13017  002514  D049               	goto	l1049
 13018  002516                     l1045:
 13019                           
 13020                           ; BSR set to: 0
 13021                           ;ff.c: 648: else {
 13022                           ;ff.c: 649: cs = get_fat(fs, clst);
 13023                           
 13024                           ; BSR set to: 0
 13025  002516  C0B9  F088         	movff	create_chain@fs,get_fat@fs
 13026  00251A  C0BA  F089         	movff	create_chain@fs+1,get_fat@fs+1
 13027  00251E  C0BB  F08A         	movff	create_chain@clst,get_fat@clst
 13028  002522  C0BC  F08B         	movff	create_chain@clst+1,get_fat@clst+1
 13029  002526  C0BD  F08C         	movff	create_chain@clst+2,get_fat@clst+2
 13030  00252A  C0BE  F08D         	movff	create_chain@clst+3,get_fat@clst+3
 13031  00252E  ECA8  F00A         	call	_get_fat	;wreg free
 13032  002532  C088  F0C7         	movff	?_get_fat,create_chain@cs
 13033  002536  C089  F0C8         	movff	?_get_fat+1,create_chain@cs+1
 13034  00253A  C08A  F0C9         	movff	?_get_fat+2,create_chain@cs+2
 13035  00253E  C08B  F0CA         	movff	?_get_fat+3,create_chain@cs+3
 13036                           
 13037                           ;ff.c: 650: if (cs < 2) return 1;
 13038  002542  0100               	movlb	0	; () banked
 13039  002544  51CA               	movf	(create_chain@cs+3)& (0+255),w,b
 13040  002546  11C9               	iorwf	(create_chain@cs+2)& (0+255),w,b
 13041  002548  11C8               	iorwf	(create_chain@cs+1)& (0+255),w,b
 13042  00254A  E10D               	bnz	l12474
 13043  00254C  0E02               	movlw	2
 13044  00254E  5DC7               	subwf	create_chain@cs& (0+255),w,b
 13045  002550  B0D8               	btfsc	status,0,c
 13046  002552  D009               	goto	l1050
 13047                           
 13048                           ; BSR set to: 0
 13049  002554  0E01               	movlw	1
 13050  002556  6FB9               	movwf	?_create_chain& (0+255),b
 13051  002558  0E00               	movlw	0
 13052  00255A  6FBA               	movwf	(?_create_chain+1)& (0+255),b
 13053  00255C  0E00               	movlw	0
 13054  00255E  6FBB               	movwf	(?_create_chain+2)& (0+255),b
 13055  002560  0E00               	movlw	0
 13056  002562  6FBC               	movwf	(?_create_chain+3)& (0+255),b
 13057                           
 13058                           ; BSR set to: 0
 13059  002564  0012               	return	
 13060  002566                     l1050:
 13061  002566                     l12474:
 13062                           
 13063                           ; BSR set to: 0
 13064                           ;ff.c: 651: if (cs < fs->n_fatent) return cs;
 13065  002566  EE20 F016          	lfsr	2,22
 13066  00256A  51B9               	movf	create_chain@fs& (0+255),w,b
 13067  00256C  26D9               	addwf	fsr2l,f,c
 13068  00256E  51BA               	movf	(create_chain@fs+1)& (0+255),w,b
 13069  002570  22DA               	addwfc	fsr2h,f,c
 13070  002572  50DE               	movf	postinc2,w,c
 13071  002574  5DC7               	subwf	create_chain@cs& (0+255),w,b
 13072  002576  50DE               	movf	postinc2,w,c
 13073  002578  59C8               	subwfb	(create_chain@cs+1)& (0+255),w,b
 13074  00257A  50DE               	movf	postinc2,w,c
 13075  00257C  59C9               	subwfb	(create_chain@cs+2)& (0+255),w,b
 13076  00257E  50DE               	movf	postinc2,w,c
 13077  002580  59CA               	subwfb	(create_chain@cs+3)& (0+255),w,b
 13078  002582  B0D8               	btfsc	status,0,c
 13079  002584  D009               	goto	l1052
 13080                           
 13081                           ; BSR set to: 0
 13082  002586  C0C7  F0B9         	movff	create_chain@cs,?_create_chain
 13083  00258A  C0C8  F0BA         	movff	create_chain@cs+1,?_create_chain+1
 13084  00258E  C0C9  F0BB         	movff	create_chain@cs+2,?_create_chain+2
 13085  002592  C0CA  F0BC         	movff	create_chain@cs+3,?_create_chain+3
 13086  002596  0012               	return	
 13087  002598                     l1052:
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;ff.c: 652: scl = clst;
 13091  002598  C0BB  F0C3         	movff	create_chain@clst,create_chain@scl
 13092  00259C  C0BC  F0C4         	movff	create_chain@clst+1,create_chain@scl+1
 13093  0025A0  C0BD  F0C5         	movff	create_chain@clst+2,create_chain@scl+2
 13094  0025A4  C0BE  F0C6         	movff	create_chain@clst+3,create_chain@scl+3
 13095  0025A8                     l1049:
 13096                           
 13097                           ; BSR set to: 0
 13098                           ;ff.c: 653: }
 13099                           ;ff.c: 655: ncl = scl;
 13100  0025A8  C0C3  F0CB         	movff	create_chain@scl,create_chain@ncl
 13101  0025AC  C0C4  F0CC         	movff	create_chain@scl+1,create_chain@ncl+1
 13102  0025B0  C0C5  F0CD         	movff	create_chain@scl+2,create_chain@ncl+2
 13103  0025B4  C0C6  F0CE         	movff	create_chain@scl+3,create_chain@ncl+3
 13104  0025B8                     l12478:
 13105                           
 13106                           ; BSR set to: 0
 13107                           ;ff.c: 657: ncl++;
 13108  0025B8  0E01               	movlw	1
 13109  0025BA  27CB               	addwf	create_chain@ncl& (0+255),f,b
 13110  0025BC  0E00               	movlw	0
 13111  0025BE  23CC               	addwfc	(create_chain@ncl+1)& (0+255),f,b
 13112  0025C0  23CD               	addwfc	(create_chain@ncl+2)& (0+255),f,b
 13113  0025C2  23CE               	addwfc	(create_chain@ncl+3)& (0+255),f,b
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;ff.c: 658: if (ncl >= fs->n_fatent) {
 13117  0025C4  EE20 F016          	lfsr	2,22
 13118  0025C8  51B9               	movf	create_chain@fs& (0+255),w,b
 13119  0025CA  26D9               	addwf	fsr2l,f,c
 13120  0025CC  51BA               	movf	(create_chain@fs+1)& (0+255),w,b
 13121  0025CE  22DA               	addwfc	fsr2h,f,c
 13122  0025D0  50DE               	movf	postinc2,w,c
 13123  0025D2  5DCB               	subwf	create_chain@ncl& (0+255),w,b
 13124  0025D4  50DE               	movf	postinc2,w,c
 13125  0025D6  59CC               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 13126  0025D8  50DE               	movf	postinc2,w,c
 13127  0025DA  59CD               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 13128  0025DC  50DE               	movf	postinc2,w,c
 13129  0025DE  59CE               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 13130  0025E0  A0D8               	btfss	status,0,c
 13131  0025E2  D01B               	goto	l1055
 13132                           
 13133                           ; BSR set to: 0
 13134                           ;ff.c: 659: ncl = 2;
 13135  0025E4  0E02               	movlw	2
 13136  0025E6  6FCB               	movwf	create_chain@ncl& (0+255),b
 13137  0025E8  0E00               	movlw	0
 13138  0025EA  6FCC               	movwf	(create_chain@ncl+1)& (0+255),b
 13139  0025EC  0E00               	movlw	0
 13140  0025EE  6FCD               	movwf	(create_chain@ncl+2)& (0+255),b
 13141  0025F0  0E00               	movlw	0
 13142  0025F2  6FCE               	movwf	(create_chain@ncl+3)& (0+255),b
 13143                           
 13144                           ; BSR set to: 0
 13145                           ;ff.c: 660: if (ncl > scl) return 0;
 13146  0025F4  51CB               	movf	create_chain@ncl& (0+255),w,b
 13147  0025F6  5DC3               	subwf	create_chain@scl& (0+255),w,b
 13148  0025F8  51CC               	movf	(create_chain@ncl+1)& (0+255),w,b
 13149  0025FA  59C4               	subwfb	(create_chain@scl+1)& (0+255),w,b
 13150  0025FC  51CD               	movf	(create_chain@ncl+2)& (0+255),w,b
 13151  0025FE  59C5               	subwfb	(create_chain@scl+2)& (0+255),w,b
 13152  002600  51CE               	movf	(create_chain@ncl+3)& (0+255),w,b
 13153  002602  59C6               	subwfb	(create_chain@scl+3)& (0+255),w,b
 13154  002604  B0D8               	btfsc	status,0,c
 13155  002606  D009               	goto	l1055
 13156                           
 13157                           ; BSR set to: 0
 13158  002608  0E00               	movlw	0
 13159  00260A  6FB9               	movwf	?_create_chain& (0+255),b
 13160  00260C  0E00               	movlw	0
 13161  00260E  6FBA               	movwf	(?_create_chain+1)& (0+255),b
 13162  002610  0E00               	movlw	0
 13163  002612  6FBB               	movwf	(?_create_chain+2)& (0+255),b
 13164  002614  0E00               	movlw	0
 13165  002616  6FBC               	movwf	(?_create_chain+3)& (0+255),b
 13166                           
 13167                           ; BSR set to: 0
 13168  002618  0012               	return	
 13169  00261A                     l1055:
 13170                           
 13171                           ; BSR set to: 0
 13172                           ;ff.c: 661: }
 13173                           ;ff.c: 662: cs = get_fat(fs, ncl);
 13174                           
 13175                           ; BSR set to: 0
 13176                           
 13177                           ; BSR set to: 0
 13178  00261A  C0B9  F088         	movff	create_chain@fs,get_fat@fs
 13179  00261E  C0BA  F089         	movff	create_chain@fs+1,get_fat@fs+1
 13180  002622  C0CB  F08A         	movff	create_chain@ncl,get_fat@clst
 13181  002626  C0CC  F08B         	movff	create_chain@ncl+1,get_fat@clst+1
 13182  00262A  C0CD  F08C         	movff	create_chain@ncl+2,get_fat@clst+2
 13183  00262E  C0CE  F08D         	movff	create_chain@ncl+3,get_fat@clst+3
 13184  002632  ECA8  F00A         	call	_get_fat	;wreg free
 13185  002636  C088  F0C7         	movff	?_get_fat,create_chain@cs
 13186  00263A  C089  F0C8         	movff	?_get_fat+1,create_chain@cs+1
 13187  00263E  C08A  F0C9         	movff	?_get_fat+2,create_chain@cs+2
 13188  002642  C08B  F0CA         	movff	?_get_fat+3,create_chain@cs+3
 13189                           
 13190                           ;ff.c: 663: if (cs == 0) break;
 13191  002646  0100               	movlb	0	; () banked
 13192  002648  51C7               	movf	create_chain@cs& (0+255),w,b
 13193  00264A  11C8               	iorwf	(create_chain@cs+1)& (0+255),w,b
 13194  00264C  11C9               	iorwf	(create_chain@cs+2)& (0+255),w,b
 13195  00264E  11CA               	iorwf	(create_chain@cs+3)& (0+255),w,b
 13196  002650  B4D8               	btfsc	status,2,c
 13197  002652  D02E               	goto	l1057
 13198                           
 13199                           ; BSR set to: 0
 13200                           ;ff.c: 664: if (cs == 0xFFFFFFFF || cs == 1)
 13201                           
 13202                           ; BSR set to: 0
 13203                           
 13204                           ; BSR set to: 0
 13205  002654  29C7               	incf	create_chain@cs& (0+255),w,b
 13206  002656  E107               	bnz	u15960
 13207  002658  29C8               	incf	(create_chain@cs+1)& (0+255),w,b
 13208  00265A  E105               	bnz	u15960
 13209  00265C  29C9               	incf	(create_chain@cs+2)& (0+255),w,b
 13210  00265E  E103               	bnz	u15960
 13211  002660  29CA               	incf	(create_chain@cs+3)& (0+255),w,b
 13212  002662  B4D8               	btfsc	status,2,c
 13213  002664  D006               	goto	u15970
 13214  002666                     u15960:
 13215                           
 13216                           ; BSR set to: 0
 13217  002666  05C7               	decf	create_chain@cs& (0+255),w,b
 13218  002668  11C8               	iorwf	(create_chain@cs+1)& (0+255),w,b
 13219  00266A  11C9               	iorwf	(create_chain@cs+2)& (0+255),w,b
 13220  00266C  11CA               	iorwf	(create_chain@cs+3)& (0+255),w,b
 13221  00266E  A4D8               	btfss	status,2,c
 13222  002670  D009               	goto	l1058
 13223  002672                     u15970:
 13224                           
 13225                           ; BSR set to: 0
 13226                           ;ff.c: 665: return cs;
 13227  002672  C0C7  F0B9         	movff	create_chain@cs,?_create_chain
 13228  002676  C0C8  F0BA         	movff	create_chain@cs+1,?_create_chain+1
 13229  00267A  C0C9  F0BB         	movff	create_chain@cs+2,?_create_chain+2
 13230  00267E  C0CA  F0BC         	movff	create_chain@cs+3,?_create_chain+3
 13231  002682  0012               	return	
 13232  002684                     l1058:
 13233                           
 13234                           ; BSR set to: 0
 13235                           ;ff.c: 666: if (ncl == scl) return 0;
 13236                           
 13237                           ; BSR set to: 0
 13238  002684  51C3               	movf	create_chain@scl& (0+255),w,b
 13239  002686  19CB               	xorwf	create_chain@ncl& (0+255),w,b
 13240  002688  E197               	bnz	l12478
 13241  00268A  51C4               	movf	(create_chain@scl+1)& (0+255),w,b
 13242  00268C  19CC               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 13243  00268E  E194               	bnz	l12478
 13244  002690  51C5               	movf	(create_chain@scl+2)& (0+255),w,b
 13245  002692  19CD               	xorwf	(create_chain@ncl+2)& (0+255),w,b
 13246  002694  E191               	bnz	l12478
 13247  002696  51C6               	movf	(create_chain@scl+3)& (0+255),w,b
 13248  002698  19CE               	xorwf	(create_chain@ncl+3)& (0+255),w,b
 13249  00269A  A4D8               	btfss	status,2,c
 13250  00269C  D78D               	goto	l1053
 13251                           
 13252                           ; BSR set to: 0
 13253  00269E  0E00               	movlw	0
 13254  0026A0  6FB9               	movwf	?_create_chain& (0+255),b
 13255  0026A2  0E00               	movlw	0
 13256  0026A4  6FBA               	movwf	(?_create_chain+1)& (0+255),b
 13257  0026A6  0E00               	movlw	0
 13258  0026A8  6FBB               	movwf	(?_create_chain+2)& (0+255),b
 13259  0026AA  0E00               	movlw	0
 13260  0026AC  6FBC               	movwf	(?_create_chain+3)& (0+255),b
 13261                           
 13262                           ; BSR set to: 0
 13263  0026AE  0012               	return	
 13264  0026B0                     l1057:
 13265                           
 13266                           ; BSR set to: 0
 13267                           ;ff.c: 669: if (put_fat(fs, ncl, 0x0FFFFFFF))
 13268                           
 13269                           ; BSR set to: 0
 13270  0026B0  C0B9  F088         	movff	create_chain@fs,put_fat@fs
 13271  0026B4  C0BA  F089         	movff	create_chain@fs+1,put_fat@fs+1
 13272  0026B8  C0CB  F08A         	movff	create_chain@ncl,put_fat@clst
 13273  0026BC  C0CC  F08B         	movff	create_chain@ncl+1,put_fat@clst+1
 13274  0026C0  C0CD  F08C         	movff	create_chain@ncl+2,put_fat@clst+2
 13275  0026C4  C0CE  F08D         	movff	create_chain@ncl+3,put_fat@clst+3
 13276  0026C8  0EFF               	movlw	255
 13277  0026CA  6F8E               	movwf	put_fat@val& (0+255),b
 13278  0026CC  0EFF               	movlw	255
 13279  0026CE  6F8F               	movwf	(put_fat@val+1)& (0+255),b
 13280  0026D0  0EFF               	movlw	255
 13281  0026D2  6F90               	movwf	(put_fat@val+2)& (0+255),b
 13282  0026D4  0E0F               	movlw	15
 13283  0026D6  6F91               	movwf	(put_fat@val+3)& (0+255),b
 13284  0026D8  EC37  F008         	call	_put_fat	;wreg free
 13285  0026DC  0900               	iorlw	0
 13286  0026DE  B4D8               	btfsc	status,2,c
 13287  0026E0  D006               	goto	l1062
 13288                           
 13289                           ;ff.c: 670: return 0xFFFFFFFF;
 13290  0026E2  0100               	movlb	0	; () banked
 13291  0026E4  69B9               	setf	?_create_chain& (0+255),b
 13292  0026E6  69BA               	setf	(?_create_chain+1)& (0+255),b
 13293  0026E8  69BB               	setf	(?_create_chain+2)& (0+255),b
 13294  0026EA  69BC               	setf	(?_create_chain+3)& (0+255),b
 13295  0026EC  0012               	return	
 13296  0026EE                     l1062:
 13297                           
 13298                           ;ff.c: 671: if (clst != 0) {
 13299                           
 13300                           ; BSR set to: 0
 13301  0026EE  0100               	movlb	0	; () banked
 13302  0026F0  51BB               	movf	create_chain@clst& (0+255),w,b
 13303  0026F2  11BC               	iorwf	(create_chain@clst+1)& (0+255),w,b
 13304  0026F4  11BD               	iorwf	(create_chain@clst+2)& (0+255),w,b
 13305  0026F6  11BE               	iorwf	(create_chain@clst+3)& (0+255),w,b
 13306  0026F8  B4D8               	btfsc	status,2,c
 13307  0026FA  D01F               	goto	l1064
 13308                           
 13309                           ; BSR set to: 0
 13310                           ;ff.c: 672: if (put_fat(fs, clst, ncl))
 13311  0026FC  C0B9  F088         	movff	create_chain@fs,put_fat@fs
 13312  002700  C0BA  F089         	movff	create_chain@fs+1,put_fat@fs+1
 13313  002704  C0BB  F08A         	movff	create_chain@clst,put_fat@clst
 13314  002708  C0BC  F08B         	movff	create_chain@clst+1,put_fat@clst+1
 13315  00270C  C0BD  F08C         	movff	create_chain@clst+2,put_fat@clst+2
 13316  002710  C0BE  F08D         	movff	create_chain@clst+3,put_fat@clst+3
 13317  002714  C0CB  F08E         	movff	create_chain@ncl,put_fat@val
 13318  002718  C0CC  F08F         	movff	create_chain@ncl+1,put_fat@val+1
 13319  00271C  C0CD  F090         	movff	create_chain@ncl+2,put_fat@val+2
 13320  002720  C0CE  F091         	movff	create_chain@ncl+3,put_fat@val+3
 13321  002724  EC37  F008         	call	_put_fat	;wreg free
 13322  002728  0900               	iorlw	0
 13323  00272A  B4D8               	btfsc	status,2,c
 13324  00272C  D006               	goto	l1064
 13325                           
 13326                           ;ff.c: 673: return 0xFFFFFFFF;
 13327  00272E  0100               	movlb	0	; () banked
 13328  002730  69B9               	setf	?_create_chain& (0+255),b
 13329  002732  69BA               	setf	(?_create_chain+1)& (0+255),b
 13330  002734  69BB               	setf	(?_create_chain+2)& (0+255),b
 13331  002736  69BC               	setf	(?_create_chain+3)& (0+255),b
 13332  002738  0012               	return	
 13333  00273A                     l1064:
 13334                           
 13335                           ;ff.c: 674: }
 13336                           ;ff.c: 676: fs->last_clust = ncl;
 13337                           
 13338                           ; BSR set to: 0
 13339                           
 13340                           ; BSR set to: 0
 13341  00273A  0100               	movlb	0	; () banked
 13342  00273C  EE20 F00A          	lfsr	2,10
 13343  002740  51B9               	movf	create_chain@fs& (0+255),w,b
 13344  002742  26D9               	addwf	fsr2l,f,c
 13345  002744  51BA               	movf	(create_chain@fs+1)& (0+255),w,b
 13346  002746  22DA               	addwfc	fsr2h,f,c
 13347  002748  C0CB  FFDE         	movff	create_chain@ncl,postinc2
 13348  00274C  C0CC  FFDE         	movff	create_chain@ncl+1,postinc2
 13349  002750  C0CD  FFDE         	movff	create_chain@ncl+2,postinc2
 13350  002754  C0CE  FFDE         	movff	create_chain@ncl+3,postinc2
 13351                           
 13352                           ;ff.c: 677: if (fs->free_clust != 0xFFFFFFFF) {
 13353  002758  EE20 F00E          	lfsr	2,14
 13354  00275C  51B9               	movf	create_chain@fs& (0+255),w,b
 13355  00275E  26D9               	addwf	fsr2l,f,c
 13356  002760  51BA               	movf	(create_chain@fs+1)& (0+255),w,b
 13357  002762  22DA               	addwfc	fsr2h,f,c
 13358  002764  28DE               	incf	postinc2,w,c
 13359  002766  E107               	bnz	u16020
 13360  002768  28DE               	incf	postinc2,w,c
 13361  00276A  E105               	bnz	u16020
 13362  00276C  28DE               	incf	postinc2,w,c
 13363  00276E  E103               	bnz	u16020
 13364  002770  28DE               	incf	postinc2,w,c
 13365  002772  B4D8               	btfsc	status,2,c
 13366  002774  D013               	goto	l1065
 13367  002776                     u16020:
 13368                           
 13369                           ; BSR set to: 0
 13370                           ;ff.c: 678: fs->free_clust--;
 13371  002776  EE20 F00E          	lfsr	2,14
 13372  00277A  51B9               	movf	create_chain@fs& (0+255),w,b
 13373  00277C  26D9               	addwf	fsr2l,f,c
 13374  00277E  51BA               	movf	(create_chain@fs+1)& (0+255),w,b
 13375  002780  22DA               	addwfc	fsr2h,f,c
 13376  002782  06DE               	decf	postinc2,f,c
 13377  002784  0E00               	movlw	0
 13378  002786  5ADE               	subwfb	postinc2,f,c
 13379  002788  5ADE               	subwfb	postinc2,f,c
 13380  00278A  5ADE               	subwfb	postinc2,f,c
 13381                           
 13382                           ;ff.c: 679: fs->fsi_flag = 1;
 13383  00278C  EE20 F005          	lfsr	2,5
 13384  002790  51B9               	movf	create_chain@fs& (0+255),w,b
 13385  002792  26D9               	addwf	fsr2l,f,c
 13386  002794  51BA               	movf	(create_chain@fs+1)& (0+255),w,b
 13387  002796  22DA               	addwfc	fsr2h,f,c
 13388  002798  0E01               	movlw	1
 13389  00279A  6EDF               	movwf	indf2,c
 13390  00279C                     l1065:
 13391                           
 13392                           ; BSR set to: 0
 13393                           ;ff.c: 680: }
 13394                           ;ff.c: 682: return ncl;
 13395                           
 13396                           ; BSR set to: 0
 13397  00279C  C0CB  F0B9         	movff	create_chain@ncl,?_create_chain
 13398  0027A0  C0CC  F0BA         	movff	create_chain@ncl+1,?_create_chain+1
 13399  0027A4  C0CD  F0BB         	movff	create_chain@ncl+2,?_create_chain+2
 13400  0027A8  C0CE  F0BC         	movff	create_chain@ncl+3,?_create_chain+3
 13401  0027AC  0012               	return	
 13402  0027AE                     __end_of_create_chain:
 13403                           	opt stack 0
 13404                           tosu	equ	0xFFF
 13405                           tosh	equ	0xFFE
 13406                           tosl	equ	0xFFD
 13407                           pclath	equ	0xFFA
 13408                           tblptru	equ	0xFF8
 13409                           tblptrh	equ	0xFF7
 13410                           tblptrl	equ	0xFF6
 13411                           tablat	equ	0xFF5
 13412                           prodh	equ	0xFF4
 13413                           prodl	equ	0xFF3
 13414                           intcon	equ	0xFF2
 13415                           intcon2	equ	0xFF1
 13416                           intcon3	equ	0xFF0
 13417                           indf0	equ	0xFEF
 13418                           postinc0	equ	0xFEE
 13419                           fsr0h	equ	0xFEA
 13420                           fsr0l	equ	0xFE9
 13421                           wreg	equ	0xFE8
 13422                           indf1	equ	0xFE7
 13423                           postinc1	equ	0xFE6
 13424                           postdec1	equ	0xFE5
 13425                           fsr1h	equ	0xFE2
 13426                           fsr1l	equ	0xFE1
 13427                           indf2	equ	0xFDF
 13428                           postinc2	equ	0xFDE
 13429                           postdec2	equ	0xFDD
 13430                           plusw2	equ	0xFDB
 13431                           fsr2h	equ	0xFDA
 13432                           fsr2l	equ	0xFD9
 13433                           status	equ	0xFD8
 13434                           
 13435 ;; *************** function _put_fat *****************
 13436 ;; Defined at:
 13437 ;;		line 532 in file "bibliotecas/ff.c"
 13438 ;; Parameters:    Size  Location     Type
 13439 ;;  fs              2   40[BANK0 ] PTR struct .
 13440 ;;		 -> NULL(0), 
 13441 ;;  clst            4   42[BANK0 ] unsigned long 
 13442 ;;  val             4   46[BANK0 ] unsigned long 
 13443 ;; Auto vars:     Size  Location     Type
 13444 ;;  p               2   87[BANK0 ] PTR unsigned char 
 13445 ;;		 -> NULL(0), 
 13446 ;;  bc              2   84[BANK0 ] unsigned int 
 13447 ;;  res             1   86[BANK0 ] enum E72
 13448 ;; Return value:  Size  Location     Type
 13449 ;;                  1    wreg      enum E72
 13450 ;; Registers used:
 13451 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13452 ;; Tracked objects:
 13453 ;;		On entry : 0/0
 13454 ;;		On exit  : 0/0
 13455 ;;		Unchanged: 0/0
 13456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13457 ;;      Params:         0      10       0       0       0       0       0       0       0
 13458 ;;      Locals:         0       9       0       0       0       0       0       0       0
 13459 ;;      Temps:          0      30       0       0       0       0       0       0       0
 13460 ;;      Totals:         0      49       0       0       0       0       0       0       0
 13461 ;;Total ram usage:       49 bytes
 13462 ;; Hardware stack levels used:    1
 13463 ;; Hardware stack levels required when called:    8
 13464 ;; This function calls:
 13465 ;;		_move_window
 13466 ;; This function is called by:
 13467 ;;		_create_chain
 13468 ;;		_remove_chain
 13469 ;; This function uses a non-reentrant model
 13470 ;;
 13471                           
 13472                           	psect	text52
 13473  00106E                     __ptext52:
 13474                           	opt stack 0
 13475  00106E                     _put_fat:
 13476                           	opt stack 18
 13477                           
 13478                           ;ff.c: 538: UINT bc;
 13479                           ;ff.c: 539: BYTE *p;
 13480                           ;ff.c: 540: FRESULT res;
 13481                           ;ff.c: 543: if (clst < 2 || clst >= fs->n_fatent) {
 13482                           
 13483                           ; BSR set to: 0
 13484                           ;incstack = 0
 13485  00106E  0100               	movlb	0	; () banked
 13486  001070  518D               	movf	(put_fat@clst+3)& (0+255),w,b
 13487  001072  118C               	iorwf	(put_fat@clst+2)& (0+255),w,b
 13488  001074  118B               	iorwf	(put_fat@clst+1)& (0+255),w,b
 13489  001076  E104               	bnz	u14700
 13490  001078  0E02               	movlw	2
 13491  00107A  5D8A               	subwf	put_fat@clst& (0+255),w,b
 13492  00107C  A0D8               	btfss	status,0,c
 13493  00107E  D010               	goto	u14710
 13494  001080                     u14700:
 13495                           
 13496                           ; BSR set to: 0
 13497  001080  EE20 F016          	lfsr	2,22
 13498  001084  5188               	movf	put_fat@fs& (0+255),w,b
 13499  001086  26D9               	addwf	fsr2l,f,c
 13500  001088  5189               	movf	(put_fat@fs+1)& (0+255),w,b
 13501  00108A  22DA               	addwfc	fsr2h,f,c
 13502  00108C  50DE               	movf	postinc2,w,c
 13503  00108E  5D8A               	subwf	put_fat@clst& (0+255),w,b
 13504  001090  50DE               	movf	postinc2,w,c
 13505  001092  598B               	subwfb	(put_fat@clst+1)& (0+255),w,b
 13506  001094  50DE               	movf	postinc2,w,c
 13507  001096  598C               	subwfb	(put_fat@clst+2)& (0+255),w,b
 13508  001098  50DE               	movf	postinc2,w,c
 13509  00109A  598D               	subwfb	(put_fat@clst+3)& (0+255),w,b
 13510  00109C  A0D8               	btfss	status,0,c
 13511  00109E  D23F               	goto	l1009
 13512  0010A0                     u14710:
 13513                           
 13514                           ; BSR set to: 0
 13515                           ;ff.c: 544: res = FR_INT_ERR;
 13516                           
 13517                           ; BSR set to: 0
 13518  0010A0  0E02               	movlw	2
 13519  0010A2  6FB6               	movwf	put_fat@res& (0+255),b
 13520                           
 13521                           ;ff.c: 546: } else {
 13522  0010A4  D253               	goto	l1008
 13523  0010A6                     l1010:
 13524                           
 13525                           ; BSR set to: 0
 13526                           ;ff.c: 549: bc = clst; bc += bc / 2;
 13527  0010A6  C08A  F0B4         	movff	put_fat@clst,put_fat@bc
 13528  0010AA  C08B  F0B5         	movff	put_fat@clst+1,put_fat@bc+1
 13529                           
 13530                           ; BSR set to: 0
 13531  0010AE  90D8               	bcf	status,0,c
 13532  0010B0  31B5               	rrcf	(put_fat@bc+1)& (0+255),w,b
 13533  0010B2  6F93               	movwf	(??_put_fat+1)& (0+255),b
 13534  0010B4  31B4               	rrcf	put_fat@bc& (0+255),w,b
 13535  0010B6  6F92               	movwf	??_put_fat& (0+255),b
 13536  0010B8  5192               	movf	??_put_fat& (0+255),w,b
 13537  0010BA  27B4               	addwf	put_fat@bc& (0+255),f,b
 13538  0010BC  5193               	movf	(??_put_fat+1)& (0+255),w,b
 13539  0010BE  23B5               	addwfc	(put_fat@bc+1)& (0+255),f,b
 13540                           
 13541                           ; BSR set to: 0
 13542                           ;ff.c: 550: res = move_window(fs, fs->fatbase + (bc / 512U));
 13543  0010C0  C088  F071         	movff	put_fat@fs,move_window@fs
 13544  0010C4  C089  F072         	movff	put_fat@fs+1,move_window@fs+1
 13545  0010C8  EE20 F01E          	lfsr	2,30
 13546  0010CC  5188               	movf	put_fat@fs& (0+255),w,b
 13547  0010CE  26D9               	addwf	fsr2l,f,c
 13548  0010D0  5189               	movf	(put_fat@fs+1)& (0+255),w,b
 13549  0010D2  22DA               	addwfc	fsr2h,f,c
 13550  0010D4  CFDE F092          	movff	postinc2,??_put_fat
 13551  0010D8  CFDE F093          	movff	postinc2,??_put_fat+1
 13552  0010DC  CFDE F094          	movff	postinc2,??_put_fat+2
 13553  0010E0  CFDE F095          	movff	postinc2,??_put_fat+3
 13554  0010E4  C0B4  F096         	movff	put_fat@bc,??_put_fat+4
 13555  0010E8  C0B5  F097         	movff	put_fat@bc+1,??_put_fat+5
 13556  0010EC  0E09               	movlw	9
 13557  0010EE  6F98               	movwf	(??_put_fat+6)& (0+255),b
 13558  0010F0                     u14725:
 13559  0010F0  90D8               	bcf	status,0,c
 13560  0010F2  3397               	rrcf	(??_put_fat+5)& (0+255),f,b
 13561  0010F4  3396               	rrcf	(??_put_fat+4)& (0+255),f,b
 13562  0010F6  2F98               	decfsz	(??_put_fat+6)& (0+255),f,b
 13563  0010F8  D7FB               	goto	u14725
 13564  0010FA  5196               	movf	(??_put_fat+4)& (0+255),w,b
 13565  0010FC  2592               	addwf	??_put_fat& (0+255),w,b
 13566  0010FE  6F73               	movwf	move_window@sector& (0+255),b
 13567  001100  5197               	movf	(??_put_fat+5)& (0+255),w,b
 13568  001102  2193               	addwfc	(??_put_fat+1)& (0+255),w,b
 13569  001104  6F74               	movwf	(move_window@sector+1)& (0+255),b
 13570  001106  0E00               	movlw	0
 13571  001108  2194               	addwfc	(??_put_fat+2)& (0+255),w,b
 13572  00110A  6F75               	movwf	(move_window@sector+2)& (0+255),b
 13573  00110C  0E00               	movlw	0
 13574  00110E  2195               	addwfc	(??_put_fat+3)& (0+255),w,b
 13575  001110  6F76               	movwf	(move_window@sector+3)& (0+255),b
 13576  001112  EC69  F016         	call	_move_window	;wreg free
 13577  001116  0100               	movlb	0	; () banked
 13578  001118  6FB6               	movwf	put_fat@res& (0+255),b
 13579                           
 13580                           ; BSR set to: 0
 13581                           ;ff.c: 551: if (res != FR_OK) break;
 13582  00111A  51B6               	movf	put_fat@res& (0+255),w,b
 13583  00111C  A4D8               	btfss	status,2,c
 13584  00111E  D20E               	goto	l1012
 13585                           
 13586                           ; BSR set to: 0
 13587                           ;ff.c: 552: p = &fs->win[bc % 512U];
 13588                           
 13589                           ; BSR set to: 0
 13590                           
 13591                           ; BSR set to: 0
 13592  001120  0EFF               	movlw	255
 13593  001122  6F92               	movwf	??_put_fat& (0+255),b
 13594  001124  0E01               	movlw	1
 13595  001126  6F93               	movwf	(??_put_fat+1)& (0+255),b
 13596  001128  C0B4  F094         	movff	put_fat@bc,??_put_fat+2
 13597  00112C  C0B5  F095         	movff	put_fat@bc+1,??_put_fat+3
 13598  001130  5192               	movf	??_put_fat& (0+255),w,b
 13599  001132  1794               	andwf	(??_put_fat+2)& (0+255),f,b
 13600  001134  5193               	movf	(??_put_fat+1)& (0+255),w,b
 13601  001136  1795               	andwf	(??_put_fat+3)& (0+255),f,b
 13602  001138  0E2E               	movlw	46
 13603  00113A  2794               	addwf	(??_put_fat+2)& (0+255),f,b
 13604  00113C  0E00               	movlw	0
 13605  00113E  2395               	addwfc	(??_put_fat+3)& (0+255),f,b
 13606  001140  5194               	movf	(??_put_fat+2)& (0+255),w,b
 13607  001142  2588               	addwf	put_fat@fs& (0+255),w,b
 13608  001144  6FB7               	movwf	put_fat@p& (0+255),b
 13609  001146  5195               	movf	(??_put_fat+3)& (0+255),w,b
 13610  001148  2189               	addwfc	(put_fat@fs+1)& (0+255),w,b
 13611  00114A  6FB8               	movwf	(put_fat@p+1)& (0+255),b
 13612                           
 13613                           ; BSR set to: 0
 13614                           ;ff.c: 553: *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 13615  00114C  B18A               	btfsc	put_fat@clst& (0+255),0,b
 13616  00114E  D004               	goto	l1014
 13617                           
 13618                           ; BSR set to: 0
 13619  001150  C08E  F0B0         	movff	put_fat@val,_put_fat$2289
 13620  001154  6BB1               	clrf	(_put_fat$2289+1)& (0+255),b
 13621  001156  D01A               	goto	l1016
 13622  001158                     l1014:
 13623                           
 13624                           ; BSR set to: 0
 13625                           
 13626                           ; BSR set to: 0
 13627  001158  518E               	movf	put_fat@val& (0+255),w,b
 13628  00115A  6F92               	movwf	??_put_fat& (0+255),b
 13629  00115C  6B93               	clrf	(??_put_fat+1)& (0+255),b
 13630  00115E  3B92               	swapf	??_put_fat& (0+255),f,b
 13631  001160  3B93               	swapf	(??_put_fat+1)& (0+255),f,b
 13632  001162  0EF0               	movlw	240
 13633  001164  1793               	andwf	(??_put_fat+1)& (0+255),f,b
 13634  001166  5192               	movf	??_put_fat& (0+255),w,b
 13635  001168  0B0F               	andlw	15
 13636  00116A  1393               	iorwf	(??_put_fat+1)& (0+255),f,b
 13637  00116C  0EF0               	movlw	240
 13638  00116E  1792               	andwf	??_put_fat& (0+255),f,b
 13639  001170  C0B7  FFD9         	movff	put_fat@p,fsr2l
 13640  001174  C0B8  FFDA         	movff	put_fat@p+1,fsr2h
 13641  001178  50DF               	movf	indf2,w,c
 13642  00117A  0B0F               	andlw	15
 13643  00117C  6F94               	movwf	(??_put_fat+2)& (0+255),b
 13644  00117E  6B95               	clrf	(??_put_fat+3)& (0+255),b
 13645  001180  5192               	movf	??_put_fat& (0+255),w,b
 13646  001182  1194               	iorwf	(??_put_fat+2)& (0+255),w,b
 13647  001184  6FB0               	movwf	_put_fat$2289& (0+255),b
 13648  001186  5193               	movf	(??_put_fat+1)& (0+255),w,b
 13649  001188  1195               	iorwf	(??_put_fat+3)& (0+255),w,b
 13650  00118A  6FB1               	movwf	(_put_fat$2289+1)& (0+255),b
 13651  00118C                     l1016:
 13652                           
 13653                           ; BSR set to: 0
 13654                           
 13655                           ; BSR set to: 0
 13656  00118C  C0B7  FFD9         	movff	put_fat@p,fsr2l
 13657  001190  C0B8  FFDA         	movff	put_fat@p+1,fsr2h
 13658  001194  C0B0  FFDF         	movff	_put_fat$2289,indf2
 13659                           
 13660                           ; BSR set to: 0
 13661                           ;ff.c: 554: bc++;
 13662  001198  4BB4               	infsnz	put_fat@bc& (0+255),f,b
 13663  00119A  2BB5               	incf	(put_fat@bc+1)& (0+255),f,b
 13664                           
 13665                           ; BSR set to: 0
 13666                           ;ff.c: 555: fs->wflag = 1;
 13667  00119C  EE20 F004          	lfsr	2,4
 13668  0011A0  5188               	movf	put_fat@fs& (0+255),w,b
 13669  0011A2  26D9               	addwf	fsr2l,f,c
 13670  0011A4  5189               	movf	(put_fat@fs+1)& (0+255),w,b
 13671  0011A6  22DA               	addwfc	fsr2h,f,c
 13672  0011A8  0E01               	movlw	1
 13673  0011AA  6EDF               	movwf	indf2,c
 13674                           
 13675                           ; BSR set to: 0
 13676                           ;ff.c: 556: res = move_window(fs, fs->fatbase + (bc / 512U));
 13677  0011AC  C088  F071         	movff	put_fat@fs,move_window@fs
 13678  0011B0  C089  F072         	movff	put_fat@fs+1,move_window@fs+1
 13679  0011B4  EE20 F01E          	lfsr	2,30
 13680  0011B8  5188               	movf	put_fat@fs& (0+255),w,b
 13681  0011BA  26D9               	addwf	fsr2l,f,c
 13682  0011BC  5189               	movf	(put_fat@fs+1)& (0+255),w,b
 13683  0011BE  22DA               	addwfc	fsr2h,f,c
 13684  0011C0  CFDE F092          	movff	postinc2,??_put_fat
 13685  0011C4  CFDE F093          	movff	postinc2,??_put_fat+1
 13686  0011C8  CFDE F094          	movff	postinc2,??_put_fat+2
 13687  0011CC  CFDE F095          	movff	postinc2,??_put_fat+3
 13688  0011D0  C0B4  F096         	movff	put_fat@bc,??_put_fat+4
 13689  0011D4  C0B5  F097         	movff	put_fat@bc+1,??_put_fat+5
 13690  0011D8  0E09               	movlw	9
 13691  0011DA  6F98               	movwf	(??_put_fat+6)& (0+255),b
 13692  0011DC                     u14755:
 13693  0011DC  90D8               	bcf	status,0,c
 13694  0011DE  3397               	rrcf	(??_put_fat+5)& (0+255),f,b
 13695  0011E0  3396               	rrcf	(??_put_fat+4)& (0+255),f,b
 13696  0011E2  2F98               	decfsz	(??_put_fat+6)& (0+255),f,b
 13697  0011E4  D7FB               	goto	u14755
 13698  0011E6  5196               	movf	(??_put_fat+4)& (0+255),w,b
 13699  0011E8  2592               	addwf	??_put_fat& (0+255),w,b
 13700  0011EA  6F73               	movwf	move_window@sector& (0+255),b
 13701  0011EC  5197               	movf	(??_put_fat+5)& (0+255),w,b
 13702  0011EE  2193               	addwfc	(??_put_fat+1)& (0+255),w,b
 13703  0011F0  6F74               	movwf	(move_window@sector+1)& (0+255),b
 13704  0011F2  0E00               	movlw	0
 13705  0011F4  2194               	addwfc	(??_put_fat+2)& (0+255),w,b
 13706  0011F6  6F75               	movwf	(move_window@sector+2)& (0+255),b
 13707  0011F8  0E00               	movlw	0
 13708  0011FA  2195               	addwfc	(??_put_fat+3)& (0+255),w,b
 13709  0011FC  6F76               	movwf	(move_window@sector+3)& (0+255),b
 13710  0011FE  EC69  F016         	call	_move_window	;wreg free
 13711  001202  0100               	movlb	0	; () banked
 13712  001204  6FB6               	movwf	put_fat@res& (0+255),b
 13713                           
 13714                           ; BSR set to: 0
 13715                           ;ff.c: 557: if (res != FR_OK) break;
 13716  001206  51B6               	movf	put_fat@res& (0+255),w,b
 13717  001208  A4D8               	btfss	status,2,c
 13718  00120A  D198               	goto	l1012
 13719                           
 13720                           ; BSR set to: 0
 13721                           ;ff.c: 558: p = &fs->win[bc % 512U];
 13722                           
 13723                           ; BSR set to: 0
 13724                           
 13725                           ; BSR set to: 0
 13726  00120C  0EFF               	movlw	255
 13727  00120E  6F92               	movwf	??_put_fat& (0+255),b
 13728  001210  0E01               	movlw	1
 13729  001212  6F93               	movwf	(??_put_fat+1)& (0+255),b
 13730  001214  C0B4  F094         	movff	put_fat@bc,??_put_fat+2
 13731  001218  C0B5  F095         	movff	put_fat@bc+1,??_put_fat+3
 13732  00121C  5192               	movf	??_put_fat& (0+255),w,b
 13733  00121E  1794               	andwf	(??_put_fat+2)& (0+255),f,b
 13734  001220  5193               	movf	(??_put_fat+1)& (0+255),w,b
 13735  001222  1795               	andwf	(??_put_fat+3)& (0+255),f,b
 13736  001224  0E2E               	movlw	46
 13737  001226  2794               	addwf	(??_put_fat+2)& (0+255),f,b
 13738  001228  0E00               	movlw	0
 13739  00122A  2395               	addwfc	(??_put_fat+3)& (0+255),f,b
 13740  00122C  5194               	movf	(??_put_fat+2)& (0+255),w,b
 13741  00122E  2588               	addwf	put_fat@fs& (0+255),w,b
 13742  001230  6FB7               	movwf	put_fat@p& (0+255),b
 13743  001232  5195               	movf	(??_put_fat+3)& (0+255),w,b
 13744  001234  2189               	addwfc	(put_fat@fs+1)& (0+255),w,b
 13745  001236  6FB8               	movwf	(put_fat@p+1)& (0+255),b
 13746                           
 13747                           ; BSR set to: 0
 13748                           ;ff.c: 559: *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F
      +                          ));
 13749  001238  B18A               	btfsc	put_fat@clst& (0+255),0,b
 13750  00123A  D01B               	goto	l1019
 13751                           
 13752                           ; BSR set to: 0
 13753  00123C  C08E  F092         	movff	put_fat@val,??_put_fat
 13754  001240  C08F  F093         	movff	put_fat@val+1,??_put_fat+1
 13755  001244  C090  F094         	movff	put_fat@val+2,??_put_fat+2
 13756  001248  C091  F095         	movff	put_fat@val+3,??_put_fat+3
 13757  00124C  C093  F092         	movff	??_put_fat+1,??_put_fat
 13758  001250  C094  F093         	movff	??_put_fat+2,??_put_fat+1
 13759  001254  C095  F094         	movff	??_put_fat+3,??_put_fat+2
 13760  001258  6B95               	clrf	(??_put_fat+3)& (0+255),b
 13761  00125A  0E0F               	movlw	15
 13762  00125C  1792               	andwf	??_put_fat& (0+255),f,b
 13763  00125E  C0B7  FFD9         	movff	put_fat@p,fsr2l
 13764  001262  C0B8  FFDA         	movff	put_fat@p+1,fsr2h
 13765  001266  50DF               	movf	indf2,w,c
 13766  001268  0BF0               	andlw	240
 13767  00126A  1192               	iorwf	??_put_fat& (0+255),w,b
 13768  00126C  6F96               	movwf	(??_put_fat+4)& (0+255),b
 13769  00126E  5196               	movf	(??_put_fat+4)& (0+255),w,b
 13770  001270  D012               	goto	L3
 13771  001272                     l1019:
 13772                           
 13773                           ; BSR set to: 0
 13774                           
 13775                           ; BSR set to: 0
 13776  001272  C08E  F092         	movff	put_fat@val,??_put_fat
 13777  001276  C08F  F093         	movff	put_fat@val+1,??_put_fat+1
 13778  00127A  C090  F094         	movff	put_fat@val+2,??_put_fat+2
 13779  00127E  C091  F095         	movff	put_fat@val+3,??_put_fat+3
 13780  001282  0E05               	movlw	5
 13781  001284  D005               	goto	u14780
 13782  001286                     u14785:
 13783  001286  90D8               	bcf	status,0,c
 13784  001288  3395               	rrcf	(??_put_fat+3)& (0+255),f,b
 13785  00128A  3394               	rrcf	(??_put_fat+2)& (0+255),f,b
 13786  00128C  3393               	rrcf	(??_put_fat+1)& (0+255),f,b
 13787  00128E  3392               	rrcf	??_put_fat& (0+255),f,b
 13788  001290                     u14780:
 13789  001290  2EE8               	decfsz	wreg,f,c
 13790  001292  D7F9               	goto	u14785
 13791  001294  5192               	movf	??_put_fat& (0+255),w,b
 13792  001296                     L3:
 13793  001296  6FB2               	movwf	_put_fat$2290& (0+255),b
 13794  001298  6BB3               	clrf	(_put_fat$2290+1)& (0+255),b
 13795                           
 13796                           ; BSR set to: 0
 13797                           
 13798                           ; BSR set to: 0
 13799  00129A  C0B7  FFD9         	movff	put_fat@p,fsr2l
 13800  00129E  C0B8  FFDA         	movff	put_fat@p+1,fsr2h
 13801  0012A2  C0B2  FFDF         	movff	_put_fat$2290,indf2
 13802                           
 13803                           ;ff.c: 560: break;
 13804  0012A6  D14A               	goto	l1012
 13805  0012A8                     
 13806                           ; BSR set to: 0
 13807                           ;ff.c: 563: res = move_window(fs, fs->fatbase + (clst / (512U / 2)));
 13808                           
 13809                           ; BSR set to: 0
 13810  0012A8  C088  F071         	movff	put_fat@fs,move_window@fs
 13811  0012AC  C089  F072         	movff	put_fat@fs+1,move_window@fs+1
 13812  0012B0  EE20 F01E          	lfsr	2,30
 13813  0012B4  5188               	movf	put_fat@fs& (0+255),w,b
 13814  0012B6  26D9               	addwf	fsr2l,f,c
 13815  0012B8  5189               	movf	(put_fat@fs+1)& (0+255),w,b
 13816  0012BA  22DA               	addwfc	fsr2h,f,c
 13817  0012BC  CFDE F092          	movff	postinc2,??_put_fat
 13818  0012C0  CFDE F093          	movff	postinc2,??_put_fat+1
 13819  0012C4  CFDE F094          	movff	postinc2,??_put_fat+2
 13820  0012C8  CFDE F095          	movff	postinc2,??_put_fat+3
 13821  0012CC  C08A  F096         	movff	put_fat@clst,??_put_fat+4
 13822  0012D0  C08B  F097         	movff	put_fat@clst+1,??_put_fat+5
 13823  0012D4  C08C  F098         	movff	put_fat@clst+2,??_put_fat+6
 13824  0012D8  C08D  F099         	movff	put_fat@clst+3,??_put_fat+7
 13825  0012DC  C097  F096         	movff	??_put_fat+5,??_put_fat+4
 13826  0012E0  C098  F097         	movff	??_put_fat+6,??_put_fat+5
 13827  0012E4  C099  F098         	movff	??_put_fat+7,??_put_fat+6
 13828  0012E8  6B99               	clrf	(??_put_fat+7)& (0+255),b
 13829  0012EA  5192               	movf	??_put_fat& (0+255),w,b
 13830  0012EC  2596               	addwf	(??_put_fat+4)& (0+255),w,b
 13831  0012EE  6F73               	movwf	move_window@sector& (0+255),b
 13832  0012F0  5193               	movf	(??_put_fat+1)& (0+255),w,b
 13833  0012F2  2197               	addwfc	(??_put_fat+5)& (0+255),w,b
 13834  0012F4  6F74               	movwf	(move_window@sector+1)& (0+255),b
 13835  0012F6  5194               	movf	(??_put_fat+2)& (0+255),w,b
 13836  0012F8  2198               	addwfc	(??_put_fat+6)& (0+255),w,b
 13837  0012FA  6F75               	movwf	(move_window@sector+2)& (0+255),b
 13838  0012FC  5195               	movf	(??_put_fat+3)& (0+255),w,b
 13839  0012FE  2199               	addwfc	(??_put_fat+7)& (0+255),w,b
 13840  001300  6F76               	movwf	(move_window@sector+3)& (0+255),b
 13841  001302  EC69  F016         	call	_move_window	;wreg free
 13842  001306  0100               	movlb	0	; () banked
 13843  001308  6FB6               	movwf	put_fat@res& (0+255),b
 13844                           
 13845                           ; BSR set to: 0
 13846                           ;ff.c: 564: if (res != FR_OK) break;
 13847  00130A  51B6               	movf	put_fat@res& (0+255),w,b
 13848  00130C  A4D8               	btfss	status,2,c
 13849  00130E  D116               	goto	l1012
 13850                           
 13851                           ; BSR set to: 0
 13852                           ;ff.c: 565: p = &fs->win[clst * 2 % 512U];
 13853                           
 13854                           ; BSR set to: 0
 13855                           
 13856                           ; BSR set to: 0
 13857  001310  0EFF               	movlw	255
 13858  001312  6F92               	movwf	??_put_fat& (0+255),b
 13859  001314  0E01               	movlw	1
 13860  001316  6F93               	movwf	(??_put_fat+1)& (0+255),b
 13861  001318  C08A  F094         	movff	put_fat@clst,??_put_fat+2
 13862  00131C  C08B  F095         	movff	put_fat@clst+1,??_put_fat+3
 13863  001320  90D8               	bcf	status,0,c
 13864  001322  3794               	rlcf	(??_put_fat+2)& (0+255),f,b
 13865  001324  3795               	rlcf	(??_put_fat+3)& (0+255),f,b
 13866  001326  5192               	movf	??_put_fat& (0+255),w,b
 13867  001328  1794               	andwf	(??_put_fat+2)& (0+255),f,b
 13868  00132A  5193               	movf	(??_put_fat+1)& (0+255),w,b
 13869  00132C  1795               	andwf	(??_put_fat+3)& (0+255),f,b
 13870  00132E  0E2E               	movlw	46
 13871  001330  2794               	addwf	(??_put_fat+2)& (0+255),f,b
 13872  001332  0E00               	movlw	0
 13873  001334  2395               	addwfc	(??_put_fat+3)& (0+255),f,b
 13874  001336  5194               	movf	(??_put_fat+2)& (0+255),w,b
 13875  001338  2588               	addwf	put_fat@fs& (0+255),w,b
 13876  00133A  6FB7               	movwf	put_fat@p& (0+255),b
 13877  00133C  5195               	movf	(??_put_fat+3)& (0+255),w,b
 13878  00133E  2189               	addwfc	(put_fat@fs+1)& (0+255),w,b
 13879  001340  6FB8               	movwf	(put_fat@p+1)& (0+255),b
 13880                           
 13881                           ; BSR set to: 0
 13882                           ;ff.c: 566: *(BYTE*)(p)=(BYTE)((WORD)val); *(BYTE*)((p)+1)=(BYTE)((WORD)((WORD)val)>>8);
 13883  001342  C0B7  FFD9         	movff	put_fat@p,fsr2l
 13884  001346  C0B8  FFDA         	movff	put_fat@p+1,fsr2h
 13885  00134A  C08E  FFDF         	movff	put_fat@val,indf2
 13886  00134E  EE20 F001          	lfsr	2,1
 13887  001352  51B7               	movf	put_fat@p& (0+255),w,b
 13888  001354  26D9               	addwf	fsr2l,f,c
 13889  001356  51B8               	movf	(put_fat@p+1)& (0+255),w,b
 13890  001358  22DA               	addwfc	fsr2h,f,c
 13891  00135A  518F               	movf	(put_fat@val+1)& (0+255),w,b
 13892  00135C  6EDF               	movwf	indf2,c
 13893                           
 13894                           ;ff.c: 567: break;
 13895  00135E  D0EE               	goto	l1012
 13896  001360                     
 13897                           ; BSR set to: 0
 13898                           ;ff.c: 570: res = move_window(fs, fs->fatbase + (clst / (512U / 4)));
 13899                           
 13900                           ; BSR set to: 0
 13901  001360  C088  F071         	movff	put_fat@fs,move_window@fs
 13902  001364  C089  F072         	movff	put_fat@fs+1,move_window@fs+1
 13903  001368  EE20 F01E          	lfsr	2,30
 13904  00136C  5188               	movf	put_fat@fs& (0+255),w,b
 13905  00136E  26D9               	addwf	fsr2l,f,c
 13906  001370  5189               	movf	(put_fat@fs+1)& (0+255),w,b
 13907  001372  22DA               	addwfc	fsr2h,f,c
 13908  001374  CFDE F092          	movff	postinc2,??_put_fat
 13909  001378  CFDE F093          	movff	postinc2,??_put_fat+1
 13910  00137C  CFDE F094          	movff	postinc2,??_put_fat+2
 13911  001380  CFDE F095          	movff	postinc2,??_put_fat+3
 13912  001384  C08A  F096         	movff	put_fat@clst,??_put_fat+4
 13913  001388  C08B  F097         	movff	put_fat@clst+1,??_put_fat+5
 13914  00138C  C08C  F098         	movff	put_fat@clst+2,??_put_fat+6
 13915  001390  C08D  F099         	movff	put_fat@clst+3,??_put_fat+7
 13916  001394  0E08               	movlw	8
 13917  001396  D005               	goto	u14800
 13918  001398                     u14805:
 13919  001398  90D8               	bcf	status,0,c
 13920  00139A  3399               	rrcf	(??_put_fat+7)& (0+255),f,b
 13921  00139C  3398               	rrcf	(??_put_fat+6)& (0+255),f,b
 13922  00139E  3397               	rrcf	(??_put_fat+5)& (0+255),f,b
 13923  0013A0  3396               	rrcf	(??_put_fat+4)& (0+255),f,b
 13924  0013A2                     u14800:
 13925  0013A2  2EE8               	decfsz	wreg,f,c
 13926  0013A4  D7F9               	goto	u14805
 13927  0013A6  5192               	movf	??_put_fat& (0+255),w,b
 13928  0013A8  2596               	addwf	(??_put_fat+4)& (0+255),w,b
 13929  0013AA  6F73               	movwf	move_window@sector& (0+255),b
 13930  0013AC  5193               	movf	(??_put_fat+1)& (0+255),w,b
 13931  0013AE  2197               	addwfc	(??_put_fat+5)& (0+255),w,b
 13932  0013B0  6F74               	movwf	(move_window@sector+1)& (0+255),b
 13933  0013B2  5194               	movf	(??_put_fat+2)& (0+255),w,b
 13934  0013B4  2198               	addwfc	(??_put_fat+6)& (0+255),w,b
 13935  0013B6  6F75               	movwf	(move_window@sector+2)& (0+255),b
 13936  0013B8  5195               	movf	(??_put_fat+3)& (0+255),w,b
 13937  0013BA  2199               	addwfc	(??_put_fat+7)& (0+255),w,b
 13938  0013BC  6F76               	movwf	(move_window@sector+3)& (0+255),b
 13939  0013BE  EC69  F016         	call	_move_window	;wreg free
 13940  0013C2  0100               	movlb	0	; () banked
 13941  0013C4  6FB6               	movwf	put_fat@res& (0+255),b
 13942                           
 13943                           ; BSR set to: 0
 13944                           ;ff.c: 571: if (res != FR_OK) break;
 13945  0013C6  51B6               	movf	put_fat@res& (0+255),w,b
 13946  0013C8  A4D8               	btfss	status,2,c
 13947  0013CA  D0B8               	goto	l1012
 13948                           
 13949                           ; BSR set to: 0
 13950                           ;ff.c: 572: p = &fs->win[clst * 4 % 512U];
 13951                           
 13952                           ; BSR set to: 0
 13953                           
 13954                           ; BSR set to: 0
 13955  0013CC  0EFF               	movlw	255
 13956  0013CE  6F92               	movwf	??_put_fat& (0+255),b
 13957  0013D0  0E01               	movlw	1
 13958  0013D2  6F93               	movwf	(??_put_fat+1)& (0+255),b
 13959  0013D4  C08A  F094         	movff	put_fat@clst,??_put_fat+2
 13960  0013D8  C08B  F095         	movff	put_fat@clst+1,??_put_fat+3
 13961  0013DC  90D8               	bcf	status,0,c
 13962  0013DE  3794               	rlcf	(??_put_fat+2)& (0+255),f,b
 13963  0013E0  3795               	rlcf	(??_put_fat+3)& (0+255),f,b
 13964  0013E2  90D8               	bcf	status,0,c
 13965  0013E4  3794               	rlcf	(??_put_fat+2)& (0+255),f,b
 13966  0013E6  3795               	rlcf	(??_put_fat+3)& (0+255),f,b
 13967  0013E8  5192               	movf	??_put_fat& (0+255),w,b
 13968  0013EA  1794               	andwf	(??_put_fat+2)& (0+255),f,b
 13969  0013EC  5193               	movf	(??_put_fat+1)& (0+255),w,b
 13970  0013EE  1795               	andwf	(??_put_fat+3)& (0+255),f,b
 13971  0013F0  0E2E               	movlw	46
 13972  0013F2  2794               	addwf	(??_put_fat+2)& (0+255),f,b
 13973  0013F4  0E00               	movlw	0
 13974  0013F6  2395               	addwfc	(??_put_fat+3)& (0+255),f,b
 13975  0013F8  5194               	movf	(??_put_fat+2)& (0+255),w,b
 13976  0013FA  2588               	addwf	put_fat@fs& (0+255),w,b
 13977  0013FC  6FB7               	movwf	put_fat@p& (0+255),b
 13978  0013FE  5195               	movf	(??_put_fat+3)& (0+255),w,b
 13979  001400  2189               	addwfc	(put_fat@fs+1)& (0+255),w,b
 13980  001402  6FB8               	movwf	(put_fat@p+1)& (0+255),b
 13981                           
 13982                           ; BSR set to: 0
 13983                           ;ff.c: 573: val |= (DWORD)(((DWORD)*(BYTE*)((p)+3)<<24)|((DWORD)*(BYTE*)((p)+2)<<16)|((W
      +                          ORD)*(BYTE*)((p)+1)<<8)|*(BYTE*)(p)) & 0xF0000000;
 13984  001404  EE20 F001          	lfsr	2,1
 13985  001408  51B7               	movf	put_fat@p& (0+255),w,b
 13986  00140A  26D9               	addwf	fsr2l,f,c
 13987  00140C  51B8               	movf	(put_fat@p+1)& (0+255),w,b
 13988  00140E  22DA               	addwfc	fsr2h,f,c
 13989  001410  50DF               	movf	indf2,w,c
 13990  001412  6F92               	movwf	??_put_fat& (0+255),b
 13991  001414  5192               	movf	??_put_fat& (0+255),w,b
 13992  001416  6F94               	movwf	(??_put_fat+2)& (0+255),b
 13993  001418  6B93               	clrf	(??_put_fat+1)& (0+255),b
 13994  00141A  EE20 F002          	lfsr	2,2
 13995  00141E  51B7               	movf	put_fat@p& (0+255),w,b
 13996  001420  26D9               	addwf	fsr2l,f,c
 13997  001422  51B8               	movf	(put_fat@p+1)& (0+255),w,b
 13998  001424  22DA               	addwfc	fsr2h,f,c
 13999  001426  50DF               	movf	indf2,w,c
 14000  001428  6F95               	movwf	(??_put_fat+3)& (0+255),b
 14001  00142A  C095  F096         	movff	??_put_fat+3,??_put_fat+4
 14002  00142E  6B97               	clrf	(??_put_fat+5)& (0+255),b
 14003  001430  6B98               	clrf	(??_put_fat+6)& (0+255),b
 14004  001432  6B99               	clrf	(??_put_fat+7)& (0+255),b
 14005  001434  C097  F099         	movff	??_put_fat+5,??_put_fat+7
 14006  001438  C096  F098         	movff	??_put_fat+4,??_put_fat+6
 14007  00143C  6B97               	clrf	(??_put_fat+5)& (0+255),b
 14008  00143E  6B96               	clrf	(??_put_fat+4)& (0+255),b
 14009  001440  EE20 F003          	lfsr	2,3
 14010  001444  51B7               	movf	put_fat@p& (0+255),w,b
 14011  001446  26D9               	addwf	fsr2l,f,c
 14012  001448  51B8               	movf	(put_fat@p+1)& (0+255),w,b
 14013  00144A  22DA               	addwfc	fsr2h,f,c
 14014  00144C  50DF               	movf	indf2,w,c
 14015  00144E  6F9A               	movwf	(??_put_fat+8)& (0+255),b
 14016  001450  C09A  F09B         	movff	??_put_fat+8,??_put_fat+9
 14017  001454  6B9C               	clrf	(??_put_fat+10)& (0+255),b
 14018  001456  6B9D               	clrf	(??_put_fat+11)& (0+255),b
 14019  001458  6B9E               	clrf	(??_put_fat+12)& (0+255),b
 14020  00145A  C09B  F09E         	movff	??_put_fat+9,??_put_fat+12
 14021  00145E  6B9D               	clrf	(??_put_fat+11)& (0+255),b
 14022  001460  6B9C               	clrf	(??_put_fat+10)& (0+255),b
 14023  001462  6B9B               	clrf	(??_put_fat+9)& (0+255),b
 14024  001464  5196               	movf	(??_put_fat+4)& (0+255),w,b
 14025  001466  119B               	iorwf	(??_put_fat+9)& (0+255),w,b
 14026  001468  6F9F               	movwf	(??_put_fat+13)& (0+255),b
 14027  00146A  5197               	movf	(??_put_fat+5)& (0+255),w,b
 14028  00146C  119C               	iorwf	(??_put_fat+10)& (0+255),w,b
 14029  00146E  6FA0               	movwf	(??_put_fat+14)& (0+255),b
 14030  001470  5198               	movf	(??_put_fat+6)& (0+255),w,b
 14031  001472  119D               	iorwf	(??_put_fat+11)& (0+255),w,b
 14032  001474  6FA1               	movwf	(??_put_fat+15)& (0+255),b
 14033  001476  5199               	movf	(??_put_fat+7)& (0+255),w,b
 14034  001478  119E               	iorwf	(??_put_fat+12)& (0+255),w,b
 14035  00147A  6FA2               	movwf	(??_put_fat+16)& (0+255),b
 14036  00147C  5193               	movf	(??_put_fat+1)& (0+255),w,b
 14037  00147E  119F               	iorwf	(??_put_fat+13)& (0+255),w,b
 14038  001480  6FA3               	movwf	(??_put_fat+17)& (0+255),b
 14039  001482  5194               	movf	(??_put_fat+2)& (0+255),w,b
 14040  001484  11A0               	iorwf	(??_put_fat+14)& (0+255),w,b
 14041  001486  6FA4               	movwf	(??_put_fat+18)& (0+255),b
 14042  001488  0E00               	movlw	0
 14043  00148A  11A1               	iorwf	(??_put_fat+15)& (0+255),w,b
 14044  00148C  6FA5               	movwf	(??_put_fat+19)& (0+255),b
 14045  00148E  0E00               	movlw	0
 14046  001490  11A2               	iorwf	(??_put_fat+16)& (0+255),w,b
 14047  001492  6FA6               	movwf	(??_put_fat+20)& (0+255),b
 14048  001494  C0B7  FFD9         	movff	put_fat@p,fsr2l
 14049  001498  C0B8  FFDA         	movff	put_fat@p+1,fsr2h
 14050  00149C  50DF               	movf	indf2,w,c
 14051  00149E  6FA7               	movwf	(??_put_fat+21)& (0+255),b
 14052  0014A0  51A7               	movf	(??_put_fat+21)& (0+255),w,b
 14053  0014A2  11A3               	iorwf	(??_put_fat+17)& (0+255),w,b
 14054  0014A4  6FA8               	movwf	(??_put_fat+22)& (0+255),b
 14055  0014A6  51A4               	movf	(??_put_fat+18)& (0+255),w,b
 14056  0014A8  6FA9               	movwf	(??_put_fat+23)& (0+255),b
 14057  0014AA  51A5               	movf	(??_put_fat+19)& (0+255),w,b
 14058  0014AC  6FAA               	movwf	(??_put_fat+24)& (0+255),b
 14059  0014AE  51A6               	movf	(??_put_fat+20)& (0+255),w,b
 14060  0014B0  6FAB               	movwf	(??_put_fat+25)& (0+255),b
 14061  0014B2  0E00               	movlw	0
 14062  0014B4  15A8               	andwf	(??_put_fat+22)& (0+255),w,b
 14063  0014B6  6FAC               	movwf	(??_put_fat+26)& (0+255),b
 14064  0014B8  0E00               	movlw	0
 14065  0014BA  15A9               	andwf	(??_put_fat+23)& (0+255),w,b
 14066  0014BC  6FAD               	movwf	(??_put_fat+27)& (0+255),b
 14067  0014BE  0E00               	movlw	0
 14068  0014C0  15AA               	andwf	(??_put_fat+24)& (0+255),w,b
 14069  0014C2  6FAE               	movwf	(??_put_fat+28)& (0+255),b
 14070  0014C4  0EF0               	movlw	240
 14071  0014C6  15AB               	andwf	(??_put_fat+25)& (0+255),w,b
 14072  0014C8  6FAF               	movwf	(??_put_fat+29)& (0+255),b
 14073  0014CA  51AC               	movf	(??_put_fat+26)& (0+255),w,b
 14074  0014CC  138E               	iorwf	put_fat@val& (0+255),f,b
 14075  0014CE  51AD               	movf	(??_put_fat+27)& (0+255),w,b
 14076  0014D0  138F               	iorwf	(put_fat@val+1)& (0+255),f,b
 14077  0014D2  51AE               	movf	(??_put_fat+28)& (0+255),w,b
 14078  0014D4  1390               	iorwf	(put_fat@val+2)& (0+255),f,b
 14079  0014D6  51AF               	movf	(??_put_fat+29)& (0+255),w,b
 14080  0014D8  1391               	iorwf	(put_fat@val+3)& (0+255),f,b
 14081                           
 14082                           ;ff.c: 574: *(BYTE*)(p)=(BYTE)(val); *(BYTE*)((p)+1)=(BYTE)((WORD)(val)>>8); *(BYTE*)((p
      +                          )+2)=(BYTE)((DWORD)(val)>>16); *(BYTE*)((p)+3)=(BYTE)((DWORD)(val)>>24);
 14083  0014DA  C0B7  FFD9         	movff	put_fat@p,fsr2l
 14084  0014DE  C0B8  FFDA         	movff	put_fat@p+1,fsr2h
 14085  0014E2  C08E  FFDF         	movff	put_fat@val,indf2
 14086                           
 14087                           ; BSR set to: 0
 14088  0014E6  EE20 F001          	lfsr	2,1
 14089  0014EA  51B7               	movf	put_fat@p& (0+255),w,b
 14090  0014EC  26D9               	addwf	fsr2l,f,c
 14091  0014EE  51B8               	movf	(put_fat@p+1)& (0+255),w,b
 14092  0014F0  22DA               	addwfc	fsr2h,f,c
 14093  0014F2  518F               	movf	(put_fat@val+1)& (0+255),w,b
 14094  0014F4  6EDF               	movwf	indf2,c
 14095                           
 14096                           ; BSR set to: 0
 14097  0014F6  EE20 F002          	lfsr	2,2
 14098  0014FA  51B7               	movf	put_fat@p& (0+255),w,b
 14099  0014FC  26D9               	addwf	fsr2l,f,c
 14100  0014FE  51B8               	movf	(put_fat@p+1)& (0+255),w,b
 14101  001500  22DA               	addwfc	fsr2h,f,c
 14102  001502  C090  FFDF         	movff	put_fat@val+2,indf2
 14103                           
 14104                           ; BSR set to: 0
 14105  001506  EE20 F003          	lfsr	2,3
 14106  00150A  51B7               	movf	put_fat@p& (0+255),w,b
 14107  00150C  26D9               	addwf	fsr2l,f,c
 14108  00150E  51B8               	movf	(put_fat@p+1)& (0+255),w,b
 14109  001510  22DA               	addwfc	fsr2h,f,c
 14110  001512  C091  FFDF         	movff	put_fat@val+3,indf2
 14111                           
 14112                           ;ff.c: 575: break;
 14113  001516  D012               	goto	l1012
 14114  001518                     
 14115                           ; BSR set to: 0
 14116                           ;ff.c: 578: res = FR_INT_ERR;
 14117                           
 14118                           ; BSR set to: 0
 14119  001518  0E02               	movlw	2
 14120  00151A  6FB6               	movwf	put_fat@res& (0+255),b
 14121                           
 14122                           ;ff.c: 579: }
 14123  00151C  D00F               	goto	l1012
 14124  00151E                     l1009:
 14125                           
 14126                           ; BSR set to: 0
 14127                           
 14128                           ; BSR set to: 0
 14129  00151E  C088  FFD9         	movff	put_fat@fs,fsr2l
 14130  001522  C089  FFDA         	movff	put_fat@fs+1,fsr2h
 14131  001526  50DF               	movf	indf2,w,c
 14132                           
 14133                           ; Switch size 1, requested type "space"
 14134                           ; Number of cases is 3, Range of values is 1 to 3
 14135                           ; switch strategies available:
 14136                           ; Name         Instructions Cycles
 14137                           ; simple_byte           10     6 (average)
 14138                           ;	Chosen strategy is simple_byte
 14139  001528  0A01               	xorlw	1	; case 1
 14140  00152A  B4D8               	btfsc	status,2,c
 14141  00152C  D5BC               	goto	l1010
 14142  00152E  0A03               	xorlw	3	; case 2
 14143  001530  B4D8               	btfsc	status,2,c
 14144  001532  D6BA               	goto	l1022
 14145  001534  0A01               	xorlw	1	; case 3
 14146  001536  B4D8               	btfsc	status,2,c
 14147  001538  D713               	goto	l1024
 14148  00153A  D7EE               	goto	l1026
 14149  00153C                     l1012:
 14150                           
 14151                           ; BSR set to: 0
 14152                           ;ff.c: 580: fs->wflag = 1;
 14153                           
 14154                           ; BSR set to: 0
 14155  00153C  EE20 F004          	lfsr	2,4
 14156  001540  5188               	movf	put_fat@fs& (0+255),w,b
 14157  001542  26D9               	addwf	fsr2l,f,c
 14158  001544  5189               	movf	(put_fat@fs+1)& (0+255),w,b
 14159  001546  22DA               	addwfc	fsr2h,f,c
 14160  001548  0E01               	movlw	1
 14161  00154A  6EDF               	movwf	indf2,c
 14162  00154C                     l1008:
 14163                           
 14164                           ; BSR set to: 0
 14165                           ;ff.c: 581: }
 14166                           ;ff.c: 583: return res;
 14167                           
 14168                           ; BSR set to: 0
 14169  00154C  51B6               	movf	put_fat@res& (0+255),w,b
 14170  00154E  0012               	return	
 14171  001550                     __end_of_put_fat:
 14172                           	opt stack 0
 14173                           tosu	equ	0xFFF
 14174                           tosh	equ	0xFFE
 14175                           tosl	equ	0xFFD
 14176                           pclath	equ	0xFFA
 14177                           tblptru	equ	0xFF8
 14178                           tblptrh	equ	0xFF7
 14179                           tblptrl	equ	0xFF6
 14180                           tablat	equ	0xFF5
 14181                           prodh	equ	0xFF4
 14182                           prodl	equ	0xFF3
 14183                           intcon	equ	0xFF2
 14184                           intcon2	equ	0xFF1
 14185                           intcon3	equ	0xFF0
 14186                           indf0	equ	0xFEF
 14187                           postinc0	equ	0xFEE
 14188                           fsr0h	equ	0xFEA
 14189                           fsr0l	equ	0xFE9
 14190                           wreg	equ	0xFE8
 14191                           indf1	equ	0xFE7
 14192                           postinc1	equ	0xFE6
 14193                           postdec1	equ	0xFE5
 14194                           fsr1h	equ	0xFE2
 14195                           fsr1l	equ	0xFE1
 14196                           indf2	equ	0xFDF
 14197                           postinc2	equ	0xFDE
 14198                           postdec2	equ	0xFDD
 14199                           plusw2	equ	0xFDB
 14200                           fsr2h	equ	0xFDA
 14201                           fsr2l	equ	0xFD9
 14202                           status	equ	0xFD8
 14203                           
 14204 ;; *************** function _get_fat *****************
 14205 ;; Defined at:
 14206 ;;		line 489 in file "bibliotecas/ff.c"
 14207 ;; Parameters:    Size  Location     Type
 14208 ;;  fs              2   40[BANK0 ] PTR struct .
 14209 ;;		 -> NULL(0), 
 14210 ;;  clst            4   42[BANK0 ] unsigned long 
 14211 ;; Auto vars:     Size  Location     Type
 14212 ;;  p               2   78[BANK0 ] PTR unsigned char 
 14213 ;;		 -> NULL(0), 
 14214 ;;  bc              2   76[BANK0 ] unsigned int 
 14215 ;;  wc              2   74[BANK0 ] unsigned int 
 14216 ;; Return value:  Size  Location     Type
 14217 ;;                  4   40[BANK0 ] unsigned long 
 14218 ;; Registers used:
 14219 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14220 ;; Tracked objects:
 14221 ;;		On entry : 0/0
 14222 ;;		On exit  : 0/0
 14223 ;;		Unchanged: 0/0
 14224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14225 ;;      Params:         0       6       0       0       0       0       0       0       0
 14226 ;;      Locals:         0       8       0       0       0       0       0       0       0
 14227 ;;      Temps:          0      26       0       0       0       0       0       0       0
 14228 ;;      Totals:         0      40       0       0       0       0       0       0       0
 14229 ;;Total ram usage:       40 bytes
 14230 ;; Hardware stack levels used:    1
 14231 ;; Hardware stack levels required when called:    8
 14232 ;; This function calls:
 14233 ;;		_move_window
 14234 ;; This function is called by:
 14235 ;;		_create_chain
 14236 ;;		_remove_chain
 14237 ;;		_dir_sdi
 14238 ;;		_dir_next
 14239 ;;		_f_read
 14240 ;;		_f_lseek
 14241 ;; This function uses a non-reentrant model
 14242 ;;
 14243                           
 14244                           	psect	text53
 14245  001550                     __ptext53:
 14246                           	opt stack 0
 14247  001550                     _get_fat:
 14248                           	opt stack 18
 14249                           
 14250                           ;ff.c: 494: UINT wc, bc;
 14251                           ;ff.c: 495: BYTE *p;
 14252                           ;ff.c: 498: if (clst < 2 || clst >= fs->n_fatent)
 14253                           
 14254                           ; BSR set to: 0
 14255                           ;incstack = 0
 14256  001550  0100               	movlb	0	; () banked
 14257  001552  518D               	movf	(get_fat@clst+3)& (0+255),w,b
 14258  001554  118C               	iorwf	(get_fat@clst+2)& (0+255),w,b
 14259  001556  118B               	iorwf	(get_fat@clst+1)& (0+255),w,b
 14260  001558  E104               	bnz	u14590
 14261  00155A  0E02               	movlw	2
 14262  00155C  5D8A               	subwf	get_fat@clst& (0+255),w,b
 14263  00155E  A0D8               	btfss	status,0,c
 14264  001560  D010               	goto	u14600
 14265  001562                     u14590:
 14266                           
 14267                           ; BSR set to: 0
 14268  001562  EE20 F016          	lfsr	2,22
 14269  001566  5188               	movf	get_fat@fs& (0+255),w,b
 14270  001568  26D9               	addwf	fsr2l,f,c
 14271  00156A  5189               	movf	(get_fat@fs+1)& (0+255),w,b
 14272  00156C  22DA               	addwfc	fsr2h,f,c
 14273  00156E  50DE               	movf	postinc2,w,c
 14274  001570  5D8A               	subwf	get_fat@clst& (0+255),w,b
 14275  001572  50DE               	movf	postinc2,w,c
 14276  001574  598B               	subwfb	(get_fat@clst+1)& (0+255),w,b
 14277  001576  50DE               	movf	postinc2,w,c
 14278  001578  598C               	subwfb	(get_fat@clst+2)& (0+255),w,b
 14279  00157A  50DE               	movf	postinc2,w,c
 14280  00157C  598D               	subwfb	(get_fat@clst+3)& (0+255),w,b
 14281  00157E  A0D8               	btfss	status,0,c
 14282  001580  D1EC               	goto	l990
 14283  001582                     u14600:
 14284                           
 14285                           ; BSR set to: 0
 14286                           ;ff.c: 499: return 1;
 14287                           
 14288                           ; BSR set to: 0
 14289  001582  0E01               	movlw	1
 14290  001584  6F88               	movwf	?_get_fat& (0+255),b
 14291  001586  0E00               	movlw	0
 14292  001588  6F89               	movwf	(?_get_fat+1)& (0+255),b
 14293  00158A  0E00               	movlw	0
 14294  00158C  6F8A               	movwf	(?_get_fat+2)& (0+255),b
 14295  00158E  0E00               	movlw	0
 14296  001590  6F8B               	movwf	(?_get_fat+3)& (0+255),b
 14297                           
 14298                           ; BSR set to: 0
 14299  001592  0012               	return	
 14300  001594                     l991:
 14301                           
 14302                           ; BSR set to: 0
 14303                           ;ff.c: 503: bc = (UINT)clst; bc += bc / 2;
 14304  001594  C08A  F0AC         	movff	get_fat@clst,get_fat@bc
 14305  001598  C08B  F0AD         	movff	get_fat@clst+1,get_fat@bc+1
 14306                           
 14307                           ; BSR set to: 0
 14308  00159C  90D8               	bcf	status,0,c
 14309  00159E  31AD               	rrcf	(get_fat@bc+1)& (0+255),w,b
 14310  0015A0  6F8F               	movwf	(??_get_fat+1)& (0+255),b
 14311  0015A2  31AC               	rrcf	get_fat@bc& (0+255),w,b
 14312  0015A4  6F8E               	movwf	??_get_fat& (0+255),b
 14313  0015A6  518E               	movf	??_get_fat& (0+255),w,b
 14314  0015A8  27AC               	addwf	get_fat@bc& (0+255),f,b
 14315  0015AA  518F               	movf	(??_get_fat+1)& (0+255),w,b
 14316  0015AC  23AD               	addwfc	(get_fat@bc+1)& (0+255),f,b
 14317                           
 14318                           ; BSR set to: 0
 14319                           ;ff.c: 504: if (move_window(fs, fs->fatbase + (bc / 512U))) break;
 14320  0015AE  C088  F071         	movff	get_fat@fs,move_window@fs
 14321  0015B2  C089  F072         	movff	get_fat@fs+1,move_window@fs+1
 14322  0015B6  EE20 F01E          	lfsr	2,30
 14323  0015BA  5188               	movf	get_fat@fs& (0+255),w,b
 14324  0015BC  26D9               	addwf	fsr2l,f,c
 14325  0015BE  5189               	movf	(get_fat@fs+1)& (0+255),w,b
 14326  0015C0  22DA               	addwfc	fsr2h,f,c
 14327  0015C2  CFDE F08E          	movff	postinc2,??_get_fat
 14328  0015C6  CFDE F08F          	movff	postinc2,??_get_fat+1
 14329  0015CA  CFDE F090          	movff	postinc2,??_get_fat+2
 14330  0015CE  CFDE F091          	movff	postinc2,??_get_fat+3
 14331  0015D2  C0AC  F092         	movff	get_fat@bc,??_get_fat+4
 14332  0015D6  C0AD  F093         	movff	get_fat@bc+1,??_get_fat+5
 14333  0015DA  0E09               	movlw	9
 14334  0015DC  6F94               	movwf	(??_get_fat+6)& (0+255),b
 14335  0015DE                     u14615:
 14336  0015DE  90D8               	bcf	status,0,c
 14337  0015E0  3393               	rrcf	(??_get_fat+5)& (0+255),f,b
 14338  0015E2  3392               	rrcf	(??_get_fat+4)& (0+255),f,b
 14339  0015E4  2F94               	decfsz	(??_get_fat+6)& (0+255),f,b
 14340  0015E6  D7FB               	goto	u14615
 14341  0015E8  5192               	movf	(??_get_fat+4)& (0+255),w,b
 14342  0015EA  258E               	addwf	??_get_fat& (0+255),w,b
 14343  0015EC  6F73               	movwf	move_window@sector& (0+255),b
 14344  0015EE  5193               	movf	(??_get_fat+5)& (0+255),w,b
 14345  0015F0  218F               	addwfc	(??_get_fat+1)& (0+255),w,b
 14346  0015F2  6F74               	movwf	(move_window@sector+1)& (0+255),b
 14347  0015F4  0E00               	movlw	0
 14348  0015F6  2190               	addwfc	(??_get_fat+2)& (0+255),w,b
 14349  0015F8  6F75               	movwf	(move_window@sector+2)& (0+255),b
 14350  0015FA  0E00               	movlw	0
 14351  0015FC  2191               	addwfc	(??_get_fat+3)& (0+255),w,b
 14352  0015FE  6F76               	movwf	(move_window@sector+3)& (0+255),b
 14353  001600  EC69  F016         	call	_move_window	;wreg free
 14354  001604  0900               	iorlw	0
 14355  001606  A4D8               	btfss	status,2,c
 14356  001608  D1B6               	goto	l993
 14357                           
 14358                           ;ff.c: 505: wc = fs->win[bc % 512U]; bc++;
 14359  00160A  0EFF               	movlw	255
 14360  00160C  0100               	movlb	0	; () banked
 14361  00160E  6F8E               	movwf	??_get_fat& (0+255),b
 14362  001610  0E01               	movlw	1
 14363  001612  6F8F               	movwf	(??_get_fat+1)& (0+255),b
 14364  001614  C0AC  F090         	movff	get_fat@bc,??_get_fat+2
 14365  001618  C0AD  F091         	movff	get_fat@bc+1,??_get_fat+3
 14366  00161C  518E               	movf	??_get_fat& (0+255),w,b
 14367  00161E  1790               	andwf	(??_get_fat+2)& (0+255),f,b
 14368  001620  518F               	movf	(??_get_fat+1)& (0+255),w,b
 14369  001622  1791               	andwf	(??_get_fat+3)& (0+255),f,b
 14370  001624  0E2E               	movlw	46
 14371  001626  2790               	addwf	(??_get_fat+2)& (0+255),f,b
 14372  001628  0E00               	movlw	0
 14373  00162A  2391               	addwfc	(??_get_fat+3)& (0+255),f,b
 14374  00162C  5190               	movf	(??_get_fat+2)& (0+255),w,b
 14375  00162E  2588               	addwf	get_fat@fs& (0+255),w,b
 14376  001630  6ED9               	movwf	fsr2l,c
 14377  001632  5191               	movf	(??_get_fat+3)& (0+255),w,b
 14378  001634  2189               	addwfc	(get_fat@fs+1)& (0+255),w,b
 14379  001636  6EDA               	movwf	fsr2h,c
 14380  001638  50DF               	movf	indf2,w,c
 14381  00163A  6F92               	movwf	(??_get_fat+4)& (0+255),b
 14382  00163C  5192               	movf	(??_get_fat+4)& (0+255),w,b
 14383  00163E  6FAA               	movwf	get_fat@wc& (0+255),b
 14384  001640  6BAB               	clrf	(get_fat@wc+1)& (0+255),b
 14385                           
 14386                           ; BSR set to: 0
 14387  001642  4BAC               	infsnz	get_fat@bc& (0+255),f,b
 14388  001644  2BAD               	incf	(get_fat@bc+1)& (0+255),f,b
 14389                           
 14390                           ; BSR set to: 0
 14391                           ;ff.c: 506: if (move_window(fs, fs->fatbase + (bc / 512U))) break;
 14392  001646  C088  F071         	movff	get_fat@fs,move_window@fs
 14393  00164A  C089  F072         	movff	get_fat@fs+1,move_window@fs+1
 14394  00164E  EE20 F01E          	lfsr	2,30
 14395  001652  5188               	movf	get_fat@fs& (0+255),w,b
 14396  001654  26D9               	addwf	fsr2l,f,c
 14397  001656  5189               	movf	(get_fat@fs+1)& (0+255),w,b
 14398  001658  22DA               	addwfc	fsr2h,f,c
 14399  00165A  CFDE F08E          	movff	postinc2,??_get_fat
 14400  00165E  CFDE F08F          	movff	postinc2,??_get_fat+1
 14401  001662  CFDE F090          	movff	postinc2,??_get_fat+2
 14402  001666  CFDE F091          	movff	postinc2,??_get_fat+3
 14403  00166A  C0AC  F092         	movff	get_fat@bc,??_get_fat+4
 14404  00166E  C0AD  F093         	movff	get_fat@bc+1,??_get_fat+5
 14405  001672  0E09               	movlw	9
 14406  001674  6F94               	movwf	(??_get_fat+6)& (0+255),b
 14407  001676                     u14635:
 14408  001676  90D8               	bcf	status,0,c
 14409  001678  3393               	rrcf	(??_get_fat+5)& (0+255),f,b
 14410  00167A  3392               	rrcf	(??_get_fat+4)& (0+255),f,b
 14411  00167C  2F94               	decfsz	(??_get_fat+6)& (0+255),f,b
 14412  00167E  D7FB               	goto	u14635
 14413  001680  5192               	movf	(??_get_fat+4)& (0+255),w,b
 14414  001682  258E               	addwf	??_get_fat& (0+255),w,b
 14415  001684  6F73               	movwf	move_window@sector& (0+255),b
 14416  001686  5193               	movf	(??_get_fat+5)& (0+255),w,b
 14417  001688  218F               	addwfc	(??_get_fat+1)& (0+255),w,b
 14418  00168A  6F74               	movwf	(move_window@sector+1)& (0+255),b
 14419  00168C  0E00               	movlw	0
 14420  00168E  2190               	addwfc	(??_get_fat+2)& (0+255),w,b
 14421  001690  6F75               	movwf	(move_window@sector+2)& (0+255),b
 14422  001692  0E00               	movlw	0
 14423  001694  2191               	addwfc	(??_get_fat+3)& (0+255),w,b
 14424  001696  6F76               	movwf	(move_window@sector+3)& (0+255),b
 14425  001698  EC69  F016         	call	_move_window	;wreg free
 14426  00169C  0900               	iorlw	0
 14427  00169E  A4D8               	btfss	status,2,c
 14428  0016A0  D16A               	goto	l993
 14429                           
 14430                           ;ff.c: 507: wc |= fs->win[bc % 512U] << 8;
 14431  0016A2  0EFF               	movlw	255
 14432  0016A4  0100               	movlb	0	; () banked
 14433  0016A6  6F8E               	movwf	??_get_fat& (0+255),b
 14434  0016A8  0E01               	movlw	1
 14435  0016AA  6F8F               	movwf	(??_get_fat+1)& (0+255),b
 14436  0016AC  C0AC  F090         	movff	get_fat@bc,??_get_fat+2
 14437  0016B0  C0AD  F091         	movff	get_fat@bc+1,??_get_fat+3
 14438  0016B4  518E               	movf	??_get_fat& (0+255),w,b
 14439  0016B6  1790               	andwf	(??_get_fat+2)& (0+255),f,b
 14440  0016B8  518F               	movf	(??_get_fat+1)& (0+255),w,b
 14441  0016BA  1791               	andwf	(??_get_fat+3)& (0+255),f,b
 14442  0016BC  0E2E               	movlw	46
 14443  0016BE  2790               	addwf	(??_get_fat+2)& (0+255),f,b
 14444  0016C0  0E00               	movlw	0
 14445  0016C2  2391               	addwfc	(??_get_fat+3)& (0+255),f,b
 14446  0016C4  5190               	movf	(??_get_fat+2)& (0+255),w,b
 14447  0016C6  2588               	addwf	get_fat@fs& (0+255),w,b
 14448  0016C8  6ED9               	movwf	fsr2l,c
 14449  0016CA  5191               	movf	(??_get_fat+3)& (0+255),w,b
 14450  0016CC  2189               	addwfc	(get_fat@fs+1)& (0+255),w,b
 14451  0016CE  6EDA               	movwf	fsr2h,c
 14452  0016D0  50DF               	movf	indf2,w,c
 14453  0016D2  6F92               	movwf	(??_get_fat+4)& (0+255),b
 14454  0016D4  5192               	movf	(??_get_fat+4)& (0+255),w,b
 14455  0016D6  6F94               	movwf	(??_get_fat+6)& (0+255),b
 14456  0016D8  6B93               	clrf	(??_get_fat+5)& (0+255),b
 14457  0016DA  5193               	movf	(??_get_fat+5)& (0+255),w,b
 14458  0016DC  13AA               	iorwf	get_fat@wc& (0+255),f,b
 14459  0016DE  5194               	movf	(??_get_fat+6)& (0+255),w,b
 14460  0016E0  13AB               	iorwf	(get_fat@wc+1)& (0+255),f,b
 14461                           
 14462                           ; BSR set to: 0
 14463                           ;ff.c: 508: return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 14464  0016E2  B18A               	btfsc	get_fat@clst& (0+255),0,b
 14465  0016E4  D007               	goto	l996
 14466                           
 14467                           ; BSR set to: 0
 14468  0016E6  0EFF               	movlw	255
 14469  0016E8  15AA               	andwf	get_fat@wc& (0+255),w,b
 14470  0016EA  6FA8               	movwf	_get_fat$2263& (0+255),b
 14471  0016EC  0E0F               	movlw	15
 14472  0016EE  15AB               	andwf	(get_fat@wc+1)& (0+255),w,b
 14473  0016F0  6FA9               	movwf	(_get_fat$2263+1)& (0+255),b
 14474  0016F2  D00F               	goto	l998
 14475  0016F4                     l996:
 14476                           
 14477                           ; BSR set to: 0
 14478                           
 14479                           ; BSR set to: 0
 14480  0016F4  C0AA  F08E         	movff	get_fat@wc,??_get_fat
 14481  0016F8  C0AB  F08F         	movff	get_fat@wc+1,??_get_fat+1
 14482  0016FC  0E04               	movlw	4
 14483  0016FE  6F90               	movwf	(??_get_fat+2)& (0+255),b
 14484  001700                     u14665:
 14485  001700  90D8               	bcf	status,0,c
 14486  001702  338F               	rrcf	(??_get_fat+1)& (0+255),f,b
 14487  001704  338E               	rrcf	??_get_fat& (0+255),f,b
 14488  001706  2F90               	decfsz	(??_get_fat+2)& (0+255),f,b
 14489  001708  D7FB               	goto	u14665
 14490  00170A  C08E  F0A8         	movff	??_get_fat,_get_fat$2263
 14491  00170E  C08F  F0A9         	movff	??_get_fat+1,_get_fat$2263+1
 14492  001712                     l998:
 14493                           
 14494                           ; BSR set to: 0
 14495                           
 14496                           ; BSR set to: 0
 14497  001712  C0A8  F088         	movff	_get_fat$2263,?_get_fat
 14498  001716  C0A9  F089         	movff	_get_fat$2263+1,?_get_fat+1
 14499  00171A  6B8A               	clrf	(?_get_fat+2)& (0+255),b
 14500  00171C  6B8B               	clrf	(?_get_fat+3)& (0+255),b
 14501                           
 14502                           ; BSR set to: 0
 14503  00171E  0012               	return	
 14504  001720                     
 14505                           ; BSR set to: 0
 14506                           ;ff.c: 511: if (move_window(fs, fs->fatbase + (clst / (512U / 2)))) break;
 14507                           
 14508                           ; BSR set to: 0
 14509  001720  C088  F071         	movff	get_fat@fs,move_window@fs
 14510  001724  C089  F072         	movff	get_fat@fs+1,move_window@fs+1
 14511  001728  EE20 F01E          	lfsr	2,30
 14512  00172C  5188               	movf	get_fat@fs& (0+255),w,b
 14513  00172E  26D9               	addwf	fsr2l,f,c
 14514  001730  5189               	movf	(get_fat@fs+1)& (0+255),w,b
 14515  001732  22DA               	addwfc	fsr2h,f,c
 14516  001734  CFDE F08E          	movff	postinc2,??_get_fat
 14517  001738  CFDE F08F          	movff	postinc2,??_get_fat+1
 14518  00173C  CFDE F090          	movff	postinc2,??_get_fat+2
 14519  001740  CFDE F091          	movff	postinc2,??_get_fat+3
 14520  001744  C08A  F092         	movff	get_fat@clst,??_get_fat+4
 14521  001748  C08B  F093         	movff	get_fat@clst+1,??_get_fat+5
 14522  00174C  C08C  F094         	movff	get_fat@clst+2,??_get_fat+6
 14523  001750  C08D  F095         	movff	get_fat@clst+3,??_get_fat+7
 14524  001754  C093  F092         	movff	??_get_fat+5,??_get_fat+4
 14525  001758  C094  F093         	movff	??_get_fat+6,??_get_fat+5
 14526  00175C  C095  F094         	movff	??_get_fat+7,??_get_fat+6
 14527  001760  6B95               	clrf	(??_get_fat+7)& (0+255),b
 14528  001762  518E               	movf	??_get_fat& (0+255),w,b
 14529  001764  2592               	addwf	(??_get_fat+4)& (0+255),w,b
 14530  001766  6F73               	movwf	move_window@sector& (0+255),b
 14531  001768  518F               	movf	(??_get_fat+1)& (0+255),w,b
 14532  00176A  2193               	addwfc	(??_get_fat+5)& (0+255),w,b
 14533  00176C  6F74               	movwf	(move_window@sector+1)& (0+255),b
 14534  00176E  5190               	movf	(??_get_fat+2)& (0+255),w,b
 14535  001770  2194               	addwfc	(??_get_fat+6)& (0+255),w,b
 14536  001772  6F75               	movwf	(move_window@sector+2)& (0+255),b
 14537  001774  5191               	movf	(??_get_fat+3)& (0+255),w,b
 14538  001776  2195               	addwfc	(??_get_fat+7)& (0+255),w,b
 14539  001778  6F76               	movwf	(move_window@sector+3)& (0+255),b
 14540  00177A  EC69  F016         	call	_move_window	;wreg free
 14541  00177E  0900               	iorlw	0
 14542  001780  A4D8               	btfss	status,2,c
 14543  001782  D0F9               	goto	l993
 14544                           
 14545                           ;ff.c: 512: p = &fs->win[clst * 2 % 512U];
 14546  001784  0EFF               	movlw	255
 14547  001786  0100               	movlb	0	; () banked
 14548  001788  6F8E               	movwf	??_get_fat& (0+255),b
 14549  00178A  0E01               	movlw	1
 14550  00178C  6F8F               	movwf	(??_get_fat+1)& (0+255),b
 14551  00178E  C08A  F090         	movff	get_fat@clst,??_get_fat+2
 14552  001792  C08B  F091         	movff	get_fat@clst+1,??_get_fat+3
 14553  001796  90D8               	bcf	status,0,c
 14554  001798  3790               	rlcf	(??_get_fat+2)& (0+255),f,b
 14555  00179A  3791               	rlcf	(??_get_fat+3)& (0+255),f,b
 14556  00179C  518E               	movf	??_get_fat& (0+255),w,b
 14557  00179E  1790               	andwf	(??_get_fat+2)& (0+255),f,b
 14558  0017A0  518F               	movf	(??_get_fat+1)& (0+255),w,b
 14559  0017A2  1791               	andwf	(??_get_fat+3)& (0+255),f,b
 14560  0017A4  0E2E               	movlw	46
 14561  0017A6  2790               	addwf	(??_get_fat+2)& (0+255),f,b
 14562  0017A8  0E00               	movlw	0
 14563  0017AA  2391               	addwfc	(??_get_fat+3)& (0+255),f,b
 14564  0017AC  5190               	movf	(??_get_fat+2)& (0+255),w,b
 14565  0017AE  2588               	addwf	get_fat@fs& (0+255),w,b
 14566  0017B0  6FAE               	movwf	get_fat@p& (0+255),b
 14567  0017B2  5191               	movf	(??_get_fat+3)& (0+255),w,b
 14568  0017B4  2189               	addwfc	(get_fat@fs+1)& (0+255),w,b
 14569  0017B6  6FAF               	movwf	(get_fat@p+1)& (0+255),b
 14570                           
 14571                           ; BSR set to: 0
 14572                           ;ff.c: 513: return (WORD)(((WORD)*(BYTE*)((p)+1)<<8)|(WORD)*(BYTE*)(p));
 14573  0017B8  EE20 F001          	lfsr	2,1
 14574  0017BC  51AE               	movf	get_fat@p& (0+255),w,b
 14575  0017BE  26D9               	addwf	fsr2l,f,c
 14576  0017C0  51AF               	movf	(get_fat@p+1)& (0+255),w,b
 14577  0017C2  22DA               	addwfc	fsr2h,f,c
 14578  0017C4  50DF               	movf	indf2,w,c
 14579  0017C6  6F8E               	movwf	??_get_fat& (0+255),b
 14580  0017C8  518E               	movf	??_get_fat& (0+255),w,b
 14581  0017CA  6F90               	movwf	(??_get_fat+2)& (0+255),b
 14582  0017CC  6B8F               	clrf	(??_get_fat+1)& (0+255),b
 14583  0017CE  C0AE  FFD9         	movff	get_fat@p,fsr2l
 14584  0017D2  C0AF  FFDA         	movff	get_fat@p+1,fsr2h
 14585  0017D6  50DF               	movf	indf2,w,c
 14586  0017D8  6F91               	movwf	(??_get_fat+3)& (0+255),b
 14587  0017DA  5191               	movf	(??_get_fat+3)& (0+255),w,b
 14588  0017DC  138F               	iorwf	(??_get_fat+1)& (0+255),f,b
 14589  0017DE  0E00               	movlw	0
 14590  0017E0  1390               	iorwf	(??_get_fat+2)& (0+255),f,b
 14591  0017E2  C08F  F088         	movff	??_get_fat+1,?_get_fat
 14592  0017E6  C090  F089         	movff	??_get_fat+2,?_get_fat+1
 14593  0017EA  6B8A               	clrf	(?_get_fat+2)& (0+255),b
 14594  0017EC  6B8B               	clrf	(?_get_fat+3)& (0+255),b
 14595                           
 14596                           ; BSR set to: 0
 14597  0017EE  0012               	return	
 14598  0017F0                     
 14599                           ; BSR set to: 0
 14600                           ;ff.c: 516: if (move_window(fs, fs->fatbase + (clst / (512U / 4)))) break;
 14601                           
 14602                           ; BSR set to: 0
 14603  0017F0  C088  F071         	movff	get_fat@fs,move_window@fs
 14604  0017F4  C089  F072         	movff	get_fat@fs+1,move_window@fs+1
 14605  0017F8  EE20 F01E          	lfsr	2,30
 14606  0017FC  5188               	movf	get_fat@fs& (0+255),w,b
 14607  0017FE  26D9               	addwf	fsr2l,f,c
 14608  001800  5189               	movf	(get_fat@fs+1)& (0+255),w,b
 14609  001802  22DA               	addwfc	fsr2h,f,c
 14610  001804  CFDE F08E          	movff	postinc2,??_get_fat
 14611  001808  CFDE F08F          	movff	postinc2,??_get_fat+1
 14612  00180C  CFDE F090          	movff	postinc2,??_get_fat+2
 14613  001810  CFDE F091          	movff	postinc2,??_get_fat+3
 14614  001814  C08A  F092         	movff	get_fat@clst,??_get_fat+4
 14615  001818  C08B  F093         	movff	get_fat@clst+1,??_get_fat+5
 14616  00181C  C08C  F094         	movff	get_fat@clst+2,??_get_fat+6
 14617  001820  C08D  F095         	movff	get_fat@clst+3,??_get_fat+7
 14618  001824  0E08               	movlw	8
 14619  001826  D005               	goto	u14680
 14620  001828                     u14685:
 14621  001828  90D8               	bcf	status,0,c
 14622  00182A  3395               	rrcf	(??_get_fat+7)& (0+255),f,b
 14623  00182C  3394               	rrcf	(??_get_fat+6)& (0+255),f,b
 14624  00182E  3393               	rrcf	(??_get_fat+5)& (0+255),f,b
 14625  001830  3392               	rrcf	(??_get_fat+4)& (0+255),f,b
 14626  001832                     u14680:
 14627  001832  2EE8               	decfsz	wreg,f,c
 14628  001834  D7F9               	goto	u14685
 14629  001836  518E               	movf	??_get_fat& (0+255),w,b
 14630  001838  2592               	addwf	(??_get_fat+4)& (0+255),w,b
 14631  00183A  6F73               	movwf	move_window@sector& (0+255),b
 14632  00183C  518F               	movf	(??_get_fat+1)& (0+255),w,b
 14633  00183E  2193               	addwfc	(??_get_fat+5)& (0+255),w,b
 14634  001840  6F74               	movwf	(move_window@sector+1)& (0+255),b
 14635  001842  5190               	movf	(??_get_fat+2)& (0+255),w,b
 14636  001844  2194               	addwfc	(??_get_fat+6)& (0+255),w,b
 14637  001846  6F75               	movwf	(move_window@sector+2)& (0+255),b
 14638  001848  5191               	movf	(??_get_fat+3)& (0+255),w,b
 14639  00184A  2195               	addwfc	(??_get_fat+7)& (0+255),w,b
 14640  00184C  6F76               	movwf	(move_window@sector+3)& (0+255),b
 14641  00184E  EC69  F016         	call	_move_window	;wreg free
 14642  001852  0900               	iorlw	0
 14643  001854  A4D8               	btfss	status,2,c
 14644  001856  D08F               	goto	l993
 14645                           
 14646                           ;ff.c: 517: p = &fs->win[clst * 4 % 512U];
 14647  001858  0EFF               	movlw	255
 14648  00185A  0100               	movlb	0	; () banked
 14649  00185C  6F8E               	movwf	??_get_fat& (0+255),b
 14650  00185E  0E01               	movlw	1
 14651  001860  6F8F               	movwf	(??_get_fat+1)& (0+255),b
 14652  001862  C08A  F090         	movff	get_fat@clst,??_get_fat+2
 14653  001866  C08B  F091         	movff	get_fat@clst+1,??_get_fat+3
 14654  00186A  90D8               	bcf	status,0,c
 14655  00186C  3790               	rlcf	(??_get_fat+2)& (0+255),f,b
 14656  00186E  3791               	rlcf	(??_get_fat+3)& (0+255),f,b
 14657  001870  90D8               	bcf	status,0,c
 14658  001872  3790               	rlcf	(??_get_fat+2)& (0+255),f,b
 14659  001874  3791               	rlcf	(??_get_fat+3)& (0+255),f,b
 14660  001876  518E               	movf	??_get_fat& (0+255),w,b
 14661  001878  1790               	andwf	(??_get_fat+2)& (0+255),f,b
 14662  00187A  518F               	movf	(??_get_fat+1)& (0+255),w,b
 14663  00187C  1791               	andwf	(??_get_fat+3)& (0+255),f,b
 14664  00187E  0E2E               	movlw	46
 14665  001880  2790               	addwf	(??_get_fat+2)& (0+255),f,b
 14666  001882  0E00               	movlw	0
 14667  001884  2391               	addwfc	(??_get_fat+3)& (0+255),f,b
 14668  001886  5190               	movf	(??_get_fat+2)& (0+255),w,b
 14669  001888  2588               	addwf	get_fat@fs& (0+255),w,b
 14670  00188A  6FAE               	movwf	get_fat@p& (0+255),b
 14671  00188C  5191               	movf	(??_get_fat+3)& (0+255),w,b
 14672  00188E  2189               	addwfc	(get_fat@fs+1)& (0+255),w,b
 14673  001890  6FAF               	movwf	(get_fat@p+1)& (0+255),b
 14674                           
 14675                           ; BSR set to: 0
 14676                           ;ff.c: 518: return (DWORD)(((DWORD)*(BYTE*)((p)+3)<<24)|((DWORD)*(BYTE*)((p)+2)<<16)|((W
      +                          ORD)*(BYTE*)((p)+1)<<8)|*(BYTE*)(p)) & 0x0FFFFFFF;
 14677  001892  EE20 F001          	lfsr	2,1
 14678  001896  51AE               	movf	get_fat@p& (0+255),w,b
 14679  001898  26D9               	addwf	fsr2l,f,c
 14680  00189A  51AF               	movf	(get_fat@p+1)& (0+255),w,b
 14681  00189C  22DA               	addwfc	fsr2h,f,c
 14682  00189E  50DF               	movf	indf2,w,c
 14683  0018A0  6F8E               	movwf	??_get_fat& (0+255),b
 14684  0018A2  518E               	movf	??_get_fat& (0+255),w,b
 14685  0018A4  6F90               	movwf	(??_get_fat+2)& (0+255),b
 14686  0018A6  6B8F               	clrf	(??_get_fat+1)& (0+255),b
 14687  0018A8  EE20 F002          	lfsr	2,2
 14688  0018AC  51AE               	movf	get_fat@p& (0+255),w,b
 14689  0018AE  26D9               	addwf	fsr2l,f,c
 14690  0018B0  51AF               	movf	(get_fat@p+1)& (0+255),w,b
 14691  0018B2  22DA               	addwfc	fsr2h,f,c
 14692  0018B4  50DF               	movf	indf2,w,c
 14693  0018B6  6F91               	movwf	(??_get_fat+3)& (0+255),b
 14694  0018B8  C091  F092         	movff	??_get_fat+3,??_get_fat+4
 14695  0018BC  6B93               	clrf	(??_get_fat+5)& (0+255),b
 14696  0018BE  6B94               	clrf	(??_get_fat+6)& (0+255),b
 14697  0018C0  6B95               	clrf	(??_get_fat+7)& (0+255),b
 14698  0018C2  C093  F095         	movff	??_get_fat+5,??_get_fat+7
 14699  0018C6  C092  F094         	movff	??_get_fat+4,??_get_fat+6
 14700  0018CA  6B93               	clrf	(??_get_fat+5)& (0+255),b
 14701  0018CC  6B92               	clrf	(??_get_fat+4)& (0+255),b
 14702  0018CE  EE20 F003          	lfsr	2,3
 14703  0018D2  51AE               	movf	get_fat@p& (0+255),w,b
 14704  0018D4  26D9               	addwf	fsr2l,f,c
 14705  0018D6  51AF               	movf	(get_fat@p+1)& (0+255),w,b
 14706  0018D8  22DA               	addwfc	fsr2h,f,c
 14707  0018DA  50DF               	movf	indf2,w,c
 14708  0018DC  6F96               	movwf	(??_get_fat+8)& (0+255),b
 14709  0018DE  C096  F097         	movff	??_get_fat+8,??_get_fat+9
 14710  0018E2  6B98               	clrf	(??_get_fat+10)& (0+255),b
 14711  0018E4  6B99               	clrf	(??_get_fat+11)& (0+255),b
 14712  0018E6  6B9A               	clrf	(??_get_fat+12)& (0+255),b
 14713  0018E8  C097  F09A         	movff	??_get_fat+9,??_get_fat+12
 14714  0018EC  6B99               	clrf	(??_get_fat+11)& (0+255),b
 14715  0018EE  6B98               	clrf	(??_get_fat+10)& (0+255),b
 14716  0018F0  6B97               	clrf	(??_get_fat+9)& (0+255),b
 14717  0018F2  5192               	movf	(??_get_fat+4)& (0+255),w,b
 14718  0018F4  1197               	iorwf	(??_get_fat+9)& (0+255),w,b
 14719  0018F6  6F9B               	movwf	(??_get_fat+13)& (0+255),b
 14720  0018F8  5193               	movf	(??_get_fat+5)& (0+255),w,b
 14721  0018FA  1198               	iorwf	(??_get_fat+10)& (0+255),w,b
 14722  0018FC  6F9C               	movwf	(??_get_fat+14)& (0+255),b
 14723  0018FE  5194               	movf	(??_get_fat+6)& (0+255),w,b
 14724  001900  1199               	iorwf	(??_get_fat+11)& (0+255),w,b
 14725  001902  6F9D               	movwf	(??_get_fat+15)& (0+255),b
 14726  001904  5195               	movf	(??_get_fat+7)& (0+255),w,b
 14727  001906  119A               	iorwf	(??_get_fat+12)& (0+255),w,b
 14728  001908  6F9E               	movwf	(??_get_fat+16)& (0+255),b
 14729  00190A  518F               	movf	(??_get_fat+1)& (0+255),w,b
 14730  00190C  119B               	iorwf	(??_get_fat+13)& (0+255),w,b
 14731  00190E  6F9F               	movwf	(??_get_fat+17)& (0+255),b
 14732  001910  5190               	movf	(??_get_fat+2)& (0+255),w,b
 14733  001912  119C               	iorwf	(??_get_fat+14)& (0+255),w,b
 14734  001914  6FA0               	movwf	(??_get_fat+18)& (0+255),b
 14735  001916  0E00               	movlw	0
 14736  001918  119D               	iorwf	(??_get_fat+15)& (0+255),w,b
 14737  00191A  6FA1               	movwf	(??_get_fat+19)& (0+255),b
 14738  00191C  0E00               	movlw	0
 14739  00191E  119E               	iorwf	(??_get_fat+16)& (0+255),w,b
 14740  001920  6FA2               	movwf	(??_get_fat+20)& (0+255),b
 14741  001922  C0AE  FFD9         	movff	get_fat@p,fsr2l
 14742  001926  C0AF  FFDA         	movff	get_fat@p+1,fsr2h
 14743  00192A  50DF               	movf	indf2,w,c
 14744  00192C  6FA3               	movwf	(??_get_fat+21)& (0+255),b
 14745  00192E  51A3               	movf	(??_get_fat+21)& (0+255),w,b
 14746  001930  119F               	iorwf	(??_get_fat+17)& (0+255),w,b
 14747  001932  6FA4               	movwf	(??_get_fat+22)& (0+255),b
 14748  001934  51A0               	movf	(??_get_fat+18)& (0+255),w,b
 14749  001936  6FA5               	movwf	(??_get_fat+23)& (0+255),b
 14750  001938  51A1               	movf	(??_get_fat+19)& (0+255),w,b
 14751  00193A  6FA6               	movwf	(??_get_fat+24)& (0+255),b
 14752  00193C  51A2               	movf	(??_get_fat+20)& (0+255),w,b
 14753  00193E  6FA7               	movwf	(??_get_fat+25)& (0+255),b
 14754  001940  0EFF               	movlw	255
 14755  001942  15A4               	andwf	(??_get_fat+22)& (0+255),w,b
 14756  001944  6F88               	movwf	?_get_fat& (0+255),b
 14757  001946  0EFF               	movlw	255
 14758  001948  15A5               	andwf	(??_get_fat+23)& (0+255),w,b
 14759  00194A  6F89               	movwf	(?_get_fat+1)& (0+255),b
 14760  00194C  0EFF               	movlw	255
 14761  00194E  15A6               	andwf	(??_get_fat+24)& (0+255),w,b
 14762  001950  6F8A               	movwf	(?_get_fat+2)& (0+255),b
 14763  001952  0E0F               	movlw	15
 14764  001954  15A7               	andwf	(??_get_fat+25)& (0+255),w,b
 14765  001956  6F8B               	movwf	(?_get_fat+3)& (0+255),b
 14766                           
 14767                           ; BSR set to: 0
 14768  001958  0012               	return	
 14769  00195A                     l990:
 14770                           
 14771                           ; BSR set to: 0
 14772                           
 14773                           ; BSR set to: 0
 14774  00195A  C088  FFD9         	movff	get_fat@fs,fsr2l
 14775  00195E  C089  FFDA         	movff	get_fat@fs+1,fsr2h
 14776  001962  50DF               	movf	indf2,w,c
 14777                           
 14778                           ; Switch size 1, requested type "space"
 14779                           ; Number of cases is 3, Range of values is 1 to 3
 14780                           ; switch strategies available:
 14781                           ; Name         Instructions Cycles
 14782                           ; simple_byte           10     6 (average)
 14783                           ;	Chosen strategy is simple_byte
 14784  001964  0A01               	xorlw	1	; case 1
 14785  001966  B4D8               	btfsc	status,2,c
 14786  001968  D615               	goto	l991
 14787  00196A  0A03               	xorlw	3	; case 2
 14788  00196C  B4D8               	btfsc	status,2,c
 14789  00196E  D6D8               	goto	l999
 14790  001970  0A01               	xorlw	1	; case 3
 14791  001972  B4D8               	btfsc	status,2,c
 14792  001974  D73D               	goto	l1001
 14793  001976                     l993:
 14794                           
 14795                           ;ff.c: 521: return 0xFFFFFFFF;
 14796  001976  0100               	movlb	0	; () banked
 14797  001978  6988               	setf	?_get_fat& (0+255),b
 14798  00197A  6989               	setf	(?_get_fat+1)& (0+255),b
 14799  00197C  698A               	setf	(?_get_fat+2)& (0+255),b
 14800  00197E  698B               	setf	(?_get_fat+3)& (0+255),b
 14801                           
 14802                           ; BSR set to: 0
 14803  001980  0012               	return		;funcret
 14804  001982                     __end_of_get_fat:
 14805                           	opt stack 0
 14806                           tosu	equ	0xFFF
 14807                           tosh	equ	0xFFE
 14808                           tosl	equ	0xFFD
 14809                           pclath	equ	0xFFA
 14810                           tblptru	equ	0xFF8
 14811                           tblptrh	equ	0xFF7
 14812                           tblptrl	equ	0xFF6
 14813                           tablat	equ	0xFF5
 14814                           prodh	equ	0xFF4
 14815                           prodl	equ	0xFF3
 14816                           intcon	equ	0xFF2
 14817                           intcon2	equ	0xFF1
 14818                           intcon3	equ	0xFF0
 14819                           indf0	equ	0xFEF
 14820                           postinc0	equ	0xFEE
 14821                           fsr0h	equ	0xFEA
 14822                           fsr0l	equ	0xFE9
 14823                           wreg	equ	0xFE8
 14824                           indf1	equ	0xFE7
 14825                           postinc1	equ	0xFE6
 14826                           postdec1	equ	0xFE5
 14827                           fsr1h	equ	0xFE2
 14828                           fsr1l	equ	0xFE1
 14829                           indf2	equ	0xFDF
 14830                           postinc2	equ	0xFDE
 14831                           postdec2	equ	0xFDD
 14832                           plusw2	equ	0xFDB
 14833                           fsr2h	equ	0xFDA
 14834                           fsr2l	equ	0xFD9
 14835                           status	equ	0xFD8
 14836                           
 14837 ;; *************** function _clust2sect *****************
 14838 ;; Defined at:
 14839 ;;		line 694 in file "bibliotecas/ff.c"
 14840 ;; Parameters:    Size  Location     Type
 14841 ;;  fs              2   37[COMRAM] PTR struct .
 14842 ;;		 -> NULL(0), 
 14843 ;;  clst            4   39[COMRAM] unsigned long 
 14844 ;; Auto vars:     Size  Location     Type
 14845 ;;		None
 14846 ;; Return value:  Size  Location     Type
 14847 ;;                  4   37[COMRAM] unsigned long 
 14848 ;; Registers used:
 14849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14850 ;; Tracked objects:
 14851 ;;		On entry : 0/0
 14852 ;;		On exit  : 0/0
 14853 ;;		Unchanged: 0/0
 14854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14855 ;;      Params:         6       0       0       0       0       0       0       0       0
 14856 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14857 ;;      Temps:          0       5       0       0       0       0       0       0       0
 14858 ;;      Totals:         6       5       0       0       0       0       0       0       0
 14859 ;;Total ram usage:       11 bytes
 14860 ;; Hardware stack levels used:    1
 14861 ;; Hardware stack levels required when called:    3
 14862 ;; This function calls:
 14863 ;;		___lmul
 14864 ;; This function is called by:
 14865 ;;		_f_write
 14866 ;;		_dir_sdi
 14867 ;;		_dir_next
 14868 ;;		_f_read
 14869 ;;		_f_lseek
 14870 ;; This function uses a non-reentrant model
 14871 ;;
 14872                           
 14873                           	psect	text54
 14874  0040CC                     __ptext54:
 14875                           	opt stack 0
 14876  0040CC                     _clust2sect:
 14877                           	opt stack 24
 14878                           
 14879                           ;ff.c: 699: clst -= 2;
 14880                           
 14881                           ; BSR set to: 0
 14882                           ;incstack = 0
 14883  0040CC  0E02               	movlw	2
 14884  0040CE  5E28               	subwf	clust2sect@clst,f,c
 14885  0040D0  0E00               	movlw	0
 14886  0040D2  5A29               	subwfb	clust2sect@clst+1,f,c
 14887  0040D4  5A2A               	subwfb	clust2sect@clst+2,f,c
 14888  0040D6  5A2B               	subwfb	clust2sect@clst+3,f,c
 14889                           
 14890                           ;ff.c: 700: if (clst >= (fs->n_fatent - 2)) return 0;
 14891  0040D8  EE20 F016          	lfsr	2,22
 14892  0040DC  5026               	movf	clust2sect@fs,w,c
 14893  0040DE  26D9               	addwf	fsr2l,f,c
 14894  0040E0  5027               	movf	clust2sect@fs+1,w,c
 14895  0040E2  22DA               	addwfc	fsr2h,f,c
 14896  0040E4  0EFE               	movlw	254
 14897  0040E6  24DE               	addwf	postinc2,w,c
 14898  0040E8  0100               	movlb	0	; () banked
 14899  0040EA  6F60               	movwf	??_clust2sect& (0+255),b
 14900  0040EC  0EFF               	movlw	255
 14901  0040EE  20DE               	addwfc	postinc2,w,c
 14902  0040F0  6F61               	movwf	(??_clust2sect+1)& (0+255),b
 14903  0040F2  0EFF               	movlw	255
 14904  0040F4  20DE               	addwfc	postinc2,w,c
 14905  0040F6  6F62               	movwf	(??_clust2sect+2)& (0+255),b
 14906  0040F8  0EFF               	movlw	255
 14907  0040FA  20DE               	addwfc	postinc2,w,c
 14908  0040FC  6F63               	movwf	(??_clust2sect+3)& (0+255),b
 14909  0040FE  5160               	movf	??_clust2sect& (0+255),w,b
 14910  004100  5C28               	subwf	clust2sect@clst,w,c
 14911  004102  5161               	movf	(??_clust2sect+1)& (0+255),w,b
 14912  004104  5829               	subwfb	clust2sect@clst+1,w,c
 14913  004106  5162               	movf	(??_clust2sect+2)& (0+255),w,b
 14914  004108  582A               	subwfb	clust2sect@clst+2,w,c
 14915  00410A  5163               	movf	(??_clust2sect+3)& (0+255),w,b
 14916  00410C  582B               	subwfb	clust2sect@clst+3,w,c
 14917  00410E  A0D8               	btfss	status,0,c
 14918  004110  D009               	goto	l1068
 14919                           
 14920                           ; BSR set to: 0
 14921  004112  0E00               	movlw	0
 14922  004114  6E26               	movwf	?_clust2sect,c
 14923  004116  0E00               	movlw	0
 14924  004118  6E27               	movwf	?_clust2sect+1,c
 14925  00411A  0E00               	movlw	0
 14926  00411C  6E28               	movwf	?_clust2sect+2,c
 14927  00411E  0E00               	movlw	0
 14928  004120  6E29               	movwf	?_clust2sect+3,c
 14929                           
 14930                           ; BSR set to: 0
 14931  004122  0012               	return	
 14932  004124                     l1068:
 14933                           
 14934                           ; BSR set to: 0
 14935                           ;ff.c: 701: return clst * fs->csize + fs->database;
 14936                           
 14937                           ; BSR set to: 0
 14938  004124  EE20 F026          	lfsr	2,38
 14939  004128  5026               	movf	clust2sect@fs,w,c
 14940  00412A  26D9               	addwf	fsr2l,f,c
 14941  00412C  5027               	movf	clust2sect@fs+1,w,c
 14942  00412E  22DA               	addwfc	fsr2h,f,c
 14943  004130  CFDE F060          	movff	postinc2,??_clust2sect
 14944  004134  CFDE F061          	movff	postinc2,??_clust2sect+1
 14945  004138  CFDE F062          	movff	postinc2,??_clust2sect+2
 14946  00413C  CFDE F063          	movff	postinc2,??_clust2sect+3
 14947  004140  EE20 F002          	lfsr	2,2
 14948  004144  5026               	movf	clust2sect@fs,w,c
 14949  004146  26D9               	addwf	fsr2l,f,c
 14950  004148  5027               	movf	clust2sect@fs+1,w,c
 14951  00414A  22DA               	addwfc	fsr2h,f,c
 14952  00414C  50DF               	movf	indf2,w,c
 14953  00414E  6F64               	movwf	(??_clust2sect+4)& (0+255),b
 14954  004150  5164               	movf	(??_clust2sect+4)& (0+255),w,b
 14955  004152  6E1A               	movwf	___lmul@multiplier,c
 14956  004154  6A1B               	clrf	___lmul@multiplier+1,c
 14957  004156  6A1C               	clrf	___lmul@multiplier+2,c
 14958  004158  6A1D               	clrf	___lmul@multiplier+3,c
 14959  00415A  C028  F01E         	movff	clust2sect@clst,___lmul@multiplicand
 14960  00415E  C029  F01F         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 14961  004162  C02A  F020         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 14962  004166  C02B  F021         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 14963  00416A  EC2B  F026         	call	___lmul	;wreg free
 14964  00416E  0100               	movlb	0	; () banked
 14965  004170  5160               	movf	??_clust2sect& (0+255),w,b
 14966  004172  241A               	addwf	?___lmul,w,c
 14967  004174  6E26               	movwf	?_clust2sect,c
 14968  004176  5161               	movf	(??_clust2sect+1)& (0+255),w,b
 14969  004178  201B               	addwfc	?___lmul+1,w,c
 14970  00417A  6E27               	movwf	?_clust2sect+1,c
 14971  00417C  5162               	movf	(??_clust2sect+2)& (0+255),w,b
 14972  00417E  201C               	addwfc	?___lmul+2,w,c
 14973  004180  6E28               	movwf	?_clust2sect+2,c
 14974  004182  5163               	movf	(??_clust2sect+3)& (0+255),w,b
 14975  004184  201D               	addwfc	?___lmul+3,w,c
 14976  004186  6E29               	movwf	?_clust2sect+3,c
 14977  004188  0012               	return	
 14978  00418A                     __end_of_clust2sect:
 14979                           	opt stack 0
 14980                           tosu	equ	0xFFF
 14981                           tosh	equ	0xFFE
 14982                           tosl	equ	0xFFD
 14983                           pclath	equ	0xFFA
 14984                           tblptru	equ	0xFF8
 14985                           tblptrh	equ	0xFF7
 14986                           tblptrl	equ	0xFF6
 14987                           tablat	equ	0xFF5
 14988                           prodh	equ	0xFF4
 14989                           prodl	equ	0xFF3
 14990                           intcon	equ	0xFF2
 14991                           intcon2	equ	0xFF1
 14992                           intcon3	equ	0xFF0
 14993                           indf0	equ	0xFEF
 14994                           postinc0	equ	0xFEE
 14995                           fsr0h	equ	0xFEA
 14996                           fsr0l	equ	0xFE9
 14997                           wreg	equ	0xFE8
 14998                           indf1	equ	0xFE7
 14999                           postinc1	equ	0xFE6
 15000                           postdec1	equ	0xFE5
 15001                           fsr1h	equ	0xFE2
 15002                           fsr1l	equ	0xFE1
 15003                           indf2	equ	0xFDF
 15004                           postinc2	equ	0xFDE
 15005                           postdec2	equ	0xFDD
 15006                           plusw2	equ	0xFDB
 15007                           fsr2h	equ	0xFDA
 15008                           fsr2l	equ	0xFD9
 15009                           status	equ	0xFD8
 15010                           
 15011 ;; *************** function ___lmul *****************
 15012 ;; Defined at:
 15013 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 15014 ;; Parameters:    Size  Location     Type
 15015 ;;  multiplier      4   25[COMRAM] unsigned long 
 15016 ;;  multiplicand    4   29[COMRAM] unsigned long 
 15017 ;; Auto vars:     Size  Location     Type
 15018 ;;  product         4   33[COMRAM] unsigned long 
 15019 ;; Return value:  Size  Location     Type
 15020 ;;                  4   25[COMRAM] unsigned long 
 15021 ;; Registers used:
 15022 ;;		wreg, status,2, status,0
 15023 ;; Tracked objects:
 15024 ;;		On entry : 0/0
 15025 ;;		On exit  : 0/0
 15026 ;;		Unchanged: 0/0
 15027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15028 ;;      Params:         8       0       0       0       0       0       0       0       0
 15029 ;;      Locals:         4       0       0       0       0       0       0       0       0
 15030 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15031 ;;      Totals:        12       0       0       0       0       0       0       0       0
 15032 ;;Total ram usage:       12 bytes
 15033 ;; Hardware stack levels used:    1
 15034 ;; Hardware stack levels required when called:    2
 15035 ;; This function calls:
 15036 ;;		Nothing
 15037 ;; This function is called by:
 15038 ;;		_clust2sect
 15039 ;;		_strtod
 15040 ;;		_atol
 15041 ;;		_chk_mounted
 15042 ;; This function uses a non-reentrant model
 15043 ;;
 15044                           
 15045                           	psect	text55
 15046  004C56                     __ptext55:
 15047                           	opt stack 0
 15048  004C56                     ___lmul:
 15049                           	opt stack 23
 15050                           
 15051                           ; BSR set to: 0
 15052                           ;incstack = 0
 15053  004C56  0E00               	movlw	0
 15054  004C58  6E22               	movwf	___lmul@product,c
 15055  004C5A  0E00               	movlw	0
 15056  004C5C  6E23               	movwf	___lmul@product+1,c
 15057  004C5E  0E00               	movlw	0
 15058  004C60  6E24               	movwf	___lmul@product+2,c
 15059  004C62  0E00               	movlw	0
 15060  004C64  6E25               	movwf	___lmul@product+3,c
 15061  004C66  A01A               	btfss	___lmul@multiplier,0,c
 15062  004C68  D008               	goto	l1533
 15063  004C6A  501E               	movf	___lmul@multiplicand,w,c
 15064  004C6C  2622               	addwf	___lmul@product,f,c
 15065  004C6E  501F               	movf	___lmul@multiplicand+1,w,c
 15066  004C70  2223               	addwfc	___lmul@product+1,f,c
 15067  004C72  5020               	movf	___lmul@multiplicand+2,w,c
 15068  004C74  2224               	addwfc	___lmul@product+2,f,c
 15069  004C76  5021               	movf	___lmul@multiplicand+3,w,c
 15070  004C78  2225               	addwfc	___lmul@product+3,f,c
 15071  004C7A                     l1533:
 15072  004C7A  90D8               	bcf	status,0,c
 15073  004C7C  361E               	rlcf	___lmul@multiplicand,f,c
 15074  004C7E  361F               	rlcf	___lmul@multiplicand+1,f,c
 15075  004C80  3620               	rlcf	___lmul@multiplicand+2,f,c
 15076  004C82  3621               	rlcf	___lmul@multiplicand+3,f,c
 15077  004C84  90D8               	bcf	status,0,c
 15078  004C86  321D               	rrcf	___lmul@multiplier+3,f,c
 15079  004C88  321C               	rrcf	___lmul@multiplier+2,f,c
 15080  004C8A  321B               	rrcf	___lmul@multiplier+1,f,c
 15081  004C8C  321A               	rrcf	___lmul@multiplier,f,c
 15082  004C8E  501A               	movf	___lmul@multiplier,w,c
 15083  004C90  101B               	iorwf	___lmul@multiplier+1,w,c
 15084  004C92  101C               	iorwf	___lmul@multiplier+2,w,c
 15085  004C94  101D               	iorwf	___lmul@multiplier+3,w,c
 15086  004C96  A4D8               	btfss	status,2,c
 15087  004C98  D7E6               	goto	l1532
 15088  004C9A  C022  F01A         	movff	___lmul@product,?___lmul
 15089  004C9E  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 15090  004CA2  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 15091  004CA6  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 15092  004CAA  0012               	return		;funcret
 15093  004CAC                     __end_of___lmul:
 15094                           	opt stack 0
 15095                           tosu	equ	0xFFF
 15096                           tosh	equ	0xFFE
 15097                           tosl	equ	0xFFD
 15098                           pclath	equ	0xFFA
 15099                           tblptru	equ	0xFF8
 15100                           tblptrh	equ	0xFF7
 15101                           tblptrl	equ	0xFF6
 15102                           tablat	equ	0xFF5
 15103                           prodh	equ	0xFF4
 15104                           prodl	equ	0xFF3
 15105                           intcon	equ	0xFF2
 15106                           intcon2	equ	0xFF1
 15107                           intcon3	equ	0xFF0
 15108                           indf0	equ	0xFEF
 15109                           postinc0	equ	0xFEE
 15110                           fsr0h	equ	0xFEA
 15111                           fsr0l	equ	0xFE9
 15112                           wreg	equ	0xFE8
 15113                           indf1	equ	0xFE7
 15114                           postinc1	equ	0xFE6
 15115                           postdec1	equ	0xFE5
 15116                           fsr1h	equ	0xFE2
 15117                           fsr1l	equ	0xFE1
 15118                           indf2	equ	0xFDF
 15119                           postinc2	equ	0xFDE
 15120                           postdec2	equ	0xFDD
 15121                           plusw2	equ	0xFDB
 15122                           fsr2h	equ	0xFDA
 15123                           fsr2l	equ	0xFD9
 15124                           status	equ	0xFD8
 15125                           
 15126 ;; *************** function _f_mount *****************
 15127 ;; Defined at:
 15128 ;;		line 1849 in file "bibliotecas/ff.c"
 15129 ;; Parameters:    Size  Location     Type
 15130 ;;  vol             1    wreg     unsigned char 
 15131 ;;  fs              2   25[COMRAM] PTR struct .
 15132 ;;		 -> fs(558), 
 15133 ;; Auto vars:     Size  Location     Type
 15134 ;;  vol             1   29[COMRAM] unsigned char 
 15135 ;;  rfs             2   27[COMRAM] PTR struct .
 15136 ;;		 -> fs(558), 
 15137 ;; Return value:  Size  Location     Type
 15138 ;;                  1    wreg      enum E3953
 15139 ;; Registers used:
 15140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15141 ;; Tracked objects:
 15142 ;;		On entry : 0/0
 15143 ;;		On exit  : 0/0
 15144 ;;		Unchanged: 0/0
 15145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15146 ;;      Params:         2       0       0       0       0       0       0       0       0
 15147 ;;      Locals:         3       0       0       0       0       0       0       0       0
 15148 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15149 ;;      Totals:         5       0       0       0       0       0       0       0       0
 15150 ;;Total ram usage:        5 bytes
 15151 ;; Hardware stack levels used:    1
 15152 ;; Hardware stack levels required when called:    2
 15153 ;; This function calls:
 15154 ;;		Nothing
 15155 ;; This function is called by:
 15156 ;;		_SDCard
 15157 ;; This function uses a non-reentrant model
 15158 ;;
 15159                           
 15160                           	psect	text56
 15161  004A7A                     __ptext56:
 15162                           	opt stack 0
 15163  004A7A                     _f_mount:
 15164                           	opt stack 26
 15165                           
 15166                           ;incstack = 0
 15167                           ;f_mount@vol stored from wreg
 15168  004A7A  6E1E               	movwf	f_mount@vol,c
 15169                           
 15170                           ;ff.c: 1854: FATFS *rfs;
 15171                           ;ff.c: 1857: if (vol >= 1)
 15172  004A7C  501E               	movf	f_mount@vol,w,c
 15173  004A7E  B4D8               	btfsc	status,2,c
 15174  004A80  D002               	goto	l1276
 15175                           
 15176                           ;ff.c: 1858: return FR_INVALID_DRIVE;
 15177  004A82  0E0B               	movlw	11
 15178  004A84  0012               	return	
 15179  004A86                     l1276:
 15180                           
 15181                           ;ff.c: 1859: rfs = FatFs[vol];
 15182  004A86  501E               	movf	f_mount@vol,w,c
 15183  004A88  0D02               	mullw	2
 15184  004A8A  0E34               	movlw	low _FatFs
 15185  004A8C  24F3               	addwf	prodl,w,c
 15186  004A8E  6ED9               	movwf	fsr2l,c
 15187  004A90  0E00               	movlw	high _FatFs
 15188  004A92  20F4               	addwfc	prodh,w,c
 15189  004A94  6EDA               	movwf	fsr2h,c
 15190  004A96  CFDE F01C          	movff	postinc2,f_mount@rfs
 15191  004A9A  CFDD F01D          	movff	postdec2,f_mount@rfs+1
 15192                           
 15193                           ;ff.c: 1861: if (rfs) {
 15194  004A9E  501C               	movf	f_mount@rfs,w,c
 15195  004AA0  101D               	iorwf	f_mount@rfs+1,w,c
 15196  004AA2  B4D8               	btfsc	status,2,c
 15197  004AA4  D006               	goto	l1278
 15198                           
 15199                           ;ff.c: 1865: rfs->fs_type = 0;
 15200  004AA6  C01C  FFD9         	movff	f_mount@rfs,fsr2l
 15201  004AAA  C01D  FFDA         	movff	f_mount@rfs+1,fsr2h
 15202  004AAE  0E00               	movlw	0
 15203  004AB0  6EDF               	movwf	indf2,c
 15204  004AB2                     l1278:
 15205                           
 15206                           ;ff.c: 1866: }
 15207                           ;ff.c: 1868: if (fs) {
 15208  004AB2  501A               	movf	f_mount@fs,w,c
 15209  004AB4  101B               	iorwf	f_mount@fs+1,w,c
 15210  004AB6  B4D8               	btfsc	status,2,c
 15211  004AB8  D006               	goto	l1279
 15212                           
 15213                           ;ff.c: 1869: fs->fs_type = 0;
 15214  004ABA  C01A  FFD9         	movff	f_mount@fs,fsr2l
 15215  004ABE  C01B  FFDA         	movff	f_mount@fs+1,fsr2h
 15216  004AC2  0E00               	movlw	0
 15217  004AC4  6EDF               	movwf	indf2,c
 15218  004AC6                     l1279:
 15219                           
 15220                           ;ff.c: 1873: }
 15221                           ;ff.c: 1874: FatFs[vol] = fs;
 15222  004AC6  501E               	movf	f_mount@vol,w,c
 15223  004AC8  0D02               	mullw	2
 15224  004ACA  0E34               	movlw	low _FatFs
 15225  004ACC  24F3               	addwf	prodl,w,c
 15226  004ACE  6ED9               	movwf	fsr2l,c
 15227  004AD0  0E00               	movlw	high _FatFs
 15228  004AD2  20F4               	addwfc	prodh,w,c
 15229  004AD4  6EDA               	movwf	fsr2h,c
 15230  004AD6  C01A  FFDE         	movff	f_mount@fs,postinc2
 15231  004ADA  C01B  FFDD         	movff	f_mount@fs+1,postdec2
 15232                           
 15233                           ;ff.c: 1876: return FR_OK;
 15234  004ADE  0E00               	movlw	0
 15235  004AE0  0012               	return	
 15236  004AE2                     __end_of_f_mount:
 15237                           	opt stack 0
 15238                           tosu	equ	0xFFF
 15239                           tosh	equ	0xFFE
 15240                           tosl	equ	0xFFD
 15241                           pclath	equ	0xFFA
 15242                           tblptru	equ	0xFF8
 15243                           tblptrh	equ	0xFF7
 15244                           tblptrl	equ	0xFF6
 15245                           tablat	equ	0xFF5
 15246                           prodh	equ	0xFF4
 15247                           prodl	equ	0xFF3
 15248                           intcon	equ	0xFF2
 15249                           intcon2	equ	0xFF1
 15250                           intcon3	equ	0xFF0
 15251                           indf0	equ	0xFEF
 15252                           postinc0	equ	0xFEE
 15253                           fsr0h	equ	0xFEA
 15254                           fsr0l	equ	0xFE9
 15255                           wreg	equ	0xFE8
 15256                           indf1	equ	0xFE7
 15257                           postinc1	equ	0xFE6
 15258                           postdec1	equ	0xFE5
 15259                           fsr1h	equ	0xFE2
 15260                           fsr1l	equ	0xFE1
 15261                           indf2	equ	0xFDF
 15262                           postinc2	equ	0xFDE
 15263                           postdec2	equ	0xFDD
 15264                           plusw2	equ	0xFDB
 15265                           fsr2h	equ	0xFDA
 15266                           fsr2l	equ	0xFD9
 15267                           status	equ	0xFD8
 15268                           
 15269 ;; *************** function _f_close *****************
 15270 ;; Defined at:
 15271 ;;		line 2287 in file "bibliotecas/ff.c"
 15272 ;; Parameters:    Size  Location     Type
 15273 ;;  fp              2   60[BANK0 ] PTR struct .
 15274 ;;		 -> SDCard@fil(32), 
 15275 ;; Auto vars:     Size  Location     Type
 15276 ;;  res             1   62[BANK0 ] enum E72
 15277 ;; Return value:  Size  Location     Type
 15278 ;;                  1    wreg      enum E3953
 15279 ;; Registers used:
 15280 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15281 ;; Tracked objects:
 15282 ;;		On entry : 0/0
 15283 ;;		On exit  : 0/0
 15284 ;;		Unchanged: 0/0
 15285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15286 ;;      Params:         0       2       0       0       0       0       0       0       0
 15287 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15288 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15289 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15290 ;;Total ram usage:        3 bytes
 15291 ;; Hardware stack levels used:    1
 15292 ;; Hardware stack levels required when called:   10
 15293 ;; This function calls:
 15294 ;;		_f_sync
 15295 ;; This function is called by:
 15296 ;;		_SDCard
 15297 ;; This function uses a non-reentrant model
 15298 ;;
 15299                           
 15300                           	psect	text57
 15301  0050D8                     __ptext57:
 15302                           	opt stack 0
 15303  0050D8                     _f_close:
 15304                           	opt stack 18
 15305                           
 15306                           ;ff.c: 2291: FRESULT res;
 15307                           ;ff.c: 2300: res = f_sync(fp);
 15308                           
 15309                           ;incstack = 0
 15310  0050D8  C09C  F08F         	movff	f_close@fp,f_sync@fp
 15311  0050DC  C09D  F090         	movff	f_close@fp+1,f_sync@fp+1
 15312  0050E0  ECD7  F013         	call	_f_sync	;wreg free
 15313  0050E4  0100               	movlb	0	; () banked
 15314  0050E6  6F9E               	movwf	f_close@res& (0+255),b
 15315                           
 15316                           ; BSR set to: 0
 15317                           ;ff.c: 2314: if (res == FR_OK) fp->fs = 0;
 15318  0050E8  519E               	movf	f_close@res& (0+255),w,b
 15319  0050EA  A4D8               	btfss	status,2,c
 15320  0050EC  0012               	return	
 15321                           
 15322                           ; BSR set to: 0
 15323  0050EE  C09C  FFD9         	movff	f_close@fp,fsr2l
 15324  0050F2  C09D  FFDA         	movff	f_close@fp+1,fsr2h
 15325  0050F6  0E00               	movlw	0
 15326  0050F8  6EDE               	movwf	postinc2,c
 15327  0050FA  0E00               	movlw	0
 15328  0050FC  6EDD               	movwf	postdec2,c
 15329                           
 15330                           ; BSR set to: 0
 15331  0050FE  0012               	return	
 15332  005100                     __end_of_f_close:
 15333                           	opt stack 0
 15334                           tosu	equ	0xFFF
 15335                           tosh	equ	0xFFE
 15336                           tosl	equ	0xFFD
 15337                           pclath	equ	0xFFA
 15338                           tblptru	equ	0xFF8
 15339                           tblptrh	equ	0xFF7
 15340                           tblptrl	equ	0xFF6
 15341                           tablat	equ	0xFF5
 15342                           prodh	equ	0xFF4
 15343                           prodl	equ	0xFF3
 15344                           intcon	equ	0xFF2
 15345                           intcon2	equ	0xFF1
 15346                           intcon3	equ	0xFF0
 15347                           indf0	equ	0xFEF
 15348                           postinc0	equ	0xFEE
 15349                           fsr0h	equ	0xFEA
 15350                           fsr0l	equ	0xFE9
 15351                           wreg	equ	0xFE8
 15352                           indf1	equ	0xFE7
 15353                           postinc1	equ	0xFE6
 15354                           postdec1	equ	0xFE5
 15355                           fsr1h	equ	0xFE2
 15356                           fsr1l	equ	0xFE1
 15357                           indf2	equ	0xFDF
 15358                           postinc2	equ	0xFDE
 15359                           postdec2	equ	0xFDD
 15360                           plusw2	equ	0xFDB
 15361                           fsr2h	equ	0xFDA
 15362                           fsr2l	equ	0xFD9
 15363                           status	equ	0xFD8
 15364                           
 15365 ;; *************** function _f_sync *****************
 15366 ;; Defined at:
 15367 ;;		line 2239 in file "bibliotecas/ff.c"
 15368 ;; Parameters:    Size  Location     Type
 15369 ;;  fp              2   47[BANK0 ] PTR struct .
 15370 ;;		 -> SDCard@fil(32), 
 15371 ;; Auto vars:     Size  Location     Type
 15372 ;;  tim             4   54[BANK0 ] unsigned long 
 15373 ;;  dir             2   58[BANK0 ] PTR unsigned char 
 15374 ;;		 -> NULL(0), 
 15375 ;;  res             1   53[BANK0 ] enum E72
 15376 ;; Return value:  Size  Location     Type
 15377 ;;                  1    wreg      enum E72
 15378 ;; Registers used:
 15379 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15380 ;; Tracked objects:
 15381 ;;		On entry : 0/0
 15382 ;;		On exit  : 0/0
 15383 ;;		Unchanged: 0/0
 15384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15385 ;;      Params:         0       2       0       0       0       0       0       0       0
 15386 ;;      Locals:         0       7       0       0       0       0       0       0       0
 15387 ;;      Temps:          0       4       0       0       0       0       0       0       0
 15388 ;;      Totals:         0      13       0       0       0       0       0       0       0
 15389 ;;Total ram usage:       13 bytes
 15390 ;; Hardware stack levels used:    1
 15391 ;; Hardware stack levels required when called:    9
 15392 ;; This function calls:
 15393 ;;		_get_fattime
 15394 ;;		_move_window
 15395 ;;		_sync
 15396 ;;		_validate
 15397 ;; This function is called by:
 15398 ;;		_f_close
 15399 ;; This function uses a non-reentrant model
 15400 ;;
 15401                           
 15402                           	psect	text58
 15403  0027AE                     __ptext58:
 15404                           	opt stack 0
 15405  0027AE                     _f_sync:
 15406                           	opt stack 18
 15407                           
 15408                           ;ff.c: 2243: FRESULT res;
 15409                           ;ff.c: 2244: DWORD tim;
 15410                           ;ff.c: 2245: BYTE *dir;
 15411                           ;ff.c: 2248: res = validate(fp->fs, fp->id);
 15412                           
 15413                           ; BSR set to: 0
 15414                           ;incstack = 0
 15415  0027AE  C08F  FFD9         	movff	f_sync@fp,fsr2l
 15416  0027B2  C090  FFDA         	movff	f_sync@fp+1,fsr2h
 15417  0027B6  CFDE F028          	movff	postinc2,validate@fs
 15418  0027BA  CFDD F029          	movff	postdec2,validate@fs+1
 15419  0027BE  0100               	movlb	0	; () banked
 15420  0027C0  EE20 F002          	lfsr	2,2
 15421  0027C4  518F               	movf	f_sync@fp& (0+255),w,b
 15422  0027C6  26D9               	addwf	fsr2l,f,c
 15423  0027C8  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15424  0027CA  22DA               	addwfc	fsr2h,f,c
 15425  0027CC  CFDE F02A          	movff	postinc2,validate@id
 15426  0027D0  CFDD F02B          	movff	postdec2,validate@id+1
 15427  0027D4  EC81  F026         	call	_validate	;wreg free
 15428  0027D8  0100               	movlb	0	; () banked
 15429  0027DA  6F95               	movwf	f_sync@res& (0+255),b
 15430                           
 15431                           ; BSR set to: 0
 15432                           ;ff.c: 2249: if (res == FR_OK) {
 15433  0027DC  5195               	movf	f_sync@res& (0+255),w,b
 15434  0027DE  A4D8               	btfss	status,2,c
 15435  0027E0  D147               	goto	l1367
 15436                           
 15437                           ; BSR set to: 0
 15438                           ;ff.c: 2250: if (fp->flag & 0x20) {
 15439  0027E2  EE20 F004          	lfsr	2,4
 15440  0027E6  518F               	movf	f_sync@fp& (0+255),w,b
 15441  0027E8  26D9               	addwf	fsr2l,f,c
 15442  0027EA  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15443  0027EC  22DA               	addwfc	fsr2h,f,c
 15444  0027EE  AADF               	btfss	indf2,5,c
 15445  0027F0  D13F               	goto	l1367
 15446                           
 15447                           ; BSR set to: 0
 15448                           ;ff.c: 2259: res = move_window(fp->fs, fp->dir_sect);
 15449  0027F2  C08F  FFD9         	movff	f_sync@fp,fsr2l
 15450  0027F6  C090  FFDA         	movff	f_sync@fp+1,fsr2h
 15451  0027FA  CFDE F071          	movff	postinc2,move_window@fs
 15452  0027FE  CFDD F072          	movff	postdec2,move_window@fs+1
 15453  002802  EE20 F01A          	lfsr	2,26
 15454  002806  518F               	movf	f_sync@fp& (0+255),w,b
 15455  002808  26D9               	addwf	fsr2l,f,c
 15456  00280A  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15457  00280C  22DA               	addwfc	fsr2h,f,c
 15458  00280E  CFDE F073          	movff	postinc2,move_window@sector
 15459  002812  CFDE F074          	movff	postinc2,move_window@sector+1
 15460  002816  CFDE F075          	movff	postinc2,move_window@sector+2
 15461  00281A  CFDE F076          	movff	postinc2,move_window@sector+3
 15462  00281E  EC69  F016         	call	_move_window	;wreg free
 15463  002822  0100               	movlb	0	; () banked
 15464  002824  6F95               	movwf	f_sync@res& (0+255),b
 15465                           
 15466                           ; BSR set to: 0
 15467                           ;ff.c: 2260: if (res == FR_OK) {
 15468  002826  5195               	movf	f_sync@res& (0+255),w,b
 15469  002828  A4D8               	btfss	status,2,c
 15470  00282A  D122               	goto	l1367
 15471                           
 15472                           ; BSR set to: 0
 15473                           ;ff.c: 2261: dir = fp->dir_ptr;
 15474  00282C  EE20 F01E          	lfsr	2,30
 15475  002830  518F               	movf	f_sync@fp& (0+255),w,b
 15476  002832  26D9               	addwf	fsr2l,f,c
 15477  002834  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15478  002836  22DA               	addwfc	fsr2h,f,c
 15479  002838  CFDE F09A          	movff	postinc2,f_sync@dir
 15480  00283C  CFDD F09B          	movff	postdec2,f_sync@dir+1
 15481                           
 15482                           ;ff.c: 2262: dir[11] |= 0x20;
 15483  002840  EE20 F00B          	lfsr	2,11
 15484  002844  519A               	movf	f_sync@dir& (0+255),w,b
 15485  002846  26D9               	addwf	fsr2l,f,c
 15486  002848  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15487  00284A  22DA               	addwfc	fsr2h,f,c
 15488  00284C  0E00               	movlw	0
 15489  00284E  8ADB               	bsf	plusw2,5,c
 15490                           
 15491                           ; BSR set to: 0
 15492                           ;ff.c: 2263: *(BYTE*)(dir+28)=(BYTE)(fp->fsize); *(BYTE*)((dir+28)+1)=(BYTE)((WORD)(fp->
      +                          fsize)>>8); *(BYTE*)((dir+28)+2)=(BYTE)((DWORD)(fp->fsize)>>16); *(BYTE*)((dir+28)+3)=(B
      +                          YTE)((DWORD)(fp->fsize)>>24);
 15493  002850  EE20 F00A          	lfsr	2,10
 15494  002854  518F               	movf	f_sync@fp& (0+255),w,b
 15495  002856  26D9               	addwf	fsr2l,f,c
 15496  002858  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15497  00285A  22DA               	addwfc	fsr2h,f,c
 15498  00285C  EE10 F01C          	lfsr	1,28
 15499  002860  519A               	movf	f_sync@dir& (0+255),w,b
 15500  002862  26E1               	addwf	fsr1l,f,c
 15501  002864  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15502  002866  22E2               	addwfc	fsr1h,f,c
 15503  002868  CFDF FFE7          	movff	indf2,indf1
 15504                           
 15505                           ; BSR set to: 0
 15506  00286C  EE20 F01D          	lfsr	2,29
 15507  002870  519A               	movf	f_sync@dir& (0+255),w,b
 15508  002872  26D9               	addwf	fsr2l,f,c
 15509  002874  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15510  002876  22DA               	addwfc	fsr2h,f,c
 15511  002878  EE10 F00A          	lfsr	1,10
 15512  00287C  518F               	movf	f_sync@fp& (0+255),w,b
 15513  00287E  26E1               	addwf	fsr1l,f,c
 15514  002880  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15515  002882  22E2               	addwfc	fsr1h,f,c
 15516  002884  CFE6 F091          	movff	postinc1,??_f_sync
 15517  002888  CFE5 F092          	movff	postdec1,??_f_sync+1
 15518  00288C  C092  F091         	movff	??_f_sync+1,??_f_sync
 15519  002890  6B92               	clrf	(??_f_sync+1)& (0+255),b
 15520  002892  5191               	movf	??_f_sync& (0+255),w,b
 15521  002894  6EDF               	movwf	indf2,c
 15522                           
 15523                           ; BSR set to: 0
 15524  002896  EE20 F01E          	lfsr	2,30
 15525  00289A  519A               	movf	f_sync@dir& (0+255),w,b
 15526  00289C  26D9               	addwf	fsr2l,f,c
 15527  00289E  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15528  0028A0  22DA               	addwfc	fsr2h,f,c
 15529  0028A2  EE10 F00A          	lfsr	1,10
 15530  0028A6  518F               	movf	f_sync@fp& (0+255),w,b
 15531  0028A8  26E1               	addwf	fsr1l,f,c
 15532  0028AA  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15533  0028AC  22E2               	addwfc	fsr1h,f,c
 15534  0028AE  CFE6 F091          	movff	postinc1,??_f_sync
 15535  0028B2  CFE6 F092          	movff	postinc1,??_f_sync+1
 15536  0028B6  CFE6 F093          	movff	postinc1,??_f_sync+2
 15537  0028BA  CFE6 F094          	movff	postinc1,??_f_sync+3
 15538  0028BE  0E11               	movlw	17
 15539  0028C0  D005               	goto	u16070
 15540  0028C2                     u16075:
 15541  0028C2  90D8               	bcf	status,0,c
 15542  0028C4  3394               	rrcf	(??_f_sync+3)& (0+255),f,b
 15543  0028C6  3393               	rrcf	(??_f_sync+2)& (0+255),f,b
 15544  0028C8  3392               	rrcf	(??_f_sync+1)& (0+255),f,b
 15545  0028CA  3391               	rrcf	??_f_sync& (0+255),f,b
 15546  0028CC                     u16070:
 15547  0028CC  2EE8               	decfsz	wreg,f,c
 15548  0028CE  D7F9               	goto	u16075
 15549  0028D0  5191               	movf	??_f_sync& (0+255),w,b
 15550  0028D2  6EDF               	movwf	indf2,c
 15551                           
 15552                           ; BSR set to: 0
 15553  0028D4  EE20 F01F          	lfsr	2,31
 15554  0028D8  519A               	movf	f_sync@dir& (0+255),w,b
 15555  0028DA  26D9               	addwf	fsr2l,f,c
 15556  0028DC  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15557  0028DE  22DA               	addwfc	fsr2h,f,c
 15558  0028E0  EE10 F00A          	lfsr	1,10
 15559  0028E4  518F               	movf	f_sync@fp& (0+255),w,b
 15560  0028E6  26E1               	addwf	fsr1l,f,c
 15561  0028E8  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15562  0028EA  22E2               	addwfc	fsr1h,f,c
 15563  0028EC  CFE6 F091          	movff	postinc1,??_f_sync
 15564  0028F0  CFE6 F092          	movff	postinc1,??_f_sync+1
 15565  0028F4  CFE6 F093          	movff	postinc1,??_f_sync+2
 15566  0028F8  CFE6 F094          	movff	postinc1,??_f_sync+3
 15567  0028FC  0E19               	movlw	25
 15568  0028FE  D005               	goto	u16080
 15569  002900                     u16085:
 15570  002900  90D8               	bcf	status,0,c
 15571  002902  3394               	rrcf	(??_f_sync+3)& (0+255),f,b
 15572  002904  3393               	rrcf	(??_f_sync+2)& (0+255),f,b
 15573  002906  3392               	rrcf	(??_f_sync+1)& (0+255),f,b
 15574  002908  3391               	rrcf	??_f_sync& (0+255),f,b
 15575  00290A                     u16080:
 15576  00290A  2EE8               	decfsz	wreg,f,c
 15577  00290C  D7F9               	goto	u16085
 15578  00290E  5191               	movf	??_f_sync& (0+255),w,b
 15579  002910  6EDF               	movwf	indf2,c
 15580                           
 15581                           ; BSR set to: 0
 15582                           ;ff.c: 2264: *(BYTE*)(dir+26)=(BYTE)(fp->org_clust); *(BYTE*)((dir+26)+1)=(BYTE)((WORD)(
      +                          fp->org_clust)>>8);
 15583  002912  EE20 F00E          	lfsr	2,14
 15584  002916  518F               	movf	f_sync@fp& (0+255),w,b
 15585  002918  26D9               	addwf	fsr2l,f,c
 15586  00291A  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15587  00291C  22DA               	addwfc	fsr2h,f,c
 15588  00291E  EE10 F01A          	lfsr	1,26
 15589  002922  519A               	movf	f_sync@dir& (0+255),w,b
 15590  002924  26E1               	addwf	fsr1l,f,c
 15591  002926  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15592  002928  22E2               	addwfc	fsr1h,f,c
 15593  00292A  CFDF FFE7          	movff	indf2,indf1
 15594                           
 15595                           ; BSR set to: 0
 15596  00292E  EE20 F01B          	lfsr	2,27
 15597  002932  519A               	movf	f_sync@dir& (0+255),w,b
 15598  002934  26D9               	addwf	fsr2l,f,c
 15599  002936  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15600  002938  22DA               	addwfc	fsr2h,f,c
 15601  00293A  EE10 F00E          	lfsr	1,14
 15602  00293E  518F               	movf	f_sync@fp& (0+255),w,b
 15603  002940  26E1               	addwf	fsr1l,f,c
 15604  002942  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15605  002944  22E2               	addwfc	fsr1h,f,c
 15606  002946  CFE6 F091          	movff	postinc1,??_f_sync
 15607  00294A  CFE5 F092          	movff	postdec1,??_f_sync+1
 15608  00294E  C092  F091         	movff	??_f_sync+1,??_f_sync
 15609  002952  6B92               	clrf	(??_f_sync+1)& (0+255),b
 15610  002954  5191               	movf	??_f_sync& (0+255),w,b
 15611  002956  6EDF               	movwf	indf2,c
 15612                           
 15613                           ; BSR set to: 0
 15614                           ;ff.c: 2265: *(BYTE*)(dir+20)=(BYTE)(fp->org_clust >> 16); *(BYTE*)((dir+20)+1)=(BYTE)((
      +                          WORD)(fp->org_clust >> 16)>>8);
 15615  002958  EE20 F014          	lfsr	2,20
 15616  00295C  519A               	movf	f_sync@dir& (0+255),w,b
 15617  00295E  26D9               	addwf	fsr2l,f,c
 15618  002960  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15619  002962  22DA               	addwfc	fsr2h,f,c
 15620  002964  EE10 F00E          	lfsr	1,14
 15621  002968  518F               	movf	f_sync@fp& (0+255),w,b
 15622  00296A  26E1               	addwf	fsr1l,f,c
 15623  00296C  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15624  00296E  22E2               	addwfc	fsr1h,f,c
 15625  002970  CFE6 F091          	movff	postinc1,??_f_sync
 15626  002974  CFE6 F092          	movff	postinc1,??_f_sync+1
 15627  002978  CFE6 F093          	movff	postinc1,??_f_sync+2
 15628  00297C  CFE6 F094          	movff	postinc1,??_f_sync+3
 15629  002980  0E11               	movlw	17
 15630  002982  D005               	goto	u16090
 15631  002984                     u16095:
 15632  002984  90D8               	bcf	status,0,c
 15633  002986  3394               	rrcf	(??_f_sync+3)& (0+255),f,b
 15634  002988  3393               	rrcf	(??_f_sync+2)& (0+255),f,b
 15635  00298A  3392               	rrcf	(??_f_sync+1)& (0+255),f,b
 15636  00298C  3391               	rrcf	??_f_sync& (0+255),f,b
 15637  00298E                     u16090:
 15638  00298E  2EE8               	decfsz	wreg,f,c
 15639  002990  D7F9               	goto	u16095
 15640  002992  5191               	movf	??_f_sync& (0+255),w,b
 15641  002994  6EDF               	movwf	indf2,c
 15642                           
 15643                           ; BSR set to: 0
 15644  002996  EE20 F015          	lfsr	2,21
 15645  00299A  519A               	movf	f_sync@dir& (0+255),w,b
 15646  00299C  26D9               	addwf	fsr2l,f,c
 15647  00299E  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15648  0029A0  22DA               	addwfc	fsr2h,f,c
 15649  0029A2  EE10 F00E          	lfsr	1,14
 15650  0029A6  518F               	movf	f_sync@fp& (0+255),w,b
 15651  0029A8  26E1               	addwf	fsr1l,f,c
 15652  0029AA  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15653  0029AC  22E2               	addwfc	fsr1h,f,c
 15654  0029AE  CFE6 F091          	movff	postinc1,??_f_sync
 15655  0029B2  CFE6 F092          	movff	postinc1,??_f_sync+1
 15656  0029B6  CFE6 F093          	movff	postinc1,??_f_sync+2
 15657  0029BA  CFE6 F094          	movff	postinc1,??_f_sync+3
 15658  0029BE  0E11               	movlw	17
 15659  0029C0  D005               	goto	u16100
 15660  0029C2                     u16105:
 15661  0029C2  90D8               	bcf	status,0,c
 15662  0029C4  3394               	rrcf	(??_f_sync+3)& (0+255),f,b
 15663  0029C6  3393               	rrcf	(??_f_sync+2)& (0+255),f,b
 15664  0029C8  3392               	rrcf	(??_f_sync+1)& (0+255),f,b
 15665  0029CA  3391               	rrcf	??_f_sync& (0+255),f,b
 15666  0029CC                     u16100:
 15667  0029CC  2EE8               	decfsz	wreg,f,c
 15668  0029CE  D7F9               	goto	u16105
 15669  0029D0  C092  F091         	movff	??_f_sync+1,??_f_sync
 15670  0029D4  6B92               	clrf	(??_f_sync+1)& (0+255),b
 15671  0029D6  5191               	movf	??_f_sync& (0+255),w,b
 15672  0029D8  6EDF               	movwf	indf2,c
 15673                           
 15674                           ; BSR set to: 0
 15675                           ;ff.c: 2266: tim = get_fattime();
 15676  0029DA  ECFA  F01D         	call	_get_fattime	;wreg free
 15677  0029DE  C01A  F096         	movff	?_get_fattime,f_sync@tim
 15678  0029E2  C01B  F097         	movff	?_get_fattime+1,f_sync@tim+1
 15679  0029E6  C01C  F098         	movff	?_get_fattime+2,f_sync@tim+2
 15680  0029EA  C01D  F099         	movff	?_get_fattime+3,f_sync@tim+3
 15681                           
 15682                           ;ff.c: 2267: *(BYTE*)(dir+22)=(BYTE)(tim); *(BYTE*)((dir+22)+1)=(BYTE)((WORD)(tim)>>8); 
      +                          *(BYTE*)((dir+22)+2)=(BYTE)((DWORD)(tim)>>16); *(BYTE*)((dir+22)+3)=(BYTE)((DWORD)(tim)>
      +                          >24);
 15683  0029EE  0100               	movlb	0	; () banked
 15684  0029F0  EE20 F016          	lfsr	2,22
 15685  0029F4  519A               	movf	f_sync@dir& (0+255),w,b
 15686  0029F6  26D9               	addwf	fsr2l,f,c
 15687  0029F8  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15688  0029FA  22DA               	addwfc	fsr2h,f,c
 15689  0029FC  C096  FFDF         	movff	f_sync@tim,indf2
 15690                           
 15691                           ; BSR set to: 0
 15692  002A00  EE20 F017          	lfsr	2,23
 15693  002A04  519A               	movf	f_sync@dir& (0+255),w,b
 15694  002A06  26D9               	addwf	fsr2l,f,c
 15695  002A08  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15696  002A0A  22DA               	addwfc	fsr2h,f,c
 15697  002A0C  5197               	movf	(f_sync@tim+1)& (0+255),w,b
 15698  002A0E  6EDF               	movwf	indf2,c
 15699                           
 15700                           ; BSR set to: 0
 15701  002A10  EE20 F018          	lfsr	2,24
 15702  002A14  519A               	movf	f_sync@dir& (0+255),w,b
 15703  002A16  26D9               	addwf	fsr2l,f,c
 15704  002A18  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15705  002A1A  22DA               	addwfc	fsr2h,f,c
 15706  002A1C  C098  FFDF         	movff	f_sync@tim+2,indf2
 15707                           
 15708                           ; BSR set to: 0
 15709  002A20  EE20 F019          	lfsr	2,25
 15710  002A24  519A               	movf	f_sync@dir& (0+255),w,b
 15711  002A26  26D9               	addwf	fsr2l,f,c
 15712  002A28  519B               	movf	(f_sync@dir+1)& (0+255),w,b
 15713  002A2A  22DA               	addwfc	fsr2h,f,c
 15714  002A2C  C099  FFDF         	movff	f_sync@tim+3,indf2
 15715                           
 15716                           ; BSR set to: 0
 15717                           ;ff.c: 2268: fp->flag &= ~0x20;
 15718  002A30  EE20 F004          	lfsr	2,4
 15719  002A34  518F               	movf	f_sync@fp& (0+255),w,b
 15720  002A36  26D9               	addwf	fsr2l,f,c
 15721  002A38  5190               	movf	(f_sync@fp+1)& (0+255),w,b
 15722  002A3A  22DA               	addwfc	fsr2h,f,c
 15723  002A3C  0EDF               	movlw	223
 15724  002A3E  16DF               	andwf	indf2,f,c
 15725                           
 15726                           ; BSR set to: 0
 15727                           ;ff.c: 2269: fp->fs->wflag = 1;
 15728  002A40  C08F  FFD9         	movff	f_sync@fp,fsr2l
 15729  002A44  C090  FFDA         	movff	f_sync@fp+1,fsr2h
 15730  002A48  EE10 F004          	lfsr	1,4
 15731  002A4C  50DE               	movf	postinc2,w,c
 15732  002A4E  26E1               	addwf	fsr1l,f,c
 15733  002A50  50DD               	movf	postdec2,w,c
 15734  002A52  22E2               	addwfc	fsr1h,f,c
 15735  002A54  0E01               	movlw	1
 15736  002A56  6EE7               	movwf	indf1,c
 15737                           
 15738                           ; BSR set to: 0
 15739                           ;ff.c: 2270: res = sync(fp->fs);
 15740  002A58  C08F  FFD9         	movff	f_sync@fp,fsr2l
 15741  002A5C  C090  FFDA         	movff	f_sync@fp+1,fsr2h
 15742  002A60  CFDE F088          	movff	postinc2,sync@fs
 15743  002A64  CFDD F089          	movff	postdec2,sync@fs+1
 15744  002A68  ECC5  F010         	call	_sync	;wreg free
 15745  002A6C  0100               	movlb	0	; () banked
 15746  002A6E  6F95               	movwf	f_sync@res& (0+255),b
 15747  002A70                     l1367:
 15748                           
 15749                           ; BSR set to: 0
 15750                           ;ff.c: 2271: }
 15751                           ;ff.c: 2272: }
 15752                           ;ff.c: 2273: }
 15753                           ;ff.c: 2275: return res;
 15754                           
 15755                           ; BSR set to: 0
 15756                           
 15757                           ; BSR set to: 0
 15758                           
 15759                           ; BSR set to: 0
 15760  002A70  5195               	movf	f_sync@res& (0+255),w,b
 15761  002A72  0012               	return	
 15762  002A74                     __end_of_f_sync:
 15763                           	opt stack 0
 15764                           tosu	equ	0xFFF
 15765                           tosh	equ	0xFFE
 15766                           tosl	equ	0xFFD
 15767                           pclath	equ	0xFFA
 15768                           tblptru	equ	0xFF8
 15769                           tblptrh	equ	0xFF7
 15770                           tblptrl	equ	0xFF6
 15771                           tablat	equ	0xFF5
 15772                           prodh	equ	0xFF4
 15773                           prodl	equ	0xFF3
 15774                           intcon	equ	0xFF2
 15775                           intcon2	equ	0xFF1
 15776                           intcon3	equ	0xFF0
 15777                           indf0	equ	0xFEF
 15778                           postinc0	equ	0xFEE
 15779                           fsr0h	equ	0xFEA
 15780                           fsr0l	equ	0xFE9
 15781                           wreg	equ	0xFE8
 15782                           indf1	equ	0xFE7
 15783                           postinc1	equ	0xFE6
 15784                           postdec1	equ	0xFE5
 15785                           fsr1h	equ	0xFE2
 15786                           fsr1l	equ	0xFE1
 15787                           indf2	equ	0xFDF
 15788                           postinc2	equ	0xFDE
 15789                           postdec2	equ	0xFDD
 15790                           plusw2	equ	0xFDB
 15791                           fsr2h	equ	0xFDA
 15792                           fsr2l	equ	0xFD9
 15793                           status	equ	0xFD8
 15794                           
 15795 ;; *************** function _validate *****************
 15796 ;; Defined at:
 15797 ;;		line 1818 in file "bibliotecas/ff.c"
 15798 ;; Parameters:    Size  Location     Type
 15799 ;;  fs              2   39[COMRAM] PTR struct .
 15800 ;;		 -> NULL(0), 
 15801 ;;  id              2   41[COMRAM] unsigned short 
 15802 ;; Auto vars:     Size  Location     Type
 15803 ;;		None
 15804 ;; Return value:  Size  Location     Type
 15805 ;;                  1    wreg      enum E72
 15806 ;; Registers used:
 15807 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15808 ;; Tracked objects:
 15809 ;;		On entry : 0/0
 15810 ;;		On exit  : 0/0
 15811 ;;		Unchanged: 0/0
 15812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15813 ;;      Params:         4       0       0       0       0       0       0       0       0
 15814 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15815 ;;      Temps:          2       0       0       0       0       0       0       0       0
 15816 ;;      Totals:         6       0       0       0       0       0       0       0       0
 15817 ;;Total ram usage:        6 bytes
 15818 ;; Hardware stack levels used:    1
 15819 ;; Hardware stack levels required when called:    6
 15820 ;; This function calls:
 15821 ;;		_disk_status
 15822 ;; This function is called by:
 15823 ;;		_f_write
 15824 ;;		_f_sync
 15825 ;;		_f_read
 15826 ;;		_f_lseek
 15827 ;;		_f_readdir
 15828 ;; This function uses a non-reentrant model
 15829 ;;
 15830                           
 15831                           	psect	text59
 15832  004D02                     __ptext59:
 15833                           	opt stack 0
 15834  004D02                     _validate:
 15835                           	opt stack 21
 15836                           
 15837                           ;ff.c: 1823: if (!fs || !fs->fs_type || fs->id != id)
 15838                           
 15839                           ; BSR set to: 0
 15840                           ;incstack = 0
 15841  004D02  5028               	movf	validate@fs,w,c
 15842  004D04  1029               	iorwf	validate@fs+1,w,c
 15843  004D06  B4D8               	btfsc	status,2,c
 15844  004D08  D014               	goto	u14840
 15845  004D0A  C028  FFD9         	movff	validate@fs,fsr2l
 15846  004D0E  C029  FFDA         	movff	validate@fs+1,fsr2h
 15847  004D12  50DF               	movf	indf2,w,c
 15848  004D14  B4D8               	btfsc	status,2,c
 15849  004D16  D00D               	goto	u14840
 15850  004D18  EE20 F006          	lfsr	2,6
 15851  004D1C  5028               	movf	validate@fs,w,c
 15852  004D1E  26D9               	addwf	fsr2l,f,c
 15853  004D20  5029               	movf	validate@fs+1,w,c
 15854  004D22  22DA               	addwfc	fsr2h,f,c
 15855  004D24  502A               	movf	validate@id,w,c
 15856  004D26  18DE               	xorwf	postinc2,w,c
 15857  004D28  E104               	bnz	l11824
 15858  004D2A  502B               	movf	validate@id+1,w,c
 15859  004D2C  18DE               	xorwf	postinc2,w,c
 15860  004D2E  B4D8               	btfsc	status,2,c
 15861  004D30  D002               	goto	l1269
 15862  004D32                     u14840:
 15863  004D32                     l11824:
 15864                           
 15865                           ;ff.c: 1824: return FR_INVALID_OBJECT;
 15866  004D32  0E09               	movlw	9
 15867  004D34  0012               	return	
 15868  004D36                     l1269:
 15869                           
 15870                           ;ff.c: 1826: ;
 15871                           ;ff.c: 1828: if (disk_status(fs->drv) & 0x01)
 15872  004D36  EE20 F001          	lfsr	2,1
 15873  004D3A  5028               	movf	validate@fs,w,c
 15874  004D3C  26D9               	addwf	fsr2l,f,c
 15875  004D3E  5029               	movf	validate@fs+1,w,c
 15876  004D40  22DA               	addwfc	fsr2h,f,c
 15877  004D42  50DF               	movf	indf2,w,c
 15878  004D44  EC56  F026         	call	_disk_status
 15879  004D48  6E2C               	movwf	??_validate& (0+255),c
 15880  004D4A  A02C               	btfss	??_validate,0,c
 15881  004D4C  D002               	goto	l1273
 15882                           
 15883                           ;ff.c: 1829: return FR_NOT_READY;
 15884  004D4E  0E03               	movlw	3
 15885  004D50  0012               	return	
 15886  004D52                     l1273:
 15887                           
 15888                           ;ff.c: 1831: return FR_OK;
 15889  004D52  0E00               	movlw	0
 15890  004D54  0012               	return	
 15891  004D56                     __end_of_validate:
 15892                           	opt stack 0
 15893                           tosu	equ	0xFFF
 15894                           tosh	equ	0xFFE
 15895                           tosl	equ	0xFFD
 15896                           pclath	equ	0xFFA
 15897                           tblptru	equ	0xFF8
 15898                           tblptrh	equ	0xFF7
 15899                           tblptrl	equ	0xFF6
 15900                           tablat	equ	0xFF5
 15901                           prodh	equ	0xFF4
 15902                           prodl	equ	0xFF3
 15903                           intcon	equ	0xFF2
 15904                           intcon2	equ	0xFF1
 15905                           intcon3	equ	0xFF0
 15906                           indf0	equ	0xFEF
 15907                           postinc0	equ	0xFEE
 15908                           fsr0h	equ	0xFEA
 15909                           fsr0l	equ	0xFE9
 15910                           wreg	equ	0xFE8
 15911                           indf1	equ	0xFE7
 15912                           postinc1	equ	0xFE6
 15913                           postdec1	equ	0xFE5
 15914                           fsr1h	equ	0xFE2
 15915                           fsr1l	equ	0xFE1
 15916                           indf2	equ	0xFDF
 15917                           postinc2	equ	0xFDE
 15918                           postdec2	equ	0xFDD
 15919                           plusw2	equ	0xFDB
 15920                           fsr2h	equ	0xFDA
 15921                           fsr2l	equ	0xFD9
 15922                           status	equ	0xFD8
 15923                           
 15924 ;; *************** function _disk_status *****************
 15925 ;; Defined at:
 15926 ;;		line 68 in file "bibliotecas/diskio.c"
 15927 ;; Parameters:    Size  Location     Type
 15928 ;;  drv             1    wreg     unsigned char 
 15929 ;; Auto vars:     Size  Location     Type
 15930 ;;  drv             1   37[COMRAM] unsigned char 
 15931 ;;  result          2    0        int 
 15932 ;;  stat            1   38[COMRAM] unsigned char 
 15933 ;; Return value:  Size  Location     Type
 15934 ;;                  1    wreg      unsigned char 
 15935 ;; Registers used:
 15936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15937 ;; Tracked objects:
 15938 ;;		On entry : 0/0
 15939 ;;		On exit  : 0/0
 15940 ;;		Unchanged: 0/0
 15941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15942 ;;      Params:         0       0       0       0       0       0       0       0       0
 15943 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15944 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15945 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15946 ;;Total ram usage:        2 bytes
 15947 ;; Hardware stack levels used:    1
 15948 ;; Hardware stack levels required when called:    5
 15949 ;; This function calls:
 15950 ;;		_escreve_frase_ram_lcd
 15951 ;;		_posicao_cursor_lcd
 15952 ;;		_sdc_disk_status
 15953 ;; This function is called by:
 15954 ;;		_validate
 15955 ;;		_chk_mounted
 15956 ;; This function uses a non-reentrant model
 15957 ;;
 15958                           
 15959                           	psect	text60
 15960  004CAC                     __ptext60:
 15961                           	opt stack 0
 15962  004CAC                     _disk_status:
 15963                           	opt stack 21
 15964                           
 15965                           ;incstack = 0
 15966                           ;disk_status@drv stored from wreg
 15967  004CAC  6E26               	movwf	disk_status@drv,c
 15968                           
 15969                           ;diskio.c: 72: DSTATUS stat;
 15970                           ;diskio.c: 73: int result;
 15971                           ;diskio.c: 75: switch (drv) {
 15972  004CAE  D01D               	goto	l889
 15973  004CB0                     
 15974                           ;diskio.c: 77: posicao_cursor_lcd(1,0);
 15975  004CB0  0E00               	movlw	0
 15976  004CB2  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 15977  004CB4  0E01               	movlw	1
 15978  004CB6  ECD0  F024         	call	_posicao_cursor_lcd
 15979                           
 15980                           ;diskio.c: 78: escreve_frase_ram_lcd("NO ATA DRIVE");
 15981  004CBA  0EF9               	movlw	low STR_22
 15982  004CBC  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 15983  004CBE  0E61               	movlw	high STR_22
 15984  004CC0  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 15985  004CC2  ECAB  F026         	call	_escreve_frase_ram_lcd	;wreg free
 15986  004CC6                     l891:
 15987  004CC6  D7FF               	goto	l891
 15988  004CC8                     
 15989                           ;diskio.c: 86: stat = sdc_disk_status();
 15990  004CC8  ECEB  F027         	call	_sdc_disk_status	;wreg free
 15991  004CCC  6E27               	movwf	disk_status@stat,c
 15992                           
 15993                           ;diskio.c: 89: return stat;
 15994  004CCE  5027               	movf	disk_status@stat,w,c
 15995  004CD0  0012               	return	
 15996  004CD2                     
 15997                           ;diskio.c: 92: posicao_cursor_lcd(1,0);
 15998  004CD2  0E00               	movlw	0
 15999  004CD4  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16000  004CD6  0E01               	movlw	1
 16001  004CD8  ECD0  F024         	call	_posicao_cursor_lcd
 16002                           
 16003                           ;diskio.c: 93: escreve_frase_ram_lcd("NO USB DRIVE");
 16004  004CDC  0E06               	movlw	low STR_23
 16005  004CDE  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16006  004CE0  0E62               	movlw	high STR_23
 16007  004CE2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16008  004CE4  ECAB  F026         	call	_escreve_frase_ram_lcd	;wreg free
 16009  004CE8                     l897:
 16010  004CE8  D7FF               	goto	l897
 16011  004CEA                     l889:
 16012  004CEA  5026               	movf	disk_status@drv,w,c
 16013                           
 16014                           ; Switch size 1, requested type "space"
 16015                           ; Number of cases is 3, Range of values is 0 to 2
 16016                           ; switch strategies available:
 16017                           ; Name         Instructions Cycles
 16018                           ; simple_byte           10     6 (average)
 16019                           ;	Chosen strategy is simple_byte
 16020  004CEC  0A00               	xorlw	0	; case 0
 16021  004CEE  B4D8               	btfsc	status,2,c
 16022  004CF0  D7DF               	goto	l890
 16023  004CF2  0A01               	xorlw	1	; case 1
 16024  004CF4  B4D8               	btfsc	status,2,c
 16025  004CF6  D7E8               	goto	l895
 16026  004CF8  0A03               	xorlw	3	; case 2
 16027  004CFA  B4D8               	btfsc	status,2,c
 16028  004CFC  D7EA               	goto	l896
 16029                           
 16030                           ;diskio.c: 100: return 0x01;
 16031  004CFE  0E01               	movlw	1
 16032  004D00  0012               	return	
 16033  004D02                     __end_of_disk_status:
 16034                           	opt stack 0
 16035                           tosu	equ	0xFFF
 16036                           tosh	equ	0xFFE
 16037                           tosl	equ	0xFFD
 16038                           pclath	equ	0xFFA
 16039                           tblptru	equ	0xFF8
 16040                           tblptrh	equ	0xFF7
 16041                           tblptrl	equ	0xFF6
 16042                           tablat	equ	0xFF5
 16043                           prodh	equ	0xFF4
 16044                           prodl	equ	0xFF3
 16045                           intcon	equ	0xFF2
 16046                           intcon2	equ	0xFF1
 16047                           intcon3	equ	0xFF0
 16048                           indf0	equ	0xFEF
 16049                           postinc0	equ	0xFEE
 16050                           fsr0h	equ	0xFEA
 16051                           fsr0l	equ	0xFE9
 16052                           wreg	equ	0xFE8
 16053                           indf1	equ	0xFE7
 16054                           postinc1	equ	0xFE6
 16055                           postdec1	equ	0xFE5
 16056                           fsr1h	equ	0xFE2
 16057                           fsr1l	equ	0xFE1
 16058                           indf2	equ	0xFDF
 16059                           postinc2	equ	0xFDE
 16060                           postdec2	equ	0xFDD
 16061                           plusw2	equ	0xFDB
 16062                           fsr2h	equ	0xFDA
 16063                           fsr2l	equ	0xFD9
 16064                           status	equ	0xFD8
 16065                           
 16066 ;; *************** function _sdc_disk_status *****************
 16067 ;; Defined at:
 16068 ;;		line 605 in file "bibliotecas/SDCard.c"
 16069 ;; Parameters:    Size  Location     Type
 16070 ;;		None
 16071 ;; Auto vars:     Size  Location     Type
 16072 ;;  stat            1   36[COMRAM] unsigned char 
 16073 ;;  buff            1   35[COMRAM] unsigned char 
 16074 ;;  cont            1   34[COMRAM] unsigned char 
 16075 ;; Return value:  Size  Location     Type
 16076 ;;                  1    wreg      unsigned char 
 16077 ;; Registers used:
 16078 ;;		wreg, status,2, status,0, cstack
 16079 ;; Tracked objects:
 16080 ;;		On entry : 0/0
 16081 ;;		On exit  : 0/0
 16082 ;;		Unchanged: 0/0
 16083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16084 ;;      Params:         0       0       0       0       0       0       0       0       0
 16085 ;;      Locals:         3       0       0       0       0       0       0       0       0
 16086 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16087 ;;      Totals:         3       0       0       0       0       0       0       0       0
 16088 ;;Total ram usage:        3 bytes
 16089 ;; Hardware stack levels used:    1
 16090 ;; Hardware stack levels required when called:    4
 16091 ;; This function calls:
 16092 ;;		_command
 16093 ;;		_dummy_clocks
 16094 ;;		_response
 16095 ;; This function is called by:
 16096 ;;		_disk_status
 16097 ;; This function uses a non-reentrant model
 16098 ;;
 16099                           
 16100                           	psect	text61
 16101  004FD6                     __ptext61:
 16102                           	opt stack 0
 16103  004FD6                     _sdc_disk_status:
 16104                           	opt stack 21
 16105                           
 16106                           ;SDCard.c: 607: DSTATUS stat;
 16107                           ;SDCard.c: 608: unsigned char buff, cont;
 16108                           ;SDCard.c: 609: dummy_clocks(8);
 16109                           
 16110                           ;incstack = 0
 16111  004FD6  0E08               	movlw	8
 16112  004FD8  EC90  F027         	call	_dummy_clocks
 16113                           
 16114                           ;SDCard.c: 610: command(0x40, 0x00000000, 0x95);
 16115  004FDC  0E00               	movlw	0
 16116  004FDE  6E1C               	movwf	command@arg,c
 16117  004FE0  0E00               	movlw	0
 16118  004FE2  6E1D               	movwf	command@arg+1,c
 16119  004FE4  0E00               	movlw	0
 16120  004FE6  6E1E               	movwf	command@arg+2,c
 16121  004FE8  0E00               	movlw	0
 16122  004FEA  6E1F               	movwf	command@arg+3,c
 16123  004FEC  0E95               	movlw	149
 16124  004FEE  6E20               	movwf	command@CRC,c
 16125  004FF0  0E40               	movlw	64
 16126  004FF2  ECAF  F027         	call	_command
 16127  004FF6                     l370:
 16128                           
 16129                           ;SDCard.c: 613: buff= response();
 16130  004FF6  EC75  F029         	call	_response	;wreg free
 16131  004FFA  6E24               	movwf	sdc_disk_status@buff,c
 16132                           
 16133                           ;SDCard.c: 614: }while(cont<10);
 16134  004FFC  0E09               	movlw	9
 16135  004FFE  6423               	cpfsgt	sdc_disk_status@cont,c
 16136  005000  D7FA               	goto	l370
 16137                           
 16138                           ;SDCard.c: 615: if(buff==0x00)
 16139  005002  5024               	movf	sdc_disk_status@buff,w,c
 16140  005004  A4D8               	btfss	status,2,c
 16141  005006  D002               	goto	l372
 16142                           
 16143                           ;SDCard.c: 616: {
 16144                           ;SDCard.c: 617: return stat;
 16145  005008  5025               	movf	sdc_disk_status@stat,w,c
 16146                           
 16147                           ;SDCard.c: 618: }
 16148  00500A  0012               	return	
 16149  00500C                     l372:
 16150                           
 16151                           ;SDCard.c: 620: {
 16152                           ;SDCard.c: 621: return stat;
 16153  00500C  5025               	movf	sdc_disk_status@stat,w,c
 16154                           
 16155                           ;SDCard.c: 622: }
 16156  00500E  0012               	return	
 16157  005010                     __end_of_sdc_disk_status:
 16158                           	opt stack 0
 16159                           tosu	equ	0xFFF
 16160                           tosh	equ	0xFFE
 16161                           tosl	equ	0xFFD
 16162                           pclath	equ	0xFFA
 16163                           tblptru	equ	0xFF8
 16164                           tblptrh	equ	0xFF7
 16165                           tblptrl	equ	0xFF6
 16166                           tablat	equ	0xFF5
 16167                           prodh	equ	0xFF4
 16168                           prodl	equ	0xFF3
 16169                           intcon	equ	0xFF2
 16170                           intcon2	equ	0xFF1
 16171                           intcon3	equ	0xFF0
 16172                           indf0	equ	0xFEF
 16173                           postinc0	equ	0xFEE
 16174                           fsr0h	equ	0xFEA
 16175                           fsr0l	equ	0xFE9
 16176                           wreg	equ	0xFE8
 16177                           indf1	equ	0xFE7
 16178                           postinc1	equ	0xFE6
 16179                           postdec1	equ	0xFE5
 16180                           fsr1h	equ	0xFE2
 16181                           fsr1l	equ	0xFE1
 16182                           indf2	equ	0xFDF
 16183                           postinc2	equ	0xFDE
 16184                           postdec2	equ	0xFDD
 16185                           plusw2	equ	0xFDB
 16186                           fsr2h	equ	0xFDA
 16187                           fsr2l	equ	0xFD9
 16188                           status	equ	0xFD8
 16189                           
 16190 ;; *************** function _sync *****************
 16191 ;; Defined at:
 16192 ;;		line 451 in file "bibliotecas/ff.c"
 16193 ;; Parameters:    Size  Location     Type
 16194 ;;  fs              2   40[BANK0 ] PTR struct .
 16195 ;;		 -> NULL(0), 
 16196 ;; Auto vars:     Size  Location     Type
 16197 ;;  res             1   46[BANK0 ] enum E72
 16198 ;; Return value:  Size  Location     Type
 16199 ;;                  1    wreg      enum E72
 16200 ;; Registers used:
 16201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16202 ;; Tracked objects:
 16203 ;;		On entry : 0/0
 16204 ;;		On exit  : 0/0
 16205 ;;		Unchanged: 0/0
 16206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16207 ;;      Params:         0       2       0       0       0       0       0       0       0
 16208 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16209 ;;      Temps:          0       4       0       0       0       0       0       0       0
 16210 ;;      Totals:         0       7       0       0       0       0       0       0       0
 16211 ;;Total ram usage:        7 bytes
 16212 ;; Hardware stack levels used:    1
 16213 ;; Hardware stack levels required when called:    8
 16214 ;; This function calls:
 16215 ;;		_disk_ioctl
 16216 ;;		_disk_write
 16217 ;;		_mem_set
 16218 ;;		_move_window
 16219 ;; This function is called by:
 16220 ;;		_f_sync
 16221 ;; This function uses a non-reentrant model
 16222 ;;
 16223                           
 16224                           	psect	text62
 16225  00218A                     __ptext62:
 16226                           	opt stack 0
 16227  00218A                     _sync:
 16228                           	opt stack 18
 16229                           
 16230                           ;ff.c: 455: FRESULT res;
 16231                           ;ff.c: 458: res = move_window(fs, 0);
 16232                           
 16233                           ;incstack = 0
 16234  00218A  C088  F071         	movff	sync@fs,move_window@fs
 16235  00218E  C089  F072         	movff	sync@fs+1,move_window@fs+1
 16236  002192  0E00               	movlw	0
 16237  002194  0100               	movlb	0	; () banked
 16238  002196  6F73               	movwf	move_window@sector& (0+255),b
 16239  002198  0E00               	movlw	0
 16240  00219A  6F74               	movwf	(move_window@sector+1)& (0+255),b
 16241  00219C  0E00               	movlw	0
 16242  00219E  6F75               	movwf	(move_window@sector+2)& (0+255),b
 16243  0021A0  0E00               	movlw	0
 16244  0021A2  6F76               	movwf	(move_window@sector+3)& (0+255),b
 16245  0021A4  EC69  F016         	call	_move_window	;wreg free
 16246  0021A8  0100               	movlb	0	; () banked
 16247  0021AA  6F8E               	movwf	sync@res& (0+255),b
 16248                           
 16249                           ; BSR set to: 0
 16250                           ;ff.c: 459: if (res == FR_OK) {
 16251  0021AC  518E               	movf	sync@res& (0+255),w,b
 16252  0021AE  A4D8               	btfss	status,2,c
 16253  0021B0  D17B               	goto	l982
 16254                           
 16255                           ; BSR set to: 0
 16256                           ;ff.c: 461: if (fs->fs_type == 3 && fs->fsi_flag) {
 16257  0021B2  C088  FFD9         	movff	sync@fs,fsr2l
 16258  0021B6  C089  FFDA         	movff	sync@fs+1,fsr2h
 16259  0021BA  0E03               	movlw	3
 16260  0021BC  18DE               	xorwf	postinc2,w,c
 16261  0021BE  A4D8               	btfss	status,2,c
 16262  0021C0  D15E               	goto	l981
 16263                           
 16264                           ; BSR set to: 0
 16265  0021C2  EE20 F005          	lfsr	2,5
 16266  0021C6  5188               	movf	sync@fs& (0+255),w,b
 16267  0021C8  26D9               	addwf	fsr2l,f,c
 16268  0021CA  5189               	movf	(sync@fs+1)& (0+255),w,b
 16269  0021CC  22DA               	addwfc	fsr2h,f,c
 16270  0021CE  50DF               	movf	indf2,w,c
 16271  0021D0  B4D8               	btfsc	status,2,c
 16272  0021D2  D155               	goto	l981
 16273                           
 16274                           ; BSR set to: 0
 16275                           ;ff.c: 462: fs->winsect = 0;
 16276  0021D4  EE20 F02A          	lfsr	2,42
 16277  0021D8  5188               	movf	sync@fs& (0+255),w,b
 16278  0021DA  26D9               	addwf	fsr2l,f,c
 16279  0021DC  5189               	movf	(sync@fs+1)& (0+255),w,b
 16280  0021DE  22DA               	addwfc	fsr2h,f,c
 16281  0021E0  6ADE               	clrf	postinc2,c
 16282  0021E2  6ADE               	clrf	postinc2,c
 16283  0021E4  6ADE               	clrf	postinc2,c
 16284  0021E6  6ADD               	clrf	postdec2,c
 16285                           
 16286                           ; BSR set to: 0
 16287                           ;ff.c: 463: mem_set(fs->win, 0, 512);
 16288  0021E8  0E2E               	movlw	46
 16289  0021EA  2588               	addwf	sync@fs& (0+255),w,b
 16290  0021EC  6E1A               	movwf	mem_set@dst,c
 16291  0021EE  0E00               	movlw	0
 16292  0021F0  2189               	addwfc	(sync@fs+1)& (0+255),w,b
 16293  0021F2  6E1B               	movwf	mem_set@dst+1,c
 16294  0021F4  0E00               	movlw	0
 16295  0021F6  6E1D               	movwf	mem_set@val+1,c
 16296  0021F8  0E00               	movlw	0
 16297  0021FA  6E1C               	movwf	mem_set@val,c
 16298  0021FC  0E02               	movlw	2
 16299  0021FE  6E1F               	movwf	mem_set@cnt+1,c
 16300  002200  0E00               	movlw	0
 16301  002202  6E1E               	movwf	mem_set@cnt,c
 16302  002204  EC56  F028         	call	_mem_set	;wreg free
 16303                           
 16304                           ;ff.c: 464: *(BYTE*)(fs->win+510)=(BYTE)(0xAA55); *(BYTE*)((fs->win+510)+1)=(BYTE)((WORD
      +                          )(0xAA55)>>8);
 16305  002208  0100               	movlb	0	; () banked
 16306  00220A  EE22 F02C          	lfsr	2,556
 16307  00220E  5188               	movf	sync@fs& (0+255),w,b
 16308  002210  26D9               	addwf	fsr2l,f,c
 16309  002212  5189               	movf	(sync@fs+1)& (0+255),w,b
 16310  002214  22DA               	addwfc	fsr2h,f,c
 16311  002216  0E55               	movlw	85
 16312  002218  6EDF               	movwf	indf2,c
 16313                           
 16314                           ; BSR set to: 0
 16315  00221A  EE22 F02D          	lfsr	2,557
 16316  00221E  5188               	movf	sync@fs& (0+255),w,b
 16317  002220  26D9               	addwf	fsr2l,f,c
 16318  002222  5189               	movf	(sync@fs+1)& (0+255),w,b
 16319  002224  22DA               	addwfc	fsr2h,f,c
 16320  002226  0EAA               	movlw	170
 16321  002228  6EDF               	movwf	indf2,c
 16322                           
 16323                           ; BSR set to: 0
 16324                           ;ff.c: 465: *(BYTE*)(fs->win+0)=(BYTE)(0x41615252); *(BYTE*)((fs->win+0)+1)=(BYTE)((WORD
      +                          )(0x41615252)>>8); *(BYTE*)((fs->win+0)+2)=(BYTE)((DWORD)(0x41615252)>>16); *(BYTE*)((fs
      +                          ->win+0)+3)=(BYTE)((DWORD)(0x41615252)>>24);
 16325  00222A  EE20 F02E          	lfsr	2,46
 16326  00222E  5188               	movf	sync@fs& (0+255),w,b
 16327  002230  26D9               	addwf	fsr2l,f,c
 16328  002232  5189               	movf	(sync@fs+1)& (0+255),w,b
 16329  002234  22DA               	addwfc	fsr2h,f,c
 16330  002236  0E52               	movlw	82
 16331  002238  6EDF               	movwf	indf2,c
 16332                           
 16333                           ; BSR set to: 0
 16334  00223A  EE20 F02F          	lfsr	2,47
 16335  00223E  5188               	movf	sync@fs& (0+255),w,b
 16336  002240  26D9               	addwf	fsr2l,f,c
 16337  002242  5189               	movf	(sync@fs+1)& (0+255),w,b
 16338  002244  22DA               	addwfc	fsr2h,f,c
 16339  002246  0E52               	movlw	82
 16340  002248  6EDF               	movwf	indf2,c
 16341                           
 16342                           ; BSR set to: 0
 16343  00224A  EE20 F030          	lfsr	2,48
 16344  00224E  5188               	movf	sync@fs& (0+255),w,b
 16345  002250  26D9               	addwf	fsr2l,f,c
 16346  002252  5189               	movf	(sync@fs+1)& (0+255),w,b
 16347  002254  22DA               	addwfc	fsr2h,f,c
 16348  002256  0E61               	movlw	97
 16349  002258  6EDF               	movwf	indf2,c
 16350                           
 16351                           ; BSR set to: 0
 16352  00225A  EE20 F031          	lfsr	2,49
 16353  00225E  5188               	movf	sync@fs& (0+255),w,b
 16354  002260  26D9               	addwf	fsr2l,f,c
 16355  002262  5189               	movf	(sync@fs+1)& (0+255),w,b
 16356  002264  22DA               	addwfc	fsr2h,f,c
 16357  002266  0E41               	movlw	65
 16358  002268  6EDF               	movwf	indf2,c
 16359                           
 16360                           ; BSR set to: 0
 16361                           ;ff.c: 466: *(BYTE*)(fs->win+484)=(BYTE)(0x61417272); *(BYTE*)((fs->win+484)+1)=(BYTE)((
      +                          WORD)(0x61417272)>>8); *(BYTE*)((fs->win+484)+2)=(BYTE)((DWORD)(0x61417272)>>16); *(BYTE
      +                          *)((fs->win+484)+3)=(BYTE)((DWORD)(0x61417272)>>24);
 16362  00226A  EE22 F012          	lfsr	2,530
 16363  00226E  5188               	movf	sync@fs& (0+255),w,b
 16364  002270  26D9               	addwf	fsr2l,f,c
 16365  002272  5189               	movf	(sync@fs+1)& (0+255),w,b
 16366  002274  22DA               	addwfc	fsr2h,f,c
 16367  002276  0E72               	movlw	114
 16368  002278  6EDF               	movwf	indf2,c
 16369                           
 16370                           ; BSR set to: 0
 16371  00227A  EE22 F013          	lfsr	2,531
 16372  00227E  5188               	movf	sync@fs& (0+255),w,b
 16373  002280  26D9               	addwf	fsr2l,f,c
 16374  002282  5189               	movf	(sync@fs+1)& (0+255),w,b
 16375  002284  22DA               	addwfc	fsr2h,f,c
 16376  002286  0E72               	movlw	114
 16377  002288  6EDF               	movwf	indf2,c
 16378                           
 16379                           ; BSR set to: 0
 16380  00228A  EE22 F014          	lfsr	2,532
 16381  00228E  5188               	movf	sync@fs& (0+255),w,b
 16382  002290  26D9               	addwf	fsr2l,f,c
 16383  002292  5189               	movf	(sync@fs+1)& (0+255),w,b
 16384  002294  22DA               	addwfc	fsr2h,f,c
 16385  002296  0E41               	movlw	65
 16386  002298  6EDF               	movwf	indf2,c
 16387                           
 16388                           ; BSR set to: 0
 16389  00229A  EE22 F015          	lfsr	2,533
 16390  00229E  5188               	movf	sync@fs& (0+255),w,b
 16391  0022A0  26D9               	addwf	fsr2l,f,c
 16392  0022A2  5189               	movf	(sync@fs+1)& (0+255),w,b
 16393  0022A4  22DA               	addwfc	fsr2h,f,c
 16394  0022A6  0E61               	movlw	97
 16395  0022A8  6EDF               	movwf	indf2,c
 16396                           
 16397                           ; BSR set to: 0
 16398                           ;ff.c: 467: *(BYTE*)(fs->win+488)=(BYTE)(fs->free_clust); *(BYTE*)((fs->win+488)+1)=(BYT
      +                          E)((WORD)(fs->free_clust)>>8); *(BYTE*)((fs->win+488)+2)=(BYTE)((DWORD)(fs->free_clust)>
      +                          >16); *(BYTE*)((fs->win+488)+3)=(BYTE)((DWORD)(fs->free_clust)>>24);
 16399  0022AA  EE20 F00E          	lfsr	2,14
 16400  0022AE  5188               	movf	sync@fs& (0+255),w,b
 16401  0022B0  26D9               	addwf	fsr2l,f,c
 16402  0022B2  5189               	movf	(sync@fs+1)& (0+255),w,b
 16403  0022B4  22DA               	addwfc	fsr2h,f,c
 16404  0022B6  EE12 F016          	lfsr	1,534
 16405  0022BA  5188               	movf	sync@fs& (0+255),w,b
 16406  0022BC  26E1               	addwf	fsr1l,f,c
 16407  0022BE  5189               	movf	(sync@fs+1)& (0+255),w,b
 16408  0022C0  22E2               	addwfc	fsr1h,f,c
 16409  0022C2  CFDF FFE7          	movff	indf2,indf1
 16410                           
 16411                           ; BSR set to: 0
 16412  0022C6  EE22 F017          	lfsr	2,535
 16413  0022CA  5188               	movf	sync@fs& (0+255),w,b
 16414  0022CC  26D9               	addwf	fsr2l,f,c
 16415  0022CE  5189               	movf	(sync@fs+1)& (0+255),w,b
 16416  0022D0  22DA               	addwfc	fsr2h,f,c
 16417  0022D2  EE10 F00E          	lfsr	1,14
 16418  0022D6  5188               	movf	sync@fs& (0+255),w,b
 16419  0022D8  26E1               	addwf	fsr1l,f,c
 16420  0022DA  5189               	movf	(sync@fs+1)& (0+255),w,b
 16421  0022DC  22E2               	addwfc	fsr1h,f,c
 16422  0022DE  CFE6 F08A          	movff	postinc1,??_sync
 16423  0022E2  CFE5 F08B          	movff	postdec1,??_sync+1
 16424  0022E6  C08B  F08A         	movff	??_sync+1,??_sync
 16425  0022EA  6B8B               	clrf	(??_sync+1)& (0+255),b
 16426  0022EC  518A               	movf	??_sync& (0+255),w,b
 16427  0022EE  6EDF               	movwf	indf2,c
 16428                           
 16429                           ; BSR set to: 0
 16430  0022F0  EE22 F018          	lfsr	2,536
 16431  0022F4  5188               	movf	sync@fs& (0+255),w,b
 16432  0022F6  26D9               	addwf	fsr2l,f,c
 16433  0022F8  5189               	movf	(sync@fs+1)& (0+255),w,b
 16434  0022FA  22DA               	addwfc	fsr2h,f,c
 16435  0022FC  EE10 F00E          	lfsr	1,14
 16436  002300  5188               	movf	sync@fs& (0+255),w,b
 16437  002302  26E1               	addwf	fsr1l,f,c
 16438  002304  5189               	movf	(sync@fs+1)& (0+255),w,b
 16439  002306  22E2               	addwfc	fsr1h,f,c
 16440  002308  CFE6 F08A          	movff	postinc1,??_sync
 16441  00230C  CFE6 F08B          	movff	postinc1,??_sync+1
 16442  002310  CFE6 F08C          	movff	postinc1,??_sync+2
 16443  002314  CFE6 F08D          	movff	postinc1,??_sync+3
 16444  002318  0E11               	movlw	17
 16445  00231A  D005               	goto	u14540
 16446  00231C                     u14545:
 16447  00231C  90D8               	bcf	status,0,c
 16448  00231E  338D               	rrcf	(??_sync+3)& (0+255),f,b
 16449  002320  338C               	rrcf	(??_sync+2)& (0+255),f,b
 16450  002322  338B               	rrcf	(??_sync+1)& (0+255),f,b
 16451  002324  338A               	rrcf	??_sync& (0+255),f,b
 16452  002326                     u14540:
 16453  002326  2EE8               	decfsz	wreg,f,c
 16454  002328  D7F9               	goto	u14545
 16455  00232A  518A               	movf	??_sync& (0+255),w,b
 16456  00232C  6EDF               	movwf	indf2,c
 16457                           
 16458                           ; BSR set to: 0
 16459  00232E  EE22 F019          	lfsr	2,537
 16460  002332  5188               	movf	sync@fs& (0+255),w,b
 16461  002334  26D9               	addwf	fsr2l,f,c
 16462  002336  5189               	movf	(sync@fs+1)& (0+255),w,b
 16463  002338  22DA               	addwfc	fsr2h,f,c
 16464  00233A  EE10 F00E          	lfsr	1,14
 16465  00233E  5188               	movf	sync@fs& (0+255),w,b
 16466  002340  26E1               	addwf	fsr1l,f,c
 16467  002342  5189               	movf	(sync@fs+1)& (0+255),w,b
 16468  002344  22E2               	addwfc	fsr1h,f,c
 16469  002346  CFE6 F08A          	movff	postinc1,??_sync
 16470  00234A  CFE6 F08B          	movff	postinc1,??_sync+1
 16471  00234E  CFE6 F08C          	movff	postinc1,??_sync+2
 16472  002352  CFE6 F08D          	movff	postinc1,??_sync+3
 16473  002356  0E19               	movlw	25
 16474  002358  D005               	goto	u14550
 16475  00235A                     u14555:
 16476  00235A  90D8               	bcf	status,0,c
 16477  00235C  338D               	rrcf	(??_sync+3)& (0+255),f,b
 16478  00235E  338C               	rrcf	(??_sync+2)& (0+255),f,b
 16479  002360  338B               	rrcf	(??_sync+1)& (0+255),f,b
 16480  002362  338A               	rrcf	??_sync& (0+255),f,b
 16481  002364                     u14550:
 16482  002364  2EE8               	decfsz	wreg,f,c
 16483  002366  D7F9               	goto	u14555
 16484  002368  518A               	movf	??_sync& (0+255),w,b
 16485  00236A  6EDF               	movwf	indf2,c
 16486                           
 16487                           ; BSR set to: 0
 16488                           ;ff.c: 468: *(BYTE*)(fs->win+492)=(BYTE)(fs->last_clust); *(BYTE*)((fs->win+492)+1)=(BYT
      +                          E)((WORD)(fs->last_clust)>>8); *(BYTE*)((fs->win+492)+2)=(BYTE)((DWORD)(fs->last_clust)>
      +                          >16); *(BYTE*)((fs->win+492)+3)=(BYTE)((DWORD)(fs->last_clust)>>24);
 16489  00236C  EE20 F00A          	lfsr	2,10
 16490  002370  5188               	movf	sync@fs& (0+255),w,b
 16491  002372  26D9               	addwf	fsr2l,f,c
 16492  002374  5189               	movf	(sync@fs+1)& (0+255),w,b
 16493  002376  22DA               	addwfc	fsr2h,f,c
 16494  002378  EE12 F01A          	lfsr	1,538
 16495  00237C  5188               	movf	sync@fs& (0+255),w,b
 16496  00237E  26E1               	addwf	fsr1l,f,c
 16497  002380  5189               	movf	(sync@fs+1)& (0+255),w,b
 16498  002382  22E2               	addwfc	fsr1h,f,c
 16499  002384  CFDF FFE7          	movff	indf2,indf1
 16500                           
 16501                           ; BSR set to: 0
 16502  002388  EE22 F01B          	lfsr	2,539
 16503  00238C  5188               	movf	sync@fs& (0+255),w,b
 16504  00238E  26D9               	addwf	fsr2l,f,c
 16505  002390  5189               	movf	(sync@fs+1)& (0+255),w,b
 16506  002392  22DA               	addwfc	fsr2h,f,c
 16507  002394  EE10 F00A          	lfsr	1,10
 16508  002398  5188               	movf	sync@fs& (0+255),w,b
 16509  00239A  26E1               	addwf	fsr1l,f,c
 16510  00239C  5189               	movf	(sync@fs+1)& (0+255),w,b
 16511  00239E  22E2               	addwfc	fsr1h,f,c
 16512  0023A0  CFE6 F08A          	movff	postinc1,??_sync
 16513  0023A4  CFE5 F08B          	movff	postdec1,??_sync+1
 16514  0023A8  C08B  F08A         	movff	??_sync+1,??_sync
 16515  0023AC  6B8B               	clrf	(??_sync+1)& (0+255),b
 16516  0023AE  518A               	movf	??_sync& (0+255),w,b
 16517  0023B0  6EDF               	movwf	indf2,c
 16518                           
 16519                           ; BSR set to: 0
 16520  0023B2  EE22 F01C          	lfsr	2,540
 16521  0023B6  5188               	movf	sync@fs& (0+255),w,b
 16522  0023B8  26D9               	addwf	fsr2l,f,c
 16523  0023BA  5189               	movf	(sync@fs+1)& (0+255),w,b
 16524  0023BC  22DA               	addwfc	fsr2h,f,c
 16525  0023BE  EE10 F00A          	lfsr	1,10
 16526  0023C2  5188               	movf	sync@fs& (0+255),w,b
 16527  0023C4  26E1               	addwf	fsr1l,f,c
 16528  0023C6  5189               	movf	(sync@fs+1)& (0+255),w,b
 16529  0023C8  22E2               	addwfc	fsr1h,f,c
 16530  0023CA  CFE6 F08A          	movff	postinc1,??_sync
 16531  0023CE  CFE6 F08B          	movff	postinc1,??_sync+1
 16532  0023D2  CFE6 F08C          	movff	postinc1,??_sync+2
 16533  0023D6  CFE6 F08D          	movff	postinc1,??_sync+3
 16534  0023DA  0E11               	movlw	17
 16535  0023DC  D005               	goto	u14560
 16536  0023DE                     u14565:
 16537  0023DE  90D8               	bcf	status,0,c
 16538  0023E0  338D               	rrcf	(??_sync+3)& (0+255),f,b
 16539  0023E2  338C               	rrcf	(??_sync+2)& (0+255),f,b
 16540  0023E4  338B               	rrcf	(??_sync+1)& (0+255),f,b
 16541  0023E6  338A               	rrcf	??_sync& (0+255),f,b
 16542  0023E8                     u14560:
 16543  0023E8  2EE8               	decfsz	wreg,f,c
 16544  0023EA  D7F9               	goto	u14565
 16545  0023EC  518A               	movf	??_sync& (0+255),w,b
 16546  0023EE  6EDF               	movwf	indf2,c
 16547                           
 16548                           ; BSR set to: 0
 16549  0023F0  EE22 F01D          	lfsr	2,541
 16550  0023F4  5188               	movf	sync@fs& (0+255),w,b
 16551  0023F6  26D9               	addwf	fsr2l,f,c
 16552  0023F8  5189               	movf	(sync@fs+1)& (0+255),w,b
 16553  0023FA  22DA               	addwfc	fsr2h,f,c
 16554  0023FC  EE10 F00A          	lfsr	1,10
 16555  002400  5188               	movf	sync@fs& (0+255),w,b
 16556  002402  26E1               	addwf	fsr1l,f,c
 16557  002404  5189               	movf	(sync@fs+1)& (0+255),w,b
 16558  002406  22E2               	addwfc	fsr1h,f,c
 16559  002408  CFE6 F08A          	movff	postinc1,??_sync
 16560  00240C  CFE6 F08B          	movff	postinc1,??_sync+1
 16561  002410  CFE6 F08C          	movff	postinc1,??_sync+2
 16562  002414  CFE6 F08D          	movff	postinc1,??_sync+3
 16563  002418  0E19               	movlw	25
 16564  00241A  D005               	goto	u14570
 16565  00241C                     u14575:
 16566  00241C  90D8               	bcf	status,0,c
 16567  00241E  338D               	rrcf	(??_sync+3)& (0+255),f,b
 16568  002420  338C               	rrcf	(??_sync+2)& (0+255),f,b
 16569  002422  338B               	rrcf	(??_sync+1)& (0+255),f,b
 16570  002424  338A               	rrcf	??_sync& (0+255),f,b
 16571  002426                     u14570:
 16572  002426  2EE8               	decfsz	wreg,f,c
 16573  002428  D7F9               	goto	u14575
 16574  00242A  518A               	movf	??_sync& (0+255),w,b
 16575  00242C  6EDF               	movwf	indf2,c
 16576                           
 16577                           ; BSR set to: 0
 16578                           ;ff.c: 469: disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 16579  00242E  0E2E               	movlw	46
 16580  002430  2588               	addwf	sync@fs& (0+255),w,b
 16581  002432  6F65               	movwf	disk_write@buff& (0+255),b
 16582  002434  0E00               	movlw	0
 16583  002436  2189               	addwfc	(sync@fs+1)& (0+255),w,b
 16584  002438  6F66               	movwf	(disk_write@buff+1)& (0+255),b
 16585  00243A  EE20 F012          	lfsr	2,18
 16586  00243E  5188               	movf	sync@fs& (0+255),w,b
 16587  002440  26D9               	addwf	fsr2l,f,c
 16588  002442  5189               	movf	(sync@fs+1)& (0+255),w,b
 16589  002444  22DA               	addwfc	fsr2h,f,c
 16590  002446  CFDE F067          	movff	postinc2,disk_write@sector
 16591  00244A  CFDE F068          	movff	postinc2,disk_write@sector+1
 16592  00244E  CFDE F069          	movff	postinc2,disk_write@sector+2
 16593  002452  CFDE F06A          	movff	postinc2,disk_write@sector+3
 16594  002456  0E01               	movlw	1
 16595  002458  6F6B               	movwf	disk_write@count& (0+255),b
 16596  00245A  EE20 F001          	lfsr	2,1
 16597  00245E  5188               	movf	sync@fs& (0+255),w,b
 16598  002460  26D9               	addwf	fsr2l,f,c
 16599  002462  5189               	movf	(sync@fs+1)& (0+255),w,b
 16600  002464  22DA               	addwfc	fsr2h,f,c
 16601  002466  50DF               	movf	indf2,w,c
 16602  002468  ECFC  F026         	call	_disk_write
 16603                           
 16604                           ;ff.c: 470: fs->fsi_flag = 0;
 16605  00246C  0100               	movlb	0	; () banked
 16606  00246E  EE20 F005          	lfsr	2,5
 16607  002472  5188               	movf	sync@fs& (0+255),w,b
 16608  002474  26D9               	addwf	fsr2l,f,c
 16609  002476  5189               	movf	(sync@fs+1)& (0+255),w,b
 16610  002478  22DA               	addwfc	fsr2h,f,c
 16611  00247A  0E00               	movlw	0
 16612  00247C  6EDF               	movwf	indf2,c
 16613  00247E                     l981:
 16614                           
 16615                           ; BSR set to: 0
 16616                           ;ff.c: 471: }
 16617                           ;ff.c: 473: if (disk_ioctl(fs->drv, 0, (void*)0) != RES_OK)
 16618                           
 16619                           ; BSR set to: 0
 16620  00247E  0E00               	movlw	0
 16621  002480  6E1A               	movwf	disk_ioctl@ctrl,c
 16622  002482  0E00               	movlw	0
 16623  002484  6E1B               	movwf	disk_ioctl@buff,c
 16624  002486  0E00               	movlw	0
 16625  002488  6E1C               	movwf	disk_ioctl@buff+1,c
 16626  00248A  EE20 F001          	lfsr	2,1
 16627  00248E  5188               	movf	sync@fs& (0+255),w,b
 16628  002490  26D9               	addwf	fsr2l,f,c
 16629  002492  5189               	movf	(sync@fs+1)& (0+255),w,b
 16630  002494  22DA               	addwfc	fsr2h,f,c
 16631  002496  50DF               	movf	indf2,w,c
 16632  002498  EC80  F028         	call	_disk_ioctl
 16633  00249C  0900               	iorlw	0
 16634  00249E  B4D8               	btfsc	status,2,c
 16635  0024A0  D003               	goto	l982
 16636                           
 16637                           ;ff.c: 474: res = FR_DISK_ERR;
 16638  0024A2  0E01               	movlw	1
 16639  0024A4  0100               	movlb	0	; () banked
 16640  0024A6  6F8E               	movwf	sync@res& (0+255),b
 16641  0024A8                     l982:
 16642                           
 16643                           ;ff.c: 475: }
 16644                           ;ff.c: 477: return res;
 16645                           
 16646                           ; BSR set to: 0
 16647  0024A8  0100               	movlb	0	; () banked
 16648  0024AA  518E               	movf	sync@res& (0+255),w,b
 16649  0024AC  0012               	return	
 16650  0024AE                     __end_of_sync:
 16651                           	opt stack 0
 16652                           tosu	equ	0xFFF
 16653                           tosh	equ	0xFFE
 16654                           tosl	equ	0xFFD
 16655                           pclath	equ	0xFFA
 16656                           tblptru	equ	0xFF8
 16657                           tblptrh	equ	0xFF7
 16658                           tblptrl	equ	0xFF6
 16659                           tablat	equ	0xFF5
 16660                           prodh	equ	0xFF4
 16661                           prodl	equ	0xFF3
 16662                           intcon	equ	0xFF2
 16663                           intcon2	equ	0xFF1
 16664                           intcon3	equ	0xFF0
 16665                           indf0	equ	0xFEF
 16666                           postinc0	equ	0xFEE
 16667                           fsr0h	equ	0xFEA
 16668                           fsr0l	equ	0xFE9
 16669                           wreg	equ	0xFE8
 16670                           indf1	equ	0xFE7
 16671                           postinc1	equ	0xFE6
 16672                           postdec1	equ	0xFE5
 16673                           fsr1h	equ	0xFE2
 16674                           fsr1l	equ	0xFE1
 16675                           indf2	equ	0xFDF
 16676                           postinc2	equ	0xFDE
 16677                           postdec2	equ	0xFDD
 16678                           plusw2	equ	0xFDB
 16679                           fsr2h	equ	0xFDA
 16680                           fsr2l	equ	0xFD9
 16681                           status	equ	0xFD8
 16682                           
 16683 ;; *************** function _move_window *****************
 16684 ;; Defined at:
 16685 ;;		line 409 in file "bibliotecas/ff.c"
 16686 ;; Parameters:    Size  Location     Type
 16687 ;;  fs              2   17[BANK0 ] PTR struct .
 16688 ;;		 -> NULL(0), 
 16689 ;;  sector          4   19[BANK0 ] unsigned long 
 16690 ;; Auto vars:     Size  Location     Type
 16691 ;;  nf              1   35[BANK0 ] unsigned char 
 16692 ;;  wsect           4   36[BANK0 ] unsigned long 
 16693 ;; Return value:  Size  Location     Type
 16694 ;;                  1    wreg      enum E72
 16695 ;; Registers used:
 16696 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16697 ;; Tracked objects:
 16698 ;;		On entry : 0/0
 16699 ;;		On exit  : 0/0
 16700 ;;		Unchanged: 0/0
 16701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16702 ;;      Params:         0       6       0       0       0       0       0       0       0
 16703 ;;      Locals:         0       5       0       0       0       0       0       0       0
 16704 ;;      Temps:          0      12       0       0       0       0       0       0       0
 16705 ;;      Totals:         0      23       0       0       0       0       0       0       0
 16706 ;;Total ram usage:       23 bytes
 16707 ;; Hardware stack levels used:    1
 16708 ;; Hardware stack levels required when called:    7
 16709 ;; This function calls:
 16710 ;;		_disk_read
 16711 ;;		_disk_write
 16712 ;; This function is called by:
 16713 ;;		_sync
 16714 ;;		_get_fat
 16715 ;;		_put_fat
 16716 ;;		_f_write
 16717 ;;		_f_sync
 16718 ;;		_dir_next
 16719 ;;		_dir_find
 16720 ;;		_dir_read
 16721 ;;		_dir_register
 16722 ;;		_f_open
 16723 ;;		_f_read
 16724 ;; This function uses a non-reentrant model
 16725 ;;
 16726                           
 16727                           	psect	text63
 16728  002CD2                     __ptext63:
 16729                           	opt stack 0
 16730  002CD2                     _move_window:
 16731                           	opt stack 20
 16732                           
 16733                           ;ff.c: 414: DWORD wsect;
 16734                           ;ff.c: 417: wsect = fs->winsect;
 16735                           
 16736                           ; BSR set to: 0
 16737                           ;incstack = 0
 16738  002CD2  0100               	movlb	0	; () banked
 16739  002CD4  EE20 F02A          	lfsr	2,42
 16740  002CD8  5171               	movf	move_window@fs& (0+255),w,b
 16741  002CDA  26D9               	addwf	fsr2l,f,c
 16742  002CDC  5172               	movf	(move_window@fs+1)& (0+255),w,b
 16743  002CDE  22DA               	addwfc	fsr2h,f,c
 16744  002CE0  CFDE F084          	movff	postinc2,move_window@wsect
 16745  002CE4  CFDE F085          	movff	postinc2,move_window@wsect+1
 16746  002CE8  CFDE F086          	movff	postinc2,move_window@wsect+2
 16747  002CEC  CFDE F087          	movff	postinc2,move_window@wsect+3
 16748                           
 16749                           ; BSR set to: 0
 16750                           ;ff.c: 418: if (wsect != sector) {
 16751  002CF0  5173               	movf	move_window@sector& (0+255),w,b
 16752  002CF2  1984               	xorwf	move_window@wsect& (0+255),w,b
 16753  002CF4  E10A               	bnz	u13920
 16754  002CF6  5174               	movf	(move_window@sector+1)& (0+255),w,b
 16755  002CF8  1985               	xorwf	(move_window@wsect+1)& (0+255),w,b
 16756  002CFA  E107               	bnz	u13920
 16757  002CFC  5175               	movf	(move_window@sector+2)& (0+255),w,b
 16758  002CFE  1986               	xorwf	(move_window@wsect+2)& (0+255),w,b
 16759  002D00  E104               	bnz	u13920
 16760  002D02  5176               	movf	(move_window@sector+3)& (0+255),w,b
 16761  002D04  1987               	xorwf	(move_window@wsect+3)& (0+255),w,b
 16762  002D06  B4D8               	btfsc	status,2,c
 16763  002D08  D0CB               	goto	l976
 16764  002D0A                     u13920:
 16765                           
 16766                           ; BSR set to: 0
 16767                           ;ff.c: 420: if (fs->wflag) {
 16768  002D0A  EE20 F004          	lfsr	2,4
 16769  002D0E  5171               	movf	move_window@fs& (0+255),w,b
 16770  002D10  26D9               	addwf	fsr2l,f,c
 16771  002D12  5172               	movf	(move_window@fs+1)& (0+255),w,b
 16772  002D14  22DA               	addwfc	fsr2h,f,c
 16773  002D16  50DF               	movf	indf2,w,c
 16774  002D18  B4D8               	btfsc	status,2,c
 16775  002D1A  D08F               	goto	u13970
 16776                           
 16777                           ; BSR set to: 0
 16778                           ;ff.c: 421: if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 16779  002D1C  0E2E               	movlw	46
 16780  002D1E  2571               	addwf	move_window@fs& (0+255),w,b
 16781  002D20  6F65               	movwf	disk_write@buff& (0+255),b
 16782  002D22  0E00               	movlw	0
 16783  002D24  2172               	addwfc	(move_window@fs+1)& (0+255),w,b
 16784  002D26  6F66               	movwf	(disk_write@buff+1)& (0+255),b
 16785  002D28  C084  F067         	movff	move_window@wsect,disk_write@sector
 16786  002D2C  C085  F068         	movff	move_window@wsect+1,disk_write@sector+1
 16787  002D30  C086  F069         	movff	move_window@wsect+2,disk_write@sector+2
 16788  002D34  C087  F06A         	movff	move_window@wsect+3,disk_write@sector+3
 16789  002D38  0E01               	movlw	1
 16790  002D3A  6F6B               	movwf	disk_write@count& (0+255),b
 16791  002D3C  EE20 F001          	lfsr	2,1
 16792  002D40  5171               	movf	move_window@fs& (0+255),w,b
 16793  002D42  26D9               	addwf	fsr2l,f,c
 16794  002D44  5172               	movf	(move_window@fs+1)& (0+255),w,b
 16795  002D46  22DA               	addwfc	fsr2h,f,c
 16796  002D48  50DF               	movf	indf2,w,c
 16797  002D4A  ECFC  F026         	call	_disk_write
 16798  002D4E  0900               	iorlw	0
 16799  002D50  B4D8               	btfsc	status,2,c
 16800  002D52  D002               	goto	l971
 16801                           
 16802                           ;ff.c: 422: return FR_DISK_ERR;
 16803  002D54  0E01               	movlw	1
 16804  002D56  0012               	return	
 16805  002D58                     l971:
 16806                           
 16807                           ;ff.c: 423: fs->wflag = 0;
 16808  002D58  0100               	movlb	0	; () banked
 16809  002D5A  EE20 F004          	lfsr	2,4
 16810  002D5E  5171               	movf	move_window@fs& (0+255),w,b
 16811  002D60  26D9               	addwf	fsr2l,f,c
 16812  002D62  5172               	movf	(move_window@fs+1)& (0+255),w,b
 16813  002D64  22DA               	addwfc	fsr2h,f,c
 16814  002D66  0E00               	movlw	0
 16815  002D68  6EDF               	movwf	indf2,c
 16816                           
 16817                           ;ff.c: 424: if (wsect < (fs->fatbase + fs->fsize)) {
 16818  002D6A  EE20 F01A          	lfsr	2,26
 16819  002D6E  5171               	movf	move_window@fs& (0+255),w,b
 16820  002D70  26D9               	addwf	fsr2l,f,c
 16821  002D72  5172               	movf	(move_window@fs+1)& (0+255),w,b
 16822  002D74  22DA               	addwfc	fsr2h,f,c
 16823  002D76  CFDE F077          	movff	postinc2,??_move_window
 16824  002D7A  CFDE F078          	movff	postinc2,??_move_window+1
 16825  002D7E  CFDE F079          	movff	postinc2,??_move_window+2
 16826  002D82  CFDE F07A          	movff	postinc2,??_move_window+3
 16827  002D86  EE20 F01E          	lfsr	2,30
 16828  002D8A  5171               	movf	move_window@fs& (0+255),w,b
 16829  002D8C  26D9               	addwf	fsr2l,f,c
 16830  002D8E  5172               	movf	(move_window@fs+1)& (0+255),w,b
 16831  002D90  22DA               	addwfc	fsr2h,f,c
 16832  002D92  CFDE F07B          	movff	postinc2,??_move_window+4
 16833  002D96  CFDE F07C          	movff	postinc2,??_move_window+5
 16834  002D9A  CFDE F07D          	movff	postinc2,??_move_window+6
 16835  002D9E  CFDE F07E          	movff	postinc2,??_move_window+7
 16836  002DA2  5177               	movf	??_move_window& (0+255),w,b
 16837  002DA4  257B               	addwf	(??_move_window+4)& (0+255),w,b
 16838  002DA6  6F7F               	movwf	(??_move_window+8)& (0+255),b
 16839  002DA8  5178               	movf	(??_move_window+1)& (0+255),w,b
 16840  002DAA  217C               	addwfc	(??_move_window+5)& (0+255),w,b
 16841  002DAC  6F80               	movwf	(??_move_window+9)& (0+255),b
 16842  002DAE  5179               	movf	(??_move_window+2)& (0+255),w,b
 16843  002DB0  217D               	addwfc	(??_move_window+6)& (0+255),w,b
 16844  002DB2  6F81               	movwf	(??_move_window+10)& (0+255),b
 16845  002DB4  517A               	movf	(??_move_window+3)& (0+255),w,b
 16846  002DB6  217E               	addwfc	(??_move_window+7)& (0+255),w,b
 16847  002DB8  6F82               	movwf	(??_move_window+11)& (0+255),b
 16848  002DBA  517F               	movf	(??_move_window+8)& (0+255),w,b
 16849  002DBC  5D84               	subwf	move_window@wsect& (0+255),w,b
 16850  002DBE  5180               	movf	(??_move_window+9)& (0+255),w,b
 16851  002DC0  5985               	subwfb	(move_window@wsect+1)& (0+255),w,b
 16852  002DC2  5181               	movf	(??_move_window+10)& (0+255),w,b
 16853  002DC4  5986               	subwfb	(move_window@wsect+2)& (0+255),w,b
 16854  002DC6  5182               	movf	(??_move_window+11)& (0+255),w,b
 16855  002DC8  5987               	subwfb	(move_window@wsect+3)& (0+255),w,b
 16856  002DCA  B0D8               	btfsc	status,0,c
 16857  002DCC  D036               	goto	u13970
 16858                           
 16859                           ; BSR set to: 0
 16860                           ;ff.c: 425: BYTE nf;
 16861                           ;ff.c: 426: for (nf = fs->n_fats; nf > 1; nf--) {
 16862  002DCE  EE20 F003          	lfsr	2,3
 16863  002DD2  5171               	movf	move_window@fs& (0+255),w,b
 16864  002DD4  26D9               	addwf	fsr2l,f,c
 16865  002DD6  5172               	movf	(move_window@fs+1)& (0+255),w,b
 16866  002DD8  22DA               	addwfc	fsr2h,f,c
 16867  002DDA  50DF               	movf	indf2,w,c
 16868  002DDC  6F83               	movwf	move_window@nf& (0+255),b
 16869  002DDE                     l11304:
 16870                           
 16871                           ; BSR set to: 0
 16872  002DDE  0E02               	movlw	2
 16873  002DE0  6183               	cpfslt	move_window@nf& (0+255),b
 16874  002DE2  D001               	goto	l974
 16875  002DE4  D02A               	goto	u13970
 16876  002DE6                     l974:
 16877                           
 16878                           ; BSR set to: 0
 16879                           ;ff.c: 427: wsect += fs->fsize;
 16880                           
 16881                           ; BSR set to: 0
 16882  002DE6  EE20 F01A          	lfsr	2,26
 16883  002DEA  5171               	movf	move_window@fs& (0+255),w,b
 16884  002DEC  26D9               	addwf	fsr2l,f,c
 16885  002DEE  5172               	movf	(move_window@fs+1)& (0+255),w,b
 16886  002DF0  22DA               	addwfc	fsr2h,f,c
 16887  002DF2  50DE               	movf	postinc2,w,c
 16888  002DF4  2784               	addwf	move_window@wsect& (0+255),f,b
 16889  002DF6  50DE               	movf	postinc2,w,c
 16890  002DF8  2385               	addwfc	(move_window@wsect+1)& (0+255),f,b
 16891  002DFA  50DE               	movf	postinc2,w,c
 16892  002DFC  2386               	addwfc	(move_window@wsect+2)& (0+255),f,b
 16893  002DFE  50DD               	movf	postdec2,w,c
 16894  002E00  2387               	addwfc	(move_window@wsect+3)& (0+255),f,b
 16895                           
 16896                           ; BSR set to: 0
 16897                           ;ff.c: 428: disk_write(fs->drv, fs->win, wsect, 1);
 16898  002E02  0E2E               	movlw	46
 16899  002E04  2571               	addwf	move_window@fs& (0+255),w,b
 16900  002E06  6F65               	movwf	disk_write@buff& (0+255),b
 16901  002E08  0E00               	movlw	0
 16902  002E0A  2172               	addwfc	(move_window@fs+1)& (0+255),w,b
 16903  002E0C  6F66               	movwf	(disk_write@buff+1)& (0+255),b
 16904  002E0E  C084  F067         	movff	move_window@wsect,disk_write@sector
 16905  002E12  C085  F068         	movff	move_window@wsect+1,disk_write@sector+1
 16906  002E16  C086  F069         	movff	move_window@wsect+2,disk_write@sector+2
 16907  002E1A  C087  F06A         	movff	move_window@wsect+3,disk_write@sector+3
 16908  002E1E  0E01               	movlw	1
 16909  002E20  6F6B               	movwf	disk_write@count& (0+255),b
 16910  002E22  EE20 F001          	lfsr	2,1
 16911  002E26  5171               	movf	move_window@fs& (0+255),w,b
 16912  002E28  26D9               	addwf	fsr2l,f,c
 16913  002E2A  5172               	movf	(move_window@fs+1)& (0+255),w,b
 16914  002E2C  22DA               	addwfc	fsr2h,f,c
 16915  002E2E  50DF               	movf	indf2,w,c
 16916  002E30  ECFC  F026         	call	_disk_write
 16917  002E34  0100               	movlb	0	; () banked
 16918  002E36  0783               	decf	move_window@nf& (0+255),f,b
 16919  002E38  D7D2               	goto	l11304
 16920  002E3A                     u13970:
 16921                           
 16922                           ; BSR set to: 0
 16923                           ;ff.c: 429: }
 16924                           ;ff.c: 430: }
 16925                           ;ff.c: 431: }
 16926                           ;ff.c: 433: if (sector) {
 16927                           
 16928                           ; BSR set to: 0
 16929                           
 16930                           ; BSR set to: 0
 16931                           
 16932                           ; BSR set to: 0
 16933  002E3A  5173               	movf	move_window@sector& (0+255),w,b
 16934  002E3C  1174               	iorwf	(move_window@sector+1)& (0+255),w,b
 16935  002E3E  1175               	iorwf	(move_window@sector+2)& (0+255),w,b
 16936  002E40  1176               	iorwf	(move_window@sector+3)& (0+255),w,b
 16937  002E42  B4D8               	btfsc	status,2,c
 16938  002E44  D02D               	goto	l976
 16939                           
 16940                           ; BSR set to: 0
 16941                           ;ff.c: 434: if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 16942  002E46  0E2E               	movlw	46
 16943  002E48  2571               	addwf	move_window@fs& (0+255),w,b
 16944  002E4A  6F68               	movwf	disk_read@buff& (0+255),b
 16945  002E4C  0E00               	movlw	0
 16946  002E4E  2172               	addwfc	(move_window@fs+1)& (0+255),w,b
 16947  002E50  6F69               	movwf	(disk_read@buff+1)& (0+255),b
 16948  002E52  C073  F06A         	movff	move_window@sector,disk_read@sector
 16949  002E56  C074  F06B         	movff	move_window@sector+1,disk_read@sector+1
 16950  002E5A  C075  F06C         	movff	move_window@sector+2,disk_read@sector+2
 16951  002E5E  C076  F06D         	movff	move_window@sector+3,disk_read@sector+3
 16952  002E62  0E01               	movlw	1
 16953  002E64  6F6E               	movwf	disk_read@count& (0+255),b
 16954  002E66  EE20 F001          	lfsr	2,1
 16955  002E6A  5171               	movf	move_window@fs& (0+255),w,b
 16956  002E6C  26D9               	addwf	fsr2l,f,c
 16957  002E6E  5172               	movf	(move_window@fs+1)& (0+255),w,b
 16958  002E70  22DA               	addwfc	fsr2h,f,c
 16959  002E72  50DF               	movf	indf2,w,c
 16960  002E74  EC24  F027         	call	_disk_read
 16961  002E78  0900               	iorlw	0
 16962  002E7A  B4D8               	btfsc	status,2,c
 16963  002E7C  D002               	goto	l977
 16964                           
 16965                           ;ff.c: 435: return FR_DISK_ERR;
 16966  002E7E  0E01               	movlw	1
 16967  002E80  0012               	return	
 16968  002E82                     l977:
 16969                           
 16970                           ;ff.c: 436: fs->winsect = sector;
 16971  002E82  0100               	movlb	0	; () banked
 16972  002E84  EE20 F02A          	lfsr	2,42
 16973  002E88  5171               	movf	move_window@fs& (0+255),w,b
 16974  002E8A  26D9               	addwf	fsr2l,f,c
 16975  002E8C  5172               	movf	(move_window@fs+1)& (0+255),w,b
 16976  002E8E  22DA               	addwfc	fsr2h,f,c
 16977  002E90  C073  FFDE         	movff	move_window@sector,postinc2
 16978  002E94  C074  FFDE         	movff	move_window@sector+1,postinc2
 16979  002E98  C075  FFDE         	movff	move_window@sector+2,postinc2
 16980  002E9C  C076  FFDE         	movff	move_window@sector+3,postinc2
 16981  002EA0                     l976:
 16982                           
 16983                           ; BSR set to: 0
 16984                           ;ff.c: 437: }
 16985                           ;ff.c: 438: }
 16986                           ;ff.c: 440: return FR_OK;
 16987                           
 16988                           ; BSR set to: 0
 16989                           
 16990                           ; BSR set to: 0
 16991  002EA0  0E00               	movlw	0
 16992  002EA2  0012               	return	
 16993  002EA4                     __end_of_move_window:
 16994                           	opt stack 0
 16995                           tosu	equ	0xFFF
 16996                           tosh	equ	0xFFE
 16997                           tosl	equ	0xFFD
 16998                           pclath	equ	0xFFA
 16999                           tblptru	equ	0xFF8
 17000                           tblptrh	equ	0xFF7
 17001                           tblptrl	equ	0xFF6
 17002                           tablat	equ	0xFF5
 17003                           prodh	equ	0xFF4
 17004                           prodl	equ	0xFF3
 17005                           intcon	equ	0xFF2
 17006                           intcon2	equ	0xFF1
 17007                           intcon3	equ	0xFF0
 17008                           indf0	equ	0xFEF
 17009                           postinc0	equ	0xFEE
 17010                           fsr0h	equ	0xFEA
 17011                           fsr0l	equ	0xFE9
 17012                           wreg	equ	0xFE8
 17013                           indf1	equ	0xFE7
 17014                           postinc1	equ	0xFE6
 17015                           postdec1	equ	0xFE5
 17016                           fsr1h	equ	0xFE2
 17017                           fsr1l	equ	0xFE1
 17018                           indf2	equ	0xFDF
 17019                           postinc2	equ	0xFDE
 17020                           postdec2	equ	0xFDD
 17021                           plusw2	equ	0xFDB
 17022                           fsr2h	equ	0xFDA
 17023                           fsr2l	equ	0xFD9
 17024                           status	equ	0xFD8
 17025                           
 17026 ;; *************** function _disk_write *****************
 17027 ;; Defined at:
 17028 ;;		line 153 in file "bibliotecas/diskio.c"
 17029 ;; Parameters:    Size  Location     Type
 17030 ;;  drv             1    wreg     unsigned char 
 17031 ;;  buff            2    5[BANK0 ] PTR const unsigned char 
 17032 ;;		 -> NULL(0), STR_10(12), 
 17033 ;;  sector          4    7[BANK0 ] unsigned long 
 17034 ;;  count           1   11[BANK0 ] unsigned char 
 17035 ;; Auto vars:     Size  Location     Type
 17036 ;;  drv             1   12[BANK0 ] unsigned char 
 17037 ;;  result          2    0        int 
 17038 ;;  res             1   13[BANK0 ] enum E22
 17039 ;; Return value:  Size  Location     Type
 17040 ;;                  1    wreg      enum E22
 17041 ;; Registers used:
 17042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17043 ;; Tracked objects:
 17044 ;;		On entry : 0/0
 17045 ;;		On exit  : 0/0
 17046 ;;		Unchanged: 0/0
 17047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17048 ;;      Params:         0       7       0       0       0       0       0       0       0
 17049 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17050 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17051 ;;      Totals:         0       9       0       0       0       0       0       0       0
 17052 ;;Total ram usage:        9 bytes
 17053 ;; Hardware stack levels used:    1
 17054 ;; Hardware stack levels required when called:    6
 17055 ;; This function calls:
 17056 ;;		_sdc_disk_write
 17057 ;; This function is called by:
 17058 ;;		_move_window
 17059 ;;		_sync
 17060 ;;		_f_write
 17061 ;; This function uses a non-reentrant model
 17062 ;;
 17063                           
 17064                           	psect	text64
 17065  004DF8                     __ptext64:
 17066                           	opt stack 0
 17067  004DF8                     _disk_write:
 17068                           	opt stack 20
 17069                           
 17070                           ;incstack = 0
 17071                           ;disk_write@drv stored from wreg
 17072  004DF8  0100               	movlb	0	; () banked
 17073  004DFA  6F6C               	movwf	disk_write@drv& (0+255),b
 17074                           
 17075                           ;diskio.c: 160: DRESULT res;
 17076                           ;diskio.c: 161: int result;
 17077                           ;diskio.c: 163: switch (drv) {
 17078  004DFC  D018               	goto	l911
 17079  004DFE                     l912:
 17080                           
 17081                           ; BSR set to: 0
 17082                           ;diskio.c: 168: return res;
 17083  004DFE  516D               	movf	disk_write@res& (0+255),w,b
 17084  004E00  0012               	return	
 17085  004E02                     
 17086                           ; BSR set to: 0
 17087                           ;diskio.c: 171: res = sdc_disk_write(buff, sector, count);
 17088                           
 17089                           ; BSR set to: 0
 17090  004E02  C065  F023         	movff	disk_write@buff,sdc_disk_write@p_buff
 17091  004E06  C066  F024         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 17092  004E0A  C067  F025         	movff	disk_write@sector,sdc_disk_write@sector
 17093  004E0E  C068  F026         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 17094  004E12  C069  F027         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 17095  004E16  C06A  F028         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 17096  004E1A  C06B  F029         	movff	disk_write@count,sdc_disk_write@count
 17097  004E1E  EC65  F01A         	call	_sdc_disk_write	;wreg free
 17098  004E22  0100               	movlb	0	; () banked
 17099  004E24  6F6D               	movwf	disk_write@res& (0+255),b
 17100                           
 17101                           ; BSR set to: 0
 17102                           ;diskio.c: 174: return res;
 17103  004E26  516D               	movf	disk_write@res& (0+255),w,b
 17104                           
 17105                           ; BSR set to: 0
 17106  004E28  0012               	return	
 17107  004E2A                     
 17108                           ; BSR set to: 0
 17109                           ;diskio.c: 180: return res;
 17110                           
 17111                           ; BSR set to: 0
 17112  004E2A  516D               	movf	disk_write@res& (0+255),w,b
 17113                           
 17114                           ; BSR set to: 0
 17115  004E2C  0012               	return	
 17116  004E2E                     l911:
 17117                           
 17118                           ; BSR set to: 0
 17119  004E2E  0100               	movlb	0	; () banked
 17120  004E30  516C               	movf	disk_write@drv& (0+255),w,b
 17121                           
 17122                           ; Switch size 1, requested type "space"
 17123                           ; Number of cases is 3, Range of values is 0 to 2
 17124                           ; switch strategies available:
 17125                           ; Name         Instructions Cycles
 17126                           ; simple_byte           10     6 (average)
 17127                           ;	Chosen strategy is simple_byte
 17128  004E32  0A00               	xorlw	0	; case 0
 17129  004E34  B4D8               	btfsc	status,2,c
 17130  004E36  D7E3               	goto	l912
 17131  004E38  0A01               	xorlw	1	; case 1
 17132  004E3A  B4D8               	btfsc	status,2,c
 17133  004E3C  D7E2               	goto	l914
 17134  004E3E  0A03               	xorlw	3	; case 2
 17135  004E40  B4D8               	btfsc	status,2,c
 17136  004E42  D7F3               	goto	l915
 17137                           
 17138                           ; BSR set to: 0
 17139                           ;diskio.c: 182: return RES_PARERR;
 17140                           
 17141                           ; BSR set to: 0
 17142  004E44  0E04               	movlw	4
 17143  004E46  0012               	return	
 17144  004E48                     __end_of_disk_write:
 17145                           	opt stack 0
 17146                           tosu	equ	0xFFF
 17147                           tosh	equ	0xFFE
 17148                           tosl	equ	0xFFD
 17149                           pclath	equ	0xFFA
 17150                           tblptru	equ	0xFF8
 17151                           tblptrh	equ	0xFF7
 17152                           tblptrl	equ	0xFF6
 17153                           tablat	equ	0xFF5
 17154                           prodh	equ	0xFF4
 17155                           prodl	equ	0xFF3
 17156                           intcon	equ	0xFF2
 17157                           intcon2	equ	0xFF1
 17158                           intcon3	equ	0xFF0
 17159                           indf0	equ	0xFEF
 17160                           postinc0	equ	0xFEE
 17161                           fsr0h	equ	0xFEA
 17162                           fsr0l	equ	0xFE9
 17163                           wreg	equ	0xFE8
 17164                           indf1	equ	0xFE7
 17165                           postinc1	equ	0xFE6
 17166                           postdec1	equ	0xFE5
 17167                           fsr1h	equ	0xFE2
 17168                           fsr1l	equ	0xFE1
 17169                           indf2	equ	0xFDF
 17170                           postinc2	equ	0xFDE
 17171                           postdec2	equ	0xFDD
 17172                           plusw2	equ	0xFDB
 17173                           fsr2h	equ	0xFDA
 17174                           fsr2l	equ	0xFD9
 17175                           status	equ	0xFD8
 17176                           
 17177 ;; *************** function _sdc_disk_write *****************
 17178 ;; Defined at:
 17179 ;;		line 545 in file "bibliotecas/SDCard.c"
 17180 ;; Parameters:    Size  Location     Type
 17181 ;;  p_buff          2   34[COMRAM] PTR const unsigned char 
 17182 ;;		 -> NULL(0), STR_10(12), 
 17183 ;;  sector          4   36[COMRAM] unsigned long 
 17184 ;;  count           1   40[COMRAM] unsigned char 
 17185 ;; Auto vars:     Size  Location     Type
 17186 ;;  j               2    2[BANK0 ] int 
 17187 ;;  i               2    0[BANK0 ] int 
 17188 ;;  buff            1    4[BANK0 ] unsigned char 
 17189 ;;  res             1    0        enum E22
 17190 ;; Return value:  Size  Location     Type
 17191 ;;                  1    wreg      enum E22
 17192 ;; Registers used:
 17193 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17194 ;; Tracked objects:
 17195 ;;		On entry : 0/0
 17196 ;;		On exit  : 0/0
 17197 ;;		Unchanged: 0/0
 17198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17199 ;;      Params:         7       0       0       0       0       0       0       0       0
 17200 ;;      Locals:         0       5       0       0       0       0       0       0       0
 17201 ;;      Temps:          4       0       0       0       0       0       0       0       0
 17202 ;;      Totals:        11       5       0       0       0       0       0       0       0
 17203 ;;Total ram usage:       16 bytes
 17204 ;; Hardware stack levels used:    1
 17205 ;; Hardware stack levels required when called:    5
 17206 ;; This function calls:
 17207 ;;		_command
 17208 ;;		_dummy_clocks
 17209 ;;		_escreve_dado_SPI
 17210 ;;		_escreve_frase_ram_lcd
 17211 ;;		_posicao_cursor_lcd
 17212 ;;		_proceed
 17213 ;;		_response
 17214 ;; This function is called by:
 17215 ;;		_disk_write
 17216 ;; This function uses a non-reentrant model
 17217 ;;
 17218                           
 17219                           	psect	text65
 17220  0034CA                     __ptext65:
 17221                           	opt stack 0
 17222  0034CA                     _sdc_disk_write:
 17223                           	opt stack 20
 17224                           
 17225                           ;SDCard.c: 547: DRESULT res;
 17226                           ;SDCard.c: 548: unsigned char buff;
 17227                           ;SDCard.c: 549: int i=0,j;
 17228                           
 17229                           ; BSR set to: 0
 17230                           ;incstack = 0
 17231  0034CA  0E00               	movlw	0
 17232  0034CC  0100               	movlb	0	; () banked
 17233  0034CE  6F61               	movwf	(sdc_disk_write@i+1)& (0+255),b
 17234  0034D0  0E00               	movlw	0
 17235  0034D2  6F60               	movwf	sdc_disk_write@i& (0+255),b
 17236                           
 17237                           ; BSR set to: 0
 17238                           ;SDCard.c: 553: dummy_clocks(8);
 17239  0034D4  0E08               	movlw	8
 17240  0034D6  EC90  F027         	call	_dummy_clocks
 17241                           
 17242                           ;SDCard.c: 554: command(0X58, sector*512, 0X00);
 17243  0034DA  C025  F02A         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17244  0034DE  C026  F02B         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17245  0034E2  C027  F02C         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17246  0034E6  C028  F02D         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17247  0034EA  0E09               	movlw	9
 17248  0034EC                     u13755:
 17249  0034EC  90D8               	bcf	status,0,c
 17250  0034EE  362A               	rlcf	??_sdc_disk_write,f,c
 17251  0034F0  362B               	rlcf	??_sdc_disk_write+1,f,c
 17252  0034F2  362C               	rlcf	??_sdc_disk_write+2,f,c
 17253  0034F4  362D               	rlcf	??_sdc_disk_write+3,f,c
 17254  0034F6  2EE8               	decfsz	wreg,f,c
 17255  0034F8  D7F9               	goto	u13755
 17256  0034FA  C02A  F01C         	movff	??_sdc_disk_write,command@arg
 17257  0034FE  C02B  F01D         	movff	??_sdc_disk_write+1,command@arg+1
 17258  003502  C02C  F01E         	movff	??_sdc_disk_write+2,command@arg+2
 17259  003506  C02D  F01F         	movff	??_sdc_disk_write+3,command@arg+3
 17260  00350A  0E00               	movlw	0
 17261  00350C  6E20               	movwf	command@CRC,c
 17262  00350E  0E58               	movlw	88
 17263  003510  ECAF  F027         	call	_command
 17264                           
 17265                           ;SDCard.c: 555: proceed();
 17266  003514  EC7B  F029         	call	_proceed	;wreg free
 17267  003518                     
 17268                           ;SDCard.c: 557: buff = response();
 17269  003518  EC75  F029         	call	_response	;wreg free
 17270  00351C  0100               	movlb	0	; () banked
 17271  00351E  6F64               	movwf	sdc_disk_write@buff& (0+255),b
 17272                           
 17273                           ;SDCard.c: 558: }while(buff!=0X00);
 17274  003520  5164               	movf	sdc_disk_write@buff& (0+255),w,b
 17275  003522  A4D8               	btfss	status,2,c
 17276  003524  D7F9               	goto	l359
 17277                           
 17278                           ; BSR set to: 0
 17279                           ;SDCard.c: 560: _delay((unsigned long)((2000)*(48000000/4000.0)));
 17280                           
 17281                           ; BSR set to: 0
 17282  003526  0E7A               	movlw	122
 17283  003528  6E2B               	movwf	(??_sdc_disk_write+1)& (0+255),c
 17284  00352A  0EC1               	movlw	193
 17285  00352C  6E2A               	movwf	??_sdc_disk_write& (0+255),c
 17286  00352E  0E82               	movlw	130
 17287  003530                     u19207:
 17288  003530  2EE8               	decfsz	wreg,f,c
 17289  003532  D7FE               	bra	u19207
 17290  003534  2E2A               	decfsz	??_sdc_disk_write& (0+255),f,c
 17291  003536  D7FC               	bra	u19207
 17292  003538  2E2B               	decfsz	(??_sdc_disk_write+1)& (0+255),f,c
 17293  00353A  D7FA               	bra	u19207
 17294                           
 17295                           ;SDCard.c: 563: dummy_clocks(8);
 17296  00353C  0E08               	movlw	8
 17297  00353E  EC90  F027         	call	_dummy_clocks
 17298                           
 17299                           ;SDCard.c: 565: escreve_dado_SPI(0XFE);
 17300  003542  0EFE               	movlw	254
 17301  003544  EC4C  F027         	call	_escreve_dado_SPI
 17302                           
 17303                           ;SDCard.c: 567: for(j=0;j<512;j++)
 17304  003548  0E00               	movlw	0
 17305  00354A  0100               	movlb	0	; () banked
 17306  00354C  6F63               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17307  00354E  0E00               	movlw	0
 17308  003550  6F62               	movwf	sdc_disk_write@j& (0+255),b
 17309  003552                     l11102:
 17310                           
 17311                           ; BSR set to: 0
 17312  003552  BF63               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17313  003554  D004               	goto	l361
 17314  003556  0E02               	movlw	2
 17315  003558  5D63               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17316  00355A  B0D8               	btfsc	status,0,c
 17317  00355C  D02E               	goto	u13790
 17318  00355E                     l361:
 17319                           
 17320                           ; BSR set to: 0
 17321                           ;SDCard.c: 568: {
 17322                           ;SDCard.c: 569: posicao_cursor_lcd(1,0);
 17323                           
 17324                           ; BSR set to: 0
 17325  00355E  0E00               	movlw	0
 17326  003560  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 17327  003562  0E01               	movlw	1
 17328  003564  ECD0  F024         	call	_posicao_cursor_lcd
 17329                           
 17330                           ;SDCard.c: 570: escreve_frase_ram_lcd(*p_buff);
 17331  003568  C023  FFF6         	movff	sdc_disk_write@p_buff,tblptrl
 17332  00356C  C024  FFF7         	movff	sdc_disk_write@p_buff+1,tblptrh
 17333  003570                     	if	0	;tblptru may be non-zero
 17334  003570                     	endif
 17335  003570                     	if	0	;tblptru may be non-zero
 17336  003570                     	endif
 17337  003570  0008               	tblrd		*
 17338  003572  50F5               	movf	tablat,w,c
 17339  003574  6E2A               	movwf	??_sdc_disk_write& (0+255),c
 17340  003576  6A2B               	clrf	(??_sdc_disk_write+1)& (0+255),c
 17341  003578  C02A  F01D         	movff	??_sdc_disk_write,escreve_frase_ram_lcd@buffer
 17342  00357C  C02B  F01E         	movff	??_sdc_disk_write+1,escreve_frase_ram_lcd@buffer+1
 17343  003580  ECAB  F026         	call	_escreve_frase_ram_lcd	;wreg free
 17344                           
 17345                           ;SDCard.c: 571: if(*p_buff!='\0')
 17346  003584  C023  FFF6         	movff	sdc_disk_write@p_buff,tblptrl
 17347  003588  C024  FFF7         	movff	sdc_disk_write@p_buff+1,tblptrh
 17348  00358C                     	if	0	;tblptru may be non-zero
 17349  00358C                     	endif
 17350  00358C                     	if	0	;tblptru may be non-zero
 17351  00358C                     	endif
 17352  00358C  0008               	tblrd		*
 17353  00358E  50F5               	movf	tablat,w,c
 17354  003590  0900               	iorlw	0
 17355  003592  B4D8               	btfsc	status,2,c
 17356  003594  D00B               	goto	l363
 17357                           
 17358                           ;SDCard.c: 572: {
 17359                           ;SDCard.c: 573: escreve_dado_SPI(*p_buff);
 17360  003596  C023  FFF6         	movff	sdc_disk_write@p_buff,tblptrl
 17361  00359A  C024  FFF7         	movff	sdc_disk_write@p_buff+1,tblptrh
 17362  00359E                     	if	0	;tblptru may be non-zero
 17363  00359E                     	endif
 17364  00359E                     	if	0	;tblptru may be non-zero
 17365  00359E                     	endif
 17366  00359E  0008               	tblrd		*
 17367  0035A0  50F5               	movf	tablat,w,c
 17368  0035A2  EC4C  F027         	call	_escreve_dado_SPI
 17369                           
 17370                           ;SDCard.c: 574: p_buff++;
 17371  0035A6  4A23               	infsnz	sdc_disk_write@p_buff,f,c
 17372  0035A8  2A24               	incf	sdc_disk_write@p_buff+1,f,c
 17373                           
 17374                           ;SDCard.c: 575: }
 17375  0035AA  D003               	goto	l364
 17376  0035AC                     l363:
 17377                           
 17378                           ;SDCard.c: 576: else
 17379                           ;SDCard.c: 577: escreve_dado_SPI(0x00);
 17380  0035AC  0E00               	movlw	0
 17381  0035AE  EC4C  F027         	call	_escreve_dado_SPI
 17382  0035B2                     l364:
 17383  0035B2  0100               	movlb	0	; () banked
 17384  0035B4  4B62               	infsnz	sdc_disk_write@j& (0+255),f,b
 17385  0035B6  2B63               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17386  0035B8  D7CC               	goto	l11102
 17387  0035BA                     u13790:
 17388                           
 17389                           ; BSR set to: 0
 17390                           ;SDCard.c: 578: }
 17391                           ;SDCard.c: 579: escreve_dado_SPI(0XFF);
 17392                           
 17393                           ; BSR set to: 0
 17394  0035BA  0EFF               	movlw	255
 17395  0035BC  EC4C  F027         	call	_escreve_dado_SPI
 17396                           
 17397                           ;SDCard.c: 580: escreve_dado_SPI(0XFF);
 17398  0035C0  0EFF               	movlw	255
 17399  0035C2  EC4C  F027         	call	_escreve_dado_SPI
 17400                           
 17401                           ;SDCard.c: 582: proceed();
 17402  0035C6  EC7B  F029         	call	_proceed	;wreg free
 17403                           
 17404                           ;SDCard.c: 584: _delay((unsigned long)((1000)*(48000000/4000.0)));
 17405  0035CA  0E3D               	movlw	61
 17406  0035CC  6E2B               	movwf	(??_sdc_disk_write+1)& (0+255),c
 17407  0035CE  0EE1               	movlw	225
 17408  0035D0  6E2A               	movwf	??_sdc_disk_write& (0+255),c
 17409  0035D2  0E40               	movlw	64
 17410  0035D4                     u19217:
 17411  0035D4  2EE8               	decfsz	wreg,f,c
 17412  0035D6  D7FE               	bra	u19217
 17413  0035D8  2E2A               	decfsz	??_sdc_disk_write& (0+255),f,c
 17414  0035DA  D7FC               	bra	u19217
 17415  0035DC  2E2B               	decfsz	(??_sdc_disk_write+1)& (0+255),f,c
 17416  0035DE  D7FA               	bra	u19217
 17417                           
 17418                           ;SDCard.c: 586: dummy_clocks(8);
 17419  0035E0  0E08               	movlw	8
 17420  0035E2  EC90  F027         	call	_dummy_clocks
 17421                           
 17422                           ;SDCard.c: 588: command(0X4D,0X00000000,0XFF);
 17423  0035E6  0E00               	movlw	0
 17424  0035E8  6E1C               	movwf	command@arg,c
 17425  0035EA  0E00               	movlw	0
 17426  0035EC  6E1D               	movwf	command@arg+1,c
 17427  0035EE  0E00               	movlw	0
 17428  0035F0  6E1E               	movwf	command@arg+2,c
 17429  0035F2  0E00               	movlw	0
 17430  0035F4  6E1F               	movwf	command@arg+3,c
 17431  0035F6  0EFF               	movlw	255
 17432  0035F8  6E20               	movwf	command@CRC,c
 17433  0035FA  0E4D               	movlw	77
 17434  0035FC  ECAF  F027         	call	_command
 17435                           
 17436                           ;SDCard.c: 589: proceed();
 17437  003600  EC7B  F029         	call	_proceed	;wreg free
 17438  003604                     
 17439                           ;SDCard.c: 591: buff = response();
 17440  003604  EC75  F029         	call	_response	;wreg free
 17441  003608  0100               	movlb	0	; () banked
 17442  00360A  6F64               	movwf	sdc_disk_write@buff& (0+255),b
 17443                           
 17444                           ; BSR set to: 0
 17445                           ;SDCard.c: 592: }while(buff!=0X00);
 17446  00360C  5164               	movf	sdc_disk_write@buff& (0+255),w,b
 17447  00360E  A4D8               	btfss	status,2,c
 17448  003610  D7F9               	goto	l365
 17449                           
 17450                           ; BSR set to: 0
 17451                           ;SDCard.c: 594: return RES_OK;
 17452                           
 17453                           ; BSR set to: 0
 17454  003612  0E00               	movlw	0
 17455  003614  0012               	return	
 17456  003616                     __end_of_sdc_disk_write:
 17457                           	opt stack 0
 17458                           tosu	equ	0xFFF
 17459                           tosh	equ	0xFFE
 17460                           tosl	equ	0xFFD
 17461                           pclath	equ	0xFFA
 17462                           tblptru	equ	0xFF8
 17463                           tblptrh	equ	0xFF7
 17464                           tblptrl	equ	0xFF6
 17465                           tablat	equ	0xFF5
 17466                           prodh	equ	0xFF4
 17467                           prodl	equ	0xFF3
 17468                           intcon	equ	0xFF2
 17469                           intcon2	equ	0xFF1
 17470                           intcon3	equ	0xFF0
 17471                           indf0	equ	0xFEF
 17472                           postinc0	equ	0xFEE
 17473                           fsr0h	equ	0xFEA
 17474                           fsr0l	equ	0xFE9
 17475                           wreg	equ	0xFE8
 17476                           indf1	equ	0xFE7
 17477                           postinc1	equ	0xFE6
 17478                           postdec1	equ	0xFE5
 17479                           fsr1h	equ	0xFE2
 17480                           fsr1l	equ	0xFE1
 17481                           indf2	equ	0xFDF
 17482                           postinc2	equ	0xFDE
 17483                           postdec2	equ	0xFDD
 17484                           plusw2	equ	0xFDB
 17485                           fsr2h	equ	0xFDA
 17486                           fsr2l	equ	0xFD9
 17487                           status	equ	0xFD8
 17488                           
 17489 ;; *************** function _posicao_cursor_lcd *****************
 17490 ;; Defined at:
 17491 ;;		line 271 in file "bibliotecas/display_lcd.c"
 17492 ;; Parameters:    Size  Location     Type
 17493 ;;  linha           1    wreg     unsigned char 
 17494 ;;  coluna          1   28[COMRAM] unsigned char 
 17495 ;; Auto vars:     Size  Location     Type
 17496 ;;  linha           1   29[COMRAM] unsigned char 
 17497 ;;  endereco        1   30[COMRAM] unsigned char 
 17498 ;; Return value:  Size  Location     Type
 17499 ;;                  1    wreg      void 
 17500 ;; Registers used:
 17501 ;;		wreg, status,2, status,0, cstack
 17502 ;; Tracked objects:
 17503 ;;		On entry : 0/0
 17504 ;;		On exit  : 0/0
 17505 ;;		Unchanged: 0/0
 17506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17507 ;;      Params:         1       0       0       0       0       0       0       0       0
 17508 ;;      Locals:         2       0       0       0       0       0       0       0       0
 17509 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17510 ;;      Totals:         3       0       0       0       0       0       0       0       0
 17511 ;;Total ram usage:        3 bytes
 17512 ;; Hardware stack levels used:    1
 17513 ;; Hardware stack levels required when called:    4
 17514 ;; This function calls:
 17515 ;;		_endereco_cursor_lcd
 17516 ;; This function is called by:
 17517 ;;		_gps
 17518 ;;		_SDCard
 17519 ;;		_sdc_disk_write
 17520 ;;		_disk_status
 17521 ;;		_sdc_reset
 17522 ;;		_sdc_disk_initialize
 17523 ;;		_inicializa_SPI
 17524 ;;		_ReadSPI_
 17525 ;;		_leitura_chave
 17526 ;;		_disk_initialize
 17527 ;; This function uses a non-reentrant model
 17528 ;;
 17529                           
 17530                           	psect	text66
 17531  0049A0                     __ptext66:
 17532                           	opt stack 0
 17533  0049A0                     _posicao_cursor_lcd:
 17534                           	opt stack 24
 17535                           
 17536                           ; BSR set to: 0
 17537                           ;incstack = 0
 17538                           ;posicao_cursor_lcd@linha stored from wreg
 17539  0049A0  6E1E               	movwf	posicao_cursor_lcd@linha,c
 17540                           
 17541                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 17542  0049A2  0E00               	movlw	0
 17543  0049A4  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 17544                           
 17545                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 17546  0049A6  0E11               	movlw	17
 17547  0049A8  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 17548  0049AA  D02F               	goto	l572
 17549  0049AC  D01E               	goto	l573
 17550  0049AE                     l574:
 17551                           
 17552                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 17553  0049AE  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 17554                           
 17555                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 17556  0049B2  501F               	movf	posicao_cursor_lcd@endereco,w,c
 17557  0049B4  EC08  F025         	call	_endereco_cursor_lcd
 17558                           
 17559                           ;display_lcd.c: 284: break;
 17560  0049B8  D026               	goto	l575
 17561  0049BA                     
 17562                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 17563  0049BA  501D               	movf	posicao_cursor_lcd@coluna,w,c
 17564  0049BC  0F40               	addlw	64
 17565  0049BE  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 17566                           
 17567                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 17568  0049C0  501F               	movf	posicao_cursor_lcd@endereco,w,c
 17569  0049C2  EC08  F025         	call	_endereco_cursor_lcd
 17570                           
 17571                           ;display_lcd.c: 289: break;
 17572  0049C6  D01F               	goto	l575
 17573  0049C8                     
 17574                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 17575  0049C8  501D               	movf	posicao_cursor_lcd@coluna,w,c
 17576  0049CA  0F14               	addlw	20
 17577  0049CC  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 17578                           
 17579                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 17580  0049CE  501F               	movf	posicao_cursor_lcd@endereco,w,c
 17581  0049D0  EC08  F025         	call	_endereco_cursor_lcd
 17582                           
 17583                           ;display_lcd.c: 294: break;
 17584  0049D4  D018               	goto	l575
 17585  0049D6                     
 17586                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 17587  0049D6  501D               	movf	posicao_cursor_lcd@coluna,w,c
 17588  0049D8  0F54               	addlw	84
 17589  0049DA  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 17590                           
 17591                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 17592  0049DC  501F               	movf	posicao_cursor_lcd@endereco,w,c
 17593  0049DE  EC08  F025         	call	_endereco_cursor_lcd
 17594                           
 17595                           ;display_lcd.c: 299: break;
 17596  0049E2  D011               	goto	l575
 17597  0049E4                     
 17598                           ;display_lcd.c: 302: endereco = 0x00U;
 17599  0049E4  0E00               	movlw	0
 17600  0049E6  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 17601                           
 17602                           ;display_lcd.c: 304: }
 17603                           
 17604                           ;display_lcd.c: 303: break;
 17605  0049E8  D00E               	goto	l575
 17606  0049EA                     l573:
 17607  0049EA  501E               	movf	posicao_cursor_lcd@linha,w,c
 17608                           
 17609                           ; Switch size 1, requested type "space"
 17610                           ; Number of cases is 4, Range of values is 1 to 4
 17611                           ; switch strategies available:
 17612                           ; Name         Instructions Cycles
 17613                           ; simple_byte           13     7 (average)
 17614                           ;	Chosen strategy is simple_byte
 17615  0049EC  0A01               	xorlw	1	; case 1
 17616  0049EE  B4D8               	btfsc	status,2,c
 17617  0049F0  D7DE               	goto	l574
 17618  0049F2  0A03               	xorlw	3	; case 2
 17619  0049F4  B4D8               	btfsc	status,2,c
 17620  0049F6  D7E1               	goto	l576
 17621  0049F8  0A01               	xorlw	1	; case 3
 17622  0049FA  B4D8               	btfsc	status,2,c
 17623  0049FC  D7E5               	goto	l577
 17624  0049FE  0A07               	xorlw	7	; case 4
 17625  004A00  B4D8               	btfsc	status,2,c
 17626  004A02  D7E9               	goto	l578
 17627  004A04  D7EF               	goto	l579
 17628  004A06                     l575:
 17629                           
 17630                           ;display_lcd.c: 306: coluna++;
 17631  004A06  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 17632                           
 17633                           ;display_lcd.c: 307: }
 17634  004A08  0012               	return	
 17635  004A0A                     l572:
 17636                           
 17637                           ;display_lcd.c: 308: else
 17638                           ;display_lcd.c: 309: {
 17639                           ;display_lcd.c: 310: endereco = 0x00U;
 17640  004A0A  0E00               	movlw	0
 17641  004A0C  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 17642  004A0E  0012               	return	
 17643  004A10                     __end_of_posicao_cursor_lcd:
 17644                           	opt stack 0
 17645                           tosu	equ	0xFFF
 17646                           tosh	equ	0xFFE
 17647                           tosl	equ	0xFFD
 17648                           pclath	equ	0xFFA
 17649                           tblptru	equ	0xFF8
 17650                           tblptrh	equ	0xFF7
 17651                           tblptrl	equ	0xFF6
 17652                           tablat	equ	0xFF5
 17653                           prodh	equ	0xFF4
 17654                           prodl	equ	0xFF3
 17655                           intcon	equ	0xFF2
 17656                           intcon2	equ	0xFF1
 17657                           intcon3	equ	0xFF0
 17658                           indf0	equ	0xFEF
 17659                           postinc0	equ	0xFEE
 17660                           fsr0h	equ	0xFEA
 17661                           fsr0l	equ	0xFE9
 17662                           wreg	equ	0xFE8
 17663                           indf1	equ	0xFE7
 17664                           postinc1	equ	0xFE6
 17665                           postdec1	equ	0xFE5
 17666                           fsr1h	equ	0xFE2
 17667                           fsr1l	equ	0xFE1
 17668                           indf2	equ	0xFDF
 17669                           postinc2	equ	0xFDE
 17670                           postdec2	equ	0xFDD
 17671                           plusw2	equ	0xFDB
 17672                           fsr2h	equ	0xFDA
 17673                           fsr2l	equ	0xFD9
 17674                           status	equ	0xFD8
 17675                           
 17676 ;; *************** function _endereco_cursor_lcd *****************
 17677 ;; Defined at:
 17678 ;;		line 218 in file "bibliotecas/display_lcd.c"
 17679 ;; Parameters:    Size  Location     Type
 17680 ;;  endereco        1    wreg     unsigned char 
 17681 ;; Auto vars:     Size  Location     Type
 17682 ;;  endereco        1   27[COMRAM] unsigned char 
 17683 ;; Return value:  Size  Location     Type
 17684 ;;                  1    wreg      void 
 17685 ;; Registers used:
 17686 ;;		wreg, status,2, status,0, cstack
 17687 ;; Tracked objects:
 17688 ;;		On entry : 0/0
 17689 ;;		On exit  : 0/0
 17690 ;;		Unchanged: 0/0
 17691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17692 ;;      Params:         0       0       0       0       0       0       0       0       0
 17693 ;;      Locals:         1       0       0       0       0       0       0       0       0
 17694 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17695 ;;      Totals:         1       0       0       0       0       0       0       0       0
 17696 ;;Total ram usage:        1 bytes
 17697 ;; Hardware stack levels used:    1
 17698 ;; Hardware stack levels required when called:    3
 17699 ;; This function calls:
 17700 ;;		_delay
 17701 ;; This function is called by:
 17702 ;;		_posicao_cursor_lcd
 17703 ;;		_cria_caractere_lcd
 17704 ;; This function uses a non-reentrant model
 17705 ;;
 17706                           
 17707                           	psect	text67
 17708  004A10                     __ptext67:
 17709                           	opt stack 0
 17710  004A10                     _endereco_cursor_lcd:
 17711                           	opt stack 24
 17712                           
 17713                           ;incstack = 0
 17714                           ;endereco_cursor_lcd@endereco stored from wreg
 17715  004A10  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 17716                           
 17717                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 17718  004A12  9483               	bcf	3971,2,c	;volatile
 17719                           
 17720                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 17721  004A14  9283               	bcf	3971,1,c	;volatile
 17722                           
 17723                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 17724  004A16  9083               	bcf	3971,0,c	;volatile
 17725                           
 17726                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 17727  004A18  8E83               	bsf	3971,7,c	;volatile
 17728                           
 17729                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 17730  004A1A  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 17731  004A1C  D002               	goto	l555
 17732  004A1E  8883               	bsf	3971,4,c	;volatile
 17733  004A20  D001               	goto	l556
 17734  004A22                     l555:
 17735                           
 17736                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 17737  004A22  9883               	bcf	3971,4,c	;volatile
 17738  004A24                     l556:
 17739                           
 17740                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 17741  004A24  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 17742  004A26  D002               	goto	l557
 17743  004A28  8A83               	bsf	3971,5,c	;volatile
 17744  004A2A  D001               	goto	l558
 17745  004A2C                     l557:
 17746                           
 17747                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 17748  004A2C  9A83               	bcf	3971,5,c	;volatile
 17749  004A2E                     l558:
 17750                           
 17751                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 17752  004A2E  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 17753  004A30  D002               	goto	l559
 17754  004A32  8C83               	bsf	3971,6,c	;volatile
 17755  004A34  D001               	goto	l560
 17756  004A36                     l559:
 17757                           
 17758                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 17759  004A36  9C83               	bcf	3971,6,c	;volatile
 17760  004A38                     l560:
 17761                           
 17762                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 17763  004A38  8083               	bsf	3971,0,c	;volatile
 17764                           
 17765                           ;display_lcd.c: 236: delay();
 17766  004A3A  ECF1  F028         	call	_delay	;wreg free
 17767                           
 17768                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 17769  004A3E  9083               	bcf	3971,0,c	;volatile
 17770                           
 17771                           ;display_lcd.c: 238: delay();
 17772  004A40  ECF1  F028         	call	_delay	;wreg free
 17773                           
 17774                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 17775  004A44  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 17776  004A46  D002               	goto	l561
 17777  004A48  8883               	bsf	3971,4,c	;volatile
 17778  004A4A  D001               	goto	l562
 17779  004A4C                     l561:
 17780                           
 17781                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 17782  004A4C  9883               	bcf	3971,4,c	;volatile
 17783  004A4E                     l562:
 17784                           
 17785                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 17786  004A4E  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 17787  004A50  D002               	goto	l563
 17788  004A52  8A83               	bsf	3971,5,c	;volatile
 17789  004A54  D001               	goto	l564
 17790  004A56                     l563:
 17791                           
 17792                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 17793  004A56  9A83               	bcf	3971,5,c	;volatile
 17794  004A58                     l564:
 17795                           
 17796                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 17797  004A58  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 17798  004A5A  D002               	goto	l565
 17799  004A5C  8C83               	bsf	3971,6,c	;volatile
 17800  004A5E  D001               	goto	l566
 17801  004A60                     l565:
 17802                           
 17803                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 17804  004A60  9C83               	bcf	3971,6,c	;volatile
 17805  004A62                     l566:
 17806                           
 17807                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 17808  004A62  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 17809  004A64  D002               	goto	l567
 17810  004A66  8E83               	bsf	3971,7,c	;volatile
 17811  004A68  D001               	goto	l568
 17812  004A6A                     l567:
 17813                           
 17814                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 17815  004A6A  9E83               	bcf	3971,7,c	;volatile
 17816  004A6C                     l568:
 17817                           
 17818                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 17819  004A6C  8083               	bsf	3971,0,c	;volatile
 17820                           
 17821                           ;display_lcd.c: 252: delay();
 17822  004A6E  ECF1  F028         	call	_delay	;wreg free
 17823                           
 17824                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 17825  004A72  9083               	bcf	3971,0,c	;volatile
 17826                           
 17827                           ;display_lcd.c: 254: delay();
 17828  004A74  ECF1  F028         	call	_delay	;wreg free
 17829  004A78  0012               	return		;funcret
 17830  004A7A                     __end_of_endereco_cursor_lcd:
 17831                           	opt stack 0
 17832                           tosu	equ	0xFFF
 17833                           tosh	equ	0xFFE
 17834                           tosl	equ	0xFFD
 17835                           pclath	equ	0xFFA
 17836                           tblptru	equ	0xFF8
 17837                           tblptrh	equ	0xFF7
 17838                           tblptrl	equ	0xFF6
 17839                           tablat	equ	0xFF5
 17840                           prodh	equ	0xFF4
 17841                           prodl	equ	0xFF3
 17842                           intcon	equ	0xFF2
 17843                           intcon2	equ	0xFF1
 17844                           intcon3	equ	0xFF0
 17845                           indf0	equ	0xFEF
 17846                           postinc0	equ	0xFEE
 17847                           fsr0h	equ	0xFEA
 17848                           fsr0l	equ	0xFE9
 17849                           wreg	equ	0xFE8
 17850                           indf1	equ	0xFE7
 17851                           postinc1	equ	0xFE6
 17852                           postdec1	equ	0xFE5
 17853                           fsr1h	equ	0xFE2
 17854                           fsr1l	equ	0xFE1
 17855                           indf2	equ	0xFDF
 17856                           postinc2	equ	0xFDE
 17857                           postdec2	equ	0xFDD
 17858                           plusw2	equ	0xFDB
 17859                           fsr2h	equ	0xFDA
 17860                           fsr2l	equ	0xFD9
 17861                           status	equ	0xFD8
 17862                           
 17863 ;; *************** function _escreve_frase_ram_lcd *****************
 17864 ;; Defined at:
 17865 ;;		line 445 in file "bibliotecas/display_lcd.c"
 17866 ;; Parameters:    Size  Location     Type
 17867 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 17868 ;;		 -> STR_25(13), STR_24(13), STR_23(13), STR_22(13), 
 17869 ;;		 -> escreve_inteiro_lcd@texto(7), leitura_chave@pos_ignicao_on(17), leitura_chave@pos_ignicao_crank(17), leitura_cha
      +ve@pos_ignicao_off(17), 
 17870 ;;		 -> STR_20(17), STR_19(14), STR_18(13), STR_17(9), 
 17871 ;;		 -> STR_16(14), STR_15(16), STR_14(13), STR_13(12), 
 17872 ;;		 -> STR_12(16), STR_11(12), RAM(2047), STR_5(5), 
 17873 ;;		 -> gps@gps_buffer(15), dado_buffer(7), STR_2(6), data_buffer(15), 
 17874 ;;		 -> STR_1(6), 
 17875 ;; Auto vars:     Size  Location     Type
 17876 ;;		None
 17877 ;; Return value:  Size  Location     Type
 17878 ;;                  1    wreg      void 
 17879 ;; Registers used:
 17880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17881 ;; Tracked objects:
 17882 ;;		On entry : 0/0
 17883 ;;		On exit  : 0/0
 17884 ;;		Unchanged: 0/0
 17885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17886 ;;      Params:         2       0       0       0       0       0       0       0       0
 17887 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17888 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17889 ;;      Totals:         2       0       0       0       0       0       0       0       0
 17890 ;;Total ram usage:        2 bytes
 17891 ;; Hardware stack levels used:    1
 17892 ;; Hardware stack levels required when called:    4
 17893 ;; This function calls:
 17894 ;;		_escreve_caractere_lcd
 17895 ;; This function is called by:
 17896 ;;		_gps
 17897 ;;		_SDCard
 17898 ;;		_sdc_disk_write
 17899 ;;		_disk_status
 17900 ;;		_sdc_reset
 17901 ;;		_sdc_disk_initialize
 17902 ;;		_inicializa_SPI
 17903 ;;		_leitura_chave
 17904 ;;		_escreve_inteiro_lcd
 17905 ;;		_disk_initialize
 17906 ;; This function uses a non-reentrant model
 17907 ;;
 17908                           
 17909                           	psect	text68
 17910  004D56                     __ptext68:
 17911                           	opt stack 0
 17912  004D56                     _escreve_frase_ram_lcd:
 17913                           	opt stack 24
 17914                           
 17915                           ;display_lcd.c: 447: while(*buffer)
 17916                           
 17917                           ;incstack = 0
 17918  004D56  D014               	goto	l617
 17919  004D58                     
 17920                           ;display_lcd.c: 448: {
 17921                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 17922  004D58  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 17923  004D5C  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 17924  004D60  6AF8               	clrf	tblptru,c
 17925  004D62  0E07               	movlw	(high __ramtop+-1)
 17926  004D64  64F7               	cpfsgt	tblptrh,c
 17927  004D66  D003               	bra	u13657
 17928  004D68  0008               	tblrd		*
 17929  004D6A  50F5               	movf	tablat,w,c
 17930  004D6C  D005               	bra	u13650
 17931  004D6E                     u13657:
 17932  004D6E  CFF6 FFE9          	movff	tblptrl,fsr0l
 17933  004D72  CFF7 FFEA          	movff	tblptrh,fsr0h
 17934  004D76  50EF               	movf	indf0,w,c
 17935  004D78                     u13650:
 17936  004D78  EC5F  F024         	call	_escreve_caractere_lcd
 17937                           
 17938                           ;display_lcd.c: 450: buffer++;
 17939  004D7C  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 17940  004D7E  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 17941  004D80                     l617:
 17942  004D80  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 17943  004D84  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 17944  004D88  6AF8               	clrf	tblptru,c
 17945  004D8A  0E07               	movlw	(high __ramtop+-1)
 17946  004D8C  64F7               	cpfsgt	tblptrh,c
 17947  004D8E  D003               	bra	u13667
 17948  004D90  0008               	tblrd		*
 17949  004D92  50F5               	movf	tablat,w,c
 17950  004D94  D005               	bra	u13660
 17951  004D96                     u13667:
 17952  004D96  CFF6 FFE9          	movff	tblptrl,fsr0l
 17953  004D9A  CFF7 FFEA          	movff	tblptrh,fsr0h
 17954  004D9E  50EF               	movf	indf0,w,c
 17955  004DA0                     u13660:
 17956  004DA0  0900               	iorlw	0
 17957  004DA2  B4D8               	btfsc	status,2,c
 17958  004DA4  0012               	return	
 17959  004DA6  D7D8               	goto	l618
 17960  004DA8                     __end_of_escreve_frase_ram_lcd:
 17961                           	opt stack 0
 17962                           tosu	equ	0xFFF
 17963                           tosh	equ	0xFFE
 17964                           tosl	equ	0xFFD
 17965                           pclath	equ	0xFFA
 17966                           tblptru	equ	0xFF8
 17967                           tblptrh	equ	0xFF7
 17968                           tblptrl	equ	0xFF6
 17969                           tablat	equ	0xFF5
 17970                           prodh	equ	0xFF4
 17971                           prodl	equ	0xFF3
 17972                           intcon	equ	0xFF2
 17973                           intcon2	equ	0xFF1
 17974                           intcon3	equ	0xFF0
 17975                           indf0	equ	0xFEF
 17976                           postinc0	equ	0xFEE
 17977                           fsr0h	equ	0xFEA
 17978                           fsr0l	equ	0xFE9
 17979                           wreg	equ	0xFE8
 17980                           indf1	equ	0xFE7
 17981                           postinc1	equ	0xFE6
 17982                           postdec1	equ	0xFE5
 17983                           fsr1h	equ	0xFE2
 17984                           fsr1l	equ	0xFE1
 17985                           indf2	equ	0xFDF
 17986                           postinc2	equ	0xFDE
 17987                           postdec2	equ	0xFDD
 17988                           plusw2	equ	0xFDB
 17989                           fsr2h	equ	0xFDA
 17990                           fsr2l	equ	0xFD9
 17991                           status	equ	0xFD8
 17992                           
 17993 ;; *************** function _escreve_caractere_lcd *****************
 17994 ;; Defined at:
 17995 ;;		line 323 in file "bibliotecas/display_lcd.c"
 17996 ;; Parameters:    Size  Location     Type
 17997 ;;  data            1    wreg     unsigned char 
 17998 ;; Auto vars:     Size  Location     Type
 17999 ;;  data            1   27[COMRAM] unsigned char 
 18000 ;; Return value:  Size  Location     Type
 18001 ;;                  1    wreg      void 
 18002 ;; Registers used:
 18003 ;;		wreg, status,2, status,0, cstack
 18004 ;; Tracked objects:
 18005 ;;		On entry : 0/0
 18006 ;;		On exit  : 0/0
 18007 ;;		Unchanged: 0/0
 18008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18009 ;;      Params:         0       0       0       0       0       0       0       0       0
 18010 ;;      Locals:         1       0       0       0       0       0       0       0       0
 18011 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18012 ;;      Totals:         1       0       0       0       0       0       0       0       0
 18013 ;;Total ram usage:        1 bytes
 18014 ;; Hardware stack levels used:    1
 18015 ;; Hardware stack levels required when called:    3
 18016 ;; This function calls:
 18017 ;;		_delay
 18018 ;; This function is called by:
 18019 ;;		_escreve_frase_ram_lcd
 18020 ;;		_escreve_float_lcd
 18021 ;;		_escreve_frase_lcd
 18022 ;;		_cria_caractere_lcd
 18023 ;; This function uses a non-reentrant model
 18024 ;;
 18025                           
 18026                           	psect	text69
 18027  0048BE                     __ptext69:
 18028                           	opt stack 0
 18029  0048BE                     _escreve_caractere_lcd:
 18030                           	opt stack 24
 18031                           
 18032                           ;incstack = 0
 18033                           ;escreve_caractere_lcd@data stored from wreg
 18034  0048BE  6E1C               	movwf	escreve_caractere_lcd@data,c
 18035                           
 18036                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 18037  0048C0  9483               	bcf	3971,2,c	;volatile
 18038                           
 18039                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 18040  0048C2  8283               	bsf	3971,1,c	;volatile
 18041                           
 18042                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 18043  0048C4  9083               	bcf	3971,0,c	;volatile
 18044                           
 18045                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 18046  0048C6  A81C               	btfss	escreve_caractere_lcd@data,4,c
 18047  0048C8  D002               	goto	l584
 18048  0048CA  8883               	bsf	3971,4,c	;volatile
 18049  0048CC  D001               	goto	l585
 18050  0048CE                     l584:
 18051                           
 18052                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 18053  0048CE  9883               	bcf	3971,4,c	;volatile
 18054  0048D0                     l585:
 18055                           
 18056                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 18057  0048D0  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 18058  0048D2  D002               	goto	l586
 18059  0048D4  8A83               	bsf	3971,5,c	;volatile
 18060  0048D6  D001               	goto	l587
 18061  0048D8                     l586:
 18062                           
 18063                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 18064  0048D8  9A83               	bcf	3971,5,c	;volatile
 18065  0048DA                     l587:
 18066                           
 18067                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 18068  0048DA  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 18069  0048DC  D002               	goto	l588
 18070  0048DE  8C83               	bsf	3971,6,c	;volatile
 18071  0048E0  D001               	goto	l589
 18072  0048E2                     l588:
 18073                           
 18074                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 18075  0048E2  9C83               	bcf	3971,6,c	;volatile
 18076  0048E4                     l589:
 18077                           
 18078                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 18079  0048E4  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 18080  0048E6  D002               	goto	l590
 18081  0048E8  8E83               	bsf	3971,7,c	;volatile
 18082  0048EA  D001               	goto	l591
 18083  0048EC                     l590:
 18084                           
 18085                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 18086  0048EC  9E83               	bcf	3971,7,c	;volatile
 18087  0048EE                     l591:
 18088                           
 18089                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 18090  0048EE  8083               	bsf	3971,0,c	;volatile
 18091                           
 18092                           ;display_lcd.c: 342: delay();
 18093  0048F0  ECF1  F028         	call	_delay	;wreg free
 18094                           
 18095                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 18096  0048F4  9083               	bcf	3971,0,c	;volatile
 18097                           
 18098                           ;display_lcd.c: 344: delay();
 18099  0048F6  ECF1  F028         	call	_delay	;wreg free
 18100                           
 18101                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 18102  0048FA  A01C               	btfss	escreve_caractere_lcd@data,0,c
 18103  0048FC  D002               	goto	l592
 18104  0048FE  8883               	bsf	3971,4,c	;volatile
 18105  004900  D001               	goto	l593
 18106  004902                     l592:
 18107                           
 18108                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 18109  004902  9883               	bcf	3971,4,c	;volatile
 18110  004904                     l593:
 18111                           
 18112                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 18113  004904  A21C               	btfss	escreve_caractere_lcd@data,1,c
 18114  004906  D002               	goto	l594
 18115  004908  8A83               	bsf	3971,5,c	;volatile
 18116  00490A  D001               	goto	l595
 18117  00490C                     l594:
 18118                           
 18119                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 18120  00490C  9A83               	bcf	3971,5,c	;volatile
 18121  00490E                     l595:
 18122                           
 18123                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 18124  00490E  A41C               	btfss	escreve_caractere_lcd@data,2,c
 18125  004910  D002               	goto	l596
 18126  004912  8C83               	bsf	3971,6,c	;volatile
 18127  004914  D001               	goto	l597
 18128  004916                     l596:
 18129                           
 18130                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 18131  004916  9C83               	bcf	3971,6,c	;volatile
 18132  004918                     l597:
 18133                           
 18134                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 18135  004918  A61C               	btfss	escreve_caractere_lcd@data,3,c
 18136  00491A  D002               	goto	l598
 18137  00491C  8E83               	bsf	3971,7,c	;volatile
 18138  00491E  D001               	goto	l599
 18139  004920                     l598:
 18140                           
 18141                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 18142  004920  9E83               	bcf	3971,7,c	;volatile
 18143  004922                     l599:
 18144                           
 18145                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 18146  004922  8083               	bsf	3971,0,c	;volatile
 18147                           
 18148                           ;display_lcd.c: 359: delay();
 18149  004924  ECF1  F028         	call	_delay	;wreg free
 18150                           
 18151                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 18152  004928  9083               	bcf	3971,0,c	;volatile
 18153                           
 18154                           ;display_lcd.c: 361: delay();
 18155  00492A  ECF1  F028         	call	_delay	;wreg free
 18156  00492E  0012               	return		;funcret
 18157  004930                     __end_of_escreve_caractere_lcd:
 18158                           	opt stack 0
 18159                           tosu	equ	0xFFF
 18160                           tosh	equ	0xFFE
 18161                           tosl	equ	0xFFD
 18162                           pclath	equ	0xFFA
 18163                           tblptru	equ	0xFF8
 18164                           tblptrh	equ	0xFF7
 18165                           tblptrl	equ	0xFF6
 18166                           tablat	equ	0xFF5
 18167                           prodh	equ	0xFF4
 18168                           prodl	equ	0xFF3
 18169                           intcon	equ	0xFF2
 18170                           intcon2	equ	0xFF1
 18171                           intcon3	equ	0xFF0
 18172                           indf0	equ	0xFEF
 18173                           postinc0	equ	0xFEE
 18174                           fsr0h	equ	0xFEA
 18175                           fsr0l	equ	0xFE9
 18176                           wreg	equ	0xFE8
 18177                           indf1	equ	0xFE7
 18178                           postinc1	equ	0xFE6
 18179                           postdec1	equ	0xFE5
 18180                           fsr1h	equ	0xFE2
 18181                           fsr1l	equ	0xFE1
 18182                           indf2	equ	0xFDF
 18183                           postinc2	equ	0xFDE
 18184                           postdec2	equ	0xFDD
 18185                           plusw2	equ	0xFDB
 18186                           fsr2h	equ	0xFDA
 18187                           fsr2l	equ	0xFD9
 18188                           status	equ	0xFD8
 18189                           
 18190 ;; *************** function _disk_read *****************
 18191 ;; Defined at:
 18192 ;;		line 109 in file "bibliotecas/diskio.c"
 18193 ;; Parameters:    Size  Location     Type
 18194 ;;  drv             1    wreg     unsigned char 
 18195 ;;  buff            2    8[BANK0 ] PTR unsigned char 
 18196 ;;		 -> NULL(0), fs(558), 
 18197 ;;  sector          4   10[BANK0 ] unsigned long 
 18198 ;;  count           1   14[BANK0 ] unsigned char 
 18199 ;; Auto vars:     Size  Location     Type
 18200 ;;  drv             1   15[BANK0 ] unsigned char 
 18201 ;;  result          2    0        int 
 18202 ;;  res             1   16[BANK0 ] enum E22
 18203 ;; Return value:  Size  Location     Type
 18204 ;;                  1    wreg      enum E22
 18205 ;; Registers used:
 18206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18207 ;; Tracked objects:
 18208 ;;		On entry : 0/0
 18209 ;;		On exit  : 0/0
 18210 ;;		Unchanged: 0/0
 18211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18212 ;;      Params:         0       7       0       0       0       0       0       0       0
 18213 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18214 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18215 ;;      Totals:         0       9       0       0       0       0       0       0       0
 18216 ;;Total ram usage:        9 bytes
 18217 ;; Hardware stack levels used:    1
 18218 ;; Hardware stack levels required when called:    5
 18219 ;; This function calls:
 18220 ;;		_sdc_disk_read
 18221 ;; This function is called by:
 18222 ;;		_move_window
 18223 ;;		_check_fs
 18224 ;;		_chk_mounted
 18225 ;;		_f_read
 18226 ;; This function uses a non-reentrant model
 18227 ;;
 18228                           
 18229                           	psect	text70
 18230  004E48                     __ptext70:
 18231                           	opt stack 0
 18232  004E48                     _disk_read:
 18233                           	opt stack 21
 18234                           
 18235                           ;incstack = 0
 18236                           ;disk_read@drv stored from wreg
 18237  004E48  0100               	movlb	0	; () banked
 18238  004E4A  6F6F               	movwf	disk_read@drv& (0+255),b
 18239                           
 18240                           ;diskio.c: 116: DRESULT res;
 18241                           ;diskio.c: 117: int result;
 18242                           ;diskio.c: 119: switch (drv) {
 18243  004E4C  D018               	goto	l903
 18244  004E4E                     l904:
 18245                           
 18246                           ; BSR set to: 0
 18247                           ;diskio.c: 124: return res;
 18248  004E4E  5170               	movf	disk_read@res& (0+255),w,b
 18249  004E50  0012               	return	
 18250  004E52                     
 18251                           ; BSR set to: 0
 18252                           ;diskio.c: 127: res = sdc_disk_read(buff, sector, count);
 18253                           
 18254                           ; BSR set to: 0
 18255  004E52  C068  F023         	movff	disk_read@buff,sdc_disk_read@p_buff
 18256  004E56  C069  F024         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 18257  004E5A  C06A  F025         	movff	disk_read@sector,sdc_disk_read@sector
 18258  004E5E  C06B  F026         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 18259  004E62  C06C  F027         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 18260  004E66  C06D  F028         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 18261  004E6A  C06E  F029         	movff	disk_read@count,sdc_disk_read@count
 18262  004E6E  EC0C  F019         	call	_sdc_disk_read	;wreg free
 18263  004E72  0100               	movlb	0	; () banked
 18264  004E74  6F70               	movwf	disk_read@res& (0+255),b
 18265                           
 18266                           ; BSR set to: 0
 18267                           ;diskio.c: 130: return res;
 18268  004E76  5170               	movf	disk_read@res& (0+255),w,b
 18269                           
 18270                           ; BSR set to: 0
 18271  004E78  0012               	return	
 18272  004E7A                     
 18273                           ; BSR set to: 0
 18274                           ;diskio.c: 136: return res;
 18275                           
 18276                           ; BSR set to: 0
 18277  004E7A  5170               	movf	disk_read@res& (0+255),w,b
 18278                           
 18279                           ; BSR set to: 0
 18280  004E7C  0012               	return	
 18281  004E7E                     l903:
 18282                           
 18283                           ; BSR set to: 0
 18284  004E7E  0100               	movlb	0	; () banked
 18285  004E80  516F               	movf	disk_read@drv& (0+255),w,b
 18286                           
 18287                           ; Switch size 1, requested type "space"
 18288                           ; Number of cases is 3, Range of values is 0 to 2
 18289                           ; switch strategies available:
 18290                           ; Name         Instructions Cycles
 18291                           ; simple_byte           10     6 (average)
 18292                           ;	Chosen strategy is simple_byte
 18293  004E82  0A00               	xorlw	0	; case 0
 18294  004E84  B4D8               	btfsc	status,2,c
 18295  004E86  D7E3               	goto	l904
 18296  004E88  0A01               	xorlw	1	; case 1
 18297  004E8A  B4D8               	btfsc	status,2,c
 18298  004E8C  D7E2               	goto	l906
 18299  004E8E  0A03               	xorlw	3	; case 2
 18300  004E90  B4D8               	btfsc	status,2,c
 18301  004E92  D7F3               	goto	l907
 18302                           
 18303                           ; BSR set to: 0
 18304                           ;diskio.c: 138: return RES_PARERR;
 18305                           
 18306                           ; BSR set to: 0
 18307  004E94  0E04               	movlw	4
 18308  004E96  0012               	return	
 18309  004E98                     __end_of_disk_read:
 18310                           	opt stack 0
 18311                           tosu	equ	0xFFF
 18312                           tosh	equ	0xFFE
 18313                           tosl	equ	0xFFD
 18314                           pclath	equ	0xFFA
 18315                           tblptru	equ	0xFF8
 18316                           tblptrh	equ	0xFF7
 18317                           tblptrl	equ	0xFF6
 18318                           tablat	equ	0xFF5
 18319                           prodh	equ	0xFF4
 18320                           prodl	equ	0xFF3
 18321                           intcon	equ	0xFF2
 18322                           intcon2	equ	0xFF1
 18323                           intcon3	equ	0xFF0
 18324                           indf0	equ	0xFEF
 18325                           postinc0	equ	0xFEE
 18326                           fsr0h	equ	0xFEA
 18327                           fsr0l	equ	0xFE9
 18328                           wreg	equ	0xFE8
 18329                           indf1	equ	0xFE7
 18330                           postinc1	equ	0xFE6
 18331                           postdec1	equ	0xFE5
 18332                           fsr1h	equ	0xFE2
 18333                           fsr1l	equ	0xFE1
 18334                           indf2	equ	0xFDF
 18335                           postinc2	equ	0xFDE
 18336                           postdec2	equ	0xFDD
 18337                           plusw2	equ	0xFDB
 18338                           fsr2h	equ	0xFDA
 18339                           fsr2l	equ	0xFD9
 18340                           status	equ	0xFD8
 18341                           
 18342 ;; *************** function _sdc_disk_read *****************
 18343 ;; Defined at:
 18344 ;;		line 485 in file "bibliotecas/SDCard.c"
 18345 ;; Parameters:    Size  Location     Type
 18346 ;;  p_buff          2   34[COMRAM] PTR unsigned char 
 18347 ;;		 -> NULL(0), fs(558), 
 18348 ;;  sector          4   36[COMRAM] unsigned long 
 18349 ;;  count           1   40[COMRAM] unsigned char 
 18350 ;; Auto vars:     Size  Location     Type
 18351 ;;  start_add       4    1[BANK0 ] unsigned long 
 18352 ;;  length          2    6[BANK0 ] int 
 18353 ;;  i               2    0        int 
 18354 ;;  buff            1    5[BANK0 ] unsigned char 
 18355 ;;  ptr             1    0[BANK0 ] unsigned char 
 18356 ;;  res             1    0        enum E22
 18357 ;; Return value:  Size  Location     Type
 18358 ;;                  1    wreg      enum E22
 18359 ;; Registers used:
 18360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18361 ;; Tracked objects:
 18362 ;;		On entry : 0/0
 18363 ;;		On exit  : 0/0
 18364 ;;		Unchanged: 0/0
 18365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18366 ;;      Params:         7       0       0       0       0       0       0       0       0
 18367 ;;      Locals:         0       8       0       0       0       0       0       0       0
 18368 ;;      Temps:          4       0       0       0       0       0       0       0       0
 18369 ;;      Totals:        11       8       0       0       0       0       0       0       0
 18370 ;;Total ram usage:       19 bytes
 18371 ;; Hardware stack levels used:    1
 18372 ;; Hardware stack levels required when called:    4
 18373 ;; This function calls:
 18374 ;;		_command
 18375 ;;		_dummy_clocks
 18376 ;;		_proceed
 18377 ;;		_response
 18378 ;; This function is called by:
 18379 ;;		_disk_read
 18380 ;; This function uses a non-reentrant model
 18381 ;;
 18382                           
 18383                           	psect	text71
 18384  003218                     __ptext71:
 18385                           	opt stack 0
 18386  003218                     _sdc_disk_read:
 18387                           	opt stack 21
 18388                           
 18389                           ;SDCard.c: 492: DRESULT res;
 18390                           ;SDCard.c: 493: unsigned char ptr=0X00, buff;
 18391                           
 18392                           ; BSR set to: 0
 18393                           ;incstack = 0
 18394  003218  0E00               	movlw	0
 18395  00321A  0100               	movlb	0	; () banked
 18396  00321C  6F60               	movwf	sdc_disk_read@ptr& (0+255),b
 18397                           
 18398                           ; BSR set to: 0
 18399                           ;SDCard.c: 494: unsigned long int start_add;
 18400                           ;SDCard.c: 495: static unsigned char arr[512];
 18401                           ;SDCard.c: 496: int length,i;
 18402                           ;SDCard.c: 498: start_add = (sector*512);
 18403  00321E  C025  F02A         	movff	sdc_disk_read@sector,??_sdc_disk_read
 18404  003222  C026  F02B         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 18405  003226  C027  F02C         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 18406  00322A  C028  F02D         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 18407  00322E  0E09               	movlw	9
 18408  003230                     u13695:
 18409  003230  90D8               	bcf	status,0,c
 18410  003232  362A               	rlcf	??_sdc_disk_read,f,c
 18411  003234  362B               	rlcf	??_sdc_disk_read+1,f,c
 18412  003236  362C               	rlcf	??_sdc_disk_read+2,f,c
 18413  003238  362D               	rlcf	??_sdc_disk_read+3,f,c
 18414  00323A  2EE8               	decfsz	wreg,f,c
 18415  00323C  D7F9               	goto	u13695
 18416  00323E  C02A  F061         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 18417  003242  C02B  F062         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 18418  003246  C02C  F063         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 18419  00324A  C02D  F064         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 18420                           
 18421                           ; BSR set to: 0
 18422                           ;SDCard.c: 500: _delay((unsigned long)((1000)*(48000000/4000.0)));
 18423  00324E  0E3D               	movlw	61
 18424  003250  6E2B               	movwf	(??_sdc_disk_read+1)& (0+255),c
 18425  003252  0EE1               	movlw	225
 18426  003254  6E2A               	movwf	??_sdc_disk_read& (0+255),c
 18427  003256  0E40               	movlw	64
 18428  003258                     u19227:
 18429  003258  2EE8               	decfsz	wreg,f,c
 18430  00325A  D7FE               	bra	u19227
 18431  00325C  2E2A               	decfsz	??_sdc_disk_read& (0+255),f,c
 18432  00325E  D7FC               	bra	u19227
 18433  003260  2E2B               	decfsz	(??_sdc_disk_read+1)& (0+255),f,c
 18434  003262  D7FA               	bra	u19227
 18435                           
 18436                           ;SDCard.c: 502: dummy_clocks(8);
 18437  003264  0E08               	movlw	8
 18438  003266  EC90  F027         	call	_dummy_clocks
 18439                           
 18440                           ;SDCard.c: 503: command(0X52,start_add,0X00);
 18441  00326A  C061  F01C         	movff	sdc_disk_read@start_add,command@arg
 18442  00326E  C062  F01D         	movff	sdc_disk_read@start_add+1,command@arg+1
 18443  003272  C063  F01E         	movff	sdc_disk_read@start_add+2,command@arg+2
 18444  003276  C064  F01F         	movff	sdc_disk_read@start_add+3,command@arg+3
 18445  00327A  0E00               	movlw	0
 18446  00327C  6E20               	movwf	command@CRC,c
 18447  00327E  0E52               	movlw	82
 18448  003280  ECAF  F027         	call	_command
 18449                           
 18450                           ;SDCard.c: 504: proceed();
 18451  003284  EC7B  F029         	call	_proceed	;wreg free
 18452  003288                     
 18453                           ;SDCard.c: 506: buff = response();
 18454  003288  EC75  F029         	call	_response	;wreg free
 18455  00328C  0100               	movlb	0	; () banked
 18456  00328E  6F65               	movwf	sdc_disk_read@buff& (0+255),b
 18457                           
 18458                           ; BSR set to: 0
 18459                           ;SDCard.c: 507: }while(buff!=0XFF);
 18460  003290  2965               	incf	sdc_disk_read@buff& (0+255),w,b
 18461  003292  A4D8               	btfss	status,2,c
 18462  003294  D7F9               	goto	l344
 18463                           
 18464                           ; BSR set to: 0
 18465                           ;SDCard.c: 508: _delay((unsigned long)((1000)*(48000000/4000.0)));
 18466                           
 18467                           ; BSR set to: 0
 18468  003296  0E3D               	movlw	61
 18469  003298  6E2B               	movwf	(??_sdc_disk_read+1)& (0+255),c
 18470  00329A  0EE1               	movlw	225
 18471  00329C  6E2A               	movwf	??_sdc_disk_read& (0+255),c
 18472  00329E  0E40               	movlw	64
 18473  0032A0                     u19237:
 18474  0032A0  2EE8               	decfsz	wreg,f,c
 18475  0032A2  D7FE               	bra	u19237
 18476  0032A4  2E2A               	decfsz	??_sdc_disk_read& (0+255),f,c
 18477  0032A6  D7FC               	bra	u19237
 18478  0032A8  2E2B               	decfsz	(??_sdc_disk_read+1)& (0+255),f,c
 18479  0032AA  D7FA               	bra	u19237
 18480                           
 18481                           ;SDCard.c: 509: proceed();
 18482  0032AC  EC7B  F029         	call	_proceed	;wreg free
 18483  0032B0                     
 18484                           ;SDCard.c: 511: buff = response();
 18485  0032B0  EC75  F029         	call	_response	;wreg free
 18486  0032B4  0100               	movlb	0	; () banked
 18487  0032B6  6F65               	movwf	sdc_disk_read@buff& (0+255),b
 18488                           
 18489                           ; BSR set to: 0
 18490                           ;SDCard.c: 512: }while(buff!=0xFE);
 18491  0032B8  0EFE               	movlw	254
 18492  0032BA  1965               	xorwf	sdc_disk_read@buff& (0+255),w,b
 18493  0032BC  A4D8               	btfss	status,2,c
 18494  0032BE  D7F8               	goto	l346
 18495                           
 18496                           ; BSR set to: 0
 18497                           ;SDCard.c: 513: length = 0;
 18498                           
 18499                           ; BSR set to: 0
 18500  0032C0  0E00               	movlw	0
 18501  0032C2  6F67               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18502  0032C4  0E00               	movlw	0
 18503  0032C6  6F66               	movwf	sdc_disk_read@length& (0+255),b
 18504                           
 18505                           ;SDCard.c: 514: while ( length < count )
 18506  0032C8  D00C               	goto	l348
 18507  0032CA                     
 18508                           ; BSR set to: 0
 18509                           ;SDCard.c: 515: {
 18510                           ;SDCard.c: 516: arr[length] = response();
 18511                           
 18512                           ; BSR set to: 0
 18513  0032CA  0EB7               	movlw	low sdc_disk_read@arr
 18514  0032CC  2566               	addwf	sdc_disk_read@length& (0+255),w,b
 18515  0032CE  6ED9               	movwf	fsr2l,c
 18516  0032D0  0E02               	movlw	high sdc_disk_read@arr
 18517  0032D2  2167               	addwfc	(sdc_disk_read@length+1)& (0+255),w,b
 18518  0032D4  6EDA               	movwf	fsr2h,c
 18519  0032D6  EC75  F029         	call	_response	;wreg free
 18520  0032DA  6EDF               	movwf	indf2,c
 18521                           
 18522                           ;SDCard.c: 517: length++;
 18523  0032DC  0100               	movlb	0	; () banked
 18524  0032DE  4B66               	infsnz	sdc_disk_read@length& (0+255),f,b
 18525  0032E0  2B67               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 18526  0032E2                     l348:
 18527                           
 18528                           ; BSR set to: 0
 18529                           
 18530                           ; BSR set to: 0
 18531  0032E2  5029               	movf	sdc_disk_read@count,w,c
 18532  0032E4  6E2A               	movwf	??_sdc_disk_read& (0+255),c
 18533  0032E6  6A2B               	clrf	(??_sdc_disk_read+1)& (0+255),c
 18534  0032E8  502A               	movf	??_sdc_disk_read,w,c
 18535  0032EA  5D66               	subwf	sdc_disk_read@length& (0+255),w,b
 18536  0032EC  5167               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 18537  0032EE  0A80               	xorlw	128
 18538  0032F0  6E2C               	movwf	(??_sdc_disk_read+2)& (0+255),c
 18539  0032F2  502B               	movf	??_sdc_disk_read+1,w,c
 18540  0032F4  0A80               	xorlw	128
 18541  0032F6  582C               	subwfb	(??_sdc_disk_read+2)& (0+255),w,c
 18542  0032F8  A0D8               	btfss	status,0,c
 18543  0032FA  D7E7               	goto	l349
 18544                           
 18545                           ; BSR set to: 0
 18546                           ;SDCard.c: 518: }
 18547                           ;SDCard.c: 519: _delay((unsigned long)((1000)*(48000000/4000.0)));
 18548                           
 18549                           ; BSR set to: 0
 18550  0032FC  0E3D               	movlw	61
 18551  0032FE  6E2B               	movwf	(??_sdc_disk_read+1)& (0+255),c
 18552  003300  0EE1               	movlw	225
 18553  003302  6E2A               	movwf	??_sdc_disk_read& (0+255),c
 18554  003304  0E40               	movlw	64
 18555  003306                     u19247:
 18556  003306  2EE8               	decfsz	wreg,f,c
 18557  003308  D7FE               	bra	u19247
 18558  00330A  2E2A               	decfsz	??_sdc_disk_read& (0+255),f,c
 18559  00330C  D7FC               	bra	u19247
 18560  00330E  2E2B               	decfsz	(??_sdc_disk_read+1)& (0+255),f,c
 18561  003310  D7FA               	bra	u19247
 18562                           
 18563                           ;SDCard.c: 520: dummy_clocks(8);
 18564  003312  0E08               	movlw	8
 18565  003314  EC90  F027         	call	_dummy_clocks
 18566                           
 18567                           ;SDCard.c: 521: command(0X4C,0X00000000,0X00);
 18568  003318  0E00               	movlw	0
 18569  00331A  6E1C               	movwf	command@arg,c
 18570  00331C  0E00               	movlw	0
 18571  00331E  6E1D               	movwf	command@arg+1,c
 18572  003320  0E00               	movlw	0
 18573  003322  6E1E               	movwf	command@arg+2,c
 18574  003324  0E00               	movlw	0
 18575  003326  6E1F               	movwf	command@arg+3,c
 18576  003328  0E00               	movlw	0
 18577  00332A  6E20               	movwf	command@CRC,c
 18578  00332C  0E4C               	movlw	76
 18579  00332E  ECAF  F027         	call	_command
 18580                           
 18581                           ;SDCard.c: 522: proceed();
 18582  003332  EC7B  F029         	call	_proceed	;wreg free
 18583  003336                     
 18584                           ;SDCard.c: 524: buff = response();
 18585  003336  EC75  F029         	call	_response	;wreg free
 18586  00333A  0100               	movlb	0	; () banked
 18587  00333C  6F65               	movwf	sdc_disk_read@buff& (0+255),b
 18588                           
 18589                           ; BSR set to: 0
 18590                           ;SDCard.c: 525: }while(buff!=0xFF);
 18591  00333E  2965               	incf	sdc_disk_read@buff& (0+255),w,b
 18592  003340  A4D8               	btfss	status,2,c
 18593  003342  D7F9               	goto	l351
 18594                           
 18595                           ; BSR set to: 0
 18596                           ;SDCard.c: 526: length = 0;
 18597                           
 18598                           ; BSR set to: 0
 18599  003344  0E00               	movlw	0
 18600  003346  6F67               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18601  003348  0E00               	movlw	0
 18602  00334A  6F66               	movwf	sdc_disk_read@length& (0+255),b
 18603                           
 18604                           ;SDCard.c: 527: while(arr[length]!='\0')
 18605  00334C  D002               	goto	l353
 18606  00334E                     
 18607                           ; BSR set to: 0
 18608                           ;SDCard.c: 528: {
 18609                           ;SDCard.c: 530: length++;
 18610                           
 18611                           ; BSR set to: 0
 18612  00334E  4B66               	infsnz	sdc_disk_read@length& (0+255),f,b
 18613  003350  2B67               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 18614  003352                     l353:
 18615                           
 18616                           ; BSR set to: 0
 18617                           
 18618                           ; BSR set to: 0
 18619  003352  0EB7               	movlw	low sdc_disk_read@arr
 18620  003354  2566               	addwf	sdc_disk_read@length& (0+255),w,b
 18621  003356  6ED9               	movwf	fsr2l,c
 18622  003358  0E02               	movlw	high sdc_disk_read@arr
 18623  00335A  2167               	addwfc	(sdc_disk_read@length+1)& (0+255),w,b
 18624  00335C  6EDA               	movwf	fsr2h,c
 18625  00335E  50DF               	movf	indf2,w,c
 18626  003360  A4D8               	btfss	status,2,c
 18627  003362  D7F5               	goto	l354
 18628                           
 18629                           ; BSR set to: 0
 18630                           ;SDCard.c: 531: }
 18631                           ;SDCard.c: 532: *p_buff = length;
 18632                           
 18633                           ; BSR set to: 0
 18634  003364  C023  FFD9         	movff	sdc_disk_read@p_buff,fsr2l
 18635  003368  C024  FFDA         	movff	sdc_disk_read@p_buff+1,fsr2h
 18636  00336C  C066  FFDF         	movff	sdc_disk_read@length,indf2
 18637                           
 18638                           ; BSR set to: 0
 18639                           ;SDCard.c: 533: return RES_OK;
 18640  003370  0E00               	movlw	0
 18641  003372  0012               	return	
 18642  003374                     __end_of_sdc_disk_read:
 18643                           	opt stack 0
 18644                           tosu	equ	0xFFF
 18645                           tosh	equ	0xFFE
 18646                           tosl	equ	0xFFD
 18647                           pclath	equ	0xFFA
 18648                           tblptru	equ	0xFF8
 18649                           tblptrh	equ	0xFF7
 18650                           tblptrl	equ	0xFF6
 18651                           tablat	equ	0xFF5
 18652                           prodh	equ	0xFF4
 18653                           prodl	equ	0xFF3
 18654                           intcon	equ	0xFF2
 18655                           intcon2	equ	0xFF1
 18656                           intcon3	equ	0xFF0
 18657                           indf0	equ	0xFEF
 18658                           postinc0	equ	0xFEE
 18659                           fsr0h	equ	0xFEA
 18660                           fsr0l	equ	0xFE9
 18661                           wreg	equ	0xFE8
 18662                           indf1	equ	0xFE7
 18663                           postinc1	equ	0xFE6
 18664                           postdec1	equ	0xFE5
 18665                           fsr1h	equ	0xFE2
 18666                           fsr1l	equ	0xFE1
 18667                           indf2	equ	0xFDF
 18668                           postinc2	equ	0xFDE
 18669                           postdec2	equ	0xFDD
 18670                           plusw2	equ	0xFDB
 18671                           fsr2h	equ	0xFDA
 18672                           fsr2l	equ	0xFD9
 18673                           status	equ	0xFD8
 18674                           
 18675 ;; *************** function _response *****************
 18676 ;; Defined at:
 18677 ;;		line 48 in file "bibliotecas/SDCard.c"
 18678 ;; Parameters:    Size  Location     Type
 18679 ;;		None
 18680 ;; Auto vars:     Size  Location     Type
 18681 ;;  buff            1   28[COMRAM] unsigned char 
 18682 ;; Return value:  Size  Location     Type
 18683 ;;                  1    wreg      unsigned char 
 18684 ;; Registers used:
 18685 ;;		wreg, status,2, status,0, cstack
 18686 ;; Tracked objects:
 18687 ;;		On entry : 0/0
 18688 ;;		On exit  : 0/0
 18689 ;;		Unchanged: 0/0
 18690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18691 ;;      Params:         0       0       0       0       0       0       0       0       0
 18692 ;;      Locals:         1       0       0       0       0       0       0       0       0
 18693 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18694 ;;      Totals:         1       0       0       0       0       0       0       0       0
 18695 ;;Total ram usage:        1 bytes
 18696 ;; Hardware stack levels used:    1
 18697 ;; Hardware stack levels required when called:    3
 18698 ;; This function calls:
 18699 ;;		_recebe_dado_SPI
 18700 ;; This function is called by:
 18701 ;;		_sdc_disk_read
 18702 ;;		_sdc_disk_write
 18703 ;;		_sdc_disk_status
 18704 ;;		_sdc_reset
 18705 ;;		_sdc_disk_initialize
 18706 ;; This function uses a non-reentrant model
 18707 ;;
 18708                           
 18709                           	psect	text72
 18710  0052EA                     __ptext72:
 18711                           	opt stack 0
 18712  0052EA                     _response:
 18713                           	opt stack 21
 18714                           
 18715                           ;SDCard.c: 51: unsigned char buff;
 18716                           ;SDCard.c: 52: LATBbits.LATB4 = 0;
 18717                           
 18718                           ; BSR set to: 0
 18719                           ;incstack = 0
 18720  0052EA  988A               	bcf	3978,4,c	;volatile
 18721                           
 18722                           ;SDCard.c: 53: buff= recebe_dado_SPI();
 18723  0052EC  ECD2  F025         	call	_recebe_dado_SPI	;wreg free
 18724  0052F0  6E1D               	movwf	response@buff,c
 18725                           
 18726                           ;SDCard.c: 55: return buff;
 18727  0052F2  501D               	movf	response@buff,w,c
 18728  0052F4  0012               	return	
 18729  0052F6                     __end_of_response:
 18730                           	opt stack 0
 18731                           tosu	equ	0xFFF
 18732                           tosh	equ	0xFFE
 18733                           tosl	equ	0xFFD
 18734                           pclath	equ	0xFFA
 18735                           tblptru	equ	0xFF8
 18736                           tblptrh	equ	0xFF7
 18737                           tblptrl	equ	0xFF6
 18738                           tablat	equ	0xFF5
 18739                           prodh	equ	0xFF4
 18740                           prodl	equ	0xFF3
 18741                           intcon	equ	0xFF2
 18742                           intcon2	equ	0xFF1
 18743                           intcon3	equ	0xFF0
 18744                           indf0	equ	0xFEF
 18745                           postinc0	equ	0xFEE
 18746                           fsr0h	equ	0xFEA
 18747                           fsr0l	equ	0xFE9
 18748                           wreg	equ	0xFE8
 18749                           indf1	equ	0xFE7
 18750                           postinc1	equ	0xFE6
 18751                           postdec1	equ	0xFE5
 18752                           fsr1h	equ	0xFE2
 18753                           fsr1l	equ	0xFE1
 18754                           indf2	equ	0xFDF
 18755                           postinc2	equ	0xFDE
 18756                           postdec2	equ	0xFDD
 18757                           plusw2	equ	0xFDB
 18758                           fsr2h	equ	0xFDA
 18759                           fsr2l	equ	0xFD9
 18760                           status	equ	0xFD8
 18761                           
 18762 ;; *************** function _recebe_dado_SPI *****************
 18763 ;; Defined at:
 18764 ;;		line 143 in file "bibliotecas/SHRC.c"
 18765 ;; Parameters:    Size  Location     Type
 18766 ;;		None
 18767 ;; Auto vars:     Size  Location     Type
 18768 ;;  contador        1   27[COMRAM] unsigned char 
 18769 ;; Return value:  Size  Location     Type
 18770 ;;                  1    wreg      unsigned char 
 18771 ;; Registers used:
 18772 ;;		wreg, status,2, status,0
 18773 ;; Tracked objects:
 18774 ;;		On entry : 0/0
 18775 ;;		On exit  : 0/0
 18776 ;;		Unchanged: 0/0
 18777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18778 ;;      Params:         0       0       0       0       0       0       0       0       0
 18779 ;;      Locals:         1       0       0       0       0       0       0       0       0
 18780 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18781 ;;      Totals:         3       0       0       0       0       0       0       0       0
 18782 ;;Total ram usage:        3 bytes
 18783 ;; Hardware stack levels used:    1
 18784 ;; Hardware stack levels required when called:    2
 18785 ;; This function calls:
 18786 ;;		Nothing
 18787 ;; This function is called by:
 18788 ;;		_response
 18789 ;; This function uses a non-reentrant model
 18790 ;;
 18791                           
 18792                           	psect	text73
 18793  004BA4                     __ptext73:
 18794                           	opt stack 0
 18795  004BA4                     _recebe_dado_SPI:
 18796                           	opt stack 21
 18797                           
 18798                           ;SHRC.c: 145: dado = 0;
 18799                           
 18800                           ;incstack = 0
 18801  004BA4  0E00               	movlw	0
 18802  004BA6  6E3C               	movwf	_dado,c
 18803                           
 18804                           ;SHRC.c: 147: unsigned char contador=0;
 18805  004BA8  0E00               	movlw	0
 18806  004BAA  6E1C               	movwf	recebe_dado_SPI@contador,c
 18807                           
 18808                           ;SHRC.c: 149: (INTCONbits.GIE = 0);
 18809  004BAC  9EF2               	bcf	intcon,7,c	;volatile
 18810                           
 18811                           ;SHRC.c: 151: while(contador<=7)
 18812  004BAE  D022               	goto	l402
 18813  004BB0                     
 18814                           ;SHRC.c: 152: {
 18815                           ;SHRC.c: 153: dado |= (PORTBbits.RB5 << (7-contador));
 18816  004BB0  501C               	movf	recebe_dado_SPI@contador,w,c
 18817  004BB2  0800               	sublw	0
 18818  004BB4  6E1A               	movwf	??_recebe_dado_SPI& (0+255),c
 18819  004BB6  0E07               	movlw	7
 18820  004BB8  261A               	addwf	??_recebe_dado_SPI,f,c
 18821  004BBA  AA81               	btfss	3969,5,c	;volatile
 18822  004BBC  D003               	goto	u13440
 18823  004BBE  6A1B               	clrf	(??_recebe_dado_SPI+1)& (0+255),c
 18824  004BC0  2A1B               	incf	(??_recebe_dado_SPI+1)& (0+255),f,c
 18825  004BC2  D001               	goto	u13448
 18826  004BC4                     u13440:
 18827  004BC4  6A1B               	clrf	(??_recebe_dado_SPI+1)& (0+255),c
 18828  004BC6                     u13448:
 18829  004BC6  2A1A               	incf	??_recebe_dado_SPI,f,c
 18830  004BC8  D002               	goto	u13454
 18831  004BCA                     u13455:
 18832  004BCA  90D8               	bcf	status,0,c
 18833  004BCC  361B               	rlcf	??_recebe_dado_SPI+1,f,c
 18834  004BCE                     u13454:
 18835  004BCE  2E1A               	decfsz	??_recebe_dado_SPI,f,c
 18836  004BD0  D7FC               	goto	u13455
 18837  004BD2  501B               	movf	??_recebe_dado_SPI+1,w,c
 18838  004BD4  123C               	iorwf	_dado,f,c
 18839                           
 18840                           ;SHRC.c: 155: _delay((unsigned long)((30)*(48000000/4000000.0)));
 18841  004BD6  0E78               	movlw	120
 18842  004BD8                     u19257:
 18843  004BD8  2EE8               	decfsz	wreg,f,c
 18844  004BDA  D7FE               	bra	u19257
 18845                           
 18846                           ;SHRC.c: 156: LATBbits.LATB6 = 1;
 18847  004BDC  8C8A               	bsf	3978,6,c	;volatile
 18848                           
 18849                           ;SHRC.c: 157: _delay((unsigned long)((30)*(48000000/4000000.0)));
 18850  004BDE  0E78               	movlw	120
 18851  004BE0                     u19267:
 18852  004BE0  2EE8               	decfsz	wreg,f,c
 18853  004BE2  D7FE               	bra	u19267
 18854                           
 18855                           ;SHRC.c: 158: _delay((unsigned long)((30)*(48000000/4000000.0)));
 18856  004BE4  0E78               	movlw	120
 18857  004BE6                     u19277:
 18858  004BE6  2EE8               	decfsz	wreg,f,c
 18859  004BE8  D7FE               	bra	u19277
 18860                           
 18861                           ;SHRC.c: 159: LATBbits.LATB6 = 0;
 18862  004BEA  9C8A               	bcf	3978,6,c	;volatile
 18863                           
 18864                           ;SHRC.c: 160: _delay((unsigned long)((30)*(48000000/4000000.0)));
 18865  004BEC  0E78               	movlw	120
 18866  004BEE                     u19287:
 18867  004BEE  2EE8               	decfsz	wreg,f,c
 18868  004BF0  D7FE               	bra	u19287
 18869                           
 18870                           ;SHRC.c: 161: contador++;
 18871  004BF2  2A1C               	incf	recebe_dado_SPI@contador,f,c
 18872  004BF4                     l402:
 18873  004BF4  0E07               	movlw	7
 18874  004BF6  641C               	cpfsgt	recebe_dado_SPI@contador,c
 18875  004BF8  D7DB               	goto	l403
 18876                           
 18877                           ;SHRC.c: 162: }
 18878                           ;SHRC.c: 163: (INTCONbits.GIE = 1);
 18879  004BFA  8EF2               	bsf	intcon,7,c	;volatile
 18880                           
 18881                           ;SHRC.c: 164: return dado;
 18882  004BFC  503C               	movf	_dado,w,c
 18883  004BFE  0012               	return	
 18884  004C00                     __end_of_recebe_dado_SPI:
 18885                           	opt stack 0
 18886                           tosu	equ	0xFFF
 18887                           tosh	equ	0xFFE
 18888                           tosl	equ	0xFFD
 18889                           pclath	equ	0xFFA
 18890                           tblptru	equ	0xFF8
 18891                           tblptrh	equ	0xFF7
 18892                           tblptrl	equ	0xFF6
 18893                           tablat	equ	0xFF5
 18894                           prodh	equ	0xFF4
 18895                           prodl	equ	0xFF3
 18896                           intcon	equ	0xFF2
 18897                           intcon2	equ	0xFF1
 18898                           intcon3	equ	0xFF0
 18899                           indf0	equ	0xFEF
 18900                           postinc0	equ	0xFEE
 18901                           fsr0h	equ	0xFEA
 18902                           fsr0l	equ	0xFE9
 18903                           wreg	equ	0xFE8
 18904                           indf1	equ	0xFE7
 18905                           postinc1	equ	0xFE6
 18906                           postdec1	equ	0xFE5
 18907                           fsr1h	equ	0xFE2
 18908                           fsr1l	equ	0xFE1
 18909                           indf2	equ	0xFDF
 18910                           postinc2	equ	0xFDE
 18911                           postdec2	equ	0xFDD
 18912                           plusw2	equ	0xFDB
 18913                           fsr2h	equ	0xFDA
 18914                           fsr2l	equ	0xFD9
 18915                           status	equ	0xFD8
 18916                           
 18917 ;; *************** function _proceed *****************
 18918 ;; Defined at:
 18919 ;;		line 87 in file "bibliotecas/SDCard.c"
 18920 ;; Parameters:    Size  Location     Type
 18921 ;;		None
 18922 ;; Auto vars:     Size  Location     Type
 18923 ;;		None
 18924 ;; Return value:  Size  Location     Type
 18925 ;;                  1    wreg      void 
 18926 ;; Registers used:
 18927 ;;		wreg, status,2, status,0, cstack
 18928 ;; Tracked objects:
 18929 ;;		On entry : 0/0
 18930 ;;		On exit  : 0/0
 18931 ;;		Unchanged: 0/0
 18932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18933 ;;      Params:         0       0       0       0       0       0       0       0       0
 18934 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18935 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18936 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18937 ;;Total ram usage:        0 bytes
 18938 ;; Hardware stack levels used:    1
 18939 ;; Hardware stack levels required when called:    3
 18940 ;; This function calls:
 18941 ;;		_escreve_dado_SPI
 18942 ;; This function is called by:
 18943 ;;		_SDCard
 18944 ;;		_sdc_disk_read
 18945 ;;		_sdc_disk_write
 18946 ;;		_sdc_reset
 18947 ;;		_sdc_disk_initialize
 18948 ;; This function uses a non-reentrant model
 18949 ;;
 18950                           
 18951                           	psect	text74
 18952  0052F6                     __ptext74:
 18953                           	opt stack 0
 18954  0052F6                     _proceed:
 18955                           	opt stack 25
 18956                           
 18957                           ;SDCard.c: 89: LATBbits.LATB4 = 0;
 18958                           
 18959                           ;incstack = 0
 18960  0052F6  988A               	bcf	3978,4,c	;volatile
 18961                           
 18962                           ;SDCard.c: 90: escreve_dado_SPI(0xFF);
 18963  0052F8  0EFF               	movlw	255
 18964  0052FA  EC4C  F027         	call	_escreve_dado_SPI
 18965                           
 18966                           ;SDCard.c: 91: LATBbits.LATB4 = 1;
 18967  0052FE  888A               	bsf	3978,4,c	;volatile
 18968  005300  0012               	return		;funcret
 18969  005302                     __end_of_proceed:
 18970                           	opt stack 0
 18971                           tosu	equ	0xFFF
 18972                           tosh	equ	0xFFE
 18973                           tosl	equ	0xFFD
 18974                           pclath	equ	0xFFA
 18975                           tblptru	equ	0xFF8
 18976                           tblptrh	equ	0xFF7
 18977                           tblptrl	equ	0xFF6
 18978                           tablat	equ	0xFF5
 18979                           prodh	equ	0xFF4
 18980                           prodl	equ	0xFF3
 18981                           intcon	equ	0xFF2
 18982                           intcon2	equ	0xFF1
 18983                           intcon3	equ	0xFF0
 18984                           indf0	equ	0xFEF
 18985                           postinc0	equ	0xFEE
 18986                           fsr0h	equ	0xFEA
 18987                           fsr0l	equ	0xFE9
 18988                           wreg	equ	0xFE8
 18989                           indf1	equ	0xFE7
 18990                           postinc1	equ	0xFE6
 18991                           postdec1	equ	0xFE5
 18992                           fsr1h	equ	0xFE2
 18993                           fsr1l	equ	0xFE1
 18994                           indf2	equ	0xFDF
 18995                           postinc2	equ	0xFDE
 18996                           postdec2	equ	0xFDD
 18997                           plusw2	equ	0xFDB
 18998                           fsr2h	equ	0xFDA
 18999                           fsr2l	equ	0xFD9
 19000                           status	equ	0xFD8
 19001                           
 19002 ;; *************** function _dummy_clocks *****************
 19003 ;; Defined at:
 19004 ;;		line 66 in file "bibliotecas/SDCard.c"
 19005 ;; Parameters:    Size  Location     Type
 19006 ;;  n               1    wreg     unsigned char 
 19007 ;; Auto vars:     Size  Location     Type
 19008 ;;  n               1   29[COMRAM] unsigned char 
 19009 ;;  i               2   30[COMRAM] unsigned int 
 19010 ;; Return value:  Size  Location     Type
 19011 ;;                  1    wreg      void 
 19012 ;; Registers used:
 19013 ;;		wreg, status,2, status,0, cstack
 19014 ;; Tracked objects:
 19015 ;;		On entry : 0/0
 19016 ;;		On exit  : 0/0
 19017 ;;		Unchanged: 0/0
 19018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19019 ;;      Params:         0       0       0       0       0       0       0       0       0
 19020 ;;      Locals:         3       0       0       0       0       0       0       0       0
 19021 ;;      Temps:          2       0       0       0       0       0       0       0       0
 19022 ;;      Totals:         5       0       0       0       0       0       0       0       0
 19023 ;;Total ram usage:        5 bytes
 19024 ;; Hardware stack levels used:    1
 19025 ;; Hardware stack levels required when called:    3
 19026 ;; This function calls:
 19027 ;;		_escreve_dado_SPI
 19028 ;; This function is called by:
 19029 ;;		_sdc_disk_read
 19030 ;;		_sdc_disk_write
 19031 ;;		_sdc_disk_status
 19032 ;;		_sdc_reset
 19033 ;;		_sdc_disk_initialize
 19034 ;; This function uses a non-reentrant model
 19035 ;;
 19036                           
 19037                           	psect	text75
 19038  004F20                     __ptext75:
 19039                           	opt stack 0
 19040  004F20                     _dummy_clocks:
 19041                           	opt stack 21
 19042                           
 19043                           ;incstack = 0
 19044                           ;dummy_clocks@n stored from wreg
 19045  004F20  6E1E               	movwf	dummy_clocks@n,c
 19046                           
 19047                           ;SDCard.c: 68: unsigned int i;
 19048                           ;SDCard.c: 69: _delay((unsigned long)((1)*(48000000/4000.0)));
 19049  004F22  0E10               	movlw	16
 19050  004F24  6E1C               	movwf	??_dummy_clocks& (0+255),c
 19051  004F26  0E94               	movlw	148
 19052  004F28                     u19297:
 19053  004F28  2EE8               	decfsz	wreg,f,c
 19054  004F2A  D7FE               	bra	u19297
 19055  004F2C  2E1C               	decfsz	??_dummy_clocks& (0+255),f,c
 19056  004F2E  D7FC               	bra	u19297
 19057  004F30  D000               	nop2	
 19058                           
 19059                           ;SDCard.c: 71: for(i=0;i<n;i++)
 19060  004F32  0E00               	movlw	0
 19061  004F34  6E20               	movwf	dummy_clocks@i+1,c
 19062  004F36  0E00               	movlw	0
 19063  004F38  6E1F               	movwf	dummy_clocks@i,c
 19064  004F3A  D007               	goto	l289
 19065  004F3C                     l290:
 19066                           
 19067                           ;SDCard.c: 72: {
 19068                           ;SDCard.c: 73: LATBbits.LATB4 = 1;
 19069  004F3C  888A               	bsf	3978,4,c	;volatile
 19070                           
 19071                           ;SDCard.c: 74: escreve_dado_SPI(0XFF);
 19072  004F3E  0EFF               	movlw	255
 19073  004F40  EC4C  F027         	call	_escreve_dado_SPI
 19074                           
 19075                           ;SDCard.c: 75: LATBbits.LATB4 = 0;
 19076  004F44  988A               	bcf	3978,4,c	;volatile
 19077  004F46  4A1F               	infsnz	dummy_clocks@i,f,c
 19078  004F48  2A20               	incf	dummy_clocks@i+1,f,c
 19079  004F4A                     l289:
 19080  004F4A  501E               	movf	dummy_clocks@n,w,c
 19081  004F4C  6E1C               	movwf	??_dummy_clocks& (0+255),c
 19082  004F4E  6A1D               	clrf	(??_dummy_clocks+1)& (0+255),c
 19083  004F50  501C               	movf	??_dummy_clocks,w,c
 19084  004F52  5C1F               	subwf	dummy_clocks@i,w,c
 19085  004F54  501D               	movf	??_dummy_clocks+1,w,c
 19086  004F56  5820               	subwfb	dummy_clocks@i+1,w,c
 19087  004F58  B0D8               	btfsc	status,0,c
 19088  004F5A  0012               	return	
 19089  004F5C  D7EF               	goto	l290
 19090  004F5E                     __end_of_dummy_clocks:
 19091                           	opt stack 0
 19092                           tosu	equ	0xFFF
 19093                           tosh	equ	0xFFE
 19094                           tosl	equ	0xFFD
 19095                           pclath	equ	0xFFA
 19096                           tblptru	equ	0xFF8
 19097                           tblptrh	equ	0xFF7
 19098                           tblptrl	equ	0xFF6
 19099                           tablat	equ	0xFF5
 19100                           prodh	equ	0xFF4
 19101                           prodl	equ	0xFF3
 19102                           intcon	equ	0xFF2
 19103                           intcon2	equ	0xFF1
 19104                           intcon3	equ	0xFF0
 19105                           indf0	equ	0xFEF
 19106                           postinc0	equ	0xFEE
 19107                           fsr0h	equ	0xFEA
 19108                           fsr0l	equ	0xFE9
 19109                           wreg	equ	0xFE8
 19110                           indf1	equ	0xFE7
 19111                           postinc1	equ	0xFE6
 19112                           postdec1	equ	0xFE5
 19113                           fsr1h	equ	0xFE2
 19114                           fsr1l	equ	0xFE1
 19115                           indf2	equ	0xFDF
 19116                           postinc2	equ	0xFDE
 19117                           postdec2	equ	0xFDD
 19118                           plusw2	equ	0xFDB
 19119                           fsr2h	equ	0xFDA
 19120                           fsr2l	equ	0xFD9
 19121                           status	equ	0xFD8
 19122                           
 19123 ;; *************** function _command *****************
 19124 ;; Defined at:
 19125 ;;		line 104 in file "bibliotecas/SDCard.c"
 19126 ;; Parameters:    Size  Location     Type
 19127 ;;  CMD             1    wreg     unsigned char 
 19128 ;;  arg             4   27[COMRAM] unsigned long 
 19129 ;;  CRC             1   31[COMRAM] unsigned char 
 19130 ;; Auto vars:     Size  Location     Type
 19131 ;;  CMD             1   32[COMRAM] unsigned char 
 19132 ;;  argument        1   33[COMRAM] unsigned char 
 19133 ;; Return value:  Size  Location     Type
 19134 ;;                  1    wreg      void 
 19135 ;; Registers used:
 19136 ;;		wreg, status,2, status,0, cstack
 19137 ;; Tracked objects:
 19138 ;;		On entry : 0/0
 19139 ;;		On exit  : 0/0
 19140 ;;		Unchanged: 0/0
 19141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19142 ;;      Params:         5       0       0       0       0       0       0       0       0
 19143 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19144 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19145 ;;      Totals:         7       0       0       0       0       0       0       0       0
 19146 ;;Total ram usage:        7 bytes
 19147 ;; Hardware stack levels used:    1
 19148 ;; Hardware stack levels required when called:    3
 19149 ;; This function calls:
 19150 ;;		_escreve_dado_SPI
 19151 ;; This function is called by:
 19152 ;;		_sdc_disk_read
 19153 ;;		_sdc_disk_write
 19154 ;;		_sdc_disk_status
 19155 ;;		_sdc_reset
 19156 ;;		_sdc_disk_initialize
 19157 ;; This function uses a non-reentrant model
 19158 ;;
 19159                           
 19160                           	psect	text76
 19161  004F5E                     __ptext76:
 19162                           	opt stack 0
 19163  004F5E                     _command:
 19164                           	opt stack 21
 19165                           
 19166                           ;incstack = 0
 19167                           ;command@CMD stored from wreg
 19168  004F5E  6E21               	movwf	command@CMD,c
 19169                           
 19170                           ;SDCard.c: 106: unsigned char argument;
 19171                           ;SDCard.c: 107: escreve_dado_SPI(0xFF);
 19172  004F60  0EFF               	movlw	255
 19173  004F62  EC4C  F027         	call	_escreve_dado_SPI
 19174                           
 19175                           ;SDCard.c: 108: escreve_dado_SPI(CMD);
 19176  004F66  5021               	movf	command@CMD,w,c
 19177  004F68  EC4C  F027         	call	_escreve_dado_SPI
 19178                           
 19179                           ;SDCard.c: 109: argument = arg>>24;
 19180  004F6C  C01F  F022         	movff	command@arg+3,command@argument
 19181                           
 19182                           ;SDCard.c: 110: escreve_dado_SPI(argument);
 19183  004F70  5022               	movf	command@argument,w,c
 19184  004F72  EC4C  F027         	call	_escreve_dado_SPI
 19185                           
 19186                           ;SDCard.c: 111: argument = arg>>16;
 19187  004F76  C01E  F022         	movff	command@arg+2,command@argument
 19188                           
 19189                           ;SDCard.c: 112: escreve_dado_SPI(argument);
 19190  004F7A  5022               	movf	command@argument,w,c
 19191  004F7C  EC4C  F027         	call	_escreve_dado_SPI
 19192                           
 19193                           ;SDCard.c: 113: argument = arg>>8;
 19194  004F80  C01D  F022         	movff	command@arg+1,command@argument
 19195                           
 19196                           ;SDCard.c: 114: escreve_dado_SPI(argument);
 19197  004F84  5022               	movf	command@argument,w,c
 19198  004F86  EC4C  F027         	call	_escreve_dado_SPI
 19199                           
 19200                           ;SDCard.c: 115: argument = arg;
 19201  004F8A  C01C  F022         	movff	command@arg,command@argument
 19202                           
 19203                           ;SDCard.c: 116: escreve_dado_SPI(argument);
 19204  004F8E  5022               	movf	command@argument,w,c
 19205  004F90  EC4C  F027         	call	_escreve_dado_SPI
 19206                           
 19207                           ;SDCard.c: 117: escreve_dado_SPI(CRC);
 19208  004F94  5020               	movf	command@CRC,w,c
 19209  004F96  EC4C  F027         	call	_escreve_dado_SPI
 19210  004F9A  0012               	return		;funcret
 19211  004F9C                     __end_of_command:
 19212                           	opt stack 0
 19213                           tosu	equ	0xFFF
 19214                           tosh	equ	0xFFE
 19215                           tosl	equ	0xFFD
 19216                           pclath	equ	0xFFA
 19217                           tblptru	equ	0xFF8
 19218                           tblptrh	equ	0xFF7
 19219                           tblptrl	equ	0xFF6
 19220                           tablat	equ	0xFF5
 19221                           prodh	equ	0xFF4
 19222                           prodl	equ	0xFF3
 19223                           intcon	equ	0xFF2
 19224                           intcon2	equ	0xFF1
 19225                           intcon3	equ	0xFF0
 19226                           indf0	equ	0xFEF
 19227                           postinc0	equ	0xFEE
 19228                           fsr0h	equ	0xFEA
 19229                           fsr0l	equ	0xFE9
 19230                           wreg	equ	0xFE8
 19231                           indf1	equ	0xFE7
 19232                           postinc1	equ	0xFE6
 19233                           postdec1	equ	0xFE5
 19234                           fsr1h	equ	0xFE2
 19235                           fsr1l	equ	0xFE1
 19236                           indf2	equ	0xFDF
 19237                           postinc2	equ	0xFDE
 19238                           postdec2	equ	0xFDD
 19239                           plusw2	equ	0xFDB
 19240                           fsr2h	equ	0xFDA
 19241                           fsr2l	equ	0xFD9
 19242                           status	equ	0xFD8
 19243                           
 19244 ;; *************** function _escreve_dado_SPI *****************
 19245 ;; Defined at:
 19246 ;;		line 67 in file "bibliotecas/SHRC.c"
 19247 ;; Parameters:    Size  Location     Type
 19248 ;;  data_to_shrc    1    wreg     unsigned char 
 19249 ;; Auto vars:     Size  Location     Type
 19250 ;;  data_to_shrc    1   26[COMRAM] unsigned char 
 19251 ;;  contador        1   25[COMRAM] unsigned char 
 19252 ;; Return value:  Size  Location     Type
 19253 ;;                  1    wreg      void 
 19254 ;; Registers used:
 19255 ;;		wreg, status,2, status,0
 19256 ;; Tracked objects:
 19257 ;;		On entry : 0/0
 19258 ;;		On exit  : 0/0
 19259 ;;		Unchanged: 0/0
 19260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19261 ;;      Params:         0       0       0       0       0       0       0       0       0
 19262 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19263 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19264 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19265 ;;Total ram usage:        2 bytes
 19266 ;; Hardware stack levels used:    1
 19267 ;; Hardware stack levels required when called:    2
 19268 ;; This function calls:
 19269 ;;		Nothing
 19270 ;; This function is called by:
 19271 ;;		_dummy_clocks
 19272 ;;		_proceed
 19273 ;;		_command
 19274 ;;		_sdc_disk_write
 19275 ;; This function uses a non-reentrant model
 19276 ;;
 19277                           
 19278                           	psect	text77
 19279  004E98                     __ptext77:
 19280                           	opt stack 0
 19281  004E98                     _escreve_dado_SPI:
 19282                           	opt stack 25
 19283                           
 19284                           ;incstack = 0
 19285                           ;escreve_dado_SPI@data_to_shrc stored from wreg
 19286  004E98  6E1B               	movwf	escreve_dado_SPI@data_to_shrc,c
 19287                           
 19288                           ;SHRC.c: 69: LATBbits.LATB7 = 0;
 19289  004E9A  9E8A               	bcf	3978,7,c	;volatile
 19290                           
 19291                           ;SHRC.c: 70: unsigned char contador=0;
 19292  004E9C  0E00               	movlw	0
 19293  004E9E  6E1A               	movwf	escreve_dado_SPI@contador,c
 19294                           
 19295                           ;SHRC.c: 71: (INTCONbits.GIE = 0);
 19296  004EA0  9EF2               	bcf	intcon,7,c	;volatile
 19297                           
 19298                           ;SHRC.c: 73: while(contador<=7)
 19299  004EA2  D018               	goto	l394
 19300  004EA4                     
 19301                           ;SHRC.c: 74: {
 19302                           ;SHRC.c: 75: if((data_to_shrc & 0x80) == 0)
 19303  004EA4  BE1B               	btfsc	escreve_dado_SPI@data_to_shrc,7,c
 19304  004EA6  D002               	goto	l396
 19305                           
 19306                           ;SHRC.c: 76: {
 19307                           ;SHRC.c: 77: LATBbits.LATB7 = 0;
 19308  004EA8  9E8A               	bcf	3978,7,c	;volatile
 19309                           
 19310                           ;SHRC.c: 78: }
 19311  004EAA  D001               	goto	l397
 19312  004EAC                     l396:
 19313                           
 19314                           ;SHRC.c: 79: else
 19315                           ;SHRC.c: 80: {
 19316                           ;SHRC.c: 81: LATBbits.LATB7 = 1;
 19317  004EAC  8E8A               	bsf	3978,7,c	;volatile
 19318  004EAE                     l397:
 19319                           
 19320                           ;SHRC.c: 82: }
 19321                           ;SHRC.c: 83: data_to_shrc = data_to_shrc << 1;
 19322  004EAE  501B               	movf	escreve_dado_SPI@data_to_shrc,w,c
 19323  004EB0  241B               	addwf	escreve_dado_SPI@data_to_shrc,w,c
 19324  004EB2  6E1B               	movwf	escreve_dado_SPI@data_to_shrc,c
 19325                           
 19326                           ;SHRC.c: 84: _delay((unsigned long)((30)*(48000000/4000000.0)));
 19327  004EB4  0E78               	movlw	120
 19328  004EB6                     u19307:
 19329  004EB6  2EE8               	decfsz	wreg,f,c
 19330  004EB8  D7FE               	bra	u19307
 19331                           
 19332                           ;SHRC.c: 85: LATBbits.LATB6 = 1;
 19333  004EBA  8C8A               	bsf	3978,6,c	;volatile
 19334                           
 19335                           ;SHRC.c: 86: _delay((unsigned long)((30)*(48000000/4000000.0)));
 19336  004EBC  0E78               	movlw	120
 19337  004EBE                     u19317:
 19338  004EBE  2EE8               	decfsz	wreg,f,c
 19339  004EC0  D7FE               	bra	u19317
 19340                           
 19341                           ;SHRC.c: 87: LATBbits.LATB7 = 0;
 19342  004EC2  9E8A               	bcf	3978,7,c	;volatile
 19343                           
 19344                           ;SHRC.c: 88: _delay((unsigned long)((30)*(48000000/4000000.0)));
 19345  004EC4  0E78               	movlw	120
 19346  004EC6                     u19327:
 19347  004EC6  2EE8               	decfsz	wreg,f,c
 19348  004EC8  D7FE               	bra	u19327
 19349                           
 19350                           ;SHRC.c: 89: LATBbits.LATB6 = 0;
 19351  004ECA  9C8A               	bcf	3978,6,c	;volatile
 19352                           
 19353                           ;SHRC.c: 90: _delay((unsigned long)((30)*(48000000/4000000.0)));
 19354  004ECC  0E78               	movlw	120
 19355  004ECE                     u19337:
 19356  004ECE  2EE8               	decfsz	wreg,f,c
 19357  004ED0  D7FE               	bra	u19337
 19358                           
 19359                           ;SHRC.c: 91: contador++;
 19360  004ED2  2A1A               	incf	escreve_dado_SPI@contador,f,c
 19361  004ED4                     l394:
 19362  004ED4  0E07               	movlw	7
 19363  004ED6  641A               	cpfsgt	escreve_dado_SPI@contador,c
 19364  004ED8  D7E5               	goto	l395
 19365                           
 19366                           ;SHRC.c: 92: }
 19367                           ;SHRC.c: 93: (INTCONbits.GIE = 1);
 19368  004EDA  8EF2               	bsf	intcon,7,c	;volatile
 19369  004EDC  0012               	return		;funcret
 19370  004EDE                     __end_of_escreve_dado_SPI:
 19371                           	opt stack 0
 19372                           tosu	equ	0xFFF
 19373                           tosh	equ	0xFFE
 19374                           tosl	equ	0xFFD
 19375                           pclath	equ	0xFFA
 19376                           tblptru	equ	0xFF8
 19377                           tblptrh	equ	0xFF7
 19378                           tblptrl	equ	0xFF6
 19379                           tablat	equ	0xFF5
 19380                           prodh	equ	0xFF4
 19381                           prodl	equ	0xFF3
 19382                           intcon	equ	0xFF2
 19383                           intcon2	equ	0xFF1
 19384                           intcon3	equ	0xFF0
 19385                           indf0	equ	0xFEF
 19386                           postinc0	equ	0xFEE
 19387                           fsr0h	equ	0xFEA
 19388                           fsr0l	equ	0xFE9
 19389                           wreg	equ	0xFE8
 19390                           indf1	equ	0xFE7
 19391                           postinc1	equ	0xFE6
 19392                           postdec1	equ	0xFE5
 19393                           fsr1h	equ	0xFE2
 19394                           fsr1l	equ	0xFE1
 19395                           indf2	equ	0xFDF
 19396                           postinc2	equ	0xFDE
 19397                           postdec2	equ	0xFDD
 19398                           plusw2	equ	0xFDB
 19399                           fsr2h	equ	0xFDA
 19400                           fsr2l	equ	0xFD9
 19401                           status	equ	0xFD8
 19402                           
 19403 ;; *************** function _mem_set *****************
 19404 ;; Defined at:
 19405 ;;		line 249 in file "bibliotecas/ff.c"
 19406 ;; Parameters:    Size  Location     Type
 19407 ;;  dst             2   25[COMRAM] PTR void 
 19408 ;;		 -> f_readdir@sfn(12), f_opendir@sfn(12), f_open@sfn(12), NULL(0), 
 19409 ;;  val             2   27[COMRAM] int 
 19410 ;;  cnt             2   29[COMRAM] int 
 19411 ;; Auto vars:     Size  Location     Type
 19412 ;;  d               2   31[COMRAM] PTR unsigned char 
 19413 ;;		 -> f_readdir@sfn(12), f_opendir@sfn(12), f_open@sfn(12), NULL(0), 
 19414 ;; Return value:  Size  Location     Type
 19415 ;;                  1    wreg      void 
 19416 ;; Registers used:
 19417 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19418 ;; Tracked objects:
 19419 ;;		On entry : 0/0
 19420 ;;		On exit  : 0/0
 19421 ;;		Unchanged: 0/0
 19422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19423 ;;      Params:         6       0       0       0       0       0       0       0       0
 19424 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19425 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19426 ;;      Totals:         8       0       0       0       0       0       0       0       0
 19427 ;;Total ram usage:        8 bytes
 19428 ;; Hardware stack levels used:    1
 19429 ;; Hardware stack levels required when called:    2
 19430 ;; This function calls:
 19431 ;;		Nothing
 19432 ;; This function is called by:
 19433 ;;		_sync
 19434 ;;		_dir_next
 19435 ;;		_dir_register
 19436 ;;		_create_name
 19437 ;; This function uses a non-reentrant model
 19438 ;;
 19439                           
 19440                           	psect	text78
 19441  0050AC                     __ptext78:
 19442                           	opt stack 0
 19443  0050AC                     _mem_set:
 19444                           	opt stack 23
 19445                           
 19446                           ;ff.c: 250: BYTE *d = (BYTE*)dst;
 19447                           
 19448                           ;incstack = 0
 19449  0050AC  C01A  F020         	movff	mem_set@dst,mem_set@d
 19450  0050B0  C01B  F021         	movff	mem_set@dst+1,mem_set@d+1
 19451                           
 19452                           ;ff.c: 252: while (cnt--)
 19453  0050B4  D008               	goto	l947
 19454  0050B6                     l11282:
 19455                           
 19456                           ;ff.c: 253: *d++ = (BYTE)val;
 19457  0050B6  C020  FFD9         	movff	mem_set@d,fsr2l
 19458  0050BA  C021  FFDA         	movff	mem_set@d+1,fsr2h
 19459  0050BE  C01C  FFDF         	movff	mem_set@val,indf2
 19460  0050C2  4A20               	infsnz	mem_set@d,f,c
 19461  0050C4  2A21               	incf	mem_set@d+1,f,c
 19462  0050C6                     l947:
 19463  0050C6  061E               	decf	mem_set@cnt,f,c
 19464  0050C8  A0D8               	btfss	status,0,c
 19465  0050CA  061F               	decf	mem_set@cnt+1,f,c
 19466  0050CC  281E               	incf	mem_set@cnt,w,c
 19467  0050CE  E1F3               	bnz	l11282
 19468  0050D0  281F               	incf	mem_set@cnt+1,w,c
 19469  0050D2  B4D8               	btfsc	status,2,c
 19470  0050D4  0012               	return	
 19471  0050D6  D7EF               	goto	l948
 19472  0050D8                     __end_of_mem_set:
 19473                           	opt stack 0
 19474                           tosu	equ	0xFFF
 19475                           tosh	equ	0xFFE
 19476                           tosl	equ	0xFFD
 19477                           pclath	equ	0xFFA
 19478                           tblptru	equ	0xFF8
 19479                           tblptrh	equ	0xFF7
 19480                           tblptrl	equ	0xFF6
 19481                           tablat	equ	0xFF5
 19482                           prodh	equ	0xFF4
 19483                           prodl	equ	0xFF3
 19484                           intcon	equ	0xFF2
 19485                           intcon2	equ	0xFF1
 19486                           intcon3	equ	0xFF0
 19487                           indf0	equ	0xFEF
 19488                           postinc0	equ	0xFEE
 19489                           fsr0h	equ	0xFEA
 19490                           fsr0l	equ	0xFE9
 19491                           wreg	equ	0xFE8
 19492                           indf1	equ	0xFE7
 19493                           postinc1	equ	0xFE6
 19494                           postdec1	equ	0xFE5
 19495                           fsr1h	equ	0xFE2
 19496                           fsr1l	equ	0xFE1
 19497                           indf2	equ	0xFDF
 19498                           postinc2	equ	0xFDE
 19499                           postdec2	equ	0xFDD
 19500                           plusw2	equ	0xFDB
 19501                           fsr2h	equ	0xFDA
 19502                           fsr2l	equ	0xFD9
 19503                           status	equ	0xFD8
 19504                           
 19505 ;; *************** function _disk_ioctl *****************
 19506 ;; Defined at:
 19507 ;;		line 192 in file "bibliotecas/diskio.c"
 19508 ;; Parameters:    Size  Location     Type
 19509 ;;  drv             1    wreg     unsigned char 
 19510 ;;  ctrl            1   25[COMRAM] unsigned char 
 19511 ;;  buff            2   26[COMRAM] PTR void 
 19512 ;;		 -> NULL(0), 
 19513 ;; Auto vars:     Size  Location     Type
 19514 ;;  drv             1   28[COMRAM] unsigned char 
 19515 ;;  result          2    0        int 
 19516 ;;  res             1   29[COMRAM] enum E22
 19517 ;; Return value:  Size  Location     Type
 19518 ;;                  1    wreg      enum E22
 19519 ;; Registers used:
 19520 ;;		wreg, status,2, status,0
 19521 ;; Tracked objects:
 19522 ;;		On entry : 0/0
 19523 ;;		On exit  : 0/0
 19524 ;;		Unchanged: 0/0
 19525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19526 ;;      Params:         3       0       0       0       0       0       0       0       0
 19527 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19528 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19529 ;;      Totals:         5       0       0       0       0       0       0       0       0
 19530 ;;Total ram usage:        5 bytes
 19531 ;; Hardware stack levels used:    1
 19532 ;; Hardware stack levels required when called:    2
 19533 ;; This function calls:
 19534 ;;		Nothing
 19535 ;; This function is called by:
 19536 ;;		_sync
 19537 ;; This function uses a non-reentrant model
 19538 ;;
 19539                           
 19540                           	psect	text79
 19541  005100                     __ptext79:
 19542                           	opt stack 0
 19543  005100                     _disk_ioctl:
 19544                           	opt stack 23
 19545                           
 19546                           ;incstack = 0
 19547                           ;disk_ioctl@drv stored from wreg
 19548  005100  6E1D               	movwf	disk_ioctl@drv,c
 19549                           
 19550                           ;diskio.c: 198: DRESULT res;
 19551                           ;diskio.c: 199: int result;
 19552                           ;diskio.c: 201: switch (drv) {
 19553  005102  D006               	goto	l919
 19554  005104                     l920:
 19555                           
 19556                           ;diskio.c: 208: return res;
 19557  005104  501E               	movf	disk_ioctl@res,w,c
 19558  005106  0012               	return	
 19559  005108                     l922:
 19560                           
 19561                           ;diskio.c: 216: return res;
 19562  005108  501E               	movf	disk_ioctl@res,w,c
 19563  00510A  0012               	return	
 19564  00510C                     l923:
 19565                           
 19566                           ;diskio.c: 224: return res;
 19567  00510C  501E               	movf	disk_ioctl@res,w,c
 19568  00510E  0012               	return	
 19569  005110                     l919:
 19570  005110  501D               	movf	disk_ioctl@drv,w,c
 19571                           
 19572                           ; Switch size 1, requested type "space"
 19573                           ; Number of cases is 3, Range of values is 0 to 2
 19574                           ; switch strategies available:
 19575                           ; Name         Instructions Cycles
 19576                           ; simple_byte           10     6 (average)
 19577                           ;	Chosen strategy is simple_byte
 19578  005112  0A00               	xorlw	0	; case 0
 19579  005114  B4D8               	btfsc	status,2,c
 19580  005116  D7F6               	goto	l920
 19581  005118  0A01               	xorlw	1	; case 1
 19582  00511A  B4D8               	btfsc	status,2,c
 19583  00511C  D7F5               	goto	l922
 19584  00511E  0A03               	xorlw	3	; case 2
 19585  005120  B4D8               	btfsc	status,2,c
 19586  005122  D7F4               	goto	l923
 19587                           
 19588                           ;diskio.c: 226: return RES_PARERR;
 19589  005124  0E04               	movlw	4
 19590  005126  0012               	return	
 19591  005128                     __end_of_disk_ioctl:
 19592                           	opt stack 0
 19593                           tosu	equ	0xFFF
 19594                           tosh	equ	0xFFE
 19595                           tosl	equ	0xFFD
 19596                           pclath	equ	0xFFA
 19597                           tblptru	equ	0xFF8
 19598                           tblptrh	equ	0xFF7
 19599                           tblptrl	equ	0xFF6
 19600                           tablat	equ	0xFF5
 19601                           prodh	equ	0xFF4
 19602                           prodl	equ	0xFF3
 19603                           intcon	equ	0xFF2
 19604                           intcon2	equ	0xFF1
 19605                           intcon3	equ	0xFF0
 19606                           indf0	equ	0xFEF
 19607                           postinc0	equ	0xFEE
 19608                           fsr0h	equ	0xFEA
 19609                           fsr0l	equ	0xFE9
 19610                           wreg	equ	0xFE8
 19611                           indf1	equ	0xFE7
 19612                           postinc1	equ	0xFE6
 19613                           postdec1	equ	0xFE5
 19614                           fsr1h	equ	0xFE2
 19615                           fsr1l	equ	0xFE1
 19616                           indf2	equ	0xFDF
 19617                           postinc2	equ	0xFDE
 19618                           postdec2	equ	0xFDD
 19619                           plusw2	equ	0xFDB
 19620                           fsr2h	equ	0xFDA
 19621                           fsr2l	equ	0xFD9
 19622                           status	equ	0xFD8
 19623                           
 19624 ;; *************** function _get_fattime *****************
 19625 ;; Defined at:
 19626 ;;		line 1883 in file "bibliotecas/ff.c"
 19627 ;; Parameters:    Size  Location     Type
 19628 ;;		None
 19629 ;; Auto vars:     Size  Location     Type
 19630 ;;  f_time          9   29[COMRAM] struct .
 19631 ;; Return value:  Size  Location     Type
 19632 ;;                  4   25[COMRAM] unsigned long 
 19633 ;; Registers used:
 19634 ;;		wreg, status,2, status,0
 19635 ;; Tracked objects:
 19636 ;;		On entry : 0/0
 19637 ;;		On exit  : 0/0
 19638 ;;		Unchanged: 0/0
 19639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19640 ;;      Params:         4       0       0       0       0       0       0       0       0
 19641 ;;      Locals:         9       0       0       0       0       0       0       0       0
 19642 ;;      Temps:          0      38       0       0       0       0       0       0       0
 19643 ;;      Totals:        13      38       0       0       0       0       0       0       0
 19644 ;;Total ram usage:       51 bytes
 19645 ;; Hardware stack levels used:    1
 19646 ;; Hardware stack levels required when called:    2
 19647 ;; This function calls:
 19648 ;;		Nothing
 19649 ;; This function is called by:
 19650 ;;		_f_sync
 19651 ;;		_f_open
 19652 ;; This function uses a non-reentrant model
 19653 ;;
 19654                           
 19655                           	psect	text80
 19656  003BF4                     __ptext80:
 19657                           	opt stack 0
 19658  003BF4                     _get_fattime:
 19659                           	opt stack 24
 19660                           
 19661                           ;ff.c: 1885: fat_time f_time;
 19662                           ;ff.c: 1887: return (DWORD)(f_time.ano ) << 25 |
 19663                           ;ff.c: 1888: (DWORD)(f_time.mes) << 21 |
 19664                           ;ff.c: 1889: (DWORD)(f_time.mes) << 16 |
 19665                           ;ff.c: 1890: (DWORD)(f_time.hora) << 11 |
 19666                           ;ff.c: 1891: (DWORD)(f_time.min) << 5 |
 19667                           ;ff.c: 1892: (DWORD)(f_time.seg) >> 1;
 19668                           
 19669                           ;incstack = 0
 19670  003BF4  90D8               	bcf	status,0,c
 19671  003BF6  3023               	rrcf	get_fattime@f_time+5,w,c
 19672  003BF8  0100               	movlb	0	; () banked
 19673  003BFA  6F61               	movwf	(??_get_fattime+1)& (0+255),b
 19674  003BFC  3022               	rrcf	get_fattime@f_time+4,w,c
 19675  003BFE  6F60               	movwf	??_get_fattime& (0+255),b
 19676  003C00  5020               	movf	get_fattime@f_time+2,w,c
 19677  003C02  6F62               	movwf	(??_get_fattime+2)& (0+255),b
 19678  003C04  5021               	movf	get_fattime@f_time+3,w,c
 19679  003C06  6F63               	movwf	(??_get_fattime+3)& (0+255),b
 19680  003C08  6B64               	clrf	(??_get_fattime+4)& (0+255),b
 19681  003C0A  6B65               	clrf	(??_get_fattime+5)& (0+255),b
 19682  003C0C  0E05               	movlw	5
 19683  003C0E                     u14865:
 19684  003C0E  90D8               	bcf	status,0,c
 19685  003C10  3762               	rlcf	(??_get_fattime+2)& (0+255),f,b
 19686  003C12  3763               	rlcf	(??_get_fattime+3)& (0+255),f,b
 19687  003C14  3764               	rlcf	(??_get_fattime+4)& (0+255),f,b
 19688  003C16  3765               	rlcf	(??_get_fattime+5)& (0+255),f,b
 19689  003C18  2EE8               	decfsz	wreg,f,c
 19690  003C1A  D7F9               	goto	u14865
 19691  003C1C  501E               	movf	get_fattime@f_time,w,c
 19692  003C1E  6F66               	movwf	(??_get_fattime+6)& (0+255),b
 19693  003C20  501F               	movf	get_fattime@f_time+1,w,c
 19694  003C22  6F67               	movwf	(??_get_fattime+7)& (0+255),b
 19695  003C24  6B68               	clrf	(??_get_fattime+8)& (0+255),b
 19696  003C26  6B69               	clrf	(??_get_fattime+9)& (0+255),b
 19697  003C28  0E0B               	movlw	11
 19698  003C2A                     u14875:
 19699  003C2A  90D8               	bcf	status,0,c
 19700  003C2C  3766               	rlcf	(??_get_fattime+6)& (0+255),f,b
 19701  003C2E  3767               	rlcf	(??_get_fattime+7)& (0+255),f,b
 19702  003C30  3768               	rlcf	(??_get_fattime+8)& (0+255),f,b
 19703  003C32  3769               	rlcf	(??_get_fattime+9)& (0+255),f,b
 19704  003C34  2EE8               	decfsz	wreg,f,c
 19705  003C36  D7F9               	goto	u14875
 19706  003C38  C025  F06A         	movff	get_fattime@f_time+7,??_get_fattime+10
 19707  003C3C  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 19708  003C3E  6B6C               	clrf	(??_get_fattime+12)& (0+255),b
 19709  003C40  6B6D               	clrf	(??_get_fattime+13)& (0+255),b
 19710  003C42  C06B  F06D         	movff	??_get_fattime+11,??_get_fattime+13
 19711  003C46  C06A  F06C         	movff	??_get_fattime+10,??_get_fattime+12
 19712  003C4A  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 19713  003C4C  6B6A               	clrf	(??_get_fattime+10)& (0+255),b
 19714  003C4E  C025  F06E         	movff	get_fattime@f_time+7,??_get_fattime+14
 19715  003C52  6B6F               	clrf	(??_get_fattime+15)& (0+255),b
 19716  003C54  6B70               	clrf	(??_get_fattime+16)& (0+255),b
 19717  003C56  6B71               	clrf	(??_get_fattime+17)& (0+255),b
 19718  003C58  0E15               	movlw	21
 19719  003C5A                     u14885:
 19720  003C5A  90D8               	bcf	status,0,c
 19721  003C5C  376E               	rlcf	(??_get_fattime+14)& (0+255),f,b
 19722  003C5E  376F               	rlcf	(??_get_fattime+15)& (0+255),f,b
 19723  003C60  3770               	rlcf	(??_get_fattime+16)& (0+255),f,b
 19724  003C62  3771               	rlcf	(??_get_fattime+17)& (0+255),f,b
 19725  003C64  2EE8               	decfsz	wreg,f,c
 19726  003C66  D7F9               	goto	u14885
 19727  003C68  C026  F072         	movff	get_fattime@f_time+8,??_get_fattime+18
 19728  003C6C  6B73               	clrf	(??_get_fattime+19)& (0+255),b
 19729  003C6E  6B74               	clrf	(??_get_fattime+20)& (0+255),b
 19730  003C70  6B75               	clrf	(??_get_fattime+21)& (0+255),b
 19731  003C72  0E19               	movlw	25
 19732  003C74                     u14895:
 19733  003C74  90D8               	bcf	status,0,c
 19734  003C76  3772               	rlcf	(??_get_fattime+18)& (0+255),f,b
 19735  003C78  3773               	rlcf	(??_get_fattime+19)& (0+255),f,b
 19736  003C7A  3774               	rlcf	(??_get_fattime+20)& (0+255),f,b
 19737  003C7C  3775               	rlcf	(??_get_fattime+21)& (0+255),f,b
 19738  003C7E  2EE8               	decfsz	wreg,f,c
 19739  003C80  D7F9               	goto	u14895
 19740  003C82  516E               	movf	(??_get_fattime+14)& (0+255),w,b
 19741  003C84  1172               	iorwf	(??_get_fattime+18)& (0+255),w,b
 19742  003C86  6F76               	movwf	(??_get_fattime+22)& (0+255),b
 19743  003C88  516F               	movf	(??_get_fattime+15)& (0+255),w,b
 19744  003C8A  1173               	iorwf	(??_get_fattime+19)& (0+255),w,b
 19745  003C8C  6F77               	movwf	(??_get_fattime+23)& (0+255),b
 19746  003C8E  5170               	movf	(??_get_fattime+16)& (0+255),w,b
 19747  003C90  1174               	iorwf	(??_get_fattime+20)& (0+255),w,b
 19748  003C92  6F78               	movwf	(??_get_fattime+24)& (0+255),b
 19749  003C94  5171               	movf	(??_get_fattime+17)& (0+255),w,b
 19750  003C96  1175               	iorwf	(??_get_fattime+21)& (0+255),w,b
 19751  003C98  6F79               	movwf	(??_get_fattime+25)& (0+255),b
 19752  003C9A  516A               	movf	(??_get_fattime+10)& (0+255),w,b
 19753  003C9C  1176               	iorwf	(??_get_fattime+22)& (0+255),w,b
 19754  003C9E  6F7A               	movwf	(??_get_fattime+26)& (0+255),b
 19755  003CA0  516B               	movf	(??_get_fattime+11)& (0+255),w,b
 19756  003CA2  1177               	iorwf	(??_get_fattime+23)& (0+255),w,b
 19757  003CA4  6F7B               	movwf	(??_get_fattime+27)& (0+255),b
 19758  003CA6  516C               	movf	(??_get_fattime+12)& (0+255),w,b
 19759  003CA8  1178               	iorwf	(??_get_fattime+24)& (0+255),w,b
 19760  003CAA  6F7C               	movwf	(??_get_fattime+28)& (0+255),b
 19761  003CAC  516D               	movf	(??_get_fattime+13)& (0+255),w,b
 19762  003CAE  1179               	iorwf	(??_get_fattime+25)& (0+255),w,b
 19763  003CB0  6F7D               	movwf	(??_get_fattime+29)& (0+255),b
 19764  003CB2  5166               	movf	(??_get_fattime+6)& (0+255),w,b
 19765  003CB4  117A               	iorwf	(??_get_fattime+26)& (0+255),w,b
 19766  003CB6  6F7E               	movwf	(??_get_fattime+30)& (0+255),b
 19767  003CB8  5167               	movf	(??_get_fattime+7)& (0+255),w,b
 19768  003CBA  117B               	iorwf	(??_get_fattime+27)& (0+255),w,b
 19769  003CBC  6F7F               	movwf	(??_get_fattime+31)& (0+255),b
 19770  003CBE  5168               	movf	(??_get_fattime+8)& (0+255),w,b
 19771  003CC0  117C               	iorwf	(??_get_fattime+28)& (0+255),w,b
 19772  003CC2  6F80               	movwf	(??_get_fattime+32)& (0+255),b
 19773  003CC4  5169               	movf	(??_get_fattime+9)& (0+255),w,b
 19774  003CC6  117D               	iorwf	(??_get_fattime+29)& (0+255),w,b
 19775  003CC8  6F81               	movwf	(??_get_fattime+33)& (0+255),b
 19776  003CCA  5162               	movf	(??_get_fattime+2)& (0+255),w,b
 19777  003CCC  117E               	iorwf	(??_get_fattime+30)& (0+255),w,b
 19778  003CCE  6F82               	movwf	(??_get_fattime+34)& (0+255),b
 19779  003CD0  5163               	movf	(??_get_fattime+3)& (0+255),w,b
 19780  003CD2  117F               	iorwf	(??_get_fattime+31)& (0+255),w,b
 19781  003CD4  6F83               	movwf	(??_get_fattime+35)& (0+255),b
 19782  003CD6  5164               	movf	(??_get_fattime+4)& (0+255),w,b
 19783  003CD8  1180               	iorwf	(??_get_fattime+32)& (0+255),w,b
 19784  003CDA  6F84               	movwf	(??_get_fattime+36)& (0+255),b
 19785  003CDC  5165               	movf	(??_get_fattime+5)& (0+255),w,b
 19786  003CDE  1181               	iorwf	(??_get_fattime+33)& (0+255),w,b
 19787  003CE0  6F85               	movwf	(??_get_fattime+37)& (0+255),b
 19788  003CE2  5160               	movf	??_get_fattime& (0+255),w,b
 19789  003CE4  1182               	iorwf	(??_get_fattime+34)& (0+255),w,b
 19790  003CE6  6E1A               	movwf	?_get_fattime,c
 19791  003CE8  5161               	movf	(??_get_fattime+1)& (0+255),w,b
 19792  003CEA  1183               	iorwf	(??_get_fattime+35)& (0+255),w,b
 19793  003CEC  6E1B               	movwf	?_get_fattime+1,c
 19794  003CEE  0E00               	movlw	0
 19795  003CF0  1184               	iorwf	(??_get_fattime+36)& (0+255),w,b
 19796  003CF2  6E1C               	movwf	?_get_fattime+2,c
 19797  003CF4  0E00               	movlw	0
 19798  003CF6  1185               	iorwf	(??_get_fattime+37)& (0+255),w,b
 19799  003CF8  6E1D               	movwf	?_get_fattime+3,c
 19800  003CFA  0012               	return	
 19801  003CFC                     __end_of_get_fattime:
 19802                           	opt stack 0
 19803                           tosu	equ	0xFFF
 19804                           tosh	equ	0xFFE
 19805                           tosl	equ	0xFFD
 19806                           pclath	equ	0xFFA
 19807                           tblptru	equ	0xFF8
 19808                           tblptrh	equ	0xFF7
 19809                           tblptrl	equ	0xFF6
 19810                           tablat	equ	0xFF5
 19811                           prodh	equ	0xFF4
 19812                           prodl	equ	0xFF3
 19813                           intcon	equ	0xFF2
 19814                           intcon2	equ	0xFF1
 19815                           intcon3	equ	0xFF0
 19816                           indf0	equ	0xFEF
 19817                           postinc0	equ	0xFEE
 19818                           fsr0h	equ	0xFEA
 19819                           fsr0l	equ	0xFE9
 19820                           wreg	equ	0xFE8
 19821                           indf1	equ	0xFE7
 19822                           postinc1	equ	0xFE6
 19823                           postdec1	equ	0xFE5
 19824                           fsr1h	equ	0xFE2
 19825                           fsr1l	equ	0xFE1
 19826                           indf2	equ	0xFDF
 19827                           postinc2	equ	0xFDE
 19828                           postdec2	equ	0xFDD
 19829                           plusw2	equ	0xFDB
 19830                           fsr2h	equ	0xFDA
 19831                           fsr2l	equ	0xFD9
 19832                           status	equ	0xFD8
 19833                           
 19834 ;; *************** function _escreve_cmd_lcd *****************
 19835 ;; Defined at:
 19836 ;;		line 162 in file "bibliotecas/display_lcd.c"
 19837 ;; Parameters:    Size  Location     Type
 19838 ;;  comando         1    wreg     unsigned char 
 19839 ;; Auto vars:     Size  Location     Type
 19840 ;;  comando         1   27[COMRAM] unsigned char 
 19841 ;; Return value:  Size  Location     Type
 19842 ;;                  1    wreg      void 
 19843 ;; Registers used:
 19844 ;;		wreg, status,2, status,0, cstack
 19845 ;; Tracked objects:
 19846 ;;		On entry : 0/0
 19847 ;;		On exit  : 0/0
 19848 ;;		Unchanged: 0/0
 19849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19850 ;;      Params:         0       0       0       0       0       0       0       0       0
 19851 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19852 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19853 ;;      Totals:         1       0       0       0       0       0       0       0       0
 19854 ;;Total ram usage:        1 bytes
 19855 ;; Hardware stack levels used:    1
 19856 ;; Hardware stack levels required when called:    3
 19857 ;; This function calls:
 19858 ;;		_delay
 19859 ;; This function is called by:
 19860 ;;		_gps
 19861 ;;		_SDCard
 19862 ;;		_init_lcd
 19863 ;;		_sdc_disk_initialize
 19864 ;;		_inicializa_SPI
 19865 ;;		_leitura_chave
 19866 ;;		_cria_caractere_lcd
 19867 ;; This function uses a non-reentrant model
 19868 ;;
 19869                           
 19870                           	psect	text81
 19871  0045CC                     __ptext81:
 19872                           	opt stack 0
 19873  0045CC                     _escreve_cmd_lcd:
 19874                           	opt stack 26
 19875                           
 19876                           ; BSR set to: 0
 19877                           ;incstack = 0
 19878                           ;escreve_cmd_lcd@comando stored from wreg
 19879  0045CC  6E1C               	movwf	escreve_cmd_lcd@comando,c
 19880                           
 19881                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 19882  0045CE  9483               	bcf	3971,2,c	;volatile
 19883                           
 19884                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 19885  0045D0  9283               	bcf	3971,1,c	;volatile
 19886                           
 19887                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 19888  0045D2  9083               	bcf	3971,0,c	;volatile
 19889                           
 19890                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 19891  0045D4  A81C               	btfss	escreve_cmd_lcd@comando,4,c
 19892  0045D6  D002               	goto	l533
 19893  0045D8  8883               	bsf	3971,4,c	;volatile
 19894  0045DA  D001               	goto	l534
 19895  0045DC                     l533:
 19896                           
 19897                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 19898  0045DC  9883               	bcf	3971,4,c	;volatile
 19899  0045DE                     l534:
 19900                           
 19901                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 19902  0045DE  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
 19903  0045E0  D002               	goto	l535
 19904  0045E2  8A83               	bsf	3971,5,c	;volatile
 19905  0045E4  D001               	goto	l536
 19906  0045E6                     l535:
 19907                           
 19908                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 19909  0045E6  9A83               	bcf	3971,5,c	;volatile
 19910  0045E8                     l536:
 19911                           
 19912                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 19913  0045E8  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
 19914  0045EA  D002               	goto	l537
 19915  0045EC  8C83               	bsf	3971,6,c	;volatile
 19916  0045EE  D001               	goto	l538
 19917  0045F0                     l537:
 19918                           
 19919                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 19920  0045F0  9C83               	bcf	3971,6,c	;volatile
 19921  0045F2                     l538:
 19922                           
 19923                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 19924  0045F2  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
 19925  0045F4  D002               	goto	l539
 19926  0045F6  8E83               	bsf	3971,7,c	;volatile
 19927  0045F8  D001               	goto	l540
 19928  0045FA                     l539:
 19929                           
 19930                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 19931  0045FA  9E83               	bcf	3971,7,c	;volatile
 19932  0045FC                     l540:
 19933                           
 19934                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 19935  0045FC  8083               	bsf	3971,0,c	;volatile
 19936                           
 19937                           ;display_lcd.c: 181: delay();
 19938  0045FE  ECF1  F028         	call	_delay	;wreg free
 19939                           
 19940                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 19941  004602  9083               	bcf	3971,0,c	;volatile
 19942                           
 19943                           ;display_lcd.c: 183: delay();
 19944  004604  ECF1  F028         	call	_delay	;wreg free
 19945                           
 19946                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 19947  004608  A01C               	btfss	escreve_cmd_lcd@comando,0,c
 19948  00460A  D002               	goto	l541
 19949  00460C  8883               	bsf	3971,4,c	;volatile
 19950  00460E  D001               	goto	l542
 19951  004610                     l541:
 19952                           
 19953                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 19954  004610  9883               	bcf	3971,4,c	;volatile
 19955  004612                     l542:
 19956                           
 19957                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 19958  004612  A21C               	btfss	escreve_cmd_lcd@comando,1,c
 19959  004614  D002               	goto	l543
 19960  004616  8A83               	bsf	3971,5,c	;volatile
 19961  004618  D001               	goto	l544
 19962  00461A                     l543:
 19963                           
 19964                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 19965  00461A  9A83               	bcf	3971,5,c	;volatile
 19966  00461C                     l544:
 19967                           
 19968                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 19969  00461C  A41C               	btfss	escreve_cmd_lcd@comando,2,c
 19970  00461E  D002               	goto	l545
 19971  004620  8C83               	bsf	3971,6,c	;volatile
 19972  004622  D001               	goto	l546
 19973  004624                     l545:
 19974                           
 19975                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 19976  004624  9C83               	bcf	3971,6,c	;volatile
 19977  004626                     l546:
 19978                           
 19979                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 19980  004626  A61C               	btfss	escreve_cmd_lcd@comando,3,c
 19981  004628  D002               	goto	l547
 19982  00462A  8E83               	bsf	3971,7,c	;volatile
 19983  00462C  D001               	goto	l548
 19984  00462E                     l547:
 19985                           
 19986                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 19987  00462E  9E83               	bcf	3971,7,c	;volatile
 19988  004630                     l548:
 19989                           
 19990                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 19991  004630  8083               	bsf	3971,0,c	;volatile
 19992                           
 19993                           ;display_lcd.c: 197: delay();
 19994  004632  ECF1  F028         	call	_delay	;wreg free
 19995                           
 19996                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 19997  004636  9083               	bcf	3971,0,c	;volatile
 19998                           
 19999                           ;display_lcd.c: 199: delay();
 20000  004638  ECF1  F028         	call	_delay	;wreg free
 20001                           
 20002                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 20003  00463C  041C               	decf	escreve_cmd_lcd@comando,w,c
 20004  00463E  B4D8               	btfsc	status,2,c
 20005  004640  D008               	goto	u16290
 20006  004642  0E02               	movlw	2
 20007  004644  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 20008  004646  B4D8               	btfsc	status,2,c
 20009  004648  D004               	goto	u16290
 20010  00464A  0E03               	movlw	3
 20011  00464C  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 20012  00464E  A4D8               	btfss	status,2,c
 20013  004650  0012               	return	
 20014  004652                     u16290:
 20015                           
 20016                           ;display_lcd.c: 205: { delay(); }
 20017  004652  ECF1  F028         	call	_delay	;wreg free
 20018  004656  0012               	return	
 20019  004658                     __end_of_escreve_cmd_lcd:
 20020                           	opt stack 0
 20021                           tosu	equ	0xFFF
 20022                           tosh	equ	0xFFE
 20023                           tosl	equ	0xFFD
 20024                           pclath	equ	0xFFA
 20025                           tblptru	equ	0xFF8
 20026                           tblptrh	equ	0xFF7
 20027                           tblptrl	equ	0xFF6
 20028                           tablat	equ	0xFF5
 20029                           prodh	equ	0xFF4
 20030                           prodl	equ	0xFF3
 20031                           intcon	equ	0xFF2
 20032                           intcon2	equ	0xFF1
 20033                           intcon3	equ	0xFF0
 20034                           indf0	equ	0xFEF
 20035                           postinc0	equ	0xFEE
 20036                           fsr0h	equ	0xFEA
 20037                           fsr0l	equ	0xFE9
 20038                           wreg	equ	0xFE8
 20039                           indf1	equ	0xFE7
 20040                           postinc1	equ	0xFE6
 20041                           postdec1	equ	0xFE5
 20042                           fsr1h	equ	0xFE2
 20043                           fsr1l	equ	0xFE1
 20044                           indf2	equ	0xFDF
 20045                           postinc2	equ	0xFDE
 20046                           postdec2	equ	0xFDD
 20047                           plusw2	equ	0xFDB
 20048                           fsr2h	equ	0xFDA
 20049                           fsr2l	equ	0xFD9
 20050                           status	equ	0xFD8
 20051                           
 20052 ;; *************** function _delay *****************
 20053 ;; Defined at:
 20054 ;;		line 45 in file "bibliotecas/display_lcd.c"
 20055 ;; Parameters:    Size  Location     Type
 20056 ;;		None
 20057 ;; Auto vars:     Size  Location     Type
 20058 ;;  contador_int    1   26[COMRAM] unsigned char 
 20059 ;;  contador_ext    1   25[COMRAM] unsigned char 
 20060 ;; Return value:  Size  Location     Type
 20061 ;;                  1    wreg      void 
 20062 ;; Registers used:
 20063 ;;		wreg, status,2, status,0
 20064 ;; Tracked objects:
 20065 ;;		On entry : 0/0
 20066 ;;		On exit  : 0/0
 20067 ;;		Unchanged: 0/0
 20068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20069 ;;      Params:         0       0       0       0       0       0       0       0       0
 20070 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20071 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20072 ;;      Totals:         2       0       0       0       0       0       0       0       0
 20073 ;;Total ram usage:        2 bytes
 20074 ;; Hardware stack levels used:    1
 20075 ;; Hardware stack levels required when called:    2
 20076 ;; This function calls:
 20077 ;;		Nothing
 20078 ;; This function is called by:
 20079 ;;		_init_lcd
 20080 ;;		_escreve_cmd_lcd
 20081 ;;		_endereco_cursor_lcd
 20082 ;;		_escreve_caractere_lcd
 20083 ;; This function uses a non-reentrant model
 20084 ;;
 20085                           
 20086                           	psect	text82
 20087  0051E2                     __ptext82:
 20088                           	opt stack 0
 20089  0051E2                     _delay:
 20090                           	opt stack 26
 20091                           
 20092                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 20093                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 20094                           
 20095                           ;incstack = 0
 20096  0051E2  0E00               	movlw	0
 20097  0051E4  6E1A               	movwf	delay@contador_ext,c
 20098  0051E6                     l10812:
 20099  0051E6  0E63               	movlw	99
 20100  0051E8  641A               	cpfsgt	delay@contador_ext,c
 20101  0051EA  D001               	goto	l523
 20102  0051EC  0012               	return	
 20103  0051EE                     l523:
 20104                           
 20105                           ;display_lcd.c: 50: {
 20106                           ;display_lcd.c: 51: __nop();
 20107  0051EE  F000               	nop	
 20108                           
 20109                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 20110  0051F0  0E00               	movlw	0
 20111  0051F2  6E1B               	movwf	delay@contador_int,c
 20112  0051F4                     l10818:
 20113  0051F4  0E31               	movlw	49
 20114  0051F6  641B               	cpfsgt	delay@contador_int,c
 20115  0051F8  D001               	goto	l525
 20116  0051FA  D003               	goto	u13420
 20117  0051FC                     l525:
 20118                           
 20119                           ;display_lcd.c: 53: {
 20120                           ;display_lcd.c: 54: __nop();
 20121  0051FC  F000               	nop	
 20122  0051FE  2A1B               	incf	delay@contador_int,f,c
 20123  005200  D7F9               	goto	l10818
 20124  005202                     u13420:
 20125  005202  2A1A               	incf	delay@contador_ext,f,c
 20126  005204  D7F0               	goto	l10812
 20127  005206                     __end_of_delay:
 20128                           	opt stack 0
 20129                           tosu	equ	0xFFF
 20130                           tosh	equ	0xFFE
 20131                           tosl	equ	0xFFD
 20132                           pclath	equ	0xFFA
 20133                           tblptru	equ	0xFF8
 20134                           tblptrh	equ	0xFF7
 20135                           tblptrl	equ	0xFF6
 20136                           tablat	equ	0xFF5
 20137                           prodh	equ	0xFF4
 20138                           prodl	equ	0xFF3
 20139                           intcon	equ	0xFF2
 20140                           intcon2	equ	0xFF1
 20141                           intcon3	equ	0xFF0
 20142                           indf0	equ	0xFEF
 20143                           postinc0	equ	0xFEE
 20144                           fsr0h	equ	0xFEA
 20145                           fsr0l	equ	0xFE9
 20146                           wreg	equ	0xFE8
 20147                           indf1	equ	0xFE7
 20148                           postinc1	equ	0xFE6
 20149                           postdec1	equ	0xFE5
 20150                           fsr1h	equ	0xFE2
 20151                           fsr1l	equ	0xFE1
 20152                           indf2	equ	0xFDF
 20153                           postinc2	equ	0xFDE
 20154                           postdec2	equ	0xFDD
 20155                           plusw2	equ	0xFDB
 20156                           fsr2h	equ	0xFDA
 20157                           fsr2l	equ	0xFD9
 20158                           status	equ	0xFD8
 20159                           
 20160 ;; *************** function _isr *****************
 20161 ;; Defined at:
 20162 ;;		line 96 in file "main.c"
 20163 ;; Parameters:    Size  Location     Type
 20164 ;;		None
 20165 ;; Auto vars:     Size  Location     Type
 20166 ;;  cont            1   24[COMRAM] unsigned char 
 20167 ;; Return value:  Size  Location     Type
 20168 ;;                  1    wreg      void 
 20169 ;; Registers used:
 20170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20171 ;; Tracked objects:
 20172 ;;		On entry : 0/0
 20173 ;;		On exit  : 0/0
 20174 ;;		Unchanged: 0/0
 20175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20176 ;;      Params:         0       0       0       0       0       0       0       0       0
 20177 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20178 ;;      Temps:         20       0       0       0       0       0       0       0       0
 20179 ;;      Totals:        21       0       0       0       0       0       0       0       0
 20180 ;;Total ram usage:       21 bytes
 20181 ;; Hardware stack levels used:    1
 20182 ;; Hardware stack levels required when called:    1
 20183 ;; This function calls:
 20184 ;;		_recebe_dado_uart
 20185 ;;		i2_write_timer_zero
 20186 ;; This function is called by:
 20187 ;;		Interrupt level 2
 20188 ;; This function uses a non-reentrant model
 20189 ;;
 20190                           
 20191                           	psect	intcode
 20192  000008                     __pintcode:
 20193                           	opt stack 0
 20194  000008                     _isr:
 20195                           	opt stack 18
 20196                           
 20197                           ;incstack = 0
 20198  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20199  00000A  ED6A  F01D         	call	int_func,f	;refresh shadow registers
 20200                           tosu	equ	0xFFF
 20201                           tosh	equ	0xFFE
 20202                           tosl	equ	0xFFD
 20203                           pclath	equ	0xFFA
 20204                           tblptru	equ	0xFF8
 20205                           tblptrh	equ	0xFF7
 20206                           tblptrl	equ	0xFF6
 20207                           tablat	equ	0xFF5
 20208                           prodh	equ	0xFF4
 20209                           prodl	equ	0xFF3
 20210                           intcon	equ	0xFF2
 20211                           intcon2	equ	0xFF1
 20212                           intcon3	equ	0xFF0
 20213                           indf0	equ	0xFEF
 20214                           postinc0	equ	0xFEE
 20215                           fsr0h	equ	0xFEA
 20216                           fsr0l	equ	0xFE9
 20217                           wreg	equ	0xFE8
 20218                           indf1	equ	0xFE7
 20219                           postinc1	equ	0xFE6
 20220                           postdec1	equ	0xFE5
 20221                           fsr1h	equ	0xFE2
 20222                           fsr1l	equ	0xFE1
 20223                           indf2	equ	0xFDF
 20224                           postinc2	equ	0xFDE
 20225                           postdec2	equ	0xFDD
 20226                           plusw2	equ	0xFDB
 20227                           fsr2h	equ	0xFDA
 20228                           fsr2l	equ	0xFD9
 20229                           status	equ	0xFD8
 20230                           
 20231                           	psect	intcode_body
 20232  003AD4                     __pintcode_body:
 20233                           	opt stack 18
 20234  003AD4                     int_func:
 20235                           	opt stack 18
 20236  003AD4  0006               	pop		; remove dummy address from shadow register refresh
 20237  003AD6  CFFA F007          	movff	pclath,??_isr+2
 20238  003ADA  CFFB F008          	movff	pclatu,??_isr+3
 20239  003ADE  CFE9 F009          	movff	fsr0l,??_isr+4
 20240  003AE2  CFEA F00A          	movff	fsr0h,??_isr+5
 20241  003AE6  CFE1 F00B          	movff	fsr1l,??_isr+6
 20242  003AEA  CFE2 F00C          	movff	fsr1h,??_isr+7
 20243  003AEE  CFD9 F00D          	movff	fsr2l,??_isr+8
 20244  003AF2  CFDA F00E          	movff	fsr2h,??_isr+9
 20245  003AF6  CFF3 F00F          	movff	prodl,??_isr+10
 20246  003AFA  CFF4 F010          	movff	prodh,??_isr+11
 20247  003AFE  CFF6 F011          	movff	tblptrl,??_isr+12
 20248  003B02  CFF7 F012          	movff	tblptrh,??_isr+13
 20249  003B06  CFF8 F013          	movff	tblptru,??_isr+14
 20250  003B0A  CFF5 F014          	movff	tablat,??_isr+15
 20251  003B0E  C046  F015         	movff	btemp,??_isr+16
 20252  003B12  C047  F016         	movff	btemp+1,??_isr+17
 20253  003B16  C048  F017         	movff	btemp+2,??_isr+18
 20254  003B1A  C049  F018         	movff	btemp+3,??_isr+19
 20255                           
 20256                           ;main.c: 98: unsigned char cont;
 20257                           ;main.c: 101: if (PIE1bits.RCIE && PIR1bits.RCIF)
 20258  003B1E  BA9D               	btfsc	3997,5,c	;volatile
 20259  003B20  AA9E               	btfss	3998,5,c	;volatile
 20260  003B22  D004               	goto	i2l53
 20261                           
 20262                           ;main.c: 102: {
 20263                           ;main.c: 103: data_uart_recebe = recebe_dado_uart();
 20264  003B24  EC60  F029         	call	_recebe_dado_uart	;wreg free
 20265  003B28  6E45               	movwf	_data_uart_recebe,c
 20266                           
 20267                           ;main.c: 104: PIR1bits.RCIF = 0;
 20268  003B2A  9A9E               	bcf	3998,5,c	;volatile
 20269  003B2C                     i2l53:
 20270                           
 20271                           ;main.c: 109: }
 20272                           ;main.c: 112: unsigned char cont;
 20273                           ;main.c: 114: if (TMR0IF && T0IF)
 20274  003B2C  B4F2               	btfsc	intcon,2,c	;volatile
 20275  003B2E  A4F2               	btfss	intcon,2,c	;volatile
 20276  003B30  D037               	goto	i2l54
 20277                           
 20278                           ;main.c: 115: {
 20279                           ;main.c: 116: INTCONbits.TMR0IF = 0;
 20280  003B32  94F2               	bcf	intcon,2,c	;volatile
 20281                           
 20282                           ;main.c: 117: sinaliza_int_timer = 1;
 20283  003B34  0E01               	movlw	1
 20284  003B36  6E44               	movwf	_sinaliza_int_timer,c
 20285                           
 20286                           ;main.c: 119: for(cont= 0; cont<2;cont++)
 20287  003B38  0E00               	movlw	0
 20288  003B3A  6E19               	movwf	isr@cont,c
 20289  003B3C                     i2l10156:
 20290  003B3C  0E01               	movlw	1
 20291  003B3E  6419               	cpfsgt	isr@cont,c
 20292  003B40  D001               	goto	i2l55
 20293  003B42  D019               	goto	i2u1220_40
 20294  003B44                     i2l55:
 20295                           
 20296                           ;main.c: 120: {
 20297                           ;main.c: 121: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 20298  003B44  5019               	movf	isr@cont,w,c
 20299  003B46  0D02               	mullw	2
 20300  003B48  0EE2               	movlw	low _tempo_tarefa
 20301  003B4A  24F3               	addwf	prodl,w,c
 20302  003B4C  6ED9               	movwf	fsr2l,c
 20303  003B4E  0E00               	movlw	high _tempo_tarefa
 20304  003B50  20F4               	addwfc	prodh,w,c
 20305  003B52  6EDA               	movwf	fsr2h,c
 20306  003B54  50DE               	movf	postinc2,w,c
 20307  003B56  10DE               	iorwf	postinc2,w,c
 20308  003B58  B4D8               	btfsc	status,2,c
 20309  003B5A  D00B               	goto	i2l57
 20310  003B5C  5019               	movf	isr@cont,w,c
 20311  003B5E  0D02               	mullw	2
 20312  003B60  0EE2               	movlw	low _tempo_tarefa
 20313  003B62  24F3               	addwf	prodl,w,c
 20314  003B64  6ED9               	movwf	fsr2l,c
 20315  003B66  0E00               	movlw	high _tempo_tarefa
 20316  003B68  20F4               	addwfc	prodh,w,c
 20317  003B6A  6EDA               	movwf	fsr2h,c
 20318  003B6C  06DE               	decf	postinc2,f,c
 20319  003B6E  0E00               	movlw	0
 20320  003B70  5ADD               	subwfb	postdec2,f,c
 20321  003B72                     i2l57:
 20322  003B72  2A19               	incf	isr@cont,f,c
 20323  003B74  D7E3               	goto	i2l10156
 20324  003B76                     i2u1220_40:
 20325                           
 20326                           ;main.c: 122: }
 20327                           ;main.c: 125: if(tarefa_em_execucao == 1)
 20328  003B76  0443               	decf	_tarefa_em_execucao,w,c	;volatile
 20329  003B78  A4D8               	btfss	status,2,c
 20330  003B7A  D00C               	goto	i2l59
 20331                           
 20332                           ;main.c: 126: {
 20333                           ;main.c: 127: timeout_tarefa--;
 20334  003B7C  0100               	movlb	0	; () banked
 20335  003B7E  07F2               	decf	_timeout_tarefa& (0+255),f,b
 20336  003B80  A0D8               	btfss	status,0,c
 20337  003B82  07F3               	decf	(_timeout_tarefa+1)& (0+255),f,b
 20338                           
 20339                           ; BSR set to: 0
 20340                           ;main.c: 128: if(!timeout_tarefa)
 20341  003B84  51F2               	movf	_timeout_tarefa& (0+255),w,b
 20342  003B86  11F3               	iorwf	(_timeout_tarefa+1)& (0+255),w,b
 20343  003B88  A4D8               	btfss	status,2,c
 20344  003B8A  D004               	goto	i2l59
 20345                           
 20346                           ; BSR set to: 0
 20347                           ;main.c: 129: {
 20348                           ;main.c: 131: PCLATH = 0;
 20349  003B8C  0E00               	movlw	0
 20350  003B8E  6EFA               	movwf	pclath,c	;volatile
 20351                           
 20352                           ;main.c: 132: PCL = 0;
 20353  003B90  0E00               	movlw	0
 20354  003B92  6EF9               	movwf	pcl,c	;volatile
 20355  003B94                     i2l59:
 20356                           
 20357                           ;main.c: 133: }
 20358                           ;main.c: 134: }
 20359                           ;main.c: 137: write_timer_zero(0x0083);
 20360                           
 20361                           ; BSR set to: 0
 20362                           
 20363                           ; BSR set to: 0
 20364  003B94  0E00               	movlw	0
 20365  003B96  6E02               	movwf	i2write_timer_zero@timer0+1,c
 20366  003B98  0E83               	movlw	131
 20367  003B9A  6E01               	movwf	i2write_timer_zero@timer0,c
 20368  003B9C  EC57  F029         	call	i2_write_timer_zero	;wreg free
 20369  003BA0                     i2l54:
 20370                           
 20371                           ;main.c: 139: }
 20372                           ;main.c: 141: if (INT0IF && INT0IE)
 20373  003BA0  B2F2               	btfsc	intcon,1,c	;volatile
 20374  003BA2  A8F2               	btfss	intcon,4,c	;volatile
 20375  003BA4  D001               	goto	i2l60
 20376                           
 20377                           ;main.c: 142: {
 20378                           ;main.c: 143: INT0IF = 0;
 20379  003BA6  92F2               	bcf	intcon,1,c	;volatile
 20380  003BA8                     i2l60:
 20381  003BA8  C018  F049         	movff	??_isr+19,btemp+3
 20382  003BAC  C017  F048         	movff	??_isr+18,btemp+2
 20383  003BB0  C016  F047         	movff	??_isr+17,btemp+1
 20384  003BB4  C015  F046         	movff	??_isr+16,btemp
 20385  003BB8  C014  FFF5         	movff	??_isr+15,tablat
 20386  003BBC  C013  FFF8         	movff	??_isr+14,tblptru
 20387  003BC0  C012  FFF7         	movff	??_isr+13,tblptrh
 20388  003BC4  C011  FFF6         	movff	??_isr+12,tblptrl
 20389  003BC8  C010  FFF4         	movff	??_isr+11,prodh
 20390  003BCC  C00F  FFF3         	movff	??_isr+10,prodl
 20391  003BD0  C00E  FFDA         	movff	??_isr+9,fsr2h
 20392  003BD4  C00D  FFD9         	movff	??_isr+8,fsr2l
 20393  003BD8  C00C  FFE2         	movff	??_isr+7,fsr1h
 20394  003BDC  C00B  FFE1         	movff	??_isr+6,fsr1l
 20395  003BE0  C00A  FFEA         	movff	??_isr+5,fsr0h
 20396  003BE4  C009  FFE9         	movff	??_isr+4,fsr0l
 20397  003BE8  C008  FFFB         	movff	??_isr+3,pclatu
 20398  003BEC  C007  FFFA         	movff	??_isr+2,pclath
 20399  003BF0  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20400  003BF2  0011               	retfie		f
 20401  003BF4                     __end_of_isr:
 20402                           	opt stack 0
 20403                           tosu	equ	0xFFF
 20404                           tosh	equ	0xFFE
 20405                           tosl	equ	0xFFD
 20406                           pclatu	equ	0xFFB
 20407                           pclath	equ	0xFFA
 20408                           pcl	equ	0xFF9
 20409                           tblptru	equ	0xFF8
 20410                           tblptrh	equ	0xFF7
 20411                           tblptrl	equ	0xFF6
 20412                           tablat	equ	0xFF5
 20413                           prodh	equ	0xFF4
 20414                           prodl	equ	0xFF3
 20415                           intcon	equ	0xFF2
 20416                           intcon2	equ	0xFF1
 20417                           intcon3	equ	0xFF0
 20418                           indf0	equ	0xFEF
 20419                           postinc0	equ	0xFEE
 20420                           fsr0h	equ	0xFEA
 20421                           fsr0l	equ	0xFE9
 20422                           wreg	equ	0xFE8
 20423                           indf1	equ	0xFE7
 20424                           postinc1	equ	0xFE6
 20425                           postdec1	equ	0xFE5
 20426                           fsr1h	equ	0xFE2
 20427                           fsr1l	equ	0xFE1
 20428                           indf2	equ	0xFDF
 20429                           postinc2	equ	0xFDE
 20430                           postdec2	equ	0xFDD
 20431                           plusw2	equ	0xFDB
 20432                           fsr2h	equ	0xFDA
 20433                           fsr2l	equ	0xFD9
 20434                           status	equ	0xFD8
 20435                           
 20436 ;; *************** function i2_write_timer_zero *****************
 20437 ;; Defined at:
 20438 ;;		line 138 in file "bibliotecas/hardware.c"
 20439 ;; Parameters:    Size  Location     Type
 20440 ;;  timer0          2    0[COMRAM] unsigned int 
 20441 ;; Auto vars:     Size  Location     Type
 20442 ;;  write_timer_    2    2[COMRAM] struct Timers
 20443 ;; Return value:  Size  Location     Type
 20444 ;;                  1    wreg      void 
 20445 ;; Registers used:
 20446 ;;		None
 20447 ;; Tracked objects:
 20448 ;;		On entry : 0/0
 20449 ;;		On exit  : 0/0
 20450 ;;		Unchanged: 0/0
 20451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20452 ;;      Params:         2       0       0       0       0       0       0       0       0
 20453 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20454 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20455 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20456 ;;Total ram usage:        4 bytes
 20457 ;; Hardware stack levels used:    1
 20458 ;; This function calls:
 20459 ;;		Nothing
 20460 ;; This function is called by:
 20461 ;;		_isr
 20462 ;; This function uses a non-reentrant model
 20463 ;;
 20464                           
 20465                           	psect	text84
 20466  0052AE                     __ptext84:
 20467                           	opt stack 0
 20468  0052AE                     i2_write_timer_zero:
 20469                           	opt stack 18
 20470                           
 20471                           ;hardware.c: 140: union Timers timer;
 20472                           ;hardware.c: 142: timer.lt = timer0;
 20473                           
 20474                           ;incstack = 0
 20475  0052AE  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 20476  0052B2  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 20477                           
 20478                           ;hardware.c: 144: TMR0H = timer.bt[1];
 20479  0052B6  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 20480                           
 20481                           ;hardware.c: 145: TMR0L = timer.bt[0];
 20482  0052BA  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 20483  0052BE  0012               	return		;funcret
 20484  0052C0                     __end_ofi2_write_timer_zero:
 20485                           	opt stack 0
 20486                           tosu	equ	0xFFF
 20487                           tosh	equ	0xFFE
 20488                           tosl	equ	0xFFD
 20489                           pclatu	equ	0xFFB
 20490                           pclath	equ	0xFFA
 20491                           pcl	equ	0xFF9
 20492                           tblptru	equ	0xFF8
 20493                           tblptrh	equ	0xFF7
 20494                           tblptrl	equ	0xFF6
 20495                           tablat	equ	0xFF5
 20496                           prodh	equ	0xFF4
 20497                           prodl	equ	0xFF3
 20498                           intcon	equ	0xFF2
 20499                           intcon2	equ	0xFF1
 20500                           intcon3	equ	0xFF0
 20501                           indf0	equ	0xFEF
 20502                           postinc0	equ	0xFEE
 20503                           fsr0h	equ	0xFEA
 20504                           fsr0l	equ	0xFE9
 20505                           wreg	equ	0xFE8
 20506                           indf1	equ	0xFE7
 20507                           postinc1	equ	0xFE6
 20508                           postdec1	equ	0xFE5
 20509                           fsr1h	equ	0xFE2
 20510                           fsr1l	equ	0xFE1
 20511                           indf2	equ	0xFDF
 20512                           postinc2	equ	0xFDE
 20513                           postdec2	equ	0xFDD
 20514                           plusw2	equ	0xFDB
 20515                           fsr2h	equ	0xFDA
 20516                           fsr2l	equ	0xFD9
 20517                           status	equ	0xFD8
 20518                           
 20519 ;; *************** function _recebe_dado_uart *****************
 20520 ;; Defined at:
 20521 ;;		line 138 in file "bibliotecas/uart.c"
 20522 ;; Parameters:    Size  Location     Type
 20523 ;;		None
 20524 ;; Auto vars:     Size  Location     Type
 20525 ;;		None
 20526 ;; Return value:  Size  Location     Type
 20527 ;;                  1    wreg      unsigned char 
 20528 ;; Registers used:
 20529 ;;		wreg, status,2
 20530 ;; Tracked objects:
 20531 ;;		On entry : 0/0
 20532 ;;		On exit  : 0/0
 20533 ;;		Unchanged: 0/0
 20534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20535 ;;      Params:         0       0       0       0       0       0       0       0       0
 20536 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20537 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20538 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20539 ;;Total ram usage:        0 bytes
 20540 ;; Hardware stack levels used:    1
 20541 ;; This function calls:
 20542 ;;		Nothing
 20543 ;; This function is called by:
 20544 ;;		_isr
 20545 ;;		_recebe_string_uart
 20546 ;; This function uses a non-reentrant model
 20547 ;;
 20548                           
 20549                           	psect	text85
 20550  0052C0                     __ptext85:
 20551                           	opt stack 0
 20552  0052C0                     _recebe_dado_uart:
 20553                           	opt stack 18
 20554                           
 20555                           ;uart.c: 140: while(RCIF==0);
 20556                           
 20557                           ;incstack = 0
 20558  0052C0  AA9E               	btfss	3998,5,c	;volatile
 20559  0052C2  D7FE               	goto	_recebe_dado_uart
 20560                           
 20561                           ;uart.c: 141: if(RCSTAbits.OERR)
 20562  0052C4  A2AB               	btfss	4011,1,c	;volatile
 20563  0052C6  D003               	goto	i2l841
 20564                           
 20565                           ;uart.c: 142: {
 20566                           ;uart.c: 143: CREN = 0;
 20567  0052C8  98AB               	bcf	4011,4,c	;volatile
 20568                           
 20569                           ;uart.c: 144: __nop();
 20570  0052CA  F000               	nop	
 20571                           
 20572                           ;uart.c: 145: CREN=1;
 20573  0052CC  88AB               	bsf	4011,4,c	;volatile
 20574  0052CE                     i2l841:
 20575                           
 20576                           ;uart.c: 146: }
 20577                           ;uart.c: 147: return(RCREG);
 20578  0052CE  50AE               	movf	4014,w,c	;volatile
 20579  0052D0  0012               	return	
 20580  0052D2                     __end_of_recebe_dado_uart:
 20581                           	opt stack 0
 20582                           tosu	equ	0xFFF
 20583                           tosh	equ	0xFFE
 20584                           tosl	equ	0xFFD
 20585                           pclatu	equ	0xFFB
 20586                           pclath	equ	0xFFA
 20587                           pcl	equ	0xFF9
 20588                           tblptru	equ	0xFF8
 20589                           tblptrh	equ	0xFF7
 20590                           tblptrl	equ	0xFF6
 20591                           tablat	equ	0xFF5
 20592                           prodh	equ	0xFF4
 20593                           prodl	equ	0xFF3
 20594                           intcon	equ	0xFF2
 20595                           intcon2	equ	0xFF1
 20596                           intcon3	equ	0xFF0
 20597                           indf0	equ	0xFEF
 20598                           postinc0	equ	0xFEE
 20599                           fsr0h	equ	0xFEA
 20600                           fsr0l	equ	0xFE9
 20601                           wreg	equ	0xFE8
 20602                           indf1	equ	0xFE7
 20603                           postinc1	equ	0xFE6
 20604                           postdec1	equ	0xFE5
 20605                           fsr1h	equ	0xFE2
 20606                           fsr1l	equ	0xFE1
 20607                           indf2	equ	0xFDF
 20608                           postinc2	equ	0xFDE
 20609                           postdec2	equ	0xFDD
 20610                           plusw2	equ	0xFDB
 20611                           fsr2h	equ	0xFDA
 20612                           fsr2l	equ	0xFD9
 20613                           status	equ	0xFD8
 20614                           tosu	equ	0xFFF
 20615                           tosh	equ	0xFFE
 20616                           tosl	equ	0xFFD
 20617                           pclatu	equ	0xFFB
 20618                           pclath	equ	0xFFA
 20619                           pcl	equ	0xFF9
 20620                           tblptru	equ	0xFF8
 20621                           tblptrh	equ	0xFF7
 20622                           tblptrl	equ	0xFF6
 20623                           tablat	equ	0xFF5
 20624                           prodh	equ	0xFF4
 20625                           prodl	equ	0xFF3
 20626                           intcon	equ	0xFF2
 20627                           intcon2	equ	0xFF1
 20628                           intcon3	equ	0xFF0
 20629                           indf0	equ	0xFEF
 20630                           postinc0	equ	0xFEE
 20631                           fsr0h	equ	0xFEA
 20632                           fsr0l	equ	0xFE9
 20633                           wreg	equ	0xFE8
 20634                           indf1	equ	0xFE7
 20635                           postinc1	equ	0xFE6
 20636                           postdec1	equ	0xFE5
 20637                           fsr1h	equ	0xFE2
 20638                           fsr1l	equ	0xFE1
 20639                           indf2	equ	0xFDF
 20640                           postinc2	equ	0xFDE
 20641                           postdec2	equ	0xFDD
 20642                           plusw2	equ	0xFDB
 20643                           fsr2h	equ	0xFDA
 20644                           fsr2l	equ	0xFD9
 20645                           status	equ	0xFD8
 20646                           
 20647                           	psect	text86
 20648  000000                     __ptext86:
 20649                           	opt stack 0
 20650                           tosu	equ	0xFFF
 20651                           tosh	equ	0xFFE
 20652                           tosl	equ	0xFFD
 20653                           pclatu	equ	0xFFB
 20654                           pclath	equ	0xFFA
 20655                           pcl	equ	0xFF9
 20656                           tblptru	equ	0xFF8
 20657                           tblptrh	equ	0xFF7
 20658                           tblptrl	equ	0xFF6
 20659                           tablat	equ	0xFF5
 20660                           prodh	equ	0xFF4
 20661                           prodl	equ	0xFF3
 20662                           intcon	equ	0xFF2
 20663                           intcon2	equ	0xFF1
 20664                           intcon3	equ	0xFF0
 20665                           indf0	equ	0xFEF
 20666                           postinc0	equ	0xFEE
 20667                           fsr0h	equ	0xFEA
 20668                           fsr0l	equ	0xFE9
 20669                           wreg	equ	0xFE8
 20670                           indf1	equ	0xFE7
 20671                           postinc1	equ	0xFE6
 20672                           postdec1	equ	0xFE5
 20673                           fsr1h	equ	0xFE2
 20674                           fsr1l	equ	0xFE1
 20675                           indf2	equ	0xFDF
 20676                           postinc2	equ	0xFDE
 20677                           postdec2	equ	0xFDD
 20678                           plusw2	equ	0xFDB
 20679                           fsr2h	equ	0xFDA
 20680                           fsr2l	equ	0xFD9
 20681                           status	equ	0xFD8
 20682                           
 20683                           	psect	rparam
 20684  0000                     tosu	equ	0xFFF
 20685                           tosh	equ	0xFFE
 20686                           tosl	equ	0xFFD
 20687                           pclatu	equ	0xFFB
 20688                           pclath	equ	0xFFA
 20689                           pcl	equ	0xFF9
 20690                           tblptru	equ	0xFF8
 20691                           tblptrh	equ	0xFF7
 20692                           tblptrl	equ	0xFF6
 20693                           tablat	equ	0xFF5
 20694                           prodh	equ	0xFF4
 20695                           prodl	equ	0xFF3
 20696                           intcon	equ	0xFF2
 20697                           intcon2	equ	0xFF1
 20698                           intcon3	equ	0xFF0
 20699                           indf0	equ	0xFEF
 20700                           postinc0	equ	0xFEE
 20701                           fsr0h	equ	0xFEA
 20702                           fsr0l	equ	0xFE9
 20703                           wreg	equ	0xFE8
 20704                           indf1	equ	0xFE7
 20705                           postinc1	equ	0xFE6
 20706                           postdec1	equ	0xFE5
 20707                           fsr1h	equ	0xFE2
 20708                           fsr1l	equ	0xFE1
 20709                           indf2	equ	0xFDF
 20710                           postinc2	equ	0xFDE
 20711                           postdec2	equ	0xFDD
 20712                           plusw2	equ	0xFDB
 20713                           fsr2h	equ	0xFDA
 20714                           fsr2l	equ	0xFD9
 20715                           status	equ	0xFD8
 20716                           
 20717                           	psect	temp
 20718  000046                     btemp:
 20719                           	opt stack 0
 20720  000046                     	ds	1
 20721  0000                     int$flags	set	btemp
 20722  0000                     wtemp6	set	btemp+1
 20723                           tosu	equ	0xFFF
 20724                           tosh	equ	0xFFE
 20725                           tosl	equ	0xFFD
 20726                           pclatu	equ	0xFFB
 20727                           pclath	equ	0xFFA
 20728                           pcl	equ	0xFF9
 20729                           tblptru	equ	0xFF8
 20730                           tblptrh	equ	0xFF7
 20731                           tblptrl	equ	0xFF6
 20732                           tablat	equ	0xFF5
 20733                           prodh	equ	0xFF4
 20734                           prodl	equ	0xFF3
 20735                           intcon	equ	0xFF2
 20736                           intcon2	equ	0xFF1
 20737                           intcon3	equ	0xFF0
 20738                           indf0	equ	0xFEF
 20739                           postinc0	equ	0xFEE
 20740                           fsr0h	equ	0xFEA
 20741                           fsr0l	equ	0xFE9
 20742                           wreg	equ	0xFE8
 20743                           indf1	equ	0xFE7
 20744                           postinc1	equ	0xFE6
 20745                           postdec1	equ	0xFE5
 20746                           fsr1h	equ	0xFE2
 20747                           fsr1l	equ	0xFE1
 20748                           indf2	equ	0xFDF
 20749                           postinc2	equ	0xFDE
 20750                           postdec2	equ	0xFDD
 20751                           plusw2	equ	0xFDB
 20752                           fsr2h	equ	0xFDA
 20753                           fsr2l	equ	0xFD9
 20754                           status	equ	0xFD8


Data Sizes:
    Strings     225
    Constant    169
    Data        29
    BSS         1440
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      69
    BANK0           160    130     157
    BANK1           256     32     230
    BANK2           256     33     183
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3881	PTR FTN()void  size(2) Largest target is 1
		 -> gps(), SDCard(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 7
		 -> dado_buffer(BANK0[7]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> dado_buffer(BANK0[7]), 

    strcat@from	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    memset@p1	PTR void  size(2) Largest target is 15
		 -> gps@gps_buffer(BANK0[15]), 

    memset@p	PTR unsigned char  size(2) Largest target is 15
		 -> gps@gps_buffer(BANK0[15]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(COMRAM[7]), 

    atol@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_gpstime@time_buffer(BANK0[15]), 

    atof@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_longitude@long_buffer(BANK0[15]), get_latitude@lat_buffer(BANK0[15]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_longitude@long_buffer(BANK0[15]), get_latitude@lat_buffer(BANK0[15]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_9(CODE[9]), STR_4(CODE[6]), STR_3(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 15
		 -> gps@gps_buffer(BANK0[15]), data_buffer(BANK1[15]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f_readdir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), 

    f_readdir@dj.dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct . size(2) Largest target is 0

    f_opendir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), 

    f_opendir@dj.dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_opendir@dj.fs	PTR struct . size(2) Largest target is 0

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> SDCard@fil(BANK2[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> SDCard@fil(BANK2[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> SDCard@fil(BANK2[32]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    f_write@buff	PTR const void  size(2) Largest target is 12
		 -> STR_10(CODE[12]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_10(CODE[12]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    dj.fs	PTR struct . size(2) Largest target is 0

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> fs(BIGRAM[558]), 

    f_mount@rfs	PTR struct . size(2) Largest target is 558
		 -> fs(BIGRAM[558]), 

    validate@fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> fs(BIGRAM[558]), 

    follow_path@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), 

    follow_path@dj.dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    follow_path@dj.fs	PTR struct . size(2) Largest target is 0

    get_fileinfo@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), 

    get_fileinfo@dj.dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    get_fileinfo@dj.fs	PTR struct . size(2) Largest target is 0

    create_name@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), 

    create_name@dj.dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    create_name@dj.fs	PTR struct . size(2) Largest target is 0

    dir_register@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), 

    dir_register@dj.dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    dir_register@dj.fs	PTR struct . size(2) Largest target is 0

    dir_read@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), 

    dir_read@dj.dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    dir_read@dj.fs	PTR struct . size(2) Largest target is 0

    dir_find@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), 

    dir_find@dj.dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    dir_find@dj.fs	PTR struct . size(2) Largest target is 0

    dir_next@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), 

    dir_next@dj.dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    dir_next@dj.fs	PTR struct . size(2) Largest target is 0

    S2130$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), 

    dir_sdi@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), 

    S2130$dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    dir_sdi@dj.dir	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2130$fs	PTR struct . size(2) Largest target is 0

    dir_sdi@dj.fs	PTR struct . size(2) Largest target is 0

    clust2sect@fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    create_chain@fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    put_fat@fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    get_fat@fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sync@fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    move_window@fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    mem_set@dst	PTR void  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), NULL(NULL[0]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), NULL(NULL[0]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), NULL(NULL[0]), 
		 -> STR_10(CODE[12]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_readdir@sfn(COMRAM[12]), f_opendir@sfn(COMRAM[12]), f_open@sfn(COMRAM[12]), NULL(NULL[0]), 
		 -> STR_10(CODE[12]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 12
		 -> NULL(NULL[0]), STR_10(CODE[12]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 2047
		 -> STR_25(CODE[13]), STR_24(CODE[13]), STR_23(CODE[13]), STR_22(CODE[13]), 
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), leitura_chave@pos_ignicao_on(COMRAM[17]), leitura_chave@pos_ignicao_crank(COMRAM[17]), leitura_chave@pos_ignicao_off(COMRAM[17]), 
		 -> STR_20(CODE[17]), STR_19(CODE[14]), STR_18(CODE[13]), STR_17(CODE[9]), 
		 -> STR_16(CODE[14]), STR_15(CODE[16]), STR_14(CODE[13]), STR_13(CODE[12]), 
		 -> STR_12(CODE[16]), STR_11(CODE[12]), RAM(DATA[2047]), STR_5(CODE[5]), 
		 -> gps@gps_buffer(BANK0[15]), dado_buffer(BANK0[7]), STR_2(CODE[6]), data_buffer(BANK1[15]), 
		 -> STR_1(CODE[6]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(COMRAM[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 12
		 -> NULL(NULL[0]), STR_10(CODE[12]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    S659$dir_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S659$fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    fil.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    sp__memset	PTR void  size(2) Largest target is 15
		 -> gps@gps_buffer(BANK0[15]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> gps(), SDCard(), 


Critical Paths under _main in COMRAM

    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    ___altoft->___ftpack
    _get_gpstime->_atol
    _atol->___lmul
    _get_dt->_strcat
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    _sprintf->___wmul
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___lldiv->___llmod
    _f_write->_validate
    _clust2sect->___lmul
    _f_sync->_validate
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sdc_disk_status->_command
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _response->_recebe_dado_SPI
    _proceed->_escreve_dado_SPI
    _dummy_clocks->_escreve_dado_SPI
    _command->_escreve_dado_SPI
    _escreve_cmd_lcd->_delay

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _main->_escalonador
    _escalonador->_gps
    _gps->_convert_time_to_utc
    _get_longitude->_atof
    _get_latitude->_atof
    _atof->_strtod
    _strtod->___ftneg
    _get_gpstime->_atol
    _convert_to_degrees->___ftadd
    _convert_to_degrees->___fttol
    _convert_time_to_utc->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___ftmul
    _SDCard->_f_write
    _f_write->_create_chain
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _sync->_move_window
    _move_window->_disk_read
    _disk_write->_sdc_disk_write
    _disk_read->_sdc_disk_read

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _SDCard->_f_write

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _escalonador->_SDCard

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  375309
                        _escalonador
                    _inicializa_shrc
                 _inicializa_tarefas
                      _init_hardware
                           _init_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_shrc                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  374501
                                            127 BANK0      3     3      0
                             _SDCard *
                                _gps *
 ---------------------------------------------------------------------------------
 (2) _gps                                                 65    65      0  213190
                                             96 BANK0     31    31      0
                _convert_time_to_utc
                 _convert_to_degrees
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                             _get_dt
                        _get_gpstime
                       _get_latitude
                      _get_longitude
                             _memset
                 _posicao_cursor_lcd
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     324
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _get_longitude                                       25    22      3   19944
                                             33 BANK0     25    22      3
                               _atof
 ---------------------------------------------------------------------------------
 (3) _get_latitude                                        25    22      3   19944
                                             33 BANK0     25    22      3
                               _atof
 ---------------------------------------------------------------------------------
 (4) _atof                                                 3     0      3   19627
                                             30 BANK0      3     0      3
                             _strtod
 ---------------------------------------------------------------------------------
 (5) _strtod                                              12     8      4   19416
                                             18 BANK0     12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0      90
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    3307
                                             33 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _get_gpstime                                         25    21      4    1988
                                              6 BANK0     25    21      4
                               _atol
 ---------------------------------------------------------------------------------
 (4) _atol                                                14    10      4    1775
                                             37 COMRAM     8     4      4
                                              0 BANK0      6     6      0
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _get_dt                                              20    16      4    1488
                                             32 COMRAM     9     5      4
                                              0 BANK0      7     7      0
                             _strcat
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     220
                                             25 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _strcat                                               7     2      5     683
                                             25 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _convert_to_degrees                                  17    14      3   21790
                                             37 BANK0     14    11      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    4293
                                             33 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3506
                                             33 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _convert_time_to_utc                                 14    10      4   72243
                                             82 BANK0     14    10      4
                            ___lldiv
                            ___llmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             47    37     10   68987
                                             43 BANK0     39    29     10
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                                7     4      3   15940
                                             15 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              10     7      3   15661
                                             15 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3952
                                             39 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    7061
                                              0 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    2053
                                             25 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    2245
                                             31 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     455
                                             25 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     598
                                             25 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    3205
                                             33 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8    1223
                                             25 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    1621
                                             34 COMRAM     8     0      8
                                              0 BANK0      5     5      0
                            ___llmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     784
                                             22 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5694
                                             37 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5278
                                             25 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3013
                                             25 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     425
                                             15 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    1048
                                             25 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _SDCard                                              33    33      0  161088
                                              0 BANK2     33    33      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                            _f_close
                            _f_mount
                            _f_write
                 _posicao_cursor_lcd
                            _proceed
 ---------------------------------------------------------------------------------
 (3) _f_write                                             40    32      8   91674
                                            111 BANK0      8     0      8
                                              0 BANK1     32    32      0
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (4) _mem_cpy                                             10     4      6    1517
                                             25 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (4) _create_chain                                        22    16      6   45717
                                             89 BANK0     22    16      6
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (5) _put_fat                                             49    39     10   21999
                                             40 BANK0     49    39     10
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _get_fat                                             40    34      6   21647
                                             40 BANK0     40    34      6
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     5      6    2354
                                             37 COMRAM     6     0      6
                                              0 BANK0      5     5      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8    1116
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _f_mount                                              5     3      2     341
                                             25 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _f_close                                              3     1      2   62535
                                             60 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (4) _f_sync                                              13    11      2   62342
                                             47 BANK0     13    11      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (4) _validate                                             6     2      4    9441
                                             39 COMRAM     6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (5) _disk_status                                          4     4      0    8386
                                             37 COMRAM     2     2      0
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_status                                      3     3      0    2623
                                             34 COMRAM     3     3      0
                            _command
                       _dummy_clocks
                           _response
 ---------------------------------------------------------------------------------
 (5) _sync                                                 7     5      2   32204
                                             40 BANK0      7     5      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _move_window                                         23    17      6   19244
                                             17 BANK0     23    17      6
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (5) _disk_write                                          11     4      7   10172
                                              5 BANK0      9     2      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_write                                      17    10      7    8872
                                             34 COMRAM    11     4      7
                                              0 BANK0      5     5      0
                            _command
                       _dummy_clocks
                   _escreve_dado_SPI
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (3) _posicao_cursor_lcd                                   3     2      1    2937
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (4) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _escreve_frase_ram_lcd                                2     0      2    2699
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (4) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _disk_read                                           11     4      7    4536
                                              8 BANK0      9     2      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_read                                       22    15      7    3236
                                             34 COMRAM    11     4      7
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (7) _response                                             1     1      0     102
                                             28 COMRAM     1     1      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (8) _recebe_dado_SPI                                      3     3      0      68
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _proceed                                              0     0      0     102
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (7) _dummy_clocks                                         5     5      0     170
                                             27 COMRAM     5     5      0
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (7) _command                                              7     2      5    2224
                                             27 COMRAM     7     2      5
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (4) _escreve_dado_SPI                                     2     2      0     102
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6    1210
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_ioctl                                           7     4      3     304
                                             25 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (5) _get_fattime                                         51    47      4     201
                                             25 COMRAM    13     9      4
                                              0 BANK0     38    38      0
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _isr                                                21    21      0     183
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (13) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (13) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _escalonador
     _SDCard *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _f_close
         _f_sync
           _get_fattime
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
           _sync
             _disk_ioctl
             _disk_write
               _sdc_disk_write
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _mem_set
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
           _validate
             _disk_status
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_status
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
       _f_mount
       _f_write
         _clust2sect
           ___lmul
         _create_chain
           _get_fat
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
           _put_fat
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
         _disk_write
           _sdc_disk_write
             _command
               _escreve_dado_SPI
             _dummy_clocks
               _escreve_dado_SPI
             _escreve_dado_SPI
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _escreve_dado_SPI
             _response
               _recebe_dado_SPI
         _mem_cpy
         _move_window
           _disk_read
             _sdc_disk_read
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
           _disk_write
             _sdc_disk_write
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _escreve_dado_SPI
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
         _validate
           _disk_status
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_status
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _proceed
         _escreve_dado_SPI
     _gps *
       _convert_time_to_utc
         ___lldiv
           ___llmod (ARG)
         ___llmod
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftsub
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
             ___llmod (ARG)
           ___llmod
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _convert_to_degrees
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _get_dt
         _strcat
         _strlen
       _get_gpstime
         _atol
           ___lmul
           _isdigit
       _get_latitude
         _atof
           _strtod
             ___altoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lmul
             _isdigit
             _isspace
       _get_longitude
         _atof
           _strtod
             ___altoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lmul
             _isdigit
             _isspace
       _memset
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
           ___llmod (ARG)
         ___llmod
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _inicializa_shrc
   _inicializa_tarefas
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay

 _isr (ROOT)
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     42E      21       52.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     21      B7       9       71.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100     20      E6       7       89.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     82      9D       5       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27F      20        0.0%
DATA                 0      0     6AD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 16 14:36:52 2022

                    get_dt@count 0066                      get_dt@index 0061  
                    get_fat@clst 008A                     ___altoft@exp 002A  
                              _s 003D                   ?_get_longitude 0081  
                    _SSPSTATbits 000FC7                    ___altoft@sign 002B  
               ??_init_interrupt 001A                               l67 42F0  
                             l75 51AE                               l69 4382  
                   ___awdiv@sign 0025                      __CFG_BOR$ON 000000  
                             _br 0198                               _fs 04B7  
                             _rd 00F0              ___wmul@multiplicand 002A  
                    __CFG_BORV$3 000000            get_latitude@_latitude 0094  
               disk_write@sector 0067                     ?_escalonador 0001  
                 create_chain@cs 00C7                   create_chain@fs 00B9  
                   ___ftadd@exp1 0084                     ___ftadd@exp2 0083  
               ?_inicializa_shrc 0001                     ___ftadd@sign 0082  
                            l160 4578                              l161 4550  
                            l305 42CA                              l402 4BF4  
                            l154 4806                              l306 42B2  
                            l403 4BB0                              l155 47E0  
                            l180 34B6                              l172 33B8  
                            l173 3390                              l190 3742  
                            l166 44EC                              l351 3336  
                            l175 33FA                              l167 44C4  
                            l344 3288                              l353 3352  
                            l361 355E                              l177 3438  
                            l290 4F3C                              l354 334E  
                            l346 32B0                              l370 4FF6  
                            l523 51EE                              l363 35AC  
                            l179 347E                              l540 45FC  
                            l348 32E2                              l364 35B2  
                            l372 500C                              l525 51FC  
                            l541 4610                              l533 45DC  
                            l349 32CA                              l365 3604  
                            l542 4612                              l534 45DE  
                            l543 461A                              l535 45E6  
                            l359 3518                              l544 461C  
                            l536 45E8                              l560 4A38  
                            l545 4624                              l537 45F0  
                            l289 4F4A                              l617 4D80  
                            l561 4A4C                              l546 4626  
                            l538 45F2                              l394 4ED4  
                            l618 4D58                              l562 4A4E  
                            l547 462E                              l539 45FA  
                            l395 4EA4                              l563 4A56  
                            l555 4A22                              l548 4630  
                            l396 4EAC                              l564 4A58  
                            l556 4A24                              l572 4A0A  
                            l397 4EAE                              l565 4A60  
                            l557 4A2C                              l573 49EA  
                            l590 48EC                              l566 4A62  
                            l558 4A2E                              l574 49AE  
                            l903 4E7E                              l591 48EE  
                            l567 4A6A                              l559 4A36  
                            l575 4A06                              l911 4E2E  
                            l920 5104                              l904 4E4E  
                            l592 4902                              l584 48CE  
                            l568 4A6C                              l576 49BA  
                            l912 4DFE                              l593 4904  
                            l585 48D0                              l577 49C8  
                            l922 5108                              l906 4E52  
                            l594 490C                              l586 48D8  
                            l578 49D6                              l914 4E02  
                            l923 510C                              l907 4E7A  
                            l595 490E                              l587 48DA  
                            l579 49E4                              l915 4E2A  
                            l596 4916                              l588 48E2  
                            l597 4918                              l589 48E4  
                            l941 4C44                              l598 4920  
                            l942 4C12                              l919 5110  
                            l599 4922                              l890 4CB0  
                            l947 50C6                              l971 2D58  
                            l891 4CC6                              l948 50B6  
                            l981 247E                              l974 2DE6  
                            l982 24A8                              l990 195A  
                            l895 4CC8                              l991 1594  
                            l976 2EA0                              l896 4CD2  
                            l977 2E82                              l889 4CEA  
                            l897 4CE8                              l993 1976  
                            l996 16F4                              l998 1712  
                            l999 1720                              _PCL 000FF9  
                            _PR2 000FCB                              _E_W 00F4  
               ??_init_oscilador 001A                              _n_s 00F5  
                            _gps 2EA4                              _isr 0008  
                            _txt 0150                     ___awmod@sign 001F  
                   disk_read@drv 006F                     disk_read@res 0070  
                            prod 000FF3                   ??_create_chain 00BF  
                            tosl 000FFD                              wreg 000FE8  
                 get_dt@dt_index 0065        convert_to_degrees@dec_deg 008B  
                   __CFG_FOSC$HS 000000        convert_to_degrees@decimal 0090  
      convert_to_degrees@degrees 008E        __size_of_write_timer_zero 0012  
                create_chain@ncl 00CB                  create_chain@scl 00C3  
                   __CFG_LVP$OFF 000000                     ___ftdiv@cntr 0060  
        ??_escreve_frase_ram_lcd 001F                     ___ftdiv@sign 0065  
                   __CFG_WDT$OFF 000000                             l1001 17F0  
                           l1010 10A6                             l1012 153C  
                           l1022 12A8                             l1014 1158  
                           l1008 154C                             l1024 1360  
                           l1016 118C                             l1009 151E  
                           l1026 1518                             l1050 2566  
                           l1019 1272                             l1052 2598  
                           l2012 4740                             l1053 25B8  
                           l1045 2516                             l2013 474E  
                           l1062 26EE                             l2022 4B28  
                           l2030 4B4E                             l1055 261A  
                           l2023 4B36                             l1064 273A  
                           l2008 470C                             l1065 279C  
                           l1057 26B0                             l1049 25A8  
                           l2009 4700                             l1058 2684  
                           l2018 4B00                             l2019 4AF4  
                           l1068 4124                             l1340 07D8  
                           l1500 0D64                             l1341 00F2  
                           l2029 4B5A                             l1501 0E96  
                           l1342 0674                             l1350 02AE  
                           l1502 0DB4                             l1351 0348  
                           l1343 02CC                             l1335 0062  
                           l2215 4DB6                             l1360 06CC  
                           l1352 03AE                             l1344 0214  
                           l1440 2C90                             l1512 0F6C  
                           l1504 0EB8                             l2216 4DB2  
                           l2224 4FAA                             l1273 4D52  
                           l1361 0718                             l1353 05C4  
                           l1337 0078                             l1505 0EA2  
                           l2225 4FA6                             l1362 0838  
                           l1354 0446                             l1346 0254  
                           l1338 008C                             l1450 1D7C  
                           l1514 0F8C                             l2218 4DD6  
                           l1610 4782                             l1355 0498  
                           l1443 1B98                             l1507 0EFC  
                           l2219 4DC6                             l1276 4A86  
                           l1532 4C66                             l1356 05A4  
                           l1444 1ABE                             l1516 1036  
                           l1508 0F14                             l1269 4D36  
                           l1533 4C7A                             l1357 0792  
                           l1349 0284                             l1437 2BC0  
                           l1517 0FAE                             l1461 08FC  
                           l1701 1EAC                             l2085 509A  
                           l1278 4AB2                             l1358 0656  
                           l1470 093E                             l1454 0858  
                           l1702 1EA2                             l2086 508A  
                           l1367 2A70                             l1279 4AC6  
                           l1359 0632                             l1447 1B72  
                           l1471 0980                             l1455 0872  
                           l1448 1CC8                             l1464 08F8  
                           l1456 08EA                             l1720 1FEE  
                           l1712 1EFE                             l1801 39E8  
                           l1481 0B4C                             l1473 0A12  
                           l1465 092A                             l1457 08D4  
                           l1609 478E                             l1705 1EA6  
                           l1802 3A2A                             l1474 0A78  
                           l1458 089C                             l1722 20A4  
                           l1730 2096                             l1811 3ABC  
                           l1803 3A5A                             l1723 2024  
                           l1812 3AB0                             l1492 0CFA  
                           l1476 0A9E                             l1740 214C  
                           l1724 1FF6                             l1805 3A98  
                           l1469 0EC2                             l1493 0C66  
                           l1477 0ADE                             l1741 217C  
                           l1733 20DE                             l1717 1F90  
                           l1709 1EEA                             l1806 3A88  
                           l1910 3836                             l1478 0BA4  
                           l1734 20B0                             l1726 205C  
                           l1718 1F96                             l1831 41B2  
                           l1903 377C                             l1495 0D1A  
                           l1487 0C0A                             l1751 3D3E  
                           l1727 2030                             l1719 1FB4  
                           l1920 4454                             l1832 41A8  
                           l1496 0D04                             l1736 2112  
                           l1921 4484                             l1905 37A8  
                           l1737 20E6                             l1834 41E6  
                           l1906 37E2                             l1770 469A  
                           l1930 3F72                             l1498 0D3E  
                           l1754 3D9E                             l1835 41D0  
                           l1915 386A                             l1907 380A  
                           l1771 4692                             l1931 3F82  
                           l1499 0D42                             l1755 3D48  
                           l1739 215A                             l1691 1DC4  
                           l1916 385E                             l1780 4944  
                           l1692 1DBE                             l1837 420E  
                           l1909 3846                             l1781 4950  
                           l1933 3F9A                             l1757 3DE4  
                           l1838 4204                             l1862 30BE  
                           l1950 3E9C                             l1774 46BA  
                           l1934 3FAA                             l1694 1DEE  
                           l1871 314E                             l1951 3E8C  
                           l1775 46C4                             l1767 466C  
                           l1783 4966                             l1927 3F18  
                           l1944 4EF6                             l1776 46D2  
                           l1768 467C                             l1784 495E  
                           l1696 1DFA                             l1929 3F40  
                           l1697 1E12                             l1938 518C  
                           l1890 31F2                             l1866 30E8  
                           l1698 1E2A                             l1787 497E  
                           l1963 521C                             l1795 505C  
                           l1876 3144                             l1956 3EC0  
                           l1948 3E24                             l1788 4988  
                           l1885 3182                             l1877 313A  
                           l1957 3EB4                             l1789 4996  
                           l1886 3178                             l1959 3EDC  
                           l1799 39CA                             l1895 400E  
                           l1888 31A6                             l1968 5146  
                           l1889 31C2                             l1897 4036  
                           l1898 4074                             l1899 409A  
                           ?_gps 0001                             ?_isr 0001  
                           l6696 44B0                             l8866 508A  
          _escreve_caractere_lcd 48BE                             STR_1 6263  
                           STR_2 6269                             STR_3 626F  
                           STR_4 626F                             STR_5 6275  
                           STR_6 627D                             STR_7 627D  
                           STR_8 627D                             STR_9 625A  
                 timer_dois@flag 003A                             _BRGH 007D62  
                           _T0IF 007F92                             _CREN 007D5C  
                           _LATB 000F8A                             _PIE1 000F9D  
                           _RCIF 007CF5                             i2l60 3BA8  
                           i2l53 3B2C                             u9021 3E08  
                           i2l54 3BA0                             i2l55 3B44  
                           u9040 3E42                             i2l57 3B72  
                           i2l59 3B94                             u9140 4B04  
                           u9045 3E3A                             u9080 3EC6  
                           u8600 3870                             u8521 3760  
                           u8541 378C                             u8670 3AC2  
                           u7890 5142                             _TMR2 000FCC  
                           _SPEN 007D5F                             _TRMT 007D61  
                           _TXEN 007D65                             _SYNC 007D64  
                           _Fsid 00EE        convert_to_degrees@minutes 0088  
                           _dado 003C                             _atof 51BE  
                           _atol 3CFC                             _main 519A  
                   ___ftpack@arg 001A                     ___ftpack@exp 001D  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           indf0 000FEF                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 0046  
                           _sync 218A            get_latitude@lat_index 0099  
                  disk_read@buff 0068                    disk_ioctl@drv 001D  
                  disk_ioctl@res 001E                   ??_get_latitude 0084  
                           prodh 000FF4                             prodl 000FF3  
                           start 000E                    __CFG_IESO$OFF 000000  
                   _sprintf$3880 009B                    __CFG_MCLRE$ON 000000  
                   ___ftmul@cntr 006D                     ___param_bank 000000  
                   ___ftmul@sign 006E                 create_chain@clst 00BB  
                   ___fttol@exp1 0084                            ??_gps 00C0  
                   ___fttol@lval 0080                            ??_isr 0005  
       __size_of_recebe_dado_SPI 005C                      gps@latitude 00D9  
                  __CFG_PLLDIV$5 000000                            l11102 3552  
                          l11304 2DDE                            l12216 0C0E  
                          l11282 50B6                            l12306 0F18  
                          l10812 51E6                            l12332 0FAE  
                          l12244 0D04                            l12336 1032  
                          l10818 51F4                            l12196 0B26  
                          l12188 0ADE                            l11824 4D32  
                          l12448 4C12                            l12474 2566  
                          l12642 33F2                            l12478 25B8  
                          l12860 0348                            l13468 42E8  
                          l12848 02AE                            ?_atof 007E  
                          ?_atol 0026                            ?_main 0001  
                __end_of___awdiv 46DC                            _EEADR 000FA9  
                __end_of___ftadd 3218                            STR_10 6239  
                          STR_11 622D                            STR_12 61AF  
                          STR_20 619E                            STR_21 627A  
                          STR_13 6245                            STR_14 6213  
                          STR_22 61F9                            STR_23 6206  
                          STR_15 61BF                            STR_24 61F9  
                          STR_16 61EB                            STR_25 6206  
                          STR_17 6251                            STR_18 6220  
                          STR_26 61CF                            STR_19 61DD  
                __end_of___awmod 49A0                  __end_of___ftdiv 40CC  
                __end_of___ftneg 519A                  __end_of___lldiv 4760  
                          ?_sync 0088                  __end_of___ftmul 3FE4  
                          _T0CON 000FD5                  ___awdiv@divisor 0022  
                __end_of___llmod 4B48                  __end_of___ftsub 4F20  
                          u14100 30B0                  __end_of___fttol 3EEE  
                          u14200 3156                            _T2CON 000FCA  
                          u14130 30DA                            u15010 1DF6  
                          u13420 5202                            u14061 307C  
                          u14230 318A                            u15110 1EFA  
                          u14071 3090                            u13440 4BC4  
                          u14160 3118                            u14321 3F00  
                          u14410 469E                            u16100 29CC  
                          u16020 2776                            u14341 3F28  
                          u13454 4BCE                            u13455 4BCA  
                          u14271 3FF4                            u13448 4BC6  
                          u14600 1582                            u15320 4710  
                          u16105 29C2                            u13650 4D78  
                          u15090 1ED2                            u14291 401E  
                          u13660 4DA0                            u14540 2326  
                          u14700 1080                            u15500 0B26  
                          u15420 09B8                            u14550 2364  
                          u16070 28CC                            u14710 10A0  
                          u14470 496A                            u14615 15DE  
                          u13920 2D0A                            u14560 23E8  
                          u16080 290A                            u14800 13A2  
                          u13840 419A                            u16320 371A  
                          u13657 4D6E                            u14545 231C  
                          u15425 09AE                            u14570 2426  
                          u16090 298E                            u13667 4D96  
                          u13755 34EC                            u14555 235A  
                          u16075 28C2                            u14635 1676  
                 _data_buffer_32 0276                            u16420 0152  
                          u15540 0C46                            u15460 0AB0  
                          u16180 34BC                            u14565 23DE  
                          u16085 2900                            u14805 1398  
                          u14725 10F0                            u13790 35BA  
                          u14590 1562                            u15710 1046  
                          u15470 0AF0                            u13695 3230  
                          u14575 241C                            u16095 2984  
                          u14840 4D32                            u14680 1832  
                          u13880 4218                            u15720 1060  
                          u14665 1700                            u16425 0146  
                          u16290 4652                            u13970 2E3A  
                          u15570 0D28                            u14755 11DC  
                          u14780 1290                            u15900 2504  
                          u15580 0D38                            u14685 1828  
                          u16525 03C8                            u16630 07E2  
                          u15670 0F50                            u14865 3C0E  
                          u14785 1286                            u14875 3C2A  
                          u15860 4C3A                            u14885 3C5A  
                          u14895 3C74                            u19207 3530  
                          u16575 056A                            u15960 2666  
                          u17368 4340                            u19217 35D4  
                          u16585 05AE                            u17369 4354  
                          u15970 2672                            u19307 4EB6  
                          u19227 3258                            u15867 4C30  
                          u19317 4EBE                            u19237 32A0  
                          u19157 43A8                            u19327 4EC6  
                          u19247 3306                            u19167 43C4  
                          u19337 4ECE                            u19257 4BD8  
                          u19177 43E0                            u19267 4BE0  
                          u19187 2F48                            u19277 4BE6  
                          u19197 3054                            u19287 4BEE  
                          u19297 4F28                            i2l841 52CE  
                ___awdiv@counter 0024                            _RCREG 000FAE  
                          _RCSTA 000FAB                            _TMR0H 000FD7  
                          _TMR0L 000FD6                            _SPBRG 000FAF  
                  __CFG_USBDIV$1 000000                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                __end_of_f_close 5100                            _TXREG 000FAD  
                          _TXSTA 000FAC                            _FatFs 0034  
                  __CFG_PWRT$OFF 000000              ___lmul@multiplicand 001E  
     __size_of_config_timer_dois 000C                  __end_of_f_mount 4AE2  
                   ___lltoft@exp 002A                   __CFG_FCMEN$OFF 000000  
                __end_of_f_write 084C       __size_of_config_timer_zero 001A  
                __end_of_get_fat 1982                  __end_of_command 4F9C  
                  ___awtoft@sign 0025                            _delay 51E2  
                __end_of_mem_cpy 4C56                  __end_of_dpowers 611D  
                __end_of_mem_set 50D8                            _scale 1982  
                __end_of_isdigit 5224         __size_of_escreve_cmd_lcd 008C  
                  ___ftpack@sign 001E                            atof@s 007E  
                          atol@a 0061                            atol@c 0065  
                          atol@s 0026           get_latitude@lat_buffer 0085  
                __end_of_isspace 514E                   disk_ioctl@buff 001B  
                 disk_ioctl@ctrl 001A                            pclath 000FFA  
                 disk_read@count 006E                            tablat 000FF5  
                __end_of_proceed 5302                            plusw2 000FDB  
                __end_of_put_fat 1550                            status 000FD8  
   escreve_dado_SPI@data_to_shrc 001B                            wtemp6 0047  
                __end_of_sprintf 106E                    disk_write@drv 006C  
                  disk_write@res 006D                 get_dt@dt_pointer 0060  
                __initialization 484C                  ??_get_longitude 0084  
                   __end_of_atof 51E2                     __end_of_atol 3DF6  
                   __end_of_main 51BE                     clust2sect@fs 0026  
                   __end_of_sync 24AE               _inicializa_tarefas 5010  
                escalonador@cont 00E1                 get_gpstime@_time 007A  
               get_gpstime@index 007E                           ??_atof 002E  
                         ??_atol 002A                           ??_main 002E  
                  ___fttol@sign1 007F                           ??_sync 008A  
                  __activetblptr 000002              ?_inicializa_tarefas 0001  
           __size_of__tdiv_to_l_ 0132  convert_to_degrees@nmea_lat_long 0085  
    __size_of_convert_to_degrees 013A                  __CFG_CCP2MX$OFF 000000  
              get_fattime@f_time 001E                 ??_sdc_disk_write 002A  
                         ?_delay 0001           ?_escreve_caractere_lcd 0001  
                         _ADCON1 000FC1                 __end_of___altoft 47D8  
               ___llmod@dividend 001A                           ?_scale 006F  
                         _EEDATA 000FA8                           _EECON2 000FA7  
                   gps@longitude 00DC                 ___awdiv@dividend 0020  
               __end_of___awtoft 5080                 __end_of___ftpack 4238  
               __end_of___lltoft 4BA4                           _INT0IE 007F94  
                         _INT0IF 007F91                    ?_dummy_clocks 0001  
                         _PCLATH 000FFA                           _INTCON 000FF2  
                         _TMR0IF 007F92                           _TMR2IF 007CF1  
                         _SDCard 4238         __end_of_recebe_dado_uart 52D2  
                         _SPPCFG 000F63                           _SPPCON 000F65  
               _is_it_gga_string 0040                           _SSPBUF 000FC9  
       __size_of_sdc_disk_status 003A             ??_inicializa_tarefas 001A  
             get_longitude@index 0098       __end_of_posicao_cursor_lcd 4A10  
                   ?_move_window 0071             __end_of_create_chain 27AE  
         __size_of_init_hardware 0016                 __end_of__powers_ 6144  
                         _Result 003E             __size_of_get_fattime 0108  
                         ___ftge 4424                           ___lmul 4C56  
           __size_of_disk_status 0056                           ___wmul 514E  
                      ??___awdiv 0024                        ??___ftadd 007F  
                 __CFG_STVREN$ON 000000                        ??___awmod 001E  
                      ??___ftdiv 0028                        ??___ftneg 002E  
                      ??___lldiv 002B                        ??___ftmul 0066  
                      ??___llmod 0022                        ??___ftsub 002E  
                      ??___fttol 007A                           _f_time 0184  
           __size_of_get_gpstime 0074                           _f_sync 27AE  
                         _get_dt 3374                           _folder 0246  
                         _estado 003B                 __end_of_init_lcd 4424  
                         _memset 5080                        ??_f_close 002E  
                         _fround 2A74                           clear_0 4874  
                         clear_1 4886                           clear_2 4892  
                         clear_3 489E                           clear_4 48AA  
               ___awdiv@quotient 0026                  ___awmod@divisor 001C  
                      ??_f_mount 001C                  ___awmod@counter 001E  
                      ??_f_write 01A9                        ??_get_fat 008E  
                         _strcat 4DA8                        ??_command 0021  
                         _strlen 4F9C                           _strtod 1DA2  
          ___ftmul@f3_as_product 006A                        ??_mem_cpy 0020  
                      ??_mem_set 0020                 __end_of_validate 4D56  
        get_longitude@_longitude 0094                        ??_isdigit 001A  
           __size_of_escalonador 00A4                   disk_status@drv 0026  
           __end_of_get_latitude 45CC                ??_recebe_dado_SPI 001A  
       __end_of_escreve_dado_SPI 4EDE                 __end_of_response 52F6  
                   __mediumconst 60F4                        ??_isspace 001A  
          write_timer_zero@timer 001C                  disk_read@sector 006A  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8          get_latitude@lat_pointer 0097  
                      ??_proceed 001C                 _write_timer_zero 529C  
                      ??_put_fat 0092                           sync@fs 0088  
      escreve_caractere_lcd@data 001C                        ??_sprintf 0095  
                 ??_dummy_clocks 001C                  sdc_disk_write@i 0060  
                sdc_disk_write@j 0062                       __accesstop 0060  
        __end_of__initialization 48B0                       ___altoft@c 0022  
                __CFG_PBADEN$OFF 000000                   disk_write@buff 0065  
                     ___ftadd@f1 0079                       ___ftadd@f2 007C  
                     ___ftge@ff1 001A                       ___ftge@ff2 001D  
                  ___rparam_used 000001                ??_escreve_cmd_lcd 001C  
                     ___ftdiv@f1 0022                       ___ftdiv@f2 0025  
                     ___ftdiv@f3 0061                       ___ftneg@f1 006F  
                     ___awtoft@c 0022                       ___ftmul@f1 0060  
                     ___ftmul@f2 0063                       ___ftsub@f1 0085  
                     ___ftsub@f2 0088                       ___fttol@f1 0076  
                 __pcstackCOMRAM 0001      __end_of_endereco_cursor_lcd 4A7A  
                   __pidataBANK1 5224                    __end_of_delay 5206  
                     ___lltoft@c 0022                    __end_of_scale 1DA2  
                     __div_to_l_ 39AC               _tarefa_em_execucao 0043  
     __end_ofi2_write_timer_zero 52C0           __size_of_sdc_disk_read 015C  
                  _init_hardware 5274               __size_of_disk_read 0050  
                        ??_delay 001A                  __div_to_l_@exp1 0025  
                __div_to_l_@cntr 0024                          ??_scale 002E  
                  gps@gps_buffer 00C6                  __div_to_l_@quot 0020  
               _is_it_rmc_string 003F                       __pbssBANK0 00E2  
                     __pbssBANK1 0100                       __pbssBANK2 0200  
 __size_of_escreve_frase_ram_lcd 0052    __end_of_escreve_frase_ram_lcd 4DA8  
                        ?_SDCard 0001                    __div_to_l_@f1 001A  
                  __div_to_l_@f2 001D        escreve_inteiro_uart@F3956 01D8  
                     _gga_buffer 0100          get_longitude@long_index 0099  
                        ?___ftge 001A                          ?___lmul 001A  
              ??_sdc_disk_status 0023                          ?___wmul 0028  
   __size_of_convert_time_to_utc 012A                          ?_f_sync 008F  
                        ?_get_dt 0021                        SDCard@fil 0297  
                      ?___altoft 0022                          ?_memset 001A  
                        ?_fround 006F                   ___lmul@product 0022  
                      ?___awtoft 0022                        ?___ftpack 001A  
                      ?___lltoft 0022                          ?_strcat 001A  
                        ?_strlen 001A                     _gga_pointers 0164  
                        ?_strtod 0072                          i2l10156 3B3C  
                        _INTCON2 000FF1                          _INTCON3 000FF0  
                 ?_init_hardware 0001                       _disk_ioctl 5100  
                     _disk_write 4DF8                          _SSPCON1 000FC6  
       __size_of_inicializa_shrc 000C                          _SSPSTAT 000FC7  
                     _clust2sect 40CC         _convert_time_to_utc$3876 00B6  
                __CFG_VREGEN$OFF 000000            __size_of_create_chain 0300  
                      ?_init_lcd 0001                  __size_of_SDCard 00AA  
                  _sdc_disk_read 3218                __end_of__npowers_ 616B  
                        __Hparam 0000                       _scale$3879 0072  
                        __Lparam 0000                        ?_validate 0028  
              __end_of_disk_read 4E98                        ?_response 0001  
                     f_close@res 009E                  __size_of___ftge 0090  
                        ___awdiv 4658                  __size_of___lmul 0056  
                        ___ftadd 306A                          ___awmod 4930  
                        ___ftdiv 3FE4                          ___ftneg 5174  
                        ___lldiv 46DC                  __size_of___wmul 0026  
                        ___ftmul 3EEE                          ___llmod 4AE2  
                        ___ftsub 4EDE                          ___fttol 3DF6  
           __size_of_move_window 01D2                  __size_of_f_sync 02C6  
                __size_of_get_dt 0156                       ??___altoft 0026  
           __end_of_dummy_clocks 4F5E            __size_of_get_latitude 008C  
                        _f_close 50D8                          __pcinit 484C  
                     ??___awtoft 0025                       ??___ftpack 001F  
                __size_of_memset 002C                  __size_of_fround 025E  
                   _get_fat$2263 00A8                       _init_ports 525C  
                        __ramtop 0800                          _f_mount 4A7A  
                     ??___lltoft 0026                          __ptext0 519A  
                        __ptext1 4386                          __ptext2 5274  
                        __ptext3 525C                          __ptext4 5302  
                        __ptext5 528A                          __ptext6 5242  
                        __ptext7 529C                          __ptext8 52D2  
                        __ptext9 5010                          _f_write 0012  
                        _get_fat 1550                          _command 4F5E  
                      _T0CONbits 000FD5                  __size_of_strcat 0050  
                __size_of_strlen 003A                      ?__div_to_l_ 001A  
                __size_of_strtod 03E8          i2write_timer_zero@timer 0003  
                        _mem_cpy 4C00      endereco_cursor_lcd@endereco 001C  
                        _dpowers 60F5                          _mem_set 50AC  
                   __size_of_gps 01C6                          _isdigit 5206  
                   __size_of_isr 3BEC          ??_escreve_caractere_lcd 001C  
               ___awmod@dividend 001A                          _isspace 5128  
                   _create_chain 24AE                          _proceed 52F6  
        __size_of_init_interrupt 0012                          _put_fat 106E  
                        _sprintf 084C                          gps@date 00C2  
                 __pintcode_body 3AD4                          gps@time 00D5  
           end_of_initialization 48B0           get_gpstime@time_buffer 006B  
                        isr@cont 0019       __end_ofleitura_chave@F3840 618D  
     __end_ofleitura_chave@F3842 617C       __end_ofleitura_chave@F3838 619E  
        __size_of_init_oscilador 0008                          memset@c 001C  
                        memset@n 001E                    SDCard@FResult 0296  
                        memset@p 0020                    __Lmediumconst 60F4  
                     ??_init_lcd 001D                          int_func 3AD4  
                     _rmc_buffer 0200                ?_recebe_dado_uart 0001  
                      i2u1220_40 3B76                  disk_status@stat 0027  
                 ?_sdc_disk_read 0023           write_timer_zero@timer0 001A  
                ___lldiv@divisor 0027                 sdc_disk_read@arr 02B7  
                     f_mount@rfs 001C               ??_recebe_dado_uart 0001  
               sdc_disk_read@ptr 0060                       f_mount@vol 001E  
                   _get_latitude 4540                  ___lldiv@counter 0064  
                     ??_validate 002C                       ??_response 001D  
                      _RCSTAbits 000FAB         __end_of_write_timer_zero 52AE  
                        postdec1 000FE5                          postdec2 000FDD  
                _recebe_dado_SPI 4BA4                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
          __end_of_get_longitude 4540                   __tdiv_to_l_@f1 001A  
                 __tdiv_to_l_@f2 001D                          sync@res 008E  
         convert_time_to_utc@min 00BC           convert_time_to_utc@sec 00BE  
                        strlen@s 001A                    ??__tdiv_to_l_ 0020  
                        strtod@s 0072                        _PORTAbits 000F80  
                      _PORTBbits 000F81                        _PORTCbits 000F82  
                      _PORTDbits 000F83                        _PORTEbits 000F84  
                ??_init_hardware 001E               _posicao_cursor_lcd 49A0  
     __end_of_convert_to_degrees 3750                      ?_disk_ioctl 001A  
                     f_write@btw 00D3                       f_write@res 01B9  
                      _TRISAbits 000F92                        _TRISBbits 000F93  
                    ?_disk_write 0065                        _TRISCbits 000F94  
                      _TRISDbits 000F95                ?_escreve_dado_SPI 0001  
                _escreve_cmd_lcd 45CC              ?_posicao_cursor_lcd 001D  
                disk_write@count 006B               ??_escreve_dado_SPI 001A  
                    ?_clust2sect 0026                       command@CMD 0021  
                     command@CRC 0020                       command@arg 001C  
                    ___ftdiv@exp 0064                    ??_get_fattime 0060  
              ??_inicializa_shrc 001A      __size_of_inicializa_tarefas 0038  
                 __end_of_SDCard 42E2                    ??_disk_status 0026  
            __size_of__div_to_l_ 0128                    ??_get_gpstime 006A  
                    ___ftmul@exp 0069                  command@argument 0022  
           ??_posicao_cursor_lcd 001E                   __end_of___ftge 44B4  
                 __end_of___lmul 4CAC                   __end_of___wmul 5174  
                  ??_escalonador 00DF                      ?_init_ports 0001  
                 __end_of_f_sync 2A74                   __end_of_get_dt 34CA  
                 clust2sect@clst 0028                   __end_of_memset 50AC  
                 __end_of_fround 2CD2                   __end_of_strcat 4DF8  
                 __end_of_strlen 4FD6                   __end_of_strtod 218A  
            start_initialization 484C              __end_of__tdiv_to_l_ 3882  
                    __end_of_gps 306A                      __end_of_isr 3BF4  
            _convert_time_to_utc 3882                       mem_cpy@cnt 001E  
                    put_fat@clst 008A                       mem_cpy@dst 001A  
                     mem_cpy@src 001C                  _sdc_disk_status 4FD6  
                ??_sdc_disk_read 002A                         ??_SDCard 002E  
             i2_write_timer_zero 52AE                  ___llmod@divisor 001E  
        __end_of_recebe_dado_SPI 4C00                       mem_set@cnt 001E  
                     mem_set@dst 001A                  ___llmod@counter 0022  
                     mem_set@val 001C          __size_of_sdc_disk_write 014C  
               _data_uart_recebe 0045                      _dado_buffer 00F6  
          __size_of_dummy_clocks 003E              __size_of_disk_ioctl 0028  
            ?i2_write_timer_zero 0001                         ??___ftge 0020  
            __size_of_disk_write 0050                         ??___lmul 0022  
                       ??___wmul 002C             ?_convert_time_to_utc 00B2  
            __end_of_get_fattime 3CFC                         ??_f_sync 0091  
                       ??_get_dt 0025                      __pdataBANK1 01C9  
               __CFG_LPT1OSC$OFF 000000              __end_of_disk_status 4D02  
            __size_of_clust2sect 00BE                         ??_memset 0020  
                       ??_fround 002E              __end_of_get_gpstime 484C  
         sdc_disk_read@start_add 0061                    sprintf@tmpval 00A4  
        __end_of_escreve_cmd_lcd 4658                         ??_strcat 001F  
                       ??_strlen 001C                         ??_strtod 0076  
              __size_of___altoft 0078     __size_of_endereco_cursor_lcd 006A  
                     fround@prec 0078                __size_of___awtoft 0038  
              __size_of___ftpack 00AE                      __pbssBIGRAM 02B7  
              __size_of___lltoft 005C                      __pbssCOMRAM 002E  
                  __pcstackBANK0 0060                    __pcstackBANK1 01A9  
                  __pcstackBANK2 0296                   _init_interrupt 528A  
           ??i2_write_timer_zero 0003              __end_of_escalonador 4386  
                    _data_buffer 019A                     _isdigit$3308 001B  
                   _dummy_clocks 4F20                   _init_oscilador 5302  
                    sprintf@flag 00A0                      sprintf@fval 00AE  
                    sprintf@prec 00AC              __size_of_init_ports 0018  
          _escreve_frase_ram_lcd 4D56                __size_of_init_lcd 009E  
              delay@contador_int 001B                delay@contador_ext 001A  
       get_longitude@long_buffer 0085                        _gga_index 0038  
                      __pintcode 0008            ??_convert_time_to_utc 002E  
                  __pmediumconst 60F4                         ?___awdiv 0020  
                       ?___ftadd 0079                         ?___awmod 001A  
                       ?___ftdiv 0022                         ?___ftneg 006F  
                       ?___lldiv 0023                         ?___ftmul 0060  
                       ?___llmod 001A                __size_of_validate 0054  
                       ?___ftsub 0085                        __npowers_ 6144  
                       ?___fttol 0076                __size_of_response 000C  
                       ?_f_close 009C                        _disk_read 4E48  
             _sinaliza_int_timer 0044                         ?_f_mount 001A  
                    __tdiv_to_l_ 3750                         ?_f_write 00CF  
                       ?_get_fat 0088                         ?_command 001C  
                   ??__div_to_l_ 0020                         ?_mem_cpy 001A  
         __end_of_init_interrupt 529C                         ?_mem_set 001A  
                       ?_isdigit 0001              sdc_disk_read@p_buff 0023  
            sdc_disk_read@length 0066                         ?_isspace 0001  
            sdc_disk_read@sector 0025          __end_of_sdc_disk_status 5010  
 __size_of_escreve_caractere_lcd 0072    __end_of_escreve_caractere_lcd 4930  
                       ?_proceed 0001                        f_close@fp 009C  
                       ?_put_fat 0088                   __size_of_delay 0024  
         __end_of_init_oscilador 530A                         ?_sprintf 008B  
                 __size_of_scale 0420                       validate@id 002A  
                     validate@fs 0028                        _p_tarefas 00EA  
                 ___wmul@product 002C                         _LATBbits 000F8A  
               ?_recebe_dado_SPI 0001                         _PIE1bits 000F9D  
                    _get_fattime 3BF4                        _rmc_index 0036  
                    _disk_status 4CAC                    ??_move_window 0077  
                      f_mount@fs 001A                         _PIR1bits 000F9E  
             __end_of__div_to_l_ 3AD4                         _PIR2bits 000FA1  
                    _get_gpstime 47D8                    move_window@fs 0071  
                  move_window@nf 0083                ?_write_timer_zero 001A  
                    strtod@flags 0078               leitura_chave@F3840 617C  
             leitura_chave@F3842 616B               leitura_chave@F3838 618D  
                      f_sync@dir 009A                        f_sync@res 0095  
                      f_sync@tim 0096                      strtod@expon 0079  
       posicao_cursor_lcd@coluna 001D                       ?_disk_read 0068  
             ??_write_timer_zero 001C                        f_write@cc 01BD  
     posicao_cursor_lcd@endereco 001F                        f_write@bw 00D5  
                      f_write@fp 00CF                        get_dt@dia 0062  
                      get_dt@ano 0064                        get_fat@bc 00AC  
                      get_fat@fs 0088                        get_dt@mes 0063  
      __size_of_recebe_dado_uart 0012                        get_fat@wc 00AA  
                    _escalonador 42E2                ___wmul@multiplier 0028  
               ?_escreve_cmd_lcd 0001      escreve_frase_ram_lcd@buffer 001D  
                ?_init_interrupt 0001                     ??_disk_ioctl 001D  
                   ??_disk_write 002E                  _inicializa_shrc 52DE  
                   _isspace$3311 001B                  ?_init_oscilador 0001  
                   ??_clust2sect 0060                ___lmul@multiplier 001A  
                      copy_data0 4860               _convert_to_degrees 3616  
         ?_escreve_frase_ram_lcd 001D                       put_fat@res 00B6  
                     put_fat@val 008E                       _EECON1bits 000FA6  
              move_window@sector 0073         escreve_dado_SPI@contador 001A  
                 _sdc_disk_write 34CA         escreve_inteiro_lcd@F3966 01DF  
                       __Hrparam 0000        __size_of_escreve_dado_SPI 0046  
            ?_convert_to_degrees 0085                      _info_chaves 018D  
                       __Lrparam 0000               __end_of_disk_ioctl 5128  
             __end_of_disk_write 4E48                 __size_of___awdiv 0084  
               __size_of___ftadd 01AE                 __size_of___awmod 0070  
               __size_of___ftdiv 00E8                 __size_of___ftneg 0026  
               __size_of___lldiv 0084                         ___altoft 4760  
               __size_of___ftmul 00F6                 __size_of___llmod 0066  
               __size_of___ftsub 0042                 __size_of___fttol 00F8  
                   ??_init_ports 001A              __end_of_move_window 2EA4  
                       ___awtoft 5048                         ___ftpack 418A  
             __end_of_clust2sect 418A                      _fround$3877 0075  
                    _fround$3878 0072                 __size_of_f_close 0028  
                       ___lltoft 4B48                 __size_of_f_mount 0068  
               __size_of_f_write 083A                 __size_of_get_fat 0432  
               __size_of_command 003E                       sprintf@exp 00A2  
                     sprintf@val 00A8            __end_of_init_hardware 528A  
                     strcat@from 001C                 __size_of_mem_cpy 0056  
           ??_convert_to_degrees 002E                 __size_of_mem_set 002C  
               __size_of_isdigit 001E                         _gga_code 0031  
               ?_sdc_disk_status 0001                 __size_of_isspace 0026  
                       _fileName 01C9                         __ptext10 52DE  
                       __ptext11 42E2                         __ptext20 4760  
                       __ptext12 4238                         __ptext21 47D8  
                       __ptext13 2EA4                         __ptext30 084C  
                       __ptext22 3CFC                         __ptext14 5080  
                       __ptext31 1982                         __ptext23 3374  
                       __ptext15 44B4                         __ptext40 4B48  
                       __ptext32 5206                         __ptext24 4F9C  
                       __ptext16 4540                         __ptext41 4AE2  
                       __ptext33 2A74                         __ptext25 4DA8  
                       __ptext17 51BE                         __ptext50 4C00  
                       __ptext42 46DC                         __ptext34 514E  
                       __ptext26 3616                         __ptext18 1DA2  
                       __ptext51 24AE                         __ptext43 3DF6  
                       __ptext35 3EEE                         __ptext27 3FE4  
                       __ptext19 5128                         __ptext60 4CAC  
                       __ptext52 106E                         __ptext44 4EDE  
                       __ptext36 4930                         __ptext28 5048  
                       __ptext61 4FD6                         __ptext53 1550  
                       __ptext45 306A                         __ptext37 4658  
                       __ptext29 3882                         __ptext70 4E48  
                       __ptext62 218A                         __ptext54 40CC  
                       __ptext46 418A                         __ptext38 3750  
                       __ptext71 3218                         __ptext63 2CD2  
                       __ptext55 4C56                         __ptext47 5174  
                       __ptext39 39AC                         __ptext80 3BF4  
                       __ptext72 52EA                         __ptext64 4DF8  
                       __ptext56 4A7A                         __ptext48 4424  
                       __ptext81 45CC                         __ptext73 4BA4  
                       __ptext65 34CA                         __ptext57 50D8  
                       __ptext49 0012                         __ptext82 51E2  
                       __ptext74 52F6                         __ptext66 49A0  
                       __ptext58 27AE                         __ptext75 4F20  
                       __ptext67 4A10                         __ptext59 4D02  
                       __ptext84 52AE                         __ptext76 4F5E  
                       __ptext68 4D56                         __ptext85 52C0  
                       __ptext77 4E98                         __ptext69 48BE  
                       __ptext86 0000                         __ptext78 50AC  
                       __ptext79 5100                         _fileSize 0194  
                       __powers_ 611D                 __size_of_proceed 000C  
               __size_of_put_fat 04E2                   _timeout_tarefa 00F2  
               __size_of_sprintf 0822                     _rmc_pointers 0178  
             sdc_disk_read@count 0029           __size_of_get_longitude 008C  
     __end_of_inicializa_tarefas 5048         i2write_timer_zero@timer0 0001  
         __end_of_sdc_disk_write 3616                         _init_lcd 4386  
                  __size_of_atof 0024                    __size_of_atol 00FA  
                  __size_of_main 0024                    __size_of_sync 0324  
            _endereco_cursor_lcd 4A10               __end_of_init_ports 5274  
              _comma_counter_gga 0042                    dummy_clocks@i 001F  
                  dummy_clocks@n 001E                _comma_counter_rmc 0041  
                       _rmc_code 002E                         _validate 4D02  
                       _response 52EA                       strtod@eexp 0077  
                       f_sync@fp 008F      __size_of_posicao_cursor_lcd 0070  
                       int$flags 0046          posicao_cursor_lcd@linha 001E  
                       get_fat@p 00AE                         atol@sign 0060  
                    ??_disk_read 002E          __end_of_inicializa_shrc 52EA  
          __CFG_CPUDIV$OSC1_PLL2 000000             ?_endereco_cursor_lcd 0001  
                     _INTCONbits 000FF2                        put_fat@bc 00B4  
                       mem_cpy@d 0020                        put_fat@fs 0088  
                       mem_cpy@s 0022                         mem_set@d 0020  
               move_window@wsect 0084                         isdigit@c 001C  
                       memset@p1 001A                         scale@scl 0075  
              _config_timer_dois 52D2                     _tempo_backup 00E6  
              _config_timer_zero 5242                         intlevel2 0000  
                      sprintf@ap 009E                 __tdiv_to_l_@exp1 0028  
               __tdiv_to_l_@cntr 0027                        sprintf@sp 008B  
             ?_config_timer_dois 0001                 __tdiv_to_l_@quot 0023  
             ?_config_timer_zero 0001                     _tempo_tarefa 00E2  
                ?_sdc_disk_write 0023                         isspace@c 001C  
               ___lldiv@dividend 0023              sdc_disk_status@buff 0024  
            sdc_disk_status@cont 0023                sdc_disk_read@buff 0065  
          __end_of_sdc_disk_read 3374              sdc_disk_status@stat 0025  
            ??_config_timer_dois 001A                       _OSCCONbits 000FD3  
            ??_config_timer_zero 001E                      _move_window 2CD2  
                      strtod@res 0074      convert_time_to_utc@utc_time 00B2  
      get_longitude@long_pointer 0097                get_latitude@index 0098  
                  _get_longitude 44B4                         put_fat@p 00B7  
           sdc_disk_write@p_buff 0023                 _recebe_dado_uart 52C0  
                   ?__tdiv_to_l_ 001A          recebe_dado_SPI@contador 001C  
           sdc_disk_write@sector 0025            ??_endereco_cursor_lcd 001C  
                   response@buff 001D                         sprintf@c 00B1  
                       sprintf@f 008D                         strcat@cp 001F  
                       strcat@to 001A                 ___lldiv@quotient 0060  
        convert_time_to_utc@hour 00BA                         strlen@cp 001E  
      __end_of_config_timer_dois 52DE                    ?_create_chain 00B9  
      __end_of_config_timer_zero 525C                         strtod@_u 007A  
    __size_ofi2_write_timer_zero 0012                      _SSPCON1bits 000FC6  
         escreve_cmd_lcd@comando 001C              sdc_disk_write@count 0029  
             sdc_disk_write@buff 0064                     f_write@csect 01BC  
    __end_of_convert_time_to_utc 39AC                     f_write@wbuff 01BA  
                   ?_get_fattime 001A                     _put_fat$2290 00B2  
                   _put_fat$2289 00B0                      f_write@buff 00D1  
                    f_write@clst 01BF                    ?_get_latitude 0081  
                    f_write@sect 01C3                 _escreve_dado_SPI 4E98  
                    f_write@wcnt 01C7                     ?_disk_status 0001  
                   ?_get_gpstime 0066  
