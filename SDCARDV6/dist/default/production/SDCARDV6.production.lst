

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 23 14:28:54 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   100                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   106                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   107  0000                     
   108                           ; Version 1.45
   109                           ; Generated 16/11/2017 GMT
   110                           ; 
   111                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   112                           ; All rights reserved.
   113                           ; 
   114                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   115                           ; 
   116                           ; Redistribution and use in source and binary forms, with or without modification, are
   117                           ; permitted provided that the following conditions are met:
   118                           ; 
   119                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   120                           ;        conditions and the following disclaimer.
   121                           ; 
   122                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   123                           ;        of conditions and the following disclaimer in the documentation and/or other
   124                           ;        materials provided with the distribution.
   125                           ; 
   126                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   127                           ;        software without specific prior written permission.
   128                           ; 
   129                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   130                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   131                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   132                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   133                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   134                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   135                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   136                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   137                           ; 
   138                           ; 
   139                           ; Code-generator required, PIC18F4550 Definitions
   140                           ; 
   141                           ; SFR Addresses
   142  0000                     
   143                           	psect	idataBANK1
   144  005AC2                     __pidataBANK1:
   145                           	opt stack 0
   146                           
   147                           ;initializer for _fileName
   148  005AC2  63                 	db	99
   149  005AC3  68                 	db	104
   150  005AC4  65                 	db	101
   151  005AC5  63                 	db	99
   152  005AC6  6B                 	db	107
   153  005AC7  2E                 	db	46
   154  005AC8  74                 	db	116
   155  005AC9  78                 	db	120
   156  005ACA  74                 	db	116
   157  005ACB  00                 	db	0
   158  005ACC  00                 	db	0
   159  005ACD  00                 	db	0
   160  005ACE  00                 	db	0
   161  005ACF  00                 	db	0
   162  005AD0  00                 	db	0
   163                           
   164                           ;initializer for escreve_inteiro_uart@F3956
   165  005AD1  30                 	db	48
   166  005AD2  30                 	db	48
   167  005AD3  30                 	db	48
   168  005AD4  30                 	db	48
   169  005AD5  30                 	db	48
   170  005AD6  30                 	db	48
   171  005AD7  00                 	db	0
   172                           
   173                           ;initializer for escreve_inteiro_lcd@F3966
   174  005AD8  30                 	db	48
   175  005AD9  30                 	db	48
   176  005ADA  30                 	db	48
   177  005ADB  30                 	db	48
   178  005ADC  30                 	db	48
   179  005ADD  30                 	db	48
   180  005ADE  00                 	db	0
   181                           
   182                           	psect	mediumconst
   183  0060B8                     __pmediumconst:
   184                           	opt stack 0
   185  0060B8  00                 	db	0
   186  0060B9                     _dpowers:
   187                           	opt stack 0
   188  0060B9  0001               	dw	1
   189  0060BB  0000               	dw	0
   190  0060BD  000A               	dw	10
   191  0060BF  0000               	dw	0
   192  0060C1  0064               	dw	100
   193  0060C3  0000               	dw	0
   194  0060C5  03E8               	dw	1000
   195  0060C7  0000               	dw	0
   196  0060C9  2710               	dw	10000
   197  0060CB  0000               	dw	0
   198  0060CD  86A0               	dw	34464
   199  0060CF  0001               	dw	1
   200  0060D1  4240               	dw	16960
   201  0060D3  000F               	dw	15
   202  0060D5  9680               	dw	38528
   203  0060D7  0098               	dw	152
   204  0060D9  E100               	dw	57600
   205  0060DB  05F5               	dw	1525
   206  0060DD  CA00               	dw	51712
   207  0060DF  3B9A               	dw	15258
   208  0060E1                     __end_of_dpowers:
   209                           	opt stack 0
   210  0060E1                     __powers_:
   211                           	opt stack 0
   212  0060E1  00                 	db	0
   213  0060E2  80                 	db	128
   214  0060E3  3F                 	db	63
   215  0060E4  00                 	db	0
   216  0060E5  20                 	db	32
   217  0060E6  41                 	db	65
   218  0060E7  00                 	db	0
   219  0060E8  C8                 	db	200
   220  0060E9  42                 	db	66
   221  0060EA  00                 	db	0
   222  0060EB  7A                 	db	122
   223  0060EC  44                 	db	68
   224  0060ED  40                 	db	64
   225  0060EE  1C                 	db	28
   226  0060EF  46                 	db	70
   227  0060F0  50                 	db	80
   228  0060F1  C3                 	db	195
   229  0060F2  47                 	db	71
   230  0060F3  24                 	db	36
   231  0060F4  74                 	db	116
   232  0060F5  49                 	db	73
   233  0060F6  97                 	db	151
   234  0060F7  18                 	db	24
   235  0060F8  4B                 	db	75
   236  0060F9  BC                 	db	188
   237  0060FA  BE                 	db	190
   238  0060FB  4C                 	db	76
   239  0060FC  6B                 	db	107
   240  0060FD  6E                 	db	110
   241  0060FE  4E                 	db	78
   242  0060FF  03                 	db	3
   243  006100  15                 	db	21
   244  006101  50                 	db	80
   245  006102  79                 	db	121
   246  006103  AD                 	db	173
   247  006104  60                 	db	96
   248  006105  F3                 	db	243
   249  006106  49                 	db	73
   250  006107  71                 	db	113
   251  006108                     __end_of__powers_:
   252                           	opt stack 0
   253  006108                     __npowers_:
   254                           	opt stack 0
   255  006108  00                 	db	0
   256  006109  80                 	db	128
   257  00610A  3F                 	db	63
   258  00610B  CD                 	db	205
   259  00610C  CC                 	db	204
   260  00610D  3D                 	db	61
   261  00610E  D7                 	db	215
   262  00610F  23                 	db	35
   263  006110  3C                 	db	60
   264  006111  12                 	db	18
   265  006112  83                 	db	131
   266  006113  3A                 	db	58
   267  006114  B7                 	db	183
   268  006115  D1                 	db	209
   269  006116  38                 	db	56
   270  006117  C6                 	db	198
   271  006118  27                 	db	39
   272  006119  37                 	db	55
   273  00611A  38                 	db	56
   274  00611B  86                 	db	134
   275  00611C  35                 	db	53
   276  00611D  C0                 	db	192
   277  00611E  D6                 	db	214
   278  00611F  33                 	db	51
   279  006120  CC                 	db	204
   280  006121  2B                 	db	43
   281  006122  32                 	db	50
   282  006123  70                 	db	112
   283  006124  89                 	db	137
   284  006125  30                 	db	48
   285  006126  E7                 	db	231
   286  006127  DB                 	db	219
   287  006128  2E                 	db	46
   288  006129  E5                 	db	229
   289  00612A  3C                 	db	60
   290  00612B  1E                 	db	30
   291  00612C  42                 	db	66
   292  00612D  A2                 	db	162
   293  00612E  0D                 	db	13
   294  00612F                     __end_of__npowers_:
   295                           	opt stack 0
   296  00612F                     leitura_chave@F3842:
   297                           	opt stack 0
   298  00612F  20                 	db	32
   299  006130  49                 	db	73
   300  006131  67                 	db	103
   301  006132  6E                 	db	110
   302  006133  20                 	db	32
   303  006134  4F                 	db	79
   304  006135  6E                 	db	110
   305  006136  00                 	db	0
   306  006137  00                 	db	0
   307  006138  00                 	db	0
   308  006139  00                 	db	0
   309  00613A  00                 	db	0
   310  00613B  00                 	db	0
   311  00613C  00                 	db	0
   312  00613D  00                 	db	0
   313  00613E  00                 	db	0
   314  00613F  00                 	db	0
   315  006140                     __end_ofleitura_chave@F3842:
   316                           	opt stack 0
   317  006140                     leitura_chave@F3840:
   318                           	opt stack 0
   319  006140  20                 	db	32
   320  006141  49                 	db	73
   321  006142  67                 	db	103
   322  006143  6E                 	db	110
   323  006144  20                 	db	32
   324  006145  43                 	db	67
   325  006146  72                 	db	114
   326  006147  61                 	db	97
   327  006148  6E                 	db	110
   328  006149  6B                 	db	107
   329  00614A  00                 	db	0
   330  00614B  00                 	db	0
   331  00614C  00                 	db	0
   332  00614D  00                 	db	0
   333  00614E  00                 	db	0
   334  00614F  00                 	db	0
   335  006150  00                 	db	0
   336  006151                     __end_ofleitura_chave@F3840:
   337                           	opt stack 0
   338  006151                     leitura_chave@F3838:
   339                           	opt stack 0
   340  006151  20                 	db	32
   341  006152  49                 	db	73
   342  006153  67                 	db	103
   343  006154  6E                 	db	110
   344  006155  20                 	db	32
   345  006156  4F                 	db	79
   346  006157  66                 	db	102
   347  006158  66                 	db	102
   348  006159  00                 	db	0
   349  00615A  00                 	db	0
   350  00615B  00                 	db	0
   351  00615C  00                 	db	0
   352  00615D  00                 	db	0
   353  00615E  00                 	db	0
   354  00615F  00                 	db	0
   355  006160  00                 	db	0
   356  006161  00                 	db	0
   357  006162                     __end_ofleitura_chave@F3838:
   358                           	opt stack 0
   359  006162                     mensagem_inicial@F4171:
   360                           	opt stack 0
   361  006162  20                 	db	32
   362  006163  31                 	db	49
   363  006164  38                 	db	56
   364  006165  2F                 	db	47
   365  006166  30                 	db	48
   366  006167  31                 	db	49
   367  006168  2F                 	db	47
   368  006169  32                 	db	50
   369  00616A  30                 	db	48
   370  00616B  32                 	db	50
   371  00616C  32                 	db	50
   372  00616D  20                 	db	32
   373  00616E  20                 	db	32
   374  00616F  20                 	db	32
   375  006170  00                 	db	0
   376  006171  00                 	db	0
   377  006172  00                 	db	0
   378  006173                     __end_ofmensagem_inicial@F4171:
   379                           	opt stack 0
   380  006173                     mensagem_inicial@F4169:
   381                           	opt stack 0
   382  006173  53                 	db	83
   383  006174  44                 	db	68
   384  006175  43                 	db	67
   385  006176  61                 	db	97
   386  006177  72                 	db	114
   387  006178  64                 	db	100
   388  006179  20                 	db	32
   389  00617A  49                 	db	73
   390  00617B  6E                 	db	110
   391  00617C  69                 	db	105
   392  00617D  74                 	db	116
   393  00617E  20                 	db	32
   394  00617F  20                 	db	32
   395  006180  20                 	db	32
   396  006181  00                 	db	0
   397  006182  00                 	db	0
   398  006183  00                 	db	0
   399  006184                     __end_ofmensagem_inicial@F4169:
   400                           	opt stack 0
   401  006184                     get_ldnumber@volid:
   402                           	opt stack 0
   403  006184  68                 	db	low STR_27
   404  006185  62                 	db	high STR_27
   405  006186  56                 	db	low STR_28
   406  006187  62                 	db	high STR_28
   407  006188  70                 	db	low STR_29
   408  006189  62                 	db	high STR_29
   409  00618A  79                 	db	low STR_10
   410  00618B  62                 	db	high STR_10
   411  00618C  60                 	db	low STR_31
   412  00618D  62                 	db	high STR_31
   413  00618E  64                 	db	low STR_32
   414  00618F  62                 	db	high STR_32
   415  006190  4C                 	db	low STR_33
   416  006191  62                 	db	high STR_33
   417  006192  51                 	db	low STR_34
   418  006193  62                 	db	high STR_34
   419  006194                     __end_ofget_ldnumber@volid:
   420                           	opt stack 0
   421  006194                     _DbcTbl:
   422                           	opt stack 0
   423  006194  81                 	db	129
   424  006195  9F                 	db	159
   425  006196  E0                 	db	224
   426  006197  FC                 	db	252
   427  006198  40                 	db	64
   428  006199  7E                 	db	126
   429  00619A  80                 	db	128
   430  00619B  FC                 	db	252
   431  00619C  00                 	db	0
   432  00619D  00                 	db	0
   433  00619E                     __end_of_DbcTbl:
   434                           	opt stack 0
   435  0000                     _RCSTA	set	4011
   436  0000                     _TXSTA	set	4012
   437  0000                     _RCREG	set	4014
   438  0000                     _RCSTAbits	set	4011
   439  0000                     _TXREG	set	4013
   440  0000                     _SPBRG	set	4015
   441  0000                     _PIR2bits	set	4001
   442  0000                     _EECON2	set	4007
   443  0000                     _EECON1bits	set	4006
   444  0000                     _EEDATA	set	4008
   445  0000                     _EEADR	set	4009
   446  0000                     _PR2	set	4043
   447  0000                     _TMR2	set	4044
   448  0000                     _T2CON	set	4042
   449  0000                     _OSCCONbits	set	4051
   450  0000                     _TRISE	set	3990
   451  0000                     _TRISC	set	3988
   452  0000                     _TRISA	set	3986
   453  0000                     _TRISD	set	3989
   454  0000                     _LATB	set	3978
   455  0000                     _TRISB	set	3987
   456  0000                     _TMR0L	set	4054
   457  0000                     _TMR0H	set	4055
   458  0000                     _PIE1	set	3997
   459  0000                     _INTCON3	set	4080
   460  0000                     _INTCON2	set	4081
   461  0000                     _INTCON	set	4082
   462  0000                     _SPPCFG	set	3939
   463  0000                     _SPPCON	set	3941
   464  0000                     _T0CON	set	4053
   465  0000                     _PORTDbits	set	3971
   466  0000                     _TRISDbits	set	3989
   467  0000                     _PORTEbits	set	3972
   468  0000                     _PORTCbits	set	3970
   469  0000                     _SSPBUF	set	4041
   470  0000                     _TRISCbits	set	3988
   471  0000                     _SSPSTATbits	set	4039
   472  0000                     _SSPCON1	set	4038
   473  0000                     _SSPSTAT	set	4039
   474  0000                     _SSPCON1bits	set	4038
   475  0000                     _PORTBbits	set	3969
   476  0000                     _TRISBbits	set	3987
   477  0000                     _T0CONbits	set	4053
   478  0000                     _LATBbits	set	3978
   479  0000                     _PORTAbits	set	3968
   480  0000                     _TRISAbits	set	3986
   481  0000                     _ADCON1	set	4033
   482  0000                     _PCL	set	4089
   483  0000                     _PCLATH	set	4090
   484  0000                     _INTCONbits	set	4082
   485  0000                     _PIR1bits	set	3998
   486  0000                     _PIE1bits	set	3997
   487  0000                     _RCIF	set	31989
   488  0000                     _TRMT	set	32097
   489  0000                     _TXEN	set	32101
   490  0000                     _CREN	set	32092
   491  0000                     _SPEN	set	32095
   492  0000                     _SYNC	set	32100
   493  0000                     _BRGH	set	32098
   494  0000                     _TMR2IF	set	31985
   495  0000                     _INT0IE	set	32660
   496  0000                     _INT0IF	set	32657
   497  0000                     _T0IF	set	32658
   498  0000                     _TMR0IF	set	32658
   499  00619E  53                 	db	83	;'S'
   500  00619F  50                 	db	80	;'P'
   501  0061A0  49                 	db	73	;'I'
   502  0061A1  20                 	db	32
   503  0061A2  63                 	db	99	;'c'
   504  0061A3  6F                 	db	111	;'o'
   505  0061A4  6E                 	db	110	;'n'
   506  0061A5  66                 	db	102	;'f'
   507  0061A6  69                 	db	105	;'i'
   508  0061A7  67                 	db	103	;'g'
   509  0061A8  75                 	db	117	;'u'
   510  0061A9  72                 	db	114	;'r'
   511  0061AA  61                 	db	97	;'a'
   512  0061AB  64                 	db	100	;'d'
   513  0061AC  61                 	db	97	;'a'
   514  0061AD  21                 	db	33
   515  0061AE  00                 	db	0
   516  0061AF                     STR_18:
   517  0061AF  49                 	db	73	;'I'
   518  0061B0  6E                 	db	110	;'n'
   519  0061B1  73                 	db	115	;'s'
   520  0061B2  69                 	db	105	;'i'
   521  0061B3  72                 	db	114	;'r'
   522  0061B4  61                 	db	97	;'a'
   523  0061B5  20                 	db	32
   524  0061B6  6F                 	db	111	;'o'
   525  0061B7  20                 	db	32
   526  0061B8  43                 	db	67	;'C'
   527  0061B9  61                 	db	97	;'a'
   528  0061BA  72                 	db	114	;'r'
   529  0061BB  74                 	db	116	;'t'
   530  0061BC  61                 	db	97	;'a'
   531  0061BD  6F                 	db	111	;'o'
   532  0061BE  00                 	db	0
   533  0061BF                     STR_26:
   534  0061BF  22                 	db	34
   535  0061C0  2A                 	db	42
   536  0061C1  2B                 	db	43
   537  0061C2  2C                 	db	44
   538  0061C3  3A                 	db	58	;':'
   539  0061C4  3B                 	db	59	;';'
   540  0061C5  3C                 	db	60	;'<'
   541  0061C6  3D                 	db	61	;'='
   542  0061C7  3E                 	db	62	;'>'
   543  0061C8  3F                 	db	63	;'?'
   544  0061C9  5B                 	db	91	;'['
   545  0061CA  5D                 	db	93	;']'
   546  0061CB  7C                 	db	124
   547  0061CC  7F                 	db	127
   548  0061CD  00                 	db	0
   549  0061CE                     STR_23:
   550  0061CE  4D                 	db	77	;'M'
   551  0061CF  4D                 	db	77	;'M'
   552  0061D0  43                 	db	67	;'C'
   553  0061D1  20                 	db	32
   554  0061D2  56                 	db	86	;'V'
   555  0061D3  65                 	db	101	;'e'
   556  0061D4  72                 	db	114	;'r'
   557  0061D5  2E                 	db	46
   558  0061D6  20                 	db	32
   559  0061D7  33                 	db	51	;'3'
   560  0061D8  00                 	db	0
   561  0061D9                     STR_21:
   562  0061D9  63                 	db	99	;'c'
   563  0061DA  6F                 	db	111	;'o'
   564  0061DB  6D                 	db	109	;'m'
   565  0061DC  61                 	db	97	;'a'
   566  0061DD  6E                 	db	110	;'n'
   567  0061DE  64                 	db	100	;'d'
   568  0061DF  6F                 	db	111	;'o'
   569  0061E0  20                 	db	32
   570  0061E1  31                 	db	49	;'1'
   571  0061E2  36                 	db	54	;'6'
   572  0061E3  00                 	db	0
   573  0061E4                     STR_17:
   574  0061E4  53                 	db	83	;'S'
   575  0061E5  65                 	db	101	;'e'
   576  0061E6  6D                 	db	109	;'m'
   577  0061E7  20                 	db	32
   578  0061E8  43                 	db	67	;'C'
   579  0061E9  61                 	db	97	;'a'
   580  0061EA  72                 	db	114	;'r'
   581  0061EB  74                 	db	116	;'t'
   582  0061EC  61                 	db	97	;'a'
   583  0061ED  6F                 	db	111	;'o'
   584  0061EE  00                 	db	0
   585  0061EF                     STR_12:
   586  0061EF  65                 	db	101	;'e'
   587  0061F0  73                 	db	115	;'s'
   588  0061F1  63                 	db	99	;'c'
   589  0061F2  72                 	db	114	;'r'
   590  0061F3  65                 	db	101	;'e'
   591  0061F4  76                 	db	118	;'v'
   592  0061F5  65                 	db	101	;'e'
   593  0061F6  6E                 	db	110	;'n'
   594  0061F7  64                 	db	100	;'d'
   595  0061F8  6F                 	db	111	;'o'
   596  0061F9  00                 	db	0
   597  0061FA                     STR_11:
   598  0061FA  74                 	db	116	;'t'
   599  0061FB  65                 	db	101	;'e'
   600  0061FC  73                 	db	115	;'s'
   601  0061FD  74                 	db	116	;'t'
   602  0061FE  65                 	db	101	;'e'
   603  0061FF  31                 	db	49	;'1'
   604  006200  2E                 	db	46
   605  006201  74                 	db	116	;'t'
   606  006202  78                 	db	120	;'x'
   607  006203  74                 	db	116	;'t'
   608  006204  00                 	db	0
   609  006205                     STR_22:
   610  006205  53                 	db	83	;'S'
   611  006206  44                 	db	68	;'D'
   612  006207  20                 	db	32
   613  006208  56                 	db	86	;'V'
   614  006209  45                 	db	69	;'E'
   615  00620A  52                 	db	82	;'R'
   616  00620B  2E                 	db	46
   617  00620C  20                 	db	32
   618  00620D  31                 	db	49	;'1'
   619  00620E  00                 	db	0
   620  00620F                     STR_14:
   621  00620F  66                 	db	102	;'f'
   622  006210  65                 	db	101	;'e'
   623  006211  63                 	db	99	;'c'
   624  006212  68                 	db	104	;'h'
   625  006213  61                 	db	97	;'a'
   626  006214  6E                 	db	110	;'n'
   627  006215  64                 	db	100	;'d'
   628  006216  6F                 	db	111	;'o'
   629  006217  00                 	db	0
   630  006218  25                 	db	37
   631  006219  64                 	db	100	;'d'
   632  00621A  3A                 	db	58	;':'
   633  00621B  25                 	db	37
   634  00621C  64                 	db	100	;'d'
   635  00621D  3A                 	db	58	;':'
   636  00621E  25                 	db	37
   637  00621F  64                 	db	100	;'d'
   638  006220  00                 	db	0
   639  006221                     STR_20:
   640  006221  41                 	db	65	;'A'
   641  006222  43                 	db	67	;'C'
   642  006223  4D                 	db	77	;'M'
   643  006224  44                 	db	68	;'D'
   644  006225  34                 	db	52	;'4'
   645  006226  31                 	db	49	;'1'
   646  006227  00                 	db	0
   647  006228                     STR_36:
   648  006228  46                 	db	70	;'F'
   649  006229  41                 	db	65	;'A'
   650  00622A  54                 	db	84	;'T'
   651  00622B  33                 	db	51	;'3'
   652  00622C  32                 	db	50	;'2'
   653  00622D  00                 	db	0
   654  00622E                     STR_24:
   655  00622E  43                 	db	67	;'C'
   656  00622F  4D                 	db	77	;'M'
   657  006230  44                 	db	68	;'D'
   658  006231  31                 	db	49	;'1'
   659  006232  38                 	db	56	;'8'
   660  006233  00                 	db	0
   661  006234                     STR_19:
   662  006234  63                 	db	99	;'c'
   663  006235  65                 	db	101	;'e'
   664  006236  72                 	db	114	;'r'
   665  006237  74                 	db	116	;'t'
   666  006238  6F                 	db	111	;'o'
   667  006239  00                 	db	0
   668  00623A  48                 	db	72	;'H'
   669  00623B  6F                 	db	111	;'o'
   670  00623C  72                 	db	114	;'r'
   671  00623D  61                 	db	97	;'a'
   672  00623E  3A                 	db	58	;':'
   673  00623F  00                 	db	0
   674  006240  44                 	db	68	;'D'
   675  006241  61                 	db	97	;'a'
   676  006242  74                 	db	116	;'t'
   677  006243  61                 	db	97	;'a'
   678  006244  3A                 	db	58	;':'
   679  006245  00                 	db	0
   680  006246                     STR_3:
   681  006246  25                 	db	37
   682  006247  2E                 	db	46
   683  006248  30                 	db	48	;'0'
   684  006249  37                 	db	55	;'7'
   685  00624A  66                 	db	102	;'f'
   686  00624B  00                 	db	0
   687  00624C                     STR_33:
   688  00624C  55                 	db	85	;'U'
   689  00624D  53                 	db	83	;'S'
   690  00624E  42                 	db	66	;'B'
   691  00624F  32                 	db	50	;'2'
   692  006250  00                 	db	0
   693  006251                     STR_34:
   694  006251  55                 	db	85	;'U'
   695  006252  53                 	db	83	;'S'
   696  006253  42                 	db	66	;'B'
   697  006254  33                 	db	51	;'3'
   698  006255  00                 	db	0
   699  006256                     STR_28:
   700  006256  4E                 	db	78	;'N'
   701  006257  41                 	db	65	;'A'
   702  006258  4E                 	db	78	;'N'
   703  006259  44                 	db	68	;'D'
   704  00625A  00                 	db	0
   705  00625B  4C                 	db	76	;'L'
   706  00625C  6F                 	db	111	;'o'
   707  00625D  6E                 	db	110	;'n'
   708  00625E  3A                 	db	58	;':'
   709  00625F  00                 	db	0
   710  006260                     STR_31:
   711  006260  53                 	db	83	;'S'
   712  006261  44                 	db	68	;'D'
   713  006262  32                 	db	50	;'2'
   714  006263  00                 	db	0
   715  006264                     STR_32:
   716  006264  55                 	db	85	;'U'
   717  006265  53                 	db	83	;'S'
   718  006266  42                 	db	66	;'B'
   719  006267  00                 	db	0
   720  006268                     STR_27:
   721  006268  52                 	db	82	;'R'
   722  006269  41                 	db	65	;'A'
   723  00626A  4D                 	db	77	;'M'
   724  00626B  00                 	db	0
   725  00626C                     STR_35:
   726  00626C  46                 	db	70	;'F'
   727  00626D  41                 	db	65	;'A'
   728  00626E  54                 	db	84	;'T'
   729  00626F  00                 	db	0
   730  006270                     STR_29:
   731  006270  43                 	db	67	;'C'
   732  006271  46                 	db	70	;'F'
   733  006272  00                 	db	0
   734  006273                     STR_25:
   735  006273  4F                 	db	79	;'O'
   736  006274  4B                 	db	75	;'K'
   737  006275  00                 	db	0
   738  006276  0D                 	db	13
   739  006277  0A                 	db	10
   740  006278  00                 	db	0
   741  006279                     STR_10:
   742  006279  53                 	db	83	;'S'
   743  00627A  44                 	db	68	;'D'
   744  00627B  00                 	db	0
   745  00627C                     STR_6:
   746  00627C  7C                 	db	124
   747  00627D  00                 	db	0
   748  0000                     
   749                           ; #config settings
   750  00627E  00                 	db	0	; dummy byte at the end
   751  0000                     
   752                           	psect	cinit
   753  00528C                     __pcinit:
   754                           	opt stack 0
   755  00528C                     start_initialization:
   756                           	opt stack 0
   757  00528C                     __initialization:
   758                           	opt stack 0
   759                           
   760                           ; Initialize objects allocated to BANK1 (29 bytes)
   761                           ; load TBLPTR registers with __pidataBANK1
   762  00528C  0EC2               	movlw	low __pidataBANK1
   763  00528E  6EF6               	movwf	tblptrl,c
   764  005290  0E5A               	movlw	high __pidataBANK1
   765  005292  6EF7               	movwf	tblptrh,c
   766  005294  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   767  005296  6EF8               	movwf	tblptru,c
   768  005298  EE01  F0C9         	lfsr	0,__pdataBANK1
   769  00529C  EE10 F01D          	lfsr	1,29
   770  0052A0                     copy_data0:
   771  0052A0  0009               	tblrd		*+
   772  0052A2  CFF5 FFEE          	movff	tablat,postinc0
   773  0052A6  50E5               	movf	postdec1,w,c
   774  0052A8  50E1               	movf	fsr1l,w,c
   775  0052AA  E1FA               	bnz	copy_data0
   776                           
   777                           ; Clear objects allocated to BIGRAM (1071 bytes)
   778  0052AC  EE03  F025         	lfsr	0,__pbssBIGRAM
   779  0052B0  EE14 F02F          	lfsr	1,1071
   780  0052B4                     clear_0:
   781  0052B4  6AEE               	clrf	postinc0,c
   782  0052B6  50E5               	movf	postdec1,w,c
   783  0052B8  50E1               	movf	fsr1l,w,c
   784  0052BA  E1FC               	bnz	clear_0
   785  0052BC  50E2               	movf	fsr1h,w,c
   786  0052BE  E1FA               	bnz	clear_0
   787                           
   788                           ; Clear objects allocated to BANK2 (250 bytes)
   789  0052C0  EE02  F000         	lfsr	0,__pbssBANK2
   790  0052C4  0EFA               	movlw	250
   791  0052C6                     clear_1:
   792  0052C6  6AEE               	clrf	postinc0,c
   793  0052C8  06E8               	decf	wreg,f,c
   794  0052CA  E1FD               	bnz	clear_1
   795                           
   796                           ; Clear objects allocated to BANK1 (108 bytes)
   797  0052CC  EE01  F000         	lfsr	0,__pbssBANK1
   798  0052D0  0E6C               	movlw	108
   799  0052D2                     clear_2:
   800  0052D2  6AEE               	clrf	postinc0,c
   801  0052D4  06E8               	decf	wreg,f,c
   802  0052D6  E1FD               	bnz	clear_2
   803                           
   804                           ; Clear objects allocated to BANK0 (8 bytes)
   805  0052D8  EE00  F0F8         	lfsr	0,__pbssBANK0
   806  0052DC  0E08               	movlw	8
   807  0052DE                     clear_3:
   808  0052DE  6AEE               	clrf	postinc0,c
   809  0052E0  06E8               	decf	wreg,f,c
   810  0052E2  E1FD               	bnz	clear_3
   811                           
   812                           ; Clear objects allocated to COMRAM (24 bytes)
   813  0052E4  EE00  F02E         	lfsr	0,__pbssCOMRAM
   814  0052E8  0E18               	movlw	24
   815  0052EA                     clear_4:
   816  0052EA  6AEE               	clrf	postinc0,c
   817  0052EC  06E8               	decf	wreg,f,c
   818  0052EE  E1FD               	bnz	clear_4
   819  0052F0                     end_of_initialization:
   820                           	opt stack 0
   821  0052F0                     __end_of__initialization:
   822                           	opt stack 0
   823  0052F0  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   824  0052F2  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   825  0052F4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   826  0052F6  6EF8               	movwf	tblptru,c
   827  0052F8  0100               	movlb	0
   828  0052FA  EFFF  F02C         	goto	_main	;jump to C main() function
   829                           tblptru	equ	0xFF8
   830                           tblptrh	equ	0xFF7
   831                           tblptrl	equ	0xFF6
   832                           tablat	equ	0xFF5
   833                           postinc0	equ	0xFEE
   834                           wreg	equ	0xFE8
   835                           postdec1	equ	0xFE5
   836                           fsr1h	equ	0xFE2
   837                           fsr1l	equ	0xFE1
   838                           
   839                           	psect	bssCOMRAM
   840  00002E                     __pbssCOMRAM:
   841                           	opt stack 0
   842  00002E                     _rmc_code:
   843                           	opt stack 0
   844  00002E                     	ds	3
   845  000031                     _gga_code:
   846                           	opt stack 0
   847  000031                     	ds	3
   848  000034                     _rmc_index:
   849                           	opt stack 0
   850  000034                     	ds	2
   851  000036                     _gga_index:
   852                           	opt stack 0
   853  000036                     	ds	2
   854  000038                     timer_dois@flag:
   855                           	opt stack 0
   856  000038                     	ds	1
   857  000039                     _estado:
   858                           	opt stack 0
   859  000039                     	ds	1
   860  00003A                     _dado:
   861                           	opt stack 0
   862  00003A                     	ds	1
   863  00003B                     _s:
   864                           	opt stack 0
   865  00003B                     	ds	1
   866  00003C                     _Result:
   867                           	opt stack 0
   868  00003C                     	ds	1
   869  00003D                     _is_it_rmc_string:
   870                           	opt stack 0
   871  00003D                     	ds	1
   872  00003E                     _is_it_gga_string:
   873                           	opt stack 0
   874  00003E                     	ds	1
   875  00003F                     _comma_counter_rmc:
   876                           	opt stack 0
   877  00003F                     	ds	1
   878  000040                     _comma_counter_gga:
   879                           	opt stack 0
   880  000040                     	ds	1
   881  000041                     _E_W:
   882                           	opt stack 0
   883  000041                     	ds	1
   884  000042                     _n_s:
   885                           	opt stack 0
   886  000042                     	ds	1
   887  000043                     _tarefa_em_execucao:
   888                           	opt stack 0
   889  000043                     	ds	1
   890  000044                     _sinaliza_int_timer:
   891                           	opt stack 0
   892  000044                     	ds	1
   893  000045                     _data_uart_recebe:
   894                           	opt stack 0
   895  000045                     	ds	1
   896                           tblptru	equ	0xFF8
   897                           tblptrh	equ	0xFF7
   898                           tblptrl	equ	0xFF6
   899                           tablat	equ	0xFF5
   900                           postinc0	equ	0xFEE
   901                           wreg	equ	0xFE8
   902                           postdec1	equ	0xFE5
   903                           fsr1h	equ	0xFE2
   904                           fsr1l	equ	0xFE1
   905                           
   906                           	psect	bssBANK0
   907  0000F8                     __pbssBANK0:
   908                           	opt stack 0
   909  0000F8                     _tempo_tarefa:
   910                           	opt stack 0
   911  0000F8                     	ds	4
   912  0000FC                     _FatFs:
   913                           	opt stack 0
   914  0000FC                     	ds	2
   915  0000FE                     _timeout_tarefa:
   916                           	opt stack 0
   917  0000FE                     	ds	2
   918                           tblptru	equ	0xFF8
   919                           tblptrh	equ	0xFF7
   920                           tblptrl	equ	0xFF6
   921                           tablat	equ	0xFF5
   922                           postinc0	equ	0xFEE
   923                           wreg	equ	0xFE8
   924                           postdec1	equ	0xFE5
   925                           fsr1h	equ	0xFE2
   926                           fsr1l	equ	0xFE1
   927                           
   928                           	psect	bssBANK1
   929  000100                     __pbssBANK1:
   930                           	opt stack 0
   931  000100                     _txt:
   932                           	opt stack 0
   933  000100                     	ds	20
   934  000114                     _gga_pointers:
   935                           	opt stack 0
   936  000114                     	ds	20
   937  000128                     _rmc_pointers:
   938                           	opt stack 0
   939  000128                     	ds	12
   940  000134                     _f_time:
   941                           	opt stack 0
   942  000134                     	ds	9
   943  00013D                     _info_chaves:
   944                           	opt stack 0
   945  00013D                     	ds	7
   946  000144                     _fileSize:
   947                           	opt stack 0
   948  000144                     	ds	4
   949  000148                     _tempo_backup:
   950                           	opt stack 0
   951  000148                     	ds	4
   952  00014C                     _p_tarefas:
   953                           	opt stack 0
   954  00014C                     	ds	4
   955  000150                     _Fsid:
   956                           	opt stack 0
   957  000150                     	ds	2
   958  000152                     _data_buff:
   959                           	opt stack 0
   960  000152                     	ds	2
   961  000154                     _rd:
   962                           	opt stack 0
   963  000154                     	ds	2
   964  000156                     _data_buffer:
   965                           	opt stack 0
   966  000156                     	ds	15
   967  000165                     _dado_buffer:
   968                           	opt stack 0
   969  000165                     	ds	7
   970                           tblptru	equ	0xFF8
   971                           tblptrh	equ	0xFF7
   972                           tblptrl	equ	0xFF6
   973                           tablat	equ	0xFF5
   974                           postinc0	equ	0xFEE
   975                           wreg	equ	0xFE8
   976                           postdec1	equ	0xFE5
   977                           fsr1h	equ	0xFE2
   978                           fsr1l	equ	0xFE1
   979                           
   980                           	psect	dataBANK1
   981  0001C9                     __pdataBANK1:
   982                           	opt stack 0
   983  0001C9                     _fileName:
   984                           	opt stack 0
   985  0001C9                     	ds	15
   986  0001D8                     escreve_inteiro_uart@F3956:
   987                           	opt stack 0
   988  0001D8                     	ds	7
   989  0001DF                     escreve_inteiro_lcd@F3966:
   990                           	opt stack 0
   991  0001DF                     	ds	7
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           postinc0	equ	0xFEE
   997                           wreg	equ	0xFE8
   998                           postdec1	equ	0xFE5
   999                           fsr1h	equ	0xFE2
  1000                           fsr1l	equ	0xFE1
  1001                           
  1002                           	psect	bssBANK2
  1003  000200                     __pbssBANK2:
  1004                           	opt stack 0
  1005  000200                     _gga_buffer:
  1006                           	opt stack 0
  1007  000200                     	ds	80
  1008  000250                     _rmc_buffer:
  1009                           	opt stack 0
  1010  000250                     	ds	70
  1011  000296                     _folder:
  1012                           	opt stack 0
  1013  000296                     	ds	48
  1014  0002C6                     _data_buffer_32:
  1015                           	opt stack 0
  1016  0002C6                     	ds	32
  1017  0002E6                     _buff:
  1018                           	opt stack 0
  1019  0002E6                     	ds	20
  1020                           tblptru	equ	0xFF8
  1021                           tblptrh	equ	0xFF7
  1022                           tblptrl	equ	0xFF6
  1023                           tablat	equ	0xFF5
  1024                           postinc0	equ	0xFEE
  1025                           wreg	equ	0xFE8
  1026                           postdec1	equ	0xFE5
  1027                           fsr1h	equ	0xFE2
  1028                           fsr1l	equ	0xFE1
  1029                           
  1030                           	psect	bssBIGRAM
  1031  000325                     __pbssBIGRAM:
  1032                           	opt stack 0
  1033  000325                     _fs:
  1034                           	opt stack 0
  1035  000325                     	ds	559
  1036  000554                     sdc_disk_read@arr:
  1037                           	opt stack 0
  1038  000554                     	ds	512
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           postdec1	equ	0xFE5
  1046                           fsr1h	equ	0xFE2
  1047                           fsr1l	equ	0xFE1
  1048                           
  1049                           	psect	cstackBANK3
  1050  000300                     __pcstackBANK3:
  1051                           	opt stack 0
  1052  000300                     SDCard@br:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x0
  1056  000300                     	ds	2
  1057  000302                     SDCard@FResult:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x2
  1061  000302                     	ds	1
  1062  000303                     SDCard@fil:
  1063                           	opt stack 0
  1064                           
  1065                           ; 34 bytes @ 0x3
  1066  000303                     	ds	34
  1067                           tblptru	equ	0xFF8
  1068                           tblptrh	equ	0xFF7
  1069                           tblptrl	equ	0xFF6
  1070                           tablat	equ	0xFF5
  1071                           postinc0	equ	0xFEE
  1072                           wreg	equ	0xFE8
  1073                           postdec1	equ	0xFE5
  1074                           fsr1h	equ	0xFE2
  1075                           fsr1l	equ	0xFE1
  1076                           
  1077                           	psect	cstackBANK1
  1078  00016C                     __pcstackBANK1:
  1079                           	opt stack 0
  1080  00016C                     ??_follow_path:
  1081  00016C                     dir_register@fs:
  1082                           	opt stack 0
  1083  00016C                     _f_write$3353:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x0
  1087  00016C                     	ds	2
  1088  00016E                     dir_register@res:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x2
  1092  00016E                     	ds	2
  1093  000170                     f_write@res:
  1094                           	opt stack 0
  1095  000170                     follow_path@fs:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x4
  1099  000170                     	ds	1
  1100  000171                     f_write@wbuff:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x5
  1104  000171                     	ds	1
  1105  000172                     follow_path@ns:
  1106                           	opt stack 0
  1107                           
  1108                           ; 1 bytes @ 0x6
  1109  000172                     	ds	1
  1110  000173                     follow_path@res:
  1111                           	opt stack 0
  1112  000173                     f_write@csect:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x7
  1116  000173                     	ds	1
  1117  000174                     f_open@fp:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x8
  1121  000174                     	ds	1
  1122  000175                     f_write@cc:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x9
  1126  000175                     	ds	1
  1127  000176                     f_open@path:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0xA
  1131  000176                     	ds	1
  1132  000177                     f_write@sect:
  1133                           	opt stack 0
  1134                           
  1135                           ; 4 bytes @ 0xB
  1136  000177                     	ds	1
  1137  000178                     f_open@mode:
  1138                           	opt stack 0
  1139                           
  1140                           ; 1 bytes @ 0xC
  1141  000178                     	ds	1
  1142  000179                     ??_f_open:
  1143                           
  1144                           ; 1 bytes @ 0xD
  1145  000179                     	ds	2
  1146  00017B                     f_write@clst:
  1147                           	opt stack 0
  1148                           
  1149                           ; 4 bytes @ 0xF
  1150  00017B                     	ds	4
  1151  00017F                     f_write@wcnt:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x13
  1155  00017F                     	ds	2
  1156  000181                     f_write@fs:
  1157                           	opt stack 0
  1158  000181                     f_open@dw:
  1159                           	opt stack 0
  1160                           
  1161                           ; 4 bytes @ 0x15
  1162  000181                     	ds	4
  1163  000185                     f_open@sc:
  1164                           	opt stack 0
  1165                           
  1166                           ; 4 bytes @ 0x19
  1167  000185                     	ds	4
  1168  000189                     _f_open$3187:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x1D
  1172  000189                     	ds	2
  1173  00018B                     f_open@bcs:
  1174                           	opt stack 0
  1175                           
  1176                           ; 4 bytes @ 0x1F
  1177  00018B                     	ds	4
  1178  00018F                     f_open@cl:
  1179                           	opt stack 0
  1180                           
  1181                           ; 4 bytes @ 0x23
  1182  00018F                     	ds	4
  1183  000193                     f_open@ofs:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x27
  1187  000193                     	ds	4
  1188  000197                     f_open@clst:
  1189                           	opt stack 0
  1190                           
  1191                           ; 4 bytes @ 0x2B
  1192  000197                     	ds	4
  1193  00019B                     f_open@fs:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x2F
  1197  00019B                     	ds	2
  1198  00019D                     f_open@res:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x31
  1202  00019D                     	ds	1
  1203  00019E                     f_open@dj:
  1204                           	opt stack 0
  1205                           
  1206                           ; 40 bytes @ 0x32
  1207  00019E                     	ds	40
  1208  0001C6                     
  1209                           ; 1 bytes @ 0x5A
  1210  0001C6                     	ds	2
  1211  0001C8                     escalonador@cont:
  1212                           	opt stack 0
  1213                           
  1214                           ; 1 bytes @ 0x5C
  1215  0001C8                     	ds	1
  1216                           tblptru	equ	0xFF8
  1217                           tblptrh	equ	0xFF7
  1218                           tblptrl	equ	0xFF6
  1219                           tablat	equ	0xFF5
  1220                           postinc0	equ	0xFEE
  1221                           wreg	equ	0xFE8
  1222                           postdec1	equ	0xFE5
  1223                           fsr1h	equ	0xFE2
  1224                           fsr1l	equ	0xFE1
  1225                           
  1226                           	psect	cstackBANK0
  1227  000060                     __pcstackBANK0:
  1228                           	opt stack 0
  1229  000060                     ??_clst2sect:
  1230  000060                     ??_get_fattime:
  1231  000060                     sdc_disk_read@ptr:
  1232                           	opt stack 0
  1233  000060                     sdc_disk_write@i:
  1234                           	opt stack 0
  1235  000060                     _create_name$2900:
  1236                           	opt stack 0
  1237  000060                     itoa@buf:
  1238                           	opt stack 0
  1239  000060                     mensagem_inicial@msg_linha_um:
  1240                           	opt stack 0
  1241                           
  1242                           ; 17 bytes @ 0x0
  1243  000060                     	ds	1
  1244  000061                     sdc_disk_read@start_add:
  1245                           	opt stack 0
  1246                           
  1247                           ; 4 bytes @ 0x1
  1248  000061                     	ds	1
  1249  000062                     create_name@d:
  1250                           	opt stack 0
  1251  000062                     sdc_disk_write@count1:
  1252                           	opt stack 0
  1253  000062                     itoa@val:
  1254                           	opt stack 0
  1255                           
  1256                           ; 2 bytes @ 0x2
  1257  000062                     	ds	1
  1258  000063                     create_name@ni:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x3
  1262  000063                     	ds	1
  1263  000064                     sdc_disk_write@res:
  1264                           	opt stack 0
  1265  000064                     itoa@base:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x4
  1269  000064                     	ds	1
  1270  000065                     sdc_disk_read@res:
  1271                           	opt stack 0
  1272  000065                     sdc_disk_write@j:
  1273                           	opt stack 0
  1274  000065                     create_name@p:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x5
  1278  000065                     	ds	1
  1279  000066                     sdc_disk_read@buff:
  1280                           	opt stack 0
  1281  000066                     escreve_inteiro_lcd@texto:
  1282                           	opt stack 0
  1283                           
  1284                           ; 7 bytes @ 0x6
  1285  000066                     	ds	1
  1286  000067                     sdc_disk_write@buff:
  1287                           	opt stack 0
  1288  000067                     sdc_disk_read@length:
  1289                           	opt stack 0
  1290  000067                     create_name@si:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x7
  1294  000067                     	ds	1
  1295  000068                     disk_write@buff:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x8
  1299  000068                     	ds	1
  1300  000069                     create_name@sfn:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x9
  1304  000069                     	ds	1
  1305  00006A                     disk_write@sector:
  1306                           	opt stack 0
  1307                           
  1308                           ; 4 bytes @ 0xA
  1309  00006A                     	ds	1
  1310  00006B                     create_name@i:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0xB
  1314  00006B                     	ds	2
  1315  00006D                     create_name@c:
  1316                           	opt stack 0
  1317  00006D                     disk_read@buff:
  1318                           	opt stack 0
  1319  00006D                     sdc_reset@i:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0xD
  1323  00006D                     	ds	1
  1324  00006E                     disk_write@count:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0xE
  1328  00006E                     	ds	1
  1329  00006F                     disk_write@pdrv:
  1330                           	opt stack 0
  1331  00006F                     sdc_reset@count_nosd:
  1332                           	opt stack 0
  1333  00006F                     disk_read@sector:
  1334                           	opt stack 0
  1335                           
  1336                           ; 4 bytes @ 0xF
  1337  00006F                     	ds	1
  1338  000070                     disk_write@result:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x10
  1342  000070                     	ds	1
  1343  000071                     sdc_reset@count:
  1344                           	opt stack 0
  1345  000071                     mensagem_inicial@msg_dois:
  1346                           	opt stack 0
  1347                           
  1348                           ; 17 bytes @ 0x11
  1349  000071                     	ds	1
  1350  000072                     disk_write@res:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x12
  1354  000072                     	ds	1
  1355  000073                     disk_read@count:
  1356                           	opt stack 0
  1357  000073                     sdc_reset@buff:
  1358                           	opt stack 0
  1359  000073                     sync_window@fs:
  1360                           	opt stack 0
  1361                           
  1362                           ; 2 bytes @ 0x13
  1363  000073                     	ds	1
  1364  000074                     ??_sdc_disk_initialize:
  1365  000074                     ??_disk_read:
  1366                           
  1367                           ; 1 bytes @ 0x14
  1368  000074                     	ds	1
  1369  000075                     ??_sync_window:
  1370                           
  1371                           ; 1 bytes @ 0x15
  1372  000075                     	ds	1
  1373  000076                     disk_read@pdrv:
  1374                           	opt stack 0
  1375  000076                     sdc_disk_initialize@i:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x16
  1379  000076                     	ds	1
  1380  000077                     disk_read@result:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x17
  1384  000077                     	ds	1
  1385  000078                     sdc_disk_initialize@stat:
  1386                           	opt stack 0
  1387                           
  1388                           ; 1 bytes @ 0x18
  1389  000078                     	ds	1
  1390  000079                     disk_read@res:
  1391                           	opt stack 0
  1392  000079                     sdc_disk_initialize@count1:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x19
  1396  000079                     	ds	2
  1397  00007B                     sdc_disk_initialize@crc_number:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x1B
  1401  00007B                     	ds	2
  1402  00007D                     sdc_disk_initialize@buff_i:
  1403                           	opt stack 0
  1404                           
  1405                           ; 1 bytes @ 0x1D
  1406  00007D                     	ds	1
  1407  00007E                     sdc_disk_initialize@ocr:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x1E
  1411  00007E                     	ds	1
  1412  00007F                     sdc_disk_initialize@count2:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x1F
  1416  00007F                     	ds	2
  1417  000081                     sdc_disk_initialize@buff:
  1418                           	opt stack 0
  1419                           
  1420                           ; 1 bytes @ 0x21
  1421  000081                     	ds	1
  1422  000082                     disk_initialize@pdrv:
  1423                           	opt stack 0
  1424                           
  1425                           ; 1 bytes @ 0x22
  1426  000082                     	ds	1
  1427  000083                     disk_initialize@stat:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x23
  1431  000083                     	ds	2
  1432  000085                     move_window@fs:
  1433                           	opt stack 0
  1434  000085                     dir_clear@fs:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x25
  1438  000085                     	ds	1
  1439  000086                     st_dword@ptr:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x26
  1443  000086                     	ds	1
  1444  000087                     move_window@sector:
  1445                           	opt stack 0
  1446  000087                     dir_clear@clst:
  1447                           	opt stack 0
  1448                           
  1449                           ; 4 bytes @ 0x27
  1450  000087                     	ds	1
  1451  000088                     st_dword@val:
  1452                           	opt stack 0
  1453                           
  1454                           ; 4 bytes @ 0x28
  1455  000088                     	ds	3
  1456  00008B                     
  1457                           ; 1 bytes @ 0x2B
  1458  00008B                     	ds	1
  1459  00008C                     sync_fs@fs:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x2C
  1463  00008C                     	ds	1
  1464  00008D                     dir_clear@ibuf:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x2D
  1468  00008D                     	ds	1
  1469  00008E                     ??_sync_fs:
  1470                           
  1471                           ; 1 bytes @ 0x2E
  1472  00008E                     	ds	1
  1473  00008F                     move_window@res:
  1474                           	opt stack 0
  1475  00008F                     dir_clear@sect:
  1476                           	opt stack 0
  1477                           
  1478                           ; 4 bytes @ 0x2F
  1479  00008F                     	ds	1
  1480  000090                     ?_get_fat:
  1481                           	opt stack 0
  1482  000090                     get_fat@obj:
  1483                           	opt stack 0
  1484  000090                     put_fat@fs:
  1485                           	opt stack 0
  1486  000090                     check_fs@fs:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x30
  1490  000090                     	ds	2
  1491  000092                     get_fat@clst:
  1492                           	opt stack 0
  1493  000092                     put_fat@clst:
  1494                           	opt stack 0
  1495  000092                     check_fs@sect:
  1496                           	opt stack 0
  1497                           
  1498                           ; 4 bytes @ 0x32
  1499  000092                     	ds	1
  1500  000093                     dir_clear@szb:
  1501                           	opt stack 0
  1502                           
  1503                           ; 2 bytes @ 0x33
  1504  000093                     	ds	2
  1505  000095                     dir_clear@n:
  1506                           	opt stack 0
  1507                           
  1508                           ; 2 bytes @ 0x35
  1509  000095                     	ds	1
  1510  000096                     ??_get_fat:
  1511  000096                     sync_fs@res:
  1512                           	opt stack 0
  1513  000096                     put_fat@val:
  1514                           	opt stack 0
  1515                           
  1516                           ; 4 bytes @ 0x36
  1517  000096                     	ds	1
  1518  000097                     find_volume@path:
  1519                           	opt stack 0
  1520  000097                     f_sync@fp:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x37
  1524  000097                     	ds	2
  1525  000099                     find_volume@rfs:
  1526                           	opt stack 0
  1527  000099                     f_sync@tm:
  1528                           	opt stack 0
  1529                           
  1530                           ; 4 bytes @ 0x39
  1531  000099                     	ds	1
  1532  00009A                     ??_put_fat:
  1533                           
  1534                           ; 1 bytes @ 0x3A
  1535  00009A                     	ds	1
  1536  00009B                     find_volume@mode:
  1537                           	opt stack 0
  1538                           
  1539                           ; 1 bytes @ 0x3B
  1540  00009B                     	ds	1
  1541  00009C                     ??_find_volume:
  1542                           
  1543                           ; 1 bytes @ 0x3C
  1544  00009C                     	ds	1
  1545  00009D                     f_sync@res:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x3D
  1549  00009D                     	ds	1
  1550  00009E                     _get_fat$2428:
  1551                           	opt stack 0
  1552  00009E                     f_sync@fs:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x3E
  1556  00009E                     	ds	2
  1557  0000A0                     get_fat@wc:
  1558                           	opt stack 0
  1559  0000A0                     f_sync@dir:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x40
  1563  0000A0                     	ds	2
  1564  0000A2                     f_close@fp:
  1565                           	opt stack 0
  1566  0000A2                     get_fat@val:
  1567                           	opt stack 0
  1568                           
  1569                           ; 4 bytes @ 0x42
  1570  0000A2                     	ds	2
  1571  0000A4                     f_close@fs:
  1572                           	opt stack 0
  1573  0000A4                     find_volume@br:
  1574                           	opt stack 0
  1575                           
  1576                           ; 16 bytes @ 0x44
  1577  0000A4                     	ds	2
  1578  0000A6                     f_close@res:
  1579                           	opt stack 0
  1580  0000A6                     get_fat@bc:
  1581                           	opt stack 0
  1582  0000A6                     _put_fat$2456:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x46
  1586  0000A6                     	ds	2
  1587  0000A8                     get_fat@fs:
  1588                           	opt stack 0
  1589  0000A8                     _put_fat$2457:
  1590                           	opt stack 0
  1591                           
  1592                           ; 2 bytes @ 0x48
  1593  0000A8                     	ds	2
  1594  0000AA                     put_fat@p:
  1595                           	opt stack 0
  1596  0000AA                     dir_sdi@dp:
  1597                           	opt stack 0
  1598                           
  1599                           ; 2 bytes @ 0x4A
  1600  0000AA                     	ds	2
  1601  0000AC                     put_fat@bc:
  1602                           	opt stack 0
  1603  0000AC                     dir_sdi@ofs:
  1604                           	opt stack 0
  1605                           
  1606                           ; 4 bytes @ 0x4C
  1607  0000AC                     	ds	2
  1608  0000AE                     put_fat@res:
  1609                           	opt stack 0
  1610                           
  1611                           ; 1 bytes @ 0x4E
  1612  0000AE                     	ds	1
  1613  0000AF                     ?_create_chain:
  1614                           	opt stack 0
  1615  0000AF                     remove_chain@obj:
  1616                           	opt stack 0
  1617  0000AF                     create_chain@obj:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x4F
  1621  0000AF                     	ds	1
  1622  0000B0                     ??_dir_sdi:
  1623                           
  1624                           ; 1 bytes @ 0x50
  1625  0000B0                     	ds	1
  1626  0000B1                     remove_chain@clst:
  1627                           	opt stack 0
  1628  0000B1                     create_chain@clst:
  1629                           	opt stack 0
  1630                           
  1631                           ; 4 bytes @ 0x51
  1632  0000B1                     	ds	3
  1633  0000B4                     _find_volume$3041:
  1634                           	opt stack 0
  1635                           
  1636                           ; 4 bytes @ 0x54
  1637  0000B4                     	ds	1
  1638  0000B5                     ??_create_chain:
  1639  0000B5                     remove_chain@pclst:
  1640                           	opt stack 0
  1641                           
  1642                           ; 4 bytes @ 0x55
  1643  0000B5                     	ds	3
  1644  0000B8                     _find_volume$3042:
  1645                           	opt stack 0
  1646                           
  1647                           ; 2 bytes @ 0x58
  1648  0000B8                     	ds	1
  1649  0000B9                     ??_remove_chain:
  1650                           
  1651                           ; 1 bytes @ 0x59
  1652  0000B9                     	ds	1
  1653  0000BA                     _dir_sdi$2585:
  1654                           	opt stack 0
  1655  0000BA                     find_volume@szbfat:
  1656                           	opt stack 0
  1657                           
  1658                           ; 4 bytes @ 0x5A
  1659  0000BA                     	ds	3
  1660  0000BD                     create_chain@res:
  1661                           	opt stack 0
  1662                           
  1663                           ; 1 bytes @ 0x5D
  1664  0000BD                     	ds	1
  1665  0000BE                     find_volume@pt:
  1666                           	opt stack 0
  1667  0000BE                     create_chain@scl:
  1668                           	opt stack 0
  1669  0000BE                     dir_sdi@csz:
  1670                           	opt stack 0
  1671                           
  1672                           ; 4 bytes @ 0x5E
  1673  0000BE                     	ds	2
  1674  0000C0                     find_volume@sysect:
  1675                           	opt stack 0
  1676                           
  1677                           ; 4 bytes @ 0x60
  1678  0000C0                     	ds	1
  1679  0000C1                     remove_chain@nxt:
  1680                           	opt stack 0
  1681                           
  1682                           ; 4 bytes @ 0x61
  1683  0000C1                     	ds	1
  1684  0000C2                     create_chain@ncl:
  1685                           	opt stack 0
  1686  0000C2                     dir_sdi@clst:
  1687                           	opt stack 0
  1688                           
  1689                           ; 4 bytes @ 0x62
  1690  0000C2                     	ds	2
  1691  0000C4                     find_volume@vol:
  1692                           	opt stack 0
  1693                           
  1694                           ; 2 bytes @ 0x64
  1695  0000C4                     	ds	1
  1696  0000C5                     remove_chain@res:
  1697                           	opt stack 0
  1698                           
  1699                           ; 1 bytes @ 0x65
  1700  0000C5                     	ds	1
  1701  0000C6                     remove_chain@fs:
  1702                           	opt stack 0
  1703  0000C6                     create_chain@fs:
  1704                           	opt stack 0
  1705  0000C6                     dir_sdi@fs:
  1706                           	opt stack 0
  1707  0000C6                     find_volume@nrsv:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0x66
  1711  0000C6                     	ds	2
  1712  0000C8                     create_chain@cs:
  1713                           	opt stack 0
  1714  0000C8                     find_volume@tsect:
  1715                           	opt stack 0
  1716                           
  1717                           ; 4 bytes @ 0x68
  1718  0000C8                     	ds	4
  1719  0000CC                     find_volume@stat:
  1720                           	opt stack 0
  1721  0000CC                     dir_next@dp:
  1722                           	opt stack 0
  1723  0000CC                     f_write@fp:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x6C
  1727  0000CC                     	ds	1
  1728  0000CD                     find_volume@nclst:
  1729                           	opt stack 0
  1730                           
  1731                           ; 4 bytes @ 0x6D
  1732  0000CD                     	ds	1
  1733  0000CE                     dir_next@stretch:
  1734                           	opt stack 0
  1735  0000CE                     f_write@buff:
  1736                           	opt stack 0
  1737                           
  1738                           ; 2 bytes @ 0x6E
  1739  0000CE                     	ds	2
  1740  0000D0                     ??_dir_next:
  1741  0000D0                     f_write@btw:
  1742                           	opt stack 0
  1743                           
  1744                           ; 2 bytes @ 0x70
  1745  0000D0                     	ds	1
  1746  0000D1                     find_volume@fasize:
  1747                           	opt stack 0
  1748                           
  1749                           ; 4 bytes @ 0x71
  1750  0000D1                     	ds	1
  1751  0000D2                     f_write@bw:
  1752                           	opt stack 0
  1753                           
  1754                           ; 2 bytes @ 0x72
  1755  0000D2                     	ds	2
  1756  0000D4                     ??_f_write:
  1757                           
  1758                           ; 1 bytes @ 0x74
  1759  0000D4                     	ds	1
  1760  0000D5                     find_volume@bsect:
  1761                           	opt stack 0
  1762                           
  1763                           ; 4 bytes @ 0x75
  1764  0000D5                     	ds	4
  1765  0000D9                     find_volume@i:
  1766                           	opt stack 0
  1767                           
  1768                           ; 2 bytes @ 0x79
  1769  0000D9                     	ds	2
  1770  0000DB                     find_volume@fmt:
  1771                           	opt stack 0
  1772                           
  1773                           ; 1 bytes @ 0x7B
  1774  0000DB                     	ds	1
  1775  0000DC                     find_volume@fs:
  1776                           	opt stack 0
  1777  0000DC                     _dir_next$2622:
  1778                           	opt stack 0
  1779                           
  1780                           ; 4 bytes @ 0x7C
  1781  0000DC                     	ds	2
  1782  0000DE                     f_mount@fs:
  1783                           	opt stack 0
  1784                           
  1785                           ; 2 bytes @ 0x7E
  1786  0000DE                     	ds	2
  1787  0000E0                     f_mount@path:
  1788                           	opt stack 0
  1789  0000E0                     dir_next@ofs:
  1790                           	opt stack 0
  1791                           
  1792                           ; 4 bytes @ 0x80
  1793  0000E0                     	ds	2
  1794  0000E2                     f_mount@opt:
  1795                           	opt stack 0
  1796                           
  1797                           ; 1 bytes @ 0x82
  1798  0000E2                     	ds	1
  1799  0000E3                     f_mount@res:
  1800                           	opt stack 0
  1801                           
  1802                           ; 1 bytes @ 0x83
  1803  0000E3                     	ds	1
  1804  0000E4                     dir_next@fs:
  1805                           	opt stack 0
  1806  0000E4                     f_mount@cfs:
  1807                           	opt stack 0
  1808                           
  1809                           ; 2 bytes @ 0x84
  1810  0000E4                     	ds	2
  1811  0000E6                     f_mount@vol:
  1812                           	opt stack 0
  1813  0000E6                     dir_next@clst:
  1814                           	opt stack 0
  1815                           
  1816                           ; 4 bytes @ 0x86
  1817  0000E6                     	ds	2
  1818  0000E8                     f_mount@rp:
  1819                           	opt stack 0
  1820                           
  1821                           ; 2 bytes @ 0x88
  1822  0000E8                     	ds	2
  1823  0000EA                     dir_alloc@dp:
  1824                           	opt stack 0
  1825  0000EA                     dir_find@dp:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0x8A
  1829  0000EA                     	ds	2
  1830  0000EC                     ??_dir_find:
  1831  0000EC                     dir_alloc@nent:
  1832                           	opt stack 0
  1833                           
  1834                           ; 2 bytes @ 0x8C
  1835  0000EC                     	ds	2
  1836  0000EE                     ??_dir_alloc:
  1837  0000EE                     dir_find@fs:
  1838                           	opt stack 0
  1839                           
  1840                           ; 2 bytes @ 0x8E
  1841  0000EE                     	ds	2
  1842  0000F0                     dir_find@c:
  1843                           	opt stack 0
  1844                           
  1845                           ; 1 bytes @ 0x90
  1846  0000F0                     	ds	1
  1847  0000F1                     dir_find@res:
  1848                           	opt stack 0
  1849  0000F1                     dir_alloc@fs:
  1850                           	opt stack 0
  1851                           
  1852                           ; 2 bytes @ 0x91
  1853  0000F1                     	ds	1
  1854  0000F2                     follow_path@dp:
  1855                           	opt stack 0
  1856                           
  1857                           ; 2 bytes @ 0x92
  1858  0000F2                     	ds	1
  1859  0000F3                     dir_alloc@n:
  1860                           	opt stack 0
  1861                           
  1862                           ; 2 bytes @ 0x93
  1863  0000F3                     	ds	1
  1864  0000F4                     follow_path@path:
  1865                           	opt stack 0
  1866                           
  1867                           ; 2 bytes @ 0x94
  1868  0000F4                     	ds	1
  1869  0000F5                     dir_alloc@res:
  1870                           	opt stack 0
  1871                           
  1872                           ; 1 bytes @ 0x95
  1873  0000F5                     	ds	1
  1874  0000F6                     dir_register@dp:
  1875                           	opt stack 0
  1876                           
  1877                           ; 2 bytes @ 0x96
  1878  0000F6                     	ds	2
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1h	equ	0xFE2
  1887                           fsr1l	equ	0xFE1
  1888                           
  1889                           	psect	cstackCOMRAM
  1890  000001                     __pcstackCOMRAM:
  1891                           	opt stack 0
  1892  000001                     i2write_timer_zero@timer0:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x0
  1896  000001                     	ds	2
  1897  000003                     i2write_timer_zero@timer:
  1898                           	opt stack 0
  1899                           
  1900                           ; 2 bytes @ 0x2
  1901  000003                     	ds	2
  1902  000005                     ??_isr:
  1903                           
  1904                           ; 1 bytes @ 0x4
  1905  000005                     	ds	20
  1906  000019                     isr@cont:
  1907                           	opt stack 0
  1908                           
  1909                           ; 1 bytes @ 0x18
  1910  000019                     	ds	1
  1911  00001A                     ??_recebe_dado_SPI:
  1912  00001A                     ?_ld_word:
  1913                           	opt stack 0
  1914  00001A                     ?_mem_cmp:
  1915                           	opt stack 0
  1916  00001A                     ?_chk_chr:
  1917                           	opt stack 0
  1918  00001A                     ?_dbc_1st:
  1919                           	opt stack 0
  1920  00001A                     ?_dbc_2nd:
  1921                           	opt stack 0
  1922  00001A                     ?_get_ldnumber:
  1923                           	opt stack 0
  1924  00001A                     ?___lwdiv:
  1925                           	opt stack 0
  1926  00001A                     ?___lwmod:
  1927                           	opt stack 0
  1928  00001A                     ?_ld_dword:
  1929                           	opt stack 0
  1930  00001A                     ?_get_fattime:
  1931                           	opt stack 0
  1932  00001A                     ?___lmul:
  1933                           	opt stack 0
  1934  00001A                     ?___lldiv:
  1935                           	opt stack 0
  1936  00001A                     escreve_dado_SPI@contador:
  1937                           	opt stack 0
  1938  00001A                     delay@contador_ext:
  1939                           	opt stack 0
  1940  00001A                     disk_ioctl@cmd:
  1941                           	opt stack 0
  1942  00001A                     sdc_disk_status@stat:
  1943                           	opt stack 0
  1944  00001A                     write_timer_zero@timer0:
  1945                           	opt stack 0
  1946  00001A                     ld_word@ptr:
  1947                           	opt stack 0
  1948  00001A                     ld_dword@ptr:
  1949                           	opt stack 0
  1950  00001A                     st_word@ptr:
  1951                           	opt stack 0
  1952  00001A                     mem_cpy@dst:
  1953                           	opt stack 0
  1954  00001A                     mem_set@dst:
  1955                           	opt stack 0
  1956  00001A                     mem_cmp@dst:
  1957                           	opt stack 0
  1958  00001A                     chk_chr@str:
  1959                           	opt stack 0
  1960  00001A                     get_ldnumber@path:
  1961                           	opt stack 0
  1962  00001A                     ___lwdiv@dividend:
  1963                           	opt stack 0
  1964  00001A                     ___lwmod@dividend:
  1965                           	opt stack 0
  1966  00001A                     ___lmul@multiplier:
  1967                           	opt stack 0
  1968  00001A                     ___lldiv@dividend:
  1969                           	opt stack 0
  1970                           
  1971                           ; 4 bytes @ 0x19
  1972  00001A                     	ds	1
  1973  00001B                     escreve_dado_SPI@data_to_shrc:
  1974                           	opt stack 0
  1975  00001B                     delay@contador_int:
  1976                           	opt stack 0
  1977  00001B                     sdc_disk_status@pdrv:
  1978                           	opt stack 0
  1979  00001B                     disk_ioctl@buff:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0x1A
  1983  00001B                     	ds	1
  1984  00001C                     ??_dummy_clocks:
  1985  00001C                     ??_disk_status:
  1986  00001C                     ??_ld_word:
  1987  00001C                     ??_get_ldnumber:
  1988  00001C                     recebe_dado_SPI@contador:
  1989                           	opt stack 0
  1990  00001C                     escreve_cmd_lcd@comando:
  1991                           	opt stack 0
  1992  00001C                     endereco_cursor_lcd@endereco:
  1993                           	opt stack 0
  1994  00001C                     escreve_caractere_lcd@data:
  1995                           	opt stack 0
  1996  00001C                     dbc_1st@c:
  1997                           	opt stack 0
  1998  00001C                     dbc_2nd@c:
  1999                           	opt stack 0
  2000  00001C                     write_timer_zero@timer:
  2001                           	opt stack 0
  2002  00001C                     st_word@val:
  2003                           	opt stack 0
  2004  00001C                     mem_cpy@src:
  2005                           	opt stack 0
  2006  00001C                     mem_set@val:
  2007                           	opt stack 0
  2008  00001C                     mem_cmp@src:
  2009                           	opt stack 0
  2010  00001C                     chk_chr@chr:
  2011                           	opt stack 0
  2012  00001C                     ___lwdiv@divisor:
  2013                           	opt stack 0
  2014  00001C                     ___lwmod@divisor:
  2015                           	opt stack 0
  2016  00001C                     command@arg:
  2017                           	opt stack 0
  2018                           
  2019                           ; 4 bytes @ 0x1B
  2020  00001C                     	ds	1
  2021  00001D                     ??_init_lcd:
  2022  00001D                     response@buff:
  2023                           	opt stack 0
  2024  00001D                     posicao_cursor_lcd@coluna:
  2025                           	opt stack 0
  2026  00001D                     disk_ioctl@pdrv:
  2027                           	opt stack 0
  2028  00001D                     escreve_frase_ram_lcd@buffer:
  2029                           	opt stack 0
  2030  00001D                     disk_status@result:
  2031                           	opt stack 0
  2032                           
  2033                           ; 2 bytes @ 0x1C
  2034  00001D                     	ds	1
  2035  00001E                     ??_ld_dword:
  2036  00001E                     ??_chk_chr:
  2037  00001E                     dummy_clocks@n:
  2038                           	opt stack 0
  2039  00001E                     posicao_cursor_lcd@linha:
  2040                           	opt stack 0
  2041  00001E                     disk_ioctl@res:
  2042                           	opt stack 0
  2043  00001E                     ___lwdiv@counter:
  2044                           	opt stack 0
  2045  00001E                     ___lwmod@counter:
  2046                           	opt stack 0
  2047  00001E                     mem_cpy@cnt:
  2048                           	opt stack 0
  2049  00001E                     mem_set@cnt:
  2050                           	opt stack 0
  2051  00001E                     mem_cmp@cnt:
  2052                           	opt stack 0
  2053  00001E                     st_clust@fs:
  2054                           	opt stack 0
  2055  00001E                     get_ldnumber@sp:
  2056                           	opt stack 0
  2057  00001E                     ___lmul@multiplicand:
  2058                           	opt stack 0
  2059  00001E                     ___lldiv@divisor:
  2060                           	opt stack 0
  2061  00001E                     get_fattime@f_time:
  2062                           	opt stack 0
  2063                           
  2064                           ; 9 bytes @ 0x1D
  2065  00001E                     	ds	1
  2066  00001F                     posicao_cursor_lcd@endereco:
  2067                           	opt stack 0
  2068  00001F                     disk_status@pdrv:
  2069                           	opt stack 0
  2070  00001F                     dummy_clocks@i:
  2071                           	opt stack 0
  2072  00001F                     ld_word@rv:
  2073                           	opt stack 0
  2074  00001F                     ___lwdiv@quotient:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x1E
  2078  00001F                     	ds	1
  2079  000020                     ??_mensagem_inicial:
  2080  000020                     ??_mem_cmp:
  2081  000020                     command@CRC:
  2082                           	opt stack 0
  2083  000020                     disk_status@stat:
  2084                           	opt stack 0
  2085  000020                     mem_cpy@d:
  2086                           	opt stack 0
  2087  000020                     mem_set@d:
  2088                           	opt stack 0
  2089  000020                     st_clust@dir:
  2090                           	opt stack 0
  2091  000020                     _get_ldnumber$2959:
  2092                           	opt stack 0
  2093                           
  2094                           ; 2 bytes @ 0x1F
  2095  000020                     	ds	1
  2096  000021                     ?_ld_clust:
  2097                           	opt stack 0
  2098  000021                     command@CMD:
  2099                           	opt stack 0
  2100  000021                     ld_clust@fs:
  2101                           	opt stack 0
  2102  000021                     validate@obj:
  2103                           	opt stack 0
  2104  000021                     utoa@buf:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x20
  2108  000021                     	ds	1
  2109  000022                     command@argument:
  2110                           	opt stack 0
  2111  000022                     mem_cpy@s:
  2112                           	opt stack 0
  2113  000022                     create_name@dp:
  2114                           	opt stack 0
  2115  000022                     get_ldnumber@vol:
  2116                           	opt stack 0
  2117  000022                     st_clust@cl:
  2118                           	opt stack 0
  2119  000022                     ___lmul@product:
  2120                           	opt stack 0
  2121  000022                     ___lldiv@quotient:
  2122                           	opt stack 0
  2123                           
  2124                           ; 4 bytes @ 0x21
  2125  000022                     	ds	1
  2126  000023                     sdc_disk_read@p_buff:
  2127                           	opt stack 0
  2128  000023                     sdc_disk_write@p_buff:
  2129                           	opt stack 0
  2130  000023                     mem_cmp@d:
  2131                           	opt stack 0
  2132  000023                     ld_clust@dir:
  2133                           	opt stack 0
  2134  000023                     validate@rfs:
  2135                           	opt stack 0
  2136  000023                     utoa@val:
  2137                           	opt stack 0
  2138  000023                     ld_dword@rv:
  2139                           	opt stack 0
  2140                           
  2141                           ; 4 bytes @ 0x22
  2142  000023                     	ds	1
  2143  000024                     get_ldnumber@c:
  2144                           	opt stack 0
  2145  000024                     create_name@path:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x23
  2149  000024                     	ds	1
  2150  000025                     ??_ld_clust:
  2151  000025                     ??_validate:
  2152  000025                     get_ldnumber@tc:
  2153                           	opt stack 0
  2154  000025                     mem_cmp@s:
  2155                           	opt stack 0
  2156  000025                     utoa@base:
  2157                           	opt stack 0
  2158  000025                     sdc_disk_read@sector:
  2159                           	opt stack 0
  2160  000025                     sdc_disk_write@sector:
  2161                           	opt stack 0
  2162                           
  2163                           ; 4 bytes @ 0x24
  2164  000025                     	ds	1
  2165  000026                     ??_create_name:
  2166  000026                     ?_clst2sect:
  2167                           	opt stack 0
  2168  000026                     ___lldiv@counter:
  2169                           	opt stack 0
  2170  000026                     clst2sect@fs:
  2171                           	opt stack 0
  2172  000026                     get_ldnumber@tp:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x25
  2176  000026                     	ds	1
  2177  000027                     mem_cmp@r:
  2178                           	opt stack 0
  2179  000027                     utoa@v:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0x26
  2183  000027                     	ds	1
  2184  000028                     get_ldnumber@tt:
  2185                           	opt stack 0
  2186  000028                     clst2sect@clst:
  2187                           	opt stack 0
  2188                           
  2189                           ; 4 bytes @ 0x27
  2190  000028                     	ds	1
  2191  000029                     sdc_disk_read@count:
  2192                           	opt stack 0
  2193  000029                     sdc_disk_write@count:
  2194                           	opt stack 0
  2195  000029                     utoa@c:
  2196                           	opt stack 0
  2197  000029                     _validate$3072:
  2198                           	opt stack 0
  2199  000029                     ld_clust@cl:
  2200                           	opt stack 0
  2201                           
  2202                           ; 4 bytes @ 0x28
  2203  000029                     	ds	1
  2204  00002A                     ??_sdc_disk_read:
  2205  00002A                     ??_sdc_disk_write:
  2206  00002A                     get_ldnumber@i:
  2207                           	opt stack 0
  2208  00002A                     itoa@cp:
  2209                           	opt stack 0
  2210                           
  2211                           ; 2 bytes @ 0x29
  2212  00002A                     	ds	1
  2213  00002B                     validate@res:
  2214                           	opt stack 0
  2215                           
  2216                           ; 1 bytes @ 0x2A
  2217  00002B                     	ds	1
  2218  00002C                     ??_disk_write:
  2219  00002C                     escreve_inteiro_lcd@valor:
  2220                           	opt stack 0
  2221                           
  2222                           ; 2 bytes @ 0x2B
  2223  00002C                     	ds	1
  2224  00002D                     sync_window@res:
  2225                           	opt stack 0
  2226                           
  2227                           ; 1 bytes @ 0x2C
  2228  00002D                     	ds	1
  2229  00002E                     tblptru	equ	0xFF8
  2230                           tblptrh	equ	0xFF7
  2231                           tblptrl	equ	0xFF6
  2232                           tablat	equ	0xFF5
  2233                           postinc0	equ	0xFEE
  2234                           wreg	equ	0xFE8
  2235                           postdec1	equ	0xFE5
  2236                           fsr1h	equ	0xFE2
  2237                           fsr1l	equ	0xFE1
  2238                           
  2239                           ; 1 bytes @ 0x2D
  2240 ;;
  2241 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2242 ;;
  2243 ;; *************** function _main *****************
  2244 ;; Defined at:
  2245 ;;		line 207 in file "main.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;		None
  2248 ;; Auto vars:     Size  Location     Type
  2249 ;;		None
  2250 ;; Return value:  Size  Location     Type
  2251 ;;                  1    wreg      void 
  2252 ;; Registers used:
  2253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2254 ;; Tracked objects:
  2255 ;;		On entry : 0/0
  2256 ;;		On exit  : 0/0
  2257 ;;		Unchanged: 0/0
  2258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2259 ;;      Params:         0       0       0       0       0       0       0       0       0
  2260 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2262 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2263 ;;Total ram usage:        0 bytes
  2264 ;; Hardware stack levels required when called:   17
  2265 ;; This function calls:
  2266 ;;		_escalonador
  2267 ;;		_inicializa_shrc
  2268 ;;		_inicializa_tarefas
  2269 ;;		_init_hardware
  2270 ;;		_init_lcd
  2271 ;;		_mensagem_inicial
  2272 ;; This function is called by:
  2273 ;;		Startup code after reset
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text0
  2278  0059FE                     __ptext0:
  2279                           	opt stack 0
  2280  0059FE                     _main:
  2281                           	opt stack 14
  2282                           
  2283                           ;main.c: 209: init_hardware();
  2284                           
  2285                           ;incstack = 0
  2286  0059FE  EC89  F02D         	call	_init_hardware	;wreg free
  2287                           
  2288                           ;main.c: 211: init_lcd();
  2289  005A02  EC29  F027         	call	_init_lcd	;wreg free
  2290                           
  2291                           ;main.c: 212: inicializa_shrc();
  2292  005A06  ECCF  F02D         	call	_inicializa_shrc	;wreg free
  2293                           
  2294                           ;main.c: 214: mensagem_inicial();
  2295  005A0A  ECCE  F028         	call	_mensagem_inicial	;wreg free
  2296                           
  2297                           ;main.c: 215: inicializa_tarefas();;
  2298  005A0E  ECE6  F02C         	call	_inicializa_tarefas	;wreg free
  2299                           
  2300                           ;main.c: 217: ADCON1 = 0X0F;
  2301  005A12  0E0F               	movlw	15
  2302  005A14  6EC1               	movwf	4033,c	;volatile
  2303  005A16                     
  2304                           ;main.c: 219: {
  2305                           ;main.c: 221: if ((sinaliza_int_timer == 1) && (2))
  2306  005A16  0444               	decf	_sinaliza_int_timer,w,c
  2307  005A18  A4D8               	btfss	status,2,c
  2308  005A1A  D7FD               	goto	l83
  2309                           
  2310                           ;main.c: 222: {
  2311                           ;main.c: 223: sinaliza_int_timer = 0;
  2312  005A1C  0E00               	movlw	0
  2313  005A1E  6E44               	movwf	_sinaliza_int_timer,c
  2314                           
  2315                           ;main.c: 224: escalonador();
  2316  005A20  EC83  F026         	call	_escalonador	;wreg free
  2317  005A24  D7F8               	goto	l83
  2318  005A26                     __end_of_main:
  2319                           	opt stack 0
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           postinc0	equ	0xFEE
  2325                           wreg	equ	0xFE8
  2326                           postdec1	equ	0xFE5
  2327                           fsr1h	equ	0xFE2
  2328                           fsr1l	equ	0xFE1
  2329                           status	equ	0xFD8
  2330                           
  2331 ;; *************** function _mensagem_inicial *****************
  2332 ;; Defined at:
  2333 ;;		line 237 in file "main.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;		None
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  2338 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      void 
  2341 ;; Registers used:
  2342 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2348 ;;      Params:         0       0       0       0       0       0       0       0       0
  2349 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2350 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2351 ;;      Totals:         2      34       0       0       0       0       0       0       0
  2352 ;;Total ram usage:       36 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    5
  2355 ;; This function calls:
  2356 ;;		_escreve_cmd_lcd
  2357 ;;		_escreve_frase_ram_lcd
  2358 ;;		_posicao_cursor_lcd
  2359 ;; This function is called by:
  2360 ;;		_main
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text1
  2365  00519C                     __ptext1:
  2366                           	opt stack 0
  2367  00519C                     _mensagem_inicial:
  2368                           	opt stack 25
  2369                           
  2370                           ;main.c: 239: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  2371                           
  2372                           ;incstack = 0
  2373  00519C  0E73               	movlw	low mensagem_inicial@F4169
  2374  00519E  6EF6               	movwf	tblptrl,c
  2375  0051A0                     	if	1	;There is more than 1 active tblptr byte
  2376  0051A0  0E61               	movlw	high mensagem_inicial@F4169
  2377  0051A2  6EF7               	movwf	tblptrh,c
  2378  0051A4                     	endif
  2379  0051A4                     	if	0	;There are less than 3 active tblptr bytes
  2380  0051A4                     	endif
  2381  0051A4  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  2382  0051A8  0E10               	movlw	16
  2383  0051AA                     u19330:
  2384  0051AA  0009               	tblrd		*+
  2385  0051AC  CFF5 FFDE          	movff	tablat,postinc2
  2386  0051B0  06E8               	decf	wreg,f,c
  2387  0051B2  E2FB               	bc	u19330
  2388                           
  2389                           ;main.c: 240: const unsigned char msg_dois[17] = " 18/01/2022   ";
  2390  0051B4  0E62               	movlw	low mensagem_inicial@F4171
  2391  0051B6  6EF6               	movwf	tblptrl,c
  2392  0051B8                     	if	1	;There is more than 1 active tblptr byte
  2393  0051B8  0E61               	movlw	high mensagem_inicial@F4171
  2394  0051BA  6EF7               	movwf	tblptrh,c
  2395  0051BC                     	endif
  2396  0051BC                     	if	0	;There are less than 3 active tblptr bytes
  2397  0051BC                     	endif
  2398  0051BC  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  2399  0051C0  0E10               	movlw	16
  2400  0051C2                     u19340:
  2401  0051C2  0009               	tblrd		*+
  2402  0051C4  CFF5 FFDE          	movff	tablat,postinc2
  2403  0051C8  06E8               	decf	wreg,f,c
  2404  0051CA  E2FB               	bc	u19340
  2405                           
  2406                           ;main.c: 242: posicao_cursor_lcd(1,0);
  2407  0051CC  0E00               	movlw	0
  2408  0051CE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  2409  0051D0  0E01               	movlw	1
  2410  0051D2  ECB8  F029         	call	_posicao_cursor_lcd
  2411                           
  2412                           ;main.c: 243: escreve_frase_ram_lcd(msg_linha_um);
  2413  0051D6  0E60               	movlw	low mensagem_inicial@msg_linha_um
  2414  0051D8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  2415  0051DA  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2416  0051DC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2417  0051DE  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  2418                           
  2419                           ;main.c: 245: posicao_cursor_lcd(2,0);
  2420  0051E2  0E00               	movlw	0
  2421  0051E4  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  2422  0051E6  0E02               	movlw	2
  2423  0051E8  ECB8  F029         	call	_posicao_cursor_lcd
  2424                           
  2425                           ;main.c: 246: escreve_frase_ram_lcd(msg_dois);
  2426  0051EC  0E71               	movlw	low mensagem_inicial@msg_dois
  2427  0051EE  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  2428  0051F0  0E00               	movlw	high mensagem_inicial@msg_dois
  2429  0051F2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2430  0051F4  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  2431                           
  2432                           ;main.c: 247: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2433  0051F8  0E3D               	movlw	61
  2434  0051FA  6E21               	movwf	(??_mensagem_inicial+1)& (0+255),c
  2435  0051FC  0EE1               	movlw	225
  2436  0051FE  6E20               	movwf	??_mensagem_inicial& (0+255),c
  2437  005200  0E40               	movlw	64
  2438  005202                     u21807:
  2439  005202  2EE8               	decfsz	wreg,f,c
  2440  005204  D7FE               	bra	u21807
  2441  005206  2E20               	decfsz	??_mensagem_inicial& (0+255),f,c
  2442  005208  D7FC               	bra	u21807
  2443  00520A  2E21               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  2444  00520C  D7FA               	bra	u21807
  2445                           
  2446                           ;main.c: 248: escreve_cmd_lcd(0b00000001);
  2447  00520E  0E01               	movlw	1
  2448  005210  ECC3  F027         	call	_escreve_cmd_lcd
  2449  005214  0012               	return		;funcret
  2450  005216                     __end_of_mensagem_inicial:
  2451                           	opt stack 0
  2452                           tblptru	equ	0xFF8
  2453                           tblptrh	equ	0xFF7
  2454                           tblptrl	equ	0xFF6
  2455                           tablat	equ	0xFF5
  2456                           postinc0	equ	0xFEE
  2457                           wreg	equ	0xFE8
  2458                           postdec1	equ	0xFE5
  2459                           fsr1h	equ	0xFE2
  2460                           fsr1l	equ	0xFE1
  2461                           postinc2	equ	0xFDE
  2462                           status	equ	0xFD8
  2463                           
  2464 ;; *************** function _init_lcd *****************
  2465 ;; Defined at:
  2466 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;		None
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;		None
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  1    wreg      void 
  2473 ;; Registers used:
  2474 ;;		wreg, status,2, status,0, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2480 ;;      Params:         0       0       0       0       0       0       0       0       0
  2481 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2482 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2483 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2484 ;;Total ram usage:        1 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    4
  2487 ;; This function calls:
  2488 ;;		_delay
  2489 ;;		_escreve_cmd_lcd
  2490 ;; This function is called by:
  2491 ;;		_main
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	text2
  2496  004E52                     __ptext2:
  2497                           	opt stack 0
  2498  004E52                     _init_lcd:
  2499                           	opt stack 26
  2500                           
  2501                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2502                           
  2503                           ;incstack = 0
  2504  004E52  9495               	bcf	3989,2,c	;volatile
  2505                           
  2506                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2507  004E54  9295               	bcf	3989,1,c	;volatile
  2508                           
  2509                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2510  004E56  9095               	bcf	3989,0,c	;volatile
  2511                           
  2512                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2513  004E58  9895               	bcf	3989,4,c	;volatile
  2514                           
  2515                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2516  004E5A  9A95               	bcf	3989,5,c	;volatile
  2517                           
  2518                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2519  004E5C  9C95               	bcf	3989,6,c	;volatile
  2520                           
  2521                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2522  004E5E  9E95               	bcf	3989,7,c	;volatile
  2523                           
  2524                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2525  004E60  9483               	bcf	3971,2,c	;volatile
  2526                           
  2527                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2528  004E62  9283               	bcf	3971,1,c	;volatile
  2529                           
  2530                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2531  004E64  9083               	bcf	3971,0,c	;volatile
  2532                           
  2533                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2534  004E66  9E83               	bcf	3971,7,c	;volatile
  2535                           
  2536                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2537  004E68  9C83               	bcf	3971,6,c	;volatile
  2538                           
  2539                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2540  004E6A  8A83               	bsf	3971,5,c	;volatile
  2541                           
  2542                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2543  004E6C  8883               	bsf	3971,4,c	;volatile
  2544                           
  2545                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2546  004E6E  0EEA               	movlw	234
  2547  004E70  6E1D               	movwf	??_init_lcd& (0+255),c
  2548  004E72  0EC3               	movlw	195
  2549  004E74                     u21817:
  2550  004E74  2EE8               	decfsz	wreg,f,c
  2551  004E76  D7FE               	bra	u21817
  2552  004E78  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2553  004E7A  D7FC               	bra	u21817
  2554  004E7C  F000               	nop	
  2555                           
  2556                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2557  004E7E  8083               	bsf	3971,0,c	;volatile
  2558                           
  2559                           ;display_lcd.c: 108: delay();
  2560  004E80  EC4F  F02D         	call	_delay	;wreg free
  2561                           
  2562                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2563  004E84  9083               	bcf	3971,0,c	;volatile
  2564                           
  2565                           ;display_lcd.c: 110: delay();
  2566  004E86  EC4F  F02D         	call	_delay	;wreg free
  2567                           
  2568                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2569  004E8A  0E4E               	movlw	78
  2570  004E8C  6E1D               	movwf	??_init_lcd& (0+255),c
  2571  004E8E  0EEB               	movlw	235
  2572  004E90                     u21827:
  2573  004E90  2EE8               	decfsz	wreg,f,c
  2574  004E92  D7FE               	bra	u21827
  2575  004E94  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2576  004E96  D7FC               	bra	u21827
  2577  004E98  F000               	nop	
  2578                           
  2579                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2580  004E9A  8083               	bsf	3971,0,c	;volatile
  2581                           
  2582                           ;display_lcd.c: 119: delay();
  2583  004E9C  EC4F  F02D         	call	_delay	;wreg free
  2584                           
  2585                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2586  004EA0  9083               	bcf	3971,0,c	;volatile
  2587                           
  2588                           ;display_lcd.c: 121: delay();
  2589  004EA2  EC4F  F02D         	call	_delay	;wreg free
  2590                           
  2591                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2592  004EA6  0E4E               	movlw	78
  2593  004EA8  6E1D               	movwf	??_init_lcd& (0+255),c
  2594  004EAA  0EEB               	movlw	235
  2595  004EAC                     u21837:
  2596  004EAC  2EE8               	decfsz	wreg,f,c
  2597  004EAE  D7FE               	bra	u21837
  2598  004EB0  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2599  004EB2  D7FC               	bra	u21837
  2600  004EB4  F000               	nop	
  2601                           
  2602                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2603  004EB6  8083               	bsf	3971,0,c	;volatile
  2604                           
  2605                           ;display_lcd.c: 130: delay();
  2606  004EB8  EC4F  F02D         	call	_delay	;wreg free
  2607                           
  2608                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2609  004EBC  9083               	bcf	3971,0,c	;volatile
  2610                           
  2611                           ;display_lcd.c: 132: delay();
  2612  004EBE  EC4F  F02D         	call	_delay	;wreg free
  2613                           
  2614                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2615  004EC2  9E83               	bcf	3971,7,c	;volatile
  2616                           
  2617                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2618  004EC4  9C83               	bcf	3971,6,c	;volatile
  2619                           
  2620                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2621  004EC6  8A83               	bsf	3971,5,c	;volatile
  2622                           
  2623                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2624  004EC8  9883               	bcf	3971,4,c	;volatile
  2625                           
  2626                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2627  004ECA  8083               	bsf	3971,0,c	;volatile
  2628                           
  2629                           ;display_lcd.c: 143: delay();
  2630  004ECC  EC4F  F02D         	call	_delay	;wreg free
  2631                           
  2632                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2633  004ED0  9083               	bcf	3971,0,c	;volatile
  2634                           
  2635                           ;display_lcd.c: 145: delay();
  2636  004ED2  EC4F  F02D         	call	_delay	;wreg free
  2637                           
  2638                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2639  004ED6  0E28               	movlw	40
  2640  004ED8  ECC3  F027         	call	_escreve_cmd_lcd
  2641                           
  2642                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2643  004EDC  0E06               	movlw	6
  2644  004EDE  ECC3  F027         	call	_escreve_cmd_lcd
  2645                           
  2646                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2647  004EE2  0E0E               	movlw	14
  2648  004EE4  ECC3  F027         	call	_escreve_cmd_lcd
  2649                           
  2650                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2651  004EE8  0E01               	movlw	1
  2652  004EEA  ECC3  F027         	call	_escreve_cmd_lcd
  2653  004EEE  0012               	return		;funcret
  2654  004EF0                     __end_of_init_lcd:
  2655                           	opt stack 0
  2656                           tblptru	equ	0xFF8
  2657                           tblptrh	equ	0xFF7
  2658                           tblptrl	equ	0xFF6
  2659                           tablat	equ	0xFF5
  2660                           postinc0	equ	0xFEE
  2661                           wreg	equ	0xFE8
  2662                           postdec1	equ	0xFE5
  2663                           fsr1h	equ	0xFE2
  2664                           fsr1l	equ	0xFE1
  2665                           postinc2	equ	0xFDE
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function _init_hardware *****************
  2669 ;; Defined at:
  2670 ;;		line 55 in file "bibliotecas/hardware.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;		None
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;		None
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  1    wreg      void 
  2677 ;; Registers used:
  2678 ;;		wreg, status,2, cstack
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2684 ;;      Params:         0       0       0       0       0       0       0       0       0
  2685 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2686 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2687 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2688 ;;Total ram usage:        0 bytes
  2689 ;; Hardware stack levels used:    1
  2690 ;; Hardware stack levels required when called:    4
  2691 ;; This function calls:
  2692 ;;		_config_timer_dois
  2693 ;;		_config_timer_zero
  2694 ;;		_init_interrupt
  2695 ;;		_init_oscilador
  2696 ;;		_init_ports
  2697 ;; This function is called by:
  2698 ;;		_main
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           	psect	text3
  2703  005B12                     __ptext3:
  2704                           	opt stack 0
  2705  005B12                     _init_hardware:
  2706                           	opt stack 26
  2707                           
  2708                           ;hardware.c: 58: init_oscilador();
  2709                           
  2710                           ;incstack = 0
  2711  005B12  ECDB  F02D         	call	_init_oscilador	;wreg free
  2712                           
  2713                           ;hardware.c: 61: init_ports();
  2714  005B16  EC7D  F02D         	call	_init_ports	;wreg free
  2715                           
  2716                           ;hardware.c: 64: config_timer_zero();
  2717  005B1A  EC70  F02D         	call	_config_timer_zero	;wreg free
  2718                           
  2719                           ;hardware.c: 67: config_timer_dois();
  2720  005B1E  ECC9  F02D         	call	_config_timer_dois	;wreg free
  2721                           
  2722                           ;hardware.c: 70: init_interrupt();
  2723  005B22  EC9E  F02D         	call	_init_interrupt	;wreg free
  2724  005B26  0012               	return		;funcret
  2725  005B28                     __end_of_init_hardware:
  2726                           	opt stack 0
  2727                           tblptru	equ	0xFF8
  2728                           tblptrh	equ	0xFF7
  2729                           tblptrl	equ	0xFF6
  2730                           tablat	equ	0xFF5
  2731                           postinc0	equ	0xFEE
  2732                           wreg	equ	0xFE8
  2733                           postdec1	equ	0xFE5
  2734                           fsr1h	equ	0xFE2
  2735                           fsr1l	equ	0xFE1
  2736                           postinc2	equ	0xFDE
  2737                           status	equ	0xFD8
  2738                           
  2739 ;; *************** function _init_ports *****************
  2740 ;; Defined at:
  2741 ;;		line 154 in file "bibliotecas/hardware.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;		None
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;		None
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  1    wreg      void 
  2748 ;; Registers used:
  2749 ;;		wreg, status,2
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2755 ;;      Params:         0       0       0       0       0       0       0       0       0
  2756 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2757 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2758 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2759 ;;Total ram usage:        0 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; Hardware stack levels required when called:    2
  2762 ;; This function calls:
  2763 ;;		Nothing
  2764 ;; This function is called by:
  2765 ;;		_init_hardware
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           	psect	text4
  2770  005AFA                     __ptext4:
  2771                           	opt stack 0
  2772  005AFA                     _init_ports:
  2773                           	opt stack 27
  2774                           
  2775                           ;hardware.c: 156: TRISB = 0b00100001;
  2776                           
  2777                           ;incstack = 0
  2778  005AFA  0E21               	movlw	33
  2779  005AFC  6E93               	movwf	3987,c	;volatile
  2780                           
  2781                           ;hardware.c: 157: LATB = 0xFF;
  2782  005AFE  688A               	setf	3978,c	;volatile
  2783                           
  2784                           ;hardware.c: 158: TRISD = 0x00;
  2785  005B00  0E00               	movlw	0
  2786  005B02  6E95               	movwf	3989,c	;volatile
  2787                           
  2788                           ;hardware.c: 159: TRISA = 0b00000111;
  2789  005B04  0E07               	movlw	7
  2790  005B06  6E92               	movwf	3986,c	;volatile
  2791                           
  2792                           ;hardware.c: 160: TRISC = 0x01111111;
  2793  005B08  0E11               	movlw	17
  2794  005B0A  6E94               	movwf	3988,c	;volatile
  2795                           
  2796                           ;hardware.c: 161: TRISE = 0b00000011;
  2797  005B0C  0E03               	movlw	3
  2798  005B0E  6E96               	movwf	3990,c	;volatile
  2799  005B10  0012               	return		;funcret
  2800  005B12                     __end_of_init_ports:
  2801                           	opt stack 0
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           postinc0	equ	0xFEE
  2807                           wreg	equ	0xFE8
  2808                           postdec1	equ	0xFE5
  2809                           fsr1h	equ	0xFE2
  2810                           fsr1l	equ	0xFE1
  2811                           postinc2	equ	0xFDE
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function _init_oscilador *****************
  2815 ;; Defined at:
  2816 ;;		line 171 in file "bibliotecas/hardware.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;		None
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;		None
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		None
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2830 ;;      Params:         0       0       0       0       0       0       0       0       0
  2831 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2832 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2833 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2834 ;;Total ram usage:        0 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    2
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_init_hardware
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text5
  2845  005BB6                     __ptext5:
  2846                           	opt stack 0
  2847  005BB6                     _init_oscilador:
  2848                           	opt stack 27
  2849                           
  2850                           ;hardware.c: 174: OSCCONbits.IRCF0 = 1;
  2851                           
  2852                           ;incstack = 0
  2853  005BB6  88D3               	bsf	4051,4,c	;volatile
  2854                           
  2855                           ;hardware.c: 175: OSCCONbits.IRCF1 = 1;
  2856  005BB8  8AD3               	bsf	4051,5,c	;volatile
  2857                           
  2858                           ;hardware.c: 176: OSCCONbits.IRCF2 = 1;
  2859  005BBA  8CD3               	bsf	4051,6,c	;volatile
  2860  005BBC  0012               	return		;funcret
  2861  005BBE                     __end_of_init_oscilador:
  2862                           	opt stack 0
  2863                           tblptru	equ	0xFF8
  2864                           tblptrh	equ	0xFF7
  2865                           tblptrl	equ	0xFF6
  2866                           tablat	equ	0xFF5
  2867                           postinc0	equ	0xFEE
  2868                           wreg	equ	0xFE8
  2869                           postdec1	equ	0xFE5
  2870                           fsr1h	equ	0xFE2
  2871                           fsr1l	equ	0xFE1
  2872                           postinc2	equ	0xFDE
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _init_interrupt *****************
  2876 ;; Defined at:
  2877 ;;		line 98 in file "bibliotecas/hardware.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;		None
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      void 
  2884 ;; Registers used:
  2885 ;;		wreg, status,2
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2891 ;;      Params:         0       0       0       0       0       0       0       0       0
  2892 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2893 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2894 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2895 ;;Total ram usage:        0 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    2
  2898 ;; This function calls:
  2899 ;;		Nothing
  2900 ;; This function is called by:
  2901 ;;		_init_hardware
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text6
  2906  005B3C                     __ptext6:
  2907                           	opt stack 0
  2908  005B3C                     _init_interrupt:
  2909                           	opt stack 27
  2910                           
  2911                           ;hardware.c: 100: INTCON = 0b11110000;
  2912                           
  2913                           ;incstack = 0
  2914  005B3C  0EF0               	movlw	240
  2915  005B3E  6EF2               	movwf	intcon,c	;volatile
  2916                           
  2917                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2918  005B40  0E00               	movlw	0
  2919  005B42  6EF1               	movwf	intcon2,c	;volatile
  2920                           
  2921                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2922  005B44  0E00               	movlw	0
  2923  005B46  6EF0               	movwf	intcon3,c	;volatile
  2924                           
  2925                           ;hardware.c: 104: PIE1 = 0b00100000;
  2926  005B48  0E20               	movlw	32
  2927  005B4A  6E9D               	movwf	3997,c	;volatile
  2928  005B4C  0012               	return		;funcret
  2929  005B4E                     __end_of_init_interrupt:
  2930                           	opt stack 0
  2931                           tblptru	equ	0xFF8
  2932                           tblptrh	equ	0xFF7
  2933                           tblptrl	equ	0xFF6
  2934                           tablat	equ	0xFF5
  2935                           intcon	equ	0xFF2
  2936                           intcon2	equ	0xFF1
  2937                           intcon3	equ	0xFF0
  2938                           postinc0	equ	0xFEE
  2939                           wreg	equ	0xFE8
  2940                           postdec1	equ	0xFE5
  2941                           fsr1h	equ	0xFE2
  2942                           fsr1l	equ	0xFE1
  2943                           postinc2	equ	0xFDE
  2944                           status	equ	0xFD8
  2945                           
  2946 ;; *************** function _config_timer_zero *****************
  2947 ;; Defined at:
  2948 ;;		line 83 in file "bibliotecas/hardware.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;		None
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2962 ;;      Params:         0       0       0       0       0       0       0       0       0
  2963 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2965 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2966 ;;Total ram usage:        0 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    3
  2969 ;; This function calls:
  2970 ;;		_write_timer_zero
  2971 ;; This function is called by:
  2972 ;;		_init_hardware
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text7
  2977  005AE0                     __ptext7:
  2978                           	opt stack 0
  2979  005AE0                     _config_timer_zero:
  2980                           	opt stack 26
  2981                           
  2982                           ;hardware.c: 85: T0CON = 0b11000011;
  2983                           
  2984                           ;incstack = 0
  2985  005AE0  0EC3               	movlw	195
  2986  005AE2  6ED5               	movwf	4053,c	;volatile
  2987                           
  2988                           ;hardware.c: 86: SPPCON = 0b00000000;
  2989  005AE4  0E00               	movlw	0
  2990  005AE6  6E65               	movwf	3941,c	;volatile
  2991                           
  2992                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2993  005AE8  0E00               	movlw	0
  2994  005AEA  6E63               	movwf	3939,c	;volatile
  2995                           
  2996                           ;hardware.c: 88: write_timer_zero(0x0083);
  2997  005AEC  0E00               	movlw	0
  2998  005AEE  6E1B               	movwf	write_timer_zero@timer0+1,c
  2999  005AF0  0E83               	movlw	131
  3000  005AF2  6E1A               	movwf	write_timer_zero@timer0,c
  3001  005AF4  ECA7  F02D         	call	_write_timer_zero	;wreg free
  3002  005AF8  0012               	return		;funcret
  3003  005AFA                     __end_of_config_timer_zero:
  3004                           	opt stack 0
  3005                           tblptru	equ	0xFF8
  3006                           tblptrh	equ	0xFF7
  3007                           tblptrl	equ	0xFF6
  3008                           tablat	equ	0xFF5
  3009                           intcon	equ	0xFF2
  3010                           intcon2	equ	0xFF1
  3011                           intcon3	equ	0xFF0
  3012                           postinc0	equ	0xFEE
  3013                           wreg	equ	0xFE8
  3014                           postdec1	equ	0xFE5
  3015                           fsr1h	equ	0xFE2
  3016                           fsr1l	equ	0xFE1
  3017                           postinc2	equ	0xFDE
  3018                           status	equ	0xFD8
  3019                           
  3020 ;; *************** function _write_timer_zero *****************
  3021 ;; Defined at:
  3022 ;;		line 138 in file "bibliotecas/hardware.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  timer0          2   25[COMRAM] unsigned int 
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;  timer           2   27[COMRAM] struct Timers
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		None
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3036 ;;      Params:         2       0       0       0       0       0       0       0       0
  3037 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3038 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3039 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3040 ;;Total ram usage:        4 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:    2
  3043 ;; This function calls:
  3044 ;;		Nothing
  3045 ;; This function is called by:
  3046 ;;		_config_timer_zero
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           	psect	text8
  3051  005B4E                     __ptext8:
  3052                           	opt stack 0
  3053  005B4E                     _write_timer_zero:
  3054                           	opt stack 26
  3055                           
  3056                           ;hardware.c: 140: union Timers timer;
  3057                           ;hardware.c: 142: timer.lt = timer0;
  3058                           
  3059                           ;incstack = 0
  3060  005B4E  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  3061  005B52  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  3062                           
  3063                           ;hardware.c: 144: TMR0H = timer.bt[1];
  3064  005B56  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  3065                           
  3066                           ;hardware.c: 145: TMR0L = timer.bt[0];
  3067  005B5A  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  3068  005B5E  0012               	return		;funcret
  3069  005B60                     __end_of_write_timer_zero:
  3070                           	opt stack 0
  3071                           tblptru	equ	0xFF8
  3072                           tblptrh	equ	0xFF7
  3073                           tblptrl	equ	0xFF6
  3074                           tablat	equ	0xFF5
  3075                           intcon	equ	0xFF2
  3076                           intcon2	equ	0xFF1
  3077                           intcon3	equ	0xFF0
  3078                           postinc0	equ	0xFEE
  3079                           wreg	equ	0xFE8
  3080                           postdec1	equ	0xFE5
  3081                           fsr1h	equ	0xFE2
  3082                           fsr1l	equ	0xFE1
  3083                           postinc2	equ	0xFDE
  3084                           status	equ	0xFD8
  3085                           
  3086 ;; *************** function _config_timer_dois *****************
  3087 ;; Defined at:
  3088 ;;		line 200 in file "bibliotecas/hardware.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;		None
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;		None
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  1    wreg      void 
  3095 ;; Registers used:
  3096 ;;		wreg, status,2
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3102 ;;      Params:         0       0       0       0       0       0       0       0       0
  3103 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3104 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3105 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3106 ;;Total ram usage:        0 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    2
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		_init_hardware
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text9
  3117  005B92                     __ptext9:
  3118                           	opt stack 0
  3119  005B92                     _config_timer_dois:
  3120                           	opt stack 27
  3121                           
  3122                           ;hardware.c: 202: T2CON = 0b00000100;
  3123                           
  3124                           ;incstack = 0
  3125  005B92  0E04               	movlw	4
  3126  005B94  6ECA               	movwf	4042,c	;volatile
  3127                           
  3128                           ;hardware.c: 203: TMR2 = 0;
  3129  005B96  0E00               	movlw	0
  3130  005B98  6ECC               	movwf	4044,c	;volatile
  3131                           
  3132                           ;hardware.c: 204: PR2 = 0xFF;
  3133  005B9A  68CB               	setf	4043,c	;volatile
  3134  005B9C  0012               	return		;funcret
  3135  005B9E                     __end_of_config_timer_dois:
  3136                           	opt stack 0
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           intcon	equ	0xFF2
  3142                           intcon2	equ	0xFF1
  3143                           intcon3	equ	0xFF0
  3144                           postinc0	equ	0xFEE
  3145                           wreg	equ	0xFE8
  3146                           postdec1	equ	0xFE5
  3147                           fsr1h	equ	0xFE2
  3148                           fsr1l	equ	0xFE1
  3149                           postinc2	equ	0xFDE
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _inicializa_tarefas *****************
  3153 ;; Defined at:
  3154 ;;		line 157 in file "main.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		wreg, status,2, status,0
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3168 ;;      Params:         0       0       0       0       0       0       0       0       0
  3169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3171 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3172 ;;Total ram usage:        0 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    2
  3175 ;; This function calls:
  3176 ;;		Nothing
  3177 ;; This function is called by:
  3178 ;;		_main
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text10
  3183  0059CC                     __ptext10:
  3184                           	opt stack 0
  3185  0059CC                     _inicializa_tarefas:
  3186                           	opt stack 28
  3187                           
  3188                           ;main.c: 160: p_tarefas[0] = SDCard;
  3189                           
  3190                           ;incstack = 0
  3191  0059CC  0E3E               	movlw	low _SDCard
  3192  0059CE  0101               	movlb	1	; () banked
  3193  0059D0  6F4C               	movwf	_p_tarefas& (0+255),b
  3194  0059D2  0E46               	movlw	high _SDCard
  3195  0059D4  6F4D               	movwf	(_p_tarefas+1)& (0+255),b
  3196                           
  3197                           ; BSR set to: 1
  3198                           ;main.c: 164: tempo_backup[0] = 5000;
  3199  0059D6  0E13               	movlw	19
  3200  0059D8  6F49               	movwf	(_tempo_backup+1)& (0+255),b
  3201  0059DA  0E88               	movlw	136
  3202  0059DC  6F48               	movwf	_tempo_backup& (0+255),b
  3203                           
  3204                           ; BSR set to: 1
  3205                           ;main.c: 165: tempo_backup[1] = 5000;
  3206  0059DE  0E13               	movlw	19
  3207  0059E0  6F4B               	movwf	(_tempo_backup+3)& (0+255),b
  3208  0059E2  0E88               	movlw	136
  3209  0059E4  6F4A               	movwf	(_tempo_backup+2)& (0+255),b
  3210                           
  3211                           ; BSR set to: 1
  3212                           ;main.c: 170: tempo_tarefa[0] = 5000;
  3213  0059E6  0E13               	movlw	19
  3214  0059E8  0100               	movlb	0	; () banked
  3215  0059EA  6FF9               	movwf	(_tempo_tarefa+1)& (0+255),b
  3216  0059EC  0E88               	movlw	136
  3217  0059EE  6FF8               	movwf	_tempo_tarefa& (0+255),b
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;main.c: 171: tempo_tarefa[1] = 5000;
  3221  0059F0  0E13               	movlw	19
  3222  0059F2  6FFB               	movwf	(_tempo_tarefa+3)& (0+255),b
  3223  0059F4  0E88               	movlw	136
  3224  0059F6  6FFA               	movwf	(_tempo_tarefa+2)& (0+255),b
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;main.c: 175: tarefa_em_execucao = 0;
  3228  0059F8  0E00               	movlw	0
  3229  0059FA  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3230                           
  3231                           ; BSR set to: 0
  3232  0059FC  0012               	return		;funcret
  3233  0059FE                     __end_of_inicializa_tarefas:
  3234                           	opt stack 0
  3235                           tblptru	equ	0xFF8
  3236                           tblptrh	equ	0xFF7
  3237                           tblptrl	equ	0xFF6
  3238                           tablat	equ	0xFF5
  3239                           intcon	equ	0xFF2
  3240                           intcon2	equ	0xFF1
  3241                           intcon3	equ	0xFF0
  3242                           postinc0	equ	0xFEE
  3243                           wreg	equ	0xFE8
  3244                           postdec1	equ	0xFE5
  3245                           fsr1h	equ	0xFE2
  3246                           fsr1l	equ	0xFE1
  3247                           postinc2	equ	0xFDE
  3248                           status	equ	0xFD8
  3249                           
  3250 ;; *************** function _inicializa_shrc *****************
  3251 ;; Defined at:
  3252 ;;		line 48 in file "bibliotecas/SHRC.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;		None
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;		None
  3257 ;; Return value:  Size  Location     Type
  3258 ;;                  1    wreg      void 
  3259 ;; Registers used:
  3260 ;;		None
  3261 ;; Tracked objects:
  3262 ;;		On entry : 0/0
  3263 ;;		On exit  : 0/0
  3264 ;;		Unchanged: 0/0
  3265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3266 ;;      Params:         0       0       0       0       0       0       0       0       0
  3267 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3268 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3269 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3270 ;;Total ram usage:        0 bytes
  3271 ;; Hardware stack levels used:    1
  3272 ;; Hardware stack levels required when called:    2
  3273 ;; This function calls:
  3274 ;;		Nothing
  3275 ;; This function is called by:
  3276 ;;		_main
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           	psect	text11
  3281  005B9E                     __ptext11:
  3282                           	opt stack 0
  3283  005B9E                     _inicializa_shrc:
  3284                           	opt stack 28
  3285                           
  3286                           ;SHRC.c: 51: TRISBbits.RB6 = 0;
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;incstack = 0
  3290  005B9E  9C93               	bcf	3987,6,c	;volatile
  3291                           
  3292                           ;SHRC.c: 52: TRISBbits.RB5 = 1;
  3293  005BA0  8A93               	bsf	3987,5,c	;volatile
  3294                           
  3295                           ;SHRC.c: 53: TRISBbits.RB7 = 0;
  3296  005BA2  9E93               	bcf	3987,7,c	;volatile
  3297                           
  3298                           ;SHRC.c: 56: LATBbits.LATB6 = 0;
  3299  005BA4  9C8A               	bcf	3978,6,c	;volatile
  3300                           
  3301                           ;SHRC.c: 57: LATBbits.LATB7 = 0;
  3302  005BA6  9E8A               	bcf	3978,7,c	;volatile
  3303  005BA8  0012               	return		;funcret
  3304  005BAA                     __end_of_inicializa_shrc:
  3305                           	opt stack 0
  3306                           tblptru	equ	0xFF8
  3307                           tblptrh	equ	0xFF7
  3308                           tblptrl	equ	0xFF6
  3309                           tablat	equ	0xFF5
  3310                           intcon	equ	0xFF2
  3311                           intcon2	equ	0xFF1
  3312                           intcon3	equ	0xFF0
  3313                           postinc0	equ	0xFEE
  3314                           wreg	equ	0xFE8
  3315                           postdec1	equ	0xFE5
  3316                           fsr1h	equ	0xFE2
  3317                           fsr1l	equ	0xFE1
  3318                           postinc2	equ	0xFDE
  3319                           status	equ	0xFD8
  3320                           
  3321 ;; *************** function _escalonador *****************
  3322 ;; Defined at:
  3323 ;;		line 186 in file "main.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;		None
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;  cont            1   92[BANK1 ] unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      void 
  3330 ;; Registers used:
  3331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3337 ;;      Params:         0       0       0       0       0       0       0       0       0
  3338 ;;      Locals:         0       0       1       0       0       0       0       0       0
  3339 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3340 ;;      Totals:         0       0       3       0       0       0       0       0       0
  3341 ;;Total ram usage:        3 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:   16
  3344 ;; This function calls:
  3345 ;;		_SDCard
  3346 ;; This function is called by:
  3347 ;;		_main
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           	psect	text12
  3352  004D06                     __ptext12:
  3353                           	opt stack 0
  3354  004D06                     _escalonador:
  3355                           	opt stack 14
  3356                           
  3357                           ;main.c: 188: unsigned char cont;
  3358                           ;main.c: 189: for(cont = 0; cont<2;cont++)
  3359                           
  3360                           ;incstack = 0
  3361  004D06  0E00               	movlw	0
  3362  004D08  0101               	movlb	1	; () banked
  3363  004D0A  6FC8               	movwf	escalonador@cont& (0+255),b
  3364  004D0C                     l14628:
  3365                           
  3366                           ; BSR set to: 1
  3367  004D0C  0E01               	movlw	1
  3368  004D0E  65C8               	cpfsgt	escalonador@cont& (0+255),b
  3369  004D10  D001               	goto	l75
  3370  004D12  0012               	return	
  3371  004D14                     l75:
  3372                           
  3373                           ; BSR set to: 1
  3374                           ;main.c: 190: {
  3375                           ;main.c: 191: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3376                           
  3377                           ; BSR set to: 1
  3378  004D14  51C8               	movf	escalonador@cont& (0+255),w,b
  3379  004D16  0D02               	mullw	2
  3380  004D18  0E4C               	movlw	low _p_tarefas
  3381  004D1A  24F3               	addwf	prodl,w,c
  3382  004D1C  6ED9               	movwf	fsr2l,c
  3383  004D1E  0E01               	movlw	high _p_tarefas
  3384  004D20  20F4               	addwfc	prodh,w,c
  3385  004D22  6EDA               	movwf	fsr2h,c
  3386  004D24  50DE               	movf	postinc2,w,c
  3387  004D26  10DE               	iorwf	postinc2,w,c
  3388  004D28  B4D8               	btfsc	status,2,c
  3389  004D2A  D03F               	goto	l77
  3390                           
  3391                           ; BSR set to: 1
  3392  004D2C  51C8               	movf	escalonador@cont& (0+255),w,b
  3393  004D2E  0D02               	mullw	2
  3394  004D30  0EF8               	movlw	low _tempo_tarefa
  3395  004D32  24F3               	addwf	prodl,w,c
  3396  004D34  6ED9               	movwf	fsr2l,c
  3397  004D36  0E00               	movlw	high _tempo_tarefa
  3398  004D38  20F4               	addwfc	prodh,w,c
  3399  004D3A  6EDA               	movwf	fsr2h,c
  3400  004D3C  50DE               	movf	postinc2,w,c
  3401  004D3E  10DE               	iorwf	postinc2,w,c
  3402  004D40  A4D8               	btfss	status,2,c
  3403  004D42  D033               	goto	l77
  3404                           
  3405                           ; BSR set to: 1
  3406                           ;main.c: 192: {
  3407                           ;main.c: 193: tarefa_em_execucao = 1;
  3408  004D44  0E01               	movlw	1
  3409  004D46  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3410                           
  3411                           ;main.c: 194: timeout_tarefa = 65000;
  3412  004D48  0EFD               	movlw	253
  3413  004D4A  0100               	movlb	0	; () banked
  3414  004D4C  6FFF               	movwf	(_timeout_tarefa+1)& (0+255),b
  3415  004D4E  0EE8               	movlw	232
  3416  004D50  6FFE               	movwf	_timeout_tarefa& (0+255),b
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;main.c: 195: p_tarefas[cont]();
  3420  004D52  0101               	movlb	1	; () banked
  3421  004D54  51C8               	movf	escalonador@cont& (0+255),w,b
  3422  004D56  0D02               	mullw	2
  3423  004D58  0E4C               	movlw	low _p_tarefas
  3424  004D5A  24F3               	addwf	prodl,w,c
  3425  004D5C  6ED9               	movwf	fsr2l,c
  3426  004D5E  0E01               	movlw	high _p_tarefas
  3427  004D60  20F4               	addwfc	prodh,w,c
  3428  004D62  6EDA               	movwf	fsr2h,c
  3429  004D64  D801               	call	u19318
  3430  004D66  D00A               	goto	u19319
  3431  004D68                     u19318:
  3432  004D68  0005               	push	
  3433  004D6A  6EFA               	movwf	pclath,c
  3434  004D6C  50DE               	movf	postinc2,w,c
  3435  004D6E  6EFD               	movwf	tosl,c
  3436  004D70  50DE               	movf	postinc2,w,c
  3437  004D72  6EFE               	movwf	tosh,c
  3438  004D74  50F8               	movf	tblptru,w,c
  3439  004D76  6EFF               	movwf	tosu,c
  3440  004D78  50FA               	movf	pclath,w,c
  3441  004D7A  0012               	return		;indir
  3442  004D7C                     u19319:
  3443                           
  3444                           ;main.c: 196: tarefa_em_execucao = 0;
  3445  004D7C  0E00               	movlw	0
  3446  004D7E  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3447                           
  3448                           ;main.c: 197: tempo_tarefa[cont] = tempo_backup[cont];
  3449  004D80  0101               	movlb	1	; () banked
  3450  004D82  51C8               	movf	escalonador@cont& (0+255),w,b
  3451  004D84  0D02               	mullw	2
  3452  004D86  0E48               	movlw	low _tempo_backup
  3453  004D88  24F3               	addwf	prodl,w,c
  3454  004D8A  6ED9               	movwf	fsr2l,c
  3455  004D8C  0E01               	movlw	high _tempo_backup
  3456  004D8E  20F4               	addwfc	prodh,w,c
  3457  004D90  6EDA               	movwf	fsr2h,c
  3458  004D92  51C8               	movf	escalonador@cont& (0+255),w,b
  3459  004D94  0D02               	mullw	2
  3460  004D96  0EF8               	movlw	low _tempo_tarefa
  3461  004D98  24F3               	addwf	prodl,w,c
  3462  004D9A  6EE1               	movwf	fsr1l,c
  3463  004D9C  0E00               	movlw	high _tempo_tarefa
  3464  004D9E  20F4               	addwfc	prodh,w,c
  3465  004DA0  6EE2               	movwf	fsr1h,c
  3466  004DA2  CFDE FFE6          	movff	postinc2,postinc1
  3467  004DA6  CFDD FFE5          	movff	postdec2,postdec1
  3468  004DAA                     l77:
  3469                           
  3470                           ; BSR set to: 1
  3471                           
  3472                           ; BSR set to: 1
  3473  004DAA  2BC8               	incf	escalonador@cont& (0+255),f,b
  3474  004DAC  D7AF               	goto	l14628
  3475  004DAE                     __end_of_escalonador:
  3476                           	opt stack 0
  3477                           tosu	equ	0xFFF
  3478                           tosh	equ	0xFFE
  3479                           tosl	equ	0xFFD
  3480                           pclath	equ	0xFFA
  3481                           tblptru	equ	0xFF8
  3482                           tblptrh	equ	0xFF7
  3483                           tblptrl	equ	0xFF6
  3484                           tablat	equ	0xFF5
  3485                           prodh	equ	0xFF4
  3486                           prodl	equ	0xFF3
  3487                           intcon	equ	0xFF2
  3488                           intcon2	equ	0xFF1
  3489                           intcon3	equ	0xFF0
  3490                           postinc0	equ	0xFEE
  3491                           wreg	equ	0xFE8
  3492                           postinc1	equ	0xFE6
  3493                           postdec1	equ	0xFE5
  3494                           fsr1h	equ	0xFE2
  3495                           fsr1l	equ	0xFE1
  3496                           postinc2	equ	0xFDE
  3497                           postdec2	equ	0xFDD
  3498                           fsr2h	equ	0xFDA
  3499                           fsr2l	equ	0xFD9
  3500                           status	equ	0xFD8
  3501                           
  3502 ;; *************** function _SDCard *****************
  3503 ;; Defined at:
  3504 ;;		line 151 in file "bibliotecas/SDCard.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;		None
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;  fil            34    3[BANK3 ] struct .
  3509 ;;  br              2    0[BANK3 ] unsigned short 
  3510 ;;  FResult         1    2[BANK3 ] enum E3962
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      void 
  3513 ;; Registers used:
  3514 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3520 ;;      Params:         0       0       0       0       0       0       0       0       0
  3521 ;;      Locals:         0       0       0       0      37       0       0       0       0
  3522 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3523 ;;      Totals:         0       0       0       0      37       0       0       0       0
  3524 ;;Total ram usage:       37 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:   15
  3527 ;; This function calls:
  3528 ;;		_escreve_frase_ram_lcd
  3529 ;;		_escreve_inteiro_lcd
  3530 ;;		_f_close
  3531 ;;		_f_mount
  3532 ;;		_f_open
  3533 ;;		_f_write
  3534 ;;		_posicao_cursor_lcd
  3535 ;;		_proceed
  3536 ;; This function is called by:
  3537 ;;		_inicializa_tarefas
  3538 ;;		_escalonador
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           	psect	text13
  3543  00463E                     __ptext13:
  3544                           	opt stack 0
  3545  00463E                     _SDCard:
  3546                           	opt stack 14
  3547                           
  3548                           ;SDCard.c: 153: T0CONbits.TMR0ON = 0;
  3549                           
  3550                           ; BSR set to: 1
  3551                           ;incstack = 0
  3552  00463E  9ED5               	bcf	4053,7,c	;volatile
  3553                           
  3554                           ;SDCard.c: 156: FRESULT FResult;
  3555                           ;SDCard.c: 157: FIL fil;
  3556                           ;SDCard.c: 158: WORD br;
  3557                           ;SDCard.c: 163: proceed();
  3558  004640  ECD5  F02D         	call	_proceed	;wreg free
  3559                           
  3560                           ;SDCard.c: 165: FResult = f_mount(&fs, "SD", 1);
  3561  004644  0E25               	movlw	low _fs
  3562  004646  0100               	movlb	0	; () banked
  3563  004648  6FDE               	movwf	f_mount@fs& (0+255),b
  3564  00464A  0E03               	movlw	high _fs
  3565  00464C  6FDF               	movwf	(f_mount@fs+1)& (0+255),b
  3566  00464E  0E79               	movlw	low STR_10
  3567  004650  6FE0               	movwf	f_mount@path& (0+255),b
  3568  004652  0E62               	movlw	high STR_10
  3569  004654  6FE1               	movwf	(f_mount@path+1)& (0+255),b
  3570  004656  0E01               	movlw	1
  3571  004658  6FE2               	movwf	f_mount@opt& (0+255),b
  3572  00465A  ECD8  F025         	call	_f_mount	;wreg free
  3573  00465E  0103               	movlb	3	; () banked
  3574  004660  6F02               	movwf	SDCard@FResult& (0+255),b
  3575                           
  3576                           ; BSR set to: 3
  3577                           ;SDCard.c: 169: if((FResult = f_open(&fil,"teste1.txt",0x04)) == FR_OK)
  3578  004662  0E03               	movlw	low SDCard@fil
  3579  004664  0101               	movlb	1	; () banked
  3580  004666  6F74               	movwf	f_open@fp& (0+255),b
  3581  004668  0E03               	movlw	high SDCard@fil
  3582  00466A  6F75               	movwf	(f_open@fp+1)& (0+255),b
  3583  00466C  0EFA               	movlw	low STR_11
  3584  00466E  6F76               	movwf	f_open@path& (0+255),b
  3585  004670  0E61               	movlw	high STR_11
  3586  004672  6F77               	movwf	(f_open@path+1)& (0+255),b
  3587  004674  0E04               	movlw	4
  3588  004676  6F78               	movwf	f_open@mode& (0+255),b
  3589  004678  EC70  F009         	call	_f_open	;wreg free
  3590  00467C  0103               	movlb	3	; () banked
  3591  00467E  6F02               	movwf	SDCard@FResult& (0+255),b
  3592  004680  5102               	movf	SDCard@FResult& (0+255),w,b
  3593  004682  A4D8               	btfss	status,2,c
  3594  004684  D042               	goto	l319
  3595                           
  3596                           ; BSR set to: 3
  3597                           ;SDCard.c: 170: {
  3598                           ;SDCard.c: 171: posicao_cursor_lcd(1,0);
  3599  004686  0E00               	movlw	0
  3600  004688  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3601  00468A  0E01               	movlw	1
  3602  00468C  ECB8  F029         	call	_posicao_cursor_lcd
  3603                           
  3604                           ;SDCard.c: 172: escreve_frase_ram_lcd("escrevendo");
  3605  004690  0EEF               	movlw	low STR_12
  3606  004692  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3607  004694  0E61               	movlw	high STR_12
  3608  004696  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3609  004698  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3610                           
  3611                           ;SDCard.c: 173: if((FResult = f_write(&fil, "f", 6, br)) ==FR_OK)
  3612  00469C  0E03               	movlw	low SDCard@fil
  3613  00469E  0100               	movlb	0	; () banked
  3614  0046A0  6FCC               	movwf	f_write@fp& (0+255),b
  3615  0046A2  0E03               	movlw	high SDCard@fil
  3616  0046A4  6FCD               	movwf	(f_write@fp+1)& (0+255),b
  3617  0046A6  0E4A               	movlw	low (STR_3+4)
  3618  0046A8  6FCE               	movwf	f_write@buff& (0+255),b
  3619  0046AA  0E62               	movlw	high (STR_3+4)
  3620  0046AC  6FCF               	movwf	(f_write@buff+1)& (0+255),b
  3621  0046AE  0E00               	movlw	0
  3622  0046B0  6FD1               	movwf	(f_write@btw+1)& (0+255),b
  3623  0046B2  0E06               	movlw	6
  3624  0046B4  6FD0               	movwf	f_write@btw& (0+255),b
  3625  0046B6  C300  F0D2         	movff	SDCard@br,f_write@bw
  3626  0046BA  C301  F0D3         	movff	SDCard@br+1,f_write@bw+1
  3627  0046BE  EC71  F005         	call	_f_write	;wreg free
  3628  0046C2  0103               	movlb	3	; () banked
  3629  0046C4  6F02               	movwf	SDCard@FResult& (0+255),b
  3630  0046C6  5102               	movf	SDCard@FResult& (0+255),w,b
  3631  0046C8  A4D8               	btfss	status,2,c
  3632  0046CA  D013               	goto	l320
  3633                           
  3634                           ; BSR set to: 3
  3635                           ;SDCard.c: 174: {
  3636                           ;SDCard.c: 175: posicao_cursor_lcd(2,0);
  3637  0046CC  0E00               	movlw	0
  3638  0046CE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3639  0046D0  0E02               	movlw	2
  3640  0046D2  ECB8  F029         	call	_posicao_cursor_lcd
  3641                           
  3642                           ;SDCard.c: 176: escreve_frase_ram_lcd("fechando");
  3643  0046D6  0E0F               	movlw	low STR_14
  3644  0046D8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3645  0046DA  0E62               	movlw	high STR_14
  3646  0046DC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3647  0046DE  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3648                           
  3649                           ;SDCard.c: 177: f_close(&fil);
  3650  0046E2  0E03               	movlw	low SDCard@fil
  3651  0046E4  0100               	movlb	0	; () banked
  3652  0046E6  6FA2               	movwf	f_close@fp& (0+255),b
  3653  0046E8  0E03               	movlw	high SDCard@fil
  3654  0046EA  6FA3               	movwf	(f_close@fp+1)& (0+255),b
  3655  0046EC  EC89  F02B         	call	_f_close	;wreg free
  3656                           
  3657                           ;SDCard.c: 181: }
  3658  0046F0  0012               	return	
  3659  0046F2                     l320:
  3660                           
  3661                           ;SDCard.c: 182: else
  3662                           ;SDCard.c: 183: {
  3663                           ;SDCard.c: 184: posicao_cursor_lcd(1,0);
  3664  0046F2  0E00               	movlw	0
  3665  0046F4  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3666  0046F6  0E01               	movlw	1
  3667  0046F8  ECB8  F029         	call	_posicao_cursor_lcd
  3668                           
  3669                           ;SDCard.c: 185: escreve_inteiro_lcd(FResult);
  3670  0046FC  C302  F02C         	movff	SDCard@FResult,escreve_inteiro_lcd@valor
  3671  004700  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
  3672  004702  EC71  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3673                           
  3674                           ;SDCard.c: 186: T0CONbits.TMR0ON = 1;
  3675  004706  8ED5               	bsf	4053,7,c	;volatile
  3676                           
  3677                           ;SDCard.c: 187: }
  3678                           ;SDCard.c: 204: }
  3679  004708  0012               	return	
  3680  00470A                     l319:
  3681                           
  3682                           ;SDCard.c: 205: else{
  3683                           ;SDCard.c: 206: posicao_cursor_lcd(1,0);
  3684  00470A  0E00               	movlw	0
  3685  00470C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3686  00470E  0E01               	movlw	1
  3687  004710  ECB8  F029         	call	_posicao_cursor_lcd
  3688                           
  3689                           ;SDCard.c: 207: escreve_inteiro_lcd(FResult);
  3690  004714  C302  F02C         	movff	SDCard@FResult,escreve_inteiro_lcd@valor
  3691  004718  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
  3692  00471A  EC71  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3693                           
  3694                           ;SDCard.c: 208: T0CONbits.TMR0ON = 1;
  3695  00471E  8ED5               	bsf	4053,7,c	;volatile
  3696  004720  0012               	return	
  3697  004722                     __end_of_SDCard:
  3698                           	opt stack 0
  3699                           tosu	equ	0xFFF
  3700                           tosh	equ	0xFFE
  3701                           tosl	equ	0xFFD
  3702                           pclath	equ	0xFFA
  3703                           tblptru	equ	0xFF8
  3704                           tblptrh	equ	0xFF7
  3705                           tblptrl	equ	0xFF6
  3706                           tablat	equ	0xFF5
  3707                           prodh	equ	0xFF4
  3708                           prodl	equ	0xFF3
  3709                           intcon	equ	0xFF2
  3710                           intcon2	equ	0xFF1
  3711                           intcon3	equ	0xFF0
  3712                           postinc0	equ	0xFEE
  3713                           wreg	equ	0xFE8
  3714                           postinc1	equ	0xFE6
  3715                           postdec1	equ	0xFE5
  3716                           fsr1h	equ	0xFE2
  3717                           fsr1l	equ	0xFE1
  3718                           postinc2	equ	0xFDE
  3719                           postdec2	equ	0xFDD
  3720                           fsr2h	equ	0xFDA
  3721                           fsr2l	equ	0xFD9
  3722                           status	equ	0xFD8
  3723                           
  3724 ;; *************** function _f_write *****************
  3725 ;; Defined at:
  3726 ;;		line 3671 in file "bibliotecas/ff.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  fp              2  108[BANK0 ] PTR struct .
  3729 ;;		 -> SDCard@fil(34), 
  3730 ;;  buff            2  110[BANK0 ] PTR const void 
  3731 ;;		 -> STR_13(2), 
  3732 ;;  btw             2  112[BANK0 ] unsigned int 
  3733 ;;  bw              2  114[BANK0 ] PTR unsigned int 
  3734 ;;		 -> RAM(2047), 
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;  clst            4   15[BANK1 ] unsigned long 
  3737 ;;  sect            4   11[BANK1 ] unsigned long 
  3738 ;;  fs              2   21[BANK1 ] PTR struct .
  3739 ;;		 -> NULL(0), fs(559), 
  3740 ;;  wcnt            2   19[BANK1 ] unsigned int 
  3741 ;;  cc              2    9[BANK1 ] unsigned int 
  3742 ;;  csect           2    7[BANK1 ] unsigned int 
  3743 ;;  wbuff           2    5[BANK1 ] PTR const unsigned char 
  3744 ;;		 -> STR_13(2), 
  3745 ;;  res             1    4[BANK1 ] enum E79
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  1    wreg      enum E3962
  3748 ;; Registers used:
  3749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3755 ;;      Params:         0       8       0       0       0       0       0       0       0
  3756 ;;      Locals:         0       0      23       0       0       0       0       0       0
  3757 ;;      Temps:          0      16       0       0       0       0       0       0       0
  3758 ;;      Totals:         0      24      23       0       0       0       0       0       0
  3759 ;;Total ram usage:       47 bytes
  3760 ;; Hardware stack levels used:    1
  3761 ;; Hardware stack levels required when called:   11
  3762 ;; This function calls:
  3763 ;;		_clst2sect
  3764 ;;		_create_chain
  3765 ;;		_disk_write
  3766 ;;		_mem_cpy
  3767 ;;		_move_window
  3768 ;;		_sync_window
  3769 ;;		_validate
  3770 ;; This function is called by:
  3771 ;;		_SDCard
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           	psect	text14
  3776  000AE2                     __ptext14:
  3777                           	opt stack 0
  3778  000AE2                     _f_write:
  3779                           	opt stack 17
  3780                           
  3781                           ;ff.c: 3678: FRESULT res;
  3782                           ;ff.c: 3679: FATFS *fs;
  3783                           ;ff.c: 3680: DWORD clst, sect;
  3784                           ;ff.c: 3681: UINT wcnt, cc, csect;
  3785                           ;ff.c: 3682: const BYTE *wbuff = (const BYTE*)buff;
  3786                           
  3787                           ;incstack = 0
  3788  000AE2  C0CE  F171         	movff	f_write@buff,f_write@wbuff
  3789  000AE6  C0CF  F172         	movff	f_write@buff+1,f_write@wbuff+1
  3790                           
  3791                           ;ff.c: 3685: *bw = 0;
  3792  000AEA  C0D2  FFD9         	movff	f_write@bw,fsr2l
  3793  000AEE  C0D3  FFDA         	movff	f_write@bw+1,fsr2h
  3794  000AF2  0E00               	movlw	0
  3795  000AF4  6EDE               	movwf	postinc2,c
  3796  000AF6  0E00               	movlw	0
  3797  000AF8  6EDD               	movwf	postdec2,c
  3798                           
  3799                           ;ff.c: 3686: res = validate(&fp->obj, &fs);
  3800  000AFA  C0CC  F021         	movff	f_write@fp,validate@obj
  3801  000AFE  C0CD  F022         	movff	f_write@fp+1,validate@obj+1
  3802  000B02  0E81               	movlw	low f_write@fs
  3803  000B04  6E23               	movwf	validate@rfs,c
  3804  000B06  0E01               	movlw	high f_write@fs
  3805  000B08  6E24               	movwf	validate@rfs+1,c
  3806  000B0A  ECBD  F024         	call	_validate	;wreg free
  3807  000B0E  0101               	movlb	1	; () banked
  3808  000B10  6F70               	movwf	f_write@res& (0+255),b
  3809                           
  3810                           ; BSR set to: 1
  3811                           ;ff.c: 3687: if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) return res;
  3812  000B12  5170               	movf	f_write@res& (0+255),w,b
  3813  000B14  A4D8               	btfss	status,2,c
  3814  000B16  D00D               	goto	u18950
  3815                           
  3816                           ; BSR set to: 1
  3817  000B18  0100               	movlb	0	; () banked
  3818  000B1A  EE20 F00F          	lfsr	2,15
  3819  000B1E  51CC               	movf	f_write@fp& (0+255),w,b
  3820  000B20  26D9               	addwf	fsr2l,f,c
  3821  000B22  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  3822  000B24  22DA               	addwfc	fsr2h,f,c
  3823  000B26  50DF               	movf	indf2,w,c
  3824  000B28  0101               	movlb	1	; () banked
  3825  000B2A  6F70               	movwf	f_write@res& (0+255),b
  3826  000B2C  5170               	movf	f_write@res& (0+255),w,b
  3827  000B2E  B4D8               	btfsc	status,2,c
  3828  000B30  D002               	goto	l1523
  3829  000B32                     u18950:
  3830                           
  3831                           ; BSR set to: 1
  3832                           
  3833                           ; BSR set to: 1
  3834  000B32  5170               	movf	f_write@res& (0+255),w,b
  3835                           
  3836                           ; BSR set to: 1
  3837  000B34  0012               	return	
  3838  000B36                     l1523:
  3839                           
  3840                           ; BSR set to: 1
  3841                           ;ff.c: 3688: if (!(fp->flag & 0x02)) return FR_DENIED;
  3842                           
  3843                           ; BSR set to: 1
  3844  000B36  0100               	movlb	0	; () banked
  3845  000B38  EE20 F00E          	lfsr	2,14
  3846  000B3C  51CC               	movf	f_write@fp& (0+255),w,b
  3847  000B3E  26D9               	addwf	fsr2l,f,c
  3848  000B40  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  3849  000B42  22DA               	addwfc	fsr2h,f,c
  3850  000B44  B2DF               	btfsc	indf2,1,c
  3851  000B46  D002               	goto	u18970
  3852                           
  3853                           ; BSR set to: 0
  3854  000B48  0E07               	movlw	7
  3855                           
  3856                           ; BSR set to: 0
  3857  000B4A  0012               	return	
  3858  000B4C                     u18970:
  3859                           
  3860                           ; BSR set to: 0
  3861                           
  3862                           ; BSR set to: 0
  3863  000B4C  EE20 F010          	lfsr	2,16
  3864  000B50  51CC               	movf	f_write@fp& (0+255),w,b
  3865  000B52  26D9               	addwf	fsr2l,f,c
  3866  000B54  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  3867  000B56  22DA               	addwfc	fsr2h,f,c
  3868  000B58  EE10 F010          	lfsr	1,16
  3869  000B5C  51CC               	movf	f_write@fp& (0+255),w,b
  3870  000B5E  26E1               	addwf	fsr1l,f,c
  3871  000B60  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  3872  000B62  22E2               	addwfc	fsr1h,f,c
  3873  000B64  CFE6 F0D8          	movff	postinc1,??_f_write+4
  3874  000B68  CFE6 F0D9          	movff	postinc1,??_f_write+5
  3875  000B6C  CFE6 F0DA          	movff	postinc1,??_f_write+6
  3876  000B70  CFE6 F0DB          	movff	postinc1,??_f_write+7
  3877  000B74  51D0               	movf	f_write@btw& (0+255),w,b
  3878  000B76  25D8               	addwf	(??_f_write+4)& (0+255),w,b
  3879  000B78  6FDC               	movwf	(??_f_write+8)& (0+255),b
  3880  000B7A  51D1               	movf	(f_write@btw+1)& (0+255),w,b
  3881  000B7C  21D9               	addwfc	(??_f_write+5)& (0+255),w,b
  3882  000B7E  6FDD               	movwf	(??_f_write+9)& (0+255),b
  3883  000B80  0E00               	movlw	0
  3884  000B82  21DA               	addwfc	(??_f_write+6)& (0+255),w,b
  3885  000B84  6FDE               	movwf	(??_f_write+10)& (0+255),b
  3886  000B86  0E00               	movlw	0
  3887  000B88  21DB               	addwfc	(??_f_write+7)& (0+255),w,b
  3888  000B8A  6FDF               	movwf	(??_f_write+11)& (0+255),b
  3889  000B8C  50DE               	movf	postinc2,w,c
  3890  000B8E  5DDC               	subwf	(??_f_write+8)& (0+255),w,b
  3891  000B90  50DE               	movf	postinc2,w,c
  3892  000B92  59DD               	subwfb	(??_f_write+9)& (0+255),w,b
  3893  000B94  50DE               	movf	postinc2,w,c
  3894  000B96  59DE               	subwfb	(??_f_write+10)& (0+255),w,b
  3895  000B98  50DE               	movf	postinc2,w,c
  3896  000B9A  59DF               	subwfb	(??_f_write+11)& (0+255),w,b
  3897  000B9C  B0D8               	btfsc	status,0,c
  3898  000B9E  D391               	goto	l1531
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;ff.c: 3692: btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
  3902  000BA0  EE20 F010          	lfsr	2,16
  3903  000BA4  51CC               	movf	f_write@fp& (0+255),w,b
  3904  000BA6  26D9               	addwf	fsr2l,f,c
  3905  000BA8  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  3906  000BAA  22DA               	addwfc	fsr2h,f,c
  3907  000BAC  CFDE F0D4          	movff	postinc2,??_f_write
  3908  000BB0  CFDD F0D5          	movff	postdec2,??_f_write+1
  3909  000BB4  1FD4               	comf	??_f_write& (0+255),f,b
  3910  000BB6  1FD5               	comf	(??_f_write+1)& (0+255),f,b
  3911  000BB8  4BD4               	infsnz	??_f_write& (0+255),f,b
  3912  000BBA  2BD5               	incf	(??_f_write+1)& (0+255),f,b
  3913  000BBC  0EFF               	movlw	255
  3914  000BBE  25D4               	addwf	??_f_write& (0+255),w,b
  3915  000BC0  6FD0               	movwf	f_write@btw& (0+255),b
  3916  000BC2  0EFF               	movlw	255
  3917  000BC4  21D5               	addwfc	(??_f_write+1)& (0+255),w,b
  3918  000BC6  6FD1               	movwf	(f_write@btw+1)& (0+255),b
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;ff.c: 3693: }
  3922                           ;ff.c: 3695: for ( ; btw;
  3923                           ;ff.c: 3696: btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize 
      +                          = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
  3924  000BC8  D37C               	goto	l1531
  3925  000BCA                     
  3926                           ; BSR set to: 0
  3927                           ;ff.c: 3697: if (fp->fptr % ((UINT)512) == 0) {
  3928                           
  3929                           ; BSR set to: 0
  3930  000BCA  EE20 F010          	lfsr	2,16
  3931  000BCE  51CC               	movf	f_write@fp& (0+255),w,b
  3932  000BD0  26D9               	addwf	fsr2l,f,c
  3933  000BD2  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  3934  000BD4  22DA               	addwfc	fsr2h,f,c
  3935  000BD6  0EFF               	movlw	255
  3936  000BD8  14DE               	andwf	postinc2,w,c
  3937  000BDA  6FD4               	movwf	??_f_write& (0+255),b
  3938  000BDC  0E01               	movlw	1
  3939  000BDE  14DE               	andwf	postinc2,w,c
  3940  000BE0  6FD5               	movwf	(??_f_write+1)& (0+255),b
  3941  000BE2  0E00               	movlw	0
  3942  000BE4  14DE               	andwf	postinc2,w,c
  3943  000BE6  6FD6               	movwf	(??_f_write+2)& (0+255),b
  3944  000BE8  0E00               	movlw	0
  3945  000BEA  14DE               	andwf	postinc2,w,c
  3946  000BEC  6FD7               	movwf	(??_f_write+3)& (0+255),b
  3947  000BEE  51D4               	movf	??_f_write& (0+255),w,b
  3948  000BF0  11D5               	iorwf	(??_f_write+1)& (0+255),w,b
  3949  000BF2  11D6               	iorwf	(??_f_write+2)& (0+255),w,b
  3950  000BF4  11D7               	iorwf	(??_f_write+3)& (0+255),w,b
  3951  000BF6  A4D8               	btfss	status,2,c
  3952  000BF8  D289               	goto	l1533
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;ff.c: 3698: csect = (UINT)(fp->fptr / ((UINT)512)) & (fs->csize - 1);
  3956  000BFA  EE20 F010          	lfsr	2,16
  3957  000BFE  51CC               	movf	f_write@fp& (0+255),w,b
  3958  000C00  26D9               	addwf	fsr2l,f,c
  3959  000C02  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  3960  000C04  22DA               	addwfc	fsr2h,f,c
  3961  000C06  CFDE F0D4          	movff	postinc2,??_f_write
  3962  000C0A  CFDE F0D5          	movff	postinc2,??_f_write+1
  3963  000C0E  CFDE F0D6          	movff	postinc2,??_f_write+2
  3964  000C12  CFDE F0D7          	movff	postinc2,??_f_write+3
  3965  000C16  0E0A               	movlw	10
  3966  000C18  D005               	goto	u19000
  3967  000C1A                     u19005:
  3968  000C1A  90D8               	bcf	status,0,c
  3969  000C1C  33D7               	rrcf	(??_f_write+3)& (0+255),f,b
  3970  000C1E  33D6               	rrcf	(??_f_write+2)& (0+255),f,b
  3971  000C20  33D5               	rrcf	(??_f_write+1)& (0+255),f,b
  3972  000C22  33D4               	rrcf	??_f_write& (0+255),f,b
  3973  000C24                     u19000:
  3974  000C24  2EE8               	decfsz	wreg,f,c
  3975  000C26  D7F9               	goto	u19005
  3976  000C28  0EFF               	movlw	255
  3977  000C2A  6FD8               	movwf	(??_f_write+4)& (0+255),b
  3978  000C2C  0EFF               	movlw	255
  3979  000C2E  6FD9               	movwf	(??_f_write+5)& (0+255),b
  3980  000C30  0101               	movlb	1	; () banked
  3981  000C32  EE20 F009          	lfsr	2,9
  3982  000C36  5181               	movf	f_write@fs& (0+255),w,b
  3983  000C38  26D9               	addwf	fsr2l,f,c
  3984  000C3A  5182               	movf	(f_write@fs+1)& (0+255),w,b
  3985  000C3C  22DA               	addwfc	fsr2h,f,c
  3986  000C3E  CFDE F0DA          	movff	postinc2,??_f_write+6
  3987  000C42  CFDD F0DB          	movff	postdec2,??_f_write+7
  3988  000C46  0100               	movlb	0	; () banked
  3989  000C48  51D8               	movf	(??_f_write+4)& (0+255),w,b
  3990  000C4A  27DA               	addwf	(??_f_write+6)& (0+255),f,b
  3991  000C4C  51D9               	movf	(??_f_write+5)& (0+255),w,b
  3992  000C4E  23DB               	addwfc	(??_f_write+7)& (0+255),f,b
  3993  000C50  51D4               	movf	??_f_write& (0+255),w,b
  3994  000C52  15DA               	andwf	(??_f_write+6)& (0+255),w,b
  3995  000C54  0101               	movlb	1	; () banked
  3996  000C56  6F73               	movwf	f_write@csect& (0+255),b
  3997  000C58  0100               	movlb	0	; () banked
  3998  000C5A  51D5               	movf	(??_f_write+1)& (0+255),w,b
  3999  000C5C  15DB               	andwf	(??_f_write+7)& (0+255),w,b
  4000  000C5E  0101               	movlb	1	; () banked
  4001  000C60  6F74               	movwf	(f_write@csect+1)& (0+255),b
  4002                           
  4003                           ; BSR set to: 1
  4004                           ;ff.c: 3699: if (csect == 0) {
  4005  000C62  5173               	movf	f_write@csect& (0+255),w,b
  4006  000C64  1174               	iorwf	(f_write@csect+1)& (0+255),w,b
  4007  000C66  A4D8               	btfss	status,2,c
  4008  000C68  D0A5               	goto	l1542
  4009                           
  4010                           ; BSR set to: 1
  4011                           ;ff.c: 3700: if (fp->fptr == 0) {
  4012  000C6A  0100               	movlb	0	; () banked
  4013  000C6C  EE20 F010          	lfsr	2,16
  4014  000C70  51CC               	movf	f_write@fp& (0+255),w,b
  4015  000C72  26D9               	addwf	fsr2l,f,c
  4016  000C74  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4017  000C76  22DA               	addwfc	fsr2h,f,c
  4018  000C78  50DE               	movf	postinc2,w,c
  4019  000C7A  10DE               	iorwf	postinc2,w,c
  4020  000C7C  10DE               	iorwf	postinc2,w,c
  4021  000C7E  10DE               	iorwf	postinc2,w,c
  4022  000C80  A4D8               	btfss	status,2,c
  4023  000C82  D025               	goto	l1535
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;ff.c: 3701: clst = fp->obj.sclust;
  4027  000C84  EE20 F006          	lfsr	2,6
  4028  000C88  51CC               	movf	f_write@fp& (0+255),w,b
  4029  000C8A  26D9               	addwf	fsr2l,f,c
  4030  000C8C  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4031  000C8E  22DA               	addwfc	fsr2h,f,c
  4032  000C90  CFDE F17B          	movff	postinc2,f_write@clst
  4033  000C94  CFDE F17C          	movff	postinc2,f_write@clst+1
  4034  000C98  CFDE F17D          	movff	postinc2,f_write@clst+2
  4035  000C9C  CFDE F17E          	movff	postinc2,f_write@clst+3
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;ff.c: 3702: if (clst == 0) {
  4039  000CA0  0101               	movlb	1	; () banked
  4040  000CA2  517B               	movf	f_write@clst& (0+255),w,b
  4041  000CA4  117C               	iorwf	(f_write@clst+1)& (0+255),w,b
  4042  000CA6  117D               	iorwf	(f_write@clst+2)& (0+255),w,b
  4043  000CA8  117E               	iorwf	(f_write@clst+3)& (0+255),w,b
  4044  000CAA  A4D8               	btfss	status,2,c
  4045  000CAC  D02D               	goto	l1537
  4046                           
  4047                           ; BSR set to: 1
  4048                           ;ff.c: 3703: clst = create_chain(&fp->obj, 0);
  4049  000CAE  C0CC  F0AF         	movff	f_write@fp,create_chain@obj
  4050  000CB2  C0CD  F0B0         	movff	f_write@fp+1,create_chain@obj+1
  4051  000CB6  0E00               	movlw	0
  4052  000CB8  0100               	movlb	0	; () banked
  4053  000CBA  6FB1               	movwf	create_chain@clst& (0+255),b
  4054  000CBC  0E00               	movlw	0
  4055  000CBE  6FB2               	movwf	(create_chain@clst+1)& (0+255),b
  4056  000CC0  0E00               	movlw	0
  4057  000CC2  6FB3               	movwf	(create_chain@clst+2)& (0+255),b
  4058  000CC4  0E00               	movlw	0
  4059  000CC6  6FB4               	movwf	(create_chain@clst+3)& (0+255),b
  4060  000CC8  EC42  F00C         	call	_create_chain	;wreg free
  4061  000CCC  D015               	goto	L2
  4062  000CCE                     l1535:
  4063                           
  4064                           ;ff.c: 3711: {
  4065                           ;ff.c: 3712: clst = create_chain(&fp->obj, fp->clust);
  4066  000CCE  C0CC  F0AF         	movff	f_write@fp,create_chain@obj
  4067  000CD2  C0CD  F0B0         	movff	f_write@fp+1,create_chain@obj+1
  4068  000CD6  0100               	movlb	0	; () banked
  4069  000CD8  EE20 F014          	lfsr	2,20
  4070  000CDC  51CC               	movf	f_write@fp& (0+255),w,b
  4071  000CDE  26D9               	addwf	fsr2l,f,c
  4072  000CE0  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4073  000CE2  22DA               	addwfc	fsr2h,f,c
  4074  000CE4  CFDE F0B1          	movff	postinc2,create_chain@clst
  4075  000CE8  CFDE F0B2          	movff	postinc2,create_chain@clst+1
  4076  000CEC  CFDE F0B3          	movff	postinc2,create_chain@clst+2
  4077  000CF0  CFDE F0B4          	movff	postinc2,create_chain@clst+3
  4078  000CF4  EC42  F00C         	call	_create_chain	;wreg free
  4079  000CF8                     L2:
  4080  000CF8  C0AF  F17B         	movff	?_create_chain,f_write@clst
  4081  000CFC  C0B0  F17C         	movff	?_create_chain+1,f_write@clst+1
  4082  000D00  C0B1  F17D         	movff	?_create_chain+2,f_write@clst+2
  4083  000D04  C0B2  F17E         	movff	?_create_chain+3,f_write@clst+3
  4084  000D08                     l1537:
  4085                           
  4086                           ;ff.c: 3713: }
  4087                           ;ff.c: 3714: }
  4088                           ;ff.c: 3715: if (clst == 0) break;
  4089  000D08  0101               	movlb	1	; () banked
  4090  000D0A  517B               	movf	f_write@clst& (0+255),w,b
  4091  000D0C  117C               	iorwf	(f_write@clst+1)& (0+255),w,b
  4092  000D0E  117D               	iorwf	(f_write@clst+2)& (0+255),w,b
  4093  000D10  117E               	iorwf	(f_write@clst+3)& (0+255),w,b
  4094  000D12  B4D8               	btfsc	status,2,c
  4095  000D14  D2DA               	goto	u19230
  4096                           
  4097                           ; BSR set to: 1
  4098                           ;ff.c: 3716: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  4099                           
  4100                           ; BSR set to: 1
  4101                           
  4102                           ; BSR set to: 1
  4103  000D16  057B               	decf	f_write@clst& (0+255),w,b
  4104  000D18  117C               	iorwf	(f_write@clst+1)& (0+255),w,b
  4105  000D1A  117D               	iorwf	(f_write@clst+2)& (0+255),w,b
  4106  000D1C  117E               	iorwf	(f_write@clst+3)& (0+255),w,b
  4107  000D1E  A4D8               	btfss	status,2,c
  4108  000D20  D00B               	goto	l1540
  4109                           
  4110                           ; BSR set to: 1
  4111  000D22  0100               	movlb	0	; () banked
  4112  000D24  EE20 F00F          	lfsr	2,15
  4113  000D28  51CC               	movf	f_write@fp& (0+255),w,b
  4114  000D2A  26D9               	addwf	fsr2l,f,c
  4115  000D2C  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4116  000D2E  22DA               	addwfc	fsr2h,f,c
  4117  000D30  0E02               	movlw	2
  4118  000D32  6EDF               	movwf	indf2,c
  4119                           
  4120                           ; BSR set to: 0
  4121  000D34  0E02               	movlw	2
  4122                           
  4123                           ; BSR set to: 0
  4124  000D36  0012               	return	
  4125  000D38                     l1540:
  4126                           
  4127                           ;ff.c: 3717: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
  4128                           
  4129                           ; BSR set to: 0
  4130  000D38  0101               	movlb	1	; () banked
  4131  000D3A  297B               	incf	f_write@clst& (0+255),w,b
  4132  000D3C  E112               	bnz	l14468
  4133  000D3E  297C               	incf	(f_write@clst+1)& (0+255),w,b
  4134  000D40  E110               	bnz	l14468
  4135  000D42  297D               	incf	(f_write@clst+2)& (0+255),w,b
  4136  000D44  E10E               	bnz	l14468
  4137  000D46  297E               	incf	(f_write@clst+3)& (0+255),w,b
  4138  000D48  A4D8               	btfss	status,2,c
  4139  000D4A  D00B               	goto	l1541
  4140                           
  4141                           ; BSR set to: 1
  4142  000D4C  0100               	movlb	0	; () banked
  4143  000D4E  EE20 F00F          	lfsr	2,15
  4144  000D52  51CC               	movf	f_write@fp& (0+255),w,b
  4145  000D54  26D9               	addwf	fsr2l,f,c
  4146  000D56  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4147  000D58  22DA               	addwfc	fsr2h,f,c
  4148  000D5A  0E01               	movlw	1
  4149  000D5C  6EDF               	movwf	indf2,c
  4150                           
  4151                           ; BSR set to: 0
  4152  000D5E  0E01               	movlw	1
  4153                           
  4154                           ; BSR set to: 0
  4155  000D60  0012               	return	
  4156  000D62                     l1541:
  4157  000D62                     l14468:
  4158                           
  4159                           ;ff.c: 3718: fp->clust = clst;
  4160  000D62  0100               	movlb	0	; () banked
  4161  000D64  EE20 F014          	lfsr	2,20
  4162  000D68  51CC               	movf	f_write@fp& (0+255),w,b
  4163  000D6A  26D9               	addwf	fsr2l,f,c
  4164  000D6C  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4165  000D6E  22DA               	addwfc	fsr2h,f,c
  4166  000D70  C17B  FFDE         	movff	f_write@clst,postinc2
  4167  000D74  C17C  FFDE         	movff	f_write@clst+1,postinc2
  4168  000D78  C17D  FFDE         	movff	f_write@clst+2,postinc2
  4169  000D7C  C17E  FFDE         	movff	f_write@clst+3,postinc2
  4170                           
  4171                           ;ff.c: 3719: if (fp->obj.sclust == 0) fp->obj.sclust = clst;
  4172  000D80  EE20 F006          	lfsr	2,6
  4173  000D84  51CC               	movf	f_write@fp& (0+255),w,b
  4174  000D86  26D9               	addwf	fsr2l,f,c
  4175  000D88  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4176  000D8A  22DA               	addwfc	fsr2h,f,c
  4177  000D8C  50DE               	movf	postinc2,w,c
  4178  000D8E  10DE               	iorwf	postinc2,w,c
  4179  000D90  10DE               	iorwf	postinc2,w,c
  4180  000D92  10DE               	iorwf	postinc2,w,c
  4181  000D94  A4D8               	btfss	status,2,c
  4182  000D96  D00E               	goto	l1542
  4183                           
  4184                           ; BSR set to: 0
  4185  000D98  EE20 F006          	lfsr	2,6
  4186  000D9C  51CC               	movf	f_write@fp& (0+255),w,b
  4187  000D9E  26D9               	addwf	fsr2l,f,c
  4188  000DA0  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4189  000DA2  22DA               	addwfc	fsr2h,f,c
  4190  000DA4  C17B  FFDE         	movff	f_write@clst,postinc2
  4191  000DA8  C17C  FFDE         	movff	f_write@clst+1,postinc2
  4192  000DAC  C17D  FFDE         	movff	f_write@clst+2,postinc2
  4193  000DB0  C17E  FFDE         	movff	f_write@clst+3,postinc2
  4194  000DB4                     l1542:
  4195                           
  4196                           ;ff.c: 3720: }
  4197                           ;ff.c: 3722: if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) { fp->err = (BYTE)
      +                          (FR_DISK_ERR); return FR_DISK_ERR; };
  4198                           
  4199                           ; BSR set to: 0
  4200                           
  4201                           ; BSR set to: 0
  4202  000DB4  0100               	movlb	0	; () banked
  4203  000DB6  EE20 F018          	lfsr	2,24
  4204  000DBA  51CC               	movf	f_write@fp& (0+255),w,b
  4205  000DBC  26D9               	addwf	fsr2l,f,c
  4206  000DBE  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4207  000DC0  22DA               	addwfc	fsr2h,f,c
  4208  000DC2  0101               	movlb	1	; () banked
  4209  000DC4  EE10 F02B          	lfsr	1,43
  4210  000DC8  5181               	movf	f_write@fs& (0+255),w,b
  4211  000DCA  26E1               	addwf	fsr1l,f,c
  4212  000DCC  5182               	movf	(f_write@fs+1)& (0+255),w,b
  4213  000DCE  22E2               	addwfc	fsr1h,f,c
  4214  000DD0  50DE               	movf	postinc2,w,c
  4215  000DD2  18E6               	xorwf	postinc1,w,c
  4216  000DD4  E11E               	bnz	l14482
  4217  000DD6  50DE               	movf	postinc2,w,c
  4218  000DD8  18E6               	xorwf	postinc1,w,c
  4219  000DDA  E11B               	bnz	l14482
  4220  000DDC  50DE               	movf	postinc2,w,c
  4221  000DDE  18E6               	xorwf	postinc1,w,c
  4222  000DE0  E118               	bnz	l14482
  4223  000DE2  50DE               	movf	postinc2,w,c
  4224  000DE4  18E6               	xorwf	postinc1,w,c
  4225  000DE6  A4D8               	btfss	status,2,c
  4226  000DE8  D014               	goto	l1543
  4227                           
  4228                           ; BSR set to: 1
  4229  000DEA  C181  F073         	movff	f_write@fs,sync_window@fs
  4230  000DEE  C182  F074         	movff	f_write@fs+1,sync_window@fs+1
  4231  000DF2  ECEC  F01C         	call	_sync_window	;wreg free
  4232  000DF6  0900               	iorlw	0
  4233  000DF8  B4D8               	btfsc	status,2,c
  4234  000DFA  D00B               	goto	l1543
  4235  000DFC  0100               	movlb	0	; () banked
  4236  000DFE  EE20 F00F          	lfsr	2,15
  4237  000E02  51CC               	movf	f_write@fp& (0+255),w,b
  4238  000E04  26D9               	addwf	fsr2l,f,c
  4239  000E06  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4240  000E08  22DA               	addwfc	fsr2h,f,c
  4241  000E0A  0E01               	movlw	1
  4242  000E0C  6EDF               	movwf	indf2,c
  4243                           
  4244                           ; BSR set to: 0
  4245  000E0E  0E01               	movlw	1
  4246                           
  4247                           ; BSR set to: 0
  4248  000E10  0012               	return	
  4249  000E12                     l1543:
  4250  000E12                     l14482:
  4251                           
  4252                           ;ff.c: 3729: sect = clst2sect(fs, fp->clust);
  4253  000E12  C181  F026         	movff	f_write@fs,clst2sect@fs
  4254  000E16  C182  F027         	movff	f_write@fs+1,clst2sect@fs+1
  4255  000E1A  0100               	movlb	0	; () banked
  4256  000E1C  EE20 F014          	lfsr	2,20
  4257  000E20  51CC               	movf	f_write@fp& (0+255),w,b
  4258  000E22  26D9               	addwf	fsr2l,f,c
  4259  000E24  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4260  000E26  22DA               	addwfc	fsr2h,f,c
  4261  000E28  CFDE F028          	movff	postinc2,clst2sect@clst
  4262  000E2C  CFDE F029          	movff	postinc2,clst2sect@clst+1
  4263  000E30  CFDE F02A          	movff	postinc2,clst2sect@clst+2
  4264  000E34  CFDE F02B          	movff	postinc2,clst2sect@clst+3
  4265  000E38  ECFA  F023         	call	_clst2sect	;wreg free
  4266  000E3C  C026  F177         	movff	?_clst2sect,f_write@sect
  4267  000E40  C027  F178         	movff	?_clst2sect+1,f_write@sect+1
  4268  000E44  C028  F179         	movff	?_clst2sect+2,f_write@sect+2
  4269  000E48  C029  F17A         	movff	?_clst2sect+3,f_write@sect+3
  4270                           
  4271                           ;ff.c: 3730: if (sect == 0) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  4272  000E4C  0101               	movlb	1	; () banked
  4273  000E4E  5177               	movf	f_write@sect& (0+255),w,b
  4274  000E50  1178               	iorwf	(f_write@sect+1)& (0+255),w,b
  4275  000E52  1179               	iorwf	(f_write@sect+2)& (0+255),w,b
  4276  000E54  117A               	iorwf	(f_write@sect+3)& (0+255),w,b
  4277  000E56  A4D8               	btfss	status,2,c
  4278  000E58  D00B               	goto	l1544
  4279                           
  4280                           ; BSR set to: 1
  4281  000E5A  0100               	movlb	0	; () banked
  4282  000E5C  EE20 F00F          	lfsr	2,15
  4283  000E60  51CC               	movf	f_write@fp& (0+255),w,b
  4284  000E62  26D9               	addwf	fsr2l,f,c
  4285  000E64  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4286  000E66  22DA               	addwfc	fsr2h,f,c
  4287  000E68  0E02               	movlw	2
  4288  000E6A  6EDF               	movwf	indf2,c
  4289                           
  4290                           ; BSR set to: 0
  4291  000E6C  0E02               	movlw	2
  4292                           
  4293                           ; BSR set to: 0
  4294  000E6E  0012               	return	
  4295  000E70                     l1544:
  4296                           
  4297                           ;ff.c: 3731: sect += csect;
  4298                           
  4299                           ; BSR set to: 0
  4300  000E70  0101               	movlb	1	; () banked
  4301  000E72  5173               	movf	f_write@csect& (0+255),w,b
  4302  000E74  2777               	addwf	f_write@sect& (0+255),f,b
  4303  000E76  5174               	movf	(f_write@csect+1)& (0+255),w,b
  4304  000E78  2378               	addwfc	(f_write@sect+1)& (0+255),f,b
  4305  000E7A  0E00               	movlw	0
  4306  000E7C  2379               	addwfc	(f_write@sect+2)& (0+255),f,b
  4307  000E7E  0E00               	movlw	0
  4308  000E80  237A               	addwfc	(f_write@sect+3)& (0+255),f,b
  4309                           
  4310                           ; BSR set to: 1
  4311                           ;ff.c: 3732: cc = btw / ((UINT)512);
  4312  000E82  C0D0  F0D4         	movff	f_write@btw,??_f_write
  4313  000E86  C0D1  F0D5         	movff	f_write@btw+1,??_f_write+1
  4314  000E8A  0E09               	movlw	9
  4315  000E8C  0100               	movlb	0	; () banked
  4316  000E8E  6FD6               	movwf	(??_f_write+2)& (0+255),b
  4317  000E90                     u19115:
  4318  000E90  90D8               	bcf	status,0,c
  4319  000E92  33D5               	rrcf	(??_f_write+1)& (0+255),f,b
  4320  000E94  33D4               	rrcf	??_f_write& (0+255),f,b
  4321  000E96  2FD6               	decfsz	(??_f_write+2)& (0+255),f,b
  4322  000E98  D7FB               	goto	u19115
  4323  000E9A  C0D4  F175         	movff	??_f_write,f_write@cc
  4324  000E9E  C0D5  F176         	movff	??_f_write+1,f_write@cc+1
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;ff.c: 3733: if (cc > 0) {
  4328  000EA2  0101               	movlb	1	; () banked
  4329  000EA4  5175               	movf	f_write@cc& (0+255),w,b
  4330  000EA6  1176               	iorwf	(f_write@cc+1)& (0+255),w,b
  4331  000EA8  B4D8               	btfsc	status,2,c
  4332  000EAA  D0E7               	goto	l1545
  4333                           
  4334                           ; BSR set to: 1
  4335                           ;ff.c: 3734: if (csect + cc > fs->csize) {
  4336  000EAC  5175               	movf	f_write@cc& (0+255),w,b
  4337  000EAE  2573               	addwf	f_write@csect& (0+255),w,b
  4338  000EB0  0100               	movlb	0	; () banked
  4339  000EB2  6FD4               	movwf	??_f_write& (0+255),b
  4340  000EB4  0101               	movlb	1	; () banked
  4341  000EB6  5176               	movf	(f_write@cc+1)& (0+255),w,b
  4342  000EB8  2174               	addwfc	(f_write@csect+1)& (0+255),w,b
  4343  000EBA  0100               	movlb	0	; () banked
  4344  000EBC  6FD5               	movwf	(??_f_write+1)& (0+255),b
  4345  000EBE  0101               	movlb	1	; () banked
  4346  000EC0  EE20 F009          	lfsr	2,9
  4347  000EC4  5181               	movf	f_write@fs& (0+255),w,b
  4348  000EC6  26D9               	addwf	fsr2l,f,c
  4349  000EC8  5182               	movf	(f_write@fs+1)& (0+255),w,b
  4350  000ECA  22DA               	addwfc	fsr2h,f,c
  4351  000ECC  0100               	movlb	0	; () banked
  4352  000ECE  51D4               	movf	??_f_write& (0+255),w,b
  4353  000ED0  5CDE               	subwf	postinc2,w,c
  4354  000ED2  51D5               	movf	(??_f_write+1)& (0+255),w,b
  4355  000ED4  58DE               	subwfb	postinc2,w,c
  4356  000ED6  B0D8               	btfsc	status,0,c
  4357  000ED8  D01D               	goto	l1546
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;ff.c: 3735: cc = fs->csize - csect;
  4361  000EDA  0101               	movlb	1	; () banked
  4362  000EDC  EE20 F009          	lfsr	2,9
  4363  000EE0  5181               	movf	f_write@fs& (0+255),w,b
  4364  000EE2  26D9               	addwf	fsr2l,f,c
  4365  000EE4  5182               	movf	(f_write@fs+1)& (0+255),w,b
  4366  000EE6  22DA               	addwfc	fsr2h,f,c
  4367  000EE8  CFDE F0D4          	movff	postinc2,??_f_write
  4368  000EEC  CFDD F0D5          	movff	postdec2,??_f_write+1
  4369  000EF0  C173  F0D6         	movff	f_write@csect,??_f_write+2
  4370  000EF4  C174  F0D7         	movff	f_write@csect+1,??_f_write+3
  4371  000EF8  0100               	movlb	0	; () banked
  4372  000EFA  1FD6               	comf	(??_f_write+2)& (0+255),f,b
  4373  000EFC  1FD7               	comf	(??_f_write+3)& (0+255),f,b
  4374  000EFE  4BD6               	infsnz	(??_f_write+2)& (0+255),f,b
  4375  000F00  2BD7               	incf	(??_f_write+3)& (0+255),f,b
  4376  000F02  51D4               	movf	??_f_write& (0+255),w,b
  4377  000F04  25D6               	addwf	(??_f_write+2)& (0+255),w,b
  4378  000F06  0101               	movlb	1	; () banked
  4379  000F08  6F75               	movwf	f_write@cc& (0+255),b
  4380  000F0A  0100               	movlb	0	; () banked
  4381  000F0C  51D5               	movf	(??_f_write+1)& (0+255),w,b
  4382  000F0E  21D7               	addwfc	(??_f_write+3)& (0+255),w,b
  4383  000F10  0101               	movlb	1	; () banked
  4384  000F12  6F76               	movwf	(f_write@cc+1)& (0+255),b
  4385  000F14                     l1546:
  4386                           
  4387                           ;ff.c: 3736: }
  4388                           ;ff.c: 3737: if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) { fp->err = (BYTE)(FR_
      +                          DISK_ERR); return FR_DISK_ERR; };
  4389                           
  4390                           ; BSR set to: 1
  4391  000F14  C171  F068         	movff	f_write@wbuff,disk_write@buff
  4392  000F18  C172  F069         	movff	f_write@wbuff+1,disk_write@buff+1
  4393  000F1C  C177  F06A         	movff	f_write@sect,disk_write@sector
  4394  000F20  C178  F06B         	movff	f_write@sect+1,disk_write@sector+1
  4395  000F24  C179  F06C         	movff	f_write@sect+2,disk_write@sector+2
  4396  000F28  C17A  F06D         	movff	f_write@sect+3,disk_write@sector+3
  4397  000F2C  C175  F06E         	movff	f_write@cc,disk_write@count
  4398  000F30  0101               	movlb	1	; () banked
  4399  000F32  EE20 F001          	lfsr	2,1
  4400  000F36  5181               	movf	f_write@fs& (0+255),w,b
  4401  000F38  26D9               	addwf	fsr2l,f,c
  4402  000F3A  5182               	movf	(f_write@fs+1)& (0+255),w,b
  4403  000F3C  22DA               	addwfc	fsr2h,f,c
  4404  000F3E  50DF               	movf	indf2,w,c
  4405  000F40  EC4B  F028         	call	_disk_write
  4406  000F44  0900               	iorlw	0
  4407  000F46  B4D8               	btfsc	status,2,c
  4408  000F48  D00B               	goto	l1547
  4409  000F4A  0100               	movlb	0	; () banked
  4410  000F4C  EE20 F00F          	lfsr	2,15
  4411  000F50  51CC               	movf	f_write@fp& (0+255),w,b
  4412  000F52  26D9               	addwf	fsr2l,f,c
  4413  000F54  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4414  000F56  22DA               	addwfc	fsr2h,f,c
  4415  000F58  0E01               	movlw	1
  4416  000F5A  6EDF               	movwf	indf2,c
  4417                           
  4418                           ; BSR set to: 0
  4419  000F5C  0E01               	movlw	1
  4420                           
  4421                           ; BSR set to: 0
  4422  000F5E  0012               	return	
  4423  000F60                     l1547:
  4424                           
  4425                           ;ff.c: 3740: if (fs->winsect - sect < cc) {
  4426                           
  4427                           ; BSR set to: 0
  4428  000F60  0101               	movlb	1	; () banked
  4429  000F62  5175               	movf	f_write@cc& (0+255),w,b
  4430  000F64  0100               	movlb	0	; () banked
  4431  000F66  6FD4               	movwf	??_f_write& (0+255),b
  4432  000F68  0101               	movlb	1	; () banked
  4433  000F6A  5176               	movf	(f_write@cc+1)& (0+255),w,b
  4434  000F6C  0100               	movlb	0	; () banked
  4435  000F6E  6FD5               	movwf	(??_f_write+1)& (0+255),b
  4436  000F70  6BD6               	clrf	(??_f_write+2)& (0+255),b
  4437  000F72  6BD7               	clrf	(??_f_write+3)& (0+255),b
  4438  000F74  0101               	movlb	1	; () banked
  4439  000F76  EE20 F02B          	lfsr	2,43
  4440  000F7A  5181               	movf	f_write@fs& (0+255),w,b
  4441  000F7C  26D9               	addwf	fsr2l,f,c
  4442  000F7E  5182               	movf	(f_write@fs+1)& (0+255),w,b
  4443  000F80  22DA               	addwfc	fsr2h,f,c
  4444  000F82  CFDE F0D8          	movff	postinc2,??_f_write+4
  4445  000F86  CFDE F0D9          	movff	postinc2,??_f_write+5
  4446  000F8A  CFDE F0DA          	movff	postinc2,??_f_write+6
  4447  000F8E  CFDE F0DB          	movff	postinc2,??_f_write+7
  4448  000F92  C177  F0DC         	movff	f_write@sect,??_f_write+8
  4449  000F96  C178  F0DD         	movff	f_write@sect+1,??_f_write+9
  4450  000F9A  C179  F0DE         	movff	f_write@sect+2,??_f_write+10
  4451  000F9E  C17A  F0DF         	movff	f_write@sect+3,??_f_write+11
  4452  000FA2  0100               	movlb	0	; () banked
  4453  000FA4  1FDC               	comf	(??_f_write+8)& (0+255),f,b
  4454  000FA6  1FDD               	comf	(??_f_write+9)& (0+255),f,b
  4455  000FA8  1FDE               	comf	(??_f_write+10)& (0+255),f,b
  4456  000FAA  1FDF               	comf	(??_f_write+11)& (0+255),f,b
  4457  000FAC  2BDC               	incf	(??_f_write+8)& (0+255),f,b
  4458  000FAE  0E00               	movlw	0
  4459  000FB0  23DD               	addwfc	(??_f_write+9)& (0+255),f,b
  4460  000FB2  23DE               	addwfc	(??_f_write+10)& (0+255),f,b
  4461  000FB4  23DF               	addwfc	(??_f_write+11)& (0+255),f,b
  4462  000FB6  51D8               	movf	(??_f_write+4)& (0+255),w,b
  4463  000FB8  25DC               	addwf	(??_f_write+8)& (0+255),w,b
  4464  000FBA  6FE0               	movwf	(??_f_write+12)& (0+255),b
  4465  000FBC  51D9               	movf	(??_f_write+5)& (0+255),w,b
  4466  000FBE  21DD               	addwfc	(??_f_write+9)& (0+255),w,b
  4467  000FC0  6FE1               	movwf	(??_f_write+13)& (0+255),b
  4468  000FC2  51DA               	movf	(??_f_write+6)& (0+255),w,b
  4469  000FC4  21DE               	addwfc	(??_f_write+10)& (0+255),w,b
  4470  000FC6  6FE2               	movwf	(??_f_write+14)& (0+255),b
  4471  000FC8  51DB               	movf	(??_f_write+7)& (0+255),w,b
  4472  000FCA  21DF               	addwfc	(??_f_write+11)& (0+255),w,b
  4473  000FCC  6FE3               	movwf	(??_f_write+15)& (0+255),b
  4474  000FCE  51D4               	movf	??_f_write& (0+255),w,b
  4475  000FD0  5DE0               	subwf	(??_f_write+12)& (0+255),w,b
  4476  000FD2  51D5               	movf	(??_f_write+1)& (0+255),w,b
  4477  000FD4  59E1               	subwfb	(??_f_write+13)& (0+255),w,b
  4478  000FD6  51D6               	movf	(??_f_write+2)& (0+255),w,b
  4479  000FD8  59E2               	subwfb	(??_f_write+14)& (0+255),w,b
  4480  000FDA  51D7               	movf	(??_f_write+3)& (0+255),w,b
  4481  000FDC  59E3               	subwfb	(??_f_write+15)& (0+255),w,b
  4482  000FDE  B0D8               	btfsc	status,0,c
  4483  000FE0  D03C               	goto	l1548
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;ff.c: 3741: mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * ((UINT)512)), ((UINT)512))
      +                          ;
  4487  000FE2  0E2F               	movlw	47
  4488  000FE4  0101               	movlb	1	; () banked
  4489  000FE6  2581               	addwf	f_write@fs& (0+255),w,b
  4490  000FE8  6E1A               	movwf	mem_cpy@dst,c
  4491  000FEA  0E00               	movlw	0
  4492  000FEC  2182               	addwfc	(f_write@fs+1)& (0+255),w,b
  4493  000FEE  6E1B               	movwf	mem_cpy@dst+1,c
  4494  000FF0  EE20 F02B          	lfsr	2,43
  4495  000FF4  5181               	movf	f_write@fs& (0+255),w,b
  4496  000FF6  26D9               	addwf	fsr2l,f,c
  4497  000FF8  5182               	movf	(f_write@fs+1)& (0+255),w,b
  4498  000FFA  22DA               	addwfc	fsr2h,f,c
  4499  000FFC  CFDE F0D4          	movff	postinc2,??_f_write
  4500  001000  CFDD F0D5          	movff	postdec2,??_f_write+1
  4501  001004  C177  F0D6         	movff	f_write@sect,??_f_write+2
  4502  001008  C178  F0D7         	movff	f_write@sect+1,??_f_write+3
  4503  00100C  0100               	movlb	0	; () banked
  4504  00100E  1FD6               	comf	(??_f_write+2)& (0+255),f,b
  4505  001010  1FD7               	comf	(??_f_write+3)& (0+255),f,b
  4506  001012  4BD6               	infsnz	(??_f_write+2)& (0+255),f,b
  4507  001014  2BD7               	incf	(??_f_write+3)& (0+255),f,b
  4508  001016  51D4               	movf	??_f_write& (0+255),w,b
  4509  001018  27D6               	addwf	(??_f_write+2)& (0+255),f,b
  4510  00101A  51D5               	movf	(??_f_write+1)& (0+255),w,b
  4511  00101C  23D7               	addwfc	(??_f_write+3)& (0+255),f,b
  4512  00101E  0E09               	movlw	9
  4513  001020                     u19165:
  4514  001020  90D8               	bcf	status,0,c
  4515  001022  37D6               	rlcf	(??_f_write+2)& (0+255),f,b
  4516  001024  37D7               	rlcf	(??_f_write+3)& (0+255),f,b
  4517  001026  2EE8               	decfsz	wreg,f,c
  4518  001028  D7FB               	goto	u19165
  4519  00102A  51D6               	movf	(??_f_write+2)& (0+255),w,b
  4520  00102C  0101               	movlb	1	; () banked
  4521  00102E  2571               	addwf	f_write@wbuff& (0+255),w,b
  4522  001030  6E1C               	movwf	mem_cpy@src,c
  4523  001032  0100               	movlb	0	; () banked
  4524  001034  51D7               	movf	(??_f_write+3)& (0+255),w,b
  4525  001036  0101               	movlb	1	; () banked
  4526  001038  2172               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  4527  00103A  6E1D               	movwf	mem_cpy@src+1,c
  4528  00103C  0E02               	movlw	2
  4529  00103E  6E1F               	movwf	mem_cpy@cnt+1,c
  4530  001040  0E00               	movlw	0
  4531  001042  6E1E               	movwf	mem_cpy@cnt,c
  4532  001044  ECEA  F02A         	call	_mem_cpy	;wreg free
  4533                           
  4534                           ;ff.c: 3742: fs->wflag = 0;
  4535  001048  0101               	movlb	1	; () banked
  4536  00104A  EE20 F003          	lfsr	2,3
  4537  00104E  5181               	movf	f_write@fs& (0+255),w,b
  4538  001050  26D9               	addwf	fsr2l,f,c
  4539  001052  5182               	movf	(f_write@fs+1)& (0+255),w,b
  4540  001054  22DA               	addwfc	fsr2h,f,c
  4541  001056  0E00               	movlw	0
  4542  001058  6EDF               	movwf	indf2,c
  4543  00105A                     l1548:
  4544                           
  4545                           ;ff.c: 3743: }
  4546                           ;ff.c: 3751: wcnt = ((UINT)512) * cc;
  4547                           
  4548                           ; BSR set to: 1
  4549  00105A  C175  F0D4         	movff	f_write@cc,??_f_write
  4550  00105E  C176  F0D5         	movff	f_write@cc+1,??_f_write+1
  4551  001062  0E09               	movlw	9
  4552  001064                     u19175:
  4553  001064  90D8               	bcf	status,0,c
  4554  001066  0100               	movlb	0	; () banked
  4555  001068  37D4               	rlcf	??_f_write& (0+255),f,b
  4556  00106A  37D5               	rlcf	(??_f_write+1)& (0+255),f,b
  4557  00106C  2EE8               	decfsz	wreg,f,c
  4558  00106E  D7FA               	goto	u19175
  4559  001070  C0D4  F17F         	movff	??_f_write,f_write@wcnt
  4560  001074  C0D5  F180         	movff	??_f_write+1,f_write@wcnt+1
  4561                           
  4562                           ;ff.c: 3752: continue;
  4563  001078  D0CA               	goto	l1549
  4564  00107A                     l1545:
  4565                           
  4566                           ;ff.c: 3753: }
  4567                           ;ff.c: 3756: if (fp->fptr >= fp->obj.objsize) {
  4568                           
  4569                           ; BSR set to: 0
  4570  00107A  0100               	movlb	0	; () banked
  4571  00107C  EE20 F00A          	lfsr	2,10
  4572  001080  51CC               	movf	f_write@fp& (0+255),w,b
  4573  001082  26D9               	addwf	fsr2l,f,c
  4574  001084  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4575  001086  22DA               	addwfc	fsr2h,f,c
  4576  001088  EE10 F010          	lfsr	1,16
  4577  00108C  51CC               	movf	f_write@fp& (0+255),w,b
  4578  00108E  26E1               	addwf	fsr1l,f,c
  4579  001090  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4580  001092  22E2               	addwfc	fsr1h,f,c
  4581  001094  50DE               	movf	postinc2,w,c
  4582  001096  5CE6               	subwf	postinc1,w,c
  4583  001098  50DE               	movf	postinc2,w,c
  4584  00109A  58E6               	subwfb	postinc1,w,c
  4585  00109C  50DE               	movf	postinc2,w,c
  4586  00109E  58E6               	subwfb	postinc1,w,c
  4587  0010A0  50DE               	movf	postinc2,w,c
  4588  0010A2  58E6               	subwfb	postinc1,w,c
  4589  0010A4  A0D8               	btfss	status,0,c
  4590  0010A6  D023               	goto	l1550
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;ff.c: 3757: if (sync_window(fs) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DI
      +                          SK_ERR; };
  4594  0010A8  C181  F073         	movff	f_write@fs,sync_window@fs
  4595  0010AC  C182  F074         	movff	f_write@fs+1,sync_window@fs+1
  4596  0010B0  ECEC  F01C         	call	_sync_window	;wreg free
  4597  0010B4  0900               	iorlw	0
  4598  0010B6  B4D8               	btfsc	status,2,c
  4599  0010B8  D00B               	goto	l1551
  4600  0010BA  0100               	movlb	0	; () banked
  4601  0010BC  EE20 F00F          	lfsr	2,15
  4602  0010C0  51CC               	movf	f_write@fp& (0+255),w,b
  4603  0010C2  26D9               	addwf	fsr2l,f,c
  4604  0010C4  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4605  0010C6  22DA               	addwfc	fsr2h,f,c
  4606  0010C8  0E01               	movlw	1
  4607  0010CA  6EDF               	movwf	indf2,c
  4608                           
  4609                           ; BSR set to: 0
  4610  0010CC  0E01               	movlw	1
  4611                           
  4612                           ; BSR set to: 0
  4613  0010CE  0012               	return	
  4614  0010D0                     l1551:
  4615                           
  4616                           ;ff.c: 3758: fs->winsect = sect;
  4617                           
  4618                           ; BSR set to: 0
  4619  0010D0  0101               	movlb	1	; () banked
  4620  0010D2  EE20 F02B          	lfsr	2,43
  4621  0010D6  5181               	movf	f_write@fs& (0+255),w,b
  4622  0010D8  26D9               	addwf	fsr2l,f,c
  4623  0010DA  5182               	movf	(f_write@fs+1)& (0+255),w,b
  4624  0010DC  22DA               	addwfc	fsr2h,f,c
  4625  0010DE  C177  FFDE         	movff	f_write@sect,postinc2
  4626  0010E2  C178  FFDE         	movff	f_write@sect+1,postinc2
  4627  0010E6  C179  FFDE         	movff	f_write@sect+2,postinc2
  4628  0010EA  C17A  FFDE         	movff	f_write@sect+3,postinc2
  4629  0010EE                     l1550:
  4630                           
  4631                           ;ff.c: 3759: }
  4632                           ;ff.c: 3767: fp->sect = sect;
  4633  0010EE  0100               	movlb	0	; () banked
  4634  0010F0  EE20 F018          	lfsr	2,24
  4635  0010F4  51CC               	movf	f_write@fp& (0+255),w,b
  4636  0010F6  26D9               	addwf	fsr2l,f,c
  4637  0010F8  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4638  0010FA  22DA               	addwfc	fsr2h,f,c
  4639  0010FC  C177  FFDE         	movff	f_write@sect,postinc2
  4640  001100  C178  FFDE         	movff	f_write@sect+1,postinc2
  4641  001104  C179  FFDE         	movff	f_write@sect+2,postinc2
  4642  001108  C17A  FFDE         	movff	f_write@sect+3,postinc2
  4643  00110C                     l1533:
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;ff.c: 3768: }
  4647                           ;ff.c: 3769: wcnt = ((UINT)512) - (UINT)fp->fptr % ((UINT)512);
  4648  00110C  0EFF               	movlw	255
  4649  00110E  6FD4               	movwf	??_f_write& (0+255),b
  4650  001110  0E01               	movlw	1
  4651  001112  6FD5               	movwf	(??_f_write+1)& (0+255),b
  4652  001114  EE20 F010          	lfsr	2,16
  4653  001118  51CC               	movf	f_write@fp& (0+255),w,b
  4654  00111A  26D9               	addwf	fsr2l,f,c
  4655  00111C  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4656  00111E  22DA               	addwfc	fsr2h,f,c
  4657  001120  CFDE F0D6          	movff	postinc2,??_f_write+2
  4658  001124  CFDD F0D7          	movff	postdec2,??_f_write+3
  4659  001128  51D4               	movf	??_f_write& (0+255),w,b
  4660  00112A  17D6               	andwf	(??_f_write+2)& (0+255),f,b
  4661  00112C  51D5               	movf	(??_f_write+1)& (0+255),w,b
  4662  00112E  17D7               	andwf	(??_f_write+3)& (0+255),f,b
  4663  001130  1FD6               	comf	(??_f_write+2)& (0+255),f,b
  4664  001132  1FD7               	comf	(??_f_write+3)& (0+255),f,b
  4665  001134  4BD6               	infsnz	(??_f_write+2)& (0+255),f,b
  4666  001136  2BD7               	incf	(??_f_write+3)& (0+255),f,b
  4667  001138  0E00               	movlw	0
  4668  00113A  25D6               	addwf	(??_f_write+2)& (0+255),w,b
  4669  00113C  0101               	movlb	1	; () banked
  4670  00113E  6F7F               	movwf	f_write@wcnt& (0+255),b
  4671  001140  0E02               	movlw	2
  4672  001142  0100               	movlb	0	; () banked
  4673  001144  21D7               	addwfc	(??_f_write+3)& (0+255),w,b
  4674  001146  0101               	movlb	1	; () banked
  4675  001148  6F80               	movwf	(f_write@wcnt+1)& (0+255),b
  4676                           
  4677                           ; BSR set to: 1
  4678                           ;ff.c: 3770: if (wcnt > btw) wcnt = btw;
  4679  00114A  517F               	movf	f_write@wcnt& (0+255),w,b
  4680  00114C  0100               	movlb	0	; () banked
  4681  00114E  5DD0               	subwf	f_write@btw& (0+255),w,b
  4682  001150  0101               	movlb	1	; () banked
  4683  001152  5180               	movf	(f_write@wcnt+1)& (0+255),w,b
  4684  001154  0100               	movlb	0	; () banked
  4685  001156  59D1               	subwfb	(f_write@btw+1)& (0+255),w,b
  4686  001158  B0D8               	btfsc	status,0,c
  4687  00115A  D004               	goto	l1552
  4688                           
  4689                           ; BSR set to: 0
  4690  00115C  C0D0  F17F         	movff	f_write@btw,f_write@wcnt
  4691  001160  C0D1  F180         	movff	f_write@btw+1,f_write@wcnt+1
  4692  001164                     l1552:
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;ff.c: 3772: if (move_window(fs, fp->sect) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); re
      +                          turn FR_DISK_ERR; };
  4696                           
  4697                           ; BSR set to: 0
  4698  001164  C181  F085         	movff	f_write@fs,move_window@fs
  4699  001168  C182  F086         	movff	f_write@fs+1,move_window@fs+1
  4700  00116C  EE20 F018          	lfsr	2,24
  4701  001170  51CC               	movf	f_write@fp& (0+255),w,b
  4702  001172  26D9               	addwf	fsr2l,f,c
  4703  001174  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4704  001176  22DA               	addwfc	fsr2h,f,c
  4705  001178  CFDE F087          	movff	postinc2,move_window@sector
  4706  00117C  CFDE F088          	movff	postinc2,move_window@sector+1
  4707  001180  CFDE F089          	movff	postinc2,move_window@sector+2
  4708  001184  CFDE F08A          	movff	postinc2,move_window@sector+3
  4709  001188  EC2E  F026         	call	_move_window	;wreg free
  4710  00118C  0900               	iorlw	0
  4711  00118E  B4D8               	btfsc	status,2,c
  4712  001190  D00B               	goto	l1553
  4713  001192  0100               	movlb	0	; () banked
  4714  001194  EE20 F00F          	lfsr	2,15
  4715  001198  51CC               	movf	f_write@fp& (0+255),w,b
  4716  00119A  26D9               	addwf	fsr2l,f,c
  4717  00119C  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4718  00119E  22DA               	addwfc	fsr2h,f,c
  4719  0011A0  0E01               	movlw	1
  4720  0011A2  6EDF               	movwf	indf2,c
  4721                           
  4722                           ; BSR set to: 0
  4723  0011A4  0E01               	movlw	1
  4724                           
  4725                           ; BSR set to: 0
  4726  0011A6  0012               	return	
  4727  0011A8                     l1553:
  4728                           
  4729                           ;ff.c: 3773: mem_cpy(fs->win + fp->fptr % ((UINT)512), wbuff, wcnt);
  4730                           
  4731                           ; BSR set to: 0
  4732  0011A8  0EFF               	movlw	255
  4733  0011AA  0100               	movlb	0	; () banked
  4734  0011AC  6FD4               	movwf	??_f_write& (0+255),b
  4735  0011AE  0E01               	movlw	1
  4736  0011B0  6FD5               	movwf	(??_f_write+1)& (0+255),b
  4737  0011B2  EE20 F010          	lfsr	2,16
  4738  0011B6  51CC               	movf	f_write@fp& (0+255),w,b
  4739  0011B8  26D9               	addwf	fsr2l,f,c
  4740  0011BA  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4741  0011BC  22DA               	addwfc	fsr2h,f,c
  4742  0011BE  CFDE F0D6          	movff	postinc2,??_f_write+2
  4743  0011C2  CFDD F0D7          	movff	postdec2,??_f_write+3
  4744  0011C6  51D4               	movf	??_f_write& (0+255),w,b
  4745  0011C8  17D6               	andwf	(??_f_write+2)& (0+255),f,b
  4746  0011CA  51D5               	movf	(??_f_write+1)& (0+255),w,b
  4747  0011CC  17D7               	andwf	(??_f_write+3)& (0+255),f,b
  4748  0011CE  0E2F               	movlw	47
  4749  0011D0  27D6               	addwf	(??_f_write+2)& (0+255),f,b
  4750  0011D2  0E00               	movlw	0
  4751  0011D4  23D7               	addwfc	(??_f_write+3)& (0+255),f,b
  4752  0011D6  51D6               	movf	(??_f_write+2)& (0+255),w,b
  4753  0011D8  0101               	movlb	1	; () banked
  4754  0011DA  2581               	addwf	f_write@fs& (0+255),w,b
  4755  0011DC  6E1A               	movwf	mem_cpy@dst,c
  4756  0011DE  0100               	movlb	0	; () banked
  4757  0011E0  51D7               	movf	(??_f_write+3)& (0+255),w,b
  4758  0011E2  0101               	movlb	1	; () banked
  4759  0011E4  2182               	addwfc	(f_write@fs+1)& (0+255),w,b
  4760  0011E6  6E1B               	movwf	mem_cpy@dst+1,c
  4761  0011E8  C171  F01C         	movff	f_write@wbuff,mem_cpy@src
  4762  0011EC  C172  F01D         	movff	f_write@wbuff+1,mem_cpy@src+1
  4763  0011F0  C17F  F01E         	movff	f_write@wcnt,mem_cpy@cnt
  4764  0011F4  C180  F01F         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  4765  0011F8  ECEA  F02A         	call	_mem_cpy	;wreg free
  4766                           
  4767                           ;ff.c: 3774: fs->wflag = 1;
  4768  0011FC  0101               	movlb	1	; () banked
  4769  0011FE  EE20 F003          	lfsr	2,3
  4770  001202  5181               	movf	f_write@fs& (0+255),w,b
  4771  001204  26D9               	addwf	fsr2l,f,c
  4772  001206  5182               	movf	(f_write@fs+1)& (0+255),w,b
  4773  001208  22DA               	addwfc	fsr2h,f,c
  4774  00120A  0E01               	movlw	1
  4775  00120C  6EDF               	movwf	indf2,c
  4776  00120E                     l1549:
  4777                           
  4778                           ; BSR set to: 1
  4779  00120E  0101               	movlb	1	; () banked
  4780  001210  517F               	movf	f_write@wcnt& (0+255),w,b
  4781  001212  0100               	movlb	0	; () banked
  4782  001214  5FD0               	subwf	f_write@btw& (0+255),f,b
  4783  001216  0101               	movlb	1	; () banked
  4784  001218  5180               	movf	(f_write@wcnt+1)& (0+255),w,b
  4785  00121A  0100               	movlb	0	; () banked
  4786  00121C  5BD1               	subwfb	(f_write@btw+1)& (0+255),f,b
  4787                           
  4788                           ; BSR set to: 0
  4789  00121E  C0D2  FFD9         	movff	f_write@bw,fsr2l
  4790  001222  C0D3  FFDA         	movff	f_write@bw+1,fsr2h
  4791  001226  0101               	movlb	1	; () banked
  4792  001228  517F               	movf	f_write@wcnt& (0+255),w,b
  4793  00122A  26DE               	addwf	postinc2,f,c
  4794  00122C  5180               	movf	(f_write@wcnt+1)& (0+255),w,b
  4795  00122E  22DD               	addwfc	postdec2,f,c
  4796                           
  4797                           ; BSR set to: 1
  4798  001230  517F               	movf	f_write@wcnt& (0+255),w,b
  4799  001232  2771               	addwf	f_write@wbuff& (0+255),f,b
  4800  001234  5180               	movf	(f_write@wcnt+1)& (0+255),w,b
  4801  001236  2372               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  4802                           
  4803                           ; BSR set to: 1
  4804  001238  0100               	movlb	0	; () banked
  4805  00123A  EE20 F010          	lfsr	2,16
  4806  00123E  51CC               	movf	f_write@fp& (0+255),w,b
  4807  001240  26D9               	addwf	fsr2l,f,c
  4808  001242  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4809  001244  22DA               	addwfc	fsr2h,f,c
  4810  001246  0101               	movlb	1	; () banked
  4811  001248  517F               	movf	f_write@wcnt& (0+255),w,b
  4812  00124A  26DE               	addwf	postinc2,f,c
  4813  00124C  5180               	movf	(f_write@wcnt+1)& (0+255),w,b
  4814  00124E  22DE               	addwfc	postinc2,f,c
  4815  001250  0E00               	movlw	0
  4816  001252  22DE               	addwfc	postinc2,f,c
  4817  001254  22DE               	addwfc	postinc2,f,c
  4818                           
  4819                           ; BSR set to: 1
  4820  001256  0100               	movlb	0	; () banked
  4821  001258  EE20 F010          	lfsr	2,16
  4822  00125C  51CC               	movf	f_write@fp& (0+255),w,b
  4823  00125E  26D9               	addwf	fsr2l,f,c
  4824  001260  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4825  001262  22DA               	addwfc	fsr2h,f,c
  4826  001264  EE10 F00A          	lfsr	1,10
  4827  001268  51CC               	movf	f_write@fp& (0+255),w,b
  4828  00126A  26E1               	addwf	fsr1l,f,c
  4829  00126C  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4830  00126E  22E2               	addwfc	fsr1h,f,c
  4831  001270  50DE               	movf	postinc2,w,c
  4832  001272  5CE6               	subwf	postinc1,w,c
  4833  001274  50DE               	movf	postinc2,w,c
  4834  001276  58E6               	subwfb	postinc1,w,c
  4835  001278  50DE               	movf	postinc2,w,c
  4836  00127A  58E6               	subwfb	postinc1,w,c
  4837  00127C  50DE               	movf	postinc2,w,c
  4838  00127E  58E6               	subwfb	postinc1,w,c
  4839  001280  A0D8               	btfss	status,0,c
  4840  001282  D003               	goto	l1555
  4841                           
  4842                           ; BSR set to: 0
  4843  001284  EE20 F00A          	lfsr	2,10
  4844  001288  D002               	goto	L1
  4845  00128A                     l1555:
  4846                           
  4847                           ; BSR set to: 0
  4848                           
  4849                           ; BSR set to: 0
  4850  00128A  EE20 F010          	lfsr	2,16
  4851  00128E                     L1:
  4852  00128E  51CC               	movf	f_write@fp& (0+255),w,b
  4853  001290  26D9               	addwf	fsr2l,f,c
  4854  001292  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4855  001294  22DA               	addwfc	fsr2h,f,c
  4856  001296  CFDE F16C          	movff	postinc2,_f_write$3353
  4857  00129A  CFDE F16D          	movff	postinc2,_f_write$3353+1
  4858  00129E  CFDE F16E          	movff	postinc2,_f_write$3353+2
  4859  0012A2  CFDE F16F          	movff	postinc2,_f_write$3353+3
  4860                           
  4861                           ; BSR set to: 0
  4862  0012A6  EE20 F00A          	lfsr	2,10
  4863  0012AA  51CC               	movf	f_write@fp& (0+255),w,b
  4864  0012AC  26D9               	addwf	fsr2l,f,c
  4865  0012AE  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4866  0012B0  22DA               	addwfc	fsr2h,f,c
  4867  0012B2  C16C  FFDE         	movff	_f_write$3353,postinc2
  4868  0012B6  C16D  FFDE         	movff	_f_write$3353+1,postinc2
  4869  0012BA  C16E  FFDE         	movff	_f_write$3353+2,postinc2
  4870  0012BE  C16F  FFDE         	movff	_f_write$3353+3,postinc2
  4871  0012C2                     l1531:
  4872                           
  4873                           ; BSR set to: 0
  4874                           
  4875                           ; BSR set to: 0
  4876  0012C2  51D0               	movf	f_write@btw& (0+255),w,b
  4877  0012C4  11D1               	iorwf	(f_write@btw+1)& (0+255),w,b
  4878  0012C6  A4D8               	btfss	status,2,c
  4879  0012C8  D480               	goto	l1532
  4880  0012CA                     u19230:
  4881                           
  4882                           ;ff.c: 3779: }
  4883                           ;ff.c: 3780: fp->flag |= 0x40;
  4884                           
  4885                           ; BSR set to: 0
  4886  0012CA  0100               	movlb	0	; () banked
  4887  0012CC  EE20 F00E          	lfsr	2,14
  4888  0012D0  51CC               	movf	f_write@fp& (0+255),w,b
  4889  0012D2  26D9               	addwf	fsr2l,f,c
  4890  0012D4  51CD               	movf	(f_write@fp+1)& (0+255),w,b
  4891  0012D6  22DA               	addwfc	fsr2h,f,c
  4892  0012D8  0E00               	movlw	0
  4893  0012DA  8CDB               	bsf	plusw2,6,c
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;ff.c: 3782: return FR_OK;
  4897  0012DC  0E00               	movlw	0
  4898  0012DE  0012               	return	
  4899  0012E0                     __end_of_f_write:
  4900                           	opt stack 0
  4901                           tosu	equ	0xFFF
  4902                           tosh	equ	0xFFE
  4903                           tosl	equ	0xFFD
  4904                           pclath	equ	0xFFA
  4905                           tblptru	equ	0xFF8
  4906                           tblptrh	equ	0xFF7
  4907                           tblptrl	equ	0xFF6
  4908                           tablat	equ	0xFF5
  4909                           prodh	equ	0xFF4
  4910                           prodl	equ	0xFF3
  4911                           intcon	equ	0xFF2
  4912                           intcon2	equ	0xFF1
  4913                           intcon3	equ	0xFF0
  4914                           postinc0	equ	0xFEE
  4915                           wreg	equ	0xFE8
  4916                           postinc1	equ	0xFE6
  4917                           postdec1	equ	0xFE5
  4918                           fsr1h	equ	0xFE2
  4919                           fsr1l	equ	0xFE1
  4920                           indf2	equ	0xFDF
  4921                           postinc2	equ	0xFDE
  4922                           postdec2	equ	0xFDD
  4923                           plusw2	equ	0xFDB
  4924                           fsr2h	equ	0xFDA
  4925                           fsr2l	equ	0xFD9
  4926                           status	equ	0xFD8
  4927                           
  4928 ;; *************** function _f_open *****************
  4929 ;; Defined at:
  4930 ;;		line 3375 in file "bibliotecas/ff.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;  fp              2    8[BANK1 ] PTR struct .
  4933 ;;		 -> SDCard@fil(34), 
  4934 ;;  path            2   10[BANK1 ] PTR const unsigned char 
  4935 ;;		 -> STR_11(11), STR_10(3), 
  4936 ;;  mode            1   12[BANK1 ] unsigned char 
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  dj             40   50[BANK1 ] struct .
  4939 ;;  clst            4   43[BANK1 ] unsigned long 
  4940 ;;  ofs             4   39[BANK1 ] unsigned long 
  4941 ;;  cl              4   35[BANK1 ] unsigned long 
  4942 ;;  bcs             4   31[BANK1 ] unsigned long 
  4943 ;;  sc              4   25[BANK1 ] unsigned long 
  4944 ;;  dw              4   21[BANK1 ] unsigned long 
  4945 ;;  fs              2   47[BANK1 ] PTR struct .
  4946 ;;		 -> NULL(0), fs(559), 
  4947 ;;  res             1   49[BANK1 ] enum E79
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      enum E3962
  4950 ;; Registers used:
  4951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4952 ;; Tracked objects:
  4953 ;;		On entry : 0/0
  4954 ;;		On exit  : 0/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4957 ;;      Params:         0       0       5       0       0       0       0       0       0
  4958 ;;      Locals:         0       0      69       0       0       0       0       0       0
  4959 ;;      Temps:          0       0       8       0       0       0       0       0       0
  4960 ;;      Totals:         0       0      82       0       0       0       0       0       0
  4961 ;;Total ram usage:       82 bytes
  4962 ;; Hardware stack levels used:    1
  4963 ;; Hardware stack levels required when called:   14
  4964 ;; This function calls:
  4965 ;;		_clst2sect
  4966 ;;		_dir_register
  4967 ;;		_find_volume
  4968 ;;		_follow_path
  4969 ;;		_get_fat
  4970 ;;		_get_fattime
  4971 ;;		_ld_clust
  4972 ;;		_ld_dword
  4973 ;;		_move_window
  4974 ;;		_remove_chain
  4975 ;;		_st_clust
  4976 ;;		_st_dword
  4977 ;; This function is called by:
  4978 ;;		_SDCard
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           	psect	text15
  4983  0012E0                     __ptext15:
  4984                           	opt stack 0
  4985  0012E0                     _f_open:
  4986                           	opt stack 14
  4987                           
  4988                           ;ff.c: 3381: FRESULT res;
  4989                           ;ff.c: 3382: DIR_E dj;
  4990                           ;ff.c: 3383: FATFS *fs;
  4991                           ;ff.c: 3385: DWORD dw, cl, bcs, clst, sc;
  4992                           ;ff.c: 3386: FSIZE_t ofs;
  4993                           ;ff.c: 3391: if (!fp) return FR_INVALID_OBJECT;
  4994                           
  4995                           ;incstack = 0
  4996  0012E0  0101               	movlb	1	; () banked
  4997  0012E2  5174               	movf	f_open@fp& (0+255),w,b
  4998  0012E4  1175               	iorwf	(f_open@fp+1)& (0+255),w,b
  4999  0012E6  A4D8               	btfss	status,2,c
  5000  0012E8  D002               	goto	l1457
  5001                           
  5002                           ; BSR set to: 1
  5003  0012EA  0E09               	movlw	9
  5004                           
  5005                           ; BSR set to: 1
  5006  0012EC  0012               	return	
  5007  0012EE                     l1457:
  5008                           
  5009                           ; BSR set to: 1
  5010                           
  5011                           ; BSR set to: 1
  5012  0012EE  0E00               	movlw	0
  5013  0012F0  6F8A               	movwf	(_f_open$3187+1)& (0+255),b
  5014  0012F2  0E3F               	movlw	63
  5015                           
  5016                           ; BSR set to: 1
  5017                           
  5018                           ; BSR set to: 1
  5019  0012F4  6F89               	movwf	_f_open$3187& (0+255),b
  5020                           
  5021                           ; BSR set to: 1
  5022                           
  5023                           ; BSR set to: 1
  5024  0012F6  5189               	movf	_f_open$3187& (0+255),w,b
  5025  0012F8  1778               	andwf	f_open@mode& (0+255),f,b
  5026                           
  5027                           ; BSR set to: 1
  5028                           ;ff.c: 3395: res = find_volume(&path, &fs, mode);
  5029  0012FA  0E76               	movlw	low f_open@path
  5030  0012FC  0100               	movlb	0	; () banked
  5031  0012FE  6F97               	movwf	find_volume@path& (0+255),b
  5032  001300  0E01               	movlw	high f_open@path
  5033  001302  6F98               	movwf	(find_volume@path+1)& (0+255),b
  5034  001304  0E9B               	movlw	low f_open@fs
  5035  001306  6F99               	movwf	find_volume@rfs& (0+255),b
  5036  001308  0E01               	movlw	high f_open@fs
  5037  00130A  6F9A               	movwf	(find_volume@rfs+1)& (0+255),b
  5038  00130C  C178  F09B         	movff	f_open@mode,find_volume@mode
  5039  001310  EC09  F000         	call	_find_volume	;wreg free
  5040  001314  0101               	movlb	1	; () banked
  5041  001316  6F9D               	movwf	f_open@res& (0+255),b
  5042                           
  5043                           ; BSR set to: 1
  5044                           ;ff.c: 3396: if (res == FR_OK) {
  5045  001318  519D               	movf	f_open@res& (0+255),w,b
  5046  00131A  A4D8               	btfss	status,2,c
  5047  00131C  D2A6               	goto	l1494
  5048                           
  5049                           ; BSR set to: 1
  5050                           ;ff.c: 3397: dj.obj.fs = fs;
  5051  00131E  C19B  F19E         	movff	f_open@fs,f_open@dj
  5052  001322  C19C  F19F         	movff	f_open@fs+1,f_open@dj+1
  5053                           
  5054                           ; BSR set to: 1
  5055                           ;ff.c: 3398: ;
  5056                           ;ff.c: 3399: res = follow_path(&dj, path);
  5057  001326  0E9E               	movlw	low f_open@dj
  5058  001328  0100               	movlb	0	; () banked
  5059  00132A  6FF2               	movwf	follow_path@dp& (0+255),b
  5060  00132C  0E01               	movlw	high f_open@dj
  5061  00132E  6FF3               	movwf	(follow_path@dp+1)& (0+255),b
  5062  001330  C176  F0F4         	movff	f_open@path,follow_path@path
  5063  001334  C177  F0F5         	movff	f_open@path+1,follow_path@path+1
  5064  001338  ECAC  F01D         	call	_follow_path	;wreg free
  5065  00133C  0101               	movlb	1	; () banked
  5066  00133E  6F9D               	movwf	f_open@res& (0+255),b
  5067                           
  5068                           ; BSR set to: 1
  5069                           ;ff.c: 3401: if (res == FR_OK) {
  5070  001340  519D               	movf	f_open@res& (0+255),w,b
  5071  001342  B4D8               	btfsc	status,2,c
  5072                           
  5073                           ; BSR set to: 1
  5074                           ;ff.c: 3402: if (dj.fn[11] & 0x80) {
  5075  001344  AFC5               	btfss	(f_open@dj+39)& (0+255),7,b
  5076  001346  D002               	goto	l1465
  5077                           
  5078                           ; BSR set to: 1
  5079                           ;ff.c: 3403: res = FR_INVALID_NAME;
  5080  001348  0E06               	movlw	6
  5081  00134A  6F9D               	movwf	f_open@res& (0+255),b
  5082  00134C                     l1465:
  5083                           
  5084                           ; BSR set to: 1
  5085                           ;ff.c: 3404: }
  5086                           ;ff.c: 3410: }
  5087                           ;ff.c: 3412: if (mode & (0x08 | 0x10 | 0x04)) {
  5088                           
  5089                           ; BSR set to: 1
  5090                           
  5091                           ; BSR set to: 1
  5092  00134C  C178  F179         	movff	f_open@mode,??_f_open
  5093  001350  0E1C               	movlw	28
  5094  001352  1779               	andwf	??_f_open& (0+255),f,b
  5095  001354  B4D8               	btfsc	status,2,c
  5096  001356  D0DD               	goto	l1466
  5097                           
  5098                           ; BSR set to: 1
  5099                           ;ff.c: 3413: if (res != FR_OK) {
  5100  001358  519D               	movf	f_open@res& (0+255),w,b
  5101  00135A  B4D8               	btfsc	status,2,c
  5102  00135C  D00F               	goto	l1467
  5103                           
  5104                           ; BSR set to: 1
  5105                           ;ff.c: 3414: if (res == FR_NO_FILE) {
  5106  00135E  0E04               	movlw	4
  5107  001360  199D               	xorwf	f_open@res& (0+255),w,b
  5108  001362  A4D8               	btfss	status,2,c
  5109  001364  D009               	goto	l1468
  5110                           
  5111                           ; BSR set to: 1
  5112                           ;ff.c: 3418: res = dir_register(&dj);
  5113  001366  0E9E               	movlw	low f_open@dj
  5114  001368  0100               	movlb	0	; () banked
  5115  00136A  6FF6               	movwf	dir_register@dp& (0+255),b
  5116  00136C  0E01               	movlw	high f_open@dj
  5117  00136E  6FF7               	movwf	(dir_register@dp+1)& (0+255),b
  5118  001370  EC91  F023         	call	_dir_register	;wreg free
  5119  001374  0101               	movlb	1	; () banked
  5120  001376  6F9D               	movwf	f_open@res& (0+255),b
  5121  001378                     l1468:
  5122                           
  5123                           ; BSR set to: 1
  5124                           ;ff.c: 3420: }
  5125                           ;ff.c: 3421: mode |= 0x08;
  5126                           
  5127                           ; BSR set to: 1
  5128  001378  8778               	bsf	f_open@mode& (0+255),3,b
  5129                           
  5130                           ;ff.c: 3422: }
  5131  00137A  D00C               	goto	l1472
  5132  00137C                     l1467:
  5133                           
  5134                           ; BSR set to: 1
  5135                           ;ff.c: 3423: else {
  5136                           ;ff.c: 3424: if (dj.obj.attr & (0x01 | 0x10)) {
  5137                           
  5138                           ; BSR set to: 1
  5139  00137C  C1A2  F179         	movff	f_open@dj+4,??_f_open
  5140  001380  0E11               	movlw	17
  5141  001382  1779               	andwf	??_f_open& (0+255),f,b
  5142  001384  B4D8               	btfsc	status,2,c
  5143  001386  D002               	goto	l1470
  5144                           
  5145                           ; BSR set to: 1
  5146                           ;ff.c: 3425: res = FR_DENIED;
  5147  001388  0E07               	movlw	7
  5148  00138A  D003               	goto	L4
  5149  00138C                     l1470:
  5150                           
  5151                           ; BSR set to: 1
  5152                           ;ff.c: 3427: if (mode & 0x04) res = FR_EXIST;
  5153  00138C  A578               	btfss	f_open@mode& (0+255),2,b
  5154  00138E  D002               	goto	l1472
  5155                           
  5156                           ; BSR set to: 1
  5157  001390  0E08               	movlw	8
  5158  001392                     L4:
  5159  001392  6F9D               	movwf	f_open@res& (0+255),b
  5160  001394                     l1472:
  5161                           
  5162                           ; BSR set to: 1
  5163                           ;ff.c: 3428: }
  5164                           ;ff.c: 3429: }
  5165                           ;ff.c: 3430: if (res == FR_OK && (mode & 0x08)) {
  5166                           
  5167                           ; BSR set to: 1
  5168                           
  5169                           ; BSR set to: 1
  5170  001394  519D               	movf	f_open@res& (0+255),w,b
  5171  001396  B4D8               	btfsc	status,2,c
  5172                           
  5173                           ; BSR set to: 1
  5174  001398  A778               	btfss	f_open@mode& (0+255),3,b
  5175  00139A  D0C7               	goto	l1480
  5176                           
  5177                           ; BSR set to: 1
  5178                           ;ff.c: 3452: {
  5179                           ;ff.c: 3454: cl = ld_clust(fs, dj.dir);
  5180  00139C  C19B  F021         	movff	f_open@fs,ld_clust@fs
  5181  0013A0  C19C  F022         	movff	f_open@fs+1,ld_clust@fs+1
  5182  0013A4  C1B8  F023         	movff	f_open@dj+26,ld_clust@dir
  5183  0013A8  C1B9  F024         	movff	f_open@dj+27,ld_clust@dir+1
  5184  0013AC  EC0B  F029         	call	_ld_clust	;wreg free
  5185  0013B0  C021  F18F         	movff	?_ld_clust,f_open@cl
  5186  0013B4  C022  F190         	movff	?_ld_clust+1,f_open@cl+1
  5187  0013B8  C023  F191         	movff	?_ld_clust+2,f_open@cl+2
  5188  0013BC  C024  F192         	movff	?_ld_clust+3,f_open@cl+3
  5189                           
  5190                           ;ff.c: 3455: st_dword(dj.dir + 14, get_fattime());
  5191  0013C0  0E0E               	movlw	14
  5192  0013C2  0101               	movlb	1	; () banked
  5193  0013C4  25B8               	addwf	(f_open@dj+26)& (0+255),w,b
  5194  0013C6  0100               	movlb	0	; () banked
  5195  0013C8  6F86               	movwf	st_dword@ptr& (0+255),b
  5196  0013CA  0E00               	movlw	0
  5197  0013CC  0101               	movlb	1	; () banked
  5198  0013CE  21B9               	addwfc	(f_open@dj+27)& (0+255),w,b
  5199  0013D0  0100               	movlb	0	; () banked
  5200  0013D2  6F87               	movwf	(st_dword@ptr+1)& (0+255),b
  5201  0013D4  EC1A  F022         	call	_get_fattime	;wreg free
  5202  0013D8  C01A  F088         	movff	?_get_fattime,st_dword@val
  5203  0013DC  C01B  F089         	movff	?_get_fattime+1,st_dword@val+1
  5204  0013E0  C01C  F08A         	movff	?_get_fattime+2,st_dword@val+2
  5205  0013E4  C01D  F08B         	movff	?_get_fattime+3,st_dword@val+3
  5206  0013E8  ECF0  F029         	call	_st_dword	;wreg free
  5207                           
  5208                           ;ff.c: 3456: dj.dir[11] = 0x20;
  5209  0013EC  0101               	movlb	1	; () banked
  5210  0013EE  EE20 F00B          	lfsr	2,11
  5211  0013F2  51B8               	movf	(f_open@dj+26)& (0+255),w,b
  5212  0013F4  26D9               	addwf	fsr2l,f,c
  5213  0013F6  51B9               	movf	(f_open@dj+27)& (0+255),w,b
  5214  0013F8  22DA               	addwfc	fsr2h,f,c
  5215  0013FA  0E20               	movlw	32
  5216  0013FC  6EDF               	movwf	indf2,c
  5217                           
  5218                           ; BSR set to: 1
  5219                           ;ff.c: 3457: st_clust(fs, dj.dir, 0);
  5220  0013FE  C19B  F01E         	movff	f_open@fs,st_clust@fs
  5221  001402  C19C  F01F         	movff	f_open@fs+1,st_clust@fs+1
  5222  001406  C1B8  F020         	movff	f_open@dj+26,st_clust@dir
  5223  00140A  C1B9  F021         	movff	f_open@dj+27,st_clust@dir+1
  5224  00140E  0E00               	movlw	0
  5225  001410  6E22               	movwf	st_clust@cl,c
  5226  001412  0E00               	movlw	0
  5227  001414  6E23               	movwf	st_clust@cl+1,c
  5228  001416  0E00               	movlw	0
  5229  001418  6E24               	movwf	st_clust@cl+2,c
  5230  00141A  0E00               	movlw	0
  5231  00141C  6E25               	movwf	st_clust@cl+3,c
  5232  00141E  ECF1  F02B         	call	_st_clust	;wreg free
  5233                           
  5234                           ;ff.c: 3458: st_dword(dj.dir + 28, 0);
  5235  001422  0E1C               	movlw	28
  5236  001424  0101               	movlb	1	; () banked
  5237  001426  25B8               	addwf	(f_open@dj+26)& (0+255),w,b
  5238  001428  0100               	movlb	0	; () banked
  5239  00142A  6F86               	movwf	st_dword@ptr& (0+255),b
  5240  00142C  0E00               	movlw	0
  5241  00142E  0101               	movlb	1	; () banked
  5242  001430  21B9               	addwfc	(f_open@dj+27)& (0+255),w,b
  5243  001432  0100               	movlb	0	; () banked
  5244  001434  6F87               	movwf	(st_dword@ptr+1)& (0+255),b
  5245  001436  0E00               	movlw	0
  5246  001438  6F88               	movwf	st_dword@val& (0+255),b
  5247  00143A  0E00               	movlw	0
  5248  00143C  6F89               	movwf	(st_dword@val+1)& (0+255),b
  5249  00143E  0E00               	movlw	0
  5250  001440  6F8A               	movwf	(st_dword@val+2)& (0+255),b
  5251  001442  0E00               	movlw	0
  5252  001444  6F8B               	movwf	(st_dword@val+3)& (0+255),b
  5253  001446  ECF0  F029         	call	_st_dword	;wreg free
  5254                           
  5255                           ;ff.c: 3459: fs->wflag = 1;
  5256  00144A  0101               	movlb	1	; () banked
  5257  00144C  EE20 F003          	lfsr	2,3
  5258  001450  519B               	movf	f_open@fs& (0+255),w,b
  5259  001452  26D9               	addwf	fsr2l,f,c
  5260  001454  519C               	movf	(f_open@fs+1)& (0+255),w,b
  5261  001456  22DA               	addwfc	fsr2h,f,c
  5262  001458  0E01               	movlw	1
  5263  00145A  6EDF               	movwf	indf2,c
  5264                           
  5265                           ; BSR set to: 1
  5266                           ;ff.c: 3460: if (cl != 0) {
  5267  00145C  518F               	movf	f_open@cl& (0+255),w,b
  5268  00145E  1190               	iorwf	(f_open@cl+1)& (0+255),w,b
  5269  001460  1191               	iorwf	(f_open@cl+2)& (0+255),w,b
  5270  001462  1192               	iorwf	(f_open@cl+3)& (0+255),w,b
  5271  001464  B4D8               	btfsc	status,2,c
  5272  001466  D061               	goto	l1480
  5273                           
  5274                           ; BSR set to: 1
  5275                           ;ff.c: 3461: dw = fs->winsect;
  5276  001468  EE20 F02B          	lfsr	2,43
  5277  00146C  519B               	movf	f_open@fs& (0+255),w,b
  5278  00146E  26D9               	addwf	fsr2l,f,c
  5279  001470  519C               	movf	(f_open@fs+1)& (0+255),w,b
  5280  001472  22DA               	addwfc	fsr2h,f,c
  5281  001474  CFDE F181          	movff	postinc2,f_open@dw
  5282  001478  CFDE F182          	movff	postinc2,f_open@dw+1
  5283  00147C  CFDE F183          	movff	postinc2,f_open@dw+2
  5284  001480  CFDE F184          	movff	postinc2,f_open@dw+3
  5285                           
  5286                           ; BSR set to: 1
  5287                           ;ff.c: 3462: res = remove_chain(&dj.obj, cl, 0);
  5288  001484  0E9E               	movlw	low f_open@dj
  5289  001486  0100               	movlb	0	; () banked
  5290  001488  6FAF               	movwf	remove_chain@obj& (0+255),b
  5291  00148A  0E01               	movlw	high f_open@dj
  5292  00148C  6FB0               	movwf	(remove_chain@obj+1)& (0+255),b
  5293  00148E  C18F  F0B1         	movff	f_open@cl,remove_chain@clst
  5294  001492  C190  F0B2         	movff	f_open@cl+1,remove_chain@clst+1
  5295  001496  C191  F0B3         	movff	f_open@cl+2,remove_chain@clst+2
  5296  00149A  C192  F0B4         	movff	f_open@cl+3,remove_chain@clst+3
  5297  00149E  0E00               	movlw	0
  5298  0014A0  6FB5               	movwf	remove_chain@pclst& (0+255),b
  5299  0014A2  0E00               	movlw	0
  5300  0014A4  6FB6               	movwf	(remove_chain@pclst+1)& (0+255),b
  5301  0014A6  0E00               	movlw	0
  5302  0014A8  6FB7               	movwf	(remove_chain@pclst+2)& (0+255),b
  5303  0014AA  0E00               	movlw	0
  5304  0014AC  6FB8               	movwf	(remove_chain@pclst+3)& (0+255),b
  5305  0014AE  EC5A  F01A         	call	_remove_chain	;wreg free
  5306  0014B2  0101               	movlb	1	; () banked
  5307  0014B4  6F9D               	movwf	f_open@res& (0+255),b
  5308                           
  5309                           ; BSR set to: 1
  5310                           ;ff.c: 3463: if (res == FR_OK) {
  5311  0014B6  519D               	movf	f_open@res& (0+255),w,b
  5312  0014B8  A4D8               	btfss	status,2,c
  5313  0014BA  D037               	goto	l1480
  5314                           
  5315                           ; BSR set to: 1
  5316                           ;ff.c: 3464: res = move_window(fs, dw);
  5317  0014BC  C19B  F085         	movff	f_open@fs,move_window@fs
  5318  0014C0  C19C  F086         	movff	f_open@fs+1,move_window@fs+1
  5319  0014C4  C181  F087         	movff	f_open@dw,move_window@sector
  5320  0014C8  C182  F088         	movff	f_open@dw+1,move_window@sector+1
  5321  0014CC  C183  F089         	movff	f_open@dw+2,move_window@sector+2
  5322  0014D0  C184  F08A         	movff	f_open@dw+3,move_window@sector+3
  5323  0014D4  EC2E  F026         	call	_move_window	;wreg free
  5324  0014D8  0101               	movlb	1	; () banked
  5325  0014DA  6F9D               	movwf	f_open@res& (0+255),b
  5326                           
  5327                           ; BSR set to: 1
  5328                           ;ff.c: 3465: fs->last_clst = cl - 1;
  5329  0014DC  0EFF               	movlw	255
  5330  0014DE  258F               	addwf	f_open@cl& (0+255),w,b
  5331  0014E0  6F79               	movwf	??_f_open& (0+255),b
  5332  0014E2  0EFF               	movlw	255
  5333  0014E4  2190               	addwfc	(f_open@cl+1)& (0+255),w,b
  5334  0014E6  6F7A               	movwf	(??_f_open+1)& (0+255),b
  5335  0014E8  0EFF               	movlw	255
  5336  0014EA  2191               	addwfc	(f_open@cl+2)& (0+255),w,b
  5337  0014EC  6F7B               	movwf	(??_f_open+2)& (0+255),b
  5338  0014EE  0EFF               	movlw	255
  5339  0014F0  2192               	addwfc	(f_open@cl+3)& (0+255),w,b
  5340  0014F2  6F7C               	movwf	(??_f_open+3)& (0+255),b
  5341  0014F4  EE20 F00B          	lfsr	2,11
  5342  0014F8  519B               	movf	f_open@fs& (0+255),w,b
  5343  0014FA  26D9               	addwf	fsr2l,f,c
  5344  0014FC  519C               	movf	(f_open@fs+1)& (0+255),w,b
  5345  0014FE  22DA               	addwfc	fsr2h,f,c
  5346  001500  C179  FFDE         	movff	??_f_open,postinc2
  5347  001504  C17A  FFDE         	movff	??_f_open+1,postinc2
  5348  001508  C17B  FFDE         	movff	??_f_open+2,postinc2
  5349  00150C  C17C  FFDE         	movff	??_f_open+3,postinc2
  5350                           
  5351                           ; BSR set to: 1
  5352                           ;ff.c: 3466: }
  5353                           ;ff.c: 3467: }
  5354                           ;ff.c: 3468: }
  5355                           ;ff.c: 3469: }
  5356                           ;ff.c: 3470: }
  5357                           
  5358                           ; BSR set to: 1
  5359                           
  5360                           ; BSR set to: 1
  5361  001510  D00C               	goto	l1480
  5362  001512                     l1466:
  5363                           
  5364                           ; BSR set to: 1
  5365                           ;ff.c: 3471: else {
  5366                           ;ff.c: 3472: if (res == FR_OK) {
  5367                           
  5368                           ; BSR set to: 1
  5369  001512  519D               	movf	f_open@res& (0+255),w,b
  5370  001514  A4D8               	btfss	status,2,c
  5371  001516  D009               	goto	l1480
  5372                           
  5373                           ; BSR set to: 1
  5374                           ;ff.c: 3473: if (dj.obj.attr & 0x10) {
  5375  001518  A9A2               	btfss	(f_open@dj+4)& (0+255),4,b
  5376  00151A  D002               	goto	l1478
  5377                           
  5378                           ; BSR set to: 1
  5379                           ;ff.c: 3474: res = FR_NO_FILE;
  5380  00151C  0E04               	movlw	4
  5381  00151E  D004               	goto	L5
  5382  001520                     l1478:
  5383                           
  5384                           ; BSR set to: 1
  5385                           ;ff.c: 3476: if ((mode & 0x02) && (dj.obj.attr & 0x01)) {
  5386  001520  B378               	btfsc	f_open@mode& (0+255),1,b
  5387                           
  5388                           ; BSR set to: 1
  5389  001522  A1A2               	btfss	(f_open@dj+4)& (0+255),0,b
  5390  001524  D002               	goto	l1480
  5391                           
  5392                           ; BSR set to: 1
  5393                           ;ff.c: 3477: res = FR_DENIED;
  5394  001526  0E07               	movlw	7
  5395  001528                     L5:
  5396  001528  6F9D               	movwf	f_open@res& (0+255),b
  5397  00152A                     l1480:
  5398                           
  5399                           ; BSR set to: 1
  5400                           ;ff.c: 3478: }
  5401                           ;ff.c: 3479: }
  5402                           ;ff.c: 3480: }
  5403                           ;ff.c: 3481: }
  5404                           ;ff.c: 3482: if (res == FR_OK) {
  5405                           
  5406                           ; BSR set to: 1
  5407                           
  5408                           ; BSR set to: 1
  5409                           
  5410                           ; BSR set to: 1
  5411  00152A  519D               	movf	f_open@res& (0+255),w,b
  5412  00152C  A4D8               	btfss	status,2,c
  5413  00152E  D020               	goto	l1481
  5414                           
  5415                           ; BSR set to: 1
  5416                           ;ff.c: 3483: if (mode & 0x08) mode |= 0x40;
  5417  001530  B778               	btfsc	f_open@mode& (0+255),3,b
  5418                           
  5419                           ; BSR set to: 1
  5420  001532  8D78               	bsf	f_open@mode& (0+255),6,b
  5421                           
  5422                           ; BSR set to: 1
  5423                           ;ff.c: 3484: fp->dir_sect = fs->winsect;
  5424                           
  5425                           ; BSR set to: 1
  5426  001534  EE20 F02B          	lfsr	2,43
  5427  001538  519B               	movf	f_open@fs& (0+255),w,b
  5428  00153A  26D9               	addwf	fsr2l,f,c
  5429  00153C  519C               	movf	(f_open@fs+1)& (0+255),w,b
  5430  00153E  22DA               	addwfc	fsr2h,f,c
  5431  001540  EE10 F01C          	lfsr	1,28
  5432  001544  5174               	movf	f_open@fp& (0+255),w,b
  5433  001546  26E1               	addwf	fsr1l,f,c
  5434  001548  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5435  00154A  22E2               	addwfc	fsr1h,f,c
  5436  00154C  CFDE FFE6          	movff	postinc2,postinc1
  5437  001550  CFDE FFE6          	movff	postinc2,postinc1
  5438  001554  CFDE FFE6          	movff	postinc2,postinc1
  5439  001558  CFDE FFE6          	movff	postinc2,postinc1
  5440                           
  5441                           ; BSR set to: 1
  5442                           ;ff.c: 3485: fp->dir_ptr = dj.dir;
  5443  00155C  EE20 F020          	lfsr	2,32
  5444  001560  5174               	movf	f_open@fp& (0+255),w,b
  5445  001562  26D9               	addwf	fsr2l,f,c
  5446  001564  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5447  001566  22DA               	addwfc	fsr2h,f,c
  5448  001568  C1B8  FFDE         	movff	f_open@dj+26,postinc2
  5449  00156C  C1B9  FFDD         	movff	f_open@dj+27,postdec2
  5450  001570                     l1481:
  5451                           
  5452                           ; BSR set to: 1
  5453                           ;ff.c: 3490: }
  5454                           ;ff.c: 3503: if (res == FR_OK) {
  5455                           
  5456                           ; BSR set to: 1
  5457  001570  519D               	movf	f_open@res& (0+255),w,b
  5458  001572  A4D8               	btfss	status,2,c
  5459  001574  D17A               	goto	l1494
  5460                           
  5461                           ; BSR set to: 1
  5462                           ;ff.c: 3515: {
  5463                           ;ff.c: 3516: fp->obj.sclust = ld_clust(fs, dj.dir);
  5464  001576  C19B  F021         	movff	f_open@fs,ld_clust@fs
  5465  00157A  C19C  F022         	movff	f_open@fs+1,ld_clust@fs+1
  5466  00157E  C1B8  F023         	movff	f_open@dj+26,ld_clust@dir
  5467  001582  C1B9  F024         	movff	f_open@dj+27,ld_clust@dir+1
  5468  001586  EC0B  F029         	call	_ld_clust	;wreg free
  5469  00158A  0101               	movlb	1	; () banked
  5470  00158C  EE20 F006          	lfsr	2,6
  5471  001590  5174               	movf	f_open@fp& (0+255),w,b
  5472  001592  26D9               	addwf	fsr2l,f,c
  5473  001594  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5474  001596  22DA               	addwfc	fsr2h,f,c
  5475  001598  C021  FFDE         	movff	?_ld_clust,postinc2
  5476  00159C  C022  FFDE         	movff	?_ld_clust+1,postinc2
  5477  0015A0  C023  FFDE         	movff	?_ld_clust+2,postinc2
  5478  0015A4  C024  FFDE         	movff	?_ld_clust+3,postinc2
  5479                           
  5480                           ;ff.c: 3517: fp->obj.objsize = ld_dword(dj.dir + 28);
  5481  0015A8  0E1C               	movlw	28
  5482  0015AA  25B8               	addwf	(f_open@dj+26)& (0+255),w,b
  5483  0015AC  6E1A               	movwf	ld_dword@ptr,c
  5484  0015AE  0E00               	movlw	0
  5485  0015B0  21B9               	addwfc	(f_open@dj+27)& (0+255),w,b
  5486  0015B2  6E1B               	movwf	ld_dword@ptr+1,c
  5487  0015B4  EC7C  F025         	call	_ld_dword	;wreg free
  5488  0015B8  0101               	movlb	1	; () banked
  5489  0015BA  EE20 F00A          	lfsr	2,10
  5490  0015BE  5174               	movf	f_open@fp& (0+255),w,b
  5491  0015C0  26D9               	addwf	fsr2l,f,c
  5492  0015C2  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5493  0015C4  22DA               	addwfc	fsr2h,f,c
  5494  0015C6  C01A  FFDE         	movff	?_ld_dword,postinc2
  5495  0015CA  C01B  FFDE         	movff	?_ld_dword+1,postinc2
  5496  0015CE  C01C  FFDE         	movff	?_ld_dword+2,postinc2
  5497  0015D2  C01D  FFDE         	movff	?_ld_dword+3,postinc2
  5498                           
  5499                           ; BSR set to: 1
  5500                           ;ff.c: 3518: }
  5501                           ;ff.c: 3522: fp->obj.fs = fs;
  5502  0015D6  C174  FFD9         	movff	f_open@fp,fsr2l
  5503  0015DA  C175  FFDA         	movff	f_open@fp+1,fsr2h
  5504  0015DE  C19B  FFDE         	movff	f_open@fs,postinc2
  5505  0015E2  C19C  FFDD         	movff	f_open@fs+1,postdec2
  5506                           
  5507                           ; BSR set to: 1
  5508                           ;ff.c: 3523: fp->obj.id = fs->id;
  5509  0015E6  EE20 F005          	lfsr	2,5
  5510  0015EA  519B               	movf	f_open@fs& (0+255),w,b
  5511  0015EC  26D9               	addwf	fsr2l,f,c
  5512  0015EE  519C               	movf	(f_open@fs+1)& (0+255),w,b
  5513  0015F0  22DA               	addwfc	fsr2h,f,c
  5514  0015F2  EE10 F002          	lfsr	1,2
  5515  0015F6  5174               	movf	f_open@fp& (0+255),w,b
  5516  0015F8  26E1               	addwf	fsr1l,f,c
  5517  0015FA  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5518  0015FC  22E2               	addwfc	fsr1h,f,c
  5519  0015FE  CFDE FFE6          	movff	postinc2,postinc1
  5520  001602  CFDD FFE5          	movff	postdec2,postdec1
  5521                           
  5522                           ; BSR set to: 1
  5523                           ;ff.c: 3524: fp->flag = mode;
  5524  001606  EE20 F00E          	lfsr	2,14
  5525  00160A  5174               	movf	f_open@fp& (0+255),w,b
  5526  00160C  26D9               	addwf	fsr2l,f,c
  5527  00160E  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5528  001610  22DA               	addwfc	fsr2h,f,c
  5529  001612  C178  FFDF         	movff	f_open@mode,indf2
  5530                           
  5531                           ; BSR set to: 1
  5532                           ;ff.c: 3525: fp->err = 0;
  5533  001616  EE20 F00F          	lfsr	2,15
  5534  00161A  5174               	movf	f_open@fp& (0+255),w,b
  5535  00161C  26D9               	addwf	fsr2l,f,c
  5536  00161E  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5537  001620  22DA               	addwfc	fsr2h,f,c
  5538  001622  0E00               	movlw	0
  5539  001624  6EDF               	movwf	indf2,c
  5540                           
  5541                           ; BSR set to: 1
  5542                           ;ff.c: 3526: fp->sect = 0;
  5543  001626  EE20 F018          	lfsr	2,24
  5544  00162A  5174               	movf	f_open@fp& (0+255),w,b
  5545  00162C  26D9               	addwf	fsr2l,f,c
  5546  00162E  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5547  001630  22DA               	addwfc	fsr2h,f,c
  5548  001632  6ADE               	clrf	postinc2,c
  5549  001634  6ADE               	clrf	postinc2,c
  5550  001636  6ADE               	clrf	postinc2,c
  5551  001638  6ADD               	clrf	postdec2,c
  5552                           
  5553                           ; BSR set to: 1
  5554                           ;ff.c: 3527: fp->fptr = 0;
  5555  00163A  EE20 F010          	lfsr	2,16
  5556  00163E  5174               	movf	f_open@fp& (0+255),w,b
  5557  001640  26D9               	addwf	fsr2l,f,c
  5558  001642  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5559  001644  22DA               	addwfc	fsr2h,f,c
  5560  001646  6ADE               	clrf	postinc2,c
  5561  001648  6ADE               	clrf	postinc2,c
  5562  00164A  6ADE               	clrf	postinc2,c
  5563  00164C  6ADD               	clrf	postdec2,c
  5564                           
  5565                           ; BSR set to: 1
  5566                           ;ff.c: 3532: if ((mode & 0x20) && fp->obj.objsize > 0) {
  5567  00164E  AB78               	btfss	f_open@mode& (0+255),5,b
  5568  001650  D10C               	goto	l1494
  5569                           
  5570                           ; BSR set to: 1
  5571  001652  EE20 F00A          	lfsr	2,10
  5572  001656  5174               	movf	f_open@fp& (0+255),w,b
  5573  001658  26D9               	addwf	fsr2l,f,c
  5574  00165A  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5575  00165C  22DA               	addwfc	fsr2h,f,c
  5576  00165E  50DE               	movf	postinc2,w,c
  5577  001660  10DE               	iorwf	postinc2,w,c
  5578  001662  10DE               	iorwf	postinc2,w,c
  5579  001664  10DE               	iorwf	postinc2,w,c
  5580  001666  B4D8               	btfsc	status,2,c
  5581  001668  D100               	goto	l1494
  5582                           
  5583                           ; BSR set to: 1
  5584                           ;ff.c: 3533: fp->fptr = fp->obj.objsize;
  5585  00166A  EE20 F00A          	lfsr	2,10
  5586  00166E  5174               	movf	f_open@fp& (0+255),w,b
  5587  001670  26D9               	addwf	fsr2l,f,c
  5588  001672  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5589  001674  22DA               	addwfc	fsr2h,f,c
  5590  001676  EE10 F010          	lfsr	1,16
  5591  00167A  5174               	movf	f_open@fp& (0+255),w,b
  5592  00167C  26E1               	addwf	fsr1l,f,c
  5593  00167E  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5594  001680  22E2               	addwfc	fsr1h,f,c
  5595  001682  CFDE FFE6          	movff	postinc2,postinc1
  5596  001686  CFDE FFE6          	movff	postinc2,postinc1
  5597  00168A  CFDE FFE6          	movff	postinc2,postinc1
  5598  00168E  CFDE FFE6          	movff	postinc2,postinc1
  5599                           
  5600                           ; BSR set to: 1
  5601                           ;ff.c: 3534: bcs = (DWORD)fs->csize * ((UINT)512);
  5602  001692  EE20 F009          	lfsr	2,9
  5603  001696  519B               	movf	f_open@fs& (0+255),w,b
  5604  001698  26D9               	addwf	fsr2l,f,c
  5605  00169A  519C               	movf	(f_open@fs+1)& (0+255),w,b
  5606  00169C  22DA               	addwfc	fsr2h,f,c
  5607  00169E  CFDE F179          	movff	postinc2,??_f_open
  5608  0016A2  CFDD F17A          	movff	postdec2,??_f_open+1
  5609  0016A6  5179               	movf	??_f_open& (0+255),w,b
  5610  0016A8  6F7B               	movwf	(??_f_open+2)& (0+255),b
  5611  0016AA  517A               	movf	(??_f_open+1)& (0+255),w,b
  5612  0016AC  6F7C               	movwf	(??_f_open+3)& (0+255),b
  5613  0016AE  6B7D               	clrf	(??_f_open+4)& (0+255),b
  5614  0016B0  6B7E               	clrf	(??_f_open+5)& (0+255),b
  5615  0016B2  0E09               	movlw	9
  5616  0016B4                     u18845:
  5617  0016B4  90D8               	bcf	status,0,c
  5618  0016B6  377B               	rlcf	(??_f_open+2)& (0+255),f,b
  5619  0016B8  377C               	rlcf	(??_f_open+3)& (0+255),f,b
  5620  0016BA  377D               	rlcf	(??_f_open+4)& (0+255),f,b
  5621  0016BC  377E               	rlcf	(??_f_open+5)& (0+255),f,b
  5622  0016BE  2EE8               	decfsz	wreg,f,c
  5623  0016C0  D7F9               	goto	u18845
  5624  0016C2  C17B  F18B         	movff	??_f_open+2,f_open@bcs
  5625  0016C6  C17C  F18C         	movff	??_f_open+3,f_open@bcs+1
  5626  0016CA  C17D  F18D         	movff	??_f_open+4,f_open@bcs+2
  5627  0016CE  C17E  F18E         	movff	??_f_open+5,f_open@bcs+3
  5628                           
  5629                           ; BSR set to: 1
  5630                           ;ff.c: 3535: clst = fp->obj.sclust;
  5631  0016D2  EE20 F006          	lfsr	2,6
  5632  0016D6  5174               	movf	f_open@fp& (0+255),w,b
  5633  0016D8  26D9               	addwf	fsr2l,f,c
  5634  0016DA  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5635  0016DC  22DA               	addwfc	fsr2h,f,c
  5636  0016DE  CFDE F197          	movff	postinc2,f_open@clst
  5637  0016E2  CFDE F198          	movff	postinc2,f_open@clst+1
  5638  0016E6  CFDE F199          	movff	postinc2,f_open@clst+2
  5639  0016EA  CFDE F19A          	movff	postinc2,f_open@clst+3
  5640                           
  5641                           ; BSR set to: 1
  5642                           ;ff.c: 3536: for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
  5643  0016EE  EE20 F00A          	lfsr	2,10
  5644  0016F2  5174               	movf	f_open@fp& (0+255),w,b
  5645  0016F4  26D9               	addwf	fsr2l,f,c
  5646  0016F6  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5647  0016F8  22DA               	addwfc	fsr2h,f,c
  5648  0016FA  CFDE F193          	movff	postinc2,f_open@ofs
  5649  0016FE  CFDE F194          	movff	postinc2,f_open@ofs+1
  5650  001702  CFDE F195          	movff	postinc2,f_open@ofs+2
  5651  001706  CFDE F196          	movff	postinc2,f_open@ofs+3
  5652  00170A  D034               	goto	l1485
  5653  00170C                     
  5654                           ; BSR set to: 1
  5655                           ;ff.c: 3537: clst = get_fat(&fp->obj, clst);
  5656                           
  5657                           ; BSR set to: 1
  5658  00170C  C174  F090         	movff	f_open@fp,get_fat@obj
  5659  001710  C175  F091         	movff	f_open@fp+1,get_fat@obj+1
  5660  001714  C197  F092         	movff	f_open@clst,get_fat@clst
  5661  001718  C198  F093         	movff	f_open@clst+1,get_fat@clst+1
  5662  00171C  C199  F094         	movff	f_open@clst+2,get_fat@clst+2
  5663  001720  C19A  F095         	movff	f_open@clst+3,get_fat@clst+3
  5664  001724  ECE9  F014         	call	_get_fat	;wreg free
  5665  001728  C090  F197         	movff	?_get_fat,f_open@clst
  5666  00172C  C091  F198         	movff	?_get_fat+1,f_open@clst+1
  5667  001730  C092  F199         	movff	?_get_fat+2,f_open@clst+2
  5668  001734  C093  F19A         	movff	?_get_fat+3,f_open@clst+3
  5669                           
  5670                           ;ff.c: 3538: if (clst <= 1) res = FR_INT_ERR;
  5671  001738  0101               	movlb	1	; () banked
  5672  00173A  519A               	movf	(f_open@clst+3)& (0+255),w,b
  5673  00173C  1199               	iorwf	(f_open@clst+2)& (0+255),w,b
  5674  00173E  1198               	iorwf	(f_open@clst+1)& (0+255),w,b
  5675  001740  E106               	bnz	l14376
  5676  001742  0E02               	movlw	2
  5677  001744  5D97               	subwf	f_open@clst& (0+255),w,b
  5678  001746  B0D8               	btfsc	status,0,c
  5679  001748  D002               	goto	l1487
  5680                           
  5681                           ; BSR set to: 1
  5682  00174A  0E02               	movlw	2
  5683  00174C  6F9D               	movwf	f_open@res& (0+255),b
  5684  00174E                     l1487:
  5685  00174E                     l14376:
  5686                           
  5687                           ; BSR set to: 1
  5688                           ;ff.c: 3539: if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
  5689  00174E  2997               	incf	f_open@clst& (0+255),w,b
  5690  001750  E109               	bnz	l14380
  5691  001752  2998               	incf	(f_open@clst+1)& (0+255),w,b
  5692  001754  E107               	bnz	l14380
  5693  001756  2999               	incf	(f_open@clst+2)& (0+255),w,b
  5694  001758  E105               	bnz	l14380
  5695  00175A  299A               	incf	(f_open@clst+3)& (0+255),w,b
  5696  00175C  A4D8               	btfss	status,2,c
  5697  00175E  D002               	goto	l1488
  5698                           
  5699                           ; BSR set to: 1
  5700  001760  0E01               	movlw	1
  5701  001762  6F9D               	movwf	f_open@res& (0+255),b
  5702  001764                     l1488:
  5703  001764                     l14380:
  5704                           
  5705                           ; BSR set to: 1
  5706  001764  518B               	movf	f_open@bcs& (0+255),w,b
  5707  001766  5F93               	subwf	f_open@ofs& (0+255),f,b
  5708  001768  518C               	movf	(f_open@bcs+1)& (0+255),w,b
  5709  00176A  5B94               	subwfb	(f_open@ofs+1)& (0+255),f,b
  5710  00176C  518D               	movf	(f_open@bcs+2)& (0+255),w,b
  5711  00176E  5B95               	subwfb	(f_open@ofs+2)& (0+255),f,b
  5712  001770  518E               	movf	(f_open@bcs+3)& (0+255),w,b
  5713  001772  5B96               	subwfb	(f_open@ofs+3)& (0+255),f,b
  5714  001774                     l1485:
  5715                           
  5716                           ; BSR set to: 1
  5717                           
  5718                           ; BSR set to: 1
  5719  001774  519D               	movf	f_open@res& (0+255),w,b
  5720  001776  A4D8               	btfss	status,2,c
  5721  001778  D00A               	goto	u18880
  5722                           
  5723                           ; BSR set to: 1
  5724  00177A  5193               	movf	f_open@ofs& (0+255),w,b
  5725  00177C  5D8B               	subwf	f_open@bcs& (0+255),w,b
  5726  00177E  5194               	movf	(f_open@ofs+1)& (0+255),w,b
  5727  001780  598C               	subwfb	(f_open@bcs+1)& (0+255),w,b
  5728  001782  5195               	movf	(f_open@ofs+2)& (0+255),w,b
  5729  001784  598D               	subwfb	(f_open@bcs+2)& (0+255),w,b
  5730  001786  5196               	movf	(f_open@ofs+3)& (0+255),w,b
  5731  001788  598E               	subwfb	(f_open@bcs+3)& (0+255),w,b
  5732  00178A  A0D8               	btfss	status,0,c
  5733  00178C  D7BF               	goto	l1486
  5734  00178E                     u18880:
  5735                           
  5736                           ; BSR set to: 1
  5737                           ;ff.c: 3540: }
  5738                           ;ff.c: 3541: fp->clust = clst;
  5739                           
  5740                           ; BSR set to: 1
  5741                           
  5742                           ; BSR set to: 1
  5743  00178E  EE20 F014          	lfsr	2,20
  5744  001792  5174               	movf	f_open@fp& (0+255),w,b
  5745  001794  26D9               	addwf	fsr2l,f,c
  5746  001796  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5747  001798  22DA               	addwfc	fsr2h,f,c
  5748  00179A  C197  FFDE         	movff	f_open@clst,postinc2
  5749  00179E  C198  FFDE         	movff	f_open@clst+1,postinc2
  5750  0017A2  C199  FFDE         	movff	f_open@clst+2,postinc2
  5751  0017A6  C19A  FFDE         	movff	f_open@clst+3,postinc2
  5752                           
  5753                           ; BSR set to: 1
  5754                           ;ff.c: 3542: if (res == FR_OK && ofs % ((UINT)512)) {
  5755  0017AA  519D               	movf	f_open@res& (0+255),w,b
  5756  0017AC  A4D8               	btfss	status,2,c
  5757  0017AE  D05D               	goto	l1494
  5758                           
  5759                           ; BSR set to: 1
  5760  0017B0  0EFF               	movlw	255
  5761  0017B2  1593               	andwf	f_open@ofs& (0+255),w,b
  5762  0017B4  6F79               	movwf	??_f_open& (0+255),b
  5763  0017B6  0E01               	movlw	1
  5764  0017B8  1594               	andwf	(f_open@ofs+1)& (0+255),w,b
  5765  0017BA  6F7A               	movwf	(??_f_open+1)& (0+255),b
  5766  0017BC  0E00               	movlw	0
  5767  0017BE  1595               	andwf	(f_open@ofs+2)& (0+255),w,b
  5768  0017C0  6F7B               	movwf	(??_f_open+2)& (0+255),b
  5769  0017C2  0E00               	movlw	0
  5770  0017C4  1596               	andwf	(f_open@ofs+3)& (0+255),w,b
  5771  0017C6  6F7C               	movwf	(??_f_open+3)& (0+255),b
  5772  0017C8  5179               	movf	??_f_open& (0+255),w,b
  5773  0017CA  117A               	iorwf	(??_f_open+1)& (0+255),w,b
  5774  0017CC  117B               	iorwf	(??_f_open+2)& (0+255),w,b
  5775  0017CE  117C               	iorwf	(??_f_open+3)& (0+255),w,b
  5776  0017D0  B4D8               	btfsc	status,2,c
  5777  0017D2  D04B               	goto	l1494
  5778                           
  5779                           ; BSR set to: 1
  5780                           ;ff.c: 3543: if ((sc = clst2sect(fs, clst)) == 0) {
  5781  0017D4  C19B  F026         	movff	f_open@fs,clst2sect@fs
  5782  0017D8  C19C  F027         	movff	f_open@fs+1,clst2sect@fs+1
  5783  0017DC  C197  F028         	movff	f_open@clst,clst2sect@clst
  5784  0017E0  C198  F029         	movff	f_open@clst+1,clst2sect@clst+1
  5785  0017E4  C199  F02A         	movff	f_open@clst+2,clst2sect@clst+2
  5786  0017E8  C19A  F02B         	movff	f_open@clst+3,clst2sect@clst+3
  5787  0017EC  ECFA  F023         	call	_clst2sect	;wreg free
  5788  0017F0  C026  F185         	movff	?_clst2sect,f_open@sc
  5789  0017F4  C027  F186         	movff	?_clst2sect+1,f_open@sc+1
  5790  0017F8  C028  F187         	movff	?_clst2sect+2,f_open@sc+2
  5791  0017FC  C029  F188         	movff	?_clst2sect+3,f_open@sc+3
  5792  001800  0101               	movlb	1	; () banked
  5793  001802  5185               	movf	f_open@sc& (0+255),w,b
  5794  001804  1186               	iorwf	(f_open@sc+1)& (0+255),w,b
  5795  001806  1187               	iorwf	(f_open@sc+2)& (0+255),w,b
  5796  001808  1188               	iorwf	(f_open@sc+3)& (0+255),w,b
  5797  00180A  A4D8               	btfss	status,2,c
  5798  00180C  D003               	goto	l1493
  5799                           
  5800                           ; BSR set to: 1
  5801                           ;ff.c: 3544: res = FR_INT_ERR;
  5802  00180E  0E02               	movlw	2
  5803  001810  6F9D               	movwf	f_open@res& (0+255),b
  5804                           
  5805                           ;ff.c: 3545: } else {
  5806  001812  D02B               	goto	l1494
  5807  001814                     l1493:
  5808                           
  5809                           ; BSR set to: 1
  5810                           ;ff.c: 3546: fp->sect = sc + (DWORD)(ofs / ((UINT)512));
  5811                           
  5812                           ; BSR set to: 1
  5813  001814  C193  F179         	movff	f_open@ofs,??_f_open
  5814  001818  C194  F17A         	movff	f_open@ofs+1,??_f_open+1
  5815  00181C  C195  F17B         	movff	f_open@ofs+2,??_f_open+2
  5816  001820  C196  F17C         	movff	f_open@ofs+3,??_f_open+3
  5817  001824  0E0A               	movlw	10
  5818  001826  D005               	goto	u18920
  5819  001828                     u18925:
  5820  001828  90D8               	bcf	status,0,c
  5821  00182A  337C               	rrcf	(??_f_open+3)& (0+255),f,b
  5822  00182C  337B               	rrcf	(??_f_open+2)& (0+255),f,b
  5823  00182E  337A               	rrcf	(??_f_open+1)& (0+255),f,b
  5824  001830  3379               	rrcf	??_f_open& (0+255),f,b
  5825  001832                     u18920:
  5826  001832  2EE8               	decfsz	wreg,f,c
  5827  001834  D7F9               	goto	u18925
  5828  001836  5185               	movf	f_open@sc& (0+255),w,b
  5829  001838  2579               	addwf	??_f_open& (0+255),w,b
  5830  00183A  6F7D               	movwf	(??_f_open+4)& (0+255),b
  5831  00183C  5186               	movf	(f_open@sc+1)& (0+255),w,b
  5832  00183E  217A               	addwfc	(??_f_open+1)& (0+255),w,b
  5833  001840  6F7E               	movwf	(??_f_open+5)& (0+255),b
  5834  001842  5187               	movf	(f_open@sc+2)& (0+255),w,b
  5835  001844  217B               	addwfc	(??_f_open+2)& (0+255),w,b
  5836  001846  6F7F               	movwf	(??_f_open+6)& (0+255),b
  5837  001848  5188               	movf	(f_open@sc+3)& (0+255),w,b
  5838  00184A  217C               	addwfc	(??_f_open+3)& (0+255),w,b
  5839  00184C  6F80               	movwf	(??_f_open+7)& (0+255),b
  5840  00184E  EE20 F018          	lfsr	2,24
  5841  001852  5174               	movf	f_open@fp& (0+255),w,b
  5842  001854  26D9               	addwf	fsr2l,f,c
  5843  001856  5175               	movf	(f_open@fp+1)& (0+255),w,b
  5844  001858  22DA               	addwfc	fsr2h,f,c
  5845  00185A  C17D  FFDE         	movff	??_f_open+4,postinc2
  5846  00185E  C17E  FFDE         	movff	??_f_open+5,postinc2
  5847  001862  C17F  FFDE         	movff	??_f_open+6,postinc2
  5848  001866  C180  FFDE         	movff	??_f_open+7,postinc2
  5849  00186A                     l1494:
  5850                           
  5851                           ; BSR set to: 1
  5852                           ;ff.c: 3557: }
  5853                           ;ff.c: 3559: if (res != FR_OK) fp->obj.fs = 0;
  5854                           
  5855                           ; BSR set to: 1
  5856                           
  5857                           ;ff.c: 3550: }
  5858                           ;ff.c: 3551: }
  5859                           ;ff.c: 3552: }
  5860                           ;ff.c: 3554: }
  5861                           ;ff.c: 3556: ;
  5862                           
  5863                           ; BSR set to: 1
  5864                           
  5865                           ; BSR set to: 1
  5866                           
  5867                           ; BSR set to: 1
  5868                           
  5869                           ; BSR set to: 1
  5870  00186A  519D               	movf	f_open@res& (0+255),w,b
  5871  00186C  B4D8               	btfsc	status,2,c
  5872  00186E  D008               	goto	l1495
  5873                           
  5874                           ; BSR set to: 1
  5875  001870  C174  FFD9         	movff	f_open@fp,fsr2l
  5876  001874  C175  FFDA         	movff	f_open@fp+1,fsr2h
  5877  001878  0E00               	movlw	0
  5878  00187A  6EDE               	movwf	postinc2,c
  5879  00187C  0E00               	movlw	0
  5880  00187E  6EDD               	movwf	postdec2,c
  5881  001880                     l1495:
  5882                           
  5883                           ; BSR set to: 1
  5884                           ;ff.c: 3561: return res;
  5885                           
  5886                           ; BSR set to: 1
  5887  001880  519D               	movf	f_open@res& (0+255),w,b
  5888  001882  0012               	return	
  5889  001884                     __end_of_f_open:
  5890                           	opt stack 0
  5891                           tosu	equ	0xFFF
  5892                           tosh	equ	0xFFE
  5893                           tosl	equ	0xFFD
  5894                           pclath	equ	0xFFA
  5895                           tblptru	equ	0xFF8
  5896                           tblptrh	equ	0xFF7
  5897                           tblptrl	equ	0xFF6
  5898                           tablat	equ	0xFF5
  5899                           prodh	equ	0xFF4
  5900                           prodl	equ	0xFF3
  5901                           intcon	equ	0xFF2
  5902                           intcon2	equ	0xFF1
  5903                           intcon3	equ	0xFF0
  5904                           postinc0	equ	0xFEE
  5905                           wreg	equ	0xFE8
  5906                           postinc1	equ	0xFE6
  5907                           postdec1	equ	0xFE5
  5908                           fsr1h	equ	0xFE2
  5909                           fsr1l	equ	0xFE1
  5910                           indf2	equ	0xFDF
  5911                           postinc2	equ	0xFDE
  5912                           postdec2	equ	0xFDD
  5913                           plusw2	equ	0xFDB
  5914                           fsr2h	equ	0xFDA
  5915                           fsr2l	equ	0xFD9
  5916                           status	equ	0xFD8
  5917                           
  5918 ;; *************** function _remove_chain *****************
  5919 ;; Defined at:
  5920 ;;		line 1252 in file "bibliotecas/ff.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;  obj             2   79[BANK0 ] PTR struct .
  5923 ;;		 -> f_mkdir@dj(40), f_unlink@dj(40), f_open@dj(40), 
  5924 ;;  clst            4   81[BANK0 ] unsigned long 
  5925 ;;  pclst           4   85[BANK0 ] unsigned long 
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;  nxt             4   97[BANK0 ] unsigned long 
  5928 ;;  fs              2  102[BANK0 ] PTR struct .
  5929 ;;		 -> NULL(0), fs(559), 
  5930 ;;  res             1  101[BANK0 ] enum E79
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  1    wreg      enum E79
  5933 ;; Registers used:
  5934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5940 ;;      Params:         0      10       0       0       0       0       0       0       0
  5941 ;;      Locals:         0       7       0       0       0       0       0       0       0
  5942 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5943 ;;      Totals:         0      25       0       0       0       0       0       0       0
  5944 ;;Total ram usage:       25 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; Hardware stack levels required when called:   10
  5947 ;; This function calls:
  5948 ;;		_get_fat
  5949 ;;		_put_fat
  5950 ;; This function is called by:
  5951 ;;		_f_open
  5952 ;;		_f_truncate
  5953 ;;		_f_unlink
  5954 ;;		_f_mkdir
  5955 ;; This function uses a non-reentrant model
  5956 ;;
  5957                           
  5958                           	psect	text16
  5959  0034B4                     __ptext16:
  5960                           	opt stack 0
  5961  0034B4                     _remove_chain:
  5962                           	opt stack 17
  5963                           
  5964                           ;ff.c: 1258: FRESULT res = FR_OK;
  5965                           
  5966                           ; BSR set to: 1
  5967                           ;incstack = 0
  5968  0034B4  0E00               	movlw	0
  5969  0034B6  0100               	movlb	0	; () banked
  5970  0034B8  6FC5               	movwf	remove_chain@res& (0+255),b
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;ff.c: 1259: DWORD nxt;
  5974                           ;ff.c: 1260: FATFS *fs = obj->fs;
  5975  0034BA  C0AF  FFD9         	movff	remove_chain@obj,fsr2l
  5976  0034BE  C0B0  FFDA         	movff	remove_chain@obj+1,fsr2h
  5977  0034C2  CFDE F0C6          	movff	postinc2,remove_chain@fs
  5978  0034C6  CFDD F0C7          	movff	postdec2,remove_chain@fs+1
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;ff.c: 1268: if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;
  5982  0034CA  51B4               	movf	(remove_chain@clst+3)& (0+255),w,b
  5983  0034CC  11B3               	iorwf	(remove_chain@clst+2)& (0+255),w,b
  5984  0034CE  11B2               	iorwf	(remove_chain@clst+1)& (0+255),w,b
  5985  0034D0  E104               	bnz	u17800
  5986  0034D2  0E02               	movlw	2
  5987  0034D4  5DB1               	subwf	remove_chain@clst& (0+255),w,b
  5988  0034D6  A0D8               	btfss	status,0,c
  5989  0034D8  D010               	goto	u17810
  5990  0034DA                     u17800:
  5991                           
  5992                           ; BSR set to: 0
  5993  0034DA  EE20 F013          	lfsr	2,19
  5994  0034DE  51C6               	movf	remove_chain@fs& (0+255),w,b
  5995  0034E0  26D9               	addwf	fsr2l,f,c
  5996  0034E2  51C7               	movf	(remove_chain@fs+1)& (0+255),w,b
  5997  0034E4  22DA               	addwfc	fsr2h,f,c
  5998  0034E6  50DE               	movf	postinc2,w,c
  5999  0034E8  5DB1               	subwf	remove_chain@clst& (0+255),w,b
  6000  0034EA  50DE               	movf	postinc2,w,c
  6001  0034EC  59B2               	subwfb	(remove_chain@clst+1)& (0+255),w,b
  6002  0034EE  50DE               	movf	postinc2,w,c
  6003  0034F0  59B3               	subwfb	(remove_chain@clst+2)& (0+255),w,b
  6004  0034F2  50DE               	movf	postinc2,w,c
  6005  0034F4  59B4               	subwfb	(remove_chain@clst+3)& (0+255),w,b
  6006  0034F6  A0D8               	btfss	status,0,c
  6007  0034F8  D002               	goto	l1110
  6008  0034FA                     u17810:
  6009                           
  6010                           ; BSR set to: 0
  6011                           
  6012                           ; BSR set to: 0
  6013  0034FA  0E02               	movlw	2
  6014                           
  6015                           ; BSR set to: 0
  6016  0034FC  0012               	return	
  6017  0034FE                     l1110:
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;ff.c: 1271: if (pclst != 0 && (!0 || fs->fs_type != 4 || obj->stat != 2)) {
  6021                           
  6022                           ; BSR set to: 0
  6023  0034FE  51B5               	movf	remove_chain@pclst& (0+255),w,b
  6024  003500  11B6               	iorwf	(remove_chain@pclst+1)& (0+255),w,b
  6025  003502  11B7               	iorwf	(remove_chain@pclst+2)& (0+255),w,b
  6026  003504  11B8               	iorwf	(remove_chain@pclst+3)& (0+255),w,b
  6027  003506  B4D8               	btfsc	status,2,c
  6028  003508  D01D               	goto	l1117
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;ff.c: 1272: res = put_fat(fs, pclst, 0xFFFFFFFF);
  6032                           
  6033                           ; BSR set to: 0
  6034                           
  6035                           ; BSR set to: 0
  6036                           
  6037                           ; BSR set to: 0
  6038                           
  6039                           ; BSR set to: 0
  6040  00350A  C0C6  F090         	movff	remove_chain@fs,put_fat@fs
  6041  00350E  C0C7  F091         	movff	remove_chain@fs+1,put_fat@fs+1
  6042  003512  C0B5  F092         	movff	remove_chain@pclst,put_fat@clst
  6043  003516  C0B6  F093         	movff	remove_chain@pclst+1,put_fat@clst+1
  6044  00351A  C0B7  F094         	movff	remove_chain@pclst+2,put_fat@clst+2
  6045  00351E  C0B8  F095         	movff	remove_chain@pclst+3,put_fat@clst+3
  6046  003522  0EFF               	movlw	255
  6047  003524  6F96               	movwf	put_fat@val& (0+255),b
  6048  003526  0EFF               	movlw	255
  6049  003528  6F97               	movwf	(put_fat@val+1)& (0+255),b
  6050  00352A  0EFF               	movlw	255
  6051  00352C  6F98               	movwf	(put_fat@val+2)& (0+255),b
  6052  00352E  0EFF               	movlw	255
  6053  003530  6F99               	movwf	(put_fat@val+3)& (0+255),b
  6054  003532  ECEB  F010         	call	_put_fat	;wreg free
  6055  003536  0100               	movlb	0	; () banked
  6056  003538  6FC5               	movwf	remove_chain@res& (0+255),b
  6057                           
  6058                           ; BSR set to: 0
  6059                           ;ff.c: 1273: if (res != FR_OK) return res;
  6060  00353A  51C5               	movf	remove_chain@res& (0+255),w,b
  6061  00353C  B4D8               	btfsc	status,2,c
  6062  00353E  D002               	goto	l1117
  6063                           
  6064                           ; BSR set to: 0
  6065  003540  51C5               	movf	remove_chain@res& (0+255),w,b
  6066                           
  6067                           ; BSR set to: 0
  6068  003542  0012               	return	
  6069  003544                     l1117:
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;ff.c: 1278: nxt = get_fat(obj, clst);
  6073                           
  6074                           ; BSR set to: 0
  6075                           
  6076                           ;ff.c: 1274: }
  6077                           ;ff.c: 1277: do {
  6078                           
  6079                           ; BSR set to: 0
  6080                           
  6081                           ; BSR set to: 0
  6082  003544  C0AF  F090         	movff	remove_chain@obj,get_fat@obj
  6083  003548  C0B0  F091         	movff	remove_chain@obj+1,get_fat@obj+1
  6084  00354C  C0B1  F092         	movff	remove_chain@clst,get_fat@clst
  6085  003550  C0B2  F093         	movff	remove_chain@clst+1,get_fat@clst+1
  6086  003554  C0B3  F094         	movff	remove_chain@clst+2,get_fat@clst+2
  6087  003558  C0B4  F095         	movff	remove_chain@clst+3,get_fat@clst+3
  6088  00355C  ECE9  F014         	call	_get_fat	;wreg free
  6089  003560  C090  F0C1         	movff	?_get_fat,remove_chain@nxt
  6090  003564  C091  F0C2         	movff	?_get_fat+1,remove_chain@nxt+1
  6091  003568  C092  F0C3         	movff	?_get_fat+2,remove_chain@nxt+2
  6092  00356C  C093  F0C4         	movff	?_get_fat+3,remove_chain@nxt+3
  6093                           
  6094                           ;ff.c: 1279: if (nxt == 0) break;
  6095  003570  0100               	movlb	0	; () banked
  6096  003572  51C1               	movf	remove_chain@nxt& (0+255),w,b
  6097  003574  11C2               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  6098  003576  11C3               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  6099  003578  11C4               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  6100  00357A  B4D8               	btfsc	status,2,c
  6101  00357C  D07D               	goto	u17920
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;ff.c: 1280: if (nxt == 1) return FR_INT_ERR;
  6105                           
  6106                           ; BSR set to: 0
  6107                           
  6108                           ; BSR set to: 0
  6109  00357E  05C1               	decf	remove_chain@nxt& (0+255),w,b
  6110  003580  11C2               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  6111  003582  11C3               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  6112  003584  11C4               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  6113  003586  A4D8               	btfss	status,2,c
  6114  003588  D002               	goto	l1121
  6115                           
  6116                           ; BSR set to: 0
  6117  00358A  0E02               	movlw	2
  6118                           
  6119                           ; BSR set to: 0
  6120  00358C  0012               	return	
  6121  00358E                     l1121:
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;ff.c: 1281: if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
  6125                           
  6126                           ; BSR set to: 0
  6127  00358E  29C1               	incf	remove_chain@nxt& (0+255),w,b
  6128  003590  E109               	bnz	l13816
  6129  003592  29C2               	incf	(remove_chain@nxt+1)& (0+255),w,b
  6130  003594  E107               	bnz	l13816
  6131  003596  29C3               	incf	(remove_chain@nxt+2)& (0+255),w,b
  6132  003598  E105               	bnz	l13816
  6133  00359A  29C4               	incf	(remove_chain@nxt+3)& (0+255),w,b
  6134  00359C  A4D8               	btfss	status,2,c
  6135  00359E  D002               	goto	u17890
  6136                           
  6137                           ; BSR set to: 0
  6138  0035A0  0E01               	movlw	1
  6139                           
  6140                           ; BSR set to: 0
  6141  0035A2  0012               	return	
  6142  0035A4                     u17890:
  6143  0035A4                     l13816:
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;ff.c: 1283: res = put_fat(fs, clst, 0);
  6147  0035A4  C0C6  F090         	movff	remove_chain@fs,put_fat@fs
  6148  0035A8  C0C7  F091         	movff	remove_chain@fs+1,put_fat@fs+1
  6149  0035AC  C0B1  F092         	movff	remove_chain@clst,put_fat@clst
  6150  0035B0  C0B2  F093         	movff	remove_chain@clst+1,put_fat@clst+1
  6151  0035B4  C0B3  F094         	movff	remove_chain@clst+2,put_fat@clst+2
  6152  0035B8  C0B4  F095         	movff	remove_chain@clst+3,put_fat@clst+3
  6153  0035BC  0E00               	movlw	0
  6154  0035BE  6F96               	movwf	put_fat@val& (0+255),b
  6155  0035C0  0E00               	movlw	0
  6156  0035C2  6F97               	movwf	(put_fat@val+1)& (0+255),b
  6157  0035C4  0E00               	movlw	0
  6158  0035C6  6F98               	movwf	(put_fat@val+2)& (0+255),b
  6159  0035C8  0E00               	movlw	0
  6160  0035CA  6F99               	movwf	(put_fat@val+3)& (0+255),b
  6161  0035CC  ECEB  F010         	call	_put_fat	;wreg free
  6162  0035D0  0100               	movlb	0	; () banked
  6163  0035D2  6FC5               	movwf	remove_chain@res& (0+255),b
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;ff.c: 1284: if (res != FR_OK) return res;
  6167  0035D4  51C5               	movf	remove_chain@res& (0+255),w,b
  6168  0035D6  B4D8               	btfsc	status,2,c
  6169  0035D8  D002               	goto	l1126
  6170                           
  6171                           ; BSR set to: 0
  6172  0035DA  51C5               	movf	remove_chain@res& (0+255),w,b
  6173                           
  6174                           ; BSR set to: 0
  6175  0035DC  0012               	return	
  6176  0035DE                     l1126:
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;ff.c: 1285: }
  6180                           ;ff.c: 1286: if (fs->free_clst < fs->n_fatent - 2) {
  6181                           
  6182                           ; BSR set to: 0
  6183                           
  6184                           ; BSR set to: 0
  6185  0035DE  EE20 F013          	lfsr	2,19
  6186  0035E2  51C6               	movf	remove_chain@fs& (0+255),w,b
  6187  0035E4  26D9               	addwf	fsr2l,f,c
  6188  0035E6  51C7               	movf	(remove_chain@fs+1)& (0+255),w,b
  6189  0035E8  22DA               	addwfc	fsr2h,f,c
  6190  0035EA  0EFE               	movlw	254
  6191  0035EC  24DE               	addwf	postinc2,w,c
  6192  0035EE  6FB9               	movwf	??_remove_chain& (0+255),b
  6193  0035F0  0EFF               	movlw	255
  6194  0035F2  20DE               	addwfc	postinc2,w,c
  6195  0035F4  6FBA               	movwf	(??_remove_chain+1)& (0+255),b
  6196  0035F6  0EFF               	movlw	255
  6197  0035F8  20DE               	addwfc	postinc2,w,c
  6198  0035FA  6FBB               	movwf	(??_remove_chain+2)& (0+255),b
  6199  0035FC  0EFF               	movlw	255
  6200  0035FE  20DE               	addwfc	postinc2,w,c
  6201  003600  6FBC               	movwf	(??_remove_chain+3)& (0+255),b
  6202  003602  EE20 F00F          	lfsr	2,15
  6203  003606  51C6               	movf	remove_chain@fs& (0+255),w,b
  6204  003608  26D9               	addwf	fsr2l,f,c
  6205  00360A  51C7               	movf	(remove_chain@fs+1)& (0+255),w,b
  6206  00360C  22DA               	addwfc	fsr2h,f,c
  6207  00360E  51B9               	movf	??_remove_chain& (0+255),w,b
  6208  003610  5CDE               	subwf	postinc2,w,c
  6209  003612  51BA               	movf	(??_remove_chain+1)& (0+255),w,b
  6210  003614  58DE               	subwfb	postinc2,w,c
  6211  003616  51BB               	movf	(??_remove_chain+2)& (0+255),w,b
  6212  003618  58DE               	subwfb	postinc2,w,c
  6213  00361A  51BC               	movf	(??_remove_chain+3)& (0+255),w,b
  6214  00361C  58DE               	subwfb	postinc2,w,c
  6215  00361E  B0D8               	btfsc	status,0,c
  6216  003620  D013               	goto	l1127
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;ff.c: 1287: fs->free_clst++;
  6220  003622  EE20 F00F          	lfsr	2,15
  6221  003626  51C6               	movf	remove_chain@fs& (0+255),w,b
  6222  003628  26D9               	addwf	fsr2l,f,c
  6223  00362A  51C7               	movf	(remove_chain@fs+1)& (0+255),w,b
  6224  00362C  22DA               	addwfc	fsr2h,f,c
  6225  00362E  2ADE               	incf	postinc2,f,c
  6226  003630  0E00               	movlw	0
  6227  003632  22DE               	addwfc	postinc2,f,c
  6228  003634  22DE               	addwfc	postinc2,f,c
  6229  003636  22DE               	addwfc	postinc2,f,c
  6230                           
  6231                           ;ff.c: 1288: fs->fsi_flag |= 1;
  6232  003638  EE20 F004          	lfsr	2,4
  6233  00363C  51C6               	movf	remove_chain@fs& (0+255),w,b
  6234  00363E  26D9               	addwf	fsr2l,f,c
  6235  003640  51C7               	movf	(remove_chain@fs+1)& (0+255),w,b
  6236  003642  22DA               	addwfc	fsr2h,f,c
  6237  003644  0E00               	movlw	0
  6238  003646  80DB               	bsf	plusw2,0,c
  6239  003648                     l1127:
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;ff.c: 1289: }
  6243                           ;ff.c: 1308: clst = nxt;
  6244                           
  6245                           ; BSR set to: 0
  6246  003648  C0C1  F0B1         	movff	remove_chain@nxt,remove_chain@clst
  6247  00364C  C0C2  F0B2         	movff	remove_chain@nxt+1,remove_chain@clst+1
  6248  003650  C0C3  F0B3         	movff	remove_chain@nxt+2,remove_chain@clst+2
  6249  003654  C0C4  F0B4         	movff	remove_chain@nxt+3,remove_chain@clst+3
  6250                           
  6251                           ;ff.c: 1309: } while (clst < fs->n_fatent);
  6252  003658  EE20 F013          	lfsr	2,19
  6253  00365C  51C6               	movf	remove_chain@fs& (0+255),w,b
  6254  00365E  26D9               	addwf	fsr2l,f,c
  6255  003660  51C7               	movf	(remove_chain@fs+1)& (0+255),w,b
  6256  003662  22DA               	addwfc	fsr2h,f,c
  6257  003664  50DE               	movf	postinc2,w,c
  6258  003666  5DB1               	subwf	remove_chain@clst& (0+255),w,b
  6259  003668  50DE               	movf	postinc2,w,c
  6260  00366A  59B2               	subwfb	(remove_chain@clst+1)& (0+255),w,b
  6261  00366C  50DE               	movf	postinc2,w,c
  6262  00366E  59B3               	subwfb	(remove_chain@clst+2)& (0+255),w,b
  6263  003670  50DE               	movf	postinc2,w,c
  6264  003672  59B4               	subwfb	(remove_chain@clst+3)& (0+255),w,b
  6265  003674  A0D8               	btfss	status,0,c
  6266  003676  D766               	goto	l1117
  6267  003678                     u17920:
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;ff.c: 1337: return FR_OK;
  6271                           
  6272                           ; BSR set to: 0
  6273  003678  0E00               	movlw	0
  6274  00367A  0012               	return	
  6275  00367C                     __end_of_remove_chain:
  6276                           	opt stack 0
  6277                           tosu	equ	0xFFF
  6278                           tosh	equ	0xFFE
  6279                           tosl	equ	0xFFD
  6280                           pclath	equ	0xFFA
  6281                           tblptru	equ	0xFF8
  6282                           tblptrh	equ	0xFF7
  6283                           tblptrl	equ	0xFF6
  6284                           tablat	equ	0xFF5
  6285                           prodh	equ	0xFF4
  6286                           prodl	equ	0xFF3
  6287                           intcon	equ	0xFF2
  6288                           intcon2	equ	0xFF1
  6289                           intcon3	equ	0xFF0
  6290                           postinc0	equ	0xFEE
  6291                           wreg	equ	0xFE8
  6292                           postinc1	equ	0xFE6
  6293                           postdec1	equ	0xFE5
  6294                           fsr1h	equ	0xFE2
  6295                           fsr1l	equ	0xFE1
  6296                           indf2	equ	0xFDF
  6297                           postinc2	equ	0xFDE
  6298                           postdec2	equ	0xFDD
  6299                           plusw2	equ	0xFDB
  6300                           fsr2h	equ	0xFDA
  6301                           fsr2l	equ	0xFD9
  6302                           status	equ	0xFD8
  6303                           
  6304 ;; *************** function _follow_path *****************
  6305 ;; Defined at:
  6306 ;;		line 2860 in file "bibliotecas/ff.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;  dp              2  146[BANK0 ] PTR struct .
  6309 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@dj(40), f_unlink@dj(40), 
  6310 ;;		 -> f_stat@dj(40), f_open@dj(40), 
  6311 ;;  path            2  148[BANK0 ] PTR const unsigned char 
  6312 ;;		 -> STR_11(11), STR_10(3), 
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;  fs              2    4[BANK1 ] PTR struct .
  6315 ;;		 -> NULL(0), fs(559), 
  6316 ;;  res             1    7[BANK1 ] enum E79
  6317 ;;  ns              1    6[BANK1 ] unsigned char 
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  1    wreg      enum E79
  6320 ;; Registers used:
  6321 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6327 ;;      Params:         0       4       0       0       0       0       0       0       0
  6328 ;;      Locals:         0       0       4       0       0       0       0       0       0
  6329 ;;      Temps:          0       0       4       0       0       0       0       0       0
  6330 ;;      Totals:         0       4       8       0       0       0       0       0       0
  6331 ;;Total ram usage:       12 bytes
  6332 ;; Hardware stack levels used:    1
  6333 ;; Hardware stack levels required when called:   13
  6334 ;; This function calls:
  6335 ;;		_create_name
  6336 ;;		_dir_find
  6337 ;;		_dir_sdi
  6338 ;;		_ld_clust
  6339 ;; This function is called by:
  6340 ;;		_f_open
  6341 ;;		_f_opendir
  6342 ;;		_f_stat
  6343 ;;		_f_unlink
  6344 ;;		_f_mkdir
  6345 ;;		_f_rename
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           	psect	text17
  6350  003B58                     __ptext17:
  6351                           	opt stack 0
  6352  003B58                     _follow_path:
  6353                           	opt stack 14
  6354                           
  6355                           ;ff.c: 2865: FRESULT res;
  6356                           ;ff.c: 2866: BYTE ns;
  6357                           ;ff.c: 2867: FATFS *fs = dp->obj.fs;
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;incstack = 0
  6361  003B58  C0F2  FFD9         	movff	follow_path@dp,fsr2l
  6362  003B5C  C0F3  FFDA         	movff	follow_path@dp+1,fsr2h
  6363  003B60  CFDE F170          	movff	postinc2,follow_path@fs
  6364  003B64  CFDD F171          	movff	postdec2,follow_path@fs+1
  6365                           
  6366                           ;ff.c: 2875: {
  6367                           ;ff.c: 2876: while (*path == '/' || *path == '\\') path++;
  6368  003B68  D003               	goto	l1319
  6369  003B6A  0100               	movlb	0	; () banked
  6370  003B6C  4BF4               	infsnz	follow_path@path& (0+255),f,b
  6371  003B6E  2BF5               	incf	(follow_path@path+1)& (0+255),f,b
  6372  003B70                     l1319:
  6373                           
  6374                           ; BSR set to: 0
  6375  003B70  C0F4  FFF6         	movff	follow_path@path,tblptrl
  6376  003B74  C0F5  FFF7         	movff	follow_path@path+1,tblptrh
  6377  003B78                     	if	0	;tblptru may be non-zero
  6378  003B78                     	endif
  6379  003B78                     	if	0	;tblptru may be non-zero
  6380  003B78                     	endif
  6381  003B78  0008               	tblrd		*
  6382  003B7A  50F5               	movf	tablat,w,c
  6383  003B7C  0A2F               	xorlw	47
  6384  003B7E  B4D8               	btfsc	status,2,c
  6385  003B80  D7F4               	goto	l1320
  6386  003B82  C0F4  FFF6         	movff	follow_path@path,tblptrl
  6387  003B86  C0F5  FFF7         	movff	follow_path@path+1,tblptrh
  6388  003B8A                     	if	0	;tblptru may be non-zero
  6389  003B8A                     	endif
  6390  003B8A                     	if	0	;tblptru may be non-zero
  6391  003B8A                     	endif
  6392  003B8A  0008               	tblrd		*
  6393  003B8C  50F5               	movf	tablat,w,c
  6394  003B8E  0A5C               	xorlw	92
  6395  003B90  B4D8               	btfsc	status,2,c
  6396  003B92  D7EB               	goto	l1320
  6397                           
  6398                           ;ff.c: 2877: dp->obj.sclust = 0;
  6399  003B94  0100               	movlb	0	; () banked
  6400  003B96  EE20 F006          	lfsr	2,6
  6401  003B9A  51F2               	movf	follow_path@dp& (0+255),w,b
  6402  003B9C  26D9               	addwf	fsr2l,f,c
  6403  003B9E  51F3               	movf	(follow_path@dp+1)& (0+255),w,b
  6404  003BA0  22DA               	addwfc	fsr2h,f,c
  6405  003BA2  6ADE               	clrf	postinc2,c
  6406  003BA4  6ADE               	clrf	postinc2,c
  6407  003BA6  6ADE               	clrf	postinc2,c
  6408  003BA8  6ADD               	clrf	postdec2,c
  6409                           
  6410                           ; BSR set to: 0
  6411                           ;ff.c: 2878: }
  6412                           ;ff.c: 2896: if ((UINT)*path < ' ') {
  6413  003BAA  C0F4  FFF6         	movff	follow_path@path,tblptrl
  6414  003BAE  C0F5  FFF7         	movff	follow_path@path+1,tblptrh
  6415  003BB2                     	if	0	;tblptru may be non-zero
  6416  003BB2                     	endif
  6417  003BB2                     	if	0	;tblptru may be non-zero
  6418  003BB2                     	endif
  6419  003BB2  0E20               	movlw	32
  6420  003BB4  0008               	tblrd		*
  6421  003BB6  60F5               	cpfslt	tablat,c
  6422  003BB8  D017               	goto	l1322
  6423                           
  6424                           ; BSR set to: 0
  6425                           ;ff.c: 2897: dp->fn[11] = 0x80;
  6426  003BBA  EE20 F027          	lfsr	2,39
  6427  003BBE  51F2               	movf	follow_path@dp& (0+255),w,b
  6428  003BC0  26D9               	addwf	fsr2l,f,c
  6429  003BC2  51F3               	movf	(follow_path@dp+1)& (0+255),w,b
  6430  003BC4  22DA               	addwfc	fsr2h,f,c
  6431  003BC6  0E80               	movlw	128
  6432  003BC8  6EDF               	movwf	indf2,c
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;ff.c: 2898: res = dir_sdi(dp, 0);
  6436  003BCA  C0F2  F0AA         	movff	follow_path@dp,dir_sdi@dp
  6437  003BCE  C0F3  F0AB         	movff	follow_path@dp+1,dir_sdi@dp+1
  6438  003BD2  0E00               	movlw	0
  6439  003BD4  6FAC               	movwf	dir_sdi@ofs& (0+255),b
  6440  003BD6  0E00               	movlw	0
  6441  003BD8  6FAD               	movwf	(dir_sdi@ofs+1)& (0+255),b
  6442  003BDA  0E00               	movlw	0
  6443  003BDC  6FAE               	movwf	(dir_sdi@ofs+2)& (0+255),b
  6444  003BDE  0E00               	movlw	0
  6445  003BE0  6FAF               	movwf	(dir_sdi@ofs+3)& (0+255),b
  6446  003BE2  ECAA  F016         	call	_dir_sdi	;wreg free
  6447  003BE6  D037               	goto	L10
  6448  003BE8                     l1322:
  6449                           
  6450                           ;ff.c: 2902: res = create_name(dp, &path);
  6451                           
  6452                           ; BSR set to: 1
  6453                           
  6454                           ;ff.c: 2901: for (;;) {
  6455                           
  6456                           ; BSR set to: 1
  6457  003BE8  C0F2  F022         	movff	follow_path@dp,create_name@dp
  6458  003BEC  C0F3  F023         	movff	follow_path@dp+1,create_name@dp+1
  6459  003BF0  0EF4               	movlw	low follow_path@path
  6460  003BF2  6E24               	movwf	create_name@path,c
  6461  003BF4  0E00               	movlw	high follow_path@path
  6462  003BF6  6E25               	movwf	create_name@path+1,c
  6463  003BF8  EC43  F018         	call	_create_name	;wreg free
  6464  003BFC  0101               	movlb	1	; () banked
  6465  003BFE  6F73               	movwf	follow_path@res& (0+255),b
  6466                           
  6467                           ; BSR set to: 1
  6468                           ;ff.c: 2903: if (res != FR_OK) break;
  6469  003C00  5173               	movf	follow_path@res& (0+255),w,b
  6470  003C02  A4D8               	btfss	status,2,c
  6471  003C04  D060               	goto	l1326
  6472                           
  6473                           ; BSR set to: 1
  6474                           ;ff.c: 2904: res = dir_find(dp);
  6475                           
  6476                           ; BSR set to: 1
  6477                           
  6478                           ; BSR set to: 1
  6479  003C06  C0F2  F0EA         	movff	follow_path@dp,dir_find@dp
  6480  003C0A  C0F3  F0EB         	movff	follow_path@dp+1,dir_find@dp+1
  6481  003C0E  ECD2  F01F         	call	_dir_find	;wreg free
  6482  003C12  0101               	movlb	1	; () banked
  6483  003C14  6F73               	movwf	follow_path@res& (0+255),b
  6484                           
  6485                           ; BSR set to: 1
  6486                           ;ff.c: 2905: ns = dp->fn[11];
  6487  003C16  0100               	movlb	0	; () banked
  6488  003C18  EE20 F027          	lfsr	2,39
  6489  003C1C  51F2               	movf	follow_path@dp& (0+255),w,b
  6490  003C1E  26D9               	addwf	fsr2l,f,c
  6491  003C20  51F3               	movf	(follow_path@dp+1)& (0+255),w,b
  6492  003C22  22DA               	addwfc	fsr2h,f,c
  6493  003C24  50DF               	movf	indf2,w,c
  6494  003C26  0101               	movlb	1	; () banked
  6495  003C28  6F72               	movwf	follow_path@ns& (0+255),b
  6496                           
  6497                           ; BSR set to: 1
  6498                           ;ff.c: 2906: if (res != FR_OK) {
  6499  003C2A  5173               	movf	follow_path@res& (0+255),w,b
  6500  003C2C  B4D8               	btfsc	status,2,c
  6501  003C2E  D007               	goto	l1327
  6502                           
  6503                           ; BSR set to: 1
  6504                           ;ff.c: 2907: if (res == FR_NO_FILE) {
  6505  003C30  0E04               	movlw	4
  6506  003C32  1973               	xorwf	follow_path@res& (0+255),w,b
  6507  003C34  B4D8               	btfsc	status,2,c
  6508                           
  6509                           ; BSR set to: 1
  6510                           ;ff.c: 2913: if (!(ns & 0x04)) res = FR_NO_PATH;
  6511                           
  6512                           ;ff.c: 2912: } else {
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;ff.c: 2911: res = FR_OK;
  6516                           
  6517                           ; BSR set to: 1
  6518                           ;ff.c: 2910: dp->fn[11] = 0x80;
  6519                           
  6520                           ; BSR set to: 1
  6521                           
  6522                           ; BSR set to: 1
  6523                           
  6524                           ; BSR set to: 1
  6525                           ;ff.c: 2909: if (!(ns & 0x04)) continue;
  6526                           
  6527                           ; BSR set to: 1
  6528                           
  6529                           ; BSR set to: 1
  6530                           ;ff.c: 2908: if (0 && (ns & 0x20)) {
  6531  003C36  B572               	btfsc	follow_path@ns& (0+255),2,b
  6532  003C38  D046               	goto	l1326
  6533                           
  6534                           ; BSR set to: 1
  6535  003C3A  0E05               	movlw	5
  6536  003C3C  D00D               	goto	L9
  6537  003C3E                     l1327:
  6538                           
  6539                           ; BSR set to: 1
  6540                           ;ff.c: 2917: }
  6541                           ;ff.c: 2918: if (ns & 0x04) break;
  6542  003C3E  B572               	btfsc	follow_path@ns& (0+255),2,b
  6543  003C40  D042               	goto	l1326
  6544                           
  6545                           ; BSR set to: 1
  6546                           ;ff.c: 2920: if (!(dp->obj.attr & 0x10)) {
  6547                           
  6548                           ; BSR set to: 1
  6549                           
  6550                           ; BSR set to: 1
  6551  003C42  0100               	movlb	0	; () banked
  6552  003C44  EE20 F004          	lfsr	2,4
  6553  003C48  51F2               	movf	follow_path@dp& (0+255),w,b
  6554  003C4A  26D9               	addwf	fsr2l,f,c
  6555  003C4C  51F3               	movf	(follow_path@dp+1)& (0+255),w,b
  6556  003C4E  22DA               	addwfc	fsr2h,f,c
  6557  003C50  B8DF               	btfsc	indf2,4,c
  6558  003C52  D004               	goto	l1335
  6559                           
  6560                           ; BSR set to: 0
  6561                           ;ff.c: 2921: res = FR_NO_PATH; break;
  6562  003C54  0E05               	movlw	5
  6563  003C56                     L10:
  6564  003C56  0101               	movlb	1	; () banked
  6565  003C58                     L9:
  6566  003C58  6F73               	movwf	follow_path@res& (0+255),b
  6567  003C5A  D035               	goto	l1326
  6568  003C5C                     l1335:
  6569                           
  6570                           ;ff.c: 2922: }
  6571                           ;ff.c: 2933: {
  6572                           ;ff.c: 2934: dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % ((UINT)512));
  6573                           
  6574                           ; BSR set to: 1
  6575  003C5C  C170  F021         	movff	follow_path@fs,ld_clust@fs
  6576  003C60  C171  F022         	movff	follow_path@fs+1,ld_clust@fs+1
  6577  003C64  0EFF               	movlw	255
  6578  003C66  0101               	movlb	1	; () banked
  6579  003C68  6F6C               	movwf	??_follow_path& (0+255),b
  6580  003C6A  0E01               	movlw	1
  6581  003C6C  6F6D               	movwf	(??_follow_path+1)& (0+255),b
  6582  003C6E  0100               	movlb	0	; () banked
  6583  003C70  EE20 F00E          	lfsr	2,14
  6584  003C74  51F2               	movf	follow_path@dp& (0+255),w,b
  6585  003C76  26D9               	addwf	fsr2l,f,c
  6586  003C78  51F3               	movf	(follow_path@dp+1)& (0+255),w,b
  6587  003C7A  22DA               	addwfc	fsr2h,f,c
  6588  003C7C  CFDE F16E          	movff	postinc2,??_follow_path+2
  6589  003C80  CFDD F16F          	movff	postdec2,??_follow_path+3
  6590  003C84  0101               	movlb	1	; () banked
  6591  003C86  516C               	movf	??_follow_path& (0+255),w,b
  6592  003C88  176E               	andwf	(??_follow_path+2)& (0+255),f,b
  6593  003C8A  516D               	movf	(??_follow_path+1)& (0+255),w,b
  6594  003C8C  176F               	andwf	(??_follow_path+3)& (0+255),f,b
  6595  003C8E  0E2F               	movlw	47
  6596  003C90  276E               	addwf	(??_follow_path+2)& (0+255),f,b
  6597  003C92  0E00               	movlw	0
  6598  003C94  236F               	addwfc	(??_follow_path+3)& (0+255),f,b
  6599  003C96  516E               	movf	(??_follow_path+2)& (0+255),w,b
  6600  003C98  2570               	addwf	follow_path@fs& (0+255),w,b
  6601  003C9A  6E23               	movwf	ld_clust@dir,c
  6602  003C9C  516F               	movf	(??_follow_path+3)& (0+255),w,b
  6603  003C9E  2171               	addwfc	(follow_path@fs+1)& (0+255),w,b
  6604  003CA0  6E24               	movwf	ld_clust@dir+1,c
  6605  003CA2  EC0B  F029         	call	_ld_clust	;wreg free
  6606  003CA6  0100               	movlb	0	; () banked
  6607  003CA8  EE20 F006          	lfsr	2,6
  6608  003CAC  51F2               	movf	follow_path@dp& (0+255),w,b
  6609  003CAE  26D9               	addwf	fsr2l,f,c
  6610  003CB0  51F3               	movf	(follow_path@dp+1)& (0+255),w,b
  6611  003CB2  22DA               	addwfc	fsr2h,f,c
  6612  003CB4  C021  FFDE         	movff	?_ld_clust,postinc2
  6613  003CB8  C022  FFDE         	movff	?_ld_clust+1,postinc2
  6614  003CBC  C023  FFDE         	movff	?_ld_clust+2,postinc2
  6615  003CC0  C024  FFDE         	movff	?_ld_clust+3,postinc2
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;ff.c: 2935: }
  6619                           ;ff.c: 2936: }
  6620  003CC4  D791               	goto	l1322
  6621  003CC6                     l1326:
  6622                           
  6623                           ;ff.c: 2937: }
  6624                           ;ff.c: 2939: return res;
  6625                           
  6626                           ; BSR set to: 0
  6627                           
  6628                           ; BSR set to: 0
  6629  003CC6  0101               	movlb	1	; () banked
  6630  003CC8  5173               	movf	follow_path@res& (0+255),w,b
  6631  003CCA  0012               	return	
  6632  003CCC                     __end_of_follow_path:
  6633                           	opt stack 0
  6634                           tosu	equ	0xFFF
  6635                           tosh	equ	0xFFE
  6636                           tosl	equ	0xFFD
  6637                           pclath	equ	0xFFA
  6638                           tblptru	equ	0xFF8
  6639                           tblptrh	equ	0xFF7
  6640                           tblptrl	equ	0xFF6
  6641                           tablat	equ	0xFF5
  6642                           prodh	equ	0xFF4
  6643                           prodl	equ	0xFF3
  6644                           intcon	equ	0xFF2
  6645                           intcon2	equ	0xFF1
  6646                           intcon3	equ	0xFF0
  6647                           postinc0	equ	0xFEE
  6648                           wreg	equ	0xFE8
  6649                           postinc1	equ	0xFE6
  6650                           postdec1	equ	0xFE5
  6651                           fsr1h	equ	0xFE2
  6652                           fsr1l	equ	0xFE1
  6653                           indf2	equ	0xFDF
  6654                           postinc2	equ	0xFDE
  6655                           postdec2	equ	0xFDD
  6656                           plusw2	equ	0xFDB
  6657                           fsr2h	equ	0xFDA
  6658                           fsr2l	equ	0xFD9
  6659                           status	equ	0xFD8
  6660                           
  6661 ;; *************** function _ld_clust *****************
  6662 ;; Defined at:
  6663 ;;		line 1675 in file "bibliotecas/ff.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  fs              2   32[COMRAM] PTR struct .
  6666 ;;		 -> NULL(0), fs(559), 
  6667 ;;  dir             2   34[COMRAM] PTR const unsigned char 
  6668 ;;		 -> fs.win(512), NULL(0), fs(559), 
  6669 ;; Auto vars:     Size  Location     Type
  6670 ;;  cl              4   40[COMRAM] unsigned long 
  6671 ;; Return value:  Size  Location     Type
  6672 ;;                  4   32[COMRAM] unsigned long 
  6673 ;; Registers used:
  6674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6680 ;;      Params:         4       0       0       0       0       0       0       0       0
  6681 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6682 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6683 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6684 ;;Total ram usage:       12 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; Hardware stack levels required when called:    3
  6687 ;; This function calls:
  6688 ;;		_ld_word
  6689 ;; This function is called by:
  6690 ;;		_follow_path
  6691 ;;		_f_open
  6692 ;;		_f_opendir
  6693 ;;		_f_unlink
  6694 ;;		_f_rename
  6695 ;; This function uses a non-reentrant model
  6696 ;;
  6697                           
  6698                           	psect	text18
  6699  005216                     __ptext18:
  6700                           	opt stack 0
  6701  005216                     _ld_clust:
  6702                           	opt stack 24
  6703                           
  6704                           ;ff.c: 1680: DWORD cl;
  6705                           ;ff.c: 1682: cl = ld_word(dir + 26);
  6706                           
  6707                           ; BSR set to: 1
  6708                           ;incstack = 0
  6709  005216  0E1A               	movlw	26
  6710  005218  2423               	addwf	ld_clust@dir,w,c
  6711  00521A  6E1A               	movwf	ld_word@ptr,c
  6712  00521C  0E00               	movlw	0
  6713  00521E  2024               	addwfc	ld_clust@dir+1,w,c
  6714  005220  6E1B               	movwf	ld_word@ptr+1,c
  6715  005222  ECAE  F02C         	call	_ld_word	;wreg free
  6716  005226  C01A  F029         	movff	?_ld_word,ld_clust@cl
  6717  00522A  C01B  F02A         	movff	?_ld_word+1,ld_clust@cl+1
  6718  00522E  6A2B               	clrf	ld_clust@cl+2,c
  6719  005230  6A2C               	clrf	ld_clust@cl+3,c
  6720                           
  6721                           ;ff.c: 1683: if (fs->fs_type == 3) {
  6722  005232  C021  FFD9         	movff	ld_clust@fs,fsr2l
  6723  005236  C022  FFDA         	movff	ld_clust@fs+1,fsr2h
  6724  00523A  0E03               	movlw	3
  6725  00523C  18DE               	xorwf	postinc2,w,c
  6726  00523E  A4D8               	btfss	status,2,c
  6727  005240  D01C               	goto	l1240
  6728                           
  6729                           ;ff.c: 1684: cl |= (DWORD)ld_word(dir + 20) << 16;
  6730  005242  0E14               	movlw	20
  6731  005244  2423               	addwf	ld_clust@dir,w,c
  6732  005246  6E1A               	movwf	ld_word@ptr,c
  6733  005248  0E00               	movlw	0
  6734  00524A  2024               	addwfc	ld_clust@dir+1,w,c
  6735  00524C  6E1B               	movwf	ld_word@ptr+1,c
  6736  00524E  ECAE  F02C         	call	_ld_word	;wreg free
  6737  005252  501A               	movf	?_ld_word,w,c
  6738  005254  6E25               	movwf	??_ld_clust& (0+255),c
  6739  005256  501B               	movf	?_ld_word+1,w,c
  6740  005258  6E26               	movwf	(??_ld_clust+1)& (0+255),c
  6741  00525A  6A27               	clrf	(??_ld_clust+2)& (0+255),c
  6742  00525C  6A28               	clrf	(??_ld_clust+3)& (0+255),c
  6743  00525E  C026  F028         	movff	??_ld_clust+1,??_ld_clust+3
  6744  005262  C025  F027         	movff	??_ld_clust,??_ld_clust+2
  6745  005266  6A26               	clrf	??_ld_clust+1,c
  6746  005268  6A25               	clrf	??_ld_clust,c
  6747  00526A  5025               	movf	??_ld_clust,w,c
  6748  00526C  1229               	iorwf	ld_clust@cl,f,c
  6749  00526E  5026               	movf	??_ld_clust+1,w,c
  6750  005270  122A               	iorwf	ld_clust@cl+1,f,c
  6751  005272  5027               	movf	??_ld_clust+2,w,c
  6752  005274  122B               	iorwf	ld_clust@cl+2,f,c
  6753  005276  5028               	movf	??_ld_clust+3,w,c
  6754  005278  122C               	iorwf	ld_clust@cl+3,f,c
  6755  00527A                     l1240:
  6756                           
  6757                           ;ff.c: 1685: }
  6758                           ;ff.c: 1687: return cl;
  6759  00527A  C029  F021         	movff	ld_clust@cl,?_ld_clust
  6760  00527E  C02A  F022         	movff	ld_clust@cl+1,?_ld_clust+1
  6761  005282  C02B  F023         	movff	ld_clust@cl+2,?_ld_clust+2
  6762  005286  C02C  F024         	movff	ld_clust@cl+3,?_ld_clust+3
  6763  00528A  0012               	return	
  6764  00528C                     __end_of_ld_clust:
  6765                           	opt stack 0
  6766                           tosu	equ	0xFFF
  6767                           tosh	equ	0xFFE
  6768                           tosl	equ	0xFFD
  6769                           pclath	equ	0xFFA
  6770                           tblptru	equ	0xFF8
  6771                           tblptrh	equ	0xFF7
  6772                           tblptrl	equ	0xFF6
  6773                           tablat	equ	0xFF5
  6774                           prodh	equ	0xFF4
  6775                           prodl	equ	0xFF3
  6776                           intcon	equ	0xFF2
  6777                           intcon2	equ	0xFF1
  6778                           intcon3	equ	0xFF0
  6779                           postinc0	equ	0xFEE
  6780                           wreg	equ	0xFE8
  6781                           postinc1	equ	0xFE6
  6782                           postdec1	equ	0xFE5
  6783                           fsr1h	equ	0xFE2
  6784                           fsr1l	equ	0xFE1
  6785                           indf2	equ	0xFDF
  6786                           postinc2	equ	0xFDE
  6787                           postdec2	equ	0xFDD
  6788                           plusw2	equ	0xFDB
  6789                           fsr2h	equ	0xFDA
  6790                           fsr2l	equ	0xFD9
  6791                           status	equ	0xFD8
  6792                           
  6793 ;; *************** function _dir_find *****************
  6794 ;; Defined at:
  6795 ;;		line 2240 in file "bibliotecas/ff.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;  dp              2  138[BANK0 ] PTR struct .
  6798 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@dj(40), f_unlink@dj(40), 
  6799 ;;		 -> f_stat@dj(40), f_open@dj(40), 
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  fs              2  142[BANK0 ] PTR struct .
  6802 ;;		 -> NULL(0), fs(559), 
  6803 ;;  res             1  145[BANK0 ] enum E79
  6804 ;;  c               1  144[BANK0 ] unsigned char 
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  1    wreg      enum E79
  6807 ;; Registers used:
  6808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6814 ;;      Params:         0       2       0       0       0       0       0       0       0
  6815 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6816 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6817 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6818 ;;Total ram usage:        8 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:   12
  6821 ;; This function calls:
  6822 ;;		_dir_next
  6823 ;;		_dir_sdi
  6824 ;;		_mem_cmp
  6825 ;;		_move_window
  6826 ;; This function is called by:
  6827 ;;		_follow_path
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           	psect	text19
  6832  003FA4                     __ptext19:
  6833                           	opt stack 0
  6834  003FA4                     _dir_find:
  6835                           	opt stack 14
  6836                           
  6837                           ;ff.c: 2244: FRESULT res;
  6838                           ;ff.c: 2245: FATFS *fs = dp->obj.fs;
  6839                           
  6840                           ;incstack = 0
  6841  003FA4  C0EA  FFD9         	movff	dir_find@dp,fsr2l
  6842  003FA8  C0EB  FFDA         	movff	dir_find@dp+1,fsr2h
  6843  003FAC  CFDE F0EE          	movff	postinc2,dir_find@fs
  6844  003FB0  CFDD F0EF          	movff	postdec2,dir_find@fs+1
  6845                           
  6846                           ;ff.c: 2246: BYTE c;
  6847                           ;ff.c: 2251: res = dir_sdi(dp, 0);
  6848  003FB4  C0EA  F0AA         	movff	dir_find@dp,dir_sdi@dp
  6849  003FB8  C0EB  F0AB         	movff	dir_find@dp+1,dir_sdi@dp+1
  6850  003FBC  0E00               	movlw	0
  6851  003FBE  0100               	movlb	0	; () banked
  6852  003FC0  6FAC               	movwf	dir_sdi@ofs& (0+255),b
  6853  003FC2  0E00               	movlw	0
  6854  003FC4  6FAD               	movwf	(dir_sdi@ofs+1)& (0+255),b
  6855  003FC6  0E00               	movlw	0
  6856  003FC8  6FAE               	movwf	(dir_sdi@ofs+2)& (0+255),b
  6857  003FCA  0E00               	movlw	0
  6858  003FCC  6FAF               	movwf	(dir_sdi@ofs+3)& (0+255),b
  6859  003FCE  ECAA  F016         	call	_dir_sdi	;wreg free
  6860  003FD2  0100               	movlb	0	; () banked
  6861  003FD4  6FF1               	movwf	dir_find@res& (0+255),b
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;ff.c: 2252: if (res != FR_OK) return res;
  6865  003FD6  51F1               	movf	dir_find@res& (0+255),w,b
  6866  003FD8  B4D8               	btfsc	status,2,c
  6867  003FDA  D002               	goto	l1259
  6868                           
  6869                           ; BSR set to: 0
  6870  003FDC  51F1               	movf	dir_find@res& (0+255),w,b
  6871                           
  6872                           ; BSR set to: 0
  6873  003FDE  0012               	return	
  6874  003FE0                     l1259:
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;ff.c: 2278: res = move_window(fs, dp->sect);
  6878                           
  6879                           ; BSR set to: 0
  6880                           
  6881                           ;ff.c: 2277: do {
  6882                           
  6883                           ; BSR set to: 0
  6884  003FE0  C0EE  F085         	movff	dir_find@fs,move_window@fs
  6885  003FE4  C0EF  F086         	movff	dir_find@fs+1,move_window@fs+1
  6886  003FE8  EE20 F016          	lfsr	2,22
  6887  003FEC  51EA               	movf	dir_find@dp& (0+255),w,b
  6888  003FEE  26D9               	addwf	fsr2l,f,c
  6889  003FF0  51EB               	movf	(dir_find@dp+1)& (0+255),w,b
  6890  003FF2  22DA               	addwfc	fsr2h,f,c
  6891  003FF4  CFDE F087          	movff	postinc2,move_window@sector
  6892  003FF8  CFDE F088          	movff	postinc2,move_window@sector+1
  6893  003FFC  CFDE F089          	movff	postinc2,move_window@sector+2
  6894  004000  CFDE F08A          	movff	postinc2,move_window@sector+3
  6895  004004  EC2E  F026         	call	_move_window	;wreg free
  6896  004008  0100               	movlb	0	; () banked
  6897  00400A  6FF1               	movwf	dir_find@res& (0+255),b
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;ff.c: 2279: if (res != FR_OK) break;
  6901  00400C  51F1               	movf	dir_find@res& (0+255),w,b
  6902  00400E  A4D8               	btfss	status,2,c
  6903  004010  D063               	goto	u17250
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;ff.c: 2280: c = dp->dir[0];
  6907                           
  6908                           ; BSR set to: 0
  6909                           
  6910                           ; BSR set to: 0
  6911  004012  EE20 F01A          	lfsr	2,26
  6912  004016  51EA               	movf	dir_find@dp& (0+255),w,b
  6913  004018  26D9               	addwf	fsr2l,f,c
  6914  00401A  51EB               	movf	(dir_find@dp+1)& (0+255),w,b
  6915  00401C  22DA               	addwfc	fsr2h,f,c
  6916  00401E  CFDE F0EC          	movff	postinc2,??_dir_find
  6917  004022  CFDD F0ED          	movff	postdec2,??_dir_find+1
  6918  004026  C0EC  FFD9         	movff	??_dir_find,fsr2l
  6919  00402A  C0ED  FFDA         	movff	??_dir_find+1,fsr2h
  6920  00402E  50DF               	movf	indf2,w,c
  6921  004030  6FF0               	movwf	dir_find@c& (0+255),b
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;ff.c: 2281: if (c == 0) { res = FR_NO_FILE; break; }
  6925  004032  51F0               	movf	dir_find@c& (0+255),w,b
  6926  004034  A4D8               	btfss	status,2,c
  6927  004036  D003               	goto	l1264
  6928                           
  6929                           ; BSR set to: 0
  6930  004038  0E04               	movlw	4
  6931  00403A  6FF1               	movwf	dir_find@res& (0+255),b
  6932  00403C  D04D               	goto	u17250
  6933  00403E                     l1264:
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;ff.c: 2304: dp->obj.attr = dp->dir[11] & 0x3F;
  6937                           
  6938                           ; BSR set to: 0
  6939  00403E  EE20 F004          	lfsr	2,4
  6940  004042  51EA               	movf	dir_find@dp& (0+255),w,b
  6941  004044  26D9               	addwf	fsr2l,f,c
  6942  004046  51EB               	movf	(dir_find@dp+1)& (0+255),w,b
  6943  004048  22DA               	addwfc	fsr2h,f,c
  6944  00404A  EE10 F01A          	lfsr	1,26
  6945  00404E  51EA               	movf	dir_find@dp& (0+255),w,b
  6946  004050  26E1               	addwf	fsr1l,f,c
  6947  004052  51EB               	movf	(dir_find@dp+1)& (0+255),w,b
  6948  004054  22E2               	addwfc	fsr1h,f,c
  6949  004056  EE00 F00B          	lfsr	0,11
  6950  00405A  50E6               	movf	postinc1,w,c
  6951  00405C  26E9               	addwf	fsr0l,f,c
  6952  00405E  50E5               	movf	postdec1,w,c
  6953  004060  22EA               	addwfc	fsr0h,f,c
  6954  004062  50EF               	movf	indf0,w,c
  6955  004064  0B3F               	andlw	63
  6956  004066  6EDF               	movwf	indf2,c
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;ff.c: 2305: if (!(dp->dir[11] & 0x08) && !mem_cmp(dp->dir, dp->fn, 11)) break;
  6960  004068  EE20 F01A          	lfsr	2,26
  6961  00406C  51EA               	movf	dir_find@dp& (0+255),w,b
  6962  00406E  26D9               	addwf	fsr2l,f,c
  6963  004070  51EB               	movf	(dir_find@dp+1)& (0+255),w,b
  6964  004072  22DA               	addwfc	fsr2h,f,c
  6965  004074  EE10 F00B          	lfsr	1,11
  6966  004078  50DE               	movf	postinc2,w,c
  6967  00407A  26E1               	addwf	fsr1l,f,c
  6968  00407C  50DD               	movf	postdec2,w,c
  6969  00407E  22E2               	addwfc	fsr1h,f,c
  6970  004080  B6E7               	btfsc	indf1,3,c
  6971  004082  D01A               	goto	l1265
  6972                           
  6973                           ; BSR set to: 0
  6974  004084  EE20 F01A          	lfsr	2,26
  6975  004088  51EA               	movf	dir_find@dp& (0+255),w,b
  6976  00408A  26D9               	addwf	fsr2l,f,c
  6977  00408C  51EB               	movf	(dir_find@dp+1)& (0+255),w,b
  6978  00408E  22DA               	addwfc	fsr2h,f,c
  6979  004090  CFDE F01A          	movff	postinc2,mem_cmp@dst
  6980  004094  CFDD F01B          	movff	postdec2,mem_cmp@dst+1
  6981  004098  0E1C               	movlw	28
  6982  00409A  25EA               	addwf	dir_find@dp& (0+255),w,b
  6983  00409C  6E1C               	movwf	mem_cmp@src,c
  6984  00409E  0E00               	movlw	0
  6985  0040A0  21EB               	addwfc	(dir_find@dp+1)& (0+255),w,b
  6986  0040A2  6E1D               	movwf	mem_cmp@src+1,c
  6987  0040A4  0E00               	movlw	0
  6988  0040A6  6E1F               	movwf	mem_cmp@cnt+1,c
  6989  0040A8  0E0B               	movlw	11
  6990  0040AA  6E1E               	movwf	mem_cmp@cnt,c
  6991  0040AC  EC09  F028         	call	_mem_cmp	;wreg free
  6992  0040B0  501A               	movf	?_mem_cmp,w,c
  6993  0040B2  101B               	iorwf	?_mem_cmp+1,w,c
  6994  0040B4  B4D8               	btfsc	status,2,c
  6995  0040B6  D010               	goto	u17250
  6996  0040B8                     l1265:
  6997                           
  6998                           ;ff.c: 2307: res = dir_next(dp, 0);
  6999  0040B8  C0EA  F0CC         	movff	dir_find@dp,dir_next@dp
  7000  0040BC  C0EB  F0CD         	movff	dir_find@dp+1,dir_next@dp+1
  7001  0040C0  0E00               	movlw	0
  7002  0040C2  0100               	movlb	0	; () banked
  7003  0040C4  6FCF               	movwf	(dir_next@stretch+1)& (0+255),b
  7004  0040C6  0E00               	movlw	0
  7005  0040C8  6FCE               	movwf	dir_next@stretch& (0+255),b
  7006  0040CA  EC16  F013         	call	_dir_next	;wreg free
  7007  0040CE  0100               	movlb	0	; () banked
  7008  0040D0  6FF1               	movwf	dir_find@res& (0+255),b
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;ff.c: 2308: } while (res == FR_OK);
  7012  0040D2  51F1               	movf	dir_find@res& (0+255),w,b
  7013  0040D4  B4D8               	btfsc	status,2,c
  7014  0040D6  D784               	goto	l1259
  7015  0040D8                     u17250:
  7016                           
  7017                           ;ff.c: 2310: return res;
  7018                           
  7019                           ; BSR set to: 0
  7020  0040D8  0100               	movlb	0	; () banked
  7021  0040DA  51F1               	movf	dir_find@res& (0+255),w,b
  7022  0040DC  0012               	return	
  7023  0040DE                     __end_of_dir_find:
  7024                           	opt stack 0
  7025                           tosu	equ	0xFFF
  7026                           tosh	equ	0xFFE
  7027                           tosl	equ	0xFFD
  7028                           pclath	equ	0xFFA
  7029                           tblptru	equ	0xFF8
  7030                           tblptrh	equ	0xFF7
  7031                           tblptrl	equ	0xFF6
  7032                           tablat	equ	0xFF5
  7033                           prodh	equ	0xFF4
  7034                           prodl	equ	0xFF3
  7035                           intcon	equ	0xFF2
  7036                           intcon2	equ	0xFF1
  7037                           intcon3	equ	0xFF0
  7038                           indf0	equ	0xFEF
  7039                           postinc0	equ	0xFEE
  7040                           fsr0h	equ	0xFEA
  7041                           fsr0l	equ	0xFE9
  7042                           wreg	equ	0xFE8
  7043                           indf1	equ	0xFE7
  7044                           postinc1	equ	0xFE6
  7045                           postdec1	equ	0xFE5
  7046                           fsr1h	equ	0xFE2
  7047                           fsr1l	equ	0xFE1
  7048                           indf2	equ	0xFDF
  7049                           postinc2	equ	0xFDE
  7050                           postdec2	equ	0xFDD
  7051                           plusw2	equ	0xFDB
  7052                           fsr2h	equ	0xFDA
  7053                           fsr2l	equ	0xFD9
  7054                           status	equ	0xFD8
  7055                           
  7056 ;; *************** function _create_name *****************
  7057 ;; Defined at:
  7058 ;;		line 2654 in file "bibliotecas/ff.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  dp              2   33[COMRAM] PTR struct .
  7061 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@dj(40), f_unlink@dj(40), 
  7062 ;;		 -> f_stat@dj(40), f_open@dj(40), 
  7063 ;;  path            2   35[COMRAM] PTR PTR const unsigned c
  7064 ;;		 -> follow_path@path(2), 
  7065 ;; Auto vars:     Size  Location     Type
  7066 ;;  i               2   11[BANK0 ] unsigned int 
  7067 ;;  sfn             2    9[BANK0 ] PTR unsigned char 
  7068 ;;		 -> djn.fn(12), f_rename@djn(40), djo.fn(12), f_rename@djo(40), 
  7069 ;;		 -> dj.fn(12), f_mkdir@dj(40), dj.fn(12), f_unlink@dj(40), 
  7070 ;;		 -> dj.fn(12), f_stat@dj(40), dj.fn(12), f_open@dj(40), 
  7071 ;;  si              2    7[BANK0 ] unsigned int 
  7072 ;;  p               2    5[BANK0 ] PTR const unsigned char 
  7073 ;;		 -> STR_11(11), STR_10(3), 
  7074 ;;  ni              2    3[BANK0 ] unsigned int 
  7075 ;;  c               1   13[BANK0 ] unsigned char 
  7076 ;;  d               1    2[BANK0 ] unsigned char 
  7077 ;; Return value:  Size  Location     Type
  7078 ;;                  1    wreg      enum E79
  7079 ;; Registers used:
  7080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7081 ;; Tracked objects:
  7082 ;;		On entry : 0/0
  7083 ;;		On exit  : 0/0
  7084 ;;		Unchanged: 0/0
  7085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7086 ;;      Params:         4       0       0       0       0       0       0       0       0
  7087 ;;      Locals:         0      14       0       0       0       0       0       0       0
  7088 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7089 ;;      Totals:         8      14       0       0       0       0       0       0       0
  7090 ;;Total ram usage:       22 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; Hardware stack levels required when called:    3
  7093 ;; This function calls:
  7094 ;;		_chk_chr
  7095 ;;		_dbc_1st
  7096 ;;		_dbc_2nd
  7097 ;;		_mem_set
  7098 ;; This function is called by:
  7099 ;;		_follow_path
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           	psect	text20
  7104  003086                     __ptext20:
  7105                           	opt stack 0
  7106  003086                     _create_name:
  7107                           	opt stack 23
  7108                           
  7109                           ;ff.c: 2789: BYTE c, d, *sfn;
  7110                           ;ff.c: 2790: UINT ni, si, i;
  7111                           ;ff.c: 2791: const char *p;
  7112                           ;ff.c: 2794: p = *path; sfn = dp->fn;
  7113                           
  7114                           ; BSR set to: 0
  7115                           ;incstack = 0
  7116  003086  C024  FFD9         	movff	create_name@path,fsr2l
  7117  00308A  C025  FFDA         	movff	create_name@path+1,fsr2h
  7118  00308E  CFDE F065          	movff	postinc2,create_name@p
  7119  003092  CFDD F066          	movff	postdec2,create_name@p+1
  7120  003096  0E1C               	movlw	28
  7121  003098  2422               	addwf	create_name@dp,w,c
  7122  00309A  0100               	movlb	0	; () banked
  7123  00309C  6F69               	movwf	create_name@sfn& (0+255),b
  7124  00309E  0E00               	movlw	0
  7125  0030A0  2023               	addwfc	create_name@dp+1,w,c
  7126  0030A2  6F6A               	movwf	(create_name@sfn+1)& (0+255),b
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;ff.c: 2795: mem_set(sfn, ' ', 11);
  7130  0030A4  C069  F01A         	movff	create_name@sfn,mem_set@dst
  7131  0030A8  C06A  F01B         	movff	create_name@sfn+1,mem_set@dst+1
  7132  0030AC  0E00               	movlw	0
  7133  0030AE  6E1D               	movwf	mem_set@val+1,c
  7134  0030B0  0E20               	movlw	32
  7135  0030B2  6E1C               	movwf	mem_set@val,c
  7136  0030B4  0E00               	movlw	0
  7137  0030B6  6E1F               	movwf	mem_set@cnt+1,c
  7138  0030B8  0E0B               	movlw	11
  7139  0030BA  6E1E               	movwf	mem_set@cnt,c
  7140  0030BC  EC13  F02D         	call	_mem_set	;wreg free
  7141                           
  7142                           ;ff.c: 2796: si = i = 0; ni = 8;
  7143  0030C0  0E00               	movlw	0
  7144  0030C2  0100               	movlb	0	; () banked
  7145  0030C4  6F6C               	movwf	(create_name@i+1)& (0+255),b
  7146  0030C6  0E00               	movlw	0
  7147  0030C8  6F6B               	movwf	create_name@i& (0+255),b
  7148  0030CA  C06B  F067         	movff	create_name@i,create_name@si
  7149  0030CE  C06C  F068         	movff	create_name@i+1,create_name@si+1
  7150                           
  7151                           ; BSR set to: 0
  7152  0030D2  0E00               	movlw	0
  7153  0030D4  6F64               	movwf	(create_name@ni+1)& (0+255),b
  7154  0030D6  0E08               	movlw	8
  7155  0030D8  6F63               	movwf	create_name@ni& (0+255),b
  7156  0030DA                     
  7157                           ; BSR set to: 0
  7158                           ;ff.c: 2811: c = (BYTE)p[si++];
  7159                           
  7160                           ; BSR set to: 0
  7161  0030DA  5167               	movf	create_name@si& (0+255),w,b
  7162  0030DC  2565               	addwf	create_name@p& (0+255),w,b
  7163  0030DE  6E26               	movwf	??_create_name& (0+255),c
  7164  0030E0  5168               	movf	(create_name@si+1)& (0+255),w,b
  7165  0030E2  2166               	addwfc	(create_name@p+1)& (0+255),w,b
  7166  0030E4  6E27               	movwf	(??_create_name+1)& (0+255),c
  7167  0030E6  C026  FFF6         	movff	??_create_name,tblptrl
  7168  0030EA  C027  FFF7         	movff	??_create_name+1,tblptrh
  7169  0030EE                     	if	0	;tblptru may be non-zero
  7170  0030EE                     	endif
  7171  0030EE                     	if	0	;tblptru may be non-zero
  7172  0030EE                     	endif
  7173  0030EE  0008               	tblrd		*
  7174  0030F0  CFF5 F06D          	movff	tablat,create_name@c
  7175                           
  7176                           ; BSR set to: 0
  7177  0030F4  4B67               	infsnz	create_name@si& (0+255),f,b
  7178  0030F6  2B68               	incf	(create_name@si+1)& (0+255),f,b
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;ff.c: 2812: if (c <= ' ') break;
  7182  0030F8  0E21               	movlw	33
  7183  0030FA  616D               	cpfslt	create_name@c& (0+255),b
  7184  0030FC  D001               	goto	l1288
  7185  0030FE  D0B1               	goto	l1289
  7186  003100                     l1288:
  7187                           
  7188                           ; BSR set to: 0
  7189                           ;ff.c: 2813: if (c == '/' || c == '\\') {
  7190                           
  7191                           ; BSR set to: 0
  7192  003100  0E2F               	movlw	47
  7193  003102  196D               	xorwf	create_name@c& (0+255),w,b
  7194  003104  B4D8               	btfsc	status,2,c
  7195  003106  D007               	goto	l1293
  7196                           
  7197                           ; BSR set to: 0
  7198  003108  0E5C               	movlw	92
  7199  00310A  196D               	xorwf	create_name@c& (0+255),w,b
  7200  00310C  B4D8               	btfsc	status,2,c
  7201  00310E  D003               	goto	l1293
  7202  003110  D021               	goto	l1290
  7203  003112                     
  7204                           ; BSR set to: 0
  7205                           
  7206                           ; BSR set to: 0
  7207  003112  4B67               	infsnz	create_name@si& (0+255),f,b
  7208  003114  2B68               	incf	(create_name@si+1)& (0+255),f,b
  7209  003116                     l1293:
  7210                           
  7211                           ; BSR set to: 0
  7212                           
  7213                           ; BSR set to: 0
  7214  003116  5167               	movf	create_name@si& (0+255),w,b
  7215  003118  2565               	addwf	create_name@p& (0+255),w,b
  7216  00311A  6E26               	movwf	??_create_name& (0+255),c
  7217  00311C  5168               	movf	(create_name@si+1)& (0+255),w,b
  7218  00311E  2166               	addwfc	(create_name@p+1)& (0+255),w,b
  7219  003120  6E27               	movwf	(??_create_name+1)& (0+255),c
  7220  003122  C026  FFF6         	movff	??_create_name,tblptrl
  7221  003126  C027  FFF7         	movff	??_create_name+1,tblptrh
  7222  00312A                     	if	0	;tblptru may be non-zero
  7223  00312A                     	endif
  7224  00312A                     	if	0	;tblptru may be non-zero
  7225  00312A                     	endif
  7226  00312A  0008               	tblrd		*
  7227  00312C  50F5               	movf	tablat,w,c
  7228  00312E  0A2F               	xorlw	47
  7229  003130  B4D8               	btfsc	status,2,c
  7230  003132  D7EF               	goto	l1294
  7231                           
  7232                           ; BSR set to: 0
  7233  003134  5167               	movf	create_name@si& (0+255),w,b
  7234  003136  2565               	addwf	create_name@p& (0+255),w,b
  7235  003138  6E26               	movwf	??_create_name& (0+255),c
  7236  00313A  5168               	movf	(create_name@si+1)& (0+255),w,b
  7237  00313C  2166               	addwfc	(create_name@p+1)& (0+255),w,b
  7238  00313E  6E27               	movwf	(??_create_name+1)& (0+255),c
  7239  003140  C026  FFF6         	movff	??_create_name,tblptrl
  7240  003144  C027  FFF7         	movff	??_create_name+1,tblptrh
  7241  003148                     	if	0	;tblptru may be non-zero
  7242  003148                     	endif
  7243  003148                     	if	0	;tblptru may be non-zero
  7244  003148                     	endif
  7245  003148  0008               	tblrd		*
  7246  00314A  50F5               	movf	tablat,w,c
  7247  00314C  0A5C               	xorlw	92
  7248  00314E  A4D8               	btfss	status,2,c
  7249  003150  D088               	goto	l1289
  7250  003152  D7DF               	goto	l1294
  7251  003154                     l1290:
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;ff.c: 2816: }
  7255                           ;ff.c: 2817: if (c == '.' || i >= ni) {
  7256                           
  7257                           ; BSR set to: 0
  7258  003154  0E2E               	movlw	46
  7259  003156  196D               	xorwf	create_name@c& (0+255),w,b
  7260  003158  B4D8               	btfsc	status,2,c
  7261  00315A  D006               	goto	u17320
  7262                           
  7263                           ; BSR set to: 0
  7264  00315C  5163               	movf	create_name@ni& (0+255),w,b
  7265  00315E  5D6B               	subwf	create_name@i& (0+255),w,b
  7266  003160  5164               	movf	(create_name@ni+1)& (0+255),w,b
  7267  003162  596C               	subwfb	(create_name@i+1)& (0+255),w,b
  7268  003164  A0D8               	btfss	status,0,c
  7269  003166  D013               	goto	l1296
  7270  003168                     u17320:
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;ff.c: 2818: if (ni == 11 || c != '.') return FR_INVALID_NAME;
  7274                           
  7275                           ; BSR set to: 0
  7276  003168  0E0B               	movlw	11
  7277  00316A  1963               	xorwf	create_name@ni& (0+255),w,b
  7278  00316C  1164               	iorwf	(create_name@ni+1)& (0+255),w,b
  7279  00316E  B4D8               	btfsc	status,2,c
  7280  003170  D004               	goto	u17340
  7281                           
  7282                           ; BSR set to: 0
  7283  003172  0E2E               	movlw	46
  7284  003174  196D               	xorwf	create_name@c& (0+255),w,b
  7285  003176  B4D8               	btfsc	status,2,c
  7286  003178  D002               	goto	l1299
  7287  00317A                     u17340:
  7288                           
  7289                           ; BSR set to: 0
  7290                           
  7291                           ; BSR set to: 0
  7292  00317A  0E06               	movlw	6
  7293                           
  7294                           ; BSR set to: 0
  7295  00317C  0012               	return	
  7296  00317E                     l1299:
  7297                           
  7298                           ; BSR set to: 0
  7299                           ;ff.c: 2819: i = 8; ni = 11;
  7300                           
  7301                           ; BSR set to: 0
  7302  00317E  0E00               	movlw	0
  7303  003180  6F6C               	movwf	(create_name@i+1)& (0+255),b
  7304  003182  0E08               	movlw	8
  7305  003184  6F6B               	movwf	create_name@i& (0+255),b
  7306  003186  0E00               	movlw	0
  7307  003188  6F64               	movwf	(create_name@ni+1)& (0+255),b
  7308  00318A  0E0B               	movlw	11
  7309  00318C  D7A5               	goto	L11
  7310  00318E                     l1296:
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;ff.c: 2821: }
  7314                           ;ff.c: 2831: if (dbc_1st(c)) {
  7315                           
  7316                           ; BSR set to: 0
  7317  00318E  516D               	movf	create_name@c& (0+255),w,b
  7318  003190  EC5C  F02A         	call	_dbc_1st
  7319  003194  501A               	movf	?_dbc_1st,w,c
  7320  003196  101B               	iorwf	?_dbc_1st+1,w,c
  7321  003198  B4D8               	btfsc	status,2,c
  7322  00319A  D040               	goto	l1304
  7323                           
  7324                           ;ff.c: 2832: d = (BYTE)p[si++];
  7325  00319C  0100               	movlb	0	; () banked
  7326  00319E  5167               	movf	create_name@si& (0+255),w,b
  7327  0031A0  2565               	addwf	create_name@p& (0+255),w,b
  7328  0031A2  6E26               	movwf	??_create_name& (0+255),c
  7329  0031A4  5168               	movf	(create_name@si+1)& (0+255),w,b
  7330  0031A6  2166               	addwfc	(create_name@p+1)& (0+255),w,b
  7331  0031A8  6E27               	movwf	(??_create_name+1)& (0+255),c
  7332  0031AA  C026  FFF6         	movff	??_create_name,tblptrl
  7333  0031AE  C027  FFF7         	movff	??_create_name+1,tblptrh
  7334  0031B2                     	if	0	;tblptru may be non-zero
  7335  0031B2                     	endif
  7336  0031B2                     	if	0	;tblptru may be non-zero
  7337  0031B2                     	endif
  7338  0031B2  0008               	tblrd		*
  7339  0031B4  CFF5 F062          	movff	tablat,create_name@d
  7340                           
  7341                           ; BSR set to: 0
  7342  0031B8  4B67               	infsnz	create_name@si& (0+255),f,b
  7343  0031BA  2B68               	incf	(create_name@si+1)& (0+255),f,b
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;ff.c: 2833: if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;
  7347  0031BC  5162               	movf	create_name@d& (0+255),w,b
  7348  0031BE  EC78  F027         	call	_dbc_2nd
  7349  0031C2  501A               	movf	?_dbc_2nd,w,c
  7350  0031C4  101B               	iorwf	?_dbc_2nd+1,w,c
  7351  0031C6  B4D8               	btfsc	status,2,c
  7352  0031C8  D013               	goto	u17370
  7353  0031CA  0EFF               	movlw	255
  7354  0031CC  6E26               	movwf	??_create_name& (0+255),c
  7355  0031CE  0EFF               	movlw	255
  7356  0031D0  6E27               	movwf	(??_create_name+1)& (0+255),c
  7357  0031D2  C063  F028         	movff	create_name@ni,??_create_name+2
  7358  0031D6  C064  F029         	movff	create_name@ni+1,??_create_name+3
  7359  0031DA  5026               	movf	??_create_name,w,c
  7360  0031DC  2628               	addwf	??_create_name+2,f,c
  7361  0031DE  5027               	movf	??_create_name+1,w,c
  7362  0031E0  2229               	addwfc	??_create_name+3,f,c
  7363  0031E2  5028               	movf	??_create_name+2,w,c
  7364  0031E4  0100               	movlb	0	; () banked
  7365  0031E6  5D6B               	subwf	create_name@i& (0+255),w,b
  7366  0031E8  5029               	movf	??_create_name+3,w,c
  7367  0031EA  596C               	subwfb	(create_name@i+1)& (0+255),w,b
  7368  0031EC  A0D8               	btfss	status,0,c
  7369  0031EE  D002               	goto	l1305
  7370  0031F0                     u17370:
  7371                           
  7372                           ; BSR set to: 0
  7373  0031F0  0E06               	movlw	6
  7374  0031F2  0012               	return	
  7375  0031F4                     l1305:
  7376                           
  7377                           ;ff.c: 2834: sfn[i++] = c;
  7378  0031F4  0100               	movlb	0	; () banked
  7379  0031F6  516B               	movf	create_name@i& (0+255),w,b
  7380  0031F8  2569               	addwf	create_name@sfn& (0+255),w,b
  7381  0031FA  6ED9               	movwf	fsr2l,c
  7382  0031FC  516C               	movf	(create_name@i+1)& (0+255),w,b
  7383  0031FE  216A               	addwfc	(create_name@sfn+1)& (0+255),w,b
  7384  003200  6EDA               	movwf	fsr2h,c
  7385  003202  C06D  FFDF         	movff	create_name@c,indf2
  7386                           
  7387                           ; BSR set to: 0
  7388  003206  4B6B               	infsnz	create_name@i& (0+255),f,b
  7389  003208  2B6C               	incf	(create_name@i+1)& (0+255),f,b
  7390                           
  7391                           ; BSR set to: 0
  7392                           ;ff.c: 2835: sfn[i++] = d;
  7393  00320A  516B               	movf	create_name@i& (0+255),w,b
  7394  00320C  2569               	addwf	create_name@sfn& (0+255),w,b
  7395  00320E  6ED9               	movwf	fsr2l,c
  7396  003210  516C               	movf	(create_name@i+1)& (0+255),w,b
  7397  003212  216A               	addwfc	(create_name@sfn+1)& (0+255),w,b
  7398  003214  6EDA               	movwf	fsr2h,c
  7399  003216  C062  FFDF         	movff	create_name@d,indf2
  7400  00321A  D020               	goto	l13578
  7401  00321C                     l1304:
  7402                           
  7403                           ;ff.c: 2837: if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;
  7404                           
  7405                           ; BSR set to: 0
  7406  00321C  0EBF               	movlw	low STR_26
  7407  00321E  6E1A               	movwf	chk_chr@str,c
  7408  003220  0E61               	movlw	high STR_26
  7409  003222  6E1B               	movwf	chk_chr@str+1,c
  7410  003224  C06D  F01C         	movff	create_name@c,chk_chr@chr
  7411  003228  6A1D               	clrf	chk_chr@chr+1,c
  7412  00322A  EC65  F02B         	call	_chk_chr	;wreg free
  7413  00322E  501A               	movf	?_chk_chr,w,c
  7414  003230  101B               	iorwf	?_chk_chr+1,w,c
  7415  003232  B4D8               	btfsc	status,2,c
  7416  003234  D002               	goto	l1309
  7417  003236  0E06               	movlw	6
  7418  003238  0012               	return	
  7419  00323A                     l1309:
  7420                           
  7421                           ;ff.c: 2838: if (((c) >= 'a' && (c) <= 'z')) c -= 0x20;
  7422  00323A  0E60               	movlw	96
  7423  00323C  0100               	movlb	0	; () banked
  7424  00323E  656D               	cpfsgt	create_name@c& (0+255),b
  7425  003240  D005               	goto	l1310
  7426                           
  7427                           ; BSR set to: 0
  7428  003242  0E7B               	movlw	123
  7429  003244  616D               	cpfslt	create_name@c& (0+255),b
  7430  003246  D002               	goto	l1310
  7431                           
  7432                           ; BSR set to: 0
  7433  003248  0E20               	movlw	32
  7434  00324A  5F6D               	subwf	create_name@c& (0+255),f,b
  7435  00324C                     l1310:
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;ff.c: 2839: sfn[i++] = c;
  7439                           
  7440                           ; BSR set to: 0
  7441  00324C  516B               	movf	create_name@i& (0+255),w,b
  7442  00324E  2569               	addwf	create_name@sfn& (0+255),w,b
  7443  003250  6ED9               	movwf	fsr2l,c
  7444  003252  516C               	movf	(create_name@i+1)& (0+255),w,b
  7445  003254  216A               	addwfc	(create_name@sfn+1)& (0+255),w,b
  7446  003256  6EDA               	movwf	fsr2h,c
  7447  003258  C06D  FFDF         	movff	create_name@c,indf2
  7448  00325C                     l13578:
  7449                           
  7450                           ; BSR set to: 0
  7451  00325C  4B6B               	infsnz	create_name@i& (0+255),f,b
  7452  00325E  2B6C               	incf	(create_name@i+1)& (0+255),f,b
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;ff.c: 2840: }
  7456                           ;ff.c: 2841: }
  7457                           
  7458                           ; BSR set to: 0
  7459  003260  D73C               	goto	l1287
  7460  003262                     l1289:
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;ff.c: 2842: *path = p + si;
  7464                           
  7465                           ; BSR set to: 0
  7466  003262  5167               	movf	create_name@si& (0+255),w,b
  7467  003264  2565               	addwf	create_name@p& (0+255),w,b
  7468  003266  6E26               	movwf	??_create_name& (0+255),c
  7469  003268  5168               	movf	(create_name@si+1)& (0+255),w,b
  7470  00326A  2166               	addwfc	(create_name@p+1)& (0+255),w,b
  7471  00326C  6E27               	movwf	(??_create_name+1)& (0+255),c
  7472  00326E  C024  FFD9         	movff	create_name@path,fsr2l
  7473  003272  C025  FFDA         	movff	create_name@path+1,fsr2h
  7474  003276  C026  FFDE         	movff	??_create_name,postinc2
  7475  00327A  C027  FFDD         	movff	??_create_name+1,postdec2
  7476                           
  7477                           ; BSR set to: 0
  7478                           ;ff.c: 2843: if (i == 0) return FR_INVALID_NAME;
  7479  00327E  516B               	movf	create_name@i& (0+255),w,b
  7480  003280  116C               	iorwf	(create_name@i+1)& (0+255),w,b
  7481  003282  A4D8               	btfss	status,2,c
  7482  003284  D002               	goto	l1311
  7483                           
  7484                           ; BSR set to: 0
  7485  003286  0E06               	movlw	6
  7486                           
  7487                           ; BSR set to: 0
  7488  003288  0012               	return	
  7489  00328A                     l1311:
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;ff.c: 2845: if (sfn[0] == 0xE5) sfn[0] = 0x05;
  7493                           
  7494                           ; BSR set to: 0
  7495  00328A  C069  FFD9         	movff	create_name@sfn,fsr2l
  7496  00328E  C06A  FFDA         	movff	create_name@sfn+1,fsr2h
  7497  003292  0EE5               	movlw	229
  7498  003294  18DE               	xorwf	postinc2,w,c
  7499  003296  A4D8               	btfss	status,2,c
  7500  003298  D006               	goto	l1312
  7501                           
  7502                           ; BSR set to: 0
  7503  00329A  C069  FFD9         	movff	create_name@sfn,fsr2l
  7504  00329E  C06A  FFDA         	movff	create_name@sfn+1,fsr2h
  7505  0032A2  0E05               	movlw	5
  7506  0032A4  6EDF               	movwf	indf2,c
  7507  0032A6                     l1312:
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;ff.c: 2846: sfn[11] = (c <= ' ') ? 0x04 : 0;
  7511                           
  7512                           ; BSR set to: 0
  7513  0032A6  0E20               	movlw	32
  7514  0032A8  656D               	cpfsgt	create_name@c& (0+255),b
  7515  0032AA  D004               	goto	l1314
  7516                           
  7517                           ; BSR set to: 0
  7518  0032AC  0E00               	movlw	0
  7519  0032AE  6F61               	movwf	(_create_name$2900+1)& (0+255),b
  7520  0032B0  0E00               	movlw	0
  7521  0032B2  D003               	goto	L12
  7522  0032B4                     l1314:
  7523                           
  7524                           ; BSR set to: 0
  7525                           
  7526                           ; BSR set to: 0
  7527  0032B4  0E00               	movlw	0
  7528  0032B6  6F61               	movwf	(_create_name$2900+1)& (0+255),b
  7529  0032B8  0E04               	movlw	4
  7530  0032BA                     L12:
  7531  0032BA  6F60               	movwf	_create_name$2900& (0+255),b
  7532                           
  7533                           ; BSR set to: 0
  7534                           
  7535                           ; BSR set to: 0
  7536  0032BC  EE20 F00B          	lfsr	2,11
  7537  0032C0  5169               	movf	create_name@sfn& (0+255),w,b
  7538  0032C2  26D9               	addwf	fsr2l,f,c
  7539  0032C4  516A               	movf	(create_name@sfn+1)& (0+255),w,b
  7540  0032C6  22DA               	addwfc	fsr2h,f,c
  7541  0032C8  C060  FFDF         	movff	_create_name$2900,indf2
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;ff.c: 2848: return FR_OK;
  7545  0032CC  0E00               	movlw	0
  7546  0032CE  0012               	return	
  7547  0032D0                     __end_of_create_name:
  7548                           	opt stack 0
  7549                           tosu	equ	0xFFF
  7550                           tosh	equ	0xFFE
  7551                           tosl	equ	0xFFD
  7552                           pclath	equ	0xFFA
  7553                           tblptru	equ	0xFF8
  7554                           tblptrh	equ	0xFF7
  7555                           tblptrl	equ	0xFF6
  7556                           tablat	equ	0xFF5
  7557                           prodh	equ	0xFF4
  7558                           prodl	equ	0xFF3
  7559                           intcon	equ	0xFF2
  7560                           intcon2	equ	0xFF1
  7561                           intcon3	equ	0xFF0
  7562                           indf0	equ	0xFEF
  7563                           postinc0	equ	0xFEE
  7564                           fsr0h	equ	0xFEA
  7565                           fsr0l	equ	0xFE9
  7566                           wreg	equ	0xFE8
  7567                           indf1	equ	0xFE7
  7568                           postinc1	equ	0xFE6
  7569                           postdec1	equ	0xFE5
  7570                           fsr1h	equ	0xFE2
  7571                           fsr1l	equ	0xFE1
  7572                           indf2	equ	0xFDF
  7573                           postinc2	equ	0xFDE
  7574                           postdec2	equ	0xFDD
  7575                           plusw2	equ	0xFDB
  7576                           fsr2h	equ	0xFDA
  7577                           fsr2l	equ	0xFD9
  7578                           status	equ	0xFD8
  7579                           
  7580 ;; *************** function _dbc_2nd *****************
  7581 ;; Defined at:
  7582 ;;		line 700 in file "bibliotecas/ff.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;  c               1    wreg     unsigned char 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;  c               1   27[COMRAM] unsigned char 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  2   25[COMRAM] int 
  7589 ;; Registers used:
  7590 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7596 ;;      Params:         2       0       0       0       0       0       0       0       0
  7597 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7598 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7599 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7600 ;;Total ram usage:        3 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    2
  7603 ;; This function calls:
  7604 ;;		Nothing
  7605 ;; This function is called by:
  7606 ;;		_create_name
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           	psect	text21
  7611  004EF0                     __ptext21:
  7612                           	opt stack 0
  7613  004EF0                     _dbc_2nd:
  7614                           	opt stack 23
  7615                           
  7616                           ;incstack = 0
  7617                           ;dbc_2nd@c stored from wreg
  7618  004EF0  6E1C               	movwf	dbc_2nd@c,c
  7619                           
  7620                           ;ff.c: 709: if (c >= DbcTbl[4]) {
  7621  004EF2  0E98               	movlw	low (_DbcTbl+4)
  7622  004EF4  6EF6               	movwf	tblptrl,c
  7623  004EF6  0E61               	movlw	high (_DbcTbl+4)
  7624  004EF8  6EF7               	movwf	tblptrh,c
  7625  004EFA                     	if	0	;tblptru may be non-zero
  7626  004EFA                     	endif
  7627  004EFA                     	if	0	;tblptru may be non-zero
  7628  004EFA                     	endif
  7629  004EFA  0009               	tblrd		*+
  7630  004EFC  50F5               	movf	tablat,w,c
  7631  004EFE  5C1C               	subwf	dbc_2nd@c,w,c
  7632  004F00  A0D8               	btfss	status,0,c
  7633  004F02  D03C               	goto	l1038
  7634                           
  7635                           ;ff.c: 710: if (c <= DbcTbl[5]) return 1;
  7636  004F04  0E99               	movlw	low (_DbcTbl+5)
  7637  004F06  6EF6               	movwf	tblptrl,c
  7638  004F08  0E61               	movlw	high (_DbcTbl+5)
  7639  004F0A  6EF7               	movwf	tblptrh,c
  7640  004F0C                     	if	0	;tblptru may be non-zero
  7641  004F0C                     	endif
  7642  004F0C                     	if	0	;tblptru may be non-zero
  7643  004F0C                     	endif
  7644  004F0C  501C               	movf	dbc_2nd@c,w,c
  7645  004F0E  0009               	tblrd		*+
  7646  004F10  5CF5               	subwf	tablat,w,c
  7647  004F12  A0D8               	btfss	status,0,c
  7648  004F14  D005               	goto	l1035
  7649  004F16  0E00               	movlw	0
  7650  004F18  6E1B               	movwf	?_dbc_2nd+1,c
  7651  004F1A  0E01               	movlw	1
  7652  004F1C  6E1A               	movwf	?_dbc_2nd,c
  7653  004F1E  0012               	return	
  7654  004F20                     l1035:
  7655                           
  7656                           ;ff.c: 711: if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
  7657  004F20  0E9A               	movlw	low (_DbcTbl+6)
  7658  004F22  6EF6               	movwf	tblptrl,c
  7659  004F24  0E61               	movlw	high (_DbcTbl+6)
  7660  004F26  6EF7               	movwf	tblptrh,c
  7661  004F28                     	if	0	;tblptru may be non-zero
  7662  004F28                     	endif
  7663  004F28                     	if	0	;tblptru may be non-zero
  7664  004F28                     	endif
  7665  004F28  0009               	tblrd		*+
  7666  004F2A  50F5               	movf	tablat,w,c
  7667  004F2C  5C1C               	subwf	dbc_2nd@c,w,c
  7668  004F2E  A0D8               	btfss	status,0,c
  7669  004F30  D00E               	goto	l1037
  7670  004F32  0E9B               	movlw	low (_DbcTbl+7)
  7671  004F34  6EF6               	movwf	tblptrl,c
  7672  004F36  0E61               	movlw	high (_DbcTbl+7)
  7673  004F38  6EF7               	movwf	tblptrh,c
  7674  004F3A                     	if	0	;tblptru may be non-zero
  7675  004F3A                     	endif
  7676  004F3A                     	if	0	;tblptru may be non-zero
  7677  004F3A                     	endif
  7678  004F3A  501C               	movf	dbc_2nd@c,w,c
  7679  004F3C  0009               	tblrd		*+
  7680  004F3E  5CF5               	subwf	tablat,w,c
  7681  004F40  A0D8               	btfss	status,0,c
  7682  004F42  D005               	goto	l1037
  7683  004F44  0E00               	movlw	0
  7684  004F46  6E1B               	movwf	?_dbc_2nd+1,c
  7685  004F48  0E01               	movlw	1
  7686  004F4A  6E1A               	movwf	?_dbc_2nd,c
  7687  004F4C  0012               	return	
  7688  004F4E                     l1037:
  7689                           
  7690                           ;ff.c: 712: if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
  7691  004F4E  0E9C               	movlw	low (_DbcTbl+8)
  7692  004F50  6EF6               	movwf	tblptrl,c
  7693  004F52  0E61               	movlw	high (_DbcTbl+8)
  7694  004F54  6EF7               	movwf	tblptrh,c
  7695  004F56                     	if	0	;tblptru may be non-zero
  7696  004F56                     	endif
  7697  004F56                     	if	0	;tblptru may be non-zero
  7698  004F56                     	endif
  7699  004F56  0009               	tblrd		*+
  7700  004F58  50F5               	movf	tablat,w,c
  7701  004F5A  5C1C               	subwf	dbc_2nd@c,w,c
  7702  004F5C  A0D8               	btfss	status,0,c
  7703  004F5E  D00E               	goto	l1038
  7704  004F60  0E9D               	movlw	low (_DbcTbl+9)
  7705  004F62  6EF6               	movwf	tblptrl,c
  7706  004F64  0E61               	movlw	high (_DbcTbl+9)
  7707  004F66  6EF7               	movwf	tblptrh,c
  7708  004F68                     	if	0	;tblptru may be non-zero
  7709  004F68                     	endif
  7710  004F68                     	if	0	;tblptru may be non-zero
  7711  004F68                     	endif
  7712  004F68  501C               	movf	dbc_2nd@c,w,c
  7713  004F6A  0009               	tblrd		*+
  7714  004F6C  5CF5               	subwf	tablat,w,c
  7715  004F6E  A0D8               	btfss	status,0,c
  7716  004F70  D005               	goto	l1038
  7717  004F72  0E00               	movlw	0
  7718  004F74  6E1B               	movwf	?_dbc_2nd+1,c
  7719  004F76  0E01               	movlw	1
  7720  004F78  6E1A               	movwf	?_dbc_2nd,c
  7721  004F7A  0012               	return	
  7722  004F7C                     l1038:
  7723                           
  7724                           ;ff.c: 713: }
  7725                           ;ff.c: 717: return 0;
  7726  004F7C  0E00               	movlw	0
  7727  004F7E  6E1B               	movwf	?_dbc_2nd+1,c
  7728  004F80  0E00               	movlw	0
  7729  004F82  6E1A               	movwf	?_dbc_2nd,c
  7730  004F84  0012               	return	
  7731  004F86                     __end_of_dbc_2nd:
  7732                           	opt stack 0
  7733                           tosu	equ	0xFFF
  7734                           tosh	equ	0xFFE
  7735                           tosl	equ	0xFFD
  7736                           pclath	equ	0xFFA
  7737                           tblptru	equ	0xFF8
  7738                           tblptrh	equ	0xFF7
  7739                           tblptrl	equ	0xFF6
  7740                           tablat	equ	0xFF5
  7741                           prodh	equ	0xFF4
  7742                           prodl	equ	0xFF3
  7743                           intcon	equ	0xFF2
  7744                           intcon2	equ	0xFF1
  7745                           intcon3	equ	0xFF0
  7746                           indf0	equ	0xFEF
  7747                           postinc0	equ	0xFEE
  7748                           fsr0h	equ	0xFEA
  7749                           fsr0l	equ	0xFE9
  7750                           wreg	equ	0xFE8
  7751                           indf1	equ	0xFE7
  7752                           postinc1	equ	0xFE6
  7753                           postdec1	equ	0xFE5
  7754                           fsr1h	equ	0xFE2
  7755                           fsr1l	equ	0xFE1
  7756                           indf2	equ	0xFDF
  7757                           postinc2	equ	0xFDE
  7758                           postdec2	equ	0xFDD
  7759                           plusw2	equ	0xFDB
  7760                           fsr2h	equ	0xFDA
  7761                           fsr2l	equ	0xFD9
  7762                           status	equ	0xFD8
  7763                           
  7764 ;; *************** function _dbc_1st *****************
  7765 ;; Defined at:
  7766 ;;		line 679 in file "bibliotecas/ff.c"
  7767 ;; Parameters:    Size  Location     Type
  7768 ;;  c               1    wreg     unsigned char 
  7769 ;; Auto vars:     Size  Location     Type
  7770 ;;  c               1   27[COMRAM] unsigned char 
  7771 ;; Return value:  Size  Location     Type
  7772 ;;                  2   25[COMRAM] int 
  7773 ;; Registers used:
  7774 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7775 ;; Tracked objects:
  7776 ;;		On entry : 0/0
  7777 ;;		On exit  : 0/0
  7778 ;;		Unchanged: 0/0
  7779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7780 ;;      Params:         2       0       0       0       0       0       0       0       0
  7781 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7783 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7784 ;;Total ram usage:        3 bytes
  7785 ;; Hardware stack levels used:    1
  7786 ;; Hardware stack levels required when called:    2
  7787 ;; This function calls:
  7788 ;;		Nothing
  7789 ;; This function is called by:
  7790 ;;		_create_name
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794                           	psect	text22
  7795  0054B8                     __ptext22:
  7796                           	opt stack 0
  7797  0054B8                     _dbc_1st:
  7798                           	opt stack 23
  7799                           
  7800                           ;incstack = 0
  7801                           ;dbc_1st@c stored from wreg
  7802  0054B8  6E1C               	movwf	dbc_1st@c,c
  7803                           
  7804                           ;ff.c: 687: if (c >= DbcTbl[0]) {
  7805  0054BA  0E94               	movlw	low _DbcTbl
  7806  0054BC  6EF6               	movwf	tblptrl,c
  7807  0054BE                     	if	1	;There is more than 1 active tblptr byte
  7808  0054BE  0E61               	movlw	high _DbcTbl
  7809  0054C0  6EF7               	movwf	tblptrh,c
  7810  0054C2                     	endif
  7811  0054C2                     	if	0	;There are less than 3 active tblptr bytes
  7812  0054C2                     	endif
  7813  0054C2  0009               	tblrd		*+
  7814  0054C4  50F5               	movf	tablat,w,c
  7815  0054C6  5C1C               	subwf	dbc_1st@c,w,c
  7816  0054C8  A0D8               	btfss	status,0,c
  7817  0054CA  D025               	goto	l1031
  7818                           
  7819                           ;ff.c: 688: if (c <= DbcTbl[1]) return 1;
  7820  0054CC  0E95               	movlw	low (_DbcTbl+1)
  7821  0054CE  6EF6               	movwf	tblptrl,c
  7822  0054D0  0E61               	movlw	high (_DbcTbl+1)
  7823  0054D2  6EF7               	movwf	tblptrh,c
  7824  0054D4                     	if	0	;tblptru may be non-zero
  7825  0054D4                     	endif
  7826  0054D4                     	if	0	;tblptru may be non-zero
  7827  0054D4                     	endif
  7828  0054D4  501C               	movf	dbc_1st@c,w,c
  7829  0054D6  0009               	tblrd		*+
  7830  0054D8  5CF5               	subwf	tablat,w,c
  7831  0054DA  A0D8               	btfss	status,0,c
  7832  0054DC  D005               	goto	l1029
  7833  0054DE  0E00               	movlw	0
  7834  0054E0  6E1B               	movwf	?_dbc_1st+1,c
  7835  0054E2  0E01               	movlw	1
  7836  0054E4  6E1A               	movwf	?_dbc_1st,c
  7837  0054E6  0012               	return	
  7838  0054E8                     l1029:
  7839                           
  7840                           ;ff.c: 689: if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
  7841  0054E8  0E96               	movlw	low (_DbcTbl+2)
  7842  0054EA  6EF6               	movwf	tblptrl,c
  7843  0054EC  0E61               	movlw	high (_DbcTbl+2)
  7844  0054EE  6EF7               	movwf	tblptrh,c
  7845  0054F0                     	if	0	;tblptru may be non-zero
  7846  0054F0                     	endif
  7847  0054F0                     	if	0	;tblptru may be non-zero
  7848  0054F0                     	endif
  7849  0054F0  0009               	tblrd		*+
  7850  0054F2  50F5               	movf	tablat,w,c
  7851  0054F4  5C1C               	subwf	dbc_1st@c,w,c
  7852  0054F6  A0D8               	btfss	status,0,c
  7853  0054F8  D00E               	goto	l1031
  7854  0054FA  0E97               	movlw	low (_DbcTbl+3)
  7855  0054FC  6EF6               	movwf	tblptrl,c
  7856  0054FE  0E61               	movlw	high (_DbcTbl+3)
  7857  005500  6EF7               	movwf	tblptrh,c
  7858  005502                     	if	0	;tblptru may be non-zero
  7859  005502                     	endif
  7860  005502                     	if	0	;tblptru may be non-zero
  7861  005502                     	endif
  7862  005502  501C               	movf	dbc_1st@c,w,c
  7863  005504  0009               	tblrd		*+
  7864  005506  5CF5               	subwf	tablat,w,c
  7865  005508  A0D8               	btfss	status,0,c
  7866  00550A  D005               	goto	l1031
  7867  00550C  0E00               	movlw	0
  7868  00550E  6E1B               	movwf	?_dbc_1st+1,c
  7869  005510  0E01               	movlw	1
  7870  005512  6E1A               	movwf	?_dbc_1st,c
  7871  005514  0012               	return	
  7872  005516                     l1031:
  7873                           
  7874                           ;ff.c: 690: }
  7875                           ;ff.c: 694: return 0;
  7876  005516  0E00               	movlw	0
  7877  005518  6E1B               	movwf	?_dbc_1st+1,c
  7878  00551A  0E00               	movlw	0
  7879  00551C  6E1A               	movwf	?_dbc_1st,c
  7880  00551E  0012               	return	
  7881  005520                     __end_of_dbc_1st:
  7882                           	opt stack 0
  7883                           tosu	equ	0xFFF
  7884                           tosh	equ	0xFFE
  7885                           tosl	equ	0xFFD
  7886                           pclath	equ	0xFFA
  7887                           tblptru	equ	0xFF8
  7888                           tblptrh	equ	0xFF7
  7889                           tblptrl	equ	0xFF6
  7890                           tablat	equ	0xFF5
  7891                           prodh	equ	0xFF4
  7892                           prodl	equ	0xFF3
  7893                           intcon	equ	0xFF2
  7894                           intcon2	equ	0xFF1
  7895                           intcon3	equ	0xFF0
  7896                           indf0	equ	0xFEF
  7897                           postinc0	equ	0xFEE
  7898                           fsr0h	equ	0xFEA
  7899                           fsr0l	equ	0xFE9
  7900                           wreg	equ	0xFE8
  7901                           indf1	equ	0xFE7
  7902                           postinc1	equ	0xFE6
  7903                           postdec1	equ	0xFE5
  7904                           fsr1h	equ	0xFE2
  7905                           fsr1l	equ	0xFE1
  7906                           indf2	equ	0xFDF
  7907                           postinc2	equ	0xFDE
  7908                           postdec2	equ	0xFDD
  7909                           plusw2	equ	0xFDB
  7910                           fsr2h	equ	0xFDA
  7911                           fsr2l	equ	0xFD9
  7912                           status	equ	0xFD8
  7913                           
  7914 ;; *************** function _chk_chr *****************
  7915 ;; Defined at:
  7916 ;;		line 670 in file "bibliotecas/ff.c"
  7917 ;; Parameters:    Size  Location     Type
  7918 ;;  str             2   25[COMRAM] PTR const unsigned char 
  7919 ;;		 -> STR_26(15), 
  7920 ;;  chr             2   27[COMRAM] int 
  7921 ;; Auto vars:     Size  Location     Type
  7922 ;;		None
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  2   25[COMRAM] int 
  7925 ;; Registers used:
  7926 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7932 ;;      Params:         4       0       0       0       0       0       0       0       0
  7933 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7934 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7935 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7936 ;;Total ram usage:        6 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    2
  7939 ;; This function calls:
  7940 ;;		Nothing
  7941 ;; This function is called by:
  7942 ;;		_create_name
  7943 ;; This function uses a non-reentrant model
  7944 ;;
  7945                           
  7946                           	psect	text23
  7947  0056CA                     __ptext23:
  7948                           	opt stack 0
  7949  0056CA                     _chk_chr:
  7950                           	opt stack 23
  7951                           
  7952                           ;ff.c: 672: while (*str && *str != chr) str++;
  7953                           
  7954                           ;incstack = 0
  7955  0056CA  D002               	goto	l1020
  7956  0056CC                     l13130:
  7957  0056CC  4A1A               	infsnz	chk_chr@str,f,c
  7958  0056CE  2A1B               	incf	chk_chr@str+1,f,c
  7959  0056D0                     l1020:
  7960  0056D0  C01A  FFF6         	movff	chk_chr@str,tblptrl
  7961  0056D4  C01B  FFF7         	movff	chk_chr@str+1,tblptrh
  7962  0056D8                     	if	0	;tblptru may be non-zero
  7963  0056D8                     	endif
  7964  0056D8                     	if	0	;tblptru may be non-zero
  7965  0056D8                     	endif
  7966  0056D8  0008               	tblrd		*
  7967  0056DA  50F5               	movf	tablat,w,c
  7968  0056DC  0900               	iorlw	0
  7969  0056DE  B4D8               	btfsc	status,2,c
  7970  0056E0  D00F               	goto	u16610
  7971  0056E2  C01A  FFF6         	movff	chk_chr@str,tblptrl
  7972  0056E6  C01B  FFF7         	movff	chk_chr@str+1,tblptrh
  7973  0056EA                     	if	0	;tblptru may be non-zero
  7974  0056EA                     	endif
  7975  0056EA                     	if	0	;tblptru may be non-zero
  7976  0056EA                     	endif
  7977  0056EA  0008               	tblrd		*
  7978  0056EC  50F5               	movf	tablat,w,c
  7979  0056EE  6E1E               	movwf	??_chk_chr& (0+255),c
  7980  0056F0  6A1F               	clrf	(??_chk_chr+1)& (0+255),c
  7981  0056F2  501C               	movf	chk_chr@chr,w,c
  7982  0056F4  181E               	xorwf	??_chk_chr,w,c
  7983  0056F6  E1EA               	bnz	l13130
  7984  0056F8  501D               	movf	chk_chr@chr+1,w,c
  7985  0056FA  181F               	xorwf	??_chk_chr+1,w,c
  7986  0056FC  A4D8               	btfss	status,2,c
  7987  0056FE  D7E6               	goto	l1021
  7988  005700                     u16610:
  7989                           
  7990                           ;ff.c: 673: return *str;
  7991  005700  C01A  FFF6         	movff	chk_chr@str,tblptrl
  7992  005704  C01B  FFF7         	movff	chk_chr@str+1,tblptrh
  7993  005708                     	if	0	;tblptru may be non-zero
  7994  005708                     	endif
  7995  005708                     	if	0	;tblptru may be non-zero
  7996  005708                     	endif
  7997  005708  0008               	tblrd		*
  7998  00570A  50F5               	movf	tablat,w,c
  7999  00570C  6E1A               	movwf	?_chk_chr,c
  8000  00570E  6A1B               	clrf	?_chk_chr+1,c
  8001  005710  0012               	return	
  8002  005712                     __end_of_chk_chr:
  8003                           	opt stack 0
  8004                           tosu	equ	0xFFF
  8005                           tosh	equ	0xFFE
  8006                           tosl	equ	0xFFD
  8007                           pclath	equ	0xFFA
  8008                           tblptru	equ	0xFF8
  8009                           tblptrh	equ	0xFF7
  8010                           tblptrl	equ	0xFF6
  8011                           tablat	equ	0xFF5
  8012                           prodh	equ	0xFF4
  8013                           prodl	equ	0xFF3
  8014                           intcon	equ	0xFF2
  8015                           intcon2	equ	0xFF1
  8016                           intcon3	equ	0xFF0
  8017                           indf0	equ	0xFEF
  8018                           postinc0	equ	0xFEE
  8019                           fsr0h	equ	0xFEA
  8020                           fsr0l	equ	0xFE9
  8021                           wreg	equ	0xFE8
  8022                           indf1	equ	0xFE7
  8023                           postinc1	equ	0xFE6
  8024                           postdec1	equ	0xFE5
  8025                           fsr1h	equ	0xFE2
  8026                           fsr1l	equ	0xFE1
  8027                           indf2	equ	0xFDF
  8028                           postinc2	equ	0xFDE
  8029                           postdec2	equ	0xFDD
  8030                           plusw2	equ	0xFDB
  8031                           fsr2h	equ	0xFDA
  8032                           fsr2l	equ	0xFD9
  8033                           status	equ	0xFD8
  8034                           
  8035 ;; *************** function _dir_register *****************
  8036 ;; Defined at:
  8037 ;;		line 2322 in file "bibliotecas/ff.c"
  8038 ;; Parameters:    Size  Location     Type
  8039 ;;  dp              2  150[BANK0 ] PTR struct .
  8040 ;;		 -> f_rename@djn(40), f_mkdir@dj(40), f_open@dj(40), 
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;  fs              2    0[BANK1 ] PTR struct .
  8043 ;;		 -> NULL(0), fs(559), 
  8044 ;;  res             1    2[BANK1 ] enum E79
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  1    wreg      enum E79
  8047 ;; Registers used:
  8048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8054 ;;      Params:         0       2       0       0       0       0       0       0       0
  8055 ;;      Locals:         0       0       3       0       0       0       0       0       0
  8056 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8057 ;;      Totals:         0       2       3       0       0       0       0       0       0
  8058 ;;Total ram usage:        5 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:   13
  8061 ;; This function calls:
  8062 ;;		_dir_alloc
  8063 ;;		_mem_cpy
  8064 ;;		_mem_set
  8065 ;;		_move_window
  8066 ;; This function is called by:
  8067 ;;		_f_open
  8068 ;;		_f_mkdir
  8069 ;;		_f_rename
  8070 ;; This function uses a non-reentrant model
  8071 ;;
  8072                           
  8073                           	psect	text24
  8074  004722                     __ptext24:
  8075                           	opt stack 0
  8076  004722                     _dir_register:
  8077                           	opt stack 14
  8078                           
  8079                           ;ff.c: 2326: FRESULT res;
  8080                           ;ff.c: 2327: FATFS *fs = dp->obj.fs;
  8081                           
  8082                           ;incstack = 0
  8083  004722  C0F6  FFD9         	movff	dir_register@dp,fsr2l
  8084  004726  C0F7  FFDA         	movff	dir_register@dp+1,fsr2h
  8085  00472A  CFDE F16C          	movff	postinc2,dir_register@fs
  8086  00472E  CFDD F16D          	movff	postdec2,dir_register@fs+1
  8087                           
  8088                           ;ff.c: 2399: res = dir_alloc(dp, 1);
  8089  004732  C0F6  F0EA         	movff	dir_register@dp,dir_alloc@dp
  8090  004736  C0F7  F0EB         	movff	dir_register@dp+1,dir_alloc@dp+1
  8091  00473A  0E00               	movlw	0
  8092  00473C  0100               	movlb	0	; () banked
  8093  00473E  6FED               	movwf	(dir_alloc@nent+1)& (0+255),b
  8094  004740  0E01               	movlw	1
  8095  004742  6FEC               	movwf	dir_alloc@nent& (0+255),b
  8096  004744  EC9E  F022         	call	_dir_alloc	;wreg free
  8097  004748  0101               	movlb	1	; () banked
  8098  00474A  6F6E               	movwf	dir_register@res& (0+255),b
  8099                           
  8100                           ; BSR set to: 1
  8101                           ;ff.c: 2404: if (res == FR_OK) {
  8102  00474C  516E               	movf	dir_register@res& (0+255),w,b
  8103  00474E  A4D8               	btfss	status,2,c
  8104  004750  D04F               	goto	l1269
  8105                           
  8106                           ; BSR set to: 1
  8107                           ;ff.c: 2405: res = move_window(fs, dp->sect);
  8108  004752  C16C  F085         	movff	dir_register@fs,move_window@fs
  8109  004756  C16D  F086         	movff	dir_register@fs+1,move_window@fs+1
  8110  00475A  0100               	movlb	0	; () banked
  8111  00475C  EE20 F016          	lfsr	2,22
  8112  004760  51F6               	movf	dir_register@dp& (0+255),w,b
  8113  004762  26D9               	addwf	fsr2l,f,c
  8114  004764  51F7               	movf	(dir_register@dp+1)& (0+255),w,b
  8115  004766  22DA               	addwfc	fsr2h,f,c
  8116  004768  CFDE F087          	movff	postinc2,move_window@sector
  8117  00476C  CFDE F088          	movff	postinc2,move_window@sector+1
  8118  004770  CFDE F089          	movff	postinc2,move_window@sector+2
  8119  004774  CFDE F08A          	movff	postinc2,move_window@sector+3
  8120  004778  EC2E  F026         	call	_move_window	;wreg free
  8121  00477C  0101               	movlb	1	; () banked
  8122  00477E  6F6E               	movwf	dir_register@res& (0+255),b
  8123                           
  8124                           ; BSR set to: 1
  8125                           ;ff.c: 2406: if (res == FR_OK) {
  8126  004780  516E               	movf	dir_register@res& (0+255),w,b
  8127  004782  A4D8               	btfss	status,2,c
  8128  004784  D035               	goto	l1269
  8129                           
  8130                           ; BSR set to: 1
  8131                           ;ff.c: 2407: mem_set(dp->dir, 0, 32);
  8132  004786  0100               	movlb	0	; () banked
  8133  004788  EE20 F01A          	lfsr	2,26
  8134  00478C  51F6               	movf	dir_register@dp& (0+255),w,b
  8135  00478E  26D9               	addwf	fsr2l,f,c
  8136  004790  51F7               	movf	(dir_register@dp+1)& (0+255),w,b
  8137  004792  22DA               	addwfc	fsr2h,f,c
  8138  004794  CFDE F01A          	movff	postinc2,mem_set@dst
  8139  004798  CFDD F01B          	movff	postdec2,mem_set@dst+1
  8140  00479C  0E00               	movlw	0
  8141  00479E  6E1D               	movwf	mem_set@val+1,c
  8142  0047A0  0E00               	movlw	0
  8143  0047A2  6E1C               	movwf	mem_set@val,c
  8144  0047A4  0E00               	movlw	0
  8145  0047A6  6E1F               	movwf	mem_set@cnt+1,c
  8146  0047A8  0E20               	movlw	32
  8147  0047AA  6E1E               	movwf	mem_set@cnt,c
  8148  0047AC  EC13  F02D         	call	_mem_set	;wreg free
  8149                           
  8150                           ;ff.c: 2408: mem_cpy(dp->dir + 0, dp->fn, 11);
  8151  0047B0  0100               	movlb	0	; () banked
  8152  0047B2  EE20 F01A          	lfsr	2,26
  8153  0047B6  51F6               	movf	dir_register@dp& (0+255),w,b
  8154  0047B8  26D9               	addwf	fsr2l,f,c
  8155  0047BA  51F7               	movf	(dir_register@dp+1)& (0+255),w,b
  8156  0047BC  22DA               	addwfc	fsr2h,f,c
  8157  0047BE  CFDE F01A          	movff	postinc2,mem_cpy@dst
  8158  0047C2  CFDD F01B          	movff	postdec2,mem_cpy@dst+1
  8159  0047C6  0E1C               	movlw	28
  8160  0047C8  25F6               	addwf	dir_register@dp& (0+255),w,b
  8161  0047CA  6E1C               	movwf	mem_cpy@src,c
  8162  0047CC  0E00               	movlw	0
  8163  0047CE  21F7               	addwfc	(dir_register@dp+1)& (0+255),w,b
  8164  0047D0  6E1D               	movwf	mem_cpy@src+1,c
  8165  0047D2  0E00               	movlw	0
  8166  0047D4  6E1F               	movwf	mem_cpy@cnt+1,c
  8167  0047D6  0E0B               	movlw	11
  8168  0047D8  6E1E               	movwf	mem_cpy@cnt,c
  8169  0047DA  ECEA  F02A         	call	_mem_cpy	;wreg free
  8170                           
  8171                           ;ff.c: 2412: fs->wflag = 1;
  8172  0047DE  0101               	movlb	1	; () banked
  8173  0047E0  EE20 F003          	lfsr	2,3
  8174  0047E4  516C               	movf	dir_register@fs& (0+255),w,b
  8175  0047E6  26D9               	addwf	fsr2l,f,c
  8176  0047E8  516D               	movf	(dir_register@fs+1)& (0+255),w,b
  8177  0047EA  22DA               	addwfc	fsr2h,f,c
  8178  0047EC  0E01               	movlw	1
  8179  0047EE  6EDF               	movwf	indf2,c
  8180  0047F0                     l1269:
  8181                           
  8182                           ; BSR set to: 1
  8183                           ;ff.c: 2413: }
  8184                           ;ff.c: 2414: }
  8185                           ;ff.c: 2416: return res;
  8186                           
  8187                           ; BSR set to: 1
  8188                           
  8189                           ; BSR set to: 1
  8190  0047F0  516E               	movf	dir_register@res& (0+255),w,b
  8191  0047F2  0012               	return	
  8192  0047F4                     __end_of_dir_register:
  8193                           	opt stack 0
  8194                           tosu	equ	0xFFF
  8195                           tosh	equ	0xFFE
  8196                           tosl	equ	0xFFD
  8197                           pclath	equ	0xFFA
  8198                           tblptru	equ	0xFF8
  8199                           tblptrh	equ	0xFF7
  8200                           tblptrl	equ	0xFF6
  8201                           tablat	equ	0xFF5
  8202                           prodh	equ	0xFF4
  8203                           prodl	equ	0xFF3
  8204                           intcon	equ	0xFF2
  8205                           intcon2	equ	0xFF1
  8206                           intcon3	equ	0xFF0
  8207                           indf0	equ	0xFEF
  8208                           postinc0	equ	0xFEE
  8209                           fsr0h	equ	0xFEA
  8210                           fsr0l	equ	0xFE9
  8211                           wreg	equ	0xFE8
  8212                           indf1	equ	0xFE7
  8213                           postinc1	equ	0xFE6
  8214                           postdec1	equ	0xFE5
  8215                           fsr1h	equ	0xFE2
  8216                           fsr1l	equ	0xFE1
  8217                           indf2	equ	0xFDF
  8218                           postinc2	equ	0xFDE
  8219                           postdec2	equ	0xFDD
  8220                           plusw2	equ	0xFDB
  8221                           fsr2h	equ	0xFDA
  8222                           fsr2l	equ	0xFD9
  8223                           status	equ	0xFD8
  8224                           
  8225 ;; *************** function _mem_cpy *****************
  8226 ;; Defined at:
  8227 ;;		line 628 in file "bibliotecas/ff.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;  dst             2   25[COMRAM] PTR void 
  8230 ;;		 -> fs.win(512), f_rename@djn(40), f_rename@buf(32), NULL(0), 
  8231 ;;		 -> fs(559), 
  8232 ;;  src             2   27[COMRAM] PTR const void 
  8233 ;;		 -> fs.win(512), djn.fn(12), f_rename@djn(40), f_rename@buf(32), 
  8234 ;;		 -> f_rename@djo(40), dj.fn(12), f_mkdir@dj(40), dj.fn(12), 
  8235 ;;		 -> f_open@dj(40), NULL(0), STR_13(2), fs(559), 
  8236 ;;  cnt             2   29[COMRAM] unsigned int 
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;  s               2   33[COMRAM] PTR const unsigned char 
  8239 ;;		 -> fs.win(512), djn.fn(12), f_rename@djn(40), f_rename@buf(32), 
  8240 ;;		 -> f_rename@djo(40), dj.fn(12), f_mkdir@dj(40), dj.fn(12), 
  8241 ;;		 -> f_open@dj(40), NULL(0), STR_13(2), fs(559), 
  8242 ;;  d               2   31[COMRAM] PTR unsigned char 
  8243 ;;		 -> fs.win(512), f_rename@djn(40), f_rename@buf(32), NULL(0), 
  8244 ;;		 -> fs(559), 
  8245 ;; Return value:  Size  Location     Type
  8246 ;;                  1    wreg      void 
  8247 ;; Registers used:
  8248 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8249 ;; Tracked objects:
  8250 ;;		On entry : 0/0
  8251 ;;		On exit  : 0/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8254 ;;      Params:         6       0       0       0       0       0       0       0       0
  8255 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8256 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8257 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8258 ;;Total ram usage:       10 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; Hardware stack levels required when called:    2
  8261 ;; This function calls:
  8262 ;;		Nothing
  8263 ;; This function is called by:
  8264 ;;		_dir_register
  8265 ;;		_f_write
  8266 ;;		_f_read
  8267 ;;		_f_mkdir
  8268 ;;		_f_rename
  8269 ;; This function uses a non-reentrant model
  8270 ;;
  8271                           
  8272                           	psect	text25
  8273  0055D4                     __ptext25:
  8274                           	opt stack 0
  8275  0055D4                     _mem_cpy:
  8276                           	opt stack 25
  8277                           
  8278                           ;ff.c: 630: BYTE *d = (BYTE*)dst;
  8279                           
  8280                           ; BSR set to: 1
  8281                           ;incstack = 0
  8282  0055D4  C01A  F020         	movff	mem_cpy@dst,mem_cpy@d
  8283  0055D8  C01B  F021         	movff	mem_cpy@dst+1,mem_cpy@d+1
  8284                           
  8285                           ;ff.c: 631: const BYTE *s = (const BYTE*)src;
  8286  0055DC  C01C  F022         	movff	mem_cpy@src,mem_cpy@s
  8287  0055E0  C01D  F023         	movff	mem_cpy@src+1,mem_cpy@s+1
  8288  0055E4                     
  8289                           ;ff.c: 633: if (cnt != 0) {
  8290  0055E4  501E               	movf	mem_cpy@cnt,w,c
  8291  0055E6  101F               	iorwf	mem_cpy@cnt+1,w,c
  8292  0055E8  B4D8               	btfsc	status,2,c
  8293  0055EA  0012               	return	
  8294                           
  8295                           ;ff.c: 635: *d++ = *s++;
  8296                           
  8297                           ;ff.c: 634: do {
  8298  0055EC  C022  FFF6         	movff	mem_cpy@s,tblptrl
  8299  0055F0  C023  FFF7         	movff	mem_cpy@s+1,tblptrh
  8300  0055F4  6AF8               	clrf	tblptru,c
  8301  0055F6  C020  FFD9         	movff	mem_cpy@d,fsr2l
  8302  0055FA  C021  FFDA         	movff	mem_cpy@d+1,fsr2h
  8303  0055FE  0E07               	movlw	(high __ramtop+-1)
  8304  005600  64F7               	cpfsgt	tblptrh,c
  8305  005602  D003               	bra	u17057
  8306  005604  0008               	tblrd		*
  8307  005606  50F5               	movf	tablat,w,c
  8308  005608  D005               	bra	u17050
  8309  00560A                     u17057:
  8310  00560A  CFF6 FFE9          	movff	tblptrl,fsr0l
  8311  00560E  CFF7 FFEA          	movff	tblptrh,fsr0h
  8312  005612  50EF               	movf	indf0,w,c
  8313  005614                     u17050:
  8314  005614  6EDF               	movwf	indf2,c
  8315  005616  4A22               	infsnz	mem_cpy@s,f,c
  8316  005618  2A23               	incf	mem_cpy@s+1,f,c
  8317  00561A  4A20               	infsnz	mem_cpy@d,f,c
  8318  00561C  2A21               	incf	mem_cpy@d+1,f,c
  8319                           
  8320                           ;ff.c: 636: } while (--cnt);
  8321  00561E  061E               	decf	mem_cpy@cnt,f,c
  8322  005620  A0D8               	btfss	status,0,c
  8323  005622  061F               	decf	mem_cpy@cnt+1,f,c
  8324  005624  D7DF               	goto	L22
  8325  005626                     __end_of_mem_cpy:
  8326                           	opt stack 0
  8327                           tosu	equ	0xFFF
  8328                           tosh	equ	0xFFE
  8329                           tosl	equ	0xFFD
  8330                           pclath	equ	0xFFA
  8331                           tblptru	equ	0xFF8
  8332                           tblptrh	equ	0xFF7
  8333                           tblptrl	equ	0xFF6
  8334                           tablat	equ	0xFF5
  8335                           prodh	equ	0xFF4
  8336                           prodl	equ	0xFF3
  8337                           intcon	equ	0xFF2
  8338                           intcon2	equ	0xFF1
  8339                           intcon3	equ	0xFF0
  8340                           indf0	equ	0xFEF
  8341                           postinc0	equ	0xFEE
  8342                           fsr0h	equ	0xFEA
  8343                           fsr0l	equ	0xFE9
  8344                           wreg	equ	0xFE8
  8345                           indf1	equ	0xFE7
  8346                           postinc1	equ	0xFE6
  8347                           postdec1	equ	0xFE5
  8348                           fsr1h	equ	0xFE2
  8349                           fsr1l	equ	0xFE1
  8350                           indf2	equ	0xFDF
  8351                           postinc2	equ	0xFDE
  8352                           postdec2	equ	0xFDD
  8353                           plusw2	equ	0xFDB
  8354                           fsr2h	equ	0xFDA
  8355                           fsr2l	equ	0xFD9
  8356                           status	equ	0xFD8
  8357                           
  8358 ;; *************** function _dir_alloc *****************
  8359 ;; Defined at:
  8360 ;;		line 1632 in file "bibliotecas/ff.c"
  8361 ;; Parameters:    Size  Location     Type
  8362 ;;  dp              2  138[BANK0 ] PTR struct .
  8363 ;;		 -> f_rename@djn(40), f_mkdir@dj(40), f_open@dj(40), 
  8364 ;;  nent            2  140[BANK0 ] unsigned int 
  8365 ;; Auto vars:     Size  Location     Type
  8366 ;;  n               2  147[BANK0 ] unsigned int 
  8367 ;;  fs              2  145[BANK0 ] PTR struct .
  8368 ;;		 -> NULL(0), fs(559), 
  8369 ;;  res             1  149[BANK0 ] enum E79
  8370 ;; Return value:  Size  Location     Type
  8371 ;;                  1    wreg      enum E79
  8372 ;; Registers used:
  8373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8374 ;; Tracked objects:
  8375 ;;		On entry : 0/0
  8376 ;;		On exit  : 0/0
  8377 ;;		Unchanged: 0/0
  8378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8379 ;;      Params:         0       4       0       0       0       0       0       0       0
  8380 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8381 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8382 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8383 ;;Total ram usage:       12 bytes
  8384 ;; Hardware stack levels used:    1
  8385 ;; Hardware stack levels required when called:   12
  8386 ;; This function calls:
  8387 ;;		_dir_next
  8388 ;;		_dir_sdi
  8389 ;;		_move_window
  8390 ;; This function is called by:
  8391 ;;		_dir_register
  8392 ;; This function uses a non-reentrant model
  8393 ;;
  8394                           
  8395                           	psect	text26
  8396  00453C                     __ptext26:
  8397                           	opt stack 0
  8398  00453C                     _dir_alloc:
  8399                           	opt stack 14
  8400                           
  8401                           ;ff.c: 1637: FRESULT res;
  8402                           ;ff.c: 1638: UINT n;
  8403                           ;ff.c: 1639: FATFS *fs = dp->obj.fs;
  8404                           
  8405                           ;incstack = 0
  8406  00453C  C0EA  FFD9         	movff	dir_alloc@dp,fsr2l
  8407  004540  C0EB  FFDA         	movff	dir_alloc@dp+1,fsr2h
  8408  004544  CFDE F0F1          	movff	postinc2,dir_alloc@fs
  8409  004548  CFDD F0F2          	movff	postdec2,dir_alloc@fs+1
  8410                           
  8411                           ;ff.c: 1642: res = dir_sdi(dp, 0);
  8412  00454C  C0EA  F0AA         	movff	dir_alloc@dp,dir_sdi@dp
  8413  004550  C0EB  F0AB         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  8414  004554  0E00               	movlw	0
  8415  004556  0100               	movlb	0	; () banked
  8416  004558  6FAC               	movwf	dir_sdi@ofs& (0+255),b
  8417  00455A  0E00               	movlw	0
  8418  00455C  6FAD               	movwf	(dir_sdi@ofs+1)& (0+255),b
  8419  00455E  0E00               	movlw	0
  8420  004560  6FAE               	movwf	(dir_sdi@ofs+2)& (0+255),b
  8421  004562  0E00               	movlw	0
  8422  004564  6FAF               	movwf	(dir_sdi@ofs+3)& (0+255),b
  8423  004566  ECAA  F016         	call	_dir_sdi	;wreg free
  8424  00456A  0100               	movlb	0	; () banked
  8425  00456C  6FF5               	movwf	dir_alloc@res& (0+255),b
  8426                           
  8427                           ; BSR set to: 0
  8428                           ;ff.c: 1643: if (res == FR_OK) {
  8429  00456E  51F5               	movf	dir_alloc@res& (0+255),w,b
  8430  004570  A4D8               	btfss	status,2,c
  8431  004572  D05D               	goto	u17160
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;ff.c: 1644: n = 0;
  8435  004574  0E00               	movlw	0
  8436  004576  6FF4               	movwf	(dir_alloc@n+1)& (0+255),b
  8437  004578  0E00               	movlw	0
  8438  00457A  6FF3               	movwf	dir_alloc@n& (0+255),b
  8439  00457C                     
  8440                           ; BSR set to: 0
  8441                           ;ff.c: 1646: res = move_window(fs, dp->sect);
  8442                           
  8443                           ; BSR set to: 0
  8444  00457C  C0F1  F085         	movff	dir_alloc@fs,move_window@fs
  8445  004580  C0F2  F086         	movff	dir_alloc@fs+1,move_window@fs+1
  8446  004584  EE20 F016          	lfsr	2,22
  8447  004588  51EA               	movf	dir_alloc@dp& (0+255),w,b
  8448  00458A  26D9               	addwf	fsr2l,f,c
  8449  00458C  51EB               	movf	(dir_alloc@dp+1)& (0+255),w,b
  8450  00458E  22DA               	addwfc	fsr2h,f,c
  8451  004590  CFDE F087          	movff	postinc2,move_window@sector
  8452  004594  CFDE F088          	movff	postinc2,move_window@sector+1
  8453  004598  CFDE F089          	movff	postinc2,move_window@sector+2
  8454  00459C  CFDE F08A          	movff	postinc2,move_window@sector+3
  8455  0045A0  EC2E  F026         	call	_move_window	;wreg free
  8456  0045A4  0100               	movlb	0	; () banked
  8457  0045A6  6FF5               	movwf	dir_alloc@res& (0+255),b
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;ff.c: 1647: if (res != FR_OK) break;
  8461  0045A8  51F5               	movf	dir_alloc@res& (0+255),w,b
  8462  0045AA  A4D8               	btfss	status,2,c
  8463  0045AC  D040               	goto	u17160
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;ff.c: 1651: if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  8467                           
  8468                           ; BSR set to: 0
  8469                           
  8470                           ; BSR set to: 0
  8471  0045AE  EE20 F01A          	lfsr	2,26
  8472  0045B2  51EA               	movf	dir_alloc@dp& (0+255),w,b
  8473  0045B4  26D9               	addwf	fsr2l,f,c
  8474  0045B6  51EB               	movf	(dir_alloc@dp+1)& (0+255),w,b
  8475  0045B8  22DA               	addwfc	fsr2h,f,c
  8476  0045BA  CFDE F0EE          	movff	postinc2,??_dir_alloc
  8477  0045BE  CFDD F0EF          	movff	postdec2,??_dir_alloc+1
  8478  0045C2  C0EE  FFD9         	movff	??_dir_alloc,fsr2l
  8479  0045C6  C0EF  FFDA         	movff	??_dir_alloc+1,fsr2h
  8480  0045CA  0EE5               	movlw	229
  8481  0045CC  18DE               	xorwf	postinc2,w,c
  8482  0045CE  B4D8               	btfsc	status,2,c
  8483  0045D0  D011               	goto	u17140
  8484                           
  8485                           ; BSR set to: 0
  8486  0045D2  EE20 F01A          	lfsr	2,26
  8487  0045D6  51EA               	movf	dir_alloc@dp& (0+255),w,b
  8488  0045D8  26D9               	addwf	fsr2l,f,c
  8489  0045DA  51EB               	movf	(dir_alloc@dp+1)& (0+255),w,b
  8490  0045DC  22DA               	addwfc	fsr2h,f,c
  8491  0045DE  CFDE F0EE          	movff	postinc2,??_dir_alloc
  8492  0045E2  CFDD F0EF          	movff	postdec2,??_dir_alloc+1
  8493  0045E6  C0EE  FFD9         	movff	??_dir_alloc,fsr2l
  8494  0045EA  C0EF  FFDA         	movff	??_dir_alloc+1,fsr2h
  8495  0045EE  50DF               	movf	indf2,w,c
  8496  0045F0  A4D8               	btfss	status,2,c
  8497  0045F2  D00A               	goto	l1231
  8498  0045F4                     u17140:
  8499                           
  8500                           ; BSR set to: 0
  8501                           ;ff.c: 1653: if (++n == nent) break;
  8502                           
  8503                           ; BSR set to: 0
  8504  0045F4  4BF3               	infsnz	dir_alloc@n& (0+255),f,b
  8505  0045F6  2BF4               	incf	(dir_alloc@n+1)& (0+255),f,b
  8506  0045F8  51EC               	movf	dir_alloc@nent& (0+255),w,b
  8507  0045FA  19F3               	xorwf	dir_alloc@n& (0+255),w,b
  8508  0045FC  E109               	bnz	l13438
  8509  0045FE  51ED               	movf	(dir_alloc@nent+1)& (0+255),w,b
  8510  004600  19F4               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  8511  004602  B4D8               	btfsc	status,2,c
  8512  004604  D014               	goto	u17160
  8513  004606  D004               	goto	l1235
  8514  004608                     l1231:
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;ff.c: 1655: n = 0;
  8518                           
  8519                           ; BSR set to: 0
  8520  004608  0E00               	movlw	0
  8521  00460A  6FF4               	movwf	(dir_alloc@n+1)& (0+255),b
  8522  00460C  0E00               	movlw	0
  8523  00460E  6FF3               	movwf	dir_alloc@n& (0+255),b
  8524  004610                     l1235:
  8525  004610                     l13438:
  8526                           
  8527                           ; BSR set to: 0
  8528                           ;ff.c: 1656: }
  8529                           ;ff.c: 1657: res = dir_next(dp, 1);
  8530  004610  C0EA  F0CC         	movff	dir_alloc@dp,dir_next@dp
  8531  004614  C0EB  F0CD         	movff	dir_alloc@dp+1,dir_next@dp+1
  8532  004618  0E00               	movlw	0
  8533  00461A  6FCF               	movwf	(dir_next@stretch+1)& (0+255),b
  8534  00461C  0E01               	movlw	1
  8535  00461E  6FCE               	movwf	dir_next@stretch& (0+255),b
  8536  004620  EC16  F013         	call	_dir_next	;wreg free
  8537  004624  0100               	movlb	0	; () banked
  8538  004626  6FF5               	movwf	dir_alloc@res& (0+255),b
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;ff.c: 1658: } while (res == FR_OK);
  8542  004628  51F5               	movf	dir_alloc@res& (0+255),w,b
  8543  00462A  B4D8               	btfsc	status,2,c
  8544  00462C  D7A7               	goto	l1228
  8545  00462E                     u17160:
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;ff.c: 1659: }
  8549                           ;ff.c: 1661: if (res == FR_NO_FILE) res = FR_DENIED;
  8550                           
  8551                           ; BSR set to: 0
  8552                           
  8553                           ; BSR set to: 0
  8554  00462E  0E04               	movlw	4
  8555  004630  19F5               	xorwf	dir_alloc@res& (0+255),w,b
  8556  004632  A4D8               	btfss	status,2,c
  8557  004634  D002               	goto	l1236
  8558                           
  8559                           ; BSR set to: 0
  8560  004636  0E07               	movlw	7
  8561  004638  6FF5               	movwf	dir_alloc@res& (0+255),b
  8562  00463A                     l1236:
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;ff.c: 1662: return res;
  8566  00463A  51F5               	movf	dir_alloc@res& (0+255),w,b
  8567  00463C  0012               	return	
  8568  00463E                     __end_of_dir_alloc:
  8569                           	opt stack 0
  8570                           tosu	equ	0xFFF
  8571                           tosh	equ	0xFFE
  8572                           tosl	equ	0xFFD
  8573                           pclath	equ	0xFFA
  8574                           tblptru	equ	0xFF8
  8575                           tblptrh	equ	0xFF7
  8576                           tblptrl	equ	0xFF6
  8577                           tablat	equ	0xFF5
  8578                           prodh	equ	0xFF4
  8579                           prodl	equ	0xFF3
  8580                           intcon	equ	0xFF2
  8581                           intcon2	equ	0xFF1
  8582                           intcon3	equ	0xFF0
  8583                           indf0	equ	0xFEF
  8584                           postinc0	equ	0xFEE
  8585                           fsr0h	equ	0xFEA
  8586                           fsr0l	equ	0xFE9
  8587                           wreg	equ	0xFE8
  8588                           indf1	equ	0xFE7
  8589                           postinc1	equ	0xFE6
  8590                           postdec1	equ	0xFE5
  8591                           fsr1h	equ	0xFE2
  8592                           fsr1l	equ	0xFE1
  8593                           indf2	equ	0xFDF
  8594                           postinc2	equ	0xFDE
  8595                           postdec2	equ	0xFDD
  8596                           plusw2	equ	0xFDB
  8597                           fsr2h	equ	0xFDA
  8598                           fsr2l	equ	0xFD9
  8599                           status	equ	0xFD8
  8600                           
  8601 ;; *************** function _dir_sdi *****************
  8602 ;; Defined at:
  8603 ;;		line 1522 in file "bibliotecas/ff.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;  dp              2   74[BANK0 ] PTR struct .
  8606 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@dj(40), f_unlink@sdj(40), 
  8607 ;;		 -> f_unlink@dj(40), f_stat@dj(40), f_open@dj(40), 
  8608 ;;  ofs             4   76[BANK0 ] unsigned long 
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;  clst            4   98[BANK0 ] unsigned long 
  8611 ;;  csz             4   94[BANK0 ] unsigned long 
  8612 ;;  fs              2  102[BANK0 ] PTR struct .
  8613 ;;		 -> NULL(0), fs(559), 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      enum E79
  8616 ;; Registers used:
  8617 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8623 ;;      Params:         0       6       0       0       0       0       0       0       0
  8624 ;;      Locals:         0      14       0       0       0       0       0       0       0
  8625 ;;      Temps:          0      10       0       0       0       0       0       0       0
  8626 ;;      Totals:         0      30       0       0       0       0       0       0       0
  8627 ;;Total ram usage:       30 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:   10
  8630 ;; This function calls:
  8631 ;;		_clst2sect
  8632 ;;		_get_fat
  8633 ;; This function is called by:
  8634 ;;		_dir_alloc
  8635 ;;		_dir_find
  8636 ;;		_follow_path
  8637 ;;		_f_opendir
  8638 ;;		_f_readdir
  8639 ;;		_f_unlink
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           	psect	text27
  8644  002D54                     __ptext27:
  8645                           	opt stack 0
  8646  002D54                     _dir_sdi:
  8647                           	opt stack 16
  8648                           
  8649                           ;ff.c: 1527: DWORD csz, clst;
  8650                           ;ff.c: 1528: FATFS *fs = dp->obj.fs;
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;incstack = 0
  8654  002D54  C0AA  FFD9         	movff	dir_sdi@dp,fsr2l
  8655  002D58  C0AB  FFDA         	movff	dir_sdi@dp+1,fsr2h
  8656  002D5C  CFDE F0C6          	movff	postinc2,dir_sdi@fs
  8657  002D60  CFDD F0C7          	movff	postdec2,dir_sdi@fs+1
  8658                           
  8659                           ;ff.c: 1531: if (ofs >= (DWORD)((0 && fs->fs_type == 4) ? 0x10000000 : 0x200000) || ofs 
      +                          % 32) {
  8660  002D64  0E00               	movlw	0
  8661  002D66  0100               	movlb	0	; () banked
  8662  002D68  6FBA               	movwf	_dir_sdi$2585& (0+255),b
  8663  002D6A  0E00               	movlw	0
  8664  002D6C  6FBB               	movwf	(_dir_sdi$2585+1)& (0+255),b
  8665  002D6E  0E20               	movlw	32
  8666  002D70  6FBC               	movwf	(_dir_sdi$2585+2)& (0+255),b
  8667  002D72  0E00               	movlw	0
  8668                           
  8669                           ; BSR set to: 0
  8670  002D74  6FBD               	movwf	(_dir_sdi$2585+3)& (0+255),b
  8671                           
  8672                           ; BSR set to: 0
  8673                           
  8674                           ; BSR set to: 0
  8675  002D76  51BA               	movf	_dir_sdi$2585& (0+255),w,b
  8676  002D78  5DAC               	subwf	dir_sdi@ofs& (0+255),w,b
  8677  002D7A  51BB               	movf	(_dir_sdi$2585+1)& (0+255),w,b
  8678  002D7C  59AD               	subwfb	(dir_sdi@ofs+1)& (0+255),w,b
  8679  002D7E  51BC               	movf	(_dir_sdi$2585+2)& (0+255),w,b
  8680  002D80  59AE               	subwfb	(dir_sdi@ofs+2)& (0+255),w,b
  8681  002D82  51BD               	movf	(_dir_sdi$2585+3)& (0+255),w,b
  8682  002D84  59AF               	subwfb	(dir_sdi@ofs+3)& (0+255),w,b
  8683  002D86  B0D8               	btfsc	status,0,c
  8684  002D88  D012               	goto	u16740
  8685                           
  8686                           ; BSR set to: 0
  8687  002D8A  0E1F               	movlw	31
  8688  002D8C  15AC               	andwf	dir_sdi@ofs& (0+255),w,b
  8689  002D8E  6FB0               	movwf	??_dir_sdi& (0+255),b
  8690  002D90  0E00               	movlw	0
  8691  002D92  15AD               	andwf	(dir_sdi@ofs+1)& (0+255),w,b
  8692  002D94  6FB1               	movwf	(??_dir_sdi+1)& (0+255),b
  8693  002D96  0E00               	movlw	0
  8694  002D98  15AE               	andwf	(dir_sdi@ofs+2)& (0+255),w,b
  8695  002D9A  6FB2               	movwf	(??_dir_sdi+2)& (0+255),b
  8696  002D9C  0E00               	movlw	0
  8697  002D9E  15AF               	andwf	(dir_sdi@ofs+3)& (0+255),w,b
  8698  002DA0  6FB3               	movwf	(??_dir_sdi+3)& (0+255),b
  8699  002DA2  51B0               	movf	??_dir_sdi& (0+255),w,b
  8700  002DA4  11B1               	iorwf	(??_dir_sdi+1)& (0+255),w,b
  8701  002DA6  11B2               	iorwf	(??_dir_sdi+2)& (0+255),w,b
  8702  002DA8  11B3               	iorwf	(??_dir_sdi+3)& (0+255),w,b
  8703  002DAA  B4D8               	btfsc	status,2,c
  8704  002DAC  D002               	goto	l1176
  8705  002DAE                     u16740:
  8706                           
  8707                           ; BSR set to: 0
  8708                           ;ff.c: 1532: return FR_INT_ERR;
  8709                           
  8710                           ; BSR set to: 0
  8711  002DAE  0E02               	movlw	2
  8712                           
  8713                           ; BSR set to: 0
  8714  002DB0  0012               	return	
  8715  002DB2                     l1176:
  8716                           
  8717                           ; BSR set to: 0
  8718                           ;ff.c: 1533: }
  8719                           ;ff.c: 1534: dp->dptr = ofs;
  8720                           
  8721                           ; BSR set to: 0
  8722  002DB2  EE20 F00E          	lfsr	2,14
  8723  002DB6  51AA               	movf	dir_sdi@dp& (0+255),w,b
  8724  002DB8  26D9               	addwf	fsr2l,f,c
  8725  002DBA  51AB               	movf	(dir_sdi@dp+1)& (0+255),w,b
  8726  002DBC  22DA               	addwfc	fsr2h,f,c
  8727  002DBE  C0AC  FFDE         	movff	dir_sdi@ofs,postinc2
  8728  002DC2  C0AD  FFDE         	movff	dir_sdi@ofs+1,postinc2
  8729  002DC6  C0AE  FFDE         	movff	dir_sdi@ofs+2,postinc2
  8730  002DCA  C0AF  FFDE         	movff	dir_sdi@ofs+3,postinc2
  8731                           
  8732                           ;ff.c: 1535: clst = dp->obj.sclust;
  8733  002DCE  EE20 F006          	lfsr	2,6
  8734  002DD2  51AA               	movf	dir_sdi@dp& (0+255),w,b
  8735  002DD4  26D9               	addwf	fsr2l,f,c
  8736  002DD6  51AB               	movf	(dir_sdi@dp+1)& (0+255),w,b
  8737  002DD8  22DA               	addwfc	fsr2h,f,c
  8738  002DDA  CFDE F0C2          	movff	postinc2,dir_sdi@clst
  8739  002DDE  CFDE F0C3          	movff	postinc2,dir_sdi@clst+1
  8740  002DE2  CFDE F0C4          	movff	postinc2,dir_sdi@clst+2
  8741  002DE6  CFDE F0C5          	movff	postinc2,dir_sdi@clst+3
  8742                           
  8743                           ; BSR set to: 0
  8744                           ;ff.c: 1536: if (clst == 0 && fs->fs_type >= 3) {
  8745  002DEA  51C2               	movf	dir_sdi@clst& (0+255),w,b
  8746  002DEC  11C3               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  8747  002DEE  11C4               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  8748  002DF0  11C5               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  8749  002DF2  A4D8               	btfss	status,2,c
  8750  002DF4  D015               	goto	l1187
  8751                           
  8752                           ; BSR set to: 0
  8753  002DF6  C0C6  FFD9         	movff	dir_sdi@fs,fsr2l
  8754  002DFA  C0C7  FFDA         	movff	dir_sdi@fs+1,fsr2h
  8755  002DFE  0E02               	movlw	2
  8756  002E00  64DF               	cpfsgt	indf2,c
  8757  002E02  D00E               	goto	l1187
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;ff.c: 1537: clst = fs->dirbase;
  8761  002E04  EE20 F023          	lfsr	2,35
  8762  002E08  51C6               	movf	dir_sdi@fs& (0+255),w,b
  8763  002E0A  26D9               	addwf	fsr2l,f,c
  8764  002E0C  51C7               	movf	(dir_sdi@fs+1)& (0+255),w,b
  8765  002E0E  22DA               	addwfc	fsr2h,f,c
  8766  002E10  CFDE F0C2          	movff	postinc2,dir_sdi@clst
  8767  002E14  CFDE F0C3          	movff	postinc2,dir_sdi@clst+1
  8768  002E18  CFDE F0C4          	movff	postinc2,dir_sdi@clst+2
  8769  002E1C  CFDE F0C5          	movff	postinc2,dir_sdi@clst+3
  8770  002E20                     l1187:
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;ff.c: 1539: }
  8774                           ;ff.c: 1541: if (clst == 0) {
  8775                           
  8776                           ; BSR set to: 0
  8777                           
  8778                           ; BSR set to: 0
  8779  002E20  51C2               	movf	dir_sdi@clst& (0+255),w,b
  8780  002E22  11C3               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  8781  002E24  11C4               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  8782  002E26  11C5               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  8783  002E28  A4D8               	btfss	status,2,c
  8784  002E2A  D042               	goto	l1188
  8785                           
  8786                           ; BSR set to: 0
  8787                           ;ff.c: 1542: if (ofs / 32 >= fs->n_rootdir) return FR_INT_ERR;
  8788  002E2C  EE20 F007          	lfsr	2,7
  8789  002E30  51C6               	movf	dir_sdi@fs& (0+255),w,b
  8790  002E32  26D9               	addwf	fsr2l,f,c
  8791  002E34  51C7               	movf	(dir_sdi@fs+1)& (0+255),w,b
  8792  002E36  22DA               	addwfc	fsr2h,f,c
  8793  002E38  CFDE F0B0          	movff	postinc2,??_dir_sdi
  8794  002E3C  CFDD F0B1          	movff	postdec2,??_dir_sdi+1
  8795  002E40  51B0               	movf	??_dir_sdi& (0+255),w,b
  8796  002E42  6FB2               	movwf	(??_dir_sdi+2)& (0+255),b
  8797  002E44  51B1               	movf	(??_dir_sdi+1)& (0+255),w,b
  8798  002E46  6FB3               	movwf	(??_dir_sdi+3)& (0+255),b
  8799  002E48  6BB4               	clrf	(??_dir_sdi+4)& (0+255),b
  8800  002E4A  6BB5               	clrf	(??_dir_sdi+5)& (0+255),b
  8801  002E4C  C0AC  F0B6         	movff	dir_sdi@ofs,??_dir_sdi+6
  8802  002E50  C0AD  F0B7         	movff	dir_sdi@ofs+1,??_dir_sdi+7
  8803  002E54  C0AE  F0B8         	movff	dir_sdi@ofs+2,??_dir_sdi+8
  8804  002E58  C0AF  F0B9         	movff	dir_sdi@ofs+3,??_dir_sdi+9
  8805  002E5C  0E06               	movlw	6
  8806  002E5E  D005               	goto	u16780
  8807  002E60                     u16785:
  8808  002E60  90D8               	bcf	status,0,c
  8809  002E62  33B9               	rrcf	(??_dir_sdi+9)& (0+255),f,b
  8810  002E64  33B8               	rrcf	(??_dir_sdi+8)& (0+255),f,b
  8811  002E66  33B7               	rrcf	(??_dir_sdi+7)& (0+255),f,b
  8812  002E68  33B6               	rrcf	(??_dir_sdi+6)& (0+255),f,b
  8813  002E6A                     u16780:
  8814  002E6A  2EE8               	decfsz	wreg,f,c
  8815  002E6C  D7F9               	goto	u16785
  8816  002E6E  51B2               	movf	(??_dir_sdi+2)& (0+255),w,b
  8817  002E70  5DB6               	subwf	(??_dir_sdi+6)& (0+255),w,b
  8818  002E72  51B3               	movf	(??_dir_sdi+3)& (0+255),w,b
  8819  002E74  59B7               	subwfb	(??_dir_sdi+7)& (0+255),w,b
  8820  002E76  51B4               	movf	(??_dir_sdi+4)& (0+255),w,b
  8821  002E78  59B8               	subwfb	(??_dir_sdi+8)& (0+255),w,b
  8822  002E7A  51B5               	movf	(??_dir_sdi+5)& (0+255),w,b
  8823  002E7C  59B9               	subwfb	(??_dir_sdi+9)& (0+255),w,b
  8824  002E7E  A0D8               	btfss	status,0,c
  8825  002E80  D002               	goto	l1189
  8826                           
  8827                           ; BSR set to: 0
  8828  002E82  0E02               	movlw	2
  8829                           
  8830                           ; BSR set to: 0
  8831  002E84  0012               	return	
  8832  002E86                     l1189:
  8833                           
  8834                           ; BSR set to: 0
  8835                           ;ff.c: 1543: dp->sect = fs->dirbase;
  8836                           
  8837                           ; BSR set to: 0
  8838  002E86  EE20 F023          	lfsr	2,35
  8839  002E8A  51C6               	movf	dir_sdi@fs& (0+255),w,b
  8840  002E8C  26D9               	addwf	fsr2l,f,c
  8841  002E8E  51C7               	movf	(dir_sdi@fs+1)& (0+255),w,b
  8842  002E90  22DA               	addwfc	fsr2h,f,c
  8843  002E92  EE10 F016          	lfsr	1,22
  8844  002E96  51AA               	movf	dir_sdi@dp& (0+255),w,b
  8845  002E98  26E1               	addwf	fsr1l,f,c
  8846  002E9A  51AB               	movf	(dir_sdi@dp+1)& (0+255),w,b
  8847  002E9C  22E2               	addwfc	fsr1h,f,c
  8848  002E9E  CFDE FFE6          	movff	postinc2,postinc1
  8849  002EA2  CFDE FFE6          	movff	postinc2,postinc1
  8850  002EA6  CFDE FFE6          	movff	postinc2,postinc1
  8851  002EAA  CFDE FFE6          	movff	postinc2,postinc1
  8852                           
  8853                           ;ff.c: 1545: } else {
  8854  002EAE  D08C               	goto	l1190
  8855  002EB0                     l1188:
  8856                           
  8857                           ; BSR set to: 0
  8858                           ;ff.c: 1546: csz = (DWORD)fs->csize * ((UINT)512);
  8859                           
  8860                           ; BSR set to: 0
  8861  002EB0  EE20 F009          	lfsr	2,9
  8862  002EB4  51C6               	movf	dir_sdi@fs& (0+255),w,b
  8863  002EB6  26D9               	addwf	fsr2l,f,c
  8864  002EB8  51C7               	movf	(dir_sdi@fs+1)& (0+255),w,b
  8865  002EBA  22DA               	addwfc	fsr2h,f,c
  8866  002EBC  CFDE F0B0          	movff	postinc2,??_dir_sdi
  8867  002EC0  CFDD F0B1          	movff	postdec2,??_dir_sdi+1
  8868  002EC4  51B0               	movf	??_dir_sdi& (0+255),w,b
  8869  002EC6  6FB2               	movwf	(??_dir_sdi+2)& (0+255),b
  8870  002EC8  51B1               	movf	(??_dir_sdi+1)& (0+255),w,b
  8871  002ECA  6FB3               	movwf	(??_dir_sdi+3)& (0+255),b
  8872  002ECC  6BB4               	clrf	(??_dir_sdi+4)& (0+255),b
  8873  002ECE  6BB5               	clrf	(??_dir_sdi+5)& (0+255),b
  8874  002ED0  0E09               	movlw	9
  8875  002ED2                     u16805:
  8876  002ED2  90D8               	bcf	status,0,c
  8877  002ED4  37B2               	rlcf	(??_dir_sdi+2)& (0+255),f,b
  8878  002ED6  37B3               	rlcf	(??_dir_sdi+3)& (0+255),f,b
  8879  002ED8  37B4               	rlcf	(??_dir_sdi+4)& (0+255),f,b
  8880  002EDA  37B5               	rlcf	(??_dir_sdi+5)& (0+255),f,b
  8881  002EDC  2EE8               	decfsz	wreg,f,c
  8882  002EDE  D7F9               	goto	u16805
  8883  002EE0  C0B2  F0BE         	movff	??_dir_sdi+2,dir_sdi@csz
  8884  002EE4  C0B3  F0BF         	movff	??_dir_sdi+3,dir_sdi@csz+1
  8885  002EE8  C0B4  F0C0         	movff	??_dir_sdi+4,dir_sdi@csz+2
  8886  002EEC  C0B5  F0C1         	movff	??_dir_sdi+5,dir_sdi@csz+3
  8887                           
  8888                           ;ff.c: 1547: while (ofs >= csz) {
  8889  002EF0  D044               	goto	l1191
  8890  002EF2                     
  8891                           ; BSR set to: 0
  8892                           ;ff.c: 1548: clst = get_fat(&dp->obj, clst);
  8893                           
  8894                           ; BSR set to: 0
  8895  002EF2  C0AA  F090         	movff	dir_sdi@dp,get_fat@obj
  8896  002EF6  C0AB  F091         	movff	dir_sdi@dp+1,get_fat@obj+1
  8897  002EFA  C0C2  F092         	movff	dir_sdi@clst,get_fat@clst
  8898  002EFE  C0C3  F093         	movff	dir_sdi@clst+1,get_fat@clst+1
  8899  002F02  C0C4  F094         	movff	dir_sdi@clst+2,get_fat@clst+2
  8900  002F06  C0C5  F095         	movff	dir_sdi@clst+3,get_fat@clst+3
  8901  002F0A  ECE9  F014         	call	_get_fat	;wreg free
  8902  002F0E  C090  F0C2         	movff	?_get_fat,dir_sdi@clst
  8903  002F12  C091  F0C3         	movff	?_get_fat+1,dir_sdi@clst+1
  8904  002F16  C092  F0C4         	movff	?_get_fat+2,dir_sdi@clst+2
  8905  002F1A  C093  F0C5         	movff	?_get_fat+3,dir_sdi@clst+3
  8906                           
  8907                           ;ff.c: 1549: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  8908  002F1E  0100               	movlb	0	; () banked
  8909  002F20  29C2               	incf	dir_sdi@clst& (0+255),w,b
  8910  002F22  E109               	bnz	l13234
  8911  002F24  29C3               	incf	(dir_sdi@clst+1)& (0+255),w,b
  8912  002F26  E107               	bnz	l13234
  8913  002F28  29C4               	incf	(dir_sdi@clst+2)& (0+255),w,b
  8914  002F2A  E105               	bnz	l13234
  8915  002F2C  29C5               	incf	(dir_sdi@clst+3)& (0+255),w,b
  8916  002F2E  A4D8               	btfss	status,2,c
  8917  002F30  D002               	goto	l1193
  8918                           
  8919                           ; BSR set to: 0
  8920  002F32  0E01               	movlw	1
  8921                           
  8922                           ; BSR set to: 0
  8923  002F34  0012               	return	
  8924  002F36                     l1193:
  8925  002F36                     l13234:
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;ff.c: 1550: if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;
  8929  002F36  51C5               	movf	(dir_sdi@clst+3)& (0+255),w,b
  8930  002F38  11C4               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  8931  002F3A  11C3               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  8932  002F3C  E104               	bnz	u16820
  8933  002F3E  0E02               	movlw	2
  8934  002F40  5DC2               	subwf	dir_sdi@clst& (0+255),w,b
  8935  002F42  A0D8               	btfss	status,0,c
  8936  002F44  D010               	goto	u16830
  8937  002F46                     u16820:
  8938                           
  8939                           ; BSR set to: 0
  8940  002F46  EE20 F013          	lfsr	2,19
  8941  002F4A  51C6               	movf	dir_sdi@fs& (0+255),w,b
  8942  002F4C  26D9               	addwf	fsr2l,f,c
  8943  002F4E  51C7               	movf	(dir_sdi@fs+1)& (0+255),w,b
  8944  002F50  22DA               	addwfc	fsr2h,f,c
  8945  002F52  50DE               	movf	postinc2,w,c
  8946  002F54  5DC2               	subwf	dir_sdi@clst& (0+255),w,b
  8947  002F56  50DE               	movf	postinc2,w,c
  8948  002F58  59C3               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  8949  002F5A  50DE               	movf	postinc2,w,c
  8950  002F5C  59C4               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  8951  002F5E  50DE               	movf	postinc2,w,c
  8952  002F60  59C5               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  8953  002F62  A0D8               	btfss	status,0,c
  8954  002F64  D002               	goto	l1194
  8955  002F66                     u16830:
  8956                           
  8957                           ; BSR set to: 0
  8958                           
  8959                           ; BSR set to: 0
  8960  002F66  0E02               	movlw	2
  8961                           
  8962                           ; BSR set to: 0
  8963  002F68  0012               	return	
  8964  002F6A                     l1194:
  8965                           
  8966                           ; BSR set to: 0
  8967                           ;ff.c: 1551: ofs -= csz;
  8968                           
  8969                           ; BSR set to: 0
  8970  002F6A  51BE               	movf	dir_sdi@csz& (0+255),w,b
  8971  002F6C  5FAC               	subwf	dir_sdi@ofs& (0+255),f,b
  8972  002F6E  51BF               	movf	(dir_sdi@csz+1)& (0+255),w,b
  8973  002F70  5BAD               	subwfb	(dir_sdi@ofs+1)& (0+255),f,b
  8974  002F72  51C0               	movf	(dir_sdi@csz+2)& (0+255),w,b
  8975  002F74  5BAE               	subwfb	(dir_sdi@ofs+2)& (0+255),f,b
  8976  002F76  51C1               	movf	(dir_sdi@csz+3)& (0+255),w,b
  8977  002F78  5BAF               	subwfb	(dir_sdi@ofs+3)& (0+255),f,b
  8978  002F7A                     l1191:
  8979                           
  8980                           ; BSR set to: 0
  8981  002F7A  51BE               	movf	dir_sdi@csz& (0+255),w,b
  8982  002F7C  5DAC               	subwf	dir_sdi@ofs& (0+255),w,b
  8983  002F7E  51BF               	movf	(dir_sdi@csz+1)& (0+255),w,b
  8984  002F80  59AD               	subwfb	(dir_sdi@ofs+1)& (0+255),w,b
  8985  002F82  51C0               	movf	(dir_sdi@csz+2)& (0+255),w,b
  8986  002F84  59AE               	subwfb	(dir_sdi@ofs+2)& (0+255),w,b
  8987  002F86  51C1               	movf	(dir_sdi@csz+3)& (0+255),w,b
  8988  002F88  59AF               	subwfb	(dir_sdi@ofs+3)& (0+255),w,b
  8989  002F8A  B0D8               	btfsc	status,0,c
  8990  002F8C  D7B2               	goto	l1192
  8991                           
  8992                           ; BSR set to: 0
  8993                           ;ff.c: 1552: }
  8994                           ;ff.c: 1553: dp->sect = clst2sect(fs, clst);
  8995                           
  8996                           ; BSR set to: 0
  8997  002F8E  C0C6  F026         	movff	dir_sdi@fs,clst2sect@fs
  8998  002F92  C0C7  F027         	movff	dir_sdi@fs+1,clst2sect@fs+1
  8999  002F96  C0C2  F028         	movff	dir_sdi@clst,clst2sect@clst
  9000  002F9A  C0C3  F029         	movff	dir_sdi@clst+1,clst2sect@clst+1
  9001  002F9E  C0C4  F02A         	movff	dir_sdi@clst+2,clst2sect@clst+2
  9002  002FA2  C0C5  F02B         	movff	dir_sdi@clst+3,clst2sect@clst+3
  9003  002FA6  ECFA  F023         	call	_clst2sect	;wreg free
  9004  002FAA  0100               	movlb	0	; () banked
  9005  002FAC  EE20 F016          	lfsr	2,22
  9006  002FB0  51AA               	movf	dir_sdi@dp& (0+255),w,b
  9007  002FB2  26D9               	addwf	fsr2l,f,c
  9008  002FB4  51AB               	movf	(dir_sdi@dp+1)& (0+255),w,b
  9009  002FB6  22DA               	addwfc	fsr2h,f,c
  9010  002FB8  C026  FFDE         	movff	?_clst2sect,postinc2
  9011  002FBC  C027  FFDE         	movff	?_clst2sect+1,postinc2
  9012  002FC0  C028  FFDE         	movff	?_clst2sect+2,postinc2
  9013  002FC4  C029  FFDE         	movff	?_clst2sect+3,postinc2
  9014  002FC8                     l1190:
  9015                           
  9016                           ; BSR set to: 0
  9017                           ;ff.c: 1554: }
  9018                           ;ff.c: 1555: dp->clust = clst;
  9019                           
  9020                           ; BSR set to: 0
  9021  002FC8  EE20 F012          	lfsr	2,18
  9022  002FCC  51AA               	movf	dir_sdi@dp& (0+255),w,b
  9023  002FCE  26D9               	addwf	fsr2l,f,c
  9024  002FD0  51AB               	movf	(dir_sdi@dp+1)& (0+255),w,b
  9025  002FD2  22DA               	addwfc	fsr2h,f,c
  9026  002FD4  C0C2  FFDE         	movff	dir_sdi@clst,postinc2
  9027  002FD8  C0C3  FFDE         	movff	dir_sdi@clst+1,postinc2
  9028  002FDC  C0C4  FFDE         	movff	dir_sdi@clst+2,postinc2
  9029  002FE0  C0C5  FFDE         	movff	dir_sdi@clst+3,postinc2
  9030                           
  9031                           ; BSR set to: 0
  9032                           ;ff.c: 1556: if (dp->sect == 0) return FR_INT_ERR;
  9033  002FE4  EE20 F016          	lfsr	2,22
  9034  002FE8  51AA               	movf	dir_sdi@dp& (0+255),w,b
  9035  002FEA  26D9               	addwf	fsr2l,f,c
  9036  002FEC  51AB               	movf	(dir_sdi@dp+1)& (0+255),w,b
  9037  002FEE  22DA               	addwfc	fsr2h,f,c
  9038  002FF0  50DE               	movf	postinc2,w,c
  9039  002FF2  10DE               	iorwf	postinc2,w,c
  9040  002FF4  10DE               	iorwf	postinc2,w,c
  9041  002FF6  10DE               	iorwf	postinc2,w,c
  9042  002FF8  A4D8               	btfss	status,2,c
  9043  002FFA  D002               	goto	l1198
  9044                           
  9045                           ; BSR set to: 0
  9046  002FFC  0E02               	movlw	2
  9047                           
  9048                           ; BSR set to: 0
  9049  002FFE  0012               	return	
  9050  003000                     l1198:
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;ff.c: 1557: dp->sect += ofs / ((UINT)512);
  9054                           
  9055                           ; BSR set to: 0
  9056  003000  C0AC  F0B0         	movff	dir_sdi@ofs,??_dir_sdi
  9057  003004  C0AD  F0B1         	movff	dir_sdi@ofs+1,??_dir_sdi+1
  9058  003008  C0AE  F0B2         	movff	dir_sdi@ofs+2,??_dir_sdi+2
  9059  00300C  C0AF  F0B3         	movff	dir_sdi@ofs+3,??_dir_sdi+3
  9060  003010  0E0A               	movlw	10
  9061  003012  D005               	goto	u16860
  9062  003014                     u16865:
  9063  003014  90D8               	bcf	status,0,c
  9064  003016  33B3               	rrcf	(??_dir_sdi+3)& (0+255),f,b
  9065  003018  33B2               	rrcf	(??_dir_sdi+2)& (0+255),f,b
  9066  00301A  33B1               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  9067  00301C  33B0               	rrcf	??_dir_sdi& (0+255),f,b
  9068  00301E                     u16860:
  9069  00301E  2EE8               	decfsz	wreg,f,c
  9070  003020  D7F9               	goto	u16865
  9071  003022  EE20 F016          	lfsr	2,22
  9072  003026  51AA               	movf	dir_sdi@dp& (0+255),w,b
  9073  003028  26D9               	addwf	fsr2l,f,c
  9074  00302A  51AB               	movf	(dir_sdi@dp+1)& (0+255),w,b
  9075  00302C  22DA               	addwfc	fsr2h,f,c
  9076  00302E  51B0               	movf	??_dir_sdi& (0+255),w,b
  9077  003030  26DE               	addwf	postinc2,f,c
  9078  003032  51B1               	movf	(??_dir_sdi+1)& (0+255),w,b
  9079  003034  22DE               	addwfc	postinc2,f,c
  9080  003036  51B2               	movf	(??_dir_sdi+2)& (0+255),w,b
  9081  003038  22DE               	addwfc	postinc2,f,c
  9082  00303A  51B3               	movf	(??_dir_sdi+3)& (0+255),w,b
  9083  00303C  22DE               	addwfc	postinc2,f,c
  9084                           
  9085                           ;ff.c: 1558: dp->dir = fs->win + (ofs % ((UINT)512));
  9086  00303E  0EFF               	movlw	255
  9087  003040  6FB0               	movwf	??_dir_sdi& (0+255),b
  9088  003042  0E01               	movlw	1
  9089  003044  6FB1               	movwf	(??_dir_sdi+1)& (0+255),b
  9090  003046  C0AC  F0B2         	movff	dir_sdi@ofs,??_dir_sdi+2
  9091  00304A  C0AD  F0B3         	movff	dir_sdi@ofs+1,??_dir_sdi+3
  9092  00304E  51B0               	movf	??_dir_sdi& (0+255),w,b
  9093  003050  17B2               	andwf	(??_dir_sdi+2)& (0+255),f,b
  9094  003052  51B1               	movf	(??_dir_sdi+1)& (0+255),w,b
  9095  003054  17B3               	andwf	(??_dir_sdi+3)& (0+255),f,b
  9096  003056  0E2F               	movlw	47
  9097  003058  27B2               	addwf	(??_dir_sdi+2)& (0+255),f,b
  9098  00305A  0E00               	movlw	0
  9099  00305C  23B3               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  9100  00305E  C0C6  F0B4         	movff	dir_sdi@fs,??_dir_sdi+4
  9101  003062  C0C7  F0B5         	movff	dir_sdi@fs+1,??_dir_sdi+5
  9102  003066  51B2               	movf	(??_dir_sdi+2)& (0+255),w,b
  9103  003068  27B4               	addwf	(??_dir_sdi+4)& (0+255),f,b
  9104  00306A  51B3               	movf	(??_dir_sdi+3)& (0+255),w,b
  9105  00306C  23B5               	addwfc	(??_dir_sdi+5)& (0+255),f,b
  9106  00306E  EE20 F01A          	lfsr	2,26
  9107  003072  51AA               	movf	dir_sdi@dp& (0+255),w,b
  9108  003074  26D9               	addwf	fsr2l,f,c
  9109  003076  51AB               	movf	(dir_sdi@dp+1)& (0+255),w,b
  9110  003078  22DA               	addwfc	fsr2h,f,c
  9111  00307A  C0B4  FFDE         	movff	??_dir_sdi+4,postinc2
  9112  00307E  C0B5  FFDD         	movff	??_dir_sdi+5,postdec2
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;ff.c: 1560: return FR_OK;
  9116  003082  0E00               	movlw	0
  9117  003084  0012               	return	
  9118  003086                     __end_of_dir_sdi:
  9119                           	opt stack 0
  9120                           tosu	equ	0xFFF
  9121                           tosh	equ	0xFFE
  9122                           tosl	equ	0xFFD
  9123                           pclath	equ	0xFFA
  9124                           tblptru	equ	0xFF8
  9125                           tblptrh	equ	0xFF7
  9126                           tblptrl	equ	0xFF6
  9127                           tablat	equ	0xFF5
  9128                           prodh	equ	0xFF4
  9129                           prodl	equ	0xFF3
  9130                           intcon	equ	0xFF2
  9131                           intcon2	equ	0xFF1
  9132                           intcon3	equ	0xFF0
  9133                           indf0	equ	0xFEF
  9134                           postinc0	equ	0xFEE
  9135                           fsr0h	equ	0xFEA
  9136                           fsr0l	equ	0xFE9
  9137                           wreg	equ	0xFE8
  9138                           indf1	equ	0xFE7
  9139                           postinc1	equ	0xFE6
  9140                           postdec1	equ	0xFE5
  9141                           fsr1h	equ	0xFE2
  9142                           fsr1l	equ	0xFE1
  9143                           indf2	equ	0xFDF
  9144                           postinc2	equ	0xFDE
  9145                           postdec2	equ	0xFDD
  9146                           plusw2	equ	0xFDB
  9147                           fsr2h	equ	0xFDA
  9148                           fsr2l	equ	0xFD9
  9149                           status	equ	0xFD8
  9150                           
  9151 ;; *************** function _dir_next *****************
  9152 ;; Defined at:
  9153 ;;		line 1571 in file "bibliotecas/ff.c"
  9154 ;; Parameters:    Size  Location     Type
  9155 ;;  dp              2  108[BANK0 ] PTR struct .
  9156 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@dj(40), f_unlink@sdj(40), 
  9157 ;;		 -> f_unlink@dj(40), f_stat@dj(40), f_open@dj(40), 
  9158 ;;  stretch         2  110[BANK0 ] int 
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;  clst            4  134[BANK0 ] unsigned long 
  9161 ;;  ofs             4  128[BANK0 ] unsigned long 
  9162 ;;  fs              2  132[BANK0 ] PTR struct .
  9163 ;;		 -> NULL(0), fs(559), 
  9164 ;; Return value:  Size  Location     Type
  9165 ;;                  1    wreg      enum E79
  9166 ;; Registers used:
  9167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9168 ;; Tracked objects:
  9169 ;;		On entry : 0/0
  9170 ;;		On exit  : 0/0
  9171 ;;		Unchanged: 0/0
  9172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9173 ;;      Params:         0       4       0       0       0       0       0       0       0
  9174 ;;      Locals:         0      14       0       0       0       0       0       0       0
  9175 ;;      Temps:          0      12       0       0       0       0       0       0       0
  9176 ;;      Totals:         0      30       0       0       0       0       0       0       0
  9177 ;;Total ram usage:       30 bytes
  9178 ;; Hardware stack levels used:    1
  9179 ;; Hardware stack levels required when called:   11
  9180 ;; This function calls:
  9181 ;;		_clst2sect
  9182 ;;		_create_chain
  9183 ;;		_dir_clear
  9184 ;;		_get_fat
  9185 ;; This function is called by:
  9186 ;;		_dir_alloc
  9187 ;;		_dir_find
  9188 ;;		_dir_read
  9189 ;;		_f_readdir
  9190 ;; This function uses a non-reentrant model
  9191 ;;
  9192                           
  9193                           	psect	text28
  9194  00262C                     __ptext28:
  9195                           	opt stack 0
  9196  00262C                     _dir_next:
  9197                           	opt stack 14
  9198                           
  9199                           ;ff.c: 1576: DWORD ofs, clst;
  9200                           ;ff.c: 1577: FATFS *fs = dp->obj.fs;
  9201                           
  9202                           ; BSR set to: 0
  9203                           ;incstack = 0
  9204  00262C  C0CC  FFD9         	movff	dir_next@dp,fsr2l
  9205  002630  C0CD  FFDA         	movff	dir_next@dp+1,fsr2h
  9206  002634  CFDE F0E4          	movff	postinc2,dir_next@fs
  9207  002638  CFDD F0E5          	movff	postdec2,dir_next@fs+1
  9208                           
  9209                           ;ff.c: 1580: ofs = dp->dptr + 32;
  9210  00263C  0100               	movlb	0	; () banked
  9211  00263E  EE20 F00E          	lfsr	2,14
  9212  002642  51CC               	movf	dir_next@dp& (0+255),w,b
  9213  002644  26D9               	addwf	fsr2l,f,c
  9214  002646  51CD               	movf	(dir_next@dp+1)& (0+255),w,b
  9215  002648  22DA               	addwfc	fsr2h,f,c
  9216  00264A  CFDE F0D0          	movff	postinc2,??_dir_next
  9217  00264E  CFDE F0D1          	movff	postinc2,??_dir_next+1
  9218  002652  CFDE F0D2          	movff	postinc2,??_dir_next+2
  9219  002656  CFDE F0D3          	movff	postinc2,??_dir_next+3
  9220  00265A  0E20               	movlw	32
  9221  00265C  25D0               	addwf	??_dir_next& (0+255),w,b
  9222  00265E  6FE0               	movwf	dir_next@ofs& (0+255),b
  9223  002660  0E00               	movlw	0
  9224  002662  21D1               	addwfc	(??_dir_next+1)& (0+255),w,b
  9225  002664  6FE1               	movwf	(dir_next@ofs+1)& (0+255),b
  9226  002666  0E00               	movlw	0
  9227  002668  21D2               	addwfc	(??_dir_next+2)& (0+255),w,b
  9228  00266A  6FE2               	movwf	(dir_next@ofs+2)& (0+255),b
  9229  00266C  0E00               	movlw	0
  9230  00266E  21D3               	addwfc	(??_dir_next+3)& (0+255),w,b
  9231  002670  6FE3               	movwf	(dir_next@ofs+3)& (0+255),b
  9232                           
  9233                           ; BSR set to: 0
  9234                           ;ff.c: 1581: if (dp->sect == 0 || ofs >= (DWORD)((0 && fs->fs_type == 4) ? 0x10000000 : 
      +                          0x200000)) return FR_NO_FILE;
  9235  002672  EE20 F016          	lfsr	2,22
  9236  002676  51CC               	movf	dir_next@dp& (0+255),w,b
  9237  002678  26D9               	addwf	fsr2l,f,c
  9238  00267A  51CD               	movf	(dir_next@dp+1)& (0+255),w,b
  9239  00267C  22DA               	addwfc	fsr2h,f,c
  9240  00267E  50DE               	movf	postinc2,w,c
  9241  002680  10DE               	iorwf	postinc2,w,c
  9242  002682  10DE               	iorwf	postinc2,w,c
  9243  002684  10DE               	iorwf	postinc2,w,c
  9244  002686  B4D8               	btfsc	status,2,c
  9245  002688  D012               	goto	u16890
  9246                           
  9247                           ; BSR set to: 0
  9248                           
  9249                           ; BSR set to: 0
  9250                           
  9251                           ; BSR set to: 0
  9252                           
  9253                           ; BSR set to: 0
  9254  00268A  0E00               	movlw	0
  9255  00268C  6FDC               	movwf	_dir_next$2622& (0+255),b
  9256  00268E  0E00               	movlw	0
  9257  002690  6FDD               	movwf	(_dir_next$2622+1)& (0+255),b
  9258  002692  0E20               	movlw	32
  9259  002694  6FDE               	movwf	(_dir_next$2622+2)& (0+255),b
  9260  002696  0E00               	movlw	0
  9261                           
  9262                           ; BSR set to: 0
  9263                           
  9264                           ; BSR set to: 0
  9265  002698  6FDF               	movwf	(_dir_next$2622+3)& (0+255),b
  9266                           
  9267                           ; BSR set to: 0
  9268                           
  9269                           ; BSR set to: 0
  9270  00269A  51DC               	movf	_dir_next$2622& (0+255),w,b
  9271  00269C  5DE0               	subwf	dir_next@ofs& (0+255),w,b
  9272  00269E  51DD               	movf	(_dir_next$2622+1)& (0+255),w,b
  9273  0026A0  59E1               	subwfb	(dir_next@ofs+1)& (0+255),w,b
  9274  0026A2  51DE               	movf	(_dir_next$2622+2)& (0+255),w,b
  9275  0026A4  59E2               	subwfb	(dir_next@ofs+2)& (0+255),w,b
  9276  0026A6  51DF               	movf	(_dir_next$2622+3)& (0+255),w,b
  9277  0026A8  59E3               	subwfb	(dir_next@ofs+3)& (0+255),w,b
  9278  0026AA  A0D8               	btfss	status,0,c
  9279  0026AC  D002               	goto	l1201
  9280  0026AE                     u16890:
  9281                           
  9282                           ; BSR set to: 0
  9283                           
  9284                           ; BSR set to: 0
  9285  0026AE  0E04               	movlw	4
  9286                           
  9287                           ; BSR set to: 0
  9288  0026B0  0012               	return	
  9289  0026B2                     l1201:
  9290                           
  9291                           ; BSR set to: 0
  9292                           ;ff.c: 1583: if (ofs % ((UINT)512) == 0) {
  9293                           
  9294                           ; BSR set to: 0
  9295  0026B2  0EFF               	movlw	255
  9296  0026B4  15E0               	andwf	dir_next@ofs& (0+255),w,b
  9297  0026B6  6FD0               	movwf	??_dir_next& (0+255),b
  9298  0026B8  0E01               	movlw	1
  9299  0026BA  15E1               	andwf	(dir_next@ofs+1)& (0+255),w,b
  9300  0026BC  6FD1               	movwf	(??_dir_next+1)& (0+255),b
  9301  0026BE  0E00               	movlw	0
  9302  0026C0  15E2               	andwf	(dir_next@ofs+2)& (0+255),w,b
  9303  0026C2  6FD2               	movwf	(??_dir_next+2)& (0+255),b
  9304  0026C4  0E00               	movlw	0
  9305  0026C6  15E3               	andwf	(dir_next@ofs+3)& (0+255),w,b
  9306  0026C8  6FD3               	movwf	(??_dir_next+3)& (0+255),b
  9307  0026CA  51D0               	movf	??_dir_next& (0+255),w,b
  9308  0026CC  11D1               	iorwf	(??_dir_next+1)& (0+255),w,b
  9309  0026CE  11D2               	iorwf	(??_dir_next+2)& (0+255),w,b
  9310  0026D0  11D3               	iorwf	(??_dir_next+3)& (0+255),w,b
  9311  0026D2  A4D8               	btfss	status,2,c
  9312  0026D4  D14C               	goto	l1215
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;ff.c: 1584: dp->sect++;
  9316  0026D6  EE20 F016          	lfsr	2,22
  9317  0026DA  51CC               	movf	dir_next@dp& (0+255),w,b
  9318  0026DC  26D9               	addwf	fsr2l,f,c
  9319  0026DE  51CD               	movf	(dir_next@dp+1)& (0+255),w,b
  9320  0026E0  22DA               	addwfc	fsr2h,f,c
  9321  0026E2  2ADE               	incf	postinc2,f,c
  9322  0026E4  0E00               	movlw	0
  9323  0026E6  22DE               	addwfc	postinc2,f,c
  9324  0026E8  22DE               	addwfc	postinc2,f,c
  9325  0026EA  22DE               	addwfc	postinc2,f,c
  9326                           
  9327                           ;ff.c: 1586: if (dp->clust == 0) {
  9328  0026EC  EE20 F012          	lfsr	2,18
  9329  0026F0  51CC               	movf	dir_next@dp& (0+255),w,b
  9330  0026F2  26D9               	addwf	fsr2l,f,c
  9331  0026F4  51CD               	movf	(dir_next@dp+1)& (0+255),w,b
  9332  0026F6  22DA               	addwfc	fsr2h,f,c
  9333  0026F8  50DE               	movf	postinc2,w,c
  9334  0026FA  10DE               	iorwf	postinc2,w,c
  9335  0026FC  10DE               	iorwf	postinc2,w,c
  9336  0026FE  10DE               	iorwf	postinc2,w,c
  9337  002700  A4D8               	btfss	status,2,c
  9338  002702  D037               	goto	l1212
  9339                           
  9340                           ; BSR set to: 0
  9341                           ;ff.c: 1587: if (ofs / 32 >= fs->n_rootdir) {
  9342  002704  EE20 F007          	lfsr	2,7
  9343  002708  51E4               	movf	dir_next@fs& (0+255),w,b
  9344  00270A  26D9               	addwf	fsr2l,f,c
  9345  00270C  51E5               	movf	(dir_next@fs+1)& (0+255),w,b
  9346  00270E  22DA               	addwfc	fsr2h,f,c
  9347  002710  CFDE F0D0          	movff	postinc2,??_dir_next
  9348  002714  CFDD F0D1          	movff	postdec2,??_dir_next+1
  9349  002718  51D0               	movf	??_dir_next& (0+255),w,b
  9350  00271A  6FD2               	movwf	(??_dir_next+2)& (0+255),b
  9351  00271C  51D1               	movf	(??_dir_next+1)& (0+255),w,b
  9352  00271E  6FD3               	movwf	(??_dir_next+3)& (0+255),b
  9353  002720  6BD4               	clrf	(??_dir_next+4)& (0+255),b
  9354  002722  6BD5               	clrf	(??_dir_next+5)& (0+255),b
  9355  002724  C0E0  F0D6         	movff	dir_next@ofs,??_dir_next+6
  9356  002728  C0E1  F0D7         	movff	dir_next@ofs+1,??_dir_next+7
  9357  00272C  C0E2  F0D8         	movff	dir_next@ofs+2,??_dir_next+8
  9358  002730  C0E3  F0D9         	movff	dir_next@ofs+3,??_dir_next+9
  9359  002734  0E06               	movlw	6
  9360  002736  D005               	goto	u16920
  9361  002738                     u16925:
  9362  002738  90D8               	bcf	status,0,c
  9363  00273A  33D9               	rrcf	(??_dir_next+9)& (0+255),f,b
  9364  00273C  33D8               	rrcf	(??_dir_next+8)& (0+255),f,b
  9365  00273E  33D7               	rrcf	(??_dir_next+7)& (0+255),f,b
  9366  002740  33D6               	rrcf	(??_dir_next+6)& (0+255),f,b
  9367  002742                     u16920:
  9368  002742  2EE8               	decfsz	wreg,f,c
  9369  002744  D7F9               	goto	u16925
  9370  002746  51D2               	movf	(??_dir_next+2)& (0+255),w,b
  9371  002748  5DD6               	subwf	(??_dir_next+6)& (0+255),w,b
  9372  00274A  51D3               	movf	(??_dir_next+3)& (0+255),w,b
  9373  00274C  59D7               	subwfb	(??_dir_next+7)& (0+255),w,b
  9374  00274E  51D4               	movf	(??_dir_next+4)& (0+255),w,b
  9375  002750  59D8               	subwfb	(??_dir_next+8)& (0+255),w,b
  9376  002752  51D5               	movf	(??_dir_next+5)& (0+255),w,b
  9377  002754  59D9               	subwfb	(??_dir_next+9)& (0+255),w,b
  9378  002756  A0D8               	btfss	status,0,c
  9379  002758  D10A               	goto	l1215
  9380                           
  9381                           ; BSR set to: 0
  9382                           ;ff.c: 1588: dp->sect = 0; return FR_NO_FILE;
  9383  00275A  EE20 F016          	lfsr	2,22
  9384  00275E  51CC               	movf	dir_next@dp& (0+255),w,b
  9385  002760  26D9               	addwf	fsr2l,f,c
  9386  002762  51CD               	movf	(dir_next@dp+1)& (0+255),w,b
  9387  002764  22DA               	addwfc	fsr2h,f,c
  9388  002766  6ADE               	clrf	postinc2,c
  9389  002768  6ADE               	clrf	postinc2,c
  9390  00276A  6ADE               	clrf	postinc2,c
  9391  00276C  6ADD               	clrf	postdec2,c
  9392                           
  9393                           ; BSR set to: 0
  9394  00276E  0E04               	movlw	4
  9395                           
  9396                           ; BSR set to: 0
  9397  002770  0012               	return	
  9398  002772                     l1212:
  9399                           
  9400                           ; BSR set to: 0
  9401                           ;ff.c: 1591: else {
  9402                           ;ff.c: 1592: if ((ofs / ((UINT)512) & (fs->csize - 1)) == 0) {
  9403                           
  9404                           ; BSR set to: 0
  9405  002772  0EFF               	movlw	255
  9406  002774  6FD0               	movwf	??_dir_next& (0+255),b
  9407  002776  0EFF               	movlw	255
  9408  002778  6FD1               	movwf	(??_dir_next+1)& (0+255),b
  9409  00277A  EE20 F009          	lfsr	2,9
  9410  00277E  51E4               	movf	dir_next@fs& (0+255),w,b
  9411  002780  26D9               	addwf	fsr2l,f,c
  9412  002782  51E5               	movf	(dir_next@fs+1)& (0+255),w,b
  9413  002784  22DA               	addwfc	fsr2h,f,c
  9414  002786  CFDE F0D2          	movff	postinc2,??_dir_next+2
  9415  00278A  CFDD F0D3          	movff	postdec2,??_dir_next+3
  9416  00278E  51D0               	movf	??_dir_next& (0+255),w,b
  9417  002790  27D2               	addwf	(??_dir_next+2)& (0+255),f,b
  9418  002792  51D1               	movf	(??_dir_next+1)& (0+255),w,b
  9419  002794  23D3               	addwfc	(??_dir_next+3)& (0+255),f,b
  9420  002796  C0E0  F0D4         	movff	dir_next@ofs,??_dir_next+4
  9421  00279A  C0E1  F0D5         	movff	dir_next@ofs+1,??_dir_next+5
  9422  00279E  C0E2  F0D6         	movff	dir_next@ofs+2,??_dir_next+6
  9423  0027A2  C0E3  F0D7         	movff	dir_next@ofs+3,??_dir_next+7
  9424  0027A6  0E0A               	movlw	10
  9425  0027A8  D005               	goto	u16940
  9426  0027AA                     u16945:
  9427  0027AA  90D8               	bcf	status,0,c
  9428  0027AC  33D7               	rrcf	(??_dir_next+7)& (0+255),f,b
  9429  0027AE  33D6               	rrcf	(??_dir_next+6)& (0+255),f,b
  9430  0027B0  33D5               	rrcf	(??_dir_next+5)& (0+255),f,b
  9431  0027B2  33D4               	rrcf	(??_dir_next+4)& (0+255),f,b
  9432  0027B4                     u16940:
  9433  0027B4  2EE8               	decfsz	wreg,f,c
  9434  0027B6  D7F9               	goto	u16945
  9435  0027B8  51D2               	movf	(??_dir_next+2)& (0+255),w,b
  9436  0027BA  15D4               	andwf	(??_dir_next+4)& (0+255),w,b
  9437  0027BC  6FD8               	movwf	(??_dir_next+8)& (0+255),b
  9438  0027BE  51D3               	movf	(??_dir_next+3)& (0+255),w,b
  9439  0027C0  15D5               	andwf	(??_dir_next+5)& (0+255),w,b
  9440  0027C2  6FD9               	movwf	(??_dir_next+9)& (0+255),b
  9441  0027C4  0E00               	movlw	0
  9442  0027C6  15D6               	andwf	(??_dir_next+6)& (0+255),w,b
  9443  0027C8  6FDA               	movwf	(??_dir_next+10)& (0+255),b
  9444  0027CA  0E00               	movlw	0
  9445  0027CC  15D7               	andwf	(??_dir_next+7)& (0+255),w,b
  9446  0027CE  6FDB               	movwf	(??_dir_next+11)& (0+255),b
  9447  0027D0  51D8               	movf	(??_dir_next+8)& (0+255),w,b
  9448  0027D2  11D9               	iorwf	(??_dir_next+9)& (0+255),w,b
  9449  0027D4  11DA               	iorwf	(??_dir_next+10)& (0+255),w,b
  9450  0027D6  11DB               	iorwf	(??_dir_next+11)& (0+255),w,b
  9451  0027D8  A4D8               	btfss	status,2,c
  9452  0027DA  D0C9               	goto	l1215
  9453                           
  9454                           ; BSR set to: 0
  9455                           ;ff.c: 1593: clst = get_fat(&dp->obj, dp->clust);
  9456  0027DC  C0CC  F090         	movff	dir_next@dp,get_fat@obj
  9457  0027E0  C0CD  F091         	movff	dir_next@dp+1,get_fat@obj+1
  9458  0027E4  EE20 F012          	lfsr	2,18
  9459  0027E8  51CC               	movf	dir_next@dp& (0+255),w,b
  9460  0027EA  26D9               	addwf	fsr2l,f,c
  9461  0027EC  51CD               	movf	(dir_next@dp+1)& (0+255),w,b
  9462  0027EE  22DA               	addwfc	fsr2h,f,c
  9463  0027F0  CFDE F092          	movff	postinc2,get_fat@clst
  9464  0027F4  CFDE F093          	movff	postinc2,get_fat@clst+1
  9465  0027F8  CFDE F094          	movff	postinc2,get_fat@clst+2
  9466  0027FC  CFDE F095          	movff	postinc2,get_fat@clst+3
  9467  002800  ECE9  F014         	call	_get_fat	;wreg free
  9468  002804  C090  F0E6         	movff	?_get_fat,dir_next@clst
  9469  002808  C091  F0E7         	movff	?_get_fat+1,dir_next@clst+1
  9470  00280C  C092  F0E8         	movff	?_get_fat+2,dir_next@clst+2
  9471  002810  C093  F0E9         	movff	?_get_fat+3,dir_next@clst+3
  9472                           
  9473                           ;ff.c: 1594: if (clst <= 1) return FR_INT_ERR;
  9474  002814  0100               	movlb	0	; () banked
  9475  002816  51E9               	movf	(dir_next@clst+3)& (0+255),w,b
  9476  002818  11E8               	iorwf	(dir_next@clst+2)& (0+255),w,b
  9477  00281A  11E7               	iorwf	(dir_next@clst+1)& (0+255),w,b
  9478  00281C  E106               	bnz	l13302
  9479  00281E  0E02               	movlw	2
  9480  002820  5DE6               	subwf	dir_next@clst& (0+255),w,b
  9481  002822  B0D8               	btfsc	status,0,c
  9482  002824  D002               	goto	l1216
  9483                           
  9484                           ; BSR set to: 0
  9485  002826  0E02               	movlw	2
  9486                           
  9487                           ; BSR set to: 0
  9488  002828  0012               	return	
  9489  00282A                     l1216:
  9490  00282A                     l13302:
  9491                           
  9492                           ; BSR set to: 0
  9493                           ;ff.c: 1595: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  9494  00282A  29E6               	incf	dir_next@clst& (0+255),w,b
  9495  00282C  E109               	bnz	l13308
  9496  00282E  29E7               	incf	(dir_next@clst+1)& (0+255),w,b
  9497  002830  E107               	bnz	l13308
  9498  002832  29E8               	incf	(dir_next@clst+2)& (0+255),w,b
  9499  002834  E105               	bnz	l13308
  9500  002836  29E9               	incf	(dir_next@clst+3)& (0+255),w,b
  9501  002838  A4D8               	btfss	status,2,c
  9502  00283A  D002               	goto	l1217
  9503                           
  9504                           ; BSR set to: 0
  9505  00283C  0E01               	movlw	1
  9506                           
  9507                           ; BSR set to: 0
  9508  00283E  0012               	return	
  9509  002840                     l1217:
  9510  002840                     l13308:
  9511                           
  9512                           ; BSR set to: 0
  9513                           ;ff.c: 1596: if (clst >= fs->n_fatent) {
  9514  002840  EE20 F013          	lfsr	2,19
  9515  002844  51E4               	movf	dir_next@fs& (0+255),w,b
  9516  002846  26D9               	addwf	fsr2l,f,c
  9517  002848  51E5               	movf	(dir_next@fs+1)& (0+255),w,b
  9518  00284A  22DA               	addwfc	fsr2h,f,c
  9519  00284C  50DE               	movf	postinc2,w,c
  9520  00284E  5DE6               	subwf	dir_next@clst& (0+255),w,b
  9521  002850  50DE               	movf	postinc2,w,c
  9522  002852  59E7               	subwfb	(dir_next@clst+1)& (0+255),w,b
  9523  002854  50DE               	movf	postinc2,w,c
  9524  002856  59E8               	subwfb	(dir_next@clst+2)& (0+255),w,b
  9525  002858  50DE               	movf	postinc2,w,c
  9526  00285A  59E9               	subwfb	(dir_next@clst+3)& (0+255),w,b
  9527  00285C  A0D8               	btfss	status,0,c
  9528  00285E  D05B               	goto	l1224
  9529                           
  9530                           ; BSR set to: 0
  9531                           ;ff.c: 1598: if (!stretch) {
  9532  002860  51CE               	movf	dir_next@stretch& (0+255),w,b
  9533  002862  11CF               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  9534  002864  A4D8               	btfss	status,2,c
  9535  002866  D00C               	goto	l1219
  9536                           
  9537                           ; BSR set to: 0
  9538                           ;ff.c: 1599: dp->sect = 0; return FR_NO_FILE;
  9539  002868  EE20 F016          	lfsr	2,22
  9540  00286C  51CC               	movf	dir_next@dp& (0+255),w,b
  9541  00286E  26D9               	addwf	fsr2l,f,c
  9542  002870  51CD               	movf	(dir_next@dp+1)& (0+255),w,b
  9543  002872  22DA               	addwfc	fsr2h,f,c
  9544  002874  6ADE               	clrf	postinc2,c
  9545  002876  6ADE               	clrf	postinc2,c
  9546  002878  6ADE               	clrf	postinc2,c
  9547  00287A  6ADD               	clrf	postdec2,c
  9548                           
  9549                           ; BSR set to: 0
  9550  00287C  0E04               	movlw	4
  9551                           
  9552                           ; BSR set to: 0
  9553  00287E  0012               	return	
  9554  002880                     l1219:
  9555                           
  9556                           ; BSR set to: 0
  9557                           ;ff.c: 1600: }
  9558                           ;ff.c: 1601: clst = create_chain(&dp->obj, dp->clust);
  9559                           
  9560                           ; BSR set to: 0
  9561  002880  C0CC  F0AF         	movff	dir_next@dp,create_chain@obj
  9562  002884  C0CD  F0B0         	movff	dir_next@dp+1,create_chain@obj+1
  9563  002888  EE20 F012          	lfsr	2,18
  9564  00288C  51CC               	movf	dir_next@dp& (0+255),w,b
  9565  00288E  26D9               	addwf	fsr2l,f,c
  9566  002890  51CD               	movf	(dir_next@dp+1)& (0+255),w,b
  9567  002892  22DA               	addwfc	fsr2h,f,c
  9568  002894  CFDE F0B1          	movff	postinc2,create_chain@clst
  9569  002898  CFDE F0B2          	movff	postinc2,create_chain@clst+1
  9570  00289C  CFDE F0B3          	movff	postinc2,create_chain@clst+2
  9571  0028A0  CFDE F0B4          	movff	postinc2,create_chain@clst+3
  9572  0028A4  EC42  F00C         	call	_create_chain	;wreg free
  9573  0028A8  C0AF  F0E6         	movff	?_create_chain,dir_next@clst
  9574  0028AC  C0B0  F0E7         	movff	?_create_chain+1,dir_next@clst+1
  9575  0028B0  C0B1  F0E8         	movff	?_create_chain+2,dir_next@clst+2
  9576  0028B4  C0B2  F0E9         	movff	?_create_chain+3,dir_next@clst+3
  9577                           
  9578                           ;ff.c: 1602: if (clst == 0) return FR_DENIED;
  9579  0028B8  0100               	movlb	0	; () banked
  9580  0028BA  51E6               	movf	dir_next@clst& (0+255),w,b
  9581  0028BC  11E7               	iorwf	(dir_next@clst+1)& (0+255),w,b
  9582  0028BE  11E8               	iorwf	(dir_next@clst+2)& (0+255),w,b
  9583  0028C0  11E9               	iorwf	(dir_next@clst+3)& (0+255),w,b
  9584  0028C2  A4D8               	btfss	status,2,c
  9585  0028C4  D002               	goto	l1220
  9586                           
  9587                           ; BSR set to: 0
  9588  0028C6  0E07               	movlw	7
  9589                           
  9590                           ; BSR set to: 0
  9591  0028C8  0012               	return	
  9592  0028CA                     l1220:
  9593                           
  9594                           ; BSR set to: 0
  9595                           ;ff.c: 1603: if (clst == 1) return FR_INT_ERR;
  9596                           
  9597                           ; BSR set to: 0
  9598  0028CA  05E6               	decf	dir_next@clst& (0+255),w,b
  9599  0028CC  11E7               	iorwf	(dir_next@clst+1)& (0+255),w,b
  9600  0028CE  11E8               	iorwf	(dir_next@clst+2)& (0+255),w,b
  9601  0028D0  11E9               	iorwf	(dir_next@clst+3)& (0+255),w,b
  9602  0028D2  A4D8               	btfss	status,2,c
  9603  0028D4  D002               	goto	l1221
  9604                           
  9605                           ; BSR set to: 0
  9606  0028D6  0E02               	movlw	2
  9607                           
  9608                           ; BSR set to: 0
  9609  0028D8  0012               	return	
  9610  0028DA                     l1221:
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;ff.c: 1604: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  9614                           
  9615                           ; BSR set to: 0
  9616  0028DA  29E6               	incf	dir_next@clst& (0+255),w,b
  9617  0028DC  E109               	bnz	l13338
  9618  0028DE  29E7               	incf	(dir_next@clst+1)& (0+255),w,b
  9619  0028E0  E107               	bnz	l13338
  9620  0028E2  29E8               	incf	(dir_next@clst+2)& (0+255),w,b
  9621  0028E4  E105               	bnz	l13338
  9622  0028E6  29E9               	incf	(dir_next@clst+3)& (0+255),w,b
  9623  0028E8  A4D8               	btfss	status,2,c
  9624  0028EA  D002               	goto	l1222
  9625                           
  9626                           ; BSR set to: 0
  9627  0028EC  0E01               	movlw	1
  9628                           
  9629                           ; BSR set to: 0
  9630  0028EE  0012               	return	
  9631  0028F0                     l1222:
  9632  0028F0                     l13338:
  9633                           
  9634                           ; BSR set to: 0
  9635                           ;ff.c: 1605: if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;
  9636  0028F0  C0E4  F085         	movff	dir_next@fs,dir_clear@fs
  9637  0028F4  C0E5  F086         	movff	dir_next@fs+1,dir_clear@fs+1
  9638  0028F8  C0E6  F087         	movff	dir_next@clst,dir_clear@clst
  9639  0028FC  C0E7  F088         	movff	dir_next@clst+1,dir_clear@clst+1
  9640  002900  C0E8  F089         	movff	dir_next@clst+2,dir_clear@clst+2
  9641  002904  C0E9  F08A         	movff	dir_next@clst+3,dir_clear@clst+3
  9642  002908  EC6F  F020         	call	_dir_clear	;wreg free
  9643  00290C  0900               	iorlw	0
  9644  00290E  B4D8               	btfsc	status,2,c
  9645  002910  D002               	goto	l1224
  9646  002912  0E01               	movlw	1
  9647  002914  0012               	return	
  9648  002916                     l1224:
  9649                           
  9650                           ;ff.c: 1611: }
  9651                           ;ff.c: 1612: dp->clust = clst;
  9652                           
  9653                           ; BSR set to: 0
  9654  002916  0100               	movlb	0	; () banked
  9655  002918  EE20 F012          	lfsr	2,18
  9656  00291C  51CC               	movf	dir_next@dp& (0+255),w,b
  9657  00291E  26D9               	addwf	fsr2l,f,c
  9658  002920  51CD               	movf	(dir_next@dp+1)& (0+255),w,b
  9659  002922  22DA               	addwfc	fsr2h,f,c
  9660  002924  C0E6  FFDE         	movff	dir_next@clst,postinc2
  9661  002928  C0E7  FFDE         	movff	dir_next@clst+1,postinc2
  9662  00292C  C0E8  FFDE         	movff	dir_next@clst+2,postinc2
  9663  002930  C0E9  FFDE         	movff	dir_next@clst+3,postinc2
  9664                           
  9665                           ; BSR set to: 0
  9666                           ;ff.c: 1613: dp->sect = clst2sect(fs, clst);
  9667  002934  C0E4  F026         	movff	dir_next@fs,clst2sect@fs
  9668  002938  C0E5  F027         	movff	dir_next@fs+1,clst2sect@fs+1
  9669  00293C  C0E6  F028         	movff	dir_next@clst,clst2sect@clst
  9670  002940  C0E7  F029         	movff	dir_next@clst+1,clst2sect@clst+1
  9671  002944  C0E8  F02A         	movff	dir_next@clst+2,clst2sect@clst+2
  9672  002948  C0E9  F02B         	movff	dir_next@clst+3,clst2sect@clst+3
  9673  00294C  ECFA  F023         	call	_clst2sect	;wreg free
  9674  002950  0100               	movlb	0	; () banked
  9675  002952  EE20 F016          	lfsr	2,22
  9676  002956  51CC               	movf	dir_next@dp& (0+255),w,b
  9677  002958  26D9               	addwf	fsr2l,f,c
  9678  00295A  51CD               	movf	(dir_next@dp+1)& (0+255),w,b
  9679  00295C  22DA               	addwfc	fsr2h,f,c
  9680  00295E  C026  FFDE         	movff	?_clst2sect,postinc2
  9681  002962  C027  FFDE         	movff	?_clst2sect+1,postinc2
  9682  002966  C028  FFDE         	movff	?_clst2sect+2,postinc2
  9683  00296A  C029  FFDE         	movff	?_clst2sect+3,postinc2
  9684  00296E                     l1215:
  9685                           
  9686                           ; BSR set to: 0
  9687                           ;ff.c: 1614: }
  9688                           ;ff.c: 1615: }
  9689                           ;ff.c: 1616: }
  9690                           ;ff.c: 1617: dp->dptr = ofs;
  9691                           
  9692                           ; BSR set to: 0
  9693                           
  9694                           ; BSR set to: 0
  9695                           
  9696                           ; BSR set to: 0
  9697  00296E  EE20 F00E          	lfsr	2,14
  9698  002972  51CC               	movf	dir_next@dp& (0+255),w,b
  9699  002974  26D9               	addwf	fsr2l,f,c
  9700  002976  51CD               	movf	(dir_next@dp+1)& (0+255),w,b
  9701  002978  22DA               	addwfc	fsr2h,f,c
  9702  00297A  C0E0  FFDE         	movff	dir_next@ofs,postinc2
  9703  00297E  C0E1  FFDE         	movff	dir_next@ofs+1,postinc2
  9704  002982  C0E2  FFDE         	movff	dir_next@ofs+2,postinc2
  9705  002986  C0E3  FFDE         	movff	dir_next@ofs+3,postinc2
  9706                           
  9707                           ; BSR set to: 0
  9708                           ;ff.c: 1618: dp->dir = fs->win + ofs % ((UINT)512);
  9709  00298A  0EFF               	movlw	255
  9710  00298C  6FD0               	movwf	??_dir_next& (0+255),b
  9711  00298E  0E01               	movlw	1
  9712  002990  6FD1               	movwf	(??_dir_next+1)& (0+255),b
  9713  002992  C0E0  F0D2         	movff	dir_next@ofs,??_dir_next+2
  9714  002996  C0E1  F0D3         	movff	dir_next@ofs+1,??_dir_next+3
  9715  00299A  51D0               	movf	??_dir_next& (0+255),w,b
  9716  00299C  17D2               	andwf	(??_dir_next+2)& (0+255),f,b
  9717  00299E  51D1               	movf	(??_dir_next+1)& (0+255),w,b
  9718  0029A0  17D3               	andwf	(??_dir_next+3)& (0+255),f,b
  9719  0029A2  0E2F               	movlw	47
  9720  0029A4  27D2               	addwf	(??_dir_next+2)& (0+255),f,b
  9721  0029A6  0E00               	movlw	0
  9722  0029A8  23D3               	addwfc	(??_dir_next+3)& (0+255),f,b
  9723  0029AA  C0E4  F0D4         	movff	dir_next@fs,??_dir_next+4
  9724  0029AE  C0E5  F0D5         	movff	dir_next@fs+1,??_dir_next+5
  9725  0029B2  51D2               	movf	(??_dir_next+2)& (0+255),w,b
  9726  0029B4  27D4               	addwf	(??_dir_next+4)& (0+255),f,b
  9727  0029B6  51D3               	movf	(??_dir_next+3)& (0+255),w,b
  9728  0029B8  23D5               	addwfc	(??_dir_next+5)& (0+255),f,b
  9729  0029BA  EE20 F01A          	lfsr	2,26
  9730  0029BE  51CC               	movf	dir_next@dp& (0+255),w,b
  9731  0029C0  26D9               	addwf	fsr2l,f,c
  9732  0029C2  51CD               	movf	(dir_next@dp+1)& (0+255),w,b
  9733  0029C4  22DA               	addwfc	fsr2h,f,c
  9734  0029C6  C0D4  FFDE         	movff	??_dir_next+4,postinc2
  9735  0029CA  C0D5  FFDD         	movff	??_dir_next+5,postdec2
  9736                           
  9737                           ; BSR set to: 0
  9738                           ;ff.c: 1620: return FR_OK;
  9739  0029CE  0E00               	movlw	0
  9740  0029D0  0012               	return	
  9741  0029D2                     __end_of_dir_next:
  9742                           	opt stack 0
  9743                           tosu	equ	0xFFF
  9744                           tosh	equ	0xFFE
  9745                           tosl	equ	0xFFD
  9746                           pclath	equ	0xFFA
  9747                           tblptru	equ	0xFF8
  9748                           tblptrh	equ	0xFF7
  9749                           tblptrl	equ	0xFF6
  9750                           tablat	equ	0xFF5
  9751                           prodh	equ	0xFF4
  9752                           prodl	equ	0xFF3
  9753                           intcon	equ	0xFF2
  9754                           intcon2	equ	0xFF1
  9755                           intcon3	equ	0xFF0
  9756                           indf0	equ	0xFEF
  9757                           postinc0	equ	0xFEE
  9758                           fsr0h	equ	0xFEA
  9759                           fsr0l	equ	0xFE9
  9760                           wreg	equ	0xFE8
  9761                           indf1	equ	0xFE7
  9762                           postinc1	equ	0xFE6
  9763                           postdec1	equ	0xFE5
  9764                           fsr1h	equ	0xFE2
  9765                           fsr1l	equ	0xFE1
  9766                           indf2	equ	0xFDF
  9767                           postinc2	equ	0xFDE
  9768                           postdec2	equ	0xFDD
  9769                           plusw2	equ	0xFDB
  9770                           fsr2h	equ	0xFDA
  9771                           fsr2l	equ	0xFD9
  9772                           status	equ	0xFD8
  9773                           
  9774 ;; *************** function _dir_clear *****************
  9775 ;; Defined at:
  9776 ;;		line 1482 in file "bibliotecas/ff.c"
  9777 ;; Parameters:    Size  Location     Type
  9778 ;;  fs              2   37[BANK0 ] PTR struct .
  9779 ;;		 -> NULL(0), fs(559), 
  9780 ;;  clst            4   39[BANK0 ] unsigned long 
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;  sect            4   47[BANK0 ] unsigned long 
  9783 ;;  n               2   53[BANK0 ] unsigned int 
  9784 ;;  szb             2   51[BANK0 ] unsigned int 
  9785 ;;  ibuf            2   45[BANK0 ] PTR unsigned char 
  9786 ;;		 -> fs.win(512), NULL(0), fs(559), 
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  1    wreg      enum E79
  9789 ;; Registers used:
  9790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9796 ;;      Params:         0       6       0       0       0       0       0       0       0
  9797 ;;      Locals:         0      10       0       0       0       0       0       0       0
  9798 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9799 ;;      Totals:         0      18       0       0       0       0       0       0       0
  9800 ;;Total ram usage:       18 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:    8
  9803 ;; This function calls:
  9804 ;;		_clst2sect
  9805 ;;		_disk_write
  9806 ;;		_mem_set
  9807 ;;		_sync_window
  9808 ;; This function is called by:
  9809 ;;		_dir_next
  9810 ;;		_f_mkdir
  9811 ;; This function uses a non-reentrant model
  9812 ;;
  9813                           
  9814                           	psect	text29
  9815  0040DE                     __ptext29:
  9816                           	opt stack 0
  9817  0040DE                     _dir_clear:
  9818                           	opt stack 16
  9819                           
  9820                           ;ff.c: 1487: DWORD sect;
  9821                           ;ff.c: 1488: UINT n, szb;
  9822                           ;ff.c: 1489: BYTE *ibuf;
  9823                           ;ff.c: 1492: if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
  9824                           
  9825                           ;incstack = 0
  9826  0040DE  C085  F073         	movff	dir_clear@fs,sync_window@fs
  9827  0040E2  C086  F074         	movff	dir_clear@fs+1,sync_window@fs+1
  9828  0040E6  ECEC  F01C         	call	_sync_window	;wreg free
  9829  0040EA  0900               	iorlw	0
  9830  0040EC  B4D8               	btfsc	status,2,c
  9831  0040EE  D002               	goto	l1167
  9832  0040F0  0E01               	movlw	1
  9833  0040F2  0012               	return	
  9834  0040F4                     l1167:
  9835                           
  9836                           ;ff.c: 1493: sect = clst2sect(fs, clst);
  9837  0040F4  C085  F026         	movff	dir_clear@fs,clst2sect@fs
  9838  0040F8  C086  F027         	movff	dir_clear@fs+1,clst2sect@fs+1
  9839  0040FC  C087  F028         	movff	dir_clear@clst,clst2sect@clst
  9840  004100  C088  F029         	movff	dir_clear@clst+1,clst2sect@clst+1
  9841  004104  C089  F02A         	movff	dir_clear@clst+2,clst2sect@clst+2
  9842  004108  C08A  F02B         	movff	dir_clear@clst+3,clst2sect@clst+3
  9843  00410C  ECFA  F023         	call	_clst2sect	;wreg free
  9844  004110  C026  F08F         	movff	?_clst2sect,dir_clear@sect
  9845  004114  C027  F090         	movff	?_clst2sect+1,dir_clear@sect+1
  9846  004118  C028  F091         	movff	?_clst2sect+2,dir_clear@sect+2
  9847  00411C  C029  F092         	movff	?_clst2sect+3,dir_clear@sect+3
  9848                           
  9849                           ;ff.c: 1494: fs->winsect = sect;
  9850  004120  0100               	movlb	0	; () banked
  9851  004122  EE20 F02B          	lfsr	2,43
  9852  004126  5185               	movf	dir_clear@fs& (0+255),w,b
  9853  004128  26D9               	addwf	fsr2l,f,c
  9854  00412A  5186               	movf	(dir_clear@fs+1)& (0+255),w,b
  9855  00412C  22DA               	addwfc	fsr2h,f,c
  9856  00412E  C08F  FFDE         	movff	dir_clear@sect,postinc2
  9857  004132  C090  FFDE         	movff	dir_clear@sect+1,postinc2
  9858  004136  C091  FFDE         	movff	dir_clear@sect+2,postinc2
  9859  00413A  C092  FFDE         	movff	dir_clear@sect+3,postinc2
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;ff.c: 1495: mem_set(fs->win, 0, ((UINT)512));
  9863  00413E  0E2F               	movlw	47
  9864  004140  2585               	addwf	dir_clear@fs& (0+255),w,b
  9865  004142  6E1A               	movwf	mem_set@dst,c
  9866  004144  0E00               	movlw	0
  9867  004146  2186               	addwfc	(dir_clear@fs+1)& (0+255),w,b
  9868  004148  6E1B               	movwf	mem_set@dst+1,c
  9869  00414A  0E00               	movlw	0
  9870  00414C  6E1D               	movwf	mem_set@val+1,c
  9871  00414E  0E00               	movlw	0
  9872  004150  6E1C               	movwf	mem_set@val,c
  9873  004152  0E02               	movlw	2
  9874  004154  6E1F               	movwf	mem_set@cnt+1,c
  9875  004156  0E00               	movlw	0
  9876  004158  6E1E               	movwf	mem_set@cnt,c
  9877  00415A  EC13  F02D         	call	_mem_set	;wreg free
  9878                           
  9879                           ;ff.c: 1506: {
  9880                           ;ff.c: 1507: ibuf = fs->win; szb = 1;
  9881  00415E  0E2F               	movlw	47
  9882  004160  0100               	movlb	0	; () banked
  9883  004162  2585               	addwf	dir_clear@fs& (0+255),w,b
  9884  004164  6F8D               	movwf	dir_clear@ibuf& (0+255),b
  9885  004166  0E00               	movlw	0
  9886  004168  2186               	addwfc	(dir_clear@fs+1)& (0+255),w,b
  9887  00416A  6F8E               	movwf	(dir_clear@ibuf+1)& (0+255),b
  9888                           
  9889                           ; BSR set to: 0
  9890  00416C  0E00               	movlw	0
  9891  00416E  6F94               	movwf	(dir_clear@szb+1)& (0+255),b
  9892  004170  0E01               	movlw	1
  9893  004172  6F93               	movwf	dir_clear@szb& (0+255),b
  9894                           
  9895                           ; BSR set to: 0
  9896                           ;ff.c: 1508: for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == R
      +                          ES_OK; n += szb) ;
  9897  004174  0E00               	movlw	0
  9898  004176  6F96               	movwf	(dir_clear@n+1)& (0+255),b
  9899  004178  0E00               	movlw	0
  9900  00417A  6F95               	movwf	dir_clear@n& (0+255),b
  9901  00417C  D005               	goto	l1169
  9902  00417E                     
  9903                           ; BSR set to: 0
  9904  00417E  0100               	movlb	0	; () banked
  9905  004180  5193               	movf	dir_clear@szb& (0+255),w,b
  9906  004182  2795               	addwf	dir_clear@n& (0+255),f,b
  9907  004184  5194               	movf	(dir_clear@szb+1)& (0+255),w,b
  9908  004186  2396               	addwfc	(dir_clear@n+1)& (0+255),f,b
  9909  004188                     l1169:
  9910                           
  9911                           ; BSR set to: 0
  9912                           
  9913                           ; BSR set to: 0
  9914  004188  EE20 F009          	lfsr	2,9
  9915  00418C  5185               	movf	dir_clear@fs& (0+255),w,b
  9916  00418E  26D9               	addwf	fsr2l,f,c
  9917  004190  5186               	movf	(dir_clear@fs+1)& (0+255),w,b
  9918  004192  22DA               	addwfc	fsr2h,f,c
  9919  004194  50DE               	movf	postinc2,w,c
  9920  004196  5D95               	subwf	dir_clear@n& (0+255),w,b
  9921  004198  50DE               	movf	postinc2,w,c
  9922  00419A  5996               	subwfb	(dir_clear@n+1)& (0+255),w,b
  9923  00419C  B0D8               	btfsc	status,0,c
  9924  00419E  D01E               	goto	u16290
  9925                           
  9926                           ; BSR set to: 0
  9927  0041A0  C08D  F068         	movff	dir_clear@ibuf,disk_write@buff
  9928  0041A4  C08E  F069         	movff	dir_clear@ibuf+1,disk_write@buff+1
  9929  0041A8  5195               	movf	dir_clear@n& (0+255),w,b
  9930  0041AA  258F               	addwf	dir_clear@sect& (0+255),w,b
  9931  0041AC  6F6A               	movwf	disk_write@sector& (0+255),b
  9932  0041AE  5196               	movf	(dir_clear@n+1)& (0+255),w,b
  9933  0041B0  2190               	addwfc	(dir_clear@sect+1)& (0+255),w,b
  9934  0041B2  6F6B               	movwf	(disk_write@sector+1)& (0+255),b
  9935  0041B4  0E00               	movlw	0
  9936  0041B6  2191               	addwfc	(dir_clear@sect+2)& (0+255),w,b
  9937  0041B8  6F6C               	movwf	(disk_write@sector+2)& (0+255),b
  9938  0041BA  0E00               	movlw	0
  9939  0041BC  2192               	addwfc	(dir_clear@sect+3)& (0+255),w,b
  9940  0041BE  6F6D               	movwf	(disk_write@sector+3)& (0+255),b
  9941  0041C0  C093  F06E         	movff	dir_clear@szb,disk_write@count
  9942  0041C4  EE20 F001          	lfsr	2,1
  9943  0041C8  5185               	movf	dir_clear@fs& (0+255),w,b
  9944  0041CA  26D9               	addwf	fsr2l,f,c
  9945  0041CC  5186               	movf	(dir_clear@fs+1)& (0+255),w,b
  9946  0041CE  22DA               	addwfc	fsr2h,f,c
  9947  0041D0  50DF               	movf	indf2,w,c
  9948  0041D2  EC4B  F028         	call	_disk_write
  9949  0041D6  0900               	iorlw	0
  9950  0041D8  B4D8               	btfsc	status,2,c
  9951  0041DA  D7D1               	goto	l1170
  9952  0041DC                     u16290:
  9953                           
  9954                           ;ff.c: 1509: }
  9955                           ;ff.c: 1510: return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
  9956  0041DC  0100               	movlb	0	; () banked
  9957  0041DE  EE20 F009          	lfsr	2,9
  9958  0041E2  5185               	movf	dir_clear@fs& (0+255),w,b
  9959  0041E4  26D9               	addwf	fsr2l,f,c
  9960  0041E6  5186               	movf	(dir_clear@fs+1)& (0+255),w,b
  9961  0041E8  22DA               	addwfc	fsr2h,f,c
  9962  0041EA  5195               	movf	dir_clear@n& (0+255),w,b
  9963  0041EC  18DE               	xorwf	postinc2,w,c
  9964  0041EE  E104               	bnz	u16301
  9965  0041F0  5196               	movf	(dir_clear@n+1)& (0+255),w,b
  9966  0041F2  18DE               	xorwf	postinc2,w,c
  9967  0041F4  B4D8               	btfsc	status,2,c
  9968  0041F6  D002               	goto	u16300
  9969  0041F8                     u16301:
  9970  0041F8  0E01               	movlw	1
  9971  0041FA  0012               	return	
  9972  0041FC                     u16300:
  9973  0041FC  0E00               	movlw	0
  9974  0041FE  0012               	return	
  9975  004200                     __end_of_dir_clear:
  9976                           	opt stack 0
  9977                           tosu	equ	0xFFF
  9978                           tosh	equ	0xFFE
  9979                           tosl	equ	0xFFD
  9980                           pclath	equ	0xFFA
  9981                           tblptru	equ	0xFF8
  9982                           tblptrh	equ	0xFF7
  9983                           tblptrl	equ	0xFF6
  9984                           tablat	equ	0xFF5
  9985                           prodh	equ	0xFF4
  9986                           prodl	equ	0xFF3
  9987                           intcon	equ	0xFF2
  9988                           intcon2	equ	0xFF1
  9989                           intcon3	equ	0xFF0
  9990                           indf0	equ	0xFEF
  9991                           postinc0	equ	0xFEE
  9992                           fsr0h	equ	0xFEA
  9993                           fsr0l	equ	0xFE9
  9994                           wreg	equ	0xFE8
  9995                           indf1	equ	0xFE7
  9996                           postinc1	equ	0xFE6
  9997                           postdec1	equ	0xFE5
  9998                           fsr1h	equ	0xFE2
  9999                           fsr1l	equ	0xFE1
 10000                           indf2	equ	0xFDF
 10001                           postinc2	equ	0xFDE
 10002                           postdec2	equ	0xFDD
 10003                           plusw2	equ	0xFDB
 10004                           fsr2h	equ	0xFDA
 10005                           fsr2l	equ	0xFD9
 10006                           status	equ	0xFD8
 10007                           
 10008 ;; *************** function _clst2sect *****************
 10009 ;; Defined at:
 10010 ;;		line 962 in file "bibliotecas/ff.c"
 10011 ;; Parameters:    Size  Location     Type
 10012 ;;  fs              2   37[COMRAM] PTR struct .
 10013 ;;		 -> NULL(0), fs(559), 
 10014 ;;  clst            4   39[COMRAM] unsigned long 
 10015 ;; Auto vars:     Size  Location     Type
 10016 ;;		None
 10017 ;; Return value:  Size  Location     Type
 10018 ;;                  4   37[COMRAM] unsigned long 
 10019 ;; Registers used:
 10020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10021 ;; Tracked objects:
 10022 ;;		On entry : 0/0
 10023 ;;		On exit  : 0/0
 10024 ;;		Unchanged: 0/0
 10025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10026 ;;      Params:         6       0       0       0       0       0       0       0       0
 10027 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10028 ;;      Temps:          0       6       0       0       0       0       0       0       0
 10029 ;;      Totals:         6       6       0       0       0       0       0       0       0
 10030 ;;Total ram usage:       12 bytes
 10031 ;; Hardware stack levels used:    1
 10032 ;; Hardware stack levels required when called:    3
 10033 ;; This function calls:
 10034 ;;		___lmul
 10035 ;; This function is called by:
 10036 ;;		_dir_clear
 10037 ;;		_dir_sdi
 10038 ;;		_dir_next
 10039 ;;		_f_open
 10040 ;;		_f_write
 10041 ;;		_f_read
 10042 ;;		_f_lseek
 10043 ;;		_f_rename
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           	psect	text30
 10048  0047F4                     __ptext30:
 10049                           	opt stack 0
 10050  0047F4                     _clst2sect:
 10051                           	opt stack 24
 10052                           
 10053                           ;ff.c: 967: clst -= 2;
 10054                           
 10055                           ;incstack = 0
 10056  0047F4  0E02               	movlw	2
 10057  0047F6  5E28               	subwf	clst2sect@clst,f,c
 10058  0047F8  0E00               	movlw	0
 10059  0047FA  5A29               	subwfb	clst2sect@clst+1,f,c
 10060  0047FC  5A2A               	subwfb	clst2sect@clst+2,f,c
 10061  0047FE  5A2B               	subwfb	clst2sect@clst+3,f,c
 10062                           
 10063                           ;ff.c: 968: if (clst >= fs->n_fatent - 2) return 0;
 10064  004800  EE20 F013          	lfsr	2,19
 10065  004804  5026               	movf	clst2sect@fs,w,c
 10066  004806  26D9               	addwf	fsr2l,f,c
 10067  004808  5027               	movf	clst2sect@fs+1,w,c
 10068  00480A  22DA               	addwfc	fsr2h,f,c
 10069  00480C  0EFE               	movlw	254
 10070  00480E  24DE               	addwf	postinc2,w,c
 10071  004810  0100               	movlb	0	; () banked
 10072  004812  6F60               	movwf	??_clst2sect& (0+255),b
 10073  004814  0EFF               	movlw	255
 10074  004816  20DE               	addwfc	postinc2,w,c
 10075  004818  6F61               	movwf	(??_clst2sect+1)& (0+255),b
 10076  00481A  0EFF               	movlw	255
 10077  00481C  20DE               	addwfc	postinc2,w,c
 10078  00481E  6F62               	movwf	(??_clst2sect+2)& (0+255),b
 10079  004820  0EFF               	movlw	255
 10080  004822  20DE               	addwfc	postinc2,w,c
 10081  004824  6F63               	movwf	(??_clst2sect+3)& (0+255),b
 10082  004826  5160               	movf	??_clst2sect& (0+255),w,b
 10083  004828  5C28               	subwf	clst2sect@clst,w,c
 10084  00482A  5161               	movf	(??_clst2sect+1)& (0+255),w,b
 10085  00482C  5829               	subwfb	clst2sect@clst+1,w,c
 10086  00482E  5162               	movf	(??_clst2sect+2)& (0+255),w,b
 10087  004830  582A               	subwfb	clst2sect@clst+2,w,c
 10088  004832  5163               	movf	(??_clst2sect+3)& (0+255),w,b
 10089  004834  582B               	subwfb	clst2sect@clst+3,w,c
 10090  004836  A0D8               	btfss	status,0,c
 10091  004838  D009               	goto	l1061
 10092                           
 10093                           ; BSR set to: 0
 10094  00483A  0E00               	movlw	0
 10095  00483C  6E26               	movwf	?_clst2sect,c
 10096  00483E  0E00               	movlw	0
 10097  004840  6E27               	movwf	?_clst2sect+1,c
 10098  004842  0E00               	movlw	0
 10099  004844  6E28               	movwf	?_clst2sect+2,c
 10100  004846  0E00               	movlw	0
 10101  004848  6E29               	movwf	?_clst2sect+3,c
 10102                           
 10103                           ; BSR set to: 0
 10104  00484A  0012               	return	
 10105  00484C                     l1061:
 10106                           
 10107                           ; BSR set to: 0
 10108                           ;ff.c: 969: return fs->database + fs->csize * clst;
 10109                           
 10110                           ; BSR set to: 0
 10111  00484C  EE20 F027          	lfsr	2,39
 10112  004850  5026               	movf	clst2sect@fs,w,c
 10113  004852  26D9               	addwf	fsr2l,f,c
 10114  004854  5027               	movf	clst2sect@fs+1,w,c
 10115  004856  22DA               	addwfc	fsr2h,f,c
 10116  004858  CFDE F060          	movff	postinc2,??_clst2sect
 10117  00485C  CFDE F061          	movff	postinc2,??_clst2sect+1
 10118  004860  CFDE F062          	movff	postinc2,??_clst2sect+2
 10119  004864  CFDE F063          	movff	postinc2,??_clst2sect+3
 10120  004868  EE20 F009          	lfsr	2,9
 10121  00486C  5026               	movf	clst2sect@fs,w,c
 10122  00486E  26D9               	addwf	fsr2l,f,c
 10123  004870  5027               	movf	clst2sect@fs+1,w,c
 10124  004872  22DA               	addwfc	fsr2h,f,c
 10125  004874  CFDE F064          	movff	postinc2,??_clst2sect+4
 10126  004878  CFDD F065          	movff	postdec2,??_clst2sect+5
 10127  00487C  C064  F01A         	movff	??_clst2sect+4,___lmul@multiplier
 10128  004880  C065  F01B         	movff	??_clst2sect+5,___lmul@multiplier+1
 10129  004884  6A1C               	clrf	___lmul@multiplier+2,c
 10130  004886  6A1D               	clrf	___lmul@multiplier+3,c
 10131  004888  C028  F01E         	movff	clst2sect@clst,___lmul@multiplicand
 10132  00488C  C029  F01F         	movff	clst2sect@clst+1,___lmul@multiplicand+1
 10133  004890  C02A  F020         	movff	clst2sect@clst+2,___lmul@multiplicand+2
 10134  004894  C02B  F021         	movff	clst2sect@clst+3,___lmul@multiplicand+3
 10135  004898  ECBF  F02A         	call	___lmul	;wreg free
 10136  00489C  0100               	movlb	0	; () banked
 10137  00489E  5160               	movf	??_clst2sect& (0+255),w,b
 10138  0048A0  241A               	addwf	?___lmul,w,c
 10139  0048A2  6E26               	movwf	?_clst2sect,c
 10140  0048A4  5161               	movf	(??_clst2sect+1)& (0+255),w,b
 10141  0048A6  201B               	addwfc	?___lmul+1,w,c
 10142  0048A8  6E27               	movwf	?_clst2sect+1,c
 10143  0048AA  5162               	movf	(??_clst2sect+2)& (0+255),w,b
 10144  0048AC  201C               	addwfc	?___lmul+2,w,c
 10145  0048AE  6E28               	movwf	?_clst2sect+2,c
 10146  0048B0  5163               	movf	(??_clst2sect+3)& (0+255),w,b
 10147  0048B2  201D               	addwfc	?___lmul+3,w,c
 10148  0048B4  6E29               	movwf	?_clst2sect+3,c
 10149  0048B6  0012               	return	
 10150  0048B8                     __end_of_clst2sect:
 10151                           	opt stack 0
 10152                           tosu	equ	0xFFF
 10153                           tosh	equ	0xFFE
 10154                           tosl	equ	0xFFD
 10155                           pclath	equ	0xFFA
 10156                           tblptru	equ	0xFF8
 10157                           tblptrh	equ	0xFF7
 10158                           tblptrl	equ	0xFF6
 10159                           tablat	equ	0xFF5
 10160                           prodh	equ	0xFF4
 10161                           prodl	equ	0xFF3
 10162                           intcon	equ	0xFF2
 10163                           intcon2	equ	0xFF1
 10164                           intcon3	equ	0xFF0
 10165                           indf0	equ	0xFEF
 10166                           postinc0	equ	0xFEE
 10167                           fsr0h	equ	0xFEA
 10168                           fsr0l	equ	0xFE9
 10169                           wreg	equ	0xFE8
 10170                           indf1	equ	0xFE7
 10171                           postinc1	equ	0xFE6
 10172                           postdec1	equ	0xFE5
 10173                           fsr1h	equ	0xFE2
 10174                           fsr1l	equ	0xFE1
 10175                           indf2	equ	0xFDF
 10176                           postinc2	equ	0xFDE
 10177                           postdec2	equ	0xFDD
 10178                           plusw2	equ	0xFDB
 10179                           fsr2h	equ	0xFDA
 10180                           fsr2l	equ	0xFD9
 10181                           status	equ	0xFD8
 10182                           
 10183 ;; *************** function _create_chain *****************
 10184 ;; Defined at:
 10185 ;;		line 1347 in file "bibliotecas/ff.c"
 10186 ;; Parameters:    Size  Location     Type
 10187 ;;  obj             2   79[BANK0 ] PTR struct .
 10188 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@dj(40), f_unlink@sdj(40), 
 10189 ;;		 -> f_unlink@dj(40), f_stat@dj(40), f_open@dj(40), SDCard@fil(34), 
 10190 ;;  clst            4   81[BANK0 ] unsigned long 
 10191 ;; Auto vars:     Size  Location     Type
 10192 ;;  cs              4  104[BANK0 ] unsigned long 
 10193 ;;  ncl             4   98[BANK0 ] unsigned long 
 10194 ;;  scl             4   94[BANK0 ] unsigned long 
 10195 ;;  fs              2  102[BANK0 ] PTR struct .
 10196 ;;		 -> NULL(0), fs(559), 
 10197 ;;  res             1   93[BANK0 ] enum E79
 10198 ;; Return value:  Size  Location     Type
 10199 ;;                  4   79[BANK0 ] unsigned long 
 10200 ;; Registers used:
 10201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10202 ;; Tracked objects:
 10203 ;;		On entry : 0/0
 10204 ;;		On exit  : 0/0
 10205 ;;		Unchanged: 0/0
 10206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10207 ;;      Params:         0       6       0       0       0       0       0       0       0
 10208 ;;      Locals:         0      15       0       0       0       0       0       0       0
 10209 ;;      Temps:          0       8       0       0       0       0       0       0       0
 10210 ;;      Totals:         0      29       0       0       0       0       0       0       0
 10211 ;;Total ram usage:       29 bytes
 10212 ;; Hardware stack levels used:    1
 10213 ;; Hardware stack levels required when called:   10
 10214 ;; This function calls:
 10215 ;;		_get_fat
 10216 ;;		_put_fat
 10217 ;; This function is called by:
 10218 ;;		_dir_next
 10219 ;;		_f_write
 10220 ;;		_f_lseek
 10221 ;;		_f_mkdir
 10222 ;; This function uses a non-reentrant model
 10223 ;;
 10224                           
 10225                           	psect	text31
 10226  001884                     __ptext31:
 10227                           	opt stack 0
 10228  001884                     _create_chain:
 10229                           	opt stack 17
 10230                           
 10231                           ;ff.c: 1352: DWORD cs, ncl, scl;
 10232                           ;ff.c: 1353: FRESULT res;
 10233                           ;ff.c: 1354: FATFS *fs = obj->fs;
 10234                           
 10235                           ; BSR set to: 0
 10236                           ;incstack = 0
 10237  001884  C0AF  FFD9         	movff	create_chain@obj,fsr2l
 10238  001888  C0B0  FFDA         	movff	create_chain@obj+1,fsr2h
 10239  00188C  CFDE F0C6          	movff	postinc2,create_chain@fs
 10240  001890  CFDD F0C7          	movff	postdec2,create_chain@fs+1
 10241                           
 10242                           ;ff.c: 1357: if (clst == 0) {
 10243  001894  0100               	movlb	0	; () banked
 10244  001896  51B1               	movf	create_chain@clst& (0+255),w,b
 10245  001898  11B2               	iorwf	(create_chain@clst+1)& (0+255),w,b
 10246  00189A  11B3               	iorwf	(create_chain@clst+2)& (0+255),w,b
 10247  00189C  11B4               	iorwf	(create_chain@clst+3)& (0+255),w,b
 10248  00189E  A4D8               	btfss	status,2,c
 10249  0018A0  D02D               	goto	l1130
 10250                           
 10251                           ; BSR set to: 0
 10252                           ;ff.c: 1358: scl = fs->last_clst;
 10253  0018A2  EE20 F00B          	lfsr	2,11
 10254  0018A6  51C6               	movf	create_chain@fs& (0+255),w,b
 10255  0018A8  26D9               	addwf	fsr2l,f,c
 10256  0018AA  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10257  0018AC  22DA               	addwfc	fsr2h,f,c
 10258  0018AE  CFDE F0BE          	movff	postinc2,create_chain@scl
 10259  0018B2  CFDE F0BF          	movff	postinc2,create_chain@scl+1
 10260  0018B6  CFDE F0C0          	movff	postinc2,create_chain@scl+2
 10261  0018BA  CFDE F0C1          	movff	postinc2,create_chain@scl+3
 10262                           
 10263                           ; BSR set to: 0
 10264                           ;ff.c: 1359: if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 10265  0018BE  51BE               	movf	create_chain@scl& (0+255),w,b
 10266  0018C0  11BF               	iorwf	(create_chain@scl+1)& (0+255),w,b
 10267  0018C2  11C0               	iorwf	(create_chain@scl+2)& (0+255),w,b
 10268  0018C4  11C1               	iorwf	(create_chain@scl+3)& (0+255),w,b
 10269  0018C6  B4D8               	btfsc	status,2,c
 10270  0018C8  D010               	goto	u16030
 10271                           
 10272                           ; BSR set to: 0
 10273  0018CA  EE20 F013          	lfsr	2,19
 10274  0018CE  51C6               	movf	create_chain@fs& (0+255),w,b
 10275  0018D0  26D9               	addwf	fsr2l,f,c
 10276  0018D2  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10277  0018D4  22DA               	addwfc	fsr2h,f,c
 10278  0018D6  50DE               	movf	postinc2,w,c
 10279  0018D8  5DBE               	subwf	create_chain@scl& (0+255),w,b
 10280  0018DA  50DE               	movf	postinc2,w,c
 10281  0018DC  59BF               	subwfb	(create_chain@scl+1)& (0+255),w,b
 10282  0018DE  50DE               	movf	postinc2,w,c
 10283  0018E0  59C0               	subwfb	(create_chain@scl+2)& (0+255),w,b
 10284  0018E2  50DE               	movf	postinc2,w,c
 10285  0018E4  59C1               	subwfb	(create_chain@scl+3)& (0+255),w,b
 10286  0018E6  A0D8               	btfss	status,0,c
 10287  0018E8  D064               	goto	l1134
 10288  0018EA                     u16030:
 10289                           
 10290                           ; BSR set to: 0
 10291                           
 10292                           ; BSR set to: 0
 10293  0018EA  0E01               	movlw	1
 10294  0018EC  6FBE               	movwf	create_chain@scl& (0+255),b
 10295  0018EE  0E00               	movlw	0
 10296  0018F0  6FBF               	movwf	(create_chain@scl+1)& (0+255),b
 10297  0018F2  0E00               	movlw	0
 10298  0018F4  6FC0               	movwf	(create_chain@scl+2)& (0+255),b
 10299  0018F6  0E00               	movlw	0
 10300  0018F8  6FC1               	movwf	(create_chain@scl+3)& (0+255),b
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;ff.c: 1360: }
 10304  0018FA  D05B               	goto	l1134
 10305  0018FC                     l1130:
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;ff.c: 1361: else {
 10309                           ;ff.c: 1362: cs = get_fat(obj, clst);
 10310                           
 10311                           ; BSR set to: 0
 10312  0018FC  C0AF  F090         	movff	create_chain@obj,get_fat@obj
 10313  001900  C0B0  F091         	movff	create_chain@obj+1,get_fat@obj+1
 10314  001904  C0B1  F092         	movff	create_chain@clst,get_fat@clst
 10315  001908  C0B2  F093         	movff	create_chain@clst+1,get_fat@clst+1
 10316  00190C  C0B3  F094         	movff	create_chain@clst+2,get_fat@clst+2
 10317  001910  C0B4  F095         	movff	create_chain@clst+3,get_fat@clst+3
 10318  001914  ECE9  F014         	call	_get_fat	;wreg free
 10319  001918  C090  F0C8         	movff	?_get_fat,create_chain@cs
 10320  00191C  C091  F0C9         	movff	?_get_fat+1,create_chain@cs+1
 10321  001920  C092  F0CA         	movff	?_get_fat+2,create_chain@cs+2
 10322  001924  C093  F0CB         	movff	?_get_fat+3,create_chain@cs+3
 10323                           
 10324                           ;ff.c: 1363: if (cs < 2) return 1;
 10325  001928  0100               	movlb	0	; () banked
 10326  00192A  51CB               	movf	(create_chain@cs+3)& (0+255),w,b
 10327  00192C  11CA               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10328  00192E  11C9               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10329  001930  E10D               	bnz	l12750
 10330  001932  0E02               	movlw	2
 10331  001934  5DC8               	subwf	create_chain@cs& (0+255),w,b
 10332  001936  B0D8               	btfsc	status,0,c
 10333  001938  D009               	goto	l1135
 10334                           
 10335                           ; BSR set to: 0
 10336  00193A  0E01               	movlw	1
 10337  00193C  6FAF               	movwf	?_create_chain& (0+255),b
 10338  00193E  0E00               	movlw	0
 10339  001940  6FB0               	movwf	(?_create_chain+1)& (0+255),b
 10340  001942  0E00               	movlw	0
 10341  001944  6FB1               	movwf	(?_create_chain+2)& (0+255),b
 10342  001946  0E00               	movlw	0
 10343  001948  6FB2               	movwf	(?_create_chain+3)& (0+255),b
 10344                           
 10345                           ; BSR set to: 0
 10346  00194A  0012               	return	
 10347  00194C                     l1135:
 10348  00194C                     l12750:
 10349                           
 10350                           ; BSR set to: 0
 10351                           ;ff.c: 1364: if (cs == 0xFFFFFFFF) return cs;
 10352  00194C  29C8               	incf	create_chain@cs& (0+255),w,b
 10353  00194E  E110               	bnz	l12754
 10354  001950  29C9               	incf	(create_chain@cs+1)& (0+255),w,b
 10355  001952  E10E               	bnz	l12754
 10356  001954  29CA               	incf	(create_chain@cs+2)& (0+255),w,b
 10357  001956  E10C               	bnz	l12754
 10358  001958  29CB               	incf	(create_chain@cs+3)& (0+255),w,b
 10359  00195A  A4D8               	btfss	status,2,c
 10360  00195C  D009               	goto	l1137
 10361                           
 10362                           ; BSR set to: 0
 10363  00195E  C0C8  F0AF         	movff	create_chain@cs,?_create_chain
 10364  001962  C0C9  F0B0         	movff	create_chain@cs+1,?_create_chain+1
 10365  001966  C0CA  F0B1         	movff	create_chain@cs+2,?_create_chain+2
 10366  00196A  C0CB  F0B2         	movff	create_chain@cs+3,?_create_chain+3
 10367  00196E  0012               	return	
 10368  001970                     l1137:
 10369  001970                     l12754:
 10370                           
 10371                           ; BSR set to: 0
 10372                           ;ff.c: 1365: if (cs < fs->n_fatent) return cs;
 10373  001970  EE20 F013          	lfsr	2,19
 10374  001974  51C6               	movf	create_chain@fs& (0+255),w,b
 10375  001976  26D9               	addwf	fsr2l,f,c
 10376  001978  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10377  00197A  22DA               	addwfc	fsr2h,f,c
 10378  00197C  50DE               	movf	postinc2,w,c
 10379  00197E  5DC8               	subwf	create_chain@cs& (0+255),w,b
 10380  001980  50DE               	movf	postinc2,w,c
 10381  001982  59C9               	subwfb	(create_chain@cs+1)& (0+255),w,b
 10382  001984  50DE               	movf	postinc2,w,c
 10383  001986  59CA               	subwfb	(create_chain@cs+2)& (0+255),w,b
 10384  001988  50DE               	movf	postinc2,w,c
 10385  00198A  59CB               	subwfb	(create_chain@cs+3)& (0+255),w,b
 10386  00198C  B0D8               	btfsc	status,0,c
 10387  00198E  D009               	goto	l1138
 10388                           
 10389                           ; BSR set to: 0
 10390  001990  C0C8  F0AF         	movff	create_chain@cs,?_create_chain
 10391  001994  C0C9  F0B0         	movff	create_chain@cs+1,?_create_chain+1
 10392  001998  C0CA  F0B1         	movff	create_chain@cs+2,?_create_chain+2
 10393  00199C  C0CB  F0B2         	movff	create_chain@cs+3,?_create_chain+3
 10394  0019A0  0012               	return	
 10395  0019A2                     l1138:
 10396                           
 10397                           ; BSR set to: 0
 10398                           ;ff.c: 1366: scl = clst;
 10399  0019A2  C0B1  F0BE         	movff	create_chain@clst,create_chain@scl
 10400  0019A6  C0B2  F0BF         	movff	create_chain@clst+1,create_chain@scl+1
 10401  0019AA  C0B3  F0C0         	movff	create_chain@clst+2,create_chain@scl+2
 10402  0019AE  C0B4  F0C1         	movff	create_chain@clst+3,create_chain@scl+3
 10403  0019B2                     l1134:
 10404                           
 10405                           ; BSR set to: 0
 10406                           ;ff.c: 1367: }
 10407                           ;ff.c: 1368: if (fs->free_clst == 0) return 0;
 10408                           
 10409                           ; BSR set to: 0
 10410  0019B2  EE20 F00F          	lfsr	2,15
 10411  0019B6  51C6               	movf	create_chain@fs& (0+255),w,b
 10412  0019B8  26D9               	addwf	fsr2l,f,c
 10413  0019BA  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10414  0019BC  22DA               	addwfc	fsr2h,f,c
 10415  0019BE  50DE               	movf	postinc2,w,c
 10416  0019C0  10DE               	iorwf	postinc2,w,c
 10417  0019C2  10DE               	iorwf	postinc2,w,c
 10418  0019C4  10DE               	iorwf	postinc2,w,c
 10419  0019C6  A4D8               	btfss	status,2,c
 10420  0019C8  D009               	goto	l1139
 10421                           
 10422                           ; BSR set to: 0
 10423  0019CA  0E00               	movlw	0
 10424  0019CC  6FAF               	movwf	?_create_chain& (0+255),b
 10425  0019CE  0E00               	movlw	0
 10426  0019D0  6FB0               	movwf	(?_create_chain+1)& (0+255),b
 10427  0019D2  0E00               	movlw	0
 10428  0019D4  6FB1               	movwf	(?_create_chain+2)& (0+255),b
 10429  0019D6  0E00               	movlw	0
 10430  0019D8  6FB2               	movwf	(?_create_chain+3)& (0+255),b
 10431                           
 10432                           ; BSR set to: 0
 10433  0019DA  0012               	return	
 10434  0019DC                     l1139:
 10435                           
 10436                           ; BSR set to: 0
 10437                           ;ff.c: 1396: {
 10438                           ;ff.c: 1397: ncl = 0;
 10439                           
 10440                           ; BSR set to: 0
 10441  0019DC  0E00               	movlw	0
 10442  0019DE  6FC2               	movwf	create_chain@ncl& (0+255),b
 10443  0019E0  0E00               	movlw	0
 10444  0019E2  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 10445  0019E4  0E00               	movlw	0
 10446  0019E6  6FC4               	movwf	(create_chain@ncl+2)& (0+255),b
 10447  0019E8  0E00               	movlw	0
 10448  0019EA  6FC5               	movwf	(create_chain@ncl+3)& (0+255),b
 10449                           
 10450                           ; BSR set to: 0
 10451                           ;ff.c: 1398: if (scl == clst) {
 10452  0019EC  51B1               	movf	create_chain@clst& (0+255),w,b
 10453  0019EE  19BE               	xorwf	create_chain@scl& (0+255),w,b
 10454  0019F0  E109               	bnz	u16081
 10455  0019F2  51B2               	movf	(create_chain@clst+1)& (0+255),w,b
 10456  0019F4  19BF               	xorwf	(create_chain@scl+1)& (0+255),w,b
 10457  0019F6  E106               	bnz	u16081
 10458  0019F8  51B3               	movf	(create_chain@clst+2)& (0+255),w,b
 10459  0019FA  19C0               	xorwf	(create_chain@scl+2)& (0+255),w,b
 10460  0019FC  E103               	bnz	u16081
 10461  0019FE  51B4               	movf	(create_chain@clst+3)& (0+255),w,b
 10462  001A00  19C1               	xorwf	(create_chain@scl+3)& (0+255),w,b
 10463  001A02  A4D8               	btfss	status,2,c
 10464  001A04                     u16081:
 10465  001A04  D08F               	goto	l1145
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;ff.c: 1399: ncl = scl + 1;
 10469  001A06  0E01               	movlw	1
 10470  001A08  25BE               	addwf	create_chain@scl& (0+255),w,b
 10471  001A0A  6FC2               	movwf	create_chain@ncl& (0+255),b
 10472  001A0C  0E00               	movlw	0
 10473  001A0E  21BF               	addwfc	(create_chain@scl+1)& (0+255),w,b
 10474  001A10  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 10475  001A12  0E00               	movlw	0
 10476  001A14  21C0               	addwfc	(create_chain@scl+2)& (0+255),w,b
 10477  001A16  6FC4               	movwf	(create_chain@ncl+2)& (0+255),b
 10478  001A18  0E00               	movlw	0
 10479  001A1A  21C1               	addwfc	(create_chain@scl+3)& (0+255),w,b
 10480  001A1C  6FC5               	movwf	(create_chain@ncl+3)& (0+255),b
 10481                           
 10482                           ; BSR set to: 0
 10483                           ;ff.c: 1400: if (ncl >= fs->n_fatent) ncl = 2;
 10484  001A1E  EE20 F013          	lfsr	2,19
 10485  001A22  51C6               	movf	create_chain@fs& (0+255),w,b
 10486  001A24  26D9               	addwf	fsr2l,f,c
 10487  001A26  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10488  001A28  22DA               	addwfc	fsr2h,f,c
 10489  001A2A  50DE               	movf	postinc2,w,c
 10490  001A2C  5DC2               	subwf	create_chain@ncl& (0+255),w,b
 10491  001A2E  50DE               	movf	postinc2,w,c
 10492  001A30  59C3               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 10493  001A32  50DE               	movf	postinc2,w,c
 10494  001A34  59C4               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 10495  001A36  50DE               	movf	postinc2,w,c
 10496  001A38  59C5               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 10497  001A3A  A0D8               	btfss	status,0,c
 10498  001A3C  D008               	goto	l1141
 10499                           
 10500                           ; BSR set to: 0
 10501  001A3E  0E02               	movlw	2
 10502  001A40  6FC2               	movwf	create_chain@ncl& (0+255),b
 10503  001A42  0E00               	movlw	0
 10504  001A44  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 10505  001A46  0E00               	movlw	0
 10506  001A48  6FC4               	movwf	(create_chain@ncl+2)& (0+255),b
 10507  001A4A  0E00               	movlw	0
 10508  001A4C  6FC5               	movwf	(create_chain@ncl+3)& (0+255),b
 10509  001A4E                     l1141:
 10510                           
 10511                           ; BSR set to: 0
 10512                           ;ff.c: 1401: cs = get_fat(obj, ncl);
 10513                           
 10514                           ; BSR set to: 0
 10515  001A4E  C0AF  F090         	movff	create_chain@obj,get_fat@obj
 10516  001A52  C0B0  F091         	movff	create_chain@obj+1,get_fat@obj+1
 10517  001A56  C0C2  F092         	movff	create_chain@ncl,get_fat@clst
 10518  001A5A  C0C3  F093         	movff	create_chain@ncl+1,get_fat@clst+1
 10519  001A5E  C0C4  F094         	movff	create_chain@ncl+2,get_fat@clst+2
 10520  001A62  C0C5  F095         	movff	create_chain@ncl+3,get_fat@clst+3
 10521  001A66  ECE9  F014         	call	_get_fat	;wreg free
 10522  001A6A  C090  F0C8         	movff	?_get_fat,create_chain@cs
 10523  001A6E  C091  F0C9         	movff	?_get_fat+1,create_chain@cs+1
 10524  001A72  C092  F0CA         	movff	?_get_fat+2,create_chain@cs+2
 10525  001A76  C093  F0CB         	movff	?_get_fat+3,create_chain@cs+3
 10526                           
 10527                           ;ff.c: 1402: if (cs == 1 || cs == 0xFFFFFFFF) return cs;
 10528  001A7A  0100               	movlb	0	; () banked
 10529  001A7C  05C8               	decf	create_chain@cs& (0+255),w,b
 10530  001A7E  11C9               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10531  001A80  11CA               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10532  001A82  11CB               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10533  001A84  B4D8               	btfsc	status,2,c
 10534  001A86  D009               	goto	u16110
 10535                           
 10536                           ; BSR set to: 0
 10537  001A88  29C8               	incf	create_chain@cs& (0+255),w,b
 10538  001A8A  E110               	bnz	l12780
 10539  001A8C  29C9               	incf	(create_chain@cs+1)& (0+255),w,b
 10540  001A8E  E10E               	bnz	l12780
 10541  001A90  29CA               	incf	(create_chain@cs+2)& (0+255),w,b
 10542  001A92  E10C               	bnz	l12780
 10543  001A94  29CB               	incf	(create_chain@cs+3)& (0+255),w,b
 10544  001A96  A4D8               	btfss	status,2,c
 10545  001A98  D009               	goto	l1142
 10546  001A9A                     u16110:
 10547                           
 10548                           ; BSR set to: 0
 10549  001A9A  C0C8  F0AF         	movff	create_chain@cs,?_create_chain
 10550  001A9E  C0C9  F0B0         	movff	create_chain@cs+1,?_create_chain+1
 10551  001AA2  C0CA  F0B1         	movff	create_chain@cs+2,?_create_chain+2
 10552  001AA6  C0CB  F0B2         	movff	create_chain@cs+3,?_create_chain+3
 10553  001AAA  0012               	return	
 10554  001AAC                     l1142:
 10555  001AAC                     l12780:
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;ff.c: 1403: if (cs != 0) {
 10559  001AAC  51C8               	movf	create_chain@cs& (0+255),w,b
 10560  001AAE  11C9               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10561  001AB0  11CA               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10562  001AB2  11CB               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10563  001AB4  B4D8               	btfsc	status,2,c
 10564  001AB6  D036               	goto	l1145
 10565                           
 10566                           ; BSR set to: 0
 10567                           ;ff.c: 1404: cs = fs->last_clst;
 10568  001AB8  EE20 F00B          	lfsr	2,11
 10569  001ABC  51C6               	movf	create_chain@fs& (0+255),w,b
 10570  001ABE  26D9               	addwf	fsr2l,f,c
 10571  001AC0  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10572  001AC2  22DA               	addwfc	fsr2h,f,c
 10573  001AC4  CFDE F0C8          	movff	postinc2,create_chain@cs
 10574  001AC8  CFDE F0C9          	movff	postinc2,create_chain@cs+1
 10575  001ACC  CFDE F0CA          	movff	postinc2,create_chain@cs+2
 10576  001AD0  CFDE F0CB          	movff	postinc2,create_chain@cs+3
 10577                           
 10578                           ; BSR set to: 0
 10579                           ;ff.c: 1405: if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 10580  001AD4  51CB               	movf	(create_chain@cs+3)& (0+255),w,b
 10581  001AD6  11CA               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10582  001AD8  11C9               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10583  001ADA  E104               	bnz	u16130
 10584  001ADC  0E02               	movlw	2
 10585  001ADE  5DC8               	subwf	create_chain@cs& (0+255),w,b
 10586  001AE0  A0D8               	btfss	status,0,c
 10587  001AE2  D018               	goto	l1146
 10588  001AE4                     u16130:
 10589                           
 10590                           ; BSR set to: 0
 10591  001AE4  EE20 F013          	lfsr	2,19
 10592  001AE8  51C6               	movf	create_chain@fs& (0+255),w,b
 10593  001AEA  26D9               	addwf	fsr2l,f,c
 10594  001AEC  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10595  001AEE  22DA               	addwfc	fsr2h,f,c
 10596  001AF0  50DE               	movf	postinc2,w,c
 10597  001AF2  5DC8               	subwf	create_chain@cs& (0+255),w,b
 10598  001AF4  50DE               	movf	postinc2,w,c
 10599  001AF6  59C9               	subwfb	(create_chain@cs+1)& (0+255),w,b
 10600  001AF8  50DE               	movf	postinc2,w,c
 10601  001AFA  59CA               	subwfb	(create_chain@cs+2)& (0+255),w,b
 10602  001AFC  50DE               	movf	postinc2,w,c
 10603  001AFE  59CB               	subwfb	(create_chain@cs+3)& (0+255),w,b
 10604  001B00  B0D8               	btfsc	status,0,c
 10605  001B02  D008               	goto	l1146
 10606                           
 10607                           ; BSR set to: 0
 10608  001B04  C0C8  F0BE         	movff	create_chain@cs,create_chain@scl
 10609  001B08  C0C9  F0BF         	movff	create_chain@cs+1,create_chain@scl+1
 10610  001B0C  C0CA  F0C0         	movff	create_chain@cs+2,create_chain@scl+2
 10611  001B10  C0CB  F0C1         	movff	create_chain@cs+3,create_chain@scl+3
 10612  001B14                     l1146:
 10613                           
 10614                           ; BSR set to: 0
 10615                           ;ff.c: 1406: ncl = 0;
 10616                           
 10617                           ; BSR set to: 0
 10618  001B14  0E00               	movlw	0
 10619  001B16  6FC2               	movwf	create_chain@ncl& (0+255),b
 10620  001B18  0E00               	movlw	0
 10621  001B1A  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 10622  001B1C  0E00               	movlw	0
 10623  001B1E  6FC4               	movwf	(create_chain@ncl+2)& (0+255),b
 10624  001B20  0E00               	movlw	0
 10625  001B22  6FC5               	movwf	(create_chain@ncl+3)& (0+255),b
 10626  001B24                     l1145:
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;ff.c: 1407: }
 10630                           ;ff.c: 1408: }
 10631                           ;ff.c: 1409: if (ncl == 0) {
 10632                           
 10633                           ; BSR set to: 0
 10634                           
 10635                           ; BSR set to: 0
 10636  001B24  51C2               	movf	create_chain@ncl& (0+255),w,b
 10637  001B26  11C3               	iorwf	(create_chain@ncl+1)& (0+255),w,b
 10638  001B28  11C4               	iorwf	(create_chain@ncl+2)& (0+255),w,b
 10639  001B2A  11C5               	iorwf	(create_chain@ncl+3)& (0+255),w,b
 10640  001B2C  A4D8               	btfss	status,2,c
 10641  001B2E  D084               	goto	l1152
 10642                           
 10643                           ; BSR set to: 0
 10644                           ;ff.c: 1410: ncl = scl;
 10645  001B30  C0BE  F0C2         	movff	create_chain@scl,create_chain@ncl
 10646  001B34  C0BF  F0C3         	movff	create_chain@scl+1,create_chain@ncl+1
 10647  001B38  C0C0  F0C4         	movff	create_chain@scl+2,create_chain@ncl+2
 10648  001B3C  C0C1  F0C5         	movff	create_chain@scl+3,create_chain@ncl+3
 10649  001B40                     l12796:
 10650                           
 10651                           ; BSR set to: 0
 10652                           ;ff.c: 1412: ncl++;
 10653  001B40  0E01               	movlw	1
 10654  001B42  27C2               	addwf	create_chain@ncl& (0+255),f,b
 10655  001B44  0E00               	movlw	0
 10656  001B46  23C3               	addwfc	(create_chain@ncl+1)& (0+255),f,b
 10657  001B48  23C4               	addwfc	(create_chain@ncl+2)& (0+255),f,b
 10658  001B4A  23C5               	addwfc	(create_chain@ncl+3)& (0+255),f,b
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;ff.c: 1413: if (ncl >= fs->n_fatent) {
 10662  001B4C  EE20 F013          	lfsr	2,19
 10663  001B50  51C6               	movf	create_chain@fs& (0+255),w,b
 10664  001B52  26D9               	addwf	fsr2l,f,c
 10665  001B54  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10666  001B56  22DA               	addwfc	fsr2h,f,c
 10667  001B58  50DE               	movf	postinc2,w,c
 10668  001B5A  5DC2               	subwf	create_chain@ncl& (0+255),w,b
 10669  001B5C  50DE               	movf	postinc2,w,c
 10670  001B5E  59C3               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 10671  001B60  50DE               	movf	postinc2,w,c
 10672  001B62  59C4               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 10673  001B64  50DE               	movf	postinc2,w,c
 10674  001B66  59C5               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 10675  001B68  A0D8               	btfss	status,0,c
 10676  001B6A  D01B               	goto	l1150
 10677                           
 10678                           ; BSR set to: 0
 10679                           ;ff.c: 1414: ncl = 2;
 10680  001B6C  0E02               	movlw	2
 10681  001B6E  6FC2               	movwf	create_chain@ncl& (0+255),b
 10682  001B70  0E00               	movlw	0
 10683  001B72  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 10684  001B74  0E00               	movlw	0
 10685  001B76  6FC4               	movwf	(create_chain@ncl+2)& (0+255),b
 10686  001B78  0E00               	movlw	0
 10687  001B7A  6FC5               	movwf	(create_chain@ncl+3)& (0+255),b
 10688                           
 10689                           ; BSR set to: 0
 10690                           ;ff.c: 1415: if (ncl > scl) return 0;
 10691  001B7C  51C2               	movf	create_chain@ncl& (0+255),w,b
 10692  001B7E  5DBE               	subwf	create_chain@scl& (0+255),w,b
 10693  001B80  51C3               	movf	(create_chain@ncl+1)& (0+255),w,b
 10694  001B82  59BF               	subwfb	(create_chain@scl+1)& (0+255),w,b
 10695  001B84  51C4               	movf	(create_chain@ncl+2)& (0+255),w,b
 10696  001B86  59C0               	subwfb	(create_chain@scl+2)& (0+255),w,b
 10697  001B88  51C5               	movf	(create_chain@ncl+3)& (0+255),w,b
 10698  001B8A  59C1               	subwfb	(create_chain@scl+3)& (0+255),w,b
 10699  001B8C  B0D8               	btfsc	status,0,c
 10700  001B8E  D009               	goto	l1150
 10701                           
 10702                           ; BSR set to: 0
 10703  001B90  0E00               	movlw	0
 10704  001B92  6FAF               	movwf	?_create_chain& (0+255),b
 10705  001B94  0E00               	movlw	0
 10706  001B96  6FB0               	movwf	(?_create_chain+1)& (0+255),b
 10707  001B98  0E00               	movlw	0
 10708  001B9A  6FB1               	movwf	(?_create_chain+2)& (0+255),b
 10709  001B9C  0E00               	movlw	0
 10710  001B9E  6FB2               	movwf	(?_create_chain+3)& (0+255),b
 10711                           
 10712                           ; BSR set to: 0
 10713  001BA0  0012               	return	
 10714  001BA2                     l1150:
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;ff.c: 1416: }
 10718                           ;ff.c: 1417: cs = get_fat(obj, ncl);
 10719                           
 10720                           ; BSR set to: 0
 10721                           
 10722                           ; BSR set to: 0
 10723  001BA2  C0AF  F090         	movff	create_chain@obj,get_fat@obj
 10724  001BA6  C0B0  F091         	movff	create_chain@obj+1,get_fat@obj+1
 10725  001BAA  C0C2  F092         	movff	create_chain@ncl,get_fat@clst
 10726  001BAE  C0C3  F093         	movff	create_chain@ncl+1,get_fat@clst+1
 10727  001BB2  C0C4  F094         	movff	create_chain@ncl+2,get_fat@clst+2
 10728  001BB6  C0C5  F095         	movff	create_chain@ncl+3,get_fat@clst+3
 10729  001BBA  ECE9  F014         	call	_get_fat	;wreg free
 10730  001BBE  C090  F0C8         	movff	?_get_fat,create_chain@cs
 10731  001BC2  C091  F0C9         	movff	?_get_fat+1,create_chain@cs+1
 10732  001BC6  C092  F0CA         	movff	?_get_fat+2,create_chain@cs+2
 10733  001BCA  C093  F0CB         	movff	?_get_fat+3,create_chain@cs+3
 10734                           
 10735                           ;ff.c: 1418: if (cs == 0) break;
 10736  001BCE  0100               	movlb	0	; () banked
 10737  001BD0  51C8               	movf	create_chain@cs& (0+255),w,b
 10738  001BD2  11C9               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10739  001BD4  11CA               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10740  001BD6  11CB               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10741  001BD8  B4D8               	btfsc	status,2,c
 10742  001BDA  D02E               	goto	l1152
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;ff.c: 1419: if (cs == 1 || cs == 0xFFFFFFFF) return cs;
 10746                           
 10747                           ; BSR set to: 0
 10748                           
 10749                           ; BSR set to: 0
 10750  001BDC  05C8               	decf	create_chain@cs& (0+255),w,b
 10751  001BDE  11C9               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10752  001BE0  11CA               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10753  001BE2  11CB               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10754  001BE4  B4D8               	btfsc	status,2,c
 10755  001BE6  D009               	goto	u16200
 10756                           
 10757                           ; BSR set to: 0
 10758  001BE8  29C8               	incf	create_chain@cs& (0+255),w,b
 10759  001BEA  E110               	bnz	l12818
 10760  001BEC  29C9               	incf	(create_chain@cs+1)& (0+255),w,b
 10761  001BEE  E10E               	bnz	l12818
 10762  001BF0  29CA               	incf	(create_chain@cs+2)& (0+255),w,b
 10763  001BF2  E10C               	bnz	l12818
 10764  001BF4  29CB               	incf	(create_chain@cs+3)& (0+255),w,b
 10765  001BF6  A4D8               	btfss	status,2,c
 10766  001BF8  D009               	goto	l1153
 10767  001BFA                     u16200:
 10768                           
 10769                           ; BSR set to: 0
 10770  001BFA  C0C8  F0AF         	movff	create_chain@cs,?_create_chain
 10771  001BFE  C0C9  F0B0         	movff	create_chain@cs+1,?_create_chain+1
 10772  001C02  C0CA  F0B1         	movff	create_chain@cs+2,?_create_chain+2
 10773  001C06  C0CB  F0B2         	movff	create_chain@cs+3,?_create_chain+3
 10774  001C0A  0012               	return	
 10775  001C0C                     l1153:
 10776  001C0C                     l12818:
 10777                           
 10778                           ; BSR set to: 0
 10779                           ;ff.c: 1420: if (ncl == scl) return 0;
 10780  001C0C  51BE               	movf	create_chain@scl& (0+255),w,b
 10781  001C0E  19C2               	xorwf	create_chain@ncl& (0+255),w,b
 10782  001C10  E197               	bnz	l12796
 10783  001C12  51BF               	movf	(create_chain@scl+1)& (0+255),w,b
 10784  001C14  19C3               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 10785  001C16  E194               	bnz	l12796
 10786  001C18  51C0               	movf	(create_chain@scl+2)& (0+255),w,b
 10787  001C1A  19C4               	xorwf	(create_chain@ncl+2)& (0+255),w,b
 10788  001C1C  E191               	bnz	l12796
 10789  001C1E  51C1               	movf	(create_chain@scl+3)& (0+255),w,b
 10790  001C20  19C5               	xorwf	(create_chain@ncl+3)& (0+255),w,b
 10791  001C22  A4D8               	btfss	status,2,c
 10792  001C24  D78D               	goto	l1148
 10793                           
 10794                           ; BSR set to: 0
 10795  001C26  0E00               	movlw	0
 10796  001C28  6FAF               	movwf	?_create_chain& (0+255),b
 10797  001C2A  0E00               	movlw	0
 10798  001C2C  6FB0               	movwf	(?_create_chain+1)& (0+255),b
 10799  001C2E  0E00               	movlw	0
 10800  001C30  6FB1               	movwf	(?_create_chain+2)& (0+255),b
 10801  001C32  0E00               	movlw	0
 10802  001C34  6FB2               	movwf	(?_create_chain+3)& (0+255),b
 10803                           
 10804                           ; BSR set to: 0
 10805  001C36  0012               	return	
 10806  001C38                     l1152:
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;ff.c: 1422: }
 10810                           ;ff.c: 1423: res = put_fat(fs, ncl, 0xFFFFFFFF);
 10811                           
 10812                           ; BSR set to: 0
 10813                           
 10814                           ; BSR set to: 0
 10815  001C38  C0C6  F090         	movff	create_chain@fs,put_fat@fs
 10816  001C3C  C0C7  F091         	movff	create_chain@fs+1,put_fat@fs+1
 10817  001C40  C0C2  F092         	movff	create_chain@ncl,put_fat@clst
 10818  001C44  C0C3  F093         	movff	create_chain@ncl+1,put_fat@clst+1
 10819  001C48  C0C4  F094         	movff	create_chain@ncl+2,put_fat@clst+2
 10820  001C4C  C0C5  F095         	movff	create_chain@ncl+3,put_fat@clst+3
 10821  001C50  0EFF               	movlw	255
 10822  001C52  6F96               	movwf	put_fat@val& (0+255),b
 10823  001C54  0EFF               	movlw	255
 10824  001C56  6F97               	movwf	(put_fat@val+1)& (0+255),b
 10825  001C58  0EFF               	movlw	255
 10826  001C5A  6F98               	movwf	(put_fat@val+2)& (0+255),b
 10827  001C5C  0EFF               	movlw	255
 10828  001C5E  6F99               	movwf	(put_fat@val+3)& (0+255),b
 10829  001C60  ECEB  F010         	call	_put_fat	;wreg free
 10830  001C64  0100               	movlb	0	; () banked
 10831  001C66  6FBD               	movwf	create_chain@res& (0+255),b
 10832                           
 10833                           ; BSR set to: 0
 10834                           ;ff.c: 1424: if (res == FR_OK && clst != 0) {
 10835  001C68  51BD               	movf	create_chain@res& (0+255),w,b
 10836  001C6A  A4D8               	btfss	status,2,c
 10837  001C6C  D01E               	goto	l1157
 10838                           
 10839                           ; BSR set to: 0
 10840  001C6E  51B1               	movf	create_chain@clst& (0+255),w,b
 10841  001C70  11B2               	iorwf	(create_chain@clst+1)& (0+255),w,b
 10842  001C72  11B3               	iorwf	(create_chain@clst+2)& (0+255),w,b
 10843  001C74  11B4               	iorwf	(create_chain@clst+3)& (0+255),w,b
 10844  001C76  B4D8               	btfsc	status,2,c
 10845  001C78  D018               	goto	l1157
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;ff.c: 1425: res = put_fat(fs, clst, ncl);
 10849  001C7A  C0C6  F090         	movff	create_chain@fs,put_fat@fs
 10850  001C7E  C0C7  F091         	movff	create_chain@fs+1,put_fat@fs+1
 10851  001C82  C0B1  F092         	movff	create_chain@clst,put_fat@clst
 10852  001C86  C0B2  F093         	movff	create_chain@clst+1,put_fat@clst+1
 10853  001C8A  C0B3  F094         	movff	create_chain@clst+2,put_fat@clst+2
 10854  001C8E  C0B4  F095         	movff	create_chain@clst+3,put_fat@clst+3
 10855  001C92  C0C2  F096         	movff	create_chain@ncl,put_fat@val
 10856  001C96  C0C3  F097         	movff	create_chain@ncl+1,put_fat@val+1
 10857  001C9A  C0C4  F098         	movff	create_chain@ncl+2,put_fat@val+2
 10858  001C9E  C0C5  F099         	movff	create_chain@ncl+3,put_fat@val+3
 10859  001CA2  ECEB  F010         	call	_put_fat	;wreg free
 10860  001CA6  0100               	movlb	0	; () banked
 10861  001CA8  6FBD               	movwf	create_chain@res& (0+255),b
 10862  001CAA                     l1157:
 10863                           
 10864                           ; BSR set to: 0
 10865                           ;ff.c: 1426: }
 10866                           ;ff.c: 1427: }
 10867                           ;ff.c: 1429: if (res == FR_OK) {
 10868                           
 10869                           ; BSR set to: 0
 10870  001CAA  51BD               	movf	create_chain@res& (0+255),w,b
 10871  001CAC  A4D8               	btfss	status,2,c
 10872  001CAE  D044               	goto	l1158
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;ff.c: 1430: fs->last_clst = ncl;
 10876  001CB0  EE20 F00B          	lfsr	2,11
 10877  001CB4  51C6               	movf	create_chain@fs& (0+255),w,b
 10878  001CB6  26D9               	addwf	fsr2l,f,c
 10879  001CB8  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10880  001CBA  22DA               	addwfc	fsr2h,f,c
 10881  001CBC  C0C2  FFDE         	movff	create_chain@ncl,postinc2
 10882  001CC0  C0C3  FFDE         	movff	create_chain@ncl+1,postinc2
 10883  001CC4  C0C4  FFDE         	movff	create_chain@ncl+2,postinc2
 10884  001CC8  C0C5  FFDE         	movff	create_chain@ncl+3,postinc2
 10885                           
 10886                           ; BSR set to: 0
 10887                           ;ff.c: 1431: if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 10888  001CCC  EE20 F00F          	lfsr	2,15
 10889  001CD0  51C6               	movf	create_chain@fs& (0+255),w,b
 10890  001CD2  26D9               	addwf	fsr2l,f,c
 10891  001CD4  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10892  001CD6  22DA               	addwfc	fsr2h,f,c
 10893  001CD8  EE10 F013          	lfsr	1,19
 10894  001CDC  51C6               	movf	create_chain@fs& (0+255),w,b
 10895  001CDE  26E1               	addwf	fsr1l,f,c
 10896  001CE0  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10897  001CE2  22E2               	addwfc	fsr1h,f,c
 10898  001CE4  0EFE               	movlw	254
 10899  001CE6  24E6               	addwf	postinc1,w,c
 10900  001CE8  6FB9               	movwf	(??_create_chain+4)& (0+255),b
 10901  001CEA  0EFF               	movlw	255
 10902  001CEC  20E6               	addwfc	postinc1,w,c
 10903  001CEE  6FBA               	movwf	(??_create_chain+5)& (0+255),b
 10904  001CF0  0EFF               	movlw	255
 10905  001CF2  20E6               	addwfc	postinc1,w,c
 10906  001CF4  6FBB               	movwf	(??_create_chain+6)& (0+255),b
 10907  001CF6  0EFF               	movlw	255
 10908  001CF8  20E6               	addwfc	postinc1,w,c
 10909  001CFA  6FBC               	movwf	(??_create_chain+7)& (0+255),b
 10910  001CFC  50DE               	movf	postinc2,w,c
 10911  001CFE  5DB9               	subwf	(??_create_chain+4)& (0+255),w,b
 10912  001D00  50DE               	movf	postinc2,w,c
 10913  001D02  59BA               	subwfb	(??_create_chain+5)& (0+255),w,b
 10914  001D04  50DE               	movf	postinc2,w,c
 10915  001D06  59BB               	subwfb	(??_create_chain+6)& (0+255),w,b
 10916  001D08  50DE               	movf	postinc2,w,c
 10917  001D0A  59BC               	subwfb	(??_create_chain+7)& (0+255),w,b
 10918  001D0C  A0D8               	btfss	status,0,c
 10919  001D0E  D00B               	goto	l1159
 10920                           
 10921                           ; BSR set to: 0
 10922  001D10  EE20 F00F          	lfsr	2,15
 10923  001D14  51C6               	movf	create_chain@fs& (0+255),w,b
 10924  001D16  26D9               	addwf	fsr2l,f,c
 10925  001D18  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10926  001D1A  22DA               	addwfc	fsr2h,f,c
 10927  001D1C  06DE               	decf	postinc2,f,c
 10928  001D1E  0E00               	movlw	0
 10929  001D20  5ADE               	subwfb	postinc2,f,c
 10930  001D22  5ADE               	subwfb	postinc2,f,c
 10931  001D24  5ADE               	subwfb	postinc2,f,c
 10932  001D26                     l1159:
 10933                           
 10934                           ; BSR set to: 0
 10935                           ;ff.c: 1432: fs->fsi_flag |= 1;
 10936  001D26  EE20 F004          	lfsr	2,4
 10937  001D2A  51C6               	movf	create_chain@fs& (0+255),w,b
 10938  001D2C  26D9               	addwf	fsr2l,f,c
 10939  001D2E  51C7               	movf	(create_chain@fs+1)& (0+255),w,b
 10940  001D30  22DA               	addwfc	fsr2h,f,c
 10941  001D32  0E00               	movlw	0
 10942  001D34  80DB               	bsf	plusw2,0,c
 10943                           
 10944                           ;ff.c: 1433: } else {
 10945  001D36  D010               	goto	l1164
 10946  001D38                     l1158:
 10947                           
 10948                           ; BSR set to: 0
 10949                           ;ff.c: 1434: ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 10950                           
 10951                           ; BSR set to: 0
 10952  001D38  05BD               	decf	create_chain@res& (0+255),w,b
 10953  001D3A  B4D8               	btfsc	status,2,c
 10954  001D3C  D009               	goto	l1162
 10955                           
 10956                           ; BSR set to: 0
 10957  001D3E  0E01               	movlw	1
 10958  001D40  6FC2               	movwf	create_chain@ncl& (0+255),b
 10959  001D42  0E00               	movlw	0
 10960  001D44  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 10961  001D46  0E00               	movlw	0
 10962  001D48  6FC4               	movwf	(create_chain@ncl+2)& (0+255),b
 10963  001D4A  0E00               	movlw	0
 10964  001D4C  6FC5               	movwf	(create_chain@ncl+3)& (0+255),b
 10965  001D4E  D004               	goto	l1164
 10966  001D50                     l1162:
 10967                           
 10968                           ; BSR set to: 0
 10969  001D50  69C2               	setf	create_chain@ncl& (0+255),b
 10970  001D52  69C3               	setf	(create_chain@ncl+1)& (0+255),b
 10971  001D54  69C4               	setf	(create_chain@ncl+2)& (0+255),b
 10972  001D56  69C5               	setf	(create_chain@ncl+3)& (0+255),b
 10973  001D58                     l1164:
 10974                           
 10975                           ; BSR set to: 0
 10976                           ;ff.c: 1435: }
 10977                           ;ff.c: 1437: return ncl;
 10978                           
 10979                           ; BSR set to: 0
 10980  001D58  C0C2  F0AF         	movff	create_chain@ncl,?_create_chain
 10981  001D5C  C0C3  F0B0         	movff	create_chain@ncl+1,?_create_chain+1
 10982  001D60  C0C4  F0B1         	movff	create_chain@ncl+2,?_create_chain+2
 10983  001D64  C0C5  F0B2         	movff	create_chain@ncl+3,?_create_chain+3
 10984                           
 10985                           ; BSR set to: 0
 10986  001D68  0012               	return		;funcret
 10987  001D6A                     __end_of_create_chain:
 10988                           	opt stack 0
 10989                           tosu	equ	0xFFF
 10990                           tosh	equ	0xFFE
 10991                           tosl	equ	0xFFD
 10992                           pclath	equ	0xFFA
 10993                           tblptru	equ	0xFF8
 10994                           tblptrh	equ	0xFF7
 10995                           tblptrl	equ	0xFF6
 10996                           tablat	equ	0xFF5
 10997                           prodh	equ	0xFF4
 10998                           prodl	equ	0xFF3
 10999                           intcon	equ	0xFF2
 11000                           intcon2	equ	0xFF1
 11001                           intcon3	equ	0xFF0
 11002                           indf0	equ	0xFEF
 11003                           postinc0	equ	0xFEE
 11004                           fsr0h	equ	0xFEA
 11005                           fsr0l	equ	0xFE9
 11006                           wreg	equ	0xFE8
 11007                           indf1	equ	0xFE7
 11008                           postinc1	equ	0xFE6
 11009                           postdec1	equ	0xFE5
 11010                           fsr1h	equ	0xFE2
 11011                           fsr1l	equ	0xFE1
 11012                           indf2	equ	0xFDF
 11013                           postinc2	equ	0xFDE
 11014                           postdec2	equ	0xFDD
 11015                           plusw2	equ	0xFDB
 11016                           fsr2h	equ	0xFDA
 11017                           fsr2l	equ	0xFD9
 11018                           status	equ	0xFD8
 11019                           
 11020 ;; *************** function _put_fat *****************
 11021 ;; Defined at:
 11022 ;;		line 1058 in file "bibliotecas/ff.c"
 11023 ;; Parameters:    Size  Location     Type
 11024 ;;  fs              2   48[BANK0 ] PTR struct .
 11025 ;;		 -> NULL(0), fs(559), 
 11026 ;;  clst            4   50[BANK0 ] unsigned long 
 11027 ;;  val             4   54[BANK0 ] unsigned long 
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;  bc              2   76[BANK0 ] unsigned int 
 11030 ;;  p               2   74[BANK0 ] PTR unsigned char 
 11031 ;;		 -> fs.win(512), NULL(0), fs(559), 
 11032 ;;  res             1   78[BANK0 ] enum E79
 11033 ;; Return value:  Size  Location     Type
 11034 ;;                  1    wreg      enum E79
 11035 ;; Registers used:
 11036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11037 ;; Tracked objects:
 11038 ;;		On entry : 0/0
 11039 ;;		On exit  : 0/0
 11040 ;;		Unchanged: 0/0
 11041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11042 ;;      Params:         0      10       0       0       0       0       0       0       0
 11043 ;;      Locals:         0       9       0       0       0       0       0       0       0
 11044 ;;      Temps:          0      12       0       0       0       0       0       0       0
 11045 ;;      Totals:         0      31       0       0       0       0       0       0       0
 11046 ;;Total ram usage:       31 bytes
 11047 ;; Hardware stack levels used:    1
 11048 ;; Hardware stack levels required when called:    9
 11049 ;; This function calls:
 11050 ;;		_ld_dword
 11051 ;;		_move_window
 11052 ;;		_st_dword
 11053 ;;		_st_word
 11054 ;; This function is called by:
 11055 ;;		_remove_chain
 11056 ;;		_create_chain
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           	psect	text32
 11061  0021D6                     __ptext32:
 11062                           	opt stack 0
 11063  0021D6                     _put_fat:
 11064                           	opt stack 17
 11065                           
 11066                           ;ff.c: 1064: UINT bc;
 11067                           ;ff.c: 1065: BYTE *p;
 11068                           ;ff.c: 1066: FRESULT res = FR_INT_ERR;
 11069                           
 11070                           ; BSR set to: 0
 11071                           ;incstack = 0
 11072  0021D6  0E02               	movlw	2
 11073  0021D8  0100               	movlb	0	; () banked
 11074  0021DA  6FAE               	movwf	put_fat@res& (0+255),b
 11075                           
 11076                           ; BSR set to: 0
 11077                           ;ff.c: 1069: if (clst >= 2 && clst < fs->n_fatent) {
 11078  0021DC  5195               	movf	(put_fat@clst+3)& (0+255),w,b
 11079  0021DE  1194               	iorwf	(put_fat@clst+2)& (0+255),w,b
 11080  0021E0  1193               	iorwf	(put_fat@clst+1)& (0+255),w,b
 11081  0021E2  E104               	bnz	u15830
 11082  0021E4  0E02               	movlw	2
 11083  0021E6  5D92               	subwf	put_fat@clst& (0+255),w,b
 11084  0021E8  A0D8               	btfss	status,0,c
 11085  0021EA  D21E               	goto	l1090
 11086  0021EC                     u15830:
 11087                           
 11088                           ; BSR set to: 0
 11089  0021EC  EE20 F013          	lfsr	2,19
 11090  0021F0  5190               	movf	put_fat@fs& (0+255),w,b
 11091  0021F2  26D9               	addwf	fsr2l,f,c
 11092  0021F4  5191               	movf	(put_fat@fs+1)& (0+255),w,b
 11093  0021F6  22DA               	addwfc	fsr2h,f,c
 11094  0021F8  50DE               	movf	postinc2,w,c
 11095  0021FA  5D92               	subwf	put_fat@clst& (0+255),w,b
 11096  0021FC  50DE               	movf	postinc2,w,c
 11097  0021FE  5993               	subwfb	(put_fat@clst+1)& (0+255),w,b
 11098  002200  50DE               	movf	postinc2,w,c
 11099  002202  5994               	subwfb	(put_fat@clst+2)& (0+255),w,b
 11100  002204  50DE               	movf	postinc2,w,c
 11101  002206  5995               	subwfb	(put_fat@clst+3)& (0+255),w,b
 11102  002208  A0D8               	btfss	status,0,c
 11103  00220A  D200               	goto	l1087
 11104  00220C  D20D               	goto	l1090
 11105  00220E                     l1088:
 11106                           
 11107                           ; BSR set to: 0
 11108                           ;ff.c: 1072: bc = (UINT)clst; bc += bc / 2;
 11109  00220E  C092  F0AC         	movff	put_fat@clst,put_fat@bc
 11110  002212  C093  F0AD         	movff	put_fat@clst+1,put_fat@bc+1
 11111                           
 11112                           ; BSR set to: 0
 11113  002216  90D8               	bcf	status,0,c
 11114  002218  31AD               	rrcf	(put_fat@bc+1)& (0+255),w,b
 11115  00221A  6F9B               	movwf	(??_put_fat+1)& (0+255),b
 11116  00221C  31AC               	rrcf	put_fat@bc& (0+255),w,b
 11117  00221E  6F9A               	movwf	??_put_fat& (0+255),b
 11118  002220  519A               	movf	??_put_fat& (0+255),w,b
 11119  002222  27AC               	addwf	put_fat@bc& (0+255),f,b
 11120  002224  519B               	movf	(??_put_fat+1)& (0+255),w,b
 11121  002226  23AD               	addwfc	(put_fat@bc+1)& (0+255),f,b
 11122                           
 11123                           ; BSR set to: 0
 11124                           ;ff.c: 1073: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11125  002228  C090  F085         	movff	put_fat@fs,move_window@fs
 11126  00222C  C091  F086         	movff	put_fat@fs+1,move_window@fs+1
 11127  002230  EE20 F01F          	lfsr	2,31
 11128  002234  5190               	movf	put_fat@fs& (0+255),w,b
 11129  002236  26D9               	addwf	fsr2l,f,c
 11130  002238  5191               	movf	(put_fat@fs+1)& (0+255),w,b
 11131  00223A  22DA               	addwfc	fsr2h,f,c
 11132  00223C  CFDE F09A          	movff	postinc2,??_put_fat
 11133  002240  CFDE F09B          	movff	postinc2,??_put_fat+1
 11134  002244  CFDE F09C          	movff	postinc2,??_put_fat+2
 11135  002248  CFDE F09D          	movff	postinc2,??_put_fat+3
 11136  00224C  C0AC  F09E         	movff	put_fat@bc,??_put_fat+4
 11137  002250  C0AD  F09F         	movff	put_fat@bc+1,??_put_fat+5
 11138  002254  0E09               	movlw	9
 11139  002256  6FA0               	movwf	(??_put_fat+6)& (0+255),b
 11140  002258                     u15855:
 11141  002258  90D8               	bcf	status,0,c
 11142  00225A  339F               	rrcf	(??_put_fat+5)& (0+255),f,b
 11143  00225C  339E               	rrcf	(??_put_fat+4)& (0+255),f,b
 11144  00225E  2FA0               	decfsz	(??_put_fat+6)& (0+255),f,b
 11145  002260  D7FB               	goto	u15855
 11146  002262  519E               	movf	(??_put_fat+4)& (0+255),w,b
 11147  002264  259A               	addwf	??_put_fat& (0+255),w,b
 11148  002266  6F87               	movwf	move_window@sector& (0+255),b
 11149  002268  519F               	movf	(??_put_fat+5)& (0+255),w,b
 11150  00226A  219B               	addwfc	(??_put_fat+1)& (0+255),w,b
 11151  00226C  6F88               	movwf	(move_window@sector+1)& (0+255),b
 11152  00226E  0E00               	movlw	0
 11153  002270  219C               	addwfc	(??_put_fat+2)& (0+255),w,b
 11154  002272  6F89               	movwf	(move_window@sector+2)& (0+255),b
 11155  002274  0E00               	movlw	0
 11156  002276  219D               	addwfc	(??_put_fat+3)& (0+255),w,b
 11157  002278  6F8A               	movwf	(move_window@sector+3)& (0+255),b
 11158  00227A  EC2E  F026         	call	_move_window	;wreg free
 11159  00227E  0100               	movlb	0	; () banked
 11160  002280  6FAE               	movwf	put_fat@res& (0+255),b
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;ff.c: 1074: if (res != FR_OK) break;
 11164  002282  51AE               	movf	put_fat@res& (0+255),w,b
 11165  002284  A4D8               	btfss	status,2,c
 11166  002286  D1D0               	goto	l1090
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;ff.c: 1075: p = fs->win + bc++ % ((UINT)512);
 11170                           
 11171                           ; BSR set to: 0
 11172                           
 11173                           ; BSR set to: 0
 11174  002288  0EFF               	movlw	255
 11175  00228A  6F9A               	movwf	??_put_fat& (0+255),b
 11176  00228C  0E01               	movlw	1
 11177  00228E  6F9B               	movwf	(??_put_fat+1)& (0+255),b
 11178  002290  C0AC  F09C         	movff	put_fat@bc,??_put_fat+2
 11179  002294  C0AD  F09D         	movff	put_fat@bc+1,??_put_fat+3
 11180  002298  519A               	movf	??_put_fat& (0+255),w,b
 11181  00229A  179C               	andwf	(??_put_fat+2)& (0+255),f,b
 11182  00229C  519B               	movf	(??_put_fat+1)& (0+255),w,b
 11183  00229E  179D               	andwf	(??_put_fat+3)& (0+255),f,b
 11184  0022A0  0E2F               	movlw	47
 11185  0022A2  279C               	addwf	(??_put_fat+2)& (0+255),f,b
 11186  0022A4  0E00               	movlw	0
 11187  0022A6  239D               	addwfc	(??_put_fat+3)& (0+255),f,b
 11188  0022A8  519C               	movf	(??_put_fat+2)& (0+255),w,b
 11189  0022AA  2590               	addwf	put_fat@fs& (0+255),w,b
 11190  0022AC  6FAA               	movwf	put_fat@p& (0+255),b
 11191  0022AE  519D               	movf	(??_put_fat+3)& (0+255),w,b
 11192  0022B0  2191               	addwfc	(put_fat@fs+1)& (0+255),w,b
 11193  0022B2  6FAB               	movwf	(put_fat@p+1)& (0+255),b
 11194                           
 11195                           ; BSR set to: 0
 11196  0022B4  4BAC               	infsnz	put_fat@bc& (0+255),f,b
 11197  0022B6  2BAD               	incf	(put_fat@bc+1)& (0+255),f,b
 11198                           
 11199                           ; BSR set to: 0
 11200                           ;ff.c: 1076: *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 11201  0022B8  B192               	btfsc	put_fat@clst& (0+255),0,b
 11202  0022BA  D004               	goto	l1092
 11203                           
 11204                           ; BSR set to: 0
 11205  0022BC  C096  F0A6         	movff	put_fat@val,_put_fat$2456
 11206  0022C0  6BA7               	clrf	(_put_fat$2456+1)& (0+255),b
 11207  0022C2  D01A               	goto	l1094
 11208  0022C4                     l1092:
 11209                           
 11210                           ; BSR set to: 0
 11211                           
 11212                           ; BSR set to: 0
 11213  0022C4  5196               	movf	put_fat@val& (0+255),w,b
 11214  0022C6  6F9A               	movwf	??_put_fat& (0+255),b
 11215  0022C8  6B9B               	clrf	(??_put_fat+1)& (0+255),b
 11216  0022CA  3B9A               	swapf	??_put_fat& (0+255),f,b
 11217  0022CC  3B9B               	swapf	(??_put_fat+1)& (0+255),f,b
 11218  0022CE  0EF0               	movlw	240
 11219  0022D0  179B               	andwf	(??_put_fat+1)& (0+255),f,b
 11220  0022D2  519A               	movf	??_put_fat& (0+255),w,b
 11221  0022D4  0B0F               	andlw	15
 11222  0022D6  139B               	iorwf	(??_put_fat+1)& (0+255),f,b
 11223  0022D8  0EF0               	movlw	240
 11224  0022DA  179A               	andwf	??_put_fat& (0+255),f,b
 11225  0022DC  C0AA  FFD9         	movff	put_fat@p,fsr2l
 11226  0022E0  C0AB  FFDA         	movff	put_fat@p+1,fsr2h
 11227  0022E4  50DF               	movf	indf2,w,c
 11228  0022E6  0B0F               	andlw	15
 11229  0022E8  6F9C               	movwf	(??_put_fat+2)& (0+255),b
 11230  0022EA  6B9D               	clrf	(??_put_fat+3)& (0+255),b
 11231  0022EC  519A               	movf	??_put_fat& (0+255),w,b
 11232  0022EE  119C               	iorwf	(??_put_fat+2)& (0+255),w,b
 11233  0022F0  6FA6               	movwf	_put_fat$2456& (0+255),b
 11234  0022F2  519B               	movf	(??_put_fat+1)& (0+255),w,b
 11235  0022F4  119D               	iorwf	(??_put_fat+3)& (0+255),w,b
 11236  0022F6  6FA7               	movwf	(_put_fat$2456+1)& (0+255),b
 11237  0022F8                     l1094:
 11238                           
 11239                           ; BSR set to: 0
 11240                           
 11241                           ; BSR set to: 0
 11242  0022F8  C0AA  FFD9         	movff	put_fat@p,fsr2l
 11243  0022FC  C0AB  FFDA         	movff	put_fat@p+1,fsr2h
 11244  002300  C0A6  FFDF         	movff	_put_fat$2456,indf2
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;ff.c: 1077: fs->wflag = 1;
 11248  002304  EE20 F003          	lfsr	2,3
 11249  002308  5190               	movf	put_fat@fs& (0+255),w,b
 11250  00230A  26D9               	addwf	fsr2l,f,c
 11251  00230C  5191               	movf	(put_fat@fs+1)& (0+255),w,b
 11252  00230E  22DA               	addwfc	fsr2h,f,c
 11253  002310  0E01               	movlw	1
 11254  002312  6EDF               	movwf	indf2,c
 11255                           
 11256                           ; BSR set to: 0
 11257                           ;ff.c: 1078: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11258  002314  C090  F085         	movff	put_fat@fs,move_window@fs
 11259  002318  C091  F086         	movff	put_fat@fs+1,move_window@fs+1
 11260  00231C  EE20 F01F          	lfsr	2,31
 11261  002320  5190               	movf	put_fat@fs& (0+255),w,b
 11262  002322  26D9               	addwf	fsr2l,f,c
 11263  002324  5191               	movf	(put_fat@fs+1)& (0+255),w,b
 11264  002326  22DA               	addwfc	fsr2h,f,c
 11265  002328  CFDE F09A          	movff	postinc2,??_put_fat
 11266  00232C  CFDE F09B          	movff	postinc2,??_put_fat+1
 11267  002330  CFDE F09C          	movff	postinc2,??_put_fat+2
 11268  002334  CFDE F09D          	movff	postinc2,??_put_fat+3
 11269  002338  C0AC  F09E         	movff	put_fat@bc,??_put_fat+4
 11270  00233C  C0AD  F09F         	movff	put_fat@bc+1,??_put_fat+5
 11271  002340  0E09               	movlw	9
 11272  002342  6FA0               	movwf	(??_put_fat+6)& (0+255),b
 11273  002344                     u15885:
 11274  002344  90D8               	bcf	status,0,c
 11275  002346  339F               	rrcf	(??_put_fat+5)& (0+255),f,b
 11276  002348  339E               	rrcf	(??_put_fat+4)& (0+255),f,b
 11277  00234A  2FA0               	decfsz	(??_put_fat+6)& (0+255),f,b
 11278  00234C  D7FB               	goto	u15885
 11279  00234E  519E               	movf	(??_put_fat+4)& (0+255),w,b
 11280  002350  259A               	addwf	??_put_fat& (0+255),w,b
 11281  002352  6F87               	movwf	move_window@sector& (0+255),b
 11282  002354  519F               	movf	(??_put_fat+5)& (0+255),w,b
 11283  002356  219B               	addwfc	(??_put_fat+1)& (0+255),w,b
 11284  002358  6F88               	movwf	(move_window@sector+1)& (0+255),b
 11285  00235A  0E00               	movlw	0
 11286  00235C  219C               	addwfc	(??_put_fat+2)& (0+255),w,b
 11287  00235E  6F89               	movwf	(move_window@sector+2)& (0+255),b
 11288  002360  0E00               	movlw	0
 11289  002362  219D               	addwfc	(??_put_fat+3)& (0+255),w,b
 11290  002364  6F8A               	movwf	(move_window@sector+3)& (0+255),b
 11291  002366  EC2E  F026         	call	_move_window	;wreg free
 11292  00236A  0100               	movlb	0	; () banked
 11293  00236C  6FAE               	movwf	put_fat@res& (0+255),b
 11294                           
 11295                           ; BSR set to: 0
 11296                           ;ff.c: 1079: if (res != FR_OK) break;
 11297  00236E  51AE               	movf	put_fat@res& (0+255),w,b
 11298  002370  A4D8               	btfss	status,2,c
 11299  002372  D15A               	goto	l1090
 11300                           
 11301                           ; BSR set to: 0
 11302                           ;ff.c: 1080: p = fs->win + bc % ((UINT)512);
 11303                           
 11304                           ; BSR set to: 0
 11305                           
 11306                           ; BSR set to: 0
 11307  002374  0EFF               	movlw	255
 11308  002376  6F9A               	movwf	??_put_fat& (0+255),b
 11309  002378  0E01               	movlw	1
 11310  00237A  6F9B               	movwf	(??_put_fat+1)& (0+255),b
 11311  00237C  C0AC  F09C         	movff	put_fat@bc,??_put_fat+2
 11312  002380  C0AD  F09D         	movff	put_fat@bc+1,??_put_fat+3
 11313  002384  519A               	movf	??_put_fat& (0+255),w,b
 11314  002386  179C               	andwf	(??_put_fat+2)& (0+255),f,b
 11315  002388  519B               	movf	(??_put_fat+1)& (0+255),w,b
 11316  00238A  179D               	andwf	(??_put_fat+3)& (0+255),f,b
 11317  00238C  0E2F               	movlw	47
 11318  00238E  279C               	addwf	(??_put_fat+2)& (0+255),f,b
 11319  002390  0E00               	movlw	0
 11320  002392  239D               	addwfc	(??_put_fat+3)& (0+255),f,b
 11321  002394  519C               	movf	(??_put_fat+2)& (0+255),w,b
 11322  002396  2590               	addwf	put_fat@fs& (0+255),w,b
 11323  002398  6FAA               	movwf	put_fat@p& (0+255),b
 11324  00239A  519D               	movf	(??_put_fat+3)& (0+255),w,b
 11325  00239C  2191               	addwfc	(put_fat@fs+1)& (0+255),w,b
 11326  00239E  6FAB               	movwf	(put_fat@p+1)& (0+255),b
 11327                           
 11328                           ; BSR set to: 0
 11329                           ;ff.c: 1081: *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0
      +                          F));
 11330  0023A0  B192               	btfsc	put_fat@clst& (0+255),0,b
 11331  0023A2  D01B               	goto	l1097
 11332                           
 11333                           ; BSR set to: 0
 11334  0023A4  C096  F09A         	movff	put_fat@val,??_put_fat
 11335  0023A8  C097  F09B         	movff	put_fat@val+1,??_put_fat+1
 11336  0023AC  C098  F09C         	movff	put_fat@val+2,??_put_fat+2
 11337  0023B0  C099  F09D         	movff	put_fat@val+3,??_put_fat+3
 11338  0023B4  C09B  F09A         	movff	??_put_fat+1,??_put_fat
 11339  0023B8  C09C  F09B         	movff	??_put_fat+2,??_put_fat+1
 11340  0023BC  C09D  F09C         	movff	??_put_fat+3,??_put_fat+2
 11341  0023C0  6B9D               	clrf	(??_put_fat+3)& (0+255),b
 11342  0023C2  0E0F               	movlw	15
 11343  0023C4  179A               	andwf	??_put_fat& (0+255),f,b
 11344  0023C6  C0AA  FFD9         	movff	put_fat@p,fsr2l
 11345  0023CA  C0AB  FFDA         	movff	put_fat@p+1,fsr2h
 11346  0023CE  50DF               	movf	indf2,w,c
 11347  0023D0  0BF0               	andlw	240
 11348  0023D2  119A               	iorwf	??_put_fat& (0+255),w,b
 11349  0023D4  6F9E               	movwf	(??_put_fat+4)& (0+255),b
 11350  0023D6  519E               	movf	(??_put_fat+4)& (0+255),w,b
 11351  0023D8  D012               	goto	L15
 11352  0023DA                     l1097:
 11353                           
 11354                           ; BSR set to: 0
 11355                           
 11356                           ; BSR set to: 0
 11357  0023DA  C096  F09A         	movff	put_fat@val,??_put_fat
 11358  0023DE  C097  F09B         	movff	put_fat@val+1,??_put_fat+1
 11359  0023E2  C098  F09C         	movff	put_fat@val+2,??_put_fat+2
 11360  0023E6  C099  F09D         	movff	put_fat@val+3,??_put_fat+3
 11361  0023EA  0E05               	movlw	5
 11362  0023EC  D005               	goto	u15910
 11363  0023EE                     u15915:
 11364  0023EE  90D8               	bcf	status,0,c
 11365  0023F0  339D               	rrcf	(??_put_fat+3)& (0+255),f,b
 11366  0023F2  339C               	rrcf	(??_put_fat+2)& (0+255),f,b
 11367  0023F4  339B               	rrcf	(??_put_fat+1)& (0+255),f,b
 11368  0023F6  339A               	rrcf	??_put_fat& (0+255),f,b
 11369  0023F8                     u15910:
 11370  0023F8  2EE8               	decfsz	wreg,f,c
 11371  0023FA  D7F9               	goto	u15915
 11372  0023FC  519A               	movf	??_put_fat& (0+255),w,b
 11373  0023FE                     L15:
 11374  0023FE  6FA8               	movwf	_put_fat$2457& (0+255),b
 11375  002400  6BA9               	clrf	(_put_fat$2457+1)& (0+255),b
 11376                           
 11377                           ; BSR set to: 0
 11378                           
 11379                           ; BSR set to: 0
 11380  002402  C0AA  FFD9         	movff	put_fat@p,fsr2l
 11381  002406  C0AB  FFDA         	movff	put_fat@p+1,fsr2h
 11382  00240A  C0A8  FFDF         	movff	_put_fat$2457,indf2
 11383  00240E  D054               	goto	L16
 11384  002410                     
 11385                           ; BSR set to: 0
 11386                           ;ff.c: 1086: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 11387                           
 11388                           ; BSR set to: 0
 11389  002410  C090  F085         	movff	put_fat@fs,move_window@fs
 11390  002414  C091  F086         	movff	put_fat@fs+1,move_window@fs+1
 11391  002418  EE20 F01F          	lfsr	2,31
 11392  00241C  5190               	movf	put_fat@fs& (0+255),w,b
 11393  00241E  26D9               	addwf	fsr2l,f,c
 11394  002420  5191               	movf	(put_fat@fs+1)& (0+255),w,b
 11395  002422  22DA               	addwfc	fsr2h,f,c
 11396  002424  CFDE F09A          	movff	postinc2,??_put_fat
 11397  002428  CFDE F09B          	movff	postinc2,??_put_fat+1
 11398  00242C  CFDE F09C          	movff	postinc2,??_put_fat+2
 11399  002430  CFDE F09D          	movff	postinc2,??_put_fat+3
 11400  002434  C092  F09E         	movff	put_fat@clst,??_put_fat+4
 11401  002438  C093  F09F         	movff	put_fat@clst+1,??_put_fat+5
 11402  00243C  C094  F0A0         	movff	put_fat@clst+2,??_put_fat+6
 11403  002440  C095  F0A1         	movff	put_fat@clst+3,??_put_fat+7
 11404  002444  C09F  F09E         	movff	??_put_fat+5,??_put_fat+4
 11405  002448  C0A0  F09F         	movff	??_put_fat+6,??_put_fat+5
 11406  00244C  C0A1  F0A0         	movff	??_put_fat+7,??_put_fat+6
 11407  002450  6BA1               	clrf	(??_put_fat+7)& (0+255),b
 11408  002452  519A               	movf	??_put_fat& (0+255),w,b
 11409  002454  259E               	addwf	(??_put_fat+4)& (0+255),w,b
 11410  002456  6F87               	movwf	move_window@sector& (0+255),b
 11411  002458  519B               	movf	(??_put_fat+1)& (0+255),w,b
 11412  00245A  219F               	addwfc	(??_put_fat+5)& (0+255),w,b
 11413  00245C  6F88               	movwf	(move_window@sector+1)& (0+255),b
 11414  00245E  519C               	movf	(??_put_fat+2)& (0+255),w,b
 11415  002460  21A0               	addwfc	(??_put_fat+6)& (0+255),w,b
 11416  002462  6F89               	movwf	(move_window@sector+2)& (0+255),b
 11417  002464  519D               	movf	(??_put_fat+3)& (0+255),w,b
 11418  002466  21A1               	addwfc	(??_put_fat+7)& (0+255),w,b
 11419  002468  6F8A               	movwf	(move_window@sector+3)& (0+255),b
 11420  00246A  EC2E  F026         	call	_move_window	;wreg free
 11421  00246E  0100               	movlb	0	; () banked
 11422  002470  6FAE               	movwf	put_fat@res& (0+255),b
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;ff.c: 1087: if (res != FR_OK) break;
 11426  002472  51AE               	movf	put_fat@res& (0+255),w,b
 11427  002474  A4D8               	btfss	status,2,c
 11428  002476  D0D8               	goto	l1090
 11429                           
 11430                           ; BSR set to: 0
 11431                           ;ff.c: 1088: st_word(fs->win + clst * 2 % ((UINT)512), (WORD)val);
 11432                           
 11433                           ; BSR set to: 0
 11434                           
 11435                           ; BSR set to: 0
 11436  002478  0EFF               	movlw	255
 11437  00247A  6F9A               	movwf	??_put_fat& (0+255),b
 11438  00247C  0E01               	movlw	1
 11439  00247E  6F9B               	movwf	(??_put_fat+1)& (0+255),b
 11440  002480  C092  F09C         	movff	put_fat@clst,??_put_fat+2
 11441  002484  C093  F09D         	movff	put_fat@clst+1,??_put_fat+3
 11442  002488  90D8               	bcf	status,0,c
 11443  00248A  379C               	rlcf	(??_put_fat+2)& (0+255),f,b
 11444  00248C  379D               	rlcf	(??_put_fat+3)& (0+255),f,b
 11445  00248E  519A               	movf	??_put_fat& (0+255),w,b
 11446  002490  179C               	andwf	(??_put_fat+2)& (0+255),f,b
 11447  002492  519B               	movf	(??_put_fat+1)& (0+255),w,b
 11448  002494  179D               	andwf	(??_put_fat+3)& (0+255),f,b
 11449  002496  0E2F               	movlw	47
 11450  002498  279C               	addwf	(??_put_fat+2)& (0+255),f,b
 11451  00249A  0E00               	movlw	0
 11452  00249C  239D               	addwfc	(??_put_fat+3)& (0+255),f,b
 11453  00249E  519C               	movf	(??_put_fat+2)& (0+255),w,b
 11454  0024A0  2590               	addwf	put_fat@fs& (0+255),w,b
 11455  0024A2  6E1A               	movwf	st_word@ptr,c
 11456  0024A4  519D               	movf	(??_put_fat+3)& (0+255),w,b
 11457  0024A6  2191               	addwfc	(put_fat@fs+1)& (0+255),w,b
 11458  0024A8  6E1B               	movwf	st_word@ptr+1,c
 11459  0024AA  C096  F01C         	movff	put_fat@val,st_word@val
 11460  0024AE  C097  F01D         	movff	put_fat@val+1,st_word@val+1
 11461  0024B2  EC3B  F02D         	call	_st_word	;wreg free
 11462  0024B6  D0A8               	goto	l12672
 11463  0024B8                     L16:
 11464  0024B8  EE20 F003          	lfsr	2,3
 11465  0024BC  5190               	movf	put_fat@fs& (0+255),w,b
 11466  0024BE  26D9               	addwf	fsr2l,f,c
 11467  0024C0  5191               	movf	(put_fat@fs+1)& (0+255),w,b
 11468  0024C2  22DA               	addwfc	fsr2h,f,c
 11469  0024C4  0E01               	movlw	1
 11470  0024C6  6EDF               	movwf	indf2,c
 11471                           
 11472                           ;ff.c: 1090: break;
 11473  0024C8  D0AF               	goto	l1090
 11474  0024CA                     
 11475                           ; BSR set to: 0
 11476                           ;ff.c: 1096: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 11477                           
 11478                           ; BSR set to: 0
 11479  0024CA  C090  F085         	movff	put_fat@fs,move_window@fs
 11480  0024CE  C091  F086         	movff	put_fat@fs+1,move_window@fs+1
 11481  0024D2  EE20 F01F          	lfsr	2,31
 11482  0024D6  5190               	movf	put_fat@fs& (0+255),w,b
 11483  0024D8  26D9               	addwf	fsr2l,f,c
 11484  0024DA  5191               	movf	(put_fat@fs+1)& (0+255),w,b
 11485  0024DC  22DA               	addwfc	fsr2h,f,c
 11486  0024DE  CFDE F09A          	movff	postinc2,??_put_fat
 11487  0024E2  CFDE F09B          	movff	postinc2,??_put_fat+1
 11488  0024E6  CFDE F09C          	movff	postinc2,??_put_fat+2
 11489  0024EA  CFDE F09D          	movff	postinc2,??_put_fat+3
 11490  0024EE  C092  F09E         	movff	put_fat@clst,??_put_fat+4
 11491  0024F2  C093  F09F         	movff	put_fat@clst+1,??_put_fat+5
 11492  0024F6  C094  F0A0         	movff	put_fat@clst+2,??_put_fat+6
 11493  0024FA  C095  F0A1         	movff	put_fat@clst+3,??_put_fat+7
 11494  0024FE  0E08               	movlw	8
 11495  002500  D005               	goto	u15930
 11496  002502                     u15935:
 11497  002502  90D8               	bcf	status,0,c
 11498  002504  33A1               	rrcf	(??_put_fat+7)& (0+255),f,b
 11499  002506  33A0               	rrcf	(??_put_fat+6)& (0+255),f,b
 11500  002508  339F               	rrcf	(??_put_fat+5)& (0+255),f,b
 11501  00250A  339E               	rrcf	(??_put_fat+4)& (0+255),f,b
 11502  00250C                     u15930:
 11503  00250C  2EE8               	decfsz	wreg,f,c
 11504  00250E  D7F9               	goto	u15935
 11505  002510  519A               	movf	??_put_fat& (0+255),w,b
 11506  002512  259E               	addwf	(??_put_fat+4)& (0+255),w,b
 11507  002514  6F87               	movwf	move_window@sector& (0+255),b
 11508  002516  519B               	movf	(??_put_fat+1)& (0+255),w,b
 11509  002518  219F               	addwfc	(??_put_fat+5)& (0+255),w,b
 11510  00251A  6F88               	movwf	(move_window@sector+1)& (0+255),b
 11511  00251C  519C               	movf	(??_put_fat+2)& (0+255),w,b
 11512  00251E  21A0               	addwfc	(??_put_fat+6)& (0+255),w,b
 11513  002520  6F89               	movwf	(move_window@sector+2)& (0+255),b
 11514  002522  519D               	movf	(??_put_fat+3)& (0+255),w,b
 11515  002524  21A1               	addwfc	(??_put_fat+7)& (0+255),w,b
 11516  002526  6F8A               	movwf	(move_window@sector+3)& (0+255),b
 11517  002528  EC2E  F026         	call	_move_window	;wreg free
 11518  00252C  0100               	movlb	0	; () banked
 11519  00252E  6FAE               	movwf	put_fat@res& (0+255),b
 11520                           
 11521                           ; BSR set to: 0
 11522                           ;ff.c: 1097: if (res != FR_OK) break;
 11523  002530  51AE               	movf	put_fat@res& (0+255),w,b
 11524  002532  A4D8               	btfss	status,2,c
 11525  002534  D079               	goto	l1090
 11526                           
 11527                           ; BSR set to: 0
 11528                           ;ff.c: 1099: val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % ((UINT)512)) & 0x
      +                          F0000000);
 11529                           
 11530                           ; BSR set to: 0
 11531                           
 11532                           ; BSR set to: 0
 11533                           
 11534                           ; BSR set to: 0
 11535                           ;ff.c: 1098: if (!0 || fs->fs_type != 4) {
 11536                           
 11537                           ; BSR set to: 0
 11538  002536  0EFF               	movlw	255
 11539  002538  6F9A               	movwf	??_put_fat& (0+255),b
 11540  00253A  0E01               	movlw	1
 11541  00253C  6F9B               	movwf	(??_put_fat+1)& (0+255),b
 11542  00253E  C092  F09C         	movff	put_fat@clst,??_put_fat+2
 11543  002542  C093  F09D         	movff	put_fat@clst+1,??_put_fat+3
 11544  002546  90D8               	bcf	status,0,c
 11545  002548  379C               	rlcf	(??_put_fat+2)& (0+255),f,b
 11546  00254A  379D               	rlcf	(??_put_fat+3)& (0+255),f,b
 11547  00254C  90D8               	bcf	status,0,c
 11548  00254E  379C               	rlcf	(??_put_fat+2)& (0+255),f,b
 11549  002550  379D               	rlcf	(??_put_fat+3)& (0+255),f,b
 11550  002552  519A               	movf	??_put_fat& (0+255),w,b
 11551  002554  179C               	andwf	(??_put_fat+2)& (0+255),f,b
 11552  002556  519B               	movf	(??_put_fat+1)& (0+255),w,b
 11553  002558  179D               	andwf	(??_put_fat+3)& (0+255),f,b
 11554  00255A  0E2F               	movlw	47
 11555  00255C  279C               	addwf	(??_put_fat+2)& (0+255),f,b
 11556  00255E  0E00               	movlw	0
 11557  002560  239D               	addwfc	(??_put_fat+3)& (0+255),f,b
 11558  002562  519C               	movf	(??_put_fat+2)& (0+255),w,b
 11559  002564  2590               	addwf	put_fat@fs& (0+255),w,b
 11560  002566  6E1A               	movwf	ld_dword@ptr,c
 11561  002568  519D               	movf	(??_put_fat+3)& (0+255),w,b
 11562  00256A  2191               	addwfc	(put_fat@fs+1)& (0+255),w,b
 11563  00256C  6E1B               	movwf	ld_dword@ptr+1,c
 11564  00256E  EC7C  F025         	call	_ld_dword	;wreg free
 11565  002572  0E00               	movlw	0
 11566  002574  141A               	andwf	?_ld_dword,w,c
 11567  002576  0100               	movlb	0	; () banked
 11568  002578  6F9E               	movwf	(??_put_fat+4)& (0+255),b
 11569  00257A  0E00               	movlw	0
 11570  00257C  141B               	andwf	?_ld_dword+1,w,c
 11571  00257E  6F9F               	movwf	(??_put_fat+5)& (0+255),b
 11572  002580  0E00               	movlw	0
 11573  002582  141C               	andwf	?_ld_dword+2,w,c
 11574  002584  6FA0               	movwf	(??_put_fat+6)& (0+255),b
 11575  002586  0EF0               	movlw	240
 11576  002588  141D               	andwf	?_ld_dword+3,w,c
 11577  00258A  6FA1               	movwf	(??_put_fat+7)& (0+255),b
 11578  00258C  0EFF               	movlw	255
 11579  00258E  1596               	andwf	put_fat@val& (0+255),w,b
 11580  002590  6FA2               	movwf	(??_put_fat+8)& (0+255),b
 11581  002592  0EFF               	movlw	255
 11582  002594  1597               	andwf	(put_fat@val+1)& (0+255),w,b
 11583  002596  6FA3               	movwf	(??_put_fat+9)& (0+255),b
 11584  002598  0EFF               	movlw	255
 11585  00259A  1598               	andwf	(put_fat@val+2)& (0+255),w,b
 11586  00259C  6FA4               	movwf	(??_put_fat+10)& (0+255),b
 11587  00259E  0E0F               	movlw	15
 11588  0025A0  1599               	andwf	(put_fat@val+3)& (0+255),w,b
 11589  0025A2  6FA5               	movwf	(??_put_fat+11)& (0+255),b
 11590  0025A4  519E               	movf	(??_put_fat+4)& (0+255),w,b
 11591  0025A6  11A2               	iorwf	(??_put_fat+8)& (0+255),w,b
 11592  0025A8  6F96               	movwf	put_fat@val& (0+255),b
 11593  0025AA  519F               	movf	(??_put_fat+5)& (0+255),w,b
 11594  0025AC  11A3               	iorwf	(??_put_fat+9)& (0+255),w,b
 11595  0025AE  6F97               	movwf	(put_fat@val+1)& (0+255),b
 11596  0025B0  51A0               	movf	(??_put_fat+6)& (0+255),w,b
 11597  0025B2  11A4               	iorwf	(??_put_fat+10)& (0+255),w,b
 11598  0025B4  6F98               	movwf	(put_fat@val+2)& (0+255),b
 11599  0025B6  51A1               	movf	(??_put_fat+7)& (0+255),w,b
 11600  0025B8  11A5               	iorwf	(??_put_fat+11)& (0+255),w,b
 11601  0025BA  6F99               	movwf	(put_fat@val+3)& (0+255),b
 11602                           
 11603                           ; BSR set to: 0
 11604                           ;ff.c: 1100: }
 11605                           ;ff.c: 1101: st_dword(fs->win + clst * 4 % ((UINT)512), val);
 11606  0025BC  0EFF               	movlw	255
 11607  0025BE  6F9A               	movwf	??_put_fat& (0+255),b
 11608  0025C0  0E01               	movlw	1
 11609  0025C2  6F9B               	movwf	(??_put_fat+1)& (0+255),b
 11610  0025C4  C092  F09C         	movff	put_fat@clst,??_put_fat+2
 11611  0025C8  C093  F09D         	movff	put_fat@clst+1,??_put_fat+3
 11612  0025CC  90D8               	bcf	status,0,c
 11613  0025CE  379C               	rlcf	(??_put_fat+2)& (0+255),f,b
 11614  0025D0  379D               	rlcf	(??_put_fat+3)& (0+255),f,b
 11615  0025D2  90D8               	bcf	status,0,c
 11616  0025D4  379C               	rlcf	(??_put_fat+2)& (0+255),f,b
 11617  0025D6  379D               	rlcf	(??_put_fat+3)& (0+255),f,b
 11618  0025D8  519A               	movf	??_put_fat& (0+255),w,b
 11619  0025DA  179C               	andwf	(??_put_fat+2)& (0+255),f,b
 11620  0025DC  519B               	movf	(??_put_fat+1)& (0+255),w,b
 11621  0025DE  179D               	andwf	(??_put_fat+3)& (0+255),f,b
 11622  0025E0  0E2F               	movlw	47
 11623  0025E2  279C               	addwf	(??_put_fat+2)& (0+255),f,b
 11624  0025E4  0E00               	movlw	0
 11625  0025E6  239D               	addwfc	(??_put_fat+3)& (0+255),f,b
 11626  0025E8  519C               	movf	(??_put_fat+2)& (0+255),w,b
 11627  0025EA  2590               	addwf	put_fat@fs& (0+255),w,b
 11628  0025EC  6F86               	movwf	st_dword@ptr& (0+255),b
 11629  0025EE  519D               	movf	(??_put_fat+3)& (0+255),w,b
 11630  0025F0  2191               	addwfc	(put_fat@fs+1)& (0+255),w,b
 11631  0025F2  6F87               	movwf	(st_dword@ptr+1)& (0+255),b
 11632  0025F4  C096  F088         	movff	put_fat@val,st_dword@val
 11633  0025F8  C097  F089         	movff	put_fat@val+1,st_dword@val+1
 11634  0025FC  C098  F08A         	movff	put_fat@val+2,st_dword@val+2
 11635  002600  C099  F08B         	movff	put_fat@val+3,st_dword@val+3
 11636  002604  ECF0  F029         	call	_st_dword	;wreg free
 11637  002608                     l12672:
 11638                           
 11639                           ;ff.c: 1102: fs->wflag = 1;
 11640  002608  0100               	movlb	0	; () banked
 11641  00260A  D756               	goto	L16
 11642  00260C                     l1087:
 11643                           
 11644                           ; BSR set to: 0
 11645                           
 11646                           ; BSR set to: 0
 11647  00260C  C090  FFD9         	movff	put_fat@fs,fsr2l
 11648  002610  C091  FFDA         	movff	put_fat@fs+1,fsr2h
 11649  002614  50DF               	movf	indf2,w,c
 11650                           
 11651                           ; Switch size 1, requested type "space"
 11652                           ; Number of cases is 3, Range of values is 1 to 3
 11653                           ; switch strategies available:
 11654                           ; Name         Instructions Cycles
 11655                           ; simple_byte           10     6 (average)
 11656                           ;	Chosen strategy is simple_byte
 11657  002616  0A01               	xorlw	1	; case 1
 11658  002618  B4D8               	btfsc	status,2,c
 11659  00261A  D5F9               	goto	l1088
 11660  00261C  0A03               	xorlw	3	; case 2
 11661  00261E  B4D8               	btfsc	status,2,c
 11662  002620  D6F7               	goto	l1100
 11663  002622  0A01               	xorlw	1	; case 3
 11664  002624  B4D8               	btfsc	status,2,c
 11665  002626  D751               	goto	l1102
 11666  002628                     l1090:
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;ff.c: 1105: }
 11670                           ;ff.c: 1106: return res;
 11671                           
 11672                           ; BSR set to: 0
 11673                           
 11674                           ; BSR set to: 0
 11675  002628  51AE               	movf	put_fat@res& (0+255),w,b
 11676  00262A  0012               	return	
 11677  00262C                     __end_of_put_fat:
 11678                           	opt stack 0
 11679                           tosu	equ	0xFFF
 11680                           tosh	equ	0xFFE
 11681                           tosl	equ	0xFFD
 11682                           pclath	equ	0xFFA
 11683                           tblptru	equ	0xFF8
 11684                           tblptrh	equ	0xFF7
 11685                           tblptrl	equ	0xFF6
 11686                           tablat	equ	0xFF5
 11687                           prodh	equ	0xFF4
 11688                           prodl	equ	0xFF3
 11689                           intcon	equ	0xFF2
 11690                           intcon2	equ	0xFF1
 11691                           intcon3	equ	0xFF0
 11692                           indf0	equ	0xFEF
 11693                           postinc0	equ	0xFEE
 11694                           fsr0h	equ	0xFEA
 11695                           fsr0l	equ	0xFE9
 11696                           wreg	equ	0xFE8
 11697                           indf1	equ	0xFE7
 11698                           postinc1	equ	0xFE6
 11699                           postdec1	equ	0xFE5
 11700                           fsr1h	equ	0xFE2
 11701                           fsr1l	equ	0xFE1
 11702                           indf2	equ	0xFDF
 11703                           postinc2	equ	0xFDE
 11704                           postdec2	equ	0xFDD
 11705                           plusw2	equ	0xFDB
 11706                           fsr2h	equ	0xFDA
 11707                           fsr2l	equ	0xFD9
 11708                           status	equ	0xFD8
 11709                           
 11710 ;; *************** function _get_fat *****************
 11711 ;; Defined at:
 11712 ;;		line 980 in file "bibliotecas/ff.c"
 11713 ;; Parameters:    Size  Location     Type
 11714 ;;  obj             2   48[BANK0 ] PTR struct .
 11715 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@dj(40), f_unlink@sdj(40), 
 11716 ;;		 -> f_unlink@dj(40), f_getfree@obj(14), f_stat@dj(40), f_open@dj(40), 
 11717 ;;		 -> SDCard@fil(34), 
 11718 ;;  clst            4   50[BANK0 ] unsigned long 
 11719 ;; Auto vars:     Size  Location     Type
 11720 ;;  val             4   66[BANK0 ] unsigned long 
 11721 ;;  fs              2   72[BANK0 ] PTR struct .
 11722 ;;		 -> NULL(0), fs(559), 
 11723 ;;  bc              2   70[BANK0 ] unsigned int 
 11724 ;;  wc              2   64[BANK0 ] unsigned int 
 11725 ;; Return value:  Size  Location     Type
 11726 ;;                  4   48[BANK0 ] unsigned long 
 11727 ;; Registers used:
 11728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11729 ;; Tracked objects:
 11730 ;;		On entry : 0/0
 11731 ;;		On exit  : 0/0
 11732 ;;		Unchanged: 0/0
 11733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11734 ;;      Params:         0       6       0       0       0       0       0       0       0
 11735 ;;      Locals:         0      12       0       0       0       0       0       0       0
 11736 ;;      Temps:          0       8       0       0       0       0       0       0       0
 11737 ;;      Totals:         0      26       0       0       0       0       0       0       0
 11738 ;;Total ram usage:       26 bytes
 11739 ;; Hardware stack levels used:    1
 11740 ;; Hardware stack levels required when called:    9
 11741 ;; This function calls:
 11742 ;;		_ld_dword
 11743 ;;		_ld_word
 11744 ;;		_move_window
 11745 ;; This function is called by:
 11746 ;;		_remove_chain
 11747 ;;		_create_chain
 11748 ;;		_dir_sdi
 11749 ;;		_dir_next
 11750 ;;		_f_open
 11751 ;;		_f_read
 11752 ;;		_f_lseek
 11753 ;;		_f_getfree
 11754 ;;		_f_truncate
 11755 ;; This function uses a non-reentrant model
 11756 ;;
 11757                           
 11758                           	psect	text33
 11759  0029D2                     __ptext33:
 11760                           	opt stack 0
 11761  0029D2                     _get_fat:
 11762                           	opt stack 17
 11763                           
 11764                           ;ff.c: 985: UINT wc, bc;
 11765                           ;ff.c: 986: DWORD val;
 11766                           ;ff.c: 987: FATFS *fs = obj->fs;
 11767                           
 11768                           ; BSR set to: 0
 11769                           ;incstack = 0
 11770  0029D2  C090  FFD9         	movff	get_fat@obj,fsr2l
 11771  0029D6  C091  FFDA         	movff	get_fat@obj+1,fsr2h
 11772  0029DA  CFDE F0A8          	movff	postinc2,get_fat@fs
 11773  0029DE  CFDD F0A9          	movff	postdec2,get_fat@fs+1
 11774                           
 11775                           ;ff.c: 990: if (clst < 2 || clst >= fs->n_fatent) {
 11776  0029E2  0100               	movlb	0	; () banked
 11777  0029E4  5195               	movf	(get_fat@clst+3)& (0+255),w,b
 11778  0029E6  1194               	iorwf	(get_fat@clst+2)& (0+255),w,b
 11779  0029E8  1193               	iorwf	(get_fat@clst+1)& (0+255),w,b
 11780  0029EA  E104               	bnz	u15720
 11781  0029EC  0E02               	movlw	2
 11782  0029EE  5D92               	subwf	get_fat@clst& (0+255),w,b
 11783  0029F0  A0D8               	btfss	status,0,c
 11784  0029F2  D18F               	goto	l1082
 11785  0029F4                     u15720:
 11786                           
 11787                           ; BSR set to: 0
 11788  0029F4  EE20 F013          	lfsr	2,19
 11789  0029F8  51A8               	movf	get_fat@fs& (0+255),w,b
 11790  0029FA  26D9               	addwf	fsr2l,f,c
 11791  0029FC  51A9               	movf	(get_fat@fs+1)& (0+255),w,b
 11792  0029FE  22DA               	addwfc	fsr2h,f,c
 11793  002A00  50DE               	movf	postinc2,w,c
 11794  002A02  5D92               	subwf	get_fat@clst& (0+255),w,b
 11795  002A04  50DE               	movf	postinc2,w,c
 11796  002A06  5993               	subwfb	(get_fat@clst+1)& (0+255),w,b
 11797  002A08  50DE               	movf	postinc2,w,c
 11798  002A0A  5994               	subwfb	(get_fat@clst+2)& (0+255),w,b
 11799  002A0C  50DE               	movf	postinc2,w,c
 11800  002A0E  5995               	subwfb	(get_fat@clst+3)& (0+255),w,b
 11801  002A10  B0D8               	btfsc	status,0,c
 11802                           
 11803                           ; BSR set to: 0
 11804  002A12  D17F               	goto	l1082
 11805                           
 11806                           ; BSR set to: 0
 11807                           ;ff.c: 994: val = 0xFFFFFFFF;
 11808                           
 11809                           ;ff.c: 993: } else {
 11810                           
 11811                           ; BSR set to: 0
 11812                           ;ff.c: 991: val = 1;
 11813  002A14  69A2               	setf	get_fat@val& (0+255),b
 11814  002A16  69A3               	setf	(get_fat@val+1)& (0+255),b
 11815  002A18  69A4               	setf	(get_fat@val+2)& (0+255),b
 11816  002A1A  69A5               	setf	(get_fat@val+3)& (0+255),b
 11817                           
 11818                           ;ff.c: 996: switch (fs->fs_type) {
 11819  002A1C  D183               	goto	l1069
 11820  002A1E                     l1070:
 11821                           
 11822                           ; BSR set to: 0
 11823                           ;ff.c: 998: bc = (UINT)clst; bc += bc / 2;
 11824  002A1E  C092  F0A6         	movff	get_fat@clst,get_fat@bc
 11825  002A22  C093  F0A7         	movff	get_fat@clst+1,get_fat@bc+1
 11826                           
 11827                           ; BSR set to: 0
 11828  002A26  90D8               	bcf	status,0,c
 11829  002A28  31A7               	rrcf	(get_fat@bc+1)& (0+255),w,b
 11830  002A2A  6F97               	movwf	(??_get_fat+1)& (0+255),b
 11831  002A2C  31A6               	rrcf	get_fat@bc& (0+255),w,b
 11832  002A2E  6F96               	movwf	??_get_fat& (0+255),b
 11833  002A30  5196               	movf	??_get_fat& (0+255),w,b
 11834  002A32  27A6               	addwf	get_fat@bc& (0+255),f,b
 11835  002A34  5197               	movf	(??_get_fat+1)& (0+255),w,b
 11836  002A36  23A7               	addwfc	(get_fat@bc+1)& (0+255),f,b
 11837                           
 11838                           ; BSR set to: 0
 11839                           ;ff.c: 999: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 11840  002A38  C0A8  F085         	movff	get_fat@fs,move_window@fs
 11841  002A3C  C0A9  F086         	movff	get_fat@fs+1,move_window@fs+1
 11842  002A40  EE20 F01F          	lfsr	2,31
 11843  002A44  51A8               	movf	get_fat@fs& (0+255),w,b
 11844  002A46  26D9               	addwf	fsr2l,f,c
 11845  002A48  51A9               	movf	(get_fat@fs+1)& (0+255),w,b
 11846  002A4A  22DA               	addwfc	fsr2h,f,c
 11847  002A4C  CFDE F096          	movff	postinc2,??_get_fat
 11848  002A50  CFDE F097          	movff	postinc2,??_get_fat+1
 11849  002A54  CFDE F098          	movff	postinc2,??_get_fat+2
 11850  002A58  CFDE F099          	movff	postinc2,??_get_fat+3
 11851  002A5C  C0A6  F09A         	movff	get_fat@bc,??_get_fat+4
 11852  002A60  C0A7  F09B         	movff	get_fat@bc+1,??_get_fat+5
 11853  002A64  0E09               	movlw	9
 11854  002A66  6F9C               	movwf	(??_get_fat+6)& (0+255),b
 11855  002A68                     u15745:
 11856  002A68  90D8               	bcf	status,0,c
 11857  002A6A  339B               	rrcf	(??_get_fat+5)& (0+255),f,b
 11858  002A6C  339A               	rrcf	(??_get_fat+4)& (0+255),f,b
 11859  002A6E  2F9C               	decfsz	(??_get_fat+6)& (0+255),f,b
 11860  002A70  D7FB               	goto	u15745
 11861  002A72  519A               	movf	(??_get_fat+4)& (0+255),w,b
 11862  002A74  2596               	addwf	??_get_fat& (0+255),w,b
 11863  002A76  6F87               	movwf	move_window@sector& (0+255),b
 11864  002A78  519B               	movf	(??_get_fat+5)& (0+255),w,b
 11865  002A7A  2197               	addwfc	(??_get_fat+1)& (0+255),w,b
 11866  002A7C  6F88               	movwf	(move_window@sector+1)& (0+255),b
 11867  002A7E  0E00               	movlw	0
 11868  002A80  2198               	addwfc	(??_get_fat+2)& (0+255),w,b
 11869  002A82  6F89               	movwf	(move_window@sector+2)& (0+255),b
 11870  002A84  0E00               	movlw	0
 11871  002A86  2199               	addwfc	(??_get_fat+3)& (0+255),w,b
 11872  002A88  6F8A               	movwf	(move_window@sector+3)& (0+255),b
 11873  002A8A  EC2E  F026         	call	_move_window	;wreg free
 11874  002A8E  0900               	iorlw	0
 11875  002A90  A4D8               	btfss	status,2,c
 11876  002A92  D157               	goto	l1072
 11877                           
 11878                           ;ff.c: 1000: wc = fs->win[bc++ % ((UINT)512)];
 11879  002A94  0EFF               	movlw	255
 11880  002A96  0100               	movlb	0	; () banked
 11881  002A98  6F96               	movwf	??_get_fat& (0+255),b
 11882  002A9A  0E01               	movlw	1
 11883  002A9C  6F97               	movwf	(??_get_fat+1)& (0+255),b
 11884  002A9E  C0A6  F098         	movff	get_fat@bc,??_get_fat+2
 11885  002AA2  C0A7  F099         	movff	get_fat@bc+1,??_get_fat+3
 11886  002AA6  5196               	movf	??_get_fat& (0+255),w,b
 11887  002AA8  1798               	andwf	(??_get_fat+2)& (0+255),f,b
 11888  002AAA  5197               	movf	(??_get_fat+1)& (0+255),w,b
 11889  002AAC  1799               	andwf	(??_get_fat+3)& (0+255),f,b
 11890  002AAE  0E2F               	movlw	47
 11891  002AB0  2798               	addwf	(??_get_fat+2)& (0+255),f,b
 11892  002AB2  0E00               	movlw	0
 11893  002AB4  2399               	addwfc	(??_get_fat+3)& (0+255),f,b
 11894  002AB6  5198               	movf	(??_get_fat+2)& (0+255),w,b
 11895  002AB8  25A8               	addwf	get_fat@fs& (0+255),w,b
 11896  002ABA  6ED9               	movwf	fsr2l,c
 11897  002ABC  5199               	movf	(??_get_fat+3)& (0+255),w,b
 11898  002ABE  21A9               	addwfc	(get_fat@fs+1)& (0+255),w,b
 11899  002AC0  6EDA               	movwf	fsr2h,c
 11900  002AC2  50DF               	movf	indf2,w,c
 11901  002AC4  6F9A               	movwf	(??_get_fat+4)& (0+255),b
 11902  002AC6  519A               	movf	(??_get_fat+4)& (0+255),w,b
 11903  002AC8  6FA0               	movwf	get_fat@wc& (0+255),b
 11904  002ACA  6BA1               	clrf	(get_fat@wc+1)& (0+255),b
 11905                           
 11906                           ; BSR set to: 0
 11907  002ACC  4BA6               	infsnz	get_fat@bc& (0+255),f,b
 11908  002ACE  2BA7               	incf	(get_fat@bc+1)& (0+255),f,b
 11909                           
 11910                           ; BSR set to: 0
 11911                           ;ff.c: 1001: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 11912  002AD0  C0A8  F085         	movff	get_fat@fs,move_window@fs
 11913  002AD4  C0A9  F086         	movff	get_fat@fs+1,move_window@fs+1
 11914  002AD8  EE20 F01F          	lfsr	2,31
 11915  002ADC  51A8               	movf	get_fat@fs& (0+255),w,b
 11916  002ADE  26D9               	addwf	fsr2l,f,c
 11917  002AE0  51A9               	movf	(get_fat@fs+1)& (0+255),w,b
 11918  002AE2  22DA               	addwfc	fsr2h,f,c
 11919  002AE4  CFDE F096          	movff	postinc2,??_get_fat
 11920  002AE8  CFDE F097          	movff	postinc2,??_get_fat+1
 11921  002AEC  CFDE F098          	movff	postinc2,??_get_fat+2
 11922  002AF0  CFDE F099          	movff	postinc2,??_get_fat+3
 11923  002AF4  C0A6  F09A         	movff	get_fat@bc,??_get_fat+4
 11924  002AF8  C0A7  F09B         	movff	get_fat@bc+1,??_get_fat+5
 11925  002AFC  0E09               	movlw	9
 11926  002AFE  6F9C               	movwf	(??_get_fat+6)& (0+255),b
 11927  002B00                     u15765:
 11928  002B00  90D8               	bcf	status,0,c
 11929  002B02  339B               	rrcf	(??_get_fat+5)& (0+255),f,b
 11930  002B04  339A               	rrcf	(??_get_fat+4)& (0+255),f,b
 11931  002B06  2F9C               	decfsz	(??_get_fat+6)& (0+255),f,b
 11932  002B08  D7FB               	goto	u15765
 11933  002B0A  519A               	movf	(??_get_fat+4)& (0+255),w,b
 11934  002B0C  2596               	addwf	??_get_fat& (0+255),w,b
 11935  002B0E  6F87               	movwf	move_window@sector& (0+255),b
 11936  002B10  519B               	movf	(??_get_fat+5)& (0+255),w,b
 11937  002B12  2197               	addwfc	(??_get_fat+1)& (0+255),w,b
 11938  002B14  6F88               	movwf	(move_window@sector+1)& (0+255),b
 11939  002B16  0E00               	movlw	0
 11940  002B18  2198               	addwfc	(??_get_fat+2)& (0+255),w,b
 11941  002B1A  6F89               	movwf	(move_window@sector+2)& (0+255),b
 11942  002B1C  0E00               	movlw	0
 11943  002B1E  2199               	addwfc	(??_get_fat+3)& (0+255),w,b
 11944  002B20  6F8A               	movwf	(move_window@sector+3)& (0+255),b
 11945  002B22  EC2E  F026         	call	_move_window	;wreg free
 11946  002B26  0900               	iorlw	0
 11947  002B28  A4D8               	btfss	status,2,c
 11948  002B2A  D10B               	goto	l1072
 11949                           
 11950                           ;ff.c: 1002: wc |= fs->win[bc % ((UINT)512)] << 8;
 11951  002B2C  0EFF               	movlw	255
 11952  002B2E  0100               	movlb	0	; () banked
 11953  002B30  6F96               	movwf	??_get_fat& (0+255),b
 11954  002B32  0E01               	movlw	1
 11955  002B34  6F97               	movwf	(??_get_fat+1)& (0+255),b
 11956  002B36  C0A6  F098         	movff	get_fat@bc,??_get_fat+2
 11957  002B3A  C0A7  F099         	movff	get_fat@bc+1,??_get_fat+3
 11958  002B3E  5196               	movf	??_get_fat& (0+255),w,b
 11959  002B40  1798               	andwf	(??_get_fat+2)& (0+255),f,b
 11960  002B42  5197               	movf	(??_get_fat+1)& (0+255),w,b
 11961  002B44  1799               	andwf	(??_get_fat+3)& (0+255),f,b
 11962  002B46  0E2F               	movlw	47
 11963  002B48  2798               	addwf	(??_get_fat+2)& (0+255),f,b
 11964  002B4A  0E00               	movlw	0
 11965  002B4C  2399               	addwfc	(??_get_fat+3)& (0+255),f,b
 11966  002B4E  5198               	movf	(??_get_fat+2)& (0+255),w,b
 11967  002B50  25A8               	addwf	get_fat@fs& (0+255),w,b
 11968  002B52  6ED9               	movwf	fsr2l,c
 11969  002B54  5199               	movf	(??_get_fat+3)& (0+255),w,b
 11970  002B56  21A9               	addwfc	(get_fat@fs+1)& (0+255),w,b
 11971  002B58  6EDA               	movwf	fsr2h,c
 11972  002B5A  50DF               	movf	indf2,w,c
 11973  002B5C  6F9A               	movwf	(??_get_fat+4)& (0+255),b
 11974  002B5E  519A               	movf	(??_get_fat+4)& (0+255),w,b
 11975  002B60  6F9C               	movwf	(??_get_fat+6)& (0+255),b
 11976  002B62  6B9B               	clrf	(??_get_fat+5)& (0+255),b
 11977  002B64  519B               	movf	(??_get_fat+5)& (0+255),w,b
 11978  002B66  13A0               	iorwf	get_fat@wc& (0+255),f,b
 11979  002B68  519C               	movf	(??_get_fat+6)& (0+255),w,b
 11980  002B6A  13A1               	iorwf	(get_fat@wc+1)& (0+255),f,b
 11981                           
 11982                           ; BSR set to: 0
 11983                           ;ff.c: 1003: val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 11984  002B6C  B192               	btfsc	get_fat@clst& (0+255),0,b
 11985  002B6E  D007               	goto	l1075
 11986                           
 11987                           ; BSR set to: 0
 11988  002B70  0EFF               	movlw	255
 11989  002B72  15A0               	andwf	get_fat@wc& (0+255),w,b
 11990  002B74  6F9E               	movwf	_get_fat$2428& (0+255),b
 11991  002B76  0E0F               	movlw	15
 11992  002B78  15A1               	andwf	(get_fat@wc+1)& (0+255),w,b
 11993  002B7A  6F9F               	movwf	(_get_fat$2428+1)& (0+255),b
 11994  002B7C  D00F               	goto	l1077
 11995  002B7E                     l1075:
 11996                           
 11997                           ; BSR set to: 0
 11998                           
 11999                           ; BSR set to: 0
 12000  002B7E  C0A0  F096         	movff	get_fat@wc,??_get_fat
 12001  002B82  C0A1  F097         	movff	get_fat@wc+1,??_get_fat+1
 12002  002B86  0E04               	movlw	4
 12003  002B88  6F98               	movwf	(??_get_fat+2)& (0+255),b
 12004  002B8A                     u15795:
 12005  002B8A  90D8               	bcf	status,0,c
 12006  002B8C  3397               	rrcf	(??_get_fat+1)& (0+255),f,b
 12007  002B8E  3396               	rrcf	??_get_fat& (0+255),f,b
 12008  002B90  2F98               	decfsz	(??_get_fat+2)& (0+255),f,b
 12009  002B92  D7FB               	goto	u15795
 12010  002B94  C096  F09E         	movff	??_get_fat,_get_fat$2428
 12011  002B98  C097  F09F         	movff	??_get_fat+1,_get_fat$2428+1
 12012  002B9C                     l1077:
 12013                           
 12014                           ; BSR set to: 0
 12015                           
 12016                           ; BSR set to: 0
 12017  002B9C  C09E  F0A2         	movff	_get_fat$2428,get_fat@val
 12018  002BA0  C09F  F0A3         	movff	_get_fat$2428+1,get_fat@val+1
 12019  002BA4  D053               	goto	L18
 12020  002BA6                     
 12021                           ; BSR set to: 0
 12022                           ;ff.c: 1007: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) bre
      +                          ak;
 12023                           
 12024                           ; BSR set to: 0
 12025  002BA6  C0A8  F085         	movff	get_fat@fs,move_window@fs
 12026  002BAA  C0A9  F086         	movff	get_fat@fs+1,move_window@fs+1
 12027  002BAE  EE20 F01F          	lfsr	2,31
 12028  002BB2  51A8               	movf	get_fat@fs& (0+255),w,b
 12029  002BB4  26D9               	addwf	fsr2l,f,c
 12030  002BB6  51A9               	movf	(get_fat@fs+1)& (0+255),w,b
 12031  002BB8  22DA               	addwfc	fsr2h,f,c
 12032  002BBA  CFDE F096          	movff	postinc2,??_get_fat
 12033  002BBE  CFDE F097          	movff	postinc2,??_get_fat+1
 12034  002BC2  CFDE F098          	movff	postinc2,??_get_fat+2
 12035  002BC6  CFDE F099          	movff	postinc2,??_get_fat+3
 12036  002BCA  C092  F09A         	movff	get_fat@clst,??_get_fat+4
 12037  002BCE  C093  F09B         	movff	get_fat@clst+1,??_get_fat+5
 12038  002BD2  C094  F09C         	movff	get_fat@clst+2,??_get_fat+6
 12039  002BD6  C095  F09D         	movff	get_fat@clst+3,??_get_fat+7
 12040  002BDA  C09B  F09A         	movff	??_get_fat+5,??_get_fat+4
 12041  002BDE  C09C  F09B         	movff	??_get_fat+6,??_get_fat+5
 12042  002BE2  C09D  F09C         	movff	??_get_fat+7,??_get_fat+6
 12043  002BE6  6B9D               	clrf	(??_get_fat+7)& (0+255),b
 12044  002BE8  5196               	movf	??_get_fat& (0+255),w,b
 12045  002BEA  259A               	addwf	(??_get_fat+4)& (0+255),w,b
 12046  002BEC  6F87               	movwf	move_window@sector& (0+255),b
 12047  002BEE  5197               	movf	(??_get_fat+1)& (0+255),w,b
 12048  002BF0  219B               	addwfc	(??_get_fat+5)& (0+255),w,b
 12049  002BF2  6F88               	movwf	(move_window@sector+1)& (0+255),b
 12050  002BF4  5198               	movf	(??_get_fat+2)& (0+255),w,b
 12051  002BF6  219C               	addwfc	(??_get_fat+6)& (0+255),w,b
 12052  002BF8  6F89               	movwf	(move_window@sector+2)& (0+255),b
 12053  002BFA  5199               	movf	(??_get_fat+3)& (0+255),w,b
 12054  002BFC  219D               	addwfc	(??_get_fat+7)& (0+255),w,b
 12055  002BFE  6F8A               	movwf	(move_window@sector+3)& (0+255),b
 12056  002C00  EC2E  F026         	call	_move_window	;wreg free
 12057  002C04  0900               	iorlw	0
 12058  002C06  A4D8               	btfss	status,2,c
 12059  002C08  D09C               	goto	l1072
 12060                           
 12061                           ;ff.c: 1008: val = ld_word(fs->win + clst * 2 % ((UINT)512));
 12062  002C0A  0EFF               	movlw	255
 12063  002C0C  0100               	movlb	0	; () banked
 12064  002C0E  6F96               	movwf	??_get_fat& (0+255),b
 12065  002C10  0E01               	movlw	1
 12066  002C12  6F97               	movwf	(??_get_fat+1)& (0+255),b
 12067  002C14  C092  F098         	movff	get_fat@clst,??_get_fat+2
 12068  002C18  C093  F099         	movff	get_fat@clst+1,??_get_fat+3
 12069  002C1C  90D8               	bcf	status,0,c
 12070  002C1E  3798               	rlcf	(??_get_fat+2)& (0+255),f,b
 12071  002C20  3799               	rlcf	(??_get_fat+3)& (0+255),f,b
 12072  002C22  5196               	movf	??_get_fat& (0+255),w,b
 12073  002C24  1798               	andwf	(??_get_fat+2)& (0+255),f,b
 12074  002C26  5197               	movf	(??_get_fat+1)& (0+255),w,b
 12075  002C28  1799               	andwf	(??_get_fat+3)& (0+255),f,b
 12076  002C2A  0E2F               	movlw	47
 12077  002C2C  2798               	addwf	(??_get_fat+2)& (0+255),f,b
 12078  002C2E  0E00               	movlw	0
 12079  002C30  2399               	addwfc	(??_get_fat+3)& (0+255),f,b
 12080  002C32  5198               	movf	(??_get_fat+2)& (0+255),w,b
 12081  002C34  25A8               	addwf	get_fat@fs& (0+255),w,b
 12082  002C36  6E1A               	movwf	ld_word@ptr,c
 12083  002C38  5199               	movf	(??_get_fat+3)& (0+255),w,b
 12084  002C3A  21A9               	addwfc	(get_fat@fs+1)& (0+255),w,b
 12085  002C3C  6E1B               	movwf	ld_word@ptr+1,c
 12086  002C3E  ECAE  F02C         	call	_ld_word	;wreg free
 12087  002C42  C01A  F0A2         	movff	?_ld_word,get_fat@val
 12088  002C46  C01B  F0A3         	movff	?_ld_word+1,get_fat@val+1
 12089  002C4A  0100               	movlb	0	; () banked
 12090  002C4C                     L18:
 12091  002C4C  6BA4               	clrf	(get_fat@val+2)& (0+255),b
 12092  002C4E  6BA5               	clrf	(get_fat@val+3)& (0+255),b
 12093                           
 12094                           ;ff.c: 1009: break;
 12095  002C50  D078               	goto	l1072
 12096  002C52                     
 12097                           ; BSR set to: 0
 12098                           ;ff.c: 1012: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) bre
      +                          ak;
 12099                           
 12100                           ; BSR set to: 0
 12101  002C52  C0A8  F085         	movff	get_fat@fs,move_window@fs
 12102  002C56  C0A9  F086         	movff	get_fat@fs+1,move_window@fs+1
 12103  002C5A  EE20 F01F          	lfsr	2,31
 12104  002C5E  51A8               	movf	get_fat@fs& (0+255),w,b
 12105  002C60  26D9               	addwf	fsr2l,f,c
 12106  002C62  51A9               	movf	(get_fat@fs+1)& (0+255),w,b
 12107  002C64  22DA               	addwfc	fsr2h,f,c
 12108  002C66  CFDE F096          	movff	postinc2,??_get_fat
 12109  002C6A  CFDE F097          	movff	postinc2,??_get_fat+1
 12110  002C6E  CFDE F098          	movff	postinc2,??_get_fat+2
 12111  002C72  CFDE F099          	movff	postinc2,??_get_fat+3
 12112  002C76  C092  F09A         	movff	get_fat@clst,??_get_fat+4
 12113  002C7A  C093  F09B         	movff	get_fat@clst+1,??_get_fat+5
 12114  002C7E  C094  F09C         	movff	get_fat@clst+2,??_get_fat+6
 12115  002C82  C095  F09D         	movff	get_fat@clst+3,??_get_fat+7
 12116  002C86  0E08               	movlw	8
 12117  002C88  D005               	goto	u15810
 12118  002C8A                     u15815:
 12119  002C8A  90D8               	bcf	status,0,c
 12120  002C8C  339D               	rrcf	(??_get_fat+7)& (0+255),f,b
 12121  002C8E  339C               	rrcf	(??_get_fat+6)& (0+255),f,b
 12122  002C90  339B               	rrcf	(??_get_fat+5)& (0+255),f,b
 12123  002C92  339A               	rrcf	(??_get_fat+4)& (0+255),f,b
 12124  002C94                     u15810:
 12125  002C94  2EE8               	decfsz	wreg,f,c
 12126  002C96  D7F9               	goto	u15815
 12127  002C98  5196               	movf	??_get_fat& (0+255),w,b
 12128  002C9A  259A               	addwf	(??_get_fat+4)& (0+255),w,b
 12129  002C9C  6F87               	movwf	move_window@sector& (0+255),b
 12130  002C9E  5197               	movf	(??_get_fat+1)& (0+255),w,b
 12131  002CA0  219B               	addwfc	(??_get_fat+5)& (0+255),w,b
 12132  002CA2  6F88               	movwf	(move_window@sector+1)& (0+255),b
 12133  002CA4  5198               	movf	(??_get_fat+2)& (0+255),w,b
 12134  002CA6  219C               	addwfc	(??_get_fat+6)& (0+255),w,b
 12135  002CA8  6F89               	movwf	(move_window@sector+2)& (0+255),b
 12136  002CAA  5199               	movf	(??_get_fat+3)& (0+255),w,b
 12137  002CAC  219D               	addwfc	(??_get_fat+7)& (0+255),w,b
 12138  002CAE  6F8A               	movwf	(move_window@sector+3)& (0+255),b
 12139  002CB0  EC2E  F026         	call	_move_window	;wreg free
 12140  002CB4  0900               	iorlw	0
 12141  002CB6  A4D8               	btfss	status,2,c
 12142  002CB8  D044               	goto	l1072
 12143                           
 12144                           ;ff.c: 1013: val = ld_dword(fs->win + clst * 4 % ((UINT)512)) & 0x0FFFFFFF;
 12145  002CBA  0EFF               	movlw	255
 12146  002CBC  0100               	movlb	0	; () banked
 12147  002CBE  6F96               	movwf	??_get_fat& (0+255),b
 12148  002CC0  0E01               	movlw	1
 12149  002CC2  6F97               	movwf	(??_get_fat+1)& (0+255),b
 12150  002CC4  C092  F098         	movff	get_fat@clst,??_get_fat+2
 12151  002CC8  C093  F099         	movff	get_fat@clst+1,??_get_fat+3
 12152  002CCC  90D8               	bcf	status,0,c
 12153  002CCE  3798               	rlcf	(??_get_fat+2)& (0+255),f,b
 12154  002CD0  3799               	rlcf	(??_get_fat+3)& (0+255),f,b
 12155  002CD2  90D8               	bcf	status,0,c
 12156  002CD4  3798               	rlcf	(??_get_fat+2)& (0+255),f,b
 12157  002CD6  3799               	rlcf	(??_get_fat+3)& (0+255),f,b
 12158  002CD8  5196               	movf	??_get_fat& (0+255),w,b
 12159  002CDA  1798               	andwf	(??_get_fat+2)& (0+255),f,b
 12160  002CDC  5197               	movf	(??_get_fat+1)& (0+255),w,b
 12161  002CDE  1799               	andwf	(??_get_fat+3)& (0+255),f,b
 12162  002CE0  0E2F               	movlw	47
 12163  002CE2  2798               	addwf	(??_get_fat+2)& (0+255),f,b
 12164  002CE4  0E00               	movlw	0
 12165  002CE6  2399               	addwfc	(??_get_fat+3)& (0+255),f,b
 12166  002CE8  5198               	movf	(??_get_fat+2)& (0+255),w,b
 12167  002CEA  25A8               	addwf	get_fat@fs& (0+255),w,b
 12168  002CEC  6E1A               	movwf	ld_dword@ptr,c
 12169  002CEE  5199               	movf	(??_get_fat+3)& (0+255),w,b
 12170  002CF0  21A9               	addwfc	(get_fat@fs+1)& (0+255),w,b
 12171  002CF2  6E1B               	movwf	ld_dword@ptr+1,c
 12172  002CF4  EC7C  F025         	call	_ld_dword	;wreg free
 12173  002CF8  0EFF               	movlw	255
 12174  002CFA  141A               	andwf	?_ld_dword,w,c
 12175  002CFC  0100               	movlb	0	; () banked
 12176  002CFE  6FA2               	movwf	get_fat@val& (0+255),b
 12177  002D00  0EFF               	movlw	255
 12178  002D02  141B               	andwf	?_ld_dword+1,w,c
 12179  002D04  6FA3               	movwf	(get_fat@val+1)& (0+255),b
 12180  002D06  0EFF               	movlw	255
 12181  002D08  141C               	andwf	?_ld_dword+2,w,c
 12182  002D0A  6FA4               	movwf	(get_fat@val+2)& (0+255),b
 12183  002D0C  0E0F               	movlw	15
 12184  002D0E  141D               	andwf	?_ld_dword+3,w,c
 12185  002D10  D007               	goto	L19
 12186  002D12                     l1082:
 12187                           
 12188                           ; BSR set to: 0
 12189                           ;ff.c: 1042: val = 1;
 12190                           
 12191                           ; BSR set to: 0
 12192  002D12  0E01               	movlw	1
 12193  002D14  6FA2               	movwf	get_fat@val& (0+255),b
 12194  002D16  0E00               	movlw	0
 12195  002D18  6FA3               	movwf	(get_fat@val+1)& (0+255),b
 12196  002D1A  0E00               	movlw	0
 12197  002D1C  6FA4               	movwf	(get_fat@val+2)& (0+255),b
 12198  002D1E  0E00               	movlw	0
 12199  002D20                     L19:
 12200  002D20  6FA5               	movwf	(get_fat@val+3)& (0+255),b
 12201                           
 12202                           ;ff.c: 1043: }
 12203  002D22  D00F               	goto	l1072
 12204  002D24                     l1069:
 12205                           
 12206                           ; BSR set to: 0
 12207                           
 12208                           ; BSR set to: 0
 12209  002D24  C0A8  FFD9         	movff	get_fat@fs,fsr2l
 12210  002D28  C0A9  FFDA         	movff	get_fat@fs+1,fsr2h
 12211  002D2C  50DF               	movf	indf2,w,c
 12212                           
 12213                           ; Switch size 1, requested type "space"
 12214                           ; Number of cases is 3, Range of values is 1 to 3
 12215                           ; switch strategies available:
 12216                           ; Name         Instructions Cycles
 12217                           ; simple_byte           10     6 (average)
 12218                           ;	Chosen strategy is simple_byte
 12219  002D2E  0A01               	xorlw	1	; case 1
 12220  002D30  B4D8               	btfsc	status,2,c
 12221  002D32  D675               	goto	l1070
 12222  002D34  0A03               	xorlw	3	; case 2
 12223  002D36  B4D8               	btfsc	status,2,c
 12224  002D38  D736               	goto	l1078
 12225  002D3A  0A01               	xorlw	1	; case 3
 12226  002D3C  B4D8               	btfsc	status,2,c
 12227  002D3E  D789               	goto	l1080
 12228  002D40  D7E8               	goto	l1082
 12229  002D42                     l1072:
 12230                           
 12231                           ;ff.c: 1044: }
 12232                           ;ff.c: 1046: return val;
 12233                           
 12234                           ; BSR set to: 0
 12235  002D42  C0A2  F090         	movff	get_fat@val,?_get_fat
 12236  002D46  C0A3  F091         	movff	get_fat@val+1,?_get_fat+1
 12237  002D4A  C0A4  F092         	movff	get_fat@val+2,?_get_fat+2
 12238  002D4E  C0A5  F093         	movff	get_fat@val+3,?_get_fat+3
 12239  002D52  0012               	return		;funcret
 12240  002D54                     __end_of_get_fat:
 12241                           	opt stack 0
 12242                           tosu	equ	0xFFF
 12243                           tosh	equ	0xFFE
 12244                           tosl	equ	0xFFD
 12245                           pclath	equ	0xFFA
 12246                           tblptru	equ	0xFF8
 12247                           tblptrh	equ	0xFF7
 12248                           tblptrl	equ	0xFF6
 12249                           tablat	equ	0xFF5
 12250                           prodh	equ	0xFF4
 12251                           prodl	equ	0xFF3
 12252                           intcon	equ	0xFF2
 12253                           intcon2	equ	0xFF1
 12254                           intcon3	equ	0xFF0
 12255                           indf0	equ	0xFEF
 12256                           postinc0	equ	0xFEE
 12257                           fsr0h	equ	0xFEA
 12258                           fsr0l	equ	0xFE9
 12259                           wreg	equ	0xFE8
 12260                           indf1	equ	0xFE7
 12261                           postinc1	equ	0xFE6
 12262                           postdec1	equ	0xFE5
 12263                           fsr1h	equ	0xFE2
 12264                           fsr1l	equ	0xFE1
 12265                           indf2	equ	0xFDF
 12266                           postinc2	equ	0xFDE
 12267                           postdec2	equ	0xFDD
 12268                           plusw2	equ	0xFDB
 12269                           fsr2h	equ	0xFDA
 12270                           fsr2l	equ	0xFD9
 12271                           status	equ	0xFD8
 12272                           
 12273 ;; *************** function _f_mount *****************
 12274 ;; Defined at:
 12275 ;;		line 3317 in file "bibliotecas/ff.c"
 12276 ;; Parameters:    Size  Location     Type
 12277 ;;  fs              2  126[BANK0 ] PTR struct .
 12278 ;;		 -> NULL(0), fs(559), 
 12279 ;;  path            2  128[BANK0 ] PTR const unsigned char 
 12280 ;;		 -> STR_11(11), STR_10(3), 
 12281 ;;  opt             1  130[BANK0 ] unsigned char 
 12282 ;; Auto vars:     Size  Location     Type
 12283 ;;  rp              2  136[BANK0 ] PTR const unsigned char 
 12284 ;;		 -> STR_11(11), STR_10(3), 
 12285 ;;  vol             2  134[BANK0 ] int 
 12286 ;;  cfs             2  132[BANK0 ] PTR struct .
 12287 ;;		 -> NULL(0), fs(559), 
 12288 ;;  res             1  131[BANK0 ] enum E79
 12289 ;; Return value:  Size  Location     Type
 12290 ;;                  1    wreg      enum E3962
 12291 ;; Registers used:
 12292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12293 ;; Tracked objects:
 12294 ;;		On entry : 0/0
 12295 ;;		On exit  : 0/0
 12296 ;;		Unchanged: 0/0
 12297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12298 ;;      Params:         0       5       0       0       0       0       0       0       0
 12299 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12300 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12301 ;;      Totals:         0      12       0       0       0       0       0       0       0
 12302 ;;Total ram usage:       12 bytes
 12303 ;; Hardware stack levels used:    1
 12304 ;; Hardware stack levels required when called:   11
 12305 ;; This function calls:
 12306 ;;		_find_volume
 12307 ;;		_get_ldnumber
 12308 ;; This function is called by:
 12309 ;;		_SDCard
 12310 ;; This function uses a non-reentrant model
 12311 ;;
 12312                           
 12313                           	psect	text34
 12314  004BB0                     __ptext34:
 12315                           	opt stack 0
 12316  004BB0                     _f_mount:
 12317                           	opt stack 17
 12318                           
 12319                           ;ff.c: 3323: FATFS *cfs;
 12320                           ;ff.c: 3324: int vol;
 12321                           ;ff.c: 3325: FRESULT res;
 12322                           ;ff.c: 3326: const TCHAR *rp = path;
 12323                           
 12324                           ;incstack = 0
 12325  004BB0  C0E0  F0E8         	movff	f_mount@path,f_mount@rp
 12326  004BB4  C0E1  F0E9         	movff	f_mount@path+1,f_mount@rp+1
 12327                           
 12328                           ;ff.c: 3330: vol = get_ldnumber(&rp);
 12329  004BB8  0EE8               	movlw	low f_mount@rp
 12330  004BBA  6E1A               	movwf	get_ldnumber@path,c
 12331  004BBC  0E00               	movlw	high f_mount@rp
 12332  004BBE  6E1B               	movwf	get_ldnumber@path+1,c
 12333  004BC0  EC17  F01C         	call	_get_ldnumber	;wreg free
 12334  004BC4  C01A  F0E6         	movff	?_get_ldnumber,f_mount@vol
 12335  004BC8  C01B  F0E7         	movff	?_get_ldnumber+1,f_mount@vol+1
 12336                           
 12337                           ;ff.c: 3331: if (vol < 0) return FR_INVALID_DRIVE;
 12338  004BCC  0100               	movlb	0	; () banked
 12339  004BCE  AFE7               	btfss	(f_mount@vol+1)& (0+255),7,b
 12340  004BD0  D002               	goto	l1447
 12341                           
 12342                           ; BSR set to: 0
 12343  004BD2  0E0B               	movlw	11
 12344                           
 12345                           ; BSR set to: 0
 12346  004BD4  0012               	return	
 12347  004BD6                     l1447:
 12348                           
 12349                           ; BSR set to: 0
 12350                           ;ff.c: 3332: cfs = FatFs[vol];
 12351                           
 12352                           ; BSR set to: 0
 12353  004BD6  90D8               	bcf	status,0,c
 12354  004BD8  35E6               	rlcf	f_mount@vol& (0+255),w,b
 12355  004BDA  6ED9               	movwf	fsr2l,c
 12356  004BDC  35E7               	rlcf	(f_mount@vol+1)& (0+255),w,b
 12357  004BDE  6EDA               	movwf	fsr2h,c
 12358  004BE0  0EFC               	movlw	low _FatFs
 12359  004BE2  26D9               	addwf	fsr2l,f,c
 12360  004BE4  0E00               	movlw	high _FatFs
 12361  004BE6  22DA               	addwfc	fsr2h,f,c
 12362  004BE8  CFDE F0E4          	movff	postinc2,f_mount@cfs
 12363  004BEC  CFDD F0E5          	movff	postdec2,f_mount@cfs+1
 12364                           
 12365                           ; BSR set to: 0
 12366                           ;ff.c: 3334: if (cfs) {
 12367  004BF0  51E4               	movf	f_mount@cfs& (0+255),w,b
 12368  004BF2  11E5               	iorwf	(f_mount@cfs+1)& (0+255),w,b
 12369  004BF4  B4D8               	btfsc	status,2,c
 12370  004BF6  D006               	goto	l1449
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;ff.c: 3341: cfs->fs_type = 0;
 12374  004BF8  C0E4  FFD9         	movff	f_mount@cfs,fsr2l
 12375  004BFC  C0E5  FFDA         	movff	f_mount@cfs+1,fsr2h
 12376  004C00  0E00               	movlw	0
 12377  004C02  6EDF               	movwf	indf2,c
 12378  004C04                     l1449:
 12379                           
 12380                           ; BSR set to: 0
 12381                           ;ff.c: 3342: }
 12382                           ;ff.c: 3344: if (fs) {
 12383                           
 12384                           ; BSR set to: 0
 12385  004C04  51DE               	movf	f_mount@fs& (0+255),w,b
 12386  004C06  11DF               	iorwf	(f_mount@fs+1)& (0+255),w,b
 12387  004C08  B4D8               	btfsc	status,2,c
 12388  004C0A  D006               	goto	l1450
 12389                           
 12390                           ; BSR set to: 0
 12391                           ;ff.c: 3345: fs->fs_type = 0;
 12392  004C0C  C0DE  FFD9         	movff	f_mount@fs,fsr2l
 12393  004C10  C0DF  FFDA         	movff	f_mount@fs+1,fsr2h
 12394  004C14  0E00               	movlw	0
 12395  004C16  6EDF               	movwf	indf2,c
 12396  004C18                     l1450:
 12397                           
 12398                           ; BSR set to: 0
 12399                           ;ff.c: 3349: }
 12400                           ;ff.c: 3350: FatFs[vol] = fs;
 12401                           
 12402                           ; BSR set to: 0
 12403  004C18  90D8               	bcf	status,0,c
 12404  004C1A  35E6               	rlcf	f_mount@vol& (0+255),w,b
 12405  004C1C  6ED9               	movwf	fsr2l,c
 12406  004C1E  35E7               	rlcf	(f_mount@vol+1)& (0+255),w,b
 12407  004C20  6EDA               	movwf	fsr2h,c
 12408  004C22  0EFC               	movlw	low _FatFs
 12409  004C24  26D9               	addwf	fsr2l,f,c
 12410  004C26  0E00               	movlw	high _FatFs
 12411  004C28  22DA               	addwfc	fsr2h,f,c
 12412  004C2A  C0DE  FFDE         	movff	f_mount@fs,postinc2
 12413  004C2E  C0DF  FFDD         	movff	f_mount@fs+1,postdec2
 12414                           
 12415                           ; BSR set to: 0
 12416                           ;ff.c: 3352: if (opt == 0) return FR_OK;
 12417  004C32  51E2               	movf	f_mount@opt& (0+255),w,b
 12418  004C34  A4D8               	btfss	status,2,c
 12419  004C36  D002               	goto	l1451
 12420                           
 12421                           ; BSR set to: 0
 12422  004C38  0E00               	movlw	0
 12423                           
 12424                           ; BSR set to: 0
 12425  004C3A  0012               	return	
 12426  004C3C                     l1451:
 12427                           
 12428                           ; BSR set to: 0
 12429                           ;ff.c: 3354: res = find_volume(&path, &fs, 0);
 12430                           
 12431                           ; BSR set to: 0
 12432  004C3C  0EE0               	movlw	low f_mount@path
 12433  004C3E  6F97               	movwf	find_volume@path& (0+255),b
 12434  004C40  0E00               	movlw	high f_mount@path
 12435  004C42  6F98               	movwf	(find_volume@path+1)& (0+255),b
 12436  004C44  0EDE               	movlw	low f_mount@fs
 12437  004C46  6F99               	movwf	find_volume@rfs& (0+255),b
 12438  004C48  0E00               	movlw	high f_mount@fs
 12439  004C4A  6F9A               	movwf	(find_volume@rfs+1)& (0+255),b
 12440  004C4C  0E00               	movlw	0
 12441  004C4E  6F9B               	movwf	find_volume@mode& (0+255),b
 12442  004C50  EC09  F000         	call	_find_volume	;wreg free
 12443  004C54  0100               	movlb	0	; () banked
 12444  004C56  6FE3               	movwf	f_mount@res& (0+255),b
 12445                           
 12446                           ; BSR set to: 0
 12447                           ;ff.c: 3355: return res;
 12448  004C58  51E3               	movf	f_mount@res& (0+255),w,b
 12449  004C5A  0012               	return	
 12450  004C5C                     __end_of_f_mount:
 12451                           	opt stack 0
 12452                           tosu	equ	0xFFF
 12453                           tosh	equ	0xFFE
 12454                           tosl	equ	0xFFD
 12455                           pclath	equ	0xFFA
 12456                           tblptru	equ	0xFF8
 12457                           tblptrh	equ	0xFF7
 12458                           tblptrl	equ	0xFF6
 12459                           tablat	equ	0xFF5
 12460                           prodh	equ	0xFF4
 12461                           prodl	equ	0xFF3
 12462                           intcon	equ	0xFF2
 12463                           intcon2	equ	0xFF1
 12464                           intcon3	equ	0xFF0
 12465                           indf0	equ	0xFEF
 12466                           postinc0	equ	0xFEE
 12467                           fsr0h	equ	0xFEA
 12468                           fsr0l	equ	0xFE9
 12469                           wreg	equ	0xFE8
 12470                           indf1	equ	0xFE7
 12471                           postinc1	equ	0xFE6
 12472                           postdec1	equ	0xFE5
 12473                           fsr1h	equ	0xFE2
 12474                           fsr1l	equ	0xFE1
 12475                           indf2	equ	0xFDF
 12476                           postinc2	equ	0xFDE
 12477                           postdec2	equ	0xFDD
 12478                           plusw2	equ	0xFDB
 12479                           fsr2h	equ	0xFDA
 12480                           fsr2l	equ	0xFD9
 12481                           status	equ	0xFD8
 12482                           
 12483 ;; *************** function _find_volume *****************
 12484 ;; Defined at:
 12485 ;;		line 3041 in file "bibliotecas/ff.c"
 12486 ;; Parameters:    Size  Location     Type
 12487 ;;  path            2   55[BANK0 ] PTR PTR const unsigned c
 12488 ;;		 -> f_rename@path_old(2), f_mkdir@path(2), f_unlink@path(2), f_getfree@path(2), 
 12489 ;;		 -> f_stat@path(2), f_opendir@path(2), f_open@path(2), f_mount@path(2), 
 12490 ;;  rfs             2   57[BANK0 ] PTR PTR struct .
 12491 ;;		 -> f_rename@fs(2), f_mkdir@fs(2), f_unlink@fs(2), f_getfree@fs(2), 
 12492 ;;		 -> dj.obj(15), f_stat@dj(40), f_opendir@fs(2), f_open@fs(2), 
 12493 ;;		 -> f_mount@fs(2), 
 12494 ;;  mode            1   59[BANK0 ] unsigned char 
 12495 ;; Auto vars:     Size  Location     Type
 12496 ;;  br             16   68[BANK0 ] unsigned long [4]
 12497 ;;  bsect           4  117[BANK0 ] unsigned long 
 12498 ;;  fasize          4  113[BANK0 ] unsigned long 
 12499 ;;  nclst           4  109[BANK0 ] unsigned long 
 12500 ;;  tsect           4  104[BANK0 ] unsigned long 
 12501 ;;  sysect          4   96[BANK0 ] unsigned long 
 12502 ;;  szbfat          4   90[BANK0 ] unsigned long 
 12503 ;;  fs              2  124[BANK0 ] PTR struct .
 12504 ;;		 -> NULL(0), fs(559), 
 12505 ;;  i               2  121[BANK0 ] unsigned int 
 12506 ;;  nrsv            2  102[BANK0 ] unsigned short 
 12507 ;;  vol             2  100[BANK0 ] int 
 12508 ;;  pt              2   94[BANK0 ] PTR unsigned char 
 12509 ;;		 -> fs.win(512), NULL(0), fs(559), 
 12510 ;;  fmt             1  123[BANK0 ] unsigned char 
 12511 ;;  stat            1  108[BANK0 ] unsigned char 
 12512 ;; Return value:  Size  Location     Type
 12513 ;;                  1    wreg      enum E79
 12514 ;; Registers used:
 12515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12516 ;; Tracked objects:
 12517 ;;		On entry : 0/0
 12518 ;;		On exit  : 0/0
 12519 ;;		Unchanged: 0/0
 12520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12521 ;;      Params:         0       5       0       0       0       0       0       0       0
 12522 ;;      Locals:         0      58       0       0       0       0       0       0       0
 12523 ;;      Temps:          0       8       0       0       0       0       0       0       0
 12524 ;;      Totals:         0      71       0       0       0       0       0       0       0
 12525 ;;Total ram usage:       71 bytes
 12526 ;; Hardware stack levels used:    1
 12527 ;; Hardware stack levels required when called:   10
 12528 ;; This function calls:
 12529 ;;		___lldiv
 12530 ;;		___lmul
 12531 ;;		_check_fs
 12532 ;;		_disk_initialize
 12533 ;;		_disk_status
 12534 ;;		_escreve_inteiro_lcd
 12535 ;;		_get_ldnumber
 12536 ;;		_ld_dword
 12537 ;;		_ld_word
 12538 ;;		_move_window
 12539 ;;		_posicao_cursor_lcd
 12540 ;; This function is called by:
 12541 ;;		_f_mount
 12542 ;;		_f_open
 12543 ;;		_f_opendir
 12544 ;;		_f_stat
 12545 ;;		_f_getfree
 12546 ;;		_f_unlink
 12547 ;;		_f_mkdir
 12548 ;;		_f_rename
 12549 ;; This function uses a non-reentrant model
 12550 ;;
 12551                           
 12552                           	psect	text35
 12553  000012                     __ptext35:
 12554                           	opt stack 0
 12555  000012                     _find_volume:
 12556                           	opt stack 17
 12557                           
 12558                           ;ff.c: 3047: BYTE fmt, *pt;
 12559                           ;ff.c: 3048: int vol;
 12560                           ;ff.c: 3049: DSTATUS stat;
 12561                           ;ff.c: 3050: DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
 12562                           ;ff.c: 3051: WORD nrsv;
 12563                           ;ff.c: 3052: FATFS *fs;
 12564                           ;ff.c: 3053: UINT i;
 12565                           ;ff.c: 3057: *rfs = 0;
 12566                           
 12567                           ; BSR set to: 0
 12568                           ;incstack = 0
 12569  000012  C099  FFD9         	movff	find_volume@rfs,fsr2l
 12570  000016  C09A  FFDA         	movff	find_volume@rfs+1,fsr2h
 12571  00001A  0E00               	movlw	0
 12572  00001C  6EDE               	movwf	postinc2,c
 12573  00001E  0E00               	movlw	0
 12574  000020  6EDD               	movwf	postdec2,c
 12575                           
 12576                           ;ff.c: 3058: vol = get_ldnumber(path);
 12577  000022  C097  F01A         	movff	find_volume@path,get_ldnumber@path
 12578  000026  C098  F01B         	movff	find_volume@path+1,get_ldnumber@path+1
 12579  00002A  EC17  F01C         	call	_get_ldnumber	;wreg free
 12580  00002E  C01A  F0C4         	movff	?_get_ldnumber,find_volume@vol
 12581  000032  C01B  F0C5         	movff	?_get_ldnumber+1,find_volume@vol+1
 12582                           
 12583                           ;ff.c: 3059: if (vol < 0) return FR_INVALID_DRIVE;
 12584  000036  0100               	movlb	0	; () banked
 12585  000038  AFC5               	btfss	(find_volume@vol+1)& (0+255),7,b
 12586  00003A  D002               	goto	l1381
 12587                           
 12588                           ; BSR set to: 0
 12589  00003C  0E0B               	movlw	11
 12590                           
 12591                           ; BSR set to: 0
 12592  00003E  0012               	return	
 12593  000040                     l1381:
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;ff.c: 3062: fs = FatFs[vol];
 12597                           
 12598                           ; BSR set to: 0
 12599  000040  90D8               	bcf	status,0,c
 12600  000042  35C4               	rlcf	find_volume@vol& (0+255),w,b
 12601  000044  6ED9               	movwf	fsr2l,c
 12602  000046  35C5               	rlcf	(find_volume@vol+1)& (0+255),w,b
 12603  000048  6EDA               	movwf	fsr2h,c
 12604  00004A  0EFC               	movlw	low _FatFs
 12605  00004C  26D9               	addwf	fsr2l,f,c
 12606  00004E  0E00               	movlw	high _FatFs
 12607  000050  22DA               	addwfc	fsr2h,f,c
 12608  000052  CFDE F0DC          	movff	postinc2,find_volume@fs
 12609  000056  CFDD F0DD          	movff	postdec2,find_volume@fs+1
 12610                           
 12611                           ; BSR set to: 0
 12612                           ;ff.c: 3063: if (!fs) return FR_NOT_ENABLED;
 12613  00005A  51DC               	movf	find_volume@fs& (0+255),w,b
 12614  00005C  11DD               	iorwf	(find_volume@fs+1)& (0+255),w,b
 12615  00005E  A4D8               	btfss	status,2,c
 12616  000060  D002               	goto	l1383
 12617                           
 12618                           ; BSR set to: 0
 12619  000062  0E0C               	movlw	12
 12620                           
 12621                           ; BSR set to: 0
 12622  000064  0012               	return	
 12623  000066                     l1383:
 12624                           
 12625                           ; BSR set to: 0
 12626                           ;ff.c: 3067: *rfs = fs;
 12627                           
 12628                           ; BSR set to: 0
 12629  000066  C099  FFD9         	movff	find_volume@rfs,fsr2l
 12630  00006A  C09A  FFDA         	movff	find_volume@rfs+1,fsr2h
 12631  00006E  C0DC  FFDE         	movff	find_volume@fs,postinc2
 12632  000072  C0DD  FFDD         	movff	find_volume@fs+1,postdec2
 12633                           
 12634                           ; BSR set to: 0
 12635                           ;ff.c: 3069: mode &= (BYTE)~0x01;
 12636  000076  919B               	bcf	find_volume@mode& (0+255),0,b
 12637                           
 12638                           ; BSR set to: 0
 12639                           ;ff.c: 3070: if (fs->fs_type != 0) {
 12640  000078  C0DC  FFD9         	movff	find_volume@fs,fsr2l
 12641  00007C  C0DD  FFDA         	movff	find_volume@fs+1,fsr2h
 12642  000080  50DF               	movf	indf2,w,c
 12643  000082  B4D8               	btfsc	status,2,c
 12644  000084  D015               	goto	l1385
 12645                           
 12646                           ; BSR set to: 0
 12647                           ;ff.c: 3071: stat = disk_status(fs->pdrv);
 12648  000086  EE20 F001          	lfsr	2,1
 12649  00008A  51DC               	movf	find_volume@fs& (0+255),w,b
 12650  00008C  26D9               	addwf	fsr2l,f,c
 12651  00008E  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 12652  000090  22DA               	addwfc	fsr2h,f,c
 12653  000092  50DF               	movf	indf2,w,c
 12654  000094  EC33  F02C         	call	_disk_status
 12655  000098  0100               	movlb	0	; () banked
 12656  00009A  6FCC               	movwf	find_volume@stat& (0+255),b
 12657                           
 12658                           ; BSR set to: 0
 12659                           ;ff.c: 3074: if (!0 && mode && (stat & 0x04)) {
 12660  00009C  B1CC               	btfsc	find_volume@stat& (0+255),0,b
 12661  00009E  D008               	goto	l1385
 12662                           
 12663                           ; BSR set to: 0
 12664  0000A0  519B               	movf	find_volume@mode& (0+255),w,b
 12665  0000A2  A4D8               	btfss	status,2,c
 12666                           
 12667                           ; BSR set to: 0
 12668  0000A4  A5CC               	btfss	find_volume@stat& (0+255),2,b
 12669  0000A6  D002               	goto	l1386
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;ff.c: 3075: return FR_WRITE_PROTECTED;
 12673  0000A8  0E0A               	movlw	10
 12674                           
 12675                           ; BSR set to: 0
 12676  0000AA  0012               	return	
 12677  0000AC                     l1386:
 12678                           
 12679                           ; BSR set to: 0
 12680                           ;ff.c: 3076: }
 12681                           ;ff.c: 3077: return FR_OK;
 12682                           
 12683                           ; BSR set to: 0
 12684  0000AC  0E00               	movlw	0
 12685                           
 12686                           ; BSR set to: 0
 12687  0000AE  0012               	return	
 12688  0000B0                     l1385:
 12689                           
 12690                           ; BSR set to: 0
 12691                           ;ff.c: 3078: }
 12692                           ;ff.c: 3079: }
 12693                           ;ff.c: 3084: fs->fs_type = 0;
 12694                           
 12695                           ; BSR set to: 0
 12696                           
 12697                           ; BSR set to: 0
 12698  0000B0  C0DC  FFD9         	movff	find_volume@fs,fsr2l
 12699  0000B4  C0DD  FFDA         	movff	find_volume@fs+1,fsr2h
 12700  0000B8  0E00               	movlw	0
 12701  0000BA  6EDF               	movwf	indf2,c
 12702                           
 12703                           ; BSR set to: 0
 12704                           ;ff.c: 3085: fs->pdrv = (BYTE)(vol);
 12705  0000BC  EE20 F001          	lfsr	2,1
 12706  0000C0  51DC               	movf	find_volume@fs& (0+255),w,b
 12707  0000C2  26D9               	addwf	fsr2l,f,c
 12708  0000C4  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 12709  0000C6  22DA               	addwfc	fsr2h,f,c
 12710  0000C8  C0C4  FFDF         	movff	find_volume@vol,indf2
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;ff.c: 3086: stat = disk_initialize(fs->pdrv);
 12714  0000CC  EE20 F001          	lfsr	2,1
 12715  0000D0  51DC               	movf	find_volume@fs& (0+255),w,b
 12716  0000D2  26D9               	addwf	fsr2l,f,c
 12717  0000D4  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 12718  0000D6  22DA               	addwfc	fsr2h,f,c
 12719  0000D8  50DF               	movf	indf2,w,c
 12720  0000DA  EC90  F02C         	call	_disk_initialize
 12721  0000DE  0100               	movlb	0	; () banked
 12722  0000E0  6FCC               	movwf	find_volume@stat& (0+255),b
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;ff.c: 3088: if (stat & 0x01) {
 12726  0000E2  A1CC               	btfss	find_volume@stat& (0+255),0,b
 12727  0000E4  D002               	goto	l1387
 12728                           
 12729                           ; BSR set to: 0
 12730                           ;ff.c: 3089: return FR_NOT_READY;
 12731  0000E6  0E03               	movlw	3
 12732                           
 12733                           ; BSR set to: 0
 12734  0000E8  0012               	return	
 12735  0000EA                     l1387:
 12736                           
 12737                           ; BSR set to: 0
 12738                           
 12739                           ; BSR set to: 0
 12740  0000EA  519B               	movf	find_volume@mode& (0+255),w,b
 12741  0000EC  A4D8               	btfss	status,2,c
 12742                           
 12743                           ; BSR set to: 0
 12744  0000EE  A5CC               	btfss	find_volume@stat& (0+255),2,b
 12745  0000F0  D002               	goto	l1388
 12746                           
 12747                           ; BSR set to: 0
 12748                           ;ff.c: 3092: return FR_WRITE_PROTECTED;
 12749  0000F2  0E0A               	movlw	10
 12750                           
 12751                           ; BSR set to: 0
 12752  0000F4  0012               	return	
 12753  0000F6                     l1388:
 12754                           
 12755                           ; BSR set to: 0
 12756                           ;ff.c: 3093: }
 12757                           ;ff.c: 3100: bsect = 0;
 12758                           
 12759                           ; BSR set to: 0
 12760  0000F6  0E00               	movlw	0
 12761  0000F8  6FD5               	movwf	find_volume@bsect& (0+255),b
 12762  0000FA  0E00               	movlw	0
 12763  0000FC  6FD6               	movwf	(find_volume@bsect+1)& (0+255),b
 12764  0000FE  0E00               	movlw	0
 12765  000100  6FD7               	movwf	(find_volume@bsect+2)& (0+255),b
 12766  000102  0E00               	movlw	0
 12767  000104  6FD8               	movwf	(find_volume@bsect+3)& (0+255),b
 12768                           
 12769                           ; BSR set to: 0
 12770                           ;ff.c: 3101: fmt = check_fs(fs, bsect);
 12771  000106  C0DC  F090         	movff	find_volume@fs,check_fs@fs
 12772  00010A  C0DD  F091         	movff	find_volume@fs+1,check_fs@fs+1
 12773  00010E  C0D5  F092         	movff	find_volume@bsect,check_fs@sect
 12774  000112  C0D6  F093         	movff	find_volume@bsect+1,check_fs@sect+1
 12775  000116  C0D7  F094         	movff	find_volume@bsect+2,check_fs@sect+2
 12776  00011A  C0D8  F095         	movff	find_volume@bsect+3,check_fs@sect+3
 12777  00011E  EC90  F021         	call	_check_fs	;wreg free
 12778  000122  0100               	movlb	0	; () banked
 12779  000124  6FDB               	movwf	find_volume@fmt& (0+255),b
 12780                           
 12781                           ; BSR set to: 0
 12782                           ;ff.c: 3102: posicao_cursor_lcd(2,15);
 12783  000126  0E0F               	movlw	15
 12784  000128  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 12785  00012A  0E02               	movlw	2
 12786  00012C  ECB8  F029         	call	_posicao_cursor_lcd
 12787                           
 12788                           ;ff.c: 3103: escreve_inteiro_lcd(fmt);
 12789  000130  C0DB  F02C         	movff	find_volume@fmt,escreve_inteiro_lcd@valor
 12790  000134  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 12791  000136  EC71  F02C         	call	_escreve_inteiro_lcd	;wreg free
 12792                           
 12793                           ;ff.c: 3104: _delay((unsigned long)((2000)*(48000000/4000.0)));
 12794  00013A  0E7A               	movlw	122
 12795  00013C  0100               	movlb	0	; () banked
 12796  00013E  6F9D               	movwf	(??_find_volume+1)& (0+255),b
 12797  000140  0EC1               	movlw	193
 12798  000142  6F9C               	movwf	??_find_volume& (0+255),b
 12799  000144  0E81               	movlw	129
 12800  000146                     u21847:
 12801  000146  2EE8               	decfsz	wreg,f,c
 12802  000148  D7FE               	bra	u21847
 12803  00014A  2F9C               	decfsz	??_find_volume& (0+255),f,b
 12804  00014C  D7FC               	bra	u21847
 12805  00014E  2F9D               	decfsz	(??_find_volume+1)& (0+255),f,b
 12806  000150  D7FA               	bra	u21847
 12807  000152  D000               	nop2	
 12808                           
 12809                           ;ff.c: 3106: if (fmt == 2 || (fmt < 2 && 0 != 0)) {
 12810  000154  0E02               	movlw	2
 12811  000156  0100               	movlb	0	; () banked
 12812  000158  19DB               	xorwf	find_volume@fmt& (0+255),w,b
 12813  00015A  A4D8               	btfss	status,2,c
 12814  00015C  D0B1               	goto	u18220
 12815                           
 12816                           ; BSR set to: 0
 12817                           ;ff.c: 3107: for (i = 0; i < 4; i++) {
 12818                           
 12819                           ; BSR set to: 0
 12820                           
 12821                           ; BSR set to: 0
 12822                           
 12823                           ; BSR set to: 0
 12824  00015E  0E00               	movlw	0
 12825  000160  6FDA               	movwf	(find_volume@i+1)& (0+255),b
 12826  000162  0E00               	movlw	0
 12827  000164  6FD9               	movwf	find_volume@i& (0+255),b
 12828  000166                     l13988:
 12829                           
 12830                           ; BSR set to: 0
 12831  000166  51DA               	movf	(find_volume@i+1)& (0+255),w,b
 12832  000168  E15D               	bnz	l14006
 12833  00016A  0E04               	movlw	4
 12834  00016C  5DD9               	subwf	find_volume@i& (0+255),w,b
 12835  00016E  B0D8               	btfsc	status,0,c
 12836  000170  D059               	goto	u18180
 12837                           
 12838                           ; BSR set to: 0
 12839                           ;ff.c: 3108: pt = fs->win + (446 + i * 16);
 12840                           
 12841                           ; BSR set to: 0
 12842                           
 12843                           ; BSR set to: 0
 12844  000172  0EED               	movlw	237
 12845  000174  6F9C               	movwf	??_find_volume& (0+255),b
 12846  000176  0E01               	movlw	1
 12847  000178  6F9D               	movwf	(??_find_volume+1)& (0+255),b
 12848  00017A  C0D9  F09E         	movff	find_volume@i,??_find_volume+2
 12849  00017E  C0DA  F09F         	movff	find_volume@i+1,??_find_volume+3
 12850  000182  3B9E               	swapf	(??_find_volume+2)& (0+255),f,b
 12851  000184  3B9F               	swapf	(??_find_volume+3)& (0+255),f,b
 12852  000186  0EF0               	movlw	240
 12853  000188  179F               	andwf	(??_find_volume+3)& (0+255),f,b
 12854  00018A  519E               	movf	(??_find_volume+2)& (0+255),w,b
 12855  00018C  0B0F               	andlw	15
 12856  00018E  139F               	iorwf	(??_find_volume+3)& (0+255),f,b
 12857  000190  0EF0               	movlw	240
 12858  000192  179E               	andwf	(??_find_volume+2)& (0+255),f,b
 12859  000194  519C               	movf	??_find_volume& (0+255),w,b
 12860  000196  279E               	addwf	(??_find_volume+2)& (0+255),f,b
 12861  000198  519D               	movf	(??_find_volume+1)& (0+255),w,b
 12862  00019A  239F               	addwfc	(??_find_volume+3)& (0+255),f,b
 12863  00019C  519E               	movf	(??_find_volume+2)& (0+255),w,b
 12864  00019E  25DC               	addwf	find_volume@fs& (0+255),w,b
 12865  0001A0  6FBE               	movwf	find_volume@pt& (0+255),b
 12866  0001A2  519F               	movf	(??_find_volume+3)& (0+255),w,b
 12867  0001A4  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 12868  0001A6  6FBF               	movwf	(find_volume@pt+1)& (0+255),b
 12869                           
 12870                           ; BSR set to: 0
 12871                           ;ff.c: 3109: br[i] = pt[4] ? ld_dword(pt + 8) : 0;
 12872  0001A8  EE20 F004          	lfsr	2,4
 12873  0001AC  51BE               	movf	find_volume@pt& (0+255),w,b
 12874  0001AE  26D9               	addwf	fsr2l,f,c
 12875  0001B0  51BF               	movf	(find_volume@pt+1)& (0+255),w,b
 12876  0001B2  22DA               	addwfc	fsr2h,f,c
 12877  0001B4  50DF               	movf	indf2,w,c
 12878  0001B6  A4D8               	btfss	status,2,c
 12879  0001B8  D009               	goto	l1395
 12880                           
 12881                           ; BSR set to: 0
 12882  0001BA  0E00               	movlw	0
 12883  0001BC  6FB4               	movwf	_find_volume$3041& (0+255),b
 12884  0001BE  0E00               	movlw	0
 12885  0001C0  6FB5               	movwf	(_find_volume$3041+1)& (0+255),b
 12886  0001C2  0E00               	movlw	0
 12887  0001C4  6FB6               	movwf	(_find_volume$3041+2)& (0+255),b
 12888  0001C6  0E00               	movlw	0
 12889  0001C8  6FB7               	movwf	(_find_volume$3041+3)& (0+255),b
 12890  0001CA  D010               	goto	l1397
 12891  0001CC                     l1395:
 12892                           
 12893                           ; BSR set to: 0
 12894                           
 12895                           ; BSR set to: 0
 12896  0001CC  0E08               	movlw	8
 12897  0001CE  25BE               	addwf	find_volume@pt& (0+255),w,b
 12898  0001D0  6E1A               	movwf	ld_dword@ptr,c
 12899  0001D2  0E00               	movlw	0
 12900  0001D4  21BF               	addwfc	(find_volume@pt+1)& (0+255),w,b
 12901  0001D6  6E1B               	movwf	ld_dword@ptr+1,c
 12902  0001D8  EC7C  F025         	call	_ld_dword	;wreg free
 12903  0001DC  C01A  F0B4         	movff	?_ld_dword,_find_volume$3041
 12904  0001E0  C01B  F0B5         	movff	?_ld_dword+1,_find_volume$3041+1
 12905  0001E4  C01C  F0B6         	movff	?_ld_dword+2,_find_volume$3041+2
 12906  0001E8  C01D  F0B7         	movff	?_ld_dword+3,_find_volume$3041+3
 12907  0001EC                     l1397:
 12908  0001EC  0EA4               	movlw	low find_volume@br
 12909  0001EE  0100               	movlb	0	; () banked
 12910  0001F0  6F9C               	movwf	??_find_volume& (0+255),b
 12911  0001F2  0E00               	movlw	high find_volume@br
 12912  0001F4  6F9D               	movwf	(??_find_volume+1)& (0+255),b
 12913  0001F6  90D8               	bcf	status,0,c
 12914  0001F8  35D9               	rlcf	find_volume@i& (0+255),w,b
 12915  0001FA  6ED9               	movwf	fsr2l,c
 12916  0001FC  35DA               	rlcf	(find_volume@i+1)& (0+255),w,b
 12917  0001FE  6EDA               	movwf	fsr2h,c
 12918  000200  90D8               	bcf	status,0,c
 12919  000202  36D9               	rlcf	fsr2l,f,c
 12920  000204  36DA               	rlcf	fsr2h,f,c
 12921  000206  519C               	movf	??_find_volume& (0+255),w,b
 12922  000208  26D9               	addwf	fsr2l,f,c
 12923  00020A  519D               	movf	(??_find_volume+1)& (0+255),w,b
 12924  00020C  22DA               	addwfc	fsr2h,f,c
 12925  00020E  C0B4  FFDE         	movff	_find_volume$3041,postinc2
 12926  000212  C0B5  FFDE         	movff	_find_volume$3041+1,postinc2
 12927  000216  C0B6  FFDE         	movff	_find_volume$3041+2,postinc2
 12928  00021A  C0B7  FFDE         	movff	_find_volume$3041+3,postinc2
 12929                           
 12930                           ; BSR set to: 0
 12931  00021E  4BD9               	infsnz	find_volume@i& (0+255),f,b
 12932  000220  2BDA               	incf	(find_volume@i+1)& (0+255),f,b
 12933  000222  D7A1               	goto	l13988
 12934  000224                     u18180:
 12935  000224                     l14006:
 12936                           
 12937                           ; BSR set to: 0
 12938                           ;ff.c: 3110: }
 12939                           ;ff.c: 3111: i = 0;
 12940  000224  0E00               	movlw	0
 12941  000226  6FDA               	movwf	(find_volume@i+1)& (0+255),b
 12942  000228  0E00               	movlw	0
 12943  00022A  6FD9               	movwf	find_volume@i& (0+255),b
 12944                           
 12945                           ; BSR set to: 0
 12946                           ;ff.c: 3112: if (i != 0) i--;
 12947  00022C  51D9               	movf	find_volume@i& (0+255),w,b
 12948  00022E  11DA               	iorwf	(find_volume@i+1)& (0+255),w,b
 12949  000230  B4D8               	btfsc	status,2,c
 12950  000232  D003               	goto	l1398
 12951                           
 12952                           ; BSR set to: 0
 12953  000234  07D9               	decf	find_volume@i& (0+255),f,b
 12954  000236  A0D8               	btfss	status,0,c
 12955  000238  07DA               	decf	(find_volume@i+1)& (0+255),f,b
 12956  00023A                     l1398:
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;ff.c: 3114: bsect = br[i];
 12960                           
 12961                           ; BSR set to: 0
 12962                           
 12963                           ;ff.c: 3113: do {
 12964                           
 12965                           ; BSR set to: 0
 12966  00023A  0EA4               	movlw	low find_volume@br
 12967  00023C  6F9C               	movwf	??_find_volume& (0+255),b
 12968  00023E  0E00               	movlw	high find_volume@br
 12969  000240  6F9D               	movwf	(??_find_volume+1)& (0+255),b
 12970  000242  90D8               	bcf	status,0,c
 12971  000244  35D9               	rlcf	find_volume@i& (0+255),w,b
 12972  000246  6ED9               	movwf	fsr2l,c
 12973  000248  35DA               	rlcf	(find_volume@i+1)& (0+255),w,b
 12974  00024A  6EDA               	movwf	fsr2h,c
 12975  00024C  90D8               	bcf	status,0,c
 12976  00024E  36D9               	rlcf	fsr2l,f,c
 12977  000250  36DA               	rlcf	fsr2h,f,c
 12978  000252  519C               	movf	??_find_volume& (0+255),w,b
 12979  000254  26D9               	addwf	fsr2l,f,c
 12980  000256  519D               	movf	(??_find_volume+1)& (0+255),w,b
 12981  000258  22DA               	addwfc	fsr2h,f,c
 12982  00025A  CFDE F0D5          	movff	postinc2,find_volume@bsect
 12983  00025E  CFDE F0D6          	movff	postinc2,find_volume@bsect+1
 12984  000262  CFDE F0D7          	movff	postinc2,find_volume@bsect+2
 12985  000266  CFDE F0D8          	movff	postinc2,find_volume@bsect+3
 12986                           
 12987                           ; BSR set to: 0
 12988                           ;ff.c: 3115: fmt = bsect ? check_fs(fs, bsect) : 3;
 12989  00026A  51D5               	movf	find_volume@bsect& (0+255),w,b
 12990  00026C  11D6               	iorwf	(find_volume@bsect+1)& (0+255),w,b
 12991  00026E  11D7               	iorwf	(find_volume@bsect+2)& (0+255),w,b
 12992  000270  11D8               	iorwf	(find_volume@bsect+3)& (0+255),w,b
 12993  000272  A4D8               	btfss	status,2,c
 12994  000274  D005               	goto	l1401
 12995                           
 12996                           ; BSR set to: 0
 12997  000276  0E00               	movlw	0
 12998  000278  6FB9               	movwf	(_find_volume$3042+1)& (0+255),b
 12999  00027A  0E03               	movlw	3
 13000  00027C  6FB8               	movwf	_find_volume$3042& (0+255),b
 13001  00027E  D013               	goto	l1403
 13002  000280                     l1401:
 13003                           
 13004                           ; BSR set to: 0
 13005                           
 13006                           ; BSR set to: 0
 13007  000280  C0DC  F090         	movff	find_volume@fs,check_fs@fs
 13008  000284  C0DD  F091         	movff	find_volume@fs+1,check_fs@fs+1
 13009  000288  C0D5  F092         	movff	find_volume@bsect,check_fs@sect
 13010  00028C  C0D6  F093         	movff	find_volume@bsect+1,check_fs@sect+1
 13011  000290  C0D7  F094         	movff	find_volume@bsect+2,check_fs@sect+2
 13012  000294  C0D8  F095         	movff	find_volume@bsect+3,check_fs@sect+3
 13013  000298  EC90  F021         	call	_check_fs	;wreg free
 13014  00029C  0100               	movlb	0	; () banked
 13015  00029E  6F9C               	movwf	??_find_volume& (0+255),b
 13016  0002A0  519C               	movf	??_find_volume& (0+255),w,b
 13017  0002A2  6FB8               	movwf	_find_volume$3042& (0+255),b
 13018  0002A4  6BB9               	clrf	(_find_volume$3042+1)& (0+255),b
 13019  0002A6                     l1403:
 13020                           
 13021                           ; BSR set to: 0
 13022                           ;ff.c: 3116: } while (0 == 0 && fmt >= 2 && ++i < 4);
 13023                           
 13024                           ; BSR set to: 0
 13025  0002A6  C0B8  F0DB         	movff	_find_volume$3042,find_volume@fmt
 13026                           
 13027                           ; BSR set to: 0
 13028  0002AA  0E01               	movlw	1
 13029  0002AC  65DB               	cpfsgt	find_volume@fmt& (0+255),b
 13030  0002AE  D008               	goto	u18220
 13031                           
 13032                           ; BSR set to: 0
 13033  0002B0  4BD9               	infsnz	find_volume@i& (0+255),f,b
 13034  0002B2  2BDA               	incf	(find_volume@i+1)& (0+255),f,b
 13035  0002B4  51DA               	movf	(find_volume@i+1)& (0+255),w,b
 13036  0002B6  E104               	bnz	l14026
 13037  0002B8  0E04               	movlw	4
 13038  0002BA  5DD9               	subwf	find_volume@i& (0+255),w,b
 13039  0002BC  A0D8               	btfss	status,0,c
 13040  0002BE  D7BD               	goto	l1398
 13041  0002C0                     u18220:
 13042  0002C0                     l14026:
 13043                           
 13044                           ; BSR set to: 0
 13045                           ;ff.c: 3117: }
 13046                           ;ff.c: 3118: if (fmt == 4) return FR_DISK_ERR;
 13047  0002C0  0E04               	movlw	4
 13048  0002C2  19DB               	xorwf	find_volume@fmt& (0+255),w,b
 13049  0002C4  A4D8               	btfss	status,2,c
 13050  0002C6  D002               	goto	l1407
 13051                           
 13052                           ; BSR set to: 0
 13053  0002C8  0E01               	movlw	1
 13054                           
 13055                           ; BSR set to: 0
 13056  0002CA  0012               	return	
 13057  0002CC                     l1407:
 13058                           
 13059                           ; BSR set to: 0
 13060                           ;ff.c: 3119: if (fmt >= 2) return FR_NO_FILESYSTEM;
 13061                           
 13062                           ; BSR set to: 0
 13063  0002CC  0E01               	movlw	1
 13064  0002CE  65DB               	cpfsgt	find_volume@fmt& (0+255),b
 13065  0002D0  D002               	goto	l1408
 13066                           
 13067                           ; BSR set to: 0
 13068  0002D2  0E0D               	movlw	13
 13069                           
 13070                           ; BSR set to: 0
 13071  0002D4  0012               	return	
 13072  0002D6                     l1408:
 13073                           
 13074                           ; BSR set to: 0
 13075                           ;ff.c: 3170: {
 13076                           ;ff.c: 3171: if (ld_word(fs->win + 11) != ((UINT)512)) return FR_NO_FILESYSTEM;
 13077                           
 13078                           ; BSR set to: 0
 13079  0002D6  0E3A               	movlw	58
 13080  0002D8  25DC               	addwf	find_volume@fs& (0+255),w,b
 13081  0002DA  6E1A               	movwf	ld_word@ptr,c
 13082  0002DC  0E00               	movlw	0
 13083  0002DE  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 13084  0002E0  6E1B               	movwf	ld_word@ptr+1,c
 13085  0002E2  ECAE  F02C         	call	_ld_word	;wreg free
 13086  0002E6  0E02               	movlw	2
 13087  0002E8  181B               	xorwf	?_ld_word+1,w,c
 13088  0002EA  101A               	iorwf	?_ld_word,w,c
 13089  0002EC  B4D8               	btfsc	status,2,c
 13090  0002EE  D002               	goto	l1409
 13091  0002F0  0E0D               	movlw	13
 13092  0002F2  0012               	return	
 13093  0002F4                     l1409:
 13094                           
 13095                           ;ff.c: 3173: fasize = ld_word(fs->win + 22);
 13096  0002F4  0E45               	movlw	69
 13097  0002F6  0100               	movlb	0	; () banked
 13098  0002F8  25DC               	addwf	find_volume@fs& (0+255),w,b
 13099  0002FA  6E1A               	movwf	ld_word@ptr,c
 13100  0002FC  0E00               	movlw	0
 13101  0002FE  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 13102  000300  6E1B               	movwf	ld_word@ptr+1,c
 13103  000302  ECAE  F02C         	call	_ld_word	;wreg free
 13104  000306  C01A  F0D1         	movff	?_ld_word,find_volume@fasize
 13105  00030A  C01B  F0D2         	movff	?_ld_word+1,find_volume@fasize+1
 13106  00030E  0100               	movlb	0	; () banked
 13107  000310  6BD3               	clrf	(find_volume@fasize+2)& (0+255),b
 13108  000312  6BD4               	clrf	(find_volume@fasize+3)& (0+255),b
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;ff.c: 3174: if (fasize == 0) fasize = ld_dword(fs->win + 36);
 13112  000314  51D1               	movf	find_volume@fasize& (0+255),w,b
 13113  000316  11D2               	iorwf	(find_volume@fasize+1)& (0+255),w,b
 13114  000318  11D3               	iorwf	(find_volume@fasize+2)& (0+255),w,b
 13115  00031A  11D4               	iorwf	(find_volume@fasize+3)& (0+255),w,b
 13116  00031C  A4D8               	btfss	status,2,c
 13117  00031E  D010               	goto	l1410
 13118                           
 13119                           ; BSR set to: 0
 13120  000320  0E53               	movlw	83
 13121  000322  25DC               	addwf	find_volume@fs& (0+255),w,b
 13122  000324  6E1A               	movwf	ld_dword@ptr,c
 13123  000326  0E00               	movlw	0
 13124  000328  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 13125  00032A  6E1B               	movwf	ld_dword@ptr+1,c
 13126  00032C  EC7C  F025         	call	_ld_dword	;wreg free
 13127  000330  C01A  F0D1         	movff	?_ld_dword,find_volume@fasize
 13128  000334  C01B  F0D2         	movff	?_ld_dword+1,find_volume@fasize+1
 13129  000338  C01C  F0D3         	movff	?_ld_dword+2,find_volume@fasize+2
 13130  00033C  C01D  F0D4         	movff	?_ld_dword+3,find_volume@fasize+3
 13131  000340                     l1410:
 13132                           
 13133                           ;ff.c: 3175: fs->fsize = fasize;
 13134  000340  0100               	movlb	0	; () banked
 13135  000342  EE20 F017          	lfsr	2,23
 13136  000346  51DC               	movf	find_volume@fs& (0+255),w,b
 13137  000348  26D9               	addwf	fsr2l,f,c
 13138  00034A  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13139  00034C  22DA               	addwfc	fsr2h,f,c
 13140  00034E  C0D1  FFDE         	movff	find_volume@fasize,postinc2
 13141  000352  C0D2  FFDE         	movff	find_volume@fasize+1,postinc2
 13142  000356  C0D3  FFDE         	movff	find_volume@fasize+2,postinc2
 13143  00035A  C0D4  FFDE         	movff	find_volume@fasize+3,postinc2
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;ff.c: 3177: fs->n_fats = fs->win[16];
 13147  00035E  EE20 F03F          	lfsr	2,63
 13148  000362  51DC               	movf	find_volume@fs& (0+255),w,b
 13149  000364  26D9               	addwf	fsr2l,f,c
 13150  000366  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13151  000368  22DA               	addwfc	fsr2h,f,c
 13152  00036A  EE10 F002          	lfsr	1,2
 13153  00036E  51DC               	movf	find_volume@fs& (0+255),w,b
 13154  000370  26E1               	addwf	fsr1l,f,c
 13155  000372  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13156  000374  22E2               	addwfc	fsr1h,f,c
 13157  000376  CFDF FFE7          	movff	indf2,indf1
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;ff.c: 3178: if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;
 13161  00037A  EE20 F002          	lfsr	2,2
 13162  00037E  51DC               	movf	find_volume@fs& (0+255),w,b
 13163  000380  26D9               	addwf	fsr2l,f,c
 13164  000382  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13165  000384  22DA               	addwfc	fsr2h,f,c
 13166  000386  04DE               	decf	postinc2,w,c
 13167  000388  B4D8               	btfsc	status,2,c
 13168  00038A  D00C               	goto	l1411
 13169                           
 13170                           ; BSR set to: 0
 13171  00038C  EE20 F002          	lfsr	2,2
 13172  000390  51DC               	movf	find_volume@fs& (0+255),w,b
 13173  000392  26D9               	addwf	fsr2l,f,c
 13174  000394  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13175  000396  22DA               	addwfc	fsr2h,f,c
 13176  000398  0E02               	movlw	2
 13177  00039A  18DE               	xorwf	postinc2,w,c
 13178  00039C  B4D8               	btfsc	status,2,c
 13179  00039E  D002               	goto	l1411
 13180                           
 13181                           ; BSR set to: 0
 13182  0003A0  0E0D               	movlw	13
 13183                           
 13184                           ; BSR set to: 0
 13185  0003A2  0012               	return	
 13186  0003A4                     l1411:
 13187                           
 13188                           ; BSR set to: 0
 13189                           ;ff.c: 3179: fasize *= fs->n_fats;
 13190                           
 13191                           ; BSR set to: 0
 13192  0003A4  C0D1  F01A         	movff	find_volume@fasize,___lmul@multiplier
 13193  0003A8  C0D2  F01B         	movff	find_volume@fasize+1,___lmul@multiplier+1
 13194  0003AC  C0D3  F01C         	movff	find_volume@fasize+2,___lmul@multiplier+2
 13195  0003B0  C0D4  F01D         	movff	find_volume@fasize+3,___lmul@multiplier+3
 13196  0003B4  EE20 F002          	lfsr	2,2
 13197  0003B8  51DC               	movf	find_volume@fs& (0+255),w,b
 13198  0003BA  26D9               	addwf	fsr2l,f,c
 13199  0003BC  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13200  0003BE  22DA               	addwfc	fsr2h,f,c
 13201  0003C0  50DF               	movf	indf2,w,c
 13202  0003C2  6F9C               	movwf	??_find_volume& (0+255),b
 13203  0003C4  519C               	movf	??_find_volume& (0+255),w,b
 13204  0003C6  6E1E               	movwf	___lmul@multiplicand,c
 13205  0003C8  6A1F               	clrf	___lmul@multiplicand+1,c
 13206  0003CA  6A20               	clrf	___lmul@multiplicand+2,c
 13207  0003CC  6A21               	clrf	___lmul@multiplicand+3,c
 13208  0003CE  ECBF  F02A         	call	___lmul	;wreg free
 13209  0003D2  C01A  F0D1         	movff	?___lmul,find_volume@fasize
 13210  0003D6  C01B  F0D2         	movff	?___lmul+1,find_volume@fasize+1
 13211  0003DA  C01C  F0D3         	movff	?___lmul+2,find_volume@fasize+2
 13212  0003DE  C01D  F0D4         	movff	?___lmul+3,find_volume@fasize+3
 13213                           
 13214                           ;ff.c: 3181: fs->csize = fs->win[13];
 13215  0003E2  0100               	movlb	0	; () banked
 13216  0003E4  EE20 F03C          	lfsr	2,60
 13217  0003E8  51DC               	movf	find_volume@fs& (0+255),w,b
 13218  0003EA  26D9               	addwf	fsr2l,f,c
 13219  0003EC  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13220  0003EE  22DA               	addwfc	fsr2h,f,c
 13221  0003F0  50DF               	movf	indf2,w,c
 13222  0003F2  6F9C               	movwf	??_find_volume& (0+255),b
 13223  0003F4  6B9D               	clrf	(??_find_volume+1)& (0+255),b
 13224  0003F6  EE20 F009          	lfsr	2,9
 13225  0003FA  51DC               	movf	find_volume@fs& (0+255),w,b
 13226  0003FC  26D9               	addwf	fsr2l,f,c
 13227  0003FE  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13228  000400  22DA               	addwfc	fsr2h,f,c
 13229  000402  C09C  FFDE         	movff	??_find_volume,postinc2
 13230  000406  C09D  FFDD         	movff	??_find_volume+1,postdec2
 13231                           
 13232                           ; BSR set to: 0
 13233                           ;ff.c: 3182: if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTE
      +                          M;
 13234  00040A  EE20 F009          	lfsr	2,9
 13235  00040E  51DC               	movf	find_volume@fs& (0+255),w,b
 13236  000410  26D9               	addwf	fsr2l,f,c
 13237  000412  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13238  000414  22DA               	addwfc	fsr2h,f,c
 13239  000416  50DE               	movf	postinc2,w,c
 13240  000418  10DE               	iorwf	postinc2,w,c
 13241  00041A  B4D8               	btfsc	status,2,c
 13242  00041C  D024               	goto	u18300
 13243                           
 13244                           ; BSR set to: 0
 13245  00041E  EE20 F009          	lfsr	2,9
 13246  000422  51DC               	movf	find_volume@fs& (0+255),w,b
 13247  000424  26D9               	addwf	fsr2l,f,c
 13248  000426  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13249  000428  22DA               	addwfc	fsr2h,f,c
 13250  00042A  CFDE F09C          	movff	postinc2,??_find_volume
 13251  00042E  CFDD F09D          	movff	postdec2,??_find_volume+1
 13252  000432  0EFF               	movlw	255
 13253  000434  6F9E               	movwf	(??_find_volume+2)& (0+255),b
 13254  000436  0EFF               	movlw	255
 13255  000438  6F9F               	movwf	(??_find_volume+3)& (0+255),b
 13256  00043A  EE20 F009          	lfsr	2,9
 13257  00043E  51DC               	movf	find_volume@fs& (0+255),w,b
 13258  000440  26D9               	addwf	fsr2l,f,c
 13259  000442  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13260  000444  22DA               	addwfc	fsr2h,f,c
 13261  000446  CFDE F0A0          	movff	postinc2,??_find_volume+4
 13262  00044A  CFDD F0A1          	movff	postdec2,??_find_volume+5
 13263  00044E  519E               	movf	(??_find_volume+2)& (0+255),w,b
 13264  000450  27A0               	addwf	(??_find_volume+4)& (0+255),f,b
 13265  000452  519F               	movf	(??_find_volume+3)& (0+255),w,b
 13266  000454  23A1               	addwfc	(??_find_volume+5)& (0+255),f,b
 13267  000456  519C               	movf	??_find_volume& (0+255),w,b
 13268  000458  17A0               	andwf	(??_find_volume+4)& (0+255),f,b
 13269  00045A  519D               	movf	(??_find_volume+1)& (0+255),w,b
 13270  00045C  17A1               	andwf	(??_find_volume+5)& (0+255),f,b
 13271  00045E  51A0               	movf	(??_find_volume+4)& (0+255),w,b
 13272  000460  11A1               	iorwf	(??_find_volume+5)& (0+255),w,b
 13273  000462  B4D8               	btfsc	status,2,c
 13274  000464  D002               	goto	l1412
 13275  000466                     u18300:
 13276                           
 13277                           ; BSR set to: 0
 13278                           
 13279                           ; BSR set to: 0
 13280  000466  0E0D               	movlw	13
 13281                           
 13282                           ; BSR set to: 0
 13283  000468  0012               	return	
 13284  00046A                     l1412:
 13285                           
 13286                           ; BSR set to: 0
 13287                           ;ff.c: 3184: fs->n_rootdir = ld_word(fs->win + 17);
 13288                           
 13289                           ; BSR set to: 0
 13290  00046A  0E40               	movlw	64
 13291  00046C  25DC               	addwf	find_volume@fs& (0+255),w,b
 13292  00046E  6E1A               	movwf	ld_word@ptr,c
 13293  000470  0E00               	movlw	0
 13294  000472  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 13295  000474  6E1B               	movwf	ld_word@ptr+1,c
 13296  000476  ECAE  F02C         	call	_ld_word	;wreg free
 13297  00047A  0100               	movlb	0	; () banked
 13298  00047C  EE20 F007          	lfsr	2,7
 13299  000480  51DC               	movf	find_volume@fs& (0+255),w,b
 13300  000482  26D9               	addwf	fsr2l,f,c
 13301  000484  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13302  000486  22DA               	addwfc	fsr2h,f,c
 13303  000488  C01A  FFDE         	movff	?_ld_word,postinc2
 13304  00048C  C01B  FFDD         	movff	?_ld_word+1,postdec2
 13305                           
 13306                           ; BSR set to: 0
 13307                           ;ff.c: 3185: if (fs->n_rootdir % (((UINT)512) / 32)) return FR_NO_FILESYSTEM;
 13308  000490  EE20 F007          	lfsr	2,7
 13309  000494  51DC               	movf	find_volume@fs& (0+255),w,b
 13310  000496  26D9               	addwf	fsr2l,f,c
 13311  000498  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13312  00049A  22DA               	addwfc	fsr2h,f,c
 13313  00049C  CFDE F09C          	movff	postinc2,??_find_volume
 13314  0004A0  CFDD F09D          	movff	postdec2,??_find_volume+1
 13315  0004A4  0E0F               	movlw	15
 13316  0004A6  179C               	andwf	??_find_volume& (0+255),f,b
 13317  0004A8  0E00               	movlw	0
 13318  0004AA  179D               	andwf	(??_find_volume+1)& (0+255),f,b
 13319  0004AC  519C               	movf	??_find_volume& (0+255),w,b
 13320  0004AE  119D               	iorwf	(??_find_volume+1)& (0+255),w,b
 13321  0004B0  B4D8               	btfsc	status,2,c
 13322  0004B2  D002               	goto	l1415
 13323                           
 13324                           ; BSR set to: 0
 13325  0004B4  0E0D               	movlw	13
 13326                           
 13327                           ; BSR set to: 0
 13328  0004B6  0012               	return	
 13329  0004B8                     l1415:
 13330                           
 13331                           ; BSR set to: 0
 13332                           ;ff.c: 3187: tsect = ld_word(fs->win + 19);
 13333                           
 13334                           ; BSR set to: 0
 13335  0004B8  0E42               	movlw	66
 13336  0004BA  25DC               	addwf	find_volume@fs& (0+255),w,b
 13337  0004BC  6E1A               	movwf	ld_word@ptr,c
 13338  0004BE  0E00               	movlw	0
 13339  0004C0  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 13340  0004C2  6E1B               	movwf	ld_word@ptr+1,c
 13341  0004C4  ECAE  F02C         	call	_ld_word	;wreg free
 13342  0004C8  C01A  F0C8         	movff	?_ld_word,find_volume@tsect
 13343  0004CC  C01B  F0C9         	movff	?_ld_word+1,find_volume@tsect+1
 13344  0004D0  0100               	movlb	0	; () banked
 13345  0004D2  6BCA               	clrf	(find_volume@tsect+2)& (0+255),b
 13346  0004D4  6BCB               	clrf	(find_volume@tsect+3)& (0+255),b
 13347                           
 13348                           ; BSR set to: 0
 13349                           ;ff.c: 3188: if (tsect == 0) tsect = ld_dword(fs->win + 32);
 13350  0004D6  51C8               	movf	find_volume@tsect& (0+255),w,b
 13351  0004D8  11C9               	iorwf	(find_volume@tsect+1)& (0+255),w,b
 13352  0004DA  11CA               	iorwf	(find_volume@tsect+2)& (0+255),w,b
 13353  0004DC  11CB               	iorwf	(find_volume@tsect+3)& (0+255),w,b
 13354  0004DE  A4D8               	btfss	status,2,c
 13355  0004E0  D010               	goto	l1416
 13356                           
 13357                           ; BSR set to: 0
 13358  0004E2  0E4F               	movlw	79
 13359  0004E4  25DC               	addwf	find_volume@fs& (0+255),w,b
 13360  0004E6  6E1A               	movwf	ld_dword@ptr,c
 13361  0004E8  0E00               	movlw	0
 13362  0004EA  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 13363  0004EC  6E1B               	movwf	ld_dword@ptr+1,c
 13364  0004EE  EC7C  F025         	call	_ld_dword	;wreg free
 13365  0004F2  C01A  F0C8         	movff	?_ld_dword,find_volume@tsect
 13366  0004F6  C01B  F0C9         	movff	?_ld_dword+1,find_volume@tsect+1
 13367  0004FA  C01C  F0CA         	movff	?_ld_dword+2,find_volume@tsect+2
 13368  0004FE  C01D  F0CB         	movff	?_ld_dword+3,find_volume@tsect+3
 13369  000502                     l1416:
 13370                           
 13371                           ;ff.c: 3190: nrsv = ld_word(fs->win + 14);
 13372  000502  0E3D               	movlw	61
 13373  000504  0100               	movlb	0	; () banked
 13374  000506  25DC               	addwf	find_volume@fs& (0+255),w,b
 13375  000508  6E1A               	movwf	ld_word@ptr,c
 13376  00050A  0E00               	movlw	0
 13377  00050C  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 13378  00050E  6E1B               	movwf	ld_word@ptr+1,c
 13379  000510  ECAE  F02C         	call	_ld_word	;wreg free
 13380  000514  C01A  F0C6         	movff	?_ld_word,find_volume@nrsv
 13381  000518  C01B  F0C7         	movff	?_ld_word+1,find_volume@nrsv+1
 13382                           
 13383                           ;ff.c: 3191: if (nrsv == 0) return FR_NO_FILESYSTEM;
 13384  00051C  0100               	movlb	0	; () banked
 13385  00051E  51C6               	movf	find_volume@nrsv& (0+255),w,b
 13386  000520  11C7               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
 13387  000522  A4D8               	btfss	status,2,c
 13388  000524  D002               	goto	l1417
 13389                           
 13390                           ; BSR set to: 0
 13391  000526  0E0D               	movlw	13
 13392                           
 13393                           ; BSR set to: 0
 13394  000528  0012               	return	
 13395  00052A                     l1417:
 13396                           
 13397                           ; BSR set to: 0
 13398                           ;ff.c: 3194: sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
 13399                           
 13400                           ; BSR set to: 0
 13401  00052A  EE20 F007          	lfsr	2,7
 13402  00052E  51DC               	movf	find_volume@fs& (0+255),w,b
 13403  000530  26D9               	addwf	fsr2l,f,c
 13404  000532  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13405  000534  22DA               	addwfc	fsr2h,f,c
 13406  000536  CFDE F09C          	movff	postinc2,??_find_volume
 13407  00053A  CFDD F09D          	movff	postdec2,??_find_volume+1
 13408  00053E  0E04               	movlw	4
 13409  000540  6F9E               	movwf	(??_find_volume+2)& (0+255),b
 13410  000542                     u18345:
 13411  000542  90D8               	bcf	status,0,c
 13412  000544  339D               	rrcf	(??_find_volume+1)& (0+255),f,b
 13413  000546  339C               	rrcf	??_find_volume& (0+255),f,b
 13414  000548  2F9E               	decfsz	(??_find_volume+2)& (0+255),f,b
 13415  00054A  D7FB               	goto	u18345
 13416  00054C  51C6               	movf	find_volume@nrsv& (0+255),w,b
 13417  00054E  259C               	addwf	??_find_volume& (0+255),w,b
 13418  000550  6F9F               	movwf	(??_find_volume+3)& (0+255),b
 13419  000552  51C7               	movf	(find_volume@nrsv+1)& (0+255),w,b
 13420  000554  219D               	addwfc	(??_find_volume+1)& (0+255),w,b
 13421  000556  6FA0               	movwf	(??_find_volume+4)& (0+255),b
 13422  000558  6BA1               	clrf	(??_find_volume+5)& (0+255),b
 13423  00055A  B0D8               	btfsc	status,0,c
 13424  00055C  2BA1               	incf	(??_find_volume+5)& (0+255),f,b
 13425  00055E  6BA2               	clrf	(??_find_volume+6)& (0+255),b
 13426  000560  51D1               	movf	find_volume@fasize& (0+255),w,b
 13427  000562  259F               	addwf	(??_find_volume+3)& (0+255),w,b
 13428  000564  6FC0               	movwf	find_volume@sysect& (0+255),b
 13429  000566  51D2               	movf	(find_volume@fasize+1)& (0+255),w,b
 13430  000568  21A0               	addwfc	(??_find_volume+4)& (0+255),w,b
 13431  00056A  6FC1               	movwf	(find_volume@sysect+1)& (0+255),b
 13432  00056C  51D3               	movf	(find_volume@fasize+2)& (0+255),w,b
 13433  00056E  21A1               	addwfc	(??_find_volume+5)& (0+255),w,b
 13434  000570  6FC2               	movwf	(find_volume@sysect+2)& (0+255),b
 13435  000572  51D4               	movf	(find_volume@fasize+3)& (0+255),w,b
 13436  000574  21A2               	addwfc	(??_find_volume+6)& (0+255),w,b
 13437  000576  6FC3               	movwf	(find_volume@sysect+3)& (0+255),b
 13438                           
 13439                           ; BSR set to: 0
 13440                           ;ff.c: 3195: if (tsect < sysect) return FR_NO_FILESYSTEM;
 13441  000578  51C0               	movf	find_volume@sysect& (0+255),w,b
 13442  00057A  5DC8               	subwf	find_volume@tsect& (0+255),w,b
 13443  00057C  51C1               	movf	(find_volume@sysect+1)& (0+255),w,b
 13444  00057E  59C9               	subwfb	(find_volume@tsect+1)& (0+255),w,b
 13445  000580  51C2               	movf	(find_volume@sysect+2)& (0+255),w,b
 13446  000582  59CA               	subwfb	(find_volume@tsect+2)& (0+255),w,b
 13447  000584  51C3               	movf	(find_volume@sysect+3)& (0+255),w,b
 13448  000586  59CB               	subwfb	(find_volume@tsect+3)& (0+255),w,b
 13449  000588  B0D8               	btfsc	status,0,c
 13450  00058A  D002               	goto	l1418
 13451                           
 13452                           ; BSR set to: 0
 13453  00058C  0E0D               	movlw	13
 13454                           
 13455                           ; BSR set to: 0
 13456  00058E  0012               	return	
 13457  000590                     l1418:
 13458                           
 13459                           ; BSR set to: 0
 13460                           ;ff.c: 3196: nclst = (tsect - sysect) / fs->csize;
 13461                           
 13462                           ; BSR set to: 0
 13463  000590  C0C0  F09C         	movff	find_volume@sysect,??_find_volume
 13464  000594  C0C1  F09D         	movff	find_volume@sysect+1,??_find_volume+1
 13465  000598  C0C2  F09E         	movff	find_volume@sysect+2,??_find_volume+2
 13466  00059C  C0C3  F09F         	movff	find_volume@sysect+3,??_find_volume+3
 13467  0005A0  1F9C               	comf	??_find_volume& (0+255),f,b
 13468  0005A2  1F9D               	comf	(??_find_volume+1)& (0+255),f,b
 13469  0005A4  1F9E               	comf	(??_find_volume+2)& (0+255),f,b
 13470  0005A6  1F9F               	comf	(??_find_volume+3)& (0+255),f,b
 13471  0005A8  2B9C               	incf	??_find_volume& (0+255),f,b
 13472  0005AA  0E00               	movlw	0
 13473  0005AC  239D               	addwfc	(??_find_volume+1)& (0+255),f,b
 13474  0005AE  239E               	addwfc	(??_find_volume+2)& (0+255),f,b
 13475  0005B0  239F               	addwfc	(??_find_volume+3)& (0+255),f,b
 13476  0005B2  51C8               	movf	find_volume@tsect& (0+255),w,b
 13477  0005B4  259C               	addwf	??_find_volume& (0+255),w,b
 13478  0005B6  6E1A               	movwf	___lldiv@dividend,c
 13479  0005B8  51C9               	movf	(find_volume@tsect+1)& (0+255),w,b
 13480  0005BA  219D               	addwfc	(??_find_volume+1)& (0+255),w,b
 13481  0005BC  6E1B               	movwf	___lldiv@dividend+1,c
 13482  0005BE  51CA               	movf	(find_volume@tsect+2)& (0+255),w,b
 13483  0005C0  219E               	addwfc	(??_find_volume+2)& (0+255),w,b
 13484  0005C2  6E1C               	movwf	___lldiv@dividend+2,c
 13485  0005C4  51CB               	movf	(find_volume@tsect+3)& (0+255),w,b
 13486  0005C6  219F               	addwfc	(??_find_volume+3)& (0+255),w,b
 13487  0005C8  6E1D               	movwf	___lldiv@dividend+3,c
 13488  0005CA  EE20 F009          	lfsr	2,9
 13489  0005CE  51DC               	movf	find_volume@fs& (0+255),w,b
 13490  0005D0  26D9               	addwf	fsr2l,f,c
 13491  0005D2  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13492  0005D4  22DA               	addwfc	fsr2h,f,c
 13493  0005D6  CFDE F0A0          	movff	postinc2,??_find_volume+4
 13494  0005DA  CFDD F0A1          	movff	postdec2,??_find_volume+5
 13495  0005DE  C0A0  F01E         	movff	??_find_volume+4,___lldiv@divisor
 13496  0005E2  C0A1  F01F         	movff	??_find_volume+5,___lldiv@divisor+1
 13497  0005E6  6A20               	clrf	___lldiv@divisor+2,c
 13498  0005E8  6A21               	clrf	___lldiv@divisor+3,c
 13499  0005EA  EC8D  F028         	call	___lldiv	;wreg free
 13500  0005EE  C01A  F0CD         	movff	?___lldiv,find_volume@nclst
 13501  0005F2  C01B  F0CE         	movff	?___lldiv+1,find_volume@nclst+1
 13502  0005F6  C01C  F0CF         	movff	?___lldiv+2,find_volume@nclst+2
 13503  0005FA  C01D  F0D0         	movff	?___lldiv+3,find_volume@nclst+3
 13504                           
 13505                           ;ff.c: 3197: if (nclst == 0) return FR_NO_FILESYSTEM;
 13506  0005FE  0100               	movlb	0	; () banked
 13507  000600  51CD               	movf	find_volume@nclst& (0+255),w,b
 13508  000602  11CE               	iorwf	(find_volume@nclst+1)& (0+255),w,b
 13509  000604  11CF               	iorwf	(find_volume@nclst+2)& (0+255),w,b
 13510  000606  11D0               	iorwf	(find_volume@nclst+3)& (0+255),w,b
 13511  000608  A4D8               	btfss	status,2,c
 13512  00060A  D002               	goto	l1419
 13513                           
 13514                           ; BSR set to: 0
 13515  00060C  0E0D               	movlw	13
 13516                           
 13517                           ; BSR set to: 0
 13518  00060E  0012               	return	
 13519  000610                     l1419:
 13520                           
 13521                           ; BSR set to: 0
 13522                           ;ff.c: 3198: fmt = 0;
 13523                           
 13524                           ; BSR set to: 0
 13525  000610  0E00               	movlw	0
 13526  000612  6FDB               	movwf	find_volume@fmt& (0+255),b
 13527                           
 13528                           ; BSR set to: 0
 13529                           ;ff.c: 3199: if (nclst <= 0x0FFFFFF5) fmt = 3;
 13530  000614  0EF6               	movlw	246
 13531  000616  5DCD               	subwf	find_volume@nclst& (0+255),w,b
 13532  000618  0EFF               	movlw	255
 13533  00061A  59CE               	subwfb	(find_volume@nclst+1)& (0+255),w,b
 13534  00061C  0EFF               	movlw	255
 13535  00061E  59CF               	subwfb	(find_volume@nclst+2)& (0+255),w,b
 13536  000620  0E0F               	movlw	15
 13537  000622  59D0               	subwfb	(find_volume@nclst+3)& (0+255),w,b
 13538  000624  B0D8               	btfsc	status,0,c
 13539  000626  D002               	goto	l1420
 13540                           
 13541                           ; BSR set to: 0
 13542  000628  0E03               	movlw	3
 13543  00062A  6FDB               	movwf	find_volume@fmt& (0+255),b
 13544  00062C                     l1420:
 13545                           
 13546                           ; BSR set to: 0
 13547                           ;ff.c: 3200: if (nclst <= 0xFFF5) fmt = 2;
 13548                           
 13549                           ; BSR set to: 0
 13550  00062C  51D0               	movf	(find_volume@nclst+3)& (0+255),w,b
 13551  00062E  11CF               	iorwf	(find_volume@nclst+2)& (0+255),w,b
 13552  000630  E108               	bnz	l14120
 13553  000632  0EF6               	movlw	246
 13554  000634  5DCD               	subwf	find_volume@nclst& (0+255),w,b
 13555  000636  0EFF               	movlw	255
 13556  000638  59CE               	subwfb	(find_volume@nclst+1)& (0+255),w,b
 13557  00063A  B0D8               	btfsc	status,0,c
 13558  00063C  D002               	goto	l1421
 13559                           
 13560                           ; BSR set to: 0
 13561  00063E  0E02               	movlw	2
 13562  000640  6FDB               	movwf	find_volume@fmt& (0+255),b
 13563  000642                     l1421:
 13564  000642                     l14120:
 13565                           
 13566                           ; BSR set to: 0
 13567                           ;ff.c: 3201: if (nclst <= 0xFF5) fmt = 1;
 13568  000642  51D0               	movf	(find_volume@nclst+3)& (0+255),w,b
 13569  000644  11CF               	iorwf	(find_volume@nclst+2)& (0+255),w,b
 13570  000646  E108               	bnz	l1422
 13571  000648  0EF6               	movlw	246
 13572  00064A  5DCD               	subwf	find_volume@nclst& (0+255),w,b
 13573  00064C  0E0F               	movlw	15
 13574  00064E  59CE               	subwfb	(find_volume@nclst+1)& (0+255),w,b
 13575  000650  B0D8               	btfsc	status,0,c
 13576  000652  D002               	goto	l1422
 13577                           
 13578                           ; BSR set to: 0
 13579  000654  0E01               	movlw	1
 13580  000656  6FDB               	movwf	find_volume@fmt& (0+255),b
 13581  000658                     l1422:
 13582                           
 13583                           ; BSR set to: 0
 13584                           ;ff.c: 3202: if (fmt == 0) return FR_NO_FILESYSTEM;
 13585  000658  51DB               	movf	find_volume@fmt& (0+255),w,b
 13586  00065A  A4D8               	btfss	status,2,c
 13587  00065C  D002               	goto	l1423
 13588                           
 13589                           ; BSR set to: 0
 13590  00065E  0E0D               	movlw	13
 13591                           
 13592                           ; BSR set to: 0
 13593  000660  0012               	return	
 13594  000662                     l1423:
 13595                           
 13596                           ; BSR set to: 0
 13597                           ;ff.c: 3205: fs->n_fatent = nclst + 2;
 13598                           
 13599                           ; BSR set to: 0
 13600  000662  0E02               	movlw	2
 13601  000664  25CD               	addwf	find_volume@nclst& (0+255),w,b
 13602  000666  6F9C               	movwf	??_find_volume& (0+255),b
 13603  000668  0E00               	movlw	0
 13604  00066A  21CE               	addwfc	(find_volume@nclst+1)& (0+255),w,b
 13605  00066C  6F9D               	movwf	(??_find_volume+1)& (0+255),b
 13606  00066E  0E00               	movlw	0
 13607  000670  21CF               	addwfc	(find_volume@nclst+2)& (0+255),w,b
 13608  000672  6F9E               	movwf	(??_find_volume+2)& (0+255),b
 13609  000674  0E00               	movlw	0
 13610  000676  21D0               	addwfc	(find_volume@nclst+3)& (0+255),w,b
 13611  000678  6F9F               	movwf	(??_find_volume+3)& (0+255),b
 13612  00067A  EE20 F013          	lfsr	2,19
 13613  00067E  51DC               	movf	find_volume@fs& (0+255),w,b
 13614  000680  26D9               	addwf	fsr2l,f,c
 13615  000682  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13616  000684  22DA               	addwfc	fsr2h,f,c
 13617  000686  C09C  FFDE         	movff	??_find_volume,postinc2
 13618  00068A  C09D  FFDE         	movff	??_find_volume+1,postinc2
 13619  00068E  C09E  FFDE         	movff	??_find_volume+2,postinc2
 13620  000692  C09F  FFDE         	movff	??_find_volume+3,postinc2
 13621                           
 13622                           ;ff.c: 3206: fs->volbase = bsect;
 13623  000696  EE20 F01B          	lfsr	2,27
 13624  00069A  51DC               	movf	find_volume@fs& (0+255),w,b
 13625  00069C  26D9               	addwf	fsr2l,f,c
 13626  00069E  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13627  0006A0  22DA               	addwfc	fsr2h,f,c
 13628  0006A2  C0D5  FFDE         	movff	find_volume@bsect,postinc2
 13629  0006A6  C0D6  FFDE         	movff	find_volume@bsect+1,postinc2
 13630  0006AA  C0D7  FFDE         	movff	find_volume@bsect+2,postinc2
 13631  0006AE  C0D8  FFDE         	movff	find_volume@bsect+3,postinc2
 13632                           
 13633                           ;ff.c: 3207: fs->fatbase = bsect + nrsv;
 13634  0006B2  51C6               	movf	find_volume@nrsv& (0+255),w,b
 13635  0006B4  25D5               	addwf	find_volume@bsect& (0+255),w,b
 13636  0006B6  6F9C               	movwf	??_find_volume& (0+255),b
 13637  0006B8  51C7               	movf	(find_volume@nrsv+1)& (0+255),w,b
 13638  0006BA  21D6               	addwfc	(find_volume@bsect+1)& (0+255),w,b
 13639  0006BC  6F9D               	movwf	(??_find_volume+1)& (0+255),b
 13640  0006BE  0E00               	movlw	0
 13641  0006C0  21D7               	addwfc	(find_volume@bsect+2)& (0+255),w,b
 13642  0006C2  6F9E               	movwf	(??_find_volume+2)& (0+255),b
 13643  0006C4  0E00               	movlw	0
 13644  0006C6  21D8               	addwfc	(find_volume@bsect+3)& (0+255),w,b
 13645  0006C8  6F9F               	movwf	(??_find_volume+3)& (0+255),b
 13646  0006CA  EE20 F01F          	lfsr	2,31
 13647  0006CE  51DC               	movf	find_volume@fs& (0+255),w,b
 13648  0006D0  26D9               	addwf	fsr2l,f,c
 13649  0006D2  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13650  0006D4  22DA               	addwfc	fsr2h,f,c
 13651  0006D6  C09C  FFDE         	movff	??_find_volume,postinc2
 13652  0006DA  C09D  FFDE         	movff	??_find_volume+1,postinc2
 13653  0006DE  C09E  FFDE         	movff	??_find_volume+2,postinc2
 13654  0006E2  C09F  FFDE         	movff	??_find_volume+3,postinc2
 13655                           
 13656                           ;ff.c: 3208: fs->database = bsect + sysect;
 13657  0006E6  51C0               	movf	find_volume@sysect& (0+255),w,b
 13658  0006E8  25D5               	addwf	find_volume@bsect& (0+255),w,b
 13659  0006EA  6F9C               	movwf	??_find_volume& (0+255),b
 13660  0006EC  51C1               	movf	(find_volume@sysect+1)& (0+255),w,b
 13661  0006EE  21D6               	addwfc	(find_volume@bsect+1)& (0+255),w,b
 13662  0006F0  6F9D               	movwf	(??_find_volume+1)& (0+255),b
 13663  0006F2  51C2               	movf	(find_volume@sysect+2)& (0+255),w,b
 13664  0006F4  21D7               	addwfc	(find_volume@bsect+2)& (0+255),w,b
 13665  0006F6  6F9E               	movwf	(??_find_volume+2)& (0+255),b
 13666  0006F8  51C3               	movf	(find_volume@sysect+3)& (0+255),w,b
 13667  0006FA  21D8               	addwfc	(find_volume@bsect+3)& (0+255),w,b
 13668  0006FC  6F9F               	movwf	(??_find_volume+3)& (0+255),b
 13669  0006FE  EE20 F027          	lfsr	2,39
 13670  000702  51DC               	movf	find_volume@fs& (0+255),w,b
 13671  000704  26D9               	addwf	fsr2l,f,c
 13672  000706  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13673  000708  22DA               	addwfc	fsr2h,f,c
 13674  00070A  C09C  FFDE         	movff	??_find_volume,postinc2
 13675  00070E  C09D  FFDE         	movff	??_find_volume+1,postinc2
 13676  000712  C09E  FFDE         	movff	??_find_volume+2,postinc2
 13677  000716  C09F  FFDE         	movff	??_find_volume+3,postinc2
 13678                           
 13679                           ; BSR set to: 0
 13680                           ;ff.c: 3209: if (fmt == 3) {
 13681  00071A  0E03               	movlw	3
 13682  00071C  19DB               	xorwf	find_volume@fmt& (0+255),w,b
 13683  00071E  A4D8               	btfss	status,2,c
 13684  000720  D051               	goto	l1424
 13685                           
 13686                           ; BSR set to: 0
 13687                           ;ff.c: 3210: if (ld_word(fs->win + 42) != 0) return FR_NO_FILESYSTEM;
 13688  000722  0E59               	movlw	89
 13689  000724  25DC               	addwf	find_volume@fs& (0+255),w,b
 13690  000726  6E1A               	movwf	ld_word@ptr,c
 13691  000728  0E00               	movlw	0
 13692  00072A  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 13693  00072C  6E1B               	movwf	ld_word@ptr+1,c
 13694  00072E  ECAE  F02C         	call	_ld_word	;wreg free
 13695  000732  501A               	movf	?_ld_word,w,c
 13696  000734  101B               	iorwf	?_ld_word+1,w,c
 13697  000736  B4D8               	btfsc	status,2,c
 13698  000738  D002               	goto	l1425
 13699  00073A  0E0D               	movlw	13
 13700  00073C  0012               	return	
 13701  00073E                     l1425:
 13702                           
 13703                           ;ff.c: 3211: if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;
 13704  00073E  0100               	movlb	0	; () banked
 13705  000740  EE20 F007          	lfsr	2,7
 13706  000744  51DC               	movf	find_volume@fs& (0+255),w,b
 13707  000746  26D9               	addwf	fsr2l,f,c
 13708  000748  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13709  00074A  22DA               	addwfc	fsr2h,f,c
 13710  00074C  50DE               	movf	postinc2,w,c
 13711  00074E  10DE               	iorwf	postinc2,w,c
 13712  000750  B4D8               	btfsc	status,2,c
 13713  000752  D002               	goto	l1426
 13714                           
 13715                           ; BSR set to: 0
 13716  000754  0E0D               	movlw	13
 13717                           
 13718                           ; BSR set to: 0
 13719  000756  0012               	return	
 13720  000758                     l1426:
 13721                           
 13722                           ; BSR set to: 0
 13723                           ;ff.c: 3212: fs->dirbase = ld_dword(fs->win + 44);
 13724                           
 13725                           ; BSR set to: 0
 13726  000758  0E5B               	movlw	91
 13727  00075A  25DC               	addwf	find_volume@fs& (0+255),w,b
 13728  00075C  6E1A               	movwf	ld_dword@ptr,c
 13729  00075E  0E00               	movlw	0
 13730  000760  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 13731  000762  6E1B               	movwf	ld_dword@ptr+1,c
 13732  000764  EC7C  F025         	call	_ld_dword	;wreg free
 13733  000768  0100               	movlb	0	; () banked
 13734  00076A  EE20 F023          	lfsr	2,35
 13735  00076E  51DC               	movf	find_volume@fs& (0+255),w,b
 13736  000770  26D9               	addwf	fsr2l,f,c
 13737  000772  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13738  000774  22DA               	addwfc	fsr2h,f,c
 13739  000776  C01A  FFDE         	movff	?_ld_dword,postinc2
 13740  00077A  C01B  FFDE         	movff	?_ld_dword+1,postinc2
 13741  00077E  C01C  FFDE         	movff	?_ld_dword+2,postinc2
 13742  000782  C01D  FFDE         	movff	?_ld_dword+3,postinc2
 13743                           
 13744                           ; BSR set to: 0
 13745                           ;ff.c: 3213: szbfat = fs->n_fatent * 4;
 13746  000786  EE20 F013          	lfsr	2,19
 13747  00078A  51DC               	movf	find_volume@fs& (0+255),w,b
 13748  00078C  26D9               	addwf	fsr2l,f,c
 13749  00078E  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13750  000790  22DA               	addwfc	fsr2h,f,c
 13751  000792  CFDE F09C          	movff	postinc2,??_find_volume
 13752  000796  CFDE F09D          	movff	postinc2,??_find_volume+1
 13753  00079A  CFDE F09E          	movff	postinc2,??_find_volume+2
 13754  00079E  CFDE F09F          	movff	postinc2,??_find_volume+3
 13755  0007A2  0E02               	movlw	2
 13756  0007A4                     u18445:
 13757  0007A4  90D8               	bcf	status,0,c
 13758  0007A6  379C               	rlcf	??_find_volume& (0+255),f,b
 13759  0007A8  379D               	rlcf	(??_find_volume+1)& (0+255),f,b
 13760  0007AA  379E               	rlcf	(??_find_volume+2)& (0+255),f,b
 13761  0007AC  379F               	rlcf	(??_find_volume+3)& (0+255),f,b
 13762  0007AE  2EE8               	decfsz	wreg,f,c
 13763  0007B0  D7F9               	goto	u18445
 13764  0007B2  C09C  F0BA         	movff	??_find_volume,find_volume@szbfat
 13765  0007B6  C09D  F0BB         	movff	??_find_volume+1,find_volume@szbfat+1
 13766  0007BA  C09E  F0BC         	movff	??_find_volume+2,find_volume@szbfat+2
 13767  0007BE  C09F  F0BD         	movff	??_find_volume+3,find_volume@szbfat+3
 13768                           
 13769                           ;ff.c: 3214: } else {
 13770  0007C2  D093               	goto	l1432
 13771  0007C4                     l1424:
 13772                           
 13773                           ; BSR set to: 0
 13774                           ;ff.c: 3215: if (fs->n_rootdir == 0) return FR_NO_FILESYSTEM;
 13775                           
 13776                           ; BSR set to: 0
 13777  0007C4  EE20 F007          	lfsr	2,7
 13778  0007C8  51DC               	movf	find_volume@fs& (0+255),w,b
 13779  0007CA  26D9               	addwf	fsr2l,f,c
 13780  0007CC  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13781  0007CE  22DA               	addwfc	fsr2h,f,c
 13782  0007D0  50DE               	movf	postinc2,w,c
 13783  0007D2  10DE               	iorwf	postinc2,w,c
 13784  0007D4  A4D8               	btfss	status,2,c
 13785  0007D6  D002               	goto	l1428
 13786                           
 13787                           ; BSR set to: 0
 13788  0007D8  0E0D               	movlw	13
 13789                           
 13790                           ; BSR set to: 0
 13791  0007DA  0012               	return	
 13792  0007DC                     l1428:
 13793                           
 13794                           ; BSR set to: 0
 13795                           ;ff.c: 3216: fs->dirbase = fs->fatbase + fasize;
 13796                           
 13797                           ; BSR set to: 0
 13798  0007DC  EE20 F01F          	lfsr	2,31
 13799  0007E0  51DC               	movf	find_volume@fs& (0+255),w,b
 13800  0007E2  26D9               	addwf	fsr2l,f,c
 13801  0007E4  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13802  0007E6  22DA               	addwfc	fsr2h,f,c
 13803  0007E8  CFDE F09C          	movff	postinc2,??_find_volume
 13804  0007EC  CFDE F09D          	movff	postinc2,??_find_volume+1
 13805  0007F0  CFDE F09E          	movff	postinc2,??_find_volume+2
 13806  0007F4  CFDE F09F          	movff	postinc2,??_find_volume+3
 13807  0007F8  51D1               	movf	find_volume@fasize& (0+255),w,b
 13808  0007FA  259C               	addwf	??_find_volume& (0+255),w,b
 13809  0007FC  6FA0               	movwf	(??_find_volume+4)& (0+255),b
 13810  0007FE  51D2               	movf	(find_volume@fasize+1)& (0+255),w,b
 13811  000800  219D               	addwfc	(??_find_volume+1)& (0+255),w,b
 13812  000802  6FA1               	movwf	(??_find_volume+5)& (0+255),b
 13813  000804  51D3               	movf	(find_volume@fasize+2)& (0+255),w,b
 13814  000806  219E               	addwfc	(??_find_volume+2)& (0+255),w,b
 13815  000808  6FA2               	movwf	(??_find_volume+6)& (0+255),b
 13816  00080A  51D4               	movf	(find_volume@fasize+3)& (0+255),w,b
 13817  00080C  219F               	addwfc	(??_find_volume+3)& (0+255),w,b
 13818  00080E  6FA3               	movwf	(??_find_volume+7)& (0+255),b
 13819  000810  EE20 F023          	lfsr	2,35
 13820  000814  51DC               	movf	find_volume@fs& (0+255),w,b
 13821  000816  26D9               	addwf	fsr2l,f,c
 13822  000818  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13823  00081A  22DA               	addwfc	fsr2h,f,c
 13824  00081C  C0A0  FFDE         	movff	??_find_volume+4,postinc2
 13825  000820  C0A1  FFDE         	movff	??_find_volume+5,postinc2
 13826  000824  C0A2  FFDE         	movff	??_find_volume+6,postinc2
 13827  000828  C0A3  FFDE         	movff	??_find_volume+7,postinc2
 13828                           
 13829                           ; BSR set to: 0
 13830                           ;ff.c: 3217: szbfat = (fmt == 2) ?
 13831                           ;ff.c: 3218: fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 13832  00082C  0E02               	movlw	2
 13833  00082E  19DB               	xorwf	find_volume@fmt& (0+255),w,b
 13834  000830  B4D8               	btfsc	status,2,c
 13835  000832  D044               	goto	l1430
 13836                           
 13837                           ; BSR set to: 0
 13838  000834  EE20 F013          	lfsr	2,19
 13839  000838  51DC               	movf	find_volume@fs& (0+255),w,b
 13840  00083A  26D9               	addwf	fsr2l,f,c
 13841  00083C  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13842  00083E  22DA               	addwfc	fsr2h,f,c
 13843  000840  CFDE F09C          	movff	postinc2,??_find_volume
 13844  000844  CFDE F09D          	movff	postinc2,??_find_volume+1
 13845  000848  CFDE F09E          	movff	postinc2,??_find_volume+2
 13846  00084C  CFDE F09F          	movff	postinc2,??_find_volume+3
 13847  000850  0E01               	movlw	1
 13848  000852  159C               	andwf	??_find_volume& (0+255),w,b
 13849  000854  6FA0               	movwf	(??_find_volume+4)& (0+255),b
 13850  000856  0E00               	movlw	0
 13851  000858  159D               	andwf	(??_find_volume+1)& (0+255),w,b
 13852  00085A  6FA1               	movwf	(??_find_volume+5)& (0+255),b
 13853  00085C  0E00               	movlw	0
 13854  00085E  159E               	andwf	(??_find_volume+2)& (0+255),w,b
 13855  000860  6FA2               	movwf	(??_find_volume+6)& (0+255),b
 13856  000862  0E00               	movlw	0
 13857  000864  159F               	andwf	(??_find_volume+3)& (0+255),w,b
 13858  000866  6FA3               	movwf	(??_find_volume+7)& (0+255),b
 13859  000868  EE20 F013          	lfsr	2,19
 13860  00086C  51DC               	movf	find_volume@fs& (0+255),w,b
 13861  00086E  26D9               	addwf	fsr2l,f,c
 13862  000870  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13863  000872  22DA               	addwfc	fsr2h,f,c
 13864  000874  CFDE F01A          	movff	postinc2,___lmul@multiplier
 13865  000878  CFDE F01B          	movff	postinc2,___lmul@multiplier+1
 13866  00087C  CFDE F01C          	movff	postinc2,___lmul@multiplier+2
 13867  000880  CFDE F01D          	movff	postinc2,___lmul@multiplier+3
 13868  000884  0E03               	movlw	3
 13869  000886  6E1E               	movwf	___lmul@multiplicand,c
 13870  000888  0E00               	movlw	0
 13871  00088A  6E1F               	movwf	___lmul@multiplicand+1,c
 13872  00088C  0E00               	movlw	0
 13873  00088E  6E20               	movwf	___lmul@multiplicand+2,c
 13874  000890  0E00               	movlw	0
 13875  000892  6E21               	movwf	___lmul@multiplicand+3,c
 13876  000894  ECBF  F02A         	call	___lmul	;wreg free
 13877  000898  90D8               	bcf	status,0,c
 13878  00089A  321D               	rrcf	?___lmul+3,f,c
 13879  00089C  321C               	rrcf	?___lmul+2,f,c
 13880  00089E  321B               	rrcf	?___lmul+1,f,c
 13881  0008A0  321A               	rrcf	?___lmul,f,c
 13882  0008A2  0100               	movlb	0	; () banked
 13883  0008A4  51A0               	movf	(??_find_volume+4)& (0+255),w,b
 13884  0008A6  241A               	addwf	?___lmul,w,c
 13885  0008A8  6FBA               	movwf	find_volume@szbfat& (0+255),b
 13886  0008AA  51A1               	movf	(??_find_volume+5)& (0+255),w,b
 13887  0008AC  201B               	addwfc	?___lmul+1,w,c
 13888  0008AE  6FBB               	movwf	(find_volume@szbfat+1)& (0+255),b
 13889  0008B0  51A2               	movf	(??_find_volume+6)& (0+255),w,b
 13890  0008B2  201C               	addwfc	?___lmul+2,w,c
 13891  0008B4  6FBC               	movwf	(find_volume@szbfat+2)& (0+255),b
 13892  0008B6  51A3               	movf	(??_find_volume+7)& (0+255),w,b
 13893  0008B8  201D               	addwfc	?___lmul+3,w,c
 13894  0008BA  D016               	goto	L20
 13895  0008BC                     l1430:
 13896                           
 13897                           ; BSR set to: 0
 13898                           
 13899                           ; BSR set to: 0
 13900  0008BC  EE20 F013          	lfsr	2,19
 13901  0008C0  51DC               	movf	find_volume@fs& (0+255),w,b
 13902  0008C2  26D9               	addwf	fsr2l,f,c
 13903  0008C4  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13904  0008C6  22DA               	addwfc	fsr2h,f,c
 13905  0008C8  CFDE F09C          	movff	postinc2,??_find_volume
 13906  0008CC  CFDE F09D          	movff	postinc2,??_find_volume+1
 13907  0008D0  CFDE F09E          	movff	postinc2,??_find_volume+2
 13908  0008D4  CFDE F09F          	movff	postinc2,??_find_volume+3
 13909  0008D8  90D8               	bcf	status,0,c
 13910  0008DA  359C               	rlcf	??_find_volume& (0+255),w,b
 13911  0008DC  6FBA               	movwf	find_volume@szbfat& (0+255),b
 13912  0008DE  359D               	rlcf	(??_find_volume+1)& (0+255),w,b
 13913  0008E0  6FBB               	movwf	(find_volume@szbfat+1)& (0+255),b
 13914  0008E2  359E               	rlcf	(??_find_volume+2)& (0+255),w,b
 13915  0008E4  6FBC               	movwf	(find_volume@szbfat+2)& (0+255),b
 13916  0008E6  359F               	rlcf	(??_find_volume+3)& (0+255),w,b
 13917  0008E8                     L20:
 13918  0008E8  6FBD               	movwf	(find_volume@szbfat+3)& (0+255),b
 13919  0008EA                     l1432:
 13920                           
 13921                           ; BSR set to: 0
 13922                           ;ff.c: 3219: }
 13923                           ;ff.c: 3220: if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512)) return FR_NO_FI
      +                          LESYSTEM;
 13924                           
 13925                           ; BSR set to: 0
 13926  0008EA  0EFF               	movlw	255
 13927  0008EC  25BA               	addwf	find_volume@szbfat& (0+255),w,b
 13928  0008EE  6F9C               	movwf	??_find_volume& (0+255),b
 13929  0008F0  0E01               	movlw	1
 13930  0008F2  21BB               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
 13931  0008F4  6F9D               	movwf	(??_find_volume+1)& (0+255),b
 13932  0008F6  0E00               	movlw	0
 13933  0008F8  21BC               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
 13934  0008FA  6F9E               	movwf	(??_find_volume+2)& (0+255),b
 13935  0008FC  0E00               	movlw	0
 13936  0008FE  21BD               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
 13937  000900  6F9F               	movwf	(??_find_volume+3)& (0+255),b
 13938  000902  0E0A               	movlw	10
 13939  000904  D005               	goto	u18470
 13940  000906                     u18475:
 13941  000906  90D8               	bcf	status,0,c
 13942  000908  339F               	rrcf	(??_find_volume+3)& (0+255),f,b
 13943  00090A  339E               	rrcf	(??_find_volume+2)& (0+255),f,b
 13944  00090C  339D               	rrcf	(??_find_volume+1)& (0+255),f,b
 13945  00090E  339C               	rrcf	??_find_volume& (0+255),f,b
 13946  000910                     u18470:
 13947  000910  2EE8               	decfsz	wreg,f,c
 13948  000912  D7F9               	goto	u18475
 13949  000914  EE20 F017          	lfsr	2,23
 13950  000918  51DC               	movf	find_volume@fs& (0+255),w,b
 13951  00091A  26D9               	addwf	fsr2l,f,c
 13952  00091C  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13953  00091E  22DA               	addwfc	fsr2h,f,c
 13954  000920  519C               	movf	??_find_volume& (0+255),w,b
 13955  000922  5CDE               	subwf	postinc2,w,c
 13956  000924  519D               	movf	(??_find_volume+1)& (0+255),w,b
 13957  000926  58DE               	subwfb	postinc2,w,c
 13958  000928  519E               	movf	(??_find_volume+2)& (0+255),w,b
 13959  00092A  58DE               	subwfb	postinc2,w,c
 13960  00092C  519F               	movf	(??_find_volume+3)& (0+255),w,b
 13961  00092E  58DE               	subwfb	postinc2,w,c
 13962  000930  B0D8               	btfsc	status,0,c
 13963  000932  D002               	goto	l1433
 13964                           
 13965                           ; BSR set to: 0
 13966  000934  0E0D               	movlw	13
 13967                           
 13968                           ; BSR set to: 0
 13969  000936  0012               	return	
 13970  000938                     l1433:
 13971                           
 13972                           ; BSR set to: 0
 13973                           ;ff.c: 3224: fs->last_clst = fs->free_clst = 0xFFFFFFFF;
 13974                           
 13975                           ; BSR set to: 0
 13976  000938  EE20 F00F          	lfsr	2,15
 13977  00093C  51DC               	movf	find_volume@fs& (0+255),w,b
 13978  00093E  26D9               	addwf	fsr2l,f,c
 13979  000940  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13980  000942  22DA               	addwfc	fsr2h,f,c
 13981  000944  0EFF               	movlw	255
 13982  000946  6EDE               	movwf	postinc2,c
 13983  000948  0EFF               	movlw	255
 13984  00094A  6EDE               	movwf	postinc2,c
 13985  00094C  0EFF               	movlw	255
 13986  00094E  6EDE               	movwf	postinc2,c
 13987  000950  0EFF               	movlw	255
 13988  000952  6EDD               	movwf	postdec2,c
 13989  000954  52DD               	movf	postdec2,f,c
 13990  000956  52DD               	movf	postdec2,f,c
 13991  000958  EE10 F00B          	lfsr	1,11
 13992  00095C  51DC               	movf	find_volume@fs& (0+255),w,b
 13993  00095E  26E1               	addwf	fsr1l,f,c
 13994  000960  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 13995  000962  22E2               	addwfc	fsr1h,f,c
 13996  000964  CFDE FFE6          	movff	postinc2,postinc1
 13997  000968  CFDE FFE6          	movff	postinc2,postinc1
 13998  00096C  CFDE FFE6          	movff	postinc2,postinc1
 13999  000970  CFDE FFE6          	movff	postinc2,postinc1
 14000                           
 14001                           ; BSR set to: 0
 14002                           ;ff.c: 3225: fs->fsi_flag = 0x80;
 14003  000974  EE20 F004          	lfsr	2,4
 14004  000978  51DC               	movf	find_volume@fs& (0+255),w,b
 14005  00097A  26D9               	addwf	fsr2l,f,c
 14006  00097C  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 14007  00097E  22DA               	addwfc	fsr2h,f,c
 14008  000980  0E80               	movlw	128
 14009  000982  6EDF               	movwf	indf2,c
 14010                           
 14011                           ; BSR set to: 0
 14012                           ;ff.c: 3227: if (fmt == 3
 14013                           ;ff.c: 3228: && ld_word(fs->win + 48) == 1
 14014                           ;ff.c: 3229: && move_window(fs, bsect + 1) == FR_OK)
 14015  000984  0E03               	movlw	3
 14016  000986  19DB               	xorwf	find_volume@fmt& (0+255),w,b
 14017  000988  A4D8               	btfss	status,2,c
 14018  00098A  D095               	goto	l1435
 14019                           
 14020                           ; BSR set to: 0
 14021  00098C  0E5F               	movlw	95
 14022  00098E  25DC               	addwf	find_volume@fs& (0+255),w,b
 14023  000990  6E1A               	movwf	ld_word@ptr,c
 14024  000992  0E00               	movlw	0
 14025  000994  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 14026  000996  6E1B               	movwf	ld_word@ptr+1,c
 14027  000998  ECAE  F02C         	call	_ld_word	;wreg free
 14028  00099C  041A               	decf	?_ld_word,w,c
 14029  00099E  101B               	iorwf	?_ld_word+1,w,c
 14030  0009A0  A4D8               	btfss	status,2,c
 14031  0009A2  D089               	goto	l1435
 14032  0009A4  C0DC  F085         	movff	find_volume@fs,move_window@fs
 14033  0009A8  C0DD  F086         	movff	find_volume@fs+1,move_window@fs+1
 14034  0009AC  0E01               	movlw	1
 14035  0009AE  0100               	movlb	0	; () banked
 14036  0009B0  25D5               	addwf	find_volume@bsect& (0+255),w,b
 14037  0009B2  6F87               	movwf	move_window@sector& (0+255),b
 14038  0009B4  0E00               	movlw	0
 14039  0009B6  21D6               	addwfc	(find_volume@bsect+1)& (0+255),w,b
 14040  0009B8  6F88               	movwf	(move_window@sector+1)& (0+255),b
 14041  0009BA  0E00               	movlw	0
 14042  0009BC  21D7               	addwfc	(find_volume@bsect+2)& (0+255),w,b
 14043  0009BE  6F89               	movwf	(move_window@sector+2)& (0+255),b
 14044  0009C0  0E00               	movlw	0
 14045  0009C2  21D8               	addwfc	(find_volume@bsect+3)& (0+255),w,b
 14046  0009C4  6F8A               	movwf	(move_window@sector+3)& (0+255),b
 14047  0009C6  EC2E  F026         	call	_move_window	;wreg free
 14048  0009CA  0900               	iorlw	0
 14049  0009CC  A4D8               	btfss	status,2,c
 14050  0009CE  D073               	goto	l1435
 14051                           
 14052                           ;ff.c: 3230: {
 14053                           ;ff.c: 3231: fs->fsi_flag = 0;
 14054  0009D0  0100               	movlb	0	; () banked
 14055  0009D2  EE20 F004          	lfsr	2,4
 14056  0009D6  51DC               	movf	find_volume@fs& (0+255),w,b
 14057  0009D8  26D9               	addwf	fsr2l,f,c
 14058  0009DA  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 14059  0009DC  22DA               	addwfc	fsr2h,f,c
 14060  0009DE  0E00               	movlw	0
 14061  0009E0  6EDF               	movwf	indf2,c
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;ff.c: 3232: if (ld_word(fs->win + 510) == 0xAA55
 14065                           ;ff.c: 3233: && ld_dword(fs->win + 0) == 0x41615252
 14066                           ;ff.c: 3234: && ld_dword(fs->win + 484) == 0x61417272)
 14067  0009E2  0E2D               	movlw	45
 14068  0009E4  25DC               	addwf	find_volume@fs& (0+255),w,b
 14069  0009E6  6E1A               	movwf	ld_word@ptr,c
 14070  0009E8  0E02               	movlw	2
 14071  0009EA  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 14072  0009EC  6E1B               	movwf	ld_word@ptr+1,c
 14073  0009EE  ECAE  F02C         	call	_ld_word	;wreg free
 14074  0009F2  0E55               	movlw	85
 14075  0009F4  181A               	xorwf	?_ld_word,w,c
 14076  0009F6  E15F               	bnz	l14186
 14077  0009F8  0EAA               	movlw	170
 14078  0009FA  181B               	xorwf	?_ld_word+1,w,c
 14079  0009FC  A4D8               	btfss	status,2,c
 14080  0009FE  D05B               	goto	l1435
 14081  000A00  0E2F               	movlw	47
 14082  000A02  0100               	movlb	0	; () banked
 14083  000A04  25DC               	addwf	find_volume@fs& (0+255),w,b
 14084  000A06  6E1A               	movwf	ld_dword@ptr,c
 14085  000A08  0E00               	movlw	0
 14086  000A0A  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 14087  000A0C  6E1B               	movwf	ld_dword@ptr+1,c
 14088  000A0E  EC7C  F025         	call	_ld_dword	;wreg free
 14089  000A12  0E52               	movlw	82
 14090  000A14  181A               	xorwf	?_ld_dword,w,c
 14091  000A16  E14F               	bnz	l14186
 14092  000A18  0E52               	movlw	82
 14093  000A1A  181B               	xorwf	?_ld_dword+1,w,c
 14094  000A1C  E14C               	bnz	l14186
 14095  000A1E  0E61               	movlw	97
 14096  000A20  181C               	xorwf	?_ld_dword+2,w,c
 14097  000A22  E149               	bnz	l14186
 14098  000A24  0E41               	movlw	65
 14099  000A26  181D               	xorwf	?_ld_dword+3,w,c
 14100  000A28  A4D8               	btfss	status,2,c
 14101  000A2A  D045               	goto	l1435
 14102  000A2C  0E13               	movlw	19
 14103  000A2E  0100               	movlb	0	; () banked
 14104  000A30  25DC               	addwf	find_volume@fs& (0+255),w,b
 14105  000A32  6E1A               	movwf	ld_dword@ptr,c
 14106  000A34  0E02               	movlw	2
 14107  000A36  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 14108  000A38  6E1B               	movwf	ld_dword@ptr+1,c
 14109  000A3A  EC7C  F025         	call	_ld_dword	;wreg free
 14110  000A3E  0E72               	movlw	114
 14111  000A40  181A               	xorwf	?_ld_dword,w,c
 14112  000A42  E139               	bnz	l14186
 14113  000A44  0E72               	movlw	114
 14114  000A46  181B               	xorwf	?_ld_dword+1,w,c
 14115  000A48  E136               	bnz	l14186
 14116  000A4A  0E41               	movlw	65
 14117  000A4C  181C               	xorwf	?_ld_dword+2,w,c
 14118  000A4E  E133               	bnz	l14186
 14119  000A50  0E61               	movlw	97
 14120  000A52  181D               	xorwf	?_ld_dword+3,w,c
 14121  000A54  A4D8               	btfss	status,2,c
 14122  000A56  D02F               	goto	l1435
 14123                           
 14124                           ;ff.c: 3235: {
 14125                           ;ff.c: 3237: fs->free_clst = ld_dword(fs->win + 488);
 14126  000A58  0E17               	movlw	23
 14127  000A5A  0100               	movlb	0	; () banked
 14128  000A5C  25DC               	addwf	find_volume@fs& (0+255),w,b
 14129  000A5E  6E1A               	movwf	ld_dword@ptr,c
 14130  000A60  0E02               	movlw	2
 14131  000A62  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 14132  000A64  6E1B               	movwf	ld_dword@ptr+1,c
 14133  000A66  EC7C  F025         	call	_ld_dword	;wreg free
 14134  000A6A  0100               	movlb	0	; () banked
 14135  000A6C  EE20 F00F          	lfsr	2,15
 14136  000A70  51DC               	movf	find_volume@fs& (0+255),w,b
 14137  000A72  26D9               	addwf	fsr2l,f,c
 14138  000A74  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 14139  000A76  22DA               	addwfc	fsr2h,f,c
 14140  000A78  C01A  FFDE         	movff	?_ld_dword,postinc2
 14141  000A7C  C01B  FFDE         	movff	?_ld_dword+1,postinc2
 14142  000A80  C01C  FFDE         	movff	?_ld_dword+2,postinc2
 14143  000A84  C01D  FFDE         	movff	?_ld_dword+3,postinc2
 14144                           
 14145                           ;ff.c: 3240: fs->last_clst = ld_dword(fs->win + 492);
 14146  000A88  0E1B               	movlw	27
 14147  000A8A  25DC               	addwf	find_volume@fs& (0+255),w,b
 14148  000A8C  6E1A               	movwf	ld_dword@ptr,c
 14149  000A8E  0E02               	movlw	2
 14150  000A90  21DD               	addwfc	(find_volume@fs+1)& (0+255),w,b
 14151  000A92  6E1B               	movwf	ld_dword@ptr+1,c
 14152  000A94  EC7C  F025         	call	_ld_dword	;wreg free
 14153  000A98  0100               	movlb	0	; () banked
 14154  000A9A  EE20 F00B          	lfsr	2,11
 14155  000A9E  51DC               	movf	find_volume@fs& (0+255),w,b
 14156  000AA0  26D9               	addwf	fsr2l,f,c
 14157  000AA2  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 14158  000AA4  22DA               	addwfc	fsr2h,f,c
 14159  000AA6  C01A  FFDE         	movff	?_ld_dword,postinc2
 14160  000AAA  C01B  FFDE         	movff	?_ld_dword+1,postinc2
 14161  000AAE  C01C  FFDE         	movff	?_ld_dword+2,postinc2
 14162  000AB2  C01D  FFDE         	movff	?_ld_dword+3,postinc2
 14163  000AB6                     l1435:
 14164  000AB6                     l14186:
 14165                           
 14166                           ;ff.c: 3242: }
 14167                           ;ff.c: 3243: }
 14168                           ;ff.c: 3246: }
 14169                           ;ff.c: 3248: fs->fs_type = fmt;
 14170  000AB6  C0DC  FFD9         	movff	find_volume@fs,fsr2l
 14171  000ABA  C0DD  FFDA         	movff	find_volume@fs+1,fsr2h
 14172  000ABE  C0DB  FFDF         	movff	find_volume@fmt,indf2
 14173                           
 14174                           ;ff.c: 3249: fs->id = ++Fsid;
 14175  000AC2  0101               	movlb	1	; () banked
 14176  000AC4  4B50               	infsnz	_Fsid& (0+255),f,b
 14177  000AC6  2B51               	incf	(_Fsid+1)& (0+255),f,b
 14178  000AC8  0100               	movlb	0	; () banked
 14179  000ACA  EE20 F005          	lfsr	2,5
 14180  000ACE  51DC               	movf	find_volume@fs& (0+255),w,b
 14181  000AD0  26D9               	addwf	fsr2l,f,c
 14182  000AD2  51DD               	movf	(find_volume@fs+1)& (0+255),w,b
 14183  000AD4  22DA               	addwfc	fsr2h,f,c
 14184  000AD6  C150  FFDE         	movff	_Fsid,postinc2
 14185  000ADA  C151  FFDD         	movff	_Fsid+1,postdec2
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;ff.c: 3262: return FR_OK;
 14189  000ADE  0E00               	movlw	0
 14190  000AE0  0012               	return	
 14191  000AE2                     __end_of_find_volume:
 14192                           	opt stack 0
 14193                           tosu	equ	0xFFF
 14194                           tosh	equ	0xFFE
 14195                           tosl	equ	0xFFD
 14196                           pclath	equ	0xFFA
 14197                           tblptru	equ	0xFF8
 14198                           tblptrh	equ	0xFF7
 14199                           tblptrl	equ	0xFF6
 14200                           tablat	equ	0xFF5
 14201                           prodh	equ	0xFF4
 14202                           prodl	equ	0xFF3
 14203                           intcon	equ	0xFF2
 14204                           intcon2	equ	0xFF1
 14205                           intcon3	equ	0xFF0
 14206                           indf0	equ	0xFEF
 14207                           postinc0	equ	0xFEE
 14208                           fsr0h	equ	0xFEA
 14209                           fsr0l	equ	0xFE9
 14210                           wreg	equ	0xFE8
 14211                           indf1	equ	0xFE7
 14212                           postinc1	equ	0xFE6
 14213                           postdec1	equ	0xFE5
 14214                           fsr1h	equ	0xFE2
 14215                           fsr1l	equ	0xFE1
 14216                           indf2	equ	0xFDF
 14217                           postinc2	equ	0xFDE
 14218                           postdec2	equ	0xFDD
 14219                           plusw2	equ	0xFDB
 14220                           fsr2h	equ	0xFDA
 14221                           fsr2l	equ	0xFD9
 14222                           status	equ	0xFD8
 14223                           
 14224 ;; *************** function _ld_dword *****************
 14225 ;; Defined at:
 14226 ;;		line 558 in file "bibliotecas/ff.c"
 14227 ;; Parameters:    Size  Location     Type
 14228 ;;  ptr             2   25[COMRAM] PTR const unsigned char 
 14229 ;;		 -> fs.win(512), NULL(0), fs(559), 
 14230 ;; Auto vars:     Size  Location     Type
 14231 ;;  rv              4   34[COMRAM] unsigned long 
 14232 ;; Return value:  Size  Location     Type
 14233 ;;                  4   25[COMRAM] unsigned long 
 14234 ;; Registers used:
 14235 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14236 ;; Tracked objects:
 14237 ;;		On entry : 0/0
 14238 ;;		On exit  : 0/0
 14239 ;;		Unchanged: 0/0
 14240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14241 ;;      Params:         4       0       0       0       0       0       0       0       0
 14242 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14243 ;;      Temps:          5       0       0       0       0       0       0       0       0
 14244 ;;      Totals:        13       0       0       0       0       0       0       0       0
 14245 ;;Total ram usage:       13 bytes
 14246 ;; Hardware stack levels used:    1
 14247 ;; Hardware stack levels required when called:    2
 14248 ;; This function calls:
 14249 ;;		Nothing
 14250 ;; This function is called by:
 14251 ;;		_get_fat
 14252 ;;		_put_fat
 14253 ;;		_find_volume
 14254 ;;		_f_open
 14255 ;;		_get_fileinfo
 14256 ;;		_f_getfree
 14257 ;; This function uses a non-reentrant model
 14258 ;;
 14259                           
 14260                           	psect	text36
 14261  004AF8                     __ptext36:
 14262                           	opt stack 0
 14263  004AF8                     _ld_dword:
 14264                           	opt stack 23
 14265                           
 14266                           ;ff.c: 560: DWORD rv;
 14267                           ;ff.c: 562: rv = ptr[3];
 14268                           
 14269                           ;incstack = 0
 14270  004AF8  EE20 F003          	lfsr	2,3
 14271  004AFC  501A               	movf	ld_dword@ptr,w,c
 14272  004AFE  26D9               	addwf	fsr2l,f,c
 14273  004B00  501B               	movf	ld_dword@ptr+1,w,c
 14274  004B02  22DA               	addwfc	fsr2h,f,c
 14275  004B04  50DF               	movf	indf2,w,c
 14276  004B06  6E1E               	movwf	??_ld_dword& (0+255),c
 14277  004B08  501E               	movf	??_ld_dword,w,c
 14278  004B0A  6E23               	movwf	ld_dword@rv,c
 14279  004B0C  6A24               	clrf	ld_dword@rv+1,c
 14280  004B0E  6A25               	clrf	ld_dword@rv+2,c
 14281  004B10  6A26               	clrf	ld_dword@rv+3,c
 14282                           
 14283                           ;ff.c: 563: rv = rv << 8 | ptr[2];
 14284  004B12  EE20 F002          	lfsr	2,2
 14285  004B16  501A               	movf	ld_dword@ptr,w,c
 14286  004B18  26D9               	addwf	fsr2l,f,c
 14287  004B1A  501B               	movf	ld_dword@ptr+1,w,c
 14288  004B1C  22DA               	addwfc	fsr2h,f,c
 14289  004B1E  50DF               	movf	indf2,w,c
 14290  004B20  6E1E               	movwf	??_ld_dword& (0+255),c
 14291  004B22  501E               	movf	??_ld_dword,w,c
 14292  004B24  C023  F020         	movff	ld_dword@rv,??_ld_dword+2
 14293  004B28  C024  F021         	movff	ld_dword@rv+1,??_ld_dword+3
 14294  004B2C  C025  F022         	movff	ld_dword@rv+2,??_ld_dword+4
 14295  004B30  6A1F               	clrf	(??_ld_dword+1)& (0+255),c
 14296  004B32  101F               	iorwf	??_ld_dword+1,w,c
 14297  004B34  6E23               	movwf	ld_dword@rv,c
 14298  004B36  5020               	movf	??_ld_dword+2,w,c
 14299  004B38  6E24               	movwf	ld_dword@rv+1,c
 14300  004B3A  5021               	movf	??_ld_dword+3,w,c
 14301  004B3C  6E25               	movwf	ld_dword@rv+2,c
 14302  004B3E  5022               	movf	??_ld_dword+4,w,c
 14303  004B40  6E26               	movwf	ld_dword@rv+3,c
 14304                           
 14305                           ;ff.c: 564: rv = rv << 8 | ptr[1];
 14306  004B42  EE20 F001          	lfsr	2,1
 14307  004B46  501A               	movf	ld_dword@ptr,w,c
 14308  004B48  26D9               	addwf	fsr2l,f,c
 14309  004B4A  501B               	movf	ld_dword@ptr+1,w,c
 14310  004B4C  22DA               	addwfc	fsr2h,f,c
 14311  004B4E  50DF               	movf	indf2,w,c
 14312  004B50  6E1E               	movwf	??_ld_dword& (0+255),c
 14313  004B52  501E               	movf	??_ld_dword,w,c
 14314  004B54  C023  F020         	movff	ld_dword@rv,??_ld_dword+2
 14315  004B58  C024  F021         	movff	ld_dword@rv+1,??_ld_dword+3
 14316  004B5C  C025  F022         	movff	ld_dword@rv+2,??_ld_dword+4
 14317  004B60  6A1F               	clrf	(??_ld_dword+1)& (0+255),c
 14318  004B62  101F               	iorwf	??_ld_dword+1,w,c
 14319  004B64  6E23               	movwf	ld_dword@rv,c
 14320  004B66  5020               	movf	??_ld_dword+2,w,c
 14321  004B68  6E24               	movwf	ld_dword@rv+1,c
 14322  004B6A  5021               	movf	??_ld_dword+3,w,c
 14323  004B6C  6E25               	movwf	ld_dword@rv+2,c
 14324  004B6E  5022               	movf	??_ld_dword+4,w,c
 14325  004B70  6E26               	movwf	ld_dword@rv+3,c
 14326                           
 14327                           ;ff.c: 565: rv = rv << 8 | ptr[0];
 14328  004B72  C01A  FFD9         	movff	ld_dword@ptr,fsr2l
 14329  004B76  C01B  FFDA         	movff	ld_dword@ptr+1,fsr2h
 14330  004B7A  50DF               	movf	indf2,w,c
 14331  004B7C  6E1E               	movwf	??_ld_dword& (0+255),c
 14332  004B7E  501E               	movf	??_ld_dword,w,c
 14333  004B80  C023  F020         	movff	ld_dword@rv,??_ld_dword+2
 14334  004B84  C024  F021         	movff	ld_dword@rv+1,??_ld_dword+3
 14335  004B88  C025  F022         	movff	ld_dword@rv+2,??_ld_dword+4
 14336  004B8C  6A1F               	clrf	(??_ld_dword+1)& (0+255),c
 14337  004B8E  101F               	iorwf	??_ld_dword+1,w,c
 14338  004B90  6E23               	movwf	ld_dword@rv,c
 14339  004B92  5020               	movf	??_ld_dword+2,w,c
 14340  004B94  6E24               	movwf	ld_dword@rv+1,c
 14341  004B96  5021               	movf	??_ld_dword+3,w,c
 14342  004B98  6E25               	movwf	ld_dword@rv+2,c
 14343  004B9A  5022               	movf	??_ld_dword+4,w,c
 14344  004B9C  6E26               	movwf	ld_dword@rv+3,c
 14345                           
 14346                           ;ff.c: 566: return rv;
 14347  004B9E  C023  F01A         	movff	ld_dword@rv,?_ld_dword
 14348  004BA2  C024  F01B         	movff	ld_dword@rv+1,?_ld_dword+1
 14349  004BA6  C025  F01C         	movff	ld_dword@rv+2,?_ld_dword+2
 14350  004BAA  C026  F01D         	movff	ld_dword@rv+3,?_ld_dword+3
 14351  004BAE  0012               	return	
 14352  004BB0                     __end_of_ld_dword:
 14353                           	opt stack 0
 14354                           tosu	equ	0xFFF
 14355                           tosh	equ	0xFFE
 14356                           tosl	equ	0xFFD
 14357                           pclath	equ	0xFFA
 14358                           tblptru	equ	0xFF8
 14359                           tblptrh	equ	0xFF7
 14360                           tblptrl	equ	0xFF6
 14361                           tablat	equ	0xFF5
 14362                           prodh	equ	0xFF4
 14363                           prodl	equ	0xFF3
 14364                           intcon	equ	0xFF2
 14365                           intcon2	equ	0xFF1
 14366                           intcon3	equ	0xFF0
 14367                           indf0	equ	0xFEF
 14368                           postinc0	equ	0xFEE
 14369                           fsr0h	equ	0xFEA
 14370                           fsr0l	equ	0xFE9
 14371                           wreg	equ	0xFE8
 14372                           indf1	equ	0xFE7
 14373                           postinc1	equ	0xFE6
 14374                           postdec1	equ	0xFE5
 14375                           fsr1h	equ	0xFE2
 14376                           fsr1l	equ	0xFE1
 14377                           indf2	equ	0xFDF
 14378                           postinc2	equ	0xFDE
 14379                           postdec2	equ	0xFDD
 14380                           plusw2	equ	0xFDB
 14381                           fsr2h	equ	0xFDA
 14382                           fsr2l	equ	0xFD9
 14383                           status	equ	0xFD8
 14384                           
 14385 ;; *************** function _get_ldnumber *****************
 14386 ;; Defined at:
 14387 ;;		line 2950 in file "bibliotecas/ff.c"
 14388 ;; Parameters:    Size  Location     Type
 14389 ;;  path            2   25[COMRAM] PTR PTR const unsigned c
 14390 ;;		 -> f_rename@path_old(2), f_rename@path_new(2), f_mkdir@path(2), f_unlink@path(2), 
 14391 ;;		 -> f_getfree@path(2), f_stat@path(2), f_opendir@path(2), f_open@path(2), 
 14392 ;;		 -> f_mount@path(2), f_mount@rp(2), 
 14393 ;; Auto vars:     Size  Location     Type
 14394 ;;  i               2   41[COMRAM] unsigned int 
 14395 ;;  tt              2   39[COMRAM] PTR const unsigned char 
 14396 ;;		 -> STR_11(11), STR_10(3), 
 14397 ;;  tp              2   37[COMRAM] PTR const unsigned char 
 14398 ;;		 -> STR_11(11), STR_10(3), 
 14399 ;;  vol             2   33[COMRAM] int 
 14400 ;;  sp              2   29[COMRAM] PTR const unsigned char 
 14401 ;;		 -> STR_34(5), STR_33(5), STR_32(4), STR_31(4), 
 14402 ;;		 -> STR_30(3), STR_29(3), STR_28(5), STR_27(4), 
 14403 ;;  tc              1   36[COMRAM] unsigned char 
 14404 ;;  c               1   35[COMRAM] unsigned char 
 14405 ;; Return value:  Size  Location     Type
 14406 ;;                  2   25[COMRAM] int 
 14407 ;; Registers used:
 14408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14409 ;; Tracked objects:
 14410 ;;		On entry : 0/0
 14411 ;;		On exit  : 0/0
 14412 ;;		Unchanged: 0/0
 14413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14414 ;;      Params:         2       0       0       0       0       0       0       0       0
 14415 ;;      Locals:        14       0       0       0       0       0       0       0       0
 14416 ;;      Temps:          2       0       0       0       0       0       0       0       0
 14417 ;;      Totals:        18       0       0       0       0       0       0       0       0
 14418 ;;Total ram usage:       18 bytes
 14419 ;; Hardware stack levels used:    1
 14420 ;; Hardware stack levels required when called:    2
 14421 ;; This function calls:
 14422 ;;		Nothing
 14423 ;; This function is called by:
 14424 ;;		_find_volume
 14425 ;;		_f_mount
 14426 ;;		_f_rename
 14427 ;; This function uses a non-reentrant model
 14428 ;;
 14429                           
 14430                           	psect	text37
 14431  00382E                     __ptext37:
 14432                           	opt stack 0
 14433  00382E                     _get_ldnumber:
 14434                           	opt stack 24
 14435                           
 14436                           ;ff.c: 2954: const TCHAR *tp, *tt;
 14437                           ;ff.c: 2955: UINT i;
 14438                           ;ff.c: 2956: int vol = -1;
 14439                           
 14440                           ;incstack = 0
 14441  00382E  6822               	setf	get_ldnumber@vol,c
 14442  003830  6823               	setf	get_ldnumber@vol+1,c
 14443                           
 14444                           ;ff.c: 2958: static const char* const volid[] = {"RAM","NAND","CF","SD","SD2","USB","USB
      +                          2","USB3"};
 14445                           ;ff.c: 2959: const char *sp;
 14446                           ;ff.c: 2960: char c;
 14447                           ;ff.c: 2961: TCHAR tc;
 14448                           ;ff.c: 2965: if (*path) {
 14449  003832  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 14450  003836  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 14451  00383A  50DE               	movf	postinc2,w,c
 14452  00383C  10DE               	iorwf	postinc2,w,c
 14453  00383E  B4D8               	btfsc	status,2,c
 14454  003840  D0C6               	goto	l1367
 14455                           
 14456                           ;ff.c: 2966: for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
 14457  003842  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 14458  003846  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 14459  00384A  CFDE F028          	movff	postinc2,get_ldnumber@tt
 14460  00384E  CFDD F029          	movff	postdec2,get_ldnumber@tt+1
 14461  003852  D002               	goto	l1342
 14462  003854  4A28               	infsnz	get_ldnumber@tt,f,c
 14463  003856  2A29               	incf	get_ldnumber@tt+1,f,c
 14464  003858                     l1342:
 14465  003858  0E00               	movlw	0
 14466  00385A  6E21               	movwf	_get_ldnumber$2959+1,c
 14467  00385C  0E21               	movlw	33
 14468  00385E  6E20               	movwf	_get_ldnumber$2959,c
 14469  003860  C028  FFF6         	movff	get_ldnumber@tt,tblptrl
 14470  003864  C029  FFF7         	movff	get_ldnumber@tt+1,tblptrh
 14471  003868                     	if	0	;tblptru may be non-zero
 14472  003868                     	endif
 14473  003868                     	if	0	;tblptru may be non-zero
 14474  003868                     	endif
 14475  003868  0008               	tblrd		*
 14476  00386A  50F5               	movf	tablat,w,c
 14477  00386C  6E1C               	movwf	??_get_ldnumber& (0+255),c
 14478  00386E  6A1D               	clrf	(??_get_ldnumber+1)& (0+255),c
 14479  003870  5020               	movf	_get_ldnumber$2959,w,c
 14480  003872  5C1C               	subwf	??_get_ldnumber,w,c
 14481  003874  5021               	movf	_get_ldnumber$2959+1,w,c
 14482  003876  581D               	subwfb	??_get_ldnumber+1,w,c
 14483  003878  A0D8               	btfss	status,0,c
 14484  00387A  D009               	goto	u17460
 14485  00387C  C028  FFF6         	movff	get_ldnumber@tt,tblptrl
 14486  003880  C029  FFF7         	movff	get_ldnumber@tt+1,tblptrh
 14487  003884                     	if	0	;tblptru may be non-zero
 14488  003884                     	endif
 14489  003884                     	if	0	;tblptru may be non-zero
 14490  003884                     	endif
 14491  003884  0008               	tblrd		*
 14492  003886  50F5               	movf	tablat,w,c
 14493  003888  0A3A               	xorlw	58
 14494  00388A  A4D8               	btfss	status,2,c
 14495  00388C  D7E3               	goto	l1343
 14496  00388E                     u17460:
 14497                           
 14498                           ;ff.c: 2967: if (*tt == ':') {
 14499  00388E  C028  FFF6         	movff	get_ldnumber@tt,tblptrl
 14500  003892  C029  FFF7         	movff	get_ldnumber@tt+1,tblptrh
 14501  003896                     	if	0	;tblptru may be non-zero
 14502  003896                     	endif
 14503  003896                     	if	0	;tblptru may be non-zero
 14504  003896                     	endif
 14505  003896  0008               	tblrd		*
 14506  003898  50F5               	movf	tablat,w,c
 14507  00389A  0A3A               	xorlw	58
 14508  00389C  A4D8               	btfss	status,2,c
 14509  00389E  D093               	goto	l1351
 14510                           
 14511                           ;ff.c: 2968: tp = *path;
 14512  0038A0  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 14513  0038A4  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 14514  0038A8  CFDE F026          	movff	postinc2,get_ldnumber@tp
 14515  0038AC  CFDD F027          	movff	postdec2,get_ldnumber@tp+1
 14516                           
 14517                           ;ff.c: 2969: i = *tp++;
 14518  0038B0  C026  FFF6         	movff	get_ldnumber@tp,tblptrl
 14519  0038B4  C027  FFF7         	movff	get_ldnumber@tp+1,tblptrh
 14520  0038B8                     	if	0	;tblptru may be non-zero
 14521  0038B8                     	endif
 14522  0038B8                     	if	0	;tblptru may be non-zero
 14523  0038B8                     	endif
 14524  0038B8  0008               	tblrd		*
 14525  0038BA  50F5               	movf	tablat,w,c
 14526  0038BC  6E2A               	movwf	get_ldnumber@i,c
 14527  0038BE  6A2B               	clrf	get_ldnumber@i+1,c
 14528  0038C0  4A26               	infsnz	get_ldnumber@tp,f,c
 14529  0038C2  2A27               	incf	get_ldnumber@tp+1,f,c
 14530                           
 14531                           ;ff.c: 2970: if (((i) >= '0' && (i) <= '9') && tp == tt) {
 14532  0038C4  502B               	movf	get_ldnumber@i+1,w,c
 14533  0038C6  E104               	bnz	u17480
 14534  0038C8  0E30               	movlw	48
 14535  0038CA  5C2A               	subwf	get_ldnumber@i,w,c
 14536  0038CC  A0D8               	btfss	status,0,c
 14537  0038CE  D01C               	goto	l1352
 14538  0038D0                     u17480:
 14539  0038D0  502B               	movf	get_ldnumber@i+1,w,c
 14540  0038D2  E11A               	bnz	l13640
 14541  0038D4  0E3A               	movlw	58
 14542  0038D6  5C2A               	subwf	get_ldnumber@i,w,c
 14543  0038D8  B0D8               	btfsc	status,0,c
 14544  0038DA  D016               	goto	l1352
 14545  0038DC  5028               	movf	get_ldnumber@tt,w,c
 14546  0038DE  1826               	xorwf	get_ldnumber@tp,w,c
 14547  0038E0  E113               	bnz	l13640
 14548  0038E2  5029               	movf	get_ldnumber@tt+1,w,c
 14549  0038E4  1827               	xorwf	get_ldnumber@tp+1,w,c
 14550  0038E6  A4D8               	btfss	status,2,c
 14551  0038E8  D00F               	goto	l1352
 14552                           
 14553                           ;ff.c: 2971: if ((i -= '0') < 1) {
 14554  0038EA  0E30               	movlw	48
 14555  0038EC  5E2A               	subwf	get_ldnumber@i,f,c
 14556  0038EE  0E00               	movlw	0
 14557  0038F0  5A2B               	subwfb	get_ldnumber@i+1,f,c
 14558  0038F2  502A               	movf	get_ldnumber@i,w,c
 14559  0038F4  102B               	iorwf	get_ldnumber@i+1,w,c
 14560  0038F6  A4D8               	btfss	status,2,c
 14561  0038F8  D06A               	goto	l1367
 14562                           
 14563                           ;ff.c: 2972: vol = (int)i;
 14564  0038FA  C02A  F022         	movff	get_ldnumber@i,get_ldnumber@vol
 14565  0038FE  C02B  F023         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
 14566                           
 14567                           ;ff.c: 2973: *path = ++tt;
 14568  003902  4A28               	infsnz	get_ldnumber@tt,f,c
 14569  003904  2A29               	incf	get_ldnumber@tt+1,f,c
 14570  003906  D056               	goto	l13676
 14571  003908                     l1352:
 14572  003908                     l13640:
 14573                           
 14574                           ;ff.c: 2977: else {
 14575                           ;ff.c: 2978: i = 0; tt++;
 14576  003908  0E00               	movlw	0
 14577  00390A  6E2B               	movwf	get_ldnumber@i+1,c
 14578  00390C  0E00               	movlw	0
 14579  00390E  6E2A               	movwf	get_ldnumber@i,c
 14580  003910  4A28               	infsnz	get_ldnumber@tt,f,c
 14581  003912  2A29               	incf	get_ldnumber@tt+1,f,c
 14582  003914                     
 14583                           ;ff.c: 2980: sp = volid[i]; tp = *path;
 14584  003914  90D8               	bcf	status,0,c
 14585  003916  342A               	rlcf	get_ldnumber@i,w,c
 14586  003918  6EF6               	movwf	tblptrl,c
 14587  00391A  342B               	rlcf	get_ldnumber@i+1,w,c
 14588  00391C  6EF7               	movwf	tblptrh,c
 14589  00391E  0E84               	movlw	low get_ldnumber@volid
 14590  003920  26F6               	addwf	tblptrl,f,c
 14591  003922  0E61               	movlw	high get_ldnumber@volid
 14592  003924  22F7               	addwfc	tblptrh,f,c
 14593  003926                     	if	0	;There are less than 3 active tblptr bytes
 14594  003926                     	endif
 14595  003926  0009               	tblrd		*+
 14596  003928  CFF5 F01E          	movff	tablat,get_ldnumber@sp
 14597  00392C  000A               	tblrd		*-
 14598  00392E  CFF5 F01F          	movff	tablat,get_ldnumber@sp+1
 14599  003932  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 14600  003936  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 14601  00393A  CFDE F026          	movff	postinc2,get_ldnumber@tp
 14602  00393E  CFDD F027          	movff	postdec2,get_ldnumber@tp+1
 14603  003942                     
 14604                           ;ff.c: 2982: c = *sp++; tc = *tp++;
 14605  003942  C01E  FFF6         	movff	get_ldnumber@sp,tblptrl
 14606  003946  C01F  FFF7         	movff	get_ldnumber@sp+1,tblptrh
 14607  00394A                     	if	0	;tblptru may be non-zero
 14608  00394A                     	endif
 14609  00394A                     	if	0	;tblptru may be non-zero
 14610  00394A                     	endif
 14611  00394A  0008               	tblrd		*
 14612  00394C  CFF5 F024          	movff	tablat,get_ldnumber@c
 14613  003950  4A1E               	infsnz	get_ldnumber@sp,f,c
 14614  003952  2A1F               	incf	get_ldnumber@sp+1,f,c
 14615  003954  C026  FFF6         	movff	get_ldnumber@tp,tblptrl
 14616  003958  C027  FFF7         	movff	get_ldnumber@tp+1,tblptrh
 14617  00395C                     	if	0	;tblptru may be non-zero
 14618  00395C                     	endif
 14619  00395C                     	if	0	;tblptru may be non-zero
 14620  00395C                     	endif
 14621  00395C  0008               	tblrd		*
 14622  00395E  CFF5 F025          	movff	tablat,get_ldnumber@tc
 14623  003962  4A26               	infsnz	get_ldnumber@tp,f,c
 14624  003964  2A27               	incf	get_ldnumber@tp+1,f,c
 14625                           
 14626                           ;ff.c: 2983: if (((tc) >= 'a' && (tc) <= 'z')) tc -= 0x20;
 14627  003966  0E60               	movlw	96
 14628  003968  6425               	cpfsgt	get_ldnumber@tc,c
 14629  00396A  D005               	goto	l1357
 14630  00396C  0E7B               	movlw	123
 14631  00396E  6025               	cpfslt	get_ldnumber@tc,c
 14632  003970  D002               	goto	l1357
 14633  003972  0E20               	movlw	32
 14634  003974  5E25               	subwf	get_ldnumber@tc,f,c
 14635  003976                     l1357:
 14636                           
 14637                           ;ff.c: 2984: } while (c && (TCHAR)c == tc);
 14638  003976  5024               	movf	get_ldnumber@c,w,c
 14639  003978  B4D8               	btfsc	status,2,c
 14640  00397A  D004               	goto	u17550
 14641  00397C  5025               	movf	get_ldnumber@tc,w,c
 14642  00397E  1824               	xorwf	get_ldnumber@c,w,c
 14643  003980  B4D8               	btfsc	status,2,c
 14644  003982  D7DF               	goto	l1356
 14645  003984                     u17550:
 14646                           
 14647                           ;ff.c: 2985: } while ((c || tp != tt) && ++i < 1);
 14648  003984  5024               	movf	get_ldnumber@c,w,c
 14649  003986  A4D8               	btfss	status,2,c
 14650  003988  D007               	goto	u17570
 14651  00398A  5028               	movf	get_ldnumber@tt,w,c
 14652  00398C  1826               	xorwf	get_ldnumber@tp,w,c
 14653  00398E  E104               	bnz	l13670
 14654  003990  5029               	movf	get_ldnumber@tt+1,w,c
 14655  003992  1827               	xorwf	get_ldnumber@tp+1,w,c
 14656  003994  B4D8               	btfsc	status,2,c
 14657  003996  D006               	goto	u17580
 14658  003998                     u17570:
 14659  003998                     l13670:
 14660  003998  4A2A               	infsnz	get_ldnumber@i,f,c
 14661  00399A  2A2B               	incf	get_ldnumber@i+1,f,c
 14662  00399C  502A               	movf	get_ldnumber@i,w,c
 14663  00399E  102B               	iorwf	get_ldnumber@i+1,w,c
 14664  0039A0  B4D8               	btfsc	status,2,c
 14665  0039A2  D7B8               	goto	l1355
 14666  0039A4                     u17580:
 14667                           
 14668                           ;ff.c: 2986: if (i < 1) {
 14669  0039A4  502A               	movf	get_ldnumber@i,w,c
 14670  0039A6  102B               	iorwf	get_ldnumber@i+1,w,c
 14671  0039A8  A4D8               	btfss	status,2,c
 14672  0039AA  D011               	goto	l1367
 14673                           
 14674                           ;ff.c: 2987: vol = (int)i;
 14675  0039AC  C02A  F022         	movff	get_ldnumber@i,get_ldnumber@vol
 14676  0039B0  C02B  F023         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
 14677  0039B4                     l13676:
 14678                           
 14679                           ;ff.c: 2988: *path = tt;
 14680  0039B4  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 14681  0039B8  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 14682  0039BC  C028  FFDE         	movff	get_ldnumber@tt,postinc2
 14683  0039C0  C029  FFDD         	movff	get_ldnumber@tt+1,postdec2
 14684                           
 14685                           ;ff.c: 2989: }
 14686                           ;ff.c: 2990: }
 14687                           ;ff.c: 2992: } else {
 14688  0039C4  D004               	goto	l1367
 14689  0039C6                     l1351:
 14690                           
 14691                           ;ff.c: 2996: vol = 0;
 14692  0039C6  0E00               	movlw	0
 14693  0039C8  6E23               	movwf	get_ldnumber@vol+1,c
 14694  0039CA  0E00               	movlw	0
 14695  0039CC  6E22               	movwf	get_ldnumber@vol,c
 14696  0039CE                     l1367:
 14697                           
 14698                           ;ff.c: 2998: }
 14699                           ;ff.c: 2999: }
 14700                           ;ff.c: 3000: return vol;
 14701  0039CE  C022  F01A         	movff	get_ldnumber@vol,?_get_ldnumber
 14702  0039D2  C023  F01B         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
 14703  0039D6  0012               	return	
 14704  0039D8                     __end_of_get_ldnumber:
 14705                           	opt stack 0
 14706                           tosu	equ	0xFFF
 14707                           tosh	equ	0xFFE
 14708                           tosl	equ	0xFFD
 14709                           pclath	equ	0xFFA
 14710                           tblptru	equ	0xFF8
 14711                           tblptrh	equ	0xFF7
 14712                           tblptrl	equ	0xFF6
 14713                           tablat	equ	0xFF5
 14714                           prodh	equ	0xFF4
 14715                           prodl	equ	0xFF3
 14716                           intcon	equ	0xFF2
 14717                           intcon2	equ	0xFF1
 14718                           intcon3	equ	0xFF0
 14719                           indf0	equ	0xFEF
 14720                           postinc0	equ	0xFEE
 14721                           fsr0h	equ	0xFEA
 14722                           fsr0l	equ	0xFE9
 14723                           wreg	equ	0xFE8
 14724                           indf1	equ	0xFE7
 14725                           postinc1	equ	0xFE6
 14726                           postdec1	equ	0xFE5
 14727                           fsr1h	equ	0xFE2
 14728                           fsr1l	equ	0xFE1
 14729                           indf2	equ	0xFDF
 14730                           postinc2	equ	0xFDE
 14731                           postdec2	equ	0xFDD
 14732                           plusw2	equ	0xFDB
 14733                           fsr2h	equ	0xFDA
 14734                           fsr2l	equ	0xFD9
 14735                           status	equ	0xFD8
 14736                           
 14737 ;; *************** function _disk_initialize *****************
 14738 ;; Defined at:
 14739 ;;		line 110 in file "bibliotecas/diskio.c"
 14740 ;; Parameters:    Size  Location     Type
 14741 ;;  pdrv            1    wreg     unsigned char 
 14742 ;; Auto vars:     Size  Location     Type
 14743 ;;  pdrv            1   34[BANK0 ] unsigned char 
 14744 ;;  result          2    0        int 
 14745 ;;  stat            1   35[BANK0 ] unsigned char 
 14746 ;; Return value:  Size  Location     Type
 14747 ;;                  1    wreg      unsigned char 
 14748 ;; Registers used:
 14749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14750 ;; Tracked objects:
 14751 ;;		On entry : 0/0
 14752 ;;		On exit  : 0/0
 14753 ;;		Unchanged: 0/0
 14754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14755 ;;      Params:         0       0       0       0       0       0       0       0       0
 14756 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14757 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14758 ;;      Totals:         0       2       0       0       0       0       0       0       0
 14759 ;;Total ram usage:        2 bytes
 14760 ;; Hardware stack levels used:    1
 14761 ;; Hardware stack levels required when called:    8
 14762 ;; This function calls:
 14763 ;;		_sdc_disk_initialize
 14764 ;; This function is called by:
 14765 ;;		_find_volume
 14766 ;; This function uses a non-reentrant model
 14767 ;;
 14768                           
 14769                           	psect	text38
 14770  005920                     __ptext38:
 14771                           	opt stack 0
 14772  005920                     _disk_initialize:
 14773                           	opt stack 18
 14774                           
 14775                           ;incstack = 0
 14776                           ;disk_initialize@pdrv stored from wreg
 14777  005920  0100               	movlb	0	; () banked
 14778  005922  6F82               	movwf	disk_initialize@pdrv& (0+255),b
 14779                           
 14780                           ;diskio.c: 114: DSTATUS stat;
 14781                           ;diskio.c: 115: int result;
 14782                           ;diskio.c: 117: switch (pdrv) {
 14783  005924  D00E               	goto	l850
 14784  005926                     
 14785                           ;diskio.c: 119: stat = sdc_disk_initialize();
 14786  005926  ECB5  F00E         	call	_sdc_disk_initialize	;wreg free
 14787  00592A  0100               	movlb	0	; () banked
 14788  00592C  6F83               	movwf	disk_initialize@stat& (0+255),b
 14789                           
 14790                           ; BSR set to: 0
 14791                           ;diskio.c: 123: return stat;
 14792  00592E  5183               	movf	disk_initialize@stat& (0+255),w,b
 14793                           
 14794                           ; BSR set to: 0
 14795  005930  0012               	return	
 14796  005932                     
 14797                           ; BSR set to: 0
 14798                           ;diskio.c: 126: stat = sdc_disk_initialize();
 14799                           
 14800                           ; BSR set to: 0
 14801  005932  ECB5  F00E         	call	_sdc_disk_initialize	;wreg free
 14802  005936  0100               	movlb	0	; () banked
 14803  005938  6F83               	movwf	disk_initialize@stat& (0+255),b
 14804                           
 14805                           ; BSR set to: 0
 14806                           ;diskio.c: 130: return stat;
 14807  00593A  5183               	movf	disk_initialize@stat& (0+255),w,b
 14808                           
 14809                           ; BSR set to: 0
 14810  00593C  0012               	return	
 14811  00593E                     
 14812                           ; BSR set to: 0
 14813                           ;diskio.c: 137: return stat;
 14814                           
 14815                           ; BSR set to: 0
 14816  00593E  5183               	movf	disk_initialize@stat& (0+255),w,b
 14817                           
 14818                           ; BSR set to: 0
 14819  005940  0012               	return	
 14820  005942                     l850:
 14821                           
 14822                           ; BSR set to: 0
 14823  005942  0100               	movlb	0	; () banked
 14824  005944  5182               	movf	disk_initialize@pdrv& (0+255),w,b
 14825                           
 14826                           ; Switch size 1, requested type "space"
 14827                           ; Number of cases is 3, Range of values is 0 to 2
 14828                           ; switch strategies available:
 14829                           ; Name         Instructions Cycles
 14830                           ; simple_byte           10     6 (average)
 14831                           ;	Chosen strategy is simple_byte
 14832  005946  0A00               	xorlw	0	; case 0
 14833  005948  B4D8               	btfsc	status,2,c
 14834  00594A  D7ED               	goto	l851
 14835  00594C  0A01               	xorlw	1	; case 1
 14836  00594E  B4D8               	btfsc	status,2,c
 14837  005950  D7F0               	goto	l853
 14838  005952  0A03               	xorlw	3	; case 2
 14839  005954  B4D8               	btfsc	status,2,c
 14840  005956  D7F3               	goto	l854
 14841                           
 14842                           ; BSR set to: 0
 14843                           ;diskio.c: 139: return 0x01;
 14844                           
 14845                           ; BSR set to: 0
 14846  005958  0E01               	movlw	1
 14847  00595A  0012               	return	
 14848  00595C                     __end_of_disk_initialize:
 14849                           	opt stack 0
 14850                           tosu	equ	0xFFF
 14851                           tosh	equ	0xFFE
 14852                           tosl	equ	0xFFD
 14853                           pclath	equ	0xFFA
 14854                           tblptru	equ	0xFF8
 14855                           tblptrh	equ	0xFF7
 14856                           tblptrl	equ	0xFF6
 14857                           tablat	equ	0xFF5
 14858                           prodh	equ	0xFF4
 14859                           prodl	equ	0xFF3
 14860                           intcon	equ	0xFF2
 14861                           intcon2	equ	0xFF1
 14862                           intcon3	equ	0xFF0
 14863                           indf0	equ	0xFEF
 14864                           postinc0	equ	0xFEE
 14865                           fsr0h	equ	0xFEA
 14866                           fsr0l	equ	0xFE9
 14867                           wreg	equ	0xFE8
 14868                           indf1	equ	0xFE7
 14869                           postinc1	equ	0xFE6
 14870                           postdec1	equ	0xFE5
 14871                           fsr1h	equ	0xFE2
 14872                           fsr1l	equ	0xFE1
 14873                           indf2	equ	0xFDF
 14874                           postinc2	equ	0xFDE
 14875                           postdec2	equ	0xFDD
 14876                           plusw2	equ	0xFDB
 14877                           fsr2h	equ	0xFDA
 14878                           fsr2l	equ	0xFD9
 14879                           status	equ	0xFD8
 14880                           
 14881 ;; *************** function _sdc_disk_initialize *****************
 14882 ;; Defined at:
 14883 ;;		line 331 in file "bibliotecas/diskio.c"
 14884 ;; Parameters:    Size  Location     Type
 14885 ;;		None
 14886 ;; Auto vars:     Size  Location     Type
 14887 ;;  count2          2   31[BANK0 ] int 
 14888 ;;  crc_number      2   27[BANK0 ] int 
 14889 ;;  count1          2   25[BANK0 ] int 
 14890 ;;  i               2   22[BANK0 ] int 
 14891 ;;  buff            1   33[BANK0 ] unsigned char 
 14892 ;;  ocr             1   30[BANK0 ] unsigned char 
 14893 ;;  buff_i          1   29[BANK0 ] unsigned char 
 14894 ;;  stat            1   24[BANK0 ] unsigned char 
 14895 ;; Return value:  Size  Location     Type
 14896 ;;                  1    wreg      unsigned char 
 14897 ;; Registers used:
 14898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14899 ;; Tracked objects:
 14900 ;;		On entry : 0/0
 14901 ;;		On exit  : 0/0
 14902 ;;		Unchanged: 0/0
 14903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14904 ;;      Params:         0       0       0       0       0       0       0       0       0
 14905 ;;      Locals:         0      12       0       0       0       0       0       0       0
 14906 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14907 ;;      Totals:         0      14       0       0       0       0       0       0       0
 14908 ;;Total ram usage:       14 bytes
 14909 ;; Hardware stack levels used:    1
 14910 ;; Hardware stack levels required when called:    7
 14911 ;; This function calls:
 14912 ;;		_command
 14913 ;;		_dummy_clocks
 14914 ;;		_escreve_cmd_lcd
 14915 ;;		_escreve_frase_ram_lcd
 14916 ;;		_escreve_inteiro_lcd
 14917 ;;		_posicao_cursor_lcd
 14918 ;;		_proceed
 14919 ;;		_response
 14920 ;;		_sdc_reset
 14921 ;; This function is called by:
 14922 ;;		_disk_initialize
 14923 ;; This function uses a non-reentrant model
 14924 ;;
 14925                           
 14926                           	psect	text39
 14927  001D6A                     __ptext39:
 14928                           	opt stack 0
 14929  001D6A                     _sdc_disk_initialize:
 14930                           	opt stack 18
 14931                           
 14932                           ;diskio.c: 333: BYTE ocr;
 14933                           ;diskio.c: 334: DSTATUS stat;
 14934                           ;diskio.c: 335: int i = 0, count1 = 0, count2 = 0;
 14935                           
 14936                           ; BSR set to: 0
 14937                           ;incstack = 0
 14938  001D6A  0E00               	movlw	0
 14939  001D6C  0100               	movlb	0	; () banked
 14940  001D6E  6F77               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 14941  001D70  0E00               	movlw	0
 14942  001D72  6F76               	movwf	sdc_disk_initialize@i& (0+255),b
 14943  001D74  0E00               	movlw	0
 14944  001D76  6F7A               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 14945  001D78  0E00               	movlw	0
 14946  001D7A  6F79               	movwf	sdc_disk_initialize@count1& (0+255),b
 14947  001D7C  0E00               	movlw	0
 14948  001D7E  6F80               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14949  001D80  0E00               	movlw	0
 14950  001D82  6F7F               	movwf	sdc_disk_initialize@count2& (0+255),b
 14951                           
 14952                           ;diskio.c: 336: BYTE buff = 0;
 14953  001D84  0E00               	movlw	0
 14954  001D86  6F81               	movwf	sdc_disk_initialize@buff& (0+255),b
 14955                           
 14956                           ; BSR set to: 0
 14957                           ;diskio.c: 337: BYTE buff_i;
 14958                           ;diskio.c: 338: int crc_number;
 14959                           ;diskio.c: 340: _delay((unsigned long)((1)*(48000000/4000.0)));
 14960  001D88  0E10               	movlw	16
 14961  001D8A  0100               	movlb	0	; () banked
 14962  001D8C  6F74               	movwf	??_sdc_disk_initialize& (0+255),b
 14963  001D8E  0E94               	movlw	148
 14964  001D90                     u21857:
 14965  001D90  2EE8               	decfsz	wreg,f,c
 14966  001D92  D7FE               	bra	u21857
 14967  001D94  2F74               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 14968  001D96  D7FC               	bra	u21857
 14969  001D98  F000               	nop	
 14970                           
 14971                           ;diskio.c: 341: sdc_reset();
 14972  001D9A  EC1D  F025         	call	_sdc_reset	;wreg free
 14973                           
 14974                           ;diskio.c: 343: LATBbits.LATB4 = 0;
 14975  001D9E  988A               	bcf	3978,4,c	;volatile
 14976                           
 14977                           ;diskio.c: 344: dummy_clocks(10);
 14978  001DA0  0E0A               	movlw	10
 14979  001DA2  EC52  F02C         	call	_dummy_clocks
 14980                           
 14981                           ;diskio.c: 346: command(0X48, 0x000001AA, 0x87);
 14982  001DA6  0EAA               	movlw	170
 14983  001DA8  6E1C               	movwf	command@arg,c
 14984  001DAA  0E01               	movlw	1
 14985  001DAC  6E1D               	movwf	command@arg+1,c
 14986  001DAE  0E00               	movlw	0
 14987  001DB0  6E1E               	movwf	command@arg+2,c
 14988  001DB2  0E00               	movlw	0
 14989  001DB4  6E1F               	movwf	command@arg+3,c
 14990  001DB6  0E87               	movlw	135
 14991  001DB8  6E20               	movwf	command@CRC,c
 14992  001DBA  0E48               	movlw	72
 14993  001DBC  ECCA  F02C         	call	_command
 14994                           
 14995                           ;diskio.c: 347: proceed();
 14996  001DC0  ECD5  F02D         	call	_proceed	;wreg free
 14997                           
 14998                           ;diskio.c: 348: LATBbits.LATB4 = 1;
 14999  001DC4  888A               	bsf	3978,4,c	;volatile
 15000  001DC6                     
 15001                           ;diskio.c: 350: buff_i = response();
 15002  001DC6  ECC2  F02D         	call	_response	;wreg free
 15003  001DCA  0100               	movlb	0	; () banked
 15004  001DCC  6F7D               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 15005                           
 15006                           ; BSR set to: 0
 15007                           ;diskio.c: 354: if(buff_i == 1)
 15008  001DCE  057D               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 15009  001DD0  A4D8               	btfss	status,2,c
 15010  001DD2  D004               	goto	l893
 15011                           
 15012                           ; BSR set to: 0
 15013                           ;diskio.c: 355: {
 15014                           ;diskio.c: 356: crc_number = buff_i<<8;
 15015  001DD4  517D               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 15016  001DD6  6F7C               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 15017  001DD8  6B7B               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 15018                           
 15019                           ;diskio.c: 357: }
 15020  001DDA  D006               	goto	l895
 15021  001DDC                     l893:
 15022                           
 15023                           ; BSR set to: 0
 15024                           ;diskio.c: 358: else if(buff_i==0xAA)
 15025                           
 15026                           ; BSR set to: 0
 15027  001DDC  0EAA               	movlw	170
 15028  001DDE  197D               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 15029  001DE0  A4D8               	btfss	status,2,c
 15030  001DE2  D002               	goto	l895
 15031                           
 15032                           ; BSR set to: 0
 15033                           ;diskio.c: 359: {
 15034                           ;diskio.c: 360: crc_number |= buff_i;
 15035  001DE4  517D               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 15036  001DE6  137B               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 15037  001DE8                     l895:
 15038                           
 15039                           ; BSR set to: 0
 15040                           ;diskio.c: 361: }
 15041                           ;diskio.c: 362: count1++;
 15042                           
 15043                           ; BSR set to: 0
 15044                           
 15045                           ; BSR set to: 0
 15046  001DE8  4B79               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 15047  001DEA  2B7A               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 15048                           
 15049                           ; BSR set to: 0
 15050                           ;diskio.c: 368: }while(crc_number != 0x1AA && count1<1000);
 15051  001DEC  0EAA               	movlw	170
 15052  001DEE  197B               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 15053  001DF0  E103               	bnz	u16340
 15054  001DF2  057C               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 15055  001DF4  B4D8               	btfsc	status,2,c
 15056  001DF6  D008               	goto	u16350
 15057  001DF8                     u16340:
 15058                           
 15059                           ; BSR set to: 0
 15060  001DF8  BF7A               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 15061  001DFA  D7E5               	goto	l892
 15062  001DFC  0EE8               	movlw	232
 15063  001DFE  5D79               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 15064  001E00  0E03               	movlw	3
 15065  001E02  597A               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 15066  001E04  A0D8               	btfss	status,0,c
 15067  001E06  D7DF               	goto	l892
 15068  001E08                     u16350:
 15069                           
 15070                           ; BSR set to: 0
 15071                           ;diskio.c: 370: escreve_cmd_lcd(0b00000001);
 15072                           
 15073                           ; BSR set to: 0
 15074                           
 15075                           ; BSR set to: 0
 15076  001E08  0E01               	movlw	1
 15077  001E0A  ECC3  F027         	call	_escreve_cmd_lcd
 15078                           
 15079                           ;diskio.c: 371: posicao_cursor_lcd(1,0);
 15080  001E0E  0E00               	movlw	0
 15081  001E10  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 15082  001E12  0E01               	movlw	1
 15083  001E14  ECB8  F029         	call	_posicao_cursor_lcd
 15084                           
 15085                           ;diskio.c: 372: escreve_frase_ram_lcd("certo");
 15086  001E18  0E34               	movlw	low STR_19
 15087  001E1A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 15088  001E1C  0E62               	movlw	high STR_19
 15089  001E1E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 15090  001E20  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 15091                           
 15092                           ;diskio.c: 373: _delay((unsigned long)((1000)*(48000000/4000.0)));
 15093  001E24  0E3D               	movlw	61
 15094  001E26  0100               	movlb	0	; () banked
 15095  001E28  6F75               	movwf	(??_sdc_disk_initialize+1)& (0+255),b
 15096  001E2A  0EE1               	movlw	225
 15097  001E2C  6F74               	movwf	??_sdc_disk_initialize& (0+255),b
 15098  001E2E  0E3F               	movlw	63
 15099  001E30                     u21867:
 15100  001E30  2EE8               	decfsz	wreg,f,c
 15101  001E32  D7FE               	bra	u21867
 15102  001E34  2F74               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 15103  001E36  D7FC               	bra	u21867
 15104  001E38  2F75               	decfsz	(??_sdc_disk_initialize+1)& (0+255),f,b
 15105  001E3A  D7FA               	bra	u21867
 15106  001E3C  D000               	nop2	
 15107                           
 15108                           ;diskio.c: 374: if (crc_number == 0x1AA)
 15109  001E3E  0EAA               	movlw	170
 15110  001E40  0100               	movlb	0	; () banked
 15111  001E42  197B               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 15112  001E44  E102               	bnz	u16361
 15113  001E46  057C               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 15114  001E48  A4D8               	btfss	status,2,c
 15115  001E4A                     u16361:
 15116  001E4A  D12A               	goto	l899
 15117                           
 15118                           ; BSR set to: 0
 15119                           ;diskio.c: 375: {
 15120                           ;diskio.c: 376: count1 = 0;
 15121  001E4C  0E00               	movlw	0
 15122  001E4E  6F7A               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 15123  001E50  0E00               	movlw	0
 15124  001E52  6F79               	movwf	sdc_disk_initialize@count1& (0+255),b
 15125  001E54                     l900:
 15126                           
 15127                           ; BSR set to: 0
 15128                           ;diskio.c: 378: count2 = 0;
 15129  001E54  0E00               	movlw	0
 15130  001E56  6F80               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 15131  001E58  0E00               	movlw	0
 15132  001E5A  6F7F               	movwf	sdc_disk_initialize@count2& (0+255),b
 15133                           
 15134                           ; BSR set to: 0
 15135                           ;diskio.c: 379: buff = 0XFF;
 15136  001E5C  6981               	setf	sdc_disk_initialize@buff& (0+255),b
 15137                           
 15138                           ; BSR set to: 0
 15139                           ;diskio.c: 382: _delay((unsigned long)((1000)*(48000000/4000.0)));
 15140  001E5E  0E3D               	movlw	61
 15141  001E60  0100               	movlb	0	; () banked
 15142  001E62  6F75               	movwf	(??_sdc_disk_initialize+1)& (0+255),b
 15143  001E64  0EE1               	movlw	225
 15144  001E66  6F74               	movwf	??_sdc_disk_initialize& (0+255),b
 15145  001E68  0E3F               	movlw	63
 15146  001E6A                     u21877:
 15147  001E6A  2EE8               	decfsz	wreg,f,c
 15148  001E6C  D7FE               	bra	u21877
 15149  001E6E  2F74               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 15150  001E70  D7FC               	bra	u21877
 15151  001E72  2F75               	decfsz	(??_sdc_disk_initialize+1)& (0+255),f,b
 15152  001E74  D7FA               	bra	u21877
 15153  001E76  D000               	nop2	
 15154                           
 15155                           ;diskio.c: 384: dummy_clocks(8);
 15156  001E78  0E08               	movlw	8
 15157  001E7A  EC52  F02C         	call	_dummy_clocks
 15158                           
 15159                           ;diskio.c: 385: command(0X41, 0X00000000, 0XFF);
 15160  001E7E  0E00               	movlw	0
 15161  001E80  6E1C               	movwf	command@arg,c
 15162  001E82  0E00               	movlw	0
 15163  001E84  6E1D               	movwf	command@arg+1,c
 15164  001E86  0E00               	movlw	0
 15165  001E88  6E1E               	movwf	command@arg+2,c
 15166  001E8A  0E00               	movlw	0
 15167  001E8C  6E1F               	movwf	command@arg+3,c
 15168  001E8E  0EFF               	movlw	255
 15169  001E90  6E20               	movwf	command@CRC,c
 15170  001E92  0E41               	movlw	65
 15171  001E94  ECCA  F02C         	call	_command
 15172                           
 15173                           ;diskio.c: 386: buff = 0XFF;
 15174  001E98  0100               	movlb	0	; () banked
 15175  001E9A  6981               	setf	sdc_disk_initialize@buff& (0+255),b
 15176                           
 15177                           ; BSR set to: 0
 15178                           ;diskio.c: 388: proceed();
 15179  001E9C  ECD5  F02D         	call	_proceed	;wreg free
 15180  001EA0                     
 15181                           ;diskio.c: 390: buff = response();
 15182  001EA0  ECC2  F02D         	call	_response	;wreg free
 15183  001EA4  0100               	movlb	0	; () banked
 15184  001EA6  6F81               	movwf	sdc_disk_initialize@buff& (0+255),b
 15185                           
 15186                           ; BSR set to: 0
 15187                           ;diskio.c: 391: count2++;
 15188  001EA8  4B7F               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 15189  001EAA  2B80               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 15190                           
 15191                           ; BSR set to: 0
 15192                           ;diskio.c: 392: }while((buff!=0X01)&&(count2<10));
 15193  001EAC  0581               	decf	sdc_disk_initialize@buff& (0+255),w,b
 15194  001EAE  B4D8               	btfsc	status,2,c
 15195  001EB0  D008               	goto	u16380
 15196                           
 15197                           ; BSR set to: 0
 15198  001EB2  BF80               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 15199  001EB4  D7F5               	goto	l901
 15200  001EB6  5180               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 15201  001EB8  E104               	bnz	l12960
 15202  001EBA  0E0A               	movlw	10
 15203  001EBC  5D7F               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 15204  001EBE  A0D8               	btfss	status,0,c
 15205  001EC0  D7EF               	goto	l901
 15206  001EC2                     u16380:
 15207  001EC2                     l12960:
 15208                           
 15209                           ; BSR set to: 0
 15210                           ;diskio.c: 395: dummy_clocks(8);
 15211  001EC2  0E08               	movlw	8
 15212  001EC4  EC52  F02C         	call	_dummy_clocks
 15213                           
 15214                           ;diskio.c: 396: command(0X77, 0X00000000, 0X95);
 15215  001EC8  0E00               	movlw	0
 15216  001ECA  6E1C               	movwf	command@arg,c
 15217  001ECC  0E00               	movlw	0
 15218  001ECE  6E1D               	movwf	command@arg+1,c
 15219  001ED0  0E00               	movlw	0
 15220  001ED2  6E1E               	movwf	command@arg+2,c
 15221  001ED4  0E00               	movlw	0
 15222  001ED6  6E1F               	movwf	command@arg+3,c
 15223  001ED8  0E95               	movlw	149
 15224  001EDA  6E20               	movwf	command@CRC,c
 15225  001EDC  0E77               	movlw	119
 15226  001EDE  ECCA  F02C         	call	_command
 15227                           
 15228                           ;diskio.c: 397: buff = 0XFF;
 15229  001EE2  0100               	movlb	0	; () banked
 15230  001EE4  6981               	setf	sdc_disk_initialize@buff& (0+255),b
 15231                           
 15232                           ;diskio.c: 399: proceed();
 15233  001EE6  ECD5  F02D         	call	_proceed	;wreg free
 15234  001EEA                     l905:
 15235                           
 15236                           ;diskio.c: 401: buff = response();
 15237  001EEA  ECC2  F02D         	call	_response	;wreg free
 15238  001EEE  0100               	movlb	0	; () banked
 15239  001EF0  6F81               	movwf	sdc_disk_initialize@buff& (0+255),b
 15240                           
 15241                           ; BSR set to: 0
 15242                           ;diskio.c: 402: count2++;
 15243  001EF2  4B7F               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 15244  001EF4  2B80               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 15245                           
 15246                           ; BSR set to: 0
 15247                           ;diskio.c: 403: }while((buff!=0X01)&&(count2<10));
 15248  001EF6  0581               	decf	sdc_disk_initialize@buff& (0+255),w,b
 15249  001EF8  B4D8               	btfsc	status,2,c
 15250  001EFA  D008               	goto	u16400
 15251                           
 15252                           ; BSR set to: 0
 15253  001EFC  BF80               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 15254  001EFE  D7F5               	goto	l905
 15255  001F00  5180               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 15256  001F02  E104               	bnz	l12970
 15257  001F04  0E0A               	movlw	10
 15258  001F06  5D7F               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 15259  001F08  A0D8               	btfss	status,0,c
 15260  001F0A  D7EF               	goto	l905
 15261  001F0C                     u16400:
 15262  001F0C                     l12970:
 15263                           
 15264                           ; BSR set to: 0
 15265                           ;diskio.c: 405: count2 = 0;
 15266  001F0C  0E00               	movlw	0
 15267  001F0E  6F80               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 15268  001F10  0E00               	movlw	0
 15269  001F12  6F7F               	movwf	sdc_disk_initialize@count2& (0+255),b
 15270                           
 15271                           ; BSR set to: 0
 15272                           ;diskio.c: 408: LATBbits.LATB4 = 0;
 15273  001F14  988A               	bcf	3978,4,c	;volatile
 15274                           
 15275                           ; BSR set to: 0
 15276                           ;diskio.c: 409: dummy_clocks(10);
 15277  001F16  0E0A               	movlw	10
 15278  001F18  EC52  F02C         	call	_dummy_clocks
 15279                           
 15280                           ;diskio.c: 410: command(0X69, 0X20000000, 0x95);
 15281  001F1C  0E00               	movlw	0
 15282  001F1E  6E1C               	movwf	command@arg,c
 15283  001F20  0E00               	movlw	0
 15284  001F22  6E1D               	movwf	command@arg+1,c
 15285  001F24  0E00               	movlw	0
 15286  001F26  6E1E               	movwf	command@arg+2,c
 15287  001F28  0E20               	movlw	32
 15288  001F2A  6E1F               	movwf	command@arg+3,c
 15289  001F2C  0E95               	movlw	149
 15290  001F2E  6E20               	movwf	command@CRC,c
 15291  001F30  0E69               	movlw	105
 15292  001F32  ECCA  F02C         	call	_command
 15293                           
 15294                           ;diskio.c: 411: proceed();
 15295  001F36  ECD5  F02D         	call	_proceed	;wreg free
 15296                           
 15297                           ;diskio.c: 412: LATBbits.LATB4 = 1;
 15298  001F3A  888A               	bsf	3978,4,c	;volatile
 15299                           
 15300                           ;diskio.c: 413: posicao_cursor_lcd(1,0);
 15301  001F3C  0E00               	movlw	0
 15302  001F3E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 15303  001F40  0E01               	movlw	1
 15304  001F42  ECB8  F029         	call	_posicao_cursor_lcd
 15305                           
 15306                           ;diskio.c: 414: escreve_frase_ram_lcd("ACMD41");
 15307  001F46  0E21               	movlw	low STR_20
 15308  001F48  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 15309  001F4A  0E62               	movlw	high STR_20
 15310  001F4C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 15311  001F4E  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 15312  001F52                     
 15313                           ;diskio.c: 417: buff = response();
 15314  001F52  ECC2  F02D         	call	_response	;wreg free
 15315  001F56  0100               	movlb	0	; () banked
 15316  001F58  6F81               	movwf	sdc_disk_initialize@buff& (0+255),b
 15317                           
 15318                           ; BSR set to: 0
 15319                           ;diskio.c: 418: count2++;;
 15320  001F5A  4B7F               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 15321  001F5C  2B80               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 15322                           
 15323                           ; BSR set to: 0
 15324                           ;diskio.c: 419: posicao_cursor_lcd(1,0);
 15325  001F5E  0E00               	movlw	0
 15326  001F60  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 15327  001F62  0E01               	movlw	1
 15328  001F64  ECB8  F029         	call	_posicao_cursor_lcd
 15329                           
 15330                           ;diskio.c: 420: escreve_inteiro_lcd(buff);
 15331  001F68  C081  F02C         	movff	sdc_disk_initialize@buff,escreve_inteiro_lcd@valor
 15332  001F6C  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 15333  001F6E  EC71  F02C         	call	_escreve_inteiro_lcd	;wreg free
 15334                           
 15335                           ;diskio.c: 421: }while(buff!=0X00);
 15336  001F72  0100               	movlb	0	; () banked
 15337  001F74  5181               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15338  001F76  A4D8               	btfss	status,2,c
 15339  001F78  D7EC               	goto	l909
 15340                           
 15341                           ; BSR set to: 0
 15342                           ;diskio.c: 423: buff = 0xFF;
 15343  001F7A  6981               	setf	sdc_disk_initialize@buff& (0+255),b
 15344                           
 15345                           ; BSR set to: 0
 15346                           ;diskio.c: 424: dummy_clocks(10);
 15347  001F7C  0E0A               	movlw	10
 15348  001F7E  EC52  F02C         	call	_dummy_clocks
 15349                           
 15350                           ;diskio.c: 425: command(0X7A, 0X00000000, 0XFF);
 15351  001F82  0E00               	movlw	0
 15352  001F84  6E1C               	movwf	command@arg,c
 15353  001F86  0E00               	movlw	0
 15354  001F88  6E1D               	movwf	command@arg+1,c
 15355  001F8A  0E00               	movlw	0
 15356  001F8C  6E1E               	movwf	command@arg+2,c
 15357  001F8E  0E00               	movlw	0
 15358  001F90  6E1F               	movwf	command@arg+3,c
 15359  001F92  0EFF               	movlw	255
 15360  001F94  6E20               	movwf	command@CRC,c
 15361  001F96  0E7A               	movlw	122
 15362  001F98  ECCA  F02C         	call	_command
 15363                           
 15364                           ;diskio.c: 426: proceed();
 15365  001F9C  ECD5  F02D         	call	_proceed	;wreg free
 15366  001FA0                     l911:
 15367                           
 15368                           ;diskio.c: 428: buff = response();
 15369  001FA0  ECC2  F02D         	call	_response	;wreg free
 15370  001FA4  0100               	movlb	0	; () banked
 15371  001FA6  6F81               	movwf	sdc_disk_initialize@buff& (0+255),b
 15372                           
 15373                           ; BSR set to: 0
 15374                           ;diskio.c: 429: ocr = (buff << 1) & 0b10000000;
 15375  001FA8  5181               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15376  001FAA  2581               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 15377  001FAC  0B80               	andlw	128
 15378  001FAE  6F7E               	movwf	sdc_disk_initialize@ocr& (0+255),b
 15379                           
 15380                           ; BSR set to: 0
 15381                           ;diskio.c: 430: posicao_cursor_lcd(1,0);
 15382  001FB0  0E00               	movlw	0
 15383  001FB2  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 15384  001FB4  0E01               	movlw	1
 15385  001FB6  ECB8  F029         	call	_posicao_cursor_lcd
 15386                           
 15387                           ;diskio.c: 431: escreve_inteiro_lcd(ocr);
 15388  001FBA  C07E  F02C         	movff	sdc_disk_initialize@ocr,escreve_inteiro_lcd@valor
 15389  001FBE  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 15390  001FC0  EC71  F02C         	call	_escreve_inteiro_lcd	;wreg free
 15391                           
 15392                           ;diskio.c: 432: _delay((unsigned long)((1000)*(48000000/4000.0)));
 15393  001FC4  0E3D               	movlw	61
 15394  001FC6  0100               	movlb	0	; () banked
 15395  001FC8  6F75               	movwf	(??_sdc_disk_initialize+1)& (0+255),b
 15396  001FCA  0EE1               	movlw	225
 15397  001FCC  6F74               	movwf	??_sdc_disk_initialize& (0+255),b
 15398  001FCE  0E3F               	movlw	63
 15399  001FD0                     u21887:
 15400  001FD0  2EE8               	decfsz	wreg,f,c
 15401  001FD2  D7FE               	bra	u21887
 15402  001FD4  2F74               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 15403  001FD6  D7FC               	bra	u21887
 15404  001FD8  2F75               	decfsz	(??_sdc_disk_initialize+1)& (0+255),f,b
 15405  001FDA  D7FA               	bra	u21887
 15406  001FDC  D000               	nop2	
 15407                           
 15408                           ;diskio.c: 433: count2++;
 15409  001FDE  0100               	movlb	0	; () banked
 15410  001FE0  4B7F               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 15411  001FE2  2B80               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 15412                           
 15413                           ; BSR set to: 0
 15414                           ;diskio.c: 434: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 15415  001FE4  517E               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 15416  001FE6  B4D8               	btfsc	status,2,c
 15417  001FE8  D00B               	goto	u16440
 15418                           
 15419                           ; BSR set to: 0
 15420  001FEA  057E               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 15421  001FEC  B4D8               	btfsc	status,2,c
 15422  001FEE  D008               	goto	u16440
 15423                           
 15424                           ; BSR set to: 0
 15425  001FF0  BF80               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 15426  001FF2  D7D6               	goto	l911
 15427  001FF4  5180               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 15428  001FF6  E104               	bnz	l13014
 15429  001FF8  0E0A               	movlw	10
 15430  001FFA  5D7F               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 15431  001FFC  A0D8               	btfss	status,0,c
 15432  001FFE  D7D0               	goto	l911
 15433  002000                     u16440:
 15434  002000                     l13014:
 15435                           
 15436                           ; BSR set to: 0
 15437                           ;diskio.c: 435: }while(ocr != 0X00 && ocr !=0x01);
 15438  002000  517E               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 15439  002002  B4D8               	btfsc	status,2,c
 15440  002004  D003               	goto	u16460
 15441                           
 15442                           ; BSR set to: 0
 15443  002006  057E               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 15444  002008  A4D8               	btfss	status,2,c
 15445  00200A  D724               	goto	l900
 15446  00200C                     u16460:
 15447                           
 15448                           ; BSR set to: 0
 15449                           ;diskio.c: 439: count1 = 0;
 15450                           
 15451                           ; BSR set to: 0
 15452                           
 15453                           ; BSR set to: 0
 15454  00200C  0E00               	movlw	0
 15455  00200E  6F7A               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 15456  002010  0E00               	movlw	0
 15457  002012  6F79               	movwf	sdc_disk_initialize@count1& (0+255),b
 15458                           
 15459                           ; BSR set to: 0
 15460                           ;diskio.c: 441: _delay((unsigned long)((1)*(48000000/4000.0)));
 15461  002014  0E10               	movlw	16
 15462  002016  0100               	movlb	0	; () banked
 15463  002018  6F74               	movwf	??_sdc_disk_initialize& (0+255),b
 15464  00201A  0E94               	movlw	148
 15465  00201C                     u21897:
 15466  00201C  2EE8               	decfsz	wreg,f,c
 15467  00201E  D7FE               	bra	u21897
 15468  002020  2F74               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 15469  002022  D7FC               	bra	u21897
 15470  002024  F000               	nop	
 15471                           
 15472                           ;diskio.c: 442: stat = 0X00;
 15473  002026  0E00               	movlw	0
 15474  002028  0100               	movlb	0	; () banked
 15475  00202A  6F78               	movwf	sdc_disk_initialize@stat& (0+255),b
 15476                           
 15477                           ; BSR set to: 0
 15478                           ;diskio.c: 444: if(!ocr)
 15479  00202C  517E               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 15480  00202E  A4D8               	btfss	status,2,c
 15481  002030  D029               	goto	u16480
 15482                           
 15483                           ; BSR set to: 0
 15484                           ;diskio.c: 445: {
 15485                           ;diskio.c: 446: escreve_cmd_lcd(0b00000001);
 15486  002032  0E01               	movlw	1
 15487  002034  ECC3  F027         	call	_escreve_cmd_lcd
 15488                           
 15489                           ;diskio.c: 447: posicao_cursor_lcd(1,0);
 15490  002038  0E00               	movlw	0
 15491  00203A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 15492  00203C  0E01               	movlw	1
 15493  00203E  ECB8  F029         	call	_posicao_cursor_lcd
 15494                           
 15495                           ;diskio.c: 448: escreve_frase_ram_lcd("comando 16");
 15496  002042  0ED9               	movlw	low STR_21
 15497  002044  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 15498  002046  0E61               	movlw	high STR_21
 15499  002048  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 15500  00204A  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 15501                           
 15502                           ;diskio.c: 449: dummy_clocks(10);
 15503  00204E  0E0A               	movlw	10
 15504  002050  EC52  F02C         	call	_dummy_clocks
 15505                           
 15506                           ;diskio.c: 450: command(0X50,0X00000200,0XFF);
 15507  002054  0E00               	movlw	0
 15508  002056  6E1C               	movwf	command@arg,c
 15509  002058  0E02               	movlw	2
 15510  00205A  6E1D               	movwf	command@arg+1,c
 15511  00205C  0E00               	movlw	0
 15512  00205E  6E1E               	movwf	command@arg+2,c
 15513  002060  0E00               	movlw	0
 15514  002062  6E1F               	movwf	command@arg+3,c
 15515  002064  0EFF               	movlw	255
 15516  002066  6E20               	movwf	command@CRC,c
 15517  002068  0E50               	movlw	80
 15518  00206A  ECCA  F02C         	call	_command
 15519                           
 15520                           ;diskio.c: 451: proceed();
 15521  00206E  ECD5  F02D         	call	_proceed	;wreg free
 15522                           
 15523                           ;diskio.c: 453: buff = 0xFF;
 15524  002072  0100               	movlb	0	; () banked
 15525  002074  6981               	setf	sdc_disk_initialize@buff& (0+255),b
 15526  002076                     
 15527                           ; BSR set to: 0
 15528                           ;diskio.c: 455: buff = response();
 15529                           
 15530                           ; BSR set to: 0
 15531  002076  ECC2  F02D         	call	_response	;wreg free
 15532  00207A  0100               	movlb	0	; () banked
 15533  00207C  6F81               	movwf	sdc_disk_initialize@buff& (0+255),b
 15534                           
 15535                           ; BSR set to: 0
 15536                           ;diskio.c: 456: }while(buff!=0X00);
 15537  00207E  5181               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15538  002080  A4D8               	btfss	status,2,c
 15539  002082  D7F9               	goto	l919
 15540  002084                     u16480:
 15541                           
 15542                           ; BSR set to: 0
 15543                           ;diskio.c: 457: }
 15544                           ;diskio.c: 459: _delay((unsigned long)((2000)*(48000000/4000.0)));
 15545                           
 15546                           ; BSR set to: 0
 15547                           
 15548                           ; BSR set to: 0
 15549  002084  0E7A               	movlw	122
 15550  002086  0100               	movlb	0	; () banked
 15551  002088  6F75               	movwf	(??_sdc_disk_initialize+1)& (0+255),b
 15552  00208A  0EC1               	movlw	193
 15553  00208C  6F74               	movwf	??_sdc_disk_initialize& (0+255),b
 15554  00208E  0E81               	movlw	129
 15555  002090                     u21907:
 15556  002090  2EE8               	decfsz	wreg,f,c
 15557  002092  D7FE               	bra	u21907
 15558  002094  2F74               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 15559  002096  D7FC               	bra	u21907
 15560  002098  2F75               	decfsz	(??_sdc_disk_initialize+1)& (0+255),f,b
 15561  00209A  D7FA               	bra	u21907
 15562  00209C  D000               	nop2	
 15563                           
 15564                           ;diskio.c: 460: }
 15565  00209E  D098               	goto	u16560
 15566  0020A0                     l899:
 15567                           
 15568                           ;diskio.c: 461: else
 15569                           ;diskio.c: 462: {
 15570                           ;diskio.c: 464: count2 = 0;
 15571  0020A0  0E00               	movlw	0
 15572  0020A2  0100               	movlb	0	; () banked
 15573  0020A4  6F80               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 15574  0020A6  0E00               	movlw	0
 15575  0020A8  6F7F               	movwf	sdc_disk_initialize@count2& (0+255),b
 15576                           
 15577                           ; BSR set to: 0
 15578                           ;diskio.c: 465: buff = 0XFF;
 15579  0020AA  6981               	setf	sdc_disk_initialize@buff& (0+255),b
 15580                           
 15581                           ; BSR set to: 0
 15582                           ;diskio.c: 466: dummy_clocks(10);
 15583  0020AC  0E0A               	movlw	10
 15584  0020AE  EC52  F02C         	call	_dummy_clocks
 15585                           
 15586                           ;diskio.c: 467: command(0X69, 0X00000000, 0XFF);
 15587  0020B2  0E00               	movlw	0
 15588  0020B4  6E1C               	movwf	command@arg,c
 15589  0020B6  0E00               	movlw	0
 15590  0020B8  6E1D               	movwf	command@arg+1,c
 15591  0020BA  0E00               	movlw	0
 15592  0020BC  6E1E               	movwf	command@arg+2,c
 15593  0020BE  0E00               	movlw	0
 15594  0020C0  6E1F               	movwf	command@arg+3,c
 15595  0020C2  0EFF               	movlw	255
 15596  0020C4  6E20               	movwf	command@CRC,c
 15597  0020C6  0E69               	movlw	105
 15598  0020C8  ECCA  F02C         	call	_command
 15599                           
 15600                           ;diskio.c: 468: proceed();
 15601  0020CC  ECD5  F02D         	call	_proceed	;wreg free
 15602  0020D0                     
 15603                           ;diskio.c: 470: buff = response();
 15604  0020D0  ECC2  F02D         	call	_response	;wreg free
 15605  0020D4  0100               	movlb	0	; () banked
 15606  0020D6  6F81               	movwf	sdc_disk_initialize@buff& (0+255),b
 15607                           
 15608                           ; BSR set to: 0
 15609                           ;diskio.c: 471: count2++;
 15610  0020D8  4B7F               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 15611  0020DA  2B80               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 15612                           
 15613                           ; BSR set to: 0
 15614                           ;diskio.c: 472: if(buff==0x00)
 15615  0020DC  5181               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15616  0020DE  A4D8               	btfss	status,2,c
 15617  0020E0  D00B               	goto	l923
 15618                           
 15619                           ; BSR set to: 0
 15620                           ;diskio.c: 473: {
 15621                           ;diskio.c: 474: posicao_cursor_lcd(1,0);
 15622  0020E2  0E00               	movlw	0
 15623  0020E4  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 15624  0020E6  0E01               	movlw	1
 15625  0020E8  ECB8  F029         	call	_posicao_cursor_lcd
 15626                           
 15627                           ;diskio.c: 475: escreve_frase_ram_lcd("SD VER. 1");
 15628  0020EC  0E05               	movlw	low STR_22
 15629  0020EE  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 15630  0020F0  0E62               	movlw	high STR_22
 15631  0020F2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 15632  0020F4  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 15633  0020F8                     l923:
 15634                           
 15635                           ;diskio.c: 476: }
 15636                           ;diskio.c: 477: _delay((unsigned long)((1)*(48000000/4000.0)));
 15637  0020F8  0E10               	movlw	16
 15638  0020FA  0100               	movlb	0	; () banked
 15639  0020FC  6F74               	movwf	??_sdc_disk_initialize& (0+255),b
 15640  0020FE  0E94               	movlw	148
 15641  002100                     u21917:
 15642  002100  2EE8               	decfsz	wreg,f,c
 15643  002102  D7FE               	bra	u21917
 15644  002104  2F74               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 15645  002106  D7FC               	bra	u21917
 15646  002108  F000               	nop	
 15647                           
 15648                           ;diskio.c: 478: }while(buff!=0X00 && count2<10000);
 15649  00210A  0100               	movlb	0	; () banked
 15650  00210C  5181               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15651  00210E  B4D8               	btfsc	status,2,c
 15652  002110  D008               	goto	u16510
 15653                           
 15654                           ; BSR set to: 0
 15655  002112  BF80               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 15656  002114  D7DD               	goto	l922
 15657  002116  0E10               	movlw	16
 15658  002118  5D7F               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 15659  00211A  0E27               	movlw	39
 15660  00211C  5980               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 15661  00211E  A0D8               	btfss	status,0,c
 15662  002120  D7D7               	goto	l922
 15663  002122                     u16510:
 15664                           
 15665                           ; BSR set to: 0
 15666                           ;diskio.c: 480: buff = 0xFF;
 15667                           
 15668                           ; BSR set to: 0
 15669  002122  6981               	setf	sdc_disk_initialize@buff& (0+255),b
 15670                           
 15671                           ; BSR set to: 0
 15672                           ;diskio.c: 481: if(count2==10)
 15673  002124  0E0A               	movlw	10
 15674  002126  197F               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 15675  002128  1180               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 15676  00212A  A4D8               	btfss	status,2,c
 15677  00212C  D036               	goto	u16550
 15678                           
 15679                           ; BSR set to: 0
 15680                           ;diskio.c: 482: {
 15681                           ;diskio.c: 483: count2 = 0;
 15682  00212E  0E00               	movlw	0
 15683  002130  6F80               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 15684  002132  0E00               	movlw	0
 15685  002134  6F7F               	movwf	sdc_disk_initialize@count2& (0+255),b
 15686                           
 15687                           ; BSR set to: 0
 15688                           ;diskio.c: 484: dummy_clocks(10);
 15689  002136  0E0A               	movlw	10
 15690  002138  EC52  F02C         	call	_dummy_clocks
 15691                           
 15692                           ;diskio.c: 485: command(0X41, 0X00000000, 0XFF);
 15693  00213C  0E00               	movlw	0
 15694  00213E  6E1C               	movwf	command@arg,c
 15695  002140  0E00               	movlw	0
 15696  002142  6E1D               	movwf	command@arg+1,c
 15697  002144  0E00               	movlw	0
 15698  002146  6E1E               	movwf	command@arg+2,c
 15699  002148  0E00               	movlw	0
 15700  00214A  6E1F               	movwf	command@arg+3,c
 15701  00214C  0EFF               	movlw	255
 15702  00214E  6E20               	movwf	command@CRC,c
 15703  002150  0E41               	movlw	65
 15704  002152  ECCA  F02C         	call	_command
 15705                           
 15706                           ;diskio.c: 486: proceed();
 15707  002156  ECD5  F02D         	call	_proceed	;wreg free
 15708  00215A                     
 15709                           ;diskio.c: 488: buff = response();
 15710  00215A  ECC2  F02D         	call	_response	;wreg free
 15711  00215E  0100               	movlb	0	; () banked
 15712  002160  6F81               	movwf	sdc_disk_initialize@buff& (0+255),b
 15713                           
 15714                           ; BSR set to: 0
 15715                           ;diskio.c: 489: count2++;
 15716  002162  4B7F               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 15717  002164  2B80               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 15718                           
 15719                           ; BSR set to: 0
 15720                           ;diskio.c: 490: if(buff==0x00)
 15721  002166  5181               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15722  002168  A4D8               	btfss	status,2,c
 15723  00216A  D00B               	goto	l929
 15724                           
 15725                           ; BSR set to: 0
 15726                           ;diskio.c: 491: {
 15727                           ;diskio.c: 492: posicao_cursor_lcd(1,0);
 15728  00216C  0E00               	movlw	0
 15729  00216E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 15730  002170  0E01               	movlw	1
 15731  002172  ECB8  F029         	call	_posicao_cursor_lcd
 15732                           
 15733                           ;diskio.c: 493: escreve_frase_ram_lcd("MMC Ver. 3");
 15734  002176  0ECE               	movlw	low STR_23
 15735  002178  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 15736  00217A  0E61               	movlw	high STR_23
 15737  00217C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 15738  00217E  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 15739  002182                     l929:
 15740                           
 15741                           ;diskio.c: 494: }
 15742                           ;diskio.c: 496: }while(buff!=0X00 && count2<10000);
 15743  002182  0100               	movlb	0	; () banked
 15744  002184  5181               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15745  002186  B4D8               	btfsc	status,2,c
 15746  002188  D008               	goto	u16550
 15747                           
 15748                           ; BSR set to: 0
 15749  00218A  BF80               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 15750  00218C  D7E6               	goto	l928
 15751  00218E  0E10               	movlw	16
 15752  002190  5D7F               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 15753  002192  0E27               	movlw	39
 15754  002194  5980               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 15755  002196  A0D8               	btfss	status,0,c
 15756  002198  D7E0               	goto	l928
 15757  00219A                     u16550:
 15758                           
 15759                           ; BSR set to: 0
 15760                           ;diskio.c: 497: }
 15761                           ;diskio.c: 500: dummy_clocks(10);
 15762                           
 15763                           ; BSR set to: 0
 15764                           
 15765                           ; BSR set to: 0
 15766                           
 15767                           ; BSR set to: 0
 15768  00219A  0E0A               	movlw	10
 15769  00219C  EC52  F02C         	call	_dummy_clocks
 15770                           
 15771                           ;diskio.c: 501: command(0X50,0X00000200,0XFF);
 15772  0021A0  0E00               	movlw	0
 15773  0021A2  6E1C               	movwf	command@arg,c
 15774  0021A4  0E02               	movlw	2
 15775  0021A6  6E1D               	movwf	command@arg+1,c
 15776  0021A8  0E00               	movlw	0
 15777  0021AA  6E1E               	movwf	command@arg+2,c
 15778  0021AC  0E00               	movlw	0
 15779  0021AE  6E1F               	movwf	command@arg+3,c
 15780  0021B0  0EFF               	movlw	255
 15781  0021B2  6E20               	movwf	command@CRC,c
 15782  0021B4  0E50               	movlw	80
 15783  0021B6  ECCA  F02C         	call	_command
 15784                           
 15785                           ;diskio.c: 502: proceed();
 15786  0021BA  ECD5  F02D         	call	_proceed	;wreg free
 15787                           
 15788                           ;diskio.c: 504: buff = 0xFF;
 15789  0021BE  0100               	movlb	0	; () banked
 15790  0021C0  6981               	setf	sdc_disk_initialize@buff& (0+255),b
 15791  0021C2                     l933:
 15792                           
 15793                           ; BSR set to: 0
 15794                           ;diskio.c: 506: buff = response();
 15795  0021C2  ECC2  F02D         	call	_response	;wreg free
 15796  0021C6  0100               	movlb	0	; () banked
 15797  0021C8  6F81               	movwf	sdc_disk_initialize@buff& (0+255),b
 15798                           
 15799                           ; BSR set to: 0
 15800                           ;diskio.c: 507: }while(buff!=0X00);
 15801  0021CA  5181               	movf	sdc_disk_initialize@buff& (0+255),w,b
 15802  0021CC  A4D8               	btfss	status,2,c
 15803  0021CE  D7F9               	goto	l933
 15804  0021D0                     u16560:
 15805                           
 15806                           ;diskio.c: 509: }
 15807                           ;diskio.c: 513: return stat;
 15808                           
 15809                           ; BSR set to: 0
 15810                           
 15811                           ; BSR set to: 0
 15812  0021D0  0100               	movlb	0	; () banked
 15813  0021D2  5178               	movf	sdc_disk_initialize@stat& (0+255),w,b
 15814  0021D4  0012               	return	
 15815  0021D6                     __end_of_sdc_disk_initialize:
 15816                           	opt stack 0
 15817                           tosu	equ	0xFFF
 15818                           tosh	equ	0xFFE
 15819                           tosl	equ	0xFFD
 15820                           pclath	equ	0xFFA
 15821                           tblptru	equ	0xFF8
 15822                           tblptrh	equ	0xFF7
 15823                           tblptrl	equ	0xFF6
 15824                           tablat	equ	0xFF5
 15825                           prodh	equ	0xFF4
 15826                           prodl	equ	0xFF3
 15827                           intcon	equ	0xFF2
 15828                           intcon2	equ	0xFF1
 15829                           intcon3	equ	0xFF0
 15830                           indf0	equ	0xFEF
 15831                           postinc0	equ	0xFEE
 15832                           fsr0h	equ	0xFEA
 15833                           fsr0l	equ	0xFE9
 15834                           wreg	equ	0xFE8
 15835                           indf1	equ	0xFE7
 15836                           postinc1	equ	0xFE6
 15837                           postdec1	equ	0xFE5
 15838                           fsr1h	equ	0xFE2
 15839                           fsr1l	equ	0xFE1
 15840                           indf2	equ	0xFDF
 15841                           postinc2	equ	0xFDE
 15842                           postdec2	equ	0xFDD
 15843                           plusw2	equ	0xFDB
 15844                           fsr2h	equ	0xFDA
 15845                           fsr2l	equ	0xFD9
 15846                           status	equ	0xFD8
 15847                           
 15848 ;; *************** function _sdc_reset *****************
 15849 ;; Defined at:
 15850 ;;		line 288 in file "bibliotecas/diskio.c"
 15851 ;; Parameters:    Size  Location     Type
 15852 ;;		None
 15853 ;; Auto vars:     Size  Location     Type
 15854 ;;  teste          10    0        unsigned char [10]
 15855 ;;  count           2   17[BANK0 ] int 
 15856 ;;  count_nosd      2   15[BANK0 ] int 
 15857 ;;  i               2   13[BANK0 ] int 
 15858 ;;  receive         2    0        unsigned int 
 15859 ;;  buff            1   19[BANK0 ] unsigned char 
 15860 ;;  stat            1    0        unsigned char 
 15861 ;; Return value:  Size  Location     Type
 15862 ;;                  1    wreg      void 
 15863 ;; Registers used:
 15864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15865 ;; Tracked objects:
 15866 ;;		On entry : 0/0
 15867 ;;		On exit  : 0/0
 15868 ;;		Unchanged: 0/0
 15869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15870 ;;      Params:         0       0       0       0       0       0       0       0       0
 15871 ;;      Locals:         0       7       0       0       0       0       0       0       0
 15872 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15873 ;;      Totals:         0       7       0       0       0       0       0       0       0
 15874 ;;Total ram usage:        7 bytes
 15875 ;; Hardware stack levels used:    1
 15876 ;; Hardware stack levels required when called:    6
 15877 ;; This function calls:
 15878 ;;		_command
 15879 ;;		_dummy_clocks
 15880 ;;		_escreve_frase_ram_lcd
 15881 ;;		_escreve_inteiro_lcd
 15882 ;;		_posicao_cursor_lcd
 15883 ;;		_proceed
 15884 ;;		_response
 15885 ;; This function is called by:
 15886 ;;		_sdc_disk_initialize
 15887 ;; This function uses a non-reentrant model
 15888 ;;
 15889                           
 15890                           	psect	text40
 15891  004A3A                     __ptext40:
 15892                           	opt stack 0
 15893  004A3A                     _sdc_reset:
 15894                           	opt stack 18
 15895                           
 15896                           ;diskio.c: 290: int i = 0, count = 0, count_nosd = 0;
 15897                           
 15898                           ; BSR set to: 0
 15899                           ;incstack = 0
 15900  004A3A  0E00               	movlw	0
 15901  004A3C  0100               	movlb	0	; () banked
 15902  004A3E  6F6E               	movwf	(sdc_reset@i+1)& (0+255),b
 15903  004A40  0E00               	movlw	0
 15904  004A42  6F6D               	movwf	sdc_reset@i& (0+255),b
 15905  004A44  0E00               	movlw	0
 15906  004A46  6F72               	movwf	(sdc_reset@count+1)& (0+255),b
 15907  004A48  0E00               	movlw	0
 15908  004A4A  6F71               	movwf	sdc_reset@count& (0+255),b
 15909  004A4C  0E00               	movlw	0
 15910  004A4E  6F70               	movwf	(sdc_reset@count_nosd+1)& (0+255),b
 15911  004A50  0E00               	movlw	0
 15912  004A52  6F6F               	movwf	sdc_reset@count_nosd& (0+255),b
 15913  004A54                     
 15914                           ; BSR set to: 0
 15915                           ;diskio.c: 297: LATBbits.LATB4 = 0;
 15916                           
 15917                           ; BSR set to: 0
 15918  004A54  988A               	bcf	3978,4,c	;volatile
 15919                           
 15920                           ; BSR set to: 0
 15921                           ;diskio.c: 298: dummy_clocks(10);
 15922  004A56  0E0A               	movlw	10
 15923  004A58  EC52  F02C         	call	_dummy_clocks
 15924                           
 15925                           ;diskio.c: 299: command(0X40, 0X00000000, 0X95);
 15926  004A5C  0E00               	movlw	0
 15927  004A5E  6E1C               	movwf	command@arg,c
 15928  004A60  0E00               	movlw	0
 15929  004A62  6E1D               	movwf	command@arg+1,c
 15930  004A64  0E00               	movlw	0
 15931  004A66  6E1E               	movwf	command@arg+2,c
 15932  004A68  0E00               	movlw	0
 15933  004A6A  6E1F               	movwf	command@arg+3,c
 15934  004A6C  0E95               	movlw	149
 15935  004A6E  6E20               	movwf	command@CRC,c
 15936  004A70  0E40               	movlw	64
 15937  004A72  ECCA  F02C         	call	_command
 15938                           
 15939                           ;diskio.c: 300: proceed();
 15940  004A76  ECD5  F02D         	call	_proceed	;wreg free
 15941                           
 15942                           ;diskio.c: 301: LATBbits.LATB4 = 1;
 15943  004A7A  888A               	bsf	3978,4,c	;volatile
 15944  004A7C                     
 15945                           ;diskio.c: 303: buff = response();
 15946  004A7C  ECC2  F02D         	call	_response	;wreg free
 15947  004A80  0100               	movlb	0	; () banked
 15948  004A82  6F73               	movwf	sdc_reset@buff& (0+255),b
 15949                           
 15950                           ; BSR set to: 0
 15951                           ;diskio.c: 304: count++;
 15952  004A84  4B71               	infsnz	sdc_reset@count& (0+255),f,b
 15953  004A86  2B72               	incf	(sdc_reset@count+1)& (0+255),f,b
 15954                           
 15955                           ; BSR set to: 0
 15956                           ;diskio.c: 305: posicao_cursor_lcd(1,0);
 15957  004A88  0E00               	movlw	0
 15958  004A8A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 15959  004A8C  0E01               	movlw	1
 15960  004A8E  ECB8  F029         	call	_posicao_cursor_lcd
 15961                           
 15962                           ;diskio.c: 306: escreve_inteiro_lcd(buff);
 15963  004A92  C073  F02C         	movff	sdc_reset@buff,escreve_inteiro_lcd@valor
 15964  004A96  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 15965  004A98  EC71  F02C         	call	_escreve_inteiro_lcd	;wreg free
 15966                           
 15967                           ;diskio.c: 307: }while((buff!=0X01) && count<300);
 15968  004A9C  0100               	movlb	0	; () banked
 15969  004A9E  0573               	decf	sdc_reset@buff& (0+255),w,b
 15970  004AA0  B4D8               	btfsc	status,2,c
 15971  004AA2  D008               	goto	u15980
 15972                           
 15973                           ; BSR set to: 0
 15974  004AA4  BF72               	btfsc	(sdc_reset@count+1)& (0+255),7,b
 15975  004AA6  D7EA               	goto	l883
 15976  004AA8  0E2C               	movlw	44
 15977  004AAA  5D71               	subwf	sdc_reset@count& (0+255),w,b
 15978  004AAC  0E01               	movlw	1
 15979  004AAE  5972               	subwfb	(sdc_reset@count+1)& (0+255),w,b
 15980  004AB0  A0D8               	btfss	status,0,c
 15981  004AB2  D7E4               	goto	l883
 15982  004AB4                     u15980:
 15983                           
 15984                           ; BSR set to: 0
 15985                           ;diskio.c: 308: count = 0;
 15986                           
 15987                           ; BSR set to: 0
 15988                           
 15989                           ; BSR set to: 0
 15990  004AB4  0E00               	movlw	0
 15991  004AB6  6F72               	movwf	(sdc_reset@count+1)& (0+255),b
 15992  004AB8  0E00               	movlw	0
 15993  004ABA  6F71               	movwf	sdc_reset@count& (0+255),b
 15994                           
 15995                           ; BSR set to: 0
 15996                           ;diskio.c: 309: if(buff != 0x01)
 15997  004ABC  0573               	decf	sdc_reset@buff& (0+255),w,b
 15998  004ABE  B4D8               	btfsc	status,2,c
 15999  004AC0  D016               	goto	l887
 16000                           
 16001                           ; BSR set to: 0
 16002                           ;diskio.c: 310: {
 16003                           ;diskio.c: 311: posicao_cursor_lcd(1,0);
 16004  004AC2  0E00               	movlw	0
 16005  004AC4  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16006  004AC6  0E01               	movlw	1
 16007  004AC8  ECB8  F029         	call	_posicao_cursor_lcd
 16008                           
 16009                           ;diskio.c: 312: escreve_frase_ram_lcd("Sem Cartao");
 16010  004ACC  0EE4               	movlw	low STR_17
 16011  004ACE  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16012  004AD0  0E61               	movlw	high STR_17
 16013  004AD2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16014  004AD4  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 16015                           
 16016                           ;diskio.c: 313: posicao_cursor_lcd(2,0);
 16017  004AD8  0E00               	movlw	0
 16018  004ADA  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16019  004ADC  0E02               	movlw	2
 16020  004ADE  ECB8  F029         	call	_posicao_cursor_lcd
 16021                           
 16022                           ;diskio.c: 314: escreve_frase_ram_lcd("Insira o Cartao");
 16023  004AE2  0EAF               	movlw	low STR_18
 16024  004AE4  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16025  004AE6  0E61               	movlw	high STR_18
 16026  004AE8  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16027  004AEA  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 16028  004AEE                     l887:
 16029                           
 16030                           ;diskio.c: 315: }
 16031                           ;diskio.c: 317: }while(buff!=0X01);
 16032  004AEE  0100               	movlb	0	; () banked
 16033  004AF0  0573               	decf	sdc_reset@buff& (0+255),w,b
 16034  004AF2  B4D8               	btfsc	status,2,c
 16035  004AF4  0012               	return	
 16036  004AF6  D7AE               	goto	l882
 16037  004AF8                     __end_of_sdc_reset:
 16038                           	opt stack 0
 16039                           tosu	equ	0xFFF
 16040                           tosh	equ	0xFFE
 16041                           tosl	equ	0xFFD
 16042                           pclath	equ	0xFFA
 16043                           tblptru	equ	0xFF8
 16044                           tblptrh	equ	0xFF7
 16045                           tblptrl	equ	0xFF6
 16046                           tablat	equ	0xFF5
 16047                           prodh	equ	0xFF4
 16048                           prodl	equ	0xFF3
 16049                           intcon	equ	0xFF2
 16050                           intcon2	equ	0xFF1
 16051                           intcon3	equ	0xFF0
 16052                           indf0	equ	0xFEF
 16053                           postinc0	equ	0xFEE
 16054                           fsr0h	equ	0xFEA
 16055                           fsr0l	equ	0xFE9
 16056                           wreg	equ	0xFE8
 16057                           indf1	equ	0xFE7
 16058                           postinc1	equ	0xFE6
 16059                           postdec1	equ	0xFE5
 16060                           fsr1h	equ	0xFE2
 16061                           fsr1l	equ	0xFE1
 16062                           indf2	equ	0xFDF
 16063                           postinc2	equ	0xFDE
 16064                           postdec2	equ	0xFDD
 16065                           plusw2	equ	0xFDB
 16066                           fsr2h	equ	0xFDA
 16067                           fsr2l	equ	0xFD9
 16068                           status	equ	0xFD8
 16069                           
 16070 ;; *************** function _check_fs *****************
 16071 ;; Defined at:
 16072 ;;		line 3011 in file "bibliotecas/ff.c"
 16073 ;; Parameters:    Size  Location     Type
 16074 ;;  fs              2   48[BANK0 ] PTR struct .
 16075 ;;		 -> NULL(0), fs(559), 
 16076 ;;  sect            4   50[BANK0 ] unsigned long 
 16077 ;; Auto vars:     Size  Location     Type
 16078 ;;		None
 16079 ;; Return value:  Size  Location     Type
 16080 ;;                  1    wreg      unsigned char 
 16081 ;; Registers used:
 16082 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16083 ;; Tracked objects:
 16084 ;;		On entry : 0/0
 16085 ;;		On exit  : 0/0
 16086 ;;		Unchanged: 0/0
 16087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16088 ;;      Params:         0       6       0       0       0       0       0       0       0
 16089 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16090 ;;      Temps:          0       1       0       0       0       0       0       0       0
 16091 ;;      Totals:         0       7       0       0       0       0       0       0       0
 16092 ;;Total ram usage:        7 bytes
 16093 ;; Hardware stack levels used:    1
 16094 ;; Hardware stack levels required when called:    9
 16095 ;; This function calls:
 16096 ;;		_ld_word
 16097 ;;		_mem_cmp
 16098 ;;		_move_window
 16099 ;; This function is called by:
 16100 ;;		_find_volume
 16101 ;; This function uses a non-reentrant model
 16102 ;;
 16103                           
 16104                           	psect	text41
 16105  004320                     __ptext41:
 16106                           	opt stack 0
 16107  004320                     _check_fs:
 16108                           	opt stack 17
 16109                           
 16110                           ;ff.c: 3016: fs->wflag = 0;
 16111                           
 16112                           ; BSR set to: 0
 16113                           ;incstack = 0
 16114  004320  0100               	movlb	0	; () banked
 16115  004322  EE20 F003          	lfsr	2,3
 16116  004326  5190               	movf	check_fs@fs& (0+255),w,b
 16117  004328  26D9               	addwf	fsr2l,f,c
 16118  00432A  5191               	movf	(check_fs@fs+1)& (0+255),w,b
 16119  00432C  22DA               	addwfc	fsr2h,f,c
 16120  00432E  0E00               	movlw	0
 16121  004330  6EDF               	movwf	indf2,c
 16122                           
 16123                           ;ff.c: 3017: fs->winsect = 0xFFFFFFFF;
 16124  004332  EE20 F02B          	lfsr	2,43
 16125  004336  5190               	movf	check_fs@fs& (0+255),w,b
 16126  004338  26D9               	addwf	fsr2l,f,c
 16127  00433A  5191               	movf	(check_fs@fs+1)& (0+255),w,b
 16128  00433C  22DA               	addwfc	fsr2h,f,c
 16129  00433E  0EFF               	movlw	255
 16130  004340  6EDE               	movwf	postinc2,c
 16131  004342  0EFF               	movlw	255
 16132  004344  6EDE               	movwf	postinc2,c
 16133  004346  0EFF               	movlw	255
 16134  004348  6EDE               	movwf	postinc2,c
 16135  00434A  0EFF               	movlw	255
 16136  00434C  6EDD               	movwf	postdec2,c
 16137                           
 16138                           ; BSR set to: 0
 16139                           ;ff.c: 3018: if (move_window(fs, sect) != FR_OK) return 4;
 16140  00434E  C090  F085         	movff	check_fs@fs,move_window@fs
 16141  004352  C091  F086         	movff	check_fs@fs+1,move_window@fs+1
 16142  004356  C092  F087         	movff	check_fs@sect,move_window@sector
 16143  00435A  C093  F088         	movff	check_fs@sect+1,move_window@sector+1
 16144  00435E  C094  F089         	movff	check_fs@sect+2,move_window@sector+2
 16145  004362  C095  F08A         	movff	check_fs@sect+3,move_window@sector+3
 16146  004366  EC2E  F026         	call	_move_window	;wreg free
 16147  00436A  0900               	iorlw	0
 16148  00436C  B4D8               	btfsc	status,2,c
 16149  00436E  D002               	goto	l1371
 16150  004370  0E04               	movlw	4
 16151  004372  0012               	return	
 16152  004374                     l1371:
 16153                           
 16154                           ;ff.c: 3020: if (ld_word(fs->win + 510) != 0xAA55) return 3;
 16155  004374  0E2D               	movlw	45
 16156  004376  0100               	movlb	0	; () banked
 16157  004378  2590               	addwf	check_fs@fs& (0+255),w,b
 16158  00437A  6E1A               	movwf	ld_word@ptr,c
 16159  00437C  0E02               	movlw	2
 16160  00437E  2191               	addwfc	(check_fs@fs+1)& (0+255),w,b
 16161  004380  6E1B               	movwf	ld_word@ptr+1,c
 16162  004382  ECAE  F02C         	call	_ld_word	;wreg free
 16163  004386  0E55               	movlw	85
 16164  004388  181A               	xorwf	?_ld_word,w,c
 16165  00438A  E104               	bnz	u17610
 16166  00438C  0EAA               	movlw	170
 16167  00438E  181B               	xorwf	?_ld_word+1,w,c
 16168  004390  B4D8               	btfsc	status,2,c
 16169  004392  D002               	goto	l1373
 16170  004394                     u17610:
 16171  004394  0E03               	movlw	3
 16172  004396  0012               	return	
 16173  004398                     l1373:
 16174                           
 16175                           ;ff.c: 3025: if (fs->win[0] == 0xE9 || (fs->win[0] == 0xEB && fs->win[0 + 2] == 0x90)) {
 16176  004398  0100               	movlb	0	; () banked
 16177  00439A  EE20 F02F          	lfsr	2,47
 16178  00439E  5190               	movf	check_fs@fs& (0+255),w,b
 16179  0043A0  26D9               	addwf	fsr2l,f,c
 16180  0043A2  5191               	movf	(check_fs@fs+1)& (0+255),w,b
 16181  0043A4  22DA               	addwfc	fsr2h,f,c
 16182  0043A6  0EE9               	movlw	233
 16183  0043A8  18DE               	xorwf	postinc2,w,c
 16184  0043AA  B4D8               	btfsc	status,2,c
 16185  0043AC  D014               	goto	u17640
 16186                           
 16187                           ; BSR set to: 0
 16188  0043AE  EE20 F02F          	lfsr	2,47
 16189  0043B2  5190               	movf	check_fs@fs& (0+255),w,b
 16190  0043B4  26D9               	addwf	fsr2l,f,c
 16191  0043B6  5191               	movf	(check_fs@fs+1)& (0+255),w,b
 16192  0043B8  22DA               	addwfc	fsr2h,f,c
 16193  0043BA  0EEB               	movlw	235
 16194  0043BC  18DE               	xorwf	postinc2,w,c
 16195  0043BE  A4D8               	btfss	status,2,c
 16196  0043C0  D037               	goto	l1378
 16197                           
 16198                           ; BSR set to: 0
 16199  0043C2  EE20 F031          	lfsr	2,49
 16200  0043C6  5190               	movf	check_fs@fs& (0+255),w,b
 16201  0043C8  26D9               	addwf	fsr2l,f,c
 16202  0043CA  5191               	movf	(check_fs@fs+1)& (0+255),w,b
 16203  0043CC  22DA               	addwfc	fsr2h,f,c
 16204  0043CE  0E90               	movlw	144
 16205  0043D0  18DE               	xorwf	postinc2,w,c
 16206  0043D2  A4D8               	btfss	status,2,c
 16207  0043D4  D02D               	goto	l1378
 16208  0043D6                     u17640:
 16209                           
 16210                           ; BSR set to: 0
 16211                           ;ff.c: 3026: if (!mem_cmp(fs->win + 54, "FAT", 3)) return 0;
 16212                           
 16213                           ; BSR set to: 0
 16214  0043D6  0E65               	movlw	101
 16215  0043D8  2590               	addwf	check_fs@fs& (0+255),w,b
 16216  0043DA  6E1A               	movwf	mem_cmp@dst,c
 16217  0043DC  0E00               	movlw	0
 16218  0043DE  2191               	addwfc	(check_fs@fs+1)& (0+255),w,b
 16219  0043E0  6E1B               	movwf	mem_cmp@dst+1,c
 16220  0043E2  0E6C               	movlw	low STR_35
 16221  0043E4  6E1C               	movwf	mem_cmp@src,c
 16222  0043E6  0E62               	movlw	high STR_35
 16223  0043E8  6E1D               	movwf	mem_cmp@src+1,c
 16224  0043EA  0E00               	movlw	0
 16225  0043EC  6E1F               	movwf	mem_cmp@cnt+1,c
 16226  0043EE  0E03               	movlw	3
 16227  0043F0  6E1E               	movwf	mem_cmp@cnt,c
 16228  0043F2  EC09  F028         	call	_mem_cmp	;wreg free
 16229  0043F6  501A               	movf	?_mem_cmp,w,c
 16230  0043F8  101B               	iorwf	?_mem_cmp+1,w,c
 16231  0043FA  A4D8               	btfss	status,2,c
 16232  0043FC  D002               	goto	l1377
 16233  0043FE  0E00               	movlw	0
 16234  004400  0012               	return	
 16235  004402                     l1377:
 16236                           
 16237                           ;ff.c: 3027: if (!mem_cmp(fs->win + 82, "FAT32", 5)) return 0;
 16238  004402  0E81               	movlw	129
 16239  004404  0100               	movlb	0	; () banked
 16240  004406  2590               	addwf	check_fs@fs& (0+255),w,b
 16241  004408  6E1A               	movwf	mem_cmp@dst,c
 16242  00440A  0E00               	movlw	0
 16243  00440C  2191               	addwfc	(check_fs@fs+1)& (0+255),w,b
 16244  00440E  6E1B               	movwf	mem_cmp@dst+1,c
 16245  004410  0E28               	movlw	low STR_36
 16246  004412  6E1C               	movwf	mem_cmp@src,c
 16247  004414  0E62               	movlw	high STR_36
 16248  004416  6E1D               	movwf	mem_cmp@src+1,c
 16249  004418  0E00               	movlw	0
 16250  00441A  6E1F               	movwf	mem_cmp@cnt+1,c
 16251  00441C  0E05               	movlw	5
 16252  00441E  6E1E               	movwf	mem_cmp@cnt,c
 16253  004420  EC09  F028         	call	_mem_cmp	;wreg free
 16254  004424  501A               	movf	?_mem_cmp,w,c
 16255  004426  101B               	iorwf	?_mem_cmp+1,w,c
 16256  004428  A4D8               	btfss	status,2,c
 16257  00442A  D002               	goto	l1378
 16258  00442C  0E00               	movlw	0
 16259  00442E  0012               	return	
 16260  004430                     l1378:
 16261                           
 16262                           ;ff.c: 3028: }
 16263                           ;ff.c: 3030: return 2;
 16264  004430  0E02               	movlw	2
 16265  004432  0012               	return	
 16266  004434                     __end_of_check_fs:
 16267                           	opt stack 0
 16268                           tosu	equ	0xFFF
 16269                           tosh	equ	0xFFE
 16270                           tosl	equ	0xFFD
 16271                           pclath	equ	0xFFA
 16272                           tblptru	equ	0xFF8
 16273                           tblptrh	equ	0xFF7
 16274                           tblptrl	equ	0xFF6
 16275                           tablat	equ	0xFF5
 16276                           prodh	equ	0xFF4
 16277                           prodl	equ	0xFF3
 16278                           intcon	equ	0xFF2
 16279                           intcon2	equ	0xFF1
 16280                           intcon3	equ	0xFF0
 16281                           indf0	equ	0xFEF
 16282                           postinc0	equ	0xFEE
 16283                           fsr0h	equ	0xFEA
 16284                           fsr0l	equ	0xFE9
 16285                           wreg	equ	0xFE8
 16286                           indf1	equ	0xFE7
 16287                           postinc1	equ	0xFE6
 16288                           postdec1	equ	0xFE5
 16289                           fsr1h	equ	0xFE2
 16290                           fsr1l	equ	0xFE1
 16291                           indf2	equ	0xFDF
 16292                           postinc2	equ	0xFDE
 16293                           postdec2	equ	0xFDD
 16294                           plusw2	equ	0xFDB
 16295                           fsr2h	equ	0xFDA
 16296                           fsr2l	equ	0xFD9
 16297                           status	equ	0xFD8
 16298                           
 16299 ;; *************** function _mem_cmp *****************
 16300 ;; Defined at:
 16301 ;;		line 655 in file "bibliotecas/ff.c"
 16302 ;; Parameters:    Size  Location     Type
 16303 ;;  dst             2   25[COMRAM] PTR const void 
 16304 ;;		 -> fs.win(512), NULL(0), fs(559), 
 16305 ;;  src             2   27[COMRAM] PTR const void 
 16306 ;;		 -> djn.fn(12), f_rename@djn(40), djo.fn(12), f_rename@djo(40), 
 16307 ;;		 -> dj.fn(12), f_mkdir@dj(40), dj.fn(12), f_unlink@dj(40), 
 16308 ;;		 -> dj.fn(12), f_stat@dj(40), dj.fn(12), f_open@dj(40), 
 16309 ;;		 -> STR_36(6), STR_35(4), 
 16310 ;;  cnt             2   29[COMRAM] unsigned int 
 16311 ;; Auto vars:     Size  Location     Type
 16312 ;;  r               2   38[COMRAM] int 
 16313 ;;  s               2   36[COMRAM] PTR const unsigned char 
 16314 ;;		 -> djn.fn(12), f_rename@djn(40), djo.fn(12), f_rename@djo(40), 
 16315 ;;		 -> dj.fn(12), f_mkdir@dj(40), dj.fn(12), f_unlink@dj(40), 
 16316 ;;		 -> dj.fn(12), f_stat@dj(40), dj.fn(12), f_open@dj(40), 
 16317 ;;		 -> STR_36(6), STR_35(4), 
 16318 ;;  d               2   34[COMRAM] PTR const unsigned char 
 16319 ;;		 -> fs.win(512), NULL(0), fs(559), 
 16320 ;; Return value:  Size  Location     Type
 16321 ;;                  2   25[COMRAM] int 
 16322 ;; Registers used:
 16323 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16324 ;; Tracked objects:
 16325 ;;		On entry : 0/0
 16326 ;;		On exit  : 0/0
 16327 ;;		Unchanged: 0/0
 16328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16329 ;;      Params:         6       0       0       0       0       0       0       0       0
 16330 ;;      Locals:         6       0       0       0       0       0       0       0       0
 16331 ;;      Temps:          3       0       0       0       0       0       0       0       0
 16332 ;;      Totals:        15       0       0       0       0       0       0       0       0
 16333 ;;Total ram usage:       15 bytes
 16334 ;; Hardware stack levels used:    1
 16335 ;; Hardware stack levels required when called:    2
 16336 ;; This function calls:
 16337 ;;		Nothing
 16338 ;; This function is called by:
 16339 ;;		_dir_find
 16340 ;;		_check_fs
 16341 ;; This function uses a non-reentrant model
 16342 ;;
 16343                           
 16344                           	psect	text42
 16345  005012                     __ptext42:
 16346                           	opt stack 0
 16347  005012                     _mem_cmp:
 16348                           	opt stack 23
 16349                           
 16350                           ;ff.c: 657: const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 16351                           
 16352                           ;incstack = 0
 16353  005012  C01A  F023         	movff	mem_cmp@dst,mem_cmp@d
 16354  005016  C01B  F024         	movff	mem_cmp@dst+1,mem_cmp@d+1
 16355  00501A  C01C  F025         	movff	mem_cmp@src,mem_cmp@s
 16356  00501E  C01D  F026         	movff	mem_cmp@src+1,mem_cmp@s+1
 16357                           
 16358                           ;ff.c: 658: int r = 0;
 16359  005022  0E00               	movlw	0
 16360  005024  6E28               	movwf	mem_cmp@r+1,c
 16361  005026  0E00               	movlw	0
 16362  005028  6E27               	movwf	mem_cmp@r,c
 16363  00502A                     
 16364                           ;ff.c: 661: r = *d++ - *s++;
 16365  00502A  C025  FFF6         	movff	mem_cmp@s,tblptrl
 16366  00502E  C026  FFF7         	movff	mem_cmp@s+1,tblptrh
 16367  005032  6AF8               	clrf	tblptru,c
 16368  005034  0E07               	movlw	(high __ramtop+-1)
 16369  005036  64F7               	cpfsgt	tblptrh,c
 16370  005038  D003               	bra	u16577
 16371  00503A  0008               	tblrd		*
 16372  00503C  50F5               	movf	tablat,w,c
 16373  00503E  D005               	bra	u16570
 16374  005040                     u16577:
 16375  005040  CFF6 FFE9          	movff	tblptrl,fsr0l
 16376  005044  CFF7 FFEA          	movff	tblptrh,fsr0h
 16377  005048  50EF               	movf	indf0,w,c
 16378  00504A                     u16570:
 16379  00504A  6E20               	movwf	??_mem_cmp& (0+255),c
 16380  00504C  6A21               	clrf	(??_mem_cmp+1)& (0+255),c
 16381  00504E  1E20               	comf	??_mem_cmp,f,c
 16382  005050  1E21               	comf	??_mem_cmp+1,f,c
 16383  005052  4A20               	infsnz	??_mem_cmp,f,c
 16384  005054  2A21               	incf	??_mem_cmp+1,f,c
 16385  005056  C023  FFD9         	movff	mem_cmp@d,fsr2l
 16386  00505A  C024  FFDA         	movff	mem_cmp@d+1,fsr2h
 16387  00505E  50DF               	movf	indf2,w,c
 16388  005060  6E22               	movwf	(??_mem_cmp+2)& (0+255),c
 16389  005062  5022               	movf	??_mem_cmp+2,w,c
 16390  005064  2420               	addwf	??_mem_cmp,w,c
 16391  005066  6E27               	movwf	mem_cmp@r,c
 16392  005068  0E00               	movlw	0
 16393  00506A  2021               	addwfc	??_mem_cmp+1,w,c
 16394  00506C  6E28               	movwf	mem_cmp@r+1,c
 16395  00506E  4A25               	infsnz	mem_cmp@s,f,c
 16396  005070  2A26               	incf	mem_cmp@s+1,f,c
 16397  005072  4A23               	infsnz	mem_cmp@d,f,c
 16398  005074  2A24               	incf	mem_cmp@d+1,f,c
 16399                           
 16400                           ;ff.c: 662: } while (--cnt && r == 0);
 16401  005076  061E               	decf	mem_cmp@cnt,f,c
 16402  005078  A0D8               	btfss	status,0,c
 16403  00507A  061F               	decf	mem_cmp@cnt+1,f,c
 16404  00507C  501E               	movf	mem_cmp@cnt,w,c
 16405  00507E  101F               	iorwf	mem_cmp@cnt+1,w,c
 16406  005080  B4D8               	btfsc	status,2,c
 16407  005082  D004               	goto	u16590
 16408  005084  5027               	movf	mem_cmp@r,w,c
 16409  005086  1028               	iorwf	mem_cmp@r+1,w,c
 16410  005088  B4D8               	btfsc	status,2,c
 16411  00508A  D7CF               	goto	l1013
 16412  00508C                     u16590:
 16413                           
 16414                           ;ff.c: 664: return r;
 16415  00508C  C027  F01A         	movff	mem_cmp@r,?_mem_cmp
 16416  005090  C028  F01B         	movff	mem_cmp@r+1,?_mem_cmp+1
 16417  005094  0012               	return		;funcret
 16418  005096                     __end_of_mem_cmp:
 16419                           	opt stack 0
 16420                           tosu	equ	0xFFF
 16421                           tosh	equ	0xFFE
 16422                           tosl	equ	0xFFD
 16423                           pclath	equ	0xFFA
 16424                           tblptru	equ	0xFF8
 16425                           tblptrh	equ	0xFF7
 16426                           tblptrl	equ	0xFF6
 16427                           tablat	equ	0xFF5
 16428                           prodh	equ	0xFF4
 16429                           prodl	equ	0xFF3
 16430                           intcon	equ	0xFF2
 16431                           intcon2	equ	0xFF1
 16432                           intcon3	equ	0xFF0
 16433                           indf0	equ	0xFEF
 16434                           postinc0	equ	0xFEE
 16435                           fsr0h	equ	0xFEA
 16436                           fsr0l	equ	0xFE9
 16437                           wreg	equ	0xFE8
 16438                           indf1	equ	0xFE7
 16439                           postinc1	equ	0xFE6
 16440                           postdec1	equ	0xFE5
 16441                           fsr1h	equ	0xFE2
 16442                           fsr1l	equ	0xFE1
 16443                           indf2	equ	0xFDF
 16444                           postinc2	equ	0xFDE
 16445                           postdec2	equ	0xFDD
 16446                           plusw2	equ	0xFDB
 16447                           fsr2h	equ	0xFDA
 16448                           fsr2l	equ	0xFD9
 16449                           status	equ	0xFD8
 16450                           
 16451 ;; *************** function _ld_word *****************
 16452 ;; Defined at:
 16453 ;;		line 548 in file "bibliotecas/ff.c"
 16454 ;; Parameters:    Size  Location     Type
 16455 ;;  ptr             2   25[COMRAM] PTR const unsigned char 
 16456 ;;		 -> fs.win(512), NULL(0), fs(559), 
 16457 ;; Auto vars:     Size  Location     Type
 16458 ;;  rv              2   30[COMRAM] unsigned short 
 16459 ;; Return value:  Size  Location     Type
 16460 ;;                  2   25[COMRAM] unsigned short 
 16461 ;; Registers used:
 16462 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16463 ;; Tracked objects:
 16464 ;;		On entry : 0/0
 16465 ;;		On exit  : 0/0
 16466 ;;		Unchanged: 0/0
 16467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16468 ;;      Params:         2       0       0       0       0       0       0       0       0
 16469 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16470 ;;      Temps:          3       0       0       0       0       0       0       0       0
 16471 ;;      Totals:         7       0       0       0       0       0       0       0       0
 16472 ;;Total ram usage:        7 bytes
 16473 ;; Hardware stack levels used:    1
 16474 ;; Hardware stack levels required when called:    2
 16475 ;; This function calls:
 16476 ;;		Nothing
 16477 ;; This function is called by:
 16478 ;;		_get_fat
 16479 ;;		_ld_clust
 16480 ;;		_check_fs
 16481 ;;		_find_volume
 16482 ;;		_f_getfree
 16483 ;; This function uses a non-reentrant model
 16484 ;;
 16485                           
 16486                           	psect	text43
 16487  00595C                     __ptext43:
 16488                           	opt stack 0
 16489  00595C                     _ld_word:
 16490                           	opt stack 23
 16491                           
 16492                           ;ff.c: 550: WORD rv;
 16493                           ;ff.c: 552: rv = ptr[1];
 16494                           
 16495                           ;incstack = 0
 16496  00595C  EE20 F001          	lfsr	2,1
 16497  005960  501A               	movf	ld_word@ptr,w,c
 16498  005962  26D9               	addwf	fsr2l,f,c
 16499  005964  501B               	movf	ld_word@ptr+1,w,c
 16500  005966  22DA               	addwfc	fsr2h,f,c
 16501  005968  50DF               	movf	indf2,w,c
 16502  00596A  6E1C               	movwf	??_ld_word& (0+255),c
 16503  00596C  501C               	movf	??_ld_word,w,c
 16504  00596E  6E1F               	movwf	ld_word@rv,c
 16505  005970  6A20               	clrf	ld_word@rv+1,c
 16506                           
 16507                           ;ff.c: 553: rv = rv << 8 | ptr[0];
 16508  005972  C01A  FFD9         	movff	ld_word@ptr,fsr2l
 16509  005976  C01B  FFDA         	movff	ld_word@ptr+1,fsr2h
 16510  00597A  50DF               	movf	indf2,w,c
 16511  00597C  6E1C               	movwf	??_ld_word& (0+255),c
 16512  00597E  501F               	movf	ld_word@rv,w,c
 16513  005980  6E1D               	movwf	(??_ld_word+1)& (0+255),c
 16514  005982  501C               	movf	??_ld_word,w,c
 16515  005984  6E1F               	movwf	ld_word@rv,c
 16516  005986  C01D  F020         	movff	??_ld_word+1,ld_word@rv+1
 16517                           
 16518                           ;ff.c: 554: return rv;
 16519  00598A  C01F  F01A         	movff	ld_word@rv,?_ld_word
 16520  00598E  C020  F01B         	movff	ld_word@rv+1,?_ld_word+1
 16521  005992  0012               	return	
 16522  005994                     __end_of_ld_word:
 16523                           	opt stack 0
 16524                           tosu	equ	0xFFF
 16525                           tosh	equ	0xFFE
 16526                           tosl	equ	0xFFD
 16527                           pclath	equ	0xFFA
 16528                           tblptru	equ	0xFF8
 16529                           tblptrh	equ	0xFF7
 16530                           tblptrl	equ	0xFF6
 16531                           tablat	equ	0xFF5
 16532                           prodh	equ	0xFF4
 16533                           prodl	equ	0xFF3
 16534                           intcon	equ	0xFF2
 16535                           intcon2	equ	0xFF1
 16536                           intcon3	equ	0xFF0
 16537                           indf0	equ	0xFEF
 16538                           postinc0	equ	0xFEE
 16539                           fsr0h	equ	0xFEA
 16540                           fsr0l	equ	0xFE9
 16541                           wreg	equ	0xFE8
 16542                           indf1	equ	0xFE7
 16543                           postinc1	equ	0xFE6
 16544                           postdec1	equ	0xFE5
 16545                           fsr1h	equ	0xFE2
 16546                           fsr1l	equ	0xFE1
 16547                           indf2	equ	0xFDF
 16548                           postinc2	equ	0xFDE
 16549                           postdec2	equ	0xFDD
 16550                           plusw2	equ	0xFDB
 16551                           fsr2h	equ	0xFDA
 16552                           fsr2l	equ	0xFD9
 16553                           status	equ	0xFD8
 16554                           
 16555 ;; *************** function ___lmul *****************
 16556 ;; Defined at:
 16557 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 16558 ;; Parameters:    Size  Location     Type
 16559 ;;  multiplier      4   25[COMRAM] unsigned long 
 16560 ;;  multiplicand    4   29[COMRAM] unsigned long 
 16561 ;; Auto vars:     Size  Location     Type
 16562 ;;  product         4   33[COMRAM] unsigned long 
 16563 ;; Return value:  Size  Location     Type
 16564 ;;                  4   25[COMRAM] unsigned long 
 16565 ;; Registers used:
 16566 ;;		wreg, status,2, status,0
 16567 ;; Tracked objects:
 16568 ;;		On entry : 0/0
 16569 ;;		On exit  : 0/0
 16570 ;;		Unchanged: 0/0
 16571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16572 ;;      Params:         8       0       0       0       0       0       0       0       0
 16573 ;;      Locals:         4       0       0       0       0       0       0       0       0
 16574 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16575 ;;      Totals:        12       0       0       0       0       0       0       0       0
 16576 ;;Total ram usage:       12 bytes
 16577 ;; Hardware stack levels used:    1
 16578 ;; Hardware stack levels required when called:    2
 16579 ;; This function calls:
 16580 ;;		Nothing
 16581 ;; This function is called by:
 16582 ;;		_clst2sect
 16583 ;;		_find_volume
 16584 ;;		_strtod
 16585 ;;		_atol
 16586 ;; This function uses a non-reentrant model
 16587 ;;
 16588                           
 16589                           	psect	text44
 16590  00557E                     __ptext44:
 16591                           	opt stack 0
 16592  00557E                     ___lmul:
 16593                           	opt stack 24
 16594                           
 16595                           ;incstack = 0
 16596  00557E  0E00               	movlw	0
 16597  005580  6E22               	movwf	___lmul@product,c
 16598  005582  0E00               	movlw	0
 16599  005584  6E23               	movwf	___lmul@product+1,c
 16600  005586  0E00               	movlw	0
 16601  005588  6E24               	movwf	___lmul@product+2,c
 16602  00558A  0E00               	movlw	0
 16603  00558C  6E25               	movwf	___lmul@product+3,c
 16604  00558E  A01A               	btfss	___lmul@multiplier,0,c
 16605  005590  D008               	goto	l1839
 16606  005592  501E               	movf	___lmul@multiplicand,w,c
 16607  005594  2622               	addwf	___lmul@product,f,c
 16608  005596  501F               	movf	___lmul@multiplicand+1,w,c
 16609  005598  2223               	addwfc	___lmul@product+1,f,c
 16610  00559A  5020               	movf	___lmul@multiplicand+2,w,c
 16611  00559C  2224               	addwfc	___lmul@product+2,f,c
 16612  00559E  5021               	movf	___lmul@multiplicand+3,w,c
 16613  0055A0  2225               	addwfc	___lmul@product+3,f,c
 16614  0055A2                     l1839:
 16615  0055A2  90D8               	bcf	status,0,c
 16616  0055A4  361E               	rlcf	___lmul@multiplicand,f,c
 16617  0055A6  361F               	rlcf	___lmul@multiplicand+1,f,c
 16618  0055A8  3620               	rlcf	___lmul@multiplicand+2,f,c
 16619  0055AA  3621               	rlcf	___lmul@multiplicand+3,f,c
 16620  0055AC  90D8               	bcf	status,0,c
 16621  0055AE  321D               	rrcf	___lmul@multiplier+3,f,c
 16622  0055B0  321C               	rrcf	___lmul@multiplier+2,f,c
 16623  0055B2  321B               	rrcf	___lmul@multiplier+1,f,c
 16624  0055B4  321A               	rrcf	___lmul@multiplier,f,c
 16625  0055B6  501A               	movf	___lmul@multiplier,w,c
 16626  0055B8  101B               	iorwf	___lmul@multiplier+1,w,c
 16627  0055BA  101C               	iorwf	___lmul@multiplier+2,w,c
 16628  0055BC  101D               	iorwf	___lmul@multiplier+3,w,c
 16629  0055BE  A4D8               	btfss	status,2,c
 16630  0055C0  D7E6               	goto	l1838
 16631  0055C2  C022  F01A         	movff	___lmul@product,?___lmul
 16632  0055C6  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 16633  0055CA  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 16634  0055CE  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 16635  0055D2  0012               	return		;funcret
 16636  0055D4                     __end_of___lmul:
 16637                           	opt stack 0
 16638                           tosu	equ	0xFFF
 16639                           tosh	equ	0xFFE
 16640                           tosl	equ	0xFFD
 16641                           pclath	equ	0xFFA
 16642                           tblptru	equ	0xFF8
 16643                           tblptrh	equ	0xFF7
 16644                           tblptrl	equ	0xFF6
 16645                           tablat	equ	0xFF5
 16646                           prodh	equ	0xFF4
 16647                           prodl	equ	0xFF3
 16648                           intcon	equ	0xFF2
 16649                           intcon2	equ	0xFF1
 16650                           intcon3	equ	0xFF0
 16651                           indf0	equ	0xFEF
 16652                           postinc0	equ	0xFEE
 16653                           fsr0h	equ	0xFEA
 16654                           fsr0l	equ	0xFE9
 16655                           wreg	equ	0xFE8
 16656                           indf1	equ	0xFE7
 16657                           postinc1	equ	0xFE6
 16658                           postdec1	equ	0xFE5
 16659                           fsr1h	equ	0xFE2
 16660                           fsr1l	equ	0xFE1
 16661                           indf2	equ	0xFDF
 16662                           postinc2	equ	0xFDE
 16663                           postdec2	equ	0xFDD
 16664                           plusw2	equ	0xFDB
 16665                           fsr2h	equ	0xFDA
 16666                           fsr2l	equ	0xFD9
 16667                           status	equ	0xFD8
 16668                           
 16669 ;; *************** function ___lldiv *****************
 16670 ;; Defined at:
 16671 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 16672 ;; Parameters:    Size  Location     Type
 16673 ;;  dividend        4   25[COMRAM] unsigned long 
 16674 ;;  divisor         4   29[COMRAM] unsigned long 
 16675 ;; Auto vars:     Size  Location     Type
 16676 ;;  quotient        4   33[COMRAM] unsigned long 
 16677 ;;  counter         1   37[COMRAM] unsigned char 
 16678 ;; Return value:  Size  Location     Type
 16679 ;;                  4   25[COMRAM] unsigned long 
 16680 ;; Registers used:
 16681 ;;		wreg, status,2, status,0
 16682 ;; Tracked objects:
 16683 ;;		On entry : 0/0
 16684 ;;		On exit  : 0/0
 16685 ;;		Unchanged: 0/0
 16686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16687 ;;      Params:         8       0       0       0       0       0       0       0       0
 16688 ;;      Locals:         5       0       0       0       0       0       0       0       0
 16689 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16690 ;;      Totals:        13       0       0       0       0       0       0       0       0
 16691 ;;Total ram usage:       13 bytes
 16692 ;; Hardware stack levels used:    1
 16693 ;; Hardware stack levels required when called:    2
 16694 ;; This function calls:
 16695 ;;		Nothing
 16696 ;; This function is called by:
 16697 ;;		_find_volume
 16698 ;;		_convert_time_to_utc
 16699 ;;		_f_lseek
 16700 ;;		_sprintf
 16701 ;; This function uses a non-reentrant model
 16702 ;;
 16703                           
 16704                           	psect	text45
 16705  00511A                     __ptext45:
 16706                           	opt stack 0
 16707  00511A                     ___lldiv:
 16708                           	opt stack 24
 16709                           
 16710                           ;incstack = 0
 16711  00511A  0E00               	movlw	0
 16712  00511C  6E22               	movwf	___lldiv@quotient,c
 16713  00511E  0E00               	movlw	0
 16714  005120  6E23               	movwf	___lldiv@quotient+1,c
 16715  005122  0E00               	movlw	0
 16716  005124  6E24               	movwf	___lldiv@quotient+2,c
 16717  005126  0E00               	movlw	0
 16718  005128  6E25               	movwf	___lldiv@quotient+3,c
 16719  00512A  501E               	movf	___lldiv@divisor,w,c
 16720  00512C  101F               	iorwf	___lldiv@divisor+1,w,c
 16721  00512E  1020               	iorwf	___lldiv@divisor+2,w,c
 16722  005130  1021               	iorwf	___lldiv@divisor+3,w,c
 16723  005132  B4D8               	btfsc	status,2,c
 16724  005134  D02A               	goto	l2319
 16725  005136  0E01               	movlw	1
 16726  005138  6E26               	movwf	___lldiv@counter,c
 16727  00513A  D006               	goto	l2314
 16728  00513C  90D8               	bcf	status,0,c
 16729  00513E  361E               	rlcf	___lldiv@divisor,f,c
 16730  005140  361F               	rlcf	___lldiv@divisor+1,f,c
 16731  005142  3620               	rlcf	___lldiv@divisor+2,f,c
 16732  005144  3621               	rlcf	___lldiv@divisor+3,f,c
 16733  005146  2A26               	incf	___lldiv@counter,f,c
 16734  005148                     l2314:
 16735  005148  AE21               	btfss	___lldiv@divisor+3,7,c
 16736  00514A  D7F8               	goto	l2315
 16737  00514C                     u17780:
 16738  00514C  90D8               	bcf	status,0,c
 16739  00514E  3622               	rlcf	___lldiv@quotient,f,c
 16740  005150  3623               	rlcf	___lldiv@quotient+1,f,c
 16741  005152  3624               	rlcf	___lldiv@quotient+2,f,c
 16742  005154  3625               	rlcf	___lldiv@quotient+3,f,c
 16743  005156  501E               	movf	___lldiv@divisor,w,c
 16744  005158  5C1A               	subwf	___lldiv@dividend,w,c
 16745  00515A  501F               	movf	___lldiv@divisor+1,w,c
 16746  00515C  581B               	subwfb	___lldiv@dividend+1,w,c
 16747  00515E  5020               	movf	___lldiv@divisor+2,w,c
 16748  005160  581C               	subwfb	___lldiv@dividend+2,w,c
 16749  005162  5021               	movf	___lldiv@divisor+3,w,c
 16750  005164  581D               	subwfb	___lldiv@dividend+3,w,c
 16751  005166  A0D8               	btfss	status,0,c
 16752  005168  D009               	goto	l2318
 16753  00516A  501E               	movf	___lldiv@divisor,w,c
 16754  00516C  5E1A               	subwf	___lldiv@dividend,f,c
 16755  00516E  501F               	movf	___lldiv@divisor+1,w,c
 16756  005170  5A1B               	subwfb	___lldiv@dividend+1,f,c
 16757  005172  5020               	movf	___lldiv@divisor+2,w,c
 16758  005174  5A1C               	subwfb	___lldiv@dividend+2,f,c
 16759  005176  5021               	movf	___lldiv@divisor+3,w,c
 16760  005178  5A1D               	subwfb	___lldiv@dividend+3,f,c
 16761  00517A  8022               	bsf	___lldiv@quotient,0,c
 16762  00517C                     l2318:
 16763  00517C  90D8               	bcf	status,0,c
 16764  00517E  3221               	rrcf	___lldiv@divisor+3,f,c
 16765  005180  3220               	rrcf	___lldiv@divisor+2,f,c
 16766  005182  321F               	rrcf	___lldiv@divisor+1,f,c
 16767  005184  321E               	rrcf	___lldiv@divisor,f,c
 16768  005186  2E26               	decfsz	___lldiv@counter,f,c
 16769  005188  D7E1               	goto	u17780
 16770  00518A                     l2319:
 16771  00518A  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 16772  00518E  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 16773  005192  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 16774  005196  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 16775  00519A  0012               	return		;funcret
 16776  00519C                     __end_of___lldiv:
 16777                           	opt stack 0
 16778                           tosu	equ	0xFFF
 16779                           tosh	equ	0xFFE
 16780                           tosl	equ	0xFFD
 16781                           pclath	equ	0xFFA
 16782                           tblptru	equ	0xFF8
 16783                           tblptrh	equ	0xFF7
 16784                           tblptrl	equ	0xFF6
 16785                           tablat	equ	0xFF5
 16786                           prodh	equ	0xFF4
 16787                           prodl	equ	0xFF3
 16788                           intcon	equ	0xFF2
 16789                           intcon2	equ	0xFF1
 16790                           intcon3	equ	0xFF0
 16791                           indf0	equ	0xFEF
 16792                           postinc0	equ	0xFEE
 16793                           fsr0h	equ	0xFEA
 16794                           fsr0l	equ	0xFE9
 16795                           wreg	equ	0xFE8
 16796                           indf1	equ	0xFE7
 16797                           postinc1	equ	0xFE6
 16798                           postdec1	equ	0xFE5
 16799                           fsr1h	equ	0xFE2
 16800                           fsr1l	equ	0xFE1
 16801                           indf2	equ	0xFDF
 16802                           postinc2	equ	0xFDE
 16803                           postdec2	equ	0xFDD
 16804                           plusw2	equ	0xFDB
 16805                           fsr2h	equ	0xFDA
 16806                           fsr2l	equ	0xFD9
 16807                           status	equ	0xFD8
 16808                           
 16809 ;; *************** function _f_close *****************
 16810 ;; Defined at:
 16811 ;;		line 3873 in file "bibliotecas/ff.c"
 16812 ;; Parameters:    Size  Location     Type
 16813 ;;  fp              2   66[BANK0 ] PTR struct .
 16814 ;;		 -> SDCard@fil(34), 
 16815 ;; Auto vars:     Size  Location     Type
 16816 ;;  fs              2   68[BANK0 ] PTR struct .
 16817 ;;		 -> NULL(0), fs(559), 
 16818 ;;  res             1   70[BANK0 ] enum E79
 16819 ;; Return value:  Size  Location     Type
 16820 ;;                  1    wreg      enum E3962
 16821 ;; Registers used:
 16822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16823 ;; Tracked objects:
 16824 ;;		On entry : 0/0
 16825 ;;		On exit  : 0/0
 16826 ;;		Unchanged: 0/0
 16827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16828 ;;      Params:         0       2       0       0       0       0       0       0       0
 16829 ;;      Locals:         0       3       0       0       0       0       0       0       0
 16830 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16831 ;;      Totals:         0       5       0       0       0       0       0       0       0
 16832 ;;Total ram usage:        5 bytes
 16833 ;; Hardware stack levels used:    1
 16834 ;; Hardware stack levels required when called:   10
 16835 ;; This function calls:
 16836 ;;		_f_sync
 16837 ;;		_validate
 16838 ;; This function is called by:
 16839 ;;		_SDCard
 16840 ;; This function uses a non-reentrant model
 16841 ;;
 16842                           
 16843                           	psect	text46
 16844  005712                     __ptext46:
 16845                           	opt stack 0
 16846  005712                     _f_close:
 16847                           	opt stack 18
 16848                           
 16849                           ;ff.c: 3877: FRESULT res;
 16850                           ;ff.c: 3878: FATFS *fs;
 16851                           ;ff.c: 3882: res = f_sync(fp);
 16852                           
 16853                           ;incstack = 0
 16854  005712  C0A2  F097         	movff	f_close@fp,f_sync@fp
 16855  005716  C0A3  F098         	movff	f_close@fp+1,f_sync@fp+1
 16856  00571A  EC66  F01E         	call	_f_sync	;wreg free
 16857  00571E  0100               	movlb	0	; () banked
 16858  005720  6FA6               	movwf	f_close@res& (0+255),b
 16859                           
 16860                           ; BSR set to: 0
 16861                           ;ff.c: 3883: if (res == FR_OK)
 16862  005722  51A6               	movf	f_close@res& (0+255),w,b
 16863  005724  A4D8               	btfss	status,2,c
 16864  005726  0012               	return	
 16865                           
 16866                           ; BSR set to: 0
 16867                           ;ff.c: 3885: {
 16868                           ;ff.c: 3886: res = validate(&fp->obj, &fs);
 16869  005728  C0A2  F021         	movff	f_close@fp,validate@obj
 16870  00572C  C0A3  F022         	movff	f_close@fp+1,validate@obj+1
 16871  005730  0EA4               	movlw	low f_close@fs
 16872  005732  6E23               	movwf	validate@rfs,c
 16873  005734  0E00               	movlw	high f_close@fs
 16874  005736  6E24               	movwf	validate@rfs+1,c
 16875  005738  ECBD  F024         	call	_validate	;wreg free
 16876  00573C  0100               	movlb	0	; () banked
 16877  00573E  6FA6               	movwf	f_close@res& (0+255),b
 16878                           
 16879                           ; BSR set to: 0
 16880                           ;ff.c: 3887: if (res == FR_OK) {
 16881  005740  51A6               	movf	f_close@res& (0+255),w,b
 16882  005742  A4D8               	btfss	status,2,c
 16883  005744  0012               	return	
 16884                           
 16885                           ; BSR set to: 0
 16886                           ;ff.c: 3892: fp->obj.fs = 0;
 16887  005746  C0A2  FFD9         	movff	f_close@fp,fsr2l
 16888  00574A  C0A3  FFDA         	movff	f_close@fp+1,fsr2h
 16889  00574E  0E00               	movlw	0
 16890  005750  6EDE               	movwf	postinc2,c
 16891  005752  0E00               	movlw	0
 16892  005754  6EDD               	movwf	postdec2,c
 16893                           
 16894                           ; BSR set to: 0
 16895                           
 16896                           ; BSR set to: 0
 16897  005756  0012               	return	
 16898  005758                     __end_of_f_close:
 16899                           	opt stack 0
 16900                           tosu	equ	0xFFF
 16901                           tosh	equ	0xFFE
 16902                           tosl	equ	0xFFD
 16903                           pclath	equ	0xFFA
 16904                           tblptru	equ	0xFF8
 16905                           tblptrh	equ	0xFF7
 16906                           tblptrl	equ	0xFF6
 16907                           tablat	equ	0xFF5
 16908                           prodh	equ	0xFF4
 16909                           prodl	equ	0xFF3
 16910                           intcon	equ	0xFF2
 16911                           intcon2	equ	0xFF1
 16912                           intcon3	equ	0xFF0
 16913                           indf0	equ	0xFEF
 16914                           postinc0	equ	0xFEE
 16915                           fsr0h	equ	0xFEA
 16916                           fsr0l	equ	0xFE9
 16917                           wreg	equ	0xFE8
 16918                           indf1	equ	0xFE7
 16919                           postinc1	equ	0xFE6
 16920                           postdec1	equ	0xFE5
 16921                           fsr1h	equ	0xFE2
 16922                           fsr1l	equ	0xFE1
 16923                           indf2	equ	0xFDF
 16924                           postinc2	equ	0xFDE
 16925                           postdec2	equ	0xFDD
 16926                           plusw2	equ	0xFDB
 16927                           fsr2h	equ	0xFDA
 16928                           fsr2l	equ	0xFD9
 16929                           status	equ	0xFD8
 16930                           
 16931 ;; *************** function _f_sync *****************
 16932 ;; Defined at:
 16933 ;;		line 3792 in file "bibliotecas/ff.c"
 16934 ;; Parameters:    Size  Location     Type
 16935 ;;  fp              2   55[BANK0 ] PTR struct .
 16936 ;;		 -> SDCard@fil(34), 
 16937 ;; Auto vars:     Size  Location     Type
 16938 ;;  tm              4   57[BANK0 ] unsigned long 
 16939 ;;  dir             2   64[BANK0 ] PTR unsigned char 
 16940 ;;		 -> NULL(0), fs(559), 
 16941 ;;  fs              2   62[BANK0 ] PTR struct .
 16942 ;;		 -> NULL(0), fs(559), 
 16943 ;;  res             1   61[BANK0 ] enum E79
 16944 ;; Return value:  Size  Location     Type
 16945 ;;                  1    wreg      enum E79
 16946 ;; Registers used:
 16947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16948 ;; Tracked objects:
 16949 ;;		On entry : 0/0
 16950 ;;		On exit  : 0/0
 16951 ;;		Unchanged: 0/0
 16952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16953 ;;      Params:         0       2       0       0       0       0       0       0       0
 16954 ;;      Locals:         0       9       0       0       0       0       0       0       0
 16955 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16956 ;;      Totals:         0      11       0       0       0       0       0       0       0
 16957 ;;Total ram usage:       11 bytes
 16958 ;; Hardware stack levels used:    1
 16959 ;; Hardware stack levels required when called:    9
 16960 ;; This function calls:
 16961 ;;		_get_fattime
 16962 ;;		_move_window
 16963 ;;		_st_clust
 16964 ;;		_st_dword
 16965 ;;		_st_word
 16966 ;;		_sync_fs
 16967 ;;		_validate
 16968 ;; This function is called by:
 16969 ;;		_f_close
 16970 ;; This function uses a non-reentrant model
 16971 ;;
 16972                           
 16973                           	psect	text47
 16974  003CCC                     __ptext47:
 16975                           	opt stack 0
 16976  003CCC                     _f_sync:
 16977                           	opt stack 18
 16978                           
 16979                           ;ff.c: 3796: FRESULT res;
 16980                           ;ff.c: 3797: FATFS *fs;
 16981                           ;ff.c: 3798: DWORD tm;
 16982                           ;ff.c: 3799: BYTE *dir;
 16983                           ;ff.c: 3802: res = validate(&fp->obj, &fs);
 16984                           
 16985                           ; BSR set to: 0
 16986                           ;incstack = 0
 16987  003CCC  C097  F021         	movff	f_sync@fp,validate@obj
 16988  003CD0  C098  F022         	movff	f_sync@fp+1,validate@obj+1
 16989  003CD4  0E9E               	movlw	low f_sync@fs
 16990  003CD6  6E23               	movwf	validate@rfs,c
 16991  003CD8  0E00               	movlw	high f_sync@fs
 16992  003CDA  6E24               	movwf	validate@rfs+1,c
 16993  003CDC  ECBD  F024         	call	_validate	;wreg free
 16994  003CE0  0100               	movlb	0	; () banked
 16995  003CE2  6F9D               	movwf	f_sync@res& (0+255),b
 16996                           
 16997                           ; BSR set to: 0
 16998                           ;ff.c: 3803: if (res == FR_OK) {
 16999  003CE4  519D               	movf	f_sync@res& (0+255),w,b
 17000  003CE6  A4D8               	btfss	status,2,c
 17001  003CE8  D0A8               	goto	l1562
 17002                           
 17003                           ; BSR set to: 0
 17004                           ;ff.c: 3804: if (fp->flag & 0x40) {
 17005  003CEA  EE20 F00E          	lfsr	2,14
 17006  003CEE  5197               	movf	f_sync@fp& (0+255),w,b
 17007  003CF0  26D9               	addwf	fsr2l,f,c
 17008  003CF2  5198               	movf	(f_sync@fp+1)& (0+255),w,b
 17009  003CF4  22DA               	addwfc	fsr2h,f,c
 17010  003CF6  ACDF               	btfss	indf2,6,c
 17011  003CF8  D0A0               	goto	l1562
 17012                           
 17013                           ; BSR set to: 0
 17014                           ;ff.c: 3812: tm = get_fattime();
 17015  003CFA  EC1A  F022         	call	_get_fattime	;wreg free
 17016  003CFE  C01A  F099         	movff	?_get_fattime,f_sync@tm
 17017  003D02  C01B  F09A         	movff	?_get_fattime+1,f_sync@tm+1
 17018  003D06  C01C  F09B         	movff	?_get_fattime+2,f_sync@tm+2
 17019  003D0A  C01D  F09C         	movff	?_get_fattime+3,f_sync@tm+3
 17020                           
 17021                           ;ff.c: 3844: {
 17022                           ;ff.c: 3845: res = move_window(fs, fp->dir_sect);
 17023  003D0E  C09E  F085         	movff	f_sync@fs,move_window@fs
 17024  003D12  C09F  F086         	movff	f_sync@fs+1,move_window@fs+1
 17025  003D16  0100               	movlb	0	; () banked
 17026  003D18  EE20 F01C          	lfsr	2,28
 17027  003D1C  5197               	movf	f_sync@fp& (0+255),w,b
 17028  003D1E  26D9               	addwf	fsr2l,f,c
 17029  003D20  5198               	movf	(f_sync@fp+1)& (0+255),w,b
 17030  003D22  22DA               	addwfc	fsr2h,f,c
 17031  003D24  CFDE F087          	movff	postinc2,move_window@sector
 17032  003D28  CFDE F088          	movff	postinc2,move_window@sector+1
 17033  003D2C  CFDE F089          	movff	postinc2,move_window@sector+2
 17034  003D30  CFDE F08A          	movff	postinc2,move_window@sector+3
 17035  003D34  EC2E  F026         	call	_move_window	;wreg free
 17036  003D38  0100               	movlb	0	; () banked
 17037  003D3A  6F9D               	movwf	f_sync@res& (0+255),b
 17038                           
 17039                           ; BSR set to: 0
 17040                           ;ff.c: 3846: if (res == FR_OK) {
 17041  003D3C  519D               	movf	f_sync@res& (0+255),w,b
 17042  003D3E  A4D8               	btfss	status,2,c
 17043  003D40  D07C               	goto	l1562
 17044                           
 17045                           ; BSR set to: 0
 17046                           ;ff.c: 3847: dir = fp->dir_ptr;
 17047  003D42  EE20 F020          	lfsr	2,32
 17048  003D46  5197               	movf	f_sync@fp& (0+255),w,b
 17049  003D48  26D9               	addwf	fsr2l,f,c
 17050  003D4A  5198               	movf	(f_sync@fp+1)& (0+255),w,b
 17051  003D4C  22DA               	addwfc	fsr2h,f,c
 17052  003D4E  CFDE F0A0          	movff	postinc2,f_sync@dir
 17053  003D52  CFDD F0A1          	movff	postdec2,f_sync@dir+1
 17054                           
 17055                           ;ff.c: 3848: dir[11] |= 0x20;
 17056  003D56  EE20 F00B          	lfsr	2,11
 17057  003D5A  51A0               	movf	f_sync@dir& (0+255),w,b
 17058  003D5C  26D9               	addwf	fsr2l,f,c
 17059  003D5E  51A1               	movf	(f_sync@dir+1)& (0+255),w,b
 17060  003D60  22DA               	addwfc	fsr2h,f,c
 17061  003D62  0E00               	movlw	0
 17062  003D64  8ADB               	bsf	plusw2,5,c
 17063                           
 17064                           ; BSR set to: 0
 17065                           ;ff.c: 3849: st_clust(fp->obj.fs, dir, fp->obj.sclust);
 17066  003D66  C097  FFD9         	movff	f_sync@fp,fsr2l
 17067  003D6A  C098  FFDA         	movff	f_sync@fp+1,fsr2h
 17068  003D6E  CFDE F01E          	movff	postinc2,st_clust@fs
 17069  003D72  CFDD F01F          	movff	postdec2,st_clust@fs+1
 17070  003D76  C0A0  F020         	movff	f_sync@dir,st_clust@dir
 17071  003D7A  C0A1  F021         	movff	f_sync@dir+1,st_clust@dir+1
 17072  003D7E  EE20 F006          	lfsr	2,6
 17073  003D82  5197               	movf	f_sync@fp& (0+255),w,b
 17074  003D84  26D9               	addwf	fsr2l,f,c
 17075  003D86  5198               	movf	(f_sync@fp+1)& (0+255),w,b
 17076  003D88  22DA               	addwfc	fsr2h,f,c
 17077  003D8A  CFDE F022          	movff	postinc2,st_clust@cl
 17078  003D8E  CFDE F023          	movff	postinc2,st_clust@cl+1
 17079  003D92  CFDE F024          	movff	postinc2,st_clust@cl+2
 17080  003D96  CFDE F025          	movff	postinc2,st_clust@cl+3
 17081  003D9A  ECF1  F02B         	call	_st_clust	;wreg free
 17082                           
 17083                           ;ff.c: 3850: st_dword(dir + 28, (DWORD)fp->obj.objsize);
 17084  003D9E  0E1C               	movlw	28
 17085  003DA0  0100               	movlb	0	; () banked
 17086  003DA2  25A0               	addwf	f_sync@dir& (0+255),w,b
 17087  003DA4  6F86               	movwf	st_dword@ptr& (0+255),b
 17088  003DA6  0E00               	movlw	0
 17089  003DA8  21A1               	addwfc	(f_sync@dir+1)& (0+255),w,b
 17090  003DAA  6F87               	movwf	(st_dword@ptr+1)& (0+255),b
 17091  003DAC  EE20 F00A          	lfsr	2,10
 17092  003DB0  5197               	movf	f_sync@fp& (0+255),w,b
 17093  003DB2  26D9               	addwf	fsr2l,f,c
 17094  003DB4  5198               	movf	(f_sync@fp+1)& (0+255),w,b
 17095  003DB6  22DA               	addwfc	fsr2h,f,c
 17096  003DB8  CFDE F088          	movff	postinc2,st_dword@val
 17097  003DBC  CFDE F089          	movff	postinc2,st_dword@val+1
 17098  003DC0  CFDE F08A          	movff	postinc2,st_dword@val+2
 17099  003DC4  CFDE F08B          	movff	postinc2,st_dword@val+3
 17100  003DC8  ECF0  F029         	call	_st_dword	;wreg free
 17101                           
 17102                           ;ff.c: 3851: st_dword(dir + 22, tm);
 17103  003DCC  0E16               	movlw	22
 17104  003DCE  0100               	movlb	0	; () banked
 17105  003DD0  25A0               	addwf	f_sync@dir& (0+255),w,b
 17106  003DD2  6F86               	movwf	st_dword@ptr& (0+255),b
 17107  003DD4  0E00               	movlw	0
 17108  003DD6  21A1               	addwfc	(f_sync@dir+1)& (0+255),w,b
 17109  003DD8  6F87               	movwf	(st_dword@ptr+1)& (0+255),b
 17110  003DDA  C099  F088         	movff	f_sync@tm,st_dword@val
 17111  003DDE  C09A  F089         	movff	f_sync@tm+1,st_dword@val+1
 17112  003DE2  C09B  F08A         	movff	f_sync@tm+2,st_dword@val+2
 17113  003DE6  C09C  F08B         	movff	f_sync@tm+3,st_dword@val+3
 17114  003DEA  ECF0  F029         	call	_st_dword	;wreg free
 17115                           
 17116                           ;ff.c: 3852: st_word(dir + 18, 0);
 17117  003DEE  0E12               	movlw	18
 17118  003DF0  0100               	movlb	0	; () banked
 17119  003DF2  25A0               	addwf	f_sync@dir& (0+255),w,b
 17120  003DF4  6E1A               	movwf	st_word@ptr,c
 17121  003DF6  0E00               	movlw	0
 17122  003DF8  21A1               	addwfc	(f_sync@dir+1)& (0+255),w,b
 17123  003DFA  6E1B               	movwf	st_word@ptr+1,c
 17124  003DFC  0E00               	movlw	0
 17125  003DFE  6E1D               	movwf	st_word@val+1,c
 17126  003E00  0E00               	movlw	0
 17127  003E02  6E1C               	movwf	st_word@val,c
 17128  003E04  EC3B  F02D         	call	_st_word	;wreg free
 17129                           
 17130                           ;ff.c: 3853: fs->wflag = 1;
 17131  003E08  0100               	movlb	0	; () banked
 17132  003E0A  EE20 F003          	lfsr	2,3
 17133  003E0E  519E               	movf	f_sync@fs& (0+255),w,b
 17134  003E10  26D9               	addwf	fsr2l,f,c
 17135  003E12  519F               	movf	(f_sync@fs+1)& (0+255),w,b
 17136  003E14  22DA               	addwfc	fsr2h,f,c
 17137  003E16  0E01               	movlw	1
 17138  003E18  6EDF               	movwf	indf2,c
 17139                           
 17140                           ; BSR set to: 0
 17141                           ;ff.c: 3854: res = sync_fs(fs);
 17142  003E1A  C09E  F08C         	movff	f_sync@fs,sync_fs@fs
 17143  003E1E  C09F  F08D         	movff	f_sync@fs+1,sync_fs@fs+1
 17144  003E22  EC68  F019         	call	_sync_fs	;wreg free
 17145  003E26  0100               	movlb	0	; () banked
 17146  003E28  6F9D               	movwf	f_sync@res& (0+255),b
 17147                           
 17148                           ; BSR set to: 0
 17149                           ;ff.c: 3855: fp->flag &= (BYTE)~0x40;
 17150  003E2A  EE20 F00E          	lfsr	2,14
 17151  003E2E  5197               	movf	f_sync@fp& (0+255),w,b
 17152  003E30  26D9               	addwf	fsr2l,f,c
 17153  003E32  5198               	movf	(f_sync@fp+1)& (0+255),w,b
 17154  003E34  22DA               	addwfc	fsr2h,f,c
 17155  003E36  0EBF               	movlw	191
 17156  003E38  16DF               	andwf	indf2,f,c
 17157  003E3A                     l1562:
 17158                           
 17159                           ; BSR set to: 0
 17160                           ;ff.c: 3856: }
 17161                           ;ff.c: 3857: }
 17162                           ;ff.c: 3858: }
 17163                           ;ff.c: 3859: }
 17164                           ;ff.c: 3861: return res;
 17165                           
 17166                           ; BSR set to: 0
 17167                           
 17168                           ; BSR set to: 0
 17169                           
 17170                           ; BSR set to: 0
 17171  003E3A  519D               	movf	f_sync@res& (0+255),w,b
 17172  003E3C  0012               	return	
 17173  003E3E                     __end_of_f_sync:
 17174                           	opt stack 0
 17175                           tosu	equ	0xFFF
 17176                           tosh	equ	0xFFE
 17177                           tosl	equ	0xFFD
 17178                           pclath	equ	0xFFA
 17179                           tblptru	equ	0xFF8
 17180                           tblptrh	equ	0xFF7
 17181                           tblptrl	equ	0xFF6
 17182                           tablat	equ	0xFF5
 17183                           prodh	equ	0xFF4
 17184                           prodl	equ	0xFF3
 17185                           intcon	equ	0xFF2
 17186                           intcon2	equ	0xFF1
 17187                           intcon3	equ	0xFF0
 17188                           indf0	equ	0xFEF
 17189                           postinc0	equ	0xFEE
 17190                           fsr0h	equ	0xFEA
 17191                           fsr0l	equ	0xFE9
 17192                           wreg	equ	0xFE8
 17193                           indf1	equ	0xFE7
 17194                           postinc1	equ	0xFE6
 17195                           postdec1	equ	0xFE5
 17196                           fsr1h	equ	0xFE2
 17197                           fsr1l	equ	0xFE1
 17198                           indf2	equ	0xFDF
 17199                           postinc2	equ	0xFDE
 17200                           postdec2	equ	0xFDD
 17201                           plusw2	equ	0xFDB
 17202                           fsr2h	equ	0xFDA
 17203                           fsr2l	equ	0xFD9
 17204                           status	equ	0xFD8
 17205                           
 17206 ;; *************** function _validate *****************
 17207 ;; Defined at:
 17208 ;;		line 3273 in file "bibliotecas/ff.c"
 17209 ;; Parameters:    Size  Location     Type
 17210 ;;  obj             2   32[COMRAM] PTR struct .
 17211 ;;		 -> SDCard@fil(34), 
 17212 ;;  rfs             2   34[COMRAM] PTR PTR struct .
 17213 ;;		 -> f_truncate@fs(2), f_readdir@fs(2), f_closedir@fs(2), f_lseek@fs(2), 
 17214 ;;		 -> f_close@fs(2), f_sync@fs(2), f_write@fs(2), f_read@fs(2), 
 17215 ;; Auto vars:     Size  Location     Type
 17216 ;;  res             1   42[COMRAM] enum E79
 17217 ;; Return value:  Size  Location     Type
 17218 ;;                  1    wreg      enum E79
 17219 ;; Registers used:
 17220 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 17221 ;; Tracked objects:
 17222 ;;		On entry : 0/0
 17223 ;;		On exit  : 0/0
 17224 ;;		Unchanged: 0/0
 17225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17226 ;;      Params:         4       0       0       0       0       0       0       0       0
 17227 ;;      Locals:         3       0       0       0       0       0       0       0       0
 17228 ;;      Temps:          4       0       0       0       0       0       0       0       0
 17229 ;;      Totals:        11       0       0       0       0       0       0       0       0
 17230 ;;Total ram usage:       11 bytes
 17231 ;; Hardware stack levels used:    1
 17232 ;; Hardware stack levels required when called:    4
 17233 ;; This function calls:
 17234 ;;		_disk_status
 17235 ;; This function is called by:
 17236 ;;		_f_write
 17237 ;;		_f_sync
 17238 ;;		_f_close
 17239 ;;		_f_read
 17240 ;;		_f_lseek
 17241 ;;		_f_closedir
 17242 ;;		_f_readdir
 17243 ;;		_f_truncate
 17244 ;; This function uses a non-reentrant model
 17245 ;;
 17246                           
 17247                           	psect	text48
 17248  00497A                     __ptext48:
 17249                           	opt stack 0
 17250  00497A                     _validate:
 17251                           	opt stack 23
 17252                           
 17253                           ;ff.c: 3278: FRESULT res = FR_INVALID_OBJECT;
 17254                           
 17255                           ; BSR set to: 0
 17256                           ;incstack = 0
 17257  00497A  0E09               	movlw	9
 17258  00497C  6E2B               	movwf	validate@res,c
 17259                           
 17260                           ;ff.c: 3281: if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {
 17261  00497E  5021               	movf	validate@obj,w,c
 17262  004980  1022               	iorwf	validate@obj+1,w,c
 17263  004982  B4D8               	btfsc	status,2,c
 17264  004984  D040               	goto	l1439
 17265  004986  C021  FFD9         	movff	validate@obj,fsr2l
 17266  00498A  C022  FFDA         	movff	validate@obj+1,fsr2h
 17267  00498E  50DE               	movf	postinc2,w,c
 17268  004990  10DE               	iorwf	postinc2,w,c
 17269  004992  B4D8               	btfsc	status,2,c
 17270  004994  D038               	goto	l1439
 17271  004996  C021  FFD9         	movff	validate@obj,fsr2l
 17272  00499A  C022  FFDA         	movff	validate@obj+1,fsr2h
 17273  00499E  CFDE F025          	movff	postinc2,??_validate
 17274  0049A2  CFDD F026          	movff	postdec2,??_validate+1
 17275  0049A6  C025  FFD9         	movff	??_validate,fsr2l
 17276  0049AA  C026  FFDA         	movff	??_validate+1,fsr2h
 17277  0049AE  50DF               	movf	indf2,w,c
 17278  0049B0  B4D8               	btfsc	status,2,c
 17279  0049B2  D029               	goto	l1439
 17280  0049B4  C021  FFD9         	movff	validate@obj,fsr2l
 17281  0049B8  C022  FFDA         	movff	validate@obj+1,fsr2h
 17282  0049BC  EE10 F005          	lfsr	1,5
 17283  0049C0  50DE               	movf	postinc2,w,c
 17284  0049C2  26E1               	addwf	fsr1l,f,c
 17285  0049C4  50DD               	movf	postdec2,w,c
 17286  0049C6  22E2               	addwfc	fsr1h,f,c
 17287  0049C8  EE20 F002          	lfsr	2,2
 17288  0049CC  5021               	movf	validate@obj,w,c
 17289  0049CE  26D9               	addwf	fsr2l,f,c
 17290  0049D0  5022               	movf	validate@obj+1,w,c
 17291  0049D2  22DA               	addwfc	fsr2h,f,c
 17292  0049D4  50E6               	movf	postinc1,w,c
 17293  0049D6  18DE               	xorwf	postinc2,w,c
 17294  0049D8  E116               	bnz	l1438
 17295  0049DA  50E6               	movf	postinc1,w,c
 17296  0049DC  18DE               	xorwf	postinc2,w,c
 17297  0049DE  A4D8               	btfss	status,2,c
 17298  0049E0  D012               	goto	l1439
 17299                           
 17300                           ;ff.c: 3293: if (!(disk_status(obj->fs->pdrv) & 0x01)) {
 17301  0049E2  C021  FFD9         	movff	validate@obj,fsr2l
 17302  0049E6  C022  FFDA         	movff	validate@obj+1,fsr2h
 17303  0049EA  EE10 F001          	lfsr	1,1
 17304  0049EE  50DE               	movf	postinc2,w,c
 17305  0049F0  26E1               	addwf	fsr1l,f,c
 17306  0049F2  50DD               	movf	postdec2,w,c
 17307  0049F4  22E2               	addwfc	fsr1h,f,c
 17308  0049F6  50E7               	movf	indf1,w,c
 17309  0049F8  EC33  F02C         	call	_disk_status
 17310  0049FC  6E25               	movwf	??_validate& (0+255),c
 17311  0049FE  B025               	btfsc	??_validate,0,c
 17312  004A00  D002               	goto	l1439
 17313                           
 17314                           ;ff.c: 3294: res = FR_OK;
 17315  004A02  0E00               	movlw	0
 17316  004A04  6E2B               	movwf	validate@res,c
 17317  004A06                     l1439:
 17318  004A06                     l1438:
 17319                           
 17320                           ;ff.c: 3295: }
 17321                           ;ff.c: 3297: }
 17322                           ;ff.c: 3298: *rfs = (res == FR_OK) ? obj->fs : 0;
 17323  004A06  502B               	movf	validate@res,w,c
 17324  004A08  B4D8               	btfsc	status,2,c
 17325  004A0A  D005               	goto	l1441
 17326  004A0C  0E00               	movlw	0
 17327  004A0E  6E29               	movwf	_validate$3072,c
 17328  004A10  0E00               	movlw	0
 17329  004A12  6E2A               	movwf	_validate$3072+1,c
 17330  004A14  D008               	goto	l1443
 17331  004A16                     l1441:
 17332  004A16  C021  FFD9         	movff	validate@obj,fsr2l
 17333  004A1A  C022  FFDA         	movff	validate@obj+1,fsr2h
 17334  004A1E  CFDE F029          	movff	postinc2,_validate$3072
 17335  004A22  CFDD F02A          	movff	postdec2,_validate$3072+1
 17336  004A26                     l1443:
 17337  004A26  C023  FFD9         	movff	validate@rfs,fsr2l
 17338  004A2A  C024  FFDA         	movff	validate@rfs+1,fsr2h
 17339  004A2E  C029  FFDE         	movff	_validate$3072,postinc2
 17340  004A32  C02A  FFDD         	movff	_validate$3072+1,postdec2
 17341                           
 17342                           ;ff.c: 3299: return res;
 17343  004A36  502B               	movf	validate@res,w,c
 17344  004A38  0012               	return	
 17345  004A3A                     __end_of_validate:
 17346                           	opt stack 0
 17347                           tosu	equ	0xFFF
 17348                           tosh	equ	0xFFE
 17349                           tosl	equ	0xFFD
 17350                           pclath	equ	0xFFA
 17351                           tblptru	equ	0xFF8
 17352                           tblptrh	equ	0xFF7
 17353                           tblptrl	equ	0xFF6
 17354                           tablat	equ	0xFF5
 17355                           prodh	equ	0xFF4
 17356                           prodl	equ	0xFF3
 17357                           intcon	equ	0xFF2
 17358                           intcon2	equ	0xFF1
 17359                           intcon3	equ	0xFF0
 17360                           indf0	equ	0xFEF
 17361                           postinc0	equ	0xFEE
 17362                           fsr0h	equ	0xFEA
 17363                           fsr0l	equ	0xFE9
 17364                           wreg	equ	0xFE8
 17365                           indf1	equ	0xFE7
 17366                           postinc1	equ	0xFE6
 17367                           postdec1	equ	0xFE5
 17368                           fsr1h	equ	0xFE2
 17369                           fsr1l	equ	0xFE1
 17370                           indf2	equ	0xFDF
 17371                           postinc2	equ	0xFDE
 17372                           postdec2	equ	0xFDD
 17373                           plusw2	equ	0xFDB
 17374                           fsr2h	equ	0xFDA
 17375                           fsr2l	equ	0xFD9
 17376                           status	equ	0xFD8
 17377                           
 17378 ;; *************** function _disk_status *****************
 17379 ;; Defined at:
 17380 ;;		line 72 in file "bibliotecas/diskio.c"
 17381 ;; Parameters:    Size  Location     Type
 17382 ;;  pdrv            1    wreg     unsigned char 
 17383 ;; Auto vars:     Size  Location     Type
 17384 ;;  pdrv            1   30[COMRAM] unsigned char 
 17385 ;;  result          2   28[COMRAM] int 
 17386 ;;  stat            1   31[COMRAM] unsigned char 
 17387 ;; Return value:  Size  Location     Type
 17388 ;;                  1    wreg      unsigned char 
 17389 ;; Registers used:
 17390 ;;		wreg, status,2, status,0, cstack
 17391 ;; Tracked objects:
 17392 ;;		On entry : 0/0
 17393 ;;		On exit  : 0/0
 17394 ;;		Unchanged: 0/0
 17395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17396 ;;      Params:         0       0       0       0       0       0       0       0       0
 17397 ;;      Locals:         4       0       0       0       0       0       0       0       0
 17398 ;;      Temps:          1       0       0       0       0       0       0       0       0
 17399 ;;      Totals:         5       0       0       0       0       0       0       0       0
 17400 ;;Total ram usage:        5 bytes
 17401 ;; Hardware stack levels used:    1
 17402 ;; Hardware stack levels required when called:    3
 17403 ;; This function calls:
 17404 ;;		_sdc_disk_status
 17405 ;; This function is called by:
 17406 ;;		_find_volume
 17407 ;;		_validate
 17408 ;; This function uses a non-reentrant model
 17409 ;;
 17410                           
 17411                           	psect	text49
 17412  005866                     __ptext49:
 17413                           	opt stack 0
 17414  005866                     _disk_status:
 17415                           	opt stack 23
 17416                           
 17417                           ;incstack = 0
 17418                           ;disk_status@pdrv stored from wreg
 17419  005866  6E1F               	movwf	disk_status@pdrv,c
 17420                           
 17421                           ;diskio.c: 76: DSTATUS stat;
 17422                           ;diskio.c: 77: int result;
 17423                           ;diskio.c: 79: switch (pdrv) {
 17424  005868  D011               	goto	l842
 17425  00586A                     
 17426                           ;diskio.c: 81: stat = sdc_disk_status(pdrv);
 17427  00586A  501F               	movf	disk_status@pdrv,w,c
 17428  00586C  EC94  F02D         	call	_sdc_disk_status
 17429  005870  6E20               	movwf	disk_status@stat,c
 17430                           
 17431                           ;diskio.c: 85: return stat;
 17432  005872  5020               	movf	disk_status@stat,w,c
 17433  005874  0012               	return	
 17434  005876                     
 17435                           ;diskio.c: 88: result = sdc_disk_status(pdrv);
 17436  005876  501F               	movf	disk_status@pdrv,w,c
 17437  005878  EC94  F02D         	call	_sdc_disk_status
 17438  00587C  6E1C               	movwf	??_disk_status& (0+255),c
 17439  00587E  501C               	movf	??_disk_status,w,c
 17440  005880  6E1D               	movwf	disk_status@result,c
 17441  005882  6A1E               	clrf	disk_status@result+1,c
 17442                           
 17443                           ;diskio.c: 92: return stat;
 17444  005884  5020               	movf	disk_status@stat,w,c
 17445  005886  0012               	return	
 17446  005888                     
 17447                           ;diskio.c: 99: return stat;
 17448  005888  5020               	movf	disk_status@stat,w,c
 17449  00588A  0012               	return	
 17450  00588C                     l842:
 17451  00588C  501F               	movf	disk_status@pdrv,w,c
 17452                           
 17453                           ; Switch size 1, requested type "space"
 17454                           ; Number of cases is 3, Range of values is 0 to 2
 17455                           ; switch strategies available:
 17456                           ; Name         Instructions Cycles
 17457                           ; simple_byte           10     6 (average)
 17458                           ;	Chosen strategy is simple_byte
 17459  00588E  0A00               	xorlw	0	; case 0
 17460  005890  B4D8               	btfsc	status,2,c
 17461  005892  D7EB               	goto	l843
 17462  005894  0A01               	xorlw	1	; case 1
 17463  005896  B4D8               	btfsc	status,2,c
 17464  005898  D7EE               	goto	l845
 17465  00589A  0A03               	xorlw	3	; case 2
 17466  00589C  B4D8               	btfsc	status,2,c
 17467  00589E  D7F4               	goto	l846
 17468                           
 17469                           ;diskio.c: 101: return 0x01;
 17470  0058A0  0E01               	movlw	1
 17471  0058A2  0012               	return	
 17472  0058A4                     __end_of_disk_status:
 17473                           	opt stack 0
 17474                           tosu	equ	0xFFF
 17475                           tosh	equ	0xFFE
 17476                           tosl	equ	0xFFD
 17477                           pclath	equ	0xFFA
 17478                           tblptru	equ	0xFF8
 17479                           tblptrh	equ	0xFF7
 17480                           tblptrl	equ	0xFF6
 17481                           tablat	equ	0xFF5
 17482                           prodh	equ	0xFF4
 17483                           prodl	equ	0xFF3
 17484                           intcon	equ	0xFF2
 17485                           intcon2	equ	0xFF1
 17486                           intcon3	equ	0xFF0
 17487                           indf0	equ	0xFEF
 17488                           postinc0	equ	0xFEE
 17489                           fsr0h	equ	0xFEA
 17490                           fsr0l	equ	0xFE9
 17491                           wreg	equ	0xFE8
 17492                           indf1	equ	0xFE7
 17493                           postinc1	equ	0xFE6
 17494                           postdec1	equ	0xFE5
 17495                           fsr1h	equ	0xFE2
 17496                           fsr1l	equ	0xFE1
 17497                           indf2	equ	0xFDF
 17498                           postinc2	equ	0xFDE
 17499                           postdec2	equ	0xFDD
 17500                           plusw2	equ	0xFDB
 17501                           fsr2h	equ	0xFDA
 17502                           fsr2l	equ	0xFD9
 17503                           status	equ	0xFD8
 17504                           
 17505 ;; *************** function _sdc_disk_status *****************
 17506 ;; Defined at:
 17507 ;;		line 688 in file "bibliotecas/diskio.c"
 17508 ;; Parameters:    Size  Location     Type
 17509 ;;  pdrv            1    wreg     unsigned char 
 17510 ;; Auto vars:     Size  Location     Type
 17511 ;;  pdrv            1   26[COMRAM] unsigned char 
 17512 ;;  stat            1   25[COMRAM] unsigned char 
 17513 ;;  cont            1    0        unsigned char 
 17514 ;;  buff            1    0        unsigned char 
 17515 ;; Return value:  Size  Location     Type
 17516 ;;                  1    wreg      unsigned char 
 17517 ;; Registers used:
 17518 ;;		wreg, status,2
 17519 ;; Tracked objects:
 17520 ;;		On entry : 0/0
 17521 ;;		On exit  : 0/0
 17522 ;;		Unchanged: 0/0
 17523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17524 ;;      Params:         0       0       0       0       0       0       0       0       0
 17525 ;;      Locals:         2       0       0       0       0       0       0       0       0
 17526 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17527 ;;      Totals:         2       0       0       0       0       0       0       0       0
 17528 ;;Total ram usage:        2 bytes
 17529 ;; Hardware stack levels used:    1
 17530 ;; Hardware stack levels required when called:    2
 17531 ;; This function calls:
 17532 ;;		Nothing
 17533 ;; This function is called by:
 17534 ;;		_disk_status
 17535 ;; This function uses a non-reentrant model
 17536 ;;
 17537                           
 17538                           	psect	text50
 17539  005B28                     __ptext50:
 17540                           	opt stack 0
 17541  005B28                     _sdc_disk_status:
 17542                           	opt stack 23
 17543                           
 17544                           ;incstack = 0
 17545                           ;sdc_disk_status@pdrv stored from wreg
 17546  005B28  6E1B               	movwf	sdc_disk_status@pdrv,c
 17547                           
 17548                           ;diskio.c: 690: DSTATUS stat = 0;
 17549  005B2A  0E00               	movlw	0
 17550  005B2C  6E1A               	movwf	sdc_disk_status@stat,c
 17551                           
 17552                           ;diskio.c: 691: unsigned char buff, cont;
 17553                           ;diskio.c: 693: if (pdrv != 0) return 0x01;
 17554  005B2E  501B               	movf	sdc_disk_status@pdrv,w,c
 17555  005B30  B4D8               	btfsc	status,2,c
 17556  005B32  D002               	goto	l964
 17557  005B34  0E01               	movlw	1
 17558  005B36  0012               	return	
 17559  005B38                     l964:
 17560                           
 17561                           ;diskio.c: 695: return FR_OK;
 17562  005B38  0E00               	movlw	0
 17563  005B3A  0012               	return	
 17564  005B3C                     __end_of_sdc_disk_status:
 17565                           	opt stack 0
 17566                           tosu	equ	0xFFF
 17567                           tosh	equ	0xFFE
 17568                           tosl	equ	0xFFD
 17569                           pclath	equ	0xFFA
 17570                           tblptru	equ	0xFF8
 17571                           tblptrh	equ	0xFF7
 17572                           tblptrl	equ	0xFF6
 17573                           tablat	equ	0xFF5
 17574                           prodh	equ	0xFF4
 17575                           prodl	equ	0xFF3
 17576                           intcon	equ	0xFF2
 17577                           intcon2	equ	0xFF1
 17578                           intcon3	equ	0xFF0
 17579                           indf0	equ	0xFEF
 17580                           postinc0	equ	0xFEE
 17581                           fsr0h	equ	0xFEA
 17582                           fsr0l	equ	0xFE9
 17583                           wreg	equ	0xFE8
 17584                           indf1	equ	0xFE7
 17585                           postinc1	equ	0xFE6
 17586                           postdec1	equ	0xFE5
 17587                           fsr1h	equ	0xFE2
 17588                           fsr1l	equ	0xFE1
 17589                           indf2	equ	0xFDF
 17590                           postinc2	equ	0xFDE
 17591                           postdec2	equ	0xFDD
 17592                           plusw2	equ	0xFDB
 17593                           fsr2h	equ	0xFDA
 17594                           fsr2l	equ	0xFD9
 17595                           status	equ	0xFD8
 17596                           
 17597 ;; *************** function _sync_fs *****************
 17598 ;; Defined at:
 17599 ;;		line 924 in file "bibliotecas/ff.c"
 17600 ;; Parameters:    Size  Location     Type
 17601 ;;  fs              2   44[BANK0 ] PTR struct .
 17602 ;;		 -> NULL(0), fs(559), 
 17603 ;; Auto vars:     Size  Location     Type
 17604 ;;  res             1   54[BANK0 ] enum E79
 17605 ;; Return value:  Size  Location     Type
 17606 ;;                  1    wreg      enum E79
 17607 ;; Registers used:
 17608 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17609 ;; Tracked objects:
 17610 ;;		On entry : 0/0
 17611 ;;		On exit  : 0/0
 17612 ;;		Unchanged: 0/0
 17613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17614 ;;      Params:         0       2       0       0       0       0       0       0       0
 17615 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17616 ;;      Temps:          0       8       0       0       0       0       0       0       0
 17617 ;;      Totals:         0      11       0       0       0       0       0       0       0
 17618 ;;Total ram usage:       11 bytes
 17619 ;; Hardware stack levels used:    1
 17620 ;; Hardware stack levels required when called:    8
 17621 ;; This function calls:
 17622 ;;		_disk_ioctl
 17623 ;;		_disk_write
 17624 ;;		_mem_set
 17625 ;;		_st_dword
 17626 ;;		_st_word
 17627 ;;		_sync_window
 17628 ;; This function is called by:
 17629 ;;		_f_sync
 17630 ;;		_f_unlink
 17631 ;;		_f_mkdir
 17632 ;;		_f_rename
 17633 ;; This function uses a non-reentrant model
 17634 ;;
 17635                           
 17636                           	psect	text51
 17637  0032D0                     __ptext51:
 17638                           	opt stack 0
 17639  0032D0                     _sync_fs:
 17640                           	opt stack 18
 17641                           
 17642                           ;ff.c: 928: FRESULT res;
 17643                           ;ff.c: 931: res = sync_window(fs);
 17644                           
 17645                           ;incstack = 0
 17646  0032D0  C08C  F073         	movff	sync_fs@fs,sync_window@fs
 17647  0032D4  C08D  F074         	movff	sync_fs@fs+1,sync_window@fs+1
 17648  0032D8  ECEC  F01C         	call	_sync_window	;wreg free
 17649  0032DC  0100               	movlb	0	; () banked
 17650  0032DE  6F96               	movwf	sync_fs@res& (0+255),b
 17651                           
 17652                           ; BSR set to: 0
 17653                           ;ff.c: 932: if (res == FR_OK) {
 17654  0032E0  5196               	movf	sync_fs@res& (0+255),w,b
 17655  0032E2  A4D8               	btfss	status,2,c
 17656  0032E4  D0E4               	goto	l1057
 17657                           
 17658                           ; BSR set to: 0
 17659                           ;ff.c: 933: if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 17660  0032E6  C08C  FFD9         	movff	sync_fs@fs,fsr2l
 17661  0032EA  C08D  FFDA         	movff	sync_fs@fs+1,fsr2h
 17662  0032EE  0E03               	movlw	3
 17663  0032F0  18DE               	xorwf	postinc2,w,c
 17664  0032F2  A4D8               	btfss	status,2,c
 17665  0032F4  D0C7               	goto	l1056
 17666                           
 17667                           ; BSR set to: 0
 17668  0032F6  EE20 F004          	lfsr	2,4
 17669  0032FA  518C               	movf	sync_fs@fs& (0+255),w,b
 17670  0032FC  26D9               	addwf	fsr2l,f,c
 17671  0032FE  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 17672  003300  22DA               	addwfc	fsr2h,f,c
 17673  003302  04DE               	decf	postinc2,w,c
 17674  003304  A4D8               	btfss	status,2,c
 17675  003306  D0BE               	goto	l1056
 17676                           
 17677                           ; BSR set to: 0
 17678                           ;ff.c: 935: mem_set(fs->win, 0, ((UINT)512));
 17679  003308  0E2F               	movlw	47
 17680  00330A  258C               	addwf	sync_fs@fs& (0+255),w,b
 17681  00330C  6E1A               	movwf	mem_set@dst,c
 17682  00330E  0E00               	movlw	0
 17683  003310  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 17684  003312  6E1B               	movwf	mem_set@dst+1,c
 17685  003314  0E00               	movlw	0
 17686  003316  6E1D               	movwf	mem_set@val+1,c
 17687  003318  0E00               	movlw	0
 17688  00331A  6E1C               	movwf	mem_set@val,c
 17689  00331C  0E02               	movlw	2
 17690  00331E  6E1F               	movwf	mem_set@cnt+1,c
 17691  003320  0E00               	movlw	0
 17692  003322  6E1E               	movwf	mem_set@cnt,c
 17693  003324  EC13  F02D         	call	_mem_set	;wreg free
 17694                           
 17695                           ;ff.c: 936: st_word(fs->win + 510, 0xAA55);
 17696  003328  0E2D               	movlw	45
 17697  00332A  0100               	movlb	0	; () banked
 17698  00332C  258C               	addwf	sync_fs@fs& (0+255),w,b
 17699  00332E  6E1A               	movwf	st_word@ptr,c
 17700  003330  0E02               	movlw	2
 17701  003332  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 17702  003334  6E1B               	movwf	st_word@ptr+1,c
 17703  003336  0EAA               	movlw	170
 17704  003338  6E1D               	movwf	st_word@val+1,c
 17705  00333A  0E55               	movlw	85
 17706  00333C  6E1C               	movwf	st_word@val,c
 17707  00333E  EC3B  F02D         	call	_st_word	;wreg free
 17708                           
 17709                           ;ff.c: 937: st_dword(fs->win + 0, 0x41615252);
 17710  003342  0E2F               	movlw	47
 17711  003344  0100               	movlb	0	; () banked
 17712  003346  258C               	addwf	sync_fs@fs& (0+255),w,b
 17713  003348  6F86               	movwf	st_dword@ptr& (0+255),b
 17714  00334A  0E00               	movlw	0
 17715  00334C  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 17716  00334E  6F87               	movwf	(st_dword@ptr+1)& (0+255),b
 17717  003350  0E52               	movlw	82
 17718  003352  6F88               	movwf	st_dword@val& (0+255),b
 17719  003354  0E52               	movlw	82
 17720  003356  6F89               	movwf	(st_dword@val+1)& (0+255),b
 17721  003358  0E61               	movlw	97
 17722  00335A  6F8A               	movwf	(st_dword@val+2)& (0+255),b
 17723  00335C  0E41               	movlw	65
 17724  00335E  6F8B               	movwf	(st_dword@val+3)& (0+255),b
 17725  003360  ECF0  F029         	call	_st_dword	;wreg free
 17726                           
 17727                           ;ff.c: 938: st_dword(fs->win + 484, 0x61417272);
 17728  003364  0E13               	movlw	19
 17729  003366  0100               	movlb	0	; () banked
 17730  003368  258C               	addwf	sync_fs@fs& (0+255),w,b
 17731  00336A  6F86               	movwf	st_dword@ptr& (0+255),b
 17732  00336C  0E02               	movlw	2
 17733  00336E  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 17734  003370  6F87               	movwf	(st_dword@ptr+1)& (0+255),b
 17735  003372  0E72               	movlw	114
 17736  003374  6F88               	movwf	st_dword@val& (0+255),b
 17737  003376  0E72               	movlw	114
 17738  003378  6F89               	movwf	(st_dword@val+1)& (0+255),b
 17739  00337A  0E41               	movlw	65
 17740  00337C  6F8A               	movwf	(st_dword@val+2)& (0+255),b
 17741  00337E  0E61               	movlw	97
 17742  003380  6F8B               	movwf	(st_dword@val+3)& (0+255),b
 17743  003382  ECF0  F029         	call	_st_dword	;wreg free
 17744                           
 17745                           ;ff.c: 939: st_dword(fs->win + 488, fs->free_clst);
 17746  003386  0E17               	movlw	23
 17747  003388  0100               	movlb	0	; () banked
 17748  00338A  258C               	addwf	sync_fs@fs& (0+255),w,b
 17749  00338C  6F86               	movwf	st_dword@ptr& (0+255),b
 17750  00338E  0E02               	movlw	2
 17751  003390  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 17752  003392  6F87               	movwf	(st_dword@ptr+1)& (0+255),b
 17753  003394  EE20 F00F          	lfsr	2,15
 17754  003398  518C               	movf	sync_fs@fs& (0+255),w,b
 17755  00339A  26D9               	addwf	fsr2l,f,c
 17756  00339C  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 17757  00339E  22DA               	addwfc	fsr2h,f,c
 17758  0033A0  CFDE F088          	movff	postinc2,st_dword@val
 17759  0033A4  CFDE F089          	movff	postinc2,st_dword@val+1
 17760  0033A8  CFDE F08A          	movff	postinc2,st_dword@val+2
 17761  0033AC  CFDE F08B          	movff	postinc2,st_dword@val+3
 17762  0033B0  ECF0  F029         	call	_st_dword	;wreg free
 17763                           
 17764                           ;ff.c: 940: st_dword(fs->win + 492, fs->last_clst);
 17765  0033B4  0E1B               	movlw	27
 17766  0033B6  0100               	movlb	0	; () banked
 17767  0033B8  258C               	addwf	sync_fs@fs& (0+255),w,b
 17768  0033BA  6F86               	movwf	st_dword@ptr& (0+255),b
 17769  0033BC  0E02               	movlw	2
 17770  0033BE  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 17771  0033C0  6F87               	movwf	(st_dword@ptr+1)& (0+255),b
 17772  0033C2  EE20 F00B          	lfsr	2,11
 17773  0033C6  518C               	movf	sync_fs@fs& (0+255),w,b
 17774  0033C8  26D9               	addwf	fsr2l,f,c
 17775  0033CA  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 17776  0033CC  22DA               	addwfc	fsr2h,f,c
 17777  0033CE  CFDE F088          	movff	postinc2,st_dword@val
 17778  0033D2  CFDE F089          	movff	postinc2,st_dword@val+1
 17779  0033D6  CFDE F08A          	movff	postinc2,st_dword@val+2
 17780  0033DA  CFDE F08B          	movff	postinc2,st_dword@val+3
 17781  0033DE  ECF0  F029         	call	_st_dword	;wreg free
 17782                           
 17783                           ;ff.c: 942: fs->winsect = fs->volbase + 1;
 17784  0033E2  0100               	movlb	0	; () banked
 17785  0033E4  EE20 F01B          	lfsr	2,27
 17786  0033E8  518C               	movf	sync_fs@fs& (0+255),w,b
 17787  0033EA  26D9               	addwf	fsr2l,f,c
 17788  0033EC  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 17789  0033EE  22DA               	addwfc	fsr2h,f,c
 17790  0033F0  CFDE F08E          	movff	postinc2,??_sync_fs
 17791  0033F4  CFDE F08F          	movff	postinc2,??_sync_fs+1
 17792  0033F8  CFDE F090          	movff	postinc2,??_sync_fs+2
 17793  0033FC  CFDE F091          	movff	postinc2,??_sync_fs+3
 17794  003400  0E01               	movlw	1
 17795  003402  258E               	addwf	??_sync_fs& (0+255),w,b
 17796  003404  6F92               	movwf	(??_sync_fs+4)& (0+255),b
 17797  003406  0E00               	movlw	0
 17798  003408  218F               	addwfc	(??_sync_fs+1)& (0+255),w,b
 17799  00340A  6F93               	movwf	(??_sync_fs+5)& (0+255),b
 17800  00340C  0E00               	movlw	0
 17801  00340E  2190               	addwfc	(??_sync_fs+2)& (0+255),w,b
 17802  003410  6F94               	movwf	(??_sync_fs+6)& (0+255),b
 17803  003412  0E00               	movlw	0
 17804  003414  2191               	addwfc	(??_sync_fs+3)& (0+255),w,b
 17805  003416  6F95               	movwf	(??_sync_fs+7)& (0+255),b
 17806  003418  EE20 F02B          	lfsr	2,43
 17807  00341C  518C               	movf	sync_fs@fs& (0+255),w,b
 17808  00341E  26D9               	addwf	fsr2l,f,c
 17809  003420  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 17810  003422  22DA               	addwfc	fsr2h,f,c
 17811  003424  C092  FFDE         	movff	??_sync_fs+4,postinc2
 17812  003428  C093  FFDE         	movff	??_sync_fs+5,postinc2
 17813  00342C  C094  FFDE         	movff	??_sync_fs+6,postinc2
 17814  003430  C095  FFDE         	movff	??_sync_fs+7,postinc2
 17815                           
 17816                           ; BSR set to: 0
 17817                           ;ff.c: 943: disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 17818  003434  0E2F               	movlw	47
 17819  003436  258C               	addwf	sync_fs@fs& (0+255),w,b
 17820  003438  6F68               	movwf	disk_write@buff& (0+255),b
 17821  00343A  0E00               	movlw	0
 17822  00343C  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 17823  00343E  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 17824  003440  EE20 F02B          	lfsr	2,43
 17825  003444  518C               	movf	sync_fs@fs& (0+255),w,b
 17826  003446  26D9               	addwf	fsr2l,f,c
 17827  003448  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 17828  00344A  22DA               	addwfc	fsr2h,f,c
 17829  00344C  CFDE F06A          	movff	postinc2,disk_write@sector
 17830  003450  CFDE F06B          	movff	postinc2,disk_write@sector+1
 17831  003454  CFDE F06C          	movff	postinc2,disk_write@sector+2
 17832  003458  CFDE F06D          	movff	postinc2,disk_write@sector+3
 17833  00345C  0E01               	movlw	1
 17834  00345E  6F6E               	movwf	disk_write@count& (0+255),b
 17835  003460  EE20 F001          	lfsr	2,1
 17836  003464  518C               	movf	sync_fs@fs& (0+255),w,b
 17837  003466  26D9               	addwf	fsr2l,f,c
 17838  003468  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 17839  00346A  22DA               	addwfc	fsr2h,f,c
 17840  00346C  50DF               	movf	indf2,w,c
 17841  00346E  EC4B  F028         	call	_disk_write
 17842                           
 17843                           ;ff.c: 944: fs->fsi_flag = 0;
 17844  003472  0100               	movlb	0	; () banked
 17845  003474  EE20 F004          	lfsr	2,4
 17846  003478  518C               	movf	sync_fs@fs& (0+255),w,b
 17847  00347A  26D9               	addwf	fsr2l,f,c
 17848  00347C  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 17849  00347E  22DA               	addwfc	fsr2h,f,c
 17850  003480  0E00               	movlw	0
 17851  003482  6EDF               	movwf	indf2,c
 17852  003484                     l1056:
 17853                           
 17854                           ; BSR set to: 0
 17855                           ;ff.c: 945: }
 17856                           ;ff.c: 947: if (disk_ioctl(fs->pdrv, 0, 0) != RES_OK) res = FR_DISK_ERR;
 17857                           
 17858                           ; BSR set to: 0
 17859  003484  0E00               	movlw	0
 17860  003486  6E1A               	movwf	disk_ioctl@cmd,c
 17861  003488  0E00               	movlw	0
 17862  00348A  6E1B               	movwf	disk_ioctl@buff,c
 17863  00348C  0E00               	movlw	0
 17864  00348E  6E1C               	movwf	disk_ioctl@buff+1,c
 17865  003490  EE20 F001          	lfsr	2,1
 17866  003494  518C               	movf	sync_fs@fs& (0+255),w,b
 17867  003496  26D9               	addwf	fsr2l,f,c
 17868  003498  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 17869  00349A  22DA               	addwfc	fsr2h,f,c
 17870  00349C  50DF               	movf	indf2,w,c
 17871  00349E  EC27  F02D         	call	_disk_ioctl
 17872  0034A2  0900               	iorlw	0
 17873  0034A4  B4D8               	btfsc	status,2,c
 17874  0034A6  D003               	goto	l1057
 17875  0034A8  0E01               	movlw	1
 17876  0034AA  0100               	movlb	0	; () banked
 17877  0034AC  6F96               	movwf	sync_fs@res& (0+255),b
 17878  0034AE                     l1057:
 17879                           
 17880                           ;ff.c: 948: }
 17881                           ;ff.c: 950: return res;
 17882                           
 17883                           ; BSR set to: 0
 17884  0034AE  0100               	movlb	0	; () banked
 17885  0034B0  5196               	movf	sync_fs@res& (0+255),w,b
 17886  0034B2  0012               	return	
 17887  0034B4                     __end_of_sync_fs:
 17888                           	opt stack 0
 17889                           tosu	equ	0xFFF
 17890                           tosh	equ	0xFFE
 17891                           tosl	equ	0xFFD
 17892                           pclath	equ	0xFFA
 17893                           tblptru	equ	0xFF8
 17894                           tblptrh	equ	0xFF7
 17895                           tblptrl	equ	0xFF6
 17896                           tablat	equ	0xFF5
 17897                           prodh	equ	0xFF4
 17898                           prodl	equ	0xFF3
 17899                           intcon	equ	0xFF2
 17900                           intcon2	equ	0xFF1
 17901                           intcon3	equ	0xFF0
 17902                           indf0	equ	0xFEF
 17903                           postinc0	equ	0xFEE
 17904                           fsr0h	equ	0xFEA
 17905                           fsr0l	equ	0xFE9
 17906                           wreg	equ	0xFE8
 17907                           indf1	equ	0xFE7
 17908                           postinc1	equ	0xFE6
 17909                           postdec1	equ	0xFE5
 17910                           fsr1h	equ	0xFE2
 17911                           fsr1l	equ	0xFE1
 17912                           indf2	equ	0xFDF
 17913                           postinc2	equ	0xFDE
 17914                           postdec2	equ	0xFDD
 17915                           plusw2	equ	0xFDB
 17916                           fsr2h	equ	0xFDA
 17917                           fsr2l	equ	0xFD9
 17918                           status	equ	0xFD8
 17919                           
 17920 ;; *************** function _st_dword *****************
 17921 ;; Defined at:
 17922 ;;		line 596 in file "bibliotecas/ff.c"
 17923 ;; Parameters:    Size  Location     Type
 17924 ;;  ptr             2   38[BANK0 ] PTR unsigned char 
 17925 ;;		 -> fs.win(512), NULL(0), fs(559), 
 17926 ;;  val             4   40[BANK0 ] unsigned long 
 17927 ;; Auto vars:     Size  Location     Type
 17928 ;;		None
 17929 ;; Return value:  Size  Location     Type
 17930 ;;                  1    wreg      void 
 17931 ;; Registers used:
 17932 ;;		fsr2l, fsr2h, status,2, status,0
 17933 ;; Tracked objects:
 17934 ;;		On entry : 0/0
 17935 ;;		On exit  : 0/0
 17936 ;;		Unchanged: 0/0
 17937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17938 ;;      Params:         0       6       0       0       0       0       0       0       0
 17939 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17940 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17941 ;;      Totals:         0       6       0       0       0       0       0       0       0
 17942 ;;Total ram usage:        6 bytes
 17943 ;; Hardware stack levels used:    1
 17944 ;; Hardware stack levels required when called:    2
 17945 ;; This function calls:
 17946 ;;		Nothing
 17947 ;; This function is called by:
 17948 ;;		_sync_fs
 17949 ;;		_put_fat
 17950 ;;		_f_open
 17951 ;;		_f_sync
 17952 ;;		_f_mkdir
 17953 ;; This function uses a non-reentrant model
 17954 ;;
 17955                           
 17956                           	psect	text52
 17957  0053E0                     __ptext52:
 17958                           	opt stack 0
 17959  0053E0                     _st_dword:
 17960                           	opt stack 23
 17961                           
 17962                           ;ff.c: 598: *ptr++ = (BYTE)val; val >>= 8;
 17963                           
 17964                           ; BSR set to: 0
 17965                           ;incstack = 0
 17966  0053E0  C086  FFD9         	movff	st_dword@ptr,fsr2l
 17967  0053E4  C087  FFDA         	movff	st_dword@ptr+1,fsr2h
 17968  0053E8  C088  FFDF         	movff	st_dword@val,indf2
 17969  0053EC  0100               	movlb	0	; () banked
 17970  0053EE  4B86               	infsnz	st_dword@ptr& (0+255),f,b
 17971  0053F0  2B87               	incf	(st_dword@ptr+1)& (0+255),f,b
 17972                           
 17973                           ; BSR set to: 0
 17974  0053F2  C089  F088         	movff	st_dword@val+1,st_dword@val
 17975  0053F6  C08A  F089         	movff	st_dword@val+2,st_dword@val+1
 17976  0053FA  C08B  F08A         	movff	st_dword@val+3,st_dword@val+2
 17977  0053FE  6B8B               	clrf	(st_dword@val+3)& (0+255),b
 17978                           
 17979                           ; BSR set to: 0
 17980                           ;ff.c: 599: *ptr++ = (BYTE)val; val >>= 8;
 17981  005400  C086  FFD9         	movff	st_dword@ptr,fsr2l
 17982  005404  C087  FFDA         	movff	st_dword@ptr+1,fsr2h
 17983  005408  C088  FFDF         	movff	st_dword@val,indf2
 17984                           
 17985                           ; BSR set to: 0
 17986  00540C  4B86               	infsnz	st_dword@ptr& (0+255),f,b
 17987  00540E  2B87               	incf	(st_dword@ptr+1)& (0+255),f,b
 17988  005410  C089  F088         	movff	st_dword@val+1,st_dword@val
 17989  005414  C08A  F089         	movff	st_dword@val+2,st_dword@val+1
 17990  005418  C08B  F08A         	movff	st_dword@val+3,st_dword@val+2
 17991  00541C  6B8B               	clrf	(st_dword@val+3)& (0+255),b
 17992                           
 17993                           ; BSR set to: 0
 17994                           ;ff.c: 600: *ptr++ = (BYTE)val; val >>= 8;
 17995  00541E  C086  FFD9         	movff	st_dword@ptr,fsr2l
 17996  005422  C087  FFDA         	movff	st_dword@ptr+1,fsr2h
 17997  005426  C088  FFDF         	movff	st_dword@val,indf2
 17998                           
 17999                           ; BSR set to: 0
 18000  00542A  4B86               	infsnz	st_dword@ptr& (0+255),f,b
 18001  00542C  2B87               	incf	(st_dword@ptr+1)& (0+255),f,b
 18002                           
 18003                           ; BSR set to: 0
 18004  00542E  C089  F088         	movff	st_dword@val+1,st_dword@val
 18005  005432  C08A  F089         	movff	st_dword@val+2,st_dword@val+1
 18006  005436  C08B  F08A         	movff	st_dword@val+3,st_dword@val+2
 18007  00543A  6B8B               	clrf	(st_dword@val+3)& (0+255),b
 18008                           
 18009                           ; BSR set to: 0
 18010                           ;ff.c: 601: *ptr++ = (BYTE)val;
 18011  00543C  C086  FFD9         	movff	st_dword@ptr,fsr2l
 18012  005440  C087  FFDA         	movff	st_dword@ptr+1,fsr2h
 18013  005444  C088  FFDF         	movff	st_dword@val,indf2
 18014  005448  4B86               	infsnz	st_dword@ptr& (0+255),f,b
 18015  00544A  2B87               	incf	(st_dword@ptr+1)& (0+255),f,b
 18016                           
 18017                           ; BSR set to: 0
 18018  00544C  0012               	return		;funcret
 18019  00544E                     __end_of_st_dword:
 18020                           	opt stack 0
 18021                           tosu	equ	0xFFF
 18022                           tosh	equ	0xFFE
 18023                           tosl	equ	0xFFD
 18024                           pclath	equ	0xFFA
 18025                           tblptru	equ	0xFF8
 18026                           tblptrh	equ	0xFF7
 18027                           tblptrl	equ	0xFF6
 18028                           tablat	equ	0xFF5
 18029                           prodh	equ	0xFF4
 18030                           prodl	equ	0xFF3
 18031                           intcon	equ	0xFF2
 18032                           intcon2	equ	0xFF1
 18033                           intcon3	equ	0xFF0
 18034                           indf0	equ	0xFEF
 18035                           postinc0	equ	0xFEE
 18036                           fsr0h	equ	0xFEA
 18037                           fsr0l	equ	0xFE9
 18038                           wreg	equ	0xFE8
 18039                           indf1	equ	0xFE7
 18040                           postinc1	equ	0xFE6
 18041                           postdec1	equ	0xFE5
 18042                           fsr1h	equ	0xFE2
 18043                           fsr1l	equ	0xFE1
 18044                           indf2	equ	0xFDF
 18045                           postinc2	equ	0xFDE
 18046                           postdec2	equ	0xFDD
 18047                           plusw2	equ	0xFDB
 18048                           fsr2h	equ	0xFDA
 18049                           fsr2l	equ	0xFD9
 18050                           status	equ	0xFD8
 18051                           
 18052 ;; *************** function _mem_set *****************
 18053 ;; Defined at:
 18054 ;;		line 643 in file "bibliotecas/ff.c"
 18055 ;; Parameters:    Size  Location     Type
 18056 ;;  dst             2   25[COMRAM] PTR void 
 18057 ;;		 -> fs.win(512), djn.fn(12), f_rename@djn(40), djo.fn(12), 
 18058 ;;		 -> f_rename@djo(40), dj.fn(12), f_mkdir@dj(40), dj.fn(12), 
 18059 ;;		 -> f_unlink@dj(40), dj.fn(12), f_stat@dj(40), dj.fn(12), 
 18060 ;;		 -> f_open@dj(40), NULL(0), fs(559), 
 18061 ;;  val             2   27[COMRAM] int 
 18062 ;;  cnt             2   29[COMRAM] unsigned int 
 18063 ;; Auto vars:     Size  Location     Type
 18064 ;;  d               2   31[COMRAM] PTR unsigned char 
 18065 ;;		 -> fs.win(512), djn.fn(12), f_rename@djn(40), djo.fn(12), 
 18066 ;;		 -> f_rename@djo(40), dj.fn(12), f_mkdir@dj(40), dj.fn(12), 
 18067 ;;		 -> f_unlink@dj(40), dj.fn(12), f_stat@dj(40), dj.fn(12), 
 18068 ;;		 -> f_open@dj(40), NULL(0), fs(559), 
 18069 ;; Return value:  Size  Location     Type
 18070 ;;                  1    wreg      void 
 18071 ;; Registers used:
 18072 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18073 ;; Tracked objects:
 18074 ;;		On entry : 0/0
 18075 ;;		On exit  : 0/0
 18076 ;;		Unchanged: 0/0
 18077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18078 ;;      Params:         6       0       0       0       0       0       0       0       0
 18079 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18080 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18081 ;;      Totals:         8       0       0       0       0       0       0       0       0
 18082 ;;Total ram usage:        8 bytes
 18083 ;; Hardware stack levels used:    1
 18084 ;; Hardware stack levels required when called:    2
 18085 ;; This function calls:
 18086 ;;		Nothing
 18087 ;; This function is called by:
 18088 ;;		_sync_fs
 18089 ;;		_dir_clear
 18090 ;;		_dir_register
 18091 ;;		_create_name
 18092 ;;		_f_mkdir
 18093 ;; This function uses a non-reentrant model
 18094 ;;
 18095                           
 18096                           	psect	text53
 18097  005A26                     __ptext53:
 18098                           	opt stack 0
 18099  005A26                     _mem_set:
 18100                           	opt stack 21
 18101                           
 18102                           ;ff.c: 645: BYTE *d = (BYTE*)dst;
 18103                           
 18104                           ; BSR set to: 0
 18105                           ;incstack = 0
 18106  005A26  C01A  F020         	movff	mem_set@dst,mem_set@d
 18107  005A2A  C01B  F021         	movff	mem_set@dst+1,mem_set@d+1
 18108  005A2E                     
 18109                           ;ff.c: 648: *d++ = (BYTE)val;
 18110  005A2E  C020  FFD9         	movff	mem_set@d,fsr2l
 18111  005A32  C021  FFDA         	movff	mem_set@d+1,fsr2h
 18112  005A36  C01C  FFDF         	movff	mem_set@val,indf2
 18113  005A3A  4A20               	infsnz	mem_set@d,f,c
 18114  005A3C  2A21               	incf	mem_set@d+1,f,c
 18115                           
 18116                           ;ff.c: 649: } while (--cnt);
 18117  005A3E  061E               	decf	mem_set@cnt,f,c
 18118  005A40  A0D8               	btfss	status,0,c
 18119  005A42  061F               	decf	mem_set@cnt+1,f,c
 18120  005A44  501E               	movf	mem_set@cnt,w,c
 18121  005A46  101F               	iorwf	mem_set@cnt+1,w,c
 18122  005A48  B4D8               	btfsc	status,2,c
 18123  005A4A  0012               	return	
 18124  005A4C  D7F0               	goto	l1008
 18125  005A4E                     __end_of_mem_set:
 18126                           	opt stack 0
 18127                           tosu	equ	0xFFF
 18128                           tosh	equ	0xFFE
 18129                           tosl	equ	0xFFD
 18130                           pclath	equ	0xFFA
 18131                           tblptru	equ	0xFF8
 18132                           tblptrh	equ	0xFF7
 18133                           tblptrl	equ	0xFF6
 18134                           tablat	equ	0xFF5
 18135                           prodh	equ	0xFF4
 18136                           prodl	equ	0xFF3
 18137                           intcon	equ	0xFF2
 18138                           intcon2	equ	0xFF1
 18139                           intcon3	equ	0xFF0
 18140                           indf0	equ	0xFEF
 18141                           postinc0	equ	0xFEE
 18142                           fsr0h	equ	0xFEA
 18143                           fsr0l	equ	0xFE9
 18144                           wreg	equ	0xFE8
 18145                           indf1	equ	0xFE7
 18146                           postinc1	equ	0xFE6
 18147                           postdec1	equ	0xFE5
 18148                           fsr1h	equ	0xFE2
 18149                           fsr1l	equ	0xFE1
 18150                           indf2	equ	0xFDF
 18151                           postinc2	equ	0xFDE
 18152                           postdec2	equ	0xFDD
 18153                           plusw2	equ	0xFDB
 18154                           fsr2h	equ	0xFDA
 18155                           fsr2l	equ	0xFD9
 18156                           status	equ	0xFD8
 18157                           
 18158 ;; *************** function _disk_ioctl *****************
 18159 ;; Defined at:
 18160 ;;		line 249 in file "bibliotecas/diskio.c"
 18161 ;; Parameters:    Size  Location     Type
 18162 ;;  pdrv            1    wreg     unsigned char 
 18163 ;;  cmd             1   25[COMRAM] unsigned char 
 18164 ;;  buff            2   26[COMRAM] PTR void 
 18165 ;;		 -> NULL(0), 
 18166 ;; Auto vars:     Size  Location     Type
 18167 ;;  pdrv            1   28[COMRAM] unsigned char 
 18168 ;;  result          2    0        int 
 18169 ;;  res             1   29[COMRAM] enum E25
 18170 ;; Return value:  Size  Location     Type
 18171 ;;                  1    wreg      enum E25
 18172 ;; Registers used:
 18173 ;;		wreg, status,2, status,0
 18174 ;; Tracked objects:
 18175 ;;		On entry : 0/0
 18176 ;;		On exit  : 0/0
 18177 ;;		Unchanged: 0/0
 18178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18179 ;;      Params:         3       0       0       0       0       0       0       0       0
 18180 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18181 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18182 ;;      Totals:         5       0       0       0       0       0       0       0       0
 18183 ;;Total ram usage:        5 bytes
 18184 ;; Hardware stack levels used:    1
 18185 ;; Hardware stack levels required when called:    2
 18186 ;; This function calls:
 18187 ;;		Nothing
 18188 ;; This function is called by:
 18189 ;;		_sync_fs
 18190 ;; This function uses a non-reentrant model
 18191 ;;
 18192                           
 18193                           	psect	text54
 18194  005A4E                     __ptext54:
 18195                           	opt stack 0
 18196  005A4E                     _disk_ioctl:
 18197                           	opt stack 23
 18198                           
 18199                           ;incstack = 0
 18200                           ;disk_ioctl@pdrv stored from wreg
 18201  005A4E  6E1D               	movwf	disk_ioctl@pdrv,c
 18202                           
 18203                           ;diskio.c: 255: DRESULT res;
 18204                           ;diskio.c: 256: int result;
 18205                           ;diskio.c: 258: switch (pdrv) {
 18206  005A50  D006               	goto	l874
 18207  005A52                     l875:
 18208                           
 18209                           ;diskio.c: 263: return res;
 18210  005A52  501E               	movf	disk_ioctl@res,w,c
 18211  005A54  0012               	return	
 18212  005A56                     l877:
 18213                           
 18214                           ;diskio.c: 269: return res;
 18215  005A56  501E               	movf	disk_ioctl@res,w,c
 18216  005A58  0012               	return	
 18217  005A5A                     l878:
 18218                           
 18219                           ;diskio.c: 275: return res;
 18220  005A5A  501E               	movf	disk_ioctl@res,w,c
 18221  005A5C  0012               	return	
 18222  005A5E                     l874:
 18223  005A5E  501D               	movf	disk_ioctl@pdrv,w,c
 18224                           
 18225                           ; Switch size 1, requested type "space"
 18226                           ; Number of cases is 3, Range of values is 0 to 2
 18227                           ; switch strategies available:
 18228                           ; Name         Instructions Cycles
 18229                           ; simple_byte           10     6 (average)
 18230                           ;	Chosen strategy is simple_byte
 18231  005A60  0A00               	xorlw	0	; case 0
 18232  005A62  B4D8               	btfsc	status,2,c
 18233  005A64  D7F6               	goto	l875
 18234  005A66  0A01               	xorlw	1	; case 1
 18235  005A68  B4D8               	btfsc	status,2,c
 18236  005A6A  D7F5               	goto	l877
 18237  005A6C  0A03               	xorlw	3	; case 2
 18238  005A6E  B4D8               	btfsc	status,2,c
 18239  005A70  D7F4               	goto	l878
 18240                           
 18241                           ;diskio.c: 278: return RES_PARERR;
 18242  005A72  0E04               	movlw	4
 18243  005A74  0012               	return	
 18244  005A76                     __end_of_disk_ioctl:
 18245                           	opt stack 0
 18246                           tosu	equ	0xFFF
 18247                           tosh	equ	0xFFE
 18248                           tosl	equ	0xFFD
 18249                           pclath	equ	0xFFA
 18250                           tblptru	equ	0xFF8
 18251                           tblptrh	equ	0xFF7
 18252                           tblptrl	equ	0xFF6
 18253                           tablat	equ	0xFF5
 18254                           prodh	equ	0xFF4
 18255                           prodl	equ	0xFF3
 18256                           intcon	equ	0xFF2
 18257                           intcon2	equ	0xFF1
 18258                           intcon3	equ	0xFF0
 18259                           indf0	equ	0xFEF
 18260                           postinc0	equ	0xFEE
 18261                           fsr0h	equ	0xFEA
 18262                           fsr0l	equ	0xFE9
 18263                           wreg	equ	0xFE8
 18264                           indf1	equ	0xFE7
 18265                           postinc1	equ	0xFE6
 18266                           postdec1	equ	0xFE5
 18267                           fsr1h	equ	0xFE2
 18268                           fsr1l	equ	0xFE1
 18269                           indf2	equ	0xFDF
 18270                           postinc2	equ	0xFDE
 18271                           postdec2	equ	0xFDD
 18272                           plusw2	equ	0xFDB
 18273                           fsr2h	equ	0xFDA
 18274                           fsr2l	equ	0xFD9
 18275                           status	equ	0xFD8
 18276                           
 18277 ;; *************** function _st_clust *****************
 18278 ;; Defined at:
 18279 ;;		line 1693 in file "bibliotecas/ff.c"
 18280 ;; Parameters:    Size  Location     Type
 18281 ;;  fs              2   29[COMRAM] PTR struct .
 18282 ;;		 -> NULL(0), fs(559), 
 18283 ;;  dir             2   31[COMRAM] PTR unsigned char 
 18284 ;;		 -> fs.win(512), NULL(0), fs(559), 
 18285 ;;  cl              4   33[COMRAM] unsigned long 
 18286 ;; Auto vars:     Size  Location     Type
 18287 ;;		None
 18288 ;; Return value:  Size  Location     Type
 18289 ;;                  1    wreg      void 
 18290 ;; Registers used:
 18291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18292 ;; Tracked objects:
 18293 ;;		On entry : 0/0
 18294 ;;		On exit  : 0/0
 18295 ;;		Unchanged: 0/0
 18296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18297 ;;      Params:         8       0       0       0       0       0       0       0       0
 18298 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18299 ;;      Temps:          1       0       0       0       0       0       0       0       0
 18300 ;;      Totals:         9       0       0       0       0       0       0       0       0
 18301 ;;Total ram usage:        9 bytes
 18302 ;; Hardware stack levels used:    1
 18303 ;; Hardware stack levels required when called:    3
 18304 ;; This function calls:
 18305 ;;		_st_word
 18306 ;; This function is called by:
 18307 ;;		_f_open
 18308 ;;		_f_sync
 18309 ;;		_f_mkdir
 18310 ;;		_f_rename
 18311 ;; This function uses a non-reentrant model
 18312 ;;
 18313                           
 18314                           	psect	text55
 18315  0057E2                     __ptext55:
 18316                           	opt stack 0
 18317  0057E2                     _st_clust:
 18318                           	opt stack 24
 18319                           
 18320                           ;ff.c: 1699: st_word(dir + 26, (WORD)cl);
 18321                           
 18322                           ;incstack = 0
 18323  0057E2  0E1A               	movlw	26
 18324  0057E4  2420               	addwf	st_clust@dir,w,c
 18325  0057E6  6E1A               	movwf	st_word@ptr,c
 18326  0057E8  0E00               	movlw	0
 18327  0057EA  2021               	addwfc	st_clust@dir+1,w,c
 18328  0057EC  6E1B               	movwf	st_word@ptr+1,c
 18329  0057EE  C022  F01C         	movff	st_clust@cl,st_word@val
 18330  0057F2  C023  F01D         	movff	st_clust@cl+1,st_word@val+1
 18331  0057F6  EC3B  F02D         	call	_st_word	;wreg free
 18332                           
 18333                           ;ff.c: 1700: if (fs->fs_type == 3) {
 18334  0057FA  C01E  FFD9         	movff	st_clust@fs,fsr2l
 18335  0057FE  C01F  FFDA         	movff	st_clust@fs+1,fsr2h
 18336  005802  0E03               	movlw	3
 18337  005804  18DE               	xorwf	postinc2,w,c
 18338  005806  A4D8               	btfss	status,2,c
 18339  005808  0012               	return	
 18340                           
 18341                           ;ff.c: 1701: st_word(dir + 20, (WORD)(cl >> 16));
 18342  00580A  0E14               	movlw	20
 18343  00580C  2420               	addwf	st_clust@dir,w,c
 18344  00580E  6E1A               	movwf	st_word@ptr,c
 18345  005810  0E00               	movlw	0
 18346  005812  2021               	addwfc	st_clust@dir+1,w,c
 18347  005814  6E1B               	movwf	st_word@ptr+1,c
 18348  005816  C024  F01C         	movff	st_clust@cl+2,st_word@val
 18349  00581A  C025  F01D         	movff	st_clust@cl+3,st_word@val+1
 18350  00581E  EC3B  F02D         	call	_st_word	;wreg free
 18351  005822  0012               	return	
 18352  005824                     __end_of_st_clust:
 18353                           	opt stack 0
 18354                           tosu	equ	0xFFF
 18355                           tosh	equ	0xFFE
 18356                           tosl	equ	0xFFD
 18357                           pclath	equ	0xFFA
 18358                           tblptru	equ	0xFF8
 18359                           tblptrh	equ	0xFF7
 18360                           tblptrl	equ	0xFF6
 18361                           tablat	equ	0xFF5
 18362                           prodh	equ	0xFF4
 18363                           prodl	equ	0xFF3
 18364                           intcon	equ	0xFF2
 18365                           intcon2	equ	0xFF1
 18366                           intcon3	equ	0xFF0
 18367                           indf0	equ	0xFEF
 18368                           postinc0	equ	0xFEE
 18369                           fsr0h	equ	0xFEA
 18370                           fsr0l	equ	0xFE9
 18371                           wreg	equ	0xFE8
 18372                           indf1	equ	0xFE7
 18373                           postinc1	equ	0xFE6
 18374                           postdec1	equ	0xFE5
 18375                           fsr1h	equ	0xFE2
 18376                           fsr1l	equ	0xFE1
 18377                           indf2	equ	0xFDF
 18378                           postinc2	equ	0xFDE
 18379                           postdec2	equ	0xFDD
 18380                           plusw2	equ	0xFDB
 18381                           fsr2h	equ	0xFDA
 18382                           fsr2l	equ	0xFD9
 18383                           status	equ	0xFD8
 18384                           
 18385 ;; *************** function _st_word *****************
 18386 ;; Defined at:
 18387 ;;		line 589 in file "bibliotecas/ff.c"
 18388 ;; Parameters:    Size  Location     Type
 18389 ;;  ptr             2   25[COMRAM] PTR unsigned char 
 18390 ;;		 -> fs.win(512), NULL(0), fs(559), 
 18391 ;;  val             2   27[COMRAM] unsigned short 
 18392 ;; Auto vars:     Size  Location     Type
 18393 ;;		None
 18394 ;; Return value:  Size  Location     Type
 18395 ;;                  1    wreg      void 
 18396 ;; Registers used:
 18397 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18398 ;; Tracked objects:
 18399 ;;		On entry : 0/0
 18400 ;;		On exit  : 0/0
 18401 ;;		Unchanged: 0/0
 18402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18403 ;;      Params:         4       0       0       0       0       0       0       0       0
 18404 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18405 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18406 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18407 ;;Total ram usage:        4 bytes
 18408 ;; Hardware stack levels used:    1
 18409 ;; Hardware stack levels required when called:    2
 18410 ;; This function calls:
 18411 ;;		Nothing
 18412 ;; This function is called by:
 18413 ;;		_sync_fs
 18414 ;;		_put_fat
 18415 ;;		_st_clust
 18416 ;;		_f_sync
 18417 ;; This function uses a non-reentrant model
 18418 ;;
 18419                           
 18420                           	psect	text56
 18421  005A76                     __ptext56:
 18422                           	opt stack 0
 18423  005A76                     _st_word:
 18424                           	opt stack 23
 18425                           
 18426                           ;ff.c: 591: *ptr++ = (BYTE)val; val >>= 8;
 18427                           
 18428                           ;incstack = 0
 18429  005A76  C01A  FFD9         	movff	st_word@ptr,fsr2l
 18430  005A7A  C01B  FFDA         	movff	st_word@ptr+1,fsr2h
 18431  005A7E  C01C  FFDF         	movff	st_word@val,indf2
 18432  005A82  4A1A               	infsnz	st_word@ptr,f,c
 18433  005A84  2A1B               	incf	st_word@ptr+1,f,c
 18434  005A86  501D               	movf	st_word@val+1,w,c
 18435  005A88  6E1C               	movwf	st_word@val,c
 18436  005A8A  6A1D               	clrf	st_word@val+1,c
 18437                           
 18438                           ;ff.c: 592: *ptr++ = (BYTE)val;
 18439  005A8C  C01A  FFD9         	movff	st_word@ptr,fsr2l
 18440  005A90  C01B  FFDA         	movff	st_word@ptr+1,fsr2h
 18441  005A94  C01C  FFDF         	movff	st_word@val,indf2
 18442  005A98  4A1A               	infsnz	st_word@ptr,f,c
 18443  005A9A  2A1B               	incf	st_word@ptr+1,f,c
 18444  005A9C  0012               	return		;funcret
 18445  005A9E                     __end_of_st_word:
 18446                           	opt stack 0
 18447                           tosu	equ	0xFFF
 18448                           tosh	equ	0xFFE
 18449                           tosl	equ	0xFFD
 18450                           pclath	equ	0xFFA
 18451                           tblptru	equ	0xFF8
 18452                           tblptrh	equ	0xFF7
 18453                           tblptrl	equ	0xFF6
 18454                           tablat	equ	0xFF5
 18455                           prodh	equ	0xFF4
 18456                           prodl	equ	0xFF3
 18457                           intcon	equ	0xFF2
 18458                           intcon2	equ	0xFF1
 18459                           intcon3	equ	0xFF0
 18460                           indf0	equ	0xFEF
 18461                           postinc0	equ	0xFEE
 18462                           fsr0h	equ	0xFEA
 18463                           fsr0l	equ	0xFE9
 18464                           wreg	equ	0xFE8
 18465                           indf1	equ	0xFE7
 18466                           postinc1	equ	0xFE6
 18467                           postdec1	equ	0xFE5
 18468                           fsr1h	equ	0xFE2
 18469                           fsr1l	equ	0xFE1
 18470                           indf2	equ	0xFDF
 18471                           postinc2	equ	0xFDE
 18472                           postdec2	equ	0xFDD
 18473                           plusw2	equ	0xFDB
 18474                           fsr2h	equ	0xFDA
 18475                           fsr2l	equ	0xFD9
 18476                           status	equ	0xFD8
 18477                           
 18478 ;; *************** function _move_window *****************
 18479 ;; Defined at:
 18480 ;;		line 892 in file "bibliotecas/ff.c"
 18481 ;; Parameters:    Size  Location     Type
 18482 ;;  fs              2   37[BANK0 ] PTR struct .
 18483 ;;		 -> NULL(0), fs(559), 
 18484 ;;  sector          4   39[BANK0 ] unsigned long 
 18485 ;; Auto vars:     Size  Location     Type
 18486 ;;  res             1   47[BANK0 ] enum E79
 18487 ;; Return value:  Size  Location     Type
 18488 ;;                  1    wreg      enum E79
 18489 ;; Registers used:
 18490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18491 ;; Tracked objects:
 18492 ;;		On entry : 0/0
 18493 ;;		On exit  : 0/0
 18494 ;;		Unchanged: 0/0
 18495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18496 ;;      Params:         0       6       0       0       0       0       0       0       0
 18497 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18498 ;;      Temps:          0       4       0       0       0       0       0       0       0
 18499 ;;      Totals:         0      11       0       0       0       0       0       0       0
 18500 ;;Total ram usage:       11 bytes
 18501 ;; Hardware stack levels used:    1
 18502 ;; Hardware stack levels required when called:    8
 18503 ;; This function calls:
 18504 ;;		_disk_read
 18505 ;;		_sync_window
 18506 ;; This function is called by:
 18507 ;;		_get_fat
 18508 ;;		_put_fat
 18509 ;;		_dir_alloc
 18510 ;;		_dir_find
 18511 ;;		_dir_register
 18512 ;;		_check_fs
 18513 ;;		_find_volume
 18514 ;;		_f_open
 18515 ;;		_f_write
 18516 ;;		_f_sync
 18517 ;;		_dir_read
 18518 ;;		_dir_remove
 18519 ;;		_f_read
 18520 ;;		_f_getfree
 18521 ;;		_f_rename
 18522 ;; This function uses a non-reentrant model
 18523 ;;
 18524                           
 18525                           	psect	text57
 18526  004C5C                     __ptext57:
 18527                           	opt stack 0
 18528  004C5C                     _move_window:
 18529                           	opt stack 19
 18530                           
 18531                           ;ff.c: 897: FRESULT res = FR_OK;
 18532                           
 18533                           ;incstack = 0
 18534  004C5C  0E00               	movlw	0
 18535  004C5E  0100               	movlb	0	; () banked
 18536  004C60  6F8F               	movwf	move_window@res& (0+255),b
 18537                           
 18538                           ; BSR set to: 0
 18539                           ;ff.c: 900: if (sector != fs->winsect) {
 18540  004C62  EE20 F02B          	lfsr	2,43
 18541  004C66  5185               	movf	move_window@fs& (0+255),w,b
 18542  004C68  26D9               	addwf	fsr2l,f,c
 18543  004C6A  5186               	movf	(move_window@fs+1)& (0+255),w,b
 18544  004C6C  22DA               	addwfc	fsr2h,f,c
 18545  004C6E  5187               	movf	move_window@sector& (0+255),w,b
 18546  004C70  18DE               	xorwf	postinc2,w,c
 18547  004C72  E10A               	bnz	u15650
 18548  004C74  5188               	movf	(move_window@sector+1)& (0+255),w,b
 18549  004C76  18DE               	xorwf	postinc2,w,c
 18550  004C78  E107               	bnz	u15650
 18551  004C7A  5189               	movf	(move_window@sector+2)& (0+255),w,b
 18552  004C7C  18DE               	xorwf	postinc2,w,c
 18553  004C7E  E104               	bnz	u15650
 18554  004C80  518A               	movf	(move_window@sector+3)& (0+255),w,b
 18555  004C82  18DE               	xorwf	postinc2,w,c
 18556  004C84  B4D8               	btfsc	status,2,c
 18557  004C86  D03D               	goto	l1050
 18558  004C88                     u15650:
 18559                           
 18560                           ; BSR set to: 0
 18561                           ;ff.c: 902: res = sync_window(fs);
 18562  004C88  C085  F073         	movff	move_window@fs,sync_window@fs
 18563  004C8C  C086  F074         	movff	move_window@fs+1,sync_window@fs+1
 18564  004C90  ECEC  F01C         	call	_sync_window	;wreg free
 18565  004C94  0100               	movlb	0	; () banked
 18566  004C96  6F8F               	movwf	move_window@res& (0+255),b
 18567                           
 18568                           ; BSR set to: 0
 18569                           ;ff.c: 904: if (res == FR_OK) {
 18570  004C98  518F               	movf	move_window@res& (0+255),w,b
 18571  004C9A  A4D8               	btfss	status,2,c
 18572  004C9C  D032               	goto	l1050
 18573                           
 18574                           ; BSR set to: 0
 18575                           ;ff.c: 905: if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 18576  004C9E  0E2F               	movlw	47
 18577  004CA0  2585               	addwf	move_window@fs& (0+255),w,b
 18578  004CA2  6F6D               	movwf	disk_read@buff& (0+255),b
 18579  004CA4  0E00               	movlw	0
 18580  004CA6  2186               	addwfc	(move_window@fs+1)& (0+255),w,b
 18581  004CA8  6F6E               	movwf	(disk_read@buff+1)& (0+255),b
 18582  004CAA  C087  F06F         	movff	move_window@sector,disk_read@sector
 18583  004CAE  C088  F070         	movff	move_window@sector+1,disk_read@sector+1
 18584  004CB2  C089  F071         	movff	move_window@sector+2,disk_read@sector+2
 18585  004CB6  C08A  F072         	movff	move_window@sector+3,disk_read@sector+3
 18586  004CBA  0E01               	movlw	1
 18587  004CBC  6F73               	movwf	disk_read@count& (0+255),b
 18588  004CBE  EE20 F001          	lfsr	2,1
 18589  004CC2  5185               	movf	move_window@fs& (0+255),w,b
 18590  004CC4  26D9               	addwf	fsr2l,f,c
 18591  004CC6  5186               	movf	(move_window@fs+1)& (0+255),w,b
 18592  004CC8  22DA               	addwfc	fsr2h,f,c
 18593  004CCA  50DF               	movf	indf2,w,c
 18594  004CCC  EC5C  F024         	call	_disk_read
 18595  004CD0  0900               	iorlw	0
 18596  004CD2  B4D8               	btfsc	status,2,c
 18597  004CD4  D007               	goto	l1051
 18598                           
 18599                           ;ff.c: 906: sector = 0xFFFFFFFF;
 18600  004CD6  0100               	movlb	0	; () banked
 18601  004CD8  6987               	setf	move_window@sector& (0+255),b
 18602  004CDA  6988               	setf	(move_window@sector+1)& (0+255),b
 18603  004CDC  6989               	setf	(move_window@sector+2)& (0+255),b
 18604  004CDE  698A               	setf	(move_window@sector+3)& (0+255),b
 18605                           
 18606                           ; BSR set to: 0
 18607                           ;ff.c: 907: res = FR_DISK_ERR;
 18608  004CE0  0E01               	movlw	1
 18609  004CE2  6F8F               	movwf	move_window@res& (0+255),b
 18610  004CE4                     l1051:
 18611                           
 18612                           ;ff.c: 908: }
 18613                           ;ff.c: 909: fs->winsect = sector;
 18614                           
 18615                           ; BSR set to: 0
 18616  004CE4  0100               	movlb	0	; () banked
 18617  004CE6  EE20 F02B          	lfsr	2,43
 18618  004CEA  5185               	movf	move_window@fs& (0+255),w,b
 18619  004CEC  26D9               	addwf	fsr2l,f,c
 18620  004CEE  5186               	movf	(move_window@fs+1)& (0+255),w,b
 18621  004CF0  22DA               	addwfc	fsr2h,f,c
 18622  004CF2  C087  FFDE         	movff	move_window@sector,postinc2
 18623  004CF6  C088  FFDE         	movff	move_window@sector+1,postinc2
 18624  004CFA  C089  FFDE         	movff	move_window@sector+2,postinc2
 18625  004CFE  C08A  FFDE         	movff	move_window@sector+3,postinc2
 18626  004D02                     l1050:
 18627                           
 18628                           ; BSR set to: 0
 18629                           ;ff.c: 910: }
 18630                           ;ff.c: 911: }
 18631                           ;ff.c: 912: return res;
 18632                           
 18633                           ; BSR set to: 0
 18634                           
 18635                           ; BSR set to: 0
 18636  004D02  518F               	movf	move_window@res& (0+255),w,b
 18637  004D04  0012               	return	
 18638  004D06                     __end_of_move_window:
 18639                           	opt stack 0
 18640                           tosu	equ	0xFFF
 18641                           tosh	equ	0xFFE
 18642                           tosl	equ	0xFFD
 18643                           pclath	equ	0xFFA
 18644                           tblptru	equ	0xFF8
 18645                           tblptrh	equ	0xFF7
 18646                           tblptrl	equ	0xFF6
 18647                           tablat	equ	0xFF5
 18648                           prodh	equ	0xFF4
 18649                           prodl	equ	0xFF3
 18650                           intcon	equ	0xFF2
 18651                           intcon2	equ	0xFF1
 18652                           intcon3	equ	0xFF0
 18653                           indf0	equ	0xFEF
 18654                           postinc0	equ	0xFEE
 18655                           fsr0h	equ	0xFEA
 18656                           fsr0l	equ	0xFE9
 18657                           wreg	equ	0xFE8
 18658                           indf1	equ	0xFE7
 18659                           postinc1	equ	0xFE6
 18660                           postdec1	equ	0xFE5
 18661                           fsr1h	equ	0xFE2
 18662                           fsr1l	equ	0xFE1
 18663                           indf2	equ	0xFDF
 18664                           postinc2	equ	0xFDE
 18665                           postdec2	equ	0xFDD
 18666                           plusw2	equ	0xFDB
 18667                           fsr2h	equ	0xFDA
 18668                           fsr2l	equ	0xFD9
 18669                           status	equ	0xFD8
 18670                           
 18671 ;; *************** function _sync_window *****************
 18672 ;; Defined at:
 18673 ;;		line 869 in file "bibliotecas/ff.c"
 18674 ;; Parameters:    Size  Location     Type
 18675 ;;  fs              2   19[BANK0 ] PTR struct .
 18676 ;;		 -> NULL(0), fs(559), 
 18677 ;; Auto vars:     Size  Location     Type
 18678 ;;  res             1   44[COMRAM] enum E79
 18679 ;; Return value:  Size  Location     Type
 18680 ;;                  1    wreg      enum E79
 18681 ;; Registers used:
 18682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18683 ;; Tracked objects:
 18684 ;;		On entry : 0/0
 18685 ;;		On exit  : 0/0
 18686 ;;		Unchanged: 0/0
 18687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18688 ;;      Params:         0       2       0       0       0       0       0       0       0
 18689 ;;      Locals:         1       0       0       0       0       0       0       0       0
 18690 ;;      Temps:          0      16       0       0       0       0       0       0       0
 18691 ;;      Totals:         1      18       0       0       0       0       0       0       0
 18692 ;;Total ram usage:       19 bytes
 18693 ;; Hardware stack levels used:    1
 18694 ;; Hardware stack levels required when called:    7
 18695 ;; This function calls:
 18696 ;;		_disk_write
 18697 ;; This function is called by:
 18698 ;;		_move_window
 18699 ;;		_sync_fs
 18700 ;;		_dir_clear
 18701 ;;		_f_write
 18702 ;;		_f_mkdir
 18703 ;; This function uses a non-reentrant model
 18704 ;;
 18705                           
 18706                           	psect	text58
 18707  0039D8                     __ptext58:
 18708                           	opt stack 0
 18709  0039D8                     _sync_window:
 18710                           	opt stack 20
 18711                           
 18712                           ;ff.c: 873: FRESULT res = FR_OK;
 18713                           
 18714                           ; BSR set to: 0
 18715                           ;incstack = 0
 18716  0039D8  0E00               	movlw	0
 18717  0039DA  6E2D               	movwf	sync_window@res,c
 18718                           
 18719                           ;ff.c: 876: if (fs->wflag) {
 18720  0039DC  0100               	movlb	0	; () banked
 18721  0039DE  EE20 F003          	lfsr	2,3
 18722  0039E2  5173               	movf	sync_window@fs& (0+255),w,b
 18723  0039E4  26D9               	addwf	fsr2l,f,c
 18724  0039E6  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18725  0039E8  22DA               	addwfc	fsr2h,f,c
 18726  0039EA  50DF               	movf	indf2,w,c
 18727  0039EC  B4D8               	btfsc	status,2,c
 18728  0039EE  D0B2               	goto	l1045
 18729                           
 18730                           ; BSR set to: 0
 18731                           ;ff.c: 877: if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {
 18732  0039F0  0E2F               	movlw	47
 18733  0039F2  2573               	addwf	sync_window@fs& (0+255),w,b
 18734  0039F4  6F68               	movwf	disk_write@buff& (0+255),b
 18735  0039F6  0E00               	movlw	0
 18736  0039F8  2174               	addwfc	(sync_window@fs+1)& (0+255),w,b
 18737  0039FA  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 18738  0039FC  EE20 F02B          	lfsr	2,43
 18739  003A00  5173               	movf	sync_window@fs& (0+255),w,b
 18740  003A02  26D9               	addwf	fsr2l,f,c
 18741  003A04  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18742  003A06  22DA               	addwfc	fsr2h,f,c
 18743  003A08  CFDE F06A          	movff	postinc2,disk_write@sector
 18744  003A0C  CFDE F06B          	movff	postinc2,disk_write@sector+1
 18745  003A10  CFDE F06C          	movff	postinc2,disk_write@sector+2
 18746  003A14  CFDE F06D          	movff	postinc2,disk_write@sector+3
 18747  003A18  0E01               	movlw	1
 18748  003A1A  6F6E               	movwf	disk_write@count& (0+255),b
 18749  003A1C  EE20 F001          	lfsr	2,1
 18750  003A20  5173               	movf	sync_window@fs& (0+255),w,b
 18751  003A22  26D9               	addwf	fsr2l,f,c
 18752  003A24  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18753  003A26  22DA               	addwfc	fsr2h,f,c
 18754  003A28  50DF               	movf	indf2,w,c
 18755  003A2A  EC4B  F028         	call	_disk_write
 18756  003A2E  0900               	iorlw	0
 18757  003A30  A4D8               	btfss	status,2,c
 18758  003A32  D08E               	goto	l1042
 18759                           
 18760                           ;ff.c: 878: fs->wflag = 0;
 18761  003A34  0100               	movlb	0	; () banked
 18762  003A36  EE20 F003          	lfsr	2,3
 18763  003A3A  5173               	movf	sync_window@fs& (0+255),w,b
 18764  003A3C  26D9               	addwf	fsr2l,f,c
 18765  003A3E  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18766  003A40  22DA               	addwfc	fsr2h,f,c
 18767  003A42  0E00               	movlw	0
 18768  003A44  6EDF               	movwf	indf2,c
 18769                           
 18770                           ; BSR set to: 0
 18771                           ;ff.c: 879: if (fs->winsect - fs->fatbase < fs->fsize) {
 18772  003A46  EE20 F017          	lfsr	2,23
 18773  003A4A  5173               	movf	sync_window@fs& (0+255),w,b
 18774  003A4C  26D9               	addwf	fsr2l,f,c
 18775  003A4E  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18776  003A50  22DA               	addwfc	fsr2h,f,c
 18777  003A52  EE10 F02B          	lfsr	1,43
 18778  003A56  5173               	movf	sync_window@fs& (0+255),w,b
 18779  003A58  26E1               	addwf	fsr1l,f,c
 18780  003A5A  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18781  003A5C  22E2               	addwfc	fsr1h,f,c
 18782  003A5E  CFE6 F079          	movff	postinc1,??_sync_window+4
 18783  003A62  CFE6 F07A          	movff	postinc1,??_sync_window+5
 18784  003A66  CFE6 F07B          	movff	postinc1,??_sync_window+6
 18785  003A6A  CFE6 F07C          	movff	postinc1,??_sync_window+7
 18786  003A6E  EE10 F01F          	lfsr	1,31
 18787  003A72  5173               	movf	sync_window@fs& (0+255),w,b
 18788  003A74  26E1               	addwf	fsr1l,f,c
 18789  003A76  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18790  003A78  22E2               	addwfc	fsr1h,f,c
 18791  003A7A  CFE6 F07D          	movff	postinc1,??_sync_window+8
 18792  003A7E  CFE6 F07E          	movff	postinc1,??_sync_window+9
 18793  003A82  CFE6 F07F          	movff	postinc1,??_sync_window+10
 18794  003A86  CFE6 F080          	movff	postinc1,??_sync_window+11
 18795  003A8A  1F7D               	comf	(??_sync_window+8)& (0+255),f,b
 18796  003A8C  1F7E               	comf	(??_sync_window+9)& (0+255),f,b
 18797  003A8E  1F7F               	comf	(??_sync_window+10)& (0+255),f,b
 18798  003A90  1F80               	comf	(??_sync_window+11)& (0+255),f,b
 18799  003A92  2B7D               	incf	(??_sync_window+8)& (0+255),f,b
 18800  003A94  0E00               	movlw	0
 18801  003A96  237E               	addwfc	(??_sync_window+9)& (0+255),f,b
 18802  003A98  237F               	addwfc	(??_sync_window+10)& (0+255),f,b
 18803  003A9A  2380               	addwfc	(??_sync_window+11)& (0+255),f,b
 18804  003A9C  5179               	movf	(??_sync_window+4)& (0+255),w,b
 18805  003A9E  257D               	addwf	(??_sync_window+8)& (0+255),w,b
 18806  003AA0  6F81               	movwf	(??_sync_window+12)& (0+255),b
 18807  003AA2  517A               	movf	(??_sync_window+5)& (0+255),w,b
 18808  003AA4  217E               	addwfc	(??_sync_window+9)& (0+255),w,b
 18809  003AA6  6F82               	movwf	(??_sync_window+13)& (0+255),b
 18810  003AA8  517B               	movf	(??_sync_window+6)& (0+255),w,b
 18811  003AAA  217F               	addwfc	(??_sync_window+10)& (0+255),w,b
 18812  003AAC  6F83               	movwf	(??_sync_window+14)& (0+255),b
 18813  003AAE  517C               	movf	(??_sync_window+7)& (0+255),w,b
 18814  003AB0  2180               	addwfc	(??_sync_window+11)& (0+255),w,b
 18815  003AB2  6F84               	movwf	(??_sync_window+15)& (0+255),b
 18816  003AB4  50DE               	movf	postinc2,w,c
 18817  003AB6  5D81               	subwf	(??_sync_window+12)& (0+255),w,b
 18818  003AB8  50DE               	movf	postinc2,w,c
 18819  003ABA  5982               	subwfb	(??_sync_window+13)& (0+255),w,b
 18820  003ABC  50DE               	movf	postinc2,w,c
 18821  003ABE  5983               	subwfb	(??_sync_window+14)& (0+255),w,b
 18822  003AC0  50DE               	movf	postinc2,w,c
 18823  003AC2  5984               	subwfb	(??_sync_window+15)& (0+255),w,b
 18824  003AC4  B0D8               	btfsc	status,0,c
 18825  003AC6  D046               	goto	l1045
 18826                           
 18827                           ; BSR set to: 0
 18828                           ;ff.c: 880: if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 
      +                          1);
 18829  003AC8  EE20 F002          	lfsr	2,2
 18830  003ACC  5173               	movf	sync_window@fs& (0+255),w,b
 18831  003ACE  26D9               	addwf	fsr2l,f,c
 18832  003AD0  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18833  003AD2  22DA               	addwfc	fsr2h,f,c
 18834  003AD4  0E02               	movlw	2
 18835  003AD6  18DE               	xorwf	postinc2,w,c
 18836  003AD8  A4D8               	btfss	status,2,c
 18837  003ADA  D03C               	goto	l1045
 18838                           
 18839                           ; BSR set to: 0
 18840  003ADC  0E2F               	movlw	47
 18841  003ADE  2573               	addwf	sync_window@fs& (0+255),w,b
 18842  003AE0  6F68               	movwf	disk_write@buff& (0+255),b
 18843  003AE2  0E00               	movlw	0
 18844  003AE4  2174               	addwfc	(sync_window@fs+1)& (0+255),w,b
 18845  003AE6  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 18846  003AE8  EE20 F017          	lfsr	2,23
 18847  003AEC  5173               	movf	sync_window@fs& (0+255),w,b
 18848  003AEE  26D9               	addwf	fsr2l,f,c
 18849  003AF0  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18850  003AF2  22DA               	addwfc	fsr2h,f,c
 18851  003AF4  CFDE F075          	movff	postinc2,??_sync_window
 18852  003AF8  CFDE F076          	movff	postinc2,??_sync_window+1
 18853  003AFC  CFDE F077          	movff	postinc2,??_sync_window+2
 18854  003B00  CFDE F078          	movff	postinc2,??_sync_window+3
 18855  003B04  EE20 F02B          	lfsr	2,43
 18856  003B08  5173               	movf	sync_window@fs& (0+255),w,b
 18857  003B0A  26D9               	addwf	fsr2l,f,c
 18858  003B0C  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18859  003B0E  22DA               	addwfc	fsr2h,f,c
 18860  003B10  CFDE F079          	movff	postinc2,??_sync_window+4
 18861  003B14  CFDE F07A          	movff	postinc2,??_sync_window+5
 18862  003B18  CFDE F07B          	movff	postinc2,??_sync_window+6
 18863  003B1C  CFDE F07C          	movff	postinc2,??_sync_window+7
 18864  003B20  5175               	movf	??_sync_window& (0+255),w,b
 18865  003B22  2579               	addwf	(??_sync_window+4)& (0+255),w,b
 18866  003B24  6F6A               	movwf	disk_write@sector& (0+255),b
 18867  003B26  5176               	movf	(??_sync_window+1)& (0+255),w,b
 18868  003B28  217A               	addwfc	(??_sync_window+5)& (0+255),w,b
 18869  003B2A  6F6B               	movwf	(disk_write@sector+1)& (0+255),b
 18870  003B2C  5177               	movf	(??_sync_window+2)& (0+255),w,b
 18871  003B2E  217B               	addwfc	(??_sync_window+6)& (0+255),w,b
 18872  003B30  6F6C               	movwf	(disk_write@sector+2)& (0+255),b
 18873  003B32  5178               	movf	(??_sync_window+3)& (0+255),w,b
 18874  003B34  217C               	addwfc	(??_sync_window+7)& (0+255),w,b
 18875  003B36  6F6D               	movwf	(disk_write@sector+3)& (0+255),b
 18876  003B38  0E01               	movlw	1
 18877  003B3A  6F6E               	movwf	disk_write@count& (0+255),b
 18878  003B3C  EE20 F001          	lfsr	2,1
 18879  003B40  5173               	movf	sync_window@fs& (0+255),w,b
 18880  003B42  26D9               	addwf	fsr2l,f,c
 18881  003B44  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18882  003B46  22DA               	addwfc	fsr2h,f,c
 18883  003B48  50DF               	movf	indf2,w,c
 18884  003B4A  EC4B  F028         	call	_disk_write
 18885                           
 18886                           ;ff.c: 881: }
 18887                           ;ff.c: 882: } else {
 18888  003B4E  D002               	goto	l1045
 18889  003B50                     l1042:
 18890                           
 18891                           ;ff.c: 883: res = FR_DISK_ERR;
 18892  003B50  0E01               	movlw	1
 18893  003B52  6E2D               	movwf	sync_window@res,c
 18894  003B54                     l1045:
 18895                           
 18896                           ;ff.c: 884: }
 18897                           ;ff.c: 885: }
 18898                           ;ff.c: 886: return res;
 18899  003B54  502D               	movf	sync_window@res,w,c
 18900  003B56  0012               	return	
 18901  003B58                     __end_of_sync_window:
 18902                           	opt stack 0
 18903                           tosu	equ	0xFFF
 18904                           tosh	equ	0xFFE
 18905                           tosl	equ	0xFFD
 18906                           pclath	equ	0xFFA
 18907                           tblptru	equ	0xFF8
 18908                           tblptrh	equ	0xFF7
 18909                           tblptrl	equ	0xFF6
 18910                           tablat	equ	0xFF5
 18911                           prodh	equ	0xFF4
 18912                           prodl	equ	0xFF3
 18913                           intcon	equ	0xFF2
 18914                           intcon2	equ	0xFF1
 18915                           intcon3	equ	0xFF0
 18916                           indf0	equ	0xFEF
 18917                           postinc0	equ	0xFEE
 18918                           fsr0h	equ	0xFEA
 18919                           fsr0l	equ	0xFE9
 18920                           wreg	equ	0xFE8
 18921                           indf1	equ	0xFE7
 18922                           postinc1	equ	0xFE6
 18923                           postdec1	equ	0xFE5
 18924                           fsr1h	equ	0xFE2
 18925                           fsr1l	equ	0xFE1
 18926                           indf2	equ	0xFDF
 18927                           postinc2	equ	0xFDE
 18928                           postdec2	equ	0xFDD
 18929                           plusw2	equ	0xFDB
 18930                           fsr2h	equ	0xFDA
 18931                           fsr2l	equ	0xFD9
 18932                           status	equ	0xFD8
 18933                           
 18934 ;; *************** function _disk_write *****************
 18935 ;; Defined at:
 18936 ;;		line 201 in file "bibliotecas/diskio.c"
 18937 ;; Parameters:    Size  Location     Type
 18938 ;;  pdrv            1    wreg     unsigned char 
 18939 ;;  buff            2    8[BANK0 ] PTR const unsigned char 
 18940 ;;		 -> fs.win(512), NULL(0), STR_13(2), fs(559), 
 18941 ;;  sector          4   10[BANK0 ] unsigned long 
 18942 ;;  count           1   14[BANK0 ] unsigned char 
 18943 ;; Auto vars:     Size  Location     Type
 18944 ;;  pdrv            1   15[BANK0 ] unsigned char 
 18945 ;;  result          2   16[BANK0 ] int 
 18946 ;;  res             1   18[BANK0 ] enum E25
 18947 ;; Return value:  Size  Location     Type
 18948 ;;                  1    wreg      enum E25
 18949 ;; Registers used:
 18950 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18951 ;; Tracked objects:
 18952 ;;		On entry : 0/0
 18953 ;;		On exit  : 0/0
 18954 ;;		Unchanged: 0/0
 18955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18956 ;;      Params:         0       7       0       0       0       0       0       0       0
 18957 ;;      Locals:         0       4       0       0       0       0       0       0       0
 18958 ;;      Temps:          1       0       0       0       0       0       0       0       0
 18959 ;;      Totals:         1      11       0       0       0       0       0       0       0
 18960 ;;Total ram usage:       12 bytes
 18961 ;; Hardware stack levels used:    1
 18962 ;; Hardware stack levels required when called:    6
 18963 ;; This function calls:
 18964 ;;		_sdc_disk_write
 18965 ;; This function is called by:
 18966 ;;		_sync_window
 18967 ;;		_sync_fs
 18968 ;;		_dir_clear
 18969 ;;		_f_write
 18970 ;; This function uses a non-reentrant model
 18971 ;;
 18972                           
 18973                           	psect	text59
 18974  005096                     __ptext59:
 18975                           	opt stack 0
 18976  005096                     _disk_write:
 18977                           	opt stack 20
 18978                           
 18979                           ;incstack = 0
 18980                           ;disk_write@pdrv stored from wreg
 18981  005096  0100               	movlb	0	; () banked
 18982  005098  6F6F               	movwf	disk_write@pdrv& (0+255),b
 18983                           
 18984                           ;diskio.c: 208: DRESULT res;
 18985                           ;diskio.c: 209: int result;
 18986                           ;diskio.c: 211: switch (pdrv) {
 18987  00509A  D032               	goto	l866
 18988  00509C                     
 18989                           ;diskio.c: 214: result = sdc_disk_write(buff, sector, count);
 18990  00509C  C068  F023         	movff	disk_write@buff,sdc_disk_write@p_buff
 18991  0050A0  C069  F024         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 18992  0050A4  C06A  F025         	movff	disk_write@sector,sdc_disk_write@sector
 18993  0050A8  C06B  F026         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 18994  0050AC  C06C  F027         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 18995  0050B0  C06D  F028         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 18996  0050B4  C06E  F029         	movff	disk_write@count,sdc_disk_write@count
 18997  0050B8  EC1F  F01F         	call	_sdc_disk_write	;wreg free
 18998  0050BC  6E2C               	movwf	??_disk_write& (0+255),c
 18999  0050BE  502C               	movf	??_disk_write,w,c
 19000  0050C0  0100               	movlb	0	; () banked
 19001  0050C2  6F70               	movwf	disk_write@result& (0+255),b
 19002  0050C4  6B71               	clrf	(disk_write@result+1)& (0+255),b
 19003                           
 19004                           ; BSR set to: 0
 19005                           ;diskio.c: 216: res = result;
 19006  0050C6  C070  F072         	movff	disk_write@result,disk_write@res
 19007                           
 19008                           ; BSR set to: 0
 19009                           ;diskio.c: 219: return res;
 19010  0050CA  5172               	movf	disk_write@res& (0+255),w,b
 19011                           
 19012                           ; BSR set to: 0
 19013  0050CC  0012               	return	
 19014  0050CE                     
 19015                           ; BSR set to: 0
 19016                           ;diskio.c: 224: result = sdc_disk_write(buff, sector, count);
 19017                           
 19018                           ; BSR set to: 0
 19019  0050CE  C068  F023         	movff	disk_write@buff,sdc_disk_write@p_buff
 19020  0050D2  C069  F024         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 19021  0050D6  C06A  F025         	movff	disk_write@sector,sdc_disk_write@sector
 19022  0050DA  C06B  F026         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 19023  0050DE  C06C  F027         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 19024  0050E2  C06D  F028         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 19025  0050E6  C06E  F029         	movff	disk_write@count,sdc_disk_write@count
 19026  0050EA  EC1F  F01F         	call	_sdc_disk_write	;wreg free
 19027  0050EE  6E2C               	movwf	??_disk_write& (0+255),c
 19028  0050F0  502C               	movf	??_disk_write,w,c
 19029  0050F2  0100               	movlb	0	; () banked
 19030  0050F4  6F70               	movwf	disk_write@result& (0+255),b
 19031  0050F6  6B71               	clrf	(disk_write@result+1)& (0+255),b
 19032                           
 19033                           ; BSR set to: 0
 19034                           ;diskio.c: 228: return res;
 19035  0050F8  5172               	movf	disk_write@res& (0+255),w,b
 19036                           
 19037                           ; BSR set to: 0
 19038  0050FA  0012               	return	
 19039  0050FC                     
 19040                           ; BSR set to: 0
 19041                           ;diskio.c: 237: return res;
 19042                           
 19043                           ; BSR set to: 0
 19044  0050FC  5172               	movf	disk_write@res& (0+255),w,b
 19045                           
 19046                           ; BSR set to: 0
 19047  0050FE  0012               	return	
 19048  005100                     l866:
 19049                           
 19050                           ; BSR set to: 0
 19051  005100  0100               	movlb	0	; () banked
 19052  005102  516F               	movf	disk_write@pdrv& (0+255),w,b
 19053                           
 19054                           ; Switch size 1, requested type "space"
 19055                           ; Number of cases is 3, Range of values is 0 to 2
 19056                           ; switch strategies available:
 19057                           ; Name         Instructions Cycles
 19058                           ; simple_byte           10     6 (average)
 19059                           ;	Chosen strategy is simple_byte
 19060  005104  0A00               	xorlw	0	; case 0
 19061  005106  B4D8               	btfsc	status,2,c
 19062  005108  D7C9               	goto	l867
 19063  00510A  0A01               	xorlw	1	; case 1
 19064  00510C  B4D8               	btfsc	status,2,c
 19065  00510E  D7DF               	goto	l869
 19066  005110  0A03               	xorlw	3	; case 2
 19067  005112  B4D8               	btfsc	status,2,c
 19068  005114  D7F3               	goto	l870
 19069                           
 19070                           ; BSR set to: 0
 19071                           ;diskio.c: 240: return RES_PARERR;
 19072                           
 19073                           ; BSR set to: 0
 19074  005116  0E04               	movlw	4
 19075  005118  0012               	return	
 19076  00511A                     __end_of_disk_write:
 19077                           	opt stack 0
 19078                           tosu	equ	0xFFF
 19079                           tosh	equ	0xFFE
 19080                           tosl	equ	0xFFD
 19081                           pclath	equ	0xFFA
 19082                           tblptru	equ	0xFF8
 19083                           tblptrh	equ	0xFF7
 19084                           tblptrl	equ	0xFF6
 19085                           tablat	equ	0xFF5
 19086                           prodh	equ	0xFF4
 19087                           prodl	equ	0xFF3
 19088                           intcon	equ	0xFF2
 19089                           intcon2	equ	0xFF1
 19090                           intcon3	equ	0xFF0
 19091                           indf0	equ	0xFEF
 19092                           postinc0	equ	0xFEE
 19093                           fsr0h	equ	0xFEA
 19094                           fsr0l	equ	0xFE9
 19095                           wreg	equ	0xFE8
 19096                           indf1	equ	0xFE7
 19097                           postinc1	equ	0xFE6
 19098                           postdec1	equ	0xFE5
 19099                           fsr1h	equ	0xFE2
 19100                           fsr1l	equ	0xFE1
 19101                           indf2	equ	0xFDF
 19102                           postinc2	equ	0xFDE
 19103                           postdec2	equ	0xFDD
 19104                           plusw2	equ	0xFDB
 19105                           fsr2h	equ	0xFDA
 19106                           fsr2l	equ	0xFD9
 19107                           status	equ	0xFD8
 19108                           
 19109 ;; *************** function _sdc_disk_write *****************
 19110 ;; Defined at:
 19111 ;;		line 608 in file "bibliotecas/diskio.c"
 19112 ;; Parameters:    Size  Location     Type
 19113 ;;  p_buff          2   34[COMRAM] PTR const unsigned char 
 19114 ;;		 -> fs.win(512), NULL(0), STR_13(2), fs(559), 
 19115 ;;  sector          4   36[COMRAM] unsigned long 
 19116 ;;  count           1   40[COMRAM] unsigned char 
 19117 ;; Auto vars:     Size  Location     Type
 19118 ;;  j               2    5[BANK0 ] int 
 19119 ;;  count1          2    2[BANK0 ] int 
 19120 ;;  i               2    0[BANK0 ] int 
 19121 ;;  buff            1    7[BANK0 ] unsigned char 
 19122 ;;  res             1    4[BANK0 ] enum E25
 19123 ;; Return value:  Size  Location     Type
 19124 ;;                  1    wreg      enum E25
 19125 ;; Registers used:
 19126 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19127 ;; Tracked objects:
 19128 ;;		On entry : 0/0
 19129 ;;		On exit  : 0/0
 19130 ;;		Unchanged: 0/0
 19131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19132 ;;      Params:         7       0       0       0       0       0       0       0       0
 19133 ;;      Locals:         0       8       0       0       0       0       0       0       0
 19134 ;;      Temps:          2       0       0       0       0       0       0       0       0
 19135 ;;      Totals:         9       8       0       0       0       0       0       0       0
 19136 ;;Total ram usage:       17 bytes
 19137 ;; Hardware stack levels used:    1
 19138 ;; Hardware stack levels required when called:    5
 19139 ;; This function calls:
 19140 ;;		_command
 19141 ;;		_dummy_clocks
 19142 ;;		_escreve_dado_SPI
 19143 ;;		_escreve_frase_ram_lcd
 19144 ;;		_posicao_cursor_lcd
 19145 ;;		_proceed
 19146 ;;		_response
 19147 ;; This function is called by:
 19148 ;;		_disk_write
 19149 ;; This function uses a non-reentrant model
 19150 ;;
 19151                           
 19152                           	psect	text60
 19153  003E3E                     __ptext60:
 19154                           	opt stack 0
 19155  003E3E                     _sdc_disk_write:
 19156                           	opt stack 20
 19157                           
 19158                           ;diskio.c: 610: DRESULT res;
 19159                           ;diskio.c: 611: unsigned char buff;
 19160                           ;diskio.c: 612: int i=0,j, count1 = 0;
 19161                           
 19162                           ; BSR set to: 0
 19163                           ;incstack = 0
 19164  003E3E  0E00               	movlw	0
 19165  003E40  0100               	movlb	0	; () banked
 19166  003E42  6F61               	movwf	(sdc_disk_write@i+1)& (0+255),b
 19167  003E44  0E00               	movlw	0
 19168  003E46  6F60               	movwf	sdc_disk_write@i& (0+255),b
 19169  003E48  0E00               	movlw	0
 19170  003E4A  6F63               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 19171  003E4C  0E00               	movlw	0
 19172  003E4E  6F62               	movwf	sdc_disk_write@count1& (0+255),b
 19173                           
 19174                           ; BSR set to: 0
 19175                           ;diskio.c: 618: LATBbits.LATB4 = 0;
 19176  003E50  988A               	bcf	3978,4,c	;volatile
 19177                           
 19178                           ; BSR set to: 0
 19179                           ;diskio.c: 619: dummy_clocks(10);
 19180  003E52  0E0A               	movlw	10
 19181  003E54  EC52  F02C         	call	_dummy_clocks
 19182                           
 19183                           ;diskio.c: 620: command(0X58, 0X00000000, 0X00);
 19184  003E58  0E00               	movlw	0
 19185  003E5A  6E1C               	movwf	command@arg,c
 19186  003E5C  0E00               	movlw	0
 19187  003E5E  6E1D               	movwf	command@arg+1,c
 19188  003E60  0E00               	movlw	0
 19189  003E62  6E1E               	movwf	command@arg+2,c
 19190  003E64  0E00               	movlw	0
 19191  003E66  6E1F               	movwf	command@arg+3,c
 19192  003E68  0E00               	movlw	0
 19193  003E6A  6E20               	movwf	command@CRC,c
 19194  003E6C  0E58               	movlw	88
 19195  003E6E  ECCA  F02C         	call	_command
 19196                           
 19197                           ;diskio.c: 621: LATBbits.LATB4 = 1;
 19198  003E72  888A               	bsf	3978,4,c	;volatile
 19199                           
 19200                           ;diskio.c: 622: proceed();
 19201  003E74  ECD5  F02D         	call	_proceed	;wreg free
 19202  003E78                     
 19203                           ;diskio.c: 624: buff = response();
 19204  003E78  ECC2  F02D         	call	_response	;wreg free
 19205  003E7C  0100               	movlb	0	; () banked
 19206  003E7E  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 19207                           
 19208                           ;diskio.c: 625: }while(buff!=0X00);
 19209  003E80  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 19210  003E82  A4D8               	btfss	status,2,c
 19211  003E84  D7F9               	goto	l955
 19212                           
 19213                           ; BSR set to: 0
 19214                           ;diskio.c: 627: _delay((unsigned long)((2000)*(48000000/4000.0)));
 19215                           
 19216                           ; BSR set to: 0
 19217  003E86  0E7A               	movlw	122
 19218  003E88  6E2B               	movwf	(??_sdc_disk_write+1)& (0+255),c
 19219  003E8A  0EC1               	movlw	193
 19220  003E8C  6E2A               	movwf	??_sdc_disk_write& (0+255),c
 19221  003E8E  0E82               	movlw	130
 19222  003E90                     u21927:
 19223  003E90  2EE8               	decfsz	wreg,f,c
 19224  003E92  D7FE               	bra	u21927
 19225  003E94  2E2A               	decfsz	??_sdc_disk_write& (0+255),f,c
 19226  003E96  D7FC               	bra	u21927
 19227  003E98  2E2B               	decfsz	(??_sdc_disk_write+1)& (0+255),f,c
 19228  003E9A  D7FA               	bra	u21927
 19229                           
 19230                           ;diskio.c: 629: LATBbits.LATB4 = 0;
 19231  003E9C  988A               	bcf	3978,4,c	;volatile
 19232                           
 19233                           ;diskio.c: 630: dummy_clocks(10);
 19234  003E9E  0E0A               	movlw	10
 19235  003EA0  EC52  F02C         	call	_dummy_clocks
 19236                           
 19237                           ;diskio.c: 633: escreve_dado_SPI(0XFE);
 19238  003EA4  0EFE               	movlw	254
 19239  003EA6  ECAC  F02B         	call	_escreve_dado_SPI
 19240                           
 19241                           ;diskio.c: 638: for(j=0;j<512;j++)
 19242  003EAA  0E00               	movlw	0
 19243  003EAC  0100               	movlb	0	; () banked
 19244  003EAE  6F66               	movwf	(sdc_disk_write@j+1)& (0+255),b
 19245  003EB0  0E00               	movlw	0
 19246  003EB2  6F65               	movwf	sdc_disk_write@j& (0+255),b
 19247  003EB4                     l12266:
 19248                           
 19249                           ; BSR set to: 0
 19250  003EB4  BF66               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 19251  003EB6  D004               	goto	l957
 19252  003EB8  0E02               	movlw	2
 19253  003EBA  5D66               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 19254  003EBC  B0D8               	btfsc	status,0,c
 19255  003EBE  D035               	goto	u15520
 19256  003EC0                     l957:
 19257                           
 19258                           ; BSR set to: 0
 19259                           ;diskio.c: 639: {
 19260                           ;diskio.c: 640: posicao_cursor_lcd(1,5);
 19261                           
 19262                           ; BSR set to: 0
 19263  003EC0  0E05               	movlw	5
 19264  003EC2  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 19265  003EC4  0E01               	movlw	1
 19266  003EC6  ECB8  F029         	call	_posicao_cursor_lcd
 19267                           
 19268                           ;diskio.c: 641: escreve_frase_ram_lcd(*p_buff);
 19269  003ECA  C023  FFF6         	movff	sdc_disk_write@p_buff,tblptrl
 19270  003ECE  C024  FFF7         	movff	sdc_disk_write@p_buff+1,tblptrh
 19271  003ED2  6AF8               	clrf	tblptru,c
 19272  003ED4  0E07               	movlw	(high __ramtop+-1)
 19273  003ED6  64F7               	cpfsgt	tblptrh,c
 19274  003ED8  D003               	bra	u15507
 19275  003EDA  0008               	tblrd		*
 19276  003EDC  50F5               	movf	tablat,w,c
 19277  003EDE  D005               	bra	u15500
 19278  003EE0                     u15507:
 19279  003EE0  CFF6 FFE9          	movff	tblptrl,fsr0l
 19280  003EE4  CFF7 FFEA          	movff	tblptrh,fsr0h
 19281  003EE8  50EF               	movf	indf0,w,c
 19282  003EEA                     u15500:
 19283  003EEA  6E2A               	movwf	??_sdc_disk_write& (0+255),c
 19284  003EEC  6A2B               	clrf	(??_sdc_disk_write+1)& (0+255),c
 19285  003EEE  C02A  F01D         	movff	??_sdc_disk_write,escreve_frase_ram_lcd@buffer
 19286  003EF2  C02B  F01E         	movff	??_sdc_disk_write+1,escreve_frase_ram_lcd@buffer+1
 19287  003EF6  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 19288                           
 19289                           ;diskio.c: 642: escreve_dado_SPI(*p_buff);
 19290  003EFA  C023  FFF6         	movff	sdc_disk_write@p_buff,tblptrl
 19291  003EFE  C024  FFF7         	movff	sdc_disk_write@p_buff+1,tblptrh
 19292  003F02  6AF8               	clrf	tblptru,c
 19293  003F04  0E07               	movlw	(high __ramtop+-1)
 19294  003F06  64F7               	cpfsgt	tblptrh,c
 19295  003F08  D003               	bra	u15517
 19296  003F0A  0008               	tblrd		*
 19297  003F0C  50F5               	movf	tablat,w,c
 19298  003F0E  D005               	bra	u15510
 19299  003F10                     u15517:
 19300  003F10  CFF6 FFE9          	movff	tblptrl,fsr0l
 19301  003F14  CFF7 FFEA          	movff	tblptrh,fsr0h
 19302  003F18  50EF               	movf	indf0,w,c
 19303  003F1A                     u15510:
 19304  003F1A  ECAC  F02B         	call	_escreve_dado_SPI
 19305                           
 19306                           ;diskio.c: 643: p_buff++;
 19307  003F1E  4A23               	infsnz	sdc_disk_write@p_buff,f,c
 19308  003F20  2A24               	incf	sdc_disk_write@p_buff+1,f,c
 19309  003F22  0100               	movlb	0	; () banked
 19310  003F24  4B65               	infsnz	sdc_disk_write@j& (0+255),f,b
 19311  003F26  2B66               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 19312  003F28  D7C5               	goto	l12266
 19313  003F2A                     u15520:
 19314                           
 19315                           ; BSR set to: 0
 19316                           ;diskio.c: 645: }
 19317                           ;diskio.c: 648: escreve_dado_SPI(0XFF);
 19318                           
 19319                           ; BSR set to: 0
 19320  003F2A  0EFF               	movlw	255
 19321  003F2C  ECAC  F02B         	call	_escreve_dado_SPI
 19322                           
 19323                           ;diskio.c: 649: escreve_dado_SPI(0XFF);
 19324  003F30  0EFF               	movlw	255
 19325  003F32  ECAC  F02B         	call	_escreve_dado_SPI
 19326                           
 19327                           ;diskio.c: 650: LATBbits.LATB4 = 1;
 19328  003F36  888A               	bsf	3978,4,c	;volatile
 19329                           
 19330                           ;diskio.c: 658: LATBbits.LATB4 = 0;
 19331  003F38  988A               	bcf	3978,4,c	;volatile
 19332                           
 19333                           ;diskio.c: 659: dummy_clocks(10);
 19334  003F3A  0E0A               	movlw	10
 19335  003F3C  EC52  F02C         	call	_dummy_clocks
 19336                           
 19337                           ;diskio.c: 661: command(0X4D,0X00000000,0XFF);
 19338  003F40  0E00               	movlw	0
 19339  003F42  6E1C               	movwf	command@arg,c
 19340  003F44  0E00               	movlw	0
 19341  003F46  6E1D               	movwf	command@arg+1,c
 19342  003F48  0E00               	movlw	0
 19343  003F4A  6E1E               	movwf	command@arg+2,c
 19344  003F4C  0E00               	movlw	0
 19345  003F4E  6E1F               	movwf	command@arg+3,c
 19346  003F50  0EFF               	movlw	255
 19347  003F52  6E20               	movwf	command@CRC,c
 19348  003F54  0E4D               	movlw	77
 19349  003F56  ECCA  F02C         	call	_command
 19350                           
 19351                           ;diskio.c: 662: LATBbits.LATB4 = 0;
 19352  003F5A  988A               	bcf	3978,4,c	;volatile
 19353                           
 19354                           ;diskio.c: 663: proceed();
 19355  003F5C  ECD5  F02D         	call	_proceed	;wreg free
 19356  003F60                     
 19357                           ;diskio.c: 665: LATBbits.LATB4 = 1;
 19358  003F60  888A               	bsf	3978,4,c	;volatile
 19359                           
 19360                           ;diskio.c: 666: buff = response();
 19361  003F62  ECC2  F02D         	call	_response	;wreg free
 19362  003F66  0100               	movlb	0	; () banked
 19363  003F68  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 19364                           
 19365                           ; BSR set to: 0
 19366                           ;diskio.c: 672: }while(buff!=0X00 );
 19367  003F6A  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 19368  003F6C  A4D8               	btfss	status,2,c
 19369  003F6E  D7F8               	goto	l959
 19370                           
 19371                           ; BSR set to: 0
 19372                           ;diskio.c: 674: posicao_cursor_lcd(1,0);
 19373                           
 19374                           ; BSR set to: 0
 19375  003F70  0E00               	movlw	0
 19376  003F72  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 19377  003F74  0E01               	movlw	1
 19378  003F76  ECB8  F029         	call	_posicao_cursor_lcd
 19379                           
 19380                           ;diskio.c: 675: escreve_frase_ram_lcd("OK");
 19381  003F7A  0E73               	movlw	low STR_25
 19382  003F7C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 19383  003F7E  0E62               	movlw	high STR_25
 19384  003F80  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 19385  003F82  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 19386                           
 19387                           ;diskio.c: 676: _delay((unsigned long)((4000)*(48000000/4000.0)));
 19388  003F86  0EF4               	movlw	244
 19389  003F88  6E2B               	movwf	(??_sdc_disk_write+1)& (0+255),c
 19390  003F8A  0E82               	movlw	130
 19391  003F8C  6E2A               	movwf	??_sdc_disk_write& (0+255),c
 19392  003F8E  0E05               	movlw	5
 19393  003F90                     u21937:
 19394  003F90  2EE8               	decfsz	wreg,f,c
 19395  003F92  D7FE               	bra	u21937
 19396  003F94  2E2A               	decfsz	??_sdc_disk_write& (0+255),f,c
 19397  003F96  D7FC               	bra	u21937
 19398  003F98  2E2B               	decfsz	(??_sdc_disk_write+1)& (0+255),f,c
 19399  003F9A  D7FA               	bra	u21937
 19400  003F9C  F000               	nop	
 19401                           
 19402                           ;diskio.c: 677: return res;
 19403  003F9E  0100               	movlb	0	; () banked
 19404  003FA0  5164               	movf	sdc_disk_write@res& (0+255),w,b
 19405  003FA2  0012               	return	
 19406  003FA4                     __end_of_sdc_disk_write:
 19407                           	opt stack 0
 19408                           tosu	equ	0xFFF
 19409                           tosh	equ	0xFFE
 19410                           tosl	equ	0xFFD
 19411                           pclath	equ	0xFFA
 19412                           tblptru	equ	0xFF8
 19413                           tblptrh	equ	0xFF7
 19414                           tblptrl	equ	0xFF6
 19415                           tablat	equ	0xFF5
 19416                           prodh	equ	0xFF4
 19417                           prodl	equ	0xFF3
 19418                           intcon	equ	0xFF2
 19419                           intcon2	equ	0xFF1
 19420                           intcon3	equ	0xFF0
 19421                           indf0	equ	0xFEF
 19422                           postinc0	equ	0xFEE
 19423                           fsr0h	equ	0xFEA
 19424                           fsr0l	equ	0xFE9
 19425                           wreg	equ	0xFE8
 19426                           indf1	equ	0xFE7
 19427                           postinc1	equ	0xFE6
 19428                           postdec1	equ	0xFE5
 19429                           fsr1h	equ	0xFE2
 19430                           fsr1l	equ	0xFE1
 19431                           indf2	equ	0xFDF
 19432                           postinc2	equ	0xFDE
 19433                           postdec2	equ	0xFDD
 19434                           plusw2	equ	0xFDB
 19435                           fsr2h	equ	0xFDA
 19436                           fsr2l	equ	0xFD9
 19437                           status	equ	0xFD8
 19438                           
 19439 ;; *************** function _disk_read *****************
 19440 ;; Defined at:
 19441 ;;		line 148 in file "bibliotecas/diskio.c"
 19442 ;; Parameters:    Size  Location     Type
 19443 ;;  pdrv            1    wreg     unsigned char 
 19444 ;;  buff            2   13[BANK0 ] PTR unsigned char 
 19445 ;;		 -> NULL(0), fs(559), 
 19446 ;;  sector          4   15[BANK0 ] unsigned long 
 19447 ;;  count           1   19[BANK0 ] unsigned char 
 19448 ;; Auto vars:     Size  Location     Type
 19449 ;;  pdrv            1   22[BANK0 ] unsigned char 
 19450 ;;  result          2   23[BANK0 ] int 
 19451 ;;  res             1   25[BANK0 ] enum E25
 19452 ;; Return value:  Size  Location     Type
 19453 ;;                  1    wreg      enum E25
 19454 ;; Registers used:
 19455 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19456 ;; Tracked objects:
 19457 ;;		On entry : 0/0
 19458 ;;		On exit  : 0/0
 19459 ;;		Unchanged: 0/0
 19460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19461 ;;      Params:         0       7       0       0       0       0       0       0       0
 19462 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19463 ;;      Temps:          0       2       0       0       0       0       0       0       0
 19464 ;;      Totals:         0      13       0       0       0       0       0       0       0
 19465 ;;Total ram usage:       13 bytes
 19466 ;; Hardware stack levels used:    1
 19467 ;; Hardware stack levels required when called:    6
 19468 ;; This function calls:
 19469 ;;		_escreve_inteiro_lcd
 19470 ;;		_posicao_cursor_lcd
 19471 ;;		_sdc_disk_read
 19472 ;; This function is called by:
 19473 ;;		_move_window
 19474 ;;		_f_read
 19475 ;; This function uses a non-reentrant model
 19476 ;;
 19477                           
 19478                           	psect	text61
 19479  0048B8                     __ptext61:
 19480                           	opt stack 0
 19481  0048B8                     _disk_read:
 19482                           	opt stack 20
 19483                           
 19484                           ; BSR set to: 0
 19485                           ;incstack = 0
 19486                           ;disk_read@pdrv stored from wreg
 19487  0048B8  0100               	movlb	0	; () banked
 19488  0048BA  6F76               	movwf	disk_read@pdrv& (0+255),b
 19489                           
 19490                           ;diskio.c: 155: DRESULT res;
 19491                           ;diskio.c: 156: int result;
 19492                           ;diskio.c: 158: switch (pdrv) {
 19493  0048BC  D051               	goto	l858
 19494  0048BE                     
 19495                           ;diskio.c: 162: result = sdc_disk_read(buff, sector, count);
 19496  0048BE  C06D  F023         	movff	disk_read@buff,sdc_disk_read@p_buff
 19497  0048C2  C06E  F024         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 19498  0048C6  C06F  F025         	movff	disk_read@sector,sdc_disk_read@sector
 19499  0048CA  C070  F026         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 19500  0048CE  C071  F027         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 19501  0048D2  C072  F028         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 19502  0048D6  C073  F029         	movff	disk_read@count,sdc_disk_read@count
 19503  0048DA  EC3E  F01B         	call	_sdc_disk_read	;wreg free
 19504  0048DE  0100               	movlb	0	; () banked
 19505  0048E0  6F74               	movwf	??_disk_read& (0+255),b
 19506  0048E2  5174               	movf	??_disk_read& (0+255),w,b
 19507  0048E4  6F77               	movwf	disk_read@result& (0+255),b
 19508  0048E6  6B78               	clrf	(disk_read@result+1)& (0+255),b
 19509                           
 19510                           ; BSR set to: 0
 19511                           ;diskio.c: 166: res = result;
 19512  0048E8  C077  F079         	movff	disk_read@result,disk_read@res
 19513                           
 19514                           ; BSR set to: 0
 19515                           ;diskio.c: 168: return res;
 19516  0048EC  5179               	movf	disk_read@res& (0+255),w,b
 19517                           
 19518                           ; BSR set to: 0
 19519  0048EE  0012               	return	
 19520  0048F0                     
 19521                           ; BSR set to: 0
 19522                           ;diskio.c: 173: result = sdc_disk_read(buff, sector, count);
 19523                           
 19524                           ; BSR set to: 0
 19525  0048F0  C06D  F023         	movff	disk_read@buff,sdc_disk_read@p_buff
 19526  0048F4  C06E  F024         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 19527  0048F8  C06F  F025         	movff	disk_read@sector,sdc_disk_read@sector
 19528  0048FC  C070  F026         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 19529  004900  C071  F027         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 19530  004904  C072  F028         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 19531  004908  C073  F029         	movff	disk_read@count,sdc_disk_read@count
 19532  00490C  EC3E  F01B         	call	_sdc_disk_read	;wreg free
 19533  004910  0100               	movlb	0	; () banked
 19534  004912  6F74               	movwf	??_disk_read& (0+255),b
 19535  004914  5174               	movf	??_disk_read& (0+255),w,b
 19536  004916  6F77               	movwf	disk_read@result& (0+255),b
 19537  004918  6B78               	clrf	(disk_read@result+1)& (0+255),b
 19538                           
 19539                           ; BSR set to: 0
 19540                           ;diskio.c: 174: posicao_cursor_lcd(1,0);
 19541  00491A  0E00               	movlw	0
 19542  00491C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 19543  00491E  0E01               	movlw	1
 19544  004920  ECB8  F029         	call	_posicao_cursor_lcd
 19545                           
 19546                           ;diskio.c: 175: escreve_inteiro_lcd(result);
 19547  004924  C077  F02C         	movff	disk_read@result,escreve_inteiro_lcd@valor
 19548  004928  C078  F02D         	movff	disk_read@result+1,escreve_inteiro_lcd@valor+1
 19549  00492C  EC71  F02C         	call	_escreve_inteiro_lcd	;wreg free
 19550                           
 19551                           ;diskio.c: 176: _delay((unsigned long)((2000)*(48000000/4000.0)));
 19552  004930  0E7A               	movlw	122
 19553  004932  0100               	movlb	0	; () banked
 19554  004934  6F75               	movwf	(??_disk_read+1)& (0+255),b
 19555  004936  0EC1               	movlw	193
 19556  004938  6F74               	movwf	??_disk_read& (0+255),b
 19557  00493A  0E81               	movlw	129
 19558  00493C                     u21947:
 19559  00493C  2EE8               	decfsz	wreg,f,c
 19560  00493E  D7FE               	bra	u21947
 19561  004940  2F74               	decfsz	??_disk_read& (0+255),f,b
 19562  004942  D7FC               	bra	u21947
 19563  004944  2F75               	decfsz	(??_disk_read+1)& (0+255),f,b
 19564  004946  D7FA               	bra	u21947
 19565  004948  D000               	nop2	
 19566                           
 19567                           ;diskio.c: 177: res = result;
 19568  00494A  C077  F079         	movff	disk_read@result,disk_read@res
 19569                           
 19570                           ;diskio.c: 179: buff = data_buff;
 19571  00494E  C152  F06D         	movff	_data_buff,disk_read@buff
 19572  004952  C153  F06E         	movff	_data_buff+1,disk_read@buff+1
 19573                           
 19574                           ;diskio.c: 180: return res;
 19575  004956  0100               	movlb	0	; () banked
 19576  004958  5179               	movf	disk_read@res& (0+255),w,b
 19577                           
 19578                           ; BSR set to: 0
 19579  00495A  0012               	return	
 19580  00495C                     
 19581                           ; BSR set to: 0
 19582                           ;diskio.c: 189: return res;
 19583                           
 19584                           ; BSR set to: 0
 19585  00495C  5179               	movf	disk_read@res& (0+255),w,b
 19586                           
 19587                           ; BSR set to: 0
 19588  00495E  0012               	return	
 19589  004960                     l858:
 19590                           
 19591                           ; BSR set to: 0
 19592  004960  0100               	movlb	0	; () banked
 19593  004962  5176               	movf	disk_read@pdrv& (0+255),w,b
 19594                           
 19595                           ; Switch size 1, requested type "space"
 19596                           ; Number of cases is 3, Range of values is 0 to 2
 19597                           ; switch strategies available:
 19598                           ; Name         Instructions Cycles
 19599                           ; simple_byte           10     6 (average)
 19600                           ;	Chosen strategy is simple_byte
 19601  004964  0A00               	xorlw	0	; case 0
 19602  004966  B4D8               	btfsc	status,2,c
 19603  004968  D7AA               	goto	l859
 19604  00496A  0A01               	xorlw	1	; case 1
 19605  00496C  B4D8               	btfsc	status,2,c
 19606  00496E  D7C0               	goto	l861
 19607  004970  0A03               	xorlw	3	; case 2
 19608  004972  B4D8               	btfsc	status,2,c
 19609  004974  D7F3               	goto	l862
 19610                           
 19611                           ; BSR set to: 0
 19612                           ;diskio.c: 192: return RES_PARERR;
 19613                           
 19614                           ; BSR set to: 0
 19615  004976  0E04               	movlw	4
 19616  004978  0012               	return	
 19617  00497A                     __end_of_disk_read:
 19618                           	opt stack 0
 19619                           tosu	equ	0xFFF
 19620                           tosh	equ	0xFFE
 19621                           tosl	equ	0xFFD
 19622                           pclath	equ	0xFFA
 19623                           tblptru	equ	0xFF8
 19624                           tblptrh	equ	0xFF7
 19625                           tblptrl	equ	0xFF6
 19626                           tablat	equ	0xFF5
 19627                           prodh	equ	0xFF4
 19628                           prodl	equ	0xFF3
 19629                           intcon	equ	0xFF2
 19630                           intcon2	equ	0xFF1
 19631                           intcon3	equ	0xFF0
 19632                           indf0	equ	0xFEF
 19633                           postinc0	equ	0xFEE
 19634                           fsr0h	equ	0xFEA
 19635                           fsr0l	equ	0xFE9
 19636                           wreg	equ	0xFE8
 19637                           indf1	equ	0xFE7
 19638                           postinc1	equ	0xFE6
 19639                           postdec1	equ	0xFE5
 19640                           fsr1h	equ	0xFE2
 19641                           fsr1l	equ	0xFE1
 19642                           indf2	equ	0xFDF
 19643                           postinc2	equ	0xFDE
 19644                           postdec2	equ	0xFDD
 19645                           plusw2	equ	0xFDB
 19646                           fsr2h	equ	0xFDA
 19647                           fsr2l	equ	0xFD9
 19648                           status	equ	0xFD8
 19649                           
 19650 ;; *************** function _sdc_disk_read *****************
 19651 ;; Defined at:
 19652 ;;		line 523 in file "bibliotecas/diskio.c"
 19653 ;; Parameters:    Size  Location     Type
 19654 ;;  p_buff          2   34[COMRAM] PTR unsigned char 
 19655 ;;		 -> NULL(0), fs(559), 
 19656 ;;  sector          4   36[COMRAM] unsigned long 
 19657 ;;  count           1   40[COMRAM] unsigned char 
 19658 ;; Auto vars:     Size  Location     Type
 19659 ;;  start_add       4    1[BANK0 ] unsigned long 
 19660 ;;  length          2    7[BANK0 ] int 
 19661 ;;  i               2    0        int 
 19662 ;;  buff            1    6[BANK0 ] unsigned char 
 19663 ;;  res             1    5[BANK0 ] enum E25
 19664 ;;  ptr             1    0[BANK0 ] unsigned char 
 19665 ;; Return value:  Size  Location     Type
 19666 ;;                  1    wreg      enum E25
 19667 ;; Registers used:
 19668 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19669 ;; Tracked objects:
 19670 ;;		On entry : 0/0
 19671 ;;		On exit  : 0/0
 19672 ;;		Unchanged: 0/0
 19673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19674 ;;      Params:         7       0       0       0       0       0       0       0       0
 19675 ;;      Locals:         0       9       0       0       0       0       0       0       0
 19676 ;;      Temps:          4       0       0       0       0       0       0       0       0
 19677 ;;      Totals:        11       9       0       0       0       0       0       0       0
 19678 ;;Total ram usage:       20 bytes
 19679 ;; Hardware stack levels used:    1
 19680 ;; Hardware stack levels required when called:    5
 19681 ;; This function calls:
 19682 ;;		_command
 19683 ;;		_dummy_clocks
 19684 ;;		_escreve_cmd_lcd
 19685 ;;		_escreve_frase_ram_lcd
 19686 ;;		_posicao_cursor_lcd
 19687 ;;		_proceed
 19688 ;;		_response
 19689 ;; This function is called by:
 19690 ;;		_disk_read
 19691 ;; This function uses a non-reentrant model
 19692 ;;
 19693                           
 19694                           	psect	text62
 19695  00367C                     __ptext62:
 19696                           	opt stack 0
 19697  00367C                     _sdc_disk_read:
 19698                           	opt stack 20
 19699                           
 19700                           ;diskio.c: 530: DRESULT res;
 19701                           ;diskio.c: 531: unsigned char ptr=0X00, buff;
 19702                           
 19703                           ; BSR set to: 0
 19704                           ;incstack = 0
 19705  00367C  0E00               	movlw	0
 19706  00367E  0100               	movlb	0	; () banked
 19707  003680  6F60               	movwf	sdc_disk_read@ptr& (0+255),b
 19708                           
 19709                           ; BSR set to: 0
 19710                           ;diskio.c: 532: unsigned long int start_add;
 19711                           ;diskio.c: 533: static unsigned char arr[512];
 19712                           ;diskio.c: 534: int length,i;
 19713                           ;diskio.c: 536: start_add = sector*512;
 19714  003682  C025  F02A         	movff	sdc_disk_read@sector,??_sdc_disk_read
 19715  003686  C026  F02B         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 19716  00368A  C027  F02C         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 19717  00368E  C028  F02D         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 19718  003692  0E09               	movlw	9
 19719  003694                     u15555:
 19720  003694  90D8               	bcf	status,0,c
 19721  003696  362A               	rlcf	??_sdc_disk_read,f,c
 19722  003698  362B               	rlcf	??_sdc_disk_read+1,f,c
 19723  00369A  362C               	rlcf	??_sdc_disk_read+2,f,c
 19724  00369C  362D               	rlcf	??_sdc_disk_read+3,f,c
 19725  00369E  2EE8               	decfsz	wreg,f,c
 19726  0036A0  D7F9               	goto	u15555
 19727  0036A2  C02A  F061         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 19728  0036A6  C02B  F062         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 19729  0036AA  C02C  F063         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 19730  0036AE  C02D  F064         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 19731                           
 19732                           ; BSR set to: 0
 19733                           ;diskio.c: 547: posicao_cursor_lcd(1,0);
 19734  0036B2  0E00               	movlw	0
 19735  0036B4  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 19736  0036B6  0E01               	movlw	1
 19737  0036B8  ECB8  F029         	call	_posicao_cursor_lcd
 19738                           
 19739                           ;diskio.c: 548: escreve_frase_ram_lcd("CMD18");
 19740  0036BC  0E2E               	movlw	low STR_24
 19741  0036BE  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 19742  0036C0  0E62               	movlw	high STR_24
 19743  0036C2  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 19744  0036C4  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 19745                           
 19746                           ;diskio.c: 549: _delay((unsigned long)((1000)*(48000000/4000.0)));
 19747  0036C8  0E3D               	movlw	61
 19748  0036CA  6E2B               	movwf	(??_sdc_disk_read+1)& (0+255),c
 19749  0036CC  0EE1               	movlw	225
 19750  0036CE  6E2A               	movwf	??_sdc_disk_read& (0+255),c
 19751  0036D0  0E40               	movlw	64
 19752  0036D2                     u21957:
 19753  0036D2  2EE8               	decfsz	wreg,f,c
 19754  0036D4  D7FE               	bra	u21957
 19755  0036D6  2E2A               	decfsz	??_sdc_disk_read& (0+255),f,c
 19756  0036D8  D7FC               	bra	u21957
 19757  0036DA  2E2B               	decfsz	(??_sdc_disk_read+1)& (0+255),f,c
 19758  0036DC  D7FA               	bra	u21957
 19759                           
 19760                           ;diskio.c: 550: LATBbits.LATB7 = 1;
 19761  0036DE  8E8A               	bsf	3978,7,c	;volatile
 19762                           
 19763                           ;diskio.c: 551: LATBbits.LATB4 = 0;
 19764  0036E0  988A               	bcf	3978,4,c	;volatile
 19765                           
 19766                           ;diskio.c: 552: dummy_clocks(10);
 19767  0036E2  0E0A               	movlw	10
 19768  0036E4  EC52  F02C         	call	_dummy_clocks
 19769                           
 19770                           ;diskio.c: 553: command(0X52,start_add,0X00);
 19771  0036E8  C061  F01C         	movff	sdc_disk_read@start_add,command@arg
 19772  0036EC  C062  F01D         	movff	sdc_disk_read@start_add+1,command@arg+1
 19773  0036F0  C063  F01E         	movff	sdc_disk_read@start_add+2,command@arg+2
 19774  0036F4  C064  F01F         	movff	sdc_disk_read@start_add+3,command@arg+3
 19775  0036F8  0E00               	movlw	0
 19776  0036FA  6E20               	movwf	command@CRC,c
 19777  0036FC  0E52               	movlw	82
 19778  0036FE  ECCA  F02C         	call	_command
 19779                           
 19780                           ;diskio.c: 554: proceed();
 19781  003702  ECD5  F02D         	call	_proceed	;wreg free
 19782  003706                     
 19783                           ;diskio.c: 556: buff = response();
 19784  003706  ECC2  F02D         	call	_response	;wreg free
 19785  00370A  0100               	movlb	0	; () banked
 19786  00370C  6F66               	movwf	sdc_disk_read@buff& (0+255),b
 19787                           
 19788                           ; BSR set to: 0
 19789                           ;diskio.c: 557: }while(buff!=0X00);
 19790  00370E  5166               	movf	sdc_disk_read@buff& (0+255),w,b
 19791  003710  A4D8               	btfss	status,2,c
 19792  003712  D7F9               	goto	l940
 19793                           
 19794                           ; BSR set to: 0
 19795                           ;diskio.c: 558: proceed();
 19796                           
 19797                           ; BSR set to: 0
 19798  003714  ECD5  F02D         	call	_proceed	;wreg free
 19799  003718                     l942:
 19800                           
 19801                           ;diskio.c: 560: buff = response();
 19802  003718  ECC2  F02D         	call	_response	;wreg free
 19803  00371C  0100               	movlb	0	; () banked
 19804  00371E  6F66               	movwf	sdc_disk_read@buff& (0+255),b
 19805                           
 19806                           ; BSR set to: 0
 19807                           ;diskio.c: 561: }while(buff!=0xFE);
 19808  003720  0EFE               	movlw	254
 19809  003722  1966               	xorwf	sdc_disk_read@buff& (0+255),w,b
 19810  003724  A4D8               	btfss	status,2,c
 19811  003726  D7F8               	goto	l942
 19812                           
 19813                           ; BSR set to: 0
 19814                           ;diskio.c: 563: length = 0;
 19815                           
 19816                           ; BSR set to: 0
 19817  003728  0E00               	movlw	0
 19818  00372A  6F68               	movwf	(sdc_disk_read@length+1)& (0+255),b
 19819  00372C  0E00               	movlw	0
 19820  00372E  6F67               	movwf	sdc_disk_read@length& (0+255),b
 19821                           
 19822                           ;diskio.c: 564: while ( length < 512 )
 19823  003730  D02C               	goto	l944
 19824  003732                     
 19825                           ; BSR set to: 0
 19826                           ;diskio.c: 565: {
 19827                           ;diskio.c: 566: p_buff[length] = response();
 19828                           
 19829                           ; BSR set to: 0
 19830  003732  5167               	movf	sdc_disk_read@length& (0+255),w,b
 19831  003734  2423               	addwf	sdc_disk_read@p_buff,w,c
 19832  003736  6ED9               	movwf	fsr2l,c
 19833  003738  5168               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 19834  00373A  2024               	addwfc	sdc_disk_read@p_buff+1,w,c
 19835  00373C  6EDA               	movwf	fsr2h,c
 19836  00373E  ECC2  F02D         	call	_response	;wreg free
 19837  003742  6EDF               	movwf	indf2,c
 19838                           
 19839                           ;diskio.c: 567: posicao_cursor_lcd(1,0);
 19840  003744  0E00               	movlw	0
 19841  003746  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 19842  003748  0E01               	movlw	1
 19843  00374A  ECB8  F029         	call	_posicao_cursor_lcd
 19844                           
 19845                           ;diskio.c: 568: escreve_frase_ram_lcd(p_buff[length]);
 19846  00374E  0100               	movlb	0	; () banked
 19847  003750  5167               	movf	sdc_disk_read@length& (0+255),w,b
 19848  003752  2423               	addwf	sdc_disk_read@p_buff,w,c
 19849  003754  6ED9               	movwf	fsr2l,c
 19850  003756  5168               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 19851  003758  2024               	addwfc	sdc_disk_read@p_buff+1,w,c
 19852  00375A  6EDA               	movwf	fsr2h,c
 19853  00375C  50DF               	movf	indf2,w,c
 19854  00375E  6E2A               	movwf	??_sdc_disk_read& (0+255),c
 19855  003760  6A2B               	clrf	(??_sdc_disk_read+1)& (0+255),c
 19856  003762  C02A  F01D         	movff	??_sdc_disk_read,escreve_frase_ram_lcd@buffer
 19857  003766  C02B  F01E         	movff	??_sdc_disk_read+1,escreve_frase_ram_lcd@buffer+1
 19858  00376A  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 19859                           
 19860                           ;diskio.c: 569: _delay((unsigned long)((50)*(48000000/4000.0)));
 19861  00376E  0E04               	movlw	4
 19862  003770  6E2B               	movwf	(??_sdc_disk_read+1)& (0+255),c
 19863  003772  0E0C               	movlw	12
 19864  003774  6E2A               	movwf	??_sdc_disk_read& (0+255),c
 19865  003776  0E34               	movlw	52
 19866  003778                     u21967:
 19867  003778  2EE8               	decfsz	wreg,f,c
 19868  00377A  D7FE               	bra	u21967
 19869  00377C  2E2A               	decfsz	??_sdc_disk_read& (0+255),f,c
 19870  00377E  D7FC               	bra	u21967
 19871  003780  2E2B               	decfsz	(??_sdc_disk_read+1)& (0+255),f,c
 19872  003782  D7FA               	bra	u21967
 19873                           
 19874                           ;diskio.c: 570: length++;
 19875  003784  0100               	movlb	0	; () banked
 19876  003786  4B67               	infsnz	sdc_disk_read@length& (0+255),f,b
 19877  003788  2B68               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 19878  00378A                     l944:
 19879                           
 19880                           ; BSR set to: 0
 19881                           
 19882                           ; BSR set to: 0
 19883  00378A  BF68               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 19884  00378C  D7D2               	goto	l945
 19885  00378E  0E02               	movlw	2
 19886  003790  5D68               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 19887  003792  A0D8               	btfss	status,0,c
 19888  003794  D7CE               	goto	l945
 19889                           
 19890                           ; BSR set to: 0
 19891                           ;diskio.c: 571: }
 19892                           ;diskio.c: 574: _delay((unsigned long)((1000)*(48000000/4000.0)));
 19893                           
 19894                           ; BSR set to: 0
 19895  003796  0E3D               	movlw	61
 19896  003798  6E2B               	movwf	(??_sdc_disk_read+1)& (0+255),c
 19897  00379A  0EE1               	movlw	225
 19898  00379C  6E2A               	movwf	??_sdc_disk_read& (0+255),c
 19899  00379E  0E40               	movlw	64
 19900  0037A0                     u21977:
 19901  0037A0  2EE8               	decfsz	wreg,f,c
 19902  0037A2  D7FE               	bra	u21977
 19903  0037A4  2E2A               	decfsz	??_sdc_disk_read& (0+255),f,c
 19904  0037A6  D7FC               	bra	u21977
 19905  0037A8  2E2B               	decfsz	(??_sdc_disk_read+1)& (0+255),f,c
 19906  0037AA  D7FA               	bra	u21977
 19907                           
 19908                           ;diskio.c: 575: LATBbits.LATB7 = 1;
 19909  0037AC  8E8A               	bsf	3978,7,c	;volatile
 19910                           
 19911                           ;diskio.c: 576: length = 0;
 19912  0037AE  0E00               	movlw	0
 19913  0037B0  0100               	movlb	0	; () banked
 19914  0037B2  6F68               	movwf	(sdc_disk_read@length+1)& (0+255),b
 19915  0037B4  0E00               	movlw	0
 19916  0037B6  6F67               	movwf	sdc_disk_read@length& (0+255),b
 19917                           
 19918                           ; BSR set to: 0
 19919                           ;diskio.c: 579: LATBbits.LATB4 = 0;
 19920  0037B8  988A               	bcf	3978,4,c	;volatile
 19921                           
 19922                           ; BSR set to: 0
 19923                           ;diskio.c: 580: dummy_clocks(10);
 19924  0037BA  0E0A               	movlw	10
 19925  0037BC  EC52  F02C         	call	_dummy_clocks
 19926                           
 19927                           ;diskio.c: 581: command(0X4C,0X00000000,0X00);
 19928  0037C0  0E00               	movlw	0
 19929  0037C2  6E1C               	movwf	command@arg,c
 19930  0037C4  0E00               	movlw	0
 19931  0037C6  6E1D               	movwf	command@arg+1,c
 19932  0037C8  0E00               	movlw	0
 19933  0037CA  6E1E               	movwf	command@arg+2,c
 19934  0037CC  0E00               	movlw	0
 19935  0037CE  6E1F               	movwf	command@arg+3,c
 19936  0037D0  0E00               	movlw	0
 19937  0037D2  6E20               	movwf	command@CRC,c
 19938  0037D4  0E4C               	movlw	76
 19939  0037D6  ECCA  F02C         	call	_command
 19940                           
 19941                           ;diskio.c: 582: proceed();
 19942  0037DA  ECD5  F02D         	call	_proceed	;wreg free
 19943  0037DE                     
 19944                           ;diskio.c: 584: buff = response();
 19945  0037DE  ECC2  F02D         	call	_response	;wreg free
 19946  0037E2  0100               	movlb	0	; () banked
 19947  0037E4  6F66               	movwf	sdc_disk_read@buff& (0+255),b
 19948                           
 19949                           ; BSR set to: 0
 19950                           ;diskio.c: 585: }while(buff!=0xFF);
 19951  0037E6  2966               	incf	sdc_disk_read@buff& (0+255),w,b
 19952  0037E8  A4D8               	btfss	status,2,c
 19953  0037EA  D7F9               	goto	l947
 19954                           
 19955                           ; BSR set to: 0
 19956                           ;diskio.c: 587: length = 0;
 19957                           
 19958                           ; BSR set to: 0
 19959  0037EC  0E00               	movlw	0
 19960  0037EE  6F68               	movwf	(sdc_disk_read@length+1)& (0+255),b
 19961  0037F0  0E00               	movlw	0
 19962  0037F2  6F67               	movwf	sdc_disk_read@length& (0+255),b
 19963                           
 19964                           ;diskio.c: 588: while(arr[length]!='\0')
 19965  0037F4  D011               	goto	l949
 19966  0037F6                     
 19967                           ; BSR set to: 0
 19968                           ;diskio.c: 589: {
 19969                           ;diskio.c: 590: escreve_cmd_lcd(0b00000001);
 19970                           
 19971                           ; BSR set to: 0
 19972  0037F6  0E01               	movlw	1
 19973  0037F8  ECC3  F027         	call	_escreve_cmd_lcd
 19974                           
 19975                           ;diskio.c: 591: posicao_cursor_lcd(2,14);
 19976  0037FC  0E0E               	movlw	14
 19977  0037FE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 19978  003800  0E02               	movlw	2
 19979  003802  ECB8  F029         	call	_posicao_cursor_lcd
 19980                           
 19981                           ;diskio.c: 592: escreve_frase_ram_lcd(arr);
 19982  003806  0E54               	movlw	low sdc_disk_read@arr
 19983  003808  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 19984  00380A  0E05               	movlw	high sdc_disk_read@arr
 19985  00380C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 19986  00380E  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 19987                           
 19988                           ;diskio.c: 593: length++;
 19989  003812  0100               	movlb	0	; () banked
 19990  003814  4B67               	infsnz	sdc_disk_read@length& (0+255),f,b
 19991  003816  2B68               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 19992  003818                     l949:
 19993                           
 19994                           ; BSR set to: 0
 19995                           
 19996                           ; BSR set to: 0
 19997  003818  0E54               	movlw	low sdc_disk_read@arr
 19998  00381A  2567               	addwf	sdc_disk_read@length& (0+255),w,b
 19999  00381C  6ED9               	movwf	fsr2l,c
 20000  00381E  0E05               	movlw	high sdc_disk_read@arr
 20001  003820  2168               	addwfc	(sdc_disk_read@length+1)& (0+255),w,b
 20002  003822  6EDA               	movwf	fsr2h,c
 20003  003824  50DF               	movf	indf2,w,c
 20004  003826  A4D8               	btfss	status,2,c
 20005  003828  D7E6               	goto	l950
 20006                           
 20007                           ; BSR set to: 0
 20008                           ;diskio.c: 594: }
 20009                           ;diskio.c: 596: return res;
 20010                           
 20011                           ; BSR set to: 0
 20012  00382A  5165               	movf	sdc_disk_read@res& (0+255),w,b
 20013  00382C  0012               	return	
 20014  00382E                     __end_of_sdc_disk_read:
 20015                           	opt stack 0
 20016                           tosu	equ	0xFFF
 20017                           tosh	equ	0xFFE
 20018                           tosl	equ	0xFFD
 20019                           pclath	equ	0xFFA
 20020                           tblptru	equ	0xFF8
 20021                           tblptrh	equ	0xFF7
 20022                           tblptrl	equ	0xFF6
 20023                           tablat	equ	0xFF5
 20024                           prodh	equ	0xFF4
 20025                           prodl	equ	0xFF3
 20026                           intcon	equ	0xFF2
 20027                           intcon2	equ	0xFF1
 20028                           intcon3	equ	0xFF0
 20029                           indf0	equ	0xFEF
 20030                           postinc0	equ	0xFEE
 20031                           fsr0h	equ	0xFEA
 20032                           fsr0l	equ	0xFE9
 20033                           wreg	equ	0xFE8
 20034                           indf1	equ	0xFE7
 20035                           postinc1	equ	0xFE6
 20036                           postdec1	equ	0xFE5
 20037                           fsr1h	equ	0xFE2
 20038                           fsr1l	equ	0xFE1
 20039                           indf2	equ	0xFDF
 20040                           postinc2	equ	0xFDE
 20041                           postdec2	equ	0xFDD
 20042                           plusw2	equ	0xFDB
 20043                           fsr2h	equ	0xFDA
 20044                           fsr2l	equ	0xFD9
 20045                           status	equ	0xFD8
 20046                           
 20047 ;; *************** function _response *****************
 20048 ;; Defined at:
 20049 ;;		line 60 in file "bibliotecas/SDCard.c"
 20050 ;; Parameters:    Size  Location     Type
 20051 ;;		None
 20052 ;; Auto vars:     Size  Location     Type
 20053 ;;  buff            1   28[COMRAM] unsigned char 
 20054 ;; Return value:  Size  Location     Type
 20055 ;;                  1    wreg      unsigned char 
 20056 ;; Registers used:
 20057 ;;		wreg, status,2, status,0, cstack
 20058 ;; Tracked objects:
 20059 ;;		On entry : 0/0
 20060 ;;		On exit  : 0/0
 20061 ;;		Unchanged: 0/0
 20062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20063 ;;      Params:         0       0       0       0       0       0       0       0       0
 20064 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20065 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20066 ;;      Totals:         1       0       0       0       0       0       0       0       0
 20067 ;;Total ram usage:        1 bytes
 20068 ;; Hardware stack levels used:    1
 20069 ;; Hardware stack levels required when called:    3
 20070 ;; This function calls:
 20071 ;;		_recebe_dado_SPI
 20072 ;; This function is called by:
 20073 ;;		_sdc_reset
 20074 ;;		_sdc_disk_initialize
 20075 ;;		_sdc_disk_read
 20076 ;;		_sdc_disk_write
 20077 ;; This function uses a non-reentrant model
 20078 ;;
 20079                           
 20080                           	psect	text63
 20081  005B84                     __ptext63:
 20082                           	opt stack 0
 20083  005B84                     _response:
 20084                           	opt stack 21
 20085                           
 20086                           ;SDCard.c: 62: unsigned char buff;
 20087                           ;SDCard.c: 63: LATBbits.LATB4 = 0;
 20088                           
 20089                           ; BSR set to: 0
 20090                           ;incstack = 0
 20091  005B84  988A               	bcf	3978,4,c	;volatile
 20092                           
 20093                           ;SDCard.c: 64: buff= recebe_dado_SPI();
 20094  005B86  EC90  F02A         	call	_recebe_dado_SPI	;wreg free
 20095  005B8A  6E1D               	movwf	response@buff,c
 20096                           
 20097                           ;SDCard.c: 65: LATBbits.LATB4 = 1;
 20098  005B8C  888A               	bsf	3978,4,c	;volatile
 20099                           
 20100                           ;SDCard.c: 66: return buff;
 20101  005B8E  501D               	movf	response@buff,w,c
 20102  005B90  0012               	return	
 20103  005B92                     __end_of_response:
 20104                           	opt stack 0
 20105                           tosu	equ	0xFFF
 20106                           tosh	equ	0xFFE
 20107                           tosl	equ	0xFFD
 20108                           pclath	equ	0xFFA
 20109                           tblptru	equ	0xFF8
 20110                           tblptrh	equ	0xFF7
 20111                           tblptrl	equ	0xFF6
 20112                           tablat	equ	0xFF5
 20113                           prodh	equ	0xFF4
 20114                           prodl	equ	0xFF3
 20115                           intcon	equ	0xFF2
 20116                           intcon2	equ	0xFF1
 20117                           intcon3	equ	0xFF0
 20118                           indf0	equ	0xFEF
 20119                           postinc0	equ	0xFEE
 20120                           fsr0h	equ	0xFEA
 20121                           fsr0l	equ	0xFE9
 20122                           wreg	equ	0xFE8
 20123                           indf1	equ	0xFE7
 20124                           postinc1	equ	0xFE6
 20125                           postdec1	equ	0xFE5
 20126                           fsr1h	equ	0xFE2
 20127                           fsr1l	equ	0xFE1
 20128                           indf2	equ	0xFDF
 20129                           postinc2	equ	0xFDE
 20130                           postdec2	equ	0xFDD
 20131                           plusw2	equ	0xFDB
 20132                           fsr2h	equ	0xFDA
 20133                           fsr2l	equ	0xFD9
 20134                           status	equ	0xFD8
 20135                           
 20136 ;; *************** function _recebe_dado_SPI *****************
 20137 ;; Defined at:
 20138 ;;		line 143 in file "bibliotecas/SHRC.c"
 20139 ;; Parameters:    Size  Location     Type
 20140 ;;		None
 20141 ;; Auto vars:     Size  Location     Type
 20142 ;;  contador        1   27[COMRAM] unsigned char 
 20143 ;; Return value:  Size  Location     Type
 20144 ;;                  1    wreg      unsigned char 
 20145 ;; Registers used:
 20146 ;;		wreg, status,2, status,0
 20147 ;; Tracked objects:
 20148 ;;		On entry : 0/0
 20149 ;;		On exit  : 0/0
 20150 ;;		Unchanged: 0/0
 20151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20152 ;;      Params:         0       0       0       0       0       0       0       0       0
 20153 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20154 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20155 ;;      Totals:         3       0       0       0       0       0       0       0       0
 20156 ;;Total ram usage:        3 bytes
 20157 ;; Hardware stack levels used:    1
 20158 ;; Hardware stack levels required when called:    2
 20159 ;; This function calls:
 20160 ;;		Nothing
 20161 ;; This function is called by:
 20162 ;;		_response
 20163 ;; This function uses a non-reentrant model
 20164 ;;
 20165                           
 20166                           	psect	text64
 20167  005520                     __ptext64:
 20168                           	opt stack 0
 20169  005520                     _recebe_dado_SPI:
 20170                           	opt stack 21
 20171                           
 20172                           ;SHRC.c: 145: dado = 0;
 20173                           
 20174                           ;incstack = 0
 20175  005520  0E00               	movlw	0
 20176  005522  6E3A               	movwf	_dado,c
 20177                           
 20178                           ;SHRC.c: 146: unsigned char contador=0;
 20179  005524  0E00               	movlw	0
 20180  005526  6E1C               	movwf	recebe_dado_SPI@contador,c
 20181                           
 20182                           ;SHRC.c: 148: (INTCONbits.GIE = 0);
 20183  005528  9EF2               	bcf	intcon,7,c	;volatile
 20184                           
 20185                           ;SHRC.c: 149: LATBbits.LATB4 = 0;
 20186  00552A  988A               	bcf	3978,4,c	;volatile
 20187                           
 20188                           ;SHRC.c: 150: while(contador<=7)
 20189  00552C  D022               	goto	l349
 20190  00552E                     
 20191                           ;SHRC.c: 151: {
 20192                           ;SHRC.c: 152: dado |= (PORTBbits.RB5 << (7-contador));
 20193  00552E  501C               	movf	recebe_dado_SPI@contador,w,c
 20194  005530  0800               	sublw	0
 20195  005532  6E1A               	movwf	??_recebe_dado_SPI& (0+255),c
 20196  005534  0E07               	movlw	7
 20197  005536  261A               	addwf	??_recebe_dado_SPI,f,c
 20198  005538  AA81               	btfss	3969,5,c	;volatile
 20199  00553A  D003               	goto	u15020
 20200  00553C  6A1B               	clrf	(??_recebe_dado_SPI+1)& (0+255),c
 20201  00553E  2A1B               	incf	(??_recebe_dado_SPI+1)& (0+255),f,c
 20202  005540  D001               	goto	u15028
 20203  005542                     u15020:
 20204  005542  6A1B               	clrf	(??_recebe_dado_SPI+1)& (0+255),c
 20205  005544                     u15028:
 20206  005544  2A1A               	incf	??_recebe_dado_SPI,f,c
 20207  005546  D002               	goto	u15034
 20208  005548                     u15035:
 20209  005548  90D8               	bcf	status,0,c
 20210  00554A  361B               	rlcf	??_recebe_dado_SPI+1,f,c
 20211  00554C                     u15034:
 20212  00554C  2E1A               	decfsz	??_recebe_dado_SPI,f,c
 20213  00554E  D7FC               	goto	u15035
 20214  005550  501B               	movf	??_recebe_dado_SPI+1,w,c
 20215  005552  123A               	iorwf	_dado,f,c
 20216                           
 20217                           ;SHRC.c: 154: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 20218  005554  0E0A               	movlw	10
 20219  005556                     u21987:
 20220  005556  2EE8               	decfsz	wreg,f,c
 20221  005558  D7FE               	bra	u21987
 20222                           
 20223                           ;SHRC.c: 155: LATBbits.LATB6 = 1;
 20224  00555A  8C8A               	bsf	3978,6,c	;volatile
 20225                           
 20226                           ;SHRC.c: 156: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 20227  00555C  0E0A               	movlw	10
 20228  00555E                     u21997:
 20229  00555E  2EE8               	decfsz	wreg,f,c
 20230  005560  D7FE               	bra	u21997
 20231                           
 20232                           ;SHRC.c: 157: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 20233  005562  0E0A               	movlw	10
 20234  005564                     u22007:
 20235  005564  2EE8               	decfsz	wreg,f,c
 20236  005566  D7FE               	bra	u22007
 20237                           
 20238                           ;SHRC.c: 158: LATBbits.LATB6 = 0;
 20239  005568  9C8A               	bcf	3978,6,c	;volatile
 20240                           
 20241                           ;SHRC.c: 159: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 20242  00556A  0E0A               	movlw	10
 20243  00556C                     u22017:
 20244  00556C  2EE8               	decfsz	wreg,f,c
 20245  00556E  D7FE               	bra	u22017
 20246                           
 20247                           ;SHRC.c: 160: contador++;
 20248  005570  2A1C               	incf	recebe_dado_SPI@contador,f,c
 20249  005572                     l349:
 20250  005572  0E07               	movlw	7
 20251  005574  641C               	cpfsgt	recebe_dado_SPI@contador,c
 20252  005576  D7DB               	goto	l350
 20253                           
 20254                           ;SHRC.c: 161: }
 20255                           ;SHRC.c: 162: (INTCONbits.GIE = 1);
 20256  005578  8EF2               	bsf	intcon,7,c	;volatile
 20257                           
 20258                           ;SHRC.c: 163: return dado;
 20259  00557A  503A               	movf	_dado,w,c
 20260  00557C  0012               	return	
 20261  00557E                     __end_of_recebe_dado_SPI:
 20262                           	opt stack 0
 20263                           tosu	equ	0xFFF
 20264                           tosh	equ	0xFFE
 20265                           tosl	equ	0xFFD
 20266                           pclath	equ	0xFFA
 20267                           tblptru	equ	0xFF8
 20268                           tblptrh	equ	0xFF7
 20269                           tblptrl	equ	0xFF6
 20270                           tablat	equ	0xFF5
 20271                           prodh	equ	0xFF4
 20272                           prodl	equ	0xFF3
 20273                           intcon	equ	0xFF2
 20274                           intcon2	equ	0xFF1
 20275                           intcon3	equ	0xFF0
 20276                           indf0	equ	0xFEF
 20277                           postinc0	equ	0xFEE
 20278                           fsr0h	equ	0xFEA
 20279                           fsr0l	equ	0xFE9
 20280                           wreg	equ	0xFE8
 20281                           indf1	equ	0xFE7
 20282                           postinc1	equ	0xFE6
 20283                           postdec1	equ	0xFE5
 20284                           fsr1h	equ	0xFE2
 20285                           fsr1l	equ	0xFE1
 20286                           indf2	equ	0xFDF
 20287                           postinc2	equ	0xFDE
 20288                           postdec2	equ	0xFDD
 20289                           plusw2	equ	0xFDB
 20290                           fsr2h	equ	0xFDA
 20291                           fsr2l	equ	0xFD9
 20292                           status	equ	0xFD8
 20293                           
 20294 ;; *************** function _proceed *****************
 20295 ;; Defined at:
 20296 ;;		line 98 in file "bibliotecas/SDCard.c"
 20297 ;; Parameters:    Size  Location     Type
 20298 ;;		None
 20299 ;; Auto vars:     Size  Location     Type
 20300 ;;		None
 20301 ;; Return value:  Size  Location     Type
 20302 ;;                  1    wreg      void 
 20303 ;; Registers used:
 20304 ;;		wreg, status,2, status,0, cstack
 20305 ;; Tracked objects:
 20306 ;;		On entry : 0/0
 20307 ;;		On exit  : 0/0
 20308 ;;		Unchanged: 0/0
 20309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20310 ;;      Params:         0       0       0       0       0       0       0       0       0
 20311 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20312 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20313 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20314 ;;Total ram usage:        0 bytes
 20315 ;; Hardware stack levels used:    1
 20316 ;; Hardware stack levels required when called:    3
 20317 ;; This function calls:
 20318 ;;		_escreve_dado_SPI
 20319 ;; This function is called by:
 20320 ;;		_SDCard
 20321 ;;		_sdc_reset
 20322 ;;		_sdc_disk_initialize
 20323 ;;		_sdc_disk_read
 20324 ;;		_sdc_disk_write
 20325 ;; This function uses a non-reentrant model
 20326 ;;
 20327                           
 20328                           	psect	text65
 20329  005BAA                     __ptext65:
 20330                           	opt stack 0
 20331  005BAA                     _proceed:
 20332                           	opt stack 25
 20333                           
 20334                           ;SDCard.c: 100: LATBbits.LATB4 = 0;
 20335                           
 20336                           ;incstack = 0
 20337  005BAA  988A               	bcf	3978,4,c	;volatile
 20338                           
 20339                           ;SDCard.c: 101: escreve_dado_SPI(0xFF);
 20340  005BAC  0EFF               	movlw	255
 20341  005BAE  ECAC  F02B         	call	_escreve_dado_SPI
 20342                           
 20343                           ;SDCard.c: 102: LATBbits.LATB4 = 1;
 20344  005BB2  888A               	bsf	3978,4,c	;volatile
 20345  005BB4  0012               	return		;funcret
 20346  005BB6                     __end_of_proceed:
 20347                           	opt stack 0
 20348                           tosu	equ	0xFFF
 20349                           tosh	equ	0xFFE
 20350                           tosl	equ	0xFFD
 20351                           pclath	equ	0xFFA
 20352                           tblptru	equ	0xFF8
 20353                           tblptrh	equ	0xFF7
 20354                           tblptrl	equ	0xFF6
 20355                           tablat	equ	0xFF5
 20356                           prodh	equ	0xFF4
 20357                           prodl	equ	0xFF3
 20358                           intcon	equ	0xFF2
 20359                           intcon2	equ	0xFF1
 20360                           intcon3	equ	0xFF0
 20361                           indf0	equ	0xFEF
 20362                           postinc0	equ	0xFEE
 20363                           fsr0h	equ	0xFEA
 20364                           fsr0l	equ	0xFE9
 20365                           wreg	equ	0xFE8
 20366                           indf1	equ	0xFE7
 20367                           postinc1	equ	0xFE6
 20368                           postdec1	equ	0xFE5
 20369                           fsr1h	equ	0xFE2
 20370                           fsr1l	equ	0xFE1
 20371                           indf2	equ	0xFDF
 20372                           postinc2	equ	0xFDE
 20373                           postdec2	equ	0xFDD
 20374                           plusw2	equ	0xFDB
 20375                           fsr2h	equ	0xFDA
 20376                           fsr2l	equ	0xFD9
 20377                           status	equ	0xFD8
 20378                           
 20379 ;; *************** function _posicao_cursor_lcd *****************
 20380 ;; Defined at:
 20381 ;;		line 271 in file "bibliotecas/display_lcd.c"
 20382 ;; Parameters:    Size  Location     Type
 20383 ;;  linha           1    wreg     unsigned char 
 20384 ;;  coluna          1   28[COMRAM] unsigned char 
 20385 ;; Auto vars:     Size  Location     Type
 20386 ;;  linha           1   29[COMRAM] unsigned char 
 20387 ;;  endereco        1   30[COMRAM] unsigned char 
 20388 ;; Return value:  Size  Location     Type
 20389 ;;                  1    wreg      void 
 20390 ;; Registers used:
 20391 ;;		wreg, status,2, status,0, cstack
 20392 ;; Tracked objects:
 20393 ;;		On entry : 0/0
 20394 ;;		On exit  : 0/0
 20395 ;;		Unchanged: 0/0
 20396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20397 ;;      Params:         1       0       0       0       0       0       0       0       0
 20398 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20399 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20400 ;;      Totals:         3       0       0       0       0       0       0       0       0
 20401 ;;Total ram usage:        3 bytes
 20402 ;; Hardware stack levels used:    1
 20403 ;; Hardware stack levels required when called:    4
 20404 ;; This function calls:
 20405 ;;		_endereco_cursor_lcd
 20406 ;; This function is called by:
 20407 ;;		_mensagem_inicial
 20408 ;;		_SDCard
 20409 ;;		_disk_read
 20410 ;;		_sdc_reset
 20411 ;;		_sdc_disk_initialize
 20412 ;;		_sdc_disk_read
 20413 ;;		_sdc_disk_write
 20414 ;;		_find_volume
 20415 ;;		_gps
 20416 ;;		_inicializa_SPI
 20417 ;;		_ReadSPI_
 20418 ;;		_leitura_chave
 20419 ;; This function uses a non-reentrant model
 20420 ;;
 20421                           
 20422                           	psect	text66
 20423  005370                     __ptext66:
 20424                           	opt stack 0
 20425  005370                     _posicao_cursor_lcd:
 20426                           	opt stack 25
 20427                           
 20428                           ;incstack = 0
 20429                           ;posicao_cursor_lcd@linha stored from wreg
 20430  005370  6E1E               	movwf	posicao_cursor_lcd@linha,c
 20431                           
 20432                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 20433  005372  0E00               	movlw	0
 20434  005374  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20435                           
 20436                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 20437  005376  0E11               	movlw	17
 20438  005378  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 20439  00537A  D02F               	goto	l519
 20440  00537C  D01E               	goto	l520
 20441  00537E                     l521:
 20442                           
 20443                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 20444  00537E  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 20445                           
 20446                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 20447  005382  501F               	movf	posicao_cursor_lcd@endereco,w,c
 20448  005384  EC27  F02A         	call	_endereco_cursor_lcd
 20449                           
 20450                           ;display_lcd.c: 284: break;
 20451  005388  D026               	goto	l522
 20452  00538A                     
 20453                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 20454  00538A  501D               	movf	posicao_cursor_lcd@coluna,w,c
 20455  00538C  0F40               	addlw	64
 20456  00538E  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20457                           
 20458                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 20459  005390  501F               	movf	posicao_cursor_lcd@endereco,w,c
 20460  005392  EC27  F02A         	call	_endereco_cursor_lcd
 20461                           
 20462                           ;display_lcd.c: 289: break;
 20463  005396  D01F               	goto	l522
 20464  005398                     
 20465                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 20466  005398  501D               	movf	posicao_cursor_lcd@coluna,w,c
 20467  00539A  0F14               	addlw	20
 20468  00539C  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20469                           
 20470                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 20471  00539E  501F               	movf	posicao_cursor_lcd@endereco,w,c
 20472  0053A0  EC27  F02A         	call	_endereco_cursor_lcd
 20473                           
 20474                           ;display_lcd.c: 294: break;
 20475  0053A4  D018               	goto	l522
 20476  0053A6                     
 20477                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 20478  0053A6  501D               	movf	posicao_cursor_lcd@coluna,w,c
 20479  0053A8  0F54               	addlw	84
 20480  0053AA  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20481                           
 20482                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 20483  0053AC  501F               	movf	posicao_cursor_lcd@endereco,w,c
 20484  0053AE  EC27  F02A         	call	_endereco_cursor_lcd
 20485                           
 20486                           ;display_lcd.c: 299: break;
 20487  0053B2  D011               	goto	l522
 20488  0053B4                     
 20489                           ;display_lcd.c: 302: endereco = 0x00U;
 20490  0053B4  0E00               	movlw	0
 20491  0053B6  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20492                           
 20493                           ;display_lcd.c: 304: }
 20494                           
 20495                           ;display_lcd.c: 303: break;
 20496  0053B8  D00E               	goto	l522
 20497  0053BA                     l520:
 20498  0053BA  501E               	movf	posicao_cursor_lcd@linha,w,c
 20499                           
 20500                           ; Switch size 1, requested type "space"
 20501                           ; Number of cases is 4, Range of values is 1 to 4
 20502                           ; switch strategies available:
 20503                           ; Name         Instructions Cycles
 20504                           ; simple_byte           13     7 (average)
 20505                           ;	Chosen strategy is simple_byte
 20506  0053BC  0A01               	xorlw	1	; case 1
 20507  0053BE  B4D8               	btfsc	status,2,c
 20508  0053C0  D7DE               	goto	l521
 20509  0053C2  0A03               	xorlw	3	; case 2
 20510  0053C4  B4D8               	btfsc	status,2,c
 20511  0053C6  D7E1               	goto	l523
 20512  0053C8  0A01               	xorlw	1	; case 3
 20513  0053CA  B4D8               	btfsc	status,2,c
 20514  0053CC  D7E5               	goto	l524
 20515  0053CE  0A07               	xorlw	7	; case 4
 20516  0053D0  B4D8               	btfsc	status,2,c
 20517  0053D2  D7E9               	goto	l525
 20518  0053D4  D7EF               	goto	l526
 20519  0053D6                     l522:
 20520                           
 20521                           ;display_lcd.c: 306: coluna++;
 20522  0053D6  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 20523                           
 20524                           ;display_lcd.c: 307: }
 20525  0053D8  0012               	return	
 20526  0053DA                     l519:
 20527                           
 20528                           ;display_lcd.c: 308: else
 20529                           ;display_lcd.c: 309: {
 20530                           ;display_lcd.c: 310: endereco = 0x00U;
 20531  0053DA  0E00               	movlw	0
 20532  0053DC  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20533  0053DE  0012               	return	
 20534  0053E0                     __end_of_posicao_cursor_lcd:
 20535                           	opt stack 0
 20536                           tosu	equ	0xFFF
 20537                           tosh	equ	0xFFE
 20538                           tosl	equ	0xFFD
 20539                           pclath	equ	0xFFA
 20540                           tblptru	equ	0xFF8
 20541                           tblptrh	equ	0xFF7
 20542                           tblptrl	equ	0xFF6
 20543                           tablat	equ	0xFF5
 20544                           prodh	equ	0xFF4
 20545                           prodl	equ	0xFF3
 20546                           intcon	equ	0xFF2
 20547                           intcon2	equ	0xFF1
 20548                           intcon3	equ	0xFF0
 20549                           indf0	equ	0xFEF
 20550                           postinc0	equ	0xFEE
 20551                           fsr0h	equ	0xFEA
 20552                           fsr0l	equ	0xFE9
 20553                           wreg	equ	0xFE8
 20554                           indf1	equ	0xFE7
 20555                           postinc1	equ	0xFE6
 20556                           postdec1	equ	0xFE5
 20557                           fsr1h	equ	0xFE2
 20558                           fsr1l	equ	0xFE1
 20559                           indf2	equ	0xFDF
 20560                           postinc2	equ	0xFDE
 20561                           postdec2	equ	0xFDD
 20562                           plusw2	equ	0xFDB
 20563                           fsr2h	equ	0xFDA
 20564                           fsr2l	equ	0xFD9
 20565                           status	equ	0xFD8
 20566                           
 20567 ;; *************** function _endereco_cursor_lcd *****************
 20568 ;; Defined at:
 20569 ;;		line 218 in file "bibliotecas/display_lcd.c"
 20570 ;; Parameters:    Size  Location     Type
 20571 ;;  endereco        1    wreg     unsigned char 
 20572 ;; Auto vars:     Size  Location     Type
 20573 ;;  endereco        1   27[COMRAM] unsigned char 
 20574 ;; Return value:  Size  Location     Type
 20575 ;;                  1    wreg      void 
 20576 ;; Registers used:
 20577 ;;		wreg, status,2, status,0, cstack
 20578 ;; Tracked objects:
 20579 ;;		On entry : 0/0
 20580 ;;		On exit  : 0/0
 20581 ;;		Unchanged: 0/0
 20582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20583 ;;      Params:         0       0       0       0       0       0       0       0       0
 20584 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20585 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20586 ;;      Totals:         1       0       0       0       0       0       0       0       0
 20587 ;;Total ram usage:        1 bytes
 20588 ;; Hardware stack levels used:    1
 20589 ;; Hardware stack levels required when called:    3
 20590 ;; This function calls:
 20591 ;;		_delay
 20592 ;; This function is called by:
 20593 ;;		_posicao_cursor_lcd
 20594 ;;		_cria_caractere_lcd
 20595 ;; This function uses a non-reentrant model
 20596 ;;
 20597                           
 20598                           	psect	text67
 20599  00544E                     __ptext67:
 20600                           	opt stack 0
 20601  00544E                     _endereco_cursor_lcd:
 20602                           	opt stack 25
 20603                           
 20604                           ;incstack = 0
 20605                           ;endereco_cursor_lcd@endereco stored from wreg
 20606  00544E  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 20607                           
 20608                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 20609  005450  9483               	bcf	3971,2,c	;volatile
 20610                           
 20611                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 20612  005452  9283               	bcf	3971,1,c	;volatile
 20613                           
 20614                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 20615  005454  9083               	bcf	3971,0,c	;volatile
 20616                           
 20617                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 20618  005456  8E83               	bsf	3971,7,c	;volatile
 20619                           
 20620                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 20621  005458  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 20622  00545A  D002               	goto	l502
 20623  00545C  8883               	bsf	3971,4,c	;volatile
 20624  00545E  D001               	goto	l503
 20625  005460                     l502:
 20626                           
 20627                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 20628  005460  9883               	bcf	3971,4,c	;volatile
 20629  005462                     l503:
 20630                           
 20631                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 20632  005462  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 20633  005464  D002               	goto	l504
 20634  005466  8A83               	bsf	3971,5,c	;volatile
 20635  005468  D001               	goto	l505
 20636  00546A                     l504:
 20637                           
 20638                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 20639  00546A  9A83               	bcf	3971,5,c	;volatile
 20640  00546C                     l505:
 20641                           
 20642                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 20643  00546C  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 20644  00546E  D002               	goto	l506
 20645  005470  8C83               	bsf	3971,6,c	;volatile
 20646  005472  D001               	goto	l507
 20647  005474                     l506:
 20648                           
 20649                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 20650  005474  9C83               	bcf	3971,6,c	;volatile
 20651  005476                     l507:
 20652                           
 20653                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 20654  005476  8083               	bsf	3971,0,c	;volatile
 20655                           
 20656                           ;display_lcd.c: 236: delay();
 20657  005478  EC4F  F02D         	call	_delay	;wreg free
 20658                           
 20659                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 20660  00547C  9083               	bcf	3971,0,c	;volatile
 20661                           
 20662                           ;display_lcd.c: 238: delay();
 20663  00547E  EC4F  F02D         	call	_delay	;wreg free
 20664                           
 20665                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 20666  005482  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 20667  005484  D002               	goto	l508
 20668  005486  8883               	bsf	3971,4,c	;volatile
 20669  005488  D001               	goto	l509
 20670  00548A                     l508:
 20671                           
 20672                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 20673  00548A  9883               	bcf	3971,4,c	;volatile
 20674  00548C                     l509:
 20675                           
 20676                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 20677  00548C  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 20678  00548E  D002               	goto	l510
 20679  005490  8A83               	bsf	3971,5,c	;volatile
 20680  005492  D001               	goto	l511
 20681  005494                     l510:
 20682                           
 20683                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 20684  005494  9A83               	bcf	3971,5,c	;volatile
 20685  005496                     l511:
 20686                           
 20687                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 20688  005496  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 20689  005498  D002               	goto	l512
 20690  00549A  8C83               	bsf	3971,6,c	;volatile
 20691  00549C  D001               	goto	l513
 20692  00549E                     l512:
 20693                           
 20694                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 20695  00549E  9C83               	bcf	3971,6,c	;volatile
 20696  0054A0                     l513:
 20697                           
 20698                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 20699  0054A0  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 20700  0054A2  D002               	goto	l514
 20701  0054A4  8E83               	bsf	3971,7,c	;volatile
 20702  0054A6  D001               	goto	l515
 20703  0054A8                     l514:
 20704                           
 20705                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 20706  0054A8  9E83               	bcf	3971,7,c	;volatile
 20707  0054AA                     l515:
 20708                           
 20709                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 20710  0054AA  8083               	bsf	3971,0,c	;volatile
 20711                           
 20712                           ;display_lcd.c: 252: delay();
 20713  0054AC  EC4F  F02D         	call	_delay	;wreg free
 20714                           
 20715                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 20716  0054B0  9083               	bcf	3971,0,c	;volatile
 20717                           
 20718                           ;display_lcd.c: 254: delay();
 20719  0054B2  EC4F  F02D         	call	_delay	;wreg free
 20720  0054B6  0012               	return		;funcret
 20721  0054B8                     __end_of_endereco_cursor_lcd:
 20722                           	opt stack 0
 20723                           tosu	equ	0xFFF
 20724                           tosh	equ	0xFFE
 20725                           tosl	equ	0xFFD
 20726                           pclath	equ	0xFFA
 20727                           tblptru	equ	0xFF8
 20728                           tblptrh	equ	0xFF7
 20729                           tblptrl	equ	0xFF6
 20730                           tablat	equ	0xFF5
 20731                           prodh	equ	0xFF4
 20732                           prodl	equ	0xFF3
 20733                           intcon	equ	0xFF2
 20734                           intcon2	equ	0xFF1
 20735                           intcon3	equ	0xFF0
 20736                           indf0	equ	0xFEF
 20737                           postinc0	equ	0xFEE
 20738                           fsr0h	equ	0xFEA
 20739                           fsr0l	equ	0xFE9
 20740                           wreg	equ	0xFE8
 20741                           indf1	equ	0xFE7
 20742                           postinc1	equ	0xFE6
 20743                           postdec1	equ	0xFE5
 20744                           fsr1h	equ	0xFE2
 20745                           fsr1l	equ	0xFE1
 20746                           indf2	equ	0xFDF
 20747                           postinc2	equ	0xFDE
 20748                           postdec2	equ	0xFDD
 20749                           plusw2	equ	0xFDB
 20750                           fsr2h	equ	0xFDA
 20751                           fsr2l	equ	0xFD9
 20752                           status	equ	0xFD8
 20753                           
 20754 ;; *************** function _escreve_cmd_lcd *****************
 20755 ;; Defined at:
 20756 ;;		line 162 in file "bibliotecas/display_lcd.c"
 20757 ;; Parameters:    Size  Location     Type
 20758 ;;  comando         1    wreg     unsigned char 
 20759 ;; Auto vars:     Size  Location     Type
 20760 ;;  comando         1   27[COMRAM] unsigned char 
 20761 ;; Return value:  Size  Location     Type
 20762 ;;                  1    wreg      void 
 20763 ;; Registers used:
 20764 ;;		wreg, status,2, status,0, cstack
 20765 ;; Tracked objects:
 20766 ;;		On entry : 0/0
 20767 ;;		On exit  : 0/0
 20768 ;;		Unchanged: 0/0
 20769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20770 ;;      Params:         0       0       0       0       0       0       0       0       0
 20771 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20772 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20773 ;;      Totals:         1       0       0       0       0       0       0       0       0
 20774 ;;Total ram usage:        1 bytes
 20775 ;; Hardware stack levels used:    1
 20776 ;; Hardware stack levels required when called:    3
 20777 ;; This function calls:
 20778 ;;		_delay
 20779 ;; This function is called by:
 20780 ;;		_mensagem_inicial
 20781 ;;		_init_lcd
 20782 ;;		_sdc_disk_initialize
 20783 ;;		_sdc_disk_read
 20784 ;;		_gps
 20785 ;;		_inicializa_SPI
 20786 ;;		_leitura_chave
 20787 ;;		_cria_caractere_lcd
 20788 ;; This function uses a non-reentrant model
 20789 ;;
 20790                           
 20791                           	psect	text68
 20792  004F86                     __ptext68:
 20793                           	opt stack 0
 20794  004F86                     _escreve_cmd_lcd:
 20795                           	opt stack 26
 20796                           
 20797                           ;incstack = 0
 20798                           ;escreve_cmd_lcd@comando stored from wreg
 20799  004F86  6E1C               	movwf	escreve_cmd_lcd@comando,c
 20800                           
 20801                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 20802  004F88  9483               	bcf	3971,2,c	;volatile
 20803                           
 20804                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 20805  004F8A  9283               	bcf	3971,1,c	;volatile
 20806                           
 20807                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 20808  004F8C  9083               	bcf	3971,0,c	;volatile
 20809                           
 20810                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 20811  004F8E  A81C               	btfss	escreve_cmd_lcd@comando,4,c
 20812  004F90  D002               	goto	l480
 20813  004F92  8883               	bsf	3971,4,c	;volatile
 20814  004F94  D001               	goto	l481
 20815  004F96                     l480:
 20816                           
 20817                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 20818  004F96  9883               	bcf	3971,4,c	;volatile
 20819  004F98                     l481:
 20820                           
 20821                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 20822  004F98  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
 20823  004F9A  D002               	goto	l482
 20824  004F9C  8A83               	bsf	3971,5,c	;volatile
 20825  004F9E  D001               	goto	l483
 20826  004FA0                     l482:
 20827                           
 20828                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 20829  004FA0  9A83               	bcf	3971,5,c	;volatile
 20830  004FA2                     l483:
 20831                           
 20832                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 20833  004FA2  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
 20834  004FA4  D002               	goto	l484
 20835  004FA6  8C83               	bsf	3971,6,c	;volatile
 20836  004FA8  D001               	goto	l485
 20837  004FAA                     l484:
 20838                           
 20839                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 20840  004FAA  9C83               	bcf	3971,6,c	;volatile
 20841  004FAC                     l485:
 20842                           
 20843                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 20844  004FAC  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
 20845  004FAE  D002               	goto	l486
 20846  004FB0  8E83               	bsf	3971,7,c	;volatile
 20847  004FB2  D001               	goto	l487
 20848  004FB4                     l486:
 20849                           
 20850                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 20851  004FB4  9E83               	bcf	3971,7,c	;volatile
 20852  004FB6                     l487:
 20853                           
 20854                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 20855  004FB6  8083               	bsf	3971,0,c	;volatile
 20856                           
 20857                           ;display_lcd.c: 181: delay();
 20858  004FB8  EC4F  F02D         	call	_delay	;wreg free
 20859                           
 20860                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 20861  004FBC  9083               	bcf	3971,0,c	;volatile
 20862                           
 20863                           ;display_lcd.c: 183: delay();
 20864  004FBE  EC4F  F02D         	call	_delay	;wreg free
 20865                           
 20866                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 20867  004FC2  A01C               	btfss	escreve_cmd_lcd@comando,0,c
 20868  004FC4  D002               	goto	l488
 20869  004FC6  8883               	bsf	3971,4,c	;volatile
 20870  004FC8  D001               	goto	l489
 20871  004FCA                     l488:
 20872                           
 20873                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 20874  004FCA  9883               	bcf	3971,4,c	;volatile
 20875  004FCC                     l489:
 20876                           
 20877                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 20878  004FCC  A21C               	btfss	escreve_cmd_lcd@comando,1,c
 20879  004FCE  D002               	goto	l490
 20880  004FD0  8A83               	bsf	3971,5,c	;volatile
 20881  004FD2  D001               	goto	l491
 20882  004FD4                     l490:
 20883                           
 20884                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 20885  004FD4  9A83               	bcf	3971,5,c	;volatile
 20886  004FD6                     l491:
 20887                           
 20888                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 20889  004FD6  A41C               	btfss	escreve_cmd_lcd@comando,2,c
 20890  004FD8  D002               	goto	l492
 20891  004FDA  8C83               	bsf	3971,6,c	;volatile
 20892  004FDC  D001               	goto	l493
 20893  004FDE                     l492:
 20894                           
 20895                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 20896  004FDE  9C83               	bcf	3971,6,c	;volatile
 20897  004FE0                     l493:
 20898                           
 20899                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 20900  004FE0  A61C               	btfss	escreve_cmd_lcd@comando,3,c
 20901  004FE2  D002               	goto	l494
 20902  004FE4  8E83               	bsf	3971,7,c	;volatile
 20903  004FE6  D001               	goto	l495
 20904  004FE8                     l494:
 20905                           
 20906                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 20907  004FE8  9E83               	bcf	3971,7,c	;volatile
 20908  004FEA                     l495:
 20909                           
 20910                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 20911  004FEA  8083               	bsf	3971,0,c	;volatile
 20912                           
 20913                           ;display_lcd.c: 197: delay();
 20914  004FEC  EC4F  F02D         	call	_delay	;wreg free
 20915                           
 20916                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 20917  004FF0  9083               	bcf	3971,0,c	;volatile
 20918                           
 20919                           ;display_lcd.c: 199: delay();
 20920  004FF2  EC4F  F02D         	call	_delay	;wreg free
 20921                           
 20922                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 20923  004FF6  041C               	decf	escreve_cmd_lcd@comando,w,c
 20924  004FF8  B4D8               	btfsc	status,2,c
 20925  004FFA  D008               	goto	u15460
 20926  004FFC  0E02               	movlw	2
 20927  004FFE  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 20928  005000  B4D8               	btfsc	status,2,c
 20929  005002  D004               	goto	u15460
 20930  005004  0E03               	movlw	3
 20931  005006  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 20932  005008  A4D8               	btfss	status,2,c
 20933  00500A  0012               	return	
 20934  00500C                     u15460:
 20935                           
 20936                           ;display_lcd.c: 205: { delay(); }
 20937  00500C  EC4F  F02D         	call	_delay	;wreg free
 20938  005010  0012               	return	
 20939  005012                     __end_of_escreve_cmd_lcd:
 20940                           	opt stack 0
 20941                           tosu	equ	0xFFF
 20942                           tosh	equ	0xFFE
 20943                           tosl	equ	0xFFD
 20944                           pclath	equ	0xFFA
 20945                           tblptru	equ	0xFF8
 20946                           tblptrh	equ	0xFF7
 20947                           tblptrl	equ	0xFF6
 20948                           tablat	equ	0xFF5
 20949                           prodh	equ	0xFF4
 20950                           prodl	equ	0xFF3
 20951                           intcon	equ	0xFF2
 20952                           intcon2	equ	0xFF1
 20953                           intcon3	equ	0xFF0
 20954                           indf0	equ	0xFEF
 20955                           postinc0	equ	0xFEE
 20956                           fsr0h	equ	0xFEA
 20957                           fsr0l	equ	0xFE9
 20958                           wreg	equ	0xFE8
 20959                           indf1	equ	0xFE7
 20960                           postinc1	equ	0xFE6
 20961                           postdec1	equ	0xFE5
 20962                           fsr1h	equ	0xFE2
 20963                           fsr1l	equ	0xFE1
 20964                           indf2	equ	0xFDF
 20965                           postinc2	equ	0xFDE
 20966                           postdec2	equ	0xFDD
 20967                           plusw2	equ	0xFDB
 20968                           fsr2h	equ	0xFDA
 20969                           fsr2l	equ	0xFD9
 20970                           status	equ	0xFD8
 20971                           
 20972 ;; *************** function _dummy_clocks *****************
 20973 ;; Defined at:
 20974 ;;		line 77 in file "bibliotecas/SDCard.c"
 20975 ;; Parameters:    Size  Location     Type
 20976 ;;  n               1    wreg     unsigned char 
 20977 ;; Auto vars:     Size  Location     Type
 20978 ;;  n               1   29[COMRAM] unsigned char 
 20979 ;;  i               2   30[COMRAM] unsigned int 
 20980 ;; Return value:  Size  Location     Type
 20981 ;;                  1    wreg      void 
 20982 ;; Registers used:
 20983 ;;		wreg, status,2, status,0, cstack
 20984 ;; Tracked objects:
 20985 ;;		On entry : 0/0
 20986 ;;		On exit  : 0/0
 20987 ;;		Unchanged: 0/0
 20988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20989 ;;      Params:         0       0       0       0       0       0       0       0       0
 20990 ;;      Locals:         3       0       0       0       0       0       0       0       0
 20991 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20992 ;;      Totals:         5       0       0       0       0       0       0       0       0
 20993 ;;Total ram usage:        5 bytes
 20994 ;; Hardware stack levels used:    1
 20995 ;; Hardware stack levels required when called:    3
 20996 ;; This function calls:
 20997 ;;		_escreve_dado_SPI
 20998 ;; This function is called by:
 20999 ;;		_sdc_reset
 21000 ;;		_sdc_disk_initialize
 21001 ;;		_sdc_disk_read
 21002 ;;		_sdc_disk_write
 21003 ;; This function uses a non-reentrant model
 21004 ;;
 21005                           
 21006                           	psect	text69
 21007  0058A4                     __ptext69:
 21008                           	opt stack 0
 21009  0058A4                     _dummy_clocks:
 21010                           	opt stack 21
 21011                           
 21012                           ;incstack = 0
 21013                           ;dummy_clocks@n stored from wreg
 21014  0058A4  6E1E               	movwf	dummy_clocks@n,c
 21015                           
 21016                           ;SDCard.c: 79: unsigned int i;
 21017                           ;SDCard.c: 80: _delay((unsigned long)((1)*(48000000/4000.0)));
 21018  0058A6  0E10               	movlw	16
 21019  0058A8  6E1C               	movwf	??_dummy_clocks& (0+255),c
 21020  0058AA  0E94               	movlw	148
 21021  0058AC                     u22027:
 21022  0058AC  2EE8               	decfsz	wreg,f,c
 21023  0058AE  D7FE               	bra	u22027
 21024  0058B0  2E1C               	decfsz	??_dummy_clocks& (0+255),f,c
 21025  0058B2  D7FC               	bra	u22027
 21026  0058B4  D000               	nop2	
 21027                           
 21028                           ;SDCard.c: 82: for(i=0;i<n;i++)
 21029  0058B6  0E00               	movlw	0
 21030  0058B8  6E20               	movwf	dummy_clocks@i+1,c
 21031  0058BA  0E00               	movlw	0
 21032  0058BC  6E1F               	movwf	dummy_clocks@i,c
 21033  0058BE  D007               	goto	l303
 21034  0058C0                     l304:
 21035                           
 21036                           ;SDCard.c: 83: {
 21037                           ;SDCard.c: 84: LATBbits.LATB4 = 1;
 21038  0058C0  888A               	bsf	3978,4,c	;volatile
 21039                           
 21040                           ;SDCard.c: 85: escreve_dado_SPI(0XFF);
 21041  0058C2  0EFF               	movlw	255
 21042  0058C4  ECAC  F02B         	call	_escreve_dado_SPI
 21043                           
 21044                           ;SDCard.c: 86: LATBbits.LATB4 = 0;
 21045  0058C8  988A               	bcf	3978,4,c	;volatile
 21046  0058CA  4A1F               	infsnz	dummy_clocks@i,f,c
 21047  0058CC  2A20               	incf	dummy_clocks@i+1,f,c
 21048  0058CE                     l303:
 21049  0058CE  501E               	movf	dummy_clocks@n,w,c
 21050  0058D0  6E1C               	movwf	??_dummy_clocks& (0+255),c
 21051  0058D2  6A1D               	clrf	(??_dummy_clocks+1)& (0+255),c
 21052  0058D4  501C               	movf	??_dummy_clocks,w,c
 21053  0058D6  5C1F               	subwf	dummy_clocks@i,w,c
 21054  0058D8  501D               	movf	??_dummy_clocks+1,w,c
 21055  0058DA  5820               	subwfb	dummy_clocks@i+1,w,c
 21056  0058DC  B0D8               	btfsc	status,0,c
 21057  0058DE  0012               	return	
 21058  0058E0  D7EF               	goto	l304
 21059  0058E2                     __end_of_dummy_clocks:
 21060                           	opt stack 0
 21061                           tosu	equ	0xFFF
 21062                           tosh	equ	0xFFE
 21063                           tosl	equ	0xFFD
 21064                           pclath	equ	0xFFA
 21065                           tblptru	equ	0xFF8
 21066                           tblptrh	equ	0xFF7
 21067                           tblptrl	equ	0xFF6
 21068                           tablat	equ	0xFF5
 21069                           prodh	equ	0xFF4
 21070                           prodl	equ	0xFF3
 21071                           intcon	equ	0xFF2
 21072                           intcon2	equ	0xFF1
 21073                           intcon3	equ	0xFF0
 21074                           indf0	equ	0xFEF
 21075                           postinc0	equ	0xFEE
 21076                           fsr0h	equ	0xFEA
 21077                           fsr0l	equ	0xFE9
 21078                           wreg	equ	0xFE8
 21079                           indf1	equ	0xFE7
 21080                           postinc1	equ	0xFE6
 21081                           postdec1	equ	0xFE5
 21082                           fsr1h	equ	0xFE2
 21083                           fsr1l	equ	0xFE1
 21084                           indf2	equ	0xFDF
 21085                           postinc2	equ	0xFDE
 21086                           postdec2	equ	0xFDD
 21087                           plusw2	equ	0xFDB
 21088                           fsr2h	equ	0xFDA
 21089                           fsr2l	equ	0xFD9
 21090                           status	equ	0xFD8
 21091                           
 21092 ;; *************** function _command *****************
 21093 ;; Defined at:
 21094 ;;		line 115 in file "bibliotecas/SDCard.c"
 21095 ;; Parameters:    Size  Location     Type
 21096 ;;  CMD             1    wreg     unsigned char 
 21097 ;;  arg             4   27[COMRAM] unsigned long 
 21098 ;;  CRC             1   31[COMRAM] unsigned char 
 21099 ;; Auto vars:     Size  Location     Type
 21100 ;;  CMD             1   32[COMRAM] unsigned char 
 21101 ;;  argument        1   33[COMRAM] unsigned char 
 21102 ;; Return value:  Size  Location     Type
 21103 ;;                  1    wreg      void 
 21104 ;; Registers used:
 21105 ;;		wreg, status,2, status,0, cstack
 21106 ;; Tracked objects:
 21107 ;;		On entry : 0/0
 21108 ;;		On exit  : 0/0
 21109 ;;		Unchanged: 0/0
 21110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21111 ;;      Params:         5       0       0       0       0       0       0       0       0
 21112 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21113 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21114 ;;      Totals:         7       0       0       0       0       0       0       0       0
 21115 ;;Total ram usage:        7 bytes
 21116 ;; Hardware stack levels used:    1
 21117 ;; Hardware stack levels required when called:    3
 21118 ;; This function calls:
 21119 ;;		_escreve_dado_SPI
 21120 ;; This function is called by:
 21121 ;;		_sdc_reset
 21122 ;;		_sdc_disk_initialize
 21123 ;;		_sdc_disk_read
 21124 ;;		_sdc_disk_write
 21125 ;; This function uses a non-reentrant model
 21126 ;;
 21127                           
 21128                           	psect	text70
 21129  005994                     __ptext70:
 21130                           	opt stack 0
 21131  005994                     _command:
 21132                           	opt stack 21
 21133                           
 21134                           ;incstack = 0
 21135                           ;command@CMD stored from wreg
 21136  005994  6E21               	movwf	command@CMD,c
 21137                           
 21138                           ;SDCard.c: 117: unsigned char argument;
 21139                           ;SDCard.c: 119: escreve_dado_SPI(CMD);
 21140  005996  5021               	movf	command@CMD,w,c
 21141  005998  ECAC  F02B         	call	_escreve_dado_SPI
 21142                           
 21143                           ;SDCard.c: 120: argument = arg>>24;
 21144  00599C  C01F  F022         	movff	command@arg+3,command@argument
 21145                           
 21146                           ;SDCard.c: 121: escreve_dado_SPI(argument);
 21147  0059A0  5022               	movf	command@argument,w,c
 21148  0059A2  ECAC  F02B         	call	_escreve_dado_SPI
 21149                           
 21150                           ;SDCard.c: 122: argument = arg>>16;
 21151  0059A6  C01E  F022         	movff	command@arg+2,command@argument
 21152                           
 21153                           ;SDCard.c: 123: escreve_dado_SPI(argument);
 21154  0059AA  5022               	movf	command@argument,w,c
 21155  0059AC  ECAC  F02B         	call	_escreve_dado_SPI
 21156                           
 21157                           ;SDCard.c: 124: argument = arg>>8;
 21158  0059B0  C01D  F022         	movff	command@arg+1,command@argument
 21159                           
 21160                           ;SDCard.c: 125: escreve_dado_SPI(argument);
 21161  0059B4  5022               	movf	command@argument,w,c
 21162  0059B6  ECAC  F02B         	call	_escreve_dado_SPI
 21163                           
 21164                           ;SDCard.c: 126: argument = arg;
 21165  0059BA  C01C  F022         	movff	command@arg,command@argument
 21166                           
 21167                           ;SDCard.c: 127: escreve_dado_SPI(argument);
 21168  0059BE  5022               	movf	command@argument,w,c
 21169  0059C0  ECAC  F02B         	call	_escreve_dado_SPI
 21170                           
 21171                           ;SDCard.c: 128: escreve_dado_SPI(CRC);
 21172  0059C4  5020               	movf	command@CRC,w,c
 21173  0059C6  ECAC  F02B         	call	_escreve_dado_SPI
 21174  0059CA  0012               	return		;funcret
 21175  0059CC                     __end_of_command:
 21176                           	opt stack 0
 21177                           tosu	equ	0xFFF
 21178                           tosh	equ	0xFFE
 21179                           tosl	equ	0xFFD
 21180                           pclath	equ	0xFFA
 21181                           tblptru	equ	0xFF8
 21182                           tblptrh	equ	0xFF7
 21183                           tblptrl	equ	0xFF6
 21184                           tablat	equ	0xFF5
 21185                           prodh	equ	0xFF4
 21186                           prodl	equ	0xFF3
 21187                           intcon	equ	0xFF2
 21188                           intcon2	equ	0xFF1
 21189                           intcon3	equ	0xFF0
 21190                           indf0	equ	0xFEF
 21191                           postinc0	equ	0xFEE
 21192                           fsr0h	equ	0xFEA
 21193                           fsr0l	equ	0xFE9
 21194                           wreg	equ	0xFE8
 21195                           indf1	equ	0xFE7
 21196                           postinc1	equ	0xFE6
 21197                           postdec1	equ	0xFE5
 21198                           fsr1h	equ	0xFE2
 21199                           fsr1l	equ	0xFE1
 21200                           indf2	equ	0xFDF
 21201                           postinc2	equ	0xFDE
 21202                           postdec2	equ	0xFDD
 21203                           plusw2	equ	0xFDB
 21204                           fsr2h	equ	0xFDA
 21205                           fsr2l	equ	0xFD9
 21206                           status	equ	0xFD8
 21207                           
 21208 ;; *************** function _escreve_dado_SPI *****************
 21209 ;; Defined at:
 21210 ;;		line 67 in file "bibliotecas/SHRC.c"
 21211 ;; Parameters:    Size  Location     Type
 21212 ;;  data_to_shrc    1    wreg     unsigned char 
 21213 ;; Auto vars:     Size  Location     Type
 21214 ;;  data_to_shrc    1   26[COMRAM] unsigned char 
 21215 ;;  contador        1   25[COMRAM] unsigned char 
 21216 ;; Return value:  Size  Location     Type
 21217 ;;                  1    wreg      void 
 21218 ;; Registers used:
 21219 ;;		wreg, status,2, status,0
 21220 ;; Tracked objects:
 21221 ;;		On entry : 0/0
 21222 ;;		On exit  : 0/0
 21223 ;;		Unchanged: 0/0
 21224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21225 ;;      Params:         0       0       0       0       0       0       0       0       0
 21226 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21227 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21228 ;;      Totals:         2       0       0       0       0       0       0       0       0
 21229 ;;Total ram usage:        2 bytes
 21230 ;; Hardware stack levels used:    1
 21231 ;; Hardware stack levels required when called:    2
 21232 ;; This function calls:
 21233 ;;		Nothing
 21234 ;; This function is called by:
 21235 ;;		_dummy_clocks
 21236 ;;		_proceed
 21237 ;;		_command
 21238 ;;		_sdc_disk_write
 21239 ;; This function uses a non-reentrant model
 21240 ;;
 21241                           
 21242                           	psect	text71
 21243  005758                     __ptext71:
 21244                           	opt stack 0
 21245  005758                     _escreve_dado_SPI:
 21246                           	opt stack 25
 21247                           
 21248                           ;incstack = 0
 21249                           ;escreve_dado_SPI@data_to_shrc stored from wreg
 21250  005758  6E1B               	movwf	escreve_dado_SPI@data_to_shrc,c
 21251                           
 21252                           ;SHRC.c: 69: LATBbits.LATB7 = 0;
 21253  00575A  9E8A               	bcf	3978,7,c	;volatile
 21254                           
 21255                           ;SHRC.c: 70: unsigned char contador=0;
 21256  00575C  0E00               	movlw	0
 21257  00575E  6E1A               	movwf	escreve_dado_SPI@contador,c
 21258                           
 21259                           ;SHRC.c: 71: (INTCONbits.GIE = 0);
 21260  005760  9EF2               	bcf	intcon,7,c	;volatile
 21261                           
 21262                           ;SHRC.c: 73: while(contador<=7)
 21263  005762  D018               	goto	l341
 21264  005764                     
 21265                           ;SHRC.c: 74: {
 21266                           ;SHRC.c: 75: if((data_to_shrc & 0x80) == 0)
 21267  005764  BE1B               	btfsc	escreve_dado_SPI@data_to_shrc,7,c
 21268  005766  D002               	goto	l343
 21269                           
 21270                           ;SHRC.c: 76: {
 21271                           ;SHRC.c: 77: LATBbits.LATB7 = 0;
 21272  005768  9E8A               	bcf	3978,7,c	;volatile
 21273                           
 21274                           ;SHRC.c: 78: }
 21275  00576A  D001               	goto	l344
 21276  00576C                     l343:
 21277                           
 21278                           ;SHRC.c: 79: else
 21279                           ;SHRC.c: 80: {
 21280                           ;SHRC.c: 81: LATBbits.LATB7 = 1;
 21281  00576C  8E8A               	bsf	3978,7,c	;volatile
 21282  00576E                     l344:
 21283                           
 21284                           ;SHRC.c: 82: }
 21285                           ;SHRC.c: 83: data_to_shrc = data_to_shrc << 1;
 21286  00576E  501B               	movf	escreve_dado_SPI@data_to_shrc,w,c
 21287  005770  241B               	addwf	escreve_dado_SPI@data_to_shrc,w,c
 21288  005772  6E1B               	movwf	escreve_dado_SPI@data_to_shrc,c
 21289                           
 21290                           ;SHRC.c: 84: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 21291  005774  0E0A               	movlw	10
 21292  005776                     u22037:
 21293  005776  2EE8               	decfsz	wreg,f,c
 21294  005778  D7FE               	bra	u22037
 21295                           
 21296                           ;SHRC.c: 85: LATBbits.LATB6 = 1;
 21297  00577A  8C8A               	bsf	3978,6,c	;volatile
 21298                           
 21299                           ;SHRC.c: 86: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 21300  00577C  0E0A               	movlw	10
 21301  00577E                     u22047:
 21302  00577E  2EE8               	decfsz	wreg,f,c
 21303  005780  D7FE               	bra	u22047
 21304                           
 21305                           ;SHRC.c: 87: LATBbits.LATB7 = 0;
 21306  005782  9E8A               	bcf	3978,7,c	;volatile
 21307                           
 21308                           ;SHRC.c: 88: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 21309  005784  0E0A               	movlw	10
 21310  005786                     u22057:
 21311  005786  2EE8               	decfsz	wreg,f,c
 21312  005788  D7FE               	bra	u22057
 21313                           
 21314                           ;SHRC.c: 89: LATBbits.LATB6 = 0;
 21315  00578A  9C8A               	bcf	3978,6,c	;volatile
 21316                           
 21317                           ;SHRC.c: 90: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 21318  00578C  0E0A               	movlw	10
 21319  00578E                     u22067:
 21320  00578E  2EE8               	decfsz	wreg,f,c
 21321  005790  D7FE               	bra	u22067
 21322                           
 21323                           ;SHRC.c: 91: contador++;
 21324  005792  2A1A               	incf	escreve_dado_SPI@contador,f,c
 21325  005794                     l341:
 21326  005794  0E07               	movlw	7
 21327  005796  641A               	cpfsgt	escreve_dado_SPI@contador,c
 21328  005798  D7E5               	goto	l342
 21329                           
 21330                           ;SHRC.c: 92: }
 21331                           ;SHRC.c: 93: (INTCONbits.GIE = 1);
 21332  00579A  8EF2               	bsf	intcon,7,c	;volatile
 21333  00579C  0012               	return		;funcret
 21334  00579E                     __end_of_escreve_dado_SPI:
 21335                           	opt stack 0
 21336                           tosu	equ	0xFFF
 21337                           tosh	equ	0xFFE
 21338                           tosl	equ	0xFFD
 21339                           pclath	equ	0xFFA
 21340                           tblptru	equ	0xFF8
 21341                           tblptrh	equ	0xFF7
 21342                           tblptrl	equ	0xFF6
 21343                           tablat	equ	0xFF5
 21344                           prodh	equ	0xFF4
 21345                           prodl	equ	0xFF3
 21346                           intcon	equ	0xFF2
 21347                           intcon2	equ	0xFF1
 21348                           intcon3	equ	0xFF0
 21349                           indf0	equ	0xFEF
 21350                           postinc0	equ	0xFEE
 21351                           fsr0h	equ	0xFEA
 21352                           fsr0l	equ	0xFE9
 21353                           wreg	equ	0xFE8
 21354                           indf1	equ	0xFE7
 21355                           postinc1	equ	0xFE6
 21356                           postdec1	equ	0xFE5
 21357                           fsr1h	equ	0xFE2
 21358                           fsr1l	equ	0xFE1
 21359                           indf2	equ	0xFDF
 21360                           postinc2	equ	0xFDE
 21361                           postdec2	equ	0xFDD
 21362                           plusw2	equ	0xFDB
 21363                           fsr2h	equ	0xFDA
 21364                           fsr2l	equ	0xFD9
 21365                           status	equ	0xFD8
 21366                           
 21367 ;; *************** function _escreve_inteiro_lcd *****************
 21368 ;; Defined at:
 21369 ;;		line 376 in file "bibliotecas/display_lcd.c"
 21370 ;; Parameters:    Size  Location     Type
 21371 ;;  valor           2   43[COMRAM] int 
 21372 ;; Auto vars:     Size  Location     Type
 21373 ;;  texto           7    6[BANK0 ] unsigned char [7]
 21374 ;; Return value:  Size  Location     Type
 21375 ;;                  1    wreg      void 
 21376 ;; Registers used:
 21377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21378 ;; Tracked objects:
 21379 ;;		On entry : 0/0
 21380 ;;		On exit  : 0/0
 21381 ;;		Unchanged: 0/0
 21382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21383 ;;      Params:         2       0       0       0       0       0       0       0       0
 21384 ;;      Locals:         0       7       0       0       0       0       0       0       0
 21385 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21386 ;;      Totals:         2       7       0       0       0       0       0       0       0
 21387 ;;Total ram usage:        9 bytes
 21388 ;; Hardware stack levels used:    1
 21389 ;; Hardware stack levels required when called:    5
 21390 ;; This function calls:
 21391 ;;		_escreve_frase_ram_lcd
 21392 ;;		_itoa
 21393 ;; This function is called by:
 21394 ;;		_SDCard
 21395 ;;		_disk_read
 21396 ;;		_sdc_reset
 21397 ;;		_sdc_disk_initialize
 21398 ;;		_find_volume
 21399 ;;		_ReadSPI_
 21400 ;;		_escreve_float_lcd
 21401 ;; This function uses a non-reentrant model
 21402 ;;
 21403                           
 21404                           	psect	text72
 21405  0058E2                     __ptext72:
 21406                           	opt stack 0
 21407  0058E2                     _escreve_inteiro_lcd:
 21408                           	opt stack 20
 21409                           
 21410                           ;display_lcd.c: 378: char texto[7] = "000000";
 21411                           
 21412                           ;incstack = 0
 21413  0058E2  EE21  F0DF         	lfsr	2,escreve_inteiro_lcd@F3966
 21414  0058E6  EE10  F066         	lfsr	1,escreve_inteiro_lcd@texto
 21415  0058EA  0E06               	movlw	6
 21416  0058EC                     u15541:
 21417  0058EC  CFDB FFE3          	movff	plusw2,plusw1
 21418  0058F0  06E8               	decf	wreg,f,c
 21419  0058F2  E2FC               	bc	u15541
 21420                           
 21421                           ;display_lcd.c: 379: itoa(texto,valor, 10);
 21422  0058F4  0E66               	movlw	low escreve_inteiro_lcd@texto
 21423  0058F6  0100               	movlb	0	; () banked
 21424  0058F8  6F60               	movwf	itoa@buf& (0+255),b
 21425  0058FA  0E00               	movlw	high escreve_inteiro_lcd@texto
 21426  0058FC  6F61               	movwf	(itoa@buf+1)& (0+255),b
 21427  0058FE  C02C  F062         	movff	escreve_inteiro_lcd@valor,itoa@val
 21428  005902  C02D  F063         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
 21429  005906  0E00               	movlw	0
 21430  005908  6F65               	movwf	(itoa@base+1)& (0+255),b
 21431  00590A  0E0A               	movlw	10
 21432  00590C  6F64               	movwf	itoa@base& (0+255),b
 21433  00590E  ECCF  F02B         	call	_itoa	;wreg free
 21434                           
 21435                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
 21436  005912  0E66               	movlw	low escreve_inteiro_lcd@texto
 21437  005914  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 21438  005916  0E00               	movlw	high escreve_inteiro_lcd@texto
 21439  005918  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 21440  00591A  EC3C  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 21441  00591E  0012               	return		;funcret
 21442  005920                     __end_of_escreve_inteiro_lcd:
 21443                           	opt stack 0
 21444                           tosu	equ	0xFFF
 21445                           tosh	equ	0xFFE
 21446                           tosl	equ	0xFFD
 21447                           pclath	equ	0xFFA
 21448                           tblptru	equ	0xFF8
 21449                           tblptrh	equ	0xFF7
 21450                           tblptrl	equ	0xFF6
 21451                           tablat	equ	0xFF5
 21452                           prodh	equ	0xFF4
 21453                           prodl	equ	0xFF3
 21454                           intcon	equ	0xFF2
 21455                           intcon2	equ	0xFF1
 21456                           intcon3	equ	0xFF0
 21457                           indf0	equ	0xFEF
 21458                           postinc0	equ	0xFEE
 21459                           fsr0h	equ	0xFEA
 21460                           fsr0l	equ	0xFE9
 21461                           wreg	equ	0xFE8
 21462                           indf1	equ	0xFE7
 21463                           postinc1	equ	0xFE6
 21464                           postdec1	equ	0xFE5
 21465                           plusw1	equ	0xFE3
 21466                           fsr1h	equ	0xFE2
 21467                           fsr1l	equ	0xFE1
 21468                           indf2	equ	0xFDF
 21469                           postinc2	equ	0xFDE
 21470                           postdec2	equ	0xFDD
 21471                           plusw2	equ	0xFDB
 21472                           fsr2h	equ	0xFDA
 21473                           fsr2l	equ	0xFD9
 21474                           status	equ	0xFD8
 21475                           
 21476 ;; *************** function _itoa *****************
 21477 ;; Defined at:
 21478 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 21479 ;; Parameters:    Size  Location     Type
 21480 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 21481 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 21482 ;;  val             2    2[BANK0 ] int 
 21483 ;;  base            2    4[BANK0 ] int 
 21484 ;; Auto vars:     Size  Location     Type
 21485 ;;  cp              2   41[COMRAM] PTR unsigned char 
 21486 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 21487 ;; Return value:  Size  Location     Type
 21488 ;;                  2    0[BANK0 ] PTR unsigned char 
 21489 ;; Registers used:
 21490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21491 ;; Tracked objects:
 21492 ;;		On entry : 0/0
 21493 ;;		On exit  : 0/0
 21494 ;;		Unchanged: 0/0
 21495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21496 ;;      Params:         0       6       0       0       0       0       0       0       0
 21497 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21498 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21499 ;;      Totals:         2       6       0       0       0       0       0       0       0
 21500 ;;Total ram usage:        8 bytes
 21501 ;; Hardware stack levels used:    1
 21502 ;; Hardware stack levels required when called:    4
 21503 ;; This function calls:
 21504 ;;		_utoa
 21505 ;; This function is called by:
 21506 ;;		_escreve_inteiro_lcd
 21507 ;;		_escreve_inteiro_uart
 21508 ;; This function uses a non-reentrant model
 21509 ;;
 21510                           
 21511                           	psect	text73
 21512  00579E                     __ptext73:
 21513                           	opt stack 0
 21514  00579E                     _itoa:
 21515                           	opt stack 20
 21516                           
 21517                           ;incstack = 0
 21518  00579E  C060  F02A         	movff	itoa@buf,itoa@cp
 21519  0057A2  C061  F02B         	movff	itoa@buf+1,itoa@cp+1
 21520  0057A6  0100               	movlb	0	; () banked
 21521  0057A8  AF63               	btfss	(itoa@val+1)& (0+255),7,b
 21522  0057AA  D00C               	goto	l2280
 21523                           
 21524                           ; BSR set to: 0
 21525  0057AC  C060  FFD9         	movff	itoa@buf,fsr2l
 21526  0057B0  C061  FFDA         	movff	itoa@buf+1,fsr2h
 21527  0057B4  0E2D               	movlw	45
 21528  0057B6  6EDF               	movwf	indf2,c
 21529                           
 21530                           ; BSR set to: 0
 21531  0057B8  4B60               	infsnz	itoa@buf& (0+255),f,b
 21532  0057BA  2B61               	incf	(itoa@buf+1)& (0+255),f,b
 21533                           
 21534                           ; BSR set to: 0
 21535  0057BC  6D62               	negf	itoa@val& (0+255),b
 21536  0057BE  1F63               	comf	(itoa@val+1)& (0+255),f,b
 21537  0057C0  B0D8               	btfsc	status,0,c
 21538  0057C2  2B63               	incf	(itoa@val+1)& (0+255),f,b
 21539  0057C4                     l2280:
 21540                           
 21541                           ; BSR set to: 0
 21542                           
 21543                           ; BSR set to: 0
 21544  0057C4  C060  F021         	movff	itoa@buf,utoa@buf
 21545  0057C8  C061  F022         	movff	itoa@buf+1,utoa@buf+1
 21546  0057CC  C062  F023         	movff	itoa@val,utoa@val
 21547  0057D0  C063  F024         	movff	itoa@val+1,utoa@val+1
 21548  0057D4  C064  F025         	movff	itoa@base,utoa@base
 21549  0057D8  C065  F026         	movff	itoa@base+1,utoa@base+1
 21550  0057DC  ECD7  F026         	call	_utoa	;wreg free
 21551  0057E0  0012               	return	
 21552  0057E2                     __end_of_itoa:
 21553                           	opt stack 0
 21554                           tosu	equ	0xFFF
 21555                           tosh	equ	0xFFE
 21556                           tosl	equ	0xFFD
 21557                           pclath	equ	0xFFA
 21558                           tblptru	equ	0xFF8
 21559                           tblptrh	equ	0xFF7
 21560                           tblptrl	equ	0xFF6
 21561                           tablat	equ	0xFF5
 21562                           prodh	equ	0xFF4
 21563                           prodl	equ	0xFF3
 21564                           intcon	equ	0xFF2
 21565                           intcon2	equ	0xFF1
 21566                           intcon3	equ	0xFF0
 21567                           indf0	equ	0xFEF
 21568                           postinc0	equ	0xFEE
 21569                           fsr0h	equ	0xFEA
 21570                           fsr0l	equ	0xFE9
 21571                           wreg	equ	0xFE8
 21572                           indf1	equ	0xFE7
 21573                           postinc1	equ	0xFE6
 21574                           postdec1	equ	0xFE5
 21575                           plusw1	equ	0xFE3
 21576                           fsr1h	equ	0xFE2
 21577                           fsr1l	equ	0xFE1
 21578                           indf2	equ	0xFDF
 21579                           postinc2	equ	0xFDE
 21580                           postdec2	equ	0xFDD
 21581                           plusw2	equ	0xFDB
 21582                           fsr2h	equ	0xFDA
 21583                           fsr2l	equ	0xFD9
 21584                           status	equ	0xFD8
 21585                           
 21586 ;; *************** function _utoa *****************
 21587 ;; Defined at:
 21588 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 21589 ;; Parameters:    Size  Location     Type
 21590 ;;  buf             2   32[COMRAM] PTR unsigned char 
 21591 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 21592 ;;  val             2   34[COMRAM] unsigned int 
 21593 ;;  base            2   36[COMRAM] int 
 21594 ;; Auto vars:     Size  Location     Type
 21595 ;;  v               2   38[COMRAM] unsigned int 
 21596 ;;  c               1   40[COMRAM] unsigned char 
 21597 ;; Return value:  Size  Location     Type
 21598 ;;                  2   32[COMRAM] PTR unsigned char 
 21599 ;; Registers used:
 21600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21601 ;; Tracked objects:
 21602 ;;		On entry : 0/0
 21603 ;;		On exit  : 0/0
 21604 ;;		Unchanged: 0/0
 21605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21606 ;;      Params:         6       0       0       0       0       0       0       0       0
 21607 ;;      Locals:         3       0       0       0       0       0       0       0       0
 21608 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21609 ;;      Totals:         9       0       0       0       0       0       0       0       0
 21610 ;;Total ram usage:        9 bytes
 21611 ;; Hardware stack levels used:    1
 21612 ;; Hardware stack levels required when called:    3
 21613 ;; This function calls:
 21614 ;;		___lwdiv
 21615 ;;		___lwmod
 21616 ;; This function is called by:
 21617 ;;		_itoa
 21618 ;; This function uses a non-reentrant model
 21619 ;;
 21620                           
 21621                           	psect	text74
 21622  004DAE                     __ptext74:
 21623                           	opt stack 0
 21624  004DAE                     _utoa:
 21625                           	opt stack 20
 21626                           
 21627                           ;incstack = 0
 21628  004DAE  C023  F027         	movff	utoa@val,utoa@v
 21629  004DB2  C024  F028         	movff	utoa@val+1,utoa@v+1
 21630  004DB6  C027  F01A         	movff	utoa@v,___lwdiv@dividend
 21631  004DBA  C028  F01B         	movff	utoa@v+1,___lwdiv@dividend+1
 21632  004DBE  C025  F01C         	movff	utoa@base,___lwdiv@divisor
 21633  004DC2  C026  F01D         	movff	utoa@base+1,___lwdiv@divisor+1
 21634  004DC6  EC13  F02B         	call	___lwdiv	;wreg free
 21635  004DCA  C01A  F027         	movff	?___lwdiv,utoa@v
 21636  004DCE  C01B  F028         	movff	?___lwdiv+1,utoa@v+1
 21637  004DD2  4A21               	infsnz	utoa@buf,f,c
 21638  004DD4  2A22               	incf	utoa@buf+1,f,c
 21639  004DD6  5027               	movf	utoa@v,w,c
 21640  004DD8  1028               	iorwf	utoa@v+1,w,c
 21641  004DDA  A4D8               	btfss	status,2,c
 21642  004DDC  D7EC               	goto	l2284
 21643  004DDE  C021  FFD9         	movff	utoa@buf,fsr2l
 21644  004DE2  C022  FFDA         	movff	utoa@buf+1,fsr2h
 21645  004DE6  0E00               	movlw	0
 21646  004DE8  6EDF               	movwf	indf2,c
 21647  004DEA  0621               	decf	utoa@buf,f,c
 21648  004DEC  A0D8               	btfss	status,0,c
 21649  004DEE  0622               	decf	utoa@buf+1,f,c
 21650  004DF0  C023  F01A         	movff	utoa@val,___lwmod@dividend
 21651  004DF4  C024  F01B         	movff	utoa@val+1,___lwmod@dividend+1
 21652  004DF8  C025  F01C         	movff	utoa@base,___lwmod@divisor
 21653  004DFC  C026  F01D         	movff	utoa@base+1,___lwmod@divisor+1
 21654  004E00  EC12  F02C         	call	___lwmod	;wreg free
 21655  004E04  501A               	movf	?___lwmod,w,c
 21656  004E06  6E29               	movwf	utoa@c,c
 21657  004E08  C023  F01A         	movff	utoa@val,___lwdiv@dividend
 21658  004E0C  C024  F01B         	movff	utoa@val+1,___lwdiv@dividend+1
 21659  004E10  C025  F01C         	movff	utoa@base,___lwdiv@divisor
 21660  004E14  C026  F01D         	movff	utoa@base+1,___lwdiv@divisor+1
 21661  004E18  EC13  F02B         	call	___lwdiv	;wreg free
 21662  004E1C  C01A  F023         	movff	?___lwdiv,utoa@val
 21663  004E20  C01B  F024         	movff	?___lwdiv+1,utoa@val+1
 21664  004E24  0E09               	movlw	9
 21665  004E26  6429               	cpfsgt	utoa@c,c
 21666  004E28  D002               	goto	l2287
 21667  004E2A  0E07               	movlw	7
 21668  004E2C  2629               	addwf	utoa@c,f,c
 21669  004E2E                     l2287:
 21670  004E2E  0E30               	movlw	48
 21671  004E30  2629               	addwf	utoa@c,f,c
 21672  004E32  C021  FFD9         	movff	utoa@buf,fsr2l
 21673  004E36  C022  FFDA         	movff	utoa@buf+1,fsr2h
 21674  004E3A  C029  FFDF         	movff	utoa@c,indf2
 21675  004E3E  0621               	decf	utoa@buf,f,c
 21676  004E40  A0D8               	btfss	status,0,c
 21677  004E42  0622               	decf	utoa@buf+1,f,c
 21678  004E44  5023               	movf	utoa@val,w,c
 21679  004E46  1024               	iorwf	utoa@val+1,w,c
 21680  004E48  A4D8               	btfss	status,2,c
 21681  004E4A  D7D2               	goto	l2286
 21682                           
 21683                           ;	Return value of _utoa is never used
 21684  004E4C  4A21               	infsnz	utoa@buf,f,c
 21685  004E4E  2A22               	incf	utoa@buf+1,f,c
 21686  004E50  0012               	return	
 21687  004E52                     __end_of_utoa:
 21688                           	opt stack 0
 21689                           tosu	equ	0xFFF
 21690                           tosh	equ	0xFFE
 21691                           tosl	equ	0xFFD
 21692                           pclath	equ	0xFFA
 21693                           tblptru	equ	0xFF8
 21694                           tblptrh	equ	0xFF7
 21695                           tblptrl	equ	0xFF6
 21696                           tablat	equ	0xFF5
 21697                           prodh	equ	0xFF4
 21698                           prodl	equ	0xFF3
 21699                           intcon	equ	0xFF2
 21700                           intcon2	equ	0xFF1
 21701                           intcon3	equ	0xFF0
 21702                           indf0	equ	0xFEF
 21703                           postinc0	equ	0xFEE
 21704                           fsr0h	equ	0xFEA
 21705                           fsr0l	equ	0xFE9
 21706                           wreg	equ	0xFE8
 21707                           indf1	equ	0xFE7
 21708                           postinc1	equ	0xFE6
 21709                           postdec1	equ	0xFE5
 21710                           plusw1	equ	0xFE3
 21711                           fsr1h	equ	0xFE2
 21712                           fsr1l	equ	0xFE1
 21713                           indf2	equ	0xFDF
 21714                           postinc2	equ	0xFDE
 21715                           postdec2	equ	0xFDD
 21716                           plusw2	equ	0xFDB
 21717                           fsr2h	equ	0xFDA
 21718                           fsr2l	equ	0xFD9
 21719                           status	equ	0xFD8
 21720                           
 21721 ;; *************** function ___lwmod *****************
 21722 ;; Defined at:
 21723 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 21724 ;; Parameters:    Size  Location     Type
 21725 ;;  dividend        2   25[COMRAM] unsigned int 
 21726 ;;  divisor         2   27[COMRAM] unsigned int 
 21727 ;; Auto vars:     Size  Location     Type
 21728 ;;  counter         1   29[COMRAM] unsigned char 
 21729 ;; Return value:  Size  Location     Type
 21730 ;;                  2   25[COMRAM] unsigned int 
 21731 ;; Registers used:
 21732 ;;		wreg, status,2, status,0
 21733 ;; Tracked objects:
 21734 ;;		On entry : 0/0
 21735 ;;		On exit  : 0/0
 21736 ;;		Unchanged: 0/0
 21737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21738 ;;      Params:         4       0       0       0       0       0       0       0       0
 21739 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21740 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21741 ;;      Totals:         5       0       0       0       0       0       0       0       0
 21742 ;;Total ram usage:        5 bytes
 21743 ;; Hardware stack levels used:    1
 21744 ;; Hardware stack levels required when called:    2
 21745 ;; This function calls:
 21746 ;;		Nothing
 21747 ;; This function is called by:
 21748 ;;		_utoa
 21749 ;;		_converte_inteiro_matriz
 21750 ;; This function uses a non-reentrant model
 21751 ;;
 21752                           
 21753                           	psect	text75
 21754  005824                     __ptext75:
 21755                           	opt stack 0
 21756  005824                     ___lwmod:
 21757                           	opt stack 20
 21758                           
 21759                           ;incstack = 0
 21760  005824  501C               	movf	___lwmod@divisor,w,c
 21761  005826  101D               	iorwf	___lwmod@divisor+1,w,c
 21762  005828  B4D8               	btfsc	status,2,c
 21763  00582A  D018               	goto	l2382
 21764  00582C  0E01               	movlw	1
 21765  00582E  6E1E               	movwf	___lwmod@counter,c
 21766  005830  D004               	goto	l2377
 21767  005832  90D8               	bcf	status,0,c
 21768  005834  361C               	rlcf	___lwmod@divisor,f,c
 21769  005836  361D               	rlcf	___lwmod@divisor+1,f,c
 21770  005838  2A1E               	incf	___lwmod@counter,f,c
 21771  00583A                     l2377:
 21772  00583A  AE1D               	btfss	___lwmod@divisor+1,7,c
 21773  00583C  D7FA               	goto	l2378
 21774  00583E                     u15260:
 21775  00583E  501C               	movf	___lwmod@divisor,w,c
 21776  005840  5C1A               	subwf	___lwmod@dividend,w,c
 21777  005842  501D               	movf	___lwmod@divisor+1,w,c
 21778  005844  581B               	subwfb	___lwmod@dividend+1,w,c
 21779  005846  A0D8               	btfss	status,0,c
 21780  005848  D004               	goto	l2381
 21781  00584A  501C               	movf	___lwmod@divisor,w,c
 21782  00584C  5E1A               	subwf	___lwmod@dividend,f,c
 21783  00584E  501D               	movf	___lwmod@divisor+1,w,c
 21784  005850  5A1B               	subwfb	___lwmod@dividend+1,f,c
 21785  005852                     l2381:
 21786  005852  90D8               	bcf	status,0,c
 21787  005854  321D               	rrcf	___lwmod@divisor+1,f,c
 21788  005856  321C               	rrcf	___lwmod@divisor,f,c
 21789  005858  2E1E               	decfsz	___lwmod@counter,f,c
 21790  00585A  D7F1               	goto	u15260
 21791  00585C                     l2382:
 21792  00585C  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 21793  005860  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 21794  005864  0012               	return		;funcret
 21795  005866                     __end_of___lwmod:
 21796                           	opt stack 0
 21797                           tosu	equ	0xFFF
 21798                           tosh	equ	0xFFE
 21799                           tosl	equ	0xFFD
 21800                           pclath	equ	0xFFA
 21801                           tblptru	equ	0xFF8
 21802                           tblptrh	equ	0xFF7
 21803                           tblptrl	equ	0xFF6
 21804                           tablat	equ	0xFF5
 21805                           prodh	equ	0xFF4
 21806                           prodl	equ	0xFF3
 21807                           intcon	equ	0xFF2
 21808                           intcon2	equ	0xFF1
 21809                           intcon3	equ	0xFF0
 21810                           indf0	equ	0xFEF
 21811                           postinc0	equ	0xFEE
 21812                           fsr0h	equ	0xFEA
 21813                           fsr0l	equ	0xFE9
 21814                           wreg	equ	0xFE8
 21815                           indf1	equ	0xFE7
 21816                           postinc1	equ	0xFE6
 21817                           postdec1	equ	0xFE5
 21818                           plusw1	equ	0xFE3
 21819                           fsr1h	equ	0xFE2
 21820                           fsr1l	equ	0xFE1
 21821                           indf2	equ	0xFDF
 21822                           postinc2	equ	0xFDE
 21823                           postdec2	equ	0xFDD
 21824                           plusw2	equ	0xFDB
 21825                           fsr2h	equ	0xFDA
 21826                           fsr2l	equ	0xFD9
 21827                           status	equ	0xFD8
 21828                           
 21829 ;; *************** function ___lwdiv *****************
 21830 ;; Defined at:
 21831 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 21832 ;; Parameters:    Size  Location     Type
 21833 ;;  dividend        2   25[COMRAM] unsigned int 
 21834 ;;  divisor         2   27[COMRAM] unsigned int 
 21835 ;; Auto vars:     Size  Location     Type
 21836 ;;  quotient        2   30[COMRAM] unsigned int 
 21837 ;;  counter         1   29[COMRAM] unsigned char 
 21838 ;; Return value:  Size  Location     Type
 21839 ;;                  2   25[COMRAM] unsigned int 
 21840 ;; Registers used:
 21841 ;;		wreg, status,2, status,0
 21842 ;; Tracked objects:
 21843 ;;		On entry : 0/0
 21844 ;;		On exit  : 0/0
 21845 ;;		Unchanged: 0/0
 21846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21847 ;;      Params:         4       0       0       0       0       0       0       0       0
 21848 ;;      Locals:         3       0       0       0       0       0       0       0       0
 21849 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21850 ;;      Totals:         7       0       0       0       0       0       0       0       0
 21851 ;;Total ram usage:        7 bytes
 21852 ;; Hardware stack levels used:    1
 21853 ;; Hardware stack levels required when called:    2
 21854 ;; This function calls:
 21855 ;;		Nothing
 21856 ;; This function is called by:
 21857 ;;		_utoa
 21858 ;;		_converte_inteiro_matriz
 21859 ;; This function uses a non-reentrant model
 21860 ;;
 21861                           
 21862                           	psect	text76
 21863  005626                     __ptext76:
 21864                           	opt stack 0
 21865  005626                     ___lwdiv:
 21866                           	opt stack 20
 21867                           
 21868                           ;incstack = 0
 21869  005626  0E00               	movlw	0
 21870  005628  6E20               	movwf	___lwdiv@quotient+1,c
 21871  00562A  0E00               	movlw	0
 21872  00562C  6E1F               	movwf	___lwdiv@quotient,c
 21873  00562E  501C               	movf	___lwdiv@divisor,w,c
 21874  005630  101D               	iorwf	___lwdiv@divisor+1,w,c
 21875  005632  B4D8               	btfsc	status,2,c
 21876  005634  D01C               	goto	l2372
 21877  005636  0E01               	movlw	1
 21878  005638  6E1E               	movwf	___lwdiv@counter,c
 21879  00563A  D004               	goto	l2367
 21880  00563C  90D8               	bcf	status,0,c
 21881  00563E  361C               	rlcf	___lwdiv@divisor,f,c
 21882  005640  361D               	rlcf	___lwdiv@divisor+1,f,c
 21883  005642  2A1E               	incf	___lwdiv@counter,f,c
 21884  005644                     l2367:
 21885  005644  AE1D               	btfss	___lwdiv@divisor+1,7,c
 21886  005646  D7FA               	goto	l2368
 21887  005648                     u15230:
 21888  005648  90D8               	bcf	status,0,c
 21889  00564A  361F               	rlcf	___lwdiv@quotient,f,c
 21890  00564C  3620               	rlcf	___lwdiv@quotient+1,f,c
 21891  00564E  501C               	movf	___lwdiv@divisor,w,c
 21892  005650  5C1A               	subwf	___lwdiv@dividend,w,c
 21893  005652  501D               	movf	___lwdiv@divisor+1,w,c
 21894  005654  581B               	subwfb	___lwdiv@dividend+1,w,c
 21895  005656  A0D8               	btfss	status,0,c
 21896  005658  D005               	goto	l2371
 21897  00565A  501C               	movf	___lwdiv@divisor,w,c
 21898  00565C  5E1A               	subwf	___lwdiv@dividend,f,c
 21899  00565E  501D               	movf	___lwdiv@divisor+1,w,c
 21900  005660  5A1B               	subwfb	___lwdiv@dividend+1,f,c
 21901  005662  801F               	bsf	___lwdiv@quotient,0,c
 21902  005664                     l2371:
 21903  005664  90D8               	bcf	status,0,c
 21904  005666  321D               	rrcf	___lwdiv@divisor+1,f,c
 21905  005668  321C               	rrcf	___lwdiv@divisor,f,c
 21906  00566A  2E1E               	decfsz	___lwdiv@counter,f,c
 21907  00566C  D7ED               	goto	u15230
 21908  00566E                     l2372:
 21909  00566E  C01F  F01A         	movff	___lwdiv@quotient,?___lwdiv
 21910  005672  C020  F01B         	movff	___lwdiv@quotient+1,?___lwdiv+1
 21911  005676  0012               	return		;funcret
 21912  005678                     __end_of___lwdiv:
 21913                           	opt stack 0
 21914                           tosu	equ	0xFFF
 21915                           tosh	equ	0xFFE
 21916                           tosl	equ	0xFFD
 21917                           pclath	equ	0xFFA
 21918                           tblptru	equ	0xFF8
 21919                           tblptrh	equ	0xFF7
 21920                           tblptrl	equ	0xFF6
 21921                           tablat	equ	0xFF5
 21922                           prodh	equ	0xFF4
 21923                           prodl	equ	0xFF3
 21924                           intcon	equ	0xFF2
 21925                           intcon2	equ	0xFF1
 21926                           intcon3	equ	0xFF0
 21927                           indf0	equ	0xFEF
 21928                           postinc0	equ	0xFEE
 21929                           fsr0h	equ	0xFEA
 21930                           fsr0l	equ	0xFE9
 21931                           wreg	equ	0xFE8
 21932                           indf1	equ	0xFE7
 21933                           postinc1	equ	0xFE6
 21934                           postdec1	equ	0xFE5
 21935                           plusw1	equ	0xFE3
 21936                           fsr1h	equ	0xFE2
 21937                           fsr1l	equ	0xFE1
 21938                           indf2	equ	0xFDF
 21939                           postinc2	equ	0xFDE
 21940                           postdec2	equ	0xFDD
 21941                           plusw2	equ	0xFDB
 21942                           fsr2h	equ	0xFDA
 21943                           fsr2l	equ	0xFD9
 21944                           status	equ	0xFD8
 21945                           
 21946 ;; *************** function _escreve_frase_ram_lcd *****************
 21947 ;; Defined at:
 21948 ;;		line 445 in file "bibliotecas/display_lcd.c"
 21949 ;; Parameters:    Size  Location     Type
 21950 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 21951 ;;		 -> STR_25(3), sdc_disk_read@arr(512), STR_24(6), STR_23(11), 
 21952 ;;		 -> STR_22(10), STR_21(11), STR_20(7), STR_19(6), 
 21953 ;;		 -> STR_18(16), STR_17(11), escreve_inteiro_lcd@texto(7), leitura_chave@pos_ignicao_on(17), 
 21954 ;;		 -> leitura_chave@pos_ignicao_crank(17), leitura_chave@pos_ignicao_off(17), STR_15(17), STR_14(9), 
 21955 ;;		 -> STR_12(11), RAM(2047), STR_5(5), gps@gps_buffer(15), 
 21956 ;;		 -> dado_buffer(7), STR_2(6), data_buffer(15), STR_1(6), 
 21957 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 21958 ;; Auto vars:     Size  Location     Type
 21959 ;;		None
 21960 ;; Return value:  Size  Location     Type
 21961 ;;                  1    wreg      void 
 21962 ;; Registers used:
 21963 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21964 ;; Tracked objects:
 21965 ;;		On entry : 0/0
 21966 ;;		On exit  : 0/0
 21967 ;;		Unchanged: 0/0
 21968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21969 ;;      Params:         2       0       0       0       0       0       0       0       0
 21970 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21971 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21972 ;;      Totals:         2       0       0       0       0       0       0       0       0
 21973 ;;Total ram usage:        2 bytes
 21974 ;; Hardware stack levels used:    1
 21975 ;; Hardware stack levels required when called:    4
 21976 ;; This function calls:
 21977 ;;		_escreve_caractere_lcd
 21978 ;; This function is called by:
 21979 ;;		_mensagem_inicial
 21980 ;;		_SDCard
 21981 ;;		_escreve_inteiro_lcd
 21982 ;;		_sdc_reset
 21983 ;;		_sdc_disk_initialize
 21984 ;;		_sdc_disk_read
 21985 ;;		_sdc_disk_write
 21986 ;;		_gps
 21987 ;;		_inicializa_SPI
 21988 ;;		_leitura_chave
 21989 ;; This function uses a non-reentrant model
 21990 ;;
 21991                           
 21992                           	psect	text77
 21993  005678                     __ptext77:
 21994                           	opt stack 0
 21995  005678                     _escreve_frase_ram_lcd:
 21996                           	opt stack 25
 21997                           
 21998                           ;display_lcd.c: 447: while(*buffer)
 21999                           
 22000                           ;incstack = 0
 22001  005678  D014               	goto	l564
 22002  00567A                     
 22003                           ;display_lcd.c: 448: {
 22004                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 22005  00567A  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 22006  00567E  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 22007  005682  6AF8               	clrf	tblptru,c
 22008  005684  0E07               	movlw	(high __ramtop+-1)
 22009  005686  64F7               	cpfsgt	tblptrh,c
 22010  005688  D003               	bra	u15297
 22011  00568A  0008               	tblrd		*
 22012  00568C  50F5               	movf	tablat,w,c
 22013  00568E  D005               	bra	u15290
 22014  005690                     u15297:
 22015  005690  CFF6 FFE9          	movff	tblptrl,fsr0l
 22016  005694  CFF7 FFEA          	movff	tblptrh,fsr0h
 22017  005698  50EF               	movf	indf0,w,c
 22018  00569A                     u15290:
 22019  00569A  EC7F  F029         	call	_escreve_caractere_lcd
 22020                           
 22021                           ;display_lcd.c: 450: buffer++;
 22022  00569E  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 22023  0056A0  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 22024  0056A2                     l564:
 22025  0056A2  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 22026  0056A6  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 22027  0056AA  6AF8               	clrf	tblptru,c
 22028  0056AC  0E07               	movlw	(high __ramtop+-1)
 22029  0056AE  64F7               	cpfsgt	tblptrh,c
 22030  0056B0  D003               	bra	u15307
 22031  0056B2  0008               	tblrd		*
 22032  0056B4  50F5               	movf	tablat,w,c
 22033  0056B6  D005               	bra	u15300
 22034  0056B8                     u15307:
 22035  0056B8  CFF6 FFE9          	movff	tblptrl,fsr0l
 22036  0056BC  CFF7 FFEA          	movff	tblptrh,fsr0h
 22037  0056C0  50EF               	movf	indf0,w,c
 22038  0056C2                     u15300:
 22039  0056C2  0900               	iorlw	0
 22040  0056C4  B4D8               	btfsc	status,2,c
 22041  0056C6  0012               	return	
 22042  0056C8  D7D8               	goto	l565
 22043  0056CA                     __end_of_escreve_frase_ram_lcd:
 22044                           	opt stack 0
 22045                           tosu	equ	0xFFF
 22046                           tosh	equ	0xFFE
 22047                           tosl	equ	0xFFD
 22048                           pclath	equ	0xFFA
 22049                           tblptru	equ	0xFF8
 22050                           tblptrh	equ	0xFF7
 22051                           tblptrl	equ	0xFF6
 22052                           tablat	equ	0xFF5
 22053                           prodh	equ	0xFF4
 22054                           prodl	equ	0xFF3
 22055                           intcon	equ	0xFF2
 22056                           intcon2	equ	0xFF1
 22057                           intcon3	equ	0xFF0
 22058                           indf0	equ	0xFEF
 22059                           postinc0	equ	0xFEE
 22060                           fsr0h	equ	0xFEA
 22061                           fsr0l	equ	0xFE9
 22062                           wreg	equ	0xFE8
 22063                           indf1	equ	0xFE7
 22064                           postinc1	equ	0xFE6
 22065                           postdec1	equ	0xFE5
 22066                           plusw1	equ	0xFE3
 22067                           fsr1h	equ	0xFE2
 22068                           fsr1l	equ	0xFE1
 22069                           indf2	equ	0xFDF
 22070                           postinc2	equ	0xFDE
 22071                           postdec2	equ	0xFDD
 22072                           plusw2	equ	0xFDB
 22073                           fsr2h	equ	0xFDA
 22074                           fsr2l	equ	0xFD9
 22075                           status	equ	0xFD8
 22076                           
 22077 ;; *************** function _escreve_caractere_lcd *****************
 22078 ;; Defined at:
 22079 ;;		line 323 in file "bibliotecas/display_lcd.c"
 22080 ;; Parameters:    Size  Location     Type
 22081 ;;  data            1    wreg     unsigned char 
 22082 ;; Auto vars:     Size  Location     Type
 22083 ;;  data            1   27[COMRAM] unsigned char 
 22084 ;; Return value:  Size  Location     Type
 22085 ;;                  1    wreg      void 
 22086 ;; Registers used:
 22087 ;;		wreg, status,2, status,0, cstack
 22088 ;; Tracked objects:
 22089 ;;		On entry : 0/0
 22090 ;;		On exit  : 0/0
 22091 ;;		Unchanged: 0/0
 22092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22093 ;;      Params:         0       0       0       0       0       0       0       0       0
 22094 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22095 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22096 ;;      Totals:         1       0       0       0       0       0       0       0       0
 22097 ;;Total ram usage:        1 bytes
 22098 ;; Hardware stack levels used:    1
 22099 ;; Hardware stack levels required when called:    3
 22100 ;; This function calls:
 22101 ;;		_delay
 22102 ;; This function is called by:
 22103 ;;		_escreve_frase_ram_lcd
 22104 ;;		_escreve_float_lcd
 22105 ;;		_escreve_frase_lcd
 22106 ;;		_cria_caractere_lcd
 22107 ;; This function uses a non-reentrant model
 22108 ;;
 22109                           
 22110                           	psect	text78
 22111  0052FE                     __ptext78:
 22112                           	opt stack 0
 22113  0052FE                     _escreve_caractere_lcd:
 22114                           	opt stack 25
 22115                           
 22116                           ;incstack = 0
 22117                           ;escreve_caractere_lcd@data stored from wreg
 22118  0052FE  6E1C               	movwf	escreve_caractere_lcd@data,c
 22119                           
 22120                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 22121  005300  9483               	bcf	3971,2,c	;volatile
 22122                           
 22123                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 22124  005302  8283               	bsf	3971,1,c	;volatile
 22125                           
 22126                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 22127  005304  9083               	bcf	3971,0,c	;volatile
 22128                           
 22129                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 22130  005306  A81C               	btfss	escreve_caractere_lcd@data,4,c
 22131  005308  D002               	goto	l531
 22132  00530A  8883               	bsf	3971,4,c	;volatile
 22133  00530C  D001               	goto	l532
 22134  00530E                     l531:
 22135                           
 22136                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 22137  00530E  9883               	bcf	3971,4,c	;volatile
 22138  005310                     l532:
 22139                           
 22140                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 22141  005310  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 22142  005312  D002               	goto	l533
 22143  005314  8A83               	bsf	3971,5,c	;volatile
 22144  005316  D001               	goto	l534
 22145  005318                     l533:
 22146                           
 22147                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 22148  005318  9A83               	bcf	3971,5,c	;volatile
 22149  00531A                     l534:
 22150                           
 22151                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 22152  00531A  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 22153  00531C  D002               	goto	l535
 22154  00531E  8C83               	bsf	3971,6,c	;volatile
 22155  005320  D001               	goto	l536
 22156  005322                     l535:
 22157                           
 22158                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 22159  005322  9C83               	bcf	3971,6,c	;volatile
 22160  005324                     l536:
 22161                           
 22162                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 22163  005324  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 22164  005326  D002               	goto	l537
 22165  005328  8E83               	bsf	3971,7,c	;volatile
 22166  00532A  D001               	goto	l538
 22167  00532C                     l537:
 22168                           
 22169                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 22170  00532C  9E83               	bcf	3971,7,c	;volatile
 22171  00532E                     l538:
 22172                           
 22173                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 22174  00532E  8083               	bsf	3971,0,c	;volatile
 22175                           
 22176                           ;display_lcd.c: 342: delay();
 22177  005330  EC4F  F02D         	call	_delay	;wreg free
 22178                           
 22179                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 22180  005334  9083               	bcf	3971,0,c	;volatile
 22181                           
 22182                           ;display_lcd.c: 344: delay();
 22183  005336  EC4F  F02D         	call	_delay	;wreg free
 22184                           
 22185                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 22186  00533A  A01C               	btfss	escreve_caractere_lcd@data,0,c
 22187  00533C  D002               	goto	l539
 22188  00533E  8883               	bsf	3971,4,c	;volatile
 22189  005340  D001               	goto	l540
 22190  005342                     l539:
 22191                           
 22192                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 22193  005342  9883               	bcf	3971,4,c	;volatile
 22194  005344                     l540:
 22195                           
 22196                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 22197  005344  A21C               	btfss	escreve_caractere_lcd@data,1,c
 22198  005346  D002               	goto	l541
 22199  005348  8A83               	bsf	3971,5,c	;volatile
 22200  00534A  D001               	goto	l542
 22201  00534C                     l541:
 22202                           
 22203                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 22204  00534C  9A83               	bcf	3971,5,c	;volatile
 22205  00534E                     l542:
 22206                           
 22207                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 22208  00534E  A41C               	btfss	escreve_caractere_lcd@data,2,c
 22209  005350  D002               	goto	l543
 22210  005352  8C83               	bsf	3971,6,c	;volatile
 22211  005354  D001               	goto	l544
 22212  005356                     l543:
 22213                           
 22214                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 22215  005356  9C83               	bcf	3971,6,c	;volatile
 22216  005358                     l544:
 22217                           
 22218                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 22219  005358  A61C               	btfss	escreve_caractere_lcd@data,3,c
 22220  00535A  D002               	goto	l545
 22221  00535C  8E83               	bsf	3971,7,c	;volatile
 22222  00535E  D001               	goto	l546
 22223  005360                     l545:
 22224                           
 22225                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 22226  005360  9E83               	bcf	3971,7,c	;volatile
 22227  005362                     l546:
 22228                           
 22229                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 22230  005362  8083               	bsf	3971,0,c	;volatile
 22231                           
 22232                           ;display_lcd.c: 359: delay();
 22233  005364  EC4F  F02D         	call	_delay	;wreg free
 22234                           
 22235                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 22236  005368  9083               	bcf	3971,0,c	;volatile
 22237                           
 22238                           ;display_lcd.c: 361: delay();
 22239  00536A  EC4F  F02D         	call	_delay	;wreg free
 22240  00536E  0012               	return		;funcret
 22241  005370                     __end_of_escreve_caractere_lcd:
 22242                           	opt stack 0
 22243                           tosu	equ	0xFFF
 22244                           tosh	equ	0xFFE
 22245                           tosl	equ	0xFFD
 22246                           pclath	equ	0xFFA
 22247                           tblptru	equ	0xFF8
 22248                           tblptrh	equ	0xFF7
 22249                           tblptrl	equ	0xFF6
 22250                           tablat	equ	0xFF5
 22251                           prodh	equ	0xFF4
 22252                           prodl	equ	0xFF3
 22253                           intcon	equ	0xFF2
 22254                           intcon2	equ	0xFF1
 22255                           intcon3	equ	0xFF0
 22256                           indf0	equ	0xFEF
 22257                           postinc0	equ	0xFEE
 22258                           fsr0h	equ	0xFEA
 22259                           fsr0l	equ	0xFE9
 22260                           wreg	equ	0xFE8
 22261                           indf1	equ	0xFE7
 22262                           postinc1	equ	0xFE6
 22263                           postdec1	equ	0xFE5
 22264                           plusw1	equ	0xFE3
 22265                           fsr1h	equ	0xFE2
 22266                           fsr1l	equ	0xFE1
 22267                           indf2	equ	0xFDF
 22268                           postinc2	equ	0xFDE
 22269                           postdec2	equ	0xFDD
 22270                           plusw2	equ	0xFDB
 22271                           fsr2h	equ	0xFDA
 22272                           fsr2l	equ	0xFD9
 22273                           status	equ	0xFD8
 22274                           
 22275 ;; *************** function _delay *****************
 22276 ;; Defined at:
 22277 ;;		line 45 in file "bibliotecas/display_lcd.c"
 22278 ;; Parameters:    Size  Location     Type
 22279 ;;		None
 22280 ;; Auto vars:     Size  Location     Type
 22281 ;;  contador_int    1   26[COMRAM] unsigned char 
 22282 ;;  contador_ext    1   25[COMRAM] unsigned char 
 22283 ;; Return value:  Size  Location     Type
 22284 ;;                  1    wreg      void 
 22285 ;; Registers used:
 22286 ;;		wreg, status,2, status,0
 22287 ;; Tracked objects:
 22288 ;;		On entry : 0/0
 22289 ;;		On exit  : 0/0
 22290 ;;		Unchanged: 0/0
 22291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22292 ;;      Params:         0       0       0       0       0       0       0       0       0
 22293 ;;      Locals:         2       0       0       0       0       0       0       0       0
 22294 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22295 ;;      Totals:         2       0       0       0       0       0       0       0       0
 22296 ;;Total ram usage:        2 bytes
 22297 ;; Hardware stack levels used:    1
 22298 ;; Hardware stack levels required when called:    2
 22299 ;; This function calls:
 22300 ;;		Nothing
 22301 ;; This function is called by:
 22302 ;;		_init_lcd
 22303 ;;		_escreve_cmd_lcd
 22304 ;;		_endereco_cursor_lcd
 22305 ;;		_escreve_caractere_lcd
 22306 ;; This function uses a non-reentrant model
 22307 ;;
 22308                           
 22309                           	psect	text79
 22310  005A9E                     __ptext79:
 22311                           	opt stack 0
 22312  005A9E                     _delay:
 22313                           	opt stack 25
 22314                           
 22315                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 22316                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 22317                           
 22318                           ;incstack = 0
 22319  005A9E  0E00               	movlw	0
 22320  005AA0  6E1A               	movwf	delay@contador_ext,c
 22321  005AA2                     l11898:
 22322  005AA2  0E63               	movlw	99
 22323  005AA4  641A               	cpfsgt	delay@contador_ext,c
 22324  005AA6  D001               	goto	l470
 22325  005AA8  0012               	return	
 22326  005AAA                     l470:
 22327                           
 22328                           ;display_lcd.c: 50: {
 22329                           ;display_lcd.c: 51: __nop();
 22330  005AAA  F000               	nop	
 22331                           
 22332                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 22333  005AAC  0E00               	movlw	0
 22334  005AAE  6E1B               	movwf	delay@contador_int,c
 22335  005AB0                     l11904:
 22336  005AB0  0E31               	movlw	49
 22337  005AB2  641B               	cpfsgt	delay@contador_int,c
 22338  005AB4  D001               	goto	l472
 22339  005AB6  D003               	goto	u15000
 22340  005AB8                     l472:
 22341                           
 22342                           ;display_lcd.c: 53: {
 22343                           ;display_lcd.c: 54: __nop();
 22344  005AB8  F000               	nop	
 22345  005ABA  2A1B               	incf	delay@contador_int,f,c
 22346  005ABC  D7F9               	goto	l11904
 22347  005ABE                     u15000:
 22348  005ABE  2A1A               	incf	delay@contador_ext,f,c
 22349  005AC0  D7F0               	goto	l11898
 22350  005AC2                     __end_of_delay:
 22351                           	opt stack 0
 22352                           tosu	equ	0xFFF
 22353                           tosh	equ	0xFFE
 22354                           tosl	equ	0xFFD
 22355                           pclath	equ	0xFFA
 22356                           tblptru	equ	0xFF8
 22357                           tblptrh	equ	0xFF7
 22358                           tblptrl	equ	0xFF6
 22359                           tablat	equ	0xFF5
 22360                           prodh	equ	0xFF4
 22361                           prodl	equ	0xFF3
 22362                           intcon	equ	0xFF2
 22363                           intcon2	equ	0xFF1
 22364                           intcon3	equ	0xFF0
 22365                           indf0	equ	0xFEF
 22366                           postinc0	equ	0xFEE
 22367                           fsr0h	equ	0xFEA
 22368                           fsr0l	equ	0xFE9
 22369                           wreg	equ	0xFE8
 22370                           indf1	equ	0xFE7
 22371                           postinc1	equ	0xFE6
 22372                           postdec1	equ	0xFE5
 22373                           plusw1	equ	0xFE3
 22374                           fsr1h	equ	0xFE2
 22375                           fsr1l	equ	0xFE1
 22376                           indf2	equ	0xFDF
 22377                           postinc2	equ	0xFDE
 22378                           postdec2	equ	0xFDD
 22379                           plusw2	equ	0xFDB
 22380                           fsr2h	equ	0xFDA
 22381                           fsr2l	equ	0xFD9
 22382                           status	equ	0xFD8
 22383                           
 22384 ;; *************** function _get_fattime *****************
 22385 ;; Defined at:
 22386 ;;		line 3359 in file "bibliotecas/ff.c"
 22387 ;; Parameters:    Size  Location     Type
 22388 ;;		None
 22389 ;; Auto vars:     Size  Location     Type
 22390 ;;  f_time          9   29[COMRAM] struct .
 22391 ;; Return value:  Size  Location     Type
 22392 ;;                  4   25[COMRAM] unsigned long 
 22393 ;; Registers used:
 22394 ;;		wreg, status,2, status,0
 22395 ;; Tracked objects:
 22396 ;;		On entry : 0/0
 22397 ;;		On exit  : 0/0
 22398 ;;		Unchanged: 0/0
 22399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22400 ;;      Params:         4       0       0       0       0       0       0       0       0
 22401 ;;      Locals:         9       0       0       0       0       0       0       0       0
 22402 ;;      Temps:          0      38       0       0       0       0       0       0       0
 22403 ;;      Totals:        13      38       0       0       0       0       0       0       0
 22404 ;;Total ram usage:       51 bytes
 22405 ;; Hardware stack levels used:    1
 22406 ;; Hardware stack levels required when called:    2
 22407 ;; This function calls:
 22408 ;;		Nothing
 22409 ;; This function is called by:
 22410 ;;		_f_open
 22411 ;;		_f_sync
 22412 ;;		_f_mkdir
 22413 ;; This function uses a non-reentrant model
 22414 ;;
 22415                           
 22416                           	psect	text80
 22417  004434                     __ptext80:
 22418                           	opt stack 0
 22419  004434                     _get_fattime:
 22420                           	opt stack 25
 22421                           
 22422                           ;ff.c: 3361: fat_time f_time;
 22423                           ;ff.c: 3363: return (DWORD)(f_time.ano ) << 25 |
 22424                           ;ff.c: 3364: (DWORD)(f_time.mes) << 21 |
 22425                           ;ff.c: 3365: (DWORD)(f_time.mes) << 16 |
 22426                           ;ff.c: 3366: (DWORD)(f_time.hora) << 11 |
 22427                           ;ff.c: 3367: (DWORD)(f_time.min) << 5 |
 22428                           ;ff.c: 3368: (DWORD)(f_time.seg) >> 1;
 22429                           
 22430                           ;incstack = 0
 22431  004434  90D8               	bcf	status,0,c
 22432  004436  3023               	rrcf	get_fattime@f_time+5,w,c
 22433  004438  0100               	movlb	0	; () banked
 22434  00443A  6F61               	movwf	(??_get_fattime+1)& (0+255),b
 22435  00443C  3022               	rrcf	get_fattime@f_time+4,w,c
 22436  00443E  6F60               	movwf	??_get_fattime& (0+255),b
 22437  004440  5020               	movf	get_fattime@f_time+2,w,c
 22438  004442  6F62               	movwf	(??_get_fattime+2)& (0+255),b
 22439  004444  5021               	movf	get_fattime@f_time+3,w,c
 22440  004446  6F63               	movwf	(??_get_fattime+3)& (0+255),b
 22441  004448  6B64               	clrf	(??_get_fattime+4)& (0+255),b
 22442  00444A  6B65               	clrf	(??_get_fattime+5)& (0+255),b
 22443  00444C  0E05               	movlw	5
 22444  00444E                     u17735:
 22445  00444E  90D8               	bcf	status,0,c
 22446  004450  3762               	rlcf	(??_get_fattime+2)& (0+255),f,b
 22447  004452  3763               	rlcf	(??_get_fattime+3)& (0+255),f,b
 22448  004454  3764               	rlcf	(??_get_fattime+4)& (0+255),f,b
 22449  004456  3765               	rlcf	(??_get_fattime+5)& (0+255),f,b
 22450  004458  2EE8               	decfsz	wreg,f,c
 22451  00445A  D7F9               	goto	u17735
 22452  00445C  501E               	movf	get_fattime@f_time,w,c
 22453  00445E  6F66               	movwf	(??_get_fattime+6)& (0+255),b
 22454  004460  501F               	movf	get_fattime@f_time+1,w,c
 22455  004462  6F67               	movwf	(??_get_fattime+7)& (0+255),b
 22456  004464  6B68               	clrf	(??_get_fattime+8)& (0+255),b
 22457  004466  6B69               	clrf	(??_get_fattime+9)& (0+255),b
 22458  004468  0E0B               	movlw	11
 22459  00446A                     u17745:
 22460  00446A  90D8               	bcf	status,0,c
 22461  00446C  3766               	rlcf	(??_get_fattime+6)& (0+255),f,b
 22462  00446E  3767               	rlcf	(??_get_fattime+7)& (0+255),f,b
 22463  004470  3768               	rlcf	(??_get_fattime+8)& (0+255),f,b
 22464  004472  3769               	rlcf	(??_get_fattime+9)& (0+255),f,b
 22465  004474  2EE8               	decfsz	wreg,f,c
 22466  004476  D7F9               	goto	u17745
 22467  004478  C025  F06A         	movff	get_fattime@f_time+7,??_get_fattime+10
 22468  00447C  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 22469  00447E  6B6C               	clrf	(??_get_fattime+12)& (0+255),b
 22470  004480  6B6D               	clrf	(??_get_fattime+13)& (0+255),b
 22471  004482  C06B  F06D         	movff	??_get_fattime+11,??_get_fattime+13
 22472  004486  C06A  F06C         	movff	??_get_fattime+10,??_get_fattime+12
 22473  00448A  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 22474  00448C  6B6A               	clrf	(??_get_fattime+10)& (0+255),b
 22475  00448E  C025  F06E         	movff	get_fattime@f_time+7,??_get_fattime+14
 22476  004492  6B6F               	clrf	(??_get_fattime+15)& (0+255),b
 22477  004494  6B70               	clrf	(??_get_fattime+16)& (0+255),b
 22478  004496  6B71               	clrf	(??_get_fattime+17)& (0+255),b
 22479  004498  0E15               	movlw	21
 22480  00449A                     u17755:
 22481  00449A  90D8               	bcf	status,0,c
 22482  00449C  376E               	rlcf	(??_get_fattime+14)& (0+255),f,b
 22483  00449E  376F               	rlcf	(??_get_fattime+15)& (0+255),f,b
 22484  0044A0  3770               	rlcf	(??_get_fattime+16)& (0+255),f,b
 22485  0044A2  3771               	rlcf	(??_get_fattime+17)& (0+255),f,b
 22486  0044A4  2EE8               	decfsz	wreg,f,c
 22487  0044A6  D7F9               	goto	u17755
 22488  0044A8  C026  F072         	movff	get_fattime@f_time+8,??_get_fattime+18
 22489  0044AC  6B73               	clrf	(??_get_fattime+19)& (0+255),b
 22490  0044AE  6B74               	clrf	(??_get_fattime+20)& (0+255),b
 22491  0044B0  6B75               	clrf	(??_get_fattime+21)& (0+255),b
 22492  0044B2  0E19               	movlw	25
 22493  0044B4                     u17765:
 22494  0044B4  90D8               	bcf	status,0,c
 22495  0044B6  3772               	rlcf	(??_get_fattime+18)& (0+255),f,b
 22496  0044B8  3773               	rlcf	(??_get_fattime+19)& (0+255),f,b
 22497  0044BA  3774               	rlcf	(??_get_fattime+20)& (0+255),f,b
 22498  0044BC  3775               	rlcf	(??_get_fattime+21)& (0+255),f,b
 22499  0044BE  2EE8               	decfsz	wreg,f,c
 22500  0044C0  D7F9               	goto	u17765
 22501  0044C2  516E               	movf	(??_get_fattime+14)& (0+255),w,b
 22502  0044C4  1172               	iorwf	(??_get_fattime+18)& (0+255),w,b
 22503  0044C6  6F76               	movwf	(??_get_fattime+22)& (0+255),b
 22504  0044C8  516F               	movf	(??_get_fattime+15)& (0+255),w,b
 22505  0044CA  1173               	iorwf	(??_get_fattime+19)& (0+255),w,b
 22506  0044CC  6F77               	movwf	(??_get_fattime+23)& (0+255),b
 22507  0044CE  5170               	movf	(??_get_fattime+16)& (0+255),w,b
 22508  0044D0  1174               	iorwf	(??_get_fattime+20)& (0+255),w,b
 22509  0044D2  6F78               	movwf	(??_get_fattime+24)& (0+255),b
 22510  0044D4  5171               	movf	(??_get_fattime+17)& (0+255),w,b
 22511  0044D6  1175               	iorwf	(??_get_fattime+21)& (0+255),w,b
 22512  0044D8  6F79               	movwf	(??_get_fattime+25)& (0+255),b
 22513  0044DA  516A               	movf	(??_get_fattime+10)& (0+255),w,b
 22514  0044DC  1176               	iorwf	(??_get_fattime+22)& (0+255),w,b
 22515  0044DE  6F7A               	movwf	(??_get_fattime+26)& (0+255),b
 22516  0044E0  516B               	movf	(??_get_fattime+11)& (0+255),w,b
 22517  0044E2  1177               	iorwf	(??_get_fattime+23)& (0+255),w,b
 22518  0044E4  6F7B               	movwf	(??_get_fattime+27)& (0+255),b
 22519  0044E6  516C               	movf	(??_get_fattime+12)& (0+255),w,b
 22520  0044E8  1178               	iorwf	(??_get_fattime+24)& (0+255),w,b
 22521  0044EA  6F7C               	movwf	(??_get_fattime+28)& (0+255),b
 22522  0044EC  516D               	movf	(??_get_fattime+13)& (0+255),w,b
 22523  0044EE  1179               	iorwf	(??_get_fattime+25)& (0+255),w,b
 22524  0044F0  6F7D               	movwf	(??_get_fattime+29)& (0+255),b
 22525  0044F2  5166               	movf	(??_get_fattime+6)& (0+255),w,b
 22526  0044F4  117A               	iorwf	(??_get_fattime+26)& (0+255),w,b
 22527  0044F6  6F7E               	movwf	(??_get_fattime+30)& (0+255),b
 22528  0044F8  5167               	movf	(??_get_fattime+7)& (0+255),w,b
 22529  0044FA  117B               	iorwf	(??_get_fattime+27)& (0+255),w,b
 22530  0044FC  6F7F               	movwf	(??_get_fattime+31)& (0+255),b
 22531  0044FE  5168               	movf	(??_get_fattime+8)& (0+255),w,b
 22532  004500  117C               	iorwf	(??_get_fattime+28)& (0+255),w,b
 22533  004502  6F80               	movwf	(??_get_fattime+32)& (0+255),b
 22534  004504  5169               	movf	(??_get_fattime+9)& (0+255),w,b
 22535  004506  117D               	iorwf	(??_get_fattime+29)& (0+255),w,b
 22536  004508  6F81               	movwf	(??_get_fattime+33)& (0+255),b
 22537  00450A  5162               	movf	(??_get_fattime+2)& (0+255),w,b
 22538  00450C  117E               	iorwf	(??_get_fattime+30)& (0+255),w,b
 22539  00450E  6F82               	movwf	(??_get_fattime+34)& (0+255),b
 22540  004510  5163               	movf	(??_get_fattime+3)& (0+255),w,b
 22541  004512  117F               	iorwf	(??_get_fattime+31)& (0+255),w,b
 22542  004514  6F83               	movwf	(??_get_fattime+35)& (0+255),b
 22543  004516  5164               	movf	(??_get_fattime+4)& (0+255),w,b
 22544  004518  1180               	iorwf	(??_get_fattime+32)& (0+255),w,b
 22545  00451A  6F84               	movwf	(??_get_fattime+36)& (0+255),b
 22546  00451C  5165               	movf	(??_get_fattime+5)& (0+255),w,b
 22547  00451E  1181               	iorwf	(??_get_fattime+33)& (0+255),w,b
 22548  004520  6F85               	movwf	(??_get_fattime+37)& (0+255),b
 22549  004522  5160               	movf	??_get_fattime& (0+255),w,b
 22550  004524  1182               	iorwf	(??_get_fattime+34)& (0+255),w,b
 22551  004526  6E1A               	movwf	?_get_fattime,c
 22552  004528  5161               	movf	(??_get_fattime+1)& (0+255),w,b
 22553  00452A  1183               	iorwf	(??_get_fattime+35)& (0+255),w,b
 22554  00452C  6E1B               	movwf	?_get_fattime+1,c
 22555  00452E  0E00               	movlw	0
 22556  004530  1184               	iorwf	(??_get_fattime+36)& (0+255),w,b
 22557  004532  6E1C               	movwf	?_get_fattime+2,c
 22558  004534  0E00               	movlw	0
 22559  004536  1185               	iorwf	(??_get_fattime+37)& (0+255),w,b
 22560  004538  6E1D               	movwf	?_get_fattime+3,c
 22561  00453A  0012               	return	
 22562  00453C                     __end_of_get_fattime:
 22563                           	opt stack 0
 22564                           tosu	equ	0xFFF
 22565                           tosh	equ	0xFFE
 22566                           tosl	equ	0xFFD
 22567                           pclath	equ	0xFFA
 22568                           tblptru	equ	0xFF8
 22569                           tblptrh	equ	0xFF7
 22570                           tblptrl	equ	0xFF6
 22571                           tablat	equ	0xFF5
 22572                           prodh	equ	0xFF4
 22573                           prodl	equ	0xFF3
 22574                           intcon	equ	0xFF2
 22575                           intcon2	equ	0xFF1
 22576                           intcon3	equ	0xFF0
 22577                           indf0	equ	0xFEF
 22578                           postinc0	equ	0xFEE
 22579                           fsr0h	equ	0xFEA
 22580                           fsr0l	equ	0xFE9
 22581                           wreg	equ	0xFE8
 22582                           indf1	equ	0xFE7
 22583                           postinc1	equ	0xFE6
 22584                           postdec1	equ	0xFE5
 22585                           plusw1	equ	0xFE3
 22586                           fsr1h	equ	0xFE2
 22587                           fsr1l	equ	0xFE1
 22588                           indf2	equ	0xFDF
 22589                           postinc2	equ	0xFDE
 22590                           postdec2	equ	0xFDD
 22591                           plusw2	equ	0xFDB
 22592                           fsr2h	equ	0xFDA
 22593                           fsr2l	equ	0xFD9
 22594                           status	equ	0xFD8
 22595                           
 22596 ;; *************** function _isr *****************
 22597 ;; Defined at:
 22598 ;;		line 96 in file "main.c"
 22599 ;; Parameters:    Size  Location     Type
 22600 ;;		None
 22601 ;; Auto vars:     Size  Location     Type
 22602 ;;  cont            1   24[COMRAM] unsigned char 
 22603 ;; Return value:  Size  Location     Type
 22604 ;;                  1    wreg      void 
 22605 ;; Registers used:
 22606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22607 ;; Tracked objects:
 22608 ;;		On entry : 0/0
 22609 ;;		On exit  : 0/0
 22610 ;;		Unchanged: 0/0
 22611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22612 ;;      Params:         0       0       0       0       0       0       0       0       0
 22613 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22614 ;;      Temps:         20       0       0       0       0       0       0       0       0
 22615 ;;      Totals:        21       0       0       0       0       0       0       0       0
 22616 ;;Total ram usage:       21 bytes
 22617 ;; Hardware stack levels used:    1
 22618 ;; Hardware stack levels required when called:    1
 22619 ;; This function calls:
 22620 ;;		_recebe_dado_uart
 22621 ;;		i2_write_timer_zero
 22622 ;; This function is called by:
 22623 ;;		Interrupt level 2
 22624 ;; This function uses a non-reentrant model
 22625 ;;
 22626                           
 22627                           	psect	intcode
 22628  000008                     __pintcode:
 22629                           	opt stack 0
 22630  000008                     _isr:
 22631                           	opt stack 14
 22632                           
 22633                           ; BSR set to: 0
 22634                           ;incstack = 0
 22635  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22636  00000A  ED00  F021         	call	int_func,f	;refresh shadow registers
 22637                           tosu	equ	0xFFF
 22638                           tosh	equ	0xFFE
 22639                           tosl	equ	0xFFD
 22640                           pclath	equ	0xFFA
 22641                           tblptru	equ	0xFF8
 22642                           tblptrh	equ	0xFF7
 22643                           tblptrl	equ	0xFF6
 22644                           tablat	equ	0xFF5
 22645                           prodh	equ	0xFF4
 22646                           prodl	equ	0xFF3
 22647                           intcon	equ	0xFF2
 22648                           intcon2	equ	0xFF1
 22649                           intcon3	equ	0xFF0
 22650                           indf0	equ	0xFEF
 22651                           postinc0	equ	0xFEE
 22652                           fsr0h	equ	0xFEA
 22653                           fsr0l	equ	0xFE9
 22654                           wreg	equ	0xFE8
 22655                           indf1	equ	0xFE7
 22656                           postinc1	equ	0xFE6
 22657                           postdec1	equ	0xFE5
 22658                           plusw1	equ	0xFE3
 22659                           fsr1h	equ	0xFE2
 22660                           fsr1l	equ	0xFE1
 22661                           indf2	equ	0xFDF
 22662                           postinc2	equ	0xFDE
 22663                           postdec2	equ	0xFDD
 22664                           plusw2	equ	0xFDB
 22665                           fsr2h	equ	0xFDA
 22666                           fsr2l	equ	0xFD9
 22667                           status	equ	0xFD8
 22668                           
 22669                           	psect	intcode_body
 22670  004200                     __pintcode_body:
 22671                           	opt stack 14
 22672  004200                     int_func:
 22673                           	opt stack 14
 22674  004200  0006               	pop		; remove dummy address from shadow register refresh
 22675  004202  CFFA F007          	movff	pclath,??_isr+2
 22676  004206  CFFB F008          	movff	pclatu,??_isr+3
 22677  00420A  CFE9 F009          	movff	fsr0l,??_isr+4
 22678  00420E  CFEA F00A          	movff	fsr0h,??_isr+5
 22679  004212  CFE1 F00B          	movff	fsr1l,??_isr+6
 22680  004216  CFE2 F00C          	movff	fsr1h,??_isr+7
 22681  00421A  CFD9 F00D          	movff	fsr2l,??_isr+8
 22682  00421E  CFDA F00E          	movff	fsr2h,??_isr+9
 22683  004222  CFF3 F00F          	movff	prodl,??_isr+10
 22684  004226  CFF4 F010          	movff	prodh,??_isr+11
 22685  00422A  CFF6 F011          	movff	tblptrl,??_isr+12
 22686  00422E  CFF7 F012          	movff	tblptrh,??_isr+13
 22687  004232  CFF8 F013          	movff	tblptru,??_isr+14
 22688  004236  CFF5 F014          	movff	tablat,??_isr+15
 22689  00423A  C046  F015         	movff	btemp,??_isr+16
 22690  00423E  C047  F016         	movff	btemp+1,??_isr+17
 22691  004242  C048  F017         	movff	btemp+2,??_isr+18
 22692  004246  C049  F018         	movff	btemp+3,??_isr+19
 22693                           
 22694                           ;main.c: 98: unsigned char cont;
 22695                           ;main.c: 101: if (PIE1bits.RCIE && PIR1bits.RCIF)
 22696  00424A  BA9D               	btfsc	3997,5,c	;volatile
 22697  00424C  AA9E               	btfss	3998,5,c	;volatile
 22698  00424E  D004               	goto	i2l61
 22699                           
 22700                           ;main.c: 102: {
 22701                           ;main.c: 103: data_uart_recebe = recebe_dado_uart();
 22702  004250  ECB9  F02D         	call	_recebe_dado_uart	;wreg free
 22703  004254  6E45               	movwf	_data_uart_recebe,c
 22704                           
 22705                           ;main.c: 104: PIR1bits.RCIF = 0;
 22706  004256  9A9E               	bcf	3998,5,c	;volatile
 22707  004258                     i2l61:
 22708                           
 22709                           ;main.c: 109: }
 22710                           ;main.c: 112: unsigned char cont;
 22711                           ;main.c: 114: if (TMR0IF && T0IF)
 22712  004258  B4F2               	btfsc	intcon,2,c	;volatile
 22713  00425A  A4F2               	btfss	intcon,2,c	;volatile
 22714  00425C  D037               	goto	i2l62
 22715                           
 22716                           ;main.c: 115: {
 22717                           ;main.c: 116: INTCONbits.TMR0IF = 0;
 22718  00425E  94F2               	bcf	intcon,2,c	;volatile
 22719                           
 22720                           ;main.c: 117: sinaliza_int_timer = 1;
 22721  004260  0E01               	movlw	1
 22722  004262  6E44               	movwf	_sinaliza_int_timer,c
 22723                           
 22724                           ;main.c: 119: for(cont= 0; cont<2;cont++)
 22725  004264  0E00               	movlw	0
 22726  004266  6E19               	movwf	isr@cont,c
 22727  004268                     i2l10140:
 22728  004268  0E01               	movlw	1
 22729  00426A  6419               	cpfsgt	isr@cont,c
 22730  00426C  D001               	goto	i2l63
 22731  00426E  D019               	goto	i2u1210_40
 22732  004270                     i2l63:
 22733                           
 22734                           ;main.c: 120: {
 22735                           ;main.c: 121: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 22736  004270  5019               	movf	isr@cont,w,c
 22737  004272  0D02               	mullw	2
 22738  004274  0EF8               	movlw	low _tempo_tarefa
 22739  004276  24F3               	addwf	prodl,w,c
 22740  004278  6ED9               	movwf	fsr2l,c
 22741  00427A  0E00               	movlw	high _tempo_tarefa
 22742  00427C  20F4               	addwfc	prodh,w,c
 22743  00427E  6EDA               	movwf	fsr2h,c
 22744  004280  50DE               	movf	postinc2,w,c
 22745  004282  10DE               	iorwf	postinc2,w,c
 22746  004284  B4D8               	btfsc	status,2,c
 22747  004286  D00B               	goto	i2l65
 22748  004288  5019               	movf	isr@cont,w,c
 22749  00428A  0D02               	mullw	2
 22750  00428C  0EF8               	movlw	low _tempo_tarefa
 22751  00428E  24F3               	addwf	prodl,w,c
 22752  004290  6ED9               	movwf	fsr2l,c
 22753  004292  0E00               	movlw	high _tempo_tarefa
 22754  004294  20F4               	addwfc	prodh,w,c
 22755  004296  6EDA               	movwf	fsr2h,c
 22756  004298  06DE               	decf	postinc2,f,c
 22757  00429A  0E00               	movlw	0
 22758  00429C  5ADD               	subwfb	postdec2,f,c
 22759  00429E                     i2l65:
 22760  00429E  2A19               	incf	isr@cont,f,c
 22761  0042A0  D7E3               	goto	i2l10140
 22762  0042A2                     i2u1210_40:
 22763                           
 22764                           ;main.c: 122: }
 22765                           ;main.c: 125: if(tarefa_em_execucao == 1)
 22766  0042A2  0443               	decf	_tarefa_em_execucao,w,c	;volatile
 22767  0042A4  A4D8               	btfss	status,2,c
 22768  0042A6  D00C               	goto	i2l67
 22769                           
 22770                           ;main.c: 126: {
 22771                           ;main.c: 127: timeout_tarefa--;
 22772  0042A8  0100               	movlb	0	; () banked
 22773  0042AA  07FE               	decf	_timeout_tarefa& (0+255),f,b
 22774  0042AC  A0D8               	btfss	status,0,c
 22775  0042AE  07FF               	decf	(_timeout_tarefa+1)& (0+255),f,b
 22776                           
 22777                           ; BSR set to: 0
 22778                           ;main.c: 128: if(!timeout_tarefa)
 22779  0042B0  51FE               	movf	_timeout_tarefa& (0+255),w,b
 22780  0042B2  11FF               	iorwf	(_timeout_tarefa+1)& (0+255),w,b
 22781  0042B4  A4D8               	btfss	status,2,c
 22782  0042B6  D004               	goto	i2l67
 22783                           
 22784                           ; BSR set to: 0
 22785                           ;main.c: 129: {
 22786                           ;main.c: 131: PCLATH = 0;
 22787  0042B8  0E00               	movlw	0
 22788  0042BA  6EFA               	movwf	pclath,c	;volatile
 22789                           
 22790                           ;main.c: 132: PCL = 0;
 22791  0042BC  0E00               	movlw	0
 22792  0042BE  6EF9               	movwf	pcl,c	;volatile
 22793  0042C0                     i2l67:
 22794                           
 22795                           ;main.c: 133: }
 22796                           ;main.c: 134: }
 22797                           ;main.c: 137: write_timer_zero(0x0083);
 22798                           
 22799                           ; BSR set to: 0
 22800                           
 22801                           ; BSR set to: 0
 22802  0042C0  0E00               	movlw	0
 22803  0042C2  6E02               	movwf	i2write_timer_zero@timer0+1,c
 22804  0042C4  0E83               	movlw	131
 22805  0042C6  6E01               	movwf	i2write_timer_zero@timer0,c
 22806  0042C8  ECB0  F02D         	call	i2_write_timer_zero	;wreg free
 22807  0042CC                     i2l62:
 22808                           
 22809                           ;main.c: 139: }
 22810                           ;main.c: 141: if (INT0IF && INT0IE)
 22811  0042CC  B2F2               	btfsc	intcon,1,c	;volatile
 22812  0042CE  A8F2               	btfss	intcon,4,c	;volatile
 22813  0042D0  D001               	goto	i2l68
 22814                           
 22815                           ;main.c: 142: {
 22816                           ;main.c: 143: INT0IF = 0;
 22817  0042D2  92F2               	bcf	intcon,1,c	;volatile
 22818  0042D4                     i2l68:
 22819  0042D4  C018  F049         	movff	??_isr+19,btemp+3
 22820  0042D8  C017  F048         	movff	??_isr+18,btemp+2
 22821  0042DC  C016  F047         	movff	??_isr+17,btemp+1
 22822  0042E0  C015  F046         	movff	??_isr+16,btemp
 22823  0042E4  C014  FFF5         	movff	??_isr+15,tablat
 22824  0042E8  C013  FFF8         	movff	??_isr+14,tblptru
 22825  0042EC  C012  FFF7         	movff	??_isr+13,tblptrh
 22826  0042F0  C011  FFF6         	movff	??_isr+12,tblptrl
 22827  0042F4  C010  FFF4         	movff	??_isr+11,prodh
 22828  0042F8  C00F  FFF3         	movff	??_isr+10,prodl
 22829  0042FC  C00E  FFDA         	movff	??_isr+9,fsr2h
 22830  004300  C00D  FFD9         	movff	??_isr+8,fsr2l
 22831  004304  C00C  FFE2         	movff	??_isr+7,fsr1h
 22832  004308  C00B  FFE1         	movff	??_isr+6,fsr1l
 22833  00430C  C00A  FFEA         	movff	??_isr+5,fsr0h
 22834  004310  C009  FFE9         	movff	??_isr+4,fsr0l
 22835  004314  C008  FFFB         	movff	??_isr+3,pclatu
 22836  004318  C007  FFFA         	movff	??_isr+2,pclath
 22837  00431C  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22838  00431E  0011               	retfie		f
 22839  004320                     __end_of_isr:
 22840                           	opt stack 0
 22841                           tosu	equ	0xFFF
 22842                           tosh	equ	0xFFE
 22843                           tosl	equ	0xFFD
 22844                           pclatu	equ	0xFFB
 22845                           pclath	equ	0xFFA
 22846                           pcl	equ	0xFF9
 22847                           tblptru	equ	0xFF8
 22848                           tblptrh	equ	0xFF7
 22849                           tblptrl	equ	0xFF6
 22850                           tablat	equ	0xFF5
 22851                           prodh	equ	0xFF4
 22852                           prodl	equ	0xFF3
 22853                           intcon	equ	0xFF2
 22854                           intcon2	equ	0xFF1
 22855                           intcon3	equ	0xFF0
 22856                           indf0	equ	0xFEF
 22857                           postinc0	equ	0xFEE
 22858                           fsr0h	equ	0xFEA
 22859                           fsr0l	equ	0xFE9
 22860                           wreg	equ	0xFE8
 22861                           indf1	equ	0xFE7
 22862                           postinc1	equ	0xFE6
 22863                           postdec1	equ	0xFE5
 22864                           plusw1	equ	0xFE3
 22865                           fsr1h	equ	0xFE2
 22866                           fsr1l	equ	0xFE1
 22867                           indf2	equ	0xFDF
 22868                           postinc2	equ	0xFDE
 22869                           postdec2	equ	0xFDD
 22870                           plusw2	equ	0xFDB
 22871                           fsr2h	equ	0xFDA
 22872                           fsr2l	equ	0xFD9
 22873                           status	equ	0xFD8
 22874                           
 22875 ;; *************** function i2_write_timer_zero *****************
 22876 ;; Defined at:
 22877 ;;		line 138 in file "bibliotecas/hardware.c"
 22878 ;; Parameters:    Size  Location     Type
 22879 ;;  timer0          2    0[COMRAM] unsigned int 
 22880 ;; Auto vars:     Size  Location     Type
 22881 ;;  write_timer_    2    2[COMRAM] struct Timers
 22882 ;; Return value:  Size  Location     Type
 22883 ;;                  1    wreg      void 
 22884 ;; Registers used:
 22885 ;;		None
 22886 ;; Tracked objects:
 22887 ;;		On entry : 0/0
 22888 ;;		On exit  : 0/0
 22889 ;;		Unchanged: 0/0
 22890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22891 ;;      Params:         2       0       0       0       0       0       0       0       0
 22892 ;;      Locals:         2       0       0       0       0       0       0       0       0
 22893 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22894 ;;      Totals:         4       0       0       0       0       0       0       0       0
 22895 ;;Total ram usage:        4 bytes
 22896 ;; Hardware stack levels used:    1
 22897 ;; This function calls:
 22898 ;;		Nothing
 22899 ;; This function is called by:
 22900 ;;		_isr
 22901 ;; This function uses a non-reentrant model
 22902 ;;
 22903                           
 22904                           	psect	text82
 22905  005B60                     __ptext82:
 22906                           	opt stack 0
 22907  005B60                     i2_write_timer_zero:
 22908                           	opt stack 14
 22909                           
 22910                           ;hardware.c: 140: union Timers timer;
 22911                           ;hardware.c: 142: timer.lt = timer0;
 22912                           
 22913                           ;incstack = 0
 22914  005B60  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 22915  005B64  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 22916                           
 22917                           ;hardware.c: 144: TMR0H = timer.bt[1];
 22918  005B68  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 22919                           
 22920                           ;hardware.c: 145: TMR0L = timer.bt[0];
 22921  005B6C  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 22922  005B70  0012               	return		;funcret
 22923  005B72                     __end_ofi2_write_timer_zero:
 22924                           	opt stack 0
 22925                           tosu	equ	0xFFF
 22926                           tosh	equ	0xFFE
 22927                           tosl	equ	0xFFD
 22928                           pclatu	equ	0xFFB
 22929                           pclath	equ	0xFFA
 22930                           pcl	equ	0xFF9
 22931                           tblptru	equ	0xFF8
 22932                           tblptrh	equ	0xFF7
 22933                           tblptrl	equ	0xFF6
 22934                           tablat	equ	0xFF5
 22935                           prodh	equ	0xFF4
 22936                           prodl	equ	0xFF3
 22937                           intcon	equ	0xFF2
 22938                           intcon2	equ	0xFF1
 22939                           intcon3	equ	0xFF0
 22940                           indf0	equ	0xFEF
 22941                           postinc0	equ	0xFEE
 22942                           fsr0h	equ	0xFEA
 22943                           fsr0l	equ	0xFE9
 22944                           wreg	equ	0xFE8
 22945                           indf1	equ	0xFE7
 22946                           postinc1	equ	0xFE6
 22947                           postdec1	equ	0xFE5
 22948                           plusw1	equ	0xFE3
 22949                           fsr1h	equ	0xFE2
 22950                           fsr1l	equ	0xFE1
 22951                           indf2	equ	0xFDF
 22952                           postinc2	equ	0xFDE
 22953                           postdec2	equ	0xFDD
 22954                           plusw2	equ	0xFDB
 22955                           fsr2h	equ	0xFDA
 22956                           fsr2l	equ	0xFD9
 22957                           status	equ	0xFD8
 22958                           
 22959 ;; *************** function _recebe_dado_uart *****************
 22960 ;; Defined at:
 22961 ;;		line 138 in file "bibliotecas/uart.c"
 22962 ;; Parameters:    Size  Location     Type
 22963 ;;		None
 22964 ;; Auto vars:     Size  Location     Type
 22965 ;;		None
 22966 ;; Return value:  Size  Location     Type
 22967 ;;                  1    wreg      unsigned char 
 22968 ;; Registers used:
 22969 ;;		wreg, status,2
 22970 ;; Tracked objects:
 22971 ;;		On entry : 0/0
 22972 ;;		On exit  : 0/0
 22973 ;;		Unchanged: 0/0
 22974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22975 ;;      Params:         0       0       0       0       0       0       0       0       0
 22976 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22977 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22978 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22979 ;;Total ram usage:        0 bytes
 22980 ;; Hardware stack levels used:    1
 22981 ;; This function calls:
 22982 ;;		Nothing
 22983 ;; This function is called by:
 22984 ;;		_isr
 22985 ;;		_recebe_string_uart
 22986 ;; This function uses a non-reentrant model
 22987 ;;
 22988                           
 22989                           	psect	text83
 22990  005B72                     __ptext83:
 22991                           	opt stack 0
 22992  005B72                     _recebe_dado_uart:
 22993                           	opt stack 14
 22994                           
 22995                           ;uart.c: 140: while(RCIF==0);
 22996                           
 22997                           ;incstack = 0
 22998  005B72  AA9E               	btfss	3998,5,c	;volatile
 22999  005B74  D7FE               	goto	_recebe_dado_uart
 23000                           
 23001                           ;uart.c: 141: if(RCSTAbits.OERR)
 23002  005B76  A2AB               	btfss	4011,1,c	;volatile
 23003  005B78  D003               	goto	i2l788
 23004                           
 23005                           ;uart.c: 142: {
 23006                           ;uart.c: 143: CREN = 0;
 23007  005B7A  98AB               	bcf	4011,4,c	;volatile
 23008                           
 23009                           ;uart.c: 144: __nop();
 23010  005B7C  F000               	nop	
 23011                           
 23012                           ;uart.c: 145: CREN=1;
 23013  005B7E  88AB               	bsf	4011,4,c	;volatile
 23014  005B80                     i2l788:
 23015                           
 23016                           ;uart.c: 146: }
 23017                           ;uart.c: 147: return(RCREG);
 23018  005B80  50AE               	movf	4014,w,c	;volatile
 23019  005B82  0012               	return	
 23020  005B84                     __end_of_recebe_dado_uart:
 23021                           	opt stack 0
 23022                           tosu	equ	0xFFF
 23023                           tosh	equ	0xFFE
 23024                           tosl	equ	0xFFD
 23025                           pclatu	equ	0xFFB
 23026                           pclath	equ	0xFFA
 23027                           pcl	equ	0xFF9
 23028                           tblptru	equ	0xFF8
 23029                           tblptrh	equ	0xFF7
 23030                           tblptrl	equ	0xFF6
 23031                           tablat	equ	0xFF5
 23032                           prodh	equ	0xFF4
 23033                           prodl	equ	0xFF3
 23034                           intcon	equ	0xFF2
 23035                           intcon2	equ	0xFF1
 23036                           intcon3	equ	0xFF0
 23037                           indf0	equ	0xFEF
 23038                           postinc0	equ	0xFEE
 23039                           fsr0h	equ	0xFEA
 23040                           fsr0l	equ	0xFE9
 23041                           wreg	equ	0xFE8
 23042                           indf1	equ	0xFE7
 23043                           postinc1	equ	0xFE6
 23044                           postdec1	equ	0xFE5
 23045                           plusw1	equ	0xFE3
 23046                           fsr1h	equ	0xFE2
 23047                           fsr1l	equ	0xFE1
 23048                           indf2	equ	0xFDF
 23049                           postinc2	equ	0xFDE
 23050                           postdec2	equ	0xFDD
 23051                           plusw2	equ	0xFDB
 23052                           fsr2h	equ	0xFDA
 23053                           fsr2l	equ	0xFD9
 23054                           status	equ	0xFD8
 23055                           tosu	equ	0xFFF
 23056                           tosh	equ	0xFFE
 23057                           tosl	equ	0xFFD
 23058                           pclatu	equ	0xFFB
 23059                           pclath	equ	0xFFA
 23060                           pcl	equ	0xFF9
 23061                           tblptru	equ	0xFF8
 23062                           tblptrh	equ	0xFF7
 23063                           tblptrl	equ	0xFF6
 23064                           tablat	equ	0xFF5
 23065                           prodh	equ	0xFF4
 23066                           prodl	equ	0xFF3
 23067                           intcon	equ	0xFF2
 23068                           intcon2	equ	0xFF1
 23069                           intcon3	equ	0xFF0
 23070                           indf0	equ	0xFEF
 23071                           postinc0	equ	0xFEE
 23072                           fsr0h	equ	0xFEA
 23073                           fsr0l	equ	0xFE9
 23074                           wreg	equ	0xFE8
 23075                           indf1	equ	0xFE7
 23076                           postinc1	equ	0xFE6
 23077                           postdec1	equ	0xFE5
 23078                           plusw1	equ	0xFE3
 23079                           fsr1h	equ	0xFE2
 23080                           fsr1l	equ	0xFE1
 23081                           indf2	equ	0xFDF
 23082                           postinc2	equ	0xFDE
 23083                           postdec2	equ	0xFDD
 23084                           plusw2	equ	0xFDB
 23085                           fsr2h	equ	0xFDA
 23086                           fsr2l	equ	0xFD9
 23087                           status	equ	0xFD8
 23088                           
 23089                           	psect	text84
 23090  000000                     __ptext84:
 23091                           	opt stack 0
 23092                           tosu	equ	0xFFF
 23093                           tosh	equ	0xFFE
 23094                           tosl	equ	0xFFD
 23095                           pclatu	equ	0xFFB
 23096                           pclath	equ	0xFFA
 23097                           pcl	equ	0xFF9
 23098                           tblptru	equ	0xFF8
 23099                           tblptrh	equ	0xFF7
 23100                           tblptrl	equ	0xFF6
 23101                           tablat	equ	0xFF5
 23102                           prodh	equ	0xFF4
 23103                           prodl	equ	0xFF3
 23104                           intcon	equ	0xFF2
 23105                           intcon2	equ	0xFF1
 23106                           intcon3	equ	0xFF0
 23107                           indf0	equ	0xFEF
 23108                           postinc0	equ	0xFEE
 23109                           fsr0h	equ	0xFEA
 23110                           fsr0l	equ	0xFE9
 23111                           wreg	equ	0xFE8
 23112                           indf1	equ	0xFE7
 23113                           postinc1	equ	0xFE6
 23114                           postdec1	equ	0xFE5
 23115                           plusw1	equ	0xFE3
 23116                           fsr1h	equ	0xFE2
 23117                           fsr1l	equ	0xFE1
 23118                           indf2	equ	0xFDF
 23119                           postinc2	equ	0xFDE
 23120                           postdec2	equ	0xFDD
 23121                           plusw2	equ	0xFDB
 23122                           fsr2h	equ	0xFDA
 23123                           fsr2l	equ	0xFD9
 23124                           status	equ	0xFD8
 23125                           
 23126                           	psect	rparam
 23127  0000                     tosu	equ	0xFFF
 23128                           tosh	equ	0xFFE
 23129                           tosl	equ	0xFFD
 23130                           pclatu	equ	0xFFB
 23131                           pclath	equ	0xFFA
 23132                           pcl	equ	0xFF9
 23133                           tblptru	equ	0xFF8
 23134                           tblptrh	equ	0xFF7
 23135                           tblptrl	equ	0xFF6
 23136                           tablat	equ	0xFF5
 23137                           prodh	equ	0xFF4
 23138                           prodl	equ	0xFF3
 23139                           intcon	equ	0xFF2
 23140                           intcon2	equ	0xFF1
 23141                           intcon3	equ	0xFF0
 23142                           indf0	equ	0xFEF
 23143                           postinc0	equ	0xFEE
 23144                           fsr0h	equ	0xFEA
 23145                           fsr0l	equ	0xFE9
 23146                           wreg	equ	0xFE8
 23147                           indf1	equ	0xFE7
 23148                           postinc1	equ	0xFE6
 23149                           postdec1	equ	0xFE5
 23150                           plusw1	equ	0xFE3
 23151                           fsr1h	equ	0xFE2
 23152                           fsr1l	equ	0xFE1
 23153                           indf2	equ	0xFDF
 23154                           postinc2	equ	0xFDE
 23155                           postdec2	equ	0xFDD
 23156                           plusw2	equ	0xFDB
 23157                           fsr2h	equ	0xFDA
 23158                           fsr2l	equ	0xFD9
 23159                           status	equ	0xFD8
 23160                           
 23161                           	psect	temp
 23162  000046                     btemp:
 23163                           	opt stack 0
 23164  000046                     	ds	1
 23165  0000                     int$flags	set	btemp
 23166  0000                     wtemp6	set	btemp+1
 23167                           tosu	equ	0xFFF
 23168                           tosh	equ	0xFFE
 23169                           tosl	equ	0xFFD
 23170                           pclatu	equ	0xFFB
 23171                           pclath	equ	0xFFA
 23172                           pcl	equ	0xFF9
 23173                           tblptru	equ	0xFF8
 23174                           tblptrh	equ	0xFF7
 23175                           tblptrl	equ	0xFF6
 23176                           tablat	equ	0xFF5
 23177                           prodh	equ	0xFF4
 23178                           prodl	equ	0xFF3
 23179                           intcon	equ	0xFF2
 23180                           intcon2	equ	0xFF1
 23181                           intcon3	equ	0xFF0
 23182                           indf0	equ	0xFEF
 23183                           postinc0	equ	0xFEE
 23184                           fsr0h	equ	0xFEA
 23185                           fsr0l	equ	0xFE9
 23186                           wreg	equ	0xFE8
 23187                           indf1	equ	0xFE7
 23188                           postinc1	equ	0xFE6
 23189                           postdec1	equ	0xFE5
 23190                           plusw1	equ	0xFE3
 23191                           fsr1h	equ	0xFE2
 23192                           fsr1l	equ	0xFE1
 23193                           indf2	equ	0xFDF
 23194                           postinc2	equ	0xFDE
 23195                           postdec2	equ	0xFDD
 23196                           plusw2	equ	0xFDB
 23197                           fsr2h	equ	0xFDA
 23198                           fsr2l	equ	0xFD9
 23199                           status	equ	0xFD8


Data Sizes:
    Strings     224
    Constant    229
    Data        29
    BSS         1461
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      69
    BANK0           160    152     160
    BANK1           256     93     230
    BANK2           256      0     250
    BANK3           256     37      37
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    SDCard@fil.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_open@dj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_stat@dj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_unlink@dj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_unlink@sdj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_mkdir@dj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_rename@djo.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_rename@djn.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    escalonador$4799	PTR FTN()void  size(2) Largest target is 1
		 -> SDCard(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    djn.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    djn.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    djo.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    djo.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sdj.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sdj.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_truncate@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_truncate@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_readdir@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_readdir@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_closedir@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_closedir@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_opendir@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_opendir@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_lseek@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_close@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_close@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_close@fp	PTR struct . size(2) Largest target is 36
		 -> SDCard@fil(BANK3[34]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_sync@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_sync@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_sync@fp	PTR struct . size(2) Largest target is 36
		 -> SDCard@fil(BANK3[34]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_write@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_write@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_write@fp	PTR struct . size(2) Largest target is 36
		 -> SDCard@fil(BANK3[34]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    f_write@buff	PTR const void  size(2) Largest target is 2
		 -> STR_13(CODE[2]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_13(CODE[2]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_read@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_open@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_open@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_11(CODE[11]), STR_10(CODE[3]), 

    f_open@fp	PTR struct . size(2) Largest target is 36
		 -> SDCard@fil(BANK3[34]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_mount@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_11(CODE[11]), STR_10(CODE[3]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_11(CODE[11]), STR_10(CODE[3]), 

    validate$3072	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    validate@rfs	PTR PTR struct . size(2) Largest target is 2
		 -> f_truncate@fs(COMRAM[2]), f_readdir@fs(COMRAM[2]), f_closedir@fs(COMRAM[2]), f_lseek@fs(COMRAM[2]), 
		 -> f_close@fs(BANK0[2]), f_sync@fs(BANK0[2]), f_write@fs(BANK1[2]), f_read@fs(COMRAM[2]), 

    validate@obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    validate@obj	PTR struct . size(2) Largest target is 36
		 -> SDCard@fil(BANK3[34]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    FatFs	PTR struct .[1] size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    find_volume@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_rename@path_old(COMRAM[2]), f_mkdir@path(COMRAM[2]), f_unlink@path(COMRAM[2]), f_getfree@path(COMRAM[2]), 
		 -> f_stat@path(COMRAM[2]), f_opendir@path(COMRAM[2]), f_open@path(BANK1[2]), f_mount@path(BANK0[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 42
		 -> f_rename@fs(COMRAM[2]), f_mkdir@fs(COMRAM[2]), f_unlink@fs(COMRAM[2]), f_getfree@fs(COMRAM[2]), 
		 -> dj.obj(COMRAM[15]), f_stat@dj(COMRAM[40]), f_opendir@fs(COMRAM[2]), f_open@fs(BANK1[2]), 
		 -> f_mount@fs(BANK0[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    get_ldnumber@sp	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_34(CODE[5]), STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[3]), STR_29(CODE[3]), STR_28(CODE[5]), STR_27(CODE[4]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_11(CODE[11]), STR_10(CODE[3]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_11(CODE[11]), STR_10(CODE[3]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_rename@path_old(COMRAM[2]), f_rename@path_new(COMRAM[2]), f_mkdir@path(COMRAM[2]), f_unlink@path(COMRAM[2]), 
		 -> f_getfree@path(COMRAM[2]), f_stat@path(COMRAM[2]), f_opendir@path(COMRAM[2]), f_open@path(BANK1[2]), 
		 -> f_mount@path(BANK0[2]), f_mount@rp(BANK0[2]), 

    get_ldnumber@volid	const PTR const unsigned char [8] size(2) Largest target is 5
		 -> STR_34(CODE[5]), STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[3]), STR_29(CODE[3]), STR_28(CODE[5]), STR_27(CODE[4]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_11(CODE[11]), STR_10(CODE[3]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    follow_path@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    follow_path@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_unlink@dj(COMRAM[40]), 
		 -> f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    follow_path@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    create_name@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    create_name@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_unlink@dj(COMRAM[40]), 
		 -> f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 42
		 -> djn.fn(COMRAM[12]), f_rename@djn(COMRAM[40]), djo.fn(COMRAM[12]), f_rename@djo(COMRAM[40]), 
		 -> dj.fn(COMRAM[12]), f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_unlink@dj(COMRAM[40]), 
		 -> dj.fn(COMRAM[12]), f_stat@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_11(CODE[11]), STR_10(CODE[3]), 

    get_fileinfo@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    get_fileinfo@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_remove@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_remove@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_register@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_register@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    dir_register@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_find@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_find@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_unlink@dj(COMRAM[40]), 
		 -> f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    dir_find@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_read@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_read@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    st_clust@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_alloc@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    dir_alloc@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_next@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_next@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_unlink@sdj(COMRAM[40]), 
		 -> f_unlink@dj(COMRAM[40]), f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    dir_next@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    S2228$dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_sdi@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_unlink@sdj(COMRAM[40]), 
		 -> f_unlink@dj(COMRAM[40]), f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    dir_sdi@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_clear@ibuf	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_clear@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    create_chain@obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    create_chain@obj	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_unlink@sdj(COMRAM[40]), 
		 -> f_unlink@dj(COMRAM[40]), f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), SDCard@fil(BANK3[34]), 

    create_chain@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    remove_chain@obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    remove_chain@obj	PTR struct . size(2) Largest target is 42
		 -> f_mkdir@dj(COMRAM[40]), f_unlink@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    put_fat@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    get_fat@obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    get_fat@obj	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_unlink@sdj(COMRAM[40]), 
		 -> f_unlink@dj(COMRAM[40]), f_getfree@obj(COMRAM[14]), f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), 
		 -> SDCard@fil(BANK3[34]), 

    get_fat@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    clst2sect@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    move_window@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sync_window@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_26(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 42
		 -> djn.fn(COMRAM[12]), f_rename@djn(COMRAM[40]), djo.fn(COMRAM[12]), f_rename@djo(COMRAM[40]), 
		 -> dj.fn(COMRAM[12]), f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_unlink@dj(COMRAM[40]), 
		 -> dj.fn(COMRAM[12]), f_stat@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), 
		 -> STR_36(CODE[6]), STR_35(CODE[4]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 42
		 -> djn.fn(COMRAM[12]), f_rename@djn(COMRAM[40]), djo.fn(COMRAM[12]), f_rename@djo(COMRAM[40]), 
		 -> dj.fn(COMRAM[12]), f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_unlink@dj(COMRAM[40]), 
		 -> dj.fn(COMRAM[12]), f_stat@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), 
		 -> STR_36(CODE[6]), STR_35(CODE[4]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    mem_set@dst	PTR void  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), djn.fn(COMRAM[12]), f_rename@djn(COMRAM[40]), djo.fn(COMRAM[12]), 
		 -> f_rename@djo(COMRAM[40]), dj.fn(COMRAM[12]), f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_unlink@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_stat@dj(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_open@dj(BANK1[40]), NULL(NULL[0]), fs(BIGRAM[559]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), djn.fn(COMRAM[12]), f_rename@djn(COMRAM[40]), djo.fn(COMRAM[12]), 
		 -> f_rename@djo(COMRAM[40]), dj.fn(COMRAM[12]), f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_unlink@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_stat@dj(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_open@dj(BANK1[40]), NULL(NULL[0]), fs(BIGRAM[559]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), djn.fn(COMRAM[12]), f_rename@djn(COMRAM[40]), f_rename@buf(COMRAM[32]), 
		 -> f_rename@djo(COMRAM[40]), dj.fn(COMRAM[12]), f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_open@dj(BANK1[40]), NULL(NULL[0]), STR_13(CODE[2]), fs(BIGRAM[559]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), djn.fn(COMRAM[12]), f_rename@djn(COMRAM[40]), f_rename@buf(COMRAM[32]), 
		 -> f_rename@djo(COMRAM[40]), dj.fn(COMRAM[12]), f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_open@dj(BANK1[40]), NULL(NULL[0]), STR_13(CODE[2]), fs(BIGRAM[559]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), f_rename@djn(COMRAM[40]), f_rename@buf(COMRAM[32]), NULL(NULL[0]), 
		 -> fs(BIGRAM[559]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), f_rename@djn(COMRAM[40]), f_rename@buf(COMRAM[32]), NULL(NULL[0]), 
		 -> fs(BIGRAM[559]), 

    st_dword@ptr	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    st_word@ptr	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    ld_dword@ptr	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    ld_word@ptr	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), STR_13(CODE[2]), fs(BIGRAM[559]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), STR_13(CODE[2]), fs(BIGRAM[559]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 2047
		 -> STR_25(CODE[3]), sdc_disk_read@arr(BIGRAM[512]), STR_24(CODE[6]), STR_23(CODE[11]), 
		 -> STR_22(CODE[10]), STR_21(CODE[11]), STR_20(CODE[7]), STR_19(CODE[6]), 
		 -> STR_18(CODE[16]), STR_17(CODE[11]), escreve_inteiro_lcd@texto(BANK0[7]), leitura_chave@pos_ignicao_on(COMRAM[17]), 
		 -> leitura_chave@pos_ignicao_crank(COMRAM[17]), leitura_chave@pos_ignicao_off(COMRAM[17]), STR_15(CODE[17]), STR_14(CODE[9]), 
		 -> STR_12(CODE[11]), RAM(DATA[2047]), STR_5(CODE[5]), gps@gps_buffer(COMRAM[15]), 
		 -> dado_buffer(BANK1[7]), STR_2(CODE[6]), data_buffer(BANK1[15]), STR_1(CODE[6]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    S676$dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    S669$fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    fil.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    sp__memset	PTR void  size(2) Largest target is 15
		 -> gps@gps_buffer(COMRAM[15]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> SDCard(), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _SDCard->_escreve_inteiro_lcd
    _f_write->_sync_window
    _ld_clust->_ld_word
    _create_name->_mem_set
    _dir_clear->_sync_window
    _clst2sect->___lmul
    _find_volume->_escreve_inteiro_lcd
    _sdc_disk_initialize->_escreve_inteiro_lcd
    _sdc_reset->_escreve_inteiro_lcd
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sync_fs->_sync_window
    _st_dword->_get_fattime
    _st_clust->_st_word
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_escreve_inteiro_lcd
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _response->_recebe_dado_SPI
    _proceed->_escreve_dado_SPI
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_cmd_lcd->_delay
    _dummy_clocks->_escreve_dado_SPI
    _command->_escreve_dado_SPI
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _f_write->_create_chain
    _f_open->_dir_register
    _remove_chain->_put_fat
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _dir_clear->_sync_window
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_escreve_inteiro_lcd
    _check_fs->_move_window
    _f_close->_f_sync
    _f_sync->_sync_fs
    _sync_fs->_st_dword
    _st_dword->_get_fattime
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_sdc_disk_write
    _disk_read->_escreve_inteiro_lcd
    _escreve_inteiro_lcd->_itoa

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_escalonador
    _SDCard->_f_open
    _f_open->_follow_path

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _escalonador->_SDCard

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1447775
                        _escalonador
                    _inicializa_shrc
                 _inicializa_tarefas
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    7183
                                             31 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_shrc                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0 1439784
                                             90 BANK1      3     3      0
                             _SDCard *
 ---------------------------------------------------------------------------------
 (2) _SDCard                                              37    37      0 1439561
                                              0 BANK3     37    37      0
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                            _f_close
                            _f_mount
                             _f_open
                            _f_write
                 _posicao_cursor_lcd
                            _proceed
 ---------------------------------------------------------------------------------
 (3) _f_write                                             47    39      8  177628
                                            108 BANK0     24    16      8
                                              0 BANK1     23    23      0
                          _clst2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_open                                              82    77      5 1011672
                                              8 BANK1     82    77      5
                          _clst2sect
                       _dir_register
                        _find_volume
                        _follow_path
                            _get_fat
                        _get_fattime
                           _ld_clust
                           _ld_dword
                        _move_window
                       _remove_chain
                           _st_clust
                           _st_dword
 ---------------------------------------------------------------------------------
 (4) _remove_chain                                        25    15     10   98658
                                             79 BANK0     25    15     10
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (4) _follow_path                                         12     8      4  338050
                                            146 BANK0      4     0      4
                                              0 BANK1      8     8      0
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (4) _ld_clust                                            12     8      4    2510
                                             32 COMRAM    12     8      4
                            _ld_word
 ---------------------------------------------------------------------------------
 (5) _dir_find                                             8     6      2  277619
                                            138 BANK0      8     6      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _create_name                                         22    18      4    3695
                                             33 COMRAM     8     4      4
                                              0 BANK0     14    14      0
                            _chk_chr
                            _dbc_1st
                            _dbc_2nd
                            _mem_set
 ---------------------------------------------------------------------------------
 (6) _dbc_2nd                                              3     1      2     186
                                             25 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) _dbc_1st                                              3     1      2     124
                                             25 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) _chk_chr                                              6     2      4     307
                                             25 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dir_register                                         5     3      2  322811
                                            150 BANK0      2     0      2
                                              0 BANK1      3     3      0
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cpy                                             10     4      6    2628
                                             25 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _dir_alloc                                           12     8      4  276574
                                            138 BANK0     12     8      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _dir_sdi                                             30    24      6   52155
                                             74 BANK0     30    24      6
                          _clst2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (6) _dir_next                                            30    26      4  182275
                                            108 BANK0     30    26      4
                          _clst2sect
                       _create_chain
                          _dir_clear
                            _get_fat
 ---------------------------------------------------------------------------------
 (7) _dir_clear                                           18    12      6   30940
                                             37 BANK0     18    12      6
                          _clst2sect
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (4) _clst2sect                                           12     6      6    2530
                                             37 COMRAM     6     0      6
                                              0 BANK0      6     6      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _create_chain                                        29    23      6   99484
                                             79 BANK0     29    23      6
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (5) _put_fat                                             31    21     10   49079
                                             48 BANK0     31    21     10
                           _ld_dword
                        _move_window
                           _st_dword
                            _st_word
 ---------------------------------------------------------------------------------
 (5) _get_fat                                             26    20      6   47343
                                             48 BANK0     26    20      6
                           _ld_dword
                            _ld_word
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _f_mount                                             12     7      5  150249
                                            126 BANK0     12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (4) _find_volume                                         71    66      5  148089
                                             55 BANK0     71    66      5
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                _escreve_inteiro_lcd
                       _get_ldnumber
                           _ld_dword
                            _ld_word
                        _move_window
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (6) _ld_dword                                            13     9      4    1520
                                             25 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (5) _get_ldnumber                                        18    16      2    1384
                                             25 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (5) _disk_initialize                                      4     4      0   37413
                                             34 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_initialize                                 14    14      0   37283
                                             20 BANK0     14    14      0
                            _command
                       _dummy_clocks
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (7) _sdc_reset                                           20    20      0   17952
                                             13 BANK0      7     7      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (5) _check_fs                                             7     1      6   44524
                                             48 BANK0      7     1      6
                            _ld_word
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (6) _mem_cmp                                             15     9      6    1045
                                             25 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (6) _ld_word                                              7     5      2    1300
                                             25 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     932
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    1525
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _f_close                                              5     3      2   84975
                                             66 BANK0      5     3      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (4) _f_sync                                              11     9      2   82661
                                             55 BANK0     11     9      2
                        _get_fattime
                        _move_window
                           _st_clust
                           _st_dword
                            _st_word
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (4) _validate                                            11     7      4    2019
                                             32 COMRAM    11     7      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (5) _disk_status                                          5     5      0     226
                                             27 COMRAM     5     5      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_status                                      4     4      0      34
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _sync_fs                                             11     9      2   32080
                                             44 BANK0     11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                           _st_dword
                            _st_word
                        _sync_window
 ---------------------------------------------------------------------------------
 (6) _st_dword                                             6     0      6    2249
                                             38 BANK0      6     0      6
                        _get_fattime (ARG)
 ---------------------------------------------------------------------------------
 (8) _mem_set                                              8     2      6    1480
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_ioctl                                           7     4      3     304
                                             25 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (4) _st_clust                                             9     1      8    2808
                                             29 COMRAM     9     1      8
                            _st_word
 ---------------------------------------------------------------------------------
 (6) _st_word                                              4     0      4    1033
                                             25 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _move_window                                         11     5      6   41509
                                             37 BANK0     11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (4) _sync_window                                         19    17      2   13504
                                             44 COMRAM     1     1      0
                                             19 BANK0     18    16      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (5) _disk_write                                          12     5      7   12524
                                             43 COMRAM     1     1      0
                                              8 BANK0     11     4      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_write                                      17    10      7   10824
                                             34 COMRAM     9     2      7
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                   _escreve_dado_SPI
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (5) _disk_read                                           13     6      7   23903
                                             13 BANK0     13     6      7
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_read                                       22    15      7   11363
                                             34 COMRAM    11     4      7
                                              0 BANK0      9     9      0
                            _command
                       _dummy_clocks
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (7) _response                                             1     1      0     102
                                             28 COMRAM     1     1      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (8) _recebe_dado_SPI                                      3     3      0      68
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _proceed                                              0     0      0     102
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    3747
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (7) _dummy_clocks                                         5     5      0     170
                                             27 COMRAM     5     5      0
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (7) _command                                              7     2      5    2944
                                             27 COMRAM     7     2      5
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (4) _escreve_dado_SPI                                     2     2      0     102
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _escreve_inteiro_lcd                                  9     7      2    7835
                                             43 COMRAM     2     0      2
                                              6 BANK0      7     7      0
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (7) _itoa                                                 8     2      6    3936
                                             41 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                               _utoa
 ---------------------------------------------------------------------------------
 (8) _utoa                                                 9     3      6    3163
                                             32 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              5     1      4    1132
                                             25 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) ___lwdiv                                              7     3      4    1321
                                             25 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2879
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _get_fattime                                         51    47      4     201
                                             25 COMRAM    13     9      4
                                              0 BANK0     38    38      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                21    21      0     183
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _escalonador
     _SDCard *
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _f_close
         _f_sync
           _get_fattime
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_cmd_lcd
                   _delay
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
           _st_clust
             _st_word
           _st_dword
             _get_fattime (ARG)
           _st_word
           _sync_fs
             _disk_ioctl
             _disk_write
               _sdc_disk_write
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _mem_set
             _st_dword
               _get_fattime (ARG)
             _st_word
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _validate
           _disk_status
             _sdc_disk_status
       _f_mount
         _find_volume
           ___lldiv
           ___lmul
           _check_fs
             _ld_word
             _mem_cmp
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_cmd_lcd
                     _delay
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
           _disk_initialize
             _sdc_disk_initialize
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _escreve_cmd_lcd
                 _delay
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
               _sdc_reset
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
           _disk_status
             _sdc_disk_status
           _escreve_inteiro_lcd
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _get_ldnumber
           _ld_dword
           _ld_word
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_cmd_lcd
                   _delay
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
         _get_ldnumber
       _f_open
         _clst2sect
           ___lmul
         _dir_register
           _dir_alloc
             _dir_next
               _clst2sect
                 ___lmul
               _create_chain
                 _get_fat
                   _ld_dword
                   _ld_word
                   _move_window
                     _disk_read
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _sdc_disk_read
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_cmd_lcd
                           _delay
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                     _sync_window
                       _disk_write
                         _sdc_disk_write
                           _command
                             _escreve_dado_SPI
                           _dummy_clocks
                             _escreve_dado_SPI
                           _escreve_dado_SPI
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _posicao_cursor_lcd
                             _endereco_cursor_lcd
                               _delay
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                 _put_fat
                   _ld_dword
                   _move_window
                     _disk_read
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _sdc_disk_read
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_cmd_lcd
                           _delay
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                     _sync_window
                       _disk_write
                         _sdc_disk_write
                           _command
                             _escreve_dado_SPI
                           _dummy_clocks
                             _escreve_dado_SPI
                           _escreve_dado_SPI
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _posicao_cursor_lcd
                             _endereco_cursor_lcd
                               _delay
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                   _st_dword
                     _get_fattime (ARG)
                   _st_word
               _dir_clear
                 _clst2sect
                   ___lmul
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                 _mem_set
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_dado_SPI
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
               _get_fat
                 _ld_dword
                 _ld_word
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_cmd_lcd
                         _delay
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_dado_SPI
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
             _dir_sdi
               _clst2sect
                 ___lmul
               _get_fat
                 _ld_dword
                 _ld_word
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_cmd_lcd
                         _delay
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_dado_SPI
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_cmd_lcd
                     _delay
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
           _mem_cpy
           _mem_set
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_cmd_lcd
                   _delay
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
         _find_volume
           ___lldiv
           ___lmul
           _check_fs
             _ld_word
             _mem_cmp
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_cmd_lcd
                     _delay
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
           _disk_initialize
             _sdc_disk_initialize
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _escreve_cmd_lcd
                 _delay
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
               _sdc_reset
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
           _disk_status
             _sdc_disk_status
           _escreve_inteiro_lcd
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _get_ldnumber
           _ld_dword
           _ld_word
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_cmd_lcd
                   _delay
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
         _follow_path
           _create_name
             _chk_chr
             _dbc_1st
             _dbc_2nd
             _mem_set
           _dir_find
             _dir_next
               _clst2sect
                 ___lmul
               _create_chain
                 _get_fat
                   _ld_dword
                   _ld_word
                   _move_window
                     _disk_read
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _sdc_disk_read
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_cmd_lcd
                           _delay
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                     _sync_window
                       _disk_write
                         _sdc_disk_write
                           _command
                             _escreve_dado_SPI
                           _dummy_clocks
                             _escreve_dado_SPI
                           _escreve_dado_SPI
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _posicao_cursor_lcd
                             _endereco_cursor_lcd
                               _delay
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                 _put_fat
                   _ld_dword
                   _move_window
                     _disk_read
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _sdc_disk_read
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_cmd_lcd
                           _delay
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                     _sync_window
                       _disk_write
                         _sdc_disk_write
                           _command
                             _escreve_dado_SPI
                           _dummy_clocks
                             _escreve_dado_SPI
                           _escreve_dado_SPI
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _posicao_cursor_lcd
                             _endereco_cursor_lcd
                               _delay
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                   _st_dword
                     _get_fattime (ARG)
                   _st_word
               _dir_clear
                 _clst2sect
                   ___lmul
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                 _mem_set
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_dado_SPI
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
               _get_fat
                 _ld_dword
                 _ld_word
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_cmd_lcd
                         _delay
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_dado_SPI
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
             _dir_sdi
               _clst2sect
                 ___lmul
               _get_fat
                 _ld_dword
                 _ld_word
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_cmd_lcd
                         _delay
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_dado_SPI
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
             _mem_cmp
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_cmd_lcd
                     _delay
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
           _dir_sdi
             _clst2sect
               ___lmul
             _get_fat
               _ld_dword
               _ld_word
               _move_window
                 _disk_read
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _sdc_disk_read
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_cmd_lcd
                       _delay
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_dado_SPI
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
           _ld_clust
             _ld_word
         _get_fat
           _ld_dword
           _ld_word
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_cmd_lcd
                   _delay
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
         _get_fattime
         _ld_clust
           _ld_word
         _ld_dword
         _move_window
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _escreve_cmd_lcd
                 _delay
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
           _sync_window
             _disk_write
               _sdc_disk_write
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
         _remove_chain
           _get_fat
             _ld_dword
             _ld_word
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_cmd_lcd
                     _delay
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
           _put_fat
             _ld_dword
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_cmd_lcd
                     _delay
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
             _st_dword
               _get_fattime (ARG)
             _st_word
         _st_clust
           _st_word
         _st_dword
           _get_fattime (ARG)
       _f_write
         _clst2sect
           ___lmul
         _create_chain
           _get_fat
             _ld_dword
             _ld_word
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_cmd_lcd
                     _delay
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
           _put_fat
             _ld_dword
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_cmd_lcd
                     _delay
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
             _st_dword
               _get_fattime (ARG)
             _st_word
         _disk_write
           _sdc_disk_write
             _command
               _escreve_dado_SPI
             _dummy_clocks
               _escreve_dado_SPI
             _escreve_dado_SPI
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _escreve_dado_SPI
             _response
               _recebe_dado_SPI
         _mem_cpy
         _move_window
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _escreve_cmd_lcd
                 _delay
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
           _sync_window
             _disk_write
               _sdc_disk_write
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
         _sync_window
           _disk_write
             _sdc_disk_write
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _escreve_dado_SPI
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
         _validate
           _disk_status
             _sdc_disk_status
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _proceed
         _escreve_dado_SPI
   _inicializa_shrc
   _inicializa_tarefas
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     42F      21       52.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     25      25      11       14.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FA       9       97.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100     5D      E6       7       89.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     98      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2EA      20        0.0%
DATA                 0      0     719       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 23 14:28:54 2022

      __end_of_mensagem_inicial 5216                     get_fat@clst 0092                               _s 003B  
                  create_name@c 006D                    create_name@d 0062                    create_name@i 006B  
                  create_name@p 0065                     _SSPSTATbits 000FC7                get_ldnumber@path 001A  
              ??_init_interrupt 001A                              l75 4D14                              l83 5A16  
                            l77 4DAA    __size_of_escreve_inteiro_lcd 003E                     __CFG_BOR$ON 000000  
                            _fs 0325                              _rd 0154                     __CFG_BORV$3 000000  
                ??_dir_register 002E                disk_write@sector 006A                    ?_escalonador 0001  
                 create_name@dp 0022                   create_name@ni 0063                   create_name@si 0067  
                create_chain@cs 00C8                  create_chain@fs 00C6                disk_write@result 0070  
              ?_inicializa_shrc 0001                             l303 58CE                             l304 58C0  
                           l320 46F2                             l341 5794                             l342 5764  
                           l510 5494                             l502 5460                             l350 552E  
                           l343 576C                             l511 5496                             l503 5462  
                           l319 470A                             l344 576E                             l512 549E  
                           l504 546A                             l520 53BA                             l513 54A0  
                           l505 546C                             l521 537E                             l514 54A8  
                           l506 5474                             l522 53D6                             l531 530E  
                           l515 54AA                             l507 5476                             l523 538A  
                           l540 5344                             l532 5310                             l508 548A  
                           l524 5398                             l541 534C                             l533 5318  
                           l509 548C                             l525 53A6                             l349 5572  
                           l470 5AAA                             l542 534E                             l534 531A  
                           l526 53B4                             l543 5356                             l535 5322  
                           l519 53DA                             l472 5AB8                             l544 5358  
                           l536 5324                             l480 4F96                             l545 5360  
                           l537 532C                             l481 4F98                             l546 5362  
                           l538 532E                             l490 4FD4                             l482 4FA0  
                           l539 5342                             l491 4FD6                             l483 4FA2  
                           l564 56A2                             l492 4FDE                             l484 4FAA  
                           l900 1E54                             l565 567A                             l493 4FE0  
                           l485 4FAC                             l901 1EA0                             l494 4FE8  
                           l486 4FB4                             l495 4FEA                             l487 4FB6  
                           l911 1FA0                             l488 4FCA                             l489 4FCC  
                           l905 1EEA                             l842 588C                             l922 20D0  
                           l850 5942                             l843 586A                             l923 20F8  
                           l851 5926                             l940 3706                             l861 48F0  
                           l845 5876                             l933 21C2                             l909 1F52  
                           l853 5932                             l950 37F6                             l942 3718  
                           l862 495C                             l870 50FC                             l846 5888  
                           l854 593E                             l919 2076                             l944 378A  
                           l928 215A                             l945 3732                             l929 2182  
                           l858 4960                             l866 5100                             l874 5A5E  
                           l882 4A54                             l947 37DE                             l859 48BE  
                           l955 3E78                             l867 509C                             l875 5A52  
                           l883 4A7C                             l964 5B38                             l892 1DC6  
                           l949 3818                             l957 3EC0                             l869 50CE  
                           l877 5A56                             l893 1DDC                             l878 5A5A  
                           l959 3F60                             l887 4AEE                             l895 1DE8  
                           l899 20A0                             _PCL 000FF9                             _PR2 000FCB  
                           _E_W 0041               get_ldnumber@volid 6184                ??_init_oscilador 001A  
                           _n_s 0042                             _isr 0008                             _txt 0100  
                  disk_read@res 0079                             prod 000FF3                  ??_create_chain 00B5  
                           tosl 000FFD                             wreg 000FE8                    __CFG_FOSC$HS 000000  
     __size_of_write_timer_zero 0012                  create_name@sfn 0069                 create_chain@ncl 00C2  
               create_chain@obj 00AF                 create_chain@scl 00BE                 create_chain@res 00BD  
                   ld_clust@dir 0023                    __CFG_LVP$OFF 000000         ??_escreve_frase_ram_lcd 001F  
                  __CFG_WDT$OFF 000000                            l1100 2410                            l1020 56D0  
                          l1013 502A                            l1021 56CC                            l1102 24CA  
                          l1110 34FE                            l1031 5516                            l1008 5A2E  
                          l1201 26B2                            l1121 358E                            l1042 3B50  
                          l1050 4D02                            l1130 18FC                            l1051 4CE4  
                          l1035 4F20                            l1220 28CA                            l1212 2772  
                          l1045 3B54                            l1141 1A4E                            l1061 484C  
                          l1221 28DA                            l1029 54E8                            l1037 4F4E  
                          l1117 3544                            l1070 2A1E                            l1150 1BA2  
                          l1142 1AAC                            l1134 19B2                            l1222 28F0  
                          l1038 4F7C                            l1310 324C                            l1126 35DE  
                          l1135 194C                            l1215 296E                            l1231 4608  
                          l1311 328A                            l1127 3648                            l1056 3484  
                          l1072 2D42                            l1080 2C52                            l1152 1C38  
                          l1224 2916                            l1216 282A                            l1312 32A6  
                          l1304 321C                            l1240 527A                            l1320 3B6A  
                          l1057 34AE                            l1401 0280                            l1153 1C0C  
                          l1145 1B24                            l1137 1970                            l1217 2840  
                          l1305 31F4                            l1410 0340                            l1082 2D12  
                          l1090 2628                            l1162 1D50                            l1146 1B14  
                          l1138 19A2                            l1170 417E                            l1314 32B4  
                          l1322 3BE8                            l1411 03A4                            l1403 02A6  
                          l1075 2B7E                            l1139 19DC                            l1219 2880  
                          l1235 4610                            l1420 062C                            l1412 046A  
                          l1092 22C4                            l1164 1D58                            l1148 1B40  
                          l1236 463A                            l1228 457C                            l1421 0642  
                          l1069 2D24                            l1077 2B9C                            l1157 1CAA  
                          l1309 323A                            l1342 3858                            l1430 08BC  
                          l1422 0658                            l1078 2BA6                            l1094 22F8  
                          l1158 1D38                            l1190 2FC8                            l1326 3CC6  
                          l1351 39C6                            l1343 3854                            l1423 0662  
                          l1415 04B8                            l1407 02CC                            l1087 260C  
                          l1159 1D26                            l1167 40F4                            l1191 2F7A  
                          l1335 3C5C                            l1327 3C3E                            l1319 3B70  
                          l1352 3908                            l1432 08EA                            l1424 07C4  
                          l1416 0502                            l1408 02D6                            l1088 220E  
                          l1192 2EF2                            l1176 2DB2                            l1264 403E  
                          l1441 4A16                            l1433 0938                            l1425 073E  
                          l1417 052A                            l1409 02F4                            l1097 23DA  
                          l1169 4188                            l1193 2F36                            l1265 40B8  
                          l2314 5148                            l1426 0758                            l1418 0590  
                          l1450 4C18                            l1194 2F6A                            l1290 3154  
                          l1443 4A26                            l2315 513C                            l1371 4374  
                          l1355 3914                            l1435 0AB6                            l1419 0610  
                          l1451 4C3C                            l1187 2E20                            l1259 3FE0  
                          l1531 12C2                            l1523 0B36                            l1356 3942  
                          l1428 07DC                            l1188 2EB0                            l1540 0D38  
                          l1532 0BCA                            l1373 4398                            l1357 3976  
                          l1381 0040                            l1189 2E86                            l1269 47F0  
                          l1293 3116                            l1541 0D62                            l1533 110C  
                          l1438 4A06                            l2318 517C                            l1198 3000  
                          l1294 3112                            l1470 138C                            l1550 10EE  
                          l1542 0DB4                            l1439 4A06                            l2319 518A  
                          l1367 39CE                            l1383 0066                            l1447 4BD6  
                          l1287 30DA                            l1551 10D0                            l1543 0E12  
                          l1535 0CCE                            l2280 57C4                            l1296 318E  
                          l1288 3100                            l1480 152A                            l1472 1394  
                          l1552 1164                            l1544 0E70                            l1377 4402  
                          l1385 00B0                            l1449 4C04                            l1289 3262  
                          l1481 1570                            l1465 134C                            l1457 12EE  
                          l1553 11A8                            l1545 107A                            l1537 0D08  
                          l1562 3E3A                            l1378 4430                            l1386 00AC  
                          l1466 1512                            l1546 0F14                            l2371 5664  
                          l1395 01CC                            l1387 00EA                            l1299 317E  
                          l1467 137C                            l1555 128A                            l1547 0F60  
                          l2372 566E                            l2284 4DB6                            l1388 00F6  
                          l1468 1378                            l1548 105A                            l2381 5852  
                          l1397 01EC                            l1493 1814                            l1485 1774  
                          l1549 120E                            l2382 585C                            l2286 4DF0  
                          l1398 023A                            l1494 186A                            l1486 170C  
                          l1478 1520                            l2367 5644                            l2287 4E2E  
                          l1495 1880                            l1487 174E                            l2368 563C  
                          l1488 1764                            l2377 583A                            l2378 5832  
                          l1838 558E                            l1839 55A2                            ?_isr 0001  
         _escreve_caractere_lcd 52FE                            STR_1 623A                            STR_2 6240  
                          STR_3 6246                            STR_5 625B                            STR_6 627C  
                          STR_9 6218                  timer_dois@flag 0038                            _BRGH 007D62  
                          _T0IF 007F92                            _CREN 007D5C                            _LATB 000F8A  
                          _PIE1 000F9D                            _RCIF 007CF5                            i2l61 4258  
                          i2l62 42CC                            i2l63 4270                            i2l65 429E  
                          i2l67 42C0                            i2l68 42D4                            _TMR2 000FCC  
                          _SPEN 007D5F                            _TRMT 007D61                            _TXEN 007D65  
                          _SYNC 007D64                            _Fsid 0150                            _dado 003A  
                          _buff 02E6                            _main 59FE                    find_volume@i 00D9  
                          _itoa 579E                            fsr0h 000FEA                            fsr1h 000FE2  
                          indf0 000FEF                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf1 000FE7                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                            btemp 0046                            _utoa 4DAE  
                   ld_dword@ptr 001A                   disk_ioctl@cmd 001A                   disk_read@buff 006D  
                 disk_ioctl@res 001E                   disk_read@pdrv 0076                            prodh 000FF4  
                          prodl 000FF3                  ??_get_ldnumber 001C                            start 000E  
                 __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000       sdc_disk_initialize@buff_i 007D  
                  ?_follow_path 00F2                    ___param_bank 000000       sdc_disk_initialize@count1 0079  
     sdc_disk_initialize@count2 007F                 create_name@path 0024                create_chain@clst 00B1  
                         ??_isr 0005        __size_of_recebe_dado_SPI 005E                   __CFG_PLLDIV$5 000000  
                   _sync_window 39D8       __end_ofget_ldnumber@volid 6194                           l13014 2000  
                         l13130 56CC                           l14006 0224                           l13302 282A  
                         l14120 0642                           l12266 3EB4                           l14026 02C0  
                         l13234 2F36                           l13308 2840                           l11904 5AB0  
                         l13338 28F0                           l12750 194C                           l13438 4610  
                         l13640 3908                           l12672 2608                           l14186 0AB6  
                         l12818 1C0C                           l12754 1970                           l12780 1AAC  
                         l14380 1764                           l13670 3998                           l12960 1EC2  
                         l13816 35A4                           l14376 174E                           l11898 5AA2  
                         l12970 1F0C                           l13578 325C                           l14482 0E12  
                         l13676 39B4                           l12796 1B40                           l14468 0D62  
                         l14628 4D0C                           l13988 0166                           ?_main 0001  
                         ?_itoa 0060                           _EEADR 000FA9                           STR_10 6279  
                         STR_11 61FA                           STR_20 6221                           STR_12 61EF  
                         STR_13 624A                           STR_21 61D9                           STR_14 620F  
                         STR_22 6205                           STR_30 6279                           STR_23 61CE  
                         STR_15 619E                           STR_31 6260                           STR_16 6276  
                         STR_24 622E                           STR_32 6264                           STR_25 6273  
                         STR_17 61E4                           STR_33 624C                           STR_26 61BF  
                         STR_18 61AF                           STR_34 6251                           STR_35 626C  
                         STR_19 6234                           STR_27 6268                           STR_36 6228  
                         STR_28 6256                           STR_29 6270                 __end_of_dbc_2nd 4F86  
               __end_of_dbc_1st 5520                 __end_of___lldiv 519C                           ?_utoa 0021  
                         _T0CON 000FD5                           u22007 5564                           u15000 5ABE  
                         _T2CON 000FCA                           u22017 556C                           u22027 58AC  
                         u15020 5542                           u22037 5776                           u22047 577E  
                         u22057 5786                           u15034 554C                           u22067 578E  
                         u15035 5548                           u15300 56C2                           u15028 5544  
                         u15230 5648                           u16110 1A9A                           u16030 18EA  
                         u16200 1BFA                           u16130 1AE4                           u15307 56B8  
                         u15260 583E                           u15500 3EEA                           u16300 41FC  
                         u16301 41F8                           u15510 3F1A                           u21807 5202  
                         u15520 3F2A                           u16400 1F0C                           u16081 1A04  
                         u21817 4E74                           u15290 569A                           u17050 5614  
                         u15507 3EE0                           u21907 2090                           u21827 4E90  
                _data_buffer_32 02C6                           u15460 500C                           u16340 1DF8  
                         u17140 45F4                           u15541 58EC                           u15517 3F10  
                         u21917 2100                           u21837 4EAC                           u16510 2122  
                         u16350 1E08                           u21927 3E90                           u21847 0146  
                         u16440 2000                           u15720 29F4                           u17160 462E  
                         u17320 3168                           u19000 0C24                           u15297 5690  
                         u21937 3F90                           u16361 1E4A                           u21857 1D90  
                         u17057 560A                           u15650 4C88                           u15810 2C94  
                         u16290 41DC                           u16610 5700                           u17250 40D8  
                         u15555 3694                           u21947 493C                           u21867 1E30  
                         u16460 200C                           u16380 1EC2                           u18300 0466  
                         u18220 02C0                           u17340 317A                           u21957 36D2  
                         u21877 1E6A                           u19005 0C1A                           u16550 219A  
                         u15910 23F8                           u15830 21EC                           u21967 3778  
                         u21887 1FD0                           u15815 2C8A                           u16560 21D0  
                         u16480 2084                           u21977 37A0                           u21897 201C  
                         u15745 2A68                           u16570 504A                           u17610 4394  
                         u15930 250C                           u17370 31F0                           u21987 5556  
                         u15915 23EE                           u19115 0E90                           u17460 388E  
                         u18180 0224                           u16820 2F46                           u16740 2DAE  
                         u21997 555E                           u15765 2B00                           u16805 2ED2  
                         u16590 508C                           u17550 3984                           u16830 2F66  
                         u19230 12CA                           u15935 2502                           u15855 2258  
                         u17640 43D6                           u17480 38D0                           u16920 2742  
                         u17800 34DA                           u16577 5040                           u18345 0542  
                         u17570 3998                           u17810 34FA                           u19330 51AA  
               __end_of___lwdiv 5678                           u15795 2B8A                           u15980 4AB4  
                         u17580 39A4                           u16940 27B4                           u16860 301E  
                         u16780 2E6A                           u19340 51C2                           u18445 07A4  
                         u15885 2344                           u16925 2738                           u19165 1020  
                         u18470 0910                           u19318 4D68                           u17735 444E  
                         u19175 1064                           u19319 4D7C                           u17920 3678  
                         u17745 446A                           u16945 27AA                           u16865 3014  
                         u16785 2E60                           u16890 26AE                           u17755 449A  
                         u18475 0906                           u17780 514C                           u17765 44B4  
                         u18920 1832                           u17890 35A4                           u18925 1828  
                         u18845 16B4                           u18950 0B32                           u18880 178E  
                         u18970 0B4C                 __end_of___lwmod 5866                           i2l788 5B80  
                         _RCREG 000FAE                           _RCSTA 000FAB                           _TMR0H 000FD7  
                         _TMR0L 000FD6                           _SPBRG 000FAF                   __CFG_USBDIV$1 000000  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                           _TRISE 000F96                 __end_of_f_close 5758  
                         _TXREG 000FAD                           _TXSTA 000FAC                           _FatFs 00FC  
               __end_of_chk_chr 5712                   __CFG_PWRT$OFF 000000             ___lmul@multiplicand 001E  
    __size_of_config_timer_dois 000C                 __end_of_f_mount 4C5C                  __CFG_FCMEN$OFF 000000  
               __end_of_dir_sdi 3086                 __end_of_f_write 12E0      __size_of_config_timer_zero 001A  
               __end_of_get_fat 2D54                 __end_of_command 59CC                 __end_of_ld_word 5994  
                         _delay 5A9E                 __end_of_mem_cmp 5096                 __end_of_mem_cpy 5626  
               __end_of_dpowers 60E1                 __end_of_mem_set 5A4E                   find_volume@br 00A4  
                 find_volume@fs 00DC                   find_volume@pt 00BE        __size_of_escreve_cmd_lcd 008C  
                disk_ioctl@buff 001B                           pclath 000FFA                  disk_read@count 0073  
                         tablat 000FF5                  disk_ioctl@pdrv 001D                 __end_of_proceed 5BB6  
                         plusw1 000FE3                           plusw2 000FDB                 __end_of_put_fat 262C  
                         utoa@c 0029                           utoa@v 0027                           status 000FD8  
               __end_of_st_word 5A9E    escreve_dado_SPI@data_to_shrc 001B                           wtemp6 0047  
               __end_of_sync_fs 34B4                   get_ldnumber@c 0024                   get_ldnumber@i 002A  
                 disk_write@res 0072                 __initialization 528C             disk_initialize@pdrv 0082  
           disk_initialize@stat 0083                    __end_of_main 5A26                    __end_of_itoa 57E2  
                  __end_of_utoa 4E52              _inicializa_tarefas 59CC                 escalonador@cont 01C8  
                 sdc_reset@buff 0073                          ??_main 002E                          ??_itoa 002A  
                        ??_utoa 0027                   __activetblptr 000002             ?_inicializa_tarefas 0001  
               __CFG_CCP2MX$OFF 000000               get_fattime@f_time 001E                ??_sdc_disk_write 002A  
                        ?_delay 0001          ?_escreve_caractere_lcd 0001                          _ADCON1 000FC1  
                        _EEDATA 000FA8                          _EECON2 000FA7                          _INT0IE 007F94  
                        _INT0IF 007F91                   ?_dummy_clocks 0001                          _PCLATH 000FFA  
                        _INTCON 000FF2                          _TMR0IF 007F92                          _TMR2IF 007CF1  
                        _SDCard 463E        __end_of_recebe_dado_uart 5B84                          _SPPCFG 000F63  
                        _SPPCON 000F65                _is_it_gga_string 003E                          _SSPBUF 000FC9  
          __end_of_dir_register 47F4                          _DbcTbl 6194        __size_of_sdc_disk_status 0014  
              __end_of_check_fs 4434            ??_inicializa_tarefas 001A            __size_of_create_name 024A  
      __size_of_disk_initialize 003C      __end_of_posicao_cursor_lcd 53E0                __end_of_dir_find 40DE  
              __end_of_dir_next 29D2                    ?_move_window 0085            __end_of_create_chain 1D6A  
        __size_of_init_hardware 0016                __end_of__powers_ 6108                          _Result 003C  
          __size_of_get_fattime 0108                __end_of_ld_clust 528C                __end_of_ld_dword 4BB0  
                        ___lmul 557E            __size_of_find_volume 0AD0            __size_of_disk_status 003E  
                __CFG_STVREN$ON 000000                       ??_dbc_2nd 001C                       ??_dbc_1st 001C  
                     ??___lldiv 0022                          _f_open 12E0                          _f_time 0134  
                     ??___lwdiv 001E                          _f_sync 3CCC                       ??___lwmod 001E  
                        _folder 0296                          _estado 0039                __end_of_init_lcd 4EF0  
                     ??_f_close 002E                  find_volume@fmt 00DB                          clear_0 52B4  
                        clear_1 52C6                          clear_2 52D2                          clear_3 52DE  
                        clear_4 52EA                  find_volume@rfs 0099                       ??_chk_chr 001E  
                find_volume@vol 00C4                       ??_f_mount 002E                       ??_dir_sdi 00B0  
                     ??_f_write 00D4                       ??_get_fat 0096             _sdc_disk_initialize 1D6A  
                     ??_command 0021                       ??_ld_word 001C                       ??_mem_cmp 0020  
                     ??_mem_cpy 0020                       ??_mem_set 0020                          itoa@cp 002A  
              __end_of_validate 4A3A            __size_of_escalonador 00A8               ??_recebe_dado_SPI 001A  
          __end_of_get_ldnumber 39D8        __end_of_escreve_dado_SPI 579E                __end_of_response 5B92  
                  __mediumconst 60B8           write_timer_zero@timer 001C                 disk_read@sector 006F  
               disk_read@result 0077                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                __end_of_st_clust 5824                __end_of_st_dword 544E  
                     ??_proceed 001C                _write_timer_zero 5B4E                       ??_put_fat 009A  
                     ??_st_word 001E       escreve_caractere_lcd@data 001C                       ??_sync_fs 008E  
                ??_dummy_clocks 001C             _escreve_inteiro_lcd 58E2                 sdc_disk_write@i 0060  
               sdc_disk_write@j 0065                      __accesstop 0060         __end_of__initialization 52F0  
               __CFG_PBADEN$OFF 000000                  get_ldnumber@tc 0025            ?_sdc_disk_initialize 0001  
                get_ldnumber@sp 001E                  disk_write@buff 0068                  get_ldnumber@tp 0026  
                get_ldnumber@tt 0028                  disk_write@pdrv 006F                   ___rparam_used 000001  
             ??_escreve_cmd_lcd 001C                  __pcstackCOMRAM 0001     __end_of_endereco_cursor_lcd 54B8  
                  __pidataBANK1 5AC2               ?_mensagem_inicial 0001                   __end_of_delay 5AC2  
          __size_of_follow_path 0174            ?_escreve_inteiro_lcd 002C              ??_mensagem_inicial 0020  
            _tarefa_em_execucao 0043              __size_of_dir_clear 0122      __end_ofi2_write_timer_zero 5B72  
            __size_of_dir_alloc 0102              __size_of_clst2sect 00C4          __size_of_sdc_disk_read 01B2  
                 _init_hardware 5B12              __size_of_disk_read 00C2                         ??_delay 001A  
                sdc_reset@count 0071                _is_it_rmc_string 003D    mensagem_inicial@msg_linha_um 0060  
                    __pbssBANK0 00F8                      __pbssBANK1 0100                      __pbssBANK2 0200  
__size_of_escreve_frase_ram_lcd 0052   __end_of_escreve_frase_ram_lcd 56CA           ??_sdc_disk_initialize 0074  
                       ?_SDCard 0001                _find_volume$3041 00B4                _find_volume$3042 00B8  
     escreve_inteiro_uart@F3956 01D8                      _gga_buffer 0200              __size_of_sdc_reset 00BE  
                       ?___lmul 001A               ??_sdc_disk_status 001A           mensagem_inicial@F4171 6162  
         mensagem_inicial@F4169 6173           ??_escreve_inteiro_lcd 002E                         ?_f_open 0174  
                       ?_f_sync 0097                       SDCard@fil 0303               ??_disk_initialize 002E  
                  ?_sync_window 0073                  ___lmul@product 0022                    _gga_pointers 0114  
                       i2l10140 4268                         _INTCON2 000FF1                         _INTCON3 000FF0  
                ?_init_hardware 0001                       ?_check_fs 0090                      _disk_ioctl 5A4E  
                follow_path@res 0173                      _disk_write 5096                  remove_chain@fs 00C6  
                     ?_dir_find 00EA                       ?_dir_next 00CC                         _SSPCON1 000FC6  
         __size_of_dir_register 00D2        __size_of_inicializa_shrc 000C                       ?_ld_clust 0021  
                       _SSPSTAT 000FC7                       ?_ld_dword 001A                 __CFG_VREGEN$OFF 000000  
                 ?_remove_chain 00AF           __size_of_create_chain 04E6                       ?_init_lcd 0001  
               __size_of_SDCard 00E4                    _dir_sdi$2585 00BA                   _sdc_disk_read 367C  
             __end_of_dir_clear 4200               __end_of_dir_alloc 463E               __end_of__npowers_ 612F  
                       __Hparam 0000               __end_of_clst2sect 48B8                         __Lparam 0000  
                     ?_validate 0021               __end_of_disk_read 497A                       ?_response 0001  
                  _f_write$3353 016C                      f_close@res 00A6                 __size_of___lmul 0056  
                     ?_st_clust 001E                         _dbc_2nd 4EF0                         _dbc_1st 54B8  
                     ?_st_dword 0086                         ___lldiv 511A            __size_of_move_window 00AA  
                    check_fs@fs 0090                         ___lwdiv 5626                         ___lwmod 5824  
               __size_of_f_open 05A4                 __size_of_f_sync 0172            __end_of_dummy_clocks 58E2  
                       _f_close 5712           __size_of_get_ldnumber 01AA                         __pcinit 528C  
                       _chk_chr 56CA                    _get_fat$2428 009E                      _init_ports 5AFA  
                       __ramtop 0800                         _f_mount 4BB0                         __ptext0 59FE  
                       __ptext1 519C                         __ptext2 4E52                         __ptext3 5B12  
                       __ptext4 5AFA                         __ptext5 5BB6                         __ptext6 5B3C  
                       __ptext7 5AE0                         __ptext8 5B4E                         __ptext9 5B92  
                       _dir_sdi 2D54                         _f_write 0AE2                     validate@obj 0021  
                       _get_fat 29D2                     validate@res 002B                     validate@rfs 0023  
                       _command 5994                       _T0CONbits 000FD5                      chk_chr@chr 001C  
                  _dir_register 4722                      chk_chr@str 001A                         _ld_word 595C  
                       _mem_cmp 5012         i2write_timer_zero@timer 0003                         _mem_cpy 55D4  
   endereco_cursor_lcd@endereco 001C                         _dpowers 60B9                         _mem_set 5A26  
                  __size_of_isr 4318         ??_escreve_caractere_lcd 001C                      ??_check_fs 0096  
               find_volume@mode 009B                 find_volume@path 0097                 find_volume@nrsv 00C6  
               find_volume@stat 00CC                    _create_chain 1884                         _proceed 5BAA  
       __size_of_init_interrupt 0012               __end_of_sdc_reset 4AF8                      ??_dir_find 00EC  
                       _put_fat 21D6                      ??_dir_next 00D0                         _st_word 5A76  
                    ??_ld_clust 0025                         _sync_fs 32D0                  __pintcode_body 4200  
                    ??_ld_dword 001E            end_of_initialization 52F0                      f_open@clst 0197  
                    f_open@mode 0178                      f_open@path 0176                  ??_remove_chain 00B9  
                       isr@cont 0019      __end_ofleitura_chave@F3840 6151      __end_ofleitura_chave@F3842 6140  
    __end_ofleitura_chave@F3838 6162         __size_of_init_oscilador 0008                         itoa@buf 0060  
                       itoa@val 0062                   SDCard@FResult 0302            sdc_disk_initialize@i 0076  
                 __Lmediumconst 60B8                      ??_init_lcd 001D                         int_func 4200  
                    _rmc_buffer 0250               ?_recebe_dado_uart 0001                       i2u1210_40 42A2  
               disk_status@pdrv 001F                 disk_status@stat 0020                  ?_sdc_disk_read 0023  
        write_timer_zero@timer0 001A                 ___lldiv@divisor 001E                      f_mount@cfs 00E4  
              sdc_disk_read@arr 0554                sdc_disk_read@res 0065                      f_mount@res 00E3  
                    f_mount@opt 00E2              ??_recebe_dado_uart 0001                sdc_disk_read@ptr 0060  
                    f_mount@vol 00E6                 ___lldiv@counter 0026                    _get_ldnumber 382E  
                    ??_validate 0025                      ??_response 001D                       _RCSTAbits 000FAB  
      __end_of_write_timer_zero 5B60                         postdec1 000FE5                         postdec2 000FDD  
               _recebe_dado_SPI 5520                         postinc0 000FEE                         postinc1 000FE6  
                       postinc2 000FDE                      ??_st_clust 0026                  move_window@res 008F  
                    ??_st_dword 0027                         utoa@buf 0021                         utoa@val 0023  
                    dir_clear@n 0095                      dir_alloc@n 00F3                remove_chain@clst 00B1  
                    dir_find@dp 00EA                      dir_find@fs 00EE                       _PORTAbits 000F80  
                     _PORTBbits 000F81                       _PORTCbits 000F82                       _PORTDbits 000F83  
                     _PORTEbits 000F84                 ??_init_hardware 001E              _posicao_cursor_lcd 5370  
                    dir_sdi@csz 00BE                      dir_sdi@ofs 00AC                      dir_next@dp 00CC  
                    dir_next@fs 00E4                     ?_disk_ioctl 001A                      f_write@btw 00D0  
                    f_write@res 0170                       _TRISAbits 000F92                       _TRISBbits 000F93  
                   ?_disk_write 0068                       _TRISCbits 000F94                       _TRISDbits 000F95  
             ?_escreve_dado_SPI 0001                      get_fat@obj 0090                 _escreve_cmd_lcd 4F86  
                    get_fat@val 00A2             ?_posicao_cursor_lcd 001D                 get_ldnumber@vol 0022  
               disk_write@count 006E              ??_escreve_dado_SPI 001A                      command@CMD 0021  
                    command@CRC 0020                   ??_create_name 0026                      command@arg 001C  
                    ld_clust@cl 0029                      ld_clust@fs 0021                   ??_get_fattime 0060  
             ??_inicializa_shrc 001A     __size_of_inicializa_tarefas 0032                  __end_of_SDCard 4722  
                 ??_find_volume 009C                      ld_dword@rv 0023                  __end_of_DbcTbl 619E  
                 ??_disk_status 001C                 command@argument 0022            ??_posicao_cursor_lcd 001E  
                __end_of___lmul 55D4                     st_clust@dir 0020                  __end_of_f_open 1884  
                 ??_escalonador 01C6                     ?_init_ports 0001                  __end_of_f_sync 3E3E  
                    ld_word@ptr 001A            __size_of_sync_window 0180             start_initialization 528C  
                   st_dword@val 0088                     st_dword@ptr 0086                     __end_of_isr 4320  
     __size_of_mensagem_inicial 007A                      mem_cmp@cnt 001E                      mem_cmp@dst 001A  
                    mem_cmp@src 001C                      mem_cpy@cnt 001E                     put_fat@clst 0092  
                    mem_cpy@dst 001A                      mem_cpy@src 001C                 _sdc_disk_status 5B28  
               ??_sdc_disk_read 002A                        ??_SDCard 002E              i2_write_timer_zero 5B60  
       __end_of_recebe_dado_SPI 557E                 _disk_initialize 5920                      mem_set@cnt 001E  
                    mem_set@dst 001A                      mem_set@val 001C         __size_of_sdc_disk_write 0166  
              _data_uart_recebe 0045                     _dado_buffer 0165           __size_of_dummy_clocks 003E  
                 ??_follow_path 016C             __size_of_disk_ioctl 0028             __end_of_create_name 32D0  
           ?i2_write_timer_zero 0001             __size_of_disk_write 0084                        ??___lmul 0022  
           __end_of_get_fattime 453C                        ??_f_open 0179                        ??_f_sync 002E  
                   __pdataBANK1 01C9                __CFG_LPT1OSC$OFF 000000             __end_of_find_volume 0AE2  
           __end_of_disk_status 58A4          sdc_disk_read@start_add 0061            __end_of_remove_chain 367C  
       sdc_disk_initialize@buff 0081         __end_of_escreve_cmd_lcd 5012         sdc_disk_initialize@stat 0078  
  __size_of_endereco_cursor_lcd 006A                     __pbssBIGRAM 0325                     __pbssCOMRAM 002E  
                 __pcstackBANK0 0060                   __pcstackBANK1 016C                   __pcstackBANK3 0300  
                _init_interrupt 5B3C            ??i2_write_timer_zero 0003             __end_of_escalonador 4DAE  
   __end_of_sdc_disk_initialize 21D6                     _data_buffer 0156               __size_of_check_fs 0114  
                  check_fs@sect 0092                     _f_open$3187 0189                      sdc_reset@i 006D  
             __size_of_dir_find 013A                    _dummy_clocks 58A4                  _init_oscilador 5BB6  
             __size_of_dir_next 03A6               __size_of_ld_clust 0076               __size_of_ld_dword 00B8  
           __size_of_init_ports 0018           _escreve_frase_ram_lcd 5678                       _data_buff 0152  
   __end_of_escreve_inteiro_lcd 5920               __size_of_init_lcd 009E                ___lwdiv@dividend 001A  
             delay@contador_int 001B               delay@contador_ext 001A                       _gga_index 0036  
                     __pintcode 0008                   __pmediumconst 60B8                        SDCard@br 0300  
                     _dir_clear 40DE                        ?_dbc_2nd 001A                       _dir_alloc 453C  
                      ?_dbc_1st 001A                        ?___lldiv 001A               __size_of_validate 00C0  
                     __npowers_ 6108                        ?___lwdiv 001A                       _clst2sect 47F4  
                      ?___lwmod 001A               __size_of_response 000E                        ?_f_close 00A2  
                     _disk_read 48B8                        ?_chk_chr 001A                   follow_path@dp 00F2  
                 follow_path@fs 0170              _sinaliza_int_timer 0044                   follow_path@ns 0172  
             __size_of_st_clust 0042                   _validate$3072 0029             __end_of_follow_path 3CCC  
                      ?_f_mount 00DE               __size_of_st_dword 006E                        ?_dir_sdi 00AA  
                      ?_f_write 00CC                        ?_get_fat 0090                        ?_command 001C  
                      ?_ld_word 001A                        ?_mem_cmp 001A                        ?_mem_cpy 001A  
        __end_of_init_interrupt 5B4E                        ?_mem_set 001A             sdc_disk_read@p_buff 0023  
           sdc_disk_read@length 0067             sdc_disk_read@sector 0025         __end_of_sdc_disk_status 5B3C  
__size_of_escreve_caractere_lcd 0072   __end_of_escreve_caractere_lcd 5370                        ?_proceed 0001  
                     f_close@fp 00A2                       f_close@fs 00A4                        ?_put_fat 0090  
              ___lwdiv@quotient 001F                  __size_of_delay 0024                        ?_st_word 001A  
       __end_of_disk_initialize 595C          __end_of_init_oscilador 5BBE                        ?_sync_fs 008C  
                     _p_tarefas 014C               find_volume@fasize 00D1                       _sdc_reset 4A3A  
                   _create_name 3086                        _LATBbits 000F8A               find_volume@szbfat 00BA  
                     f_open@bcs 018B                ?_recebe_dado_SPI 0001                       f_open@ofs 0193  
                     f_open@res 019D               find_volume@sysect 00C0                        _PIE1bits 000F9D  
                   _get_fattime 4434                       _rmc_index 0034                     _find_volume 0012  
                   _disk_status 5866                   ??_move_window 008B                       f_mount@fs 00DE  
                     f_mount@rp 00E8                 follow_path@path 00F4                        _PIR1bits 000F9E  
                      _PIR2bits 000FA1                   move_window@fs 0085               ?_write_timer_zero 001A  
                    ?_dir_clear 0085                       dir_find@c 00F0                      ?_dir_alloc 00EA  
               remove_chain@obj 00AF                 remove_chain@res 00C5                 remove_chain@nxt 00C1  
            leitura_chave@F3840 6140              leitura_chave@F3842 612F              leitura_chave@F3838 6151  
                    ?_clst2sect 0026                       f_sync@dir 00A0                       f_sync@res 009D  
                     dir_sdi@dp 00AA                       dir_sdi@fs 00C6        posicao_cursor_lcd@coluna 001D  
                    ?_disk_read 006D              ??_write_timer_zero 001C                       f_write@cc 0175  
    posicao_cursor_lcd@endereco 001F                       f_write@bw 00D2                       f_write@fp 00CC  
                     f_write@fs 0181                       get_fat@bc 00A6                       get_fat@fs 00A8  
     __size_of_recebe_dado_uart 0012                       get_fat@wc 00A0                     _escalonador 4D06  
              ?_escreve_cmd_lcd 0001     escreve_frase_ram_lcd@buffer 001D                 ?_init_interrupt 0001  
                  ??_disk_ioctl 001D                    ??_disk_write 002C                 _inicializa_shrc 5B9E  
              _mensagem_inicial 519C                      st_clust@cl 0022                      st_clust@fs 001E  
               ?_init_oscilador 0001               ___lmul@multiplier 001A                       copy_data0 52A0  
                     ld_word@rv 001F                      ?_sdc_reset 0001             sdc_reset@count_nosd 006F  
        ?_escreve_frase_ram_lcd 001D                      put_fat@res 00AE                      put_fat@val 0096  
                    _EECON1bits 000FA6               move_window@sector 0087        escreve_dado_SPI@contador 001A  
                _sdc_disk_write 3E3E                 dir_next@stretch 00CE        escreve_inteiro_lcd@F3966 01DF  
                      __Hrparam 0000       __size_of_escreve_dado_SPI 0046                     _info_chaves 013D  
                      __Lrparam 0000                     _follow_path 3B58              __end_of_disk_ioctl 5A76  
         __size_of_remove_chain 01C8              __end_of_disk_write 511A                      st_word@val 001C  
                    st_word@ptr 001A          sdc_disk_initialize@ocr 007E                __size_of_dbc_2nd 0096  
              __size_of_dbc_1st 0068                __size_of___lldiv 0082                __size_of___lwdiv 0052  
              __size_of___lwmod 0042                    ??_init_ports 001A             __end_of_move_window 4D06  
                 _dir_next$2622 00DC        escreve_inteiro_lcd@valor 002C                __size_of_f_close 0046  
      escreve_inteiro_lcd@texto 0066                __size_of_chk_chr 0048                __size_of_f_mount 00AC  
              __size_of_dir_sdi 0332                __size_of_f_write 07FE                __size_of_get_fat 0382  
                      dbc_2nd@c 001C               disk_status@result 001D                __size_of_command 0038  
                      dbc_1st@c 001C           __end_of_init_hardware 5B28                __size_of_ld_word 0038  
                      _check_fs 4320               _get_ldnumber$2959 0020                __size_of_mem_cmp 0084  
              __size_of_mem_cpy 0052                __size_of_mem_set 0028                        _gga_code 0031  
               ___lwdiv@divisor 001C                ?_sdc_disk_status 0001                 dir_register@res 016E  
                 dir_clear@ibuf 008D                   dir_clear@clst 0087                 ___lwdiv@counter 001E  
                      _fileName 01C9                   dir_clear@sect 008F                        __ptext10 59CC  
                      __ptext11 5B9E                        __ptext20 3086                        __ptext12 4D06  
                      __ptext21 4EF0                        __ptext13 463E                        __ptext30 47F4  
                      __ptext22 54B8                        __ptext14 0AE2                        __ptext31 1884  
                      __ptext23 56CA                        __ptext15 12E0                        __ptext40 4A3A  
                      __ptext32 21D6                        __ptext24 4722                        __ptext16 34B4  
                      __ptext41 4320                        __ptext33 29D2                        __ptext25 55D4  
                      __ptext17 3B58                        __ptext50 5B28                        __ptext42 5012  
                      __ptext34 4BB0                        __ptext26 453C                        __ptext18 5216  
                      __ptext51 32D0                        __ptext43 595C                        __ptext35 0012  
                      __ptext27 2D54                        __ptext19 3FA4                        __ptext60 3E3E  
                      __ptext52 53E0                        __ptext44 557E                        __ptext36 4AF8  
                      __ptext28 262C                        __ptext61 48B8                        __ptext53 5A26  
                      __ptext45 511A                        __ptext37 382E                        __ptext29 40DE  
                      __ptext70 5994                        __ptext62 367C                        __ptext54 5A4E  
                      __ptext46 5712                        __ptext38 5920                        __ptext71 5758  
                      __ptext63 5B84                        __ptext55 57E2                        __ptext47 3CCC  
                      __ptext39 1D6A                        __ptext80 4434                        __ptext72 58E2  
                      __ptext64 5520                        __ptext56 5A76                        __ptext48 497A  
                      __ptext73 579E                        __ptext65 5BAA                        __ptext57 4C5C  
                      __ptext49 5866                        __ptext82 5B60                        __ptext74 4DAE  
                      __ptext66 5370                        __ptext58 39D8                        __ptext83 5B72  
                      __ptext75 5824                        __ptext67 544E                        __ptext59 5096  
                      __ptext84 0000                        __ptext76 5626                        __ptext68 4F86  
                      _dir_find 3FA4                        __ptext77 5678                        __ptext69 58A4  
                      __ptext78 52FE                        __ptext79 5A9E                        _fileSize 0144  
                      _dir_next 262C                        __powers_ 60E1                __size_of_proceed 000C  
                 dir_alloc@nent 00EC                ?_disk_initialize 0001                        _ld_clust 5216  
              __size_of_put_fat 0456                        _ld_dword 4AF8                  sync_window@res 002D  
              __size_of_st_word 0028                  _timeout_tarefa 00FE                    _rmc_pointers 0128  
              __size_of_sync_fs 01E4              sdc_disk_read@count 0029      __end_of_inicializa_tarefas 59FE  
      i2write_timer_zero@timer0 0001          __end_of_sdc_disk_write 3FA4                        _init_lcd 4E52  
                 __size_of_main 0028                      sync_fs@res 0096                    _remove_chain 34B4  
                 __size_of_itoa 0044                   __size_of_utoa 00A4                find_volume@bsect 00D5  
           _endereco_cursor_lcd 544E              __end_of_init_ports 5B12                find_volume@nclst 00CD  
              find_volume@tsect 00C8               _comma_counter_gga 0040                   dummy_clocks@i 001F  
                      f_open@dj 019E                        f_open@cl 018F                   dummy_clocks@n 001E  
                      f_open@fp 0174                        f_open@fs 019B                        f_open@dw 0181  
                      f_open@sc 0185               _comma_counter_rmc 003F                        _rmc_code 002E  
                      _validate 497A                        _response 5B84                        f_sync@fp 0097  
                      f_sync@fs 009E                        f_sync@tm 0099     __size_of_posicao_cursor_lcd 0070  
                   ??_dir_clear 008B                        int$flags 0046                     ??_dir_alloc 00EE  
       posicao_cursor_lcd@linha 001E                        _st_clust 57E2                        _st_dword 53E0  
                   ??_clst2sect 0060                   ??_sync_window 0075                     ??_disk_read 0074  
       __end_of_inicializa_shrc 5BAA           __CFG_CPUDIV$OSC1_PLL2 000000            ?_endereco_cursor_lcd 0001  
                      mem_cmp@d 0023                        mem_cmp@r 0027                        mem_cmp@s 0025  
                    _INTCONbits 000FF2                       put_fat@bc 00AC                        mem_cpy@d 0020  
                     put_fat@fs 0090                        mem_cpy@s 0022                        mem_set@d 0020  
                      itoa@base 0064               _config_timer_dois 5B92                    _tempo_backup 0148  
             _config_timer_zero 5AE0                   clst2sect@clst 0028                        intlevel2 0000  
            ?_config_timer_dois 0001        mensagem_inicial@msg_dois 0071                     ??_sdc_reset 002E  
            ?_config_timer_zero 0001                    _tempo_tarefa 00F8                  dir_register@dp 00F6  
                dir_register@fs 016C                 ?_sdc_disk_write 0023                ___lwmod@dividend 001A  
                  dir_clear@szb 0093                ___lldiv@dividend 001A                    dir_alloc@res 00F5  
                 sync_window@fs 0073               sdc_disk_read@buff 0066           __end_of_sdc_disk_read 382E  
           sdc_disk_status@pdrv 001B                     f_mount@path 00E0             sdc_disk_status@stat 001A  
                     sync_fs@fs 008C             ??_config_timer_dois 001A                      _OSCCONbits 000FD3  
           ??_config_timer_zero 001E                     _move_window 4C5C                        put_fat@p 00AA  
          sdc_disk_write@count1 0062            sdc_disk_write@p_buff 0023                _recebe_dado_uart 5B72  
       recebe_dado_SPI@contador 001C                        utoa@base 0025            sdc_disk_write@sector 0025  
         ??_endereco_cursor_lcd 001C                   ?_dir_register 00F6                    response@buff 001D  
                   dir_clear@fs 0085                     dir_alloc@dp 00EA                     dir_alloc@fs 00F1  
              ___lldiv@quotient 0022                 ___lwmod@divisor 001C                 ___lwmod@counter 001E  
           __end_of_sync_window 3B58                     dir_find@res 00F1       __end_of_config_timer_dois 5B9E  
             remove_chain@pclst 00B5                   ?_create_chain 00AF       __end_of_config_timer_zero 5AFA  
   __size_ofi2_write_timer_zero 0012                     _SSPCON1bits 000FC6                    dir_next@clst 00E6  
              _create_name$2900 0060          escreve_cmd_lcd@comando 001C             sdc_disk_write@count 0029  
                   clst2sect@fs 0026   sdc_disk_initialize@crc_number 007B                     dir_sdi@clst 00C2  
                  ?_create_name 0022                     dir_next@ofs 00E0              sdc_disk_write@buff 0067  
  __size_of_sdc_disk_initialize 046C                    f_write@csect 0173                    f_write@wbuff 0171  
                  ?_get_fattime 001A                    _put_fat$2456 00A6                    _put_fat$2457 00A8  
                   f_write@buff 00CE                     f_write@clst 017B               sdc_disk_write@res 0064  
                   f_write@sect 0177                    ?_find_volume 0097                _escreve_dado_SPI 5758  
                   f_write@wcnt 017F                   ?_get_ldnumber 001A                    ?_disk_status 0001  
 __end_ofmensagem_inicial@F4171 6173   __end_ofmensagem_inicial@F4169 6184  
