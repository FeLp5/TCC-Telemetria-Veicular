

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Feb 24 15:03:21 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   100                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   106                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   107  0000                     
   108                           ; Version 1.45
   109                           ; Generated 16/11/2017 GMT
   110                           ; 
   111                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   112                           ; All rights reserved.
   113                           ; 
   114                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   115                           ; 
   116                           ; Redistribution and use in source and binary forms, with or without modification, are
   117                           ; permitted provided that the following conditions are met:
   118                           ; 
   119                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   120                           ;        conditions and the following disclaimer.
   121                           ; 
   122                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   123                           ;        of conditions and the following disclaimer in the documentation and/or other
   124                           ;        materials provided with the distribution.
   125                           ; 
   126                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   127                           ;        software without specific prior written permission.
   128                           ; 
   129                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   130                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   131                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   132                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   133                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   134                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   135                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   136                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   137                           ; 
   138                           ; 
   139                           ; Code-generator required, PIC18F4550 Definitions
   140                           ; 
   141                           ; SFR Addresses
   142  0000                     
   143                           	psect	idataBANK1
   144  005A72                     __pidataBANK1:
   145                           	opt stack 0
   146                           
   147                           ;initializer for _fileName
   148  005A72  63                 	db	99
   149  005A73  68                 	db	104
   150  005A74  65                 	db	101
   151  005A75  63                 	db	99
   152  005A76  6B                 	db	107
   153  005A77  2E                 	db	46
   154  005A78  74                 	db	116
   155  005A79  78                 	db	120
   156  005A7A  74                 	db	116
   157  005A7B  00                 	db	0
   158  005A7C  00                 	db	0
   159  005A7D  00                 	db	0
   160  005A7E  00                 	db	0
   161  005A7F  00                 	db	0
   162  005A80  00                 	db	0
   163                           
   164                           ;initializer for escreve_inteiro_uart@F3956
   165  005A81  30                 	db	48
   166  005A82  30                 	db	48
   167  005A83  30                 	db	48
   168  005A84  30                 	db	48
   169  005A85  30                 	db	48
   170  005A86  30                 	db	48
   171  005A87  00                 	db	0
   172                           
   173                           ;initializer for escreve_inteiro_lcd@F3966
   174  005A88  30                 	db	48
   175  005A89  30                 	db	48
   176  005A8A  30                 	db	48
   177  005A8B  30                 	db	48
   178  005A8C  30                 	db	48
   179  005A8D  30                 	db	48
   180  005A8E  00                 	db	0
   181                           
   182                           	psect	mediumconst
   183  0060DA                     __pmediumconst:
   184                           	opt stack 0
   185  0060DA  00                 	db	0
   186  0060DB                     _dpowers:
   187                           	opt stack 0
   188  0060DB  0001               	dw	1
   189  0060DD  0000               	dw	0
   190  0060DF  000A               	dw	10
   191  0060E1  0000               	dw	0
   192  0060E3  0064               	dw	100
   193  0060E5  0000               	dw	0
   194  0060E7  03E8               	dw	1000
   195  0060E9  0000               	dw	0
   196  0060EB  2710               	dw	10000
   197  0060ED  0000               	dw	0
   198  0060EF  86A0               	dw	34464
   199  0060F1  0001               	dw	1
   200  0060F3  4240               	dw	16960
   201  0060F5  000F               	dw	15
   202  0060F7  9680               	dw	38528
   203  0060F9  0098               	dw	152
   204  0060FB  E100               	dw	57600
   205  0060FD  05F5               	dw	1525
   206  0060FF  CA00               	dw	51712
   207  006101  3B9A               	dw	15258
   208  006103                     __end_of_dpowers:
   209                           	opt stack 0
   210  006103                     __powers_:
   211                           	opt stack 0
   212  006103  00                 	db	0
   213  006104  80                 	db	128
   214  006105  3F                 	db	63
   215  006106  00                 	db	0
   216  006107  20                 	db	32
   217  006108  41                 	db	65
   218  006109  00                 	db	0
   219  00610A  C8                 	db	200
   220  00610B  42                 	db	66
   221  00610C  00                 	db	0
   222  00610D  7A                 	db	122
   223  00610E  44                 	db	68
   224  00610F  40                 	db	64
   225  006110  1C                 	db	28
   226  006111  46                 	db	70
   227  006112  50                 	db	80
   228  006113  C3                 	db	195
   229  006114  47                 	db	71
   230  006115  24                 	db	36
   231  006116  74                 	db	116
   232  006117  49                 	db	73
   233  006118  97                 	db	151
   234  006119  18                 	db	24
   235  00611A  4B                 	db	75
   236  00611B  BC                 	db	188
   237  00611C  BE                 	db	190
   238  00611D  4C                 	db	76
   239  00611E  6B                 	db	107
   240  00611F  6E                 	db	110
   241  006120  4E                 	db	78
   242  006121  03                 	db	3
   243  006122  15                 	db	21
   244  006123  50                 	db	80
   245  006124  79                 	db	121
   246  006125  AD                 	db	173
   247  006126  60                 	db	96
   248  006127  F3                 	db	243
   249  006128  49                 	db	73
   250  006129  71                 	db	113
   251  00612A                     __end_of__powers_:
   252                           	opt stack 0
   253  00612A                     __npowers_:
   254                           	opt stack 0
   255  00612A  00                 	db	0
   256  00612B  80                 	db	128
   257  00612C  3F                 	db	63
   258  00612D  CD                 	db	205
   259  00612E  CC                 	db	204
   260  00612F  3D                 	db	61
   261  006130  D7                 	db	215
   262  006131  23                 	db	35
   263  006132  3C                 	db	60
   264  006133  12                 	db	18
   265  006134  83                 	db	131
   266  006135  3A                 	db	58
   267  006136  B7                 	db	183
   268  006137  D1                 	db	209
   269  006138  38                 	db	56
   270  006139  C6                 	db	198
   271  00613A  27                 	db	39
   272  00613B  37                 	db	55
   273  00613C  38                 	db	56
   274  00613D  86                 	db	134
   275  00613E  35                 	db	53
   276  00613F  C0                 	db	192
   277  006140  D6                 	db	214
   278  006141  33                 	db	51
   279  006142  CC                 	db	204
   280  006143  2B                 	db	43
   281  006144  32                 	db	50
   282  006145  70                 	db	112
   283  006146  89                 	db	137
   284  006147  30                 	db	48
   285  006148  E7                 	db	231
   286  006149  DB                 	db	219
   287  00614A  2E                 	db	46
   288  00614B  E5                 	db	229
   289  00614C  3C                 	db	60
   290  00614D  1E                 	db	30
   291  00614E  42                 	db	66
   292  00614F  A2                 	db	162
   293  006150  0D                 	db	13
   294  006151                     __end_of__npowers_:
   295                           	opt stack 0
   296  006151                     leitura_chave@F3842:
   297                           	opt stack 0
   298  006151  20                 	db	32
   299  006152  49                 	db	73
   300  006153  67                 	db	103
   301  006154  6E                 	db	110
   302  006155  20                 	db	32
   303  006156  4F                 	db	79
   304  006157  6E                 	db	110
   305  006158  00                 	db	0
   306  006159  00                 	db	0
   307  00615A  00                 	db	0
   308  00615B  00                 	db	0
   309  00615C  00                 	db	0
   310  00615D  00                 	db	0
   311  00615E  00                 	db	0
   312  00615F  00                 	db	0
   313  006160  00                 	db	0
   314  006161  00                 	db	0
   315  006162                     __end_ofleitura_chave@F3842:
   316                           	opt stack 0
   317  006162                     leitura_chave@F3840:
   318                           	opt stack 0
   319  006162  20                 	db	32
   320  006163  49                 	db	73
   321  006164  67                 	db	103
   322  006165  6E                 	db	110
   323  006166  20                 	db	32
   324  006167  43                 	db	67
   325  006168  72                 	db	114
   326  006169  61                 	db	97
   327  00616A  6E                 	db	110
   328  00616B  6B                 	db	107
   329  00616C  00                 	db	0
   330  00616D  00                 	db	0
   331  00616E  00                 	db	0
   332  00616F  00                 	db	0
   333  006170  00                 	db	0
   334  006171  00                 	db	0
   335  006172  00                 	db	0
   336  006173                     __end_ofleitura_chave@F3840:
   337                           	opt stack 0
   338  006173                     leitura_chave@F3838:
   339                           	opt stack 0
   340  006173  20                 	db	32
   341  006174  49                 	db	73
   342  006175  67                 	db	103
   343  006176  6E                 	db	110
   344  006177  20                 	db	32
   345  006178  4F                 	db	79
   346  006179  66                 	db	102
   347  00617A  66                 	db	102
   348  00617B  00                 	db	0
   349  00617C  00                 	db	0
   350  00617D  00                 	db	0
   351  00617E  00                 	db	0
   352  00617F  00                 	db	0
   353  006180  00                 	db	0
   354  006181  00                 	db	0
   355  006182  00                 	db	0
   356  006183  00                 	db	0
   357  006184                     __end_ofleitura_chave@F3838:
   358                           	opt stack 0
   359  006184                     mensagem_inicial@F4179:
   360                           	opt stack 0
   361  006184  20                 	db	32
   362  006185  31                 	db	49
   363  006186  38                 	db	56
   364  006187  2F                 	db	47
   365  006188  30                 	db	48
   366  006189  31                 	db	49
   367  00618A  2F                 	db	47
   368  00618B  32                 	db	50
   369  00618C  30                 	db	48
   370  00618D  32                 	db	50
   371  00618E  32                 	db	50
   372  00618F  20                 	db	32
   373  006190  20                 	db	32
   374  006191  20                 	db	32
   375  006192  00                 	db	0
   376  006193  00                 	db	0
   377  006194  00                 	db	0
   378  006195                     __end_ofmensagem_inicial@F4179:
   379                           	opt stack 0
   380  006195                     mensagem_inicial@F4177:
   381                           	opt stack 0
   382  006195  53                 	db	83
   383  006196  44                 	db	68
   384  006197  43                 	db	67
   385  006198  61                 	db	97
   386  006199  72                 	db	114
   387  00619A  64                 	db	100
   388  00619B  20                 	db	32
   389  00619C  49                 	db	73
   390  00619D  6E                 	db	110
   391  00619E  69                 	db	105
   392  00619F  74                 	db	116
   393  0061A0  20                 	db	32
   394  0061A1  20                 	db	32
   395  0061A2  20                 	db	32
   396  0061A3  00                 	db	0
   397  0061A4  00                 	db	0
   398  0061A5  00                 	db	0
   399  0061A6                     __end_ofmensagem_inicial@F4177:
   400                           	opt stack 0
   401  0061A6                     _DbcTbl:
   402                           	opt stack 0
   403  0061A6  81                 	db	129
   404  0061A7  9F                 	db	159
   405  0061A8  E0                 	db	224
   406  0061A9  FC                 	db	252
   407  0061AA  40                 	db	64
   408  0061AB  7E                 	db	126
   409  0061AC  80                 	db	128
   410  0061AD  FC                 	db	252
   411  0061AE  00                 	db	0
   412  0061AF  00                 	db	0
   413  0061B0                     __end_of_DbcTbl:
   414                           	opt stack 0
   415  0000                     _RCSTA	set	4011
   416  0000                     _TXSTA	set	4012
   417  0000                     _RCREG	set	4014
   418  0000                     _RCSTAbits	set	4011
   419  0000                     _TXREG	set	4013
   420  0000                     _SPBRG	set	4015
   421  0000                     _PIR2bits	set	4001
   422  0000                     _EECON2	set	4007
   423  0000                     _EECON1bits	set	4006
   424  0000                     _EEDATA	set	4008
   425  0000                     _EEADR	set	4009
   426  0000                     _PR2	set	4043
   427  0000                     _TMR2	set	4044
   428  0000                     _T2CON	set	4042
   429  0000                     _OSCCONbits	set	4051
   430  0000                     _TRISE	set	3990
   431  0000                     _TRISC	set	3988
   432  0000                     _TRISA	set	3986
   433  0000                     _TRISD	set	3989
   434  0000                     _LATB	set	3978
   435  0000                     _TRISB	set	3987
   436  0000                     _TMR0L	set	4054
   437  0000                     _TMR0H	set	4055
   438  0000                     _PIE1	set	3997
   439  0000                     _INTCON3	set	4080
   440  0000                     _INTCON2	set	4081
   441  0000                     _INTCON	set	4082
   442  0000                     _SPPCFG	set	3939
   443  0000                     _SPPCON	set	3941
   444  0000                     _T0CON	set	4053
   445  0000                     _PORTDbits	set	3971
   446  0000                     _TRISDbits	set	3989
   447  0000                     _PORTEbits	set	3972
   448  0000                     _PORTCbits	set	3970
   449  0000                     _SSPBUF	set	4041
   450  0000                     _TRISCbits	set	3988
   451  0000                     _SSPSTATbits	set	4039
   452  0000                     _SSPCON1	set	4038
   453  0000                     _SSPSTAT	set	4039
   454  0000                     _SSPCON1bits	set	4038
   455  0000                     _PORTBbits	set	3969
   456  0000                     _TRISBbits	set	3987
   457  0000                     _T0CONbits	set	4053
   458  0000                     _LATBbits	set	3978
   459  0000                     _PORTAbits	set	3968
   460  0000                     _TRISAbits	set	3986
   461  0000                     _ADCON1	set	4033
   462  0000                     _PCL	set	4089
   463  0000                     _PCLATH	set	4090
   464  0000                     _INTCONbits	set	4082
   465  0000                     _PIR1bits	set	3998
   466  0000                     _PIE1bits	set	3997
   467  0000                     _RCIF	set	31989
   468  0000                     _TRMT	set	32097
   469  0000                     _TXEN	set	32101
   470  0000                     _CREN	set	32092
   471  0000                     _SPEN	set	32095
   472  0000                     _SYNC	set	32100
   473  0000                     _BRGH	set	32098
   474  0000                     _TMR2IF	set	31985
   475  0000                     _INT0IE	set	32660
   476  0000                     _INT0IF	set	32657
   477  0000                     _T0IF	set	32658
   478  0000                     _TMR0IF	set	32658
   479  0061B0                     STR_14:
   480  0061B0  41                 	db	65	;'A'
   481  0061B1  72                 	db	114	;'r'
   482  0061B2  71                 	db	113	;'q'
   483  0061B3  75                 	db	117	;'u'
   484  0061B4  69                 	db	105	;'i'
   485  0061B5  76                 	db	118	;'v'
   486  0061B6  6F                 	db	111	;'o'
   487  0061B7  20                 	db	32
   488  0061B8  72                 	db	114	;'r'
   489  0061B9  65                 	db	101	;'e'
   490  0061BA  6E                 	db	110	;'n'
   491  0061BB  6F                 	db	111	;'o'
   492  0061BC  6D                 	db	109	;'m'
   493  0061BD  65                 	db	101	;'e'
   494  0061BE  61                 	db	97	;'a'
   495  0061BF  64                 	db	100	;'d'
   496  0061C0  6F                 	db	111	;'o'
   497  0061C1  00                 	db	0
   498  0061C2  53                 	db	83	;'S'
   499  0061C3  50                 	db	80	;'P'
   500  0061C4  49                 	db	73	;'I'
   501  0061C5  20                 	db	32
   502  0061C6  63                 	db	99	;'c'
   503  0061C7  6F                 	db	111	;'o'
   504  0061C8  6E                 	db	110	;'n'
   505  0061C9  66                 	db	102	;'f'
   506  0061CA  69                 	db	105	;'i'
   507  0061CB  67                 	db	103	;'g'
   508  0061CC  75                 	db	117	;'u'
   509  0061CD  72                 	db	114	;'r'
   510  0061CE  61                 	db	97	;'a'
   511  0061CF  64                 	db	100	;'d'
   512  0061D0  61                 	db	97	;'a'
   513  0061D1  21                 	db	33
   514  0061D2  00                 	db	0
   515  0061D3                     STR_15:
   516  0061D3  46                 	db	70	;'F'
   517  0061D4  49                 	db	73	;'I'
   518  0061D5  4C                 	db	76	;'L'
   519  0061D6  45                 	db	69	;'E'
   520  0061D7  20                 	db	32
   521  0061D8  4E                 	db	78	;'N'
   522  0061D9  4F                 	db	79	;'O'
   523  0061DA  54                 	db	84	;'T'
   524  0061DB  20                 	db	32
   525  0061DC  43                 	db	67	;'C'
   526  0061DD  52                 	db	82	;'R'
   527  0061DE  45                 	db	69	;'E'
   528  0061DF  41                 	db	65	;'A'
   529  0061E0  54                 	db	84	;'T'
   530  0061E1  45                 	db	69	;'E'
   531  0061E2  44                 	db	68	;'D'
   532  0061E3  00                 	db	0
   533  0061E4                     STR_19:
   534  0061E4  49                 	db	73	;'I'
   535  0061E5  6E                 	db	110	;'n'
   536  0061E6  73                 	db	115	;'s'
   537  0061E7  69                 	db	105	;'i'
   538  0061E8  72                 	db	114	;'r'
   539  0061E9  61                 	db	97	;'a'
   540  0061EA  20                 	db	32
   541  0061EB  6F                 	db	111	;'o'
   542  0061EC  20                 	db	32
   543  0061ED  43                 	db	67	;'C'
   544  0061EE  61                 	db	97	;'a'
   545  0061EF  72                 	db	114	;'r'
   546  0061F0  74                 	db	116	;'t'
   547  0061F1  61                 	db	97	;'a'
   548  0061F2  6F                 	db	111	;'o'
   549  0061F3  00                 	db	0
   550  0061F4                     STR_20:
   551  0061F4  43                 	db	67	;'C'
   552  0061F5  61                 	db	97	;'a'
   553  0061F6  72                 	db	114	;'r'
   554  0061F7  74                 	db	116	;'t'
   555  0061F8  61                 	db	97	;'a'
   556  0061F9  6F                 	db	111	;'o'
   557  0061FA  20                 	db	32
   558  0061FB  49                 	db	73	;'I'
   559  0061FC  6E                 	db	110	;'n'
   560  0061FD  73                 	db	115	;'s'
   561  0061FE  65                 	db	101	;'e'
   562  0061FF  72                 	db	114	;'r'
   563  006200  69                 	db	105	;'i'
   564  006201  64                 	db	100	;'d'
   565  006202  6F                 	db	111	;'o'
   566  006203  00                 	db	0
   567  006204                     STR_11:
   568  006204  41                 	db	65	;'A'
   569  006205  62                 	db	98	;'b'
   570  006206  72                 	db	114	;'r'
   571  006207  69                 	db	105	;'i'
   572  006208  6E                 	db	110	;'n'
   573  006209  64                 	db	100	;'d'
   574  00620A  6F                 	db	111	;'o'
   575  00620B  20                 	db	32
   576  00620C  61                 	db	97	;'a'
   577  00620D  72                 	db	114	;'r'
   578  00620E  71                 	db	113	;'q'
   579  00620F  75                 	db	117	;'u'
   580  006210  69                 	db	105	;'i'
   581  006211  76                 	db	118	;'v'
   582  006212  6F                 	db	111	;'o'
   583  006213  00                 	db	0
   584  006214                     STR_23:
   585  006214  2A                 	db	42
   586  006215  2B                 	db	43
   587  006216  2C                 	db	44
   588  006217  3A                 	db	58	;':'
   589  006218  3B                 	db	59	;';'
   590  006219  3C                 	db	60	;'<'
   591  00621A  3D                 	db	61	;'='
   592  00621B  3E                 	db	62	;'>'
   593  00621C  5B                 	db	91	;'['
   594  00621D  5D                 	db	93	;']'
   595  00621E  7C                 	db	124
   596  00621F  22                 	db	34
   597  006220  3F                 	db	63	;'?'
   598  006221  7F                 	db	127
   599  006222  00                 	db	0
   600  006223                     STR_22:
   601  006223  4D                 	db	77	;'M'
   602  006224  4D                 	db	77	;'M'
   603  006225  43                 	db	67	;'C'
   604  006226  20                 	db	32
   605  006227  56                 	db	86	;'V'
   606  006228  65                 	db	101	;'e'
   607  006229  72                 	db	114	;'r'
   608  00622A  2E                 	db	46
   609  00622B  20                 	db	32
   610  00622C  33                 	db	51	;'3'
   611  00622D  00                 	db	0
   612  00622E                     STR_18:
   613  00622E  53                 	db	83	;'S'
   614  00622F  65                 	db	101	;'e'
   615  006230  6D                 	db	109	;'m'
   616  006231  20                 	db	32
   617  006232  43                 	db	67	;'C'
   618  006233  61                 	db	97	;'a'
   619  006234  72                 	db	114	;'r'
   620  006235  74                 	db	116	;'t'
   621  006236  61                 	db	97	;'a'
   622  006237  6F                 	db	111	;'o'
   623  006238  00                 	db	0
   624  006239                     STR_21:
   625  006239  53                 	db	83	;'S'
   626  00623A  44                 	db	68	;'D'
   627  00623B  20                 	db	32
   628  00623C  56                 	db	86	;'V'
   629  00623D  45                 	db	69	;'E'
   630  00623E  52                 	db	82	;'R'
   631  00623F  2E                 	db	46
   632  006240  20                 	db	32
   633  006241  31                 	db	49	;'1'
   634  006242  00                 	db	0
   635  006243                     STR_24:
   636  006243  46                 	db	70	;'F'
   637  006244  41                 	db	65	;'A'
   638  006245  54                 	db	84	;'T'
   639  006246  33                 	db	51	;'3'
   640  006247  32                 	db	50	;'2'
   641  006248  20                 	db	32
   642  006249  20                 	db	32
   643  00624A  20                 	db	32
   644  00624B  00                 	db	0
   645  00624C  25                 	db	37
   646  00624D  64                 	db	100	;'d'
   647  00624E  3A                 	db	58	;':'
   648  00624F  25                 	db	37
   649  006250  64                 	db	100	;'d'
   650  006251  3A                 	db	58	;':'
   651  006252  25                 	db	37
   652  006253  64                 	db	100	;'d'
   653  006254  00                 	db	0
   654  006255                     STR_12:
   655  006255  74                 	db	116	;'t'
   656  006256  65                 	db	101	;'e'
   657  006257  2E                 	db	46
   658  006258  62                 	db	98	;'b'
   659  006259  69                 	db	105	;'i'
   660  00625A  6E                 	db	110	;'n'
   661  00625B  00                 	db	0
   662  00625C                     STR_13:
   663  00625C  74                 	db	116	;'t'
   664  00625D  65                 	db	101	;'e'
   665  00625E  73                 	db	115	;'s'
   666  00625F  74                 	db	116	;'t'
   667  006260  65                 	db	101	;'e'
   668  006261  00                 	db	0
   669  006262  48                 	db	72	;'H'
   670  006263  6F                 	db	111	;'o'
   671  006264  72                 	db	114	;'r'
   672  006265  61                 	db	97	;'a'
   673  006266  3A                 	db	58	;':'
   674  006267  00                 	db	0
   675  006268  44                 	db	68	;'D'
   676  006269  61                 	db	97	;'a'
   677  00626A  74                 	db	116	;'t'
   678  00626B  61                 	db	97	;'a'
   679  00626C  3A                 	db	58	;':'
   680  00626D  00                 	db	0
   681  00626E                     STR_3:
   682  00626E  25                 	db	37
   683  00626F  2E                 	db	46
   684  006270  30                 	db	48	;'0'
   685  006271  37                 	db	55	;'7'
   686  006272  66                 	db	102	;'f'
   687  006273  00                 	db	0
   688  006274  4C                 	db	76	;'L'
   689  006275  6F                 	db	111	;'o'
   690  006276  6E                 	db	110	;'n'
   691  006277  3A                 	db	58	;':'
   692  006278  00                 	db	0
   693  006279                     STR_17:
   694  006279  0D                 	db	13
   695  00627A  0A                 	db	10
   696  00627B  00                 	db	0
   697  00627C                     STR_6:
   698  00627C  7C                 	db	124
   699  00627D  00                 	db	0
   700  0000                     
   701                           ; #config settings
   702  00627E  00                 	db	0	; dummy byte at the end
   703  0000                     
   704                           	psect	cinit
   705  005476                     __pcinit:
   706                           	opt stack 0
   707  005476                     start_initialization:
   708                           	opt stack 0
   709  005476                     __initialization:
   710                           	opt stack 0
   711                           
   712                           ; Initialize objects allocated to BANK1 (29 bytes)
   713                           ; load TBLPTR registers with __pidataBANK1
   714  005476  0E72               	movlw	low __pidataBANK1
   715  005478  6EF6               	movwf	tblptrl,c
   716  00547A  0E5A               	movlw	high __pidataBANK1
   717  00547C  6EF7               	movwf	tblptrh,c
   718  00547E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   719  005480  6EF8               	movwf	tblptru,c
   720  005482  EE01  F0D4         	lfsr	0,__pdataBANK1
   721  005486  EE10 F01D          	lfsr	1,29
   722  00548A                     copy_data0:
   723  00548A  0009               	tblrd		*+
   724  00548C  CFF5 FFEE          	movff	tablat,postinc0
   725  005490  50E5               	movf	postdec1,w,c
   726  005492  50E1               	movf	fsr1l,w,c
   727  005494  E1FA               	bnz	copy_data0
   728                           
   729                           ; Clear objects allocated to BIGRAM (559 bytes)
   730  005496  EE03  F027         	lfsr	0,__pbssBIGRAM
   731  00549A  EE12 F02F          	lfsr	1,559
   732  00549E                     clear_0:
   733  00549E  6AEE               	clrf	postinc0,c
   734  0054A0  50E5               	movf	postdec1,w,c
   735  0054A2  50E1               	movf	fsr1l,w,c
   736  0054A4  E1FC               	bnz	clear_0
   737  0054A6  50E2               	movf	fsr1h,w,c
   738  0054A8  E1FA               	bnz	clear_0
   739                           
   740                           ; Clear objects allocated to BANK2 (250 bytes)
   741  0054AA  EE02  F000         	lfsr	0,__pbssBANK2
   742  0054AE  0EFA               	movlw	250
   743  0054B0                     clear_1:
   744  0054B0  6AEE               	clrf	postinc0,c
   745  0054B2  06E8               	decf	wreg,f,c
   746  0054B4  E1FD               	bnz	clear_1
   747                           
   748                           ; Clear objects allocated to BANK1 (115 bytes)
   749  0054B6  EE01  F000         	lfsr	0,__pbssBANK1
   750  0054BA  0E73               	movlw	115
   751  0054BC                     clear_2:
   752  0054BC  6AEE               	clrf	postinc0,c
   753  0054BE  06E8               	decf	wreg,f,c
   754  0054C0  E1FD               	bnz	clear_2
   755                           
   756                           ; Clear objects allocated to COMRAM (25 bytes)
   757  0054C2  EE00  F02D         	lfsr	0,__pbssCOMRAM
   758  0054C6  0E19               	movlw	25
   759  0054C8                     clear_3:
   760  0054C8  6AEE               	clrf	postinc0,c
   761  0054CA  06E8               	decf	wreg,f,c
   762  0054CC  E1FD               	bnz	clear_3
   763  0054CE                     end_of_initialization:
   764                           	opt stack 0
   765  0054CE                     __end_of__initialization:
   766                           	opt stack 0
   767  0054CE  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   768  0054D0  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   769  0054D2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   770  0054D4  6EF8               	movwf	tblptru,c
   771  0054D6  0100               	movlb	0
   772  0054D8  EFEB  F02C         	goto	_main	;jump to C main() function
   773                           tblptru	equ	0xFF8
   774                           tblptrh	equ	0xFF7
   775                           tblptrl	equ	0xFF6
   776                           tablat	equ	0xFF5
   777                           postinc0	equ	0xFEE
   778                           wreg	equ	0xFE8
   779                           postdec1	equ	0xFE5
   780                           fsr1h	equ	0xFE2
   781                           fsr1l	equ	0xFE1
   782                           
   783                           	psect	bssCOMRAM
   784  00002D                     __pbssCOMRAM:
   785                           	opt stack 0
   786  00002D                     _gga_code:
   787                           	opt stack 0
   788  00002D                     	ds	3
   789  000030                     _FatFs:
   790                           	opt stack 0
   791  000030                     	ds	2
   792  000032                     _rmc_index:
   793                           	opt stack 0
   794  000032                     	ds	2
   795  000034                     _gga_index:
   796                           	opt stack 0
   797  000034                     	ds	2
   798  000036                     _timeout_tarefa:
   799                           	opt stack 0
   800  000036                     	ds	2
   801  000038                     timer_dois@flag:
   802                           	opt stack 0
   803  000038                     	ds	1
   804  000039                     _estado:
   805                           	opt stack 0
   806  000039                     	ds	1
   807  00003A                     _dado:
   808                           	opt stack 0
   809  00003A                     	ds	1
   810  00003B                     _s:
   811                           	opt stack 0
   812  00003B                     	ds	1
   813  00003C                     _Result:
   814                           	opt stack 0
   815  00003C                     	ds	1
   816  00003D                     _is_it_rmc_string:
   817                           	opt stack 0
   818  00003D                     	ds	1
   819  00003E                     _is_it_gga_string:
   820                           	opt stack 0
   821  00003E                     	ds	1
   822  00003F                     _comma_counter_rmc:
   823                           	opt stack 0
   824  00003F                     	ds	1
   825  000040                     _comma_counter_gga:
   826                           	opt stack 0
   827  000040                     	ds	1
   828  000041                     _E_W:
   829                           	opt stack 0
   830  000041                     	ds	1
   831  000042                     _n_s:
   832                           	opt stack 0
   833  000042                     	ds	1
   834  000043                     _tarefa_em_execucao:
   835                           	opt stack 0
   836  000043                     	ds	1
   837  000044                     _sinaliza_int_timer:
   838                           	opt stack 0
   839  000044                     	ds	1
   840  000045                     _data_uart_recebe:
   841                           	opt stack 0
   842  000045                     	ds	1
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           postdec1	equ	0xFE5
   850                           fsr1h	equ	0xFE2
   851                           fsr1l	equ	0xFE1
   852                           
   853                           	psect	bssBANK1
   854  000100                     __pbssBANK1:
   855                           	opt stack 0
   856  000100                     _gga_pointers:
   857                           	opt stack 0
   858  000100                     	ds	20
   859  000114                     _rmc_pointers:
   860                           	opt stack 0
   861  000114                     	ds	12
   862  000120                     _f_time:
   863                           	opt stack 0
   864  000120                     	ds	9
   865  000129                     _info_chaves:
   866                           	opt stack 0
   867  000129                     	ds	7
   868  000130                     _fileSize:
   869                           	opt stack 0
   870  000130                     	ds	4
   871  000134                     _tempo_tarefa:
   872                           	opt stack 0
   873  000134                     	ds	4
   874  000138                     _tempo_backup:
   875                           	opt stack 0
   876  000138                     	ds	4
   877  00013C                     _p_tarefas:
   878                           	opt stack 0
   879  00013C                     	ds	4
   880  000140                     _rmc_code:
   881                           	opt stack 0
   882  000140                     	ds	3
   883  000143                     _Fsid:
   884                           	opt stack 0
   885  000143                     	ds	2
   886  000145                     _data_buff:
   887                           	opt stack 0
   888  000145                     	ds	2
   889  000147                     _rd:
   890                           	opt stack 0
   891  000147                     	ds	2
   892  000149                     _buff:
   893                           	opt stack 0
   894  000149                     	ds	20
   895  00015D                     _data_buffer:
   896                           	opt stack 0
   897  00015D                     	ds	15
   898  00016C                     _dado_buffer:
   899                           	opt stack 0
   900  00016C                     	ds	7
   901                           tblptru	equ	0xFF8
   902                           tblptrh	equ	0xFF7
   903                           tblptrl	equ	0xFF6
   904                           tablat	equ	0xFF5
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           postdec1	equ	0xFE5
   908                           fsr1h	equ	0xFE2
   909                           fsr1l	equ	0xFE1
   910                           
   911                           	psect	dataBANK1
   912  0001D4                     __pdataBANK1:
   913                           	opt stack 0
   914  0001D4                     _fileName:
   915                           	opt stack 0
   916  0001D4                     	ds	15
   917  0001E3                     escreve_inteiro_uart@F3956:
   918                           	opt stack 0
   919  0001E3                     	ds	7
   920  0001EA                     escreve_inteiro_lcd@F3966:
   921                           	opt stack 0
   922  0001EA                     	ds	7
   923                           tblptru	equ	0xFF8
   924                           tblptrh	equ	0xFF7
   925                           tblptrl	equ	0xFF6
   926                           tablat	equ	0xFF5
   927                           postinc0	equ	0xFEE
   928                           wreg	equ	0xFE8
   929                           postdec1	equ	0xFE5
   930                           fsr1h	equ	0xFE2
   931                           fsr1l	equ	0xFE1
   932                           
   933                           	psect	bssBANK2
   934  000200                     __pbssBANK2:
   935                           	opt stack 0
   936  000200                     _gga_buffer:
   937                           	opt stack 0
   938  000200                     	ds	80
   939  000250                     _rmc_buffer:
   940                           	opt stack 0
   941  000250                     	ds	70
   942  000296                     _folder:
   943                           	opt stack 0
   944  000296                     	ds	48
   945  0002C6                     _data_buffer_32:
   946                           	opt stack 0
   947  0002C6                     	ds	32
   948  0002E6                     _txt:
   949                           	opt stack 0
   950  0002E6                     	ds	20
   951                           tblptru	equ	0xFF8
   952                           tblptrh	equ	0xFF7
   953                           tblptrl	equ	0xFF6
   954                           tablat	equ	0xFF5
   955                           postinc0	equ	0xFEE
   956                           wreg	equ	0xFE8
   957                           postdec1	equ	0xFE5
   958                           fsr1h	equ	0xFE2
   959                           fsr1l	equ	0xFE1
   960                           
   961                           	psect	bssBIGRAM
   962  000327                     __pbssBIGRAM:
   963                           	opt stack 0
   964  000327                     _fs:
   965                           	opt stack 0
   966  000327                     	ds	559
   967                           tblptru	equ	0xFF8
   968                           tblptrh	equ	0xFF7
   969                           tblptrl	equ	0xFF6
   970                           tablat	equ	0xFF5
   971                           postinc0	equ	0xFEE
   972                           wreg	equ	0xFE8
   973                           postdec1	equ	0xFE5
   974                           fsr1h	equ	0xFE2
   975                           fsr1l	equ	0xFE1
   976                           
   977                           	psect	cstackBANK3
   978  000300                     __pcstackBANK3:
   979                           	opt stack 0
   980  000300                     SDCard@br:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x0
   984  000300                     	ds	2
   985  000302                     SDCard@bw:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x2
   989  000302                     	ds	2
   990  000304                     SDCard@FResult:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x4
   994  000304                     	ds	1
   995  000305                     SDCard@fil:
   996                           	opt stack 0
   997                           
   998                           ; 34 bytes @ 0x5
   999  000305                     	ds	34
  1000                           tblptru	equ	0xFF8
  1001                           tblptrh	equ	0xFF7
  1002                           tblptrl	equ	0xFF6
  1003                           tablat	equ	0xFF5
  1004                           postinc0	equ	0xFEE
  1005                           wreg	equ	0xFE8
  1006                           postdec1	equ	0xFE5
  1007                           fsr1h	equ	0xFE2
  1008                           fsr1l	equ	0xFE1
  1009                           
  1010                           	psect	cstackBANK1
  1011  000173                     __pcstackBANK1:
  1012                           	opt stack 0
  1013  000173                     f_mount@res:
  1014                           	opt stack 0
  1015  000173                     dir_alloc@fs:
  1016                           	opt stack 0
  1017  000173                     follow_path@dp:
  1018                           	opt stack 0
  1019  000173                     _f_write$3365:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x0
  1023  000173                     	ds	1
  1024  000174                     f_mount@rp:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x1
  1028  000174                     	ds	1
  1029  000175                     dir_alloc@n:
  1030                           	opt stack 0
  1031  000175                     follow_path@path:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x2
  1035  000175                     	ds	1
  1036  000176                     f_mount@cfs:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x3
  1040  000176                     	ds	1
  1041  000177                     ??_follow_path:
  1042  000177                     dir_alloc@res:
  1043                           	opt stack 0
  1044  000177                     f_write@res:
  1045                           	opt stack 0
  1046                           
  1047                           ; 1 bytes @ 0x4
  1048  000177                     	ds	1
  1049  000178                     dir_register@fs:
  1050                           	opt stack 0
  1051  000178                     f_mount@vol:
  1052                           	opt stack 0
  1053  000178                     f_write@wbuff:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x5
  1057  000178                     	ds	2
  1058  00017A                     dir_register@res:
  1059                           	opt stack 0
  1060  00017A                     f_write@csect:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x7
  1064  00017A                     	ds	1
  1065  00017B                     follow_path@fs:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x8
  1069  00017B                     	ds	1
  1070  00017C                     f_write@cc:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x9
  1074  00017C                     	ds	1
  1075  00017D                     follow_path@ns:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0xA
  1079  00017D                     	ds	1
  1080  00017E                     follow_path@res:
  1081                           	opt stack 0
  1082  00017E                     f_write@sect:
  1083                           	opt stack 0
  1084                           
  1085                           ; 4 bytes @ 0xB
  1086  00017E                     	ds	1
  1087  00017F                     f_open@fp:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0xC
  1091  00017F                     	ds	2
  1092  000181                     f_open@path:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0xE
  1096  000181                     	ds	1
  1097  000182                     f_write@clst:
  1098                           	opt stack 0
  1099                           
  1100                           ; 4 bytes @ 0xF
  1101  000182                     	ds	1
  1102  000183                     f_open@mode:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x10
  1106  000183                     	ds	1
  1107  000184                     ??_f_open:
  1108                           
  1109                           ; 1 bytes @ 0x11
  1110  000184                     	ds	2
  1111  000186                     f_write@wcnt:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x13
  1115  000186                     	ds	2
  1116  000188                     f_write@fs:
  1117                           	opt stack 0
  1118                           
  1119                           ; 2 bytes @ 0x15
  1120  000188                     	ds	4
  1121  00018C                     _f_open$3199:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0x19
  1125  00018C                     	ds	2
  1126  00018E                     f_open@bcs:
  1127                           	opt stack 0
  1128                           
  1129                           ; 4 bytes @ 0x1B
  1130  00018E                     	ds	4
  1131  000192                     f_open@tm:
  1132                           	opt stack 0
  1133                           
  1134                           ; 4 bytes @ 0x1F
  1135  000192                     	ds	4
  1136  000196                     f_open@cl:
  1137                           	opt stack 0
  1138                           
  1139                           ; 4 bytes @ 0x23
  1140  000196                     	ds	4
  1141  00019A                     f_open@sc:
  1142                           	opt stack 0
  1143                           
  1144                           ; 4 bytes @ 0x27
  1145  00019A                     	ds	4
  1146  00019E                     f_open@ofs:
  1147                           	opt stack 0
  1148                           
  1149                           ; 4 bytes @ 0x2B
  1150  00019E                     	ds	4
  1151  0001A2                     f_open@clst:
  1152                           	opt stack 0
  1153                           
  1154                           ; 4 bytes @ 0x2F
  1155  0001A2                     	ds	4
  1156  0001A6                     f_open@fs:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x33
  1160  0001A6                     	ds	2
  1161  0001A8                     f_open@res:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x35
  1165  0001A8                     	ds	1
  1166  0001A9                     f_open@dj:
  1167                           	opt stack 0
  1168                           
  1169                           ; 40 bytes @ 0x36
  1170  0001A9                     	ds	40
  1171  0001D1                     
  1172                           ; 1 bytes @ 0x5E
  1173  0001D1                     	ds	2
  1174  0001D3                     escalonador@cont:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x60
  1178  0001D3                     	ds	1
  1179                           tblptru	equ	0xFF8
  1180                           tblptrh	equ	0xFF7
  1181                           tblptrl	equ	0xFF6
  1182                           tablat	equ	0xFF5
  1183                           postinc0	equ	0xFEE
  1184                           wreg	equ	0xFE8
  1185                           postdec1	equ	0xFE5
  1186                           fsr1h	equ	0xFE2
  1187                           fsr1l	equ	0xFE1
  1188                           
  1189                           	psect	cstackBANK0
  1190  000060                     __pcstackBANK0:
  1191                           	opt stack 0
  1192  000060                     ??_clst2sect:
  1193  000060                     ??_get_fattime:
  1194  000060                     sdc_disk_initialize@i:
  1195                           	opt stack 0
  1196  000060                     sdc_disk_write@i:
  1197                           	opt stack 0
  1198  000060                     _create_name$2902:
  1199                           	opt stack 0
  1200  000060                     itoa@buf:
  1201                           	opt stack 0
  1202  000060                     mensagem_inicial@msg_linha_um:
  1203                           	opt stack 0
  1204                           
  1205                           ; 17 bytes @ 0x0
  1206  000060                     	ds	2
  1207  000062                     sdc_disk_initialize@stat:
  1208                           	opt stack 0
  1209  000062                     create_name@d:
  1210                           	opt stack 0
  1211  000062                     sdc_disk_write@count1:
  1212                           	opt stack 0
  1213  000062                     itoa@val:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x2
  1217  000062                     	ds	1
  1218  000063                     sdc_disk_initialize@count1:
  1219                           	opt stack 0
  1220  000063                     create_name@ni:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x3
  1224  000063                     	ds	1
  1225  000064                     sdc_disk_write@res:
  1226                           	opt stack 0
  1227  000064                     itoa@base:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x4
  1231  000064                     	ds	1
  1232  000065                     sdc_disk_initialize@crc_number:
  1233                           	opt stack 0
  1234  000065                     sdc_disk_write@j:
  1235                           	opt stack 0
  1236  000065                     create_name@p:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x5
  1240  000065                     	ds	1
  1241  000066                     escreve_inteiro_lcd@valor:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x6
  1245  000066                     	ds	1
  1246  000067                     sdc_disk_initialize@buff_i:
  1247                           	opt stack 0
  1248  000067                     sdc_disk_write@buff:
  1249                           	opt stack 0
  1250  000067                     create_name@si:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x7
  1254  000067                     	ds	1
  1255  000068                     sdc_disk_initialize@ocr:
  1256                           	opt stack 0
  1257  000068                     disk_write@buff:
  1258                           	opt stack 0
  1259  000068                     escreve_inteiro_lcd@texto:
  1260                           	opt stack 0
  1261                           
  1262                           ; 7 bytes @ 0x8
  1263  000068                     	ds	1
  1264  000069                     sdc_disk_initialize@count2:
  1265                           	opt stack 0
  1266  000069                     create_name@sfn:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x9
  1270  000069                     	ds	1
  1271  00006A                     disk_write@sector:
  1272                           	opt stack 0
  1273                           
  1274                           ; 4 bytes @ 0xA
  1275  00006A                     	ds	1
  1276  00006B                     sdc_disk_initialize@buff:
  1277                           	opt stack 0
  1278  00006B                     create_name@i:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0xB
  1282  00006B                     	ds	2
  1283  00006D                     create_name@c:
  1284                           	opt stack 0
  1285                           
  1286                           ; 1 bytes @ 0xD
  1287  00006D                     	ds	1
  1288  00006E                     disk_write@count:
  1289                           	opt stack 0
  1290                           
  1291                           ; 1 bytes @ 0xE
  1292  00006E                     	ds	1
  1293  00006F                     disk_write@pdrv:
  1294                           	opt stack 0
  1295  00006F                     sdc_disk_read@p_buff:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0xF
  1299  00006F                     	ds	1
  1300  000070                     disk_write@result:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x10
  1304  000070                     	ds	1
  1305  000071                     sdc_disk_read@sector:
  1306                           	opt stack 0
  1307  000071                     mensagem_inicial@msg_dois:
  1308                           	opt stack 0
  1309                           
  1310                           ; 17 bytes @ 0x11
  1311  000071                     	ds	1
  1312  000072                     disk_write@res:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0x12
  1316  000072                     	ds	1
  1317  000073                     sync_window@fs:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0x13
  1321  000073                     	ds	2
  1322  000075                     ??_sync_window:
  1323  000075                     sdc_disk_read@count:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x15
  1327  000075                     	ds	1
  1328  000076                     ??_sdc_disk_read:
  1329                           
  1330                           ; 1 bytes @ 0x16
  1331  000076                     	ds	4
  1332  00007A                     sdc_disk_read@ptr:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x1A
  1336  00007A                     	ds	1
  1337  00007B                     sdc_disk_read@start_add:
  1338                           	opt stack 0
  1339                           
  1340                           ; 4 bytes @ 0x1B
  1341  00007B                     	ds	4
  1342  00007F                     sdc_disk_read@res:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x1F
  1346  00007F                     	ds	1
  1347  000080                     sdc_disk_read@length:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x20
  1351  000080                     	ds	2
  1352  000082                     sdc_disk_read@buff:
  1353                           	opt stack 0
  1354                           
  1355                           ; 1 bytes @ 0x22
  1356  000082                     	ds	1
  1357  000083                     disk_read@buff:
  1358                           	opt stack 0
  1359                           
  1360                           ; 2 bytes @ 0x23
  1361  000083                     	ds	2
  1362  000085                     sync_window@res:
  1363                           	opt stack 0
  1364  000085                     disk_read@sector:
  1365                           	opt stack 0
  1366                           
  1367                           ; 4 bytes @ 0x25
  1368  000085                     	ds	1
  1369  000086                     sync_fs@fs:
  1370                           	opt stack 0
  1371  000086                     dir_clear@fs:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x26
  1375  000086                     	ds	2
  1376  000088                     ??_sync_fs:
  1377  000088                     dir_clear@clst:
  1378                           	opt stack 0
  1379                           
  1380                           ; 4 bytes @ 0x28
  1381  000088                     	ds	1
  1382  000089                     disk_read@count:
  1383                           	opt stack 0
  1384                           
  1385                           ; 1 bytes @ 0x29
  1386  000089                     	ds	1
  1387  00008A                     ??_disk_read:
  1388                           
  1389                           ; 1 bytes @ 0x2A
  1390  00008A                     	ds	2
  1391  00008C                     disk_read@pdrv:
  1392                           	opt stack 0
  1393                           
  1394                           ; 1 bytes @ 0x2C
  1395  00008C                     	ds	1
  1396  00008D                     disk_read@result:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x2D
  1400  00008D                     	ds	1
  1401  00008E                     dir_clear@ibuf:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x2E
  1405  00008E                     	ds	1
  1406  00008F                     disk_read@res:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x2F
  1410  00008F                     	ds	1
  1411  000090                     sync_fs@res:
  1412                           	opt stack 0
  1413  000090                     move_window@fs:
  1414                           	opt stack 0
  1415  000090                     dir_clear@sect:
  1416                           	opt stack 0
  1417                           
  1418                           ; 4 bytes @ 0x30
  1419  000090                     	ds	2
  1420  000092                     move_window@sect:
  1421                           	opt stack 0
  1422                           
  1423                           ; 4 bytes @ 0x32
  1424  000092                     	ds	2
  1425  000094                     dir_clear@szb:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x34
  1429  000094                     	ds	2
  1430  000096                     dir_clear@n:
  1431                           	opt stack 0
  1432                           
  1433                           ; 2 bytes @ 0x36
  1434  000096                     	ds	4
  1435  00009A                     move_window@res:
  1436                           	opt stack 0
  1437                           
  1438                           ; 1 bytes @ 0x3A
  1439  00009A                     	ds	1
  1440  00009B                     ?_check_fs:
  1441                           	opt stack 0
  1442  00009B                     ?_get_fat:
  1443                           	opt stack 0
  1444  00009B                     get_fat@obj:
  1445                           	opt stack 0
  1446  00009B                     put_fat@fs:
  1447                           	opt stack 0
  1448  00009B                     check_fs@fs:
  1449                           	opt stack 0
  1450  00009B                     f_sync@fp:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x3B
  1454  00009B                     	ds	2
  1455  00009D                     get_fat@clst:
  1456                           	opt stack 0
  1457  00009D                     put_fat@clst:
  1458                           	opt stack 0
  1459  00009D                     check_fs@sect:
  1460                           	opt stack 0
  1461  00009D                     f_sync@tm:
  1462                           	opt stack 0
  1463                           
  1464                           ; 4 bytes @ 0x3D
  1465  00009D                     	ds	4
  1466  0000A1                     ??_get_fat:
  1467  0000A1                     ??_check_fs:
  1468  0000A1                     f_sync@res:
  1469                           	opt stack 0
  1470  0000A1                     put_fat@val:
  1471                           	opt stack 0
  1472                           
  1473                           ; 4 bytes @ 0x41
  1474  0000A1                     	ds	1
  1475  0000A2                     f_sync@fs:
  1476                           	opt stack 0
  1477                           
  1478                           ; 2 bytes @ 0x42
  1479  0000A2                     	ds	2
  1480  0000A4                     f_sync@dir:
  1481                           	opt stack 0
  1482                           
  1483                           ; 2 bytes @ 0x44
  1484  0000A4                     	ds	1
  1485  0000A5                     ??_put_fat:
  1486  0000A5                     check_fs@sign:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x45
  1490  0000A5                     	ds	1
  1491  0000A6                     f_close@fp:
  1492                           	opt stack 0
  1493                           
  1494                           ; 2 bytes @ 0x46
  1495  0000A6                     	ds	1
  1496  0000A7                     check_fs@w:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x47
  1500  0000A7                     	ds	1
  1501  0000A8                     f_close@fs:
  1502                           	opt stack 0
  1503                           
  1504                           ; 2 bytes @ 0x48
  1505  0000A8                     	ds	1
  1506  0000A9                     check_fs@b:
  1507                           	opt stack 0
  1508  0000A9                     _get_fat$2434:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x49
  1512  0000A9                     	ds	1
  1513  0000AA                     ?_find_volume:
  1514                           	opt stack 0
  1515  0000AA                     f_close@res:
  1516                           	opt stack 0
  1517  0000AA                     find_volume@fs:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x4A
  1521  0000AA                     	ds	1
  1522  0000AB                     get_fat@wc:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x4B
  1526  0000AB                     	ds	1
  1527  0000AC                     find_volume@part:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x4C
  1531  0000AC                     	ds	1
  1532  0000AD                     get_fat@val:
  1533                           	opt stack 0
  1534                           
  1535                           ; 4 bytes @ 0x4D
  1536  0000AD                     	ds	1
  1537  0000AE                     ??_find_volume:
  1538                           
  1539                           ; 1 bytes @ 0x4E
  1540  0000AE                     	ds	3
  1541  0000B1                     get_fat@bc:
  1542                           	opt stack 0
  1543  0000B1                     _put_fat$2462:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x51
  1547  0000B1                     	ds	2
  1548  0000B3                     get_fat@fs:
  1549                           	opt stack 0
  1550  0000B3                     _put_fat$2463:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x53
  1554  0000B3                     	ds	1
  1555  0000B4                     find_volume@mbr_pt:
  1556                           	opt stack 0
  1557                           
  1558                           ; 16 bytes @ 0x54
  1559  0000B4                     	ds	1
  1560  0000B5                     put_fat@p:
  1561                           	opt stack 0
  1562  0000B5                     dir_sdi@dp:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x55
  1566  0000B5                     	ds	2
  1567  0000B7                     put_fat@bc:
  1568                           	opt stack 0
  1569  0000B7                     dir_sdi@ofs:
  1570                           	opt stack 0
  1571                           
  1572                           ; 4 bytes @ 0x57
  1573  0000B7                     	ds	2
  1574  0000B9                     put_fat@res:
  1575                           	opt stack 0
  1576                           
  1577                           ; 1 bytes @ 0x59
  1578  0000B9                     	ds	1
  1579  0000BA                     ?_create_chain:
  1580                           	opt stack 0
  1581  0000BA                     remove_chain@obj:
  1582                           	opt stack 0
  1583  0000BA                     create_chain@obj:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x5A
  1587  0000BA                     	ds	1
  1588  0000BB                     ??_dir_sdi:
  1589                           
  1590                           ; 1 bytes @ 0x5B
  1591  0000BB                     	ds	1
  1592  0000BC                     remove_chain@clst:
  1593                           	opt stack 0
  1594  0000BC                     create_chain@clst:
  1595                           	opt stack 0
  1596                           
  1597                           ; 4 bytes @ 0x5C
  1598  0000BC                     	ds	4
  1599  0000C0                     ??_create_chain:
  1600  0000C0                     remove_chain@pclst:
  1601                           	opt stack 0
  1602                           
  1603                           ; 4 bytes @ 0x60
  1604  0000C0                     	ds	4
  1605  0000C4                     ??_remove_chain:
  1606  0000C4                     find_volume@fmt:
  1607                           	opt stack 0
  1608                           
  1609                           ; 2 bytes @ 0x64
  1610  0000C4                     	ds	1
  1611  0000C5                     _dir_sdi$2591:
  1612                           	opt stack 0
  1613                           
  1614                           ; 4 bytes @ 0x65
  1615  0000C5                     	ds	1
  1616  0000C6                     find_volume@i:
  1617                           	opt stack 0
  1618                           
  1619                           ; 2 bytes @ 0x66
  1620  0000C6                     	ds	2
  1621  0000C8                     create_chain@res:
  1622                           	opt stack 0
  1623  0000C8                     mount_volume@path:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x68
  1627  0000C8                     	ds	1
  1628  0000C9                     create_chain@scl:
  1629                           	opt stack 0
  1630  0000C9                     dir_sdi@csz:
  1631                           	opt stack 0
  1632                           
  1633                           ; 4 bytes @ 0x69
  1634  0000C9                     	ds	1
  1635  0000CA                     mount_volume@rfs:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x6A
  1639  0000CA                     	ds	2
  1640  0000CC                     mount_volume@mode:
  1641                           	opt stack 0
  1642  0000CC                     remove_chain@nxt:
  1643                           	opt stack 0
  1644                           
  1645                           ; 4 bytes @ 0x6C
  1646  0000CC                     	ds	1
  1647  0000CD                     ??_mount_volume:
  1648  0000CD                     create_chain@ncl:
  1649                           	opt stack 0
  1650  0000CD                     dir_sdi@clst:
  1651                           	opt stack 0
  1652                           
  1653                           ; 4 bytes @ 0x6D
  1654  0000CD                     	ds	3
  1655  0000D0                     remove_chain@res:
  1656                           	opt stack 0
  1657                           
  1658                           ; 1 bytes @ 0x70
  1659  0000D0                     	ds	1
  1660  0000D1                     remove_chain@fs:
  1661                           	opt stack 0
  1662  0000D1                     create_chain@fs:
  1663                           	opt stack 0
  1664  0000D1                     dir_sdi@fs:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x71
  1668  0000D1                     	ds	2
  1669  0000D3                     create_chain@cs:
  1670                           	opt stack 0
  1671                           
  1672                           ; 4 bytes @ 0x73
  1673  0000D3                     	ds	2
  1674  0000D5                     mount_volume@szbfat:
  1675                           	opt stack 0
  1676                           
  1677                           ; 4 bytes @ 0x75
  1678  0000D5                     	ds	2
  1679  0000D7                     dir_next@dp:
  1680                           	opt stack 0
  1681  0000D7                     f_write@fp:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x77
  1685  0000D7                     	ds	2
  1686  0000D9                     dir_next@stretch:
  1687                           	opt stack 0
  1688  0000D9                     f_write@buff:
  1689                           	opt stack 0
  1690  0000D9                     mount_volume@sysect:
  1691                           	opt stack 0
  1692                           
  1693                           ; 4 bytes @ 0x79
  1694  0000D9                     	ds	2
  1695  0000DB                     ??_dir_next:
  1696  0000DB                     f_write@btw:
  1697                           	opt stack 0
  1698                           
  1699                           ; 2 bytes @ 0x7B
  1700  0000DB                     	ds	2
  1701  0000DD                     mount_volume@vol:
  1702                           	opt stack 0
  1703  0000DD                     f_write@bw:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0x7D
  1707  0000DD                     	ds	2
  1708  0000DF                     ??_f_write:
  1709  0000DF                     mount_volume@nrsv:
  1710                           	opt stack 0
  1711                           
  1712                           ; 2 bytes @ 0x7F
  1713  0000DF                     	ds	2
  1714  0000E1                     mount_volume@tsect:
  1715                           	opt stack 0
  1716                           
  1717                           ; 4 bytes @ 0x81
  1718  0000E1                     	ds	4
  1719  0000E5                     mount_volume@bsect:
  1720                           	opt stack 0
  1721                           
  1722                           ; 4 bytes @ 0x85
  1723  0000E5                     	ds	2
  1724  0000E7                     _dir_next$2628:
  1725                           	opt stack 0
  1726                           
  1727                           ; 4 bytes @ 0x87
  1728  0000E7                     	ds	2
  1729  0000E9                     mount_volume@stat:
  1730                           	opt stack 0
  1731                           
  1732                           ; 1 bytes @ 0x89
  1733  0000E9                     	ds	1
  1734  0000EA                     mount_volume@nclst:
  1735                           	opt stack 0
  1736                           
  1737                           ; 4 bytes @ 0x8A
  1738  0000EA                     	ds	1
  1739  0000EB                     dir_next@ofs:
  1740                           	opt stack 0
  1741                           
  1742                           ; 4 bytes @ 0x8B
  1743  0000EB                     	ds	3
  1744  0000EE                     mount_volume@fasize:
  1745                           	opt stack 0
  1746                           
  1747                           ; 4 bytes @ 0x8E
  1748  0000EE                     	ds	1
  1749  0000EF                     dir_next@fs:
  1750                           	opt stack 0
  1751                           
  1752                           ; 2 bytes @ 0x8F
  1753  0000EF                     	ds	2
  1754  0000F1                     dir_next@clst:
  1755                           	opt stack 0
  1756                           
  1757                           ; 4 bytes @ 0x91
  1758  0000F1                     	ds	1
  1759  0000F2                     mount_volume@fmt:
  1760                           	opt stack 0
  1761                           
  1762                           ; 2 bytes @ 0x92
  1763  0000F2                     	ds	2
  1764  0000F4                     mount_volume@fs:
  1765                           	opt stack 0
  1766                           
  1767                           ; 2 bytes @ 0x94
  1768  0000F4                     	ds	1
  1769  0000F5                     dir_alloc@dp:
  1770                           	opt stack 0
  1771  0000F5                     dir_find@dp:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x95
  1775  0000F5                     	ds	1
  1776  0000F6                     f_mount@fs:
  1777                           	opt stack 0
  1778                           
  1779                           ; 2 bytes @ 0x96
  1780  0000F6                     	ds	1
  1781  0000F7                     ??_dir_find:
  1782  0000F7                     dir_alloc@n_ent:
  1783                           	opt stack 0
  1784                           
  1785                           ; 2 bytes @ 0x97
  1786  0000F7                     	ds	1
  1787  0000F8                     f_mount@path:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0x98
  1791  0000F8                     	ds	1
  1792  0000F9                     ??_dir_alloc:
  1793  0000F9                     dir_find@fs:
  1794                           	opt stack 0
  1795                           
  1796                           ; 2 bytes @ 0x99
  1797  0000F9                     	ds	1
  1798  0000FA                     f_mount@opt:
  1799                           	opt stack 0
  1800                           
  1801                           ; 1 bytes @ 0x9A
  1802  0000FA                     	ds	1
  1803  0000FB                     dir_find@c:
  1804                           	opt stack 0
  1805                           
  1806                           ; 1 bytes @ 0x9B
  1807  0000FB                     	ds	1
  1808  0000FC                     dir_find@res:
  1809                           	opt stack 0
  1810  0000FC                     dir_register@dp:
  1811                           	opt stack 0
  1812                           
  1813                           ; 2 bytes @ 0x9C
  1814  0000FC                     	ds	2
  1815  0000FE                     ??_SDCard:
  1816                           
  1817                           ; 1 bytes @ 0x9E
  1818  0000FE                     	ds	2
  1819                           tblptru	equ	0xFF8
  1820                           tblptrh	equ	0xFF7
  1821                           tblptrl	equ	0xFF6
  1822                           tablat	equ	0xFF5
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           postdec1	equ	0xFE5
  1826                           fsr1h	equ	0xFE2
  1827                           fsr1l	equ	0xFE1
  1828                           
  1829                           	psect	cstackCOMRAM
  1830  000001                     __pcstackCOMRAM:
  1831                           	opt stack 0
  1832  000001                     i2write_timer_zero@timer0:
  1833                           	opt stack 0
  1834                           
  1835                           ; 2 bytes @ 0x0
  1836  000001                     	ds	2
  1837  000003                     i2write_timer_zero@timer:
  1838                           	opt stack 0
  1839                           
  1840                           ; 2 bytes @ 0x2
  1841  000003                     	ds	2
  1842  000005                     ??_isr:
  1843                           
  1844                           ; 1 bytes @ 0x4
  1845  000005                     	ds	20
  1846  000019                     isr@cont:
  1847                           	opt stack 0
  1848                           
  1849                           ; 1 bytes @ 0x18
  1850  000019                     	ds	1
  1851  00001A                     ??_recebe_dado_SPI:
  1852  00001A                     ?_memcmp:
  1853                           	opt stack 0
  1854  00001A                     ?_strchr:
  1855                           	opt stack 0
  1856  00001A                     ?_ld_word:
  1857                           	opt stack 0
  1858  00001A                     ?_dbc_1st:
  1859                           	opt stack 0
  1860  00001A                     ?_dbc_2nd:
  1861                           	opt stack 0
  1862  00001A                     ?_get_ldnumber:
  1863                           	opt stack 0
  1864  00001A                     ?___lwdiv:
  1865                           	opt stack 0
  1866  00001A                     ?___lwmod:
  1867                           	opt stack 0
  1868  00001A                     ?_ld_dword:
  1869                           	opt stack 0
  1870  00001A                     ?_get_fattime:
  1871                           	opt stack 0
  1872  00001A                     ?___lmul:
  1873                           	opt stack 0
  1874  00001A                     ?___lldiv:
  1875                           	opt stack 0
  1876  00001A                     escreve_dado_SPI@contador:
  1877                           	opt stack 0
  1878  00001A                     delay@contador_ext:
  1879                           	opt stack 0
  1880  00001A                     disk_ioctl@cmd:
  1881                           	opt stack 0
  1882  00001A                     sdc_disk_status@stat:
  1883                           	opt stack 0
  1884  00001A                     write_timer_zero@timer0:
  1885                           	opt stack 0
  1886  00001A                     ld_word@ptr:
  1887                           	opt stack 0
  1888  00001A                     ld_dword@ptr:
  1889                           	opt stack 0
  1890  00001A                     st_word@ptr:
  1891                           	opt stack 0
  1892  00001A                     st_dword@ptr:
  1893                           	opt stack 0
  1894  00001A                     get_ldnumber@path:
  1895                           	opt stack 0
  1896  00001A                     ___lwdiv@dividend:
  1897                           	opt stack 0
  1898  00001A                     ___lwmod@dividend:
  1899                           	opt stack 0
  1900  00001A                     memcmp@s1:
  1901                           	opt stack 0
  1902  00001A                     memcpy@d1:
  1903                           	opt stack 0
  1904  00001A                     memset@p1:
  1905                           	opt stack 0
  1906  00001A                     strchr@ptr:
  1907                           	opt stack 0
  1908  00001A                     ___lmul@multiplier:
  1909                           	opt stack 0
  1910  00001A                     ___lldiv@dividend:
  1911                           	opt stack 0
  1912                           
  1913                           ; 4 bytes @ 0x19
  1914  00001A                     	ds	1
  1915  00001B                     escreve_dado_SPI@data_to_shrc:
  1916                           	opt stack 0
  1917  00001B                     delay@contador_int:
  1918                           	opt stack 0
  1919  00001B                     sdc_disk_status@pdrv:
  1920                           	opt stack 0
  1921  00001B                     disk_ioctl@buff:
  1922                           	opt stack 0
  1923                           
  1924                           ; 2 bytes @ 0x1A
  1925  00001B                     	ds	1
  1926  00001C                     ??_dummy_clocks:
  1927  00001C                     ??_disk_status:
  1928  00001C                     ??_ld_word:
  1929  00001C                     ??_get_ldnumber:
  1930  00001C                     recebe_dado_SPI@contador:
  1931                           	opt stack 0
  1932  00001C                     escreve_cmd_lcd@comando:
  1933                           	opt stack 0
  1934  00001C                     endereco_cursor_lcd@endereco:
  1935                           	opt stack 0
  1936  00001C                     escreve_caractere_lcd@data:
  1937                           	opt stack 0
  1938  00001C                     dbc_1st@c:
  1939                           	opt stack 0
  1940  00001C                     dbc_2nd@c:
  1941                           	opt stack 0
  1942  00001C                     write_timer_zero@timer:
  1943                           	opt stack 0
  1944  00001C                     st_word@val:
  1945                           	opt stack 0
  1946  00001C                     ___lwdiv@divisor:
  1947                           	opt stack 0
  1948  00001C                     ___lwmod@divisor:
  1949                           	opt stack 0
  1950  00001C                     memcmp@s2:
  1951                           	opt stack 0
  1952  00001C                     memcpy@s1:
  1953                           	opt stack 0
  1954  00001C                     memset@c:
  1955                           	opt stack 0
  1956  00001C                     strchr@chr:
  1957                           	opt stack 0
  1958  00001C                     command@arg:
  1959                           	opt stack 0
  1960  00001C                     st_dword@val:
  1961                           	opt stack 0
  1962                           
  1963                           ; 4 bytes @ 0x1B
  1964  00001C                     	ds	1
  1965  00001D                     ??_init_lcd:
  1966  00001D                     response@buff:
  1967                           	opt stack 0
  1968  00001D                     posicao_cursor_lcd@coluna:
  1969                           	opt stack 0
  1970  00001D                     disk_ioctl@pdrv:
  1971                           	opt stack 0
  1972  00001D                     escreve_frase_ram_lcd@buffer:
  1973                           	opt stack 0
  1974  00001D                     disk_status@result:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x1C
  1978  00001D                     	ds	1
  1979  00001E                     ??_ld_dword:
  1980  00001E                     dummy_clocks@n:
  1981                           	opt stack 0
  1982  00001E                     posicao_cursor_lcd@linha:
  1983                           	opt stack 0
  1984  00001E                     disk_ioctl@res:
  1985                           	opt stack 0
  1986  00001E                     ___lwdiv@counter:
  1987                           	opt stack 0
  1988  00001E                     ___lwmod@counter:
  1989                           	opt stack 0
  1990  00001E                     st_clust@fs:
  1991                           	opt stack 0
  1992  00001E                     _get_ldnumber$2949:
  1993                           	opt stack 0
  1994  00001E                     memcmp@n:
  1995                           	opt stack 0
  1996  00001E                     memcpy@n:
  1997                           	opt stack 0
  1998  00001E                     memset@n:
  1999                           	opt stack 0
  2000  00001E                     ___lmul@multiplicand:
  2001                           	opt stack 0
  2002  00001E                     ___lldiv@divisor:
  2003                           	opt stack 0
  2004  00001E                     get_fattime@f_time:
  2005                           	opt stack 0
  2006                           
  2007                           ; 9 bytes @ 0x1D
  2008  00001E                     	ds	1
  2009  00001F                     posicao_cursor_lcd@endereco:
  2010                           	opt stack 0
  2011  00001F                     disk_status@pdrv:
  2012                           	opt stack 0
  2013  00001F                     dummy_clocks@i:
  2014                           	opt stack 0
  2015  00001F                     ld_word@rv:
  2016                           	opt stack 0
  2017  00001F                     ___lwdiv@quotient:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x1E
  2021  00001F                     	ds	1
  2022  000020                     ??_mensagem_inicial:
  2023  000020                     ??_memcmp:
  2024  000020                     command@CRC:
  2025                           	opt stack 0
  2026  000020                     disk_status@stat:
  2027                           	opt stack 0
  2028  000020                     memcpy@tmp:
  2029                           	opt stack 0
  2030  000020                     st_clust@dir:
  2031                           	opt stack 0
  2032  000020                     get_ldnumber@i:
  2033                           	opt stack 0
  2034  000020                     memset@p:
  2035                           	opt stack 0
  2036                           
  2037                           ; 2 bytes @ 0x1F
  2038  000020                     	ds	1
  2039  000021                     ?_ld_clust:
  2040                           	opt stack 0
  2041  000021                     command@CMD:
  2042                           	opt stack 0
  2043  000021                     ld_clust@fs:
  2044                           	opt stack 0
  2045  000021                     validate@obj:
  2046                           	opt stack 0
  2047  000021                     utoa@buf:
  2048                           	opt stack 0
  2049  000021                     memcpy@d:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x20
  2053  000021                     	ds	1
  2054  000022                     command@argument:
  2055                           	opt stack 0
  2056  000022                     get_ldnumber@tc:
  2057                           	opt stack 0
  2058  000022                     create_name@dp:
  2059                           	opt stack 0
  2060  000022                     st_clust@cl:
  2061                           	opt stack 0
  2062  000022                     ___lmul@product:
  2063                           	opt stack 0
  2064  000022                     ___lldiv@quotient:
  2065                           	opt stack 0
  2066                           
  2067                           ; 4 bytes @ 0x21
  2068  000022                     	ds	1
  2069  000023                     sdc_reset@i:
  2070                           	opt stack 0
  2071  000023                     sdc_disk_write@p_buff:
  2072                           	opt stack 0
  2073  000023                     ld_clust@dir:
  2074                           	opt stack 0
  2075  000023                     get_ldnumber@tt:
  2076                           	opt stack 0
  2077  000023                     validate@rfs:
  2078                           	opt stack 0
  2079  000023                     utoa@val:
  2080                           	opt stack 0
  2081  000023                     memcpy@s:
  2082                           	opt stack 0
  2083  000023                     ld_dword@rv:
  2084                           	opt stack 0
  2085                           
  2086                           ; 4 bytes @ 0x22
  2087  000023                     	ds	1
  2088  000024                     create_name@path:
  2089                           	opt stack 0
  2090                           
  2091                           ; 2 bytes @ 0x23
  2092  000024                     	ds	1
  2093  000025                     ??_ld_clust:
  2094  000025                     ??_validate:
  2095  000025                     sdc_reset@count_nosd:
  2096                           	opt stack 0
  2097  000025                     get_ldnumber@vol:
  2098                           	opt stack 0
  2099  000025                     utoa@base:
  2100                           	opt stack 0
  2101  000025                     sdc_disk_write@sector:
  2102                           	opt stack 0
  2103                           
  2104                           ; 4 bytes @ 0x24
  2105  000025                     	ds	1
  2106  000026                     ??_create_name:
  2107  000026                     ?_clst2sect:
  2108                           	opt stack 0
  2109  000026                     ___lldiv@counter:
  2110                           	opt stack 0
  2111  000026                     clst2sect@fs:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x25
  2115  000026                     	ds	1
  2116  000027                     sdc_reset@count:
  2117                           	opt stack 0
  2118  000027                     get_ldnumber@tp:
  2119                           	opt stack 0
  2120  000027                     utoa@v:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0x26
  2124  000027                     	ds	1
  2125  000028                     clst2sect@clst:
  2126                           	opt stack 0
  2127                           
  2128                           ; 4 bytes @ 0x27
  2129  000028                     	ds	1
  2130  000029                     sdc_reset@buff:
  2131                           	opt stack 0
  2132  000029                     sdc_disk_write@count:
  2133                           	opt stack 0
  2134  000029                     utoa@c:
  2135                           	opt stack 0
  2136  000029                     _validate$3084:
  2137                           	opt stack 0
  2138  000029                     ld_clust@cl:
  2139                           	opt stack 0
  2140                           
  2141                           ; 4 bytes @ 0x28
  2142  000029                     	ds	1
  2143  00002A                     ??_sdc_disk_initialize:
  2144  00002A                     ??_sdc_disk_write:
  2145  00002A                     itoa@cp:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x29
  2149  00002A                     	ds	1
  2150  00002B                     disk_initialize@pdrv:
  2151                           	opt stack 0
  2152  00002B                     validate@res:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x2A
  2156  00002B                     	ds	1
  2157  00002C                     ??_disk_write:
  2158  00002C                     disk_initialize@stat:
  2159                           	opt stack 0
  2160                           
  2161                           ; 1 bytes @ 0x2B
  2162  00002C                     	ds	1
  2163  00002D                     tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           postinc0	equ	0xFEE
  2168                           wreg	equ	0xFE8
  2169                           postdec1	equ	0xFE5
  2170                           fsr1h	equ	0xFE2
  2171                           fsr1l	equ	0xFE1
  2172                           
  2173                           ; 1 bytes @ 0x2C
  2174 ;;
  2175 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2176 ;;
  2177 ;; *************** function _main *****************
  2178 ;; Defined at:
  2179 ;;		line 207 in file "main.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;		None
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  1    wreg      void 
  2186 ;; Registers used:
  2187 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2193 ;;      Params:         0       0       0       0       0       0       0       0       0
  2194 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2196 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2197 ;;Total ram usage:        0 bytes
  2198 ;; Hardware stack levels required when called:   17
  2199 ;; This function calls:
  2200 ;;		_escalonador
  2201 ;;		_inicializa_shrc
  2202 ;;		_inicializa_tarefas
  2203 ;;		_init_hardware
  2204 ;;		_init_lcd
  2205 ;;		_mensagem_inicial
  2206 ;; This function is called by:
  2207 ;;		Startup code after reset
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text0
  2212  0059D6                     __ptext0:
  2213                           	opt stack 0
  2214  0059D6                     _main:
  2215                           	opt stack 14
  2216                           
  2217                           ;main.c: 209: init_hardware();
  2218                           
  2219                           ;incstack = 0
  2220  0059D6  EC61  F02D         	call	_init_hardware	;wreg free
  2221                           
  2222                           ;main.c: 211: init_lcd();
  2223  0059DA  EC02  F027         	call	_init_lcd	;wreg free
  2224                           
  2225                           ;main.c: 212: inicializa_shrc();
  2226  0059DE  ECA0  F02D         	call	_inicializa_shrc	;wreg free
  2227                           
  2228                           ;main.c: 214: mensagem_inicial();
  2229  0059E2  ECB3  F028         	call	_mensagem_inicial	;wreg free
  2230                           
  2231                           ;main.c: 215: inicializa_tarefas();;
  2232  0059E6  ECBD  F02C         	call	_inicializa_tarefas	;wreg free
  2233                           
  2234                           ;main.c: 217: ADCON1 = 0X0F;
  2235  0059EA  0E0F               	movlw	15
  2236  0059EC  6EC1               	movwf	4033,c	;volatile
  2237  0059EE                     
  2238                           ;main.c: 219: {
  2239                           ;main.c: 221: if ((sinaliza_int_timer == 1) && (2))
  2240  0059EE  0444               	decf	_sinaliza_int_timer,w,c
  2241  0059F0  A4D8               	btfss	status,2,c
  2242  0059F2  D7FD               	goto	l83
  2243                           
  2244                           ;main.c: 222: {
  2245                           ;main.c: 223: sinaliza_int_timer = 0;
  2246  0059F4  0E00               	movlw	0
  2247  0059F6  6E44               	movwf	_sinaliza_int_timer,c
  2248                           
  2249                           ;main.c: 224: escalonador();
  2250  0059F8  EC5E  F026         	call	_escalonador	;wreg free
  2251  0059FC  D7F8               	goto	l83
  2252  0059FE                     __end_of_main:
  2253                           	opt stack 0
  2254                           tblptru	equ	0xFF8
  2255                           tblptrh	equ	0xFF7
  2256                           tblptrl	equ	0xFF6
  2257                           tablat	equ	0xFF5
  2258                           postinc0	equ	0xFEE
  2259                           wreg	equ	0xFE8
  2260                           postdec1	equ	0xFE5
  2261                           fsr1h	equ	0xFE2
  2262                           fsr1l	equ	0xFE1
  2263                           status	equ	0xFD8
  2264                           
  2265 ;; *************** function _mensagem_inicial *****************
  2266 ;; Defined at:
  2267 ;;		line 237 in file "main.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;		None
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  2272 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      void 
  2275 ;; Registers used:
  2276 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2282 ;;      Params:         0       0       0       0       0       0       0       0       0
  2283 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2284 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2285 ;;      Totals:         2      34       0       0       0       0       0       0       0
  2286 ;;Total ram usage:       36 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    5
  2289 ;; This function calls:
  2290 ;;		_escreve_cmd_lcd
  2291 ;;		_escreve_frase_ram_lcd
  2292 ;;		_posicao_cursor_lcd
  2293 ;; This function is called by:
  2294 ;;		_main
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           	psect	text1
  2299  005166                     __ptext1:
  2300                           	opt stack 0
  2301  005166                     _mensagem_inicial:
  2302                           	opt stack 25
  2303                           
  2304                           ;main.c: 239: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  2305                           
  2306                           ;incstack = 0
  2307  005166  0E95               	movlw	low mensagem_inicial@F4177
  2308  005168  6EF6               	movwf	tblptrl,c
  2309  00516A                     	if	1	;There is more than 1 active tblptr byte
  2310  00516A  0E61               	movlw	high mensagem_inicial@F4177
  2311  00516C  6EF7               	movwf	tblptrh,c
  2312  00516E                     	endif
  2313  00516E                     	if	0	;There are less than 3 active tblptr bytes
  2314  00516E                     	endif
  2315  00516E  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  2316  005172  0E10               	movlw	16
  2317  005174                     u20490:
  2318  005174  0009               	tblrd		*+
  2319  005176  CFF5 FFDE          	movff	tablat,postinc2
  2320  00517A  06E8               	decf	wreg,f,c
  2321  00517C  E2FB               	bc	u20490
  2322                           
  2323                           ;main.c: 240: const unsigned char msg_dois[17] = " 18/01/2022   ";
  2324  00517E  0E84               	movlw	low mensagem_inicial@F4179
  2325  005180  6EF6               	movwf	tblptrl,c
  2326  005182                     	if	1	;There is more than 1 active tblptr byte
  2327  005182  0E61               	movlw	high mensagem_inicial@F4179
  2328  005184  6EF7               	movwf	tblptrh,c
  2329  005186                     	endif
  2330  005186                     	if	0	;There are less than 3 active tblptr bytes
  2331  005186                     	endif
  2332  005186  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  2333  00518A  0E10               	movlw	16
  2334  00518C                     u20500:
  2335  00518C  0009               	tblrd		*+
  2336  00518E  CFF5 FFDE          	movff	tablat,postinc2
  2337  005192  06E8               	decf	wreg,f,c
  2338  005194  E2FB               	bc	u20500
  2339                           
  2340                           ;main.c: 242: posicao_cursor_lcd(1,0);
  2341  005196  0E00               	movlw	0
  2342  005198  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  2343  00519A  0E01               	movlw	1
  2344  00519C  EC64  F029         	call	_posicao_cursor_lcd
  2345                           
  2346                           ;main.c: 243: escreve_frase_ram_lcd(msg_linha_um);
  2347  0051A0  0E60               	movlw	low mensagem_inicial@msg_linha_um
  2348  0051A2  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  2349  0051A4  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2350  0051A6  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2351  0051A8  EC1D  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  2352                           
  2353                           ;main.c: 245: posicao_cursor_lcd(2,0);
  2354  0051AC  0E00               	movlw	0
  2355  0051AE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  2356  0051B0  0E02               	movlw	2
  2357  0051B2  EC64  F029         	call	_posicao_cursor_lcd
  2358                           
  2359                           ;main.c: 246: escreve_frase_ram_lcd(msg_dois);
  2360  0051B6  0E71               	movlw	low mensagem_inicial@msg_dois
  2361  0051B8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  2362  0051BA  0E00               	movlw	high mensagem_inicial@msg_dois
  2363  0051BC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2364  0051BE  EC1D  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  2365                           
  2366                           ;main.c: 247: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2367  0051C2  0E3D               	movlw	61
  2368  0051C4  6E21               	movwf	(??_mensagem_inicial+1)& (0+255),c
  2369  0051C6  0EE1               	movlw	225
  2370  0051C8  6E20               	movwf	??_mensagem_inicial& (0+255),c
  2371  0051CA  0E40               	movlw	64
  2372  0051CC                     u23387:
  2373  0051CC  2EE8               	decfsz	wreg,f,c
  2374  0051CE  D7FE               	bra	u23387
  2375  0051D0  2E20               	decfsz	??_mensagem_inicial& (0+255),f,c
  2376  0051D2  D7FC               	bra	u23387
  2377  0051D4  2E21               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  2378  0051D6  D7FA               	bra	u23387
  2379                           
  2380                           ;main.c: 248: escreve_cmd_lcd(0b00000001);
  2381  0051D8  0E01               	movlw	1
  2382  0051DA  ECEA  F027         	call	_escreve_cmd_lcd
  2383  0051DE  0012               	return		;funcret
  2384  0051E0                     __end_of_mensagem_inicial:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           postinc0	equ	0xFEE
  2391                           wreg	equ	0xFE8
  2392                           postdec1	equ	0xFE5
  2393                           fsr1h	equ	0xFE2
  2394                           fsr1l	equ	0xFE1
  2395                           postinc2	equ	0xFDE
  2396                           status	equ	0xFD8
  2397                           
  2398 ;; *************** function _init_lcd *****************
  2399 ;; Defined at:
  2400 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;		None
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;		None
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      void 
  2407 ;; Registers used:
  2408 ;;		wreg, status,2, status,0, cstack
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2414 ;;      Params:         0       0       0       0       0       0       0       0       0
  2415 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2416 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2417 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2418 ;;Total ram usage:        1 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; Hardware stack levels required when called:    4
  2421 ;; This function calls:
  2422 ;;		_delay
  2423 ;;		_escreve_cmd_lcd
  2424 ;; This function is called by:
  2425 ;;		_main
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text2
  2430  004E04                     __ptext2:
  2431                           	opt stack 0
  2432  004E04                     _init_lcd:
  2433                           	opt stack 26
  2434                           
  2435                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2436                           
  2437                           ;incstack = 0
  2438  004E04  9495               	bcf	3989,2,c	;volatile
  2439                           
  2440                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2441  004E06  9295               	bcf	3989,1,c	;volatile
  2442                           
  2443                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2444  004E08  9095               	bcf	3989,0,c	;volatile
  2445                           
  2446                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2447  004E0A  9895               	bcf	3989,4,c	;volatile
  2448                           
  2449                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2450  004E0C  9A95               	bcf	3989,5,c	;volatile
  2451                           
  2452                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2453  004E0E  9C95               	bcf	3989,6,c	;volatile
  2454                           
  2455                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2456  004E10  9E95               	bcf	3989,7,c	;volatile
  2457                           
  2458                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2459  004E12  9483               	bcf	3971,2,c	;volatile
  2460                           
  2461                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2462  004E14  9283               	bcf	3971,1,c	;volatile
  2463                           
  2464                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2465  004E16  9083               	bcf	3971,0,c	;volatile
  2466                           
  2467                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2468  004E18  9E83               	bcf	3971,7,c	;volatile
  2469                           
  2470                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2471  004E1A  9C83               	bcf	3971,6,c	;volatile
  2472                           
  2473                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2474  004E1C  8A83               	bsf	3971,5,c	;volatile
  2475                           
  2476                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2477  004E1E  8883               	bsf	3971,4,c	;volatile
  2478                           
  2479                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2480  004E20  0EEA               	movlw	234
  2481  004E22  6E1D               	movwf	??_init_lcd& (0+255),c
  2482  004E24  0EC3               	movlw	195
  2483  004E26                     u23397:
  2484  004E26  2EE8               	decfsz	wreg,f,c
  2485  004E28  D7FE               	bra	u23397
  2486  004E2A  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2487  004E2C  D7FC               	bra	u23397
  2488  004E2E  F000               	nop	
  2489                           
  2490                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2491  004E30  8083               	bsf	3971,0,c	;volatile
  2492                           
  2493                           ;display_lcd.c: 108: delay();
  2494  004E32  EC27  F02D         	call	_delay	;wreg free
  2495                           
  2496                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2497  004E36  9083               	bcf	3971,0,c	;volatile
  2498                           
  2499                           ;display_lcd.c: 110: delay();
  2500  004E38  EC27  F02D         	call	_delay	;wreg free
  2501                           
  2502                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2503  004E3C  0E4E               	movlw	78
  2504  004E3E  6E1D               	movwf	??_init_lcd& (0+255),c
  2505  004E40  0EEB               	movlw	235
  2506  004E42                     u23407:
  2507  004E42  2EE8               	decfsz	wreg,f,c
  2508  004E44  D7FE               	bra	u23407
  2509  004E46  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2510  004E48  D7FC               	bra	u23407
  2511  004E4A  F000               	nop	
  2512                           
  2513                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2514  004E4C  8083               	bsf	3971,0,c	;volatile
  2515                           
  2516                           ;display_lcd.c: 119: delay();
  2517  004E4E  EC27  F02D         	call	_delay	;wreg free
  2518                           
  2519                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2520  004E52  9083               	bcf	3971,0,c	;volatile
  2521                           
  2522                           ;display_lcd.c: 121: delay();
  2523  004E54  EC27  F02D         	call	_delay	;wreg free
  2524                           
  2525                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2526  004E58  0E4E               	movlw	78
  2527  004E5A  6E1D               	movwf	??_init_lcd& (0+255),c
  2528  004E5C  0EEB               	movlw	235
  2529  004E5E                     u23417:
  2530  004E5E  2EE8               	decfsz	wreg,f,c
  2531  004E60  D7FE               	bra	u23417
  2532  004E62  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2533  004E64  D7FC               	bra	u23417
  2534  004E66  F000               	nop	
  2535                           
  2536                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2537  004E68  8083               	bsf	3971,0,c	;volatile
  2538                           
  2539                           ;display_lcd.c: 130: delay();
  2540  004E6A  EC27  F02D         	call	_delay	;wreg free
  2541                           
  2542                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2543  004E6E  9083               	bcf	3971,0,c	;volatile
  2544                           
  2545                           ;display_lcd.c: 132: delay();
  2546  004E70  EC27  F02D         	call	_delay	;wreg free
  2547                           
  2548                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2549  004E74  9E83               	bcf	3971,7,c	;volatile
  2550                           
  2551                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2552  004E76  9C83               	bcf	3971,6,c	;volatile
  2553                           
  2554                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2555  004E78  8A83               	bsf	3971,5,c	;volatile
  2556                           
  2557                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2558  004E7A  9883               	bcf	3971,4,c	;volatile
  2559                           
  2560                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2561  004E7C  8083               	bsf	3971,0,c	;volatile
  2562                           
  2563                           ;display_lcd.c: 143: delay();
  2564  004E7E  EC27  F02D         	call	_delay	;wreg free
  2565                           
  2566                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2567  004E82  9083               	bcf	3971,0,c	;volatile
  2568                           
  2569                           ;display_lcd.c: 145: delay();
  2570  004E84  EC27  F02D         	call	_delay	;wreg free
  2571                           
  2572                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2573  004E88  0E28               	movlw	40
  2574  004E8A  ECEA  F027         	call	_escreve_cmd_lcd
  2575                           
  2576                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2577  004E8E  0E06               	movlw	6
  2578  004E90  ECEA  F027         	call	_escreve_cmd_lcd
  2579                           
  2580                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2581  004E94  0E0E               	movlw	14
  2582  004E96  ECEA  F027         	call	_escreve_cmd_lcd
  2583                           
  2584                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2585  004E9A  0E01               	movlw	1
  2586  004E9C  ECEA  F027         	call	_escreve_cmd_lcd
  2587  004EA0  0012               	return		;funcret
  2588  004EA2                     __end_of_init_lcd:
  2589                           	opt stack 0
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           postinc0	equ	0xFEE
  2595                           wreg	equ	0xFE8
  2596                           postdec1	equ	0xFE5
  2597                           fsr1h	equ	0xFE2
  2598                           fsr1l	equ	0xFE1
  2599                           postinc2	equ	0xFDE
  2600                           status	equ	0xFD8
  2601                           
  2602 ;; *************** function _escreve_cmd_lcd *****************
  2603 ;; Defined at:
  2604 ;;		line 162 in file "bibliotecas/display_lcd.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;  comando         1    wreg     unsigned char 
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;  comando         1   27[COMRAM] unsigned char 
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		wreg, status,2, status,0, cstack
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2618 ;;      Params:         0       0       0       0       0       0       0       0       0
  2619 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2620 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2621 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2622 ;;Total ram usage:        1 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    3
  2625 ;; This function calls:
  2626 ;;		_delay
  2627 ;; This function is called by:
  2628 ;;		_mensagem_inicial
  2629 ;;		_init_lcd
  2630 ;;		_gps
  2631 ;;		_inicializa_SPI
  2632 ;;		_leitura_chave
  2633 ;;		_cria_caractere_lcd
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text3
  2638  004FD4                     __ptext3:
  2639                           	opt stack 0
  2640  004FD4                     _escreve_cmd_lcd:
  2641                           	opt stack 26
  2642                           
  2643                           ;incstack = 0
  2644                           ;escreve_cmd_lcd@comando stored from wreg
  2645  004FD4  6E1C               	movwf	escreve_cmd_lcd@comando,c
  2646                           
  2647                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  2648  004FD6  9483               	bcf	3971,2,c	;volatile
  2649                           
  2650                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  2651  004FD8  9283               	bcf	3971,1,c	;volatile
  2652                           
  2653                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  2654  004FDA  9083               	bcf	3971,0,c	;volatile
  2655                           
  2656                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  2657  004FDC  A81C               	btfss	escreve_cmd_lcd@comando,4,c
  2658  004FDE  D002               	goto	l481
  2659  004FE0  8883               	bsf	3971,4,c	;volatile
  2660  004FE2  D001               	goto	l482
  2661  004FE4                     l481:
  2662                           
  2663                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  2664  004FE4  9883               	bcf	3971,4,c	;volatile
  2665  004FE6                     l482:
  2666                           
  2667                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  2668  004FE6  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
  2669  004FE8  D002               	goto	l483
  2670  004FEA  8A83               	bsf	3971,5,c	;volatile
  2671  004FEC  D001               	goto	l484
  2672  004FEE                     l483:
  2673                           
  2674                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  2675  004FEE  9A83               	bcf	3971,5,c	;volatile
  2676  004FF0                     l484:
  2677                           
  2678                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  2679  004FF0  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
  2680  004FF2  D002               	goto	l485
  2681  004FF4  8C83               	bsf	3971,6,c	;volatile
  2682  004FF6  D001               	goto	l486
  2683  004FF8                     l485:
  2684                           
  2685                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  2686  004FF8  9C83               	bcf	3971,6,c	;volatile
  2687  004FFA                     l486:
  2688                           
  2689                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  2690  004FFA  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
  2691  004FFC  D002               	goto	l487
  2692  004FFE  8E83               	bsf	3971,7,c	;volatile
  2693  005000  D001               	goto	l488
  2694  005002                     l487:
  2695                           
  2696                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  2697  005002  9E83               	bcf	3971,7,c	;volatile
  2698  005004                     l488:
  2699                           
  2700                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  2701  005004  8083               	bsf	3971,0,c	;volatile
  2702                           
  2703                           ;display_lcd.c: 181: delay();
  2704  005006  EC27  F02D         	call	_delay	;wreg free
  2705                           
  2706                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  2707  00500A  9083               	bcf	3971,0,c	;volatile
  2708                           
  2709                           ;display_lcd.c: 183: delay();
  2710  00500C  EC27  F02D         	call	_delay	;wreg free
  2711                           
  2712                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  2713  005010  A01C               	btfss	escreve_cmd_lcd@comando,0,c
  2714  005012  D002               	goto	l489
  2715  005014  8883               	bsf	3971,4,c	;volatile
  2716  005016  D001               	goto	l490
  2717  005018                     l489:
  2718                           
  2719                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  2720  005018  9883               	bcf	3971,4,c	;volatile
  2721  00501A                     l490:
  2722                           
  2723                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  2724  00501A  A21C               	btfss	escreve_cmd_lcd@comando,1,c
  2725  00501C  D002               	goto	l491
  2726  00501E  8A83               	bsf	3971,5,c	;volatile
  2727  005020  D001               	goto	l492
  2728  005022                     l491:
  2729                           
  2730                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  2731  005022  9A83               	bcf	3971,5,c	;volatile
  2732  005024                     l492:
  2733                           
  2734                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  2735  005024  A41C               	btfss	escreve_cmd_lcd@comando,2,c
  2736  005026  D002               	goto	l493
  2737  005028  8C83               	bsf	3971,6,c	;volatile
  2738  00502A  D001               	goto	l494
  2739  00502C                     l493:
  2740                           
  2741                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  2742  00502C  9C83               	bcf	3971,6,c	;volatile
  2743  00502E                     l494:
  2744                           
  2745                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  2746  00502E  A61C               	btfss	escreve_cmd_lcd@comando,3,c
  2747  005030  D002               	goto	l495
  2748  005032  8E83               	bsf	3971,7,c	;volatile
  2749  005034  D001               	goto	l496
  2750  005036                     l495:
  2751                           
  2752                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  2753  005036  9E83               	bcf	3971,7,c	;volatile
  2754  005038                     l496:
  2755                           
  2756                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  2757  005038  8083               	bsf	3971,0,c	;volatile
  2758                           
  2759                           ;display_lcd.c: 197: delay();
  2760  00503A  EC27  F02D         	call	_delay	;wreg free
  2761                           
  2762                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  2763  00503E  9083               	bcf	3971,0,c	;volatile
  2764                           
  2765                           ;display_lcd.c: 199: delay();
  2766  005040  EC27  F02D         	call	_delay	;wreg free
  2767                           
  2768                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  2769  005044  041C               	decf	escreve_cmd_lcd@comando,w,c
  2770  005046  B4D8               	btfsc	status,2,c
  2771  005048  D008               	goto	u20360
  2772  00504A  0E02               	movlw	2
  2773  00504C  181C               	xorwf	escreve_cmd_lcd@comando,w,c
  2774  00504E  B4D8               	btfsc	status,2,c
  2775  005050  D004               	goto	u20360
  2776  005052  0E03               	movlw	3
  2777  005054  181C               	xorwf	escreve_cmd_lcd@comando,w,c
  2778  005056  A4D8               	btfss	status,2,c
  2779  005058  0012               	return	
  2780  00505A                     u20360:
  2781                           
  2782                           ;display_lcd.c: 205: { delay(); }
  2783  00505A  EC27  F02D         	call	_delay	;wreg free
  2784  00505E  0012               	return	
  2785  005060                     __end_of_escreve_cmd_lcd:
  2786                           	opt stack 0
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           postinc0	equ	0xFEE
  2792                           wreg	equ	0xFE8
  2793                           postdec1	equ	0xFE5
  2794                           fsr1h	equ	0xFE2
  2795                           fsr1l	equ	0xFE1
  2796                           postinc2	equ	0xFDE
  2797                           status	equ	0xFD8
  2798                           
  2799 ;; *************** function _init_hardware *****************
  2800 ;; Defined at:
  2801 ;;		line 55 in file "bibliotecas/hardware.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;		None
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;		None
  2806 ;; Return value:  Size  Location     Type
  2807 ;;                  1    wreg      void 
  2808 ;; Registers used:
  2809 ;;		wreg, status,2, cstack
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2815 ;;      Params:         0       0       0       0       0       0       0       0       0
  2816 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2817 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2818 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2819 ;;Total ram usage:        0 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    4
  2822 ;; This function calls:
  2823 ;;		_config_timer_dois
  2824 ;;		_config_timer_zero
  2825 ;;		_init_interrupt
  2826 ;;		_init_oscilador
  2827 ;;		_init_ports
  2828 ;; This function is called by:
  2829 ;;		_main
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text4
  2834  005AC2                     __ptext4:
  2835                           	opt stack 0
  2836  005AC2                     _init_hardware:
  2837                           	opt stack 26
  2838                           
  2839                           ;hardware.c: 58: init_oscilador();
  2840                           
  2841                           ;incstack = 0
  2842  005AC2  ECB2  F02D         	call	_init_oscilador	;wreg free
  2843                           
  2844                           ;hardware.c: 61: init_ports();
  2845  005AC6  EC55  F02D         	call	_init_ports	;wreg free
  2846                           
  2847                           ;hardware.c: 64: config_timer_zero();
  2848  005ACA  EC48  F02D         	call	_config_timer_zero	;wreg free
  2849                           
  2850                           ;hardware.c: 67: config_timer_dois();
  2851  005ACE  EC9A  F02D         	call	_config_timer_dois	;wreg free
  2852                           
  2853                           ;hardware.c: 70: init_interrupt();
  2854  005AD2  EC76  F02D         	call	_init_interrupt	;wreg free
  2855  005AD6  0012               	return		;funcret
  2856  005AD8                     __end_of_init_hardware:
  2857                           	opt stack 0
  2858                           tblptru	equ	0xFF8
  2859                           tblptrh	equ	0xFF7
  2860                           tblptrl	equ	0xFF6
  2861                           tablat	equ	0xFF5
  2862                           postinc0	equ	0xFEE
  2863                           wreg	equ	0xFE8
  2864                           postdec1	equ	0xFE5
  2865                           fsr1h	equ	0xFE2
  2866                           fsr1l	equ	0xFE1
  2867                           postinc2	equ	0xFDE
  2868                           status	equ	0xFD8
  2869                           
  2870 ;; *************** function _init_ports *****************
  2871 ;; Defined at:
  2872 ;;		line 154 in file "bibliotecas/hardware.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;		None
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;		None
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      void 
  2879 ;; Registers used:
  2880 ;;		wreg, status,2
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2886 ;;      Params:         0       0       0       0       0       0       0       0       0
  2887 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2888 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2889 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2890 ;;Total ram usage:        0 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    2
  2893 ;; This function calls:
  2894 ;;		Nothing
  2895 ;; This function is called by:
  2896 ;;		_init_hardware
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text5
  2901  005AAA                     __ptext5:
  2902                           	opt stack 0
  2903  005AAA                     _init_ports:
  2904                           	opt stack 27
  2905                           
  2906                           ;hardware.c: 156: TRISB = 0b00100001;
  2907                           
  2908                           ;incstack = 0
  2909  005AAA  0E21               	movlw	33
  2910  005AAC  6E93               	movwf	3987,c	;volatile
  2911                           
  2912                           ;hardware.c: 157: LATB = 0xFF;
  2913  005AAE  688A               	setf	3978,c	;volatile
  2914                           
  2915                           ;hardware.c: 158: TRISD = 0x00;
  2916  005AB0  0E00               	movlw	0
  2917  005AB2  6E95               	movwf	3989,c	;volatile
  2918                           
  2919                           ;hardware.c: 159: TRISA = 0b00000111;
  2920  005AB4  0E07               	movlw	7
  2921  005AB6  6E92               	movwf	3986,c	;volatile
  2922                           
  2923                           ;hardware.c: 160: TRISC = 0x01111111;
  2924  005AB8  0E11               	movlw	17
  2925  005ABA  6E94               	movwf	3988,c	;volatile
  2926                           
  2927                           ;hardware.c: 161: TRISE = 0b00000011;
  2928  005ABC  0E03               	movlw	3
  2929  005ABE  6E96               	movwf	3990,c	;volatile
  2930  005AC0  0012               	return		;funcret
  2931  005AC2                     __end_of_init_ports:
  2932                           	opt stack 0
  2933                           tblptru	equ	0xFF8
  2934                           tblptrh	equ	0xFF7
  2935                           tblptrl	equ	0xFF6
  2936                           tablat	equ	0xFF5
  2937                           postinc0	equ	0xFEE
  2938                           wreg	equ	0xFE8
  2939                           postdec1	equ	0xFE5
  2940                           fsr1h	equ	0xFE2
  2941                           fsr1l	equ	0xFE1
  2942                           postinc2	equ	0xFDE
  2943                           status	equ	0xFD8
  2944                           
  2945 ;; *************** function _init_oscilador *****************
  2946 ;; Defined at:
  2947 ;;		line 171 in file "bibliotecas/hardware.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;		None
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;		None
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		None
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2961 ;;      Params:         0       0       0       0       0       0       0       0       0
  2962 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2964 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2965 ;;Total ram usage:        0 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    2
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_init_hardware
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text6
  2976  005B64                     __ptext6:
  2977                           	opt stack 0
  2978  005B64                     _init_oscilador:
  2979                           	opt stack 27
  2980                           
  2981                           ;hardware.c: 174: OSCCONbits.IRCF0 = 1;
  2982                           
  2983                           ;incstack = 0
  2984  005B64  88D3               	bsf	4051,4,c	;volatile
  2985                           
  2986                           ;hardware.c: 175: OSCCONbits.IRCF1 = 1;
  2987  005B66  8AD3               	bsf	4051,5,c	;volatile
  2988                           
  2989                           ;hardware.c: 176: OSCCONbits.IRCF2 = 1;
  2990  005B68  8CD3               	bsf	4051,6,c	;volatile
  2991  005B6A  0012               	return		;funcret
  2992  005B6C                     __end_of_init_oscilador:
  2993                           	opt stack 0
  2994                           tblptru	equ	0xFF8
  2995                           tblptrh	equ	0xFF7
  2996                           tblptrl	equ	0xFF6
  2997                           tablat	equ	0xFF5
  2998                           postinc0	equ	0xFEE
  2999                           wreg	equ	0xFE8
  3000                           postdec1	equ	0xFE5
  3001                           fsr1h	equ	0xFE2
  3002                           fsr1l	equ	0xFE1
  3003                           postinc2	equ	0xFDE
  3004                           status	equ	0xFD8
  3005                           
  3006 ;; *************** function _init_interrupt *****************
  3007 ;; Defined at:
  3008 ;;		line 98 in file "bibliotecas/hardware.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;		None
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;		None
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      void 
  3015 ;; Registers used:
  3016 ;;		wreg, status,2
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3022 ;;      Params:         0       0       0       0       0       0       0       0       0
  3023 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3024 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3025 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3026 ;;Total ram usage:        0 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; Hardware stack levels required when called:    2
  3029 ;; This function calls:
  3030 ;;		Nothing
  3031 ;; This function is called by:
  3032 ;;		_init_hardware
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text7
  3037  005AEC                     __ptext7:
  3038                           	opt stack 0
  3039  005AEC                     _init_interrupt:
  3040                           	opt stack 27
  3041                           
  3042                           ;hardware.c: 100: INTCON = 0b11110000;
  3043                           
  3044                           ;incstack = 0
  3045  005AEC  0EF0               	movlw	240
  3046  005AEE  6EF2               	movwf	intcon,c	;volatile
  3047                           
  3048                           ;hardware.c: 101: INTCON2 = 0b00000000;
  3049  005AF0  0E00               	movlw	0
  3050  005AF2  6EF1               	movwf	intcon2,c	;volatile
  3051                           
  3052                           ;hardware.c: 102: INTCON3 = 0b00000000;
  3053  005AF4  0E00               	movlw	0
  3054  005AF6  6EF0               	movwf	intcon3,c	;volatile
  3055                           
  3056                           ;hardware.c: 104: PIE1 = 0b00100000;
  3057  005AF8  0E20               	movlw	32
  3058  005AFA  6E9D               	movwf	3997,c	;volatile
  3059  005AFC  0012               	return		;funcret
  3060  005AFE                     __end_of_init_interrupt:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           intcon	equ	0xFF2
  3067                           intcon2	equ	0xFF1
  3068                           intcon3	equ	0xFF0
  3069                           postinc0	equ	0xFEE
  3070                           wreg	equ	0xFE8
  3071                           postdec1	equ	0xFE5
  3072                           fsr1h	equ	0xFE2
  3073                           fsr1l	equ	0xFE1
  3074                           postinc2	equ	0xFDE
  3075                           status	equ	0xFD8
  3076                           
  3077 ;; *************** function _config_timer_zero *****************
  3078 ;; Defined at:
  3079 ;;		line 83 in file "bibliotecas/hardware.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;		None
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;		None
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  1    wreg      void 
  3086 ;; Registers used:
  3087 ;;		wreg, status,2, cstack
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3093 ;;      Params:         0       0       0       0       0       0       0       0       0
  3094 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3095 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3096 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3097 ;;Total ram usage:        0 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; Hardware stack levels required when called:    3
  3100 ;; This function calls:
  3101 ;;		_write_timer_zero
  3102 ;; This function is called by:
  3103 ;;		_init_hardware
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text8
  3108  005A90                     __ptext8:
  3109                           	opt stack 0
  3110  005A90                     _config_timer_zero:
  3111                           	opt stack 26
  3112                           
  3113                           ;hardware.c: 85: T0CON = 0b11000011;
  3114                           
  3115                           ;incstack = 0
  3116  005A90  0EC3               	movlw	195
  3117  005A92  6ED5               	movwf	4053,c	;volatile
  3118                           
  3119                           ;hardware.c: 86: SPPCON = 0b00000000;
  3120  005A94  0E00               	movlw	0
  3121  005A96  6E65               	movwf	3941,c	;volatile
  3122                           
  3123                           ;hardware.c: 87: SPPCFG = 0b00000000;
  3124  005A98  0E00               	movlw	0
  3125  005A9A  6E63               	movwf	3939,c	;volatile
  3126                           
  3127                           ;hardware.c: 88: write_timer_zero(0x0083);
  3128  005A9C  0E00               	movlw	0
  3129  005A9E  6E1B               	movwf	write_timer_zero@timer0+1,c
  3130  005AA0  0E83               	movlw	131
  3131  005AA2  6E1A               	movwf	write_timer_zero@timer0,c
  3132  005AA4  EC7F  F02D         	call	_write_timer_zero	;wreg free
  3133  005AA8  0012               	return		;funcret
  3134  005AAA                     __end_of_config_timer_zero:
  3135                           	opt stack 0
  3136                           tblptru	equ	0xFF8
  3137                           tblptrh	equ	0xFF7
  3138                           tblptrl	equ	0xFF6
  3139                           tablat	equ	0xFF5
  3140                           intcon	equ	0xFF2
  3141                           intcon2	equ	0xFF1
  3142                           intcon3	equ	0xFF0
  3143                           postinc0	equ	0xFEE
  3144                           wreg	equ	0xFE8
  3145                           postdec1	equ	0xFE5
  3146                           fsr1h	equ	0xFE2
  3147                           fsr1l	equ	0xFE1
  3148                           postinc2	equ	0xFDE
  3149                           status	equ	0xFD8
  3150                           
  3151 ;; *************** function _write_timer_zero *****************
  3152 ;; Defined at:
  3153 ;;		line 138 in file "bibliotecas/hardware.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  timer0          2   25[COMRAM] unsigned int 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  timer           2   27[COMRAM] struct Timers
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      void 
  3160 ;; Registers used:
  3161 ;;		None
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3167 ;;      Params:         2       0       0       0       0       0       0       0       0
  3168 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3169 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3170 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3171 ;;Total ram usage:        4 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    2
  3174 ;; This function calls:
  3175 ;;		Nothing
  3176 ;; This function is called by:
  3177 ;;		_config_timer_zero
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text9
  3182  005AFE                     __ptext9:
  3183                           	opt stack 0
  3184  005AFE                     _write_timer_zero:
  3185                           	opt stack 26
  3186                           
  3187                           ;hardware.c: 140: union Timers timer;
  3188                           ;hardware.c: 142: timer.lt = timer0;
  3189                           
  3190                           ;incstack = 0
  3191  005AFE  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  3192  005B02  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  3193                           
  3194                           ;hardware.c: 144: TMR0H = timer.bt[1];
  3195  005B06  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  3196                           
  3197                           ;hardware.c: 145: TMR0L = timer.bt[0];
  3198  005B0A  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  3199  005B0E  0012               	return		;funcret
  3200  005B10                     __end_of_write_timer_zero:
  3201                           	opt stack 0
  3202                           tblptru	equ	0xFF8
  3203                           tblptrh	equ	0xFF7
  3204                           tblptrl	equ	0xFF6
  3205                           tablat	equ	0xFF5
  3206                           intcon	equ	0xFF2
  3207                           intcon2	equ	0xFF1
  3208                           intcon3	equ	0xFF0
  3209                           postinc0	equ	0xFEE
  3210                           wreg	equ	0xFE8
  3211                           postdec1	equ	0xFE5
  3212                           fsr1h	equ	0xFE2
  3213                           fsr1l	equ	0xFE1
  3214                           postinc2	equ	0xFDE
  3215                           status	equ	0xFD8
  3216                           
  3217 ;; *************** function _config_timer_dois *****************
  3218 ;; Defined at:
  3219 ;;		line 200 in file "bibliotecas/hardware.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;		None
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;		None
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      void 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3233 ;;      Params:         0       0       0       0       0       0       0       0       0
  3234 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3235 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3236 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3237 ;;Total ram usage:        0 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    2
  3240 ;; This function calls:
  3241 ;;		Nothing
  3242 ;; This function is called by:
  3243 ;;		_init_hardware
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           	psect	text10
  3248  005B34                     __ptext10:
  3249                           	opt stack 0
  3250  005B34                     _config_timer_dois:
  3251                           	opt stack 27
  3252                           
  3253                           ;hardware.c: 202: T2CON = 0b00000100;
  3254                           
  3255                           ;incstack = 0
  3256  005B34  0E04               	movlw	4
  3257  005B36  6ECA               	movwf	4042,c	;volatile
  3258                           
  3259                           ;hardware.c: 203: TMR2 = 0;
  3260  005B38  0E00               	movlw	0
  3261  005B3A  6ECC               	movwf	4044,c	;volatile
  3262                           
  3263                           ;hardware.c: 204: PR2 = 0xFF;
  3264  005B3C  68CB               	setf	4043,c	;volatile
  3265  005B3E  0012               	return		;funcret
  3266  005B40                     __end_of_config_timer_dois:
  3267                           	opt stack 0
  3268                           tblptru	equ	0xFF8
  3269                           tblptrh	equ	0xFF7
  3270                           tblptrl	equ	0xFF6
  3271                           tablat	equ	0xFF5
  3272                           intcon	equ	0xFF2
  3273                           intcon2	equ	0xFF1
  3274                           intcon3	equ	0xFF0
  3275                           postinc0	equ	0xFEE
  3276                           wreg	equ	0xFE8
  3277                           postdec1	equ	0xFE5
  3278                           fsr1h	equ	0xFE2
  3279                           fsr1l	equ	0xFE1
  3280                           postinc2	equ	0xFDE
  3281                           status	equ	0xFD8
  3282                           
  3283 ;; *************** function _inicializa_tarefas *****************
  3284 ;; Defined at:
  3285 ;;		line 157 in file "main.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;		None
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;		None
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  1    wreg      void 
  3292 ;; Registers used:
  3293 ;;		wreg, status,2, status,0
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3299 ;;      Params:         0       0       0       0       0       0       0       0       0
  3300 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3301 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3302 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3303 ;;Total ram usage:        0 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; Hardware stack levels required when called:    2
  3306 ;; This function calls:
  3307 ;;		Nothing
  3308 ;; This function is called by:
  3309 ;;		_main
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text11
  3314  00597A                     __ptext11:
  3315                           	opt stack 0
  3316  00597A                     _inicializa_tarefas:
  3317                           	opt stack 28
  3318                           
  3319                           ;main.c: 160: p_tarefas[0] = SDCard;
  3320                           
  3321                           ;incstack = 0
  3322  00597A  0ECA               	movlw	low _SDCard
  3323  00597C  0101               	movlb	1	; () banked
  3324  00597E  6F3C               	movwf	_p_tarefas& (0+255),b
  3325  005980  0E3C               	movlw	high _SDCard
  3326  005982  6F3D               	movwf	(_p_tarefas+1)& (0+255),b
  3327                           
  3328                           ; BSR set to: 1
  3329                           ;main.c: 164: tempo_backup[0] = 5000;
  3330  005984  0E13               	movlw	19
  3331  005986  6F39               	movwf	(_tempo_backup+1)& (0+255),b
  3332  005988  0E88               	movlw	136
  3333  00598A  6F38               	movwf	_tempo_backup& (0+255),b
  3334                           
  3335                           ; BSR set to: 1
  3336                           ;main.c: 165: tempo_backup[1] = 5000;
  3337  00598C  0E13               	movlw	19
  3338  00598E  6F3B               	movwf	(_tempo_backup+3)& (0+255),b
  3339  005990  0E88               	movlw	136
  3340  005992  6F3A               	movwf	(_tempo_backup+2)& (0+255),b
  3341                           
  3342                           ; BSR set to: 1
  3343                           ;main.c: 170: tempo_tarefa[0] = 5000;
  3344  005994  0E13               	movlw	19
  3345  005996  6F35               	movwf	(_tempo_tarefa+1)& (0+255),b
  3346  005998  0E88               	movlw	136
  3347  00599A  6F34               	movwf	_tempo_tarefa& (0+255),b
  3348                           
  3349                           ; BSR set to: 1
  3350                           ;main.c: 171: tempo_tarefa[1] = 5000;
  3351  00599C  0E13               	movlw	19
  3352  00599E  6F37               	movwf	(_tempo_tarefa+3)& (0+255),b
  3353  0059A0  0E88               	movlw	136
  3354  0059A2  6F36               	movwf	(_tempo_tarefa+2)& (0+255),b
  3355                           
  3356                           ; BSR set to: 1
  3357                           ;main.c: 175: tarefa_em_execucao = 0;
  3358  0059A4  0E00               	movlw	0
  3359  0059A6  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3360                           
  3361                           ; BSR set to: 1
  3362  0059A8  0012               	return		;funcret
  3363  0059AA                     __end_of_inicializa_tarefas:
  3364                           	opt stack 0
  3365                           tblptru	equ	0xFF8
  3366                           tblptrh	equ	0xFF7
  3367                           tblptrl	equ	0xFF6
  3368                           tablat	equ	0xFF5
  3369                           intcon	equ	0xFF2
  3370                           intcon2	equ	0xFF1
  3371                           intcon3	equ	0xFF0
  3372                           postinc0	equ	0xFEE
  3373                           wreg	equ	0xFE8
  3374                           postdec1	equ	0xFE5
  3375                           fsr1h	equ	0xFE2
  3376                           fsr1l	equ	0xFE1
  3377                           postinc2	equ	0xFDE
  3378                           status	equ	0xFD8
  3379                           
  3380 ;; *************** function _inicializa_shrc *****************
  3381 ;; Defined at:
  3382 ;;		line 48 in file "bibliotecas/SHRC.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;		None
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;		None
  3387 ;; Return value:  Size  Location     Type
  3388 ;;                  1    wreg      void 
  3389 ;; Registers used:
  3390 ;;		None
  3391 ;; Tracked objects:
  3392 ;;		On entry : 0/0
  3393 ;;		On exit  : 0/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3396 ;;      Params:         0       0       0       0       0       0       0       0       0
  3397 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3398 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3399 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3400 ;;Total ram usage:        0 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; Hardware stack levels required when called:    2
  3403 ;; This function calls:
  3404 ;;		Nothing
  3405 ;; This function is called by:
  3406 ;;		_main
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text12
  3411  005B40                     __ptext12:
  3412                           	opt stack 0
  3413  005B40                     _inicializa_shrc:
  3414                           	opt stack 28
  3415                           
  3416                           ;SHRC.c: 51: TRISBbits.RB6 = 0;
  3417                           
  3418                           ; BSR set to: 1
  3419                           ;incstack = 0
  3420  005B40  9C93               	bcf	3987,6,c	;volatile
  3421                           
  3422                           ;SHRC.c: 52: TRISBbits.RB5 = 1;
  3423  005B42  8A93               	bsf	3987,5,c	;volatile
  3424                           
  3425                           ;SHRC.c: 53: TRISBbits.RB7 = 0;
  3426  005B44  9E93               	bcf	3987,7,c	;volatile
  3427                           
  3428                           ;SHRC.c: 56: LATBbits.LATB6 = 0;
  3429  005B46  9C8A               	bcf	3978,6,c	;volatile
  3430                           
  3431                           ;SHRC.c: 57: LATBbits.LATB7 = 0;
  3432  005B48  9E8A               	bcf	3978,7,c	;volatile
  3433  005B4A  0012               	return		;funcret
  3434  005B4C                     __end_of_inicializa_shrc:
  3435                           	opt stack 0
  3436                           tblptru	equ	0xFF8
  3437                           tblptrh	equ	0xFF7
  3438                           tblptrl	equ	0xFF6
  3439                           tablat	equ	0xFF5
  3440                           intcon	equ	0xFF2
  3441                           intcon2	equ	0xFF1
  3442                           intcon3	equ	0xFF0
  3443                           postinc0	equ	0xFEE
  3444                           wreg	equ	0xFE8
  3445                           postdec1	equ	0xFE5
  3446                           fsr1h	equ	0xFE2
  3447                           fsr1l	equ	0xFE1
  3448                           postinc2	equ	0xFDE
  3449                           status	equ	0xFD8
  3450                           
  3451 ;; *************** function _escalonador *****************
  3452 ;; Defined at:
  3453 ;;		line 186 in file "main.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;		None
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;  cont            1   96[BANK1 ] unsigned char 
  3458 ;; Return value:  Size  Location     Type
  3459 ;;                  1    wreg      void 
  3460 ;; Registers used:
  3461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3462 ;; Tracked objects:
  3463 ;;		On entry : 0/0
  3464 ;;		On exit  : 0/0
  3465 ;;		Unchanged: 0/0
  3466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3467 ;;      Params:         0       0       0       0       0       0       0       0       0
  3468 ;;      Locals:         0       0       1       0       0       0       0       0       0
  3469 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3470 ;;      Totals:         0       0       3       0       0       0       0       0       0
  3471 ;;Total ram usage:        3 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; Hardware stack levels required when called:   16
  3474 ;; This function calls:
  3475 ;;		_SDCard
  3476 ;; This function is called by:
  3477 ;;		_main
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           	psect	text13
  3482  004CBC                     __ptext13:
  3483                           	opt stack 0
  3484  004CBC                     _escalonador:
  3485                           	opt stack 14
  3486                           
  3487                           ;main.c: 188: unsigned char cont;
  3488                           ;main.c: 189: for(cont = 0; cont<2;cont++)
  3489                           
  3490                           ;incstack = 0
  3491  004CBC  0E00               	movlw	0
  3492  004CBE  0101               	movlb	1	; () banked
  3493  004CC0  6FD3               	movwf	escalonador@cont& (0+255),b
  3494  004CC2                     l15284:
  3495                           
  3496                           ; BSR set to: 1
  3497  004CC2  0E01               	movlw	1
  3498  004CC4  65D3               	cpfsgt	escalonador@cont& (0+255),b
  3499  004CC6  D001               	goto	l75
  3500  004CC8  0012               	return	
  3501  004CCA                     l75:
  3502                           
  3503                           ; BSR set to: 1
  3504                           ;main.c: 190: {
  3505                           ;main.c: 191: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3506                           
  3507                           ; BSR set to: 1
  3508  004CCA  51D3               	movf	escalonador@cont& (0+255),w,b
  3509  004CCC  0D02               	mullw	2
  3510  004CCE  0E3C               	movlw	low _p_tarefas
  3511  004CD0  24F3               	addwf	prodl,w,c
  3512  004CD2  6ED9               	movwf	fsr2l,c
  3513  004CD4  0E01               	movlw	high _p_tarefas
  3514  004CD6  20F4               	addwfc	prodh,w,c
  3515  004CD8  6EDA               	movwf	fsr2h,c
  3516  004CDA  50DE               	movf	postinc2,w,c
  3517  004CDC  10DE               	iorwf	postinc2,w,c
  3518  004CDE  B4D8               	btfsc	status,2,c
  3519  004CE0  D03D               	goto	l77
  3520                           
  3521                           ; BSR set to: 1
  3522  004CE2  51D3               	movf	escalonador@cont& (0+255),w,b
  3523  004CE4  0D02               	mullw	2
  3524  004CE6  0E34               	movlw	low _tempo_tarefa
  3525  004CE8  24F3               	addwf	prodl,w,c
  3526  004CEA  6ED9               	movwf	fsr2l,c
  3527  004CEC  0E01               	movlw	high _tempo_tarefa
  3528  004CEE  20F4               	addwfc	prodh,w,c
  3529  004CF0  6EDA               	movwf	fsr2h,c
  3530  004CF2  50DE               	movf	postinc2,w,c
  3531  004CF4  10DE               	iorwf	postinc2,w,c
  3532  004CF6  A4D8               	btfss	status,2,c
  3533  004CF8  D031               	goto	l77
  3534                           
  3535                           ; BSR set to: 1
  3536                           ;main.c: 192: {
  3537                           ;main.c: 193: tarefa_em_execucao = 1;
  3538  004CFA  0E01               	movlw	1
  3539  004CFC  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3540                           
  3541                           ;main.c: 194: timeout_tarefa = 65000;
  3542  004CFE  0EFD               	movlw	253
  3543  004D00  6E37               	movwf	_timeout_tarefa+1,c
  3544  004D02  0EE8               	movlw	232
  3545  004D04  6E36               	movwf	_timeout_tarefa,c
  3546                           
  3547                           ; BSR set to: 1
  3548                           ;main.c: 195: p_tarefas[cont]();
  3549  004D06  51D3               	movf	escalonador@cont& (0+255),w,b
  3550  004D08  0D02               	mullw	2
  3551  004D0A  0E3C               	movlw	low _p_tarefas
  3552  004D0C  24F3               	addwf	prodl,w,c
  3553  004D0E  6ED9               	movwf	fsr2l,c
  3554  004D10  0E01               	movlw	high _p_tarefas
  3555  004D12  20F4               	addwfc	prodh,w,c
  3556  004D14  6EDA               	movwf	fsr2h,c
  3557  004D16  D801               	call	u20478
  3558  004D18  D00A               	goto	u20479
  3559  004D1A                     u20478:
  3560  004D1A  0005               	push	
  3561  004D1C  6EFA               	movwf	pclath,c
  3562  004D1E  50DE               	movf	postinc2,w,c
  3563  004D20  6EFD               	movwf	tosl,c
  3564  004D22  50DE               	movf	postinc2,w,c
  3565  004D24  6EFE               	movwf	tosh,c
  3566  004D26  50F8               	movf	tblptru,w,c
  3567  004D28  6EFF               	movwf	tosu,c
  3568  004D2A  50FA               	movf	pclath,w,c
  3569  004D2C  0012               	return		;indir
  3570  004D2E                     u20479:
  3571                           
  3572                           ;main.c: 196: tarefa_em_execucao = 0;
  3573  004D2E  0E00               	movlw	0
  3574  004D30  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3575                           
  3576                           ;main.c: 197: tempo_tarefa[cont] = tempo_backup[cont];
  3577  004D32  0101               	movlb	1	; () banked
  3578  004D34  51D3               	movf	escalonador@cont& (0+255),w,b
  3579  004D36  0D02               	mullw	2
  3580  004D38  0E38               	movlw	low _tempo_backup
  3581  004D3A  24F3               	addwf	prodl,w,c
  3582  004D3C  6ED9               	movwf	fsr2l,c
  3583  004D3E  0E01               	movlw	high _tempo_backup
  3584  004D40  20F4               	addwfc	prodh,w,c
  3585  004D42  6EDA               	movwf	fsr2h,c
  3586  004D44  51D3               	movf	escalonador@cont& (0+255),w,b
  3587  004D46  0D02               	mullw	2
  3588  004D48  0E34               	movlw	low _tempo_tarefa
  3589  004D4A  24F3               	addwf	prodl,w,c
  3590  004D4C  6EE1               	movwf	fsr1l,c
  3591  004D4E  0E01               	movlw	high _tempo_tarefa
  3592  004D50  20F4               	addwfc	prodh,w,c
  3593  004D52  6EE2               	movwf	fsr1h,c
  3594  004D54  CFDE FFE6          	movff	postinc2,postinc1
  3595  004D58  CFDD FFE5          	movff	postdec2,postdec1
  3596  004D5C                     l77:
  3597                           
  3598                           ; BSR set to: 1
  3599                           
  3600                           ; BSR set to: 1
  3601  004D5C  2BD3               	incf	escalonador@cont& (0+255),f,b
  3602  004D5E  D7B1               	goto	l15284
  3603  004D60                     __end_of_escalonador:
  3604                           	opt stack 0
  3605                           tosu	equ	0xFFF
  3606                           tosh	equ	0xFFE
  3607                           tosl	equ	0xFFD
  3608                           pclath	equ	0xFFA
  3609                           tblptru	equ	0xFF8
  3610                           tblptrh	equ	0xFF7
  3611                           tblptrl	equ	0xFF6
  3612                           tablat	equ	0xFF5
  3613                           prodh	equ	0xFF4
  3614                           prodl	equ	0xFF3
  3615                           intcon	equ	0xFF2
  3616                           intcon2	equ	0xFF1
  3617                           intcon3	equ	0xFF0
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           postinc1	equ	0xFE6
  3621                           postdec1	equ	0xFE5
  3622                           fsr1h	equ	0xFE2
  3623                           fsr1l	equ	0xFE1
  3624                           postinc2	equ	0xFDE
  3625                           postdec2	equ	0xFDD
  3626                           fsr2h	equ	0xFDA
  3627                           fsr2l	equ	0xFD9
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _SDCard *****************
  3631 ;; Defined at:
  3632 ;;		line 150 in file "bibliotecas/SDCard.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  fil            34    5[BANK3 ] struct .
  3637 ;;  bw              2    2[BANK3 ] unsigned short 
  3638 ;;  br              2    0[BANK3 ] unsigned int 
  3639 ;;  FResult         1    4[BANK3 ] enum E3971
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  1    wreg      void 
  3642 ;; Registers used:
  3643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3649 ;;      Params:         0       0       0       0       0       0       0       0       0
  3650 ;;      Locals:         0       0       0       0      39       0       0       0       0
  3651 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3652 ;;      Totals:         0       2       0       0      39       0       0       0       0
  3653 ;;Total ram usage:       41 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:   15
  3656 ;; This function calls:
  3657 ;;		_escreve_frase_ram_lcd
  3658 ;;		_escreve_inteiro_lcd
  3659 ;;		_f_close
  3660 ;;		_f_mount
  3661 ;;		_f_open
  3662 ;;		_f_write
  3663 ;;		_posicao_cursor_lcd
  3664 ;;		_proceed
  3665 ;; This function is called by:
  3666 ;;		_inicializa_tarefas
  3667 ;;		_escalonador
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text14
  3672  003CCA                     __ptext14:
  3673                           	opt stack 0
  3674  003CCA                     _SDCard:
  3675                           	opt stack 14
  3676                           
  3677                           ;SDCard.c: 152: T0CONbits.TMR0ON = 0;
  3678                           
  3679                           ; BSR set to: 1
  3680                           ;incstack = 0
  3681  003CCA  9ED5               	bcf	4053,7,c	;volatile
  3682                           
  3683                           ;SDCard.c: 155: FRESULT FResult;
  3684                           ;SDCard.c: 156: FIL fil;
  3685                           ;SDCard.c: 157: WORD bw;
  3686                           ;SDCard.c: 158: UINT br;
  3687                           ;SDCard.c: 163: proceed();
  3688  003CCC  ECAC  F02D         	call	_proceed	;wreg free
  3689                           
  3690                           ;SDCard.c: 165: _delay((unsigned long)((1)*(48000000/4000.0)));
  3691  003CD0  0E10               	movlw	16
  3692  003CD2  0100               	movlb	0	; () banked
  3693  003CD4  6FFE               	movwf	??_SDCard& (0+255),b
  3694  003CD6  0E94               	movlw	148
  3695  003CD8                     u23427:
  3696  003CD8  2EE8               	decfsz	wreg,f,c
  3697  003CDA  D7FE               	bra	u23427
  3698  003CDC  2FFE               	decfsz	??_SDCard& (0+255),f,b
  3699  003CDE  D7FC               	bra	u23427
  3700  003CE0  F000               	nop	
  3701                           
  3702                           ;SDCard.c: 166: FResult = f_mount(&fs, "", 1);
  3703  003CE2  0E27               	movlw	low _fs
  3704  003CE4  0100               	movlb	0	; () banked
  3705  003CE6  6FF6               	movwf	f_mount@fs& (0+255),b
  3706  003CE8  0E03               	movlw	high _fs
  3707  003CEA  6FF7               	movwf	(f_mount@fs+1)& (0+255),b
  3708  003CEC  0E7B               	movlw	low (STR_17+2)
  3709  003CEE  6FF8               	movwf	f_mount@path& (0+255),b
  3710  003CF0  0E62               	movlw	high (STR_17+2)
  3711  003CF2  6FF9               	movwf	(f_mount@path+1)& (0+255),b
  3712  003CF4  0E01               	movlw	1
  3713  003CF6  6FFA               	movwf	f_mount@opt& (0+255),b
  3714  003CF8  ECB0  F025         	call	_f_mount	;wreg free
  3715  003CFC  0103               	movlb	3	; () banked
  3716  003CFE  6F04               	movwf	SDCard@FResult& (0+255),b
  3717                           
  3718                           ; BSR set to: 3
  3719                           ;SDCard.c: 167: if(FResult == FR_OK)
  3720  003D00  5104               	movf	SDCard@FResult& (0+255),w,b
  3721  003D02  A4D8               	btfss	status,2,c
  3722  003D04  0012               	return	
  3723                           
  3724                           ; BSR set to: 3
  3725                           ;SDCard.c: 168: {
  3726                           ;SDCard.c: 171: posicao_cursor_lcd(1,0);
  3727  003D06  0E00               	movlw	0
  3728  003D08  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3729  003D0A  0E01               	movlw	1
  3730  003D0C  EC64  F029         	call	_posicao_cursor_lcd
  3731                           
  3732                           ;SDCard.c: 172: escreve_frase_ram_lcd("Abrindo arquivo");
  3733  003D10  0E04               	movlw	low STR_11
  3734  003D12  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3735  003D14  0E62               	movlw	high STR_11
  3736  003D16  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3737  003D18  EC1D  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3738                           
  3739                           ;SDCard.c: 173: FResult = f_open(&fil,"te.bin", 0x02 | 0x08);
  3740  003D1C  0E05               	movlw	low SDCard@fil
  3741  003D1E  0101               	movlb	1	; () banked
  3742  003D20  6F7F               	movwf	f_open@fp& (0+255),b
  3743  003D22  0E03               	movlw	high SDCard@fil
  3744  003D24  6F80               	movwf	(f_open@fp+1)& (0+255),b
  3745  003D26  0E55               	movlw	low STR_12
  3746  003D28  6F81               	movwf	f_open@path& (0+255),b
  3747  003D2A  0E62               	movlw	high STR_12
  3748  003D2C  6F82               	movwf	(f_open@path+1)& (0+255),b
  3749  003D2E  0E0A               	movlw	10
  3750  003D30  6F83               	movwf	f_open@mode& (0+255),b
  3751  003D32  ECB8  F008         	call	_f_open	;wreg free
  3752  003D36  0103               	movlb	3	; () banked
  3753  003D38  6F04               	movwf	SDCard@FResult& (0+255),b
  3754                           
  3755                           ; BSR set to: 3
  3756                           ;SDCard.c: 174: if(FResult == FR_OK)
  3757  003D3A  5104               	movf	SDCard@FResult& (0+255),w,b
  3758  003D3C  A4D8               	btfss	status,2,c
  3759  003D3E  D05B               	goto	l320
  3760                           
  3761                           ; BSR set to: 3
  3762                           ;SDCard.c: 175: {
  3763                           ;SDCard.c: 180: FResult = f_write(&fil, "teste", br, &bw);
  3764  003D40  0E05               	movlw	low SDCard@fil
  3765  003D42  0100               	movlb	0	; () banked
  3766  003D44  6FD7               	movwf	f_write@fp& (0+255),b
  3767  003D46  0E03               	movlw	high SDCard@fil
  3768  003D48  6FD8               	movwf	(f_write@fp+1)& (0+255),b
  3769  003D4A  0E5C               	movlw	low STR_13
  3770  003D4C  6FD9               	movwf	f_write@buff& (0+255),b
  3771  003D4E  0E62               	movlw	high STR_13
  3772  003D50  6FDA               	movwf	(f_write@buff+1)& (0+255),b
  3773  003D52  C300  F0DB         	movff	SDCard@br,f_write@btw
  3774  003D56  C301  F0DC         	movff	SDCard@br+1,f_write@btw+1
  3775  003D5A  0E02               	movlw	low SDCard@bw
  3776  003D5C  6FDD               	movwf	f_write@bw& (0+255),b
  3777  003D5E  0E03               	movlw	high SDCard@bw
  3778  003D60  6FDE               	movwf	(f_write@bw+1)& (0+255),b
  3779  003D62  ECB9  F004         	call	_f_write	;wreg free
  3780  003D66  0103               	movlb	3	; () banked
  3781  003D68  6F04               	movwf	SDCard@FResult& (0+255),b
  3782                           
  3783                           ; BSR set to: 3
  3784                           ;SDCard.c: 181: if(FResult == FR_OK)
  3785  003D6A  5104               	movf	SDCard@FResult& (0+255),w,b
  3786  003D6C  A4D8               	btfss	status,2,c
  3787  003D6E  D02B               	goto	l321
  3788                           
  3789                           ; BSR set to: 3
  3790                           ;SDCard.c: 182: {
  3791                           ;SDCard.c: 185: posicao_cursor_lcd(2,0);
  3792  003D70  0E00               	movlw	0
  3793  003D72  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3794  003D74  0E02               	movlw	2
  3795  003D76  EC64  F029         	call	_posicao_cursor_lcd
  3796                           
  3797                           ;SDCard.c: 186: escreve_frase_ram_lcd(buff);
  3798  003D7A  0E49               	movlw	low _buff
  3799  003D7C  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3800  003D7E  0E01               	movlw	high _buff
  3801  003D80  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3802  003D82  EC1D  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3803                           
  3804                           ;SDCard.c: 187: f_close(&fil);
  3805  003D86  0E05               	movlw	low SDCard@fil
  3806  003D88  0100               	movlb	0	; () banked
  3807  003D8A  6FA6               	movwf	f_close@fp& (0+255),b
  3808  003D8C  0E03               	movlw	high SDCard@fil
  3809  003D8E  6FA7               	movwf	(f_close@fp+1)& (0+255),b
  3810  003D90  EC46  F02B         	call	_f_close	;wreg free
  3811                           
  3812                           ;SDCard.c: 189: posicao_cursor_lcd(2,0);
  3813  003D94  0E00               	movlw	0
  3814  003D96  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3815  003D98  0E02               	movlw	2
  3816  003D9A  EC64  F029         	call	_posicao_cursor_lcd
  3817                           
  3818                           ;SDCard.c: 190: escreve_frase_ram_lcd("Arquivo renomeado");
  3819  003D9E  0EB0               	movlw	low STR_14
  3820  003DA0  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3821  003DA2  0E61               	movlw	high STR_14
  3822  003DA4  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3823  003DA6  EC1D  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3824                           
  3825                           ;SDCard.c: 191: _delay((unsigned long)((2000)*(48000000/4000.0)));
  3826  003DAA  0E7A               	movlw	122
  3827  003DAC  0100               	movlb	0	; () banked
  3828  003DAE  6FFF               	movwf	(??_SDCard+1)& (0+255),b
  3829  003DB0  0EC1               	movlw	193
  3830  003DB2  6FFE               	movwf	??_SDCard& (0+255),b
  3831  003DB4  0E81               	movlw	129
  3832  003DB6                     u23437:
  3833  003DB6  2EE8               	decfsz	wreg,f,c
  3834  003DB8  D7FE               	bra	u23437
  3835  003DBA  2FFE               	decfsz	??_SDCard& (0+255),f,b
  3836  003DBC  D7FC               	bra	u23437
  3837  003DBE  2FFF               	decfsz	(??_SDCard+1)& (0+255),f,b
  3838  003DC0  D7FA               	bra	u23437
  3839  003DC2  D000               	nop2	
  3840                           
  3841                           ;SDCard.c: 192: }
  3842  003DC4  0012               	return	
  3843  003DC6                     l321:
  3844                           
  3845                           ;SDCard.c: 193: else
  3846                           ;SDCard.c: 194: {
  3847                           ;SDCard.c: 195: posicao_cursor_lcd(2,0);
  3848  003DC6  0E00               	movlw	0
  3849  003DC8  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3850  003DCA  0E02               	movlw	2
  3851  003DCC  EC64  F029         	call	_posicao_cursor_lcd
  3852                           
  3853                           ;SDCard.c: 196: escreve_frase_ram_lcd("FILE NOT CREATED");
  3854  003DD0  0ED3               	movlw	low STR_15
  3855  003DD2  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3856  003DD4  0E61               	movlw	high STR_15
  3857  003DD6  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3858  003DD8  EC1D  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3859                           
  3860                           ;SDCard.c: 197: posicao_cursor_lcd(1,0);
  3861  003DDC  0E00               	movlw	0
  3862  003DDE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3863  003DE0  0E01               	movlw	1
  3864  003DE2  EC64  F029         	call	_posicao_cursor_lcd
  3865                           
  3866                           ;SDCard.c: 198: escreve_inteiro_lcd(FResult);
  3867  003DE6  C304  F066         	movff	SDCard@FResult,escreve_inteiro_lcd@valor
  3868  003DEA  0100               	movlb	0	; () banked
  3869  003DEC  6B67               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3870  003DEE  EC0F  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3871                           
  3872                           ;SDCard.c: 199: T0CONbits.TMR0ON = 1;
  3873  003DF2  8ED5               	bsf	4053,7,c	;volatile
  3874                           
  3875                           ;SDCard.c: 200: }
  3876                           ;SDCard.c: 217: }
  3877  003DF4  0012               	return	
  3878  003DF6                     l320:
  3879                           
  3880                           ;SDCard.c: 218: else{
  3881                           ;SDCard.c: 219: posicao_cursor_lcd(1,0);
  3882  003DF6  0E00               	movlw	0
  3883  003DF8  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3884  003DFA  0E01               	movlw	1
  3885  003DFC  EC64  F029         	call	_posicao_cursor_lcd
  3886                           
  3887                           ;SDCard.c: 220: escreve_inteiro_lcd(FResult);
  3888  003E00  C304  F066         	movff	SDCard@FResult,escreve_inteiro_lcd@valor
  3889  003E04  0100               	movlb	0	; () banked
  3890  003E06  6B67               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3891  003E08  EC0F  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3892                           
  3893                           ;SDCard.c: 221: T0CONbits.TMR0ON = 1;
  3894  003E0C  8ED5               	bsf	4053,7,c	;volatile
  3895  003E0E  0012               	return	
  3896  003E10                     __end_of_SDCard:
  3897                           	opt stack 0
  3898                           tosu	equ	0xFFF
  3899                           tosh	equ	0xFFE
  3900                           tosl	equ	0xFFD
  3901                           pclath	equ	0xFFA
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           intcon	equ	0xFF2
  3909                           intcon2	equ	0xFF1
  3910                           intcon3	equ	0xFF0
  3911                           postinc0	equ	0xFEE
  3912                           wreg	equ	0xFE8
  3913                           postinc1	equ	0xFE6
  3914                           postdec1	equ	0xFE5
  3915                           fsr1h	equ	0xFE2
  3916                           fsr1l	equ	0xFE1
  3917                           postinc2	equ	0xFDE
  3918                           postdec2	equ	0xFDD
  3919                           fsr2h	equ	0xFDA
  3920                           fsr2l	equ	0xFD9
  3921                           status	equ	0xFD8
  3922                           
  3923 ;; *************** function _f_write *****************
  3924 ;; Defined at:
  3925 ;;		line 3960 in file "bibliotecas/ff.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;  fp              2  119[BANK0 ] PTR struct .
  3928 ;;		 -> SDCard@fil(34), 
  3929 ;;  buff            2  121[BANK0 ] PTR const void 
  3930 ;;		 -> pb.buf(64), pb.buf(64), pb.buf(64), f_printf@pb(70), 
  3931 ;;		 -> f_puts@pb(70), f_putc@pb(70), STR_13(6), 
  3932 ;;  btw             2  123[BANK0 ] unsigned int 
  3933 ;;  bw              2  125[BANK0 ] PTR unsigned int 
  3934 ;;		 -> putc_flush@nw(2), putc_bfd@n(2), SDCard@bw(2), 
  3935 ;; Auto vars:     Size  Location     Type
  3936 ;;  clst            4   15[BANK1 ] unsigned long 
  3937 ;;  sect            4   11[BANK1 ] unsigned long 
  3938 ;;  fs              2   21[BANK1 ] PTR struct .
  3939 ;;		 -> NULL(0), fs(559), 
  3940 ;;  wcnt            2   19[BANK1 ] unsigned int 
  3941 ;;  cc              2    9[BANK1 ] unsigned int 
  3942 ;;  csect           2    7[BANK1 ] unsigned int 
  3943 ;;  wbuff           2    5[BANK1 ] PTR const unsigned char 
  3944 ;;		 -> pb.buf(64), pb.buf(64), pb.buf(64), f_printf@pb(70), 
  3945 ;;		 -> f_puts@pb(70), f_putc@pb(70), STR_13(6), 
  3946 ;;  res             1    4[BANK1 ] enum E154
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      enum E3971
  3949 ;; Registers used:
  3950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3956 ;;      Params:         0       8       0       0       0       0       0       0       0
  3957 ;;      Locals:         0       0      23       0       0       0       0       0       0
  3958 ;;      Temps:          0      16       0       0       0       0       0       0       0
  3959 ;;      Totals:         0      24      23       0       0       0       0       0       0
  3960 ;;Total ram usage:       47 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:   11
  3963 ;; This function calls:
  3964 ;;		_clst2sect
  3965 ;;		_create_chain
  3966 ;;		_disk_write
  3967 ;;		_memcpy
  3968 ;;		_move_window
  3969 ;;		_sync_window
  3970 ;;		_validate
  3971 ;; This function is called by:
  3972 ;;		_SDCard
  3973 ;;		_putc_bfd
  3974 ;;		_putc_flush
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text15
  3979  000972                     __ptext15:
  3980                           	opt stack 0
  3981  000972                     _f_write:
  3982                           	opt stack 17
  3983                           
  3984                           ;ff.c: 3967: FRESULT res;
  3985                           ;ff.c: 3968: FATFS *fs;
  3986                           ;ff.c: 3969: DWORD clst;
  3987                           ;ff.c: 3970: LBA_t sect;
  3988                           ;ff.c: 3971: UINT wcnt, cc, csect;
  3989                           ;ff.c: 3972: const BYTE *wbuff = (const BYTE*)buff;
  3990                           
  3991                           ;incstack = 0
  3992  000972  C0D9  F178         	movff	f_write@buff,f_write@wbuff
  3993  000976  C0DA  F179         	movff	f_write@buff+1,f_write@wbuff+1
  3994                           
  3995                           ;ff.c: 3975: *bw = 0;
  3996  00097A  C0DD  FFD9         	movff	f_write@bw,fsr2l
  3997  00097E  C0DE  FFDA         	movff	f_write@bw+1,fsr2h
  3998  000982  0E00               	movlw	0
  3999  000984  6EDE               	movwf	postinc2,c
  4000  000986  0E00               	movlw	0
  4001  000988  6EDD               	movwf	postdec2,c
  4002                           
  4003                           ;ff.c: 3976: res = validate(&fp->obj, &fs);
  4004  00098A  C0D7  F021         	movff	f_write@fp,validate@obj
  4005  00098E  C0D8  F022         	movff	f_write@fp+1,validate@obj+1
  4006  000992  0E88               	movlw	low f_write@fs
  4007  000994  6E23               	movwf	validate@rfs,c
  4008  000996  0E01               	movlw	high f_write@fs
  4009  000998  6E24               	movwf	validate@rfs+1,c
  4010  00099A  EC97  F024         	call	_validate	;wreg free
  4011  00099E  0101               	movlb	1	; () banked
  4012  0009A0  6F77               	movwf	f_write@res& (0+255),b
  4013                           
  4014                           ; BSR set to: 1
  4015                           ;ff.c: 3977: if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) return res;
  4016  0009A2  5177               	movf	f_write@res& (0+255),w,b
  4017  0009A4  A4D8               	btfss	status,2,c
  4018  0009A6  D00D               	goto	u19940
  4019                           
  4020                           ; BSR set to: 1
  4021  0009A8  0100               	movlb	0	; () banked
  4022  0009AA  EE20 F00F          	lfsr	2,15
  4023  0009AE  51D7               	movf	f_write@fp& (0+255),w,b
  4024  0009B0  26D9               	addwf	fsr2l,f,c
  4025  0009B2  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4026  0009B4  22DA               	addwfc	fsr2h,f,c
  4027  0009B6  50DF               	movf	indf2,w,c
  4028  0009B8  0101               	movlb	1	; () banked
  4029  0009BA  6F77               	movwf	f_write@res& (0+255),b
  4030  0009BC  5177               	movf	f_write@res& (0+255),w,b
  4031  0009BE  B4D8               	btfsc	status,2,c
  4032  0009C0  D002               	goto	l1488
  4033  0009C2                     u19940:
  4034                           
  4035                           ; BSR set to: 1
  4036                           
  4037                           ; BSR set to: 1
  4038  0009C2  5177               	movf	f_write@res& (0+255),w,b
  4039                           
  4040                           ; BSR set to: 1
  4041  0009C4  0012               	return	
  4042  0009C6                     l1488:
  4043                           
  4044                           ; BSR set to: 1
  4045                           ;ff.c: 3978: if (!(fp->flag & 0x02)) return FR_DENIED;
  4046                           
  4047                           ; BSR set to: 1
  4048  0009C6  0100               	movlb	0	; () banked
  4049  0009C8  EE20 F00E          	lfsr	2,14
  4050  0009CC  51D7               	movf	f_write@fp& (0+255),w,b
  4051  0009CE  26D9               	addwf	fsr2l,f,c
  4052  0009D0  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4053  0009D2  22DA               	addwfc	fsr2h,f,c
  4054  0009D4  B2DF               	btfsc	indf2,1,c
  4055  0009D6  D002               	goto	u19960
  4056                           
  4057                           ; BSR set to: 0
  4058  0009D8  0E07               	movlw	7
  4059                           
  4060                           ; BSR set to: 0
  4061  0009DA  0012               	return	
  4062  0009DC                     u19960:
  4063                           
  4064                           ; BSR set to: 0
  4065                           
  4066                           ; BSR set to: 0
  4067  0009DC  EE20 F010          	lfsr	2,16
  4068  0009E0  51D7               	movf	f_write@fp& (0+255),w,b
  4069  0009E2  26D9               	addwf	fsr2l,f,c
  4070  0009E4  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4071  0009E6  22DA               	addwfc	fsr2h,f,c
  4072  0009E8  EE10 F010          	lfsr	1,16
  4073  0009EC  51D7               	movf	f_write@fp& (0+255),w,b
  4074  0009EE  26E1               	addwf	fsr1l,f,c
  4075  0009F0  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4076  0009F2  22E2               	addwfc	fsr1h,f,c
  4077  0009F4  CFE6 F0E3          	movff	postinc1,??_f_write+4
  4078  0009F8  CFE6 F0E4          	movff	postinc1,??_f_write+5
  4079  0009FC  CFE6 F0E5          	movff	postinc1,??_f_write+6
  4080  000A00  CFE6 F0E6          	movff	postinc1,??_f_write+7
  4081  000A04  51DB               	movf	f_write@btw& (0+255),w,b
  4082  000A06  25E3               	addwf	(??_f_write+4)& (0+255),w,b
  4083  000A08  6FE7               	movwf	(??_f_write+8)& (0+255),b
  4084  000A0A  51DC               	movf	(f_write@btw+1)& (0+255),w,b
  4085  000A0C  21E4               	addwfc	(??_f_write+5)& (0+255),w,b
  4086  000A0E  6FE8               	movwf	(??_f_write+9)& (0+255),b
  4087  000A10  0E00               	movlw	0
  4088  000A12  21E5               	addwfc	(??_f_write+6)& (0+255),w,b
  4089  000A14  6FE9               	movwf	(??_f_write+10)& (0+255),b
  4090  000A16  0E00               	movlw	0
  4091  000A18  21E6               	addwfc	(??_f_write+7)& (0+255),w,b
  4092  000A1A  6FEA               	movwf	(??_f_write+11)& (0+255),b
  4093  000A1C  50DE               	movf	postinc2,w,c
  4094  000A1E  5DE7               	subwf	(??_f_write+8)& (0+255),w,b
  4095  000A20  50DE               	movf	postinc2,w,c
  4096  000A22  59E8               	subwfb	(??_f_write+9)& (0+255),w,b
  4097  000A24  50DE               	movf	postinc2,w,c
  4098  000A26  59E9               	subwfb	(??_f_write+10)& (0+255),w,b
  4099  000A28  50DE               	movf	postinc2,w,c
  4100  000A2A  59EA               	subwfb	(??_f_write+11)& (0+255),w,b
  4101  000A2C  B0D8               	btfsc	status,0,c
  4102  000A2E  D014               	goto	l1493
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;ff.c: 3982: btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
  4106  000A30  EE20 F010          	lfsr	2,16
  4107  000A34  51D7               	movf	f_write@fp& (0+255),w,b
  4108  000A36  26D9               	addwf	fsr2l,f,c
  4109  000A38  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4110  000A3A  22DA               	addwfc	fsr2h,f,c
  4111  000A3C  CFDE F0DF          	movff	postinc2,??_f_write
  4112  000A40  CFDD F0E0          	movff	postdec2,??_f_write+1
  4113  000A44  1FDF               	comf	??_f_write& (0+255),f,b
  4114  000A46  1FE0               	comf	(??_f_write+1)& (0+255),f,b
  4115  000A48  4BDF               	infsnz	??_f_write& (0+255),f,b
  4116  000A4A  2BE0               	incf	(??_f_write+1)& (0+255),f,b
  4117  000A4C  0EFF               	movlw	255
  4118  000A4E  25DF               	addwf	??_f_write& (0+255),w,b
  4119  000A50  6FDB               	movwf	f_write@btw& (0+255),b
  4120  000A52  0EFF               	movlw	255
  4121  000A54  21E0               	addwfc	(??_f_write+1)& (0+255),w,b
  4122  000A56  6FDC               	movwf	(f_write@btw+1)& (0+255),b
  4123  000A58                     l1493:
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;ff.c: 3983: }
  4127                           ;ff.c: 3985: for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt,
      +                           fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
  4128                           
  4129                           ; BSR set to: 0
  4130  000A58  51DB               	movf	f_write@btw& (0+255),w,b
  4131  000A5A  11DC               	iorwf	(f_write@btw+1)& (0+255),w,b
  4132  000A5C  B4D8               	btfsc	status,2,c
  4133  000A5E  D37D               	goto	u20230
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;ff.c: 3986: if (fp->fptr % ((UINT)512) == 0) {
  4137                           
  4138                           ; BSR set to: 0
  4139                           
  4140                           ; BSR set to: 0
  4141  000A60  EE20 F010          	lfsr	2,16
  4142  000A64  51D7               	movf	f_write@fp& (0+255),w,b
  4143  000A66  26D9               	addwf	fsr2l,f,c
  4144  000A68  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4145  000A6A  22DA               	addwfc	fsr2h,f,c
  4146  000A6C  0EFF               	movlw	255
  4147  000A6E  14DE               	andwf	postinc2,w,c
  4148  000A70  6FDF               	movwf	??_f_write& (0+255),b
  4149  000A72  0E01               	movlw	1
  4150  000A74  14DE               	andwf	postinc2,w,c
  4151  000A76  6FE0               	movwf	(??_f_write+1)& (0+255),b
  4152  000A78  0E00               	movlw	0
  4153  000A7A  14DE               	andwf	postinc2,w,c
  4154  000A7C  6FE1               	movwf	(??_f_write+2)& (0+255),b
  4155  000A7E  0E00               	movlw	0
  4156  000A80  14DE               	andwf	postinc2,w,c
  4157  000A82  6FE2               	movwf	(??_f_write+3)& (0+255),b
  4158  000A84  51DF               	movf	??_f_write& (0+255),w,b
  4159  000A86  11E0               	iorwf	(??_f_write+1)& (0+255),w,b
  4160  000A88  11E1               	iorwf	(??_f_write+2)& (0+255),w,b
  4161  000A8A  11E2               	iorwf	(??_f_write+3)& (0+255),w,b
  4162  000A8C  A4D8               	btfss	status,2,c
  4163  000A8E  D289               	goto	l1498
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;ff.c: 3987: csect = (UINT)(fp->fptr / ((UINT)512)) & (fs->csize - 1);
  4167  000A90  EE20 F010          	lfsr	2,16
  4168  000A94  51D7               	movf	f_write@fp& (0+255),w,b
  4169  000A96  26D9               	addwf	fsr2l,f,c
  4170  000A98  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4171  000A9A  22DA               	addwfc	fsr2h,f,c
  4172  000A9C  CFDE F0DF          	movff	postinc2,??_f_write
  4173  000AA0  CFDE F0E0          	movff	postinc2,??_f_write+1
  4174  000AA4  CFDE F0E1          	movff	postinc2,??_f_write+2
  4175  000AA8  CFDE F0E2          	movff	postinc2,??_f_write+3
  4176  000AAC  0E0A               	movlw	10
  4177  000AAE  D005               	goto	u20000
  4178  000AB0                     u20005:
  4179  000AB0  90D8               	bcf	status,0,c
  4180  000AB2  33E2               	rrcf	(??_f_write+3)& (0+255),f,b
  4181  000AB4  33E1               	rrcf	(??_f_write+2)& (0+255),f,b
  4182  000AB6  33E0               	rrcf	(??_f_write+1)& (0+255),f,b
  4183  000AB8  33DF               	rrcf	??_f_write& (0+255),f,b
  4184  000ABA                     u20000:
  4185  000ABA  2EE8               	decfsz	wreg,f,c
  4186  000ABC  D7F9               	goto	u20005
  4187  000ABE  0EFF               	movlw	255
  4188  000AC0  6FE3               	movwf	(??_f_write+4)& (0+255),b
  4189  000AC2  0EFF               	movlw	255
  4190  000AC4  6FE4               	movwf	(??_f_write+5)& (0+255),b
  4191  000AC6  0101               	movlb	1	; () banked
  4192  000AC8  EE20 F009          	lfsr	2,9
  4193  000ACC  5188               	movf	f_write@fs& (0+255),w,b
  4194  000ACE  26D9               	addwf	fsr2l,f,c
  4195  000AD0  5189               	movf	(f_write@fs+1)& (0+255),w,b
  4196  000AD2  22DA               	addwfc	fsr2h,f,c
  4197  000AD4  CFDE F0E5          	movff	postinc2,??_f_write+6
  4198  000AD8  CFDD F0E6          	movff	postdec2,??_f_write+7
  4199  000ADC  0100               	movlb	0	; () banked
  4200  000ADE  51E3               	movf	(??_f_write+4)& (0+255),w,b
  4201  000AE0  27E5               	addwf	(??_f_write+6)& (0+255),f,b
  4202  000AE2  51E4               	movf	(??_f_write+5)& (0+255),w,b
  4203  000AE4  23E6               	addwfc	(??_f_write+7)& (0+255),f,b
  4204  000AE6  51DF               	movf	??_f_write& (0+255),w,b
  4205  000AE8  15E5               	andwf	(??_f_write+6)& (0+255),w,b
  4206  000AEA  0101               	movlb	1	; () banked
  4207  000AEC  6F7A               	movwf	f_write@csect& (0+255),b
  4208  000AEE  0100               	movlb	0	; () banked
  4209  000AF0  51E0               	movf	(??_f_write+1)& (0+255),w,b
  4210  000AF2  15E6               	andwf	(??_f_write+7)& (0+255),w,b
  4211  000AF4  0101               	movlb	1	; () banked
  4212  000AF6  6F7B               	movwf	(f_write@csect+1)& (0+255),b
  4213                           
  4214                           ; BSR set to: 1
  4215                           ;ff.c: 3988: if (csect == 0) {
  4216  000AF8  517A               	movf	f_write@csect& (0+255),w,b
  4217  000AFA  117B               	iorwf	(f_write@csect+1)& (0+255),w,b
  4218  000AFC  A4D8               	btfss	status,2,c
  4219  000AFE  D0A5               	goto	l1506
  4220                           
  4221                           ; BSR set to: 1
  4222                           ;ff.c: 3989: if (fp->fptr == 0) {
  4223  000B00  0100               	movlb	0	; () banked
  4224  000B02  EE20 F010          	lfsr	2,16
  4225  000B06  51D7               	movf	f_write@fp& (0+255),w,b
  4226  000B08  26D9               	addwf	fsr2l,f,c
  4227  000B0A  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4228  000B0C  22DA               	addwfc	fsr2h,f,c
  4229  000B0E  50DE               	movf	postinc2,w,c
  4230  000B10  10DE               	iorwf	postinc2,w,c
  4231  000B12  10DE               	iorwf	postinc2,w,c
  4232  000B14  10DE               	iorwf	postinc2,w,c
  4233  000B16  A4D8               	btfss	status,2,c
  4234  000B18  D025               	goto	l1500
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;ff.c: 3990: clst = fp->obj.sclust;
  4238  000B1A  EE20 F006          	lfsr	2,6
  4239  000B1E  51D7               	movf	f_write@fp& (0+255),w,b
  4240  000B20  26D9               	addwf	fsr2l,f,c
  4241  000B22  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4242  000B24  22DA               	addwfc	fsr2h,f,c
  4243  000B26  CFDE F182          	movff	postinc2,f_write@clst
  4244  000B2A  CFDE F183          	movff	postinc2,f_write@clst+1
  4245  000B2E  CFDE F184          	movff	postinc2,f_write@clst+2
  4246  000B32  CFDE F185          	movff	postinc2,f_write@clst+3
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;ff.c: 3991: if (clst == 0) {
  4250  000B36  0101               	movlb	1	; () banked
  4251  000B38  5182               	movf	f_write@clst& (0+255),w,b
  4252  000B3A  1183               	iorwf	(f_write@clst+1)& (0+255),w,b
  4253  000B3C  1184               	iorwf	(f_write@clst+2)& (0+255),w,b
  4254  000B3E  1185               	iorwf	(f_write@clst+3)& (0+255),w,b
  4255  000B40  A4D8               	btfss	status,2,c
  4256  000B42  D02D               	goto	l1502
  4257                           
  4258                           ; BSR set to: 1
  4259                           ;ff.c: 3992: clst = create_chain(&fp->obj, 0);
  4260  000B44  C0D7  F0BA         	movff	f_write@fp,create_chain@obj
  4261  000B48  C0D8  F0BB         	movff	f_write@fp+1,create_chain@obj+1
  4262  000B4C  0E00               	movlw	0
  4263  000B4E  0100               	movlb	0	; () banked
  4264  000B50  6FBC               	movwf	create_chain@clst& (0+255),b
  4265  000B52  0E00               	movlw	0
  4266  000B54  6FBD               	movwf	(create_chain@clst+1)& (0+255),b
  4267  000B56  0E00               	movlw	0
  4268  000B58  6FBE               	movwf	(create_chain@clst+2)& (0+255),b
  4269  000B5A  0E00               	movlw	0
  4270  000B5C  6FBF               	movwf	(create_chain@clst+3)& (0+255),b
  4271  000B5E  EC9C  F00B         	call	_create_chain	;wreg free
  4272  000B62  D015               	goto	L2
  4273  000B64                     l1500:
  4274                           
  4275                           ;ff.c: 4000: {
  4276                           ;ff.c: 4001: clst = create_chain(&fp->obj, fp->clust);
  4277  000B64  C0D7  F0BA         	movff	f_write@fp,create_chain@obj
  4278  000B68  C0D8  F0BB         	movff	f_write@fp+1,create_chain@obj+1
  4279  000B6C  0100               	movlb	0	; () banked
  4280  000B6E  EE20 F014          	lfsr	2,20
  4281  000B72  51D7               	movf	f_write@fp& (0+255),w,b
  4282  000B74  26D9               	addwf	fsr2l,f,c
  4283  000B76  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4284  000B78  22DA               	addwfc	fsr2h,f,c
  4285  000B7A  CFDE F0BC          	movff	postinc2,create_chain@clst
  4286  000B7E  CFDE F0BD          	movff	postinc2,create_chain@clst+1
  4287  000B82  CFDE F0BE          	movff	postinc2,create_chain@clst+2
  4288  000B86  CFDE F0BF          	movff	postinc2,create_chain@clst+3
  4289  000B8A  EC9C  F00B         	call	_create_chain	;wreg free
  4290  000B8E                     L2:
  4291  000B8E  C0BA  F182         	movff	?_create_chain,f_write@clst
  4292  000B92  C0BB  F183         	movff	?_create_chain+1,f_write@clst+1
  4293  000B96  C0BC  F184         	movff	?_create_chain+2,f_write@clst+2
  4294  000B9A  C0BD  F185         	movff	?_create_chain+3,f_write@clst+3
  4295  000B9E                     l1502:
  4296                           
  4297                           ;ff.c: 4002: }
  4298                           ;ff.c: 4003: }
  4299                           ;ff.c: 4004: if (clst == 0) break;
  4300  000B9E  0101               	movlb	1	; () banked
  4301  000BA0  5182               	movf	f_write@clst& (0+255),w,b
  4302  000BA2  1183               	iorwf	(f_write@clst+1)& (0+255),w,b
  4303  000BA4  1184               	iorwf	(f_write@clst+2)& (0+255),w,b
  4304  000BA6  1185               	iorwf	(f_write@clst+3)& (0+255),w,b
  4305  000BA8  B4D8               	btfsc	status,2,c
  4306  000BAA  D2D7               	goto	u20230
  4307                           
  4308                           ; BSR set to: 1
  4309                           ;ff.c: 4005: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  4310                           
  4311                           ; BSR set to: 1
  4312                           
  4313                           ; BSR set to: 1
  4314  000BAC  0582               	decf	f_write@clst& (0+255),w,b
  4315  000BAE  1183               	iorwf	(f_write@clst+1)& (0+255),w,b
  4316  000BB0  1184               	iorwf	(f_write@clst+2)& (0+255),w,b
  4317  000BB2  1185               	iorwf	(f_write@clst+3)& (0+255),w,b
  4318  000BB4  A4D8               	btfss	status,2,c
  4319  000BB6  D00B               	goto	l1504
  4320                           
  4321                           ; BSR set to: 1
  4322  000BB8  0100               	movlb	0	; () banked
  4323  000BBA  EE20 F00F          	lfsr	2,15
  4324  000BBE  51D7               	movf	f_write@fp& (0+255),w,b
  4325  000BC0  26D9               	addwf	fsr2l,f,c
  4326  000BC2  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4327  000BC4  22DA               	addwfc	fsr2h,f,c
  4328  000BC6  0E02               	movlw	2
  4329  000BC8  6EDF               	movwf	indf2,c
  4330                           
  4331                           ; BSR set to: 0
  4332  000BCA  0E02               	movlw	2
  4333                           
  4334                           ; BSR set to: 0
  4335  000BCC  0012               	return	
  4336  000BCE                     l1504:
  4337                           
  4338                           ;ff.c: 4006: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
  4339                           
  4340                           ; BSR set to: 0
  4341  000BCE  0101               	movlb	1	; () banked
  4342  000BD0  2982               	incf	f_write@clst& (0+255),w,b
  4343  000BD2  E112               	bnz	l15034
  4344  000BD4  2983               	incf	(f_write@clst+1)& (0+255),w,b
  4345  000BD6  E110               	bnz	l15034
  4346  000BD8  2984               	incf	(f_write@clst+2)& (0+255),w,b
  4347  000BDA  E10E               	bnz	l15034
  4348  000BDC  2985               	incf	(f_write@clst+3)& (0+255),w,b
  4349  000BDE  A4D8               	btfss	status,2,c
  4350  000BE0  D00B               	goto	l1505
  4351                           
  4352                           ; BSR set to: 1
  4353  000BE2  0100               	movlb	0	; () banked
  4354  000BE4  EE20 F00F          	lfsr	2,15
  4355  000BE8  51D7               	movf	f_write@fp& (0+255),w,b
  4356  000BEA  26D9               	addwf	fsr2l,f,c
  4357  000BEC  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4358  000BEE  22DA               	addwfc	fsr2h,f,c
  4359  000BF0  0E01               	movlw	1
  4360  000BF2  6EDF               	movwf	indf2,c
  4361                           
  4362                           ; BSR set to: 0
  4363  000BF4  0E01               	movlw	1
  4364                           
  4365                           ; BSR set to: 0
  4366  000BF6  0012               	return	
  4367  000BF8                     l1505:
  4368  000BF8                     l15034:
  4369                           
  4370                           ;ff.c: 4007: fp->clust = clst;
  4371  000BF8  0100               	movlb	0	; () banked
  4372  000BFA  EE20 F014          	lfsr	2,20
  4373  000BFE  51D7               	movf	f_write@fp& (0+255),w,b
  4374  000C00  26D9               	addwf	fsr2l,f,c
  4375  000C02  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4376  000C04  22DA               	addwfc	fsr2h,f,c
  4377  000C06  C182  FFDE         	movff	f_write@clst,postinc2
  4378  000C0A  C183  FFDE         	movff	f_write@clst+1,postinc2
  4379  000C0E  C184  FFDE         	movff	f_write@clst+2,postinc2
  4380  000C12  C185  FFDE         	movff	f_write@clst+3,postinc2
  4381                           
  4382                           ;ff.c: 4008: if (fp->obj.sclust == 0) fp->obj.sclust = clst;
  4383  000C16  EE20 F006          	lfsr	2,6
  4384  000C1A  51D7               	movf	f_write@fp& (0+255),w,b
  4385  000C1C  26D9               	addwf	fsr2l,f,c
  4386  000C1E  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4387  000C20  22DA               	addwfc	fsr2h,f,c
  4388  000C22  50DE               	movf	postinc2,w,c
  4389  000C24  10DE               	iorwf	postinc2,w,c
  4390  000C26  10DE               	iorwf	postinc2,w,c
  4391  000C28  10DE               	iorwf	postinc2,w,c
  4392  000C2A  A4D8               	btfss	status,2,c
  4393  000C2C  D00E               	goto	l1506
  4394                           
  4395                           ; BSR set to: 0
  4396  000C2E  EE20 F006          	lfsr	2,6
  4397  000C32  51D7               	movf	f_write@fp& (0+255),w,b
  4398  000C34  26D9               	addwf	fsr2l,f,c
  4399  000C36  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4400  000C38  22DA               	addwfc	fsr2h,f,c
  4401  000C3A  C182  FFDE         	movff	f_write@clst,postinc2
  4402  000C3E  C183  FFDE         	movff	f_write@clst+1,postinc2
  4403  000C42  C184  FFDE         	movff	f_write@clst+2,postinc2
  4404  000C46  C185  FFDE         	movff	f_write@clst+3,postinc2
  4405  000C4A                     l1506:
  4406                           
  4407                           ;ff.c: 4009: }
  4408                           ;ff.c: 4011: if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) { fp->err = (BYTE)
      +                          (FR_DISK_ERR); return FR_DISK_ERR; };
  4409                           
  4410                           ; BSR set to: 0
  4411                           
  4412                           ; BSR set to: 0
  4413  000C4A  0100               	movlb	0	; () banked
  4414  000C4C  EE20 F018          	lfsr	2,24
  4415  000C50  51D7               	movf	f_write@fp& (0+255),w,b
  4416  000C52  26D9               	addwf	fsr2l,f,c
  4417  000C54  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4418  000C56  22DA               	addwfc	fsr2h,f,c
  4419  000C58  0101               	movlb	1	; () banked
  4420  000C5A  EE10 F02B          	lfsr	1,43
  4421  000C5E  5188               	movf	f_write@fs& (0+255),w,b
  4422  000C60  26E1               	addwf	fsr1l,f,c
  4423  000C62  5189               	movf	(f_write@fs+1)& (0+255),w,b
  4424  000C64  22E2               	addwfc	fsr1h,f,c
  4425  000C66  50DE               	movf	postinc2,w,c
  4426  000C68  18E6               	xorwf	postinc1,w,c
  4427  000C6A  E11E               	bnz	l15048
  4428  000C6C  50DE               	movf	postinc2,w,c
  4429  000C6E  18E6               	xorwf	postinc1,w,c
  4430  000C70  E11B               	bnz	l15048
  4431  000C72  50DE               	movf	postinc2,w,c
  4432  000C74  18E6               	xorwf	postinc1,w,c
  4433  000C76  E118               	bnz	l15048
  4434  000C78  50DE               	movf	postinc2,w,c
  4435  000C7A  18E6               	xorwf	postinc1,w,c
  4436  000C7C  A4D8               	btfss	status,2,c
  4437  000C7E  D014               	goto	l1507
  4438                           
  4439                           ; BSR set to: 1
  4440  000C80  C188  F073         	movff	f_write@fs,sync_window@fs
  4441  000C84  C189  F074         	movff	f_write@fs+1,sync_window@fs+1
  4442  000C88  EC36  F01C         	call	_sync_window	;wreg free
  4443  000C8C  0900               	iorlw	0
  4444  000C8E  B4D8               	btfsc	status,2,c
  4445  000C90  D00B               	goto	l1507
  4446  000C92  0100               	movlb	0	; () banked
  4447  000C94  EE20 F00F          	lfsr	2,15
  4448  000C98  51D7               	movf	f_write@fp& (0+255),w,b
  4449  000C9A  26D9               	addwf	fsr2l,f,c
  4450  000C9C  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4451  000C9E  22DA               	addwfc	fsr2h,f,c
  4452  000CA0  0E01               	movlw	1
  4453  000CA2  6EDF               	movwf	indf2,c
  4454                           
  4455                           ; BSR set to: 0
  4456  000CA4  0E01               	movlw	1
  4457                           
  4458                           ; BSR set to: 0
  4459  000CA6  0012               	return	
  4460  000CA8                     l1507:
  4461  000CA8                     l15048:
  4462                           
  4463                           ;ff.c: 4018: sect = clst2sect(fs, fp->clust);
  4464  000CA8  C188  F026         	movff	f_write@fs,clst2sect@fs
  4465  000CAC  C189  F027         	movff	f_write@fs+1,clst2sect@fs+1
  4466  000CB0  0100               	movlb	0	; () banked
  4467  000CB2  EE20 F014          	lfsr	2,20
  4468  000CB6  51D7               	movf	f_write@fp& (0+255),w,b
  4469  000CB8  26D9               	addwf	fsr2l,f,c
  4470  000CBA  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4471  000CBC  22DA               	addwfc	fsr2h,f,c
  4472  000CBE  CFDE F028          	movff	postinc2,clst2sect@clst
  4473  000CC2  CFDE F029          	movff	postinc2,clst2sect@clst+1
  4474  000CC6  CFDE F02A          	movff	postinc2,clst2sect@clst+2
  4475  000CCA  CFDE F02B          	movff	postinc2,clst2sect@clst+3
  4476  000CCE  ECD4  F023         	call	_clst2sect	;wreg free
  4477  000CD2  C026  F17E         	movff	?_clst2sect,f_write@sect
  4478  000CD6  C027  F17F         	movff	?_clst2sect+1,f_write@sect+1
  4479  000CDA  C028  F180         	movff	?_clst2sect+2,f_write@sect+2
  4480  000CDE  C029  F181         	movff	?_clst2sect+3,f_write@sect+3
  4481                           
  4482                           ;ff.c: 4019: if (sect == 0) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  4483  000CE2  0101               	movlb	1	; () banked
  4484  000CE4  517E               	movf	f_write@sect& (0+255),w,b
  4485  000CE6  117F               	iorwf	(f_write@sect+1)& (0+255),w,b
  4486  000CE8  1180               	iorwf	(f_write@sect+2)& (0+255),w,b
  4487  000CEA  1181               	iorwf	(f_write@sect+3)& (0+255),w,b
  4488  000CEC  A4D8               	btfss	status,2,c
  4489  000CEE  D00B               	goto	l1508
  4490                           
  4491                           ; BSR set to: 1
  4492  000CF0  0100               	movlb	0	; () banked
  4493  000CF2  EE20 F00F          	lfsr	2,15
  4494  000CF6  51D7               	movf	f_write@fp& (0+255),w,b
  4495  000CF8  26D9               	addwf	fsr2l,f,c
  4496  000CFA  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4497  000CFC  22DA               	addwfc	fsr2h,f,c
  4498  000CFE  0E02               	movlw	2
  4499  000D00  6EDF               	movwf	indf2,c
  4500                           
  4501                           ; BSR set to: 0
  4502  000D02  0E02               	movlw	2
  4503                           
  4504                           ; BSR set to: 0
  4505  000D04  0012               	return	
  4506  000D06                     l1508:
  4507                           
  4508                           ;ff.c: 4020: sect += csect;
  4509                           
  4510                           ; BSR set to: 0
  4511  000D06  0101               	movlb	1	; () banked
  4512  000D08  517A               	movf	f_write@csect& (0+255),w,b
  4513  000D0A  277E               	addwf	f_write@sect& (0+255),f,b
  4514  000D0C  517B               	movf	(f_write@csect+1)& (0+255),w,b
  4515  000D0E  237F               	addwfc	(f_write@sect+1)& (0+255),f,b
  4516  000D10  0E00               	movlw	0
  4517  000D12  2380               	addwfc	(f_write@sect+2)& (0+255),f,b
  4518  000D14  0E00               	movlw	0
  4519  000D16  2381               	addwfc	(f_write@sect+3)& (0+255),f,b
  4520                           
  4521                           ; BSR set to: 1
  4522                           ;ff.c: 4021: cc = btw / ((UINT)512);
  4523  000D18  C0DB  F0DF         	movff	f_write@btw,??_f_write
  4524  000D1C  C0DC  F0E0         	movff	f_write@btw+1,??_f_write+1
  4525  000D20  0E09               	movlw	9
  4526  000D22  0100               	movlb	0	; () banked
  4527  000D24  6FE1               	movwf	(??_f_write+2)& (0+255),b
  4528  000D26                     u20115:
  4529  000D26  90D8               	bcf	status,0,c
  4530  000D28  33E0               	rrcf	(??_f_write+1)& (0+255),f,b
  4531  000D2A  33DF               	rrcf	??_f_write& (0+255),f,b
  4532  000D2C  2FE1               	decfsz	(??_f_write+2)& (0+255),f,b
  4533  000D2E  D7FB               	goto	u20115
  4534  000D30  C0DF  F17C         	movff	??_f_write,f_write@cc
  4535  000D34  C0E0  F17D         	movff	??_f_write+1,f_write@cc+1
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;ff.c: 4022: if (cc > 0) {
  4539  000D38  0101               	movlb	1	; () banked
  4540  000D3A  517C               	movf	f_write@cc& (0+255),w,b
  4541  000D3C  117D               	iorwf	(f_write@cc+1)& (0+255),w,b
  4542  000D3E  B4D8               	btfsc	status,2,c
  4543  000D40  D0E7               	goto	l1509
  4544                           
  4545                           ; BSR set to: 1
  4546                           ;ff.c: 4023: if (csect + cc > fs->csize) {
  4547  000D42  517C               	movf	f_write@cc& (0+255),w,b
  4548  000D44  257A               	addwf	f_write@csect& (0+255),w,b
  4549  000D46  0100               	movlb	0	; () banked
  4550  000D48  6FDF               	movwf	??_f_write& (0+255),b
  4551  000D4A  0101               	movlb	1	; () banked
  4552  000D4C  517D               	movf	(f_write@cc+1)& (0+255),w,b
  4553  000D4E  217B               	addwfc	(f_write@csect+1)& (0+255),w,b
  4554  000D50  0100               	movlb	0	; () banked
  4555  000D52  6FE0               	movwf	(??_f_write+1)& (0+255),b
  4556  000D54  0101               	movlb	1	; () banked
  4557  000D56  EE20 F009          	lfsr	2,9
  4558  000D5A  5188               	movf	f_write@fs& (0+255),w,b
  4559  000D5C  26D9               	addwf	fsr2l,f,c
  4560  000D5E  5189               	movf	(f_write@fs+1)& (0+255),w,b
  4561  000D60  22DA               	addwfc	fsr2h,f,c
  4562  000D62  0100               	movlb	0	; () banked
  4563  000D64  51DF               	movf	??_f_write& (0+255),w,b
  4564  000D66  5CDE               	subwf	postinc2,w,c
  4565  000D68  51E0               	movf	(??_f_write+1)& (0+255),w,b
  4566  000D6A  58DE               	subwfb	postinc2,w,c
  4567  000D6C  B0D8               	btfsc	status,0,c
  4568  000D6E  D01D               	goto	l1510
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;ff.c: 4024: cc = fs->csize - csect;
  4572  000D70  0101               	movlb	1	; () banked
  4573  000D72  EE20 F009          	lfsr	2,9
  4574  000D76  5188               	movf	f_write@fs& (0+255),w,b
  4575  000D78  26D9               	addwf	fsr2l,f,c
  4576  000D7A  5189               	movf	(f_write@fs+1)& (0+255),w,b
  4577  000D7C  22DA               	addwfc	fsr2h,f,c
  4578  000D7E  CFDE F0DF          	movff	postinc2,??_f_write
  4579  000D82  CFDD F0E0          	movff	postdec2,??_f_write+1
  4580  000D86  C17A  F0E1         	movff	f_write@csect,??_f_write+2
  4581  000D8A  C17B  F0E2         	movff	f_write@csect+1,??_f_write+3
  4582  000D8E  0100               	movlb	0	; () banked
  4583  000D90  1FE1               	comf	(??_f_write+2)& (0+255),f,b
  4584  000D92  1FE2               	comf	(??_f_write+3)& (0+255),f,b
  4585  000D94  4BE1               	infsnz	(??_f_write+2)& (0+255),f,b
  4586  000D96  2BE2               	incf	(??_f_write+3)& (0+255),f,b
  4587  000D98  51DF               	movf	??_f_write& (0+255),w,b
  4588  000D9A  25E1               	addwf	(??_f_write+2)& (0+255),w,b
  4589  000D9C  0101               	movlb	1	; () banked
  4590  000D9E  6F7C               	movwf	f_write@cc& (0+255),b
  4591  000DA0  0100               	movlb	0	; () banked
  4592  000DA2  51E0               	movf	(??_f_write+1)& (0+255),w,b
  4593  000DA4  21E2               	addwfc	(??_f_write+3)& (0+255),w,b
  4594  000DA6  0101               	movlb	1	; () banked
  4595  000DA8  6F7D               	movwf	(f_write@cc+1)& (0+255),b
  4596  000DAA                     l1510:
  4597                           
  4598                           ;ff.c: 4025: }
  4599                           ;ff.c: 4026: if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) { fp->err = (BYTE)(FR_
      +                          DISK_ERR); return FR_DISK_ERR; };
  4600                           
  4601                           ; BSR set to: 1
  4602  000DAA  C178  F068         	movff	f_write@wbuff,disk_write@buff
  4603  000DAE  C179  F069         	movff	f_write@wbuff+1,disk_write@buff+1
  4604  000DB2  C17E  F06A         	movff	f_write@sect,disk_write@sector
  4605  000DB6  C17F  F06B         	movff	f_write@sect+1,disk_write@sector+1
  4606  000DBA  C180  F06C         	movff	f_write@sect+2,disk_write@sector+2
  4607  000DBE  C181  F06D         	movff	f_write@sect+3,disk_write@sector+3
  4608  000DC2  C17C  F06E         	movff	f_write@cc,disk_write@count
  4609  000DC6  0101               	movlb	1	; () banked
  4610  000DC8  EE20 F001          	lfsr	2,1
  4611  000DCC  5188               	movf	f_write@fs& (0+255),w,b
  4612  000DCE  26D9               	addwf	fsr2l,f,c
  4613  000DD0  5189               	movf	(f_write@fs+1)& (0+255),w,b
  4614  000DD2  22DA               	addwfc	fsr2h,f,c
  4615  000DD4  50DF               	movf	indf2,w,c
  4616  000DD6  EC30  F028         	call	_disk_write
  4617  000DDA  0900               	iorlw	0
  4618  000DDC  B4D8               	btfsc	status,2,c
  4619  000DDE  D00B               	goto	l1511
  4620  000DE0  0100               	movlb	0	; () banked
  4621  000DE2  EE20 F00F          	lfsr	2,15
  4622  000DE6  51D7               	movf	f_write@fp& (0+255),w,b
  4623  000DE8  26D9               	addwf	fsr2l,f,c
  4624  000DEA  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4625  000DEC  22DA               	addwfc	fsr2h,f,c
  4626  000DEE  0E01               	movlw	1
  4627  000DF0  6EDF               	movwf	indf2,c
  4628                           
  4629                           ; BSR set to: 0
  4630  000DF2  0E01               	movlw	1
  4631                           
  4632                           ; BSR set to: 0
  4633  000DF4  0012               	return	
  4634  000DF6                     l1511:
  4635                           
  4636                           ;ff.c: 4029: if (fs->winsect - sect < cc) {
  4637                           
  4638                           ; BSR set to: 0
  4639  000DF6  0101               	movlb	1	; () banked
  4640  000DF8  517C               	movf	f_write@cc& (0+255),w,b
  4641  000DFA  0100               	movlb	0	; () banked
  4642  000DFC  6FDF               	movwf	??_f_write& (0+255),b
  4643  000DFE  0101               	movlb	1	; () banked
  4644  000E00  517D               	movf	(f_write@cc+1)& (0+255),w,b
  4645  000E02  0100               	movlb	0	; () banked
  4646  000E04  6FE0               	movwf	(??_f_write+1)& (0+255),b
  4647  000E06  6BE1               	clrf	(??_f_write+2)& (0+255),b
  4648  000E08  6BE2               	clrf	(??_f_write+3)& (0+255),b
  4649  000E0A  0101               	movlb	1	; () banked
  4650  000E0C  EE20 F02B          	lfsr	2,43
  4651  000E10  5188               	movf	f_write@fs& (0+255),w,b
  4652  000E12  26D9               	addwf	fsr2l,f,c
  4653  000E14  5189               	movf	(f_write@fs+1)& (0+255),w,b
  4654  000E16  22DA               	addwfc	fsr2h,f,c
  4655  000E18  CFDE F0E3          	movff	postinc2,??_f_write+4
  4656  000E1C  CFDE F0E4          	movff	postinc2,??_f_write+5
  4657  000E20  CFDE F0E5          	movff	postinc2,??_f_write+6
  4658  000E24  CFDE F0E6          	movff	postinc2,??_f_write+7
  4659  000E28  C17E  F0E7         	movff	f_write@sect,??_f_write+8
  4660  000E2C  C17F  F0E8         	movff	f_write@sect+1,??_f_write+9
  4661  000E30  C180  F0E9         	movff	f_write@sect+2,??_f_write+10
  4662  000E34  C181  F0EA         	movff	f_write@sect+3,??_f_write+11
  4663  000E38  0100               	movlb	0	; () banked
  4664  000E3A  1FE7               	comf	(??_f_write+8)& (0+255),f,b
  4665  000E3C  1FE8               	comf	(??_f_write+9)& (0+255),f,b
  4666  000E3E  1FE9               	comf	(??_f_write+10)& (0+255),f,b
  4667  000E40  1FEA               	comf	(??_f_write+11)& (0+255),f,b
  4668  000E42  2BE7               	incf	(??_f_write+8)& (0+255),f,b
  4669  000E44  0E00               	movlw	0
  4670  000E46  23E8               	addwfc	(??_f_write+9)& (0+255),f,b
  4671  000E48  23E9               	addwfc	(??_f_write+10)& (0+255),f,b
  4672  000E4A  23EA               	addwfc	(??_f_write+11)& (0+255),f,b
  4673  000E4C  51E3               	movf	(??_f_write+4)& (0+255),w,b
  4674  000E4E  25E7               	addwf	(??_f_write+8)& (0+255),w,b
  4675  000E50  6FEB               	movwf	(??_f_write+12)& (0+255),b
  4676  000E52  51E4               	movf	(??_f_write+5)& (0+255),w,b
  4677  000E54  21E8               	addwfc	(??_f_write+9)& (0+255),w,b
  4678  000E56  6FEC               	movwf	(??_f_write+13)& (0+255),b
  4679  000E58  51E5               	movf	(??_f_write+6)& (0+255),w,b
  4680  000E5A  21E9               	addwfc	(??_f_write+10)& (0+255),w,b
  4681  000E5C  6FED               	movwf	(??_f_write+14)& (0+255),b
  4682  000E5E  51E6               	movf	(??_f_write+7)& (0+255),w,b
  4683  000E60  21EA               	addwfc	(??_f_write+11)& (0+255),w,b
  4684  000E62  6FEE               	movwf	(??_f_write+15)& (0+255),b
  4685  000E64  51DF               	movf	??_f_write& (0+255),w,b
  4686  000E66  5DEB               	subwf	(??_f_write+12)& (0+255),w,b
  4687  000E68  51E0               	movf	(??_f_write+1)& (0+255),w,b
  4688  000E6A  59EC               	subwfb	(??_f_write+13)& (0+255),w,b
  4689  000E6C  51E1               	movf	(??_f_write+2)& (0+255),w,b
  4690  000E6E  59ED               	subwfb	(??_f_write+14)& (0+255),w,b
  4691  000E70  51E2               	movf	(??_f_write+3)& (0+255),w,b
  4692  000E72  59EE               	subwfb	(??_f_write+15)& (0+255),w,b
  4693  000E74  B0D8               	btfsc	status,0,c
  4694  000E76  D03C               	goto	l1512
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;ff.c: 4030: memcpy(fs->win, wbuff + ((fs->winsect - sect) * ((UINT)512)), ((UINT)512));
  4698  000E78  0E2F               	movlw	47
  4699  000E7A  0101               	movlb	1	; () banked
  4700  000E7C  2588               	addwf	f_write@fs& (0+255),w,b
  4701  000E7E  6E1A               	movwf	memcpy@d1,c
  4702  000E80  0E00               	movlw	0
  4703  000E82  2189               	addwfc	(f_write@fs+1)& (0+255),w,b
  4704  000E84  6E1B               	movwf	memcpy@d1+1,c
  4705  000E86  EE20 F02B          	lfsr	2,43
  4706  000E8A  5188               	movf	f_write@fs& (0+255),w,b
  4707  000E8C  26D9               	addwf	fsr2l,f,c
  4708  000E8E  5189               	movf	(f_write@fs+1)& (0+255),w,b
  4709  000E90  22DA               	addwfc	fsr2h,f,c
  4710  000E92  CFDE F0DF          	movff	postinc2,??_f_write
  4711  000E96  CFDD F0E0          	movff	postdec2,??_f_write+1
  4712  000E9A  C17E  F0E1         	movff	f_write@sect,??_f_write+2
  4713  000E9E  C17F  F0E2         	movff	f_write@sect+1,??_f_write+3
  4714  000EA2  0100               	movlb	0	; () banked
  4715  000EA4  1FE1               	comf	(??_f_write+2)& (0+255),f,b
  4716  000EA6  1FE2               	comf	(??_f_write+3)& (0+255),f,b
  4717  000EA8  4BE1               	infsnz	(??_f_write+2)& (0+255),f,b
  4718  000EAA  2BE2               	incf	(??_f_write+3)& (0+255),f,b
  4719  000EAC  51DF               	movf	??_f_write& (0+255),w,b
  4720  000EAE  27E1               	addwf	(??_f_write+2)& (0+255),f,b
  4721  000EB0  51E0               	movf	(??_f_write+1)& (0+255),w,b
  4722  000EB2  23E2               	addwfc	(??_f_write+3)& (0+255),f,b
  4723  000EB4  0E09               	movlw	9
  4724  000EB6                     u20165:
  4725  000EB6  90D8               	bcf	status,0,c
  4726  000EB8  37E1               	rlcf	(??_f_write+2)& (0+255),f,b
  4727  000EBA  37E2               	rlcf	(??_f_write+3)& (0+255),f,b
  4728  000EBC  2EE8               	decfsz	wreg,f,c
  4729  000EBE  D7FB               	goto	u20165
  4730  000EC0  51E1               	movf	(??_f_write+2)& (0+255),w,b
  4731  000EC2  0101               	movlb	1	; () banked
  4732  000EC4  2578               	addwf	f_write@wbuff& (0+255),w,b
  4733  000EC6  6E1C               	movwf	memcpy@s1,c
  4734  000EC8  0100               	movlb	0	; () banked
  4735  000ECA  51E2               	movf	(??_f_write+3)& (0+255),w,b
  4736  000ECC  0101               	movlb	1	; () banked
  4737  000ECE  2179               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  4738  000ED0  6E1D               	movwf	memcpy@s1+1,c
  4739  000ED2  0E02               	movlw	2
  4740  000ED4  6E1F               	movwf	memcpy@n+1,c
  4741  000ED6  0E00               	movlw	0
  4742  000ED8  6E1E               	movwf	memcpy@n,c
  4743  000EDA  EC9C  F02A         	call	_memcpy	;wreg free
  4744                           
  4745                           ;ff.c: 4031: fs->wflag = 0;
  4746  000EDE  0101               	movlb	1	; () banked
  4747  000EE0  EE20 F003          	lfsr	2,3
  4748  000EE4  5188               	movf	f_write@fs& (0+255),w,b
  4749  000EE6  26D9               	addwf	fsr2l,f,c
  4750  000EE8  5189               	movf	(f_write@fs+1)& (0+255),w,b
  4751  000EEA  22DA               	addwfc	fsr2h,f,c
  4752  000EEC  0E00               	movlw	0
  4753  000EEE  6EDF               	movwf	indf2,c
  4754  000EF0                     l1512:
  4755                           
  4756                           ;ff.c: 4032: }
  4757                           ;ff.c: 4040: wcnt = ((UINT)512) * cc;
  4758                           
  4759                           ; BSR set to: 1
  4760  000EF0  C17C  F0DF         	movff	f_write@cc,??_f_write
  4761  000EF4  C17D  F0E0         	movff	f_write@cc+1,??_f_write+1
  4762  000EF8  0E09               	movlw	9
  4763  000EFA                     u20175:
  4764  000EFA  90D8               	bcf	status,0,c
  4765  000EFC  0100               	movlb	0	; () banked
  4766  000EFE  37DF               	rlcf	??_f_write& (0+255),f,b
  4767  000F00  37E0               	rlcf	(??_f_write+1)& (0+255),f,b
  4768  000F02  2EE8               	decfsz	wreg,f,c
  4769  000F04  D7FA               	goto	u20175
  4770  000F06  C0DF  F186         	movff	??_f_write,f_write@wcnt
  4771  000F0A  C0E0  F187         	movff	??_f_write+1,f_write@wcnt+1
  4772                           
  4773                           ;ff.c: 4041: continue;
  4774  000F0E  D0CA               	goto	l1513
  4775  000F10                     l1509:
  4776                           
  4777                           ;ff.c: 4042: }
  4778                           ;ff.c: 4044: if (fp->fptr >= fp->obj.objsize) {
  4779                           
  4780                           ; BSR set to: 0
  4781  000F10  0100               	movlb	0	; () banked
  4782  000F12  EE20 F00A          	lfsr	2,10
  4783  000F16  51D7               	movf	f_write@fp& (0+255),w,b
  4784  000F18  26D9               	addwf	fsr2l,f,c
  4785  000F1A  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4786  000F1C  22DA               	addwfc	fsr2h,f,c
  4787  000F1E  EE10 F010          	lfsr	1,16
  4788  000F22  51D7               	movf	f_write@fp& (0+255),w,b
  4789  000F24  26E1               	addwf	fsr1l,f,c
  4790  000F26  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4791  000F28  22E2               	addwfc	fsr1h,f,c
  4792  000F2A  50DE               	movf	postinc2,w,c
  4793  000F2C  5CE6               	subwf	postinc1,w,c
  4794  000F2E  50DE               	movf	postinc2,w,c
  4795  000F30  58E6               	subwfb	postinc1,w,c
  4796  000F32  50DE               	movf	postinc2,w,c
  4797  000F34  58E6               	subwfb	postinc1,w,c
  4798  000F36  50DE               	movf	postinc2,w,c
  4799  000F38  58E6               	subwfb	postinc1,w,c
  4800  000F3A  A0D8               	btfss	status,0,c
  4801  000F3C  D023               	goto	l1514
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;ff.c: 4045: if (sync_window(fs) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DI
      +                          SK_ERR; };
  4805  000F3E  C188  F073         	movff	f_write@fs,sync_window@fs
  4806  000F42  C189  F074         	movff	f_write@fs+1,sync_window@fs+1
  4807  000F46  EC36  F01C         	call	_sync_window	;wreg free
  4808  000F4A  0900               	iorlw	0
  4809  000F4C  B4D8               	btfsc	status,2,c
  4810  000F4E  D00B               	goto	l1515
  4811  000F50  0100               	movlb	0	; () banked
  4812  000F52  EE20 F00F          	lfsr	2,15
  4813  000F56  51D7               	movf	f_write@fp& (0+255),w,b
  4814  000F58  26D9               	addwf	fsr2l,f,c
  4815  000F5A  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4816  000F5C  22DA               	addwfc	fsr2h,f,c
  4817  000F5E  0E01               	movlw	1
  4818  000F60  6EDF               	movwf	indf2,c
  4819                           
  4820                           ; BSR set to: 0
  4821  000F62  0E01               	movlw	1
  4822                           
  4823                           ; BSR set to: 0
  4824  000F64  0012               	return	
  4825  000F66                     l1515:
  4826                           
  4827                           ;ff.c: 4046: fs->winsect = sect;
  4828                           
  4829                           ; BSR set to: 0
  4830  000F66  0101               	movlb	1	; () banked
  4831  000F68  EE20 F02B          	lfsr	2,43
  4832  000F6C  5188               	movf	f_write@fs& (0+255),w,b
  4833  000F6E  26D9               	addwf	fsr2l,f,c
  4834  000F70  5189               	movf	(f_write@fs+1)& (0+255),w,b
  4835  000F72  22DA               	addwfc	fsr2h,f,c
  4836  000F74  C17E  FFDE         	movff	f_write@sect,postinc2
  4837  000F78  C17F  FFDE         	movff	f_write@sect+1,postinc2
  4838  000F7C  C180  FFDE         	movff	f_write@sect+2,postinc2
  4839  000F80  C181  FFDE         	movff	f_write@sect+3,postinc2
  4840  000F84                     l1514:
  4841                           
  4842                           ;ff.c: 4047: }
  4843                           ;ff.c: 4055: fp->sect = sect;
  4844  000F84  0100               	movlb	0	; () banked
  4845  000F86  EE20 F018          	lfsr	2,24
  4846  000F8A  51D7               	movf	f_write@fp& (0+255),w,b
  4847  000F8C  26D9               	addwf	fsr2l,f,c
  4848  000F8E  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4849  000F90  22DA               	addwfc	fsr2h,f,c
  4850  000F92  C17E  FFDE         	movff	f_write@sect,postinc2
  4851  000F96  C17F  FFDE         	movff	f_write@sect+1,postinc2
  4852  000F9A  C180  FFDE         	movff	f_write@sect+2,postinc2
  4853  000F9E  C181  FFDE         	movff	f_write@sect+3,postinc2
  4854  000FA2                     l1498:
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;ff.c: 4056: }
  4858                           ;ff.c: 4057: wcnt = ((UINT)512) - (UINT)fp->fptr % ((UINT)512);
  4859  000FA2  0EFF               	movlw	255
  4860  000FA4  6FDF               	movwf	??_f_write& (0+255),b
  4861  000FA6  0E01               	movlw	1
  4862  000FA8  6FE0               	movwf	(??_f_write+1)& (0+255),b
  4863  000FAA  EE20 F010          	lfsr	2,16
  4864  000FAE  51D7               	movf	f_write@fp& (0+255),w,b
  4865  000FB0  26D9               	addwf	fsr2l,f,c
  4866  000FB2  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4867  000FB4  22DA               	addwfc	fsr2h,f,c
  4868  000FB6  CFDE F0E1          	movff	postinc2,??_f_write+2
  4869  000FBA  CFDD F0E2          	movff	postdec2,??_f_write+3
  4870  000FBE  51DF               	movf	??_f_write& (0+255),w,b
  4871  000FC0  17E1               	andwf	(??_f_write+2)& (0+255),f,b
  4872  000FC2  51E0               	movf	(??_f_write+1)& (0+255),w,b
  4873  000FC4  17E2               	andwf	(??_f_write+3)& (0+255),f,b
  4874  000FC6  1FE1               	comf	(??_f_write+2)& (0+255),f,b
  4875  000FC8  1FE2               	comf	(??_f_write+3)& (0+255),f,b
  4876  000FCA  4BE1               	infsnz	(??_f_write+2)& (0+255),f,b
  4877  000FCC  2BE2               	incf	(??_f_write+3)& (0+255),f,b
  4878  000FCE  0E00               	movlw	0
  4879  000FD0  25E1               	addwf	(??_f_write+2)& (0+255),w,b
  4880  000FD2  0101               	movlb	1	; () banked
  4881  000FD4  6F86               	movwf	f_write@wcnt& (0+255),b
  4882  000FD6  0E02               	movlw	2
  4883  000FD8  0100               	movlb	0	; () banked
  4884  000FDA  21E2               	addwfc	(??_f_write+3)& (0+255),w,b
  4885  000FDC  0101               	movlb	1	; () banked
  4886  000FDE  6F87               	movwf	(f_write@wcnt+1)& (0+255),b
  4887                           
  4888                           ; BSR set to: 1
  4889                           ;ff.c: 4058: if (wcnt > btw) wcnt = btw;
  4890  000FE0  5186               	movf	f_write@wcnt& (0+255),w,b
  4891  000FE2  0100               	movlb	0	; () banked
  4892  000FE4  5DDB               	subwf	f_write@btw& (0+255),w,b
  4893  000FE6  0101               	movlb	1	; () banked
  4894  000FE8  5187               	movf	(f_write@wcnt+1)& (0+255),w,b
  4895  000FEA  0100               	movlb	0	; () banked
  4896  000FEC  59DC               	subwfb	(f_write@btw+1)& (0+255),w,b
  4897  000FEE  B0D8               	btfsc	status,0,c
  4898  000FF0  D004               	goto	l1516
  4899                           
  4900                           ; BSR set to: 0
  4901  000FF2  C0DB  F186         	movff	f_write@btw,f_write@wcnt
  4902  000FF6  C0DC  F187         	movff	f_write@btw+1,f_write@wcnt+1
  4903  000FFA                     l1516:
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;ff.c: 4060: if (move_window(fs, fp->sect) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); re
      +                          turn FR_DISK_ERR; };
  4907                           
  4908                           ; BSR set to: 0
  4909  000FFA  C188  F090         	movff	f_write@fs,move_window@fs
  4910  000FFE  C189  F091         	movff	f_write@fs+1,move_window@fs+1
  4911  001002  EE20 F018          	lfsr	2,24
  4912  001006  51D7               	movf	f_write@fp& (0+255),w,b
  4913  001008  26D9               	addwf	fsr2l,f,c
  4914  00100A  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4915  00100C  22DA               	addwfc	fsr2h,f,c
  4916  00100E  CFDE F092          	movff	postinc2,move_window@sect
  4917  001012  CFDE F093          	movff	postinc2,move_window@sect+1
  4918  001016  CFDE F094          	movff	postinc2,move_window@sect+2
  4919  00101A  CFDE F095          	movff	postinc2,move_window@sect+3
  4920  00101E  EC09  F026         	call	_move_window	;wreg free
  4921  001022  0900               	iorlw	0
  4922  001024  B4D8               	btfsc	status,2,c
  4923  001026  D00B               	goto	l1517
  4924  001028  0100               	movlb	0	; () banked
  4925  00102A  EE20 F00F          	lfsr	2,15
  4926  00102E  51D7               	movf	f_write@fp& (0+255),w,b
  4927  001030  26D9               	addwf	fsr2l,f,c
  4928  001032  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4929  001034  22DA               	addwfc	fsr2h,f,c
  4930  001036  0E01               	movlw	1
  4931  001038  6EDF               	movwf	indf2,c
  4932                           
  4933                           ; BSR set to: 0
  4934  00103A  0E01               	movlw	1
  4935                           
  4936                           ; BSR set to: 0
  4937  00103C  0012               	return	
  4938  00103E                     l1517:
  4939                           
  4940                           ;ff.c: 4061: memcpy(fs->win + fp->fptr % ((UINT)512), wbuff, wcnt);
  4941                           
  4942                           ; BSR set to: 0
  4943  00103E  0EFF               	movlw	255
  4944  001040  0100               	movlb	0	; () banked
  4945  001042  6FDF               	movwf	??_f_write& (0+255),b
  4946  001044  0E01               	movlw	1
  4947  001046  6FE0               	movwf	(??_f_write+1)& (0+255),b
  4948  001048  EE20 F010          	lfsr	2,16
  4949  00104C  51D7               	movf	f_write@fp& (0+255),w,b
  4950  00104E  26D9               	addwf	fsr2l,f,c
  4951  001050  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  4952  001052  22DA               	addwfc	fsr2h,f,c
  4953  001054  CFDE F0E1          	movff	postinc2,??_f_write+2
  4954  001058  CFDD F0E2          	movff	postdec2,??_f_write+3
  4955  00105C  51DF               	movf	??_f_write& (0+255),w,b
  4956  00105E  17E1               	andwf	(??_f_write+2)& (0+255),f,b
  4957  001060  51E0               	movf	(??_f_write+1)& (0+255),w,b
  4958  001062  17E2               	andwf	(??_f_write+3)& (0+255),f,b
  4959  001064  0E2F               	movlw	47
  4960  001066  27E1               	addwf	(??_f_write+2)& (0+255),f,b
  4961  001068  0E00               	movlw	0
  4962  00106A  23E2               	addwfc	(??_f_write+3)& (0+255),f,b
  4963  00106C  51E1               	movf	(??_f_write+2)& (0+255),w,b
  4964  00106E  0101               	movlb	1	; () banked
  4965  001070  2588               	addwf	f_write@fs& (0+255),w,b
  4966  001072  6E1A               	movwf	memcpy@d1,c
  4967  001074  0100               	movlb	0	; () banked
  4968  001076  51E2               	movf	(??_f_write+3)& (0+255),w,b
  4969  001078  0101               	movlb	1	; () banked
  4970  00107A  2189               	addwfc	(f_write@fs+1)& (0+255),w,b
  4971  00107C  6E1B               	movwf	memcpy@d1+1,c
  4972  00107E  C178  F01C         	movff	f_write@wbuff,memcpy@s1
  4973  001082  C179  F01D         	movff	f_write@wbuff+1,memcpy@s1+1
  4974  001086  C186  F01E         	movff	f_write@wcnt,memcpy@n
  4975  00108A  C187  F01F         	movff	f_write@wcnt+1,memcpy@n+1
  4976  00108E  EC9C  F02A         	call	_memcpy	;wreg free
  4977                           
  4978                           ;ff.c: 4062: fs->wflag = 1;
  4979  001092  0101               	movlb	1	; () banked
  4980  001094  EE20 F003          	lfsr	2,3
  4981  001098  5188               	movf	f_write@fs& (0+255),w,b
  4982  00109A  26D9               	addwf	fsr2l,f,c
  4983  00109C  5189               	movf	(f_write@fs+1)& (0+255),w,b
  4984  00109E  22DA               	addwfc	fsr2h,f,c
  4985  0010A0  0E01               	movlw	1
  4986  0010A2  6EDF               	movwf	indf2,c
  4987  0010A4                     l1513:
  4988                           
  4989                           ; BSR set to: 1
  4990  0010A4  0101               	movlb	1	; () banked
  4991  0010A6  5186               	movf	f_write@wcnt& (0+255),w,b
  4992  0010A8  0100               	movlb	0	; () banked
  4993  0010AA  5FDB               	subwf	f_write@btw& (0+255),f,b
  4994  0010AC  0101               	movlb	1	; () banked
  4995  0010AE  5187               	movf	(f_write@wcnt+1)& (0+255),w,b
  4996  0010B0  0100               	movlb	0	; () banked
  4997  0010B2  5BDC               	subwfb	(f_write@btw+1)& (0+255),f,b
  4998                           
  4999                           ; BSR set to: 0
  5000  0010B4  C0DD  FFD9         	movff	f_write@bw,fsr2l
  5001  0010B8  C0DE  FFDA         	movff	f_write@bw+1,fsr2h
  5002  0010BC  0101               	movlb	1	; () banked
  5003  0010BE  5186               	movf	f_write@wcnt& (0+255),w,b
  5004  0010C0  26DE               	addwf	postinc2,f,c
  5005  0010C2  5187               	movf	(f_write@wcnt+1)& (0+255),w,b
  5006  0010C4  22DD               	addwfc	postdec2,f,c
  5007                           
  5008                           ; BSR set to: 1
  5009  0010C6  5186               	movf	f_write@wcnt& (0+255),w,b
  5010  0010C8  2778               	addwf	f_write@wbuff& (0+255),f,b
  5011  0010CA  5187               	movf	(f_write@wcnt+1)& (0+255),w,b
  5012  0010CC  2379               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  5013                           
  5014                           ; BSR set to: 1
  5015  0010CE  0100               	movlb	0	; () banked
  5016  0010D0  EE20 F010          	lfsr	2,16
  5017  0010D4  51D7               	movf	f_write@fp& (0+255),w,b
  5018  0010D6  26D9               	addwf	fsr2l,f,c
  5019  0010D8  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  5020  0010DA  22DA               	addwfc	fsr2h,f,c
  5021  0010DC  0101               	movlb	1	; () banked
  5022  0010DE  5186               	movf	f_write@wcnt& (0+255),w,b
  5023  0010E0  26DE               	addwf	postinc2,f,c
  5024  0010E2  5187               	movf	(f_write@wcnt+1)& (0+255),w,b
  5025  0010E4  22DE               	addwfc	postinc2,f,c
  5026  0010E6  0E00               	movlw	0
  5027  0010E8  22DE               	addwfc	postinc2,f,c
  5028  0010EA  22DE               	addwfc	postinc2,f,c
  5029                           
  5030                           ; BSR set to: 1
  5031  0010EC  0100               	movlb	0	; () banked
  5032  0010EE  EE20 F010          	lfsr	2,16
  5033  0010F2  51D7               	movf	f_write@fp& (0+255),w,b
  5034  0010F4  26D9               	addwf	fsr2l,f,c
  5035  0010F6  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  5036  0010F8  22DA               	addwfc	fsr2h,f,c
  5037  0010FA  EE10 F00A          	lfsr	1,10
  5038  0010FE  51D7               	movf	f_write@fp& (0+255),w,b
  5039  001100  26E1               	addwf	fsr1l,f,c
  5040  001102  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  5041  001104  22E2               	addwfc	fsr1h,f,c
  5042  001106  50DE               	movf	postinc2,w,c
  5043  001108  5CE6               	subwf	postinc1,w,c
  5044  00110A  50DE               	movf	postinc2,w,c
  5045  00110C  58E6               	subwfb	postinc1,w,c
  5046  00110E  50DE               	movf	postinc2,w,c
  5047  001110  58E6               	subwfb	postinc1,w,c
  5048  001112  50DE               	movf	postinc2,w,c
  5049  001114  58E6               	subwfb	postinc1,w,c
  5050  001116  A0D8               	btfss	status,0,c
  5051  001118  D003               	goto	l1519
  5052                           
  5053                           ; BSR set to: 0
  5054  00111A  EE20 F00A          	lfsr	2,10
  5055  00111E  D002               	goto	L1
  5056  001120                     l1519:
  5057                           
  5058                           ; BSR set to: 0
  5059                           
  5060                           ; BSR set to: 0
  5061  001120  EE20 F010          	lfsr	2,16
  5062  001124                     L1:
  5063  001124  51D7               	movf	f_write@fp& (0+255),w,b
  5064  001126  26D9               	addwf	fsr2l,f,c
  5065  001128  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  5066  00112A  22DA               	addwfc	fsr2h,f,c
  5067  00112C  CFDE F173          	movff	postinc2,_f_write$3365
  5068  001130  CFDE F174          	movff	postinc2,_f_write$3365+1
  5069  001134  CFDE F175          	movff	postinc2,_f_write$3365+2
  5070  001138  CFDE F176          	movff	postinc2,_f_write$3365+3
  5071                           
  5072                           ; BSR set to: 0
  5073  00113C  EE20 F00A          	lfsr	2,10
  5074  001140  51D7               	movf	f_write@fp& (0+255),w,b
  5075  001142  26D9               	addwf	fsr2l,f,c
  5076  001144  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  5077  001146  22DA               	addwfc	fsr2h,f,c
  5078  001148  C173  FFDE         	movff	_f_write$3365,postinc2
  5079  00114C  C174  FFDE         	movff	_f_write$3365+1,postinc2
  5080  001150  C175  FFDE         	movff	_f_write$3365+2,postinc2
  5081  001154  C176  FFDE         	movff	_f_write$3365+3,postinc2
  5082  001158  D47F               	goto	l1493
  5083  00115A                     u20230:
  5084                           
  5085                           ;ff.c: 4067: }
  5086                           ;ff.c: 4069: fp->flag |= 0x40;
  5087                           
  5088                           ; BSR set to: 0
  5089  00115A  0100               	movlb	0	; () banked
  5090  00115C  EE20 F00E          	lfsr	2,14
  5091  001160  51D7               	movf	f_write@fp& (0+255),w,b
  5092  001162  26D9               	addwf	fsr2l,f,c
  5093  001164  51D8               	movf	(f_write@fp+1)& (0+255),w,b
  5094  001166  22DA               	addwfc	fsr2h,f,c
  5095  001168  0E00               	movlw	0
  5096  00116A  8CDB               	bsf	plusw2,6,c
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;ff.c: 4071: return FR_OK;
  5100  00116C  0E00               	movlw	0
  5101  00116E  0012               	return	
  5102  001170                     __end_of_f_write:
  5103                           	opt stack 0
  5104                           tosu	equ	0xFFF
  5105                           tosh	equ	0xFFE
  5106                           tosl	equ	0xFFD
  5107                           pclath	equ	0xFFA
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           prodh	equ	0xFF4
  5113                           prodl	equ	0xFF3
  5114                           intcon	equ	0xFF2
  5115                           intcon2	equ	0xFF1
  5116                           intcon3	equ	0xFF0
  5117                           postinc0	equ	0xFEE
  5118                           wreg	equ	0xFE8
  5119                           postinc1	equ	0xFE6
  5120                           postdec1	equ	0xFE5
  5121                           fsr1h	equ	0xFE2
  5122                           fsr1l	equ	0xFE1
  5123                           indf2	equ	0xFDF
  5124                           postinc2	equ	0xFDE
  5125                           postdec2	equ	0xFDD
  5126                           plusw2	equ	0xFDB
  5127                           fsr2h	equ	0xFDA
  5128                           fsr2l	equ	0xFD9
  5129                           status	equ	0xFD8
  5130                           
  5131 ;; *************** function _f_open *****************
  5132 ;; Defined at:
  5133 ;;		line 3663 in file "bibliotecas/ff.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;  fp              2   12[BANK1 ] PTR struct .
  5136 ;;		 -> SDCard@fil(34), 
  5137 ;;  path            2   14[BANK1 ] PTR const unsigned char 
  5138 ;;		 -> STR_12(7), STR_10(1), 
  5139 ;;  mode            1   16[BANK1 ] unsigned char 
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;  dj             40   54[BANK1 ] struct .
  5142 ;;  clst            4   47[BANK1 ] unsigned long 
  5143 ;;  ofs             4   43[BANK1 ] unsigned long 
  5144 ;;  sc              4   39[BANK1 ] unsigned long 
  5145 ;;  cl              4   35[BANK1 ] unsigned long 
  5146 ;;  tm              4   31[BANK1 ] unsigned long 
  5147 ;;  bcs             4   27[BANK1 ] unsigned long 
  5148 ;;  fs              2   51[BANK1 ] PTR struct .
  5149 ;;		 -> NULL(0), fs(559), 
  5150 ;;  res             1   53[BANK1 ] enum E154
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  1    wreg      enum E3971
  5153 ;; Registers used:
  5154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5160 ;;      Params:         0       0       5       0       0       0       0       0       0
  5161 ;;      Locals:         0       0      69       0       0       0       0       0       0
  5162 ;;      Temps:          0       0       8       0       0       0       0       0       0
  5163 ;;      Totals:         0       0      82       0       0       0       0       0       0
  5164 ;;Total ram usage:       82 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:   14
  5167 ;; This function calls:
  5168 ;;		_clst2sect
  5169 ;;		_dir_register
  5170 ;;		_follow_path
  5171 ;;		_get_fat
  5172 ;;		_get_fattime
  5173 ;;		_ld_clust
  5174 ;;		_ld_dword
  5175 ;;		_mount_volume
  5176 ;;		_move_window
  5177 ;;		_remove_chain
  5178 ;;		_st_clust
  5179 ;;		_st_dword
  5180 ;; This function is called by:
  5181 ;;		_SDCard
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           	psect	text16
  5186  001170                     __ptext16:
  5187                           	opt stack 0
  5188  001170                     _f_open:
  5189                           	opt stack 14
  5190                           
  5191                           ;ff.c: 3669: FRESULT res;
  5192                           ;ff.c: 3670: DIR_E dj;
  5193                           ;ff.c: 3671: FATFS *fs;
  5194                           ;ff.c: 3673: DWORD cl, bcs, clst, tm;
  5195                           ;ff.c: 3674: LBA_t sc;
  5196                           ;ff.c: 3675: FSIZE_t ofs;
  5197                           ;ff.c: 3680: if (!fp) return FR_INVALID_OBJECT;
  5198                           
  5199                           ;incstack = 0
  5200  001170  0101               	movlb	1	; () banked
  5201  001172  517F               	movf	f_open@fp& (0+255),w,b
  5202  001174  1180               	iorwf	(f_open@fp+1)& (0+255),w,b
  5203  001176  A4D8               	btfss	status,2,c
  5204  001178  D002               	goto	l1423
  5205                           
  5206                           ; BSR set to: 1
  5207  00117A  0E09               	movlw	9
  5208                           
  5209                           ; BSR set to: 1
  5210  00117C  0012               	return	
  5211  00117E                     l1423:
  5212                           
  5213                           ; BSR set to: 1
  5214                           
  5215                           ; BSR set to: 1
  5216  00117E  0E00               	movlw	0
  5217  001180  6F8D               	movwf	(_f_open$3199+1)& (0+255),b
  5218  001182  0E3F               	movlw	63
  5219                           
  5220                           ; BSR set to: 1
  5221                           
  5222                           ; BSR set to: 1
  5223  001184  6F8C               	movwf	_f_open$3199& (0+255),b
  5224                           
  5225                           ; BSR set to: 1
  5226                           
  5227                           ; BSR set to: 1
  5228  001186  518C               	movf	_f_open$3199& (0+255),w,b
  5229  001188  1783               	andwf	f_open@mode& (0+255),f,b
  5230                           
  5231                           ; BSR set to: 1
  5232                           ;ff.c: 3684: res = mount_volume(&path, &fs, mode);
  5233  00118A  0E81               	movlw	low f_open@path
  5234  00118C  0100               	movlb	0	; () banked
  5235  00118E  6FC8               	movwf	mount_volume@path& (0+255),b
  5236  001190  0E01               	movlw	high f_open@path
  5237  001192  6FC9               	movwf	(mount_volume@path+1)& (0+255),b
  5238  001194  0EA6               	movlw	low f_open@fs
  5239  001196  6FCA               	movwf	mount_volume@rfs& (0+255),b
  5240  001198  0E01               	movlw	high f_open@fs
  5241  00119A  6FCB               	movwf	(mount_volume@rfs+1)& (0+255),b
  5242  00119C  C183  F0CC         	movff	f_open@mode,mount_volume@mode
  5243  0011A0  EC09  F000         	call	_mount_volume	;wreg free
  5244  0011A4  0101               	movlb	1	; () banked
  5245  0011A6  6FA8               	movwf	f_open@res& (0+255),b
  5246                           
  5247                           ; BSR set to: 1
  5248                           ;ff.c: 3685: if (res == FR_OK) {
  5249  0011A8  51A8               	movf	f_open@res& (0+255),w,b
  5250  0011AA  A4D8               	btfss	status,2,c
  5251  0011AC  D2B8               	goto	l1460
  5252                           
  5253                           ; BSR set to: 1
  5254                           ;ff.c: 3686: dj.obj.fs = fs;
  5255  0011AE  C1A6  F1A9         	movff	f_open@fs,f_open@dj
  5256  0011B2  C1A7  F1AA         	movff	f_open@fs+1,f_open@dj+1
  5257                           
  5258                           ; BSR set to: 1
  5259                           ;ff.c: 3687: ;
  5260                           ;ff.c: 3688: res = follow_path(&dj, path);
  5261  0011B6  0EA9               	movlw	low f_open@dj
  5262  0011B8  6F73               	movwf	follow_path@dp& (0+255),b
  5263  0011BA  0E01               	movlw	high f_open@dj
  5264  0011BC  6F74               	movwf	(follow_path@dp+1)& (0+255),b
  5265  0011BE  C181  F175         	movff	f_open@path,follow_path@path
  5266  0011C2  C182  F176         	movff	f_open@path+1,follow_path@path+1
  5267  0011C6  ECB1  F01D         	call	_follow_path	;wreg free
  5268  0011CA  0101               	movlb	1	; () banked
  5269  0011CC  6FA8               	movwf	f_open@res& (0+255),b
  5270                           
  5271                           ; BSR set to: 1
  5272                           ;ff.c: 3690: if (res == FR_OK) {
  5273  0011CE  51A8               	movf	f_open@res& (0+255),w,b
  5274  0011D0  B4D8               	btfsc	status,2,c
  5275                           
  5276                           ; BSR set to: 1
  5277                           ;ff.c: 3691: if (dj.fn[11] & 0x80) {
  5278  0011D2  AFD0               	btfss	(f_open@dj+39)& (0+255),7,b
  5279  0011D4  D002               	goto	l1431
  5280                           
  5281                           ; BSR set to: 1
  5282                           ;ff.c: 3692: res = FR_INVALID_NAME;
  5283  0011D6  0E06               	movlw	6
  5284  0011D8  6FA8               	movwf	f_open@res& (0+255),b
  5285  0011DA                     l1431:
  5286                           
  5287                           ; BSR set to: 1
  5288                           ;ff.c: 3693: }
  5289                           ;ff.c: 3699: }
  5290                           ;ff.c: 3701: if (mode & (0x08 | 0x10 | 0x04)) {
  5291                           
  5292                           ; BSR set to: 1
  5293                           
  5294                           ; BSR set to: 1
  5295  0011DA  C183  F184         	movff	f_open@mode,??_f_open
  5296  0011DE  0E1C               	movlw	28
  5297  0011E0  1784               	andwf	??_f_open& (0+255),f,b
  5298  0011E2  B4D8               	btfsc	status,2,c
  5299  0011E4  D0F0               	goto	l1432
  5300                           
  5301                           ; BSR set to: 1
  5302                           ;ff.c: 3702: if (res != FR_OK) {
  5303  0011E6  51A8               	movf	f_open@res& (0+255),w,b
  5304  0011E8  B4D8               	btfsc	status,2,c
  5305  0011EA  D00F               	goto	l1433
  5306                           
  5307                           ; BSR set to: 1
  5308                           ;ff.c: 3703: if (res == FR_NO_FILE) {
  5309  0011EC  0E04               	movlw	4
  5310  0011EE  19A8               	xorwf	f_open@res& (0+255),w,b
  5311  0011F0  A4D8               	btfss	status,2,c
  5312  0011F2  D009               	goto	l1434
  5313                           
  5314                           ; BSR set to: 1
  5315                           ;ff.c: 3707: res = dir_register(&dj);
  5316  0011F4  0EA9               	movlw	low f_open@dj
  5317  0011F6  0100               	movlb	0	; () banked
  5318  0011F8  6FFC               	movwf	dir_register@dp& (0+255),b
  5319  0011FA  0E01               	movlw	high f_open@dj
  5320  0011FC  6FFD               	movwf	(dir_register@dp+1)& (0+255),b
  5321  0011FE  EC6B  F023         	call	_dir_register	;wreg free
  5322  001202  0101               	movlb	1	; () banked
  5323  001204  6FA8               	movwf	f_open@res& (0+255),b
  5324  001206                     l1434:
  5325                           
  5326                           ; BSR set to: 1
  5327                           ;ff.c: 3709: }
  5328                           ;ff.c: 3710: mode |= 0x08;
  5329                           
  5330                           ; BSR set to: 1
  5331  001206  8783               	bsf	f_open@mode& (0+255),3,b
  5332                           
  5333                           ;ff.c: 3711: }
  5334  001208  D00C               	goto	l1438
  5335  00120A                     l1433:
  5336                           
  5337                           ; BSR set to: 1
  5338                           ;ff.c: 3712: else {
  5339                           ;ff.c: 3713: if (dj.obj.attr & (0x01 | 0x10)) {
  5340                           
  5341                           ; BSR set to: 1
  5342  00120A  C1AD  F184         	movff	f_open@dj+4,??_f_open
  5343  00120E  0E11               	movlw	17
  5344  001210  1784               	andwf	??_f_open& (0+255),f,b
  5345  001212  B4D8               	btfsc	status,2,c
  5346  001214  D002               	goto	l1436
  5347                           
  5348                           ; BSR set to: 1
  5349                           ;ff.c: 3714: res = FR_DENIED;
  5350  001216  0E07               	movlw	7
  5351  001218  D003               	goto	L4
  5352  00121A                     l1436:
  5353                           
  5354                           ; BSR set to: 1
  5355                           ;ff.c: 3716: if (mode & 0x04) res = FR_EXIST;
  5356  00121A  A583               	btfss	f_open@mode& (0+255),2,b
  5357  00121C  D002               	goto	l1438
  5358                           
  5359                           ; BSR set to: 1
  5360  00121E  0E08               	movlw	8
  5361  001220                     L4:
  5362  001220  6FA8               	movwf	f_open@res& (0+255),b
  5363  001222                     l1438:
  5364                           
  5365                           ; BSR set to: 1
  5366                           ;ff.c: 3717: }
  5367                           ;ff.c: 3718: }
  5368                           ;ff.c: 3719: if (res == FR_OK && (mode & 0x08)) {
  5369                           
  5370                           ; BSR set to: 1
  5371                           
  5372                           ; BSR set to: 1
  5373  001222  51A8               	movf	f_open@res& (0+255),w,b
  5374  001224  B4D8               	btfsc	status,2,c
  5375                           
  5376                           ; BSR set to: 1
  5377  001226  A783               	btfss	f_open@mode& (0+255),3,b
  5378  001228  D0DA               	goto	l1446
  5379                           
  5380                           ; BSR set to: 1
  5381                           ;ff.c: 3738: {
  5382                           ;ff.c: 3740: tm = get_fattime();
  5383  00122A  EC6A  F022         	call	_get_fattime	;wreg free
  5384  00122E  C01A  F192         	movff	?_get_fattime,f_open@tm
  5385  001232  C01B  F193         	movff	?_get_fattime+1,f_open@tm+1
  5386  001236  C01C  F194         	movff	?_get_fattime+2,f_open@tm+2
  5387  00123A  C01D  F195         	movff	?_get_fattime+3,f_open@tm+3
  5388                           
  5389                           ;ff.c: 3741: st_dword(dj.dir + 14, tm);
  5390  00123E  0E0E               	movlw	14
  5391  001240  0101               	movlb	1	; () banked
  5392  001242  25C3               	addwf	(f_open@dj+26)& (0+255),w,b
  5393  001244  6E1A               	movwf	st_dword@ptr,c
  5394  001246  0E00               	movlw	0
  5395  001248  21C4               	addwfc	(f_open@dj+27)& (0+255),w,b
  5396  00124A  6E1B               	movwf	st_dword@ptr+1,c
  5397  00124C  C192  F01C         	movff	f_open@tm,st_dword@val
  5398  001250  C193  F01D         	movff	f_open@tm+1,st_dword@val+1
  5399  001254  C194  F01E         	movff	f_open@tm+2,st_dword@val+2
  5400  001258  C195  F01F         	movff	f_open@tm+3,st_dword@val+3
  5401  00125C  EC9C  F029         	call	_st_dword	;wreg free
  5402                           
  5403                           ;ff.c: 3742: st_dword(dj.dir + 22, tm);
  5404  001260  0E16               	movlw	22
  5405  001262  0101               	movlb	1	; () banked
  5406  001264  25C3               	addwf	(f_open@dj+26)& (0+255),w,b
  5407  001266  6E1A               	movwf	st_dword@ptr,c
  5408  001268  0E00               	movlw	0
  5409  00126A  21C4               	addwfc	(f_open@dj+27)& (0+255),w,b
  5410  00126C  6E1B               	movwf	st_dword@ptr+1,c
  5411  00126E  C192  F01C         	movff	f_open@tm,st_dword@val
  5412  001272  C193  F01D         	movff	f_open@tm+1,st_dword@val+1
  5413  001276  C194  F01E         	movff	f_open@tm+2,st_dword@val+2
  5414  00127A  C195  F01F         	movff	f_open@tm+3,st_dword@val+3
  5415  00127E  EC9C  F029         	call	_st_dword	;wreg free
  5416                           
  5417                           ;ff.c: 3743: cl = ld_clust(fs, dj.dir);
  5418  001282  C1A6  F021         	movff	f_open@fs,ld_clust@fs
  5419  001286  C1A7  F022         	movff	f_open@fs+1,ld_clust@fs+1
  5420  00128A  C1C3  F023         	movff	f_open@dj+26,ld_clust@dir
  5421  00128E  C1C4  F024         	movff	f_open@dj+27,ld_clust@dir+1
  5422  001292  ECF0  F028         	call	_ld_clust	;wreg free
  5423  001296  C021  F196         	movff	?_ld_clust,f_open@cl
  5424  00129A  C022  F197         	movff	?_ld_clust+1,f_open@cl+1
  5425  00129E  C023  F198         	movff	?_ld_clust+2,f_open@cl+2
  5426  0012A2  C024  F199         	movff	?_ld_clust+3,f_open@cl+3
  5427                           
  5428                           ;ff.c: 3744: dj.dir[11] = 0x20;
  5429  0012A6  0101               	movlb	1	; () banked
  5430  0012A8  EE20 F00B          	lfsr	2,11
  5431  0012AC  51C3               	movf	(f_open@dj+26)& (0+255),w,b
  5432  0012AE  26D9               	addwf	fsr2l,f,c
  5433  0012B0  51C4               	movf	(f_open@dj+27)& (0+255),w,b
  5434  0012B2  22DA               	addwfc	fsr2h,f,c
  5435  0012B4  0E20               	movlw	32
  5436  0012B6  6EDF               	movwf	indf2,c
  5437                           
  5438                           ; BSR set to: 1
  5439                           ;ff.c: 3745: st_clust(fs, dj.dir, 0);
  5440  0012B8  C1A6  F01E         	movff	f_open@fs,st_clust@fs
  5441  0012BC  C1A7  F01F         	movff	f_open@fs+1,st_clust@fs+1
  5442  0012C0  C1C3  F020         	movff	f_open@dj+26,st_clust@dir
  5443  0012C4  C1C4  F021         	movff	f_open@dj+27,st_clust@dir+1
  5444  0012C8  0E00               	movlw	0
  5445  0012CA  6E22               	movwf	st_clust@cl,c
  5446  0012CC  0E00               	movlw	0
  5447  0012CE  6E23               	movwf	st_clust@cl+1,c
  5448  0012D0  0E00               	movlw	0
  5449  0012D2  6E24               	movwf	st_clust@cl+2,c
  5450  0012D4  0E00               	movlw	0
  5451  0012D6  6E25               	movwf	st_clust@cl+3,c
  5452  0012D8  ECAE  F02B         	call	_st_clust	;wreg free
  5453                           
  5454                           ;ff.c: 3746: st_dword(dj.dir + 28, 0);
  5455  0012DC  0E1C               	movlw	28
  5456  0012DE  0101               	movlb	1	; () banked
  5457  0012E0  25C3               	addwf	(f_open@dj+26)& (0+255),w,b
  5458  0012E2  6E1A               	movwf	st_dword@ptr,c
  5459  0012E4  0E00               	movlw	0
  5460  0012E6  21C4               	addwfc	(f_open@dj+27)& (0+255),w,b
  5461  0012E8  6E1B               	movwf	st_dword@ptr+1,c
  5462  0012EA  0E00               	movlw	0
  5463  0012EC  6E1C               	movwf	st_dword@val,c
  5464  0012EE  0E00               	movlw	0
  5465  0012F0  6E1D               	movwf	st_dword@val+1,c
  5466  0012F2  0E00               	movlw	0
  5467  0012F4  6E1E               	movwf	st_dword@val+2,c
  5468  0012F6  0E00               	movlw	0
  5469  0012F8  6E1F               	movwf	st_dword@val+3,c
  5470  0012FA  EC9C  F029         	call	_st_dword	;wreg free
  5471                           
  5472                           ;ff.c: 3747: fs->wflag = 1;
  5473  0012FE  0101               	movlb	1	; () banked
  5474  001300  EE20 F003          	lfsr	2,3
  5475  001304  51A6               	movf	f_open@fs& (0+255),w,b
  5476  001306  26D9               	addwf	fsr2l,f,c
  5477  001308  51A7               	movf	(f_open@fs+1)& (0+255),w,b
  5478  00130A  22DA               	addwfc	fsr2h,f,c
  5479  00130C  0E01               	movlw	1
  5480  00130E  6EDF               	movwf	indf2,c
  5481                           
  5482                           ; BSR set to: 1
  5483                           ;ff.c: 3748: if (cl != 0) {
  5484  001310  5196               	movf	f_open@cl& (0+255),w,b
  5485  001312  1197               	iorwf	(f_open@cl+1)& (0+255),w,b
  5486  001314  1198               	iorwf	(f_open@cl+2)& (0+255),w,b
  5487  001316  1199               	iorwf	(f_open@cl+3)& (0+255),w,b
  5488  001318  B4D8               	btfsc	status,2,c
  5489  00131A  D061               	goto	l1446
  5490                           
  5491                           ; BSR set to: 1
  5492                           ;ff.c: 3749: sc = fs->winsect;
  5493  00131C  EE20 F02B          	lfsr	2,43
  5494  001320  51A6               	movf	f_open@fs& (0+255),w,b
  5495  001322  26D9               	addwf	fsr2l,f,c
  5496  001324  51A7               	movf	(f_open@fs+1)& (0+255),w,b
  5497  001326  22DA               	addwfc	fsr2h,f,c
  5498  001328  CFDE F19A          	movff	postinc2,f_open@sc
  5499  00132C  CFDE F19B          	movff	postinc2,f_open@sc+1
  5500  001330  CFDE F19C          	movff	postinc2,f_open@sc+2
  5501  001334  CFDE F19D          	movff	postinc2,f_open@sc+3
  5502                           
  5503                           ; BSR set to: 1
  5504                           ;ff.c: 3750: res = remove_chain(&dj.obj, cl, 0);
  5505  001338  0EA9               	movlw	low f_open@dj
  5506  00133A  0100               	movlb	0	; () banked
  5507  00133C  6FBA               	movwf	remove_chain@obj& (0+255),b
  5508  00133E  0E01               	movlw	high f_open@dj
  5509  001340  6FBB               	movwf	(remove_chain@obj+1)& (0+255),b
  5510  001342  C196  F0BC         	movff	f_open@cl,remove_chain@clst
  5511  001346  C197  F0BD         	movff	f_open@cl+1,remove_chain@clst+1
  5512  00134A  C198  F0BE         	movff	f_open@cl+2,remove_chain@clst+2
  5513  00134E  C199  F0BF         	movff	f_open@cl+3,remove_chain@clst+3
  5514  001352  0E00               	movlw	0
  5515  001354  6FC0               	movwf	remove_chain@pclst& (0+255),b
  5516  001356  0E00               	movlw	0
  5517  001358  6FC1               	movwf	(remove_chain@pclst+1)& (0+255),b
  5518  00135A  0E00               	movlw	0
  5519  00135C  6FC2               	movwf	(remove_chain@pclst+2)& (0+255),b
  5520  00135E  0E00               	movlw	0
  5521  001360  6FC3               	movwf	(remove_chain@pclst+3)& (0+255),b
  5522  001362  EC83  F01A         	call	_remove_chain	;wreg free
  5523  001366  0101               	movlb	1	; () banked
  5524  001368  6FA8               	movwf	f_open@res& (0+255),b
  5525                           
  5526                           ; BSR set to: 1
  5527                           ;ff.c: 3751: if (res == FR_OK) {
  5528  00136A  51A8               	movf	f_open@res& (0+255),w,b
  5529  00136C  A4D8               	btfss	status,2,c
  5530  00136E  D037               	goto	l1446
  5531                           
  5532                           ; BSR set to: 1
  5533                           ;ff.c: 3752: res = move_window(fs, sc);
  5534  001370  C1A6  F090         	movff	f_open@fs,move_window@fs
  5535  001374  C1A7  F091         	movff	f_open@fs+1,move_window@fs+1
  5536  001378  C19A  F092         	movff	f_open@sc,move_window@sect
  5537  00137C  C19B  F093         	movff	f_open@sc+1,move_window@sect+1
  5538  001380  C19C  F094         	movff	f_open@sc+2,move_window@sect+2
  5539  001384  C19D  F095         	movff	f_open@sc+3,move_window@sect+3
  5540  001388  EC09  F026         	call	_move_window	;wreg free
  5541  00138C  0101               	movlb	1	; () banked
  5542  00138E  6FA8               	movwf	f_open@res& (0+255),b
  5543                           
  5544                           ; BSR set to: 1
  5545                           ;ff.c: 3753: fs->last_clst = cl - 1;
  5546  001390  0EFF               	movlw	255
  5547  001392  2596               	addwf	f_open@cl& (0+255),w,b
  5548  001394  6F84               	movwf	??_f_open& (0+255),b
  5549  001396  0EFF               	movlw	255
  5550  001398  2197               	addwfc	(f_open@cl+1)& (0+255),w,b
  5551  00139A  6F85               	movwf	(??_f_open+1)& (0+255),b
  5552  00139C  0EFF               	movlw	255
  5553  00139E  2198               	addwfc	(f_open@cl+2)& (0+255),w,b
  5554  0013A0  6F86               	movwf	(??_f_open+2)& (0+255),b
  5555  0013A2  0EFF               	movlw	255
  5556  0013A4  2199               	addwfc	(f_open@cl+3)& (0+255),w,b
  5557  0013A6  6F87               	movwf	(??_f_open+3)& (0+255),b
  5558  0013A8  EE20 F00B          	lfsr	2,11
  5559  0013AC  51A6               	movf	f_open@fs& (0+255),w,b
  5560  0013AE  26D9               	addwf	fsr2l,f,c
  5561  0013B0  51A7               	movf	(f_open@fs+1)& (0+255),w,b
  5562  0013B2  22DA               	addwfc	fsr2h,f,c
  5563  0013B4  C184  FFDE         	movff	??_f_open,postinc2
  5564  0013B8  C185  FFDE         	movff	??_f_open+1,postinc2
  5565  0013BC  C186  FFDE         	movff	??_f_open+2,postinc2
  5566  0013C0  C187  FFDE         	movff	??_f_open+3,postinc2
  5567                           
  5568                           ; BSR set to: 1
  5569                           ;ff.c: 3754: }
  5570                           ;ff.c: 3755: }
  5571                           ;ff.c: 3756: }
  5572                           ;ff.c: 3757: }
  5573                           ;ff.c: 3758: }
  5574                           
  5575                           ; BSR set to: 1
  5576                           
  5577                           ; BSR set to: 1
  5578  0013C4  D00C               	goto	l1446
  5579  0013C6                     l1432:
  5580                           
  5581                           ; BSR set to: 1
  5582                           ;ff.c: 3759: else {
  5583                           ;ff.c: 3760: if (res == FR_OK) {
  5584                           
  5585                           ; BSR set to: 1
  5586  0013C6  51A8               	movf	f_open@res& (0+255),w,b
  5587  0013C8  A4D8               	btfss	status,2,c
  5588  0013CA  D009               	goto	l1446
  5589                           
  5590                           ; BSR set to: 1
  5591                           ;ff.c: 3761: if (dj.obj.attr & 0x10) {
  5592  0013CC  A9AD               	btfss	(f_open@dj+4)& (0+255),4,b
  5593  0013CE  D002               	goto	l1444
  5594                           
  5595                           ; BSR set to: 1
  5596                           ;ff.c: 3762: res = FR_NO_FILE;
  5597  0013D0  0E04               	movlw	4
  5598  0013D2  D004               	goto	L5
  5599  0013D4                     l1444:
  5600                           
  5601                           ; BSR set to: 1
  5602                           ;ff.c: 3764: if ((mode & 0x02) && (dj.obj.attr & 0x01)) {
  5603  0013D4  B383               	btfsc	f_open@mode& (0+255),1,b
  5604                           
  5605                           ; BSR set to: 1
  5606  0013D6  A1AD               	btfss	(f_open@dj+4)& (0+255),0,b
  5607  0013D8  D002               	goto	l1446
  5608                           
  5609                           ; BSR set to: 1
  5610                           ;ff.c: 3765: res = FR_DENIED;
  5611  0013DA  0E07               	movlw	7
  5612  0013DC                     L5:
  5613  0013DC  6FA8               	movwf	f_open@res& (0+255),b
  5614  0013DE                     l1446:
  5615                           
  5616                           ; BSR set to: 1
  5617                           ;ff.c: 3766: }
  5618                           ;ff.c: 3767: }
  5619                           ;ff.c: 3768: }
  5620                           ;ff.c: 3769: }
  5621                           ;ff.c: 3770: if (res == FR_OK) {
  5622                           
  5623                           ; BSR set to: 1
  5624                           
  5625                           ; BSR set to: 1
  5626                           
  5627                           ; BSR set to: 1
  5628  0013DE  51A8               	movf	f_open@res& (0+255),w,b
  5629  0013E0  A4D8               	btfss	status,2,c
  5630  0013E2  D020               	goto	l1447
  5631                           
  5632                           ; BSR set to: 1
  5633                           ;ff.c: 3771: if (mode & 0x08) mode |= 0x40;
  5634  0013E4  B783               	btfsc	f_open@mode& (0+255),3,b
  5635                           
  5636                           ; BSR set to: 1
  5637  0013E6  8D83               	bsf	f_open@mode& (0+255),6,b
  5638                           
  5639                           ; BSR set to: 1
  5640                           ;ff.c: 3772: fp->dir_sect = fs->winsect;
  5641                           
  5642                           ; BSR set to: 1
  5643  0013E8  EE20 F02B          	lfsr	2,43
  5644  0013EC  51A6               	movf	f_open@fs& (0+255),w,b
  5645  0013EE  26D9               	addwf	fsr2l,f,c
  5646  0013F0  51A7               	movf	(f_open@fs+1)& (0+255),w,b
  5647  0013F2  22DA               	addwfc	fsr2h,f,c
  5648  0013F4  EE10 F01C          	lfsr	1,28
  5649  0013F8  517F               	movf	f_open@fp& (0+255),w,b
  5650  0013FA  26E1               	addwf	fsr1l,f,c
  5651  0013FC  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5652  0013FE  22E2               	addwfc	fsr1h,f,c
  5653  001400  CFDE FFE6          	movff	postinc2,postinc1
  5654  001404  CFDE FFE6          	movff	postinc2,postinc1
  5655  001408  CFDE FFE6          	movff	postinc2,postinc1
  5656  00140C  CFDE FFE6          	movff	postinc2,postinc1
  5657                           
  5658                           ; BSR set to: 1
  5659                           ;ff.c: 3773: fp->dir_ptr = dj.dir;
  5660  001410  EE20 F020          	lfsr	2,32
  5661  001414  517F               	movf	f_open@fp& (0+255),w,b
  5662  001416  26D9               	addwf	fsr2l,f,c
  5663  001418  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5664  00141A  22DA               	addwfc	fsr2h,f,c
  5665  00141C  C1C3  FFDE         	movff	f_open@dj+26,postinc2
  5666  001420  C1C4  FFDD         	movff	f_open@dj+27,postdec2
  5667  001424                     l1447:
  5668                           
  5669                           ; BSR set to: 1
  5670                           ;ff.c: 3778: }
  5671                           ;ff.c: 3791: if (res == FR_OK) {
  5672                           
  5673                           ; BSR set to: 1
  5674  001424  51A8               	movf	f_open@res& (0+255),w,b
  5675  001426  A4D8               	btfss	status,2,c
  5676  001428  D17A               	goto	l1460
  5677                           
  5678                           ; BSR set to: 1
  5679                           ;ff.c: 3800: {
  5680                           ;ff.c: 3801: fp->obj.sclust = ld_clust(fs, dj.dir);
  5681  00142A  C1A6  F021         	movff	f_open@fs,ld_clust@fs
  5682  00142E  C1A7  F022         	movff	f_open@fs+1,ld_clust@fs+1
  5683  001432  C1C3  F023         	movff	f_open@dj+26,ld_clust@dir
  5684  001436  C1C4  F024         	movff	f_open@dj+27,ld_clust@dir+1
  5685  00143A  ECF0  F028         	call	_ld_clust	;wreg free
  5686  00143E  0101               	movlb	1	; () banked
  5687  001440  EE20 F006          	lfsr	2,6
  5688  001444  517F               	movf	f_open@fp& (0+255),w,b
  5689  001446  26D9               	addwf	fsr2l,f,c
  5690  001448  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5691  00144A  22DA               	addwfc	fsr2h,f,c
  5692  00144C  C021  FFDE         	movff	?_ld_clust,postinc2
  5693  001450  C022  FFDE         	movff	?_ld_clust+1,postinc2
  5694  001454  C023  FFDE         	movff	?_ld_clust+2,postinc2
  5695  001458  C024  FFDE         	movff	?_ld_clust+3,postinc2
  5696                           
  5697                           ;ff.c: 3802: fp->obj.objsize = ld_dword(dj.dir + 28);
  5698  00145C  0E1C               	movlw	28
  5699  00145E  25C3               	addwf	(f_open@dj+26)& (0+255),w,b
  5700  001460  6E1A               	movwf	ld_dword@ptr,c
  5701  001462  0E00               	movlw	0
  5702  001464  21C4               	addwfc	(f_open@dj+27)& (0+255),w,b
  5703  001466  6E1B               	movwf	ld_dword@ptr+1,c
  5704  001468  EC54  F025         	call	_ld_dword	;wreg free
  5705  00146C  0101               	movlb	1	; () banked
  5706  00146E  EE20 F00A          	lfsr	2,10
  5707  001472  517F               	movf	f_open@fp& (0+255),w,b
  5708  001474  26D9               	addwf	fsr2l,f,c
  5709  001476  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5710  001478  22DA               	addwfc	fsr2h,f,c
  5711  00147A  C01A  FFDE         	movff	?_ld_dword,postinc2
  5712  00147E  C01B  FFDE         	movff	?_ld_dword+1,postinc2
  5713  001482  C01C  FFDE         	movff	?_ld_dword+2,postinc2
  5714  001486  C01D  FFDE         	movff	?_ld_dword+3,postinc2
  5715                           
  5716                           ; BSR set to: 1
  5717                           ;ff.c: 3803: }
  5718                           ;ff.c: 3807: fp->obj.fs = fs;
  5719  00148A  C17F  FFD9         	movff	f_open@fp,fsr2l
  5720  00148E  C180  FFDA         	movff	f_open@fp+1,fsr2h
  5721  001492  C1A6  FFDE         	movff	f_open@fs,postinc2
  5722  001496  C1A7  FFDD         	movff	f_open@fs+1,postdec2
  5723                           
  5724                           ; BSR set to: 1
  5725                           ;ff.c: 3808: fp->obj.id = fs->id;
  5726  00149A  EE20 F005          	lfsr	2,5
  5727  00149E  51A6               	movf	f_open@fs& (0+255),w,b
  5728  0014A0  26D9               	addwf	fsr2l,f,c
  5729  0014A2  51A7               	movf	(f_open@fs+1)& (0+255),w,b
  5730  0014A4  22DA               	addwfc	fsr2h,f,c
  5731  0014A6  EE10 F002          	lfsr	1,2
  5732  0014AA  517F               	movf	f_open@fp& (0+255),w,b
  5733  0014AC  26E1               	addwf	fsr1l,f,c
  5734  0014AE  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5735  0014B0  22E2               	addwfc	fsr1h,f,c
  5736  0014B2  CFDE FFE6          	movff	postinc2,postinc1
  5737  0014B6  CFDD FFE5          	movff	postdec2,postdec1
  5738                           
  5739                           ; BSR set to: 1
  5740                           ;ff.c: 3809: fp->flag = mode;
  5741  0014BA  EE20 F00E          	lfsr	2,14
  5742  0014BE  517F               	movf	f_open@fp& (0+255),w,b
  5743  0014C0  26D9               	addwf	fsr2l,f,c
  5744  0014C2  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5745  0014C4  22DA               	addwfc	fsr2h,f,c
  5746  0014C6  C183  FFDF         	movff	f_open@mode,indf2
  5747                           
  5748                           ; BSR set to: 1
  5749                           ;ff.c: 3810: fp->err = 0;
  5750  0014CA  EE20 F00F          	lfsr	2,15
  5751  0014CE  517F               	movf	f_open@fp& (0+255),w,b
  5752  0014D0  26D9               	addwf	fsr2l,f,c
  5753  0014D2  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5754  0014D4  22DA               	addwfc	fsr2h,f,c
  5755  0014D6  0E00               	movlw	0
  5756  0014D8  6EDF               	movwf	indf2,c
  5757                           
  5758                           ; BSR set to: 1
  5759                           ;ff.c: 3811: fp->sect = 0;
  5760  0014DA  EE20 F018          	lfsr	2,24
  5761  0014DE  517F               	movf	f_open@fp& (0+255),w,b
  5762  0014E0  26D9               	addwf	fsr2l,f,c
  5763  0014E2  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5764  0014E4  22DA               	addwfc	fsr2h,f,c
  5765  0014E6  6ADE               	clrf	postinc2,c
  5766  0014E8  6ADE               	clrf	postinc2,c
  5767  0014EA  6ADE               	clrf	postinc2,c
  5768  0014EC  6ADD               	clrf	postdec2,c
  5769                           
  5770                           ; BSR set to: 1
  5771                           ;ff.c: 3812: fp->fptr = 0;
  5772  0014EE  EE20 F010          	lfsr	2,16
  5773  0014F2  517F               	movf	f_open@fp& (0+255),w,b
  5774  0014F4  26D9               	addwf	fsr2l,f,c
  5775  0014F6  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5776  0014F8  22DA               	addwfc	fsr2h,f,c
  5777  0014FA  6ADE               	clrf	postinc2,c
  5778  0014FC  6ADE               	clrf	postinc2,c
  5779  0014FE  6ADE               	clrf	postinc2,c
  5780  001500  6ADD               	clrf	postdec2,c
  5781                           
  5782                           ; BSR set to: 1
  5783                           ;ff.c: 3817: if ((mode & 0x20) && fp->obj.objsize > 0) {
  5784  001502  AB83               	btfss	f_open@mode& (0+255),5,b
  5785  001504  D10C               	goto	l1460
  5786                           
  5787                           ; BSR set to: 1
  5788  001506  EE20 F00A          	lfsr	2,10
  5789  00150A  517F               	movf	f_open@fp& (0+255),w,b
  5790  00150C  26D9               	addwf	fsr2l,f,c
  5791  00150E  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5792  001510  22DA               	addwfc	fsr2h,f,c
  5793  001512  50DE               	movf	postinc2,w,c
  5794  001514  10DE               	iorwf	postinc2,w,c
  5795  001516  10DE               	iorwf	postinc2,w,c
  5796  001518  10DE               	iorwf	postinc2,w,c
  5797  00151A  B4D8               	btfsc	status,2,c
  5798  00151C  D100               	goto	l1460
  5799                           
  5800                           ; BSR set to: 1
  5801                           ;ff.c: 3818: fp->fptr = fp->obj.objsize;
  5802  00151E  EE20 F00A          	lfsr	2,10
  5803  001522  517F               	movf	f_open@fp& (0+255),w,b
  5804  001524  26D9               	addwf	fsr2l,f,c
  5805  001526  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5806  001528  22DA               	addwfc	fsr2h,f,c
  5807  00152A  EE10 F010          	lfsr	1,16
  5808  00152E  517F               	movf	f_open@fp& (0+255),w,b
  5809  001530  26E1               	addwf	fsr1l,f,c
  5810  001532  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5811  001534  22E2               	addwfc	fsr1h,f,c
  5812  001536  CFDE FFE6          	movff	postinc2,postinc1
  5813  00153A  CFDE FFE6          	movff	postinc2,postinc1
  5814  00153E  CFDE FFE6          	movff	postinc2,postinc1
  5815  001542  CFDE FFE6          	movff	postinc2,postinc1
  5816                           
  5817                           ; BSR set to: 1
  5818                           ;ff.c: 3819: bcs = (DWORD)fs->csize * ((UINT)512);
  5819  001546  EE20 F009          	lfsr	2,9
  5820  00154A  51A6               	movf	f_open@fs& (0+255),w,b
  5821  00154C  26D9               	addwf	fsr2l,f,c
  5822  00154E  51A7               	movf	(f_open@fs+1)& (0+255),w,b
  5823  001550  22DA               	addwfc	fsr2h,f,c
  5824  001552  CFDE F184          	movff	postinc2,??_f_open
  5825  001556  CFDD F185          	movff	postdec2,??_f_open+1
  5826  00155A  5184               	movf	??_f_open& (0+255),w,b
  5827  00155C  6F86               	movwf	(??_f_open+2)& (0+255),b
  5828  00155E  5185               	movf	(??_f_open+1)& (0+255),w,b
  5829  001560  6F87               	movwf	(??_f_open+3)& (0+255),b
  5830  001562  6B88               	clrf	(??_f_open+4)& (0+255),b
  5831  001564  6B89               	clrf	(??_f_open+5)& (0+255),b
  5832  001566  0E09               	movlw	9
  5833  001568                     u19835:
  5834  001568  90D8               	bcf	status,0,c
  5835  00156A  3786               	rlcf	(??_f_open+2)& (0+255),f,b
  5836  00156C  3787               	rlcf	(??_f_open+3)& (0+255),f,b
  5837  00156E  3788               	rlcf	(??_f_open+4)& (0+255),f,b
  5838  001570  3789               	rlcf	(??_f_open+5)& (0+255),f,b
  5839  001572  2EE8               	decfsz	wreg,f,c
  5840  001574  D7F9               	goto	u19835
  5841  001576  C186  F18E         	movff	??_f_open+2,f_open@bcs
  5842  00157A  C187  F18F         	movff	??_f_open+3,f_open@bcs+1
  5843  00157E  C188  F190         	movff	??_f_open+4,f_open@bcs+2
  5844  001582  C189  F191         	movff	??_f_open+5,f_open@bcs+3
  5845                           
  5846                           ; BSR set to: 1
  5847                           ;ff.c: 3820: clst = fp->obj.sclust;
  5848  001586  EE20 F006          	lfsr	2,6
  5849  00158A  517F               	movf	f_open@fp& (0+255),w,b
  5850  00158C  26D9               	addwf	fsr2l,f,c
  5851  00158E  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5852  001590  22DA               	addwfc	fsr2h,f,c
  5853  001592  CFDE F1A2          	movff	postinc2,f_open@clst
  5854  001596  CFDE F1A3          	movff	postinc2,f_open@clst+1
  5855  00159A  CFDE F1A4          	movff	postinc2,f_open@clst+2
  5856  00159E  CFDE F1A5          	movff	postinc2,f_open@clst+3
  5857                           
  5858                           ; BSR set to: 1
  5859                           ;ff.c: 3821: for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
  5860  0015A2  EE20 F00A          	lfsr	2,10
  5861  0015A6  517F               	movf	f_open@fp& (0+255),w,b
  5862  0015A8  26D9               	addwf	fsr2l,f,c
  5863  0015AA  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5864  0015AC  22DA               	addwfc	fsr2h,f,c
  5865  0015AE  CFDE F19E          	movff	postinc2,f_open@ofs
  5866  0015B2  CFDE F19F          	movff	postinc2,f_open@ofs+1
  5867  0015B6  CFDE F1A0          	movff	postinc2,f_open@ofs+2
  5868  0015BA  CFDE F1A1          	movff	postinc2,f_open@ofs+3
  5869  0015BE  D034               	goto	l1451
  5870  0015C0                     
  5871                           ; BSR set to: 1
  5872                           ;ff.c: 3822: clst = get_fat(&fp->obj, clst);
  5873                           
  5874                           ; BSR set to: 1
  5875  0015C0  C17F  F09B         	movff	f_open@fp,get_fat@obj
  5876  0015C4  C180  F09C         	movff	f_open@fp+1,get_fat@obj+1
  5877  0015C8  C1A2  F09D         	movff	f_open@clst,get_fat@clst
  5878  0015CC  C1A3  F09E         	movff	f_open@clst+1,get_fat@clst+1
  5879  0015D0  C1A4  F09F         	movff	f_open@clst+2,get_fat@clst+2
  5880  0015D4  C1A5  F0A0         	movff	f_open@clst+3,get_fat@clst+3
  5881  0015D8  EC17  F012         	call	_get_fat	;wreg free
  5882  0015DC  C09B  F1A2         	movff	?_get_fat,f_open@clst
  5883  0015E0  C09C  F1A3         	movff	?_get_fat+1,f_open@clst+1
  5884  0015E4  C09D  F1A4         	movff	?_get_fat+2,f_open@clst+2
  5885  0015E8  C09E  F1A5         	movff	?_get_fat+3,f_open@clst+3
  5886                           
  5887                           ;ff.c: 3823: if (clst <= 1) res = FR_INT_ERR;
  5888  0015EC  0101               	movlb	1	; () banked
  5889  0015EE  51A5               	movf	(f_open@clst+3)& (0+255),w,b
  5890  0015F0  11A4               	iorwf	(f_open@clst+2)& (0+255),w,b
  5891  0015F2  11A3               	iorwf	(f_open@clst+1)& (0+255),w,b
  5892  0015F4  E106               	bnz	l14936
  5893  0015F6  0E02               	movlw	2
  5894  0015F8  5DA2               	subwf	f_open@clst& (0+255),w,b
  5895  0015FA  B0D8               	btfsc	status,0,c
  5896  0015FC  D002               	goto	l1453
  5897                           
  5898                           ; BSR set to: 1
  5899  0015FE  0E02               	movlw	2
  5900  001600  6FA8               	movwf	f_open@res& (0+255),b
  5901  001602                     l1453:
  5902  001602                     l14936:
  5903                           
  5904                           ; BSR set to: 1
  5905                           ;ff.c: 3824: if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
  5906  001602  29A2               	incf	f_open@clst& (0+255),w,b
  5907  001604  E109               	bnz	l14940
  5908  001606  29A3               	incf	(f_open@clst+1)& (0+255),w,b
  5909  001608  E107               	bnz	l14940
  5910  00160A  29A4               	incf	(f_open@clst+2)& (0+255),w,b
  5911  00160C  E105               	bnz	l14940
  5912  00160E  29A5               	incf	(f_open@clst+3)& (0+255),w,b
  5913  001610  A4D8               	btfss	status,2,c
  5914  001612  D002               	goto	l1454
  5915                           
  5916                           ; BSR set to: 1
  5917  001614  0E01               	movlw	1
  5918  001616  6FA8               	movwf	f_open@res& (0+255),b
  5919  001618                     l1454:
  5920  001618                     l14940:
  5921                           
  5922                           ; BSR set to: 1
  5923  001618  518E               	movf	f_open@bcs& (0+255),w,b
  5924  00161A  5F9E               	subwf	f_open@ofs& (0+255),f,b
  5925  00161C  518F               	movf	(f_open@bcs+1)& (0+255),w,b
  5926  00161E  5B9F               	subwfb	(f_open@ofs+1)& (0+255),f,b
  5927  001620  5190               	movf	(f_open@bcs+2)& (0+255),w,b
  5928  001622  5BA0               	subwfb	(f_open@ofs+2)& (0+255),f,b
  5929  001624  5191               	movf	(f_open@bcs+3)& (0+255),w,b
  5930  001626  5BA1               	subwfb	(f_open@ofs+3)& (0+255),f,b
  5931  001628                     l1451:
  5932                           
  5933                           ; BSR set to: 1
  5934                           
  5935                           ; BSR set to: 1
  5936  001628  51A8               	movf	f_open@res& (0+255),w,b
  5937  00162A  A4D8               	btfss	status,2,c
  5938  00162C  D00A               	goto	u19870
  5939                           
  5940                           ; BSR set to: 1
  5941  00162E  519E               	movf	f_open@ofs& (0+255),w,b
  5942  001630  5D8E               	subwf	f_open@bcs& (0+255),w,b
  5943  001632  519F               	movf	(f_open@ofs+1)& (0+255),w,b
  5944  001634  598F               	subwfb	(f_open@bcs+1)& (0+255),w,b
  5945  001636  51A0               	movf	(f_open@ofs+2)& (0+255),w,b
  5946  001638  5990               	subwfb	(f_open@bcs+2)& (0+255),w,b
  5947  00163A  51A1               	movf	(f_open@ofs+3)& (0+255),w,b
  5948  00163C  5991               	subwfb	(f_open@bcs+3)& (0+255),w,b
  5949  00163E  A0D8               	btfss	status,0,c
  5950  001640  D7BF               	goto	l1452
  5951  001642                     u19870:
  5952                           
  5953                           ; BSR set to: 1
  5954                           ;ff.c: 3825: }
  5955                           ;ff.c: 3826: fp->clust = clst;
  5956                           
  5957                           ; BSR set to: 1
  5958                           
  5959                           ; BSR set to: 1
  5960  001642  EE20 F014          	lfsr	2,20
  5961  001646  517F               	movf	f_open@fp& (0+255),w,b
  5962  001648  26D9               	addwf	fsr2l,f,c
  5963  00164A  5180               	movf	(f_open@fp+1)& (0+255),w,b
  5964  00164C  22DA               	addwfc	fsr2h,f,c
  5965  00164E  C1A2  FFDE         	movff	f_open@clst,postinc2
  5966  001652  C1A3  FFDE         	movff	f_open@clst+1,postinc2
  5967  001656  C1A4  FFDE         	movff	f_open@clst+2,postinc2
  5968  00165A  C1A5  FFDE         	movff	f_open@clst+3,postinc2
  5969                           
  5970                           ; BSR set to: 1
  5971                           ;ff.c: 3827: if (res == FR_OK && ofs % ((UINT)512)) {
  5972  00165E  51A8               	movf	f_open@res& (0+255),w,b
  5973  001660  A4D8               	btfss	status,2,c
  5974  001662  D05D               	goto	l1460
  5975                           
  5976                           ; BSR set to: 1
  5977  001664  0EFF               	movlw	255
  5978  001666  159E               	andwf	f_open@ofs& (0+255),w,b
  5979  001668  6F84               	movwf	??_f_open& (0+255),b
  5980  00166A  0E01               	movlw	1
  5981  00166C  159F               	andwf	(f_open@ofs+1)& (0+255),w,b
  5982  00166E  6F85               	movwf	(??_f_open+1)& (0+255),b
  5983  001670  0E00               	movlw	0
  5984  001672  15A0               	andwf	(f_open@ofs+2)& (0+255),w,b
  5985  001674  6F86               	movwf	(??_f_open+2)& (0+255),b
  5986  001676  0E00               	movlw	0
  5987  001678  15A1               	andwf	(f_open@ofs+3)& (0+255),w,b
  5988  00167A  6F87               	movwf	(??_f_open+3)& (0+255),b
  5989  00167C  5184               	movf	??_f_open& (0+255),w,b
  5990  00167E  1185               	iorwf	(??_f_open+1)& (0+255),w,b
  5991  001680  1186               	iorwf	(??_f_open+2)& (0+255),w,b
  5992  001682  1187               	iorwf	(??_f_open+3)& (0+255),w,b
  5993  001684  B4D8               	btfsc	status,2,c
  5994  001686  D04B               	goto	l1460
  5995                           
  5996                           ; BSR set to: 1
  5997                           ;ff.c: 3828: sc = clst2sect(fs, clst);
  5998  001688  C1A6  F026         	movff	f_open@fs,clst2sect@fs
  5999  00168C  C1A7  F027         	movff	f_open@fs+1,clst2sect@fs+1
  6000  001690  C1A2  F028         	movff	f_open@clst,clst2sect@clst
  6001  001694  C1A3  F029         	movff	f_open@clst+1,clst2sect@clst+1
  6002  001698  C1A4  F02A         	movff	f_open@clst+2,clst2sect@clst+2
  6003  00169C  C1A5  F02B         	movff	f_open@clst+3,clst2sect@clst+3
  6004  0016A0  ECD4  F023         	call	_clst2sect	;wreg free
  6005  0016A4  C026  F19A         	movff	?_clst2sect,f_open@sc
  6006  0016A8  C027  F19B         	movff	?_clst2sect+1,f_open@sc+1
  6007  0016AC  C028  F19C         	movff	?_clst2sect+2,f_open@sc+2
  6008  0016B0  C029  F19D         	movff	?_clst2sect+3,f_open@sc+3
  6009                           
  6010                           ;ff.c: 3829: if (sc == 0) {
  6011  0016B4  0101               	movlb	1	; () banked
  6012  0016B6  519A               	movf	f_open@sc& (0+255),w,b
  6013  0016B8  119B               	iorwf	(f_open@sc+1)& (0+255),w,b
  6014  0016BA  119C               	iorwf	(f_open@sc+2)& (0+255),w,b
  6015  0016BC  119D               	iorwf	(f_open@sc+3)& (0+255),w,b
  6016  0016BE  A4D8               	btfss	status,2,c
  6017  0016C0  D003               	goto	l1459
  6018                           
  6019                           ; BSR set to: 1
  6020                           ;ff.c: 3830: res = FR_INT_ERR;
  6021  0016C2  0E02               	movlw	2
  6022  0016C4  6FA8               	movwf	f_open@res& (0+255),b
  6023                           
  6024                           ;ff.c: 3831: } else {
  6025  0016C6  D02B               	goto	l1460
  6026  0016C8                     l1459:
  6027                           
  6028                           ; BSR set to: 1
  6029                           ;ff.c: 3832: fp->sect = sc + (DWORD)(ofs / ((UINT)512));
  6030                           
  6031                           ; BSR set to: 1
  6032  0016C8  C19E  F184         	movff	f_open@ofs,??_f_open
  6033  0016CC  C19F  F185         	movff	f_open@ofs+1,??_f_open+1
  6034  0016D0  C1A0  F186         	movff	f_open@ofs+2,??_f_open+2
  6035  0016D4  C1A1  F187         	movff	f_open@ofs+3,??_f_open+3
  6036  0016D8  0E0A               	movlw	10
  6037  0016DA  D005               	goto	u19910
  6038  0016DC                     u19915:
  6039  0016DC  90D8               	bcf	status,0,c
  6040  0016DE  3387               	rrcf	(??_f_open+3)& (0+255),f,b
  6041  0016E0  3386               	rrcf	(??_f_open+2)& (0+255),f,b
  6042  0016E2  3385               	rrcf	(??_f_open+1)& (0+255),f,b
  6043  0016E4  3384               	rrcf	??_f_open& (0+255),f,b
  6044  0016E6                     u19910:
  6045  0016E6  2EE8               	decfsz	wreg,f,c
  6046  0016E8  D7F9               	goto	u19915
  6047  0016EA  519A               	movf	f_open@sc& (0+255),w,b
  6048  0016EC  2584               	addwf	??_f_open& (0+255),w,b
  6049  0016EE  6F88               	movwf	(??_f_open+4)& (0+255),b
  6050  0016F0  519B               	movf	(f_open@sc+1)& (0+255),w,b
  6051  0016F2  2185               	addwfc	(??_f_open+1)& (0+255),w,b
  6052  0016F4  6F89               	movwf	(??_f_open+5)& (0+255),b
  6053  0016F6  519C               	movf	(f_open@sc+2)& (0+255),w,b
  6054  0016F8  2186               	addwfc	(??_f_open+2)& (0+255),w,b
  6055  0016FA  6F8A               	movwf	(??_f_open+6)& (0+255),b
  6056  0016FC  519D               	movf	(f_open@sc+3)& (0+255),w,b
  6057  0016FE  2187               	addwfc	(??_f_open+3)& (0+255),w,b
  6058  001700  6F8B               	movwf	(??_f_open+7)& (0+255),b
  6059  001702  EE20 F018          	lfsr	2,24
  6060  001706  517F               	movf	f_open@fp& (0+255),w,b
  6061  001708  26D9               	addwf	fsr2l,f,c
  6062  00170A  5180               	movf	(f_open@fp+1)& (0+255),w,b
  6063  00170C  22DA               	addwfc	fsr2h,f,c
  6064  00170E  C188  FFDE         	movff	??_f_open+4,postinc2
  6065  001712  C189  FFDE         	movff	??_f_open+5,postinc2
  6066  001716  C18A  FFDE         	movff	??_f_open+6,postinc2
  6067  00171A  C18B  FFDE         	movff	??_f_open+7,postinc2
  6068  00171E                     l1460:
  6069                           
  6070                           ; BSR set to: 1
  6071                           ;ff.c: 3846: }
  6072                           ;ff.c: 3848: if (res != FR_OK) fp->obj.fs = 0;
  6073                           
  6074                           ; BSR set to: 1
  6075                           
  6076                           ;ff.c: 3836: }
  6077                           ;ff.c: 3837: }
  6078                           ;ff.c: 3841: }
  6079                           ;ff.c: 3843: }
  6080                           ;ff.c: 3845: ;
  6081                           
  6082                           ; BSR set to: 1
  6083                           
  6084                           ; BSR set to: 1
  6085                           
  6086                           ; BSR set to: 1
  6087                           
  6088                           ; BSR set to: 1
  6089  00171E  51A8               	movf	f_open@res& (0+255),w,b
  6090  001720  B4D8               	btfsc	status,2,c
  6091  001722  D008               	goto	l1461
  6092                           
  6093                           ; BSR set to: 1
  6094  001724  C17F  FFD9         	movff	f_open@fp,fsr2l
  6095  001728  C180  FFDA         	movff	f_open@fp+1,fsr2h
  6096  00172C  0E00               	movlw	0
  6097  00172E  6EDE               	movwf	postinc2,c
  6098  001730  0E00               	movlw	0
  6099  001732  6EDD               	movwf	postdec2,c
  6100  001734                     l1461:
  6101                           
  6102                           ; BSR set to: 1
  6103                           ;ff.c: 3850: return res;
  6104                           
  6105                           ; BSR set to: 1
  6106  001734  51A8               	movf	f_open@res& (0+255),w,b
  6107  001736  0012               	return	
  6108  001738                     __end_of_f_open:
  6109                           	opt stack 0
  6110                           tosu	equ	0xFFF
  6111                           tosh	equ	0xFFE
  6112                           tosl	equ	0xFFD
  6113                           pclath	equ	0xFFA
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           prodh	equ	0xFF4
  6119                           prodl	equ	0xFF3
  6120                           intcon	equ	0xFF2
  6121                           intcon2	equ	0xFF1
  6122                           intcon3	equ	0xFF0
  6123                           postinc0	equ	0xFEE
  6124                           wreg	equ	0xFE8
  6125                           postinc1	equ	0xFE6
  6126                           postdec1	equ	0xFE5
  6127                           fsr1h	equ	0xFE2
  6128                           fsr1l	equ	0xFE1
  6129                           indf2	equ	0xFDF
  6130                           postinc2	equ	0xFDE
  6131                           postdec2	equ	0xFDD
  6132                           plusw2	equ	0xFDB
  6133                           fsr2h	equ	0xFDA
  6134                           fsr2l	equ	0xFD9
  6135                           status	equ	0xFD8
  6136                           
  6137 ;; *************** function _remove_chain *****************
  6138 ;; Defined at:
  6139 ;;		line 1399 in file "bibliotecas/ff.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;  obj             2   90[BANK0 ] PTR struct .
  6142 ;;		 -> f_mkdir@sobj(14), f_unlink@dj(40), f_open@dj(40), 
  6143 ;;  clst            4   92[BANK0 ] unsigned long 
  6144 ;;  pclst           4   96[BANK0 ] unsigned long 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  nxt             4  108[BANK0 ] unsigned long 
  6147 ;;  fs              2  113[BANK0 ] PTR struct .
  6148 ;;		 -> NULL(0), fs(559), 
  6149 ;;  res             1  112[BANK0 ] enum E154
  6150 ;; Return value:  Size  Location     Type
  6151 ;;                  1    wreg      enum E154
  6152 ;; Registers used:
  6153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6159 ;;      Params:         0      10       0       0       0       0       0       0       0
  6160 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6161 ;;      Temps:          0       8       0       0       0       0       0       0       0
  6162 ;;      Totals:         0      25       0       0       0       0       0       0       0
  6163 ;;Total ram usage:       25 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:   10
  6166 ;; This function calls:
  6167 ;;		_get_fat
  6168 ;;		_put_fat
  6169 ;; This function is called by:
  6170 ;;		_f_open
  6171 ;;		_f_truncate
  6172 ;;		_f_unlink
  6173 ;;		_f_mkdir
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           	psect	text17
  6178  003506                     __ptext17:
  6179                           	opt stack 0
  6180  003506                     _remove_chain:
  6181                           	opt stack 17
  6182                           
  6183                           ;ff.c: 1405: FRESULT res = FR_OK;
  6184                           
  6185                           ; BSR set to: 1
  6186                           ;incstack = 0
  6187  003506  0E00               	movlw	0
  6188  003508  0100               	movlb	0	; () banked
  6189  00350A  6FD0               	movwf	remove_chain@res& (0+255),b
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;ff.c: 1406: DWORD nxt;
  6193                           ;ff.c: 1407: FATFS *fs = obj->fs;
  6194  00350C  C0BA  FFD9         	movff	remove_chain@obj,fsr2l
  6195  003510  C0BB  FFDA         	movff	remove_chain@obj+1,fsr2h
  6196  003514  CFDE F0D1          	movff	postinc2,remove_chain@fs
  6197  003518  CFDD F0D2          	movff	postdec2,remove_chain@fs+1
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;ff.c: 1415: if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;
  6201  00351C  51BF               	movf	(remove_chain@clst+3)& (0+255),w,b
  6202  00351E  11BE               	iorwf	(remove_chain@clst+2)& (0+255),w,b
  6203  003520  11BD               	iorwf	(remove_chain@clst+1)& (0+255),w,b
  6204  003522  E104               	bnz	u18870
  6205  003524  0E02               	movlw	2
  6206  003526  5DBC               	subwf	remove_chain@clst& (0+255),w,b
  6207  003528  A0D8               	btfss	status,0,c
  6208  00352A  D010               	goto	u18880
  6209  00352C                     u18870:
  6210                           
  6211                           ; BSR set to: 0
  6212  00352C  EE20 F013          	lfsr	2,19
  6213  003530  51D1               	movf	remove_chain@fs& (0+255),w,b
  6214  003532  26D9               	addwf	fsr2l,f,c
  6215  003534  51D2               	movf	(remove_chain@fs+1)& (0+255),w,b
  6216  003536  22DA               	addwfc	fsr2h,f,c
  6217  003538  50DE               	movf	postinc2,w,c
  6218  00353A  5DBC               	subwf	remove_chain@clst& (0+255),w,b
  6219  00353C  50DE               	movf	postinc2,w,c
  6220  00353E  59BD               	subwfb	(remove_chain@clst+1)& (0+255),w,b
  6221  003540  50DE               	movf	postinc2,w,c
  6222  003542  59BE               	subwfb	(remove_chain@clst+2)& (0+255),w,b
  6223  003544  50DE               	movf	postinc2,w,c
  6224  003546  59BF               	subwfb	(remove_chain@clst+3)& (0+255),w,b
  6225  003548  A0D8               	btfss	status,0,c
  6226  00354A  D002               	goto	l1086
  6227  00354C                     u18880:
  6228                           
  6229                           ; BSR set to: 0
  6230                           
  6231                           ; BSR set to: 0
  6232  00354C  0E02               	movlw	2
  6233                           
  6234                           ; BSR set to: 0
  6235  00354E  0012               	return	
  6236  003550                     l1086:
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;ff.c: 1418: if (pclst != 0 && (!0 || fs->fs_type != 4 || obj->stat != 2)) {
  6240                           
  6241                           ; BSR set to: 0
  6242  003550  51C0               	movf	remove_chain@pclst& (0+255),w,b
  6243  003552  11C1               	iorwf	(remove_chain@pclst+1)& (0+255),w,b
  6244  003554  11C2               	iorwf	(remove_chain@pclst+2)& (0+255),w,b
  6245  003556  11C3               	iorwf	(remove_chain@pclst+3)& (0+255),w,b
  6246  003558  B4D8               	btfsc	status,2,c
  6247  00355A  D01D               	goto	l1093
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;ff.c: 1419: res = put_fat(fs, pclst, 0xFFFFFFFF);
  6251                           
  6252                           ; BSR set to: 0
  6253                           
  6254                           ; BSR set to: 0
  6255                           
  6256                           ; BSR set to: 0
  6257                           
  6258                           ; BSR set to: 0
  6259  00355C  C0D1  F09B         	movff	remove_chain@fs,put_fat@fs
  6260  003560  C0D2  F09C         	movff	remove_chain@fs+1,put_fat@fs+1
  6261  003564  C0C0  F09D         	movff	remove_chain@pclst,put_fat@clst
  6262  003568  C0C1  F09E         	movff	remove_chain@pclst+1,put_fat@clst+1
  6263  00356C  C0C2  F09F         	movff	remove_chain@pclst+2,put_fat@clst+2
  6264  003570  C0C3  F0A0         	movff	remove_chain@pclst+3,put_fat@clst+3
  6265  003574  0EFF               	movlw	255
  6266  003576  6FA1               	movwf	put_fat@val& (0+255),b
  6267  003578  0EFF               	movlw	255
  6268  00357A  6FA2               	movwf	(put_fat@val+1)& (0+255),b
  6269  00357C  0EFF               	movlw	255
  6270  00357E  6FA3               	movwf	(put_fat@val+2)& (0+255),b
  6271  003580  0EFF               	movlw	255
  6272  003582  6FA4               	movwf	(put_fat@val+3)& (0+255),b
  6273  003584  EC0F  F00E         	call	_put_fat	;wreg free
  6274  003588  0100               	movlb	0	; () banked
  6275  00358A  6FD0               	movwf	remove_chain@res& (0+255),b
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;ff.c: 1420: if (res != FR_OK) return res;
  6279  00358C  51D0               	movf	remove_chain@res& (0+255),w,b
  6280  00358E  B4D8               	btfsc	status,2,c
  6281  003590  D002               	goto	l1093
  6282                           
  6283                           ; BSR set to: 0
  6284  003592  51D0               	movf	remove_chain@res& (0+255),w,b
  6285                           
  6286                           ; BSR set to: 0
  6287  003594  0012               	return	
  6288  003596                     l1093:
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;ff.c: 1425: nxt = get_fat(obj, clst);
  6292                           
  6293                           ; BSR set to: 0
  6294                           
  6295                           ;ff.c: 1421: }
  6296                           ;ff.c: 1424: do {
  6297                           
  6298                           ; BSR set to: 0
  6299                           
  6300                           ; BSR set to: 0
  6301  003596  C0BA  F09B         	movff	remove_chain@obj,get_fat@obj
  6302  00359A  C0BB  F09C         	movff	remove_chain@obj+1,get_fat@obj+1
  6303  00359E  C0BC  F09D         	movff	remove_chain@clst,get_fat@clst
  6304  0035A2  C0BD  F09E         	movff	remove_chain@clst+1,get_fat@clst+1
  6305  0035A6  C0BE  F09F         	movff	remove_chain@clst+2,get_fat@clst+2
  6306  0035AA  C0BF  F0A0         	movff	remove_chain@clst+3,get_fat@clst+3
  6307  0035AE  EC17  F012         	call	_get_fat	;wreg free
  6308  0035B2  C09B  F0CC         	movff	?_get_fat,remove_chain@nxt
  6309  0035B6  C09C  F0CD         	movff	?_get_fat+1,remove_chain@nxt+1
  6310  0035BA  C09D  F0CE         	movff	?_get_fat+2,remove_chain@nxt+2
  6311  0035BE  C09E  F0CF         	movff	?_get_fat+3,remove_chain@nxt+3
  6312                           
  6313                           ;ff.c: 1426: if (nxt == 0) break;
  6314  0035C2  0100               	movlb	0	; () banked
  6315  0035C4  51CC               	movf	remove_chain@nxt& (0+255),w,b
  6316  0035C6  11CD               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  6317  0035C8  11CE               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  6318  0035CA  11CF               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  6319  0035CC  B4D8               	btfsc	status,2,c
  6320  0035CE  D07D               	goto	u18990
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;ff.c: 1427: if (nxt == 1) return FR_INT_ERR;
  6324                           
  6325                           ; BSR set to: 0
  6326                           
  6327                           ; BSR set to: 0
  6328  0035D0  05CC               	decf	remove_chain@nxt& (0+255),w,b
  6329  0035D2  11CD               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  6330  0035D4  11CE               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  6331  0035D6  11CF               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  6332  0035D8  A4D8               	btfss	status,2,c
  6333  0035DA  D002               	goto	l1097
  6334                           
  6335                           ; BSR set to: 0
  6336  0035DC  0E02               	movlw	2
  6337                           
  6338                           ; BSR set to: 0
  6339  0035DE  0012               	return	
  6340  0035E0                     l1097:
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;ff.c: 1428: if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
  6344                           
  6345                           ; BSR set to: 0
  6346  0035E0  29CC               	incf	remove_chain@nxt& (0+255),w,b
  6347  0035E2  E109               	bnz	l14420
  6348  0035E4  29CD               	incf	(remove_chain@nxt+1)& (0+255),w,b
  6349  0035E6  E107               	bnz	l14420
  6350  0035E8  29CE               	incf	(remove_chain@nxt+2)& (0+255),w,b
  6351  0035EA  E105               	bnz	l14420
  6352  0035EC  29CF               	incf	(remove_chain@nxt+3)& (0+255),w,b
  6353  0035EE  A4D8               	btfss	status,2,c
  6354  0035F0  D002               	goto	u18960
  6355                           
  6356                           ; BSR set to: 0
  6357  0035F2  0E01               	movlw	1
  6358                           
  6359                           ; BSR set to: 0
  6360  0035F4  0012               	return	
  6361  0035F6                     u18960:
  6362  0035F6                     l14420:
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;ff.c: 1430: res = put_fat(fs, clst, 0);
  6366  0035F6  C0D1  F09B         	movff	remove_chain@fs,put_fat@fs
  6367  0035FA  C0D2  F09C         	movff	remove_chain@fs+1,put_fat@fs+1
  6368  0035FE  C0BC  F09D         	movff	remove_chain@clst,put_fat@clst
  6369  003602  C0BD  F09E         	movff	remove_chain@clst+1,put_fat@clst+1
  6370  003606  C0BE  F09F         	movff	remove_chain@clst+2,put_fat@clst+2
  6371  00360A  C0BF  F0A0         	movff	remove_chain@clst+3,put_fat@clst+3
  6372  00360E  0E00               	movlw	0
  6373  003610  6FA1               	movwf	put_fat@val& (0+255),b
  6374  003612  0E00               	movlw	0
  6375  003614  6FA2               	movwf	(put_fat@val+1)& (0+255),b
  6376  003616  0E00               	movlw	0
  6377  003618  6FA3               	movwf	(put_fat@val+2)& (0+255),b
  6378  00361A  0E00               	movlw	0
  6379  00361C  6FA4               	movwf	(put_fat@val+3)& (0+255),b
  6380  00361E  EC0F  F00E         	call	_put_fat	;wreg free
  6381  003622  0100               	movlb	0	; () banked
  6382  003624  6FD0               	movwf	remove_chain@res& (0+255),b
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;ff.c: 1431: if (res != FR_OK) return res;
  6386  003626  51D0               	movf	remove_chain@res& (0+255),w,b
  6387  003628  B4D8               	btfsc	status,2,c
  6388  00362A  D002               	goto	l1102
  6389                           
  6390                           ; BSR set to: 0
  6391  00362C  51D0               	movf	remove_chain@res& (0+255),w,b
  6392                           
  6393                           ; BSR set to: 0
  6394  00362E  0012               	return	
  6395  003630                     l1102:
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;ff.c: 1432: }
  6399                           ;ff.c: 1433: if (fs->free_clst < fs->n_fatent - 2) {
  6400                           
  6401                           ; BSR set to: 0
  6402                           
  6403                           ; BSR set to: 0
  6404  003630  EE20 F013          	lfsr	2,19
  6405  003634  51D1               	movf	remove_chain@fs& (0+255),w,b
  6406  003636  26D9               	addwf	fsr2l,f,c
  6407  003638  51D2               	movf	(remove_chain@fs+1)& (0+255),w,b
  6408  00363A  22DA               	addwfc	fsr2h,f,c
  6409  00363C  0EFE               	movlw	254
  6410  00363E  24DE               	addwf	postinc2,w,c
  6411  003640  6FC4               	movwf	??_remove_chain& (0+255),b
  6412  003642  0EFF               	movlw	255
  6413  003644  20DE               	addwfc	postinc2,w,c
  6414  003646  6FC5               	movwf	(??_remove_chain+1)& (0+255),b
  6415  003648  0EFF               	movlw	255
  6416  00364A  20DE               	addwfc	postinc2,w,c
  6417  00364C  6FC6               	movwf	(??_remove_chain+2)& (0+255),b
  6418  00364E  0EFF               	movlw	255
  6419  003650  20DE               	addwfc	postinc2,w,c
  6420  003652  6FC7               	movwf	(??_remove_chain+3)& (0+255),b
  6421  003654  EE20 F00F          	lfsr	2,15
  6422  003658  51D1               	movf	remove_chain@fs& (0+255),w,b
  6423  00365A  26D9               	addwf	fsr2l,f,c
  6424  00365C  51D2               	movf	(remove_chain@fs+1)& (0+255),w,b
  6425  00365E  22DA               	addwfc	fsr2h,f,c
  6426  003660  51C4               	movf	??_remove_chain& (0+255),w,b
  6427  003662  5CDE               	subwf	postinc2,w,c
  6428  003664  51C5               	movf	(??_remove_chain+1)& (0+255),w,b
  6429  003666  58DE               	subwfb	postinc2,w,c
  6430  003668  51C6               	movf	(??_remove_chain+2)& (0+255),w,b
  6431  00366A  58DE               	subwfb	postinc2,w,c
  6432  00366C  51C7               	movf	(??_remove_chain+3)& (0+255),w,b
  6433  00366E  58DE               	subwfb	postinc2,w,c
  6434  003670  B0D8               	btfsc	status,0,c
  6435  003672  D013               	goto	l1103
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;ff.c: 1434: fs->free_clst++;
  6439  003674  EE20 F00F          	lfsr	2,15
  6440  003678  51D1               	movf	remove_chain@fs& (0+255),w,b
  6441  00367A  26D9               	addwf	fsr2l,f,c
  6442  00367C  51D2               	movf	(remove_chain@fs+1)& (0+255),w,b
  6443  00367E  22DA               	addwfc	fsr2h,f,c
  6444  003680  2ADE               	incf	postinc2,f,c
  6445  003682  0E00               	movlw	0
  6446  003684  22DE               	addwfc	postinc2,f,c
  6447  003686  22DE               	addwfc	postinc2,f,c
  6448  003688  22DE               	addwfc	postinc2,f,c
  6449                           
  6450                           ;ff.c: 1435: fs->fsi_flag |= 1;
  6451  00368A  EE20 F004          	lfsr	2,4
  6452  00368E  51D1               	movf	remove_chain@fs& (0+255),w,b
  6453  003690  26D9               	addwf	fsr2l,f,c
  6454  003692  51D2               	movf	(remove_chain@fs+1)& (0+255),w,b
  6455  003694  22DA               	addwfc	fsr2h,f,c
  6456  003696  0E00               	movlw	0
  6457  003698  80DB               	bsf	plusw2,0,c
  6458  00369A                     l1103:
  6459                           
  6460                           ; BSR set to: 0
  6461                           ;ff.c: 1436: }
  6462                           ;ff.c: 1455: clst = nxt;
  6463                           
  6464                           ; BSR set to: 0
  6465  00369A  C0CC  F0BC         	movff	remove_chain@nxt,remove_chain@clst
  6466  00369E  C0CD  F0BD         	movff	remove_chain@nxt+1,remove_chain@clst+1
  6467  0036A2  C0CE  F0BE         	movff	remove_chain@nxt+2,remove_chain@clst+2
  6468  0036A6  C0CF  F0BF         	movff	remove_chain@nxt+3,remove_chain@clst+3
  6469                           
  6470                           ;ff.c: 1456: } while (clst < fs->n_fatent);
  6471  0036AA  EE20 F013          	lfsr	2,19
  6472  0036AE  51D1               	movf	remove_chain@fs& (0+255),w,b
  6473  0036B0  26D9               	addwf	fsr2l,f,c
  6474  0036B2  51D2               	movf	(remove_chain@fs+1)& (0+255),w,b
  6475  0036B4  22DA               	addwfc	fsr2h,f,c
  6476  0036B6  50DE               	movf	postinc2,w,c
  6477  0036B8  5DBC               	subwf	remove_chain@clst& (0+255),w,b
  6478  0036BA  50DE               	movf	postinc2,w,c
  6479  0036BC  59BD               	subwfb	(remove_chain@clst+1)& (0+255),w,b
  6480  0036BE  50DE               	movf	postinc2,w,c
  6481  0036C0  59BE               	subwfb	(remove_chain@clst+2)& (0+255),w,b
  6482  0036C2  50DE               	movf	postinc2,w,c
  6483  0036C4  59BF               	subwfb	(remove_chain@clst+3)& (0+255),w,b
  6484  0036C6  A0D8               	btfss	status,0,c
  6485  0036C8  D766               	goto	l1093
  6486  0036CA                     u18990:
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;ff.c: 1484: return FR_OK;
  6490                           
  6491                           ; BSR set to: 0
  6492  0036CA  0E00               	movlw	0
  6493  0036CC  0012               	return	
  6494  0036CE                     __end_of_remove_chain:
  6495                           	opt stack 0
  6496                           tosu	equ	0xFFF
  6497                           tosh	equ	0xFFE
  6498                           tosl	equ	0xFFD
  6499                           pclath	equ	0xFFA
  6500                           tblptru	equ	0xFF8
  6501                           tblptrh	equ	0xFF7
  6502                           tblptrl	equ	0xFF6
  6503                           tablat	equ	0xFF5
  6504                           prodh	equ	0xFF4
  6505                           prodl	equ	0xFF3
  6506                           intcon	equ	0xFF2
  6507                           intcon2	equ	0xFF1
  6508                           intcon3	equ	0xFF0
  6509                           postinc0	equ	0xFEE
  6510                           wreg	equ	0xFE8
  6511                           postinc1	equ	0xFE6
  6512                           postdec1	equ	0xFE5
  6513                           fsr1h	equ	0xFE2
  6514                           fsr1l	equ	0xFE1
  6515                           indf2	equ	0xFDF
  6516                           postinc2	equ	0xFDE
  6517                           postdec2	equ	0xFDD
  6518                           plusw2	equ	0xFDB
  6519                           fsr2h	equ	0xFDA
  6520                           fsr2l	equ	0xFD9
  6521                           status	equ	0xFD8
  6522                           
  6523 ;; *************** function _follow_path *****************
  6524 ;; Defined at:
  6525 ;;		line 3003 in file "bibliotecas/ff.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;  dp              2    0[BANK1 ] PTR struct .
  6528 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@dj(40), f_unlink@dj(40), 
  6529 ;;		 -> f_stat@dj(40), f_open@dj(40), 
  6530 ;;  path            2    2[BANK1 ] PTR const unsigned char 
  6531 ;;		 -> STR_12(7), STR_10(1), 
  6532 ;; Auto vars:     Size  Location     Type
  6533 ;;  fs              2    8[BANK1 ] PTR struct .
  6534 ;;		 -> NULL(0), fs(559), 
  6535 ;;  res             1   11[BANK1 ] enum E154
  6536 ;;  ns              1   10[BANK1 ] unsigned char 
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  1    wreg      enum E154
  6539 ;; Registers used:
  6540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6546 ;;      Params:         0       0       4       0       0       0       0       0       0
  6547 ;;      Locals:         0       0       4       0       0       0       0       0       0
  6548 ;;      Temps:          0       0       4       0       0       0       0       0       0
  6549 ;;      Totals:         0       0      12       0       0       0       0       0       0
  6550 ;;Total ram usage:       12 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:   13
  6553 ;; This function calls:
  6554 ;;		_create_name
  6555 ;;		_dir_find
  6556 ;;		_dir_sdi
  6557 ;;		_ld_clust
  6558 ;; This function is called by:
  6559 ;;		_f_open
  6560 ;;		_f_opendir
  6561 ;;		_f_stat
  6562 ;;		_f_unlink
  6563 ;;		_f_mkdir
  6564 ;;		_f_rename
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           	psect	text18
  6569  003B62                     __ptext18:
  6570                           	opt stack 0
  6571  003B62                     _follow_path:
  6572                           	opt stack 14
  6573                           
  6574                           ;ff.c: 3008: FRESULT res;
  6575                           ;ff.c: 3009: BYTE ns;
  6576                           ;ff.c: 3010: FATFS *fs = dp->obj.fs;
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;incstack = 0
  6580  003B62  C173  FFD9         	movff	follow_path@dp,fsr2l
  6581  003B66  C174  FFDA         	movff	follow_path@dp+1,fsr2h
  6582  003B6A  CFDE F17B          	movff	postinc2,follow_path@fs
  6583  003B6E  CFDD F17C          	movff	postdec2,follow_path@fs+1
  6584                           
  6585                           ;ff.c: 3018: {
  6586                           ;ff.c: 3019: while (((*path) == '/' || (*path) == '\\')) path++;
  6587  003B72  D003               	goto	l1294
  6588  003B74  0101               	movlb	1	; () banked
  6589  003B76  4B75               	infsnz	follow_path@path& (0+255),f,b
  6590  003B78  2B76               	incf	(follow_path@path+1)& (0+255),f,b
  6591  003B7A                     l1294:
  6592                           
  6593                           ; BSR set to: 1
  6594  003B7A  C175  FFF6         	movff	follow_path@path,tblptrl
  6595  003B7E  C176  FFF7         	movff	follow_path@path+1,tblptrh
  6596  003B82                     	if	0	;tblptru may be non-zero
  6597  003B82                     	endif
  6598  003B82                     	if	0	;tblptru may be non-zero
  6599  003B82                     	endif
  6600  003B82  0008               	tblrd		*
  6601  003B84  50F5               	movf	tablat,w,c
  6602  003B86  0A2F               	xorlw	47
  6603  003B88  B4D8               	btfsc	status,2,c
  6604  003B8A  D7F4               	goto	l1295
  6605  003B8C  C175  FFF6         	movff	follow_path@path,tblptrl
  6606  003B90  C176  FFF7         	movff	follow_path@path+1,tblptrh
  6607  003B94                     	if	0	;tblptru may be non-zero
  6608  003B94                     	endif
  6609  003B94                     	if	0	;tblptru may be non-zero
  6610  003B94                     	endif
  6611  003B94  0008               	tblrd		*
  6612  003B96  50F5               	movf	tablat,w,c
  6613  003B98  0A5C               	xorlw	92
  6614  003B9A  B4D8               	btfsc	status,2,c
  6615  003B9C  D7EB               	goto	l1295
  6616                           
  6617                           ;ff.c: 3020: dp->obj.sclust = 0;
  6618  003B9E  0101               	movlb	1	; () banked
  6619  003BA0  EE20 F006          	lfsr	2,6
  6620  003BA4  5173               	movf	follow_path@dp& (0+255),w,b
  6621  003BA6  26D9               	addwf	fsr2l,f,c
  6622  003BA8  5174               	movf	(follow_path@dp+1)& (0+255),w,b
  6623  003BAA  22DA               	addwfc	fsr2h,f,c
  6624  003BAC  6ADE               	clrf	postinc2,c
  6625  003BAE  6ADE               	clrf	postinc2,c
  6626  003BB0  6ADE               	clrf	postinc2,c
  6627  003BB2  6ADD               	clrf	postdec2,c
  6628                           
  6629                           ; BSR set to: 1
  6630                           ;ff.c: 3021: }
  6631                           ;ff.c: 3039: if ((UINT)*path < ' ') {
  6632  003BB4  C175  FFF6         	movff	follow_path@path,tblptrl
  6633  003BB8  C176  FFF7         	movff	follow_path@path+1,tblptrh
  6634  003BBC                     	if	0	;tblptru may be non-zero
  6635  003BBC                     	endif
  6636  003BBC                     	if	0	;tblptru may be non-zero
  6637  003BBC                     	endif
  6638  003BBC  0E20               	movlw	32
  6639  003BBE  0008               	tblrd		*
  6640  003BC0  60F5               	cpfslt	tablat,c
  6641  003BC2  D019               	goto	l1297
  6642                           
  6643                           ; BSR set to: 1
  6644                           ;ff.c: 3040: dp->fn[11] = 0x80;
  6645  003BC4  EE20 F027          	lfsr	2,39
  6646  003BC8  5173               	movf	follow_path@dp& (0+255),w,b
  6647  003BCA  26D9               	addwf	fsr2l,f,c
  6648  003BCC  5174               	movf	(follow_path@dp+1)& (0+255),w,b
  6649  003BCE  22DA               	addwfc	fsr2h,f,c
  6650  003BD0  0E80               	movlw	128
  6651  003BD2  6EDF               	movwf	indf2,c
  6652                           
  6653                           ; BSR set to: 1
  6654                           ;ff.c: 3041: res = dir_sdi(dp, 0);
  6655  003BD4  C173  F0B5         	movff	follow_path@dp,dir_sdi@dp
  6656  003BD8  C174  F0B6         	movff	follow_path@dp+1,dir_sdi@dp+1
  6657  003BDC  0E00               	movlw	0
  6658  003BDE  0100               	movlb	0	; () banked
  6659  003BE0  6FB7               	movwf	dir_sdi@ofs& (0+255),b
  6660  003BE2  0E00               	movlw	0
  6661  003BE4  6FB8               	movwf	(dir_sdi@ofs+1)& (0+255),b
  6662  003BE6  0E00               	movlw	0
  6663  003BE8  6FB9               	movwf	(dir_sdi@ofs+2)& (0+255),b
  6664  003BEA  0E00               	movlw	0
  6665  003BEC  6FBA               	movwf	(dir_sdi@ofs+3)& (0+255),b
  6666  003BEE  EC99  F015         	call	_dir_sdi	;wreg free
  6667  003BF2  0101               	movlb	1	; () banked
  6668  003BF4  D028               	goto	L8
  6669  003BF6                     l1297:
  6670                           
  6671                           ; BSR set to: 1
  6672                           ;ff.c: 3045: res = create_name(dp, &path);
  6673                           
  6674                           ; BSR set to: 1
  6675                           
  6676                           ;ff.c: 3044: for (;;) {
  6677                           
  6678                           ; BSR set to: 1
  6679  003BF6  C173  F022         	movff	follow_path@dp,create_name@dp
  6680  003BFA  C174  F023         	movff	follow_path@dp+1,create_name@dp+1
  6681  003BFE  0E75               	movlw	low follow_path@path
  6682  003C00  6E24               	movwf	create_name@path,c
  6683  003C02  0E01               	movlw	high follow_path@path
  6684  003C04  6E25               	movwf	create_name@path+1,c
  6685  003C06  EC32  F017         	call	_create_name	;wreg free
  6686  003C0A  0101               	movlb	1	; () banked
  6687  003C0C  6F7E               	movwf	follow_path@res& (0+255),b
  6688                           
  6689                           ; BSR set to: 1
  6690                           ;ff.c: 3046: if (res != FR_OK) break;
  6691  003C0E  517E               	movf	follow_path@res& (0+255),w,b
  6692  003C10  A4D8               	btfss	status,2,c
  6693  003C12  D059               	goto	l1301
  6694                           
  6695                           ; BSR set to: 1
  6696                           ;ff.c: 3047: res = dir_find(dp);
  6697                           
  6698                           ; BSR set to: 1
  6699                           
  6700                           ; BSR set to: 1
  6701  003C14  C173  F0F5         	movff	follow_path@dp,dir_find@dp
  6702  003C18  C174  F0F6         	movff	follow_path@dp+1,dir_find@dp+1
  6703  003C1C  EC08  F01F         	call	_dir_find	;wreg free
  6704  003C20  0101               	movlb	1	; () banked
  6705  003C22  6F7E               	movwf	follow_path@res& (0+255),b
  6706                           
  6707                           ; BSR set to: 1
  6708                           ;ff.c: 3048: ns = dp->fn[11];
  6709  003C24  EE20 F027          	lfsr	2,39
  6710  003C28  5173               	movf	follow_path@dp& (0+255),w,b
  6711  003C2A  26D9               	addwf	fsr2l,f,c
  6712  003C2C  5174               	movf	(follow_path@dp+1)& (0+255),w,b
  6713  003C2E  22DA               	addwfc	fsr2h,f,c
  6714  003C30  50DF               	movf	indf2,w,c
  6715  003C32  6F7D               	movwf	follow_path@ns& (0+255),b
  6716                           
  6717                           ; BSR set to: 1
  6718                           ;ff.c: 3049: if (res != FR_OK) {
  6719  003C34  517E               	movf	follow_path@res& (0+255),w,b
  6720  003C36  B4D8               	btfsc	status,2,c
  6721  003C38  D008               	goto	l1302
  6722                           
  6723                           ; BSR set to: 1
  6724                           ;ff.c: 3050: if (res == FR_NO_FILE) {
  6725  003C3A  0E04               	movlw	4
  6726  003C3C  197E               	xorwf	follow_path@res& (0+255),w,b
  6727  003C3E  B4D8               	btfsc	status,2,c
  6728                           
  6729                           ; BSR set to: 1
  6730                           ;ff.c: 3056: if (!(ns & 0x04)) res = FR_NO_PATH;
  6731                           
  6732                           ;ff.c: 3055: } else {
  6733                           
  6734                           ; BSR set to: 1
  6735                           ;ff.c: 3054: res = FR_OK;
  6736                           
  6737                           ; BSR set to: 1
  6738                           ;ff.c: 3053: dp->fn[11] = 0x80;
  6739                           
  6740                           ; BSR set to: 1
  6741                           
  6742                           ; BSR set to: 1
  6743                           
  6744                           ; BSR set to: 1
  6745                           ;ff.c: 3052: if (!(ns & 0x04)) continue;
  6746                           
  6747                           ; BSR set to: 1
  6748                           
  6749                           ; BSR set to: 1
  6750                           ;ff.c: 3051: if (0 && (ns & 0x20)) {
  6751  003C40  B57D               	btfsc	follow_path@ns& (0+255),2,b
  6752  003C42  D041               	goto	l1301
  6753  003C44  D00C               	goto	u19120
  6754  003C46                     L8:
  6755  003C46  6F7E               	movwf	follow_path@res& (0+255),b
  6756                           
  6757                           ; BSR set to: 1
  6758                           ;ff.c: 3057: }
  6759                           ;ff.c: 3058: }
  6760                           ;ff.c: 3059: break;
  6761                           
  6762                           ; BSR set to: 1
  6763                           
  6764                           ; BSR set to: 1
  6765  003C48  D03E               	goto	l1301
  6766  003C4A                     l1302:
  6767                           
  6768                           ; BSR set to: 1
  6769                           ;ff.c: 3060: }
  6770                           ;ff.c: 3061: if (ns & 0x04) break;
  6771  003C4A  B57D               	btfsc	follow_path@ns& (0+255),2,b
  6772  003C4C  D03C               	goto	l1301
  6773                           
  6774                           ; BSR set to: 1
  6775                           ;ff.c: 3063: if (!(dp->obj.attr & 0x10)) {
  6776                           
  6777                           ; BSR set to: 1
  6778                           
  6779                           ; BSR set to: 1
  6780  003C4E  EE20 F004          	lfsr	2,4
  6781  003C52  5173               	movf	follow_path@dp& (0+255),w,b
  6782  003C54  26D9               	addwf	fsr2l,f,c
  6783  003C56  5174               	movf	(follow_path@dp+1)& (0+255),w,b
  6784  003C58  22DA               	addwfc	fsr2h,f,c
  6785  003C5A  B8DF               	btfsc	indf2,4,c
  6786  003C5C  D002               	goto	l1310
  6787  003C5E                     u19120:
  6788                           
  6789                           ; BSR set to: 1
  6790                           ;ff.c: 3064: res = FR_NO_PATH; break;
  6791  003C5E  0E05               	movlw	5
  6792  003C60  D7F2               	goto	L8
  6793  003C62                     l1310:
  6794                           
  6795                           ; BSR set to: 1
  6796                           ;ff.c: 3065: }
  6797                           ;ff.c: 3074: {
  6798                           ;ff.c: 3075: dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % ((UINT)512));
  6799                           
  6800                           ; BSR set to: 1
  6801  003C62  C17B  F021         	movff	follow_path@fs,ld_clust@fs
  6802  003C66  C17C  F022         	movff	follow_path@fs+1,ld_clust@fs+1
  6803  003C6A  0EFF               	movlw	255
  6804  003C6C  6F77               	movwf	??_follow_path& (0+255),b
  6805  003C6E  0E01               	movlw	1
  6806  003C70  6F78               	movwf	(??_follow_path+1)& (0+255),b
  6807  003C72  EE20 F00E          	lfsr	2,14
  6808  003C76  5173               	movf	follow_path@dp& (0+255),w,b
  6809  003C78  26D9               	addwf	fsr2l,f,c
  6810  003C7A  5174               	movf	(follow_path@dp+1)& (0+255),w,b
  6811  003C7C  22DA               	addwfc	fsr2h,f,c
  6812  003C7E  CFDE F179          	movff	postinc2,??_follow_path+2
  6813  003C82  CFDD F17A          	movff	postdec2,??_follow_path+3
  6814  003C86  5177               	movf	??_follow_path& (0+255),w,b
  6815  003C88  1779               	andwf	(??_follow_path+2)& (0+255),f,b
  6816  003C8A  5178               	movf	(??_follow_path+1)& (0+255),w,b
  6817  003C8C  177A               	andwf	(??_follow_path+3)& (0+255),f,b
  6818  003C8E  0E2F               	movlw	47
  6819  003C90  2779               	addwf	(??_follow_path+2)& (0+255),f,b
  6820  003C92  0E00               	movlw	0
  6821  003C94  237A               	addwfc	(??_follow_path+3)& (0+255),f,b
  6822  003C96  5179               	movf	(??_follow_path+2)& (0+255),w,b
  6823  003C98  257B               	addwf	follow_path@fs& (0+255),w,b
  6824  003C9A  6E23               	movwf	ld_clust@dir,c
  6825  003C9C  517A               	movf	(??_follow_path+3)& (0+255),w,b
  6826  003C9E  217C               	addwfc	(follow_path@fs+1)& (0+255),w,b
  6827  003CA0  6E24               	movwf	ld_clust@dir+1,c
  6828  003CA2  ECF0  F028         	call	_ld_clust	;wreg free
  6829  003CA6  0101               	movlb	1	; () banked
  6830  003CA8  EE20 F006          	lfsr	2,6
  6831  003CAC  5173               	movf	follow_path@dp& (0+255),w,b
  6832  003CAE  26D9               	addwf	fsr2l,f,c
  6833  003CB0  5174               	movf	(follow_path@dp+1)& (0+255),w,b
  6834  003CB2  22DA               	addwfc	fsr2h,f,c
  6835  003CB4  C021  FFDE         	movff	?_ld_clust,postinc2
  6836  003CB8  C022  FFDE         	movff	?_ld_clust+1,postinc2
  6837  003CBC  C023  FFDE         	movff	?_ld_clust+2,postinc2
  6838  003CC0  C024  FFDE         	movff	?_ld_clust+3,postinc2
  6839                           
  6840                           ; BSR set to: 1
  6841                           ;ff.c: 3076: }
  6842                           ;ff.c: 3077: }
  6843  003CC4  D798               	goto	l1297
  6844  003CC6                     l1301:
  6845                           
  6846                           ; BSR set to: 1
  6847                           ;ff.c: 3078: }
  6848                           ;ff.c: 3080: return res;
  6849                           
  6850                           ; BSR set to: 1
  6851                           
  6852                           ; BSR set to: 1
  6853  003CC6  517E               	movf	follow_path@res& (0+255),w,b
  6854  003CC8  0012               	return	
  6855  003CCA                     __end_of_follow_path:
  6856                           	opt stack 0
  6857                           tosu	equ	0xFFF
  6858                           tosh	equ	0xFFE
  6859                           tosl	equ	0xFFD
  6860                           pclath	equ	0xFFA
  6861                           tblptru	equ	0xFF8
  6862                           tblptrh	equ	0xFF7
  6863                           tblptrl	equ	0xFF6
  6864                           tablat	equ	0xFF5
  6865                           prodh	equ	0xFF4
  6866                           prodl	equ	0xFF3
  6867                           intcon	equ	0xFF2
  6868                           intcon2	equ	0xFF1
  6869                           intcon3	equ	0xFF0
  6870                           postinc0	equ	0xFEE
  6871                           wreg	equ	0xFE8
  6872                           postinc1	equ	0xFE6
  6873                           postdec1	equ	0xFE5
  6874                           fsr1h	equ	0xFE2
  6875                           fsr1l	equ	0xFE1
  6876                           indf2	equ	0xFDF
  6877                           postinc2	equ	0xFDE
  6878                           postdec2	equ	0xFDD
  6879                           plusw2	equ	0xFDB
  6880                           fsr2h	equ	0xFDA
  6881                           fsr2l	equ	0xFD9
  6882                           status	equ	0xFD8
  6883                           
  6884 ;; *************** function _ld_clust *****************
  6885 ;; Defined at:
  6886 ;;		line 1817 in file "bibliotecas/ff.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;  fs              2   32[COMRAM] PTR struct .
  6889 ;;		 -> NULL(0), fs(559), 
  6890 ;;  dir             2   34[COMRAM] PTR const unsigned char 
  6891 ;;		 -> fs.win(512), NULL(0), fs(559), 
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;  cl              4   40[COMRAM] unsigned long 
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  4   32[COMRAM] unsigned long 
  6896 ;; Registers used:
  6897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6903 ;;      Params:         4       0       0       0       0       0       0       0       0
  6904 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6905 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6906 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6907 ;;Total ram usage:       12 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    3
  6910 ;; This function calls:
  6911 ;;		_ld_word
  6912 ;; This function is called by:
  6913 ;;		_follow_path
  6914 ;;		_f_open
  6915 ;;		_f_opendir
  6916 ;;		_f_unlink
  6917 ;;		_f_rename
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           	psect	text19
  6922  0051E0                     __ptext19:
  6923                           	opt stack 0
  6924  0051E0                     _ld_clust:
  6925                           	opt stack 24
  6926                           
  6927                           ;ff.c: 1822: DWORD cl;
  6928                           ;ff.c: 1824: cl = ld_word(dir + 26);
  6929                           
  6930                           ; BSR set to: 1
  6931                           ;incstack = 0
  6932  0051E0  0E1A               	movlw	26
  6933  0051E2  2423               	addwf	ld_clust@dir,w,c
  6934  0051E4  6E1A               	movwf	ld_word@ptr,c
  6935  0051E6  0E00               	movlw	0
  6936  0051E8  2024               	addwfc	ld_clust@dir+1,w,c
  6937  0051EA  6E1B               	movwf	ld_word@ptr+1,c
  6938  0051EC  EC6B  F02C         	call	_ld_word	;wreg free
  6939  0051F0  C01A  F029         	movff	?_ld_word,ld_clust@cl
  6940  0051F4  C01B  F02A         	movff	?_ld_word+1,ld_clust@cl+1
  6941  0051F8  6A2B               	clrf	ld_clust@cl+2,c
  6942  0051FA  6A2C               	clrf	ld_clust@cl+3,c
  6943                           
  6944                           ;ff.c: 1825: if (fs->fs_type == 3) {
  6945  0051FC  C021  FFD9         	movff	ld_clust@fs,fsr2l
  6946  005200  C022  FFDA         	movff	ld_clust@fs+1,fsr2h
  6947  005204  0E03               	movlw	3
  6948  005206  18DE               	xorwf	postinc2,w,c
  6949  005208  A4D8               	btfss	status,2,c
  6950  00520A  D01C               	goto	l1215
  6951                           
  6952                           ;ff.c: 1826: cl |= (DWORD)ld_word(dir + 20) << 16;
  6953  00520C  0E14               	movlw	20
  6954  00520E  2423               	addwf	ld_clust@dir,w,c
  6955  005210  6E1A               	movwf	ld_word@ptr,c
  6956  005212  0E00               	movlw	0
  6957  005214  2024               	addwfc	ld_clust@dir+1,w,c
  6958  005216  6E1B               	movwf	ld_word@ptr+1,c
  6959  005218  EC6B  F02C         	call	_ld_word	;wreg free
  6960  00521C  501A               	movf	?_ld_word,w,c
  6961  00521E  6E25               	movwf	??_ld_clust& (0+255),c
  6962  005220  501B               	movf	?_ld_word+1,w,c
  6963  005222  6E26               	movwf	(??_ld_clust+1)& (0+255),c
  6964  005224  6A27               	clrf	(??_ld_clust+2)& (0+255),c
  6965  005226  6A28               	clrf	(??_ld_clust+3)& (0+255),c
  6966  005228  C026  F028         	movff	??_ld_clust+1,??_ld_clust+3
  6967  00522C  C025  F027         	movff	??_ld_clust,??_ld_clust+2
  6968  005230  6A26               	clrf	??_ld_clust+1,c
  6969  005232  6A25               	clrf	??_ld_clust,c
  6970  005234  5025               	movf	??_ld_clust,w,c
  6971  005236  1229               	iorwf	ld_clust@cl,f,c
  6972  005238  5026               	movf	??_ld_clust+1,w,c
  6973  00523A  122A               	iorwf	ld_clust@cl+1,f,c
  6974  00523C  5027               	movf	??_ld_clust+2,w,c
  6975  00523E  122B               	iorwf	ld_clust@cl+2,f,c
  6976  005240  5028               	movf	??_ld_clust+3,w,c
  6977  005242  122C               	iorwf	ld_clust@cl+3,f,c
  6978  005244                     l1215:
  6979                           
  6980                           ;ff.c: 1827: }
  6981                           ;ff.c: 1829: return cl;
  6982  005244  C029  F021         	movff	ld_clust@cl,?_ld_clust
  6983  005248  C02A  F022         	movff	ld_clust@cl+1,?_ld_clust+1
  6984  00524C  C02B  F023         	movff	ld_clust@cl+2,?_ld_clust+2
  6985  005250  C02C  F024         	movff	ld_clust@cl+3,?_ld_clust+3
  6986  005254  0012               	return	
  6987  005256                     __end_of_ld_clust:
  6988                           	opt stack 0
  6989                           tosu	equ	0xFFF
  6990                           tosh	equ	0xFFE
  6991                           tosl	equ	0xFFD
  6992                           pclath	equ	0xFFA
  6993                           tblptru	equ	0xFF8
  6994                           tblptrh	equ	0xFF7
  6995                           tblptrl	equ	0xFF6
  6996                           tablat	equ	0xFF5
  6997                           prodh	equ	0xFF4
  6998                           prodl	equ	0xFF3
  6999                           intcon	equ	0xFF2
  7000                           intcon2	equ	0xFF1
  7001                           intcon3	equ	0xFF0
  7002                           postinc0	equ	0xFEE
  7003                           wreg	equ	0xFE8
  7004                           postinc1	equ	0xFE6
  7005                           postdec1	equ	0xFE5
  7006                           fsr1h	equ	0xFE2
  7007                           fsr1l	equ	0xFE1
  7008                           indf2	equ	0xFDF
  7009                           postinc2	equ	0xFDE
  7010                           postdec2	equ	0xFDD
  7011                           plusw2	equ	0xFDB
  7012                           fsr2h	equ	0xFDA
  7013                           fsr2l	equ	0xFD9
  7014                           status	equ	0xFD8
  7015                           
  7016 ;; *************** function _dir_find *****************
  7017 ;; Defined at:
  7018 ;;		line 2353 in file "bibliotecas/ff.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;  dp              2  149[BANK0 ] PTR struct .
  7021 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@dj(40), f_unlink@dj(40), 
  7022 ;;		 -> f_stat@dj(40), f_open@dj(40), 
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;  fs              2  153[BANK0 ] PTR struct .
  7025 ;;		 -> NULL(0), fs(559), 
  7026 ;;  res             1  156[BANK0 ] enum E154
  7027 ;;  c               1  155[BANK0 ] unsigned char 
  7028 ;; Return value:  Size  Location     Type
  7029 ;;                  1    wreg      enum E154
  7030 ;; Registers used:
  7031 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7032 ;; Tracked objects:
  7033 ;;		On entry : 0/0
  7034 ;;		On exit  : 0/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7037 ;;      Params:         0       2       0       0       0       0       0       0       0
  7038 ;;      Locals:         0       4       0       0       0       0       0       0       0
  7039 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7040 ;;      Totals:         0       8       0       0       0       0       0       0       0
  7041 ;;Total ram usage:        8 bytes
  7042 ;; Hardware stack levels used:    1
  7043 ;; Hardware stack levels required when called:   12
  7044 ;; This function calls:
  7045 ;;		_dir_next
  7046 ;;		_dir_sdi
  7047 ;;		_memcmp
  7048 ;;		_move_window
  7049 ;; This function is called by:
  7050 ;;		_follow_path
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           	psect	text20
  7055  003E10                     __ptext20:
  7056                           	opt stack 0
  7057  003E10                     _dir_find:
  7058                           	opt stack 14
  7059                           
  7060                           ;ff.c: 2357: FRESULT res;
  7061                           ;ff.c: 2358: FATFS *fs = dp->obj.fs;
  7062                           
  7063                           ;incstack = 0
  7064  003E10  C0F5  FFD9         	movff	dir_find@dp,fsr2l
  7065  003E14  C0F6  FFDA         	movff	dir_find@dp+1,fsr2h
  7066  003E18  CFDE F0F9          	movff	postinc2,dir_find@fs
  7067  003E1C  CFDD F0FA          	movff	postdec2,dir_find@fs+1
  7068                           
  7069                           ;ff.c: 2359: BYTE c;
  7070                           ;ff.c: 2364: res = dir_sdi(dp, 0);
  7071  003E20  C0F5  F0B5         	movff	dir_find@dp,dir_sdi@dp
  7072  003E24  C0F6  F0B6         	movff	dir_find@dp+1,dir_sdi@dp+1
  7073  003E28  0E00               	movlw	0
  7074  003E2A  0100               	movlb	0	; () banked
  7075  003E2C  6FB7               	movwf	dir_sdi@ofs& (0+255),b
  7076  003E2E  0E00               	movlw	0
  7077  003E30  6FB8               	movwf	(dir_sdi@ofs+1)& (0+255),b
  7078  003E32  0E00               	movlw	0
  7079  003E34  6FB9               	movwf	(dir_sdi@ofs+2)& (0+255),b
  7080  003E36  0E00               	movlw	0
  7081  003E38  6FBA               	movwf	(dir_sdi@ofs+3)& (0+255),b
  7082  003E3A  EC99  F015         	call	_dir_sdi	;wreg free
  7083  003E3E  0100               	movlb	0	; () banked
  7084  003E40  6FFC               	movwf	dir_find@res& (0+255),b
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;ff.c: 2365: if (res != FR_OK) return res;
  7088  003E42  51FC               	movf	dir_find@res& (0+255),w,b
  7089  003E44  B4D8               	btfsc	status,2,c
  7090  003E46  D002               	goto	l1234
  7091                           
  7092                           ; BSR set to: 0
  7093  003E48  51FC               	movf	dir_find@res& (0+255),w,b
  7094                           
  7095                           ; BSR set to: 0
  7096  003E4A  0012               	return	
  7097  003E4C                     l1234:
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;ff.c: 2391: res = move_window(fs, dp->sect);
  7101                           
  7102                           ; BSR set to: 0
  7103                           
  7104                           ;ff.c: 2390: do {
  7105                           
  7106                           ; BSR set to: 0
  7107  003E4C  C0F9  F090         	movff	dir_find@fs,move_window@fs
  7108  003E50  C0FA  F091         	movff	dir_find@fs+1,move_window@fs+1
  7109  003E54  EE20 F016          	lfsr	2,22
  7110  003E58  51F5               	movf	dir_find@dp& (0+255),w,b
  7111  003E5A  26D9               	addwf	fsr2l,f,c
  7112  003E5C  51F6               	movf	(dir_find@dp+1)& (0+255),w,b
  7113  003E5E  22DA               	addwfc	fsr2h,f,c
  7114  003E60  CFDE F092          	movff	postinc2,move_window@sect
  7115  003E64  CFDE F093          	movff	postinc2,move_window@sect+1
  7116  003E68  CFDE F094          	movff	postinc2,move_window@sect+2
  7117  003E6C  CFDE F095          	movff	postinc2,move_window@sect+3
  7118  003E70  EC09  F026         	call	_move_window	;wreg free
  7119  003E74  0100               	movlb	0	; () banked
  7120  003E76  6FFC               	movwf	dir_find@res& (0+255),b
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;ff.c: 2392: if (res != FR_OK) break;
  7124  003E78  51FC               	movf	dir_find@res& (0+255),w,b
  7125  003E7A  A4D8               	btfss	status,2,c
  7126  003E7C  D063               	goto	u18330
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;ff.c: 2393: c = dp->dir[0];
  7130                           
  7131                           ; BSR set to: 0
  7132                           
  7133                           ; BSR set to: 0
  7134  003E7E  EE20 F01A          	lfsr	2,26
  7135  003E82  51F5               	movf	dir_find@dp& (0+255),w,b
  7136  003E84  26D9               	addwf	fsr2l,f,c
  7137  003E86  51F6               	movf	(dir_find@dp+1)& (0+255),w,b
  7138  003E88  22DA               	addwfc	fsr2h,f,c
  7139  003E8A  CFDE F0F7          	movff	postinc2,??_dir_find
  7140  003E8E  CFDD F0F8          	movff	postdec2,??_dir_find+1
  7141  003E92  C0F7  FFD9         	movff	??_dir_find,fsr2l
  7142  003E96  C0F8  FFDA         	movff	??_dir_find+1,fsr2h
  7143  003E9A  50DF               	movf	indf2,w,c
  7144  003E9C  6FFB               	movwf	dir_find@c& (0+255),b
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;ff.c: 2394: if (c == 0) { res = FR_NO_FILE; break; }
  7148  003E9E  51FB               	movf	dir_find@c& (0+255),w,b
  7149  003EA0  A4D8               	btfss	status,2,c
  7150  003EA2  D003               	goto	l1239
  7151                           
  7152                           ; BSR set to: 0
  7153  003EA4  0E04               	movlw	4
  7154  003EA6  6FFC               	movwf	dir_find@res& (0+255),b
  7155  003EA8  D04D               	goto	u18330
  7156  003EAA                     l1239:
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;ff.c: 2417: dp->obj.attr = dp->dir[11] & 0x3F;
  7160                           
  7161                           ; BSR set to: 0
  7162  003EAA  EE20 F004          	lfsr	2,4
  7163  003EAE  51F5               	movf	dir_find@dp& (0+255),w,b
  7164  003EB0  26D9               	addwf	fsr2l,f,c
  7165  003EB2  51F6               	movf	(dir_find@dp+1)& (0+255),w,b
  7166  003EB4  22DA               	addwfc	fsr2h,f,c
  7167  003EB6  EE10 F01A          	lfsr	1,26
  7168  003EBA  51F5               	movf	dir_find@dp& (0+255),w,b
  7169  003EBC  26E1               	addwf	fsr1l,f,c
  7170  003EBE  51F6               	movf	(dir_find@dp+1)& (0+255),w,b
  7171  003EC0  22E2               	addwfc	fsr1h,f,c
  7172  003EC2  EE00 F00B          	lfsr	0,11
  7173  003EC6  50E6               	movf	postinc1,w,c
  7174  003EC8  26E9               	addwf	fsr0l,f,c
  7175  003ECA  50E5               	movf	postdec1,w,c
  7176  003ECC  22EA               	addwfc	fsr0h,f,c
  7177  003ECE  50EF               	movf	indf0,w,c
  7178  003ED0  0B3F               	andlw	63
  7179  003ED2  6EDF               	movwf	indf2,c
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;ff.c: 2418: if (!(dp->dir[11] & 0x08) && !memcmp(dp->dir, dp->fn, 11)) break;
  7183  003ED4  EE20 F01A          	lfsr	2,26
  7184  003ED8  51F5               	movf	dir_find@dp& (0+255),w,b
  7185  003EDA  26D9               	addwf	fsr2l,f,c
  7186  003EDC  51F6               	movf	(dir_find@dp+1)& (0+255),w,b
  7187  003EDE  22DA               	addwfc	fsr2h,f,c
  7188  003EE0  EE10 F00B          	lfsr	1,11
  7189  003EE4  50DE               	movf	postinc2,w,c
  7190  003EE6  26E1               	addwf	fsr1l,f,c
  7191  003EE8  50DD               	movf	postdec2,w,c
  7192  003EEA  22E2               	addwfc	fsr1h,f,c
  7193  003EEC  B6E7               	btfsc	indf1,3,c
  7194  003EEE  D01A               	goto	l1240
  7195                           
  7196                           ; BSR set to: 0
  7197  003EF0  EE20 F01A          	lfsr	2,26
  7198  003EF4  51F5               	movf	dir_find@dp& (0+255),w,b
  7199  003EF6  26D9               	addwf	fsr2l,f,c
  7200  003EF8  51F6               	movf	(dir_find@dp+1)& (0+255),w,b
  7201  003EFA  22DA               	addwfc	fsr2h,f,c
  7202  003EFC  CFDE F01A          	movff	postinc2,memcmp@s1
  7203  003F00  CFDD F01B          	movff	postdec2,memcmp@s1+1
  7204  003F04  0E1C               	movlw	28
  7205  003F06  25F5               	addwf	dir_find@dp& (0+255),w,b
  7206  003F08  6E1C               	movwf	memcmp@s2,c
  7207  003F0A  0E00               	movlw	0
  7208  003F0C  21F6               	addwfc	(dir_find@dp+1)& (0+255),w,b
  7209  003F0E  6E1D               	movwf	memcmp@s2+1,c
  7210  003F10  0E00               	movlw	0
  7211  003F12  6E1F               	movwf	memcmp@n+1,c
  7212  003F14  0E0B               	movlw	11
  7213  003F16  6E1E               	movwf	memcmp@n,c
  7214  003F18  EC51  F027         	call	_memcmp	;wreg free
  7215  003F1C  501A               	movf	?_memcmp,w,c
  7216  003F1E  101B               	iorwf	?_memcmp+1,w,c
  7217  003F20  B4D8               	btfsc	status,2,c
  7218  003F22  D010               	goto	u18330
  7219  003F24                     l1240:
  7220                           
  7221                           ;ff.c: 2420: res = dir_next(dp, 0);
  7222  003F24  C0F5  F0D7         	movff	dir_find@dp,dir_next@dp
  7223  003F28  C0F6  F0D8         	movff	dir_find@dp+1,dir_next@dp+1
  7224  003F2C  0E00               	movlw	0
  7225  003F2E  0100               	movlb	0	; () banked
  7226  003F30  6FDA               	movwf	(dir_next@stretch+1)& (0+255),b
  7227  003F32  0E00               	movlw	0
  7228  003F34  6FD9               	movwf	dir_next@stretch& (0+255),b
  7229  003F36  EC3A  F010         	call	_dir_next	;wreg free
  7230  003F3A  0100               	movlb	0	; () banked
  7231  003F3C  6FFC               	movwf	dir_find@res& (0+255),b
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;ff.c: 2421: } while (res == FR_OK);
  7235  003F3E  51FC               	movf	dir_find@res& (0+255),w,b
  7236  003F40  B4D8               	btfsc	status,2,c
  7237  003F42  D784               	goto	l1234
  7238  003F44                     u18330:
  7239                           
  7240                           ;ff.c: 2423: return res;
  7241                           
  7242                           ; BSR set to: 0
  7243  003F44  0100               	movlb	0	; () banked
  7244  003F46  51FC               	movf	dir_find@res& (0+255),w,b
  7245  003F48  0012               	return	
  7246  003F4A                     __end_of_dir_find:
  7247                           	opt stack 0
  7248                           tosu	equ	0xFFF
  7249                           tosh	equ	0xFFE
  7250                           tosl	equ	0xFFD
  7251                           pclath	equ	0xFFA
  7252                           tblptru	equ	0xFF8
  7253                           tblptrh	equ	0xFF7
  7254                           tblptrl	equ	0xFF6
  7255                           tablat	equ	0xFF5
  7256                           prodh	equ	0xFF4
  7257                           prodl	equ	0xFF3
  7258                           intcon	equ	0xFF2
  7259                           intcon2	equ	0xFF1
  7260                           intcon3	equ	0xFF0
  7261                           indf0	equ	0xFEF
  7262                           postinc0	equ	0xFEE
  7263                           fsr0h	equ	0xFEA
  7264                           fsr0l	equ	0xFE9
  7265                           wreg	equ	0xFE8
  7266                           indf1	equ	0xFE7
  7267                           postinc1	equ	0xFE6
  7268                           postdec1	equ	0xFE5
  7269                           fsr1h	equ	0xFE2
  7270                           fsr1l	equ	0xFE1
  7271                           indf2	equ	0xFDF
  7272                           postinc2	equ	0xFDE
  7273                           postdec2	equ	0xFDD
  7274                           plusw2	equ	0xFDB
  7275                           fsr2h	equ	0xFDA
  7276                           fsr2l	equ	0xFD9
  7277                           status	equ	0xFD8
  7278                           
  7279 ;; *************** function _create_name *****************
  7280 ;; Defined at:
  7281 ;;		line 2801 in file "bibliotecas/ff.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;  dp              2   33[COMRAM] PTR struct .
  7284 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@dj(40), f_unlink@dj(40), 
  7285 ;;		 -> f_stat@dj(40), f_open@dj(40), 
  7286 ;;  path            2   35[COMRAM] PTR PTR const unsigned c
  7287 ;;		 -> follow_path@path(2), 
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;  i               2   11[BANK0 ] unsigned int 
  7290 ;;  sfn             2    9[BANK0 ] PTR unsigned char 
  7291 ;;		 -> djn.fn(12), f_rename@djn(40), djo.fn(12), f_rename@djo(40), 
  7292 ;;		 -> dj.fn(12), f_mkdir@dj(40), dj.fn(12), f_unlink@dj(40), 
  7293 ;;		 -> dj.fn(12), f_stat@dj(40), dj.fn(12), f_open@dj(40), 
  7294 ;;  si              2    7[BANK0 ] unsigned int 
  7295 ;;  p               2    5[BANK0 ] PTR const unsigned char 
  7296 ;;		 -> STR_12(7), STR_10(1), 
  7297 ;;  ni              2    3[BANK0 ] unsigned int 
  7298 ;;  c               1   13[BANK0 ] unsigned char 
  7299 ;;  d               1    2[BANK0 ] unsigned char 
  7300 ;; Return value:  Size  Location     Type
  7301 ;;                  1    wreg      enum E154
  7302 ;; Registers used:
  7303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/0
  7306 ;;		On exit  : 0/0
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7309 ;;      Params:         4       0       0       0       0       0       0       0       0
  7310 ;;      Locals:         0      14       0       0       0       0       0       0       0
  7311 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7312 ;;      Totals:         8      14       0       0       0       0       0       0       0
  7313 ;;Total ram usage:       22 bytes
  7314 ;; Hardware stack levels used:    1
  7315 ;; Hardware stack levels required when called:    3
  7316 ;; This function calls:
  7317 ;;		_dbc_1st
  7318 ;;		_dbc_2nd
  7319 ;;		_memset
  7320 ;;		_strchr
  7321 ;; This function is called by:
  7322 ;;		_follow_path
  7323 ;; This function uses a non-reentrant model
  7324 ;;
  7325                           
  7326                           	psect	text21
  7327  002E64                     __ptext21:
  7328                           	opt stack 0
  7329  002E64                     _create_name:
  7330                           	opt stack 23
  7331                           
  7332                           ;ff.c: 2933: BYTE c, d, *sfn;
  7333                           ;ff.c: 2934: UINT ni, si, i;
  7334                           ;ff.c: 2935: const char *p;
  7335                           ;ff.c: 2938: p = *path; sfn = dp->fn;
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;incstack = 0
  7339  002E64  C024  FFD9         	movff	create_name@path,fsr2l
  7340  002E68  C025  FFDA         	movff	create_name@path+1,fsr2h
  7341  002E6C  CFDE F065          	movff	postinc2,create_name@p
  7342  002E70  CFDD F066          	movff	postdec2,create_name@p+1
  7343  002E74  0E1C               	movlw	28
  7344  002E76  2422               	addwf	create_name@dp,w,c
  7345  002E78  0100               	movlb	0	; () banked
  7346  002E7A  6F69               	movwf	create_name@sfn& (0+255),b
  7347  002E7C  0E00               	movlw	0
  7348  002E7E  2023               	addwfc	create_name@dp+1,w,c
  7349  002E80  6F6A               	movwf	(create_name@sfn+1)& (0+255),b
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;ff.c: 2939: memset(sfn, ' ', 11);
  7353  002E82  C069  F01A         	movff	create_name@sfn,memset@p1
  7354  002E86  C06A  F01B         	movff	create_name@sfn+1,memset@p1+1
  7355  002E8A  0E00               	movlw	0
  7356  002E8C  6E1D               	movwf	memset@c+1,c
  7357  002E8E  0E20               	movlw	32
  7358  002E90  6E1C               	movwf	memset@c,c
  7359  002E92  0E00               	movlw	0
  7360  002E94  6E1F               	movwf	memset@n+1,c
  7361  002E96  0E0B               	movlw	11
  7362  002E98  6E1E               	movwf	memset@n,c
  7363  002E9A  ECD5  F02C         	call	_memset	;wreg free
  7364                           
  7365                           ;ff.c: 2940: si = i = 0; ni = 8;
  7366  002E9E  0E00               	movlw	0
  7367  002EA0  0100               	movlb	0	; () banked
  7368  002EA2  6F6C               	movwf	(create_name@i+1)& (0+255),b
  7369  002EA4  0E00               	movlw	0
  7370  002EA6  6F6B               	movwf	create_name@i& (0+255),b
  7371  002EA8  C06B  F067         	movff	create_name@i,create_name@si
  7372  002EAC  C06C  F068         	movff	create_name@i+1,create_name@si+1
  7373                           
  7374                           ; BSR set to: 0
  7375  002EB0  0E00               	movlw	0
  7376  002EB2  6F64               	movwf	(create_name@ni+1)& (0+255),b
  7377  002EB4  0E08               	movlw	8
  7378  002EB6  6F63               	movwf	create_name@ni& (0+255),b
  7379  002EB8                     
  7380                           ; BSR set to: 0
  7381                           ;ff.c: 2955: c = (BYTE)p[si++];
  7382                           
  7383                           ; BSR set to: 0
  7384  002EB8  5167               	movf	create_name@si& (0+255),w,b
  7385  002EBA  2565               	addwf	create_name@p& (0+255),w,b
  7386  002EBC  6E26               	movwf	??_create_name& (0+255),c
  7387  002EBE  5168               	movf	(create_name@si+1)& (0+255),w,b
  7388  002EC0  2166               	addwfc	(create_name@p+1)& (0+255),w,b
  7389  002EC2  6E27               	movwf	(??_create_name+1)& (0+255),c
  7390  002EC4  C026  FFF6         	movff	??_create_name,tblptrl
  7391  002EC8  C027  FFF7         	movff	??_create_name+1,tblptrh
  7392  002ECC                     	if	0	;tblptru may be non-zero
  7393  002ECC                     	endif
  7394  002ECC                     	if	0	;tblptru may be non-zero
  7395  002ECC                     	endif
  7396  002ECC  0008               	tblrd		*
  7397  002ECE  CFF5 F06D          	movff	tablat,create_name@c
  7398                           
  7399                           ; BSR set to: 0
  7400  002ED2  4B67               	infsnz	create_name@si& (0+255),f,b
  7401  002ED4  2B68               	incf	(create_name@si+1)& (0+255),f,b
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;ff.c: 2956: if (c <= ' ') break;
  7405  002ED6  0E21               	movlw	33
  7406  002ED8  616D               	cpfslt	create_name@c& (0+255),b
  7407  002EDA  D001               	goto	l1263
  7408  002EDC  D0B1               	goto	l1264
  7409  002EDE                     l1263:
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;ff.c: 2957: if (((c) == '/' || (c) == '\\')) {
  7413                           
  7414                           ; BSR set to: 0
  7415  002EDE  0E2F               	movlw	47
  7416  002EE0  196D               	xorwf	create_name@c& (0+255),w,b
  7417  002EE2  B4D8               	btfsc	status,2,c
  7418  002EE4  D007               	goto	l1268
  7419                           
  7420                           ; BSR set to: 0
  7421  002EE6  0E5C               	movlw	92
  7422  002EE8  196D               	xorwf	create_name@c& (0+255),w,b
  7423  002EEA  B4D8               	btfsc	status,2,c
  7424  002EEC  D003               	goto	l1268
  7425  002EEE  D021               	goto	l1265
  7426  002EF0                     
  7427                           ; BSR set to: 0
  7428                           
  7429                           ; BSR set to: 0
  7430  002EF0  4B67               	infsnz	create_name@si& (0+255),f,b
  7431  002EF2  2B68               	incf	(create_name@si+1)& (0+255),f,b
  7432  002EF4                     l1268:
  7433                           
  7434                           ; BSR set to: 0
  7435                           
  7436                           ; BSR set to: 0
  7437  002EF4  5167               	movf	create_name@si& (0+255),w,b
  7438  002EF6  2565               	addwf	create_name@p& (0+255),w,b
  7439  002EF8  6E26               	movwf	??_create_name& (0+255),c
  7440  002EFA  5168               	movf	(create_name@si+1)& (0+255),w,b
  7441  002EFC  2166               	addwfc	(create_name@p+1)& (0+255),w,b
  7442  002EFE  6E27               	movwf	(??_create_name+1)& (0+255),c
  7443  002F00  C026  FFF6         	movff	??_create_name,tblptrl
  7444  002F04  C027  FFF7         	movff	??_create_name+1,tblptrh
  7445  002F08                     	if	0	;tblptru may be non-zero
  7446  002F08                     	endif
  7447  002F08                     	if	0	;tblptru may be non-zero
  7448  002F08                     	endif
  7449  002F08  0008               	tblrd		*
  7450  002F0A  50F5               	movf	tablat,w,c
  7451  002F0C  0A2F               	xorlw	47
  7452  002F0E  B4D8               	btfsc	status,2,c
  7453  002F10  D7EF               	goto	l1269
  7454                           
  7455                           ; BSR set to: 0
  7456  002F12  5167               	movf	create_name@si& (0+255),w,b
  7457  002F14  2565               	addwf	create_name@p& (0+255),w,b
  7458  002F16  6E26               	movwf	??_create_name& (0+255),c
  7459  002F18  5168               	movf	(create_name@si+1)& (0+255),w,b
  7460  002F1A  2166               	addwfc	(create_name@p+1)& (0+255),w,b
  7461  002F1C  6E27               	movwf	(??_create_name+1)& (0+255),c
  7462  002F1E  C026  FFF6         	movff	??_create_name,tblptrl
  7463  002F22  C027  FFF7         	movff	??_create_name+1,tblptrh
  7464  002F26                     	if	0	;tblptru may be non-zero
  7465  002F26                     	endif
  7466  002F26                     	if	0	;tblptru may be non-zero
  7467  002F26                     	endif
  7468  002F26  0008               	tblrd		*
  7469  002F28  50F5               	movf	tablat,w,c
  7470  002F2A  0A5C               	xorlw	92
  7471  002F2C  A4D8               	btfss	status,2,c
  7472  002F2E  D088               	goto	l1264
  7473  002F30  D7DF               	goto	l1269
  7474  002F32                     l1265:
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;ff.c: 2960: }
  7478                           ;ff.c: 2961: if (c == '.' || i >= ni) {
  7479                           
  7480                           ; BSR set to: 0
  7481  002F32  0E2E               	movlw	46
  7482  002F34  196D               	xorwf	create_name@c& (0+255),w,b
  7483  002F36  B4D8               	btfsc	status,2,c
  7484  002F38  D006               	goto	u18420
  7485                           
  7486                           ; BSR set to: 0
  7487  002F3A  5163               	movf	create_name@ni& (0+255),w,b
  7488  002F3C  5D6B               	subwf	create_name@i& (0+255),w,b
  7489  002F3E  5164               	movf	(create_name@ni+1)& (0+255),w,b
  7490  002F40  596C               	subwfb	(create_name@i+1)& (0+255),w,b
  7491  002F42  A0D8               	btfss	status,0,c
  7492  002F44  D013               	goto	l1271
  7493  002F46                     u18420:
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;ff.c: 2962: if (ni == 11 || c != '.') return FR_INVALID_NAME;
  7497                           
  7498                           ; BSR set to: 0
  7499  002F46  0E0B               	movlw	11
  7500  002F48  1963               	xorwf	create_name@ni& (0+255),w,b
  7501  002F4A  1164               	iorwf	(create_name@ni+1)& (0+255),w,b
  7502  002F4C  B4D8               	btfsc	status,2,c
  7503  002F4E  D004               	goto	u18440
  7504                           
  7505                           ; BSR set to: 0
  7506  002F50  0E2E               	movlw	46
  7507  002F52  196D               	xorwf	create_name@c& (0+255),w,b
  7508  002F54  B4D8               	btfsc	status,2,c
  7509  002F56  D002               	goto	l1274
  7510  002F58                     u18440:
  7511                           
  7512                           ; BSR set to: 0
  7513                           
  7514                           ; BSR set to: 0
  7515  002F58  0E06               	movlw	6
  7516                           
  7517                           ; BSR set to: 0
  7518  002F5A  0012               	return	
  7519  002F5C                     l1274:
  7520                           
  7521                           ; BSR set to: 0
  7522                           ;ff.c: 2963: i = 8; ni = 11;
  7523                           
  7524                           ; BSR set to: 0
  7525  002F5C  0E00               	movlw	0
  7526  002F5E  6F6C               	movwf	(create_name@i+1)& (0+255),b
  7527  002F60  0E08               	movlw	8
  7528  002F62  6F6B               	movwf	create_name@i& (0+255),b
  7529  002F64  0E00               	movlw	0
  7530  002F66  6F64               	movwf	(create_name@ni+1)& (0+255),b
  7531  002F68  0E0B               	movlw	11
  7532  002F6A  D7A5               	goto	L9
  7533  002F6C                     l1271:
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;ff.c: 2965: }
  7537                           ;ff.c: 2975: if (dbc_1st(c)) {
  7538                           
  7539                           ; BSR set to: 0
  7540  002F6C  516D               	movf	create_name@c& (0+255),w,b
  7541  002F6E  EC07  F02A         	call	_dbc_1st
  7542  002F72  501A               	movf	?_dbc_1st,w,c
  7543  002F74  101B               	iorwf	?_dbc_1st+1,w,c
  7544  002F76  B4D8               	btfsc	status,2,c
  7545  002F78  D040               	goto	l1279
  7546                           
  7547                           ;ff.c: 2976: d = (BYTE)p[si++];
  7548  002F7A  0100               	movlb	0	; () banked
  7549  002F7C  5167               	movf	create_name@si& (0+255),w,b
  7550  002F7E  2565               	addwf	create_name@p& (0+255),w,b
  7551  002F80  6E26               	movwf	??_create_name& (0+255),c
  7552  002F82  5168               	movf	(create_name@si+1)& (0+255),w,b
  7553  002F84  2166               	addwfc	(create_name@p+1)& (0+255),w,b
  7554  002F86  6E27               	movwf	(??_create_name+1)& (0+255),c
  7555  002F88  C026  FFF6         	movff	??_create_name,tblptrl
  7556  002F8C  C027  FFF7         	movff	??_create_name+1,tblptrh
  7557  002F90                     	if	0	;tblptru may be non-zero
  7558  002F90                     	endif
  7559  002F90                     	if	0	;tblptru may be non-zero
  7560  002F90                     	endif
  7561  002F90  0008               	tblrd		*
  7562  002F92  CFF5 F062          	movff	tablat,create_name@d
  7563                           
  7564                           ; BSR set to: 0
  7565  002F96  4B67               	infsnz	create_name@si& (0+255),f,b
  7566  002F98  2B68               	incf	(create_name@si+1)& (0+255),f,b
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;ff.c: 2977: if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;
  7570  002F9A  5162               	movf	create_name@d& (0+255),w,b
  7571  002F9C  EC9F  F027         	call	_dbc_2nd
  7572  002FA0  501A               	movf	?_dbc_2nd,w,c
  7573  002FA2  101B               	iorwf	?_dbc_2nd+1,w,c
  7574  002FA4  B4D8               	btfsc	status,2,c
  7575  002FA6  D013               	goto	u18470
  7576  002FA8  0EFF               	movlw	255
  7577  002FAA  6E26               	movwf	??_create_name& (0+255),c
  7578  002FAC  0EFF               	movlw	255
  7579  002FAE  6E27               	movwf	(??_create_name+1)& (0+255),c
  7580  002FB0  C063  F028         	movff	create_name@ni,??_create_name+2
  7581  002FB4  C064  F029         	movff	create_name@ni+1,??_create_name+3
  7582  002FB8  5026               	movf	??_create_name,w,c
  7583  002FBA  2628               	addwf	??_create_name+2,f,c
  7584  002FBC  5027               	movf	??_create_name+1,w,c
  7585  002FBE  2229               	addwfc	??_create_name+3,f,c
  7586  002FC0  5028               	movf	??_create_name+2,w,c
  7587  002FC2  0100               	movlb	0	; () banked
  7588  002FC4  5D6B               	subwf	create_name@i& (0+255),w,b
  7589  002FC6  5029               	movf	??_create_name+3,w,c
  7590  002FC8  596C               	subwfb	(create_name@i+1)& (0+255),w,b
  7591  002FCA  A0D8               	btfss	status,0,c
  7592  002FCC  D002               	goto	l1280
  7593  002FCE                     u18470:
  7594                           
  7595                           ; BSR set to: 0
  7596  002FCE  0E06               	movlw	6
  7597  002FD0  0012               	return	
  7598  002FD2                     l1280:
  7599                           
  7600                           ;ff.c: 2978: sfn[i++] = c;
  7601  002FD2  0100               	movlb	0	; () banked
  7602  002FD4  516B               	movf	create_name@i& (0+255),w,b
  7603  002FD6  2569               	addwf	create_name@sfn& (0+255),w,b
  7604  002FD8  6ED9               	movwf	fsr2l,c
  7605  002FDA  516C               	movf	(create_name@i+1)& (0+255),w,b
  7606  002FDC  216A               	addwfc	(create_name@sfn+1)& (0+255),w,b
  7607  002FDE  6EDA               	movwf	fsr2h,c
  7608  002FE0  C06D  FFDF         	movff	create_name@c,indf2
  7609                           
  7610                           ; BSR set to: 0
  7611  002FE4  4B6B               	infsnz	create_name@i& (0+255),f,b
  7612  002FE6  2B6C               	incf	(create_name@i+1)& (0+255),f,b
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;ff.c: 2979: sfn[i++] = d;
  7616  002FE8  516B               	movf	create_name@i& (0+255),w,b
  7617  002FEA  2569               	addwf	create_name@sfn& (0+255),w,b
  7618  002FEC  6ED9               	movwf	fsr2l,c
  7619  002FEE  516C               	movf	(create_name@i+1)& (0+255),w,b
  7620  002FF0  216A               	addwfc	(create_name@sfn+1)& (0+255),w,b
  7621  002FF2  6EDA               	movwf	fsr2h,c
  7622  002FF4  C062  FFDF         	movff	create_name@d,indf2
  7623  002FF8  D020               	goto	l14204
  7624  002FFA                     l1279:
  7625                           
  7626                           ;ff.c: 2981: if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;
  7627                           
  7628                           ; BSR set to: 0
  7629  002FFA  0E14               	movlw	low STR_23
  7630  002FFC  6E1A               	movwf	strchr@ptr,c
  7631  002FFE  0E62               	movlw	high STR_23
  7632  003000  6E1B               	movwf	strchr@ptr+1,c
  7633  003002  C06D  F01C         	movff	create_name@c,strchr@chr
  7634  003006  6A1D               	clrf	strchr@chr+1,c
  7635  003008  EC4D  F02C         	call	_strchr	;wreg free
  7636  00300C  501A               	movf	?_strchr,w,c
  7637  00300E  101B               	iorwf	?_strchr+1,w,c
  7638  003010  B4D8               	btfsc	status,2,c
  7639  003012  D002               	goto	l1284
  7640  003014  0E06               	movlw	6
  7641  003016  0012               	return	
  7642  003018                     l1284:
  7643                           
  7644                           ;ff.c: 2982: if (((c) >= 'a' && (c) <= 'z')) c -= 0x20;
  7645  003018  0E60               	movlw	96
  7646  00301A  0100               	movlb	0	; () banked
  7647  00301C  656D               	cpfsgt	create_name@c& (0+255),b
  7648  00301E  D005               	goto	l1285
  7649                           
  7650                           ; BSR set to: 0
  7651  003020  0E7B               	movlw	123
  7652  003022  616D               	cpfslt	create_name@c& (0+255),b
  7653  003024  D002               	goto	l1285
  7654                           
  7655                           ; BSR set to: 0
  7656  003026  0E20               	movlw	32
  7657  003028  5F6D               	subwf	create_name@c& (0+255),f,b
  7658  00302A                     l1285:
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;ff.c: 2983: sfn[i++] = c;
  7662                           
  7663                           ; BSR set to: 0
  7664  00302A  516B               	movf	create_name@i& (0+255),w,b
  7665  00302C  2569               	addwf	create_name@sfn& (0+255),w,b
  7666  00302E  6ED9               	movwf	fsr2l,c
  7667  003030  516C               	movf	(create_name@i+1)& (0+255),w,b
  7668  003032  216A               	addwfc	(create_name@sfn+1)& (0+255),w,b
  7669  003034  6EDA               	movwf	fsr2h,c
  7670  003036  C06D  FFDF         	movff	create_name@c,indf2
  7671  00303A                     l14204:
  7672                           
  7673                           ; BSR set to: 0
  7674  00303A  4B6B               	infsnz	create_name@i& (0+255),f,b
  7675  00303C  2B6C               	incf	(create_name@i+1)& (0+255),f,b
  7676                           
  7677                           ; BSR set to: 0
  7678                           ;ff.c: 2984: }
  7679                           ;ff.c: 2985: }
  7680                           
  7681                           ; BSR set to: 0
  7682  00303E  D73C               	goto	l1262
  7683  003040                     l1264:
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;ff.c: 2986: *path = &p[si];
  7687                           
  7688                           ; BSR set to: 0
  7689  003040  5167               	movf	create_name@si& (0+255),w,b
  7690  003042  2565               	addwf	create_name@p& (0+255),w,b
  7691  003044  6E26               	movwf	??_create_name& (0+255),c
  7692  003046  5168               	movf	(create_name@si+1)& (0+255),w,b
  7693  003048  2166               	addwfc	(create_name@p+1)& (0+255),w,b
  7694  00304A  6E27               	movwf	(??_create_name+1)& (0+255),c
  7695  00304C  C024  FFD9         	movff	create_name@path,fsr2l
  7696  003050  C025  FFDA         	movff	create_name@path+1,fsr2h
  7697  003054  C026  FFDE         	movff	??_create_name,postinc2
  7698  003058  C027  FFDD         	movff	??_create_name+1,postdec2
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;ff.c: 2987: if (i == 0) return FR_INVALID_NAME;
  7702  00305C  516B               	movf	create_name@i& (0+255),w,b
  7703  00305E  116C               	iorwf	(create_name@i+1)& (0+255),w,b
  7704  003060  A4D8               	btfss	status,2,c
  7705  003062  D002               	goto	l1286
  7706                           
  7707                           ; BSR set to: 0
  7708  003064  0E06               	movlw	6
  7709                           
  7710                           ; BSR set to: 0
  7711  003066  0012               	return	
  7712  003068                     l1286:
  7713                           
  7714                           ; BSR set to: 0
  7715                           ;ff.c: 2989: if (sfn[0] == 0xE5) sfn[0] = 0x05;
  7716                           
  7717                           ; BSR set to: 0
  7718  003068  C069  FFD9         	movff	create_name@sfn,fsr2l
  7719  00306C  C06A  FFDA         	movff	create_name@sfn+1,fsr2h
  7720  003070  0EE5               	movlw	229
  7721  003072  18DE               	xorwf	postinc2,w,c
  7722  003074  A4D8               	btfss	status,2,c
  7723  003076  D006               	goto	l1287
  7724                           
  7725                           ; BSR set to: 0
  7726  003078  C069  FFD9         	movff	create_name@sfn,fsr2l
  7727  00307C  C06A  FFDA         	movff	create_name@sfn+1,fsr2h
  7728  003080  0E05               	movlw	5
  7729  003082  6EDF               	movwf	indf2,c
  7730  003084                     l1287:
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;ff.c: 2990: sfn[11] = (c <= ' ' || p[si] <= ' ') ? 0x04 : 0;
  7734                           
  7735                           ; BSR set to: 0
  7736  003084  0E20               	movlw	32
  7737  003086  656D               	cpfsgt	create_name@c& (0+255),b
  7738  003088  D012               	goto	l1289
  7739                           
  7740                           ; BSR set to: 0
  7741  00308A  5167               	movf	create_name@si& (0+255),w,b
  7742  00308C  2565               	addwf	create_name@p& (0+255),w,b
  7743  00308E  6E26               	movwf	??_create_name& (0+255),c
  7744  003090  5168               	movf	(create_name@si+1)& (0+255),w,b
  7745  003092  2166               	addwfc	(create_name@p+1)& (0+255),w,b
  7746  003094  6E27               	movwf	(??_create_name+1)& (0+255),c
  7747  003096  C026  FFF6         	movff	??_create_name,tblptrl
  7748  00309A  C027  FFF7         	movff	??_create_name+1,tblptrh
  7749  00309E                     	if	0	;tblptru may be non-zero
  7750  00309E                     	endif
  7751  00309E                     	if	0	;tblptru may be non-zero
  7752  00309E                     	endif
  7753  00309E  0E20               	movlw	32
  7754  0030A0  0008               	tblrd		*
  7755  0030A2  64F5               	cpfsgt	tablat,c
  7756  0030A4  D004               	goto	l1289
  7757                           
  7758                           ; BSR set to: 0
  7759  0030A6  0E00               	movlw	0
  7760  0030A8  6F61               	movwf	(_create_name$2902+1)& (0+255),b
  7761  0030AA  0E00               	movlw	0
  7762  0030AC  D003               	goto	L10
  7763  0030AE                     l1289:
  7764                           
  7765                           ; BSR set to: 0
  7766                           
  7767                           ; BSR set to: 0
  7768  0030AE  0E00               	movlw	0
  7769  0030B0  6F61               	movwf	(_create_name$2902+1)& (0+255),b
  7770  0030B2  0E04               	movlw	4
  7771  0030B4                     L10:
  7772  0030B4  6F60               	movwf	_create_name$2902& (0+255),b
  7773                           
  7774                           ; BSR set to: 0
  7775                           
  7776                           ; BSR set to: 0
  7777  0030B6  EE20 F00B          	lfsr	2,11
  7778  0030BA  5169               	movf	create_name@sfn& (0+255),w,b
  7779  0030BC  26D9               	addwf	fsr2l,f,c
  7780  0030BE  516A               	movf	(create_name@sfn+1)& (0+255),w,b
  7781  0030C0  22DA               	addwfc	fsr2h,f,c
  7782  0030C2  C060  FFDF         	movff	_create_name$2902,indf2
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;ff.c: 2992: return FR_OK;
  7786  0030C6  0E00               	movlw	0
  7787  0030C8  0012               	return	
  7788  0030CA                     __end_of_create_name:
  7789                           	opt stack 0
  7790                           tosu	equ	0xFFF
  7791                           tosh	equ	0xFFE
  7792                           tosl	equ	0xFFD
  7793                           pclath	equ	0xFFA
  7794                           tblptru	equ	0xFF8
  7795                           tblptrh	equ	0xFF7
  7796                           tblptrl	equ	0xFF6
  7797                           tablat	equ	0xFF5
  7798                           prodh	equ	0xFF4
  7799                           prodl	equ	0xFF3
  7800                           intcon	equ	0xFF2
  7801                           intcon2	equ	0xFF1
  7802                           intcon3	equ	0xFF0
  7803                           indf0	equ	0xFEF
  7804                           postinc0	equ	0xFEE
  7805                           fsr0h	equ	0xFEA
  7806                           fsr0l	equ	0xFE9
  7807                           wreg	equ	0xFE8
  7808                           indf1	equ	0xFE7
  7809                           postinc1	equ	0xFE6
  7810                           postdec1	equ	0xFE5
  7811                           fsr1h	equ	0xFE2
  7812                           fsr1l	equ	0xFE1
  7813                           indf2	equ	0xFDF
  7814                           postinc2	equ	0xFDE
  7815                           postdec2	equ	0xFDD
  7816                           plusw2	equ	0xFDB
  7817                           fsr2h	equ	0xFDA
  7818                           fsr2l	equ	0xFD9
  7819                           status	equ	0xFD8
  7820                           
  7821 ;; *************** function _strchr *****************
  7822 ;; Defined at:
  7823 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  ptr             2   25[COMRAM] PTR const unsigned char 
  7826 ;;		 -> STR_23(15), 
  7827 ;;  chr             2   27[COMRAM] int 
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;		None
  7830 ;; Return value:  Size  Location     Type
  7831 ;;                  2   25[COMRAM] PTR unsigned char 
  7832 ;; Registers used:
  7833 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7839 ;;      Params:         4       0       0       0       0       0       0       0       0
  7840 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7841 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7842 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7843 ;;Total ram usage:        4 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:    2
  7846 ;; This function calls:
  7847 ;;		Nothing
  7848 ;; This function is called by:
  7849 ;;		_create_name
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           	psect	text22
  7854  00589A                     __ptext22:
  7855                           	opt stack 0
  7856  00589A                     _strchr:
  7857                           	opt stack 23
  7858                           
  7859                           ;incstack = 0
  7860  00589A  C01A  FFF6         	movff	strchr@ptr,tblptrl
  7861  00589E  C01B  FFF7         	movff	strchr@ptr+1,tblptrh
  7862  0058A2                     	if	0	;tblptru may be non-zero
  7863  0058A2                     	endif
  7864  0058A2                     	if	0	;tblptru may be non-zero
  7865  0058A2                     	endif
  7866  0058A2  0008               	tblrd		*
  7867  0058A4  50F5               	movf	tablat,w,c
  7868  0058A6  181C               	xorwf	strchr@chr,w,c
  7869  0058A8  A4D8               	btfss	status,2,c
  7870  0058AA  D005               	goto	l2631
  7871  0058AC  C01A  F01A         	movff	strchr@ptr,?_strchr
  7872  0058B0  C01B  F01B         	movff	strchr@ptr+1,?_strchr+1
  7873  0058B4  0012               	return	
  7874  0058B6                     l2631:
  7875  0058B6  C01A  FFF6         	movff	strchr@ptr,tblptrl
  7876  0058BA  C01B  FFF7         	movff	strchr@ptr+1,tblptrh
  7877  0058BE  4A1A               	infsnz	strchr@ptr,f,c
  7878  0058C0  2A1B               	incf	strchr@ptr+1,f,c
  7879  0058C2                     	if	0	;tblptru may be non-zero
  7880  0058C2                     	endif
  7881  0058C2                     	if	0	;tblptru may be non-zero
  7882  0058C2                     	endif
  7883  0058C2  0008               	tblrd		*
  7884  0058C4  50F5               	movf	tablat,w,c
  7885  0058C6  0900               	iorlw	0
  7886  0058C8  A4D8               	btfss	status,2,c
  7887  0058CA  D7E7               	goto	_strchr
  7888  0058CC  0E00               	movlw	0
  7889  0058CE  6E1A               	movwf	?_strchr,c
  7890  0058D0  0E00               	movlw	0
  7891  0058D2  6E1B               	movwf	?_strchr+1,c
  7892  0058D4  0012               	return	
  7893  0058D6                     __end_of_strchr:
  7894                           	opt stack 0
  7895                           tosu	equ	0xFFF
  7896                           tosh	equ	0xFFE
  7897                           tosl	equ	0xFFD
  7898                           pclath	equ	0xFFA
  7899                           tblptru	equ	0xFF8
  7900                           tblptrh	equ	0xFF7
  7901                           tblptrl	equ	0xFF6
  7902                           tablat	equ	0xFF5
  7903                           prodh	equ	0xFF4
  7904                           prodl	equ	0xFF3
  7905                           intcon	equ	0xFF2
  7906                           intcon2	equ	0xFF1
  7907                           intcon3	equ	0xFF0
  7908                           indf0	equ	0xFEF
  7909                           postinc0	equ	0xFEE
  7910                           fsr0h	equ	0xFEA
  7911                           fsr0l	equ	0xFE9
  7912                           wreg	equ	0xFE8
  7913                           indf1	equ	0xFE7
  7914                           postinc1	equ	0xFE6
  7915                           postdec1	equ	0xFE5
  7916                           fsr1h	equ	0xFE2
  7917                           fsr1l	equ	0xFE1
  7918                           indf2	equ	0xFDF
  7919                           postinc2	equ	0xFDE
  7920                           postdec2	equ	0xFDD
  7921                           plusw2	equ	0xFDB
  7922                           fsr2h	equ	0xFDA
  7923                           fsr2l	equ	0xFD9
  7924                           status	equ	0xFD8
  7925                           
  7926 ;; *************** function _dbc_2nd *****************
  7927 ;; Defined at:
  7928 ;;		line 708 in file "bibliotecas/ff.c"
  7929 ;; Parameters:    Size  Location     Type
  7930 ;;  c               1    wreg     unsigned char 
  7931 ;; Auto vars:     Size  Location     Type
  7932 ;;  c               1   27[COMRAM] unsigned char 
  7933 ;; Return value:  Size  Location     Type
  7934 ;;                  2   25[COMRAM] int 
  7935 ;; Registers used:
  7936 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7937 ;; Tracked objects:
  7938 ;;		On entry : 0/0
  7939 ;;		On exit  : 0/0
  7940 ;;		Unchanged: 0/0
  7941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7942 ;;      Params:         2       0       0       0       0       0       0       0       0
  7943 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7944 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7945 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7946 ;;Total ram usage:        3 bytes
  7947 ;; Hardware stack levels used:    1
  7948 ;; Hardware stack levels required when called:    2
  7949 ;; This function calls:
  7950 ;;		Nothing
  7951 ;; This function is called by:
  7952 ;;		_create_name
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           	psect	text23
  7957  004F3E                     __ptext23:
  7958                           	opt stack 0
  7959  004F3E                     _dbc_2nd:
  7960                           	opt stack 23
  7961                           
  7962                           ;incstack = 0
  7963                           ;dbc_2nd@c stored from wreg
  7964  004F3E  6E1C               	movwf	dbc_2nd@c,c
  7965                           
  7966                           ;ff.c: 717: if (c >= DbcTbl[4]) {
  7967  004F40  0EAA               	movlw	low (_DbcTbl+4)
  7968  004F42  6EF6               	movwf	tblptrl,c
  7969  004F44  0E61               	movlw	high (_DbcTbl+4)
  7970  004F46  6EF7               	movwf	tblptrh,c
  7971  004F48                     	if	0	;tblptru may be non-zero
  7972  004F48                     	endif
  7973  004F48                     	if	0	;tblptru may be non-zero
  7974  004F48                     	endif
  7975  004F48  0009               	tblrd		*+
  7976  004F4A  50F5               	movf	tablat,w,c
  7977  004F4C  5C1C               	subwf	dbc_2nd@c,w,c
  7978  004F4E  A0D8               	btfss	status,0,c
  7979  004F50  D03C               	goto	l1014
  7980                           
  7981                           ;ff.c: 718: if (c <= DbcTbl[5]) return 1;
  7982  004F52  0EAB               	movlw	low (_DbcTbl+5)
  7983  004F54  6EF6               	movwf	tblptrl,c
  7984  004F56  0E61               	movlw	high (_DbcTbl+5)
  7985  004F58  6EF7               	movwf	tblptrh,c
  7986  004F5A                     	if	0	;tblptru may be non-zero
  7987  004F5A                     	endif
  7988  004F5A                     	if	0	;tblptru may be non-zero
  7989  004F5A                     	endif
  7990  004F5A  501C               	movf	dbc_2nd@c,w,c
  7991  004F5C  0009               	tblrd		*+
  7992  004F5E  5CF5               	subwf	tablat,w,c
  7993  004F60  A0D8               	btfss	status,0,c
  7994  004F62  D005               	goto	l1011
  7995  004F64  0E00               	movlw	0
  7996  004F66  6E1B               	movwf	?_dbc_2nd+1,c
  7997  004F68  0E01               	movlw	1
  7998  004F6A  6E1A               	movwf	?_dbc_2nd,c
  7999  004F6C  0012               	return	
  8000  004F6E                     l1011:
  8001                           
  8002                           ;ff.c: 719: if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
  8003  004F6E  0EAC               	movlw	low (_DbcTbl+6)
  8004  004F70  6EF6               	movwf	tblptrl,c
  8005  004F72  0E61               	movlw	high (_DbcTbl+6)
  8006  004F74  6EF7               	movwf	tblptrh,c
  8007  004F76                     	if	0	;tblptru may be non-zero
  8008  004F76                     	endif
  8009  004F76                     	if	0	;tblptru may be non-zero
  8010  004F76                     	endif
  8011  004F76  0009               	tblrd		*+
  8012  004F78  50F5               	movf	tablat,w,c
  8013  004F7A  5C1C               	subwf	dbc_2nd@c,w,c
  8014  004F7C  A0D8               	btfss	status,0,c
  8015  004F7E  D00E               	goto	l1013
  8016  004F80  0EAD               	movlw	low (_DbcTbl+7)
  8017  004F82  6EF6               	movwf	tblptrl,c
  8018  004F84  0E61               	movlw	high (_DbcTbl+7)
  8019  004F86  6EF7               	movwf	tblptrh,c
  8020  004F88                     	if	0	;tblptru may be non-zero
  8021  004F88                     	endif
  8022  004F88                     	if	0	;tblptru may be non-zero
  8023  004F88                     	endif
  8024  004F88  501C               	movf	dbc_2nd@c,w,c
  8025  004F8A  0009               	tblrd		*+
  8026  004F8C  5CF5               	subwf	tablat,w,c
  8027  004F8E  A0D8               	btfss	status,0,c
  8028  004F90  D005               	goto	l1013
  8029  004F92  0E00               	movlw	0
  8030  004F94  6E1B               	movwf	?_dbc_2nd+1,c
  8031  004F96  0E01               	movlw	1
  8032  004F98  6E1A               	movwf	?_dbc_2nd,c
  8033  004F9A  0012               	return	
  8034  004F9C                     l1013:
  8035                           
  8036                           ;ff.c: 720: if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
  8037  004F9C  0EAE               	movlw	low (_DbcTbl+8)
  8038  004F9E  6EF6               	movwf	tblptrl,c
  8039  004FA0  0E61               	movlw	high (_DbcTbl+8)
  8040  004FA2  6EF7               	movwf	tblptrh,c
  8041  004FA4                     	if	0	;tblptru may be non-zero
  8042  004FA4                     	endif
  8043  004FA4                     	if	0	;tblptru may be non-zero
  8044  004FA4                     	endif
  8045  004FA4  0009               	tblrd		*+
  8046  004FA6  50F5               	movf	tablat,w,c
  8047  004FA8  5C1C               	subwf	dbc_2nd@c,w,c
  8048  004FAA  A0D8               	btfss	status,0,c
  8049  004FAC  D00E               	goto	l1014
  8050  004FAE  0EAF               	movlw	low (_DbcTbl+9)
  8051  004FB0  6EF6               	movwf	tblptrl,c
  8052  004FB2  0E61               	movlw	high (_DbcTbl+9)
  8053  004FB4  6EF7               	movwf	tblptrh,c
  8054  004FB6                     	if	0	;tblptru may be non-zero
  8055  004FB6                     	endif
  8056  004FB6                     	if	0	;tblptru may be non-zero
  8057  004FB6                     	endif
  8058  004FB6  501C               	movf	dbc_2nd@c,w,c
  8059  004FB8  0009               	tblrd		*+
  8060  004FBA  5CF5               	subwf	tablat,w,c
  8061  004FBC  A0D8               	btfss	status,0,c
  8062  004FBE  D005               	goto	l1014
  8063  004FC0  0E00               	movlw	0
  8064  004FC2  6E1B               	movwf	?_dbc_2nd+1,c
  8065  004FC4  0E01               	movlw	1
  8066  004FC6  6E1A               	movwf	?_dbc_2nd,c
  8067  004FC8  0012               	return	
  8068  004FCA                     l1014:
  8069                           
  8070                           ;ff.c: 721: }
  8071                           ;ff.c: 725: return 0;
  8072  004FCA  0E00               	movlw	0
  8073  004FCC  6E1B               	movwf	?_dbc_2nd+1,c
  8074  004FCE  0E00               	movlw	0
  8075  004FD0  6E1A               	movwf	?_dbc_2nd,c
  8076  004FD2  0012               	return	
  8077  004FD4                     __end_of_dbc_2nd:
  8078                           	opt stack 0
  8079                           tosu	equ	0xFFF
  8080                           tosh	equ	0xFFE
  8081                           tosl	equ	0xFFD
  8082                           pclath	equ	0xFFA
  8083                           tblptru	equ	0xFF8
  8084                           tblptrh	equ	0xFF7
  8085                           tblptrl	equ	0xFF6
  8086                           tablat	equ	0xFF5
  8087                           prodh	equ	0xFF4
  8088                           prodl	equ	0xFF3
  8089                           intcon	equ	0xFF2
  8090                           intcon2	equ	0xFF1
  8091                           intcon3	equ	0xFF0
  8092                           indf0	equ	0xFEF
  8093                           postinc0	equ	0xFEE
  8094                           fsr0h	equ	0xFEA
  8095                           fsr0l	equ	0xFE9
  8096                           wreg	equ	0xFE8
  8097                           indf1	equ	0xFE7
  8098                           postinc1	equ	0xFE6
  8099                           postdec1	equ	0xFE5
  8100                           fsr1h	equ	0xFE2
  8101                           fsr1l	equ	0xFE1
  8102                           indf2	equ	0xFDF
  8103                           postinc2	equ	0xFDE
  8104                           postdec2	equ	0xFDD
  8105                           plusw2	equ	0xFDB
  8106                           fsr2h	equ	0xFDA
  8107                           fsr2l	equ	0xFD9
  8108                           status	equ	0xFD8
  8109                           
  8110 ;; *************** function _dbc_1st *****************
  8111 ;; Defined at:
  8112 ;;		line 688 in file "bibliotecas/ff.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;  c               1    wreg     unsigned char 
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;  c               1   27[COMRAM] unsigned char 
  8117 ;; Return value:  Size  Location     Type
  8118 ;;                  2   25[COMRAM] int 
  8119 ;; Registers used:
  8120 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  8121 ;; Tracked objects:
  8122 ;;		On entry : 0/0
  8123 ;;		On exit  : 0/0
  8124 ;;		Unchanged: 0/0
  8125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8126 ;;      Params:         2       0       0       0       0       0       0       0       0
  8127 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8129 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8130 ;;Total ram usage:        3 bytes
  8131 ;; Hardware stack levels used:    1
  8132 ;; Hardware stack levels required when called:    2
  8133 ;; This function calls:
  8134 ;;		Nothing
  8135 ;; This function is called by:
  8136 ;;		_create_name
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           	psect	text24
  8141  00540E                     __ptext24:
  8142                           	opt stack 0
  8143  00540E                     _dbc_1st:
  8144                           	opt stack 23
  8145                           
  8146                           ;incstack = 0
  8147                           ;dbc_1st@c stored from wreg
  8148  00540E  6E1C               	movwf	dbc_1st@c,c
  8149                           
  8150                           ;ff.c: 696: if (c >= DbcTbl[0]) {
  8151  005410  0EA6               	movlw	low _DbcTbl
  8152  005412  6EF6               	movwf	tblptrl,c
  8153  005414                     	if	1	;There is more than 1 active tblptr byte
  8154  005414  0E61               	movlw	high _DbcTbl
  8155  005416  6EF7               	movwf	tblptrh,c
  8156  005418                     	endif
  8157  005418                     	if	0	;There are less than 3 active tblptr bytes
  8158  005418                     	endif
  8159  005418  0009               	tblrd		*+
  8160  00541A  50F5               	movf	tablat,w,c
  8161  00541C  5C1C               	subwf	dbc_1st@c,w,c
  8162  00541E  A0D8               	btfss	status,0,c
  8163  005420  D025               	goto	l1007
  8164                           
  8165                           ;ff.c: 697: if (c <= DbcTbl[1]) return 1;
  8166  005422  0EA7               	movlw	low (_DbcTbl+1)
  8167  005424  6EF6               	movwf	tblptrl,c
  8168  005426  0E61               	movlw	high (_DbcTbl+1)
  8169  005428  6EF7               	movwf	tblptrh,c
  8170  00542A                     	if	0	;tblptru may be non-zero
  8171  00542A                     	endif
  8172  00542A                     	if	0	;tblptru may be non-zero
  8173  00542A                     	endif
  8174  00542A  501C               	movf	dbc_1st@c,w,c
  8175  00542C  0009               	tblrd		*+
  8176  00542E  5CF5               	subwf	tablat,w,c
  8177  005430  A0D8               	btfss	status,0,c
  8178  005432  D005               	goto	l1005
  8179  005434  0E00               	movlw	0
  8180  005436  6E1B               	movwf	?_dbc_1st+1,c
  8181  005438  0E01               	movlw	1
  8182  00543A  6E1A               	movwf	?_dbc_1st,c
  8183  00543C  0012               	return	
  8184  00543E                     l1005:
  8185                           
  8186                           ;ff.c: 698: if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
  8187  00543E  0EA8               	movlw	low (_DbcTbl+2)
  8188  005440  6EF6               	movwf	tblptrl,c
  8189  005442  0E61               	movlw	high (_DbcTbl+2)
  8190  005444  6EF7               	movwf	tblptrh,c
  8191  005446                     	if	0	;tblptru may be non-zero
  8192  005446                     	endif
  8193  005446                     	if	0	;tblptru may be non-zero
  8194  005446                     	endif
  8195  005446  0009               	tblrd		*+
  8196  005448  50F5               	movf	tablat,w,c
  8197  00544A  5C1C               	subwf	dbc_1st@c,w,c
  8198  00544C  A0D8               	btfss	status,0,c
  8199  00544E  D00E               	goto	l1007
  8200  005450  0EA9               	movlw	low (_DbcTbl+3)
  8201  005452  6EF6               	movwf	tblptrl,c
  8202  005454  0E61               	movlw	high (_DbcTbl+3)
  8203  005456  6EF7               	movwf	tblptrh,c
  8204  005458                     	if	0	;tblptru may be non-zero
  8205  005458                     	endif
  8206  005458                     	if	0	;tblptru may be non-zero
  8207  005458                     	endif
  8208  005458  501C               	movf	dbc_1st@c,w,c
  8209  00545A  0009               	tblrd		*+
  8210  00545C  5CF5               	subwf	tablat,w,c
  8211  00545E  A0D8               	btfss	status,0,c
  8212  005460  D005               	goto	l1007
  8213  005462  0E00               	movlw	0
  8214  005464  6E1B               	movwf	?_dbc_1st+1,c
  8215  005466  0E01               	movlw	1
  8216  005468  6E1A               	movwf	?_dbc_1st,c
  8217  00546A  0012               	return	
  8218  00546C                     l1007:
  8219                           
  8220                           ;ff.c: 699: }
  8221                           ;ff.c: 703: return 0;
  8222  00546C  0E00               	movlw	0
  8223  00546E  6E1B               	movwf	?_dbc_1st+1,c
  8224  005470  0E00               	movlw	0
  8225  005472  6E1A               	movwf	?_dbc_1st,c
  8226  005474  0012               	return	
  8227  005476                     __end_of_dbc_1st:
  8228                           	opt stack 0
  8229                           tosu	equ	0xFFF
  8230                           tosh	equ	0xFFE
  8231                           tosl	equ	0xFFD
  8232                           pclath	equ	0xFFA
  8233                           tblptru	equ	0xFF8
  8234                           tblptrh	equ	0xFF7
  8235                           tblptrl	equ	0xFF6
  8236                           tablat	equ	0xFF5
  8237                           prodh	equ	0xFF4
  8238                           prodl	equ	0xFF3
  8239                           intcon	equ	0xFF2
  8240                           intcon2	equ	0xFF1
  8241                           intcon3	equ	0xFF0
  8242                           indf0	equ	0xFEF
  8243                           postinc0	equ	0xFEE
  8244                           fsr0h	equ	0xFEA
  8245                           fsr0l	equ	0xFE9
  8246                           wreg	equ	0xFE8
  8247                           indf1	equ	0xFE7
  8248                           postinc1	equ	0xFE6
  8249                           postdec1	equ	0xFE5
  8250                           fsr1h	equ	0xFE2
  8251                           fsr1l	equ	0xFE1
  8252                           indf2	equ	0xFDF
  8253                           postinc2	equ	0xFDE
  8254                           postdec2	equ	0xFDD
  8255                           plusw2	equ	0xFDB
  8256                           fsr2h	equ	0xFDA
  8257                           fsr2l	equ	0xFD9
  8258                           status	equ	0xFD8
  8259                           
  8260 ;; *************** function _dir_register *****************
  8261 ;; Defined at:
  8262 ;;		line 2434 in file "bibliotecas/ff.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;  dp              2  156[BANK0 ] PTR struct .
  8265 ;;		 -> f_rename@djn(40), f_mkdir@dj(40), f_open@dj(40), 
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;  fs              2    5[BANK1 ] PTR struct .
  8268 ;;		 -> NULL(0), fs(559), 
  8269 ;;  res             1    7[BANK1 ] enum E154
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  1    wreg      enum E154
  8272 ;; Registers used:
  8273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8279 ;;      Params:         0       2       0       0       0       0       0       0       0
  8280 ;;      Locals:         0       0       3       0       0       0       0       0       0
  8281 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8282 ;;      Totals:         0       2       3       0       0       0       0       0       0
  8283 ;;Total ram usage:        5 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; Hardware stack levels required when called:   13
  8286 ;; This function calls:
  8287 ;;		_dir_alloc
  8288 ;;		_memcpy
  8289 ;;		_memset
  8290 ;;		_move_window
  8291 ;; This function is called by:
  8292 ;;		_f_open
  8293 ;;		_f_mkdir
  8294 ;;		_f_rename
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text25
  8299  0046D6                     __ptext25:
  8300                           	opt stack 0
  8301  0046D6                     _dir_register:
  8302                           	opt stack 14
  8303                           
  8304                           ;ff.c: 2438: FRESULT res;
  8305                           ;ff.c: 2439: FATFS *fs = dp->obj.fs;
  8306                           
  8307                           ;incstack = 0
  8308  0046D6  C0FC  FFD9         	movff	dir_register@dp,fsr2l
  8309  0046DA  C0FD  FFDA         	movff	dir_register@dp+1,fsr2h
  8310  0046DE  CFDE F178          	movff	postinc2,dir_register@fs
  8311  0046E2  CFDD F179          	movff	postdec2,dir_register@fs+1
  8312                           
  8313                           ;ff.c: 2511: res = dir_alloc(dp, 1);
  8314  0046E6  C0FC  F0F5         	movff	dir_register@dp,dir_alloc@dp
  8315  0046EA  C0FD  F0F6         	movff	dir_register@dp+1,dir_alloc@dp+1
  8316  0046EE  0E00               	movlw	0
  8317  0046F0  0100               	movlb	0	; () banked
  8318  0046F2  6FF8               	movwf	(dir_alloc@n_ent+1)& (0+255),b
  8319  0046F4  0E01               	movlw	1
  8320  0046F6  6FF7               	movwf	dir_alloc@n_ent& (0+255),b
  8321  0046F8  EC5C  F021         	call	_dir_alloc	;wreg free
  8322  0046FC  0101               	movlb	1	; () banked
  8323  0046FE  6F7A               	movwf	dir_register@res& (0+255),b
  8324                           
  8325                           ; BSR set to: 1
  8326                           ;ff.c: 2516: if (res == FR_OK) {
  8327  004700  517A               	movf	dir_register@res& (0+255),w,b
  8328  004702  A4D8               	btfss	status,2,c
  8329  004704  D04F               	goto	l1244
  8330                           
  8331                           ; BSR set to: 1
  8332                           ;ff.c: 2517: res = move_window(fs, dp->sect);
  8333  004706  C178  F090         	movff	dir_register@fs,move_window@fs
  8334  00470A  C179  F091         	movff	dir_register@fs+1,move_window@fs+1
  8335  00470E  0100               	movlb	0	; () banked
  8336  004710  EE20 F016          	lfsr	2,22
  8337  004714  51FC               	movf	dir_register@dp& (0+255),w,b
  8338  004716  26D9               	addwf	fsr2l,f,c
  8339  004718  51FD               	movf	(dir_register@dp+1)& (0+255),w,b
  8340  00471A  22DA               	addwfc	fsr2h,f,c
  8341  00471C  CFDE F092          	movff	postinc2,move_window@sect
  8342  004720  CFDE F093          	movff	postinc2,move_window@sect+1
  8343  004724  CFDE F094          	movff	postinc2,move_window@sect+2
  8344  004728  CFDE F095          	movff	postinc2,move_window@sect+3
  8345  00472C  EC09  F026         	call	_move_window	;wreg free
  8346  004730  0101               	movlb	1	; () banked
  8347  004732  6F7A               	movwf	dir_register@res& (0+255),b
  8348                           
  8349                           ; BSR set to: 1
  8350                           ;ff.c: 2518: if (res == FR_OK) {
  8351  004734  517A               	movf	dir_register@res& (0+255),w,b
  8352  004736  A4D8               	btfss	status,2,c
  8353  004738  D035               	goto	l1244
  8354                           
  8355                           ; BSR set to: 1
  8356                           ;ff.c: 2519: memset(dp->dir, 0, 32);
  8357  00473A  0100               	movlb	0	; () banked
  8358  00473C  EE20 F01A          	lfsr	2,26
  8359  004740  51FC               	movf	dir_register@dp& (0+255),w,b
  8360  004742  26D9               	addwf	fsr2l,f,c
  8361  004744  51FD               	movf	(dir_register@dp+1)& (0+255),w,b
  8362  004746  22DA               	addwfc	fsr2h,f,c
  8363  004748  CFDE F01A          	movff	postinc2,memset@p1
  8364  00474C  CFDD F01B          	movff	postdec2,memset@p1+1
  8365  004750  0E00               	movlw	0
  8366  004752  6E1D               	movwf	memset@c+1,c
  8367  004754  0E00               	movlw	0
  8368  004756  6E1C               	movwf	memset@c,c
  8369  004758  0E00               	movlw	0
  8370  00475A  6E1F               	movwf	memset@n+1,c
  8371  00475C  0E20               	movlw	32
  8372  00475E  6E1E               	movwf	memset@n,c
  8373  004760  ECD5  F02C         	call	_memset	;wreg free
  8374                           
  8375                           ;ff.c: 2520: memcpy(dp->dir + 0, dp->fn, 11);
  8376  004764  0100               	movlb	0	; () banked
  8377  004766  EE20 F01A          	lfsr	2,26
  8378  00476A  51FC               	movf	dir_register@dp& (0+255),w,b
  8379  00476C  26D9               	addwf	fsr2l,f,c
  8380  00476E  51FD               	movf	(dir_register@dp+1)& (0+255),w,b
  8381  004770  22DA               	addwfc	fsr2h,f,c
  8382  004772  CFDE F01A          	movff	postinc2,memcpy@d1
  8383  004776  CFDD F01B          	movff	postdec2,memcpy@d1+1
  8384  00477A  0E1C               	movlw	28
  8385  00477C  25FC               	addwf	dir_register@dp& (0+255),w,b
  8386  00477E  6E1C               	movwf	memcpy@s1,c
  8387  004780  0E00               	movlw	0
  8388  004782  21FD               	addwfc	(dir_register@dp+1)& (0+255),w,b
  8389  004784  6E1D               	movwf	memcpy@s1+1,c
  8390  004786  0E00               	movlw	0
  8391  004788  6E1F               	movwf	memcpy@n+1,c
  8392  00478A  0E0B               	movlw	11
  8393  00478C  6E1E               	movwf	memcpy@n,c
  8394  00478E  EC9C  F02A         	call	_memcpy	;wreg free
  8395                           
  8396                           ;ff.c: 2524: fs->wflag = 1;
  8397  004792  0101               	movlb	1	; () banked
  8398  004794  EE20 F003          	lfsr	2,3
  8399  004798  5178               	movf	dir_register@fs& (0+255),w,b
  8400  00479A  26D9               	addwf	fsr2l,f,c
  8401  00479C  5179               	movf	(dir_register@fs+1)& (0+255),w,b
  8402  00479E  22DA               	addwfc	fsr2h,f,c
  8403  0047A0  0E01               	movlw	1
  8404  0047A2  6EDF               	movwf	indf2,c
  8405  0047A4                     l1244:
  8406                           
  8407                           ; BSR set to: 1
  8408                           ;ff.c: 2525: }
  8409                           ;ff.c: 2526: }
  8410                           ;ff.c: 2528: return res;
  8411                           
  8412                           ; BSR set to: 1
  8413                           
  8414                           ; BSR set to: 1
  8415  0047A4  517A               	movf	dir_register@res& (0+255),w,b
  8416  0047A6  0012               	return	
  8417  0047A8                     __end_of_dir_register:
  8418                           	opt stack 0
  8419                           tosu	equ	0xFFF
  8420                           tosh	equ	0xFFE
  8421                           tosl	equ	0xFFD
  8422                           pclath	equ	0xFFA
  8423                           tblptru	equ	0xFF8
  8424                           tblptrh	equ	0xFF7
  8425                           tblptrl	equ	0xFF6
  8426                           tablat	equ	0xFF5
  8427                           prodh	equ	0xFF4
  8428                           prodl	equ	0xFF3
  8429                           intcon	equ	0xFF2
  8430                           intcon2	equ	0xFF1
  8431                           intcon3	equ	0xFF0
  8432                           indf0	equ	0xFEF
  8433                           postinc0	equ	0xFEE
  8434                           fsr0h	equ	0xFEA
  8435                           fsr0l	equ	0xFE9
  8436                           wreg	equ	0xFE8
  8437                           indf1	equ	0xFE7
  8438                           postinc1	equ	0xFE6
  8439                           postdec1	equ	0xFE5
  8440                           fsr1h	equ	0xFE2
  8441                           fsr1l	equ	0xFE1
  8442                           indf2	equ	0xFDF
  8443                           postinc2	equ	0xFDE
  8444                           postdec2	equ	0xFDD
  8445                           plusw2	equ	0xFDB
  8446                           fsr2h	equ	0xFDA
  8447                           fsr2l	equ	0xFD9
  8448                           status	equ	0xFD8
  8449                           
  8450 ;; *************** function _memcpy *****************
  8451 ;; Defined at:
  8452 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  8453 ;; Parameters:    Size  Location     Type
  8454 ;;  d1              2   25[COMRAM] PTR void 
  8455 ;;		 -> fs.win(512), f_gets@s(4), f_rename@djn(40), f_rename@buf(32), 
  8456 ;;		 -> NULL(0), fs(559), 
  8457 ;;  s1              2   27[COMRAM] PTR const void 
  8458 ;;		 -> fs.win(512), djn.fn(12), pb.buf(64), pb.buf(64), 
  8459 ;;		 -> pb.buf(64), f_printf@pb(70), f_puts@pb(70), f_putc@pb(70), 
  8460 ;;		 -> f_rename@djn(40), f_rename@buf(32), f_rename@djo(40), dj.fn(12), 
  8461 ;;		 -> f_mkdir@dj(40), dj.fn(12), f_open@dj(40), NULL(0), 
  8462 ;;		 -> STR_13(6), fs(559), 
  8463 ;;  n               2   29[COMRAM] unsigned int 
  8464 ;; Auto vars:     Size  Location     Type
  8465 ;;  s               2   34[COMRAM] PTR const unsigned char 
  8466 ;;		 -> fs.win(512), djn.fn(12), pb.buf(64), pb.buf(64), 
  8467 ;;		 -> pb.buf(64), f_printf@pb(70), f_puts@pb(70), f_putc@pb(70), 
  8468 ;;		 -> f_rename@djn(40), f_rename@buf(32), f_rename@djo(40), dj.fn(12), 
  8469 ;;		 -> f_mkdir@dj(40), dj.fn(12), f_open@dj(40), NULL(0), 
  8470 ;;		 -> STR_13(6), fs(559), 
  8471 ;;  d               2   32[COMRAM] PTR unsigned char 
  8472 ;;		 -> fs.win(512), f_gets@s(4), f_rename@djn(40), f_rename@buf(32), 
  8473 ;;		 -> NULL(0), fs(559), 
  8474 ;;  tmp             1   31[COMRAM] unsigned char 
  8475 ;; Return value:  Size  Location     Type
  8476 ;;                  2   25[COMRAM] PTR void 
  8477 ;; Registers used:
  8478 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8479 ;; Tracked objects:
  8480 ;;		On entry : 0/0
  8481 ;;		On exit  : 0/0
  8482 ;;		Unchanged: 0/0
  8483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8484 ;;      Params:         6       0       0       0       0       0       0       0       0
  8485 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8486 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8487 ;;      Totals:        11       0       0       0       0       0       0       0       0
  8488 ;;Total ram usage:       11 bytes
  8489 ;; Hardware stack levels used:    1
  8490 ;; Hardware stack levels required when called:    2
  8491 ;; This function calls:
  8492 ;;		Nothing
  8493 ;; This function is called by:
  8494 ;;		_dir_register
  8495 ;;		_f_write
  8496 ;;		_f_read
  8497 ;;		_f_mkdir
  8498 ;;		_f_rename
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           	psect	text26
  8503  005538                     __ptext26:
  8504                           	opt stack 0
  8505  005538                     _memcpy:
  8506                           	opt stack 25
  8507                           
  8508                           ; BSR set to: 1
  8509                           ;incstack = 0
  8510  005538  C01C  F023         	movff	memcpy@s1,memcpy@s
  8511  00553C  C01D  F024         	movff	memcpy@s1+1,memcpy@s+1
  8512  005540  C01A  F021         	movff	memcpy@d1,memcpy@d
  8513  005544  C01B  F022         	movff	memcpy@d1+1,memcpy@d+1
  8514  005548  D01B               	goto	l2485
  8515  00554A                     l14118:
  8516  00554A  C023  FFF6         	movff	memcpy@s,tblptrl
  8517  00554E  C024  FFF7         	movff	memcpy@s+1,tblptrh
  8518  005552  6AF8               	clrf	tblptru,c
  8519  005554  0E07               	movlw	(high __ramtop+-1)
  8520  005556  64F7               	cpfsgt	tblptrh,c
  8521  005558  D003               	bra	u18347
  8522  00555A  0008               	tblrd		*
  8523  00555C  50F5               	movf	tablat,w,c
  8524  00555E  D005               	bra	u18340
  8525  005560                     u18347:
  8526  005560  CFF6 FFE9          	movff	tblptrl,fsr0l
  8527  005564  CFF7 FFEA          	movff	tblptrh,fsr0h
  8528  005568  50EF               	movf	indf0,w,c
  8529  00556A                     u18340:
  8530  00556A  6E20               	movwf	memcpy@tmp,c
  8531  00556C  4A23               	infsnz	memcpy@s,f,c
  8532  00556E  2A24               	incf	memcpy@s+1,f,c
  8533  005570  C021  FFD9         	movff	memcpy@d,fsr2l
  8534  005574  C022  FFDA         	movff	memcpy@d+1,fsr2h
  8535  005578  C020  FFDF         	movff	memcpy@tmp,indf2
  8536  00557C  4A21               	infsnz	memcpy@d,f,c
  8537  00557E  2A22               	incf	memcpy@d+1,f,c
  8538  005580                     l2485:
  8539  005580  061E               	decf	memcpy@n,f,c
  8540  005582  A0D8               	btfss	status,0,c
  8541  005584  061F               	decf	memcpy@n+1,f,c
  8542  005586  281E               	incf	memcpy@n,w,c
  8543  005588  E1E0               	bnz	l14118
  8544  00558A  281F               	incf	memcpy@n+1,w,c
  8545  00558C  B4D8               	btfsc	status,2,c
  8546  00558E  0012               	return	
  8547  005590  D7DC               	goto	l2486
  8548  005592                     __end_of_memcpy:
  8549                           	opt stack 0
  8550                           tosu	equ	0xFFF
  8551                           tosh	equ	0xFFE
  8552                           tosl	equ	0xFFD
  8553                           pclath	equ	0xFFA
  8554                           tblptru	equ	0xFF8
  8555                           tblptrh	equ	0xFF7
  8556                           tblptrl	equ	0xFF6
  8557                           tablat	equ	0xFF5
  8558                           prodh	equ	0xFF4
  8559                           prodl	equ	0xFF3
  8560                           intcon	equ	0xFF2
  8561                           intcon2	equ	0xFF1
  8562                           intcon3	equ	0xFF0
  8563                           indf0	equ	0xFEF
  8564                           postinc0	equ	0xFEE
  8565                           fsr0h	equ	0xFEA
  8566                           fsr0l	equ	0xFE9
  8567                           wreg	equ	0xFE8
  8568                           indf1	equ	0xFE7
  8569                           postinc1	equ	0xFE6
  8570                           postdec1	equ	0xFE5
  8571                           fsr1h	equ	0xFE2
  8572                           fsr1l	equ	0xFE1
  8573                           indf2	equ	0xFDF
  8574                           postinc2	equ	0xFDE
  8575                           postdec2	equ	0xFDD
  8576                           plusw2	equ	0xFDB
  8577                           fsr2h	equ	0xFDA
  8578                           fsr2l	equ	0xFD9
  8579                           status	equ	0xFD8
  8580                           
  8581 ;; *************** function _dir_alloc *****************
  8582 ;; Defined at:
  8583 ;;		line 1775 in file "bibliotecas/ff.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;  dp              2  149[BANK0 ] PTR struct .
  8586 ;;		 -> f_rename@djn(40), f_mkdir@dj(40), f_open@dj(40), 
  8587 ;;  n_ent           2  151[BANK0 ] unsigned int 
  8588 ;; Auto vars:     Size  Location     Type
  8589 ;;  n               2    2[BANK1 ] unsigned int 
  8590 ;;  fs              2    0[BANK1 ] PTR struct .
  8591 ;;		 -> NULL(0), fs(559), 
  8592 ;;  res             1    4[BANK1 ] enum E154
  8593 ;; Return value:  Size  Location     Type
  8594 ;;                  1    wreg      enum E154
  8595 ;; Registers used:
  8596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8597 ;; Tracked objects:
  8598 ;;		On entry : 0/0
  8599 ;;		On exit  : 0/0
  8600 ;;		Unchanged: 0/0
  8601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8602 ;;      Params:         0       4       0       0       0       0       0       0       0
  8603 ;;      Locals:         0       0       5       0       0       0       0       0       0
  8604 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8605 ;;      Totals:         0       7       5       0       0       0       0       0       0
  8606 ;;Total ram usage:       12 bytes
  8607 ;; Hardware stack levels used:    1
  8608 ;; Hardware stack levels required when called:   12
  8609 ;; This function calls:
  8610 ;;		_dir_next
  8611 ;;		_dir_sdi
  8612 ;;		_move_window
  8613 ;; This function is called by:
  8614 ;;		_dir_register
  8615 ;; This function uses a non-reentrant model
  8616 ;;
  8617                           
  8618                           	psect	text27
  8619  0042B8                     __ptext27:
  8620                           	opt stack 0
  8621  0042B8                     _dir_alloc:
  8622                           	opt stack 14
  8623                           
  8624                           ;ff.c: 1780: FRESULT res;
  8625                           ;ff.c: 1781: UINT n;
  8626                           ;ff.c: 1782: FATFS *fs = dp->obj.fs;
  8627                           
  8628                           ;incstack = 0
  8629  0042B8  C0F5  FFD9         	movff	dir_alloc@dp,fsr2l
  8630  0042BC  C0F6  FFDA         	movff	dir_alloc@dp+1,fsr2h
  8631  0042C0  CFDE F173          	movff	postinc2,dir_alloc@fs
  8632  0042C4  CFDD F174          	movff	postdec2,dir_alloc@fs+1
  8633                           
  8634                           ;ff.c: 1785: res = dir_sdi(dp, 0);
  8635  0042C8  C0F5  F0B5         	movff	dir_alloc@dp,dir_sdi@dp
  8636  0042CC  C0F6  F0B6         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  8637  0042D0  0E00               	movlw	0
  8638  0042D2  0100               	movlb	0	; () banked
  8639  0042D4  6FB7               	movwf	dir_sdi@ofs& (0+255),b
  8640  0042D6  0E00               	movlw	0
  8641  0042D8  6FB8               	movwf	(dir_sdi@ofs+1)& (0+255),b
  8642  0042DA  0E00               	movlw	0
  8643  0042DC  6FB9               	movwf	(dir_sdi@ofs+2)& (0+255),b
  8644  0042DE  0E00               	movlw	0
  8645  0042E0  6FBA               	movwf	(dir_sdi@ofs+3)& (0+255),b
  8646  0042E2  EC99  F015         	call	_dir_sdi	;wreg free
  8647  0042E6  0101               	movlb	1	; () banked
  8648  0042E8  6F77               	movwf	dir_alloc@res& (0+255),b
  8649                           
  8650                           ; BSR set to: 1
  8651                           ;ff.c: 1786: if (res == FR_OK) {
  8652  0042EA  5177               	movf	dir_alloc@res& (0+255),w,b
  8653  0042EC  A4D8               	btfss	status,2,c
  8654  0042EE  D066               	goto	u18240
  8655                           
  8656                           ; BSR set to: 1
  8657                           ;ff.c: 1787: n = 0;
  8658  0042F0  0E00               	movlw	0
  8659  0042F2  6F76               	movwf	(dir_alloc@n+1)& (0+255),b
  8660  0042F4  0E00               	movlw	0
  8661  0042F6  6F75               	movwf	dir_alloc@n& (0+255),b
  8662  0042F8                     
  8663                           ; BSR set to: 1
  8664                           ;ff.c: 1789: res = move_window(fs, dp->sect);
  8665                           
  8666                           ; BSR set to: 1
  8667  0042F8  C173  F090         	movff	dir_alloc@fs,move_window@fs
  8668  0042FC  C174  F091         	movff	dir_alloc@fs+1,move_window@fs+1
  8669  004300  0100               	movlb	0	; () banked
  8670  004302  EE20 F016          	lfsr	2,22
  8671  004306  51F5               	movf	dir_alloc@dp& (0+255),w,b
  8672  004308  26D9               	addwf	fsr2l,f,c
  8673  00430A  51F6               	movf	(dir_alloc@dp+1)& (0+255),w,b
  8674  00430C  22DA               	addwfc	fsr2h,f,c
  8675  00430E  CFDE F092          	movff	postinc2,move_window@sect
  8676  004312  CFDE F093          	movff	postinc2,move_window@sect+1
  8677  004316  CFDE F094          	movff	postinc2,move_window@sect+2
  8678  00431A  CFDE F095          	movff	postinc2,move_window@sect+3
  8679  00431E  EC09  F026         	call	_move_window	;wreg free
  8680  004322  0101               	movlb	1	; () banked
  8681  004324  6F77               	movwf	dir_alloc@res& (0+255),b
  8682                           
  8683                           ; BSR set to: 1
  8684                           ;ff.c: 1790: if (res != FR_OK) break;
  8685  004326  5177               	movf	dir_alloc@res& (0+255),w,b
  8686  004328  A4D8               	btfss	status,2,c
  8687  00432A  D048               	goto	u18240
  8688                           
  8689                           ; BSR set to: 1
  8690                           ;ff.c: 1794: if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  8691                           
  8692                           ; BSR set to: 1
  8693                           
  8694                           ; BSR set to: 1
  8695  00432C  0100               	movlb	0	; () banked
  8696  00432E  EE20 F01A          	lfsr	2,26
  8697  004332  51F5               	movf	dir_alloc@dp& (0+255),w,b
  8698  004334  26D9               	addwf	fsr2l,f,c
  8699  004336  51F6               	movf	(dir_alloc@dp+1)& (0+255),w,b
  8700  004338  22DA               	addwfc	fsr2h,f,c
  8701  00433A  CFDE F0F9          	movff	postinc2,??_dir_alloc
  8702  00433E  CFDD F0FA          	movff	postdec2,??_dir_alloc+1
  8703  004342  C0F9  FFD9         	movff	??_dir_alloc,fsr2l
  8704  004346  C0FA  FFDA         	movff	??_dir_alloc+1,fsr2h
  8705  00434A  0EE5               	movlw	229
  8706  00434C  18DE               	xorwf	postinc2,w,c
  8707  00434E  B4D8               	btfsc	status,2,c
  8708  004350  D011               	goto	u18220
  8709                           
  8710                           ; BSR set to: 0
  8711  004352  EE20 F01A          	lfsr	2,26
  8712  004356  51F5               	movf	dir_alloc@dp& (0+255),w,b
  8713  004358  26D9               	addwf	fsr2l,f,c
  8714  00435A  51F6               	movf	(dir_alloc@dp+1)& (0+255),w,b
  8715  00435C  22DA               	addwfc	fsr2h,f,c
  8716  00435E  CFDE F0F9          	movff	postinc2,??_dir_alloc
  8717  004362  CFDD F0FA          	movff	postdec2,??_dir_alloc+1
  8718  004366  C0F9  FFD9         	movff	??_dir_alloc,fsr2l
  8719  00436A  C0FA  FFDA         	movff	??_dir_alloc+1,fsr2h
  8720  00436E  50DF               	movf	indf2,w,c
  8721  004370  A4D8               	btfss	status,2,c
  8722  004372  D00F               	goto	l1206
  8723  004374                     u18220:
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;ff.c: 1796: if (++n == n_ent) break;
  8727                           
  8728                           ; BSR set to: 0
  8729  004374  0101               	movlb	1	; () banked
  8730  004376  4B75               	infsnz	dir_alloc@n& (0+255),f,b
  8731  004378  2B76               	incf	(dir_alloc@n+1)& (0+255),f,b
  8732  00437A  0100               	movlb	0	; () banked
  8733  00437C  51F7               	movf	dir_alloc@n_ent& (0+255),w,b
  8734  00437E  0101               	movlb	1	; () banked
  8735  004380  1975               	xorwf	dir_alloc@n& (0+255),w,b
  8736  004382  E10C               	bnz	l14052
  8737  004384  0100               	movlb	0	; () banked
  8738  004386  51F8               	movf	(dir_alloc@n_ent+1)& (0+255),w,b
  8739  004388  0101               	movlb	1	; () banked
  8740  00438A  1976               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  8741  00438C  B4D8               	btfsc	status,2,c
  8742  00438E  D016               	goto	u18240
  8743  004390  D005               	goto	l1210
  8744  004392                     l1206:
  8745                           
  8746                           ;ff.c: 1798: n = 0;
  8747                           
  8748                           ; BSR set to: 1
  8749  004392  0E00               	movlw	0
  8750  004394  0101               	movlb	1	; () banked
  8751  004396  6F76               	movwf	(dir_alloc@n+1)& (0+255),b
  8752  004398  0E00               	movlw	0
  8753  00439A  6F75               	movwf	dir_alloc@n& (0+255),b
  8754  00439C                     l1210:
  8755  00439C                     l14052:
  8756                           
  8757                           ; BSR set to: 1
  8758                           ;ff.c: 1799: }
  8759                           ;ff.c: 1800: res = dir_next(dp, 1);
  8760  00439C  C0F5  F0D7         	movff	dir_alloc@dp,dir_next@dp
  8761  0043A0  C0F6  F0D8         	movff	dir_alloc@dp+1,dir_next@dp+1
  8762  0043A4  0E00               	movlw	0
  8763  0043A6  0100               	movlb	0	; () banked
  8764  0043A8  6FDA               	movwf	(dir_next@stretch+1)& (0+255),b
  8765  0043AA  0E01               	movlw	1
  8766  0043AC  6FD9               	movwf	dir_next@stretch& (0+255),b
  8767  0043AE  EC3A  F010         	call	_dir_next	;wreg free
  8768  0043B2  0101               	movlb	1	; () banked
  8769  0043B4  6F77               	movwf	dir_alloc@res& (0+255),b
  8770                           
  8771                           ; BSR set to: 1
  8772                           ;ff.c: 1801: } while (res == FR_OK);
  8773  0043B6  5177               	movf	dir_alloc@res& (0+255),w,b
  8774  0043B8  B4D8               	btfsc	status,2,c
  8775  0043BA  D79E               	goto	l1203
  8776  0043BC                     u18240:
  8777                           
  8778                           ; BSR set to: 1
  8779                           ;ff.c: 1802: }
  8780                           ;ff.c: 1804: if (res == FR_NO_FILE) res = FR_DENIED;
  8781                           
  8782                           ; BSR set to: 1
  8783                           
  8784                           ; BSR set to: 1
  8785  0043BC  0E04               	movlw	4
  8786  0043BE  1977               	xorwf	dir_alloc@res& (0+255),w,b
  8787  0043C0  A4D8               	btfss	status,2,c
  8788  0043C2  D002               	goto	l1211
  8789                           
  8790                           ; BSR set to: 1
  8791  0043C4  0E07               	movlw	7
  8792  0043C6  6F77               	movwf	dir_alloc@res& (0+255),b
  8793  0043C8                     l1211:
  8794                           
  8795                           ; BSR set to: 1
  8796                           ;ff.c: 1805: return res;
  8797  0043C8  5177               	movf	dir_alloc@res& (0+255),w,b
  8798  0043CA  0012               	return	
  8799  0043CC                     __end_of_dir_alloc:
  8800                           	opt stack 0
  8801                           tosu	equ	0xFFF
  8802                           tosh	equ	0xFFE
  8803                           tosl	equ	0xFFD
  8804                           pclath	equ	0xFFA
  8805                           tblptru	equ	0xFF8
  8806                           tblptrh	equ	0xFF7
  8807                           tblptrl	equ	0xFF6
  8808                           tablat	equ	0xFF5
  8809                           prodh	equ	0xFF4
  8810                           prodl	equ	0xFF3
  8811                           intcon	equ	0xFF2
  8812                           intcon2	equ	0xFF1
  8813                           intcon3	equ	0xFF0
  8814                           indf0	equ	0xFEF
  8815                           postinc0	equ	0xFEE
  8816                           fsr0h	equ	0xFEA
  8817                           fsr0l	equ	0xFE9
  8818                           wreg	equ	0xFE8
  8819                           indf1	equ	0xFE7
  8820                           postinc1	equ	0xFE6
  8821                           postdec1	equ	0xFE5
  8822                           fsr1h	equ	0xFE2
  8823                           fsr1l	equ	0xFE1
  8824                           indf2	equ	0xFDF
  8825                           postinc2	equ	0xFDE
  8826                           postdec2	equ	0xFDD
  8827                           plusw2	equ	0xFDB
  8828                           fsr2h	equ	0xFDA
  8829                           fsr2l	equ	0xFD9
  8830                           status	equ	0xFD8
  8831                           
  8832 ;; *************** function _dir_sdi *****************
  8833 ;; Defined at:
  8834 ;;		line 1666 in file "bibliotecas/ff.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;  dp              2   85[BANK0 ] PTR struct .
  8837 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@dj(40), f_unlink@sdj(40), 
  8838 ;;		 -> f_unlink@dj(40), f_stat@dj(40), f_open@dj(40), 
  8839 ;;  ofs             4   87[BANK0 ] unsigned long 
  8840 ;; Auto vars:     Size  Location     Type
  8841 ;;  clst            4  109[BANK0 ] unsigned long 
  8842 ;;  csz             4  105[BANK0 ] unsigned long 
  8843 ;;  fs              2  113[BANK0 ] PTR struct .
  8844 ;;		 -> NULL(0), fs(559), 
  8845 ;; Return value:  Size  Location     Type
  8846 ;;                  1    wreg      enum E154
  8847 ;; Registers used:
  8848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8854 ;;      Params:         0       6       0       0       0       0       0       0       0
  8855 ;;      Locals:         0      14       0       0       0       0       0       0       0
  8856 ;;      Temps:          0      10       0       0       0       0       0       0       0
  8857 ;;      Totals:         0      30       0       0       0       0       0       0       0
  8858 ;;Total ram usage:       30 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; Hardware stack levels required when called:   10
  8861 ;; This function calls:
  8862 ;;		_clst2sect
  8863 ;;		_get_fat
  8864 ;; This function is called by:
  8865 ;;		_dir_alloc
  8866 ;;		_dir_find
  8867 ;;		_follow_path
  8868 ;;		_f_opendir
  8869 ;;		_f_readdir
  8870 ;;		_f_unlink
  8871 ;; This function uses a non-reentrant model
  8872 ;;
  8873                           
  8874                           	psect	text28
  8875  002B32                     __ptext28:
  8876                           	opt stack 0
  8877  002B32                     _dir_sdi:
  8878                           	opt stack 16
  8879                           
  8880                           ;ff.c: 1671: DWORD csz, clst;
  8881                           ;ff.c: 1672: FATFS *fs = dp->obj.fs;
  8882                           
  8883                           ; BSR set to: 1
  8884                           ;incstack = 0
  8885  002B32  C0B5  FFD9         	movff	dir_sdi@dp,fsr2l
  8886  002B36  C0B6  FFDA         	movff	dir_sdi@dp+1,fsr2h
  8887  002B3A  CFDE F0D1          	movff	postinc2,dir_sdi@fs
  8888  002B3E  CFDD F0D2          	movff	postdec2,dir_sdi@fs+1
  8889                           
  8890                           ;ff.c: 1675: if (ofs >= (DWORD)((0 && fs->fs_type == 4) ? 0x10000000 : 0x200000) || ofs 
      +                          % 32) {
  8891  002B42  0E00               	movlw	0
  8892  002B44  0100               	movlb	0	; () banked
  8893  002B46  6FC5               	movwf	_dir_sdi$2591& (0+255),b
  8894  002B48  0E00               	movlw	0
  8895  002B4A  6FC6               	movwf	(_dir_sdi$2591+1)& (0+255),b
  8896  002B4C  0E20               	movlw	32
  8897  002B4E  6FC7               	movwf	(_dir_sdi$2591+2)& (0+255),b
  8898  002B50  0E00               	movlw	0
  8899                           
  8900                           ; BSR set to: 0
  8901  002B52  6FC8               	movwf	(_dir_sdi$2591+3)& (0+255),b
  8902                           
  8903                           ; BSR set to: 0
  8904                           
  8905                           ; BSR set to: 0
  8906  002B54  51C5               	movf	_dir_sdi$2591& (0+255),w,b
  8907  002B56  5DB7               	subwf	dir_sdi@ofs& (0+255),w,b
  8908  002B58  51C6               	movf	(_dir_sdi$2591+1)& (0+255),w,b
  8909  002B5A  59B8               	subwfb	(dir_sdi@ofs+1)& (0+255),w,b
  8910  002B5C  51C7               	movf	(_dir_sdi$2591+2)& (0+255),w,b
  8911  002B5E  59B9               	subwfb	(dir_sdi@ofs+2)& (0+255),w,b
  8912  002B60  51C8               	movf	(_dir_sdi$2591+3)& (0+255),w,b
  8913  002B62  59BA               	subwfb	(dir_sdi@ofs+3)& (0+255),w,b
  8914  002B64  B0D8               	btfsc	status,0,c
  8915  002B66  D012               	goto	u17650
  8916                           
  8917                           ; BSR set to: 0
  8918  002B68  0E1F               	movlw	31
  8919  002B6A  15B7               	andwf	dir_sdi@ofs& (0+255),w,b
  8920  002B6C  6FBB               	movwf	??_dir_sdi& (0+255),b
  8921  002B6E  0E00               	movlw	0
  8922  002B70  15B8               	andwf	(dir_sdi@ofs+1)& (0+255),w,b
  8923  002B72  6FBC               	movwf	(??_dir_sdi+1)& (0+255),b
  8924  002B74  0E00               	movlw	0
  8925  002B76  15B9               	andwf	(dir_sdi@ofs+2)& (0+255),w,b
  8926  002B78  6FBD               	movwf	(??_dir_sdi+2)& (0+255),b
  8927  002B7A  0E00               	movlw	0
  8928  002B7C  15BA               	andwf	(dir_sdi@ofs+3)& (0+255),w,b
  8929  002B7E  6FBE               	movwf	(??_dir_sdi+3)& (0+255),b
  8930  002B80  51BB               	movf	??_dir_sdi& (0+255),w,b
  8931  002B82  11BC               	iorwf	(??_dir_sdi+1)& (0+255),w,b
  8932  002B84  11BD               	iorwf	(??_dir_sdi+2)& (0+255),w,b
  8933  002B86  11BE               	iorwf	(??_dir_sdi+3)& (0+255),w,b
  8934  002B88  B4D8               	btfsc	status,2,c
  8935  002B8A  D002               	goto	l1152
  8936  002B8C                     u17650:
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;ff.c: 1676: return FR_INT_ERR;
  8940                           
  8941                           ; BSR set to: 0
  8942  002B8C  0E02               	movlw	2
  8943                           
  8944                           ; BSR set to: 0
  8945  002B8E  0012               	return	
  8946  002B90                     l1152:
  8947                           
  8948                           ; BSR set to: 0
  8949                           ;ff.c: 1677: }
  8950                           ;ff.c: 1678: dp->dptr = ofs;
  8951                           
  8952                           ; BSR set to: 0
  8953  002B90  EE20 F00E          	lfsr	2,14
  8954  002B94  51B5               	movf	dir_sdi@dp& (0+255),w,b
  8955  002B96  26D9               	addwf	fsr2l,f,c
  8956  002B98  51B6               	movf	(dir_sdi@dp+1)& (0+255),w,b
  8957  002B9A  22DA               	addwfc	fsr2h,f,c
  8958  002B9C  C0B7  FFDE         	movff	dir_sdi@ofs,postinc2
  8959  002BA0  C0B8  FFDE         	movff	dir_sdi@ofs+1,postinc2
  8960  002BA4  C0B9  FFDE         	movff	dir_sdi@ofs+2,postinc2
  8961  002BA8  C0BA  FFDE         	movff	dir_sdi@ofs+3,postinc2
  8962                           
  8963                           ;ff.c: 1679: clst = dp->obj.sclust;
  8964  002BAC  EE20 F006          	lfsr	2,6
  8965  002BB0  51B5               	movf	dir_sdi@dp& (0+255),w,b
  8966  002BB2  26D9               	addwf	fsr2l,f,c
  8967  002BB4  51B6               	movf	(dir_sdi@dp+1)& (0+255),w,b
  8968  002BB6  22DA               	addwfc	fsr2h,f,c
  8969  002BB8  CFDE F0CD          	movff	postinc2,dir_sdi@clst
  8970  002BBC  CFDE F0CE          	movff	postinc2,dir_sdi@clst+1
  8971  002BC0  CFDE F0CF          	movff	postinc2,dir_sdi@clst+2
  8972  002BC4  CFDE F0D0          	movff	postinc2,dir_sdi@clst+3
  8973                           
  8974                           ; BSR set to: 0
  8975                           ;ff.c: 1680: if (clst == 0 && fs->fs_type >= 3) {
  8976  002BC8  51CD               	movf	dir_sdi@clst& (0+255),w,b
  8977  002BCA  11CE               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  8978  002BCC  11CF               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  8979  002BCE  11D0               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  8980  002BD0  A4D8               	btfss	status,2,c
  8981  002BD2  D015               	goto	l1163
  8982                           
  8983                           ; BSR set to: 0
  8984  002BD4  C0D1  FFD9         	movff	dir_sdi@fs,fsr2l
  8985  002BD8  C0D2  FFDA         	movff	dir_sdi@fs+1,fsr2h
  8986  002BDC  0E02               	movlw	2
  8987  002BDE  64DF               	cpfsgt	indf2,c
  8988  002BE0  D00E               	goto	l1163
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;ff.c: 1681: clst = (DWORD)fs->dirbase;
  8992  002BE2  EE20 F023          	lfsr	2,35
  8993  002BE6  51D1               	movf	dir_sdi@fs& (0+255),w,b
  8994  002BE8  26D9               	addwf	fsr2l,f,c
  8995  002BEA  51D2               	movf	(dir_sdi@fs+1)& (0+255),w,b
  8996  002BEC  22DA               	addwfc	fsr2h,f,c
  8997  002BEE  CFDE F0CD          	movff	postinc2,dir_sdi@clst
  8998  002BF2  CFDE F0CE          	movff	postinc2,dir_sdi@clst+1
  8999  002BF6  CFDE F0CF          	movff	postinc2,dir_sdi@clst+2
  9000  002BFA  CFDE F0D0          	movff	postinc2,dir_sdi@clst+3
  9001  002BFE                     l1163:
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;ff.c: 1683: }
  9005                           ;ff.c: 1685: if (clst == 0) {
  9006                           
  9007                           ; BSR set to: 0
  9008                           
  9009                           ; BSR set to: 0
  9010  002BFE  51CD               	movf	dir_sdi@clst& (0+255),w,b
  9011  002C00  11CE               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  9012  002C02  11CF               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  9013  002C04  11D0               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  9014  002C06  A4D8               	btfss	status,2,c
  9015  002C08  D042               	goto	l1164
  9016                           
  9017                           ; BSR set to: 0
  9018                           ;ff.c: 1686: if (ofs / 32 >= fs->n_rootdir) return FR_INT_ERR;
  9019  002C0A  EE20 F007          	lfsr	2,7
  9020  002C0E  51D1               	movf	dir_sdi@fs& (0+255),w,b
  9021  002C10  26D9               	addwf	fsr2l,f,c
  9022  002C12  51D2               	movf	(dir_sdi@fs+1)& (0+255),w,b
  9023  002C14  22DA               	addwfc	fsr2h,f,c
  9024  002C16  CFDE F0BB          	movff	postinc2,??_dir_sdi
  9025  002C1A  CFDD F0BC          	movff	postdec2,??_dir_sdi+1
  9026  002C1E  51BB               	movf	??_dir_sdi& (0+255),w,b
  9027  002C20  6FBD               	movwf	(??_dir_sdi+2)& (0+255),b
  9028  002C22  51BC               	movf	(??_dir_sdi+1)& (0+255),w,b
  9029  002C24  6FBE               	movwf	(??_dir_sdi+3)& (0+255),b
  9030  002C26  6BBF               	clrf	(??_dir_sdi+4)& (0+255),b
  9031  002C28  6BC0               	clrf	(??_dir_sdi+5)& (0+255),b
  9032  002C2A  C0B7  F0C1         	movff	dir_sdi@ofs,??_dir_sdi+6
  9033  002C2E  C0B8  F0C2         	movff	dir_sdi@ofs+1,??_dir_sdi+7
  9034  002C32  C0B9  F0C3         	movff	dir_sdi@ofs+2,??_dir_sdi+8
  9035  002C36  C0BA  F0C4         	movff	dir_sdi@ofs+3,??_dir_sdi+9
  9036  002C3A  0E06               	movlw	6
  9037  002C3C  D005               	goto	u17690
  9038  002C3E                     u17695:
  9039  002C3E  90D8               	bcf	status,0,c
  9040  002C40  33C4               	rrcf	(??_dir_sdi+9)& (0+255),f,b
  9041  002C42  33C3               	rrcf	(??_dir_sdi+8)& (0+255),f,b
  9042  002C44  33C2               	rrcf	(??_dir_sdi+7)& (0+255),f,b
  9043  002C46  33C1               	rrcf	(??_dir_sdi+6)& (0+255),f,b
  9044  002C48                     u17690:
  9045  002C48  2EE8               	decfsz	wreg,f,c
  9046  002C4A  D7F9               	goto	u17695
  9047  002C4C  51BD               	movf	(??_dir_sdi+2)& (0+255),w,b
  9048  002C4E  5DC1               	subwf	(??_dir_sdi+6)& (0+255),w,b
  9049  002C50  51BE               	movf	(??_dir_sdi+3)& (0+255),w,b
  9050  002C52  59C2               	subwfb	(??_dir_sdi+7)& (0+255),w,b
  9051  002C54  51BF               	movf	(??_dir_sdi+4)& (0+255),w,b
  9052  002C56  59C3               	subwfb	(??_dir_sdi+8)& (0+255),w,b
  9053  002C58  51C0               	movf	(??_dir_sdi+5)& (0+255),w,b
  9054  002C5A  59C4               	subwfb	(??_dir_sdi+9)& (0+255),w,b
  9055  002C5C  A0D8               	btfss	status,0,c
  9056  002C5E  D002               	goto	l1165
  9057                           
  9058                           ; BSR set to: 0
  9059  002C60  0E02               	movlw	2
  9060                           
  9061                           ; BSR set to: 0
  9062  002C62  0012               	return	
  9063  002C64                     l1165:
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;ff.c: 1687: dp->sect = fs->dirbase;
  9067                           
  9068                           ; BSR set to: 0
  9069  002C64  EE20 F023          	lfsr	2,35
  9070  002C68  51D1               	movf	dir_sdi@fs& (0+255),w,b
  9071  002C6A  26D9               	addwf	fsr2l,f,c
  9072  002C6C  51D2               	movf	(dir_sdi@fs+1)& (0+255),w,b
  9073  002C6E  22DA               	addwfc	fsr2h,f,c
  9074  002C70  EE10 F016          	lfsr	1,22
  9075  002C74  51B5               	movf	dir_sdi@dp& (0+255),w,b
  9076  002C76  26E1               	addwf	fsr1l,f,c
  9077  002C78  51B6               	movf	(dir_sdi@dp+1)& (0+255),w,b
  9078  002C7A  22E2               	addwfc	fsr1h,f,c
  9079  002C7C  CFDE FFE6          	movff	postinc2,postinc1
  9080  002C80  CFDE FFE6          	movff	postinc2,postinc1
  9081  002C84  CFDE FFE6          	movff	postinc2,postinc1
  9082  002C88  CFDE FFE6          	movff	postinc2,postinc1
  9083                           
  9084                           ;ff.c: 1689: } else {
  9085  002C8C  D08C               	goto	l1166
  9086  002C8E                     l1164:
  9087                           
  9088                           ; BSR set to: 0
  9089                           ;ff.c: 1690: csz = (DWORD)fs->csize * ((UINT)512);
  9090                           
  9091                           ; BSR set to: 0
  9092  002C8E  EE20 F009          	lfsr	2,9
  9093  002C92  51D1               	movf	dir_sdi@fs& (0+255),w,b
  9094  002C94  26D9               	addwf	fsr2l,f,c
  9095  002C96  51D2               	movf	(dir_sdi@fs+1)& (0+255),w,b
  9096  002C98  22DA               	addwfc	fsr2h,f,c
  9097  002C9A  CFDE F0BB          	movff	postinc2,??_dir_sdi
  9098  002C9E  CFDD F0BC          	movff	postdec2,??_dir_sdi+1
  9099  002CA2  51BB               	movf	??_dir_sdi& (0+255),w,b
  9100  002CA4  6FBD               	movwf	(??_dir_sdi+2)& (0+255),b
  9101  002CA6  51BC               	movf	(??_dir_sdi+1)& (0+255),w,b
  9102  002CA8  6FBE               	movwf	(??_dir_sdi+3)& (0+255),b
  9103  002CAA  6BBF               	clrf	(??_dir_sdi+4)& (0+255),b
  9104  002CAC  6BC0               	clrf	(??_dir_sdi+5)& (0+255),b
  9105  002CAE  0E09               	movlw	9
  9106  002CB0                     u17715:
  9107  002CB0  90D8               	bcf	status,0,c
  9108  002CB2  37BD               	rlcf	(??_dir_sdi+2)& (0+255),f,b
  9109  002CB4  37BE               	rlcf	(??_dir_sdi+3)& (0+255),f,b
  9110  002CB6  37BF               	rlcf	(??_dir_sdi+4)& (0+255),f,b
  9111  002CB8  37C0               	rlcf	(??_dir_sdi+5)& (0+255),f,b
  9112  002CBA  2EE8               	decfsz	wreg,f,c
  9113  002CBC  D7F9               	goto	u17715
  9114  002CBE  C0BD  F0C9         	movff	??_dir_sdi+2,dir_sdi@csz
  9115  002CC2  C0BE  F0CA         	movff	??_dir_sdi+3,dir_sdi@csz+1
  9116  002CC6  C0BF  F0CB         	movff	??_dir_sdi+4,dir_sdi@csz+2
  9117  002CCA  C0C0  F0CC         	movff	??_dir_sdi+5,dir_sdi@csz+3
  9118                           
  9119                           ;ff.c: 1691: while (ofs >= csz) {
  9120  002CCE  D044               	goto	l1167
  9121  002CD0                     
  9122                           ; BSR set to: 0
  9123                           ;ff.c: 1692: clst = get_fat(&dp->obj, clst);
  9124                           
  9125                           ; BSR set to: 0
  9126  002CD0  C0B5  F09B         	movff	dir_sdi@dp,get_fat@obj
  9127  002CD4  C0B6  F09C         	movff	dir_sdi@dp+1,get_fat@obj+1
  9128  002CD8  C0CD  F09D         	movff	dir_sdi@clst,get_fat@clst
  9129  002CDC  C0CE  F09E         	movff	dir_sdi@clst+1,get_fat@clst+1
  9130  002CE0  C0CF  F09F         	movff	dir_sdi@clst+2,get_fat@clst+2
  9131  002CE4  C0D0  F0A0         	movff	dir_sdi@clst+3,get_fat@clst+3
  9132  002CE8  EC17  F012         	call	_get_fat	;wreg free
  9133  002CEC  C09B  F0CD         	movff	?_get_fat,dir_sdi@clst
  9134  002CF0  C09C  F0CE         	movff	?_get_fat+1,dir_sdi@clst+1
  9135  002CF4  C09D  F0CF         	movff	?_get_fat+2,dir_sdi@clst+2
  9136  002CF8  C09E  F0D0         	movff	?_get_fat+3,dir_sdi@clst+3
  9137                           
  9138                           ;ff.c: 1693: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  9139  002CFC  0100               	movlb	0	; () banked
  9140  002CFE  29CD               	incf	dir_sdi@clst& (0+255),w,b
  9141  002D00  E109               	bnz	l13784
  9142  002D02  29CE               	incf	(dir_sdi@clst+1)& (0+255),w,b
  9143  002D04  E107               	bnz	l13784
  9144  002D06  29CF               	incf	(dir_sdi@clst+2)& (0+255),w,b
  9145  002D08  E105               	bnz	l13784
  9146  002D0A  29D0               	incf	(dir_sdi@clst+3)& (0+255),w,b
  9147  002D0C  A4D8               	btfss	status,2,c
  9148  002D0E  D002               	goto	l1169
  9149                           
  9150                           ; BSR set to: 0
  9151  002D10  0E01               	movlw	1
  9152                           
  9153                           ; BSR set to: 0
  9154  002D12  0012               	return	
  9155  002D14                     l1169:
  9156  002D14                     l13784:
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;ff.c: 1694: if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;
  9160  002D14  51D0               	movf	(dir_sdi@clst+3)& (0+255),w,b
  9161  002D16  11CF               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  9162  002D18  11CE               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  9163  002D1A  E104               	bnz	u17730
  9164  002D1C  0E02               	movlw	2
  9165  002D1E  5DCD               	subwf	dir_sdi@clst& (0+255),w,b
  9166  002D20  A0D8               	btfss	status,0,c
  9167  002D22  D010               	goto	u17740
  9168  002D24                     u17730:
  9169                           
  9170                           ; BSR set to: 0
  9171  002D24  EE20 F013          	lfsr	2,19
  9172  002D28  51D1               	movf	dir_sdi@fs& (0+255),w,b
  9173  002D2A  26D9               	addwf	fsr2l,f,c
  9174  002D2C  51D2               	movf	(dir_sdi@fs+1)& (0+255),w,b
  9175  002D2E  22DA               	addwfc	fsr2h,f,c
  9176  002D30  50DE               	movf	postinc2,w,c
  9177  002D32  5DCD               	subwf	dir_sdi@clst& (0+255),w,b
  9178  002D34  50DE               	movf	postinc2,w,c
  9179  002D36  59CE               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  9180  002D38  50DE               	movf	postinc2,w,c
  9181  002D3A  59CF               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  9182  002D3C  50DE               	movf	postinc2,w,c
  9183  002D3E  59D0               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  9184  002D40  A0D8               	btfss	status,0,c
  9185  002D42  D002               	goto	l1170
  9186  002D44                     u17740:
  9187                           
  9188                           ; BSR set to: 0
  9189                           
  9190                           ; BSR set to: 0
  9191  002D44  0E02               	movlw	2
  9192                           
  9193                           ; BSR set to: 0
  9194  002D46  0012               	return	
  9195  002D48                     l1170:
  9196                           
  9197                           ; BSR set to: 0
  9198                           ;ff.c: 1695: ofs -= csz;
  9199                           
  9200                           ; BSR set to: 0
  9201  002D48  51C9               	movf	dir_sdi@csz& (0+255),w,b
  9202  002D4A  5FB7               	subwf	dir_sdi@ofs& (0+255),f,b
  9203  002D4C  51CA               	movf	(dir_sdi@csz+1)& (0+255),w,b
  9204  002D4E  5BB8               	subwfb	(dir_sdi@ofs+1)& (0+255),f,b
  9205  002D50  51CB               	movf	(dir_sdi@csz+2)& (0+255),w,b
  9206  002D52  5BB9               	subwfb	(dir_sdi@ofs+2)& (0+255),f,b
  9207  002D54  51CC               	movf	(dir_sdi@csz+3)& (0+255),w,b
  9208  002D56  5BBA               	subwfb	(dir_sdi@ofs+3)& (0+255),f,b
  9209  002D58                     l1167:
  9210                           
  9211                           ; BSR set to: 0
  9212  002D58  51C9               	movf	dir_sdi@csz& (0+255),w,b
  9213  002D5A  5DB7               	subwf	dir_sdi@ofs& (0+255),w,b
  9214  002D5C  51CA               	movf	(dir_sdi@csz+1)& (0+255),w,b
  9215  002D5E  59B8               	subwfb	(dir_sdi@ofs+1)& (0+255),w,b
  9216  002D60  51CB               	movf	(dir_sdi@csz+2)& (0+255),w,b
  9217  002D62  59B9               	subwfb	(dir_sdi@ofs+2)& (0+255),w,b
  9218  002D64  51CC               	movf	(dir_sdi@csz+3)& (0+255),w,b
  9219  002D66  59BA               	subwfb	(dir_sdi@ofs+3)& (0+255),w,b
  9220  002D68  B0D8               	btfsc	status,0,c
  9221  002D6A  D7B2               	goto	l1168
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;ff.c: 1696: }
  9225                           ;ff.c: 1697: dp->sect = clst2sect(fs, clst);
  9226                           
  9227                           ; BSR set to: 0
  9228  002D6C  C0D1  F026         	movff	dir_sdi@fs,clst2sect@fs
  9229  002D70  C0D2  F027         	movff	dir_sdi@fs+1,clst2sect@fs+1
  9230  002D74  C0CD  F028         	movff	dir_sdi@clst,clst2sect@clst
  9231  002D78  C0CE  F029         	movff	dir_sdi@clst+1,clst2sect@clst+1
  9232  002D7C  C0CF  F02A         	movff	dir_sdi@clst+2,clst2sect@clst+2
  9233  002D80  C0D0  F02B         	movff	dir_sdi@clst+3,clst2sect@clst+3
  9234  002D84  ECD4  F023         	call	_clst2sect	;wreg free
  9235  002D88  0100               	movlb	0	; () banked
  9236  002D8A  EE20 F016          	lfsr	2,22
  9237  002D8E  51B5               	movf	dir_sdi@dp& (0+255),w,b
  9238  002D90  26D9               	addwf	fsr2l,f,c
  9239  002D92  51B6               	movf	(dir_sdi@dp+1)& (0+255),w,b
  9240  002D94  22DA               	addwfc	fsr2h,f,c
  9241  002D96  C026  FFDE         	movff	?_clst2sect,postinc2
  9242  002D9A  C027  FFDE         	movff	?_clst2sect+1,postinc2
  9243  002D9E  C028  FFDE         	movff	?_clst2sect+2,postinc2
  9244  002DA2  C029  FFDE         	movff	?_clst2sect+3,postinc2
  9245  002DA6                     l1166:
  9246                           
  9247                           ; BSR set to: 0
  9248                           ;ff.c: 1698: }
  9249                           ;ff.c: 1699: dp->clust = clst;
  9250                           
  9251                           ; BSR set to: 0
  9252  002DA6  EE20 F012          	lfsr	2,18
  9253  002DAA  51B5               	movf	dir_sdi@dp& (0+255),w,b
  9254  002DAC  26D9               	addwf	fsr2l,f,c
  9255  002DAE  51B6               	movf	(dir_sdi@dp+1)& (0+255),w,b
  9256  002DB0  22DA               	addwfc	fsr2h,f,c
  9257  002DB2  C0CD  FFDE         	movff	dir_sdi@clst,postinc2
  9258  002DB6  C0CE  FFDE         	movff	dir_sdi@clst+1,postinc2
  9259  002DBA  C0CF  FFDE         	movff	dir_sdi@clst+2,postinc2
  9260  002DBE  C0D0  FFDE         	movff	dir_sdi@clst+3,postinc2
  9261                           
  9262                           ; BSR set to: 0
  9263                           ;ff.c: 1700: if (dp->sect == 0) return FR_INT_ERR;
  9264  002DC2  EE20 F016          	lfsr	2,22
  9265  002DC6  51B5               	movf	dir_sdi@dp& (0+255),w,b
  9266  002DC8  26D9               	addwf	fsr2l,f,c
  9267  002DCA  51B6               	movf	(dir_sdi@dp+1)& (0+255),w,b
  9268  002DCC  22DA               	addwfc	fsr2h,f,c
  9269  002DCE  50DE               	movf	postinc2,w,c
  9270  002DD0  10DE               	iorwf	postinc2,w,c
  9271  002DD2  10DE               	iorwf	postinc2,w,c
  9272  002DD4  10DE               	iorwf	postinc2,w,c
  9273  002DD6  A4D8               	btfss	status,2,c
  9274  002DD8  D002               	goto	l1174
  9275                           
  9276                           ; BSR set to: 0
  9277  002DDA  0E02               	movlw	2
  9278                           
  9279                           ; BSR set to: 0
  9280  002DDC  0012               	return	
  9281  002DDE                     l1174:
  9282                           
  9283                           ; BSR set to: 0
  9284                           ;ff.c: 1701: dp->sect += ofs / ((UINT)512);
  9285                           
  9286                           ; BSR set to: 0
  9287  002DDE  C0B7  F0BB         	movff	dir_sdi@ofs,??_dir_sdi
  9288  002DE2  C0B8  F0BC         	movff	dir_sdi@ofs+1,??_dir_sdi+1
  9289  002DE6  C0B9  F0BD         	movff	dir_sdi@ofs+2,??_dir_sdi+2
  9290  002DEA  C0BA  F0BE         	movff	dir_sdi@ofs+3,??_dir_sdi+3
  9291  002DEE  0E0A               	movlw	10
  9292  002DF0  D005               	goto	u17770
  9293  002DF2                     u17775:
  9294  002DF2  90D8               	bcf	status,0,c
  9295  002DF4  33BE               	rrcf	(??_dir_sdi+3)& (0+255),f,b
  9296  002DF6  33BD               	rrcf	(??_dir_sdi+2)& (0+255),f,b
  9297  002DF8  33BC               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  9298  002DFA  33BB               	rrcf	??_dir_sdi& (0+255),f,b
  9299  002DFC                     u17770:
  9300  002DFC  2EE8               	decfsz	wreg,f,c
  9301  002DFE  D7F9               	goto	u17775
  9302  002E00  EE20 F016          	lfsr	2,22
  9303  002E04  51B5               	movf	dir_sdi@dp& (0+255),w,b
  9304  002E06  26D9               	addwf	fsr2l,f,c
  9305  002E08  51B6               	movf	(dir_sdi@dp+1)& (0+255),w,b
  9306  002E0A  22DA               	addwfc	fsr2h,f,c
  9307  002E0C  51BB               	movf	??_dir_sdi& (0+255),w,b
  9308  002E0E  26DE               	addwf	postinc2,f,c
  9309  002E10  51BC               	movf	(??_dir_sdi+1)& (0+255),w,b
  9310  002E12  22DE               	addwfc	postinc2,f,c
  9311  002E14  51BD               	movf	(??_dir_sdi+2)& (0+255),w,b
  9312  002E16  22DE               	addwfc	postinc2,f,c
  9313  002E18  51BE               	movf	(??_dir_sdi+3)& (0+255),w,b
  9314  002E1A  22DE               	addwfc	postinc2,f,c
  9315                           
  9316                           ;ff.c: 1702: dp->dir = fs->win + (ofs % ((UINT)512));
  9317  002E1C  0EFF               	movlw	255
  9318  002E1E  6FBB               	movwf	??_dir_sdi& (0+255),b
  9319  002E20  0E01               	movlw	1
  9320  002E22  6FBC               	movwf	(??_dir_sdi+1)& (0+255),b
  9321  002E24  C0B7  F0BD         	movff	dir_sdi@ofs,??_dir_sdi+2
  9322  002E28  C0B8  F0BE         	movff	dir_sdi@ofs+1,??_dir_sdi+3
  9323  002E2C  51BB               	movf	??_dir_sdi& (0+255),w,b
  9324  002E2E  17BD               	andwf	(??_dir_sdi+2)& (0+255),f,b
  9325  002E30  51BC               	movf	(??_dir_sdi+1)& (0+255),w,b
  9326  002E32  17BE               	andwf	(??_dir_sdi+3)& (0+255),f,b
  9327  002E34  0E2F               	movlw	47
  9328  002E36  27BD               	addwf	(??_dir_sdi+2)& (0+255),f,b
  9329  002E38  0E00               	movlw	0
  9330  002E3A  23BE               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  9331  002E3C  C0D1  F0BF         	movff	dir_sdi@fs,??_dir_sdi+4
  9332  002E40  C0D2  F0C0         	movff	dir_sdi@fs+1,??_dir_sdi+5
  9333  002E44  51BD               	movf	(??_dir_sdi+2)& (0+255),w,b
  9334  002E46  27BF               	addwf	(??_dir_sdi+4)& (0+255),f,b
  9335  002E48  51BE               	movf	(??_dir_sdi+3)& (0+255),w,b
  9336  002E4A  23C0               	addwfc	(??_dir_sdi+5)& (0+255),f,b
  9337  002E4C  EE20 F01A          	lfsr	2,26
  9338  002E50  51B5               	movf	dir_sdi@dp& (0+255),w,b
  9339  002E52  26D9               	addwf	fsr2l,f,c
  9340  002E54  51B6               	movf	(dir_sdi@dp+1)& (0+255),w,b
  9341  002E56  22DA               	addwfc	fsr2h,f,c
  9342  002E58  C0BF  FFDE         	movff	??_dir_sdi+4,postinc2
  9343  002E5C  C0C0  FFDD         	movff	??_dir_sdi+5,postdec2
  9344                           
  9345                           ; BSR set to: 0
  9346                           ;ff.c: 1704: return FR_OK;
  9347  002E60  0E00               	movlw	0
  9348  002E62  0012               	return	
  9349  002E64                     __end_of_dir_sdi:
  9350                           	opt stack 0
  9351                           tosu	equ	0xFFF
  9352                           tosh	equ	0xFFE
  9353                           tosl	equ	0xFFD
  9354                           pclath	equ	0xFFA
  9355                           tblptru	equ	0xFF8
  9356                           tblptrh	equ	0xFF7
  9357                           tblptrl	equ	0xFF6
  9358                           tablat	equ	0xFF5
  9359                           prodh	equ	0xFF4
  9360                           prodl	equ	0xFF3
  9361                           intcon	equ	0xFF2
  9362                           intcon2	equ	0xFF1
  9363                           intcon3	equ	0xFF0
  9364                           indf0	equ	0xFEF
  9365                           postinc0	equ	0xFEE
  9366                           fsr0h	equ	0xFEA
  9367                           fsr0l	equ	0xFE9
  9368                           wreg	equ	0xFE8
  9369                           indf1	equ	0xFE7
  9370                           postinc1	equ	0xFE6
  9371                           postdec1	equ	0xFE5
  9372                           fsr1h	equ	0xFE2
  9373                           fsr1l	equ	0xFE1
  9374                           indf2	equ	0xFDF
  9375                           postinc2	equ	0xFDE
  9376                           postdec2	equ	0xFDD
  9377                           plusw2	equ	0xFDB
  9378                           fsr2h	equ	0xFDA
  9379                           fsr2l	equ	0xFD9
  9380                           status	equ	0xFD8
  9381                           
  9382 ;; *************** function _dir_next *****************
  9383 ;; Defined at:
  9384 ;;		line 1714 in file "bibliotecas/ff.c"
  9385 ;; Parameters:    Size  Location     Type
  9386 ;;  dp              2  119[BANK0 ] PTR struct .
  9387 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@dj(40), f_unlink@sdj(40), 
  9388 ;;		 -> f_unlink@dj(40), f_stat@dj(40), f_open@dj(40), 
  9389 ;;  stretch         2  121[BANK0 ] int 
  9390 ;; Auto vars:     Size  Location     Type
  9391 ;;  clst            4  145[BANK0 ] unsigned long 
  9392 ;;  ofs             4  139[BANK0 ] unsigned long 
  9393 ;;  fs              2  143[BANK0 ] PTR struct .
  9394 ;;		 -> NULL(0), fs(559), 
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  1    wreg      enum E154
  9397 ;; Registers used:
  9398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9404 ;;      Params:         0       4       0       0       0       0       0       0       0
  9405 ;;      Locals:         0      14       0       0       0       0       0       0       0
  9406 ;;      Temps:          0      12       0       0       0       0       0       0       0
  9407 ;;      Totals:         0      30       0       0       0       0       0       0       0
  9408 ;;Total ram usage:       30 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:   11
  9411 ;; This function calls:
  9412 ;;		_clst2sect
  9413 ;;		_create_chain
  9414 ;;		_dir_clear
  9415 ;;		_get_fat
  9416 ;; This function is called by:
  9417 ;;		_dir_alloc
  9418 ;;		_dir_find
  9419 ;;		_dir_read
  9420 ;;		_f_readdir
  9421 ;; This function uses a non-reentrant model
  9422 ;;
  9423                           
  9424                           	psect	text29
  9425  002074                     __ptext29:
  9426                           	opt stack 0
  9427  002074                     _dir_next:
  9428                           	opt stack 14
  9429                           
  9430                           ;ff.c: 1719: DWORD ofs, clst;
  9431                           ;ff.c: 1720: FATFS *fs = dp->obj.fs;
  9432                           
  9433                           ; BSR set to: 0
  9434                           ;incstack = 0
  9435  002074  C0D7  FFD9         	movff	dir_next@dp,fsr2l
  9436  002078  C0D8  FFDA         	movff	dir_next@dp+1,fsr2h
  9437  00207C  CFDE F0EF          	movff	postinc2,dir_next@fs
  9438  002080  CFDD F0F0          	movff	postdec2,dir_next@fs+1
  9439                           
  9440                           ;ff.c: 1723: ofs = dp->dptr + 32;
  9441  002084  0100               	movlb	0	; () banked
  9442  002086  EE20 F00E          	lfsr	2,14
  9443  00208A  51D7               	movf	dir_next@dp& (0+255),w,b
  9444  00208C  26D9               	addwf	fsr2l,f,c
  9445  00208E  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9446  002090  22DA               	addwfc	fsr2h,f,c
  9447  002092  CFDE F0DB          	movff	postinc2,??_dir_next
  9448  002096  CFDE F0DC          	movff	postinc2,??_dir_next+1
  9449  00209A  CFDE F0DD          	movff	postinc2,??_dir_next+2
  9450  00209E  CFDE F0DE          	movff	postinc2,??_dir_next+3
  9451  0020A2  0E20               	movlw	32
  9452  0020A4  25DB               	addwf	??_dir_next& (0+255),w,b
  9453  0020A6  6FEB               	movwf	dir_next@ofs& (0+255),b
  9454  0020A8  0E00               	movlw	0
  9455  0020AA  21DC               	addwfc	(??_dir_next+1)& (0+255),w,b
  9456  0020AC  6FEC               	movwf	(dir_next@ofs+1)& (0+255),b
  9457  0020AE  0E00               	movlw	0
  9458  0020B0  21DD               	addwfc	(??_dir_next+2)& (0+255),w,b
  9459  0020B2  6FED               	movwf	(dir_next@ofs+2)& (0+255),b
  9460  0020B4  0E00               	movlw	0
  9461  0020B6  21DE               	addwfc	(??_dir_next+3)& (0+255),w,b
  9462  0020B8  6FEE               	movwf	(dir_next@ofs+3)& (0+255),b
  9463                           
  9464                           ; BSR set to: 0
  9465                           
  9466                           ; BSR set to: 0
  9467                           
  9468                           ; BSR set to: 0
  9469                           
  9470                           ;ff.c: 1724: if (ofs >= (DWORD)((0 && fs->fs_type == 4) ? 0x10000000 : 0x200000)) dp->se
      +                          ct = 0;
  9471  0020BA  0E00               	movlw	0
  9472  0020BC  6FE7               	movwf	_dir_next$2628& (0+255),b
  9473  0020BE  0E00               	movlw	0
  9474  0020C0  6FE8               	movwf	(_dir_next$2628+1)& (0+255),b
  9475  0020C2  0E20               	movlw	32
  9476  0020C4  6FE9               	movwf	(_dir_next$2628+2)& (0+255),b
  9477  0020C6  0E00               	movlw	0
  9478                           
  9479                           ; BSR set to: 0
  9480                           
  9481                           ; BSR set to: 0
  9482  0020C8  6FEA               	movwf	(_dir_next$2628+3)& (0+255),b
  9483                           
  9484                           ; BSR set to: 0
  9485                           
  9486                           ; BSR set to: 0
  9487  0020CA  51E7               	movf	_dir_next$2628& (0+255),w,b
  9488  0020CC  5DEB               	subwf	dir_next@ofs& (0+255),w,b
  9489  0020CE  51E8               	movf	(_dir_next$2628+1)& (0+255),w,b
  9490  0020D0  59EC               	subwfb	(dir_next@ofs+1)& (0+255),w,b
  9491  0020D2  51E9               	movf	(_dir_next$2628+2)& (0+255),w,b
  9492  0020D4  59ED               	subwfb	(dir_next@ofs+2)& (0+255),w,b
  9493  0020D6  51EA               	movf	(_dir_next$2628+3)& (0+255),w,b
  9494  0020D8  59EE               	subwfb	(dir_next@ofs+3)& (0+255),w,b
  9495  0020DA  A0D8               	btfss	status,0,c
  9496  0020DC  D00A               	goto	l1177
  9497                           
  9498                           ; BSR set to: 0
  9499  0020DE  EE20 F016          	lfsr	2,22
  9500  0020E2  51D7               	movf	dir_next@dp& (0+255),w,b
  9501  0020E4  26D9               	addwf	fsr2l,f,c
  9502  0020E6  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9503  0020E8  22DA               	addwfc	fsr2h,f,c
  9504  0020EA  6ADE               	clrf	postinc2,c
  9505  0020EC  6ADE               	clrf	postinc2,c
  9506  0020EE  6ADE               	clrf	postinc2,c
  9507  0020F0  6ADD               	clrf	postdec2,c
  9508  0020F2                     l1177:
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;ff.c: 1725: if (dp->sect == 0) return FR_NO_FILE;
  9512  0020F2  EE20 F016          	lfsr	2,22
  9513  0020F6  51D7               	movf	dir_next@dp& (0+255),w,b
  9514  0020F8  26D9               	addwf	fsr2l,f,c
  9515  0020FA  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9516  0020FC  22DA               	addwfc	fsr2h,f,c
  9517  0020FE  50DE               	movf	postinc2,w,c
  9518  002100  10DE               	iorwf	postinc2,w,c
  9519  002102  10DE               	iorwf	postinc2,w,c
  9520  002104  10DE               	iorwf	postinc2,w,c
  9521  002106  A4D8               	btfss	status,2,c
  9522  002108  D002               	goto	l1184
  9523                           
  9524                           ; BSR set to: 0
  9525  00210A  0E04               	movlw	4
  9526                           
  9527                           ; BSR set to: 0
  9528  00210C  0012               	return	
  9529  00210E                     l1184:
  9530                           
  9531                           ; BSR set to: 0
  9532                           ;ff.c: 1727: if (ofs % ((UINT)512) == 0) {
  9533                           
  9534                           ; BSR set to: 0
  9535  00210E  0EFF               	movlw	255
  9536  002110  15EB               	andwf	dir_next@ofs& (0+255),w,b
  9537  002112  6FDB               	movwf	??_dir_next& (0+255),b
  9538  002114  0E01               	movlw	1
  9539  002116  15EC               	andwf	(dir_next@ofs+1)& (0+255),w,b
  9540  002118  6FDC               	movwf	(??_dir_next+1)& (0+255),b
  9541  00211A  0E00               	movlw	0
  9542  00211C  15ED               	andwf	(dir_next@ofs+2)& (0+255),w,b
  9543  00211E  6FDD               	movwf	(??_dir_next+2)& (0+255),b
  9544  002120  0E00               	movlw	0
  9545  002122  15EE               	andwf	(dir_next@ofs+3)& (0+255),w,b
  9546  002124  6FDE               	movwf	(??_dir_next+3)& (0+255),b
  9547  002126  51DB               	movf	??_dir_next& (0+255),w,b
  9548  002128  11DC               	iorwf	(??_dir_next+1)& (0+255),w,b
  9549  00212A  11DD               	iorwf	(??_dir_next+2)& (0+255),w,b
  9550  00212C  11DE               	iorwf	(??_dir_next+3)& (0+255),w,b
  9551  00212E  A4D8               	btfss	status,2,c
  9552  002130  D14C               	goto	l1190
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;ff.c: 1728: dp->sect++;
  9556  002132  EE20 F016          	lfsr	2,22
  9557  002136  51D7               	movf	dir_next@dp& (0+255),w,b
  9558  002138  26D9               	addwf	fsr2l,f,c
  9559  00213A  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9560  00213C  22DA               	addwfc	fsr2h,f,c
  9561  00213E  2ADE               	incf	postinc2,f,c
  9562  002140  0E00               	movlw	0
  9563  002142  22DE               	addwfc	postinc2,f,c
  9564  002144  22DE               	addwfc	postinc2,f,c
  9565  002146  22DE               	addwfc	postinc2,f,c
  9566                           
  9567                           ;ff.c: 1730: if (dp->clust == 0) {
  9568  002148  EE20 F012          	lfsr	2,18
  9569  00214C  51D7               	movf	dir_next@dp& (0+255),w,b
  9570  00214E  26D9               	addwf	fsr2l,f,c
  9571  002150  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9572  002152  22DA               	addwfc	fsr2h,f,c
  9573  002154  50DE               	movf	postinc2,w,c
  9574  002156  10DE               	iorwf	postinc2,w,c
  9575  002158  10DE               	iorwf	postinc2,w,c
  9576  00215A  10DE               	iorwf	postinc2,w,c
  9577  00215C  A4D8               	btfss	status,2,c
  9578  00215E  D037               	goto	l1187
  9579                           
  9580                           ; BSR set to: 0
  9581                           ;ff.c: 1731: if (ofs / 32 >= fs->n_rootdir) {
  9582  002160  EE20 F007          	lfsr	2,7
  9583  002164  51EF               	movf	dir_next@fs& (0+255),w,b
  9584  002166  26D9               	addwf	fsr2l,f,c
  9585  002168  51F0               	movf	(dir_next@fs+1)& (0+255),w,b
  9586  00216A  22DA               	addwfc	fsr2h,f,c
  9587  00216C  CFDE F0DB          	movff	postinc2,??_dir_next
  9588  002170  CFDD F0DC          	movff	postdec2,??_dir_next+1
  9589  002174  51DB               	movf	??_dir_next& (0+255),w,b
  9590  002176  6FDD               	movwf	(??_dir_next+2)& (0+255),b
  9591  002178  51DC               	movf	(??_dir_next+1)& (0+255),w,b
  9592  00217A  6FDE               	movwf	(??_dir_next+3)& (0+255),b
  9593  00217C  6BDF               	clrf	(??_dir_next+4)& (0+255),b
  9594  00217E  6BE0               	clrf	(??_dir_next+5)& (0+255),b
  9595  002180  C0EB  F0E1         	movff	dir_next@ofs,??_dir_next+6
  9596  002184  C0EC  F0E2         	movff	dir_next@ofs+1,??_dir_next+7
  9597  002188  C0ED  F0E3         	movff	dir_next@ofs+2,??_dir_next+8
  9598  00218C  C0EE  F0E4         	movff	dir_next@ofs+3,??_dir_next+9
  9599  002190  0E06               	movlw	6
  9600  002192  D005               	goto	u17830
  9601  002194                     u17835:
  9602  002194  90D8               	bcf	status,0,c
  9603  002196  33E4               	rrcf	(??_dir_next+9)& (0+255),f,b
  9604  002198  33E3               	rrcf	(??_dir_next+8)& (0+255),f,b
  9605  00219A  33E2               	rrcf	(??_dir_next+7)& (0+255),f,b
  9606  00219C  33E1               	rrcf	(??_dir_next+6)& (0+255),f,b
  9607  00219E                     u17830:
  9608  00219E  2EE8               	decfsz	wreg,f,c
  9609  0021A0  D7F9               	goto	u17835
  9610  0021A2  51DD               	movf	(??_dir_next+2)& (0+255),w,b
  9611  0021A4  5DE1               	subwf	(??_dir_next+6)& (0+255),w,b
  9612  0021A6  51DE               	movf	(??_dir_next+3)& (0+255),w,b
  9613  0021A8  59E2               	subwfb	(??_dir_next+7)& (0+255),w,b
  9614  0021AA  51DF               	movf	(??_dir_next+4)& (0+255),w,b
  9615  0021AC  59E3               	subwfb	(??_dir_next+8)& (0+255),w,b
  9616  0021AE  51E0               	movf	(??_dir_next+5)& (0+255),w,b
  9617  0021B0  59E4               	subwfb	(??_dir_next+9)& (0+255),w,b
  9618  0021B2  A0D8               	btfss	status,0,c
  9619  0021B4  D10A               	goto	l1190
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;ff.c: 1732: dp->sect = 0; return FR_NO_FILE;
  9623  0021B6  EE20 F016          	lfsr	2,22
  9624  0021BA  51D7               	movf	dir_next@dp& (0+255),w,b
  9625  0021BC  26D9               	addwf	fsr2l,f,c
  9626  0021BE  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9627  0021C0  22DA               	addwfc	fsr2h,f,c
  9628  0021C2  6ADE               	clrf	postinc2,c
  9629  0021C4  6ADE               	clrf	postinc2,c
  9630  0021C6  6ADE               	clrf	postinc2,c
  9631  0021C8  6ADD               	clrf	postdec2,c
  9632                           
  9633                           ; BSR set to: 0
  9634  0021CA  0E04               	movlw	4
  9635                           
  9636                           ; BSR set to: 0
  9637  0021CC  0012               	return	
  9638  0021CE                     l1187:
  9639                           
  9640                           ; BSR set to: 0
  9641                           ;ff.c: 1735: else {
  9642                           ;ff.c: 1736: if ((ofs / ((UINT)512) & (fs->csize - 1)) == 0) {
  9643                           
  9644                           ; BSR set to: 0
  9645  0021CE  0EFF               	movlw	255
  9646  0021D0  6FDB               	movwf	??_dir_next& (0+255),b
  9647  0021D2  0EFF               	movlw	255
  9648  0021D4  6FDC               	movwf	(??_dir_next+1)& (0+255),b
  9649  0021D6  EE20 F009          	lfsr	2,9
  9650  0021DA  51EF               	movf	dir_next@fs& (0+255),w,b
  9651  0021DC  26D9               	addwf	fsr2l,f,c
  9652  0021DE  51F0               	movf	(dir_next@fs+1)& (0+255),w,b
  9653  0021E0  22DA               	addwfc	fsr2h,f,c
  9654  0021E2  CFDE F0DD          	movff	postinc2,??_dir_next+2
  9655  0021E6  CFDD F0DE          	movff	postdec2,??_dir_next+3
  9656  0021EA  51DB               	movf	??_dir_next& (0+255),w,b
  9657  0021EC  27DD               	addwf	(??_dir_next+2)& (0+255),f,b
  9658  0021EE  51DC               	movf	(??_dir_next+1)& (0+255),w,b
  9659  0021F0  23DE               	addwfc	(??_dir_next+3)& (0+255),f,b
  9660  0021F2  C0EB  F0DF         	movff	dir_next@ofs,??_dir_next+4
  9661  0021F6  C0EC  F0E0         	movff	dir_next@ofs+1,??_dir_next+5
  9662  0021FA  C0ED  F0E1         	movff	dir_next@ofs+2,??_dir_next+6
  9663  0021FE  C0EE  F0E2         	movff	dir_next@ofs+3,??_dir_next+7
  9664  002202  0E0A               	movlw	10
  9665  002204  D005               	goto	u17850
  9666  002206                     u17855:
  9667  002206  90D8               	bcf	status,0,c
  9668  002208  33E2               	rrcf	(??_dir_next+7)& (0+255),f,b
  9669  00220A  33E1               	rrcf	(??_dir_next+6)& (0+255),f,b
  9670  00220C  33E0               	rrcf	(??_dir_next+5)& (0+255),f,b
  9671  00220E  33DF               	rrcf	(??_dir_next+4)& (0+255),f,b
  9672  002210                     u17850:
  9673  002210  2EE8               	decfsz	wreg,f,c
  9674  002212  D7F9               	goto	u17855
  9675  002214  51DD               	movf	(??_dir_next+2)& (0+255),w,b
  9676  002216  15DF               	andwf	(??_dir_next+4)& (0+255),w,b
  9677  002218  6FE3               	movwf	(??_dir_next+8)& (0+255),b
  9678  00221A  51DE               	movf	(??_dir_next+3)& (0+255),w,b
  9679  00221C  15E0               	andwf	(??_dir_next+5)& (0+255),w,b
  9680  00221E  6FE4               	movwf	(??_dir_next+9)& (0+255),b
  9681  002220  0E00               	movlw	0
  9682  002222  15E1               	andwf	(??_dir_next+6)& (0+255),w,b
  9683  002224  6FE5               	movwf	(??_dir_next+10)& (0+255),b
  9684  002226  0E00               	movlw	0
  9685  002228  15E2               	andwf	(??_dir_next+7)& (0+255),w,b
  9686  00222A  6FE6               	movwf	(??_dir_next+11)& (0+255),b
  9687  00222C  51E3               	movf	(??_dir_next+8)& (0+255),w,b
  9688  00222E  11E4               	iorwf	(??_dir_next+9)& (0+255),w,b
  9689  002230  11E5               	iorwf	(??_dir_next+10)& (0+255),w,b
  9690  002232  11E6               	iorwf	(??_dir_next+11)& (0+255),w,b
  9691  002234  A4D8               	btfss	status,2,c
  9692  002236  D0C9               	goto	l1190
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;ff.c: 1737: clst = get_fat(&dp->obj, dp->clust);
  9696  002238  C0D7  F09B         	movff	dir_next@dp,get_fat@obj
  9697  00223C  C0D8  F09C         	movff	dir_next@dp+1,get_fat@obj+1
  9698  002240  EE20 F012          	lfsr	2,18
  9699  002244  51D7               	movf	dir_next@dp& (0+255),w,b
  9700  002246  26D9               	addwf	fsr2l,f,c
  9701  002248  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9702  00224A  22DA               	addwfc	fsr2h,f,c
  9703  00224C  CFDE F09D          	movff	postinc2,get_fat@clst
  9704  002250  CFDE F09E          	movff	postinc2,get_fat@clst+1
  9705  002254  CFDE F09F          	movff	postinc2,get_fat@clst+2
  9706  002258  CFDE F0A0          	movff	postinc2,get_fat@clst+3
  9707  00225C  EC17  F012         	call	_get_fat	;wreg free
  9708  002260  C09B  F0F1         	movff	?_get_fat,dir_next@clst
  9709  002264  C09C  F0F2         	movff	?_get_fat+1,dir_next@clst+1
  9710  002268  C09D  F0F3         	movff	?_get_fat+2,dir_next@clst+2
  9711  00226C  C09E  F0F4         	movff	?_get_fat+3,dir_next@clst+3
  9712                           
  9713                           ;ff.c: 1738: if (clst <= 1) return FR_INT_ERR;
  9714  002270  0100               	movlb	0	; () banked
  9715  002272  51F4               	movf	(dir_next@clst+3)& (0+255),w,b
  9716  002274  11F3               	iorwf	(dir_next@clst+2)& (0+255),w,b
  9717  002276  11F2               	iorwf	(dir_next@clst+1)& (0+255),w,b
  9718  002278  E106               	bnz	l13850
  9719  00227A  0E02               	movlw	2
  9720  00227C  5DF1               	subwf	dir_next@clst& (0+255),w,b
  9721  00227E  B0D8               	btfsc	status,0,c
  9722  002280  D002               	goto	l1191
  9723                           
  9724                           ; BSR set to: 0
  9725  002282  0E02               	movlw	2
  9726                           
  9727                           ; BSR set to: 0
  9728  002284  0012               	return	
  9729  002286                     l1191:
  9730  002286                     l13850:
  9731                           
  9732                           ; BSR set to: 0
  9733                           ;ff.c: 1739: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  9734  002286  29F1               	incf	dir_next@clst& (0+255),w,b
  9735  002288  E109               	bnz	l13856
  9736  00228A  29F2               	incf	(dir_next@clst+1)& (0+255),w,b
  9737  00228C  E107               	bnz	l13856
  9738  00228E  29F3               	incf	(dir_next@clst+2)& (0+255),w,b
  9739  002290  E105               	bnz	l13856
  9740  002292  29F4               	incf	(dir_next@clst+3)& (0+255),w,b
  9741  002294  A4D8               	btfss	status,2,c
  9742  002296  D002               	goto	l1192
  9743                           
  9744                           ; BSR set to: 0
  9745  002298  0E01               	movlw	1
  9746                           
  9747                           ; BSR set to: 0
  9748  00229A  0012               	return	
  9749  00229C                     l1192:
  9750  00229C                     l13856:
  9751                           
  9752                           ; BSR set to: 0
  9753                           ;ff.c: 1740: if (clst >= fs->n_fatent) {
  9754  00229C  EE20 F013          	lfsr	2,19
  9755  0022A0  51EF               	movf	dir_next@fs& (0+255),w,b
  9756  0022A2  26D9               	addwf	fsr2l,f,c
  9757  0022A4  51F0               	movf	(dir_next@fs+1)& (0+255),w,b
  9758  0022A6  22DA               	addwfc	fsr2h,f,c
  9759  0022A8  50DE               	movf	postinc2,w,c
  9760  0022AA  5DF1               	subwf	dir_next@clst& (0+255),w,b
  9761  0022AC  50DE               	movf	postinc2,w,c
  9762  0022AE  59F2               	subwfb	(dir_next@clst+1)& (0+255),w,b
  9763  0022B0  50DE               	movf	postinc2,w,c
  9764  0022B2  59F3               	subwfb	(dir_next@clst+2)& (0+255),w,b
  9765  0022B4  50DE               	movf	postinc2,w,c
  9766  0022B6  59F4               	subwfb	(dir_next@clst+3)& (0+255),w,b
  9767  0022B8  A0D8               	btfss	status,0,c
  9768  0022BA  D05B               	goto	l1199
  9769                           
  9770                           ; BSR set to: 0
  9771                           ;ff.c: 1742: if (!stretch) {
  9772  0022BC  51D9               	movf	dir_next@stretch& (0+255),w,b
  9773  0022BE  11DA               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  9774  0022C0  A4D8               	btfss	status,2,c
  9775  0022C2  D00C               	goto	l1194
  9776                           
  9777                           ; BSR set to: 0
  9778                           ;ff.c: 1743: dp->sect = 0; return FR_NO_FILE;
  9779  0022C4  EE20 F016          	lfsr	2,22
  9780  0022C8  51D7               	movf	dir_next@dp& (0+255),w,b
  9781  0022CA  26D9               	addwf	fsr2l,f,c
  9782  0022CC  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9783  0022CE  22DA               	addwfc	fsr2h,f,c
  9784  0022D0  6ADE               	clrf	postinc2,c
  9785  0022D2  6ADE               	clrf	postinc2,c
  9786  0022D4  6ADE               	clrf	postinc2,c
  9787  0022D6  6ADD               	clrf	postdec2,c
  9788                           
  9789                           ; BSR set to: 0
  9790  0022D8  0E04               	movlw	4
  9791                           
  9792                           ; BSR set to: 0
  9793  0022DA  0012               	return	
  9794  0022DC                     l1194:
  9795                           
  9796                           ; BSR set to: 0
  9797                           ;ff.c: 1744: }
  9798                           ;ff.c: 1745: clst = create_chain(&dp->obj, dp->clust);
  9799                           
  9800                           ; BSR set to: 0
  9801  0022DC  C0D7  F0BA         	movff	dir_next@dp,create_chain@obj
  9802  0022E0  C0D8  F0BB         	movff	dir_next@dp+1,create_chain@obj+1
  9803  0022E4  EE20 F012          	lfsr	2,18
  9804  0022E8  51D7               	movf	dir_next@dp& (0+255),w,b
  9805  0022EA  26D9               	addwf	fsr2l,f,c
  9806  0022EC  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9807  0022EE  22DA               	addwfc	fsr2h,f,c
  9808  0022F0  CFDE F0BC          	movff	postinc2,create_chain@clst
  9809  0022F4  CFDE F0BD          	movff	postinc2,create_chain@clst+1
  9810  0022F8  CFDE F0BE          	movff	postinc2,create_chain@clst+2
  9811  0022FC  CFDE F0BF          	movff	postinc2,create_chain@clst+3
  9812  002300  EC9C  F00B         	call	_create_chain	;wreg free
  9813  002304  C0BA  F0F1         	movff	?_create_chain,dir_next@clst
  9814  002308  C0BB  F0F2         	movff	?_create_chain+1,dir_next@clst+1
  9815  00230C  C0BC  F0F3         	movff	?_create_chain+2,dir_next@clst+2
  9816  002310  C0BD  F0F4         	movff	?_create_chain+3,dir_next@clst+3
  9817                           
  9818                           ;ff.c: 1746: if (clst == 0) return FR_DENIED;
  9819  002314  0100               	movlb	0	; () banked
  9820  002316  51F1               	movf	dir_next@clst& (0+255),w,b
  9821  002318  11F2               	iorwf	(dir_next@clst+1)& (0+255),w,b
  9822  00231A  11F3               	iorwf	(dir_next@clst+2)& (0+255),w,b
  9823  00231C  11F4               	iorwf	(dir_next@clst+3)& (0+255),w,b
  9824  00231E  A4D8               	btfss	status,2,c
  9825  002320  D002               	goto	l1195
  9826                           
  9827                           ; BSR set to: 0
  9828  002322  0E07               	movlw	7
  9829                           
  9830                           ; BSR set to: 0
  9831  002324  0012               	return	
  9832  002326                     l1195:
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;ff.c: 1747: if (clst == 1) return FR_INT_ERR;
  9836                           
  9837                           ; BSR set to: 0
  9838  002326  05F1               	decf	dir_next@clst& (0+255),w,b
  9839  002328  11F2               	iorwf	(dir_next@clst+1)& (0+255),w,b
  9840  00232A  11F3               	iorwf	(dir_next@clst+2)& (0+255),w,b
  9841  00232C  11F4               	iorwf	(dir_next@clst+3)& (0+255),w,b
  9842  00232E  A4D8               	btfss	status,2,c
  9843  002330  D002               	goto	l1196
  9844                           
  9845                           ; BSR set to: 0
  9846  002332  0E02               	movlw	2
  9847                           
  9848                           ; BSR set to: 0
  9849  002334  0012               	return	
  9850  002336                     l1196:
  9851                           
  9852                           ; BSR set to: 0
  9853                           ;ff.c: 1748: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  9854                           
  9855                           ; BSR set to: 0
  9856  002336  29F1               	incf	dir_next@clst& (0+255),w,b
  9857  002338  E109               	bnz	l13886
  9858  00233A  29F2               	incf	(dir_next@clst+1)& (0+255),w,b
  9859  00233C  E107               	bnz	l13886
  9860  00233E  29F3               	incf	(dir_next@clst+2)& (0+255),w,b
  9861  002340  E105               	bnz	l13886
  9862  002342  29F4               	incf	(dir_next@clst+3)& (0+255),w,b
  9863  002344  A4D8               	btfss	status,2,c
  9864  002346  D002               	goto	l1197
  9865                           
  9866                           ; BSR set to: 0
  9867  002348  0E01               	movlw	1
  9868                           
  9869                           ; BSR set to: 0
  9870  00234A  0012               	return	
  9871  00234C                     l1197:
  9872  00234C                     l13886:
  9873                           
  9874                           ; BSR set to: 0
  9875                           ;ff.c: 1749: if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;
  9876  00234C  C0EF  F086         	movff	dir_next@fs,dir_clear@fs
  9877  002350  C0F0  F087         	movff	dir_next@fs+1,dir_clear@fs+1
  9878  002354  C0F1  F088         	movff	dir_next@clst,dir_clear@clst
  9879  002358  C0F2  F089         	movff	dir_next@clst+1,dir_clear@clst+1
  9880  00235C  C0F3  F08A         	movff	dir_next@clst+2,dir_clear@clst+2
  9881  002360  C0F4  F08B         	movff	dir_next@clst+3,dir_clear@clst+3
  9882  002364  EC3C  F020         	call	_dir_clear	;wreg free
  9883  002368  0900               	iorlw	0
  9884  00236A  B4D8               	btfsc	status,2,c
  9885  00236C  D002               	goto	l1199
  9886  00236E  0E01               	movlw	1
  9887  002370  0012               	return	
  9888  002372                     l1199:
  9889                           
  9890                           ;ff.c: 1755: }
  9891                           ;ff.c: 1756: dp->clust = clst;
  9892                           
  9893                           ; BSR set to: 0
  9894  002372  0100               	movlb	0	; () banked
  9895  002374  EE20 F012          	lfsr	2,18
  9896  002378  51D7               	movf	dir_next@dp& (0+255),w,b
  9897  00237A  26D9               	addwf	fsr2l,f,c
  9898  00237C  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9899  00237E  22DA               	addwfc	fsr2h,f,c
  9900  002380  C0F1  FFDE         	movff	dir_next@clst,postinc2
  9901  002384  C0F2  FFDE         	movff	dir_next@clst+1,postinc2
  9902  002388  C0F3  FFDE         	movff	dir_next@clst+2,postinc2
  9903  00238C  C0F4  FFDE         	movff	dir_next@clst+3,postinc2
  9904                           
  9905                           ; BSR set to: 0
  9906                           ;ff.c: 1757: dp->sect = clst2sect(fs, clst);
  9907  002390  C0EF  F026         	movff	dir_next@fs,clst2sect@fs
  9908  002394  C0F0  F027         	movff	dir_next@fs+1,clst2sect@fs+1
  9909  002398  C0F1  F028         	movff	dir_next@clst,clst2sect@clst
  9910  00239C  C0F2  F029         	movff	dir_next@clst+1,clst2sect@clst+1
  9911  0023A0  C0F3  F02A         	movff	dir_next@clst+2,clst2sect@clst+2
  9912  0023A4  C0F4  F02B         	movff	dir_next@clst+3,clst2sect@clst+3
  9913  0023A8  ECD4  F023         	call	_clst2sect	;wreg free
  9914  0023AC  0100               	movlb	0	; () banked
  9915  0023AE  EE20 F016          	lfsr	2,22
  9916  0023B2  51D7               	movf	dir_next@dp& (0+255),w,b
  9917  0023B4  26D9               	addwf	fsr2l,f,c
  9918  0023B6  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9919  0023B8  22DA               	addwfc	fsr2h,f,c
  9920  0023BA  C026  FFDE         	movff	?_clst2sect,postinc2
  9921  0023BE  C027  FFDE         	movff	?_clst2sect+1,postinc2
  9922  0023C2  C028  FFDE         	movff	?_clst2sect+2,postinc2
  9923  0023C6  C029  FFDE         	movff	?_clst2sect+3,postinc2
  9924  0023CA                     l1190:
  9925                           
  9926                           ; BSR set to: 0
  9927                           ;ff.c: 1758: }
  9928                           ;ff.c: 1759: }
  9929                           ;ff.c: 1760: }
  9930                           ;ff.c: 1761: dp->dptr = ofs;
  9931                           
  9932                           ; BSR set to: 0
  9933                           
  9934                           ; BSR set to: 0
  9935                           
  9936                           ; BSR set to: 0
  9937  0023CA  EE20 F00E          	lfsr	2,14
  9938  0023CE  51D7               	movf	dir_next@dp& (0+255),w,b
  9939  0023D0  26D9               	addwf	fsr2l,f,c
  9940  0023D2  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9941  0023D4  22DA               	addwfc	fsr2h,f,c
  9942  0023D6  C0EB  FFDE         	movff	dir_next@ofs,postinc2
  9943  0023DA  C0EC  FFDE         	movff	dir_next@ofs+1,postinc2
  9944  0023DE  C0ED  FFDE         	movff	dir_next@ofs+2,postinc2
  9945  0023E2  C0EE  FFDE         	movff	dir_next@ofs+3,postinc2
  9946                           
  9947                           ; BSR set to: 0
  9948                           ;ff.c: 1762: dp->dir = fs->win + ofs % ((UINT)512);
  9949  0023E6  0EFF               	movlw	255
  9950  0023E8  6FDB               	movwf	??_dir_next& (0+255),b
  9951  0023EA  0E01               	movlw	1
  9952  0023EC  6FDC               	movwf	(??_dir_next+1)& (0+255),b
  9953  0023EE  C0EB  F0DD         	movff	dir_next@ofs,??_dir_next+2
  9954  0023F2  C0EC  F0DE         	movff	dir_next@ofs+1,??_dir_next+3
  9955  0023F6  51DB               	movf	??_dir_next& (0+255),w,b
  9956  0023F8  17DD               	andwf	(??_dir_next+2)& (0+255),f,b
  9957  0023FA  51DC               	movf	(??_dir_next+1)& (0+255),w,b
  9958  0023FC  17DE               	andwf	(??_dir_next+3)& (0+255),f,b
  9959  0023FE  0E2F               	movlw	47
  9960  002400  27DD               	addwf	(??_dir_next+2)& (0+255),f,b
  9961  002402  0E00               	movlw	0
  9962  002404  23DE               	addwfc	(??_dir_next+3)& (0+255),f,b
  9963  002406  C0EF  F0DF         	movff	dir_next@fs,??_dir_next+4
  9964  00240A  C0F0  F0E0         	movff	dir_next@fs+1,??_dir_next+5
  9965  00240E  51DD               	movf	(??_dir_next+2)& (0+255),w,b
  9966  002410  27DF               	addwf	(??_dir_next+4)& (0+255),f,b
  9967  002412  51DE               	movf	(??_dir_next+3)& (0+255),w,b
  9968  002414  23E0               	addwfc	(??_dir_next+5)& (0+255),f,b
  9969  002416  EE20 F01A          	lfsr	2,26
  9970  00241A  51D7               	movf	dir_next@dp& (0+255),w,b
  9971  00241C  26D9               	addwf	fsr2l,f,c
  9972  00241E  51D8               	movf	(dir_next@dp+1)& (0+255),w,b
  9973  002420  22DA               	addwfc	fsr2h,f,c
  9974  002422  C0DF  FFDE         	movff	??_dir_next+4,postinc2
  9975  002426  C0E0  FFDD         	movff	??_dir_next+5,postdec2
  9976                           
  9977                           ; BSR set to: 0
  9978                           ;ff.c: 1764: return FR_OK;
  9979  00242A  0E00               	movlw	0
  9980  00242C  0012               	return	
  9981  00242E                     __end_of_dir_next:
  9982                           	opt stack 0
  9983                           tosu	equ	0xFFF
  9984                           tosh	equ	0xFFE
  9985                           tosl	equ	0xFFD
  9986                           pclath	equ	0xFFA
  9987                           tblptru	equ	0xFF8
  9988                           tblptrh	equ	0xFF7
  9989                           tblptrl	equ	0xFF6
  9990                           tablat	equ	0xFF5
  9991                           prodh	equ	0xFF4
  9992                           prodl	equ	0xFF3
  9993                           intcon	equ	0xFF2
  9994                           intcon2	equ	0xFF1
  9995                           intcon3	equ	0xFF0
  9996                           indf0	equ	0xFEF
  9997                           postinc0	equ	0xFEE
  9998                           fsr0h	equ	0xFEA
  9999                           fsr0l	equ	0xFE9
 10000                           wreg	equ	0xFE8
 10001                           indf1	equ	0xFE7
 10002                           postinc1	equ	0xFE6
 10003                           postdec1	equ	0xFE5
 10004                           fsr1h	equ	0xFE2
 10005                           fsr1l	equ	0xFE1
 10006                           indf2	equ	0xFDF
 10007                           postinc2	equ	0xFDE
 10008                           postdec2	equ	0xFDD
 10009                           plusw2	equ	0xFDB
 10010                           fsr2h	equ	0xFDA
 10011                           fsr2l	equ	0xFD9
 10012                           status	equ	0xFD8
 10013                           
 10014 ;; *************** function _dir_clear *****************
 10015 ;; Defined at:
 10016 ;;		line 1627 in file "bibliotecas/ff.c"
 10017 ;; Parameters:    Size  Location     Type
 10018 ;;  fs              2   38[BANK0 ] PTR struct .
 10019 ;;		 -> NULL(0), fs(559), 
 10020 ;;  clst            4   40[BANK0 ] unsigned long 
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;  sect            4   48[BANK0 ] unsigned long 
 10023 ;;  n               2   54[BANK0 ] unsigned int 
 10024 ;;  szb             2   52[BANK0 ] unsigned int 
 10025 ;;  ibuf            2   46[BANK0 ] PTR unsigned char 
 10026 ;;		 -> fs.win(512), NULL(0), fs(559), 
 10027 ;; Return value:  Size  Location     Type
 10028 ;;                  1    wreg      enum E154
 10029 ;; Registers used:
 10030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10036 ;;      Params:         0       6       0       0       0       0       0       0       0
 10037 ;;      Locals:         0      10       0       0       0       0       0       0       0
 10038 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10039 ;;      Totals:         0      18       0       0       0       0       0       0       0
 10040 ;;Total ram usage:       18 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; Hardware stack levels required when called:    7
 10043 ;; This function calls:
 10044 ;;		_clst2sect
 10045 ;;		_disk_write
 10046 ;;		_memset
 10047 ;;		_sync_window
 10048 ;; This function is called by:
 10049 ;;		_dir_next
 10050 ;;		_f_mkdir
 10051 ;; This function uses a non-reentrant model
 10052 ;;
 10053                           
 10054                           	psect	text30
 10055  004078                     __ptext30:
 10056                           	opt stack 0
 10057  004078                     _dir_clear:
 10058                           	opt stack 17
 10059                           
 10060                           ;ff.c: 1632: LBA_t sect;
 10061                           ;ff.c: 1633: UINT n, szb;
 10062                           ;ff.c: 1634: BYTE *ibuf;
 10063                           ;ff.c: 1637: if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 10064                           
 10065                           ;incstack = 0
 10066  004078  C086  F073         	movff	dir_clear@fs,sync_window@fs
 10067  00407C  C087  F074         	movff	dir_clear@fs+1,sync_window@fs+1
 10068  004080  EC36  F01C         	call	_sync_window	;wreg free
 10069  004084  0900               	iorlw	0
 10070  004086  B4D8               	btfsc	status,2,c
 10071  004088  D002               	goto	l1143
 10072  00408A  0E01               	movlw	1
 10073  00408C  0012               	return	
 10074  00408E                     l1143:
 10075                           
 10076                           ;ff.c: 1638: sect = clst2sect(fs, clst);
 10077  00408E  C086  F026         	movff	dir_clear@fs,clst2sect@fs
 10078  004092  C087  F027         	movff	dir_clear@fs+1,clst2sect@fs+1
 10079  004096  C088  F028         	movff	dir_clear@clst,clst2sect@clst
 10080  00409A  C089  F029         	movff	dir_clear@clst+1,clst2sect@clst+1
 10081  00409E  C08A  F02A         	movff	dir_clear@clst+2,clst2sect@clst+2
 10082  0040A2  C08B  F02B         	movff	dir_clear@clst+3,clst2sect@clst+3
 10083  0040A6  ECD4  F023         	call	_clst2sect	;wreg free
 10084  0040AA  C026  F090         	movff	?_clst2sect,dir_clear@sect
 10085  0040AE  C027  F091         	movff	?_clst2sect+1,dir_clear@sect+1
 10086  0040B2  C028  F092         	movff	?_clst2sect+2,dir_clear@sect+2
 10087  0040B6  C029  F093         	movff	?_clst2sect+3,dir_clear@sect+3
 10088                           
 10089                           ;ff.c: 1639: fs->winsect = sect;
 10090  0040BA  0100               	movlb	0	; () banked
 10091  0040BC  EE20 F02B          	lfsr	2,43
 10092  0040C0  5186               	movf	dir_clear@fs& (0+255),w,b
 10093  0040C2  26D9               	addwf	fsr2l,f,c
 10094  0040C4  5187               	movf	(dir_clear@fs+1)& (0+255),w,b
 10095  0040C6  22DA               	addwfc	fsr2h,f,c
 10096  0040C8  C090  FFDE         	movff	dir_clear@sect,postinc2
 10097  0040CC  C091  FFDE         	movff	dir_clear@sect+1,postinc2
 10098  0040D0  C092  FFDE         	movff	dir_clear@sect+2,postinc2
 10099  0040D4  C093  FFDE         	movff	dir_clear@sect+3,postinc2
 10100                           
 10101                           ; BSR set to: 0
 10102                           ;ff.c: 1640: memset(fs->win, 0, sizeof fs->win);
 10103  0040D8  0E2F               	movlw	47
 10104  0040DA  2586               	addwf	dir_clear@fs& (0+255),w,b
 10105  0040DC  6E1A               	movwf	memset@p1,c
 10106  0040DE  0E00               	movlw	0
 10107  0040E0  2187               	addwfc	(dir_clear@fs+1)& (0+255),w,b
 10108  0040E2  6E1B               	movwf	memset@p1+1,c
 10109  0040E4  0E00               	movlw	0
 10110  0040E6  6E1D               	movwf	memset@c+1,c
 10111  0040E8  0E00               	movlw	0
 10112  0040EA  6E1C               	movwf	memset@c,c
 10113  0040EC  0E02               	movlw	2
 10114  0040EE  6E1F               	movwf	memset@n+1,c
 10115  0040F0  0E00               	movlw	0
 10116  0040F2  6E1E               	movwf	memset@n,c
 10117  0040F4  ECD5  F02C         	call	_memset	;wreg free
 10118                           
 10119                           ;ff.c: 1651: {
 10120                           ;ff.c: 1652: ibuf = fs->win; szb = 1;
 10121  0040F8  0E2F               	movlw	47
 10122  0040FA  0100               	movlb	0	; () banked
 10123  0040FC  2586               	addwf	dir_clear@fs& (0+255),w,b
 10124  0040FE  6F8E               	movwf	dir_clear@ibuf& (0+255),b
 10125  004100  0E00               	movlw	0
 10126  004102  2187               	addwfc	(dir_clear@fs+1)& (0+255),w,b
 10127  004104  6F8F               	movwf	(dir_clear@ibuf+1)& (0+255),b
 10128                           
 10129                           ; BSR set to: 0
 10130  004106  0E00               	movlw	0
 10131  004108  6F95               	movwf	(dir_clear@szb+1)& (0+255),b
 10132  00410A  0E01               	movlw	1
 10133  00410C  6F94               	movwf	dir_clear@szb& (0+255),b
 10134                           
 10135                           ; BSR set to: 0
 10136                           ;ff.c: 1653: for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == R
      +                          ES_OK; n += szb) ;
 10137  00410E  0E00               	movlw	0
 10138  004110  6F97               	movwf	(dir_clear@n+1)& (0+255),b
 10139  004112  0E00               	movlw	0
 10140  004114  6F96               	movwf	dir_clear@n& (0+255),b
 10141  004116  D005               	goto	l1145
 10142  004118                     
 10143                           ; BSR set to: 0
 10144  004118  0100               	movlb	0	; () banked
 10145  00411A  5194               	movf	dir_clear@szb& (0+255),w,b
 10146  00411C  2796               	addwf	dir_clear@n& (0+255),f,b
 10147  00411E  5195               	movf	(dir_clear@szb+1)& (0+255),w,b
 10148  004120  2397               	addwfc	(dir_clear@n+1)& (0+255),f,b
 10149  004122                     l1145:
 10150                           
 10151                           ; BSR set to: 0
 10152                           
 10153                           ; BSR set to: 0
 10154  004122  EE20 F009          	lfsr	2,9
 10155  004126  5186               	movf	dir_clear@fs& (0+255),w,b
 10156  004128  26D9               	addwf	fsr2l,f,c
 10157  00412A  5187               	movf	(dir_clear@fs+1)& (0+255),w,b
 10158  00412C  22DA               	addwfc	fsr2h,f,c
 10159  00412E  50DE               	movf	postinc2,w,c
 10160  004130  5D96               	subwf	dir_clear@n& (0+255),w,b
 10161  004132  50DE               	movf	postinc2,w,c
 10162  004134  5997               	subwfb	(dir_clear@n+1)& (0+255),w,b
 10163  004136  B0D8               	btfsc	status,0,c
 10164  004138  D01E               	goto	u17210
 10165                           
 10166                           ; BSR set to: 0
 10167  00413A  C08E  F068         	movff	dir_clear@ibuf,disk_write@buff
 10168  00413E  C08F  F069         	movff	dir_clear@ibuf+1,disk_write@buff+1
 10169  004142  5196               	movf	dir_clear@n& (0+255),w,b
 10170  004144  2590               	addwf	dir_clear@sect& (0+255),w,b
 10171  004146  6F6A               	movwf	disk_write@sector& (0+255),b
 10172  004148  5197               	movf	(dir_clear@n+1)& (0+255),w,b
 10173  00414A  2191               	addwfc	(dir_clear@sect+1)& (0+255),w,b
 10174  00414C  6F6B               	movwf	(disk_write@sector+1)& (0+255),b
 10175  00414E  0E00               	movlw	0
 10176  004150  2192               	addwfc	(dir_clear@sect+2)& (0+255),w,b
 10177  004152  6F6C               	movwf	(disk_write@sector+2)& (0+255),b
 10178  004154  0E00               	movlw	0
 10179  004156  2193               	addwfc	(dir_clear@sect+3)& (0+255),w,b
 10180  004158  6F6D               	movwf	(disk_write@sector+3)& (0+255),b
 10181  00415A  C094  F06E         	movff	dir_clear@szb,disk_write@count
 10182  00415E  EE20 F001          	lfsr	2,1
 10183  004162  5186               	movf	dir_clear@fs& (0+255),w,b
 10184  004164  26D9               	addwf	fsr2l,f,c
 10185  004166  5187               	movf	(dir_clear@fs+1)& (0+255),w,b
 10186  004168  22DA               	addwfc	fsr2h,f,c
 10187  00416A  50DF               	movf	indf2,w,c
 10188  00416C  EC30  F028         	call	_disk_write
 10189  004170  0900               	iorlw	0
 10190  004172  B4D8               	btfsc	status,2,c
 10191  004174  D7D1               	goto	l1146
 10192  004176                     u17210:
 10193                           
 10194                           ;ff.c: 1654: }
 10195                           ;ff.c: 1655: return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 10196  004176  0100               	movlb	0	; () banked
 10197  004178  EE20 F009          	lfsr	2,9
 10198  00417C  5186               	movf	dir_clear@fs& (0+255),w,b
 10199  00417E  26D9               	addwf	fsr2l,f,c
 10200  004180  5187               	movf	(dir_clear@fs+1)& (0+255),w,b
 10201  004182  22DA               	addwfc	fsr2h,f,c
 10202  004184  5196               	movf	dir_clear@n& (0+255),w,b
 10203  004186  18DE               	xorwf	postinc2,w,c
 10204  004188  E104               	bnz	u17221
 10205  00418A  5197               	movf	(dir_clear@n+1)& (0+255),w,b
 10206  00418C  18DE               	xorwf	postinc2,w,c
 10207  00418E  B4D8               	btfsc	status,2,c
 10208  004190  D002               	goto	u17220
 10209  004192                     u17221:
 10210  004192  0E01               	movlw	1
 10211  004194  0012               	return	
 10212  004196                     u17220:
 10213  004196  0E00               	movlw	0
 10214  004198  0012               	return	
 10215  00419A                     __end_of_dir_clear:
 10216                           	opt stack 0
 10217                           tosu	equ	0xFFF
 10218                           tosh	equ	0xFFE
 10219                           tosl	equ	0xFFD
 10220                           pclath	equ	0xFFA
 10221                           tblptru	equ	0xFF8
 10222                           tblptrh	equ	0xFF7
 10223                           tblptrl	equ	0xFF6
 10224                           tablat	equ	0xFF5
 10225                           prodh	equ	0xFF4
 10226                           prodl	equ	0xFF3
 10227                           intcon	equ	0xFF2
 10228                           intcon2	equ	0xFF1
 10229                           intcon3	equ	0xFF0
 10230                           indf0	equ	0xFEF
 10231                           postinc0	equ	0xFEE
 10232                           fsr0h	equ	0xFEA
 10233                           fsr0l	equ	0xFE9
 10234                           wreg	equ	0xFE8
 10235                           indf1	equ	0xFE7
 10236                           postinc1	equ	0xFE6
 10237                           postdec1	equ	0xFE5
 10238                           fsr1h	equ	0xFE2
 10239                           fsr1l	equ	0xFE1
 10240                           indf2	equ	0xFDF
 10241                           postinc2	equ	0xFDE
 10242                           postdec2	equ	0xFDD
 10243                           plusw2	equ	0xFDB
 10244                           fsr2h	equ	0xFDA
 10245                           fsr2l	equ	0xFD9
 10246                           status	equ	0xFD8
 10247                           
 10248 ;; *************** function _clst2sect *****************
 10249 ;; Defined at:
 10250 ;;		line 1114 in file "bibliotecas/ff.c"
 10251 ;; Parameters:    Size  Location     Type
 10252 ;;  fs              2   37[COMRAM] PTR struct .
 10253 ;;		 -> NULL(0), fs(559), 
 10254 ;;  clst            4   39[COMRAM] unsigned long 
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;		None
 10257 ;; Return value:  Size  Location     Type
 10258 ;;                  4   37[COMRAM] unsigned long 
 10259 ;; Registers used:
 10260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10266 ;;      Params:         6       0       0       0       0       0       0       0       0
 10267 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10268 ;;      Temps:          0       6       0       0       0       0       0       0       0
 10269 ;;      Totals:         6       6       0       0       0       0       0       0       0
 10270 ;;Total ram usage:       12 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; Hardware stack levels required when called:    3
 10273 ;; This function calls:
 10274 ;;		___lmul
 10275 ;; This function is called by:
 10276 ;;		_dir_clear
 10277 ;;		_dir_sdi
 10278 ;;		_dir_next
 10279 ;;		_f_open
 10280 ;;		_f_write
 10281 ;;		_f_read
 10282 ;;		_f_lseek
 10283 ;;		_f_rename
 10284 ;; This function uses a non-reentrant model
 10285 ;;
 10286                           
 10287                           	psect	text31
 10288  0047A8                     __ptext31:
 10289                           	opt stack 0
 10290  0047A8                     _clst2sect:
 10291                           	opt stack 24
 10292                           
 10293                           ;ff.c: 1119: clst -= 2;
 10294                           
 10295                           ;incstack = 0
 10296  0047A8  0E02               	movlw	2
 10297  0047AA  5E28               	subwf	clst2sect@clst,f,c
 10298  0047AC  0E00               	movlw	0
 10299  0047AE  5A29               	subwfb	clst2sect@clst+1,f,c
 10300  0047B0  5A2A               	subwfb	clst2sect@clst+2,f,c
 10301  0047B2  5A2B               	subwfb	clst2sect@clst+3,f,c
 10302                           
 10303                           ;ff.c: 1120: if (clst >= fs->n_fatent - 2) return 0;
 10304  0047B4  EE20 F013          	lfsr	2,19
 10305  0047B8  5026               	movf	clst2sect@fs,w,c
 10306  0047BA  26D9               	addwf	fsr2l,f,c
 10307  0047BC  5027               	movf	clst2sect@fs+1,w,c
 10308  0047BE  22DA               	addwfc	fsr2h,f,c
 10309  0047C0  0EFE               	movlw	254
 10310  0047C2  24DE               	addwf	postinc2,w,c
 10311  0047C4  0100               	movlb	0	; () banked
 10312  0047C6  6F60               	movwf	??_clst2sect& (0+255),b
 10313  0047C8  0EFF               	movlw	255
 10314  0047CA  20DE               	addwfc	postinc2,w,c
 10315  0047CC  6F61               	movwf	(??_clst2sect+1)& (0+255),b
 10316  0047CE  0EFF               	movlw	255
 10317  0047D0  20DE               	addwfc	postinc2,w,c
 10318  0047D2  6F62               	movwf	(??_clst2sect+2)& (0+255),b
 10319  0047D4  0EFF               	movlw	255
 10320  0047D6  20DE               	addwfc	postinc2,w,c
 10321  0047D8  6F63               	movwf	(??_clst2sect+3)& (0+255),b
 10322  0047DA  5160               	movf	??_clst2sect& (0+255),w,b
 10323  0047DC  5C28               	subwf	clst2sect@clst,w,c
 10324  0047DE  5161               	movf	(??_clst2sect+1)& (0+255),w,b
 10325  0047E0  5829               	subwfb	clst2sect@clst+1,w,c
 10326  0047E2  5162               	movf	(??_clst2sect+2)& (0+255),w,b
 10327  0047E4  582A               	subwfb	clst2sect@clst+2,w,c
 10328  0047E6  5163               	movf	(??_clst2sect+3)& (0+255),w,b
 10329  0047E8  582B               	subwfb	clst2sect@clst+3,w,c
 10330  0047EA  A0D8               	btfss	status,0,c
 10331  0047EC  D009               	goto	l1037
 10332                           
 10333                           ; BSR set to: 0
 10334  0047EE  0E00               	movlw	0
 10335  0047F0  6E26               	movwf	?_clst2sect,c
 10336  0047F2  0E00               	movlw	0
 10337  0047F4  6E27               	movwf	?_clst2sect+1,c
 10338  0047F6  0E00               	movlw	0
 10339  0047F8  6E28               	movwf	?_clst2sect+2,c
 10340  0047FA  0E00               	movlw	0
 10341  0047FC  6E29               	movwf	?_clst2sect+3,c
 10342                           
 10343                           ; BSR set to: 0
 10344  0047FE  0012               	return	
 10345  004800                     l1037:
 10346                           
 10347                           ; BSR set to: 0
 10348                           ;ff.c: 1121: return fs->database + (LBA_t)fs->csize * clst;
 10349                           
 10350                           ; BSR set to: 0
 10351  004800  EE20 F027          	lfsr	2,39
 10352  004804  5026               	movf	clst2sect@fs,w,c
 10353  004806  26D9               	addwf	fsr2l,f,c
 10354  004808  5027               	movf	clst2sect@fs+1,w,c
 10355  00480A  22DA               	addwfc	fsr2h,f,c
 10356  00480C  CFDE F060          	movff	postinc2,??_clst2sect
 10357  004810  CFDE F061          	movff	postinc2,??_clst2sect+1
 10358  004814  CFDE F062          	movff	postinc2,??_clst2sect+2
 10359  004818  CFDE F063          	movff	postinc2,??_clst2sect+3
 10360  00481C  EE20 F009          	lfsr	2,9
 10361  004820  5026               	movf	clst2sect@fs,w,c
 10362  004822  26D9               	addwf	fsr2l,f,c
 10363  004824  5027               	movf	clst2sect@fs+1,w,c
 10364  004826  22DA               	addwfc	fsr2h,f,c
 10365  004828  CFDE F064          	movff	postinc2,??_clst2sect+4
 10366  00482C  CFDD F065          	movff	postdec2,??_clst2sect+5
 10367  004830  C064  F01A         	movff	??_clst2sect+4,___lmul@multiplier
 10368  004834  C065  F01B         	movff	??_clst2sect+5,___lmul@multiplier+1
 10369  004838  6A1C               	clrf	___lmul@multiplier+2,c
 10370  00483A  6A1D               	clrf	___lmul@multiplier+3,c
 10371  00483C  C028  F01E         	movff	clst2sect@clst,___lmul@multiplicand
 10372  004840  C029  F01F         	movff	clst2sect@clst+1,___lmul@multiplicand+1
 10373  004844  C02A  F020         	movff	clst2sect@clst+2,___lmul@multiplicand+2
 10374  004848  C02B  F021         	movff	clst2sect@clst+3,___lmul@multiplicand+3
 10375  00484C  ECC9  F02A         	call	___lmul	;wreg free
 10376  004850  0100               	movlb	0	; () banked
 10377  004852  5160               	movf	??_clst2sect& (0+255),w,b
 10378  004854  241A               	addwf	?___lmul,w,c
 10379  004856  6E26               	movwf	?_clst2sect,c
 10380  004858  5161               	movf	(??_clst2sect+1)& (0+255),w,b
 10381  00485A  201B               	addwfc	?___lmul+1,w,c
 10382  00485C  6E27               	movwf	?_clst2sect+1,c
 10383  00485E  5162               	movf	(??_clst2sect+2)& (0+255),w,b
 10384  004860  201C               	addwfc	?___lmul+2,w,c
 10385  004862  6E28               	movwf	?_clst2sect+2,c
 10386  004864  5163               	movf	(??_clst2sect+3)& (0+255),w,b
 10387  004866  201D               	addwfc	?___lmul+3,w,c
 10388  004868  6E29               	movwf	?_clst2sect+3,c
 10389  00486A  0012               	return	
 10390  00486C                     __end_of_clst2sect:
 10391                           	opt stack 0
 10392                           tosu	equ	0xFFF
 10393                           tosh	equ	0xFFE
 10394                           tosl	equ	0xFFD
 10395                           pclath	equ	0xFFA
 10396                           tblptru	equ	0xFF8
 10397                           tblptrh	equ	0xFF7
 10398                           tblptrl	equ	0xFF6
 10399                           tablat	equ	0xFF5
 10400                           prodh	equ	0xFF4
 10401                           prodl	equ	0xFF3
 10402                           intcon	equ	0xFF2
 10403                           intcon2	equ	0xFF1
 10404                           intcon3	equ	0xFF0
 10405                           indf0	equ	0xFEF
 10406                           postinc0	equ	0xFEE
 10407                           fsr0h	equ	0xFEA
 10408                           fsr0l	equ	0xFE9
 10409                           wreg	equ	0xFE8
 10410                           indf1	equ	0xFE7
 10411                           postinc1	equ	0xFE6
 10412                           postdec1	equ	0xFE5
 10413                           fsr1h	equ	0xFE2
 10414                           fsr1l	equ	0xFE1
 10415                           indf2	equ	0xFDF
 10416                           postinc2	equ	0xFDE
 10417                           postdec2	equ	0xFDD
 10418                           plusw2	equ	0xFDB
 10419                           fsr2h	equ	0xFDA
 10420                           fsr2l	equ	0xFD9
 10421                           status	equ	0xFD8
 10422                           
 10423 ;; *************** function _create_chain *****************
 10424 ;; Defined at:
 10425 ;;		line 1494 in file "bibliotecas/ff.c"
 10426 ;; Parameters:    Size  Location     Type
 10427 ;;  obj             2   90[BANK0 ] PTR struct .
 10428 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@sobj(14), f_mkdir@dj(40), 
 10429 ;;		 -> f_unlink@sdj(40), f_unlink@dj(40), f_stat@dj(40), f_open@dj(40), 
 10430 ;;		 -> SDCard@fil(34), 
 10431 ;;  clst            4   92[BANK0 ] unsigned long 
 10432 ;; Auto vars:     Size  Location     Type
 10433 ;;  cs              4  115[BANK0 ] unsigned long 
 10434 ;;  ncl             4  109[BANK0 ] unsigned long 
 10435 ;;  scl             4  105[BANK0 ] unsigned long 
 10436 ;;  fs              2  113[BANK0 ] PTR struct .
 10437 ;;		 -> NULL(0), fs(559), 
 10438 ;;  res             1  104[BANK0 ] enum E154
 10439 ;; Return value:  Size  Location     Type
 10440 ;;                  4   90[BANK0 ] unsigned long 
 10441 ;; Registers used:
 10442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10443 ;; Tracked objects:
 10444 ;;		On entry : 0/0
 10445 ;;		On exit  : 0/0
 10446 ;;		Unchanged: 0/0
 10447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10448 ;;      Params:         0       6       0       0       0       0       0       0       0
 10449 ;;      Locals:         0      15       0       0       0       0       0       0       0
 10450 ;;      Temps:          0       8       0       0       0       0       0       0       0
 10451 ;;      Totals:         0      29       0       0       0       0       0       0       0
 10452 ;;Total ram usage:       29 bytes
 10453 ;; Hardware stack levels used:    1
 10454 ;; Hardware stack levels required when called:   10
 10455 ;; This function calls:
 10456 ;;		_get_fat
 10457 ;;		_put_fat
 10458 ;; This function is called by:
 10459 ;;		_dir_next
 10460 ;;		_f_write
 10461 ;;		_f_lseek
 10462 ;;		_f_mkdir
 10463 ;; This function uses a non-reentrant model
 10464 ;;
 10465                           
 10466                           	psect	text32
 10467  001738                     __ptext32:
 10468                           	opt stack 0
 10469  001738                     _create_chain:
 10470                           	opt stack 17
 10471                           
 10472                           ;ff.c: 1499: DWORD cs, ncl, scl;
 10473                           ;ff.c: 1500: FRESULT res;
 10474                           ;ff.c: 1501: FATFS *fs = obj->fs;
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;incstack = 0
 10478  001738  C0BA  FFD9         	movff	create_chain@obj,fsr2l
 10479  00173C  C0BB  FFDA         	movff	create_chain@obj+1,fsr2h
 10480  001740  CFDE F0D1          	movff	postinc2,create_chain@fs
 10481  001744  CFDD F0D2          	movff	postdec2,create_chain@fs+1
 10482                           
 10483                           ;ff.c: 1504: if (clst == 0) {
 10484  001748  0100               	movlb	0	; () banked
 10485  00174A  51BC               	movf	create_chain@clst& (0+255),w,b
 10486  00174C  11BD               	iorwf	(create_chain@clst+1)& (0+255),w,b
 10487  00174E  11BE               	iorwf	(create_chain@clst+2)& (0+255),w,b
 10488  001750  11BF               	iorwf	(create_chain@clst+3)& (0+255),w,b
 10489  001752  A4D8               	btfss	status,2,c
 10490  001754  D02D               	goto	l1106
 10491                           
 10492                           ; BSR set to: 0
 10493                           ;ff.c: 1505: scl = fs->last_clst;
 10494  001756  EE20 F00B          	lfsr	2,11
 10495  00175A  51D1               	movf	create_chain@fs& (0+255),w,b
 10496  00175C  26D9               	addwf	fsr2l,f,c
 10497  00175E  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 10498  001760  22DA               	addwfc	fsr2h,f,c
 10499  001762  CFDE F0C9          	movff	postinc2,create_chain@scl
 10500  001766  CFDE F0CA          	movff	postinc2,create_chain@scl+1
 10501  00176A  CFDE F0CB          	movff	postinc2,create_chain@scl+2
 10502  00176E  CFDE F0CC          	movff	postinc2,create_chain@scl+3
 10503                           
 10504                           ; BSR set to: 0
 10505                           ;ff.c: 1506: if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 10506  001772  51C9               	movf	create_chain@scl& (0+255),w,b
 10507  001774  11CA               	iorwf	(create_chain@scl+1)& (0+255),w,b
 10508  001776  11CB               	iorwf	(create_chain@scl+2)& (0+255),w,b
 10509  001778  11CC               	iorwf	(create_chain@scl+3)& (0+255),w,b
 10510  00177A  B4D8               	btfsc	status,2,c
 10511  00177C  D010               	goto	u16950
 10512                           
 10513                           ; BSR set to: 0
 10514  00177E  EE20 F013          	lfsr	2,19
 10515  001782  51D1               	movf	create_chain@fs& (0+255),w,b
 10516  001784  26D9               	addwf	fsr2l,f,c
 10517  001786  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 10518  001788  22DA               	addwfc	fsr2h,f,c
 10519  00178A  50DE               	movf	postinc2,w,c
 10520  00178C  5DC9               	subwf	create_chain@scl& (0+255),w,b
 10521  00178E  50DE               	movf	postinc2,w,c
 10522  001790  59CA               	subwfb	(create_chain@scl+1)& (0+255),w,b
 10523  001792  50DE               	movf	postinc2,w,c
 10524  001794  59CB               	subwfb	(create_chain@scl+2)& (0+255),w,b
 10525  001796  50DE               	movf	postinc2,w,c
 10526  001798  59CC               	subwfb	(create_chain@scl+3)& (0+255),w,b
 10527  00179A  A0D8               	btfss	status,0,c
 10528  00179C  D064               	goto	l1110
 10529  00179E                     u16950:
 10530                           
 10531                           ; BSR set to: 0
 10532                           
 10533                           ; BSR set to: 0
 10534  00179E  0E01               	movlw	1
 10535  0017A0  6FC9               	movwf	create_chain@scl& (0+255),b
 10536  0017A2  0E00               	movlw	0
 10537  0017A4  6FCA               	movwf	(create_chain@scl+1)& (0+255),b
 10538  0017A6  0E00               	movlw	0
 10539  0017A8  6FCB               	movwf	(create_chain@scl+2)& (0+255),b
 10540  0017AA  0E00               	movlw	0
 10541  0017AC  6FCC               	movwf	(create_chain@scl+3)& (0+255),b
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;ff.c: 1507: }
 10545  0017AE  D05B               	goto	l1110
 10546  0017B0                     l1106:
 10547                           
 10548                           ; BSR set to: 0
 10549                           ;ff.c: 1508: else {
 10550                           ;ff.c: 1509: cs = get_fat(obj, clst);
 10551                           
 10552                           ; BSR set to: 0
 10553  0017B0  C0BA  F09B         	movff	create_chain@obj,get_fat@obj
 10554  0017B4  C0BB  F09C         	movff	create_chain@obj+1,get_fat@obj+1
 10555  0017B8  C0BC  F09D         	movff	create_chain@clst,get_fat@clst
 10556  0017BC  C0BD  F09E         	movff	create_chain@clst+1,get_fat@clst+1
 10557  0017C0  C0BE  F09F         	movff	create_chain@clst+2,get_fat@clst+2
 10558  0017C4  C0BF  F0A0         	movff	create_chain@clst+3,get_fat@clst+3
 10559  0017C8  EC17  F012         	call	_get_fat	;wreg free
 10560  0017CC  C09B  F0D3         	movff	?_get_fat,create_chain@cs
 10561  0017D0  C09C  F0D4         	movff	?_get_fat+1,create_chain@cs+1
 10562  0017D4  C09D  F0D5         	movff	?_get_fat+2,create_chain@cs+2
 10563  0017D8  C09E  F0D6         	movff	?_get_fat+3,create_chain@cs+3
 10564                           
 10565                           ;ff.c: 1510: if (cs < 2) return 1;
 10566  0017DC  0100               	movlb	0	; () banked
 10567  0017DE  51D6               	movf	(create_chain@cs+3)& (0+255),w,b
 10568  0017E0  11D5               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10569  0017E2  11D4               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10570  0017E4  E10D               	bnz	l13336
 10571  0017E6  0E02               	movlw	2
 10572  0017E8  5DD3               	subwf	create_chain@cs& (0+255),w,b
 10573  0017EA  B0D8               	btfsc	status,0,c
 10574  0017EC  D009               	goto	l1111
 10575                           
 10576                           ; BSR set to: 0
 10577  0017EE  0E01               	movlw	1
 10578  0017F0  6FBA               	movwf	?_create_chain& (0+255),b
 10579  0017F2  0E00               	movlw	0
 10580  0017F4  6FBB               	movwf	(?_create_chain+1)& (0+255),b
 10581  0017F6  0E00               	movlw	0
 10582  0017F8  6FBC               	movwf	(?_create_chain+2)& (0+255),b
 10583  0017FA  0E00               	movlw	0
 10584  0017FC  6FBD               	movwf	(?_create_chain+3)& (0+255),b
 10585                           
 10586                           ; BSR set to: 0
 10587  0017FE  0012               	return	
 10588  001800                     l1111:
 10589  001800                     l13336:
 10590                           
 10591                           ; BSR set to: 0
 10592                           ;ff.c: 1511: if (cs == 0xFFFFFFFF) return cs;
 10593  001800  29D3               	incf	create_chain@cs& (0+255),w,b
 10594  001802  E110               	bnz	l13340
 10595  001804  29D4               	incf	(create_chain@cs+1)& (0+255),w,b
 10596  001806  E10E               	bnz	l13340
 10597  001808  29D5               	incf	(create_chain@cs+2)& (0+255),w,b
 10598  00180A  E10C               	bnz	l13340
 10599  00180C  29D6               	incf	(create_chain@cs+3)& (0+255),w,b
 10600  00180E  A4D8               	btfss	status,2,c
 10601  001810  D009               	goto	l1113
 10602                           
 10603                           ; BSR set to: 0
 10604  001812  C0D3  F0BA         	movff	create_chain@cs,?_create_chain
 10605  001816  C0D4  F0BB         	movff	create_chain@cs+1,?_create_chain+1
 10606  00181A  C0D5  F0BC         	movff	create_chain@cs+2,?_create_chain+2
 10607  00181E  C0D6  F0BD         	movff	create_chain@cs+3,?_create_chain+3
 10608  001822  0012               	return	
 10609  001824                     l1113:
 10610  001824                     l13340:
 10611                           
 10612                           ; BSR set to: 0
 10613                           ;ff.c: 1512: if (cs < fs->n_fatent) return cs;
 10614  001824  EE20 F013          	lfsr	2,19
 10615  001828  51D1               	movf	create_chain@fs& (0+255),w,b
 10616  00182A  26D9               	addwf	fsr2l,f,c
 10617  00182C  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 10618  00182E  22DA               	addwfc	fsr2h,f,c
 10619  001830  50DE               	movf	postinc2,w,c
 10620  001832  5DD3               	subwf	create_chain@cs& (0+255),w,b
 10621  001834  50DE               	movf	postinc2,w,c
 10622  001836  59D4               	subwfb	(create_chain@cs+1)& (0+255),w,b
 10623  001838  50DE               	movf	postinc2,w,c
 10624  00183A  59D5               	subwfb	(create_chain@cs+2)& (0+255),w,b
 10625  00183C  50DE               	movf	postinc2,w,c
 10626  00183E  59D6               	subwfb	(create_chain@cs+3)& (0+255),w,b
 10627  001840  B0D8               	btfsc	status,0,c
 10628  001842  D009               	goto	l1114
 10629                           
 10630                           ; BSR set to: 0
 10631  001844  C0D3  F0BA         	movff	create_chain@cs,?_create_chain
 10632  001848  C0D4  F0BB         	movff	create_chain@cs+1,?_create_chain+1
 10633  00184C  C0D5  F0BC         	movff	create_chain@cs+2,?_create_chain+2
 10634  001850  C0D6  F0BD         	movff	create_chain@cs+3,?_create_chain+3
 10635  001854  0012               	return	
 10636  001856                     l1114:
 10637                           
 10638                           ; BSR set to: 0
 10639                           ;ff.c: 1513: scl = clst;
 10640  001856  C0BC  F0C9         	movff	create_chain@clst,create_chain@scl
 10641  00185A  C0BD  F0CA         	movff	create_chain@clst+1,create_chain@scl+1
 10642  00185E  C0BE  F0CB         	movff	create_chain@clst+2,create_chain@scl+2
 10643  001862  C0BF  F0CC         	movff	create_chain@clst+3,create_chain@scl+3
 10644  001866                     l1110:
 10645                           
 10646                           ; BSR set to: 0
 10647                           ;ff.c: 1514: }
 10648                           ;ff.c: 1515: if (fs->free_clst == 0) return 0;
 10649                           
 10650                           ; BSR set to: 0
 10651  001866  EE20 F00F          	lfsr	2,15
 10652  00186A  51D1               	movf	create_chain@fs& (0+255),w,b
 10653  00186C  26D9               	addwf	fsr2l,f,c
 10654  00186E  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 10655  001870  22DA               	addwfc	fsr2h,f,c
 10656  001872  50DE               	movf	postinc2,w,c
 10657  001874  10DE               	iorwf	postinc2,w,c
 10658  001876  10DE               	iorwf	postinc2,w,c
 10659  001878  10DE               	iorwf	postinc2,w,c
 10660  00187A  A4D8               	btfss	status,2,c
 10661  00187C  D009               	goto	l1115
 10662                           
 10663                           ; BSR set to: 0
 10664  00187E  0E00               	movlw	0
 10665  001880  6FBA               	movwf	?_create_chain& (0+255),b
 10666  001882  0E00               	movlw	0
 10667  001884  6FBB               	movwf	(?_create_chain+1)& (0+255),b
 10668  001886  0E00               	movlw	0
 10669  001888  6FBC               	movwf	(?_create_chain+2)& (0+255),b
 10670  00188A  0E00               	movlw	0
 10671  00188C  6FBD               	movwf	(?_create_chain+3)& (0+255),b
 10672                           
 10673                           ; BSR set to: 0
 10674  00188E  0012               	return	
 10675  001890                     l1115:
 10676                           
 10677                           ; BSR set to: 0
 10678                           ;ff.c: 1543: {
 10679                           ;ff.c: 1544: ncl = 0;
 10680                           
 10681                           ; BSR set to: 0
 10682  001890  0E00               	movlw	0
 10683  001892  6FCD               	movwf	create_chain@ncl& (0+255),b
 10684  001894  0E00               	movlw	0
 10685  001896  6FCE               	movwf	(create_chain@ncl+1)& (0+255),b
 10686  001898  0E00               	movlw	0
 10687  00189A  6FCF               	movwf	(create_chain@ncl+2)& (0+255),b
 10688  00189C  0E00               	movlw	0
 10689  00189E  6FD0               	movwf	(create_chain@ncl+3)& (0+255),b
 10690                           
 10691                           ; BSR set to: 0
 10692                           ;ff.c: 1545: if (scl == clst) {
 10693  0018A0  51BC               	movf	create_chain@clst& (0+255),w,b
 10694  0018A2  19C9               	xorwf	create_chain@scl& (0+255),w,b
 10695  0018A4  E109               	bnz	u17001
 10696  0018A6  51BD               	movf	(create_chain@clst+1)& (0+255),w,b
 10697  0018A8  19CA               	xorwf	(create_chain@scl+1)& (0+255),w,b
 10698  0018AA  E106               	bnz	u17001
 10699  0018AC  51BE               	movf	(create_chain@clst+2)& (0+255),w,b
 10700  0018AE  19CB               	xorwf	(create_chain@scl+2)& (0+255),w,b
 10701  0018B0  E103               	bnz	u17001
 10702  0018B2  51BF               	movf	(create_chain@clst+3)& (0+255),w,b
 10703  0018B4  19CC               	xorwf	(create_chain@scl+3)& (0+255),w,b
 10704  0018B6  A4D8               	btfss	status,2,c
 10705  0018B8                     u17001:
 10706  0018B8  D08F               	goto	l1121
 10707                           
 10708                           ; BSR set to: 0
 10709                           ;ff.c: 1546: ncl = scl + 1;
 10710  0018BA  0E01               	movlw	1
 10711  0018BC  25C9               	addwf	create_chain@scl& (0+255),w,b
 10712  0018BE  6FCD               	movwf	create_chain@ncl& (0+255),b
 10713  0018C0  0E00               	movlw	0
 10714  0018C2  21CA               	addwfc	(create_chain@scl+1)& (0+255),w,b
 10715  0018C4  6FCE               	movwf	(create_chain@ncl+1)& (0+255),b
 10716  0018C6  0E00               	movlw	0
 10717  0018C8  21CB               	addwfc	(create_chain@scl+2)& (0+255),w,b
 10718  0018CA  6FCF               	movwf	(create_chain@ncl+2)& (0+255),b
 10719  0018CC  0E00               	movlw	0
 10720  0018CE  21CC               	addwfc	(create_chain@scl+3)& (0+255),w,b
 10721  0018D0  6FD0               	movwf	(create_chain@ncl+3)& (0+255),b
 10722                           
 10723                           ; BSR set to: 0
 10724                           ;ff.c: 1547: if (ncl >= fs->n_fatent) ncl = 2;
 10725  0018D2  EE20 F013          	lfsr	2,19
 10726  0018D6  51D1               	movf	create_chain@fs& (0+255),w,b
 10727  0018D8  26D9               	addwf	fsr2l,f,c
 10728  0018DA  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 10729  0018DC  22DA               	addwfc	fsr2h,f,c
 10730  0018DE  50DE               	movf	postinc2,w,c
 10731  0018E0  5DCD               	subwf	create_chain@ncl& (0+255),w,b
 10732  0018E2  50DE               	movf	postinc2,w,c
 10733  0018E4  59CE               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 10734  0018E6  50DE               	movf	postinc2,w,c
 10735  0018E8  59CF               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 10736  0018EA  50DE               	movf	postinc2,w,c
 10737  0018EC  59D0               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 10738  0018EE  A0D8               	btfss	status,0,c
 10739  0018F0  D008               	goto	l1117
 10740                           
 10741                           ; BSR set to: 0
 10742  0018F2  0E02               	movlw	2
 10743  0018F4  6FCD               	movwf	create_chain@ncl& (0+255),b
 10744  0018F6  0E00               	movlw	0
 10745  0018F8  6FCE               	movwf	(create_chain@ncl+1)& (0+255),b
 10746  0018FA  0E00               	movlw	0
 10747  0018FC  6FCF               	movwf	(create_chain@ncl+2)& (0+255),b
 10748  0018FE  0E00               	movlw	0
 10749  001900  6FD0               	movwf	(create_chain@ncl+3)& (0+255),b
 10750  001902                     l1117:
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;ff.c: 1548: cs = get_fat(obj, ncl);
 10754                           
 10755                           ; BSR set to: 0
 10756  001902  C0BA  F09B         	movff	create_chain@obj,get_fat@obj
 10757  001906  C0BB  F09C         	movff	create_chain@obj+1,get_fat@obj+1
 10758  00190A  C0CD  F09D         	movff	create_chain@ncl,get_fat@clst
 10759  00190E  C0CE  F09E         	movff	create_chain@ncl+1,get_fat@clst+1
 10760  001912  C0CF  F09F         	movff	create_chain@ncl+2,get_fat@clst+2
 10761  001916  C0D0  F0A0         	movff	create_chain@ncl+3,get_fat@clst+3
 10762  00191A  EC17  F012         	call	_get_fat	;wreg free
 10763  00191E  C09B  F0D3         	movff	?_get_fat,create_chain@cs
 10764  001922  C09C  F0D4         	movff	?_get_fat+1,create_chain@cs+1
 10765  001926  C09D  F0D5         	movff	?_get_fat+2,create_chain@cs+2
 10766  00192A  C09E  F0D6         	movff	?_get_fat+3,create_chain@cs+3
 10767                           
 10768                           ;ff.c: 1549: if (cs == 1 || cs == 0xFFFFFFFF) return cs;
 10769  00192E  0100               	movlb	0	; () banked
 10770  001930  05D3               	decf	create_chain@cs& (0+255),w,b
 10771  001932  11D4               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10772  001934  11D5               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10773  001936  11D6               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10774  001938  B4D8               	btfsc	status,2,c
 10775  00193A  D009               	goto	u17030
 10776                           
 10777                           ; BSR set to: 0
 10778  00193C  29D3               	incf	create_chain@cs& (0+255),w,b
 10779  00193E  E110               	bnz	l13366
 10780  001940  29D4               	incf	(create_chain@cs+1)& (0+255),w,b
 10781  001942  E10E               	bnz	l13366
 10782  001944  29D5               	incf	(create_chain@cs+2)& (0+255),w,b
 10783  001946  E10C               	bnz	l13366
 10784  001948  29D6               	incf	(create_chain@cs+3)& (0+255),w,b
 10785  00194A  A4D8               	btfss	status,2,c
 10786  00194C  D009               	goto	l1118
 10787  00194E                     u17030:
 10788                           
 10789                           ; BSR set to: 0
 10790  00194E  C0D3  F0BA         	movff	create_chain@cs,?_create_chain
 10791  001952  C0D4  F0BB         	movff	create_chain@cs+1,?_create_chain+1
 10792  001956  C0D5  F0BC         	movff	create_chain@cs+2,?_create_chain+2
 10793  00195A  C0D6  F0BD         	movff	create_chain@cs+3,?_create_chain+3
 10794  00195E  0012               	return	
 10795  001960                     l1118:
 10796  001960                     l13366:
 10797                           
 10798                           ; BSR set to: 0
 10799                           ;ff.c: 1550: if (cs != 0) {
 10800  001960  51D3               	movf	create_chain@cs& (0+255),w,b
 10801  001962  11D4               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10802  001964  11D5               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10803  001966  11D6               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10804  001968  B4D8               	btfsc	status,2,c
 10805  00196A  D036               	goto	l1121
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;ff.c: 1551: cs = fs->last_clst;
 10809  00196C  EE20 F00B          	lfsr	2,11
 10810  001970  51D1               	movf	create_chain@fs& (0+255),w,b
 10811  001972  26D9               	addwf	fsr2l,f,c
 10812  001974  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 10813  001976  22DA               	addwfc	fsr2h,f,c
 10814  001978  CFDE F0D3          	movff	postinc2,create_chain@cs
 10815  00197C  CFDE F0D4          	movff	postinc2,create_chain@cs+1
 10816  001980  CFDE F0D5          	movff	postinc2,create_chain@cs+2
 10817  001984  CFDE F0D6          	movff	postinc2,create_chain@cs+3
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;ff.c: 1552: if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 10821  001988  51D6               	movf	(create_chain@cs+3)& (0+255),w,b
 10822  00198A  11D5               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10823  00198C  11D4               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10824  00198E  E104               	bnz	u17050
 10825  001990  0E02               	movlw	2
 10826  001992  5DD3               	subwf	create_chain@cs& (0+255),w,b
 10827  001994  A0D8               	btfss	status,0,c
 10828  001996  D018               	goto	l1122
 10829  001998                     u17050:
 10830                           
 10831                           ; BSR set to: 0
 10832  001998  EE20 F013          	lfsr	2,19
 10833  00199C  51D1               	movf	create_chain@fs& (0+255),w,b
 10834  00199E  26D9               	addwf	fsr2l,f,c
 10835  0019A0  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 10836  0019A2  22DA               	addwfc	fsr2h,f,c
 10837  0019A4  50DE               	movf	postinc2,w,c
 10838  0019A6  5DD3               	subwf	create_chain@cs& (0+255),w,b
 10839  0019A8  50DE               	movf	postinc2,w,c
 10840  0019AA  59D4               	subwfb	(create_chain@cs+1)& (0+255),w,b
 10841  0019AC  50DE               	movf	postinc2,w,c
 10842  0019AE  59D5               	subwfb	(create_chain@cs+2)& (0+255),w,b
 10843  0019B0  50DE               	movf	postinc2,w,c
 10844  0019B2  59D6               	subwfb	(create_chain@cs+3)& (0+255),w,b
 10845  0019B4  B0D8               	btfsc	status,0,c
 10846  0019B6  D008               	goto	l1122
 10847                           
 10848                           ; BSR set to: 0
 10849  0019B8  C0D3  F0C9         	movff	create_chain@cs,create_chain@scl
 10850  0019BC  C0D4  F0CA         	movff	create_chain@cs+1,create_chain@scl+1
 10851  0019C0  C0D5  F0CB         	movff	create_chain@cs+2,create_chain@scl+2
 10852  0019C4  C0D6  F0CC         	movff	create_chain@cs+3,create_chain@scl+3
 10853  0019C8                     l1122:
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;ff.c: 1553: ncl = 0;
 10857                           
 10858                           ; BSR set to: 0
 10859  0019C8  0E00               	movlw	0
 10860  0019CA  6FCD               	movwf	create_chain@ncl& (0+255),b
 10861  0019CC  0E00               	movlw	0
 10862  0019CE  6FCE               	movwf	(create_chain@ncl+1)& (0+255),b
 10863  0019D0  0E00               	movlw	0
 10864  0019D2  6FCF               	movwf	(create_chain@ncl+2)& (0+255),b
 10865  0019D4  0E00               	movlw	0
 10866  0019D6  6FD0               	movwf	(create_chain@ncl+3)& (0+255),b
 10867  0019D8                     l1121:
 10868                           
 10869                           ; BSR set to: 0
 10870                           ;ff.c: 1554: }
 10871                           ;ff.c: 1555: }
 10872                           ;ff.c: 1556: if (ncl == 0) {
 10873                           
 10874                           ; BSR set to: 0
 10875                           
 10876                           ; BSR set to: 0
 10877  0019D8  51CD               	movf	create_chain@ncl& (0+255),w,b
 10878  0019DA  11CE               	iorwf	(create_chain@ncl+1)& (0+255),w,b
 10879  0019DC  11CF               	iorwf	(create_chain@ncl+2)& (0+255),w,b
 10880  0019DE  11D0               	iorwf	(create_chain@ncl+3)& (0+255),w,b
 10881  0019E0  A4D8               	btfss	status,2,c
 10882  0019E2  D084               	goto	l1128
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;ff.c: 1557: ncl = scl;
 10886  0019E4  C0C9  F0CD         	movff	create_chain@scl,create_chain@ncl
 10887  0019E8  C0CA  F0CE         	movff	create_chain@scl+1,create_chain@ncl+1
 10888  0019EC  C0CB  F0CF         	movff	create_chain@scl+2,create_chain@ncl+2
 10889  0019F0  C0CC  F0D0         	movff	create_chain@scl+3,create_chain@ncl+3
 10890  0019F4                     l13382:
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;ff.c: 1559: ncl++;
 10894  0019F4  0E01               	movlw	1
 10895  0019F6  27CD               	addwf	create_chain@ncl& (0+255),f,b
 10896  0019F8  0E00               	movlw	0
 10897  0019FA  23CE               	addwfc	(create_chain@ncl+1)& (0+255),f,b
 10898  0019FC  23CF               	addwfc	(create_chain@ncl+2)& (0+255),f,b
 10899  0019FE  23D0               	addwfc	(create_chain@ncl+3)& (0+255),f,b
 10900                           
 10901                           ; BSR set to: 0
 10902                           ;ff.c: 1560: if (ncl >= fs->n_fatent) {
 10903  001A00  EE20 F013          	lfsr	2,19
 10904  001A04  51D1               	movf	create_chain@fs& (0+255),w,b
 10905  001A06  26D9               	addwf	fsr2l,f,c
 10906  001A08  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 10907  001A0A  22DA               	addwfc	fsr2h,f,c
 10908  001A0C  50DE               	movf	postinc2,w,c
 10909  001A0E  5DCD               	subwf	create_chain@ncl& (0+255),w,b
 10910  001A10  50DE               	movf	postinc2,w,c
 10911  001A12  59CE               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 10912  001A14  50DE               	movf	postinc2,w,c
 10913  001A16  59CF               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 10914  001A18  50DE               	movf	postinc2,w,c
 10915  001A1A  59D0               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 10916  001A1C  A0D8               	btfss	status,0,c
 10917  001A1E  D01B               	goto	l1126
 10918                           
 10919                           ; BSR set to: 0
 10920                           ;ff.c: 1561: ncl = 2;
 10921  001A20  0E02               	movlw	2
 10922  001A22  6FCD               	movwf	create_chain@ncl& (0+255),b
 10923  001A24  0E00               	movlw	0
 10924  001A26  6FCE               	movwf	(create_chain@ncl+1)& (0+255),b
 10925  001A28  0E00               	movlw	0
 10926  001A2A  6FCF               	movwf	(create_chain@ncl+2)& (0+255),b
 10927  001A2C  0E00               	movlw	0
 10928  001A2E  6FD0               	movwf	(create_chain@ncl+3)& (0+255),b
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;ff.c: 1562: if (ncl > scl) return 0;
 10932  001A30  51CD               	movf	create_chain@ncl& (0+255),w,b
 10933  001A32  5DC9               	subwf	create_chain@scl& (0+255),w,b
 10934  001A34  51CE               	movf	(create_chain@ncl+1)& (0+255),w,b
 10935  001A36  59CA               	subwfb	(create_chain@scl+1)& (0+255),w,b
 10936  001A38  51CF               	movf	(create_chain@ncl+2)& (0+255),w,b
 10937  001A3A  59CB               	subwfb	(create_chain@scl+2)& (0+255),w,b
 10938  001A3C  51D0               	movf	(create_chain@ncl+3)& (0+255),w,b
 10939  001A3E  59CC               	subwfb	(create_chain@scl+3)& (0+255),w,b
 10940  001A40  B0D8               	btfsc	status,0,c
 10941  001A42  D009               	goto	l1126
 10942                           
 10943                           ; BSR set to: 0
 10944  001A44  0E00               	movlw	0
 10945  001A46  6FBA               	movwf	?_create_chain& (0+255),b
 10946  001A48  0E00               	movlw	0
 10947  001A4A  6FBB               	movwf	(?_create_chain+1)& (0+255),b
 10948  001A4C  0E00               	movlw	0
 10949  001A4E  6FBC               	movwf	(?_create_chain+2)& (0+255),b
 10950  001A50  0E00               	movlw	0
 10951  001A52  6FBD               	movwf	(?_create_chain+3)& (0+255),b
 10952                           
 10953                           ; BSR set to: 0
 10954  001A54  0012               	return	
 10955  001A56                     l1126:
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;ff.c: 1563: }
 10959                           ;ff.c: 1564: cs = get_fat(obj, ncl);
 10960                           
 10961                           ; BSR set to: 0
 10962                           
 10963                           ; BSR set to: 0
 10964  001A56  C0BA  F09B         	movff	create_chain@obj,get_fat@obj
 10965  001A5A  C0BB  F09C         	movff	create_chain@obj+1,get_fat@obj+1
 10966  001A5E  C0CD  F09D         	movff	create_chain@ncl,get_fat@clst
 10967  001A62  C0CE  F09E         	movff	create_chain@ncl+1,get_fat@clst+1
 10968  001A66  C0CF  F09F         	movff	create_chain@ncl+2,get_fat@clst+2
 10969  001A6A  C0D0  F0A0         	movff	create_chain@ncl+3,get_fat@clst+3
 10970  001A6E  EC17  F012         	call	_get_fat	;wreg free
 10971  001A72  C09B  F0D3         	movff	?_get_fat,create_chain@cs
 10972  001A76  C09C  F0D4         	movff	?_get_fat+1,create_chain@cs+1
 10973  001A7A  C09D  F0D5         	movff	?_get_fat+2,create_chain@cs+2
 10974  001A7E  C09E  F0D6         	movff	?_get_fat+3,create_chain@cs+3
 10975                           
 10976                           ;ff.c: 1565: if (cs == 0) break;
 10977  001A82  0100               	movlb	0	; () banked
 10978  001A84  51D3               	movf	create_chain@cs& (0+255),w,b
 10979  001A86  11D4               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10980  001A88  11D5               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10981  001A8A  11D6               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10982  001A8C  B4D8               	btfsc	status,2,c
 10983  001A8E  D02E               	goto	l1128
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;ff.c: 1566: if (cs == 1 || cs == 0xFFFFFFFF) return cs;
 10987                           
 10988                           ; BSR set to: 0
 10989                           
 10990                           ; BSR set to: 0
 10991  001A90  05D3               	decf	create_chain@cs& (0+255),w,b
 10992  001A92  11D4               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10993  001A94  11D5               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10994  001A96  11D6               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10995  001A98  B4D8               	btfsc	status,2,c
 10996  001A9A  D009               	goto	u17120
 10997                           
 10998                           ; BSR set to: 0
 10999  001A9C  29D3               	incf	create_chain@cs& (0+255),w,b
 11000  001A9E  E110               	bnz	l13404
 11001  001AA0  29D4               	incf	(create_chain@cs+1)& (0+255),w,b
 11002  001AA2  E10E               	bnz	l13404
 11003  001AA4  29D5               	incf	(create_chain@cs+2)& (0+255),w,b
 11004  001AA6  E10C               	bnz	l13404
 11005  001AA8  29D6               	incf	(create_chain@cs+3)& (0+255),w,b
 11006  001AAA  A4D8               	btfss	status,2,c
 11007  001AAC  D009               	goto	l1129
 11008  001AAE                     u17120:
 11009                           
 11010                           ; BSR set to: 0
 11011  001AAE  C0D3  F0BA         	movff	create_chain@cs,?_create_chain
 11012  001AB2  C0D4  F0BB         	movff	create_chain@cs+1,?_create_chain+1
 11013  001AB6  C0D5  F0BC         	movff	create_chain@cs+2,?_create_chain+2
 11014  001ABA  C0D6  F0BD         	movff	create_chain@cs+3,?_create_chain+3
 11015  001ABE  0012               	return	
 11016  001AC0                     l1129:
 11017  001AC0                     l13404:
 11018                           
 11019                           ; BSR set to: 0
 11020                           ;ff.c: 1567: if (ncl == scl) return 0;
 11021  001AC0  51C9               	movf	create_chain@scl& (0+255),w,b
 11022  001AC2  19CD               	xorwf	create_chain@ncl& (0+255),w,b
 11023  001AC4  E197               	bnz	l13382
 11024  001AC6  51CA               	movf	(create_chain@scl+1)& (0+255),w,b
 11025  001AC8  19CE               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 11026  001ACA  E194               	bnz	l13382
 11027  001ACC  51CB               	movf	(create_chain@scl+2)& (0+255),w,b
 11028  001ACE  19CF               	xorwf	(create_chain@ncl+2)& (0+255),w,b
 11029  001AD0  E191               	bnz	l13382
 11030  001AD2  51CC               	movf	(create_chain@scl+3)& (0+255),w,b
 11031  001AD4  19D0               	xorwf	(create_chain@ncl+3)& (0+255),w,b
 11032  001AD6  A4D8               	btfss	status,2,c
 11033  001AD8  D78D               	goto	l1124
 11034                           
 11035                           ; BSR set to: 0
 11036  001ADA  0E00               	movlw	0
 11037  001ADC  6FBA               	movwf	?_create_chain& (0+255),b
 11038  001ADE  0E00               	movlw	0
 11039  001AE0  6FBB               	movwf	(?_create_chain+1)& (0+255),b
 11040  001AE2  0E00               	movlw	0
 11041  001AE4  6FBC               	movwf	(?_create_chain+2)& (0+255),b
 11042  001AE6  0E00               	movlw	0
 11043  001AE8  6FBD               	movwf	(?_create_chain+3)& (0+255),b
 11044                           
 11045                           ; BSR set to: 0
 11046  001AEA  0012               	return	
 11047  001AEC                     l1128:
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;ff.c: 1569: }
 11051                           ;ff.c: 1570: res = put_fat(fs, ncl, 0xFFFFFFFF);
 11052                           
 11053                           ; BSR set to: 0
 11054                           
 11055                           ; BSR set to: 0
 11056  001AEC  C0D1  F09B         	movff	create_chain@fs,put_fat@fs
 11057  001AF0  C0D2  F09C         	movff	create_chain@fs+1,put_fat@fs+1
 11058  001AF4  C0CD  F09D         	movff	create_chain@ncl,put_fat@clst
 11059  001AF8  C0CE  F09E         	movff	create_chain@ncl+1,put_fat@clst+1
 11060  001AFC  C0CF  F09F         	movff	create_chain@ncl+2,put_fat@clst+2
 11061  001B00  C0D0  F0A0         	movff	create_chain@ncl+3,put_fat@clst+3
 11062  001B04  0EFF               	movlw	255
 11063  001B06  6FA1               	movwf	put_fat@val& (0+255),b
 11064  001B08  0EFF               	movlw	255
 11065  001B0A  6FA2               	movwf	(put_fat@val+1)& (0+255),b
 11066  001B0C  0EFF               	movlw	255
 11067  001B0E  6FA3               	movwf	(put_fat@val+2)& (0+255),b
 11068  001B10  0EFF               	movlw	255
 11069  001B12  6FA4               	movwf	(put_fat@val+3)& (0+255),b
 11070  001B14  EC0F  F00E         	call	_put_fat	;wreg free
 11071  001B18  0100               	movlb	0	; () banked
 11072  001B1A  6FC8               	movwf	create_chain@res& (0+255),b
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;ff.c: 1571: if (res == FR_OK && clst != 0) {
 11076  001B1C  51C8               	movf	create_chain@res& (0+255),w,b
 11077  001B1E  A4D8               	btfss	status,2,c
 11078  001B20  D01E               	goto	l1133
 11079                           
 11080                           ; BSR set to: 0
 11081  001B22  51BC               	movf	create_chain@clst& (0+255),w,b
 11082  001B24  11BD               	iorwf	(create_chain@clst+1)& (0+255),w,b
 11083  001B26  11BE               	iorwf	(create_chain@clst+2)& (0+255),w,b
 11084  001B28  11BF               	iorwf	(create_chain@clst+3)& (0+255),w,b
 11085  001B2A  B4D8               	btfsc	status,2,c
 11086  001B2C  D018               	goto	l1133
 11087                           
 11088                           ; BSR set to: 0
 11089                           ;ff.c: 1572: res = put_fat(fs, clst, ncl);
 11090  001B2E  C0D1  F09B         	movff	create_chain@fs,put_fat@fs
 11091  001B32  C0D2  F09C         	movff	create_chain@fs+1,put_fat@fs+1
 11092  001B36  C0BC  F09D         	movff	create_chain@clst,put_fat@clst
 11093  001B3A  C0BD  F09E         	movff	create_chain@clst+1,put_fat@clst+1
 11094  001B3E  C0BE  F09F         	movff	create_chain@clst+2,put_fat@clst+2
 11095  001B42  C0BF  F0A0         	movff	create_chain@clst+3,put_fat@clst+3
 11096  001B46  C0CD  F0A1         	movff	create_chain@ncl,put_fat@val
 11097  001B4A  C0CE  F0A2         	movff	create_chain@ncl+1,put_fat@val+1
 11098  001B4E  C0CF  F0A3         	movff	create_chain@ncl+2,put_fat@val+2
 11099  001B52  C0D0  F0A4         	movff	create_chain@ncl+3,put_fat@val+3
 11100  001B56  EC0F  F00E         	call	_put_fat	;wreg free
 11101  001B5A  0100               	movlb	0	; () banked
 11102  001B5C  6FC8               	movwf	create_chain@res& (0+255),b
 11103  001B5E                     l1133:
 11104                           
 11105                           ; BSR set to: 0
 11106                           ;ff.c: 1573: }
 11107                           ;ff.c: 1574: }
 11108                           ;ff.c: 1576: if (res == FR_OK) {
 11109                           
 11110                           ; BSR set to: 0
 11111  001B5E  51C8               	movf	create_chain@res& (0+255),w,b
 11112  001B60  A4D8               	btfss	status,2,c
 11113  001B62  D044               	goto	l1134
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;ff.c: 1577: fs->last_clst = ncl;
 11117  001B64  EE20 F00B          	lfsr	2,11
 11118  001B68  51D1               	movf	create_chain@fs& (0+255),w,b
 11119  001B6A  26D9               	addwf	fsr2l,f,c
 11120  001B6C  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 11121  001B6E  22DA               	addwfc	fsr2h,f,c
 11122  001B70  C0CD  FFDE         	movff	create_chain@ncl,postinc2
 11123  001B74  C0CE  FFDE         	movff	create_chain@ncl+1,postinc2
 11124  001B78  C0CF  FFDE         	movff	create_chain@ncl+2,postinc2
 11125  001B7C  C0D0  FFDE         	movff	create_chain@ncl+3,postinc2
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;ff.c: 1578: if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 11129  001B80  EE20 F00F          	lfsr	2,15
 11130  001B84  51D1               	movf	create_chain@fs& (0+255),w,b
 11131  001B86  26D9               	addwf	fsr2l,f,c
 11132  001B88  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 11133  001B8A  22DA               	addwfc	fsr2h,f,c
 11134  001B8C  EE10 F013          	lfsr	1,19
 11135  001B90  51D1               	movf	create_chain@fs& (0+255),w,b
 11136  001B92  26E1               	addwf	fsr1l,f,c
 11137  001B94  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 11138  001B96  22E2               	addwfc	fsr1h,f,c
 11139  001B98  0EFE               	movlw	254
 11140  001B9A  24E6               	addwf	postinc1,w,c
 11141  001B9C  6FC4               	movwf	(??_create_chain+4)& (0+255),b
 11142  001B9E  0EFF               	movlw	255
 11143  001BA0  20E6               	addwfc	postinc1,w,c
 11144  001BA2  6FC5               	movwf	(??_create_chain+5)& (0+255),b
 11145  001BA4  0EFF               	movlw	255
 11146  001BA6  20E6               	addwfc	postinc1,w,c
 11147  001BA8  6FC6               	movwf	(??_create_chain+6)& (0+255),b
 11148  001BAA  0EFF               	movlw	255
 11149  001BAC  20E6               	addwfc	postinc1,w,c
 11150  001BAE  6FC7               	movwf	(??_create_chain+7)& (0+255),b
 11151  001BB0  50DE               	movf	postinc2,w,c
 11152  001BB2  5DC4               	subwf	(??_create_chain+4)& (0+255),w,b
 11153  001BB4  50DE               	movf	postinc2,w,c
 11154  001BB6  59C5               	subwfb	(??_create_chain+5)& (0+255),w,b
 11155  001BB8  50DE               	movf	postinc2,w,c
 11156  001BBA  59C6               	subwfb	(??_create_chain+6)& (0+255),w,b
 11157  001BBC  50DE               	movf	postinc2,w,c
 11158  001BBE  59C7               	subwfb	(??_create_chain+7)& (0+255),w,b
 11159  001BC0  A0D8               	btfss	status,0,c
 11160  001BC2  D00B               	goto	l1135
 11161                           
 11162                           ; BSR set to: 0
 11163  001BC4  EE20 F00F          	lfsr	2,15
 11164  001BC8  51D1               	movf	create_chain@fs& (0+255),w,b
 11165  001BCA  26D9               	addwf	fsr2l,f,c
 11166  001BCC  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 11167  001BCE  22DA               	addwfc	fsr2h,f,c
 11168  001BD0  06DE               	decf	postinc2,f,c
 11169  001BD2  0E00               	movlw	0
 11170  001BD4  5ADE               	subwfb	postinc2,f,c
 11171  001BD6  5ADE               	subwfb	postinc2,f,c
 11172  001BD8  5ADE               	subwfb	postinc2,f,c
 11173  001BDA                     l1135:
 11174                           
 11175                           ; BSR set to: 0
 11176                           ;ff.c: 1579: fs->fsi_flag |= 1;
 11177  001BDA  EE20 F004          	lfsr	2,4
 11178  001BDE  51D1               	movf	create_chain@fs& (0+255),w,b
 11179  001BE0  26D9               	addwf	fsr2l,f,c
 11180  001BE2  51D2               	movf	(create_chain@fs+1)& (0+255),w,b
 11181  001BE4  22DA               	addwfc	fsr2h,f,c
 11182  001BE6  0E00               	movlw	0
 11183  001BE8  80DB               	bsf	plusw2,0,c
 11184                           
 11185                           ;ff.c: 1580: } else {
 11186  001BEA  D010               	goto	l1140
 11187  001BEC                     l1134:
 11188                           
 11189                           ; BSR set to: 0
 11190                           ;ff.c: 1581: ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 11191                           
 11192                           ; BSR set to: 0
 11193  001BEC  05C8               	decf	create_chain@res& (0+255),w,b
 11194  001BEE  B4D8               	btfsc	status,2,c
 11195  001BF0  D009               	goto	l1138
 11196                           
 11197                           ; BSR set to: 0
 11198  001BF2  0E01               	movlw	1
 11199  001BF4  6FCD               	movwf	create_chain@ncl& (0+255),b
 11200  001BF6  0E00               	movlw	0
 11201  001BF8  6FCE               	movwf	(create_chain@ncl+1)& (0+255),b
 11202  001BFA  0E00               	movlw	0
 11203  001BFC  6FCF               	movwf	(create_chain@ncl+2)& (0+255),b
 11204  001BFE  0E00               	movlw	0
 11205  001C00  6FD0               	movwf	(create_chain@ncl+3)& (0+255),b
 11206  001C02  D004               	goto	l1140
 11207  001C04                     l1138:
 11208                           
 11209                           ; BSR set to: 0
 11210  001C04  69CD               	setf	create_chain@ncl& (0+255),b
 11211  001C06  69CE               	setf	(create_chain@ncl+1)& (0+255),b
 11212  001C08  69CF               	setf	(create_chain@ncl+2)& (0+255),b
 11213  001C0A  69D0               	setf	(create_chain@ncl+3)& (0+255),b
 11214  001C0C                     l1140:
 11215                           
 11216                           ; BSR set to: 0
 11217                           ;ff.c: 1582: }
 11218                           ;ff.c: 1584: return ncl;
 11219                           
 11220                           ; BSR set to: 0
 11221  001C0C  C0CD  F0BA         	movff	create_chain@ncl,?_create_chain
 11222  001C10  C0CE  F0BB         	movff	create_chain@ncl+1,?_create_chain+1
 11223  001C14  C0CF  F0BC         	movff	create_chain@ncl+2,?_create_chain+2
 11224  001C18  C0D0  F0BD         	movff	create_chain@ncl+3,?_create_chain+3
 11225                           
 11226                           ; BSR set to: 0
 11227  001C1C  0012               	return		;funcret
 11228  001C1E                     __end_of_create_chain:
 11229                           	opt stack 0
 11230                           tosu	equ	0xFFF
 11231                           tosh	equ	0xFFE
 11232                           tosl	equ	0xFFD
 11233                           pclath	equ	0xFFA
 11234                           tblptru	equ	0xFF8
 11235                           tblptrh	equ	0xFF7
 11236                           tblptrl	equ	0xFF6
 11237                           tablat	equ	0xFF5
 11238                           prodh	equ	0xFF4
 11239                           prodl	equ	0xFF3
 11240                           intcon	equ	0xFF2
 11241                           intcon2	equ	0xFF1
 11242                           intcon3	equ	0xFF0
 11243                           indf0	equ	0xFEF
 11244                           postinc0	equ	0xFEE
 11245                           fsr0h	equ	0xFEA
 11246                           fsr0l	equ	0xFE9
 11247                           wreg	equ	0xFE8
 11248                           indf1	equ	0xFE7
 11249                           postinc1	equ	0xFE6
 11250                           postdec1	equ	0xFE5
 11251                           fsr1h	equ	0xFE2
 11252                           fsr1l	equ	0xFE1
 11253                           indf2	equ	0xFDF
 11254                           postinc2	equ	0xFDE
 11255                           postdec2	equ	0xFDD
 11256                           plusw2	equ	0xFDB
 11257                           fsr2h	equ	0xFDA
 11258                           fsr2l	equ	0xFD9
 11259                           status	equ	0xFD8
 11260                           
 11261 ;; *************** function _put_fat *****************
 11262 ;; Defined at:
 11263 ;;		line 1209 in file "bibliotecas/ff.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;  fs              2   59[BANK0 ] PTR struct .
 11266 ;;		 -> NULL(0), fs(559), 
 11267 ;;  clst            4   61[BANK0 ] unsigned long 
 11268 ;;  val             4   65[BANK0 ] unsigned long 
 11269 ;; Auto vars:     Size  Location     Type
 11270 ;;  bc              2   87[BANK0 ] unsigned int 
 11271 ;;  p               2   85[BANK0 ] PTR unsigned char 
 11272 ;;		 -> fs.win(512), NULL(0), fs(559), 
 11273 ;;  res             1   89[BANK0 ] enum E154
 11274 ;; Return value:  Size  Location     Type
 11275 ;;                  1    wreg      enum E154
 11276 ;; Registers used:
 11277 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11283 ;;      Params:         0      10       0       0       0       0       0       0       0
 11284 ;;      Locals:         0       9       0       0       0       0       0       0       0
 11285 ;;      Temps:          0      12       0       0       0       0       0       0       0
 11286 ;;      Totals:         0      31       0       0       0       0       0       0       0
 11287 ;;Total ram usage:       31 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; Hardware stack levels required when called:    9
 11290 ;; This function calls:
 11291 ;;		_ld_dword
 11292 ;;		_move_window
 11293 ;;		_st_dword
 11294 ;;		_st_word
 11295 ;; This function is called by:
 11296 ;;		_remove_chain
 11297 ;;		_create_chain
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           	psect	text33
 11302  001C1E                     __ptext33:
 11303                           	opt stack 0
 11304  001C1E                     _put_fat:
 11305                           	opt stack 17
 11306                           
 11307                           ;ff.c: 1215: UINT bc;
 11308                           ;ff.c: 1216: BYTE *p;
 11309                           ;ff.c: 1217: FRESULT res = FR_INT_ERR;
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;incstack = 0
 11313  001C1E  0E02               	movlw	2
 11314  001C20  0100               	movlb	0	; () banked
 11315  001C22  6FB9               	movwf	put_fat@res& (0+255),b
 11316                           
 11317                           ; BSR set to: 0
 11318                           ;ff.c: 1220: if (clst >= 2 && clst < fs->n_fatent) {
 11319  001C24  51A0               	movf	(put_fat@clst+3)& (0+255),w,b
 11320  001C26  119F               	iorwf	(put_fat@clst+2)& (0+255),w,b
 11321  001C28  119E               	iorwf	(put_fat@clst+1)& (0+255),w,b
 11322  001C2A  E104               	bnz	u16750
 11323  001C2C  0E02               	movlw	2
 11324  001C2E  5D9D               	subwf	put_fat@clst& (0+255),w,b
 11325  001C30  A0D8               	btfss	status,0,c
 11326  001C32  D21E               	goto	l1066
 11327  001C34                     u16750:
 11328                           
 11329                           ; BSR set to: 0
 11330  001C34  EE20 F013          	lfsr	2,19
 11331  001C38  519B               	movf	put_fat@fs& (0+255),w,b
 11332  001C3A  26D9               	addwf	fsr2l,f,c
 11333  001C3C  519C               	movf	(put_fat@fs+1)& (0+255),w,b
 11334  001C3E  22DA               	addwfc	fsr2h,f,c
 11335  001C40  50DE               	movf	postinc2,w,c
 11336  001C42  5D9D               	subwf	put_fat@clst& (0+255),w,b
 11337  001C44  50DE               	movf	postinc2,w,c
 11338  001C46  599E               	subwfb	(put_fat@clst+1)& (0+255),w,b
 11339  001C48  50DE               	movf	postinc2,w,c
 11340  001C4A  599F               	subwfb	(put_fat@clst+2)& (0+255),w,b
 11341  001C4C  50DE               	movf	postinc2,w,c
 11342  001C4E  59A0               	subwfb	(put_fat@clst+3)& (0+255),w,b
 11343  001C50  A0D8               	btfss	status,0,c
 11344  001C52  D200               	goto	l1063
 11345  001C54  D20D               	goto	l1066
 11346  001C56                     l1064:
 11347                           
 11348                           ; BSR set to: 0
 11349                           ;ff.c: 1223: bc = (UINT)clst; bc += bc / 2;
 11350  001C56  C09D  F0B7         	movff	put_fat@clst,put_fat@bc
 11351  001C5A  C09E  F0B8         	movff	put_fat@clst+1,put_fat@bc+1
 11352                           
 11353                           ; BSR set to: 0
 11354  001C5E  90D8               	bcf	status,0,c
 11355  001C60  31B8               	rrcf	(put_fat@bc+1)& (0+255),w,b
 11356  001C62  6FA6               	movwf	(??_put_fat+1)& (0+255),b
 11357  001C64  31B7               	rrcf	put_fat@bc& (0+255),w,b
 11358  001C66  6FA5               	movwf	??_put_fat& (0+255),b
 11359  001C68  51A5               	movf	??_put_fat& (0+255),w,b
 11360  001C6A  27B7               	addwf	put_fat@bc& (0+255),f,b
 11361  001C6C  51A6               	movf	(??_put_fat+1)& (0+255),w,b
 11362  001C6E  23B8               	addwfc	(put_fat@bc+1)& (0+255),f,b
 11363                           
 11364                           ; BSR set to: 0
 11365                           ;ff.c: 1224: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11366  001C70  C09B  F090         	movff	put_fat@fs,move_window@fs
 11367  001C74  C09C  F091         	movff	put_fat@fs+1,move_window@fs+1
 11368  001C78  EE20 F01F          	lfsr	2,31
 11369  001C7C  519B               	movf	put_fat@fs& (0+255),w,b
 11370  001C7E  26D9               	addwf	fsr2l,f,c
 11371  001C80  519C               	movf	(put_fat@fs+1)& (0+255),w,b
 11372  001C82  22DA               	addwfc	fsr2h,f,c
 11373  001C84  CFDE F0A5          	movff	postinc2,??_put_fat
 11374  001C88  CFDE F0A6          	movff	postinc2,??_put_fat+1
 11375  001C8C  CFDE F0A7          	movff	postinc2,??_put_fat+2
 11376  001C90  CFDE F0A8          	movff	postinc2,??_put_fat+3
 11377  001C94  C0B7  F0A9         	movff	put_fat@bc,??_put_fat+4
 11378  001C98  C0B8  F0AA         	movff	put_fat@bc+1,??_put_fat+5
 11379  001C9C  0E09               	movlw	9
 11380  001C9E  6FAB               	movwf	(??_put_fat+6)& (0+255),b
 11381  001CA0                     u16775:
 11382  001CA0  90D8               	bcf	status,0,c
 11383  001CA2  33AA               	rrcf	(??_put_fat+5)& (0+255),f,b
 11384  001CA4  33A9               	rrcf	(??_put_fat+4)& (0+255),f,b
 11385  001CA6  2FAB               	decfsz	(??_put_fat+6)& (0+255),f,b
 11386  001CA8  D7FB               	goto	u16775
 11387  001CAA  51A9               	movf	(??_put_fat+4)& (0+255),w,b
 11388  001CAC  25A5               	addwf	??_put_fat& (0+255),w,b
 11389  001CAE  6F92               	movwf	move_window@sect& (0+255),b
 11390  001CB0  51AA               	movf	(??_put_fat+5)& (0+255),w,b
 11391  001CB2  21A6               	addwfc	(??_put_fat+1)& (0+255),w,b
 11392  001CB4  6F93               	movwf	(move_window@sect+1)& (0+255),b
 11393  001CB6  0E00               	movlw	0
 11394  001CB8  21A7               	addwfc	(??_put_fat+2)& (0+255),w,b
 11395  001CBA  6F94               	movwf	(move_window@sect+2)& (0+255),b
 11396  001CBC  0E00               	movlw	0
 11397  001CBE  21A8               	addwfc	(??_put_fat+3)& (0+255),w,b
 11398  001CC0  6F95               	movwf	(move_window@sect+3)& (0+255),b
 11399  001CC2  EC09  F026         	call	_move_window	;wreg free
 11400  001CC6  0100               	movlb	0	; () banked
 11401  001CC8  6FB9               	movwf	put_fat@res& (0+255),b
 11402                           
 11403                           ; BSR set to: 0
 11404                           ;ff.c: 1225: if (res != FR_OK) break;
 11405  001CCA  51B9               	movf	put_fat@res& (0+255),w,b
 11406  001CCC  A4D8               	btfss	status,2,c
 11407  001CCE  D1D0               	goto	l1066
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;ff.c: 1226: p = fs->win + bc++ % ((UINT)512);
 11411                           
 11412                           ; BSR set to: 0
 11413                           
 11414                           ; BSR set to: 0
 11415  001CD0  0EFF               	movlw	255
 11416  001CD2  6FA5               	movwf	??_put_fat& (0+255),b
 11417  001CD4  0E01               	movlw	1
 11418  001CD6  6FA6               	movwf	(??_put_fat+1)& (0+255),b
 11419  001CD8  C0B7  F0A7         	movff	put_fat@bc,??_put_fat+2
 11420  001CDC  C0B8  F0A8         	movff	put_fat@bc+1,??_put_fat+3
 11421  001CE0  51A5               	movf	??_put_fat& (0+255),w,b
 11422  001CE2  17A7               	andwf	(??_put_fat+2)& (0+255),f,b
 11423  001CE4  51A6               	movf	(??_put_fat+1)& (0+255),w,b
 11424  001CE6  17A8               	andwf	(??_put_fat+3)& (0+255),f,b
 11425  001CE8  0E2F               	movlw	47
 11426  001CEA  27A7               	addwf	(??_put_fat+2)& (0+255),f,b
 11427  001CEC  0E00               	movlw	0
 11428  001CEE  23A8               	addwfc	(??_put_fat+3)& (0+255),f,b
 11429  001CF0  51A7               	movf	(??_put_fat+2)& (0+255),w,b
 11430  001CF2  259B               	addwf	put_fat@fs& (0+255),w,b
 11431  001CF4  6FB5               	movwf	put_fat@p& (0+255),b
 11432  001CF6  51A8               	movf	(??_put_fat+3)& (0+255),w,b
 11433  001CF8  219C               	addwfc	(put_fat@fs+1)& (0+255),w,b
 11434  001CFA  6FB6               	movwf	(put_fat@p+1)& (0+255),b
 11435                           
 11436                           ; BSR set to: 0
 11437  001CFC  4BB7               	infsnz	put_fat@bc& (0+255),f,b
 11438  001CFE  2BB8               	incf	(put_fat@bc+1)& (0+255),f,b
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;ff.c: 1227: *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 11442  001D00  B19D               	btfsc	put_fat@clst& (0+255),0,b
 11443  001D02  D004               	goto	l1068
 11444                           
 11445                           ; BSR set to: 0
 11446  001D04  C0A1  F0B1         	movff	put_fat@val,_put_fat$2462
 11447  001D08  6BB2               	clrf	(_put_fat$2462+1)& (0+255),b
 11448  001D0A  D01A               	goto	l1070
 11449  001D0C                     l1068:
 11450                           
 11451                           ; BSR set to: 0
 11452                           
 11453                           ; BSR set to: 0
 11454  001D0C  51A1               	movf	put_fat@val& (0+255),w,b
 11455  001D0E  6FA5               	movwf	??_put_fat& (0+255),b
 11456  001D10  6BA6               	clrf	(??_put_fat+1)& (0+255),b
 11457  001D12  3BA5               	swapf	??_put_fat& (0+255),f,b
 11458  001D14  3BA6               	swapf	(??_put_fat+1)& (0+255),f,b
 11459  001D16  0EF0               	movlw	240
 11460  001D18  17A6               	andwf	(??_put_fat+1)& (0+255),f,b
 11461  001D1A  51A5               	movf	??_put_fat& (0+255),w,b
 11462  001D1C  0B0F               	andlw	15
 11463  001D1E  13A6               	iorwf	(??_put_fat+1)& (0+255),f,b
 11464  001D20  0EF0               	movlw	240
 11465  001D22  17A5               	andwf	??_put_fat& (0+255),f,b
 11466  001D24  C0B5  FFD9         	movff	put_fat@p,fsr2l
 11467  001D28  C0B6  FFDA         	movff	put_fat@p+1,fsr2h
 11468  001D2C  50DF               	movf	indf2,w,c
 11469  001D2E  0B0F               	andlw	15
 11470  001D30  6FA7               	movwf	(??_put_fat+2)& (0+255),b
 11471  001D32  6BA8               	clrf	(??_put_fat+3)& (0+255),b
 11472  001D34  51A5               	movf	??_put_fat& (0+255),w,b
 11473  001D36  11A7               	iorwf	(??_put_fat+2)& (0+255),w,b
 11474  001D38  6FB1               	movwf	_put_fat$2462& (0+255),b
 11475  001D3A  51A6               	movf	(??_put_fat+1)& (0+255),w,b
 11476  001D3C  11A8               	iorwf	(??_put_fat+3)& (0+255),w,b
 11477  001D3E  6FB2               	movwf	(_put_fat$2462+1)& (0+255),b
 11478  001D40                     l1070:
 11479                           
 11480                           ; BSR set to: 0
 11481                           
 11482                           ; BSR set to: 0
 11483  001D40  C0B5  FFD9         	movff	put_fat@p,fsr2l
 11484  001D44  C0B6  FFDA         	movff	put_fat@p+1,fsr2h
 11485  001D48  C0B1  FFDF         	movff	_put_fat$2462,indf2
 11486                           
 11487                           ; BSR set to: 0
 11488                           ;ff.c: 1228: fs->wflag = 1;
 11489  001D4C  EE20 F003          	lfsr	2,3
 11490  001D50  519B               	movf	put_fat@fs& (0+255),w,b
 11491  001D52  26D9               	addwf	fsr2l,f,c
 11492  001D54  519C               	movf	(put_fat@fs+1)& (0+255),w,b
 11493  001D56  22DA               	addwfc	fsr2h,f,c
 11494  001D58  0E01               	movlw	1
 11495  001D5A  6EDF               	movwf	indf2,c
 11496                           
 11497                           ; BSR set to: 0
 11498                           ;ff.c: 1229: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11499  001D5C  C09B  F090         	movff	put_fat@fs,move_window@fs
 11500  001D60  C09C  F091         	movff	put_fat@fs+1,move_window@fs+1
 11501  001D64  EE20 F01F          	lfsr	2,31
 11502  001D68  519B               	movf	put_fat@fs& (0+255),w,b
 11503  001D6A  26D9               	addwf	fsr2l,f,c
 11504  001D6C  519C               	movf	(put_fat@fs+1)& (0+255),w,b
 11505  001D6E  22DA               	addwfc	fsr2h,f,c
 11506  001D70  CFDE F0A5          	movff	postinc2,??_put_fat
 11507  001D74  CFDE F0A6          	movff	postinc2,??_put_fat+1
 11508  001D78  CFDE F0A7          	movff	postinc2,??_put_fat+2
 11509  001D7C  CFDE F0A8          	movff	postinc2,??_put_fat+3
 11510  001D80  C0B7  F0A9         	movff	put_fat@bc,??_put_fat+4
 11511  001D84  C0B8  F0AA         	movff	put_fat@bc+1,??_put_fat+5
 11512  001D88  0E09               	movlw	9
 11513  001D8A  6FAB               	movwf	(??_put_fat+6)& (0+255),b
 11514  001D8C                     u16805:
 11515  001D8C  90D8               	bcf	status,0,c
 11516  001D8E  33AA               	rrcf	(??_put_fat+5)& (0+255),f,b
 11517  001D90  33A9               	rrcf	(??_put_fat+4)& (0+255),f,b
 11518  001D92  2FAB               	decfsz	(??_put_fat+6)& (0+255),f,b
 11519  001D94  D7FB               	goto	u16805
 11520  001D96  51A9               	movf	(??_put_fat+4)& (0+255),w,b
 11521  001D98  25A5               	addwf	??_put_fat& (0+255),w,b
 11522  001D9A  6F92               	movwf	move_window@sect& (0+255),b
 11523  001D9C  51AA               	movf	(??_put_fat+5)& (0+255),w,b
 11524  001D9E  21A6               	addwfc	(??_put_fat+1)& (0+255),w,b
 11525  001DA0  6F93               	movwf	(move_window@sect+1)& (0+255),b
 11526  001DA2  0E00               	movlw	0
 11527  001DA4  21A7               	addwfc	(??_put_fat+2)& (0+255),w,b
 11528  001DA6  6F94               	movwf	(move_window@sect+2)& (0+255),b
 11529  001DA8  0E00               	movlw	0
 11530  001DAA  21A8               	addwfc	(??_put_fat+3)& (0+255),w,b
 11531  001DAC  6F95               	movwf	(move_window@sect+3)& (0+255),b
 11532  001DAE  EC09  F026         	call	_move_window	;wreg free
 11533  001DB2  0100               	movlb	0	; () banked
 11534  001DB4  6FB9               	movwf	put_fat@res& (0+255),b
 11535                           
 11536                           ; BSR set to: 0
 11537                           ;ff.c: 1230: if (res != FR_OK) break;
 11538  001DB6  51B9               	movf	put_fat@res& (0+255),w,b
 11539  001DB8  A4D8               	btfss	status,2,c
 11540  001DBA  D15A               	goto	l1066
 11541                           
 11542                           ; BSR set to: 0
 11543                           ;ff.c: 1231: p = fs->win + bc % ((UINT)512);
 11544                           
 11545                           ; BSR set to: 0
 11546                           
 11547                           ; BSR set to: 0
 11548  001DBC  0EFF               	movlw	255
 11549  001DBE  6FA5               	movwf	??_put_fat& (0+255),b
 11550  001DC0  0E01               	movlw	1
 11551  001DC2  6FA6               	movwf	(??_put_fat+1)& (0+255),b
 11552  001DC4  C0B7  F0A7         	movff	put_fat@bc,??_put_fat+2
 11553  001DC8  C0B8  F0A8         	movff	put_fat@bc+1,??_put_fat+3
 11554  001DCC  51A5               	movf	??_put_fat& (0+255),w,b
 11555  001DCE  17A7               	andwf	(??_put_fat+2)& (0+255),f,b
 11556  001DD0  51A6               	movf	(??_put_fat+1)& (0+255),w,b
 11557  001DD2  17A8               	andwf	(??_put_fat+3)& (0+255),f,b
 11558  001DD4  0E2F               	movlw	47
 11559  001DD6  27A7               	addwf	(??_put_fat+2)& (0+255),f,b
 11560  001DD8  0E00               	movlw	0
 11561  001DDA  23A8               	addwfc	(??_put_fat+3)& (0+255),f,b
 11562  001DDC  51A7               	movf	(??_put_fat+2)& (0+255),w,b
 11563  001DDE  259B               	addwf	put_fat@fs& (0+255),w,b
 11564  001DE0  6FB5               	movwf	put_fat@p& (0+255),b
 11565  001DE2  51A8               	movf	(??_put_fat+3)& (0+255),w,b
 11566  001DE4  219C               	addwfc	(put_fat@fs+1)& (0+255),w,b
 11567  001DE6  6FB6               	movwf	(put_fat@p+1)& (0+255),b
 11568                           
 11569                           ; BSR set to: 0
 11570                           ;ff.c: 1232: *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0
      +                          F));
 11571  001DE8  B19D               	btfsc	put_fat@clst& (0+255),0,b
 11572  001DEA  D01B               	goto	l1073
 11573                           
 11574                           ; BSR set to: 0
 11575  001DEC  C0A1  F0A5         	movff	put_fat@val,??_put_fat
 11576  001DF0  C0A2  F0A6         	movff	put_fat@val+1,??_put_fat+1
 11577  001DF4  C0A3  F0A7         	movff	put_fat@val+2,??_put_fat+2
 11578  001DF8  C0A4  F0A8         	movff	put_fat@val+3,??_put_fat+3
 11579  001DFC  C0A6  F0A5         	movff	??_put_fat+1,??_put_fat
 11580  001E00  C0A7  F0A6         	movff	??_put_fat+2,??_put_fat+1
 11581  001E04  C0A8  F0A7         	movff	??_put_fat+3,??_put_fat+2
 11582  001E08  6BA8               	clrf	(??_put_fat+3)& (0+255),b
 11583  001E0A  0E0F               	movlw	15
 11584  001E0C  17A5               	andwf	??_put_fat& (0+255),f,b
 11585  001E0E  C0B5  FFD9         	movff	put_fat@p,fsr2l
 11586  001E12  C0B6  FFDA         	movff	put_fat@p+1,fsr2h
 11587  001E16  50DF               	movf	indf2,w,c
 11588  001E18  0BF0               	andlw	240
 11589  001E1A  11A5               	iorwf	??_put_fat& (0+255),w,b
 11590  001E1C  6FA9               	movwf	(??_put_fat+4)& (0+255),b
 11591  001E1E  51A9               	movf	(??_put_fat+4)& (0+255),w,b
 11592  001E20  D012               	goto	L13
 11593  001E22                     l1073:
 11594                           
 11595                           ; BSR set to: 0
 11596                           
 11597                           ; BSR set to: 0
 11598  001E22  C0A1  F0A5         	movff	put_fat@val,??_put_fat
 11599  001E26  C0A2  F0A6         	movff	put_fat@val+1,??_put_fat+1
 11600  001E2A  C0A3  F0A7         	movff	put_fat@val+2,??_put_fat+2
 11601  001E2E  C0A4  F0A8         	movff	put_fat@val+3,??_put_fat+3
 11602  001E32  0E05               	movlw	5
 11603  001E34  D005               	goto	u16830
 11604  001E36                     u16835:
 11605  001E36  90D8               	bcf	status,0,c
 11606  001E38  33A8               	rrcf	(??_put_fat+3)& (0+255),f,b
 11607  001E3A  33A7               	rrcf	(??_put_fat+2)& (0+255),f,b
 11608  001E3C  33A6               	rrcf	(??_put_fat+1)& (0+255),f,b
 11609  001E3E  33A5               	rrcf	??_put_fat& (0+255),f,b
 11610  001E40                     u16830:
 11611  001E40  2EE8               	decfsz	wreg,f,c
 11612  001E42  D7F9               	goto	u16835
 11613  001E44  51A5               	movf	??_put_fat& (0+255),w,b
 11614  001E46                     L13:
 11615  001E46  6FB3               	movwf	_put_fat$2463& (0+255),b
 11616  001E48  6BB4               	clrf	(_put_fat$2463+1)& (0+255),b
 11617                           
 11618                           ; BSR set to: 0
 11619                           
 11620                           ; BSR set to: 0
 11621  001E4A  C0B5  FFD9         	movff	put_fat@p,fsr2l
 11622  001E4E  C0B6  FFDA         	movff	put_fat@p+1,fsr2h
 11623  001E52  C0B3  FFDF         	movff	_put_fat$2463,indf2
 11624  001E56  D054               	goto	L14
 11625  001E58                     
 11626                           ; BSR set to: 0
 11627                           ;ff.c: 1237: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 11628                           
 11629                           ; BSR set to: 0
 11630  001E58  C09B  F090         	movff	put_fat@fs,move_window@fs
 11631  001E5C  C09C  F091         	movff	put_fat@fs+1,move_window@fs+1
 11632  001E60  EE20 F01F          	lfsr	2,31
 11633  001E64  519B               	movf	put_fat@fs& (0+255),w,b
 11634  001E66  26D9               	addwf	fsr2l,f,c
 11635  001E68  519C               	movf	(put_fat@fs+1)& (0+255),w,b
 11636  001E6A  22DA               	addwfc	fsr2h,f,c
 11637  001E6C  CFDE F0A5          	movff	postinc2,??_put_fat
 11638  001E70  CFDE F0A6          	movff	postinc2,??_put_fat+1
 11639  001E74  CFDE F0A7          	movff	postinc2,??_put_fat+2
 11640  001E78  CFDE F0A8          	movff	postinc2,??_put_fat+3
 11641  001E7C  C09D  F0A9         	movff	put_fat@clst,??_put_fat+4
 11642  001E80  C09E  F0AA         	movff	put_fat@clst+1,??_put_fat+5
 11643  001E84  C09F  F0AB         	movff	put_fat@clst+2,??_put_fat+6
 11644  001E88  C0A0  F0AC         	movff	put_fat@clst+3,??_put_fat+7
 11645  001E8C  C0AA  F0A9         	movff	??_put_fat+5,??_put_fat+4
 11646  001E90  C0AB  F0AA         	movff	??_put_fat+6,??_put_fat+5
 11647  001E94  C0AC  F0AB         	movff	??_put_fat+7,??_put_fat+6
 11648  001E98  6BAC               	clrf	(??_put_fat+7)& (0+255),b
 11649  001E9A  51A5               	movf	??_put_fat& (0+255),w,b
 11650  001E9C  25A9               	addwf	(??_put_fat+4)& (0+255),w,b
 11651  001E9E  6F92               	movwf	move_window@sect& (0+255),b
 11652  001EA0  51A6               	movf	(??_put_fat+1)& (0+255),w,b
 11653  001EA2  21AA               	addwfc	(??_put_fat+5)& (0+255),w,b
 11654  001EA4  6F93               	movwf	(move_window@sect+1)& (0+255),b
 11655  001EA6  51A7               	movf	(??_put_fat+2)& (0+255),w,b
 11656  001EA8  21AB               	addwfc	(??_put_fat+6)& (0+255),w,b
 11657  001EAA  6F94               	movwf	(move_window@sect+2)& (0+255),b
 11658  001EAC  51A8               	movf	(??_put_fat+3)& (0+255),w,b
 11659  001EAE  21AC               	addwfc	(??_put_fat+7)& (0+255),w,b
 11660  001EB0  6F95               	movwf	(move_window@sect+3)& (0+255),b
 11661  001EB2  EC09  F026         	call	_move_window	;wreg free
 11662  001EB6  0100               	movlb	0	; () banked
 11663  001EB8  6FB9               	movwf	put_fat@res& (0+255),b
 11664                           
 11665                           ; BSR set to: 0
 11666                           ;ff.c: 1238: if (res != FR_OK) break;
 11667  001EBA  51B9               	movf	put_fat@res& (0+255),w,b
 11668  001EBC  A4D8               	btfss	status,2,c
 11669  001EBE  D0D8               	goto	l1066
 11670                           
 11671                           ; BSR set to: 0
 11672                           ;ff.c: 1239: st_word(fs->win + clst * 2 % ((UINT)512), (WORD)val);
 11673                           
 11674                           ; BSR set to: 0
 11675                           
 11676                           ; BSR set to: 0
 11677  001EC0  0EFF               	movlw	255
 11678  001EC2  6FA5               	movwf	??_put_fat& (0+255),b
 11679  001EC4  0E01               	movlw	1
 11680  001EC6  6FA6               	movwf	(??_put_fat+1)& (0+255),b
 11681  001EC8  C09D  F0A7         	movff	put_fat@clst,??_put_fat+2
 11682  001ECC  C09E  F0A8         	movff	put_fat@clst+1,??_put_fat+3
 11683  001ED0  90D8               	bcf	status,0,c
 11684  001ED2  37A7               	rlcf	(??_put_fat+2)& (0+255),f,b
 11685  001ED4  37A8               	rlcf	(??_put_fat+3)& (0+255),f,b
 11686  001ED6  51A5               	movf	??_put_fat& (0+255),w,b
 11687  001ED8  17A7               	andwf	(??_put_fat+2)& (0+255),f,b
 11688  001EDA  51A6               	movf	(??_put_fat+1)& (0+255),w,b
 11689  001EDC  17A8               	andwf	(??_put_fat+3)& (0+255),f,b
 11690  001EDE  0E2F               	movlw	47
 11691  001EE0  27A7               	addwf	(??_put_fat+2)& (0+255),f,b
 11692  001EE2  0E00               	movlw	0
 11693  001EE4  23A8               	addwfc	(??_put_fat+3)& (0+255),f,b
 11694  001EE6  51A7               	movf	(??_put_fat+2)& (0+255),w,b
 11695  001EE8  259B               	addwf	put_fat@fs& (0+255),w,b
 11696  001EEA  6E1A               	movwf	st_word@ptr,c
 11697  001EEC  51A8               	movf	(??_put_fat+3)& (0+255),w,b
 11698  001EEE  219C               	addwfc	(put_fat@fs+1)& (0+255),w,b
 11699  001EF0  6E1B               	movwf	st_word@ptr+1,c
 11700  001EF2  C0A1  F01C         	movff	put_fat@val,st_word@val
 11701  001EF6  C0A2  F01D         	movff	put_fat@val+1,st_word@val+1
 11702  001EFA  EC13  F02D         	call	_st_word	;wreg free
 11703  001EFE  D0A8               	goto	l13258
 11704  001F00                     L14:
 11705  001F00  EE20 F003          	lfsr	2,3
 11706  001F04  519B               	movf	put_fat@fs& (0+255),w,b
 11707  001F06  26D9               	addwf	fsr2l,f,c
 11708  001F08  519C               	movf	(put_fat@fs+1)& (0+255),w,b
 11709  001F0A  22DA               	addwfc	fsr2h,f,c
 11710  001F0C  0E01               	movlw	1
 11711  001F0E  6EDF               	movwf	indf2,c
 11712                           
 11713                           ;ff.c: 1241: break;
 11714  001F10  D0AF               	goto	l1066
 11715  001F12                     
 11716                           ; BSR set to: 0
 11717                           ;ff.c: 1247: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 11718                           
 11719                           ; BSR set to: 0
 11720  001F12  C09B  F090         	movff	put_fat@fs,move_window@fs
 11721  001F16  C09C  F091         	movff	put_fat@fs+1,move_window@fs+1
 11722  001F1A  EE20 F01F          	lfsr	2,31
 11723  001F1E  519B               	movf	put_fat@fs& (0+255),w,b
 11724  001F20  26D9               	addwf	fsr2l,f,c
 11725  001F22  519C               	movf	(put_fat@fs+1)& (0+255),w,b
 11726  001F24  22DA               	addwfc	fsr2h,f,c
 11727  001F26  CFDE F0A5          	movff	postinc2,??_put_fat
 11728  001F2A  CFDE F0A6          	movff	postinc2,??_put_fat+1
 11729  001F2E  CFDE F0A7          	movff	postinc2,??_put_fat+2
 11730  001F32  CFDE F0A8          	movff	postinc2,??_put_fat+3
 11731  001F36  C09D  F0A9         	movff	put_fat@clst,??_put_fat+4
 11732  001F3A  C09E  F0AA         	movff	put_fat@clst+1,??_put_fat+5
 11733  001F3E  C09F  F0AB         	movff	put_fat@clst+2,??_put_fat+6
 11734  001F42  C0A0  F0AC         	movff	put_fat@clst+3,??_put_fat+7
 11735  001F46  0E08               	movlw	8
 11736  001F48  D005               	goto	u16850
 11737  001F4A                     u16855:
 11738  001F4A  90D8               	bcf	status,0,c
 11739  001F4C  33AC               	rrcf	(??_put_fat+7)& (0+255),f,b
 11740  001F4E  33AB               	rrcf	(??_put_fat+6)& (0+255),f,b
 11741  001F50  33AA               	rrcf	(??_put_fat+5)& (0+255),f,b
 11742  001F52  33A9               	rrcf	(??_put_fat+4)& (0+255),f,b
 11743  001F54                     u16850:
 11744  001F54  2EE8               	decfsz	wreg,f,c
 11745  001F56  D7F9               	goto	u16855
 11746  001F58  51A5               	movf	??_put_fat& (0+255),w,b
 11747  001F5A  25A9               	addwf	(??_put_fat+4)& (0+255),w,b
 11748  001F5C  6F92               	movwf	move_window@sect& (0+255),b
 11749  001F5E  51A6               	movf	(??_put_fat+1)& (0+255),w,b
 11750  001F60  21AA               	addwfc	(??_put_fat+5)& (0+255),w,b
 11751  001F62  6F93               	movwf	(move_window@sect+1)& (0+255),b
 11752  001F64  51A7               	movf	(??_put_fat+2)& (0+255),w,b
 11753  001F66  21AB               	addwfc	(??_put_fat+6)& (0+255),w,b
 11754  001F68  6F94               	movwf	(move_window@sect+2)& (0+255),b
 11755  001F6A  51A8               	movf	(??_put_fat+3)& (0+255),w,b
 11756  001F6C  21AC               	addwfc	(??_put_fat+7)& (0+255),w,b
 11757  001F6E  6F95               	movwf	(move_window@sect+3)& (0+255),b
 11758  001F70  EC09  F026         	call	_move_window	;wreg free
 11759  001F74  0100               	movlb	0	; () banked
 11760  001F76  6FB9               	movwf	put_fat@res& (0+255),b
 11761                           
 11762                           ; BSR set to: 0
 11763                           ;ff.c: 1248: if (res != FR_OK) break;
 11764  001F78  51B9               	movf	put_fat@res& (0+255),w,b
 11765  001F7A  A4D8               	btfss	status,2,c
 11766  001F7C  D079               	goto	l1066
 11767                           
 11768                           ; BSR set to: 0
 11769                           ;ff.c: 1250: val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % ((UINT)512)) & 0x
      +                          F0000000);
 11770                           
 11771                           ; BSR set to: 0
 11772                           
 11773                           ; BSR set to: 0
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;ff.c: 1249: if (!0 || fs->fs_type != 4) {
 11777                           
 11778                           ; BSR set to: 0
 11779  001F7E  0EFF               	movlw	255
 11780  001F80  6FA5               	movwf	??_put_fat& (0+255),b
 11781  001F82  0E01               	movlw	1
 11782  001F84  6FA6               	movwf	(??_put_fat+1)& (0+255),b
 11783  001F86  C09D  F0A7         	movff	put_fat@clst,??_put_fat+2
 11784  001F8A  C09E  F0A8         	movff	put_fat@clst+1,??_put_fat+3
 11785  001F8E  90D8               	bcf	status,0,c
 11786  001F90  37A7               	rlcf	(??_put_fat+2)& (0+255),f,b
 11787  001F92  37A8               	rlcf	(??_put_fat+3)& (0+255),f,b
 11788  001F94  90D8               	bcf	status,0,c
 11789  001F96  37A7               	rlcf	(??_put_fat+2)& (0+255),f,b
 11790  001F98  37A8               	rlcf	(??_put_fat+3)& (0+255),f,b
 11791  001F9A  51A5               	movf	??_put_fat& (0+255),w,b
 11792  001F9C  17A7               	andwf	(??_put_fat+2)& (0+255),f,b
 11793  001F9E  51A6               	movf	(??_put_fat+1)& (0+255),w,b
 11794  001FA0  17A8               	andwf	(??_put_fat+3)& (0+255),f,b
 11795  001FA2  0E2F               	movlw	47
 11796  001FA4  27A7               	addwf	(??_put_fat+2)& (0+255),f,b
 11797  001FA6  0E00               	movlw	0
 11798  001FA8  23A8               	addwfc	(??_put_fat+3)& (0+255),f,b
 11799  001FAA  51A7               	movf	(??_put_fat+2)& (0+255),w,b
 11800  001FAC  259B               	addwf	put_fat@fs& (0+255),w,b
 11801  001FAE  6E1A               	movwf	ld_dword@ptr,c
 11802  001FB0  51A8               	movf	(??_put_fat+3)& (0+255),w,b
 11803  001FB2  219C               	addwfc	(put_fat@fs+1)& (0+255),w,b
 11804  001FB4  6E1B               	movwf	ld_dword@ptr+1,c
 11805  001FB6  EC54  F025         	call	_ld_dword	;wreg free
 11806  001FBA  0E00               	movlw	0
 11807  001FBC  141A               	andwf	?_ld_dword,w,c
 11808  001FBE  0100               	movlb	0	; () banked
 11809  001FC0  6FA9               	movwf	(??_put_fat+4)& (0+255),b
 11810  001FC2  0E00               	movlw	0
 11811  001FC4  141B               	andwf	?_ld_dword+1,w,c
 11812  001FC6  6FAA               	movwf	(??_put_fat+5)& (0+255),b
 11813  001FC8  0E00               	movlw	0
 11814  001FCA  141C               	andwf	?_ld_dword+2,w,c
 11815  001FCC  6FAB               	movwf	(??_put_fat+6)& (0+255),b
 11816  001FCE  0EF0               	movlw	240
 11817  001FD0  141D               	andwf	?_ld_dword+3,w,c
 11818  001FD2  6FAC               	movwf	(??_put_fat+7)& (0+255),b
 11819  001FD4  0EFF               	movlw	255
 11820  001FD6  15A1               	andwf	put_fat@val& (0+255),w,b
 11821  001FD8  6FAD               	movwf	(??_put_fat+8)& (0+255),b
 11822  001FDA  0EFF               	movlw	255
 11823  001FDC  15A2               	andwf	(put_fat@val+1)& (0+255),w,b
 11824  001FDE  6FAE               	movwf	(??_put_fat+9)& (0+255),b
 11825  001FE0  0EFF               	movlw	255
 11826  001FE2  15A3               	andwf	(put_fat@val+2)& (0+255),w,b
 11827  001FE4  6FAF               	movwf	(??_put_fat+10)& (0+255),b
 11828  001FE6  0E0F               	movlw	15
 11829  001FE8  15A4               	andwf	(put_fat@val+3)& (0+255),w,b
 11830  001FEA  6FB0               	movwf	(??_put_fat+11)& (0+255),b
 11831  001FEC  51A9               	movf	(??_put_fat+4)& (0+255),w,b
 11832  001FEE  11AD               	iorwf	(??_put_fat+8)& (0+255),w,b
 11833  001FF0  6FA1               	movwf	put_fat@val& (0+255),b
 11834  001FF2  51AA               	movf	(??_put_fat+5)& (0+255),w,b
 11835  001FF4  11AE               	iorwf	(??_put_fat+9)& (0+255),w,b
 11836  001FF6  6FA2               	movwf	(put_fat@val+1)& (0+255),b
 11837  001FF8  51AB               	movf	(??_put_fat+6)& (0+255),w,b
 11838  001FFA  11AF               	iorwf	(??_put_fat+10)& (0+255),w,b
 11839  001FFC  6FA3               	movwf	(put_fat@val+2)& (0+255),b
 11840  001FFE  51AC               	movf	(??_put_fat+7)& (0+255),w,b
 11841  002000  11B0               	iorwf	(??_put_fat+11)& (0+255),w,b
 11842  002002  6FA4               	movwf	(put_fat@val+3)& (0+255),b
 11843                           
 11844                           ; BSR set to: 0
 11845                           ;ff.c: 1251: }
 11846                           ;ff.c: 1252: st_dword(fs->win + clst * 4 % ((UINT)512), val);
 11847  002004  0EFF               	movlw	255
 11848  002006  6FA5               	movwf	??_put_fat& (0+255),b
 11849  002008  0E01               	movlw	1
 11850  00200A  6FA6               	movwf	(??_put_fat+1)& (0+255),b
 11851  00200C  C09D  F0A7         	movff	put_fat@clst,??_put_fat+2
 11852  002010  C09E  F0A8         	movff	put_fat@clst+1,??_put_fat+3
 11853  002014  90D8               	bcf	status,0,c
 11854  002016  37A7               	rlcf	(??_put_fat+2)& (0+255),f,b
 11855  002018  37A8               	rlcf	(??_put_fat+3)& (0+255),f,b
 11856  00201A  90D8               	bcf	status,0,c
 11857  00201C  37A7               	rlcf	(??_put_fat+2)& (0+255),f,b
 11858  00201E  37A8               	rlcf	(??_put_fat+3)& (0+255),f,b
 11859  002020  51A5               	movf	??_put_fat& (0+255),w,b
 11860  002022  17A7               	andwf	(??_put_fat+2)& (0+255),f,b
 11861  002024  51A6               	movf	(??_put_fat+1)& (0+255),w,b
 11862  002026  17A8               	andwf	(??_put_fat+3)& (0+255),f,b
 11863  002028  0E2F               	movlw	47
 11864  00202A  27A7               	addwf	(??_put_fat+2)& (0+255),f,b
 11865  00202C  0E00               	movlw	0
 11866  00202E  23A8               	addwfc	(??_put_fat+3)& (0+255),f,b
 11867  002030  51A7               	movf	(??_put_fat+2)& (0+255),w,b
 11868  002032  259B               	addwf	put_fat@fs& (0+255),w,b
 11869  002034  6E1A               	movwf	st_dword@ptr,c
 11870  002036  51A8               	movf	(??_put_fat+3)& (0+255),w,b
 11871  002038  219C               	addwfc	(put_fat@fs+1)& (0+255),w,b
 11872  00203A  6E1B               	movwf	st_dword@ptr+1,c
 11873  00203C  C0A1  F01C         	movff	put_fat@val,st_dword@val
 11874  002040  C0A2  F01D         	movff	put_fat@val+1,st_dword@val+1
 11875  002044  C0A3  F01E         	movff	put_fat@val+2,st_dword@val+2
 11876  002048  C0A4  F01F         	movff	put_fat@val+3,st_dword@val+3
 11877  00204C  EC9C  F029         	call	_st_dword	;wreg free
 11878  002050                     l13258:
 11879                           
 11880                           ;ff.c: 1253: fs->wflag = 1;
 11881  002050  0100               	movlb	0	; () banked
 11882  002052  D756               	goto	L14
 11883  002054                     l1063:
 11884                           
 11885                           ; BSR set to: 0
 11886                           
 11887                           ; BSR set to: 0
 11888  002054  C09B  FFD9         	movff	put_fat@fs,fsr2l
 11889  002058  C09C  FFDA         	movff	put_fat@fs+1,fsr2h
 11890  00205C  50DF               	movf	indf2,w,c
 11891                           
 11892                           ; Switch size 1, requested type "space"
 11893                           ; Number of cases is 3, Range of values is 1 to 3
 11894                           ; switch strategies available:
 11895                           ; Name         Instructions Cycles
 11896                           ; simple_byte           10     6 (average)
 11897                           ;	Chosen strategy is simple_byte
 11898  00205E  0A01               	xorlw	1	; case 1
 11899  002060  B4D8               	btfsc	status,2,c
 11900  002062  D5F9               	goto	l1064
 11901  002064  0A03               	xorlw	3	; case 2
 11902  002066  B4D8               	btfsc	status,2,c
 11903  002068  D6F7               	goto	l1076
 11904  00206A  0A01               	xorlw	1	; case 3
 11905  00206C  B4D8               	btfsc	status,2,c
 11906  00206E  D751               	goto	l1078
 11907  002070                     l1066:
 11908                           
 11909                           ; BSR set to: 0
 11910                           ;ff.c: 1256: }
 11911                           ;ff.c: 1257: return res;
 11912                           
 11913                           ; BSR set to: 0
 11914                           
 11915                           ; BSR set to: 0
 11916  002070  51B9               	movf	put_fat@res& (0+255),w,b
 11917  002072  0012               	return	
 11918  002074                     __end_of_put_fat:
 11919                           	opt stack 0
 11920                           tosu	equ	0xFFF
 11921                           tosh	equ	0xFFE
 11922                           tosl	equ	0xFFD
 11923                           pclath	equ	0xFFA
 11924                           tblptru	equ	0xFF8
 11925                           tblptrh	equ	0xFF7
 11926                           tblptrl	equ	0xFF6
 11927                           tablat	equ	0xFF5
 11928                           prodh	equ	0xFF4
 11929                           prodl	equ	0xFF3
 11930                           intcon	equ	0xFF2
 11931                           intcon2	equ	0xFF1
 11932                           intcon3	equ	0xFF0
 11933                           indf0	equ	0xFEF
 11934                           postinc0	equ	0xFEE
 11935                           fsr0h	equ	0xFEA
 11936                           fsr0l	equ	0xFE9
 11937                           wreg	equ	0xFE8
 11938                           indf1	equ	0xFE7
 11939                           postinc1	equ	0xFE6
 11940                           postdec1	equ	0xFE5
 11941                           fsr1h	equ	0xFE2
 11942                           fsr1l	equ	0xFE1
 11943                           indf2	equ	0xFDF
 11944                           postinc2	equ	0xFDE
 11945                           postdec2	equ	0xFDD
 11946                           plusw2	equ	0xFDB
 11947                           fsr2h	equ	0xFDA
 11948                           fsr2l	equ	0xFD9
 11949                           status	equ	0xFD8
 11950                           
 11951 ;; *************** function _get_fat *****************
 11952 ;; Defined at:
 11953 ;;		line 1131 in file "bibliotecas/ff.c"
 11954 ;; Parameters:    Size  Location     Type
 11955 ;;  obj             2   59[BANK0 ] PTR struct .
 11956 ;;		 -> f_rename@djn(40), f_rename@djo(40), f_mkdir@sobj(14), f_mkdir@dj(40), 
 11957 ;;		 -> f_unlink@sdj(40), f_unlink@dj(40), f_getfree@obj(14), f_stat@dj(40), 
 11958 ;;		 -> f_open@dj(40), SDCard@fil(34), 
 11959 ;;  clst            4   61[BANK0 ] unsigned long 
 11960 ;; Auto vars:     Size  Location     Type
 11961 ;;  val             4   77[BANK0 ] unsigned long 
 11962 ;;  fs              2   83[BANK0 ] PTR struct .
 11963 ;;		 -> NULL(0), fs(559), 
 11964 ;;  bc              2   81[BANK0 ] unsigned int 
 11965 ;;  wc              2   75[BANK0 ] unsigned int 
 11966 ;; Return value:  Size  Location     Type
 11967 ;;                  4   59[BANK0 ] unsigned long 
 11968 ;; Registers used:
 11969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11970 ;; Tracked objects:
 11971 ;;		On entry : 0/0
 11972 ;;		On exit  : 0/0
 11973 ;;		Unchanged: 0/0
 11974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11975 ;;      Params:         0       6       0       0       0       0       0       0       0
 11976 ;;      Locals:         0      12       0       0       0       0       0       0       0
 11977 ;;      Temps:          0       8       0       0       0       0       0       0       0
 11978 ;;      Totals:         0      26       0       0       0       0       0       0       0
 11979 ;;Total ram usage:       26 bytes
 11980 ;; Hardware stack levels used:    1
 11981 ;; Hardware stack levels required when called:    9
 11982 ;; This function calls:
 11983 ;;		_ld_dword
 11984 ;;		_ld_word
 11985 ;;		_move_window
 11986 ;; This function is called by:
 11987 ;;		_remove_chain
 11988 ;;		_create_chain
 11989 ;;		_dir_sdi
 11990 ;;		_dir_next
 11991 ;;		_f_open
 11992 ;;		_f_read
 11993 ;;		_f_lseek
 11994 ;;		_f_getfree
 11995 ;;		_f_truncate
 11996 ;; This function uses a non-reentrant model
 11997 ;;
 11998                           
 11999                           	psect	text34
 12000  00242E                     __ptext34:
 12001                           	opt stack 0
 12002  00242E                     _get_fat:
 12003                           	opt stack 17
 12004                           
 12005                           ;ff.c: 1136: UINT wc, bc;
 12006                           ;ff.c: 1137: DWORD val;
 12007                           ;ff.c: 1138: FATFS *fs = obj->fs;
 12008                           
 12009                           ; BSR set to: 0
 12010                           ;incstack = 0
 12011  00242E  C09B  FFD9         	movff	get_fat@obj,fsr2l
 12012  002432  C09C  FFDA         	movff	get_fat@obj+1,fsr2h
 12013  002436  CFDE F0B3          	movff	postinc2,get_fat@fs
 12014  00243A  CFDD F0B4          	movff	postdec2,get_fat@fs+1
 12015                           
 12016                           ;ff.c: 1141: if (clst < 2 || clst >= fs->n_fatent) {
 12017  00243E  0100               	movlb	0	; () banked
 12018  002440  51A0               	movf	(get_fat@clst+3)& (0+255),w,b
 12019  002442  119F               	iorwf	(get_fat@clst+2)& (0+255),w,b
 12020  002444  119E               	iorwf	(get_fat@clst+1)& (0+255),w,b
 12021  002446  E104               	bnz	u16640
 12022  002448  0E02               	movlw	2
 12023  00244A  5D9D               	subwf	get_fat@clst& (0+255),w,b
 12024  00244C  A0D8               	btfss	status,0,c
 12025  00244E  D18F               	goto	l1058
 12026  002450                     u16640:
 12027                           
 12028                           ; BSR set to: 0
 12029  002450  EE20 F013          	lfsr	2,19
 12030  002454  51B3               	movf	get_fat@fs& (0+255),w,b
 12031  002456  26D9               	addwf	fsr2l,f,c
 12032  002458  51B4               	movf	(get_fat@fs+1)& (0+255),w,b
 12033  00245A  22DA               	addwfc	fsr2h,f,c
 12034  00245C  50DE               	movf	postinc2,w,c
 12035  00245E  5D9D               	subwf	get_fat@clst& (0+255),w,b
 12036  002460  50DE               	movf	postinc2,w,c
 12037  002462  599E               	subwfb	(get_fat@clst+1)& (0+255),w,b
 12038  002464  50DE               	movf	postinc2,w,c
 12039  002466  599F               	subwfb	(get_fat@clst+2)& (0+255),w,b
 12040  002468  50DE               	movf	postinc2,w,c
 12041  00246A  59A0               	subwfb	(get_fat@clst+3)& (0+255),w,b
 12042  00246C  B0D8               	btfsc	status,0,c
 12043                           
 12044                           ; BSR set to: 0
 12045  00246E  D17F               	goto	l1058
 12046                           
 12047                           ; BSR set to: 0
 12048                           ;ff.c: 1145: val = 0xFFFFFFFF;
 12049                           
 12050                           ;ff.c: 1144: } else {
 12051                           
 12052                           ; BSR set to: 0
 12053                           ;ff.c: 1142: val = 1;
 12054  002470  69AD               	setf	get_fat@val& (0+255),b
 12055  002472  69AE               	setf	(get_fat@val+1)& (0+255),b
 12056  002474  69AF               	setf	(get_fat@val+2)& (0+255),b
 12057  002476  69B0               	setf	(get_fat@val+3)& (0+255),b
 12058                           
 12059                           ;ff.c: 1147: switch (fs->fs_type) {
 12060  002478  D183               	goto	l1045
 12061  00247A                     l1046:
 12062                           
 12063                           ; BSR set to: 0
 12064                           ;ff.c: 1149: bc = (UINT)clst; bc += bc / 2;
 12065  00247A  C09D  F0B1         	movff	get_fat@clst,get_fat@bc
 12066  00247E  C09E  F0B2         	movff	get_fat@clst+1,get_fat@bc+1
 12067                           
 12068                           ; BSR set to: 0
 12069  002482  90D8               	bcf	status,0,c
 12070  002484  31B2               	rrcf	(get_fat@bc+1)& (0+255),w,b
 12071  002486  6FA2               	movwf	(??_get_fat+1)& (0+255),b
 12072  002488  31B1               	rrcf	get_fat@bc& (0+255),w,b
 12073  00248A  6FA1               	movwf	??_get_fat& (0+255),b
 12074  00248C  51A1               	movf	??_get_fat& (0+255),w,b
 12075  00248E  27B1               	addwf	get_fat@bc& (0+255),f,b
 12076  002490  51A2               	movf	(??_get_fat+1)& (0+255),w,b
 12077  002492  23B2               	addwfc	(get_fat@bc+1)& (0+255),f,b
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;ff.c: 1150: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 12081  002494  C0B3  F090         	movff	get_fat@fs,move_window@fs
 12082  002498  C0B4  F091         	movff	get_fat@fs+1,move_window@fs+1
 12083  00249C  EE20 F01F          	lfsr	2,31
 12084  0024A0  51B3               	movf	get_fat@fs& (0+255),w,b
 12085  0024A2  26D9               	addwf	fsr2l,f,c
 12086  0024A4  51B4               	movf	(get_fat@fs+1)& (0+255),w,b
 12087  0024A6  22DA               	addwfc	fsr2h,f,c
 12088  0024A8  CFDE F0A1          	movff	postinc2,??_get_fat
 12089  0024AC  CFDE F0A2          	movff	postinc2,??_get_fat+1
 12090  0024B0  CFDE F0A3          	movff	postinc2,??_get_fat+2
 12091  0024B4  CFDE F0A4          	movff	postinc2,??_get_fat+3
 12092  0024B8  C0B1  F0A5         	movff	get_fat@bc,??_get_fat+4
 12093  0024BC  C0B2  F0A6         	movff	get_fat@bc+1,??_get_fat+5
 12094  0024C0  0E09               	movlw	9
 12095  0024C2  6FA7               	movwf	(??_get_fat+6)& (0+255),b
 12096  0024C4                     u16665:
 12097  0024C4  90D8               	bcf	status,0,c
 12098  0024C6  33A6               	rrcf	(??_get_fat+5)& (0+255),f,b
 12099  0024C8  33A5               	rrcf	(??_get_fat+4)& (0+255),f,b
 12100  0024CA  2FA7               	decfsz	(??_get_fat+6)& (0+255),f,b
 12101  0024CC  D7FB               	goto	u16665
 12102  0024CE  51A5               	movf	(??_get_fat+4)& (0+255),w,b
 12103  0024D0  25A1               	addwf	??_get_fat& (0+255),w,b
 12104  0024D2  6F92               	movwf	move_window@sect& (0+255),b
 12105  0024D4  51A6               	movf	(??_get_fat+5)& (0+255),w,b
 12106  0024D6  21A2               	addwfc	(??_get_fat+1)& (0+255),w,b
 12107  0024D8  6F93               	movwf	(move_window@sect+1)& (0+255),b
 12108  0024DA  0E00               	movlw	0
 12109  0024DC  21A3               	addwfc	(??_get_fat+2)& (0+255),w,b
 12110  0024DE  6F94               	movwf	(move_window@sect+2)& (0+255),b
 12111  0024E0  0E00               	movlw	0
 12112  0024E2  21A4               	addwfc	(??_get_fat+3)& (0+255),w,b
 12113  0024E4  6F95               	movwf	(move_window@sect+3)& (0+255),b
 12114  0024E6  EC09  F026         	call	_move_window	;wreg free
 12115  0024EA  0900               	iorlw	0
 12116  0024EC  A4D8               	btfss	status,2,c
 12117  0024EE  D157               	goto	l1048
 12118                           
 12119                           ;ff.c: 1151: wc = fs->win[bc++ % ((UINT)512)];
 12120  0024F0  0EFF               	movlw	255
 12121  0024F2  0100               	movlb	0	; () banked
 12122  0024F4  6FA1               	movwf	??_get_fat& (0+255),b
 12123  0024F6  0E01               	movlw	1
 12124  0024F8  6FA2               	movwf	(??_get_fat+1)& (0+255),b
 12125  0024FA  C0B1  F0A3         	movff	get_fat@bc,??_get_fat+2
 12126  0024FE  C0B2  F0A4         	movff	get_fat@bc+1,??_get_fat+3
 12127  002502  51A1               	movf	??_get_fat& (0+255),w,b
 12128  002504  17A3               	andwf	(??_get_fat+2)& (0+255),f,b
 12129  002506  51A2               	movf	(??_get_fat+1)& (0+255),w,b
 12130  002508  17A4               	andwf	(??_get_fat+3)& (0+255),f,b
 12131  00250A  0E2F               	movlw	47
 12132  00250C  27A3               	addwf	(??_get_fat+2)& (0+255),f,b
 12133  00250E  0E00               	movlw	0
 12134  002510  23A4               	addwfc	(??_get_fat+3)& (0+255),f,b
 12135  002512  51A3               	movf	(??_get_fat+2)& (0+255),w,b
 12136  002514  25B3               	addwf	get_fat@fs& (0+255),w,b
 12137  002516  6ED9               	movwf	fsr2l,c
 12138  002518  51A4               	movf	(??_get_fat+3)& (0+255),w,b
 12139  00251A  21B4               	addwfc	(get_fat@fs+1)& (0+255),w,b
 12140  00251C  6EDA               	movwf	fsr2h,c
 12141  00251E  50DF               	movf	indf2,w,c
 12142  002520  6FA5               	movwf	(??_get_fat+4)& (0+255),b
 12143  002522  51A5               	movf	(??_get_fat+4)& (0+255),w,b
 12144  002524  6FAB               	movwf	get_fat@wc& (0+255),b
 12145  002526  6BAC               	clrf	(get_fat@wc+1)& (0+255),b
 12146                           
 12147                           ; BSR set to: 0
 12148  002528  4BB1               	infsnz	get_fat@bc& (0+255),f,b
 12149  00252A  2BB2               	incf	(get_fat@bc+1)& (0+255),f,b
 12150                           
 12151                           ; BSR set to: 0
 12152                           ;ff.c: 1152: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 12153  00252C  C0B3  F090         	movff	get_fat@fs,move_window@fs
 12154  002530  C0B4  F091         	movff	get_fat@fs+1,move_window@fs+1
 12155  002534  EE20 F01F          	lfsr	2,31
 12156  002538  51B3               	movf	get_fat@fs& (0+255),w,b
 12157  00253A  26D9               	addwf	fsr2l,f,c
 12158  00253C  51B4               	movf	(get_fat@fs+1)& (0+255),w,b
 12159  00253E  22DA               	addwfc	fsr2h,f,c
 12160  002540  CFDE F0A1          	movff	postinc2,??_get_fat
 12161  002544  CFDE F0A2          	movff	postinc2,??_get_fat+1
 12162  002548  CFDE F0A3          	movff	postinc2,??_get_fat+2
 12163  00254C  CFDE F0A4          	movff	postinc2,??_get_fat+3
 12164  002550  C0B1  F0A5         	movff	get_fat@bc,??_get_fat+4
 12165  002554  C0B2  F0A6         	movff	get_fat@bc+1,??_get_fat+5
 12166  002558  0E09               	movlw	9
 12167  00255A  6FA7               	movwf	(??_get_fat+6)& (0+255),b
 12168  00255C                     u16685:
 12169  00255C  90D8               	bcf	status,0,c
 12170  00255E  33A6               	rrcf	(??_get_fat+5)& (0+255),f,b
 12171  002560  33A5               	rrcf	(??_get_fat+4)& (0+255),f,b
 12172  002562  2FA7               	decfsz	(??_get_fat+6)& (0+255),f,b
 12173  002564  D7FB               	goto	u16685
 12174  002566  51A5               	movf	(??_get_fat+4)& (0+255),w,b
 12175  002568  25A1               	addwf	??_get_fat& (0+255),w,b
 12176  00256A  6F92               	movwf	move_window@sect& (0+255),b
 12177  00256C  51A6               	movf	(??_get_fat+5)& (0+255),w,b
 12178  00256E  21A2               	addwfc	(??_get_fat+1)& (0+255),w,b
 12179  002570  6F93               	movwf	(move_window@sect+1)& (0+255),b
 12180  002572  0E00               	movlw	0
 12181  002574  21A3               	addwfc	(??_get_fat+2)& (0+255),w,b
 12182  002576  6F94               	movwf	(move_window@sect+2)& (0+255),b
 12183  002578  0E00               	movlw	0
 12184  00257A  21A4               	addwfc	(??_get_fat+3)& (0+255),w,b
 12185  00257C  6F95               	movwf	(move_window@sect+3)& (0+255),b
 12186  00257E  EC09  F026         	call	_move_window	;wreg free
 12187  002582  0900               	iorlw	0
 12188  002584  A4D8               	btfss	status,2,c
 12189  002586  D10B               	goto	l1048
 12190                           
 12191                           ;ff.c: 1153: wc |= fs->win[bc % ((UINT)512)] << 8;
 12192  002588  0EFF               	movlw	255
 12193  00258A  0100               	movlb	0	; () banked
 12194  00258C  6FA1               	movwf	??_get_fat& (0+255),b
 12195  00258E  0E01               	movlw	1
 12196  002590  6FA2               	movwf	(??_get_fat+1)& (0+255),b
 12197  002592  C0B1  F0A3         	movff	get_fat@bc,??_get_fat+2
 12198  002596  C0B2  F0A4         	movff	get_fat@bc+1,??_get_fat+3
 12199  00259A  51A1               	movf	??_get_fat& (0+255),w,b
 12200  00259C  17A3               	andwf	(??_get_fat+2)& (0+255),f,b
 12201  00259E  51A2               	movf	(??_get_fat+1)& (0+255),w,b
 12202  0025A0  17A4               	andwf	(??_get_fat+3)& (0+255),f,b
 12203  0025A2  0E2F               	movlw	47
 12204  0025A4  27A3               	addwf	(??_get_fat+2)& (0+255),f,b
 12205  0025A6  0E00               	movlw	0
 12206  0025A8  23A4               	addwfc	(??_get_fat+3)& (0+255),f,b
 12207  0025AA  51A3               	movf	(??_get_fat+2)& (0+255),w,b
 12208  0025AC  25B3               	addwf	get_fat@fs& (0+255),w,b
 12209  0025AE  6ED9               	movwf	fsr2l,c
 12210  0025B0  51A4               	movf	(??_get_fat+3)& (0+255),w,b
 12211  0025B2  21B4               	addwfc	(get_fat@fs+1)& (0+255),w,b
 12212  0025B4  6EDA               	movwf	fsr2h,c
 12213  0025B6  50DF               	movf	indf2,w,c
 12214  0025B8  6FA5               	movwf	(??_get_fat+4)& (0+255),b
 12215  0025BA  51A5               	movf	(??_get_fat+4)& (0+255),w,b
 12216  0025BC  6FA7               	movwf	(??_get_fat+6)& (0+255),b
 12217  0025BE  6BA6               	clrf	(??_get_fat+5)& (0+255),b
 12218  0025C0  51A6               	movf	(??_get_fat+5)& (0+255),w,b
 12219  0025C2  13AB               	iorwf	get_fat@wc& (0+255),f,b
 12220  0025C4  51A7               	movf	(??_get_fat+6)& (0+255),w,b
 12221  0025C6  13AC               	iorwf	(get_fat@wc+1)& (0+255),f,b
 12222                           
 12223                           ; BSR set to: 0
 12224                           ;ff.c: 1154: val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 12225  0025C8  B19D               	btfsc	get_fat@clst& (0+255),0,b
 12226  0025CA  D007               	goto	l1051
 12227                           
 12228                           ; BSR set to: 0
 12229  0025CC  0EFF               	movlw	255
 12230  0025CE  15AB               	andwf	get_fat@wc& (0+255),w,b
 12231  0025D0  6FA9               	movwf	_get_fat$2434& (0+255),b
 12232  0025D2  0E0F               	movlw	15
 12233  0025D4  15AC               	andwf	(get_fat@wc+1)& (0+255),w,b
 12234  0025D6  6FAA               	movwf	(_get_fat$2434+1)& (0+255),b
 12235  0025D8  D00F               	goto	l1053
 12236  0025DA                     l1051:
 12237                           
 12238                           ; BSR set to: 0
 12239                           
 12240                           ; BSR set to: 0
 12241  0025DA  C0AB  F0A1         	movff	get_fat@wc,??_get_fat
 12242  0025DE  C0AC  F0A2         	movff	get_fat@wc+1,??_get_fat+1
 12243  0025E2  0E04               	movlw	4
 12244  0025E4  6FA3               	movwf	(??_get_fat+2)& (0+255),b
 12245  0025E6                     u16715:
 12246  0025E6  90D8               	bcf	status,0,c
 12247  0025E8  33A2               	rrcf	(??_get_fat+1)& (0+255),f,b
 12248  0025EA  33A1               	rrcf	??_get_fat& (0+255),f,b
 12249  0025EC  2FA3               	decfsz	(??_get_fat+2)& (0+255),f,b
 12250  0025EE  D7FB               	goto	u16715
 12251  0025F0  C0A1  F0A9         	movff	??_get_fat,_get_fat$2434
 12252  0025F4  C0A2  F0AA         	movff	??_get_fat+1,_get_fat$2434+1
 12253  0025F8                     l1053:
 12254                           
 12255                           ; BSR set to: 0
 12256                           
 12257                           ; BSR set to: 0
 12258  0025F8  C0A9  F0AD         	movff	_get_fat$2434,get_fat@val
 12259  0025FC  C0AA  F0AE         	movff	_get_fat$2434+1,get_fat@val+1
 12260  002600  D053               	goto	L16
 12261  002602                     
 12262                           ; BSR set to: 0
 12263                           ;ff.c: 1158: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) bre
      +                          ak;
 12264                           
 12265                           ; BSR set to: 0
 12266  002602  C0B3  F090         	movff	get_fat@fs,move_window@fs
 12267  002606  C0B4  F091         	movff	get_fat@fs+1,move_window@fs+1
 12268  00260A  EE20 F01F          	lfsr	2,31
 12269  00260E  51B3               	movf	get_fat@fs& (0+255),w,b
 12270  002610  26D9               	addwf	fsr2l,f,c
 12271  002612  51B4               	movf	(get_fat@fs+1)& (0+255),w,b
 12272  002614  22DA               	addwfc	fsr2h,f,c
 12273  002616  CFDE F0A1          	movff	postinc2,??_get_fat
 12274  00261A  CFDE F0A2          	movff	postinc2,??_get_fat+1
 12275  00261E  CFDE F0A3          	movff	postinc2,??_get_fat+2
 12276  002622  CFDE F0A4          	movff	postinc2,??_get_fat+3
 12277  002626  C09D  F0A5         	movff	get_fat@clst,??_get_fat+4
 12278  00262A  C09E  F0A6         	movff	get_fat@clst+1,??_get_fat+5
 12279  00262E  C09F  F0A7         	movff	get_fat@clst+2,??_get_fat+6
 12280  002632  C0A0  F0A8         	movff	get_fat@clst+3,??_get_fat+7
 12281  002636  C0A6  F0A5         	movff	??_get_fat+5,??_get_fat+4
 12282  00263A  C0A7  F0A6         	movff	??_get_fat+6,??_get_fat+5
 12283  00263E  C0A8  F0A7         	movff	??_get_fat+7,??_get_fat+6
 12284  002642  6BA8               	clrf	(??_get_fat+7)& (0+255),b
 12285  002644  51A1               	movf	??_get_fat& (0+255),w,b
 12286  002646  25A5               	addwf	(??_get_fat+4)& (0+255),w,b
 12287  002648  6F92               	movwf	move_window@sect& (0+255),b
 12288  00264A  51A2               	movf	(??_get_fat+1)& (0+255),w,b
 12289  00264C  21A6               	addwfc	(??_get_fat+5)& (0+255),w,b
 12290  00264E  6F93               	movwf	(move_window@sect+1)& (0+255),b
 12291  002650  51A3               	movf	(??_get_fat+2)& (0+255),w,b
 12292  002652  21A7               	addwfc	(??_get_fat+6)& (0+255),w,b
 12293  002654  6F94               	movwf	(move_window@sect+2)& (0+255),b
 12294  002656  51A4               	movf	(??_get_fat+3)& (0+255),w,b
 12295  002658  21A8               	addwfc	(??_get_fat+7)& (0+255),w,b
 12296  00265A  6F95               	movwf	(move_window@sect+3)& (0+255),b
 12297  00265C  EC09  F026         	call	_move_window	;wreg free
 12298  002660  0900               	iorlw	0
 12299  002662  A4D8               	btfss	status,2,c
 12300  002664  D09C               	goto	l1048
 12301                           
 12302                           ;ff.c: 1159: val = ld_word(fs->win + clst * 2 % ((UINT)512));
 12303  002666  0EFF               	movlw	255
 12304  002668  0100               	movlb	0	; () banked
 12305  00266A  6FA1               	movwf	??_get_fat& (0+255),b
 12306  00266C  0E01               	movlw	1
 12307  00266E  6FA2               	movwf	(??_get_fat+1)& (0+255),b
 12308  002670  C09D  F0A3         	movff	get_fat@clst,??_get_fat+2
 12309  002674  C09E  F0A4         	movff	get_fat@clst+1,??_get_fat+3
 12310  002678  90D8               	bcf	status,0,c
 12311  00267A  37A3               	rlcf	(??_get_fat+2)& (0+255),f,b
 12312  00267C  37A4               	rlcf	(??_get_fat+3)& (0+255),f,b
 12313  00267E  51A1               	movf	??_get_fat& (0+255),w,b
 12314  002680  17A3               	andwf	(??_get_fat+2)& (0+255),f,b
 12315  002682  51A2               	movf	(??_get_fat+1)& (0+255),w,b
 12316  002684  17A4               	andwf	(??_get_fat+3)& (0+255),f,b
 12317  002686  0E2F               	movlw	47
 12318  002688  27A3               	addwf	(??_get_fat+2)& (0+255),f,b
 12319  00268A  0E00               	movlw	0
 12320  00268C  23A4               	addwfc	(??_get_fat+3)& (0+255),f,b
 12321  00268E  51A3               	movf	(??_get_fat+2)& (0+255),w,b
 12322  002690  25B3               	addwf	get_fat@fs& (0+255),w,b
 12323  002692  6E1A               	movwf	ld_word@ptr,c
 12324  002694  51A4               	movf	(??_get_fat+3)& (0+255),w,b
 12325  002696  21B4               	addwfc	(get_fat@fs+1)& (0+255),w,b
 12326  002698  6E1B               	movwf	ld_word@ptr+1,c
 12327  00269A  EC6B  F02C         	call	_ld_word	;wreg free
 12328  00269E  C01A  F0AD         	movff	?_ld_word,get_fat@val
 12329  0026A2  C01B  F0AE         	movff	?_ld_word+1,get_fat@val+1
 12330  0026A6  0100               	movlb	0	; () banked
 12331  0026A8                     L16:
 12332  0026A8  6BAF               	clrf	(get_fat@val+2)& (0+255),b
 12333  0026AA  6BB0               	clrf	(get_fat@val+3)& (0+255),b
 12334                           
 12335                           ;ff.c: 1160: break;
 12336  0026AC  D078               	goto	l1048
 12337  0026AE                     
 12338                           ; BSR set to: 0
 12339                           ;ff.c: 1163: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) bre
      +                          ak;
 12340                           
 12341                           ; BSR set to: 0
 12342  0026AE  C0B3  F090         	movff	get_fat@fs,move_window@fs
 12343  0026B2  C0B4  F091         	movff	get_fat@fs+1,move_window@fs+1
 12344  0026B6  EE20 F01F          	lfsr	2,31
 12345  0026BA  51B3               	movf	get_fat@fs& (0+255),w,b
 12346  0026BC  26D9               	addwf	fsr2l,f,c
 12347  0026BE  51B4               	movf	(get_fat@fs+1)& (0+255),w,b
 12348  0026C0  22DA               	addwfc	fsr2h,f,c
 12349  0026C2  CFDE F0A1          	movff	postinc2,??_get_fat
 12350  0026C6  CFDE F0A2          	movff	postinc2,??_get_fat+1
 12351  0026CA  CFDE F0A3          	movff	postinc2,??_get_fat+2
 12352  0026CE  CFDE F0A4          	movff	postinc2,??_get_fat+3
 12353  0026D2  C09D  F0A5         	movff	get_fat@clst,??_get_fat+4
 12354  0026D6  C09E  F0A6         	movff	get_fat@clst+1,??_get_fat+5
 12355  0026DA  C09F  F0A7         	movff	get_fat@clst+2,??_get_fat+6
 12356  0026DE  C0A0  F0A8         	movff	get_fat@clst+3,??_get_fat+7
 12357  0026E2  0E08               	movlw	8
 12358  0026E4  D005               	goto	u16730
 12359  0026E6                     u16735:
 12360  0026E6  90D8               	bcf	status,0,c
 12361  0026E8  33A8               	rrcf	(??_get_fat+7)& (0+255),f,b
 12362  0026EA  33A7               	rrcf	(??_get_fat+6)& (0+255),f,b
 12363  0026EC  33A6               	rrcf	(??_get_fat+5)& (0+255),f,b
 12364  0026EE  33A5               	rrcf	(??_get_fat+4)& (0+255),f,b
 12365  0026F0                     u16730:
 12366  0026F0  2EE8               	decfsz	wreg,f,c
 12367  0026F2  D7F9               	goto	u16735
 12368  0026F4  51A1               	movf	??_get_fat& (0+255),w,b
 12369  0026F6  25A5               	addwf	(??_get_fat+4)& (0+255),w,b
 12370  0026F8  6F92               	movwf	move_window@sect& (0+255),b
 12371  0026FA  51A2               	movf	(??_get_fat+1)& (0+255),w,b
 12372  0026FC  21A6               	addwfc	(??_get_fat+5)& (0+255),w,b
 12373  0026FE  6F93               	movwf	(move_window@sect+1)& (0+255),b
 12374  002700  51A3               	movf	(??_get_fat+2)& (0+255),w,b
 12375  002702  21A7               	addwfc	(??_get_fat+6)& (0+255),w,b
 12376  002704  6F94               	movwf	(move_window@sect+2)& (0+255),b
 12377  002706  51A4               	movf	(??_get_fat+3)& (0+255),w,b
 12378  002708  21A8               	addwfc	(??_get_fat+7)& (0+255),w,b
 12379  00270A  6F95               	movwf	(move_window@sect+3)& (0+255),b
 12380  00270C  EC09  F026         	call	_move_window	;wreg free
 12381  002710  0900               	iorlw	0
 12382  002712  A4D8               	btfss	status,2,c
 12383  002714  D044               	goto	l1048
 12384                           
 12385                           ;ff.c: 1164: val = ld_dword(fs->win + clst * 4 % ((UINT)512)) & 0x0FFFFFFF;
 12386  002716  0EFF               	movlw	255
 12387  002718  0100               	movlb	0	; () banked
 12388  00271A  6FA1               	movwf	??_get_fat& (0+255),b
 12389  00271C  0E01               	movlw	1
 12390  00271E  6FA2               	movwf	(??_get_fat+1)& (0+255),b
 12391  002720  C09D  F0A3         	movff	get_fat@clst,??_get_fat+2
 12392  002724  C09E  F0A4         	movff	get_fat@clst+1,??_get_fat+3
 12393  002728  90D8               	bcf	status,0,c
 12394  00272A  37A3               	rlcf	(??_get_fat+2)& (0+255),f,b
 12395  00272C  37A4               	rlcf	(??_get_fat+3)& (0+255),f,b
 12396  00272E  90D8               	bcf	status,0,c
 12397  002730  37A3               	rlcf	(??_get_fat+2)& (0+255),f,b
 12398  002732  37A4               	rlcf	(??_get_fat+3)& (0+255),f,b
 12399  002734  51A1               	movf	??_get_fat& (0+255),w,b
 12400  002736  17A3               	andwf	(??_get_fat+2)& (0+255),f,b
 12401  002738  51A2               	movf	(??_get_fat+1)& (0+255),w,b
 12402  00273A  17A4               	andwf	(??_get_fat+3)& (0+255),f,b
 12403  00273C  0E2F               	movlw	47
 12404  00273E  27A3               	addwf	(??_get_fat+2)& (0+255),f,b
 12405  002740  0E00               	movlw	0
 12406  002742  23A4               	addwfc	(??_get_fat+3)& (0+255),f,b
 12407  002744  51A3               	movf	(??_get_fat+2)& (0+255),w,b
 12408  002746  25B3               	addwf	get_fat@fs& (0+255),w,b
 12409  002748  6E1A               	movwf	ld_dword@ptr,c
 12410  00274A  51A4               	movf	(??_get_fat+3)& (0+255),w,b
 12411  00274C  21B4               	addwfc	(get_fat@fs+1)& (0+255),w,b
 12412  00274E  6E1B               	movwf	ld_dword@ptr+1,c
 12413  002750  EC54  F025         	call	_ld_dword	;wreg free
 12414  002754  0EFF               	movlw	255
 12415  002756  141A               	andwf	?_ld_dword,w,c
 12416  002758  0100               	movlb	0	; () banked
 12417  00275A  6FAD               	movwf	get_fat@val& (0+255),b
 12418  00275C  0EFF               	movlw	255
 12419  00275E  141B               	andwf	?_ld_dword+1,w,c
 12420  002760  6FAE               	movwf	(get_fat@val+1)& (0+255),b
 12421  002762  0EFF               	movlw	255
 12422  002764  141C               	andwf	?_ld_dword+2,w,c
 12423  002766  6FAF               	movwf	(get_fat@val+2)& (0+255),b
 12424  002768  0E0F               	movlw	15
 12425  00276A  141D               	andwf	?_ld_dword+3,w,c
 12426  00276C  D007               	goto	L17
 12427  00276E                     l1058:
 12428                           
 12429                           ; BSR set to: 0
 12430                           ;ff.c: 1194: val = 1;
 12431                           
 12432                           ; BSR set to: 0
 12433  00276E  0E01               	movlw	1
 12434  002770  6FAD               	movwf	get_fat@val& (0+255),b
 12435  002772  0E00               	movlw	0
 12436  002774  6FAE               	movwf	(get_fat@val+1)& (0+255),b
 12437  002776  0E00               	movlw	0
 12438  002778  6FAF               	movwf	(get_fat@val+2)& (0+255),b
 12439  00277A  0E00               	movlw	0
 12440  00277C                     L17:
 12441  00277C  6FB0               	movwf	(get_fat@val+3)& (0+255),b
 12442                           
 12443                           ;ff.c: 1195: }
 12444  00277E  D00F               	goto	l1048
 12445  002780                     l1045:
 12446                           
 12447                           ; BSR set to: 0
 12448                           
 12449                           ; BSR set to: 0
 12450  002780  C0B3  FFD9         	movff	get_fat@fs,fsr2l
 12451  002784  C0B4  FFDA         	movff	get_fat@fs+1,fsr2h
 12452  002788  50DF               	movf	indf2,w,c
 12453                           
 12454                           ; Switch size 1, requested type "space"
 12455                           ; Number of cases is 3, Range of values is 1 to 3
 12456                           ; switch strategies available:
 12457                           ; Name         Instructions Cycles
 12458                           ; simple_byte           10     6 (average)
 12459                           ;	Chosen strategy is simple_byte
 12460  00278A  0A01               	xorlw	1	; case 1
 12461  00278C  B4D8               	btfsc	status,2,c
 12462  00278E  D675               	goto	l1046
 12463  002790  0A03               	xorlw	3	; case 2
 12464  002792  B4D8               	btfsc	status,2,c
 12465  002794  D736               	goto	l1054
 12466  002796  0A01               	xorlw	1	; case 3
 12467  002798  B4D8               	btfsc	status,2,c
 12468  00279A  D789               	goto	l1056
 12469  00279C  D7E8               	goto	l1058
 12470  00279E                     l1048:
 12471                           
 12472                           ;ff.c: 1196: }
 12473                           ;ff.c: 1198: return val;
 12474                           
 12475                           ; BSR set to: 0
 12476  00279E  C0AD  F09B         	movff	get_fat@val,?_get_fat
 12477  0027A2  C0AE  F09C         	movff	get_fat@val+1,?_get_fat+1
 12478  0027A6  C0AF  F09D         	movff	get_fat@val+2,?_get_fat+2
 12479  0027AA  C0B0  F09E         	movff	get_fat@val+3,?_get_fat+3
 12480  0027AE  0012               	return		;funcret
 12481  0027B0                     __end_of_get_fat:
 12482                           	opt stack 0
 12483                           tosu	equ	0xFFF
 12484                           tosh	equ	0xFFE
 12485                           tosl	equ	0xFFD
 12486                           pclath	equ	0xFFA
 12487                           tblptru	equ	0xFF8
 12488                           tblptrh	equ	0xFF7
 12489                           tblptrl	equ	0xFF6
 12490                           tablat	equ	0xFF5
 12491                           prodh	equ	0xFF4
 12492                           prodl	equ	0xFF3
 12493                           intcon	equ	0xFF2
 12494                           intcon2	equ	0xFF1
 12495                           intcon3	equ	0xFF0
 12496                           indf0	equ	0xFEF
 12497                           postinc0	equ	0xFEE
 12498                           fsr0h	equ	0xFEA
 12499                           fsr0l	equ	0xFE9
 12500                           wreg	equ	0xFE8
 12501                           indf1	equ	0xFE7
 12502                           postinc1	equ	0xFE6
 12503                           postdec1	equ	0xFE5
 12504                           fsr1h	equ	0xFE2
 12505                           fsr1l	equ	0xFE1
 12506                           indf2	equ	0xFDF
 12507                           postinc2	equ	0xFDE
 12508                           postdec2	equ	0xFDD
 12509                           plusw2	equ	0xFDB
 12510                           fsr2h	equ	0xFDA
 12511                           fsr2l	equ	0xFD9
 12512                           status	equ	0xFD8
 12513                           
 12514 ;; *************** function _f_mount *****************
 12515 ;; Defined at:
 12516 ;;		line 3605 in file "bibliotecas/ff.c"
 12517 ;; Parameters:    Size  Location     Type
 12518 ;;  fs              2  150[BANK0 ] PTR struct .
 12519 ;;		 -> NULL(0), fs(559), 
 12520 ;;  path            2  152[BANK0 ] PTR const unsigned char 
 12521 ;;		 -> STR_12(7), STR_10(1), 
 12522 ;;  opt             1  154[BANK0 ] unsigned char 
 12523 ;; Auto vars:     Size  Location     Type
 12524 ;;  vol             2    5[BANK1 ] int 
 12525 ;;  cfs             2    3[BANK1 ] PTR struct .
 12526 ;;		 -> NULL(0), fs(559), 
 12527 ;;  rp              2    1[BANK1 ] PTR const unsigned char 
 12528 ;;		 -> STR_12(7), STR_10(1), 
 12529 ;;  res             1    0[BANK1 ] enum E154
 12530 ;; Return value:  Size  Location     Type
 12531 ;;                  1    wreg      enum E3971
 12532 ;; Registers used:
 12533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12534 ;; Tracked objects:
 12535 ;;		On entry : 0/0
 12536 ;;		On exit  : 0/0
 12537 ;;		Unchanged: 0/0
 12538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12539 ;;      Params:         0       5       0       0       0       0       0       0       0
 12540 ;;      Locals:         0       0       7       0       0       0       0       0       0
 12541 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12542 ;;      Totals:         0       5       7       0       0       0       0       0       0
 12543 ;;Total ram usage:       12 bytes
 12544 ;; Hardware stack levels used:    1
 12545 ;; Hardware stack levels required when called:   12
 12546 ;; This function calls:
 12547 ;;		_get_ldnumber
 12548 ;;		_mount_volume
 12549 ;; This function is called by:
 12550 ;;		_SDCard
 12551 ;; This function uses a non-reentrant model
 12552 ;;
 12553                           
 12554                           	psect	text35
 12555  004B60                     __ptext35:
 12556                           	opt stack 0
 12557  004B60                     _f_mount:
 12558                           	opt stack 16
 12559                           
 12560                           ;ff.c: 3611: FATFS *cfs;
 12561                           ;ff.c: 3612: int vol;
 12562                           ;ff.c: 3613: FRESULT res;
 12563                           ;ff.c: 3614: const TCHAR *rp = path;
 12564                           
 12565                           ;incstack = 0
 12566  004B60  C0F8  F174         	movff	f_mount@path,f_mount@rp
 12567  004B64  C0F9  F175         	movff	f_mount@path+1,f_mount@rp+1
 12568                           
 12569                           ;ff.c: 3618: vol = get_ldnumber(&rp);
 12570  004B68  0E74               	movlw	low f_mount@rp
 12571  004B6A  6E1A               	movwf	get_ldnumber@path,c
 12572  004B6C  0E01               	movlw	high f_mount@rp
 12573  004B6E  6E1B               	movwf	get_ldnumber@path+1,c
 12574  004B70  ECE6  F021         	call	_get_ldnumber	;wreg free
 12575  004B74  C01A  F178         	movff	?_get_ldnumber,f_mount@vol
 12576  004B78  C01B  F179         	movff	?_get_ldnumber+1,f_mount@vol+1
 12577                           
 12578                           ;ff.c: 3619: if (vol < 0) return FR_INVALID_DRIVE;
 12579  004B7C  0101               	movlb	1	; () banked
 12580  004B7E  AF79               	btfss	(f_mount@vol+1)& (0+255),7,b
 12581  004B80  D002               	goto	l1413
 12582                           
 12583                           ; BSR set to: 1
 12584  004B82  0E0B               	movlw	11
 12585                           
 12586                           ; BSR set to: 1
 12587  004B84  0012               	return	
 12588  004B86                     l1413:
 12589                           
 12590                           ; BSR set to: 1
 12591                           ;ff.c: 3620: cfs = FatFs[vol];
 12592                           
 12593                           ; BSR set to: 1
 12594  004B86  90D8               	bcf	status,0,c
 12595  004B88  3578               	rlcf	f_mount@vol& (0+255),w,b
 12596  004B8A  6ED9               	movwf	fsr2l,c
 12597  004B8C  3579               	rlcf	(f_mount@vol+1)& (0+255),w,b
 12598  004B8E  6EDA               	movwf	fsr2h,c
 12599  004B90  0E30               	movlw	low _FatFs
 12600  004B92  26D9               	addwf	fsr2l,f,c
 12601  004B94  0E00               	movlw	high _FatFs
 12602  004B96  22DA               	addwfc	fsr2h,f,c
 12603  004B98  CFDE F176          	movff	postinc2,f_mount@cfs
 12604  004B9C  CFDD F177          	movff	postdec2,f_mount@cfs+1
 12605                           
 12606                           ; BSR set to: 1
 12607                           ;ff.c: 3622: if (cfs) {
 12608  004BA0  5176               	movf	f_mount@cfs& (0+255),w,b
 12609  004BA2  1177               	iorwf	(f_mount@cfs+1)& (0+255),w,b
 12610  004BA4  B4D8               	btfsc	status,2,c
 12611  004BA6  D006               	goto	l1415
 12612                           
 12613                           ; BSR set to: 1
 12614                           ;ff.c: 3629: cfs->fs_type = 0;
 12615  004BA8  C176  FFD9         	movff	f_mount@cfs,fsr2l
 12616  004BAC  C177  FFDA         	movff	f_mount@cfs+1,fsr2h
 12617  004BB0  0E00               	movlw	0
 12618  004BB2  6EDF               	movwf	indf2,c
 12619  004BB4                     l1415:
 12620                           
 12621                           ; BSR set to: 1
 12622                           ;ff.c: 3630: }
 12623                           ;ff.c: 3632: if (fs) {
 12624                           
 12625                           ; BSR set to: 1
 12626  004BB4  0100               	movlb	0	; () banked
 12627  004BB6  51F6               	movf	f_mount@fs& (0+255),w,b
 12628  004BB8  11F7               	iorwf	(f_mount@fs+1)& (0+255),w,b
 12629  004BBA  B4D8               	btfsc	status,2,c
 12630  004BBC  D006               	goto	l1416
 12631                           
 12632                           ; BSR set to: 0
 12633                           ;ff.c: 3633: fs->fs_type = 0;
 12634  004BBE  C0F6  FFD9         	movff	f_mount@fs,fsr2l
 12635  004BC2  C0F7  FFDA         	movff	f_mount@fs+1,fsr2h
 12636  004BC6  0E00               	movlw	0
 12637  004BC8  6EDF               	movwf	indf2,c
 12638  004BCA                     l1416:
 12639                           
 12640                           ; BSR set to: 0
 12641                           ;ff.c: 3637: }
 12642                           ;ff.c: 3638: FatFs[vol] = fs;
 12643                           
 12644                           ; BSR set to: 0
 12645  004BCA  90D8               	bcf	status,0,c
 12646  004BCC  0101               	movlb	1	; () banked
 12647  004BCE  3578               	rlcf	f_mount@vol& (0+255),w,b
 12648  004BD0  6ED9               	movwf	fsr2l,c
 12649  004BD2  3579               	rlcf	(f_mount@vol+1)& (0+255),w,b
 12650  004BD4  6EDA               	movwf	fsr2h,c
 12651  004BD6  0E30               	movlw	low _FatFs
 12652  004BD8  26D9               	addwf	fsr2l,f,c
 12653  004BDA  0E00               	movlw	high _FatFs
 12654  004BDC  22DA               	addwfc	fsr2h,f,c
 12655  004BDE  C0F6  FFDE         	movff	f_mount@fs,postinc2
 12656  004BE2  C0F7  FFDD         	movff	f_mount@fs+1,postdec2
 12657                           
 12658                           ; BSR set to: 1
 12659                           ;ff.c: 3640: if (opt == 0) return FR_OK;
 12660  004BE6  0100               	movlb	0	; () banked
 12661  004BE8  51FA               	movf	f_mount@opt& (0+255),w,b
 12662  004BEA  A4D8               	btfss	status,2,c
 12663  004BEC  D002               	goto	l1417
 12664                           
 12665                           ; BSR set to: 0
 12666  004BEE  0E00               	movlw	0
 12667                           
 12668                           ; BSR set to: 0
 12669  004BF0  0012               	return	
 12670  004BF2                     l1417:
 12671                           
 12672                           ; BSR set to: 0
 12673                           ;ff.c: 3642: res = mount_volume(&path, &fs, 0);
 12674                           
 12675                           ; BSR set to: 0
 12676  004BF2  0EF8               	movlw	low f_mount@path
 12677  004BF4  6FC8               	movwf	mount_volume@path& (0+255),b
 12678  004BF6  0E00               	movlw	high f_mount@path
 12679  004BF8  6FC9               	movwf	(mount_volume@path+1)& (0+255),b
 12680  004BFA  0EF6               	movlw	low f_mount@fs
 12681  004BFC  6FCA               	movwf	mount_volume@rfs& (0+255),b
 12682  004BFE  0E00               	movlw	high f_mount@fs
 12683  004C00  6FCB               	movwf	(mount_volume@rfs+1)& (0+255),b
 12684  004C02  0E00               	movlw	0
 12685  004C04  6FCC               	movwf	mount_volume@mode& (0+255),b
 12686  004C06  EC09  F000         	call	_mount_volume	;wreg free
 12687  004C0A  0101               	movlb	1	; () banked
 12688  004C0C  6F73               	movwf	f_mount@res& (0+255),b
 12689                           
 12690                           ; BSR set to: 1
 12691                           ;ff.c: 3643: return res;
 12692  004C0E  5173               	movf	f_mount@res& (0+255),w,b
 12693  004C10  0012               	return	
 12694  004C12                     __end_of_f_mount:
 12695                           	opt stack 0
 12696                           tosu	equ	0xFFF
 12697                           tosh	equ	0xFFE
 12698                           tosl	equ	0xFFD
 12699                           pclath	equ	0xFFA
 12700                           tblptru	equ	0xFF8
 12701                           tblptrh	equ	0xFF7
 12702                           tblptrl	equ	0xFF6
 12703                           tablat	equ	0xFF5
 12704                           prodh	equ	0xFF4
 12705                           prodl	equ	0xFF3
 12706                           intcon	equ	0xFF2
 12707                           intcon2	equ	0xFF1
 12708                           intcon3	equ	0xFF0
 12709                           indf0	equ	0xFEF
 12710                           postinc0	equ	0xFEE
 12711                           fsr0h	equ	0xFEA
 12712                           fsr0l	equ	0xFE9
 12713                           wreg	equ	0xFE8
 12714                           indf1	equ	0xFE7
 12715                           postinc1	equ	0xFE6
 12716                           postdec1	equ	0xFE5
 12717                           fsr1h	equ	0xFE2
 12718                           fsr1l	equ	0xFE1
 12719                           indf2	equ	0xFDF
 12720                           postinc2	equ	0xFDE
 12721                           postdec2	equ	0xFDD
 12722                           plusw2	equ	0xFDB
 12723                           fsr2h	equ	0xFDA
 12724                           fsr2l	equ	0xFD9
 12725                           status	equ	0xFD8
 12726                           
 12727 ;; *************** function _mount_volume *****************
 12728 ;; Defined at:
 12729 ;;		line 3332 in file "bibliotecas/ff.c"
 12730 ;; Parameters:    Size  Location     Type
 12731 ;;  path            2  104[BANK0 ] PTR PTR const unsigned c
 12732 ;;		 -> f_rename@path_old(2), f_mkdir@path(2), f_unlink@path(2), f_getfree@path(2), 
 12733 ;;		 -> f_stat@path(2), f_opendir@path(2), f_open@path(2), f_mount@path(2), 
 12734 ;;  rfs             2  106[BANK0 ] PTR PTR struct .
 12735 ;;		 -> f_rename@fs(2), f_mkdir@fs(2), f_unlink@fs(2), f_getfree@fs(2), 
 12736 ;;		 -> dj.obj(15), f_stat@dj(40), f_opendir@fs(2), f_open@fs(2), 
 12737 ;;		 -> f_mount@fs(2), 
 12738 ;;  mode            1  108[BANK0 ] unsigned char 
 12739 ;; Auto vars:     Size  Location     Type
 12740 ;;  fasize          4  142[BANK0 ] unsigned long 
 12741 ;;  nclst           4  138[BANK0 ] unsigned long 
 12742 ;;  bsect           4  133[BANK0 ] unsigned long 
 12743 ;;  tsect           4  129[BANK0 ] unsigned long 
 12744 ;;  sysect          4  121[BANK0 ] unsigned long 
 12745 ;;  szbfat          4  117[BANK0 ] unsigned long 
 12746 ;;  fs              2  148[BANK0 ] PTR struct .
 12747 ;;		 -> NULL(0), fs(559), 
 12748 ;;  fmt             2  146[BANK0 ] unsigned int 
 12749 ;;  nrsv            2  127[BANK0 ] unsigned short 
 12750 ;;  vol             2  125[BANK0 ] int 
 12751 ;;  stat            1  137[BANK0 ] unsigned char 
 12752 ;; Return value:  Size  Location     Type
 12753 ;;                  1    wreg      enum E154
 12754 ;; Registers used:
 12755 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12756 ;; Tracked objects:
 12757 ;;		On entry : 0/0
 12758 ;;		On exit  : 0/0
 12759 ;;		Unchanged: 0/0
 12760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12761 ;;      Params:         0       5       0       0       0       0       0       0       0
 12762 ;;      Locals:         0      33       0       0       0       0       0       0       0
 12763 ;;      Temps:          0       8       0       0       0       0       0       0       0
 12764 ;;      Totals:         0      46       0       0       0       0       0       0       0
 12765 ;;Total ram usage:       46 bytes
 12766 ;; Hardware stack levels used:    1
 12767 ;; Hardware stack levels required when called:   11
 12768 ;; This function calls:
 12769 ;;		___lldiv
 12770 ;;		___lmul
 12771 ;;		_disk_initialize
 12772 ;;		_disk_status
 12773 ;;		_find_volume
 12774 ;;		_get_ldnumber
 12775 ;;		_ld_dword
 12776 ;;		_ld_word
 12777 ;;		_move_window
 12778 ;; This function is called by:
 12779 ;;		_f_mount
 12780 ;;		_f_open
 12781 ;;		_f_opendir
 12782 ;;		_f_stat
 12783 ;;		_f_getfree
 12784 ;;		_f_unlink
 12785 ;;		_f_mkdir
 12786 ;;		_f_rename
 12787 ;; This function uses a non-reentrant model
 12788 ;;
 12789                           
 12790                           	psect	text36
 12791  000012                     __ptext36:
 12792                           	opt stack 0
 12793  000012                     _mount_volume:
 12794                           	opt stack 16
 12795                           
 12796                           ;ff.c: 3338: int vol;
 12797                           ;ff.c: 3339: DSTATUS stat;
 12798                           ;ff.c: 3340: LBA_t bsect;
 12799                           ;ff.c: 3341: DWORD tsect, sysect, fasize, nclst, szbfat;
 12800                           ;ff.c: 3342: WORD nrsv;
 12801                           ;ff.c: 3343: FATFS *fs;
 12802                           ;ff.c: 3344: UINT fmt;
 12803                           ;ff.c: 3348: *rfs = 0;
 12804                           
 12805                           ;incstack = 0
 12806  000012  C0CA  FFD9         	movff	mount_volume@rfs,fsr2l
 12807  000016  C0CB  FFDA         	movff	mount_volume@rfs+1,fsr2h
 12808  00001A  0E00               	movlw	0
 12809  00001C  6EDE               	movwf	postinc2,c
 12810  00001E  0E00               	movlw	0
 12811  000020  6EDD               	movwf	postdec2,c
 12812                           
 12813                           ;ff.c: 3349: vol = get_ldnumber(path);
 12814  000022  C0C8  F01A         	movff	mount_volume@path,get_ldnumber@path
 12815  000026  C0C9  F01B         	movff	mount_volume@path+1,get_ldnumber@path+1
 12816  00002A  ECE6  F021         	call	_get_ldnumber	;wreg free
 12817  00002E  C01A  F0DD         	movff	?_get_ldnumber,mount_volume@vol
 12818  000032  C01B  F0DE         	movff	?_get_ldnumber+1,mount_volume@vol+1
 12819                           
 12820                           ;ff.c: 3350: if (vol < 0) return FR_INVALID_DRIVE;
 12821  000036  0100               	movlb	0	; () banked
 12822  000038  AFDE               	btfss	(mount_volume@vol+1)& (0+255),7,b
 12823  00003A  D002               	goto	l1365
 12824                           
 12825                           ; BSR set to: 0
 12826  00003C  0E0B               	movlw	11
 12827                           
 12828                           ; BSR set to: 0
 12829  00003E  0012               	return	
 12830  000040                     l1365:
 12831                           
 12832                           ; BSR set to: 0
 12833                           ;ff.c: 3353: fs = FatFs[vol];
 12834                           
 12835                           ; BSR set to: 0
 12836  000040  90D8               	bcf	status,0,c
 12837  000042  35DD               	rlcf	mount_volume@vol& (0+255),w,b
 12838  000044  6ED9               	movwf	fsr2l,c
 12839  000046  35DE               	rlcf	(mount_volume@vol+1)& (0+255),w,b
 12840  000048  6EDA               	movwf	fsr2h,c
 12841  00004A  0E30               	movlw	low _FatFs
 12842  00004C  26D9               	addwf	fsr2l,f,c
 12843  00004E  0E00               	movlw	high _FatFs
 12844  000050  22DA               	addwfc	fsr2h,f,c
 12845  000052  CFDE F0F4          	movff	postinc2,mount_volume@fs
 12846  000056  CFDD F0F5          	movff	postdec2,mount_volume@fs+1
 12847                           
 12848                           ; BSR set to: 0
 12849                           ;ff.c: 3354: if (!fs) return FR_NOT_ENABLED;
 12850  00005A  51F4               	movf	mount_volume@fs& (0+255),w,b
 12851  00005C  11F5               	iorwf	(mount_volume@fs+1)& (0+255),w,b
 12852  00005E  A4D8               	btfss	status,2,c
 12853  000060  D002               	goto	l1367
 12854                           
 12855                           ; BSR set to: 0
 12856  000062  0E0C               	movlw	12
 12857                           
 12858                           ; BSR set to: 0
 12859  000064  0012               	return	
 12860  000066                     l1367:
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;ff.c: 3358: *rfs = fs;
 12864                           
 12865                           ; BSR set to: 0
 12866  000066  C0CA  FFD9         	movff	mount_volume@rfs,fsr2l
 12867  00006A  C0CB  FFDA         	movff	mount_volume@rfs+1,fsr2h
 12868  00006E  C0F4  FFDE         	movff	mount_volume@fs,postinc2
 12869  000072  C0F5  FFDD         	movff	mount_volume@fs+1,postdec2
 12870                           
 12871                           ; BSR set to: 0
 12872                           ;ff.c: 3360: mode &= (BYTE)~0x01;
 12873  000076  91CC               	bcf	mount_volume@mode& (0+255),0,b
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;ff.c: 3361: if (fs->fs_type != 0) {
 12877  000078  C0F4  FFD9         	movff	mount_volume@fs,fsr2l
 12878  00007C  C0F5  FFDA         	movff	mount_volume@fs+1,fsr2h
 12879  000080  50DF               	movf	indf2,w,c
 12880  000082  B4D8               	btfsc	status,2,c
 12881  000084  D015               	goto	l1369
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;ff.c: 3362: stat = disk_status(fs->pdrv);
 12885  000086  EE20 F001          	lfsr	2,1
 12886  00008A  51F4               	movf	mount_volume@fs& (0+255),w,b
 12887  00008C  26D9               	addwf	fsr2l,f,c
 12888  00008E  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 12889  000090  22DA               	addwfc	fsr2h,f,c
 12890  000092  50DF               	movf	indf2,w,c
 12891  000094  ECF0  F02B         	call	_disk_status
 12892  000098  0100               	movlb	0	; () banked
 12893  00009A  6FE9               	movwf	mount_volume@stat& (0+255),b
 12894                           
 12895                           ; BSR set to: 0
 12896                           ;ff.c: 3364: if (!0 && mode && (stat & 0x04)) {
 12897  00009C  B1E9               	btfsc	mount_volume@stat& (0+255),0,b
 12898  00009E  D008               	goto	l1369
 12899                           
 12900                           ; BSR set to: 0
 12901  0000A0  51CC               	movf	mount_volume@mode& (0+255),w,b
 12902  0000A2  A4D8               	btfss	status,2,c
 12903                           
 12904                           ; BSR set to: 0
 12905  0000A4  A5E9               	btfss	mount_volume@stat& (0+255),2,b
 12906  0000A6  D002               	goto	l1370
 12907                           
 12908                           ; BSR set to: 0
 12909                           ;ff.c: 3365: return FR_WRITE_PROTECTED;
 12910  0000A8  0E0A               	movlw	10
 12911                           
 12912                           ; BSR set to: 0
 12913  0000AA  0012               	return	
 12914  0000AC                     l1370:
 12915                           
 12916                           ; BSR set to: 0
 12917                           ;ff.c: 3366: }
 12918                           ;ff.c: 3367: return FR_OK;
 12919                           
 12920                           ; BSR set to: 0
 12921  0000AC  0E00               	movlw	0
 12922                           
 12923                           ; BSR set to: 0
 12924  0000AE  0012               	return	
 12925  0000B0                     l1369:
 12926                           
 12927                           ; BSR set to: 0
 12928                           ;ff.c: 3368: }
 12929                           ;ff.c: 3369: }
 12930                           ;ff.c: 3374: fs->fs_type = 0;
 12931                           
 12932                           ; BSR set to: 0
 12933                           
 12934                           ; BSR set to: 0
 12935  0000B0  C0F4  FFD9         	movff	mount_volume@fs,fsr2l
 12936  0000B4  C0F5  FFDA         	movff	mount_volume@fs+1,fsr2h
 12937  0000B8  0E00               	movlw	0
 12938  0000BA  6EDF               	movwf	indf2,c
 12939                           
 12940                           ; BSR set to: 0
 12941                           ;ff.c: 3375: fs->pdrv = (BYTE)(vol);
 12942  0000BC  EE20 F001          	lfsr	2,1
 12943  0000C0  51F4               	movf	mount_volume@fs& (0+255),w,b
 12944  0000C2  26D9               	addwf	fsr2l,f,c
 12945  0000C4  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 12946  0000C6  22DA               	addwfc	fsr2h,f,c
 12947  0000C8  C0DD  FFDF         	movff	mount_volume@vol,indf2
 12948                           
 12949                           ; BSR set to: 0
 12950                           ;ff.c: 3376: stat = disk_initialize(fs->pdrv);
 12951  0000CC  EE20 F001          	lfsr	2,1
 12952  0000D0  51F4               	movf	mount_volume@fs& (0+255),w,b
 12953  0000D2  26D9               	addwf	fsr2l,f,c
 12954  0000D4  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 12955  0000D6  22DA               	addwfc	fsr2h,f,c
 12956  0000D8  50DF               	movf	indf2,w,c
 12957  0000DA  ECA3  F02C         	call	_disk_initialize
 12958  0000DE  0100               	movlb	0	; () banked
 12959  0000E0  6FE9               	movwf	mount_volume@stat& (0+255),b
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;ff.c: 3377: if (stat & 0x01) {
 12963  0000E2  A1E9               	btfss	mount_volume@stat& (0+255),0,b
 12964  0000E4  D002               	goto	l1371
 12965                           
 12966                           ; BSR set to: 0
 12967                           ;ff.c: 3378: return FR_NOT_READY;
 12968  0000E6  0E03               	movlw	3
 12969                           
 12970                           ; BSR set to: 0
 12971  0000E8  0012               	return	
 12972  0000EA                     l1371:
 12973                           
 12974                           ; BSR set to: 0
 12975                           
 12976                           ; BSR set to: 0
 12977  0000EA  51CC               	movf	mount_volume@mode& (0+255),w,b
 12978  0000EC  A4D8               	btfss	status,2,c
 12979                           
 12980                           ; BSR set to: 0
 12981  0000EE  A5E9               	btfss	mount_volume@stat& (0+255),2,b
 12982  0000F0  D002               	goto	l1372
 12983                           
 12984                           ; BSR set to: 0
 12985                           ;ff.c: 3381: return FR_WRITE_PROTECTED;
 12986  0000F2  0E0A               	movlw	10
 12987                           
 12988                           ; BSR set to: 0
 12989  0000F4  0012               	return	
 12990  0000F6                     l1372:
 12991                           
 12992                           ; BSR set to: 0
 12993                           ;ff.c: 3382: }
 12994                           ;ff.c: 3389: fmt = find_volume(fs, 0);
 12995                           
 12996                           ; BSR set to: 0
 12997  0000F6  C0F4  F0AA         	movff	mount_volume@fs,find_volume@fs
 12998  0000FA  C0F5  F0AB         	movff	mount_volume@fs+1,find_volume@fs+1
 12999  0000FE  0E00               	movlw	0
 13000  000100  6FAD               	movwf	(find_volume@part+1)& (0+255),b
 13001  000102  0E00               	movlw	0
 13002  000104  6FAC               	movwf	find_volume@part& (0+255),b
 13003  000106  EC67  F01B         	call	_find_volume	;wreg free
 13004  00010A  C0AA  F0F2         	movff	?_find_volume,mount_volume@fmt
 13005  00010E  C0AB  F0F3         	movff	?_find_volume+1,mount_volume@fmt+1
 13006                           
 13007                           ;ff.c: 3390: if (fmt == 4) return FR_DISK_ERR;
 13008  000112  0E04               	movlw	4
 13009  000114  0100               	movlb	0	; () banked
 13010  000116  19F2               	xorwf	mount_volume@fmt& (0+255),w,b
 13011  000118  11F3               	iorwf	(mount_volume@fmt+1)& (0+255),w,b
 13012  00011A  A4D8               	btfss	status,2,c
 13013  00011C  D002               	goto	l1373
 13014                           
 13015                           ; BSR set to: 0
 13016  00011E  0E01               	movlw	1
 13017                           
 13018                           ; BSR set to: 0
 13019  000120  0012               	return	
 13020  000122                     l1373:
 13021                           
 13022                           ; BSR set to: 0
 13023                           ;ff.c: 3391: if (fmt >= 2) return FR_NO_FILESYSTEM;
 13024                           
 13025                           ; BSR set to: 0
 13026  000122  51F3               	movf	(mount_volume@fmt+1)& (0+255),w,b
 13027  000124  E104               	bnz	u19230
 13028  000126  0E02               	movlw	2
 13029  000128  5DF2               	subwf	mount_volume@fmt& (0+255),w,b
 13030  00012A  A0D8               	btfss	status,0,c
 13031  00012C  D002               	goto	l1374
 13032  00012E                     u19230:
 13033                           
 13034                           ; BSR set to: 0
 13035  00012E  0E0D               	movlw	13
 13036                           
 13037                           ; BSR set to: 0
 13038  000130  0012               	return	
 13039  000132                     l1374:
 13040                           
 13041                           ; BSR set to: 0
 13042                           ;ff.c: 3392: bsect = fs->winsect;
 13043                           
 13044                           ; BSR set to: 0
 13045  000132  EE20 F02B          	lfsr	2,43
 13046  000136  51F4               	movf	mount_volume@fs& (0+255),w,b
 13047  000138  26D9               	addwf	fsr2l,f,c
 13048  00013A  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13049  00013C  22DA               	addwfc	fsr2h,f,c
 13050  00013E  CFDE F0E5          	movff	postinc2,mount_volume@bsect
 13051  000142  CFDE F0E6          	movff	postinc2,mount_volume@bsect+1
 13052  000146  CFDE F0E7          	movff	postinc2,mount_volume@bsect+2
 13053  00014A  CFDE F0E8          	movff	postinc2,mount_volume@bsect+3
 13054                           
 13055                           ; BSR set to: 0
 13056                           ;ff.c: 3459: {
 13057                           ;ff.c: 3460: if (ld_word(fs->win + 11) != ((UINT)512)) return FR_NO_FILESYSTEM;
 13058  00014E  0E3A               	movlw	58
 13059  000150  25F4               	addwf	mount_volume@fs& (0+255),w,b
 13060  000152  6E1A               	movwf	ld_word@ptr,c
 13061  000154  0E00               	movlw	0
 13062  000156  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 13063  000158  6E1B               	movwf	ld_word@ptr+1,c
 13064  00015A  EC6B  F02C         	call	_ld_word	;wreg free
 13065  00015E  0E02               	movlw	2
 13066  000160  181B               	xorwf	?_ld_word+1,w,c
 13067  000162  101A               	iorwf	?_ld_word,w,c
 13068  000164  B4D8               	btfsc	status,2,c
 13069  000166  D002               	goto	l1375
 13070  000168  0E0D               	movlw	13
 13071  00016A  0012               	return	
 13072  00016C                     l1375:
 13073                           
 13074                           ;ff.c: 3462: fasize = ld_word(fs->win + 22);
 13075  00016C  0E45               	movlw	69
 13076  00016E  0100               	movlb	0	; () banked
 13077  000170  25F4               	addwf	mount_volume@fs& (0+255),w,b
 13078  000172  6E1A               	movwf	ld_word@ptr,c
 13079  000174  0E00               	movlw	0
 13080  000176  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 13081  000178  6E1B               	movwf	ld_word@ptr+1,c
 13082  00017A  EC6B  F02C         	call	_ld_word	;wreg free
 13083  00017E  C01A  F0EE         	movff	?_ld_word,mount_volume@fasize
 13084  000182  C01B  F0EF         	movff	?_ld_word+1,mount_volume@fasize+1
 13085  000186  0100               	movlb	0	; () banked
 13086  000188  6BF0               	clrf	(mount_volume@fasize+2)& (0+255),b
 13087  00018A  6BF1               	clrf	(mount_volume@fasize+3)& (0+255),b
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;ff.c: 3463: if (fasize == 0) fasize = ld_dword(fs->win + 36);
 13091  00018C  51EE               	movf	mount_volume@fasize& (0+255),w,b
 13092  00018E  11EF               	iorwf	(mount_volume@fasize+1)& (0+255),w,b
 13093  000190  11F0               	iorwf	(mount_volume@fasize+2)& (0+255),w,b
 13094  000192  11F1               	iorwf	(mount_volume@fasize+3)& (0+255),w,b
 13095  000194  A4D8               	btfss	status,2,c
 13096  000196  D010               	goto	l1376
 13097                           
 13098                           ; BSR set to: 0
 13099  000198  0E53               	movlw	83
 13100  00019A  25F4               	addwf	mount_volume@fs& (0+255),w,b
 13101  00019C  6E1A               	movwf	ld_dword@ptr,c
 13102  00019E  0E00               	movlw	0
 13103  0001A0  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 13104  0001A2  6E1B               	movwf	ld_dword@ptr+1,c
 13105  0001A4  EC54  F025         	call	_ld_dword	;wreg free
 13106  0001A8  C01A  F0EE         	movff	?_ld_dword,mount_volume@fasize
 13107  0001AC  C01B  F0EF         	movff	?_ld_dword+1,mount_volume@fasize+1
 13108  0001B0  C01C  F0F0         	movff	?_ld_dword+2,mount_volume@fasize+2
 13109  0001B4  C01D  F0F1         	movff	?_ld_dword+3,mount_volume@fasize+3
 13110  0001B8                     l1376:
 13111                           
 13112                           ;ff.c: 3464: fs->fsize = fasize;
 13113  0001B8  0100               	movlb	0	; () banked
 13114  0001BA  EE20 F017          	lfsr	2,23
 13115  0001BE  51F4               	movf	mount_volume@fs& (0+255),w,b
 13116  0001C0  26D9               	addwf	fsr2l,f,c
 13117  0001C2  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13118  0001C4  22DA               	addwfc	fsr2h,f,c
 13119  0001C6  C0EE  FFDE         	movff	mount_volume@fasize,postinc2
 13120  0001CA  C0EF  FFDE         	movff	mount_volume@fasize+1,postinc2
 13121  0001CE  C0F0  FFDE         	movff	mount_volume@fasize+2,postinc2
 13122  0001D2  C0F1  FFDE         	movff	mount_volume@fasize+3,postinc2
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;ff.c: 3466: fs->n_fats = fs->win[16];
 13126  0001D6  EE20 F03F          	lfsr	2,63
 13127  0001DA  51F4               	movf	mount_volume@fs& (0+255),w,b
 13128  0001DC  26D9               	addwf	fsr2l,f,c
 13129  0001DE  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13130  0001E0  22DA               	addwfc	fsr2h,f,c
 13131  0001E2  EE10 F002          	lfsr	1,2
 13132  0001E6  51F4               	movf	mount_volume@fs& (0+255),w,b
 13133  0001E8  26E1               	addwf	fsr1l,f,c
 13134  0001EA  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13135  0001EC  22E2               	addwfc	fsr1h,f,c
 13136  0001EE  CFDF FFE7          	movff	indf2,indf1
 13137                           
 13138                           ; BSR set to: 0
 13139                           ;ff.c: 3467: if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;
 13140  0001F2  EE20 F002          	lfsr	2,2
 13141  0001F6  51F4               	movf	mount_volume@fs& (0+255),w,b
 13142  0001F8  26D9               	addwf	fsr2l,f,c
 13143  0001FA  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13144  0001FC  22DA               	addwfc	fsr2h,f,c
 13145  0001FE  04DE               	decf	postinc2,w,c
 13146  000200  B4D8               	btfsc	status,2,c
 13147  000202  D00C               	goto	l1377
 13148                           
 13149                           ; BSR set to: 0
 13150  000204  EE20 F002          	lfsr	2,2
 13151  000208  51F4               	movf	mount_volume@fs& (0+255),w,b
 13152  00020A  26D9               	addwf	fsr2l,f,c
 13153  00020C  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13154  00020E  22DA               	addwfc	fsr2h,f,c
 13155  000210  0E02               	movlw	2
 13156  000212  18DE               	xorwf	postinc2,w,c
 13157  000214  B4D8               	btfsc	status,2,c
 13158  000216  D002               	goto	l1377
 13159                           
 13160                           ; BSR set to: 0
 13161  000218  0E0D               	movlw	13
 13162                           
 13163                           ; BSR set to: 0
 13164  00021A  0012               	return	
 13165  00021C                     l1377:
 13166                           
 13167                           ; BSR set to: 0
 13168                           ;ff.c: 3468: fasize *= fs->n_fats;
 13169                           
 13170                           ; BSR set to: 0
 13171  00021C  C0EE  F01A         	movff	mount_volume@fasize,___lmul@multiplier
 13172  000220  C0EF  F01B         	movff	mount_volume@fasize+1,___lmul@multiplier+1
 13173  000224  C0F0  F01C         	movff	mount_volume@fasize+2,___lmul@multiplier+2
 13174  000228  C0F1  F01D         	movff	mount_volume@fasize+3,___lmul@multiplier+3
 13175  00022C  EE20 F002          	lfsr	2,2
 13176  000230  51F4               	movf	mount_volume@fs& (0+255),w,b
 13177  000232  26D9               	addwf	fsr2l,f,c
 13178  000234  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13179  000236  22DA               	addwfc	fsr2h,f,c
 13180  000238  50DF               	movf	indf2,w,c
 13181  00023A  6FCD               	movwf	??_mount_volume& (0+255),b
 13182  00023C  51CD               	movf	??_mount_volume& (0+255),w,b
 13183  00023E  6E1E               	movwf	___lmul@multiplicand,c
 13184  000240  6A1F               	clrf	___lmul@multiplicand+1,c
 13185  000242  6A20               	clrf	___lmul@multiplicand+2,c
 13186  000244  6A21               	clrf	___lmul@multiplicand+3,c
 13187  000246  ECC9  F02A         	call	___lmul	;wreg free
 13188  00024A  C01A  F0EE         	movff	?___lmul,mount_volume@fasize
 13189  00024E  C01B  F0EF         	movff	?___lmul+1,mount_volume@fasize+1
 13190  000252  C01C  F0F0         	movff	?___lmul+2,mount_volume@fasize+2
 13191  000256  C01D  F0F1         	movff	?___lmul+3,mount_volume@fasize+3
 13192                           
 13193                           ;ff.c: 3470: fs->csize = fs->win[13];
 13194  00025A  0100               	movlb	0	; () banked
 13195  00025C  EE20 F03C          	lfsr	2,60
 13196  000260  51F4               	movf	mount_volume@fs& (0+255),w,b
 13197  000262  26D9               	addwf	fsr2l,f,c
 13198  000264  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13199  000266  22DA               	addwfc	fsr2h,f,c
 13200  000268  50DF               	movf	indf2,w,c
 13201  00026A  6FCD               	movwf	??_mount_volume& (0+255),b
 13202  00026C  6BCE               	clrf	(??_mount_volume+1)& (0+255),b
 13203  00026E  EE20 F009          	lfsr	2,9
 13204  000272  51F4               	movf	mount_volume@fs& (0+255),w,b
 13205  000274  26D9               	addwf	fsr2l,f,c
 13206  000276  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13207  000278  22DA               	addwfc	fsr2h,f,c
 13208  00027A  C0CD  FFDE         	movff	??_mount_volume,postinc2
 13209  00027E  C0CE  FFDD         	movff	??_mount_volume+1,postdec2
 13210                           
 13211                           ; BSR set to: 0
 13212                           ;ff.c: 3471: if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTE
      +                          M;
 13213  000282  EE20 F009          	lfsr	2,9
 13214  000286  51F4               	movf	mount_volume@fs& (0+255),w,b
 13215  000288  26D9               	addwf	fsr2l,f,c
 13216  00028A  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13217  00028C  22DA               	addwfc	fsr2h,f,c
 13218  00028E  50DE               	movf	postinc2,w,c
 13219  000290  10DE               	iorwf	postinc2,w,c
 13220  000292  B4D8               	btfsc	status,2,c
 13221  000294  D024               	goto	u19290
 13222                           
 13223                           ; BSR set to: 0
 13224  000296  EE20 F009          	lfsr	2,9
 13225  00029A  51F4               	movf	mount_volume@fs& (0+255),w,b
 13226  00029C  26D9               	addwf	fsr2l,f,c
 13227  00029E  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13228  0002A0  22DA               	addwfc	fsr2h,f,c
 13229  0002A2  CFDE F0CD          	movff	postinc2,??_mount_volume
 13230  0002A6  CFDD F0CE          	movff	postdec2,??_mount_volume+1
 13231  0002AA  0EFF               	movlw	255
 13232  0002AC  6FCF               	movwf	(??_mount_volume+2)& (0+255),b
 13233  0002AE  0EFF               	movlw	255
 13234  0002B0  6FD0               	movwf	(??_mount_volume+3)& (0+255),b
 13235  0002B2  EE20 F009          	lfsr	2,9
 13236  0002B6  51F4               	movf	mount_volume@fs& (0+255),w,b
 13237  0002B8  26D9               	addwf	fsr2l,f,c
 13238  0002BA  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13239  0002BC  22DA               	addwfc	fsr2h,f,c
 13240  0002BE  CFDE F0D1          	movff	postinc2,??_mount_volume+4
 13241  0002C2  CFDD F0D2          	movff	postdec2,??_mount_volume+5
 13242  0002C6  51CF               	movf	(??_mount_volume+2)& (0+255),w,b
 13243  0002C8  27D1               	addwf	(??_mount_volume+4)& (0+255),f,b
 13244  0002CA  51D0               	movf	(??_mount_volume+3)& (0+255),w,b
 13245  0002CC  23D2               	addwfc	(??_mount_volume+5)& (0+255),f,b
 13246  0002CE  51CD               	movf	??_mount_volume& (0+255),w,b
 13247  0002D0  17D1               	andwf	(??_mount_volume+4)& (0+255),f,b
 13248  0002D2  51CE               	movf	(??_mount_volume+1)& (0+255),w,b
 13249  0002D4  17D2               	andwf	(??_mount_volume+5)& (0+255),f,b
 13250  0002D6  51D1               	movf	(??_mount_volume+4)& (0+255),w,b
 13251  0002D8  11D2               	iorwf	(??_mount_volume+5)& (0+255),w,b
 13252  0002DA  B4D8               	btfsc	status,2,c
 13253  0002DC  D002               	goto	l1378
 13254  0002DE                     u19290:
 13255                           
 13256                           ; BSR set to: 0
 13257                           
 13258                           ; BSR set to: 0
 13259  0002DE  0E0D               	movlw	13
 13260                           
 13261                           ; BSR set to: 0
 13262  0002E0  0012               	return	
 13263  0002E2                     l1378:
 13264                           
 13265                           ; BSR set to: 0
 13266                           ;ff.c: 3473: fs->n_rootdir = ld_word(fs->win + 17);
 13267                           
 13268                           ; BSR set to: 0
 13269  0002E2  0E40               	movlw	64
 13270  0002E4  25F4               	addwf	mount_volume@fs& (0+255),w,b
 13271  0002E6  6E1A               	movwf	ld_word@ptr,c
 13272  0002E8  0E00               	movlw	0
 13273  0002EA  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 13274  0002EC  6E1B               	movwf	ld_word@ptr+1,c
 13275  0002EE  EC6B  F02C         	call	_ld_word	;wreg free
 13276  0002F2  0100               	movlb	0	; () banked
 13277  0002F4  EE20 F007          	lfsr	2,7
 13278  0002F8  51F4               	movf	mount_volume@fs& (0+255),w,b
 13279  0002FA  26D9               	addwf	fsr2l,f,c
 13280  0002FC  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13281  0002FE  22DA               	addwfc	fsr2h,f,c
 13282  000300  C01A  FFDE         	movff	?_ld_word,postinc2
 13283  000304  C01B  FFDD         	movff	?_ld_word+1,postdec2
 13284                           
 13285                           ; BSR set to: 0
 13286                           ;ff.c: 3474: if (fs->n_rootdir % (((UINT)512) / 32)) return FR_NO_FILESYSTEM;
 13287  000308  EE20 F007          	lfsr	2,7
 13288  00030C  51F4               	movf	mount_volume@fs& (0+255),w,b
 13289  00030E  26D9               	addwf	fsr2l,f,c
 13290  000310  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13291  000312  22DA               	addwfc	fsr2h,f,c
 13292  000314  CFDE F0CD          	movff	postinc2,??_mount_volume
 13293  000318  CFDD F0CE          	movff	postdec2,??_mount_volume+1
 13294  00031C  0E0F               	movlw	15
 13295  00031E  17CD               	andwf	??_mount_volume& (0+255),f,b
 13296  000320  0E00               	movlw	0
 13297  000322  17CE               	andwf	(??_mount_volume+1)& (0+255),f,b
 13298  000324  51CD               	movf	??_mount_volume& (0+255),w,b
 13299  000326  11CE               	iorwf	(??_mount_volume+1)& (0+255),w,b
 13300  000328  B4D8               	btfsc	status,2,c
 13301  00032A  D002               	goto	l1381
 13302                           
 13303                           ; BSR set to: 0
 13304  00032C  0E0D               	movlw	13
 13305                           
 13306                           ; BSR set to: 0
 13307  00032E  0012               	return	
 13308  000330                     l1381:
 13309                           
 13310                           ; BSR set to: 0
 13311                           ;ff.c: 3476: tsect = ld_word(fs->win + 19);
 13312                           
 13313                           ; BSR set to: 0
 13314  000330  0E42               	movlw	66
 13315  000332  25F4               	addwf	mount_volume@fs& (0+255),w,b
 13316  000334  6E1A               	movwf	ld_word@ptr,c
 13317  000336  0E00               	movlw	0
 13318  000338  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 13319  00033A  6E1B               	movwf	ld_word@ptr+1,c
 13320  00033C  EC6B  F02C         	call	_ld_word	;wreg free
 13321  000340  C01A  F0E1         	movff	?_ld_word,mount_volume@tsect
 13322  000344  C01B  F0E2         	movff	?_ld_word+1,mount_volume@tsect+1
 13323  000348  0100               	movlb	0	; () banked
 13324  00034A  6BE3               	clrf	(mount_volume@tsect+2)& (0+255),b
 13325  00034C  6BE4               	clrf	(mount_volume@tsect+3)& (0+255),b
 13326                           
 13327                           ; BSR set to: 0
 13328                           ;ff.c: 3477: if (tsect == 0) tsect = ld_dword(fs->win + 32);
 13329  00034E  51E1               	movf	mount_volume@tsect& (0+255),w,b
 13330  000350  11E2               	iorwf	(mount_volume@tsect+1)& (0+255),w,b
 13331  000352  11E3               	iorwf	(mount_volume@tsect+2)& (0+255),w,b
 13332  000354  11E4               	iorwf	(mount_volume@tsect+3)& (0+255),w,b
 13333  000356  A4D8               	btfss	status,2,c
 13334  000358  D010               	goto	l1382
 13335                           
 13336                           ; BSR set to: 0
 13337  00035A  0E4F               	movlw	79
 13338  00035C  25F4               	addwf	mount_volume@fs& (0+255),w,b
 13339  00035E  6E1A               	movwf	ld_dword@ptr,c
 13340  000360  0E00               	movlw	0
 13341  000362  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 13342  000364  6E1B               	movwf	ld_dword@ptr+1,c
 13343  000366  EC54  F025         	call	_ld_dword	;wreg free
 13344  00036A  C01A  F0E1         	movff	?_ld_dword,mount_volume@tsect
 13345  00036E  C01B  F0E2         	movff	?_ld_dword+1,mount_volume@tsect+1
 13346  000372  C01C  F0E3         	movff	?_ld_dword+2,mount_volume@tsect+2
 13347  000376  C01D  F0E4         	movff	?_ld_dword+3,mount_volume@tsect+3
 13348  00037A                     l1382:
 13349                           
 13350                           ;ff.c: 3479: nrsv = ld_word(fs->win + 14);
 13351  00037A  0E3D               	movlw	61
 13352  00037C  0100               	movlb	0	; () banked
 13353  00037E  25F4               	addwf	mount_volume@fs& (0+255),w,b
 13354  000380  6E1A               	movwf	ld_word@ptr,c
 13355  000382  0E00               	movlw	0
 13356  000384  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 13357  000386  6E1B               	movwf	ld_word@ptr+1,c
 13358  000388  EC6B  F02C         	call	_ld_word	;wreg free
 13359  00038C  C01A  F0DF         	movff	?_ld_word,mount_volume@nrsv
 13360  000390  C01B  F0E0         	movff	?_ld_word+1,mount_volume@nrsv+1
 13361                           
 13362                           ;ff.c: 3480: if (nrsv == 0) return FR_NO_FILESYSTEM;
 13363  000394  0100               	movlb	0	; () banked
 13364  000396  51DF               	movf	mount_volume@nrsv& (0+255),w,b
 13365  000398  11E0               	iorwf	(mount_volume@nrsv+1)& (0+255),w,b
 13366  00039A  A4D8               	btfss	status,2,c
 13367  00039C  D002               	goto	l1383
 13368                           
 13369                           ; BSR set to: 0
 13370  00039E  0E0D               	movlw	13
 13371                           
 13372                           ; BSR set to: 0
 13373  0003A0  0012               	return	
 13374  0003A2                     l1383:
 13375                           
 13376                           ; BSR set to: 0
 13377                           ;ff.c: 3483: sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
 13378                           
 13379                           ; BSR set to: 0
 13380  0003A2  EE20 F007          	lfsr	2,7
 13381  0003A6  51F4               	movf	mount_volume@fs& (0+255),w,b
 13382  0003A8  26D9               	addwf	fsr2l,f,c
 13383  0003AA  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13384  0003AC  22DA               	addwfc	fsr2h,f,c
 13385  0003AE  CFDE F0CD          	movff	postinc2,??_mount_volume
 13386  0003B2  CFDD F0CE          	movff	postdec2,??_mount_volume+1
 13387  0003B6  0E04               	movlw	4
 13388  0003B8  6FCF               	movwf	(??_mount_volume+2)& (0+255),b
 13389  0003BA                     u19335:
 13390  0003BA  90D8               	bcf	status,0,c
 13391  0003BC  33CE               	rrcf	(??_mount_volume+1)& (0+255),f,b
 13392  0003BE  33CD               	rrcf	??_mount_volume& (0+255),f,b
 13393  0003C0  2FCF               	decfsz	(??_mount_volume+2)& (0+255),f,b
 13394  0003C2  D7FB               	goto	u19335
 13395  0003C4  51DF               	movf	mount_volume@nrsv& (0+255),w,b
 13396  0003C6  25CD               	addwf	??_mount_volume& (0+255),w,b
 13397  0003C8  6FD0               	movwf	(??_mount_volume+3)& (0+255),b
 13398  0003CA  51E0               	movf	(mount_volume@nrsv+1)& (0+255),w,b
 13399  0003CC  21CE               	addwfc	(??_mount_volume+1)& (0+255),w,b
 13400  0003CE  6FD1               	movwf	(??_mount_volume+4)& (0+255),b
 13401  0003D0  6BD2               	clrf	(??_mount_volume+5)& (0+255),b
 13402  0003D2  B0D8               	btfsc	status,0,c
 13403  0003D4  2BD2               	incf	(??_mount_volume+5)& (0+255),f,b
 13404  0003D6  6BD3               	clrf	(??_mount_volume+6)& (0+255),b
 13405  0003D8  51EE               	movf	mount_volume@fasize& (0+255),w,b
 13406  0003DA  25D0               	addwf	(??_mount_volume+3)& (0+255),w,b
 13407  0003DC  6FD9               	movwf	mount_volume@sysect& (0+255),b
 13408  0003DE  51EF               	movf	(mount_volume@fasize+1)& (0+255),w,b
 13409  0003E0  21D1               	addwfc	(??_mount_volume+4)& (0+255),w,b
 13410  0003E2  6FDA               	movwf	(mount_volume@sysect+1)& (0+255),b
 13411  0003E4  51F0               	movf	(mount_volume@fasize+2)& (0+255),w,b
 13412  0003E6  21D2               	addwfc	(??_mount_volume+5)& (0+255),w,b
 13413  0003E8  6FDB               	movwf	(mount_volume@sysect+2)& (0+255),b
 13414  0003EA  51F1               	movf	(mount_volume@fasize+3)& (0+255),w,b
 13415  0003EC  21D3               	addwfc	(??_mount_volume+6)& (0+255),w,b
 13416  0003EE  6FDC               	movwf	(mount_volume@sysect+3)& (0+255),b
 13417                           
 13418                           ; BSR set to: 0
 13419                           ;ff.c: 3484: if (tsect < sysect) return FR_NO_FILESYSTEM;
 13420  0003F0  51D9               	movf	mount_volume@sysect& (0+255),w,b
 13421  0003F2  5DE1               	subwf	mount_volume@tsect& (0+255),w,b
 13422  0003F4  51DA               	movf	(mount_volume@sysect+1)& (0+255),w,b
 13423  0003F6  59E2               	subwfb	(mount_volume@tsect+1)& (0+255),w,b
 13424  0003F8  51DB               	movf	(mount_volume@sysect+2)& (0+255),w,b
 13425  0003FA  59E3               	subwfb	(mount_volume@tsect+2)& (0+255),w,b
 13426  0003FC  51DC               	movf	(mount_volume@sysect+3)& (0+255),w,b
 13427  0003FE  59E4               	subwfb	(mount_volume@tsect+3)& (0+255),w,b
 13428  000400  B0D8               	btfsc	status,0,c
 13429  000402  D002               	goto	l1384
 13430                           
 13431                           ; BSR set to: 0
 13432  000404  0E0D               	movlw	13
 13433                           
 13434                           ; BSR set to: 0
 13435  000406  0012               	return	
 13436  000408                     l1384:
 13437                           
 13438                           ; BSR set to: 0
 13439                           ;ff.c: 3485: nclst = (tsect - sysect) / fs->csize;
 13440                           
 13441                           ; BSR set to: 0
 13442  000408  C0D9  F0CD         	movff	mount_volume@sysect,??_mount_volume
 13443  00040C  C0DA  F0CE         	movff	mount_volume@sysect+1,??_mount_volume+1
 13444  000410  C0DB  F0CF         	movff	mount_volume@sysect+2,??_mount_volume+2
 13445  000414  C0DC  F0D0         	movff	mount_volume@sysect+3,??_mount_volume+3
 13446  000418  1FCD               	comf	??_mount_volume& (0+255),f,b
 13447  00041A  1FCE               	comf	(??_mount_volume+1)& (0+255),f,b
 13448  00041C  1FCF               	comf	(??_mount_volume+2)& (0+255),f,b
 13449  00041E  1FD0               	comf	(??_mount_volume+3)& (0+255),f,b
 13450  000420  2BCD               	incf	??_mount_volume& (0+255),f,b
 13451  000422  0E00               	movlw	0
 13452  000424  23CE               	addwfc	(??_mount_volume+1)& (0+255),f,b
 13453  000426  23CF               	addwfc	(??_mount_volume+2)& (0+255),f,b
 13454  000428  23D0               	addwfc	(??_mount_volume+3)& (0+255),f,b
 13455  00042A  51E1               	movf	mount_volume@tsect& (0+255),w,b
 13456  00042C  25CD               	addwf	??_mount_volume& (0+255),w,b
 13457  00042E  6E1A               	movwf	___lldiv@dividend,c
 13458  000430  51E2               	movf	(mount_volume@tsect+1)& (0+255),w,b
 13459  000432  21CE               	addwfc	(??_mount_volume+1)& (0+255),w,b
 13460  000434  6E1B               	movwf	___lldiv@dividend+1,c
 13461  000436  51E3               	movf	(mount_volume@tsect+2)& (0+255),w,b
 13462  000438  21CF               	addwfc	(??_mount_volume+2)& (0+255),w,b
 13463  00043A  6E1C               	movwf	___lldiv@dividend+2,c
 13464  00043C  51E4               	movf	(mount_volume@tsect+3)& (0+255),w,b
 13465  00043E  21D0               	addwfc	(??_mount_volume+3)& (0+255),w,b
 13466  000440  6E1D               	movwf	___lldiv@dividend+3,c
 13467  000442  EE20 F009          	lfsr	2,9
 13468  000446  51F4               	movf	mount_volume@fs& (0+255),w,b
 13469  000448  26D9               	addwf	fsr2l,f,c
 13470  00044A  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13471  00044C  22DA               	addwfc	fsr2h,f,c
 13472  00044E  CFDE F0D1          	movff	postinc2,??_mount_volume+4
 13473  000452  CFDD F0D2          	movff	postdec2,??_mount_volume+5
 13474  000456  C0D1  F01E         	movff	??_mount_volume+4,___lldiv@divisor
 13475  00045A  C0D2  F01F         	movff	??_mount_volume+5,___lldiv@divisor+1
 13476  00045E  6A20               	clrf	___lldiv@divisor+2,c
 13477  000460  6A21               	clrf	___lldiv@divisor+3,c
 13478  000462  EC72  F028         	call	___lldiv	;wreg free
 13479  000466  C01A  F0EA         	movff	?___lldiv,mount_volume@nclst
 13480  00046A  C01B  F0EB         	movff	?___lldiv+1,mount_volume@nclst+1
 13481  00046E  C01C  F0EC         	movff	?___lldiv+2,mount_volume@nclst+2
 13482  000472  C01D  F0ED         	movff	?___lldiv+3,mount_volume@nclst+3
 13483                           
 13484                           ;ff.c: 3486: if (nclst == 0) return FR_NO_FILESYSTEM;
 13485  000476  0100               	movlb	0	; () banked
 13486  000478  51EA               	movf	mount_volume@nclst& (0+255),w,b
 13487  00047A  11EB               	iorwf	(mount_volume@nclst+1)& (0+255),w,b
 13488  00047C  11EC               	iorwf	(mount_volume@nclst+2)& (0+255),w,b
 13489  00047E  11ED               	iorwf	(mount_volume@nclst+3)& (0+255),w,b
 13490  000480  A4D8               	btfss	status,2,c
 13491  000482  D002               	goto	l1385
 13492                           
 13493                           ; BSR set to: 0
 13494  000484  0E0D               	movlw	13
 13495                           
 13496                           ; BSR set to: 0
 13497  000486  0012               	return	
 13498  000488                     l1385:
 13499                           
 13500                           ; BSR set to: 0
 13501                           ;ff.c: 3487: fmt = 0;
 13502                           
 13503                           ; BSR set to: 0
 13504  000488  0E00               	movlw	0
 13505  00048A  6FF3               	movwf	(mount_volume@fmt+1)& (0+255),b
 13506  00048C  0E00               	movlw	0
 13507  00048E  6FF2               	movwf	mount_volume@fmt& (0+255),b
 13508                           
 13509                           ; BSR set to: 0
 13510                           ;ff.c: 3488: if (nclst <= 0x0FFFFFF5) fmt = 3;
 13511  000490  0EF6               	movlw	246
 13512  000492  5DEA               	subwf	mount_volume@nclst& (0+255),w,b
 13513  000494  0EFF               	movlw	255
 13514  000496  59EB               	subwfb	(mount_volume@nclst+1)& (0+255),w,b
 13515  000498  0EFF               	movlw	255
 13516  00049A  59EC               	subwfb	(mount_volume@nclst+2)& (0+255),w,b
 13517  00049C  0E0F               	movlw	15
 13518  00049E  59ED               	subwfb	(mount_volume@nclst+3)& (0+255),w,b
 13519  0004A0  B0D8               	btfsc	status,0,c
 13520  0004A2  D004               	goto	l1386
 13521                           
 13522                           ; BSR set to: 0
 13523  0004A4  0E00               	movlw	0
 13524  0004A6  6FF3               	movwf	(mount_volume@fmt+1)& (0+255),b
 13525  0004A8  0E03               	movlw	3
 13526  0004AA  6FF2               	movwf	mount_volume@fmt& (0+255),b
 13527  0004AC                     l1386:
 13528                           
 13529                           ; BSR set to: 0
 13530                           ;ff.c: 3489: if (nclst <= 0xFFF5) fmt = 2;
 13531                           
 13532                           ; BSR set to: 0
 13533  0004AC  51ED               	movf	(mount_volume@nclst+3)& (0+255),w,b
 13534  0004AE  11EC               	iorwf	(mount_volume@nclst+2)& (0+255),w,b
 13535  0004B0  E10A               	bnz	l14672
 13536  0004B2  0EF6               	movlw	246
 13537  0004B4  5DEA               	subwf	mount_volume@nclst& (0+255),w,b
 13538  0004B6  0EFF               	movlw	255
 13539  0004B8  59EB               	subwfb	(mount_volume@nclst+1)& (0+255),w,b
 13540  0004BA  B0D8               	btfsc	status,0,c
 13541  0004BC  D004               	goto	l1387
 13542                           
 13543                           ; BSR set to: 0
 13544  0004BE  0E00               	movlw	0
 13545  0004C0  6FF3               	movwf	(mount_volume@fmt+1)& (0+255),b
 13546  0004C2  0E02               	movlw	2
 13547  0004C4  6FF2               	movwf	mount_volume@fmt& (0+255),b
 13548  0004C6                     l1387:
 13549  0004C6                     l14672:
 13550                           
 13551                           ; BSR set to: 0
 13552                           ;ff.c: 3490: if (nclst <= 0xFF5) fmt = 1;
 13553  0004C6  51ED               	movf	(mount_volume@nclst+3)& (0+255),w,b
 13554  0004C8  11EC               	iorwf	(mount_volume@nclst+2)& (0+255),w,b
 13555  0004CA  E10A               	bnz	l14676
 13556  0004CC  0EF6               	movlw	246
 13557  0004CE  5DEA               	subwf	mount_volume@nclst& (0+255),w,b
 13558  0004D0  0E0F               	movlw	15
 13559  0004D2  59EB               	subwfb	(mount_volume@nclst+1)& (0+255),w,b
 13560  0004D4  B0D8               	btfsc	status,0,c
 13561  0004D6  D004               	goto	l1388
 13562                           
 13563                           ; BSR set to: 0
 13564  0004D8  0E00               	movlw	0
 13565  0004DA  6FF3               	movwf	(mount_volume@fmt+1)& (0+255),b
 13566  0004DC  0E01               	movlw	1
 13567  0004DE  6FF2               	movwf	mount_volume@fmt& (0+255),b
 13568  0004E0                     l1388:
 13569  0004E0                     l14676:
 13570                           
 13571                           ; BSR set to: 0
 13572                           ;ff.c: 3491: if (fmt == 0) return FR_NO_FILESYSTEM;
 13573  0004E0  51F2               	movf	mount_volume@fmt& (0+255),w,b
 13574  0004E2  11F3               	iorwf	(mount_volume@fmt+1)& (0+255),w,b
 13575  0004E4  A4D8               	btfss	status,2,c
 13576  0004E6  D002               	goto	l1389
 13577                           
 13578                           ; BSR set to: 0
 13579  0004E8  0E0D               	movlw	13
 13580                           
 13581                           ; BSR set to: 0
 13582  0004EA  0012               	return	
 13583  0004EC                     l1389:
 13584                           
 13585                           ; BSR set to: 0
 13586                           ;ff.c: 3494: fs->n_fatent = nclst + 2;
 13587                           
 13588                           ; BSR set to: 0
 13589  0004EC  0E02               	movlw	2
 13590  0004EE  25EA               	addwf	mount_volume@nclst& (0+255),w,b
 13591  0004F0  6FCD               	movwf	??_mount_volume& (0+255),b
 13592  0004F2  0E00               	movlw	0
 13593  0004F4  21EB               	addwfc	(mount_volume@nclst+1)& (0+255),w,b
 13594  0004F6  6FCE               	movwf	(??_mount_volume+1)& (0+255),b
 13595  0004F8  0E00               	movlw	0
 13596  0004FA  21EC               	addwfc	(mount_volume@nclst+2)& (0+255),w,b
 13597  0004FC  6FCF               	movwf	(??_mount_volume+2)& (0+255),b
 13598  0004FE  0E00               	movlw	0
 13599  000500  21ED               	addwfc	(mount_volume@nclst+3)& (0+255),w,b
 13600  000502  6FD0               	movwf	(??_mount_volume+3)& (0+255),b
 13601  000504  EE20 F013          	lfsr	2,19
 13602  000508  51F4               	movf	mount_volume@fs& (0+255),w,b
 13603  00050A  26D9               	addwf	fsr2l,f,c
 13604  00050C  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13605  00050E  22DA               	addwfc	fsr2h,f,c
 13606  000510  C0CD  FFDE         	movff	??_mount_volume,postinc2
 13607  000514  C0CE  FFDE         	movff	??_mount_volume+1,postinc2
 13608  000518  C0CF  FFDE         	movff	??_mount_volume+2,postinc2
 13609  00051C  C0D0  FFDE         	movff	??_mount_volume+3,postinc2
 13610                           
 13611                           ;ff.c: 3495: fs->volbase = bsect;
 13612  000520  EE20 F01B          	lfsr	2,27
 13613  000524  51F4               	movf	mount_volume@fs& (0+255),w,b
 13614  000526  26D9               	addwf	fsr2l,f,c
 13615  000528  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13616  00052A  22DA               	addwfc	fsr2h,f,c
 13617  00052C  C0E5  FFDE         	movff	mount_volume@bsect,postinc2
 13618  000530  C0E6  FFDE         	movff	mount_volume@bsect+1,postinc2
 13619  000534  C0E7  FFDE         	movff	mount_volume@bsect+2,postinc2
 13620  000538  C0E8  FFDE         	movff	mount_volume@bsect+3,postinc2
 13621                           
 13622                           ;ff.c: 3496: fs->fatbase = bsect + nrsv;
 13623  00053C  51DF               	movf	mount_volume@nrsv& (0+255),w,b
 13624  00053E  25E5               	addwf	mount_volume@bsect& (0+255),w,b
 13625  000540  6FCD               	movwf	??_mount_volume& (0+255),b
 13626  000542  51E0               	movf	(mount_volume@nrsv+1)& (0+255),w,b
 13627  000544  21E6               	addwfc	(mount_volume@bsect+1)& (0+255),w,b
 13628  000546  6FCE               	movwf	(??_mount_volume+1)& (0+255),b
 13629  000548  0E00               	movlw	0
 13630  00054A  21E7               	addwfc	(mount_volume@bsect+2)& (0+255),w,b
 13631  00054C  6FCF               	movwf	(??_mount_volume+2)& (0+255),b
 13632  00054E  0E00               	movlw	0
 13633  000550  21E8               	addwfc	(mount_volume@bsect+3)& (0+255),w,b
 13634  000552  6FD0               	movwf	(??_mount_volume+3)& (0+255),b
 13635  000554  EE20 F01F          	lfsr	2,31
 13636  000558  51F4               	movf	mount_volume@fs& (0+255),w,b
 13637  00055A  26D9               	addwf	fsr2l,f,c
 13638  00055C  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13639  00055E  22DA               	addwfc	fsr2h,f,c
 13640  000560  C0CD  FFDE         	movff	??_mount_volume,postinc2
 13641  000564  C0CE  FFDE         	movff	??_mount_volume+1,postinc2
 13642  000568  C0CF  FFDE         	movff	??_mount_volume+2,postinc2
 13643  00056C  C0D0  FFDE         	movff	??_mount_volume+3,postinc2
 13644                           
 13645                           ;ff.c: 3497: fs->database = bsect + sysect;
 13646  000570  51D9               	movf	mount_volume@sysect& (0+255),w,b
 13647  000572  25E5               	addwf	mount_volume@bsect& (0+255),w,b
 13648  000574  6FCD               	movwf	??_mount_volume& (0+255),b
 13649  000576  51DA               	movf	(mount_volume@sysect+1)& (0+255),w,b
 13650  000578  21E6               	addwfc	(mount_volume@bsect+1)& (0+255),w,b
 13651  00057A  6FCE               	movwf	(??_mount_volume+1)& (0+255),b
 13652  00057C  51DB               	movf	(mount_volume@sysect+2)& (0+255),w,b
 13653  00057E  21E7               	addwfc	(mount_volume@bsect+2)& (0+255),w,b
 13654  000580  6FCF               	movwf	(??_mount_volume+2)& (0+255),b
 13655  000582  51DC               	movf	(mount_volume@sysect+3)& (0+255),w,b
 13656  000584  21E8               	addwfc	(mount_volume@bsect+3)& (0+255),w,b
 13657  000586  6FD0               	movwf	(??_mount_volume+3)& (0+255),b
 13658  000588  EE20 F027          	lfsr	2,39
 13659  00058C  51F4               	movf	mount_volume@fs& (0+255),w,b
 13660  00058E  26D9               	addwf	fsr2l,f,c
 13661  000590  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13662  000592  22DA               	addwfc	fsr2h,f,c
 13663  000594  C0CD  FFDE         	movff	??_mount_volume,postinc2
 13664  000598  C0CE  FFDE         	movff	??_mount_volume+1,postinc2
 13665  00059C  C0CF  FFDE         	movff	??_mount_volume+2,postinc2
 13666  0005A0  C0D0  FFDE         	movff	??_mount_volume+3,postinc2
 13667                           
 13668                           ; BSR set to: 0
 13669                           ;ff.c: 3498: if (fmt == 3) {
 13670  0005A4  0E03               	movlw	3
 13671  0005A6  19F2               	xorwf	mount_volume@fmt& (0+255),w,b
 13672  0005A8  11F3               	iorwf	(mount_volume@fmt+1)& (0+255),w,b
 13673  0005AA  A4D8               	btfss	status,2,c
 13674  0005AC  D051               	goto	l1390
 13675                           
 13676                           ; BSR set to: 0
 13677                           ;ff.c: 3499: if (ld_word(fs->win + 42) != 0) return FR_NO_FILESYSTEM;
 13678  0005AE  0E59               	movlw	89
 13679  0005B0  25F4               	addwf	mount_volume@fs& (0+255),w,b
 13680  0005B2  6E1A               	movwf	ld_word@ptr,c
 13681  0005B4  0E00               	movlw	0
 13682  0005B6  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 13683  0005B8  6E1B               	movwf	ld_word@ptr+1,c
 13684  0005BA  EC6B  F02C         	call	_ld_word	;wreg free
 13685  0005BE  501A               	movf	?_ld_word,w,c
 13686  0005C0  101B               	iorwf	?_ld_word+1,w,c
 13687  0005C2  B4D8               	btfsc	status,2,c
 13688  0005C4  D002               	goto	l1391
 13689  0005C6  0E0D               	movlw	13
 13690  0005C8  0012               	return	
 13691  0005CA                     l1391:
 13692                           
 13693                           ;ff.c: 3500: if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;
 13694  0005CA  0100               	movlb	0	; () banked
 13695  0005CC  EE20 F007          	lfsr	2,7
 13696  0005D0  51F4               	movf	mount_volume@fs& (0+255),w,b
 13697  0005D2  26D9               	addwf	fsr2l,f,c
 13698  0005D4  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13699  0005D6  22DA               	addwfc	fsr2h,f,c
 13700  0005D8  50DE               	movf	postinc2,w,c
 13701  0005DA  10DE               	iorwf	postinc2,w,c
 13702  0005DC  B4D8               	btfsc	status,2,c
 13703  0005DE  D002               	goto	l1392
 13704                           
 13705                           ; BSR set to: 0
 13706  0005E0  0E0D               	movlw	13
 13707                           
 13708                           ; BSR set to: 0
 13709  0005E2  0012               	return	
 13710  0005E4                     l1392:
 13711                           
 13712                           ; BSR set to: 0
 13713                           ;ff.c: 3501: fs->dirbase = ld_dword(fs->win + 44);
 13714                           
 13715                           ; BSR set to: 0
 13716  0005E4  0E5B               	movlw	91
 13717  0005E6  25F4               	addwf	mount_volume@fs& (0+255),w,b
 13718  0005E8  6E1A               	movwf	ld_dword@ptr,c
 13719  0005EA  0E00               	movlw	0
 13720  0005EC  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 13721  0005EE  6E1B               	movwf	ld_dword@ptr+1,c
 13722  0005F0  EC54  F025         	call	_ld_dword	;wreg free
 13723  0005F4  0100               	movlb	0	; () banked
 13724  0005F6  EE20 F023          	lfsr	2,35
 13725  0005FA  51F4               	movf	mount_volume@fs& (0+255),w,b
 13726  0005FC  26D9               	addwf	fsr2l,f,c
 13727  0005FE  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13728  000600  22DA               	addwfc	fsr2h,f,c
 13729  000602  C01A  FFDE         	movff	?_ld_dword,postinc2
 13730  000606  C01B  FFDE         	movff	?_ld_dword+1,postinc2
 13731  00060A  C01C  FFDE         	movff	?_ld_dword+2,postinc2
 13732  00060E  C01D  FFDE         	movff	?_ld_dword+3,postinc2
 13733                           
 13734                           ; BSR set to: 0
 13735                           ;ff.c: 3502: szbfat = fs->n_fatent * 4;
 13736  000612  EE20 F013          	lfsr	2,19
 13737  000616  51F4               	movf	mount_volume@fs& (0+255),w,b
 13738  000618  26D9               	addwf	fsr2l,f,c
 13739  00061A  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13740  00061C  22DA               	addwfc	fsr2h,f,c
 13741  00061E  CFDE F0CD          	movff	postinc2,??_mount_volume
 13742  000622  CFDE F0CE          	movff	postinc2,??_mount_volume+1
 13743  000626  CFDE F0CF          	movff	postinc2,??_mount_volume+2
 13744  00062A  CFDE F0D0          	movff	postinc2,??_mount_volume+3
 13745  00062E  0E02               	movlw	2
 13746  000630                     u19435:
 13747  000630  90D8               	bcf	status,0,c
 13748  000632  37CD               	rlcf	??_mount_volume& (0+255),f,b
 13749  000634  37CE               	rlcf	(??_mount_volume+1)& (0+255),f,b
 13750  000636  37CF               	rlcf	(??_mount_volume+2)& (0+255),f,b
 13751  000638  37D0               	rlcf	(??_mount_volume+3)& (0+255),f,b
 13752  00063A  2EE8               	decfsz	wreg,f,c
 13753  00063C  D7F9               	goto	u19435
 13754  00063E  C0CD  F0D5         	movff	??_mount_volume,mount_volume@szbfat
 13755  000642  C0CE  F0D6         	movff	??_mount_volume+1,mount_volume@szbfat+1
 13756  000646  C0CF  F0D7         	movff	??_mount_volume+2,mount_volume@szbfat+2
 13757  00064A  C0D0  F0D8         	movff	??_mount_volume+3,mount_volume@szbfat+3
 13758                           
 13759                           ;ff.c: 3503: } else {
 13760  00064E  D094               	goto	l1398
 13761  000650                     l1390:
 13762                           
 13763                           ; BSR set to: 0
 13764                           ;ff.c: 3504: if (fs->n_rootdir == 0) return FR_NO_FILESYSTEM;
 13765                           
 13766                           ; BSR set to: 0
 13767  000650  EE20 F007          	lfsr	2,7
 13768  000654  51F4               	movf	mount_volume@fs& (0+255),w,b
 13769  000656  26D9               	addwf	fsr2l,f,c
 13770  000658  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13771  00065A  22DA               	addwfc	fsr2h,f,c
 13772  00065C  50DE               	movf	postinc2,w,c
 13773  00065E  10DE               	iorwf	postinc2,w,c
 13774  000660  A4D8               	btfss	status,2,c
 13775  000662  D002               	goto	l1394
 13776                           
 13777                           ; BSR set to: 0
 13778  000664  0E0D               	movlw	13
 13779                           
 13780                           ; BSR set to: 0
 13781  000666  0012               	return	
 13782  000668                     l1394:
 13783                           
 13784                           ; BSR set to: 0
 13785                           ;ff.c: 3505: fs->dirbase = fs->fatbase + fasize;
 13786                           
 13787                           ; BSR set to: 0
 13788  000668  EE20 F01F          	lfsr	2,31
 13789  00066C  51F4               	movf	mount_volume@fs& (0+255),w,b
 13790  00066E  26D9               	addwf	fsr2l,f,c
 13791  000670  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13792  000672  22DA               	addwfc	fsr2h,f,c
 13793  000674  CFDE F0CD          	movff	postinc2,??_mount_volume
 13794  000678  CFDE F0CE          	movff	postinc2,??_mount_volume+1
 13795  00067C  CFDE F0CF          	movff	postinc2,??_mount_volume+2
 13796  000680  CFDE F0D0          	movff	postinc2,??_mount_volume+3
 13797  000684  51EE               	movf	mount_volume@fasize& (0+255),w,b
 13798  000686  25CD               	addwf	??_mount_volume& (0+255),w,b
 13799  000688  6FD1               	movwf	(??_mount_volume+4)& (0+255),b
 13800  00068A  51EF               	movf	(mount_volume@fasize+1)& (0+255),w,b
 13801  00068C  21CE               	addwfc	(??_mount_volume+1)& (0+255),w,b
 13802  00068E  6FD2               	movwf	(??_mount_volume+5)& (0+255),b
 13803  000690  51F0               	movf	(mount_volume@fasize+2)& (0+255),w,b
 13804  000692  21CF               	addwfc	(??_mount_volume+2)& (0+255),w,b
 13805  000694  6FD3               	movwf	(??_mount_volume+6)& (0+255),b
 13806  000696  51F1               	movf	(mount_volume@fasize+3)& (0+255),w,b
 13807  000698  21D0               	addwfc	(??_mount_volume+3)& (0+255),w,b
 13808  00069A  6FD4               	movwf	(??_mount_volume+7)& (0+255),b
 13809  00069C  EE20 F023          	lfsr	2,35
 13810  0006A0  51F4               	movf	mount_volume@fs& (0+255),w,b
 13811  0006A2  26D9               	addwf	fsr2l,f,c
 13812  0006A4  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13813  0006A6  22DA               	addwfc	fsr2h,f,c
 13814  0006A8  C0D1  FFDE         	movff	??_mount_volume+4,postinc2
 13815  0006AC  C0D2  FFDE         	movff	??_mount_volume+5,postinc2
 13816  0006B0  C0D3  FFDE         	movff	??_mount_volume+6,postinc2
 13817  0006B4  C0D4  FFDE         	movff	??_mount_volume+7,postinc2
 13818                           
 13819                           ; BSR set to: 0
 13820                           ;ff.c: 3506: szbfat = (fmt == 2) ?
 13821                           ;ff.c: 3507: fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 13822  0006B8  0E02               	movlw	2
 13823  0006BA  19F2               	xorwf	mount_volume@fmt& (0+255),w,b
 13824  0006BC  11F3               	iorwf	(mount_volume@fmt+1)& (0+255),w,b
 13825  0006BE  B4D8               	btfsc	status,2,c
 13826  0006C0  D044               	goto	l1396
 13827                           
 13828                           ; BSR set to: 0
 13829  0006C2  EE20 F013          	lfsr	2,19
 13830  0006C6  51F4               	movf	mount_volume@fs& (0+255),w,b
 13831  0006C8  26D9               	addwf	fsr2l,f,c
 13832  0006CA  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13833  0006CC  22DA               	addwfc	fsr2h,f,c
 13834  0006CE  CFDE F0CD          	movff	postinc2,??_mount_volume
 13835  0006D2  CFDE F0CE          	movff	postinc2,??_mount_volume+1
 13836  0006D6  CFDE F0CF          	movff	postinc2,??_mount_volume+2
 13837  0006DA  CFDE F0D0          	movff	postinc2,??_mount_volume+3
 13838  0006DE  0E01               	movlw	1
 13839  0006E0  15CD               	andwf	??_mount_volume& (0+255),w,b
 13840  0006E2  6FD1               	movwf	(??_mount_volume+4)& (0+255),b
 13841  0006E4  0E00               	movlw	0
 13842  0006E6  15CE               	andwf	(??_mount_volume+1)& (0+255),w,b
 13843  0006E8  6FD2               	movwf	(??_mount_volume+5)& (0+255),b
 13844  0006EA  0E00               	movlw	0
 13845  0006EC  15CF               	andwf	(??_mount_volume+2)& (0+255),w,b
 13846  0006EE  6FD3               	movwf	(??_mount_volume+6)& (0+255),b
 13847  0006F0  0E00               	movlw	0
 13848  0006F2  15D0               	andwf	(??_mount_volume+3)& (0+255),w,b
 13849  0006F4  6FD4               	movwf	(??_mount_volume+7)& (0+255),b
 13850  0006F6  EE20 F013          	lfsr	2,19
 13851  0006FA  51F4               	movf	mount_volume@fs& (0+255),w,b
 13852  0006FC  26D9               	addwf	fsr2l,f,c
 13853  0006FE  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13854  000700  22DA               	addwfc	fsr2h,f,c
 13855  000702  CFDE F01A          	movff	postinc2,___lmul@multiplier
 13856  000706  CFDE F01B          	movff	postinc2,___lmul@multiplier+1
 13857  00070A  CFDE F01C          	movff	postinc2,___lmul@multiplier+2
 13858  00070E  CFDE F01D          	movff	postinc2,___lmul@multiplier+3
 13859  000712  0E03               	movlw	3
 13860  000714  6E1E               	movwf	___lmul@multiplicand,c
 13861  000716  0E00               	movlw	0
 13862  000718  6E1F               	movwf	___lmul@multiplicand+1,c
 13863  00071A  0E00               	movlw	0
 13864  00071C  6E20               	movwf	___lmul@multiplicand+2,c
 13865  00071E  0E00               	movlw	0
 13866  000720  6E21               	movwf	___lmul@multiplicand+3,c
 13867  000722  ECC9  F02A         	call	___lmul	;wreg free
 13868  000726  90D8               	bcf	status,0,c
 13869  000728  321D               	rrcf	?___lmul+3,f,c
 13870  00072A  321C               	rrcf	?___lmul+2,f,c
 13871  00072C  321B               	rrcf	?___lmul+1,f,c
 13872  00072E  321A               	rrcf	?___lmul,f,c
 13873  000730  0100               	movlb	0	; () banked
 13874  000732  51D1               	movf	(??_mount_volume+4)& (0+255),w,b
 13875  000734  241A               	addwf	?___lmul,w,c
 13876  000736  6FD5               	movwf	mount_volume@szbfat& (0+255),b
 13877  000738  51D2               	movf	(??_mount_volume+5)& (0+255),w,b
 13878  00073A  201B               	addwfc	?___lmul+1,w,c
 13879  00073C  6FD6               	movwf	(mount_volume@szbfat+1)& (0+255),b
 13880  00073E  51D3               	movf	(??_mount_volume+6)& (0+255),w,b
 13881  000740  201C               	addwfc	?___lmul+2,w,c
 13882  000742  6FD7               	movwf	(mount_volume@szbfat+2)& (0+255),b
 13883  000744  51D4               	movf	(??_mount_volume+7)& (0+255),w,b
 13884  000746  201D               	addwfc	?___lmul+3,w,c
 13885  000748  D016               	goto	L18
 13886  00074A                     l1396:
 13887                           
 13888                           ; BSR set to: 0
 13889                           
 13890                           ; BSR set to: 0
 13891  00074A  EE20 F013          	lfsr	2,19
 13892  00074E  51F4               	movf	mount_volume@fs& (0+255),w,b
 13893  000750  26D9               	addwf	fsr2l,f,c
 13894  000752  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13895  000754  22DA               	addwfc	fsr2h,f,c
 13896  000756  CFDE F0CD          	movff	postinc2,??_mount_volume
 13897  00075A  CFDE F0CE          	movff	postinc2,??_mount_volume+1
 13898  00075E  CFDE F0CF          	movff	postinc2,??_mount_volume+2
 13899  000762  CFDE F0D0          	movff	postinc2,??_mount_volume+3
 13900  000766  90D8               	bcf	status,0,c
 13901  000768  35CD               	rlcf	??_mount_volume& (0+255),w,b
 13902  00076A  6FD5               	movwf	mount_volume@szbfat& (0+255),b
 13903  00076C  35CE               	rlcf	(??_mount_volume+1)& (0+255),w,b
 13904  00076E  6FD6               	movwf	(mount_volume@szbfat+1)& (0+255),b
 13905  000770  35CF               	rlcf	(??_mount_volume+2)& (0+255),w,b
 13906  000772  6FD7               	movwf	(mount_volume@szbfat+2)& (0+255),b
 13907  000774  35D0               	rlcf	(??_mount_volume+3)& (0+255),w,b
 13908  000776                     L18:
 13909  000776  6FD8               	movwf	(mount_volume@szbfat+3)& (0+255),b
 13910  000778                     l1398:
 13911                           
 13912                           ; BSR set to: 0
 13913                           ;ff.c: 3508: }
 13914                           ;ff.c: 3509: if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512)) return FR_NO_FI
      +                          LESYSTEM;
 13915                           
 13916                           ; BSR set to: 0
 13917  000778  0EFF               	movlw	255
 13918  00077A  25D5               	addwf	mount_volume@szbfat& (0+255),w,b
 13919  00077C  6FCD               	movwf	??_mount_volume& (0+255),b
 13920  00077E  0E01               	movlw	1
 13921  000780  21D6               	addwfc	(mount_volume@szbfat+1)& (0+255),w,b
 13922  000782  6FCE               	movwf	(??_mount_volume+1)& (0+255),b
 13923  000784  0E00               	movlw	0
 13924  000786  21D7               	addwfc	(mount_volume@szbfat+2)& (0+255),w,b
 13925  000788  6FCF               	movwf	(??_mount_volume+2)& (0+255),b
 13926  00078A  0E00               	movlw	0
 13927  00078C  21D8               	addwfc	(mount_volume@szbfat+3)& (0+255),w,b
 13928  00078E  6FD0               	movwf	(??_mount_volume+3)& (0+255),b
 13929  000790  0E0A               	movlw	10
 13930  000792  D005               	goto	u19460
 13931  000794                     u19465:
 13932  000794  90D8               	bcf	status,0,c
 13933  000796  33D0               	rrcf	(??_mount_volume+3)& (0+255),f,b
 13934  000798  33CF               	rrcf	(??_mount_volume+2)& (0+255),f,b
 13935  00079A  33CE               	rrcf	(??_mount_volume+1)& (0+255),f,b
 13936  00079C  33CD               	rrcf	??_mount_volume& (0+255),f,b
 13937  00079E                     u19460:
 13938  00079E  2EE8               	decfsz	wreg,f,c
 13939  0007A0  D7F9               	goto	u19465
 13940  0007A2  EE20 F017          	lfsr	2,23
 13941  0007A6  51F4               	movf	mount_volume@fs& (0+255),w,b
 13942  0007A8  26D9               	addwf	fsr2l,f,c
 13943  0007AA  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13944  0007AC  22DA               	addwfc	fsr2h,f,c
 13945  0007AE  51CD               	movf	??_mount_volume& (0+255),w,b
 13946  0007B0  5CDE               	subwf	postinc2,w,c
 13947  0007B2  51CE               	movf	(??_mount_volume+1)& (0+255),w,b
 13948  0007B4  58DE               	subwfb	postinc2,w,c
 13949  0007B6  51CF               	movf	(??_mount_volume+2)& (0+255),w,b
 13950  0007B8  58DE               	subwfb	postinc2,w,c
 13951  0007BA  51D0               	movf	(??_mount_volume+3)& (0+255),w,b
 13952  0007BC  58DE               	subwfb	postinc2,w,c
 13953  0007BE  B0D8               	btfsc	status,0,c
 13954  0007C0  D002               	goto	l1399
 13955                           
 13956                           ; BSR set to: 0
 13957  0007C2  0E0D               	movlw	13
 13958                           
 13959                           ; BSR set to: 0
 13960  0007C4  0012               	return	
 13961  0007C6                     l1399:
 13962                           
 13963                           ; BSR set to: 0
 13964                           ;ff.c: 3513: fs->last_clst = fs->free_clst = 0xFFFFFFFF;
 13965                           
 13966                           ; BSR set to: 0
 13967  0007C6  EE20 F00F          	lfsr	2,15
 13968  0007CA  51F4               	movf	mount_volume@fs& (0+255),w,b
 13969  0007CC  26D9               	addwf	fsr2l,f,c
 13970  0007CE  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13971  0007D0  22DA               	addwfc	fsr2h,f,c
 13972  0007D2  0EFF               	movlw	255
 13973  0007D4  6EDE               	movwf	postinc2,c
 13974  0007D6  0EFF               	movlw	255
 13975  0007D8  6EDE               	movwf	postinc2,c
 13976  0007DA  0EFF               	movlw	255
 13977  0007DC  6EDE               	movwf	postinc2,c
 13978  0007DE  0EFF               	movlw	255
 13979  0007E0  6EDD               	movwf	postdec2,c
 13980  0007E2  52DD               	movf	postdec2,f,c
 13981  0007E4  52DD               	movf	postdec2,f,c
 13982  0007E6  EE10 F00B          	lfsr	1,11
 13983  0007EA  51F4               	movf	mount_volume@fs& (0+255),w,b
 13984  0007EC  26E1               	addwf	fsr1l,f,c
 13985  0007EE  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13986  0007F0  22E2               	addwfc	fsr1h,f,c
 13987  0007F2  CFDE FFE6          	movff	postinc2,postinc1
 13988  0007F6  CFDE FFE6          	movff	postinc2,postinc1
 13989  0007FA  CFDE FFE6          	movff	postinc2,postinc1
 13990  0007FE  CFDE FFE6          	movff	postinc2,postinc1
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;ff.c: 3514: fs->fsi_flag = 0x80;
 13994  000802  EE20 F004          	lfsr	2,4
 13995  000806  51F4               	movf	mount_volume@fs& (0+255),w,b
 13996  000808  26D9               	addwf	fsr2l,f,c
 13997  00080A  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 13998  00080C  22DA               	addwfc	fsr2h,f,c
 13999  00080E  0E80               	movlw	128
 14000  000810  6EDF               	movwf	indf2,c
 14001                           
 14002                           ; BSR set to: 0
 14003                           ;ff.c: 3516: if (fmt == 3
 14004                           ;ff.c: 3517: && ld_word(fs->win + 48) == 1
 14005                           ;ff.c: 3518: && move_window(fs, bsect + 1) == FR_OK)
 14006  000812  0E03               	movlw	3
 14007  000814  19F2               	xorwf	mount_volume@fmt& (0+255),w,b
 14008  000816  11F3               	iorwf	(mount_volume@fmt+1)& (0+255),w,b
 14009  000818  A4D8               	btfss	status,2,c
 14010  00081A  D095               	goto	l1401
 14011                           
 14012                           ; BSR set to: 0
 14013  00081C  0E5F               	movlw	95
 14014  00081E  25F4               	addwf	mount_volume@fs& (0+255),w,b
 14015  000820  6E1A               	movwf	ld_word@ptr,c
 14016  000822  0E00               	movlw	0
 14017  000824  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 14018  000826  6E1B               	movwf	ld_word@ptr+1,c
 14019  000828  EC6B  F02C         	call	_ld_word	;wreg free
 14020  00082C  041A               	decf	?_ld_word,w,c
 14021  00082E  101B               	iorwf	?_ld_word+1,w,c
 14022  000830  A4D8               	btfss	status,2,c
 14023  000832  D089               	goto	l1401
 14024  000834  C0F4  F090         	movff	mount_volume@fs,move_window@fs
 14025  000838  C0F5  F091         	movff	mount_volume@fs+1,move_window@fs+1
 14026  00083C  0E01               	movlw	1
 14027  00083E  0100               	movlb	0	; () banked
 14028  000840  25E5               	addwf	mount_volume@bsect& (0+255),w,b
 14029  000842  6F92               	movwf	move_window@sect& (0+255),b
 14030  000844  0E00               	movlw	0
 14031  000846  21E6               	addwfc	(mount_volume@bsect+1)& (0+255),w,b
 14032  000848  6F93               	movwf	(move_window@sect+1)& (0+255),b
 14033  00084A  0E00               	movlw	0
 14034  00084C  21E7               	addwfc	(mount_volume@bsect+2)& (0+255),w,b
 14035  00084E  6F94               	movwf	(move_window@sect+2)& (0+255),b
 14036  000850  0E00               	movlw	0
 14037  000852  21E8               	addwfc	(mount_volume@bsect+3)& (0+255),w,b
 14038  000854  6F95               	movwf	(move_window@sect+3)& (0+255),b
 14039  000856  EC09  F026         	call	_move_window	;wreg free
 14040  00085A  0900               	iorlw	0
 14041  00085C  A4D8               	btfss	status,2,c
 14042  00085E  D073               	goto	l1401
 14043                           
 14044                           ;ff.c: 3519: {
 14045                           ;ff.c: 3520: fs->fsi_flag = 0;
 14046  000860  0100               	movlb	0	; () banked
 14047  000862  EE20 F004          	lfsr	2,4
 14048  000866  51F4               	movf	mount_volume@fs& (0+255),w,b
 14049  000868  26D9               	addwf	fsr2l,f,c
 14050  00086A  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 14051  00086C  22DA               	addwfc	fsr2h,f,c
 14052  00086E  0E00               	movlw	0
 14053  000870  6EDF               	movwf	indf2,c
 14054                           
 14055                           ; BSR set to: 0
 14056                           ;ff.c: 3521: if (ld_word(fs->win + 510) == 0xAA55
 14057                           ;ff.c: 3522: && ld_dword(fs->win + 0) == 0x41615252
 14058                           ;ff.c: 3523: && ld_dword(fs->win + 484) == 0x61417272)
 14059  000872  0E2D               	movlw	45
 14060  000874  25F4               	addwf	mount_volume@fs& (0+255),w,b
 14061  000876  6E1A               	movwf	ld_word@ptr,c
 14062  000878  0E02               	movlw	2
 14063  00087A  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 14064  00087C  6E1B               	movwf	ld_word@ptr+1,c
 14065  00087E  EC6B  F02C         	call	_ld_word	;wreg free
 14066  000882  0E55               	movlw	85
 14067  000884  181A               	xorwf	?_ld_word,w,c
 14068  000886  E15F               	bnz	l14740
 14069  000888  0EAA               	movlw	170
 14070  00088A  181B               	xorwf	?_ld_word+1,w,c
 14071  00088C  A4D8               	btfss	status,2,c
 14072  00088E  D05B               	goto	l1401
 14073  000890  0E2F               	movlw	47
 14074  000892  0100               	movlb	0	; () banked
 14075  000894  25F4               	addwf	mount_volume@fs& (0+255),w,b
 14076  000896  6E1A               	movwf	ld_dword@ptr,c
 14077  000898  0E00               	movlw	0
 14078  00089A  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 14079  00089C  6E1B               	movwf	ld_dword@ptr+1,c
 14080  00089E  EC54  F025         	call	_ld_dword	;wreg free
 14081  0008A2  0E52               	movlw	82
 14082  0008A4  181A               	xorwf	?_ld_dword,w,c
 14083  0008A6  E14F               	bnz	l14740
 14084  0008A8  0E52               	movlw	82
 14085  0008AA  181B               	xorwf	?_ld_dword+1,w,c
 14086  0008AC  E14C               	bnz	l14740
 14087  0008AE  0E61               	movlw	97
 14088  0008B0  181C               	xorwf	?_ld_dword+2,w,c
 14089  0008B2  E149               	bnz	l14740
 14090  0008B4  0E41               	movlw	65
 14091  0008B6  181D               	xorwf	?_ld_dword+3,w,c
 14092  0008B8  A4D8               	btfss	status,2,c
 14093  0008BA  D045               	goto	l1401
 14094  0008BC  0E13               	movlw	19
 14095  0008BE  0100               	movlb	0	; () banked
 14096  0008C0  25F4               	addwf	mount_volume@fs& (0+255),w,b
 14097  0008C2  6E1A               	movwf	ld_dword@ptr,c
 14098  0008C4  0E02               	movlw	2
 14099  0008C6  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 14100  0008C8  6E1B               	movwf	ld_dword@ptr+1,c
 14101  0008CA  EC54  F025         	call	_ld_dword	;wreg free
 14102  0008CE  0E72               	movlw	114
 14103  0008D0  181A               	xorwf	?_ld_dword,w,c
 14104  0008D2  E139               	bnz	l14740
 14105  0008D4  0E72               	movlw	114
 14106  0008D6  181B               	xorwf	?_ld_dword+1,w,c
 14107  0008D8  E136               	bnz	l14740
 14108  0008DA  0E41               	movlw	65
 14109  0008DC  181C               	xorwf	?_ld_dword+2,w,c
 14110  0008DE  E133               	bnz	l14740
 14111  0008E0  0E61               	movlw	97
 14112  0008E2  181D               	xorwf	?_ld_dword+3,w,c
 14113  0008E4  A4D8               	btfss	status,2,c
 14114  0008E6  D02F               	goto	l1401
 14115                           
 14116                           ;ff.c: 3524: {
 14117                           ;ff.c: 3526: fs->free_clst = ld_dword(fs->win + 488);
 14118  0008E8  0E17               	movlw	23
 14119  0008EA  0100               	movlb	0	; () banked
 14120  0008EC  25F4               	addwf	mount_volume@fs& (0+255),w,b
 14121  0008EE  6E1A               	movwf	ld_dword@ptr,c
 14122  0008F0  0E02               	movlw	2
 14123  0008F2  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 14124  0008F4  6E1B               	movwf	ld_dword@ptr+1,c
 14125  0008F6  EC54  F025         	call	_ld_dword	;wreg free
 14126  0008FA  0100               	movlb	0	; () banked
 14127  0008FC  EE20 F00F          	lfsr	2,15
 14128  000900  51F4               	movf	mount_volume@fs& (0+255),w,b
 14129  000902  26D9               	addwf	fsr2l,f,c
 14130  000904  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 14131  000906  22DA               	addwfc	fsr2h,f,c
 14132  000908  C01A  FFDE         	movff	?_ld_dword,postinc2
 14133  00090C  C01B  FFDE         	movff	?_ld_dword+1,postinc2
 14134  000910  C01C  FFDE         	movff	?_ld_dword+2,postinc2
 14135  000914  C01D  FFDE         	movff	?_ld_dword+3,postinc2
 14136                           
 14137                           ;ff.c: 3529: fs->last_clst = ld_dword(fs->win + 492);
 14138  000918  0E1B               	movlw	27
 14139  00091A  25F4               	addwf	mount_volume@fs& (0+255),w,b
 14140  00091C  6E1A               	movwf	ld_dword@ptr,c
 14141  00091E  0E02               	movlw	2
 14142  000920  21F5               	addwfc	(mount_volume@fs+1)& (0+255),w,b
 14143  000922  6E1B               	movwf	ld_dword@ptr+1,c
 14144  000924  EC54  F025         	call	_ld_dword	;wreg free
 14145  000928  0100               	movlb	0	; () banked
 14146  00092A  EE20 F00B          	lfsr	2,11
 14147  00092E  51F4               	movf	mount_volume@fs& (0+255),w,b
 14148  000930  26D9               	addwf	fsr2l,f,c
 14149  000932  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 14150  000934  22DA               	addwfc	fsr2h,f,c
 14151  000936  C01A  FFDE         	movff	?_ld_dword,postinc2
 14152  00093A  C01B  FFDE         	movff	?_ld_dword+1,postinc2
 14153  00093E  C01C  FFDE         	movff	?_ld_dword+2,postinc2
 14154  000942  C01D  FFDE         	movff	?_ld_dword+3,postinc2
 14155  000946                     l1401:
 14156  000946                     l14740:
 14157                           
 14158                           ;ff.c: 3531: }
 14159                           ;ff.c: 3532: }
 14160                           ;ff.c: 3535: }
 14161                           ;ff.c: 3537: fs->fs_type = (BYTE)fmt;
 14162  000946  C0F4  FFD9         	movff	mount_volume@fs,fsr2l
 14163  00094A  C0F5  FFDA         	movff	mount_volume@fs+1,fsr2h
 14164  00094E  C0F2  FFDF         	movff	mount_volume@fmt,indf2
 14165                           
 14166                           ;ff.c: 3538: fs->id = ++Fsid;
 14167  000952  0101               	movlb	1	; () banked
 14168  000954  4B43               	infsnz	_Fsid& (0+255),f,b
 14169  000956  2B44               	incf	(_Fsid+1)& (0+255),f,b
 14170  000958  0100               	movlb	0	; () banked
 14171  00095A  EE20 F005          	lfsr	2,5
 14172  00095E  51F4               	movf	mount_volume@fs& (0+255),w,b
 14173  000960  26D9               	addwf	fsr2l,f,c
 14174  000962  51F5               	movf	(mount_volume@fs+1)& (0+255),w,b
 14175  000964  22DA               	addwfc	fsr2h,f,c
 14176  000966  C143  FFDE         	movff	_Fsid,postinc2
 14177  00096A  C144  FFDD         	movff	_Fsid+1,postdec2
 14178                           
 14179                           ; BSR set to: 0
 14180                           ;ff.c: 3551: return FR_OK;
 14181  00096E  0E00               	movlw	0
 14182  000970  0012               	return	
 14183  000972                     __end_of_mount_volume:
 14184                           	opt stack 0
 14185                           tosu	equ	0xFFF
 14186                           tosh	equ	0xFFE
 14187                           tosl	equ	0xFFD
 14188                           pclath	equ	0xFFA
 14189                           tblptru	equ	0xFF8
 14190                           tblptrh	equ	0xFF7
 14191                           tblptrl	equ	0xFF6
 14192                           tablat	equ	0xFF5
 14193                           prodh	equ	0xFF4
 14194                           prodl	equ	0xFF3
 14195                           intcon	equ	0xFF2
 14196                           intcon2	equ	0xFF1
 14197                           intcon3	equ	0xFF0
 14198                           indf0	equ	0xFEF
 14199                           postinc0	equ	0xFEE
 14200                           fsr0h	equ	0xFEA
 14201                           fsr0l	equ	0xFE9
 14202                           wreg	equ	0xFE8
 14203                           indf1	equ	0xFE7
 14204                           postinc1	equ	0xFE6
 14205                           postdec1	equ	0xFE5
 14206                           fsr1h	equ	0xFE2
 14207                           fsr1l	equ	0xFE1
 14208                           indf2	equ	0xFDF
 14209                           postinc2	equ	0xFDE
 14210                           postdec2	equ	0xFDD
 14211                           plusw2	equ	0xFDB
 14212                           fsr2h	equ	0xFDA
 14213                           fsr2l	equ	0xFD9
 14214                           status	equ	0xFD8
 14215                           
 14216 ;; *************** function _get_ldnumber *****************
 14217 ;; Defined at:
 14218 ;;		line 3090 in file "bibliotecas/ff.c"
 14219 ;; Parameters:    Size  Location     Type
 14220 ;;  path            2   25[COMRAM] PTR PTR const unsigned c
 14221 ;;		 -> f_rename@path_old(2), f_rename@path_new(2), f_mkdir@path(2), f_unlink@path(2), 
 14222 ;;		 -> f_getfree@path(2), f_stat@path(2), f_opendir@path(2), f_open@path(2), 
 14223 ;;		 -> f_mount@path(2), f_mount@rp(2), 
 14224 ;; Auto vars:     Size  Location     Type
 14225 ;;  tp              2   38[COMRAM] PTR const unsigned char 
 14226 ;;		 -> STR_12(7), STR_10(1), 
 14227 ;;  vol             2   36[COMRAM] int 
 14228 ;;  tt              2   34[COMRAM] PTR const unsigned char 
 14229 ;;		 -> STR_12(7), STR_10(1), 
 14230 ;;  i               2   31[COMRAM] int 
 14231 ;;  tc              1   33[COMRAM] unsigned char 
 14232 ;; Return value:  Size  Location     Type
 14233 ;;                  2   25[COMRAM] int 
 14234 ;; Registers used:
 14235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14236 ;; Tracked objects:
 14237 ;;		On entry : 0/0
 14238 ;;		On exit  : 0/0
 14239 ;;		Unchanged: 0/0
 14240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14241 ;;      Params:         2       0       0       0       0       0       0       0       0
 14242 ;;      Locals:        11       0       0       0       0       0       0       0       0
 14243 ;;      Temps:          2       0       0       0       0       0       0       0       0
 14244 ;;      Totals:        15       0       0       0       0       0       0       0       0
 14245 ;;Total ram usage:       15 bytes
 14246 ;; Hardware stack levels used:    1
 14247 ;; Hardware stack levels required when called:    2
 14248 ;; This function calls:
 14249 ;;		Nothing
 14250 ;; This function is called by:
 14251 ;;		_mount_volume
 14252 ;;		_f_mount
 14253 ;;		_f_rename
 14254 ;; This function uses a non-reentrant model
 14255 ;;
 14256                           
 14257                           	psect	text37
 14258  0043CC                     __ptext37:
 14259                           	opt stack 0
 14260  0043CC                     _get_ldnumber:
 14261                           	opt stack 24
 14262                           
 14263                           ;ff.c: 3094: const TCHAR *tp, *tt;
 14264                           ;ff.c: 3095: TCHAR tc;
 14265                           ;ff.c: 3096: int i;
 14266                           ;ff.c: 3097: int vol = -1;
 14267                           
 14268                           ;incstack = 0
 14269  0043CC  6825               	setf	get_ldnumber@vol,c
 14270  0043CE  6826               	setf	get_ldnumber@vol+1,c
 14271                           
 14272                           ;ff.c: 3103: tt = tp = *path;
 14273  0043D0  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 14274  0043D4  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 14275  0043D8  CFDE F027          	movff	postinc2,get_ldnumber@tp
 14276  0043DC  CFDD F028          	movff	postdec2,get_ldnumber@tp+1
 14277  0043E0  C027  F023         	movff	get_ldnumber@tp,get_ldnumber@tt
 14278  0043E4  C028  F024         	movff	get_ldnumber@tp+1,get_ldnumber@tt+1
 14279                           
 14280                           ;ff.c: 3104: if (!tp) return vol;
 14281  0043E8  5027               	movf	get_ldnumber@tp,w,c
 14282  0043EA  1028               	iorwf	get_ldnumber@tp+1,w,c
 14283  0043EC  A4D8               	btfss	status,2,c
 14284  0043EE  D005               	goto	l1314
 14285  0043F0  C025  F01A         	movff	get_ldnumber@vol,?_get_ldnumber
 14286  0043F4  C026  F01B         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
 14287  0043F8  0012               	return	
 14288  0043FA                     l1314:
 14289                           
 14290                           ;ff.c: 3105: do tc = *tt++; while (!((UINT)(tc) < (0 ? ' ' : '!')) && tc != ':');
 14291  0043FA  C023  FFF6         	movff	get_ldnumber@tt,tblptrl
 14292  0043FE  C024  FFF7         	movff	get_ldnumber@tt+1,tblptrh
 14293  004402                     	if	0	;tblptru may be non-zero
 14294  004402                     	endif
 14295  004402                     	if	0	;tblptru may be non-zero
 14296  004402                     	endif
 14297  004402  0008               	tblrd		*
 14298  004404  CFF5 F022          	movff	tablat,get_ldnumber@tc
 14299  004408  4A23               	infsnz	get_ldnumber@tt,f,c
 14300  00440A  2A24               	incf	get_ldnumber@tt+1,f,c
 14301  00440C  0E00               	movlw	0
 14302  00440E  6E1F               	movwf	_get_ldnumber$2949+1,c
 14303  004410  0E21               	movlw	33
 14304  004412  6E1E               	movwf	_get_ldnumber$2949,c
 14305  004414  5022               	movf	get_ldnumber@tc,w,c
 14306  004416  6E1C               	movwf	??_get_ldnumber& (0+255),c
 14307  004418  6A1D               	clrf	(??_get_ldnumber+1)& (0+255),c
 14308  00441A  501E               	movf	_get_ldnumber$2949,w,c
 14309  00441C  5C1C               	subwf	??_get_ldnumber,w,c
 14310  00441E  501F               	movf	_get_ldnumber$2949+1,w,c
 14311  004420  581D               	subwfb	??_get_ldnumber+1,w,c
 14312  004422  A0D8               	btfss	status,0,c
 14313  004424  D004               	goto	u18570
 14314  004426  0E3A               	movlw	58
 14315  004428  1822               	xorwf	get_ldnumber@tc,w,c
 14316  00442A  A4D8               	btfss	status,2,c
 14317  00442C  D7E6               	goto	l1314
 14318  00442E                     u18570:
 14319                           
 14320                           ;ff.c: 3107: if (tc == ':') {
 14321  00442E  0E3A               	movlw	58
 14322  004430  1822               	xorwf	get_ldnumber@tc,w,c
 14323  004432  A4D8               	btfss	status,2,c
 14324  004434  D046               	goto	l1324
 14325                           
 14326                           ;ff.c: 3108: i = 1;
 14327  004436  0E00               	movlw	0
 14328  004438  6E21               	movwf	get_ldnumber@i+1,c
 14329  00443A  0E01               	movlw	1
 14330  00443C  6E20               	movwf	get_ldnumber@i,c
 14331                           
 14332                           ;ff.c: 3109: if (((*tp) >= '0' && (*tp) <= '9') && tp + 2 == tt) {
 14333  00443E  C027  FFF6         	movff	get_ldnumber@tp,tblptrl
 14334  004442  C028  FFF7         	movff	get_ldnumber@tp+1,tblptrh
 14335  004446                     	if	0	;tblptru may be non-zero
 14336  004446                     	endif
 14337  004446                     	if	0	;tblptru may be non-zero
 14338  004446                     	endif
 14339  004446  0E2F               	movlw	47
 14340  004448  0008               	tblrd		*
 14341  00444A  64F5               	cpfsgt	tablat,c
 14342  00444C  D022               	goto	l1325
 14343  00444E  C027  FFF6         	movff	get_ldnumber@tp,tblptrl
 14344  004452  C028  FFF7         	movff	get_ldnumber@tp+1,tblptrh
 14345  004456                     	if	0	;tblptru may be non-zero
 14346  004456                     	endif
 14347  004456                     	if	0	;tblptru may be non-zero
 14348  004456                     	endif
 14349  004456  0E3A               	movlw	58
 14350  004458  0008               	tblrd		*
 14351  00445A  60F5               	cpfslt	tablat,c
 14352  00445C  D01A               	goto	l1325
 14353  00445E  0E02               	movlw	2
 14354  004460  2427               	addwf	get_ldnumber@tp,w,c
 14355  004462  6E1C               	movwf	??_get_ldnumber& (0+255),c
 14356  004464  0E00               	movlw	0
 14357  004466  2028               	addwfc	get_ldnumber@tp+1,w,c
 14358  004468  6E1D               	movwf	(??_get_ldnumber+1)& (0+255),c
 14359  00446A  5023               	movf	get_ldnumber@tt,w,c
 14360  00446C  181C               	xorwf	??_get_ldnumber,w,c
 14361  00446E  E111               	bnz	l14264
 14362  004470  5024               	movf	get_ldnumber@tt+1,w,c
 14363  004472  181D               	xorwf	??_get_ldnumber+1,w,c
 14364  004474  A4D8               	btfss	status,2,c
 14365  004476  D00D               	goto	l1325
 14366                           
 14367                           ;ff.c: 3110: i = (int)*tp - '0';
 14368  004478  C027  FFF6         	movff	get_ldnumber@tp,tblptrl
 14369  00447C  C028  FFF7         	movff	get_ldnumber@tp+1,tblptrh
 14370  004480                     	if	0	;tblptru may be non-zero
 14371  004480                     	endif
 14372  004480                     	if	0	;tblptru may be non-zero
 14373  004480                     	endif
 14374  004480  0008               	tblrd		*
 14375  004482  CFF5 F01C          	movff	tablat,??_get_ldnumber
 14376  004486  0ED0               	movlw	208
 14377  004488  241C               	addwf	??_get_ldnumber,w,c
 14378  00448A  6E20               	movwf	get_ldnumber@i,c
 14379  00448C  6A21               	clrf	get_ldnumber@i+1,c
 14380  00448E  0EFF               	movlw	255
 14381  004490  2221               	addwfc	get_ldnumber@i+1,f,c
 14382  004492                     l1325:
 14383  004492                     l14264:
 14384                           
 14385                           ;ff.c: 3111: }
 14386                           ;ff.c: 3125: if (i < 1) {
 14387  004492  BE21               	btfsc	get_ldnumber@i+1,7,c
 14388  004494  D005               	goto	u18620
 14389  004496  5021               	movf	get_ldnumber@i+1,w,c
 14390  004498  E10F               	bnz	l14270
 14391  00449A  0420               	decf	get_ldnumber@i,w,c
 14392  00449C  B0D8               	btfsc	status,0,c
 14393  00449E  D00C               	goto	l1326
 14394  0044A0                     u18620:
 14395                           
 14396                           ;ff.c: 3126: vol = i;
 14397  0044A0  C020  F025         	movff	get_ldnumber@i,get_ldnumber@vol
 14398  0044A4  C021  F026         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
 14399                           
 14400                           ;ff.c: 3127: *path = tt;
 14401  0044A8  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 14402  0044AC  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 14403  0044B0  C023  FFDE         	movff	get_ldnumber@tt,postinc2
 14404  0044B4  C024  FFDD         	movff	get_ldnumber@tt+1,postdec2
 14405  0044B8                     l1326:
 14406  0044B8                     l14270:
 14407                           
 14408                           ;ff.c: 3128: }
 14409                           ;ff.c: 3129: return vol;
 14410  0044B8  C025  F01A         	movff	get_ldnumber@vol,?_get_ldnumber
 14411  0044BC  C026  F01B         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
 14412  0044C0  0012               	return	
 14413  0044C2                     l1324:
 14414                           
 14415                           ;ff.c: 3130: }
 14416                           ;ff.c: 3154: vol = 0;
 14417  0044C2  0E00               	movlw	0
 14418  0044C4  6E26               	movwf	get_ldnumber@vol+1,c
 14419  0044C6  0E00               	movlw	0
 14420  0044C8  6E25               	movwf	get_ldnumber@vol,c
 14421                           
 14422                           ;ff.c: 3156: return vol;
 14423  0044CA  C025  F01A         	movff	get_ldnumber@vol,?_get_ldnumber
 14424  0044CE  C026  F01B         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
 14425  0044D2  0012               	return	
 14426  0044D4                     __end_of_get_ldnumber:
 14427                           	opt stack 0
 14428                           tosu	equ	0xFFF
 14429                           tosh	equ	0xFFE
 14430                           tosl	equ	0xFFD
 14431                           pclath	equ	0xFFA
 14432                           tblptru	equ	0xFF8
 14433                           tblptrh	equ	0xFF7
 14434                           tblptrl	equ	0xFF6
 14435                           tablat	equ	0xFF5
 14436                           prodh	equ	0xFF4
 14437                           prodl	equ	0xFF3
 14438                           intcon	equ	0xFF2
 14439                           intcon2	equ	0xFF1
 14440                           intcon3	equ	0xFF0
 14441                           indf0	equ	0xFEF
 14442                           postinc0	equ	0xFEE
 14443                           fsr0h	equ	0xFEA
 14444                           fsr0l	equ	0xFE9
 14445                           wreg	equ	0xFE8
 14446                           indf1	equ	0xFE7
 14447                           postinc1	equ	0xFE6
 14448                           postdec1	equ	0xFE5
 14449                           fsr1h	equ	0xFE2
 14450                           fsr1l	equ	0xFE1
 14451                           indf2	equ	0xFDF
 14452                           postinc2	equ	0xFDE
 14453                           postdec2	equ	0xFDD
 14454                           plusw2	equ	0xFDB
 14455                           fsr2h	equ	0xFDA
 14456                           fsr2l	equ	0xFD9
 14457                           status	equ	0xFD8
 14458                           
 14459 ;; *************** function _find_volume *****************
 14460 ;; Defined at:
 14461 ;;		line 3278 in file "bibliotecas/ff.c"
 14462 ;; Parameters:    Size  Location     Type
 14463 ;;  fs              2   74[BANK0 ] PTR struct .
 14464 ;;		 -> NULL(0), fs(559), 
 14465 ;;  part            2   76[BANK0 ] unsigned int 
 14466 ;; Auto vars:     Size  Location     Type
 14467 ;;  mbr_pt         16   84[BANK0 ] unsigned long [4]
 14468 ;;  i               2  102[BANK0 ] unsigned int 
 14469 ;;  fmt             2  100[BANK0 ] unsigned int 
 14470 ;; Return value:  Size  Location     Type
 14471 ;;                  2   74[BANK0 ] unsigned int 
 14472 ;; Registers used:
 14473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14474 ;; Tracked objects:
 14475 ;;		On entry : 0/0
 14476 ;;		On exit  : 0/0
 14477 ;;		Unchanged: 0/0
 14478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14479 ;;      Params:         0       4       0       0       0       0       0       0       0
 14480 ;;      Locals:         0      20       0       0       0       0       0       0       0
 14481 ;;      Temps:          0       6       0       0       0       0       0       0       0
 14482 ;;      Totals:         0      30       0       0       0       0       0       0       0
 14483 ;;Total ram usage:       30 bytes
 14484 ;; Hardware stack levels used:    1
 14485 ;; Hardware stack levels required when called:   10
 14486 ;; This function calls:
 14487 ;;		_check_fs
 14488 ;;		_ld_dword
 14489 ;; This function is called by:
 14490 ;;		_mount_volume
 14491 ;; This function uses a non-reentrant model
 14492 ;;
 14493                           
 14494                           	psect	text38
 14495  0036CE                     __ptext38:
 14496                           	opt stack 0
 14497  0036CE                     _find_volume:
 14498                           	opt stack 16
 14499                           
 14500                           ;ff.c: 3283: UINT fmt, i;
 14501                           ;ff.c: 3284: DWORD mbr_pt[4];
 14502                           ;ff.c: 3287: fmt = check_fs(fs, 0);
 14503                           
 14504                           ;incstack = 0
 14505  0036CE  C0AA  F09B         	movff	find_volume@fs,check_fs@fs
 14506  0036D2  C0AB  F09C         	movff	find_volume@fs+1,check_fs@fs+1
 14507  0036D6  0E00               	movlw	0
 14508  0036D8  0100               	movlb	0	; () banked
 14509  0036DA  6F9D               	movwf	check_fs@sect& (0+255),b
 14510  0036DC  0E00               	movlw	0
 14511  0036DE  6F9E               	movwf	(check_fs@sect+1)& (0+255),b
 14512  0036E0  0E00               	movlw	0
 14513  0036E2  6F9F               	movwf	(check_fs@sect+2)& (0+255),b
 14514  0036E4  0E00               	movlw	0
 14515  0036E6  6FA0               	movwf	(check_fs@sect+3)& (0+255),b
 14516  0036E8  EC65  F018         	call	_check_fs	;wreg free
 14517  0036EC  C09B  F0C4         	movff	?_check_fs,find_volume@fmt
 14518  0036F0  C09C  F0C5         	movff	?_check_fs+1,find_volume@fmt+1
 14519                           
 14520                           ;ff.c: 3288: if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;
 14521  0036F4  0E02               	movlw	2
 14522  0036F6  0100               	movlb	0	; () banked
 14523  0036F8  19C4               	xorwf	find_volume@fmt& (0+255),w,b
 14524  0036FA  11C5               	iorwf	(find_volume@fmt+1)& (0+255),w,b
 14525  0036FC  B4D8               	btfsc	status,2,c
 14526  0036FE  D00F               	goto	l1348
 14527                           
 14528                           ; BSR set to: 0
 14529  003700  51C5               	movf	(find_volume@fmt+1)& (0+255),w,b
 14530  003702  E108               	bnz	l1346
 14531  003704  0E03               	movlw	3
 14532  003706  5DC4               	subwf	find_volume@fmt& (0+255),w,b
 14533  003708  B0D8               	btfsc	status,0,c
 14534  00370A  D004               	goto	u18650
 14535                           
 14536                           ; BSR set to: 0
 14537  00370C  51AC               	movf	find_volume@part& (0+255),w,b
 14538  00370E  11AD               	iorwf	(find_volume@part+1)& (0+255),w,b
 14539  003710  A4D8               	btfss	status,2,c
 14540  003712  D005               	goto	l1348
 14541  003714                     u18650:
 14542  003714                     l1346:
 14543                           
 14544                           ; BSR set to: 0
 14545  003714  C0C4  F0AA         	movff	find_volume@fmt,?_find_volume
 14546  003718  C0C5  F0AB         	movff	find_volume@fmt+1,?_find_volume+1
 14547  00371C  0012               	return	
 14548  00371E                     l1348:
 14549                           
 14550                           ; BSR set to: 0
 14551                           ;ff.c: 3315: for (i = 0; i < 4; i++) {
 14552                           
 14553                           ; BSR set to: 0
 14554  00371E  0E00               	movlw	0
 14555  003720  6FC7               	movwf	(find_volume@i+1)& (0+255),b
 14556  003722  0E00               	movlw	0
 14557  003724  6FC6               	movwf	find_volume@i& (0+255),b
 14558  003726                     l14296:
 14559                           
 14560                           ; BSR set to: 0
 14561  003726  51C7               	movf	(find_volume@i+1)& (0+255),w,b
 14562  003728  E13D               	bnz	l14306
 14563  00372A  0E04               	movlw	4
 14564  00372C  5DC6               	subwf	find_volume@i& (0+255),w,b
 14565  00372E  B0D8               	btfsc	status,0,c
 14566  003730  D039               	goto	u18680
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;ff.c: 3316: mbr_pt[i] = ld_dword(fs->win + 446 + i * 16 + 8);
 14570                           
 14571                           ; BSR set to: 0
 14572                           
 14573                           ; BSR set to: 0
 14574  003732  0EF5               	movlw	245
 14575  003734  6FAE               	movwf	??_find_volume& (0+255),b
 14576  003736  0E01               	movlw	1
 14577  003738  6FAF               	movwf	(??_find_volume+1)& (0+255),b
 14578  00373A  C0C6  F0B0         	movff	find_volume@i,??_find_volume+2
 14579  00373E  C0C7  F0B1         	movff	find_volume@i+1,??_find_volume+3
 14580  003742  3BB0               	swapf	(??_find_volume+2)& (0+255),f,b
 14581  003744  3BB1               	swapf	(??_find_volume+3)& (0+255),f,b
 14582  003746  0EF0               	movlw	240
 14583  003748  17B1               	andwf	(??_find_volume+3)& (0+255),f,b
 14584  00374A  51B0               	movf	(??_find_volume+2)& (0+255),w,b
 14585  00374C  0B0F               	andlw	15
 14586  00374E  13B1               	iorwf	(??_find_volume+3)& (0+255),f,b
 14587  003750  0EF0               	movlw	240
 14588  003752  17B0               	andwf	(??_find_volume+2)& (0+255),f,b
 14589  003754  51AE               	movf	??_find_volume& (0+255),w,b
 14590  003756  27B0               	addwf	(??_find_volume+2)& (0+255),f,b
 14591  003758  51AF               	movf	(??_find_volume+1)& (0+255),w,b
 14592  00375A  23B1               	addwfc	(??_find_volume+3)& (0+255),f,b
 14593  00375C  51B0               	movf	(??_find_volume+2)& (0+255),w,b
 14594  00375E  25AA               	addwf	find_volume@fs& (0+255),w,b
 14595  003760  6E1A               	movwf	ld_dword@ptr,c
 14596  003762  51B1               	movf	(??_find_volume+3)& (0+255),w,b
 14597  003764  21AB               	addwfc	(find_volume@fs+1)& (0+255),w,b
 14598  003766  6E1B               	movwf	ld_dword@ptr+1,c
 14599  003768  EC54  F025         	call	_ld_dword	;wreg free
 14600  00376C  0EB4               	movlw	low find_volume@mbr_pt
 14601  00376E  0100               	movlb	0	; () banked
 14602  003770  6FB2               	movwf	(??_find_volume+4)& (0+255),b
 14603  003772  0E00               	movlw	high find_volume@mbr_pt
 14604  003774  6FB3               	movwf	(??_find_volume+5)& (0+255),b
 14605  003776  90D8               	bcf	status,0,c
 14606  003778  35C6               	rlcf	find_volume@i& (0+255),w,b
 14607  00377A  6ED9               	movwf	fsr2l,c
 14608  00377C  35C7               	rlcf	(find_volume@i+1)& (0+255),w,b
 14609  00377E  6EDA               	movwf	fsr2h,c
 14610  003780  90D8               	bcf	status,0,c
 14611  003782  36D9               	rlcf	fsr2l,f,c
 14612  003784  36DA               	rlcf	fsr2h,f,c
 14613  003786  51B2               	movf	(??_find_volume+4)& (0+255),w,b
 14614  003788  26D9               	addwf	fsr2l,f,c
 14615  00378A  51B3               	movf	(??_find_volume+5)& (0+255),w,b
 14616  00378C  22DA               	addwfc	fsr2h,f,c
 14617  00378E  C01A  FFDE         	movff	?_ld_dword,postinc2
 14618  003792  C01B  FFDE         	movff	?_ld_dword+1,postinc2
 14619  003796  C01C  FFDE         	movff	?_ld_dword+2,postinc2
 14620  00379A  C01D  FFDE         	movff	?_ld_dword+3,postinc2
 14621                           
 14622                           ; BSR set to: 0
 14623  00379E  4BC6               	infsnz	find_volume@i& (0+255),f,b
 14624  0037A0  2BC7               	incf	(find_volume@i+1)& (0+255),f,b
 14625  0037A2  D7C1               	goto	l14296
 14626  0037A4                     u18680:
 14627  0037A4                     l14306:
 14628                           
 14629                           ; BSR set to: 0
 14630                           ;ff.c: 3317: }
 14631                           ;ff.c: 3318: i = part ? part - 1 : 0;
 14632  0037A4  51AC               	movf	find_volume@part& (0+255),w,b
 14633  0037A6  11AD               	iorwf	(find_volume@part+1)& (0+255),w,b
 14634  0037A8  A4D8               	btfss	status,2,c
 14635  0037AA  D005               	goto	l1352
 14636                           
 14637                           ; BSR set to: 0
 14638  0037AC  0E00               	movlw	0
 14639  0037AE  6FC7               	movwf	(find_volume@i+1)& (0+255),b
 14640  0037B0  0E00               	movlw	0
 14641  0037B2  6FC6               	movwf	find_volume@i& (0+255),b
 14642  0037B4  D006               	goto	l1354
 14643  0037B6                     l1352:
 14644                           
 14645                           ; BSR set to: 0
 14646                           
 14647                           ; BSR set to: 0
 14648  0037B6  0EFF               	movlw	255
 14649  0037B8  25AC               	addwf	find_volume@part& (0+255),w,b
 14650  0037BA  6FC6               	movwf	find_volume@i& (0+255),b
 14651  0037BC  0EFF               	movlw	255
 14652  0037BE  21AD               	addwfc	(find_volume@part+1)& (0+255),w,b
 14653  0037C0  6FC7               	movwf	(find_volume@i+1)& (0+255),b
 14654  0037C2                     l1354:
 14655                           
 14656                           ; BSR set to: 0
 14657                           ;ff.c: 3320: fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;
 14658                           
 14659                           ; BSR set to: 0
 14660                           
 14661                           ;ff.c: 3319: do {
 14662                           
 14663                           ; BSR set to: 0
 14664  0037C2  0EB4               	movlw	low find_volume@mbr_pt
 14665  0037C4  6FAE               	movwf	??_find_volume& (0+255),b
 14666  0037C6  0E00               	movlw	high find_volume@mbr_pt
 14667  0037C8  6FAF               	movwf	(??_find_volume+1)& (0+255),b
 14668  0037CA  90D8               	bcf	status,0,c
 14669  0037CC  35C6               	rlcf	find_volume@i& (0+255),w,b
 14670  0037CE  6ED9               	movwf	fsr2l,c
 14671  0037D0  35C7               	rlcf	(find_volume@i+1)& (0+255),w,b
 14672  0037D2  6EDA               	movwf	fsr2h,c
 14673  0037D4  90D8               	bcf	status,0,c
 14674  0037D6  36D9               	rlcf	fsr2l,f,c
 14675  0037D8  36DA               	rlcf	fsr2h,f,c
 14676  0037DA  51AE               	movf	??_find_volume& (0+255),w,b
 14677  0037DC  26D9               	addwf	fsr2l,f,c
 14678  0037DE  51AF               	movf	(??_find_volume+1)& (0+255),w,b
 14679  0037E0  22DA               	addwfc	fsr2h,f,c
 14680  0037E2  50DE               	movf	postinc2,w,c
 14681  0037E4  10DE               	iorwf	postinc2,w,c
 14682  0037E6  10DE               	iorwf	postinc2,w,c
 14683  0037E8  10DE               	iorwf	postinc2,w,c
 14684  0037EA  A4D8               	btfss	status,2,c
 14685  0037EC  D005               	goto	l1357
 14686                           
 14687                           ; BSR set to: 0
 14688  0037EE  0E00               	movlw	0
 14689  0037F0  6FC5               	movwf	(find_volume@fmt+1)& (0+255),b
 14690  0037F2  0E03               	movlw	3
 14691  0037F4  6FC4               	movwf	find_volume@fmt& (0+255),b
 14692  0037F6  D022               	goto	l1359
 14693  0037F8                     l1357:
 14694                           
 14695                           ; BSR set to: 0
 14696                           
 14697                           ; BSR set to: 0
 14698  0037F8  C0AA  F09B         	movff	find_volume@fs,check_fs@fs
 14699  0037FC  C0AB  F09C         	movff	find_volume@fs+1,check_fs@fs+1
 14700  003800  0EB4               	movlw	low find_volume@mbr_pt
 14701  003802  6FAE               	movwf	??_find_volume& (0+255),b
 14702  003804  0E00               	movlw	high find_volume@mbr_pt
 14703  003806  6FAF               	movwf	(??_find_volume+1)& (0+255),b
 14704  003808  90D8               	bcf	status,0,c
 14705  00380A  35C6               	rlcf	find_volume@i& (0+255),w,b
 14706  00380C  6ED9               	movwf	fsr2l,c
 14707  00380E  35C7               	rlcf	(find_volume@i+1)& (0+255),w,b
 14708  003810  6EDA               	movwf	fsr2h,c
 14709  003812  90D8               	bcf	status,0,c
 14710  003814  36D9               	rlcf	fsr2l,f,c
 14711  003816  36DA               	rlcf	fsr2h,f,c
 14712  003818  51AE               	movf	??_find_volume& (0+255),w,b
 14713  00381A  26D9               	addwf	fsr2l,f,c
 14714  00381C  51AF               	movf	(??_find_volume+1)& (0+255),w,b
 14715  00381E  22DA               	addwfc	fsr2h,f,c
 14716  003820  CFDE F09D          	movff	postinc2,check_fs@sect
 14717  003824  CFDE F09E          	movff	postinc2,check_fs@sect+1
 14718  003828  CFDE F09F          	movff	postinc2,check_fs@sect+2
 14719  00382C  CFDE F0A0          	movff	postinc2,check_fs@sect+3
 14720  003830  EC65  F018         	call	_check_fs	;wreg free
 14721  003834  C09B  F0C4         	movff	?_check_fs,find_volume@fmt
 14722  003838  C09C  F0C5         	movff	?_check_fs+1,find_volume@fmt+1
 14723  00383C                     l1359:
 14724                           
 14725                           ;ff.c: 3321: } while (part == 0 && fmt >= 2 && ++i < 4);
 14726  00383C  0100               	movlb	0	; () banked
 14727  00383E  51AC               	movf	find_volume@part& (0+255),w,b
 14728  003840  11AD               	iorwf	(find_volume@part+1)& (0+255),w,b
 14729  003842  A4D8               	btfss	status,2,c
 14730  003844  D00E               	goto	u18730
 14731                           
 14732                           ; BSR set to: 0
 14733  003846  51C5               	movf	(find_volume@fmt+1)& (0+255),w,b
 14734  003848  E104               	bnz	u18720
 14735  00384A  0E02               	movlw	2
 14736  00384C  5DC4               	subwf	find_volume@fmt& (0+255),w,b
 14737  00384E  A0D8               	btfss	status,0,c
 14738  003850  D008               	goto	u18730
 14739  003852                     u18720:
 14740                           
 14741                           ; BSR set to: 0
 14742  003852  4BC6               	infsnz	find_volume@i& (0+255),f,b
 14743  003854  2BC7               	incf	(find_volume@i+1)& (0+255),f,b
 14744  003856  51C7               	movf	(find_volume@i+1)& (0+255),w,b
 14745  003858  E104               	bnz	l1362
 14746  00385A  0E04               	movlw	4
 14747  00385C  5DC6               	subwf	find_volume@i& (0+255),w,b
 14748  00385E  A0D8               	btfss	status,0,c
 14749  003860  D7B0               	goto	l1354
 14750  003862                     u18730:
 14751  003862                     l1362:
 14752                           
 14753                           ; BSR set to: 0
 14754                           ;ff.c: 3322: return fmt;
 14755  003862  C0C4  F0AA         	movff	find_volume@fmt,?_find_volume
 14756  003866  C0C5  F0AB         	movff	find_volume@fmt+1,?_find_volume+1
 14757                           
 14758                           ; BSR set to: 0
 14759  00386A  0012               	return		;funcret
 14760  00386C                     __end_of_find_volume:
 14761                           	opt stack 0
 14762                           tosu	equ	0xFFF
 14763                           tosh	equ	0xFFE
 14764                           tosl	equ	0xFFD
 14765                           pclath	equ	0xFFA
 14766                           tblptru	equ	0xFF8
 14767                           tblptrh	equ	0xFF7
 14768                           tblptrl	equ	0xFF6
 14769                           tablat	equ	0xFF5
 14770                           prodh	equ	0xFF4
 14771                           prodl	equ	0xFF3
 14772                           intcon	equ	0xFF2
 14773                           intcon2	equ	0xFF1
 14774                           intcon3	equ	0xFF0
 14775                           indf0	equ	0xFEF
 14776                           postinc0	equ	0xFEE
 14777                           fsr0h	equ	0xFEA
 14778                           fsr0l	equ	0xFE9
 14779                           wreg	equ	0xFE8
 14780                           indf1	equ	0xFE7
 14781                           postinc1	equ	0xFE6
 14782                           postdec1	equ	0xFE5
 14783                           fsr1h	equ	0xFE2
 14784                           fsr1l	equ	0xFE1
 14785                           indf2	equ	0xFDF
 14786                           postinc2	equ	0xFDE
 14787                           postdec2	equ	0xFDD
 14788                           plusw2	equ	0xFDB
 14789                           fsr2h	equ	0xFDA
 14790                           fsr2l	equ	0xFD9
 14791                           status	equ	0xFD8
 14792                           
 14793 ;; *************** function _check_fs *****************
 14794 ;; Defined at:
 14795 ;;		line 3238 in file "bibliotecas/ff.c"
 14796 ;; Parameters:    Size  Location     Type
 14797 ;;  fs              2   59[BANK0 ] PTR struct .
 14798 ;;		 -> NULL(0), fs(559), 
 14799 ;;  sect            4   61[BANK0 ] unsigned long 
 14800 ;; Auto vars:     Size  Location     Type
 14801 ;;  w               2   71[BANK0 ] unsigned short 
 14802 ;;  sign            2   69[BANK0 ] unsigned short 
 14803 ;;  b               1   73[BANK0 ] unsigned char 
 14804 ;; Return value:  Size  Location     Type
 14805 ;;                  2   59[BANK0 ] unsigned int 
 14806 ;; Registers used:
 14807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14808 ;; Tracked objects:
 14809 ;;		On entry : 0/0
 14810 ;;		On exit  : 0/0
 14811 ;;		Unchanged: 0/0
 14812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14813 ;;      Params:         0       6       0       0       0       0       0       0       0
 14814 ;;      Locals:         0       5       0       0       0       0       0       0       0
 14815 ;;      Temps:          0       4       0       0       0       0       0       0       0
 14816 ;;      Totals:         0      15       0       0       0       0       0       0       0
 14817 ;;Total ram usage:       15 bytes
 14818 ;; Hardware stack levels used:    1
 14819 ;; Hardware stack levels required when called:    9
 14820 ;; This function calls:
 14821 ;;		_ld_dword
 14822 ;;		_ld_word
 14823 ;;		_memcmp
 14824 ;;		_move_window
 14825 ;; This function is called by:
 14826 ;;		_find_volume
 14827 ;; This function uses a non-reentrant model
 14828 ;;
 14829                           
 14830                           	psect	text39
 14831  0030CA                     __ptext39:
 14832                           	opt stack 0
 14833  0030CA                     _check_fs:
 14834                           	opt stack 16
 14835                           
 14836                           ;ff.c: 3243: WORD w, sign;
 14837                           ;ff.c: 3244: BYTE b;
 14838                           ;ff.c: 3247: fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;
 14839                           
 14840                           ; BSR set to: 0
 14841                           ;incstack = 0
 14842  0030CA  0100               	movlb	0	; () banked
 14843  0030CC  EE20 F003          	lfsr	2,3
 14844  0030D0  519B               	movf	check_fs@fs& (0+255),w,b
 14845  0030D2  26D9               	addwf	fsr2l,f,c
 14846  0030D4  519C               	movf	(check_fs@fs+1)& (0+255),w,b
 14847  0030D6  22DA               	addwfc	fsr2h,f,c
 14848  0030D8  0E00               	movlw	0
 14849  0030DA  6EDF               	movwf	indf2,c
 14850  0030DC  EE20 F02B          	lfsr	2,43
 14851  0030E0  519B               	movf	check_fs@fs& (0+255),w,b
 14852  0030E2  26D9               	addwf	fsr2l,f,c
 14853  0030E4  519C               	movf	(check_fs@fs+1)& (0+255),w,b
 14854  0030E6  22DA               	addwfc	fsr2h,f,c
 14855  0030E8  0EFF               	movlw	255
 14856  0030EA  6EDE               	movwf	postinc2,c
 14857  0030EC  0EFF               	movlw	255
 14858  0030EE  6EDE               	movwf	postinc2,c
 14859  0030F0  0EFF               	movlw	255
 14860  0030F2  6EDE               	movwf	postinc2,c
 14861  0030F4  0EFF               	movlw	255
 14862  0030F6  6EDD               	movwf	postdec2,c
 14863                           
 14864                           ; BSR set to: 0
 14865                           ;ff.c: 3248: if (move_window(fs, sect) != FR_OK) return 4;
 14866  0030F8  C09B  F090         	movff	check_fs@fs,move_window@fs
 14867  0030FC  C09C  F091         	movff	check_fs@fs+1,move_window@fs+1
 14868  003100  C09D  F092         	movff	check_fs@sect,move_window@sect
 14869  003104  C09E  F093         	movff	check_fs@sect+1,move_window@sect+1
 14870  003108  C09F  F094         	movff	check_fs@sect+2,move_window@sect+2
 14871  00310C  C0A0  F095         	movff	check_fs@sect+3,move_window@sect+3
 14872  003110  EC09  F026         	call	_move_window	;wreg free
 14873  003114  0900               	iorlw	0
 14874  003116  B4D8               	btfsc	status,2,c
 14875  003118  D006               	goto	l1329
 14876  00311A  0E00               	movlw	0
 14877  00311C  0100               	movlb	0	; () banked
 14878  00311E  6F9C               	movwf	(?_check_fs+1)& (0+255),b
 14879  003120  0E04               	movlw	4
 14880  003122  6F9B               	movwf	?_check_fs& (0+255),b
 14881                           
 14882                           ; BSR set to: 0
 14883  003124  0012               	return	
 14884  003126                     l1329:
 14885                           
 14886                           ;ff.c: 3249: sign = ld_word(fs->win + 510);
 14887                           
 14888                           ; BSR set to: 0
 14889  003126  0E2D               	movlw	45
 14890  003128  0100               	movlb	0	; () banked
 14891  00312A  259B               	addwf	check_fs@fs& (0+255),w,b
 14892  00312C  6E1A               	movwf	ld_word@ptr,c
 14893  00312E  0E02               	movlw	2
 14894  003130  219C               	addwfc	(check_fs@fs+1)& (0+255),w,b
 14895  003132  6E1B               	movwf	ld_word@ptr+1,c
 14896  003134  EC6B  F02C         	call	_ld_word	;wreg free
 14897  003138  C01A  F0A5         	movff	?_ld_word,check_fs@sign
 14898  00313C  C01B  F0A6         	movff	?_ld_word+1,check_fs@sign+1
 14899                           
 14900                           ;ff.c: 3253: b = fs->win[0];
 14901  003140  0100               	movlb	0	; () banked
 14902  003142  EE20 F02F          	lfsr	2,47
 14903  003146  519B               	movf	check_fs@fs& (0+255),w,b
 14904  003148  26D9               	addwf	fsr2l,f,c
 14905  00314A  519C               	movf	(check_fs@fs+1)& (0+255),w,b
 14906  00314C  22DA               	addwfc	fsr2h,f,c
 14907  00314E  50DF               	movf	indf2,w,c
 14908  003150  6FA9               	movwf	check_fs@b& (0+255),b
 14909                           
 14910                           ; BSR set to: 0
 14911                           ;ff.c: 3254: if (b == 0xEB || b == 0xE9 || b == 0xE8) {
 14912  003152  0EEB               	movlw	235
 14913  003154  19A9               	xorwf	check_fs@b& (0+255),w,b
 14914  003156  B4D8               	btfsc	status,2,c
 14915  003158  D008               	goto	u18000
 14916                           
 14917                           ; BSR set to: 0
 14918  00315A  0EE9               	movlw	233
 14919  00315C  19A9               	xorwf	check_fs@b& (0+255),w,b
 14920  00315E  B4D8               	btfsc	status,2,c
 14921  003160  D004               	goto	u18000
 14922                           
 14923                           ; BSR set to: 0
 14924  003162  0EE8               	movlw	232
 14925  003164  19A9               	xorwf	check_fs@b& (0+255),w,b
 14926  003166  A4D8               	btfss	status,2,c
 14927  003168  D0CA               	goto	l1335
 14928  00316A                     u18000:
 14929                           
 14930                           ; BSR set to: 0
 14931                           ;ff.c: 3255: if (sign == 0xAA55 && !memcmp(fs->win + 82, "FAT32   ", 8)) {
 14932                           
 14933                           ; BSR set to: 0
 14934  00316A  0E55               	movlw	85
 14935  00316C  19A5               	xorwf	check_fs@sign& (0+255),w,b
 14936  00316E  E11E               	bnz	l13942
 14937  003170  0EAA               	movlw	170
 14938  003172  19A6               	xorwf	(check_fs@sign+1)& (0+255),w,b
 14939  003174  A4D8               	btfss	status,2,c
 14940  003176  D01A               	goto	l1334
 14941                           
 14942                           ; BSR set to: 0
 14943  003178  0E81               	movlw	129
 14944  00317A  259B               	addwf	check_fs@fs& (0+255),w,b
 14945  00317C  6E1A               	movwf	memcmp@s1,c
 14946  00317E  0E00               	movlw	0
 14947  003180  219C               	addwfc	(check_fs@fs+1)& (0+255),w,b
 14948  003182  6E1B               	movwf	memcmp@s1+1,c
 14949  003184  0E43               	movlw	low STR_24
 14950  003186  6E1C               	movwf	memcmp@s2,c
 14951  003188  0E62               	movlw	high STR_24
 14952  00318A  6E1D               	movwf	memcmp@s2+1,c
 14953  00318C  0E00               	movlw	0
 14954  00318E  6E1F               	movwf	memcmp@n+1,c
 14955  003190  0E08               	movlw	8
 14956  003192  6E1E               	movwf	memcmp@n,c
 14957  003194  EC51  F027         	call	_memcmp	;wreg free
 14958  003198  501A               	movf	?_memcmp,w,c
 14959  00319A  101B               	iorwf	?_memcmp+1,w,c
 14960  00319C  A4D8               	btfss	status,2,c
 14961  00319E  D006               	goto	l1334
 14962                           
 14963                           ;ff.c: 3256: return 0;
 14964  0031A0  0E00               	movlw	0
 14965  0031A2  0100               	movlb	0	; () banked
 14966  0031A4  6F9C               	movwf	(?_check_fs+1)& (0+255),b
 14967  0031A6  0E00               	movlw	0
 14968  0031A8  6F9B               	movwf	?_check_fs& (0+255),b
 14969                           
 14970                           ; BSR set to: 0
 14971  0031AA  0012               	return	
 14972  0031AC                     l1334:
 14973  0031AC                     l13942:
 14974                           
 14975                           ;ff.c: 3257: }
 14976                           ;ff.c: 3259: w = ld_word(fs->win + 11);
 14977  0031AC  0E3A               	movlw	58
 14978  0031AE  0100               	movlb	0	; () banked
 14979  0031B0  259B               	addwf	check_fs@fs& (0+255),w,b
 14980  0031B2  6E1A               	movwf	ld_word@ptr,c
 14981  0031B4  0E00               	movlw	0
 14982  0031B6  219C               	addwfc	(check_fs@fs+1)& (0+255),w,b
 14983  0031B8  6E1B               	movwf	ld_word@ptr+1,c
 14984  0031BA  EC6B  F02C         	call	_ld_word	;wreg free
 14985  0031BE  C01A  F0A7         	movff	?_ld_word,check_fs@w
 14986  0031C2  C01B  F0A8         	movff	?_ld_word+1,check_fs@w+1
 14987                           
 14988                           ;ff.c: 3260: b = fs->win[13];
 14989  0031C6  0100               	movlb	0	; () banked
 14990  0031C8  EE20 F03C          	lfsr	2,60
 14991  0031CC  519B               	movf	check_fs@fs& (0+255),w,b
 14992  0031CE  26D9               	addwf	fsr2l,f,c
 14993  0031D0  519C               	movf	(check_fs@fs+1)& (0+255),w,b
 14994  0031D2  22DA               	addwfc	fsr2h,f,c
 14995  0031D4  50DF               	movf	indf2,w,c
 14996  0031D6  6FA9               	movwf	check_fs@b& (0+255),b
 14997                           
 14998                           ; BSR set to: 0
 14999                           ;ff.c: 3261: if ((w & (w - 1)) == 0 && w >= 512 && w <= 512
 15000                           ;ff.c: 3262: && b != 0 && (b & (b - 1)) == 0
 15001                           ;ff.c: 3263: && ld_word(fs->win + 14) != 0
 15002                           ;ff.c: 3264: && (UINT)fs->win[16] - 1 <= 1
 15003                           ;ff.c: 3265: && ld_word(fs->win + 17) != 0
 15004                           ;ff.c: 3266: && (ld_word(fs->win + 19) >= 128 || ld_dword(fs->win + 32) >= 0x10000)
 15005                           ;ff.c: 3267: && ld_word(fs->win + 22) != 0) {
 15006  0031D8  0EFF               	movlw	255
 15007  0031DA  6FA1               	movwf	??_check_fs& (0+255),b
 15008  0031DC  0EFF               	movlw	255
 15009  0031DE  6FA2               	movwf	(??_check_fs+1)& (0+255),b
 15010  0031E0  C0A7  F0A3         	movff	check_fs@w,??_check_fs+2
 15011  0031E4  C0A8  F0A4         	movff	check_fs@w+1,??_check_fs+3
 15012  0031E8  51A1               	movf	??_check_fs& (0+255),w,b
 15013  0031EA  27A3               	addwf	(??_check_fs+2)& (0+255),f,b
 15014  0031EC  51A2               	movf	(??_check_fs+1)& (0+255),w,b
 15015  0031EE  23A4               	addwfc	(??_check_fs+3)& (0+255),f,b
 15016  0031F0  51A7               	movf	check_fs@w& (0+255),w,b
 15017  0031F2  17A3               	andwf	(??_check_fs+2)& (0+255),f,b
 15018  0031F4  51A8               	movf	(check_fs@w+1)& (0+255),w,b
 15019  0031F6  17A4               	andwf	(??_check_fs+3)& (0+255),f,b
 15020  0031F8  51A3               	movf	(??_check_fs+2)& (0+255),w,b
 15021  0031FA  11A4               	iorwf	(??_check_fs+3)& (0+255),w,b
 15022  0031FC  A4D8               	btfss	status,2,c
 15023  0031FE  D07F               	goto	l1335
 15024                           
 15025                           ; BSR set to: 0
 15026  003200  0E02               	movlw	2
 15027  003202  5DA8               	subwf	(check_fs@w+1)& (0+255),w,b
 15028  003204  A0D8               	btfss	status,0,c
 15029  003206  D07B               	goto	l1335
 15030                           
 15031                           ; BSR set to: 0
 15032  003208  05A7               	decf	check_fs@w& (0+255),w,b
 15033  00320A  0E02               	movlw	2
 15034  00320C  59A8               	subwfb	(check_fs@w+1)& (0+255),w,b
 15035  00320E  B0D8               	btfsc	status,0,c
 15036  003210  D076               	goto	l1335
 15037                           
 15038                           ; BSR set to: 0
 15039  003212  51A9               	movf	check_fs@b& (0+255),w,b
 15040  003214  B4D8               	btfsc	status,2,c
 15041  003216  D073               	goto	l1335
 15042                           
 15043                           ; BSR set to: 0
 15044  003218  0EFF               	movlw	255
 15045  00321A  6FA1               	movwf	??_check_fs& (0+255),b
 15046  00321C  0EFF               	movlw	255
 15047  00321E  6FA2               	movwf	(??_check_fs+1)& (0+255),b
 15048  003220  51A9               	movf	check_fs@b& (0+255),w,b
 15049  003222  6FA3               	movwf	(??_check_fs+2)& (0+255),b
 15050  003224  6BA4               	clrf	(??_check_fs+3)& (0+255),b
 15051  003226  51A1               	movf	??_check_fs& (0+255),w,b
 15052  003228  27A3               	addwf	(??_check_fs+2)& (0+255),f,b
 15053  00322A  51A2               	movf	(??_check_fs+1)& (0+255),w,b
 15054  00322C  23A4               	addwfc	(??_check_fs+3)& (0+255),f,b
 15055  00322E  51A9               	movf	check_fs@b& (0+255),w,b
 15056  003230  17A3               	andwf	(??_check_fs+2)& (0+255),f,b
 15057  003232  0E00               	movlw	0
 15058  003234  17A4               	andwf	(??_check_fs+3)& (0+255),f,b
 15059  003236  51A3               	movf	(??_check_fs+2)& (0+255),w,b
 15060  003238  11A4               	iorwf	(??_check_fs+3)& (0+255),w,b
 15061  00323A  A4D8               	btfss	status,2,c
 15062  00323C  D060               	goto	l1335
 15063                           
 15064                           ; BSR set to: 0
 15065  00323E  0E3D               	movlw	61
 15066  003240  259B               	addwf	check_fs@fs& (0+255),w,b
 15067  003242  6E1A               	movwf	ld_word@ptr,c
 15068  003244  0E00               	movlw	0
 15069  003246  219C               	addwfc	(check_fs@fs+1)& (0+255),w,b
 15070  003248  6E1B               	movwf	ld_word@ptr+1,c
 15071  00324A  EC6B  F02C         	call	_ld_word	;wreg free
 15072  00324E  501A               	movf	?_ld_word,w,c
 15073  003250  101B               	iorwf	?_ld_word+1,w,c
 15074  003252  B4D8               	btfsc	status,2,c
 15075  003254  D054               	goto	l1335
 15076  003256  0EFF               	movlw	255
 15077  003258  0100               	movlb	0	; () banked
 15078  00325A  6FA1               	movwf	??_check_fs& (0+255),b
 15079  00325C  0EFF               	movlw	255
 15080  00325E  6FA2               	movwf	(??_check_fs+1)& (0+255),b
 15081  003260  EE20 F03F          	lfsr	2,63
 15082  003264  519B               	movf	check_fs@fs& (0+255),w,b
 15083  003266  26D9               	addwf	fsr2l,f,c
 15084  003268  519C               	movf	(check_fs@fs+1)& (0+255),w,b
 15085  00326A  22DA               	addwfc	fsr2h,f,c
 15086  00326C  50DF               	movf	indf2,w,c
 15087  00326E  6FA3               	movwf	(??_check_fs+2)& (0+255),b
 15088  003270  6BA4               	clrf	(??_check_fs+3)& (0+255),b
 15089  003272  51A1               	movf	??_check_fs& (0+255),w,b
 15090  003274  27A3               	addwf	(??_check_fs+2)& (0+255),f,b
 15091  003276  51A2               	movf	(??_check_fs+1)& (0+255),w,b
 15092  003278  23A4               	addwfc	(??_check_fs+3)& (0+255),f,b
 15093  00327A  51A4               	movf	(??_check_fs+3)& (0+255),w,b
 15094  00327C  E140               	bnz	l13972
 15095  00327E  0E02               	movlw	2
 15096  003280  5DA3               	subwf	(??_check_fs+2)& (0+255),w,b
 15097  003282  B0D8               	btfsc	status,0,c
 15098  003284  D03C               	goto	l1335
 15099                           
 15100                           ; BSR set to: 0
 15101  003286  0E40               	movlw	64
 15102  003288  259B               	addwf	check_fs@fs& (0+255),w,b
 15103  00328A  6E1A               	movwf	ld_word@ptr,c
 15104  00328C  0E00               	movlw	0
 15105  00328E  219C               	addwfc	(check_fs@fs+1)& (0+255),w,b
 15106  003290  6E1B               	movwf	ld_word@ptr+1,c
 15107  003292  EC6B  F02C         	call	_ld_word	;wreg free
 15108  003296  501A               	movf	?_ld_word,w,c
 15109  003298  101B               	iorwf	?_ld_word+1,w,c
 15110  00329A  B4D8               	btfsc	status,2,c
 15111  00329C  D030               	goto	l1335
 15112  00329E  0E42               	movlw	66
 15113  0032A0  0100               	movlb	0	; () banked
 15114  0032A2  259B               	addwf	check_fs@fs& (0+255),w,b
 15115  0032A4  6E1A               	movwf	ld_word@ptr,c
 15116  0032A6  0E00               	movlw	0
 15117  0032A8  219C               	addwfc	(check_fs@fs+1)& (0+255),w,b
 15118  0032AA  6E1B               	movwf	ld_word@ptr+1,c
 15119  0032AC  EC6B  F02C         	call	_ld_word	;wreg free
 15120  0032B0  501B               	movf	?_ld_word+1,w,c
 15121  0032B2  E112               	bnz	l13966
 15122  0032B4  0E80               	movlw	128
 15123  0032B6  5C1A               	subwf	?_ld_word,w,c
 15124  0032B8  B0D8               	btfsc	status,0,c
 15125  0032BA  D00E               	goto	u18120
 15126  0032BC  0E4F               	movlw	79
 15127  0032BE  0100               	movlb	0	; () banked
 15128  0032C0  259B               	addwf	check_fs@fs& (0+255),w,b
 15129  0032C2  6E1A               	movwf	ld_dword@ptr,c
 15130  0032C4  0E00               	movlw	0
 15131  0032C6  219C               	addwfc	(check_fs@fs+1)& (0+255),w,b
 15132  0032C8  6E1B               	movwf	ld_dword@ptr+1,c
 15133  0032CA  EC54  F025         	call	_ld_dword	;wreg free
 15134  0032CE  501D               	movf	?_ld_dword+3,w,c
 15135  0032D0  E103               	bnz	l13966
 15136  0032D2  041C               	decf	?_ld_dword+2,w,c
 15137  0032D4  A0D8               	btfss	status,0,c
 15138  0032D6  D013               	goto	l1335
 15139  0032D8                     u18120:
 15140  0032D8                     l13966:
 15141  0032D8  0E45               	movlw	69
 15142  0032DA  0100               	movlb	0	; () banked
 15143  0032DC  259B               	addwf	check_fs@fs& (0+255),w,b
 15144  0032DE  6E1A               	movwf	ld_word@ptr,c
 15145  0032E0  0E00               	movlw	0
 15146  0032E2  219C               	addwfc	(check_fs@fs+1)& (0+255),w,b
 15147  0032E4  6E1B               	movwf	ld_word@ptr+1,c
 15148  0032E6  EC6B  F02C         	call	_ld_word	;wreg free
 15149  0032EA  501A               	movf	?_ld_word,w,c
 15150  0032EC  101B               	iorwf	?_ld_word+1,w,c
 15151  0032EE  B4D8               	btfsc	status,2,c
 15152  0032F0  D006               	goto	l1335
 15153                           
 15154                           ;ff.c: 3268: return 0;
 15155  0032F2  0E00               	movlw	0
 15156  0032F4  0100               	movlb	0	; () banked
 15157  0032F6  6F9C               	movwf	(?_check_fs+1)& (0+255),b
 15158  0032F8  0E00               	movlw	0
 15159  0032FA  6F9B               	movwf	?_check_fs& (0+255),b
 15160                           
 15161                           ; BSR set to: 0
 15162  0032FC  0012               	return	
 15163  0032FE                     l1335:
 15164  0032FE                     l13972:
 15165                           
 15166                           ;ff.c: 3269: }
 15167                           ;ff.c: 3270: }
 15168                           ;ff.c: 3271: return sign == 0xAA55 ? 2 : 3;
 15169  0032FE  0E55               	movlw	85
 15170  003300  0100               	movlb	0	; () banked
 15171  003302  19A5               	xorwf	check_fs@sign& (0+255),w,b
 15172  003304  E104               	bnz	u18140
 15173  003306  0EAA               	movlw	170
 15174  003308  19A6               	xorwf	(check_fs@sign+1)& (0+255),w,b
 15175  00330A  B4D8               	btfsc	status,2,c
 15176  00330C  D005               	goto	l1339
 15177  00330E                     u18140:
 15178                           
 15179                           ; BSR set to: 0
 15180  00330E  0E00               	movlw	0
 15181  003310  6F9C               	movwf	(?_check_fs+1)& (0+255),b
 15182  003312  0E03               	movlw	3
 15183  003314  6F9B               	movwf	?_check_fs& (0+255),b
 15184  003316  0012               	return	
 15185  003318                     l1339:
 15186                           
 15187                           ; BSR set to: 0
 15188                           
 15189                           ; BSR set to: 0
 15190  003318  0E00               	movlw	0
 15191  00331A  6F9C               	movwf	(?_check_fs+1)& (0+255),b
 15192  00331C  0E02               	movlw	2
 15193  00331E  6F9B               	movwf	?_check_fs& (0+255),b
 15194                           
 15195                           ; BSR set to: 0
 15196  003320  0012               	return	
 15197  003322                     __end_of_check_fs:
 15198                           	opt stack 0
 15199                           tosu	equ	0xFFF
 15200                           tosh	equ	0xFFE
 15201                           tosl	equ	0xFFD
 15202                           pclath	equ	0xFFA
 15203                           tblptru	equ	0xFF8
 15204                           tblptrh	equ	0xFF7
 15205                           tblptrl	equ	0xFF6
 15206                           tablat	equ	0xFF5
 15207                           prodh	equ	0xFF4
 15208                           prodl	equ	0xFF3
 15209                           intcon	equ	0xFF2
 15210                           intcon2	equ	0xFF1
 15211                           intcon3	equ	0xFF0
 15212                           indf0	equ	0xFEF
 15213                           postinc0	equ	0xFEE
 15214                           fsr0h	equ	0xFEA
 15215                           fsr0l	equ	0xFE9
 15216                           wreg	equ	0xFE8
 15217                           indf1	equ	0xFE7
 15218                           postinc1	equ	0xFE6
 15219                           postdec1	equ	0xFE5
 15220                           fsr1h	equ	0xFE2
 15221                           fsr1l	equ	0xFE1
 15222                           indf2	equ	0xFDF
 15223                           postinc2	equ	0xFDE
 15224                           postdec2	equ	0xFDD
 15225                           plusw2	equ	0xFDB
 15226                           fsr2h	equ	0xFDA
 15227                           fsr2l	equ	0xFD9
 15228                           status	equ	0xFD8
 15229                           
 15230 ;; *************** function _memcmp *****************
 15231 ;; Defined at:
 15232 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
 15233 ;; Parameters:    Size  Location     Type
 15234 ;;  s1              2   25[COMRAM] PTR const void 
 15235 ;;		 -> fs.win(512), NULL(0), fs(559), 
 15236 ;;  s2              2   27[COMRAM] PTR const void 
 15237 ;;		 -> djn.fn(12), f_rename@djn(40), djo.fn(12), f_rename@djo(40), 
 15238 ;;		 -> dj.fn(12), f_mkdir@dj(40), dj.fn(12), f_unlink@dj(40), 
 15239 ;;		 -> dj.fn(12), f_stat@dj(40), dj.fn(12), f_open@dj(40), 
 15240 ;;		 -> STR_24(9), 
 15241 ;;  n               2   29[COMRAM] unsigned int 
 15242 ;; Auto vars:     Size  Location     Type
 15243 ;;		None
 15244 ;; Return value:  Size  Location     Type
 15245 ;;                  2   25[COMRAM] int 
 15246 ;; Registers used:
 15247 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15248 ;; Tracked objects:
 15249 ;;		On entry : 0/0
 15250 ;;		On exit  : 0/0
 15251 ;;		Unchanged: 0/0
 15252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15253 ;;      Params:         6       0       0       0       0       0       0       0       0
 15254 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15255 ;;      Temps:          3       0       0       0       0       0       0       0       0
 15256 ;;      Totals:         9       0       0       0       0       0       0       0       0
 15257 ;;Total ram usage:        9 bytes
 15258 ;; Hardware stack levels used:    1
 15259 ;; Hardware stack levels required when called:    2
 15260 ;; This function calls:
 15261 ;;		Nothing
 15262 ;; This function is called by:
 15263 ;;		_dir_find
 15264 ;;		_check_fs
 15265 ;; This function uses a non-reentrant model
 15266 ;;
 15267                           
 15268                           	psect	text40
 15269  004EA2                     __ptext40:
 15270                           	opt stack 0
 15271  004EA2                     _memcmp:
 15272                           	opt stack 22
 15273                           
 15274                           ; BSR set to: 0
 15275                           ;incstack = 0
 15276  004EA2  D040               	goto	l2478
 15277  004EA4                     l13460:
 15278  004EA4  C01A  FFD9         	movff	memcmp@s1,fsr2l
 15279  004EA8  C01B  FFDA         	movff	memcmp@s1+1,fsr2h
 15280  004EAC  50DF               	movf	indf2,w,c
 15281  004EAE  6E20               	movwf	??_memcmp& (0+255),c
 15282  004EB0  C01C  FFF6         	movff	memcmp@s2,tblptrl
 15283  004EB4  C01D  FFF7         	movff	memcmp@s2+1,tblptrh
 15284  004EB8  6AF8               	clrf	tblptru,c
 15285  004EBA  0E07               	movlw	(high __ramtop+-1)
 15286  004EBC  64F7               	cpfsgt	tblptrh,c
 15287  004EBE  D003               	bra	u17247
 15288  004EC0  0008               	tblrd		*
 15289  004EC2  50F5               	movf	tablat,w,c
 15290  004EC4  D005               	bra	u17240
 15291  004EC6                     u17247:
 15292  004EC6  CFF6 FFE9          	movff	tblptrl,fsr0l
 15293  004ECA  CFF7 FFEA          	movff	tblptrh,fsr0h
 15294  004ECE  50EF               	movf	indf0,w,c
 15295  004ED0                     u17240:
 15296  004ED0  1820               	xorwf	??_memcmp,w,c
 15297  004ED2  B4D8               	btfsc	status,2,c
 15298  004ED4  D023               	goto	l2480
 15299  004ED6  C01C  FFF6         	movff	memcmp@s2,tblptrl
 15300  004EDA  C01D  FFF7         	movff	memcmp@s2+1,tblptrh
 15301  004EDE  6AF8               	clrf	tblptru,c
 15302  004EE0  0E07               	movlw	(high __ramtop+-1)
 15303  004EE2  64F7               	cpfsgt	tblptrh,c
 15304  004EE4  D003               	bra	u17267
 15305  004EE6  0008               	tblrd		*
 15306  004EE8  50F5               	movf	tablat,w,c
 15307  004EEA  D005               	bra	u17260
 15308  004EEC                     u17267:
 15309  004EEC  CFF6 FFE9          	movff	tblptrl,fsr0l
 15310  004EF0  CFF7 FFEA          	movff	tblptrh,fsr0h
 15311  004EF4  50EF               	movf	indf0,w,c
 15312  004EF6                     u17260:
 15313  004EF6  6E20               	movwf	??_memcmp& (0+255),c
 15314  004EF8  6A21               	clrf	(??_memcmp+1)& (0+255),c
 15315  004EFA  1E20               	comf	??_memcmp,f,c
 15316  004EFC  1E21               	comf	??_memcmp+1,f,c
 15317  004EFE  4A20               	infsnz	??_memcmp,f,c
 15318  004F00  2A21               	incf	??_memcmp+1,f,c
 15319  004F02  C01A  FFD9         	movff	memcmp@s1,fsr2l
 15320  004F06  C01B  FFDA         	movff	memcmp@s1+1,fsr2h
 15321  004F0A  50DF               	movf	indf2,w,c
 15322  004F0C  6E22               	movwf	(??_memcmp+2)& (0+255),c
 15323  004F0E  5022               	movf	??_memcmp+2,w,c
 15324  004F10  2420               	addwf	??_memcmp,w,c
 15325  004F12  6E1A               	movwf	?_memcmp,c
 15326  004F14  0E00               	movlw	0
 15327  004F16  2021               	addwfc	??_memcmp+1,w,c
 15328  004F18  6E1B               	movwf	?_memcmp+1,c
 15329  004F1A  0012               	return	
 15330  004F1C                     l2480:
 15331  004F1C  4A1A               	infsnz	memcmp@s1,f,c
 15332  004F1E  2A1B               	incf	memcmp@s1+1,f,c
 15333  004F20  4A1C               	infsnz	memcmp@s2,f,c
 15334  004F22  2A1D               	incf	memcmp@s2+1,f,c
 15335  004F24                     l2478:
 15336  004F24  061E               	decf	memcmp@n,f,c
 15337  004F26  A0D8               	btfss	status,0,c
 15338  004F28  061F               	decf	memcmp@n+1,f,c
 15339  004F2A  281E               	incf	memcmp@n,w,c
 15340  004F2C  E1BB               	bnz	l13460
 15341  004F2E  281F               	incf	memcmp@n+1,w,c
 15342  004F30  A4D8               	btfss	status,2,c
 15343  004F32  D7B8               	goto	l2479
 15344  004F34  0E00               	movlw	0
 15345  004F36  6E1B               	movwf	?_memcmp+1,c
 15346  004F38  0E00               	movlw	0
 15347  004F3A  6E1A               	movwf	?_memcmp,c
 15348  004F3C  0012               	return	
 15349  004F3E                     __end_of_memcmp:
 15350                           	opt stack 0
 15351                           tosu	equ	0xFFF
 15352                           tosh	equ	0xFFE
 15353                           tosl	equ	0xFFD
 15354                           pclath	equ	0xFFA
 15355                           tblptru	equ	0xFF8
 15356                           tblptrh	equ	0xFF7
 15357                           tblptrl	equ	0xFF6
 15358                           tablat	equ	0xFF5
 15359                           prodh	equ	0xFF4
 15360                           prodl	equ	0xFF3
 15361                           intcon	equ	0xFF2
 15362                           intcon2	equ	0xFF1
 15363                           intcon3	equ	0xFF0
 15364                           indf0	equ	0xFEF
 15365                           postinc0	equ	0xFEE
 15366                           fsr0h	equ	0xFEA
 15367                           fsr0l	equ	0xFE9
 15368                           wreg	equ	0xFE8
 15369                           indf1	equ	0xFE7
 15370                           postinc1	equ	0xFE6
 15371                           postdec1	equ	0xFE5
 15372                           fsr1h	equ	0xFE2
 15373                           fsr1l	equ	0xFE1
 15374                           indf2	equ	0xFDF
 15375                           postinc2	equ	0xFDE
 15376                           postdec2	equ	0xFDD
 15377                           plusw2	equ	0xFDB
 15378                           fsr2h	equ	0xFDA
 15379                           fsr2l	equ	0xFD9
 15380                           status	equ	0xFD8
 15381                           
 15382 ;; *************** function _ld_word *****************
 15383 ;; Defined at:
 15384 ;;		line 614 in file "bibliotecas/ff.c"
 15385 ;; Parameters:    Size  Location     Type
 15386 ;;  ptr             2   25[COMRAM] PTR const unsigned char 
 15387 ;;		 -> fs.win(512), NULL(0), fs(559), 
 15388 ;; Auto vars:     Size  Location     Type
 15389 ;;  rv              2   30[COMRAM] unsigned short 
 15390 ;; Return value:  Size  Location     Type
 15391 ;;                  2   25[COMRAM] unsigned short 
 15392 ;; Registers used:
 15393 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15394 ;; Tracked objects:
 15395 ;;		On entry : 0/0
 15396 ;;		On exit  : 0/0
 15397 ;;		Unchanged: 0/0
 15398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15399 ;;      Params:         2       0       0       0       0       0       0       0       0
 15400 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15401 ;;      Temps:          3       0       0       0       0       0       0       0       0
 15402 ;;      Totals:         7       0       0       0       0       0       0       0       0
 15403 ;;Total ram usage:        7 bytes
 15404 ;; Hardware stack levels used:    1
 15405 ;; Hardware stack levels required when called:    2
 15406 ;; This function calls:
 15407 ;;		Nothing
 15408 ;; This function is called by:
 15409 ;;		_get_fat
 15410 ;;		_ld_clust
 15411 ;;		_check_fs
 15412 ;;		_mount_volume
 15413 ;;		_get_fileinfo
 15414 ;;		_f_getfree
 15415 ;; This function uses a non-reentrant model
 15416 ;;
 15417                           
 15418                           	psect	text41
 15419  0058D6                     __ptext41:
 15420                           	opt stack 0
 15421  0058D6                     _ld_word:
 15422                           	opt stack 23
 15423                           
 15424                           ;ff.c: 616: WORD rv;
 15425                           ;ff.c: 618: rv = ptr[1];
 15426                           
 15427                           ;incstack = 0
 15428  0058D6  EE20 F001          	lfsr	2,1
 15429  0058DA  501A               	movf	ld_word@ptr,w,c
 15430  0058DC  26D9               	addwf	fsr2l,f,c
 15431  0058DE  501B               	movf	ld_word@ptr+1,w,c
 15432  0058E0  22DA               	addwfc	fsr2h,f,c
 15433  0058E2  50DF               	movf	indf2,w,c
 15434  0058E4  6E1C               	movwf	??_ld_word& (0+255),c
 15435  0058E6  501C               	movf	??_ld_word,w,c
 15436  0058E8  6E1F               	movwf	ld_word@rv,c
 15437  0058EA  6A20               	clrf	ld_word@rv+1,c
 15438                           
 15439                           ;ff.c: 619: rv = rv << 8 | ptr[0];
 15440  0058EC  C01A  FFD9         	movff	ld_word@ptr,fsr2l
 15441  0058F0  C01B  FFDA         	movff	ld_word@ptr+1,fsr2h
 15442  0058F4  50DF               	movf	indf2,w,c
 15443  0058F6  6E1C               	movwf	??_ld_word& (0+255),c
 15444  0058F8  501F               	movf	ld_word@rv,w,c
 15445  0058FA  6E1D               	movwf	(??_ld_word+1)& (0+255),c
 15446  0058FC  501C               	movf	??_ld_word,w,c
 15447  0058FE  6E1F               	movwf	ld_word@rv,c
 15448  005900  C01D  F020         	movff	??_ld_word+1,ld_word@rv+1
 15449                           
 15450                           ;ff.c: 620: return rv;
 15451  005904  C01F  F01A         	movff	ld_word@rv,?_ld_word
 15452  005908  C020  F01B         	movff	ld_word@rv+1,?_ld_word+1
 15453  00590C  0012               	return	
 15454  00590E                     __end_of_ld_word:
 15455                           	opt stack 0
 15456                           tosu	equ	0xFFF
 15457                           tosh	equ	0xFFE
 15458                           tosl	equ	0xFFD
 15459                           pclath	equ	0xFFA
 15460                           tblptru	equ	0xFF8
 15461                           tblptrh	equ	0xFF7
 15462                           tblptrl	equ	0xFF6
 15463                           tablat	equ	0xFF5
 15464                           prodh	equ	0xFF4
 15465                           prodl	equ	0xFF3
 15466                           intcon	equ	0xFF2
 15467                           intcon2	equ	0xFF1
 15468                           intcon3	equ	0xFF0
 15469                           indf0	equ	0xFEF
 15470                           postinc0	equ	0xFEE
 15471                           fsr0h	equ	0xFEA
 15472                           fsr0l	equ	0xFE9
 15473                           wreg	equ	0xFE8
 15474                           indf1	equ	0xFE7
 15475                           postinc1	equ	0xFE6
 15476                           postdec1	equ	0xFE5
 15477                           fsr1h	equ	0xFE2
 15478                           fsr1l	equ	0xFE1
 15479                           indf2	equ	0xFDF
 15480                           postinc2	equ	0xFDE
 15481                           postdec2	equ	0xFDD
 15482                           plusw2	equ	0xFDB
 15483                           fsr2h	equ	0xFDA
 15484                           fsr2l	equ	0xFD9
 15485                           status	equ	0xFD8
 15486                           
 15487 ;; *************** function _ld_dword *****************
 15488 ;; Defined at:
 15489 ;;		line 623 in file "bibliotecas/ff.c"
 15490 ;; Parameters:    Size  Location     Type
 15491 ;;  ptr             2   25[COMRAM] PTR const unsigned char 
 15492 ;;		 -> fs.win(512), NULL(0), fs(559), 
 15493 ;; Auto vars:     Size  Location     Type
 15494 ;;  rv              4   34[COMRAM] unsigned long 
 15495 ;; Return value:  Size  Location     Type
 15496 ;;                  4   25[COMRAM] unsigned long 
 15497 ;; Registers used:
 15498 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15499 ;; Tracked objects:
 15500 ;;		On entry : 0/0
 15501 ;;		On exit  : 0/0
 15502 ;;		Unchanged: 0/0
 15503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15504 ;;      Params:         4       0       0       0       0       0       0       0       0
 15505 ;;      Locals:         4       0       0       0       0       0       0       0       0
 15506 ;;      Temps:          5       0       0       0       0       0       0       0       0
 15507 ;;      Totals:        13       0       0       0       0       0       0       0       0
 15508 ;;Total ram usage:       13 bytes
 15509 ;; Hardware stack levels used:    1
 15510 ;; Hardware stack levels required when called:    2
 15511 ;; This function calls:
 15512 ;;		Nothing
 15513 ;; This function is called by:
 15514 ;;		_get_fat
 15515 ;;		_put_fat
 15516 ;;		_check_fs
 15517 ;;		_find_volume
 15518 ;;		_mount_volume
 15519 ;;		_f_open
 15520 ;;		_get_fileinfo
 15521 ;;		_f_getfree
 15522 ;; This function uses a non-reentrant model
 15523 ;;
 15524                           
 15525                           	psect	text42
 15526  004AA8                     __ptext42:
 15527                           	opt stack 0
 15528  004AA8                     _ld_dword:
 15529                           	opt stack 23
 15530                           
 15531                           ;ff.c: 625: DWORD rv;
 15532                           ;ff.c: 627: rv = ptr[3];
 15533                           
 15534                           ;incstack = 0
 15535  004AA8  EE20 F003          	lfsr	2,3
 15536  004AAC  501A               	movf	ld_dword@ptr,w,c
 15537  004AAE  26D9               	addwf	fsr2l,f,c
 15538  004AB0  501B               	movf	ld_dword@ptr+1,w,c
 15539  004AB2  22DA               	addwfc	fsr2h,f,c
 15540  004AB4  50DF               	movf	indf2,w,c
 15541  004AB6  6E1E               	movwf	??_ld_dword& (0+255),c
 15542  004AB8  501E               	movf	??_ld_dword,w,c
 15543  004ABA  6E23               	movwf	ld_dword@rv,c
 15544  004ABC  6A24               	clrf	ld_dword@rv+1,c
 15545  004ABE  6A25               	clrf	ld_dword@rv+2,c
 15546  004AC0  6A26               	clrf	ld_dword@rv+3,c
 15547                           
 15548                           ;ff.c: 628: rv = rv << 8 | ptr[2];
 15549  004AC2  EE20 F002          	lfsr	2,2
 15550  004AC6  501A               	movf	ld_dword@ptr,w,c
 15551  004AC8  26D9               	addwf	fsr2l,f,c
 15552  004ACA  501B               	movf	ld_dword@ptr+1,w,c
 15553  004ACC  22DA               	addwfc	fsr2h,f,c
 15554  004ACE  50DF               	movf	indf2,w,c
 15555  004AD0  6E1E               	movwf	??_ld_dword& (0+255),c
 15556  004AD2  501E               	movf	??_ld_dword,w,c
 15557  004AD4  C023  F020         	movff	ld_dword@rv,??_ld_dword+2
 15558  004AD8  C024  F021         	movff	ld_dword@rv+1,??_ld_dword+3
 15559  004ADC  C025  F022         	movff	ld_dword@rv+2,??_ld_dword+4
 15560  004AE0  6A1F               	clrf	(??_ld_dword+1)& (0+255),c
 15561  004AE2  101F               	iorwf	??_ld_dword+1,w,c
 15562  004AE4  6E23               	movwf	ld_dword@rv,c
 15563  004AE6  5020               	movf	??_ld_dword+2,w,c
 15564  004AE8  6E24               	movwf	ld_dword@rv+1,c
 15565  004AEA  5021               	movf	??_ld_dword+3,w,c
 15566  004AEC  6E25               	movwf	ld_dword@rv+2,c
 15567  004AEE  5022               	movf	??_ld_dword+4,w,c
 15568  004AF0  6E26               	movwf	ld_dword@rv+3,c
 15569                           
 15570                           ;ff.c: 629: rv = rv << 8 | ptr[1];
 15571  004AF2  EE20 F001          	lfsr	2,1
 15572  004AF6  501A               	movf	ld_dword@ptr,w,c
 15573  004AF8  26D9               	addwf	fsr2l,f,c
 15574  004AFA  501B               	movf	ld_dword@ptr+1,w,c
 15575  004AFC  22DA               	addwfc	fsr2h,f,c
 15576  004AFE  50DF               	movf	indf2,w,c
 15577  004B00  6E1E               	movwf	??_ld_dword& (0+255),c
 15578  004B02  501E               	movf	??_ld_dword,w,c
 15579  004B04  C023  F020         	movff	ld_dword@rv,??_ld_dword+2
 15580  004B08  C024  F021         	movff	ld_dword@rv+1,??_ld_dword+3
 15581  004B0C  C025  F022         	movff	ld_dword@rv+2,??_ld_dword+4
 15582  004B10  6A1F               	clrf	(??_ld_dword+1)& (0+255),c
 15583  004B12  101F               	iorwf	??_ld_dword+1,w,c
 15584  004B14  6E23               	movwf	ld_dword@rv,c
 15585  004B16  5020               	movf	??_ld_dword+2,w,c
 15586  004B18  6E24               	movwf	ld_dword@rv+1,c
 15587  004B1A  5021               	movf	??_ld_dword+3,w,c
 15588  004B1C  6E25               	movwf	ld_dword@rv+2,c
 15589  004B1E  5022               	movf	??_ld_dword+4,w,c
 15590  004B20  6E26               	movwf	ld_dword@rv+3,c
 15591                           
 15592                           ;ff.c: 630: rv = rv << 8 | ptr[0];
 15593  004B22  C01A  FFD9         	movff	ld_dword@ptr,fsr2l
 15594  004B26  C01B  FFDA         	movff	ld_dword@ptr+1,fsr2h
 15595  004B2A  50DF               	movf	indf2,w,c
 15596  004B2C  6E1E               	movwf	??_ld_dword& (0+255),c
 15597  004B2E  501E               	movf	??_ld_dword,w,c
 15598  004B30  C023  F020         	movff	ld_dword@rv,??_ld_dword+2
 15599  004B34  C024  F021         	movff	ld_dword@rv+1,??_ld_dword+3
 15600  004B38  C025  F022         	movff	ld_dword@rv+2,??_ld_dword+4
 15601  004B3C  6A1F               	clrf	(??_ld_dword+1)& (0+255),c
 15602  004B3E  101F               	iorwf	??_ld_dword+1,w,c
 15603  004B40  6E23               	movwf	ld_dword@rv,c
 15604  004B42  5020               	movf	??_ld_dword+2,w,c
 15605  004B44  6E24               	movwf	ld_dword@rv+1,c
 15606  004B46  5021               	movf	??_ld_dword+3,w,c
 15607  004B48  6E25               	movwf	ld_dword@rv+2,c
 15608  004B4A  5022               	movf	??_ld_dword+4,w,c
 15609  004B4C  6E26               	movwf	ld_dword@rv+3,c
 15610                           
 15611                           ;ff.c: 631: return rv;
 15612  004B4E  C023  F01A         	movff	ld_dword@rv,?_ld_dword
 15613  004B52  C024  F01B         	movff	ld_dword@rv+1,?_ld_dword+1
 15614  004B56  C025  F01C         	movff	ld_dword@rv+2,?_ld_dword+2
 15615  004B5A  C026  F01D         	movff	ld_dword@rv+3,?_ld_dword+3
 15616  004B5E  0012               	return	
 15617  004B60                     __end_of_ld_dword:
 15618                           	opt stack 0
 15619                           tosu	equ	0xFFF
 15620                           tosh	equ	0xFFE
 15621                           tosl	equ	0xFFD
 15622                           pclath	equ	0xFFA
 15623                           tblptru	equ	0xFF8
 15624                           tblptrh	equ	0xFF7
 15625                           tblptrl	equ	0xFF6
 15626                           tablat	equ	0xFF5
 15627                           prodh	equ	0xFF4
 15628                           prodl	equ	0xFF3
 15629                           intcon	equ	0xFF2
 15630                           intcon2	equ	0xFF1
 15631                           intcon3	equ	0xFF0
 15632                           indf0	equ	0xFEF
 15633                           postinc0	equ	0xFEE
 15634                           fsr0h	equ	0xFEA
 15635                           fsr0l	equ	0xFE9
 15636                           wreg	equ	0xFE8
 15637                           indf1	equ	0xFE7
 15638                           postinc1	equ	0xFE6
 15639                           postdec1	equ	0xFE5
 15640                           fsr1h	equ	0xFE2
 15641                           fsr1l	equ	0xFE1
 15642                           indf2	equ	0xFDF
 15643                           postinc2	equ	0xFDE
 15644                           postdec2	equ	0xFDD
 15645                           plusw2	equ	0xFDB
 15646                           fsr2h	equ	0xFDA
 15647                           fsr2l	equ	0xFD9
 15648                           status	equ	0xFD8
 15649                           
 15650 ;; *************** function _disk_initialize *****************
 15651 ;; Defined at:
 15652 ;;		line 110 in file "bibliotecas/diskio.c"
 15653 ;; Parameters:    Size  Location     Type
 15654 ;;  pdrv            1    wreg     unsigned char 
 15655 ;; Auto vars:     Size  Location     Type
 15656 ;;  pdrv            1   42[COMRAM] unsigned char 
 15657 ;;  result          2    0        int 
 15658 ;;  stat            1   43[COMRAM] unsigned char 
 15659 ;; Return value:  Size  Location     Type
 15660 ;;                  1    wreg      unsigned char 
 15661 ;; Registers used:
 15662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15663 ;; Tracked objects:
 15664 ;;		On entry : 0/0
 15665 ;;		On exit  : 0/0
 15666 ;;		Unchanged: 0/0
 15667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15668 ;;      Params:         0       0       0       0       0       0       0       0       0
 15669 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15670 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15671 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15672 ;;Total ram usage:        2 bytes
 15673 ;; Hardware stack levels used:    1
 15674 ;; Hardware stack levels required when called:    7
 15675 ;; This function calls:
 15676 ;;		_sdc_disk_initialize
 15677 ;; This function is called by:
 15678 ;;		_mount_volume
 15679 ;; This function uses a non-reentrant model
 15680 ;;
 15681                           
 15682                           	psect	text43
 15683  005946                     __ptext43:
 15684                           	opt stack 0
 15685  005946                     _disk_initialize:
 15686                           	opt stack 19
 15687                           
 15688                           ;incstack = 0
 15689                           ;disk_initialize@pdrv stored from wreg
 15690  005946  6E2B               	movwf	disk_initialize@pdrv,c
 15691                           
 15692                           ;diskio.c: 114: DSTATUS stat;
 15693                           ;diskio.c: 115: int result;
 15694                           ;diskio.c: 117: switch (pdrv) {
 15695  005948  D00C               	goto	l849
 15696  00594A                     
 15697                           ;diskio.c: 119: stat = sdc_disk_initialize();
 15698  00594A  ECD8  F013         	call	_sdc_disk_initialize	;wreg free
 15699  00594E  6E2C               	movwf	disk_initialize@stat,c
 15700                           
 15701                           ;diskio.c: 123: return stat;
 15702  005950  502C               	movf	disk_initialize@stat,w,c
 15703  005952  0012               	return	
 15704  005954                     
 15705                           ;diskio.c: 126: stat = sdc_disk_initialize();
 15706  005954  ECD8  F013         	call	_sdc_disk_initialize	;wreg free
 15707  005958  6E2C               	movwf	disk_initialize@stat,c
 15708                           
 15709                           ;diskio.c: 130: return stat;
 15710  00595A  502C               	movf	disk_initialize@stat,w,c
 15711  00595C  0012               	return	
 15712  00595E                     
 15713                           ;diskio.c: 137: return stat;
 15714  00595E  502C               	movf	disk_initialize@stat,w,c
 15715  005960  0012               	return	
 15716  005962                     l849:
 15717  005962  502B               	movf	disk_initialize@pdrv,w,c
 15718                           
 15719                           ; Switch size 1, requested type "space"
 15720                           ; Number of cases is 3, Range of values is 0 to 2
 15721                           ; switch strategies available:
 15722                           ; Name         Instructions Cycles
 15723                           ; simple_byte           10     6 (average)
 15724                           ;	Chosen strategy is simple_byte
 15725  005964  0A00               	xorlw	0	; case 0
 15726  005966  B4D8               	btfsc	status,2,c
 15727  005968  D7F0               	goto	l850
 15728  00596A  0A01               	xorlw	1	; case 1
 15729  00596C  B4D8               	btfsc	status,2,c
 15730  00596E  D7F2               	goto	l852
 15731  005970  0A03               	xorlw	3	; case 2
 15732  005972  B4D8               	btfsc	status,2,c
 15733  005974  D7F4               	goto	l853
 15734                           
 15735                           ;diskio.c: 139: return 0x01;
 15736  005976  0E01               	movlw	1
 15737  005978  0012               	return	
 15738  00597A                     __end_of_disk_initialize:
 15739                           	opt stack 0
 15740                           tosu	equ	0xFFF
 15741                           tosh	equ	0xFFE
 15742                           tosl	equ	0xFFD
 15743                           pclath	equ	0xFFA
 15744                           tblptru	equ	0xFF8
 15745                           tblptrh	equ	0xFF7
 15746                           tblptrl	equ	0xFF6
 15747                           tablat	equ	0xFF5
 15748                           prodh	equ	0xFF4
 15749                           prodl	equ	0xFF3
 15750                           intcon	equ	0xFF2
 15751                           intcon2	equ	0xFF1
 15752                           intcon3	equ	0xFF0
 15753                           indf0	equ	0xFEF
 15754                           postinc0	equ	0xFEE
 15755                           fsr0h	equ	0xFEA
 15756                           fsr0l	equ	0xFE9
 15757                           wreg	equ	0xFE8
 15758                           indf1	equ	0xFE7
 15759                           postinc1	equ	0xFE6
 15760                           postdec1	equ	0xFE5
 15761                           fsr1h	equ	0xFE2
 15762                           fsr1l	equ	0xFE1
 15763                           indf2	equ	0xFDF
 15764                           postinc2	equ	0xFDE
 15765                           postdec2	equ	0xFDD
 15766                           plusw2	equ	0xFDB
 15767                           fsr2h	equ	0xFDA
 15768                           fsr2l	equ	0xFD9
 15769                           status	equ	0xFD8
 15770                           
 15771 ;; *************** function _sdc_disk_initialize *****************
 15772 ;; Defined at:
 15773 ;;		line 337 in file "bibliotecas/diskio.c"
 15774 ;; Parameters:    Size  Location     Type
 15775 ;;		None
 15776 ;; Auto vars:     Size  Location     Type
 15777 ;;  count2          2    9[BANK0 ] int 
 15778 ;;  crc_number      2    5[BANK0 ] int 
 15779 ;;  count1          2    3[BANK0 ] int 
 15780 ;;  i               2    0[BANK0 ] int 
 15781 ;;  buff            1   11[BANK0 ] unsigned char 
 15782 ;;  ocr             1    8[BANK0 ] unsigned char 
 15783 ;;  buff_i          1    7[BANK0 ] unsigned char 
 15784 ;;  stat            1    2[BANK0 ] unsigned char 
 15785 ;; Return value:  Size  Location     Type
 15786 ;;                  1    wreg      unsigned char 
 15787 ;; Registers used:
 15788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15789 ;; Tracked objects:
 15790 ;;		On entry : 0/0
 15791 ;;		On exit  : 0/0
 15792 ;;		Unchanged: 0/0
 15793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15794 ;;      Params:         0       0       0       0       0       0       0       0       0
 15795 ;;      Locals:         0      12       0       0       0       0       0       0       0
 15796 ;;      Temps:          1       0       0       0       0       0       0       0       0
 15797 ;;      Totals:         1      12       0       0       0       0       0       0       0
 15798 ;;Total ram usage:       13 bytes
 15799 ;; Hardware stack levels used:    1
 15800 ;; Hardware stack levels required when called:    6
 15801 ;; This function calls:
 15802 ;;		_command
 15803 ;;		_dummy_clocks
 15804 ;;		_escreve_dado_SPI
 15805 ;;		_escreve_frase_ram_lcd
 15806 ;;		_posicao_cursor_lcd
 15807 ;;		_proceed
 15808 ;;		_response
 15809 ;;		_sdc_reset
 15810 ;; This function is called by:
 15811 ;;		_disk_initialize
 15812 ;; This function uses a non-reentrant model
 15813 ;;
 15814                           
 15815                           	psect	text44
 15816  0027B0                     __ptext44:
 15817                           	opt stack 0
 15818  0027B0                     _sdc_disk_initialize:
 15819                           	opt stack 19
 15820                           
 15821                           ;diskio.c: 339: BYTE ocr;
 15822                           ;diskio.c: 340: DSTATUS stat;
 15823                           ;diskio.c: 341: int i = 0, count1 = 0, count2 = 0;
 15824                           
 15825                           ;incstack = 0
 15826  0027B0  0E00               	movlw	0
 15827  0027B2  0100               	movlb	0	; () banked
 15828  0027B4  6F61               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 15829  0027B6  0E00               	movlw	0
 15830  0027B8  6F60               	movwf	sdc_disk_initialize@i& (0+255),b
 15831  0027BA  0E00               	movlw	0
 15832  0027BC  6F64               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 15833  0027BE  0E00               	movlw	0
 15834  0027C0  6F63               	movwf	sdc_disk_initialize@count1& (0+255),b
 15835  0027C2  0E00               	movlw	0
 15836  0027C4  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 15837  0027C6  0E00               	movlw	0
 15838  0027C8  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 15839                           
 15840                           ;diskio.c: 342: BYTE buff = 0;
 15841  0027CA  0E00               	movlw	0
 15842  0027CC  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 15843                           
 15844                           ; BSR set to: 0
 15845                           ;diskio.c: 343: BYTE buff_i;
 15846                           ;diskio.c: 344: int crc_number;
 15847                           ;diskio.c: 346: _delay((unsigned long)((1)*(48000000/4000.0)));
 15848  0027CE  0E10               	movlw	16
 15849  0027D0  6E2A               	movwf	??_sdc_disk_initialize& (0+255),c
 15850  0027D2  0E94               	movlw	148
 15851  0027D4                     u23447:
 15852  0027D4  2EE8               	decfsz	wreg,f,c
 15853  0027D6  D7FE               	bra	u23447
 15854  0027D8  2E2A               	decfsz	??_sdc_disk_initialize& (0+255),f,c
 15855  0027DA  D7FC               	bra	u23447
 15856  0027DC  D000               	nop2	
 15857                           
 15858                           ;diskio.c: 347: sdc_reset();
 15859  0027DE  ECF7  F024         	call	_sdc_reset	;wreg free
 15860                           
 15861                           ;diskio.c: 349: LATBbits.LATB4 = 0;
 15862  0027E2  988A               	bcf	3978,4,c	;volatile
 15863                           
 15864                           ;diskio.c: 350: LATBbits.LATB7 = 0;
 15865  0027E4  9E8A               	bcf	3978,7,c	;volatile
 15866                           
 15867                           ;diskio.c: 351: dummy_clocks(1);
 15868  0027E6  0E01               	movlw	1
 15869  0027E8  EC2E  F02C         	call	_dummy_clocks
 15870                           
 15871                           ;diskio.c: 353: command(0X48, 0x000001AA, 0x87);
 15872  0027EC  0EAA               	movlw	170
 15873  0027EE  6E1C               	movwf	command@arg,c
 15874  0027F0  0E01               	movlw	1
 15875  0027F2  6E1D               	movwf	command@arg+1,c
 15876  0027F4  0E00               	movlw	0
 15877  0027F6  6E1E               	movwf	command@arg+2,c
 15878  0027F8  0E00               	movlw	0
 15879  0027FA  6E1F               	movwf	command@arg+3,c
 15880  0027FC  0E87               	movlw	135
 15881  0027FE  6E20               	movwf	command@CRC,c
 15882  002800  0E48               	movlw	72
 15883  002802  EC87  F02C         	call	_command
 15884                           
 15885                           ;diskio.c: 354: proceed();
 15886  002806  ECAC  F02D         	call	_proceed	;wreg free
 15887                           
 15888                           ;diskio.c: 355: LATBbits.LATB4 = 1;
 15889  00280A  888A               	bsf	3978,4,c	;volatile
 15890  00280C                     
 15891                           ;diskio.c: 357: buff_i = response();
 15892  00280C  ECA6  F02D         	call	_response	;wreg free
 15893  002810  0100               	movlb	0	; () banked
 15894  002812  6F67               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 15895                           
 15896                           ; BSR set to: 0
 15897                           ;diskio.c: 361: if(buff_i == 1)
 15898  002814  0567               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 15899  002816  A4D8               	btfss	status,2,c
 15900  002818  D004               	goto	l893
 15901                           
 15902                           ; BSR set to: 0
 15903                           ;diskio.c: 362: {
 15904                           ;diskio.c: 363: crc_number = buff_i<<8;
 15905  00281A  5167               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 15906  00281C  6F66               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 15907  00281E  6B65               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 15908                           
 15909                           ;diskio.c: 364: }
 15910  002820  D006               	goto	l895
 15911  002822                     l893:
 15912                           
 15913                           ; BSR set to: 0
 15914                           ;diskio.c: 365: else if(buff_i==0xAA)
 15915                           
 15916                           ; BSR set to: 0
 15917  002822  0EAA               	movlw	170
 15918  002824  1967               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 15919  002826  A4D8               	btfss	status,2,c
 15920  002828  D002               	goto	l895
 15921                           
 15922                           ; BSR set to: 0
 15923                           ;diskio.c: 366: {
 15924                           ;diskio.c: 367: crc_number |= buff_i;
 15925  00282A  5167               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 15926  00282C  1365               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 15927  00282E                     l895:
 15928                           
 15929                           ; BSR set to: 0
 15930                           ;diskio.c: 368: }
 15931                           ;diskio.c: 369: count1++;
 15932                           
 15933                           ; BSR set to: 0
 15934                           
 15935                           ; BSR set to: 0
 15936  00282E  4B63               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 15937  002830  2B64               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 15938                           
 15939                           ; BSR set to: 0
 15940                           ;diskio.c: 375: }while(crc_number != 0x1AA && count1<1000);
 15941  002832  0EAA               	movlw	170
 15942  002834  1965               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 15943  002836  E103               	bnz	u17300
 15944  002838  0566               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 15945  00283A  B4D8               	btfsc	status,2,c
 15946  00283C  D008               	goto	u17310
 15947  00283E                     u17300:
 15948                           
 15949                           ; BSR set to: 0
 15950  00283E  BF64               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 15951  002840  D7E5               	goto	l892
 15952  002842  0EE8               	movlw	232
 15953  002844  5D63               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 15954  002846  0E03               	movlw	3
 15955  002848  5964               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 15956  00284A  A0D8               	btfss	status,0,c
 15957  00284C  D7DF               	goto	l892
 15958  00284E                     u17310:
 15959                           
 15960                           ; BSR set to: 0
 15961                           ;diskio.c: 378: if (crc_number == 0x1AA)
 15962                           
 15963                           ; BSR set to: 0
 15964                           
 15965                           ; BSR set to: 0
 15966  00284E  0EAA               	movlw	170
 15967  002850  1965               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 15968  002852  E102               	bnz	u17321
 15969  002854  0566               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 15970  002856  A4D8               	btfss	status,2,c
 15971  002858                     u17321:
 15972  002858  D0D4               	goto	l899
 15973                           
 15974                           ; BSR set to: 0
 15975                           ;diskio.c: 379: {
 15976                           ;diskio.c: 380: count1 = 0;
 15977  00285A  0E00               	movlw	0
 15978  00285C  6F64               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 15979  00285E  0E00               	movlw	0
 15980  002860  6F63               	movwf	sdc_disk_initialize@count1& (0+255),b
 15981  002862                     l900:
 15982                           
 15983                           ; BSR set to: 0
 15984                           ;diskio.c: 382: count2 = 0;
 15985  002862  0E00               	movlw	0
 15986  002864  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 15987  002866  0E00               	movlw	0
 15988  002868  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 15989                           
 15990                           ; BSR set to: 0
 15991                           ;diskio.c: 383: buff = 0XFF;
 15992  00286A  696B               	setf	sdc_disk_initialize@buff& (0+255),b
 15993                           
 15994                           ; BSR set to: 0
 15995                           ;diskio.c: 388: LATBbits.LATB4 = 0;
 15996  00286C  988A               	bcf	3978,4,c	;volatile
 15997                           
 15998                           ; BSR set to: 0
 15999                           ;diskio.c: 389: LATBbits.LATB7 = 0;
 16000  00286E  9E8A               	bcf	3978,7,c	;volatile
 16001                           
 16002                           ; BSR set to: 0
 16003                           ;diskio.c: 390: dummy_clocks(1);
 16004  002870  0E01               	movlw	1
 16005  002872  EC2E  F02C         	call	_dummy_clocks
 16006                           
 16007                           ;diskio.c: 391: command(0X41, 0X00000000, 0XFF);
 16008  002876  0E00               	movlw	0
 16009  002878  6E1C               	movwf	command@arg,c
 16010  00287A  0E00               	movlw	0
 16011  00287C  6E1D               	movwf	command@arg+1,c
 16012  00287E  0E00               	movlw	0
 16013  002880  6E1E               	movwf	command@arg+2,c
 16014  002882  0E00               	movlw	0
 16015  002884  6E1F               	movwf	command@arg+3,c
 16016  002886  0EFF               	movlw	255
 16017  002888  6E20               	movwf	command@CRC,c
 16018  00288A  0E41               	movlw	65
 16019  00288C  EC87  F02C         	call	_command
 16020                           
 16021                           ;diskio.c: 392: buff = 0XFF;
 16022  002890  0100               	movlb	0	; () banked
 16023  002892  696B               	setf	sdc_disk_initialize@buff& (0+255),b
 16024                           
 16025                           ; BSR set to: 0
 16026                           ;diskio.c: 394: proceed();
 16027  002894  ECAC  F02D         	call	_proceed	;wreg free
 16028  002898                     
 16029                           ;diskio.c: 396: buff = response();
 16030  002898  ECA6  F02D         	call	_response	;wreg free
 16031  00289C  0100               	movlb	0	; () banked
 16032  00289E  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 16033                           
 16034                           ; BSR set to: 0
 16035                           ;diskio.c: 397: count2++;
 16036  0028A0  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16037  0028A2  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16038                           
 16039                           ; BSR set to: 0
 16040                           ;diskio.c: 398: }while((buff!=0X01)&&(count2<10));
 16041  0028A4  056B               	decf	sdc_disk_initialize@buff& (0+255),w,b
 16042  0028A6  B4D8               	btfsc	status,2,c
 16043  0028A8  D008               	goto	u17340
 16044                           
 16045                           ; BSR set to: 0
 16046  0028AA  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16047  0028AC  D7F5               	goto	l901
 16048  0028AE  516A               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16049  0028B0  E104               	bnz	l13560
 16050  0028B2  0E0A               	movlw	10
 16051  0028B4  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16052  0028B6  A0D8               	btfss	status,0,c
 16053  0028B8  D7EF               	goto	l901
 16054  0028BA                     u17340:
 16055  0028BA                     l13560:
 16056                           
 16057                           ; BSR set to: 0
 16058                           ;diskio.c: 401: dummy_clocks(1);
 16059  0028BA  0E01               	movlw	1
 16060  0028BC  EC2E  F02C         	call	_dummy_clocks
 16061                           
 16062                           ;diskio.c: 402: LATBbits.LATB4 = 0;
 16063  0028C0  988A               	bcf	3978,4,c	;volatile
 16064                           
 16065                           ;diskio.c: 403: LATBbits.LATB7 = 0;
 16066  0028C2  9E8A               	bcf	3978,7,c	;volatile
 16067                           
 16068                           ;diskio.c: 404: escreve_dado_SPI(0xFF);
 16069  0028C4  0EFF               	movlw	255
 16070  0028C6  EC69  F02B         	call	_escreve_dado_SPI
 16071                           
 16072                           ;diskio.c: 405: command(0X77, 0X00000000, 0X95);
 16073  0028CA  0E00               	movlw	0
 16074  0028CC  6E1C               	movwf	command@arg,c
 16075  0028CE  0E00               	movlw	0
 16076  0028D0  6E1D               	movwf	command@arg+1,c
 16077  0028D2  0E00               	movlw	0
 16078  0028D4  6E1E               	movwf	command@arg+2,c
 16079  0028D6  0E00               	movlw	0
 16080  0028D8  6E1F               	movwf	command@arg+3,c
 16081  0028DA  0E95               	movlw	149
 16082  0028DC  6E20               	movwf	command@CRC,c
 16083  0028DE  0E77               	movlw	119
 16084  0028E0  EC87  F02C         	call	_command
 16085                           
 16086                           ;diskio.c: 406: buff = 0XFF;
 16087  0028E4  0100               	movlb	0	; () banked
 16088  0028E6  696B               	setf	sdc_disk_initialize@buff& (0+255),b
 16089                           
 16090                           ;diskio.c: 408: proceed();
 16091  0028E8  ECAC  F02D         	call	_proceed	;wreg free
 16092  0028EC                     l905:
 16093                           
 16094                           ;diskio.c: 410: buff = response();
 16095  0028EC  ECA6  F02D         	call	_response	;wreg free
 16096  0028F0  0100               	movlb	0	; () banked
 16097  0028F2  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 16098                           
 16099                           ; BSR set to: 0
 16100                           ;diskio.c: 411: count2++;
 16101  0028F4  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16102  0028F6  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16103                           
 16104                           ; BSR set to: 0
 16105                           ;diskio.c: 412: }while((buff!=0X01)&&(count2<10));
 16106  0028F8  056B               	decf	sdc_disk_initialize@buff& (0+255),w,b
 16107  0028FA  B4D8               	btfsc	status,2,c
 16108  0028FC  D008               	goto	u17360
 16109                           
 16110                           ; BSR set to: 0
 16111  0028FE  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16112  002900  D7F5               	goto	l905
 16113  002902  516A               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16114  002904  E104               	bnz	l13574
 16115  002906  0E0A               	movlw	10
 16116  002908  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16117  00290A  A0D8               	btfss	status,0,c
 16118  00290C  D7EF               	goto	l905
 16119  00290E                     u17360:
 16120  00290E                     l13574:
 16121                           
 16122                           ; BSR set to: 0
 16123                           ;diskio.c: 414: count2 = 0;
 16124  00290E  0E00               	movlw	0
 16125  002910  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 16126  002912  0E00               	movlw	0
 16127  002914  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 16128                           
 16129                           ; BSR set to: 0
 16130                           ;diskio.c: 418: LATBbits.LATB4 = 0;
 16131  002916  988A               	bcf	3978,4,c	;volatile
 16132                           
 16133                           ; BSR set to: 0
 16134                           ;diskio.c: 419: LATBbits.LATB7 = 0;
 16135  002918  9E8A               	bcf	3978,7,c	;volatile
 16136                           
 16137                           ; BSR set to: 0
 16138                           ;diskio.c: 420: dummy_clocks(1);
 16139  00291A  0E01               	movlw	1
 16140  00291C  EC2E  F02C         	call	_dummy_clocks
 16141                           
 16142                           ;diskio.c: 421: command(0X69, 0X40000000, 0x95);
 16143  002920  0E00               	movlw	0
 16144  002922  6E1C               	movwf	command@arg,c
 16145  002924  0E00               	movlw	0
 16146  002926  6E1D               	movwf	command@arg+1,c
 16147  002928  0E00               	movlw	0
 16148  00292A  6E1E               	movwf	command@arg+2,c
 16149  00292C  0E40               	movlw	64
 16150  00292E  6E1F               	movwf	command@arg+3,c
 16151  002930  0E95               	movlw	149
 16152  002932  6E20               	movwf	command@CRC,c
 16153  002934  0E69               	movlw	105
 16154  002936  EC87  F02C         	call	_command
 16155                           
 16156                           ;diskio.c: 422: proceed();
 16157  00293A  ECAC  F02D         	call	_proceed	;wreg free
 16158                           
 16159                           ;diskio.c: 423: LATBbits.LATB4 = 1;
 16160  00293E  888A               	bsf	3978,4,c	;volatile
 16161  002940                     
 16162                           ;diskio.c: 426: buff = response();
 16163  002940  ECA6  F02D         	call	_response	;wreg free
 16164  002944  0100               	movlb	0	; () banked
 16165  002946  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 16166                           
 16167                           ; BSR set to: 0
 16168                           ;diskio.c: 427: count2++;;
 16169  002948  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16170  00294A  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16171                           
 16172                           ; BSR set to: 0
 16173                           ;diskio.c: 428: }while(buff!=0X00);
 16174  00294C  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16175  00294E  A4D8               	btfss	status,2,c
 16176  002950  D7F7               	goto	l909
 16177                           
 16178                           ; BSR set to: 0
 16179                           ;diskio.c: 430: buff = 0xFF;
 16180  002952  696B               	setf	sdc_disk_initialize@buff& (0+255),b
 16181                           
 16182                           ; BSR set to: 0
 16183                           ;diskio.c: 431: dummy_clocks(1);
 16184  002954  0E01               	movlw	1
 16185  002956  EC2E  F02C         	call	_dummy_clocks
 16186                           
 16187                           ;diskio.c: 432: command(0X7A, 0X00000000, 0XFF);
 16188  00295A  0E00               	movlw	0
 16189  00295C  6E1C               	movwf	command@arg,c
 16190  00295E  0E00               	movlw	0
 16191  002960  6E1D               	movwf	command@arg+1,c
 16192  002962  0E00               	movlw	0
 16193  002964  6E1E               	movwf	command@arg+2,c
 16194  002966  0E00               	movlw	0
 16195  002968  6E1F               	movwf	command@arg+3,c
 16196  00296A  0EFF               	movlw	255
 16197  00296C  6E20               	movwf	command@CRC,c
 16198  00296E  0E7A               	movlw	122
 16199  002970  EC87  F02C         	call	_command
 16200                           
 16201                           ;diskio.c: 433: proceed();
 16202  002974  ECAC  F02D         	call	_proceed	;wreg free
 16203  002978                     l911:
 16204                           
 16205                           ;diskio.c: 435: buff = response();
 16206  002978  ECA6  F02D         	call	_response	;wreg free
 16207  00297C  0100               	movlb	0	; () banked
 16208  00297E  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 16209                           
 16210                           ; BSR set to: 0
 16211                           ;diskio.c: 436: ocr = (buff << 1) & 0b10000000;
 16212  002980  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16213  002982  256B               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 16214  002984  0B80               	andlw	128
 16215  002986  6F68               	movwf	sdc_disk_initialize@ocr& (0+255),b
 16216                           
 16217                           ; BSR set to: 0
 16218                           ;diskio.c: 440: count2++;
 16219  002988  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16220  00298A  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16221                           
 16222                           ; BSR set to: 0
 16223                           ;diskio.c: 441: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 16224  00298C  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 16225  00298E  B4D8               	btfsc	status,2,c
 16226  002990  D00B               	goto	u17400
 16227                           
 16228                           ; BSR set to: 0
 16229  002992  0568               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 16230  002994  B4D8               	btfsc	status,2,c
 16231  002996  D008               	goto	u17400
 16232                           
 16233                           ; BSR set to: 0
 16234  002998  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16235  00299A  D7EE               	goto	l911
 16236  00299C  516A               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16237  00299E  E104               	bnz	l13606
 16238  0029A0  0E0A               	movlw	10
 16239  0029A2  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16240  0029A4  A0D8               	btfss	status,0,c
 16241  0029A6  D7E8               	goto	l911
 16242  0029A8                     u17400:
 16243  0029A8                     l13606:
 16244                           
 16245                           ; BSR set to: 0
 16246                           ;diskio.c: 442: }while(ocr != 0X00 && ocr !=0x01);
 16247  0029A8  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 16248  0029AA  B4D8               	btfsc	status,2,c
 16249  0029AC  D003               	goto	u17420
 16250                           
 16251                           ; BSR set to: 0
 16252  0029AE  0568               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 16253  0029B0  A4D8               	btfss	status,2,c
 16254  0029B2  D757               	goto	l900
 16255  0029B4                     u17420:
 16256                           
 16257                           ; BSR set to: 0
 16258                           ;diskio.c: 446: count1 = 0;
 16259                           
 16260                           ; BSR set to: 0
 16261                           
 16262                           ; BSR set to: 0
 16263  0029B4  0E00               	movlw	0
 16264  0029B6  6F64               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 16265  0029B8  0E00               	movlw	0
 16266  0029BA  6F63               	movwf	sdc_disk_initialize@count1& (0+255),b
 16267                           
 16268                           ;diskio.c: 449: stat = 0X00;
 16269  0029BC  0E00               	movlw	0
 16270  0029BE  6F62               	movwf	sdc_disk_initialize@stat& (0+255),b
 16271                           
 16272                           ;diskio.c: 451: if(!ocr)
 16273  0029C0  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 16274  0029C2  A4D8               	btfss	status,2,c
 16275  0029C4  D0B4               	goto	u17520
 16276                           
 16277                           ; BSR set to: 0
 16278                           ;diskio.c: 452: {
 16279                           ;diskio.c: 453: LATBbits.LATB4 = 0;
 16280  0029C6  988A               	bcf	3978,4,c	;volatile
 16281                           
 16282                           ;diskio.c: 454: LATBbits.LATB7 = 0;
 16283  0029C8  9E8A               	bcf	3978,7,c	;volatile
 16284                           
 16285                           ; BSR set to: 0
 16286                           ;diskio.c: 455: dummy_clocks(10);
 16287  0029CA  0E0A               	movlw	10
 16288  0029CC  EC2E  F02C         	call	_dummy_clocks
 16289                           
 16290                           ;diskio.c: 456: command(0X50,0X00000200,0XFF);
 16291  0029D0  0E00               	movlw	0
 16292  0029D2  6E1C               	movwf	command@arg,c
 16293  0029D4  0E02               	movlw	2
 16294  0029D6  6E1D               	movwf	command@arg+1,c
 16295  0029D8  0E00               	movlw	0
 16296  0029DA  6E1E               	movwf	command@arg+2,c
 16297  0029DC  0E00               	movlw	0
 16298  0029DE  6E1F               	movwf	command@arg+3,c
 16299  0029E0  0EFF               	movlw	255
 16300  0029E2  6E20               	movwf	command@CRC,c
 16301  0029E4  0E50               	movlw	80
 16302  0029E6  EC87  F02C         	call	_command
 16303                           
 16304                           ;diskio.c: 457: proceed();
 16305  0029EA  ECAC  F02D         	call	_proceed	;wreg free
 16306                           
 16307                           ;diskio.c: 459: buff = 0xFF;
 16308  0029EE  0100               	movlb	0	; () banked
 16309  0029F0  696B               	setf	sdc_disk_initialize@buff& (0+255),b
 16310  0029F2                     l919:
 16311                           
 16312                           ; BSR set to: 0
 16313                           ;diskio.c: 461: buff = response();
 16314  0029F2  ECA6  F02D         	call	_response	;wreg free
 16315  0029F6  0100               	movlb	0	; () banked
 16316  0029F8  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 16317                           
 16318                           ; BSR set to: 0
 16319                           ;diskio.c: 462: }while(buff!=0X00);
 16320  0029FA  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16321  0029FC  B4D8               	btfsc	status,2,c
 16322  0029FE  D097               	goto	u17520
 16323  002A00  D7F8               	goto	l919
 16324  002A02                     l899:
 16325                           
 16326                           ; BSR set to: 0
 16327                           ;diskio.c: 467: else
 16328                           ;diskio.c: 468: {
 16329                           ;diskio.c: 470: count2 = 0;
 16330                           
 16331                           ; BSR set to: 0
 16332  002A02  0E00               	movlw	0
 16333  002A04  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 16334  002A06  0E00               	movlw	0
 16335  002A08  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 16336                           
 16337                           ; BSR set to: 0
 16338                           ;diskio.c: 471: buff = 0XFF;
 16339  002A0A  696B               	setf	sdc_disk_initialize@buff& (0+255),b
 16340                           
 16341                           ; BSR set to: 0
 16342                           ;diskio.c: 472: dummy_clocks(1);
 16343  002A0C  0E01               	movlw	1
 16344  002A0E  EC2E  F02C         	call	_dummy_clocks
 16345                           
 16346                           ;diskio.c: 473: command(0X69, 0X00000000, 0XFF);
 16347  002A12  0E00               	movlw	0
 16348  002A14  6E1C               	movwf	command@arg,c
 16349  002A16  0E00               	movlw	0
 16350  002A18  6E1D               	movwf	command@arg+1,c
 16351  002A1A  0E00               	movlw	0
 16352  002A1C  6E1E               	movwf	command@arg+2,c
 16353  002A1E  0E00               	movlw	0
 16354  002A20  6E1F               	movwf	command@arg+3,c
 16355  002A22  0EFF               	movlw	255
 16356  002A24  6E20               	movwf	command@CRC,c
 16357  002A26  0E69               	movlw	105
 16358  002A28  EC87  F02C         	call	_command
 16359                           
 16360                           ;diskio.c: 474: proceed();
 16361  002A2C  ECAC  F02D         	call	_proceed	;wreg free
 16362  002A30                     
 16363                           ;diskio.c: 476: buff = response();
 16364  002A30  ECA6  F02D         	call	_response	;wreg free
 16365  002A34  0100               	movlb	0	; () banked
 16366  002A36  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 16367                           
 16368                           ; BSR set to: 0
 16369                           ;diskio.c: 477: count2++;
 16370  002A38  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16371  002A3A  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16372                           
 16373                           ; BSR set to: 0
 16374                           ;diskio.c: 478: if(buff==0x00)
 16375  002A3C  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16376  002A3E  A4D8               	btfss	status,2,c
 16377  002A40  D00B               	goto	l923
 16378                           
 16379                           ; BSR set to: 0
 16380                           ;diskio.c: 479: {
 16381                           ;diskio.c: 480: posicao_cursor_lcd(1,0);
 16382  002A42  0E00               	movlw	0
 16383  002A44  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16384  002A46  0E01               	movlw	1
 16385  002A48  EC64  F029         	call	_posicao_cursor_lcd
 16386                           
 16387                           ;diskio.c: 481: escreve_frase_ram_lcd("SD VER. 1");
 16388  002A4C  0E39               	movlw	low STR_21
 16389  002A4E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16390  002A50  0E62               	movlw	high STR_21
 16391  002A52  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16392  002A54  EC1D  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 16393  002A58                     l923:
 16394                           
 16395                           ;diskio.c: 482: }
 16396                           ;diskio.c: 483: _delay((unsigned long)((1)*(48000000/4000.0)));
 16397  002A58  0E10               	movlw	16
 16398  002A5A  6E2A               	movwf	??_sdc_disk_initialize& (0+255),c
 16399  002A5C  0E94               	movlw	148
 16400  002A5E                     u23457:
 16401  002A5E  2EE8               	decfsz	wreg,f,c
 16402  002A60  D7FE               	bra	u23457
 16403  002A62  2E2A               	decfsz	??_sdc_disk_initialize& (0+255),f,c
 16404  002A64  D7FC               	bra	u23457
 16405  002A66  D000               	nop2	
 16406                           
 16407                           ;diskio.c: 484: }while(buff!=0X00 && count2<10000);
 16408  002A68  0100               	movlb	0	; () banked
 16409  002A6A  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16410  002A6C  B4D8               	btfsc	status,2,c
 16411  002A6E  D008               	goto	u17470
 16412                           
 16413                           ; BSR set to: 0
 16414  002A70  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16415  002A72  D7DE               	goto	l922
 16416  002A74  0E10               	movlw	16
 16417  002A76  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16418  002A78  0E27               	movlw	39
 16419  002A7A  596A               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16420  002A7C  A0D8               	btfss	status,0,c
 16421  002A7E  D7D8               	goto	l922
 16422  002A80                     u17470:
 16423                           
 16424                           ; BSR set to: 0
 16425                           ;diskio.c: 486: buff = 0xFF;
 16426                           
 16427                           ; BSR set to: 0
 16428  002A80  696B               	setf	sdc_disk_initialize@buff& (0+255),b
 16429                           
 16430                           ; BSR set to: 0
 16431                           ;diskio.c: 487: if(count2==10)
 16432  002A82  0E0A               	movlw	10
 16433  002A84  1969               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 16434  002A86  116A               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16435  002A88  A4D8               	btfss	status,2,c
 16436  002A8A  D036               	goto	u17510
 16437                           
 16438                           ; BSR set to: 0
 16439                           ;diskio.c: 488: {
 16440                           ;diskio.c: 489: count2 = 0;
 16441  002A8C  0E00               	movlw	0
 16442  002A8E  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 16443  002A90  0E00               	movlw	0
 16444  002A92  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 16445                           
 16446                           ; BSR set to: 0
 16447                           ;diskio.c: 490: dummy_clocks(10);
 16448  002A94  0E0A               	movlw	10
 16449  002A96  EC2E  F02C         	call	_dummy_clocks
 16450                           
 16451                           ;diskio.c: 491: command(0X41, 0X00000000, 0XFF);
 16452  002A9A  0E00               	movlw	0
 16453  002A9C  6E1C               	movwf	command@arg,c
 16454  002A9E  0E00               	movlw	0
 16455  002AA0  6E1D               	movwf	command@arg+1,c
 16456  002AA2  0E00               	movlw	0
 16457  002AA4  6E1E               	movwf	command@arg+2,c
 16458  002AA6  0E00               	movlw	0
 16459  002AA8  6E1F               	movwf	command@arg+3,c
 16460  002AAA  0EFF               	movlw	255
 16461  002AAC  6E20               	movwf	command@CRC,c
 16462  002AAE  0E41               	movlw	65
 16463  002AB0  EC87  F02C         	call	_command
 16464                           
 16465                           ;diskio.c: 492: proceed();
 16466  002AB4  ECAC  F02D         	call	_proceed	;wreg free
 16467  002AB8                     
 16468                           ;diskio.c: 494: buff = response();
 16469  002AB8  ECA6  F02D         	call	_response	;wreg free
 16470  002ABC  0100               	movlb	0	; () banked
 16471  002ABE  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 16472                           
 16473                           ; BSR set to: 0
 16474                           ;diskio.c: 495: count2++;
 16475  002AC0  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16476  002AC2  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16477                           
 16478                           ; BSR set to: 0
 16479                           ;diskio.c: 496: if(buff==0x00)
 16480  002AC4  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16481  002AC6  A4D8               	btfss	status,2,c
 16482  002AC8  D00B               	goto	l929
 16483                           
 16484                           ; BSR set to: 0
 16485                           ;diskio.c: 497: {
 16486                           ;diskio.c: 498: posicao_cursor_lcd(1,0);
 16487  002ACA  0E00               	movlw	0
 16488  002ACC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16489  002ACE  0E01               	movlw	1
 16490  002AD0  EC64  F029         	call	_posicao_cursor_lcd
 16491                           
 16492                           ;diskio.c: 499: escreve_frase_ram_lcd("MMC Ver. 3");
 16493  002AD4  0E23               	movlw	low STR_22
 16494  002AD6  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16495  002AD8  0E62               	movlw	high STR_22
 16496  002ADA  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16497  002ADC  EC1D  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 16498  002AE0                     l929:
 16499                           
 16500                           ;diskio.c: 500: }
 16501                           ;diskio.c: 502: }while(buff!=0X00 && count2<10000);
 16502  002AE0  0100               	movlb	0	; () banked
 16503  002AE2  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16504  002AE4  B4D8               	btfsc	status,2,c
 16505  002AE6  D008               	goto	u17510
 16506                           
 16507                           ; BSR set to: 0
 16508  002AE8  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16509  002AEA  D7E6               	goto	l928
 16510  002AEC  0E10               	movlw	16
 16511  002AEE  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16512  002AF0  0E27               	movlw	39
 16513  002AF2  596A               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16514  002AF4  A0D8               	btfss	status,0,c
 16515  002AF6  D7E0               	goto	l928
 16516  002AF8                     u17510:
 16517                           
 16518                           ; BSR set to: 0
 16519                           ;diskio.c: 503: }
 16520                           ;diskio.c: 506: dummy_clocks(10);
 16521                           
 16522                           ; BSR set to: 0
 16523                           
 16524                           ; BSR set to: 0
 16525                           
 16526                           ; BSR set to: 0
 16527  002AF8  0E0A               	movlw	10
 16528  002AFA  EC2E  F02C         	call	_dummy_clocks
 16529                           
 16530                           ;diskio.c: 507: command(0X50,0X00000200,0XFF);
 16531  002AFE  0E00               	movlw	0
 16532  002B00  6E1C               	movwf	command@arg,c
 16533  002B02  0E02               	movlw	2
 16534  002B04  6E1D               	movwf	command@arg+1,c
 16535  002B06  0E00               	movlw	0
 16536  002B08  6E1E               	movwf	command@arg+2,c
 16537  002B0A  0E00               	movlw	0
 16538  002B0C  6E1F               	movwf	command@arg+3,c
 16539  002B0E  0EFF               	movlw	255
 16540  002B10  6E20               	movwf	command@CRC,c
 16541  002B12  0E50               	movlw	80
 16542  002B14  EC87  F02C         	call	_command
 16543                           
 16544                           ;diskio.c: 508: proceed();
 16545  002B18  ECAC  F02D         	call	_proceed	;wreg free
 16546                           
 16547                           ;diskio.c: 510: buff = 0xFF;
 16548  002B1C  0100               	movlb	0	; () banked
 16549  002B1E  696B               	setf	sdc_disk_initialize@buff& (0+255),b
 16550  002B20                     l933:
 16551                           
 16552                           ; BSR set to: 0
 16553                           ;diskio.c: 512: buff = response();
 16554  002B20  ECA6  F02D         	call	_response	;wreg free
 16555  002B24  0100               	movlb	0	; () banked
 16556  002B26  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 16557                           
 16558                           ; BSR set to: 0
 16559                           ;diskio.c: 513: }while(buff!=0X00);
 16560  002B28  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16561  002B2A  A4D8               	btfss	status,2,c
 16562  002B2C  D7F9               	goto	l933
 16563  002B2E                     u17520:
 16564                           
 16565                           ; BSR set to: 0
 16566                           ;diskio.c: 515: }
 16567                           ;diskio.c: 519: return stat;
 16568                           
 16569                           ; BSR set to: 0
 16570                           
 16571                           ; BSR set to: 0
 16572  002B2E  5162               	movf	sdc_disk_initialize@stat& (0+255),w,b
 16573  002B30  0012               	return	
 16574  002B32                     __end_of_sdc_disk_initialize:
 16575                           	opt stack 0
 16576                           tosu	equ	0xFFF
 16577                           tosh	equ	0xFFE
 16578                           tosl	equ	0xFFD
 16579                           pclath	equ	0xFFA
 16580                           tblptru	equ	0xFF8
 16581                           tblptrh	equ	0xFF7
 16582                           tblptrl	equ	0xFF6
 16583                           tablat	equ	0xFF5
 16584                           prodh	equ	0xFF4
 16585                           prodl	equ	0xFF3
 16586                           intcon	equ	0xFF2
 16587                           intcon2	equ	0xFF1
 16588                           intcon3	equ	0xFF0
 16589                           indf0	equ	0xFEF
 16590                           postinc0	equ	0xFEE
 16591                           fsr0h	equ	0xFEA
 16592                           fsr0l	equ	0xFE9
 16593                           wreg	equ	0xFE8
 16594                           indf1	equ	0xFE7
 16595                           postinc1	equ	0xFE6
 16596                           postdec1	equ	0xFE5
 16597                           fsr1h	equ	0xFE2
 16598                           fsr1l	equ	0xFE1
 16599                           indf2	equ	0xFDF
 16600                           postinc2	equ	0xFDE
 16601                           postdec2	equ	0xFDD
 16602                           plusw2	equ	0xFDB
 16603                           fsr2h	equ	0xFDA
 16604                           fsr2l	equ	0xFD9
 16605                           status	equ	0xFD8
 16606                           
 16607 ;; *************** function _sdc_reset *****************
 16608 ;; Defined at:
 16609 ;;		line 288 in file "bibliotecas/diskio.c"
 16610 ;; Parameters:    Size  Location     Type
 16611 ;;		None
 16612 ;; Auto vars:     Size  Location     Type
 16613 ;;  teste          10    0        unsigned char [10]
 16614 ;;  count           2   38[COMRAM] int 
 16615 ;;  count_nosd      2   36[COMRAM] int 
 16616 ;;  i               2   34[COMRAM] int 
 16617 ;;  receive         2    0        unsigned int 
 16618 ;;  buff            1   40[COMRAM] unsigned char 
 16619 ;;  stat            1    0        unsigned char 
 16620 ;; Return value:  Size  Location     Type
 16621 ;;                  1    wreg      void 
 16622 ;; Registers used:
 16623 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16624 ;; Tracked objects:
 16625 ;;		On entry : 0/0
 16626 ;;		On exit  : 0/0
 16627 ;;		Unchanged: 0/0
 16628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16629 ;;      Params:         0       0       0       0       0       0       0       0       0
 16630 ;;      Locals:         7       0       0       0       0       0       0       0       0
 16631 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16632 ;;      Totals:         7       0       0       0       0       0       0       0       0
 16633 ;;Total ram usage:        7 bytes
 16634 ;; Hardware stack levels used:    1
 16635 ;; Hardware stack levels required when called:    5
 16636 ;; This function calls:
 16637 ;;		_command
 16638 ;;		_dummy_clocks
 16639 ;;		_escreve_frase_ram_lcd
 16640 ;;		_posicao_cursor_lcd
 16641 ;;		_proceed
 16642 ;;		_response
 16643 ;; This function is called by:
 16644 ;;		_sdc_disk_initialize
 16645 ;; This function uses a non-reentrant model
 16646 ;;
 16647                           
 16648                           	psect	text45
 16649  0049EE                     __ptext45:
 16650                           	opt stack 0
 16651  0049EE                     _sdc_reset:
 16652                           	opt stack 19
 16653                           
 16654                           ;diskio.c: 290: int i = 0, count = 0, count_nosd = 0;
 16655                           
 16656                           ; BSR set to: 0
 16657                           ;incstack = 0
 16658  0049EE  0E00               	movlw	0
 16659  0049F0  6E24               	movwf	sdc_reset@i+1,c
 16660  0049F2  0E00               	movlw	0
 16661  0049F4  6E23               	movwf	sdc_reset@i,c
 16662  0049F6  0E00               	movlw	0
 16663  0049F8  6E28               	movwf	sdc_reset@count+1,c
 16664  0049FA  0E00               	movlw	0
 16665  0049FC  6E27               	movwf	sdc_reset@count,c
 16666  0049FE  0E00               	movlw	0
 16667  004A00  6E26               	movwf	sdc_reset@count_nosd+1,c
 16668  004A02  0E00               	movlw	0
 16669  004A04  6E25               	movwf	sdc_reset@count_nosd,c
 16670  004A06                     
 16671                           ;diskio.c: 298: dummy_clocks(10);
 16672  004A06  0E0A               	movlw	10
 16673  004A08  EC2E  F02C         	call	_dummy_clocks
 16674                           
 16675                           ;diskio.c: 299: LATBbits.LATB4 = 0;
 16676  004A0C  988A               	bcf	3978,4,c	;volatile
 16677                           
 16678                           ;diskio.c: 300: command(0X40, 0X00000000, 0X95);
 16679  004A0E  0E00               	movlw	0
 16680  004A10  6E1C               	movwf	command@arg,c
 16681  004A12  0E00               	movlw	0
 16682  004A14  6E1D               	movwf	command@arg+1,c
 16683  004A16  0E00               	movlw	0
 16684  004A18  6E1E               	movwf	command@arg+2,c
 16685  004A1A  0E00               	movlw	0
 16686  004A1C  6E1F               	movwf	command@arg+3,c
 16687  004A1E  0E95               	movlw	149
 16688  004A20  6E20               	movwf	command@CRC,c
 16689  004A22  0E40               	movlw	64
 16690  004A24  EC87  F02C         	call	_command
 16691                           
 16692                           ;diskio.c: 301: proceed();
 16693  004A28  ECAC  F02D         	call	_proceed	;wreg free
 16694                           
 16695                           ;diskio.c: 302: LATBbits.LATB4 = 1;
 16696  004A2C  888A               	bsf	3978,4,c	;volatile
 16697  004A2E                     
 16698                           ;diskio.c: 304: buff = response();
 16699  004A2E  ECA6  F02D         	call	_response	;wreg free
 16700  004A32  6E29               	movwf	sdc_reset@buff,c
 16701                           
 16702                           ;diskio.c: 305: count++;
 16703  004A34  4A27               	infsnz	sdc_reset@count,f,c
 16704  004A36  2A28               	incf	sdc_reset@count+1,f,c
 16705                           
 16706                           ;diskio.c: 308: }while((buff!=0X01) && count<300);
 16707  004A38  0429               	decf	sdc_reset@buff,w,c
 16708  004A3A  B4D8               	btfsc	status,2,c
 16709  004A3C  D008               	goto	u16900
 16710  004A3E  BE28               	btfsc	sdc_reset@count+1,7,c
 16711  004A40  D7F6               	goto	l882
 16712  004A42  0E2C               	movlw	44
 16713  004A44  5C27               	subwf	sdc_reset@count,w,c
 16714  004A46  0E01               	movlw	1
 16715  004A48  5828               	subwfb	sdc_reset@count+1,w,c
 16716  004A4A  A0D8               	btfss	status,0,c
 16717  004A4C  D7F0               	goto	l882
 16718  004A4E                     u16900:
 16719                           
 16720                           ;diskio.c: 309: count = 0;
 16721  004A4E  0E00               	movlw	0
 16722  004A50  6E28               	movwf	sdc_reset@count+1,c
 16723  004A52  0E00               	movlw	0
 16724  004A54  6E27               	movwf	sdc_reset@count,c
 16725                           
 16726                           ;diskio.c: 310: if(buff != 0x01)
 16727  004A56  0429               	decf	sdc_reset@buff,w,c
 16728  004A58  B4D8               	btfsc	status,2,c
 16729  004A5A  D017               	goto	l886
 16730                           
 16731                           ;diskio.c: 311: {
 16732                           ;diskio.c: 312: posicao_cursor_lcd(1,0);
 16733  004A5C  0E00               	movlw	0
 16734  004A5E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16735  004A60  0E01               	movlw	1
 16736  004A62  EC64  F029         	call	_posicao_cursor_lcd
 16737                           
 16738                           ;diskio.c: 313: escreve_frase_ram_lcd("Sem Cartao");
 16739  004A66  0E2E               	movlw	low STR_18
 16740  004A68  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16741  004A6A  0E62               	movlw	high STR_18
 16742  004A6C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16743  004A6E  EC1D  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 16744                           
 16745                           ;diskio.c: 314: posicao_cursor_lcd(2,0);
 16746  004A72  0E00               	movlw	0
 16747  004A74  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16748  004A76  0E02               	movlw	2
 16749  004A78  EC64  F029         	call	_posicao_cursor_lcd
 16750                           
 16751                           ;diskio.c: 315: escreve_frase_ram_lcd("Insira o Cartao");
 16752  004A7C  0EE4               	movlw	low STR_19
 16753  004A7E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16754  004A80  0E61               	movlw	high STR_19
 16755  004A82  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16756  004A84  EC1D  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 16757                           
 16758                           ;diskio.c: 316: }
 16759  004A88  D00B               	goto	l887
 16760  004A8A                     l886:
 16761                           
 16762                           ;diskio.c: 317: else
 16763                           ;diskio.c: 318: {
 16764                           ;diskio.c: 319: posicao_cursor_lcd(1,0);
 16765  004A8A  0E00               	movlw	0
 16766  004A8C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16767  004A8E  0E01               	movlw	1
 16768  004A90  EC64  F029         	call	_posicao_cursor_lcd
 16769                           
 16770                           ;diskio.c: 320: escreve_frase_ram_lcd("Cartao Inserido");
 16771  004A94  0EF4               	movlw	low STR_20
 16772  004A96  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16773  004A98  0E61               	movlw	high STR_20
 16774  004A9A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16775  004A9C  EC1D  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 16776  004AA0                     l887:
 16777                           
 16778                           ;diskio.c: 321: }
 16779                           ;diskio.c: 323: }while(buff!=0X01);
 16780  004AA0  0429               	decf	sdc_reset@buff,w,c
 16781  004AA2  B4D8               	btfsc	status,2,c
 16782  004AA4  0012               	return	
 16783  004AA6  D7AF               	goto	l881
 16784  004AA8                     __end_of_sdc_reset:
 16785                           	opt stack 0
 16786                           tosu	equ	0xFFF
 16787                           tosh	equ	0xFFE
 16788                           tosl	equ	0xFFD
 16789                           pclath	equ	0xFFA
 16790                           tblptru	equ	0xFF8
 16791                           tblptrh	equ	0xFF7
 16792                           tblptrl	equ	0xFF6
 16793                           tablat	equ	0xFF5
 16794                           prodh	equ	0xFF4
 16795                           prodl	equ	0xFF3
 16796                           intcon	equ	0xFF2
 16797                           intcon2	equ	0xFF1
 16798                           intcon3	equ	0xFF0
 16799                           indf0	equ	0xFEF
 16800                           postinc0	equ	0xFEE
 16801                           fsr0h	equ	0xFEA
 16802                           fsr0l	equ	0xFE9
 16803                           wreg	equ	0xFE8
 16804                           indf1	equ	0xFE7
 16805                           postinc1	equ	0xFE6
 16806                           postdec1	equ	0xFE5
 16807                           fsr1h	equ	0xFE2
 16808                           fsr1l	equ	0xFE1
 16809                           indf2	equ	0xFDF
 16810                           postinc2	equ	0xFDE
 16811                           postdec2	equ	0xFDD
 16812                           plusw2	equ	0xFDB
 16813                           fsr2h	equ	0xFDA
 16814                           fsr2l	equ	0xFD9
 16815                           status	equ	0xFD8
 16816                           
 16817 ;; *************** function ___lmul *****************
 16818 ;; Defined at:
 16819 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 16820 ;; Parameters:    Size  Location     Type
 16821 ;;  multiplier      4   25[COMRAM] unsigned long 
 16822 ;;  multiplicand    4   29[COMRAM] unsigned long 
 16823 ;; Auto vars:     Size  Location     Type
 16824 ;;  product         4   33[COMRAM] unsigned long 
 16825 ;; Return value:  Size  Location     Type
 16826 ;;                  4   25[COMRAM] unsigned long 
 16827 ;; Registers used:
 16828 ;;		wreg, status,2, status,0
 16829 ;; Tracked objects:
 16830 ;;		On entry : 0/0
 16831 ;;		On exit  : 0/0
 16832 ;;		Unchanged: 0/0
 16833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16834 ;;      Params:         8       0       0       0       0       0       0       0       0
 16835 ;;      Locals:         4       0       0       0       0       0       0       0       0
 16836 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16837 ;;      Totals:        12       0       0       0       0       0       0       0       0
 16838 ;;Total ram usage:       12 bytes
 16839 ;; Hardware stack levels used:    1
 16840 ;; Hardware stack levels required when called:    2
 16841 ;; This function calls:
 16842 ;;		Nothing
 16843 ;; This function is called by:
 16844 ;;		_clst2sect
 16845 ;;		_mount_volume
 16846 ;;		_strtod
 16847 ;;		_atol
 16848 ;; This function uses a non-reentrant model
 16849 ;;
 16850                           
 16851                           	psect	text46
 16852  005592                     __ptext46:
 16853                           	opt stack 0
 16854  005592                     ___lmul:
 16855                           	opt stack 24
 16856                           
 16857                           ;incstack = 0
 16858  005592  0E00               	movlw	0
 16859  005594  6E22               	movwf	___lmul@product,c
 16860  005596  0E00               	movlw	0
 16861  005598  6E23               	movwf	___lmul@product+1,c
 16862  00559A  0E00               	movlw	0
 16863  00559C  6E24               	movwf	___lmul@product+2,c
 16864  00559E  0E00               	movlw	0
 16865  0055A0  6E25               	movwf	___lmul@product+3,c
 16866  0055A2  A01A               	btfss	___lmul@multiplier,0,c
 16867  0055A4  D008               	goto	l1926
 16868  0055A6  501E               	movf	___lmul@multiplicand,w,c
 16869  0055A8  2622               	addwf	___lmul@product,f,c
 16870  0055AA  501F               	movf	___lmul@multiplicand+1,w,c
 16871  0055AC  2223               	addwfc	___lmul@product+1,f,c
 16872  0055AE  5020               	movf	___lmul@multiplicand+2,w,c
 16873  0055B0  2224               	addwfc	___lmul@product+2,f,c
 16874  0055B2  5021               	movf	___lmul@multiplicand+3,w,c
 16875  0055B4  2225               	addwfc	___lmul@product+3,f,c
 16876  0055B6                     l1926:
 16877  0055B6  90D8               	bcf	status,0,c
 16878  0055B8  361E               	rlcf	___lmul@multiplicand,f,c
 16879  0055BA  361F               	rlcf	___lmul@multiplicand+1,f,c
 16880  0055BC  3620               	rlcf	___lmul@multiplicand+2,f,c
 16881  0055BE  3621               	rlcf	___lmul@multiplicand+3,f,c
 16882  0055C0  90D8               	bcf	status,0,c
 16883  0055C2  321D               	rrcf	___lmul@multiplier+3,f,c
 16884  0055C4  321C               	rrcf	___lmul@multiplier+2,f,c
 16885  0055C6  321B               	rrcf	___lmul@multiplier+1,f,c
 16886  0055C8  321A               	rrcf	___lmul@multiplier,f,c
 16887  0055CA  501A               	movf	___lmul@multiplier,w,c
 16888  0055CC  101B               	iorwf	___lmul@multiplier+1,w,c
 16889  0055CE  101C               	iorwf	___lmul@multiplier+2,w,c
 16890  0055D0  101D               	iorwf	___lmul@multiplier+3,w,c
 16891  0055D2  A4D8               	btfss	status,2,c
 16892  0055D4  D7E6               	goto	l1925
 16893  0055D6  C022  F01A         	movff	___lmul@product,?___lmul
 16894  0055DA  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 16895  0055DE  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 16896  0055E2  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 16897  0055E6  0012               	return		;funcret
 16898  0055E8                     __end_of___lmul:
 16899                           	opt stack 0
 16900                           tosu	equ	0xFFF
 16901                           tosh	equ	0xFFE
 16902                           tosl	equ	0xFFD
 16903                           pclath	equ	0xFFA
 16904                           tblptru	equ	0xFF8
 16905                           tblptrh	equ	0xFF7
 16906                           tblptrl	equ	0xFF6
 16907                           tablat	equ	0xFF5
 16908                           prodh	equ	0xFF4
 16909                           prodl	equ	0xFF3
 16910                           intcon	equ	0xFF2
 16911                           intcon2	equ	0xFF1
 16912                           intcon3	equ	0xFF0
 16913                           indf0	equ	0xFEF
 16914                           postinc0	equ	0xFEE
 16915                           fsr0h	equ	0xFEA
 16916                           fsr0l	equ	0xFE9
 16917                           wreg	equ	0xFE8
 16918                           indf1	equ	0xFE7
 16919                           postinc1	equ	0xFE6
 16920                           postdec1	equ	0xFE5
 16921                           fsr1h	equ	0xFE2
 16922                           fsr1l	equ	0xFE1
 16923                           indf2	equ	0xFDF
 16924                           postinc2	equ	0xFDE
 16925                           postdec2	equ	0xFDD
 16926                           plusw2	equ	0xFDB
 16927                           fsr2h	equ	0xFDA
 16928                           fsr2l	equ	0xFD9
 16929                           status	equ	0xFD8
 16930                           
 16931 ;; *************** function ___lldiv *****************
 16932 ;; Defined at:
 16933 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 16934 ;; Parameters:    Size  Location     Type
 16935 ;;  dividend        4   25[COMRAM] unsigned long 
 16936 ;;  divisor         4   29[COMRAM] unsigned long 
 16937 ;; Auto vars:     Size  Location     Type
 16938 ;;  quotient        4   33[COMRAM] unsigned long 
 16939 ;;  counter         1   37[COMRAM] unsigned char 
 16940 ;; Return value:  Size  Location     Type
 16941 ;;                  4   25[COMRAM] unsigned long 
 16942 ;; Registers used:
 16943 ;;		wreg, status,2, status,0
 16944 ;; Tracked objects:
 16945 ;;		On entry : 0/0
 16946 ;;		On exit  : 0/0
 16947 ;;		Unchanged: 0/0
 16948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16949 ;;      Params:         8       0       0       0       0       0       0       0       0
 16950 ;;      Locals:         5       0       0       0       0       0       0       0       0
 16951 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16952 ;;      Totals:        13       0       0       0       0       0       0       0       0
 16953 ;;Total ram usage:       13 bytes
 16954 ;; Hardware stack levels used:    1
 16955 ;; Hardware stack levels required when called:    2
 16956 ;; This function calls:
 16957 ;;		Nothing
 16958 ;; This function is called by:
 16959 ;;		_mount_volume
 16960 ;;		_convert_time_to_utc
 16961 ;;		_f_lseek
 16962 ;;		_f_printf
 16963 ;;		_sprintf
 16964 ;; This function uses a non-reentrant model
 16965 ;;
 16966                           
 16967                           	psect	text47
 16968  0050E4                     __ptext47:
 16969                           	opt stack 0
 16970  0050E4                     ___lldiv:
 16971                           	opt stack 24
 16972                           
 16973                           ;incstack = 0
 16974  0050E4  0E00               	movlw	0
 16975  0050E6  6E22               	movwf	___lldiv@quotient,c
 16976  0050E8  0E00               	movlw	0
 16977  0050EA  6E23               	movwf	___lldiv@quotient+1,c
 16978  0050EC  0E00               	movlw	0
 16979  0050EE  6E24               	movwf	___lldiv@quotient+2,c
 16980  0050F0  0E00               	movlw	0
 16981  0050F2  6E25               	movwf	___lldiv@quotient+3,c
 16982  0050F4  501E               	movf	___lldiv@divisor,w,c
 16983  0050F6  101F               	iorwf	___lldiv@divisor+1,w,c
 16984  0050F8  1020               	iorwf	___lldiv@divisor+2,w,c
 16985  0050FA  1021               	iorwf	___lldiv@divisor+3,w,c
 16986  0050FC  B4D8               	btfsc	status,2,c
 16987  0050FE  D02A               	goto	l2406
 16988  005100  0E01               	movlw	1
 16989  005102  6E26               	movwf	___lldiv@counter,c
 16990  005104  D006               	goto	l2401
 16991  005106  90D8               	bcf	status,0,c
 16992  005108  361E               	rlcf	___lldiv@divisor,f,c
 16993  00510A  361F               	rlcf	___lldiv@divisor+1,f,c
 16994  00510C  3620               	rlcf	___lldiv@divisor+2,f,c
 16995  00510E  3621               	rlcf	___lldiv@divisor+3,f,c
 16996  005110  2A26               	incf	___lldiv@counter,f,c
 16997  005112                     l2401:
 16998  005112  AE21               	btfss	___lldiv@divisor+3,7,c
 16999  005114  D7F8               	goto	l2402
 17000  005116                     u18850:
 17001  005116  90D8               	bcf	status,0,c
 17002  005118  3622               	rlcf	___lldiv@quotient,f,c
 17003  00511A  3623               	rlcf	___lldiv@quotient+1,f,c
 17004  00511C  3624               	rlcf	___lldiv@quotient+2,f,c
 17005  00511E  3625               	rlcf	___lldiv@quotient+3,f,c
 17006  005120  501E               	movf	___lldiv@divisor,w,c
 17007  005122  5C1A               	subwf	___lldiv@dividend,w,c
 17008  005124  501F               	movf	___lldiv@divisor+1,w,c
 17009  005126  581B               	subwfb	___lldiv@dividend+1,w,c
 17010  005128  5020               	movf	___lldiv@divisor+2,w,c
 17011  00512A  581C               	subwfb	___lldiv@dividend+2,w,c
 17012  00512C  5021               	movf	___lldiv@divisor+3,w,c
 17013  00512E  581D               	subwfb	___lldiv@dividend+3,w,c
 17014  005130  A0D8               	btfss	status,0,c
 17015  005132  D009               	goto	l2405
 17016  005134  501E               	movf	___lldiv@divisor,w,c
 17017  005136  5E1A               	subwf	___lldiv@dividend,f,c
 17018  005138  501F               	movf	___lldiv@divisor+1,w,c
 17019  00513A  5A1B               	subwfb	___lldiv@dividend+1,f,c
 17020  00513C  5020               	movf	___lldiv@divisor+2,w,c
 17021  00513E  5A1C               	subwfb	___lldiv@dividend+2,f,c
 17022  005140  5021               	movf	___lldiv@divisor+3,w,c
 17023  005142  5A1D               	subwfb	___lldiv@dividend+3,f,c
 17024  005144  8022               	bsf	___lldiv@quotient,0,c
 17025  005146                     l2405:
 17026  005146  90D8               	bcf	status,0,c
 17027  005148  3221               	rrcf	___lldiv@divisor+3,f,c
 17028  00514A  3220               	rrcf	___lldiv@divisor+2,f,c
 17029  00514C  321F               	rrcf	___lldiv@divisor+1,f,c
 17030  00514E  321E               	rrcf	___lldiv@divisor,f,c
 17031  005150  2E26               	decfsz	___lldiv@counter,f,c
 17032  005152  D7E1               	goto	u18850
 17033  005154                     l2406:
 17034  005154  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 17035  005158  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 17036  00515C  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 17037  005160  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 17038  005164  0012               	return		;funcret
 17039  005166                     __end_of___lldiv:
 17040                           	opt stack 0
 17041                           tosu	equ	0xFFF
 17042                           tosh	equ	0xFFE
 17043                           tosl	equ	0xFFD
 17044                           pclath	equ	0xFFA
 17045                           tblptru	equ	0xFF8
 17046                           tblptrh	equ	0xFF7
 17047                           tblptrl	equ	0xFF6
 17048                           tablat	equ	0xFF5
 17049                           prodh	equ	0xFF4
 17050                           prodl	equ	0xFF3
 17051                           intcon	equ	0xFF2
 17052                           intcon2	equ	0xFF1
 17053                           intcon3	equ	0xFF0
 17054                           indf0	equ	0xFEF
 17055                           postinc0	equ	0xFEE
 17056                           fsr0h	equ	0xFEA
 17057                           fsr0l	equ	0xFE9
 17058                           wreg	equ	0xFE8
 17059                           indf1	equ	0xFE7
 17060                           postinc1	equ	0xFE6
 17061                           postdec1	equ	0xFE5
 17062                           fsr1h	equ	0xFE2
 17063                           fsr1l	equ	0xFE1
 17064                           indf2	equ	0xFDF
 17065                           postinc2	equ	0xFDE
 17066                           postdec2	equ	0xFDD
 17067                           plusw2	equ	0xFDB
 17068                           fsr2h	equ	0xFDA
 17069                           fsr2l	equ	0xFD9
 17070                           status	equ	0xFD8
 17071                           
 17072 ;; *************** function _f_close *****************
 17073 ;; Defined at:
 17074 ;;		line 4162 in file "bibliotecas/ff.c"
 17075 ;; Parameters:    Size  Location     Type
 17076 ;;  fp              2   70[BANK0 ] PTR struct .
 17077 ;;		 -> SDCard@fil(34), 
 17078 ;; Auto vars:     Size  Location     Type
 17079 ;;  fs              2   72[BANK0 ] PTR struct .
 17080 ;;		 -> NULL(0), fs(559), 
 17081 ;;  res             1   74[BANK0 ] enum E154
 17082 ;; Return value:  Size  Location     Type
 17083 ;;                  1    wreg      enum E3971
 17084 ;; Registers used:
 17085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17086 ;; Tracked objects:
 17087 ;;		On entry : 0/0
 17088 ;;		On exit  : 0/0
 17089 ;;		Unchanged: 0/0
 17090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17091 ;;      Params:         0       2       0       0       0       0       0       0       0
 17092 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17093 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17094 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17095 ;;Total ram usage:        5 bytes
 17096 ;; Hardware stack levels used:    1
 17097 ;; Hardware stack levels required when called:   10
 17098 ;; This function calls:
 17099 ;;		_f_sync
 17100 ;;		_validate
 17101 ;; This function is called by:
 17102 ;;		_SDCard
 17103 ;; This function uses a non-reentrant model
 17104 ;;
 17105                           
 17106                           	psect	text48
 17107  00568C                     __ptext48:
 17108                           	opt stack 0
 17109  00568C                     _f_close:
 17110                           	opt stack 18
 17111                           
 17112                           ;ff.c: 4166: FRESULT res;
 17113                           ;ff.c: 4167: FATFS *fs;
 17114                           ;ff.c: 4170: res = f_sync(fp);
 17115                           
 17116                           ;incstack = 0
 17117  00568C  C0A6  F09B         	movff	f_close@fp,f_sync@fp
 17118  005690  C0A7  F09C         	movff	f_close@fp+1,f_sync@fp+1
 17119  005694  ECF8  F01C         	call	_f_sync	;wreg free
 17120  005698  0100               	movlb	0	; () banked
 17121  00569A  6FAA               	movwf	f_close@res& (0+255),b
 17122                           
 17123                           ; BSR set to: 0
 17124                           ;ff.c: 4171: if (res == FR_OK)
 17125  00569C  51AA               	movf	f_close@res& (0+255),w,b
 17126  00569E  A4D8               	btfss	status,2,c
 17127  0056A0  0012               	return	
 17128                           
 17129                           ; BSR set to: 0
 17130                           ;ff.c: 4173: {
 17131                           ;ff.c: 4174: res = validate(&fp->obj, &fs);
 17132  0056A2  C0A6  F021         	movff	f_close@fp,validate@obj
 17133  0056A6  C0A7  F022         	movff	f_close@fp+1,validate@obj+1
 17134  0056AA  0EA8               	movlw	low f_close@fs
 17135  0056AC  6E23               	movwf	validate@rfs,c
 17136  0056AE  0E00               	movlw	high f_close@fs
 17137  0056B0  6E24               	movwf	validate@rfs+1,c
 17138  0056B2  EC97  F024         	call	_validate	;wreg free
 17139  0056B6  0100               	movlb	0	; () banked
 17140  0056B8  6FAA               	movwf	f_close@res& (0+255),b
 17141                           
 17142                           ; BSR set to: 0
 17143                           ;ff.c: 4175: if (res == FR_OK) {
 17144  0056BA  51AA               	movf	f_close@res& (0+255),w,b
 17145  0056BC  A4D8               	btfss	status,2,c
 17146  0056BE  0012               	return	
 17147                           
 17148                           ; BSR set to: 0
 17149                           ;ff.c: 4180: fp->obj.fs = 0;
 17150  0056C0  C0A6  FFD9         	movff	f_close@fp,fsr2l
 17151  0056C4  C0A7  FFDA         	movff	f_close@fp+1,fsr2h
 17152  0056C8  0E00               	movlw	0
 17153  0056CA  6EDE               	movwf	postinc2,c
 17154  0056CC  0E00               	movlw	0
 17155  0056CE  6EDD               	movwf	postdec2,c
 17156                           
 17157                           ; BSR set to: 0
 17158                           
 17159                           ; BSR set to: 0
 17160  0056D0  0012               	return	
 17161  0056D2                     __end_of_f_close:
 17162                           	opt stack 0
 17163                           tosu	equ	0xFFF
 17164                           tosh	equ	0xFFE
 17165                           tosl	equ	0xFFD
 17166                           pclath	equ	0xFFA
 17167                           tblptru	equ	0xFF8
 17168                           tblptrh	equ	0xFF7
 17169                           tblptrl	equ	0xFF6
 17170                           tablat	equ	0xFF5
 17171                           prodh	equ	0xFF4
 17172                           prodl	equ	0xFF3
 17173                           intcon	equ	0xFF2
 17174                           intcon2	equ	0xFF1
 17175                           intcon3	equ	0xFF0
 17176                           indf0	equ	0xFEF
 17177                           postinc0	equ	0xFEE
 17178                           fsr0h	equ	0xFEA
 17179                           fsr0l	equ	0xFE9
 17180                           wreg	equ	0xFE8
 17181                           indf1	equ	0xFE7
 17182                           postinc1	equ	0xFE6
 17183                           postdec1	equ	0xFE5
 17184                           fsr1h	equ	0xFE2
 17185                           fsr1l	equ	0xFE1
 17186                           indf2	equ	0xFDF
 17187                           postinc2	equ	0xFDE
 17188                           postdec2	equ	0xFDD
 17189                           plusw2	equ	0xFDB
 17190                           fsr2h	equ	0xFDA
 17191                           fsr2l	equ	0xFD9
 17192                           status	equ	0xFD8
 17193                           
 17194 ;; *************** function _f_sync *****************
 17195 ;; Defined at:
 17196 ;;		line 4081 in file "bibliotecas/ff.c"
 17197 ;; Parameters:    Size  Location     Type
 17198 ;;  fp              2   59[BANK0 ] PTR struct .
 17199 ;;		 -> SDCard@fil(34), 
 17200 ;; Auto vars:     Size  Location     Type
 17201 ;;  tm              4   61[BANK0 ] unsigned long 
 17202 ;;  dir             2   68[BANK0 ] PTR unsigned char 
 17203 ;;		 -> NULL(0), fs(559), 
 17204 ;;  fs              2   66[BANK0 ] PTR struct .
 17205 ;;		 -> NULL(0), fs(559), 
 17206 ;;  res             1   65[BANK0 ] enum E154
 17207 ;; Return value:  Size  Location     Type
 17208 ;;                  1    wreg      enum E154
 17209 ;; Registers used:
 17210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17211 ;; Tracked objects:
 17212 ;;		On entry : 0/0
 17213 ;;		On exit  : 0/0
 17214 ;;		Unchanged: 0/0
 17215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17216 ;;      Params:         0       2       0       0       0       0       0       0       0
 17217 ;;      Locals:         0       9       0       0       0       0       0       0       0
 17218 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17219 ;;      Totals:         0      11       0       0       0       0       0       0       0
 17220 ;;Total ram usage:       11 bytes
 17221 ;; Hardware stack levels used:    1
 17222 ;; Hardware stack levels required when called:    9
 17223 ;; This function calls:
 17224 ;;		_get_fattime
 17225 ;;		_move_window
 17226 ;;		_st_clust
 17227 ;;		_st_dword
 17228 ;;		_st_word
 17229 ;;		_sync_fs
 17230 ;;		_validate
 17231 ;; This function is called by:
 17232 ;;		_f_close
 17233 ;; This function uses a non-reentrant model
 17234 ;;
 17235                           
 17236                           	psect	text49
 17237  0039F0                     __ptext49:
 17238                           	opt stack 0
 17239  0039F0                     _f_sync:
 17240                           	opt stack 18
 17241                           
 17242                           ;ff.c: 4085: FRESULT res;
 17243                           ;ff.c: 4086: FATFS *fs;
 17244                           ;ff.c: 4087: DWORD tm;
 17245                           ;ff.c: 4088: BYTE *dir;
 17246                           ;ff.c: 4091: res = validate(&fp->obj, &fs);
 17247                           
 17248                           ; BSR set to: 0
 17249                           ;incstack = 0
 17250  0039F0  C09B  F021         	movff	f_sync@fp,validate@obj
 17251  0039F4  C09C  F022         	movff	f_sync@fp+1,validate@obj+1
 17252  0039F8  0EA2               	movlw	low f_sync@fs
 17253  0039FA  6E23               	movwf	validate@rfs,c
 17254  0039FC  0E00               	movlw	high f_sync@fs
 17255  0039FE  6E24               	movwf	validate@rfs+1,c
 17256  003A00  EC97  F024         	call	_validate	;wreg free
 17257  003A04  0100               	movlb	0	; () banked
 17258  003A06  6FA1               	movwf	f_sync@res& (0+255),b
 17259                           
 17260                           ; BSR set to: 0
 17261                           ;ff.c: 4092: if (res == FR_OK) {
 17262  003A08  51A1               	movf	f_sync@res& (0+255),w,b
 17263  003A0A  A4D8               	btfss	status,2,c
 17264  003A0C  D0A8               	goto	l1526
 17265                           
 17266                           ; BSR set to: 0
 17267                           ;ff.c: 4093: if (fp->flag & 0x40) {
 17268  003A0E  EE20 F00E          	lfsr	2,14
 17269  003A12  519B               	movf	f_sync@fp& (0+255),w,b
 17270  003A14  26D9               	addwf	fsr2l,f,c
 17271  003A16  519C               	movf	(f_sync@fp+1)& (0+255),w,b
 17272  003A18  22DA               	addwfc	fsr2h,f,c
 17273  003A1A  ACDF               	btfss	indf2,6,c
 17274  003A1C  D0A0               	goto	l1526
 17275                           
 17276                           ; BSR set to: 0
 17277                           ;ff.c: 4101: tm = get_fattime();
 17278  003A1E  EC6A  F022         	call	_get_fattime	;wreg free
 17279  003A22  C01A  F09D         	movff	?_get_fattime,f_sync@tm
 17280  003A26  C01B  F09E         	movff	?_get_fattime+1,f_sync@tm+1
 17281  003A2A  C01C  F09F         	movff	?_get_fattime+2,f_sync@tm+2
 17282  003A2E  C01D  F0A0         	movff	?_get_fattime+3,f_sync@tm+3
 17283                           
 17284                           ;ff.c: 4133: {
 17285                           ;ff.c: 4134: res = move_window(fs, fp->dir_sect);
 17286  003A32  C0A2  F090         	movff	f_sync@fs,move_window@fs
 17287  003A36  C0A3  F091         	movff	f_sync@fs+1,move_window@fs+1
 17288  003A3A  0100               	movlb	0	; () banked
 17289  003A3C  EE20 F01C          	lfsr	2,28
 17290  003A40  519B               	movf	f_sync@fp& (0+255),w,b
 17291  003A42  26D9               	addwf	fsr2l,f,c
 17292  003A44  519C               	movf	(f_sync@fp+1)& (0+255),w,b
 17293  003A46  22DA               	addwfc	fsr2h,f,c
 17294  003A48  CFDE F092          	movff	postinc2,move_window@sect
 17295  003A4C  CFDE F093          	movff	postinc2,move_window@sect+1
 17296  003A50  CFDE F094          	movff	postinc2,move_window@sect+2
 17297  003A54  CFDE F095          	movff	postinc2,move_window@sect+3
 17298  003A58  EC09  F026         	call	_move_window	;wreg free
 17299  003A5C  0100               	movlb	0	; () banked
 17300  003A5E  6FA1               	movwf	f_sync@res& (0+255),b
 17301                           
 17302                           ; BSR set to: 0
 17303                           ;ff.c: 4135: if (res == FR_OK) {
 17304  003A60  51A1               	movf	f_sync@res& (0+255),w,b
 17305  003A62  A4D8               	btfss	status,2,c
 17306  003A64  D07C               	goto	l1526
 17307                           
 17308                           ; BSR set to: 0
 17309                           ;ff.c: 4136: dir = fp->dir_ptr;
 17310  003A66  EE20 F020          	lfsr	2,32
 17311  003A6A  519B               	movf	f_sync@fp& (0+255),w,b
 17312  003A6C  26D9               	addwf	fsr2l,f,c
 17313  003A6E  519C               	movf	(f_sync@fp+1)& (0+255),w,b
 17314  003A70  22DA               	addwfc	fsr2h,f,c
 17315  003A72  CFDE F0A4          	movff	postinc2,f_sync@dir
 17316  003A76  CFDD F0A5          	movff	postdec2,f_sync@dir+1
 17317                           
 17318                           ;ff.c: 4137: dir[11] |= 0x20;
 17319  003A7A  EE20 F00B          	lfsr	2,11
 17320  003A7E  51A4               	movf	f_sync@dir& (0+255),w,b
 17321  003A80  26D9               	addwf	fsr2l,f,c
 17322  003A82  51A5               	movf	(f_sync@dir+1)& (0+255),w,b
 17323  003A84  22DA               	addwfc	fsr2h,f,c
 17324  003A86  0E00               	movlw	0
 17325  003A88  8ADB               	bsf	plusw2,5,c
 17326                           
 17327                           ; BSR set to: 0
 17328                           ;ff.c: 4138: st_clust(fp->obj.fs, dir, fp->obj.sclust);
 17329  003A8A  C09B  FFD9         	movff	f_sync@fp,fsr2l
 17330  003A8E  C09C  FFDA         	movff	f_sync@fp+1,fsr2h
 17331  003A92  CFDE F01E          	movff	postinc2,st_clust@fs
 17332  003A96  CFDD F01F          	movff	postdec2,st_clust@fs+1
 17333  003A9A  C0A4  F020         	movff	f_sync@dir,st_clust@dir
 17334  003A9E  C0A5  F021         	movff	f_sync@dir+1,st_clust@dir+1
 17335  003AA2  EE20 F006          	lfsr	2,6
 17336  003AA6  519B               	movf	f_sync@fp& (0+255),w,b
 17337  003AA8  26D9               	addwf	fsr2l,f,c
 17338  003AAA  519C               	movf	(f_sync@fp+1)& (0+255),w,b
 17339  003AAC  22DA               	addwfc	fsr2h,f,c
 17340  003AAE  CFDE F022          	movff	postinc2,st_clust@cl
 17341  003AB2  CFDE F023          	movff	postinc2,st_clust@cl+1
 17342  003AB6  CFDE F024          	movff	postinc2,st_clust@cl+2
 17343  003ABA  CFDE F025          	movff	postinc2,st_clust@cl+3
 17344  003ABE  ECAE  F02B         	call	_st_clust	;wreg free
 17345                           
 17346                           ;ff.c: 4139: st_dword(dir + 28, (DWORD)fp->obj.objsize);
 17347  003AC2  0E1C               	movlw	28
 17348  003AC4  0100               	movlb	0	; () banked
 17349  003AC6  25A4               	addwf	f_sync@dir& (0+255),w,b
 17350  003AC8  6E1A               	movwf	st_dword@ptr,c
 17351  003ACA  0E00               	movlw	0
 17352  003ACC  21A5               	addwfc	(f_sync@dir+1)& (0+255),w,b
 17353  003ACE  6E1B               	movwf	st_dword@ptr+1,c
 17354  003AD0  EE20 F00A          	lfsr	2,10
 17355  003AD4  519B               	movf	f_sync@fp& (0+255),w,b
 17356  003AD6  26D9               	addwf	fsr2l,f,c
 17357  003AD8  519C               	movf	(f_sync@fp+1)& (0+255),w,b
 17358  003ADA  22DA               	addwfc	fsr2h,f,c
 17359  003ADC  CFDE F01C          	movff	postinc2,st_dword@val
 17360  003AE0  CFDE F01D          	movff	postinc2,st_dword@val+1
 17361  003AE4  CFDE F01E          	movff	postinc2,st_dword@val+2
 17362  003AE8  CFDE F01F          	movff	postinc2,st_dword@val+3
 17363  003AEC  EC9C  F029         	call	_st_dword	;wreg free
 17364                           
 17365                           ;ff.c: 4140: st_dword(dir + 22, tm);
 17366  003AF0  0E16               	movlw	22
 17367  003AF2  0100               	movlb	0	; () banked
 17368  003AF4  25A4               	addwf	f_sync@dir& (0+255),w,b
 17369  003AF6  6E1A               	movwf	st_dword@ptr,c
 17370  003AF8  0E00               	movlw	0
 17371  003AFA  21A5               	addwfc	(f_sync@dir+1)& (0+255),w,b
 17372  003AFC  6E1B               	movwf	st_dword@ptr+1,c
 17373  003AFE  C09D  F01C         	movff	f_sync@tm,st_dword@val
 17374  003B02  C09E  F01D         	movff	f_sync@tm+1,st_dword@val+1
 17375  003B06  C09F  F01E         	movff	f_sync@tm+2,st_dword@val+2
 17376  003B0A  C0A0  F01F         	movff	f_sync@tm+3,st_dword@val+3
 17377  003B0E  EC9C  F029         	call	_st_dword	;wreg free
 17378                           
 17379                           ;ff.c: 4141: st_word(dir + 18, 0);
 17380  003B12  0E12               	movlw	18
 17381  003B14  0100               	movlb	0	; () banked
 17382  003B16  25A4               	addwf	f_sync@dir& (0+255),w,b
 17383  003B18  6E1A               	movwf	st_word@ptr,c
 17384  003B1A  0E00               	movlw	0
 17385  003B1C  21A5               	addwfc	(f_sync@dir+1)& (0+255),w,b
 17386  003B1E  6E1B               	movwf	st_word@ptr+1,c
 17387  003B20  0E00               	movlw	0
 17388  003B22  6E1D               	movwf	st_word@val+1,c
 17389  003B24  0E00               	movlw	0
 17390  003B26  6E1C               	movwf	st_word@val,c
 17391  003B28  EC13  F02D         	call	_st_word	;wreg free
 17392                           
 17393                           ;ff.c: 4142: fs->wflag = 1;
 17394  003B2C  0100               	movlb	0	; () banked
 17395  003B2E  EE20 F003          	lfsr	2,3
 17396  003B32  51A2               	movf	f_sync@fs& (0+255),w,b
 17397  003B34  26D9               	addwf	fsr2l,f,c
 17398  003B36  51A3               	movf	(f_sync@fs+1)& (0+255),w,b
 17399  003B38  22DA               	addwfc	fsr2h,f,c
 17400  003B3A  0E01               	movlw	1
 17401  003B3C  6EDF               	movwf	indf2,c
 17402                           
 17403                           ; BSR set to: 0
 17404                           ;ff.c: 4143: res = sync_fs(fs);
 17405  003B3E  C0A2  F086         	movff	f_sync@fs,sync_fs@fs
 17406  003B42  C0A3  F087         	movff	f_sync@fs+1,sync_fs@fs+1
 17407  003B46  EC91  F019         	call	_sync_fs	;wreg free
 17408  003B4A  0100               	movlb	0	; () banked
 17409  003B4C  6FA1               	movwf	f_sync@res& (0+255),b
 17410                           
 17411                           ; BSR set to: 0
 17412                           ;ff.c: 4144: fp->flag &= (BYTE)~0x40;
 17413  003B4E  EE20 F00E          	lfsr	2,14
 17414  003B52  519B               	movf	f_sync@fp& (0+255),w,b
 17415  003B54  26D9               	addwf	fsr2l,f,c
 17416  003B56  519C               	movf	(f_sync@fp+1)& (0+255),w,b
 17417  003B58  22DA               	addwfc	fsr2h,f,c
 17418  003B5A  0EBF               	movlw	191
 17419  003B5C  16DF               	andwf	indf2,f,c
 17420  003B5E                     l1526:
 17421                           
 17422                           ; BSR set to: 0
 17423                           ;ff.c: 4145: }
 17424                           ;ff.c: 4146: }
 17425                           ;ff.c: 4147: }
 17426                           ;ff.c: 4148: }
 17427                           ;ff.c: 4150: return res;
 17428                           
 17429                           ; BSR set to: 0
 17430                           
 17431                           ; BSR set to: 0
 17432                           
 17433                           ; BSR set to: 0
 17434  003B5E  51A1               	movf	f_sync@res& (0+255),w,b
 17435  003B60  0012               	return	
 17436  003B62                     __end_of_f_sync:
 17437                           	opt stack 0
 17438                           tosu	equ	0xFFF
 17439                           tosh	equ	0xFFE
 17440                           tosl	equ	0xFFD
 17441                           pclath	equ	0xFFA
 17442                           tblptru	equ	0xFF8
 17443                           tblptrh	equ	0xFF7
 17444                           tblptrl	equ	0xFF6
 17445                           tablat	equ	0xFF5
 17446                           prodh	equ	0xFF4
 17447                           prodl	equ	0xFF3
 17448                           intcon	equ	0xFF2
 17449                           intcon2	equ	0xFF1
 17450                           intcon3	equ	0xFF0
 17451                           indf0	equ	0xFEF
 17452                           postinc0	equ	0xFEE
 17453                           fsr0h	equ	0xFEA
 17454                           fsr0l	equ	0xFE9
 17455                           wreg	equ	0xFE8
 17456                           indf1	equ	0xFE7
 17457                           postinc1	equ	0xFE6
 17458                           postdec1	equ	0xFE5
 17459                           fsr1h	equ	0xFE2
 17460                           fsr1l	equ	0xFE1
 17461                           indf2	equ	0xFDF
 17462                           postinc2	equ	0xFDE
 17463                           postdec2	equ	0xFDD
 17464                           plusw2	equ	0xFDB
 17465                           fsr2h	equ	0xFDA
 17466                           fsr2l	equ	0xFD9
 17467                           status	equ	0xFD8
 17468                           
 17469 ;; *************** function _validate *****************
 17470 ;; Defined at:
 17471 ;;		line 3561 in file "bibliotecas/ff.c"
 17472 ;; Parameters:    Size  Location     Type
 17473 ;;  obj             2   32[COMRAM] PTR struct .
 17474 ;;		 -> SDCard@fil(34), 
 17475 ;;  rfs             2   34[COMRAM] PTR PTR struct .
 17476 ;;		 -> f_truncate@fs(2), f_readdir@fs(2), f_closedir@fs(2), f_lseek@fs(2), 
 17477 ;;		 -> f_close@fs(2), f_sync@fs(2), f_write@fs(2), f_read@fs(2), 
 17478 ;; Auto vars:     Size  Location     Type
 17479 ;;  res             1   42[COMRAM] enum E154
 17480 ;; Return value:  Size  Location     Type
 17481 ;;                  1    wreg      enum E154
 17482 ;; Registers used:
 17483 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 17484 ;; Tracked objects:
 17485 ;;		On entry : 0/0
 17486 ;;		On exit  : 0/0
 17487 ;;		Unchanged: 0/0
 17488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17489 ;;      Params:         4       0       0       0       0       0       0       0       0
 17490 ;;      Locals:         3       0       0       0       0       0       0       0       0
 17491 ;;      Temps:          4       0       0       0       0       0       0       0       0
 17492 ;;      Totals:        11       0       0       0       0       0       0       0       0
 17493 ;;Total ram usage:       11 bytes
 17494 ;; Hardware stack levels used:    1
 17495 ;; Hardware stack levels required when called:    4
 17496 ;; This function calls:
 17497 ;;		_disk_status
 17498 ;; This function is called by:
 17499 ;;		_f_write
 17500 ;;		_f_sync
 17501 ;;		_f_close
 17502 ;;		_f_read
 17503 ;;		_f_lseek
 17504 ;;		_f_closedir
 17505 ;;		_f_readdir
 17506 ;;		_f_truncate
 17507 ;; This function uses a non-reentrant model
 17508 ;;
 17509                           
 17510                           	psect	text50
 17511  00492E                     __ptext50:
 17512                           	opt stack 0
 17513  00492E                     _validate:
 17514                           	opt stack 23
 17515                           
 17516                           ;ff.c: 3566: FRESULT res = FR_INVALID_OBJECT;
 17517                           
 17518                           ; BSR set to: 0
 17519                           ;incstack = 0
 17520  00492E  0E09               	movlw	9
 17521  004930  6E2B               	movwf	validate@res,c
 17522                           
 17523                           ;ff.c: 3569: if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {
 17524  004932  5021               	movf	validate@obj,w,c
 17525  004934  1022               	iorwf	validate@obj+1,w,c
 17526  004936  B4D8               	btfsc	status,2,c
 17527  004938  D040               	goto	l1405
 17528  00493A  C021  FFD9         	movff	validate@obj,fsr2l
 17529  00493E  C022  FFDA         	movff	validate@obj+1,fsr2h
 17530  004942  50DE               	movf	postinc2,w,c
 17531  004944  10DE               	iorwf	postinc2,w,c
 17532  004946  B4D8               	btfsc	status,2,c
 17533  004948  D038               	goto	l1405
 17534  00494A  C021  FFD9         	movff	validate@obj,fsr2l
 17535  00494E  C022  FFDA         	movff	validate@obj+1,fsr2h
 17536  004952  CFDE F025          	movff	postinc2,??_validate
 17537  004956  CFDD F026          	movff	postdec2,??_validate+1
 17538  00495A  C025  FFD9         	movff	??_validate,fsr2l
 17539  00495E  C026  FFDA         	movff	??_validate+1,fsr2h
 17540  004962  50DF               	movf	indf2,w,c
 17541  004964  B4D8               	btfsc	status,2,c
 17542  004966  D029               	goto	l1405
 17543  004968  C021  FFD9         	movff	validate@obj,fsr2l
 17544  00496C  C022  FFDA         	movff	validate@obj+1,fsr2h
 17545  004970  EE10 F005          	lfsr	1,5
 17546  004974  50DE               	movf	postinc2,w,c
 17547  004976  26E1               	addwf	fsr1l,f,c
 17548  004978  50DD               	movf	postdec2,w,c
 17549  00497A  22E2               	addwfc	fsr1h,f,c
 17550  00497C  EE20 F002          	lfsr	2,2
 17551  004980  5021               	movf	validate@obj,w,c
 17552  004982  26D9               	addwf	fsr2l,f,c
 17553  004984  5022               	movf	validate@obj+1,w,c
 17554  004986  22DA               	addwfc	fsr2h,f,c
 17555  004988  50E6               	movf	postinc1,w,c
 17556  00498A  18DE               	xorwf	postinc2,w,c
 17557  00498C  E116               	bnz	l1404
 17558  00498E  50E6               	movf	postinc1,w,c
 17559  004990  18DE               	xorwf	postinc2,w,c
 17560  004992  A4D8               	btfss	status,2,c
 17561  004994  D012               	goto	l1405
 17562                           
 17563                           ;ff.c: 3581: if (!(disk_status(obj->fs->pdrv) & 0x01)) {
 17564  004996  C021  FFD9         	movff	validate@obj,fsr2l
 17565  00499A  C022  FFDA         	movff	validate@obj+1,fsr2h
 17566  00499E  EE10 F001          	lfsr	1,1
 17567  0049A2  50DE               	movf	postinc2,w,c
 17568  0049A4  26E1               	addwf	fsr1l,f,c
 17569  0049A6  50DD               	movf	postdec2,w,c
 17570  0049A8  22E2               	addwfc	fsr1h,f,c
 17571  0049AA  50E7               	movf	indf1,w,c
 17572  0049AC  ECF0  F02B         	call	_disk_status
 17573  0049B0  6E25               	movwf	??_validate& (0+255),c
 17574  0049B2  B025               	btfsc	??_validate,0,c
 17575  0049B4  D002               	goto	l1405
 17576                           
 17577                           ;ff.c: 3582: res = FR_OK;
 17578  0049B6  0E00               	movlw	0
 17579  0049B8  6E2B               	movwf	validate@res,c
 17580  0049BA                     l1405:
 17581  0049BA                     l1404:
 17582                           
 17583                           ;ff.c: 3583: }
 17584                           ;ff.c: 3585: }
 17585                           ;ff.c: 3586: *rfs = (res == FR_OK) ? obj->fs : 0;
 17586  0049BA  502B               	movf	validate@res,w,c
 17587  0049BC  B4D8               	btfsc	status,2,c
 17588  0049BE  D005               	goto	l1407
 17589  0049C0  0E00               	movlw	0
 17590  0049C2  6E29               	movwf	_validate$3084,c
 17591  0049C4  0E00               	movlw	0
 17592  0049C6  6E2A               	movwf	_validate$3084+1,c
 17593  0049C8  D008               	goto	l1409
 17594  0049CA                     l1407:
 17595  0049CA  C021  FFD9         	movff	validate@obj,fsr2l
 17596  0049CE  C022  FFDA         	movff	validate@obj+1,fsr2h
 17597  0049D2  CFDE F029          	movff	postinc2,_validate$3084
 17598  0049D6  CFDD F02A          	movff	postdec2,_validate$3084+1
 17599  0049DA                     l1409:
 17600  0049DA  C023  FFD9         	movff	validate@rfs,fsr2l
 17601  0049DE  C024  FFDA         	movff	validate@rfs+1,fsr2h
 17602  0049E2  C029  FFDE         	movff	_validate$3084,postinc2
 17603  0049E6  C02A  FFDD         	movff	_validate$3084+1,postdec2
 17604                           
 17605                           ;ff.c: 3587: return res;
 17606  0049EA  502B               	movf	validate@res,w,c
 17607  0049EC  0012               	return	
 17608  0049EE                     __end_of_validate:
 17609                           	opt stack 0
 17610                           tosu	equ	0xFFF
 17611                           tosh	equ	0xFFE
 17612                           tosl	equ	0xFFD
 17613                           pclath	equ	0xFFA
 17614                           tblptru	equ	0xFF8
 17615                           tblptrh	equ	0xFF7
 17616                           tblptrl	equ	0xFF6
 17617                           tablat	equ	0xFF5
 17618                           prodh	equ	0xFF4
 17619                           prodl	equ	0xFF3
 17620                           intcon	equ	0xFF2
 17621                           intcon2	equ	0xFF1
 17622                           intcon3	equ	0xFF0
 17623                           indf0	equ	0xFEF
 17624                           postinc0	equ	0xFEE
 17625                           fsr0h	equ	0xFEA
 17626                           fsr0l	equ	0xFE9
 17627                           wreg	equ	0xFE8
 17628                           indf1	equ	0xFE7
 17629                           postinc1	equ	0xFE6
 17630                           postdec1	equ	0xFE5
 17631                           fsr1h	equ	0xFE2
 17632                           fsr1l	equ	0xFE1
 17633                           indf2	equ	0xFDF
 17634                           postinc2	equ	0xFDE
 17635                           postdec2	equ	0xFDD
 17636                           plusw2	equ	0xFDB
 17637                           fsr2h	equ	0xFDA
 17638                           fsr2l	equ	0xFD9
 17639                           status	equ	0xFD8
 17640                           
 17641 ;; *************** function _disk_status *****************
 17642 ;; Defined at:
 17643 ;;		line 72 in file "bibliotecas/diskio.c"
 17644 ;; Parameters:    Size  Location     Type
 17645 ;;  pdrv            1    wreg     unsigned char 
 17646 ;; Auto vars:     Size  Location     Type
 17647 ;;  pdrv            1   30[COMRAM] unsigned char 
 17648 ;;  result          2   28[COMRAM] int 
 17649 ;;  stat            1   31[COMRAM] unsigned char 
 17650 ;; Return value:  Size  Location     Type
 17651 ;;                  1    wreg      unsigned char 
 17652 ;; Registers used:
 17653 ;;		wreg, status,2, status,0, cstack
 17654 ;; Tracked objects:
 17655 ;;		On entry : 0/0
 17656 ;;		On exit  : 0/0
 17657 ;;		Unchanged: 0/0
 17658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17659 ;;      Params:         0       0       0       0       0       0       0       0       0
 17660 ;;      Locals:         4       0       0       0       0       0       0       0       0
 17661 ;;      Temps:          1       0       0       0       0       0       0       0       0
 17662 ;;      Totals:         5       0       0       0       0       0       0       0       0
 17663 ;;Total ram usage:        5 bytes
 17664 ;; Hardware stack levels used:    1
 17665 ;; Hardware stack levels required when called:    3
 17666 ;; This function calls:
 17667 ;;		_sdc_disk_status
 17668 ;; This function is called by:
 17669 ;;		_mount_volume
 17670 ;;		_validate
 17671 ;; This function uses a non-reentrant model
 17672 ;;
 17673                           
 17674                           	psect	text51
 17675  0057E0                     __ptext51:
 17676                           	opt stack 0
 17677  0057E0                     _disk_status:
 17678                           	opt stack 23
 17679                           
 17680                           ;incstack = 0
 17681                           ;disk_status@pdrv stored from wreg
 17682  0057E0  6E1F               	movwf	disk_status@pdrv,c
 17683                           
 17684                           ;diskio.c: 76: DSTATUS stat;
 17685                           ;diskio.c: 77: int result;
 17686                           ;diskio.c: 79: switch (pdrv) {
 17687  0057E2  D011               	goto	l841
 17688  0057E4                     
 17689                           ;diskio.c: 81: stat = sdc_disk_status(pdrv);
 17690  0057E4  501F               	movf	disk_status@pdrv,w,c
 17691  0057E6  EC6C  F02D         	call	_sdc_disk_status
 17692  0057EA  6E20               	movwf	disk_status@stat,c
 17693                           
 17694                           ;diskio.c: 85: return stat;
 17695  0057EC  5020               	movf	disk_status@stat,w,c
 17696  0057EE  0012               	return	
 17697  0057F0                     
 17698                           ;diskio.c: 88: result = sdc_disk_status(pdrv);
 17699  0057F0  501F               	movf	disk_status@pdrv,w,c
 17700  0057F2  EC6C  F02D         	call	_sdc_disk_status
 17701  0057F6  6E1C               	movwf	??_disk_status& (0+255),c
 17702  0057F8  501C               	movf	??_disk_status,w,c
 17703  0057FA  6E1D               	movwf	disk_status@result,c
 17704  0057FC  6A1E               	clrf	disk_status@result+1,c
 17705                           
 17706                           ;diskio.c: 92: return stat;
 17707  0057FE  5020               	movf	disk_status@stat,w,c
 17708  005800  0012               	return	
 17709  005802                     
 17710                           ;diskio.c: 99: return stat;
 17711  005802  5020               	movf	disk_status@stat,w,c
 17712  005804  0012               	return	
 17713  005806                     l841:
 17714  005806  501F               	movf	disk_status@pdrv,w,c
 17715                           
 17716                           ; Switch size 1, requested type "space"
 17717                           ; Number of cases is 3, Range of values is 0 to 2
 17718                           ; switch strategies available:
 17719                           ; Name         Instructions Cycles
 17720                           ; simple_byte           10     6 (average)
 17721                           ;	Chosen strategy is simple_byte
 17722  005808  0A00               	xorlw	0	; case 0
 17723  00580A  B4D8               	btfsc	status,2,c
 17724  00580C  D7EB               	goto	l842
 17725  00580E  0A01               	xorlw	1	; case 1
 17726  005810  B4D8               	btfsc	status,2,c
 17727  005812  D7EE               	goto	l844
 17728  005814  0A03               	xorlw	3	; case 2
 17729  005816  B4D8               	btfsc	status,2,c
 17730  005818  D7F4               	goto	l845
 17731                           
 17732                           ;diskio.c: 101: return 0x01;
 17733  00581A  0E01               	movlw	1
 17734  00581C  0012               	return	
 17735  00581E                     __end_of_disk_status:
 17736                           	opt stack 0
 17737                           tosu	equ	0xFFF
 17738                           tosh	equ	0xFFE
 17739                           tosl	equ	0xFFD
 17740                           pclath	equ	0xFFA
 17741                           tblptru	equ	0xFF8
 17742                           tblptrh	equ	0xFF7
 17743                           tblptrl	equ	0xFF6
 17744                           tablat	equ	0xFF5
 17745                           prodh	equ	0xFF4
 17746                           prodl	equ	0xFF3
 17747                           intcon	equ	0xFF2
 17748                           intcon2	equ	0xFF1
 17749                           intcon3	equ	0xFF0
 17750                           indf0	equ	0xFEF
 17751                           postinc0	equ	0xFEE
 17752                           fsr0h	equ	0xFEA
 17753                           fsr0l	equ	0xFE9
 17754                           wreg	equ	0xFE8
 17755                           indf1	equ	0xFE7
 17756                           postinc1	equ	0xFE6
 17757                           postdec1	equ	0xFE5
 17758                           fsr1h	equ	0xFE2
 17759                           fsr1l	equ	0xFE1
 17760                           indf2	equ	0xFDF
 17761                           postinc2	equ	0xFDE
 17762                           postdec2	equ	0xFDD
 17763                           plusw2	equ	0xFDB
 17764                           fsr2h	equ	0xFDA
 17765                           fsr2l	equ	0xFD9
 17766                           status	equ	0xFD8
 17767                           
 17768 ;; *************** function _sdc_disk_status *****************
 17769 ;; Defined at:
 17770 ;;		line 680 in file "bibliotecas/diskio.c"
 17771 ;; Parameters:    Size  Location     Type
 17772 ;;  pdrv            1    wreg     unsigned char 
 17773 ;; Auto vars:     Size  Location     Type
 17774 ;;  pdrv            1   26[COMRAM] unsigned char 
 17775 ;;  stat            1   25[COMRAM] unsigned char 
 17776 ;;  cont            1    0        unsigned char 
 17777 ;;  buff            1    0        unsigned char 
 17778 ;; Return value:  Size  Location     Type
 17779 ;;                  1    wreg      unsigned char 
 17780 ;; Registers used:
 17781 ;;		wreg, status,2
 17782 ;; Tracked objects:
 17783 ;;		On entry : 0/0
 17784 ;;		On exit  : 0/0
 17785 ;;		Unchanged: 0/0
 17786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17787 ;;      Params:         0       0       0       0       0       0       0       0       0
 17788 ;;      Locals:         2       0       0       0       0       0       0       0       0
 17789 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17790 ;;      Totals:         2       0       0       0       0       0       0       0       0
 17791 ;;Total ram usage:        2 bytes
 17792 ;; Hardware stack levels used:    1
 17793 ;; Hardware stack levels required when called:    2
 17794 ;; This function calls:
 17795 ;;		Nothing
 17796 ;; This function is called by:
 17797 ;;		_disk_status
 17798 ;; This function uses a non-reentrant model
 17799 ;;
 17800                           
 17801                           	psect	text52
 17802  005AD8                     __ptext52:
 17803                           	opt stack 0
 17804  005AD8                     _sdc_disk_status:
 17805                           	opt stack 23
 17806                           
 17807                           ;incstack = 0
 17808                           ;sdc_disk_status@pdrv stored from wreg
 17809  005AD8  6E1B               	movwf	sdc_disk_status@pdrv,c
 17810                           
 17811                           ;diskio.c: 682: DSTATUS stat = 0;
 17812  005ADA  0E00               	movlw	0
 17813  005ADC  6E1A               	movwf	sdc_disk_status@stat,c
 17814                           
 17815                           ;diskio.c: 683: unsigned char buff, cont;
 17816                           ;diskio.c: 685: if (pdrv != 0) return 0x01;
 17817  005ADE  501B               	movf	sdc_disk_status@pdrv,w,c
 17818  005AE0  B4D8               	btfsc	status,2,c
 17819  005AE2  D002               	goto	l960
 17820  005AE4  0E01               	movlw	1
 17821  005AE6  0012               	return	
 17822  005AE8                     l960:
 17823                           
 17824                           ;diskio.c: 687: return FR_OK;
 17825  005AE8  0E00               	movlw	0
 17826  005AEA  0012               	return	
 17827  005AEC                     __end_of_sdc_disk_status:
 17828                           	opt stack 0
 17829                           tosu	equ	0xFFF
 17830                           tosh	equ	0xFFE
 17831                           tosl	equ	0xFFD
 17832                           pclath	equ	0xFFA
 17833                           tblptru	equ	0xFF8
 17834                           tblptrh	equ	0xFF7
 17835                           tblptrl	equ	0xFF6
 17836                           tablat	equ	0xFF5
 17837                           prodh	equ	0xFF4
 17838                           prodl	equ	0xFF3
 17839                           intcon	equ	0xFF2
 17840                           intcon2	equ	0xFF1
 17841                           intcon3	equ	0xFF0
 17842                           indf0	equ	0xFEF
 17843                           postinc0	equ	0xFEE
 17844                           fsr0h	equ	0xFEA
 17845                           fsr0l	equ	0xFE9
 17846                           wreg	equ	0xFE8
 17847                           indf1	equ	0xFE7
 17848                           postinc1	equ	0xFE6
 17849                           postdec1	equ	0xFE5
 17850                           fsr1h	equ	0xFE2
 17851                           fsr1l	equ	0xFE1
 17852                           indf2	equ	0xFDF
 17853                           postinc2	equ	0xFDE
 17854                           postdec2	equ	0xFDD
 17855                           plusw2	equ	0xFDB
 17856                           fsr2h	equ	0xFDA
 17857                           fsr2l	equ	0xFD9
 17858                           status	equ	0xFD8
 17859                           
 17860 ;; *************** function _sync_fs *****************
 17861 ;; Defined at:
 17862 ;;		line 1078 in file "bibliotecas/ff.c"
 17863 ;; Parameters:    Size  Location     Type
 17864 ;;  fs              2   38[BANK0 ] PTR struct .
 17865 ;;		 -> NULL(0), fs(559), 
 17866 ;; Auto vars:     Size  Location     Type
 17867 ;;  res             1   48[BANK0 ] enum E154
 17868 ;; Return value:  Size  Location     Type
 17869 ;;                  1    wreg      enum E154
 17870 ;; Registers used:
 17871 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17872 ;; Tracked objects:
 17873 ;;		On entry : 0/0
 17874 ;;		On exit  : 0/0
 17875 ;;		Unchanged: 0/0
 17876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17877 ;;      Params:         0       2       0       0       0       0       0       0       0
 17878 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17879 ;;      Temps:          0       8       0       0       0       0       0       0       0
 17880 ;;      Totals:         0      11       0       0       0       0       0       0       0
 17881 ;;Total ram usage:       11 bytes
 17882 ;; Hardware stack levels used:    1
 17883 ;; Hardware stack levels required when called:    7
 17884 ;; This function calls:
 17885 ;;		_disk_ioctl
 17886 ;;		_disk_write
 17887 ;;		_memset
 17888 ;;		_st_dword
 17889 ;;		_st_word
 17890 ;;		_sync_window
 17891 ;; This function is called by:
 17892 ;;		_f_sync
 17893 ;;		_f_unlink
 17894 ;;		_f_mkdir
 17895 ;;		_f_rename
 17896 ;; This function uses a non-reentrant model
 17897 ;;
 17898                           
 17899                           	psect	text53
 17900  003322                     __ptext53:
 17901                           	opt stack 0
 17902  003322                     _sync_fs:
 17903                           	opt stack 19
 17904                           
 17905                           ;ff.c: 1082: FRESULT res;
 17906                           ;ff.c: 1085: res = sync_window(fs);
 17907                           
 17908                           ;incstack = 0
 17909  003322  C086  F073         	movff	sync_fs@fs,sync_window@fs
 17910  003326  C087  F074         	movff	sync_fs@fs+1,sync_window@fs+1
 17911  00332A  EC36  F01C         	call	_sync_window	;wreg free
 17912  00332E  0100               	movlb	0	; () banked
 17913  003330  6F90               	movwf	sync_fs@res& (0+255),b
 17914                           
 17915                           ; BSR set to: 0
 17916                           ;ff.c: 1086: if (res == FR_OK) {
 17917  003332  5190               	movf	sync_fs@res& (0+255),w,b
 17918  003334  A4D8               	btfss	status,2,c
 17919  003336  D0E4               	goto	l1033
 17920                           
 17921                           ; BSR set to: 0
 17922                           ;ff.c: 1087: if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 17923  003338  C086  FFD9         	movff	sync_fs@fs,fsr2l
 17924  00333C  C087  FFDA         	movff	sync_fs@fs+1,fsr2h
 17925  003340  0E03               	movlw	3
 17926  003342  18DE               	xorwf	postinc2,w,c
 17927  003344  A4D8               	btfss	status,2,c
 17928  003346  D0C7               	goto	l1032
 17929                           
 17930                           ; BSR set to: 0
 17931  003348  EE20 F004          	lfsr	2,4
 17932  00334C  5186               	movf	sync_fs@fs& (0+255),w,b
 17933  00334E  26D9               	addwf	fsr2l,f,c
 17934  003350  5187               	movf	(sync_fs@fs+1)& (0+255),w,b
 17935  003352  22DA               	addwfc	fsr2h,f,c
 17936  003354  04DE               	decf	postinc2,w,c
 17937  003356  A4D8               	btfss	status,2,c
 17938  003358  D0BE               	goto	l1032
 17939                           
 17940                           ; BSR set to: 0
 17941                           ;ff.c: 1089: memset(fs->win, 0, sizeof fs->win);
 17942  00335A  0E2F               	movlw	47
 17943  00335C  2586               	addwf	sync_fs@fs& (0+255),w,b
 17944  00335E  6E1A               	movwf	memset@p1,c
 17945  003360  0E00               	movlw	0
 17946  003362  2187               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 17947  003364  6E1B               	movwf	memset@p1+1,c
 17948  003366  0E00               	movlw	0
 17949  003368  6E1D               	movwf	memset@c+1,c
 17950  00336A  0E00               	movlw	0
 17951  00336C  6E1C               	movwf	memset@c,c
 17952  00336E  0E02               	movlw	2
 17953  003370  6E1F               	movwf	memset@n+1,c
 17954  003372  0E00               	movlw	0
 17955  003374  6E1E               	movwf	memset@n,c
 17956  003376  ECD5  F02C         	call	_memset	;wreg free
 17957                           
 17958                           ;ff.c: 1090: st_word(fs->win + 510, 0xAA55);
 17959  00337A  0E2D               	movlw	45
 17960  00337C  0100               	movlb	0	; () banked
 17961  00337E  2586               	addwf	sync_fs@fs& (0+255),w,b
 17962  003380  6E1A               	movwf	st_word@ptr,c
 17963  003382  0E02               	movlw	2
 17964  003384  2187               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 17965  003386  6E1B               	movwf	st_word@ptr+1,c
 17966  003388  0EAA               	movlw	170
 17967  00338A  6E1D               	movwf	st_word@val+1,c
 17968  00338C  0E55               	movlw	85
 17969  00338E  6E1C               	movwf	st_word@val,c
 17970  003390  EC13  F02D         	call	_st_word	;wreg free
 17971                           
 17972                           ;ff.c: 1091: st_dword(fs->win + 0, 0x41615252);
 17973  003394  0E2F               	movlw	47
 17974  003396  0100               	movlb	0	; () banked
 17975  003398  2586               	addwf	sync_fs@fs& (0+255),w,b
 17976  00339A  6E1A               	movwf	st_dword@ptr,c
 17977  00339C  0E00               	movlw	0
 17978  00339E  2187               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 17979  0033A0  6E1B               	movwf	st_dword@ptr+1,c
 17980  0033A2  0E52               	movlw	82
 17981  0033A4  6E1C               	movwf	st_dword@val,c
 17982  0033A6  0E52               	movlw	82
 17983  0033A8  6E1D               	movwf	st_dword@val+1,c
 17984  0033AA  0E61               	movlw	97
 17985  0033AC  6E1E               	movwf	st_dword@val+2,c
 17986  0033AE  0E41               	movlw	65
 17987  0033B0  6E1F               	movwf	st_dword@val+3,c
 17988  0033B2  EC9C  F029         	call	_st_dword	;wreg free
 17989                           
 17990                           ;ff.c: 1092: st_dword(fs->win + 484, 0x61417272);
 17991  0033B6  0E13               	movlw	19
 17992  0033B8  0100               	movlb	0	; () banked
 17993  0033BA  2586               	addwf	sync_fs@fs& (0+255),w,b
 17994  0033BC  6E1A               	movwf	st_dword@ptr,c
 17995  0033BE  0E02               	movlw	2
 17996  0033C0  2187               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 17997  0033C2  6E1B               	movwf	st_dword@ptr+1,c
 17998  0033C4  0E72               	movlw	114
 17999  0033C6  6E1C               	movwf	st_dword@val,c
 18000  0033C8  0E72               	movlw	114
 18001  0033CA  6E1D               	movwf	st_dword@val+1,c
 18002  0033CC  0E41               	movlw	65
 18003  0033CE  6E1E               	movwf	st_dword@val+2,c
 18004  0033D0  0E61               	movlw	97
 18005  0033D2  6E1F               	movwf	st_dword@val+3,c
 18006  0033D4  EC9C  F029         	call	_st_dword	;wreg free
 18007                           
 18008                           ;ff.c: 1093: st_dword(fs->win + 488, fs->free_clst);
 18009  0033D8  0E17               	movlw	23
 18010  0033DA  0100               	movlb	0	; () banked
 18011  0033DC  2586               	addwf	sync_fs@fs& (0+255),w,b
 18012  0033DE  6E1A               	movwf	st_dword@ptr,c
 18013  0033E0  0E02               	movlw	2
 18014  0033E2  2187               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 18015  0033E4  6E1B               	movwf	st_dword@ptr+1,c
 18016  0033E6  EE20 F00F          	lfsr	2,15
 18017  0033EA  5186               	movf	sync_fs@fs& (0+255),w,b
 18018  0033EC  26D9               	addwf	fsr2l,f,c
 18019  0033EE  5187               	movf	(sync_fs@fs+1)& (0+255),w,b
 18020  0033F0  22DA               	addwfc	fsr2h,f,c
 18021  0033F2  CFDE F01C          	movff	postinc2,st_dword@val
 18022  0033F6  CFDE F01D          	movff	postinc2,st_dword@val+1
 18023  0033FA  CFDE F01E          	movff	postinc2,st_dword@val+2
 18024  0033FE  CFDE F01F          	movff	postinc2,st_dword@val+3
 18025  003402  EC9C  F029         	call	_st_dword	;wreg free
 18026                           
 18027                           ;ff.c: 1094: st_dword(fs->win + 492, fs->last_clst);
 18028  003406  0E1B               	movlw	27
 18029  003408  0100               	movlb	0	; () banked
 18030  00340A  2586               	addwf	sync_fs@fs& (0+255),w,b
 18031  00340C  6E1A               	movwf	st_dword@ptr,c
 18032  00340E  0E02               	movlw	2
 18033  003410  2187               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 18034  003412  6E1B               	movwf	st_dword@ptr+1,c
 18035  003414  EE20 F00B          	lfsr	2,11
 18036  003418  5186               	movf	sync_fs@fs& (0+255),w,b
 18037  00341A  26D9               	addwf	fsr2l,f,c
 18038  00341C  5187               	movf	(sync_fs@fs+1)& (0+255),w,b
 18039  00341E  22DA               	addwfc	fsr2h,f,c
 18040  003420  CFDE F01C          	movff	postinc2,st_dword@val
 18041  003424  CFDE F01D          	movff	postinc2,st_dword@val+1
 18042  003428  CFDE F01E          	movff	postinc2,st_dword@val+2
 18043  00342C  CFDE F01F          	movff	postinc2,st_dword@val+3
 18044  003430  EC9C  F029         	call	_st_dword	;wreg free
 18045                           
 18046                           ;ff.c: 1095: fs->winsect = fs->volbase + 1;
 18047  003434  0100               	movlb	0	; () banked
 18048  003436  EE20 F01B          	lfsr	2,27
 18049  00343A  5186               	movf	sync_fs@fs& (0+255),w,b
 18050  00343C  26D9               	addwf	fsr2l,f,c
 18051  00343E  5187               	movf	(sync_fs@fs+1)& (0+255),w,b
 18052  003440  22DA               	addwfc	fsr2h,f,c
 18053  003442  CFDE F088          	movff	postinc2,??_sync_fs
 18054  003446  CFDE F089          	movff	postinc2,??_sync_fs+1
 18055  00344A  CFDE F08A          	movff	postinc2,??_sync_fs+2
 18056  00344E  CFDE F08B          	movff	postinc2,??_sync_fs+3
 18057  003452  0E01               	movlw	1
 18058  003454  2588               	addwf	??_sync_fs& (0+255),w,b
 18059  003456  6F8C               	movwf	(??_sync_fs+4)& (0+255),b
 18060  003458  0E00               	movlw	0
 18061  00345A  2189               	addwfc	(??_sync_fs+1)& (0+255),w,b
 18062  00345C  6F8D               	movwf	(??_sync_fs+5)& (0+255),b
 18063  00345E  0E00               	movlw	0
 18064  003460  218A               	addwfc	(??_sync_fs+2)& (0+255),w,b
 18065  003462  6F8E               	movwf	(??_sync_fs+6)& (0+255),b
 18066  003464  0E00               	movlw	0
 18067  003466  218B               	addwfc	(??_sync_fs+3)& (0+255),w,b
 18068  003468  6F8F               	movwf	(??_sync_fs+7)& (0+255),b
 18069  00346A  EE20 F02B          	lfsr	2,43
 18070  00346E  5186               	movf	sync_fs@fs& (0+255),w,b
 18071  003470  26D9               	addwf	fsr2l,f,c
 18072  003472  5187               	movf	(sync_fs@fs+1)& (0+255),w,b
 18073  003474  22DA               	addwfc	fsr2h,f,c
 18074  003476  C08C  FFDE         	movff	??_sync_fs+4,postinc2
 18075  00347A  C08D  FFDE         	movff	??_sync_fs+5,postinc2
 18076  00347E  C08E  FFDE         	movff	??_sync_fs+6,postinc2
 18077  003482  C08F  FFDE         	movff	??_sync_fs+7,postinc2
 18078                           
 18079                           ; BSR set to: 0
 18080                           ;ff.c: 1096: disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 18081  003486  0E2F               	movlw	47
 18082  003488  2586               	addwf	sync_fs@fs& (0+255),w,b
 18083  00348A  6F68               	movwf	disk_write@buff& (0+255),b
 18084  00348C  0E00               	movlw	0
 18085  00348E  2187               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 18086  003490  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 18087  003492  EE20 F02B          	lfsr	2,43
 18088  003496  5186               	movf	sync_fs@fs& (0+255),w,b
 18089  003498  26D9               	addwf	fsr2l,f,c
 18090  00349A  5187               	movf	(sync_fs@fs+1)& (0+255),w,b
 18091  00349C  22DA               	addwfc	fsr2h,f,c
 18092  00349E  CFDE F06A          	movff	postinc2,disk_write@sector
 18093  0034A2  CFDE F06B          	movff	postinc2,disk_write@sector+1
 18094  0034A6  CFDE F06C          	movff	postinc2,disk_write@sector+2
 18095  0034AA  CFDE F06D          	movff	postinc2,disk_write@sector+3
 18096  0034AE  0E01               	movlw	1
 18097  0034B0  6F6E               	movwf	disk_write@count& (0+255),b
 18098  0034B2  EE20 F001          	lfsr	2,1
 18099  0034B6  5186               	movf	sync_fs@fs& (0+255),w,b
 18100  0034B8  26D9               	addwf	fsr2l,f,c
 18101  0034BA  5187               	movf	(sync_fs@fs+1)& (0+255),w,b
 18102  0034BC  22DA               	addwfc	fsr2h,f,c
 18103  0034BE  50DF               	movf	indf2,w,c
 18104  0034C0  EC30  F028         	call	_disk_write
 18105                           
 18106                           ;ff.c: 1097: fs->fsi_flag = 0;
 18107  0034C4  0100               	movlb	0	; () banked
 18108  0034C6  EE20 F004          	lfsr	2,4
 18109  0034CA  5186               	movf	sync_fs@fs& (0+255),w,b
 18110  0034CC  26D9               	addwf	fsr2l,f,c
 18111  0034CE  5187               	movf	(sync_fs@fs+1)& (0+255),w,b
 18112  0034D0  22DA               	addwfc	fsr2h,f,c
 18113  0034D2  0E00               	movlw	0
 18114  0034D4  6EDF               	movwf	indf2,c
 18115  0034D6                     l1032:
 18116                           
 18117                           ; BSR set to: 0
 18118                           ;ff.c: 1098: }
 18119                           ;ff.c: 1100: if (disk_ioctl(fs->pdrv, 0, 0) != RES_OK) res = FR_DISK_ERR;
 18120                           
 18121                           ; BSR set to: 0
 18122  0034D6  0E00               	movlw	0
 18123  0034D8  6E1A               	movwf	disk_ioctl@cmd,c
 18124  0034DA  0E00               	movlw	0
 18125  0034DC  6E1B               	movwf	disk_ioctl@buff,c
 18126  0034DE  0E00               	movlw	0
 18127  0034E0  6E1C               	movwf	disk_ioctl@buff+1,c
 18128  0034E2  EE20 F001          	lfsr	2,1
 18129  0034E6  5186               	movf	sync_fs@fs& (0+255),w,b
 18130  0034E8  26D9               	addwf	fsr2l,f,c
 18131  0034EA  5187               	movf	(sync_fs@fs+1)& (0+255),w,b
 18132  0034EC  22DA               	addwfc	fsr2h,f,c
 18133  0034EE  50DF               	movf	indf2,w,c
 18134  0034F0  ECFF  F02C         	call	_disk_ioctl
 18135  0034F4  0900               	iorlw	0
 18136  0034F6  B4D8               	btfsc	status,2,c
 18137  0034F8  D003               	goto	l1033
 18138  0034FA  0E01               	movlw	1
 18139  0034FC  0100               	movlb	0	; () banked
 18140  0034FE  6F90               	movwf	sync_fs@res& (0+255),b
 18141  003500                     l1033:
 18142                           
 18143                           ;ff.c: 1101: }
 18144                           ;ff.c: 1103: return res;
 18145                           
 18146                           ; BSR set to: 0
 18147  003500  0100               	movlb	0	; () banked
 18148  003502  5190               	movf	sync_fs@res& (0+255),w,b
 18149  003504  0012               	return	
 18150  003506                     __end_of_sync_fs:
 18151                           	opt stack 0
 18152                           tosu	equ	0xFFF
 18153                           tosh	equ	0xFFE
 18154                           tosl	equ	0xFFD
 18155                           pclath	equ	0xFFA
 18156                           tblptru	equ	0xFF8
 18157                           tblptrh	equ	0xFF7
 18158                           tblptrl	equ	0xFF6
 18159                           tablat	equ	0xFF5
 18160                           prodh	equ	0xFF4
 18161                           prodl	equ	0xFF3
 18162                           intcon	equ	0xFF2
 18163                           intcon2	equ	0xFF1
 18164                           intcon3	equ	0xFF0
 18165                           indf0	equ	0xFEF
 18166                           postinc0	equ	0xFEE
 18167                           fsr0h	equ	0xFEA
 18168                           fsr0l	equ	0xFE9
 18169                           wreg	equ	0xFE8
 18170                           indf1	equ	0xFE7
 18171                           postinc1	equ	0xFE6
 18172                           postdec1	equ	0xFE5
 18173                           fsr1h	equ	0xFE2
 18174                           fsr1l	equ	0xFE1
 18175                           indf2	equ	0xFDF
 18176                           postinc2	equ	0xFDE
 18177                           postdec2	equ	0xFDD
 18178                           plusw2	equ	0xFDB
 18179                           fsr2h	equ	0xFDA
 18180                           fsr2l	equ	0xFD9
 18181                           status	equ	0xFD8
 18182                           
 18183 ;; *************** function _st_dword *****************
 18184 ;; Defined at:
 18185 ;;		line 658 in file "bibliotecas/ff.c"
 18186 ;; Parameters:    Size  Location     Type
 18187 ;;  ptr             2   25[COMRAM] PTR unsigned char 
 18188 ;;		 -> fs.win(512), NULL(0), fs(559), 
 18189 ;;  val             4   27[COMRAM] unsigned long 
 18190 ;; Auto vars:     Size  Location     Type
 18191 ;;		None
 18192 ;; Return value:  Size  Location     Type
 18193 ;;                  1    wreg      void 
 18194 ;; Registers used:
 18195 ;;		fsr2l, fsr2h, status,2, status,0
 18196 ;; Tracked objects:
 18197 ;;		On entry : 0/0
 18198 ;;		On exit  : 0/0
 18199 ;;		Unchanged: 0/0
 18200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18201 ;;      Params:         6       0       0       0       0       0       0       0       0
 18202 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18203 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18204 ;;      Totals:         6       0       0       0       0       0       0       0       0
 18205 ;;Total ram usage:        6 bytes
 18206 ;; Hardware stack levels used:    1
 18207 ;; Hardware stack levels required when called:    2
 18208 ;; This function calls:
 18209 ;;		Nothing
 18210 ;; This function is called by:
 18211 ;;		_sync_fs
 18212 ;;		_put_fat
 18213 ;;		_f_open
 18214 ;;		_f_sync
 18215 ;;		_f_mkdir
 18216 ;; This function uses a non-reentrant model
 18217 ;;
 18218                           
 18219                           	psect	text54
 18220  005338                     __ptext54:
 18221                           	opt stack 0
 18222  005338                     _st_dword:
 18223                           	opt stack 23
 18224                           
 18225                           ;ff.c: 660: *ptr++ = (BYTE)val; val >>= 8;
 18226                           
 18227                           ; BSR set to: 0
 18228                           ;incstack = 0
 18229  005338  C01A  FFD9         	movff	st_dword@ptr,fsr2l
 18230  00533C  C01B  FFDA         	movff	st_dword@ptr+1,fsr2h
 18231  005340  C01C  FFDF         	movff	st_dword@val,indf2
 18232  005344  4A1A               	infsnz	st_dword@ptr,f,c
 18233  005346  2A1B               	incf	st_dword@ptr+1,f,c
 18234  005348  C01D  F01C         	movff	st_dword@val+1,st_dword@val
 18235  00534C  C01E  F01D         	movff	st_dword@val+2,st_dword@val+1
 18236  005350  C01F  F01E         	movff	st_dword@val+3,st_dword@val+2
 18237  005354  6A1F               	clrf	st_dword@val+3,c
 18238                           
 18239                           ;ff.c: 661: *ptr++ = (BYTE)val; val >>= 8;
 18240  005356  C01A  FFD9         	movff	st_dword@ptr,fsr2l
 18241  00535A  C01B  FFDA         	movff	st_dword@ptr+1,fsr2h
 18242  00535E  C01C  FFDF         	movff	st_dword@val,indf2
 18243  005362  4A1A               	infsnz	st_dword@ptr,f,c
 18244  005364  2A1B               	incf	st_dword@ptr+1,f,c
 18245  005366  C01D  F01C         	movff	st_dword@val+1,st_dword@val
 18246  00536A  C01E  F01D         	movff	st_dword@val+2,st_dword@val+1
 18247  00536E  C01F  F01E         	movff	st_dword@val+3,st_dword@val+2
 18248  005372  6A1F               	clrf	st_dword@val+3,c
 18249                           
 18250                           ;ff.c: 662: *ptr++ = (BYTE)val; val >>= 8;
 18251  005374  C01A  FFD9         	movff	st_dword@ptr,fsr2l
 18252  005378  C01B  FFDA         	movff	st_dword@ptr+1,fsr2h
 18253  00537C  C01C  FFDF         	movff	st_dword@val,indf2
 18254  005380  4A1A               	infsnz	st_dword@ptr,f,c
 18255  005382  2A1B               	incf	st_dword@ptr+1,f,c
 18256  005384  C01D  F01C         	movff	st_dword@val+1,st_dword@val
 18257  005388  C01E  F01D         	movff	st_dword@val+2,st_dword@val+1
 18258  00538C  C01F  F01E         	movff	st_dword@val+3,st_dword@val+2
 18259  005390  6A1F               	clrf	st_dword@val+3,c
 18260                           
 18261                           ;ff.c: 663: *ptr++ = (BYTE)val;
 18262  005392  C01A  FFD9         	movff	st_dword@ptr,fsr2l
 18263  005396  C01B  FFDA         	movff	st_dword@ptr+1,fsr2h
 18264  00539A  C01C  FFDF         	movff	st_dword@val,indf2
 18265  00539E  4A1A               	infsnz	st_dword@ptr,f,c
 18266  0053A0  2A1B               	incf	st_dword@ptr+1,f,c
 18267  0053A2  0012               	return		;funcret
 18268  0053A4                     __end_of_st_dword:
 18269                           	opt stack 0
 18270                           tosu	equ	0xFFF
 18271                           tosh	equ	0xFFE
 18272                           tosl	equ	0xFFD
 18273                           pclath	equ	0xFFA
 18274                           tblptru	equ	0xFF8
 18275                           tblptrh	equ	0xFF7
 18276                           tblptrl	equ	0xFF6
 18277                           tablat	equ	0xFF5
 18278                           prodh	equ	0xFF4
 18279                           prodl	equ	0xFF3
 18280                           intcon	equ	0xFF2
 18281                           intcon2	equ	0xFF1
 18282                           intcon3	equ	0xFF0
 18283                           indf0	equ	0xFEF
 18284                           postinc0	equ	0xFEE
 18285                           fsr0h	equ	0xFEA
 18286                           fsr0l	equ	0xFE9
 18287                           wreg	equ	0xFE8
 18288                           indf1	equ	0xFE7
 18289                           postinc1	equ	0xFE6
 18290                           postdec1	equ	0xFE5
 18291                           fsr1h	equ	0xFE2
 18292                           fsr1l	equ	0xFE1
 18293                           indf2	equ	0xFDF
 18294                           postinc2	equ	0xFDE
 18295                           postdec2	equ	0xFDD
 18296                           plusw2	equ	0xFDB
 18297                           fsr2h	equ	0xFDA
 18298                           fsr2l	equ	0xFD9
 18299                           status	equ	0xFD8
 18300                           
 18301 ;; *************** function _memset *****************
 18302 ;; Defined at:
 18303 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 18304 ;; Parameters:    Size  Location     Type
 18305 ;;  p1              2   25[COMRAM] PTR void 
 18306 ;;		 -> djn.fn(12), f_printf@pb(70), f_puts@pb(70), f_putc@pb(70), 
 18307 ;;		 -> f_rename@djn(40), djo.fn(12), f_rename@djo(40), dj.fn(12), 
 18308 ;;		 -> f_mkdir@dj(40), dj.fn(12), f_unlink@dj(40), dj.fn(12), 
 18309 ;;		 -> f_stat@dj(40), dj.fn(12), f_open@dj(40), NULL(0), 
 18310 ;;		 -> fs(559), gps@gps_buffer(15), 
 18311 ;;  c               2   27[COMRAM] int 
 18312 ;;  n               2   29[COMRAM] unsigned int 
 18313 ;; Auto vars:     Size  Location     Type
 18314 ;;  p               2   31[COMRAM] PTR unsigned char 
 18315 ;;		 -> djn.fn(12), f_printf@pb(70), f_puts@pb(70), f_putc@pb(70), 
 18316 ;;		 -> f_rename@djn(40), djo.fn(12), f_rename@djo(40), dj.fn(12), 
 18317 ;;		 -> f_mkdir@dj(40), dj.fn(12), f_unlink@dj(40), dj.fn(12), 
 18318 ;;		 -> f_stat@dj(40), dj.fn(12), f_open@dj(40), NULL(0), 
 18319 ;;		 -> fs(559), gps@gps_buffer(15), 
 18320 ;; Return value:  Size  Location     Type
 18321 ;;                  2   25[COMRAM] PTR void 
 18322 ;; Registers used:
 18323 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18324 ;; Tracked objects:
 18325 ;;		On entry : 0/0
 18326 ;;		On exit  : 0/0
 18327 ;;		Unchanged: 0/0
 18328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18329 ;;      Params:         6       0       0       0       0       0       0       0       0
 18330 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18331 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18332 ;;      Totals:         8       0       0       0       0       0       0       0       0
 18333 ;;Total ram usage:        8 bytes
 18334 ;; Hardware stack levels used:    1
 18335 ;; Hardware stack levels required when called:    2
 18336 ;; This function calls:
 18337 ;;		Nothing
 18338 ;; This function is called by:
 18339 ;;		_sync_fs
 18340 ;;		_dir_clear
 18341 ;;		_dir_register
 18342 ;;		_create_name
 18343 ;;		_gps
 18344 ;;		_f_mkdir
 18345 ;;		_putc_init
 18346 ;; This function uses a non-reentrant model
 18347 ;;
 18348                           
 18349                           	psect	text55
 18350  0059AA                     __ptext55:
 18351                           	opt stack 0
 18352  0059AA                     _memset:
 18353                           	opt stack 21
 18354                           
 18355                           ;incstack = 0
 18356  0059AA  C01A  F020         	movff	memset@p1,memset@p
 18357  0059AE  C01B  F021         	movff	memset@p1+1,memset@p+1
 18358  0059B2  D008               	goto	l2491
 18359  0059B4                     l13126:
 18360  0059B4  C020  FFD9         	movff	memset@p,fsr2l
 18361  0059B8  C021  FFDA         	movff	memset@p+1,fsr2h
 18362  0059BC  C01C  FFDF         	movff	memset@c,indf2
 18363  0059C0  4A20               	infsnz	memset@p,f,c
 18364  0059C2  2A21               	incf	memset@p+1,f,c
 18365  0059C4                     l2491:
 18366  0059C4  061E               	decf	memset@n,f,c
 18367  0059C6  A0D8               	btfss	status,0,c
 18368  0059C8  061F               	decf	memset@n+1,f,c
 18369  0059CA  281E               	incf	memset@n,w,c
 18370  0059CC  E1F3               	bnz	l13126
 18371  0059CE  281F               	incf	memset@n+1,w,c
 18372  0059D0  B4D8               	btfsc	status,2,c
 18373  0059D2  0012               	return	
 18374  0059D4  D7EF               	goto	l2492
 18375  0059D6                     __end_of_memset:
 18376                           	opt stack 0
 18377                           tosu	equ	0xFFF
 18378                           tosh	equ	0xFFE
 18379                           tosl	equ	0xFFD
 18380                           pclath	equ	0xFFA
 18381                           tblptru	equ	0xFF8
 18382                           tblptrh	equ	0xFF7
 18383                           tblptrl	equ	0xFF6
 18384                           tablat	equ	0xFF5
 18385                           prodh	equ	0xFF4
 18386                           prodl	equ	0xFF3
 18387                           intcon	equ	0xFF2
 18388                           intcon2	equ	0xFF1
 18389                           intcon3	equ	0xFF0
 18390                           indf0	equ	0xFEF
 18391                           postinc0	equ	0xFEE
 18392                           fsr0h	equ	0xFEA
 18393                           fsr0l	equ	0xFE9
 18394                           wreg	equ	0xFE8
 18395                           indf1	equ	0xFE7
 18396                           postinc1	equ	0xFE6
 18397                           postdec1	equ	0xFE5
 18398                           fsr1h	equ	0xFE2
 18399                           fsr1l	equ	0xFE1
 18400                           indf2	equ	0xFDF
 18401                           postinc2	equ	0xFDE
 18402                           postdec2	equ	0xFDD
 18403                           plusw2	equ	0xFDB
 18404                           fsr2h	equ	0xFDA
 18405                           fsr2l	equ	0xFD9
 18406                           status	equ	0xFD8
 18407                           
 18408 ;; *************** function _disk_ioctl *****************
 18409 ;; Defined at:
 18410 ;;		line 249 in file "bibliotecas/diskio.c"
 18411 ;; Parameters:    Size  Location     Type
 18412 ;;  pdrv            1    wreg     unsigned char 
 18413 ;;  cmd             1   25[COMRAM] unsigned char 
 18414 ;;  buff            2   26[COMRAM] PTR void 
 18415 ;;		 -> NULL(0), 
 18416 ;; Auto vars:     Size  Location     Type
 18417 ;;  pdrv            1   28[COMRAM] unsigned char 
 18418 ;;  result          2    0        int 
 18419 ;;  res             1   29[COMRAM] enum E25
 18420 ;; Return value:  Size  Location     Type
 18421 ;;                  1    wreg      enum E25
 18422 ;; Registers used:
 18423 ;;		wreg, status,2, status,0
 18424 ;; Tracked objects:
 18425 ;;		On entry : 0/0
 18426 ;;		On exit  : 0/0
 18427 ;;		Unchanged: 0/0
 18428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18429 ;;      Params:         3       0       0       0       0       0       0       0       0
 18430 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18431 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18432 ;;      Totals:         5       0       0       0       0       0       0       0       0
 18433 ;;Total ram usage:        5 bytes
 18434 ;; Hardware stack levels used:    1
 18435 ;; Hardware stack levels required when called:    2
 18436 ;; This function calls:
 18437 ;;		Nothing
 18438 ;; This function is called by:
 18439 ;;		_sync_fs
 18440 ;; This function uses a non-reentrant model
 18441 ;;
 18442                           
 18443                           	psect	text56
 18444  0059FE                     __ptext56:
 18445                           	opt stack 0
 18446  0059FE                     _disk_ioctl:
 18447                           	opt stack 23
 18448                           
 18449                           ;incstack = 0
 18450                           ;disk_ioctl@pdrv stored from wreg
 18451  0059FE  6E1D               	movwf	disk_ioctl@pdrv,c
 18452                           
 18453                           ;diskio.c: 255: DRESULT res;
 18454                           ;diskio.c: 256: int result;
 18455                           ;diskio.c: 258: switch (pdrv) {
 18456  005A00  D006               	goto	l873
 18457  005A02                     l874:
 18458                           
 18459                           ;diskio.c: 263: return res;
 18460  005A02  501E               	movf	disk_ioctl@res,w,c
 18461  005A04  0012               	return	
 18462  005A06                     l876:
 18463                           
 18464                           ;diskio.c: 269: return res;
 18465  005A06  501E               	movf	disk_ioctl@res,w,c
 18466  005A08  0012               	return	
 18467  005A0A                     l877:
 18468                           
 18469                           ;diskio.c: 275: return res;
 18470  005A0A  501E               	movf	disk_ioctl@res,w,c
 18471  005A0C  0012               	return	
 18472  005A0E                     l873:
 18473  005A0E  501D               	movf	disk_ioctl@pdrv,w,c
 18474                           
 18475                           ; Switch size 1, requested type "space"
 18476                           ; Number of cases is 3, Range of values is 0 to 2
 18477                           ; switch strategies available:
 18478                           ; Name         Instructions Cycles
 18479                           ; simple_byte           10     6 (average)
 18480                           ;	Chosen strategy is simple_byte
 18481  005A10  0A00               	xorlw	0	; case 0
 18482  005A12  B4D8               	btfsc	status,2,c
 18483  005A14  D7F6               	goto	l874
 18484  005A16  0A01               	xorlw	1	; case 1
 18485  005A18  B4D8               	btfsc	status,2,c
 18486  005A1A  D7F5               	goto	l876
 18487  005A1C  0A03               	xorlw	3	; case 2
 18488  005A1E  B4D8               	btfsc	status,2,c
 18489  005A20  D7F4               	goto	l877
 18490                           
 18491                           ;diskio.c: 278: return RES_PARERR;
 18492  005A22  0E04               	movlw	4
 18493  005A24  0012               	return	
 18494  005A26                     __end_of_disk_ioctl:
 18495                           	opt stack 0
 18496                           tosu	equ	0xFFF
 18497                           tosh	equ	0xFFE
 18498                           tosl	equ	0xFFD
 18499                           pclath	equ	0xFFA
 18500                           tblptru	equ	0xFF8
 18501                           tblptrh	equ	0xFF7
 18502                           tblptrl	equ	0xFF6
 18503                           tablat	equ	0xFF5
 18504                           prodh	equ	0xFF4
 18505                           prodl	equ	0xFF3
 18506                           intcon	equ	0xFF2
 18507                           intcon2	equ	0xFF1
 18508                           intcon3	equ	0xFF0
 18509                           indf0	equ	0xFEF
 18510                           postinc0	equ	0xFEE
 18511                           fsr0h	equ	0xFEA
 18512                           fsr0l	equ	0xFE9
 18513                           wreg	equ	0xFE8
 18514                           indf1	equ	0xFE7
 18515                           postinc1	equ	0xFE6
 18516                           postdec1	equ	0xFE5
 18517                           fsr1h	equ	0xFE2
 18518                           fsr1l	equ	0xFE1
 18519                           indf2	equ	0xFDF
 18520                           postinc2	equ	0xFDE
 18521                           postdec2	equ	0xFDD
 18522                           plusw2	equ	0xFDB
 18523                           fsr2h	equ	0xFDA
 18524                           fsr2l	equ	0xFD9
 18525                           status	equ	0xFD8
 18526                           
 18527 ;; *************** function _st_clust *****************
 18528 ;; Defined at:
 18529 ;;		line 1834 in file "bibliotecas/ff.c"
 18530 ;; Parameters:    Size  Location     Type
 18531 ;;  fs              2   29[COMRAM] PTR struct .
 18532 ;;		 -> NULL(0), fs(559), 
 18533 ;;  dir             2   31[COMRAM] PTR unsigned char 
 18534 ;;		 -> fs.win(512), NULL(0), fs(559), 
 18535 ;;  cl              4   33[COMRAM] unsigned long 
 18536 ;; Auto vars:     Size  Location     Type
 18537 ;;		None
 18538 ;; Return value:  Size  Location     Type
 18539 ;;                  1    wreg      void 
 18540 ;; Registers used:
 18541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18542 ;; Tracked objects:
 18543 ;;		On entry : 0/0
 18544 ;;		On exit  : 0/0
 18545 ;;		Unchanged: 0/0
 18546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18547 ;;      Params:         8       0       0       0       0       0       0       0       0
 18548 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18549 ;;      Temps:          1       0       0       0       0       0       0       0       0
 18550 ;;      Totals:         9       0       0       0       0       0       0       0       0
 18551 ;;Total ram usage:        9 bytes
 18552 ;; Hardware stack levels used:    1
 18553 ;; Hardware stack levels required when called:    3
 18554 ;; This function calls:
 18555 ;;		_st_word
 18556 ;; This function is called by:
 18557 ;;		_f_open
 18558 ;;		_f_sync
 18559 ;;		_f_mkdir
 18560 ;;		_f_rename
 18561 ;; This function uses a non-reentrant model
 18562 ;;
 18563                           
 18564                           	psect	text57
 18565  00575C                     __ptext57:
 18566                           	opt stack 0
 18567  00575C                     _st_clust:
 18568                           	opt stack 24
 18569                           
 18570                           ;ff.c: 1840: st_word(dir + 26, (WORD)cl);
 18571                           
 18572                           ;incstack = 0
 18573  00575C  0E1A               	movlw	26
 18574  00575E  2420               	addwf	st_clust@dir,w,c
 18575  005760  6E1A               	movwf	st_word@ptr,c
 18576  005762  0E00               	movlw	0
 18577  005764  2021               	addwfc	st_clust@dir+1,w,c
 18578  005766  6E1B               	movwf	st_word@ptr+1,c
 18579  005768  C022  F01C         	movff	st_clust@cl,st_word@val
 18580  00576C  C023  F01D         	movff	st_clust@cl+1,st_word@val+1
 18581  005770  EC13  F02D         	call	_st_word	;wreg free
 18582                           
 18583                           ;ff.c: 1841: if (fs->fs_type == 3) {
 18584  005774  C01E  FFD9         	movff	st_clust@fs,fsr2l
 18585  005778  C01F  FFDA         	movff	st_clust@fs+1,fsr2h
 18586  00577C  0E03               	movlw	3
 18587  00577E  18DE               	xorwf	postinc2,w,c
 18588  005780  A4D8               	btfss	status,2,c
 18589  005782  0012               	return	
 18590                           
 18591                           ;ff.c: 1842: st_word(dir + 20, (WORD)(cl >> 16));
 18592  005784  0E14               	movlw	20
 18593  005786  2420               	addwf	st_clust@dir,w,c
 18594  005788  6E1A               	movwf	st_word@ptr,c
 18595  00578A  0E00               	movlw	0
 18596  00578C  2021               	addwfc	st_clust@dir+1,w,c
 18597  00578E  6E1B               	movwf	st_word@ptr+1,c
 18598  005790  C024  F01C         	movff	st_clust@cl+2,st_word@val
 18599  005794  C025  F01D         	movff	st_clust@cl+3,st_word@val+1
 18600  005798  EC13  F02D         	call	_st_word	;wreg free
 18601  00579C  0012               	return	
 18602  00579E                     __end_of_st_clust:
 18603                           	opt stack 0
 18604                           tosu	equ	0xFFF
 18605                           tosh	equ	0xFFE
 18606                           tosl	equ	0xFFD
 18607                           pclath	equ	0xFFA
 18608                           tblptru	equ	0xFF8
 18609                           tblptrh	equ	0xFF7
 18610                           tblptrl	equ	0xFF6
 18611                           tablat	equ	0xFF5
 18612                           prodh	equ	0xFF4
 18613                           prodl	equ	0xFF3
 18614                           intcon	equ	0xFF2
 18615                           intcon2	equ	0xFF1
 18616                           intcon3	equ	0xFF0
 18617                           indf0	equ	0xFEF
 18618                           postinc0	equ	0xFEE
 18619                           fsr0h	equ	0xFEA
 18620                           fsr0l	equ	0xFE9
 18621                           wreg	equ	0xFE8
 18622                           indf1	equ	0xFE7
 18623                           postinc1	equ	0xFE6
 18624                           postdec1	equ	0xFE5
 18625                           fsr1h	equ	0xFE2
 18626                           fsr1l	equ	0xFE1
 18627                           indf2	equ	0xFDF
 18628                           postinc2	equ	0xFDE
 18629                           postdec2	equ	0xFDD
 18630                           plusw2	equ	0xFDB
 18631                           fsr2h	equ	0xFDA
 18632                           fsr2l	equ	0xFD9
 18633                           status	equ	0xFD8
 18634                           
 18635 ;; *************** function _st_word *****************
 18636 ;; Defined at:
 18637 ;;		line 652 in file "bibliotecas/ff.c"
 18638 ;; Parameters:    Size  Location     Type
 18639 ;;  ptr             2   25[COMRAM] PTR unsigned char 
 18640 ;;		 -> fs.win(512), NULL(0), fs(559), 
 18641 ;;  val             2   27[COMRAM] unsigned short 
 18642 ;; Auto vars:     Size  Location     Type
 18643 ;;		None
 18644 ;; Return value:  Size  Location     Type
 18645 ;;                  1    wreg      void 
 18646 ;; Registers used:
 18647 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18648 ;; Tracked objects:
 18649 ;;		On entry : 0/0
 18650 ;;		On exit  : 0/0
 18651 ;;		Unchanged: 0/0
 18652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18653 ;;      Params:         4       0       0       0       0       0       0       0       0
 18654 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18655 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18656 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18657 ;;Total ram usage:        4 bytes
 18658 ;; Hardware stack levels used:    1
 18659 ;; Hardware stack levels required when called:    2
 18660 ;; This function calls:
 18661 ;;		Nothing
 18662 ;; This function is called by:
 18663 ;;		_sync_fs
 18664 ;;		_put_fat
 18665 ;;		_st_clust
 18666 ;;		_f_sync
 18667 ;; This function uses a non-reentrant model
 18668 ;;
 18669                           
 18670                           	psect	text58
 18671  005A26                     __ptext58:
 18672                           	opt stack 0
 18673  005A26                     _st_word:
 18674                           	opt stack 23
 18675                           
 18676                           ;ff.c: 654: *ptr++ = (BYTE)val; val >>= 8;
 18677                           
 18678                           ;incstack = 0
 18679  005A26  C01A  FFD9         	movff	st_word@ptr,fsr2l
 18680  005A2A  C01B  FFDA         	movff	st_word@ptr+1,fsr2h
 18681  005A2E  C01C  FFDF         	movff	st_word@val,indf2
 18682  005A32  4A1A               	infsnz	st_word@ptr,f,c
 18683  005A34  2A1B               	incf	st_word@ptr+1,f,c
 18684  005A36  501D               	movf	st_word@val+1,w,c
 18685  005A38  6E1C               	movwf	st_word@val,c
 18686  005A3A  6A1D               	clrf	st_word@val+1,c
 18687                           
 18688                           ;ff.c: 655: *ptr++ = (BYTE)val;
 18689  005A3C  C01A  FFD9         	movff	st_word@ptr,fsr2l
 18690  005A40  C01B  FFDA         	movff	st_word@ptr+1,fsr2h
 18691  005A44  C01C  FFDF         	movff	st_word@val,indf2
 18692  005A48  4A1A               	infsnz	st_word@ptr,f,c
 18693  005A4A  2A1B               	incf	st_word@ptr+1,f,c
 18694  005A4C  0012               	return		;funcret
 18695  005A4E                     __end_of_st_word:
 18696                           	opt stack 0
 18697                           tosu	equ	0xFFF
 18698                           tosh	equ	0xFFE
 18699                           tosl	equ	0xFFD
 18700                           pclath	equ	0xFFA
 18701                           tblptru	equ	0xFF8
 18702                           tblptrh	equ	0xFF7
 18703                           tblptrl	equ	0xFF6
 18704                           tablat	equ	0xFF5
 18705                           prodh	equ	0xFF4
 18706                           prodl	equ	0xFF3
 18707                           intcon	equ	0xFF2
 18708                           intcon2	equ	0xFF1
 18709                           intcon3	equ	0xFF0
 18710                           indf0	equ	0xFEF
 18711                           postinc0	equ	0xFEE
 18712                           fsr0h	equ	0xFEA
 18713                           fsr0l	equ	0xFE9
 18714                           wreg	equ	0xFE8
 18715                           indf1	equ	0xFE7
 18716                           postinc1	equ	0xFE6
 18717                           postdec1	equ	0xFE5
 18718                           fsr1h	equ	0xFE2
 18719                           fsr1l	equ	0xFE1
 18720                           indf2	equ	0xFDF
 18721                           postinc2	equ	0xFDE
 18722                           postdec2	equ	0xFDD
 18723                           plusw2	equ	0xFDB
 18724                           fsr2h	equ	0xFDA
 18725                           fsr2l	equ	0xFD9
 18726                           status	equ	0xFD8
 18727                           
 18728 ;; *************** function _move_window *****************
 18729 ;; Defined at:
 18730 ;;		line 1047 in file "bibliotecas/ff.c"
 18731 ;; Parameters:    Size  Location     Type
 18732 ;;  fs              2   48[BANK0 ] PTR struct .
 18733 ;;		 -> NULL(0), fs(559), 
 18734 ;;  sect            4   50[BANK0 ] unsigned long 
 18735 ;; Auto vars:     Size  Location     Type
 18736 ;;  res             1   58[BANK0 ] enum E154
 18737 ;; Return value:  Size  Location     Type
 18738 ;;                  1    wreg      enum E154
 18739 ;; Registers used:
 18740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18741 ;; Tracked objects:
 18742 ;;		On entry : 0/0
 18743 ;;		On exit  : 0/0
 18744 ;;		Unchanged: 0/0
 18745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18746 ;;      Params:         0       6       0       0       0       0       0       0       0
 18747 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18748 ;;      Temps:          0       4       0       0       0       0       0       0       0
 18749 ;;      Totals:         0      11       0       0       0       0       0       0       0
 18750 ;;Total ram usage:       11 bytes
 18751 ;; Hardware stack levels used:    1
 18752 ;; Hardware stack levels required when called:    8
 18753 ;; This function calls:
 18754 ;;		_disk_read
 18755 ;;		_sync_window
 18756 ;; This function is called by:
 18757 ;;		_get_fat
 18758 ;;		_put_fat
 18759 ;;		_dir_alloc
 18760 ;;		_dir_find
 18761 ;;		_dir_register
 18762 ;;		_check_fs
 18763 ;;		_mount_volume
 18764 ;;		_f_open
 18765 ;;		_f_write
 18766 ;;		_f_sync
 18767 ;;		_dir_read
 18768 ;;		_dir_remove
 18769 ;;		_f_read
 18770 ;;		_f_getfree
 18771 ;;		_f_rename
 18772 ;; This function uses a non-reentrant model
 18773 ;;
 18774                           
 18775                           	psect	text59
 18776  004C12                     __ptext59:
 18777                           	opt stack 0
 18778  004C12                     _move_window:
 18779                           	opt stack 19
 18780                           
 18781                           ;ff.c: 1052: FRESULT res = FR_OK;
 18782                           
 18783                           ;incstack = 0
 18784  004C12  0E00               	movlw	0
 18785  004C14  0100               	movlb	0	; () banked
 18786  004C16  6F9A               	movwf	move_window@res& (0+255),b
 18787                           
 18788                           ; BSR set to: 0
 18789                           ;ff.c: 1055: if (sect != fs->winsect) {
 18790  004C18  EE20 F02B          	lfsr	2,43
 18791  004C1C  5190               	movf	move_window@fs& (0+255),w,b
 18792  004C1E  26D9               	addwf	fsr2l,f,c
 18793  004C20  5191               	movf	(move_window@fs+1)& (0+255),w,b
 18794  004C22  22DA               	addwfc	fsr2h,f,c
 18795  004C24  5192               	movf	move_window@sect& (0+255),w,b
 18796  004C26  18DE               	xorwf	postinc2,w,c
 18797  004C28  E10A               	bnz	u16570
 18798  004C2A  5193               	movf	(move_window@sect+1)& (0+255),w,b
 18799  004C2C  18DE               	xorwf	postinc2,w,c
 18800  004C2E  E107               	bnz	u16570
 18801  004C30  5194               	movf	(move_window@sect+2)& (0+255),w,b
 18802  004C32  18DE               	xorwf	postinc2,w,c
 18803  004C34  E104               	bnz	u16570
 18804  004C36  5195               	movf	(move_window@sect+3)& (0+255),w,b
 18805  004C38  18DE               	xorwf	postinc2,w,c
 18806  004C3A  B4D8               	btfsc	status,2,c
 18807  004C3C  D03D               	goto	l1026
 18808  004C3E                     u16570:
 18809                           
 18810                           ; BSR set to: 0
 18811                           ;ff.c: 1057: res = sync_window(fs);
 18812  004C3E  C090  F073         	movff	move_window@fs,sync_window@fs
 18813  004C42  C091  F074         	movff	move_window@fs+1,sync_window@fs+1
 18814  004C46  EC36  F01C         	call	_sync_window	;wreg free
 18815  004C4A  0100               	movlb	0	; () banked
 18816  004C4C  6F9A               	movwf	move_window@res& (0+255),b
 18817                           
 18818                           ; BSR set to: 0
 18819                           ;ff.c: 1059: if (res == FR_OK) {
 18820  004C4E  519A               	movf	move_window@res& (0+255),w,b
 18821  004C50  A4D8               	btfss	status,2,c
 18822  004C52  D032               	goto	l1026
 18823                           
 18824                           ; BSR set to: 0
 18825                           ;ff.c: 1060: if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 18826  004C54  0E2F               	movlw	47
 18827  004C56  2590               	addwf	move_window@fs& (0+255),w,b
 18828  004C58  6F83               	movwf	disk_read@buff& (0+255),b
 18829  004C5A  0E00               	movlw	0
 18830  004C5C  2191               	addwfc	(move_window@fs+1)& (0+255),w,b
 18831  004C5E  6F84               	movwf	(disk_read@buff+1)& (0+255),b
 18832  004C60  C092  F085         	movff	move_window@sect,disk_read@sector
 18833  004C64  C093  F086         	movff	move_window@sect+1,disk_read@sector+1
 18834  004C68  C094  F087         	movff	move_window@sect+2,disk_read@sector+2
 18835  004C6C  C095  F088         	movff	move_window@sect+3,disk_read@sector+3
 18836  004C70  0E01               	movlw	1
 18837  004C72  6F89               	movwf	disk_read@count& (0+255),b
 18838  004C74  EE20 F001          	lfsr	2,1
 18839  004C78  5190               	movf	move_window@fs& (0+255),w,b
 18840  004C7A  26D9               	addwf	fsr2l,f,c
 18841  004C7C  5191               	movf	(move_window@fs+1)& (0+255),w,b
 18842  004C7E  22DA               	addwfc	fsr2h,f,c
 18843  004C80  50DF               	movf	indf2,w,c
 18844  004C82  EC36  F024         	call	_disk_read
 18845  004C86  0900               	iorlw	0
 18846  004C88  B4D8               	btfsc	status,2,c
 18847  004C8A  D007               	goto	l1027
 18848                           
 18849                           ;ff.c: 1061: sect = (LBA_t)0 - 1;
 18850  004C8C  0100               	movlb	0	; () banked
 18851  004C8E  6992               	setf	move_window@sect& (0+255),b
 18852  004C90  6993               	setf	(move_window@sect+1)& (0+255),b
 18853  004C92  6994               	setf	(move_window@sect+2)& (0+255),b
 18854  004C94  6995               	setf	(move_window@sect+3)& (0+255),b
 18855                           
 18856                           ; BSR set to: 0
 18857                           ;ff.c: 1062: res = FR_DISK_ERR;
 18858  004C96  0E01               	movlw	1
 18859  004C98  6F9A               	movwf	move_window@res& (0+255),b
 18860  004C9A                     l1027:
 18861                           
 18862                           ;ff.c: 1063: }
 18863                           ;ff.c: 1064: fs->winsect = sect;
 18864                           
 18865                           ; BSR set to: 0
 18866  004C9A  0100               	movlb	0	; () banked
 18867  004C9C  EE20 F02B          	lfsr	2,43
 18868  004CA0  5190               	movf	move_window@fs& (0+255),w,b
 18869  004CA2  26D9               	addwf	fsr2l,f,c
 18870  004CA4  5191               	movf	(move_window@fs+1)& (0+255),w,b
 18871  004CA6  22DA               	addwfc	fsr2h,f,c
 18872  004CA8  C092  FFDE         	movff	move_window@sect,postinc2
 18873  004CAC  C093  FFDE         	movff	move_window@sect+1,postinc2
 18874  004CB0  C094  FFDE         	movff	move_window@sect+2,postinc2
 18875  004CB4  C095  FFDE         	movff	move_window@sect+3,postinc2
 18876  004CB8                     l1026:
 18877                           
 18878                           ; BSR set to: 0
 18879                           ;ff.c: 1065: }
 18880                           ;ff.c: 1066: }
 18881                           ;ff.c: 1067: return res;
 18882                           
 18883                           ; BSR set to: 0
 18884                           
 18885                           ; BSR set to: 0
 18886  004CB8  519A               	movf	move_window@res& (0+255),w,b
 18887  004CBA  0012               	return	
 18888  004CBC                     __end_of_move_window:
 18889                           	opt stack 0
 18890                           tosu	equ	0xFFF
 18891                           tosh	equ	0xFFE
 18892                           tosl	equ	0xFFD
 18893                           pclath	equ	0xFFA
 18894                           tblptru	equ	0xFF8
 18895                           tblptrh	equ	0xFF7
 18896                           tblptrl	equ	0xFF6
 18897                           tablat	equ	0xFF5
 18898                           prodh	equ	0xFF4
 18899                           prodl	equ	0xFF3
 18900                           intcon	equ	0xFF2
 18901                           intcon2	equ	0xFF1
 18902                           intcon3	equ	0xFF0
 18903                           indf0	equ	0xFEF
 18904                           postinc0	equ	0xFEE
 18905                           fsr0h	equ	0xFEA
 18906                           fsr0l	equ	0xFE9
 18907                           wreg	equ	0xFE8
 18908                           indf1	equ	0xFE7
 18909                           postinc1	equ	0xFE6
 18910                           postdec1	equ	0xFE5
 18911                           fsr1h	equ	0xFE2
 18912                           fsr1l	equ	0xFE1
 18913                           indf2	equ	0xFDF
 18914                           postinc2	equ	0xFDE
 18915                           postdec2	equ	0xFDD
 18916                           plusw2	equ	0xFDB
 18917                           fsr2h	equ	0xFDA
 18918                           fsr2l	equ	0xFD9
 18919                           status	equ	0xFD8
 18920                           
 18921 ;; *************** function _sync_window *****************
 18922 ;; Defined at:
 18923 ;;		line 1025 in file "bibliotecas/ff.c"
 18924 ;; Parameters:    Size  Location     Type
 18925 ;;  fs              2   19[BANK0 ] PTR struct .
 18926 ;;		 -> NULL(0), fs(559), 
 18927 ;; Auto vars:     Size  Location     Type
 18928 ;;  res             1   37[BANK0 ] enum E154
 18929 ;; Return value:  Size  Location     Type
 18930 ;;                  1    wreg      enum E154
 18931 ;; Registers used:
 18932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18933 ;; Tracked objects:
 18934 ;;		On entry : 0/0
 18935 ;;		On exit  : 0/0
 18936 ;;		Unchanged: 0/0
 18937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18938 ;;      Params:         0       2       0       0       0       0       0       0       0
 18939 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18940 ;;      Temps:          0      16       0       0       0       0       0       0       0
 18941 ;;      Totals:         0      19       0       0       0       0       0       0       0
 18942 ;;Total ram usage:       19 bytes
 18943 ;; Hardware stack levels used:    1
 18944 ;; Hardware stack levels required when called:    6
 18945 ;; This function calls:
 18946 ;;		_disk_write
 18947 ;; This function is called by:
 18948 ;;		_move_window
 18949 ;;		_sync_fs
 18950 ;;		_dir_clear
 18951 ;;		_f_write
 18952 ;; This function uses a non-reentrant model
 18953 ;;
 18954                           
 18955                           	psect	text60
 18956  00386C                     __ptext60:
 18957                           	opt stack 0
 18958  00386C                     _sync_window:
 18959                           	opt stack 21
 18960                           
 18961                           ;ff.c: 1029: FRESULT res = FR_OK;
 18962                           
 18963                           ; BSR set to: 0
 18964                           ;incstack = 0
 18965  00386C  0E00               	movlw	0
 18966  00386E  0100               	movlb	0	; () banked
 18967  003870  6F85               	movwf	sync_window@res& (0+255),b
 18968                           
 18969                           ; BSR set to: 0
 18970                           ;ff.c: 1032: if (fs->wflag) {
 18971  003872  EE20 F003          	lfsr	2,3
 18972  003876  5173               	movf	sync_window@fs& (0+255),w,b
 18973  003878  26D9               	addwf	fsr2l,f,c
 18974  00387A  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18975  00387C  22DA               	addwfc	fsr2h,f,c
 18976  00387E  50DF               	movf	indf2,w,c
 18977  003880  B4D8               	btfsc	status,2,c
 18978  003882  D0B3               	goto	l1021
 18979                           
 18980                           ; BSR set to: 0
 18981                           ;ff.c: 1033: if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {
 18982  003884  0E2F               	movlw	47
 18983  003886  2573               	addwf	sync_window@fs& (0+255),w,b
 18984  003888  6F68               	movwf	disk_write@buff& (0+255),b
 18985  00388A  0E00               	movlw	0
 18986  00388C  2174               	addwfc	(sync_window@fs+1)& (0+255),w,b
 18987  00388E  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 18988  003890  EE20 F02B          	lfsr	2,43
 18989  003894  5173               	movf	sync_window@fs& (0+255),w,b
 18990  003896  26D9               	addwf	fsr2l,f,c
 18991  003898  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 18992  00389A  22DA               	addwfc	fsr2h,f,c
 18993  00389C  CFDE F06A          	movff	postinc2,disk_write@sector
 18994  0038A0  CFDE F06B          	movff	postinc2,disk_write@sector+1
 18995  0038A4  CFDE F06C          	movff	postinc2,disk_write@sector+2
 18996  0038A8  CFDE F06D          	movff	postinc2,disk_write@sector+3
 18997  0038AC  0E01               	movlw	1
 18998  0038AE  6F6E               	movwf	disk_write@count& (0+255),b
 18999  0038B0  EE20 F001          	lfsr	2,1
 19000  0038B4  5173               	movf	sync_window@fs& (0+255),w,b
 19001  0038B6  26D9               	addwf	fsr2l,f,c
 19002  0038B8  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 19003  0038BA  22DA               	addwfc	fsr2h,f,c
 19004  0038BC  50DF               	movf	indf2,w,c
 19005  0038BE  EC30  F028         	call	_disk_write
 19006  0038C2  0900               	iorlw	0
 19007  0038C4  A4D8               	btfss	status,2,c
 19008  0038C6  D08E               	goto	l1018
 19009                           
 19010                           ;ff.c: 1034: fs->wflag = 0;
 19011  0038C8  0100               	movlb	0	; () banked
 19012  0038CA  EE20 F003          	lfsr	2,3
 19013  0038CE  5173               	movf	sync_window@fs& (0+255),w,b
 19014  0038D0  26D9               	addwf	fsr2l,f,c
 19015  0038D2  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 19016  0038D4  22DA               	addwfc	fsr2h,f,c
 19017  0038D6  0E00               	movlw	0
 19018  0038D8  6EDF               	movwf	indf2,c
 19019                           
 19020                           ; BSR set to: 0
 19021                           ;ff.c: 1035: if (fs->winsect - fs->fatbase < fs->fsize) {
 19022  0038DA  EE20 F017          	lfsr	2,23
 19023  0038DE  5173               	movf	sync_window@fs& (0+255),w,b
 19024  0038E0  26D9               	addwf	fsr2l,f,c
 19025  0038E2  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 19026  0038E4  22DA               	addwfc	fsr2h,f,c
 19027  0038E6  EE10 F02B          	lfsr	1,43
 19028  0038EA  5173               	movf	sync_window@fs& (0+255),w,b
 19029  0038EC  26E1               	addwf	fsr1l,f,c
 19030  0038EE  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 19031  0038F0  22E2               	addwfc	fsr1h,f,c
 19032  0038F2  CFE6 F079          	movff	postinc1,??_sync_window+4
 19033  0038F6  CFE6 F07A          	movff	postinc1,??_sync_window+5
 19034  0038FA  CFE6 F07B          	movff	postinc1,??_sync_window+6
 19035  0038FE  CFE6 F07C          	movff	postinc1,??_sync_window+7
 19036  003902  EE10 F01F          	lfsr	1,31
 19037  003906  5173               	movf	sync_window@fs& (0+255),w,b
 19038  003908  26E1               	addwf	fsr1l,f,c
 19039  00390A  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 19040  00390C  22E2               	addwfc	fsr1h,f,c
 19041  00390E  CFE6 F07D          	movff	postinc1,??_sync_window+8
 19042  003912  CFE6 F07E          	movff	postinc1,??_sync_window+9
 19043  003916  CFE6 F07F          	movff	postinc1,??_sync_window+10
 19044  00391A  CFE6 F080          	movff	postinc1,??_sync_window+11
 19045  00391E  1F7D               	comf	(??_sync_window+8)& (0+255),f,b
 19046  003920  1F7E               	comf	(??_sync_window+9)& (0+255),f,b
 19047  003922  1F7F               	comf	(??_sync_window+10)& (0+255),f,b
 19048  003924  1F80               	comf	(??_sync_window+11)& (0+255),f,b
 19049  003926  2B7D               	incf	(??_sync_window+8)& (0+255),f,b
 19050  003928  0E00               	movlw	0
 19051  00392A  237E               	addwfc	(??_sync_window+9)& (0+255),f,b
 19052  00392C  237F               	addwfc	(??_sync_window+10)& (0+255),f,b
 19053  00392E  2380               	addwfc	(??_sync_window+11)& (0+255),f,b
 19054  003930  5179               	movf	(??_sync_window+4)& (0+255),w,b
 19055  003932  257D               	addwf	(??_sync_window+8)& (0+255),w,b
 19056  003934  6F81               	movwf	(??_sync_window+12)& (0+255),b
 19057  003936  517A               	movf	(??_sync_window+5)& (0+255),w,b
 19058  003938  217E               	addwfc	(??_sync_window+9)& (0+255),w,b
 19059  00393A  6F82               	movwf	(??_sync_window+13)& (0+255),b
 19060  00393C  517B               	movf	(??_sync_window+6)& (0+255),w,b
 19061  00393E  217F               	addwfc	(??_sync_window+10)& (0+255),w,b
 19062  003940  6F83               	movwf	(??_sync_window+14)& (0+255),b
 19063  003942  517C               	movf	(??_sync_window+7)& (0+255),w,b
 19064  003944  2180               	addwfc	(??_sync_window+11)& (0+255),w,b
 19065  003946  6F84               	movwf	(??_sync_window+15)& (0+255),b
 19066  003948  50DE               	movf	postinc2,w,c
 19067  00394A  5D81               	subwf	(??_sync_window+12)& (0+255),w,b
 19068  00394C  50DE               	movf	postinc2,w,c
 19069  00394E  5982               	subwfb	(??_sync_window+13)& (0+255),w,b
 19070  003950  50DE               	movf	postinc2,w,c
 19071  003952  5983               	subwfb	(??_sync_window+14)& (0+255),w,b
 19072  003954  50DE               	movf	postinc2,w,c
 19073  003956  5984               	subwfb	(??_sync_window+15)& (0+255),w,b
 19074  003958  B0D8               	btfsc	status,0,c
 19075  00395A  D047               	goto	l1021
 19076                           
 19077                           ; BSR set to: 0
 19078                           ;ff.c: 1036: if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize,
      +                           1);
 19079  00395C  EE20 F002          	lfsr	2,2
 19080  003960  5173               	movf	sync_window@fs& (0+255),w,b
 19081  003962  26D9               	addwf	fsr2l,f,c
 19082  003964  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 19083  003966  22DA               	addwfc	fsr2h,f,c
 19084  003968  0E02               	movlw	2
 19085  00396A  18DE               	xorwf	postinc2,w,c
 19086  00396C  A4D8               	btfss	status,2,c
 19087  00396E  D03D               	goto	l1021
 19088                           
 19089                           ; BSR set to: 0
 19090  003970  0E2F               	movlw	47
 19091  003972  2573               	addwf	sync_window@fs& (0+255),w,b
 19092  003974  6F68               	movwf	disk_write@buff& (0+255),b
 19093  003976  0E00               	movlw	0
 19094  003978  2174               	addwfc	(sync_window@fs+1)& (0+255),w,b
 19095  00397A  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 19096  00397C  EE20 F017          	lfsr	2,23
 19097  003980  5173               	movf	sync_window@fs& (0+255),w,b
 19098  003982  26D9               	addwf	fsr2l,f,c
 19099  003984  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 19100  003986  22DA               	addwfc	fsr2h,f,c
 19101  003988  CFDE F075          	movff	postinc2,??_sync_window
 19102  00398C  CFDE F076          	movff	postinc2,??_sync_window+1
 19103  003990  CFDE F077          	movff	postinc2,??_sync_window+2
 19104  003994  CFDE F078          	movff	postinc2,??_sync_window+3
 19105  003998  EE20 F02B          	lfsr	2,43
 19106  00399C  5173               	movf	sync_window@fs& (0+255),w,b
 19107  00399E  26D9               	addwf	fsr2l,f,c
 19108  0039A0  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 19109  0039A2  22DA               	addwfc	fsr2h,f,c
 19110  0039A4  CFDE F079          	movff	postinc2,??_sync_window+4
 19111  0039A8  CFDE F07A          	movff	postinc2,??_sync_window+5
 19112  0039AC  CFDE F07B          	movff	postinc2,??_sync_window+6
 19113  0039B0  CFDE F07C          	movff	postinc2,??_sync_window+7
 19114  0039B4  5175               	movf	??_sync_window& (0+255),w,b
 19115  0039B6  2579               	addwf	(??_sync_window+4)& (0+255),w,b
 19116  0039B8  6F6A               	movwf	disk_write@sector& (0+255),b
 19117  0039BA  5176               	movf	(??_sync_window+1)& (0+255),w,b
 19118  0039BC  217A               	addwfc	(??_sync_window+5)& (0+255),w,b
 19119  0039BE  6F6B               	movwf	(disk_write@sector+1)& (0+255),b
 19120  0039C0  5177               	movf	(??_sync_window+2)& (0+255),w,b
 19121  0039C2  217B               	addwfc	(??_sync_window+6)& (0+255),w,b
 19122  0039C4  6F6C               	movwf	(disk_write@sector+2)& (0+255),b
 19123  0039C6  5178               	movf	(??_sync_window+3)& (0+255),w,b
 19124  0039C8  217C               	addwfc	(??_sync_window+7)& (0+255),w,b
 19125  0039CA  6F6D               	movwf	(disk_write@sector+3)& (0+255),b
 19126  0039CC  0E01               	movlw	1
 19127  0039CE  6F6E               	movwf	disk_write@count& (0+255),b
 19128  0039D0  EE20 F001          	lfsr	2,1
 19129  0039D4  5173               	movf	sync_window@fs& (0+255),w,b
 19130  0039D6  26D9               	addwf	fsr2l,f,c
 19131  0039D8  5174               	movf	(sync_window@fs+1)& (0+255),w,b
 19132  0039DA  22DA               	addwfc	fsr2h,f,c
 19133  0039DC  50DF               	movf	indf2,w,c
 19134  0039DE  EC30  F028         	call	_disk_write
 19135                           
 19136                           ;ff.c: 1037: }
 19137                           ;ff.c: 1038: } else {
 19138  0039E2  D003               	goto	l1021
 19139  0039E4                     l1018:
 19140                           
 19141                           ;ff.c: 1039: res = FR_DISK_ERR;
 19142  0039E4  0E01               	movlw	1
 19143  0039E6  0100               	movlb	0	; () banked
 19144  0039E8  6F85               	movwf	sync_window@res& (0+255),b
 19145  0039EA                     l1021:
 19146                           
 19147                           ;ff.c: 1040: }
 19148                           ;ff.c: 1041: }
 19149                           ;ff.c: 1042: return res;
 19150                           
 19151                           ; BSR set to: 0
 19152  0039EA  0100               	movlb	0	; () banked
 19153  0039EC  5185               	movf	sync_window@res& (0+255),w,b
 19154  0039EE  0012               	return	
 19155  0039F0                     __end_of_sync_window:
 19156                           	opt stack 0
 19157                           tosu	equ	0xFFF
 19158                           tosh	equ	0xFFE
 19159                           tosl	equ	0xFFD
 19160                           pclath	equ	0xFFA
 19161                           tblptru	equ	0xFF8
 19162                           tblptrh	equ	0xFF7
 19163                           tblptrl	equ	0xFF6
 19164                           tablat	equ	0xFF5
 19165                           prodh	equ	0xFF4
 19166                           prodl	equ	0xFF3
 19167                           intcon	equ	0xFF2
 19168                           intcon2	equ	0xFF1
 19169                           intcon3	equ	0xFF0
 19170                           indf0	equ	0xFEF
 19171                           postinc0	equ	0xFEE
 19172                           fsr0h	equ	0xFEA
 19173                           fsr0l	equ	0xFE9
 19174                           wreg	equ	0xFE8
 19175                           indf1	equ	0xFE7
 19176                           postinc1	equ	0xFE6
 19177                           postdec1	equ	0xFE5
 19178                           fsr1h	equ	0xFE2
 19179                           fsr1l	equ	0xFE1
 19180                           indf2	equ	0xFDF
 19181                           postinc2	equ	0xFDE
 19182                           postdec2	equ	0xFDD
 19183                           plusw2	equ	0xFDB
 19184                           fsr2h	equ	0xFDA
 19185                           fsr2l	equ	0xFD9
 19186                           status	equ	0xFD8
 19187                           
 19188 ;; *************** function _disk_write *****************
 19189 ;; Defined at:
 19190 ;;		line 201 in file "bibliotecas/diskio.c"
 19191 ;; Parameters:    Size  Location     Type
 19192 ;;  pdrv            1    wreg     unsigned char 
 19193 ;;  buff            2    8[BANK0 ] PTR const unsigned char 
 19194 ;;		 -> fs.win(512), pb.buf(64), pb.buf(64), pb.buf(64), 
 19195 ;;		 -> f_printf@pb(70), f_puts@pb(70), f_putc@pb(70), NULL(0), 
 19196 ;;		 -> STR_13(6), fs(559), 
 19197 ;;  sector          4   10[BANK0 ] unsigned long 
 19198 ;;  count           1   14[BANK0 ] unsigned char 
 19199 ;; Auto vars:     Size  Location     Type
 19200 ;;  pdrv            1   15[BANK0 ] unsigned char 
 19201 ;;  result          2   16[BANK0 ] int 
 19202 ;;  res             1   18[BANK0 ] enum E25
 19203 ;; Return value:  Size  Location     Type
 19204 ;;                  1    wreg      enum E25
 19205 ;; Registers used:
 19206 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19207 ;; Tracked objects:
 19208 ;;		On entry : 0/0
 19209 ;;		On exit  : 0/0
 19210 ;;		Unchanged: 0/0
 19211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19212 ;;      Params:         0       7       0       0       0       0       0       0       0
 19213 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19214 ;;      Temps:          1       0       0       0       0       0       0       0       0
 19215 ;;      Totals:         1      11       0       0       0       0       0       0       0
 19216 ;;Total ram usage:       12 bytes
 19217 ;; Hardware stack levels used:    1
 19218 ;; Hardware stack levels required when called:    5
 19219 ;; This function calls:
 19220 ;;		_sdc_disk_write
 19221 ;; This function is called by:
 19222 ;;		_sync_window
 19223 ;;		_sync_fs
 19224 ;;		_dir_clear
 19225 ;;		_f_write
 19226 ;; This function uses a non-reentrant model
 19227 ;;
 19228                           
 19229                           	psect	text61
 19230  005060                     __ptext61:
 19231                           	opt stack 0
 19232  005060                     _disk_write:
 19233                           	opt stack 21
 19234                           
 19235                           ; BSR set to: 0
 19236                           ;incstack = 0
 19237                           ;disk_write@pdrv stored from wreg
 19238  005060  0100               	movlb	0	; () banked
 19239  005062  6F6F               	movwf	disk_write@pdrv& (0+255),b
 19240                           
 19241                           ;diskio.c: 208: DRESULT res;
 19242                           ;diskio.c: 209: int result;
 19243                           ;diskio.c: 211: switch (pdrv) {
 19244  005064  D032               	goto	l865
 19245  005066                     
 19246                           ;diskio.c: 214: result = sdc_disk_write(buff, sector, count);
 19247  005066  C068  F023         	movff	disk_write@buff,sdc_disk_write@p_buff
 19248  00506A  C069  F024         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 19249  00506E  C06A  F025         	movff	disk_write@sector,sdc_disk_write@sector
 19250  005072  C06B  F026         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 19251  005076  C06C  F027         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 19252  00507A  C06D  F028         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 19253  00507E  C06E  F029         	movff	disk_write@count,sdc_disk_write@count
 19254  005082  ECEE  F022         	call	_sdc_disk_write	;wreg free
 19255  005086  6E2C               	movwf	??_disk_write& (0+255),c
 19256  005088  502C               	movf	??_disk_write,w,c
 19257  00508A  0100               	movlb	0	; () banked
 19258  00508C  6F70               	movwf	disk_write@result& (0+255),b
 19259  00508E  6B71               	clrf	(disk_write@result+1)& (0+255),b
 19260                           
 19261                           ; BSR set to: 0
 19262                           ;diskio.c: 216: res = result;
 19263  005090  C070  F072         	movff	disk_write@result,disk_write@res
 19264                           
 19265                           ; BSR set to: 0
 19266                           ;diskio.c: 219: return res;
 19267  005094  5172               	movf	disk_write@res& (0+255),w,b
 19268                           
 19269                           ; BSR set to: 0
 19270  005096  0012               	return	
 19271  005098                     
 19272                           ; BSR set to: 0
 19273                           ;diskio.c: 224: result = sdc_disk_write(buff, sector, count);
 19274                           
 19275                           ; BSR set to: 0
 19276  005098  C068  F023         	movff	disk_write@buff,sdc_disk_write@p_buff
 19277  00509C  C069  F024         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 19278  0050A0  C06A  F025         	movff	disk_write@sector,sdc_disk_write@sector
 19279  0050A4  C06B  F026         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 19280  0050A8  C06C  F027         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 19281  0050AC  C06D  F028         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 19282  0050B0  C06E  F029         	movff	disk_write@count,sdc_disk_write@count
 19283  0050B4  ECEE  F022         	call	_sdc_disk_write	;wreg free
 19284  0050B8  6E2C               	movwf	??_disk_write& (0+255),c
 19285  0050BA  502C               	movf	??_disk_write,w,c
 19286  0050BC  0100               	movlb	0	; () banked
 19287  0050BE  6F70               	movwf	disk_write@result& (0+255),b
 19288  0050C0  6B71               	clrf	(disk_write@result+1)& (0+255),b
 19289                           
 19290                           ; BSR set to: 0
 19291                           ;diskio.c: 228: return res;
 19292  0050C2  5172               	movf	disk_write@res& (0+255),w,b
 19293                           
 19294                           ; BSR set to: 0
 19295  0050C4  0012               	return	
 19296  0050C6                     
 19297                           ; BSR set to: 0
 19298                           ;diskio.c: 237: return res;
 19299                           
 19300                           ; BSR set to: 0
 19301  0050C6  5172               	movf	disk_write@res& (0+255),w,b
 19302                           
 19303                           ; BSR set to: 0
 19304  0050C8  0012               	return	
 19305  0050CA                     l865:
 19306                           
 19307                           ; BSR set to: 0
 19308  0050CA  0100               	movlb	0	; () banked
 19309  0050CC  516F               	movf	disk_write@pdrv& (0+255),w,b
 19310                           
 19311                           ; Switch size 1, requested type "space"
 19312                           ; Number of cases is 3, Range of values is 0 to 2
 19313                           ; switch strategies available:
 19314                           ; Name         Instructions Cycles
 19315                           ; simple_byte           10     6 (average)
 19316                           ;	Chosen strategy is simple_byte
 19317  0050CE  0A00               	xorlw	0	; case 0
 19318  0050D0  B4D8               	btfsc	status,2,c
 19319  0050D2  D7C9               	goto	l866
 19320  0050D4  0A01               	xorlw	1	; case 1
 19321  0050D6  B4D8               	btfsc	status,2,c
 19322  0050D8  D7DF               	goto	l868
 19323  0050DA  0A03               	xorlw	3	; case 2
 19324  0050DC  B4D8               	btfsc	status,2,c
 19325  0050DE  D7F3               	goto	l869
 19326                           
 19327                           ; BSR set to: 0
 19328                           ;diskio.c: 240: return RES_PARERR;
 19329                           
 19330                           ; BSR set to: 0
 19331  0050E0  0E04               	movlw	4
 19332  0050E2  0012               	return	
 19333  0050E4                     __end_of_disk_write:
 19334                           	opt stack 0
 19335                           tosu	equ	0xFFF
 19336                           tosh	equ	0xFFE
 19337                           tosl	equ	0xFFD
 19338                           pclath	equ	0xFFA
 19339                           tblptru	equ	0xFF8
 19340                           tblptrh	equ	0xFF7
 19341                           tblptrl	equ	0xFF6
 19342                           tablat	equ	0xFF5
 19343                           prodh	equ	0xFF4
 19344                           prodl	equ	0xFF3
 19345                           intcon	equ	0xFF2
 19346                           intcon2	equ	0xFF1
 19347                           intcon3	equ	0xFF0
 19348                           indf0	equ	0xFEF
 19349                           postinc0	equ	0xFEE
 19350                           fsr0h	equ	0xFEA
 19351                           fsr0l	equ	0xFE9
 19352                           wreg	equ	0xFE8
 19353                           indf1	equ	0xFE7
 19354                           postinc1	equ	0xFE6
 19355                           postdec1	equ	0xFE5
 19356                           fsr1h	equ	0xFE2
 19357                           fsr1l	equ	0xFE1
 19358                           indf2	equ	0xFDF
 19359                           postinc2	equ	0xFDE
 19360                           postdec2	equ	0xFDD
 19361                           plusw2	equ	0xFDB
 19362                           fsr2h	equ	0xFDA
 19363                           fsr2l	equ	0xFD9
 19364                           status	equ	0xFD8
 19365                           
 19366 ;; *************** function _sdc_disk_write *****************
 19367 ;; Defined at:
 19368 ;;		line 613 in file "bibliotecas/diskio.c"
 19369 ;; Parameters:    Size  Location     Type
 19370 ;;  p_buff          2   34[COMRAM] PTR const unsigned char 
 19371 ;;		 -> fs.win(512), pb.buf(64), pb.buf(64), pb.buf(64), 
 19372 ;;		 -> f_printf@pb(70), f_puts@pb(70), f_putc@pb(70), NULL(0), 
 19373 ;;		 -> STR_13(6), fs(559), 
 19374 ;;  sector          4   36[COMRAM] unsigned long 
 19375 ;;  count           1   40[COMRAM] unsigned char 
 19376 ;; Auto vars:     Size  Location     Type
 19377 ;;  j               2    5[BANK0 ] int 
 19378 ;;  count1          2    2[BANK0 ] int 
 19379 ;;  i               2    0[BANK0 ] int 
 19380 ;;  buff            1    7[BANK0 ] unsigned char 
 19381 ;;  res             1    4[BANK0 ] enum E25
 19382 ;; Return value:  Size  Location     Type
 19383 ;;                  1    wreg      enum E25
 19384 ;; Registers used:
 19385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19386 ;; Tracked objects:
 19387 ;;		On entry : 0/0
 19388 ;;		On exit  : 0/0
 19389 ;;		Unchanged: 0/0
 19390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19391 ;;      Params:         7       0       0       0       0       0       0       0       0
 19392 ;;      Locals:         0       8       0       0       0       0       0       0       0
 19393 ;;      Temps:          2       0       0       0       0       0       0       0       0
 19394 ;;      Totals:         9       8       0       0       0       0       0       0       0
 19395 ;;Total ram usage:       17 bytes
 19396 ;; Hardware stack levels used:    1
 19397 ;; Hardware stack levels required when called:    4
 19398 ;; This function calls:
 19399 ;;		_command
 19400 ;;		_dummy_clocks
 19401 ;;		_escreve_dado_SPI
 19402 ;;		_proceed
 19403 ;;		_response
 19404 ;; This function is called by:
 19405 ;;		_disk_write
 19406 ;; This function uses a non-reentrant model
 19407 ;;
 19408                           
 19409                           	psect	text62
 19410  0045DC                     __ptext62:
 19411                           	opt stack 0
 19412  0045DC                     _sdc_disk_write:
 19413                           	opt stack 21
 19414                           
 19415                           ;diskio.c: 615: DRESULT res;
 19416                           ;diskio.c: 616: unsigned char buff;
 19417                           ;diskio.c: 617: int i=0,j, count1 = 0;
 19418                           
 19419                           ; BSR set to: 0
 19420                           ;incstack = 0
 19421  0045DC  0E00               	movlw	0
 19422  0045DE  0100               	movlb	0	; () banked
 19423  0045E0  6F61               	movwf	(sdc_disk_write@i+1)& (0+255),b
 19424  0045E2  0E00               	movlw	0
 19425  0045E4  6F60               	movwf	sdc_disk_write@i& (0+255),b
 19426  0045E6  0E00               	movlw	0
 19427  0045E8  6F63               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 19428  0045EA  0E00               	movlw	0
 19429  0045EC  6F62               	movwf	sdc_disk_write@count1& (0+255),b
 19430                           
 19431                           ; BSR set to: 0
 19432                           ;diskio.c: 621: LATBbits.LATB7 = 0;
 19433  0045EE  9E8A               	bcf	3978,7,c	;volatile
 19434                           
 19435                           ; BSR set to: 0
 19436                           ;diskio.c: 622: LATBbits.LATB4 = 0;
 19437  0045F0  988A               	bcf	3978,4,c	;volatile
 19438                           
 19439                           ; BSR set to: 0
 19440                           ;diskio.c: 623: dummy_clocks(10);
 19441  0045F2  0E0A               	movlw	10
 19442  0045F4  EC2E  F02C         	call	_dummy_clocks
 19443                           
 19444                           ;diskio.c: 624: command(0X58, 0X00000000, 0X00);
 19445  0045F8  0E00               	movlw	0
 19446  0045FA  6E1C               	movwf	command@arg,c
 19447  0045FC  0E00               	movlw	0
 19448  0045FE  6E1D               	movwf	command@arg+1,c
 19449  004600  0E00               	movlw	0
 19450  004602  6E1E               	movwf	command@arg+2,c
 19451  004604  0E00               	movlw	0
 19452  004606  6E1F               	movwf	command@arg+3,c
 19453  004608  0E00               	movlw	0
 19454  00460A  6E20               	movwf	command@CRC,c
 19455  00460C  0E58               	movlw	88
 19456  00460E  EC87  F02C         	call	_command
 19457                           
 19458                           ;diskio.c: 625: proceed();
 19459  004612  ECAC  F02D         	call	_proceed	;wreg free
 19460  004616                     
 19461                           ;diskio.c: 627: buff = response();
 19462  004616  ECA6  F02D         	call	_response	;wreg free
 19463  00461A  0100               	movlb	0	; () banked
 19464  00461C  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 19465                           
 19466                           ;diskio.c: 628: }while(buff!=0X00);
 19467  00461E  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 19468  004620  A4D8               	btfss	status,2,c
 19469  004622  D7F9               	goto	l951
 19470                           
 19471                           ; BSR set to: 0
 19472                           ;diskio.c: 631: LATBbits.LATB4 = 0;
 19473  004624  988A               	bcf	3978,4,c	;volatile
 19474                           
 19475                           ;diskio.c: 632: LATBbits.LATB7 = 0;
 19476  004626  9E8A               	bcf	3978,7,c	;volatile
 19477                           
 19478                           ; BSR set to: 0
 19479                           ;diskio.c: 633: dummy_clocks(1);
 19480  004628  0E01               	movlw	1
 19481  00462A  EC2E  F02C         	call	_dummy_clocks
 19482                           
 19483                           ;diskio.c: 634: escreve_dado_SPI(0XFE);
 19484  00462E  0EFE               	movlw	254
 19485  004630  EC69  F02B         	call	_escreve_dado_SPI
 19486                           
 19487                           ;diskio.c: 637: for(j=0;j<512;j++)
 19488  004634  0E00               	movlw	0
 19489  004636  0100               	movlb	0	; () banked
 19490  004638  6F66               	movwf	(sdc_disk_write@j+1)& (0+255),b
 19491  00463A  0E00               	movlw	0
 19492  00463C  6F65               	movwf	sdc_disk_write@j& (0+255),b
 19493  00463E                     l12880:
 19494                           
 19495                           ; BSR set to: 0
 19496  00463E  BF66               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 19497  004640  D004               	goto	l953
 19498  004642  0E02               	movlw	2
 19499  004644  5D66               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 19500  004646  B0D8               	btfsc	status,0,c
 19501  004648  D018               	goto	u16460
 19502  00464A                     l953:
 19503                           
 19504                           ; BSR set to: 0
 19505                           ;diskio.c: 638: {
 19506                           ;diskio.c: 639: escreve_dado_SPI(*p_buff);
 19507                           
 19508                           ; BSR set to: 0
 19509  00464A  C023  FFF6         	movff	sdc_disk_write@p_buff,tblptrl
 19510  00464E  C024  FFF7         	movff	sdc_disk_write@p_buff+1,tblptrh
 19511  004652  6AF8               	clrf	tblptru,c
 19512  004654  0E07               	movlw	(high __ramtop+-1)
 19513  004656  64F7               	cpfsgt	tblptrh,c
 19514  004658  D003               	bra	u16457
 19515  00465A  0008               	tblrd		*
 19516  00465C  50F5               	movf	tablat,w,c
 19517  00465E  D005               	bra	u16450
 19518  004660                     u16457:
 19519  004660  CFF6 FFE9          	movff	tblptrl,fsr0l
 19520  004664  CFF7 FFEA          	movff	tblptrh,fsr0h
 19521  004668  50EF               	movf	indf0,w,c
 19522  00466A                     u16450:
 19523  00466A  EC69  F02B         	call	_escreve_dado_SPI
 19524                           
 19525                           ;diskio.c: 640: p_buff++;
 19526  00466E  4A23               	infsnz	sdc_disk_write@p_buff,f,c
 19527  004670  2A24               	incf	sdc_disk_write@p_buff+1,f,c
 19528  004672  0100               	movlb	0	; () banked
 19529  004674  4B65               	infsnz	sdc_disk_write@j& (0+255),f,b
 19530  004676  2B66               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 19531  004678  D7E2               	goto	l12880
 19532  00467A                     u16460:
 19533                           
 19534                           ; BSR set to: 0
 19535                           ;diskio.c: 642: }
 19536                           ;diskio.c: 645: escreve_dado_SPI(0XFF);
 19537                           
 19538                           ; BSR set to: 0
 19539  00467A  0EFF               	movlw	255
 19540  00467C  EC69  F02B         	call	_escreve_dado_SPI
 19541                           
 19542                           ;diskio.c: 646: escreve_dado_SPI(0XFF);
 19543  004680  0EFF               	movlw	255
 19544  004682  EC69  F02B         	call	_escreve_dado_SPI
 19545                           
 19546                           ;diskio.c: 649: _delay((unsigned long)((1000)*(48000000/4000.0)));
 19547  004686  0E3D               	movlw	61
 19548  004688  6E2B               	movwf	(??_sdc_disk_write+1)& (0+255),c
 19549  00468A  0EE1               	movlw	225
 19550  00468C  6E2A               	movwf	??_sdc_disk_write& (0+255),c
 19551  00468E  0E40               	movlw	64
 19552  004690                     u23467:
 19553  004690  2EE8               	decfsz	wreg,f,c
 19554  004692  D7FE               	bra	u23467
 19555  004694  2E2A               	decfsz	??_sdc_disk_write& (0+255),f,c
 19556  004696  D7FC               	bra	u23467
 19557  004698  2E2B               	decfsz	(??_sdc_disk_write+1)& (0+255),f,c
 19558  00469A  D7FA               	bra	u23467
 19559                           
 19560                           ;diskio.c: 652: LATBbits.LATB4 = 0;
 19561  00469C  988A               	bcf	3978,4,c	;volatile
 19562                           
 19563                           ;diskio.c: 653: LATBbits.LATB7 = 0;
 19564  00469E  9E8A               	bcf	3978,7,c	;volatile
 19565                           
 19566                           ;diskio.c: 654: dummy_clocks(10);
 19567  0046A0  0E0A               	movlw	10
 19568  0046A2  EC2E  F02C         	call	_dummy_clocks
 19569                           
 19570                           ;diskio.c: 655: command(0X4D,0X00000000,0XFF);
 19571  0046A6  0E00               	movlw	0
 19572  0046A8  6E1C               	movwf	command@arg,c
 19573  0046AA  0E00               	movlw	0
 19574  0046AC  6E1D               	movwf	command@arg+1,c
 19575  0046AE  0E00               	movlw	0
 19576  0046B0  6E1E               	movwf	command@arg+2,c
 19577  0046B2  0E00               	movlw	0
 19578  0046B4  6E1F               	movwf	command@arg+3,c
 19579  0046B6  0EFF               	movlw	255
 19580  0046B8  6E20               	movwf	command@CRC,c
 19581  0046BA  0E4D               	movlw	77
 19582  0046BC  EC87  F02C         	call	_command
 19583                           
 19584                           ;diskio.c: 656: proceed();
 19585  0046C0  ECAC  F02D         	call	_proceed	;wreg free
 19586  0046C4                     
 19587                           ;diskio.c: 658: buff = response();
 19588  0046C4  ECA6  F02D         	call	_response	;wreg free
 19589  0046C8  0100               	movlb	0	; () banked
 19590  0046CA  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 19591                           
 19592                           ; BSR set to: 0
 19593                           ;diskio.c: 664: }while(buff!=0X00 );
 19594  0046CC  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 19595  0046CE  A4D8               	btfss	status,2,c
 19596  0046D0  D7F9               	goto	l955
 19597                           
 19598                           ; BSR set to: 0
 19599                           ;diskio.c: 669: return res;
 19600                           
 19601                           ; BSR set to: 0
 19602  0046D2  5164               	movf	sdc_disk_write@res& (0+255),w,b
 19603  0046D4  0012               	return	
 19604  0046D6                     __end_of_sdc_disk_write:
 19605                           	opt stack 0
 19606                           tosu	equ	0xFFF
 19607                           tosh	equ	0xFFE
 19608                           tosl	equ	0xFFD
 19609                           pclath	equ	0xFFA
 19610                           tblptru	equ	0xFF8
 19611                           tblptrh	equ	0xFF7
 19612                           tblptrl	equ	0xFF6
 19613                           tablat	equ	0xFF5
 19614                           prodh	equ	0xFF4
 19615                           prodl	equ	0xFF3
 19616                           intcon	equ	0xFF2
 19617                           intcon2	equ	0xFF1
 19618                           intcon3	equ	0xFF0
 19619                           indf0	equ	0xFEF
 19620                           postinc0	equ	0xFEE
 19621                           fsr0h	equ	0xFEA
 19622                           fsr0l	equ	0xFE9
 19623                           wreg	equ	0xFE8
 19624                           indf1	equ	0xFE7
 19625                           postinc1	equ	0xFE6
 19626                           postdec1	equ	0xFE5
 19627                           fsr1h	equ	0xFE2
 19628                           fsr1l	equ	0xFE1
 19629                           indf2	equ	0xFDF
 19630                           postinc2	equ	0xFDE
 19631                           postdec2	equ	0xFDD
 19632                           plusw2	equ	0xFDB
 19633                           fsr2h	equ	0xFDA
 19634                           fsr2l	equ	0xFD9
 19635                           status	equ	0xFD8
 19636                           
 19637 ;; *************** function _disk_read *****************
 19638 ;; Defined at:
 19639 ;;		line 148 in file "bibliotecas/diskio.c"
 19640 ;; Parameters:    Size  Location     Type
 19641 ;;  pdrv            1    wreg     unsigned char 
 19642 ;;  buff            2   35[BANK0 ] PTR unsigned char 
 19643 ;;		 -> f_gets@s(4), NULL(0), fs(559), 
 19644 ;;  sector          4   37[BANK0 ] unsigned long 
 19645 ;;  count           1   41[BANK0 ] unsigned char 
 19646 ;; Auto vars:     Size  Location     Type
 19647 ;;  pdrv            1   44[BANK0 ] unsigned char 
 19648 ;;  result          2   45[BANK0 ] int 
 19649 ;;  res             1   47[BANK0 ] enum E25
 19650 ;; Return value:  Size  Location     Type
 19651 ;;                  1    wreg      enum E25
 19652 ;; Registers used:
 19653 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19654 ;; Tracked objects:
 19655 ;;		On entry : 0/0
 19656 ;;		On exit  : 0/0
 19657 ;;		Unchanged: 0/0
 19658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19659 ;;      Params:         0       7       0       0       0       0       0       0       0
 19660 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19661 ;;      Temps:          0       2       0       0       0       0       0       0       0
 19662 ;;      Totals:         0      13       0       0       0       0       0       0       0
 19663 ;;Total ram usage:       13 bytes
 19664 ;; Hardware stack levels used:    1
 19665 ;; Hardware stack levels required when called:    7
 19666 ;; This function calls:
 19667 ;;		_escreve_inteiro_lcd
 19668 ;;		_posicao_cursor_lcd
 19669 ;;		_sdc_disk_read
 19670 ;; This function is called by:
 19671 ;;		_move_window
 19672 ;;		_f_read
 19673 ;; This function uses a non-reentrant model
 19674 ;;
 19675                           
 19676                           	psect	text63
 19677  00486C                     __ptext63:
 19678                           	opt stack 0
 19679  00486C                     _disk_read:
 19680                           	opt stack 19
 19681                           
 19682                           ; BSR set to: 0
 19683                           ;incstack = 0
 19684                           ;disk_read@pdrv stored from wreg
 19685  00486C  0100               	movlb	0	; () banked
 19686  00486E  6F8C               	movwf	disk_read@pdrv& (0+255),b
 19687                           
 19688                           ;diskio.c: 155: DRESULT res;
 19689                           ;diskio.c: 156: int result;
 19690                           ;diskio.c: 158: switch (pdrv) {
 19691  004870  D051               	goto	l857
 19692  004872                     
 19693                           ;diskio.c: 162: result = sdc_disk_read(buff, sector, count);
 19694  004872  C083  F06F         	movff	disk_read@buff,sdc_disk_read@p_buff
 19695  004876  C084  F070         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 19696  00487A  C085  F071         	movff	disk_read@sector,sdc_disk_read@sector
 19697  00487E  C086  F072         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 19698  004882  C087  F073         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 19699  004886  C088  F074         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 19700  00488A  C089  F075         	movff	disk_read@count,sdc_disk_read@count
 19701  00488E  ECA5  F01F         	call	_sdc_disk_read	;wreg free
 19702  004892  0100               	movlb	0	; () banked
 19703  004894  6F8A               	movwf	??_disk_read& (0+255),b
 19704  004896  518A               	movf	??_disk_read& (0+255),w,b
 19705  004898  6F8D               	movwf	disk_read@result& (0+255),b
 19706  00489A  6B8E               	clrf	(disk_read@result+1)& (0+255),b
 19707                           
 19708                           ; BSR set to: 0
 19709                           ;diskio.c: 166: res = result;
 19710  00489C  C08D  F08F         	movff	disk_read@result,disk_read@res
 19711                           
 19712                           ; BSR set to: 0
 19713                           ;diskio.c: 168: return res;
 19714  0048A0  518F               	movf	disk_read@res& (0+255),w,b
 19715                           
 19716                           ; BSR set to: 0
 19717  0048A2  0012               	return	
 19718  0048A4                     
 19719                           ; BSR set to: 0
 19720                           ;diskio.c: 173: result = sdc_disk_read(buff, sector, count);
 19721                           
 19722                           ; BSR set to: 0
 19723  0048A4  C083  F06F         	movff	disk_read@buff,sdc_disk_read@p_buff
 19724  0048A8  C084  F070         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 19725  0048AC  C085  F071         	movff	disk_read@sector,sdc_disk_read@sector
 19726  0048B0  C086  F072         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 19727  0048B4  C087  F073         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 19728  0048B8  C088  F074         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 19729  0048BC  C089  F075         	movff	disk_read@count,sdc_disk_read@count
 19730  0048C0  ECA5  F01F         	call	_sdc_disk_read	;wreg free
 19731  0048C4  0100               	movlb	0	; () banked
 19732  0048C6  6F8A               	movwf	??_disk_read& (0+255),b
 19733  0048C8  518A               	movf	??_disk_read& (0+255),w,b
 19734  0048CA  6F8D               	movwf	disk_read@result& (0+255),b
 19735  0048CC  6B8E               	clrf	(disk_read@result+1)& (0+255),b
 19736                           
 19737                           ; BSR set to: 0
 19738                           ;diskio.c: 174: posicao_cursor_lcd(1,0);
 19739  0048CE  0E00               	movlw	0
 19740  0048D0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 19741  0048D2  0E01               	movlw	1
 19742  0048D4  EC64  F029         	call	_posicao_cursor_lcd
 19743                           
 19744                           ;diskio.c: 175: escreve_inteiro_lcd(result);
 19745  0048D8  C08D  F066         	movff	disk_read@result,escreve_inteiro_lcd@valor
 19746  0048DC  C08E  F067         	movff	disk_read@result+1,escreve_inteiro_lcd@valor+1
 19747  0048E0  EC0F  F02C         	call	_escreve_inteiro_lcd	;wreg free
 19748                           
 19749                           ;diskio.c: 176: _delay((unsigned long)((2000)*(48000000/4000.0)));
 19750  0048E4  0E7A               	movlw	122
 19751  0048E6  0100               	movlb	0	; () banked
 19752  0048E8  6F8B               	movwf	(??_disk_read+1)& (0+255),b
 19753  0048EA  0EC1               	movlw	193
 19754  0048EC  6F8A               	movwf	??_disk_read& (0+255),b
 19755  0048EE  0E81               	movlw	129
 19756  0048F0                     u23477:
 19757  0048F0  2EE8               	decfsz	wreg,f,c
 19758  0048F2  D7FE               	bra	u23477
 19759  0048F4  2F8A               	decfsz	??_disk_read& (0+255),f,b
 19760  0048F6  D7FC               	bra	u23477
 19761  0048F8  2F8B               	decfsz	(??_disk_read+1)& (0+255),f,b
 19762  0048FA  D7FA               	bra	u23477
 19763  0048FC  D000               	nop2	
 19764                           
 19765                           ;diskio.c: 177: res = result;
 19766  0048FE  C08D  F08F         	movff	disk_read@result,disk_read@res
 19767                           
 19768                           ;diskio.c: 179: buff = data_buff;
 19769  004902  C145  F083         	movff	_data_buff,disk_read@buff
 19770  004906  C146  F084         	movff	_data_buff+1,disk_read@buff+1
 19771                           
 19772                           ;diskio.c: 180: return res;
 19773  00490A  0100               	movlb	0	; () banked
 19774  00490C  518F               	movf	disk_read@res& (0+255),w,b
 19775                           
 19776                           ; BSR set to: 0
 19777  00490E  0012               	return	
 19778  004910                     
 19779                           ; BSR set to: 0
 19780                           ;diskio.c: 189: return res;
 19781                           
 19782                           ; BSR set to: 0
 19783  004910  518F               	movf	disk_read@res& (0+255),w,b
 19784                           
 19785                           ; BSR set to: 0
 19786  004912  0012               	return	
 19787  004914                     l857:
 19788                           
 19789                           ; BSR set to: 0
 19790  004914  0100               	movlb	0	; () banked
 19791  004916  518C               	movf	disk_read@pdrv& (0+255),w,b
 19792                           
 19793                           ; Switch size 1, requested type "space"
 19794                           ; Number of cases is 3, Range of values is 0 to 2
 19795                           ; switch strategies available:
 19796                           ; Name         Instructions Cycles
 19797                           ; simple_byte           10     6 (average)
 19798                           ;	Chosen strategy is simple_byte
 19799  004918  0A00               	xorlw	0	; case 0
 19800  00491A  B4D8               	btfsc	status,2,c
 19801  00491C  D7AA               	goto	l858
 19802  00491E  0A01               	xorlw	1	; case 1
 19803  004920  B4D8               	btfsc	status,2,c
 19804  004922  D7C0               	goto	l860
 19805  004924  0A03               	xorlw	3	; case 2
 19806  004926  B4D8               	btfsc	status,2,c
 19807  004928  D7F3               	goto	l861
 19808                           
 19809                           ; BSR set to: 0
 19810                           ;diskio.c: 192: return RES_PARERR;
 19811                           
 19812                           ; BSR set to: 0
 19813  00492A  0E04               	movlw	4
 19814  00492C  0012               	return	
 19815  00492E                     __end_of_disk_read:
 19816                           	opt stack 0
 19817                           tosu	equ	0xFFF
 19818                           tosh	equ	0xFFE
 19819                           tosl	equ	0xFFD
 19820                           pclath	equ	0xFFA
 19821                           tblptru	equ	0xFF8
 19822                           tblptrh	equ	0xFF7
 19823                           tblptrl	equ	0xFF6
 19824                           tablat	equ	0xFF5
 19825                           prodh	equ	0xFF4
 19826                           prodl	equ	0xFF3
 19827                           intcon	equ	0xFF2
 19828                           intcon2	equ	0xFF1
 19829                           intcon3	equ	0xFF0
 19830                           indf0	equ	0xFEF
 19831                           postinc0	equ	0xFEE
 19832                           fsr0h	equ	0xFEA
 19833                           fsr0l	equ	0xFE9
 19834                           wreg	equ	0xFE8
 19835                           indf1	equ	0xFE7
 19836                           postinc1	equ	0xFE6
 19837                           postdec1	equ	0xFE5
 19838                           fsr1h	equ	0xFE2
 19839                           fsr1l	equ	0xFE1
 19840                           indf2	equ	0xFDF
 19841                           postinc2	equ	0xFDE
 19842                           postdec2	equ	0xFDD
 19843                           plusw2	equ	0xFDB
 19844                           fsr2h	equ	0xFDA
 19845                           fsr2l	equ	0xFD9
 19846                           status	equ	0xFD8
 19847                           
 19848 ;; *************** function _sdc_disk_read *****************
 19849 ;; Defined at:
 19850 ;;		line 529 in file "bibliotecas/diskio.c"
 19851 ;; Parameters:    Size  Location     Type
 19852 ;;  p_buff          2   15[BANK0 ] PTR unsigned char 
 19853 ;;		 -> f_gets@s(4), NULL(0), fs(559), 
 19854 ;;  sector          4   17[BANK0 ] unsigned long 
 19855 ;;  count           1   21[BANK0 ] unsigned char 
 19856 ;; Auto vars:     Size  Location     Type
 19857 ;;  start_add       4   27[BANK0 ] unsigned long 
 19858 ;;  length          2   32[BANK0 ] int 
 19859 ;;  count1          2    0        int 
 19860 ;;  i               2    0        int 
 19861 ;;  buff            1   34[BANK0 ] unsigned char 
 19862 ;;  res             1   31[BANK0 ] enum E25
 19863 ;;  ptr             1   26[BANK0 ] unsigned char 
 19864 ;; Return value:  Size  Location     Type
 19865 ;;                  1    wreg      enum E25
 19866 ;; Registers used:
 19867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19868 ;; Tracked objects:
 19869 ;;		On entry : 0/0
 19870 ;;		On exit  : 0/0
 19871 ;;		Unchanged: 0/0
 19872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19873 ;;      Params:         0       7       0       0       0       0       0       0       0
 19874 ;;      Locals:         0       9       0       0       0       0       0       0       0
 19875 ;;      Temps:          0       4       0       0       0       0       0       0       0
 19876 ;;      Totals:         0      20       0       0       0       0       0       0       0
 19877 ;;Total ram usage:       20 bytes
 19878 ;; Hardware stack levels used:    1
 19879 ;; Hardware stack levels required when called:    6
 19880 ;; This function calls:
 19881 ;;		_command
 19882 ;;		_dummy_clocks
 19883 ;;		_escreve_inteiro_lcd
 19884 ;;		_posicao_cursor_lcd
 19885 ;;		_proceed
 19886 ;;		_response
 19887 ;; This function is called by:
 19888 ;;		_disk_read
 19889 ;; This function uses a non-reentrant model
 19890 ;;
 19891                           
 19892                           	psect	text64
 19893  003F4A                     __ptext64:
 19894                           	opt stack 0
 19895  003F4A                     _sdc_disk_read:
 19896                           	opt stack 19
 19897                           
 19898                           ;diskio.c: 536: DRESULT res;
 19899                           ;diskio.c: 537: unsigned char ptr=0X00, buff;
 19900                           
 19901                           ; BSR set to: 0
 19902                           ;incstack = 0
 19903  003F4A  0E00               	movlw	0
 19904  003F4C  0100               	movlb	0	; () banked
 19905  003F4E  6F7A               	movwf	sdc_disk_read@ptr& (0+255),b
 19906                           
 19907                           ; BSR set to: 0
 19908                           ;diskio.c: 538: unsigned long int start_add;
 19909                           ;diskio.c: 540: int length,i, count1;
 19910                           ;diskio.c: 542: start_add = sector*512;
 19911  003F50  C071  F076         	movff	sdc_disk_read@sector,??_sdc_disk_read
 19912  003F54  C072  F077         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 19913  003F58  C073  F078         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 19914  003F5C  C074  F079         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 19915  003F60  0E09               	movlw	9
 19916  003F62                     u16485:
 19917  003F62  90D8               	bcf	status,0,c
 19918  003F64  3776               	rlcf	??_sdc_disk_read& (0+255),f,b
 19919  003F66  3777               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 19920  003F68  3778               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 19921  003F6A  3779               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 19922  003F6C  2EE8               	decfsz	wreg,f,c
 19923  003F6E  D7F9               	goto	u16485
 19924  003F70  C076  F07B         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 19925  003F74  C077  F07C         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 19926  003F78  C078  F07D         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 19927  003F7C  C079  F07E         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 19928                           
 19929                           ; BSR set to: 0
 19930                           ;diskio.c: 552: LATBbits.LATB7 = 0;
 19931  003F80  9E8A               	bcf	3978,7,c	;volatile
 19932                           
 19933                           ; BSR set to: 0
 19934                           ;diskio.c: 553: LATBbits.LATB4 = 0;
 19935  003F82  988A               	bcf	3978,4,c	;volatile
 19936                           
 19937                           ; BSR set to: 0
 19938                           ;diskio.c: 554: dummy_clocks(10);
 19939  003F84  0E0A               	movlw	10
 19940  003F86  EC2E  F02C         	call	_dummy_clocks
 19941                           
 19942                           ;diskio.c: 555: command(0X52,start_add,0X00);
 19943  003F8A  C07B  F01C         	movff	sdc_disk_read@start_add,command@arg
 19944  003F8E  C07C  F01D         	movff	sdc_disk_read@start_add+1,command@arg+1
 19945  003F92  C07D  F01E         	movff	sdc_disk_read@start_add+2,command@arg+2
 19946  003F96  C07E  F01F         	movff	sdc_disk_read@start_add+3,command@arg+3
 19947  003F9A  0E00               	movlw	0
 19948  003F9C  6E20               	movwf	command@CRC,c
 19949  003F9E  0E52               	movlw	82
 19950  003FA0  EC87  F02C         	call	_command
 19951                           
 19952                           ;diskio.c: 556: proceed();
 19953  003FA4  ECAC  F02D         	call	_proceed	;wreg free
 19954  003FA8                     
 19955                           ;diskio.c: 558: buff = response();
 19956  003FA8  ECA6  F02D         	call	_response	;wreg free
 19957  003FAC  0100               	movlb	0	; () banked
 19958  003FAE  6F82               	movwf	sdc_disk_read@buff& (0+255),b
 19959                           
 19960                           ; BSR set to: 0
 19961                           ;diskio.c: 559: }while(buff!=0X00);
 19962  003FB0  5182               	movf	sdc_disk_read@buff& (0+255),w,b
 19963  003FB2  A4D8               	btfss	status,2,c
 19964  003FB4  D7F9               	goto	l938
 19965                           
 19966                           ; BSR set to: 0
 19967                           ;diskio.c: 560: proceed();
 19968                           
 19969                           ; BSR set to: 0
 19970  003FB6  ECAC  F02D         	call	_proceed	;wreg free
 19971                           
 19972                           ;diskio.c: 563: while(buff!=0xFE)
 19973  003FBA  D00F               	goto	l940
 19974  003FBC                     
 19975                           ;diskio.c: 564: {
 19976                           ;diskio.c: 565: buff = response();
 19977  003FBC  ECA6  F02D         	call	_response	;wreg free
 19978  003FC0  0100               	movlb	0	; () banked
 19979  003FC2  6F82               	movwf	sdc_disk_read@buff& (0+255),b
 19980                           
 19981                           ;diskio.c: 566: posicao_cursor_lcd(1,0);
 19982  003FC4  0E00               	movlw	0
 19983  003FC6  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 19984  003FC8  0E01               	movlw	1
 19985  003FCA  EC64  F029         	call	_posicao_cursor_lcd
 19986                           
 19987                           ;diskio.c: 567: escreve_inteiro_lcd(buff);
 19988  003FCE  C082  F066         	movff	sdc_disk_read@buff,escreve_inteiro_lcd@valor
 19989  003FD2  0100               	movlb	0	; () banked
 19990  003FD4  6B67               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
 19991  003FD6  EC0F  F02C         	call	_escreve_inteiro_lcd	;wreg free
 19992  003FDA                     l940:
 19993  003FDA  0EFE               	movlw	254
 19994  003FDC  0100               	movlb	0	; () banked
 19995  003FDE  1982               	xorwf	sdc_disk_read@buff& (0+255),w,b
 19996  003FE0  A4D8               	btfss	status,2,c
 19997  003FE2  D7EC               	goto	l941
 19998                           
 19999                           ; BSR set to: 0
 20000                           ;diskio.c: 568: }
 20001                           ;diskio.c: 571: length = 0;
 20002                           
 20003                           ; BSR set to: 0
 20004  003FE4  0E00               	movlw	0
 20005  003FE6  6F81               	movwf	(sdc_disk_read@length+1)& (0+255),b
 20006  003FE8  0E00               	movlw	0
 20007  003FEA  6F80               	movwf	sdc_disk_read@length& (0+255),b
 20008                           
 20009                           ;diskio.c: 572: while ( length < 512 )
 20010  003FEC  D00C               	goto	l943
 20011  003FEE                     
 20012                           ; BSR set to: 0
 20013                           ;diskio.c: 573: {
 20014                           ;diskio.c: 574: p_buff[length] = response();
 20015                           
 20016                           ; BSR set to: 0
 20017  003FEE  5180               	movf	sdc_disk_read@length& (0+255),w,b
 20018  003FF0  256F               	addwf	sdc_disk_read@p_buff& (0+255),w,b
 20019  003FF2  6ED9               	movwf	fsr2l,c
 20020  003FF4  5181               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 20021  003FF6  2170               	addwfc	(sdc_disk_read@p_buff+1)& (0+255),w,b
 20022  003FF8  6EDA               	movwf	fsr2h,c
 20023  003FFA  ECA6  F02D         	call	_response	;wreg free
 20024  003FFE  6EDF               	movwf	indf2,c
 20025                           
 20026                           ;diskio.c: 577: length++;
 20027  004000  0100               	movlb	0	; () banked
 20028  004002  4B80               	infsnz	sdc_disk_read@length& (0+255),f,b
 20029  004004  2B81               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 20030  004006                     l943:
 20031                           
 20032                           ; BSR set to: 0
 20033                           
 20034                           ; BSR set to: 0
 20035  004006  BF81               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 20036  004008  D7F2               	goto	l944
 20037  00400A  0E02               	movlw	2
 20038  00400C  5D81               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 20039  00400E  A0D8               	btfss	status,0,c
 20040  004010  D7EE               	goto	l944
 20041                           
 20042                           ; BSR set to: 0
 20043                           ;diskio.c: 578: }
 20044                           ;diskio.c: 581: _delay((unsigned long)((1000)*(48000000/4000.0)));
 20045                           
 20046                           ; BSR set to: 0
 20047  004012  0E3D               	movlw	61
 20048  004014  0100               	movlb	0	; () banked
 20049  004016  6F77               	movwf	(??_sdc_disk_read+1)& (0+255),b
 20050  004018  0EE1               	movlw	225
 20051  00401A  6F76               	movwf	??_sdc_disk_read& (0+255),b
 20052  00401C  0E3F               	movlw	63
 20053  00401E                     u23487:
 20054  00401E  2EE8               	decfsz	wreg,f,c
 20055  004020  D7FE               	bra	u23487
 20056  004022  2F76               	decfsz	??_sdc_disk_read& (0+255),f,b
 20057  004024  D7FC               	bra	u23487
 20058  004026  2F77               	decfsz	(??_sdc_disk_read+1)& (0+255),f,b
 20059  004028  D7FA               	bra	u23487
 20060  00402A  D000               	nop2	
 20061                           
 20062                           ;diskio.c: 582: LATBbits.LATB7 = 0;
 20063  00402C  9E8A               	bcf	3978,7,c	;volatile
 20064                           
 20065                           ;diskio.c: 583: length = 0;
 20066  00402E  0E00               	movlw	0
 20067  004030  0100               	movlb	0	; () banked
 20068  004032  6F81               	movwf	(sdc_disk_read@length+1)& (0+255),b
 20069  004034  0E00               	movlw	0
 20070  004036  6F80               	movwf	sdc_disk_read@length& (0+255),b
 20071                           
 20072                           ; BSR set to: 0
 20073                           ;diskio.c: 584: LATBbits.LATB4 = 0;
 20074  004038  988A               	bcf	3978,4,c	;volatile
 20075                           
 20076                           ; BSR set to: 0
 20077                           ;diskio.c: 585: dummy_clocks(10);
 20078  00403A  0E0A               	movlw	10
 20079  00403C  EC2E  F02C         	call	_dummy_clocks
 20080                           
 20081                           ;diskio.c: 586: command(0X4C,0X00000000,0X00);
 20082  004040  0E00               	movlw	0
 20083  004042  6E1C               	movwf	command@arg,c
 20084  004044  0E00               	movlw	0
 20085  004046  6E1D               	movwf	command@arg+1,c
 20086  004048  0E00               	movlw	0
 20087  00404A  6E1E               	movwf	command@arg+2,c
 20088  00404C  0E00               	movlw	0
 20089  00404E  6E1F               	movwf	command@arg+3,c
 20090  004050  0E00               	movlw	0
 20091  004052  6E20               	movwf	command@CRC,c
 20092  004054  0E4C               	movlw	76
 20093  004056  EC87  F02C         	call	_command
 20094                           
 20095                           ;diskio.c: 587: proceed();
 20096  00405A  ECAC  F02D         	call	_proceed	;wreg free
 20097  00405E                     
 20098                           ;diskio.c: 589: buff = response();
 20099  00405E  ECA6  F02D         	call	_response	;wreg free
 20100  004062  0100               	movlb	0	; () banked
 20101  004064  6F82               	movwf	sdc_disk_read@buff& (0+255),b
 20102                           
 20103                           ; BSR set to: 0
 20104                           ;diskio.c: 590: }while(buff!=0xFF);
 20105  004066  2982               	incf	sdc_disk_read@buff& (0+255),w,b
 20106  004068  A4D8               	btfss	status,2,c
 20107  00406A  D7F9               	goto	l946
 20108                           
 20109                           ; BSR set to: 0
 20110                           ;diskio.c: 592: length = 0;
 20111                           
 20112                           ; BSR set to: 0
 20113  00406C  0E00               	movlw	0
 20114  00406E  6F81               	movwf	(sdc_disk_read@length+1)& (0+255),b
 20115  004070  0E00               	movlw	0
 20116  004072  6F80               	movwf	sdc_disk_read@length& (0+255),b
 20117                           
 20118                           ;diskio.c: 601: return res;
 20119  004074  517F               	movf	sdc_disk_read@res& (0+255),w,b
 20120  004076  0012               	return	
 20121  004078                     __end_of_sdc_disk_read:
 20122                           	opt stack 0
 20123                           tosu	equ	0xFFF
 20124                           tosh	equ	0xFFE
 20125                           tosl	equ	0xFFD
 20126                           pclath	equ	0xFFA
 20127                           tblptru	equ	0xFF8
 20128                           tblptrh	equ	0xFF7
 20129                           tblptrl	equ	0xFF6
 20130                           tablat	equ	0xFF5
 20131                           prodh	equ	0xFF4
 20132                           prodl	equ	0xFF3
 20133                           intcon	equ	0xFF2
 20134                           intcon2	equ	0xFF1
 20135                           intcon3	equ	0xFF0
 20136                           indf0	equ	0xFEF
 20137                           postinc0	equ	0xFEE
 20138                           fsr0h	equ	0xFEA
 20139                           fsr0l	equ	0xFE9
 20140                           wreg	equ	0xFE8
 20141                           indf1	equ	0xFE7
 20142                           postinc1	equ	0xFE6
 20143                           postdec1	equ	0xFE5
 20144                           fsr1h	equ	0xFE2
 20145                           fsr1l	equ	0xFE1
 20146                           indf2	equ	0xFDF
 20147                           postinc2	equ	0xFDE
 20148                           postdec2	equ	0xFDD
 20149                           plusw2	equ	0xFDB
 20150                           fsr2h	equ	0xFDA
 20151                           fsr2l	equ	0xFD9
 20152                           status	equ	0xFD8
 20153                           
 20154 ;; *************** function _response *****************
 20155 ;; Defined at:
 20156 ;;		line 60 in file "bibliotecas/SDCard.c"
 20157 ;; Parameters:    Size  Location     Type
 20158 ;;		None
 20159 ;; Auto vars:     Size  Location     Type
 20160 ;;  buff            1   28[COMRAM] unsigned char 
 20161 ;; Return value:  Size  Location     Type
 20162 ;;                  1    wreg      unsigned char 
 20163 ;; Registers used:
 20164 ;;		wreg, status,2, status,0, cstack
 20165 ;; Tracked objects:
 20166 ;;		On entry : 0/0
 20167 ;;		On exit  : 0/0
 20168 ;;		Unchanged: 0/0
 20169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20170 ;;      Params:         0       0       0       0       0       0       0       0       0
 20171 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20172 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20173 ;;      Totals:         1       0       0       0       0       0       0       0       0
 20174 ;;Total ram usage:        1 bytes
 20175 ;; Hardware stack levels used:    1
 20176 ;; Hardware stack levels required when called:    3
 20177 ;; This function calls:
 20178 ;;		_recebe_dado_SPI
 20179 ;; This function is called by:
 20180 ;;		_sdc_reset
 20181 ;;		_sdc_disk_initialize
 20182 ;;		_sdc_disk_read
 20183 ;;		_sdc_disk_write
 20184 ;; This function uses a non-reentrant model
 20185 ;;
 20186                           
 20187                           	psect	text65
 20188  005B4C                     __ptext65:
 20189                           	opt stack 0
 20190  005B4C                     _response:
 20191                           	opt stack 21
 20192                           
 20193                           ;SDCard.c: 62: unsigned char buff;
 20194                           ;SDCard.c: 63: LATBbits.LATB4 = 0;
 20195                           
 20196                           ; BSR set to: 0
 20197                           ;incstack = 0
 20198  005B4C  988A               	bcf	3978,4,c	;volatile
 20199                           
 20200                           ;SDCard.c: 64: buff= recebe_dado_SPI();
 20201  005B4E  EC6E  F02A         	call	_recebe_dado_SPI	;wreg free
 20202  005B52  6E1D               	movwf	response@buff,c
 20203                           
 20204                           ;SDCard.c: 65: return buff;
 20205  005B54  501D               	movf	response@buff,w,c
 20206  005B56  0012               	return	
 20207  005B58                     __end_of_response:
 20208                           	opt stack 0
 20209                           tosu	equ	0xFFF
 20210                           tosh	equ	0xFFE
 20211                           tosl	equ	0xFFD
 20212                           pclath	equ	0xFFA
 20213                           tblptru	equ	0xFF8
 20214                           tblptrh	equ	0xFF7
 20215                           tblptrl	equ	0xFF6
 20216                           tablat	equ	0xFF5
 20217                           prodh	equ	0xFF4
 20218                           prodl	equ	0xFF3
 20219                           intcon	equ	0xFF2
 20220                           intcon2	equ	0xFF1
 20221                           intcon3	equ	0xFF0
 20222                           indf0	equ	0xFEF
 20223                           postinc0	equ	0xFEE
 20224                           fsr0h	equ	0xFEA
 20225                           fsr0l	equ	0xFE9
 20226                           wreg	equ	0xFE8
 20227                           indf1	equ	0xFE7
 20228                           postinc1	equ	0xFE6
 20229                           postdec1	equ	0xFE5
 20230                           fsr1h	equ	0xFE2
 20231                           fsr1l	equ	0xFE1
 20232                           indf2	equ	0xFDF
 20233                           postinc2	equ	0xFDE
 20234                           postdec2	equ	0xFDD
 20235                           plusw2	equ	0xFDB
 20236                           fsr2h	equ	0xFDA
 20237                           fsr2l	equ	0xFD9
 20238                           status	equ	0xFD8
 20239                           
 20240 ;; *************** function _recebe_dado_SPI *****************
 20241 ;; Defined at:
 20242 ;;		line 143 in file "bibliotecas/SHRC.c"
 20243 ;; Parameters:    Size  Location     Type
 20244 ;;		None
 20245 ;; Auto vars:     Size  Location     Type
 20246 ;;  contador        1   27[COMRAM] unsigned char 
 20247 ;; Return value:  Size  Location     Type
 20248 ;;                  1    wreg      unsigned char 
 20249 ;; Registers used:
 20250 ;;		wreg, status,2, status,0
 20251 ;; Tracked objects:
 20252 ;;		On entry : 0/0
 20253 ;;		On exit  : 0/0
 20254 ;;		Unchanged: 0/0
 20255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20256 ;;      Params:         0       0       0       0       0       0       0       0       0
 20257 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20258 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20259 ;;      Totals:         3       0       0       0       0       0       0       0       0
 20260 ;;Total ram usage:        3 bytes
 20261 ;; Hardware stack levels used:    1
 20262 ;; Hardware stack levels required when called:    2
 20263 ;; This function calls:
 20264 ;;		Nothing
 20265 ;; This function is called by:
 20266 ;;		_response
 20267 ;; This function uses a non-reentrant model
 20268 ;;
 20269                           
 20270                           	psect	text66
 20271  0054DC                     __ptext66:
 20272                           	opt stack 0
 20273  0054DC                     _recebe_dado_SPI:
 20274                           	opt stack 21
 20275                           
 20276                           ;SHRC.c: 145: dado = 0;
 20277                           
 20278                           ;incstack = 0
 20279  0054DC  0E00               	movlw	0
 20280  0054DE  6E3A               	movwf	_dado,c
 20281                           
 20282                           ;SHRC.c: 146: unsigned char contador=0;
 20283  0054E0  0E00               	movlw	0
 20284  0054E2  6E1C               	movwf	recebe_dado_SPI@contador,c
 20285                           
 20286                           ;SHRC.c: 148: (INTCONbits.GIE = 0);
 20287  0054E4  9EF2               	bcf	intcon,7,c	;volatile
 20288                           
 20289                           ;SHRC.c: 151: while(contador<=7)
 20290  0054E6  D022               	goto	l350
 20291  0054E8                     
 20292                           ;SHRC.c: 152: {
 20293                           ;SHRC.c: 153: dado |= (PORTBbits.RB5 << (7-contador));
 20294  0054E8  501C               	movf	recebe_dado_SPI@contador,w,c
 20295  0054EA  0800               	sublw	0
 20296  0054EC  6E1A               	movwf	??_recebe_dado_SPI& (0+255),c
 20297  0054EE  0E07               	movlw	7
 20298  0054F0  261A               	addwf	??_recebe_dado_SPI,f,c
 20299  0054F2  AA81               	btfss	3969,5,c	;volatile
 20300  0054F4  D003               	goto	u16130
 20301  0054F6  6A1B               	clrf	(??_recebe_dado_SPI+1)& (0+255),c
 20302  0054F8  2A1B               	incf	(??_recebe_dado_SPI+1)& (0+255),f,c
 20303  0054FA  D001               	goto	u16138
 20304  0054FC                     u16130:
 20305  0054FC  6A1B               	clrf	(??_recebe_dado_SPI+1)& (0+255),c
 20306  0054FE                     u16138:
 20307  0054FE  2A1A               	incf	??_recebe_dado_SPI,f,c
 20308  005500  D002               	goto	u16144
 20309  005502                     u16145:
 20310  005502  90D8               	bcf	status,0,c
 20311  005504  361B               	rlcf	??_recebe_dado_SPI+1,f,c
 20312  005506                     u16144:
 20313  005506  2E1A               	decfsz	??_recebe_dado_SPI,f,c
 20314  005508  D7FC               	goto	u16145
 20315  00550A  501B               	movf	??_recebe_dado_SPI+1,w,c
 20316  00550C  123A               	iorwf	_dado,f,c
 20317                           
 20318                           ;SHRC.c: 155: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 20319  00550E  0E0A               	movlw	10
 20320  005510                     u23497:
 20321  005510  2EE8               	decfsz	wreg,f,c
 20322  005512  D7FE               	bra	u23497
 20323                           
 20324                           ;SHRC.c: 156: LATBbits.LATB6 = 1;
 20325  005514  8C8A               	bsf	3978,6,c	;volatile
 20326                           
 20327                           ;SHRC.c: 157: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 20328  005516  0E0A               	movlw	10
 20329  005518                     u23507:
 20330  005518  2EE8               	decfsz	wreg,f,c
 20331  00551A  D7FE               	bra	u23507
 20332                           
 20333                           ;SHRC.c: 158: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 20334  00551C  0E0A               	movlw	10
 20335  00551E                     u23517:
 20336  00551E  2EE8               	decfsz	wreg,f,c
 20337  005520  D7FE               	bra	u23517
 20338                           
 20339                           ;SHRC.c: 159: LATBbits.LATB6 = 0;
 20340  005522  9C8A               	bcf	3978,6,c	;volatile
 20341                           
 20342                           ;SHRC.c: 160: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 20343  005524  0E0A               	movlw	10
 20344  005526                     u23527:
 20345  005526  2EE8               	decfsz	wreg,f,c
 20346  005528  D7FE               	bra	u23527
 20347                           
 20348                           ;SHRC.c: 161: contador++;
 20349  00552A  2A1C               	incf	recebe_dado_SPI@contador,f,c
 20350  00552C                     l350:
 20351  00552C  0E07               	movlw	7
 20352  00552E  641C               	cpfsgt	recebe_dado_SPI@contador,c
 20353  005530  D7DB               	goto	l351
 20354                           
 20355                           ;SHRC.c: 162: }
 20356                           ;SHRC.c: 163: (INTCONbits.GIE = 1);
 20357  005532  8EF2               	bsf	intcon,7,c	;volatile
 20358                           
 20359                           ;SHRC.c: 164: return dado;
 20360  005534  503A               	movf	_dado,w,c
 20361  005536  0012               	return	
 20362  005538                     __end_of_recebe_dado_SPI:
 20363                           	opt stack 0
 20364                           tosu	equ	0xFFF
 20365                           tosh	equ	0xFFE
 20366                           tosl	equ	0xFFD
 20367                           pclath	equ	0xFFA
 20368                           tblptru	equ	0xFF8
 20369                           tblptrh	equ	0xFF7
 20370                           tblptrl	equ	0xFF6
 20371                           tablat	equ	0xFF5
 20372                           prodh	equ	0xFF4
 20373                           prodl	equ	0xFF3
 20374                           intcon	equ	0xFF2
 20375                           intcon2	equ	0xFF1
 20376                           intcon3	equ	0xFF0
 20377                           indf0	equ	0xFEF
 20378                           postinc0	equ	0xFEE
 20379                           fsr0h	equ	0xFEA
 20380                           fsr0l	equ	0xFE9
 20381                           wreg	equ	0xFE8
 20382                           indf1	equ	0xFE7
 20383                           postinc1	equ	0xFE6
 20384                           postdec1	equ	0xFE5
 20385                           fsr1h	equ	0xFE2
 20386                           fsr1l	equ	0xFE1
 20387                           indf2	equ	0xFDF
 20388                           postinc2	equ	0xFDE
 20389                           postdec2	equ	0xFDD
 20390                           plusw2	equ	0xFDB
 20391                           fsr2h	equ	0xFDA
 20392                           fsr2l	equ	0xFD9
 20393                           status	equ	0xFD8
 20394                           
 20395 ;; *************** function _proceed *****************
 20396 ;; Defined at:
 20397 ;;		line 97 in file "bibliotecas/SDCard.c"
 20398 ;; Parameters:    Size  Location     Type
 20399 ;;		None
 20400 ;; Auto vars:     Size  Location     Type
 20401 ;;		None
 20402 ;; Return value:  Size  Location     Type
 20403 ;;                  1    wreg      void 
 20404 ;; Registers used:
 20405 ;;		wreg, status,2, status,0, cstack
 20406 ;; Tracked objects:
 20407 ;;		On entry : 0/0
 20408 ;;		On exit  : 0/0
 20409 ;;		Unchanged: 0/0
 20410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20411 ;;      Params:         0       0       0       0       0       0       0       0       0
 20412 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20413 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20414 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20415 ;;Total ram usage:        0 bytes
 20416 ;; Hardware stack levels used:    1
 20417 ;; Hardware stack levels required when called:    3
 20418 ;; This function calls:
 20419 ;;		_escreve_dado_SPI
 20420 ;; This function is called by:
 20421 ;;		_SDCard
 20422 ;;		_sdc_reset
 20423 ;;		_sdc_disk_initialize
 20424 ;;		_sdc_disk_read
 20425 ;;		_sdc_disk_write
 20426 ;; This function uses a non-reentrant model
 20427 ;;
 20428                           
 20429                           	psect	text67
 20430  005B58                     __ptext67:
 20431                           	opt stack 0
 20432  005B58                     _proceed:
 20433                           	opt stack 25
 20434                           
 20435                           ;SDCard.c: 99: LATBbits.LATB4 = 0;
 20436                           
 20437                           ;incstack = 0
 20438  005B58  988A               	bcf	3978,4,c	;volatile
 20439                           
 20440                           ;SDCard.c: 100: escreve_dado_SPI(0xFF);
 20441  005B5A  0EFF               	movlw	255
 20442  005B5C  EC69  F02B         	call	_escreve_dado_SPI
 20443                           
 20444                           ;SDCard.c: 101: LATBbits.LATB4 = 1;
 20445  005B60  888A               	bsf	3978,4,c	;volatile
 20446  005B62  0012               	return		;funcret
 20447  005B64                     __end_of_proceed:
 20448                           	opt stack 0
 20449                           tosu	equ	0xFFF
 20450                           tosh	equ	0xFFE
 20451                           tosl	equ	0xFFD
 20452                           pclath	equ	0xFFA
 20453                           tblptru	equ	0xFF8
 20454                           tblptrh	equ	0xFF7
 20455                           tblptrl	equ	0xFF6
 20456                           tablat	equ	0xFF5
 20457                           prodh	equ	0xFF4
 20458                           prodl	equ	0xFF3
 20459                           intcon	equ	0xFF2
 20460                           intcon2	equ	0xFF1
 20461                           intcon3	equ	0xFF0
 20462                           indf0	equ	0xFEF
 20463                           postinc0	equ	0xFEE
 20464                           fsr0h	equ	0xFEA
 20465                           fsr0l	equ	0xFE9
 20466                           wreg	equ	0xFE8
 20467                           indf1	equ	0xFE7
 20468                           postinc1	equ	0xFE6
 20469                           postdec1	equ	0xFE5
 20470                           fsr1h	equ	0xFE2
 20471                           fsr1l	equ	0xFE1
 20472                           indf2	equ	0xFDF
 20473                           postinc2	equ	0xFDE
 20474                           postdec2	equ	0xFDD
 20475                           plusw2	equ	0xFDB
 20476                           fsr2h	equ	0xFDA
 20477                           fsr2l	equ	0xFD9
 20478                           status	equ	0xFD8
 20479                           
 20480 ;; *************** function _posicao_cursor_lcd *****************
 20481 ;; Defined at:
 20482 ;;		line 271 in file "bibliotecas/display_lcd.c"
 20483 ;; Parameters:    Size  Location     Type
 20484 ;;  linha           1    wreg     unsigned char 
 20485 ;;  coluna          1   28[COMRAM] unsigned char 
 20486 ;; Auto vars:     Size  Location     Type
 20487 ;;  linha           1   29[COMRAM] unsigned char 
 20488 ;;  endereco        1   30[COMRAM] unsigned char 
 20489 ;; Return value:  Size  Location     Type
 20490 ;;                  1    wreg      void 
 20491 ;; Registers used:
 20492 ;;		wreg, status,2, status,0, cstack
 20493 ;; Tracked objects:
 20494 ;;		On entry : 0/0
 20495 ;;		On exit  : 0/0
 20496 ;;		Unchanged: 0/0
 20497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20498 ;;      Params:         1       0       0       0       0       0       0       0       0
 20499 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20500 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20501 ;;      Totals:         3       0       0       0       0       0       0       0       0
 20502 ;;Total ram usage:        3 bytes
 20503 ;; Hardware stack levels used:    1
 20504 ;; Hardware stack levels required when called:    4
 20505 ;; This function calls:
 20506 ;;		_endereco_cursor_lcd
 20507 ;; This function is called by:
 20508 ;;		_mensagem_inicial
 20509 ;;		_SDCard
 20510 ;;		_disk_read
 20511 ;;		_sdc_reset
 20512 ;;		_sdc_disk_initialize
 20513 ;;		_sdc_disk_read
 20514 ;;		_gps
 20515 ;;		_inicializa_SPI
 20516 ;;		_ReadSPI_
 20517 ;;		_leitura_chave
 20518 ;; This function uses a non-reentrant model
 20519 ;;
 20520                           
 20521                           	psect	text68
 20522  0052C8                     __ptext68:
 20523                           	opt stack 0
 20524  0052C8                     _posicao_cursor_lcd:
 20525                           	opt stack 25
 20526                           
 20527                           ;incstack = 0
 20528                           ;posicao_cursor_lcd@linha stored from wreg
 20529  0052C8  6E1E               	movwf	posicao_cursor_lcd@linha,c
 20530                           
 20531                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 20532  0052CA  0E00               	movlw	0
 20533  0052CC  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20534                           
 20535                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 20536  0052CE  0E11               	movlw	17
 20537  0052D0  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 20538  0052D2  D02F               	goto	l520
 20539  0052D4  D01E               	goto	l521
 20540  0052D6                     l522:
 20541                           
 20542                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 20543  0052D6  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 20544                           
 20545                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 20546  0052DA  501F               	movf	posicao_cursor_lcd@endereco,w,c
 20547  0052DC  ECD2  F029         	call	_endereco_cursor_lcd
 20548                           
 20549                           ;display_lcd.c: 284: break;
 20550  0052E0  D026               	goto	l523
 20551  0052E2                     
 20552                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 20553  0052E2  501D               	movf	posicao_cursor_lcd@coluna,w,c
 20554  0052E4  0F40               	addlw	64
 20555  0052E6  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20556                           
 20557                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 20558  0052E8  501F               	movf	posicao_cursor_lcd@endereco,w,c
 20559  0052EA  ECD2  F029         	call	_endereco_cursor_lcd
 20560                           
 20561                           ;display_lcd.c: 289: break;
 20562  0052EE  D01F               	goto	l523
 20563  0052F0                     
 20564                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 20565  0052F0  501D               	movf	posicao_cursor_lcd@coluna,w,c
 20566  0052F2  0F14               	addlw	20
 20567  0052F4  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20568                           
 20569                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 20570  0052F6  501F               	movf	posicao_cursor_lcd@endereco,w,c
 20571  0052F8  ECD2  F029         	call	_endereco_cursor_lcd
 20572                           
 20573                           ;display_lcd.c: 294: break;
 20574  0052FC  D018               	goto	l523
 20575  0052FE                     
 20576                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 20577  0052FE  501D               	movf	posicao_cursor_lcd@coluna,w,c
 20578  005300  0F54               	addlw	84
 20579  005302  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20580                           
 20581                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 20582  005304  501F               	movf	posicao_cursor_lcd@endereco,w,c
 20583  005306  ECD2  F029         	call	_endereco_cursor_lcd
 20584                           
 20585                           ;display_lcd.c: 299: break;
 20586  00530A  D011               	goto	l523
 20587  00530C                     
 20588                           ;display_lcd.c: 302: endereco = 0x00U;
 20589  00530C  0E00               	movlw	0
 20590  00530E  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20591                           
 20592                           ;display_lcd.c: 304: }
 20593                           
 20594                           ;display_lcd.c: 303: break;
 20595  005310  D00E               	goto	l523
 20596  005312                     l521:
 20597  005312  501E               	movf	posicao_cursor_lcd@linha,w,c
 20598                           
 20599                           ; Switch size 1, requested type "space"
 20600                           ; Number of cases is 4, Range of values is 1 to 4
 20601                           ; switch strategies available:
 20602                           ; Name         Instructions Cycles
 20603                           ; simple_byte           13     7 (average)
 20604                           ;	Chosen strategy is simple_byte
 20605  005314  0A01               	xorlw	1	; case 1
 20606  005316  B4D8               	btfsc	status,2,c
 20607  005318  D7DE               	goto	l522
 20608  00531A  0A03               	xorlw	3	; case 2
 20609  00531C  B4D8               	btfsc	status,2,c
 20610  00531E  D7E1               	goto	l524
 20611  005320  0A01               	xorlw	1	; case 3
 20612  005322  B4D8               	btfsc	status,2,c
 20613  005324  D7E5               	goto	l525
 20614  005326  0A07               	xorlw	7	; case 4
 20615  005328  B4D8               	btfsc	status,2,c
 20616  00532A  D7E9               	goto	l526
 20617  00532C  D7EF               	goto	l527
 20618  00532E                     l523:
 20619                           
 20620                           ;display_lcd.c: 306: coluna++;
 20621  00532E  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 20622                           
 20623                           ;display_lcd.c: 307: }
 20624  005330  0012               	return	
 20625  005332                     l520:
 20626                           
 20627                           ;display_lcd.c: 308: else
 20628                           ;display_lcd.c: 309: {
 20629                           ;display_lcd.c: 310: endereco = 0x00U;
 20630  005332  0E00               	movlw	0
 20631  005334  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 20632  005336  0012               	return	
 20633  005338                     __end_of_posicao_cursor_lcd:
 20634                           	opt stack 0
 20635                           tosu	equ	0xFFF
 20636                           tosh	equ	0xFFE
 20637                           tosl	equ	0xFFD
 20638                           pclath	equ	0xFFA
 20639                           tblptru	equ	0xFF8
 20640                           tblptrh	equ	0xFF7
 20641                           tblptrl	equ	0xFF6
 20642                           tablat	equ	0xFF5
 20643                           prodh	equ	0xFF4
 20644                           prodl	equ	0xFF3
 20645                           intcon	equ	0xFF2
 20646                           intcon2	equ	0xFF1
 20647                           intcon3	equ	0xFF0
 20648                           indf0	equ	0xFEF
 20649                           postinc0	equ	0xFEE
 20650                           fsr0h	equ	0xFEA
 20651                           fsr0l	equ	0xFE9
 20652                           wreg	equ	0xFE8
 20653                           indf1	equ	0xFE7
 20654                           postinc1	equ	0xFE6
 20655                           postdec1	equ	0xFE5
 20656                           fsr1h	equ	0xFE2
 20657                           fsr1l	equ	0xFE1
 20658                           indf2	equ	0xFDF
 20659                           postinc2	equ	0xFDE
 20660                           postdec2	equ	0xFDD
 20661                           plusw2	equ	0xFDB
 20662                           fsr2h	equ	0xFDA
 20663                           fsr2l	equ	0xFD9
 20664                           status	equ	0xFD8
 20665                           
 20666 ;; *************** function _endereco_cursor_lcd *****************
 20667 ;; Defined at:
 20668 ;;		line 218 in file "bibliotecas/display_lcd.c"
 20669 ;; Parameters:    Size  Location     Type
 20670 ;;  endereco        1    wreg     unsigned char 
 20671 ;; Auto vars:     Size  Location     Type
 20672 ;;  endereco        1   27[COMRAM] unsigned char 
 20673 ;; Return value:  Size  Location     Type
 20674 ;;                  1    wreg      void 
 20675 ;; Registers used:
 20676 ;;		wreg, status,2, status,0, cstack
 20677 ;; Tracked objects:
 20678 ;;		On entry : 0/0
 20679 ;;		On exit  : 0/0
 20680 ;;		Unchanged: 0/0
 20681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20682 ;;      Params:         0       0       0       0       0       0       0       0       0
 20683 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20684 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20685 ;;      Totals:         1       0       0       0       0       0       0       0       0
 20686 ;;Total ram usage:        1 bytes
 20687 ;; Hardware stack levels used:    1
 20688 ;; Hardware stack levels required when called:    3
 20689 ;; This function calls:
 20690 ;;		_delay
 20691 ;; This function is called by:
 20692 ;;		_posicao_cursor_lcd
 20693 ;;		_cria_caractere_lcd
 20694 ;; This function uses a non-reentrant model
 20695 ;;
 20696                           
 20697                           	psect	text69
 20698  0053A4                     __ptext69:
 20699                           	opt stack 0
 20700  0053A4                     _endereco_cursor_lcd:
 20701                           	opt stack 25
 20702                           
 20703                           ;incstack = 0
 20704                           ;endereco_cursor_lcd@endereco stored from wreg
 20705  0053A4  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 20706                           
 20707                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 20708  0053A6  9483               	bcf	3971,2,c	;volatile
 20709                           
 20710                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 20711  0053A8  9283               	bcf	3971,1,c	;volatile
 20712                           
 20713                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 20714  0053AA  9083               	bcf	3971,0,c	;volatile
 20715                           
 20716                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 20717  0053AC  8E83               	bsf	3971,7,c	;volatile
 20718                           
 20719                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 20720  0053AE  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 20721  0053B0  D002               	goto	l503
 20722  0053B2  8883               	bsf	3971,4,c	;volatile
 20723  0053B4  D001               	goto	l504
 20724  0053B6                     l503:
 20725                           
 20726                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 20727  0053B6  9883               	bcf	3971,4,c	;volatile
 20728  0053B8                     l504:
 20729                           
 20730                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 20731  0053B8  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 20732  0053BA  D002               	goto	l505
 20733  0053BC  8A83               	bsf	3971,5,c	;volatile
 20734  0053BE  D001               	goto	l506
 20735  0053C0                     l505:
 20736                           
 20737                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 20738  0053C0  9A83               	bcf	3971,5,c	;volatile
 20739  0053C2                     l506:
 20740                           
 20741                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 20742  0053C2  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 20743  0053C4  D002               	goto	l507
 20744  0053C6  8C83               	bsf	3971,6,c	;volatile
 20745  0053C8  D001               	goto	l508
 20746  0053CA                     l507:
 20747                           
 20748                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 20749  0053CA  9C83               	bcf	3971,6,c	;volatile
 20750  0053CC                     l508:
 20751                           
 20752                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 20753  0053CC  8083               	bsf	3971,0,c	;volatile
 20754                           
 20755                           ;display_lcd.c: 236: delay();
 20756  0053CE  EC27  F02D         	call	_delay	;wreg free
 20757                           
 20758                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 20759  0053D2  9083               	bcf	3971,0,c	;volatile
 20760                           
 20761                           ;display_lcd.c: 238: delay();
 20762  0053D4  EC27  F02D         	call	_delay	;wreg free
 20763                           
 20764                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 20765  0053D8  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 20766  0053DA  D002               	goto	l509
 20767  0053DC  8883               	bsf	3971,4,c	;volatile
 20768  0053DE  D001               	goto	l510
 20769  0053E0                     l509:
 20770                           
 20771                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 20772  0053E0  9883               	bcf	3971,4,c	;volatile
 20773  0053E2                     l510:
 20774                           
 20775                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 20776  0053E2  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 20777  0053E4  D002               	goto	l511
 20778  0053E6  8A83               	bsf	3971,5,c	;volatile
 20779  0053E8  D001               	goto	l512
 20780  0053EA                     l511:
 20781                           
 20782                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 20783  0053EA  9A83               	bcf	3971,5,c	;volatile
 20784  0053EC                     l512:
 20785                           
 20786                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 20787  0053EC  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 20788  0053EE  D002               	goto	l513
 20789  0053F0  8C83               	bsf	3971,6,c	;volatile
 20790  0053F2  D001               	goto	l514
 20791  0053F4                     l513:
 20792                           
 20793                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 20794  0053F4  9C83               	bcf	3971,6,c	;volatile
 20795  0053F6                     l514:
 20796                           
 20797                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 20798  0053F6  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 20799  0053F8  D002               	goto	l515
 20800  0053FA  8E83               	bsf	3971,7,c	;volatile
 20801  0053FC  D001               	goto	l516
 20802  0053FE                     l515:
 20803                           
 20804                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 20805  0053FE  9E83               	bcf	3971,7,c	;volatile
 20806  005400                     l516:
 20807                           
 20808                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 20809  005400  8083               	bsf	3971,0,c	;volatile
 20810                           
 20811                           ;display_lcd.c: 252: delay();
 20812  005402  EC27  F02D         	call	_delay	;wreg free
 20813                           
 20814                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 20815  005406  9083               	bcf	3971,0,c	;volatile
 20816                           
 20817                           ;display_lcd.c: 254: delay();
 20818  005408  EC27  F02D         	call	_delay	;wreg free
 20819  00540C  0012               	return		;funcret
 20820  00540E                     __end_of_endereco_cursor_lcd:
 20821                           	opt stack 0
 20822                           tosu	equ	0xFFF
 20823                           tosh	equ	0xFFE
 20824                           tosl	equ	0xFFD
 20825                           pclath	equ	0xFFA
 20826                           tblptru	equ	0xFF8
 20827                           tblptrh	equ	0xFF7
 20828                           tblptrl	equ	0xFF6
 20829                           tablat	equ	0xFF5
 20830                           prodh	equ	0xFF4
 20831                           prodl	equ	0xFF3
 20832                           intcon	equ	0xFF2
 20833                           intcon2	equ	0xFF1
 20834                           intcon3	equ	0xFF0
 20835                           indf0	equ	0xFEF
 20836                           postinc0	equ	0xFEE
 20837                           fsr0h	equ	0xFEA
 20838                           fsr0l	equ	0xFE9
 20839                           wreg	equ	0xFE8
 20840                           indf1	equ	0xFE7
 20841                           postinc1	equ	0xFE6
 20842                           postdec1	equ	0xFE5
 20843                           fsr1h	equ	0xFE2
 20844                           fsr1l	equ	0xFE1
 20845                           indf2	equ	0xFDF
 20846                           postinc2	equ	0xFDE
 20847                           postdec2	equ	0xFDD
 20848                           plusw2	equ	0xFDB
 20849                           fsr2h	equ	0xFDA
 20850                           fsr2l	equ	0xFD9
 20851                           status	equ	0xFD8
 20852                           
 20853 ;; *************** function _escreve_inteiro_lcd *****************
 20854 ;; Defined at:
 20855 ;;		line 376 in file "bibliotecas/display_lcd.c"
 20856 ;; Parameters:    Size  Location     Type
 20857 ;;  valor           2    6[BANK0 ] int 
 20858 ;; Auto vars:     Size  Location     Type
 20859 ;;  texto           7    8[BANK0 ] unsigned char [7]
 20860 ;; Return value:  Size  Location     Type
 20861 ;;                  1    wreg      void 
 20862 ;; Registers used:
 20863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20864 ;; Tracked objects:
 20865 ;;		On entry : 0/0
 20866 ;;		On exit  : 0/0
 20867 ;;		Unchanged: 0/0
 20868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20869 ;;      Params:         0       2       0       0       0       0       0       0       0
 20870 ;;      Locals:         0       7       0       0       0       0       0       0       0
 20871 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20872 ;;      Totals:         0       9       0       0       0       0       0       0       0
 20873 ;;Total ram usage:        9 bytes
 20874 ;; Hardware stack levels used:    1
 20875 ;; Hardware stack levels required when called:    5
 20876 ;; This function calls:
 20877 ;;		_escreve_frase_ram_lcd
 20878 ;;		_itoa
 20879 ;; This function is called by:
 20880 ;;		_SDCard
 20881 ;;		_disk_read
 20882 ;;		_sdc_disk_read
 20883 ;;		_ReadSPI_
 20884 ;;		_escreve_float_lcd
 20885 ;; This function uses a non-reentrant model
 20886 ;;
 20887                           
 20888                           	psect	text70
 20889  00581E                     __ptext70:
 20890                           	opt stack 0
 20891  00581E                     _escreve_inteiro_lcd:
 20892                           	opt stack 19
 20893                           
 20894                           ;display_lcd.c: 378: char texto[7] = "000000";
 20895                           
 20896                           ;incstack = 0
 20897  00581E  EE21  F0EA         	lfsr	2,escreve_inteiro_lcd@F3966
 20898  005822  EE10  F068         	lfsr	1,escreve_inteiro_lcd@texto
 20899  005826  0E06               	movlw	6
 20900  005828                     u16421:
 20901  005828  CFDB FFE3          	movff	plusw2,plusw1
 20902  00582C  06E8               	decf	wreg,f,c
 20903  00582E  E2FC               	bc	u16421
 20904                           
 20905                           ;display_lcd.c: 379: itoa(texto,valor, 10);
 20906  005830  0E68               	movlw	low escreve_inteiro_lcd@texto
 20907  005832  0100               	movlb	0	; () banked
 20908  005834  6F60               	movwf	itoa@buf& (0+255),b
 20909  005836  0E00               	movlw	high escreve_inteiro_lcd@texto
 20910  005838  6F61               	movwf	(itoa@buf+1)& (0+255),b
 20911  00583A  C066  F062         	movff	escreve_inteiro_lcd@valor,itoa@val
 20912  00583E  C067  F063         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
 20913  005842  0E00               	movlw	0
 20914  005844  6F65               	movwf	(itoa@base+1)& (0+255),b
 20915  005846  0E0A               	movlw	10
 20916  005848  6F64               	movwf	itoa@base& (0+255),b
 20917  00584A  EC8C  F02B         	call	_itoa	;wreg free
 20918                           
 20919                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
 20920  00584E  0E68               	movlw	low escreve_inteiro_lcd@texto
 20921  005850  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 20922  005852  0E00               	movlw	high escreve_inteiro_lcd@texto
 20923  005854  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 20924  005856  EC1D  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 20925  00585A  0012               	return		;funcret
 20926  00585C                     __end_of_escreve_inteiro_lcd:
 20927                           	opt stack 0
 20928                           tosu	equ	0xFFF
 20929                           tosh	equ	0xFFE
 20930                           tosl	equ	0xFFD
 20931                           pclath	equ	0xFFA
 20932                           tblptru	equ	0xFF8
 20933                           tblptrh	equ	0xFF7
 20934                           tblptrl	equ	0xFF6
 20935                           tablat	equ	0xFF5
 20936                           prodh	equ	0xFF4
 20937                           prodl	equ	0xFF3
 20938                           intcon	equ	0xFF2
 20939                           intcon2	equ	0xFF1
 20940                           intcon3	equ	0xFF0
 20941                           indf0	equ	0xFEF
 20942                           postinc0	equ	0xFEE
 20943                           fsr0h	equ	0xFEA
 20944                           fsr0l	equ	0xFE9
 20945                           wreg	equ	0xFE8
 20946                           indf1	equ	0xFE7
 20947                           postinc1	equ	0xFE6
 20948                           postdec1	equ	0xFE5
 20949                           plusw1	equ	0xFE3
 20950                           fsr1h	equ	0xFE2
 20951                           fsr1l	equ	0xFE1
 20952                           indf2	equ	0xFDF
 20953                           postinc2	equ	0xFDE
 20954                           postdec2	equ	0xFDD
 20955                           plusw2	equ	0xFDB
 20956                           fsr2h	equ	0xFDA
 20957                           fsr2l	equ	0xFD9
 20958                           status	equ	0xFD8
 20959                           
 20960 ;; *************** function _itoa *****************
 20961 ;; Defined at:
 20962 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 20963 ;; Parameters:    Size  Location     Type
 20964 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 20965 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 20966 ;;  val             2    2[BANK0 ] int 
 20967 ;;  base            2    4[BANK0 ] int 
 20968 ;; Auto vars:     Size  Location     Type
 20969 ;;  cp              2   41[COMRAM] PTR unsigned char 
 20970 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 20971 ;; Return value:  Size  Location     Type
 20972 ;;                  2    0[BANK0 ] PTR unsigned char 
 20973 ;; Registers used:
 20974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20975 ;; Tracked objects:
 20976 ;;		On entry : 0/0
 20977 ;;		On exit  : 0/0
 20978 ;;		Unchanged: 0/0
 20979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20980 ;;      Params:         0       6       0       0       0       0       0       0       0
 20981 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20982 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20983 ;;      Totals:         2       6       0       0       0       0       0       0       0
 20984 ;;Total ram usage:        8 bytes
 20985 ;; Hardware stack levels used:    1
 20986 ;; Hardware stack levels required when called:    4
 20987 ;; This function calls:
 20988 ;;		_utoa
 20989 ;; This function is called by:
 20990 ;;		_escreve_inteiro_lcd
 20991 ;;		_escreve_inteiro_uart
 20992 ;; This function uses a non-reentrant model
 20993 ;;
 20994                           
 20995                           	psect	text71
 20996  005718                     __ptext71:
 20997                           	opt stack 0
 20998  005718                     _itoa:
 20999                           	opt stack 19
 21000                           
 21001                           ;incstack = 0
 21002  005718  C060  F02A         	movff	itoa@buf,itoa@cp
 21003  00571C  C061  F02B         	movff	itoa@buf+1,itoa@cp+1
 21004  005720  0100               	movlb	0	; () banked
 21005  005722  AF63               	btfss	(itoa@val+1)& (0+255),7,b
 21006  005724  D00C               	goto	l2367
 21007                           
 21008                           ; BSR set to: 0
 21009  005726  C060  FFD9         	movff	itoa@buf,fsr2l
 21010  00572A  C061  FFDA         	movff	itoa@buf+1,fsr2h
 21011  00572E  0E2D               	movlw	45
 21012  005730  6EDF               	movwf	indf2,c
 21013                           
 21014                           ; BSR set to: 0
 21015  005732  4B60               	infsnz	itoa@buf& (0+255),f,b
 21016  005734  2B61               	incf	(itoa@buf+1)& (0+255),f,b
 21017                           
 21018                           ; BSR set to: 0
 21019  005736  6D62               	negf	itoa@val& (0+255),b
 21020  005738  1F63               	comf	(itoa@val+1)& (0+255),f,b
 21021  00573A  B0D8               	btfsc	status,0,c
 21022  00573C  2B63               	incf	(itoa@val+1)& (0+255),f,b
 21023  00573E                     l2367:
 21024                           
 21025                           ; BSR set to: 0
 21026                           
 21027                           ; BSR set to: 0
 21028  00573E  C060  F021         	movff	itoa@buf,utoa@buf
 21029  005742  C061  F022         	movff	itoa@buf+1,utoa@buf+1
 21030  005746  C062  F023         	movff	itoa@val,utoa@val
 21031  00574A  C063  F024         	movff	itoa@val+1,utoa@val+1
 21032  00574E  C064  F025         	movff	itoa@base,utoa@base
 21033  005752  C065  F026         	movff	itoa@base+1,utoa@base+1
 21034  005756  ECB0  F026         	call	_utoa	;wreg free
 21035  00575A  0012               	return	
 21036  00575C                     __end_of_itoa:
 21037                           	opt stack 0
 21038                           tosu	equ	0xFFF
 21039                           tosh	equ	0xFFE
 21040                           tosl	equ	0xFFD
 21041                           pclath	equ	0xFFA
 21042                           tblptru	equ	0xFF8
 21043                           tblptrh	equ	0xFF7
 21044                           tblptrl	equ	0xFF6
 21045                           tablat	equ	0xFF5
 21046                           prodh	equ	0xFF4
 21047                           prodl	equ	0xFF3
 21048                           intcon	equ	0xFF2
 21049                           intcon2	equ	0xFF1
 21050                           intcon3	equ	0xFF0
 21051                           indf0	equ	0xFEF
 21052                           postinc0	equ	0xFEE
 21053                           fsr0h	equ	0xFEA
 21054                           fsr0l	equ	0xFE9
 21055                           wreg	equ	0xFE8
 21056                           indf1	equ	0xFE7
 21057                           postinc1	equ	0xFE6
 21058                           postdec1	equ	0xFE5
 21059                           plusw1	equ	0xFE3
 21060                           fsr1h	equ	0xFE2
 21061                           fsr1l	equ	0xFE1
 21062                           indf2	equ	0xFDF
 21063                           postinc2	equ	0xFDE
 21064                           postdec2	equ	0xFDD
 21065                           plusw2	equ	0xFDB
 21066                           fsr2h	equ	0xFDA
 21067                           fsr2l	equ	0xFD9
 21068                           status	equ	0xFD8
 21069                           
 21070 ;; *************** function _utoa *****************
 21071 ;; Defined at:
 21072 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 21073 ;; Parameters:    Size  Location     Type
 21074 ;;  buf             2   32[COMRAM] PTR unsigned char 
 21075 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 21076 ;;  val             2   34[COMRAM] unsigned int 
 21077 ;;  base            2   36[COMRAM] int 
 21078 ;; Auto vars:     Size  Location     Type
 21079 ;;  v               2   38[COMRAM] unsigned int 
 21080 ;;  c               1   40[COMRAM] unsigned char 
 21081 ;; Return value:  Size  Location     Type
 21082 ;;                  2   32[COMRAM] PTR unsigned char 
 21083 ;; Registers used:
 21084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21085 ;; Tracked objects:
 21086 ;;		On entry : 0/0
 21087 ;;		On exit  : 0/0
 21088 ;;		Unchanged: 0/0
 21089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21090 ;;      Params:         6       0       0       0       0       0       0       0       0
 21091 ;;      Locals:         3       0       0       0       0       0       0       0       0
 21092 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21093 ;;      Totals:         9       0       0       0       0       0       0       0       0
 21094 ;;Total ram usage:        9 bytes
 21095 ;; Hardware stack levels used:    1
 21096 ;; Hardware stack levels required when called:    3
 21097 ;; This function calls:
 21098 ;;		___lwdiv
 21099 ;;		___lwmod
 21100 ;; This function is called by:
 21101 ;;		_itoa
 21102 ;; This function uses a non-reentrant model
 21103 ;;
 21104                           
 21105                           	psect	text72
 21106  004D60                     __ptext72:
 21107                           	opt stack 0
 21108  004D60                     _utoa:
 21109                           	opt stack 19
 21110                           
 21111                           ;incstack = 0
 21112  004D60  C023  F027         	movff	utoa@val,utoa@v
 21113  004D64  C024  F028         	movff	utoa@val+1,utoa@v+1
 21114  004D68  C027  F01A         	movff	utoa@v,___lwdiv@dividend
 21115  004D6C  C028  F01B         	movff	utoa@v+1,___lwdiv@dividend+1
 21116  004D70  C025  F01C         	movff	utoa@base,___lwdiv@divisor
 21117  004D74  C026  F01D         	movff	utoa@base+1,___lwdiv@divisor+1
 21118  004D78  ECF4  F02A         	call	___lwdiv	;wreg free
 21119  004D7C  C01A  F027         	movff	?___lwdiv,utoa@v
 21120  004D80  C01B  F028         	movff	?___lwdiv+1,utoa@v+1
 21121  004D84  4A21               	infsnz	utoa@buf,f,c
 21122  004D86  2A22               	incf	utoa@buf+1,f,c
 21123  004D88  5027               	movf	utoa@v,w,c
 21124  004D8A  1028               	iorwf	utoa@v+1,w,c
 21125  004D8C  A4D8               	btfss	status,2,c
 21126  004D8E  D7EC               	goto	l2371
 21127  004D90  C021  FFD9         	movff	utoa@buf,fsr2l
 21128  004D94  C022  FFDA         	movff	utoa@buf+1,fsr2h
 21129  004D98  0E00               	movlw	0
 21130  004D9A  6EDF               	movwf	indf2,c
 21131  004D9C  0621               	decf	utoa@buf,f,c
 21132  004D9E  A0D8               	btfss	status,0,c
 21133  004DA0  0622               	decf	utoa@buf+1,f,c
 21134  004DA2  C023  F01A         	movff	utoa@val,___lwmod@dividend
 21135  004DA6  C024  F01B         	movff	utoa@val+1,___lwmod@dividend+1
 21136  004DAA  C025  F01C         	movff	utoa@base,___lwmod@divisor
 21137  004DAE  C026  F01D         	movff	utoa@base+1,___lwmod@divisor+1
 21138  004DB2  ECCF  F02B         	call	___lwmod	;wreg free
 21139  004DB6  501A               	movf	?___lwmod,w,c
 21140  004DB8  6E29               	movwf	utoa@c,c
 21141  004DBA  C023  F01A         	movff	utoa@val,___lwdiv@dividend
 21142  004DBE  C024  F01B         	movff	utoa@val+1,___lwdiv@dividend+1
 21143  004DC2  C025  F01C         	movff	utoa@base,___lwdiv@divisor
 21144  004DC6  C026  F01D         	movff	utoa@base+1,___lwdiv@divisor+1
 21145  004DCA  ECF4  F02A         	call	___lwdiv	;wreg free
 21146  004DCE  C01A  F023         	movff	?___lwdiv,utoa@val
 21147  004DD2  C01B  F024         	movff	?___lwdiv+1,utoa@val+1
 21148  004DD6  0E09               	movlw	9
 21149  004DD8  6429               	cpfsgt	utoa@c,c
 21150  004DDA  D002               	goto	l2374
 21151  004DDC  0E07               	movlw	7
 21152  004DDE  2629               	addwf	utoa@c,f,c
 21153  004DE0                     l2374:
 21154  004DE0  0E30               	movlw	48
 21155  004DE2  2629               	addwf	utoa@c,f,c
 21156  004DE4  C021  FFD9         	movff	utoa@buf,fsr2l
 21157  004DE8  C022  FFDA         	movff	utoa@buf+1,fsr2h
 21158  004DEC  C029  FFDF         	movff	utoa@c,indf2
 21159  004DF0  0621               	decf	utoa@buf,f,c
 21160  004DF2  A0D8               	btfss	status,0,c
 21161  004DF4  0622               	decf	utoa@buf+1,f,c
 21162  004DF6  5023               	movf	utoa@val,w,c
 21163  004DF8  1024               	iorwf	utoa@val+1,w,c
 21164  004DFA  A4D8               	btfss	status,2,c
 21165  004DFC  D7D2               	goto	l2373
 21166                           
 21167                           ;	Return value of _utoa is never used
 21168  004DFE  4A21               	infsnz	utoa@buf,f,c
 21169  004E00  2A22               	incf	utoa@buf+1,f,c
 21170  004E02  0012               	return	
 21171  004E04                     __end_of_utoa:
 21172                           	opt stack 0
 21173                           tosu	equ	0xFFF
 21174                           tosh	equ	0xFFE
 21175                           tosl	equ	0xFFD
 21176                           pclath	equ	0xFFA
 21177                           tblptru	equ	0xFF8
 21178                           tblptrh	equ	0xFF7
 21179                           tblptrl	equ	0xFF6
 21180                           tablat	equ	0xFF5
 21181                           prodh	equ	0xFF4
 21182                           prodl	equ	0xFF3
 21183                           intcon	equ	0xFF2
 21184                           intcon2	equ	0xFF1
 21185                           intcon3	equ	0xFF0
 21186                           indf0	equ	0xFEF
 21187                           postinc0	equ	0xFEE
 21188                           fsr0h	equ	0xFEA
 21189                           fsr0l	equ	0xFE9
 21190                           wreg	equ	0xFE8
 21191                           indf1	equ	0xFE7
 21192                           postinc1	equ	0xFE6
 21193                           postdec1	equ	0xFE5
 21194                           plusw1	equ	0xFE3
 21195                           fsr1h	equ	0xFE2
 21196                           fsr1l	equ	0xFE1
 21197                           indf2	equ	0xFDF
 21198                           postinc2	equ	0xFDE
 21199                           postdec2	equ	0xFDD
 21200                           plusw2	equ	0xFDB
 21201                           fsr2h	equ	0xFDA
 21202                           fsr2l	equ	0xFD9
 21203                           status	equ	0xFD8
 21204                           
 21205 ;; *************** function ___lwmod *****************
 21206 ;; Defined at:
 21207 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 21208 ;; Parameters:    Size  Location     Type
 21209 ;;  dividend        2   25[COMRAM] unsigned int 
 21210 ;;  divisor         2   27[COMRAM] unsigned int 
 21211 ;; Auto vars:     Size  Location     Type
 21212 ;;  counter         1   29[COMRAM] unsigned char 
 21213 ;; Return value:  Size  Location     Type
 21214 ;;                  2   25[COMRAM] unsigned int 
 21215 ;; Registers used:
 21216 ;;		wreg, status,2, status,0
 21217 ;; Tracked objects:
 21218 ;;		On entry : 0/0
 21219 ;;		On exit  : 0/0
 21220 ;;		Unchanged: 0/0
 21221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21222 ;;      Params:         4       0       0       0       0       0       0       0       0
 21223 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21224 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21225 ;;      Totals:         5       0       0       0       0       0       0       0       0
 21226 ;;Total ram usage:        5 bytes
 21227 ;; Hardware stack levels used:    1
 21228 ;; Hardware stack levels required when called:    2
 21229 ;; This function calls:
 21230 ;;		Nothing
 21231 ;; This function is called by:
 21232 ;;		_utoa
 21233 ;;		_converte_inteiro_matriz
 21234 ;; This function uses a non-reentrant model
 21235 ;;
 21236                           
 21237                           	psect	text73
 21238  00579E                     __ptext73:
 21239                           	opt stack 0
 21240  00579E                     ___lwmod:
 21241                           	opt stack 19
 21242                           
 21243                           ;incstack = 0
 21244  00579E  501C               	movf	___lwmod@divisor,w,c
 21245  0057A0  101D               	iorwf	___lwmod@divisor+1,w,c
 21246  0057A2  B4D8               	btfsc	status,2,c
 21247  0057A4  D018               	goto	l2469
 21248  0057A6  0E01               	movlw	1
 21249  0057A8  6E1E               	movwf	___lwmod@counter,c
 21250  0057AA  D004               	goto	l2464
 21251  0057AC  90D8               	bcf	status,0,c
 21252  0057AE  361C               	rlcf	___lwmod@divisor,f,c
 21253  0057B0  361D               	rlcf	___lwmod@divisor+1,f,c
 21254  0057B2  2A1E               	incf	___lwmod@counter,f,c
 21255  0057B4                     l2464:
 21256  0057B4  AE1D               	btfss	___lwmod@divisor+1,7,c
 21257  0057B6  D7FA               	goto	l2465
 21258  0057B8                     u16110:
 21259  0057B8  501C               	movf	___lwmod@divisor,w,c
 21260  0057BA  5C1A               	subwf	___lwmod@dividend,w,c
 21261  0057BC  501D               	movf	___lwmod@divisor+1,w,c
 21262  0057BE  581B               	subwfb	___lwmod@dividend+1,w,c
 21263  0057C0  A0D8               	btfss	status,0,c
 21264  0057C2  D004               	goto	l2468
 21265  0057C4  501C               	movf	___lwmod@divisor,w,c
 21266  0057C6  5E1A               	subwf	___lwmod@dividend,f,c
 21267  0057C8  501D               	movf	___lwmod@divisor+1,w,c
 21268  0057CA  5A1B               	subwfb	___lwmod@dividend+1,f,c
 21269  0057CC                     l2468:
 21270  0057CC  90D8               	bcf	status,0,c
 21271  0057CE  321D               	rrcf	___lwmod@divisor+1,f,c
 21272  0057D0  321C               	rrcf	___lwmod@divisor,f,c
 21273  0057D2  2E1E               	decfsz	___lwmod@counter,f,c
 21274  0057D4  D7F1               	goto	u16110
 21275  0057D6                     l2469:
 21276  0057D6  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 21277  0057DA  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 21278  0057DE  0012               	return		;funcret
 21279  0057E0                     __end_of___lwmod:
 21280                           	opt stack 0
 21281                           tosu	equ	0xFFF
 21282                           tosh	equ	0xFFE
 21283                           tosl	equ	0xFFD
 21284                           pclath	equ	0xFFA
 21285                           tblptru	equ	0xFF8
 21286                           tblptrh	equ	0xFF7
 21287                           tblptrl	equ	0xFF6
 21288                           tablat	equ	0xFF5
 21289                           prodh	equ	0xFF4
 21290                           prodl	equ	0xFF3
 21291                           intcon	equ	0xFF2
 21292                           intcon2	equ	0xFF1
 21293                           intcon3	equ	0xFF0
 21294                           indf0	equ	0xFEF
 21295                           postinc0	equ	0xFEE
 21296                           fsr0h	equ	0xFEA
 21297                           fsr0l	equ	0xFE9
 21298                           wreg	equ	0xFE8
 21299                           indf1	equ	0xFE7
 21300                           postinc1	equ	0xFE6
 21301                           postdec1	equ	0xFE5
 21302                           plusw1	equ	0xFE3
 21303                           fsr1h	equ	0xFE2
 21304                           fsr1l	equ	0xFE1
 21305                           indf2	equ	0xFDF
 21306                           postinc2	equ	0xFDE
 21307                           postdec2	equ	0xFDD
 21308                           plusw2	equ	0xFDB
 21309                           fsr2h	equ	0xFDA
 21310                           fsr2l	equ	0xFD9
 21311                           status	equ	0xFD8
 21312                           
 21313 ;; *************** function ___lwdiv *****************
 21314 ;; Defined at:
 21315 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 21316 ;; Parameters:    Size  Location     Type
 21317 ;;  dividend        2   25[COMRAM] unsigned int 
 21318 ;;  divisor         2   27[COMRAM] unsigned int 
 21319 ;; Auto vars:     Size  Location     Type
 21320 ;;  quotient        2   30[COMRAM] unsigned int 
 21321 ;;  counter         1   29[COMRAM] unsigned char 
 21322 ;; Return value:  Size  Location     Type
 21323 ;;                  2   25[COMRAM] unsigned int 
 21324 ;; Registers used:
 21325 ;;		wreg, status,2, status,0
 21326 ;; Tracked objects:
 21327 ;;		On entry : 0/0
 21328 ;;		On exit  : 0/0
 21329 ;;		Unchanged: 0/0
 21330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21331 ;;      Params:         4       0       0       0       0       0       0       0       0
 21332 ;;      Locals:         3       0       0       0       0       0       0       0       0
 21333 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21334 ;;      Totals:         7       0       0       0       0       0       0       0       0
 21335 ;;Total ram usage:        7 bytes
 21336 ;; Hardware stack levels used:    1
 21337 ;; Hardware stack levels required when called:    2
 21338 ;; This function calls:
 21339 ;;		Nothing
 21340 ;; This function is called by:
 21341 ;;		_utoa
 21342 ;;		_converte_inteiro_matriz
 21343 ;; This function uses a non-reentrant model
 21344 ;;
 21345                           
 21346                           	psect	text74
 21347  0055E8                     __ptext74:
 21348                           	opt stack 0
 21349  0055E8                     ___lwdiv:
 21350                           	opt stack 19
 21351                           
 21352                           ;incstack = 0
 21353  0055E8  0E00               	movlw	0
 21354  0055EA  6E20               	movwf	___lwdiv@quotient+1,c
 21355  0055EC  0E00               	movlw	0
 21356  0055EE  6E1F               	movwf	___lwdiv@quotient,c
 21357  0055F0  501C               	movf	___lwdiv@divisor,w,c
 21358  0055F2  101D               	iorwf	___lwdiv@divisor+1,w,c
 21359  0055F4  B4D8               	btfsc	status,2,c
 21360  0055F6  D01C               	goto	l2459
 21361  0055F8  0E01               	movlw	1
 21362  0055FA  6E1E               	movwf	___lwdiv@counter,c
 21363  0055FC  D004               	goto	l2454
 21364  0055FE  90D8               	bcf	status,0,c
 21365  005600  361C               	rlcf	___lwdiv@divisor,f,c
 21366  005602  361D               	rlcf	___lwdiv@divisor+1,f,c
 21367  005604  2A1E               	incf	___lwdiv@counter,f,c
 21368  005606                     l2454:
 21369  005606  AE1D               	btfss	___lwdiv@divisor+1,7,c
 21370  005608  D7FA               	goto	l2455
 21371  00560A                     u16080:
 21372  00560A  90D8               	bcf	status,0,c
 21373  00560C  361F               	rlcf	___lwdiv@quotient,f,c
 21374  00560E  3620               	rlcf	___lwdiv@quotient+1,f,c
 21375  005610  501C               	movf	___lwdiv@divisor,w,c
 21376  005612  5C1A               	subwf	___lwdiv@dividend,w,c
 21377  005614  501D               	movf	___lwdiv@divisor+1,w,c
 21378  005616  581B               	subwfb	___lwdiv@dividend+1,w,c
 21379  005618  A0D8               	btfss	status,0,c
 21380  00561A  D005               	goto	l2458
 21381  00561C  501C               	movf	___lwdiv@divisor,w,c
 21382  00561E  5E1A               	subwf	___lwdiv@dividend,f,c
 21383  005620  501D               	movf	___lwdiv@divisor+1,w,c
 21384  005622  5A1B               	subwfb	___lwdiv@dividend+1,f,c
 21385  005624  801F               	bsf	___lwdiv@quotient,0,c
 21386  005626                     l2458:
 21387  005626  90D8               	bcf	status,0,c
 21388  005628  321D               	rrcf	___lwdiv@divisor+1,f,c
 21389  00562A  321C               	rrcf	___lwdiv@divisor,f,c
 21390  00562C  2E1E               	decfsz	___lwdiv@counter,f,c
 21391  00562E  D7ED               	goto	u16080
 21392  005630                     l2459:
 21393  005630  C01F  F01A         	movff	___lwdiv@quotient,?___lwdiv
 21394  005634  C020  F01B         	movff	___lwdiv@quotient+1,?___lwdiv+1
 21395  005638  0012               	return		;funcret
 21396  00563A                     __end_of___lwdiv:
 21397                           	opt stack 0
 21398                           tosu	equ	0xFFF
 21399                           tosh	equ	0xFFE
 21400                           tosl	equ	0xFFD
 21401                           pclath	equ	0xFFA
 21402                           tblptru	equ	0xFF8
 21403                           tblptrh	equ	0xFF7
 21404                           tblptrl	equ	0xFF6
 21405                           tablat	equ	0xFF5
 21406                           prodh	equ	0xFF4
 21407                           prodl	equ	0xFF3
 21408                           intcon	equ	0xFF2
 21409                           intcon2	equ	0xFF1
 21410                           intcon3	equ	0xFF0
 21411                           indf0	equ	0xFEF
 21412                           postinc0	equ	0xFEE
 21413                           fsr0h	equ	0xFEA
 21414                           fsr0l	equ	0xFE9
 21415                           wreg	equ	0xFE8
 21416                           indf1	equ	0xFE7
 21417                           postinc1	equ	0xFE6
 21418                           postdec1	equ	0xFE5
 21419                           plusw1	equ	0xFE3
 21420                           fsr1h	equ	0xFE2
 21421                           fsr1l	equ	0xFE1
 21422                           indf2	equ	0xFDF
 21423                           postinc2	equ	0xFDE
 21424                           postdec2	equ	0xFDD
 21425                           plusw2	equ	0xFDB
 21426                           fsr2h	equ	0xFDA
 21427                           fsr2l	equ	0xFD9
 21428                           status	equ	0xFD8
 21429                           
 21430 ;; *************** function _escreve_frase_ram_lcd *****************
 21431 ;; Defined at:
 21432 ;;		line 445 in file "bibliotecas/display_lcd.c"
 21433 ;; Parameters:    Size  Location     Type
 21434 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 21435 ;;		 -> STR_22(11), STR_21(10), STR_20(16), STR_19(16), 
 21436 ;;		 -> STR_18(11), escreve_inteiro_lcd@texto(7), leitura_chave@pos_ignicao_on(17), leitura_chave@pos_ignicao_crank(17),
      + 
 21437 ;;		 -> leitura_chave@pos_ignicao_off(17), STR_16(17), STR_15(17), STR_14(18), 
 21438 ;;		 -> buff(20), STR_11(16), STR_5(5), gps@gps_buffer(15), 
 21439 ;;		 -> dado_buffer(7), STR_2(6), data_buffer(15), STR_1(6), 
 21440 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 21441 ;; Auto vars:     Size  Location     Type
 21442 ;;		None
 21443 ;; Return value:  Size  Location     Type
 21444 ;;                  1    wreg      void 
 21445 ;; Registers used:
 21446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21447 ;; Tracked objects:
 21448 ;;		On entry : 0/0
 21449 ;;		On exit  : 0/0
 21450 ;;		Unchanged: 0/0
 21451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21452 ;;      Params:         2       0       0       0       0       0       0       0       0
 21453 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21454 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21455 ;;      Totals:         2       0       0       0       0       0       0       0       0
 21456 ;;Total ram usage:        2 bytes
 21457 ;; Hardware stack levels used:    1
 21458 ;; Hardware stack levels required when called:    4
 21459 ;; This function calls:
 21460 ;;		_escreve_caractere_lcd
 21461 ;; This function is called by:
 21462 ;;		_mensagem_inicial
 21463 ;;		_SDCard
 21464 ;;		_escreve_inteiro_lcd
 21465 ;;		_sdc_reset
 21466 ;;		_sdc_disk_initialize
 21467 ;;		_gps
 21468 ;;		_inicializa_SPI
 21469 ;;		_leitura_chave
 21470 ;; This function uses a non-reentrant model
 21471 ;;
 21472                           
 21473                           	psect	text75
 21474  00563A                     __ptext75:
 21475                           	opt stack 0
 21476  00563A                     _escreve_frase_ram_lcd:
 21477                           	opt stack 25
 21478                           
 21479                           ;display_lcd.c: 447: while(*buffer)
 21480                           
 21481                           ;incstack = 0
 21482  00563A  D014               	goto	l565
 21483  00563C                     
 21484                           ;display_lcd.c: 448: {
 21485                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 21486  00563C  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 21487  005640  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 21488  005644  6AF8               	clrf	tblptru,c
 21489  005646  0E07               	movlw	(high __ramtop+-1)
 21490  005648  64F7               	cpfsgt	tblptrh,c
 21491  00564A  D003               	bra	u16297
 21492  00564C  0008               	tblrd		*
 21493  00564E  50F5               	movf	tablat,w,c
 21494  005650  D005               	bra	u16290
 21495  005652                     u16297:
 21496  005652  CFF6 FFE9          	movff	tblptrl,fsr0l
 21497  005656  CFF7 FFEA          	movff	tblptrh,fsr0h
 21498  00565A  50EF               	movf	indf0,w,c
 21499  00565C                     u16290:
 21500  00565C  EC2B  F029         	call	_escreve_caractere_lcd
 21501                           
 21502                           ;display_lcd.c: 450: buffer++;
 21503  005660  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 21504  005662  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 21505  005664                     l565:
 21506  005664  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 21507  005668  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 21508  00566C  6AF8               	clrf	tblptru,c
 21509  00566E  0E07               	movlw	(high __ramtop+-1)
 21510  005670  64F7               	cpfsgt	tblptrh,c
 21511  005672  D003               	bra	u16307
 21512  005674  0008               	tblrd		*
 21513  005676  50F5               	movf	tablat,w,c
 21514  005678  D005               	bra	u16300
 21515  00567A                     u16307:
 21516  00567A  CFF6 FFE9          	movff	tblptrl,fsr0l
 21517  00567E  CFF7 FFEA          	movff	tblptrh,fsr0h
 21518  005682  50EF               	movf	indf0,w,c
 21519  005684                     u16300:
 21520  005684  0900               	iorlw	0
 21521  005686  B4D8               	btfsc	status,2,c
 21522  005688  0012               	return	
 21523  00568A  D7D8               	goto	l566
 21524  00568C                     __end_of_escreve_frase_ram_lcd:
 21525                           	opt stack 0
 21526                           tosu	equ	0xFFF
 21527                           tosh	equ	0xFFE
 21528                           tosl	equ	0xFFD
 21529                           pclath	equ	0xFFA
 21530                           tblptru	equ	0xFF8
 21531                           tblptrh	equ	0xFF7
 21532                           tblptrl	equ	0xFF6
 21533                           tablat	equ	0xFF5
 21534                           prodh	equ	0xFF4
 21535                           prodl	equ	0xFF3
 21536                           intcon	equ	0xFF2
 21537                           intcon2	equ	0xFF1
 21538                           intcon3	equ	0xFF0
 21539                           indf0	equ	0xFEF
 21540                           postinc0	equ	0xFEE
 21541                           fsr0h	equ	0xFEA
 21542                           fsr0l	equ	0xFE9
 21543                           wreg	equ	0xFE8
 21544                           indf1	equ	0xFE7
 21545                           postinc1	equ	0xFE6
 21546                           postdec1	equ	0xFE5
 21547                           plusw1	equ	0xFE3
 21548                           fsr1h	equ	0xFE2
 21549                           fsr1l	equ	0xFE1
 21550                           indf2	equ	0xFDF
 21551                           postinc2	equ	0xFDE
 21552                           postdec2	equ	0xFDD
 21553                           plusw2	equ	0xFDB
 21554                           fsr2h	equ	0xFDA
 21555                           fsr2l	equ	0xFD9
 21556                           status	equ	0xFD8
 21557                           
 21558 ;; *************** function _escreve_caractere_lcd *****************
 21559 ;; Defined at:
 21560 ;;		line 323 in file "bibliotecas/display_lcd.c"
 21561 ;; Parameters:    Size  Location     Type
 21562 ;;  data            1    wreg     unsigned char 
 21563 ;; Auto vars:     Size  Location     Type
 21564 ;;  data            1   27[COMRAM] unsigned char 
 21565 ;; Return value:  Size  Location     Type
 21566 ;;                  1    wreg      void 
 21567 ;; Registers used:
 21568 ;;		wreg, status,2, status,0, cstack
 21569 ;; Tracked objects:
 21570 ;;		On entry : 0/0
 21571 ;;		On exit  : 0/0
 21572 ;;		Unchanged: 0/0
 21573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21574 ;;      Params:         0       0       0       0       0       0       0       0       0
 21575 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21576 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21577 ;;      Totals:         1       0       0       0       0       0       0       0       0
 21578 ;;Total ram usage:        1 bytes
 21579 ;; Hardware stack levels used:    1
 21580 ;; Hardware stack levels required when called:    3
 21581 ;; This function calls:
 21582 ;;		_delay
 21583 ;; This function is called by:
 21584 ;;		_escreve_frase_ram_lcd
 21585 ;;		_escreve_float_lcd
 21586 ;;		_escreve_frase_lcd
 21587 ;;		_cria_caractere_lcd
 21588 ;; This function uses a non-reentrant model
 21589 ;;
 21590                           
 21591                           	psect	text76
 21592  005256                     __ptext76:
 21593                           	opt stack 0
 21594  005256                     _escreve_caractere_lcd:
 21595                           	opt stack 25
 21596                           
 21597                           ;incstack = 0
 21598                           ;escreve_caractere_lcd@data stored from wreg
 21599  005256  6E1C               	movwf	escreve_caractere_lcd@data,c
 21600                           
 21601                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 21602  005258  9483               	bcf	3971,2,c	;volatile
 21603                           
 21604                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 21605  00525A  8283               	bsf	3971,1,c	;volatile
 21606                           
 21607                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 21608  00525C  9083               	bcf	3971,0,c	;volatile
 21609                           
 21610                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 21611  00525E  A81C               	btfss	escreve_caractere_lcd@data,4,c
 21612  005260  D002               	goto	l532
 21613  005262  8883               	bsf	3971,4,c	;volatile
 21614  005264  D001               	goto	l533
 21615  005266                     l532:
 21616                           
 21617                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 21618  005266  9883               	bcf	3971,4,c	;volatile
 21619  005268                     l533:
 21620                           
 21621                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 21622  005268  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 21623  00526A  D002               	goto	l534
 21624  00526C  8A83               	bsf	3971,5,c	;volatile
 21625  00526E  D001               	goto	l535
 21626  005270                     l534:
 21627                           
 21628                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 21629  005270  9A83               	bcf	3971,5,c	;volatile
 21630  005272                     l535:
 21631                           
 21632                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 21633  005272  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 21634  005274  D002               	goto	l536
 21635  005276  8C83               	bsf	3971,6,c	;volatile
 21636  005278  D001               	goto	l537
 21637  00527A                     l536:
 21638                           
 21639                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 21640  00527A  9C83               	bcf	3971,6,c	;volatile
 21641  00527C                     l537:
 21642                           
 21643                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 21644  00527C  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 21645  00527E  D002               	goto	l538
 21646  005280  8E83               	bsf	3971,7,c	;volatile
 21647  005282  D001               	goto	l539
 21648  005284                     l538:
 21649                           
 21650                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 21651  005284  9E83               	bcf	3971,7,c	;volatile
 21652  005286                     l539:
 21653                           
 21654                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 21655  005286  8083               	bsf	3971,0,c	;volatile
 21656                           
 21657                           ;display_lcd.c: 342: delay();
 21658  005288  EC27  F02D         	call	_delay	;wreg free
 21659                           
 21660                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 21661  00528C  9083               	bcf	3971,0,c	;volatile
 21662                           
 21663                           ;display_lcd.c: 344: delay();
 21664  00528E  EC27  F02D         	call	_delay	;wreg free
 21665                           
 21666                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 21667  005292  A01C               	btfss	escreve_caractere_lcd@data,0,c
 21668  005294  D002               	goto	l540
 21669  005296  8883               	bsf	3971,4,c	;volatile
 21670  005298  D001               	goto	l541
 21671  00529A                     l540:
 21672                           
 21673                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 21674  00529A  9883               	bcf	3971,4,c	;volatile
 21675  00529C                     l541:
 21676                           
 21677                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 21678  00529C  A21C               	btfss	escreve_caractere_lcd@data,1,c
 21679  00529E  D002               	goto	l542
 21680  0052A0  8A83               	bsf	3971,5,c	;volatile
 21681  0052A2  D001               	goto	l543
 21682  0052A4                     l542:
 21683                           
 21684                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 21685  0052A4  9A83               	bcf	3971,5,c	;volatile
 21686  0052A6                     l543:
 21687                           
 21688                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 21689  0052A6  A41C               	btfss	escreve_caractere_lcd@data,2,c
 21690  0052A8  D002               	goto	l544
 21691  0052AA  8C83               	bsf	3971,6,c	;volatile
 21692  0052AC  D001               	goto	l545
 21693  0052AE                     l544:
 21694                           
 21695                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 21696  0052AE  9C83               	bcf	3971,6,c	;volatile
 21697  0052B0                     l545:
 21698                           
 21699                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 21700  0052B0  A61C               	btfss	escreve_caractere_lcd@data,3,c
 21701  0052B2  D002               	goto	l546
 21702  0052B4  8E83               	bsf	3971,7,c	;volatile
 21703  0052B6  D001               	goto	l547
 21704  0052B8                     l546:
 21705                           
 21706                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 21707  0052B8  9E83               	bcf	3971,7,c	;volatile
 21708  0052BA                     l547:
 21709                           
 21710                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 21711  0052BA  8083               	bsf	3971,0,c	;volatile
 21712                           
 21713                           ;display_lcd.c: 359: delay();
 21714  0052BC  EC27  F02D         	call	_delay	;wreg free
 21715                           
 21716                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 21717  0052C0  9083               	bcf	3971,0,c	;volatile
 21718                           
 21719                           ;display_lcd.c: 361: delay();
 21720  0052C2  EC27  F02D         	call	_delay	;wreg free
 21721  0052C6  0012               	return		;funcret
 21722  0052C8                     __end_of_escreve_caractere_lcd:
 21723                           	opt stack 0
 21724                           tosu	equ	0xFFF
 21725                           tosh	equ	0xFFE
 21726                           tosl	equ	0xFFD
 21727                           pclath	equ	0xFFA
 21728                           tblptru	equ	0xFF8
 21729                           tblptrh	equ	0xFF7
 21730                           tblptrl	equ	0xFF6
 21731                           tablat	equ	0xFF5
 21732                           prodh	equ	0xFF4
 21733                           prodl	equ	0xFF3
 21734                           intcon	equ	0xFF2
 21735                           intcon2	equ	0xFF1
 21736                           intcon3	equ	0xFF0
 21737                           indf0	equ	0xFEF
 21738                           postinc0	equ	0xFEE
 21739                           fsr0h	equ	0xFEA
 21740                           fsr0l	equ	0xFE9
 21741                           wreg	equ	0xFE8
 21742                           indf1	equ	0xFE7
 21743                           postinc1	equ	0xFE6
 21744                           postdec1	equ	0xFE5
 21745                           plusw1	equ	0xFE3
 21746                           fsr1h	equ	0xFE2
 21747                           fsr1l	equ	0xFE1
 21748                           indf2	equ	0xFDF
 21749                           postinc2	equ	0xFDE
 21750                           postdec2	equ	0xFDD
 21751                           plusw2	equ	0xFDB
 21752                           fsr2h	equ	0xFDA
 21753                           fsr2l	equ	0xFD9
 21754                           status	equ	0xFD8
 21755                           
 21756 ;; *************** function _delay *****************
 21757 ;; Defined at:
 21758 ;;		line 45 in file "bibliotecas/display_lcd.c"
 21759 ;; Parameters:    Size  Location     Type
 21760 ;;		None
 21761 ;; Auto vars:     Size  Location     Type
 21762 ;;  contador_int    1   26[COMRAM] unsigned char 
 21763 ;;  contador_ext    1   25[COMRAM] unsigned char 
 21764 ;; Return value:  Size  Location     Type
 21765 ;;                  1    wreg      void 
 21766 ;; Registers used:
 21767 ;;		wreg, status,2, status,0
 21768 ;; Tracked objects:
 21769 ;;		On entry : 0/0
 21770 ;;		On exit  : 0/0
 21771 ;;		Unchanged: 0/0
 21772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21773 ;;      Params:         0       0       0       0       0       0       0       0       0
 21774 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21775 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21776 ;;      Totals:         2       0       0       0       0       0       0       0       0
 21777 ;;Total ram usage:        2 bytes
 21778 ;; Hardware stack levels used:    1
 21779 ;; Hardware stack levels required when called:    2
 21780 ;; This function calls:
 21781 ;;		Nothing
 21782 ;; This function is called by:
 21783 ;;		_init_lcd
 21784 ;;		_escreve_cmd_lcd
 21785 ;;		_endereco_cursor_lcd
 21786 ;;		_escreve_caractere_lcd
 21787 ;; This function uses a non-reentrant model
 21788 ;;
 21789                           
 21790                           	psect	text77
 21791  005A4E                     __ptext77:
 21792                           	opt stack 0
 21793  005A4E                     _delay:
 21794                           	opt stack 25
 21795                           
 21796                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 21797                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 21798                           
 21799                           ;incstack = 0
 21800  005A4E  0E00               	movlw	0
 21801  005A50  6E1A               	movwf	delay@contador_ext,c
 21802  005A52                     l12560:
 21803  005A52  0E63               	movlw	99
 21804  005A54  641A               	cpfsgt	delay@contador_ext,c
 21805  005A56  D001               	goto	l471
 21806  005A58  0012               	return	
 21807  005A5A                     l471:
 21808                           
 21809                           ;display_lcd.c: 50: {
 21810                           ;display_lcd.c: 51: __nop();
 21811  005A5A  F000               	nop	
 21812                           
 21813                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 21814  005A5C  0E00               	movlw	0
 21815  005A5E  6E1B               	movwf	delay@contador_int,c
 21816  005A60                     l12566:
 21817  005A60  0E31               	movlw	49
 21818  005A62  641B               	cpfsgt	delay@contador_int,c
 21819  005A64  D001               	goto	l473
 21820  005A66  D003               	goto	u16050
 21821  005A68                     l473:
 21822                           
 21823                           ;display_lcd.c: 53: {
 21824                           ;display_lcd.c: 54: __nop();
 21825  005A68  F000               	nop	
 21826  005A6A  2A1B               	incf	delay@contador_int,f,c
 21827  005A6C  D7F9               	goto	l12566
 21828  005A6E                     u16050:
 21829  005A6E  2A1A               	incf	delay@contador_ext,f,c
 21830  005A70  D7F0               	goto	l12560
 21831  005A72                     __end_of_delay:
 21832                           	opt stack 0
 21833                           tosu	equ	0xFFF
 21834                           tosh	equ	0xFFE
 21835                           tosl	equ	0xFFD
 21836                           pclath	equ	0xFFA
 21837                           tblptru	equ	0xFF8
 21838                           tblptrh	equ	0xFF7
 21839                           tblptrl	equ	0xFF6
 21840                           tablat	equ	0xFF5
 21841                           prodh	equ	0xFF4
 21842                           prodl	equ	0xFF3
 21843                           intcon	equ	0xFF2
 21844                           intcon2	equ	0xFF1
 21845                           intcon3	equ	0xFF0
 21846                           indf0	equ	0xFEF
 21847                           postinc0	equ	0xFEE
 21848                           fsr0h	equ	0xFEA
 21849                           fsr0l	equ	0xFE9
 21850                           wreg	equ	0xFE8
 21851                           indf1	equ	0xFE7
 21852                           postinc1	equ	0xFE6
 21853                           postdec1	equ	0xFE5
 21854                           plusw1	equ	0xFE3
 21855                           fsr1h	equ	0xFE2
 21856                           fsr1l	equ	0xFE1
 21857                           indf2	equ	0xFDF
 21858                           postinc2	equ	0xFDE
 21859                           postdec2	equ	0xFDD
 21860                           plusw2	equ	0xFDB
 21861                           fsr2h	equ	0xFDA
 21862                           fsr2l	equ	0xFD9
 21863                           status	equ	0xFD8
 21864                           
 21865 ;; *************** function _dummy_clocks *****************
 21866 ;; Defined at:
 21867 ;;		line 76 in file "bibliotecas/SDCard.c"
 21868 ;; Parameters:    Size  Location     Type
 21869 ;;  n               1    wreg     unsigned char 
 21870 ;; Auto vars:     Size  Location     Type
 21871 ;;  n               1   29[COMRAM] unsigned char 
 21872 ;;  i               2   30[COMRAM] unsigned int 
 21873 ;; Return value:  Size  Location     Type
 21874 ;;                  1    wreg      void 
 21875 ;; Registers used:
 21876 ;;		wreg, status,2, status,0, cstack
 21877 ;; Tracked objects:
 21878 ;;		On entry : 0/0
 21879 ;;		On exit  : 0/0
 21880 ;;		Unchanged: 0/0
 21881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21882 ;;      Params:         0       0       0       0       0       0       0       0       0
 21883 ;;      Locals:         3       0       0       0       0       0       0       0       0
 21884 ;;      Temps:          2       0       0       0       0       0       0       0       0
 21885 ;;      Totals:         5       0       0       0       0       0       0       0       0
 21886 ;;Total ram usage:        5 bytes
 21887 ;; Hardware stack levels used:    1
 21888 ;; Hardware stack levels required when called:    3
 21889 ;; This function calls:
 21890 ;;		_escreve_dado_SPI
 21891 ;; This function is called by:
 21892 ;;		_sdc_reset
 21893 ;;		_sdc_disk_initialize
 21894 ;;		_sdc_disk_read
 21895 ;;		_sdc_disk_write
 21896 ;; This function uses a non-reentrant model
 21897 ;;
 21898                           
 21899                           	psect	text78
 21900  00585C                     __ptext78:
 21901                           	opt stack 0
 21902  00585C                     _dummy_clocks:
 21903                           	opt stack 21
 21904                           
 21905                           ;incstack = 0
 21906                           ;dummy_clocks@n stored from wreg
 21907  00585C  6E1E               	movwf	dummy_clocks@n,c
 21908                           
 21909                           ;SDCard.c: 78: unsigned int i;
 21910                           ;SDCard.c: 79: _delay((unsigned long)((1)*(48000000/4000.0)));
 21911  00585E  0E10               	movlw	16
 21912  005860  6E1C               	movwf	??_dummy_clocks& (0+255),c
 21913  005862  0E94               	movlw	148
 21914  005864                     u23537:
 21915  005864  2EE8               	decfsz	wreg,f,c
 21916  005866  D7FE               	bra	u23537
 21917  005868  2E1C               	decfsz	??_dummy_clocks& (0+255),f,c
 21918  00586A  D7FC               	bra	u23537
 21919  00586C  D000               	nop2	
 21920                           
 21921                           ;SDCard.c: 81: for(i=0;i<n;i++)
 21922  00586E  0E00               	movlw	0
 21923  005870  6E20               	movwf	dummy_clocks@i+1,c
 21924  005872  0E00               	movlw	0
 21925  005874  6E1F               	movwf	dummy_clocks@i,c
 21926  005876  D007               	goto	l303
 21927  005878                     l304:
 21928                           
 21929                           ;SDCard.c: 82: {
 21930                           ;SDCard.c: 83: LATBbits.LATB4 = 1;
 21931  005878  888A               	bsf	3978,4,c	;volatile
 21932                           
 21933                           ;SDCard.c: 84: escreve_dado_SPI(0XFF);
 21934  00587A  0EFF               	movlw	255
 21935  00587C  EC69  F02B         	call	_escreve_dado_SPI
 21936                           
 21937                           ;SDCard.c: 85: LATBbits.LATB4 = 0;
 21938  005880  988A               	bcf	3978,4,c	;volatile
 21939  005882  4A1F               	infsnz	dummy_clocks@i,f,c
 21940  005884  2A20               	incf	dummy_clocks@i+1,f,c
 21941  005886                     l303:
 21942  005886  501E               	movf	dummy_clocks@n,w,c
 21943  005888  6E1C               	movwf	??_dummy_clocks& (0+255),c
 21944  00588A  6A1D               	clrf	(??_dummy_clocks+1)& (0+255),c
 21945  00588C  501C               	movf	??_dummy_clocks,w,c
 21946  00588E  5C1F               	subwf	dummy_clocks@i,w,c
 21947  005890  501D               	movf	??_dummy_clocks+1,w,c
 21948  005892  5820               	subwfb	dummy_clocks@i+1,w,c
 21949  005894  B0D8               	btfsc	status,0,c
 21950  005896  0012               	return	
 21951  005898  D7EF               	goto	l304
 21952  00589A                     __end_of_dummy_clocks:
 21953                           	opt stack 0
 21954                           tosu	equ	0xFFF
 21955                           tosh	equ	0xFFE
 21956                           tosl	equ	0xFFD
 21957                           pclath	equ	0xFFA
 21958                           tblptru	equ	0xFF8
 21959                           tblptrh	equ	0xFF7
 21960                           tblptrl	equ	0xFF6
 21961                           tablat	equ	0xFF5
 21962                           prodh	equ	0xFF4
 21963                           prodl	equ	0xFF3
 21964                           intcon	equ	0xFF2
 21965                           intcon2	equ	0xFF1
 21966                           intcon3	equ	0xFF0
 21967                           indf0	equ	0xFEF
 21968                           postinc0	equ	0xFEE
 21969                           fsr0h	equ	0xFEA
 21970                           fsr0l	equ	0xFE9
 21971                           wreg	equ	0xFE8
 21972                           indf1	equ	0xFE7
 21973                           postinc1	equ	0xFE6
 21974                           postdec1	equ	0xFE5
 21975                           plusw1	equ	0xFE3
 21976                           fsr1h	equ	0xFE2
 21977                           fsr1l	equ	0xFE1
 21978                           indf2	equ	0xFDF
 21979                           postinc2	equ	0xFDE
 21980                           postdec2	equ	0xFDD
 21981                           plusw2	equ	0xFDB
 21982                           fsr2h	equ	0xFDA
 21983                           fsr2l	equ	0xFD9
 21984                           status	equ	0xFD8
 21985                           
 21986 ;; *************** function _command *****************
 21987 ;; Defined at:
 21988 ;;		line 114 in file "bibliotecas/SDCard.c"
 21989 ;; Parameters:    Size  Location     Type
 21990 ;;  CMD             1    wreg     unsigned char 
 21991 ;;  arg             4   27[COMRAM] unsigned long 
 21992 ;;  CRC             1   31[COMRAM] unsigned char 
 21993 ;; Auto vars:     Size  Location     Type
 21994 ;;  CMD             1   32[COMRAM] unsigned char 
 21995 ;;  argument        1   33[COMRAM] unsigned char 
 21996 ;; Return value:  Size  Location     Type
 21997 ;;                  1    wreg      void 
 21998 ;; Registers used:
 21999 ;;		wreg, status,2, status,0, cstack
 22000 ;; Tracked objects:
 22001 ;;		On entry : 0/0
 22002 ;;		On exit  : 0/0
 22003 ;;		Unchanged: 0/0
 22004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22005 ;;      Params:         5       0       0       0       0       0       0       0       0
 22006 ;;      Locals:         2       0       0       0       0       0       0       0       0
 22007 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22008 ;;      Totals:         7       0       0       0       0       0       0       0       0
 22009 ;;Total ram usage:        7 bytes
 22010 ;; Hardware stack levels used:    1
 22011 ;; Hardware stack levels required when called:    3
 22012 ;; This function calls:
 22013 ;;		_escreve_dado_SPI
 22014 ;; This function is called by:
 22015 ;;		_sdc_reset
 22016 ;;		_sdc_disk_initialize
 22017 ;;		_sdc_disk_read
 22018 ;;		_sdc_disk_write
 22019 ;; This function uses a non-reentrant model
 22020 ;;
 22021                           
 22022                           	psect	text79
 22023  00590E                     __ptext79:
 22024                           	opt stack 0
 22025  00590E                     _command:
 22026                           	opt stack 21
 22027                           
 22028                           ;incstack = 0
 22029                           ;command@CMD stored from wreg
 22030  00590E  6E21               	movwf	command@CMD,c
 22031                           
 22032                           ;SDCard.c: 116: unsigned char argument;
 22033                           ;SDCard.c: 118: escreve_dado_SPI(CMD);
 22034  005910  5021               	movf	command@CMD,w,c
 22035  005912  EC69  F02B         	call	_escreve_dado_SPI
 22036                           
 22037                           ;SDCard.c: 119: argument = arg>>24;
 22038  005916  C01F  F022         	movff	command@arg+3,command@argument
 22039                           
 22040                           ;SDCard.c: 120: escreve_dado_SPI(argument);
 22041  00591A  5022               	movf	command@argument,w,c
 22042  00591C  EC69  F02B         	call	_escreve_dado_SPI
 22043                           
 22044                           ;SDCard.c: 121: argument = arg>>16;
 22045  005920  C01E  F022         	movff	command@arg+2,command@argument
 22046                           
 22047                           ;SDCard.c: 122: escreve_dado_SPI(argument);
 22048  005924  5022               	movf	command@argument,w,c
 22049  005926  EC69  F02B         	call	_escreve_dado_SPI
 22050                           
 22051                           ;SDCard.c: 123: argument = arg>>8;
 22052  00592A  C01D  F022         	movff	command@arg+1,command@argument
 22053                           
 22054                           ;SDCard.c: 124: escreve_dado_SPI(argument);
 22055  00592E  5022               	movf	command@argument,w,c
 22056  005930  EC69  F02B         	call	_escreve_dado_SPI
 22057                           
 22058                           ;SDCard.c: 125: argument = arg;
 22059  005934  C01C  F022         	movff	command@arg,command@argument
 22060                           
 22061                           ;SDCard.c: 126: escreve_dado_SPI(argument);
 22062  005938  5022               	movf	command@argument,w,c
 22063  00593A  EC69  F02B         	call	_escreve_dado_SPI
 22064                           
 22065                           ;SDCard.c: 127: escreve_dado_SPI(CRC);
 22066  00593E  5020               	movf	command@CRC,w,c
 22067  005940  EC69  F02B         	call	_escreve_dado_SPI
 22068  005944  0012               	return		;funcret
 22069  005946                     __end_of_command:
 22070                           	opt stack 0
 22071                           tosu	equ	0xFFF
 22072                           tosh	equ	0xFFE
 22073                           tosl	equ	0xFFD
 22074                           pclath	equ	0xFFA
 22075                           tblptru	equ	0xFF8
 22076                           tblptrh	equ	0xFF7
 22077                           tblptrl	equ	0xFF6
 22078                           tablat	equ	0xFF5
 22079                           prodh	equ	0xFF4
 22080                           prodl	equ	0xFF3
 22081                           intcon	equ	0xFF2
 22082                           intcon2	equ	0xFF1
 22083                           intcon3	equ	0xFF0
 22084                           indf0	equ	0xFEF
 22085                           postinc0	equ	0xFEE
 22086                           fsr0h	equ	0xFEA
 22087                           fsr0l	equ	0xFE9
 22088                           wreg	equ	0xFE8
 22089                           indf1	equ	0xFE7
 22090                           postinc1	equ	0xFE6
 22091                           postdec1	equ	0xFE5
 22092                           plusw1	equ	0xFE3
 22093                           fsr1h	equ	0xFE2
 22094                           fsr1l	equ	0xFE1
 22095                           indf2	equ	0xFDF
 22096                           postinc2	equ	0xFDE
 22097                           postdec2	equ	0xFDD
 22098                           plusw2	equ	0xFDB
 22099                           fsr2h	equ	0xFDA
 22100                           fsr2l	equ	0xFD9
 22101                           status	equ	0xFD8
 22102                           
 22103 ;; *************** function _escreve_dado_SPI *****************
 22104 ;; Defined at:
 22105 ;;		line 67 in file "bibliotecas/SHRC.c"
 22106 ;; Parameters:    Size  Location     Type
 22107 ;;  data_to_shrc    1    wreg     unsigned char 
 22108 ;; Auto vars:     Size  Location     Type
 22109 ;;  data_to_shrc    1   26[COMRAM] unsigned char 
 22110 ;;  contador        1   25[COMRAM] unsigned char 
 22111 ;; Return value:  Size  Location     Type
 22112 ;;                  1    wreg      void 
 22113 ;; Registers used:
 22114 ;;		wreg, status,2, status,0
 22115 ;; Tracked objects:
 22116 ;;		On entry : 0/0
 22117 ;;		On exit  : 0/0
 22118 ;;		Unchanged: 0/0
 22119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22120 ;;      Params:         0       0       0       0       0       0       0       0       0
 22121 ;;      Locals:         2       0       0       0       0       0       0       0       0
 22122 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22123 ;;      Totals:         2       0       0       0       0       0       0       0       0
 22124 ;;Total ram usage:        2 bytes
 22125 ;; Hardware stack levels used:    1
 22126 ;; Hardware stack levels required when called:    2
 22127 ;; This function calls:
 22128 ;;		Nothing
 22129 ;; This function is called by:
 22130 ;;		_dummy_clocks
 22131 ;;		_proceed
 22132 ;;		_command
 22133 ;;		_sdc_disk_initialize
 22134 ;;		_sdc_disk_write
 22135 ;; This function uses a non-reentrant model
 22136 ;;
 22137                           
 22138                           	psect	text80
 22139  0056D2                     __ptext80:
 22140                           	opt stack 0
 22141  0056D2                     _escreve_dado_SPI:
 22142                           	opt stack 25
 22143                           
 22144                           ;incstack = 0
 22145                           ;escreve_dado_SPI@data_to_shrc stored from wreg
 22146  0056D2  6E1B               	movwf	escreve_dado_SPI@data_to_shrc,c
 22147                           
 22148                           ;SHRC.c: 69: LATBbits.LATB7 = 0;
 22149  0056D4  9E8A               	bcf	3978,7,c	;volatile
 22150                           
 22151                           ;SHRC.c: 70: unsigned char contador=0;
 22152  0056D6  0E00               	movlw	0
 22153  0056D8  6E1A               	movwf	escreve_dado_SPI@contador,c
 22154                           
 22155                           ;SHRC.c: 71: (INTCONbits.GIE = 0);
 22156  0056DA  9EF2               	bcf	intcon,7,c	;volatile
 22157                           
 22158                           ;SHRC.c: 73: while(contador<=7)
 22159  0056DC  D018               	goto	l342
 22160  0056DE                     
 22161                           ;SHRC.c: 74: {
 22162                           ;SHRC.c: 75: if((data_to_shrc & 0x80) == 0)
 22163  0056DE  BE1B               	btfsc	escreve_dado_SPI@data_to_shrc,7,c
 22164  0056E0  D002               	goto	l344
 22165                           
 22166                           ;SHRC.c: 76: {
 22167                           ;SHRC.c: 77: LATBbits.LATB7 = 0;
 22168  0056E2  9E8A               	bcf	3978,7,c	;volatile
 22169                           
 22170                           ;SHRC.c: 78: }
 22171  0056E4  D001               	goto	l345
 22172  0056E6                     l344:
 22173                           
 22174                           ;SHRC.c: 79: else
 22175                           ;SHRC.c: 80: {
 22176                           ;SHRC.c: 81: LATBbits.LATB7 = 1;
 22177  0056E6  8E8A               	bsf	3978,7,c	;volatile
 22178  0056E8                     l345:
 22179                           
 22180                           ;SHRC.c: 82: }
 22181                           ;SHRC.c: 83: data_to_shrc = data_to_shrc << 1;
 22182  0056E8  501B               	movf	escreve_dado_SPI@data_to_shrc,w,c
 22183  0056EA  241B               	addwf	escreve_dado_SPI@data_to_shrc,w,c
 22184  0056EC  6E1B               	movwf	escreve_dado_SPI@data_to_shrc,c
 22185                           
 22186                           ;SHRC.c: 84: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 22187  0056EE  0E0A               	movlw	10
 22188  0056F0                     u23547:
 22189  0056F0  2EE8               	decfsz	wreg,f,c
 22190  0056F2  D7FE               	bra	u23547
 22191                           
 22192                           ;SHRC.c: 85: LATBbits.LATB6 = 1;
 22193  0056F4  8C8A               	bsf	3978,6,c	;volatile
 22194                           
 22195                           ;SHRC.c: 86: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 22196  0056F6  0E0A               	movlw	10
 22197  0056F8                     u23557:
 22198  0056F8  2EE8               	decfsz	wreg,f,c
 22199  0056FA  D7FE               	bra	u23557
 22200                           
 22201                           ;SHRC.c: 87: LATBbits.LATB7 = 0;
 22202  0056FC  9E8A               	bcf	3978,7,c	;volatile
 22203                           
 22204                           ;SHRC.c: 88: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 22205  0056FE  0E0A               	movlw	10
 22206  005700                     u23567:
 22207  005700  2EE8               	decfsz	wreg,f,c
 22208  005702  D7FE               	bra	u23567
 22209                           
 22210                           ;SHRC.c: 89: LATBbits.LATB6 = 0;
 22211  005704  9C8A               	bcf	3978,6,c	;volatile
 22212                           
 22213                           ;SHRC.c: 90: _delay((unsigned long)((2.5)*(48000000/4000000.0)));
 22214  005706  0E0A               	movlw	10
 22215  005708                     u23577:
 22216  005708  2EE8               	decfsz	wreg,f,c
 22217  00570A  D7FE               	bra	u23577
 22218                           
 22219                           ;SHRC.c: 91: contador++;
 22220  00570C  2A1A               	incf	escreve_dado_SPI@contador,f,c
 22221  00570E                     l342:
 22222  00570E  0E07               	movlw	7
 22223  005710  641A               	cpfsgt	escreve_dado_SPI@contador,c
 22224  005712  D7E5               	goto	l343
 22225                           
 22226                           ;SHRC.c: 92: }
 22227                           ;SHRC.c: 93: (INTCONbits.GIE = 1);
 22228  005714  8EF2               	bsf	intcon,7,c	;volatile
 22229  005716  0012               	return		;funcret
 22230  005718                     __end_of_escreve_dado_SPI:
 22231                           	opt stack 0
 22232                           tosu	equ	0xFFF
 22233                           tosh	equ	0xFFE
 22234                           tosl	equ	0xFFD
 22235                           pclath	equ	0xFFA
 22236                           tblptru	equ	0xFF8
 22237                           tblptrh	equ	0xFF7
 22238                           tblptrl	equ	0xFF6
 22239                           tablat	equ	0xFF5
 22240                           prodh	equ	0xFF4
 22241                           prodl	equ	0xFF3
 22242                           intcon	equ	0xFF2
 22243                           intcon2	equ	0xFF1
 22244                           intcon3	equ	0xFF0
 22245                           indf0	equ	0xFEF
 22246                           postinc0	equ	0xFEE
 22247                           fsr0h	equ	0xFEA
 22248                           fsr0l	equ	0xFE9
 22249                           wreg	equ	0xFE8
 22250                           indf1	equ	0xFE7
 22251                           postinc1	equ	0xFE6
 22252                           postdec1	equ	0xFE5
 22253                           plusw1	equ	0xFE3
 22254                           fsr1h	equ	0xFE2
 22255                           fsr1l	equ	0xFE1
 22256                           indf2	equ	0xFDF
 22257                           postinc2	equ	0xFDE
 22258                           postdec2	equ	0xFDD
 22259                           plusw2	equ	0xFDB
 22260                           fsr2h	equ	0xFDA
 22261                           fsr2l	equ	0xFD9
 22262                           status	equ	0xFD8
 22263                           
 22264 ;; *************** function _get_fattime *****************
 22265 ;; Defined at:
 22266 ;;		line 3647 in file "bibliotecas/ff.c"
 22267 ;; Parameters:    Size  Location     Type
 22268 ;;		None
 22269 ;; Auto vars:     Size  Location     Type
 22270 ;;  f_time          9   29[COMRAM] struct .
 22271 ;; Return value:  Size  Location     Type
 22272 ;;                  4   25[COMRAM] unsigned long 
 22273 ;; Registers used:
 22274 ;;		wreg, status,2, status,0
 22275 ;; Tracked objects:
 22276 ;;		On entry : 0/0
 22277 ;;		On exit  : 0/0
 22278 ;;		Unchanged: 0/0
 22279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22280 ;;      Params:         4       0       0       0       0       0       0       0       0
 22281 ;;      Locals:         9       0       0       0       0       0       0       0       0
 22282 ;;      Temps:          0      38       0       0       0       0       0       0       0
 22283 ;;      Totals:        13      38       0       0       0       0       0       0       0
 22284 ;;Total ram usage:       51 bytes
 22285 ;; Hardware stack levels used:    1
 22286 ;; Hardware stack levels required when called:    2
 22287 ;; This function calls:
 22288 ;;		Nothing
 22289 ;; This function is called by:
 22290 ;;		_f_open
 22291 ;;		_f_sync
 22292 ;;		_f_mkdir
 22293 ;; This function uses a non-reentrant model
 22294 ;;
 22295                           
 22296                           	psect	text81
 22297  0044D4                     __ptext81:
 22298                           	opt stack 0
 22299  0044D4                     _get_fattime:
 22300                           	opt stack 25
 22301                           
 22302                           ;ff.c: 3649: fat_time f_time;
 22303                           ;ff.c: 3651: return (DWORD)(f_time.ano ) << 25 |
 22304                           ;ff.c: 3652: (DWORD)(f_time.mes) << 21 |
 22305                           ;ff.c: 3653: (DWORD)(f_time.mes) << 16 |
 22306                           ;ff.c: 3654: (DWORD)(f_time.hora) << 11 |
 22307                           ;ff.c: 3655: (DWORD)(f_time.min) << 5 |
 22308                           ;ff.c: 3656: (DWORD)(f_time.seg) >> 1;
 22309                           
 22310                           ;incstack = 0
 22311  0044D4  90D8               	bcf	status,0,c
 22312  0044D6  3023               	rrcf	get_fattime@f_time+5,w,c
 22313  0044D8  0100               	movlb	0	; () banked
 22314  0044DA  6F61               	movwf	(??_get_fattime+1)& (0+255),b
 22315  0044DC  3022               	rrcf	get_fattime@f_time+4,w,c
 22316  0044DE  6F60               	movwf	??_get_fattime& (0+255),b
 22317  0044E0  5020               	movf	get_fattime@f_time+2,w,c
 22318  0044E2  6F62               	movwf	(??_get_fattime+2)& (0+255),b
 22319  0044E4  5021               	movf	get_fattime@f_time+3,w,c
 22320  0044E6  6F63               	movwf	(??_get_fattime+3)& (0+255),b
 22321  0044E8  6B64               	clrf	(??_get_fattime+4)& (0+255),b
 22322  0044EA  6B65               	clrf	(??_get_fattime+5)& (0+255),b
 22323  0044EC  0E05               	movlw	5
 22324  0044EE                     u18805:
 22325  0044EE  90D8               	bcf	status,0,c
 22326  0044F0  3762               	rlcf	(??_get_fattime+2)& (0+255),f,b
 22327  0044F2  3763               	rlcf	(??_get_fattime+3)& (0+255),f,b
 22328  0044F4  3764               	rlcf	(??_get_fattime+4)& (0+255),f,b
 22329  0044F6  3765               	rlcf	(??_get_fattime+5)& (0+255),f,b
 22330  0044F8  2EE8               	decfsz	wreg,f,c
 22331  0044FA  D7F9               	goto	u18805
 22332  0044FC  501E               	movf	get_fattime@f_time,w,c
 22333  0044FE  6F66               	movwf	(??_get_fattime+6)& (0+255),b
 22334  004500  501F               	movf	get_fattime@f_time+1,w,c
 22335  004502  6F67               	movwf	(??_get_fattime+7)& (0+255),b
 22336  004504  6B68               	clrf	(??_get_fattime+8)& (0+255),b
 22337  004506  6B69               	clrf	(??_get_fattime+9)& (0+255),b
 22338  004508  0E0B               	movlw	11
 22339  00450A                     u18815:
 22340  00450A  90D8               	bcf	status,0,c
 22341  00450C  3766               	rlcf	(??_get_fattime+6)& (0+255),f,b
 22342  00450E  3767               	rlcf	(??_get_fattime+7)& (0+255),f,b
 22343  004510  3768               	rlcf	(??_get_fattime+8)& (0+255),f,b
 22344  004512  3769               	rlcf	(??_get_fattime+9)& (0+255),f,b
 22345  004514  2EE8               	decfsz	wreg,f,c
 22346  004516  D7F9               	goto	u18815
 22347  004518  C025  F06A         	movff	get_fattime@f_time+7,??_get_fattime+10
 22348  00451C  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 22349  00451E  6B6C               	clrf	(??_get_fattime+12)& (0+255),b
 22350  004520  6B6D               	clrf	(??_get_fattime+13)& (0+255),b
 22351  004522  C06B  F06D         	movff	??_get_fattime+11,??_get_fattime+13
 22352  004526  C06A  F06C         	movff	??_get_fattime+10,??_get_fattime+12
 22353  00452A  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 22354  00452C  6B6A               	clrf	(??_get_fattime+10)& (0+255),b
 22355  00452E  C025  F06E         	movff	get_fattime@f_time+7,??_get_fattime+14
 22356  004532  6B6F               	clrf	(??_get_fattime+15)& (0+255),b
 22357  004534  6B70               	clrf	(??_get_fattime+16)& (0+255),b
 22358  004536  6B71               	clrf	(??_get_fattime+17)& (0+255),b
 22359  004538  0E15               	movlw	21
 22360  00453A                     u18825:
 22361  00453A  90D8               	bcf	status,0,c
 22362  00453C  376E               	rlcf	(??_get_fattime+14)& (0+255),f,b
 22363  00453E  376F               	rlcf	(??_get_fattime+15)& (0+255),f,b
 22364  004540  3770               	rlcf	(??_get_fattime+16)& (0+255),f,b
 22365  004542  3771               	rlcf	(??_get_fattime+17)& (0+255),f,b
 22366  004544  2EE8               	decfsz	wreg,f,c
 22367  004546  D7F9               	goto	u18825
 22368  004548  C026  F072         	movff	get_fattime@f_time+8,??_get_fattime+18
 22369  00454C  6B73               	clrf	(??_get_fattime+19)& (0+255),b
 22370  00454E  6B74               	clrf	(??_get_fattime+20)& (0+255),b
 22371  004550  6B75               	clrf	(??_get_fattime+21)& (0+255),b
 22372  004552  0E19               	movlw	25
 22373  004554                     u18835:
 22374  004554  90D8               	bcf	status,0,c
 22375  004556  3772               	rlcf	(??_get_fattime+18)& (0+255),f,b
 22376  004558  3773               	rlcf	(??_get_fattime+19)& (0+255),f,b
 22377  00455A  3774               	rlcf	(??_get_fattime+20)& (0+255),f,b
 22378  00455C  3775               	rlcf	(??_get_fattime+21)& (0+255),f,b
 22379  00455E  2EE8               	decfsz	wreg,f,c
 22380  004560  D7F9               	goto	u18835
 22381  004562  516E               	movf	(??_get_fattime+14)& (0+255),w,b
 22382  004564  1172               	iorwf	(??_get_fattime+18)& (0+255),w,b
 22383  004566  6F76               	movwf	(??_get_fattime+22)& (0+255),b
 22384  004568  516F               	movf	(??_get_fattime+15)& (0+255),w,b
 22385  00456A  1173               	iorwf	(??_get_fattime+19)& (0+255),w,b
 22386  00456C  6F77               	movwf	(??_get_fattime+23)& (0+255),b
 22387  00456E  5170               	movf	(??_get_fattime+16)& (0+255),w,b
 22388  004570  1174               	iorwf	(??_get_fattime+20)& (0+255),w,b
 22389  004572  6F78               	movwf	(??_get_fattime+24)& (0+255),b
 22390  004574  5171               	movf	(??_get_fattime+17)& (0+255),w,b
 22391  004576  1175               	iorwf	(??_get_fattime+21)& (0+255),w,b
 22392  004578  6F79               	movwf	(??_get_fattime+25)& (0+255),b
 22393  00457A  516A               	movf	(??_get_fattime+10)& (0+255),w,b
 22394  00457C  1176               	iorwf	(??_get_fattime+22)& (0+255),w,b
 22395  00457E  6F7A               	movwf	(??_get_fattime+26)& (0+255),b
 22396  004580  516B               	movf	(??_get_fattime+11)& (0+255),w,b
 22397  004582  1177               	iorwf	(??_get_fattime+23)& (0+255),w,b
 22398  004584  6F7B               	movwf	(??_get_fattime+27)& (0+255),b
 22399  004586  516C               	movf	(??_get_fattime+12)& (0+255),w,b
 22400  004588  1178               	iorwf	(??_get_fattime+24)& (0+255),w,b
 22401  00458A  6F7C               	movwf	(??_get_fattime+28)& (0+255),b
 22402  00458C  516D               	movf	(??_get_fattime+13)& (0+255),w,b
 22403  00458E  1179               	iorwf	(??_get_fattime+25)& (0+255),w,b
 22404  004590  6F7D               	movwf	(??_get_fattime+29)& (0+255),b
 22405  004592  5166               	movf	(??_get_fattime+6)& (0+255),w,b
 22406  004594  117A               	iorwf	(??_get_fattime+26)& (0+255),w,b
 22407  004596  6F7E               	movwf	(??_get_fattime+30)& (0+255),b
 22408  004598  5167               	movf	(??_get_fattime+7)& (0+255),w,b
 22409  00459A  117B               	iorwf	(??_get_fattime+27)& (0+255),w,b
 22410  00459C  6F7F               	movwf	(??_get_fattime+31)& (0+255),b
 22411  00459E  5168               	movf	(??_get_fattime+8)& (0+255),w,b
 22412  0045A0  117C               	iorwf	(??_get_fattime+28)& (0+255),w,b
 22413  0045A2  6F80               	movwf	(??_get_fattime+32)& (0+255),b
 22414  0045A4  5169               	movf	(??_get_fattime+9)& (0+255),w,b
 22415  0045A6  117D               	iorwf	(??_get_fattime+29)& (0+255),w,b
 22416  0045A8  6F81               	movwf	(??_get_fattime+33)& (0+255),b
 22417  0045AA  5162               	movf	(??_get_fattime+2)& (0+255),w,b
 22418  0045AC  117E               	iorwf	(??_get_fattime+30)& (0+255),w,b
 22419  0045AE  6F82               	movwf	(??_get_fattime+34)& (0+255),b
 22420  0045B0  5163               	movf	(??_get_fattime+3)& (0+255),w,b
 22421  0045B2  117F               	iorwf	(??_get_fattime+31)& (0+255),w,b
 22422  0045B4  6F83               	movwf	(??_get_fattime+35)& (0+255),b
 22423  0045B6  5164               	movf	(??_get_fattime+4)& (0+255),w,b
 22424  0045B8  1180               	iorwf	(??_get_fattime+32)& (0+255),w,b
 22425  0045BA  6F84               	movwf	(??_get_fattime+36)& (0+255),b
 22426  0045BC  5165               	movf	(??_get_fattime+5)& (0+255),w,b
 22427  0045BE  1181               	iorwf	(??_get_fattime+33)& (0+255),w,b
 22428  0045C0  6F85               	movwf	(??_get_fattime+37)& (0+255),b
 22429  0045C2  5160               	movf	??_get_fattime& (0+255),w,b
 22430  0045C4  1182               	iorwf	(??_get_fattime+34)& (0+255),w,b
 22431  0045C6  6E1A               	movwf	?_get_fattime,c
 22432  0045C8  5161               	movf	(??_get_fattime+1)& (0+255),w,b
 22433  0045CA  1183               	iorwf	(??_get_fattime+35)& (0+255),w,b
 22434  0045CC  6E1B               	movwf	?_get_fattime+1,c
 22435  0045CE  0E00               	movlw	0
 22436  0045D0  1184               	iorwf	(??_get_fattime+36)& (0+255),w,b
 22437  0045D2  6E1C               	movwf	?_get_fattime+2,c
 22438  0045D4  0E00               	movlw	0
 22439  0045D6  1185               	iorwf	(??_get_fattime+37)& (0+255),w,b
 22440  0045D8  6E1D               	movwf	?_get_fattime+3,c
 22441  0045DA  0012               	return	
 22442  0045DC                     __end_of_get_fattime:
 22443                           	opt stack 0
 22444                           tosu	equ	0xFFF
 22445                           tosh	equ	0xFFE
 22446                           tosl	equ	0xFFD
 22447                           pclath	equ	0xFFA
 22448                           tblptru	equ	0xFF8
 22449                           tblptrh	equ	0xFF7
 22450                           tblptrl	equ	0xFF6
 22451                           tablat	equ	0xFF5
 22452                           prodh	equ	0xFF4
 22453                           prodl	equ	0xFF3
 22454                           intcon	equ	0xFF2
 22455                           intcon2	equ	0xFF1
 22456                           intcon3	equ	0xFF0
 22457                           indf0	equ	0xFEF
 22458                           postinc0	equ	0xFEE
 22459                           fsr0h	equ	0xFEA
 22460                           fsr0l	equ	0xFE9
 22461                           wreg	equ	0xFE8
 22462                           indf1	equ	0xFE7
 22463                           postinc1	equ	0xFE6
 22464                           postdec1	equ	0xFE5
 22465                           plusw1	equ	0xFE3
 22466                           fsr1h	equ	0xFE2
 22467                           fsr1l	equ	0xFE1
 22468                           indf2	equ	0xFDF
 22469                           postinc2	equ	0xFDE
 22470                           postdec2	equ	0xFDD
 22471                           plusw2	equ	0xFDB
 22472                           fsr2h	equ	0xFDA
 22473                           fsr2l	equ	0xFD9
 22474                           status	equ	0xFD8
 22475                           
 22476 ;; *************** function _isr *****************
 22477 ;; Defined at:
 22478 ;;		line 96 in file "main.c"
 22479 ;; Parameters:    Size  Location     Type
 22480 ;;		None
 22481 ;; Auto vars:     Size  Location     Type
 22482 ;;  cont            1   24[COMRAM] unsigned char 
 22483 ;; Return value:  Size  Location     Type
 22484 ;;                  1    wreg      void 
 22485 ;; Registers used:
 22486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22487 ;; Tracked objects:
 22488 ;;		On entry : 0/0
 22489 ;;		On exit  : 0/0
 22490 ;;		Unchanged: 0/0
 22491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22492 ;;      Params:         0       0       0       0       0       0       0       0       0
 22493 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22494 ;;      Temps:         20       0       0       0       0       0       0       0       0
 22495 ;;      Totals:        21       0       0       0       0       0       0       0       0
 22496 ;;Total ram usage:       21 bytes
 22497 ;; Hardware stack levels used:    1
 22498 ;; Hardware stack levels required when called:    1
 22499 ;; This function calls:
 22500 ;;		_recebe_dado_uart
 22501 ;;		i2_write_timer_zero
 22502 ;; This function is called by:
 22503 ;;		Interrupt level 2
 22504 ;; This function uses a non-reentrant model
 22505 ;;
 22506                           
 22507                           	psect	intcode
 22508  000008                     __pintcode:
 22509                           	opt stack 0
 22510  000008                     _isr:
 22511                           	opt stack 14
 22512                           
 22513                           ; BSR set to: 0
 22514                           ;incstack = 0
 22515  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22516  00000A  EDCD  F020         	call	int_func,f	;refresh shadow registers
 22517                           tosu	equ	0xFFF
 22518                           tosh	equ	0xFFE
 22519                           tosl	equ	0xFFD
 22520                           pclath	equ	0xFFA
 22521                           tblptru	equ	0xFF8
 22522                           tblptrh	equ	0xFF7
 22523                           tblptrl	equ	0xFF6
 22524                           tablat	equ	0xFF5
 22525                           prodh	equ	0xFF4
 22526                           prodl	equ	0xFF3
 22527                           intcon	equ	0xFF2
 22528                           intcon2	equ	0xFF1
 22529                           intcon3	equ	0xFF0
 22530                           indf0	equ	0xFEF
 22531                           postinc0	equ	0xFEE
 22532                           fsr0h	equ	0xFEA
 22533                           fsr0l	equ	0xFE9
 22534                           wreg	equ	0xFE8
 22535                           indf1	equ	0xFE7
 22536                           postinc1	equ	0xFE6
 22537                           postdec1	equ	0xFE5
 22538                           plusw1	equ	0xFE3
 22539                           fsr1h	equ	0xFE2
 22540                           fsr1l	equ	0xFE1
 22541                           indf2	equ	0xFDF
 22542                           postinc2	equ	0xFDE
 22543                           postdec2	equ	0xFDD
 22544                           plusw2	equ	0xFDB
 22545                           fsr2h	equ	0xFDA
 22546                           fsr2l	equ	0xFD9
 22547                           status	equ	0xFD8
 22548                           
 22549                           	psect	intcode_body
 22550  00419A                     __pintcode_body:
 22551                           	opt stack 14
 22552  00419A                     int_func:
 22553                           	opt stack 14
 22554  00419A  0006               	pop		; remove dummy address from shadow register refresh
 22555  00419C  CFFA F007          	movff	pclath,??_isr+2
 22556  0041A0  CFFB F008          	movff	pclatu,??_isr+3
 22557  0041A4  CFE9 F009          	movff	fsr0l,??_isr+4
 22558  0041A8  CFEA F00A          	movff	fsr0h,??_isr+5
 22559  0041AC  CFE1 F00B          	movff	fsr1l,??_isr+6
 22560  0041B0  CFE2 F00C          	movff	fsr1h,??_isr+7
 22561  0041B4  CFD9 F00D          	movff	fsr2l,??_isr+8
 22562  0041B8  CFDA F00E          	movff	fsr2h,??_isr+9
 22563  0041BC  CFF3 F00F          	movff	prodl,??_isr+10
 22564  0041C0  CFF4 F010          	movff	prodh,??_isr+11
 22565  0041C4  CFF6 F011          	movff	tblptrl,??_isr+12
 22566  0041C8  CFF7 F012          	movff	tblptrh,??_isr+13
 22567  0041CC  CFF8 F013          	movff	tblptru,??_isr+14
 22568  0041D0  CFF5 F014          	movff	tablat,??_isr+15
 22569  0041D4  C046  F015         	movff	btemp,??_isr+16
 22570  0041D8  C047  F016         	movff	btemp+1,??_isr+17
 22571  0041DC  C048  F017         	movff	btemp+2,??_isr+18
 22572  0041E0  C049  F018         	movff	btemp+3,??_isr+19
 22573                           
 22574                           ;main.c: 98: unsigned char cont;
 22575                           ;main.c: 101: if (PIE1bits.RCIE && PIR1bits.RCIF)
 22576  0041E4  BA9D               	btfsc	3997,5,c	;volatile
 22577  0041E6  AA9E               	btfss	3998,5,c	;volatile
 22578  0041E8  D004               	goto	i2l61
 22579                           
 22580                           ;main.c: 102: {
 22581                           ;main.c: 103: data_uart_recebe = recebe_dado_uart();
 22582  0041EA  EC91  F02D         	call	_recebe_dado_uart	;wreg free
 22583  0041EE  6E45               	movwf	_data_uart_recebe,c
 22584                           
 22585                           ;main.c: 104: PIR1bits.RCIF = 0;
 22586  0041F0  9A9E               	bcf	3998,5,c	;volatile
 22587  0041F2                     i2l61:
 22588                           
 22589                           ;main.c: 109: }
 22590                           ;main.c: 112: unsigned char cont;
 22591                           ;main.c: 114: if (TMR0IF && T0IF)
 22592  0041F2  B4F2               	btfsc	intcon,2,c	;volatile
 22593  0041F4  A4F2               	btfss	intcon,2,c	;volatile
 22594  0041F6  D036               	goto	i2l62
 22595                           
 22596                           ;main.c: 115: {
 22597                           ;main.c: 116: INTCONbits.TMR0IF = 0;
 22598  0041F8  94F2               	bcf	intcon,2,c	;volatile
 22599                           
 22600                           ;main.c: 117: sinaliza_int_timer = 1;
 22601  0041FA  0E01               	movlw	1
 22602  0041FC  6E44               	movwf	_sinaliza_int_timer,c
 22603                           
 22604                           ;main.c: 119: for(cont= 0; cont<2;cont++)
 22605  0041FE  0E00               	movlw	0
 22606  004200  6E19               	movwf	isr@cont,c
 22607  004202                     i2l10628:
 22608  004202  0E01               	movlw	1
 22609  004204  6419               	cpfsgt	isr@cont,c
 22610  004206  D001               	goto	i2l63
 22611  004208  D019               	goto	i2u1300_40
 22612  00420A                     i2l63:
 22613                           
 22614                           ;main.c: 120: {
 22615                           ;main.c: 121: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 22616  00420A  5019               	movf	isr@cont,w,c
 22617  00420C  0D02               	mullw	2
 22618  00420E  0E34               	movlw	low _tempo_tarefa
 22619  004210  24F3               	addwf	prodl,w,c
 22620  004212  6ED9               	movwf	fsr2l,c
 22621  004214  0E01               	movlw	high _tempo_tarefa
 22622  004216  20F4               	addwfc	prodh,w,c
 22623  004218  6EDA               	movwf	fsr2h,c
 22624  00421A  50DE               	movf	postinc2,w,c
 22625  00421C  10DE               	iorwf	postinc2,w,c
 22626  00421E  B4D8               	btfsc	status,2,c
 22627  004220  D00B               	goto	i2l65
 22628  004222  5019               	movf	isr@cont,w,c
 22629  004224  0D02               	mullw	2
 22630  004226  0E34               	movlw	low _tempo_tarefa
 22631  004228  24F3               	addwf	prodl,w,c
 22632  00422A  6ED9               	movwf	fsr2l,c
 22633  00422C  0E01               	movlw	high _tempo_tarefa
 22634  00422E  20F4               	addwfc	prodh,w,c
 22635  004230  6EDA               	movwf	fsr2h,c
 22636  004232  06DE               	decf	postinc2,f,c
 22637  004234  0E00               	movlw	0
 22638  004236  5ADD               	subwfb	postdec2,f,c
 22639  004238                     i2l65:
 22640  004238  2A19               	incf	isr@cont,f,c
 22641  00423A  D7E3               	goto	i2l10628
 22642  00423C                     i2u1300_40:
 22643                           
 22644                           ;main.c: 122: }
 22645                           ;main.c: 125: if(tarefa_em_execucao == 1)
 22646  00423C  0443               	decf	_tarefa_em_execucao,w,c	;volatile
 22647  00423E  A4D8               	btfss	status,2,c
 22648  004240  D00B               	goto	i2l67
 22649                           
 22650                           ;main.c: 126: {
 22651                           ;main.c: 127: timeout_tarefa--;
 22652  004242  0636               	decf	_timeout_tarefa,f,c
 22653  004244  A0D8               	btfss	status,0,c
 22654  004246  0637               	decf	_timeout_tarefa+1,f,c
 22655                           
 22656                           ;main.c: 128: if(!timeout_tarefa)
 22657  004248  5036               	movf	_timeout_tarefa,w,c
 22658  00424A  1037               	iorwf	_timeout_tarefa+1,w,c
 22659  00424C  A4D8               	btfss	status,2,c
 22660  00424E  D004               	goto	i2l67
 22661                           
 22662                           ;main.c: 129: {
 22663                           ;main.c: 131: PCLATH = 0;
 22664  004250  0E00               	movlw	0
 22665  004252  6EFA               	movwf	pclath,c	;volatile
 22666                           
 22667                           ;main.c: 132: PCL = 0;
 22668  004254  0E00               	movlw	0
 22669  004256  6EF9               	movwf	pcl,c	;volatile
 22670  004258                     i2l67:
 22671                           
 22672                           ;main.c: 133: }
 22673                           ;main.c: 134: }
 22674                           ;main.c: 137: write_timer_zero(0x0083);
 22675  004258  0E00               	movlw	0
 22676  00425A  6E02               	movwf	i2write_timer_zero@timer0+1,c
 22677  00425C  0E83               	movlw	131
 22678  00425E  6E01               	movwf	i2write_timer_zero@timer0,c
 22679  004260  EC88  F02D         	call	i2_write_timer_zero	;wreg free
 22680  004264                     i2l62:
 22681                           
 22682                           ;main.c: 139: }
 22683                           ;main.c: 141: if (INT0IF && INT0IE)
 22684  004264  B2F2               	btfsc	intcon,1,c	;volatile
 22685  004266  A8F2               	btfss	intcon,4,c	;volatile
 22686  004268  D001               	goto	i2l68
 22687                           
 22688                           ;main.c: 142: {
 22689                           ;main.c: 143: INT0IF = 0;
 22690  00426A  92F2               	bcf	intcon,1,c	;volatile
 22691  00426C                     i2l68:
 22692  00426C  C018  F049         	movff	??_isr+19,btemp+3
 22693  004270  C017  F048         	movff	??_isr+18,btemp+2
 22694  004274  C016  F047         	movff	??_isr+17,btemp+1
 22695  004278  C015  F046         	movff	??_isr+16,btemp
 22696  00427C  C014  FFF5         	movff	??_isr+15,tablat
 22697  004280  C013  FFF8         	movff	??_isr+14,tblptru
 22698  004284  C012  FFF7         	movff	??_isr+13,tblptrh
 22699  004288  C011  FFF6         	movff	??_isr+12,tblptrl
 22700  00428C  C010  FFF4         	movff	??_isr+11,prodh
 22701  004290  C00F  FFF3         	movff	??_isr+10,prodl
 22702  004294  C00E  FFDA         	movff	??_isr+9,fsr2h
 22703  004298  C00D  FFD9         	movff	??_isr+8,fsr2l
 22704  00429C  C00C  FFE2         	movff	??_isr+7,fsr1h
 22705  0042A0  C00B  FFE1         	movff	??_isr+6,fsr1l
 22706  0042A4  C00A  FFEA         	movff	??_isr+5,fsr0h
 22707  0042A8  C009  FFE9         	movff	??_isr+4,fsr0l
 22708  0042AC  C008  FFFB         	movff	??_isr+3,pclatu
 22709  0042B0  C007  FFFA         	movff	??_isr+2,pclath
 22710  0042B4  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22711  0042B6  0011               	retfie		f
 22712  0042B8                     __end_of_isr:
 22713                           	opt stack 0
 22714                           tosu	equ	0xFFF
 22715                           tosh	equ	0xFFE
 22716                           tosl	equ	0xFFD
 22717                           pclatu	equ	0xFFB
 22718                           pclath	equ	0xFFA
 22719                           pcl	equ	0xFF9
 22720                           tblptru	equ	0xFF8
 22721                           tblptrh	equ	0xFF7
 22722                           tblptrl	equ	0xFF6
 22723                           tablat	equ	0xFF5
 22724                           prodh	equ	0xFF4
 22725                           prodl	equ	0xFF3
 22726                           intcon	equ	0xFF2
 22727                           intcon2	equ	0xFF1
 22728                           intcon3	equ	0xFF0
 22729                           indf0	equ	0xFEF
 22730                           postinc0	equ	0xFEE
 22731                           fsr0h	equ	0xFEA
 22732                           fsr0l	equ	0xFE9
 22733                           wreg	equ	0xFE8
 22734                           indf1	equ	0xFE7
 22735                           postinc1	equ	0xFE6
 22736                           postdec1	equ	0xFE5
 22737                           plusw1	equ	0xFE3
 22738                           fsr1h	equ	0xFE2
 22739                           fsr1l	equ	0xFE1
 22740                           indf2	equ	0xFDF
 22741                           postinc2	equ	0xFDE
 22742                           postdec2	equ	0xFDD
 22743                           plusw2	equ	0xFDB
 22744                           fsr2h	equ	0xFDA
 22745                           fsr2l	equ	0xFD9
 22746                           status	equ	0xFD8
 22747                           
 22748 ;; *************** function i2_write_timer_zero *****************
 22749 ;; Defined at:
 22750 ;;		line 138 in file "bibliotecas/hardware.c"
 22751 ;; Parameters:    Size  Location     Type
 22752 ;;  timer0          2    0[COMRAM] unsigned int 
 22753 ;; Auto vars:     Size  Location     Type
 22754 ;;  write_timer_    2    2[COMRAM] struct Timers
 22755 ;; Return value:  Size  Location     Type
 22756 ;;                  1    wreg      void 
 22757 ;; Registers used:
 22758 ;;		None
 22759 ;; Tracked objects:
 22760 ;;		On entry : 0/0
 22761 ;;		On exit  : 0/0
 22762 ;;		Unchanged: 0/0
 22763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22764 ;;      Params:         2       0       0       0       0       0       0       0       0
 22765 ;;      Locals:         2       0       0       0       0       0       0       0       0
 22766 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22767 ;;      Totals:         4       0       0       0       0       0       0       0       0
 22768 ;;Total ram usage:        4 bytes
 22769 ;; Hardware stack levels used:    1
 22770 ;; This function calls:
 22771 ;;		Nothing
 22772 ;; This function is called by:
 22773 ;;		_isr
 22774 ;; This function uses a non-reentrant model
 22775 ;;
 22776                           
 22777                           	psect	text83
 22778  005B10                     __ptext83:
 22779                           	opt stack 0
 22780  005B10                     i2_write_timer_zero:
 22781                           	opt stack 14
 22782                           
 22783                           ;hardware.c: 140: union Timers timer;
 22784                           ;hardware.c: 142: timer.lt = timer0;
 22785                           
 22786                           ;incstack = 0
 22787  005B10  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 22788  005B14  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 22789                           
 22790                           ;hardware.c: 144: TMR0H = timer.bt[1];
 22791  005B18  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 22792                           
 22793                           ;hardware.c: 145: TMR0L = timer.bt[0];
 22794  005B1C  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 22795  005B20  0012               	return		;funcret
 22796  005B22                     __end_ofi2_write_timer_zero:
 22797                           	opt stack 0
 22798                           tosu	equ	0xFFF
 22799                           tosh	equ	0xFFE
 22800                           tosl	equ	0xFFD
 22801                           pclatu	equ	0xFFB
 22802                           pclath	equ	0xFFA
 22803                           pcl	equ	0xFF9
 22804                           tblptru	equ	0xFF8
 22805                           tblptrh	equ	0xFF7
 22806                           tblptrl	equ	0xFF6
 22807                           tablat	equ	0xFF5
 22808                           prodh	equ	0xFF4
 22809                           prodl	equ	0xFF3
 22810                           intcon	equ	0xFF2
 22811                           intcon2	equ	0xFF1
 22812                           intcon3	equ	0xFF0
 22813                           indf0	equ	0xFEF
 22814                           postinc0	equ	0xFEE
 22815                           fsr0h	equ	0xFEA
 22816                           fsr0l	equ	0xFE9
 22817                           wreg	equ	0xFE8
 22818                           indf1	equ	0xFE7
 22819                           postinc1	equ	0xFE6
 22820                           postdec1	equ	0xFE5
 22821                           plusw1	equ	0xFE3
 22822                           fsr1h	equ	0xFE2
 22823                           fsr1l	equ	0xFE1
 22824                           indf2	equ	0xFDF
 22825                           postinc2	equ	0xFDE
 22826                           postdec2	equ	0xFDD
 22827                           plusw2	equ	0xFDB
 22828                           fsr2h	equ	0xFDA
 22829                           fsr2l	equ	0xFD9
 22830                           status	equ	0xFD8
 22831                           
 22832 ;; *************** function _recebe_dado_uart *****************
 22833 ;; Defined at:
 22834 ;;		line 138 in file "bibliotecas/uart.c"
 22835 ;; Parameters:    Size  Location     Type
 22836 ;;		None
 22837 ;; Auto vars:     Size  Location     Type
 22838 ;;		None
 22839 ;; Return value:  Size  Location     Type
 22840 ;;                  1    wreg      unsigned char 
 22841 ;; Registers used:
 22842 ;;		wreg, status,2
 22843 ;; Tracked objects:
 22844 ;;		On entry : 0/0
 22845 ;;		On exit  : 0/0
 22846 ;;		Unchanged: 0/0
 22847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22848 ;;      Params:         0       0       0       0       0       0       0       0       0
 22849 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22850 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22851 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22852 ;;Total ram usage:        0 bytes
 22853 ;; Hardware stack levels used:    1
 22854 ;; This function calls:
 22855 ;;		Nothing
 22856 ;; This function is called by:
 22857 ;;		_isr
 22858 ;;		_recebe_string_uart
 22859 ;; This function uses a non-reentrant model
 22860 ;;
 22861                           
 22862                           	psect	text84
 22863  005B22                     __ptext84:
 22864                           	opt stack 0
 22865  005B22                     _recebe_dado_uart:
 22866                           	opt stack 14
 22867                           
 22868                           ;uart.c: 140: while(RCIF==0);
 22869                           
 22870                           ;incstack = 0
 22871  005B22  AA9E               	btfss	3998,5,c	;volatile
 22872  005B24  D7FE               	goto	_recebe_dado_uart
 22873                           
 22874                           ;uart.c: 141: if(RCSTAbits.OERR)
 22875  005B26  A2AB               	btfss	4011,1,c	;volatile
 22876  005B28  D003               	goto	i2l789
 22877                           
 22878                           ;uart.c: 142: {
 22879                           ;uart.c: 143: CREN = 0;
 22880  005B2A  98AB               	bcf	4011,4,c	;volatile
 22881                           
 22882                           ;uart.c: 144: __nop();
 22883  005B2C  F000               	nop	
 22884                           
 22885                           ;uart.c: 145: CREN=1;
 22886  005B2E  88AB               	bsf	4011,4,c	;volatile
 22887  005B30                     i2l789:
 22888                           
 22889                           ;uart.c: 146: }
 22890                           ;uart.c: 147: return(RCREG);
 22891  005B30  50AE               	movf	4014,w,c	;volatile
 22892  005B32  0012               	return	
 22893  005B34                     __end_of_recebe_dado_uart:
 22894                           	opt stack 0
 22895                           tosu	equ	0xFFF
 22896                           tosh	equ	0xFFE
 22897                           tosl	equ	0xFFD
 22898                           pclatu	equ	0xFFB
 22899                           pclath	equ	0xFFA
 22900                           pcl	equ	0xFF9
 22901                           tblptru	equ	0xFF8
 22902                           tblptrh	equ	0xFF7
 22903                           tblptrl	equ	0xFF6
 22904                           tablat	equ	0xFF5
 22905                           prodh	equ	0xFF4
 22906                           prodl	equ	0xFF3
 22907                           intcon	equ	0xFF2
 22908                           intcon2	equ	0xFF1
 22909                           intcon3	equ	0xFF0
 22910                           indf0	equ	0xFEF
 22911                           postinc0	equ	0xFEE
 22912                           fsr0h	equ	0xFEA
 22913                           fsr0l	equ	0xFE9
 22914                           wreg	equ	0xFE8
 22915                           indf1	equ	0xFE7
 22916                           postinc1	equ	0xFE6
 22917                           postdec1	equ	0xFE5
 22918                           plusw1	equ	0xFE3
 22919                           fsr1h	equ	0xFE2
 22920                           fsr1l	equ	0xFE1
 22921                           indf2	equ	0xFDF
 22922                           postinc2	equ	0xFDE
 22923                           postdec2	equ	0xFDD
 22924                           plusw2	equ	0xFDB
 22925                           fsr2h	equ	0xFDA
 22926                           fsr2l	equ	0xFD9
 22927                           status	equ	0xFD8
 22928                           tosu	equ	0xFFF
 22929                           tosh	equ	0xFFE
 22930                           tosl	equ	0xFFD
 22931                           pclatu	equ	0xFFB
 22932                           pclath	equ	0xFFA
 22933                           pcl	equ	0xFF9
 22934                           tblptru	equ	0xFF8
 22935                           tblptrh	equ	0xFF7
 22936                           tblptrl	equ	0xFF6
 22937                           tablat	equ	0xFF5
 22938                           prodh	equ	0xFF4
 22939                           prodl	equ	0xFF3
 22940                           intcon	equ	0xFF2
 22941                           intcon2	equ	0xFF1
 22942                           intcon3	equ	0xFF0
 22943                           indf0	equ	0xFEF
 22944                           postinc0	equ	0xFEE
 22945                           fsr0h	equ	0xFEA
 22946                           fsr0l	equ	0xFE9
 22947                           wreg	equ	0xFE8
 22948                           indf1	equ	0xFE7
 22949                           postinc1	equ	0xFE6
 22950                           postdec1	equ	0xFE5
 22951                           plusw1	equ	0xFE3
 22952                           fsr1h	equ	0xFE2
 22953                           fsr1l	equ	0xFE1
 22954                           indf2	equ	0xFDF
 22955                           postinc2	equ	0xFDE
 22956                           postdec2	equ	0xFDD
 22957                           plusw2	equ	0xFDB
 22958                           fsr2h	equ	0xFDA
 22959                           fsr2l	equ	0xFD9
 22960                           status	equ	0xFD8
 22961                           
 22962                           	psect	text85
 22963  000000                     __ptext85:
 22964                           	opt stack 0
 22965                           tosu	equ	0xFFF
 22966                           tosh	equ	0xFFE
 22967                           tosl	equ	0xFFD
 22968                           pclatu	equ	0xFFB
 22969                           pclath	equ	0xFFA
 22970                           pcl	equ	0xFF9
 22971                           tblptru	equ	0xFF8
 22972                           tblptrh	equ	0xFF7
 22973                           tblptrl	equ	0xFF6
 22974                           tablat	equ	0xFF5
 22975                           prodh	equ	0xFF4
 22976                           prodl	equ	0xFF3
 22977                           intcon	equ	0xFF2
 22978                           intcon2	equ	0xFF1
 22979                           intcon3	equ	0xFF0
 22980                           indf0	equ	0xFEF
 22981                           postinc0	equ	0xFEE
 22982                           fsr0h	equ	0xFEA
 22983                           fsr0l	equ	0xFE9
 22984                           wreg	equ	0xFE8
 22985                           indf1	equ	0xFE7
 22986                           postinc1	equ	0xFE6
 22987                           postdec1	equ	0xFE5
 22988                           plusw1	equ	0xFE3
 22989                           fsr1h	equ	0xFE2
 22990                           fsr1l	equ	0xFE1
 22991                           indf2	equ	0xFDF
 22992                           postinc2	equ	0xFDE
 22993                           postdec2	equ	0xFDD
 22994                           plusw2	equ	0xFDB
 22995                           fsr2h	equ	0xFDA
 22996                           fsr2l	equ	0xFD9
 22997                           status	equ	0xFD8
 22998                           
 22999                           	psect	rparam
 23000  0000                     tosu	equ	0xFFF
 23001                           tosh	equ	0xFFE
 23002                           tosl	equ	0xFFD
 23003                           pclatu	equ	0xFFB
 23004                           pclath	equ	0xFFA
 23005                           pcl	equ	0xFF9
 23006                           tblptru	equ	0xFF8
 23007                           tblptrh	equ	0xFF7
 23008                           tblptrl	equ	0xFF6
 23009                           tablat	equ	0xFF5
 23010                           prodh	equ	0xFF4
 23011                           prodl	equ	0xFF3
 23012                           intcon	equ	0xFF2
 23013                           intcon2	equ	0xFF1
 23014                           intcon3	equ	0xFF0
 23015                           indf0	equ	0xFEF
 23016                           postinc0	equ	0xFEE
 23017                           fsr0h	equ	0xFEA
 23018                           fsr0l	equ	0xFE9
 23019                           wreg	equ	0xFE8
 23020                           indf1	equ	0xFE7
 23021                           postinc1	equ	0xFE6
 23022                           postdec1	equ	0xFE5
 23023                           plusw1	equ	0xFE3
 23024                           fsr1h	equ	0xFE2
 23025                           fsr1l	equ	0xFE1
 23026                           indf2	equ	0xFDF
 23027                           postinc2	equ	0xFDE
 23028                           postdec2	equ	0xFDD
 23029                           plusw2	equ	0xFDB
 23030                           fsr2h	equ	0xFDA
 23031                           fsr2l	equ	0xFD9
 23032                           status	equ	0xFD8
 23033                           
 23034                           	psect	temp
 23035  000046                     btemp:
 23036                           	opt stack 0
 23037  000046                     	ds	1
 23038  0000                     int$flags	set	btemp
 23039  0000                     wtemp6	set	btemp+1
 23040                           tosu	equ	0xFFF
 23041                           tosh	equ	0xFFE
 23042                           tosl	equ	0xFFD
 23043                           pclatu	equ	0xFFB
 23044                           pclath	equ	0xFFA
 23045                           pcl	equ	0xFF9
 23046                           tblptru	equ	0xFF8
 23047                           tblptrh	equ	0xFF7
 23048                           tblptrl	equ	0xFF6
 23049                           tablat	equ	0xFF5
 23050                           prodh	equ	0xFF4
 23051                           prodl	equ	0xFF3
 23052                           intcon	equ	0xFF2
 23053                           intcon2	equ	0xFF1
 23054                           intcon3	equ	0xFF0
 23055                           indf0	equ	0xFEF
 23056                           postinc0	equ	0xFEE
 23057                           fsr0h	equ	0xFEA
 23058                           fsr0l	equ	0xFE9
 23059                           wreg	equ	0xFE8
 23060                           indf1	equ	0xFE7
 23061                           postinc1	equ	0xFE6
 23062                           postdec1	equ	0xFE5
 23063                           plusw1	equ	0xFE3
 23064                           fsr1h	equ	0xFE2
 23065                           fsr1l	equ	0xFE1
 23066                           indf2	equ	0xFDF
 23067                           postinc2	equ	0xFDE
 23068                           postdec2	equ	0xFDD
 23069                           plusw2	equ	0xFDB
 23070                           fsr2h	equ	0xFDA
 23071                           fsr2l	equ	0xFD9
 23072                           status	equ	0xFD8


Data Sizes:
    Strings     206
    Constant    213
    Data        29
    BSS         949
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      69
    BANK0           160    160     160
    BANK1           256     97     241
    BANK2           256      0     250
    BANK3           256     39      39
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    pb.fp.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    pb.fp.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    pb.fp.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    pb.fp.dir_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    pb.fp.obj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    pb.fp.dir_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    pb.fp.obj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    pb.fp.dir_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    pb.fp.obj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    SDCard@fil.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_open@dj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_stat@dj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_unlink@dj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_unlink@sdj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_mkdir@dj.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_rename@djo.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_rename@djn.fs	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    escalonador$4968	PTR FTN()void  size(2) Largest target is 1
		 -> SDCard(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_23(CODE[15]), 

    memset@p1	PTR void  size(2) Largest target is 559
		 -> djn.fn(COMRAM[12]), f_printf@pb(COMRAM[70]), f_puts@pb(COMRAM[70]), f_putc@pb(COMRAM[70]), 
		 -> f_rename@djn(COMRAM[40]), djo.fn(COMRAM[12]), f_rename@djo(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_unlink@dj(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_stat@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), NULL(NULL[0]), 
		 -> fs(BIGRAM[559]), gps@gps_buffer(COMRAM[15]), 

    memset@p	PTR unsigned char  size(2) Largest target is 559
		 -> djn.fn(COMRAM[12]), f_printf@pb(COMRAM[70]), f_puts@pb(COMRAM[70]), f_putc@pb(COMRAM[70]), 
		 -> f_rename@djn(COMRAM[40]), djo.fn(COMRAM[12]), f_rename@djo(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_unlink@dj(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_stat@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), NULL(NULL[0]), 
		 -> fs(BIGRAM[559]), gps@gps_buffer(COMRAM[15]), 

    memcpy@d1	PTR void  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), f_gets@s(COMRAM[4]), f_rename@djn(COMRAM[40]), f_rename@buf(COMRAM[32]), 
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), f_gets@s(COMRAM[4]), f_rename@djn(COMRAM[40]), f_rename@buf(COMRAM[32]), 
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    memcpy@s1	PTR const void  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), djn.fn(COMRAM[12]), pb.buf(COMRAM[64]), pb.buf(COMRAM[64]), 
		 -> pb.buf(COMRAM[64]), f_printf@pb(COMRAM[70]), f_puts@pb(COMRAM[70]), f_putc@pb(COMRAM[70]), 
		 -> f_rename@djn(COMRAM[40]), f_rename@buf(COMRAM[32]), f_rename@djo(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), NULL(NULL[0]), 
		 -> STR_13(CODE[6]), fs(BIGRAM[559]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), djn.fn(COMRAM[12]), pb.buf(COMRAM[64]), pb.buf(COMRAM[64]), 
		 -> pb.buf(COMRAM[64]), f_printf@pb(COMRAM[70]), f_puts@pb(COMRAM[70]), f_putc@pb(COMRAM[70]), 
		 -> f_rename@djn(COMRAM[40]), f_rename@buf(COMRAM[32]), f_rename@djo(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), NULL(NULL[0]), 
		 -> STR_13(CODE[6]), fs(BIGRAM[559]), 

    memcmp@s2	PTR const void  size(2) Largest target is 42
		 -> djn.fn(COMRAM[12]), f_rename@djn(COMRAM[40]), djo.fn(COMRAM[12]), f_rename@djo(COMRAM[40]), 
		 -> dj.fn(COMRAM[12]), f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_unlink@dj(COMRAM[40]), 
		 -> dj.fn(COMRAM[12]), f_stat@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), 
		 -> STR_24(CODE[9]), 

    memcmp@s1	PTR const void  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    pb.fp	PTR struct . size(2) Largest target is 0

    pb.fp	PTR struct . size(2) Largest target is 0

    pb.fp	PTR struct . size(2) Largest target is 0

    putc_init@pb.fp.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    putc_init@pb.fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    putc_init@pb.fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    putc_init@pb.fp	PTR struct . size(2) Largest target is 0

    putc_flush@pb.fp	PTR struct . size(2) Largest target is 0

    S2277$fp	PTR struct . size(2) Largest target is 0

    putc_bfd@pb.fp	PTR struct . size(2) Largest target is 0

    sp__f_gets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    djn.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    djn.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    djo.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    djo.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sobj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sdj.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sdj.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_truncate@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_truncate@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_readdir@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_readdir@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_closedir@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_closedir@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_opendir@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_opendir@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_lseek@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_close@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_close@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_close@fp	PTR struct . size(2) Largest target is 36
		 -> SDCard@fil(BANK3[34]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_sync@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_sync@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_sync@fp	PTR struct . size(2) Largest target is 36
		 -> SDCard@fil(BANK3[34]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_write@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_write@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_write@fp	PTR struct . size(2) Largest target is 36
		 -> SDCard@fil(BANK3[34]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> putc_flush@nw(COMRAM[2]), putc_bfd@n(COMRAM[2]), SDCard@bw(BANK3[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 71
		 -> pb.buf(COMRAM[64]), pb.buf(COMRAM[64]), pb.buf(COMRAM[64]), f_printf@pb(COMRAM[70]), 
		 -> f_puts@pb(COMRAM[70]), f_putc@pb(COMRAM[70]), STR_13(CODE[6]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 71
		 -> pb.buf(COMRAM[64]), pb.buf(COMRAM[64]), pb.buf(COMRAM[64]), f_printf@pb(COMRAM[70]), 
		 -> f_puts@pb(COMRAM[70]), f_putc@pb(COMRAM[70]), STR_13(CODE[6]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_read@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_open@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_open@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_10(CODE[1]), 

    f_open@fp	PTR struct . size(2) Largest target is 36
		 -> SDCard@fil(BANK3[34]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dj.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_mount@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_10(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_10(CODE[1]), 

    validate$3084	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    validate@rfs	PTR PTR struct . size(2) Largest target is 2
		 -> f_truncate@fs(COMRAM[2]), f_readdir@fs(COMRAM[2]), f_closedir@fs(COMRAM[2]), f_lseek@fs(COMRAM[2]), 
		 -> f_close@fs(BANK0[2]), f_sync@fs(BANK0[2]), f_write@fs(BANK1[2]), f_read@fs(COMRAM[2]), 

    validate@obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    validate@obj	PTR struct . size(2) Largest target is 36
		 -> SDCard@fil(BANK3[34]), 

    FatFs	PTR struct .[1] size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    mount_volume@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    mount_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_rename@path_old(COMRAM[2]), f_mkdir@path(COMRAM[2]), f_unlink@path(COMRAM[2]), f_getfree@path(COMRAM[2]), 
		 -> f_stat@path(COMRAM[2]), f_opendir@path(COMRAM[2]), f_open@path(BANK1[2]), f_mount@path(BANK0[2]), 

    mount_volume@rfs	PTR PTR struct . size(2) Largest target is 42
		 -> f_rename@fs(COMRAM[2]), f_mkdir@fs(COMRAM[2]), f_unlink@fs(COMRAM[2]), f_getfree@fs(COMRAM[2]), 
		 -> dj.obj(COMRAM[15]), f_stat@dj(COMRAM[40]), f_opendir@fs(COMRAM[2]), f_open@fs(BANK1[2]), 
		 -> f_mount@fs(BANK0[2]), 

    find_volume@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    check_fs@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_rename@path_old(COMRAM[2]), f_rename@path_new(COMRAM[2]), f_mkdir@path(COMRAM[2]), f_unlink@path(COMRAM[2]), 
		 -> f_getfree@path(COMRAM[2]), f_stat@path(COMRAM[2]), f_opendir@path(COMRAM[2]), f_open@path(BANK1[2]), 
		 -> f_mount@path(BANK0[2]), f_mount@rp(BANK1[2]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_10(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_10(CODE[1]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_10(CODE[1]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    follow_path@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    follow_path@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_unlink@dj(COMRAM[40]), 
		 -> f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    follow_path@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 15
		 -> STR_23(CODE[15]), NULL(NULL[0]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    create_name@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    create_name@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_unlink@dj(COMRAM[40]), 
		 -> f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 42
		 -> djn.fn(COMRAM[12]), f_rename@djn(COMRAM[40]), djo.fn(COMRAM[12]), f_rename@djo(COMRAM[40]), 
		 -> dj.fn(COMRAM[12]), f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_unlink@dj(COMRAM[40]), 
		 -> dj.fn(COMRAM[12]), f_stat@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK1[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_10(CODE[1]), 

    get_fileinfo@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    get_fileinfo@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_remove@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_remove@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sp__memcpy	PTR void  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), f_gets@s(COMRAM[4]), f_rename@djn(COMRAM[40]), f_rename@buf(COMRAM[32]), 
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_register@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_register@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    dir_register@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_find@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_find@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_unlink@dj(COMRAM[40]), 
		 -> f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    dir_find@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_read@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_read@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    st_clust@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_alloc@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    dir_alloc@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_next@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_next@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_unlink@sdj(COMRAM[40]), 
		 -> f_unlink@dj(COMRAM[40]), f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    dir_next@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    S2226$dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_sdi@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@dj(COMRAM[40]), f_unlink@sdj(COMRAM[40]), 
		 -> f_unlink@dj(COMRAM[40]), f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    dir_sdi@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_clear@ibuf	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    dir_clear@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    create_chain@obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    create_chain@obj	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@sobj(COMRAM[14]), f_mkdir@dj(COMRAM[40]), 
		 -> f_unlink@sdj(COMRAM[40]), f_unlink@dj(COMRAM[40]), f_stat@dj(COMRAM[40]), f_open@dj(BANK1[40]), 
		 -> SDCard@fil(BANK3[34]), 

    create_chain@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    remove_chain@obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    remove_chain@obj	PTR struct . size(2) Largest target is 42
		 -> f_mkdir@sobj(COMRAM[14]), f_unlink@dj(COMRAM[40]), f_open@dj(BANK1[40]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    put_fat@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    get_fat@obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    get_fat@obj	PTR struct . size(2) Largest target is 42
		 -> f_rename@djn(COMRAM[40]), f_rename@djo(COMRAM[40]), f_mkdir@sobj(COMRAM[14]), f_mkdir@dj(COMRAM[40]), 
		 -> f_unlink@sdj(COMRAM[40]), f_unlink@dj(COMRAM[40]), f_getfree@obj(COMRAM[14]), f_stat@dj(COMRAM[40]), 
		 -> f_open@dj(BANK1[40]), SDCard@fil(BANK3[34]), 

    get_fat@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    clst2sect@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    move_window@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sync_window@fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    st_dword@ptr	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    st_word@ptr	PTR unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    ld_dword@ptr	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    ld_word@ptr	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[559]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), pb.buf(COMRAM[64]), pb.buf(COMRAM[64]), pb.buf(COMRAM[64]), 
		 -> f_printf@pb(COMRAM[70]), f_puts@pb(COMRAM[70]), f_putc@pb(COMRAM[70]), NULL(NULL[0]), 
		 -> STR_13(CODE[6]), fs(BIGRAM[559]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 559
		 -> f_gets@s(COMRAM[4]), NULL(NULL[0]), fs(BIGRAM[559]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 559
		 -> fs.win(BIGRAM[512]), pb.buf(COMRAM[64]), pb.buf(COMRAM[64]), pb.buf(COMRAM[64]), 
		 -> f_printf@pb(COMRAM[70]), f_puts@pb(COMRAM[70]), f_putc@pb(COMRAM[70]), NULL(NULL[0]), 
		 -> STR_13(CODE[6]), fs(BIGRAM[559]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 559
		 -> f_gets@s(COMRAM[4]), NULL(NULL[0]), fs(BIGRAM[559]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> STR_22(CODE[11]), STR_21(CODE[10]), STR_20(CODE[16]), STR_19(CODE[16]), 
		 -> STR_18(CODE[11]), escreve_inteiro_lcd@texto(BANK0[7]), leitura_chave@pos_ignicao_on(COMRAM[17]), leitura_chave@pos_ignicao_crank(COMRAM[17]), 
		 -> leitura_chave@pos_ignicao_off(COMRAM[17]), STR_16(CODE[17]), STR_15(CODE[17]), STR_14(CODE[18]), 
		 -> buff(BANK1[20]), STR_11(CODE[16]), STR_5(CODE[5]), gps@gps_buffer(COMRAM[15]), 
		 -> dado_buffer(BANK1[7]), STR_2(CODE[6]), data_buffer(BANK1[15]), STR_1(CODE[6]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    S676$dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    S669$fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    fil.obj.fs	PTR struct . size(2) Largest target is 559
		 -> NULL(NULL[0]), fs(BIGRAM[559]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    sp__memset	PTR void  size(2) Largest target is 559
		 -> djn.fn(COMRAM[12]), f_printf@pb(COMRAM[70]), f_puts@pb(COMRAM[70]), f_putc@pb(COMRAM[70]), 
		 -> f_rename@djn(COMRAM[40]), djo.fn(COMRAM[12]), f_rename@djo(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_mkdir@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_unlink@dj(COMRAM[40]), dj.fn(COMRAM[12]), 
		 -> f_stat@dj(COMRAM[40]), dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), NULL(NULL[0]), 
		 -> fs(BIGRAM[559]), gps@gps_buffer(COMRAM[15]), 

    p_tarefas	PTR FTN()void [2] size(2) Largest target is 1
		 -> SDCard(), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _escreve_cmd_lcd->_delay
    _config_timer_zero->_write_timer_zero
    _f_write->_disk_write
    _f_open->_ld_clust
    _follow_path->_ld_clust
    _ld_clust->_ld_word
    _create_name->_memset
    _dir_clear->_disk_write
    _clst2sect->___lmul
    _mount_volume->_disk_initialize
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sync_fs->_disk_write
    _st_clust->_st_word
    _sync_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _response->_recebe_dado_SPI
    _proceed->_escreve_dado_SPI
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _dummy_clocks->_escreve_dado_SPI
    _command->_escreve_dado_SPI

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _escalonador->_SDCard
    _f_write->_create_chain
    _f_open->_dir_register
    _remove_chain->_put_fat
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _dir_clear->_sync_window
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _f_mount->_mount_volume
    _mount_volume->_find_volume
    _find_volume->_check_fs
    _check_fs->_move_window
    _disk_initialize->_sdc_disk_initialize
    _f_close->_f_sync
    _f_sync->_move_window
    _sync_fs->_sync_window
    _move_window->_disk_read
    _sync_window->_disk_write
    _disk_write->_sdc_disk_write
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_escreve_inteiro_lcd
    _escreve_inteiro_lcd->_itoa

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_escalonador
    _SDCard->_f_open
    _f_open->_follow_path
    _dir_register->_dir_alloc

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _escalonador->_SDCard

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1226540
                        _escalonador
                    _inicializa_shrc
                 _inicializa_tarefas
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    6013
                                             31 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_shrc                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0 1219719
                                             94 BANK1      3     3      0
                             _SDCard *
 ---------------------------------------------------------------------------------
 (2) _SDCard                                              41    41      0 1219496
                                            158 BANK0      2     2      0
                                              0 BANK3     39    39      0
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                            _f_close
                            _f_mount
                             _f_open
                            _f_write
                 _posicao_cursor_lcd
                            _proceed
 ---------------------------------------------------------------------------------
 (3) _f_write                                             47    39      8  150156
                                            119 BANK0     24    16      8
                                              0 BANK1     23    23      0
                          _clst2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_open                                              82    77      5  875135
                                             12 BANK1     82    77      5
                          _clst2sect
                       _dir_register
                        _follow_path
                            _get_fat
                        _get_fattime
                           _ld_clust
                           _ld_dword
                       _mount_volume
                        _move_window
                       _remove_chain
                           _st_clust
                           _st_dword
 ---------------------------------------------------------------------------------
 (4) _remove_chain                                        25    15     10   89042
                                             90 BANK0     25    15     10
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (4) _follow_path                                         12     8      4  297538
                                              0 BANK1     12     8      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (4) _ld_clust                                            12     8      4    3140
                                             32 COMRAM    12     8      4
                            _ld_word
 ---------------------------------------------------------------------------------
 (5) _dir_find                                             8     6      2  240454
                                            149 BANK0      8     6      2
                           _dir_next
                            _dir_sdi
                             _memcmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _create_name                                         22    18      4    4301
                                             33 COMRAM     8     4      4
                                              0 BANK0     14    14      0
                            _dbc_1st
                            _dbc_2nd
                             _memset
                             _strchr
 ---------------------------------------------------------------------------------
 (6) _strchr                                               4     0      4     304
                                             25 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _dbc_2nd                                              3     1      2     186
                                             25 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) _dbc_1st                                              3     1      2     124
                                             25 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _dir_register                                         5     3      2  281334
                                            156 BANK0      2     0      2
                                              5 BANK1      3     3      0
                          _dir_alloc
                             _memcpy
                             _memset
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              11     5      6    2638
                                             25 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (5) _dir_alloc                                           12     8      4  239753
                                            149 BANK0      7     3      4
                                              0 BANK1      5     5      0
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _dir_sdi                                             30    24      6   47572
                                             85 BANK0     30    24      6
                          _clst2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (6) _dir_next                                            30    26      4  155250
                                            119 BANK0     30    26      4
                          _clst2sect
                       _create_chain
                          _dir_clear
                            _get_fat
 ---------------------------------------------------------------------------------
 (7) _dir_clear                                           18    12      6   18083
                                             38 BANK0     18    12      6
                          _clst2sect
                         _disk_write
                             _memset
                        _sync_window
 ---------------------------------------------------------------------------------
 (4) _clst2sect                                           12     6      6    2530
                                             37 COMRAM     6     0      6
                                              0 BANK0      6     6      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _create_chain                                        29    23      6   89868
                                             90 BANK0     29    23      6
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (5) _put_fat                                             31    21     10   44046
                                             59 BANK0     31    21     10
                           _ld_dword
                        _move_window
                           _st_dword
                            _st_word
 ---------------------------------------------------------------------------------
 (5) _get_fat                                             26    20      6   42760
                                             59 BANK0     26    20      6
                           _ld_dword
                            _ld_word
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _f_mount                                             12     7      5  113657
                                            150 BANK0      5     0      5
                                              0 BANK1      7     7      0
                       _get_ldnumber
                       _mount_volume
 ---------------------------------------------------------------------------------
 (4) _mount_volume                                        46    41      5  112019
                                            104 BANK0     46    41      5
                            ___lldiv
                             ___lmul
                    _disk_initialize
                        _disk_status
                        _find_volume
                       _get_ldnumber
                           _ld_dword
                            _ld_word
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _get_ldnumber                                        15    13      2     892
                                             25 COMRAM    15    13      2
 ---------------------------------------------------------------------------------
 (5) _find_volume                                         30    26      4   44102
                                             74 BANK0     30    26      4
                           _check_fs
                           _ld_dword
 ---------------------------------------------------------------------------------
 (6) _check_fs                                            15     9      6   41656
                                             59 BANK0     15     9      6
                           _ld_dword
                            _ld_word
                             _memcmp
                        _move_window
 ---------------------------------------------------------------------------------
 (7) _memcmp                                               9     3      6     701
                                             25 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) _ld_word                                              7     5      2    1930
                                             25 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (6) _ld_dword                                            13     9      4    1520
                                             25 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (5) _disk_initialize                                      4     4      0   18935
                                             42 COMRAM     2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_initialize                                 13    13      0   18805
                                             41 COMRAM     1     1      0
                                              0 BANK0     12    12      0
                            _command
                       _dummy_clocks
                   _escreve_dado_SPI
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (7) _sdc_reset                                           20    20      0    8916
                                             34 COMRAM     7     7      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     932
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    1705
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _f_close                                              5     3      2   67265
                                             70 BANK0      5     3      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (4) _f_sync                                              11     9      2   64951
                                             59 BANK0     11     9      2
                        _get_fattime
                        _move_window
                           _st_clust
                           _st_dword
                            _st_word
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (4) _validate                                            11     7      4    2019
                                             32 COMRAM    11     7      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (5) _disk_status                                          5     5      0     226
                                             27 COMRAM     5     5      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_status                                      4     4      0      34
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _sync_fs                                             11     9      2   19403
                                             38 BANK0     11     9      2
                         _disk_ioctl
                         _disk_write
                             _memset
                           _st_dword
                            _st_word
                        _sync_window
 ---------------------------------------------------------------------------------
 (6) _st_dword                                             6     0      6    2429
                                             25 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (8) _memset                                               8     2      6    2027
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_ioctl                                           7     4      3     304
                                             25 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (4) _st_clust                                             9     1      8    2808
                                             29 COMRAM     9     1      8
                            _st_word
 ---------------------------------------------------------------------------------
 (6) _st_word                                              4     0      4    1033
                                             25 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _move_window                                         11     5      6   36296
                                             48 BANK0     11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (4) _sync_window                                         19    17      2    6757
                                             19 BANK0     19    17      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (5) _disk_write                                          12     5      7    5867
                                             43 COMRAM     1     1      0
                                              8 BANK0     11     4      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_write                                      17    10      7    4167
                                             34 COMRAM     9     2      7
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                   _escreve_dado_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (5) _disk_read                                           13     6      7   25437
                                             35 BANK0     13     6      7
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_read                                       24    17      7   14337
                                             15 BANK0     20    13      7
                            _command
                       _dummy_clocks
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (7) _response                                             1     1      0     102
                                             28 COMRAM     1     1      0
                    _recebe_dado_SPI
 ---------------------------------------------------------------------------------
 (8) _recebe_dado_SPI                                      3     3      0      68
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _proceed                                              0     0      0     102
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    3027
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (7) _escreve_inteiro_lcd                                  9     7      2    7115
                                              6 BANK0      9     7      2
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (8) _itoa                                                 8     2      6    3936
                                             41 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                               _utoa
 ---------------------------------------------------------------------------------
 (9) _utoa                                                 9     3      6    3163
                                             32 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4    1132
                                             25 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) ___lwdiv                                             7     3      4    1321
                                             25 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2429
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _dummy_clocks                                         5     5      0     170
                                             27 COMRAM     5     5      0
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (7) _command                                              7     2      5    2944
                                             27 COMRAM     7     2      5
                   _escreve_dado_SPI
 ---------------------------------------------------------------------------------
 (4) _escreve_dado_SPI                                     2     2      0     102
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _get_fattime                                         51    47      4     201
                                             25 COMRAM    13     9      4
                                              0 BANK0     38    38      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                21    21      0     183
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _escalonador
     _SDCard *
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _f_close
         _f_sync
           _get_fattime
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
           _st_clust
             _st_word
           _st_dword
           _st_word
           _sync_fs
             _disk_ioctl
             _disk_write
               _sdc_disk_write
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_dado_SPI
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _memset
             _st_dword
             _st_word
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _validate
           _disk_status
             _sdc_disk_status
       _f_mount
         _get_ldnumber
         _mount_volume
           ___lldiv
           ___lmul
           _disk_initialize
             _sdc_disk_initialize
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _escreve_dado_SPI
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
               _sdc_reset
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
           _disk_status
             _sdc_disk_status
           _find_volume
             _check_fs
               _ld_dword
               _ld_word
               _memcmp
               _move_window
                 _disk_read
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _sdc_disk_read
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_dado_SPI
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
             _ld_dword
           _get_ldnumber
           _ld_dword
           _ld_word
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
       _f_open
         _clst2sect
           ___lmul
         _dir_register
           _dir_alloc
             _dir_next
               _clst2sect
                 ___lmul
               _create_chain
                 _get_fat
                   _ld_dword
                   _ld_word
                   _move_window
                     _disk_read
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _sdc_disk_read
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_inteiro_lcd
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _itoa
                             _utoa
                               ___lwdiv
                               ___lwmod
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                     _sync_window
                       _disk_write
                         _sdc_disk_write
                           _command
                             _escreve_dado_SPI
                           _dummy_clocks
                             _escreve_dado_SPI
                           _escreve_dado_SPI
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                 _put_fat
                   _ld_dword
                   _move_window
                     _disk_read
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _sdc_disk_read
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_inteiro_lcd
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _itoa
                             _utoa
                               ___lwdiv
                               ___lwmod
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                     _sync_window
                       _disk_write
                         _sdc_disk_write
                           _command
                             _escreve_dado_SPI
                           _dummy_clocks
                             _escreve_dado_SPI
                           _escreve_dado_SPI
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                   _st_dword
                   _st_word
               _dir_clear
                 _clst2sect
                   ___lmul
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                 _memset
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_dado_SPI
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
               _get_fat
                 _ld_dword
                 _ld_word
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_dado_SPI
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
             _dir_sdi
               _clst2sect
                 ___lmul
               _get_fat
                 _ld_dword
                 _ld_word
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_dado_SPI
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
           _memcpy
           _memset
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
         _follow_path
           _create_name
             _dbc_1st
             _dbc_2nd
             _memset
             _strchr
           _dir_find
             _dir_next
               _clst2sect
                 ___lmul
               _create_chain
                 _get_fat
                   _ld_dword
                   _ld_word
                   _move_window
                     _disk_read
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _sdc_disk_read
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_inteiro_lcd
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _itoa
                             _utoa
                               ___lwdiv
                               ___lwmod
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                     _sync_window
                       _disk_write
                         _sdc_disk_write
                           _command
                             _escreve_dado_SPI
                           _dummy_clocks
                             _escreve_dado_SPI
                           _escreve_dado_SPI
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                 _put_fat
                   _ld_dword
                   _move_window
                     _disk_read
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _sdc_disk_read
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_inteiro_lcd
                           _escreve_frase_ram_lcd
                             _escreve_caractere_lcd
                               _delay
                           _itoa
                             _utoa
                               ___lwdiv
                               ___lwmod
                         _posicao_cursor_lcd
                           _endereco_cursor_lcd
                             _delay
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
                     _sync_window
                       _disk_write
                         _sdc_disk_write
                           _command
                             _escreve_dado_SPI
                           _dummy_clocks
                             _escreve_dado_SPI
                           _escreve_dado_SPI
                           _proceed
                             _escreve_dado_SPI
                           _response
                             _recebe_dado_SPI
                   _st_dword
                   _st_word
               _dir_clear
                 _clst2sect
                   ___lmul
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                 _memset
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_dado_SPI
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
               _get_fat
                 _ld_dword
                 _ld_word
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_dado_SPI
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
             _dir_sdi
               _clst2sect
                 ___lmul
               _get_fat
                 _ld_dword
                 _ld_word
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _command
                           _escreve_dado_SPI
                         _dummy_clocks
                           _escreve_dado_SPI
                         _escreve_dado_SPI
                         _proceed
                           _escreve_dado_SPI
                         _response
                           _recebe_dado_SPI
             _memcmp
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
           _dir_sdi
             _clst2sect
               ___lmul
             _get_fat
               _ld_dword
               _ld_word
               _move_window
                 _disk_read
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _sdc_disk_read
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_dado_SPI
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
           _ld_clust
             _ld_word
         _get_fat
           _ld_dword
           _ld_word
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
         _get_fattime
         _ld_clust
           _ld_word
         _ld_dword
         _mount_volume
           ___lldiv
           ___lmul
           _disk_initialize
             _sdc_disk_initialize
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _escreve_dado_SPI
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
               _sdc_reset
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
           _disk_status
             _sdc_disk_status
           _find_volume
             _check_fs
               _ld_dword
               _ld_word
               _memcmp
               _move_window
                 _disk_read
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _sdc_disk_read
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _command
                         _escreve_dado_SPI
                       _dummy_clocks
                         _escreve_dado_SPI
                       _escreve_dado_SPI
                       _proceed
                         _escreve_dado_SPI
                       _response
                         _recebe_dado_SPI
             _ld_dword
           _get_ldnumber
           _ld_dword
           _ld_word
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_dado_SPI
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
         _move_window
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
           _sync_window
             _disk_write
               _sdc_disk_write
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_dado_SPI
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
         _remove_chain
           _get_fat
             _ld_dword
             _ld_word
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
           _put_fat
             _ld_dword
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
             _st_dword
             _st_word
         _st_clust
           _st_word
         _st_dword
       _f_write
         _clst2sect
           ___lmul
         _create_chain
           _get_fat
             _ld_dword
             _ld_word
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
           _put_fat
             _ld_dword
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _escreve_dado_SPI
                   _dummy_clocks
                     _escreve_dado_SPI
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_dado_SPI
                   _response
                     _recebe_dado_SPI
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _command
                       _escreve_dado_SPI
                     _dummy_clocks
                       _escreve_dado_SPI
                     _escreve_dado_SPI
                     _proceed
                       _escreve_dado_SPI
                     _response
                       _recebe_dado_SPI
             _st_dword
             _st_word
         _disk_write
           _sdc_disk_write
             _command
               _escreve_dado_SPI
             _dummy_clocks
               _escreve_dado_SPI
             _escreve_dado_SPI
             _proceed
               _escreve_dado_SPI
             _response
               _recebe_dado_SPI
         _memcpy
         _move_window
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
           _sync_window
             _disk_write
               _sdc_disk_write
                 _command
                   _escreve_dado_SPI
                 _dummy_clocks
                   _escreve_dado_SPI
                 _escreve_dado_SPI
                 _proceed
                   _escreve_dado_SPI
                 _response
                   _recebe_dado_SPI
         _sync_window
           _disk_write
             _sdc_disk_write
               _command
                 _escreve_dado_SPI
               _dummy_clocks
                 _escreve_dado_SPI
               _escreve_dado_SPI
               _proceed
                 _escreve_dado_SPI
               _response
                 _recebe_dado_SPI
         _validate
           _disk_status
             _sdc_disk_status
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _proceed
         _escreve_dado_SPI
   _inicializa_shrc
   _inicializa_tarefas
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22F      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     27      27      11       15.2%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FA       9       97.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100     61      F1       7       94.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2F7      20        0.0%
DATA                 0      0     526       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Feb 24 15:03:21 2022

      __end_of_mensagem_inicial 51E0                     get_fat@clst 009D                               _s 003B  
                  create_name@c 006D                    create_name@d 0062                    create_name@i 006B  
                  create_name@p 0065                     _SSPSTATbits 000FC7                get_ldnumber@path 001A  
              ??_init_interrupt 001A                              l75 4CCA                              l83 59EE  
                            l77 4D5C    __size_of_escreve_inteiro_lcd 003E                     __CFG_BOR$ON 000000  
                            _fs 0327                              _rd 0147                     __CFG_BORV$3 000000  
                ??_dir_register 002D                disk_write@sector 006A                    ?_escalonador 0001  
                 create_name@dp 0022                   create_name@ni 0063                   create_name@si 0067  
                create_chain@cs 00D3                  create_chain@fs 00D1                disk_write@result 0070  
              ?_inicializa_shrc 0001                             l303 5886                             l304 5878  
                           l320 3DF6                             l321 3DC6                             l342 570E  
                           l510 53E2                             l350 552C                             l343 56DE  
                           l511 53EA                             l503 53B6                             l351 54E8  
                           l344 56E6                             l512 53EC                             l504 53B8  
                           l520 5332                             l345 56E8                             l513 53F4  
                           l505 53C0                             l521 5312                             l514 53F6  
                           l506 53C2                             l522 52D6                             l515 53FE  
                           l507 53CA                             l523 532E                             l540 529A  
                           l532 5266                             l516 5400                             l508 53CC  
                           l524 52E2                             l541 529C                             l533 5268  
                           l509 53E0                             l525 52F0                             l542 52A4  
                           l534 5270                             l526 52FE                             l471 5A5A  
                           l543 52A6                             l535 5272                             l527 530C  
                           l544 52AE                             l536 527A                             l473 5A68  
                           l545 52B0                             l537 527C                             l481 4FE4  
                           l546 52B8                             l538 5284                             l490 501A  
                           l482 4FE6                             l547 52BA                             l539 5286  
                           l491 5022                             l483 4FEE                             l900 2862  
                           l492 5024                             l484 4FF0                             l565 5664  
                           l901 2898                             l493 502C                             l485 4FF8  
                           l566 563C                             l494 502E                             l486 4FFA  
                           l911 2978                             l495 5036                             l487 5002  
                           l496 5038                             l488 5004                             l841 5806  
                           l905 28EC                             l489 5018                             l842 57E4  
                           l922 2A30                             l850 594A                             l923 2A58  
                           l940 3FDA                             l860 48A4                             l844 57F0  
                           l852 5954                             l941 3FBC                             l861 4910  
                           l845 5802                             l933 2B20                             l909 2940  
                           l853 595E                             l943 4006                             l951 4616  
                           l919 29F2                             l944 3FEE                             l960 5AE8  
                           l928 2AB8                             l857 4914                             l953 464A  
                           l865 50CA                             l873 5A0E                             l881 4A06  
                           l929 2AE0                             l849 5962                             l946 405E  
                           l938 3FA8                             l858 4872                             l866 5066  
                           l874 5A02                             l882 4A2E                             l955 46C4  
                           l868 5098                             l876 5A06                             l892 280C  
                           l869 50C6                             l877 5A0A                             l893 2822  
                           l886 4A8A                             l887 4AA0                             l895 282E  
                           l899 2A02                             _PCL 000FF9                             _PR2 000FCB  
                           _E_W 0041                ??_init_oscilador 001A                             _n_s 0042  
                           _isr 0008                             _txt 02E6                    disk_read@res 008F  
                           prod 000FF3                  ??_create_chain 00C0                             tosl 000FFD  
                           wreg 000FE8                    __CFG_FOSC$HS 000000       __size_of_write_timer_zero 0012  
                create_name@sfn 0069                 create_chain@ncl 00CD                 create_chain@obj 00BA  
               create_chain@scl 00C9                 create_chain@res 00C8                     ld_clust@dir 0023  
                  __CFG_LVP$OFF 000000         ??_escreve_frase_ram_lcd 001F                    __CFG_WDT$OFF 000000  
                          l1011 4F6E                            l1021 39EA                            l1005 543E  
                          l1013 4F9C                            l1110 1866                            l1014 4FCA  
                          l1102 3630                            l1111 1800                            l1007 546C  
                          l1103 369A                            l1032 34D6                            l1033 3500  
                          l1121 19D8                            l1113 1824                            l1018 39E4  
                          l1026 4CB8                            l1122 19C8                            l1114 1856  
                          l1106 17B0                            l1210 439C                            l1027 4C9A  
                          l1051 25DA                            l1115 1890                            l1211 43C8  
                          l1203 42F8                            l1140 1C0C                            l1124 19F4  
                          l1045 2780                            l1053 25F8                            l1133 1B5E  
                          l1117 1902                            l1037 4800                            l1301 3CC6  
                          l1054 2602                            l1046 247A                            l1070 1D40  
                          l1134 1BEC                            l1126 1A56                            l1118 1960  
                          l1206 4392                            l1310 3C62                            l1302 3C4A  
                          l1063 2054                            l1135 1BDA                            l1143 408E  
                          l1215 5244                            l1048 279E                            l1056 26AE  
                          l1064 1C56                            l1128 1AEC                            l1152 2B90  
                          l1240 3F24                            l1401 0946                            l1073 1E22  
                          l1129 1AC0                            l1145 4122                            l1314 43FA  
                          l1058 276E                            l1066 2070                            l1138 1C04  
                          l1146 4118                            l1170 2D48                            l1234 3E4C  
                          l1163 2BFE                            l1404 49BA                            l1324 44C2  
                          l1076 1E58                            l1068 1D0C                            l1164 2C8E  
                          l1244 47A4                            l1500 0B64                            l1405 49BA  
                          l1325 4492                            l1413 4B86                            l1165 2C64  
                          l1093 3596                            l1334 31AC                            l1326 44B8  
                          l1078 1F12                            l1190 23CA                            l1174 2DDE  
                          l1166 2DA6                            l1262 2EB8                            l1086 3550  
                          l1510 0DAA                            l1502 0B9E                            l1407 49CA  
                          l1335 32FE                            l1415 4BB4                            l1191 2286  
                          l1167 2D58                            l1271 2F6C                            l1263 2EDE  
                          l1239 3EAA                            l1431 11DA                            l1423 117E  
                          l1511 0DF6                            l1352 37B6                            l1416 4BCA  
                          l1192 229C                            l1184 210E                            l1168 2CD0  
                          l1264 3040                            l1280 2FD2                            l1432 13C6  
                          l1512 0EF0                            l1504 0BCE                            l1409 49DA  
                          l2401 5112                            l1329 3126                            l1417 4BF2  
                          l1177 20F2                            l1169 2D14                            l1265 2F32  
                          l1097 35E0                            l1433 120A                            l1513 10A4  
                          l1505 0BF8                            l2402 5106                            l1362 3862  
                          l1354 37C2                            l1346 3714                            l1370 00AC  
                          l1194 22DC                            l1274 2F5C                            l1434 1206  
                          l1514 0F84                            l1506 0C4A                            l1339 3318  
                          l1371 00EA                            l1195 2326                            l1187 21CE  
                          l1451 1628                            l1515 0F66                            l1507 0CA8  
                          l1348 371E                            l1372 00F6                            l1196 2336  
                          l1284 3018                            l1268 2EF4                            l1460 171E  
                          l1452 15C0                            l1444 13D4                            l1436 121A  
                          l1516 0FFA                            l1508 0D06                            l2405 5146  
                          l1357 37F8                            l1381 0330                            l1373 0122  
                          l1365 0040                            l1197 234C                            l1285 302A  
                          l1269 2EF0                            l1461 1734                            l1453 1602  
                          l1517 103E                            l1509 0F10                            l1526 3B5E  
                          l2406 5154                            l1390 0650                            l1382 037A  
                          l1374 0132                            l1286 3068                            l1294 3B7A  
                          l1454 1618                            l1446 13DE                            l1438 1222  
                          l1359 383C                            l1391 05CA                            l1383 03A2  
                          l1375 016C                            l1367 0066                            l1199 2372  
                          l1287 3084                            l1279 2FFA                            l1295 3B74  
                          l1447 1424                            l1519 1120                            l1392 05E4  
                          l1384 0408                            l1376 01B8                            l1385 0488  
                          l1377 021C                            l1369 00B0                            l1289 30AE  
                          l1297 3BF6                            l1394 0668                            l1386 04AC  
                          l1378 02E2                            l2371 4D68                            l1387 04C6  
                          l1459 16C8                            l1396 074A                            l1388 04E0  
                          l2373 4DA2                            l1389 04EC                            l1493 0A58  
                          l2454 5606                            l2374 4DE0                            l1398 0778  
                          l2455 55FE                            l2367 573E                            l1399 07C6  
                          l2631 58B6                            l2464 57B4                            l2480 4F1C  
                          l1488 09C6                            l2465 57AC                            l2458 5626  
                          l1498 0FA2                            l2459 5630                            l2491 59C4  
                          l2468 57CC                            l2492 59B4                            l2469 57D6  
                          l1925 55A2                            l2485 5580                            l1926 55B6  
                          l2478 4F24                            l2486 554A                            l2479 4EA4  
                          ?_isr 0001           _escreve_caractere_lcd 5256                            STR_1 6262  
                          STR_2 6268                            STR_3 626E                            STR_5 6274  
                          STR_6 627C                            STR_9 624C                  timer_dois@flag 0038  
                          _BRGH 007D62                            _T0IF 007F92                            _CREN 007D5C  
                          _LATB 000F8A                            _PIE1 000F9D                            _RCIF 007CF5  
                          i2l61 41F2                            i2l62 4264                            i2l63 420A  
                          i2l65 4238                            i2l67 4258                            i2l68 426C  
                          _TMR2 000FCC                            _SPEN 007D5F                            _TRMT 007D61  
                          _TXEN 007D65                            _SYNC 007D64                            _Fsid 0143  
                          _dado 003A                            _buff 0149                            _main 59D6  
                  find_volume@i 00C6                            _itoa 5718                            fsr0h 000FEA  
                          fsr1h 000FE2                            indf0 000FEF                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf1 000FE7                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            btemp 0046  
                          _utoa 4D60                     ld_dword@ptr 001A                   disk_ioctl@cmd 001A  
                 disk_read@buff 0083                   disk_ioctl@res 001E                   disk_read@pdrv 008C  
                          prodh 000FF4                            prodl 000FF3                  ??_get_ldnumber 001C  
                          start 000E                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
     sdc_disk_initialize@buff_i 0067                    ?_follow_path 0173                    ___param_bank 000000  
     sdc_disk_initialize@count1 0063       sdc_disk_initialize@count2 0069                 create_name@path 0024  
              create_chain@clst 00BC                           ??_isr 0005        __size_of_recebe_dado_SPI 005C  
                 __CFG_PLLDIV$5 000000                     _sync_window 386C                           l13126 59B4  
                         l13404 1AC0                           l13340 1824                           l14052 439C  
                         l14204 303A                           l14118 554A                           l12560 5A52  
                         l13336 1800                           l14306 37A4                           l13258 2050  
                         l15034 0BF8                           l13460 4EA4                           l14420 35F6  
                         l12566 5A60                           l13606 29A8                           l14270 44B8  
                         l13382 19F4                           l13366 1960                           l13560 28BA  
                         l14264 4492                           l15048 0CA8                           l13574 290E  
                         l12880 463E                           l14296 3726                           l13850 2286  
                         l14740 0946                           l15284 4CC2                           l13942 31AC  
                         l14672 04C6                           l13856 229C                           l13784 2D14  
                         l13972 32FE                           l14676 04E0                           l14940 1618  
                         l13966 32D8                           l13886 234C                           l14936 1602  
                         ?_main 0001                           ?_itoa 0060                           _EEADR 000FA9  
                         STR_10 627B                           STR_11 6204                           STR_12 6255  
                         STR_20 61F4                           STR_13 625C                           STR_21 6239  
                         STR_22 6223                           STR_14 61B0                           STR_23 6214  
                         STR_15 61D3                           STR_24 6243                           STR_16 61C2  
                         STR_17 6279                           STR_18 622E                           STR_19 61E4  
               __end_of_dbc_2nd 4FD4                 __end_of_dbc_1st 5476                 __end_of___lldiv 5166  
                         ?_utoa 0021                           u20000 0ABA                           u20005 0AB0  
                         _T0CON 000FD5                           u20115 0D26                           u20230 115A  
                         u20500 518C                           u20165 0EB6                           u20175 0EFA  
                         u20360 505A                           _T2CON 000FCA                           u20490 5174  
                         u16110 57B8                           u20478 4D1A                           u20479 4D2E  
                         u17001 18B8                           u16050 5A6E                           u16130 54FC  
                         u16300 5684                           u17030 194E                           u23407 4E42  
                         u16080 560A                           u16144 5506                           u18000 316A  
                         u17120 1AAE                           u16145 5502                           u23417 4E5E  
                         u16138 54FE                           u17050 1998                           u17210 4176  
                         u16307 567A                           u23507 5518                           u23427 3CD8  
                _data_buffer_32 02C6                           u17300 283E                           u17220 4196  
                         u16421 5828                           u23517 551E                           u17221 4192  
                         u23437 3DB6                           u17310 284E                           u23527 5526  
                         u23447 27D4                           u17400 29A8                           u17240 4ED0  
                         u18120 32D8                           u23537 5864                           u23457 2A5E  
                         u17321 2858                           u16290 565C                           u16450 466A  
                         u23547 56F0                           u23467 4690                           u23387 51CC  
                         u16460 467A                           u17420 29B4                           u17340 28BA  
                         u17260 4EF6                           u18140 330E                           u18220 4374  
                         u23557 56F8                           u23477 48F0                           u23397 4E26  
                         u17510 2AF8                           u23567 5700                           u23487 401E  
                         u17247 4EC6                           u17520 2B2E                           u17360 290E  
                         u16640 2450                           u18240 43BC                           u19120 3C5E  
                         u23577 5708                           u16297 5652                           u23497 5510  
                         u16457 4660                           u16570 4C3E                           u16730 26F0  
                         u18330 3F44                           u17267 4EEC                           u16715 25E6  
                         u16900 4A4E                           u18340 556A                           u18420 2F46  
                         u16485 3F62                           u16805 1D8C                           u17470 2A80  
                         u19230 012E                           u16830 1E40                           u16750 1C34  
                         u16735 26E6                           u18440 2F58                           u16665 24C4  
                         u16850 1F54                           u17730 2D24                           u17650 2B8C  
               __end_of___lwdiv 563A                           u16835 1E36                           u17715 2CB0  
                         u18347 5560                           u18620 44A0                           u17740 2D44  
                         u16685 255C                           u16950 179E                           u17830 219E  
                         u18470 2FCE                           u19335 03BA                           u16855 1F4A  
                         u16775 1CA0                           u18720 3852                           u18730 3862  
                         u18650 3714                           u18570 442E                           u19290 02DE  
                         u17850 2210                           u17770 2DFC                           u17690 2C48  
                         u19435 0630                           u17835 2194                           u19460 079E  
                         u18805 44EE                           u18815 450A                           u17855 2206  
                         u17775 2DF2                           u17695 2C3E                           u18680 37A4  
                         u18825 453A                           u19465 0794                           u18850 5116  
                         u18835 4554                           u18870 352C                           u19910 16E6  
                         u18960 35F6                           u18880 354C                           u19915 16DC  
                         u19835 1568                           u19940 09C2                           u18990 36CA  
                         u19870 1642                           u19960 09DC                 __end_of___lwmod 57E0  
                         i2l789 5B30                           _RCREG 000FAE                           _RCSTA 000FAB  
                         _TMR0H 000FD7                           _TMR0L 000FD6                           _SPBRG 000FAF  
                 __CFG_USBDIV$1 000000                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
               __end_of_f_close 56D2                           _TXREG 000FAD                           _TXSTA 000FAC  
                         _FatFs 0030                   __CFG_PWRT$OFF 000000             ___lmul@multiplicand 001E  
    __size_of_config_timer_dois 000C                 __end_of_f_mount 4C12                  __CFG_FCMEN$OFF 000000  
               __end_of_dir_sdi 2E64                 __end_of_f_write 1170      __size_of_config_timer_zero 001A  
               __end_of_get_fat 27B0                 __end_of_command 5946                 __end_of_ld_word 590E  
                         _delay 5A4E                 __end_of_dpowers 6103                   find_volume@fs 00AA  
      __size_of_escreve_cmd_lcd 008C                  disk_ioctl@buff 001B                           pclath 000FFA  
                disk_read@count 0089                           tablat 000FF5                  disk_ioctl@pdrv 001D  
               __end_of_proceed 5B64                           plusw1 000FE3                           plusw2 000FDB  
               __end_of_put_fat 2074                           utoa@c 0029                           utoa@v 0027  
                         status 000FD8                 __end_of_st_word 5A4E    escreve_dado_SPI@data_to_shrc 001B  
                         wtemp6 0047                 __end_of_sync_fs 3506                   get_ldnumber@i 0020  
                 disk_write@res 0072                 __initialization 5476             disk_initialize@pdrv 002B  
           disk_initialize@stat 002C                    __end_of_main 59FE                    __end_of_itoa 575C  
                  __end_of_utoa 4E04              _inicializa_tarefas 597A                 escalonador@cont 01D3  
                 sdc_reset@buff 0029                          ??_main 002D                          ??_itoa 002A  
                        ??_utoa 0027                   __activetblptr 000002             ?_inicializa_tarefas 0001  
               __CFG_CCP2MX$OFF 000000               get_fattime@f_time 001E                ??_sdc_disk_write 002A  
                        ?_delay 0001          ?_escreve_caractere_lcd 0001                          _ADCON1 000FC1  
                        _EEDATA 000FA8                          _EECON2 000FA7                          _INT0IE 007F94  
                        _INT0IF 007F91                   ?_dummy_clocks 0001                          _PCLATH 000FFA  
                        _INTCON 000FF2                          _TMR0IF 007F92                          _TMR2IF 007CF1  
                        _SDCard 3CCA        __end_of_recebe_dado_uart 5B34                          _SPPCFG 000F63  
                        _SPPCON 000F65                _is_it_gga_string 003E                          _SSPBUF 000FC9  
          __end_of_dir_register 47A8                          _DbcTbl 61A6        __size_of_sdc_disk_status 0014  
              __end_of_check_fs 3322            ??_inicializa_tarefas 001A            __size_of_create_name 0266  
      __size_of_disk_initialize 0034      __end_of_posicao_cursor_lcd 5338                __end_of_dir_find 3F4A  
              __end_of_dir_next 242E                    ?_move_window 0090            __end_of_create_chain 1C1E  
        __size_of_init_hardware 0016                __end_of__powers_ 612A                          _Result 003C  
          __size_of_get_fattime 0108                __end_of_ld_clust 5256                __end_of_ld_dword 4B60  
                        ___lmul 5592            __size_of_find_volume 019E            __size_of_disk_status 003E  
                __CFG_STVREN$ON 000000                       ??_dbc_2nd 001C                       ??_dbc_1st 001C  
                     ??___lldiv 0022                          _f_open 1170                          _f_time 0120  
                     ??___lwdiv 001E                          _f_sync 39F0                       ??___lwmod 001E  
                        _folder 0296                          _estado 0039                          _memcmp 4EA2  
                        _memcpy 5538                __end_of_init_lcd 4EA2                          _memset 59AA  
                     ??_f_close 002D                  find_volume@fmt 00C4                          clear_0 549E  
                        clear_1 54B0                          clear_2 54BC                          clear_3 54C8  
                     ??_f_mount 002D                       ??_dir_sdi 00BB                       ??_f_write 00DF  
                     ??_get_fat 00A1                          _strchr 589A             _sdc_disk_initialize 27B0  
                     ??_command 0021                       ??_ld_word 001C                          itoa@cp 002A  
              __end_of_validate 49EE            __size_of_escalonador 00A4               ??_recebe_dado_SPI 001A  
          __end_of_get_ldnumber 44D4        __end_of_escreve_dado_SPI 5718                __end_of_response 5B58  
                  __mediumconst 60DA           write_timer_zero@timer 001C                 disk_read@sector 0085  
               disk_read@result 008D                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                __end_of_st_clust 579E                __end_of_st_dword 53A4  
                     ??_proceed 001C                _write_timer_zero 5AFE                       ??_put_fat 00A5  
                     ??_st_word 001E       escreve_caractere_lcd@data 001C                       ??_sync_fs 0088  
                ??_dummy_clocks 001C             _escreve_inteiro_lcd 581E                 sdc_disk_write@i 0060  
               sdc_disk_write@j 0065                      __accesstop 0060         __end_of__initialization 54CE  
               __CFG_PBADEN$OFF 000000                  get_ldnumber@tc 0022            ?_sdc_disk_initialize 0001  
                disk_write@buff 0068                  get_ldnumber@tp 0027                  get_ldnumber@tt 0023  
                disk_write@pdrv 006F                   ___rparam_used 000001               ??_escreve_cmd_lcd 001C  
                __pcstackCOMRAM 0001     __end_of_endereco_cursor_lcd 540E                    __pidataBANK1 5A72  
             ?_mensagem_inicial 0001                   __end_of_delay 5A72            __size_of_follow_path 0168  
          ?_escreve_inteiro_lcd 0066              ??_mensagem_inicial 0020              _tarefa_em_execucao 0043  
            __size_of_dir_clear 0122      __end_ofi2_write_timer_zero 5B22              __size_of_dir_alloc 0114  
            __size_of_clst2sect 00C4          __size_of_sdc_disk_read 012E                   _init_hardware 5AC2  
            __size_of_disk_read 00C2                         ??_delay 001A                  sdc_reset@count 0027  
              _is_it_rmc_string 003D    mensagem_inicial@msg_linha_um 0060                      __pbssBANK1 0100  
                    __pbssBANK2 0200  __size_of_escreve_frase_ram_lcd 0052   __end_of_escreve_frase_ram_lcd 568C  
         ??_sdc_disk_initialize 002A                         ?_SDCard 0001       escreve_inteiro_uart@F3956 01E3  
                    _gga_buffer 0200              __size_of_sdc_reset 00BA                         ?___lmul 001A  
             ??_sdc_disk_status 001A           mensagem_inicial@F4177 6195           mensagem_inicial@F4179 6184  
         ??_escreve_inteiro_lcd 002C                         ?_f_open 017F                         ?_f_sync 009B  
                     SDCard@fil 0305               ??_disk_initialize 002B                         ?_memcmp 001A  
                       ?_memcpy 001A                         ?_memset 001A                    ?_sync_window 0073  
                ___lmul@product 0022                         ?_strchr 001A                    _gga_pointers 0100  
                       i2l10628 4202                         _INTCON2 000FF1                         _INTCON3 000FF0  
                ?_init_hardware 0001                       ?_check_fs 009B                      _disk_ioctl 59FE  
                follow_path@res 017E                      _disk_write 5060                  remove_chain@fs 00D1  
                     ?_dir_find 00F5                       ?_dir_next 00D7                         _SSPCON1 000FC6  
         __size_of_dir_register 00D2        __size_of_inicializa_shrc 000C                       ?_ld_clust 0021  
                       _SSPSTAT 000FC7                       ?_ld_dword 001A                 __CFG_VREGEN$OFF 000000  
                 ?_remove_chain 00BA           __size_of_create_chain 04E6                       ?_init_lcd 0001  
               __size_of_SDCard 0146                    _dir_sdi$2591 00C5                   _sdc_disk_read 3F4A  
             __end_of_dir_clear 419A               __end_of_dir_alloc 43CC               __end_of__npowers_ 6151  
                       __Hparam 0000               __end_of_clst2sect 486C                         __Lparam 0000  
                     ?_validate 0021               __end_of_disk_read 492E                       ?_response 0001  
                  _f_write$3365 0173                      f_close@res 00AA                 __size_of___lmul 0056  
                     ?_st_clust 001E                         _dbc_2nd 4F3E                         _dbc_1st 540E  
                     ?_st_dword 001A                         ___lldiv 50E4            __size_of_move_window 00AA  
                    check_fs@fs 009B                         ___lwdiv 55E8                         ___lwmod 579E  
               __size_of_f_open 05C8                 __size_of_f_sync 0172            __end_of_dummy_clocks 589A  
                       _f_close 568C           __size_of_get_ldnumber 0108                         __pcinit 5476  
               __size_of_memcmp 009C                 __size_of_memcpy 005A                 __size_of_memset 002C  
                  _get_fat$2434 00A9                      _init_ports 5AAA                         __ramtop 0800  
                       _f_mount 4B60                         __ptext0 59D6                         __ptext1 5166  
                       __ptext2 4E04                         __ptext3 4FD4                         __ptext4 5AC2  
                       __ptext5 5AAA                         __ptext6 5B64                         __ptext7 5AEC  
                       __ptext8 5A90                         __ptext9 5AFE                         _dir_sdi 2B32  
                       _f_write 0972                     validate@obj 0021                         _get_fat 242E  
                   validate@res 002B                     validate@rfs 0023                         _command 590E  
                     _T0CONbits 000FD5                    _dir_register 46D6                 __size_of_strchr 003C  
                       _ld_word 58D6         i2write_timer_zero@timer 0003     endereco_cursor_lcd@endereco 001C  
                       _dpowers 60DB                    __size_of_isr 42B0         ??_escreve_caractere_lcd 001C  
                    ??_check_fs 00A1                 find_volume@part 00AC                    _create_chain 1738  
                       _proceed 5B58         __size_of_init_interrupt 0012               __end_of_sdc_reset 4AA8  
                    ??_dir_find 00F7                         _put_fat 1C1E                      ??_dir_next 00DB  
                       _st_word 5A26                      ??_ld_clust 0025                         _sync_fs 3322  
                __pintcode_body 419A                      ??_ld_dword 001E            end_of_initialization 54CE  
             mount_volume@bsect 00E5                      f_open@clst 01A2                      f_open@mode 0183  
                    f_open@path 0181                  ??_remove_chain 00C4                         isr@cont 0019  
                       memcmp@n 001E               mount_volume@nclst 00EA                         memcpy@d 0021  
                       memcpy@n 001E      __end_ofleitura_chave@F3840 6173      __end_ofleitura_chave@F3842 6162  
                       memcpy@s 0023      __end_ofleitura_chave@F3838 6184         __size_of_init_oscilador 0008  
                       itoa@buf 0060               mount_volume@tsect 00E1                         memset@c 001C  
                       memset@n 001E                         itoa@val 0062                   SDCard@FResult 0304  
                       memset@p 0020            sdc_disk_initialize@i 0060                   __Lmediumconst 60DA  
                    ??_init_lcd 001D                         int_func 419A                      _rmc_buffer 0250  
             ?_recebe_dado_uart 0001                   ?_mount_volume 00C8                 disk_status@pdrv 001F  
                     i2u1300_40 423C                 disk_status@stat 0020                  ?_sdc_disk_read 006F  
        write_timer_zero@timer0 001A                 ___lldiv@divisor 001E                      f_mount@cfs 0176  
              sdc_disk_read@res 007F                      f_mount@res 0173                      f_mount@opt 00FA  
            ??_recebe_dado_uart 0001                sdc_disk_read@ptr 007A                      f_mount@vol 0178  
               ___lldiv@counter 0026                    _get_ldnumber 43CC                      ??_validate 0025  
                    ??_response 001D                       _RCSTAbits 000FAB        __end_of_write_timer_zero 5B10  
                       postdec1 000FE5                         postdec2 000FDD                 _recebe_dado_SPI 54DC  
                       postinc0 000FEE                         postinc1 000FE6                         postinc2 000FDE  
                    ??_st_clust 0026                  move_window@res 009A                      ??_st_dword 0020  
                       utoa@buf 0021                         utoa@val 0023                      dir_clear@n 0096  
                    dir_alloc@n 0175                remove_chain@clst 00BC                      dir_find@dp 00F5  
                    dir_find@fs 00F9                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _PORTCbits 000F82                       _PORTDbits 000F83                       _PORTEbits 000F84  
               ??_init_hardware 001E              _posicao_cursor_lcd 52C8                      dir_sdi@csz 00C9  
                    dir_sdi@ofs 00B7                      dir_next@dp 00D7                      dir_next@fs 00EF  
                   ?_disk_ioctl 001A                      f_write@btw 00DB                      f_write@res 0177  
                     _TRISAbits 000F92                       _TRISBbits 000F93                     ?_disk_write 0068  
                     _TRISCbits 000F94                       _TRISDbits 000F95               ?_escreve_dado_SPI 0001  
                    get_fat@obj 009B                 _escreve_cmd_lcd 4FD4                      get_fat@val 00AD  
           ?_posicao_cursor_lcd 001D                 get_ldnumber@vol 0025                 disk_write@count 006E  
            ??_escreve_dado_SPI 001A                      command@CMD 0021                      command@CRC 0020  
                 ??_create_name 0026                      command@arg 001C                  ??_mount_volume 00CD  
                    ld_clust@cl 0029                      ld_clust@fs 0021                   ??_get_fattime 0060  
             ??_inicializa_shrc 001A     __size_of_inicializa_tarefas 0030                  __end_of_SDCard 3E10  
                 ??_find_volume 00AE                      ld_dword@rv 0023                  __end_of_DbcTbl 61B0  
                 ??_disk_status 001C                 command@argument 0022            ??_posicao_cursor_lcd 001E  
                __end_of___lmul 55E8                     st_clust@dir 0020                  __end_of_f_open 1738  
                 ??_escalonador 01D1                     ?_init_ports 0001                  __end_of_f_sync 3B62  
                __end_of_memcmp 4F3E                  __end_of_memcpy 5592                  __end_of_memset 59D6  
                    ld_word@ptr 001A            __size_of_sync_window 0184                  __end_of_strchr 58D6  
           start_initialization 5476                     st_dword@val 001C                     st_dword@ptr 001A  
                   __end_of_isr 42B8       __size_of_mensagem_inicial 007A                     put_fat@clst 009D  
               _sdc_disk_status 5AD8                 ??_sdc_disk_read 0076                        ??_SDCard 00FE  
            i2_write_timer_zero 5B10         __end_of_recebe_dado_SPI 5538                 _disk_initialize 5946  
       __size_of_sdc_disk_write 00FA                _data_uart_recebe 0045                     _dado_buffer 016C  
         __size_of_dummy_clocks 003E                   ??_follow_path 0177             __size_of_disk_ioctl 0028  
           __end_of_create_name 30CA             ?i2_write_timer_zero 0001             __size_of_disk_write 0084  
                      ??___lmul 0022             __end_of_get_fattime 45DC                        ??_f_open 0184  
                      ??_f_sync 002D                     __pdataBANK1 01D4                __CFG_LPT1OSC$OFF 000000  
           __end_of_find_volume 386C                        ??_memcmp 0020             __end_of_disk_status 581E  
                      ??_memcpy 0020                        ??_memset 0020          sdc_disk_read@start_add 007B  
          __end_of_remove_chain 36CE         sdc_disk_initialize@buff 006B         __end_of_escreve_cmd_lcd 5060  
                      ??_strchr 001E         sdc_disk_initialize@stat 0062    __size_of_endereco_cursor_lcd 006A  
                   __pbssBIGRAM 0327                     __pbssCOMRAM 002D                   __pcstackBANK0 0060  
                 __pcstackBANK1 0173                   __pcstackBANK3 0300                  _init_interrupt 5AEC  
          ??i2_write_timer_zero 0003             __end_of_escalonador 4D60     __end_of_sdc_disk_initialize 2B32  
                   _data_buffer 015D               __size_of_check_fs 0258                    check_fs@sect 009D  
                  check_fs@sign 00A5                     _f_open$3199 018C                      sdc_reset@i 0023  
             __size_of_dir_find 013A                    _dummy_clocks 585C                  _init_oscilador 5B64  
             __size_of_dir_next 03BA               __size_of_ld_clust 0076               __size_of_ld_dword 00B8  
           __size_of_init_ports 0018           _escreve_frase_ram_lcd 563A                       _data_buff 0145  
   __end_of_escreve_inteiro_lcd 585C               __size_of_init_lcd 009E                ___lwdiv@dividend 001A  
             delay@contador_int 001B               delay@contador_ext 001A                       _gga_index 0034  
                     __pintcode 0008                   __pmediumconst 60DA                        SDCard@br 0300  
                      SDCard@bw 0302                       _dir_clear 4078                        ?_dbc_2nd 001A  
                     _dir_alloc 42B8                        ?_dbc_1st 001A                        ?___lldiv 001A  
             __size_of_validate 00C0                       __npowers_ 612A                        ?___lwdiv 001A  
                     _clst2sect 47A8                        ?___lwmod 001A               __size_of_response 000C  
                dir_alloc@n_ent 00F7                        ?_f_close 00A6                       _disk_read 486C  
                 follow_path@dp 0173                   follow_path@fs 017B              _sinaliza_int_timer 0044  
                 follow_path@ns 017D               __size_of_st_clust 0042                   _validate$3084 0029  
           __end_of_follow_path 3CCA                        ?_f_mount 00F6               __size_of_st_dword 006C  
                      ?_dir_sdi 00B5                        ?_f_write 00D7                        ?_get_fat 009B  
                      ?_command 001C            __end_of_mount_volume 0972                        ?_ld_word 001A  
        __end_of_init_interrupt 5AFE             sdc_disk_read@p_buff 006F             sdc_disk_read@length 0080  
           sdc_disk_read@sector 0071         __end_of_sdc_disk_status 5AEC  __size_of_escreve_caractere_lcd 0072  
 __end_of_escreve_caractere_lcd 52C8                        ?_proceed 0001                       f_close@fp 00A6  
                     f_close@fs 00A8                       check_fs@b 00A9                        ?_put_fat 009B  
              ___lwdiv@quotient 001F                       check_fs@w 00A7                  __size_of_delay 0024  
                      ?_st_word 001A         __end_of_disk_initialize 597A          __end_of_init_oscilador 5B6C  
                      ?_sync_fs 0086                       _p_tarefas 013C               find_volume@mbr_pt 00B4  
                     _sdc_reset 49EE                     _create_name 2E64                        _LATBbits 000F8A  
                     f_open@bcs 018E                ?_recebe_dado_SPI 0001                       f_open@ofs 019E  
                     f_open@res 01A8                mount_volume@mode 00CC                mount_volume@path 00C8  
                      _PIE1bits 000F9D                mount_volume@nrsv 00DF                     _get_fattime 44D4  
              mount_volume@stat 00E9                       _rmc_index 0032                     _find_volume 36CE  
                   _disk_status 57E0                   ??_move_window 0096                       f_mount@fs 00F6  
                     f_mount@rp 0174                 follow_path@path 0175                        _PIR1bits 000F9E  
                      _PIR2bits 000FA1                   move_window@fs 0090               ?_write_timer_zero 001A  
                    ?_dir_clear 0086                       dir_find@c 00FB                      ?_dir_alloc 00F5  
               remove_chain@obj 00BA                 remove_chain@res 00D0                 remove_chain@nxt 00CC  
            leitura_chave@F3840 6162              leitura_chave@F3842 6151              leitura_chave@F3838 6173  
                    ?_clst2sect 0026                       f_sync@dir 00A4                       f_sync@res 00A1  
                     dir_sdi@dp 00B5                       dir_sdi@fs 00D1        posicao_cursor_lcd@coluna 001D  
                    ?_disk_read 0083              ??_write_timer_zero 001C                       f_write@cc 017C  
    posicao_cursor_lcd@endereco 001F                       f_write@bw 00DD                       f_write@fp 00D7  
                     f_write@fs 0188                       get_fat@bc 00B1                       get_fat@fs 00B3  
     __size_of_recebe_dado_uart 0012                       get_fat@wc 00AB                     _escalonador 4CBC  
              ?_escreve_cmd_lcd 0001     escreve_frase_ram_lcd@buffer 001D                 ?_init_interrupt 0001  
                  ??_disk_ioctl 001D                    ??_disk_write 002C                 _inicializa_shrc 5B40  
              _mensagem_inicial 5166                      st_clust@cl 0022                      st_clust@fs 001E  
               ?_init_oscilador 0001               ___lmul@multiplier 001A                       copy_data0 548A  
                     ld_word@rv 001F                      ?_sdc_reset 0001             sdc_reset@count_nosd 0025  
        ?_escreve_frase_ram_lcd 001D                      put_fat@res 00B9                      put_fat@val 00A1  
                    _EECON1bits 000FA6        escreve_dado_SPI@contador 001A                  _sdc_disk_write 45DC  
               dir_next@stretch 00D9        escreve_inteiro_lcd@F3966 01EA                        __Hrparam 0000  
     __size_of_escreve_dado_SPI 0046                     _info_chaves 0129                       memcpy@tmp 0020  
                      __Lrparam 0000                     _follow_path 3B62              __end_of_disk_ioctl 5A26  
         __size_of_remove_chain 01C8              __end_of_disk_write 50E4                      st_word@val 001C  
                    st_word@ptr 001A          sdc_disk_initialize@ocr 0068                __size_of_dbc_2nd 0096  
              __size_of_dbc_1st 0068                __size_of___lldiv 0082                __size_of___lwdiv 0052  
              __size_of___lwmod 0042                    ??_init_ports 001A             __end_of_move_window 4CBC  
                 _dir_next$2628 00E7        escreve_inteiro_lcd@valor 0066                __size_of_f_close 0046  
      escreve_inteiro_lcd@texto 0068                __size_of_f_mount 00B2                __size_of_dir_sdi 0332  
              __size_of_f_write 07FE                __size_of_get_fat 0382                        dbc_2nd@c 001C  
             disk_status@result 001D                __size_of_command 0038                        dbc_1st@c 001C  
         __end_of_init_hardware 5AD8                __size_of_ld_word 0038                        _check_fs 30CA  
             _get_ldnumber$2949 001E                        _gga_code 002D                 ___lwdiv@divisor 001C  
              ?_sdc_disk_status 0001                 dir_register@res 017A                   dir_clear@ibuf 008E  
                 dir_clear@clst 0088                 ___lwdiv@counter 001E                        _fileName 01D4  
                 dir_clear@sect 0090                        __ptext10 5B34                        __ptext11 597A  
                      __ptext20 3E10                        __ptext12 5B40                        __ptext21 2E64  
                      __ptext13 4CBC                        __ptext30 4078                        __ptext22 589A  
                      __ptext14 3CCA                        __ptext31 47A8                        __ptext23 4F3E  
                      __ptext15 0972                        __ptext40 4EA2                        __ptext32 1738  
                      __ptext24 540E                        __ptext16 1170                        __ptext41 58D6  
                      __ptext33 1C1E                        __ptext25 46D6                        __ptext17 3506  
                      __ptext50 492E                        __ptext42 4AA8                        __ptext34 242E  
                      __ptext26 5538                        __ptext18 3B62                        __ptext51 57E0  
                      __ptext43 5946                        __ptext35 4B60                        __ptext27 42B8  
                      __ptext19 51E0                        __ptext60 386C                        __ptext52 5AD8  
                      __ptext44 27B0                        __ptext36 0012                        __ptext28 2B32  
                      __ptext61 5060                        __ptext53 3322                        __ptext45 49EE  
                      __ptext37 43CC                        __ptext29 2074                        __ptext70 581E  
                      __ptext62 45DC                        __ptext54 5338                        __ptext46 5592  
                      __ptext38 36CE                        __ptext71 5718                        __ptext63 486C  
                      __ptext55 59AA                        __ptext47 50E4                        __ptext39 30CA  
                      __ptext80 56D2                        __ptext72 4D60                        __ptext64 3F4A  
                      __ptext56 59FE                        __ptext48 568C                        __ptext81 44D4  
                      __ptext73 579E                        __ptext65 5B4C                        __ptext57 575C  
                      __ptext49 39F0                        __ptext74 55E8                        __ptext66 54DC  
                      __ptext58 5A26                        __ptext83 5B10                        __ptext75 563A  
                      __ptext67 5B58                        __ptext59 4C12                        __ptext84 5B22  
                      __ptext76 5256                        __ptext68 52C8                        _dir_find 3E10  
                      __ptext85 0000                        __ptext77 5A4E                        __ptext69 53A4  
                      __ptext78 585C                        __ptext79 590E                        _fileSize 0130  
                      _dir_next 2074                        __powers_ 6103                __size_of_proceed 000C  
              ?_disk_initialize 0001                        _ld_clust 51E0                __size_of_put_fat 0456  
                      _ld_dword 4AA8                  sync_window@res 0085                __size_of_st_word 0028  
                _timeout_tarefa 0036                    _rmc_pointers 0114                __size_of_sync_fs 01E4  
            sdc_disk_read@count 0075      __end_of_inicializa_tarefas 59AA        i2write_timer_zero@timer0 0001  
        __end_of_sdc_disk_write 46D6                        _init_lcd 4E04                   __size_of_main 0028  
                    sync_fs@res 0090                    _remove_chain 3506                   __size_of_itoa 0044  
                 __size_of_utoa 00A4             _endereco_cursor_lcd 53A4              __end_of_init_ports 5AC2  
             _comma_counter_gga 0040                   dummy_clocks@i 001F                        f_open@dj 01A9  
                      f_open@cl 0196                   dummy_clocks@n 001E                        f_open@fp 017F  
                      f_open@fs 01A6                        f_open@sc 019A                 mount_volume@fmt 00F2  
                      f_open@tm 0192               _comma_counter_rmc 003F                 mount_volume@rfs 00CA  
               mount_volume@vol 00DD                        _rmc_code 0140                        _validate 492E  
                      _response 5B4C                        f_sync@fp 009B                        f_sync@fs 00A2  
                      f_sync@tm 009D     __size_of_posicao_cursor_lcd 0070                     ??_dir_clear 008C  
                      int$flags 0046                     ??_dir_alloc 00F9         posicao_cursor_lcd@linha 001E  
                      _st_clust 575C           __size_of_mount_volume 0960                        _st_dword 5338  
                   ??_clst2sect 0060                   ??_sync_window 0075                     ??_disk_read 008A  
       __end_of_inicializa_shrc 5B4C           __CFG_CPUDIV$OSC1_PLL2 000000            ?_endereco_cursor_lcd 0001  
            mount_volume@fasize 00EE                      _INTCONbits 000FF2                       put_fat@bc 00B7  
                     put_fat@fs 009B                        memcmp@s1 001A                        memcmp@s2 001C  
                      memcpy@d1 001A                        memcpy@s1 001C                        itoa@base 0064  
                      memset@p1 001A              mount_volume@szbfat 00D5              mount_volume@sysect 00D9  
             _config_timer_dois 5B34                    _tempo_backup 0138               _config_timer_zero 5A90  
                 clst2sect@clst 0028                        intlevel2 0000              ?_config_timer_dois 0001  
      mensagem_inicial@msg_dois 0071                     ??_sdc_reset 0023              ?_config_timer_zero 0001  
                  _tempo_tarefa 0134                  dir_register@dp 00FC                  dir_register@fs 0178  
                     strchr@chr 001C                 ?_sdc_disk_write 0023                ___lwmod@dividend 001A  
                     strchr@ptr 001A                    dir_clear@szb 0094                ___lldiv@dividend 001A  
                  dir_alloc@res 0177                   sync_window@fs 0073               sdc_disk_read@buff 0082  
         __end_of_sdc_disk_read 4078             sdc_disk_status@pdrv 001B                    _mount_volume 0012  
                   f_mount@path 00F8             sdc_disk_status@stat 001A                       sync_fs@fs 0086  
           ??_config_timer_dois 001A                      _OSCCONbits 000FD3                  mount_volume@fs 00F4  
           ??_config_timer_zero 001E                     _move_window 4C12                        put_fat@p 00B5  
               move_window@sect 0092            sdc_disk_write@count1 0062            sdc_disk_write@p_buff 0023  
              _recebe_dado_uart 5B22         recebe_dado_SPI@contador 001C                        utoa@base 0025  
          sdc_disk_write@sector 0025           ??_endereco_cursor_lcd 001C                   ?_dir_register 00FC  
                  response@buff 001D                     dir_clear@fs 0086                     dir_alloc@dp 00F5  
                   dir_alloc@fs 0173                ___lldiv@quotient 0022                 ___lwmod@divisor 001C  
               ___lwmod@counter 001E             __end_of_sync_window 39F0                     dir_find@res 00FC  
     __end_of_config_timer_dois 5B40               remove_chain@pclst 00C0                   ?_create_chain 00BA  
     __end_of_config_timer_zero 5AAA     __size_ofi2_write_timer_zero 0012                     _SSPCON1bits 000FC6  
                  dir_next@clst 00F1                _create_name$2902 0060          escreve_cmd_lcd@comando 001C  
           sdc_disk_write@count 0029                     clst2sect@fs 0026   sdc_disk_initialize@crc_number 0065  
                   dir_sdi@clst 00CD                    ?_create_name 0022                     dir_next@ofs 00EB  
            sdc_disk_write@buff 0067    __size_of_sdc_disk_initialize 0382                    f_write@csect 017A  
                  f_write@wbuff 0178                    ?_get_fattime 001A                    _put_fat$2462 00B1  
                  _put_fat$2463 00B3                     f_write@buff 00D9                     f_write@clst 0182  
             sdc_disk_write@res 0064                     f_write@sect 017E                    ?_find_volume 00AA  
              _escreve_dado_SPI 56D2                     f_write@wcnt 0186                   ?_get_ldnumber 001A  
                  ?_disk_status 0001   __end_ofmensagem_inicial@F4177 61A6   __end_ofmensagem_inicial@F4179 6195  
