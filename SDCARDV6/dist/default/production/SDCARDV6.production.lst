

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 07 18:42:05 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           ; Version 1.45
    94                           ; Generated 16/11/2017 GMT
    95                           ; 
    96                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F4550 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     
   128                           	psect	idataBANK1
   129  0039B4                     __pidataBANK1:
   130                           	opt stack 0
   131                           
   132                           ;initializer for _fileName
   133  0039B4  63                 	db	99
   134  0039B5  68                 	db	104
   135  0039B6  65                 	db	101
   136  0039B7  63                 	db	99
   137  0039B8  6B                 	db	107
   138  0039B9  2E                 	db	46
   139  0039BA  74                 	db	116
   140  0039BB  78                 	db	120
   141  0039BC  74                 	db	116
   142  0039BD  00                 	db	0
   143  0039BE  00                 	db	0
   144  0039BF  00                 	db	0
   145  0039C0  00                 	db	0
   146  0039C1  00                 	db	0
   147  0039C2  00                 	db	0
   148                           
   149                           ;initializer for escreve_inteiro_uart@F3956
   150  0039C3  30                 	db	48
   151  0039C4  30                 	db	48
   152  0039C5  30                 	db	48
   153  0039C6  30                 	db	48
   154  0039C7  30                 	db	48
   155  0039C8  30                 	db	48
   156  0039C9  00                 	db	0
   157                           
   158                           ;initializer for escreve_inteiro_lcd@F3966
   159  0039CA  30                 	db	48
   160  0039CB  30                 	db	48
   161  0039CC  30                 	db	48
   162  0039CD  30                 	db	48
   163  0039CE  30                 	db	48
   164  0039CF  30                 	db	48
   165  0039D0  00                 	db	0
   166                           
   167                           	psect	mediumconst
   168  0060C4                     __pmediumconst:
   169                           	opt stack 0
   170  0060C4  00                 	db	0
   171  0060C5                     _dpowers:
   172                           	opt stack 0
   173  0060C5  0001               	dw	1
   174  0060C7  0000               	dw	0
   175  0060C9  000A               	dw	10
   176  0060CB  0000               	dw	0
   177  0060CD  0064               	dw	100
   178  0060CF  0000               	dw	0
   179  0060D1  03E8               	dw	1000
   180  0060D3  0000               	dw	0
   181  0060D5  2710               	dw	10000
   182  0060D7  0000               	dw	0
   183  0060D9  86A0               	dw	34464
   184  0060DB  0001               	dw	1
   185  0060DD  4240               	dw	16960
   186  0060DF  000F               	dw	15
   187  0060E1  9680               	dw	38528
   188  0060E3  0098               	dw	152
   189  0060E5  E100               	dw	57600
   190  0060E7  05F5               	dw	1525
   191  0060E9  CA00               	dw	51712
   192  0060EB  3B9A               	dw	15258
   193  0060ED                     __end_of_dpowers:
   194                           	opt stack 0
   195  0060ED                     __powers_:
   196                           	opt stack 0
   197  0060ED  00                 	db	0
   198  0060EE  80                 	db	128
   199  0060EF  3F                 	db	63
   200  0060F0  00                 	db	0
   201  0060F1  20                 	db	32
   202  0060F2  41                 	db	65
   203  0060F3  00                 	db	0
   204  0060F4  C8                 	db	200
   205  0060F5  42                 	db	66
   206  0060F6  00                 	db	0
   207  0060F7  7A                 	db	122
   208  0060F8  44                 	db	68
   209  0060F9  40                 	db	64
   210  0060FA  1C                 	db	28
   211  0060FB  46                 	db	70
   212  0060FC  50                 	db	80
   213  0060FD  C3                 	db	195
   214  0060FE  47                 	db	71
   215  0060FF  24                 	db	36
   216  006100  74                 	db	116
   217  006101  49                 	db	73
   218  006102  97                 	db	151
   219  006103  18                 	db	24
   220  006104  4B                 	db	75
   221  006105  BC                 	db	188
   222  006106  BE                 	db	190
   223  006107  4C                 	db	76
   224  006108  6B                 	db	107
   225  006109  6E                 	db	110
   226  00610A  4E                 	db	78
   227  00610B  03                 	db	3
   228  00610C  15                 	db	21
   229  00610D  50                 	db	80
   230  00610E  79                 	db	121
   231  00610F  AD                 	db	173
   232  006110  60                 	db	96
   233  006111  F3                 	db	243
   234  006112  49                 	db	73
   235  006113  71                 	db	113
   236  006114                     __end_of__powers_:
   237                           	opt stack 0
   238  006114                     __npowers_:
   239                           	opt stack 0
   240  006114  00                 	db	0
   241  006115  80                 	db	128
   242  006116  3F                 	db	63
   243  006117  CD                 	db	205
   244  006118  CC                 	db	204
   245  006119  3D                 	db	61
   246  00611A  D7                 	db	215
   247  00611B  23                 	db	35
   248  00611C  3C                 	db	60
   249  00611D  12                 	db	18
   250  00611E  83                 	db	131
   251  00611F  3A                 	db	58
   252  006120  B7                 	db	183
   253  006121  D1                 	db	209
   254  006122  38                 	db	56
   255  006123  C6                 	db	198
   256  006124  27                 	db	39
   257  006125  37                 	db	55
   258  006126  38                 	db	56
   259  006127  86                 	db	134
   260  006128  35                 	db	53
   261  006129  C0                 	db	192
   262  00612A  D6                 	db	214
   263  00612B  33                 	db	51
   264  00612C  CC                 	db	204
   265  00612D  2B                 	db	43
   266  00612E  32                 	db	50
   267  00612F  70                 	db	112
   268  006130  89                 	db	137
   269  006131  30                 	db	48
   270  006132  E7                 	db	231
   271  006133  DB                 	db	219
   272  006134  2E                 	db	46
   273  006135  E5                 	db	229
   274  006136  3C                 	db	60
   275  006137  1E                 	db	30
   276  006138  42                 	db	66
   277  006139  A2                 	db	162
   278  00613A  0D                 	db	13
   279  00613B                     __end_of__npowers_:
   280                           	opt stack 0
   281  00613B                     leitura_chave@F3842:
   282                           	opt stack 0
   283  00613B  20                 	db	32
   284  00613C  49                 	db	73
   285  00613D  67                 	db	103
   286  00613E  6E                 	db	110
   287  00613F  20                 	db	32
   288  006140  4F                 	db	79
   289  006141  6E                 	db	110
   290  006142  00                 	db	0
   291  006143  00                 	db	0
   292  006144  00                 	db	0
   293  006145  00                 	db	0
   294  006146  00                 	db	0
   295  006147  00                 	db	0
   296  006148  00                 	db	0
   297  006149  00                 	db	0
   298  00614A  00                 	db	0
   299  00614B  00                 	db	0
   300  00614C                     __end_ofleitura_chave@F3842:
   301                           	opt stack 0
   302  00614C                     leitura_chave@F3840:
   303                           	opt stack 0
   304  00614C  20                 	db	32
   305  00614D  49                 	db	73
   306  00614E  67                 	db	103
   307  00614F  6E                 	db	110
   308  006150  20                 	db	32
   309  006151  43                 	db	67
   310  006152  72                 	db	114
   311  006153  61                 	db	97
   312  006154  6E                 	db	110
   313  006155  6B                 	db	107
   314  006156  00                 	db	0
   315  006157  00                 	db	0
   316  006158  00                 	db	0
   317  006159  00                 	db	0
   318  00615A  00                 	db	0
   319  00615B  00                 	db	0
   320  00615C  00                 	db	0
   321  00615D                     __end_ofleitura_chave@F3840:
   322                           	opt stack 0
   323  00615D                     leitura_chave@F3838:
   324                           	opt stack 0
   325  00615D  20                 	db	32
   326  00615E  49                 	db	73
   327  00615F  67                 	db	103
   328  006160  6E                 	db	110
   329  006161  20                 	db	32
   330  006162  4F                 	db	79
   331  006163  66                 	db	102
   332  006164  66                 	db	102
   333  006165  00                 	db	0
   334  006166  00                 	db	0
   335  006167  00                 	db	0
   336  006168  00                 	db	0
   337  006169  00                 	db	0
   338  00616A  00                 	db	0
   339  00616B  00                 	db	0
   340  00616C  00                 	db	0
   341  00616D  00                 	db	0
   342  00616E                     __end_ofleitura_chave@F3838:
   343                           	opt stack 0
   344  00616E                     mensagem_inicial@F4099:
   345                           	opt stack 0
   346  00616E  20                 	db	32
   347  00616F  31                 	db	49
   348  006170  38                 	db	56
   349  006171  2F                 	db	47
   350  006172  30                 	db	48
   351  006173  31                 	db	49
   352  006174  2F                 	db	47
   353  006175  32                 	db	50
   354  006176  30                 	db	48
   355  006177  32                 	db	50
   356  006178  32                 	db	50
   357  006179  20                 	db	32
   358  00617A  20                 	db	32
   359  00617B  20                 	db	32
   360  00617C  00                 	db	0
   361  00617D  00                 	db	0
   362  00617E  00                 	db	0
   363  00617F                     __end_ofmensagem_inicial@F4099:
   364                           	opt stack 0
   365  00617F                     mensagem_inicial@F4097:
   366                           	opt stack 0
   367  00617F  53                 	db	83
   368  006180  44                 	db	68
   369  006181  43                 	db	67
   370  006182  61                 	db	97
   371  006183  72                 	db	114
   372  006184  64                 	db	100
   373  006185  20                 	db	32
   374  006186  49                 	db	73
   375  006187  6E                 	db	110
   376  006188  69                 	db	105
   377  006189  74                 	db	116
   378  00618A  20                 	db	32
   379  00618B  20                 	db	32
   380  00618C  20                 	db	32
   381  00618D  00                 	db	0
   382  00618E  00                 	db	0
   383  00618F  00                 	db	0
   384  006190                     __end_ofmensagem_inicial@F4097:
   385                           	opt stack 0
   386  0000                     _LATCbits	set	3979
   387  0000                     _RCSTA	set	4011
   388  0000                     _TXSTA	set	4012
   389  0000                     _RCREG	set	4014
   390  0000                     _RCSTAbits	set	4011
   391  0000                     _TXREG	set	4013
   392  0000                     _SPBRG	set	4015
   393  0000                     _PIR2bits	set	4001
   394  0000                     _EECON2	set	4007
   395  0000                     _EECON1bits	set	4006
   396  0000                     _EEDATA	set	4008
   397  0000                     _EEADR	set	4009
   398  0000                     _PR2	set	4043
   399  0000                     _TMR2	set	4044
   400  0000                     _T2CON	set	4042
   401  0000                     _OSCCONbits	set	4051
   402  0000                     _TRISE	set	3990
   403  0000                     _TRISC	set	3988
   404  0000                     _TRISA	set	3986
   405  0000                     _TRISD	set	3989
   406  0000                     _LATB	set	3978
   407  0000                     _TRISB	set	3987
   408  0000                     _TMR0L	set	4054
   409  0000                     _TMR0H	set	4055
   410  0000                     _PIE1	set	3997
   411  0000                     _INTCON3	set	4080
   412  0000                     _INTCON2	set	4081
   413  0000                     _INTCON	set	4082
   414  0000                     _SPPCFG	set	3939
   415  0000                     _SPPCON	set	3941
   416  0000                     _T0CON	set	4053
   417  0000                     _PORTDbits	set	3971
   418  0000                     _TRISDbits	set	3989
   419  0000                     _PORTEbits	set	3972
   420  0000                     _PORTCbits	set	3970
   421  0000                     _SSPBUF	set	4041
   422  0000                     _SSPCON1bits	set	4038
   423  0000                     _SSPSTATbits	set	4039
   424  0000                     _SSPCON1	set	4038
   425  0000                     _SSPSTAT	set	4039
   426  0000                     _TRISCbits	set	3988
   427  0000                     _PORTBbits	set	3969
   428  0000                     _TRISBbits	set	3987
   429  0000                     _T0CONbits	set	4053
   430  0000                     _LATBbits	set	3978
   431  0000                     _PORTAbits	set	3968
   432  0000                     _TRISAbits	set	3986
   433  0000                     _ADCON1	set	4033
   434  0000                     _PCL	set	4089
   435  0000                     _PCLATH	set	4090
   436  0000                     _INTCONbits	set	4082
   437  0000                     _PIR1bits	set	3998
   438  0000                     _PIE1bits	set	3997
   439  0000                     _RCIF	set	31989
   440  0000                     _TRMT	set	32097
   441  0000                     _TXEN	set	32101
   442  0000                     _CREN	set	32092
   443  0000                     _SPEN	set	32095
   444  0000                     _SYNC	set	32100
   445  0000                     _BRGH	set	32098
   446  0000                     _TMR2IF	set	31985
   447  0000                     _INT0IE	set	32660
   448  0000                     _INT0IF	set	32657
   449  0000                     _T0IF	set	32658
   450  0000                     _TMR0IF	set	32658
   451  006190                     STR_14:
   452  006190  41                 	db	65	;'A'
   453  006191  72                 	db	114	;'r'
   454  006192  71                 	db	113	;'q'
   455  006193  75                 	db	117	;'u'
   456  006194  69                 	db	105	;'i'
   457  006195  76                 	db	118	;'v'
   458  006196  6F                 	db	111	;'o'
   459  006197  20                 	db	32
   460  006198  72                 	db	114	;'r'
   461  006199  65                 	db	101	;'e'
   462  00619A  6E                 	db	110	;'n'
   463  00619B  6F                 	db	111	;'o'
   464  00619C  6D                 	db	109	;'m'
   465  00619D  65                 	db	101	;'e'
   466  00619E  61                 	db	97	;'a'
   467  00619F  64                 	db	100	;'d'
   468  0061A0  6F                 	db	111	;'o'
   469  0061A1  00                 	db	0
   470  0061A2                     STR_16:
   471  0061A2  53                 	db	83	;'S'
   472  0061A3  50                 	db	80	;'P'
   473  0061A4  49                 	db	73	;'I'
   474  0061A5  20                 	db	32
   475  0061A6  63                 	db	99	;'c'
   476  0061A7  6F                 	db	111	;'o'
   477  0061A8  6E                 	db	110	;'n'
   478  0061A9  66                 	db	102	;'f'
   479  0061AA  69                 	db	105	;'i'
   480  0061AB  67                 	db	103	;'g'
   481  0061AC  75                 	db	117	;'u'
   482  0061AD  72                 	db	114	;'r'
   483  0061AE  61                 	db	97	;'a'
   484  0061AF  64                 	db	100	;'d'
   485  0061B0  61                 	db	97	;'a'
   486  0061B1  21                 	db	33
   487  0061B2  00                 	db	0
   488  0061B3                     STR_19:
   489  0061B3  49                 	db	73	;'I'
   490  0061B4  6E                 	db	110	;'n'
   491  0061B5  73                 	db	115	;'s'
   492  0061B6  69                 	db	105	;'i'
   493  0061B7  72                 	db	114	;'r'
   494  0061B8  61                 	db	97	;'a'
   495  0061B9  20                 	db	32
   496  0061BA  6F                 	db	111	;'o'
   497  0061BB  20                 	db	32
   498  0061BC  43                 	db	67	;'C'
   499  0061BD  61                 	db	97	;'a'
   500  0061BE  72                 	db	114	;'r'
   501  0061BF  74                 	db	116	;'t'
   502  0061C0  61                 	db	97	;'a'
   503  0061C1  6F                 	db	111	;'o'
   504  0061C2  00                 	db	0
   505  0061C3                     STR_20:
   506  0061C3  43                 	db	67	;'C'
   507  0061C4  61                 	db	97	;'a'
   508  0061C5  72                 	db	114	;'r'
   509  0061C6  74                 	db	116	;'t'
   510  0061C7  61                 	db	97	;'a'
   511  0061C8  6F                 	db	111	;'o'
   512  0061C9  20                 	db	32
   513  0061CA  49                 	db	73	;'I'
   514  0061CB  6E                 	db	110	;'n'
   515  0061CC  73                 	db	115	;'s'
   516  0061CD  65                 	db	101	;'e'
   517  0061CE  72                 	db	114	;'r'
   518  0061CF  69                 	db	105	;'i'
   519  0061D0  64                 	db	100	;'d'
   520  0061D1  6F                 	db	111	;'o'
   521  0061D2  00                 	db	0
   522  0061D3                     STR_11:
   523  0061D3  41                 	db	65	;'A'
   524  0061D4  62                 	db	98	;'b'
   525  0061D5  72                 	db	114	;'r'
   526  0061D6  69                 	db	105	;'i'
   527  0061D7  6E                 	db	110	;'n'
   528  0061D8  64                 	db	100	;'d'
   529  0061D9  6F                 	db	111	;'o'
   530  0061DA  20                 	db	32
   531  0061DB  61                 	db	97	;'a'
   532  0061DC  72                 	db	114	;'r'
   533  0061DD  71                 	db	113	;'q'
   534  0061DE  75                 	db	117	;'u'
   535  0061DF  69                 	db	105	;'i'
   536  0061E0  76                 	db	118	;'v'
   537  0061E1  6F                 	db	111	;'o'
   538  0061E2  00                 	db	0
   539  0061E3                     STR_15:
   540  0061E3  4D                 	db	77	;'M'
   541  0061E4  41                 	db	65	;'A'
   542  0061E5  53                 	db	83	;'S'
   543  0061E6  20                 	db	32
   544  0061E7  51                 	db	81	;'Q'
   545  0061E8  55                 	db	85	;'U'
   546  0061E9  45                 	db	69	;'E'
   547  0061EA  20                 	db	32
   548  0061EB  4D                 	db	77	;'M'
   549  0061EC  45                 	db	69	;'E'
   550  0061ED  52                 	db	82	;'R'
   551  0061EE  44                 	db	68	;'D'
   552  0061EF  41                 	db	65	;'A'
   553  0061F0  00                 	db	0
   554  0061F1                     STR_10:
   555  0061F1  4E                 	db	78	;'N'
   556  0061F2  61                 	db	97	;'a'
   557  0061F3  6F                 	db	111	;'o'
   558  0061F4  20                 	db	32
   559  0061F5  74                 	db	116	;'t'
   560  0061F6  61                 	db	97	;'a'
   561  0061F7  20                 	db	32
   562  0061F8  70                 	db	112	;'p'
   563  0061F9  72                 	db	114	;'r'
   564  0061FA  6F                 	db	111	;'o'
   565  0061FB  6E                 	db	110	;'n'
   566  0061FC  74                 	db	116	;'t'
   567  0061FD  6F                 	db	111	;'o'
   568  0061FE  00                 	db	0
   569  0061FF                     STR_26:
   570  0061FF  45                 	db	69	;'E'
   571  006200  52                 	db	82	;'R'
   572  006201  52                 	db	82	;'R'
   573  006202  4F                 	db	79	;'O'
   574  006203  20                 	db	32
   575  006204  45                 	db	69	;'E'
   576  006205  53                 	db	83	;'S'
   577  006206  43                 	db	67	;'C'
   578  006207  52                 	db	82	;'R'
   579  006208  49                 	db	73	;'I'
   580  006209  54                 	db	84	;'T'
   581  00620A  41                 	db	65	;'A'
   582  00620B  00                 	db	0
   583  00620C                     STR_22:
   584  00620C  4D                 	db	77	;'M'
   585  00620D  4D                 	db	77	;'M'
   586  00620E  43                 	db	67	;'C'
   587  00620F  20                 	db	32
   588  006210  56                 	db	86	;'V'
   589  006211  65                 	db	101	;'e'
   590  006212  72                 	db	114	;'r'
   591  006213  2E                 	db	46
   592  006214  20                 	db	32
   593  006215  33                 	db	51	;'3'
   594  006216  00                 	db	0
   595  006217                     STR_24:
   596  006217  63                 	db	99	;'c'
   597  006218  6F                 	db	111	;'o'
   598  006219  6D                 	db	109	;'m'
   599  00621A  61                 	db	97	;'a'
   600  00621B  6E                 	db	110	;'n'
   601  00621C  64                 	db	100	;'d'
   602  00621D  6F                 	db	111	;'o'
   603  00621E  20                 	db	32
   604  00621F  34                 	db	52	;'4'
   605  006220  43                 	db	67	;'C'
   606  006221  00                 	db	0
   607  006222                     STR_18:
   608  006222  53                 	db	83	;'S'
   609  006223  65                 	db	101	;'e'
   610  006224  6D                 	db	109	;'m'
   611  006225  20                 	db	32
   612  006226  43                 	db	67	;'C'
   613  006227  61                 	db	97	;'a'
   614  006228  72                 	db	114	;'r'
   615  006229  74                 	db	116	;'t'
   616  00622A  61                 	db	97	;'a'
   617  00622B  6F                 	db	111	;'o'
   618  00622C  00                 	db	0
   619  00622D                     STR_21:
   620  00622D  53                 	db	83	;'S'
   621  00622E  44                 	db	68	;'D'
   622  00622F  20                 	db	32
   623  006230  56                 	db	86	;'V'
   624  006231  45                 	db	69	;'E'
   625  006232  52                 	db	82	;'R'
   626  006233  2E                 	db	46
   627  006234  20                 	db	32
   628  006235  31                 	db	49	;'1'
   629  006236  00                 	db	0
   630  006237                     STR_12:
   631  006237  74                 	db	116	;'t'
   632  006238  65                 	db	101	;'e'
   633  006239  73                 	db	115	;'s'
   634  00623A  74                 	db	116	;'t'
   635  00623B  65                 	db	101	;'e'
   636  00623C  2E                 	db	46
   637  00623D  74                 	db	116	;'t'
   638  00623E  78                 	db	120	;'x'
   639  00623F  74                 	db	116	;'t'
   640  006240  00                 	db	0
   641  006241                     STR_23:
   642  006241  4C                 	db	76	;'L'
   643  006242  45                 	db	69	;'E'
   644  006243  4E                 	db	78	;'N'
   645  006244  44                 	db	68	;'D'
   646  006245  4F                 	db	79	;'O'
   647  006246  20                 	db	32
   648  006247  53                 	db	83	;'S'
   649  006248  44                 	db	68	;'D'
   650  006249  00                 	db	0
   651  00624A  25                 	db	37
   652  00624B  64                 	db	100	;'d'
   653  00624C  3A                 	db	58	;':'
   654  00624D  25                 	db	37
   655  00624E  64                 	db	100	;'d'
   656  00624F  3A                 	db	58	;':'
   657  006250  25                 	db	37
   658  006251  64                 	db	100	;'d'
   659  006252  00                 	db	0
   660  006253                     STR_25:
   661  006253  73                 	db	115	;'s'
   662  006254  61                 	db	97	;'a'
   663  006255  69                 	db	105	;'i'
   664  006256  6E                 	db	110	;'n'
   665  006257  64                 	db	100	;'d'
   666  006258  6F                 	db	111	;'o'
   667  006259  00                 	db	0
   668  00625A  48                 	db	72	;'H'
   669  00625B  6F                 	db	111	;'o'
   670  00625C  72                 	db	114	;'r'
   671  00625D  61                 	db	97	;'a'
   672  00625E  3A                 	db	58	;':'
   673  00625F  00                 	db	0
   674  006260  44                 	db	68	;'D'
   675  006261  61                 	db	97	;'a'
   676  006262  74                 	db	116	;'t'
   677  006263  61                 	db	97	;'a'
   678  006264  3A                 	db	58	;':'
   679  006265  00                 	db	0
   680  006266                     STR_3:
   681  006266  25                 	db	37
   682  006267  2E                 	db	46
   683  006268  30                 	db	48	;'0'
   684  006269  37                 	db	55	;'7'
   685  00626A  66                 	db	102	;'f'
   686  00626B  00                 	db	0
   687  00626C                     STR_13:
   688  00626C  79                 	db	121	;'y'
   689  00626D  72                 	db	114	;'r'
   690  00626E  64                 	db	100	;'d'
   691  00626F  73                 	db	115	;'s'
   692  006270  00                 	db	0
   693  006271  4C                 	db	76	;'L'
   694  006272  6F                 	db	111	;'o'
   695  006273  6E                 	db	110	;'n'
   696  006274  3A                 	db	58	;':'
   697  006275  00                 	db	0
   698  006276                     STR_27:
   699  006276  46                 	db	70	;'F'
   700  006277  41                 	db	65	;'A'
   701  006278  54                 	db	84	;'T'
   702  006279  00                 	db	0
   703  00627A  0D                 	db	13
   704  00627B  0A                 	db	10
   705  00627C  00                 	db	0
   706  00627D                     STR_6:
   707  00627D  7C                 	db	124
   708  00627E  00                 	db	0
   709  00627F  00                 	db	0	; dummy byte at the end
   710  0000                     
   711                           ; #config settings
   712                           
   713                           	psect	cinit
   714  003242                     __pcinit:
   715                           	opt stack 0
   716  003242                     start_initialization:
   717                           	opt stack 0
   718  003242                     __initialization:
   719                           	opt stack 0
   720                           
   721                           ; Initialize objects allocated to BANK1 (29 bytes)
   722                           ; load TBLPTR registers with __pidataBANK1
   723  003242  0EB4               	movlw	low __pidataBANK1
   724  003244  6EF6               	movwf	tblptrl,c
   725  003246  0E39               	movlw	high __pidataBANK1
   726  003248  6EF7               	movwf	tblptrh,c
   727  00324A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   728  00324C  6EF8               	movwf	tblptru,c
   729  00324E  EE01  F0DC         	lfsr	0,__pdataBANK1
   730  003252  EE10 F01D          	lfsr	1,29
   731  003256                     copy_data0:
   732  003256  0009               	tblrd		*+
   733  003258  CFF5 FFEE          	movff	tablat,postinc0
   734  00325C  50E5               	movf	postdec1,w,c
   735  00325E  50E1               	movf	fsr1l,w,c
   736  003260  E1FA               	bnz	copy_data0
   737                           
   738                           ; Clear objects allocated to BIGRAM (544 bytes)
   739  003262  EE02  F0C6         	lfsr	0,__pbssBIGRAM
   740  003266  EE12 F020          	lfsr	1,544
   741  00326A                     clear_0:
   742  00326A  6AEE               	clrf	postinc0,c
   743  00326C  50E5               	movf	postdec1,w,c
   744  00326E  50E1               	movf	fsr1l,w,c
   745  003270  E1FC               	bnz	clear_0
   746  003272  50E2               	movf	fsr1h,w,c
   747  003274  E1FA               	bnz	clear_0
   748                           
   749                           ; Clear objects allocated to BANK2 (198 bytes)
   750  003276  EE02  F000         	lfsr	0,__pbssBANK2
   751  00327A  0EC6               	movlw	198
   752  00327C                     clear_1:
   753  00327C  6AEE               	clrf	postinc0,c
   754  00327E  06E8               	decf	wreg,f,c
   755  003280  E1FD               	bnz	clear_1
   756                           
   757                           ; Clear objects allocated to BANK1 (154 bytes)
   758  003282  EE01  F000         	lfsr	0,__pbssBANK1
   759  003286  0E9A               	movlw	154
   760  003288                     clear_2:
   761  003288  6AEE               	clrf	postinc0,c
   762  00328A  06E8               	decf	wreg,f,c
   763  00328C  E1FD               	bnz	clear_2
   764                           
   765                           ; Clear objects allocated to BANK0 (14 bytes)
   766  00328E  EE00  F0E9         	lfsr	0,__pbssBANK0
   767  003292  0E0E               	movlw	14
   768  003294                     clear_3:
   769  003294  6AEE               	clrf	postinc0,c
   770  003296  06E8               	decf	wreg,f,c
   771  003298  E1FD               	bnz	clear_3
   772                           
   773                           ; Clear objects allocated to COMRAM (24 bytes)
   774  00329A  EE00  F02E         	lfsr	0,__pbssCOMRAM
   775  00329E  0E18               	movlw	24
   776  0032A0                     clear_4:
   777  0032A0  6AEE               	clrf	postinc0,c
   778  0032A2  06E8               	decf	wreg,f,c
   779  0032A4  E1FD               	bnz	clear_4
   780  0032A6                     end_of_initialization:
   781                           	opt stack 0
   782  0032A6                     __end_of__initialization:
   783                           	opt stack 0
   784  0032A6  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   785  0032A8  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   786  0032AA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   787  0032AC  6EF8               	movwf	tblptru,c
   788  0032AE  0100               	movlb	0
   789  0032B0  EF2A  F01C         	goto	_main	;jump to C main() function
   790                           tblptru	equ	0xFF8
   791                           tblptrh	equ	0xFF7
   792                           tblptrl	equ	0xFF6
   793                           tablat	equ	0xFF5
   794                           postinc0	equ	0xFEE
   795                           wreg	equ	0xFE8
   796                           postdec1	equ	0xFE5
   797                           fsr1h	equ	0xFE2
   798                           fsr1l	equ	0xFE1
   799                           
   800                           	psect	bssCOMRAM
   801  00002E                     __pbssCOMRAM:
   802                           	opt stack 0
   803  00002E                     _rmc_code:
   804                           	opt stack 0
   805  00002E                     	ds	3
   806  000031                     _gga_code:
   807                           	opt stack 0
   808  000031                     	ds	3
   809  000034                     _rmc_index:
   810                           	opt stack 0
   811  000034                     	ds	2
   812  000036                     _gga_index:
   813                           	opt stack 0
   814  000036                     	ds	2
   815  000038                     timer_dois@flag:
   816                           	opt stack 0
   817  000038                     	ds	1
   818  000039                     _estado:
   819                           	opt stack 0
   820  000039                     	ds	1
   821  00003A                     _dado:
   822                           	opt stack 0
   823  00003A                     	ds	1
   824  00003B                     _s:
   825                           	opt stack 0
   826  00003B                     	ds	1
   827  00003C                     _Result:
   828                           	opt stack 0
   829  00003C                     	ds	1
   830  00003D                     _is_it_rmc_string:
   831                           	opt stack 0
   832  00003D                     	ds	1
   833  00003E                     _is_it_gga_string:
   834                           	opt stack 0
   835  00003E                     	ds	1
   836  00003F                     _comma_counter_rmc:
   837                           	opt stack 0
   838  00003F                     	ds	1
   839  000040                     _comma_counter_gga:
   840                           	opt stack 0
   841  000040                     	ds	1
   842  000041                     _E_W:
   843                           	opt stack 0
   844  000041                     	ds	1
   845  000042                     _n_s:
   846                           	opt stack 0
   847  000042                     	ds	1
   848  000043                     _tarefa_em_execucao:
   849                           	opt stack 0
   850  000043                     	ds	1
   851  000044                     _sinaliza_int_timer:
   852                           	opt stack 0
   853  000044                     	ds	1
   854  000045                     _data_uart_recebe:
   855                           	opt stack 0
   856  000045                     	ds	1
   857                           tblptru	equ	0xFF8
   858                           tblptrh	equ	0xFF7
   859                           tblptrl	equ	0xFF6
   860                           tablat	equ	0xFF5
   861                           postinc0	equ	0xFEE
   862                           wreg	equ	0xFE8
   863                           postdec1	equ	0xFE5
   864                           fsr1h	equ	0xFE2
   865                           fsr1l	equ	0xFE1
   866                           
   867                           	psect	bssBANK0
   868  0000E9                     __pbssBANK0:
   869                           	opt stack 0
   870  0000E9                     _tempo_tarefa:
   871                           	opt stack 0
   872  0000E9                     	ds	4
   873  0000ED                     _fsid:
   874                           	opt stack 0
   875  0000ED                     	ds	2
   876  0000EF                     _FatFs:
   877                           	opt stack 0
   878  0000EF                     	ds	2
   879  0000F1                     _data_buff:
   880                           	opt stack 0
   881  0000F1                     	ds	2
   882  0000F3                     _rd:
   883                           	opt stack 0
   884  0000F3                     	ds	2
   885  0000F5                     _timeout_tarefa:
   886                           	opt stack 0
   887  0000F5                     	ds	2
   888                           tblptru	equ	0xFF8
   889                           tblptrh	equ	0xFF7
   890                           tblptrl	equ	0xFF6
   891                           tablat	equ	0xFF5
   892                           postinc0	equ	0xFEE
   893                           wreg	equ	0xFE8
   894                           postdec1	equ	0xFE5
   895                           fsr1h	equ	0xFE2
   896                           fsr1l	equ	0xFE1
   897                           
   898                           	psect	bssBANK1
   899  000100                     __pbssBANK1:
   900                           	opt stack 0
   901  000100                     _data_buffer_32:
   902                           	opt stack 0
   903  000100                     	ds	32
   904  000120                     _buff:
   905                           	opt stack 0
   906  000120                     	ds	20
   907  000134                     _txt:
   908                           	opt stack 0
   909  000134                     	ds	20
   910  000148                     _gga_pointers:
   911                           	opt stack 0
   912  000148                     	ds	20
   913  00015C                     _rmc_pointers:
   914                           	opt stack 0
   915  00015C                     	ds	12
   916  000168                     _f_time:
   917                           	opt stack 0
   918  000168                     	ds	9
   919  000171                     _info_chaves:
   920                           	opt stack 0
   921  000171                     	ds	7
   922  000178                     _fileSize:
   923                           	opt stack 0
   924  000178                     	ds	4
   925  00017C                     _tempo_backup:
   926                           	opt stack 0
   927  00017C                     	ds	4
   928  000180                     _p_tarefas:
   929                           	opt stack 0
   930  000180                     	ds	4
   931  000184                     _data_buffer:
   932                           	opt stack 0
   933  000184                     	ds	15
   934  000193                     _dado_buffer:
   935                           	opt stack 0
   936  000193                     	ds	7
   937                           tblptru	equ	0xFF8
   938                           tblptrh	equ	0xFF7
   939                           tblptrl	equ	0xFF6
   940                           tablat	equ	0xFF5
   941                           postinc0	equ	0xFEE
   942                           wreg	equ	0xFE8
   943                           postdec1	equ	0xFE5
   944                           fsr1h	equ	0xFE2
   945                           fsr1l	equ	0xFE1
   946                           
   947                           	psect	dataBANK1
   948  0001DC                     __pdataBANK1:
   949                           	opt stack 0
   950  0001DC                     _fileName:
   951                           	opt stack 0
   952  0001DC                     	ds	15
   953  0001EB                     escreve_inteiro_uart@F3956:
   954                           	opt stack 0
   955  0001EB                     	ds	7
   956  0001F2                     escreve_inteiro_lcd@F3966:
   957                           	opt stack 0
   958  0001F2                     	ds	7
   959                           tblptru	equ	0xFF8
   960                           tblptrh	equ	0xFF7
   961                           tblptrl	equ	0xFF6
   962                           tablat	equ	0xFF5
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           postdec1	equ	0xFE5
   966                           fsr1h	equ	0xFE2
   967                           fsr1l	equ	0xFE1
   968                           
   969                           	psect	bssBANK2
   970  000200                     __pbssBANK2:
   971                           	opt stack 0
   972  000200                     _gga_buffer:
   973                           	opt stack 0
   974  000200                     	ds	80
   975  000250                     _rmc_buffer:
   976                           	opt stack 0
   977  000250                     	ds	70
   978  000296                     _folder:
   979                           	opt stack 0
   980  000296                     	ds	48
   981                           tblptru	equ	0xFF8
   982                           tblptrh	equ	0xFF7
   983                           tblptrl	equ	0xFF6
   984                           tablat	equ	0xFF5
   985                           postinc0	equ	0xFEE
   986                           wreg	equ	0xFE8
   987                           postdec1	equ	0xFE5
   988                           fsr1h	equ	0xFE2
   989                           fsr1l	equ	0xFE1
   990                           
   991                           	psect	bssBIGRAM
   992  0002C6                     __pbssBIGRAM:
   993                           	opt stack 0
   994  0002C6                     _fs:
   995                           	opt stack 0
   996  0002C6                     	ds	544
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           fsr1h	equ	0xFE2
  1005                           fsr1l	equ	0xFE1
  1006                           
  1007                           	psect	cstackBANK1
  1008  00019A                     __pcstackBANK1:
  1009                           	opt stack 0
  1010  00019A                     f_open@fn:
  1011                           	opt stack 0
  1012                           
  1013                           ; 12 bytes @ 0x0
  1014  00019A                     	ds	12
  1015  0001A6                     f_open@rs:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0xC
  1019  0001A6                     	ds	2
  1020  0001A8                     f_open@dw:
  1021                           	opt stack 0
  1022                           
  1023                           ; 4 bytes @ 0xE
  1024  0001A8                     	ds	4
  1025  0001AC                     f_open@res:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x12
  1029  0001AC                     	ds	1
  1030  0001AD                     f_open@dir:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x13
  1034  0001AD                     	ds	2
  1035  0001AF                     f_open@dj:
  1036                           	opt stack 0
  1037                           
  1038                           ; 14 bytes @ 0x15
  1039  0001AF                     	ds	14
  1040  0001BD                     SDCard@bw:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x23
  1044  0001BD                     	ds	2
  1045  0001BF                     SDCard@FResult:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x25
  1049  0001BF                     	ds	1
  1050  0001C0                     SDCard@fil:
  1051                           	opt stack 0
  1052                           
  1053                           ; 28 bytes @ 0x26
  1054  0001C0                     	ds	28
  1055                           tblptru	equ	0xFF8
  1056                           tblptrh	equ	0xFF7
  1057                           tblptrl	equ	0xFF6
  1058                           tablat	equ	0xFF5
  1059                           postinc0	equ	0xFEE
  1060                           wreg	equ	0xFE8
  1061                           postdec1	equ	0xFE5
  1062                           fsr1h	equ	0xFE2
  1063                           fsr1l	equ	0xFE1
  1064                           
  1065                           	psect	cstackBANK0
  1066  000060                     __pcstackBANK0:
  1067                           	opt stack 0
  1068  000060                     ??_clust2sect:
  1069  000060                     ??_get_fattime:
  1070  000060                     _make_dirfile$2510:
  1071                           	opt stack 0
  1072  000060                     itoa@buf:
  1073                           	opt stack 0
  1074  000060                     mensagem_inicial@msg_linha_um:
  1075                           	opt stack 0
  1076                           
  1077                           ; 17 bytes @ 0x0
  1078  000060                     	ds	2
  1079  000062                     make_dirfile@b:
  1080                           	opt stack 0
  1081  000062                     itoa@val:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x2
  1085  000062                     	ds	1
  1086  000063                     make_dirfile@t:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x3
  1090  000063                     	ds	1
  1091  000064                     make_dirfile@a:
  1092                           	opt stack 0
  1093  000064                     itoa@base:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x4
  1097  000064                     	ds	1
  1098  000065                     make_dirfile@n:
  1099                           	opt stack 0
  1100                           
  1101                           ; 1 bytes @ 0x5
  1102  000065                     	ds	1
  1103  000066                     make_dirfile@c:
  1104                           	opt stack 0
  1105  000066                     escreve_inteiro_lcd@texto:
  1106                           	opt stack 0
  1107                           
  1108                           ; 7 bytes @ 0x6
  1109  000066                     	ds	7
  1110  00006D                     sdc_reset@i:
  1111                           	opt stack 0
  1112  00006D                     sdc_disk_read@p_buff:
  1113                           	opt stack 0
  1114  00006D                     sdc_disk_write@p_buff:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0xD
  1118  00006D                     	ds	2
  1119  00006F                     sdc_reset@count_nosd:
  1120                           	opt stack 0
  1121  00006F                     sdc_disk_read@sector:
  1122                           	opt stack 0
  1123  00006F                     sdc_disk_write@sector:
  1124                           	opt stack 0
  1125                           
  1126                           ; 4 bytes @ 0xF
  1127  00006F                     	ds	2
  1128  000071                     sdc_reset@count:
  1129                           	opt stack 0
  1130  000071                     mensagem_inicial@msg_dois:
  1131                           	opt stack 0
  1132                           
  1133                           ; 17 bytes @ 0x11
  1134  000071                     	ds	2
  1135  000073                     sdc_reset@buff:
  1136                           	opt stack 0
  1137  000073                     sdc_disk_read@count:
  1138                           	opt stack 0
  1139  000073                     sdc_disk_write@count:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x13
  1143  000073                     	ds	1
  1144  000074                     ??_sdc_disk_initialize:
  1145  000074                     ??_sdc_disk_read:
  1146  000074                     ??_sdc_disk_write:
  1147                           
  1148                           ; 1 bytes @ 0x14
  1149  000074                     	ds	1
  1150  000075                     sdc_disk_initialize@i:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x15
  1154  000075                     	ds	2
  1155  000077                     sdc_disk_initialize@stat:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x17
  1159  000077                     	ds	1
  1160  000078                     sdc_disk_read@ptr:
  1161                           	opt stack 0
  1162  000078                     sdc_disk_initialize@count1:
  1163                           	opt stack 0
  1164  000078                     sdc_disk_write@i:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x18
  1168  000078                     	ds	1
  1169  000079                     sdc_disk_read@start_add:
  1170                           	opt stack 0
  1171                           
  1172                           ; 4 bytes @ 0x19
  1173  000079                     	ds	1
  1174  00007A                     sdc_disk_initialize@crc_number:
  1175                           	opt stack 0
  1176  00007A                     sdc_disk_write@count1:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x1A
  1180  00007A                     	ds	2
  1181  00007C                     sdc_disk_initialize@buff_i:
  1182                           	opt stack 0
  1183  00007C                     sdc_disk_write@res:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0x1C
  1187  00007C                     	ds	1
  1188  00007D                     sdc_disk_initialize@ocr:
  1189                           	opt stack 0
  1190  00007D                     sdc_disk_read@length:
  1191                           	opt stack 0
  1192  00007D                     sdc_disk_write@j:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x1D
  1196  00007D                     	ds	1
  1197  00007E                     sdc_disk_initialize@count2:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x1E
  1201  00007E                     	ds	1
  1202  00007F                     sdc_disk_read@buff:
  1203                           	opt stack 0
  1204  00007F                     sdc_disk_write@buff:
  1205                           	opt stack 0
  1206                           
  1207                           ; 1 bytes @ 0x1F
  1208  00007F                     	ds	1
  1209  000080                     sdc_disk_initialize@buff:
  1210                           	opt stack 0
  1211  000080                     disk_read@buff:
  1212                           	opt stack 0
  1213  000080                     disk_write@buff:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x20
  1217  000080                     	ds	1
  1218  000081                     disk_initialize@pdrv:
  1219                           	opt stack 0
  1220                           
  1221                           ; 1 bytes @ 0x21
  1222  000081                     	ds	1
  1223  000082                     disk_initialize@stat:
  1224                           	opt stack 0
  1225  000082                     disk_read@sector:
  1226                           	opt stack 0
  1227  000082                     disk_write@sector:
  1228                           	opt stack 0
  1229                           
  1230                           ; 4 bytes @ 0x22
  1231  000082                     	ds	4
  1232  000086                     disk_read@count:
  1233                           	opt stack 0
  1234  000086                     disk_write@count:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x26
  1238  000086                     	ds	1
  1239  000087                     ??_disk_read:
  1240  000087                     ??_disk_write:
  1241                           
  1242                           ; 1 bytes @ 0x27
  1243  000087                     	ds	1
  1244  000088                     disk_write@pdrv:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x28
  1248  000088                     	ds	1
  1249  000089                     disk_read@pdrv:
  1250                           	opt stack 0
  1251  000089                     disk_write@result:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x29
  1255  000089                     	ds	1
  1256  00008A                     disk_read@result:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x2A
  1260  00008A                     	ds	1
  1261  00008B                     disk_write@res:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x2B
  1265  00008B                     	ds	1
  1266  00008C                     disk_read@res:
  1267                           	opt stack 0
  1268                           
  1269                           ; 1 bytes @ 0x2C
  1270  00008C                     	ds	1
  1271  00008D                     move_window@sector:
  1272                           	opt stack 0
  1273  00008D                     check_fs@sect:
  1274                           	opt stack 0
  1275                           
  1276                           ; 4 bytes @ 0x2D
  1277  00008D                     	ds	4
  1278  000091                     ??_move_window:
  1279  000091                     
  1280                           ; 1 bytes @ 0x31
  1281  000091                     	ds	2
  1282  000093                     check_fs@fs:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x33
  1286  000093                     	ds	2
  1287  000095                     auto_mount@path:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x35
  1291  000095                     	ds	2
  1292  000097                     auto_mount@chk_wp:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x37
  1296  000097                     	ds	1
  1297  000098                     ??_auto_mount:
  1298                           
  1299                           ; 1 bytes @ 0x38
  1300  000098                     	ds	3
  1301  00009B                     move_window@n:
  1302                           	opt stack 0
  1303                           
  1304                           ; 1 bytes @ 0x3B
  1305  00009B                     	ds	1
  1306  00009C                     move_window@wsect:
  1307                           	opt stack 0
  1308                           
  1309                           ; 4 bytes @ 0x3C
  1310  00009C                     	ds	4
  1311  0000A0                     move_window@fs:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x40
  1315  0000A0                     	ds	2
  1316  0000A2                     ?_get_cluster:
  1317                           	opt stack 0
  1318  0000A2                     sync@fs:
  1319                           	opt stack 0
  1320  0000A2                     get_cluster@clust:
  1321                           	opt stack 0
  1322  0000A2                     put_cluster@clust:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0x42
  1326  0000A2                     	ds	2
  1327  0000A4                     ??_get_cluster:
  1328  0000A4                     put_cluster@val:
  1329                           	opt stack 0
  1330  0000A4                     f_sync@fp:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0x44
  1334  0000A4                     	ds	2
  1335  0000A6                     ??_put_cluster:
  1336  0000A6                     f_sync@tim:
  1337                           	opt stack 0
  1338                           
  1339                           ; 4 bytes @ 0x46
  1340  0000A6                     	ds	1
  1341  0000A7                     auto_mount@maxclust:
  1342                           	opt stack 0
  1343                           
  1344                           ; 4 bytes @ 0x47
  1345  0000A7                     	ds	3
  1346  0000AA                     f_sync@res:
  1347                           	opt stack 0
  1348  0000AA                     _put_cluster$2400:
  1349                           	opt stack 0
  1350                           
  1351                           ; 2 bytes @ 0x4A
  1352  0000AA                     	ds	1
  1353  0000AB                     get_cluster@wc:
  1354                           	opt stack 0
  1355  0000AB                     f_sync@dir:
  1356                           	opt stack 0
  1357  0000AB                     auto_mount@bootsect:
  1358                           	opt stack 0
  1359                           
  1360                           ; 4 bytes @ 0x4B
  1361  0000AB                     	ds	1
  1362  0000AC                     _put_cluster$2401:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0x4C
  1366  0000AC                     	ds	1
  1367  0000AD                     f_close@fp:
  1368                           	opt stack 0
  1369  0000AD                     get_cluster@fatsect:
  1370                           	opt stack 0
  1371                           
  1372                           ; 4 bytes @ 0x4D
  1373  0000AD                     	ds	1
  1374  0000AE                     put_cluster@fatsect:
  1375                           	opt stack 0
  1376                           
  1377                           ; 4 bytes @ 0x4E
  1378  0000AE                     	ds	1
  1379  0000AF                     f_close@res:
  1380                           	opt stack 0
  1381  0000AF                     auto_mount@totalsect:
  1382                           	opt stack 0
  1383                           
  1384                           ; 4 bytes @ 0x4F
  1385  0000AF                     	ds	2
  1386  0000B1                     get_cluster@bc:
  1387                           	opt stack 0
  1388                           
  1389                           ; 2 bytes @ 0x51
  1390  0000B1                     	ds	1
  1391  0000B2                     put_cluster@bc:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x52
  1395  0000B2                     	ds	1
  1396  0000B3                     get_cluster@fs:
  1397                           	opt stack 0
  1398  0000B3                     auto_mount@p:
  1399                           	opt stack 0
  1400                           
  1401                           ; 2 bytes @ 0x53
  1402  0000B3                     	ds	1
  1403  0000B4                     put_cluster@p:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x54
  1407  0000B4                     	ds	1
  1408  0000B5                     auto_mount@stat:
  1409                           	opt stack 0
  1410  0000B5                     next_dir_entry@dj:
  1411                           	opt stack 0
  1412                           
  1413                           ; 2 bytes @ 0x55
  1414  0000B5                     	ds	1
  1415  0000B6                     auto_mount@fmt:
  1416                           	opt stack 0
  1417  0000B6                     put_cluster@fs:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x56
  1421  0000B6                     	ds	1
  1422  0000B7                     ??_next_dir_entry:
  1423  0000B7                     auto_mount@fatsize:
  1424                           	opt stack 0
  1425                           
  1426                           ; 4 bytes @ 0x57
  1427  0000B7                     	ds	1
  1428  0000B8                     ?_create_chain:
  1429                           	opt stack 0
  1430  0000B8                     remove_chain@clust:
  1431                           	opt stack 0
  1432  0000B8                     create_chain@clust:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0x58
  1436  0000B8                     	ds	2
  1437  0000BA                     
  1438                           ; 1 bytes @ 0x5A
  1439  0000BA                     	ds	1
  1440  0000BB                     auto_mount@fs:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x5B
  1444  0000BB                     	ds	1
  1445  0000BC                     remove_chain@nxt:
  1446                           	opt stack 0
  1447  0000BC                     create_chain@mcl:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x5C
  1451  0000BC                     	ds	2
  1452  0000BE                     remove_chain@fs:
  1453                           	opt stack 0
  1454  0000BE                     create_chain@fs:
  1455                           	opt stack 0
  1456  0000BE                     next_dir_entry@clust:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x5E
  1460  0000BE                     	ds	2
  1461  0000C0                     create_chain@cstat:
  1462                           	opt stack 0
  1463  0000C0                     next_dir_entry@idx:
  1464                           	opt stack 0
  1465                           
  1466                           ; 2 bytes @ 0x60
  1467  0000C0                     	ds	2
  1468  0000C2                     create_chain@scl:
  1469                           	opt stack 0
  1470  0000C2                     trace_path@dj:
  1471                           	opt stack 0
  1472                           
  1473                           ; 2 bytes @ 0x62
  1474  0000C2                     	ds	2
  1475  0000C4                     create_chain@ncl:
  1476                           	opt stack 0
  1477  0000C4                     trace_path@fn:
  1478                           	opt stack 0
  1479                           
  1480                           ; 2 bytes @ 0x64
  1481  0000C4                     	ds	2
  1482  0000C6                     trace_path@path:
  1483                           	opt stack 0
  1484  0000C6                     reserve_direntry@dj:
  1485                           	opt stack 0
  1486  0000C6                     f_write@fp:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x66
  1490  0000C6                     	ds	2
  1491  0000C8                     trace_path@dir:
  1492                           	opt stack 0
  1493  0000C8                     reserve_direntry@dir:
  1494                           	opt stack 0
  1495  0000C8                     f_write@buff:
  1496                           	opt stack 0
  1497                           
  1498                           ; 2 bytes @ 0x68
  1499  0000C8                     	ds	2
  1500  0000CA                     ??_trace_path:
  1501  0000CA                     ??_reserve_direntry:
  1502  0000CA                     f_write@btw:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x6A
  1506  0000CA                     	ds	2
  1507  0000CC                     f_write@bw:
  1508                           	opt stack 0
  1509  0000CC                     reserve_direntry@sector:
  1510                           	opt stack 0
  1511                           
  1512                           ; 4 bytes @ 0x6C
  1513  0000CC                     	ds	2
  1514  0000CE                     ??_f_write:
  1515  0000CE                     _trace_path$2557:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x6E
  1519  0000CE                     	ds	2
  1520  0000D0                     reserve_direntry@n:
  1521                           	opt stack 0
  1522  0000D0                     _trace_path$2559:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x70
  1526  0000D0                     	ds	1
  1527  0000D1                     reserve_direntry@dptr:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x71
  1531  0000D1                     	ds	1
  1532  0000D2                     trace_path@fs:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x72
  1536  0000D2                     	ds	1
  1537  0000D3                     reserve_direntry@c:
  1538                           	opt stack 0
  1539                           
  1540                           ; 1 bytes @ 0x73
  1541  0000D3                     	ds	1
  1542  0000D4                     trace_path@clust:
  1543                           	opt stack 0
  1544  0000D4                     reserve_direntry@clust:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x74
  1548  0000D4                     	ds	2
  1549  0000D6                     trace_path@ds:
  1550                           	opt stack 0
  1551  0000D6                     reserve_direntry@fs:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x76
  1555  0000D6                     	ds	1
  1556  0000D7                     trace_path@dptr:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x77
  1560  0000D7                     	ds	2
  1561  0000D9                     f_open@fp:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x79
  1565  0000D9                     	ds	1
  1566  0000DA                     f_write@wbuff:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0x7A
  1570  0000DA                     	ds	1
  1571  0000DB                     f_open@path:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x7B
  1575  0000DB                     	ds	1
  1576  0000DC                     f_write@sect:
  1577                           	opt stack 0
  1578                           
  1579                           ; 4 bytes @ 0x7C
  1580  0000DC                     	ds	1
  1581  0000DD                     f_open@mode:
  1582                           	opt stack 0
  1583                           
  1584                           ; 1 bytes @ 0x7D
  1585  0000DD                     	ds	1
  1586  0000DE                     ??_f_open:
  1587                           
  1588                           ; 1 bytes @ 0x7E
  1589  0000DE                     	ds	2
  1590  0000E0                     f_write@res:
  1591                           	opt stack 0
  1592                           
  1593                           ; 1 bytes @ 0x80
  1594  0000E0                     	ds	1
  1595  0000E1                     f_write@cc:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x81
  1599  0000E1                     	ds	2
  1600  0000E3                     f_write@clust:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x83
  1604  0000E3                     	ds	2
  1605  0000E5                     f_write@wcnt:
  1606                           	opt stack 0
  1607                           
  1608                           ; 2 bytes @ 0x85
  1609  0000E5                     	ds	2
  1610  0000E7                     ??_SDCard:
  1611                           
  1612                           ; 1 bytes @ 0x87
  1613  0000E7                     	ds	2
  1614                           tblptru	equ	0xFF8
  1615                           tblptrh	equ	0xFF7
  1616                           tblptrl	equ	0xFF6
  1617                           tablat	equ	0xFF5
  1618                           postinc0	equ	0xFEE
  1619                           wreg	equ	0xFE8
  1620                           postdec1	equ	0xFE5
  1621                           fsr1h	equ	0xFE2
  1622                           fsr1l	equ	0xFE1
  1623                           
  1624                           	psect	cstackCOMRAM
  1625  000001                     __pcstackCOMRAM:
  1626                           	opt stack 0
  1627  000001                     i2write_timer_zero@timer0:
  1628                           	opt stack 0
  1629                           
  1630                           ; 2 bytes @ 0x0
  1631  000001                     	ds	2
  1632  000003                     i2write_timer_zero@timer:
  1633                           	opt stack 0
  1634                           
  1635                           ; 2 bytes @ 0x2
  1636  000003                     	ds	2
  1637  000005                     ??_isr:
  1638                           
  1639                           ; 1 bytes @ 0x4
  1640  000005                     	ds	20
  1641  000019                     isr@cont:
  1642                           	opt stack 0
  1643                           
  1644                           ; 1 bytes @ 0x18
  1645  000019                     	ds	1
  1646  00001A                     ??_dummy_clocks:
  1647  00001A                     ?_memcmp:
  1648                           	opt stack 0
  1649  00001A                     ?___wmul:
  1650                           	opt stack 0
  1651  00001A                     ?___lwdiv:
  1652                           	opt stack 0
  1653  00001A                     ?___lwmod:
  1654                           	opt stack 0
  1655  00001A                     ?_get_fattime:
  1656                           	opt stack 0
  1657  00001A                     ?___lmul:
  1658                           	opt stack 0
  1659  00001A                     ?___lldiv:
  1660                           	opt stack 0
  1661  00001A                     response@buff:
  1662                           	opt stack 0
  1663  00001A                     WriteSPI_@TempVar:
  1664                           	opt stack 0
  1665  00001A                     delay@contador_ext:
  1666                           	opt stack 0
  1667  00001A                     disk_ioctl@cmd:
  1668                           	opt stack 0
  1669  00001A                     sdc_disk_status@stat:
  1670                           	opt stack 0
  1671  00001A                     write_timer_zero@timer0:
  1672                           	opt stack 0
  1673  00001A                     f_mount@fs:
  1674                           	opt stack 0
  1675  00001A                     ___wmul@multiplier:
  1676                           	opt stack 0
  1677  00001A                     ___lwdiv@dividend:
  1678                           	opt stack 0
  1679  00001A                     ___lwmod@dividend:
  1680                           	opt stack 0
  1681  00001A                     memcmp@s1:
  1682                           	opt stack 0
  1683  00001A                     memcpy@d1:
  1684                           	opt stack 0
  1685  00001A                     memset@p1:
  1686                           	opt stack 0
  1687  00001A                     wait_ready@timeout:
  1688                           	opt stack 0
  1689  00001A                     ___lmul@multiplier:
  1690                           	opt stack 0
  1691  00001A                     ___lldiv@dividend:
  1692                           	opt stack 0
  1693                           
  1694                           ; 4 bytes @ 0x19
  1695  00001A                     	ds	1
  1696  00001B                     WriteSPI_@dado:
  1697                           	opt stack 0
  1698  00001B                     delay@contador_int:
  1699                           	opt stack 0
  1700  00001B                     sdc_disk_status@pdrv:
  1701                           	opt stack 0
  1702  00001B                     disk_ioctl@buff:
  1703                           	opt stack 0
  1704                           
  1705                           ; 2 bytes @ 0x1A
  1706  00001B                     	ds	1
  1707  00001C                     ??_disk_status:
  1708  00001C                     escalonador@cont:
  1709                           	opt stack 0
  1710  00001C                     dummy_clocks@n:
  1711                           	opt stack 0
  1712  00001C                     escreve_cmd_lcd@comando:
  1713                           	opt stack 0
  1714  00001C                     endereco_cursor_lcd@endereco:
  1715                           	opt stack 0
  1716  00001C                     escreve_caractere_lcd@data:
  1717                           	opt stack 0
  1718  00001C                     f_mount@drv:
  1719                           	opt stack 0
  1720  00001C                     write_timer_zero@timer:
  1721                           	opt stack 0
  1722  00001C                     ___wmul@multiplicand:
  1723                           	opt stack 0
  1724  00001C                     ___lwdiv@divisor:
  1725                           	opt stack 0
  1726  00001C                     ___lwmod@divisor:
  1727                           	opt stack 0
  1728  00001C                     memcmp@s2:
  1729                           	opt stack 0
  1730  00001C                     memcpy@s1:
  1731                           	opt stack 0
  1732  00001C                     memset@c:
  1733                           	opt stack 0
  1734                           
  1735                           ; 2 bytes @ 0x1B
  1736  00001C                     	ds	1
  1737  00001D                     ??_init_lcd:
  1738  00001D                     posicao_cursor_lcd@coluna:
  1739                           	opt stack 0
  1740  00001D                     disk_ioctl@pdrv:
  1741                           	opt stack 0
  1742  00001D                     dummy_clocks@i:
  1743                           	opt stack 0
  1744  00001D                     escreve_frase_ram_lcd@buffer:
  1745                           	opt stack 0
  1746  00001D                     disk_status@result:
  1747                           	opt stack 0
  1748                           
  1749                           ; 2 bytes @ 0x1C
  1750  00001D                     	ds	1
  1751  00001E                     wait_ready@res:
  1752                           	opt stack 0
  1753  00001E                     posicao_cursor_lcd@linha:
  1754                           	opt stack 0
  1755  00001E                     disk_ioctl@res:
  1756                           	opt stack 0
  1757  00001E                     ___lwdiv@counter:
  1758                           	opt stack 0
  1759  00001E                     ___lwmod@counter:
  1760                           	opt stack 0
  1761  00001E                     ___wmul@product:
  1762                           	opt stack 0
  1763  00001E                     memcmp@n:
  1764                           	opt stack 0
  1765  00001E                     memcpy@n:
  1766                           	opt stack 0
  1767  00001E                     memset@n:
  1768                           	opt stack 0
  1769  00001E                     ___lmul@multiplicand:
  1770                           	opt stack 0
  1771  00001E                     ___lldiv@divisor:
  1772                           	opt stack 0
  1773  00001E                     get_fattime@f_time:
  1774                           	opt stack 0
  1775                           
  1776                           ; 9 bytes @ 0x1D
  1777  00001E                     	ds	1
  1778  00001F                     posicao_cursor_lcd@endereco:
  1779                           	opt stack 0
  1780  00001F                     disk_status@pdrv:
  1781                           	opt stack 0
  1782  00001F                     ___lwdiv@quotient:
  1783                           	opt stack 0
  1784                           
  1785                           ; 2 bytes @ 0x1E
  1786  00001F                     	ds	1
  1787  000020                     ??_mensagem_inicial:
  1788  000020                     ??_memcmp:
  1789  000020                     inicializa_SPI@bus_mode:
  1790                           	opt stack 0
  1791  000020                     disk_status@stat:
  1792                           	opt stack 0
  1793  000020                     memcpy@tmp:
  1794                           	opt stack 0
  1795  000020                     memset@p:
  1796                           	opt stack 0
  1797  000020                     command@arg:
  1798                           	opt stack 0
  1799                           
  1800                           ; 4 bytes @ 0x1F
  1801  000020                     	ds	1
  1802  000021                     inicializa_SPI@smp_phase:
  1803                           	opt stack 0
  1804  000021                     validate@fs:
  1805                           	opt stack 0
  1806  000021                     utoa@buf:
  1807                           	opt stack 0
  1808  000021                     memcpy@d:
  1809                           	opt stack 0
  1810                           
  1811                           ; 2 bytes @ 0x20
  1812  000021                     	ds	1
  1813  000022                     make_dirfile@path:
  1814                           	opt stack 0
  1815  000022                     ___lmul@product:
  1816                           	opt stack 0
  1817  000022                     ___lldiv@quotient:
  1818                           	opt stack 0
  1819                           
  1820                           ; 4 bytes @ 0x21
  1821  000022                     	ds	1
  1822  000023                     validate@id:
  1823                           	opt stack 0
  1824  000023                     utoa@val:
  1825                           	opt stack 0
  1826  000023                     memcpy@s:
  1827                           	opt stack 0
  1828                           
  1829                           ; 2 bytes @ 0x22
  1830  000023                     	ds	1
  1831  000024                     command@CRC:
  1832                           	opt stack 0
  1833  000024                     make_dirfile@dirname:
  1834                           	opt stack 0
  1835                           
  1836                           ; 2 bytes @ 0x23
  1837  000024                     	ds	1
  1838  000025                     ??_validate:
  1839  000025                     command@CMD:
  1840                           	opt stack 0
  1841  000025                     utoa@base:
  1842                           	opt stack 0
  1843                           
  1844                           ; 2 bytes @ 0x24
  1845  000025                     	ds	1
  1846  000026                     ??_make_dirfile:
  1847  000026                     ?_clust2sect:
  1848                           	opt stack 0
  1849  000026                     command@argument:
  1850                           	opt stack 0
  1851  000026                     ___lldiv@counter:
  1852                           	opt stack 0
  1853  000026                     clust2sect@clust:
  1854                           	opt stack 0
  1855                           
  1856                           ; 2 bytes @ 0x25
  1857  000026                     	ds	1
  1858  000027                     utoa@v:
  1859                           	opt stack 0
  1860                           
  1861                           ; 2 bytes @ 0x26
  1862  000027                     	ds	2
  1863  000029                     utoa@c:
  1864                           	opt stack 0
  1865                           
  1866                           ; 1 bytes @ 0x28
  1867  000029                     	ds	1
  1868  00002A                     clust2sect@fs:
  1869                           	opt stack 0
  1870  00002A                     itoa@cp:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x29
  1874  00002A                     	ds	2
  1875  00002C                     escreve_inteiro_lcd@valor:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x2B
  1879  00002C                     	ds	2
  1880  00002E                     tblptru	equ	0xFF8
  1881                           tblptrh	equ	0xFF7
  1882                           tblptrl	equ	0xFF6
  1883                           tablat	equ	0xFF5
  1884                           postinc0	equ	0xFEE
  1885                           wreg	equ	0xFE8
  1886                           postdec1	equ	0xFE5
  1887                           fsr1h	equ	0xFE2
  1888                           fsr1l	equ	0xFE1
  1889                           
  1890                           ; 1 bytes @ 0x2D
  1891 ;;
  1892 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1893 ;;
  1894 ;; *************** function _main *****************
  1895 ;; Defined at:
  1896 ;;		line 218 in file "main.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1910 ;;      Params:         0       0       0       0       0       0       0       0       0
  1911 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1912 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1913 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1914 ;;Total ram usage:        0 bytes
  1915 ;; Hardware stack levels required when called:   14
  1916 ;; This function calls:
  1917 ;;		_SDCard
  1918 ;;		_escalonador
  1919 ;;		_inicializa_SPI
  1920 ;;		_inicializa_tarefas
  1921 ;;		_init_hardware
  1922 ;;		_init_lcd
  1923 ;;		_mensagem_inicial
  1924 ;; This function is called by:
  1925 ;;		Startup code after reset
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	text0
  1930  003854                     __ptext0:
  1931                           	opt stack 0
  1932  003854                     _main:
  1933                           	opt stack 17
  1934                           
  1935                           ;main.c: 220: init_hardware();
  1936                           
  1937                           ;incstack = 0
  1938  003854  EC02  F01D         	call	_init_hardware	;wreg free
  1939                           
  1940                           ;main.c: 222: init_lcd();
  1941  003858  ECFA  F016         	call	_init_lcd	;wreg free
  1942                           
  1943                           ;main.c: 225: mensagem_inicial();
  1944  00385C  ECA7  F018         	call	_mensagem_inicial	;wreg free
  1945                           
  1946                           ;main.c: 226: inicializa_tarefas();
  1947  003860  EC8C  F01C         	call	_inicializa_tarefas	;wreg free
  1948                           
  1949                           ;main.c: 227: inicializa_SPI(0,3,1);
  1950  003864  0E03               	movlw	3
  1951  003866  6E20               	movwf	inicializa_SPI@bus_mode,c
  1952  003868  0E01               	movlw	1
  1953  00386A  6E21               	movwf	inicializa_SPI@smp_phase,c
  1954  00386C  0E00               	movlw	0
  1955  00386E  EC91  F01B         	call	_inicializa_SPI
  1956                           
  1957                           ;main.c: 228: ADCON1 = 0X0F;
  1958  003872  0E0F               	movlw	15
  1959  003874  6EC1               	movwf	4033,c	;volatile
  1960                           
  1961                           ;main.c: 230: SDCard();
  1962  003876  ECEF  F012         	call	_SDCard	;wreg free
  1963  00387A                     
  1964                           ;main.c: 232: {
  1965                           ;main.c: 234: if ((sinaliza_int_timer == 1) && (2))
  1966  00387A  0444               	decf	_sinaliza_int_timer,w,c
  1967  00387C  A4D8               	btfss	status,2,c
  1968  00387E  D7FD               	goto	l83
  1969                           
  1970                           ;main.c: 235: {
  1971                           ;main.c: 236: sinaliza_int_timer = 0;
  1972  003880  0E00               	movlw	0
  1973  003882  6E44               	movwf	_sinaliza_int_timer,c
  1974                           
  1975                           ;main.c: 237: escalonador();
  1976  003884  ECE4  F018         	call	_escalonador	;wreg free
  1977  003888  D7F8               	goto	l83
  1978  00388A                     __end_of_main:
  1979                           	opt stack 0
  1980                           tblptru	equ	0xFF8
  1981                           tblptrh	equ	0xFF7
  1982                           tblptrl	equ	0xFF6
  1983                           tablat	equ	0xFF5
  1984                           postinc0	equ	0xFEE
  1985                           wreg	equ	0xFE8
  1986                           postdec1	equ	0xFE5
  1987                           fsr1h	equ	0xFE2
  1988                           fsr1l	equ	0xFE1
  1989                           status	equ	0xFD8
  1990                           
  1991 ;; *************** function _mensagem_inicial *****************
  1992 ;; Defined at:
  1993 ;;		line 249 in file "main.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;		None
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  1998 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      void 
  2001 ;; Registers used:
  2002 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2008 ;;      Params:         0       0       0       0       0       0       0       0       0
  2009 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2010 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2011 ;;      Totals:         2      34       0       0       0       0       0       0       0
  2012 ;;Total ram usage:       36 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:    5
  2015 ;; This function calls:
  2016 ;;		_escreve_cmd_lcd
  2017 ;;		_escreve_frase_ram_lcd
  2018 ;;		_posicao_cursor_lcd
  2019 ;; This function is called by:
  2020 ;;		_main
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text1
  2025  00314E                     __ptext1:
  2026                           	opt stack 0
  2027  00314E                     _mensagem_inicial:
  2028                           	opt stack 25
  2029                           
  2030                           ;main.c: 251: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  2031                           
  2032                           ;incstack = 0
  2033  00314E  0E7F               	movlw	low mensagem_inicial@F4097
  2034  003150  6EF6               	movwf	tblptrl,c
  2035  003152                     	if	1	;There is more than 1 active tblptr byte
  2036  003152  0E61               	movlw	high mensagem_inicial@F4097
  2037  003154  6EF7               	movwf	tblptrh,c
  2038  003156                     	endif
  2039  003156                     	if	0	;There are less than 3 active tblptr bytes
  2040  003156                     	endif
  2041  003156  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  2042  00315A  0E10               	movlw	16
  2043  00315C                     u14490:
  2044  00315C  0009               	tblrd		*+
  2045  00315E  CFF5 FFDE          	movff	tablat,postinc2
  2046  003162  06E8               	decf	wreg,f,c
  2047  003164  E2FB               	bc	u14490
  2048                           
  2049                           ;main.c: 252: const unsigned char msg_dois[17] = " 18/01/2022   ";
  2050  003166  0E6E               	movlw	low mensagem_inicial@F4099
  2051  003168  6EF6               	movwf	tblptrl,c
  2052  00316A                     	if	1	;There is more than 1 active tblptr byte
  2053  00316A  0E61               	movlw	high mensagem_inicial@F4099
  2054  00316C  6EF7               	movwf	tblptrh,c
  2055  00316E                     	endif
  2056  00316E                     	if	0	;There are less than 3 active tblptr bytes
  2057  00316E                     	endif
  2058  00316E  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  2059  003172  0E10               	movlw	16
  2060  003174                     u14500:
  2061  003174  0009               	tblrd		*+
  2062  003176  CFF5 FFDE          	movff	tablat,postinc2
  2063  00317A  06E8               	decf	wreg,f,c
  2064  00317C  E2FB               	bc	u14500
  2065                           
  2066                           ;main.c: 254: posicao_cursor_lcd(1,0);
  2067  00317E  0E00               	movlw	0
  2068  003180  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  2069  003182  0E01               	movlw	1
  2070  003184  EC93  F019         	call	_posicao_cursor_lcd
  2071                           
  2072                           ;main.c: 255: escreve_frase_ram_lcd(msg_linha_um);
  2073  003188  0E60               	movlw	low mensagem_inicial@msg_linha_um
  2074  00318A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  2075  00318C  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2076  00318E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2077  003190  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
  2078                           
  2079                           ;main.c: 257: posicao_cursor_lcd(2,0);
  2080  003194  0E00               	movlw	0
  2081  003196  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  2082  003198  0E02               	movlw	2
  2083  00319A  EC93  F019         	call	_posicao_cursor_lcd
  2084                           
  2085                           ;main.c: 258: escreve_frase_ram_lcd(msg_dois);
  2086  00319E  0E71               	movlw	low mensagem_inicial@msg_dois
  2087  0031A0  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  2088  0031A2  0E00               	movlw	high mensagem_inicial@msg_dois
  2089  0031A4  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2090  0031A6  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
  2091                           
  2092                           ;main.c: 259: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2093  0031AA  0E3D               	movlw	61
  2094  0031AC  6E21               	movwf	(??_mensagem_inicial+1)& (0+255),c
  2095  0031AE  0EE1               	movlw	225
  2096  0031B0  6E20               	movwf	??_mensagem_inicial& (0+255),c
  2097  0031B2  0E40               	movlw	64
  2098  0031B4                     u16627:
  2099  0031B4  2EE8               	decfsz	wreg,f,c
  2100  0031B6  D7FE               	bra	u16627
  2101  0031B8  2E20               	decfsz	??_mensagem_inicial& (0+255),f,c
  2102  0031BA  D7FC               	bra	u16627
  2103  0031BC  2E21               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  2104  0031BE  D7FA               	bra	u16627
  2105                           
  2106                           ;main.c: 260: escreve_cmd_lcd(0b00000001);
  2107  0031C0  0E01               	movlw	1
  2108  0031C2  EC97  F017         	call	_escreve_cmd_lcd
  2109  0031C6  0012               	return		;funcret
  2110  0031C8                     __end_of_mensagem_inicial:
  2111                           	opt stack 0
  2112                           tblptru	equ	0xFF8
  2113                           tblptrh	equ	0xFF7
  2114                           tblptrl	equ	0xFF6
  2115                           tablat	equ	0xFF5
  2116                           postinc0	equ	0xFEE
  2117                           wreg	equ	0xFE8
  2118                           postdec1	equ	0xFE5
  2119                           fsr1h	equ	0xFE2
  2120                           fsr1l	equ	0xFE1
  2121                           postinc2	equ	0xFDE
  2122                           status	equ	0xFD8
  2123                           
  2124 ;; *************** function _init_lcd *****************
  2125 ;; Defined at:
  2126 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;		None
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;		None
  2131 ;; Return value:  Size  Location     Type
  2132 ;;                  1    wreg      void 
  2133 ;; Registers used:
  2134 ;;		wreg, status,2, status,0, cstack
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2140 ;;      Params:         0       0       0       0       0       0       0       0       0
  2141 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2142 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2143 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2144 ;;Total ram usage:        1 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:    4
  2147 ;; This function calls:
  2148 ;;		_delay
  2149 ;;		_escreve_cmd_lcd
  2150 ;; This function is called by:
  2151 ;;		_main
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           	psect	text2
  2156  002DF4                     __ptext2:
  2157                           	opt stack 0
  2158  002DF4                     _init_lcd:
  2159                           	opt stack 26
  2160                           
  2161                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2162                           
  2163                           ;incstack = 0
  2164  002DF4  9495               	bcf	3989,2,c	;volatile
  2165                           
  2166                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2167  002DF6  9295               	bcf	3989,1,c	;volatile
  2168                           
  2169                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2170  002DF8  9095               	bcf	3989,0,c	;volatile
  2171                           
  2172                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2173  002DFA  9895               	bcf	3989,4,c	;volatile
  2174                           
  2175                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2176  002DFC  9A95               	bcf	3989,5,c	;volatile
  2177                           
  2178                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2179  002DFE  9C95               	bcf	3989,6,c	;volatile
  2180                           
  2181                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2182  002E00  9E95               	bcf	3989,7,c	;volatile
  2183                           
  2184                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2185  002E02  9483               	bcf	3971,2,c	;volatile
  2186                           
  2187                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2188  002E04  9283               	bcf	3971,1,c	;volatile
  2189                           
  2190                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2191  002E06  9083               	bcf	3971,0,c	;volatile
  2192                           
  2193                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2194  002E08  9E83               	bcf	3971,7,c	;volatile
  2195                           
  2196                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2197  002E0A  9C83               	bcf	3971,6,c	;volatile
  2198                           
  2199                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2200  002E0C  8A83               	bsf	3971,5,c	;volatile
  2201                           
  2202                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2203  002E0E  8883               	bsf	3971,4,c	;volatile
  2204                           
  2205                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2206  002E10  0EEA               	movlw	234
  2207  002E12  6E1D               	movwf	??_init_lcd& (0+255),c
  2208  002E14  0EC3               	movlw	195
  2209  002E16                     u16637:
  2210  002E16  2EE8               	decfsz	wreg,f,c
  2211  002E18  D7FE               	bra	u16637
  2212  002E1A  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2213  002E1C  D7FC               	bra	u16637
  2214  002E1E  F000               	nop	
  2215                           
  2216                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2217  002E20  8083               	bsf	3971,0,c	;volatile
  2218                           
  2219                           ;display_lcd.c: 108: delay();
  2220  002E22  ECC8  F01C         	call	_delay	;wreg free
  2221                           
  2222                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2223  002E26  9083               	bcf	3971,0,c	;volatile
  2224                           
  2225                           ;display_lcd.c: 110: delay();
  2226  002E28  ECC8  F01C         	call	_delay	;wreg free
  2227                           
  2228                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2229  002E2C  0E4E               	movlw	78
  2230  002E2E  6E1D               	movwf	??_init_lcd& (0+255),c
  2231  002E30  0EEB               	movlw	235
  2232  002E32                     u16647:
  2233  002E32  2EE8               	decfsz	wreg,f,c
  2234  002E34  D7FE               	bra	u16647
  2235  002E36  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2236  002E38  D7FC               	bra	u16647
  2237  002E3A  F000               	nop	
  2238                           
  2239                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2240  002E3C  8083               	bsf	3971,0,c	;volatile
  2241                           
  2242                           ;display_lcd.c: 119: delay();
  2243  002E3E  ECC8  F01C         	call	_delay	;wreg free
  2244                           
  2245                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2246  002E42  9083               	bcf	3971,0,c	;volatile
  2247                           
  2248                           ;display_lcd.c: 121: delay();
  2249  002E44  ECC8  F01C         	call	_delay	;wreg free
  2250                           
  2251                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2252  002E48  0E4E               	movlw	78
  2253  002E4A  6E1D               	movwf	??_init_lcd& (0+255),c
  2254  002E4C  0EEB               	movlw	235
  2255  002E4E                     u16657:
  2256  002E4E  2EE8               	decfsz	wreg,f,c
  2257  002E50  D7FE               	bra	u16657
  2258  002E52  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2259  002E54  D7FC               	bra	u16657
  2260  002E56  F000               	nop	
  2261                           
  2262                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2263  002E58  8083               	bsf	3971,0,c	;volatile
  2264                           
  2265                           ;display_lcd.c: 130: delay();
  2266  002E5A  ECC8  F01C         	call	_delay	;wreg free
  2267                           
  2268                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2269  002E5E  9083               	bcf	3971,0,c	;volatile
  2270                           
  2271                           ;display_lcd.c: 132: delay();
  2272  002E60  ECC8  F01C         	call	_delay	;wreg free
  2273                           
  2274                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2275  002E64  9E83               	bcf	3971,7,c	;volatile
  2276                           
  2277                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2278  002E66  9C83               	bcf	3971,6,c	;volatile
  2279                           
  2280                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2281  002E68  8A83               	bsf	3971,5,c	;volatile
  2282                           
  2283                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2284  002E6A  9883               	bcf	3971,4,c	;volatile
  2285                           
  2286                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2287  002E6C  8083               	bsf	3971,0,c	;volatile
  2288                           
  2289                           ;display_lcd.c: 143: delay();
  2290  002E6E  ECC8  F01C         	call	_delay	;wreg free
  2291                           
  2292                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2293  002E72  9083               	bcf	3971,0,c	;volatile
  2294                           
  2295                           ;display_lcd.c: 145: delay();
  2296  002E74  ECC8  F01C         	call	_delay	;wreg free
  2297                           
  2298                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2299  002E78  0E28               	movlw	40
  2300  002E7A  EC97  F017         	call	_escreve_cmd_lcd
  2301                           
  2302                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2303  002E7E  0E06               	movlw	6
  2304  002E80  EC97  F017         	call	_escreve_cmd_lcd
  2305                           
  2306                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2307  002E84  0E0E               	movlw	14
  2308  002E86  EC97  F017         	call	_escreve_cmd_lcd
  2309                           
  2310                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2311  002E8A  0E01               	movlw	1
  2312  002E8C  EC97  F017         	call	_escreve_cmd_lcd
  2313  002E90  0012               	return		;funcret
  2314  002E92                     __end_of_init_lcd:
  2315                           	opt stack 0
  2316                           tblptru	equ	0xFF8
  2317                           tblptrh	equ	0xFF7
  2318                           tblptrl	equ	0xFF6
  2319                           tablat	equ	0xFF5
  2320                           postinc0	equ	0xFEE
  2321                           wreg	equ	0xFE8
  2322                           postdec1	equ	0xFE5
  2323                           fsr1h	equ	0xFE2
  2324                           fsr1l	equ	0xFE1
  2325                           postinc2	equ	0xFDE
  2326                           status	equ	0xFD8
  2327                           
  2328 ;; *************** function _init_hardware *****************
  2329 ;; Defined at:
  2330 ;;		line 55 in file "bibliotecas/hardware.c"
  2331 ;; Parameters:    Size  Location     Type
  2332 ;;		None
  2333 ;; Auto vars:     Size  Location     Type
  2334 ;;		None
  2335 ;; Return value:  Size  Location     Type
  2336 ;;                  1    wreg      void 
  2337 ;; Registers used:
  2338 ;;		wreg, status,2, cstack
  2339 ;; Tracked objects:
  2340 ;;		On entry : 0/0
  2341 ;;		On exit  : 0/0
  2342 ;;		Unchanged: 0/0
  2343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2344 ;;      Params:         0       0       0       0       0       0       0       0       0
  2345 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2346 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2347 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2348 ;;Total ram usage:        0 bytes
  2349 ;; Hardware stack levels used:    1
  2350 ;; Hardware stack levels required when called:    4
  2351 ;; This function calls:
  2352 ;;		_config_timer_dois
  2353 ;;		_config_timer_zero
  2354 ;;		_init_interrupt
  2355 ;;		_init_oscilador
  2356 ;;		_init_ports
  2357 ;; This function is called by:
  2358 ;;		_main
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text3
  2363  003A04                     __ptext3:
  2364                           	opt stack 0
  2365  003A04                     _init_hardware:
  2366                           	opt stack 26
  2367                           
  2368                           ;hardware.c: 58: init_oscilador();
  2369                           
  2370                           ;incstack = 0
  2371  003A04  EC5C  F01D         	call	_init_oscilador	;wreg free
  2372                           
  2373                           ;hardware.c: 61: init_ports();
  2374  003A08  ECF6  F01C         	call	_init_ports	;wreg free
  2375                           
  2376                           ;hardware.c: 64: config_timer_zero();
  2377  003A0C  ECE9  F01C         	call	_config_timer_zero	;wreg free
  2378                           
  2379                           ;hardware.c: 67: config_timer_dois();
  2380  003A10  EC44  F01D         	call	_config_timer_dois	;wreg free
  2381                           
  2382                           ;hardware.c: 70: init_interrupt();
  2383  003A14  EC17  F01D         	call	_init_interrupt	;wreg free
  2384  003A18  0012               	return		;funcret
  2385  003A1A                     __end_of_init_hardware:
  2386                           	opt stack 0
  2387                           tblptru	equ	0xFF8
  2388                           tblptrh	equ	0xFF7
  2389                           tblptrl	equ	0xFF6
  2390                           tablat	equ	0xFF5
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           postdec1	equ	0xFE5
  2394                           fsr1h	equ	0xFE2
  2395                           fsr1l	equ	0xFE1
  2396                           postinc2	equ	0xFDE
  2397                           status	equ	0xFD8
  2398                           
  2399 ;; *************** function _init_ports *****************
  2400 ;; Defined at:
  2401 ;;		line 154 in file "bibliotecas/hardware.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;		None
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;		None
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  1    wreg      void 
  2408 ;; Registers used:
  2409 ;;		wreg, status,2
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2415 ;;      Params:         0       0       0       0       0       0       0       0       0
  2416 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2417 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2418 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2419 ;;Total ram usage:        0 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    2
  2422 ;; This function calls:
  2423 ;;		Nothing
  2424 ;; This function is called by:
  2425 ;;		_init_hardware
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text4
  2430  0039EC                     __ptext4:
  2431                           	opt stack 0
  2432  0039EC                     _init_ports:
  2433                           	opt stack 27
  2434                           
  2435                           ;hardware.c: 156: TRISB = 0b00100001;
  2436                           
  2437                           ;incstack = 0
  2438  0039EC  0E21               	movlw	33
  2439  0039EE  6E93               	movwf	3987,c	;volatile
  2440                           
  2441                           ;hardware.c: 157: LATB = 0xFF;
  2442  0039F0  688A               	setf	3978,c	;volatile
  2443                           
  2444                           ;hardware.c: 158: TRISD = 0x00;
  2445  0039F2  0E00               	movlw	0
  2446  0039F4  6E95               	movwf	3989,c	;volatile
  2447                           
  2448                           ;hardware.c: 159: TRISA = 0b00000111;
  2449  0039F6  0E07               	movlw	7
  2450  0039F8  6E92               	movwf	3986,c	;volatile
  2451                           
  2452                           ;hardware.c: 160: TRISC = 0x01111111;
  2453  0039FA  0E11               	movlw	17
  2454  0039FC  6E94               	movwf	3988,c	;volatile
  2455                           
  2456                           ;hardware.c: 161: TRISE = 0b00000011;
  2457  0039FE  0E03               	movlw	3
  2458  003A00  6E96               	movwf	3990,c	;volatile
  2459  003A02  0012               	return		;funcret
  2460  003A04                     __end_of_init_ports:
  2461                           	opt stack 0
  2462                           tblptru	equ	0xFF8
  2463                           tblptrh	equ	0xFF7
  2464                           tblptrl	equ	0xFF6
  2465                           tablat	equ	0xFF5
  2466                           postinc0	equ	0xFEE
  2467                           wreg	equ	0xFE8
  2468                           postdec1	equ	0xFE5
  2469                           fsr1h	equ	0xFE2
  2470                           fsr1l	equ	0xFE1
  2471                           postinc2	equ	0xFDE
  2472                           status	equ	0xFD8
  2473                           
  2474 ;; *************** function _init_oscilador *****************
  2475 ;; Defined at:
  2476 ;;		line 171 in file "bibliotecas/hardware.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		None
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2490 ;;      Params:         0       0       0       0       0       0       0       0       0
  2491 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2492 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2493 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2494 ;;Total ram usage:        0 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    2
  2497 ;; This function calls:
  2498 ;;		Nothing
  2499 ;; This function is called by:
  2500 ;;		_init_hardware
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           	psect	text5
  2505  003AB8                     __ptext5:
  2506                           	opt stack 0
  2507  003AB8                     _init_oscilador:
  2508                           	opt stack 27
  2509                           
  2510                           ;hardware.c: 174: OSCCONbits.IRCF0 = 1;
  2511                           
  2512                           ;incstack = 0
  2513  003AB8  88D3               	bsf	4051,4,c	;volatile
  2514                           
  2515                           ;hardware.c: 175: OSCCONbits.IRCF1 = 1;
  2516  003ABA  8AD3               	bsf	4051,5,c	;volatile
  2517                           
  2518                           ;hardware.c: 176: OSCCONbits.IRCF2 = 1;
  2519  003ABC  8CD3               	bsf	4051,6,c	;volatile
  2520  003ABE  0012               	return		;funcret
  2521  003AC0                     __end_of_init_oscilador:
  2522                           	opt stack 0
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           postinc0	equ	0xFEE
  2528                           wreg	equ	0xFE8
  2529                           postdec1	equ	0xFE5
  2530                           fsr1h	equ	0xFE2
  2531                           fsr1l	equ	0xFE1
  2532                           postinc2	equ	0xFDE
  2533                           status	equ	0xFD8
  2534                           
  2535 ;; *************** function _init_interrupt *****************
  2536 ;; Defined at:
  2537 ;;		line 98 in file "bibliotecas/hardware.c"
  2538 ;; Parameters:    Size  Location     Type
  2539 ;;		None
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;		None
  2542 ;; Return value:  Size  Location     Type
  2543 ;;                  1    wreg      void 
  2544 ;; Registers used:
  2545 ;;		wreg, status,2
  2546 ;; Tracked objects:
  2547 ;;		On entry : 0/0
  2548 ;;		On exit  : 0/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2551 ;;      Params:         0       0       0       0       0       0       0       0       0
  2552 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2553 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2554 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2555 ;;Total ram usage:        0 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; Hardware stack levels required when called:    2
  2558 ;; This function calls:
  2559 ;;		Nothing
  2560 ;; This function is called by:
  2561 ;;		_init_hardware
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	text6
  2566  003A2E                     __ptext6:
  2567                           	opt stack 0
  2568  003A2E                     _init_interrupt:
  2569                           	opt stack 27
  2570                           
  2571                           ;hardware.c: 100: INTCON = 0b10110000;
  2572                           
  2573                           ;incstack = 0
  2574  003A2E  0EB0               	movlw	176
  2575  003A30  6EF2               	movwf	intcon,c	;volatile
  2576                           
  2577                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2578  003A32  0E00               	movlw	0
  2579  003A34  6EF1               	movwf	intcon2,c	;volatile
  2580                           
  2581                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2582  003A36  0E00               	movlw	0
  2583  003A38  6EF0               	movwf	intcon3,c	;volatile
  2584                           
  2585                           ;hardware.c: 104: PIE1 = 0b00001000;
  2586  003A3A  0E08               	movlw	8
  2587  003A3C  6E9D               	movwf	3997,c	;volatile
  2588  003A3E  0012               	return		;funcret
  2589  003A40                     __end_of_init_interrupt:
  2590                           	opt stack 0
  2591                           tblptru	equ	0xFF8
  2592                           tblptrh	equ	0xFF7
  2593                           tblptrl	equ	0xFF6
  2594                           tablat	equ	0xFF5
  2595                           intcon	equ	0xFF2
  2596                           intcon2	equ	0xFF1
  2597                           intcon3	equ	0xFF0
  2598                           postinc0	equ	0xFEE
  2599                           wreg	equ	0xFE8
  2600                           postdec1	equ	0xFE5
  2601                           fsr1h	equ	0xFE2
  2602                           fsr1l	equ	0xFE1
  2603                           postinc2	equ	0xFDE
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _config_timer_zero *****************
  2607 ;; Defined at:
  2608 ;;		line 83 in file "bibliotecas/hardware.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2622 ;;      Params:         0       0       0       0       0       0       0       0       0
  2623 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2625 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2626 ;;Total ram usage:        0 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    3
  2629 ;; This function calls:
  2630 ;;		_write_timer_zero
  2631 ;; This function is called by:
  2632 ;;		_init_hardware
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text7
  2637  0039D2                     __ptext7:
  2638                           	opt stack 0
  2639  0039D2                     _config_timer_zero:
  2640                           	opt stack 26
  2641                           
  2642                           ;hardware.c: 85: T0CON = 0b11000011;
  2643                           
  2644                           ;incstack = 0
  2645  0039D2  0EC3               	movlw	195
  2646  0039D4  6ED5               	movwf	4053,c	;volatile
  2647                           
  2648                           ;hardware.c: 86: SPPCON = 0b00000000;
  2649  0039D6  0E00               	movlw	0
  2650  0039D8  6E65               	movwf	3941,c	;volatile
  2651                           
  2652                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2653  0039DA  0E00               	movlw	0
  2654  0039DC  6E63               	movwf	3939,c	;volatile
  2655                           
  2656                           ;hardware.c: 88: write_timer_zero(0x0083);
  2657  0039DE  0E00               	movlw	0
  2658  0039E0  6E1B               	movwf	write_timer_zero@timer0+1,c
  2659  0039E2  0E83               	movlw	131
  2660  0039E4  6E1A               	movwf	write_timer_zero@timer0,c
  2661  0039E6  EC20  F01D         	call	_write_timer_zero	;wreg free
  2662  0039EA  0012               	return		;funcret
  2663  0039EC                     __end_of_config_timer_zero:
  2664                           	opt stack 0
  2665                           tblptru	equ	0xFF8
  2666                           tblptrh	equ	0xFF7
  2667                           tblptrl	equ	0xFF6
  2668                           tablat	equ	0xFF5
  2669                           intcon	equ	0xFF2
  2670                           intcon2	equ	0xFF1
  2671                           intcon3	equ	0xFF0
  2672                           postinc0	equ	0xFEE
  2673                           wreg	equ	0xFE8
  2674                           postdec1	equ	0xFE5
  2675                           fsr1h	equ	0xFE2
  2676                           fsr1l	equ	0xFE1
  2677                           postinc2	equ	0xFDE
  2678                           status	equ	0xFD8
  2679                           
  2680 ;; *************** function _write_timer_zero *****************
  2681 ;; Defined at:
  2682 ;;		line 138 in file "bibliotecas/hardware.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;  timer0          2   25[COMRAM] unsigned int 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  timer           2   27[COMRAM] struct Timers
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		None
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2696 ;;      Params:         2       0       0       0       0       0       0       0       0
  2697 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2698 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2699 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2700 ;;Total ram usage:        4 bytes
  2701 ;; Hardware stack levels used:    1
  2702 ;; Hardware stack levels required when called:    2
  2703 ;; This function calls:
  2704 ;;		Nothing
  2705 ;; This function is called by:
  2706 ;;		_config_timer_zero
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           	psect	text8
  2711  003A40                     __ptext8:
  2712                           	opt stack 0
  2713  003A40                     _write_timer_zero:
  2714                           	opt stack 26
  2715                           
  2716                           ;hardware.c: 140: union Timers timer;
  2717                           ;hardware.c: 142: timer.lt = timer0;
  2718                           
  2719                           ;incstack = 0
  2720  003A40  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2721  003A44  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2722                           
  2723                           ;hardware.c: 144: TMR0H = timer.bt[1];
  2724  003A48  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2725                           
  2726                           ;hardware.c: 145: TMR0L = timer.bt[0];
  2727  003A4C  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2728  003A50  0012               	return		;funcret
  2729  003A52                     __end_of_write_timer_zero:
  2730                           	opt stack 0
  2731                           tblptru	equ	0xFF8
  2732                           tblptrh	equ	0xFF7
  2733                           tblptrl	equ	0xFF6
  2734                           tablat	equ	0xFF5
  2735                           intcon	equ	0xFF2
  2736                           intcon2	equ	0xFF1
  2737                           intcon3	equ	0xFF0
  2738                           postinc0	equ	0xFEE
  2739                           wreg	equ	0xFE8
  2740                           postdec1	equ	0xFE5
  2741                           fsr1h	equ	0xFE2
  2742                           fsr1l	equ	0xFE1
  2743                           postinc2	equ	0xFDE
  2744                           status	equ	0xFD8
  2745                           
  2746 ;; *************** function _config_timer_dois *****************
  2747 ;; Defined at:
  2748 ;;		line 200 in file "bibliotecas/hardware.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;		None
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;		None
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      void 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2762 ;;      Params:         0       0       0       0       0       0       0       0       0
  2763 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2764 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2765 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2766 ;;Total ram usage:        0 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    2
  2769 ;; This function calls:
  2770 ;;		Nothing
  2771 ;; This function is called by:
  2772 ;;		_init_hardware
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           	psect	text9
  2777  003A88                     __ptext9:
  2778                           	opt stack 0
  2779  003A88                     _config_timer_dois:
  2780                           	opt stack 27
  2781                           
  2782                           ;hardware.c: 202: T2CON = 0b00000100;
  2783                           
  2784                           ;incstack = 0
  2785  003A88  0E04               	movlw	4
  2786  003A8A  6ECA               	movwf	4042,c	;volatile
  2787                           
  2788                           ;hardware.c: 203: TMR2 = 0;
  2789  003A8C  0E00               	movlw	0
  2790  003A8E  6ECC               	movwf	4044,c	;volatile
  2791                           
  2792                           ;hardware.c: 204: PR2 = 0x01;
  2793  003A90  0E01               	movlw	1
  2794  003A92  6ECB               	movwf	4043,c	;volatile
  2795  003A94  0012               	return		;funcret
  2796  003A96                     __end_of_config_timer_dois:
  2797                           	opt stack 0
  2798                           tblptru	equ	0xFF8
  2799                           tblptrh	equ	0xFF7
  2800                           tblptrl	equ	0xFF6
  2801                           tablat	equ	0xFF5
  2802                           intcon	equ	0xFF2
  2803                           intcon2	equ	0xFF1
  2804                           intcon3	equ	0xFF0
  2805                           postinc0	equ	0xFEE
  2806                           wreg	equ	0xFE8
  2807                           postdec1	equ	0xFE5
  2808                           fsr1h	equ	0xFE2
  2809                           fsr1l	equ	0xFE1
  2810                           postinc2	equ	0xFDE
  2811                           status	equ	0xFD8
  2812                           
  2813 ;; *************** function _inicializa_tarefas *****************
  2814 ;; Defined at:
  2815 ;;		line 168 in file "main.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;		None
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;		None
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  1    wreg      void 
  2822 ;; Registers used:
  2823 ;;		wreg, status,2
  2824 ;; Tracked objects:
  2825 ;;		On entry : 0/0
  2826 ;;		On exit  : 0/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2829 ;;      Params:         0       0       0       0       0       0       0       0       0
  2830 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2832 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2833 ;;Total ram usage:        0 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:    2
  2836 ;; This function calls:
  2837 ;;		Nothing
  2838 ;; This function is called by:
  2839 ;;		_main
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843                           	psect	text10
  2844  003918                     __ptext10:
  2845                           	opt stack 0
  2846  003918                     _inicializa_tarefas:
  2847                           	opt stack 28
  2848                           
  2849                           ;main.c: 175: tempo_backup[0] = 5000;
  2850                           
  2851                           ;incstack = 0
  2852  003918  0E13               	movlw	19
  2853  00391A  0101               	movlb	1	; () banked
  2854  00391C  6F7D               	movwf	(_tempo_backup+1)& (0+255),b
  2855  00391E  0E88               	movlw	136
  2856  003920  6F7C               	movwf	_tempo_backup& (0+255),b
  2857                           
  2858                           ;main.c: 176: tempo_backup[1] = 5000;
  2859  003922  0E13               	movlw	19
  2860  003924  6F7F               	movwf	(_tempo_backup+3)& (0+255),b
  2861  003926  0E88               	movlw	136
  2862  003928  6F7E               	movwf	(_tempo_backup+2)& (0+255),b
  2863                           
  2864                           ;main.c: 181: tempo_tarefa[0] = 5000;
  2865  00392A  0E13               	movlw	19
  2866  00392C  0100               	movlb	0	; () banked
  2867  00392E  6FEA               	movwf	(_tempo_tarefa+1)& (0+255),b
  2868  003930  0E88               	movlw	136
  2869  003932  6FE9               	movwf	_tempo_tarefa& (0+255),b
  2870                           
  2871                           ;main.c: 182: tempo_tarefa[1] = 5000;
  2872  003934  0E13               	movlw	19
  2873  003936  6FEC               	movwf	(_tempo_tarefa+3)& (0+255),b
  2874  003938  0E88               	movlw	136
  2875  00393A  6FEB               	movwf	(_tempo_tarefa+2)& (0+255),b
  2876                           
  2877                           ;main.c: 186: tarefa_em_execucao = 0;
  2878  00393C  0E00               	movlw	0
  2879  00393E  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  2880                           
  2881                           ; BSR set to: 0
  2882  003940  0012               	return		;funcret
  2883  003942                     __end_of_inicializa_tarefas:
  2884                           	opt stack 0
  2885                           tblptru	equ	0xFF8
  2886                           tblptrh	equ	0xFF7
  2887                           tblptrl	equ	0xFF6
  2888                           tablat	equ	0xFF5
  2889                           intcon	equ	0xFF2
  2890                           intcon2	equ	0xFF1
  2891                           intcon3	equ	0xFF0
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           postdec1	equ	0xFE5
  2895                           fsr1h	equ	0xFE2
  2896                           fsr1l	equ	0xFE1
  2897                           postinc2	equ	0xFDE
  2898                           status	equ	0xFD8
  2899                           
  2900 ;; *************** function _inicializa_SPI *****************
  2901 ;; Defined at:
  2902 ;;		line 49 in file "bibliotecas/SPI.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  sync_mode       1    wreg     unsigned char 
  2905 ;;  bus_mode        1   31[COMRAM] unsigned char 
  2906 ;;  smp_phase       1   32[COMRAM] unsigned char 
  2907 ;; Auto vars:     Size  Location     Type
  2908 ;;  sync_mode       1    0[COMRAM] unsigned char 
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  1    wreg      void 
  2911 ;; Registers used:
  2912 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2918 ;;      Params:         2       0       0       0       0       0       0       0       0
  2919 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2920 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2921 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2922 ;;Total ram usage:        2 bytes
  2923 ;; Hardware stack levels used:    1
  2924 ;; Hardware stack levels required when called:    5
  2925 ;; This function calls:
  2926 ;;		_escreve_cmd_lcd
  2927 ;;		_escreve_frase_ram_lcd
  2928 ;;		_posicao_cursor_lcd
  2929 ;; This function is called by:
  2930 ;;		_main
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           	psect	text11
  2935  003722                     __ptext11:
  2936                           	opt stack 0
  2937  003722                     _inicializa_SPI:
  2938                           	opt stack 25
  2939                           
  2940                           ;SPI.c: 51: TRISBbits.RB1 = 0;
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;incstack = 0
  2944  003722  9293               	bcf	3987,1,c	;volatile
  2945                           
  2946                           ;SPI.c: 52: TRISBbits.RB4 = 0;
  2947  003724  9893               	bcf	3987,4,c	;volatile
  2948                           
  2949                           ;SPI.c: 53: TRISBbits.RB0 = 1;
  2950  003726  8093               	bsf	3987,0,c	;volatile
  2951                           
  2952                           ;SPI.c: 54: TRISCbits.RC7 = 0;
  2953  003728  9E94               	bcf	3988,7,c	;volatile
  2954                           
  2955                           ;SPI.c: 56: LATBbits.LATB4 = 1;
  2956  00372A  888A               	bsf	3978,4,c	;volatile
  2957                           
  2958                           ;SPI.c: 57: SSPSTAT &= 0x3F;
  2959  00372C  0E3F               	movlw	63
  2960  00372E  16C7               	andwf	4039,f,c	;volatile
  2961                           
  2962                           ;SPI.c: 58: SSPCON1 = 0x00;
  2963  003730  0E00               	movlw	0
  2964  003732  6EC6               	movwf	4038,c	;volatile
  2965                           
  2966                           ;SPI.c: 95: SSPSTATbits.SMP = 0;
  2967  003734  9EC7               	bcf	4039,7,c	;volatile
  2968                           
  2969                           ;SPI.c: 96: SSPSTATbits.CKE = 1;
  2970  003736  8CC7               	bsf	4039,6,c	;volatile
  2971                           
  2972                           ;SPI.c: 97: SSPCON1bits.CKP = 0;
  2973  003738  98C6               	bcf	4038,4,c	;volatile
  2974                           
  2975                           ;SPI.c: 99: SSPCON1 = 0b00000011;
  2976  00373A  0E03               	movlw	3
  2977  00373C  6EC6               	movwf	4038,c	;volatile
  2978                           
  2979                           ;SPI.c: 102: LATBbits.LATB4 = 1;
  2980  00373E  888A               	bsf	3978,4,c	;volatile
  2981                           
  2982                           ;SPI.c: 105: SSPCON1bits.SSPEN = 1;
  2983  003740  8AC6               	bsf	4038,5,c	;volatile
  2984                           
  2985                           ;SPI.c: 106: posicao_cursor_lcd(1,1);
  2986  003742  0E01               	movlw	1
  2987  003744  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  2988  003746  0E01               	movlw	1
  2989  003748  EC93  F019         	call	_posicao_cursor_lcd
  2990                           
  2991                           ;SPI.c: 107: escreve_frase_ram_lcd("SPI configurada!");
  2992  00374C  0EA2               	movlw	low STR_16
  2993  00374E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  2994  003750  0E61               	movlw	high STR_16
  2995  003752  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2996  003754  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
  2997                           
  2998                           ;SPI.c: 108: escreve_cmd_lcd(0b00000001);
  2999  003758  0E01               	movlw	1
  3000  00375A  EC97  F017         	call	_escreve_cmd_lcd
  3001  00375E  0012               	return		;funcret
  3002  003760                     __end_of_inicializa_SPI:
  3003                           	opt stack 0
  3004                           tblptru	equ	0xFF8
  3005                           tblptrh	equ	0xFF7
  3006                           tblptrl	equ	0xFF6
  3007                           tablat	equ	0xFF5
  3008                           intcon	equ	0xFF2
  3009                           intcon2	equ	0xFF1
  3010                           intcon3	equ	0xFF0
  3011                           postinc0	equ	0xFEE
  3012                           wreg	equ	0xFE8
  3013                           postdec1	equ	0xFE5
  3014                           fsr1h	equ	0xFE2
  3015                           fsr1l	equ	0xFE1
  3016                           postinc2	equ	0xFDE
  3017                           status	equ	0xFD8
  3018                           
  3019 ;; *************** function _escalonador *****************
  3020 ;; Defined at:
  3021 ;;		line 197 in file "main.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;		None
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;  cont            1   27[COMRAM] unsigned char 
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  1    wreg      void 
  3028 ;; Registers used:
  3029 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3035 ;;      Params:         0       0       0       0       0       0       0       0       0
  3036 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3037 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3038 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3039 ;;Total ram usage:        3 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; Hardware stack levels required when called:    2
  3042 ;; This function calls:
  3043 ;;		Nothing
  3044 ;; This function is called by:
  3045 ;;		_main
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text12
  3050  0031C8                     __ptext12:
  3051                           	opt stack 0
  3052  0031C8                     _escalonador:
  3053                           	opt stack 28
  3054                           
  3055                           ;main.c: 199: unsigned char cont;
  3056                           ;main.c: 200: for(cont = 0; cont<2;cont++)
  3057                           
  3058                           ;incstack = 0
  3059  0031C8  0E00               	movlw	0
  3060  0031CA  6E1C               	movwf	escalonador@cont,c
  3061  0031CC                     l7958:
  3062  0031CC  0E01               	movlw	1
  3063  0031CE  641C               	cpfsgt	escalonador@cont,c
  3064  0031D0  D001               	goto	l75
  3065  0031D2  0012               	return	
  3066  0031D4                     l75:
  3067                           
  3068                           ;main.c: 201: {
  3069                           ;main.c: 202: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3070  0031D4  501C               	movf	escalonador@cont,w,c
  3071  0031D6  0D02               	mullw	2
  3072  0031D8  0E80               	movlw	low _p_tarefas
  3073  0031DA  24F3               	addwf	prodl,w,c
  3074  0031DC  6ED9               	movwf	fsr2l,c
  3075  0031DE  0E01               	movlw	high _p_tarefas
  3076  0031E0  20F4               	addwfc	prodh,w,c
  3077  0031E2  6EDA               	movwf	fsr2h,c
  3078  0031E4  50DE               	movf	postinc2,w,c
  3079  0031E6  10DE               	iorwf	postinc2,w,c
  3080  0031E8  B4D8               	btfsc	status,2,c
  3081  0031EA  D029               	goto	l77
  3082  0031EC  501C               	movf	escalonador@cont,w,c
  3083  0031EE  0D02               	mullw	2
  3084  0031F0  0EE9               	movlw	low _tempo_tarefa
  3085  0031F2  24F3               	addwf	prodl,w,c
  3086  0031F4  6ED9               	movwf	fsr2l,c
  3087  0031F6  0E00               	movlw	high _tempo_tarefa
  3088  0031F8  20F4               	addwfc	prodh,w,c
  3089  0031FA  6EDA               	movwf	fsr2h,c
  3090  0031FC  50DE               	movf	postinc2,w,c
  3091  0031FE  10DE               	iorwf	postinc2,w,c
  3092  003200  A4D8               	btfss	status,2,c
  3093  003202  D01D               	goto	l77
  3094                           
  3095                           ;main.c: 203: {
  3096                           ;main.c: 204: tarefa_em_execucao = 1;
  3097  003204  0E01               	movlw	1
  3098  003206  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3099                           
  3100                           ;main.c: 206: p_tarefas[cont]();
  3101  003208  0EFD               	movlw	253
  3102  00320A  0100               	movlb	0	; () banked
  3103  00320C  6FF6               	movwf	(_timeout_tarefa+1)& (0+255),b
  3104  00320E  0EE8               	movlw	232
  3105  003210  6FF5               	movwf	_timeout_tarefa& (0+255),b
  3106                           
  3107                           ;main.c: 207: tarefa_em_execucao = 0;
  3108  003212  0E00               	movlw	0
  3109  003214  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;main.c: 208: tempo_tarefa[cont] = tempo_backup[cont];
  3113  003216  501C               	movf	escalonador@cont,w,c
  3114  003218  0D02               	mullw	2
  3115  00321A  0E7C               	movlw	low _tempo_backup
  3116  00321C  24F3               	addwf	prodl,w,c
  3117  00321E  6ED9               	movwf	fsr2l,c
  3118  003220  0E01               	movlw	high _tempo_backup
  3119  003222  20F4               	addwfc	prodh,w,c
  3120  003224  6EDA               	movwf	fsr2h,c
  3121  003226  501C               	movf	escalonador@cont,w,c
  3122  003228  0D02               	mullw	2
  3123  00322A  0EE9               	movlw	low _tempo_tarefa
  3124  00322C  24F3               	addwf	prodl,w,c
  3125  00322E  6EE1               	movwf	fsr1l,c
  3126  003230  0E00               	movlw	high _tempo_tarefa
  3127  003232  20F4               	addwfc	prodh,w,c
  3128  003234  6EE2               	movwf	fsr1h,c
  3129  003236  CFDE FFE6          	movff	postinc2,postinc1
  3130  00323A  CFDD FFE5          	movff	postdec2,postdec1
  3131  00323E                     l77:
  3132                           
  3133                           ; BSR set to: 0
  3134  00323E  2A1C               	incf	escalonador@cont,f,c
  3135  003240  D7C5               	goto	l7958
  3136  003242                     __end_of_escalonador:
  3137                           	opt stack 0
  3138                           tblptru	equ	0xFF8
  3139                           tblptrh	equ	0xFF7
  3140                           tblptrl	equ	0xFF6
  3141                           tablat	equ	0xFF5
  3142                           prodh	equ	0xFF4
  3143                           prodl	equ	0xFF3
  3144                           intcon	equ	0xFF2
  3145                           intcon2	equ	0xFF1
  3146                           intcon3	equ	0xFF0
  3147                           postinc0	equ	0xFEE
  3148                           wreg	equ	0xFE8
  3149                           postinc1	equ	0xFE6
  3150                           postdec1	equ	0xFE5
  3151                           fsr1h	equ	0xFE2
  3152                           fsr1l	equ	0xFE1
  3153                           postinc2	equ	0xFDE
  3154                           postdec2	equ	0xFDD
  3155                           fsr2h	equ	0xFDA
  3156                           fsr2l	equ	0xFD9
  3157                           status	equ	0xFD8
  3158                           
  3159 ;; *************** function _SDCard *****************
  3160 ;; Defined at:
  3161 ;;		line 171 in file "bibliotecas/SDCard.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  fil            28   38[BANK1 ] struct _FIL
  3166 ;;  bw              2   35[BANK1 ] unsigned short 
  3167 ;;  br              2    0        unsigned int 
  3168 ;;  FResult         1   37[BANK1 ] enum E3961
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3178 ;;      Params:         0       0       0       0       0       0       0       0       0
  3179 ;;      Locals:         0       0      31       0       0       0       0       0       0
  3180 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3181 ;;      Totals:         0       2      31       0       0       0       0       0       0
  3182 ;;Total ram usage:       33 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:   13
  3185 ;; This function calls:
  3186 ;;		_escreve_frase_ram_lcd
  3187 ;;		_escreve_inteiro_lcd
  3188 ;;		_f_close
  3189 ;;		_f_mount
  3190 ;;		_f_open
  3191 ;;		_f_write
  3192 ;;		_posicao_cursor_lcd
  3193 ;;		_proceed
  3194 ;; This function is called by:
  3195 ;;		_main
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text13
  3200  0025DE                     __ptext13:
  3201                           	opt stack 0
  3202  0025DE                     _SDCard:
  3203                           	opt stack 17
  3204                           
  3205                           ;SDCard.c: 173: T0CONbits.TMR0ON = 0;
  3206                           
  3207                           ;incstack = 0
  3208  0025DE  9ED5               	bcf	4053,7,c	;volatile
  3209                           
  3210                           ;SDCard.c: 176: FRESULT FResult;
  3211                           ;SDCard.c: 177: FIL fil;
  3212                           ;SDCard.c: 178: WORD bw;
  3213                           ;SDCard.c: 179: UINT br;
  3214                           ;SDCard.c: 184: proceed();
  3215  0025E0  EC51  F01D         	call	_proceed	;wreg free
  3216                           
  3217                           ;SDCard.c: 186: _delay((unsigned long)((1)*(48000000/4000.0)));
  3218  0025E4  0E10               	movlw	16
  3219  0025E6  0100               	movlb	0	; () banked
  3220  0025E8  6FE7               	movwf	??_SDCard& (0+255),b
  3221  0025EA  0E94               	movlw	148
  3222  0025EC                     u16667:
  3223  0025EC  2EE8               	decfsz	wreg,f,c
  3224  0025EE  D7FE               	bra	u16667
  3225  0025F0  2FE7               	decfsz	??_SDCard& (0+255),f,b
  3226  0025F2  D7FC               	bra	u16667
  3227  0025F4  F000               	nop	
  3228                           
  3229                           ;SDCard.c: 187: FResult = f_mount(0, &fs);
  3230  0025F6  0EC6               	movlw	low _fs
  3231  0025F8  6E1A               	movwf	f_mount@fs,c
  3232  0025FA  0E02               	movlw	high _fs
  3233  0025FC  6E1B               	movwf	f_mount@fs+1,c
  3234  0025FE  0E00               	movlw	0
  3235  002600  EC05  F01B         	call	_f_mount
  3236  002604  0101               	movlb	1	; () banked
  3237  002606  6FBF               	movwf	SDCard@FResult& (0+255),b
  3238                           
  3239                           ; BSR set to: 1
  3240                           ;SDCard.c: 188: if(FResult == FR_OK)
  3241  002608  51BF               	movf	SDCard@FResult& (0+255),w,b
  3242  00260A  A4D8               	btfss	status,2,c
  3243  00260C  D078               	goto	l327
  3244                           
  3245                           ; BSR set to: 1
  3246                           ;SDCard.c: 189: {
  3247                           ;SDCard.c: 192: posicao_cursor_lcd(1,0);
  3248  00260E  0E00               	movlw	0
  3249  002610  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3250  002612  0E01               	movlw	1
  3251  002614  EC93  F019         	call	_posicao_cursor_lcd
  3252                           
  3253                           ;SDCard.c: 193: escreve_frase_ram_lcd("Abrindo arquivo");
  3254  002618  0ED3               	movlw	low STR_11
  3255  00261A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3256  00261C  0E61               	movlw	high STR_11
  3257  00261E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3258  002620  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
  3259                           
  3260                           ;SDCard.c: 194: FResult = f_open(&fil,"teste.txt", 0x02 | 0x00 | 0x04 );
  3261  002624  0EC0               	movlw	low SDCard@fil
  3262  002626  0100               	movlb	0	; () banked
  3263  002628  6FD9               	movwf	f_open@fp& (0+255),b
  3264  00262A  0E01               	movlw	high SDCard@fil
  3265  00262C  6FDA               	movwf	(f_open@fp+1)& (0+255),b
  3266  00262E  0E37               	movlw	low STR_12
  3267  002630  6FDB               	movwf	f_open@path& (0+255),b
  3268  002632  0E62               	movlw	high STR_12
  3269  002634  6FDC               	movwf	(f_open@path+1)& (0+255),b
  3270  002636  0E06               	movlw	6
  3271  002638  6FDD               	movwf	f_open@mode& (0+255),b
  3272  00263A  EC69  F007         	call	_f_open	;wreg free
  3273  00263E  0101               	movlb	1	; () banked
  3274  002640  6FBF               	movwf	SDCard@FResult& (0+255),b
  3275                           
  3276                           ; BSR set to: 1
  3277                           ;SDCard.c: 195: if(FResult == FR_OK)
  3278  002642  51BF               	movf	SDCard@FResult& (0+255),w,b
  3279  002644  A4D8               	btfss	status,2,c
  3280  002646  D04F               	goto	l328
  3281                           
  3282                           ; BSR set to: 1
  3283                           ;SDCard.c: 196: {
  3284                           ;SDCard.c: 201: FResult = f_write(&fil, "yrds", 6, &bw);
  3285  002648  0EC0               	movlw	low SDCard@fil
  3286  00264A  0100               	movlb	0	; () banked
  3287  00264C  6FC6               	movwf	f_write@fp& (0+255),b
  3288  00264E  0E01               	movlw	high SDCard@fil
  3289  002650  6FC7               	movwf	(f_write@fp+1)& (0+255),b
  3290  002652  0E6C               	movlw	low STR_13
  3291  002654  6FC8               	movwf	f_write@buff& (0+255),b
  3292  002656  0E62               	movlw	high STR_13
  3293  002658  6FC9               	movwf	(f_write@buff+1)& (0+255),b
  3294  00265A  0E00               	movlw	0
  3295  00265C  6FCB               	movwf	(f_write@btw+1)& (0+255),b
  3296  00265E  0E06               	movlw	6
  3297  002660  6FCA               	movwf	f_write@btw& (0+255),b
  3298  002662  0EBD               	movlw	low SDCard@bw
  3299  002664  6FCC               	movwf	f_write@bw& (0+255),b
  3300  002666  0E01               	movlw	high SDCard@bw
  3301  002668  6FCD               	movwf	(f_write@bw+1)& (0+255),b
  3302  00266A  EC09  F000         	call	_f_write	;wreg free
  3303  00266E  0101               	movlb	1	; () banked
  3304  002670  6FBF               	movwf	SDCard@FResult& (0+255),b
  3305                           
  3306                           ; BSR set to: 1
  3307                           ;SDCard.c: 202: if(FResult == FR_OK)
  3308  002672  51BF               	movf	SDCard@FResult& (0+255),w,b
  3309  002674  A4D8               	btfss	status,2,c
  3310  002676  D020               	goto	l329
  3311                           
  3312                           ; BSR set to: 1
  3313                           ;SDCard.c: 203: {
  3314                           ;SDCard.c: 208: f_close(&fil);
  3315  002678  0EC0               	movlw	low SDCard@fil
  3316  00267A  0100               	movlb	0	; () banked
  3317  00267C  6FAD               	movwf	f_close@fp& (0+255),b
  3318  00267E  0E01               	movlw	high SDCard@fil
  3319  002680  6FAE               	movwf	(f_close@fp+1)& (0+255),b
  3320  002682  EC76  F01C         	call	_f_close	;wreg free
  3321                           
  3322                           ;SDCard.c: 210: posicao_cursor_lcd(2,0);
  3323  002686  0E00               	movlw	0
  3324  002688  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3325  00268A  0E02               	movlw	2
  3326  00268C  EC93  F019         	call	_posicao_cursor_lcd
  3327                           
  3328                           ;SDCard.c: 211: escreve_frase_ram_lcd("Arquivo renomeado");
  3329  002690  0E90               	movlw	low STR_14
  3330  002692  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3331  002694  0E61               	movlw	high STR_14
  3332  002696  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3333  002698  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
  3334                           
  3335                           ;SDCard.c: 212: _delay((unsigned long)((2000)*(48000000/4000.0)));
  3336  00269C  0E7A               	movlw	122
  3337  00269E  0100               	movlb	0	; () banked
  3338  0026A0  6FE8               	movwf	(??_SDCard+1)& (0+255),b
  3339  0026A2  0EC1               	movlw	193
  3340  0026A4  6FE7               	movwf	??_SDCard& (0+255),b
  3341  0026A6  0E81               	movlw	129
  3342  0026A8                     u16677:
  3343  0026A8  2EE8               	decfsz	wreg,f,c
  3344  0026AA  D7FE               	bra	u16677
  3345  0026AC  2FE7               	decfsz	??_SDCard& (0+255),f,b
  3346  0026AE  D7FC               	bra	u16677
  3347  0026B0  2FE8               	decfsz	(??_SDCard+1)& (0+255),f,b
  3348  0026B2  D7FA               	bra	u16677
  3349  0026B4  D000               	nop2	
  3350                           
  3351                           ;SDCard.c: 213: }
  3352  0026B6  0012               	return	
  3353  0026B8                     l329:
  3354                           
  3355                           ;SDCard.c: 214: else
  3356                           ;SDCard.c: 215: {
  3357                           ;SDCard.c: 216: posicao_cursor_lcd(2,0);
  3358  0026B8  0E00               	movlw	0
  3359  0026BA  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3360  0026BC  0E02               	movlw	2
  3361  0026BE  EC93  F019         	call	_posicao_cursor_lcd
  3362                           
  3363                           ;SDCard.c: 217: escreve_frase_ram_lcd("MAS QUE MERDA");
  3364  0026C2  0EE3               	movlw	low STR_15
  3365  0026C4  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3366  0026C6  0E61               	movlw	high STR_15
  3367  0026C8  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3368  0026CA  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
  3369                           
  3370                           ;SDCard.c: 218: posicao_cursor_lcd(1,0);
  3371  0026CE  0E00               	movlw	0
  3372  0026D0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3373  0026D2  0E01               	movlw	1
  3374  0026D4  EC93  F019         	call	_posicao_cursor_lcd
  3375                           
  3376                           ;SDCard.c: 219: escreve_inteiro_lcd(FResult);
  3377  0026D8  C1BF  F02C         	movff	SDCard@FResult,escreve_inteiro_lcd@valor
  3378  0026DC  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
  3379  0026DE  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
  3380                           
  3381                           ;SDCard.c: 220: T0CONbits.TMR0ON = 1;
  3382  0026E2  8ED5               	bsf	4053,7,c	;volatile
  3383                           
  3384                           ;SDCard.c: 221: }
  3385                           ;SDCard.c: 238: }
  3386  0026E4  0012               	return	
  3387  0026E6                     l328:
  3388                           
  3389                           ;SDCard.c: 239: else{
  3390                           ;SDCard.c: 240: posicao_cursor_lcd(1,0);
  3391  0026E6  0E00               	movlw	0
  3392  0026E8  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3393  0026EA  0E01               	movlw	1
  3394  0026EC  EC93  F019         	call	_posicao_cursor_lcd
  3395                           
  3396                           ;SDCard.c: 241: escreve_inteiro_lcd(FResult);
  3397  0026F0  C1BF  F02C         	movff	SDCard@FResult,escreve_inteiro_lcd@valor
  3398  0026F4  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
  3399  0026F6  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
  3400                           
  3401                           ;SDCard.c: 242: T0CONbits.TMR0ON = 1;
  3402  0026FA  8ED5               	bsf	4053,7,c	;volatile
  3403                           
  3404                           ;SDCard.c: 243: }
  3405                           ;SDCard.c: 245: }
  3406  0026FC  0012               	return	
  3407  0026FE                     l327:
  3408                           
  3409                           ;SDCard.c: 246: else
  3410                           ;SDCard.c: 247: {
  3411                           ;SDCard.c: 248: posicao_cursor_lcd(1,0);
  3412  0026FE  0E00               	movlw	0
  3413  002700  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3414  002702  0E01               	movlw	1
  3415  002704  EC93  F019         	call	_posicao_cursor_lcd
  3416                           
  3417                           ;SDCard.c: 249: escreve_inteiro_lcd(FResult);
  3418  002708  C1BF  F02C         	movff	SDCard@FResult,escreve_inteiro_lcd@valor
  3419  00270C  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
  3420  00270E  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
  3421  002712  0012               	return	
  3422  002714                     __end_of_SDCard:
  3423                           	opt stack 0
  3424                           tblptru	equ	0xFF8
  3425                           tblptrh	equ	0xFF7
  3426                           tblptrl	equ	0xFF6
  3427                           tablat	equ	0xFF5
  3428                           prodh	equ	0xFF4
  3429                           prodl	equ	0xFF3
  3430                           intcon	equ	0xFF2
  3431                           intcon2	equ	0xFF1
  3432                           intcon3	equ	0xFF0
  3433                           postinc0	equ	0xFEE
  3434                           wreg	equ	0xFE8
  3435                           postinc1	equ	0xFE6
  3436                           postdec1	equ	0xFE5
  3437                           fsr1h	equ	0xFE2
  3438                           fsr1l	equ	0xFE1
  3439                           postinc2	equ	0xFDE
  3440                           postdec2	equ	0xFDD
  3441                           fsr2h	equ	0xFDA
  3442                           fsr2l	equ	0xFD9
  3443                           status	equ	0xFD8
  3444                           
  3445 ;; *************** function _f_write *****************
  3446 ;; Defined at:
  3447 ;;		line 992 in file "bibliotecas/tff.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  fp              2  102[BANK0 ] PTR struct _FIL
  3450 ;;		 -> SDCard@fil(28), 
  3451 ;;  buff            2  104[BANK0 ] PTR const void 
  3452 ;;		 -> STR_13(5), 
  3453 ;;  btw             2  106[BANK0 ] unsigned int 
  3454 ;;  bw              2  108[BANK0 ] PTR unsigned int 
  3455 ;;		 -> SDCard@bw(2), 
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;  sect            4  124[BANK0 ] unsigned long 
  3458 ;;  wcnt            2  133[BANK0 ] unsigned int 
  3459 ;;  clust           2  131[BANK0 ] unsigned short 
  3460 ;;  cc              2  129[BANK0 ] unsigned int 
  3461 ;;  wbuff           2  122[BANK0 ] PTR const unsigned char 
  3462 ;;		 -> STR_13(5), 
  3463 ;;  res             1  128[BANK0 ] enum E155
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  1    wreg      enum E3961
  3466 ;; Registers used:
  3467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3473 ;;      Params:         0       8       0       0       0       0       0       0       0
  3474 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3475 ;;      Temps:          0      12       0       0       0       0       0       0       0
  3476 ;;      Totals:         0      33       0       0       0       0       0       0       0
  3477 ;;Total ram usage:       33 bytes
  3478 ;; Hardware stack levels used:    1
  3479 ;; Hardware stack levels required when called:   11
  3480 ;; This function calls:
  3481 ;;		_clust2sect
  3482 ;;		_create_chain
  3483 ;;		_disk_write
  3484 ;;		_memcpy
  3485 ;;		_move_window
  3486 ;;		_validate
  3487 ;; This function is called by:
  3488 ;;		_SDCard
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	text14
  3493  000012                     __ptext14:
  3494                           	opt stack 0
  3495  000012                     _f_write:
  3496                           	opt stack 18
  3497                           
  3498                           ;tff.c: 999: FRESULT res;
  3499                           ;tff.c: 1000: DWORD sect;
  3500                           ;tff.c: 1001: UINT wcnt, cc;
  3501                           ;tff.c: 1002: CLUST clust;
  3502                           ;tff.c: 1003: const BYTE *wbuff = buff;
  3503                           
  3504                           ;incstack = 0
  3505  000012  C0C8  F0DA         	movff	f_write@buff,f_write@wbuff
  3506  000016  C0C9  F0DB         	movff	f_write@buff+1,f_write@wbuff+1
  3507                           
  3508                           ;tff.c: 1006: *bw = 0;
  3509  00001A  C0CC  FFD9         	movff	f_write@bw,fsr2l
  3510  00001E  C0CD  FFDA         	movff	f_write@bw+1,fsr2h
  3511  000022  0E00               	movlw	0
  3512  000024  6EDE               	movwf	postinc2,c
  3513  000026  0E00               	movlw	0
  3514  000028  6EDD               	movwf	postdec2,c
  3515                           
  3516                           ;tff.c: 1007: res = validate(fp->fs, fp->id);
  3517  00002A  0100               	movlb	0	; () banked
  3518  00002C  EE20 F004          	lfsr	2,4
  3519  000030  51C6               	movf	f_write@fp& (0+255),w,b
  3520  000032  26D9               	addwf	fsr2l,f,c
  3521  000034  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3522  000036  22DA               	addwfc	fsr2h,f,c
  3523  000038  CFDE F021          	movff	postinc2,validate@fs
  3524  00003C  CFDD F022          	movff	postdec2,validate@fs+1
  3525  000040  C0C6  FFD9         	movff	f_write@fp,fsr2l
  3526  000044  C0C7  FFDA         	movff	f_write@fp+1,fsr2h
  3527  000048  CFDE F023          	movff	postinc2,validate@id
  3528  00004C  CFDD F024          	movff	postdec2,validate@id+1
  3529  000050  EC2A  F01B         	call	_validate	;wreg free
  3530  000054  0100               	movlb	0	; () banked
  3531  000056  6FE0               	movwf	f_write@res& (0+255),b
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;tff.c: 1008: if (res != FR_OK) return res;
  3535  000058  51E0               	movf	f_write@res& (0+255),w,b
  3536  00005A  B4D8               	btfsc	status,2,c
  3537  00005C  D002               	goto	l1291
  3538                           
  3539                           ; BSR set to: 0
  3540  00005E  51E0               	movf	f_write@res& (0+255),w,b
  3541                           
  3542                           ; BSR set to: 0
  3543  000060  0012               	return	
  3544  000062                     l1291:
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;tff.c: 1009: if (fp->flag & 0x80) return FR_RW_ERROR;
  3548                           
  3549                           ; BSR set to: 0
  3550  000062  EE20 F002          	lfsr	2,2
  3551  000066  51C6               	movf	f_write@fp& (0+255),w,b
  3552  000068  26D9               	addwf	fsr2l,f,c
  3553  00006A  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3554  00006C  22DA               	addwfc	fsr2h,f,c
  3555  00006E  AEDF               	btfss	indf2,7,c
  3556  000070  D002               	goto	l1293
  3557                           
  3558                           ; BSR set to: 0
  3559  000072  0E08               	movlw	8
  3560                           
  3561                           ; BSR set to: 0
  3562  000074  0012               	return	
  3563  000076                     l1293:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;tff.c: 1010: if (!(fp->flag & 0x02)) return FR_DENIED;
  3567                           
  3568                           ; BSR set to: 0
  3569  000076  EE20 F002          	lfsr	2,2
  3570  00007A  51C6               	movf	f_write@fp& (0+255),w,b
  3571  00007C  26D9               	addwf	fsr2l,f,c
  3572  00007E  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3573  000080  22DA               	addwfc	fsr2h,f,c
  3574  000082  B2DF               	btfsc	indf2,1,c
  3575  000084  D002               	goto	l1294
  3576                           
  3577                           ; BSR set to: 0
  3578  000086  0E06               	movlw	6
  3579                           
  3580                           ; BSR set to: 0
  3581  000088  0012               	return	
  3582  00008A                     l1294:
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;tff.c: 1011: if (fp->fsize + btw < fp->fsize) return FR_OK;
  3586                           
  3587                           ; BSR set to: 0
  3588  00008A  EE20 F00A          	lfsr	2,10
  3589  00008E  51C6               	movf	f_write@fp& (0+255),w,b
  3590  000090  26D9               	addwf	fsr2l,f,c
  3591  000092  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3592  000094  22DA               	addwfc	fsr2h,f,c
  3593  000096  EE10 F00A          	lfsr	1,10
  3594  00009A  51C6               	movf	f_write@fp& (0+255),w,b
  3595  00009C  26E1               	addwf	fsr1l,f,c
  3596  00009E  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3597  0000A0  22E2               	addwfc	fsr1h,f,c
  3598  0000A2  CFE6 F0D2          	movff	postinc1,??_f_write+4
  3599  0000A6  CFE6 F0D3          	movff	postinc1,??_f_write+5
  3600  0000AA  CFE6 F0D4          	movff	postinc1,??_f_write+6
  3601  0000AE  CFE6 F0D5          	movff	postinc1,??_f_write+7
  3602  0000B2  51CA               	movf	f_write@btw& (0+255),w,b
  3603  0000B4  25D2               	addwf	(??_f_write+4)& (0+255),w,b
  3604  0000B6  6FD6               	movwf	(??_f_write+8)& (0+255),b
  3605  0000B8  51CB               	movf	(f_write@btw+1)& (0+255),w,b
  3606  0000BA  21D3               	addwfc	(??_f_write+5)& (0+255),w,b
  3607  0000BC  6FD7               	movwf	(??_f_write+9)& (0+255),b
  3608  0000BE  0E00               	movlw	0
  3609  0000C0  21D4               	addwfc	(??_f_write+6)& (0+255),w,b
  3610  0000C2  6FD8               	movwf	(??_f_write+10)& (0+255),b
  3611  0000C4  0E00               	movlw	0
  3612  0000C6  21D5               	addwfc	(??_f_write+7)& (0+255),w,b
  3613  0000C8  6FD9               	movwf	(??_f_write+11)& (0+255),b
  3614  0000CA  50DE               	movf	postinc2,w,c
  3615  0000CC  5DD6               	subwf	(??_f_write+8)& (0+255),w,b
  3616  0000CE  50DE               	movf	postinc2,w,c
  3617  0000D0  59D7               	subwfb	(??_f_write+9)& (0+255),w,b
  3618  0000D2  50DE               	movf	postinc2,w,c
  3619  0000D4  59D8               	subwfb	(??_f_write+10)& (0+255),w,b
  3620  0000D6  50DE               	movf	postinc2,w,c
  3621  0000D8  59D9               	subwfb	(??_f_write+11)& (0+255),w,b
  3622  0000DA  B0D8               	btfsc	status,0,c
  3623  0000DC  D23D               	goto	l1296
  3624                           
  3625                           ; BSR set to: 0
  3626  0000DE  0E00               	movlw	0
  3627                           
  3628                           ; BSR set to: 0
  3629  0000E0  0012               	return	
  3630  0000E2                     
  3631                           ; BSR set to: 0
  3632                           ;tff.c: 1015: if ((fp->fptr % 512U) == 0) {
  3633                           
  3634                           ; BSR set to: 0
  3635  0000E2  EE20 F006          	lfsr	2,6
  3636  0000E6  51C6               	movf	f_write@fp& (0+255),w,b
  3637  0000E8  26D9               	addwf	fsr2l,f,c
  3638  0000EA  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3639  0000EC  22DA               	addwfc	fsr2h,f,c
  3640  0000EE  0EFF               	movlw	255
  3641  0000F0  14DE               	andwf	postinc2,w,c
  3642  0000F2  6FCE               	movwf	??_f_write& (0+255),b
  3643  0000F4  0E01               	movlw	1
  3644  0000F6  14DE               	andwf	postinc2,w,c
  3645  0000F8  6FCF               	movwf	(??_f_write+1)& (0+255),b
  3646  0000FA  0E00               	movlw	0
  3647  0000FC  14DE               	andwf	postinc2,w,c
  3648  0000FE  6FD0               	movwf	(??_f_write+2)& (0+255),b
  3649  000100  0E00               	movlw	0
  3650  000102  14DE               	andwf	postinc2,w,c
  3651  000104  6FD1               	movwf	(??_f_write+3)& (0+255),b
  3652  000106  51CE               	movf	??_f_write& (0+255),w,b
  3653  000108  11CF               	iorwf	(??_f_write+1)& (0+255),w,b
  3654  00010A  11D0               	iorwf	(??_f_write+2)& (0+255),w,b
  3655  00010C  11D1               	iorwf	(??_f_write+3)& (0+255),w,b
  3656  00010E  A4D8               	btfss	status,2,c
  3657  000110  D166               	goto	l1298
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;tff.c: 1016: if (fp->csect >= fp->fs->csize) {
  3661  000112  EE20 F004          	lfsr	2,4
  3662  000116  51C6               	movf	f_write@fp& (0+255),w,b
  3663  000118  26D9               	addwf	fsr2l,f,c
  3664  00011A  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3665  00011C  22DA               	addwfc	fsr2h,f,c
  3666  00011E  EE10 F01D          	lfsr	1,29
  3667  000122  50DE               	movf	postinc2,w,c
  3668  000124  26E1               	addwf	fsr1l,f,c
  3669  000126  50DD               	movf	postdec2,w,c
  3670  000128  22E2               	addwfc	fsr1h,f,c
  3671  00012A  EE20 F003          	lfsr	2,3
  3672  00012E  51C6               	movf	f_write@fp& (0+255),w,b
  3673  000130  26D9               	addwf	fsr2l,f,c
  3674  000132  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3675  000134  22DA               	addwfc	fsr2h,f,c
  3676  000136  50E6               	movf	postinc1,w,c
  3677  000138  5CDE               	subwf	postinc2,w,c
  3678  00013A  A0D8               	btfss	status,0,c
  3679  00013C  D06D               	goto	l1299
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;tff.c: 1017: if (fp->fptr == 0) {
  3683  00013E  EE20 F006          	lfsr	2,6
  3684  000142  51C6               	movf	f_write@fp& (0+255),w,b
  3685  000144  26D9               	addwf	fsr2l,f,c
  3686  000146  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3687  000148  22DA               	addwfc	fsr2h,f,c
  3688  00014A  50DE               	movf	postinc2,w,c
  3689  00014C  10DE               	iorwf	postinc2,w,c
  3690  00014E  10DE               	iorwf	postinc2,w,c
  3691  000150  10DE               	iorwf	postinc2,w,c
  3692  000152  A4D8               	btfss	status,2,c
  3693  000154  D024               	goto	l1300
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;tff.c: 1018: clust = fp->org_clust;
  3697  000156  EE20 F00E          	lfsr	2,14
  3698  00015A  51C6               	movf	f_write@fp& (0+255),w,b
  3699  00015C  26D9               	addwf	fsr2l,f,c
  3700  00015E  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3701  000160  22DA               	addwfc	fsr2h,f,c
  3702  000162  CFDE F0E3          	movff	postinc2,f_write@clust
  3703  000166  CFDD F0E4          	movff	postdec2,f_write@clust+1
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;tff.c: 1019: if (clust == 0)
  3707  00016A  51E3               	movf	f_write@clust& (0+255),w,b
  3708  00016C  11E4               	iorwf	(f_write@clust+1)& (0+255),w,b
  3709  00016E  A4D8               	btfss	status,2,c
  3710  000170  D026               	goto	l1302
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;tff.c: 1020: fp->org_clust = clust = create_chain(0);
  3714  000172  0E00               	movlw	0
  3715  000174  6FB9               	movwf	(create_chain@clust+1)& (0+255),b
  3716  000176  0E00               	movlw	0
  3717  000178  6FB8               	movwf	create_chain@clust& (0+255),b
  3718  00017A  EC18  F00E         	call	_create_chain	;wreg free
  3719  00017E  C0B8  F0E3         	movff	?_create_chain,f_write@clust
  3720  000182  C0B9  F0E4         	movff	?_create_chain+1,f_write@clust+1
  3721  000186  0100               	movlb	0	; () banked
  3722  000188  EE20 F00E          	lfsr	2,14
  3723  00018C  51C6               	movf	f_write@fp& (0+255),w,b
  3724  00018E  26D9               	addwf	fsr2l,f,c
  3725  000190  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3726  000192  22DA               	addwfc	fsr2h,f,c
  3727  000194  C0E3  FFDE         	movff	f_write@clust,postinc2
  3728  000198  C0E4  FFDD         	movff	f_write@clust+1,postdec2
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;tff.c: 1021: } else {
  3732  00019C  D010               	goto	l1302
  3733  00019E                     l1300:
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;tff.c: 1022: clust = create_chain(fp->curr_clust);
  3737                           
  3738                           ; BSR set to: 0
  3739  00019E  EE20 F010          	lfsr	2,16
  3740  0001A2  51C6               	movf	f_write@fp& (0+255),w,b
  3741  0001A4  26D9               	addwf	fsr2l,f,c
  3742  0001A6  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3743  0001A8  22DA               	addwfc	fsr2h,f,c
  3744  0001AA  CFDE F0B8          	movff	postinc2,create_chain@clust
  3745  0001AE  CFDD F0B9          	movff	postdec2,create_chain@clust+1
  3746  0001B2  EC18  F00E         	call	_create_chain	;wreg free
  3747  0001B6  C0B8  F0E3         	movff	?_create_chain,f_write@clust
  3748  0001BA  C0B9  F0E4         	movff	?_create_chain+1,f_write@clust+1
  3749  0001BE                     l1302:
  3750                           
  3751                           ;tff.c: 1023: }
  3752                           ;tff.c: 1024: if (clust == 0) break;
  3753  0001BE  0100               	movlb	0	; () banked
  3754  0001C0  51E3               	movf	f_write@clust& (0+255),w,b
  3755  0001C2  11E4               	iorwf	(f_write@clust+1)& (0+255),w,b
  3756  0001C4  B4D8               	btfsc	status,2,c
  3757  0001C6  D1CC               	goto	u14460
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;tff.c: 1025: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  3761                           
  3762                           ; BSR set to: 0
  3763                           
  3764                           ; BSR set to: 0
  3765  0001C8  05E3               	decf	f_write@clust& (0+255),w,b
  3766  0001CA  11E4               	iorwf	(f_write@clust+1)& (0+255),w,b
  3767  0001CC  B4D8               	btfsc	status,2,c
  3768  0001CE  D1FC               	goto	l1308
  3769                           
  3770                           ; BSR set to: 0
  3771  0001D0  EE20 F004          	lfsr	2,4
  3772  0001D4  51C6               	movf	f_write@fp& (0+255),w,b
  3773  0001D6  26D9               	addwf	fsr2l,f,c
  3774  0001D8  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3775  0001DA  22DA               	addwfc	fsr2h,f,c
  3776  0001DC  EE10 F016          	lfsr	1,22
  3777  0001E0  50DE               	movf	postinc2,w,c
  3778  0001E2  26E1               	addwf	fsr1l,f,c
  3779  0001E4  50DD               	movf	postdec2,w,c
  3780  0001E6  22E2               	addwfc	fsr1h,f,c
  3781  0001E8  50E6               	movf	postinc1,w,c
  3782  0001EA  5DE3               	subwf	f_write@clust& (0+255),w,b
  3783  0001EC  50E6               	movf	postinc1,w,c
  3784  0001EE  59E4               	subwfb	(f_write@clust+1)& (0+255),w,b
  3785  0001F0  B0D8               	btfsc	status,0,c
  3786  0001F2  D1EA               	goto	l1308
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;tff.c: 1026: fp->curr_clust = clust;
  3790                           
  3791                           ; BSR set to: 0
  3792                           
  3793                           ; BSR set to: 0
  3794  0001F4  EE20 F010          	lfsr	2,16
  3795  0001F8  51C6               	movf	f_write@fp& (0+255),w,b
  3796  0001FA  26D9               	addwf	fsr2l,f,c
  3797  0001FC  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3798  0001FE  22DA               	addwfc	fsr2h,f,c
  3799  000200  C0E3  FFDE         	movff	f_write@clust,postinc2
  3800  000204  C0E4  FFDD         	movff	f_write@clust+1,postdec2
  3801                           
  3802                           ;tff.c: 1027: fp->csect = 0;
  3803  000208  EE20 F003          	lfsr	2,3
  3804  00020C  51C6               	movf	f_write@fp& (0+255),w,b
  3805  00020E  26D9               	addwf	fsr2l,f,c
  3806  000210  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3807  000212  22DA               	addwfc	fsr2h,f,c
  3808  000214  0E00               	movlw	0
  3809  000216  6EDF               	movwf	indf2,c
  3810  000218                     l1299:
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;tff.c: 1028: }
  3814                           ;tff.c: 1029: sect = clust2sect(fp->curr_clust) + fp->csect;
  3815                           
  3816                           ; BSR set to: 0
  3817  000218  EE20 F010          	lfsr	2,16
  3818  00021C  51C6               	movf	f_write@fp& (0+255),w,b
  3819  00021E  26D9               	addwf	fsr2l,f,c
  3820  000220  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3821  000222  22DA               	addwfc	fsr2h,f,c
  3822  000224  CFDE F026          	movff	postinc2,clust2sect@clust
  3823  000228  CFDD F027          	movff	postdec2,clust2sect@clust+1
  3824  00022C  ECFA  F015         	call	_clust2sect	;wreg free
  3825  000230  0100               	movlb	0	; () banked
  3826  000232  EE20 F003          	lfsr	2,3
  3827  000236  51C6               	movf	f_write@fp& (0+255),w,b
  3828  000238  26D9               	addwf	fsr2l,f,c
  3829  00023A  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3830  00023C  22DA               	addwfc	fsr2h,f,c
  3831  00023E  50DF               	movf	indf2,w,c
  3832  000240  6FCE               	movwf	??_f_write& (0+255),b
  3833  000242  51CE               	movf	??_f_write& (0+255),w,b
  3834  000244  2426               	addwf	?_clust2sect,w,c
  3835  000246  6FDC               	movwf	f_write@sect& (0+255),b
  3836  000248  0E00               	movlw	0
  3837  00024A  2027               	addwfc	?_clust2sect+1,w,c
  3838  00024C  6FDD               	movwf	(f_write@sect+1)& (0+255),b
  3839  00024E  0E00               	movlw	0
  3840  000250  2028               	addwfc	?_clust2sect+2,w,c
  3841  000252  6FDE               	movwf	(f_write@sect+2)& (0+255),b
  3842  000254  0E00               	movlw	0
  3843  000256  2029               	addwfc	?_clust2sect+3,w,c
  3844  000258  6FDF               	movwf	(f_write@sect+3)& (0+255),b
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;tff.c: 1030: cc = btw / 512U;
  3848  00025A  C0CA  F0CE         	movff	f_write@btw,??_f_write
  3849  00025E  C0CB  F0CF         	movff	f_write@btw+1,??_f_write+1
  3850  000262  0E09               	movlw	9
  3851  000264  6FD0               	movwf	(??_f_write+2)& (0+255),b
  3852  000266                     u14375:
  3853  000266  90D8               	bcf	status,0,c
  3854  000268  33CF               	rrcf	(??_f_write+1)& (0+255),f,b
  3855  00026A  33CE               	rrcf	??_f_write& (0+255),f,b
  3856  00026C  2FD0               	decfsz	(??_f_write+2)& (0+255),f,b
  3857  00026E  D7FB               	goto	u14375
  3858  000270  C0CE  F0E1         	movff	??_f_write,f_write@cc
  3859  000274  C0CF  F0E2         	movff	??_f_write+1,f_write@cc+1
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;tff.c: 1031: if (cc) {
  3863  000278  51E1               	movf	f_write@cc& (0+255),w,b
  3864  00027A  11E2               	iorwf	(f_write@cc+1)& (0+255),w,b
  3865  00027C  B4D8               	btfsc	status,2,c
  3866  00027E  D070               	goto	l1309
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;tff.c: 1032: if (fp->csect + cc > fp->fs->csize)
  3870  000280  EE20 F003          	lfsr	2,3
  3871  000284  51C6               	movf	f_write@fp& (0+255),w,b
  3872  000286  26D9               	addwf	fsr2l,f,c
  3873  000288  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3874  00028A  22DA               	addwfc	fsr2h,f,c
  3875  00028C  50DF               	movf	indf2,w,c
  3876  00028E  6FCE               	movwf	??_f_write& (0+255),b
  3877  000290  51CE               	movf	??_f_write& (0+255),w,b
  3878  000292  25E1               	addwf	f_write@cc& (0+255),w,b
  3879  000294  6FCF               	movwf	(??_f_write+1)& (0+255),b
  3880  000296  0E00               	movlw	0
  3881  000298  21E2               	addwfc	(f_write@cc+1)& (0+255),w,b
  3882  00029A  6FD0               	movwf	(??_f_write+2)& (0+255),b
  3883  00029C  EE20 F004          	lfsr	2,4
  3884  0002A0  51C6               	movf	f_write@fp& (0+255),w,b
  3885  0002A2  26D9               	addwf	fsr2l,f,c
  3886  0002A4  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3887  0002A6  22DA               	addwfc	fsr2h,f,c
  3888  0002A8  EE10 F01D          	lfsr	1,29
  3889  0002AC  50DE               	movf	postinc2,w,c
  3890  0002AE  26E1               	addwf	fsr1l,f,c
  3891  0002B0  50DD               	movf	postdec2,w,c
  3892  0002B2  22E2               	addwfc	fsr1h,f,c
  3893  0002B4  50E7               	movf	indf1,w,c
  3894  0002B6  6FD1               	movwf	(??_f_write+3)& (0+255),b
  3895  0002B8  6BD2               	clrf	(??_f_write+4)& (0+255),b
  3896  0002BA  51CF               	movf	(??_f_write+1)& (0+255),w,b
  3897  0002BC  5DD1               	subwf	(??_f_write+3)& (0+255),w,b
  3898  0002BE  51D0               	movf	(??_f_write+2)& (0+255),w,b
  3899  0002C0  59D2               	subwfb	(??_f_write+4)& (0+255),w,b
  3900  0002C2  B0D8               	btfsc	status,0,c
  3901  0002C4  D021               	goto	l1310
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;tff.c: 1033: cc = fp->fs->csize - fp->csect;
  3905  0002C6  EE20 F003          	lfsr	2,3
  3906  0002CA  51C6               	movf	f_write@fp& (0+255),w,b
  3907  0002CC  26D9               	addwf	fsr2l,f,c
  3908  0002CE  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3909  0002D0  22DA               	addwfc	fsr2h,f,c
  3910  0002D2  50DF               	movf	indf2,w,c
  3911  0002D4  6FCE               	movwf	??_f_write& (0+255),b
  3912  0002D6  6BCF               	clrf	(??_f_write+1)& (0+255),b
  3913  0002D8  1FCE               	comf	??_f_write& (0+255),f,b
  3914  0002DA  1FCF               	comf	(??_f_write+1)& (0+255),f,b
  3915  0002DC  4BCE               	infsnz	??_f_write& (0+255),f,b
  3916  0002DE  2BCF               	incf	(??_f_write+1)& (0+255),f,b
  3917  0002E0  EE20 F004          	lfsr	2,4
  3918  0002E4  51C6               	movf	f_write@fp& (0+255),w,b
  3919  0002E6  26D9               	addwf	fsr2l,f,c
  3920  0002E8  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3921  0002EA  22DA               	addwfc	fsr2h,f,c
  3922  0002EC  EE10 F01D          	lfsr	1,29
  3923  0002F0  50DE               	movf	postinc2,w,c
  3924  0002F2  26E1               	addwf	fsr1l,f,c
  3925  0002F4  50DD               	movf	postdec2,w,c
  3926  0002F6  22E2               	addwfc	fsr1h,f,c
  3927  0002F8  50E7               	movf	indf1,w,c
  3928  0002FA  6FD0               	movwf	(??_f_write+2)& (0+255),b
  3929  0002FC  51D0               	movf	(??_f_write+2)& (0+255),w,b
  3930  0002FE  25CE               	addwf	??_f_write& (0+255),w,b
  3931  000300  6FE1               	movwf	f_write@cc& (0+255),b
  3932  000302  0E00               	movlw	0
  3933  000304  21CF               	addwfc	(??_f_write+1)& (0+255),w,b
  3934  000306  6FE2               	movwf	(f_write@cc+1)& (0+255),b
  3935  000308                     l1310:
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;tff.c: 1034: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  3939                           
  3940                           ; BSR set to: 0
  3941  000308  C0DA  F080         	movff	f_write@wbuff,disk_write@buff
  3942  00030C  C0DB  F081         	movff	f_write@wbuff+1,disk_write@buff+1
  3943  000310  C0DC  F082         	movff	f_write@sect,disk_write@sector
  3944  000314  C0DD  F083         	movff	f_write@sect+1,disk_write@sector+1
  3945  000318  C0DE  F084         	movff	f_write@sect+2,disk_write@sector+2
  3946  00031C  C0DF  F085         	movff	f_write@sect+3,disk_write@sector+3
  3947  000320  C0E1  F086         	movff	f_write@cc,disk_write@count
  3948  000324  0E00               	movlw	0
  3949  000326  EC22  F018         	call	_disk_write
  3950  00032A  0900               	iorlw	0
  3951  00032C  A4D8               	btfss	status,2,c
  3952  00032E  D14C               	goto	l1308
  3953                           
  3954                           ;tff.c: 1036: fp->csect += (BYTE)cc;
  3955                           
  3956                           ;tff.c: 1035: goto fw_error;
  3957  000330  0100               	movlb	0	; () banked
  3958  000332  EE20 F003          	lfsr	2,3
  3959  000336  51C6               	movf	f_write@fp& (0+255),w,b
  3960  000338  26D9               	addwf	fsr2l,f,c
  3961  00033A  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3962  00033C  22DA               	addwfc	fsr2h,f,c
  3963  00033E  51E1               	movf	f_write@cc& (0+255),w,b
  3964  000340  26DF               	addwf	indf2,f,c
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;tff.c: 1037: wcnt = 512U * cc;
  3968  000342  C0E1  F0CE         	movff	f_write@cc,??_f_write
  3969  000346  C0E2  F0CF         	movff	f_write@cc+1,??_f_write+1
  3970  00034A  0E09               	movlw	9
  3971  00034C                     u14415:
  3972  00034C  90D8               	bcf	status,0,c
  3973  00034E  37CE               	rlcf	??_f_write& (0+255),f,b
  3974  000350  37CF               	rlcf	(??_f_write+1)& (0+255),f,b
  3975  000352  2EE8               	decfsz	wreg,f,c
  3976  000354  D7FB               	goto	u14415
  3977  000356  C0CE  F0E5         	movff	??_f_write,f_write@wcnt
  3978  00035A  C0CF  F0E6         	movff	??_f_write+1,f_write@wcnt+1
  3979                           
  3980                           ;tff.c: 1038: continue;
  3981  00035E  D0DF               	goto	l1312
  3982  000360                     l1309:
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;tff.c: 1039: }
  3986                           ;tff.c: 1040: if (fp->fptr >= fp->fsize) {
  3987                           
  3988                           ; BSR set to: 0
  3989  000360  EE20 F00A          	lfsr	2,10
  3990  000364  51C6               	movf	f_write@fp& (0+255),w,b
  3991  000366  26D9               	addwf	fsr2l,f,c
  3992  000368  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3993  00036A  22DA               	addwfc	fsr2h,f,c
  3994  00036C  EE10 F006          	lfsr	1,6
  3995  000370  51C6               	movf	f_write@fp& (0+255),w,b
  3996  000372  26E1               	addwf	fsr1l,f,c
  3997  000374  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  3998  000376  22E2               	addwfc	fsr1h,f,c
  3999  000378  50DE               	movf	postinc2,w,c
  4000  00037A  5CE6               	subwf	postinc1,w,c
  4001  00037C  50DE               	movf	postinc2,w,c
  4002  00037E  58E6               	subwfb	postinc1,w,c
  4003  000380  50DE               	movf	postinc2,w,c
  4004  000382  58E6               	subwfb	postinc1,w,c
  4005  000384  50DE               	movf	postinc2,w,c
  4006  000386  58E6               	subwfb	postinc1,w,c
  4007  000388  A0D8               	btfss	status,0,c
  4008  00038A  D022               	goto	l1313
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;tff.c: 1041: if (!move_window(0)) goto fw_error;
  4012  00038C  0E00               	movlw	0
  4013  00038E  6F8D               	movwf	move_window@sector& (0+255),b
  4014  000390  0E00               	movlw	0
  4015  000392  6F8E               	movwf	(move_window@sector+1)& (0+255),b
  4016  000394  0E00               	movlw	0
  4017  000396  6F8F               	movwf	(move_window@sector+2)& (0+255),b
  4018  000398  0E00               	movlw	0
  4019  00039A  6F90               	movwf	(move_window@sector+3)& (0+255),b
  4020  00039C  ECF8  F00E         	call	_move_window	;wreg free
  4021  0003A0  0900               	iorlw	0
  4022  0003A2  B4D8               	btfsc	status,2,c
  4023  0003A4  D111               	goto	l1308
  4024                           
  4025                           ;tff.c: 1042: fp->fs->winsect = sect;
  4026  0003A6  0100               	movlb	0	; () banked
  4027  0003A8  EE20 F004          	lfsr	2,4
  4028  0003AC  51C6               	movf	f_write@fp& (0+255),w,b
  4029  0003AE  26D9               	addwf	fsr2l,f,c
  4030  0003B0  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4031  0003B2  22DA               	addwfc	fsr2h,f,c
  4032  0003B4  EE10 F004          	lfsr	1,4
  4033  0003B8  50DE               	movf	postinc2,w,c
  4034  0003BA  26E1               	addwf	fsr1l,f,c
  4035  0003BC  50DD               	movf	postdec2,w,c
  4036  0003BE  22E2               	addwfc	fsr1h,f,c
  4037  0003C0  C0DC  FFE6         	movff	f_write@sect,postinc1
  4038  0003C4  C0DD  FFE6         	movff	f_write@sect+1,postinc1
  4039  0003C8  C0DE  FFE6         	movff	f_write@sect+2,postinc1
  4040  0003CC  C0DF  FFE6         	movff	f_write@sect+3,postinc1
  4041  0003D0                     l1313:
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;tff.c: 1043: }
  4045                           ;tff.c: 1044: fp->csect++;
  4046                           
  4047                           ; BSR set to: 0
  4048  0003D0  EE20 F003          	lfsr	2,3
  4049  0003D4  51C6               	movf	f_write@fp& (0+255),w,b
  4050  0003D6  26D9               	addwf	fsr2l,f,c
  4051  0003D8  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4052  0003DA  22DA               	addwfc	fsr2h,f,c
  4053  0003DC  2ADF               	incf	indf2,f,c
  4054  0003DE                     l1298:
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;tff.c: 1045: }
  4058                           ;tff.c: 1046: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  4059                           
  4060                           ; BSR set to: 0
  4061  0003DE  EE20 F010          	lfsr	2,16
  4062  0003E2  51C6               	movf	f_write@fp& (0+255),w,b
  4063  0003E4  26D9               	addwf	fsr2l,f,c
  4064  0003E6  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4065  0003E8  22DA               	addwfc	fsr2h,f,c
  4066  0003EA  CFDE F026          	movff	postinc2,clust2sect@clust
  4067  0003EE  CFDD F027          	movff	postdec2,clust2sect@clust+1
  4068  0003F2  ECFA  F015         	call	_clust2sect	;wreg free
  4069  0003F6  0100               	movlb	0	; () banked
  4070  0003F8  EE20 F003          	lfsr	2,3
  4071  0003FC  51C6               	movf	f_write@fp& (0+255),w,b
  4072  0003FE  26D9               	addwf	fsr2l,f,c
  4073  000400  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4074  000402  22DA               	addwfc	fsr2h,f,c
  4075  000404  50DF               	movf	indf2,w,c
  4076  000406  6FCE               	movwf	??_f_write& (0+255),b
  4077  000408  51CE               	movf	??_f_write& (0+255),w,b
  4078  00040A  2426               	addwf	?_clust2sect,w,c
  4079  00040C  6FCF               	movwf	(??_f_write+1)& (0+255),b
  4080  00040E  0E00               	movlw	0
  4081  000410  2027               	addwfc	?_clust2sect+1,w,c
  4082  000412  6FD0               	movwf	(??_f_write+2)& (0+255),b
  4083  000414  0E00               	movlw	0
  4084  000416  2028               	addwfc	?_clust2sect+2,w,c
  4085  000418  6FD1               	movwf	(??_f_write+3)& (0+255),b
  4086  00041A  0E00               	movlw	0
  4087  00041C  2029               	addwfc	?_clust2sect+3,w,c
  4088  00041E  6FD2               	movwf	(??_f_write+4)& (0+255),b
  4089  000420  0EFF               	movlw	255
  4090  000422  25CF               	addwf	(??_f_write+1)& (0+255),w,b
  4091  000424  6FDC               	movwf	f_write@sect& (0+255),b
  4092  000426  0EFF               	movlw	255
  4093  000428  21D0               	addwfc	(??_f_write+2)& (0+255),w,b
  4094  00042A  6FDD               	movwf	(f_write@sect+1)& (0+255),b
  4095  00042C  0EFF               	movlw	255
  4096  00042E  21D1               	addwfc	(??_f_write+3)& (0+255),w,b
  4097  000430  6FDE               	movwf	(f_write@sect+2)& (0+255),b
  4098  000432  0EFF               	movlw	255
  4099  000434  21D2               	addwfc	(??_f_write+4)& (0+255),w,b
  4100  000436  6FDF               	movwf	(f_write@sect+3)& (0+255),b
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;tff.c: 1047: if (!move_window(sect)) goto fw_error;
  4104  000438  C0DC  F08D         	movff	f_write@sect,move_window@sector
  4105  00043C  C0DD  F08E         	movff	f_write@sect+1,move_window@sector+1
  4106  000440  C0DE  F08F         	movff	f_write@sect+2,move_window@sector+2
  4107  000444  C0DF  F090         	movff	f_write@sect+3,move_window@sector+3
  4108  000448  ECF8  F00E         	call	_move_window	;wreg free
  4109  00044C  0900               	iorlw	0
  4110  00044E  B4D8               	btfsc	status,2,c
  4111  000450  D0BB               	goto	l1308
  4112                           
  4113                           ;tff.c: 1048: wcnt = 512U - (fp->fptr % 512U);
  4114  000452  0EFF               	movlw	255
  4115  000454  0100               	movlb	0	; () banked
  4116  000456  6FCE               	movwf	??_f_write& (0+255),b
  4117  000458  0E01               	movlw	1
  4118  00045A  6FCF               	movwf	(??_f_write+1)& (0+255),b
  4119  00045C  EE20 F006          	lfsr	2,6
  4120  000460  51C6               	movf	f_write@fp& (0+255),w,b
  4121  000462  26D9               	addwf	fsr2l,f,c
  4122  000464  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4123  000466  22DA               	addwfc	fsr2h,f,c
  4124  000468  CFDE F0D0          	movff	postinc2,??_f_write+2
  4125  00046C  CFDD F0D1          	movff	postdec2,??_f_write+3
  4126  000470  51CE               	movf	??_f_write& (0+255),w,b
  4127  000472  17D0               	andwf	(??_f_write+2)& (0+255),f,b
  4128  000474  51CF               	movf	(??_f_write+1)& (0+255),w,b
  4129  000476  17D1               	andwf	(??_f_write+3)& (0+255),f,b
  4130  000478  1FD0               	comf	(??_f_write+2)& (0+255),f,b
  4131  00047A  1FD1               	comf	(??_f_write+3)& (0+255),f,b
  4132  00047C  4BD0               	infsnz	(??_f_write+2)& (0+255),f,b
  4133  00047E  2BD1               	incf	(??_f_write+3)& (0+255),f,b
  4134  000480  0E00               	movlw	0
  4135  000482  25D0               	addwf	(??_f_write+2)& (0+255),w,b
  4136  000484  6FE5               	movwf	f_write@wcnt& (0+255),b
  4137  000486  0E02               	movlw	2
  4138  000488  21D1               	addwfc	(??_f_write+3)& (0+255),w,b
  4139  00048A  6FE6               	movwf	(f_write@wcnt+1)& (0+255),b
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;tff.c: 1049: if (wcnt > btw) wcnt = btw;
  4143  00048C  51E5               	movf	f_write@wcnt& (0+255),w,b
  4144  00048E  5DCA               	subwf	f_write@btw& (0+255),w,b
  4145  000490  51E6               	movf	(f_write@wcnt+1)& (0+255),w,b
  4146  000492  59CB               	subwfb	(f_write@btw+1)& (0+255),w,b
  4147  000494  B0D8               	btfsc	status,0,c
  4148  000496  D004               	goto	l1316
  4149                           
  4150                           ; BSR set to: 0
  4151  000498  C0CA  F0E5         	movff	f_write@btw,f_write@wcnt
  4152  00049C  C0CB  F0E6         	movff	f_write@btw+1,f_write@wcnt+1
  4153  0004A0                     l1316:
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;tff.c: 1050: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
  4157                           
  4158                           ; BSR set to: 0
  4159  0004A0  0EFF               	movlw	255
  4160  0004A2  6FCE               	movwf	??_f_write& (0+255),b
  4161  0004A4  0E01               	movlw	1
  4162  0004A6  6FCF               	movwf	(??_f_write+1)& (0+255),b
  4163  0004A8  EE20 F006          	lfsr	2,6
  4164  0004AC  51C6               	movf	f_write@fp& (0+255),w,b
  4165  0004AE  26D9               	addwf	fsr2l,f,c
  4166  0004B0  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4167  0004B2  22DA               	addwfc	fsr2h,f,c
  4168  0004B4  CFDE F0D0          	movff	postinc2,??_f_write+2
  4169  0004B8  CFDD F0D1          	movff	postdec2,??_f_write+3
  4170  0004BC  51CE               	movf	??_f_write& (0+255),w,b
  4171  0004BE  17D0               	andwf	(??_f_write+2)& (0+255),f,b
  4172  0004C0  51CF               	movf	(??_f_write+1)& (0+255),w,b
  4173  0004C2  17D1               	andwf	(??_f_write+3)& (0+255),f,b
  4174  0004C4  0E20               	movlw	32
  4175  0004C6  27D0               	addwf	(??_f_write+2)& (0+255),f,b
  4176  0004C8  0E00               	movlw	0
  4177  0004CA  23D1               	addwfc	(??_f_write+3)& (0+255),f,b
  4178  0004CC  EE20 F004          	lfsr	2,4
  4179  0004D0  51C6               	movf	f_write@fp& (0+255),w,b
  4180  0004D2  26D9               	addwf	fsr2l,f,c
  4181  0004D4  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4182  0004D6  22DA               	addwfc	fsr2h,f,c
  4183  0004D8  CFDE F0D2          	movff	postinc2,??_f_write+4
  4184  0004DC  CFDD F0D3          	movff	postdec2,??_f_write+5
  4185  0004E0  51D0               	movf	(??_f_write+2)& (0+255),w,b
  4186  0004E2  25D2               	addwf	(??_f_write+4)& (0+255),w,b
  4187  0004E4  6E1A               	movwf	memcpy@d1,c
  4188  0004E6  51D1               	movf	(??_f_write+3)& (0+255),w,b
  4189  0004E8  21D3               	addwfc	(??_f_write+5)& (0+255),w,b
  4190  0004EA  6E1B               	movwf	memcpy@d1+1,c
  4191  0004EC  C0DA  F01C         	movff	f_write@wbuff,memcpy@s1
  4192  0004F0  C0DB  F01D         	movff	f_write@wbuff+1,memcpy@s1+1
  4193  0004F4  C0E5  F01E         	movff	f_write@wcnt,memcpy@n
  4194  0004F8  C0E6  F01F         	movff	f_write@wcnt+1,memcpy@n+1
  4195  0004FC  EC2F  F01A         	call	_memcpy	;wreg free
  4196                           
  4197                           ;tff.c: 1051: fp->fs->winflag = 1;
  4198  000500  0100               	movlb	0	; () banked
  4199  000502  EE20 F004          	lfsr	2,4
  4200  000506  51C6               	movf	f_write@fp& (0+255),w,b
  4201  000508  26D9               	addwf	fsr2l,f,c
  4202  00050A  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4203  00050C  22DA               	addwfc	fsr2h,f,c
  4204  00050E  EE10 F01F          	lfsr	1,31
  4205  000512  50DE               	movf	postinc2,w,c
  4206  000514  26E1               	addwf	fsr1l,f,c
  4207  000516  50DD               	movf	postdec2,w,c
  4208  000518  22E2               	addwfc	fsr1h,f,c
  4209  00051A  0E01               	movlw	1
  4210  00051C  6EE7               	movwf	indf1,c
  4211  00051E                     l1312:
  4212                           
  4213                           ; BSR set to: 0
  4214                           
  4215                           ; BSR set to: 0
  4216  00051E  51E5               	movf	f_write@wcnt& (0+255),w,b
  4217  000520  27DA               	addwf	f_write@wbuff& (0+255),f,b
  4218  000522  51E6               	movf	(f_write@wcnt+1)& (0+255),w,b
  4219  000524  23DB               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  4220                           
  4221                           ; BSR set to: 0
  4222  000526  EE20 F006          	lfsr	2,6
  4223  00052A  51C6               	movf	f_write@fp& (0+255),w,b
  4224  00052C  26D9               	addwf	fsr2l,f,c
  4225  00052E  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4226  000530  22DA               	addwfc	fsr2h,f,c
  4227  000532  51E5               	movf	f_write@wcnt& (0+255),w,b
  4228  000534  26DE               	addwf	postinc2,f,c
  4229  000536  51E6               	movf	(f_write@wcnt+1)& (0+255),w,b
  4230  000538  22DE               	addwfc	postinc2,f,c
  4231  00053A  0E00               	movlw	0
  4232  00053C  22DE               	addwfc	postinc2,f,c
  4233  00053E  22DE               	addwfc	postinc2,f,c
  4234                           
  4235                           ; BSR set to: 0
  4236  000540  C0CC  FFD9         	movff	f_write@bw,fsr2l
  4237  000544  C0CD  FFDA         	movff	f_write@bw+1,fsr2h
  4238  000548  51E5               	movf	f_write@wcnt& (0+255),w,b
  4239  00054A  26DE               	addwf	postinc2,f,c
  4240  00054C  51E6               	movf	(f_write@wcnt+1)& (0+255),w,b
  4241  00054E  22DD               	addwfc	postdec2,f,c
  4242                           
  4243                           ; BSR set to: 0
  4244  000550  51E5               	movf	f_write@wcnt& (0+255),w,b
  4245  000552  5FCA               	subwf	f_write@btw& (0+255),f,b
  4246  000554  51E6               	movf	(f_write@wcnt+1)& (0+255),w,b
  4247  000556  5BCB               	subwfb	(f_write@btw+1)& (0+255),f,b
  4248  000558                     l1296:
  4249                           
  4250                           ; BSR set to: 0
  4251                           
  4252                           ; BSR set to: 0
  4253  000558  51CA               	movf	f_write@btw& (0+255),w,b
  4254  00055A  11CB               	iorwf	(f_write@btw+1)& (0+255),w,b
  4255  00055C  A4D8               	btfss	status,2,c
  4256  00055E  D5C1               	goto	l1297
  4257  000560                     u14460:
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;tff.c: 1052: }
  4261                           ;tff.c: 1054: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  4262                           
  4263                           ; BSR set to: 0
  4264  000560  EE20 F006          	lfsr	2,6
  4265  000564  51C6               	movf	f_write@fp& (0+255),w,b
  4266  000566  26D9               	addwf	fsr2l,f,c
  4267  000568  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4268  00056A  22DA               	addwfc	fsr2h,f,c
  4269  00056C  EE10 F00A          	lfsr	1,10
  4270  000570  51C6               	movf	f_write@fp& (0+255),w,b
  4271  000572  26E1               	addwf	fsr1l,f,c
  4272  000574  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4273  000576  22E2               	addwfc	fsr1h,f,c
  4274  000578  50DE               	movf	postinc2,w,c
  4275  00057A  5CE6               	subwf	postinc1,w,c
  4276  00057C  50DE               	movf	postinc2,w,c
  4277  00057E  58E6               	subwfb	postinc1,w,c
  4278  000580  50DE               	movf	postinc2,w,c
  4279  000582  58E6               	subwfb	postinc1,w,c
  4280  000584  50DE               	movf	postinc2,w,c
  4281  000586  58E6               	subwfb	postinc1,w,c
  4282  000588  B0D8               	btfsc	status,0,c
  4283  00058A  D014               	goto	l1317
  4284                           
  4285                           ; BSR set to: 0
  4286  00058C  EE20 F006          	lfsr	2,6
  4287  000590  51C6               	movf	f_write@fp& (0+255),w,b
  4288  000592  26D9               	addwf	fsr2l,f,c
  4289  000594  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4290  000596  22DA               	addwfc	fsr2h,f,c
  4291  000598  EE10 F00A          	lfsr	1,10
  4292  00059C  51C6               	movf	f_write@fp& (0+255),w,b
  4293  00059E  26E1               	addwf	fsr1l,f,c
  4294  0005A0  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4295  0005A2  22E2               	addwfc	fsr1h,f,c
  4296  0005A4  CFDE FFE6          	movff	postinc2,postinc1
  4297  0005A8  CFDE FFE6          	movff	postinc2,postinc1
  4298  0005AC  CFDE FFE6          	movff	postinc2,postinc1
  4299  0005B0  CFDE FFE6          	movff	postinc2,postinc1
  4300  0005B4                     l1317:
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;tff.c: 1055: fp->flag |= 0x20;
  4304                           
  4305                           ; BSR set to: 0
  4306  0005B4  EE20 F002          	lfsr	2,2
  4307  0005B8  51C6               	movf	f_write@fp& (0+255),w,b
  4308  0005BA  26D9               	addwf	fsr2l,f,c
  4309  0005BC  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4310  0005BE  22DA               	addwfc	fsr2h,f,c
  4311  0005C0  0E00               	movlw	0
  4312  0005C2  8ADB               	bsf	plusw2,5,c
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;tff.c: 1056: return res;
  4316  0005C4  51E0               	movf	f_write@res& (0+255),w,b
  4317                           
  4318                           ; BSR set to: 0
  4319  0005C6  0012               	return	
  4320  0005C8                     l1308:
  4321                           
  4322                           ;tff.c: 1059: fp->flag |= 0x80;
  4323                           
  4324                           ; BSR set to: 0
  4325  0005C8  0100               	movlb	0	; () banked
  4326  0005CA  EE20 F002          	lfsr	2,2
  4327  0005CE  51C6               	movf	f_write@fp& (0+255),w,b
  4328  0005D0  26D9               	addwf	fsr2l,f,c
  4329  0005D2  51C7               	movf	(f_write@fp+1)& (0+255),w,b
  4330  0005D4  22DA               	addwfc	fsr2h,f,c
  4331  0005D6  0E00               	movlw	0
  4332  0005D8  8EDB               	bsf	plusw2,7,c
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;tff.c: 1060: return FR_RW_ERROR;
  4336  0005DA  0E08               	movlw	8
  4337  0005DC  0012               	return	
  4338  0005DE                     __end_of_f_write:
  4339                           	opt stack 0
  4340                           tblptru	equ	0xFF8
  4341                           tblptrh	equ	0xFF7
  4342                           tblptrl	equ	0xFF6
  4343                           tablat	equ	0xFF5
  4344                           prodh	equ	0xFF4
  4345                           prodl	equ	0xFF3
  4346                           intcon	equ	0xFF2
  4347                           intcon2	equ	0xFF1
  4348                           intcon3	equ	0xFF0
  4349                           postinc0	equ	0xFEE
  4350                           wreg	equ	0xFE8
  4351                           indf1	equ	0xFE7
  4352                           postinc1	equ	0xFE6
  4353                           postdec1	equ	0xFE5
  4354                           fsr1h	equ	0xFE2
  4355                           fsr1l	equ	0xFE1
  4356                           indf2	equ	0xFDF
  4357                           postinc2	equ	0xFDE
  4358                           postdec2	equ	0xFDD
  4359                           plusw2	equ	0xFDB
  4360                           fsr2h	equ	0xFDA
  4361                           fsr2l	equ	0xFD9
  4362                           status	equ	0xFD8
  4363                           
  4364 ;; *************** function _f_open *****************
  4365 ;; Defined at:
  4366 ;;		line 826 in file "bibliotecas/tff.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  fp              2  121[BANK0 ] PTR struct _FIL
  4369 ;;		 -> SDCard@fil(28), 
  4370 ;;  path            2  123[BANK0 ] PTR const unsigned char 
  4371 ;;		 -> STR_12(10), 
  4372 ;;  mode            1  125[BANK0 ] unsigned char 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;  dw              4   14[BANK1 ] unsigned long 
  4375 ;;  rs              2   12[BANK1 ] unsigned short 
  4376 ;;  dj             14   21[BANK1 ] struct _DIR_E
  4377 ;;  fn             12    0[BANK1 ] unsigned char [12]
  4378 ;;  dir             2   19[BANK1 ] PTR unsigned char 
  4379 ;;		 -> NULL(0), fs(544), 
  4380 ;;  res             1   18[BANK1 ] enum E155
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  1    wreg      enum E3961
  4383 ;; Registers used:
  4384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4390 ;;      Params:         0       5       0       0       0       0       0       0       0
  4391 ;;      Locals:         0       0      35       0       0       0       0       0       0
  4392 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4393 ;;      Totals:         0       9      35       0       0       0       0       0       0
  4394 ;;Total ram usage:       44 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; Hardware stack levels required when called:   12
  4397 ;; This function calls:
  4398 ;;		_auto_mount
  4399 ;;		_get_fattime
  4400 ;;		_memcpy
  4401 ;;		_memset
  4402 ;;		_move_window
  4403 ;;		_remove_chain
  4404 ;;		_reserve_direntry
  4405 ;;		_trace_path
  4406 ;; This function is called by:
  4407 ;;		_SDCard
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text15
  4412  000ED2                     __ptext15:
  4413                           	opt stack 0
  4414  000ED2                     _f_open:
  4415                           	opt stack 17
  4416                           
  4417                           ;tff.c: 832: FRESULT res;
  4418                           ;tff.c: 833: DIR_E dj;
  4419                           ;tff.c: 834: BYTE *dir;
  4420                           ;tff.c: 835: char fn[8+3+1];
  4421                           ;tff.c: 838: fp->fs = (0);
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;incstack = 0
  4425  000ED2  0100               	movlb	0	; () banked
  4426  000ED4  EE20 F004          	lfsr	2,4
  4427  000ED8  51D9               	movf	f_open@fp& (0+255),w,b
  4428  000EDA  26D9               	addwf	fsr2l,f,c
  4429  000EDC  51DA               	movf	(f_open@fp+1)& (0+255),w,b
  4430  000EDE  22DA               	addwfc	fsr2h,f,c
  4431  000EE0  0E00               	movlw	0
  4432  000EE2  6EDE               	movwf	postinc2,c
  4433  000EE4  0E00               	movlw	0
  4434  000EE6  6EDD               	movwf	postdec2,c
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;tff.c: 840: mode &= (0x01|0x02|0x08|0x10|0x04);
  4438  000EE8  0E1F               	movlw	31
  4439  000EEA  17DD               	andwf	f_open@mode& (0+255),f,b
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;tff.c: 841: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
  4443  000EEC  0EDB               	movlw	low f_open@path
  4444  000EEE  6F95               	movwf	auto_mount@path& (0+255),b
  4445  000EF0  0E00               	movlw	high f_open@path
  4446  000EF2  6F96               	movwf	(auto_mount@path+1)& (0+255),b
  4447  000EF4  51DD               	movf	f_open@mode& (0+255),w,b
  4448  000EF6  0B1E               	andlw	30
  4449  000EF8  6F97               	movwf	auto_mount@chk_wp& (0+255),b
  4450  000EFA  ECEF  F002         	call	_auto_mount	;wreg free
  4451  000EFE  0101               	movlb	1	; () banked
  4452  000F00  6FAC               	movwf	f_open@res& (0+255),b
  4453                           
  4454                           ; BSR set to: 1
  4455                           ;tff.c: 846: if (res != FR_OK) return res;
  4456  000F02  51AC               	movf	f_open@res& (0+255),w,b
  4457  000F04  B4D8               	btfsc	status,2,c
  4458  000F06  D002               	goto	l1241
  4459                           
  4460                           ; BSR set to: 1
  4461  000F08  51AC               	movf	f_open@res& (0+255),w,b
  4462                           
  4463                           ; BSR set to: 1
  4464  000F0A  0012               	return	
  4465  000F0C                     l1241:
  4466                           
  4467                           ; BSR set to: 1
  4468                           ;tff.c: 847: res = trace_path(&dj, fn, path, &dir);
  4469                           
  4470                           ; BSR set to: 1
  4471  000F0C  0EAF               	movlw	low f_open@dj
  4472  000F0E  0100               	movlb	0	; () banked
  4473  000F10  6FC2               	movwf	trace_path@dj& (0+255),b
  4474  000F12  0E01               	movlw	high f_open@dj
  4475  000F14  6FC3               	movwf	(trace_path@dj+1)& (0+255),b
  4476  000F16  0E9A               	movlw	low f_open@fn
  4477  000F18  6FC4               	movwf	trace_path@fn& (0+255),b
  4478  000F1A  0E01               	movlw	high f_open@fn
  4479  000F1C  6FC5               	movwf	(trace_path@fn+1)& (0+255),b
  4480  000F1E  C0DB  F0C6         	movff	f_open@path,trace_path@path
  4481  000F22  C0DC  F0C7         	movff	f_open@path+1,trace_path@path+1
  4482  000F26  0EAD               	movlw	low f_open@dir
  4483  000F28  6FC8               	movwf	trace_path@dir& (0+255),b
  4484  000F2A  0E01               	movlw	high f_open@dir
  4485  000F2C  6FC9               	movwf	(trace_path@dir+1)& (0+255),b
  4486  000F2E  EC7F  F00A         	call	_trace_path	;wreg free
  4487  000F32  0101               	movlb	1	; () banked
  4488  000F34  6FAC               	movwf	f_open@res& (0+255),b
  4489                           
  4490                           ; BSR set to: 1
  4491                           ;tff.c: 851: if (mode & (0x08|0x10|0x04)) {
  4492  000F36  C0DD  F0DE         	movff	f_open@mode,??_f_open
  4493  000F3A  0E1C               	movlw	28
  4494  000F3C  0100               	movlb	0	; () banked
  4495  000F3E  17DE               	andwf	??_f_open& (0+255),f,b
  4496  000F40  B4D8               	btfsc	status,2,c
  4497  000F42  D0F4               	goto	l1243
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;tff.c: 852: CLUST rs;
  4501                           ;tff.c: 853: DWORD dw;
  4502                           ;tff.c: 854: if (res != FR_OK) {
  4503  000F44  0101               	movlb	1	; () banked
  4504  000F46  51AC               	movf	f_open@res& (0+255),w,b
  4505  000F48  B4D8               	btfsc	status,2,c
  4506  000F4A  D040               	goto	l1244
  4507                           
  4508                           ; BSR set to: 1
  4509                           ;tff.c: 855: if (res != FR_NO_FILE) return res;
  4510  000F4C  0E02               	movlw	2
  4511  000F4E  19AC               	xorwf	f_open@res& (0+255),w,b
  4512  000F50  B4D8               	btfsc	status,2,c
  4513  000F52  D002               	goto	l1245
  4514                           
  4515                           ; BSR set to: 1
  4516  000F54  51AC               	movf	f_open@res& (0+255),w,b
  4517                           
  4518                           ; BSR set to: 1
  4519  000F56  0012               	return	
  4520  000F58                     l1245:
  4521                           
  4522                           ; BSR set to: 1
  4523                           ;tff.c: 856: res = reserve_direntry(&dj, &dir);
  4524                           
  4525                           ; BSR set to: 1
  4526  000F58  0EAF               	movlw	low f_open@dj
  4527  000F5A  0100               	movlb	0	; () banked
  4528  000F5C  6FC6               	movwf	reserve_direntry@dj& (0+255),b
  4529  000F5E  0E01               	movlw	high f_open@dj
  4530  000F60  6FC7               	movwf	(reserve_direntry@dj+1)& (0+255),b
  4531  000F62  0EAD               	movlw	low f_open@dir
  4532  000F64  6FC8               	movwf	reserve_direntry@dir& (0+255),b
  4533  000F66  0E01               	movlw	high f_open@dir
  4534  000F68  6FC9               	movwf	(reserve_direntry@dir+1)& (0+255),b
  4535  000F6A  EC32  F009         	call	_reserve_direntry	;wreg free
  4536  000F6E  0101               	movlb	1	; () banked
  4537  000F70  6FAC               	movwf	f_open@res& (0+255),b
  4538                           
  4539                           ; BSR set to: 1
  4540                           ;tff.c: 857: if (res != FR_OK) return res;
  4541  000F72  51AC               	movf	f_open@res& (0+255),w,b
  4542  000F74  B4D8               	btfsc	status,2,c
  4543  000F76  D002               	goto	l1246
  4544                           
  4545                           ; BSR set to: 1
  4546  000F78  51AC               	movf	f_open@res& (0+255),w,b
  4547                           
  4548                           ; BSR set to: 1
  4549  000F7A  0012               	return	
  4550  000F7C                     l1246:
  4551                           
  4552                           ; BSR set to: 1
  4553                           ;tff.c: 858: memset(dir, 0, 32);
  4554                           
  4555                           ; BSR set to: 1
  4556  000F7C  C1AD  F01A         	movff	f_open@dir,memset@p1
  4557  000F80  C1AE  F01B         	movff	f_open@dir+1,memset@p1+1
  4558  000F84  0E00               	movlw	0
  4559  000F86  6E1D               	movwf	memset@c+1,c
  4560  000F88  0E00               	movlw	0
  4561  000F8A  6E1C               	movwf	memset@c,c
  4562  000F8C  0E00               	movlw	0
  4563  000F8E  6E1F               	movwf	memset@n+1,c
  4564  000F90  0E20               	movlw	32
  4565  000F92  6E1E               	movwf	memset@n,c
  4566  000F94  EC60  F01C         	call	_memset	;wreg free
  4567                           
  4568                           ;tff.c: 859: memcpy(&dir[0], fn, 8+3);
  4569  000F98  C1AD  F01A         	movff	f_open@dir,memcpy@d1
  4570  000F9C  C1AE  F01B         	movff	f_open@dir+1,memcpy@d1+1
  4571  000FA0  0E9A               	movlw	low f_open@fn
  4572  000FA2  6E1C               	movwf	memcpy@s1,c
  4573  000FA4  0E01               	movlw	high f_open@fn
  4574  000FA6  6E1D               	movwf	memcpy@s1+1,c
  4575  000FA8  0E00               	movlw	0
  4576  000FAA  6E1F               	movwf	memcpy@n+1,c
  4577  000FAC  0E0B               	movlw	11
  4578  000FAE  6E1E               	movwf	memcpy@n,c
  4579  000FB0  EC2F  F01A         	call	_memcpy	;wreg free
  4580                           
  4581                           ;tff.c: 860: dir[12] = fn[11];
  4582  000FB4  0101               	movlb	1	; () banked
  4583  000FB6  EE20 F00C          	lfsr	2,12
  4584  000FBA  51AD               	movf	f_open@dir& (0+255),w,b
  4585  000FBC  26D9               	addwf	fsr2l,f,c
  4586  000FBE  51AE               	movf	(f_open@dir+1)& (0+255),w,b
  4587  000FC0  22DA               	addwfc	fsr2h,f,c
  4588  000FC2  C1A5  FFDF         	movff	f_open@fn+11,indf2
  4589                           
  4590                           ; BSR set to: 1
  4591                           ;tff.c: 861: mode |= 0x08;
  4592  000FC6  0100               	movlb	0	; () banked
  4593  000FC8  87DD               	bsf	f_open@mode& (0+255),3,b
  4594                           
  4595                           ;tff.c: 862: }
  4596  000FCA  D080               	goto	l1252
  4597  000FCC                     l1244:
  4598                           
  4599                           ; BSR set to: 1
  4600                           ;tff.c: 863: else {
  4601                           ;tff.c: 864: if (mode & 0x04)
  4602  000FCC  0100               	movlb	0	; () banked
  4603  000FCE  A5DD               	btfss	f_open@mode& (0+255),2,b
  4604  000FD0  D002               	goto	l1248
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;tff.c: 865: return FR_EXIST;
  4608  000FD2  0E07               	movlw	7
  4609                           
  4610                           ; BSR set to: 0
  4611  000FD4  0012               	return	
  4612  000FD6                     l1248:
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;tff.c: 866: if (!dir || (dir[11] & (0x01|0x10)))
  4616                           
  4617                           ; BSR set to: 0
  4618  000FD6  0101               	movlb	1	; () banked
  4619  000FD8  51AD               	movf	f_open@dir& (0+255),w,b
  4620  000FDA  11AE               	iorwf	(f_open@dir+1)& (0+255),w,b
  4621  000FDC  B4D8               	btfsc	status,2,c
  4622  000FDE  D00D               	goto	u14160
  4623                           
  4624                           ; BSR set to: 1
  4625  000FE0  EE20 F00B          	lfsr	2,11
  4626  000FE4  51AD               	movf	f_open@dir& (0+255),w,b
  4627  000FE6  26D9               	addwf	fsr2l,f,c
  4628  000FE8  51AE               	movf	(f_open@dir+1)& (0+255),w,b
  4629  000FEA  22DA               	addwfc	fsr2h,f,c
  4630  000FEC  50DF               	movf	indf2,w,c
  4631  000FEE  0100               	movlb	0	; () banked
  4632  000FF0  6FDE               	movwf	??_f_open& (0+255),b
  4633  000FF2  0E11               	movlw	17
  4634  000FF4  17DE               	andwf	??_f_open& (0+255),f,b
  4635  000FF6  B4D8               	btfsc	status,2,c
  4636  000FF8  D002               	goto	l1249
  4637  000FFA                     u14160:
  4638                           
  4639                           ;tff.c: 867: return FR_DENIED;
  4640                           
  4641                           ; BSR set to: 0
  4642  000FFA  0E06               	movlw	6
  4643  000FFC  0012               	return	
  4644  000FFE                     l1249:
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;tff.c: 868: if (mode & 0x08) {
  4648  000FFE  A7DD               	btfss	f_open@mode& (0+255),3,b
  4649  001000  D065               	goto	l1252
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;tff.c: 873: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  4653  001002  0101               	movlb	1	; () banked
  4654  001004  EE20 F01A          	lfsr	2,26
  4655  001008  51AD               	movf	f_open@dir& (0+255),w,b
  4656  00100A  26D9               	addwf	fsr2l,f,c
  4657  00100C  51AE               	movf	(f_open@dir+1)& (0+255),w,b
  4658  00100E  22DA               	addwfc	fsr2h,f,c
  4659  001010  CFDE F1A6          	movff	postinc2,f_open@rs
  4660  001014  CFDD F1A7          	movff	postdec2,f_open@rs+1
  4661                           
  4662                           ;tff.c: 875: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
  4663  001018  EE20 F01A          	lfsr	2,26
  4664  00101C  51AD               	movf	f_open@dir& (0+255),w,b
  4665  00101E  26D9               	addwf	fsr2l,f,c
  4666  001020  51AE               	movf	(f_open@dir+1)& (0+255),w,b
  4667  001022  22DA               	addwfc	fsr2h,f,c
  4668  001024  0E00               	movlw	0
  4669  001026  6EDE               	movwf	postinc2,c
  4670  001028  0E00               	movlw	0
  4671  00102A  6EDD               	movwf	postdec2,c
  4672                           
  4673                           ;tff.c: 876: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
  4674  00102C  EE20 F01C          	lfsr	2,28
  4675  001030  51AD               	movf	f_open@dir& (0+255),w,b
  4676  001032  26D9               	addwf	fsr2l,f,c
  4677  001034  51AE               	movf	(f_open@dir+1)& (0+255),w,b
  4678  001036  22DA               	addwfc	fsr2h,f,c
  4679  001038  6ADE               	clrf	postinc2,c
  4680  00103A  6ADE               	clrf	postinc2,c
  4681  00103C  6ADE               	clrf	postinc2,c
  4682  00103E  6ADD               	clrf	postdec2,c
  4683                           
  4684                           ;tff.c: 877: dj.fs->winflag = 1;
  4685  001040  EE20 F01F          	lfsr	2,31
  4686  001044  51B3               	movf	(f_open@dj+4)& (0+255),w,b
  4687  001046  26D9               	addwf	fsr2l,f,c
  4688  001048  51B4               	movf	(f_open@dj+5)& (0+255),w,b
  4689  00104A  22DA               	addwfc	fsr2h,f,c
  4690  00104C  0E01               	movlw	1
  4691  00104E  6EDF               	movwf	indf2,c
  4692                           
  4693                           ;tff.c: 878: dw = dj.fs->winsect;
  4694  001050  EE20 F004          	lfsr	2,4
  4695  001054  51B3               	movf	(f_open@dj+4)& (0+255),w,b
  4696  001056  26D9               	addwf	fsr2l,f,c
  4697  001058  51B4               	movf	(f_open@dj+5)& (0+255),w,b
  4698  00105A  22DA               	addwfc	fsr2h,f,c
  4699  00105C  CFDE F1A8          	movff	postinc2,f_open@dw
  4700  001060  CFDE F1A9          	movff	postinc2,f_open@dw+1
  4701  001064  CFDE F1AA          	movff	postinc2,f_open@dw+2
  4702  001068  CFDE F1AB          	movff	postinc2,f_open@dw+3
  4703                           
  4704                           ; BSR set to: 1
  4705                           ;tff.c: 879: if (!remove_chain(rs) || !move_window(dw))
  4706  00106C  C1A6  F0B8         	movff	f_open@rs,remove_chain@clust
  4707  001070  C1A7  F0B9         	movff	f_open@rs+1,remove_chain@clust+1
  4708  001074  EC55  F016         	call	_remove_chain	;wreg free
  4709  001078  0900               	iorlw	0
  4710  00107A  B4D8               	btfsc	status,2,c
  4711  00107C  D00D               	goto	u14190
  4712  00107E  C1A8  F08D         	movff	f_open@dw,move_window@sector
  4713  001082  C1A9  F08E         	movff	f_open@dw+1,move_window@sector+1
  4714  001086  C1AA  F08F         	movff	f_open@dw+2,move_window@sector+2
  4715  00108A  C1AB  F090         	movff	f_open@dw+3,move_window@sector+3
  4716  00108E  ECF8  F00E         	call	_move_window	;wreg free
  4717  001092  0900               	iorlw	0
  4718  001094  A4D8               	btfss	status,2,c
  4719  001096  D002               	goto	l1253
  4720  001098                     u14190:
  4721                           
  4722                           ;tff.c: 880: return FR_RW_ERROR;
  4723  001098  0E08               	movlw	8
  4724  00109A  0012               	return	
  4725  00109C                     l1253:
  4726                           
  4727                           ;tff.c: 881: dj.fs->last_clust = rs - 1;
  4728  00109C  0EFF               	movlw	255
  4729  00109E  0100               	movlb	0	; () banked
  4730  0010A0  6FDE               	movwf	??_f_open& (0+255),b
  4731  0010A2  0EFF               	movlw	255
  4732  0010A4  6FDF               	movwf	(??_f_open+1)& (0+255),b
  4733  0010A6  C1A6  F0E0         	movff	f_open@rs,??_f_open+2
  4734  0010AA  C1A7  F0E1         	movff	f_open@rs+1,??_f_open+3
  4735  0010AE  51DE               	movf	??_f_open& (0+255),w,b
  4736  0010B0  27E0               	addwf	(??_f_open+2)& (0+255),f,b
  4737  0010B2  51DF               	movf	(??_f_open+1)& (0+255),w,b
  4738  0010B4  23E1               	addwfc	(??_f_open+3)& (0+255),f,b
  4739  0010B6  0101               	movlb	1	; () banked
  4740  0010B8  EE20 F018          	lfsr	2,24
  4741  0010BC  51B3               	movf	(f_open@dj+4)& (0+255),w,b
  4742  0010BE  26D9               	addwf	fsr2l,f,c
  4743  0010C0  51B4               	movf	(f_open@dj+5)& (0+255),w,b
  4744  0010C2  22DA               	addwfc	fsr2h,f,c
  4745  0010C4  C0E0  FFDE         	movff	??_f_open+2,postinc2
  4746  0010C8  C0E1  FFDD         	movff	??_f_open+3,postdec2
  4747  0010CC                     l1252:
  4748                           
  4749                           ;tff.c: 882: }
  4750                           ;tff.c: 883: }
  4751                           ;tff.c: 884: if (mode & 0x08) {
  4752                           
  4753                           ; BSR set to: 1
  4754                           
  4755                           ; BSR set to: 1
  4756  0010CC  0100               	movlb	0	; () banked
  4757  0010CE  A7DD               	btfss	f_open@mode& (0+255),3,b
  4758  0010D0  D04F               	goto	l1262
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;tff.c: 885: dir[11] = 0;
  4762  0010D2  0101               	movlb	1	; () banked
  4763  0010D4  EE20 F00B          	lfsr	2,11
  4764  0010D8  51AD               	movf	f_open@dir& (0+255),w,b
  4765  0010DA  26D9               	addwf	fsr2l,f,c
  4766  0010DC  51AE               	movf	(f_open@dir+1)& (0+255),w,b
  4767  0010DE  22DA               	addwfc	fsr2h,f,c
  4768  0010E0  0E00               	movlw	0
  4769  0010E2  6EDF               	movwf	indf2,c
  4770                           
  4771                           ; BSR set to: 1
  4772                           ;tff.c: 886: dw = get_fattime();
  4773  0010E4  ECAF  F014         	call	_get_fattime	;wreg free
  4774  0010E8  C01A  F1A8         	movff	?_get_fattime,f_open@dw
  4775  0010EC  C01B  F1A9         	movff	?_get_fattime+1,f_open@dw+1
  4776  0010F0  C01C  F1AA         	movff	?_get_fattime+2,f_open@dw+2
  4777  0010F4  C01D  F1AB         	movff	?_get_fattime+3,f_open@dw+3
  4778                           
  4779                           ;tff.c: 887: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
  4780  0010F8  0101               	movlb	1	; () banked
  4781  0010FA  EE20 F00E          	lfsr	2,14
  4782  0010FE  51AD               	movf	f_open@dir& (0+255),w,b
  4783  001100  26D9               	addwf	fsr2l,f,c
  4784  001102  51AE               	movf	(f_open@dir+1)& (0+255),w,b
  4785  001104  22DA               	addwfc	fsr2h,f,c
  4786  001106  C1A8  FFDE         	movff	f_open@dw,postinc2
  4787  00110A  C1A9  FFDE         	movff	f_open@dw+1,postinc2
  4788  00110E  C1AA  FFDE         	movff	f_open@dw+2,postinc2
  4789  001112  C1AB  FFDE         	movff	f_open@dw+3,postinc2
  4790                           
  4791                           ; BSR set to: 1
  4792                           ;tff.c: 888: dj.fs->winflag = 1;
  4793  001116  EE20 F01F          	lfsr	2,31
  4794  00111A  51B3               	movf	(f_open@dj+4)& (0+255),w,b
  4795  00111C  26D9               	addwf	fsr2l,f,c
  4796  00111E  51B4               	movf	(f_open@dj+5)& (0+255),w,b
  4797  001120  22DA               	addwfc	fsr2h,f,c
  4798  001122  0E01               	movlw	1
  4799  001124  6EDF               	movwf	indf2,c
  4800                           
  4801                           ; BSR set to: 1
  4802                           ;tff.c: 889: mode |= 0x20;
  4803  001126  0100               	movlb	0	; () banked
  4804  001128  8BDD               	bsf	f_open@mode& (0+255),5,b
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;tff.c: 890: }
  4808                           ;tff.c: 891: }
  4809  00112A  D022               	goto	l1262
  4810  00112C                     l1243:
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;tff.c: 893: else {
  4814                           ;tff.c: 895: if (res != FR_OK) return res;
  4815                           
  4816                           ; BSR set to: 0
  4817  00112C  0101               	movlb	1	; () banked
  4818  00112E  51AC               	movf	f_open@res& (0+255),w,b
  4819  001130  B4D8               	btfsc	status,2,c
  4820  001132  D002               	goto	l1258
  4821                           
  4822                           ; BSR set to: 1
  4823  001134  51AC               	movf	f_open@res& (0+255),w,b
  4824                           
  4825                           ; BSR set to: 1
  4826  001136  0012               	return	
  4827  001138                     l1258:
  4828                           
  4829                           ; BSR set to: 1
  4830                           ;tff.c: 896: if (!dir || (dir[11] & 0x10))
  4831                           
  4832                           ; BSR set to: 1
  4833  001138  51AD               	movf	f_open@dir& (0+255),w,b
  4834  00113A  11AE               	iorwf	(f_open@dir+1)& (0+255),w,b
  4835  00113C  B4D8               	btfsc	status,2,c
  4836  00113E  D008               	goto	u14230
  4837                           
  4838                           ; BSR set to: 1
  4839  001140  EE20 F00B          	lfsr	2,11
  4840  001144  51AD               	movf	f_open@dir& (0+255),w,b
  4841  001146  26D9               	addwf	fsr2l,f,c
  4842  001148  51AE               	movf	(f_open@dir+1)& (0+255),w,b
  4843  00114A  22DA               	addwfc	fsr2h,f,c
  4844  00114C  A8DF               	btfss	indf2,4,c
  4845  00114E  D002               	goto	l1259
  4846  001150                     u14230:
  4847                           
  4848                           ; BSR set to: 1
  4849                           ;tff.c: 897: return FR_NO_FILE;
  4850                           
  4851                           ; BSR set to: 1
  4852  001150  0E02               	movlw	2
  4853                           
  4854                           ; BSR set to: 1
  4855  001152  0012               	return	
  4856  001154                     l1259:
  4857                           
  4858                           ; BSR set to: 1
  4859                           ;tff.c: 899: if ((mode & 0x02) && (dir[11] & 0x01))
  4860  001154  0100               	movlb	0	; () banked
  4861  001156  A3DD               	btfss	f_open@mode& (0+255),1,b
  4862  001158  D00B               	goto	l1262
  4863                           
  4864                           ; BSR set to: 0
  4865  00115A  0101               	movlb	1	; () banked
  4866  00115C  EE20 F00B          	lfsr	2,11
  4867  001160  51AD               	movf	f_open@dir& (0+255),w,b
  4868  001162  26D9               	addwf	fsr2l,f,c
  4869  001164  51AE               	movf	(f_open@dir+1)& (0+255),w,b
  4870  001166  22DA               	addwfc	fsr2h,f,c
  4871  001168  A0DF               	btfss	indf2,0,c
  4872  00116A  D002               	goto	l1262
  4873                           
  4874                           ; BSR set to: 1
  4875                           ;tff.c: 900: return FR_DENIED;
  4876  00116C  0E06               	movlw	6
  4877                           
  4878                           ; BSR set to: 1
  4879  00116E  0012               	return	
  4880  001170                     l1262:
  4881                           
  4882                           ;tff.c: 901: }
  4883                           ;tff.c: 902: fp->dir_sect = dj.fs->winsect;
  4884                           
  4885                           ; BSR set to: 1
  4886                           
  4887                           ; BSR set to: 1
  4888  001170  0101               	movlb	1	; () banked
  4889  001172  EE20 F004          	lfsr	2,4
  4890  001176  51B3               	movf	(f_open@dj+4)& (0+255),w,b
  4891  001178  26D9               	addwf	fsr2l,f,c
  4892  00117A  51B4               	movf	(f_open@dj+5)& (0+255),w,b
  4893  00117C  22DA               	addwfc	fsr2h,f,c
  4894  00117E  0100               	movlb	0	; () banked
  4895  001180  EE10 F016          	lfsr	1,22
  4896  001184  51D9               	movf	f_open@fp& (0+255),w,b
  4897  001186  26E1               	addwf	fsr1l,f,c
  4898  001188  51DA               	movf	(f_open@fp+1)& (0+255),w,b
  4899  00118A  22E2               	addwfc	fsr1h,f,c
  4900  00118C  CFDE FFE6          	movff	postinc2,postinc1
  4901  001190  CFDE FFE6          	movff	postinc2,postinc1
  4902  001194  CFDE FFE6          	movff	postinc2,postinc1
  4903  001198  CFDE FFE6          	movff	postinc2,postinc1
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;tff.c: 903: fp->dir_ptr = dir;
  4907  00119C  EE20 F01A          	lfsr	2,26
  4908  0011A0  51D9               	movf	f_open@fp& (0+255),w,b
  4909  0011A2  26D9               	addwf	fsr2l,f,c
  4910  0011A4  51DA               	movf	(f_open@fp+1)& (0+255),w,b
  4911  0011A6  22DA               	addwfc	fsr2h,f,c
  4912  0011A8  C1AD  FFDE         	movff	f_open@dir,postinc2
  4913  0011AC  C1AE  FFDD         	movff	f_open@dir+1,postdec2
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;tff.c: 905: fp->flag = mode;
  4917  0011B0  EE20 F002          	lfsr	2,2
  4918  0011B4  51D9               	movf	f_open@fp& (0+255),w,b
  4919  0011B6  26D9               	addwf	fsr2l,f,c
  4920  0011B8  51DA               	movf	(f_open@fp+1)& (0+255),w,b
  4921  0011BA  22DA               	addwfc	fsr2h,f,c
  4922  0011BC  C0DD  FFDF         	movff	f_open@mode,indf2
  4923                           
  4924                           ;tff.c: 906: fp->org_clust =
  4925                           ;tff.c: 910: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  4926  0011C0  0101               	movlb	1	; () banked
  4927  0011C2  EE20 F01A          	lfsr	2,26
  4928  0011C6  51AD               	movf	f_open@dir& (0+255),w,b
  4929  0011C8  26D9               	addwf	fsr2l,f,c
  4930  0011CA  51AE               	movf	(f_open@dir+1)& (0+255),w,b
  4931  0011CC  22DA               	addwfc	fsr2h,f,c
  4932  0011CE  0100               	movlb	0	; () banked
  4933  0011D0  EE10 F00E          	lfsr	1,14
  4934  0011D4  51D9               	movf	f_open@fp& (0+255),w,b
  4935  0011D6  26E1               	addwf	fsr1l,f,c
  4936  0011D8  51DA               	movf	(f_open@fp+1)& (0+255),w,b
  4937  0011DA  22E2               	addwfc	fsr1h,f,c
  4938  0011DC  CFDE FFE6          	movff	postinc2,postinc1
  4939  0011E0  CFDD FFE5          	movff	postdec2,postdec1
  4940                           
  4941                           ;tff.c: 911: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
  4942  0011E4  0101               	movlb	1	; () banked
  4943  0011E6  EE20 F01C          	lfsr	2,28
  4944  0011EA  51AD               	movf	f_open@dir& (0+255),w,b
  4945  0011EC  26D9               	addwf	fsr2l,f,c
  4946  0011EE  51AE               	movf	(f_open@dir+1)& (0+255),w,b
  4947  0011F0  22DA               	addwfc	fsr2h,f,c
  4948  0011F2  0100               	movlb	0	; () banked
  4949  0011F4  EE10 F00A          	lfsr	1,10
  4950  0011F8  51D9               	movf	f_open@fp& (0+255),w,b
  4951  0011FA  26E1               	addwf	fsr1l,f,c
  4952  0011FC  51DA               	movf	(f_open@fp+1)& (0+255),w,b
  4953  0011FE  22E2               	addwfc	fsr1h,f,c
  4954  001200  CFDE FFE6          	movff	postinc2,postinc1
  4955  001204  CFDE FFE6          	movff	postinc2,postinc1
  4956  001208  CFDE FFE6          	movff	postinc2,postinc1
  4957  00120C  CFDE FFE6          	movff	postinc2,postinc1
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;tff.c: 912: fp->fptr = 0; fp->csect = 255;
  4961  001210  EE20 F006          	lfsr	2,6
  4962  001214  51D9               	movf	f_open@fp& (0+255),w,b
  4963  001216  26D9               	addwf	fsr2l,f,c
  4964  001218  51DA               	movf	(f_open@fp+1)& (0+255),w,b
  4965  00121A  22DA               	addwfc	fsr2h,f,c
  4966  00121C  6ADE               	clrf	postinc2,c
  4967  00121E  6ADE               	clrf	postinc2,c
  4968  001220  6ADE               	clrf	postinc2,c
  4969  001222  6ADD               	clrf	postdec2,c
  4970                           
  4971                           ; BSR set to: 0
  4972  001224  EE20 F003          	lfsr	2,3
  4973  001228  51D9               	movf	f_open@fp& (0+255),w,b
  4974  00122A  26D9               	addwf	fsr2l,f,c
  4975  00122C  51DA               	movf	(f_open@fp+1)& (0+255),w,b
  4976  00122E  22DA               	addwfc	fsr2h,f,c
  4977  001230  0EFF               	movlw	255
  4978  001232  6EDF               	movwf	indf2,c
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;tff.c: 913: fp->fs = dj.fs; fp->id = dj.fs->id;
  4982  001234  EE20 F004          	lfsr	2,4
  4983  001238  51D9               	movf	f_open@fp& (0+255),w,b
  4984  00123A  26D9               	addwf	fsr2l,f,c
  4985  00123C  51DA               	movf	(f_open@fp+1)& (0+255),w,b
  4986  00123E  22DA               	addwfc	fsr2h,f,c
  4987  001240  C1B3  FFDE         	movff	f_open@dj+4,postinc2
  4988  001244  C1B4  FFDD         	movff	f_open@dj+5,postdec2
  4989                           
  4990                           ; BSR set to: 0
  4991  001248  C1B3  FFD9         	movff	f_open@dj+4,fsr2l
  4992  00124C  C1B4  FFDA         	movff	f_open@dj+5,fsr2h
  4993  001250  C0D9  FFE1         	movff	f_open@fp,fsr1l
  4994  001254  C0DA  FFE2         	movff	f_open@fp+1,fsr1h
  4995  001258  CFDE FFE6          	movff	postinc2,postinc1
  4996  00125C  CFDD FFE5          	movff	postdec2,postdec1
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;tff.c: 915: return FR_OK;
  5000  001260  0E00               	movlw	0
  5001  001262  0012               	return	
  5002  001264                     __end_of_f_open:
  5003                           	opt stack 0
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           intcon2	equ	0xFF1
  5012                           intcon3	equ	0xFF0
  5013                           postinc0	equ	0xFEE
  5014                           wreg	equ	0xFE8
  5015                           indf1	equ	0xFE7
  5016                           postinc1	equ	0xFE6
  5017                           postdec1	equ	0xFE5
  5018                           fsr1h	equ	0xFE2
  5019                           fsr1l	equ	0xFE1
  5020                           indf2	equ	0xFDF
  5021                           postinc2	equ	0xFDE
  5022                           postdec2	equ	0xFDD
  5023                           plusw2	equ	0xFDB
  5024                           fsr2h	equ	0xFDA
  5025                           fsr2l	equ	0xFD9
  5026                           status	equ	0xFD8
  5027                           
  5028 ;; *************** function _trace_path *****************
  5029 ;; Defined at:
  5030 ;;		line 501 in file "bibliotecas/tff.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;  dj              2   98[BANK0 ] PTR struct _DIR_E
  5033 ;;		 -> f_rename@dj(14), f_utime@dj(14), f_chmod@dj(14), f_mkdir@dj(14), 
  5034 ;;		 -> f_unlink@dj(14), f_stat@dj(14), f_open@dj(14), 
  5035 ;;  fn              2  100[BANK0 ] PTR unsigned char 
  5036 ;;		 -> f_rename@fn(12), f_utime@fn(12), f_chmod@fn(12), f_mkdir@fn(12), 
  5037 ;;		 -> f_unlink@fn(12), f_stat@fn(12), f_opendir@fn(12), f_open@fn(12), 
  5038 ;;  path            2  102[BANK0 ] PTR const unsigned char 
  5039 ;;		 -> STR_12(10), 
  5040 ;;  dir             2  104[BANK0 ] PTR PTR unsigned char 
  5041 ;;		 -> f_rename@dir_new(2), f_rename@dir_old(2), f_utime@dir(2), f_chmod@dir(2), 
  5042 ;;		 -> f_mkdir@dir(2), f_unlink@dir(2), f_stat@dir(2), f_opendir@dir(2), 
  5043 ;;		 -> f_open@dir(2), 
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;  dptr            2  119[BANK0 ] PTR unsigned char 
  5046 ;;		 -> fs.win(512), NULL(0), fs(544), 
  5047 ;;  clust           2  116[BANK0 ] unsigned short 
  5048 ;;  fs              2  114[BANK0 ] PTR struct _FATFS
  5049 ;;		 -> NULL(0), fs(544), 
  5050 ;;  ds              1  118[BANK0 ] unsigned char 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  1    wreg      enum E155
  5053 ;; Registers used:
  5054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5060 ;;      Params:         0       8       0       0       0       0       0       0       0
  5061 ;;      Locals:         0      11       0       0       0       0       0       0       0
  5062 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5063 ;;      Totals:         0      23       0       0       0       0       0       0       0
  5064 ;;Total ram usage:       23 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:   11
  5067 ;; This function calls:
  5068 ;;		_clust2sect
  5069 ;;		_make_dirfile
  5070 ;;		_memcmp
  5071 ;;		_move_window
  5072 ;;		_next_dir_entry
  5073 ;; This function is called by:
  5074 ;;		_f_open
  5075 ;;		_f_opendir
  5076 ;;		_f_stat
  5077 ;;		_f_unlink
  5078 ;;		_f_mkdir
  5079 ;;		_f_chmod
  5080 ;;		_f_utime
  5081 ;;		_f_rename
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           	psect	text16
  5086  0014FE                     __ptext16:
  5087                           	opt stack 0
  5088  0014FE                     _trace_path:
  5089                           	opt stack 17
  5090                           
  5091                           ;tff.c: 508: CLUST clust;
  5092                           ;tff.c: 509: char ds;
  5093                           ;tff.c: 510: BYTE *dptr = (0);
  5094                           
  5095                           ;incstack = 0
  5096  0014FE  0E00               	movlw	0
  5097  001500  0100               	movlb	0	; () banked
  5098  001502  6FD7               	movwf	trace_path@dptr& (0+255),b
  5099  001504  0E00               	movlw	0
  5100  001506  6FD8               	movwf	(trace_path@dptr+1)& (0+255),b
  5101                           
  5102                           ;tff.c: 511: FATFS *fs = FatFs;
  5103  001508  C0EF  F0D2         	movff	_FatFs,trace_path@fs
  5104  00150C  C0F0  F0D3         	movff	_FatFs+1,trace_path@fs+1
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;tff.c: 514: dj->fs = fs;
  5108  001510  EE20 F004          	lfsr	2,4
  5109  001514  51C2               	movf	trace_path@dj& (0+255),w,b
  5110  001516  26D9               	addwf	fsr2l,f,c
  5111  001518  51C3               	movf	(trace_path@dj+1)& (0+255),w,b
  5112  00151A  22DA               	addwfc	fsr2h,f,c
  5113  00151C  C0D2  FFDE         	movff	trace_path@fs,postinc2
  5114  001520  C0D3  FFDD         	movff	trace_path@fs+1,postdec2
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;tff.c: 515: clust = fs->dirbase;
  5118  001524  EE20 F00C          	lfsr	2,12
  5119  001528  51D2               	movf	trace_path@fs& (0+255),w,b
  5120  00152A  26D9               	addwf	fsr2l,f,c
  5121  00152C  51D3               	movf	(trace_path@fs+1)& (0+255),w,b
  5122  00152E  22DA               	addwfc	fsr2h,f,c
  5123  001530  CFDE F0D4          	movff	postinc2,trace_path@clust
  5124  001534  CFDD F0D5          	movff	postdec2,trace_path@clust+1
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;tff.c: 522: {
  5128                           ;tff.c: 523: dj->clust = dj->sclust = 0;
  5129  001538  EE20 F006          	lfsr	2,6
  5130  00153C  51C2               	movf	trace_path@dj& (0+255),w,b
  5131  00153E  26D9               	addwf	fsr2l,f,c
  5132  001540  51C3               	movf	(trace_path@dj+1)& (0+255),w,b
  5133  001542  22DA               	addwfc	fsr2h,f,c
  5134  001544  0E00               	movlw	0
  5135  001546  6EDE               	movwf	postinc2,c
  5136  001548  0E00               	movlw	0
  5137  00154A  6EDD               	movwf	postdec2,c
  5138  00154C  EE10 F008          	lfsr	1,8
  5139  001550  51C2               	movf	trace_path@dj& (0+255),w,b
  5140  001552  26E1               	addwf	fsr1l,f,c
  5141  001554  51C3               	movf	(trace_path@dj+1)& (0+255),w,b
  5142  001556  22E2               	addwfc	fsr1h,f,c
  5143  001558  CFDE FFE6          	movff	postinc2,postinc1
  5144  00155C  CFDD FFE5          	movff	postdec2,postdec1
  5145                           
  5146                           ; BSR set to: 0
  5147                           ;tff.c: 524: dj->sect = clust;
  5148  001560  51D4               	movf	trace_path@clust& (0+255),w,b
  5149  001562  6FCA               	movwf	??_trace_path& (0+255),b
  5150  001564  51D5               	movf	(trace_path@clust+1)& (0+255),w,b
  5151  001566  6FCB               	movwf	(??_trace_path+1)& (0+255),b
  5152  001568  6BCC               	clrf	(??_trace_path+2)& (0+255),b
  5153  00156A  6BCD               	clrf	(??_trace_path+3)& (0+255),b
  5154  00156C  EE20 F00A          	lfsr	2,10
  5155  001570  51C2               	movf	trace_path@dj& (0+255),w,b
  5156  001572  26D9               	addwf	fsr2l,f,c
  5157  001574  51C3               	movf	(trace_path@dj+1)& (0+255),w,b
  5158  001576  22DA               	addwfc	fsr2h,f,c
  5159  001578  C0CA  FFDE         	movff	??_trace_path,postinc2
  5160  00157C  C0CB  FFDE         	movff	??_trace_path+1,postinc2
  5161  001580  C0CC  FFDE         	movff	??_trace_path+2,postinc2
  5162  001584  C0CD  FFDE         	movff	??_trace_path+3,postinc2
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;tff.c: 525: }
  5166                           ;tff.c: 526: dj->index = 0;
  5167  001588  EE20 F002          	lfsr	2,2
  5168  00158C  51C2               	movf	trace_path@dj& (0+255),w,b
  5169  00158E  26D9               	addwf	fsr2l,f,c
  5170  001590  51C3               	movf	(trace_path@dj+1)& (0+255),w,b
  5171  001592  22DA               	addwfc	fsr2h,f,c
  5172  001594  0E00               	movlw	0
  5173  001596  6EDE               	movwf	postinc2,c
  5174  001598  0E00               	movlw	0
  5175  00159A  6EDD               	movwf	postdec2,c
  5176                           
  5177                           ; BSR set to: 0
  5178                           ;tff.c: 528: if (*path == '\0') {
  5179  00159C  C0C6  FFF6         	movff	trace_path@path,tblptrl
  5180  0015A0  C0C7  FFF7         	movff	trace_path@path+1,tblptrh
  5181  0015A4                     	if	0	;tblptru may be non-zero
  5182  0015A4                     	endif
  5183  0015A4                     	if	0	;tblptru may be non-zero
  5184  0015A4                     	endif
  5185  0015A4  0008               	tblrd		*
  5186  0015A6  50F5               	movf	tablat,w,c
  5187  0015A8  0900               	iorlw	0
  5188  0015AA  A4D8               	btfss	status,2,c
  5189  0015AC  D00A               	goto	l1153
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;tff.c: 529: *dir = (0); return FR_OK;
  5193  0015AE  C0C8  FFD9         	movff	trace_path@dir,fsr2l
  5194  0015B2  C0C9  FFDA         	movff	trace_path@dir+1,fsr2h
  5195  0015B6  0E00               	movlw	0
  5196  0015B8  6EDE               	movwf	postinc2,c
  5197  0015BA  0E00               	movlw	0
  5198  0015BC  6EDD               	movwf	postdec2,c
  5199                           
  5200                           ; BSR set to: 0
  5201  0015BE  0E00               	movlw	0
  5202                           
  5203                           ; BSR set to: 0
  5204  0015C0  0012               	return	
  5205  0015C2                     l1153:
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;tff.c: 533: ds = make_dirfile(&path, fn);
  5209                           
  5210                           ; BSR set to: 0
  5211                           
  5212                           ;tff.c: 530: }
  5213                           ;tff.c: 532: for (;;) {
  5214                           
  5215                           ; BSR set to: 0
  5216  0015C2  0EC6               	movlw	low trace_path@path
  5217  0015C4  6E22               	movwf	make_dirfile@path,c
  5218  0015C6  0E00               	movlw	high trace_path@path
  5219  0015C8  6E23               	movwf	make_dirfile@path+1,c
  5220  0015CA  C0C4  F024         	movff	trace_path@fn,make_dirfile@dirname
  5221  0015CE  C0C5  F025         	movff	trace_path@fn+1,make_dirfile@dirname+1
  5222  0015D2  EC6D  F011         	call	_make_dirfile	;wreg free
  5223  0015D6  0100               	movlb	0	; () banked
  5224  0015D8  6FD6               	movwf	trace_path@ds& (0+255),b
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;tff.c: 534: if (ds == 1) return FR_INVALID_NAME;
  5228  0015DA  05D6               	decf	trace_path@ds& (0+255),w,b
  5229  0015DC  A4D8               	btfss	status,2,c
  5230  0015DE  D002               	goto	l1156
  5231                           
  5232                           ; BSR set to: 0
  5233  0015E0  0E04               	movlw	4
  5234                           
  5235                           ; BSR set to: 0
  5236  0015E2  0012               	return	
  5237  0015E4                     l1156:
  5238                           
  5239                           ;tff.c: 536: if (!move_window(dj->sect)) return FR_RW_ERROR;
  5240                           
  5241                           ; BSR set to: 0
  5242                           
  5243                           ;tff.c: 535: for (;;) {
  5244                           
  5245                           ; BSR set to: 0
  5246  0015E4  0100               	movlb	0	; () banked
  5247  0015E6  EE20 F00A          	lfsr	2,10
  5248  0015EA  51C2               	movf	trace_path@dj& (0+255),w,b
  5249  0015EC  26D9               	addwf	fsr2l,f,c
  5250  0015EE  51C3               	movf	(trace_path@dj+1)& (0+255),w,b
  5251  0015F0  22DA               	addwfc	fsr2h,f,c
  5252  0015F2  CFDE F08D          	movff	postinc2,move_window@sector
  5253  0015F6  CFDE F08E          	movff	postinc2,move_window@sector+1
  5254  0015FA  CFDE F08F          	movff	postinc2,move_window@sector+2
  5255  0015FE  CFDE F090          	movff	postinc2,move_window@sector+3
  5256  001602  ECF8  F00E         	call	_move_window	;wreg free
  5257  001606  0900               	iorlw	0
  5258  001608  A4D8               	btfss	status,2,c
  5259  00160A  D002               	goto	l1158
  5260  00160C  0E08               	movlw	8
  5261  00160E  0012               	return	
  5262  001610                     l1158:
  5263                           
  5264                           ;tff.c: 537: dptr = &fs->win[(dj->index & 15) * 32];
  5265  001610  0100               	movlb	0	; () banked
  5266  001612  EE20 F002          	lfsr	2,2
  5267  001616  51C2               	movf	trace_path@dj& (0+255),w,b
  5268  001618  26D9               	addwf	fsr2l,f,c
  5269  00161A  51C3               	movf	(trace_path@dj+1)& (0+255),w,b
  5270  00161C  22DA               	addwfc	fsr2h,f,c
  5271  00161E  CFDE F0CA          	movff	postinc2,??_trace_path
  5272  001622  CFDD F0CB          	movff	postdec2,??_trace_path+1
  5273  001626  0E0F               	movlw	15
  5274  001628  17CA               	andwf	??_trace_path& (0+255),f,b
  5275  00162A  0E00               	movlw	0
  5276  00162C  17CB               	andwf	(??_trace_path+1)& (0+255),f,b
  5277  00162E  0E05               	movlw	5
  5278  001630                     u13625:
  5279  001630  90D8               	bcf	status,0,c
  5280  001632  37CA               	rlcf	??_trace_path& (0+255),f,b
  5281  001634  37CB               	rlcf	(??_trace_path+1)& (0+255),f,b
  5282  001636  2EE8               	decfsz	wreg,f,c
  5283  001638  D7FB               	goto	u13625
  5284  00163A  0E20               	movlw	32
  5285  00163C  27CA               	addwf	??_trace_path& (0+255),f,b
  5286  00163E  0E00               	movlw	0
  5287  001640  23CB               	addwfc	(??_trace_path+1)& (0+255),f,b
  5288  001642  51CA               	movf	??_trace_path& (0+255),w,b
  5289  001644  25D2               	addwf	trace_path@fs& (0+255),w,b
  5290  001646  6FD7               	movwf	trace_path@dptr& (0+255),b
  5291  001648  51CB               	movf	(??_trace_path+1)& (0+255),w,b
  5292  00164A  21D3               	addwfc	(trace_path@fs+1)& (0+255),w,b
  5293  00164C  6FD8               	movwf	(trace_path@dptr+1)& (0+255),b
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;tff.c: 538: if (dptr[0] == 0)
  5297  00164E  C0D7  FFD9         	movff	trace_path@dptr,fsr2l
  5298  001652  C0D8  FFDA         	movff	trace_path@dptr+1,fsr2h
  5299  001656  50DF               	movf	indf2,w,c
  5300  001658  A4D8               	btfss	status,2,c
  5301  00165A  D00D               	goto	l1159
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;tff.c: 539: return !ds ? FR_NO_FILE : FR_NO_PATH;
  5305  00165C  51D6               	movf	trace_path@ds& (0+255),w,b
  5306  00165E  B4D8               	btfsc	status,2,c
  5307  001660  D004               	goto	l1161
  5308                           
  5309                           ; BSR set to: 0
  5310  001662  0E00               	movlw	0
  5311  001664  6FCF               	movwf	(_trace_path$2557+1)& (0+255),b
  5312  001666  0E03               	movlw	3
  5313  001668  D003               	goto	L1
  5314  00166A                     l1161:
  5315                           
  5316                           ; BSR set to: 0
  5317                           
  5318                           ; BSR set to: 0
  5319  00166A  0E00               	movlw	0
  5320  00166C  6FCF               	movwf	(_trace_path$2557+1)& (0+255),b
  5321  00166E  0E02               	movlw	2
  5322  001670                     L1:
  5323  001670  6FCE               	movwf	_trace_path$2557& (0+255),b
  5324                           
  5325                           ; BSR set to: 0
  5326  001672  51CE               	movf	_trace_path$2557& (0+255),w,b
  5327                           
  5328                           ; BSR set to: 0
  5329  001674  0012               	return	
  5330  001676                     l1159:
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;tff.c: 540: if (dptr[0] != 0xE5
  5334                           ;tff.c: 541: && !(dptr[11] & 0x08)
  5335                           ;tff.c: 542: && !memcmp(&dptr[0], fn, 8+3) ) break;
  5336                           
  5337                           ; BSR set to: 0
  5338  001676  C0D7  FFD9         	movff	trace_path@dptr,fsr2l
  5339  00167A  C0D8  FFDA         	movff	trace_path@dptr+1,fsr2h
  5340  00167E  0EE5               	movlw	229
  5341  001680  18DE               	xorwf	postinc2,w,c
  5342  001682  B4D8               	btfsc	status,2,c
  5343  001684  D01A               	goto	l1164
  5344                           
  5345                           ; BSR set to: 0
  5346  001686  EE20 F00B          	lfsr	2,11
  5347  00168A  51D7               	movf	trace_path@dptr& (0+255),w,b
  5348  00168C  26D9               	addwf	fsr2l,f,c
  5349  00168E  51D8               	movf	(trace_path@dptr+1)& (0+255),w,b
  5350  001690  22DA               	addwfc	fsr2h,f,c
  5351  001692  B6DF               	btfsc	indf2,3,c
  5352  001694  D012               	goto	l1164
  5353                           
  5354                           ; BSR set to: 0
  5355  001696  C0D7  F01A         	movff	trace_path@dptr,memcmp@s1
  5356  00169A  C0D8  F01B         	movff	trace_path@dptr+1,memcmp@s1+1
  5357  00169E  C0C4  F01C         	movff	trace_path@fn,memcmp@s2
  5358  0016A2  C0C5  F01D         	movff	trace_path@fn+1,memcmp@s2+1
  5359  0016A6  0E00               	movlw	0
  5360  0016A8  6E1F               	movwf	memcmp@n+1,c
  5361  0016AA  0E0B               	movlw	11
  5362  0016AC  6E1E               	movwf	memcmp@n,c
  5363  0016AE  EC49  F017         	call	_memcmp	;wreg free
  5364  0016B2  501A               	movf	?_memcmp,w,c
  5365  0016B4  101B               	iorwf	?_memcmp+1,w,c
  5366  0016B6  B4D8               	btfsc	status,2,c
  5367  0016B8  D017               	goto	l1165
  5368  0016BA                     l1164:
  5369                           
  5370                           ;tff.c: 543: if (!next_dir_entry(dj))
  5371  0016BA  C0C2  F0B5         	movff	trace_path@dj,next_dir_entry@dj
  5372  0016BE  C0C3  F0B6         	movff	trace_path@dj+1,next_dir_entry@dj+1
  5373  0016C2  ECA9  F010         	call	_next_dir_entry	;wreg free
  5374  0016C6  0900               	iorlw	0
  5375  0016C8  A4D8               	btfss	status,2,c
  5376  0016CA  D78C               	goto	l1156
  5377                           
  5378                           ;tff.c: 544: return !ds ? FR_NO_FILE : FR_NO_PATH;
  5379  0016CC  0100               	movlb	0	; () banked
  5380  0016CE  51D6               	movf	trace_path@ds& (0+255),w,b
  5381  0016D0  B4D8               	btfsc	status,2,c
  5382  0016D2  D004               	goto	l1168
  5383                           
  5384                           ; BSR set to: 0
  5385  0016D4  0E00               	movlw	0
  5386  0016D6  6FD1               	movwf	(_trace_path$2559+1)& (0+255),b
  5387  0016D8  0E03               	movlw	3
  5388  0016DA  D003               	goto	L2
  5389  0016DC                     l1168:
  5390                           
  5391                           ; BSR set to: 0
  5392                           
  5393                           ; BSR set to: 0
  5394  0016DC  0E00               	movlw	0
  5395  0016DE  6FD1               	movwf	(_trace_path$2559+1)& (0+255),b
  5396  0016E0  0E02               	movlw	2
  5397  0016E2                     L2:
  5398  0016E2  6FD0               	movwf	_trace_path$2559& (0+255),b
  5399                           
  5400                           ; BSR set to: 0
  5401  0016E4  51D0               	movf	_trace_path$2559& (0+255),w,b
  5402                           
  5403                           ; BSR set to: 0
  5404  0016E6  0012               	return	
  5405  0016E8                     l1165:
  5406                           
  5407                           ;tff.c: 546: if (!ds) { *dir = dptr; return FR_OK; }
  5408                           
  5409                           ; BSR set to: 0
  5410  0016E8  0100               	movlb	0	; () banked
  5411  0016EA  51D6               	movf	trace_path@ds& (0+255),w,b
  5412  0016EC  A4D8               	btfss	status,2,c
  5413  0016EE  D00A               	goto	l1171
  5414                           
  5415                           ; BSR set to: 0
  5416  0016F0  C0C8  FFD9         	movff	trace_path@dir,fsr2l
  5417  0016F4  C0C9  FFDA         	movff	trace_path@dir+1,fsr2h
  5418  0016F8  C0D7  FFDE         	movff	trace_path@dptr,postinc2
  5419  0016FC  C0D8  FFDD         	movff	trace_path@dptr+1,postdec2
  5420                           
  5421                           ; BSR set to: 0
  5422  001700  0E00               	movlw	0
  5423                           
  5424                           ; BSR set to: 0
  5425  001702  0012               	return	
  5426  001704                     l1171:
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;tff.c: 547: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
  5430                           
  5431                           ; BSR set to: 0
  5432  001704  EE20 F00B          	lfsr	2,11
  5433  001708  51D7               	movf	trace_path@dptr& (0+255),w,b
  5434  00170A  26D9               	addwf	fsr2l,f,c
  5435  00170C  51D8               	movf	(trace_path@dptr+1)& (0+255),w,b
  5436  00170E  22DA               	addwfc	fsr2h,f,c
  5437  001710  B8DF               	btfsc	indf2,4,c
  5438  001712  D002               	goto	l1172
  5439                           
  5440                           ; BSR set to: 0
  5441  001714  0E03               	movlw	3
  5442                           
  5443                           ; BSR set to: 0
  5444  001716  0012               	return	
  5445  001718                     l1172:
  5446                           
  5447                           ; BSR set to: 0
  5448                           ;tff.c: 548: clust =
  5449                           ;tff.c: 552: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
  5450                           
  5451                           ; BSR set to: 0
  5452  001718  EE20 F01A          	lfsr	2,26
  5453  00171C  51D7               	movf	trace_path@dptr& (0+255),w,b
  5454  00171E  26D9               	addwf	fsr2l,f,c
  5455  001720  51D8               	movf	(trace_path@dptr+1)& (0+255),w,b
  5456  001722  22DA               	addwfc	fsr2h,f,c
  5457  001724  CFDE F0D4          	movff	postinc2,trace_path@clust
  5458  001728  CFDD F0D5          	movff	postdec2,trace_path@clust+1
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;tff.c: 553: dj->clust = dj->sclust = clust;
  5462  00172C  EE20 F006          	lfsr	2,6
  5463  001730  51C2               	movf	trace_path@dj& (0+255),w,b
  5464  001732  26D9               	addwf	fsr2l,f,c
  5465  001734  51C3               	movf	(trace_path@dj+1)& (0+255),w,b
  5466  001736  22DA               	addwfc	fsr2h,f,c
  5467  001738  C0D4  FFDE         	movff	trace_path@clust,postinc2
  5468  00173C  C0D5  FFDD         	movff	trace_path@clust+1,postdec2
  5469  001740  EE10 F008          	lfsr	1,8
  5470  001744  51C2               	movf	trace_path@dj& (0+255),w,b
  5471  001746  26E1               	addwf	fsr1l,f,c
  5472  001748  51C3               	movf	(trace_path@dj+1)& (0+255),w,b
  5473  00174A  22E2               	addwfc	fsr1h,f,c
  5474  00174C  CFDE FFE6          	movff	postinc2,postinc1
  5475  001750  CFDD FFE5          	movff	postdec2,postdec1
  5476                           
  5477                           ; BSR set to: 0
  5478                           ;tff.c: 554: dj->sect = clust2sect(clust);
  5479  001754  C0D4  F026         	movff	trace_path@clust,clust2sect@clust
  5480  001758  C0D5  F027         	movff	trace_path@clust+1,clust2sect@clust+1
  5481  00175C  ECFA  F015         	call	_clust2sect	;wreg free
  5482  001760  0100               	movlb	0	; () banked
  5483  001762  EE20 F00A          	lfsr	2,10
  5484  001766  51C2               	movf	trace_path@dj& (0+255),w,b
  5485  001768  26D9               	addwf	fsr2l,f,c
  5486  00176A  51C3               	movf	(trace_path@dj+1)& (0+255),w,b
  5487  00176C  22DA               	addwfc	fsr2h,f,c
  5488  00176E  C026  FFDE         	movff	?_clust2sect,postinc2
  5489  001772  C027  FFDE         	movff	?_clust2sect+1,postinc2
  5490  001776  C028  FFDE         	movff	?_clust2sect+2,postinc2
  5491  00177A  C029  FFDE         	movff	?_clust2sect+3,postinc2
  5492                           
  5493                           ; BSR set to: 0
  5494                           ;tff.c: 555: dj->index = 2;
  5495  00177E  EE20 F002          	lfsr	2,2
  5496  001782  51C2               	movf	trace_path@dj& (0+255),w,b
  5497  001784  26D9               	addwf	fsr2l,f,c
  5498  001786  51C3               	movf	(trace_path@dj+1)& (0+255),w,b
  5499  001788  22DA               	addwfc	fsr2h,f,c
  5500  00178A  0E02               	movlw	2
  5501  00178C  6EDE               	movwf	postinc2,c
  5502  00178E  0E00               	movlw	0
  5503  001790  6EDD               	movwf	postdec2,c
  5504                           
  5505                           ;tff.c: 556: }
  5506  001792  D717               	goto	l1153
  5507  001794                     __end_of_trace_path:
  5508                           	opt stack 0
  5509                           tblptru	equ	0xFF8
  5510                           tblptrh	equ	0xFF7
  5511                           tblptrl	equ	0xFF6
  5512                           tablat	equ	0xFF5
  5513                           prodh	equ	0xFF4
  5514                           prodl	equ	0xFF3
  5515                           intcon	equ	0xFF2
  5516                           intcon2	equ	0xFF1
  5517                           intcon3	equ	0xFF0
  5518                           postinc0	equ	0xFEE
  5519                           wreg	equ	0xFE8
  5520                           indf1	equ	0xFE7
  5521                           postinc1	equ	0xFE6
  5522                           postdec1	equ	0xFE5
  5523                           fsr1h	equ	0xFE2
  5524                           fsr1l	equ	0xFE1
  5525                           indf2	equ	0xFDF
  5526                           postinc2	equ	0xFDE
  5527                           postdec2	equ	0xFDD
  5528                           plusw2	equ	0xFDB
  5529                           fsr2h	equ	0xFDA
  5530                           fsr2l	equ	0xFD9
  5531                           status	equ	0xFD8
  5532                           
  5533 ;; *************** function _make_dirfile *****************
  5534 ;; Defined at:
  5535 ;;		line 438 in file "bibliotecas/tff.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;  path            2   33[COMRAM] PTR PTR const unsigned c
  5538 ;;		 -> trace_path@path(2), 
  5539 ;;  dirname         2   35[COMRAM] PTR unsigned char 
  5540 ;;		 -> f_rename@fn(12), f_utime@fn(12), f_chmod@fn(12), f_mkdir@fn(12), 
  5541 ;;		 -> f_unlink@fn(12), f_stat@fn(12), f_opendir@fn(12), f_open@fn(12), 
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;  c               1    6[BANK0 ] unsigned char 
  5544 ;;  n               1    5[BANK0 ] unsigned char 
  5545 ;;  a               1    4[BANK0 ] unsigned char 
  5546 ;;  t               1    3[BANK0 ] unsigned char 
  5547 ;;  b               1    2[BANK0 ] unsigned char 
  5548 ;; Return value:  Size  Location     Type
  5549 ;;                  1    wreg      unsigned char 
  5550 ;; Registers used:
  5551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5552 ;; Tracked objects:
  5553 ;;		On entry : 0/0
  5554 ;;		On exit  : 0/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5557 ;;      Params:         4       0       0       0       0       0       0       0       0
  5558 ;;      Locals:         0       7       0       0       0       0       0       0       0
  5559 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5560 ;;      Totals:         6       7       0       0       0       0       0       0       0
  5561 ;;Total ram usage:       13 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:    3
  5564 ;; This function calls:
  5565 ;;		_memset
  5566 ;; This function is called by:
  5567 ;;		_trace_path
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text17
  5572  0022DA                     __ptext17:
  5573                           	opt stack 0
  5574  0022DA                     _make_dirfile:
  5575                           	opt stack 24
  5576                           
  5577                           ;tff.c: 443: BYTE n, t, c, a, b;
  5578                           ;tff.c: 446: memset(dirname, ' ', 8+3);
  5579                           
  5580                           ;incstack = 0
  5581  0022DA  C024  F01A         	movff	make_dirfile@dirname,memset@p1
  5582  0022DE  C025  F01B         	movff	make_dirfile@dirname+1,memset@p1+1
  5583  0022E2  0E00               	movlw	0
  5584  0022E4  6E1D               	movwf	memset@c+1,c
  5585  0022E6  0E20               	movlw	32
  5586  0022E8  6E1C               	movwf	memset@c,c
  5587  0022EA  0E00               	movlw	0
  5588  0022EC  6E1F               	movwf	memset@n+1,c
  5589  0022EE  0E0B               	movlw	11
  5590  0022F0  6E1E               	movwf	memset@n,c
  5591  0022F2  EC60  F01C         	call	_memset	;wreg free
  5592                           
  5593                           ;tff.c: 447: a = 0; b = 0x18;
  5594  0022F6  0E00               	movlw	0
  5595  0022F8  0100               	movlb	0	; () banked
  5596  0022FA  6F64               	movwf	make_dirfile@a& (0+255),b
  5597                           
  5598                           ; BSR set to: 0
  5599  0022FC  0E18               	movlw	24
  5600  0022FE  6F62               	movwf	make_dirfile@b& (0+255),b
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;tff.c: 448: n = 0; t = 8;
  5604  002300  0E00               	movlw	0
  5605  002302  6F65               	movwf	make_dirfile@n& (0+255),b
  5606                           
  5607                           ; BSR set to: 0
  5608  002304  0E08               	movlw	8
  5609  002306  6F63               	movwf	make_dirfile@t& (0+255),b
  5610  002308                     
  5611                           ; BSR set to: 0
  5612                           ;tff.c: 450: c = *(*path)++;
  5613                           
  5614                           ; BSR set to: 0
  5615  002308  C022  FFD9         	movff	make_dirfile@path,fsr2l
  5616  00230C  C023  FFDA         	movff	make_dirfile@path+1,fsr2h
  5617  002310  CFDF F026          	movff	indf2,??_make_dirfile
  5618  002314  0E01               	movlw	1
  5619  002316  26DE               	addwf	postinc2,f,c
  5620  002318  CFDF F027          	movff	indf2,??_make_dirfile+1
  5621  00231C  0E00               	movlw	0
  5622  00231E  22DD               	addwfc	postdec2,f,c
  5623  002320  C026  FFF6         	movff	??_make_dirfile,tblptrl
  5624  002324  C027  FFF7         	movff	??_make_dirfile+1,tblptrh
  5625  002328                     	if	0	;tblptru may be non-zero
  5626  002328                     	endif
  5627  002328                     	if	0	;tblptru may be non-zero
  5628  002328                     	endif
  5629  002328  0008               	tblrd		*
  5630  00232A  CFF5 F066          	movff	tablat,make_dirfile@c
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;tff.c: 451: if (c == '\0' || c == '/') {
  5634  00232E  5166               	movf	make_dirfile@c& (0+255),w,b
  5635  002330  B4D8               	btfsc	status,2,c
  5636  002332  D004               	goto	u13100
  5637                           
  5638                           ; BSR set to: 0
  5639  002334  0E2F               	movlw	47
  5640  002336  1966               	xorwf	make_dirfile@c& (0+255),w,b
  5641  002338  A4D8               	btfss	status,2,c
  5642  00233A  D013               	goto	l1107
  5643  00233C                     u13100:
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;tff.c: 452: if (n == 0) break;
  5647                           
  5648                           ; BSR set to: 0
  5649  00233C  5165               	movf	make_dirfile@n& (0+255),w,b
  5650  00233E  B4D8               	btfsc	status,2,c
  5651  002340  D08D               	goto	l1111
  5652                           
  5653                           ; BSR set to: 0
  5654                           
  5655                           ; BSR set to: 0
  5656                           
  5657                           ; BSR set to: 0
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;tff.c: 453: dirname[11] = 1 ? (a & b) : 0;
  5661                           
  5662                           ; BSR set to: 0
  5663  002342  5164               	movf	make_dirfile@a& (0+255),w,b
  5664  002344  1562               	andwf	make_dirfile@b& (0+255),w,b
  5665  002346  6E26               	movwf	??_make_dirfile& (0+255),c
  5666  002348  5026               	movf	??_make_dirfile,w,c
  5667  00234A  6F60               	movwf	_make_dirfile$2510& (0+255),b
  5668  00234C  6B61               	clrf	(_make_dirfile$2510+1)& (0+255),b
  5669                           
  5670                           ; BSR set to: 0
  5671                           
  5672                           ; BSR set to: 0
  5673  00234E  EE20 F00B          	lfsr	2,11
  5674  002352  5024               	movf	make_dirfile@dirname,w,c
  5675  002354  26D9               	addwf	fsr2l,f,c
  5676  002356  5025               	movf	make_dirfile@dirname+1,w,c
  5677  002358  22DA               	addwfc	fsr2h,f,c
  5678  00235A  C060  FFDF         	movff	_make_dirfile$2510,indf2
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;tff.c: 454: return c;
  5682  00235E  5166               	movf	make_dirfile@c& (0+255),w,b
  5683                           
  5684                           ; BSR set to: 0
  5685  002360  0012               	return	
  5686  002362                     l1107:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;tff.c: 455: }
  5690                           ;tff.c: 456: if (c <= ' ' || c == 0x7F) break;
  5691                           
  5692                           ; BSR set to: 0
  5693  002362  0E20               	movlw	32
  5694  002364  6566               	cpfsgt	make_dirfile@c& (0+255),b
  5695  002366  D07A               	goto	l1111
  5696                           
  5697                           ; BSR set to: 0
  5698  002368  0E7F               	movlw	127
  5699  00236A  1966               	xorwf	make_dirfile@c& (0+255),w,b
  5700  00236C  B4D8               	btfsc	status,2,c
  5701  00236E  D076               	goto	l1111
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;tff.c: 457: if (c == '.') {
  5705                           
  5706                           ; BSR set to: 0
  5707                           
  5708                           ; BSR set to: 0
  5709  002370  0E2E               	movlw	46
  5710  002372  1966               	xorwf	make_dirfile@c& (0+255),w,b
  5711  002374  A4D8               	btfss	status,2,c
  5712  002376  D00C               	goto	l1120
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;tff.c: 458: if (!(a & 1) && n >= 1 && n <= 8) {
  5716  002378  B164               	btfsc	make_dirfile@a& (0+255),0,b
  5717  00237A  D070               	goto	l1111
  5718                           
  5719                           ; BSR set to: 0
  5720  00237C  5165               	movf	make_dirfile@n& (0+255),w,b
  5721  00237E  B4D8               	btfsc	status,2,c
  5722  002380  D06D               	goto	l1111
  5723                           
  5724                           ; BSR set to: 0
  5725  002382  0E09               	movlw	9
  5726  002384  6165               	cpfslt	make_dirfile@n& (0+255),b
  5727  002386  D06A               	goto	l1111
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;tff.c: 459: n = 8; t = 11; continue;
  5731  002388  0E08               	movlw	8
  5732  00238A  6F65               	movwf	make_dirfile@n& (0+255),b
  5733  00238C  0E0B               	movlw	11
  5734  00238E  D7BB               	goto	L3
  5735  002390                     l1120:
  5736                           
  5737                           ; BSR set to: 0
  5738                           
  5739                           ; BSR set to: 0
  5740  002390  0E80               	movlw	128
  5741  002392  6566               	cpfsgt	make_dirfile@c& (0+255),b
  5742  002394  D003               	goto	u13190
  5743                           
  5744                           ; BSR set to: 0
  5745  002396  0E9F               	movlw	159
  5746  002398  6566               	cpfsgt	make_dirfile@c& (0+255),b
  5747  00239A  D006               	goto	u13210
  5748  00239C                     u13190:
  5749                           
  5750                           ; BSR set to: 0
  5751                           
  5752                           ; BSR set to: 0
  5753  00239C  0EDF               	movlw	223
  5754  00239E  6566               	cpfsgt	make_dirfile@c& (0+255),b
  5755  0023A0  D00F               	goto	l1123
  5756                           
  5757                           ; BSR set to: 0
  5758  0023A2  0EFD               	movlw	253
  5759  0023A4  6166               	cpfslt	make_dirfile@c& (0+255),b
  5760  0023A6  D00C               	goto	l1123
  5761  0023A8                     u13210:
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;tff.c: 466: if (n == 0 && c == 0xE5)
  5765                           
  5766                           ; BSR set to: 0
  5767  0023A8  5165               	movf	make_dirfile@n& (0+255),w,b
  5768  0023AA  A4D8               	btfss	status,2,c
  5769  0023AC  D006               	goto	l1128
  5770                           
  5771                           ; BSR set to: 0
  5772  0023AE  0EE5               	movlw	229
  5773  0023B0  1966               	xorwf	make_dirfile@c& (0+255),w,b
  5774  0023B2  A4D8               	btfss	status,2,c
  5775  0023B4  D002               	goto	l1128
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;tff.c: 467: c = 0x05;
  5779  0023B6  0E05               	movlw	5
  5780  0023B8  6F66               	movwf	make_dirfile@c& (0+255),b
  5781  0023BA                     l1128:
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;tff.c: 468: a ^= 1; goto md_l2;
  5785                           
  5786                           ; BSR set to: 0
  5787  0023BA  0E01               	movlw	1
  5788  0023BC  1B64               	xorwf	make_dirfile@a& (0+255),f,b
  5789  0023BE  D03E               	goto	l1129
  5790  0023C0                     l1123:
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;tff.c: 469: }
  5794                           ;tff.c: 470: if (c == '"') break;
  5795                           
  5796                           ; BSR set to: 0
  5797  0023C0  0E22               	movlw	34
  5798  0023C2  1966               	xorwf	make_dirfile@c& (0+255),w,b
  5799  0023C4  B4D8               	btfsc	status,2,c
  5800  0023C6  D04A               	goto	l1111
  5801                           
  5802                           ; BSR set to: 0
  5803                           ;tff.c: 471: if (c <= ')') goto md_l1;
  5804                           
  5805                           ; BSR set to: 0
  5806                           
  5807                           ; BSR set to: 0
  5808  0023C8  0E2A               	movlw	42
  5809  0023CA  6166               	cpfslt	make_dirfile@c& (0+255),b
  5810  0023CC  D001               	goto	l1131
  5811  0023CE  D035               	goto	l1149
  5812  0023D0                     l1131:
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;tff.c: 472: if (c <= ',') break;
  5816                           
  5817                           ; BSR set to: 0
  5818  0023D0  0E2D               	movlw	45
  5819  0023D2  6166               	cpfslt	make_dirfile@c& (0+255),b
  5820  0023D4  D001               	goto	l1133
  5821  0023D6  D042               	goto	l1111
  5822  0023D8                     l1133:
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;tff.c: 473: if (c <= '9') goto md_l1;
  5826                           
  5827                           ; BSR set to: 0
  5828  0023D8  0E3A               	movlw	58
  5829  0023DA  6166               	cpfslt	make_dirfile@c& (0+255),b
  5830  0023DC  D001               	goto	l1134
  5831  0023DE  D02D               	goto	l1149
  5832  0023E0                     l1134:
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;tff.c: 474: if (c <= '?') break;
  5836                           
  5837                           ; BSR set to: 0
  5838  0023E0  0E40               	movlw	64
  5839  0023E2  6166               	cpfslt	make_dirfile@c& (0+255),b
  5840  0023E4  D001               	goto	l1135
  5841  0023E6  D03A               	goto	l1111
  5842  0023E8                     l1135:
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;tff.c: 475: if (!(a & 1)) {
  5846  0023E8  B164               	btfsc	make_dirfile@a& (0+255),0,b
  5847  0023EA  D027               	goto	l1149
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;tff.c: 476: if (c == '|') break;
  5851  0023EC  0E7C               	movlw	124
  5852  0023EE  1966               	xorwf	make_dirfile@c& (0+255),w,b
  5853  0023F0  B4D8               	btfsc	status,2,c
  5854  0023F2  D034               	goto	l1111
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;tff.c: 477: if (c >= '[' && c <= ']') break;
  5858                           
  5859                           ; BSR set to: 0
  5860                           
  5861                           ; BSR set to: 0
  5862  0023F4  0E5A               	movlw	90
  5863  0023F6  6566               	cpfsgt	make_dirfile@c& (0+255),b
  5864  0023F8  D004               	goto	l1138
  5865                           
  5866                           ; BSR set to: 0
  5867  0023FA  0E5E               	movlw	94
  5868  0023FC  6166               	cpfslt	make_dirfile@c& (0+255),b
  5869  0023FE  D001               	goto	l1138
  5870  002400  D02D               	goto	l1111
  5871  002402                     l1138:
  5872                           
  5873                           ; BSR set to: 0
  5874                           
  5875                           ; BSR set to: 0
  5876  002402  0E40               	movlw	64
  5877  002404  6566               	cpfsgt	make_dirfile@c& (0+255),b
  5878  002406  D00A               	goto	l1143
  5879                           
  5880                           ; BSR set to: 0
  5881  002408  0E5B               	movlw	91
  5882  00240A  6166               	cpfslt	make_dirfile@c& (0+255),b
  5883  00240C  D007               	goto	l1143
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;tff.c: 479: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
  5887  00240E  0E08               	movlw	8
  5888  002410  1963               	xorwf	make_dirfile@t& (0+255),w,b
  5889  002412  A4D8               	btfss	status,2,c
  5890  002414  D002               	goto	l1141
  5891                           
  5892                           ; BSR set to: 0
  5893  002416  9762               	bcf	make_dirfile@b& (0+255),3,b
  5894  002418  D001               	goto	l1143
  5895  00241A                     l1141:
  5896                           
  5897                           ; BSR set to: 0
  5898                           
  5899                           ; BSR set to: 0
  5900  00241A  9962               	bcf	make_dirfile@b& (0+255),4,b
  5901  00241C                     l1143:
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;tff.c: 480: if (c >= 'a' && c <= 'z') {
  5905                           
  5906                           ; BSR set to: 0
  5907                           
  5908                           ; BSR set to: 0
  5909  00241C  0E60               	movlw	96
  5910  00241E  6566               	cpfsgt	make_dirfile@c& (0+255),b
  5911  002420  D00C               	goto	l1149
  5912                           
  5913                           ; BSR set to: 0
  5914  002422  0E7B               	movlw	123
  5915  002424  6166               	cpfslt	make_dirfile@c& (0+255),b
  5916  002426  D009               	goto	l1149
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;tff.c: 482: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
  5920  002428  0E20               	movlw	32
  5921  00242A  5F66               	subwf	make_dirfile@c& (0+255),f,b
  5922  00242C  0E08               	movlw	8
  5923  00242E  1963               	xorwf	make_dirfile@t& (0+255),w,b
  5924  002430  A4D8               	btfss	status,2,c
  5925  002432  D002               	goto	l1147
  5926                           
  5927                           ; BSR set to: 0
  5928  002434  8764               	bsf	make_dirfile@a& (0+255),3,b
  5929  002436  D001               	goto	l1149
  5930  002438                     l1147:
  5931                           
  5932                           ; BSR set to: 0
  5933                           
  5934                           ; BSR set to: 0
  5935  002438  8964               	bsf	make_dirfile@a& (0+255),4,b
  5936  00243A                     l1149:
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;tff.c: 486: a &= 0xFE;
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;tff.c: 483: }
  5943                           ;tff.c: 484: }
  5944                           ;tff.c: 485: md_l1:
  5945                           
  5946                           ; BSR set to: 0
  5947                           
  5948                           ; BSR set to: 0
  5949                           
  5950                           ; BSR set to: 0
  5951  00243A  9164               	bcf	make_dirfile@a& (0+255),0,b
  5952  00243C                     l1129:
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;tff.c: 488: if (n >= t) break;
  5956                           
  5957                           ; BSR set to: 0
  5958  00243C  5163               	movf	make_dirfile@t& (0+255),w,b
  5959  00243E  5D65               	subwf	make_dirfile@n& (0+255),w,b
  5960  002440  B0D8               	btfsc	status,0,c
  5961  002442  D00C               	goto	l1111
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;tff.c: 489: dirname[n++] = c;
  5965                           
  5966                           ; BSR set to: 0
  5967                           
  5968                           ; BSR set to: 0
  5969  002444  5165               	movf	make_dirfile@n& (0+255),w,b
  5970  002446  0D01               	mullw	1
  5971  002448  50F3               	movf	prodl,w,c
  5972  00244A  2424               	addwf	make_dirfile@dirname,w,c
  5973  00244C  6ED9               	movwf	fsr2l,c
  5974  00244E  50F4               	movf	prodh,w,c
  5975  002450  2025               	addwfc	make_dirfile@dirname+1,w,c
  5976  002452  6EDA               	movwf	fsr2h,c
  5977  002454  C066  FFDF         	movff	make_dirfile@c,indf2
  5978                           
  5979                           ; BSR set to: 0
  5980  002458  2B65               	incf	make_dirfile@n& (0+255),f,b
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;tff.c: 490: }
  5984  00245A  D756               	goto	l1106
  5985  00245C                     l1111:
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;tff.c: 491: return 1;
  5989                           
  5990                           ; BSR set to: 0
  5991  00245C  0E01               	movlw	1
  5992  00245E  0012               	return	
  5993  002460                     __end_of_make_dirfile:
  5994                           	opt stack 0
  5995                           tblptru	equ	0xFF8
  5996                           tblptrh	equ	0xFF7
  5997                           tblptrl	equ	0xFF6
  5998                           tablat	equ	0xFF5
  5999                           prodh	equ	0xFF4
  6000                           prodl	equ	0xFF3
  6001                           intcon	equ	0xFF2
  6002                           intcon2	equ	0xFF1
  6003                           intcon3	equ	0xFF0
  6004                           postinc0	equ	0xFEE
  6005                           wreg	equ	0xFE8
  6006                           indf1	equ	0xFE7
  6007                           postinc1	equ	0xFE6
  6008                           postdec1	equ	0xFE5
  6009                           fsr1h	equ	0xFE2
  6010                           fsr1l	equ	0xFE1
  6011                           indf2	equ	0xFDF
  6012                           postinc2	equ	0xFDE
  6013                           postdec2	equ	0xFDD
  6014                           plusw2	equ	0xFDB
  6015                           fsr2h	equ	0xFDA
  6016                           fsr2l	equ	0xFD9
  6017                           status	equ	0xFD8
  6018                           
  6019 ;; *************** function _reserve_direntry *****************
  6020 ;; Defined at:
  6021 ;;		line 567 in file "bibliotecas/tff.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;  dj              2  102[BANK0 ] PTR struct _DIR_E
  6024 ;;		 -> f_rename@dj(14), f_mkdir@dj(14), f_open@dj(14), 
  6025 ;;  dir             2  104[BANK0 ] PTR PTR unsigned char 
  6026 ;;		 -> f_rename@dir_new(2), f_mkdir@dir(2), f_open@dir(2), 
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;  sector          4  108[BANK0 ] unsigned long 
  6029 ;;  fs              2  118[BANK0 ] PTR struct _FATFS
  6030 ;;		 -> NULL(0), fs(544), 
  6031 ;;  clust           2  116[BANK0 ] unsigned short 
  6032 ;;  dptr            2  113[BANK0 ] PTR unsigned char 
  6033 ;;		 -> fs.win(512), NULL(0), fs(544), 
  6034 ;;  c               1  115[BANK0 ] unsigned char 
  6035 ;;  n               1  112[BANK0 ] unsigned char 
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      enum E155
  6038 ;; Registers used:
  6039 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6045 ;;      Params:         0       4       0       0       0       0       0       0       0
  6046 ;;      Locals:         0      12       0       0       0       0       0       0       0
  6047 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6048 ;;      Totals:         0      18       0       0       0       0       0       0       0
  6049 ;;Total ram usage:       18 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:   11
  6052 ;; This function calls:
  6053 ;;		_clust2sect
  6054 ;;		_create_chain
  6055 ;;		_disk_write
  6056 ;;		_memset
  6057 ;;		_move_window
  6058 ;;		_next_dir_entry
  6059 ;; This function is called by:
  6060 ;;		_f_open
  6061 ;;		_f_mkdir
  6062 ;;		_f_rename
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           	psect	text18
  6067  001264                     __ptext18:
  6068                           	opt stack 0
  6069  001264                     _reserve_direntry:
  6070                           	opt stack 17
  6071                           
  6072                           ;tff.c: 572: CLUST clust;
  6073                           ;tff.c: 573: DWORD sector;
  6074                           ;tff.c: 574: BYTE c, n, *dptr;
  6075                           ;tff.c: 575: FATFS *fs = dj->fs;
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;incstack = 0
  6079  001264  0100               	movlb	0	; () banked
  6080  001266  EE20 F004          	lfsr	2,4
  6081  00126A  51C6               	movf	reserve_direntry@dj& (0+255),w,b
  6082  00126C  26D9               	addwf	fsr2l,f,c
  6083  00126E  51C7               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  6084  001270  22DA               	addwfc	fsr2h,f,c
  6085  001272  CFDE F0D6          	movff	postinc2,reserve_direntry@fs
  6086  001276  CFDD F0D7          	movff	postdec2,reserve_direntry@fs+1
  6087                           
  6088                           ;tff.c: 579: clust = dj->sclust;
  6089  00127A  EE20 F006          	lfsr	2,6
  6090  00127E  51C6               	movf	reserve_direntry@dj& (0+255),w,b
  6091  001280  26D9               	addwf	fsr2l,f,c
  6092  001282  51C7               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  6093  001284  22DA               	addwfc	fsr2h,f,c
  6094  001286  CFDE F0D4          	movff	postinc2,reserve_direntry@clust
  6095  00128A  CFDD F0D5          	movff	postdec2,reserve_direntry@clust+1
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;tff.c: 580: if (clust != 0) {
  6099  00128E  51D4               	movf	reserve_direntry@clust& (0+255),w,b
  6100  001290  11D5               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  6101  001292  B4D8               	btfsc	status,2,c
  6102  001294  D020               	goto	l1176
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;tff.c: 581: dj->clust = clust;
  6106  001296  EE20 F008          	lfsr	2,8
  6107  00129A  51C6               	movf	reserve_direntry@dj& (0+255),w,b
  6108  00129C  26D9               	addwf	fsr2l,f,c
  6109  00129E  51C7               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  6110  0012A0  22DA               	addwfc	fsr2h,f,c
  6111  0012A2  C0D4  FFDE         	movff	reserve_direntry@clust,postinc2
  6112  0012A6  C0D5  FFDD         	movff	reserve_direntry@clust+1,postdec2
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;tff.c: 582: dj->sect = clust2sect(clust);
  6116  0012AA  C0D4  F026         	movff	reserve_direntry@clust,clust2sect@clust
  6117  0012AE  C0D5  F027         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  6118  0012B2  ECFA  F015         	call	_clust2sect	;wreg free
  6119  0012B6  0100               	movlb	0	; () banked
  6120  0012B8  EE20 F00A          	lfsr	2,10
  6121  0012BC  51C6               	movf	reserve_direntry@dj& (0+255),w,b
  6122  0012BE  26D9               	addwf	fsr2l,f,c
  6123  0012C0  51C7               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  6124  0012C2  22DA               	addwfc	fsr2h,f,c
  6125  0012C4  C026  FFDE         	movff	?_clust2sect,postinc2
  6126  0012C8  C027  FFDE         	movff	?_clust2sect+1,postinc2
  6127  0012CC  C028  FFDE         	movff	?_clust2sect+2,postinc2
  6128  0012D0  C029  FFDE         	movff	?_clust2sect+3,postinc2
  6129                           
  6130                           ;tff.c: 583: } else {
  6131  0012D4  D014               	goto	l1177
  6132  0012D6                     l1176:
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;tff.c: 584: dj->sect = fs->dirbase;
  6136                           
  6137                           ; BSR set to: 0
  6138  0012D6  EE20 F00C          	lfsr	2,12
  6139  0012DA  51D6               	movf	reserve_direntry@fs& (0+255),w,b
  6140  0012DC  26D9               	addwf	fsr2l,f,c
  6141  0012DE  51D7               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  6142  0012E0  22DA               	addwfc	fsr2h,f,c
  6143  0012E2  EE10 F00A          	lfsr	1,10
  6144  0012E6  51C6               	movf	reserve_direntry@dj& (0+255),w,b
  6145  0012E8  26E1               	addwf	fsr1l,f,c
  6146  0012EA  51C7               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  6147  0012EC  22E2               	addwfc	fsr1h,f,c
  6148  0012EE  CFDE FFE6          	movff	postinc2,postinc1
  6149  0012F2  CFDE FFE6          	movff	postinc2,postinc1
  6150  0012F6  CFDE FFE6          	movff	postinc2,postinc1
  6151  0012FA  CFDE FFE6          	movff	postinc2,postinc1
  6152  0012FE                     l1177:
  6153                           
  6154                           ; BSR set to: 0
  6155                           ;tff.c: 585: }
  6156                           ;tff.c: 586: dj->index = 0;
  6157                           
  6158                           ; BSR set to: 0
  6159  0012FE  EE20 F002          	lfsr	2,2
  6160  001302  51C6               	movf	reserve_direntry@dj& (0+255),w,b
  6161  001304  26D9               	addwf	fsr2l,f,c
  6162  001306  51C7               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  6163  001308  22DA               	addwfc	fsr2h,f,c
  6164  00130A  0E00               	movlw	0
  6165  00130C  6EDE               	movwf	postinc2,c
  6166  00130E  0E00               	movlw	0
  6167  001310  6EDD               	movwf	postdec2,c
  6168  001312                     
  6169                           ;tff.c: 589: if (!move_window(dj->sect)) return FR_RW_ERROR;
  6170                           
  6171                           ; BSR set to: 0
  6172  001312  0100               	movlb	0	; () banked
  6173  001314  EE20 F00A          	lfsr	2,10
  6174  001318  51C6               	movf	reserve_direntry@dj& (0+255),w,b
  6175  00131A  26D9               	addwf	fsr2l,f,c
  6176  00131C  51C7               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  6177  00131E  22DA               	addwfc	fsr2h,f,c
  6178  001320  CFDE F08D          	movff	postinc2,move_window@sector
  6179  001324  CFDE F08E          	movff	postinc2,move_window@sector+1
  6180  001328  CFDE F08F          	movff	postinc2,move_window@sector+2
  6181  00132C  CFDE F090          	movff	postinc2,move_window@sector+3
  6182  001330  ECF8  F00E         	call	_move_window	;wreg free
  6183  001334  0900               	iorlw	0
  6184  001336  A4D8               	btfss	status,2,c
  6185  001338  D002               	goto	l1179
  6186  00133A  0E08               	movlw	8
  6187  00133C  0012               	return	
  6188  00133E                     l1179:
  6189                           
  6190                           ;tff.c: 590: dptr = &fs->win[(dj->index & 15) * 32];
  6191  00133E  0100               	movlb	0	; () banked
  6192  001340  EE20 F002          	lfsr	2,2
  6193  001344  51C6               	movf	reserve_direntry@dj& (0+255),w,b
  6194  001346  26D9               	addwf	fsr2l,f,c
  6195  001348  51C7               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  6196  00134A  22DA               	addwfc	fsr2h,f,c
  6197  00134C  CFDE F0CA          	movff	postinc2,??_reserve_direntry
  6198  001350  CFDD F0CB          	movff	postdec2,??_reserve_direntry+1
  6199  001354  0E0F               	movlw	15
  6200  001356  17CA               	andwf	??_reserve_direntry& (0+255),f,b
  6201  001358  0E00               	movlw	0
  6202  00135A  17CB               	andwf	(??_reserve_direntry+1)& (0+255),f,b
  6203  00135C  0E05               	movlw	5
  6204  00135E                     u13745:
  6205  00135E  90D8               	bcf	status,0,c
  6206  001360  37CA               	rlcf	??_reserve_direntry& (0+255),f,b
  6207  001362  37CB               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
  6208  001364  2EE8               	decfsz	wreg,f,c
  6209  001366  D7FB               	goto	u13745
  6210  001368  0E20               	movlw	32
  6211  00136A  27CA               	addwf	??_reserve_direntry& (0+255),f,b
  6212  00136C  0E00               	movlw	0
  6213  00136E  23CB               	addwfc	(??_reserve_direntry+1)& (0+255),f,b
  6214  001370  51CA               	movf	??_reserve_direntry& (0+255),w,b
  6215  001372  25D6               	addwf	reserve_direntry@fs& (0+255),w,b
  6216  001374  6FD1               	movwf	reserve_direntry@dptr& (0+255),b
  6217  001376  51CB               	movf	(??_reserve_direntry+1)& (0+255),w,b
  6218  001378  21D7               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  6219  00137A  6FD2               	movwf	(reserve_direntry@dptr+1)& (0+255),b
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;tff.c: 591: c = dptr[0];
  6223  00137C  C0D1  FFD9         	movff	reserve_direntry@dptr,fsr2l
  6224  001380  C0D2  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
  6225  001384  50DF               	movf	indf2,w,c
  6226  001386  6FD3               	movwf	reserve_direntry@c& (0+255),b
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;tff.c: 592: if (c == 0 || c == 0xE5) {
  6230  001388  51D3               	movf	reserve_direntry@c& (0+255),w,b
  6231  00138A  B4D8               	btfsc	status,2,c
  6232  00138C  D004               	goto	u13760
  6233                           
  6234                           ; BSR set to: 0
  6235  00138E  0EE5               	movlw	229
  6236  001390  19D3               	xorwf	reserve_direntry@c& (0+255),w,b
  6237  001392  A4D8               	btfss	status,2,c
  6238  001394  D00A               	goto	l1181
  6239  001396                     u13760:
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;tff.c: 593: *dir = dptr; return FR_OK;
  6243                           
  6244                           ; BSR set to: 0
  6245  001396  C0C8  FFD9         	movff	reserve_direntry@dir,fsr2l
  6246  00139A  C0C9  FFDA         	movff	reserve_direntry@dir+1,fsr2h
  6247  00139E  C0D1  FFDE         	movff	reserve_direntry@dptr,postinc2
  6248  0013A2  C0D2  FFDD         	movff	reserve_direntry@dptr+1,postdec2
  6249                           
  6250                           ; BSR set to: 0
  6251  0013A6  0E00               	movlw	0
  6252                           
  6253                           ; BSR set to: 0
  6254  0013A8  0012               	return	
  6255  0013AA                     l1181:
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;tff.c: 594: }
  6259                           ;tff.c: 595: } while (next_dir_entry(dj));
  6260                           
  6261                           ; BSR set to: 0
  6262  0013AA  C0C6  F0B5         	movff	reserve_direntry@dj,next_dir_entry@dj
  6263  0013AE  C0C7  F0B6         	movff	reserve_direntry@dj+1,next_dir_entry@dj+1
  6264  0013B2  ECA9  F010         	call	_next_dir_entry	;wreg free
  6265  0013B6  0900               	iorlw	0
  6266  0013B8  A4D8               	btfss	status,2,c
  6267  0013BA  D7AB               	goto	l1178
  6268                           
  6269                           ;tff.c: 599: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
  6270  0013BC  0100               	movlb	0	; () banked
  6271  0013BE  51D4               	movf	reserve_direntry@clust& (0+255),w,b
  6272  0013C0  11D5               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  6273  0013C2  B4D8               	btfsc	status,2,c
  6274  0013C4  D015               	goto	u13790
  6275                           
  6276                           ; BSR set to: 0
  6277  0013C6  EE20 F008          	lfsr	2,8
  6278  0013CA  51C6               	movf	reserve_direntry@dj& (0+255),w,b
  6279  0013CC  26D9               	addwf	fsr2l,f,c
  6280  0013CE  51C7               	movf	(reserve_direntry@dj+1)& (0+255),w,b
  6281  0013D0  22DA               	addwfc	fsr2h,f,c
  6282  0013D2  CFDE F0B8          	movff	postinc2,create_chain@clust
  6283  0013D6  CFDD F0B9          	movff	postdec2,create_chain@clust+1
  6284  0013DA  EC18  F00E         	call	_create_chain	;wreg free
  6285  0013DE  C0B8  F0D4         	movff	?_create_chain,reserve_direntry@clust
  6286  0013E2  C0B9  F0D5         	movff	?_create_chain+1,reserve_direntry@clust+1
  6287  0013E6  0100               	movlb	0	; () banked
  6288  0013E8  51D4               	movf	reserve_direntry@clust& (0+255),w,b
  6289  0013EA  11D5               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  6290  0013EC  A4D8               	btfss	status,2,c
  6291  0013EE  D002               	goto	l1185
  6292  0013F0                     u13790:
  6293                           
  6294                           ; BSR set to: 0
  6295                           
  6296                           ; BSR set to: 0
  6297  0013F0  0E06               	movlw	6
  6298                           
  6299                           ; BSR set to: 0
  6300  0013F2  0012               	return	
  6301  0013F4                     l1185:
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;tff.c: 600: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
  6305                           
  6306                           ; BSR set to: 0
  6307  0013F4  05D4               	decf	reserve_direntry@clust& (0+255),w,b
  6308  0013F6  11D5               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
  6309  0013F8  B4D8               	btfsc	status,2,c
  6310  0013FA  D00D               	goto	u13810
  6311                           
  6312                           ; BSR set to: 0
  6313  0013FC  0E00               	movlw	0
  6314  0013FE  6F8D               	movwf	move_window@sector& (0+255),b
  6315  001400  0E00               	movlw	0
  6316  001402  6F8E               	movwf	(move_window@sector+1)& (0+255),b
  6317  001404  0E00               	movlw	0
  6318  001406  6F8F               	movwf	(move_window@sector+2)& (0+255),b
  6319  001408  0E00               	movlw	0
  6320  00140A  6F90               	movwf	(move_window@sector+3)& (0+255),b
  6321  00140C  ECF8  F00E         	call	_move_window	;wreg free
  6322  001410  0900               	iorlw	0
  6323  001412  A4D8               	btfss	status,2,c
  6324  001414  D002               	goto	l1188
  6325  001416                     u13810:
  6326  001416  0E08               	movlw	8
  6327  001418  0012               	return	
  6328  00141A                     l1188:
  6329                           
  6330                           ;tff.c: 602: fs->winsect = sector = clust2sect(clust);
  6331  00141A  C0D4  F026         	movff	reserve_direntry@clust,clust2sect@clust
  6332  00141E  C0D5  F027         	movff	reserve_direntry@clust+1,clust2sect@clust+1
  6333  001422  ECFA  F015         	call	_clust2sect	;wreg free
  6334  001426  C026  F0CC         	movff	?_clust2sect,reserve_direntry@sector
  6335  00142A  C027  F0CD         	movff	?_clust2sect+1,reserve_direntry@sector+1
  6336  00142E  C028  F0CE         	movff	?_clust2sect+2,reserve_direntry@sector+2
  6337  001432  C029  F0CF         	movff	?_clust2sect+3,reserve_direntry@sector+3
  6338  001436  0100               	movlb	0	; () banked
  6339  001438  EE20 F004          	lfsr	2,4
  6340  00143C  51D6               	movf	reserve_direntry@fs& (0+255),w,b
  6341  00143E  26D9               	addwf	fsr2l,f,c
  6342  001440  51D7               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  6343  001442  22DA               	addwfc	fsr2h,f,c
  6344  001444  C0CC  FFDE         	movff	reserve_direntry@sector,postinc2
  6345  001448  C0CD  FFDE         	movff	reserve_direntry@sector+1,postinc2
  6346  00144C  C0CE  FFDE         	movff	reserve_direntry@sector+2,postinc2
  6347  001450  C0CF  FFDE         	movff	reserve_direntry@sector+3,postinc2
  6348                           
  6349                           ;tff.c: 603: memset(fs->win, 0, 512U);
  6350  001454  0E20               	movlw	32
  6351  001456  25D6               	addwf	reserve_direntry@fs& (0+255),w,b
  6352  001458  6E1A               	movwf	memset@p1,c
  6353  00145A  0E00               	movlw	0
  6354  00145C  21D7               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  6355  00145E  6E1B               	movwf	memset@p1+1,c
  6356  001460  0E00               	movlw	0
  6357  001462  6E1D               	movwf	memset@c+1,c
  6358  001464  0E00               	movlw	0
  6359  001466  6E1C               	movwf	memset@c,c
  6360  001468  0E02               	movlw	2
  6361  00146A  6E1F               	movwf	memset@n+1,c
  6362  00146C  0E00               	movlw	0
  6363  00146E  6E1E               	movwf	memset@n,c
  6364  001470  EC60  F01C         	call	_memset	;wreg free
  6365                           
  6366                           ;tff.c: 604: for (n = fs->csize; n; n--) {
  6367  001474  0100               	movlb	0	; () banked
  6368  001476  EE20 F01D          	lfsr	2,29
  6369  00147A  51D6               	movf	reserve_direntry@fs& (0+255),w,b
  6370  00147C  26D9               	addwf	fsr2l,f,c
  6371  00147E  51D7               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  6372  001480  22DA               	addwfc	fsr2h,f,c
  6373  001482  50DF               	movf	indf2,w,c
  6374  001484  6FD0               	movwf	reserve_direntry@n& (0+255),b
  6375  001486  D020               	goto	l1191
  6376  001488                     
  6377                           ; BSR set to: 0
  6378                           ;tff.c: 605: if (disk_write(0, fs->win, sector, 1) != RES_OK)
  6379                           
  6380                           ; BSR set to: 0
  6381  001488  0E20               	movlw	32
  6382  00148A  25D6               	addwf	reserve_direntry@fs& (0+255),w,b
  6383  00148C  6F80               	movwf	disk_write@buff& (0+255),b
  6384  00148E  0E00               	movlw	0
  6385  001490  21D7               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  6386  001492  6F81               	movwf	(disk_write@buff+1)& (0+255),b
  6387  001494  C0CC  F082         	movff	reserve_direntry@sector,disk_write@sector
  6388  001498  C0CD  F083         	movff	reserve_direntry@sector+1,disk_write@sector+1
  6389  00149C  C0CE  F084         	movff	reserve_direntry@sector+2,disk_write@sector+2
  6390  0014A0  C0CF  F085         	movff	reserve_direntry@sector+3,disk_write@sector+3
  6391  0014A4  0E01               	movlw	1
  6392  0014A6  6F86               	movwf	disk_write@count& (0+255),b
  6393  0014A8  0E00               	movlw	0
  6394  0014AA  EC22  F018         	call	_disk_write
  6395  0014AE  0900               	iorlw	0
  6396  0014B0  B4D8               	btfsc	status,2,c
  6397  0014B2  D002               	goto	l1193
  6398                           
  6399                           ;tff.c: 606: return FR_RW_ERROR;
  6400  0014B4  0E08               	movlw	8
  6401  0014B6  0012               	return	
  6402  0014B8                     l1193:
  6403                           
  6404                           ;tff.c: 607: sector++;
  6405  0014B8  0E01               	movlw	1
  6406  0014BA  0100               	movlb	0	; () banked
  6407  0014BC  27CC               	addwf	reserve_direntry@sector& (0+255),f,b
  6408  0014BE  0E00               	movlw	0
  6409  0014C0  23CD               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
  6410  0014C2  23CE               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
  6411  0014C4  23CF               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
  6412                           
  6413                           ; BSR set to: 0
  6414  0014C6  07D0               	decf	reserve_direntry@n& (0+255),f,b
  6415  0014C8                     l1191:
  6416                           
  6417                           ; BSR set to: 0
  6418                           
  6419                           ; BSR set to: 0
  6420  0014C8  51D0               	movf	reserve_direntry@n& (0+255),w,b
  6421  0014CA  A4D8               	btfss	status,2,c
  6422  0014CC  D7DD               	goto	l1192
  6423                           
  6424                           ; BSR set to: 0
  6425                           ;tff.c: 608: }
  6426                           ;tff.c: 609: fs->winflag = 1;
  6427                           
  6428                           ; BSR set to: 0
  6429  0014CE  EE20 F01F          	lfsr	2,31
  6430  0014D2  51D6               	movf	reserve_direntry@fs& (0+255),w,b
  6431  0014D4  26D9               	addwf	fsr2l,f,c
  6432  0014D6  51D7               	movf	(reserve_direntry@fs+1)& (0+255),w,b
  6433  0014D8  22DA               	addwfc	fsr2h,f,c
  6434  0014DA  0E01               	movlw	1
  6435  0014DC  6EDF               	movwf	indf2,c
  6436                           
  6437                           ;tff.c: 610: *dir = fs->win;
  6438  0014DE  0E20               	movlw	32
  6439  0014E0  25D6               	addwf	reserve_direntry@fs& (0+255),w,b
  6440  0014E2  6FCA               	movwf	??_reserve_direntry& (0+255),b
  6441  0014E4  0E00               	movlw	0
  6442  0014E6  21D7               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
  6443  0014E8  6FCB               	movwf	(??_reserve_direntry+1)& (0+255),b
  6444  0014EA  C0C8  FFD9         	movff	reserve_direntry@dir,fsr2l
  6445  0014EE  C0C9  FFDA         	movff	reserve_direntry@dir+1,fsr2h
  6446  0014F2  C0CA  FFDE         	movff	??_reserve_direntry,postinc2
  6447  0014F6  C0CB  FFDD         	movff	??_reserve_direntry+1,postdec2
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;tff.c: 611: return FR_OK;
  6451  0014FA  0E00               	movlw	0
  6452  0014FC  0012               	return	
  6453  0014FE                     __end_of_reserve_direntry:
  6454                           	opt stack 0
  6455                           tblptru	equ	0xFF8
  6456                           tblptrh	equ	0xFF7
  6457                           tblptrl	equ	0xFF6
  6458                           tablat	equ	0xFF5
  6459                           prodh	equ	0xFF4
  6460                           prodl	equ	0xFF3
  6461                           intcon	equ	0xFF2
  6462                           intcon2	equ	0xFF1
  6463                           intcon3	equ	0xFF0
  6464                           postinc0	equ	0xFEE
  6465                           wreg	equ	0xFE8
  6466                           indf1	equ	0xFE7
  6467                           postinc1	equ	0xFE6
  6468                           postdec1	equ	0xFE5
  6469                           fsr1h	equ	0xFE2
  6470                           fsr1l	equ	0xFE1
  6471                           indf2	equ	0xFDF
  6472                           postinc2	equ	0xFDE
  6473                           postdec2	equ	0xFDD
  6474                           plusw2	equ	0xFDB
  6475                           fsr2h	equ	0xFDA
  6476                           fsr2l	equ	0xFD9
  6477                           status	equ	0xFD8
  6478                           
  6479 ;; *************** function _next_dir_entry *****************
  6480 ;; Defined at:
  6481 ;;		line 358 in file "bibliotecas/tff.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  dj              2   85[BANK0 ] PTR struct _DIR_E
  6484 ;;		 -> f_rename@dj(14), f_utime@dj(14), f_chmod@dj(14), f_mkdir@dj(14), 
  6485 ;;		 -> f_unlink@dj(14), f_stat@dj(14), f_open@dj(14), 
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;  idx             2   96[BANK0 ] unsigned short 
  6488 ;;  clust           2   94[BANK0 ] unsigned short 
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  1    wreg      enum E105
  6491 ;; Registers used:
  6492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6498 ;;      Params:         0       2       0       0       0       0       0       0       0
  6499 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6500 ;;      Temps:          0       7       0       0       0       0       0       0       0
  6501 ;;      Totals:         0      13       0       0       0       0       0       0       0
  6502 ;;Total ram usage:       13 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:   10
  6505 ;; This function calls:
  6506 ;;		_clust2sect
  6507 ;;		_get_cluster
  6508 ;; This function is called by:
  6509 ;;		_trace_path
  6510 ;;		_reserve_direntry
  6511 ;;		_f_readdir
  6512 ;;		_f_unlink
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text19
  6517  002152                     __ptext19:
  6518                           	opt stack 0
  6519  002152                     _next_dir_entry:
  6520                           	opt stack 17
  6521                           
  6522                           ;tff.c: 362: CLUST clust;
  6523                           ;tff.c: 363: WORD idx;
  6524                           ;tff.c: 366: idx = dj->index + 1;
  6525                           
  6526                           ;incstack = 0
  6527  002152  0100               	movlb	0	; () banked
  6528  002154  EE20 F002          	lfsr	2,2
  6529  002158  51B5               	movf	next_dir_entry@dj& (0+255),w,b
  6530  00215A  26D9               	addwf	fsr2l,f,c
  6531  00215C  51B6               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  6532  00215E  22DA               	addwfc	fsr2h,f,c
  6533  002160  CFDE F0B7          	movff	postinc2,??_next_dir_entry
  6534  002164  CFDD F0B8          	movff	postdec2,??_next_dir_entry+1
  6535  002168  0E01               	movlw	1
  6536  00216A  25B7               	addwf	??_next_dir_entry& (0+255),w,b
  6537  00216C  6FC0               	movwf	next_dir_entry@idx& (0+255),b
  6538  00216E  0E00               	movlw	0
  6539  002170  21B8               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
  6540  002172  6FC1               	movwf	(next_dir_entry@idx+1)& (0+255),b
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;tff.c: 367: if ((idx & 15) == 0) {
  6544  002174  0E0F               	movlw	15
  6545  002176  15C0               	andwf	next_dir_entry@idx& (0+255),w,b
  6546  002178  6FB7               	movwf	??_next_dir_entry& (0+255),b
  6547  00217A  0E00               	movlw	0
  6548  00217C  15C1               	andwf	(next_dir_entry@idx+1)& (0+255),w,b
  6549  00217E  6FB8               	movwf	(??_next_dir_entry+1)& (0+255),b
  6550  002180  51B7               	movf	??_next_dir_entry& (0+255),w,b
  6551  002182  11B8               	iorwf	(??_next_dir_entry+1)& (0+255),w,b
  6552  002184  A4D8               	btfss	status,2,c
  6553  002186  D09D               	goto	l1083
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;tff.c: 368: dj->sect++;
  6557  002188  EE20 F00A          	lfsr	2,10
  6558  00218C  51B5               	movf	next_dir_entry@dj& (0+255),w,b
  6559  00218E  26D9               	addwf	fsr2l,f,c
  6560  002190  51B6               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  6561  002192  22DA               	addwfc	fsr2h,f,c
  6562  002194  2ADE               	incf	postinc2,f,c
  6563  002196  0E00               	movlw	0
  6564  002198  22DE               	addwfc	postinc2,f,c
  6565  00219A  22DE               	addwfc	postinc2,f,c
  6566  00219C  22DE               	addwfc	postinc2,f,c
  6567                           
  6568                           ;tff.c: 369: if (dj->clust == 0) {
  6569  00219E  EE20 F008          	lfsr	2,8
  6570  0021A2  51B5               	movf	next_dir_entry@dj& (0+255),w,b
  6571  0021A4  26D9               	addwf	fsr2l,f,c
  6572  0021A6  51B6               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  6573  0021A8  22DA               	addwfc	fsr2h,f,c
  6574  0021AA  50DE               	movf	postinc2,w,c
  6575  0021AC  10DE               	iorwf	postinc2,w,c
  6576  0021AE  A4D8               	btfss	status,2,c
  6577  0021B0  D014               	goto	l1079
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;tff.c: 370: if (idx >= dj->fs->n_rootdir) return FALSE;
  6581  0021B2  EE20 F004          	lfsr	2,4
  6582  0021B6  51B5               	movf	next_dir_entry@dj& (0+255),w,b
  6583  0021B8  26D9               	addwf	fsr2l,f,c
  6584  0021BA  51B6               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  6585  0021BC  22DA               	addwfc	fsr2h,f,c
  6586  0021BE  EE10 F002          	lfsr	1,2
  6587  0021C2  50DE               	movf	postinc2,w,c
  6588  0021C4  26E1               	addwf	fsr1l,f,c
  6589  0021C6  50DD               	movf	postdec2,w,c
  6590  0021C8  22E2               	addwfc	fsr1h,f,c
  6591  0021CA  50E6               	movf	postinc1,w,c
  6592  0021CC  5DC0               	subwf	next_dir_entry@idx& (0+255),w,b
  6593  0021CE  50E6               	movf	postinc1,w,c
  6594  0021D0  59C1               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
  6595  0021D2  A0D8               	btfss	status,0,c
  6596  0021D4  D076               	goto	l1083
  6597                           
  6598                           ; BSR set to: 0
  6599  0021D6  0E00               	movlw	0
  6600                           
  6601                           ; BSR set to: 0
  6602  0021D8  0012               	return	
  6603  0021DA                     l1079:
  6604                           
  6605                           ; BSR set to: 0
  6606                           ;tff.c: 372: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
  6607                           
  6608                           ; BSR set to: 0
  6609  0021DA  C0C0  F0B7         	movff	next_dir_entry@idx,??_next_dir_entry
  6610  0021DE  C0C1  F0B8         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
  6611  0021E2  0E04               	movlw	4
  6612  0021E4  6FB9               	movwf	(??_next_dir_entry+2)& (0+255),b
  6613  0021E6                     u13055:
  6614  0021E6  90D8               	bcf	status,0,c
  6615  0021E8  33B8               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
  6616  0021EA  33B7               	rrcf	??_next_dir_entry& (0+255),f,b
  6617  0021EC  2FB9               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
  6618  0021EE  D7FB               	goto	u13055
  6619  0021F0  0EFF               	movlw	255
  6620  0021F2  6FBA               	movwf	(??_next_dir_entry+3)& (0+255),b
  6621  0021F4  0EFF               	movlw	255
  6622  0021F6  6FBB               	movwf	(??_next_dir_entry+4)& (0+255),b
  6623  0021F8  EE20 F004          	lfsr	2,4
  6624  0021FC  51B5               	movf	next_dir_entry@dj& (0+255),w,b
  6625  0021FE  26D9               	addwf	fsr2l,f,c
  6626  002200  51B6               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  6627  002202  22DA               	addwfc	fsr2h,f,c
  6628  002204  EE10 F01D          	lfsr	1,29
  6629  002208  50DE               	movf	postinc2,w,c
  6630  00220A  26E1               	addwf	fsr1l,f,c
  6631  00220C  50DD               	movf	postdec2,w,c
  6632  00220E  22E2               	addwfc	fsr1h,f,c
  6633  002210  50E7               	movf	indf1,w,c
  6634  002212  6FBC               	movwf	(??_next_dir_entry+5)& (0+255),b
  6635  002214  6BBD               	clrf	(??_next_dir_entry+6)& (0+255),b
  6636  002216  51BA               	movf	(??_next_dir_entry+3)& (0+255),w,b
  6637  002218  27BC               	addwf	(??_next_dir_entry+5)& (0+255),f,b
  6638  00221A  51BB               	movf	(??_next_dir_entry+4)& (0+255),w,b
  6639  00221C  23BD               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
  6640  00221E  51B7               	movf	??_next_dir_entry& (0+255),w,b
  6641  002220  17BC               	andwf	(??_next_dir_entry+5)& (0+255),f,b
  6642  002222  51B8               	movf	(??_next_dir_entry+1)& (0+255),w,b
  6643  002224  17BD               	andwf	(??_next_dir_entry+6)& (0+255),f,b
  6644  002226  51BC               	movf	(??_next_dir_entry+5)& (0+255),w,b
  6645  002228  11BD               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
  6646  00222A  A4D8               	btfss	status,2,c
  6647  00222C  D04A               	goto	l1083
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;tff.c: 373: clust = get_cluster(dj->clust);
  6651  00222E  EE20 F008          	lfsr	2,8
  6652  002232  51B5               	movf	next_dir_entry@dj& (0+255),w,b
  6653  002234  26D9               	addwf	fsr2l,f,c
  6654  002236  51B6               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  6655  002238  22DA               	addwfc	fsr2h,f,c
  6656  00223A  CFDE F0A2          	movff	postinc2,get_cluster@clust
  6657  00223E  CFDD F0A3          	movff	postdec2,get_cluster@clust+1
  6658  002242  EC07  F00D         	call	_get_cluster	;wreg free
  6659  002246  C0A2  F0BE         	movff	?_get_cluster,next_dir_entry@clust
  6660  00224A  C0A3  F0BF         	movff	?_get_cluster+1,next_dir_entry@clust+1
  6661                           
  6662                           ;tff.c: 374: if (clust < 2 || clust >= dj->fs->max_clust)
  6663  00224E  0100               	movlb	0	; () banked
  6664  002250  51BF               	movf	(next_dir_entry@clust+1)& (0+255),w,b
  6665  002252  E104               	bnz	u13070
  6666  002254  0E02               	movlw	2
  6667  002256  5DBE               	subwf	next_dir_entry@clust& (0+255),w,b
  6668  002258  A0D8               	btfss	status,0,c
  6669  00225A  D012               	goto	u13080
  6670  00225C                     u13070:
  6671                           
  6672                           ; BSR set to: 0
  6673  00225C  EE20 F004          	lfsr	2,4
  6674  002260  51B5               	movf	next_dir_entry@dj& (0+255),w,b
  6675  002262  26D9               	addwf	fsr2l,f,c
  6676  002264  51B6               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  6677  002266  22DA               	addwfc	fsr2h,f,c
  6678  002268  EE10 F016          	lfsr	1,22
  6679  00226C  50DE               	movf	postinc2,w,c
  6680  00226E  26E1               	addwf	fsr1l,f,c
  6681  002270  50DD               	movf	postdec2,w,c
  6682  002272  22E2               	addwfc	fsr1h,f,c
  6683  002274  50E6               	movf	postinc1,w,c
  6684  002276  5DBE               	subwf	next_dir_entry@clust& (0+255),w,b
  6685  002278  50E6               	movf	postinc1,w,c
  6686  00227A  59BF               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
  6687  00227C  A0D8               	btfss	status,0,c
  6688  00227E  D002               	goto	l1084
  6689  002280                     u13080:
  6690                           
  6691                           ; BSR set to: 0
  6692                           ;tff.c: 375: return FALSE;
  6693                           
  6694                           ; BSR set to: 0
  6695  002280  0E00               	movlw	0
  6696                           
  6697                           ; BSR set to: 0
  6698  002282  0012               	return	
  6699  002284                     l1084:
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;tff.c: 376: dj->clust = clust;
  6703                           
  6704                           ; BSR set to: 0
  6705  002284  EE20 F008          	lfsr	2,8
  6706  002288  51B5               	movf	next_dir_entry@dj& (0+255),w,b
  6707  00228A  26D9               	addwf	fsr2l,f,c
  6708  00228C  51B6               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  6709  00228E  22DA               	addwfc	fsr2h,f,c
  6710  002290  C0BE  FFDE         	movff	next_dir_entry@clust,postinc2
  6711  002294  C0BF  FFDD         	movff	next_dir_entry@clust+1,postdec2
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;tff.c: 377: dj->sect = clust2sect(clust);
  6715  002298  C0BE  F026         	movff	next_dir_entry@clust,clust2sect@clust
  6716  00229C  C0BF  F027         	movff	next_dir_entry@clust+1,clust2sect@clust+1
  6717  0022A0  ECFA  F015         	call	_clust2sect	;wreg free
  6718  0022A4  0100               	movlb	0	; () banked
  6719  0022A6  EE20 F00A          	lfsr	2,10
  6720  0022AA  51B5               	movf	next_dir_entry@dj& (0+255),w,b
  6721  0022AC  26D9               	addwf	fsr2l,f,c
  6722  0022AE  51B6               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  6723  0022B0  22DA               	addwfc	fsr2h,f,c
  6724  0022B2  C026  FFDE         	movff	?_clust2sect,postinc2
  6725  0022B6  C027  FFDE         	movff	?_clust2sect+1,postinc2
  6726  0022BA  C028  FFDE         	movff	?_clust2sect+2,postinc2
  6727  0022BE  C029  FFDE         	movff	?_clust2sect+3,postinc2
  6728  0022C2                     l1083:
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;tff.c: 378: }
  6732                           ;tff.c: 379: }
  6733                           ;tff.c: 380: }
  6734                           ;tff.c: 381: dj->index = idx;
  6735                           
  6736                           ; BSR set to: 0
  6737                           
  6738                           ; BSR set to: 0
  6739                           
  6740                           ; BSR set to: 0
  6741  0022C2  EE20 F002          	lfsr	2,2
  6742  0022C6  51B5               	movf	next_dir_entry@dj& (0+255),w,b
  6743  0022C8  26D9               	addwf	fsr2l,f,c
  6744  0022CA  51B6               	movf	(next_dir_entry@dj+1)& (0+255),w,b
  6745  0022CC  22DA               	addwfc	fsr2h,f,c
  6746  0022CE  C0C0  FFDE         	movff	next_dir_entry@idx,postinc2
  6747  0022D2  C0C1  FFDD         	movff	next_dir_entry@idx+1,postdec2
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;tff.c: 382: return TRUE;
  6751  0022D6  0E01               	movlw	1
  6752  0022D8  0012               	return	
  6753  0022DA                     __end_of_next_dir_entry:
  6754                           	opt stack 0
  6755                           tblptru	equ	0xFF8
  6756                           tblptrh	equ	0xFF7
  6757                           tblptrl	equ	0xFF6
  6758                           tablat	equ	0xFF5
  6759                           prodh	equ	0xFF4
  6760                           prodl	equ	0xFF3
  6761                           intcon	equ	0xFF2
  6762                           intcon2	equ	0xFF1
  6763                           intcon3	equ	0xFF0
  6764                           postinc0	equ	0xFEE
  6765                           wreg	equ	0xFE8
  6766                           indf1	equ	0xFE7
  6767                           postinc1	equ	0xFE6
  6768                           postdec1	equ	0xFE5
  6769                           fsr1h	equ	0xFE2
  6770                           fsr1l	equ	0xFE1
  6771                           indf2	equ	0xFDF
  6772                           postinc2	equ	0xFDE
  6773                           postdec2	equ	0xFDD
  6774                           plusw2	equ	0xFDB
  6775                           fsr2h	equ	0xFDA
  6776                           fsr2l	equ	0xFD9
  6777                           status	equ	0xFD8
  6778                           
  6779 ;; *************** function _clust2sect *****************
  6780 ;; Defined at:
  6781 ;;		line 338 in file "bibliotecas/tff.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;  clust           2   37[COMRAM] unsigned short 
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  fs              2   41[COMRAM] PTR struct _FATFS
  6786 ;;		 -> NULL(0), fs(544), 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  4   37[COMRAM] unsigned long 
  6789 ;; Registers used:
  6790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6796 ;;      Params:         4       0       0       0       0       0       0       0       0
  6797 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6798 ;;      Temps:          0       5       0       0       0       0       0       0       0
  6799 ;;      Totals:         6       5       0       0       0       0       0       0       0
  6800 ;;Total ram usage:       11 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    3
  6803 ;; This function calls:
  6804 ;;		___lmul
  6805 ;; This function is called by:
  6806 ;;		_next_dir_entry
  6807 ;;		_trace_path
  6808 ;;		_reserve_direntry
  6809 ;;		_f_write
  6810 ;;		_f_read
  6811 ;;		_f_opendir
  6812 ;;		_f_unlink
  6813 ;;		_f_mkdir
  6814 ;; This function uses a non-reentrant model
  6815 ;;
  6816                           
  6817                           	psect	text20
  6818  002BF4                     __ptext20:
  6819                           	opt stack 0
  6820  002BF4                     _clust2sect:
  6821                           	opt stack 25
  6822                           
  6823                           ;tff.c: 342: FATFS *fs = FatFs;
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;incstack = 0
  6827  002BF4  C0EF  F02A         	movff	_FatFs,clust2sect@fs
  6828  002BF8  C0F0  F02B         	movff	_FatFs+1,clust2sect@fs+1
  6829                           
  6830                           ;tff.c: 345: clust -= 2;
  6831  002BFC  0E02               	movlw	2
  6832  002BFE  5E26               	subwf	clust2sect@clust,f,c
  6833  002C00  0E00               	movlw	0
  6834  002C02  5A27               	subwfb	clust2sect@clust+1,f,c
  6835                           
  6836                           ;tff.c: 346: if (clust >= (fs->max_clust - 2)) return 0;
  6837  002C04  0EFE               	movlw	254
  6838  002C06  0100               	movlb	0	; () banked
  6839  002C08  6F60               	movwf	??_clust2sect& (0+255),b
  6840  002C0A  0EFF               	movlw	255
  6841  002C0C  6F61               	movwf	(??_clust2sect+1)& (0+255),b
  6842  002C0E  EE20 F016          	lfsr	2,22
  6843  002C12  502A               	movf	clust2sect@fs,w,c
  6844  002C14  26D9               	addwf	fsr2l,f,c
  6845  002C16  502B               	movf	clust2sect@fs+1,w,c
  6846  002C18  22DA               	addwfc	fsr2h,f,c
  6847  002C1A  CFDE F062          	movff	postinc2,??_clust2sect+2
  6848  002C1E  CFDD F063          	movff	postdec2,??_clust2sect+3
  6849  002C22  5160               	movf	??_clust2sect& (0+255),w,b
  6850  002C24  2762               	addwf	(??_clust2sect+2)& (0+255),f,b
  6851  002C26  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  6852  002C28  2363               	addwfc	(??_clust2sect+3)& (0+255),f,b
  6853  002C2A  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  6854  002C2C  5C26               	subwf	clust2sect@clust,w,c
  6855  002C2E  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  6856  002C30  5827               	subwfb	clust2sect@clust+1,w,c
  6857  002C32  A0D8               	btfss	status,0,c
  6858  002C34  D009               	goto	l1074
  6859                           
  6860                           ; BSR set to: 0
  6861  002C36  0E00               	movlw	0
  6862  002C38  6E26               	movwf	?_clust2sect,c
  6863  002C3A  0E00               	movlw	0
  6864  002C3C  6E27               	movwf	?_clust2sect+1,c
  6865  002C3E  0E00               	movlw	0
  6866  002C40  6E28               	movwf	?_clust2sect+2,c
  6867  002C42  0E00               	movlw	0
  6868  002C44  6E29               	movwf	?_clust2sect+3,c
  6869                           
  6870                           ; BSR set to: 0
  6871  002C46  0012               	return	
  6872  002C48                     l1074:
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;tff.c: 347: return (DWORD)clust * fs->csize + fs->database;
  6876                           
  6877                           ; BSR set to: 0
  6878  002C48  EE20 F010          	lfsr	2,16
  6879  002C4C  502A               	movf	clust2sect@fs,w,c
  6880  002C4E  26D9               	addwf	fsr2l,f,c
  6881  002C50  502B               	movf	clust2sect@fs+1,w,c
  6882  002C52  22DA               	addwfc	fsr2h,f,c
  6883  002C54  CFDE F060          	movff	postinc2,??_clust2sect
  6884  002C58  CFDE F061          	movff	postinc2,??_clust2sect+1
  6885  002C5C  CFDE F062          	movff	postinc2,??_clust2sect+2
  6886  002C60  CFDE F063          	movff	postinc2,??_clust2sect+3
  6887  002C64  C026  F01A         	movff	clust2sect@clust,___lmul@multiplier
  6888  002C68  C027  F01B         	movff	clust2sect@clust+1,___lmul@multiplier+1
  6889  002C6C  6A1C               	clrf	___lmul@multiplier+2,c
  6890  002C6E  6A1D               	clrf	___lmul@multiplier+3,c
  6891  002C70  EE20 F01D          	lfsr	2,29
  6892  002C74  502A               	movf	clust2sect@fs,w,c
  6893  002C76  26D9               	addwf	fsr2l,f,c
  6894  002C78  502B               	movf	clust2sect@fs+1,w,c
  6895  002C7A  22DA               	addwfc	fsr2h,f,c
  6896  002C7C  50DF               	movf	indf2,w,c
  6897  002C7E  6F64               	movwf	(??_clust2sect+4)& (0+255),b
  6898  002C80  5164               	movf	(??_clust2sect+4)& (0+255),w,b
  6899  002C82  6E1E               	movwf	___lmul@multiplicand,c
  6900  002C84  6A1F               	clrf	___lmul@multiplicand+1,c
  6901  002C86  6A20               	clrf	___lmul@multiplicand+2,c
  6902  002C88  6A21               	clrf	___lmul@multiplicand+3,c
  6903  002C8A  EC88  F01A         	call	___lmul	;wreg free
  6904  002C8E  0100               	movlb	0	; () banked
  6905  002C90  5160               	movf	??_clust2sect& (0+255),w,b
  6906  002C92  241A               	addwf	?___lmul,w,c
  6907  002C94  6E26               	movwf	?_clust2sect,c
  6908  002C96  5161               	movf	(??_clust2sect+1)& (0+255),w,b
  6909  002C98  201B               	addwfc	?___lmul+1,w,c
  6910  002C9A  6E27               	movwf	?_clust2sect+1,c
  6911  002C9C  5162               	movf	(??_clust2sect+2)& (0+255),w,b
  6912  002C9E  201C               	addwfc	?___lmul+2,w,c
  6913  002CA0  6E28               	movwf	?_clust2sect+2,c
  6914  002CA2  5163               	movf	(??_clust2sect+3)& (0+255),w,b
  6915  002CA4  201D               	addwfc	?___lmul+3,w,c
  6916  002CA6  6E29               	movwf	?_clust2sect+3,c
  6917  002CA8  0012               	return	
  6918  002CAA                     __end_of_clust2sect:
  6919                           	opt stack 0
  6920                           tblptru	equ	0xFF8
  6921                           tblptrh	equ	0xFF7
  6922                           tblptrl	equ	0xFF6
  6923                           tablat	equ	0xFF5
  6924                           prodh	equ	0xFF4
  6925                           prodl	equ	0xFF3
  6926                           intcon	equ	0xFF2
  6927                           intcon2	equ	0xFF1
  6928                           intcon3	equ	0xFF0
  6929                           postinc0	equ	0xFEE
  6930                           wreg	equ	0xFE8
  6931                           indf1	equ	0xFE7
  6932                           postinc1	equ	0xFE6
  6933                           postdec1	equ	0xFE5
  6934                           fsr1h	equ	0xFE2
  6935                           fsr1l	equ	0xFE1
  6936                           indf2	equ	0xFDF
  6937                           postinc2	equ	0xFDE
  6938                           postdec2	equ	0xFDD
  6939                           plusw2	equ	0xFDB
  6940                           fsr2h	equ	0xFDA
  6941                           fsr2l	equ	0xFD9
  6942                           status	equ	0xFD8
  6943                           
  6944 ;; *************** function _create_chain *****************
  6945 ;; Defined at:
  6946 ;;		line 282 in file "bibliotecas/tff.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;  clust           2   88[BANK0 ] unsigned short 
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;  ncl             2  100[BANK0 ] unsigned short 
  6951 ;;  scl             2   98[BANK0 ] unsigned short 
  6952 ;;  cstat           2   96[BANK0 ] unsigned short 
  6953 ;;  fs              2   94[BANK0 ] PTR struct _FATFS
  6954 ;;		 -> NULL(0), fs(544), 
  6955 ;;  mcl             2   92[BANK0 ] unsigned short 
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  2   88[BANK0 ] unsigned short 
  6958 ;; Registers used:
  6959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6965 ;;      Params:         0       2       0       0       0       0       0       0       0
  6966 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6967 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6968 ;;      Totals:         0      14       0       0       0       0       0       0       0
  6969 ;;Total ram usage:       14 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:   10
  6972 ;; This function calls:
  6973 ;;		_get_cluster
  6974 ;;		_put_cluster
  6975 ;; This function is called by:
  6976 ;;		_reserve_direntry
  6977 ;;		_f_write
  6978 ;;		_f_lseek
  6979 ;;		_f_mkdir
  6980 ;; This function uses a non-reentrant model
  6981 ;;
  6982                           
  6983                           	psect	text21
  6984  001C30                     __ptext21:
  6985                           	opt stack 0
  6986  001C30                     _create_chain:
  6987                           	opt stack 18
  6988                           
  6989                           ;tff.c: 286: CLUST cstat, ncl, scl, mcl;
  6990                           ;tff.c: 287: FATFS *fs = FatFs;
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;incstack = 0
  6994  001C30  C0EF  F0BE         	movff	_FatFs,create_chain@fs
  6995  001C34  C0F0  F0BF         	movff	_FatFs+1,create_chain@fs+1
  6996                           
  6997                           ;tff.c: 290: mcl = fs->max_clust;
  6998  001C38  0100               	movlb	0	; () banked
  6999  001C3A  EE20 F016          	lfsr	2,22
  7000  001C3E  51BE               	movf	create_chain@fs& (0+255),w,b
  7001  001C40  26D9               	addwf	fsr2l,f,c
  7002  001C42  51BF               	movf	(create_chain@fs+1)& (0+255),w,b
  7003  001C44  22DA               	addwfc	fsr2h,f,c
  7004  001C46  CFDE F0BC          	movff	postinc2,create_chain@mcl
  7005  001C4A  CFDD F0BD          	movff	postdec2,create_chain@mcl+1
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;tff.c: 291: if (clust == 0) {
  7009  001C4E  51B8               	movf	create_chain@clust& (0+255),w,b
  7010  001C50  11B9               	iorwf	(create_chain@clust+1)& (0+255),w,b
  7011  001C52  A4D8               	btfss	status,2,c
  7012  001C54  D01B               	goto	l1054
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;tff.c: 292: scl = fs->last_clust;
  7016  001C56  EE20 F018          	lfsr	2,24
  7017  001C5A  51BE               	movf	create_chain@fs& (0+255),w,b
  7018  001C5C  26D9               	addwf	fsr2l,f,c
  7019  001C5E  51BF               	movf	(create_chain@fs+1)& (0+255),w,b
  7020  001C60  22DA               	addwfc	fsr2h,f,c
  7021  001C62  CFDE F0C2          	movff	postinc2,create_chain@scl
  7022  001C66  CFDD F0C3          	movff	postdec2,create_chain@scl+1
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;tff.c: 293: if (scl < 2 || scl >= mcl) scl = 1;
  7026  001C6A  51C3               	movf	(create_chain@scl+1)& (0+255),w,b
  7027  001C6C  E104               	bnz	u12890
  7028  001C6E  0E02               	movlw	2
  7029  001C70  5DC2               	subwf	create_chain@scl& (0+255),w,b
  7030  001C72  A0D8               	btfss	status,0,c
  7031  001C74  D006               	goto	u12900
  7032  001C76                     u12890:
  7033                           
  7034                           ; BSR set to: 0
  7035  001C76  51BC               	movf	create_chain@mcl& (0+255),w,b
  7036  001C78  5DC2               	subwf	create_chain@scl& (0+255),w,b
  7037  001C7A  51BD               	movf	(create_chain@mcl+1)& (0+255),w,b
  7038  001C7C  59C3               	subwfb	(create_chain@scl+1)& (0+255),w,b
  7039  001C7E  A0D8               	btfss	status,0,c
  7040  001C80  D02A               	goto	l1058
  7041  001C82                     u12900:
  7042                           
  7043                           ; BSR set to: 0
  7044                           
  7045                           ; BSR set to: 0
  7046  001C82  0E00               	movlw	0
  7047  001C84  6FC3               	movwf	(create_chain@scl+1)& (0+255),b
  7048  001C86  0E01               	movlw	1
  7049  001C88  6FC2               	movwf	create_chain@scl& (0+255),b
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;tff.c: 294: }
  7053  001C8A  D025               	goto	l1058
  7054  001C8C                     l1054:
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;tff.c: 295: else {
  7058                           ;tff.c: 296: cstat = get_cluster(clust);
  7059                           
  7060                           ; BSR set to: 0
  7061  001C8C  C0B8  F0A2         	movff	create_chain@clust,get_cluster@clust
  7062  001C90  C0B9  F0A3         	movff	create_chain@clust+1,get_cluster@clust+1
  7063  001C94  EC07  F00D         	call	_get_cluster	;wreg free
  7064  001C98  C0A2  F0C0         	movff	?_get_cluster,create_chain@cstat
  7065  001C9C  C0A3  F0C1         	movff	?_get_cluster+1,create_chain@cstat+1
  7066                           
  7067                           ;tff.c: 297: if (cstat < 2) return 1;
  7068  001CA0  0100               	movlb	0	; () banked
  7069  001CA2  51C1               	movf	(create_chain@cstat+1)& (0+255),w,b
  7070  001CA4  E109               	bnz	l11266
  7071  001CA6  0E02               	movlw	2
  7072  001CA8  5DC0               	subwf	create_chain@cstat& (0+255),w,b
  7073  001CAA  B0D8               	btfsc	status,0,c
  7074  001CAC  D005               	goto	l1059
  7075                           
  7076                           ; BSR set to: 0
  7077  001CAE  0E00               	movlw	0
  7078  001CB0  6FB9               	movwf	(?_create_chain+1)& (0+255),b
  7079  001CB2  0E01               	movlw	1
  7080  001CB4  6FB8               	movwf	?_create_chain& (0+255),b
  7081                           
  7082                           ; BSR set to: 0
  7083  001CB6  0012               	return	
  7084  001CB8                     l1059:
  7085  001CB8                     l11266:
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;tff.c: 298: if (cstat < mcl) return cstat;
  7089  001CB8  51BC               	movf	create_chain@mcl& (0+255),w,b
  7090  001CBA  5DC0               	subwf	create_chain@cstat& (0+255),w,b
  7091  001CBC  51BD               	movf	(create_chain@mcl+1)& (0+255),w,b
  7092  001CBE  59C1               	subwfb	(create_chain@cstat+1)& (0+255),w,b
  7093  001CC0  B0D8               	btfsc	status,0,c
  7094  001CC2  D005               	goto	l1061
  7095                           
  7096                           ; BSR set to: 0
  7097  001CC4  C0C0  F0B8         	movff	create_chain@cstat,?_create_chain
  7098  001CC8  C0C1  F0B9         	movff	create_chain@cstat+1,?_create_chain+1
  7099  001CCC  0012               	return	
  7100  001CCE                     l1061:
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;tff.c: 299: scl = clust;
  7104  001CCE  C0B8  F0C2         	movff	create_chain@clust,create_chain@scl
  7105  001CD2  C0B9  F0C3         	movff	create_chain@clust+1,create_chain@scl+1
  7106  001CD6                     l1058:
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;tff.c: 300: }
  7110                           ;tff.c: 302: ncl = scl;
  7111  001CD6  C0C2  F0C4         	movff	create_chain@scl,create_chain@ncl
  7112  001CDA  C0C3  F0C5         	movff	create_chain@scl+1,create_chain@ncl+1
  7113  001CDE                     l11270:
  7114                           
  7115                           ; BSR set to: 0
  7116                           ;tff.c: 304: ncl++;
  7117  001CDE  4BC4               	infsnz	create_chain@ncl& (0+255),f,b
  7118  001CE0  2BC5               	incf	(create_chain@ncl+1)& (0+255),f,b
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;tff.c: 305: if (ncl >= mcl) {
  7122  001CE2  51BC               	movf	create_chain@mcl& (0+255),w,b
  7123  001CE4  5DC4               	subwf	create_chain@ncl& (0+255),w,b
  7124  001CE6  51BD               	movf	(create_chain@mcl+1)& (0+255),w,b
  7125  001CE8  59C5               	subwfb	(create_chain@ncl+1)& (0+255),w,b
  7126  001CEA  A0D8               	btfss	status,0,c
  7127  001CEC  D00F               	goto	l1064
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;tff.c: 306: ncl = 2;
  7131  001CEE  0E00               	movlw	0
  7132  001CF0  6FC5               	movwf	(create_chain@ncl+1)& (0+255),b
  7133  001CF2  0E02               	movlw	2
  7134  001CF4  6FC4               	movwf	create_chain@ncl& (0+255),b
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;tff.c: 307: if (ncl > scl) return 0;
  7138  001CF6  51C4               	movf	create_chain@ncl& (0+255),w,b
  7139  001CF8  5DC2               	subwf	create_chain@scl& (0+255),w,b
  7140  001CFA  51C5               	movf	(create_chain@ncl+1)& (0+255),w,b
  7141  001CFC  59C3               	subwfb	(create_chain@scl+1)& (0+255),w,b
  7142  001CFE  B0D8               	btfsc	status,0,c
  7143  001D00  D005               	goto	l1064
  7144                           
  7145                           ; BSR set to: 0
  7146  001D02  0E00               	movlw	0
  7147  001D04  6FB9               	movwf	(?_create_chain+1)& (0+255),b
  7148  001D06  0E00               	movlw	0
  7149  001D08  6FB8               	movwf	?_create_chain& (0+255),b
  7150                           
  7151                           ; BSR set to: 0
  7152  001D0A  0012               	return	
  7153  001D0C                     l1064:
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;tff.c: 308: }
  7157                           ;tff.c: 309: cstat = get_cluster(ncl);
  7158                           
  7159                           ; BSR set to: 0
  7160                           
  7161                           ; BSR set to: 0
  7162  001D0C  C0C4  F0A2         	movff	create_chain@ncl,get_cluster@clust
  7163  001D10  C0C5  F0A3         	movff	create_chain@ncl+1,get_cluster@clust+1
  7164  001D14  EC07  F00D         	call	_get_cluster	;wreg free
  7165  001D18  C0A2  F0C0         	movff	?_get_cluster,create_chain@cstat
  7166  001D1C  C0A3  F0C1         	movff	?_get_cluster+1,create_chain@cstat+1
  7167                           
  7168                           ;tff.c: 310: if (cstat == 0) break;
  7169  001D20  0100               	movlb	0	; () banked
  7170  001D22  51C0               	movf	create_chain@cstat& (0+255),w,b
  7171  001D24  11C1               	iorwf	(create_chain@cstat+1)& (0+255),w,b
  7172  001D26  B4D8               	btfsc	status,2,c
  7173  001D28  D015               	goto	l1066
  7174                           
  7175                           ; BSR set to: 0
  7176                           ;tff.c: 311: if (cstat == 1) return 1;
  7177                           
  7178                           ; BSR set to: 0
  7179                           
  7180                           ; BSR set to: 0
  7181  001D2A  05C0               	decf	create_chain@cstat& (0+255),w,b
  7182  001D2C  11C1               	iorwf	(create_chain@cstat+1)& (0+255),w,b
  7183  001D2E  A4D8               	btfss	status,2,c
  7184  001D30  D005               	goto	l1067
  7185                           
  7186                           ; BSR set to: 0
  7187  001D32  0E00               	movlw	0
  7188  001D34  6FB9               	movwf	(?_create_chain+1)& (0+255),b
  7189  001D36  0E01               	movlw	1
  7190  001D38  6FB8               	movwf	?_create_chain& (0+255),b
  7191                           
  7192                           ; BSR set to: 0
  7193  001D3A  0012               	return	
  7194  001D3C                     l1067:
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;tff.c: 312: if (ncl == scl) return 0;
  7198                           
  7199                           ; BSR set to: 0
  7200  001D3C  51C2               	movf	create_chain@scl& (0+255),w,b
  7201  001D3E  19C4               	xorwf	create_chain@ncl& (0+255),w,b
  7202  001D40  E1CE               	bnz	l11270
  7203  001D42  51C3               	movf	(create_chain@scl+1)& (0+255),w,b
  7204  001D44  19C5               	xorwf	(create_chain@ncl+1)& (0+255),w,b
  7205  001D46  A4D8               	btfss	status,2,c
  7206  001D48  D7CA               	goto	l1062
  7207                           
  7208                           ; BSR set to: 0
  7209  001D4A  0E00               	movlw	0
  7210  001D4C  6FB9               	movwf	(?_create_chain+1)& (0+255),b
  7211  001D4E  0E00               	movlw	0
  7212  001D50  6FB8               	movwf	?_create_chain& (0+255),b
  7213                           
  7214                           ; BSR set to: 0
  7215  001D52  0012               	return	
  7216  001D54                     l1066:
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;tff.c: 315: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
  7220                           
  7221                           ; BSR set to: 0
  7222  001D54  C0C4  F0A2         	movff	create_chain@ncl,put_cluster@clust
  7223  001D58  C0C5  F0A3         	movff	create_chain@ncl+1,put_cluster@clust+1
  7224  001D5C  0EFF               	movlw	255
  7225  001D5E  6FA5               	movwf	(put_cluster@val+1)& (0+255),b
  7226  001D60  69A4               	setf	put_cluster@val& (0+255),b
  7227  001D62  ECCA  F00B         	call	_put_cluster	;wreg free
  7228  001D66  0900               	iorlw	0
  7229  001D68  A4D8               	btfss	status,2,c
  7230  001D6A  D006               	goto	l1069
  7231  001D6C  0E00               	movlw	0
  7232  001D6E  0100               	movlb	0	; () banked
  7233  001D70  6FB9               	movwf	(?_create_chain+1)& (0+255),b
  7234  001D72  0E01               	movlw	1
  7235  001D74  6FB8               	movwf	?_create_chain& (0+255),b
  7236                           
  7237                           ; BSR set to: 0
  7238  001D76  0012               	return	
  7239  001D78                     l1069:
  7240                           
  7241                           ;tff.c: 316: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
  7242                           
  7243                           ; BSR set to: 0
  7244  001D78  0100               	movlb	0	; () banked
  7245  001D7A  51B8               	movf	create_chain@clust& (0+255),w,b
  7246  001D7C  11B9               	iorwf	(create_chain@clust+1)& (0+255),w,b
  7247  001D7E  B4D8               	btfsc	status,2,c
  7248  001D80  D013               	goto	l1070
  7249                           
  7250                           ; BSR set to: 0
  7251  001D82  C0B8  F0A2         	movff	create_chain@clust,put_cluster@clust
  7252  001D86  C0B9  F0A3         	movff	create_chain@clust+1,put_cluster@clust+1
  7253  001D8A  C0C4  F0A4         	movff	create_chain@ncl,put_cluster@val
  7254  001D8E  C0C5  F0A5         	movff	create_chain@ncl+1,put_cluster@val+1
  7255  001D92  ECCA  F00B         	call	_put_cluster	;wreg free
  7256  001D96  0900               	iorlw	0
  7257  001D98  A4D8               	btfss	status,2,c
  7258  001D9A  D006               	goto	l1070
  7259  001D9C  0E00               	movlw	0
  7260  001D9E  0100               	movlb	0	; () banked
  7261  001DA0  6FB9               	movwf	(?_create_chain+1)& (0+255),b
  7262  001DA2  0E01               	movlw	1
  7263  001DA4  6FB8               	movwf	?_create_chain& (0+255),b
  7264                           
  7265                           ; BSR set to: 0
  7266  001DA6  0012               	return	
  7267  001DA8                     l1070:
  7268                           
  7269                           ;tff.c: 318: fs->last_clust = ncl;
  7270                           
  7271                           ; BSR set to: 0
  7272  001DA8  0100               	movlb	0	; () banked
  7273  001DAA  EE20 F018          	lfsr	2,24
  7274  001DAE  51BE               	movf	create_chain@fs& (0+255),w,b
  7275  001DB0  26D9               	addwf	fsr2l,f,c
  7276  001DB2  51BF               	movf	(create_chain@fs+1)& (0+255),w,b
  7277  001DB4  22DA               	addwfc	fsr2h,f,c
  7278  001DB6  C0C4  FFDE         	movff	create_chain@ncl,postinc2
  7279  001DBA  C0C5  FFDD         	movff	create_chain@ncl+1,postdec2
  7280                           
  7281                           ;tff.c: 319: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
  7282  001DBE  EE20 F01A          	lfsr	2,26
  7283  001DC2  51BE               	movf	create_chain@fs& (0+255),w,b
  7284  001DC4  26D9               	addwf	fsr2l,f,c
  7285  001DC6  51BF               	movf	(create_chain@fs+1)& (0+255),w,b
  7286  001DC8  22DA               	addwfc	fsr2h,f,c
  7287  001DCA  28DE               	incf	postinc2,w,c
  7288  001DCC  E103               	bnz	u13010
  7289  001DCE  28DE               	incf	postinc2,w,c
  7290  001DD0  B4D8               	btfsc	status,2,c
  7291  001DD2  D009               	goto	l1071
  7292  001DD4                     u13010:
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;tff.c: 320: fs->free_clust--;
  7296  001DD4  EE20 F01A          	lfsr	2,26
  7297  001DD8  51BE               	movf	create_chain@fs& (0+255),w,b
  7298  001DDA  26D9               	addwf	fsr2l,f,c
  7299  001DDC  51BF               	movf	(create_chain@fs+1)& (0+255),w,b
  7300  001DDE  22DA               	addwfc	fsr2h,f,c
  7301  001DE0  06DE               	decf	postinc2,f,c
  7302  001DE2  0E00               	movlw	0
  7303  001DE4  5ADD               	subwfb	postdec2,f,c
  7304  001DE6                     l1071:
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;tff.c: 324: }
  7308                           ;tff.c: 326: return ncl;
  7309                           
  7310                           ; BSR set to: 0
  7311  001DE6  C0C4  F0B8         	movff	create_chain@ncl,?_create_chain
  7312  001DEA  C0C5  F0B9         	movff	create_chain@ncl+1,?_create_chain+1
  7313  001DEE  0012               	return	
  7314  001DF0                     __end_of_create_chain:
  7315                           	opt stack 0
  7316                           tblptru	equ	0xFF8
  7317                           tblptrh	equ	0xFF7
  7318                           tblptrl	equ	0xFF6
  7319                           tablat	equ	0xFF5
  7320                           prodh	equ	0xFF4
  7321                           prodl	equ	0xFF3
  7322                           intcon	equ	0xFF2
  7323                           intcon2	equ	0xFF1
  7324                           intcon3	equ	0xFF0
  7325                           postinc0	equ	0xFEE
  7326                           wreg	equ	0xFE8
  7327                           indf1	equ	0xFE7
  7328                           postinc1	equ	0xFE6
  7329                           postdec1	equ	0xFE5
  7330                           fsr1h	equ	0xFE2
  7331                           fsr1l	equ	0xFE1
  7332                           indf2	equ	0xFDF
  7333                           postinc2	equ	0xFDE
  7334                           postdec2	equ	0xFDD
  7335                           plusw2	equ	0xFDB
  7336                           fsr2h	equ	0xFDA
  7337                           fsr2l	equ	0xFD9
  7338                           status	equ	0xFD8
  7339                           
  7340 ;; *************** function _remove_chain *****************
  7341 ;; Defined at:
  7342 ;;		line 249 in file "bibliotecas/tff.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;  clust           2   88[BANK0 ] unsigned short 
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;  fs              2   94[BANK0 ] PTR struct _FATFS
  7347 ;;		 -> NULL(0), fs(544), 
  7348 ;;  nxt             2   92[BANK0 ] unsigned short 
  7349 ;; Return value:  Size  Location     Type
  7350 ;;                  1    wreg      enum E105
  7351 ;; Registers used:
  7352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7358 ;;      Params:         0       2       0       0       0       0       0       0       0
  7359 ;;      Locals:         0       4       0       0       0       0       0       0       0
  7360 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7361 ;;      Totals:         0       8       0       0       0       0       0       0       0
  7362 ;;Total ram usage:        8 bytes
  7363 ;; Hardware stack levels used:    1
  7364 ;; Hardware stack levels required when called:   10
  7365 ;; This function calls:
  7366 ;;		_get_cluster
  7367 ;;		_put_cluster
  7368 ;; This function is called by:
  7369 ;;		_f_open
  7370 ;;		_f_truncate
  7371 ;;		_f_unlink
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           	psect	text22
  7376  002CAA                     __ptext22:
  7377                           	opt stack 0
  7378  002CAA                     _remove_chain:
  7379                           	opt stack 18
  7380                           
  7381                           ;tff.c: 253: CLUST nxt;
  7382                           ;tff.c: 254: FATFS *fs = FatFs;
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;incstack = 0
  7386  002CAA  C0EF  F0BE         	movff	_FatFs,remove_chain@fs
  7387  002CAE  C0F0  F0BF         	movff	_FatFs+1,remove_chain@fs+1
  7388                           
  7389                           ;tff.c: 257: while (clust >= 2 && clust < fs->max_clust) {
  7390  002CB2  D039               	goto	l1043
  7391  002CB4                     
  7392                           ;tff.c: 258: nxt = get_cluster(clust);
  7393  002CB4  C0B8  F0A2         	movff	remove_chain@clust,get_cluster@clust
  7394  002CB8  C0B9  F0A3         	movff	remove_chain@clust+1,get_cluster@clust+1
  7395  002CBC  EC07  F00D         	call	_get_cluster	;wreg free
  7396  002CC0  C0A2  F0BC         	movff	?_get_cluster,remove_chain@nxt
  7397  002CC4  C0A3  F0BD         	movff	?_get_cluster+1,remove_chain@nxt+1
  7398                           
  7399                           ;tff.c: 259: if (nxt == 1) return FALSE;
  7400  002CC8  0100               	movlb	0	; () banked
  7401  002CCA  05BC               	decf	remove_chain@nxt& (0+255),w,b
  7402  002CCC  11BD               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  7403  002CCE  A4D8               	btfss	status,2,c
  7404  002CD0  D002               	goto	l1045
  7405                           
  7406                           ; BSR set to: 0
  7407  002CD2  0E00               	movlw	0
  7408                           
  7409                           ; BSR set to: 0
  7410  002CD4  0012               	return	
  7411  002CD6                     l1045:
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;tff.c: 260: if (!put_cluster(clust, 0)) return FALSE;
  7415                           
  7416                           ; BSR set to: 0
  7417  002CD6  C0B8  F0A2         	movff	remove_chain@clust,put_cluster@clust
  7418  002CDA  C0B9  F0A3         	movff	remove_chain@clust+1,put_cluster@clust+1
  7419  002CDE  0E00               	movlw	0
  7420  002CE0  6FA5               	movwf	(put_cluster@val+1)& (0+255),b
  7421  002CE2  0E00               	movlw	0
  7422  002CE4  6FA4               	movwf	put_cluster@val& (0+255),b
  7423  002CE6  ECCA  F00B         	call	_put_cluster	;wreg free
  7424  002CEA  0900               	iorlw	0
  7425  002CEC  A4D8               	btfss	status,2,c
  7426  002CEE  D002               	goto	l1047
  7427  002CF0  0E00               	movlw	0
  7428  002CF2  0012               	return	
  7429  002CF4                     l1047:
  7430                           
  7431                           ;tff.c: 261: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
  7432  002CF4  0100               	movlb	0	; () banked
  7433  002CF6  EE20 F01A          	lfsr	2,26
  7434  002CFA  51BE               	movf	remove_chain@fs& (0+255),w,b
  7435  002CFC  26D9               	addwf	fsr2l,f,c
  7436  002CFE  51BF               	movf	(remove_chain@fs+1)& (0+255),w,b
  7437  002D00  22DA               	addwfc	fsr2h,f,c
  7438  002D02  28DE               	incf	postinc2,w,c
  7439  002D04  E103               	bnz	u13560
  7440  002D06  28DE               	incf	postinc2,w,c
  7441  002D08  B4D8               	btfsc	status,2,c
  7442  002D0A  D009               	goto	l1048
  7443  002D0C                     u13560:
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;tff.c: 262: fs->free_clust++;
  7447  002D0C  EE20 F01A          	lfsr	2,26
  7448  002D10  51BE               	movf	remove_chain@fs& (0+255),w,b
  7449  002D12  26D9               	addwf	fsr2l,f,c
  7450  002D14  51BF               	movf	(remove_chain@fs+1)& (0+255),w,b
  7451  002D16  22DA               	addwfc	fsr2h,f,c
  7452  002D18  2ADE               	incf	postinc2,f,c
  7453  002D1A  0E00               	movlw	0
  7454  002D1C  22DD               	addwfc	postdec2,f,c
  7455  002D1E                     l1048:
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;tff.c: 266: }
  7459                           ;tff.c: 267: clust = nxt;
  7460                           
  7461                           ; BSR set to: 0
  7462  002D1E  C0BC  F0B8         	movff	remove_chain@nxt,remove_chain@clust
  7463  002D22  C0BD  F0B9         	movff	remove_chain@nxt+1,remove_chain@clust+1
  7464  002D26                     l1043:
  7465                           
  7466                           ; BSR set to: 0
  7467  002D26  0100               	movlb	0	; () banked
  7468  002D28  51B9               	movf	(remove_chain@clust+1)& (0+255),w,b
  7469  002D2A  E104               	bnz	u13570
  7470  002D2C  0E02               	movlw	2
  7471  002D2E  5DB8               	subwf	remove_chain@clust& (0+255),w,b
  7472  002D30  A0D8               	btfss	status,0,c
  7473  002D32  D00C               	goto	u13580
  7474  002D34                     u13570:
  7475                           
  7476                           ; BSR set to: 0
  7477  002D34  EE20 F016          	lfsr	2,22
  7478  002D38  51BE               	movf	remove_chain@fs& (0+255),w,b
  7479  002D3A  26D9               	addwf	fsr2l,f,c
  7480  002D3C  51BF               	movf	(remove_chain@fs+1)& (0+255),w,b
  7481  002D3E  22DA               	addwfc	fsr2h,f,c
  7482  002D40  50DE               	movf	postinc2,w,c
  7483  002D42  5DB8               	subwf	remove_chain@clust& (0+255),w,b
  7484  002D44  50DE               	movf	postinc2,w,c
  7485  002D46  59B9               	subwfb	(remove_chain@clust+1)& (0+255),w,b
  7486  002D48  A0D8               	btfss	status,0,c
  7487  002D4A  D7B4               	goto	l1044
  7488  002D4C                     u13580:
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;tff.c: 268: }
  7492                           ;tff.c: 269: return TRUE;
  7493                           
  7494                           ; BSR set to: 0
  7495                           
  7496                           ; BSR set to: 0
  7497  002D4C  0E01               	movlw	1
  7498  002D4E  0012               	return	
  7499  002D50                     __end_of_remove_chain:
  7500                           	opt stack 0
  7501                           tblptru	equ	0xFF8
  7502                           tblptrh	equ	0xFF7
  7503                           tblptrl	equ	0xFF6
  7504                           tablat	equ	0xFF5
  7505                           prodh	equ	0xFF4
  7506                           prodl	equ	0xFF3
  7507                           intcon	equ	0xFF2
  7508                           intcon2	equ	0xFF1
  7509                           intcon3	equ	0xFF0
  7510                           postinc0	equ	0xFEE
  7511                           wreg	equ	0xFE8
  7512                           indf1	equ	0xFE7
  7513                           postinc1	equ	0xFE6
  7514                           postdec1	equ	0xFE5
  7515                           fsr1h	equ	0xFE2
  7516                           fsr1l	equ	0xFE1
  7517                           indf2	equ	0xFDF
  7518                           postinc2	equ	0xFDE
  7519                           postdec2	equ	0xFDD
  7520                           plusw2	equ	0xFDB
  7521                           fsr2h	equ	0xFDA
  7522                           fsr2l	equ	0xFD9
  7523                           status	equ	0xFD8
  7524                           
  7525 ;; *************** function _put_cluster *****************
  7526 ;; Defined at:
  7527 ;;		line 197 in file "bibliotecas/tff.c"
  7528 ;; Parameters:    Size  Location     Type
  7529 ;;  clust           2   66[BANK0 ] unsigned short 
  7530 ;;  val             2   68[BANK0 ] unsigned short 
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;  fatsect         4   78[BANK0 ] unsigned long 
  7533 ;;  fs              2   86[BANK0 ] PTR struct _FATFS
  7534 ;;		 -> NULL(0), fs(544), 
  7535 ;;  p               2   84[BANK0 ] PTR unsigned char 
  7536 ;;		 -> fs.win(512), NULL(0), fs(544), 
  7537 ;;  bc              2   82[BANK0 ] unsigned short 
  7538 ;; Return value:  Size  Location     Type
  7539 ;;                  1    wreg      enum E105
  7540 ;; Registers used:
  7541 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7547 ;;      Params:         0       4       0       0       0       0       0       0       0
  7548 ;;      Locals:         0      14       0       0       0       0       0       0       0
  7549 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7550 ;;      Totals:         0      22       0       0       0       0       0       0       0
  7551 ;;Total ram usage:       22 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:    9
  7554 ;; This function calls:
  7555 ;;		___wmul
  7556 ;;		_move_window
  7557 ;; This function is called by:
  7558 ;;		_remove_chain
  7559 ;;		_create_chain
  7560 ;;		_f_truncate
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           	psect	text23
  7565  001794                     __ptext23:
  7566                           	opt stack 0
  7567  001794                     _put_cluster:
  7568                           	opt stack 18
  7569                           
  7570                           ;tff.c: 202: WORD bc;
  7571                           ;tff.c: 203: BYTE *p;
  7572                           ;tff.c: 204: DWORD fatsect;
  7573                           ;tff.c: 205: FATFS *fs = FatFs;
  7574                           
  7575                           ;incstack = 0
  7576  001794  C0EF  F0B6         	movff	_FatFs,put_cluster@fs
  7577  001798  C0F0  F0B7         	movff	_FatFs+1,put_cluster@fs+1
  7578                           
  7579                           ;tff.c: 208: fatsect = fs->fatbase;
  7580  00179C  0100               	movlb	0	; () banked
  7581  00179E  EE20 F008          	lfsr	2,8
  7582  0017A2  51B6               	movf	put_cluster@fs& (0+255),w,b
  7583  0017A4  26D9               	addwf	fsr2l,f,c
  7584  0017A6  51B7               	movf	(put_cluster@fs+1)& (0+255),w,b
  7585  0017A8  22DA               	addwfc	fsr2h,f,c
  7586  0017AA  CFDE F0AE          	movff	postinc2,put_cluster@fatsect
  7587  0017AE  CFDE F0AF          	movff	postinc2,put_cluster@fatsect+1
  7588  0017B2  CFDE F0B0          	movff	postinc2,put_cluster@fatsect+2
  7589  0017B6  CFDE F0B1          	movff	postinc2,put_cluster@fatsect+3
  7590                           
  7591                           ;tff.c: 209: switch (fs->fs_type) {
  7592  0017BA  D111               	goto	l1024
  7593  0017BC                     
  7594                           ; BSR set to: 0
  7595                           ;tff.c: 211: bc = (WORD)clust * 3 / 2;
  7596                           
  7597                           ; BSR set to: 0
  7598  0017BC  C0A2  F01A         	movff	put_cluster@clust,___wmul@multiplier
  7599  0017C0  C0A3  F01B         	movff	put_cluster@clust+1,___wmul@multiplier+1
  7600  0017C4  0E00               	movlw	0
  7601  0017C6  6E1D               	movwf	___wmul@multiplicand+1,c
  7602  0017C8  0E03               	movlw	3
  7603  0017CA  6E1C               	movwf	___wmul@multiplicand,c
  7604  0017CC  ECB5  F01C         	call	___wmul	;wreg free
  7605  0017D0  90D8               	bcf	status,0,c
  7606  0017D2  301B               	rrcf	?___wmul+1,w,c
  7607  0017D4  0100               	movlb	0	; () banked
  7608  0017D6  6FA6               	movwf	??_put_cluster& (0+255),b
  7609  0017D8  301A               	rrcf	?___wmul,w,c
  7610  0017DA  6FB2               	movwf	put_cluster@bc& (0+255),b
  7611  0017DC  C0A6  F0B3         	movff	??_put_cluster,put_cluster@bc+1
  7612                           
  7613                           ; BSR set to: 0
  7614                           ;tff.c: 212: if (!move_window(fatsect + bc / 512U)) return FALSE;
  7615  0017E0  C0B2  F0A6         	movff	put_cluster@bc,??_put_cluster
  7616  0017E4  C0B3  F0A7         	movff	put_cluster@bc+1,??_put_cluster+1
  7617  0017E8  0E09               	movlw	9
  7618  0017EA  6FA8               	movwf	(??_put_cluster+2)& (0+255),b
  7619  0017EC                     u12735:
  7620  0017EC  90D8               	bcf	status,0,c
  7621  0017EE  33A7               	rrcf	(??_put_cluster+1)& (0+255),f,b
  7622  0017F0  33A6               	rrcf	??_put_cluster& (0+255),f,b
  7623  0017F2  2FA8               	decfsz	(??_put_cluster+2)& (0+255),f,b
  7624  0017F4  D7FB               	goto	u12735
  7625  0017F6  51A6               	movf	??_put_cluster& (0+255),w,b
  7626  0017F8  25AE               	addwf	put_cluster@fatsect& (0+255),w,b
  7627  0017FA  6F8D               	movwf	move_window@sector& (0+255),b
  7628  0017FC  51A7               	movf	(??_put_cluster+1)& (0+255),w,b
  7629  0017FE  21AF               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
  7630  001800  6F8E               	movwf	(move_window@sector+1)& (0+255),b
  7631  001802  0E00               	movlw	0
  7632  001804  21B0               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
  7633  001806  6F8F               	movwf	(move_window@sector+2)& (0+255),b
  7634  001808  0E00               	movlw	0
  7635  00180A  21B1               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
  7636  00180C  6F90               	movwf	(move_window@sector+3)& (0+255),b
  7637  00180E  ECF8  F00E         	call	_move_window	;wreg free
  7638  001812  0900               	iorlw	0
  7639  001814  A4D8               	btfss	status,2,c
  7640  001816  D002               	goto	l1026
  7641  001818  0E00               	movlw	0
  7642  00181A  0012               	return	
  7643  00181C                     l1026:
  7644                           
  7645                           ;tff.c: 213: p = &fs->win[bc % 512U];
  7646  00181C  0EFF               	movlw	255
  7647  00181E  0100               	movlb	0	; () banked
  7648  001820  6FA6               	movwf	??_put_cluster& (0+255),b
  7649  001822  0E01               	movlw	1
  7650  001824  6FA7               	movwf	(??_put_cluster+1)& (0+255),b
  7651  001826  C0B2  F0A8         	movff	put_cluster@bc,??_put_cluster+2
  7652  00182A  C0B3  F0A9         	movff	put_cluster@bc+1,??_put_cluster+3
  7653  00182E  51A6               	movf	??_put_cluster& (0+255),w,b
  7654  001830  17A8               	andwf	(??_put_cluster+2)& (0+255),f,b
  7655  001832  51A7               	movf	(??_put_cluster+1)& (0+255),w,b
  7656  001834  17A9               	andwf	(??_put_cluster+3)& (0+255),f,b
  7657  001836  0E20               	movlw	32
  7658  001838  27A8               	addwf	(??_put_cluster+2)& (0+255),f,b
  7659  00183A  0E00               	movlw	0
  7660  00183C  23A9               	addwfc	(??_put_cluster+3)& (0+255),f,b
  7661  00183E  51A8               	movf	(??_put_cluster+2)& (0+255),w,b
  7662  001840  25B6               	addwf	put_cluster@fs& (0+255),w,b
  7663  001842  6FB4               	movwf	put_cluster@p& (0+255),b
  7664  001844  51A9               	movf	(??_put_cluster+3)& (0+255),w,b
  7665  001846  21B7               	addwfc	(put_cluster@fs+1)& (0+255),w,b
  7666  001848  6FB5               	movwf	(put_cluster@p+1)& (0+255),b
  7667                           
  7668                           ; BSR set to: 0
  7669                           ;tff.c: 214: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  7670  00184A  B1A2               	btfsc	put_cluster@clust& (0+255),0,b
  7671  00184C  D004               	goto	l1029
  7672                           
  7673                           ; BSR set to: 0
  7674  00184E  C0A4  F0AA         	movff	put_cluster@val,_put_cluster$2400
  7675  001852  6BAB               	clrf	(_put_cluster$2400+1)& (0+255),b
  7676  001854  D01A               	goto	l1031
  7677  001856                     l1029:
  7678                           
  7679                           ; BSR set to: 0
  7680                           
  7681                           ; BSR set to: 0
  7682  001856  51A4               	movf	put_cluster@val& (0+255),w,b
  7683  001858  6FA6               	movwf	??_put_cluster& (0+255),b
  7684  00185A  6BA7               	clrf	(??_put_cluster+1)& (0+255),b
  7685  00185C  3BA6               	swapf	??_put_cluster& (0+255),f,b
  7686  00185E  3BA7               	swapf	(??_put_cluster+1)& (0+255),f,b
  7687  001860  0EF0               	movlw	240
  7688  001862  17A7               	andwf	(??_put_cluster+1)& (0+255),f,b
  7689  001864  51A6               	movf	??_put_cluster& (0+255),w,b
  7690  001866  0B0F               	andlw	15
  7691  001868  13A7               	iorwf	(??_put_cluster+1)& (0+255),f,b
  7692  00186A  0EF0               	movlw	240
  7693  00186C  17A6               	andwf	??_put_cluster& (0+255),f,b
  7694  00186E  C0B4  FFD9         	movff	put_cluster@p,fsr2l
  7695  001872  C0B5  FFDA         	movff	put_cluster@p+1,fsr2h
  7696  001876  50DF               	movf	indf2,w,c
  7697  001878  0B0F               	andlw	15
  7698  00187A  6FA8               	movwf	(??_put_cluster+2)& (0+255),b
  7699  00187C  6BA9               	clrf	(??_put_cluster+3)& (0+255),b
  7700  00187E  51A6               	movf	??_put_cluster& (0+255),w,b
  7701  001880  11A8               	iorwf	(??_put_cluster+2)& (0+255),w,b
  7702  001882  6FAA               	movwf	_put_cluster$2400& (0+255),b
  7703  001884  51A7               	movf	(??_put_cluster+1)& (0+255),w,b
  7704  001886  11A9               	iorwf	(??_put_cluster+3)& (0+255),w,b
  7705  001888  6FAB               	movwf	(_put_cluster$2400+1)& (0+255),b
  7706  00188A                     l1031:
  7707                           
  7708                           ; BSR set to: 0
  7709                           
  7710                           ; BSR set to: 0
  7711  00188A  C0B4  FFD9         	movff	put_cluster@p,fsr2l
  7712  00188E  C0B5  FFDA         	movff	put_cluster@p+1,fsr2h
  7713  001892  C0AA  FFDF         	movff	_put_cluster$2400,indf2
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;tff.c: 215: bc++;
  7717  001896  4BB2               	infsnz	put_cluster@bc& (0+255),f,b
  7718  001898  2BB3               	incf	(put_cluster@bc+1)& (0+255),f,b
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;tff.c: 216: fs->winflag = 1;
  7722  00189A  EE20 F01F          	lfsr	2,31
  7723  00189E  51B6               	movf	put_cluster@fs& (0+255),w,b
  7724  0018A0  26D9               	addwf	fsr2l,f,c
  7725  0018A2  51B7               	movf	(put_cluster@fs+1)& (0+255),w,b
  7726  0018A4  22DA               	addwfc	fsr2h,f,c
  7727  0018A6  0E01               	movlw	1
  7728  0018A8  6EDF               	movwf	indf2,c
  7729                           
  7730                           ; BSR set to: 0
  7731                           ;tff.c: 217: if (!move_window(fatsect + bc / 512U)) return FALSE;
  7732  0018AA  C0B2  F0A6         	movff	put_cluster@bc,??_put_cluster
  7733  0018AE  C0B3  F0A7         	movff	put_cluster@bc+1,??_put_cluster+1
  7734  0018B2  0E09               	movlw	9
  7735  0018B4  6FA8               	movwf	(??_put_cluster+2)& (0+255),b
  7736  0018B6                     u12765:
  7737  0018B6  90D8               	bcf	status,0,c
  7738  0018B8  33A7               	rrcf	(??_put_cluster+1)& (0+255),f,b
  7739  0018BA  33A6               	rrcf	??_put_cluster& (0+255),f,b
  7740  0018BC  2FA8               	decfsz	(??_put_cluster+2)& (0+255),f,b
  7741  0018BE  D7FB               	goto	u12765
  7742  0018C0  51A6               	movf	??_put_cluster& (0+255),w,b
  7743  0018C2  25AE               	addwf	put_cluster@fatsect& (0+255),w,b
  7744  0018C4  6F8D               	movwf	move_window@sector& (0+255),b
  7745  0018C6  51A7               	movf	(??_put_cluster+1)& (0+255),w,b
  7746  0018C8  21AF               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
  7747  0018CA  6F8E               	movwf	(move_window@sector+1)& (0+255),b
  7748  0018CC  0E00               	movlw	0
  7749  0018CE  21B0               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
  7750  0018D0  6F8F               	movwf	(move_window@sector+2)& (0+255),b
  7751  0018D2  0E00               	movlw	0
  7752  0018D4  21B1               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
  7753  0018D6  6F90               	movwf	(move_window@sector+3)& (0+255),b
  7754  0018D8  ECF8  F00E         	call	_move_window	;wreg free
  7755  0018DC  0900               	iorlw	0
  7756  0018DE  A4D8               	btfss	status,2,c
  7757  0018E0  D002               	goto	l1032
  7758  0018E2  0E00               	movlw	0
  7759  0018E4  0012               	return	
  7760  0018E6                     l1032:
  7761                           
  7762                           ;tff.c: 218: p = &fs->win[bc % 512U];
  7763  0018E6  0EFF               	movlw	255
  7764  0018E8  0100               	movlb	0	; () banked
  7765  0018EA  6FA6               	movwf	??_put_cluster& (0+255),b
  7766  0018EC  0E01               	movlw	1
  7767  0018EE  6FA7               	movwf	(??_put_cluster+1)& (0+255),b
  7768  0018F0  C0B2  F0A8         	movff	put_cluster@bc,??_put_cluster+2
  7769  0018F4  C0B3  F0A9         	movff	put_cluster@bc+1,??_put_cluster+3
  7770  0018F8  51A6               	movf	??_put_cluster& (0+255),w,b
  7771  0018FA  17A8               	andwf	(??_put_cluster+2)& (0+255),f,b
  7772  0018FC  51A7               	movf	(??_put_cluster+1)& (0+255),w,b
  7773  0018FE  17A9               	andwf	(??_put_cluster+3)& (0+255),f,b
  7774  001900  0E20               	movlw	32
  7775  001902  27A8               	addwf	(??_put_cluster+2)& (0+255),f,b
  7776  001904  0E00               	movlw	0
  7777  001906  23A9               	addwfc	(??_put_cluster+3)& (0+255),f,b
  7778  001908  51A8               	movf	(??_put_cluster+2)& (0+255),w,b
  7779  00190A  25B6               	addwf	put_cluster@fs& (0+255),w,b
  7780  00190C  6FB4               	movwf	put_cluster@p& (0+255),b
  7781  00190E  51A9               	movf	(??_put_cluster+3)& (0+255),w,b
  7782  001910  21B7               	addwfc	(put_cluster@fs+1)& (0+255),w,b
  7783  001912  6FB5               	movwf	(put_cluster@p+1)& (0+255),b
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;tff.c: 219: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
  7787  001914  B1A2               	btfsc	put_cluster@clust& (0+255),0,b
  7788  001916  D013               	goto	l1034
  7789                           
  7790                           ; BSR set to: 0
  7791  001918  C0A4  F0A6         	movff	put_cluster@val,??_put_cluster
  7792  00191C  C0A5  F0A7         	movff	put_cluster@val+1,??_put_cluster+1
  7793  001920  C0A7  F0A6         	movff	??_put_cluster+1,??_put_cluster
  7794  001924  6BA7               	clrf	(??_put_cluster+1)& (0+255),b
  7795  001926  0E0F               	movlw	15
  7796  001928  17A6               	andwf	??_put_cluster& (0+255),f,b
  7797  00192A  C0B4  FFD9         	movff	put_cluster@p,fsr2l
  7798  00192E  C0B5  FFDA         	movff	put_cluster@p+1,fsr2h
  7799  001932  50DF               	movf	indf2,w,c
  7800  001934  0BF0               	andlw	240
  7801  001936  11A6               	iorwf	??_put_cluster& (0+255),w,b
  7802  001938  6FA8               	movwf	(??_put_cluster+2)& (0+255),b
  7803  00193A  51A8               	movf	(??_put_cluster+2)& (0+255),w,b
  7804  00193C  D00C               	goto	L4
  7805  00193E                     l1034:
  7806                           
  7807                           ; BSR set to: 0
  7808                           
  7809                           ; BSR set to: 0
  7810  00193E  C0A4  F0A6         	movff	put_cluster@val,??_put_cluster
  7811  001942  C0A5  F0A7         	movff	put_cluster@val+1,??_put_cluster+1
  7812  001946  0E04               	movlw	4
  7813  001948  6FA8               	movwf	(??_put_cluster+2)& (0+255),b
  7814  00194A                     u12795:
  7815  00194A  90D8               	bcf	status,0,c
  7816  00194C  33A7               	rrcf	(??_put_cluster+1)& (0+255),f,b
  7817  00194E  33A6               	rrcf	??_put_cluster& (0+255),f,b
  7818  001950  2FA8               	decfsz	(??_put_cluster+2)& (0+255),f,b
  7819  001952  D7FB               	goto	u12795
  7820  001954  51A6               	movf	??_put_cluster& (0+255),w,b
  7821  001956                     L4:
  7822  001956  6FAC               	movwf	_put_cluster$2401& (0+255),b
  7823  001958  6BAD               	clrf	(_put_cluster$2401+1)& (0+255),b
  7824                           
  7825                           ; BSR set to: 0
  7826                           
  7827                           ; BSR set to: 0
  7828  00195A  C0B4  FFD9         	movff	put_cluster@p,fsr2l
  7829  00195E  C0B5  FFDA         	movff	put_cluster@p+1,fsr2h
  7830  001962  C0AC  FFDF         	movff	_put_cluster$2401,indf2
  7831                           
  7832                           ;tff.c: 220: break;
  7833  001966  D049               	goto	l1037
  7834  001968                     
  7835                           ; BSR set to: 0
  7836                           ;tff.c: 223: if (!move_window(fatsect + clust / 256)) return FALSE;
  7837                           
  7838                           ; BSR set to: 0
  7839  001968  C0A2  F0A6         	movff	put_cluster@clust,??_put_cluster
  7840  00196C  C0A3  F0A7         	movff	put_cluster@clust+1,??_put_cluster+1
  7841  001970  C0A7  F0A6         	movff	??_put_cluster+1,??_put_cluster
  7842  001974  6BA7               	clrf	(??_put_cluster+1)& (0+255),b
  7843  001976  51A6               	movf	??_put_cluster& (0+255),w,b
  7844  001978  25AE               	addwf	put_cluster@fatsect& (0+255),w,b
  7845  00197A  6F8D               	movwf	move_window@sector& (0+255),b
  7846  00197C  51A7               	movf	(??_put_cluster+1)& (0+255),w,b
  7847  00197E  21AF               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
  7848  001980  6F8E               	movwf	(move_window@sector+1)& (0+255),b
  7849  001982  0E00               	movlw	0
  7850  001984  21B0               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
  7851  001986  6F8F               	movwf	(move_window@sector+2)& (0+255),b
  7852  001988  0E00               	movlw	0
  7853  00198A  21B1               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
  7854  00198C  6F90               	movwf	(move_window@sector+3)& (0+255),b
  7855  00198E  ECF8  F00E         	call	_move_window	;wreg free
  7856  001992  0900               	iorlw	0
  7857  001994  A4D8               	btfss	status,2,c
  7858  001996  D002               	goto	l1039
  7859  001998  0E00               	movlw	0
  7860  00199A  0012               	return	
  7861  00199C                     l1039:
  7862                           
  7863                           ;tff.c: 224: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
  7864  00199C  0EFF               	movlw	255
  7865  00199E  0100               	movlb	0	; () banked
  7866  0019A0  6FA6               	movwf	??_put_cluster& (0+255),b
  7867  0019A2  0E01               	movlw	1
  7868  0019A4  6FA7               	movwf	(??_put_cluster+1)& (0+255),b
  7869  0019A6  C0A2  F0A8         	movff	put_cluster@clust,??_put_cluster+2
  7870  0019AA  C0A3  F0A9         	movff	put_cluster@clust+1,??_put_cluster+3
  7871  0019AE  90D8               	bcf	status,0,c
  7872  0019B0  37A8               	rlcf	(??_put_cluster+2)& (0+255),f,b
  7873  0019B2  37A9               	rlcf	(??_put_cluster+3)& (0+255),f,b
  7874  0019B4  51A6               	movf	??_put_cluster& (0+255),w,b
  7875  0019B6  17A8               	andwf	(??_put_cluster+2)& (0+255),f,b
  7876  0019B8  51A7               	movf	(??_put_cluster+1)& (0+255),w,b
  7877  0019BA  17A9               	andwf	(??_put_cluster+3)& (0+255),f,b
  7878  0019BC  0E20               	movlw	32
  7879  0019BE  27A8               	addwf	(??_put_cluster+2)& (0+255),f,b
  7880  0019C0  0E00               	movlw	0
  7881  0019C2  23A9               	addwfc	(??_put_cluster+3)& (0+255),f,b
  7882  0019C4  51A8               	movf	(??_put_cluster+2)& (0+255),w,b
  7883  0019C6  25B6               	addwf	put_cluster@fs& (0+255),w,b
  7884  0019C8  6ED9               	movwf	fsr2l,c
  7885  0019CA  51A9               	movf	(??_put_cluster+3)& (0+255),w,b
  7886  0019CC  21B7               	addwfc	(put_cluster@fs+1)& (0+255),w,b
  7887  0019CE  6EDA               	movwf	fsr2h,c
  7888  0019D0  C0A4  FFDE         	movff	put_cluster@val,postinc2
  7889  0019D4  C0A5  FFDD         	movff	put_cluster@val+1,postdec2
  7890                           
  7891                           ;tff.c: 225: break;
  7892  0019D8  D010               	goto	l1037
  7893  0019DA                     
  7894                           ; BSR set to: 0
  7895                           ;tff.c: 233: return FALSE;
  7896                           
  7897                           ; BSR set to: 0
  7898  0019DA  0E00               	movlw	0
  7899                           
  7900                           ; BSR set to: 0
  7901  0019DC  0012               	return	
  7902  0019DE                     l1024:
  7903                           
  7904                           ; BSR set to: 0
  7905                           
  7906                           ; BSR set to: 0
  7907  0019DE  EE20 F01C          	lfsr	2,28
  7908  0019E2  51B6               	movf	put_cluster@fs& (0+255),w,b
  7909  0019E4  26D9               	addwf	fsr2l,f,c
  7910  0019E6  51B7               	movf	(put_cluster@fs+1)& (0+255),w,b
  7911  0019E8  22DA               	addwfc	fsr2h,f,c
  7912  0019EA  50DF               	movf	indf2,w,c
  7913                           
  7914                           ; Switch size 1, requested type "space"
  7915                           ; Number of cases is 2, Range of values is 1 to 2
  7916                           ; switch strategies available:
  7917                           ; Name         Instructions Cycles
  7918                           ; simple_byte            7     4 (average)
  7919                           ;	Chosen strategy is simple_byte
  7920  0019EC  0A01               	xorlw	1	; case 1
  7921  0019EE  B4D8               	btfsc	status,2,c
  7922  0019F0  D6E5               	goto	l1025
  7923  0019F2  0A03               	xorlw	3	; case 2
  7924  0019F4  B4D8               	btfsc	status,2,c
  7925  0019F6  D7B8               	goto	l1038
  7926  0019F8  D7F0               	goto	l1040
  7927  0019FA                     l1037:
  7928                           
  7929                           ; BSR set to: 0
  7930                           ;tff.c: 235: fs->winflag = 1;
  7931                           
  7932                           ; BSR set to: 0
  7933  0019FA  EE20 F01F          	lfsr	2,31
  7934  0019FE  51B6               	movf	put_cluster@fs& (0+255),w,b
  7935  001A00  26D9               	addwf	fsr2l,f,c
  7936  001A02  51B7               	movf	(put_cluster@fs+1)& (0+255),w,b
  7937  001A04  22DA               	addwfc	fsr2h,f,c
  7938  001A06  0E01               	movlw	1
  7939  001A08  6EDF               	movwf	indf2,c
  7940                           
  7941                           ; BSR set to: 0
  7942                           ;tff.c: 236: return TRUE;
  7943  001A0A  0E01               	movlw	1
  7944  001A0C  0012               	return	
  7945  001A0E                     __end_of_put_cluster:
  7946                           	opt stack 0
  7947                           tblptru	equ	0xFF8
  7948                           tblptrh	equ	0xFF7
  7949                           tblptrl	equ	0xFF6
  7950                           tablat	equ	0xFF5
  7951                           prodh	equ	0xFF4
  7952                           prodl	equ	0xFF3
  7953                           intcon	equ	0xFF2
  7954                           intcon2	equ	0xFF1
  7955                           intcon3	equ	0xFF0
  7956                           postinc0	equ	0xFEE
  7957                           wreg	equ	0xFE8
  7958                           indf1	equ	0xFE7
  7959                           postinc1	equ	0xFE6
  7960                           postdec1	equ	0xFE5
  7961                           fsr1h	equ	0xFE2
  7962                           fsr1l	equ	0xFE1
  7963                           indf2	equ	0xFDF
  7964                           postinc2	equ	0xFDE
  7965                           postdec2	equ	0xFDD
  7966                           plusw2	equ	0xFDB
  7967                           fsr2h	equ	0xFDA
  7968                           fsr2l	equ	0xFD9
  7969                           status	equ	0xFD8
  7970                           
  7971 ;; *************** function _get_cluster *****************
  7972 ;; Defined at:
  7973 ;;		line 154 in file "bibliotecas/tff.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;  clust           2   66[BANK0 ] unsigned short 
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;  fatsect         4   77[BANK0 ] unsigned long 
  7978 ;;  fs              2   83[BANK0 ] PTR struct _FATFS
  7979 ;;		 -> NULL(0), fs(544), 
  7980 ;;  bc              2   81[BANK0 ] unsigned short 
  7981 ;;  wc              2   75[BANK0 ] unsigned short 
  7982 ;; Return value:  Size  Location     Type
  7983 ;;                  2   66[BANK0 ] unsigned short 
  7984 ;; Registers used:
  7985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7986 ;; Tracked objects:
  7987 ;;		On entry : 0/0
  7988 ;;		On exit  : 0/0
  7989 ;;		Unchanged: 0/0
  7990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7991 ;;      Params:         0       2       0       0       0       0       0       0       0
  7992 ;;      Locals:         0      10       0       0       0       0       0       0       0
  7993 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7994 ;;      Totals:         0      19       0       0       0       0       0       0       0
  7995 ;;Total ram usage:       19 bytes
  7996 ;; Hardware stack levels used:    1
  7997 ;; Hardware stack levels required when called:    9
  7998 ;; This function calls:
  7999 ;;		___wmul
  8000 ;;		_move_window
  8001 ;; This function is called by:
  8002 ;;		_remove_chain
  8003 ;;		_create_chain
  8004 ;;		_next_dir_entry
  8005 ;;		_f_read
  8006 ;;		_f_lseek
  8007 ;;		_f_truncate
  8008 ;;		_f_getfree
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text24
  8013  001A0E                     __ptext24:
  8014                           	opt stack 0
  8015  001A0E                     _get_cluster:
  8016                           	opt stack 18
  8017                           
  8018                           ;tff.c: 158: WORD wc, bc;
  8019                           ;tff.c: 159: DWORD fatsect;
  8020                           ;tff.c: 160: FATFS *fs = FatFs;
  8021                           
  8022                           ;incstack = 0
  8023  001A0E  C0EF  F0B3         	movff	_FatFs,get_cluster@fs
  8024  001A12  C0F0  F0B4         	movff	_FatFs+1,get_cluster@fs+1
  8025                           
  8026                           ;tff.c: 163: if (clust >= 2 && clust < fs->max_clust) {
  8027  001A16  0100               	movlb	0	; () banked
  8028  001A18  51A3               	movf	(get_cluster@clust+1)& (0+255),w,b
  8029  001A1A  E104               	bnz	u12640
  8030  001A1C  0E02               	movlw	2
  8031  001A1E  5DA2               	subwf	get_cluster@clust& (0+255),w,b
  8032  001A20  A0D8               	btfss	status,0,c
  8033  001A22  D100               	goto	l1013
  8034  001A24                     u12640:
  8035                           
  8036                           ; BSR set to: 0
  8037  001A24  EE20 F016          	lfsr	2,22
  8038  001A28  51B3               	movf	get_cluster@fs& (0+255),w,b
  8039  001A2A  26D9               	addwf	fsr2l,f,c
  8040  001A2C  51B4               	movf	(get_cluster@fs+1)& (0+255),w,b
  8041  001A2E  22DA               	addwfc	fsr2h,f,c
  8042  001A30  50DE               	movf	postinc2,w,c
  8043  001A32  5DA2               	subwf	get_cluster@clust& (0+255),w,b
  8044  001A34  50DE               	movf	postinc2,w,c
  8045  001A36  59A3               	subwfb	(get_cluster@clust+1)& (0+255),w,b
  8046  001A38  B0D8               	btfsc	status,0,c
  8047  001A3A  D0F4               	goto	l1013
  8048                           
  8049                           ; BSR set to: 0
  8050                           ;tff.c: 164: fatsect = fs->fatbase;
  8051  001A3C  EE20 F008          	lfsr	2,8
  8052  001A40  51B3               	movf	get_cluster@fs& (0+255),w,b
  8053  001A42  26D9               	addwf	fsr2l,f,c
  8054  001A44  51B4               	movf	(get_cluster@fs+1)& (0+255),w,b
  8055  001A46  22DA               	addwfc	fsr2h,f,c
  8056  001A48  CFDE F0AD          	movff	postinc2,get_cluster@fatsect
  8057  001A4C  CFDE F0AE          	movff	postinc2,get_cluster@fatsect+1
  8058  001A50  CFDE F0AF          	movff	postinc2,get_cluster@fatsect+2
  8059  001A54  CFDE F0B0          	movff	postinc2,get_cluster@fatsect+3
  8060                           
  8061                           ;tff.c: 165: switch (fs->fs_type) {
  8062  001A58  D0D8               	goto	l1010
  8063  001A5A                     
  8064                           ; BSR set to: 0
  8065                           ;tff.c: 167: bc = (WORD)clust * 3 / 2;
  8066                           
  8067                           ; BSR set to: 0
  8068  001A5A  C0A2  F01A         	movff	get_cluster@clust,___wmul@multiplier
  8069  001A5E  C0A3  F01B         	movff	get_cluster@clust+1,___wmul@multiplier+1
  8070  001A62  0E00               	movlw	0
  8071  001A64  6E1D               	movwf	___wmul@multiplicand+1,c
  8072  001A66  0E03               	movlw	3
  8073  001A68  6E1C               	movwf	___wmul@multiplicand,c
  8074  001A6A  ECB5  F01C         	call	___wmul	;wreg free
  8075  001A6E  90D8               	bcf	status,0,c
  8076  001A70  301B               	rrcf	?___wmul+1,w,c
  8077  001A72  0100               	movlb	0	; () banked
  8078  001A74  6FA4               	movwf	??_get_cluster& (0+255),b
  8079  001A76  301A               	rrcf	?___wmul,w,c
  8080  001A78  6FB1               	movwf	get_cluster@bc& (0+255),b
  8081  001A7A  C0A4  F0B2         	movff	??_get_cluster,get_cluster@bc+1
  8082                           
  8083                           ; BSR set to: 0
  8084                           ;tff.c: 168: if (!move_window(fatsect + bc / 512U)) break;
  8085  001A7E  C0B1  F0A4         	movff	get_cluster@bc,??_get_cluster
  8086  001A82  C0B2  F0A5         	movff	get_cluster@bc+1,??_get_cluster+1
  8087  001A86  0E09               	movlw	9
  8088  001A88  6FA6               	movwf	(??_get_cluster+2)& (0+255),b
  8089  001A8A                     u12665:
  8090  001A8A  90D8               	bcf	status,0,c
  8091  001A8C  33A5               	rrcf	(??_get_cluster+1)& (0+255),f,b
  8092  001A8E  33A4               	rrcf	??_get_cluster& (0+255),f,b
  8093  001A90  2FA6               	decfsz	(??_get_cluster+2)& (0+255),f,b
  8094  001A92  D7FB               	goto	u12665
  8095  001A94  51A4               	movf	??_get_cluster& (0+255),w,b
  8096  001A96  25AD               	addwf	get_cluster@fatsect& (0+255),w,b
  8097  001A98  6F8D               	movwf	move_window@sector& (0+255),b
  8098  001A9A  51A5               	movf	(??_get_cluster+1)& (0+255),w,b
  8099  001A9C  21AE               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
  8100  001A9E  6F8E               	movwf	(move_window@sector+1)& (0+255),b
  8101  001AA0  0E00               	movlw	0
  8102  001AA2  21AF               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
  8103  001AA4  6F8F               	movwf	(move_window@sector+2)& (0+255),b
  8104  001AA6  0E00               	movlw	0
  8105  001AA8  21B0               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
  8106  001AAA  6F90               	movwf	(move_window@sector+3)& (0+255),b
  8107  001AAC  ECF8  F00E         	call	_move_window	;wreg free
  8108  001AB0  0900               	iorlw	0
  8109  001AB2  B4D8               	btfsc	status,2,c
  8110  001AB4  D0B7               	goto	l1013
  8111                           
  8112                           ;tff.c: 169: wc = fs->win[bc % 512U]; bc++;
  8113  001AB6  0EFF               	movlw	255
  8114  001AB8  0100               	movlb	0	; () banked
  8115  001ABA  6FA4               	movwf	??_get_cluster& (0+255),b
  8116  001ABC  0E01               	movlw	1
  8117  001ABE  6FA5               	movwf	(??_get_cluster+1)& (0+255),b
  8118  001AC0  C0B1  F0A6         	movff	get_cluster@bc,??_get_cluster+2
  8119  001AC4  C0B2  F0A7         	movff	get_cluster@bc+1,??_get_cluster+3
  8120  001AC8  51A4               	movf	??_get_cluster& (0+255),w,b
  8121  001ACA  17A6               	andwf	(??_get_cluster+2)& (0+255),f,b
  8122  001ACC  51A5               	movf	(??_get_cluster+1)& (0+255),w,b
  8123  001ACE  17A7               	andwf	(??_get_cluster+3)& (0+255),f,b
  8124  001AD0  0E20               	movlw	32
  8125  001AD2  27A6               	addwf	(??_get_cluster+2)& (0+255),f,b
  8126  001AD4  0E00               	movlw	0
  8127  001AD6  23A7               	addwfc	(??_get_cluster+3)& (0+255),f,b
  8128  001AD8  51A6               	movf	(??_get_cluster+2)& (0+255),w,b
  8129  001ADA  25B3               	addwf	get_cluster@fs& (0+255),w,b
  8130  001ADC  6ED9               	movwf	fsr2l,c
  8131  001ADE  51A7               	movf	(??_get_cluster+3)& (0+255),w,b
  8132  001AE0  21B4               	addwfc	(get_cluster@fs+1)& (0+255),w,b
  8133  001AE2  6EDA               	movwf	fsr2h,c
  8134  001AE4  50DF               	movf	indf2,w,c
  8135  001AE6  6FA8               	movwf	(??_get_cluster+4)& (0+255),b
  8136  001AE8  51A8               	movf	(??_get_cluster+4)& (0+255),w,b
  8137  001AEA  6FAB               	movwf	get_cluster@wc& (0+255),b
  8138  001AEC  6BAC               	clrf	(get_cluster@wc+1)& (0+255),b
  8139                           
  8140                           ; BSR set to: 0
  8141  001AEE  4BB1               	infsnz	get_cluster@bc& (0+255),f,b
  8142  001AF0  2BB2               	incf	(get_cluster@bc+1)& (0+255),f,b
  8143                           
  8144                           ; BSR set to: 0
  8145                           ;tff.c: 170: if (!move_window(fatsect + bc / 512U)) break;
  8146  001AF2  C0B1  F0A4         	movff	get_cluster@bc,??_get_cluster
  8147  001AF6  C0B2  F0A5         	movff	get_cluster@bc+1,??_get_cluster+1
  8148  001AFA  0E09               	movlw	9
  8149  001AFC  6FA6               	movwf	(??_get_cluster+2)& (0+255),b
  8150  001AFE                     u12685:
  8151  001AFE  90D8               	bcf	status,0,c
  8152  001B00  33A5               	rrcf	(??_get_cluster+1)& (0+255),f,b
  8153  001B02  33A4               	rrcf	??_get_cluster& (0+255),f,b
  8154  001B04  2FA6               	decfsz	(??_get_cluster+2)& (0+255),f,b
  8155  001B06  D7FB               	goto	u12685
  8156  001B08  51A4               	movf	??_get_cluster& (0+255),w,b
  8157  001B0A  25AD               	addwf	get_cluster@fatsect& (0+255),w,b
  8158  001B0C  6F8D               	movwf	move_window@sector& (0+255),b
  8159  001B0E  51A5               	movf	(??_get_cluster+1)& (0+255),w,b
  8160  001B10  21AE               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
  8161  001B12  6F8E               	movwf	(move_window@sector+1)& (0+255),b
  8162  001B14  0E00               	movlw	0
  8163  001B16  21AF               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
  8164  001B18  6F8F               	movwf	(move_window@sector+2)& (0+255),b
  8165  001B1A  0E00               	movlw	0
  8166  001B1C  21B0               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
  8167  001B1E  6F90               	movwf	(move_window@sector+3)& (0+255),b
  8168  001B20  ECF8  F00E         	call	_move_window	;wreg free
  8169  001B24  0900               	iorlw	0
  8170  001B26  B4D8               	btfsc	status,2,c
  8171  001B28  D07D               	goto	l1013
  8172                           
  8173                           ;tff.c: 171: wc |= (WORD)fs->win[bc % 512U] << 8;
  8174  001B2A  0EFF               	movlw	255
  8175  001B2C  0100               	movlb	0	; () banked
  8176  001B2E  6FA4               	movwf	??_get_cluster& (0+255),b
  8177  001B30  0E01               	movlw	1
  8178  001B32  6FA5               	movwf	(??_get_cluster+1)& (0+255),b
  8179  001B34  C0B1  F0A6         	movff	get_cluster@bc,??_get_cluster+2
  8180  001B38  C0B2  F0A7         	movff	get_cluster@bc+1,??_get_cluster+3
  8181  001B3C  51A4               	movf	??_get_cluster& (0+255),w,b
  8182  001B3E  17A6               	andwf	(??_get_cluster+2)& (0+255),f,b
  8183  001B40  51A5               	movf	(??_get_cluster+1)& (0+255),w,b
  8184  001B42  17A7               	andwf	(??_get_cluster+3)& (0+255),f,b
  8185  001B44  0E20               	movlw	32
  8186  001B46  27A6               	addwf	(??_get_cluster+2)& (0+255),f,b
  8187  001B48  0E00               	movlw	0
  8188  001B4A  23A7               	addwfc	(??_get_cluster+3)& (0+255),f,b
  8189  001B4C  51A6               	movf	(??_get_cluster+2)& (0+255),w,b
  8190  001B4E  25B3               	addwf	get_cluster@fs& (0+255),w,b
  8191  001B50  6ED9               	movwf	fsr2l,c
  8192  001B52  51A7               	movf	(??_get_cluster+3)& (0+255),w,b
  8193  001B54  21B4               	addwfc	(get_cluster@fs+1)& (0+255),w,b
  8194  001B56  6EDA               	movwf	fsr2h,c
  8195  001B58  50DF               	movf	indf2,w,c
  8196  001B5A  6FA8               	movwf	(??_get_cluster+4)& (0+255),b
  8197  001B5C  51A8               	movf	(??_get_cluster+4)& (0+255),w,b
  8198  001B5E  6FAA               	movwf	(??_get_cluster+6)& (0+255),b
  8199  001B60  6BA9               	clrf	(??_get_cluster+5)& (0+255),b
  8200  001B62  51A9               	movf	(??_get_cluster+5)& (0+255),w,b
  8201  001B64  13AB               	iorwf	get_cluster@wc& (0+255),f,b
  8202  001B66  51AA               	movf	(??_get_cluster+6)& (0+255),w,b
  8203  001B68  13AC               	iorwf	(get_cluster@wc+1)& (0+255),f,b
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;tff.c: 172: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
  8207  001B6A  B1A2               	btfsc	get_cluster@clust& (0+255),0,b
  8208  001B6C  D007               	goto	l1016
  8209                           
  8210                           ; BSR set to: 0
  8211  001B6E  0EFF               	movlw	255
  8212  001B70  15AB               	andwf	get_cluster@wc& (0+255),w,b
  8213  001B72  6FA2               	movwf	?_get_cluster& (0+255),b
  8214  001B74  0E0F               	movlw	15
  8215  001B76  15AC               	andwf	(get_cluster@wc+1)& (0+255),w,b
  8216  001B78  6FA3               	movwf	(?_get_cluster+1)& (0+255),b
  8217  001B7A  0012               	return	
  8218  001B7C                     l1016:
  8219                           
  8220                           ; BSR set to: 0
  8221                           
  8222                           ; BSR set to: 0
  8223  001B7C  C0AB  F0A4         	movff	get_cluster@wc,??_get_cluster
  8224  001B80  C0AC  F0A5         	movff	get_cluster@wc+1,??_get_cluster+1
  8225  001B84  0E04               	movlw	4
  8226  001B86  6FA6               	movwf	(??_get_cluster+2)& (0+255),b
  8227  001B88                     u12715:
  8228  001B88  90D8               	bcf	status,0,c
  8229  001B8A  33A5               	rrcf	(??_get_cluster+1)& (0+255),f,b
  8230  001B8C  33A4               	rrcf	??_get_cluster& (0+255),f,b
  8231  001B8E  2FA6               	decfsz	(??_get_cluster+2)& (0+255),f,b
  8232  001B90  D7FB               	goto	u12715
  8233  001B92  C0A4  F0A2         	movff	??_get_cluster,?_get_cluster
  8234  001B96  C0A5  F0A3         	movff	??_get_cluster+1,?_get_cluster+1
  8235                           
  8236                           ; BSR set to: 0
  8237                           
  8238                           ; BSR set to: 0
  8239  001B9A  0012               	return	
  8240  001B9C                     
  8241                           ; BSR set to: 0
  8242                           ;tff.c: 175: if (!move_window(fatsect + clust / 256)) break;
  8243                           
  8244                           ; BSR set to: 0
  8245  001B9C  C0A2  F0A4         	movff	get_cluster@clust,??_get_cluster
  8246  001BA0  C0A3  F0A5         	movff	get_cluster@clust+1,??_get_cluster+1
  8247  001BA4  C0A5  F0A4         	movff	??_get_cluster+1,??_get_cluster
  8248  001BA8  6BA5               	clrf	(??_get_cluster+1)& (0+255),b
  8249  001BAA  51A4               	movf	??_get_cluster& (0+255),w,b
  8250  001BAC  25AD               	addwf	get_cluster@fatsect& (0+255),w,b
  8251  001BAE  6F8D               	movwf	move_window@sector& (0+255),b
  8252  001BB0  51A5               	movf	(??_get_cluster+1)& (0+255),w,b
  8253  001BB2  21AE               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
  8254  001BB4  6F8E               	movwf	(move_window@sector+1)& (0+255),b
  8255  001BB6  0E00               	movlw	0
  8256  001BB8  21AF               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
  8257  001BBA  6F8F               	movwf	(move_window@sector+2)& (0+255),b
  8258  001BBC  0E00               	movlw	0
  8259  001BBE  21B0               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
  8260  001BC0  6F90               	movwf	(move_window@sector+3)& (0+255),b
  8261  001BC2  ECF8  F00E         	call	_move_window	;wreg free
  8262  001BC6  0900               	iorlw	0
  8263  001BC8  B4D8               	btfsc	status,2,c
  8264  001BCA  D02C               	goto	l1013
  8265                           
  8266                           ;tff.c: 176: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
  8267  001BCC  0EFF               	movlw	255
  8268  001BCE  0100               	movlb	0	; () banked
  8269  001BD0  6FA4               	movwf	??_get_cluster& (0+255),b
  8270  001BD2  0E01               	movlw	1
  8271  001BD4  6FA5               	movwf	(??_get_cluster+1)& (0+255),b
  8272  001BD6  C0A2  F0A6         	movff	get_cluster@clust,??_get_cluster+2
  8273  001BDA  C0A3  F0A7         	movff	get_cluster@clust+1,??_get_cluster+3
  8274  001BDE  90D8               	bcf	status,0,c
  8275  001BE0  37A6               	rlcf	(??_get_cluster+2)& (0+255),f,b
  8276  001BE2  37A7               	rlcf	(??_get_cluster+3)& (0+255),f,b
  8277  001BE4  51A4               	movf	??_get_cluster& (0+255),w,b
  8278  001BE6  17A6               	andwf	(??_get_cluster+2)& (0+255),f,b
  8279  001BE8  51A5               	movf	(??_get_cluster+1)& (0+255),w,b
  8280  001BEA  17A7               	andwf	(??_get_cluster+3)& (0+255),f,b
  8281  001BEC  0E20               	movlw	32
  8282  001BEE  27A6               	addwf	(??_get_cluster+2)& (0+255),f,b
  8283  001BF0  0E00               	movlw	0
  8284  001BF2  23A7               	addwfc	(??_get_cluster+3)& (0+255),f,b
  8285  001BF4  51A6               	movf	(??_get_cluster+2)& (0+255),w,b
  8286  001BF6  25B3               	addwf	get_cluster@fs& (0+255),w,b
  8287  001BF8  6ED9               	movwf	fsr2l,c
  8288  001BFA  51A7               	movf	(??_get_cluster+3)& (0+255),w,b
  8289  001BFC  21B4               	addwfc	(get_cluster@fs+1)& (0+255),w,b
  8290  001BFE  6EDA               	movwf	fsr2h,c
  8291  001C00  CFDE F0A2          	movff	postinc2,?_get_cluster
  8292  001C04  CFDD F0A3          	movff	postdec2,?_get_cluster+1
  8293                           
  8294                           ; BSR set to: 0
  8295  001C08  0012               	return	
  8296  001C0A                     l1010:
  8297                           
  8298                           ; BSR set to: 0
  8299                           
  8300                           ; BSR set to: 0
  8301  001C0A  EE20 F01C          	lfsr	2,28
  8302  001C0E  51B3               	movf	get_cluster@fs& (0+255),w,b
  8303  001C10  26D9               	addwf	fsr2l,f,c
  8304  001C12  51B4               	movf	(get_cluster@fs+1)& (0+255),w,b
  8305  001C14  22DA               	addwfc	fsr2h,f,c
  8306  001C16  50DF               	movf	indf2,w,c
  8307                           
  8308                           ; Switch size 1, requested type "space"
  8309                           ; Number of cases is 2, Range of values is 1 to 2
  8310                           ; switch strategies available:
  8311                           ; Name         Instructions Cycles
  8312                           ; simple_byte            7     4 (average)
  8313                           ;	Chosen strategy is simple_byte
  8314  001C18  0A01               	xorlw	1	; case 1
  8315  001C1A  B4D8               	btfsc	status,2,c
  8316  001C1C  D71E               	goto	l1011
  8317  001C1E  0A03               	xorlw	3	; case 2
  8318  001C20  B4D8               	btfsc	status,2,c
  8319  001C22  D7BC               	goto	l1020
  8320  001C24                     l1013:
  8321                           
  8322                           ;tff.c: 183: }
  8323                           ;tff.c: 185: return 1;
  8324                           
  8325                           ; BSR set to: 0
  8326                           
  8327                           ; BSR set to: 0
  8328  001C24  0E00               	movlw	0
  8329  001C26  0100               	movlb	0	; () banked
  8330  001C28  6FA3               	movwf	(?_get_cluster+1)& (0+255),b
  8331  001C2A  0E01               	movlw	1
  8332  001C2C  6FA2               	movwf	?_get_cluster& (0+255),b
  8333  001C2E  0012               	return	
  8334  001C30                     __end_of_get_cluster:
  8335                           	opt stack 0
  8336                           tblptru	equ	0xFF8
  8337                           tblptrh	equ	0xFF7
  8338                           tblptrl	equ	0xFF6
  8339                           tablat	equ	0xFF5
  8340                           prodh	equ	0xFF4
  8341                           prodl	equ	0xFF3
  8342                           intcon	equ	0xFF2
  8343                           intcon2	equ	0xFF1
  8344                           intcon3	equ	0xFF0
  8345                           postinc0	equ	0xFEE
  8346                           wreg	equ	0xFE8
  8347                           indf1	equ	0xFE7
  8348                           postinc1	equ	0xFE6
  8349                           postdec1	equ	0xFE5
  8350                           fsr1h	equ	0xFE2
  8351                           fsr1l	equ	0xFE1
  8352                           indf2	equ	0xFDF
  8353                           postinc2	equ	0xFDE
  8354                           postdec2	equ	0xFDD
  8355                           plusw2	equ	0xFDB
  8356                           fsr2h	equ	0xFDA
  8357                           fsr2l	equ	0xFD9
  8358                           status	equ	0xFD8
  8359                           
  8360 ;; *************** function ___wmul *****************
  8361 ;; Defined at:
  8362 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8363 ;; Parameters:    Size  Location     Type
  8364 ;;  multiplier      2   25[COMRAM] unsigned int 
  8365 ;;  multiplicand    2   27[COMRAM] unsigned int 
  8366 ;; Auto vars:     Size  Location     Type
  8367 ;;  product         2   29[COMRAM] unsigned int 
  8368 ;; Return value:  Size  Location     Type
  8369 ;;                  2   25[COMRAM] unsigned int 
  8370 ;; Registers used:
  8371 ;;		wreg, status,2, status,0, prodl, prodh
  8372 ;; Tracked objects:
  8373 ;;		On entry : 0/0
  8374 ;;		On exit  : 0/0
  8375 ;;		Unchanged: 0/0
  8376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8377 ;;      Params:         4       0       0       0       0       0       0       0       0
  8378 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8379 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8380 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8381 ;;Total ram usage:        6 bytes
  8382 ;; Hardware stack levels used:    1
  8383 ;; Hardware stack levels required when called:    2
  8384 ;; This function calls:
  8385 ;;		Nothing
  8386 ;; This function is called by:
  8387 ;;		_get_cluster
  8388 ;;		_put_cluster
  8389 ;;		_sprintf
  8390 ;;		_scale
  8391 ;;		_fround
  8392 ;; This function uses a non-reentrant model
  8393 ;;
  8394                           
  8395                           	psect	text25
  8396  00396A                     __ptext25:
  8397                           	opt stack 0
  8398  00396A                     ___wmul:
  8399                           	opt stack 24
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;incstack = 0
  8403  00396A  501A               	movf	___wmul@multiplier,w,c
  8404  00396C  021C               	mulwf	___wmul@multiplicand,c
  8405  00396E  CFF3 F01E          	movff	prodl,___wmul@product
  8406  003972  CFF4 F01F          	movff	prodh,___wmul@product+1
  8407  003976  501A               	movf	___wmul@multiplier,w,c
  8408  003978  021D               	mulwf	___wmul@multiplicand+1,c
  8409  00397A  50F3               	movf	prodl,w,c
  8410  00397C  261F               	addwf	___wmul@product+1,f,c
  8411  00397E  501B               	movf	___wmul@multiplier+1,w,c
  8412  003980  021C               	mulwf	___wmul@multiplicand,c
  8413  003982  50F3               	movf	prodl,w,c
  8414  003984  261F               	addwf	___wmul@product+1,f,c
  8415  003986  C01E  F01A         	movff	___wmul@product,?___wmul
  8416  00398A  C01F  F01B         	movff	___wmul@product+1,?___wmul+1
  8417  00398E  0012               	return	
  8418  003990                     __end_of___wmul:
  8419                           	opt stack 0
  8420                           tblptru	equ	0xFF8
  8421                           tblptrh	equ	0xFF7
  8422                           tblptrl	equ	0xFF6
  8423                           tablat	equ	0xFF5
  8424                           prodh	equ	0xFF4
  8425                           prodl	equ	0xFF3
  8426                           intcon	equ	0xFF2
  8427                           intcon2	equ	0xFF1
  8428                           intcon3	equ	0xFF0
  8429                           postinc0	equ	0xFEE
  8430                           wreg	equ	0xFE8
  8431                           indf1	equ	0xFE7
  8432                           postinc1	equ	0xFE6
  8433                           postdec1	equ	0xFE5
  8434                           fsr1h	equ	0xFE2
  8435                           fsr1l	equ	0xFE1
  8436                           indf2	equ	0xFDF
  8437                           postinc2	equ	0xFDE
  8438                           postdec2	equ	0xFDD
  8439                           plusw2	equ	0xFDB
  8440                           fsr2h	equ	0xFDA
  8441                           fsr2l	equ	0xFD9
  8442                           status	equ	0xFD8
  8443                           
  8444 ;; *************** function _memcpy *****************
  8445 ;; Defined at:
  8446 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  8447 ;; Parameters:    Size  Location     Type
  8448 ;;  d1              2   25[COMRAM] PTR void 
  8449 ;;		 -> fs.win(512), f_rename@direntry(21), NULL(0), fs(544), 
  8450 ;;  s1              2   27[COMRAM] PTR const void 
  8451 ;;		 -> fs.win(512), f_rename@direntry(21), f_rename@fn(12), f_mkdir@fn(12), 
  8452 ;;		 -> f_open@fn(12), NULL(0), STR_13(5), fs(544), 
  8453 ;;  n               2   29[COMRAM] unsigned int 
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;  s               2   34[COMRAM] PTR const unsigned char 
  8456 ;;		 -> fs.win(512), f_rename@direntry(21), f_rename@fn(12), f_mkdir@fn(12), 
  8457 ;;		 -> f_open@fn(12), NULL(0), STR_13(5), fs(544), 
  8458 ;;  d               2   32[COMRAM] PTR unsigned char 
  8459 ;;		 -> fs.win(512), f_rename@direntry(21), NULL(0), fs(544), 
  8460 ;;  tmp             1   31[COMRAM] unsigned char 
  8461 ;; Return value:  Size  Location     Type
  8462 ;;                  2   25[COMRAM] PTR void 
  8463 ;; Registers used:
  8464 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8465 ;; Tracked objects:
  8466 ;;		On entry : 0/0
  8467 ;;		On exit  : 0/0
  8468 ;;		Unchanged: 0/0
  8469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8470 ;;      Params:         6       0       0       0       0       0       0       0       0
  8471 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8472 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8473 ;;      Totals:        11       0       0       0       0       0       0       0       0
  8474 ;;Total ram usage:       11 bytes
  8475 ;; Hardware stack levels used:    1
  8476 ;; Hardware stack levels required when called:    2
  8477 ;; This function calls:
  8478 ;;		Nothing
  8479 ;; This function is called by:
  8480 ;;		_f_open
  8481 ;;		_f_write
  8482 ;;		_f_read
  8483 ;;		_f_mkdir
  8484 ;;		_f_rename
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           	psect	text26
  8489  00345E                     __ptext26:
  8490                           	opt stack 0
  8491  00345E                     _memcpy:
  8492                           	opt stack 26
  8493                           
  8494                           ;incstack = 0
  8495  00345E  C01C  F023         	movff	memcpy@s1,memcpy@s
  8496  003462  C01D  F024         	movff	memcpy@s1+1,memcpy@s+1
  8497  003466  C01A  F021         	movff	memcpy@d1,memcpy@d
  8498  00346A  C01B  F022         	movff	memcpy@d1+1,memcpy@d+1
  8499  00346E  D01B               	goto	l2141
  8500  003470                     l11858:
  8501  003470  C023  FFF6         	movff	memcpy@s,tblptrl
  8502  003474  C024  FFF7         	movff	memcpy@s+1,tblptrh
  8503  003478  6AF8               	clrf	tblptru,c
  8504  00347A  0E07               	movlw	(high __ramtop+-1)
  8505  00347C  64F7               	cpfsgt	tblptrh,c
  8506  00347E  D003               	bra	u14047
  8507  003480  0008               	tblrd		*
  8508  003482  50F5               	movf	tablat,w,c
  8509  003484  D005               	bra	u14040
  8510  003486                     u14047:
  8511  003486  CFF6 FFE9          	movff	tblptrl,fsr0l
  8512  00348A  CFF7 FFEA          	movff	tblptrh,fsr0h
  8513  00348E  50EF               	movf	indf0,w,c
  8514  003490                     u14040:
  8515  003490  6E20               	movwf	memcpy@tmp,c
  8516  003492  4A23               	infsnz	memcpy@s,f,c
  8517  003494  2A24               	incf	memcpy@s+1,f,c
  8518  003496  C021  FFD9         	movff	memcpy@d,fsr2l
  8519  00349A  C022  FFDA         	movff	memcpy@d+1,fsr2h
  8520  00349E  C020  FFDF         	movff	memcpy@tmp,indf2
  8521  0034A2  4A21               	infsnz	memcpy@d,f,c
  8522  0034A4  2A22               	incf	memcpy@d+1,f,c
  8523  0034A6                     l2141:
  8524  0034A6  061E               	decf	memcpy@n,f,c
  8525  0034A8  A0D8               	btfss	status,0,c
  8526  0034AA  061F               	decf	memcpy@n+1,f,c
  8527  0034AC  281E               	incf	memcpy@n,w,c
  8528  0034AE  E1E0               	bnz	l11858
  8529  0034B0  281F               	incf	memcpy@n+1,w,c
  8530  0034B2  B4D8               	btfsc	status,2,c
  8531  0034B4  0012               	return	
  8532  0034B6  D7DC               	goto	l2142
  8533  0034B8                     __end_of_memcpy:
  8534                           	opt stack 0
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           prodh	equ	0xFF4
  8540                           prodl	equ	0xFF3
  8541                           intcon	equ	0xFF2
  8542                           intcon2	equ	0xFF1
  8543                           intcon3	equ	0xFF0
  8544                           indf0	equ	0xFEF
  8545                           postinc0	equ	0xFEE
  8546                           fsr0h	equ	0xFEA
  8547                           fsr0l	equ	0xFE9
  8548                           wreg	equ	0xFE8
  8549                           indf1	equ	0xFE7
  8550                           postinc1	equ	0xFE6
  8551                           postdec1	equ	0xFE5
  8552                           fsr1h	equ	0xFE2
  8553                           fsr1l	equ	0xFE1
  8554                           indf2	equ	0xFDF
  8555                           postinc2	equ	0xFDE
  8556                           postdec2	equ	0xFDD
  8557                           plusw2	equ	0xFDB
  8558                           fsr2h	equ	0xFDA
  8559                           fsr2l	equ	0xFD9
  8560                           status	equ	0xFD8
  8561                           
  8562 ;; *************** function _auto_mount *****************
  8563 ;; Defined at:
  8564 ;;		line 651 in file "bibliotecas/tff.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;  path            2   53[BANK0 ] PTR PTR const unsigned c
  8567 ;;		 -> f_rename@path_old(2), f_utime@path(2), f_chmod@path(2), f_mkdir@path(2), 
  8568 ;;		 -> f_unlink@path(2), f_getfree@drv(2), f_stat@path(2), f_opendir@path(2), 
  8569 ;;		 -> f_open@path(2), 
  8570 ;;  chk_wp          1   55[BANK0 ] unsigned char 
  8571 ;; Auto vars:     Size  Location     Type
  8572 ;;  fatsize         4   87[BANK0 ] unsigned long 
  8573 ;;  totalsect       4   79[BANK0 ] unsigned long 
  8574 ;;  bootsect        4   75[BANK0 ] unsigned long 
  8575 ;;  maxclust        4   71[BANK0 ] unsigned long 
  8576 ;;  fs              2   91[BANK0 ] PTR struct _FATFS
  8577 ;;		 -> NULL(0), fs(544), 
  8578 ;;  p               2   83[BANK0 ] PTR const unsigned char 
  8579 ;;		 -> STR_12(10), 
  8580 ;;  fmt             1   86[BANK0 ] unsigned char 
  8581 ;;  stat            1   85[BANK0 ] unsigned char 
  8582 ;; Return value:  Size  Location     Type
  8583 ;;                  1    wreg      enum E155
  8584 ;; Registers used:
  8585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8586 ;; Tracked objects:
  8587 ;;		On entry : 0/0
  8588 ;;		On exit  : 0/0
  8589 ;;		Unchanged: 0/0
  8590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8591 ;;      Params:         0       3       0       0       0       0       0       0       0
  8592 ;;      Locals:         0      22       0       0       0       0       0       0       0
  8593 ;;      Temps:          0      15       0       0       0       0       0       0       0
  8594 ;;      Totals:         0      40       0       0       0       0       0       0       0
  8595 ;;Total ram usage:       40 bytes
  8596 ;; Hardware stack levels used:    1
  8597 ;; Hardware stack levels required when called:    9
  8598 ;; This function calls:
  8599 ;;		___lldiv
  8600 ;;		___lmul
  8601 ;;		_check_fs
  8602 ;;		_disk_initialize
  8603 ;;		_disk_status
  8604 ;;		_escreve_inteiro_lcd
  8605 ;;		_memset
  8606 ;;		_posicao_cursor_lcd
  8607 ;; This function is called by:
  8608 ;;		_f_open
  8609 ;;		_f_opendir
  8610 ;;		_f_stat
  8611 ;;		_f_getfree
  8612 ;;		_f_unlink
  8613 ;;		_f_mkdir
  8614 ;;		_f_chmod
  8615 ;;		_f_utime
  8616 ;;		_f_rename
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           	psect	text27
  8621  0005DE                     __ptext27:
  8622                           	opt stack 0
  8623  0005DE                     _auto_mount:
  8624                           	opt stack 19
  8625                           
  8626                           ;tff.c: 656: BYTE fmt;
  8627                           ;tff.c: 657: DSTATUS stat;
  8628                           ;tff.c: 658: DWORD bootsect, fatsize, totalsect, maxclust;
  8629                           ;tff.c: 659: const char *p = *path;
  8630                           
  8631                           ;incstack = 0
  8632  0005DE  C095  FFD9         	movff	auto_mount@path,fsr2l
  8633  0005E2  C096  FFDA         	movff	auto_mount@path+1,fsr2h
  8634  0005E6  CFDE F0B3          	movff	postinc2,auto_mount@p
  8635  0005EA  CFDD F0B4          	movff	postdec2,auto_mount@p+1
  8636                           
  8637                           ;tff.c: 660: FATFS *fs;
  8638                           ;tff.c: 663: while (*p == ' ') p++;
  8639  0005EE  D003               	goto	l1203
  8640  0005F0  0100               	movlb	0	; () banked
  8641  0005F2  4BB3               	infsnz	auto_mount@p& (0+255),f,b
  8642  0005F4  2BB4               	incf	(auto_mount@p+1)& (0+255),f,b
  8643  0005F6                     l1203:
  8644                           
  8645                           ; BSR set to: 0
  8646  0005F6  C0B3  FFF6         	movff	auto_mount@p,tblptrl
  8647  0005FA  C0B4  FFF7         	movff	auto_mount@p+1,tblptrh
  8648  0005FE                     	if	0	;tblptru may be non-zero
  8649  0005FE                     	endif
  8650  0005FE                     	if	0	;tblptru may be non-zero
  8651  0005FE                     	endif
  8652  0005FE  0008               	tblrd		*
  8653  000600  50F5               	movf	tablat,w,c
  8654  000602  0A20               	xorlw	32
  8655  000604  B4D8               	btfsc	status,2,c
  8656  000606  D7F4               	goto	l1204
  8657                           
  8658                           ;tff.c: 664: if (*p == '/') p++;
  8659  000608  C0B3  FFF6         	movff	auto_mount@p,tblptrl
  8660  00060C  C0B4  FFF7         	movff	auto_mount@p+1,tblptrh
  8661  000610                     	if	0	;tblptru may be non-zero
  8662  000610                     	endif
  8663  000610                     	if	0	;tblptru may be non-zero
  8664  000610                     	endif
  8665  000610  0008               	tblrd		*
  8666  000612  50F5               	movf	tablat,w,c
  8667  000614  0A2F               	xorlw	47
  8668  000616  A4D8               	btfss	status,2,c
  8669  000618  D003               	goto	l1206
  8670  00061A  0100               	movlb	0	; () banked
  8671  00061C  4BB3               	infsnz	auto_mount@p& (0+255),f,b
  8672  00061E  2BB4               	incf	(auto_mount@p+1)& (0+255),f,b
  8673  000620                     l1206:
  8674                           
  8675                           ;tff.c: 665: *path = p;
  8676                           
  8677                           ; BSR set to: 0
  8678  000620  C095  FFD9         	movff	auto_mount@path,fsr2l
  8679  000624  C096  FFDA         	movff	auto_mount@path+1,fsr2h
  8680  000628  C0B3  FFDE         	movff	auto_mount@p,postinc2
  8681  00062C  C0B4  FFDD         	movff	auto_mount@p+1,postdec2
  8682                           
  8683                           ;tff.c: 668: fs = FatFs;
  8684  000630  C0EF  F0BB         	movff	_FatFs,auto_mount@fs
  8685  000634  C0F0  F0BC         	movff	_FatFs+1,auto_mount@fs+1
  8686                           
  8687                           ;tff.c: 669: if (!fs) return FR_NOT_ENABLED;
  8688  000638  0100               	movlb	0	; () banked
  8689  00063A  51BB               	movf	auto_mount@fs& (0+255),w,b
  8690  00063C  11BC               	iorwf	(auto_mount@fs+1)& (0+255),w,b
  8691  00063E  A4D8               	btfss	status,2,c
  8692  000640  D002               	goto	l1207
  8693                           
  8694                           ; BSR set to: 0
  8695  000642  0E0A               	movlw	10
  8696                           
  8697                           ; BSR set to: 0
  8698  000644  0012               	return	
  8699  000646                     l1207:
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;tff.c: 671: if (fs->fs_type) {
  8703                           
  8704                           ; BSR set to: 0
  8705  000646  EE20 F01C          	lfsr	2,28
  8706  00064A  51BB               	movf	auto_mount@fs& (0+255),w,b
  8707  00064C  26D9               	addwf	fsr2l,f,c
  8708  00064E  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  8709  000650  22DA               	addwfc	fsr2h,f,c
  8710  000652  50DF               	movf	indf2,w,c
  8711  000654  B4D8               	btfsc	status,2,c
  8712  000656  D00F               	goto	l1210
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;tff.c: 672: stat = disk_status(0);
  8716  000658  0E00               	movlw	0
  8717  00065A  ECB0  F01B         	call	_disk_status
  8718  00065E  0100               	movlb	0	; () banked
  8719  000660  6FB5               	movwf	auto_mount@stat& (0+255),b
  8720                           
  8721                           ; BSR set to: 0
  8722                           ;tff.c: 673: if (!(stat & 0x01)) {
  8723  000662  B1B5               	btfsc	auto_mount@stat& (0+255),0,b
  8724  000664  D008               	goto	l1210
  8725                           
  8726                           ; BSR set to: 0
  8727                           ;tff.c: 675: if (chk_wp && (stat & 0x04))
  8728  000666  5197               	movf	auto_mount@chk_wp& (0+255),w,b
  8729  000668  A4D8               	btfss	status,2,c
  8730                           
  8731                           ; BSR set to: 0
  8732  00066A  A5B5               	btfss	auto_mount@stat& (0+255),2,b
  8733  00066C  D002               	goto	l1211
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;tff.c: 676: return FR_WRITE_PROTECTED;
  8737  00066E  0E09               	movlw	9
  8738                           
  8739                           ; BSR set to: 0
  8740  000670  0012               	return	
  8741  000672                     l1211:
  8742                           
  8743                           ; BSR set to: 0
  8744                           ;tff.c: 678: return FR_OK;
  8745                           
  8746                           ; BSR set to: 0
  8747  000672  0E00               	movlw	0
  8748                           
  8749                           ; BSR set to: 0
  8750  000674  0012               	return	
  8751  000676                     l1210:
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;tff.c: 679: }
  8755                           ;tff.c: 680: }
  8756                           ;tff.c: 684: memset(fs, 0, sizeof(FATFS));
  8757                           
  8758                           ; BSR set to: 0
  8759                           
  8760                           ; BSR set to: 0
  8761  000676  C0BB  F01A         	movff	auto_mount@fs,memset@p1
  8762  00067A  C0BC  F01B         	movff	auto_mount@fs+1,memset@p1+1
  8763  00067E  0E00               	movlw	0
  8764  000680  6E1D               	movwf	memset@c+1,c
  8765  000682  0E00               	movlw	0
  8766  000684  6E1C               	movwf	memset@c,c
  8767  000686  0E02               	movlw	2
  8768  000688  6E1F               	movwf	memset@n+1,c
  8769  00068A  0E20               	movlw	32
  8770  00068C  6E1E               	movwf	memset@n,c
  8771  00068E  EC60  F01C         	call	_memset	;wreg free
  8772                           
  8773                           ;tff.c: 685: stat = disk_initialize(0);
  8774  000692  0E00               	movlw	0
  8775  000694  ECEE  F01B         	call	_disk_initialize
  8776  000698  0100               	movlb	0	; () banked
  8777  00069A  6FB5               	movwf	auto_mount@stat& (0+255),b
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;tff.c: 686: if (stat & 0x01)
  8781  00069C  A1B5               	btfss	auto_mount@stat& (0+255),0,b
  8782  00069E  D002               	goto	l1212
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;tff.c: 687: return FR_NOT_READY;
  8786  0006A0  0E01               	movlw	1
  8787                           
  8788                           ; BSR set to: 0
  8789  0006A2  0012               	return	
  8790  0006A4                     l1212:
  8791                           
  8792                           ; BSR set to: 0
  8793                           ;tff.c: 689: if (chk_wp && (stat & 0x04))
  8794                           
  8795                           ; BSR set to: 0
  8796  0006A4  5197               	movf	auto_mount@chk_wp& (0+255),w,b
  8797  0006A6  A4D8               	btfss	status,2,c
  8798                           
  8799                           ; BSR set to: 0
  8800  0006A8  A5B5               	btfss	auto_mount@stat& (0+255),2,b
  8801  0006AA  D002               	goto	l1213
  8802                           
  8803                           ; BSR set to: 0
  8804                           ;tff.c: 690: return FR_WRITE_PROTECTED;
  8805  0006AC  0E09               	movlw	9
  8806                           
  8807                           ; BSR set to: 0
  8808  0006AE  0012               	return	
  8809  0006B0                     l1213:
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;tff.c: 694: fmt = check_fs(bootsect = 0);
  8813                           
  8814                           ; BSR set to: 0
  8815  0006B0  0E00               	movlw	0
  8816  0006B2  6FAB               	movwf	auto_mount@bootsect& (0+255),b
  8817  0006B4  0E00               	movlw	0
  8818  0006B6  6FAC               	movwf	(auto_mount@bootsect+1)& (0+255),b
  8819  0006B8  0E00               	movlw	0
  8820  0006BA  6FAD               	movwf	(auto_mount@bootsect+2)& (0+255),b
  8821  0006BC  0E00               	movlw	0
  8822  0006BE  6FAE               	movwf	(auto_mount@bootsect+3)& (0+255),b
  8823  0006C0  C0AB  F08D         	movff	auto_mount@bootsect,check_fs@sect
  8824  0006C4  C0AC  F08E         	movff	auto_mount@bootsect+1,check_fs@sect+1
  8825  0006C8  C0AD  F08F         	movff	auto_mount@bootsect+2,check_fs@sect+2
  8826  0006CC  C0AE  F090         	movff	auto_mount@bootsect+3,check_fs@sect+3
  8827  0006D0  ECDD  F017         	call	_check_fs	;wreg free
  8828  0006D4  0100               	movlb	0	; () banked
  8829  0006D6  6FB6               	movwf	auto_mount@fmt& (0+255),b
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;tff.c: 695: posicao_cursor_lcd(1,14);
  8833  0006D8  0E0E               	movlw	14
  8834  0006DA  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  8835  0006DC  0E01               	movlw	1
  8836  0006DE  EC93  F019         	call	_posicao_cursor_lcd
  8837                           
  8838                           ;tff.c: 696: escreve_inteiro_lcd(fmt);
  8839  0006E2  C0B6  F02C         	movff	auto_mount@fmt,escreve_inteiro_lcd@valor
  8840  0006E6  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
  8841  0006E8  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
  8842                           
  8843                           ;tff.c: 697: if (fmt == 1) {
  8844  0006EC  0100               	movlb	0	; () banked
  8845  0006EE  05B6               	decf	auto_mount@fmt& (0+255),w,b
  8846  0006F0  A4D8               	btfss	status,2,c
  8847  0006F2  D023               	goto	l1215
  8848                           
  8849                           ; BSR set to: 0
  8850                           ;tff.c: 699: if (fs->win[446+4]) {
  8851  0006F4  EE21 F0E2          	lfsr	2,482
  8852  0006F8  51BB               	movf	auto_mount@fs& (0+255),w,b
  8853  0006FA  26D9               	addwf	fsr2l,f,c
  8854  0006FC  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  8855  0006FE  22DA               	addwfc	fsr2h,f,c
  8856  000700  50DF               	movf	indf2,w,c
  8857  000702  B4D8               	btfsc	status,2,c
  8858  000704  D01A               	goto	l1215
  8859                           
  8860                           ; BSR set to: 0
  8861                           ;tff.c: 700: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
  8862  000706  EE21 F0E6          	lfsr	2,486
  8863  00070A  51BB               	movf	auto_mount@fs& (0+255),w,b
  8864  00070C  26D9               	addwf	fsr2l,f,c
  8865  00070E  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  8866  000710  22DA               	addwfc	fsr2h,f,c
  8867  000712  CFDE F0AB          	movff	postinc2,auto_mount@bootsect
  8868  000716  CFDE F0AC          	movff	postinc2,auto_mount@bootsect+1
  8869  00071A  CFDE F0AD          	movff	postinc2,auto_mount@bootsect+2
  8870  00071E  CFDE F0AE          	movff	postinc2,auto_mount@bootsect+3
  8871                           
  8872                           ; BSR set to: 0
  8873                           ;tff.c: 701: fmt = check_fs(bootsect);
  8874  000722  C0AB  F08D         	movff	auto_mount@bootsect,check_fs@sect
  8875  000726  C0AC  F08E         	movff	auto_mount@bootsect+1,check_fs@sect+1
  8876  00072A  C0AD  F08F         	movff	auto_mount@bootsect+2,check_fs@sect+2
  8877  00072E  C0AE  F090         	movff	auto_mount@bootsect+3,check_fs@sect+3
  8878  000732  ECDD  F017         	call	_check_fs	;wreg free
  8879  000736  0100               	movlb	0	; () banked
  8880  000738  6FB6               	movwf	auto_mount@fmt& (0+255),b
  8881  00073A                     l1215:
  8882                           
  8883                           ; BSR set to: 0
  8884                           ;tff.c: 702: }
  8885                           ;tff.c: 703: }
  8886                           ;tff.c: 704: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])) != 512U)
  8887                           
  8888                           ; BSR set to: 0
  8889                           
  8890                           ; BSR set to: 0
  8891  00073A  51B6               	movf	auto_mount@fmt& (0+255),w,b
  8892  00073C  A4D8               	btfss	status,2,c
  8893  00073E  D00C               	goto	u13970
  8894                           
  8895                           ; BSR set to: 0
  8896  000740  EE20 F02B          	lfsr	2,43
  8897  000744  51BB               	movf	auto_mount@fs& (0+255),w,b
  8898  000746  26D9               	addwf	fsr2l,f,c
  8899  000748  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  8900  00074A  22DA               	addwfc	fsr2h,f,c
  8901  00074C  50DE               	movf	postinc2,w,c
  8902  00074E  E104               	bnz	l11810
  8903  000750  0E02               	movlw	2
  8904  000752  18DE               	xorwf	postinc2,w,c
  8905  000754  B4D8               	btfsc	status,2,c
  8906  000756  D002               	goto	l1216
  8907  000758                     u13970:
  8908  000758                     l11810:
  8909                           
  8910                           ; BSR set to: 0
  8911                           ;tff.c: 705: return FR_NO_FILESYSTEM;
  8912  000758  0E0B               	movlw	11
  8913                           
  8914                           ; BSR set to: 0
  8915  00075A  0012               	return	
  8916  00075C                     l1216:
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;tff.c: 708: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
  8920                           
  8921                           ; BSR set to: 0
  8922  00075C  EE20 F036          	lfsr	2,54
  8923  000760  51BB               	movf	auto_mount@fs& (0+255),w,b
  8924  000762  26D9               	addwf	fsr2l,f,c
  8925  000764  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  8926  000766  22DA               	addwfc	fsr2h,f,c
  8927  000768  CFDE F098          	movff	postinc2,??_auto_mount
  8928  00076C  CFDD F099          	movff	postdec2,??_auto_mount+1
  8929  000770  C098  F0B7         	movff	??_auto_mount,auto_mount@fatsize
  8930  000774  C099  F0B8         	movff	??_auto_mount+1,auto_mount@fatsize+1
  8931  000778  6BB9               	clrf	(auto_mount@fatsize+2)& (0+255),b
  8932  00077A  6BBA               	clrf	(auto_mount@fatsize+3)& (0+255),b
  8933                           
  8934                           ; BSR set to: 0
  8935                           ;tff.c: 709: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
  8936  00077C  51B7               	movf	auto_mount@fatsize& (0+255),w,b
  8937  00077E  11B8               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
  8938  000780  11B9               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
  8939  000782  11BA               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
  8940  000784  A4D8               	btfss	status,2,c
  8941  000786  D00E               	goto	l1219
  8942                           
  8943                           ; BSR set to: 0
  8944  000788  EE20 F044          	lfsr	2,68
  8945  00078C  51BB               	movf	auto_mount@fs& (0+255),w,b
  8946  00078E  26D9               	addwf	fsr2l,f,c
  8947  000790  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  8948  000792  22DA               	addwfc	fsr2h,f,c
  8949  000794  CFDE F0B7          	movff	postinc2,auto_mount@fatsize
  8950  000798  CFDE F0B8          	movff	postinc2,auto_mount@fatsize+1
  8951  00079C  CFDE F0B9          	movff	postinc2,auto_mount@fatsize+2
  8952  0007A0  CFDE F0BA          	movff	postinc2,auto_mount@fatsize+3
  8953  0007A4                     l1219:
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;tff.c: 710: fs->sects_fat = (CLUST)fatsize;
  8957  0007A4  EE20 F014          	lfsr	2,20
  8958  0007A8  51BB               	movf	auto_mount@fs& (0+255),w,b
  8959  0007AA  26D9               	addwf	fsr2l,f,c
  8960  0007AC  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  8961  0007AE  22DA               	addwfc	fsr2h,f,c
  8962  0007B0  C0B7  FFDE         	movff	auto_mount@fatsize,postinc2
  8963  0007B4  C0B8  FFDD         	movff	auto_mount@fatsize+1,postdec2
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;tff.c: 711: fs->n_fats = fs->win[16];
  8967  0007B8  EE20 F030          	lfsr	2,48
  8968  0007BC  51BB               	movf	auto_mount@fs& (0+255),w,b
  8969  0007BE  26D9               	addwf	fsr2l,f,c
  8970  0007C0  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  8971  0007C2  22DA               	addwfc	fsr2h,f,c
  8972  0007C4  EE10 F01E          	lfsr	1,30
  8973  0007C8  51BB               	movf	auto_mount@fs& (0+255),w,b
  8974  0007CA  26E1               	addwf	fsr1l,f,c
  8975  0007CC  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  8976  0007CE  22E2               	addwfc	fsr1h,f,c
  8977  0007D0  CFDF FFE7          	movff	indf2,indf1
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;tff.c: 712: fatsize *= fs->n_fats;
  8981  0007D4  C0B7  F01A         	movff	auto_mount@fatsize,___lmul@multiplier
  8982  0007D8  C0B8  F01B         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
  8983  0007DC  C0B9  F01C         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
  8984  0007E0  C0BA  F01D         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
  8985  0007E4  EE20 F01E          	lfsr	2,30
  8986  0007E8  51BB               	movf	auto_mount@fs& (0+255),w,b
  8987  0007EA  26D9               	addwf	fsr2l,f,c
  8988  0007EC  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  8989  0007EE  22DA               	addwfc	fsr2h,f,c
  8990  0007F0  50DF               	movf	indf2,w,c
  8991  0007F2  6F98               	movwf	??_auto_mount& (0+255),b
  8992  0007F4  5198               	movf	??_auto_mount& (0+255),w,b
  8993  0007F6  6E1E               	movwf	___lmul@multiplicand,c
  8994  0007F8  6A1F               	clrf	___lmul@multiplicand+1,c
  8995  0007FA  6A20               	clrf	___lmul@multiplicand+2,c
  8996  0007FC  6A21               	clrf	___lmul@multiplicand+3,c
  8997  0007FE  EC88  F01A         	call	___lmul	;wreg free
  8998  000802  C01A  F0B7         	movff	?___lmul,auto_mount@fatsize
  8999  000806  C01B  F0B8         	movff	?___lmul+1,auto_mount@fatsize+1
  9000  00080A  C01C  F0B9         	movff	?___lmul+2,auto_mount@fatsize+2
  9001  00080E  C01D  F0BA         	movff	?___lmul+3,auto_mount@fatsize+3
  9002                           
  9003                           ;tff.c: 713: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
  9004  000812  0100               	movlb	0	; () banked
  9005  000814  EE20 F02E          	lfsr	2,46
  9006  000818  51BB               	movf	auto_mount@fs& (0+255),w,b
  9007  00081A  26D9               	addwf	fsr2l,f,c
  9008  00081C  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9009  00081E  22DA               	addwfc	fsr2h,f,c
  9010  000820  CFDE F098          	movff	postinc2,??_auto_mount
  9011  000824  CFDD F099          	movff	postdec2,??_auto_mount+1
  9012  000828  5198               	movf	??_auto_mount& (0+255),w,b
  9013  00082A  25AB               	addwf	auto_mount@bootsect& (0+255),w,b
  9014  00082C  6F9A               	movwf	(??_auto_mount+2)& (0+255),b
  9015  00082E  5199               	movf	(??_auto_mount+1)& (0+255),w,b
  9016  000830  21AC               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
  9017  000832  6F9B               	movwf	(??_auto_mount+3)& (0+255),b
  9018  000834  0E00               	movlw	0
  9019  000836  21AD               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
  9020  000838  6F9C               	movwf	(??_auto_mount+4)& (0+255),b
  9021  00083A  0E00               	movlw	0
  9022  00083C  21AE               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
  9023  00083E  6F9D               	movwf	(??_auto_mount+5)& (0+255),b
  9024  000840  EE20 F008          	lfsr	2,8
  9025  000844  51BB               	movf	auto_mount@fs& (0+255),w,b
  9026  000846  26D9               	addwf	fsr2l,f,c
  9027  000848  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9028  00084A  22DA               	addwfc	fsr2h,f,c
  9029  00084C  C09A  FFDE         	movff	??_auto_mount+2,postinc2
  9030  000850  C09B  FFDE         	movff	??_auto_mount+3,postinc2
  9031  000854  C09C  FFDE         	movff	??_auto_mount+4,postinc2
  9032  000858  C09D  FFDE         	movff	??_auto_mount+5,postinc2
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;tff.c: 714: fs->csize = fs->win[13];
  9036  00085C  EE20 F02D          	lfsr	2,45
  9037  000860  51BB               	movf	auto_mount@fs& (0+255),w,b
  9038  000862  26D9               	addwf	fsr2l,f,c
  9039  000864  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9040  000866  22DA               	addwfc	fsr2h,f,c
  9041  000868  EE10 F01D          	lfsr	1,29
  9042  00086C  51BB               	movf	auto_mount@fs& (0+255),w,b
  9043  00086E  26E1               	addwf	fsr1l,f,c
  9044  000870  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9045  000872  22E2               	addwfc	fsr1h,f,c
  9046  000874  CFDF FFE7          	movff	indf2,indf1
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;tff.c: 715: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
  9050  000878  EE20 F031          	lfsr	2,49
  9051  00087C  51BB               	movf	auto_mount@fs& (0+255),w,b
  9052  00087E  26D9               	addwf	fsr2l,f,c
  9053  000880  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9054  000882  22DA               	addwfc	fsr2h,f,c
  9055  000884  EE10 F002          	lfsr	1,2
  9056  000888  51BB               	movf	auto_mount@fs& (0+255),w,b
  9057  00088A  26E1               	addwf	fsr1l,f,c
  9058  00088C  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9059  00088E  22E2               	addwfc	fsr1h,f,c
  9060  000890  CFDE FFE6          	movff	postinc2,postinc1
  9061  000894  CFDD FFE5          	movff	postdec2,postdec1
  9062                           
  9063                           ; BSR set to: 0
  9064                           ;tff.c: 716: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
  9065  000898  EE20 F033          	lfsr	2,51
  9066  00089C  51BB               	movf	auto_mount@fs& (0+255),w,b
  9067  00089E  26D9               	addwf	fsr2l,f,c
  9068  0008A0  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9069  0008A2  22DA               	addwfc	fsr2h,f,c
  9070  0008A4  CFDE F098          	movff	postinc2,??_auto_mount
  9071  0008A8  CFDD F099          	movff	postdec2,??_auto_mount+1
  9072  0008AC  C098  F0AF         	movff	??_auto_mount,auto_mount@totalsect
  9073  0008B0  C099  F0B0         	movff	??_auto_mount+1,auto_mount@totalsect+1
  9074  0008B4  6BB1               	clrf	(auto_mount@totalsect+2)& (0+255),b
  9075  0008B6  6BB2               	clrf	(auto_mount@totalsect+3)& (0+255),b
  9076                           
  9077                           ; BSR set to: 0
  9078                           ;tff.c: 717: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
  9079  0008B8  51AF               	movf	auto_mount@totalsect& (0+255),w,b
  9080  0008BA  11B0               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
  9081  0008BC  11B1               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
  9082  0008BE  11B2               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
  9083  0008C0  A4D8               	btfss	status,2,c
  9084  0008C2  D00E               	goto	l1220
  9085                           
  9086                           ; BSR set to: 0
  9087  0008C4  EE20 F040          	lfsr	2,64
  9088  0008C8  51BB               	movf	auto_mount@fs& (0+255),w,b
  9089  0008CA  26D9               	addwf	fsr2l,f,c
  9090  0008CC  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9091  0008CE  22DA               	addwfc	fsr2h,f,c
  9092  0008D0  CFDE F0AF          	movff	postinc2,auto_mount@totalsect
  9093  0008D4  CFDE F0B0          	movff	postinc2,auto_mount@totalsect+1
  9094  0008D8  CFDE F0B1          	movff	postinc2,auto_mount@totalsect+2
  9095  0008DC  CFDE F0B2          	movff	postinc2,auto_mount@totalsect+3
  9096  0008E0                     l1220:
  9097                           
  9098                           ; BSR set to: 0
  9099                           ;tff.c: 718: fs->max_clust = maxclust = (totalsect
  9100                           ;tff.c: 719: - (WORD)(*(WORD*)(BYTE*)(&fs->win[14])) - fatsize - fs->n_rootdir / 16
  9101                           ;tff.c: 720: ) / fs->csize + 2;
  9102                           
  9103                           ; BSR set to: 0
  9104  0008E0  EE20 F002          	lfsr	2,2
  9105  0008E4  51BB               	movf	auto_mount@fs& (0+255),w,b
  9106  0008E6  26D9               	addwf	fsr2l,f,c
  9107  0008E8  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9108  0008EA  22DA               	addwfc	fsr2h,f,c
  9109  0008EC  CFDE F098          	movff	postinc2,??_auto_mount
  9110  0008F0  CFDD F099          	movff	postdec2,??_auto_mount+1
  9111  0008F4  0E04               	movlw	4
  9112  0008F6  6F9A               	movwf	(??_auto_mount+2)& (0+255),b
  9113  0008F8                     u14005:
  9114  0008F8  90D8               	bcf	status,0,c
  9115  0008FA  3399               	rrcf	(??_auto_mount+1)& (0+255),f,b
  9116  0008FC  3398               	rrcf	??_auto_mount& (0+255),f,b
  9117  0008FE  2F9A               	decfsz	(??_auto_mount+2)& (0+255),f,b
  9118  000900  D7FB               	goto	u14005
  9119  000902  EE20 F02E          	lfsr	2,46
  9120  000906  51BB               	movf	auto_mount@fs& (0+255),w,b
  9121  000908  26D9               	addwf	fsr2l,f,c
  9122  00090A  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9123  00090C  22DA               	addwfc	fsr2h,f,c
  9124  00090E  CFDE F09B          	movff	postinc2,??_auto_mount+3
  9125  000912  CFDD F09C          	movff	postdec2,??_auto_mount+4
  9126  000916  519B               	movf	(??_auto_mount+3)& (0+255),w,b
  9127  000918  2598               	addwf	??_auto_mount& (0+255),w,b
  9128  00091A  6F9D               	movwf	(??_auto_mount+5)& (0+255),b
  9129  00091C  519C               	movf	(??_auto_mount+4)& (0+255),w,b
  9130  00091E  2199               	addwfc	(??_auto_mount+1)& (0+255),w,b
  9131  000920  6F9E               	movwf	(??_auto_mount+6)& (0+255),b
  9132  000922  6B9F               	clrf	(??_auto_mount+7)& (0+255),b
  9133  000924  B0D8               	btfsc	status,0,c
  9134  000926  2B9F               	incf	(??_auto_mount+7)& (0+255),f,b
  9135  000928  6BA0               	clrf	(??_auto_mount+8)& (0+255),b
  9136  00092A  51B7               	movf	auto_mount@fatsize& (0+255),w,b
  9137  00092C  259D               	addwf	(??_auto_mount+5)& (0+255),w,b
  9138  00092E  6FA1               	movwf	(??_auto_mount+9)& (0+255),b
  9139  000930  51B8               	movf	(auto_mount@fatsize+1)& (0+255),w,b
  9140  000932  219E               	addwfc	(??_auto_mount+6)& (0+255),w,b
  9141  000934  6FA2               	movwf	(??_auto_mount+10)& (0+255),b
  9142  000936  51B9               	movf	(auto_mount@fatsize+2)& (0+255),w,b
  9143  000938  219F               	addwfc	(??_auto_mount+7)& (0+255),w,b
  9144  00093A  6FA3               	movwf	(??_auto_mount+11)& (0+255),b
  9145  00093C  51BA               	movf	(auto_mount@fatsize+3)& (0+255),w,b
  9146  00093E  21A0               	addwfc	(??_auto_mount+8)& (0+255),w,b
  9147  000940  6FA4               	movwf	(??_auto_mount+12)& (0+255),b
  9148  000942  1FA1               	comf	(??_auto_mount+9)& (0+255),f,b
  9149  000944  1FA2               	comf	(??_auto_mount+10)& (0+255),f,b
  9150  000946  1FA3               	comf	(??_auto_mount+11)& (0+255),f,b
  9151  000948  1FA4               	comf	(??_auto_mount+12)& (0+255),f,b
  9152  00094A  2BA1               	incf	(??_auto_mount+9)& (0+255),f,b
  9153  00094C  0E00               	movlw	0
  9154  00094E  23A2               	addwfc	(??_auto_mount+10)& (0+255),f,b
  9155  000950  23A3               	addwfc	(??_auto_mount+11)& (0+255),f,b
  9156  000952  23A4               	addwfc	(??_auto_mount+12)& (0+255),f,b
  9157  000954  51AF               	movf	auto_mount@totalsect& (0+255),w,b
  9158  000956  25A1               	addwf	(??_auto_mount+9)& (0+255),w,b
  9159  000958  6E1A               	movwf	___lldiv@dividend,c
  9160  00095A  51B0               	movf	(auto_mount@totalsect+1)& (0+255),w,b
  9161  00095C  21A2               	addwfc	(??_auto_mount+10)& (0+255),w,b
  9162  00095E  6E1B               	movwf	___lldiv@dividend+1,c
  9163  000960  51B1               	movf	(auto_mount@totalsect+2)& (0+255),w,b
  9164  000962  21A3               	addwfc	(??_auto_mount+11)& (0+255),w,b
  9165  000964  6E1C               	movwf	___lldiv@dividend+2,c
  9166  000966  51B2               	movf	(auto_mount@totalsect+3)& (0+255),w,b
  9167  000968  21A4               	addwfc	(??_auto_mount+12)& (0+255),w,b
  9168  00096A  6E1D               	movwf	___lldiv@dividend+3,c
  9169  00096C  EE20 F01D          	lfsr	2,29
  9170  000970  51BB               	movf	auto_mount@fs& (0+255),w,b
  9171  000972  26D9               	addwf	fsr2l,f,c
  9172  000974  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9173  000976  22DA               	addwfc	fsr2h,f,c
  9174  000978  50DF               	movf	indf2,w,c
  9175  00097A  6FA5               	movwf	(??_auto_mount+13)& (0+255),b
  9176  00097C  51A5               	movf	(??_auto_mount+13)& (0+255),w,b
  9177  00097E  6E1E               	movwf	___lldiv@divisor,c
  9178  000980  6A1F               	clrf	___lldiv@divisor+1,c
  9179  000982  6A20               	clrf	___lldiv@divisor+2,c
  9180  000984  6A21               	clrf	___lldiv@divisor+3,c
  9181  000986  EC66  F018         	call	___lldiv	;wreg free
  9182  00098A  0E02               	movlw	2
  9183  00098C  241A               	addwf	?___lldiv,w,c
  9184  00098E  0100               	movlb	0	; () banked
  9185  000990  6FA7               	movwf	auto_mount@maxclust& (0+255),b
  9186  000992  0E00               	movlw	0
  9187  000994  201B               	addwfc	?___lldiv+1,w,c
  9188  000996  6FA8               	movwf	(auto_mount@maxclust+1)& (0+255),b
  9189  000998  0E00               	movlw	0
  9190  00099A  201C               	addwfc	?___lldiv+2,w,c
  9191  00099C  6FA9               	movwf	(auto_mount@maxclust+2)& (0+255),b
  9192  00099E  0E00               	movlw	0
  9193  0009A0  201D               	addwfc	?___lldiv+3,w,c
  9194  0009A2  6FAA               	movwf	(auto_mount@maxclust+3)& (0+255),b
  9195  0009A4  EE20 F016          	lfsr	2,22
  9196  0009A8  51BB               	movf	auto_mount@fs& (0+255),w,b
  9197  0009AA  26D9               	addwf	fsr2l,f,c
  9198  0009AC  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9199  0009AE  22DA               	addwfc	fsr2h,f,c
  9200  0009B0  C0A7  FFDE         	movff	auto_mount@maxclust,postinc2
  9201  0009B4  C0A8  FFDD         	movff	auto_mount@maxclust+1,postdec2
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;tff.c: 722: fmt = 1;
  9205  0009B8  0E01               	movlw	1
  9206  0009BA  6FB6               	movwf	auto_mount@fmt& (0+255),b
  9207                           
  9208                           ; BSR set to: 0
  9209                           ;tff.c: 723: if (maxclust >= 0xFF7) fmt = 2;
  9210  0009BC  51AA               	movf	(auto_mount@maxclust+3)& (0+255),w,b
  9211  0009BE  11A9               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
  9212  0009C0  E106               	bnz	u14010
  9213  0009C2  0EF7               	movlw	247
  9214  0009C4  5DA7               	subwf	auto_mount@maxclust& (0+255),w,b
  9215  0009C6  0E0F               	movlw	15
  9216  0009C8  59A8               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
  9217  0009CA  A0D8               	btfss	status,0,c
  9218  0009CC  D002               	goto	l1221
  9219  0009CE                     u14010:
  9220                           
  9221                           ; BSR set to: 0
  9222  0009CE  0E02               	movlw	2
  9223  0009D0  6FB6               	movwf	auto_mount@fmt& (0+255),b
  9224  0009D2                     l1221:
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;tff.c: 724: if (maxclust >= 0xFFF7)
  9228                           
  9229                           ; BSR set to: 0
  9230  0009D2  51AA               	movf	(auto_mount@maxclust+3)& (0+255),w,b
  9231  0009D4  11A9               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
  9232  0009D6  E106               	bnz	u14020
  9233  0009D8  0EF7               	movlw	247
  9234  0009DA  5DA7               	subwf	auto_mount@maxclust& (0+255),w,b
  9235  0009DC  0EFF               	movlw	255
  9236  0009DE  59A8               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
  9237  0009E0  A0D8               	btfss	status,0,c
  9238  0009E2  D002               	goto	l1222
  9239  0009E4                     u14020:
  9240                           
  9241                           ; BSR set to: 0
  9242                           ;tff.c: 726: return FR_NO_FILESYSTEM;
  9243  0009E4  0E0B               	movlw	11
  9244                           
  9245                           ; BSR set to: 0
  9246  0009E6  0012               	return	
  9247  0009E8                     l1222:
  9248                           
  9249                           ; BSR set to: 0
  9250                           ;tff.c: 733: fs->dirbase = fs->fatbase + fatsize;
  9251                           
  9252                           ; BSR set to: 0
  9253  0009E8  EE20 F008          	lfsr	2,8
  9254  0009EC  51BB               	movf	auto_mount@fs& (0+255),w,b
  9255  0009EE  26D9               	addwf	fsr2l,f,c
  9256  0009F0  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9257  0009F2  22DA               	addwfc	fsr2h,f,c
  9258  0009F4  CFDE F098          	movff	postinc2,??_auto_mount
  9259  0009F8  CFDE F099          	movff	postinc2,??_auto_mount+1
  9260  0009FC  CFDE F09A          	movff	postinc2,??_auto_mount+2
  9261  000A00  CFDE F09B          	movff	postinc2,??_auto_mount+3
  9262  000A04  51B7               	movf	auto_mount@fatsize& (0+255),w,b
  9263  000A06  2598               	addwf	??_auto_mount& (0+255),w,b
  9264  000A08  6F9C               	movwf	(??_auto_mount+4)& (0+255),b
  9265  000A0A  51B8               	movf	(auto_mount@fatsize+1)& (0+255),w,b
  9266  000A0C  2199               	addwfc	(??_auto_mount+1)& (0+255),w,b
  9267  000A0E  6F9D               	movwf	(??_auto_mount+5)& (0+255),b
  9268  000A10  51B9               	movf	(auto_mount@fatsize+2)& (0+255),w,b
  9269  000A12  219A               	addwfc	(??_auto_mount+2)& (0+255),w,b
  9270  000A14  6F9E               	movwf	(??_auto_mount+6)& (0+255),b
  9271  000A16  51BA               	movf	(auto_mount@fatsize+3)& (0+255),w,b
  9272  000A18  219B               	addwfc	(??_auto_mount+3)& (0+255),w,b
  9273  000A1A  6F9F               	movwf	(??_auto_mount+7)& (0+255),b
  9274  000A1C  EE20 F00C          	lfsr	2,12
  9275  000A20  51BB               	movf	auto_mount@fs& (0+255),w,b
  9276  000A22  26D9               	addwf	fsr2l,f,c
  9277  000A24  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9278  000A26  22DA               	addwfc	fsr2h,f,c
  9279  000A28  C09C  FFDE         	movff	??_auto_mount+4,postinc2
  9280  000A2C  C09D  FFDE         	movff	??_auto_mount+5,postinc2
  9281  000A30  C09E  FFDE         	movff	??_auto_mount+6,postinc2
  9282  000A34  C09F  FFDE         	movff	??_auto_mount+7,postinc2
  9283                           
  9284                           ;tff.c: 734: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
  9285  000A38  EE20 F008          	lfsr	2,8
  9286  000A3C  51BB               	movf	auto_mount@fs& (0+255),w,b
  9287  000A3E  26D9               	addwf	fsr2l,f,c
  9288  000A40  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9289  000A42  22DA               	addwfc	fsr2h,f,c
  9290  000A44  CFDE F098          	movff	postinc2,??_auto_mount
  9291  000A48  CFDE F099          	movff	postinc2,??_auto_mount+1
  9292  000A4C  CFDE F09A          	movff	postinc2,??_auto_mount+2
  9293  000A50  CFDE F09B          	movff	postinc2,??_auto_mount+3
  9294  000A54  EE20 F002          	lfsr	2,2
  9295  000A58  51BB               	movf	auto_mount@fs& (0+255),w,b
  9296  000A5A  26D9               	addwf	fsr2l,f,c
  9297  000A5C  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9298  000A5E  22DA               	addwfc	fsr2h,f,c
  9299  000A60  CFDE F09C          	movff	postinc2,??_auto_mount+4
  9300  000A64  CFDD F09D          	movff	postdec2,??_auto_mount+5
  9301  000A68  0E04               	movlw	4
  9302  000A6A  6F9E               	movwf	(??_auto_mount+6)& (0+255),b
  9303  000A6C                     u14035:
  9304  000A6C  90D8               	bcf	status,0,c
  9305  000A6E  339D               	rrcf	(??_auto_mount+5)& (0+255),f,b
  9306  000A70  339C               	rrcf	(??_auto_mount+4)& (0+255),f,b
  9307  000A72  2F9E               	decfsz	(??_auto_mount+6)& (0+255),f,b
  9308  000A74  D7FB               	goto	u14035
  9309  000A76  519C               	movf	(??_auto_mount+4)& (0+255),w,b
  9310  000A78  2598               	addwf	??_auto_mount& (0+255),w,b
  9311  000A7A  6F9F               	movwf	(??_auto_mount+7)& (0+255),b
  9312  000A7C  519D               	movf	(??_auto_mount+5)& (0+255),w,b
  9313  000A7E  2199               	addwfc	(??_auto_mount+1)& (0+255),w,b
  9314  000A80  6FA0               	movwf	(??_auto_mount+8)& (0+255),b
  9315  000A82  0E00               	movlw	0
  9316  000A84  219A               	addwfc	(??_auto_mount+2)& (0+255),w,b
  9317  000A86  6FA1               	movwf	(??_auto_mount+9)& (0+255),b
  9318  000A88  0E00               	movlw	0
  9319  000A8A  219B               	addwfc	(??_auto_mount+3)& (0+255),w,b
  9320  000A8C  6FA2               	movwf	(??_auto_mount+10)& (0+255),b
  9321  000A8E  51B7               	movf	auto_mount@fatsize& (0+255),w,b
  9322  000A90  259F               	addwf	(??_auto_mount+7)& (0+255),w,b
  9323  000A92  6FA3               	movwf	(??_auto_mount+11)& (0+255),b
  9324  000A94  51B8               	movf	(auto_mount@fatsize+1)& (0+255),w,b
  9325  000A96  21A0               	addwfc	(??_auto_mount+8)& (0+255),w,b
  9326  000A98  6FA4               	movwf	(??_auto_mount+12)& (0+255),b
  9327  000A9A  51B9               	movf	(auto_mount@fatsize+2)& (0+255),w,b
  9328  000A9C  21A1               	addwfc	(??_auto_mount+9)& (0+255),w,b
  9329  000A9E  6FA5               	movwf	(??_auto_mount+13)& (0+255),b
  9330  000AA0  51BA               	movf	(auto_mount@fatsize+3)& (0+255),w,b
  9331  000AA2  21A2               	addwfc	(??_auto_mount+10)& (0+255),w,b
  9332  000AA4  6FA6               	movwf	(??_auto_mount+14)& (0+255),b
  9333  000AA6  EE20 F010          	lfsr	2,16
  9334  000AAA  51BB               	movf	auto_mount@fs& (0+255),w,b
  9335  000AAC  26D9               	addwf	fsr2l,f,c
  9336  000AAE  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9337  000AB0  22DA               	addwfc	fsr2h,f,c
  9338  000AB2  C0A3  FFDE         	movff	??_auto_mount+11,postinc2
  9339  000AB6  C0A4  FFDE         	movff	??_auto_mount+12,postinc2
  9340  000ABA  C0A5  FFDE         	movff	??_auto_mount+13,postinc2
  9341  000ABE  C0A6  FFDE         	movff	??_auto_mount+14,postinc2
  9342                           
  9343                           ;tff.c: 738: fs->free_clust = (CLUST)0xFFFFFFFF;
  9344  000AC2  EE20 F01A          	lfsr	2,26
  9345  000AC6  51BB               	movf	auto_mount@fs& (0+255),w,b
  9346  000AC8  26D9               	addwf	fsr2l,f,c
  9347  000ACA  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9348  000ACC  22DA               	addwfc	fsr2h,f,c
  9349  000ACE  0EFF               	movlw	255
  9350  000AD0  6EDE               	movwf	postinc2,c
  9351  000AD2  0EFF               	movlw	255
  9352  000AD4  6EDD               	movwf	postdec2,c
  9353                           
  9354                           ;tff.c: 754: fs->fs_type = fmt;
  9355  000AD6  EE20 F01C          	lfsr	2,28
  9356  000ADA  51BB               	movf	auto_mount@fs& (0+255),w,b
  9357  000ADC  26D9               	addwf	fsr2l,f,c
  9358  000ADE  51BC               	movf	(auto_mount@fs+1)& (0+255),w,b
  9359  000AE0  22DA               	addwfc	fsr2h,f,c
  9360  000AE2  C0B6  FFDF         	movff	auto_mount@fmt,indf2
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;tff.c: 755: fs->id = ++fsid;
  9364  000AE6  4BED               	infsnz	_fsid& (0+255),f,b
  9365  000AE8  2BEE               	incf	(_fsid+1)& (0+255),f,b
  9366  000AEA  C0BB  FFD9         	movff	auto_mount@fs,fsr2l
  9367  000AEE  C0BC  FFDA         	movff	auto_mount@fs+1,fsr2h
  9368  000AF2  C0ED  FFDE         	movff	_fsid,postinc2
  9369  000AF6  C0EE  FFDD         	movff	_fsid+1,postdec2
  9370                           
  9371                           ;tff.c: 756: return FR_OK;
  9372  000AFA  0E00               	movlw	0
  9373  000AFC  0012               	return	
  9374  000AFE                     __end_of_auto_mount:
  9375                           	opt stack 0
  9376                           tblptru	equ	0xFF8
  9377                           tblptrh	equ	0xFF7
  9378                           tblptrl	equ	0xFF6
  9379                           tablat	equ	0xFF5
  9380                           prodh	equ	0xFF4
  9381                           prodl	equ	0xFF3
  9382                           intcon	equ	0xFF2
  9383                           intcon2	equ	0xFF1
  9384                           intcon3	equ	0xFF0
  9385                           indf0	equ	0xFEF
  9386                           postinc0	equ	0xFEE
  9387                           fsr0h	equ	0xFEA
  9388                           fsr0l	equ	0xFE9
  9389                           wreg	equ	0xFE8
  9390                           indf1	equ	0xFE7
  9391                           postinc1	equ	0xFE6
  9392                           postdec1	equ	0xFE5
  9393                           fsr1h	equ	0xFE2
  9394                           fsr1l	equ	0xFE1
  9395                           indf2	equ	0xFDF
  9396                           postinc2	equ	0xFDE
  9397                           postdec2	equ	0xFDD
  9398                           plusw2	equ	0xFDB
  9399                           fsr2h	equ	0xFDA
  9400                           fsr2l	equ	0xFD9
  9401                           status	equ	0xFD8
  9402                           
  9403 ;; *************** function _memset *****************
  9404 ;; Defined at:
  9405 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  9406 ;; Parameters:    Size  Location     Type
  9407 ;;  p1              2   25[COMRAM] PTR void 
  9408 ;;		 -> fs.win(512), f_rename@fn(12), f_utime@fn(12), f_chmod@fn(12), 
  9409 ;;		 -> f_mkdir@fn(12), f_unlink@fn(12), f_stat@fn(12), f_opendir@fn(12), 
  9410 ;;		 -> f_open@fn(12), NULL(0), fs(544), gps@gps_buffer(15), 
  9411 ;;  c               2   27[COMRAM] int 
  9412 ;;  n               2   29[COMRAM] unsigned int 
  9413 ;; Auto vars:     Size  Location     Type
  9414 ;;  p               2   31[COMRAM] PTR unsigned char 
  9415 ;;		 -> fs.win(512), f_rename@fn(12), f_utime@fn(12), f_chmod@fn(12), 
  9416 ;;		 -> f_mkdir@fn(12), f_unlink@fn(12), f_stat@fn(12), f_opendir@fn(12), 
  9417 ;;		 -> f_open@fn(12), NULL(0), fs(544), gps@gps_buffer(15), 
  9418 ;; Return value:  Size  Location     Type
  9419 ;;                  2   25[COMRAM] PTR void 
  9420 ;; Registers used:
  9421 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9422 ;; Tracked objects:
  9423 ;;		On entry : 0/0
  9424 ;;		On exit  : 0/0
  9425 ;;		Unchanged: 0/0
  9426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9427 ;;      Params:         6       0       0       0       0       0       0       0       0
  9428 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9429 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9430 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9431 ;;Total ram usage:        8 bytes
  9432 ;; Hardware stack levels used:    1
  9433 ;; Hardware stack levels required when called:    2
  9434 ;; This function calls:
  9435 ;;		Nothing
  9436 ;; This function is called by:
  9437 ;;		_make_dirfile
  9438 ;;		_reserve_direntry
  9439 ;;		_auto_mount
  9440 ;;		_f_open
  9441 ;;		_gps
  9442 ;;		_f_mkdir
  9443 ;; This function uses a non-reentrant model
  9444 ;;
  9445                           
  9446                           	psect	text28
  9447  0038C0                     __ptext28:
  9448                           	opt stack 0
  9449  0038C0                     _memset:
  9450                           	opt stack 24
  9451                           
  9452                           ; BSR set to: 0
  9453                           ;incstack = 0
  9454  0038C0  C01A  F020         	movff	memset@p1,memset@p
  9455  0038C4  C01B  F021         	movff	memset@p1+1,memset@p+1
  9456  0038C8  D008               	goto	l2147
  9457  0038CA                     l10826:
  9458  0038CA  C020  FFD9         	movff	memset@p,fsr2l
  9459  0038CE  C021  FFDA         	movff	memset@p+1,fsr2h
  9460  0038D2  C01C  FFDF         	movff	memset@c,indf2
  9461  0038D6  4A20               	infsnz	memset@p,f,c
  9462  0038D8  2A21               	incf	memset@p+1,f,c
  9463  0038DA                     l2147:
  9464  0038DA  061E               	decf	memset@n,f,c
  9465  0038DC  A0D8               	btfss	status,0,c
  9466  0038DE  061F               	decf	memset@n+1,f,c
  9467  0038E0  281E               	incf	memset@n,w,c
  9468  0038E2  E1F3               	bnz	l10826
  9469  0038E4  281F               	incf	memset@n+1,w,c
  9470  0038E6  B4D8               	btfsc	status,2,c
  9471  0038E8  0012               	return	
  9472  0038EA  D7EF               	goto	l2148
  9473  0038EC                     __end_of_memset:
  9474                           	opt stack 0
  9475                           tblptru	equ	0xFF8
  9476                           tblptrh	equ	0xFF7
  9477                           tblptrl	equ	0xFF6
  9478                           tablat	equ	0xFF5
  9479                           prodh	equ	0xFF4
  9480                           prodl	equ	0xFF3
  9481                           intcon	equ	0xFF2
  9482                           intcon2	equ	0xFF1
  9483                           intcon3	equ	0xFF0
  9484                           indf0	equ	0xFEF
  9485                           postinc0	equ	0xFEE
  9486                           fsr0h	equ	0xFEA
  9487                           fsr0l	equ	0xFE9
  9488                           wreg	equ	0xFE8
  9489                           indf1	equ	0xFE7
  9490                           postinc1	equ	0xFE6
  9491                           postdec1	equ	0xFE5
  9492                           fsr1h	equ	0xFE2
  9493                           fsr1l	equ	0xFE1
  9494                           indf2	equ	0xFDF
  9495                           postinc2	equ	0xFDE
  9496                           postdec2	equ	0xFDD
  9497                           plusw2	equ	0xFDB
  9498                           fsr2h	equ	0xFDA
  9499                           fsr2l	equ	0xFD9
  9500                           status	equ	0xFD8
  9501                           
  9502 ;; *************** function _disk_initialize *****************
  9503 ;; Defined at:
  9504 ;;		line 109 in file "bibliotecas/diskio.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;  pdrv            1    wreg     unsigned char 
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;  pdrv            1   33[BANK0 ] unsigned char 
  9509 ;;  result          2    0        int 
  9510 ;;  stat            1   34[BANK0 ] unsigned char 
  9511 ;; Return value:  Size  Location     Type
  9512 ;;                  1    wreg      unsigned char 
  9513 ;; Registers used:
  9514 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9515 ;; Tracked objects:
  9516 ;;		On entry : 0/0
  9517 ;;		On exit  : 0/0
  9518 ;;		Unchanged: 0/0
  9519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9520 ;;      Params:         0       0       0       0       0       0       0       0       0
  9521 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9522 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9523 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9524 ;;Total ram usage:        2 bytes
  9525 ;; Hardware stack levels used:    1
  9526 ;; Hardware stack levels required when called:    8
  9527 ;; This function calls:
  9528 ;;		_sdc_disk_initialize
  9529 ;; This function is called by:
  9530 ;;		_auto_mount
  9531 ;; This function uses a non-reentrant model
  9532 ;;
  9533                           
  9534                           	psect	text29
  9535  0037DC                     __ptext29:
  9536                           	opt stack 0
  9537  0037DC                     _disk_initialize:
  9538                           	opt stack 19
  9539                           
  9540                           ;incstack = 0
  9541                           ;disk_initialize@pdrv stored from wreg
  9542  0037DC  0100               	movlb	0	; () banked
  9543  0037DE  6F81               	movwf	disk_initialize@pdrv& (0+255),b
  9544                           
  9545                           ;diskio.c: 113: DSTATUS stat;
  9546                           ;diskio.c: 114: int result;
  9547                           ;diskio.c: 116: switch (pdrv) {
  9548  0037E0  D00E               	goto	l849
  9549  0037E2                     
  9550                           ;diskio.c: 118: stat = sdc_disk_initialize();
  9551  0037E2  EC7F  F005         	call	_sdc_disk_initialize	;wreg free
  9552  0037E6  0100               	movlb	0	; () banked
  9553  0037E8  6F82               	movwf	disk_initialize@stat& (0+255),b
  9554                           
  9555                           ; BSR set to: 0
  9556                           ;diskio.c: 122: return stat;
  9557  0037EA  5182               	movf	disk_initialize@stat& (0+255),w,b
  9558                           
  9559                           ; BSR set to: 0
  9560  0037EC  0012               	return	
  9561  0037EE                     
  9562                           ; BSR set to: 0
  9563                           ;diskio.c: 125: stat = sdc_disk_initialize();
  9564                           
  9565                           ; BSR set to: 0
  9566  0037EE  EC7F  F005         	call	_sdc_disk_initialize	;wreg free
  9567  0037F2  0100               	movlb	0	; () banked
  9568  0037F4  6F82               	movwf	disk_initialize@stat& (0+255),b
  9569                           
  9570                           ; BSR set to: 0
  9571                           ;diskio.c: 129: return stat;
  9572  0037F6  5182               	movf	disk_initialize@stat& (0+255),w,b
  9573                           
  9574                           ; BSR set to: 0
  9575  0037F8  0012               	return	
  9576  0037FA                     
  9577                           ; BSR set to: 0
  9578                           ;diskio.c: 136: return stat;
  9579                           
  9580                           ; BSR set to: 0
  9581  0037FA  5182               	movf	disk_initialize@stat& (0+255),w,b
  9582                           
  9583                           ; BSR set to: 0
  9584  0037FC  0012               	return	
  9585  0037FE                     l849:
  9586                           
  9587                           ; BSR set to: 0
  9588  0037FE  0100               	movlb	0	; () banked
  9589  003800  5181               	movf	disk_initialize@pdrv& (0+255),w,b
  9590                           
  9591                           ; Switch size 1, requested type "space"
  9592                           ; Number of cases is 3, Range of values is 0 to 2
  9593                           ; switch strategies available:
  9594                           ; Name         Instructions Cycles
  9595                           ; simple_byte           10     6 (average)
  9596                           ;	Chosen strategy is simple_byte
  9597  003802  0A00               	xorlw	0	; case 0
  9598  003804  B4D8               	btfsc	status,2,c
  9599  003806  D7ED               	goto	l850
  9600  003808  0A01               	xorlw	1	; case 1
  9601  00380A  B4D8               	btfsc	status,2,c
  9602  00380C  D7F0               	goto	l852
  9603  00380E  0A03               	xorlw	3	; case 2
  9604  003810  B4D8               	btfsc	status,2,c
  9605  003812  D7F3               	goto	l853
  9606                           
  9607                           ; BSR set to: 0
  9608                           ;diskio.c: 138: return 0x01;
  9609                           
  9610                           ; BSR set to: 0
  9611  003814  0E01               	movlw	1
  9612  003816  0012               	return	
  9613  003818                     __end_of_disk_initialize:
  9614                           	opt stack 0
  9615                           tblptru	equ	0xFF8
  9616                           tblptrh	equ	0xFF7
  9617                           tblptrl	equ	0xFF6
  9618                           tablat	equ	0xFF5
  9619                           prodh	equ	0xFF4
  9620                           prodl	equ	0xFF3
  9621                           intcon	equ	0xFF2
  9622                           intcon2	equ	0xFF1
  9623                           intcon3	equ	0xFF0
  9624                           indf0	equ	0xFEF
  9625                           postinc0	equ	0xFEE
  9626                           fsr0h	equ	0xFEA
  9627                           fsr0l	equ	0xFE9
  9628                           wreg	equ	0xFE8
  9629                           indf1	equ	0xFE7
  9630                           postinc1	equ	0xFE6
  9631                           postdec1	equ	0xFE5
  9632                           fsr1h	equ	0xFE2
  9633                           fsr1l	equ	0xFE1
  9634                           indf2	equ	0xFDF
  9635                           postinc2	equ	0xFDE
  9636                           postdec2	equ	0xFDD
  9637                           plusw2	equ	0xFDB
  9638                           fsr2h	equ	0xFDA
  9639                           fsr2l	equ	0xFD9
  9640                           status	equ	0xFD8
  9641                           
  9642 ;; *************** function _sdc_disk_initialize *****************
  9643 ;; Defined at:
  9644 ;;		line 339 in file "bibliotecas/diskio.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;		None
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;  count2          2   30[BANK0 ] int 
  9649 ;;  crc_number      2   26[BANK0 ] int 
  9650 ;;  count1          2   24[BANK0 ] int 
  9651 ;;  i               2   21[BANK0 ] int 
  9652 ;;  buff            1   32[BANK0 ] unsigned char 
  9653 ;;  ocr             1   29[BANK0 ] unsigned char 
  9654 ;;  buff_i          1   28[BANK0 ] unsigned char 
  9655 ;;  stat            1   23[BANK0 ] unsigned char 
  9656 ;; Return value:  Size  Location     Type
  9657 ;;                  1    wreg      unsigned char 
  9658 ;; Registers used:
  9659 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9665 ;;      Params:         0       0       0       0       0       0       0       0       0
  9666 ;;      Locals:         0      12       0       0       0       0       0       0       0
  9667 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9668 ;;      Totals:         0      13       0       0       0       0       0       0       0
  9669 ;;Total ram usage:       13 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:    7
  9672 ;; This function calls:
  9673 ;;		_command
  9674 ;;		_dummy_clocks
  9675 ;;		_escreve_cmd_lcd
  9676 ;;		_escreve_frase_ram_lcd
  9677 ;;		_escreve_inteiro_lcd
  9678 ;;		_posicao_cursor_lcd
  9679 ;;		_proceed
  9680 ;;		_response
  9681 ;;		_sdc_reset
  9682 ;; This function is called by:
  9683 ;;		_disk_initialize
  9684 ;; This function uses a non-reentrant model
  9685 ;;
  9686                           
  9687                           	psect	text30
  9688  000AFE                     __ptext30:
  9689                           	opt stack 0
  9690  000AFE                     _sdc_disk_initialize:
  9691                           	opt stack 19
  9692                           
  9693                           ;diskio.c: 341: BYTE ocr;
  9694                           ;diskio.c: 342: DSTATUS stat;
  9695                           ;diskio.c: 343: int i = 0, count1 = 0, count2 = 0;
  9696                           
  9697                           ; BSR set to: 0
  9698                           ;incstack = 0
  9699  000AFE  0E00               	movlw	0
  9700  000B00  0100               	movlb	0	; () banked
  9701  000B02  6F76               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
  9702  000B04  0E00               	movlw	0
  9703  000B06  6F75               	movwf	sdc_disk_initialize@i& (0+255),b
  9704  000B08  0E00               	movlw	0
  9705  000B0A  6F79               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
  9706  000B0C  0E00               	movlw	0
  9707  000B0E  6F78               	movwf	sdc_disk_initialize@count1& (0+255),b
  9708  000B10  0E00               	movlw	0
  9709  000B12  6F7F               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
  9710  000B14  0E00               	movlw	0
  9711  000B16  6F7E               	movwf	sdc_disk_initialize@count2& (0+255),b
  9712                           
  9713                           ;diskio.c: 344: BYTE buff = 0;
  9714  000B18  0E00               	movlw	0
  9715  000B1A  6F80               	movwf	sdc_disk_initialize@buff& (0+255),b
  9716                           
  9717                           ; BSR set to: 0
  9718                           ;diskio.c: 345: BYTE buff_i;
  9719                           ;diskio.c: 346: int crc_number;
  9720                           ;diskio.c: 347: _delay((unsigned long)((1)*(48000000/4000.0)));
  9721  000B1C  0E10               	movlw	16
  9722  000B1E  0100               	movlb	0	; () banked
  9723  000B20  6F74               	movwf	??_sdc_disk_initialize& (0+255),b
  9724  000B22  0E94               	movlw	148
  9725  000B24                     u16687:
  9726  000B24  2EE8               	decfsz	wreg,f,c
  9727  000B26  D7FE               	bra	u16687
  9728  000B28  2F74               	decfsz	??_sdc_disk_initialize& (0+255),f,b
  9729  000B2A  D7FC               	bra	u16687
  9730  000B2C  F000               	nop	
  9731                           
  9732                           ;diskio.c: 348: dummy_clocks(100);
  9733  000B2E  0E64               	movlw	100
  9734  000B30  EC0C  F01C         	call	_dummy_clocks
  9735                           
  9736                           ;diskio.c: 351: sdc_reset();
  9737  000B34  EC33  F015         	call	_sdc_reset	;wreg free
  9738                           
  9739                           ;diskio.c: 352: command(0X48, 0x000001AA, 0x87);
  9740  000B38  0EAA               	movlw	170
  9741  000B3A  6E20               	movwf	command@arg,c
  9742  000B3C  0E01               	movlw	1
  9743  000B3E  6E21               	movwf	command@arg+1,c
  9744  000B40  0E00               	movlw	0
  9745  000B42  6E22               	movwf	command@arg+2,c
  9746  000B44  0E00               	movlw	0
  9747  000B46  6E23               	movwf	command@arg+3,c
  9748  000B48  0E87               	movlw	135
  9749  000B4A  6E24               	movwf	command@CRC,c
  9750  000B4C  0E48               	movlw	72
  9751  000B4E  EC00  F01A         	call	_command
  9752                           
  9753                           ;diskio.c: 353: proceed();
  9754  000B52  EC51  F01D         	call	_proceed	;wreg free
  9755  000B56                     
  9756                           ;diskio.c: 355: buff_i = response();
  9757  000B56  EC4B  F01D         	call	_response	;wreg free
  9758  000B5A  0100               	movlb	0	; () banked
  9759  000B5C  6F7C               	movwf	sdc_disk_initialize@buff_i& (0+255),b
  9760                           
  9761                           ; BSR set to: 0
  9762                           ;diskio.c: 356: posicao_cursor_lcd(1,0);
  9763  000B5E  0E00               	movlw	0
  9764  000B60  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  9765  000B62  0E01               	movlw	1
  9766  000B64  EC93  F019         	call	_posicao_cursor_lcd
  9767                           
  9768                           ;diskio.c: 357: escreve_inteiro_lcd(buff_i);
  9769  000B68  C07C  F02C         	movff	sdc_disk_initialize@buff_i,escreve_inteiro_lcd@valor
  9770  000B6C  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
  9771  000B6E  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
  9772                           
  9773                           ;diskio.c: 358: if(buff_i == 1)
  9774  000B72  0100               	movlb	0	; () banked
  9775  000B74  057C               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
  9776  000B76  A4D8               	btfss	status,2,c
  9777  000B78  D004               	goto	l893
  9778                           
  9779                           ; BSR set to: 0
  9780                           ;diskio.c: 359: {
  9781                           ;diskio.c: 360: crc_number = buff_i<<8;
  9782  000B7A  517C               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
  9783  000B7C  6F7B               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
  9784  000B7E  6B7A               	clrf	sdc_disk_initialize@crc_number& (0+255),b
  9785                           
  9786                           ;diskio.c: 361: }
  9787  000B80  D006               	goto	l895
  9788  000B82                     l893:
  9789                           
  9790                           ; BSR set to: 0
  9791                           ;diskio.c: 362: else if(buff_i==0xAA)
  9792                           
  9793                           ; BSR set to: 0
  9794  000B82  0EAA               	movlw	170
  9795  000B84  197C               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
  9796  000B86  A4D8               	btfss	status,2,c
  9797  000B88  D002               	goto	l895
  9798                           
  9799                           ; BSR set to: 0
  9800                           ;diskio.c: 363: {
  9801                           ;diskio.c: 364: crc_number |= buff_i;
  9802  000B8A  517C               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
  9803  000B8C  137A               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
  9804  000B8E                     l895:
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;diskio.c: 365: }
  9808                           ;diskio.c: 366: count1++;
  9809                           
  9810                           ; BSR set to: 0
  9811                           
  9812                           ; BSR set to: 0
  9813  000B8E  4B78               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
  9814  000B90  2B79               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
  9815                           
  9816                           ; BSR set to: 0
  9817                           ;diskio.c: 367: }while(crc_number != 0x1AA && count1<1000);
  9818  000B92  0EAA               	movlw	170
  9819  000B94  197A               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
  9820  000B96  E103               	bnz	u12410
  9821  000B98  057B               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
  9822  000B9A  B4D8               	btfsc	status,2,c
  9823  000B9C  D008               	goto	u12420
  9824  000B9E                     u12410:
  9825                           
  9826                           ; BSR set to: 0
  9827  000B9E  BF79               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
  9828  000BA0  D7DA               	goto	l892
  9829  000BA2  0EE8               	movlw	232
  9830  000BA4  5D78               	subwf	sdc_disk_initialize@count1& (0+255),w,b
  9831  000BA6  0E03               	movlw	3
  9832  000BA8  5979               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
  9833  000BAA  A0D8               	btfss	status,0,c
  9834  000BAC  D7D4               	goto	l892
  9835  000BAE                     u12420:
  9836                           
  9837                           ; BSR set to: 0
  9838                           ;diskio.c: 372: if (crc_number == 0x1AA)
  9839                           
  9840                           ; BSR set to: 0
  9841                           
  9842                           ; BSR set to: 0
  9843  000BAE  0EAA               	movlw	170
  9844  000BB0  197A               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
  9845  000BB2  E102               	bnz	u12431
  9846  000BB4  057B               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
  9847  000BB6  A4D8               	btfss	status,2,c
  9848  000BB8                     u12431:
  9849  000BB8  D0F3               	goto	l899
  9850                           
  9851                           ; BSR set to: 0
  9852                           ;diskio.c: 373: {
  9853                           ;diskio.c: 374: count1 = 0;
  9854  000BBA  0E00               	movlw	0
  9855  000BBC  6F79               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
  9856  000BBE  0E00               	movlw	0
  9857  000BC0  6F78               	movwf	sdc_disk_initialize@count1& (0+255),b
  9858  000BC2                     l900:
  9859                           
  9860                           ; BSR set to: 0
  9861                           ;diskio.c: 376: count2 = 0;
  9862  000BC2  0E00               	movlw	0
  9863  000BC4  6F7F               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
  9864  000BC6  0E00               	movlw	0
  9865  000BC8  6F7E               	movwf	sdc_disk_initialize@count2& (0+255),b
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;diskio.c: 377: buff = 0XFF;
  9869  000BCA  6980               	setf	sdc_disk_initialize@buff& (0+255),b
  9870  000BCC                     
  9871                           ; BSR set to: 0
  9872                           ;diskio.c: 393: command(0X41, 0X00000000, 0XFF);
  9873                           
  9874                           ; BSR set to: 0
  9875  000BCC  0E00               	movlw	0
  9876  000BCE  6E20               	movwf	command@arg,c
  9877  000BD0  0E00               	movlw	0
  9878  000BD2  6E21               	movwf	command@arg+1,c
  9879  000BD4  0E00               	movlw	0
  9880  000BD6  6E22               	movwf	command@arg+2,c
  9881  000BD8  0E00               	movlw	0
  9882  000BDA  6E23               	movwf	command@arg+3,c
  9883  000BDC  0EFF               	movlw	255
  9884  000BDE  6E24               	movwf	command@CRC,c
  9885  000BE0  0E41               	movlw	65
  9886  000BE2  EC00  F01A         	call	_command
  9887                           
  9888                           ;diskio.c: 394: buff = 0XFF;
  9889  000BE6  0100               	movlb	0	; () banked
  9890  000BE8  6980               	setf	sdc_disk_initialize@buff& (0+255),b
  9891                           
  9892                           ; BSR set to: 0
  9893                           ;diskio.c: 396: proceed();
  9894  000BEA  EC51  F01D         	call	_proceed	;wreg free
  9895  000BEE                     
  9896                           ;diskio.c: 398: buff = response();
  9897  000BEE  EC4B  F01D         	call	_response	;wreg free
  9898  000BF2  0100               	movlb	0	; () banked
  9899  000BF4  6F80               	movwf	sdc_disk_initialize@buff& (0+255),b
  9900                           
  9901                           ; BSR set to: 0
  9902                           ;diskio.c: 399: count2++;
  9903  000BF6  4B7E               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
  9904  000BF8  2B7F               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
  9905                           
  9906                           ; BSR set to: 0
  9907                           ;diskio.c: 400: }while((buff!=0X01) && count2<10);
  9908  000BFA  0580               	decf	sdc_disk_initialize@buff& (0+255),w,b
  9909  000BFC  B4D8               	btfsc	status,2,c
  9910  000BFE  D008               	goto	u12450
  9911                           
  9912                           ; BSR set to: 0
  9913  000C00  BF7F               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
  9914  000C02  D7F5               	goto	l902
  9915  000C04  517F               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
  9916  000C06  E104               	bnz	l10910
  9917  000C08  0E0A               	movlw	10
  9918  000C0A  5D7E               	subwf	sdc_disk_initialize@count2& (0+255),w,b
  9919  000C0C  A0D8               	btfss	status,0,c
  9920  000C0E  D7EF               	goto	l902
  9921  000C10                     u12450:
  9922  000C10                     l10910:
  9923                           
  9924                           ; BSR set to: 0
  9925                           ;diskio.c: 401: dummy_clocks(10);
  9926  000C10  0E0A               	movlw	10
  9927  000C12  EC0C  F01C         	call	_dummy_clocks
  9928                           
  9929                           ;diskio.c: 402: command(0X77, 0X00000000, 0X00);
  9930  000C16  0E00               	movlw	0
  9931  000C18  6E20               	movwf	command@arg,c
  9932  000C1A  0E00               	movlw	0
  9933  000C1C  6E21               	movwf	command@arg+1,c
  9934  000C1E  0E00               	movlw	0
  9935  000C20  6E22               	movwf	command@arg+2,c
  9936  000C22  0E00               	movlw	0
  9937  000C24  6E23               	movwf	command@arg+3,c
  9938  000C26  0E00               	movlw	0
  9939  000C28  6E24               	movwf	command@CRC,c
  9940  000C2A  0E77               	movlw	119
  9941  000C2C  EC00  F01A         	call	_command
  9942                           
  9943                           ;diskio.c: 403: buff = 0XFF;
  9944  000C30  0100               	movlb	0	; () banked
  9945  000C32  6980               	setf	sdc_disk_initialize@buff& (0+255),b
  9946                           
  9947                           ; BSR set to: 0
  9948                           ;diskio.c: 405: proceed();
  9949  000C34  EC51  F01D         	call	_proceed	;wreg free
  9950  000C38                     
  9951                           ;diskio.c: 407: buff = response();
  9952  000C38  EC4B  F01D         	call	_response	;wreg free
  9953  000C3C  0100               	movlb	0	; () banked
  9954  000C3E  6F80               	movwf	sdc_disk_initialize@buff& (0+255),b
  9955                           
  9956                           ; BSR set to: 0
  9957                           ;diskio.c: 408: count2++;
  9958  000C40  4B7E               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
  9959  000C42  2B7F               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;diskio.c: 409: }while((buff!=0X01)&&(count2<10));
  9963  000C44  0580               	decf	sdc_disk_initialize@buff& (0+255),w,b
  9964  000C46  B4D8               	btfsc	status,2,c
  9965  000C48  D008               	goto	u12470
  9966                           
  9967                           ; BSR set to: 0
  9968  000C4A  BF7F               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
  9969  000C4C  D7F5               	goto	l906
  9970  000C4E  517F               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
  9971  000C50  E104               	bnz	l10926
  9972  000C52  0E0A               	movlw	10
  9973  000C54  5D7E               	subwf	sdc_disk_initialize@count2& (0+255),w,b
  9974  000C56  A0D8               	btfss	status,0,c
  9975  000C58  D7EF               	goto	l906
  9976  000C5A                     u12470:
  9977  000C5A                     l10926:
  9978                           
  9979                           ; BSR set to: 0
  9980                           ;diskio.c: 410: count2 = 0;
  9981  000C5A  0E00               	movlw	0
  9982  000C5C  6F7F               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
  9983  000C5E  0E00               	movlw	0
  9984  000C60  6F7E               	movwf	sdc_disk_initialize@count2& (0+255),b
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;diskio.c: 414: dummy_clocks(10);
  9988  000C62  0E0A               	movlw	10
  9989  000C64  EC0C  F01C         	call	_dummy_clocks
  9990                           
  9991                           ;diskio.c: 416: command(0X69, 0X40000000, 0x00);
  9992  000C68  0E00               	movlw	0
  9993  000C6A  6E20               	movwf	command@arg,c
  9994  000C6C  0E00               	movlw	0
  9995  000C6E  6E21               	movwf	command@arg+1,c
  9996  000C70  0E00               	movlw	0
  9997  000C72  6E22               	movwf	command@arg+2,c
  9998  000C74  0E40               	movlw	64
  9999  000C76  6E23               	movwf	command@arg+3,c
 10000  000C78  0E00               	movlw	0
 10001  000C7A  6E24               	movwf	command@CRC,c
 10002  000C7C  0E69               	movlw	105
 10003  000C7E  EC00  F01A         	call	_command
 10004                           
 10005                           ;diskio.c: 417: proceed();
 10006  000C82  EC51  F01D         	call	_proceed	;wreg free
 10007                           
 10008                           ;diskio.c: 418: buff = response();
 10009  000C86  EC4B  F01D         	call	_response	;wreg free
 10010  000C8A  0100               	movlb	0	; () banked
 10011  000C8C  6F80               	movwf	sdc_disk_initialize@buff& (0+255),b
 10012                           
 10013                           ; BSR set to: 0
 10014                           ;diskio.c: 419: count2++;
 10015  000C8E  4B7E               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 10016  000C90  2B7F               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 10017                           
 10018                           ; BSR set to: 0
 10019                           ;diskio.c: 420: posicao_cursor_lcd(2,5);
 10020  000C92  0E05               	movlw	5
 10021  000C94  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10022  000C96  0E02               	movlw	2
 10023  000C98  EC93  F019         	call	_posicao_cursor_lcd
 10024                           
 10025                           ;diskio.c: 421: escreve_inteiro_lcd(buff);
 10026  000C9C  C080  F02C         	movff	sdc_disk_initialize@buff,escreve_inteiro_lcd@valor
 10027  000CA0  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 10028  000CA2  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
 10029                           
 10030                           ;diskio.c: 422: }while(buff!=0X00);
 10031  000CA6  0100               	movlb	0	; () banked
 10032  000CA8  5180               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10033  000CAA  A4D8               	btfss	status,2,c
 10034  000CAC  D78F               	goto	l901
 10035                           
 10036                           ; BSR set to: 0
 10037                           ;diskio.c: 424: buff = 0xFF;
 10038  000CAE  6980               	setf	sdc_disk_initialize@buff& (0+255),b
 10039                           
 10040                           ; BSR set to: 0
 10041                           ;diskio.c: 427: dummy_clocks(10);
 10042  000CB0  0E0A               	movlw	10
 10043  000CB2  EC0C  F01C         	call	_dummy_clocks
 10044                           
 10045                           ;diskio.c: 428: command(0X7A, 0X00000000, 0XFF);
 10046  000CB6  0E00               	movlw	0
 10047  000CB8  6E20               	movwf	command@arg,c
 10048  000CBA  0E00               	movlw	0
 10049  000CBC  6E21               	movwf	command@arg+1,c
 10050  000CBE  0E00               	movlw	0
 10051  000CC0  6E22               	movwf	command@arg+2,c
 10052  000CC2  0E00               	movlw	0
 10053  000CC4  6E23               	movwf	command@arg+3,c
 10054  000CC6  0EFF               	movlw	255
 10055  000CC8  6E24               	movwf	command@CRC,c
 10056  000CCA  0E7A               	movlw	122
 10057  000CCC  EC00  F01A         	call	_command
 10058                           
 10059                           ;diskio.c: 429: proceed();
 10060  000CD0  EC51  F01D         	call	_proceed	;wreg free
 10061  000CD4                     
 10062                           ;diskio.c: 431: buff = response();
 10063  000CD4  EC4B  F01D         	call	_response	;wreg free
 10064  000CD8  0100               	movlb	0	; () banked
 10065  000CDA  6F80               	movwf	sdc_disk_initialize@buff& (0+255),b
 10066                           
 10067                           ; BSR set to: 0
 10068                           ;diskio.c: 432: ocr = (buff << 1) & 0b10000000;
 10069  000CDC  5180               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10070  000CDE  2580               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 10071  000CE0  0B80               	andlw	128
 10072  000CE2  6F7D               	movwf	sdc_disk_initialize@ocr& (0+255),b
 10073                           
 10074                           ; BSR set to: 0
 10075                           ;diskio.c: 433: posicao_cursor_lcd(2,0);
 10076  000CE4  0E00               	movlw	0
 10077  000CE6  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10078  000CE8  0E02               	movlw	2
 10079  000CEA  EC93  F019         	call	_posicao_cursor_lcd
 10080                           
 10081                           ;diskio.c: 434: escreve_inteiro_lcd(ocr);
 10082  000CEE  C07D  F02C         	movff	sdc_disk_initialize@ocr,escreve_inteiro_lcd@valor
 10083  000CF2  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 10084  000CF4  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
 10085                           
 10086                           ;diskio.c: 435: count2++;
 10087  000CF8  0100               	movlb	0	; () banked
 10088  000CFA  4B7E               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 10089  000CFC  2B7F               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 10090                           
 10091                           ; BSR set to: 0
 10092                           ;diskio.c: 436: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 10093  000CFE  517D               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 10094  000D00  B4D8               	btfsc	status,2,c
 10095  000D02  D00B               	goto	u12510
 10096                           
 10097                           ; BSR set to: 0
 10098  000D04  057D               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 10099  000D06  B4D8               	btfsc	status,2,c
 10100  000D08  D008               	goto	u12510
 10101                           
 10102                           ; BSR set to: 0
 10103  000D0A  BF7F               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 10104  000D0C  D7E3               	goto	l911
 10105  000D0E  517F               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 10106  000D10  E104               	bnz	l10966
 10107  000D12  0E0A               	movlw	10
 10108  000D14  5D7E               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 10109  000D16  A0D8               	btfss	status,0,c
 10110  000D18  D7DD               	goto	l911
 10111  000D1A                     u12510:
 10112  000D1A                     l10966:
 10113                           
 10114                           ; BSR set to: 0
 10115                           ;diskio.c: 437: }while(ocr != 0X00 && ocr !=0x01);
 10116  000D1A  517D               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 10117  000D1C  B4D8               	btfsc	status,2,c
 10118  000D1E  D003               	goto	u12530
 10119                           
 10120                           ; BSR set to: 0
 10121  000D20  057D               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 10122  000D22  A4D8               	btfss	status,2,c
 10123  000D24  D74E               	goto	l900
 10124  000D26                     u12530:
 10125                           
 10126                           ; BSR set to: 0
 10127                           ;diskio.c: 439: escreve_cmd_lcd(0b00000001);
 10128                           
 10129                           ; BSR set to: 0
 10130                           
 10131                           ; BSR set to: 0
 10132  000D26  0E01               	movlw	1
 10133  000D28  EC97  F017         	call	_escreve_cmd_lcd
 10134                           
 10135                           ;diskio.c: 440: posicao_cursor_lcd(1,0);
 10136  000D2C  0E00               	movlw	0
 10137  000D2E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10138  000D30  0E01               	movlw	1
 10139  000D32  EC93  F019         	call	_posicao_cursor_lcd
 10140                           
 10141                           ;diskio.c: 441: escreve_inteiro_lcd(ocr);
 10142  000D36  C07D  F02C         	movff	sdc_disk_initialize@ocr,escreve_inteiro_lcd@valor
 10143  000D3A  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 10144  000D3C  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
 10145                           
 10146                           ;diskio.c: 442: count1 = 0;
 10147  000D40  0E00               	movlw	0
 10148  000D42  0100               	movlb	0	; () banked
 10149  000D44  6F79               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 10150  000D46  0E00               	movlw	0
 10151  000D48  6F78               	movwf	sdc_disk_initialize@count1& (0+255),b
 10152                           
 10153                           ; BSR set to: 0
 10154                           ;diskio.c: 444: _delay((unsigned long)((1)*(48000000/4000.0)));
 10155  000D4A  0E10               	movlw	16
 10156  000D4C  0100               	movlb	0	; () banked
 10157  000D4E  6F74               	movwf	??_sdc_disk_initialize& (0+255),b
 10158  000D50  0E94               	movlw	148
 10159  000D52                     u16697:
 10160  000D52  2EE8               	decfsz	wreg,f,c
 10161  000D54  D7FE               	bra	u16697
 10162  000D56  2F74               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 10163  000D58  D7FC               	bra	u16697
 10164  000D5A  F000               	nop	
 10165                           
 10166                           ;diskio.c: 445: stat = 0X00;
 10167  000D5C  0E00               	movlw	0
 10168  000D5E  0100               	movlb	0	; () banked
 10169  000D60  6F77               	movwf	sdc_disk_initialize@stat& (0+255),b
 10170                           
 10171                           ; BSR set to: 0
 10172                           ;diskio.c: 447: if(!ocr)
 10173  000D62  517D               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 10174  000D64  A4D8               	btfss	status,2,c
 10175  000D66  D0B3               	goto	u12630
 10176                           
 10177                           ; BSR set to: 0
 10178                           ;diskio.c: 448: {
 10179                           ;diskio.c: 450: dummy_clocks(10);
 10180  000D68  0E0A               	movlw	10
 10181  000D6A  EC0C  F01C         	call	_dummy_clocks
 10182                           
 10183                           ;diskio.c: 451: command(0X50,0X00000200,0XFF);
 10184  000D6E  0E00               	movlw	0
 10185  000D70  6E20               	movwf	command@arg,c
 10186  000D72  0E02               	movlw	2
 10187  000D74  6E21               	movwf	command@arg+1,c
 10188  000D76  0E00               	movlw	0
 10189  000D78  6E22               	movwf	command@arg+2,c
 10190  000D7A  0E00               	movlw	0
 10191  000D7C  6E23               	movwf	command@arg+3,c
 10192  000D7E  0EFF               	movlw	255
 10193  000D80  6E24               	movwf	command@CRC,c
 10194  000D82  0E50               	movlw	80
 10195  000D84  EC00  F01A         	call	_command
 10196                           
 10197                           ;diskio.c: 452: proceed();
 10198  000D88  EC51  F01D         	call	_proceed	;wreg free
 10199                           
 10200                           ;diskio.c: 454: buff = 0xFF;
 10201  000D8C  0100               	movlb	0	; () banked
 10202  000D8E  6980               	setf	sdc_disk_initialize@buff& (0+255),b
 10203  000D90                     
 10204                           ; BSR set to: 0
 10205                           ;diskio.c: 456: buff = response();
 10206                           
 10207                           ; BSR set to: 0
 10208  000D90  EC4B  F01D         	call	_response	;wreg free
 10209  000D94  0100               	movlb	0	; () banked
 10210  000D96  6F80               	movwf	sdc_disk_initialize@buff& (0+255),b
 10211                           
 10212                           ; BSR set to: 0
 10213                           ;diskio.c: 457: }while(buff!=0X00);
 10214  000D98  5180               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10215  000D9A  B4D8               	btfsc	status,2,c
 10216  000D9C  D098               	goto	u12630
 10217  000D9E  D7F8               	goto	l919
 10218  000DA0                     l899:
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;diskio.c: 462: else
 10222                           ;diskio.c: 463: {
 10223                           ;diskio.c: 465: count2 = 0;
 10224                           
 10225                           ; BSR set to: 0
 10226  000DA0  0E00               	movlw	0
 10227  000DA2  6F7F               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 10228  000DA4  0E00               	movlw	0
 10229  000DA6  6F7E               	movwf	sdc_disk_initialize@count2& (0+255),b
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;diskio.c: 466: buff = 0XFF;
 10233  000DA8  6980               	setf	sdc_disk_initialize@buff& (0+255),b
 10234                           
 10235                           ; BSR set to: 0
 10236                           ;diskio.c: 467: dummy_clocks(1);
 10237  000DAA  0E01               	movlw	1
 10238  000DAC  EC0C  F01C         	call	_dummy_clocks
 10239                           
 10240                           ;diskio.c: 468: command(0X69, 0X00000000, 0XFF);
 10241  000DB0  0E00               	movlw	0
 10242  000DB2  6E20               	movwf	command@arg,c
 10243  000DB4  0E00               	movlw	0
 10244  000DB6  6E21               	movwf	command@arg+1,c
 10245  000DB8  0E00               	movlw	0
 10246  000DBA  6E22               	movwf	command@arg+2,c
 10247  000DBC  0E00               	movlw	0
 10248  000DBE  6E23               	movwf	command@arg+3,c
 10249  000DC0  0EFF               	movlw	255
 10250  000DC2  6E24               	movwf	command@CRC,c
 10251  000DC4  0E69               	movlw	105
 10252  000DC6  EC00  F01A         	call	_command
 10253                           
 10254                           ;diskio.c: 469: proceed();
 10255  000DCA  EC51  F01D         	call	_proceed	;wreg free
 10256  000DCE                     
 10257                           ;diskio.c: 471: buff = response();
 10258  000DCE  EC4B  F01D         	call	_response	;wreg free
 10259  000DD2  0100               	movlb	0	; () banked
 10260  000DD4  6F80               	movwf	sdc_disk_initialize@buff& (0+255),b
 10261                           
 10262                           ; BSR set to: 0
 10263                           ;diskio.c: 472: count2++;
 10264  000DD6  4B7E               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 10265  000DD8  2B7F               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 10266                           
 10267                           ; BSR set to: 0
 10268                           ;diskio.c: 473: if(buff==0x00)
 10269  000DDA  5180               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10270  000DDC  A4D8               	btfss	status,2,c
 10271  000DDE  D00B               	goto	l923
 10272                           
 10273                           ; BSR set to: 0
 10274                           ;diskio.c: 474: {
 10275                           ;diskio.c: 475: posicao_cursor_lcd(1,0);
 10276  000DE0  0E00               	movlw	0
 10277  000DE2  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10278  000DE4  0E01               	movlw	1
 10279  000DE6  EC93  F019         	call	_posicao_cursor_lcd
 10280                           
 10281                           ;diskio.c: 476: escreve_frase_ram_lcd("SD VER. 1");
 10282  000DEA  0E2D               	movlw	low STR_21
 10283  000DEC  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10284  000DEE  0E62               	movlw	high STR_21
 10285  000DF0  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10286  000DF2  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
 10287  000DF6                     l923:
 10288                           
 10289                           ;diskio.c: 477: }
 10290                           ;diskio.c: 478: _delay((unsigned long)((1)*(48000000/4000.0)));
 10291  000DF6  0E10               	movlw	16
 10292  000DF8  0100               	movlb	0	; () banked
 10293  000DFA  6F74               	movwf	??_sdc_disk_initialize& (0+255),b
 10294  000DFC  0E94               	movlw	148
 10295  000DFE                     u16707:
 10296  000DFE  2EE8               	decfsz	wreg,f,c
 10297  000E00  D7FE               	bra	u16707
 10298  000E02  2F74               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 10299  000E04  D7FC               	bra	u16707
 10300  000E06  F000               	nop	
 10301                           
 10302                           ;diskio.c: 479: }while(buff!=0X00 && count2<10000);
 10303  000E08  0100               	movlb	0	; () banked
 10304  000E0A  5180               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10305  000E0C  B4D8               	btfsc	status,2,c
 10306  000E0E  D008               	goto	u12580
 10307                           
 10308                           ; BSR set to: 0
 10309  000E10  BF7F               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 10310  000E12  D7DD               	goto	l922
 10311  000E14  0E10               	movlw	16
 10312  000E16  5D7E               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 10313  000E18  0E27               	movlw	39
 10314  000E1A  597F               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 10315  000E1C  A0D8               	btfss	status,0,c
 10316  000E1E  D7D7               	goto	l922
 10317  000E20                     u12580:
 10318                           
 10319                           ; BSR set to: 0
 10320                           ;diskio.c: 481: buff = 0xFF;
 10321                           
 10322                           ; BSR set to: 0
 10323  000E20  6980               	setf	sdc_disk_initialize@buff& (0+255),b
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;diskio.c: 482: if(count2==10)
 10327  000E22  0E0A               	movlw	10
 10328  000E24  197E               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 10329  000E26  117F               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 10330  000E28  A4D8               	btfss	status,2,c
 10331  000E2A  D036               	goto	u12620
 10332                           
 10333                           ; BSR set to: 0
 10334                           ;diskio.c: 483: {
 10335                           ;diskio.c: 484: count2 = 0;
 10336  000E2C  0E00               	movlw	0
 10337  000E2E  6F7F               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 10338  000E30  0E00               	movlw	0
 10339  000E32  6F7E               	movwf	sdc_disk_initialize@count2& (0+255),b
 10340                           
 10341                           ; BSR set to: 0
 10342                           ;diskio.c: 485: dummy_clocks(10);
 10343  000E34  0E0A               	movlw	10
 10344  000E36  EC0C  F01C         	call	_dummy_clocks
 10345                           
 10346                           ;diskio.c: 486: command(0X41, 0X00000000, 0XFF);
 10347  000E3A  0E00               	movlw	0
 10348  000E3C  6E20               	movwf	command@arg,c
 10349  000E3E  0E00               	movlw	0
 10350  000E40  6E21               	movwf	command@arg+1,c
 10351  000E42  0E00               	movlw	0
 10352  000E44  6E22               	movwf	command@arg+2,c
 10353  000E46  0E00               	movlw	0
 10354  000E48  6E23               	movwf	command@arg+3,c
 10355  000E4A  0EFF               	movlw	255
 10356  000E4C  6E24               	movwf	command@CRC,c
 10357  000E4E  0E41               	movlw	65
 10358  000E50  EC00  F01A         	call	_command
 10359                           
 10360                           ;diskio.c: 487: proceed();
 10361  000E54  EC51  F01D         	call	_proceed	;wreg free
 10362  000E58                     
 10363                           ;diskio.c: 489: buff = response();
 10364  000E58  EC4B  F01D         	call	_response	;wreg free
 10365  000E5C  0100               	movlb	0	; () banked
 10366  000E5E  6F80               	movwf	sdc_disk_initialize@buff& (0+255),b
 10367                           
 10368                           ; BSR set to: 0
 10369                           ;diskio.c: 490: count2++;
 10370  000E60  4B7E               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 10371  000E62  2B7F               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 10372                           
 10373                           ; BSR set to: 0
 10374                           ;diskio.c: 491: if(buff==0x00)
 10375  000E64  5180               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10376  000E66  A4D8               	btfss	status,2,c
 10377  000E68  D00B               	goto	l929
 10378                           
 10379                           ; BSR set to: 0
 10380                           ;diskio.c: 492: {
 10381                           ;diskio.c: 493: posicao_cursor_lcd(1,0);
 10382  000E6A  0E00               	movlw	0
 10383  000E6C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10384  000E6E  0E01               	movlw	1
 10385  000E70  EC93  F019         	call	_posicao_cursor_lcd
 10386                           
 10387                           ;diskio.c: 494: escreve_frase_ram_lcd("MMC Ver. 3");
 10388  000E74  0E0C               	movlw	low STR_22
 10389  000E76  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10390  000E78  0E62               	movlw	high STR_22
 10391  000E7A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10392  000E7C  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
 10393  000E80                     l929:
 10394                           
 10395                           ;diskio.c: 495: }
 10396                           ;diskio.c: 497: }while(buff!=0X00 && count2<10000);
 10397  000E80  0100               	movlb	0	; () banked
 10398  000E82  5180               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10399  000E84  B4D8               	btfsc	status,2,c
 10400  000E86  D008               	goto	u12620
 10401                           
 10402                           ; BSR set to: 0
 10403  000E88  BF7F               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 10404  000E8A  D7E6               	goto	l928
 10405  000E8C  0E10               	movlw	16
 10406  000E8E  5D7E               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 10407  000E90  0E27               	movlw	39
 10408  000E92  597F               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 10409  000E94  A0D8               	btfss	status,0,c
 10410  000E96  D7E0               	goto	l928
 10411  000E98                     u12620:
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;diskio.c: 498: }
 10415                           ;diskio.c: 501: dummy_clocks(10);
 10416                           
 10417                           ; BSR set to: 0
 10418                           
 10419                           ; BSR set to: 0
 10420                           
 10421                           ; BSR set to: 0
 10422  000E98  0E0A               	movlw	10
 10423  000E9A  EC0C  F01C         	call	_dummy_clocks
 10424                           
 10425                           ;diskio.c: 502: command(0X50,0X00000200,0XFF);
 10426  000E9E  0E00               	movlw	0
 10427  000EA0  6E20               	movwf	command@arg,c
 10428  000EA2  0E02               	movlw	2
 10429  000EA4  6E21               	movwf	command@arg+1,c
 10430  000EA6  0E00               	movlw	0
 10431  000EA8  6E22               	movwf	command@arg+2,c
 10432  000EAA  0E00               	movlw	0
 10433  000EAC  6E23               	movwf	command@arg+3,c
 10434  000EAE  0EFF               	movlw	255
 10435  000EB0  6E24               	movwf	command@CRC,c
 10436  000EB2  0E50               	movlw	80
 10437  000EB4  EC00  F01A         	call	_command
 10438                           
 10439                           ;diskio.c: 503: proceed();
 10440  000EB8  EC51  F01D         	call	_proceed	;wreg free
 10441                           
 10442                           ;diskio.c: 505: buff = 0xFF;
 10443  000EBC  0100               	movlb	0	; () banked
 10444  000EBE  6980               	setf	sdc_disk_initialize@buff& (0+255),b
 10445  000EC0                     
 10446                           ; BSR set to: 0
 10447                           ;diskio.c: 507: buff = response();
 10448                           
 10449                           ; BSR set to: 0
 10450  000EC0  EC4B  F01D         	call	_response	;wreg free
 10451  000EC4  0100               	movlb	0	; () banked
 10452  000EC6  6F80               	movwf	sdc_disk_initialize@buff& (0+255),b
 10453                           
 10454                           ; BSR set to: 0
 10455                           ;diskio.c: 508: }while(buff!=0X00);
 10456  000EC8  5180               	movf	sdc_disk_initialize@buff& (0+255),w,b
 10457  000ECA  A4D8               	btfss	status,2,c
 10458  000ECC  D7F9               	goto	l933
 10459  000ECE                     u12630:
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;diskio.c: 510: }
 10463                           ;diskio.c: 514: return stat;
 10464                           
 10465                           ; BSR set to: 0
 10466                           
 10467                           ; BSR set to: 0
 10468  000ECE  5177               	movf	sdc_disk_initialize@stat& (0+255),w,b
 10469  000ED0  0012               	return	
 10470  000ED2                     __end_of_sdc_disk_initialize:
 10471                           	opt stack 0
 10472                           tblptru	equ	0xFF8
 10473                           tblptrh	equ	0xFF7
 10474                           tblptrl	equ	0xFF6
 10475                           tablat	equ	0xFF5
 10476                           prodh	equ	0xFF4
 10477                           prodl	equ	0xFF3
 10478                           intcon	equ	0xFF2
 10479                           intcon2	equ	0xFF1
 10480                           intcon3	equ	0xFF0
 10481                           indf0	equ	0xFEF
 10482                           postinc0	equ	0xFEE
 10483                           fsr0h	equ	0xFEA
 10484                           fsr0l	equ	0xFE9
 10485                           wreg	equ	0xFE8
 10486                           indf1	equ	0xFE7
 10487                           postinc1	equ	0xFE6
 10488                           postdec1	equ	0xFE5
 10489                           fsr1h	equ	0xFE2
 10490                           fsr1l	equ	0xFE1
 10491                           indf2	equ	0xFDF
 10492                           postinc2	equ	0xFDE
 10493                           postdec2	equ	0xFDD
 10494                           plusw2	equ	0xFDB
 10495                           fsr2h	equ	0xFDA
 10496                           fsr2l	equ	0xFD9
 10497                           status	equ	0xFD8
 10498                           
 10499 ;; *************** function _sdc_reset *****************
 10500 ;; Defined at:
 10501 ;;		line 288 in file "bibliotecas/diskio.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;		None
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;  teste          10    0        unsigned char [10]
 10506 ;;  count           2   17[BANK0 ] int 
 10507 ;;  count_nosd      2   15[BANK0 ] int 
 10508 ;;  i               2   13[BANK0 ] int 
 10509 ;;  receive         2    0        unsigned int 
 10510 ;;  buff            1   19[BANK0 ] unsigned char 
 10511 ;;  stat            1    0        unsigned char 
 10512 ;; Return value:  Size  Location     Type
 10513 ;;                  1    wreg      void 
 10514 ;; Registers used:
 10515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10516 ;; Tracked objects:
 10517 ;;		On entry : 0/0
 10518 ;;		On exit  : 0/0
 10519 ;;		Unchanged: 0/0
 10520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10521 ;;      Params:         0       0       0       0       0       0       0       0       0
 10522 ;;      Locals:         0       7       0       0       0       0       0       0       0
 10523 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10524 ;;      Totals:         0       7       0       0       0       0       0       0       0
 10525 ;;Total ram usage:        7 bytes
 10526 ;; Hardware stack levels used:    1
 10527 ;; Hardware stack levels required when called:    6
 10528 ;; This function calls:
 10529 ;;		_command
 10530 ;;		_escreve_frase_ram_lcd
 10531 ;;		_escreve_inteiro_lcd
 10532 ;;		_posicao_cursor_lcd
 10533 ;;		_proceed
 10534 ;;		_response
 10535 ;; This function is called by:
 10536 ;;		_sdc_disk_initialize
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           	psect	text31
 10541  002A66                     __ptext31:
 10542                           	opt stack 0
 10543  002A66                     _sdc_reset:
 10544                           	opt stack 19
 10545                           
 10546                           ;diskio.c: 290: int i = 0, count = 0, count_nosd = 0;
 10547                           
 10548                           ; BSR set to: 0
 10549                           ;incstack = 0
 10550  002A66  0E00               	movlw	0
 10551  002A68  0100               	movlb	0	; () banked
 10552  002A6A  6F6E               	movwf	(sdc_reset@i+1)& (0+255),b
 10553  002A6C  0E00               	movlw	0
 10554  002A6E  6F6D               	movwf	sdc_reset@i& (0+255),b
 10555  002A70  0E00               	movlw	0
 10556  002A72  6F72               	movwf	(sdc_reset@count+1)& (0+255),b
 10557  002A74  0E00               	movlw	0
 10558  002A76  6F71               	movwf	sdc_reset@count& (0+255),b
 10559  002A78  0E00               	movlw	0
 10560  002A7A  6F70               	movwf	(sdc_reset@count_nosd+1)& (0+255),b
 10561  002A7C  0E00               	movlw	0
 10562  002A7E  6F6F               	movwf	sdc_reset@count_nosd& (0+255),b
 10563  002A80                     
 10564                           ; BSR set to: 0
 10565                           ;diskio.c: 301: command(0X40, 0X00000000, 0X95);
 10566                           
 10567                           ; BSR set to: 0
 10568  002A80  0E00               	movlw	0
 10569  002A82  6E20               	movwf	command@arg,c
 10570  002A84  0E00               	movlw	0
 10571  002A86  6E21               	movwf	command@arg+1,c
 10572  002A88  0E00               	movlw	0
 10573  002A8A  6E22               	movwf	command@arg+2,c
 10574  002A8C  0E00               	movlw	0
 10575  002A8E  6E23               	movwf	command@arg+3,c
 10576  002A90  0E95               	movlw	149
 10577  002A92  6E24               	movwf	command@CRC,c
 10578  002A94  0E40               	movlw	64
 10579  002A96  EC00  F01A         	call	_command
 10580                           
 10581                           ;diskio.c: 302: proceed();
 10582  002A9A  EC51  F01D         	call	_proceed	;wreg free
 10583  002A9E                     
 10584                           ;diskio.c: 305: buff = response();
 10585  002A9E  EC4B  F01D         	call	_response	;wreg free
 10586  002AA2  0100               	movlb	0	; () banked
 10587  002AA4  6F73               	movwf	sdc_reset@buff& (0+255),b
 10588                           
 10589                           ; BSR set to: 0
 10590                           ;diskio.c: 306: count++;
 10591  002AA6  4B71               	infsnz	sdc_reset@count& (0+255),f,b
 10592  002AA8  2B72               	incf	(sdc_reset@count+1)& (0+255),f,b
 10593                           
 10594                           ; BSR set to: 0
 10595                           ;diskio.c: 307: posicao_cursor_lcd(1,0);
 10596  002AAA  0E00               	movlw	0
 10597  002AAC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10598  002AAE  0E01               	movlw	1
 10599  002AB0  EC93  F019         	call	_posicao_cursor_lcd
 10600                           
 10601                           ;diskio.c: 308: escreve_inteiro_lcd(buff);
 10602  002AB4  C073  F02C         	movff	sdc_reset@buff,escreve_inteiro_lcd@valor
 10603  002AB8  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 10604  002ABA  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
 10605                           
 10606                           ;diskio.c: 309: }while(buff!=0X01 && count<10);
 10607  002ABE  0100               	movlb	0	; () banked
 10608  002AC0  0573               	decf	sdc_reset@buff& (0+255),w,b
 10609  002AC2  B4D8               	btfsc	status,2,c
 10610  002AC4  D008               	goto	u12250
 10611                           
 10612                           ; BSR set to: 0
 10613  002AC6  BF72               	btfsc	(sdc_reset@count+1)& (0+255),7,b
 10614  002AC8  D7EA               	goto	l882
 10615  002ACA  5172               	movf	(sdc_reset@count+1)& (0+255),w,b
 10616  002ACC  E104               	bnz	l10748
 10617  002ACE  0E0A               	movlw	10
 10618  002AD0  5D71               	subwf	sdc_reset@count& (0+255),w,b
 10619  002AD2  A0D8               	btfss	status,0,c
 10620  002AD4  D7E4               	goto	l882
 10621  002AD6                     u12250:
 10622  002AD6                     l10748:
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;diskio.c: 311: count = 0;
 10626  002AD6  0E00               	movlw	0
 10627  002AD8  6F72               	movwf	(sdc_reset@count+1)& (0+255),b
 10628  002ADA  0E00               	movlw	0
 10629  002ADC  6F71               	movwf	sdc_reset@count& (0+255),b
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;diskio.c: 312: if(buff != 0x01)
 10633  002ADE  0573               	decf	sdc_reset@buff& (0+255),w,b
 10634  002AE0  B4D8               	btfsc	status,2,c
 10635  002AE2  D017               	goto	l886
 10636                           
 10637                           ; BSR set to: 0
 10638                           ;diskio.c: 313: {
 10639                           ;diskio.c: 314: posicao_cursor_lcd(1,0);
 10640  002AE4  0E00               	movlw	0
 10641  002AE6  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10642  002AE8  0E01               	movlw	1
 10643  002AEA  EC93  F019         	call	_posicao_cursor_lcd
 10644                           
 10645                           ;diskio.c: 315: escreve_frase_ram_lcd("Sem Cartao");
 10646  002AEE  0E22               	movlw	low STR_18
 10647  002AF0  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10648  002AF2  0E62               	movlw	high STR_18
 10649  002AF4  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10650  002AF6  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
 10651                           
 10652                           ;diskio.c: 316: posicao_cursor_lcd(2,0);
 10653  002AFA  0E00               	movlw	0
 10654  002AFC  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10655  002AFE  0E02               	movlw	2
 10656  002B00  EC93  F019         	call	_posicao_cursor_lcd
 10657                           
 10658                           ;diskio.c: 317: escreve_frase_ram_lcd("Insira o Cartao");
 10659  002B04  0EB3               	movlw	low STR_19
 10660  002B06  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10661  002B08  0E61               	movlw	high STR_19
 10662  002B0A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10663  002B0C  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
 10664                           
 10665                           ;diskio.c: 318: }
 10666  002B10  D00B               	goto	l887
 10667  002B12                     l886:
 10668                           
 10669                           ;diskio.c: 319: else
 10670                           ;diskio.c: 320: {
 10671                           ;diskio.c: 321: posicao_cursor_lcd(1,0);
 10672  002B12  0E00               	movlw	0
 10673  002B14  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 10674  002B16  0E01               	movlw	1
 10675  002B18  EC93  F019         	call	_posicao_cursor_lcd
 10676                           
 10677                           ;diskio.c: 322: escreve_frase_ram_lcd("Cartao Inserido");
 10678  002B1C  0EC3               	movlw	low STR_20
 10679  002B1E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 10680  002B20  0E61               	movlw	high STR_20
 10681  002B22  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 10682  002B24  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
 10683  002B28                     l887:
 10684                           
 10685                           ;diskio.c: 323: }
 10686                           ;diskio.c: 325: }while(buff!=0X01);
 10687  002B28  0100               	movlb	0	; () banked
 10688  002B2A  0573               	decf	sdc_reset@buff& (0+255),w,b
 10689  002B2C  B4D8               	btfsc	status,2,c
 10690  002B2E  0012               	return	
 10691  002B30  D7A7               	goto	l881
 10692  002B32                     __end_of_sdc_reset:
 10693                           	opt stack 0
 10694                           tblptru	equ	0xFF8
 10695                           tblptrh	equ	0xFF7
 10696                           tblptrl	equ	0xFF6
 10697                           tablat	equ	0xFF5
 10698                           prodh	equ	0xFF4
 10699                           prodl	equ	0xFF3
 10700                           intcon	equ	0xFF2
 10701                           intcon2	equ	0xFF1
 10702                           intcon3	equ	0xFF0
 10703                           indf0	equ	0xFEF
 10704                           postinc0	equ	0xFEE
 10705                           fsr0h	equ	0xFEA
 10706                           fsr0l	equ	0xFE9
 10707                           wreg	equ	0xFE8
 10708                           indf1	equ	0xFE7
 10709                           postinc1	equ	0xFE6
 10710                           postdec1	equ	0xFE5
 10711                           fsr1h	equ	0xFE2
 10712                           fsr1l	equ	0xFE1
 10713                           indf2	equ	0xFDF
 10714                           postinc2	equ	0xFDE
 10715                           postdec2	equ	0xFDD
 10716                           plusw2	equ	0xFDB
 10717                           fsr2h	equ	0xFDA
 10718                           fsr2l	equ	0xFD9
 10719                           status	equ	0xFD8
 10720                           
 10721 ;; *************** function _check_fs *****************
 10722 ;; Defined at:
 10723 ;;		line 623 in file "bibliotecas/tff.c"
 10724 ;; Parameters:    Size  Location     Type
 10725 ;;  sect            4   45[BANK0 ] unsigned long 
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;  fs              2   51[BANK0 ] PTR struct _FATFS
 10728 ;;		 -> NULL(0), fs(544), 
 10729 ;; Return value:  Size  Location     Type
 10730 ;;                  1    wreg      unsigned char 
 10731 ;; Registers used:
 10732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10733 ;; Tracked objects:
 10734 ;;		On entry : 0/0
 10735 ;;		On exit  : 0/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10738 ;;      Params:         0       4       0       0       0       0       0       0       0
 10739 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10740 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10741 ;;      Totals:         0       8       0       0       0       0       0       0       0
 10742 ;;Total ram usage:        8 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; Hardware stack levels required when called:    8
 10745 ;; This function calls:
 10746 ;;		_disk_read
 10747 ;;		_memcmp
 10748 ;; This function is called by:
 10749 ;;		_auto_mount
 10750 ;; This function uses a non-reentrant model
 10751 ;;
 10752                           
 10753                           	psect	text32
 10754  002FBA                     __ptext32:
 10755                           	opt stack 0
 10756  002FBA                     _check_fs:
 10757                           	opt stack 19
 10758                           
 10759                           ;tff.c: 627: FATFS *fs = FatFs;
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;incstack = 0
 10763  002FBA  C0EF  F093         	movff	_FatFs,check_fs@fs
 10764  002FBE  C0F0  F094         	movff	_FatFs+1,check_fs@fs+1
 10765                           
 10766                           ;tff.c: 629: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 10767  002FC2  0E20               	movlw	32
 10768  002FC4  0100               	movlb	0	; () banked
 10769  002FC6  2593               	addwf	check_fs@fs& (0+255),w,b
 10770  002FC8  6F80               	movwf	disk_read@buff& (0+255),b
 10771  002FCA  0E00               	movlw	0
 10772  002FCC  2194               	addwfc	(check_fs@fs+1)& (0+255),w,b
 10773  002FCE  6F81               	movwf	(disk_read@buff+1)& (0+255),b
 10774  002FD0  C08D  F082         	movff	check_fs@sect,disk_read@sector
 10775  002FD4  C08E  F083         	movff	check_fs@sect+1,disk_read@sector+1
 10776  002FD8  C08F  F084         	movff	check_fs@sect+2,disk_read@sector+2
 10777  002FDC  C090  F085         	movff	check_fs@sect+3,disk_read@sector+3
 10778  002FE0  0E01               	movlw	1
 10779  002FE2  6F86               	movwf	disk_read@count& (0+255),b
 10780  002FE4  0E00               	movlw	0
 10781  002FE6  EC99  F015         	call	_disk_read
 10782  002FEA  0900               	iorlw	0
 10783  002FEC  B4D8               	btfsc	status,2,c
 10784  002FEE  D002               	goto	l1197
 10785                           
 10786                           ;tff.c: 630: return 2;
 10787  002FF0  0E02               	movlw	2
 10788  002FF2  0012               	return	
 10789  002FF4                     l1197:
 10790                           
 10791                           ;tff.c: 631: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 10792  002FF4  0100               	movlb	0	; () banked
 10793  002FF6  EE22 F01E          	lfsr	2,542
 10794  002FFA  5193               	movf	check_fs@fs& (0+255),w,b
 10795  002FFC  26D9               	addwf	fsr2l,f,c
 10796  002FFE  5194               	movf	(check_fs@fs+1)& (0+255),w,b
 10797  003000  22DA               	addwfc	fsr2h,f,c
 10798  003002  0E55               	movlw	85
 10799  003004  18DE               	xorwf	postinc2,w,c
 10800  003006  E104               	bnz	u13410
 10801  003008  0EAA               	movlw	170
 10802  00300A  18DE               	xorwf	postinc2,w,c
 10803  00300C  B4D8               	btfsc	status,2,c
 10804  00300E  D002               	goto	l1199
 10805  003010                     u13410:
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;tff.c: 632: return 2;
 10809  003010  0E02               	movlw	2
 10810                           
 10811                           ; BSR set to: 0
 10812  003012  0012               	return	
 10813  003014                     l1199:
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;tff.c: 634: if (!memcmp(&fs->win[54], "FAT", 3))
 10817                           
 10818                           ; BSR set to: 0
 10819  003014  0E56               	movlw	86
 10820  003016  2593               	addwf	check_fs@fs& (0+255),w,b
 10821  003018  6E1A               	movwf	memcmp@s1,c
 10822  00301A  0E00               	movlw	0
 10823  00301C  2194               	addwfc	(check_fs@fs+1)& (0+255),w,b
 10824  00301E  6E1B               	movwf	memcmp@s1+1,c
 10825  003020  0E76               	movlw	low STR_27
 10826  003022  6E1C               	movwf	memcmp@s2,c
 10827  003024  0E62               	movlw	high STR_27
 10828  003026  6E1D               	movwf	memcmp@s2+1,c
 10829  003028  0E00               	movlw	0
 10830  00302A  6E1F               	movwf	memcmp@n+1,c
 10831  00302C  0E03               	movlw	3
 10832  00302E  6E1E               	movwf	memcmp@n,c
 10833  003030  EC49  F017         	call	_memcmp	;wreg free
 10834  003034  501A               	movf	?_memcmp,w,c
 10835  003036  101B               	iorwf	?_memcmp+1,w,c
 10836  003038  A4D8               	btfss	status,2,c
 10837  00303A  D002               	goto	l1200
 10838                           
 10839                           ;tff.c: 635: return 0;
 10840  00303C  0E00               	movlw	0
 10841  00303E  0012               	return	
 10842  003040                     l1200:
 10843                           
 10844                           ;tff.c: 640: return 1;
 10845  003040  0E01               	movlw	1
 10846  003042  0012               	return	
 10847  003044                     __end_of_check_fs:
 10848                           	opt stack 0
 10849                           tblptru	equ	0xFF8
 10850                           tblptrh	equ	0xFF7
 10851                           tblptrl	equ	0xFF6
 10852                           tablat	equ	0xFF5
 10853                           prodh	equ	0xFF4
 10854                           prodl	equ	0xFF3
 10855                           intcon	equ	0xFF2
 10856                           intcon2	equ	0xFF1
 10857                           intcon3	equ	0xFF0
 10858                           indf0	equ	0xFEF
 10859                           postinc0	equ	0xFEE
 10860                           fsr0h	equ	0xFEA
 10861                           fsr0l	equ	0xFE9
 10862                           wreg	equ	0xFE8
 10863                           indf1	equ	0xFE7
 10864                           postinc1	equ	0xFE6
 10865                           postdec1	equ	0xFE5
 10866                           fsr1h	equ	0xFE2
 10867                           fsr1l	equ	0xFE1
 10868                           indf2	equ	0xFDF
 10869                           postinc2	equ	0xFDE
 10870                           postdec2	equ	0xFDD
 10871                           plusw2	equ	0xFDB
 10872                           fsr2h	equ	0xFDA
 10873                           fsr2l	equ	0xFD9
 10874                           status	equ	0xFD8
 10875                           
 10876 ;; *************** function _memcmp *****************
 10877 ;; Defined at:
 10878 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
 10879 ;; Parameters:    Size  Location     Type
 10880 ;;  s1              2   25[COMRAM] PTR const void 
 10881 ;;		 -> fs.win(512), NULL(0), fs(544), 
 10882 ;;  s2              2   27[COMRAM] PTR const void 
 10883 ;;		 -> f_rename@fn(12), f_utime@fn(12), f_chmod@fn(12), f_mkdir@fn(12), 
 10884 ;;		 -> f_unlink@fn(12), f_stat@fn(12), f_opendir@fn(12), f_open@fn(12), 
 10885 ;;		 -> STR_27(4), 
 10886 ;;  n               2   29[COMRAM] unsigned int 
 10887 ;; Auto vars:     Size  Location     Type
 10888 ;;		None
 10889 ;; Return value:  Size  Location     Type
 10890 ;;                  2   25[COMRAM] int 
 10891 ;; Registers used:
 10892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10893 ;; Tracked objects:
 10894 ;;		On entry : 0/0
 10895 ;;		On exit  : 0/0
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10898 ;;      Params:         6       0       0       0       0       0       0       0       0
 10899 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10900 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10901 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10902 ;;Total ram usage:        9 bytes
 10903 ;; Hardware stack levels used:    1
 10904 ;; Hardware stack levels required when called:    2
 10905 ;; This function calls:
 10906 ;;		Nothing
 10907 ;; This function is called by:
 10908 ;;		_trace_path
 10909 ;;		_check_fs
 10910 ;; This function uses a non-reentrant model
 10911 ;;
 10912                           
 10913                           	psect	text33
 10914  002E92                     __ptext33:
 10915                           	opt stack 0
 10916  002E92                     _memcmp:
 10917                           	opt stack 25
 10918                           
 10919                           ;incstack = 0
 10920  002E92  D040               	goto	l2134
 10921  002E94                     l11184:
 10922  002E94  C01A  FFD9         	movff	memcmp@s1,fsr2l
 10923  002E98  C01B  FFDA         	movff	memcmp@s1+1,fsr2h
 10924  002E9C  50DF               	movf	indf2,w,c
 10925  002E9E  6E20               	movwf	??_memcmp& (0+255),c
 10926  002EA0  C01C  FFF6         	movff	memcmp@s2,tblptrl
 10927  002EA4  C01D  FFF7         	movff	memcmp@s2+1,tblptrh
 10928  002EA8  6AF8               	clrf	tblptru,c
 10929  002EAA  0E07               	movlw	(high __ramtop+-1)
 10930  002EAC  64F7               	cpfsgt	tblptrh,c
 10931  002EAE  D003               	bra	u12827
 10932  002EB0  0008               	tblrd		*
 10933  002EB2  50F5               	movf	tablat,w,c
 10934  002EB4  D005               	bra	u12820
 10935  002EB6                     u12827:
 10936  002EB6  CFF6 FFE9          	movff	tblptrl,fsr0l
 10937  002EBA  CFF7 FFEA          	movff	tblptrh,fsr0h
 10938  002EBE  50EF               	movf	indf0,w,c
 10939  002EC0                     u12820:
 10940  002EC0  1820               	xorwf	??_memcmp,w,c
 10941  002EC2  B4D8               	btfsc	status,2,c
 10942  002EC4  D023               	goto	l2136
 10943  002EC6  C01C  FFF6         	movff	memcmp@s2,tblptrl
 10944  002ECA  C01D  FFF7         	movff	memcmp@s2+1,tblptrh
 10945  002ECE  6AF8               	clrf	tblptru,c
 10946  002ED0  0E07               	movlw	(high __ramtop+-1)
 10947  002ED2  64F7               	cpfsgt	tblptrh,c
 10948  002ED4  D003               	bra	u12847
 10949  002ED6  0008               	tblrd		*
 10950  002ED8  50F5               	movf	tablat,w,c
 10951  002EDA  D005               	bra	u12840
 10952  002EDC                     u12847:
 10953  002EDC  CFF6 FFE9          	movff	tblptrl,fsr0l
 10954  002EE0  CFF7 FFEA          	movff	tblptrh,fsr0h
 10955  002EE4  50EF               	movf	indf0,w,c
 10956  002EE6                     u12840:
 10957  002EE6  6E20               	movwf	??_memcmp& (0+255),c
 10958  002EE8  6A21               	clrf	(??_memcmp+1)& (0+255),c
 10959  002EEA  1E20               	comf	??_memcmp,f,c
 10960  002EEC  1E21               	comf	??_memcmp+1,f,c
 10961  002EEE  4A20               	infsnz	??_memcmp,f,c
 10962  002EF0  2A21               	incf	??_memcmp+1,f,c
 10963  002EF2  C01A  FFD9         	movff	memcmp@s1,fsr2l
 10964  002EF6  C01B  FFDA         	movff	memcmp@s1+1,fsr2h
 10965  002EFA  50DF               	movf	indf2,w,c
 10966  002EFC  6E22               	movwf	(??_memcmp+2)& (0+255),c
 10967  002EFE  5022               	movf	??_memcmp+2,w,c
 10968  002F00  2420               	addwf	??_memcmp,w,c
 10969  002F02  6E1A               	movwf	?_memcmp,c
 10970  002F04  0E00               	movlw	0
 10971  002F06  2021               	addwfc	??_memcmp+1,w,c
 10972  002F08  6E1B               	movwf	?_memcmp+1,c
 10973  002F0A  0012               	return	
 10974  002F0C                     l2136:
 10975  002F0C  4A1A               	infsnz	memcmp@s1,f,c
 10976  002F0E  2A1B               	incf	memcmp@s1+1,f,c
 10977  002F10  4A1C               	infsnz	memcmp@s2,f,c
 10978  002F12  2A1D               	incf	memcmp@s2+1,f,c
 10979  002F14                     l2134:
 10980  002F14  061E               	decf	memcmp@n,f,c
 10981  002F16  A0D8               	btfss	status,0,c
 10982  002F18  061F               	decf	memcmp@n+1,f,c
 10983  002F1A  281E               	incf	memcmp@n,w,c
 10984  002F1C  E1BB               	bnz	l11184
 10985  002F1E  281F               	incf	memcmp@n+1,w,c
 10986  002F20  A4D8               	btfss	status,2,c
 10987  002F22  D7B8               	goto	l2135
 10988  002F24  0E00               	movlw	0
 10989  002F26  6E1B               	movwf	?_memcmp+1,c
 10990  002F28  0E00               	movlw	0
 10991  002F2A  6E1A               	movwf	?_memcmp,c
 10992  002F2C  0012               	return	
 10993  002F2E                     __end_of_memcmp:
 10994                           	opt stack 0
 10995                           tblptru	equ	0xFF8
 10996                           tblptrh	equ	0xFF7
 10997                           tblptrl	equ	0xFF6
 10998                           tablat	equ	0xFF5
 10999                           prodh	equ	0xFF4
 11000                           prodl	equ	0xFF3
 11001                           intcon	equ	0xFF2
 11002                           intcon2	equ	0xFF1
 11003                           intcon3	equ	0xFF0
 11004                           indf0	equ	0xFEF
 11005                           postinc0	equ	0xFEE
 11006                           fsr0h	equ	0xFEA
 11007                           fsr0l	equ	0xFE9
 11008                           wreg	equ	0xFE8
 11009                           indf1	equ	0xFE7
 11010                           postinc1	equ	0xFE6
 11011                           postdec1	equ	0xFE5
 11012                           fsr1h	equ	0xFE2
 11013                           fsr1l	equ	0xFE1
 11014                           indf2	equ	0xFDF
 11015                           postinc2	equ	0xFDE
 11016                           postdec2	equ	0xFDD
 11017                           plusw2	equ	0xFDB
 11018                           fsr2h	equ	0xFDA
 11019                           fsr2l	equ	0xFD9
 11020                           status	equ	0xFD8
 11021                           
 11022 ;; *************** function ___lmul *****************
 11023 ;; Defined at:
 11024 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 11025 ;; Parameters:    Size  Location     Type
 11026 ;;  multiplier      4   25[COMRAM] unsigned long 
 11027 ;;  multiplicand    4   29[COMRAM] unsigned long 
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;  product         4   33[COMRAM] unsigned long 
 11030 ;; Return value:  Size  Location     Type
 11031 ;;                  4   25[COMRAM] unsigned long 
 11032 ;; Registers used:
 11033 ;;		wreg, status,2, status,0
 11034 ;; Tracked objects:
 11035 ;;		On entry : 0/0
 11036 ;;		On exit  : 0/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11039 ;;      Params:         8       0       0       0       0       0       0       0       0
 11040 ;;      Locals:         4       0       0       0       0       0       0       0       0
 11041 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11042 ;;      Totals:        12       0       0       0       0       0       0       0       0
 11043 ;;Total ram usage:       12 bytes
 11044 ;; Hardware stack levels used:    1
 11045 ;; Hardware stack levels required when called:    2
 11046 ;; This function calls:
 11047 ;;		Nothing
 11048 ;; This function is called by:
 11049 ;;		_clust2sect
 11050 ;;		_auto_mount
 11051 ;;		_strtod
 11052 ;;		_atol
 11053 ;; This function uses a non-reentrant model
 11054 ;;
 11055                           
 11056                           	psect	text34
 11057  003510                     __ptext34:
 11058                           	opt stack 0
 11059  003510                     ___lmul:
 11060                           	opt stack 25
 11061                           
 11062                           ;incstack = 0
 11063  003510  0E00               	movlw	0
 11064  003512  6E22               	movwf	___lmul@product,c
 11065  003514  0E00               	movlw	0
 11066  003516  6E23               	movwf	___lmul@product+1,c
 11067  003518  0E00               	movlw	0
 11068  00351A  6E24               	movwf	___lmul@product+2,c
 11069  00351C  0E00               	movlw	0
 11070  00351E  6E25               	movwf	___lmul@product+3,c
 11071  003520  A01A               	btfss	___lmul@multiplier,0,c
 11072  003522  D008               	goto	l1582
 11073  003524  501E               	movf	___lmul@multiplicand,w,c
 11074  003526  2622               	addwf	___lmul@product,f,c
 11075  003528  501F               	movf	___lmul@multiplicand+1,w,c
 11076  00352A  2223               	addwfc	___lmul@product+1,f,c
 11077  00352C  5020               	movf	___lmul@multiplicand+2,w,c
 11078  00352E  2224               	addwfc	___lmul@product+2,f,c
 11079  003530  5021               	movf	___lmul@multiplicand+3,w,c
 11080  003532  2225               	addwfc	___lmul@product+3,f,c
 11081  003534                     l1582:
 11082  003534  90D8               	bcf	status,0,c
 11083  003536  361E               	rlcf	___lmul@multiplicand,f,c
 11084  003538  361F               	rlcf	___lmul@multiplicand+1,f,c
 11085  00353A  3620               	rlcf	___lmul@multiplicand+2,f,c
 11086  00353C  3621               	rlcf	___lmul@multiplicand+3,f,c
 11087  00353E  90D8               	bcf	status,0,c
 11088  003540  321D               	rrcf	___lmul@multiplier+3,f,c
 11089  003542  321C               	rrcf	___lmul@multiplier+2,f,c
 11090  003544  321B               	rrcf	___lmul@multiplier+1,f,c
 11091  003546  321A               	rrcf	___lmul@multiplier,f,c
 11092  003548  501A               	movf	___lmul@multiplier,w,c
 11093  00354A  101B               	iorwf	___lmul@multiplier+1,w,c
 11094  00354C  101C               	iorwf	___lmul@multiplier+2,w,c
 11095  00354E  101D               	iorwf	___lmul@multiplier+3,w,c
 11096  003550  A4D8               	btfss	status,2,c
 11097  003552  D7E6               	goto	l1581
 11098  003554  C022  F01A         	movff	___lmul@product,?___lmul
 11099  003558  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 11100  00355C  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 11101  003560  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 11102  003564  0012               	return		;funcret
 11103  003566                     __end_of___lmul:
 11104                           	opt stack 0
 11105                           tblptru	equ	0xFF8
 11106                           tblptrh	equ	0xFF7
 11107                           tblptrl	equ	0xFF6
 11108                           tablat	equ	0xFF5
 11109                           prodh	equ	0xFF4
 11110                           prodl	equ	0xFF3
 11111                           intcon	equ	0xFF2
 11112                           intcon2	equ	0xFF1
 11113                           intcon3	equ	0xFF0
 11114                           indf0	equ	0xFEF
 11115                           postinc0	equ	0xFEE
 11116                           fsr0h	equ	0xFEA
 11117                           fsr0l	equ	0xFE9
 11118                           wreg	equ	0xFE8
 11119                           indf1	equ	0xFE7
 11120                           postinc1	equ	0xFE6
 11121                           postdec1	equ	0xFE5
 11122                           fsr1h	equ	0xFE2
 11123                           fsr1l	equ	0xFE1
 11124                           indf2	equ	0xFDF
 11125                           postinc2	equ	0xFDE
 11126                           postdec2	equ	0xFDD
 11127                           plusw2	equ	0xFDB
 11128                           fsr2h	equ	0xFDA
 11129                           fsr2l	equ	0xFD9
 11130                           status	equ	0xFD8
 11131                           
 11132 ;; *************** function ___lldiv *****************
 11133 ;; Defined at:
 11134 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 11135 ;; Parameters:    Size  Location     Type
 11136 ;;  dividend        4   25[COMRAM] unsigned long 
 11137 ;;  divisor         4   29[COMRAM] unsigned long 
 11138 ;; Auto vars:     Size  Location     Type
 11139 ;;  quotient        4   33[COMRAM] unsigned long 
 11140 ;;  counter         1   37[COMRAM] unsigned char 
 11141 ;; Return value:  Size  Location     Type
 11142 ;;                  4   25[COMRAM] unsigned long 
 11143 ;; Registers used:
 11144 ;;		wreg, status,2, status,0
 11145 ;; Tracked objects:
 11146 ;;		On entry : 0/0
 11147 ;;		On exit  : 0/0
 11148 ;;		Unchanged: 0/0
 11149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11150 ;;      Params:         8       0       0       0       0       0       0       0       0
 11151 ;;      Locals:         5       0       0       0       0       0       0       0       0
 11152 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11153 ;;      Totals:        13       0       0       0       0       0       0       0       0
 11154 ;;Total ram usage:       13 bytes
 11155 ;; Hardware stack levels used:    1
 11156 ;; Hardware stack levels required when called:    2
 11157 ;; This function calls:
 11158 ;;		Nothing
 11159 ;; This function is called by:
 11160 ;;		_auto_mount
 11161 ;;		_convert_time_to_utc
 11162 ;;		_f_lseek
 11163 ;;		_sprintf
 11164 ;; This function uses a non-reentrant model
 11165 ;;
 11166                           
 11167                           	psect	text35
 11168  0030CC                     __ptext35:
 11169                           	opt stack 0
 11170  0030CC                     ___lldiv:
 11171                           	opt stack 25
 11172                           
 11173                           ;incstack = 0
 11174  0030CC  0E00               	movlw	0
 11175  0030CE  6E22               	movwf	___lldiv@quotient,c
 11176  0030D0  0E00               	movlw	0
 11177  0030D2  6E23               	movwf	___lldiv@quotient+1,c
 11178  0030D4  0E00               	movlw	0
 11179  0030D6  6E24               	movwf	___lldiv@quotient+2,c
 11180  0030D8  0E00               	movlw	0
 11181  0030DA  6E25               	movwf	___lldiv@quotient+3,c
 11182  0030DC  501E               	movf	___lldiv@divisor,w,c
 11183  0030DE  101F               	iorwf	___lldiv@divisor+1,w,c
 11184  0030E0  1020               	iorwf	___lldiv@divisor+2,w,c
 11185  0030E2  1021               	iorwf	___lldiv@divisor+3,w,c
 11186  0030E4  B4D8               	btfsc	status,2,c
 11187  0030E6  D02A               	goto	l2062
 11188  0030E8  0E01               	movlw	1
 11189  0030EA  6E26               	movwf	___lldiv@counter,c
 11190  0030EC  D006               	goto	l2057
 11191  0030EE  90D8               	bcf	status,0,c
 11192  0030F0  361E               	rlcf	___lldiv@divisor,f,c
 11193  0030F2  361F               	rlcf	___lldiv@divisor+1,f,c
 11194  0030F4  3620               	rlcf	___lldiv@divisor+2,f,c
 11195  0030F6  3621               	rlcf	___lldiv@divisor+3,f,c
 11196  0030F8  2A26               	incf	___lldiv@counter,f,c
 11197  0030FA                     l2057:
 11198  0030FA  AE21               	btfss	___lldiv@divisor+3,7,c
 11199  0030FC  D7F8               	goto	l2058
 11200  0030FE                     u13520:
 11201  0030FE  90D8               	bcf	status,0,c
 11202  003100  3622               	rlcf	___lldiv@quotient,f,c
 11203  003102  3623               	rlcf	___lldiv@quotient+1,f,c
 11204  003104  3624               	rlcf	___lldiv@quotient+2,f,c
 11205  003106  3625               	rlcf	___lldiv@quotient+3,f,c
 11206  003108  501E               	movf	___lldiv@divisor,w,c
 11207  00310A  5C1A               	subwf	___lldiv@dividend,w,c
 11208  00310C  501F               	movf	___lldiv@divisor+1,w,c
 11209  00310E  581B               	subwfb	___lldiv@dividend+1,w,c
 11210  003110  5020               	movf	___lldiv@divisor+2,w,c
 11211  003112  581C               	subwfb	___lldiv@dividend+2,w,c
 11212  003114  5021               	movf	___lldiv@divisor+3,w,c
 11213  003116  581D               	subwfb	___lldiv@dividend+3,w,c
 11214  003118  A0D8               	btfss	status,0,c
 11215  00311A  D009               	goto	l2061
 11216  00311C  501E               	movf	___lldiv@divisor,w,c
 11217  00311E  5E1A               	subwf	___lldiv@dividend,f,c
 11218  003120  501F               	movf	___lldiv@divisor+1,w,c
 11219  003122  5A1B               	subwfb	___lldiv@dividend+1,f,c
 11220  003124  5020               	movf	___lldiv@divisor+2,w,c
 11221  003126  5A1C               	subwfb	___lldiv@dividend+2,f,c
 11222  003128  5021               	movf	___lldiv@divisor+3,w,c
 11223  00312A  5A1D               	subwfb	___lldiv@dividend+3,f,c
 11224  00312C  8022               	bsf	___lldiv@quotient,0,c
 11225  00312E                     l2061:
 11226  00312E  90D8               	bcf	status,0,c
 11227  003130  3221               	rrcf	___lldiv@divisor+3,f,c
 11228  003132  3220               	rrcf	___lldiv@divisor+2,f,c
 11229  003134  321F               	rrcf	___lldiv@divisor+1,f,c
 11230  003136  321E               	rrcf	___lldiv@divisor,f,c
 11231  003138  2E26               	decfsz	___lldiv@counter,f,c
 11232  00313A  D7E1               	goto	u13520
 11233  00313C                     l2062:
 11234  00313C  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 11235  003140  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 11236  003144  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 11237  003148  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 11238  00314C  0012               	return		;funcret
 11239  00314E                     __end_of___lldiv:
 11240                           	opt stack 0
 11241                           tblptru	equ	0xFF8
 11242                           tblptrh	equ	0xFF7
 11243                           tblptrl	equ	0xFF6
 11244                           tablat	equ	0xFF5
 11245                           prodh	equ	0xFF4
 11246                           prodl	equ	0xFF3
 11247                           intcon	equ	0xFF2
 11248                           intcon2	equ	0xFF1
 11249                           intcon3	equ	0xFF0
 11250                           indf0	equ	0xFEF
 11251                           postinc0	equ	0xFEE
 11252                           fsr0h	equ	0xFEA
 11253                           fsr0l	equ	0xFE9
 11254                           wreg	equ	0xFE8
 11255                           indf1	equ	0xFE7
 11256                           postinc1	equ	0xFE6
 11257                           postdec1	equ	0xFE5
 11258                           fsr1h	equ	0xFE2
 11259                           fsr1l	equ	0xFE1
 11260                           indf2	equ	0xFDF
 11261                           postinc2	equ	0xFDE
 11262                           postdec2	equ	0xFDD
 11263                           plusw2	equ	0xFDB
 11264                           fsr2h	equ	0xFDA
 11265                           fsr2l	equ	0xFD9
 11266                           status	equ	0xFD8
 11267                           
 11268 ;; *************** function _f_mount *****************
 11269 ;; Defined at:
 11270 ;;		line 794 in file "bibliotecas/tff.c"
 11271 ;; Parameters:    Size  Location     Type
 11272 ;;  drv             1    wreg     unsigned char 
 11273 ;;  fs              2   25[COMRAM] PTR struct _FATFS
 11274 ;;		 -> fs(544), 
 11275 ;; Auto vars:     Size  Location     Type
 11276 ;;  drv             1   27[COMRAM] unsigned char 
 11277 ;; Return value:  Size  Location     Type
 11278 ;;                  1    wreg      enum E3961
 11279 ;; Registers used:
 11280 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11281 ;; Tracked objects:
 11282 ;;		On entry : 0/0
 11283 ;;		On exit  : 0/0
 11284 ;;		Unchanged: 0/0
 11285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11286 ;;      Params:         2       0       0       0       0       0       0       0       0
 11287 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11288 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11289 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11290 ;;Total ram usage:        3 bytes
 11291 ;; Hardware stack levels used:    1
 11292 ;; Hardware stack levels required when called:    2
 11293 ;; This function calls:
 11294 ;;		Nothing
 11295 ;; This function is called by:
 11296 ;;		_SDCard
 11297 ;; This function uses a non-reentrant model
 11298 ;;
 11299                           
 11300                           	psect	text36
 11301  00360A                     __ptext36:
 11302                           	opt stack 0
 11303  00360A                     _f_mount:
 11304                           	opt stack 27
 11305                           
 11306                           ;incstack = 0
 11307                           ;f_mount@drv stored from wreg
 11308  00360A  6E1C               	movwf	f_mount@drv,c
 11309                           
 11310                           ;tff.c: 799: if (drv) return FR_INVALID_DRIVE;
 11311  00360C  501C               	movf	f_mount@drv,w,c
 11312  00360E  B4D8               	btfsc	status,2,c
 11313  003610  D002               	goto	l1232
 11314  003612  0E05               	movlw	5
 11315  003614  0012               	return	
 11316  003616                     l1232:
 11317                           
 11318                           ;tff.c: 801: if (FatFs) FatFs->fs_type = 0;
 11319  003616  0100               	movlb	0	; () banked
 11320  003618  51EF               	movf	_FatFs& (0+255),w,b
 11321  00361A  11F0               	iorwf	(_FatFs+1)& (0+255),w,b
 11322  00361C  B4D8               	btfsc	status,2,c
 11323  00361E  D008               	goto	l1234
 11324                           
 11325                           ; BSR set to: 0
 11326  003620  EE20 F01C          	lfsr	2,28
 11327  003624  51EF               	movf	_FatFs& (0+255),w,b
 11328  003626  26D9               	addwf	fsr2l,f,c
 11329  003628  51F0               	movf	(_FatFs+1)& (0+255),w,b
 11330  00362A  22DA               	addwfc	fsr2h,f,c
 11331  00362C  0E00               	movlw	0
 11332  00362E  6EDF               	movwf	indf2,c
 11333  003630                     l1234:
 11334                           
 11335                           ; BSR set to: 0
 11336                           ;tff.c: 803: FatFs = fs;
 11337                           
 11338                           ; BSR set to: 0
 11339  003630  C01A  F0EF         	movff	f_mount@fs,_FatFs
 11340  003634  C01B  F0F0         	movff	f_mount@fs+1,_FatFs+1
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;tff.c: 804: if (fs) fs->fs_type = 0;
 11344  003638  501A               	movf	f_mount@fs,w,c
 11345  00363A  101B               	iorwf	f_mount@fs+1,w,c
 11346  00363C  B4D8               	btfsc	status,2,c
 11347  00363E  D008               	goto	l1235
 11348                           
 11349                           ; BSR set to: 0
 11350  003640  EE20 F01C          	lfsr	2,28
 11351  003644  501A               	movf	f_mount@fs,w,c
 11352  003646  26D9               	addwf	fsr2l,f,c
 11353  003648  501B               	movf	f_mount@fs+1,w,c
 11354  00364A  22DA               	addwfc	fsr2h,f,c
 11355  00364C  0E00               	movlw	0
 11356  00364E  6EDF               	movwf	indf2,c
 11357  003650                     l1235:
 11358                           
 11359                           ; BSR set to: 0
 11360                           ;tff.c: 806: return FR_OK;
 11361                           
 11362                           ; BSR set to: 0
 11363  003650  0E00               	movlw	0
 11364  003652  0012               	return	
 11365  003654                     __end_of_f_mount:
 11366                           	opt stack 0
 11367                           tblptru	equ	0xFF8
 11368                           tblptrh	equ	0xFF7
 11369                           tblptrl	equ	0xFF6
 11370                           tablat	equ	0xFF5
 11371                           prodh	equ	0xFF4
 11372                           prodl	equ	0xFF3
 11373                           intcon	equ	0xFF2
 11374                           intcon2	equ	0xFF1
 11375                           intcon3	equ	0xFF0
 11376                           indf0	equ	0xFEF
 11377                           postinc0	equ	0xFEE
 11378                           fsr0h	equ	0xFEA
 11379                           fsr0l	equ	0xFE9
 11380                           wreg	equ	0xFE8
 11381                           indf1	equ	0xFE7
 11382                           postinc1	equ	0xFE6
 11383                           postdec1	equ	0xFE5
 11384                           fsr1h	equ	0xFE2
 11385                           fsr1l	equ	0xFE1
 11386                           indf2	equ	0xFDF
 11387                           postinc2	equ	0xFDE
 11388                           postdec2	equ	0xFDD
 11389                           plusw2	equ	0xFDB
 11390                           fsr2h	equ	0xFDA
 11391                           fsr2l	equ	0xFD9
 11392                           status	equ	0xFD8
 11393                           
 11394 ;; *************** function _f_close *****************
 11395 ;; Defined at:
 11396 ;;		line 1109 in file "bibliotecas/tff.c"
 11397 ;; Parameters:    Size  Location     Type
 11398 ;;  fp              2   77[BANK0 ] PTR struct _FIL
 11399 ;;		 -> SDCard@fil(28), 
 11400 ;; Auto vars:     Size  Location     Type
 11401 ;;  res             1   79[BANK0 ] enum E155
 11402 ;; Return value:  Size  Location     Type
 11403 ;;                  1    wreg      enum E3961
 11404 ;; Registers used:
 11405 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11406 ;; Tracked objects:
 11407 ;;		On entry : 0/0
 11408 ;;		On exit  : 0/0
 11409 ;;		Unchanged: 0/0
 11410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11411 ;;      Params:         0       2       0       0       0       0       0       0       0
 11412 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11413 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11414 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11415 ;;Total ram usage:        3 bytes
 11416 ;; Hardware stack levels used:    1
 11417 ;; Hardware stack levels required when called:   11
 11418 ;; This function calls:
 11419 ;;		_f_sync
 11420 ;; This function is called by:
 11421 ;;		_SDCard
 11422 ;; This function uses a non-reentrant model
 11423 ;;
 11424                           
 11425                           	psect	text37
 11426  0038EC                     __ptext37:
 11427                           	opt stack 0
 11428  0038EC                     _f_close:
 11429                           	opt stack 18
 11430                           
 11431                           ;tff.c: 1113: FRESULT res;
 11432                           ;tff.c: 1117: res = f_sync(fp);
 11433                           
 11434                           ;incstack = 0
 11435  0038EC  C0AD  F0A4         	movff	f_close@fp,f_sync@fp
 11436  0038F0  C0AE  F0A5         	movff	f_close@fp+1,f_sync@fp+1
 11437  0038F4  EC8A  F013         	call	_f_sync	;wreg free
 11438  0038F8  0100               	movlb	0	; () banked
 11439  0038FA  6FAF               	movwf	f_close@res& (0+255),b
 11440                           
 11441                           ; BSR set to: 0
 11442                           ;tff.c: 1121: if (res == FR_OK) fp->fs = (0);
 11443  0038FC  51AF               	movf	f_close@res& (0+255),w,b
 11444  0038FE  A4D8               	btfss	status,2,c
 11445  003900  0012               	return	
 11446                           
 11447                           ; BSR set to: 0
 11448  003902  EE20 F004          	lfsr	2,4
 11449  003906  51AD               	movf	f_close@fp& (0+255),w,b
 11450  003908  26D9               	addwf	fsr2l,f,c
 11451  00390A  51AE               	movf	(f_close@fp+1)& (0+255),w,b
 11452  00390C  22DA               	addwfc	fsr2h,f,c
 11453  00390E  0E00               	movlw	0
 11454  003910  6EDE               	movwf	postinc2,c
 11455  003912  0E00               	movlw	0
 11456  003914  6EDD               	movwf	postdec2,c
 11457                           
 11458                           ; BSR set to: 0
 11459  003916  0012               	return	
 11460  003918                     __end_of_f_close:
 11461                           	opt stack 0
 11462                           tblptru	equ	0xFF8
 11463                           tblptrh	equ	0xFF7
 11464                           tblptrl	equ	0xFF6
 11465                           tablat	equ	0xFF5
 11466                           prodh	equ	0xFF4
 11467                           prodl	equ	0xFF3
 11468                           intcon	equ	0xFF2
 11469                           intcon2	equ	0xFF1
 11470                           intcon3	equ	0xFF0
 11471                           indf0	equ	0xFEF
 11472                           postinc0	equ	0xFEE
 11473                           fsr0h	equ	0xFEA
 11474                           fsr0l	equ	0xFE9
 11475                           wreg	equ	0xFE8
 11476                           indf1	equ	0xFE7
 11477                           postinc1	equ	0xFE6
 11478                           postdec1	equ	0xFE5
 11479                           fsr1h	equ	0xFE2
 11480                           fsr1l	equ	0xFE1
 11481                           indf2	equ	0xFDF
 11482                           postinc2	equ	0xFDE
 11483                           postdec2	equ	0xFDD
 11484                           plusw2	equ	0xFDB
 11485                           fsr2h	equ	0xFDA
 11486                           fsr2l	equ	0xFD9
 11487                           status	equ	0xFD8
 11488                           
 11489 ;; *************** function _f_sync *****************
 11490 ;; Defined at:
 11491 ;;		line 1070 in file "bibliotecas/tff.c"
 11492 ;; Parameters:    Size  Location     Type
 11493 ;;  fp              2   68[BANK0 ] PTR struct _FIL
 11494 ;;		 -> SDCard@fil(28), 
 11495 ;; Auto vars:     Size  Location     Type
 11496 ;;  tim             4   70[BANK0 ] unsigned long 
 11497 ;;  dir             2   75[BANK0 ] PTR unsigned char 
 11498 ;;		 -> NULL(0), fs(544), 
 11499 ;;  res             1   74[BANK0 ] enum E155
 11500 ;; Return value:  Size  Location     Type
 11501 ;;                  1    wreg      enum E155
 11502 ;; Registers used:
 11503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11504 ;; Tracked objects:
 11505 ;;		On entry : 0/0
 11506 ;;		On exit  : 0/0
 11507 ;;		Unchanged: 0/0
 11508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11509 ;;      Params:         0       2       0       0       0       0       0       0       0
 11510 ;;      Locals:         0       7       0       0       0       0       0       0       0
 11511 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11512 ;;      Totals:         0       9       0       0       0       0       0       0       0
 11513 ;;Total ram usage:        9 bytes
 11514 ;; Hardware stack levels used:    1
 11515 ;; Hardware stack levels required when called:   10
 11516 ;; This function calls:
 11517 ;;		_get_fattime
 11518 ;;		_move_window
 11519 ;;		_sync
 11520 ;;		_validate
 11521 ;; This function is called by:
 11522 ;;		_f_close
 11523 ;; This function uses a non-reentrant model
 11524 ;;
 11525                           
 11526                           	psect	text38
 11527  002714                     __ptext38:
 11528                           	opt stack 0
 11529  002714                     _f_sync:
 11530                           	opt stack 18
 11531                           
 11532                           ;tff.c: 1074: FRESULT res;
 11533                           ;tff.c: 1075: DWORD tim;
 11534                           ;tff.c: 1076: BYTE *dir;
 11535                           ;tff.c: 1079: res = validate(fp->fs, fp->id);
 11536                           
 11537                           ; BSR set to: 0
 11538                           ;incstack = 0
 11539  002714  0100               	movlb	0	; () banked
 11540  002716  EE20 F004          	lfsr	2,4
 11541  00271A  51A4               	movf	f_sync@fp& (0+255),w,b
 11542  00271C  26D9               	addwf	fsr2l,f,c
 11543  00271E  51A5               	movf	(f_sync@fp+1)& (0+255),w,b
 11544  002720  22DA               	addwfc	fsr2h,f,c
 11545  002722  CFDE F021          	movff	postinc2,validate@fs
 11546  002726  CFDD F022          	movff	postdec2,validate@fs+1
 11547  00272A  C0A4  FFD9         	movff	f_sync@fp,fsr2l
 11548  00272E  C0A5  FFDA         	movff	f_sync@fp+1,fsr2h
 11549  002732  CFDE F023          	movff	postinc2,validate@id
 11550  002736  CFDD F024          	movff	postdec2,validate@id+1
 11551  00273A  EC2A  F01B         	call	_validate	;wreg free
 11552  00273E  0100               	movlb	0	; () banked
 11553  002740  6FAA               	movwf	f_sync@res& (0+255),b
 11554                           
 11555                           ; BSR set to: 0
 11556                           ;tff.c: 1080: if (res == FR_OK) {
 11557  002742  51AA               	movf	f_sync@res& (0+255),w,b
 11558  002744  A4D8               	btfss	status,2,c
 11559  002746  D079               	goto	l1321
 11560                           
 11561                           ; BSR set to: 0
 11562                           ;tff.c: 1081: if (fp->flag & 0x20) {
 11563  002748  EE20 F002          	lfsr	2,2
 11564  00274C  51A4               	movf	f_sync@fp& (0+255),w,b
 11565  00274E  26D9               	addwf	fsr2l,f,c
 11566  002750  51A5               	movf	(f_sync@fp+1)& (0+255),w,b
 11567  002752  22DA               	addwfc	fsr2h,f,c
 11568  002754  AADF               	btfss	indf2,5,c
 11569  002756  D071               	goto	l1321
 11570                           
 11571                           ; BSR set to: 0
 11572                           ;tff.c: 1083: if (!move_window(fp->dir_sect))
 11573  002758  EE20 F016          	lfsr	2,22
 11574  00275C  51A4               	movf	f_sync@fp& (0+255),w,b
 11575  00275E  26D9               	addwf	fsr2l,f,c
 11576  002760  51A5               	movf	(f_sync@fp+1)& (0+255),w,b
 11577  002762  22DA               	addwfc	fsr2h,f,c
 11578  002764  CFDE F08D          	movff	postinc2,move_window@sector
 11579  002768  CFDE F08E          	movff	postinc2,move_window@sector+1
 11580  00276C  CFDE F08F          	movff	postinc2,move_window@sector+2
 11581  002770  CFDE F090          	movff	postinc2,move_window@sector+3
 11582  002774  ECF8  F00E         	call	_move_window	;wreg free
 11583  002778  0900               	iorlw	0
 11584  00277A  A4D8               	btfss	status,2,c
 11585  00277C  D002               	goto	l1322
 11586                           
 11587                           ;tff.c: 1084: return FR_RW_ERROR;
 11588  00277E  0E08               	movlw	8
 11589  002780  0012               	return	
 11590  002782                     l1322:
 11591                           
 11592                           ;tff.c: 1085: dir = fp->dir_ptr;
 11593  002782  0100               	movlb	0	; () banked
 11594  002784  EE20 F01A          	lfsr	2,26
 11595  002788  51A4               	movf	f_sync@fp& (0+255),w,b
 11596  00278A  26D9               	addwf	fsr2l,f,c
 11597  00278C  51A5               	movf	(f_sync@fp+1)& (0+255),w,b
 11598  00278E  22DA               	addwfc	fsr2h,f,c
 11599  002790  CFDE F0AB          	movff	postinc2,f_sync@dir
 11600  002794  CFDD F0AC          	movff	postdec2,f_sync@dir+1
 11601                           
 11602                           ;tff.c: 1086: dir[11] |= 0x20;
 11603  002798  EE20 F00B          	lfsr	2,11
 11604  00279C  51AB               	movf	f_sync@dir& (0+255),w,b
 11605  00279E  26D9               	addwf	fsr2l,f,c
 11606  0027A0  51AC               	movf	(f_sync@dir+1)& (0+255),w,b
 11607  0027A2  22DA               	addwfc	fsr2h,f,c
 11608  0027A4  0E00               	movlw	0
 11609  0027A6  8ADB               	bsf	plusw2,5,c
 11610                           
 11611                           ; BSR set to: 0
 11612                           ;tff.c: 1087: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 11613  0027A8  EE20 F00A          	lfsr	2,10
 11614  0027AC  51A4               	movf	f_sync@fp& (0+255),w,b
 11615  0027AE  26D9               	addwf	fsr2l,f,c
 11616  0027B0  51A5               	movf	(f_sync@fp+1)& (0+255),w,b
 11617  0027B2  22DA               	addwfc	fsr2h,f,c
 11618  0027B4  EE10 F01C          	lfsr	1,28
 11619  0027B8  51AB               	movf	f_sync@dir& (0+255),w,b
 11620  0027BA  26E1               	addwf	fsr1l,f,c
 11621  0027BC  51AC               	movf	(f_sync@dir+1)& (0+255),w,b
 11622  0027BE  22E2               	addwfc	fsr1h,f,c
 11623  0027C0  CFDE FFE6          	movff	postinc2,postinc1
 11624  0027C4  CFDE FFE6          	movff	postinc2,postinc1
 11625  0027C8  CFDE FFE6          	movff	postinc2,postinc1
 11626  0027CC  CFDE FFE6          	movff	postinc2,postinc1
 11627                           
 11628                           ; BSR set to: 0
 11629                           ;tff.c: 1088: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 11630  0027D0  EE20 F00E          	lfsr	2,14
 11631  0027D4  51A4               	movf	f_sync@fp& (0+255),w,b
 11632  0027D6  26D9               	addwf	fsr2l,f,c
 11633  0027D8  51A5               	movf	(f_sync@fp+1)& (0+255),w,b
 11634  0027DA  22DA               	addwfc	fsr2h,f,c
 11635  0027DC  EE10 F01A          	lfsr	1,26
 11636  0027E0  51AB               	movf	f_sync@dir& (0+255),w,b
 11637  0027E2  26E1               	addwf	fsr1l,f,c
 11638  0027E4  51AC               	movf	(f_sync@dir+1)& (0+255),w,b
 11639  0027E6  22E2               	addwfc	fsr1h,f,c
 11640  0027E8  CFDE FFE6          	movff	postinc2,postinc1
 11641  0027EC  CFDD FFE5          	movff	postdec2,postdec1
 11642                           
 11643                           ; BSR set to: 0
 11644                           ;tff.c: 1092: tim = get_fattime();
 11645  0027F0  ECAF  F014         	call	_get_fattime	;wreg free
 11646  0027F4  C01A  F0A6         	movff	?_get_fattime,f_sync@tim
 11647  0027F8  C01B  F0A7         	movff	?_get_fattime+1,f_sync@tim+1
 11648  0027FC  C01C  F0A8         	movff	?_get_fattime+2,f_sync@tim+2
 11649  002800  C01D  F0A9         	movff	?_get_fattime+3,f_sync@tim+3
 11650                           
 11651                           ;tff.c: 1093: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 11652  002804  0100               	movlb	0	; () banked
 11653  002806  EE20 F016          	lfsr	2,22
 11654  00280A  51AB               	movf	f_sync@dir& (0+255),w,b
 11655  00280C  26D9               	addwf	fsr2l,f,c
 11656  00280E  51AC               	movf	(f_sync@dir+1)& (0+255),w,b
 11657  002810  22DA               	addwfc	fsr2h,f,c
 11658  002812  C0A6  FFDE         	movff	f_sync@tim,postinc2
 11659  002816  C0A7  FFDE         	movff	f_sync@tim+1,postinc2
 11660  00281A  C0A8  FFDE         	movff	f_sync@tim+2,postinc2
 11661  00281E  C0A9  FFDE         	movff	f_sync@tim+3,postinc2
 11662                           
 11663                           ; BSR set to: 0
 11664                           ;tff.c: 1094: fp->flag &= (BYTE)~0x20;
 11665  002822  EE20 F002          	lfsr	2,2
 11666  002826  51A4               	movf	f_sync@fp& (0+255),w,b
 11667  002828  26D9               	addwf	fsr2l,f,c
 11668  00282A  51A5               	movf	(f_sync@fp+1)& (0+255),w,b
 11669  00282C  22DA               	addwfc	fsr2h,f,c
 11670  00282E  0EDF               	movlw	223
 11671  002830  16DF               	andwf	indf2,f,c
 11672                           
 11673                           ; BSR set to: 0
 11674                           ;tff.c: 1095: res = sync();
 11675  002832  EC5C  F01A         	call	_sync	;wreg free
 11676  002836  0100               	movlb	0	; () banked
 11677  002838  6FAA               	movwf	f_sync@res& (0+255),b
 11678  00283A                     l1321:
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;tff.c: 1096: }
 11682                           ;tff.c: 1097: }
 11683                           ;tff.c: 1098: return res;
 11684                           
 11685                           ; BSR set to: 0
 11686                           
 11687                           ; BSR set to: 0
 11688  00283A  51AA               	movf	f_sync@res& (0+255),w,b
 11689  00283C  0012               	return	
 11690  00283E                     __end_of_f_sync:
 11691                           	opt stack 0
 11692                           tblptru	equ	0xFF8
 11693                           tblptrh	equ	0xFF7
 11694                           tblptrl	equ	0xFF6
 11695                           tablat	equ	0xFF5
 11696                           prodh	equ	0xFF4
 11697                           prodl	equ	0xFF3
 11698                           intcon	equ	0xFF2
 11699                           intcon2	equ	0xFF1
 11700                           intcon3	equ	0xFF0
 11701                           indf0	equ	0xFEF
 11702                           postinc0	equ	0xFEE
 11703                           fsr0h	equ	0xFEA
 11704                           fsr0l	equ	0xFE9
 11705                           wreg	equ	0xFE8
 11706                           indf1	equ	0xFE7
 11707                           postinc1	equ	0xFE6
 11708                           postdec1	equ	0xFE5
 11709                           fsr1h	equ	0xFE2
 11710                           fsr1l	equ	0xFE1
 11711                           indf2	equ	0xFDF
 11712                           postinc2	equ	0xFDE
 11713                           postdec2	equ	0xFDD
 11714                           plusw2	equ	0xFDB
 11715                           fsr2h	equ	0xFDA
 11716                           fsr2l	equ	0xFD9
 11717                           status	equ	0xFD8
 11718                           
 11719 ;; *************** function _validate *****************
 11720 ;; Defined at:
 11721 ;;		line 767 in file "bibliotecas/tff.c"
 11722 ;; Parameters:    Size  Location     Type
 11723 ;;  fs              2   32[COMRAM] PTR const struct _FATFS
 11724 ;;		 -> NULL(0), fs(544), 
 11725 ;;  id              2   34[COMRAM] unsigned short 
 11726 ;; Auto vars:     Size  Location     Type
 11727 ;;		None
 11728 ;; Return value:  Size  Location     Type
 11729 ;;                  1    wreg      enum E155
 11730 ;; Registers used:
 11731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11732 ;; Tracked objects:
 11733 ;;		On entry : 0/0
 11734 ;;		On exit  : 0/0
 11735 ;;		Unchanged: 0/0
 11736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11737 ;;      Params:         4       0       0       0       0       0       0       0       0
 11738 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11739 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11740 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11741 ;;Total ram usage:        6 bytes
 11742 ;; Hardware stack levels used:    1
 11743 ;; Hardware stack levels required when called:    4
 11744 ;; This function calls:
 11745 ;;		_disk_status
 11746 ;; This function is called by:
 11747 ;;		_f_write
 11748 ;;		_f_sync
 11749 ;;		_f_read
 11750 ;;		_f_lseek
 11751 ;;		_f_readdir
 11752 ;;		_f_truncate
 11753 ;; This function uses a non-reentrant model
 11754 ;;
 11755                           
 11756                           	psect	text39
 11757  003654                     __ptext39:
 11758                           	opt stack 0
 11759  003654                     _validate:
 11760                           	opt stack 24
 11761                           
 11762                           ;tff.c: 772: if (!fs || !fs->fs_type || fs->id != id)
 11763                           
 11764                           ;incstack = 0
 11765  003654  5021               	movf	validate@fs,w,c
 11766  003656  1022               	iorwf	validate@fs+1,w,c
 11767  003658  B4D8               	btfsc	status,2,c
 11768  00365A  D014               	goto	u13450
 11769  00365C  EE20 F01C          	lfsr	2,28
 11770  003660  5021               	movf	validate@fs,w,c
 11771  003662  26D9               	addwf	fsr2l,f,c
 11772  003664  5022               	movf	validate@fs+1,w,c
 11773  003666  22DA               	addwfc	fsr2h,f,c
 11774  003668  50DF               	movf	indf2,w,c
 11775  00366A  B4D8               	btfsc	status,2,c
 11776  00366C  D00B               	goto	u13450
 11777  00366E  C021  FFD9         	movff	validate@fs,fsr2l
 11778  003672  C022  FFDA         	movff	validate@fs+1,fsr2h
 11779  003676  5023               	movf	validate@id,w,c
 11780  003678  18DE               	xorwf	postinc2,w,c
 11781  00367A  E104               	bnz	l11508
 11782  00367C  5024               	movf	validate@id+1,w,c
 11783  00367E  18DE               	xorwf	postinc2,w,c
 11784  003680  B4D8               	btfsc	status,2,c
 11785  003682  D002               	goto	l1225
 11786  003684                     u13450:
 11787  003684                     l11508:
 11788                           
 11789                           ;tff.c: 773: return FR_INVALID_OBJECT;
 11790  003684  0E0C               	movlw	12
 11791  003686  0012               	return	
 11792  003688                     l1225:
 11793                           
 11794                           ;tff.c: 774: if (disk_status(0) & 0x01)
 11795  003688  0E00               	movlw	0
 11796  00368A  ECB0  F01B         	call	_disk_status
 11797  00368E  6E25               	movwf	??_validate& (0+255),c
 11798  003690  A025               	btfss	??_validate,0,c
 11799  003692  D002               	goto	l1229
 11800                           
 11801                           ;tff.c: 775: return FR_NOT_READY;
 11802  003694  0E01               	movlw	1
 11803  003696  0012               	return	
 11804  003698                     l1229:
 11805                           
 11806                           ;tff.c: 777: return FR_OK;
 11807  003698  0E00               	movlw	0
 11808  00369A  0012               	return	
 11809  00369C                     __end_of_validate:
 11810                           	opt stack 0
 11811                           tblptru	equ	0xFF8
 11812                           tblptrh	equ	0xFF7
 11813                           tblptrl	equ	0xFF6
 11814                           tablat	equ	0xFF5
 11815                           prodh	equ	0xFF4
 11816                           prodl	equ	0xFF3
 11817                           intcon	equ	0xFF2
 11818                           intcon2	equ	0xFF1
 11819                           intcon3	equ	0xFF0
 11820                           indf0	equ	0xFEF
 11821                           postinc0	equ	0xFEE
 11822                           fsr0h	equ	0xFEA
 11823                           fsr0l	equ	0xFE9
 11824                           wreg	equ	0xFE8
 11825                           indf1	equ	0xFE7
 11826                           postinc1	equ	0xFE6
 11827                           postdec1	equ	0xFE5
 11828                           fsr1h	equ	0xFE2
 11829                           fsr1l	equ	0xFE1
 11830                           indf2	equ	0xFDF
 11831                           postinc2	equ	0xFDE
 11832                           postdec2	equ	0xFDD
 11833                           plusw2	equ	0xFDB
 11834                           fsr2h	equ	0xFDA
 11835                           fsr2l	equ	0xFD9
 11836                           status	equ	0xFD8
 11837                           
 11838 ;; *************** function _disk_status *****************
 11839 ;; Defined at:
 11840 ;;		line 71 in file "bibliotecas/diskio.c"
 11841 ;; Parameters:    Size  Location     Type
 11842 ;;  pdrv            1    wreg     unsigned char 
 11843 ;; Auto vars:     Size  Location     Type
 11844 ;;  pdrv            1   30[COMRAM] unsigned char 
 11845 ;;  result          2   28[COMRAM] int 
 11846 ;;  stat            1   31[COMRAM] unsigned char 
 11847 ;; Return value:  Size  Location     Type
 11848 ;;                  1    wreg      unsigned char 
 11849 ;; Registers used:
 11850 ;;		wreg, status,2, status,0, cstack
 11851 ;; Tracked objects:
 11852 ;;		On entry : 0/0
 11853 ;;		On exit  : 0/0
 11854 ;;		Unchanged: 0/0
 11855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11856 ;;      Params:         0       0       0       0       0       0       0       0       0
 11857 ;;      Locals:         4       0       0       0       0       0       0       0       0
 11858 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11859 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11860 ;;Total ram usage:        5 bytes
 11861 ;; Hardware stack levels used:    1
 11862 ;; Hardware stack levels required when called:    3
 11863 ;; This function calls:
 11864 ;;		_sdc_disk_status
 11865 ;; This function is called by:
 11866 ;;		_auto_mount
 11867 ;;		_validate
 11868 ;; This function uses a non-reentrant model
 11869 ;;
 11870                           
 11871                           	psect	text40
 11872  003760                     __ptext40:
 11873                           	opt stack 0
 11874  003760                     _disk_status:
 11875                           	opt stack 24
 11876                           
 11877                           ;incstack = 0
 11878                           ;disk_status@pdrv stored from wreg
 11879  003760  6E1F               	movwf	disk_status@pdrv,c
 11880                           
 11881                           ;diskio.c: 75: DSTATUS stat;
 11882                           ;diskio.c: 76: int result;
 11883                           ;diskio.c: 78: switch (pdrv) {
 11884  003762  D011               	goto	l841
 11885  003764                     
 11886                           ;diskio.c: 80: stat = sdc_disk_status(pdrv);
 11887  003764  501F               	movf	disk_status@pdrv,w,c
 11888  003766  EC0D  F01D         	call	_sdc_disk_status
 11889  00376A  6E20               	movwf	disk_status@stat,c
 11890                           
 11891                           ;diskio.c: 84: return stat;
 11892  00376C  5020               	movf	disk_status@stat,w,c
 11893  00376E  0012               	return	
 11894  003770                     
 11895                           ;diskio.c: 87: result = sdc_disk_status(pdrv);
 11896  003770  501F               	movf	disk_status@pdrv,w,c
 11897  003772  EC0D  F01D         	call	_sdc_disk_status
 11898  003776  6E1C               	movwf	??_disk_status& (0+255),c
 11899  003778  501C               	movf	??_disk_status,w,c
 11900  00377A  6E1D               	movwf	disk_status@result,c
 11901  00377C  6A1E               	clrf	disk_status@result+1,c
 11902                           
 11903                           ;diskio.c: 91: return stat;
 11904  00377E  5020               	movf	disk_status@stat,w,c
 11905  003780  0012               	return	
 11906  003782                     
 11907                           ;diskio.c: 98: return stat;
 11908  003782  5020               	movf	disk_status@stat,w,c
 11909  003784  0012               	return	
 11910  003786                     l841:
 11911  003786  501F               	movf	disk_status@pdrv,w,c
 11912                           
 11913                           ; Switch size 1, requested type "space"
 11914                           ; Number of cases is 3, Range of values is 0 to 2
 11915                           ; switch strategies available:
 11916                           ; Name         Instructions Cycles
 11917                           ; simple_byte           10     6 (average)
 11918                           ;	Chosen strategy is simple_byte
 11919  003788  0A00               	xorlw	0	; case 0
 11920  00378A  B4D8               	btfsc	status,2,c
 11921  00378C  D7EB               	goto	l842
 11922  00378E  0A01               	xorlw	1	; case 1
 11923  003790  B4D8               	btfsc	status,2,c
 11924  003792  D7EE               	goto	l844
 11925  003794  0A03               	xorlw	3	; case 2
 11926  003796  B4D8               	btfsc	status,2,c
 11927  003798  D7F4               	goto	l845
 11928                           
 11929                           ;diskio.c: 100: return 0x01;
 11930  00379A  0E01               	movlw	1
 11931  00379C  0012               	return	
 11932  00379E                     __end_of_disk_status:
 11933                           	opt stack 0
 11934                           tblptru	equ	0xFF8
 11935                           tblptrh	equ	0xFF7
 11936                           tblptrl	equ	0xFF6
 11937                           tablat	equ	0xFF5
 11938                           prodh	equ	0xFF4
 11939                           prodl	equ	0xFF3
 11940                           intcon	equ	0xFF2
 11941                           intcon2	equ	0xFF1
 11942                           intcon3	equ	0xFF0
 11943                           indf0	equ	0xFEF
 11944                           postinc0	equ	0xFEE
 11945                           fsr0h	equ	0xFEA
 11946                           fsr0l	equ	0xFE9
 11947                           wreg	equ	0xFE8
 11948                           indf1	equ	0xFE7
 11949                           postinc1	equ	0xFE6
 11950                           postdec1	equ	0xFE5
 11951                           fsr1h	equ	0xFE2
 11952                           fsr1l	equ	0xFE1
 11953                           indf2	equ	0xFDF
 11954                           postinc2	equ	0xFDE
 11955                           postdec2	equ	0xFDD
 11956                           plusw2	equ	0xFDB
 11957                           fsr2h	equ	0xFDA
 11958                           fsr2l	equ	0xFD9
 11959                           status	equ	0xFD8
 11960                           
 11961 ;; *************** function _sdc_disk_status *****************
 11962 ;; Defined at:
 11963 ;;		line 696 in file "bibliotecas/diskio.c"
 11964 ;; Parameters:    Size  Location     Type
 11965 ;;  pdrv            1    wreg     unsigned char 
 11966 ;; Auto vars:     Size  Location     Type
 11967 ;;  pdrv            1   26[COMRAM] unsigned char 
 11968 ;;  stat            1   25[COMRAM] unsigned char 
 11969 ;;  cont            1    0        unsigned char 
 11970 ;;  buff            1    0        unsigned char 
 11971 ;; Return value:  Size  Location     Type
 11972 ;;                  1    wreg      unsigned char 
 11973 ;; Registers used:
 11974 ;;		wreg, status,2
 11975 ;; Tracked objects:
 11976 ;;		On entry : 0/0
 11977 ;;		On exit  : 0/0
 11978 ;;		Unchanged: 0/0
 11979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11980 ;;      Params:         0       0       0       0       0       0       0       0       0
 11981 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11982 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11983 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11984 ;;Total ram usage:        2 bytes
 11985 ;; Hardware stack levels used:    1
 11986 ;; Hardware stack levels required when called:    2
 11987 ;; This function calls:
 11988 ;;		Nothing
 11989 ;; This function is called by:
 11990 ;;		_disk_status
 11991 ;; This function uses a non-reentrant model
 11992 ;;
 11993                           
 11994                           	psect	text41
 11995  003A1A                     __ptext41:
 11996                           	opt stack 0
 11997  003A1A                     _sdc_disk_status:
 11998                           	opt stack 24
 11999                           
 12000                           ;incstack = 0
 12001                           ;sdc_disk_status@pdrv stored from wreg
 12002  003A1A  6E1B               	movwf	sdc_disk_status@pdrv,c
 12003                           
 12004                           ;diskio.c: 698: DSTATUS stat = 0;
 12005  003A1C  0E00               	movlw	0
 12006  003A1E  6E1A               	movwf	sdc_disk_status@stat,c
 12007                           
 12008                           ;diskio.c: 699: unsigned char buff, cont;
 12009                           ;diskio.c: 701: if (pdrv != 0) return 0x01;
 12010  003A20  501B               	movf	sdc_disk_status@pdrv,w,c
 12011  003A22  B4D8               	btfsc	status,2,c
 12012  003A24  D002               	goto	l965
 12013  003A26  0E01               	movlw	1
 12014  003A28  0012               	return	
 12015  003A2A                     l965:
 12016                           
 12017                           ;diskio.c: 703: return FR_OK;
 12018  003A2A  0E00               	movlw	0
 12019  003A2C  0012               	return	
 12020  003A2E                     __end_of_sdc_disk_status:
 12021                           	opt stack 0
 12022                           tblptru	equ	0xFF8
 12023                           tblptrh	equ	0xFF7
 12024                           tblptrl	equ	0xFF6
 12025                           tablat	equ	0xFF5
 12026                           prodh	equ	0xFF4
 12027                           prodl	equ	0xFF3
 12028                           intcon	equ	0xFF2
 12029                           intcon2	equ	0xFF1
 12030                           intcon3	equ	0xFF0
 12031                           indf0	equ	0xFEF
 12032                           postinc0	equ	0xFEE
 12033                           fsr0h	equ	0xFEA
 12034                           fsr0l	equ	0xFE9
 12035                           wreg	equ	0xFE8
 12036                           indf1	equ	0xFE7
 12037                           postinc1	equ	0xFE6
 12038                           postdec1	equ	0xFE5
 12039                           fsr1h	equ	0xFE2
 12040                           fsr1l	equ	0xFE1
 12041                           indf2	equ	0xFDF
 12042                           postinc2	equ	0xFDE
 12043                           postdec2	equ	0xFDD
 12044                           plusw2	equ	0xFDB
 12045                           fsr2h	equ	0xFDA
 12046                           fsr2l	equ	0xFD9
 12047                           status	equ	0xFD8
 12048                           
 12049 ;; *************** function _sync *****************
 12050 ;; Defined at:
 12051 ;;		line 118 in file "bibliotecas/tff.c"
 12052 ;; Parameters:    Size  Location     Type
 12053 ;;		None
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;  fs              2   66[BANK0 ] PTR struct _FATFS
 12056 ;;		 -> NULL(0), fs(544), 
 12057 ;; Return value:  Size  Location     Type
 12058 ;;                  1    wreg      enum E155
 12059 ;; Registers used:
 12060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12061 ;; Tracked objects:
 12062 ;;		On entry : 0/0
 12063 ;;		On exit  : 0/0
 12064 ;;		Unchanged: 0/0
 12065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12066 ;;      Params:         0       0       0       0       0       0       0       0       0
 12067 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12068 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12069 ;;      Totals:         0       2       0       0       0       0       0       0       0
 12070 ;;Total ram usage:        2 bytes
 12071 ;; Hardware stack levels used:    1
 12072 ;; Hardware stack levels required when called:    9
 12073 ;; This function calls:
 12074 ;;		_disk_ioctl
 12075 ;;		_move_window
 12076 ;; This function is called by:
 12077 ;;		_f_sync
 12078 ;;		_f_unlink
 12079 ;;		_f_mkdir
 12080 ;;		_f_chmod
 12081 ;;		_f_utime
 12082 ;;		_f_rename
 12083 ;; This function uses a non-reentrant model
 12084 ;;
 12085                           
 12086                           	psect	text42
 12087  0034B8                     __ptext42:
 12088                           	opt stack 0
 12089  0034B8                     _sync:
 12090                           	opt stack 18
 12091                           
 12092                           ;tff.c: 120: FATFS *fs = FatFs;
 12093                           
 12094                           ;incstack = 0
 12095  0034B8  C0EF  F0A2         	movff	_FatFs,sync@fs
 12096  0034BC  C0F0  F0A3         	movff	_FatFs+1,sync@fs+1
 12097                           
 12098                           ;tff.c: 123: fs->winflag = 1;
 12099  0034C0  0100               	movlb	0	; () banked
 12100  0034C2  EE20 F01F          	lfsr	2,31
 12101  0034C6  51A2               	movf	sync@fs& (0+255),w,b
 12102  0034C8  26D9               	addwf	fsr2l,f,c
 12103  0034CA  51A3               	movf	(sync@fs+1)& (0+255),w,b
 12104  0034CC  22DA               	addwfc	fsr2h,f,c
 12105  0034CE  0E01               	movlw	1
 12106  0034D0  6EDF               	movwf	indf2,c
 12107                           
 12108                           ; BSR set to: 0
 12109                           ;tff.c: 124: if (!move_window(0)) return FR_RW_ERROR;
 12110  0034D2  0E00               	movlw	0
 12111  0034D4  6F8D               	movwf	move_window@sector& (0+255),b
 12112  0034D6  0E00               	movlw	0
 12113  0034D8  6F8E               	movwf	(move_window@sector+1)& (0+255),b
 12114  0034DA  0E00               	movlw	0
 12115  0034DC  6F8F               	movwf	(move_window@sector+2)& (0+255),b
 12116  0034DE  0E00               	movlw	0
 12117  0034E0  6F90               	movwf	(move_window@sector+3)& (0+255),b
 12118  0034E2  ECF8  F00E         	call	_move_window	;wreg free
 12119  0034E6  0900               	iorlw	0
 12120  0034E8  A4D8               	btfss	status,2,c
 12121  0034EA  D002               	goto	l1004
 12122  0034EC  0E08               	movlw	8
 12123  0034EE  0012               	return	
 12124  0034F0                     l1004:
 12125                           
 12126                           ;tff.c: 140: if (disk_ioctl(0, 0, (0)) != RES_OK)
 12127  0034F0  0E00               	movlw	0
 12128  0034F2  6E1A               	movwf	disk_ioctl@cmd,c
 12129  0034F4  0E00               	movlw	0
 12130  0034F6  6E1B               	movwf	disk_ioctl@buff,c
 12131  0034F8  0E00               	movlw	0
 12132  0034FA  6E1C               	movwf	disk_ioctl@buff+1,c
 12133  0034FC  0E00               	movlw	0
 12134  0034FE  ECA1  F01C         	call	_disk_ioctl
 12135  003502  0900               	iorlw	0
 12136  003504  B4D8               	btfsc	status,2,c
 12137  003506  D002               	goto	l1006
 12138                           
 12139                           ;tff.c: 141: return FR_RW_ERROR;
 12140  003508  0E08               	movlw	8
 12141  00350A  0012               	return	
 12142  00350C                     l1006:
 12143                           
 12144                           ;tff.c: 142: return FR_OK;
 12145  00350C  0E00               	movlw	0
 12146  00350E  0012               	return	
 12147  003510                     __end_of_sync:
 12148                           	opt stack 0
 12149                           tblptru	equ	0xFF8
 12150                           tblptrh	equ	0xFF7
 12151                           tblptrl	equ	0xFF6
 12152                           tablat	equ	0xFF5
 12153                           prodh	equ	0xFF4
 12154                           prodl	equ	0xFF3
 12155                           intcon	equ	0xFF2
 12156                           intcon2	equ	0xFF1
 12157                           intcon3	equ	0xFF0
 12158                           indf0	equ	0xFEF
 12159                           postinc0	equ	0xFEE
 12160                           fsr0h	equ	0xFEA
 12161                           fsr0l	equ	0xFE9
 12162                           wreg	equ	0xFE8
 12163                           indf1	equ	0xFE7
 12164                           postinc1	equ	0xFE6
 12165                           postdec1	equ	0xFE5
 12166                           fsr1h	equ	0xFE2
 12167                           fsr1l	equ	0xFE1
 12168                           indf2	equ	0xFDF
 12169                           postinc2	equ	0xFDE
 12170                           postdec2	equ	0xFDD
 12171                           plusw2	equ	0xFDB
 12172                           fsr2h	equ	0xFDA
 12173                           fsr2l	equ	0xFD9
 12174                           status	equ	0xFD8
 12175                           
 12176 ;; *************** function _move_window *****************
 12177 ;; Defined at:
 12178 ;;		line 76 in file "bibliotecas/tff.c"
 12179 ;; Parameters:    Size  Location     Type
 12180 ;;  sector          4   45[BANK0 ] unsigned long 
 12181 ;; Auto vars:     Size  Location     Type
 12182 ;;  n               1   59[BANK0 ] unsigned char 
 12183 ;;  wsect           4   60[BANK0 ] unsigned long 
 12184 ;;  fs              2   64[BANK0 ] PTR struct _FATFS
 12185 ;;		 -> NULL(0), fs(544), 
 12186 ;; Return value:  Size  Location     Type
 12187 ;;                  1    wreg      enum E105
 12188 ;; Registers used:
 12189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12190 ;; Tracked objects:
 12191 ;;		On entry : 0/0
 12192 ;;		On exit  : 0/0
 12193 ;;		Unchanged: 0/0
 12194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12195 ;;      Params:         0       4       0       0       0       0       0       0       0
 12196 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12197 ;;      Temps:          0      10       0       0       0       0       0       0       0
 12198 ;;      Totals:         0      21       0       0       0       0       0       0       0
 12199 ;;Total ram usage:       21 bytes
 12200 ;; Hardware stack levels used:    1
 12201 ;; Hardware stack levels required when called:    8
 12202 ;; This function calls:
 12203 ;;		_disk_read
 12204 ;;		_disk_write
 12205 ;; This function is called by:
 12206 ;;		_sync
 12207 ;;		_get_cluster
 12208 ;;		_put_cluster
 12209 ;;		_trace_path
 12210 ;;		_reserve_direntry
 12211 ;;		_f_open
 12212 ;;		_f_write
 12213 ;;		_f_sync
 12214 ;;		_f_read
 12215 ;;		_f_readdir
 12216 ;;		_f_getfree
 12217 ;;		_f_unlink
 12218 ;;		_f_mkdir
 12219 ;;		_f_rename
 12220 ;; This function uses a non-reentrant model
 12221 ;;
 12222                           
 12223                           	psect	text43
 12224  001DF0                     __ptext43:
 12225                           	opt stack 0
 12226  001DF0                     _move_window:
 12227                           	opt stack 20
 12228                           
 12229                           ;tff.c: 80: DWORD wsect;
 12230                           ;tff.c: 81: FATFS *fs = FatFs;
 12231                           
 12232                           ;incstack = 0
 12233  001DF0  C0EF  F0A0         	movff	_FatFs,move_window@fs
 12234  001DF4  C0F0  F0A1         	movff	_FatFs+1,move_window@fs+1
 12235                           
 12236                           ;tff.c: 84: wsect = fs->winsect;
 12237  001DF8  0100               	movlb	0	; () banked
 12238  001DFA  EE20 F004          	lfsr	2,4
 12239  001DFE  51A0               	movf	move_window@fs& (0+255),w,b
 12240  001E00  26D9               	addwf	fsr2l,f,c
 12241  001E02  51A1               	movf	(move_window@fs+1)& (0+255),w,b
 12242  001E04  22DA               	addwfc	fsr2h,f,c
 12243  001E06  CFDE F09C          	movff	postinc2,move_window@wsect
 12244  001E0A  CFDE F09D          	movff	postinc2,move_window@wsect+1
 12245  001E0E  CFDE F09E          	movff	postinc2,move_window@wsect+2
 12246  001E12  CFDE F09F          	movff	postinc2,move_window@wsect+3
 12247                           
 12248                           ; BSR set to: 0
 12249                           ;tff.c: 85: if (wsect != sector) {
 12250  001E16  518D               	movf	move_window@sector& (0+255),w,b
 12251  001E18  199C               	xorwf	move_window@wsect& (0+255),w,b
 12252  001E1A  E10A               	bnz	u12280
 12253  001E1C  518E               	movf	(move_window@sector+1)& (0+255),w,b
 12254  001E1E  199D               	xorwf	(move_window@wsect+1)& (0+255),w,b
 12255  001E20  E107               	bnz	u12280
 12256  001E22  518F               	movf	(move_window@sector+2)& (0+255),w,b
 12257  001E24  199E               	xorwf	(move_window@wsect+2)& (0+255),w,b
 12258  001E26  E104               	bnz	u12280
 12259  001E28  5190               	movf	(move_window@sector+3)& (0+255),w,b
 12260  001E2A  199F               	xorwf	(move_window@wsect+3)& (0+255),w,b
 12261  001E2C  B4D8               	btfsc	status,2,c
 12262  001E2E  D0B9               	goto	l1000
 12263  001E30                     u12280:
 12264                           
 12265                           ; BSR set to: 0
 12266                           ;tff.c: 87: BYTE n;
 12267                           ;tff.c: 88: if (fs->winflag) {
 12268  001E30  EE20 F01F          	lfsr	2,31
 12269  001E34  51A0               	movf	move_window@fs& (0+255),w,b
 12270  001E36  26D9               	addwf	fsr2l,f,c
 12271  001E38  51A1               	movf	(move_window@fs+1)& (0+255),w,b
 12272  001E3A  22DA               	addwfc	fsr2h,f,c
 12273  001E3C  50DF               	movf	indf2,w,c
 12274  001E3E  B4D8               	btfsc	status,2,c
 12275  001E40  D083               	goto	u12330
 12276                           
 12277                           ; BSR set to: 0
 12278                           ;tff.c: 89: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 12279  001E42  0E20               	movlw	32
 12280  001E44  25A0               	addwf	move_window@fs& (0+255),w,b
 12281  001E46  6F80               	movwf	disk_write@buff& (0+255),b
 12282  001E48  0E00               	movlw	0
 12283  001E4A  21A1               	addwfc	(move_window@fs+1)& (0+255),w,b
 12284  001E4C  6F81               	movwf	(disk_write@buff+1)& (0+255),b
 12285  001E4E  C09C  F082         	movff	move_window@wsect,disk_write@sector
 12286  001E52  C09D  F083         	movff	move_window@wsect+1,disk_write@sector+1
 12287  001E56  C09E  F084         	movff	move_window@wsect+2,disk_write@sector+2
 12288  001E5A  C09F  F085         	movff	move_window@wsect+3,disk_write@sector+3
 12289  001E5E  0E01               	movlw	1
 12290  001E60  6F86               	movwf	disk_write@count& (0+255),b
 12291  001E62  0E00               	movlw	0
 12292  001E64  EC22  F018         	call	_disk_write
 12293  001E68  0900               	iorlw	0
 12294  001E6A  B4D8               	btfsc	status,2,c
 12295  001E6C  D002               	goto	l995
 12296                           
 12297                           ;tff.c: 90: return FALSE;
 12298  001E6E  0E00               	movlw	0
 12299  001E70  0012               	return	
 12300  001E72                     l995:
 12301                           
 12302                           ;tff.c: 91: fs->winflag = 0;
 12303  001E72  0100               	movlb	0	; () banked
 12304  001E74  EE20 F01F          	lfsr	2,31
 12305  001E78  51A0               	movf	move_window@fs& (0+255),w,b
 12306  001E7A  26D9               	addwf	fsr2l,f,c
 12307  001E7C  51A1               	movf	(move_window@fs+1)& (0+255),w,b
 12308  001E7E  22DA               	addwfc	fsr2h,f,c
 12309  001E80  0E00               	movlw	0
 12310  001E82  6EDF               	movwf	indf2,c
 12311                           
 12312                           ;tff.c: 92: if (wsect < (fs->fatbase + fs->sects_fat)) {
 12313  001E84  EE20 F008          	lfsr	2,8
 12314  001E88  51A0               	movf	move_window@fs& (0+255),w,b
 12315  001E8A  26D9               	addwf	fsr2l,f,c
 12316  001E8C  51A1               	movf	(move_window@fs+1)& (0+255),w,b
 12317  001E8E  22DA               	addwfc	fsr2h,f,c
 12318  001E90  CFDE F091          	movff	postinc2,??_move_window
 12319  001E94  CFDE F092          	movff	postinc2,??_move_window+1
 12320  001E98  CFDE F093          	movff	postinc2,??_move_window+2
 12321  001E9C  CFDE F094          	movff	postinc2,??_move_window+3
 12322  001EA0  EE20 F014          	lfsr	2,20
 12323  001EA4  51A0               	movf	move_window@fs& (0+255),w,b
 12324  001EA6  26D9               	addwf	fsr2l,f,c
 12325  001EA8  51A1               	movf	(move_window@fs+1)& (0+255),w,b
 12326  001EAA  22DA               	addwfc	fsr2h,f,c
 12327  001EAC  CFDE F095          	movff	postinc2,??_move_window+4
 12328  001EB0  CFDD F096          	movff	postdec2,??_move_window+5
 12329  001EB4  5195               	movf	(??_move_window+4)& (0+255),w,b
 12330  001EB6  2591               	addwf	??_move_window& (0+255),w,b
 12331  001EB8  6F97               	movwf	(??_move_window+6)& (0+255),b
 12332  001EBA  5196               	movf	(??_move_window+5)& (0+255),w,b
 12333  001EBC  2192               	addwfc	(??_move_window+1)& (0+255),w,b
 12334  001EBE  6F98               	movwf	(??_move_window+7)& (0+255),b
 12335  001EC0  0E00               	movlw	0
 12336  001EC2  2193               	addwfc	(??_move_window+2)& (0+255),w,b
 12337  001EC4  6F99               	movwf	(??_move_window+8)& (0+255),b
 12338  001EC6  0E00               	movlw	0
 12339  001EC8  2194               	addwfc	(??_move_window+3)& (0+255),w,b
 12340  001ECA  6F9A               	movwf	(??_move_window+9)& (0+255),b
 12341  001ECC  5197               	movf	(??_move_window+6)& (0+255),w,b
 12342  001ECE  5D9C               	subwf	move_window@wsect& (0+255),w,b
 12343  001ED0  5198               	movf	(??_move_window+7)& (0+255),w,b
 12344  001ED2  599D               	subwfb	(move_window@wsect+1)& (0+255),w,b
 12345  001ED4  5199               	movf	(??_move_window+8)& (0+255),w,b
 12346  001ED6  599E               	subwfb	(move_window@wsect+2)& (0+255),w,b
 12347  001ED8  519A               	movf	(??_move_window+9)& (0+255),w,b
 12348  001EDA  599F               	subwfb	(move_window@wsect+3)& (0+255),w,b
 12349  001EDC  B0D8               	btfsc	status,0,c
 12350  001EDE  D034               	goto	u12330
 12351                           
 12352                           ; BSR set to: 0
 12353                           ;tff.c: 93: for (n = fs->n_fats; n >= 2; n--) {
 12354  001EE0  EE20 F01E          	lfsr	2,30
 12355  001EE4  51A0               	movf	move_window@fs& (0+255),w,b
 12356  001EE6  26D9               	addwf	fsr2l,f,c
 12357  001EE8  51A1               	movf	(move_window@fs+1)& (0+255),w,b
 12358  001EEA  22DA               	addwfc	fsr2h,f,c
 12359  001EEC  50DF               	movf	indf2,w,c
 12360  001EEE  6F9B               	movwf	move_window@n& (0+255),b
 12361  001EF0                     l10782:
 12362                           
 12363                           ; BSR set to: 0
 12364  001EF0  0E02               	movlw	2
 12365  001EF2  619B               	cpfslt	move_window@n& (0+255),b
 12366  001EF4  D001               	goto	l998
 12367  001EF6  D028               	goto	u12330
 12368  001EF8                     l998:
 12369                           
 12370                           ; BSR set to: 0
 12371                           ;tff.c: 94: wsect += fs->sects_fat;
 12372                           
 12373                           ; BSR set to: 0
 12374  001EF8  EE20 F014          	lfsr	2,20
 12375  001EFC  51A0               	movf	move_window@fs& (0+255),w,b
 12376  001EFE  26D9               	addwf	fsr2l,f,c
 12377  001F00  51A1               	movf	(move_window@fs+1)& (0+255),w,b
 12378  001F02  22DA               	addwfc	fsr2h,f,c
 12379  001F04  CFDE F091          	movff	postinc2,??_move_window
 12380  001F08  CFDD F092          	movff	postdec2,??_move_window+1
 12381  001F0C  5191               	movf	??_move_window& (0+255),w,b
 12382  001F0E  279C               	addwf	move_window@wsect& (0+255),f,b
 12383  001F10  5192               	movf	(??_move_window+1)& (0+255),w,b
 12384  001F12  239D               	addwfc	(move_window@wsect+1)& (0+255),f,b
 12385  001F14  0E00               	movlw	0
 12386  001F16  239E               	addwfc	(move_window@wsect+2)& (0+255),f,b
 12387  001F18  0E00               	movlw	0
 12388  001F1A  239F               	addwfc	(move_window@wsect+3)& (0+255),f,b
 12389                           
 12390                           ; BSR set to: 0
 12391                           ;tff.c: 95: disk_write(0, fs->win, wsect, 1);
 12392  001F1C  0E20               	movlw	32
 12393  001F1E  25A0               	addwf	move_window@fs& (0+255),w,b
 12394  001F20  6F80               	movwf	disk_write@buff& (0+255),b
 12395  001F22  0E00               	movlw	0
 12396  001F24  21A1               	addwfc	(move_window@fs+1)& (0+255),w,b
 12397  001F26  6F81               	movwf	(disk_write@buff+1)& (0+255),b
 12398  001F28  C09C  F082         	movff	move_window@wsect,disk_write@sector
 12399  001F2C  C09D  F083         	movff	move_window@wsect+1,disk_write@sector+1
 12400  001F30  C09E  F084         	movff	move_window@wsect+2,disk_write@sector+2
 12401  001F34  C09F  F085         	movff	move_window@wsect+3,disk_write@sector+3
 12402  001F38  0E01               	movlw	1
 12403  001F3A  6F86               	movwf	disk_write@count& (0+255),b
 12404  001F3C  0E00               	movlw	0
 12405  001F3E  EC22  F018         	call	_disk_write
 12406  001F42  0100               	movlb	0	; () banked
 12407  001F44  079B               	decf	move_window@n& (0+255),f,b
 12408  001F46  D7D4               	goto	l10782
 12409  001F48                     u12330:
 12410                           
 12411                           ; BSR set to: 0
 12412                           ;tff.c: 96: }
 12413                           ;tff.c: 97: }
 12414                           ;tff.c: 98: }
 12415                           ;tff.c: 100: if (sector) {
 12416                           
 12417                           ; BSR set to: 0
 12418                           
 12419                           ; BSR set to: 0
 12420                           
 12421                           ; BSR set to: 0
 12422  001F48  518D               	movf	move_window@sector& (0+255),w,b
 12423  001F4A  118E               	iorwf	(move_window@sector+1)& (0+255),w,b
 12424  001F4C  118F               	iorwf	(move_window@sector+2)& (0+255),w,b
 12425  001F4E  1190               	iorwf	(move_window@sector+3)& (0+255),w,b
 12426  001F50  B4D8               	btfsc	status,2,c
 12427  001F52  D027               	goto	l1000
 12428                           
 12429                           ; BSR set to: 0
 12430                           ;tff.c: 101: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 12431  001F54  0E20               	movlw	32
 12432  001F56  25A0               	addwf	move_window@fs& (0+255),w,b
 12433  001F58  6F80               	movwf	disk_read@buff& (0+255),b
 12434  001F5A  0E00               	movlw	0
 12435  001F5C  21A1               	addwfc	(move_window@fs+1)& (0+255),w,b
 12436  001F5E  6F81               	movwf	(disk_read@buff+1)& (0+255),b
 12437  001F60  C08D  F082         	movff	move_window@sector,disk_read@sector
 12438  001F64  C08E  F083         	movff	move_window@sector+1,disk_read@sector+1
 12439  001F68  C08F  F084         	movff	move_window@sector+2,disk_read@sector+2
 12440  001F6C  C090  F085         	movff	move_window@sector+3,disk_read@sector+3
 12441  001F70  0E01               	movlw	1
 12442  001F72  6F86               	movwf	disk_read@count& (0+255),b
 12443  001F74  0E00               	movlw	0
 12444  001F76  EC99  F015         	call	_disk_read
 12445  001F7A  0900               	iorlw	0
 12446  001F7C  B4D8               	btfsc	status,2,c
 12447  001F7E  D002               	goto	l1001
 12448                           
 12449                           ;tff.c: 102: return FALSE;
 12450  001F80  0E00               	movlw	0
 12451  001F82  0012               	return	
 12452  001F84                     l1001:
 12453                           
 12454                           ;tff.c: 103: fs->winsect = sector;
 12455  001F84  0100               	movlb	0	; () banked
 12456  001F86  EE20 F004          	lfsr	2,4
 12457  001F8A  51A0               	movf	move_window@fs& (0+255),w,b
 12458  001F8C  26D9               	addwf	fsr2l,f,c
 12459  001F8E  51A1               	movf	(move_window@fs+1)& (0+255),w,b
 12460  001F90  22DA               	addwfc	fsr2h,f,c
 12461  001F92  C08D  FFDE         	movff	move_window@sector,postinc2
 12462  001F96  C08E  FFDE         	movff	move_window@sector+1,postinc2
 12463  001F9A  C08F  FFDE         	movff	move_window@sector+2,postinc2
 12464  001F9E  C090  FFDE         	movff	move_window@sector+3,postinc2
 12465  001FA2                     l1000:
 12466                           
 12467                           ; BSR set to: 0
 12468                           ;tff.c: 104: }
 12469                           ;tff.c: 105: }
 12470                           ;tff.c: 106: return TRUE;
 12471                           
 12472                           ; BSR set to: 0
 12473                           
 12474                           ; BSR set to: 0
 12475  001FA2  0E01               	movlw	1
 12476  001FA4  0012               	return	
 12477  001FA6                     __end_of_move_window:
 12478                           	opt stack 0
 12479                           tblptru	equ	0xFF8
 12480                           tblptrh	equ	0xFF7
 12481                           tblptrl	equ	0xFF6
 12482                           tablat	equ	0xFF5
 12483                           prodh	equ	0xFF4
 12484                           prodl	equ	0xFF3
 12485                           intcon	equ	0xFF2
 12486                           intcon2	equ	0xFF1
 12487                           intcon3	equ	0xFF0
 12488                           indf0	equ	0xFEF
 12489                           postinc0	equ	0xFEE
 12490                           fsr0h	equ	0xFEA
 12491                           fsr0l	equ	0xFE9
 12492                           wreg	equ	0xFE8
 12493                           indf1	equ	0xFE7
 12494                           postinc1	equ	0xFE6
 12495                           postdec1	equ	0xFE5
 12496                           fsr1h	equ	0xFE2
 12497                           fsr1l	equ	0xFE1
 12498                           indf2	equ	0xFDF
 12499                           postinc2	equ	0xFDE
 12500                           postdec2	equ	0xFDD
 12501                           plusw2	equ	0xFDB
 12502                           fsr2h	equ	0xFDA
 12503                           fsr2l	equ	0xFD9
 12504                           status	equ	0xFD8
 12505                           
 12506 ;; *************** function _disk_write *****************
 12507 ;; Defined at:
 12508 ;;		line 200 in file "bibliotecas/diskio.c"
 12509 ;; Parameters:    Size  Location     Type
 12510 ;;  pdrv            1    wreg     unsigned char 
 12511 ;;  buff            2   32[BANK0 ] PTR const unsigned char 
 12512 ;;		 -> fs.win(512), NULL(0), STR_13(5), fs(544), 
 12513 ;;  sector          4   34[BANK0 ] unsigned long 
 12514 ;;  count           1   38[BANK0 ] unsigned char 
 12515 ;; Auto vars:     Size  Location     Type
 12516 ;;  pdrv            1   40[BANK0 ] unsigned char 
 12517 ;;  result          2   41[BANK0 ] int 
 12518 ;;  res             1   43[BANK0 ] enum E25
 12519 ;; Return value:  Size  Location     Type
 12520 ;;                  1    wreg      enum E25
 12521 ;; Registers used:
 12522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12523 ;; Tracked objects:
 12524 ;;		On entry : 0/0
 12525 ;;		On exit  : 0/0
 12526 ;;		Unchanged: 0/0
 12527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12528 ;;      Params:         0       7       0       0       0       0       0       0       0
 12529 ;;      Locals:         0       4       0       0       0       0       0       0       0
 12530 ;;      Temps:          0       1       0       0       0       0       0       0       0
 12531 ;;      Totals:         0      12       0       0       0       0       0       0       0
 12532 ;;Total ram usage:       12 bytes
 12533 ;; Hardware stack levels used:    1
 12534 ;; Hardware stack levels required when called:    7
 12535 ;; This function calls:
 12536 ;;		_sdc_disk_write
 12537 ;; This function is called by:
 12538 ;;		_move_window
 12539 ;;		_reserve_direntry
 12540 ;;		_f_write
 12541 ;;		_f_mkdir
 12542 ;; This function uses a non-reentrant model
 12543 ;;
 12544                           
 12545                           	psect	text44
 12546  003044                     __ptext44:
 12547                           	opt stack 0
 12548  003044                     _disk_write:
 12549                           	opt stack 20
 12550                           
 12551                           ;incstack = 0
 12552                           ;disk_write@pdrv stored from wreg
 12553  003044  0100               	movlb	0	; () banked
 12554  003046  6F88               	movwf	disk_write@pdrv& (0+255),b
 12555                           
 12556                           ;diskio.c: 207: DRESULT res;
 12557                           ;diskio.c: 208: int result;
 12558                           ;diskio.c: 210: switch (pdrv) {
 12559  003048  D034               	goto	l865
 12560  00304A                     
 12561                           ;diskio.c: 213: result = sdc_disk_write(buff, sector, count);
 12562  00304A  C080  F06D         	movff	disk_write@buff,sdc_disk_write@p_buff
 12563  00304E  C081  F06E         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 12564  003052  C082  F06F         	movff	disk_write@sector,sdc_disk_write@sector
 12565  003056  C083  F070         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 12566  00305A  C084  F071         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 12567  00305E  C085  F072         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 12568  003062  C086  F073         	movff	disk_write@count,sdc_disk_write@count
 12569  003066  EC30  F012         	call	_sdc_disk_write	;wreg free
 12570  00306A  0100               	movlb	0	; () banked
 12571  00306C  6F87               	movwf	??_disk_write& (0+255),b
 12572  00306E  5187               	movf	??_disk_write& (0+255),w,b
 12573  003070  6F89               	movwf	disk_write@result& (0+255),b
 12574  003072  6B8A               	clrf	(disk_write@result+1)& (0+255),b
 12575                           
 12576                           ; BSR set to: 0
 12577                           ;diskio.c: 215: res = result;
 12578  003074  C089  F08B         	movff	disk_write@result,disk_write@res
 12579                           
 12580                           ; BSR set to: 0
 12581                           ;diskio.c: 218: return res;
 12582  003078  518B               	movf	disk_write@res& (0+255),w,b
 12583                           
 12584                           ; BSR set to: 0
 12585  00307A  0012               	return	
 12586  00307C                     
 12587                           ; BSR set to: 0
 12588                           ;diskio.c: 223: result = sdc_disk_write(buff, sector, count);
 12589                           
 12590                           ; BSR set to: 0
 12591  00307C  C080  F06D         	movff	disk_write@buff,sdc_disk_write@p_buff
 12592  003080  C081  F06E         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 12593  003084  C082  F06F         	movff	disk_write@sector,sdc_disk_write@sector
 12594  003088  C083  F070         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 12595  00308C  C084  F071         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 12596  003090  C085  F072         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 12597  003094  C086  F073         	movff	disk_write@count,sdc_disk_write@count
 12598  003098  EC30  F012         	call	_sdc_disk_write	;wreg free
 12599  00309C  0100               	movlb	0	; () banked
 12600  00309E  6F87               	movwf	??_disk_write& (0+255),b
 12601  0030A0  5187               	movf	??_disk_write& (0+255),w,b
 12602  0030A2  6F89               	movwf	disk_write@result& (0+255),b
 12603  0030A4  6B8A               	clrf	(disk_write@result+1)& (0+255),b
 12604                           
 12605                           ; BSR set to: 0
 12606                           ;diskio.c: 224: res = result;
 12607  0030A6  C089  F08B         	movff	disk_write@result,disk_write@res
 12608                           
 12609                           ; BSR set to: 0
 12610                           ;diskio.c: 227: return res;
 12611  0030AA  518B               	movf	disk_write@res& (0+255),w,b
 12612                           
 12613                           ; BSR set to: 0
 12614  0030AC  0012               	return	
 12615  0030AE                     
 12616                           ; BSR set to: 0
 12617                           ;diskio.c: 236: return res;
 12618                           
 12619                           ; BSR set to: 0
 12620  0030AE  518B               	movf	disk_write@res& (0+255),w,b
 12621                           
 12622                           ; BSR set to: 0
 12623  0030B0  0012               	return	
 12624  0030B2                     l865:
 12625                           
 12626                           ; BSR set to: 0
 12627  0030B2  0100               	movlb	0	; () banked
 12628  0030B4  5188               	movf	disk_write@pdrv& (0+255),w,b
 12629                           
 12630                           ; Switch size 1, requested type "space"
 12631                           ; Number of cases is 3, Range of values is 0 to 2
 12632                           ; switch strategies available:
 12633                           ; Name         Instructions Cycles
 12634                           ; simple_byte           10     6 (average)
 12635                           ;	Chosen strategy is simple_byte
 12636  0030B6  0A00               	xorlw	0	; case 0
 12637  0030B8  B4D8               	btfsc	status,2,c
 12638  0030BA  D7C7               	goto	l866
 12639  0030BC  0A01               	xorlw	1	; case 1
 12640  0030BE  B4D8               	btfsc	status,2,c
 12641  0030C0  D7DD               	goto	l868
 12642  0030C2  0A03               	xorlw	3	; case 2
 12643  0030C4  B4D8               	btfsc	status,2,c
 12644  0030C6  D7F3               	goto	l869
 12645                           
 12646                           ; BSR set to: 0
 12647                           ;diskio.c: 239: return RES_PARERR;
 12648                           
 12649                           ; BSR set to: 0
 12650  0030C8  0E04               	movlw	4
 12651  0030CA  0012               	return	
 12652  0030CC                     __end_of_disk_write:
 12653                           	opt stack 0
 12654                           tblptru	equ	0xFF8
 12655                           tblptrh	equ	0xFF7
 12656                           tblptrl	equ	0xFF6
 12657                           tablat	equ	0xFF5
 12658                           prodh	equ	0xFF4
 12659                           prodl	equ	0xFF3
 12660                           intcon	equ	0xFF2
 12661                           intcon2	equ	0xFF1
 12662                           intcon3	equ	0xFF0
 12663                           indf0	equ	0xFEF
 12664                           postinc0	equ	0xFEE
 12665                           fsr0h	equ	0xFEA
 12666                           fsr0l	equ	0xFE9
 12667                           wreg	equ	0xFE8
 12668                           indf1	equ	0xFE7
 12669                           postinc1	equ	0xFE6
 12670                           postdec1	equ	0xFE5
 12671                           fsr1h	equ	0xFE2
 12672                           fsr1l	equ	0xFE1
 12673                           indf2	equ	0xFDF
 12674                           postinc2	equ	0xFDE
 12675                           postdec2	equ	0xFDD
 12676                           plusw2	equ	0xFDB
 12677                           fsr2h	equ	0xFDA
 12678                           fsr2l	equ	0xFD9
 12679                           status	equ	0xFD8
 12680                           
 12681 ;; *************** function _sdc_disk_write *****************
 12682 ;; Defined at:
 12683 ;;		line 624 in file "bibliotecas/diskio.c"
 12684 ;; Parameters:    Size  Location     Type
 12685 ;;  p_buff          2   13[BANK0 ] PTR const unsigned char 
 12686 ;;		 -> fs.win(512), NULL(0), STR_13(5), fs(544), 
 12687 ;;  sector          4   15[BANK0 ] unsigned long 
 12688 ;;  count           1   19[BANK0 ] unsigned char 
 12689 ;; Auto vars:     Size  Location     Type
 12690 ;;  j               2   29[BANK0 ] int 
 12691 ;;  count1          2   26[BANK0 ] int 
 12692 ;;  i               2   24[BANK0 ] int 
 12693 ;;  buff            1   31[BANK0 ] unsigned char 
 12694 ;;  res             1   28[BANK0 ] enum E25
 12695 ;; Return value:  Size  Location     Type
 12696 ;;                  1    wreg      enum E25
 12697 ;; Registers used:
 12698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12699 ;; Tracked objects:
 12700 ;;		On entry : 0/0
 12701 ;;		On exit  : 0/0
 12702 ;;		Unchanged: 0/0
 12703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12704 ;;      Params:         0       7       0       0       0       0       0       0       0
 12705 ;;      Locals:         0       8       0       0       0       0       0       0       0
 12706 ;;      Temps:          0       4       0       0       0       0       0       0       0
 12707 ;;      Totals:         0      19       0       0       0       0       0       0       0
 12708 ;;Total ram usage:       19 bytes
 12709 ;; Hardware stack levels used:    1
 12710 ;; Hardware stack levels required when called:    6
 12711 ;; This function calls:
 12712 ;;		_ReadSPI_
 12713 ;;		_WriteSPI_
 12714 ;;		_command
 12715 ;;		_dummy_clocks
 12716 ;;		_escreve_frase_ram_lcd
 12717 ;;		_escreve_inteiro_lcd
 12718 ;;		_posicao_cursor_lcd
 12719 ;;		_proceed
 12720 ;;		_response
 12721 ;; This function is called by:
 12722 ;;		_disk_write
 12723 ;; This function uses a non-reentrant model
 12724 ;;
 12725                           
 12726                           	psect	text45
 12727  002460                     __ptext45:
 12728                           	opt stack 0
 12729  002460                     _sdc_disk_write:
 12730                           	opt stack 20
 12731                           
 12732                           ;diskio.c: 626: DRESULT res;
 12733                           ;diskio.c: 627: unsigned char buff;
 12734                           ;diskio.c: 628: int i=0,j, count1 = 0;
 12735                           
 12736                           ; BSR set to: 0
 12737                           ;incstack = 0
 12738  002460  0E00               	movlw	0
 12739  002462  0100               	movlb	0	; () banked
 12740  002464  6F79               	movwf	(sdc_disk_write@i+1)& (0+255),b
 12741  002466  0E00               	movlw	0
 12742  002468  6F78               	movwf	sdc_disk_write@i& (0+255),b
 12743  00246A  0E00               	movlw	0
 12744  00246C  6F7B               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 12745  00246E  0E00               	movlw	0
 12746  002470  6F7A               	movwf	sdc_disk_write@count1& (0+255),b
 12747                           
 12748                           ; BSR set to: 0
 12749                           ;diskio.c: 632: LATCbits.LATC7 = 0;
 12750  002472  9E8B               	bcf	3979,7,c	;volatile
 12751                           
 12752                           ; BSR set to: 0
 12753                           ;diskio.c: 633: LATBbits.LATB4 = 0;
 12754  002474  988A               	bcf	3978,4,c	;volatile
 12755                           
 12756                           ; BSR set to: 0
 12757                           ;diskio.c: 634: dummy_clocks(10);
 12758  002476  0E0A               	movlw	10
 12759  002478  EC0C  F01C         	call	_dummy_clocks
 12760                           
 12761                           ;diskio.c: 635: command(0X58, sector*512, 0X00);
 12762  00247C  C06F  F074         	movff	sdc_disk_write@sector,??_sdc_disk_write
 12763  002480  C070  F075         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 12764  002484  C071  F076         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 12765  002488  C072  F077         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 12766  00248C  0E09               	movlw	9
 12767  00248E                     u12165:
 12768  00248E  90D8               	bcf	status,0,c
 12769  002490  0100               	movlb	0	; () banked
 12770  002492  3774               	rlcf	??_sdc_disk_write& (0+255),f,b
 12771  002494  3775               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 12772  002496  3776               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 12773  002498  3777               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 12774  00249A  2EE8               	decfsz	wreg,f,c
 12775  00249C  D7F8               	goto	u12165
 12776  00249E  C074  F020         	movff	??_sdc_disk_write,command@arg
 12777  0024A2  C075  F021         	movff	??_sdc_disk_write+1,command@arg+1
 12778  0024A6  C076  F022         	movff	??_sdc_disk_write+2,command@arg+2
 12779  0024AA  C077  F023         	movff	??_sdc_disk_write+3,command@arg+3
 12780  0024AE  0E00               	movlw	0
 12781  0024B0  6E24               	movwf	command@CRC,c
 12782  0024B2  0E58               	movlw	88
 12783  0024B4  EC00  F01A         	call	_command
 12784                           
 12785                           ;diskio.c: 636: proceed();
 12786  0024B8  EC51  F01D         	call	_proceed	;wreg free
 12787  0024BC                     
 12788                           ;diskio.c: 638: buff = response();
 12789  0024BC  EC4B  F01D         	call	_response	;wreg free
 12790  0024C0  0100               	movlb	0	; () banked
 12791  0024C2  6F7F               	movwf	sdc_disk_write@buff& (0+255),b
 12792                           
 12793                           ; BSR set to: 0
 12794                           ;diskio.c: 639: }while(buff!=0X00);
 12795  0024C4  517F               	movf	sdc_disk_write@buff& (0+255),w,b
 12796  0024C6  A4D8               	btfss	status,2,c
 12797  0024C8  D7F9               	goto	l955
 12798                           
 12799                           ; BSR set to: 0
 12800                           ;diskio.c: 641: LATBbits.LATB4 = 0;
 12801  0024CA  988A               	bcf	3978,4,c	;volatile
 12802                           
 12803                           ;diskio.c: 642: LATCbits.LATC7 = 0;
 12804  0024CC  9E8B               	bcf	3979,7,c	;volatile
 12805                           
 12806                           ; BSR set to: 0
 12807                           ;diskio.c: 643: dummy_clocks(1);
 12808  0024CE  0E01               	movlw	1
 12809  0024D0  EC0C  F01C         	call	_dummy_clocks
 12810                           
 12811                           ;diskio.c: 644: WriteSPI_(0XFE);
 12812  0024D4  0EFE               	movlw	254
 12813  0024D6  EC29  F01D         	call	_WriteSPI_
 12814                           
 12815                           ;diskio.c: 647: for(j=0;j<512;j++)
 12816  0024DA  0E00               	movlw	0
 12817  0024DC  0100               	movlb	0	; () banked
 12818  0024DE  6F7E               	movwf	(sdc_disk_write@j+1)& (0+255),b
 12819  0024E0  0E00               	movlw	0
 12820  0024E2  6F7D               	movwf	sdc_disk_write@j& (0+255),b
 12821  0024E4                     l10598:
 12822                           
 12823                           ; BSR set to: 0
 12824  0024E4  BF7E               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 12825  0024E6  D004               	goto	l957
 12826  0024E8  0E02               	movlw	2
 12827  0024EA  5D7E               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 12828  0024EC  B0D8               	btfsc	status,0,c
 12829  0024EE  D018               	goto	u12200
 12830  0024F0                     l957:
 12831                           
 12832                           ; BSR set to: 0
 12833                           ;diskio.c: 648: {
 12834                           ;diskio.c: 649: WriteSPI_(*p_buff);
 12835                           
 12836                           ; BSR set to: 0
 12837  0024F0  C06D  FFF6         	movff	sdc_disk_write@p_buff,tblptrl
 12838  0024F4  C06E  FFF7         	movff	sdc_disk_write@p_buff+1,tblptrh
 12839  0024F8  6AF8               	clrf	tblptru,c
 12840  0024FA  0E07               	movlw	(high __ramtop+-1)
 12841  0024FC  64F7               	cpfsgt	tblptrh,c
 12842  0024FE  D003               	bra	u12197
 12843  002500  0008               	tblrd		*
 12844  002502  50F5               	movf	tablat,w,c
 12845  002504  D005               	bra	u12190
 12846  002506                     u12197:
 12847  002506  CFF6 FFE9          	movff	tblptrl,fsr0l
 12848  00250A  CFF7 FFEA          	movff	tblptrh,fsr0h
 12849  00250E  50EF               	movf	indf0,w,c
 12850  002510                     u12190:
 12851  002510  EC29  F01D         	call	_WriteSPI_
 12852                           
 12853                           ;diskio.c: 650: p_buff++;
 12854  002514  0100               	movlb	0	; () banked
 12855  002516  4B6D               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 12856  002518  2B6E               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 12857                           
 12858                           ; BSR set to: 0
 12859  00251A  4B7D               	infsnz	sdc_disk_write@j& (0+255),f,b
 12860  00251C  2B7E               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 12861  00251E  D7E2               	goto	l10598
 12862  002520                     u12200:
 12863                           
 12864                           ; BSR set to: 0
 12865                           ;diskio.c: 652: }
 12866                           ;diskio.c: 655: ReadSPI_();
 12867                           
 12868                           ; BSR set to: 0
 12869  002520  EC57  F01D         	call	_ReadSPI_	;wreg free
 12870                           
 12871                           ;diskio.c: 656: ReadSPI_();
 12872  002524  EC57  F01D         	call	_ReadSPI_	;wreg free
 12873                           
 12874                           ;diskio.c: 657: proceed();
 12875  002528  EC51  F01D         	call	_proceed	;wreg free
 12876                           
 12877                           ;diskio.c: 658: buff = response();
 12878  00252C  EC4B  F01D         	call	_response	;wreg free
 12879  002530  0100               	movlb	0	; () banked
 12880  002532  6F7F               	movwf	sdc_disk_write@buff& (0+255),b
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;diskio.c: 659: _delay((unsigned long)((1000)*(48000000/4000.0)));
 12884  002534  0E3D               	movlw	61
 12885  002536  0100               	movlb	0	; () banked
 12886  002538  6F75               	movwf	(??_sdc_disk_write+1)& (0+255),b
 12887  00253A  0EE1               	movlw	225
 12888  00253C  6F74               	movwf	??_sdc_disk_write& (0+255),b
 12889  00253E  0E3F               	movlw	63
 12890  002540                     u16717:
 12891  002540  2EE8               	decfsz	wreg,f,c
 12892  002542  D7FE               	bra	u16717
 12893  002544  2F74               	decfsz	??_sdc_disk_write& (0+255),f,b
 12894  002546  D7FC               	bra	u16717
 12895  002548  2F75               	decfsz	(??_sdc_disk_write+1)& (0+255),f,b
 12896  00254A  D7FA               	bra	u16717
 12897  00254C  D000               	nop2	
 12898                           
 12899                           ;diskio.c: 662: if((buff & 0x1F) != 0x05)
 12900  00254E  0100               	movlb	0	; () banked
 12901  002550  517F               	movf	sdc_disk_write@buff& (0+255),w,b
 12902  002552  0B1F               	andlw	31
 12903  002554  0A05               	xorlw	5
 12904  002556  B4D8               	btfsc	status,2,c
 12905  002558  D017               	goto	l959
 12906                           
 12907                           ; BSR set to: 0
 12908                           ;diskio.c: 663: {
 12909                           ;diskio.c: 664: posicao_cursor_lcd(1,0);
 12910  00255A  0E00               	movlw	0
 12911  00255C  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 12912  00255E  0E01               	movlw	1
 12913  002560  EC93  F019         	call	_posicao_cursor_lcd
 12914                           
 12915                           ;diskio.c: 665: escreve_frase_ram_lcd("ERRO ESCRITA");
 12916  002564  0EFF               	movlw	low STR_26
 12917  002566  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 12918  002568  0E61               	movlw	high STR_26
 12919  00256A  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 12920  00256C  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
 12921                           
 12922                           ;diskio.c: 666: _delay((unsigned long)((4000)*(48000000/4000.0)));
 12923  002570  0EF4               	movlw	244
 12924  002572  0100               	movlb	0	; () banked
 12925  002574  6F75               	movwf	(??_sdc_disk_write+1)& (0+255),b
 12926  002576  0E82               	movlw	130
 12927  002578  6F74               	movwf	??_sdc_disk_write& (0+255),b
 12928  00257A  0E05               	movlw	5
 12929  00257C                     u16727:
 12930  00257C  2EE8               	decfsz	wreg,f,c
 12931  00257E  D7FE               	bra	u16727
 12932  002580  2F74               	decfsz	??_sdc_disk_write& (0+255),f,b
 12933  002582  D7FC               	bra	u16727
 12934  002584  2F75               	decfsz	(??_sdc_disk_write+1)& (0+255),f,b
 12935  002586  D7FA               	bra	u16727
 12936  002588                     l959:
 12937                           
 12938                           ;diskio.c: 667: }
 12939                           ;diskio.c: 668: LATBbits.LATB4 = 0;
 12940  002588  988A               	bcf	3978,4,c	;volatile
 12941                           
 12942                           ;diskio.c: 669: LATCbits.LATC7 = 0;
 12943  00258A  9E8B               	bcf	3979,7,c	;volatile
 12944                           
 12945                           ;diskio.c: 670: dummy_clocks(1);
 12946  00258C  0E01               	movlw	1
 12947  00258E  EC0C  F01C         	call	_dummy_clocks
 12948                           
 12949                           ;diskio.c: 671: command(0X4D,0X00000000,0X00);
 12950  002592  0E00               	movlw	0
 12951  002594  6E20               	movwf	command@arg,c
 12952  002596  0E00               	movlw	0
 12953  002598  6E21               	movwf	command@arg+1,c
 12954  00259A  0E00               	movlw	0
 12955  00259C  6E22               	movwf	command@arg+2,c
 12956  00259E  0E00               	movlw	0
 12957  0025A0  6E23               	movwf	command@arg+3,c
 12958  0025A2  0E00               	movlw	0
 12959  0025A4  6E24               	movwf	command@CRC,c
 12960  0025A6  0E4D               	movlw	77
 12961  0025A8  EC00  F01A         	call	_command
 12962                           
 12963                           ;diskio.c: 672: proceed();
 12964  0025AC  EC51  F01D         	call	_proceed	;wreg free
 12965  0025B0                     
 12966                           ;diskio.c: 674: buff = response();
 12967  0025B0  EC4B  F01D         	call	_response	;wreg free
 12968  0025B4  0100               	movlb	0	; () banked
 12969  0025B6  6F7F               	movwf	sdc_disk_write@buff& (0+255),b
 12970                           
 12971                           ; BSR set to: 0
 12972                           ;diskio.c: 676: posicao_cursor_lcd(1,0);
 12973  0025B8  0E00               	movlw	0
 12974  0025BA  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 12975  0025BC  0E01               	movlw	1
 12976  0025BE  EC93  F019         	call	_posicao_cursor_lcd
 12977                           
 12978                           ;diskio.c: 677: escreve_inteiro_lcd(buff);
 12979  0025C2  C07F  F02C         	movff	sdc_disk_write@buff,escreve_inteiro_lcd@valor
 12980  0025C6  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 12981  0025C8  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
 12982                           
 12983                           ;diskio.c: 678: _delay((unsigned long)((30)*(48000000/4000000.0)));
 12984  0025CC  0E78               	movlw	120
 12985  0025CE                     u16737:
 12986  0025CE  2EE8               	decfsz	wreg,f,c
 12987  0025D0  D7FE               	bra	u16737
 12988                           
 12989                           ;diskio.c: 680: }while(buff!=0X00 );
 12990  0025D2  0100               	movlb	0	; () banked
 12991  0025D4  517F               	movf	sdc_disk_write@buff& (0+255),w,b
 12992  0025D6  A4D8               	btfss	status,2,c
 12993  0025D8  D7EB               	goto	l960
 12994                           
 12995                           ; BSR set to: 0
 12996                           ;diskio.c: 685: return res;
 12997                           
 12998                           ; BSR set to: 0
 12999  0025DA  517C               	movf	sdc_disk_write@res& (0+255),w,b
 13000  0025DC  0012               	return	
 13001  0025DE                     __end_of_sdc_disk_write:
 13002                           	opt stack 0
 13003                           tblptru	equ	0xFF8
 13004                           tblptrh	equ	0xFF7
 13005                           tblptrl	equ	0xFF6
 13006                           tablat	equ	0xFF5
 13007                           prodh	equ	0xFF4
 13008                           prodl	equ	0xFF3
 13009                           intcon	equ	0xFF2
 13010                           intcon2	equ	0xFF1
 13011                           intcon3	equ	0xFF0
 13012                           indf0	equ	0xFEF
 13013                           postinc0	equ	0xFEE
 13014                           fsr0h	equ	0xFEA
 13015                           fsr0l	equ	0xFE9
 13016                           wreg	equ	0xFE8
 13017                           indf1	equ	0xFE7
 13018                           postinc1	equ	0xFE6
 13019                           postdec1	equ	0xFE5
 13020                           fsr1h	equ	0xFE2
 13021                           fsr1l	equ	0xFE1
 13022                           indf2	equ	0xFDF
 13023                           postinc2	equ	0xFDE
 13024                           postdec2	equ	0xFDD
 13025                           plusw2	equ	0xFDB
 13026                           fsr2h	equ	0xFDA
 13027                           fsr2l	equ	0xFD9
 13028                           status	equ	0xFD8
 13029                           
 13030 ;; *************** function _disk_read *****************
 13031 ;; Defined at:
 13032 ;;		line 147 in file "bibliotecas/diskio.c"
 13033 ;; Parameters:    Size  Location     Type
 13034 ;;  pdrv            1    wreg     unsigned char 
 13035 ;;  buff            2   32[BANK0 ] PTR unsigned char 
 13036 ;;		 -> NULL(0), fs(544), 
 13037 ;;  sector          4   34[BANK0 ] unsigned long 
 13038 ;;  count           1   38[BANK0 ] unsigned char 
 13039 ;; Auto vars:     Size  Location     Type
 13040 ;;  pdrv            1   41[BANK0 ] unsigned char 
 13041 ;;  result          2   42[BANK0 ] int 
 13042 ;;  res             1   44[BANK0 ] enum E25
 13043 ;; Return value:  Size  Location     Type
 13044 ;;                  1    wreg      enum E25
 13045 ;; Registers used:
 13046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13047 ;; Tracked objects:
 13048 ;;		On entry : 0/0
 13049 ;;		On exit  : 0/0
 13050 ;;		Unchanged: 0/0
 13051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13052 ;;      Params:         0       7       0       0       0       0       0       0       0
 13053 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13054 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13055 ;;      Totals:         0      13       0       0       0       0       0       0       0
 13056 ;;Total ram usage:       13 bytes
 13057 ;; Hardware stack levels used:    1
 13058 ;; Hardware stack levels required when called:    7
 13059 ;; This function calls:
 13060 ;;		_escreve_inteiro_lcd
 13061 ;;		_posicao_cursor_lcd
 13062 ;;		_sdc_disk_read
 13063 ;; This function is called by:
 13064 ;;		_move_window
 13065 ;;		_check_fs
 13066 ;;		_f_read
 13067 ;; This function uses a non-reentrant model
 13068 ;;
 13069                           
 13070                           	psect	text46
 13071  002B32                     __ptext46:
 13072                           	opt stack 0
 13073  002B32                     _disk_read:
 13074                           	opt stack 20
 13075                           
 13076                           ; BSR set to: 0
 13077                           ;incstack = 0
 13078                           ;disk_read@pdrv stored from wreg
 13079  002B32  0100               	movlb	0	; () banked
 13080  002B34  6F89               	movwf	disk_read@pdrv& (0+255),b
 13081                           
 13082                           ;diskio.c: 154: DRESULT res;
 13083                           ;diskio.c: 155: int result;
 13084                           ;diskio.c: 157: switch (pdrv) {
 13085  002B36  D051               	goto	l857
 13086  002B38                     
 13087                           ;diskio.c: 161: result = sdc_disk_read(buff, sector, count);
 13088  002B38  C080  F06D         	movff	disk_read@buff,sdc_disk_read@p_buff
 13089  002B3C  C081  F06E         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 13090  002B40  C082  F06F         	movff	disk_read@sector,sdc_disk_read@sector
 13091  002B44  C083  F070         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 13092  002B48  C084  F071         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 13093  002B4C  C085  F072         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 13094  002B50  C086  F073         	movff	disk_read@count,sdc_disk_read@count
 13095  002B54  ECD3  F00F         	call	_sdc_disk_read	;wreg free
 13096  002B58  0100               	movlb	0	; () banked
 13097  002B5A  6F87               	movwf	??_disk_read& (0+255),b
 13098  002B5C  5187               	movf	??_disk_read& (0+255),w,b
 13099  002B5E  6F8A               	movwf	disk_read@result& (0+255),b
 13100  002B60  6B8B               	clrf	(disk_read@result+1)& (0+255),b
 13101                           
 13102                           ; BSR set to: 0
 13103                           ;diskio.c: 165: res = result;
 13104  002B62  C08A  F08C         	movff	disk_read@result,disk_read@res
 13105                           
 13106                           ; BSR set to: 0
 13107                           ;diskio.c: 167: return res;
 13108  002B66  518C               	movf	disk_read@res& (0+255),w,b
 13109                           
 13110                           ; BSR set to: 0
 13111  002B68  0012               	return	
 13112  002B6A                     
 13113                           ; BSR set to: 0
 13114                           ;diskio.c: 172: result = sdc_disk_read(buff, sector, count);
 13115                           
 13116                           ; BSR set to: 0
 13117  002B6A  C080  F06D         	movff	disk_read@buff,sdc_disk_read@p_buff
 13118  002B6E  C081  F06E         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 13119  002B72  C082  F06F         	movff	disk_read@sector,sdc_disk_read@sector
 13120  002B76  C083  F070         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 13121  002B7A  C084  F071         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 13122  002B7E  C085  F072         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 13123  002B82  C086  F073         	movff	disk_read@count,sdc_disk_read@count
 13124  002B86  ECD3  F00F         	call	_sdc_disk_read	;wreg free
 13125  002B8A  0100               	movlb	0	; () banked
 13126  002B8C  6F87               	movwf	??_disk_read& (0+255),b
 13127  002B8E  5187               	movf	??_disk_read& (0+255),w,b
 13128  002B90  6F8A               	movwf	disk_read@result& (0+255),b
 13129  002B92  6B8B               	clrf	(disk_read@result+1)& (0+255),b
 13130                           
 13131                           ; BSR set to: 0
 13132                           ;diskio.c: 173: posicao_cursor_lcd(1,0);
 13133  002B94  0E00               	movlw	0
 13134  002B96  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 13135  002B98  0E01               	movlw	1
 13136  002B9A  EC93  F019         	call	_posicao_cursor_lcd
 13137                           
 13138                           ;diskio.c: 174: escreve_inteiro_lcd(result);
 13139  002B9E  C08A  F02C         	movff	disk_read@result,escreve_inteiro_lcd@valor
 13140  002BA2  C08B  F02D         	movff	disk_read@result+1,escreve_inteiro_lcd@valor+1
 13141  002BA6  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
 13142                           
 13143                           ;diskio.c: 175: _delay((unsigned long)((2000)*(48000000/4000.0)));
 13144  002BAA  0E7A               	movlw	122
 13145  002BAC  0100               	movlb	0	; () banked
 13146  002BAE  6F88               	movwf	(??_disk_read+1)& (0+255),b
 13147  002BB0  0EC1               	movlw	193
 13148  002BB2  6F87               	movwf	??_disk_read& (0+255),b
 13149  002BB4  0E81               	movlw	129
 13150  002BB6                     u16747:
 13151  002BB6  2EE8               	decfsz	wreg,f,c
 13152  002BB8  D7FE               	bra	u16747
 13153  002BBA  2F87               	decfsz	??_disk_read& (0+255),f,b
 13154  002BBC  D7FC               	bra	u16747
 13155  002BBE  2F88               	decfsz	(??_disk_read+1)& (0+255),f,b
 13156  002BC0  D7FA               	bra	u16747
 13157  002BC2  D000               	nop2	
 13158                           
 13159                           ;diskio.c: 176: res = result;
 13160  002BC4  C08A  F08C         	movff	disk_read@result,disk_read@res
 13161                           
 13162                           ;diskio.c: 178: buff = data_buff;
 13163  002BC8  C0F1  F080         	movff	_data_buff,disk_read@buff
 13164  002BCC  C0F2  F081         	movff	_data_buff+1,disk_read@buff+1
 13165                           
 13166                           ;diskio.c: 179: return res;
 13167  002BD0  0100               	movlb	0	; () banked
 13168  002BD2  518C               	movf	disk_read@res& (0+255),w,b
 13169                           
 13170                           ; BSR set to: 0
 13171  002BD4  0012               	return	
 13172  002BD6                     
 13173                           ; BSR set to: 0
 13174                           ;diskio.c: 188: return res;
 13175                           
 13176                           ; BSR set to: 0
 13177  002BD6  518C               	movf	disk_read@res& (0+255),w,b
 13178                           
 13179                           ; BSR set to: 0
 13180  002BD8  0012               	return	
 13181  002BDA                     l857:
 13182                           
 13183                           ; BSR set to: 0
 13184  002BDA  0100               	movlb	0	; () banked
 13185  002BDC  5189               	movf	disk_read@pdrv& (0+255),w,b
 13186                           
 13187                           ; Switch size 1, requested type "space"
 13188                           ; Number of cases is 3, Range of values is 0 to 2
 13189                           ; switch strategies available:
 13190                           ; Name         Instructions Cycles
 13191                           ; simple_byte           10     6 (average)
 13192                           ;	Chosen strategy is simple_byte
 13193  002BDE  0A00               	xorlw	0	; case 0
 13194  002BE0  B4D8               	btfsc	status,2,c
 13195  002BE2  D7AA               	goto	l858
 13196  002BE4  0A01               	xorlw	1	; case 1
 13197  002BE6  B4D8               	btfsc	status,2,c
 13198  002BE8  D7C0               	goto	l860
 13199  002BEA  0A03               	xorlw	3	; case 2
 13200  002BEC  B4D8               	btfsc	status,2,c
 13201  002BEE  D7F3               	goto	l861
 13202                           
 13203                           ; BSR set to: 0
 13204                           ;diskio.c: 191: return RES_PARERR;
 13205                           
 13206                           ; BSR set to: 0
 13207  002BF0  0E04               	movlw	4
 13208  002BF2  0012               	return	
 13209  002BF4                     __end_of_disk_read:
 13210                           	opt stack 0
 13211                           tblptru	equ	0xFF8
 13212                           tblptrh	equ	0xFF7
 13213                           tblptrl	equ	0xFF6
 13214                           tablat	equ	0xFF5
 13215                           prodh	equ	0xFF4
 13216                           prodl	equ	0xFF3
 13217                           intcon	equ	0xFF2
 13218                           intcon2	equ	0xFF1
 13219                           intcon3	equ	0xFF0
 13220                           indf0	equ	0xFEF
 13221                           postinc0	equ	0xFEE
 13222                           fsr0h	equ	0xFEA
 13223                           fsr0l	equ	0xFE9
 13224                           wreg	equ	0xFE8
 13225                           indf1	equ	0xFE7
 13226                           postinc1	equ	0xFE6
 13227                           postdec1	equ	0xFE5
 13228                           fsr1h	equ	0xFE2
 13229                           fsr1l	equ	0xFE1
 13230                           indf2	equ	0xFDF
 13231                           postinc2	equ	0xFDE
 13232                           postdec2	equ	0xFDD
 13233                           plusw2	equ	0xFDB
 13234                           fsr2h	equ	0xFDA
 13235                           fsr2l	equ	0xFD9
 13236                           status	equ	0xFD8
 13237                           
 13238 ;; *************** function _sdc_disk_read *****************
 13239 ;; Defined at:
 13240 ;;		line 528 in file "bibliotecas/diskio.c"
 13241 ;; Parameters:    Size  Location     Type
 13242 ;;  p_buff          2   13[BANK0 ] PTR unsigned char 
 13243 ;;		 -> NULL(0), fs(544), 
 13244 ;;  sector          4   15[BANK0 ] unsigned long 
 13245 ;;  count           1   19[BANK0 ] unsigned char 
 13246 ;; Auto vars:     Size  Location     Type
 13247 ;;  start_add       4   25[BANK0 ] unsigned long 
 13248 ;;  length          2   29[BANK0 ] int 
 13249 ;;  count1          2    0        int 
 13250 ;;  i               2    0        int 
 13251 ;;  buff            1   31[BANK0 ] unsigned char 
 13252 ;;  ptr             1   24[BANK0 ] unsigned char 
 13253 ;;  res             1    0        enum E25
 13254 ;; Return value:  Size  Location     Type
 13255 ;;                  1    wreg      enum E25
 13256 ;; Registers used:
 13257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13258 ;; Tracked objects:
 13259 ;;		On entry : 0/0
 13260 ;;		On exit  : 0/0
 13261 ;;		Unchanged: 0/0
 13262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13263 ;;      Params:         0       7       0       0       0       0       0       0       0
 13264 ;;      Locals:         0       8       0       0       0       0       0       0       0
 13265 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13266 ;;      Totals:         0      19       0       0       0       0       0       0       0
 13267 ;;Total ram usage:       19 bytes
 13268 ;; Hardware stack levels used:    1
 13269 ;; Hardware stack levels required when called:    6
 13270 ;; This function calls:
 13271 ;;		_command
 13272 ;;		_dummy_clocks
 13273 ;;		_escreve_cmd_lcd
 13274 ;;		_escreve_frase_ram_lcd
 13275 ;;		_escreve_inteiro_lcd
 13276 ;;		_posicao_cursor_lcd
 13277 ;;		_proceed
 13278 ;;		_response
 13279 ;; This function is called by:
 13280 ;;		_disk_read
 13281 ;; This function uses a non-reentrant model
 13282 ;;
 13283                           
 13284                           	psect	text47
 13285  001FA6                     __ptext47:
 13286                           	opt stack 0
 13287  001FA6                     _sdc_disk_read:
 13288                           	opt stack 20
 13289                           
 13290                           ;diskio.c: 535: DRESULT res;
 13291                           ;diskio.c: 536: unsigned char ptr=0X00, buff;
 13292                           
 13293                           ; BSR set to: 0
 13294                           ;incstack = 0
 13295  001FA6  0E00               	movlw	0
 13296  001FA8  0100               	movlb	0	; () banked
 13297  001FAA  6F78               	movwf	sdc_disk_read@ptr& (0+255),b
 13298                           
 13299                           ; BSR set to: 0
 13300                           ;diskio.c: 537: unsigned long int start_add;
 13301                           ;diskio.c: 539: int length,i, count1;
 13302                           ;diskio.c: 541: start_add = sector*512;
 13303  001FAC  C06F  F074         	movff	sdc_disk_read@sector,??_sdc_disk_read
 13304  001FB0  C070  F075         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 13305  001FB4  C071  F076         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 13306  001FB8  C072  F077         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 13307  001FBC  0E09               	movlw	9
 13308  001FBE                     u12095:
 13309  001FBE  90D8               	bcf	status,0,c
 13310  001FC0  3774               	rlcf	??_sdc_disk_read& (0+255),f,b
 13311  001FC2  3775               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 13312  001FC4  3776               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 13313  001FC6  3777               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 13314  001FC8  2EE8               	decfsz	wreg,f,c
 13315  001FCA  D7F9               	goto	u12095
 13316  001FCC  C074  F079         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 13317  001FD0  C075  F07A         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 13318  001FD4  C076  F07B         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 13319  001FD8  C077  F07C         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 13320                           
 13321                           ; BSR set to: 0
 13322                           ;diskio.c: 544: posicao_cursor_lcd(1,0);
 13323  001FDC  0E00               	movlw	0
 13324  001FDE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 13325  001FE0  0E01               	movlw	1
 13326  001FE2  EC93  F019         	call	_posicao_cursor_lcd
 13327                           
 13328                           ;diskio.c: 545: escreve_frase_ram_lcd("LENDO SD");
 13329  001FE6  0E41               	movlw	low STR_23
 13330  001FE8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 13331  001FEA  0E62               	movlw	high STR_23
 13332  001FEC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 13333  001FEE  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
 13334                           
 13335                           ;diskio.c: 548: if(sector != 1)
 13336  001FF2  0100               	movlb	0	; () banked
 13337  001FF4  056F               	decf	sdc_disk_read@sector& (0+255),w,b
 13338  001FF6  1170               	iorwf	(sdc_disk_read@sector+1)& (0+255),w,b
 13339  001FF8  1171               	iorwf	(sdc_disk_read@sector+2)& (0+255),w,b
 13340  001FFA  1172               	iorwf	(sdc_disk_read@sector+3)& (0+255),w,b
 13341  001FFC  B4D8               	btfsc	status,2,c
 13342  001FFE  D01C               	goto	l938
 13343                           
 13344                           ; BSR set to: 0
 13345                           ;diskio.c: 549: {
 13346                           ;diskio.c: 550: dummy_clocks(10);
 13347  002000  0E0A               	movlw	10
 13348  002002  EC0C  F01C         	call	_dummy_clocks
 13349                           
 13350                           ;diskio.c: 551: command(0X52,start_add ,0X00);
 13351  002006  C079  F020         	movff	sdc_disk_read@start_add,command@arg
 13352  00200A  C07A  F021         	movff	sdc_disk_read@start_add+1,command@arg+1
 13353  00200E  C07B  F022         	movff	sdc_disk_read@start_add+2,command@arg+2
 13354  002012  C07C  F023         	movff	sdc_disk_read@start_add+3,command@arg+3
 13355  002016  0E00               	movlw	0
 13356  002018  6E24               	movwf	command@CRC,c
 13357  00201A  0E52               	movlw	82
 13358  00201C  EC00  F01A         	call	_command
 13359                           
 13360                           ;diskio.c: 552: proceed();
 13361  002020  EC51  F01D         	call	_proceed	;wreg free
 13362  002024                     
 13363                           ;diskio.c: 554: buff = response();
 13364  002024  EC4B  F01D         	call	_response	;wreg free
 13365  002028  0100               	movlb	0	; () banked
 13366  00202A  6F7F               	movwf	sdc_disk_read@buff& (0+255),b
 13367                           
 13368                           ; BSR set to: 0
 13369                           ;diskio.c: 555: }while(buff!=0X00);
 13370  00202C  517F               	movf	sdc_disk_read@buff& (0+255),w,b
 13371  00202E  A4D8               	btfss	status,2,c
 13372  002030  D7F9               	goto	l939
 13373                           
 13374                           ; BSR set to: 0
 13375                           ;diskio.c: 556: proceed();
 13376                           
 13377                           ; BSR set to: 0
 13378  002032  EC51  F01D         	call	_proceed	;wreg free
 13379                           
 13380                           ;diskio.c: 557: }
 13381  002036  D02A               	goto	l944
 13382  002038                     l938:
 13383                           
 13384                           ;diskio.c: 558: else
 13385                           ;diskio.c: 559: {
 13386                           ;diskio.c: 560: dummy_clocks(10);
 13387  002038  0E0A               	movlw	10
 13388  00203A  EC0C  F01C         	call	_dummy_clocks
 13389                           
 13390                           ;diskio.c: 561: command(0X51,sector ,0X00);
 13391  00203E  C06F  F020         	movff	sdc_disk_read@sector,command@arg
 13392  002042  C070  F021         	movff	sdc_disk_read@sector+1,command@arg+1
 13393  002046  C071  F022         	movff	sdc_disk_read@sector+2,command@arg+2
 13394  00204A  C072  F023         	movff	sdc_disk_read@sector+3,command@arg+3
 13395  00204E  0E00               	movlw	0
 13396  002050  6E24               	movwf	command@CRC,c
 13397  002052  0E51               	movlw	81
 13398  002054  EC00  F01A         	call	_command
 13399                           
 13400                           ;diskio.c: 562: proceed();
 13401  002058  EC51  F01D         	call	_proceed	;wreg free
 13402  00205C                     
 13403                           ;diskio.c: 564: buff = response();
 13404  00205C  EC4B  F01D         	call	_response	;wreg free
 13405  002060  0100               	movlb	0	; () banked
 13406  002062  6F7F               	movwf	sdc_disk_read@buff& (0+255),b
 13407                           
 13408                           ; BSR set to: 0
 13409                           ;diskio.c: 565: }while(buff!=0X00);
 13410  002064  517F               	movf	sdc_disk_read@buff& (0+255),w,b
 13411  002066  A4D8               	btfss	status,2,c
 13412  002068  D7F9               	goto	l942
 13413                           
 13414                           ; BSR set to: 0
 13415                           ;diskio.c: 566: proceed();
 13416                           
 13417                           ; BSR set to: 0
 13418  00206A  EC51  F01D         	call	_proceed	;wreg free
 13419                           
 13420                           ;diskio.c: 567: }
 13421                           ;diskio.c: 571: while(buff!=0xFE)
 13422  00206E  D00E               	goto	l944
 13423  002070                     
 13424                           ;diskio.c: 572: {
 13425                           ;diskio.c: 573: buff = response();
 13426  002070  EC4B  F01D         	call	_response	;wreg free
 13427  002074  0100               	movlb	0	; () banked
 13428  002076  6F7F               	movwf	sdc_disk_read@buff& (0+255),b
 13429                           
 13430                           ; BSR set to: 0
 13431                           ;diskio.c: 574: posicao_cursor_lcd(1,0);
 13432  002078  0E00               	movlw	0
 13433  00207A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 13434  00207C  0E01               	movlw	1
 13435  00207E  EC93  F019         	call	_posicao_cursor_lcd
 13436                           
 13437                           ;diskio.c: 575: escreve_inteiro_lcd(buff);
 13438  002082  C07F  F02C         	movff	sdc_disk_read@buff,escreve_inteiro_lcd@valor
 13439  002086  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 13440  002088  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
 13441  00208C                     l944:
 13442  00208C  0EFE               	movlw	254
 13443  00208E  0100               	movlb	0	; () banked
 13444  002090  197F               	xorwf	sdc_disk_read@buff& (0+255),w,b
 13445  002092  A4D8               	btfss	status,2,c
 13446  002094  D7ED               	goto	l945
 13447                           
 13448                           ; BSR set to: 0
 13449                           ;diskio.c: 577: }
 13450                           ;diskio.c: 579: length = 0;
 13451                           
 13452                           ; BSR set to: 0
 13453  002096  0E00               	movlw	0
 13454  002098  6F7E               	movwf	(sdc_disk_read@length+1)& (0+255),b
 13455  00209A  0E00               	movlw	0
 13456  00209C  6F7D               	movwf	sdc_disk_read@length& (0+255),b
 13457                           
 13458                           ;diskio.c: 580: while ( length < 512 )
 13459  00209E  D00C               	goto	l947
 13460  0020A0                     
 13461                           ; BSR set to: 0
 13462                           ;diskio.c: 581: {
 13463                           ;diskio.c: 582: p_buff[length] = response();
 13464                           
 13465                           ; BSR set to: 0
 13466  0020A0  517D               	movf	sdc_disk_read@length& (0+255),w,b
 13467  0020A2  256D               	addwf	sdc_disk_read@p_buff& (0+255),w,b
 13468  0020A4  6ED9               	movwf	fsr2l,c
 13469  0020A6  517E               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 13470  0020A8  216E               	addwfc	(sdc_disk_read@p_buff+1)& (0+255),w,b
 13471  0020AA  6EDA               	movwf	fsr2h,c
 13472  0020AC  EC4B  F01D         	call	_response	;wreg free
 13473  0020B0  6EDF               	movwf	indf2,c
 13474                           
 13475                           ;diskio.c: 583: length++;
 13476  0020B2  0100               	movlb	0	; () banked
 13477  0020B4  4B7D               	infsnz	sdc_disk_read@length& (0+255),f,b
 13478  0020B6  2B7E               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 13479  0020B8                     l947:
 13480                           
 13481                           ; BSR set to: 0
 13482                           
 13483                           ; BSR set to: 0
 13484  0020B8  BF7E               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 13485  0020BA  D7F2               	goto	l948
 13486  0020BC  0E02               	movlw	2
 13487  0020BE  5D7E               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 13488  0020C0  A0D8               	btfss	status,0,c
 13489  0020C2  D7EE               	goto	l948
 13490                           
 13491                           ; BSR set to: 0
 13492                           ;diskio.c: 584: }
 13493                           ;diskio.c: 589: length = 0;
 13494                           
 13495                           ; BSR set to: 0
 13496  0020C4  0E00               	movlw	0
 13497  0020C6  6F7E               	movwf	(sdc_disk_read@length+1)& (0+255),b
 13498  0020C8  0E00               	movlw	0
 13499  0020CA  6F7D               	movwf	sdc_disk_read@length& (0+255),b
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;diskio.c: 590: posicao_cursor_lcd(1,0);
 13503  0020CC  0E00               	movlw	0
 13504  0020CE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 13505  0020D0  0E01               	movlw	1
 13506  0020D2  EC93  F019         	call	_posicao_cursor_lcd
 13507                           
 13508                           ;diskio.c: 591: escreve_frase_ram_lcd("comando 4C");
 13509  0020D6  0E17               	movlw	low STR_24
 13510  0020D8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 13511  0020DA  0E62               	movlw	high STR_24
 13512  0020DC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 13513  0020DE  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
 13514                           
 13515                           ;diskio.c: 592: dummy_clocks(10);
 13516  0020E2  0E0A               	movlw	10
 13517  0020E4  EC0C  F01C         	call	_dummy_clocks
 13518                           
 13519                           ;diskio.c: 594: command(0X4C,0X00000000,0X00);
 13520  0020E8  0E00               	movlw	0
 13521  0020EA  6E20               	movwf	command@arg,c
 13522  0020EC  0E00               	movlw	0
 13523  0020EE  6E21               	movwf	command@arg+1,c
 13524  0020F0  0E00               	movlw	0
 13525  0020F2  6E22               	movwf	command@arg+2,c
 13526  0020F4  0E00               	movlw	0
 13527  0020F6  6E23               	movwf	command@arg+3,c
 13528  0020F8  0E00               	movlw	0
 13529  0020FA  6E24               	movwf	command@CRC,c
 13530  0020FC  0E4C               	movlw	76
 13531  0020FE  EC00  F01A         	call	_command
 13532                           
 13533                           ;diskio.c: 595: proceed();
 13534  002102  EC51  F01D         	call	_proceed	;wreg free
 13535  002106                     
 13536                           ;diskio.c: 597: buff = response();
 13537  002106  EC4B  F01D         	call	_response	;wreg free
 13538  00210A  0100               	movlb	0	; () banked
 13539  00210C  6F7F               	movwf	sdc_disk_read@buff& (0+255),b
 13540                           
 13541                           ; BSR set to: 0
 13542                           ;diskio.c: 598: posicao_cursor_lcd(2,0);
 13543  00210E  0E00               	movlw	0
 13544  002110  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 13545  002112  0E02               	movlw	2
 13546  002114  EC93  F019         	call	_posicao_cursor_lcd
 13547                           
 13548                           ;diskio.c: 599: escreve_inteiro_lcd(buff);
 13549  002118  C07F  F02C         	movff	sdc_disk_read@buff,escreve_inteiro_lcd@valor
 13550  00211C  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 13551  00211E  ECCF  F01B         	call	_escreve_inteiro_lcd	;wreg free
 13552                           
 13553                           ;diskio.c: 600: }while(buff!=0xFF);
 13554  002122  0100               	movlb	0	; () banked
 13555  002124  297F               	incf	sdc_disk_read@buff& (0+255),w,b
 13556  002126  A4D8               	btfss	status,2,c
 13557  002128  D7EE               	goto	l950
 13558                           
 13559                           ; BSR set to: 0
 13560                           ;diskio.c: 602: length = 0;
 13561                           
 13562                           ; BSR set to: 0
 13563  00212A  0E00               	movlw	0
 13564  00212C  6F7E               	movwf	(sdc_disk_read@length+1)& (0+255),b
 13565  00212E  0E00               	movlw	0
 13566  002130  6F7D               	movwf	sdc_disk_read@length& (0+255),b
 13567                           
 13568                           ; BSR set to: 0
 13569                           ;diskio.c: 605: escreve_cmd_lcd(0b00000001);
 13570  002132  0E01               	movlw	1
 13571  002134  EC97  F017         	call	_escreve_cmd_lcd
 13572                           
 13573                           ;diskio.c: 606: posicao_cursor_lcd(2,10);
 13574  002138  0E0A               	movlw	10
 13575  00213A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 13576  00213C  0E02               	movlw	2
 13577  00213E  EC93  F019         	call	_posicao_cursor_lcd
 13578                           
 13579                           ;diskio.c: 607: escreve_frase_ram_lcd("saindo");
 13580  002142  0E53               	movlw	low STR_25
 13581  002144  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 13582  002146  0E62               	movlw	high STR_25
 13583  002148  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 13584  00214A  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
 13585                           
 13586                           ;diskio.c: 611: return RES_OK;
 13587  00214E  0E00               	movlw	0
 13588  002150  0012               	return	
 13589  002152                     __end_of_sdc_disk_read:
 13590                           	opt stack 0
 13591                           tblptru	equ	0xFF8
 13592                           tblptrh	equ	0xFF7
 13593                           tblptrl	equ	0xFF6
 13594                           tablat	equ	0xFF5
 13595                           prodh	equ	0xFF4
 13596                           prodl	equ	0xFF3
 13597                           intcon	equ	0xFF2
 13598                           intcon2	equ	0xFF1
 13599                           intcon3	equ	0xFF0
 13600                           indf0	equ	0xFEF
 13601                           postinc0	equ	0xFEE
 13602                           fsr0h	equ	0xFEA
 13603                           fsr0l	equ	0xFE9
 13604                           wreg	equ	0xFE8
 13605                           indf1	equ	0xFE7
 13606                           postinc1	equ	0xFE6
 13607                           postdec1	equ	0xFE5
 13608                           fsr1h	equ	0xFE2
 13609                           fsr1l	equ	0xFE1
 13610                           indf2	equ	0xFDF
 13611                           postinc2	equ	0xFDE
 13612                           postdec2	equ	0xFDD
 13613                           plusw2	equ	0xFDB
 13614                           fsr2h	equ	0xFDA
 13615                           fsr2l	equ	0xFD9
 13616                           status	equ	0xFD8
 13617                           
 13618 ;; *************** function _response *****************
 13619 ;; Defined at:
 13620 ;;		line 61 in file "bibliotecas/SDCard.c"
 13621 ;; Parameters:    Size  Location     Type
 13622 ;;		None
 13623 ;; Auto vars:     Size  Location     Type
 13624 ;;  buff            1   25[COMRAM] unsigned char 
 13625 ;; Return value:  Size  Location     Type
 13626 ;;                  1    wreg      unsigned char 
 13627 ;; Registers used:
 13628 ;;		wreg, status,2, cstack
 13629 ;; Tracked objects:
 13630 ;;		On entry : 0/0
 13631 ;;		On exit  : 0/0
 13632 ;;		Unchanged: 0/0
 13633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13634 ;;      Params:         0       0       0       0       0       0       0       0       0
 13635 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13636 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13637 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13638 ;;Total ram usage:        1 bytes
 13639 ;; Hardware stack levels used:    1
 13640 ;; Hardware stack levels required when called:    3
 13641 ;; This function calls:
 13642 ;;		_ReadSPI_
 13643 ;; This function is called by:
 13644 ;;		_sdc_reset
 13645 ;;		_sdc_disk_initialize
 13646 ;;		_sdc_disk_read
 13647 ;;		_sdc_disk_write
 13648 ;; This function uses a non-reentrant model
 13649 ;;
 13650                           
 13651                           	psect	text48
 13652  003A96                     __ptext48:
 13653                           	opt stack 0
 13654  003A96                     _response:
 13655                           	opt stack 22
 13656                           
 13657                           ;SDCard.c: 63: unsigned char buff;
 13658                           ;SDCard.c: 64: LATBbits.LATB4 = 0;
 13659                           
 13660                           ;incstack = 0
 13661  003A96  988A               	bcf	3978,4,c	;volatile
 13662                           
 13663                           ;SDCard.c: 65: buff= ReadSPI_();
 13664  003A98  EC57  F01D         	call	_ReadSPI_	;wreg free
 13665  003A9C  6E1A               	movwf	response@buff,c
 13666                           
 13667                           ;SDCard.c: 66: return buff;
 13668  003A9E  501A               	movf	response@buff,w,c
 13669  003AA0  0012               	return	
 13670  003AA2                     __end_of_response:
 13671                           	opt stack 0
 13672                           tblptru	equ	0xFF8
 13673                           tblptrh	equ	0xFF7
 13674                           tblptrl	equ	0xFF6
 13675                           tablat	equ	0xFF5
 13676                           prodh	equ	0xFF4
 13677                           prodl	equ	0xFF3
 13678                           intcon	equ	0xFF2
 13679                           intcon2	equ	0xFF1
 13680                           intcon3	equ	0xFF0
 13681                           indf0	equ	0xFEF
 13682                           postinc0	equ	0xFEE
 13683                           fsr0h	equ	0xFEA
 13684                           fsr0l	equ	0xFE9
 13685                           wreg	equ	0xFE8
 13686                           indf1	equ	0xFE7
 13687                           postinc1	equ	0xFE6
 13688                           postdec1	equ	0xFE5
 13689                           fsr1h	equ	0xFE2
 13690                           fsr1l	equ	0xFE1
 13691                           indf2	equ	0xFDF
 13692                           postinc2	equ	0xFDE
 13693                           postdec2	equ	0xFDD
 13694                           plusw2	equ	0xFDB
 13695                           fsr2h	equ	0xFDA
 13696                           fsr2l	equ	0xFD9
 13697                           status	equ	0xFD8
 13698                           
 13699 ;; *************** function _proceed *****************
 13700 ;; Defined at:
 13701 ;;		line 98 in file "bibliotecas/SDCard.c"
 13702 ;; Parameters:    Size  Location     Type
 13703 ;;		None
 13704 ;; Auto vars:     Size  Location     Type
 13705 ;;		None
 13706 ;; Return value:  Size  Location     Type
 13707 ;;                  1    wreg      void 
 13708 ;; Registers used:
 13709 ;;		wreg, cstack
 13710 ;; Tracked objects:
 13711 ;;		On entry : 0/0
 13712 ;;		On exit  : 0/0
 13713 ;;		Unchanged: 0/0
 13714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13715 ;;      Params:         0       0       0       0       0       0       0       0       0
 13716 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13717 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13718 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13719 ;;Total ram usage:        0 bytes
 13720 ;; Hardware stack levels used:    1
 13721 ;; Hardware stack levels required when called:    3
 13722 ;; This function calls:
 13723 ;;		_WriteSPI_
 13724 ;; This function is called by:
 13725 ;;		_SDCard
 13726 ;;		_sdc_reset
 13727 ;;		_sdc_disk_initialize
 13728 ;;		_sdc_disk_read
 13729 ;;		_sdc_disk_write
 13730 ;; This function uses a non-reentrant model
 13731 ;;
 13732                           
 13733                           	psect	text49
 13734  003AA2                     __ptext49:
 13735                           	opt stack 0
 13736  003AA2                     _proceed:
 13737                           	opt stack 26
 13738                           
 13739                           ;SDCard.c: 100: LATBbits.LATB4 = 0;
 13740                           
 13741                           ;incstack = 0
 13742  003AA2  988A               	bcf	3978,4,c	;volatile
 13743                           
 13744                           ;SDCard.c: 101: WriteSPI_(0xFF);
 13745  003AA4  0EFF               	movlw	255
 13746  003AA6  EC29  F01D         	call	_WriteSPI_
 13747                           
 13748                           ;SDCard.c: 102: LATBbits.LATB4 = 1;
 13749  003AAA  888A               	bsf	3978,4,c	;volatile
 13750  003AAC  0012               	return		;funcret
 13751  003AAE                     __end_of_proceed:
 13752                           	opt stack 0
 13753                           tblptru	equ	0xFF8
 13754                           tblptrh	equ	0xFF7
 13755                           tblptrl	equ	0xFF6
 13756                           tablat	equ	0xFF5
 13757                           prodh	equ	0xFF4
 13758                           prodl	equ	0xFF3
 13759                           intcon	equ	0xFF2
 13760                           intcon2	equ	0xFF1
 13761                           intcon3	equ	0xFF0
 13762                           indf0	equ	0xFEF
 13763                           postinc0	equ	0xFEE
 13764                           fsr0h	equ	0xFEA
 13765                           fsr0l	equ	0xFE9
 13766                           wreg	equ	0xFE8
 13767                           indf1	equ	0xFE7
 13768                           postinc1	equ	0xFE6
 13769                           postdec1	equ	0xFE5
 13770                           fsr1h	equ	0xFE2
 13771                           fsr1l	equ	0xFE1
 13772                           indf2	equ	0xFDF
 13773                           postinc2	equ	0xFDE
 13774                           postdec2	equ	0xFDD
 13775                           plusw2	equ	0xFDB
 13776                           fsr2h	equ	0xFDA
 13777                           fsr2l	equ	0xFD9
 13778                           status	equ	0xFD8
 13779                           
 13780 ;; *************** function _escreve_inteiro_lcd *****************
 13781 ;; Defined at:
 13782 ;;		line 376 in file "bibliotecas/display_lcd.c"
 13783 ;; Parameters:    Size  Location     Type
 13784 ;;  valor           2   43[COMRAM] int 
 13785 ;; Auto vars:     Size  Location     Type
 13786 ;;  texto           7    6[BANK0 ] unsigned char [7]
 13787 ;; Return value:  Size  Location     Type
 13788 ;;                  1    wreg      void 
 13789 ;; Registers used:
 13790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13791 ;; Tracked objects:
 13792 ;;		On entry : 0/0
 13793 ;;		On exit  : 0/0
 13794 ;;		Unchanged: 0/0
 13795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13796 ;;      Params:         2       0       0       0       0       0       0       0       0
 13797 ;;      Locals:         0       7       0       0       0       0       0       0       0
 13798 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13799 ;;      Totals:         2       7       0       0       0       0       0       0       0
 13800 ;;Total ram usage:        9 bytes
 13801 ;; Hardware stack levels used:    1
 13802 ;; Hardware stack levels required when called:    5
 13803 ;; This function calls:
 13804 ;;		_escreve_frase_ram_lcd
 13805 ;;		_itoa
 13806 ;; This function is called by:
 13807 ;;		_SDCard
 13808 ;;		_disk_read
 13809 ;;		_sdc_reset
 13810 ;;		_sdc_disk_initialize
 13811 ;;		_sdc_disk_read
 13812 ;;		_sdc_disk_write
 13813 ;;		_auto_mount
 13814 ;;		_escreve_float_lcd
 13815 ;; This function uses a non-reentrant model
 13816 ;;
 13817                           
 13818                           	psect	text50
 13819  00379E                     __ptext50:
 13820                           	opt stack 0
 13821  00379E                     _escreve_inteiro_lcd:
 13822                           	opt stack 20
 13823                           
 13824                           ;display_lcd.c: 378: char texto[7] = "000000";
 13825                           
 13826                           ;incstack = 0
 13827  00379E  EE21  F0F2         	lfsr	2,escreve_inteiro_lcd@F3966
 13828  0037A2  EE10  F066         	lfsr	1,escreve_inteiro_lcd@texto
 13829  0037A6  0E06               	movlw	6
 13830  0037A8                     u12081:
 13831  0037A8  CFDB FFE3          	movff	plusw2,plusw1
 13832  0037AC  06E8               	decf	wreg,f,c
 13833  0037AE  E2FC               	bc	u12081
 13834                           
 13835                           ;display_lcd.c: 379: itoa(texto,valor, 10);
 13836  0037B0  0E66               	movlw	low escreve_inteiro_lcd@texto
 13837  0037B2  0100               	movlb	0	; () banked
 13838  0037B4  6F60               	movwf	itoa@buf& (0+255),b
 13839  0037B6  0E00               	movlw	high escreve_inteiro_lcd@texto
 13840  0037B8  6F61               	movwf	(itoa@buf+1)& (0+255),b
 13841  0037BA  C02C  F062         	movff	escreve_inteiro_lcd@valor,itoa@val
 13842  0037BE  C02D  F063         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
 13843  0037C2  0E00               	movlw	0
 13844  0037C4  6F65               	movwf	(itoa@base+1)& (0+255),b
 13845  0037C6  0E0A               	movlw	10
 13846  0037C8  6F64               	movwf	itoa@base& (0+255),b
 13847  0037CA  EC4E  F01B         	call	_itoa	;wreg free
 13848                           
 13849                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
 13850  0037CE  0E66               	movlw	low escreve_inteiro_lcd@texto
 13851  0037D0  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 13852  0037D2  0E00               	movlw	high escreve_inteiro_lcd@texto
 13853  0037D4  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 13854  0037D6  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
 13855  0037DA  0012               	return		;funcret
 13856  0037DC                     __end_of_escreve_inteiro_lcd:
 13857                           	opt stack 0
 13858                           tblptru	equ	0xFF8
 13859                           tblptrh	equ	0xFF7
 13860                           tblptrl	equ	0xFF6
 13861                           tablat	equ	0xFF5
 13862                           prodh	equ	0xFF4
 13863                           prodl	equ	0xFF3
 13864                           intcon	equ	0xFF2
 13865                           intcon2	equ	0xFF1
 13866                           intcon3	equ	0xFF0
 13867                           indf0	equ	0xFEF
 13868                           postinc0	equ	0xFEE
 13869                           fsr0h	equ	0xFEA
 13870                           fsr0l	equ	0xFE9
 13871                           wreg	equ	0xFE8
 13872                           indf1	equ	0xFE7
 13873                           postinc1	equ	0xFE6
 13874                           postdec1	equ	0xFE5
 13875                           plusw1	equ	0xFE3
 13876                           fsr1h	equ	0xFE2
 13877                           fsr1l	equ	0xFE1
 13878                           indf2	equ	0xFDF
 13879                           postinc2	equ	0xFDE
 13880                           postdec2	equ	0xFDD
 13881                           plusw2	equ	0xFDB
 13882                           fsr2h	equ	0xFDA
 13883                           fsr2l	equ	0xFD9
 13884                           status	equ	0xFD8
 13885                           
 13886 ;; *************** function _itoa *****************
 13887 ;; Defined at:
 13888 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 13889 ;; Parameters:    Size  Location     Type
 13890 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 13891 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 13892 ;;  val             2    2[BANK0 ] int 
 13893 ;;  base            2    4[BANK0 ] int 
 13894 ;; Auto vars:     Size  Location     Type
 13895 ;;  cp              2   41[COMRAM] PTR unsigned char 
 13896 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 13897 ;; Return value:  Size  Location     Type
 13898 ;;                  2    0[BANK0 ] PTR unsigned char 
 13899 ;; Registers used:
 13900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13901 ;; Tracked objects:
 13902 ;;		On entry : 0/0
 13903 ;;		On exit  : 0/0
 13904 ;;		Unchanged: 0/0
 13905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13906 ;;      Params:         0       6       0       0       0       0       0       0       0
 13907 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13908 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13909 ;;      Totals:         2       6       0       0       0       0       0       0       0
 13910 ;;Total ram usage:        8 bytes
 13911 ;; Hardware stack levels used:    1
 13912 ;; Hardware stack levels required when called:    4
 13913 ;; This function calls:
 13914 ;;		_utoa
 13915 ;; This function is called by:
 13916 ;;		_escreve_inteiro_lcd
 13917 ;;		_escreve_inteiro_uart
 13918 ;; This function uses a non-reentrant model
 13919 ;;
 13920                           
 13921                           	psect	text51
 13922  00369C                     __ptext51:
 13923                           	opt stack 0
 13924  00369C                     _itoa:
 13925                           	opt stack 20
 13926                           
 13927                           ;incstack = 0
 13928  00369C  C060  F02A         	movff	itoa@buf,itoa@cp
 13929  0036A0  C061  F02B         	movff	itoa@buf+1,itoa@cp+1
 13930  0036A4  0100               	movlb	0	; () banked
 13931  0036A6  AF63               	btfss	(itoa@val+1)& (0+255),7,b
 13932  0036A8  D00C               	goto	l2023
 13933                           
 13934                           ; BSR set to: 0
 13935  0036AA  C060  FFD9         	movff	itoa@buf,fsr2l
 13936  0036AE  C061  FFDA         	movff	itoa@buf+1,fsr2h
 13937  0036B2  0E2D               	movlw	45
 13938  0036B4  6EDF               	movwf	indf2,c
 13939                           
 13940                           ; BSR set to: 0
 13941  0036B6  4B60               	infsnz	itoa@buf& (0+255),f,b
 13942  0036B8  2B61               	incf	(itoa@buf+1)& (0+255),f,b
 13943                           
 13944                           ; BSR set to: 0
 13945  0036BA  6D62               	negf	itoa@val& (0+255),b
 13946  0036BC  1F63               	comf	(itoa@val+1)& (0+255),f,b
 13947  0036BE  B0D8               	btfsc	status,0,c
 13948  0036C0  2B63               	incf	(itoa@val+1)& (0+255),f,b
 13949  0036C2                     l2023:
 13950                           
 13951                           ; BSR set to: 0
 13952                           
 13953                           ; BSR set to: 0
 13954  0036C2  C060  F021         	movff	itoa@buf,utoa@buf
 13955  0036C6  C061  F022         	movff	itoa@buf+1,utoa@buf+1
 13956  0036CA  C062  F023         	movff	itoa@val,utoa@val
 13957  0036CE  C063  F024         	movff	itoa@val+1,utoa@val+1
 13958  0036D2  C064  F025         	movff	itoa@base,utoa@base
 13959  0036D6  C065  F026         	movff	itoa@base+1,utoa@base+1
 13960  0036DA  ECA8  F016         	call	_utoa	;wreg free
 13961  0036DE  0012               	return	
 13962  0036E0                     __end_of_itoa:
 13963                           	opt stack 0
 13964                           tblptru	equ	0xFF8
 13965                           tblptrh	equ	0xFF7
 13966                           tblptrl	equ	0xFF6
 13967                           tablat	equ	0xFF5
 13968                           prodh	equ	0xFF4
 13969                           prodl	equ	0xFF3
 13970                           intcon	equ	0xFF2
 13971                           intcon2	equ	0xFF1
 13972                           intcon3	equ	0xFF0
 13973                           indf0	equ	0xFEF
 13974                           postinc0	equ	0xFEE
 13975                           fsr0h	equ	0xFEA
 13976                           fsr0l	equ	0xFE9
 13977                           wreg	equ	0xFE8
 13978                           indf1	equ	0xFE7
 13979                           postinc1	equ	0xFE6
 13980                           postdec1	equ	0xFE5
 13981                           plusw1	equ	0xFE3
 13982                           fsr1h	equ	0xFE2
 13983                           fsr1l	equ	0xFE1
 13984                           indf2	equ	0xFDF
 13985                           postinc2	equ	0xFDE
 13986                           postdec2	equ	0xFDD
 13987                           plusw2	equ	0xFDB
 13988                           fsr2h	equ	0xFDA
 13989                           fsr2l	equ	0xFD9
 13990                           status	equ	0xFD8
 13991                           
 13992 ;; *************** function _utoa *****************
 13993 ;; Defined at:
 13994 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 13995 ;; Parameters:    Size  Location     Type
 13996 ;;  buf             2   32[COMRAM] PTR unsigned char 
 13997 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 13998 ;;  val             2   34[COMRAM] unsigned int 
 13999 ;;  base            2   36[COMRAM] int 
 14000 ;; Auto vars:     Size  Location     Type
 14001 ;;  v               2   38[COMRAM] unsigned int 
 14002 ;;  c               1   40[COMRAM] unsigned char 
 14003 ;; Return value:  Size  Location     Type
 14004 ;;                  2   32[COMRAM] PTR unsigned char 
 14005 ;; Registers used:
 14006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14007 ;; Tracked objects:
 14008 ;;		On entry : 0/0
 14009 ;;		On exit  : 0/0
 14010 ;;		Unchanged: 0/0
 14011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14012 ;;      Params:         6       0       0       0       0       0       0       0       0
 14013 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14014 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14015 ;;      Totals:         9       0       0       0       0       0       0       0       0
 14016 ;;Total ram usage:        9 bytes
 14017 ;; Hardware stack levels used:    1
 14018 ;; Hardware stack levels required when called:    3
 14019 ;; This function calls:
 14020 ;;		___lwdiv
 14021 ;;		___lwmod
 14022 ;; This function is called by:
 14023 ;;		_itoa
 14024 ;; This function uses a non-reentrant model
 14025 ;;
 14026                           
 14027                           	psect	text52
 14028  002D50                     __ptext52:
 14029                           	opt stack 0
 14030  002D50                     _utoa:
 14031                           	opt stack 20
 14032                           
 14033                           ;incstack = 0
 14034  002D50  C023  F027         	movff	utoa@val,utoa@v
 14035  002D54  C024  F028         	movff	utoa@val+1,utoa@v+1
 14036  002D58  C027  F01A         	movff	utoa@v,___lwdiv@dividend
 14037  002D5C  C028  F01B         	movff	utoa@v+1,___lwdiv@dividend+1
 14038  002D60  C025  F01C         	movff	utoa@base,___lwdiv@divisor
 14039  002D64  C026  F01D         	movff	utoa@base+1,___lwdiv@divisor+1
 14040  002D68  ECB3  F01A         	call	___lwdiv	;wreg free
 14041  002D6C  C01A  F027         	movff	?___lwdiv,utoa@v
 14042  002D70  C01B  F028         	movff	?___lwdiv+1,utoa@v+1
 14043  002D74  4A21               	infsnz	utoa@buf,f,c
 14044  002D76  2A22               	incf	utoa@buf+1,f,c
 14045  002D78  5027               	movf	utoa@v,w,c
 14046  002D7A  1028               	iorwf	utoa@v+1,w,c
 14047  002D7C  A4D8               	btfss	status,2,c
 14048  002D7E  D7EC               	goto	l2027
 14049  002D80  C021  FFD9         	movff	utoa@buf,fsr2l
 14050  002D84  C022  FFDA         	movff	utoa@buf+1,fsr2h
 14051  002D88  0E00               	movlw	0
 14052  002D8A  6EDF               	movwf	indf2,c
 14053  002D8C  0621               	decf	utoa@buf,f,c
 14054  002D8E  A0D8               	btfss	status,0,c
 14055  002D90  0622               	decf	utoa@buf+1,f,c
 14056  002D92  C023  F01A         	movff	utoa@val,___lwmod@dividend
 14057  002D96  C024  F01B         	movff	utoa@val+1,___lwmod@dividend+1
 14058  002D9A  C025  F01C         	movff	utoa@base,___lwmod@divisor
 14059  002D9E  C026  F01D         	movff	utoa@base+1,___lwmod@divisor+1
 14060  002DA2  EC70  F01B         	call	___lwmod	;wreg free
 14061  002DA6  501A               	movf	?___lwmod,w,c
 14062  002DA8  6E29               	movwf	utoa@c,c
 14063  002DAA  C023  F01A         	movff	utoa@val,___lwdiv@dividend
 14064  002DAE  C024  F01B         	movff	utoa@val+1,___lwdiv@dividend+1
 14065  002DB2  C025  F01C         	movff	utoa@base,___lwdiv@divisor
 14066  002DB6  C026  F01D         	movff	utoa@base+1,___lwdiv@divisor+1
 14067  002DBA  ECB3  F01A         	call	___lwdiv	;wreg free
 14068  002DBE  C01A  F023         	movff	?___lwdiv,utoa@val
 14069  002DC2  C01B  F024         	movff	?___lwdiv+1,utoa@val+1
 14070  002DC6  0E09               	movlw	9
 14071  002DC8  6429               	cpfsgt	utoa@c,c
 14072  002DCA  D002               	goto	l2030
 14073  002DCC  0E07               	movlw	7
 14074  002DCE  2629               	addwf	utoa@c,f,c
 14075  002DD0                     l2030:
 14076  002DD0  0E30               	movlw	48
 14077  002DD2  2629               	addwf	utoa@c,f,c
 14078  002DD4  C021  FFD9         	movff	utoa@buf,fsr2l
 14079  002DD8  C022  FFDA         	movff	utoa@buf+1,fsr2h
 14080  002DDC  C029  FFDF         	movff	utoa@c,indf2
 14081  002DE0  0621               	decf	utoa@buf,f,c
 14082  002DE2  A0D8               	btfss	status,0,c
 14083  002DE4  0622               	decf	utoa@buf+1,f,c
 14084  002DE6  5023               	movf	utoa@val,w,c
 14085  002DE8  1024               	iorwf	utoa@val+1,w,c
 14086  002DEA  A4D8               	btfss	status,2,c
 14087  002DEC  D7D2               	goto	l2029
 14088                           
 14089                           ;	Return value of _utoa is never used
 14090  002DEE  4A21               	infsnz	utoa@buf,f,c
 14091  002DF0  2A22               	incf	utoa@buf+1,f,c
 14092  002DF2  0012               	return	
 14093  002DF4                     __end_of_utoa:
 14094                           	opt stack 0
 14095                           tblptru	equ	0xFF8
 14096                           tblptrh	equ	0xFF7
 14097                           tblptrl	equ	0xFF6
 14098                           tablat	equ	0xFF5
 14099                           prodh	equ	0xFF4
 14100                           prodl	equ	0xFF3
 14101                           intcon	equ	0xFF2
 14102                           intcon2	equ	0xFF1
 14103                           intcon3	equ	0xFF0
 14104                           indf0	equ	0xFEF
 14105                           postinc0	equ	0xFEE
 14106                           fsr0h	equ	0xFEA
 14107                           fsr0l	equ	0xFE9
 14108                           wreg	equ	0xFE8
 14109                           indf1	equ	0xFE7
 14110                           postinc1	equ	0xFE6
 14111                           postdec1	equ	0xFE5
 14112                           plusw1	equ	0xFE3
 14113                           fsr1h	equ	0xFE2
 14114                           fsr1l	equ	0xFE1
 14115                           indf2	equ	0xFDF
 14116                           postinc2	equ	0xFDE
 14117                           postdec2	equ	0xFDD
 14118                           plusw2	equ	0xFDB
 14119                           fsr2h	equ	0xFDA
 14120                           fsr2l	equ	0xFD9
 14121                           status	equ	0xFD8
 14122                           
 14123 ;; *************** function ___lwmod *****************
 14124 ;; Defined at:
 14125 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 14126 ;; Parameters:    Size  Location     Type
 14127 ;;  dividend        2   25[COMRAM] unsigned int 
 14128 ;;  divisor         2   27[COMRAM] unsigned int 
 14129 ;; Auto vars:     Size  Location     Type
 14130 ;;  counter         1   29[COMRAM] unsigned char 
 14131 ;; Return value:  Size  Location     Type
 14132 ;;                  2   25[COMRAM] unsigned int 
 14133 ;; Registers used:
 14134 ;;		wreg, status,2, status,0
 14135 ;; Tracked objects:
 14136 ;;		On entry : 0/0
 14137 ;;		On exit  : 0/0
 14138 ;;		Unchanged: 0/0
 14139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14140 ;;      Params:         4       0       0       0       0       0       0       0       0
 14141 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14142 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14143 ;;      Totals:         5       0       0       0       0       0       0       0       0
 14144 ;;Total ram usage:        5 bytes
 14145 ;; Hardware stack levels used:    1
 14146 ;; Hardware stack levels required when called:    2
 14147 ;; This function calls:
 14148 ;;		Nothing
 14149 ;; This function is called by:
 14150 ;;		_utoa
 14151 ;;		_converte_inteiro_matriz
 14152 ;; This function uses a non-reentrant model
 14153 ;;
 14154                           
 14155                           	psect	text53
 14156  0036E0                     __ptext53:
 14157                           	opt stack 0
 14158  0036E0                     ___lwmod:
 14159                           	opt stack 20
 14160                           
 14161                           ;incstack = 0
 14162  0036E0  501C               	movf	___lwmod@divisor,w,c
 14163  0036E2  101D               	iorwf	___lwmod@divisor+1,w,c
 14164  0036E4  B4D8               	btfsc	status,2,c
 14165  0036E6  D018               	goto	l2125
 14166  0036E8  0E01               	movlw	1
 14167  0036EA  6E1E               	movwf	___lwmod@counter,c
 14168  0036EC  D004               	goto	l2120
 14169  0036EE  90D8               	bcf	status,0,c
 14170  0036F0  361C               	rlcf	___lwmod@divisor,f,c
 14171  0036F2  361D               	rlcf	___lwmod@divisor+1,f,c
 14172  0036F4  2A1E               	incf	___lwmod@counter,f,c
 14173  0036F6                     l2120:
 14174  0036F6  AE1D               	btfss	___lwmod@divisor+1,7,c
 14175  0036F8  D7FA               	goto	l2121
 14176  0036FA                     u11660:
 14177  0036FA  501C               	movf	___lwmod@divisor,w,c
 14178  0036FC  5C1A               	subwf	___lwmod@dividend,w,c
 14179  0036FE  501D               	movf	___lwmod@divisor+1,w,c
 14180  003700  581B               	subwfb	___lwmod@dividend+1,w,c
 14181  003702  A0D8               	btfss	status,0,c
 14182  003704  D004               	goto	l2124
 14183  003706  501C               	movf	___lwmod@divisor,w,c
 14184  003708  5E1A               	subwf	___lwmod@dividend,f,c
 14185  00370A  501D               	movf	___lwmod@divisor+1,w,c
 14186  00370C  5A1B               	subwfb	___lwmod@dividend+1,f,c
 14187  00370E                     l2124:
 14188  00370E  90D8               	bcf	status,0,c
 14189  003710  321D               	rrcf	___lwmod@divisor+1,f,c
 14190  003712  321C               	rrcf	___lwmod@divisor,f,c
 14191  003714  2E1E               	decfsz	___lwmod@counter,f,c
 14192  003716  D7F1               	goto	u11660
 14193  003718                     l2125:
 14194  003718  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 14195  00371C  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 14196  003720  0012               	return		;funcret
 14197  003722                     __end_of___lwmod:
 14198                           	opt stack 0
 14199                           tblptru	equ	0xFF8
 14200                           tblptrh	equ	0xFF7
 14201                           tblptrl	equ	0xFF6
 14202                           tablat	equ	0xFF5
 14203                           prodh	equ	0xFF4
 14204                           prodl	equ	0xFF3
 14205                           intcon	equ	0xFF2
 14206                           intcon2	equ	0xFF1
 14207                           intcon3	equ	0xFF0
 14208                           indf0	equ	0xFEF
 14209                           postinc0	equ	0xFEE
 14210                           fsr0h	equ	0xFEA
 14211                           fsr0l	equ	0xFE9
 14212                           wreg	equ	0xFE8
 14213                           indf1	equ	0xFE7
 14214                           postinc1	equ	0xFE6
 14215                           postdec1	equ	0xFE5
 14216                           plusw1	equ	0xFE3
 14217                           fsr1h	equ	0xFE2
 14218                           fsr1l	equ	0xFE1
 14219                           indf2	equ	0xFDF
 14220                           postinc2	equ	0xFDE
 14221                           postdec2	equ	0xFDD
 14222                           plusw2	equ	0xFDB
 14223                           fsr2h	equ	0xFDA
 14224                           fsr2l	equ	0xFD9
 14225                           status	equ	0xFD8
 14226                           
 14227 ;; *************** function ___lwdiv *****************
 14228 ;; Defined at:
 14229 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 14230 ;; Parameters:    Size  Location     Type
 14231 ;;  dividend        2   25[COMRAM] unsigned int 
 14232 ;;  divisor         2   27[COMRAM] unsigned int 
 14233 ;; Auto vars:     Size  Location     Type
 14234 ;;  quotient        2   30[COMRAM] unsigned int 
 14235 ;;  counter         1   29[COMRAM] unsigned char 
 14236 ;; Return value:  Size  Location     Type
 14237 ;;                  2   25[COMRAM] unsigned int 
 14238 ;; Registers used:
 14239 ;;		wreg, status,2, status,0
 14240 ;; Tracked objects:
 14241 ;;		On entry : 0/0
 14242 ;;		On exit  : 0/0
 14243 ;;		Unchanged: 0/0
 14244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14245 ;;      Params:         4       0       0       0       0       0       0       0       0
 14246 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14247 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14248 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14249 ;;Total ram usage:        7 bytes
 14250 ;; Hardware stack levels used:    1
 14251 ;; Hardware stack levels required when called:    2
 14252 ;; This function calls:
 14253 ;;		Nothing
 14254 ;; This function is called by:
 14255 ;;		_utoa
 14256 ;;		_converte_inteiro_matriz
 14257 ;; This function uses a non-reentrant model
 14258 ;;
 14259                           
 14260                           	psect	text54
 14261  003566                     __ptext54:
 14262                           	opt stack 0
 14263  003566                     ___lwdiv:
 14264                           	opt stack 20
 14265                           
 14266                           ;incstack = 0
 14267  003566  0E00               	movlw	0
 14268  003568  6E20               	movwf	___lwdiv@quotient+1,c
 14269  00356A  0E00               	movlw	0
 14270  00356C  6E1F               	movwf	___lwdiv@quotient,c
 14271  00356E  501C               	movf	___lwdiv@divisor,w,c
 14272  003570  101D               	iorwf	___lwdiv@divisor+1,w,c
 14273  003572  B4D8               	btfsc	status,2,c
 14274  003574  D01C               	goto	l2115
 14275  003576  0E01               	movlw	1
 14276  003578  6E1E               	movwf	___lwdiv@counter,c
 14277  00357A  D004               	goto	l2110
 14278  00357C  90D8               	bcf	status,0,c
 14279  00357E  361C               	rlcf	___lwdiv@divisor,f,c
 14280  003580  361D               	rlcf	___lwdiv@divisor+1,f,c
 14281  003582  2A1E               	incf	___lwdiv@counter,f,c
 14282  003584                     l2110:
 14283  003584  AE1D               	btfss	___lwdiv@divisor+1,7,c
 14284  003586  D7FA               	goto	l2111
 14285  003588                     u11630:
 14286  003588  90D8               	bcf	status,0,c
 14287  00358A  361F               	rlcf	___lwdiv@quotient,f,c
 14288  00358C  3620               	rlcf	___lwdiv@quotient+1,f,c
 14289  00358E  501C               	movf	___lwdiv@divisor,w,c
 14290  003590  5C1A               	subwf	___lwdiv@dividend,w,c
 14291  003592  501D               	movf	___lwdiv@divisor+1,w,c
 14292  003594  581B               	subwfb	___lwdiv@dividend+1,w,c
 14293  003596  A0D8               	btfss	status,0,c
 14294  003598  D005               	goto	l2114
 14295  00359A  501C               	movf	___lwdiv@divisor,w,c
 14296  00359C  5E1A               	subwf	___lwdiv@dividend,f,c
 14297  00359E  501D               	movf	___lwdiv@divisor+1,w,c
 14298  0035A0  5A1B               	subwfb	___lwdiv@dividend+1,f,c
 14299  0035A2  801F               	bsf	___lwdiv@quotient,0,c
 14300  0035A4                     l2114:
 14301  0035A4  90D8               	bcf	status,0,c
 14302  0035A6  321D               	rrcf	___lwdiv@divisor+1,f,c
 14303  0035A8  321C               	rrcf	___lwdiv@divisor,f,c
 14304  0035AA  2E1E               	decfsz	___lwdiv@counter,f,c
 14305  0035AC  D7ED               	goto	u11630
 14306  0035AE                     l2115:
 14307  0035AE  C01F  F01A         	movff	___lwdiv@quotient,?___lwdiv
 14308  0035B2  C020  F01B         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14309  0035B6  0012               	return		;funcret
 14310  0035B8                     __end_of___lwdiv:
 14311                           	opt stack 0
 14312                           tblptru	equ	0xFF8
 14313                           tblptrh	equ	0xFF7
 14314                           tblptrl	equ	0xFF6
 14315                           tablat	equ	0xFF5
 14316                           prodh	equ	0xFF4
 14317                           prodl	equ	0xFF3
 14318                           intcon	equ	0xFF2
 14319                           intcon2	equ	0xFF1
 14320                           intcon3	equ	0xFF0
 14321                           indf0	equ	0xFEF
 14322                           postinc0	equ	0xFEE
 14323                           fsr0h	equ	0xFEA
 14324                           fsr0l	equ	0xFE9
 14325                           wreg	equ	0xFE8
 14326                           indf1	equ	0xFE7
 14327                           postinc1	equ	0xFE6
 14328                           postdec1	equ	0xFE5
 14329                           plusw1	equ	0xFE3
 14330                           fsr1h	equ	0xFE2
 14331                           fsr1l	equ	0xFE1
 14332                           indf2	equ	0xFDF
 14333                           postinc2	equ	0xFDE
 14334                           postdec2	equ	0xFDD
 14335                           plusw2	equ	0xFDB
 14336                           fsr2h	equ	0xFDA
 14337                           fsr2l	equ	0xFD9
 14338                           status	equ	0xFD8
 14339                           
 14340 ;; *************** function _escreve_cmd_lcd *****************
 14341 ;; Defined at:
 14342 ;;		line 162 in file "bibliotecas/display_lcd.c"
 14343 ;; Parameters:    Size  Location     Type
 14344 ;;  comando         1    wreg     unsigned char 
 14345 ;; Auto vars:     Size  Location     Type
 14346 ;;  comando         1   27[COMRAM] unsigned char 
 14347 ;; Return value:  Size  Location     Type
 14348 ;;                  1    wreg      void 
 14349 ;; Registers used:
 14350 ;;		wreg, status,2, status,0, cstack
 14351 ;; Tracked objects:
 14352 ;;		On entry : 0/0
 14353 ;;		On exit  : 0/0
 14354 ;;		Unchanged: 0/0
 14355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14356 ;;      Params:         0       0       0       0       0       0       0       0       0
 14357 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14358 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14359 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14360 ;;Total ram usage:        1 bytes
 14361 ;; Hardware stack levels used:    1
 14362 ;; Hardware stack levels required when called:    3
 14363 ;; This function calls:
 14364 ;;		_delay
 14365 ;; This function is called by:
 14366 ;;		_mensagem_inicial
 14367 ;;		_inicializa_SPI
 14368 ;;		_init_lcd
 14369 ;;		_sdc_disk_initialize
 14370 ;;		_sdc_disk_read
 14371 ;;		_gps
 14372 ;;		_leitura_chave
 14373 ;;		_cria_caractere_lcd
 14374 ;; This function uses a non-reentrant model
 14375 ;;
 14376                           
 14377                           	psect	text55
 14378  002F2E                     __ptext55:
 14379                           	opt stack 0
 14380  002F2E                     _escreve_cmd_lcd:
 14381                           	opt stack 26
 14382                           
 14383                           ;incstack = 0
 14384                           ;escreve_cmd_lcd@comando stored from wreg
 14385  002F2E  6E1C               	movwf	escreve_cmd_lcd@comando,c
 14386                           
 14387                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
 14388  002F30  9483               	bcf	3971,2,c	;volatile
 14389                           
 14390                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
 14391  002F32  9283               	bcf	3971,1,c	;volatile
 14392                           
 14393                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
 14394  002F34  9083               	bcf	3971,0,c	;volatile
 14395                           
 14396                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
 14397  002F36  A81C               	btfss	escreve_cmd_lcd@comando,4,c
 14398  002F38  D002               	goto	l475
 14399  002F3A  8883               	bsf	3971,4,c	;volatile
 14400  002F3C  D001               	goto	l476
 14401  002F3E                     l475:
 14402                           
 14403                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
 14404  002F3E  9883               	bcf	3971,4,c	;volatile
 14405  002F40                     l476:
 14406                           
 14407                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
 14408  002F40  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
 14409  002F42  D002               	goto	l477
 14410  002F44  8A83               	bsf	3971,5,c	;volatile
 14411  002F46  D001               	goto	l478
 14412  002F48                     l477:
 14413                           
 14414                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
 14415  002F48  9A83               	bcf	3971,5,c	;volatile
 14416  002F4A                     l478:
 14417                           
 14418                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
 14419  002F4A  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
 14420  002F4C  D002               	goto	l479
 14421  002F4E  8C83               	bsf	3971,6,c	;volatile
 14422  002F50  D001               	goto	l480
 14423  002F52                     l479:
 14424                           
 14425                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
 14426  002F52  9C83               	bcf	3971,6,c	;volatile
 14427  002F54                     l480:
 14428                           
 14429                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
 14430  002F54  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
 14431  002F56  D002               	goto	l481
 14432  002F58  8E83               	bsf	3971,7,c	;volatile
 14433  002F5A  D001               	goto	l482
 14434  002F5C                     l481:
 14435                           
 14436                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
 14437  002F5C  9E83               	bcf	3971,7,c	;volatile
 14438  002F5E                     l482:
 14439                           
 14440                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
 14441  002F5E  8083               	bsf	3971,0,c	;volatile
 14442                           
 14443                           ;display_lcd.c: 181: delay();
 14444  002F60  ECC8  F01C         	call	_delay	;wreg free
 14445                           
 14446                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
 14447  002F64  9083               	bcf	3971,0,c	;volatile
 14448                           
 14449                           ;display_lcd.c: 183: delay();
 14450  002F66  ECC8  F01C         	call	_delay	;wreg free
 14451                           
 14452                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
 14453  002F6A  A01C               	btfss	escreve_cmd_lcd@comando,0,c
 14454  002F6C  D002               	goto	l483
 14455  002F6E  8883               	bsf	3971,4,c	;volatile
 14456  002F70  D001               	goto	l484
 14457  002F72                     l483:
 14458                           
 14459                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
 14460  002F72  9883               	bcf	3971,4,c	;volatile
 14461  002F74                     l484:
 14462                           
 14463                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
 14464  002F74  A21C               	btfss	escreve_cmd_lcd@comando,1,c
 14465  002F76  D002               	goto	l485
 14466  002F78  8A83               	bsf	3971,5,c	;volatile
 14467  002F7A  D001               	goto	l486
 14468  002F7C                     l485:
 14469                           
 14470                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
 14471  002F7C  9A83               	bcf	3971,5,c	;volatile
 14472  002F7E                     l486:
 14473                           
 14474                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
 14475  002F7E  A41C               	btfss	escreve_cmd_lcd@comando,2,c
 14476  002F80  D002               	goto	l487
 14477  002F82  8C83               	bsf	3971,6,c	;volatile
 14478  002F84  D001               	goto	l488
 14479  002F86                     l487:
 14480                           
 14481                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
 14482  002F86  9C83               	bcf	3971,6,c	;volatile
 14483  002F88                     l488:
 14484                           
 14485                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
 14486  002F88  A61C               	btfss	escreve_cmd_lcd@comando,3,c
 14487  002F8A  D002               	goto	l489
 14488  002F8C  8E83               	bsf	3971,7,c	;volatile
 14489  002F8E  D001               	goto	l490
 14490  002F90                     l489:
 14491                           
 14492                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
 14493  002F90  9E83               	bcf	3971,7,c	;volatile
 14494  002F92                     l490:
 14495                           
 14496                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
 14497  002F92  8083               	bsf	3971,0,c	;volatile
 14498                           
 14499                           ;display_lcd.c: 197: delay();
 14500  002F94  ECC8  F01C         	call	_delay	;wreg free
 14501                           
 14502                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
 14503  002F98  9083               	bcf	3971,0,c	;volatile
 14504                           
 14505                           ;display_lcd.c: 199: delay();
 14506  002F9A  ECC8  F01C         	call	_delay	;wreg free
 14507                           
 14508                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
 14509  002F9E  041C               	decf	escreve_cmd_lcd@comando,w,c
 14510  002FA0  B4D8               	btfsc	status,2,c
 14511  002FA2  D008               	goto	u12050
 14512  002FA4  0E02               	movlw	2
 14513  002FA6  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 14514  002FA8  B4D8               	btfsc	status,2,c
 14515  002FAA  D004               	goto	u12050
 14516  002FAC  0E03               	movlw	3
 14517  002FAE  181C               	xorwf	escreve_cmd_lcd@comando,w,c
 14518  002FB0  A4D8               	btfss	status,2,c
 14519  002FB2  0012               	return	
 14520  002FB4                     u12050:
 14521                           
 14522                           ;display_lcd.c: 205: { delay(); }
 14523  002FB4  ECC8  F01C         	call	_delay	;wreg free
 14524  002FB8  0012               	return	
 14525  002FBA                     __end_of_escreve_cmd_lcd:
 14526                           	opt stack 0
 14527                           tblptru	equ	0xFF8
 14528                           tblptrh	equ	0xFF7
 14529                           tblptrl	equ	0xFF6
 14530                           tablat	equ	0xFF5
 14531                           prodh	equ	0xFF4
 14532                           prodl	equ	0xFF3
 14533                           intcon	equ	0xFF2
 14534                           intcon2	equ	0xFF1
 14535                           intcon3	equ	0xFF0
 14536                           indf0	equ	0xFEF
 14537                           postinc0	equ	0xFEE
 14538                           fsr0h	equ	0xFEA
 14539                           fsr0l	equ	0xFE9
 14540                           wreg	equ	0xFE8
 14541                           indf1	equ	0xFE7
 14542                           postinc1	equ	0xFE6
 14543                           postdec1	equ	0xFE5
 14544                           plusw1	equ	0xFE3
 14545                           fsr1h	equ	0xFE2
 14546                           fsr1l	equ	0xFE1
 14547                           indf2	equ	0xFDF
 14548                           postinc2	equ	0xFDE
 14549                           postdec2	equ	0xFDD
 14550                           plusw2	equ	0xFDB
 14551                           fsr2h	equ	0xFDA
 14552                           fsr2l	equ	0xFD9
 14553                           status	equ	0xFD8
 14554                           
 14555 ;; *************** function _dummy_clocks *****************
 14556 ;; Defined at:
 14557 ;;		line 77 in file "bibliotecas/SDCard.c"
 14558 ;; Parameters:    Size  Location     Type
 14559 ;;  n               1    wreg     unsigned char 
 14560 ;; Auto vars:     Size  Location     Type
 14561 ;;  n               1   27[COMRAM] unsigned char 
 14562 ;;  i               2   28[COMRAM] unsigned int 
 14563 ;; Return value:  Size  Location     Type
 14564 ;;                  1    wreg      void 
 14565 ;; Registers used:
 14566 ;;		wreg, status,2, status,0, cstack
 14567 ;; Tracked objects:
 14568 ;;		On entry : 0/0
 14569 ;;		On exit  : 0/0
 14570 ;;		Unchanged: 0/0
 14571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14572 ;;      Params:         0       0       0       0       0       0       0       0       0
 14573 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14574 ;;      Temps:          2       0       0       0       0       0       0       0       0
 14575 ;;      Totals:         5       0       0       0       0       0       0       0       0
 14576 ;;Total ram usage:        5 bytes
 14577 ;; Hardware stack levels used:    1
 14578 ;; Hardware stack levels required when called:    3
 14579 ;; This function calls:
 14580 ;;		_ReadSPI_
 14581 ;; This function is called by:
 14582 ;;		_sdc_disk_initialize
 14583 ;;		_sdc_disk_read
 14584 ;;		_sdc_disk_write
 14585 ;; This function uses a non-reentrant model
 14586 ;;
 14587                           
 14588                           	psect	text56
 14589  003818                     __ptext56:
 14590                           	opt stack 0
 14591  003818                     _dummy_clocks:
 14592                           	opt stack 22
 14593                           
 14594                           ;incstack = 0
 14595                           ;dummy_clocks@n stored from wreg
 14596  003818  6E1C               	movwf	dummy_clocks@n,c
 14597                           
 14598                           ;SDCard.c: 79: unsigned int i;
 14599                           ;SDCard.c: 80: _delay((unsigned long)((1)*(48000000/4000.0)));
 14600  00381A  0E10               	movlw	16
 14601  00381C  6E1A               	movwf	??_dummy_clocks& (0+255),c
 14602  00381E  0E94               	movlw	148
 14603  003820                     u16757:
 14604  003820  2EE8               	decfsz	wreg,f,c
 14605  003822  D7FE               	bra	u16757
 14606  003824  2E1A               	decfsz	??_dummy_clocks& (0+255),f,c
 14607  003826  D7FC               	bra	u16757
 14608  003828  D000               	nop2	
 14609                           
 14610                           ;SDCard.c: 82: for(i=0;i<n;i++)
 14611  00382A  0E00               	movlw	0
 14612  00382C  6E1E               	movwf	dummy_clocks@i+1,c
 14613  00382E  0E00               	movlw	0
 14614  003830  6E1D               	movwf	dummy_clocks@i,c
 14615  003832  D006               	goto	l303
 14616  003834                     l304:
 14617                           
 14618                           ;SDCard.c: 83: {
 14619                           ;SDCard.c: 84: LATBbits.LATB4 = 1;
 14620  003834  888A               	bsf	3978,4,c	;volatile
 14621                           
 14622                           ;SDCard.c: 85: ReadSPI_();
 14623  003836  EC57  F01D         	call	_ReadSPI_	;wreg free
 14624                           
 14625                           ;SDCard.c: 86: LATBbits.LATB4 = 0;
 14626  00383A  988A               	bcf	3978,4,c	;volatile
 14627  00383C  4A1D               	infsnz	dummy_clocks@i,f,c
 14628  00383E  2A1E               	incf	dummy_clocks@i+1,f,c
 14629  003840                     l303:
 14630  003840  501C               	movf	dummy_clocks@n,w,c
 14631  003842  6E1A               	movwf	??_dummy_clocks& (0+255),c
 14632  003844  6A1B               	clrf	(??_dummy_clocks+1)& (0+255),c
 14633  003846  501A               	movf	??_dummy_clocks,w,c
 14634  003848  5C1D               	subwf	dummy_clocks@i,w,c
 14635  00384A  501B               	movf	??_dummy_clocks+1,w,c
 14636  00384C  581E               	subwfb	dummy_clocks@i+1,w,c
 14637  00384E  B0D8               	btfsc	status,0,c
 14638  003850  0012               	return	
 14639  003852  D7F0               	goto	l304
 14640  003854                     __end_of_dummy_clocks:
 14641                           	opt stack 0
 14642                           tblptru	equ	0xFF8
 14643                           tblptrh	equ	0xFF7
 14644                           tblptrl	equ	0xFF6
 14645                           tablat	equ	0xFF5
 14646                           prodh	equ	0xFF4
 14647                           prodl	equ	0xFF3
 14648                           intcon	equ	0xFF2
 14649                           intcon2	equ	0xFF1
 14650                           intcon3	equ	0xFF0
 14651                           indf0	equ	0xFEF
 14652                           postinc0	equ	0xFEE
 14653                           fsr0h	equ	0xFEA
 14654                           fsr0l	equ	0xFE9
 14655                           wreg	equ	0xFE8
 14656                           indf1	equ	0xFE7
 14657                           postinc1	equ	0xFE6
 14658                           postdec1	equ	0xFE5
 14659                           plusw1	equ	0xFE3
 14660                           fsr1h	equ	0xFE2
 14661                           fsr1l	equ	0xFE1
 14662                           indf2	equ	0xFDF
 14663                           postinc2	equ	0xFDE
 14664                           postdec2	equ	0xFDD
 14665                           plusw2	equ	0xFDB
 14666                           fsr2h	equ	0xFDA
 14667                           fsr2l	equ	0xFD9
 14668                           status	equ	0xFD8
 14669                           
 14670 ;; *************** function _command *****************
 14671 ;; Defined at:
 14672 ;;		line 128 in file "bibliotecas/SDCard.c"
 14673 ;; Parameters:    Size  Location     Type
 14674 ;;  CMD             1    wreg     unsigned char 
 14675 ;;  arg             4   31[COMRAM] unsigned long 
 14676 ;;  CRC             1   35[COMRAM] unsigned char 
 14677 ;; Auto vars:     Size  Location     Type
 14678 ;;  CMD             1   36[COMRAM] unsigned char 
 14679 ;;  argument        1   37[COMRAM] unsigned char 
 14680 ;; Return value:  Size  Location     Type
 14681 ;;                  1    wreg      void 
 14682 ;; Registers used:
 14683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14684 ;; Tracked objects:
 14685 ;;		On entry : 0/0
 14686 ;;		On exit  : 0/0
 14687 ;;		Unchanged: 0/0
 14688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14689 ;;      Params:         5       0       0       0       0       0       0       0       0
 14690 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14691 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14692 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14693 ;;Total ram usage:        7 bytes
 14694 ;; Hardware stack levels used:    1
 14695 ;; Hardware stack levels required when called:    5
 14696 ;; This function calls:
 14697 ;;		_WriteSPI_
 14698 ;;		_escreve_frase_ram_lcd
 14699 ;;		_posicao_cursor_lcd
 14700 ;;		_wait_ready
 14701 ;; This function is called by:
 14702 ;;		_sdc_reset
 14703 ;;		_sdc_disk_initialize
 14704 ;;		_sdc_disk_read
 14705 ;;		_sdc_disk_write
 14706 ;; This function uses a non-reentrant model
 14707 ;;
 14708                           
 14709                           	psect	text57
 14710  003400                     __ptext57:
 14711                           	opt stack 0
 14712  003400                     _command:
 14713                           	opt stack 20
 14714                           
 14715                           ;incstack = 0
 14716                           ;command@CMD stored from wreg
 14717  003400  6E25               	movwf	command@CMD,c
 14718                           
 14719                           ;SDCard.c: 130: unsigned char argument;
 14720                           ;SDCard.c: 132: if (wait_ready() != 0xFF)
 14721  003402  EC45  F01C         	call	_wait_ready	;wreg free
 14722  003406  0AFF               	xorlw	255
 14723  003408  B4D8               	btfsc	status,2,c
 14724  00340A  D00B               	goto	l319
 14725                           
 14726                           ;SDCard.c: 133: {
 14727                           ;SDCard.c: 134: posicao_cursor_lcd(1,0);
 14728  00340C  0E00               	movlw	0
 14729  00340E  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 14730  003410  0E01               	movlw	1
 14731  003412  EC93  F019         	call	_posicao_cursor_lcd
 14732                           
 14733                           ;SDCard.c: 135: escreve_frase_ram_lcd("Nao ta pronto");
 14734  003416  0EF1               	movlw	low STR_10
 14735  003418  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 14736  00341A  0E61               	movlw	high STR_10
 14737  00341C  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 14738  00341E  ECDC  F01A         	call	_escreve_frase_ram_lcd	;wreg free
 14739  003422                     l319:
 14740                           
 14741                           ;SDCard.c: 136: }
 14742                           ;SDCard.c: 138: WriteSPI_(0xFF);
 14743  003422  0EFF               	movlw	255
 14744  003424  EC29  F01D         	call	_WriteSPI_
 14745                           
 14746                           ;SDCard.c: 139: WriteSPI_(CMD);
 14747  003428  5025               	movf	command@CMD,w,c
 14748  00342A  EC29  F01D         	call	_WriteSPI_
 14749                           
 14750                           ;SDCard.c: 140: argument = arg>>24;
 14751  00342E  C023  F026         	movff	command@arg+3,command@argument
 14752                           
 14753                           ;SDCard.c: 141: WriteSPI_(argument);
 14754  003432  5026               	movf	command@argument,w,c
 14755  003434  EC29  F01D         	call	_WriteSPI_
 14756                           
 14757                           ;SDCard.c: 142: argument = arg>>16;
 14758  003438  C022  F026         	movff	command@arg+2,command@argument
 14759                           
 14760                           ;SDCard.c: 143: WriteSPI_(argument);
 14761  00343C  5026               	movf	command@argument,w,c
 14762  00343E  EC29  F01D         	call	_WriteSPI_
 14763                           
 14764                           ;SDCard.c: 144: argument = arg>>8;
 14765  003442  C021  F026         	movff	command@arg+1,command@argument
 14766                           
 14767                           ;SDCard.c: 145: WriteSPI_(argument);
 14768  003446  5026               	movf	command@argument,w,c
 14769  003448  EC29  F01D         	call	_WriteSPI_
 14770                           
 14771                           ;SDCard.c: 146: argument = arg;
 14772  00344C  C020  F026         	movff	command@arg,command@argument
 14773                           
 14774                           ;SDCard.c: 147: WriteSPI_(argument);
 14775  003450  5026               	movf	command@argument,w,c
 14776  003452  EC29  F01D         	call	_WriteSPI_
 14777                           
 14778                           ;SDCard.c: 148: WriteSPI_(CRC);
 14779  003456  5024               	movf	command@CRC,w,c
 14780  003458  EC29  F01D         	call	_WriteSPI_
 14781  00345C  0012               	return		;funcret
 14782  00345E                     __end_of_command:
 14783                           	opt stack 0
 14784                           tblptru	equ	0xFF8
 14785                           tblptrh	equ	0xFF7
 14786                           tblptrl	equ	0xFF6
 14787                           tablat	equ	0xFF5
 14788                           prodh	equ	0xFF4
 14789                           prodl	equ	0xFF3
 14790                           intcon	equ	0xFF2
 14791                           intcon2	equ	0xFF1
 14792                           intcon3	equ	0xFF0
 14793                           indf0	equ	0xFEF
 14794                           postinc0	equ	0xFEE
 14795                           fsr0h	equ	0xFEA
 14796                           fsr0l	equ	0xFE9
 14797                           wreg	equ	0xFE8
 14798                           indf1	equ	0xFE7
 14799                           postinc1	equ	0xFE6
 14800                           postdec1	equ	0xFE5
 14801                           plusw1	equ	0xFE3
 14802                           fsr1h	equ	0xFE2
 14803                           fsr1l	equ	0xFE1
 14804                           indf2	equ	0xFDF
 14805                           postinc2	equ	0xFDE
 14806                           postdec2	equ	0xFDD
 14807                           plusw2	equ	0xFDB
 14808                           fsr2h	equ	0xFDA
 14809                           fsr2l	equ	0xFD9
 14810                           status	equ	0xFD8
 14811                           
 14812 ;; *************** function _wait_ready *****************
 14813 ;; Defined at:
 14814 ;;		line 109 in file "bibliotecas/SDCard.c"
 14815 ;; Parameters:    Size  Location     Type
 14816 ;;		None
 14817 ;; Auto vars:     Size  Location     Type
 14818 ;;  msg            10    0        unsigned char [10]
 14819 ;;  timeout         4   25[COMRAM] unsigned long 
 14820 ;;  res             1   29[COMRAM] unsigned char 
 14821 ;; Return value:  Size  Location     Type
 14822 ;;                  1    wreg      unsigned char 
 14823 ;; Registers used:
 14824 ;;		wreg, status,2, status,0, cstack
 14825 ;; Tracked objects:
 14826 ;;		On entry : 0/0
 14827 ;;		On exit  : 0/0
 14828 ;;		Unchanged: 0/0
 14829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14830 ;;      Params:         0       0       0       0       0       0       0       0       0
 14831 ;;      Locals:         5       0       0       0       0       0       0       0       0
 14832 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14833 ;;      Totals:         5       0       0       0       0       0       0       0       0
 14834 ;;Total ram usage:        5 bytes
 14835 ;; Hardware stack levels used:    1
 14836 ;; Hardware stack levels required when called:    3
 14837 ;; This function calls:
 14838 ;;		_ReadSPI_
 14839 ;; This function is called by:
 14840 ;;		_command
 14841 ;; This function uses a non-reentrant model
 14842 ;;
 14843                           
 14844                           	psect	text58
 14845  00388A                     __ptext58:
 14846                           	opt stack 0
 14847  00388A                     _wait_ready:
 14848                           	opt stack 21
 14849                           
 14850                           ;SDCard.c: 111: BYTE res;
 14851                           ;SDCard.c: 112: DWORD timeout = 0x7FFF;
 14852                           
 14853                           ;incstack = 0
 14854  00388A  0EFF               	movlw	255
 14855  00388C  6E1A               	movwf	wait_ready@timeout,c
 14856  00388E  0E7F               	movlw	127
 14857  003890  6E1B               	movwf	wait_ready@timeout+1,c
 14858  003892  0E00               	movlw	0
 14859  003894  6E1C               	movwf	wait_ready@timeout+2,c
 14860  003896  0E00               	movlw	0
 14861  003898  6E1D               	movwf	wait_ready@timeout+3,c
 14862  00389A                     
 14863                           ;SDCard.c: 116: res = ReadSPI_();
 14864  00389A  EC57  F01D         	call	_ReadSPI_	;wreg free
 14865  00389E  6E1E               	movwf	wait_ready@res,c
 14866                           
 14867                           ;SDCard.c: 117: while ((res != 0xFF) && (--timeout));
 14868  0038A0  281E               	incf	wait_ready@res,w,c
 14869  0038A2  B4D8               	btfsc	status,2,c
 14870  0038A4  D00B               	goto	u11930
 14871  0038A6  061A               	decf	wait_ready@timeout,f,c
 14872  0038A8  0E00               	movlw	0
 14873  0038AA  5A1B               	subwfb	wait_ready@timeout+1,f,c
 14874  0038AC  5A1C               	subwfb	wait_ready@timeout+2,f,c
 14875  0038AE  5A1D               	subwfb	wait_ready@timeout+3,f,c
 14876  0038B0  501A               	movf	wait_ready@timeout,w,c
 14877  0038B2  101B               	iorwf	wait_ready@timeout+1,w,c
 14878  0038B4  101C               	iorwf	wait_ready@timeout+2,w,c
 14879  0038B6  101D               	iorwf	wait_ready@timeout+3,w,c
 14880  0038B8  A4D8               	btfss	status,2,c
 14881  0038BA  D7EF               	goto	l312
 14882  0038BC                     u11930:
 14883                           
 14884                           ;SDCard.c: 119: return res;
 14885  0038BC  501E               	movf	wait_ready@res,w,c
 14886  0038BE  0012               	return	
 14887  0038C0                     __end_of_wait_ready:
 14888                           	opt stack 0
 14889                           tblptru	equ	0xFF8
 14890                           tblptrh	equ	0xFF7
 14891                           tblptrl	equ	0xFF6
 14892                           tablat	equ	0xFF5
 14893                           prodh	equ	0xFF4
 14894                           prodl	equ	0xFF3
 14895                           intcon	equ	0xFF2
 14896                           intcon2	equ	0xFF1
 14897                           intcon3	equ	0xFF0
 14898                           indf0	equ	0xFEF
 14899                           postinc0	equ	0xFEE
 14900                           fsr0h	equ	0xFEA
 14901                           fsr0l	equ	0xFE9
 14902                           wreg	equ	0xFE8
 14903                           indf1	equ	0xFE7
 14904                           postinc1	equ	0xFE6
 14905                           postdec1	equ	0xFE5
 14906                           plusw1	equ	0xFE3
 14907                           fsr1h	equ	0xFE2
 14908                           fsr1l	equ	0xFE1
 14909                           indf2	equ	0xFDF
 14910                           postinc2	equ	0xFDE
 14911                           postdec2	equ	0xFDD
 14912                           plusw2	equ	0xFDB
 14913                           fsr2h	equ	0xFDA
 14914                           fsr2l	equ	0xFD9
 14915                           status	equ	0xFD8
 14916                           
 14917 ;; *************** function _ReadSPI_ *****************
 14918 ;; Defined at:
 14919 ;;		line 119 in file "bibliotecas/SPI.c"
 14920 ;; Parameters:    Size  Location     Type
 14921 ;;		None
 14922 ;; Auto vars:     Size  Location     Type
 14923 ;;		None
 14924 ;; Return value:  Size  Location     Type
 14925 ;;                  1    wreg      unsigned char 
 14926 ;; Registers used:
 14927 ;;		wreg, status,2
 14928 ;; Tracked objects:
 14929 ;;		On entry : 0/0
 14930 ;;		On exit  : 0/0
 14931 ;;		Unchanged: 0/0
 14932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14933 ;;      Params:         0       0       0       0       0       0       0       0       0
 14934 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14935 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14936 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14937 ;;Total ram usage:        0 bytes
 14938 ;; Hardware stack levels used:    1
 14939 ;; Hardware stack levels required when called:    2
 14940 ;; This function calls:
 14941 ;;		Nothing
 14942 ;; This function is called by:
 14943 ;;		_response
 14944 ;;		_dummy_clocks
 14945 ;;		_wait_ready
 14946 ;;		_sdc_disk_write
 14947 ;; This function uses a non-reentrant model
 14948 ;;
 14949                           
 14950                           	psect	text59
 14951  003AAE                     __ptext59:
 14952                           	opt stack 0
 14953  003AAE                     _ReadSPI_:
 14954                           	opt stack 22
 14955                           
 14956                           ;SPI.c: 126: SSPBUF = 0xFF;
 14957                           
 14958                           ;incstack = 0
 14959  003AAE  68C9               	setf	4041,c	;volatile
 14960  003AB0  A0C7               	btfss	4039,0,c	;volatile
 14961  003AB2  D7FE               	goto	l395
 14962                           
 14963                           ;SPI.c: 129: return (SSPBUF);
 14964  003AB4  50C9               	movf	4041,w,c	;volatile
 14965  003AB6  0012               	return	
 14966  003AB8                     __end_of_ReadSPI_:
 14967                           	opt stack 0
 14968                           tblptru	equ	0xFF8
 14969                           tblptrh	equ	0xFF7
 14970                           tblptrl	equ	0xFF6
 14971                           tablat	equ	0xFF5
 14972                           prodh	equ	0xFF4
 14973                           prodl	equ	0xFF3
 14974                           intcon	equ	0xFF2
 14975                           intcon2	equ	0xFF1
 14976                           intcon3	equ	0xFF0
 14977                           indf0	equ	0xFEF
 14978                           postinc0	equ	0xFEE
 14979                           fsr0h	equ	0xFEA
 14980                           fsr0l	equ	0xFE9
 14981                           wreg	equ	0xFE8
 14982                           indf1	equ	0xFE7
 14983                           postinc1	equ	0xFE6
 14984                           postdec1	equ	0xFE5
 14985                           plusw1	equ	0xFE3
 14986                           fsr1h	equ	0xFE2
 14987                           fsr1l	equ	0xFE1
 14988                           indf2	equ	0xFDF
 14989                           postinc2	equ	0xFDE
 14990                           postdec2	equ	0xFDD
 14991                           plusw2	equ	0xFDB
 14992                           fsr2h	equ	0xFDA
 14993                           fsr2l	equ	0xFD9
 14994                           status	equ	0xFD8
 14995                           
 14996 ;; *************** function _posicao_cursor_lcd *****************
 14997 ;; Defined at:
 14998 ;;		line 271 in file "bibliotecas/display_lcd.c"
 14999 ;; Parameters:    Size  Location     Type
 15000 ;;  linha           1    wreg     unsigned char 
 15001 ;;  coluna          1   28[COMRAM] unsigned char 
 15002 ;; Auto vars:     Size  Location     Type
 15003 ;;  linha           1   29[COMRAM] unsigned char 
 15004 ;;  endereco        1   30[COMRAM] unsigned char 
 15005 ;; Return value:  Size  Location     Type
 15006 ;;                  1    wreg      void 
 15007 ;; Registers used:
 15008 ;;		wreg, status,2, status,0, cstack
 15009 ;; Tracked objects:
 15010 ;;		On entry : 0/0
 15011 ;;		On exit  : 0/0
 15012 ;;		Unchanged: 0/0
 15013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15014 ;;      Params:         1       0       0       0       0       0       0       0       0
 15015 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15016 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15017 ;;      Totals:         3       0       0       0       0       0       0       0       0
 15018 ;;Total ram usage:        3 bytes
 15019 ;; Hardware stack levels used:    1
 15020 ;; Hardware stack levels required when called:    4
 15021 ;; This function calls:
 15022 ;;		_endereco_cursor_lcd
 15023 ;; This function is called by:
 15024 ;;		_mensagem_inicial
 15025 ;;		_command
 15026 ;;		_SDCard
 15027 ;;		_inicializa_SPI
 15028 ;;		_disk_read
 15029 ;;		_sdc_reset
 15030 ;;		_sdc_disk_initialize
 15031 ;;		_sdc_disk_read
 15032 ;;		_sdc_disk_write
 15033 ;;		_auto_mount
 15034 ;;		_gps
 15035 ;;		_leitura_chave
 15036 ;; This function uses a non-reentrant model
 15037 ;;
 15038                           
 15039                           	psect	text60
 15040  003326                     __ptext60:
 15041                           	opt stack 0
 15042  003326                     _posicao_cursor_lcd:
 15043                           	opt stack 25
 15044                           
 15045                           ;incstack = 0
 15046                           ;posicao_cursor_lcd@linha stored from wreg
 15047  003326  6E1E               	movwf	posicao_cursor_lcd@linha,c
 15048                           
 15049                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 15050  003328  0E00               	movlw	0
 15051  00332A  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 15052                           
 15053                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 15054  00332C  0E11               	movlw	17
 15055  00332E  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 15056  003330  D02F               	goto	l514
 15057  003332  D01E               	goto	l515
 15058  003334                     l516:
 15059                           
 15060                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 15061  003334  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 15062                           
 15063                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 15064  003338  501F               	movf	posicao_cursor_lcd@endereco,w,c
 15065  00333A  ECCB  F019         	call	_endereco_cursor_lcd
 15066                           
 15067                           ;display_lcd.c: 284: break;
 15068  00333E  D026               	goto	l517
 15069  003340                     
 15070                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 15071  003340  501D               	movf	posicao_cursor_lcd@coluna,w,c
 15072  003342  0F40               	addlw	64
 15073  003344  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 15074                           
 15075                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 15076  003346  501F               	movf	posicao_cursor_lcd@endereco,w,c
 15077  003348  ECCB  F019         	call	_endereco_cursor_lcd
 15078                           
 15079                           ;display_lcd.c: 289: break;
 15080  00334C  D01F               	goto	l517
 15081  00334E                     
 15082                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 15083  00334E  501D               	movf	posicao_cursor_lcd@coluna,w,c
 15084  003350  0F14               	addlw	20
 15085  003352  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 15086                           
 15087                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 15088  003354  501F               	movf	posicao_cursor_lcd@endereco,w,c
 15089  003356  ECCB  F019         	call	_endereco_cursor_lcd
 15090                           
 15091                           ;display_lcd.c: 294: break;
 15092  00335A  D018               	goto	l517
 15093  00335C                     
 15094                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 15095  00335C  501D               	movf	posicao_cursor_lcd@coluna,w,c
 15096  00335E  0F54               	addlw	84
 15097  003360  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 15098                           
 15099                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 15100  003362  501F               	movf	posicao_cursor_lcd@endereco,w,c
 15101  003364  ECCB  F019         	call	_endereco_cursor_lcd
 15102                           
 15103                           ;display_lcd.c: 299: break;
 15104  003368  D011               	goto	l517
 15105  00336A                     
 15106                           ;display_lcd.c: 302: endereco = 0x00U;
 15107  00336A  0E00               	movlw	0
 15108  00336C  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 15109                           
 15110                           ;display_lcd.c: 304: }
 15111                           
 15112                           ;display_lcd.c: 303: break;
 15113  00336E  D00E               	goto	l517
 15114  003370                     l515:
 15115  003370  501E               	movf	posicao_cursor_lcd@linha,w,c
 15116                           
 15117                           ; Switch size 1, requested type "space"
 15118                           ; Number of cases is 4, Range of values is 1 to 4
 15119                           ; switch strategies available:
 15120                           ; Name         Instructions Cycles
 15121                           ; simple_byte           13     7 (average)
 15122                           ;	Chosen strategy is simple_byte
 15123  003372  0A01               	xorlw	1	; case 1
 15124  003374  B4D8               	btfsc	status,2,c
 15125  003376  D7DE               	goto	l516
 15126  003378  0A03               	xorlw	3	; case 2
 15127  00337A  B4D8               	btfsc	status,2,c
 15128  00337C  D7E1               	goto	l518
 15129  00337E  0A01               	xorlw	1	; case 3
 15130  003380  B4D8               	btfsc	status,2,c
 15131  003382  D7E5               	goto	l519
 15132  003384  0A07               	xorlw	7	; case 4
 15133  003386  B4D8               	btfsc	status,2,c
 15134  003388  D7E9               	goto	l520
 15135  00338A  D7EF               	goto	l521
 15136  00338C                     l517:
 15137                           
 15138                           ;display_lcd.c: 306: coluna++;
 15139  00338C  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 15140                           
 15141                           ;display_lcd.c: 307: }
 15142  00338E  0012               	return	
 15143  003390                     l514:
 15144                           
 15145                           ;display_lcd.c: 308: else
 15146                           ;display_lcd.c: 309: {
 15147                           ;display_lcd.c: 310: endereco = 0x00U;
 15148  003390  0E00               	movlw	0
 15149  003392  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 15150  003394  0012               	return	
 15151  003396                     __end_of_posicao_cursor_lcd:
 15152                           	opt stack 0
 15153                           tblptru	equ	0xFF8
 15154                           tblptrh	equ	0xFF7
 15155                           tblptrl	equ	0xFF6
 15156                           tablat	equ	0xFF5
 15157                           prodh	equ	0xFF4
 15158                           prodl	equ	0xFF3
 15159                           intcon	equ	0xFF2
 15160                           intcon2	equ	0xFF1
 15161                           intcon3	equ	0xFF0
 15162                           indf0	equ	0xFEF
 15163                           postinc0	equ	0xFEE
 15164                           fsr0h	equ	0xFEA
 15165                           fsr0l	equ	0xFE9
 15166                           wreg	equ	0xFE8
 15167                           indf1	equ	0xFE7
 15168                           postinc1	equ	0xFE6
 15169                           postdec1	equ	0xFE5
 15170                           plusw1	equ	0xFE3
 15171                           fsr1h	equ	0xFE2
 15172                           fsr1l	equ	0xFE1
 15173                           indf2	equ	0xFDF
 15174                           postinc2	equ	0xFDE
 15175                           postdec2	equ	0xFDD
 15176                           plusw2	equ	0xFDB
 15177                           fsr2h	equ	0xFDA
 15178                           fsr2l	equ	0xFD9
 15179                           status	equ	0xFD8
 15180                           
 15181 ;; *************** function _endereco_cursor_lcd *****************
 15182 ;; Defined at:
 15183 ;;		line 218 in file "bibliotecas/display_lcd.c"
 15184 ;; Parameters:    Size  Location     Type
 15185 ;;  endereco        1    wreg     unsigned char 
 15186 ;; Auto vars:     Size  Location     Type
 15187 ;;  endereco        1   27[COMRAM] unsigned char 
 15188 ;; Return value:  Size  Location     Type
 15189 ;;                  1    wreg      void 
 15190 ;; Registers used:
 15191 ;;		wreg, status,2, status,0, cstack
 15192 ;; Tracked objects:
 15193 ;;		On entry : 0/0
 15194 ;;		On exit  : 0/0
 15195 ;;		Unchanged: 0/0
 15196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15197 ;;      Params:         0       0       0       0       0       0       0       0       0
 15198 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15199 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15200 ;;      Totals:         1       0       0       0       0       0       0       0       0
 15201 ;;Total ram usage:        1 bytes
 15202 ;; Hardware stack levels used:    1
 15203 ;; Hardware stack levels required when called:    3
 15204 ;; This function calls:
 15205 ;;		_delay
 15206 ;; This function is called by:
 15207 ;;		_posicao_cursor_lcd
 15208 ;;		_cria_caractere_lcd
 15209 ;; This function uses a non-reentrant model
 15210 ;;
 15211                           
 15212                           	psect	text61
 15213  003396                     __ptext61:
 15214                           	opt stack 0
 15215  003396                     _endereco_cursor_lcd:
 15216                           	opt stack 25
 15217                           
 15218                           ;incstack = 0
 15219                           ;endereco_cursor_lcd@endereco stored from wreg
 15220  003396  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 15221                           
 15222                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 15223  003398  9483               	bcf	3971,2,c	;volatile
 15224                           
 15225                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 15226  00339A  9283               	bcf	3971,1,c	;volatile
 15227                           
 15228                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 15229  00339C  9083               	bcf	3971,0,c	;volatile
 15230                           
 15231                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 15232  00339E  8E83               	bsf	3971,7,c	;volatile
 15233                           
 15234                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 15235  0033A0  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 15236  0033A2  D002               	goto	l497
 15237  0033A4  8883               	bsf	3971,4,c	;volatile
 15238  0033A6  D001               	goto	l498
 15239  0033A8                     l497:
 15240                           
 15241                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 15242  0033A8  9883               	bcf	3971,4,c	;volatile
 15243  0033AA                     l498:
 15244                           
 15245                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 15246  0033AA  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 15247  0033AC  D002               	goto	l499
 15248  0033AE  8A83               	bsf	3971,5,c	;volatile
 15249  0033B0  D001               	goto	l500
 15250  0033B2                     l499:
 15251                           
 15252                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 15253  0033B2  9A83               	bcf	3971,5,c	;volatile
 15254  0033B4                     l500:
 15255                           
 15256                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 15257  0033B4  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 15258  0033B6  D002               	goto	l501
 15259  0033B8  8C83               	bsf	3971,6,c	;volatile
 15260  0033BA  D001               	goto	l502
 15261  0033BC                     l501:
 15262                           
 15263                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 15264  0033BC  9C83               	bcf	3971,6,c	;volatile
 15265  0033BE                     l502:
 15266                           
 15267                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 15268  0033BE  8083               	bsf	3971,0,c	;volatile
 15269                           
 15270                           ;display_lcd.c: 236: delay();
 15271  0033C0  ECC8  F01C         	call	_delay	;wreg free
 15272                           
 15273                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 15274  0033C4  9083               	bcf	3971,0,c	;volatile
 15275                           
 15276                           ;display_lcd.c: 238: delay();
 15277  0033C6  ECC8  F01C         	call	_delay	;wreg free
 15278                           
 15279                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 15280  0033CA  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 15281  0033CC  D002               	goto	l503
 15282  0033CE  8883               	bsf	3971,4,c	;volatile
 15283  0033D0  D001               	goto	l504
 15284  0033D2                     l503:
 15285                           
 15286                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 15287  0033D2  9883               	bcf	3971,4,c	;volatile
 15288  0033D4                     l504:
 15289                           
 15290                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 15291  0033D4  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 15292  0033D6  D002               	goto	l505
 15293  0033D8  8A83               	bsf	3971,5,c	;volatile
 15294  0033DA  D001               	goto	l506
 15295  0033DC                     l505:
 15296                           
 15297                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 15298  0033DC  9A83               	bcf	3971,5,c	;volatile
 15299  0033DE                     l506:
 15300                           
 15301                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 15302  0033DE  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 15303  0033E0  D002               	goto	l507
 15304  0033E2  8C83               	bsf	3971,6,c	;volatile
 15305  0033E4  D001               	goto	l508
 15306  0033E6                     l507:
 15307                           
 15308                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 15309  0033E6  9C83               	bcf	3971,6,c	;volatile
 15310  0033E8                     l508:
 15311                           
 15312                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 15313  0033E8  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 15314  0033EA  D002               	goto	l509
 15315  0033EC  8E83               	bsf	3971,7,c	;volatile
 15316  0033EE  D001               	goto	l510
 15317  0033F0                     l509:
 15318                           
 15319                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 15320  0033F0  9E83               	bcf	3971,7,c	;volatile
 15321  0033F2                     l510:
 15322                           
 15323                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 15324  0033F2  8083               	bsf	3971,0,c	;volatile
 15325                           
 15326                           ;display_lcd.c: 252: delay();
 15327  0033F4  ECC8  F01C         	call	_delay	;wreg free
 15328                           
 15329                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 15330  0033F8  9083               	bcf	3971,0,c	;volatile
 15331                           
 15332                           ;display_lcd.c: 254: delay();
 15333  0033FA  ECC8  F01C         	call	_delay	;wreg free
 15334  0033FE  0012               	return		;funcret
 15335  003400                     __end_of_endereco_cursor_lcd:
 15336                           	opt stack 0
 15337                           tblptru	equ	0xFF8
 15338                           tblptrh	equ	0xFF7
 15339                           tblptrl	equ	0xFF6
 15340                           tablat	equ	0xFF5
 15341                           prodh	equ	0xFF4
 15342                           prodl	equ	0xFF3
 15343                           intcon	equ	0xFF2
 15344                           intcon2	equ	0xFF1
 15345                           intcon3	equ	0xFF0
 15346                           indf0	equ	0xFEF
 15347                           postinc0	equ	0xFEE
 15348                           fsr0h	equ	0xFEA
 15349                           fsr0l	equ	0xFE9
 15350                           wreg	equ	0xFE8
 15351                           indf1	equ	0xFE7
 15352                           postinc1	equ	0xFE6
 15353                           postdec1	equ	0xFE5
 15354                           plusw1	equ	0xFE3
 15355                           fsr1h	equ	0xFE2
 15356                           fsr1l	equ	0xFE1
 15357                           indf2	equ	0xFDF
 15358                           postinc2	equ	0xFDE
 15359                           postdec2	equ	0xFDD
 15360                           plusw2	equ	0xFDB
 15361                           fsr2h	equ	0xFDA
 15362                           fsr2l	equ	0xFD9
 15363                           status	equ	0xFD8
 15364                           
 15365 ;; *************** function _escreve_frase_ram_lcd *****************
 15366 ;; Defined at:
 15367 ;;		line 445 in file "bibliotecas/display_lcd.c"
 15368 ;; Parameters:    Size  Location     Type
 15369 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 15370 ;;		 -> STR_26(13), STR_25(7), STR_24(11), STR_23(9), 
 15371 ;;		 -> STR_22(11), STR_21(10), STR_20(16), STR_19(16), 
 15372 ;;		 -> STR_18(11), escreve_inteiro_lcd@texto(7), leitura_chave@pos_ignicao_on(17), leitura_chave@pos_ignicao_crank(17),
      + 
 15373 ;;		 -> leitura_chave@pos_ignicao_off(17), STR_16(17), STR_15(14), STR_14(18), 
 15374 ;;		 -> STR_11(16), STR_10(14), STR_5(5), gps@gps_buffer(15), 
 15375 ;;		 -> dado_buffer(7), STR_2(6), data_buffer(15), STR_1(6), 
 15376 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 15377 ;; Auto vars:     Size  Location     Type
 15378 ;;		None
 15379 ;; Return value:  Size  Location     Type
 15380 ;;                  1    wreg      void 
 15381 ;; Registers used:
 15382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15383 ;; Tracked objects:
 15384 ;;		On entry : 0/0
 15385 ;;		On exit  : 0/0
 15386 ;;		Unchanged: 0/0
 15387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15388 ;;      Params:         2       0       0       0       0       0       0       0       0
 15389 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15390 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15391 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15392 ;;Total ram usage:        2 bytes
 15393 ;; Hardware stack levels used:    1
 15394 ;; Hardware stack levels required when called:    4
 15395 ;; This function calls:
 15396 ;;		_escreve_caractere_lcd
 15397 ;; This function is called by:
 15398 ;;		_mensagem_inicial
 15399 ;;		_command
 15400 ;;		_SDCard
 15401 ;;		_inicializa_SPI
 15402 ;;		_escreve_inteiro_lcd
 15403 ;;		_sdc_reset
 15404 ;;		_sdc_disk_initialize
 15405 ;;		_sdc_disk_read
 15406 ;;		_sdc_disk_write
 15407 ;;		_gps
 15408 ;;		_leitura_chave
 15409 ;; This function uses a non-reentrant model
 15410 ;;
 15411                           
 15412                           	psect	text62
 15413  0035B8                     __ptext62:
 15414                           	opt stack 0
 15415  0035B8                     _escreve_frase_ram_lcd:
 15416                           	opt stack 25
 15417                           
 15418                           ;display_lcd.c: 447: while(*buffer)
 15419                           
 15420                           ;incstack = 0
 15421  0035B8  D014               	goto	l559
 15422  0035BA                     
 15423                           ;display_lcd.c: 448: {
 15424                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 15425  0035BA  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 15426  0035BE  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 15427  0035C2  6AF8               	clrf	tblptru,c
 15428  0035C4  0E07               	movlw	(high __ramtop+-1)
 15429  0035C6  64F7               	cpfsgt	tblptrh,c
 15430  0035C8  D003               	bra	u11887
 15431  0035CA  0008               	tblrd		*
 15432  0035CC  50F5               	movf	tablat,w,c
 15433  0035CE  D005               	bra	u11880
 15434  0035D0                     u11887:
 15435  0035D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 15436  0035D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 15437  0035D8  50EF               	movf	indf0,w,c
 15438  0035DA                     u11880:
 15439  0035DA  EC5A  F019         	call	_escreve_caractere_lcd
 15440                           
 15441                           ;display_lcd.c: 450: buffer++;
 15442  0035DE  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 15443  0035E0  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 15444  0035E2                     l559:
 15445  0035E2  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 15446  0035E6  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 15447  0035EA  6AF8               	clrf	tblptru,c
 15448  0035EC  0E07               	movlw	(high __ramtop+-1)
 15449  0035EE  64F7               	cpfsgt	tblptrh,c
 15450  0035F0  D003               	bra	u11897
 15451  0035F2  0008               	tblrd		*
 15452  0035F4  50F5               	movf	tablat,w,c
 15453  0035F6  D005               	bra	u11890
 15454  0035F8                     u11897:
 15455  0035F8  CFF6 FFE9          	movff	tblptrl,fsr0l
 15456  0035FC  CFF7 FFEA          	movff	tblptrh,fsr0h
 15457  003600  50EF               	movf	indf0,w,c
 15458  003602                     u11890:
 15459  003602  0900               	iorlw	0
 15460  003604  B4D8               	btfsc	status,2,c
 15461  003606  0012               	return	
 15462  003608  D7D8               	goto	l560
 15463  00360A                     __end_of_escreve_frase_ram_lcd:
 15464                           	opt stack 0
 15465                           tblptru	equ	0xFF8
 15466                           tblptrh	equ	0xFF7
 15467                           tblptrl	equ	0xFF6
 15468                           tablat	equ	0xFF5
 15469                           prodh	equ	0xFF4
 15470                           prodl	equ	0xFF3
 15471                           intcon	equ	0xFF2
 15472                           intcon2	equ	0xFF1
 15473                           intcon3	equ	0xFF0
 15474                           indf0	equ	0xFEF
 15475                           postinc0	equ	0xFEE
 15476                           fsr0h	equ	0xFEA
 15477                           fsr0l	equ	0xFE9
 15478                           wreg	equ	0xFE8
 15479                           indf1	equ	0xFE7
 15480                           postinc1	equ	0xFE6
 15481                           postdec1	equ	0xFE5
 15482                           plusw1	equ	0xFE3
 15483                           fsr1h	equ	0xFE2
 15484                           fsr1l	equ	0xFE1
 15485                           indf2	equ	0xFDF
 15486                           postinc2	equ	0xFDE
 15487                           postdec2	equ	0xFDD
 15488                           plusw2	equ	0xFDB
 15489                           fsr2h	equ	0xFDA
 15490                           fsr2l	equ	0xFD9
 15491                           status	equ	0xFD8
 15492                           
 15493 ;; *************** function _escreve_caractere_lcd *****************
 15494 ;; Defined at:
 15495 ;;		line 323 in file "bibliotecas/display_lcd.c"
 15496 ;; Parameters:    Size  Location     Type
 15497 ;;  data            1    wreg     unsigned char 
 15498 ;; Auto vars:     Size  Location     Type
 15499 ;;  data            1   27[COMRAM] unsigned char 
 15500 ;; Return value:  Size  Location     Type
 15501 ;;                  1    wreg      void 
 15502 ;; Registers used:
 15503 ;;		wreg, status,2, status,0, cstack
 15504 ;; Tracked objects:
 15505 ;;		On entry : 0/0
 15506 ;;		On exit  : 0/0
 15507 ;;		Unchanged: 0/0
 15508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15509 ;;      Params:         0       0       0       0       0       0       0       0       0
 15510 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15511 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15512 ;;      Totals:         1       0       0       0       0       0       0       0       0
 15513 ;;Total ram usage:        1 bytes
 15514 ;; Hardware stack levels used:    1
 15515 ;; Hardware stack levels required when called:    3
 15516 ;; This function calls:
 15517 ;;		_delay
 15518 ;; This function is called by:
 15519 ;;		_escreve_frase_ram_lcd
 15520 ;;		_escreve_float_lcd
 15521 ;;		_escreve_frase_lcd
 15522 ;;		_cria_caractere_lcd
 15523 ;; This function uses a non-reentrant model
 15524 ;;
 15525                           
 15526                           	psect	text63
 15527  0032B4                     __ptext63:
 15528                           	opt stack 0
 15529  0032B4                     _escreve_caractere_lcd:
 15530                           	opt stack 25
 15531                           
 15532                           ;incstack = 0
 15533                           ;escreve_caractere_lcd@data stored from wreg
 15534  0032B4  6E1C               	movwf	escreve_caractere_lcd@data,c
 15535                           
 15536                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 15537  0032B6  9483               	bcf	3971,2,c	;volatile
 15538                           
 15539                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 15540  0032B8  8283               	bsf	3971,1,c	;volatile
 15541                           
 15542                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 15543  0032BA  9083               	bcf	3971,0,c	;volatile
 15544                           
 15545                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 15546  0032BC  A81C               	btfss	escreve_caractere_lcd@data,4,c
 15547  0032BE  D002               	goto	l526
 15548  0032C0  8883               	bsf	3971,4,c	;volatile
 15549  0032C2  D001               	goto	l527
 15550  0032C4                     l526:
 15551                           
 15552                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 15553  0032C4  9883               	bcf	3971,4,c	;volatile
 15554  0032C6                     l527:
 15555                           
 15556                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 15557  0032C6  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 15558  0032C8  D002               	goto	l528
 15559  0032CA  8A83               	bsf	3971,5,c	;volatile
 15560  0032CC  D001               	goto	l529
 15561  0032CE                     l528:
 15562                           
 15563                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 15564  0032CE  9A83               	bcf	3971,5,c	;volatile
 15565  0032D0                     l529:
 15566                           
 15567                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 15568  0032D0  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 15569  0032D2  D002               	goto	l530
 15570  0032D4  8C83               	bsf	3971,6,c	;volatile
 15571  0032D6  D001               	goto	l531
 15572  0032D8                     l530:
 15573                           
 15574                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 15575  0032D8  9C83               	bcf	3971,6,c	;volatile
 15576  0032DA                     l531:
 15577                           
 15578                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 15579  0032DA  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 15580  0032DC  D002               	goto	l532
 15581  0032DE  8E83               	bsf	3971,7,c	;volatile
 15582  0032E0  D001               	goto	l533
 15583  0032E2                     l532:
 15584                           
 15585                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 15586  0032E2  9E83               	bcf	3971,7,c	;volatile
 15587  0032E4                     l533:
 15588                           
 15589                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 15590  0032E4  8083               	bsf	3971,0,c	;volatile
 15591                           
 15592                           ;display_lcd.c: 342: delay();
 15593  0032E6  ECC8  F01C         	call	_delay	;wreg free
 15594                           
 15595                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 15596  0032EA  9083               	bcf	3971,0,c	;volatile
 15597                           
 15598                           ;display_lcd.c: 344: delay();
 15599  0032EC  ECC8  F01C         	call	_delay	;wreg free
 15600                           
 15601                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 15602  0032F0  A01C               	btfss	escreve_caractere_lcd@data,0,c
 15603  0032F2  D002               	goto	l534
 15604  0032F4  8883               	bsf	3971,4,c	;volatile
 15605  0032F6  D001               	goto	l535
 15606  0032F8                     l534:
 15607                           
 15608                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 15609  0032F8  9883               	bcf	3971,4,c	;volatile
 15610  0032FA                     l535:
 15611                           
 15612                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 15613  0032FA  A21C               	btfss	escreve_caractere_lcd@data,1,c
 15614  0032FC  D002               	goto	l536
 15615  0032FE  8A83               	bsf	3971,5,c	;volatile
 15616  003300  D001               	goto	l537
 15617  003302                     l536:
 15618                           
 15619                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 15620  003302  9A83               	bcf	3971,5,c	;volatile
 15621  003304                     l537:
 15622                           
 15623                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 15624  003304  A41C               	btfss	escreve_caractere_lcd@data,2,c
 15625  003306  D002               	goto	l538
 15626  003308  8C83               	bsf	3971,6,c	;volatile
 15627  00330A  D001               	goto	l539
 15628  00330C                     l538:
 15629                           
 15630                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 15631  00330C  9C83               	bcf	3971,6,c	;volatile
 15632  00330E                     l539:
 15633                           
 15634                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 15635  00330E  A61C               	btfss	escreve_caractere_lcd@data,3,c
 15636  003310  D002               	goto	l540
 15637  003312  8E83               	bsf	3971,7,c	;volatile
 15638  003314  D001               	goto	l541
 15639  003316                     l540:
 15640                           
 15641                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 15642  003316  9E83               	bcf	3971,7,c	;volatile
 15643  003318                     l541:
 15644                           
 15645                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 15646  003318  8083               	bsf	3971,0,c	;volatile
 15647                           
 15648                           ;display_lcd.c: 359: delay();
 15649  00331A  ECC8  F01C         	call	_delay	;wreg free
 15650                           
 15651                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 15652  00331E  9083               	bcf	3971,0,c	;volatile
 15653                           
 15654                           ;display_lcd.c: 361: delay();
 15655  003320  ECC8  F01C         	call	_delay	;wreg free
 15656  003324  0012               	return		;funcret
 15657  003326                     __end_of_escreve_caractere_lcd:
 15658                           	opt stack 0
 15659                           tblptru	equ	0xFF8
 15660                           tblptrh	equ	0xFF7
 15661                           tblptrl	equ	0xFF6
 15662                           tablat	equ	0xFF5
 15663                           prodh	equ	0xFF4
 15664                           prodl	equ	0xFF3
 15665                           intcon	equ	0xFF2
 15666                           intcon2	equ	0xFF1
 15667                           intcon3	equ	0xFF0
 15668                           indf0	equ	0xFEF
 15669                           postinc0	equ	0xFEE
 15670                           fsr0h	equ	0xFEA
 15671                           fsr0l	equ	0xFE9
 15672                           wreg	equ	0xFE8
 15673                           indf1	equ	0xFE7
 15674                           postinc1	equ	0xFE6
 15675                           postdec1	equ	0xFE5
 15676                           plusw1	equ	0xFE3
 15677                           fsr1h	equ	0xFE2
 15678                           fsr1l	equ	0xFE1
 15679                           indf2	equ	0xFDF
 15680                           postinc2	equ	0xFDE
 15681                           postdec2	equ	0xFDD
 15682                           plusw2	equ	0xFDB
 15683                           fsr2h	equ	0xFDA
 15684                           fsr2l	equ	0xFD9
 15685                           status	equ	0xFD8
 15686                           
 15687 ;; *************** function _delay *****************
 15688 ;; Defined at:
 15689 ;;		line 45 in file "bibliotecas/display_lcd.c"
 15690 ;; Parameters:    Size  Location     Type
 15691 ;;		None
 15692 ;; Auto vars:     Size  Location     Type
 15693 ;;  contador_int    1   26[COMRAM] unsigned char 
 15694 ;;  contador_ext    1   25[COMRAM] unsigned char 
 15695 ;; Return value:  Size  Location     Type
 15696 ;;                  1    wreg      void 
 15697 ;; Registers used:
 15698 ;;		wreg, status,2, status,0
 15699 ;; Tracked objects:
 15700 ;;		On entry : 0/0
 15701 ;;		On exit  : 0/0
 15702 ;;		Unchanged: 0/0
 15703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15704 ;;      Params:         0       0       0       0       0       0       0       0       0
 15705 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15706 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15707 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15708 ;;Total ram usage:        2 bytes
 15709 ;; Hardware stack levels used:    1
 15710 ;; Hardware stack levels required when called:    2
 15711 ;; This function calls:
 15712 ;;		Nothing
 15713 ;; This function is called by:
 15714 ;;		_init_lcd
 15715 ;;		_escreve_cmd_lcd
 15716 ;;		_endereco_cursor_lcd
 15717 ;;		_escreve_caractere_lcd
 15718 ;; This function uses a non-reentrant model
 15719 ;;
 15720                           
 15721                           	psect	text64
 15722  003990                     __ptext64:
 15723                           	opt stack 0
 15724  003990                     _delay:
 15725                           	opt stack 25
 15726                           
 15727                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 15728                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 15729                           
 15730                           ;incstack = 0
 15731  003990  0E00               	movlw	0
 15732  003992  6E1A               	movwf	delay@contador_ext,c
 15733  003994                     l10164:
 15734  003994  0E63               	movlw	99
 15735  003996  641A               	cpfsgt	delay@contador_ext,c
 15736  003998  D001               	goto	l465
 15737  00399A  0012               	return	
 15738  00399C                     l465:
 15739                           
 15740                           ;display_lcd.c: 50: {
 15741                           ;display_lcd.c: 51: __nop();
 15742  00399C  F000               	nop	
 15743                           
 15744                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 15745  00399E  0E00               	movlw	0
 15746  0039A0  6E1B               	movwf	delay@contador_int,c
 15747  0039A2                     l10170:
 15748  0039A2  0E31               	movlw	49
 15749  0039A4  641B               	cpfsgt	delay@contador_int,c
 15750  0039A6  D001               	goto	l467
 15751  0039A8  D003               	goto	u11600
 15752  0039AA                     l467:
 15753                           
 15754                           ;display_lcd.c: 53: {
 15755                           ;display_lcd.c: 54: __nop();
 15756  0039AA  F000               	nop	
 15757  0039AC  2A1B               	incf	delay@contador_int,f,c
 15758  0039AE  D7F9               	goto	l10170
 15759  0039B0                     u11600:
 15760  0039B0  2A1A               	incf	delay@contador_ext,f,c
 15761  0039B2  D7F0               	goto	l10164
 15762  0039B4                     __end_of_delay:
 15763                           	opt stack 0
 15764                           tblptru	equ	0xFF8
 15765                           tblptrh	equ	0xFF7
 15766                           tblptrl	equ	0xFF6
 15767                           tablat	equ	0xFF5
 15768                           prodh	equ	0xFF4
 15769                           prodl	equ	0xFF3
 15770                           intcon	equ	0xFF2
 15771                           intcon2	equ	0xFF1
 15772                           intcon3	equ	0xFF0
 15773                           indf0	equ	0xFEF
 15774                           postinc0	equ	0xFEE
 15775                           fsr0h	equ	0xFEA
 15776                           fsr0l	equ	0xFE9
 15777                           wreg	equ	0xFE8
 15778                           indf1	equ	0xFE7
 15779                           postinc1	equ	0xFE6
 15780                           postdec1	equ	0xFE5
 15781                           plusw1	equ	0xFE3
 15782                           fsr1h	equ	0xFE2
 15783                           fsr1l	equ	0xFE1
 15784                           indf2	equ	0xFDF
 15785                           postinc2	equ	0xFDE
 15786                           postdec2	equ	0xFDD
 15787                           plusw2	equ	0xFDB
 15788                           fsr2h	equ	0xFDA
 15789                           fsr2l	equ	0xFD9
 15790                           status	equ	0xFD8
 15791                           
 15792 ;; *************** function _WriteSPI_ *****************
 15793 ;; Defined at:
 15794 ;;		line 139 in file "bibliotecas/SPI.c"
 15795 ;; Parameters:    Size  Location     Type
 15796 ;;  dado            1    wreg     unsigned char 
 15797 ;; Auto vars:     Size  Location     Type
 15798 ;;  dado            1   26[COMRAM] unsigned char 
 15799 ;;  TempVar         1   25[COMRAM] unsigned char 
 15800 ;; Return value:  Size  Location     Type
 15801 ;;                  1    wreg      void 
 15802 ;; Registers used:
 15803 ;;		wreg
 15804 ;; Tracked objects:
 15805 ;;		On entry : 0/0
 15806 ;;		On exit  : 0/0
 15807 ;;		Unchanged: 0/0
 15808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15809 ;;      Params:         0       0       0       0       0       0       0       0       0
 15810 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15811 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15812 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15813 ;;Total ram usage:        2 bytes
 15814 ;; Hardware stack levels used:    1
 15815 ;; Hardware stack levels required when called:    2
 15816 ;; This function calls:
 15817 ;;		Nothing
 15818 ;; This function is called by:
 15819 ;;		_proceed
 15820 ;;		_command
 15821 ;;		_sdc_disk_write
 15822 ;; This function uses a non-reentrant model
 15823 ;;
 15824                           
 15825                           	psect	text65
 15826  003A52                     __ptext65:
 15827                           	opt stack 0
 15828  003A52                     _WriteSPI_:
 15829                           	opt stack 26
 15830                           
 15831                           ;incstack = 0
 15832                           ;WriteSPI_@dado stored from wreg
 15833  003A52  6E1B               	movwf	WriteSPI_@dado,c
 15834                           
 15835                           ;SPI.c: 141: unsigned char TempVar;
 15836                           ;SPI.c: 142: TempVar = SSPBUF;
 15837  003A54  CFC9 F01A          	movff	4041,WriteSPI_@TempVar	;volatile
 15838                           
 15839                           ;SPI.c: 143: PIR1bits.SSPIF = 0;
 15840  003A58  969E               	bcf	3998,3,c	;volatile
 15841                           
 15842                           ;SPI.c: 150: SSPBUF = dado;
 15843  003A5A  C01B  FFC9         	movff	WriteSPI_@dado,4041	;volatile
 15844  003A5E  B69E               	btfsc	3998,3,c	;volatile
 15845  003A60  0012               	return	
 15846  003A62  D7FD               	goto	l401
 15847  003A64                     __end_of_WriteSPI_:
 15848                           	opt stack 0
 15849                           tblptru	equ	0xFF8
 15850                           tblptrh	equ	0xFF7
 15851                           tblptrl	equ	0xFF6
 15852                           tablat	equ	0xFF5
 15853                           prodh	equ	0xFF4
 15854                           prodl	equ	0xFF3
 15855                           intcon	equ	0xFF2
 15856                           intcon2	equ	0xFF1
 15857                           intcon3	equ	0xFF0
 15858                           indf0	equ	0xFEF
 15859                           postinc0	equ	0xFEE
 15860                           fsr0h	equ	0xFEA
 15861                           fsr0l	equ	0xFE9
 15862                           wreg	equ	0xFE8
 15863                           indf1	equ	0xFE7
 15864                           postinc1	equ	0xFE6
 15865                           postdec1	equ	0xFE5
 15866                           plusw1	equ	0xFE3
 15867                           fsr1h	equ	0xFE2
 15868                           fsr1l	equ	0xFE1
 15869                           indf2	equ	0xFDF
 15870                           postinc2	equ	0xFDE
 15871                           postdec2	equ	0xFDD
 15872                           plusw2	equ	0xFDB
 15873                           fsr2h	equ	0xFDA
 15874                           fsr2l	equ	0xFD9
 15875                           status	equ	0xFD8
 15876                           
 15877 ;; *************** function _disk_ioctl *****************
 15878 ;; Defined at:
 15879 ;;		line 248 in file "bibliotecas/diskio.c"
 15880 ;; Parameters:    Size  Location     Type
 15881 ;;  pdrv            1    wreg     unsigned char 
 15882 ;;  cmd             1   25[COMRAM] unsigned char 
 15883 ;;  buff            2   26[COMRAM] PTR void 
 15884 ;;		 -> NULL(0), 
 15885 ;; Auto vars:     Size  Location     Type
 15886 ;;  pdrv            1   28[COMRAM] unsigned char 
 15887 ;;  result          2    0        int 
 15888 ;;  res             1   29[COMRAM] enum E25
 15889 ;; Return value:  Size  Location     Type
 15890 ;;                  1    wreg      enum E25
 15891 ;; Registers used:
 15892 ;;		wreg, status,2, status,0
 15893 ;; Tracked objects:
 15894 ;;		On entry : 0/0
 15895 ;;		On exit  : 0/0
 15896 ;;		Unchanged: 0/0
 15897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15898 ;;      Params:         3       0       0       0       0       0       0       0       0
 15899 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15900 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15901 ;;      Totals:         5       0       0       0       0       0       0       0       0
 15902 ;;Total ram usage:        5 bytes
 15903 ;; Hardware stack levels used:    1
 15904 ;; Hardware stack levels required when called:    2
 15905 ;; This function calls:
 15906 ;;		Nothing
 15907 ;; This function is called by:
 15908 ;;		_sync
 15909 ;; This function uses a non-reentrant model
 15910 ;;
 15911                           
 15912                           	psect	text66
 15913  003942                     __ptext66:
 15914                           	opt stack 0
 15915  003942                     _disk_ioctl:
 15916                           	opt stack 24
 15917                           
 15918                           ;incstack = 0
 15919                           ;disk_ioctl@pdrv stored from wreg
 15920  003942  6E1D               	movwf	disk_ioctl@pdrv,c
 15921                           
 15922                           ;diskio.c: 254: DRESULT res;
 15923                           ;diskio.c: 255: int result;
 15924                           ;diskio.c: 257: switch (pdrv) {
 15925  003944  D006               	goto	l873
 15926  003946                     l874:
 15927                           
 15928                           ;diskio.c: 262: return res;
 15929  003946  501E               	movf	disk_ioctl@res,w,c
 15930  003948  0012               	return	
 15931  00394A                     l876:
 15932                           
 15933                           ;diskio.c: 268: return res;
 15934  00394A  501E               	movf	disk_ioctl@res,w,c
 15935  00394C  0012               	return	
 15936  00394E                     l877:
 15937                           
 15938                           ;diskio.c: 274: return res;
 15939  00394E  501E               	movf	disk_ioctl@res,w,c
 15940  003950  0012               	return	
 15941  003952                     l873:
 15942  003952  501D               	movf	disk_ioctl@pdrv,w,c
 15943                           
 15944                           ; Switch size 1, requested type "space"
 15945                           ; Number of cases is 3, Range of values is 0 to 2
 15946                           ; switch strategies available:
 15947                           ; Name         Instructions Cycles
 15948                           ; simple_byte           10     6 (average)
 15949                           ;	Chosen strategy is simple_byte
 15950  003954  0A00               	xorlw	0	; case 0
 15951  003956  B4D8               	btfsc	status,2,c
 15952  003958  D7F6               	goto	l874
 15953  00395A  0A01               	xorlw	1	; case 1
 15954  00395C  B4D8               	btfsc	status,2,c
 15955  00395E  D7F5               	goto	l876
 15956  003960  0A03               	xorlw	3	; case 2
 15957  003962  B4D8               	btfsc	status,2,c
 15958  003964  D7F4               	goto	l877
 15959                           
 15960                           ;diskio.c: 277: return RES_PARERR;
 15961  003966  0E04               	movlw	4
 15962  003968  0012               	return	
 15963  00396A                     __end_of_disk_ioctl:
 15964                           	opt stack 0
 15965                           tblptru	equ	0xFF8
 15966                           tblptrh	equ	0xFF7
 15967                           tblptrl	equ	0xFF6
 15968                           tablat	equ	0xFF5
 15969                           prodh	equ	0xFF4
 15970                           prodl	equ	0xFF3
 15971                           intcon	equ	0xFF2
 15972                           intcon2	equ	0xFF1
 15973                           intcon3	equ	0xFF0
 15974                           indf0	equ	0xFEF
 15975                           postinc0	equ	0xFEE
 15976                           fsr0h	equ	0xFEA
 15977                           fsr0l	equ	0xFE9
 15978                           wreg	equ	0xFE8
 15979                           indf1	equ	0xFE7
 15980                           postinc1	equ	0xFE6
 15981                           postdec1	equ	0xFE5
 15982                           plusw1	equ	0xFE3
 15983                           fsr1h	equ	0xFE2
 15984                           fsr1l	equ	0xFE1
 15985                           indf2	equ	0xFDF
 15986                           postinc2	equ	0xFDE
 15987                           postdec2	equ	0xFDD
 15988                           plusw2	equ	0xFDB
 15989                           fsr2h	equ	0xFDA
 15990                           fsr2l	equ	0xFD9
 15991                           status	equ	0xFD8
 15992                           
 15993 ;; *************** function _get_fattime *****************
 15994 ;; Defined at:
 15995 ;;		line 810 in file "bibliotecas/tff.c"
 15996 ;; Parameters:    Size  Location     Type
 15997 ;;		None
 15998 ;; Auto vars:     Size  Location     Type
 15999 ;;  f_time          9   29[COMRAM] struct .
 16000 ;; Return value:  Size  Location     Type
 16001 ;;                  4   25[COMRAM] unsigned long 
 16002 ;; Registers used:
 16003 ;;		wreg, status,2, status,0
 16004 ;; Tracked objects:
 16005 ;;		On entry : 0/0
 16006 ;;		On exit  : 0/0
 16007 ;;		Unchanged: 0/0
 16008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16009 ;;      Params:         4       0       0       0       0       0       0       0       0
 16010 ;;      Locals:         9       0       0       0       0       0       0       0       0
 16011 ;;      Temps:          0      38       0       0       0       0       0       0       0
 16012 ;;      Totals:        13      38       0       0       0       0       0       0       0
 16013 ;;Total ram usage:       51 bytes
 16014 ;; Hardware stack levels used:    1
 16015 ;; Hardware stack levels required when called:    2
 16016 ;; This function calls:
 16017 ;;		Nothing
 16018 ;; This function is called by:
 16019 ;;		_f_open
 16020 ;;		_f_sync
 16021 ;;		_f_mkdir
 16022 ;; This function uses a non-reentrant model
 16023 ;;
 16024                           
 16025                           	psect	text67
 16026  00295E                     __ptext67:
 16027                           	opt stack 0
 16028  00295E                     _get_fattime:
 16029                           	opt stack 26
 16030                           
 16031                           ;tff.c: 812: fat_time f_time;
 16032                           ;tff.c: 814: return (DWORD)(f_time.ano ) << 25 |
 16033                           ;tff.c: 815: (DWORD)(f_time.mes) << 21 |
 16034                           ;tff.c: 816: (DWORD)(f_time.mes) << 16 |
 16035                           ;tff.c: 817: (DWORD)(f_time.hora) << 11 |
 16036                           ;tff.c: 818: (DWORD)(f_time.min) << 5 |
 16037                           ;tff.c: 819: (DWORD)(f_time.seg) >> 1;
 16038                           
 16039                           ;incstack = 0
 16040  00295E  90D8               	bcf	status,0,c
 16041  002960  3023               	rrcf	get_fattime@f_time+5,w,c
 16042  002962  0100               	movlb	0	; () banked
 16043  002964  6F61               	movwf	(??_get_fattime+1)& (0+255),b
 16044  002966  3022               	rrcf	get_fattime@f_time+4,w,c
 16045  002968  6F60               	movwf	??_get_fattime& (0+255),b
 16046  00296A  5020               	movf	get_fattime@f_time+2,w,c
 16047  00296C  6F62               	movwf	(??_get_fattime+2)& (0+255),b
 16048  00296E  5021               	movf	get_fattime@f_time+3,w,c
 16049  002970  6F63               	movwf	(??_get_fattime+3)& (0+255),b
 16050  002972  6B64               	clrf	(??_get_fattime+4)& (0+255),b
 16051  002974  6B65               	clrf	(??_get_fattime+5)& (0+255),b
 16052  002976  0E05               	movlw	5
 16053  002978                     u13475:
 16054  002978  90D8               	bcf	status,0,c
 16055  00297A  3762               	rlcf	(??_get_fattime+2)& (0+255),f,b
 16056  00297C  3763               	rlcf	(??_get_fattime+3)& (0+255),f,b
 16057  00297E  3764               	rlcf	(??_get_fattime+4)& (0+255),f,b
 16058  002980  3765               	rlcf	(??_get_fattime+5)& (0+255),f,b
 16059  002982  2EE8               	decfsz	wreg,f,c
 16060  002984  D7F9               	goto	u13475
 16061  002986  501E               	movf	get_fattime@f_time,w,c
 16062  002988  6F66               	movwf	(??_get_fattime+6)& (0+255),b
 16063  00298A  501F               	movf	get_fattime@f_time+1,w,c
 16064  00298C  6F67               	movwf	(??_get_fattime+7)& (0+255),b
 16065  00298E  6B68               	clrf	(??_get_fattime+8)& (0+255),b
 16066  002990  6B69               	clrf	(??_get_fattime+9)& (0+255),b
 16067  002992  0E0B               	movlw	11
 16068  002994                     u13485:
 16069  002994  90D8               	bcf	status,0,c
 16070  002996  3766               	rlcf	(??_get_fattime+6)& (0+255),f,b
 16071  002998  3767               	rlcf	(??_get_fattime+7)& (0+255),f,b
 16072  00299A  3768               	rlcf	(??_get_fattime+8)& (0+255),f,b
 16073  00299C  3769               	rlcf	(??_get_fattime+9)& (0+255),f,b
 16074  00299E  2EE8               	decfsz	wreg,f,c
 16075  0029A0  D7F9               	goto	u13485
 16076  0029A2  C025  F06A         	movff	get_fattime@f_time+7,??_get_fattime+10
 16077  0029A6  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 16078  0029A8  6B6C               	clrf	(??_get_fattime+12)& (0+255),b
 16079  0029AA  6B6D               	clrf	(??_get_fattime+13)& (0+255),b
 16080  0029AC  C06B  F06D         	movff	??_get_fattime+11,??_get_fattime+13
 16081  0029B0  C06A  F06C         	movff	??_get_fattime+10,??_get_fattime+12
 16082  0029B4  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 16083  0029B6  6B6A               	clrf	(??_get_fattime+10)& (0+255),b
 16084  0029B8  C025  F06E         	movff	get_fattime@f_time+7,??_get_fattime+14
 16085  0029BC  6B6F               	clrf	(??_get_fattime+15)& (0+255),b
 16086  0029BE  6B70               	clrf	(??_get_fattime+16)& (0+255),b
 16087  0029C0  6B71               	clrf	(??_get_fattime+17)& (0+255),b
 16088  0029C2  0E15               	movlw	21
 16089  0029C4                     u13495:
 16090  0029C4  90D8               	bcf	status,0,c
 16091  0029C6  376E               	rlcf	(??_get_fattime+14)& (0+255),f,b
 16092  0029C8  376F               	rlcf	(??_get_fattime+15)& (0+255),f,b
 16093  0029CA  3770               	rlcf	(??_get_fattime+16)& (0+255),f,b
 16094  0029CC  3771               	rlcf	(??_get_fattime+17)& (0+255),f,b
 16095  0029CE  2EE8               	decfsz	wreg,f,c
 16096  0029D0  D7F9               	goto	u13495
 16097  0029D2  C026  F072         	movff	get_fattime@f_time+8,??_get_fattime+18
 16098  0029D6  6B73               	clrf	(??_get_fattime+19)& (0+255),b
 16099  0029D8  6B74               	clrf	(??_get_fattime+20)& (0+255),b
 16100  0029DA  6B75               	clrf	(??_get_fattime+21)& (0+255),b
 16101  0029DC  0E19               	movlw	25
 16102  0029DE                     u13505:
 16103  0029DE  90D8               	bcf	status,0,c
 16104  0029E0  3772               	rlcf	(??_get_fattime+18)& (0+255),f,b
 16105  0029E2  3773               	rlcf	(??_get_fattime+19)& (0+255),f,b
 16106  0029E4  3774               	rlcf	(??_get_fattime+20)& (0+255),f,b
 16107  0029E6  3775               	rlcf	(??_get_fattime+21)& (0+255),f,b
 16108  0029E8  2EE8               	decfsz	wreg,f,c
 16109  0029EA  D7F9               	goto	u13505
 16110  0029EC  516E               	movf	(??_get_fattime+14)& (0+255),w,b
 16111  0029EE  1172               	iorwf	(??_get_fattime+18)& (0+255),w,b
 16112  0029F0  6F76               	movwf	(??_get_fattime+22)& (0+255),b
 16113  0029F2  516F               	movf	(??_get_fattime+15)& (0+255),w,b
 16114  0029F4  1173               	iorwf	(??_get_fattime+19)& (0+255),w,b
 16115  0029F6  6F77               	movwf	(??_get_fattime+23)& (0+255),b
 16116  0029F8  5170               	movf	(??_get_fattime+16)& (0+255),w,b
 16117  0029FA  1174               	iorwf	(??_get_fattime+20)& (0+255),w,b
 16118  0029FC  6F78               	movwf	(??_get_fattime+24)& (0+255),b
 16119  0029FE  5171               	movf	(??_get_fattime+17)& (0+255),w,b
 16120  002A00  1175               	iorwf	(??_get_fattime+21)& (0+255),w,b
 16121  002A02  6F79               	movwf	(??_get_fattime+25)& (0+255),b
 16122  002A04  516A               	movf	(??_get_fattime+10)& (0+255),w,b
 16123  002A06  1176               	iorwf	(??_get_fattime+22)& (0+255),w,b
 16124  002A08  6F7A               	movwf	(??_get_fattime+26)& (0+255),b
 16125  002A0A  516B               	movf	(??_get_fattime+11)& (0+255),w,b
 16126  002A0C  1177               	iorwf	(??_get_fattime+23)& (0+255),w,b
 16127  002A0E  6F7B               	movwf	(??_get_fattime+27)& (0+255),b
 16128  002A10  516C               	movf	(??_get_fattime+12)& (0+255),w,b
 16129  002A12  1178               	iorwf	(??_get_fattime+24)& (0+255),w,b
 16130  002A14  6F7C               	movwf	(??_get_fattime+28)& (0+255),b
 16131  002A16  516D               	movf	(??_get_fattime+13)& (0+255),w,b
 16132  002A18  1179               	iorwf	(??_get_fattime+25)& (0+255),w,b
 16133  002A1A  6F7D               	movwf	(??_get_fattime+29)& (0+255),b
 16134  002A1C  5166               	movf	(??_get_fattime+6)& (0+255),w,b
 16135  002A1E  117A               	iorwf	(??_get_fattime+26)& (0+255),w,b
 16136  002A20  6F7E               	movwf	(??_get_fattime+30)& (0+255),b
 16137  002A22  5167               	movf	(??_get_fattime+7)& (0+255),w,b
 16138  002A24  117B               	iorwf	(??_get_fattime+27)& (0+255),w,b
 16139  002A26  6F7F               	movwf	(??_get_fattime+31)& (0+255),b
 16140  002A28  5168               	movf	(??_get_fattime+8)& (0+255),w,b
 16141  002A2A  117C               	iorwf	(??_get_fattime+28)& (0+255),w,b
 16142  002A2C  6F80               	movwf	(??_get_fattime+32)& (0+255),b
 16143  002A2E  5169               	movf	(??_get_fattime+9)& (0+255),w,b
 16144  002A30  117D               	iorwf	(??_get_fattime+29)& (0+255),w,b
 16145  002A32  6F81               	movwf	(??_get_fattime+33)& (0+255),b
 16146  002A34  5162               	movf	(??_get_fattime+2)& (0+255),w,b
 16147  002A36  117E               	iorwf	(??_get_fattime+30)& (0+255),w,b
 16148  002A38  6F82               	movwf	(??_get_fattime+34)& (0+255),b
 16149  002A3A  5163               	movf	(??_get_fattime+3)& (0+255),w,b
 16150  002A3C  117F               	iorwf	(??_get_fattime+31)& (0+255),w,b
 16151  002A3E  6F83               	movwf	(??_get_fattime+35)& (0+255),b
 16152  002A40  5164               	movf	(??_get_fattime+4)& (0+255),w,b
 16153  002A42  1180               	iorwf	(??_get_fattime+32)& (0+255),w,b
 16154  002A44  6F84               	movwf	(??_get_fattime+36)& (0+255),b
 16155  002A46  5165               	movf	(??_get_fattime+5)& (0+255),w,b
 16156  002A48  1181               	iorwf	(??_get_fattime+33)& (0+255),w,b
 16157  002A4A  6F85               	movwf	(??_get_fattime+37)& (0+255),b
 16158  002A4C  5160               	movf	??_get_fattime& (0+255),w,b
 16159  002A4E  1182               	iorwf	(??_get_fattime+34)& (0+255),w,b
 16160  002A50  6E1A               	movwf	?_get_fattime,c
 16161  002A52  5161               	movf	(??_get_fattime+1)& (0+255),w,b
 16162  002A54  1183               	iorwf	(??_get_fattime+35)& (0+255),w,b
 16163  002A56  6E1B               	movwf	?_get_fattime+1,c
 16164  002A58  0E00               	movlw	0
 16165  002A5A  1184               	iorwf	(??_get_fattime+36)& (0+255),w,b
 16166  002A5C  6E1C               	movwf	?_get_fattime+2,c
 16167  002A5E  0E00               	movlw	0
 16168  002A60  1185               	iorwf	(??_get_fattime+37)& (0+255),w,b
 16169  002A62  6E1D               	movwf	?_get_fattime+3,c
 16170  002A64  0012               	return	
 16171  002A66                     __end_of_get_fattime:
 16172                           	opt stack 0
 16173                           tblptru	equ	0xFF8
 16174                           tblptrh	equ	0xFF7
 16175                           tblptrl	equ	0xFF6
 16176                           tablat	equ	0xFF5
 16177                           prodh	equ	0xFF4
 16178                           prodl	equ	0xFF3
 16179                           intcon	equ	0xFF2
 16180                           intcon2	equ	0xFF1
 16181                           intcon3	equ	0xFF0
 16182                           indf0	equ	0xFEF
 16183                           postinc0	equ	0xFEE
 16184                           fsr0h	equ	0xFEA
 16185                           fsr0l	equ	0xFE9
 16186                           wreg	equ	0xFE8
 16187                           indf1	equ	0xFE7
 16188                           postinc1	equ	0xFE6
 16189                           postdec1	equ	0xFE5
 16190                           plusw1	equ	0xFE3
 16191                           fsr1h	equ	0xFE2
 16192                           fsr1l	equ	0xFE1
 16193                           indf2	equ	0xFDF
 16194                           postinc2	equ	0xFDE
 16195                           postdec2	equ	0xFDD
 16196                           plusw2	equ	0xFDB
 16197                           fsr2h	equ	0xFDA
 16198                           fsr2l	equ	0xFD9
 16199                           status	equ	0xFD8
 16200                           
 16201 ;; *************** function _isr *****************
 16202 ;; Defined at:
 16203 ;;		line 107 in file "main.c"
 16204 ;; Parameters:    Size  Location     Type
 16205 ;;		None
 16206 ;; Auto vars:     Size  Location     Type
 16207 ;;  cont            1   24[COMRAM] unsigned char 
 16208 ;; Return value:  Size  Location     Type
 16209 ;;                  1    wreg      void 
 16210 ;; Registers used:
 16211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16212 ;; Tracked objects:
 16213 ;;		On entry : 0/0
 16214 ;;		On exit  : 0/0
 16215 ;;		Unchanged: 0/0
 16216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16217 ;;      Params:         0       0       0       0       0       0       0       0       0
 16218 ;;      Locals:         1       0       0       0       0       0       0       0       0
 16219 ;;      Temps:         20       0       0       0       0       0       0       0       0
 16220 ;;      Totals:        21       0       0       0       0       0       0       0       0
 16221 ;;Total ram usage:       21 bytes
 16222 ;; Hardware stack levels used:    1
 16223 ;; Hardware stack levels required when called:    1
 16224 ;; This function calls:
 16225 ;;		_recebe_dado_uart
 16226 ;;		i2_write_timer_zero
 16227 ;; This function is called by:
 16228 ;;		Interrupt level 2
 16229 ;; This function uses a non-reentrant model
 16230 ;;
 16231                           
 16232                           	psect	intcode
 16233  000008                     __pintcode:
 16234                           	opt stack 0
 16235  000008                     _isr:
 16236                           	opt stack 17
 16237                           
 16238                           ; BSR set to: 0
 16239                           ;incstack = 0
 16240  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16241  00000A  ED1F  F014         	call	int_func,f	;refresh shadow registers
 16242                           tblptru	equ	0xFF8
 16243                           tblptrh	equ	0xFF7
 16244                           tblptrl	equ	0xFF6
 16245                           tablat	equ	0xFF5
 16246                           prodh	equ	0xFF4
 16247                           prodl	equ	0xFF3
 16248                           intcon	equ	0xFF2
 16249                           intcon2	equ	0xFF1
 16250                           intcon3	equ	0xFF0
 16251                           indf0	equ	0xFEF
 16252                           postinc0	equ	0xFEE
 16253                           fsr0h	equ	0xFEA
 16254                           fsr0l	equ	0xFE9
 16255                           wreg	equ	0xFE8
 16256                           indf1	equ	0xFE7
 16257                           postinc1	equ	0xFE6
 16258                           postdec1	equ	0xFE5
 16259                           plusw1	equ	0xFE3
 16260                           fsr1h	equ	0xFE2
 16261                           fsr1l	equ	0xFE1
 16262                           indf2	equ	0xFDF
 16263                           postinc2	equ	0xFDE
 16264                           postdec2	equ	0xFDD
 16265                           plusw2	equ	0xFDB
 16266                           fsr2h	equ	0xFDA
 16267                           fsr2l	equ	0xFD9
 16268                           status	equ	0xFD8
 16269                           
 16270                           	psect	intcode_body
 16271  00283E                     __pintcode_body:
 16272                           	opt stack 17
 16273  00283E                     int_func:
 16274                           	opt stack 17
 16275  00283E  0006               	pop		; remove dummy address from shadow register refresh
 16276  002840  CFFA F007          	movff	pclath,??_isr+2
 16277  002844  CFFB F008          	movff	pclatu,??_isr+3
 16278  002848  CFE9 F009          	movff	fsr0l,??_isr+4
 16279  00284C  CFEA F00A          	movff	fsr0h,??_isr+5
 16280  002850  CFE1 F00B          	movff	fsr1l,??_isr+6
 16281  002854  CFE2 F00C          	movff	fsr1h,??_isr+7
 16282  002858  CFD9 F00D          	movff	fsr2l,??_isr+8
 16283  00285C  CFDA F00E          	movff	fsr2h,??_isr+9
 16284  002860  CFF3 F00F          	movff	prodl,??_isr+10
 16285  002864  CFF4 F010          	movff	prodh,??_isr+11
 16286  002868  CFF6 F011          	movff	tblptrl,??_isr+12
 16287  00286C  CFF7 F012          	movff	tblptrh,??_isr+13
 16288  002870  CFF8 F013          	movff	tblptru,??_isr+14
 16289  002874  CFF5 F014          	movff	tablat,??_isr+15
 16290  002878  C046  F015         	movff	btemp,??_isr+16
 16291  00287C  C047  F016         	movff	btemp+1,??_isr+17
 16292  002880  C048  F017         	movff	btemp+2,??_isr+18
 16293  002884  C049  F018         	movff	btemp+3,??_isr+19
 16294                           
 16295                           ;main.c: 109: unsigned char cont;
 16296                           ;main.c: 112: if (PIE1bits.RCIE && PIR1bits.RCIF)
 16297  002888  BA9D               	btfsc	3997,5,c	;volatile
 16298  00288A  AA9E               	btfss	3998,5,c	;volatile
 16299  00288C  D004               	goto	i2l61
 16300                           
 16301                           ;main.c: 113: {
 16302                           ;main.c: 114: data_uart_recebe = recebe_dado_uart();
 16303  00288E  EC3B  F01D         	call	_recebe_dado_uart	;wreg free
 16304  002892  6E45               	movwf	_data_uart_recebe,c
 16305                           
 16306                           ;main.c: 115: PIR1bits.RCIF = 0;
 16307  002894  9A9E               	bcf	3998,5,c	;volatile
 16308  002896                     i2l61:
 16309                           
 16310                           ;main.c: 120: }
 16311                           ;main.c: 123: unsigned char cont;
 16312                           ;main.c: 125: if (TMR0IF && T0IF)
 16313  002896  B4F2               	btfsc	intcon,2,c	;volatile
 16314  002898  A4F2               	btfss	intcon,2,c	;volatile
 16315  00289A  D037               	goto	i2l62
 16316                           
 16317                           ;main.c: 126: {
 16318                           ;main.c: 127: INTCONbits.TMR0IF = 0;
 16319  00289C  94F2               	bcf	intcon,2,c	;volatile
 16320                           
 16321                           ;main.c: 128: sinaliza_int_timer = 1;
 16322  00289E  0E01               	movlw	1
 16323  0028A0  6E44               	movwf	_sinaliza_int_timer,c
 16324                           
 16325                           ;main.c: 130: for(cont= 0; cont<2;cont++)
 16326  0028A2  0E00               	movlw	0
 16327  0028A4  6E19               	movwf	isr@cont,c
 16328  0028A6                     i2l8480:
 16329  0028A6  0E01               	movlw	1
 16330  0028A8  6419               	cpfsgt	isr@cont,c
 16331  0028AA  D001               	goto	i2l63
 16332  0028AC  D019               	goto	i2u898_40
 16333  0028AE                     i2l63:
 16334                           
 16335                           ;main.c: 131: {
 16336                           ;main.c: 132: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 16337  0028AE  5019               	movf	isr@cont,w,c
 16338  0028B0  0D02               	mullw	2
 16339  0028B2  0EE9               	movlw	low _tempo_tarefa
 16340  0028B4  24F3               	addwf	prodl,w,c
 16341  0028B6  6ED9               	movwf	fsr2l,c
 16342  0028B8  0E00               	movlw	high _tempo_tarefa
 16343  0028BA  20F4               	addwfc	prodh,w,c
 16344  0028BC  6EDA               	movwf	fsr2h,c
 16345  0028BE  50DE               	movf	postinc2,w,c
 16346  0028C0  10DE               	iorwf	postinc2,w,c
 16347  0028C2  B4D8               	btfsc	status,2,c
 16348  0028C4  D00B               	goto	i2l65
 16349  0028C6  5019               	movf	isr@cont,w,c
 16350  0028C8  0D02               	mullw	2
 16351  0028CA  0EE9               	movlw	low _tempo_tarefa
 16352  0028CC  24F3               	addwf	prodl,w,c
 16353  0028CE  6ED9               	movwf	fsr2l,c
 16354  0028D0  0E00               	movlw	high _tempo_tarefa
 16355  0028D2  20F4               	addwfc	prodh,w,c
 16356  0028D4  6EDA               	movwf	fsr2h,c
 16357  0028D6  06DE               	decf	postinc2,f,c
 16358  0028D8  0E00               	movlw	0
 16359  0028DA  5ADD               	subwfb	postdec2,f,c
 16360  0028DC                     i2l65:
 16361  0028DC  2A19               	incf	isr@cont,f,c
 16362  0028DE  D7E3               	goto	i2l8480
 16363  0028E0                     i2u898_40:
 16364                           
 16365                           ;main.c: 133: }
 16366                           ;main.c: 136: if(tarefa_em_execucao == 1)
 16367  0028E0  0443               	decf	_tarefa_em_execucao,w,c	;volatile
 16368  0028E2  A4D8               	btfss	status,2,c
 16369  0028E4  D00C               	goto	i2l67
 16370                           
 16371                           ;main.c: 137: {
 16372                           ;main.c: 138: timeout_tarefa--;
 16373  0028E6  0100               	movlb	0	; () banked
 16374  0028E8  07F5               	decf	_timeout_tarefa& (0+255),f,b
 16375  0028EA  A0D8               	btfss	status,0,c
 16376  0028EC  07F6               	decf	(_timeout_tarefa+1)& (0+255),f,b
 16377                           
 16378                           ; BSR set to: 0
 16379                           ;main.c: 139: if(!timeout_tarefa)
 16380  0028EE  51F5               	movf	_timeout_tarefa& (0+255),w,b
 16381  0028F0  11F6               	iorwf	(_timeout_tarefa+1)& (0+255),w,b
 16382  0028F2  A4D8               	btfss	status,2,c
 16383  0028F4  D004               	goto	i2l67
 16384                           
 16385                           ; BSR set to: 0
 16386                           ;main.c: 140: {
 16387                           ;main.c: 142: PCLATH = 0;
 16388  0028F6  0E00               	movlw	0
 16389  0028F8  6EFA               	movwf	pclath,c	;volatile
 16390                           
 16391                           ;main.c: 143: PCL = 0;
 16392  0028FA  0E00               	movlw	0
 16393  0028FC  6EF9               	movwf	pcl,c	;volatile
 16394  0028FE                     i2l67:
 16395                           
 16396                           ;main.c: 144: }
 16397                           ;main.c: 145: }
 16398                           ;main.c: 148: write_timer_zero(0x0083);
 16399                           
 16400                           ; BSR set to: 0
 16401                           
 16402                           ; BSR set to: 0
 16403  0028FE  0E00               	movlw	0
 16404  002900  6E02               	movwf	i2write_timer_zero@timer0+1,c
 16405  002902  0E83               	movlw	131
 16406  002904  6E01               	movwf	i2write_timer_zero@timer0,c
 16407  002906  EC32  F01D         	call	i2_write_timer_zero	;wreg free
 16408  00290A                     i2l62:
 16409                           
 16410                           ;main.c: 150: }
 16411                           ;main.c: 152: if (INT0IF && INT0IE)
 16412  00290A  B2F2               	btfsc	intcon,1,c	;volatile
 16413  00290C  A8F2               	btfss	intcon,4,c	;volatile
 16414  00290E  D001               	goto	i2l68
 16415                           
 16416                           ;main.c: 153: {
 16417                           ;main.c: 154: INT0IF = 0;
 16418  002910  92F2               	bcf	intcon,1,c	;volatile
 16419  002912                     i2l68:
 16420  002912  C018  F049         	movff	??_isr+19,btemp+3
 16421  002916  C017  F048         	movff	??_isr+18,btemp+2
 16422  00291A  C016  F047         	movff	??_isr+17,btemp+1
 16423  00291E  C015  F046         	movff	??_isr+16,btemp
 16424  002922  C014  FFF5         	movff	??_isr+15,tablat
 16425  002926  C013  FFF8         	movff	??_isr+14,tblptru
 16426  00292A  C012  FFF7         	movff	??_isr+13,tblptrh
 16427  00292E  C011  FFF6         	movff	??_isr+12,tblptrl
 16428  002932  C010  FFF4         	movff	??_isr+11,prodh
 16429  002936  C00F  FFF3         	movff	??_isr+10,prodl
 16430  00293A  C00E  FFDA         	movff	??_isr+9,fsr2h
 16431  00293E  C00D  FFD9         	movff	??_isr+8,fsr2l
 16432  002942  C00C  FFE2         	movff	??_isr+7,fsr1h
 16433  002946  C00B  FFE1         	movff	??_isr+6,fsr1l
 16434  00294A  C00A  FFEA         	movff	??_isr+5,fsr0h
 16435  00294E  C009  FFE9         	movff	??_isr+4,fsr0l
 16436  002952  C008  FFFB         	movff	??_isr+3,pclatu
 16437  002956  C007  FFFA         	movff	??_isr+2,pclath
 16438  00295A  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16439  00295C  0011               	retfie		f
 16440  00295E                     __end_of_isr:
 16441                           	opt stack 0
 16442                           pclatu	equ	0xFFB
 16443                           pclath	equ	0xFFA
 16444                           pcl	equ	0xFF9
 16445                           tblptru	equ	0xFF8
 16446                           tblptrh	equ	0xFF7
 16447                           tblptrl	equ	0xFF6
 16448                           tablat	equ	0xFF5
 16449                           prodh	equ	0xFF4
 16450                           prodl	equ	0xFF3
 16451                           intcon	equ	0xFF2
 16452                           intcon2	equ	0xFF1
 16453                           intcon3	equ	0xFF0
 16454                           indf0	equ	0xFEF
 16455                           postinc0	equ	0xFEE
 16456                           fsr0h	equ	0xFEA
 16457                           fsr0l	equ	0xFE9
 16458                           wreg	equ	0xFE8
 16459                           indf1	equ	0xFE7
 16460                           postinc1	equ	0xFE6
 16461                           postdec1	equ	0xFE5
 16462                           plusw1	equ	0xFE3
 16463                           fsr1h	equ	0xFE2
 16464                           fsr1l	equ	0xFE1
 16465                           indf2	equ	0xFDF
 16466                           postinc2	equ	0xFDE
 16467                           postdec2	equ	0xFDD
 16468                           plusw2	equ	0xFDB
 16469                           fsr2h	equ	0xFDA
 16470                           fsr2l	equ	0xFD9
 16471                           status	equ	0xFD8
 16472                           
 16473 ;; *************** function i2_write_timer_zero *****************
 16474 ;; Defined at:
 16475 ;;		line 138 in file "bibliotecas/hardware.c"
 16476 ;; Parameters:    Size  Location     Type
 16477 ;;  timer0          2    0[COMRAM] unsigned int 
 16478 ;; Auto vars:     Size  Location     Type
 16479 ;;  write_timer_    2    2[COMRAM] struct Timers
 16480 ;; Return value:  Size  Location     Type
 16481 ;;                  1    wreg      void 
 16482 ;; Registers used:
 16483 ;;		None
 16484 ;; Tracked objects:
 16485 ;;		On entry : 0/0
 16486 ;;		On exit  : 0/0
 16487 ;;		Unchanged: 0/0
 16488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16489 ;;      Params:         2       0       0       0       0       0       0       0       0
 16490 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16491 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16492 ;;      Totals:         4       0       0       0       0       0       0       0       0
 16493 ;;Total ram usage:        4 bytes
 16494 ;; Hardware stack levels used:    1
 16495 ;; This function calls:
 16496 ;;		Nothing
 16497 ;; This function is called by:
 16498 ;;		_isr
 16499 ;; This function uses a non-reentrant model
 16500 ;;
 16501                           
 16502                           	psect	text69
 16503  003A64                     __ptext69:
 16504                           	opt stack 0
 16505  003A64                     i2_write_timer_zero:
 16506                           	opt stack 17
 16507                           
 16508                           ;hardware.c: 140: union Timers timer;
 16509                           ;hardware.c: 142: timer.lt = timer0;
 16510                           
 16511                           ;incstack = 0
 16512  003A64  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 16513  003A68  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 16514                           
 16515                           ;hardware.c: 144: TMR0H = timer.bt[1];
 16516  003A6C  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 16517                           
 16518                           ;hardware.c: 145: TMR0L = timer.bt[0];
 16519  003A70  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 16520  003A74  0012               	return		;funcret
 16521  003A76                     __end_ofi2_write_timer_zero:
 16522                           	opt stack 0
 16523                           pclatu	equ	0xFFB
 16524                           pclath	equ	0xFFA
 16525                           pcl	equ	0xFF9
 16526                           tblptru	equ	0xFF8
 16527                           tblptrh	equ	0xFF7
 16528                           tblptrl	equ	0xFF6
 16529                           tablat	equ	0xFF5
 16530                           prodh	equ	0xFF4
 16531                           prodl	equ	0xFF3
 16532                           intcon	equ	0xFF2
 16533                           intcon2	equ	0xFF1
 16534                           intcon3	equ	0xFF0
 16535                           indf0	equ	0xFEF
 16536                           postinc0	equ	0xFEE
 16537                           fsr0h	equ	0xFEA
 16538                           fsr0l	equ	0xFE9
 16539                           wreg	equ	0xFE8
 16540                           indf1	equ	0xFE7
 16541                           postinc1	equ	0xFE6
 16542                           postdec1	equ	0xFE5
 16543                           plusw1	equ	0xFE3
 16544                           fsr1h	equ	0xFE2
 16545                           fsr1l	equ	0xFE1
 16546                           indf2	equ	0xFDF
 16547                           postinc2	equ	0xFDE
 16548                           postdec2	equ	0xFDD
 16549                           plusw2	equ	0xFDB
 16550                           fsr2h	equ	0xFDA
 16551                           fsr2l	equ	0xFD9
 16552                           status	equ	0xFD8
 16553                           
 16554 ;; *************** function _recebe_dado_uart *****************
 16555 ;; Defined at:
 16556 ;;		line 138 in file "bibliotecas/uart.c"
 16557 ;; Parameters:    Size  Location     Type
 16558 ;;		None
 16559 ;; Auto vars:     Size  Location     Type
 16560 ;;		None
 16561 ;; Return value:  Size  Location     Type
 16562 ;;                  1    wreg      unsigned char 
 16563 ;; Registers used:
 16564 ;;		wreg, status,2
 16565 ;; Tracked objects:
 16566 ;;		On entry : 0/0
 16567 ;;		On exit  : 0/0
 16568 ;;		Unchanged: 0/0
 16569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16570 ;;      Params:         0       0       0       0       0       0       0       0       0
 16571 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16572 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16573 ;;      Totals:         0       0       0       0       0       0       0       0       0
 16574 ;;Total ram usage:        0 bytes
 16575 ;; Hardware stack levels used:    1
 16576 ;; This function calls:
 16577 ;;		Nothing
 16578 ;; This function is called by:
 16579 ;;		_isr
 16580 ;;		_recebe_string_uart
 16581 ;; This function uses a non-reentrant model
 16582 ;;
 16583                           
 16584                           	psect	text70
 16585  003A76                     __ptext70:
 16586                           	opt stack 0
 16587  003A76                     _recebe_dado_uart:
 16588                           	opt stack 17
 16589                           
 16590                           ;uart.c: 140: while(RCIF==0);
 16591                           
 16592                           ;incstack = 0
 16593  003A76  AA9E               	btfss	3998,5,c	;volatile
 16594  003A78  D7FE               	goto	_recebe_dado_uart
 16595                           
 16596                           ;uart.c: 141: if(RCSTAbits.OERR)
 16597  003A7A  A2AB               	btfss	4011,1,c	;volatile
 16598  003A7C  D003               	goto	i2l783
 16599                           
 16600                           ;uart.c: 142: {
 16601                           ;uart.c: 143: CREN = 0;
 16602  003A7E  98AB               	bcf	4011,4,c	;volatile
 16603                           
 16604                           ;uart.c: 144: __nop();
 16605  003A80  F000               	nop	
 16606                           
 16607                           ;uart.c: 145: CREN=1;
 16608  003A82  88AB               	bsf	4011,4,c	;volatile
 16609  003A84                     i2l783:
 16610                           
 16611                           ;uart.c: 146: }
 16612                           ;uart.c: 147: return(RCREG);
 16613  003A84  50AE               	movf	4014,w,c	;volatile
 16614  003A86  0012               	return	
 16615  003A88                     __end_of_recebe_dado_uart:
 16616                           	opt stack 0
 16617                           pclatu	equ	0xFFB
 16618                           pclath	equ	0xFFA
 16619                           pcl	equ	0xFF9
 16620                           tblptru	equ	0xFF8
 16621                           tblptrh	equ	0xFF7
 16622                           tblptrl	equ	0xFF6
 16623                           tablat	equ	0xFF5
 16624                           prodh	equ	0xFF4
 16625                           prodl	equ	0xFF3
 16626                           intcon	equ	0xFF2
 16627                           intcon2	equ	0xFF1
 16628                           intcon3	equ	0xFF0
 16629                           indf0	equ	0xFEF
 16630                           postinc0	equ	0xFEE
 16631                           fsr0h	equ	0xFEA
 16632                           fsr0l	equ	0xFE9
 16633                           wreg	equ	0xFE8
 16634                           indf1	equ	0xFE7
 16635                           postinc1	equ	0xFE6
 16636                           postdec1	equ	0xFE5
 16637                           plusw1	equ	0xFE3
 16638                           fsr1h	equ	0xFE2
 16639                           fsr1l	equ	0xFE1
 16640                           indf2	equ	0xFDF
 16641                           postinc2	equ	0xFDE
 16642                           postdec2	equ	0xFDD
 16643                           plusw2	equ	0xFDB
 16644                           fsr2h	equ	0xFDA
 16645                           fsr2l	equ	0xFD9
 16646                           status	equ	0xFD8
 16647                           pclatu	equ	0xFFB
 16648                           pclath	equ	0xFFA
 16649                           pcl	equ	0xFF9
 16650                           tblptru	equ	0xFF8
 16651                           tblptrh	equ	0xFF7
 16652                           tblptrl	equ	0xFF6
 16653                           tablat	equ	0xFF5
 16654                           prodh	equ	0xFF4
 16655                           prodl	equ	0xFF3
 16656                           intcon	equ	0xFF2
 16657                           intcon2	equ	0xFF1
 16658                           intcon3	equ	0xFF0
 16659                           indf0	equ	0xFEF
 16660                           postinc0	equ	0xFEE
 16661                           fsr0h	equ	0xFEA
 16662                           fsr0l	equ	0xFE9
 16663                           wreg	equ	0xFE8
 16664                           indf1	equ	0xFE7
 16665                           postinc1	equ	0xFE6
 16666                           postdec1	equ	0xFE5
 16667                           plusw1	equ	0xFE3
 16668                           fsr1h	equ	0xFE2
 16669                           fsr1l	equ	0xFE1
 16670                           indf2	equ	0xFDF
 16671                           postinc2	equ	0xFDE
 16672                           postdec2	equ	0xFDD
 16673                           plusw2	equ	0xFDB
 16674                           fsr2h	equ	0xFDA
 16675                           fsr2l	equ	0xFD9
 16676                           status	equ	0xFD8
 16677                           
 16678                           	psect	rparam
 16679  0000                     pclatu	equ	0xFFB
 16680                           pclath	equ	0xFFA
 16681                           pcl	equ	0xFF9
 16682                           tblptru	equ	0xFF8
 16683                           tblptrh	equ	0xFF7
 16684                           tblptrl	equ	0xFF6
 16685                           tablat	equ	0xFF5
 16686                           prodh	equ	0xFF4
 16687                           prodl	equ	0xFF3
 16688                           intcon	equ	0xFF2
 16689                           intcon2	equ	0xFF1
 16690                           intcon3	equ	0xFF0
 16691                           indf0	equ	0xFEF
 16692                           postinc0	equ	0xFEE
 16693                           fsr0h	equ	0xFEA
 16694                           fsr0l	equ	0xFE9
 16695                           wreg	equ	0xFE8
 16696                           indf1	equ	0xFE7
 16697                           postinc1	equ	0xFE6
 16698                           postdec1	equ	0xFE5
 16699                           plusw1	equ	0xFE3
 16700                           fsr1h	equ	0xFE2
 16701                           fsr1l	equ	0xFE1
 16702                           indf2	equ	0xFDF
 16703                           postinc2	equ	0xFDE
 16704                           postdec2	equ	0xFDD
 16705                           plusw2	equ	0xFDB
 16706                           fsr2h	equ	0xFDA
 16707                           fsr2l	equ	0xFD9
 16708                           status	equ	0xFD8
 16709                           
 16710                           	psect	temp
 16711  000046                     btemp:
 16712                           	opt stack 0
 16713  000046                     	ds	1
 16714  0000                     int$flags	set	btemp
 16715  0000                     wtemp6	set	btemp+1
 16716                           pclatu	equ	0xFFB
 16717                           pclath	equ	0xFFA
 16718                           pcl	equ	0xFF9
 16719                           tblptru	equ	0xFF8
 16720                           tblptrh	equ	0xFF7
 16721                           tblptrl	equ	0xFF6
 16722                           tablat	equ	0xFF5
 16723                           prodh	equ	0xFF4
 16724                           prodl	equ	0xFF3
 16725                           intcon	equ	0xFF2
 16726                           intcon2	equ	0xFF1
 16727                           intcon3	equ	0xFF0
 16728                           indf0	equ	0xFEF
 16729                           postinc0	equ	0xFEE
 16730                           fsr0h	equ	0xFEA
 16731                           fsr0l	equ	0xFE9
 16732                           wreg	equ	0xFE8
 16733                           indf1	equ	0xFE7
 16734                           postinc1	equ	0xFE6
 16735                           postdec1	equ	0xFE5
 16736                           plusw1	equ	0xFE3
 16737                           fsr1h	equ	0xFE2
 16738                           fsr1l	equ	0xFE1
 16739                           indf2	equ	0xFDF
 16740                           postinc2	equ	0xFDE
 16741                           postdec2	equ	0xFDD
 16742                           plusw2	equ	0xFDB
 16743                           fsr2h	equ	0xFDA
 16744                           fsr2l	equ	0xFD9
 16745                           status	equ	0xFD8


Data Sizes:
    Strings     239
    Constant    203
    Data        29
    BSS         934
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      69
    BANK0           160    137     151
    BANK1           256     66     249
    BANK2           256      0     198
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), f_rename@fn(COMRAM[12]), f_utime@fn(COMRAM[12]), f_chmod@fn(COMRAM[12]), 
		 -> f_mkdir@fn(COMRAM[12]), f_unlink@fn(COMRAM[12]), f_stat@fn(COMRAM[12]), f_opendir@fn(COMRAM[12]), 
		 -> f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), gps@gps_buffer(COMRAM[15]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), f_rename@fn(COMRAM[12]), f_utime@fn(COMRAM[12]), f_chmod@fn(COMRAM[12]), 
		 -> f_mkdir@fn(COMRAM[12]), f_unlink@fn(COMRAM[12]), f_stat@fn(COMRAM[12]), f_opendir@fn(COMRAM[12]), 
		 -> f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), gps@gps_buffer(COMRAM[15]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), f_rename@direntry(COMRAM[21]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), f_rename@direntry(COMRAM[21]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), f_rename@direntry(COMRAM[21]), f_rename@fn(COMRAM[12]), f_mkdir@fn(COMRAM[12]), 
		 -> f_open@fn(BANK1[12]), NULL(NULL[0]), STR_13(CODE[5]), fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), f_rename@direntry(COMRAM[21]), f_rename@fn(COMRAM[12]), f_mkdir@fn(COMRAM[12]), 
		 -> f_open@fn(BANK1[12]), NULL(NULL[0]), STR_13(CODE[5]), fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_rename@fn(COMRAM[12]), f_utime@fn(COMRAM[12]), f_chmod@fn(COMRAM[12]), f_mkdir@fn(COMRAM[12]), 
		 -> f_unlink@fn(COMRAM[12]), f_stat@fn(COMRAM[12]), f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 
		 -> STR_27(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_truncate@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_truncate@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> SDCard@fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> SDCard@fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> SDCard@fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@bw(BANK1[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 5
		 -> STR_13(CODE[5]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_13(CODE[5]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), f_rename@direntry(COMRAM[21]), NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_12(CODE[10]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> SDCard@fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_rename@path_old(COMRAM[2]), f_utime@path(COMRAM[2]), f_chmod@path(COMRAM[2]), f_mkdir@path(COMRAM[2]), 
		 -> f_unlink@path(COMRAM[2]), f_getfree@drv(COMRAM[2]), f_stat@path(COMRAM[2]), f_opendir@path(COMRAM[2]), 
		 -> f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_12(CODE[10]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_rename@dir_new(COMRAM[2]), f_mkdir@dir(COMRAM[2]), f_open@dir(BANK1[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_rename@dj(COMRAM[14]), f_mkdir@dj(COMRAM[14]), f_open@dj(BANK1[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_rename@fn(COMRAM[12]), f_utime@fn(COMRAM[12]), f_chmod@fn(COMRAM[12]), f_mkdir@fn(COMRAM[12]), 
		 -> f_unlink@fn(COMRAM[12]), f_stat@fn(COMRAM[12]), f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    trace_path@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_rename@dir_new(COMRAM[2]), f_rename@dir_old(COMRAM[2]), f_utime@dir(COMRAM[2]), f_chmod@dir(COMRAM[2]), 
		 -> f_mkdir@dir(COMRAM[2]), f_unlink@dir(COMRAM[2]), f_stat@dir(COMRAM[2]), f_opendir@dir(COMRAM[2]), 
		 -> f_open@dir(BANK1[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_12(CODE[10]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_rename@dj(COMRAM[14]), f_utime@dj(COMRAM[14]), f_chmod@dj(COMRAM[14]), f_mkdir@dj(COMRAM[14]), 
		 -> f_unlink@dj(COMRAM[14]), f_stat@dj(COMRAM[14]), f_open@dj(BANK1[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    make_dirfile@dirname	PTR unsigned char  size(2) Largest target is 12
		 -> f_rename@fn(COMRAM[12]), f_utime@fn(COMRAM[12]), f_chmod@fn(COMRAM[12]), f_mkdir@fn(COMRAM[12]), 
		 -> f_unlink@fn(COMRAM[12]), f_stat@fn(COMRAM[12]), f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    S2262_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_rename@dj(COMRAM[14]), f_utime@dj(COMRAM[14]), f_chmod@dj(COMRAM[14]), f_mkdir@dj(COMRAM[14]), 
		 -> f_unlink@dj(COMRAM[14]), f_stat@dj(COMRAM[14]), f_open@dj(BANK1[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), STR_13(CODE[5]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), STR_13(CODE[5]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 18
		 -> STR_26(CODE[13]), STR_25(CODE[7]), STR_24(CODE[11]), STR_23(CODE[9]), 
		 -> STR_22(CODE[11]), STR_21(CODE[10]), STR_20(CODE[16]), STR_19(CODE[16]), 
		 -> STR_18(CODE[11]), escreve_inteiro_lcd@texto(BANK0[7]), leitura_chave@pos_ignicao_on(COMRAM[17]), leitura_chave@pos_ignicao_crank(COMRAM[17]), 
		 -> leitura_chave@pos_ignicao_off(COMRAM[17]), STR_16(CODE[17]), STR_15(CODE[14]), STR_14(CODE[18]), 
		 -> STR_11(CODE[16]), STR_10(CODE[14]), STR_5(CODE[5]), gps@gps_buffer(COMRAM[15]), 
		 -> dado_buffer(BANK1[7]), STR_2(CODE[6]), data_buffer(BANK1[15]), STR_1(CODE[6]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    S665_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S665_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), f_rename@fn(COMRAM[12]), f_utime@fn(COMRAM[12]), f_chmod@fn(COMRAM[12]), 
		 -> f_mkdir@fn(COMRAM[12]), f_unlink@fn(COMRAM[12]), f_stat@fn(COMRAM[12]), f_opendir@fn(COMRAM[12]), 
		 -> f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), gps@gps_buffer(COMRAM[15]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _inicializa_SPI->_posicao_cursor_lcd
    _SDCard->_escreve_inteiro_lcd
    _make_dirfile->_memset
    _clust2sect->___lmul
    _auto_mount->_escreve_inteiro_lcd
    _sdc_disk_initialize->_escreve_inteiro_lcd
    _sdc_reset->_escreve_inteiro_lcd
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sdc_disk_write->_escreve_inteiro_lcd
    _disk_read->_escreve_inteiro_lcd
    _sdc_disk_read->_escreve_inteiro_lcd
    _proceed->_WriteSPI_
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _escreve_cmd_lcd->_delay
    _command->_posicao_cursor_lcd
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _main->_SDCard
    _SDCard->_f_write
    _f_write->_create_chain
    _f_open->_trace_path
    _trace_path->_next_dir_entry
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _create_chain->_put_cluster
    _remove_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_escreve_inteiro_lcd
    _check_fs->_disk_read
    _f_close->_f_sync
    _f_sync->_sync
    _sync->_move_window
    _move_window->_disk_read
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_escreve_inteiro_lcd
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_escreve_inteiro_lcd
    _escreve_inteiro_lcd->_itoa

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_SDCard
    _SDCard->_f_open

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1276226
                             _SDCard
                        _escalonador
                     _inicializa_SPI
                 _inicializa_tarefas
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    7453
                                             31 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_SPI                                       3     1      2    7553
                                             31 COMRAM     2     0      2
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0     134
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SDCard                                              35    35      0 1260278
                                            135 BANK0      2     2      0
                                             35 BANK1     31    31      0
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                            _f_close
                            _f_mount
                             _f_open
                            _f_write
                 _posicao_cursor_lcd
                            _proceed
 ---------------------------------------------------------------------------------
 (2) _f_write                                             33    25      8  259919
                                            102 BANK0     33    25      8
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_open                                              44    39      5  840248
                                            121 BANK0      9     4      5
                                              0 BANK1     35    35      0
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (3) _trace_path                                          23    15      8  160110
                                             98 BANK0     23    15      8
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (4) _make_dirfile                                        13     9      4    3833
                                             33 COMRAM     6     2      4
                                              0 BANK0      7     7      0
                             _memset
 ---------------------------------------------------------------------------------
 (3) _reserve_direntry                                    18    14      4  335740
                                            102 BANK0     18    14      4
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (4) _next_dir_entry                                      13    11      2   78397
                                             85 BANK0     13    11      2
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (3) _clust2sect                                          11     7      4    1963
                                             37 COMRAM     6     2      4
                                              0 BANK0      5     5      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _create_chain                                        14    12      2  152842
                                             88 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (3) _remove_chain                                         8     6      2  151959
                                             88 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (4) _put_cluster                                         22    18      4   75801
                                             66 BANK0     22    18      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_cluster                                         19    17      2   75510
                                             66 BANK0     19    17      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3328
                                             25 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6    2368
                                             25 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (3) _auto_mount                                          40    37      3  114336
                                             53 BANK0     40    37      3
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                _escreve_inteiro_lcd
                             _memset
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6    2297
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                      4     4      0   52405
                                             33 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (5) _sdc_disk_initialize                                 13    13      0   52275
                                             20 BANK0     13    13      0
                            _command
                       _dummy_clocks
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (6) _sdc_reset                                           20    20      0   25383
                                             13 BANK0      7     7      0
                            _command
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (4) _check_fs                                             8     4      4   41266
                                             45 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (4) _memcmp                                               9     3      6     701
                                             25 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     812
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    1525
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _f_mount                                              3     1      2     164
                                             25 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _f_close                                              3     1      2  144251
                                             77 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (3) _f_sync                                               9     7      2  144058
                                             68 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (3) _validate                                             6     2      4    1430
                                             32 COMRAM     6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (4) _disk_status                                          5     5      0     226
                                             27 COMRAM     5     5      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (5) _sdc_disk_status                                      4     4      0      34
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _sync                                                 2     2      0   71067
                                             66 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _move_window                                         21    17      4   70793
                                             45 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (4) _disk_write                                          12     5      7   27889
                                             32 BANK0     12     5      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (5) _sdc_disk_write                                      19    12      7   26155
                                             13 BANK0     19    12      7
                           _ReadSPI_
                          _WriteSPI_
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (4) _disk_read                                           13     6      7   40258
                                             32 BANK0     13     6      7
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (5) _sdc_disk_read                                       24    17      7   26728
                                             13 BANK0     19    12      7
                            _command
                       _dummy_clocks
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (6) _response                                             1     1      0      34
                                             25 COMRAM     1     1      0
                           _ReadSPI_
 ---------------------------------------------------------------------------------
 (2) _proceed                                              0     0      0      34
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (6) _escreve_inteiro_lcd                                  9     7      2    8195
                                             43 COMRAM     2     0      2
                                              6 BANK0      7     7      0
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (7) _itoa                                                 8     2      6    3936
                                             41 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                               _utoa
 ---------------------------------------------------------------------------------
 (8) _utoa                                                 9     3      6    3163
                                             32 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              5     1      4    1132
                                             25 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) ___lwdiv                                              7     3      4    1321
                                             25 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (6) _dummy_clocks                                         5     5      0      68
                                             25 COMRAM     5     5      0
                           _ReadSPI_
 ---------------------------------------------------------------------------------
 (6) _command                                              7     2      5   10051
                                             31 COMRAM     7     2      5
                          _WriteSPI_
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                         _wait_ready
 ---------------------------------------------------------------------------------
 (7) _wait_ready                                          15    15      0      99
                                             25 COMRAM     5     5      0
                           _ReadSPI_
 ---------------------------------------------------------------------------------
 (7) _ReadSPI_                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    4107
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2789
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _WriteSPI_                                            2     2      0      34
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _disk_ioctl                                           7     4      3     240
                                             25 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (3) _get_fattime                                         51    47      4     201
                                             25 COMRAM    13     9      4
                                              0 BANK0     38    38      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _isr                                                21    21      0     183
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (14) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (14) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SDCard
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _escreve_inteiro_lcd
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _f_close
       _f_sync
         _get_fattime
         _move_window
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _WriteSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _escreve_cmd_lcd
                 _delay
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
           _disk_write
             _sdc_disk_write
               _ReadSPI_
               _WriteSPI_
               _command
                 _WriteSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
         _sync
           _disk_ioctl
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _escreve_cmd_lcd
                   _delay
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _disk_write
               _sdc_disk_write
                 _ReadSPI_
                 _WriteSPI_
                 _command
                   _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
         _validate
           _disk_status
             _sdc_disk_status
     _f_mount
     _f_open
       _auto_mount
         ___lldiv
         ___lmul
         _check_fs
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _WriteSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _escreve_cmd_lcd
                 _delay
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
           _memcmp
         _disk_initialize
           _sdc_disk_initialize
             _command
               _WriteSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _wait_ready
                 _ReadSPI_
             _dummy_clocks
               _ReadSPI_
             _escreve_cmd_lcd
               _delay
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _ReadSPI_
             _sdc_reset
               _command
                 _WriteSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _wait_ready
                   _ReadSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
         _disk_status
           _sdc_disk_status
         _escreve_inteiro_lcd
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
         _memset
         _posicao_cursor_lcd
           _endereco_cursor_lcd
             _delay
       _get_fattime
       _memcpy
       _memset
       _move_window
         _disk_read
           _escreve_inteiro_lcd
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _sdc_disk_read
             _command
               _WriteSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _wait_ready
                 _ReadSPI_
             _dummy_clocks
               _ReadSPI_
             _escreve_cmd_lcd
               _delay
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _ReadSPI_
         _disk_write
           _sdc_disk_write
             _ReadSPI_
             _WriteSPI_
             _command
               _WriteSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _wait_ready
                 _ReadSPI_
             _dummy_clocks
               _ReadSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _ReadSPI_
       _remove_chain
         _get_cluster
           ___wmul
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _escreve_cmd_lcd
                   _delay
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _disk_write
               _sdc_disk_write
                 _ReadSPI_
                 _WriteSPI_
                 _command
                   _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
         _put_cluster
           ___wmul
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _escreve_cmd_lcd
                   _delay
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _disk_write
               _sdc_disk_write
                 _ReadSPI_
                 _WriteSPI_
                 _command
                   _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
       _reserve_direntry
         _clust2sect
           ___lmul
         _create_chain
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _WriteSPI_
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _escreve_cmd_lcd
                     _delay
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
           _put_cluster
             ___wmul
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _WriteSPI_
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _escreve_cmd_lcd
                     _delay
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
         _disk_write
           _sdc_disk_write
             _ReadSPI_
             _WriteSPI_
             _command
               _WriteSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _wait_ready
                 _ReadSPI_
             _dummy_clocks
               _ReadSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _ReadSPI_
         _memset
         _move_window
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _WriteSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _escreve_cmd_lcd
                 _delay
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
           _disk_write
             _sdc_disk_write
               _ReadSPI_
               _WriteSPI_
               _command
                 _WriteSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
         _next_dir_entry
           _clust2sect
             ___lmul
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _WriteSPI_
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _escreve_cmd_lcd
                     _delay
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
       _trace_path
         _clust2sect
           ___lmul
         _make_dirfile
           _memset
         _memcmp
         _move_window
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _WriteSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _escreve_cmd_lcd
                 _delay
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
           _disk_write
             _sdc_disk_write
               _ReadSPI_
               _WriteSPI_
               _command
                 _WriteSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
         _next_dir_entry
           _clust2sect
             ___lmul
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _WriteSPI_
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _escreve_cmd_lcd
                     _delay
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
     _f_write
       _clust2sect
         ___lmul
       _create_chain
         _get_cluster
           ___wmul
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _escreve_cmd_lcd
                   _delay
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _disk_write
               _sdc_disk_write
                 _ReadSPI_
                 _WriteSPI_
                 _command
                   _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
         _put_cluster
           ___wmul
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _escreve_cmd_lcd
                   _delay
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _disk_write
               _sdc_disk_write
                 _ReadSPI_
                 _WriteSPI_
                 _command
                   _WriteSPI_
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
       _disk_write
         _sdc_disk_write
           _ReadSPI_
           _WriteSPI_
           _command
             _WriteSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _wait_ready
               _ReadSPI_
           _dummy_clocks
             _ReadSPI_
           _escreve_frase_ram_lcd
             _escreve_caractere_lcd
               _delay
           _escreve_inteiro_lcd
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _proceed
             _WriteSPI_
           _response
             _ReadSPI_
       _memcpy
       _move_window
         _disk_read
           _escreve_inteiro_lcd
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _sdc_disk_read
             _command
               _WriteSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _wait_ready
                 _ReadSPI_
             _dummy_clocks
               _ReadSPI_
             _escreve_cmd_lcd
               _delay
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _ReadSPI_
         _disk_write
           _sdc_disk_write
             _ReadSPI_
             _WriteSPI_
             _command
               _WriteSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _wait_ready
                 _ReadSPI_
             _dummy_clocks
               _ReadSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _ReadSPI_
       _validate
         _disk_status
           _sdc_disk_status
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay
     _proceed
       _WriteSPI_
   _escalonador
   _inicializa_SPI
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay
   _inicializa_tarefas
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C6       9       77.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     42      F9       7       97.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     89      97       5       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     29B      20        0.0%
DATA                 0      0     4BB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 07 18:42:05 2022

             next_dir_entry@idx 00C0        __end_of_mensagem_inicial 31C8                               _s 003B  
           next_dir_entry@clust 00BE                     _SSPSTATbits 000FC7                ??_init_interrupt 001A  
                            l75 31D4                              l83 387A                              l77 323E  
  __size_of_escreve_inteiro_lcd 003E                              _fs 02C6                              _rd 00F3  
           ___wmul@multiplicand 001C                     _put_cluster 1794                disk_write@sector 0082  
                  ?_escalonador 0001                  create_chain@fs 00BE                disk_write@result 0089  
                           l303 3840                             l312 389A                             l304 3834  
                           l401 3A5E                             l500 33B4                             l501 33BC  
                           l510 33F2                             l502 33BE                             l503 33D2  
                           l319 3422                             l327 26FE                             l504 33D4  
                           l520 335C                             l328 26E6                             l505 33DC  
                           l521 336A                             l329 26B8                             l530 32D8  
                           l506 33DE                             l514 3390                             l531 32DA  
                           l507 33E6                             l515 3370                             l540 3316  
                           l532 32E2                             l508 33E8                             l516 3334  
                           l541 3318                             l533 32E4                             l509 33F0  
                           l517 338C                             l534 32F8                             l526 32C4  
                           l518 3340                             l535 32FA                             l527 32C6  
                           l519 334E                             l536 3302                             l528 32CE  
                           l560 35BA                             l480 2F54                             l465 399C  
                           l537 3304                             l529 32D0                             l481 2F5C  
                           l538 330C                             l490 2F92                             l482 2F5E  
                           l467 39AA                             l539 330E                             l395 3AB0  
                           l483 2F72                             l475 2F3E                             l484 2F74  
                           l476 2F40                             l900 0BC2                             l485 2F7C  
                           l477 2F48                             l901 0BCC                             l486 2F7E  
                           l478 2F4A                             l902 0BEE                             l559 35E2  
                           l487 2F86                             l479 2F52                             l911 0CD4  
                           l488 2F88                             l497 33A8                             l489 2F90  
                           l841 3786                             l498 33AA                             l842 3764  
                           l922 0DCE                             l906 0C38                             l850 37E2  
                           l499 33B2                             l923 0DF6                             l860 2B6A  
                           l844 3770                             l852 37EE                             l861 2BD6  
                           l845 3782                             l933 0EC0                             l853 37FA  
                           l950 2106                             l942 205C                             l919 0D90  
                           l944 208C                             l960 25B0                             l928 0E58  
                           l873 3952                             l945 2070                             l857 2BDA  
                           l865 30B2                             l881 2A80                             l929 0E80  
                           l849 37FE                             l874 3946                             l938 2038  
                           l858 2B38                             l866 304A                             l882 2A9E  
                           l947 20B8                             l939 2024                             l955 24BC  
                           l876 394A                             l948 20A0                             l868 307C  
                           l892 0B56                             l877 394E                             l957 24F0  
                           l869 30AE                             l965 3A2A                             l893 0B82  
                           l886 2B12                             l959 2588                             l887 2B28  
                           l895 0B8E                             l995 1E72                             l899 0DA0  
                           l998 1EF8                             _PCL 000FF9                             _PR2 000FCB  
                           _E_W 0041                ??_init_oscilador 001A                             _n_s 0042  
                           _isr 0008                             _txt 0134                    disk_read@res 008C  
                           prod 000FF3                  ??_create_chain 00BA                             wreg 000FE8  
     __size_of_write_timer_zero 0012                 create_chain@mcl 00BC                 create_chain@ncl 00C4  
               create_chain@scl 00C2         ??_escreve_frase_ram_lcd 001F                            l1000 1FA2  
                          l1001 1F84                            l1010 1C0A                            l1011 1A5A  
                          l1004 34F0                            l1020 1B9C                            l1013 1C24  
                          l1006 350C                            l1031 188A                            l1111 245C  
                          l1200 3040                            l1016 1B7C                            l1024 19DE  
                          l1040 19DA                            l1032 18E6                            l1120 2390  
                          l1025 17BC                            l1210 0676                            l1034 193E  
                          l1026 181C                            l1106 2308                            l1211 0672  
                          l1203 05F6                            l1043 2D26                            l1131 23D0  
                          l1123 23C0                            l1107 2362                            l1220 08E0  
                          l1212 06A4                            l1204 05F0                            l1044 2CB4  
                          l1300 019E                            l1221 09D2                            l1213 06B0  
                          l1037 19FA                            l1029 1856                            l1045 2CD6  
                          l1061 1CCE                            l1141 241A                            l1133 23D8  
                          l2110 3584                            l2030 2DD0                            l1222 09E8  
                          l1206 0620                            l1038 1968                            l1070 1DA8  
                          l1062 1CDE                            l1054 1C8C                            l1134 23E0  
                          l1310 0308                            l1302 01BE                            l2111 357C  
                          l2023 36C2                            l1215 073A                            l1207 0646  
                          l1039 199C                            l1047 2CF4                            l1071 1DE6  
                          l1143 241C                            l1135 23E8                            l2120 36F6  
                          l1232 3616                            l1216 075C                            l1048 2D1E  
                          l1064 1D0C                            l1128 23BA                            l1312 051E  
                          l2121 36EE                            l1225 3688                            l1321 283A  
                          l1129 243C                            l1161 166A                            l1153 15C2  
                          l1241 0F0C                            l1313 03D0                            l2114 35A4  
                          l1322 2782                            l1234 3630                            l1066 1D54  
                          l1058 1CD6                            l1074 2C48                            l1138 2402  
                          l2115 35AE                            l2027 2D58                            l1235 3650  
                          l1219 07A4                            l1067 1D3C                            l1059 1CB8  
                          l1083 22C2                            l1147 2438                            l1171 1704  
                          l1243 112C                            l2124 370E                            l1084 2284  
                          l1172 1718                            l1164 16BA                            l1156 15E4  
                          l1252 10CC                            l1244 0FCC                            l1308 05C8  
                          l1316 04A0                            l2125 3718                            l2029 2D92  
                          l1229 3698                            l2061 312E                            l2141 34A6  
                          l1069 1D78                            l1181 13AA                            l1149 243A  
                          l1165 16E8                            l1253 109C                            l1245 0F58  
                          l1317 05B4                            l1309 0360                            l2062 313C  
                          l2134 2F14                            l2142 3470                            l1158 1610  
                          l1262 1170                            l1246 0F7C                            l2135 2E94  
                          l1079 21DA                            l1191 14C8                            l1159 1676  
                          l2136 2F0C                            l1192 1488                            l1176 12D6  
                          l1168 16DC                            l1248 0FD6                            l2057 30FA  
                          l1193 14B8                            l1185 13F4                            l1177 12FE  
                          l1249 0FFE                            l2058 30EE                            l1178 1312  
                          l1258 1138                            l2147 38DA                            l1179 133E  
                          l1259 1154                            l1291 0062                            l2148 38CA  
                          l1188 141A                            l1197 2FF4                            l1293 0076  
                          l1294 008A                            l1199 3014                            l1296 0558  
                          l1297 00E2                            l1298 03DE                            l1299 0218  
                          l1581 3520                            l1582 3534                            ?_isr 0001  
                          l7958 31CC           _escreve_caractere_lcd 32B4                            STR_1 625A  
                          STR_2 6260                            STR_3 6266                            STR_5 6271  
                          STR_6 627D                            STR_9 624A                  timer_dois@flag 0038  
                          _BRGH 007D62                            _T0IF 007F92                            _CREN 007D5C  
                          _LATB 000F8A                            _PIE1 000F9D                            _RCIF 007CF5  
                          i2l61 2896                            i2l62 290A                            i2l63 28AE  
                          i2l65 28DC                            i2l67 28FE                            i2l68 2912  
                          _TMR2 000FCC                            _SPEN 007D5F                            _TRMT 007D61  
                          _TXEN 007D65                            _SYNC 007D64                    trace_path@dj 00C2  
                  trace_path@fn 00C4                    trace_path@ds 00D6                    trace_path@fs 00D2  
                 ?_make_dirfile 0022                            _dado 003A                            _buff 0120  
                          _main 3854                            _fsid 00ED                            _itoa 369C  
                          fsr0h 000FEA                            fsr1h 000FE2                            indf0 000FEF  
                          fsr2h 000FDA                            fsr0l 000FE9                            indf1 000FE7  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 0046                            _utoa 2D50                            _sync 34B8  
                 disk_ioctl@cmd 001A                   disk_read@buff 0080                   disk_ioctl@res 001E  
                 disk_read@pdrv 0089                            prodh 000FF4                            prodl 000FF3  
                          start 000E       sdc_disk_initialize@buff_i 007C                    ___param_bank 000000  
     sdc_disk_initialize@count1 0078       sdc_disk_initialize@count2 007E                           ??_isr 0005  
                         l10170 39A2                           l10164 3994                           l11270 1CDE  
                         l11184 2E94                           l11266 1CB8                           l11508 3684  
                         l10910 0C10                           l10826 38CA                           l11810 0758  
                         l10748 2AD6                           l10598 24E4                           l10782 1EF0  
                         l10926 0C5A                           l10966 0D1A                           l11858 3470  
                         ?_main 0001                           ?_itoa 0060                           _EEADR 000FA9  
                         STR_10 61F1                           STR_11 61D3                           STR_12 6237  
                         STR_20 61C3                           STR_13 626C                           STR_21 622D  
                         STR_22 620C                           STR_14 6190                           STR_23 6241  
                         STR_15 61E3                           STR_24 6217                           STR_16 61A2  
                         STR_17 627A                           STR_25 6253                           STR_18 6222  
                         STR_26 61FF                           STR_27 6276                           STR_19 61B3  
               __end_of___lldiv 314E                           ?_utoa 0021                           ?_sync 0001  
                         u12200 2520                           _T0CON 000FD5                           u12050 2FB4  
                         u13010 1DD4                           u13100 233C                           u11600 39B0  
                         u12081 37A8                           u12330 1F48                           u12250 2AD6  
                         u12410 0B9E                           u14010 09CE                           u13210 23A8  
                         u12420 0BAE                           u14020 09E4                           u12165 248E  
                         u14005 08F8                           u11630 3588                           u12190 2510  
                         u12510 0D1A                           u13070 225C                           u12095 1FBE  
                         u12431 0BB8                           u13055 21E6                           u12280 1E30  
                         u14040 3490                           u13080 2280                           _T2CON 000FCA  
                         u13410 3010                           u12530 0D26                           u12450 0C10  
                         u14035 0A6C                           u11660 36FA                           u12620 0E98  
                         u12197 2506                           u12630 0ECE                           u12470 0C5A  
                         u13190 239C                           u14230 1150                           u14047 3486  
                         u13520 30FE                           u12640 1A24                           u14160 0FFA  
                         u13505 29DE                           u11930 38BC                           u13450 3684  
                         u12715 1B88                           u12820 2EC0                           u12580 0E20  
                         u12900 1C82                           u14500 3174                           u14190 1098  
                         u12735 17EC                           u14415 034C                           u11880 35DA  
                         u12840 2EE6                           u13560 2D0C                           u12665 1A8A  
                         u13625 1630                           u11890 3602                           u13570 2D34  
                         u13810 1416                           u13475 2978                           u12827 2EB6  
                         u13580 2D4C                           u14460 0560                           u13485 2994  
                         u12685 1AFE                           u12765 18B6                           u13495 29C4  
                         u11887 35D0                           u12847 2EDC                           u14375 0266  
                         u13760 1396                           u11897 35F8                           u13745 135E  
                         u12890 1C76                           u14490 315C                           u12795 194A  
                _data_buffer_32 0100                           u13790 13F0                           u13970 0758  
                         u16707 0DFE                           u16627 31B4                           u16717 2540  
                         u16637 2E16                           u16727 257C                           u16647 2E32  
                         u16737 25CE                           u16657 2E4E                 __end_of___lwdiv 35B8  
                         u16747 2BB6                           u16667 25EC                           u16757 3820  
                         u16677 26A8                           u16687 0B24                           u16697 0D52  
               __end_of___lwmod 3722                           i2l783 3A84                           _RCREG 000FAE  
                         _RCSTA 000FAB                           _TMR0H 000FD7                           _TMR0L 000FD6  
                         _SPBRG 000FAF                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
               __end_of_f_close 3918                           _TXREG 000FAD                   trace_path@dir 00C8  
                         _TXSTA 000FAC                           _FatFs 00EF             ___lmul@multiplicand 001E  
    __size_of_config_timer_dois 000E                 __end_of_f_mount 3654                 __end_of_f_write 05DE  
    __size_of_config_timer_zero 001A                   get_cluster@bc 00B1                   get_cluster@fs 00B3  
                 get_cluster@wc 00AB                 __end_of_command 345E                           _delay 3990  
               clust2sect@clust 0026                 __end_of_dpowers 60ED        __size_of_escreve_cmd_lcd 008C  
                ??_make_dirfile 0026                  disk_ioctl@buff 001B                           pclath 000FFA  
                disk_read@count 0086                           tablat 000FF5                  disk_ioctl@pdrv 001D  
               __end_of_proceed 3AAE                           plusw1 000FE3                           plusw2 000FDB  
                         utoa@c 0029                           utoa@v 0027                           status 000FD8  
                         wtemp6 0047                   disk_write@res 008B                 __initialization 3242  
           disk_initialize@pdrv 0081             disk_initialize@stat 0082                    __end_of_main 388A  
                  clust2sect@fs 002A                    __end_of_itoa 36E0                    __end_of_utoa 2DF4  
                  __end_of_sync 3510              _inicializa_tarefas 3918                 escalonador@cont 001C  
              __end_of_ReadSPI_ 3AB8             reserve_direntry@dir 00C8               create_chain@clust 00B8  
                   auto_mount@p 00B3               create_chain@cstat 00C0                   sdc_reset@buff 0073  
                        ??_main 002E                          ??_itoa 002A                          ??_utoa 0027  
                        ??_sync 002E                   __activetblptr 000002             ?_inicializa_tarefas 0001  
                _next_dir_entry 2152               get_fattime@f_time 001E                ??_sdc_disk_write 0074  
                        ?_delay 0001          ?_escreve_caractere_lcd 0001                          _ADCON1 000FC1  
                        _EEDATA 000FA8                          _EECON2 000FA7              auto_mount@bootsect 00AB  
                        _INT0IE 007F94                          _INT0IF 007F91                   ?_dummy_clocks 0001  
                        _PCLATH 000FFA                          _INTCON 000FF2                          i2l8480 28A6  
       __size_of_inicializa_SPI 003E                          _TMR0IF 007F92                          _TMR2IF 007CF1  
                        _SDCard 25DE              auto_mount@maxclust 00A7        __end_of_recebe_dado_uart 3A88  
                        _SPPCFG 000F63                          _SPPCON 000F65                _is_it_gga_string 003E  
                        _SSPBUF 000FC9        __size_of_sdc_disk_status 0014                __end_of_check_fs 3044  
          ??_inicializa_tarefas 001A                  trace_path@dptr 00D7                  trace_path@path 00C6  
        reserve_direntry@sector 00CC        __size_of_disk_initialize 003C      __end_of_posicao_cursor_lcd 3396  
                auto_mount@path 0095                    ?_move_window 008D            __end_of_create_chain 1DF0  
        __size_of_init_hardware 0016                __end_of__powers_ 6114                  auto_mount@stat 00B5  
                        _Result 003C            __size_of_get_fattime 0108                    put_cluster@p 00B4  
          __size_of_get_cluster 0222                          ___lmul 3510            __size_of_disk_status 003E  
                        ___wmul 396A                       ??___lldiv 0022                          _f_open 0ED2  
                        _f_time 0168                       ??___lwdiv 001E                          _f_sync 2714  
                     ??___lwmod 001E                          _folder 0296                          _estado 0039  
                        _memcmp 2E92                          _memcpy 345E                __end_of_init_lcd 2E92  
                        _memset 38C0                       ??_f_close 002E                          clear_0 326A  
                        clear_1 327C                          clear_2 3288                          clear_3 3294  
                        clear_4 32A0                       ??_f_mount 001C                       ??_f_write 00CE  
           _sdc_disk_initialize 0AFE                       ??_command 0025                put_cluster@clust 00A2  
            get_cluster@fatsect 00AD                          itoa@cp 002A        __end_of_reserve_direntry 14FE  
              __end_of_validate 369C          __end_of_next_dir_entry 22DA            __size_of_escalonador 007A  
              __end_of_response 3AA2                    __mediumconst 60C4           write_timer_zero@timer 001C  
               disk_read@sector 0082                 disk_read@result 008A                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                       ??_proceed 001C  
              _write_timer_zero 3A40                          sync@fs 00A2       escreve_caractere_lcd@data 001C  
                ??_dummy_clocks 001A             _escreve_inteiro_lcd 379E                 sdc_disk_write@i 0078  
               sdc_disk_write@j 007D                      __accesstop 0060         __end_of__initialization 32A6  
          ?_sdc_disk_initialize 0001                  disk_write@buff 0080              __size_of_WriteSPI_ 0012  
                disk_write@pdrv 0088                   ___rparam_used 000001               ??_escreve_cmd_lcd 001C  
                __pcstackCOMRAM 0001     __end_of_endereco_cursor_lcd 3400                    __pidataBANK1 39B4  
             ?_mensagem_inicial 0001                   __end_of_delay 39B4            ?_escreve_inteiro_lcd 002C  
            ??_mensagem_inicial 0020            __end_of_make_dirfile 2460                    ?_put_cluster 00A2  
             reserve_direntry@c 00D3               reserve_direntry@n 00D0              _tarefa_em_execucao 0043  
    __end_ofi2_write_timer_zero 3A76                 ?_next_dir_entry 00B5          __size_of_sdc_disk_read 01AC  
          reserve_direntry@dptr 00D1                   _init_hardware 3A04                    auto_mount@fs 00BB  
            __size_of_disk_read 00C2                         ??_delay 001A                  sdc_reset@count 0071  
              _is_it_rmc_string 003D    mensagem_inicial@msg_linha_um 0060                      __pbssBANK0 00E9  
                    __pbssBANK1 0100                      __pbssBANK2 0200  __size_of_escreve_frase_ram_lcd 0052  
                     ?_ReadSPI_ 0001   __end_of_escreve_frase_ram_lcd 360A           ??_sdc_disk_initialize 0074  
                       ?_SDCard 0001       escreve_inteiro_uart@F3956 01EB                      _gga_buffer 0200  
            __size_of_sdc_reset 00CC                         ?___lmul 001A               ??_sdc_disk_status 001A  
                 make_dirfile@a 0064                   make_dirfile@b 0062                   make_dirfile@c 0066  
                 make_dirfile@n 0065                   make_dirfile@t 0063                         ?___wmul 001A  
         mensagem_inicial@F4097 617F           mensagem_inicial@F4099 616E           ??_escreve_inteiro_lcd 002E  
                       ?_f_open 00D9                         ?_f_sync 00A4                       SDCard@fil 01C0  
             ??_disk_initialize 002E                         ?_memcmp 001A                         ?_memcpy 001A  
                       ?_memset 001A                  ___lmul@product 0022                    _gga_pointers 0148  
             __end_of_WriteSPI_ 3A64                         _INTCON2 000FF1                         _INTCON3 000FF0  
                ?_init_hardware 0001                       ?_check_fs 008D                      _disk_ioctl 3942  
                    _disk_write 3044                  remove_chain@fs 00BE                         _SSPCON1 000FC6  
                       _SSPSTAT 000FC7                      _clust2sect 2BF4                  _inicializa_SPI 3722  
               trace_path@clust 00D4                      ??_ReadSPI_ 001A                   ?_remove_chain 00B8  
         __size_of_create_chain 01C0                       ?_init_lcd 0001                 __size_of_SDCard 0136  
                 _sdc_disk_read 1FA6                      _auto_mount 05DE               __end_of__npowers_ 613B  
                       __Hparam 0000                         __Lparam 0000                       ?_validate 0021  
             __end_of_disk_read 2BF4                   put_cluster@bc 00B2                       ?_response 0001  
                 put_cluster@fs 00B6                      f_close@res 00AF                 __size_of___lmul 0056  
                       ___lldiv 30CC                 __size_of___wmul 0026            __size_of_move_window 01B6  
                    check_fs@fs 0093                         ___lwdiv 3566                         ___lwmod 36E0  
               __size_of_f_open 0392                 __size_of_f_sync 012A            __end_of_dummy_clocks 3854  
                       _f_close 38EC                         __pcinit 3242                 __size_of_memcmp 009C  
               __size_of_memcpy 005A                 __size_of_memset 002C                      _init_ports 39EC  
                       __ramtop 0800                         _f_mount 360A                         __ptext0 3854  
                       __ptext1 314E                         __ptext2 2DF4                         __ptext3 3A04  
                       __ptext4 39EC                         __ptext5 3AB8                         __ptext6 3A2E  
                       __ptext7 39D2                         __ptext8 3A40                         __ptext9 3A88  
                       _f_write 0012                         _command 3400                       _T0CONbits 000FD5  
           auto_mount@totalsect 00AF         i2write_timer_zero@timer 0003     endereco_cursor_lcd@endereco 001C  
                       _dpowers 60C5                    __size_of_isr 2956         ??_escreve_caractere_lcd 001C  
                    ??_check_fs 0091                    _create_chain 1C30                         _proceed 3AA2  
       __size_of_init_interrupt 0012               __end_of_sdc_reset 2B32          __end_of_inicializa_SPI 3760  
                __pintcode_body 283E            end_of_initialization 32A6                      f_open@mode 00DD  
                    f_open@path 00DB                  ??_remove_chain 00BA                         isr@cont 0019  
                       memcmp@n 001E                         memcpy@d 0021                         memcpy@n 001E  
    __end_ofleitura_chave@F3840 615D      __end_ofleitura_chave@F3842 614C                         memcpy@s 0023  
    __end_ofleitura_chave@F3838 616E         __size_of_init_oscilador 0008                         itoa@buf 0060  
                       memset@c 001C                         memset@n 001E                         itoa@val 0062  
                 SDCard@FResult 01BF                         memset@p 0020            sdc_disk_initialize@i 0075  
                 __Lmediumconst 60C4                      ??_init_lcd 001D                         int_func 283E  
                    _rmc_buffer 0250               ?_recebe_dado_uart 0001                 disk_status@pdrv 001F  
               disk_status@stat 0020                  ?_sdc_disk_read 006D          write_timer_zero@timer0 001A  
               ___lldiv@divisor 001E                      f_mount@drv 001C              ??_recebe_dado_uart 0001  
              sdc_disk_read@ptr 0078                 ___lldiv@counter 0026                      ??_validate 0025  
         __size_of_make_dirfile 0186                      ??_response 001A                       _RCSTAbits 000FAB  
      __end_of_write_timer_zero 3A52                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc1 000FE6                         postinc2 000FDE  
                       utoa@buf 0021                         utoa@val 0023                      _wait_ready 388A  
                     _PORTAbits 000F80                       _PORTBbits 000F81                       _PORTCbits 000F82  
                     _PORTDbits 000F83                       _PORTEbits 000F84                 ??_init_hardware 001E  
                    _trace_path 14FE              _posicao_cursor_lcd 3326            __size_of_put_cluster 027A  
                   ?_disk_ioctl 001A               ?_reserve_direntry 00C6                      f_write@btw 00CA  
                    f_write@res 00E0                       _TRISAbits 000F92                       _TRISBbits 000F93  
                   ?_disk_write 0080                       _TRISCbits 000F94                       _TRISDbits 000F95  
              next_dir_entry@dj 00B5                 _escreve_cmd_lcd 2F2E              ??_reserve_direntry 00CA  
           ?_posicao_cursor_lcd 001D                 ?_inicializa_SPI 0020                 disk_write@count 0086  
              WriteSPI_@TempVar 001A                     ?_clust2sect 0026                _put_cluster$2400 00AA  
              _put_cluster$2401 00AC                      command@CMD 0025                      command@CRC 0024  
                    command@arg 0020                    _make_dirfile 22DA                   ??_get_fattime 0060  
   __size_of_inicializa_tarefas 002A                  __end_of_SDCard 2714                   ??_get_cluster 00A4  
                 ??_disk_status 001C                     ?_auto_mount 0095               _make_dirfile$2510 0060  
               command@argument 0026            ??_posicao_cursor_lcd 001E                  __end_of___lmul 3566  
              ??_next_dir_entry 00B7                  __end_of___wmul 3990                  __end_of_f_open 1264  
                 ??_escalonador 001A                     ?_init_ports 0001                  __end_of_f_sync 283E  
                __end_of_memcmp 2F2E                  __end_of_memcpy 34B8                  __end_of_memset 38EC  
           start_initialization 3242                   WriteSPI_@dado 001B                     __end_of_isr 295E  
     __size_of_mensagem_inicial 007A              reserve_direntry@dj 00C6              reserve_direntry@fs 00D6  
               _sdc_disk_status 3A1A                 ??_sdc_disk_read 0074                        ??_SDCard 00E7  
             auto_mount@fatsize 00B7              i2_write_timer_zero 3A64                 _disk_initialize 37DC  
             __size_of_ReadSPI_ 000A           reserve_direntry@clust 00D4         __size_of_sdc_disk_write 017E  
              _data_uart_recebe 0045               wait_ready@timeout 001A                     _dado_buffer 0193  
         __size_of_dummy_clocks 003C                   auto_mount@fmt 00B6             __size_of_disk_ioctl 0028  
           ?i2_write_timer_zero 0001             __size_of_disk_write 0088                        ??___lmul 0022  
                      ??___wmul 001E             __end_of_get_fattime 2A66                        ??_f_open 00DE  
                      ??_f_sync 002E                     ?_wait_ready 0001                     __pdataBANK1 01DC  
           __end_of_get_cluster 1C30                        ??_memcmp 0020             __end_of_disk_status 379E  
                      ??_memcpy 0020             __size_of_clust2sect 00B6                        ??_memset 0020  
        sdc_disk_read@start_add 0079            __end_of_remove_chain 2D50         sdc_disk_initialize@buff 0080  
       __end_of_escreve_cmd_lcd 2FBA         sdc_disk_initialize@stat 0077                     ?_trace_path 00C2  
  __size_of_endereco_cursor_lcd 006A                     __pbssBIGRAM 02C6                     __pbssCOMRAM 002E  
               _trace_path$2557 00CE                 _trace_path$2559 00D0                   __pcstackBANK0 0060  
                 __pcstackBANK1 019A                  _init_interrupt 3A2E             __size_of_auto_mount 0520  
          ??i2_write_timer_zero 0003             __end_of_escalonador 3242                       _WriteSPI_ 3A52  
   __end_of_sdc_disk_initialize 0ED2                     _data_buffer 0184               __size_of_check_fs 008A  
                  check_fs@sect 008D                      sdc_reset@i 006D                    _dummy_clocks 3818  
                _init_oscilador 3AB8             __size_of_init_ports 0018           _escreve_frase_ram_lcd 35B8  
                     _data_buff 00F1     __end_of_escreve_inteiro_lcd 37DC               __size_of_init_lcd 009E  
              ___lwdiv@dividend 001A               delay@contador_int 001B               delay@contador_ext 001A  
                     _gga_index 0036                       __pintcode 0008                   __pmediumconst 60C4  
                      SDCard@bw 01BD                        ?___lldiv 001A               __size_of_validate 0048  
                     __npowers_ 6114                        ?___lwdiv 001A                        ?___lwmod 001A  
             __size_of_response 000C                        ?_f_close 00AD                       _disk_read 2B32  
            _sinaliza_int_timer 0044                        ?_f_mount 001A                        ?_f_write 00C6  
                      ?_command 0020          __end_of_init_interrupt 3A40             sdc_disk_read@p_buff 006D  
           sdc_disk_read@length 007D             sdc_disk_read@sector 006F         __end_of_sdc_disk_status 3A2E  
__size_of_escreve_caractere_lcd 0072                      ?_WriteSPI_ 0001   __end_of_escreve_caractere_lcd 3326  
                      ?_proceed 0001                       f_close@fp 00AD                ___lwdiv@quotient 001F  
                __size_of_delay 0024         __end_of_disk_initialize 3818          __end_of_init_oscilador 3AC0  
           make_dirfile@dirname 0024                      validate@id 0023                      validate@fs 0021  
                     _p_tarefas 0180                make_dirfile@path 0022                       _sdc_reset 2A66  
           __size_of_wait_ready 0036                  ___wmul@product 001E                        _LATBbits 000F8A  
                      _LATCbits 000F8B                       f_open@dir 01AD                       f_open@res 01AC  
                      _PIE1bits 000F9D                     _get_fattime 295E             __size_of_trace_path 0296  
                     _rmc_index 0034                     _get_cluster 1A0E                     _disk_status 3760  
                 ??_move_window 0091                       f_mount@fs 001A                        _PIR1bits 000F9E  
                      _PIR2bits 000FA1                        i2u898_40 28E0                   move_window@fs 00A0  
             ?_write_timer_zero 001A                 remove_chain@nxt 00BC              leitura_chave@F3840 614C  
            leitura_chave@F3842 613B              leitura_chave@F3838 615D                       f_sync@dir 00AB  
                     f_sync@res 00AA                       f_sync@tim 00A6        posicao_cursor_lcd@coluna 001D  
                    ?_disk_read 0080              ??_write_timer_zero 001C                       f_write@cc 00E1  
    posicao_cursor_lcd@endereco 001F                       f_write@bw 00CC                       f_write@fp 00C6  
     __size_of_recebe_dado_uart 0012                     _escalonador 31C8               ___wmul@multiplier 001A  
              ?_escreve_cmd_lcd 0001     escreve_frase_ram_lcd@buffer 001D                ??_inicializa_SPI 0022  
               ?_init_interrupt 0001                    ??_disk_ioctl 001D                    ??_disk_write 0087  
              _mensagem_inicial 314E                 ?_init_oscilador 0001                    ??_clust2sect 0060  
             ___lmul@multiplier 001A                       copy_data0 3256                      ?_sdc_reset 0001  
                      _ReadSPI_ 3AAE             sdc_reset@count_nosd 006F          ?_escreve_frase_ram_lcd 001D  
              auto_mount@chk_wp 0097                      _EECON1bits 000FA6               move_window@sector 008D  
                _sdc_disk_write 2460       __size_of_reserve_direntry 029A        escreve_inteiro_lcd@F3966 01F2  
                  ??_auto_mount 0098                        __Hrparam 0000                     _info_chaves 0171  
                     memcpy@tmp 0020                        __Lrparam 0000              __end_of_disk_ioctl 396A  
         __size_of_remove_chain 00A6                  put_cluster@val 00A4                get_cluster@clust 00A2  
            __end_of_disk_write 30CC          sdc_disk_initialize@ocr 007D                __size_of___lldiv 0082  
                 ??_put_cluster 00A6                __size_of___lwdiv 0052                __size_of___lwmod 0042  
                  ??_init_ports 001A             __end_of_move_window 1FA6              __end_of_clust2sect 2CAA  
      escreve_inteiro_lcd@valor 002C                __size_of_f_close 002C        escreve_inteiro_lcd@texto 0066  
              __size_of_f_mount 004A                __size_of_f_write 05CC               disk_status@result 001D  
              __size_of_command 005E           __end_of_init_hardware 3A1A                        _check_fs 2FBA  
                      _gga_code 0031                 ___lwdiv@divisor 001C                     ??_WriteSPI_ 001A  
              ?_sdc_disk_status 0001                 ___lwdiv@counter 001E                        _fileName 01DC  
            __end_of_auto_mount 0AFE                        __ptext10 3918                        __ptext11 3722  
                      __ptext20 2BF4                        __ptext12 31C8                        __ptext21 1C30  
                      __ptext13 25DE                        __ptext30 0AFE                        __ptext22 2CAA  
                      __ptext14 0012                        __ptext31 2A66                        __ptext23 1794  
                      __ptext15 0ED2                        __ptext40 3760                        __ptext32 2FBA  
                      __ptext24 1A0E                        __ptext16 14FE                        __ptext41 3A1A  
                      __ptext33 2E92                        __ptext25 396A                        __ptext17 22DA  
                      __ptext50 379E                        __ptext42 34B8                        __ptext34 3510  
                      __ptext26 345E                        __ptext18 1264                        __ptext51 369C  
                      __ptext43 1DF0                        __ptext35 30CC                        __ptext27 05DE  
                      __ptext19 2152                        __ptext60 3326                        __ptext52 2D50  
                      __ptext44 3044                        __ptext36 360A                        __ptext28 38C0  
                      __ptext61 3396                        __ptext53 36E0                        __ptext45 2460  
                      __ptext37 38EC                        __ptext29 37DC                        __ptext70 3A76  
                      __ptext62 35B8                        __ptext54 3566                        __ptext46 2B32  
                      __ptext38 2714                        __ptext63 32B4                        __ptext55 2F2E  
                      __ptext47 1FA6                        __ptext39 3654                        __ptext64 3990  
                      __ptext56 3818                        __ptext48 3A96                        __ptext65 3A52  
                      __ptext57 3400                        __ptext49 3AA2                        __ptext66 3942  
                      __ptext58 388A                        __ptext67 295E                        __ptext59 3AAE  
                      __ptext69 3A64                        _fileSize 0178                        __powers_ 60ED  
              __size_of_proceed 000C                ?_disk_initialize 0001                  _timeout_tarefa 00F5  
                  _rmc_pointers 015C              sdc_disk_read@count 0073      __end_of_inicializa_tarefas 3942  
      i2write_timer_zero@timer0 0001          __end_of_sdc_disk_write 25DE                        _init_lcd 2DF4  
                 __size_of_main 0036                    _remove_chain 2CAA                   __size_of_itoa 0044  
                 __size_of_utoa 00A4                   __size_of_sync 0058             _endereco_cursor_lcd 3396  
            __end_of_init_ports 3A04               _comma_counter_gga 0040                   dummy_clocks@i 001D  
                      f_open@dj 01AF                   dummy_clocks@n 001C                        f_open@fn 019A  
                      f_open@fp 00D9                        f_open@dw 01A8                        f_open@rs 01A6  
             _comma_counter_rmc 003F                        _rmc_code 002E                        _validate 3654  
                  move_window@n 009B                        _response 3A96                        f_sync@fp 00A4  
   __size_of_posicao_cursor_lcd 0070                        int$flags 0046         posicao_cursor_lcd@linha 001E  
       inicializa_SPI@smp_phase 0021                    ??_wait_ready 001A                     ??_disk_read 0087  
                  ??_trace_path 00CA            ?_endereco_cursor_lcd 0001              put_cluster@fatsect 00AE  
                    _INTCONbits 000FF2                        memcmp@s1 001A                        memcmp@s2 001C  
       inicializa_SPI@sync_mode 0001                move_window@wsect 009C                        memcpy@d1 001A  
                      memcpy@s1 001C             __end_of_put_cluster 1A0E                        itoa@base 0064  
                      memset@p1 001A               _config_timer_dois 3A88                    _tempo_backup 017C  
             _config_timer_zero 39D2          inicializa_SPI@bus_mode 0020                   wait_ready@res 001E  
                      intlevel2 0000              ?_config_timer_dois 0001        mensagem_inicial@msg_dois 0071  
                   ??_sdc_reset 002E              ?_config_timer_zero 0001                    _tempo_tarefa 00E9  
               ?_sdc_disk_write 006D                ___lwmod@dividend 001A              __end_of_wait_ready 38C0  
              ___lldiv@dividend 001A               sdc_disk_read@buff 007F           __end_of_sdc_disk_read 2152  
           sdc_disk_status@pdrv 001B             sdc_disk_status@stat 001A             ??_config_timer_dois 001A  
                    _OSCCONbits 000FD3              __end_of_trace_path 1794             ??_config_timer_zero 001E  
                   _move_window 1DF0            sdc_disk_write@count1 007A            sdc_disk_write@p_buff 006D  
              _recebe_dado_uart 3A76                        utoa@base 0025            sdc_disk_write@sector 006F  
         ??_endereco_cursor_lcd 001C                    response@buff 001A                ___lldiv@quotient 0022  
               ___lwmod@divisor 001C                 ___lwmod@counter 001E               remove_chain@clust 00B8  
     __end_of_config_timer_dois 3A96                   ?_create_chain 00B8       __end_of_config_timer_zero 39EC  
   __size_ofi2_write_timer_zero 0012                     _SSPCON1bits 000FC6         __size_of_next_dir_entry 0188  
        escreve_cmd_lcd@comando 001C             sdc_disk_write@count 0073   sdc_disk_initialize@crc_number 007A  
            sdc_disk_write@buff 007F    __size_of_sdc_disk_initialize 03D4                    f_write@clust 00E3  
                  f_write@wbuff 00DA                    ?_get_fattime 001A                _reserve_direntry 1264  
                   f_write@buff 00C8               sdc_disk_write@res 007C                    ?_get_cluster 00A2  
                   f_write@sect 00DC                     f_write@wcnt 00E5                    ?_disk_status 0001  
 __end_ofmensagem_inicial@F4097 6190   __end_ofmensagem_inicial@F4099 617F  
