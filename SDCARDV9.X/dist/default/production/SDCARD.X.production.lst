

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 08 01:09:24 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    95                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    99                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   100                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   101  0000                     
   102                           ; Version 1.45
   103                           ; Generated 16/11/2017 GMT
   104                           ; 
   105                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   106                           ; All rights reserved.
   107                           ; 
   108                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   109                           ; 
   110                           ; Redistribution and use in source and binary forms, with or without modification, are
   111                           ; permitted provided that the following conditions are met:
   112                           ; 
   113                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   114                           ;        conditions and the following disclaimer.
   115                           ; 
   116                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   117                           ;        of conditions and the following disclaimer in the documentation and/or other
   118                           ;        materials provided with the distribution.
   119                           ; 
   120                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   121                           ;        software without specific prior written permission.
   122                           ; 
   123                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   124                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   125                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   126                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   127                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   128                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   129                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   130                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   131                           ; 
   132                           ; 
   133                           ; Code-generator required, PIC18F4550 Definitions
   134                           ; 
   135                           ; SFR Addresses
   136  0000                     
   137                           	psect	idataBANK1
   138  005650                     __pidataBANK1:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _buff
   142  005650  66                 	db	102
   143  005651  65                 	db	101
   144  005652  6C                 	db	108
   145  005653  69                 	db	105
   146  005654  70                 	db	112
   147  005655  65                 	db	101
   148  005656  0A                 	db	10
   149  005657  00                 	db	0
   150  005658  00                 	db	0
   151  005659  00                 	db	0
   152                           
   153                           ;initializer for escreve_inteiro_uart@F3956
   154  00565A  30                 	db	48
   155  00565B  30                 	db	48
   156  00565C  30                 	db	48
   157  00565D  30                 	db	48
   158  00565E  30                 	db	48
   159  00565F  30                 	db	48
   160  005660  00                 	db	0
   161                           
   162                           ;initializer for escreve_inteiro_lcd@F3966
   163  005661  30                 	db	48
   164  005662  30                 	db	48
   165  005663  30                 	db	48
   166  005664  30                 	db	48
   167  005665  30                 	db	48
   168  005666  30                 	db	48
   169  005667  00                 	db	0
   170                           
   171                           ;initializer for _filename
   172  005668  63                 	db	99
   173  005669  68                 	db	104
   174  00566A  65                 	db	101
   175  00566B  63                 	db	99
   176  00566C  6B                 	db	107
   177  00566D  2E                 	db	46
   178  00566E  74                 	db	116
   179  00566F  78                 	db	120
   180  005670  74                 	db	116
   181  005671  00                 	db	0
   182  005672  00                 	db	0
   183  005673  00                 	db	0
   184  005674  00                 	db	0
   185  005675  00                 	db	0
   186  005676  00                 	db	0
   187                           
   188                           	psect	mediumconst
   189  00614E                     __pmediumconst:
   190                           	opt stack 0
   191  00614E  00                 	db	0
   192  00614F                     _dpowers:
   193                           	opt stack 0
   194  00614F  0001               	dw	1
   195  006151  0000               	dw	0
   196  006153  000A               	dw	10
   197  006155  0000               	dw	0
   198  006157  0064               	dw	100
   199  006159  0000               	dw	0
   200  00615B  03E8               	dw	1000
   201  00615D  0000               	dw	0
   202  00615F  2710               	dw	10000
   203  006161  0000               	dw	0
   204  006163  86A0               	dw	34464
   205  006165  0001               	dw	1
   206  006167  4240               	dw	16960
   207  006169  000F               	dw	15
   208  00616B  9680               	dw	38528
   209  00616D  0098               	dw	152
   210  00616F  E100               	dw	57600
   211  006171  05F5               	dw	1525
   212  006173  CA00               	dw	51712
   213  006175  3B9A               	dw	15258
   214  006177                     __end_of_dpowers:
   215                           	opt stack 0
   216  006177                     __powers_:
   217                           	opt stack 0
   218  006177  00                 	db	0
   219  006178  80                 	db	128
   220  006179  3F                 	db	63
   221  00617A  00                 	db	0
   222  00617B  20                 	db	32
   223  00617C  41                 	db	65
   224  00617D  00                 	db	0
   225  00617E  C8                 	db	200
   226  00617F  42                 	db	66
   227  006180  00                 	db	0
   228  006181  7A                 	db	122
   229  006182  44                 	db	68
   230  006183  40                 	db	64
   231  006184  1C                 	db	28
   232  006185  46                 	db	70
   233  006186  50                 	db	80
   234  006187  C3                 	db	195
   235  006188  47                 	db	71
   236  006189  24                 	db	36
   237  00618A  74                 	db	116
   238  00618B  49                 	db	73
   239  00618C  97                 	db	151
   240  00618D  18                 	db	24
   241  00618E  4B                 	db	75
   242  00618F  BC                 	db	188
   243  006190  BE                 	db	190
   244  006191  4C                 	db	76
   245  006192  6B                 	db	107
   246  006193  6E                 	db	110
   247  006194  4E                 	db	78
   248  006195  03                 	db	3
   249  006196  15                 	db	21
   250  006197  50                 	db	80
   251  006198  79                 	db	121
   252  006199  AD                 	db	173
   253  00619A  60                 	db	96
   254  00619B  F3                 	db	243
   255  00619C  49                 	db	73
   256  00619D  71                 	db	113
   257  00619E                     __end_of__powers_:
   258                           	opt stack 0
   259  00619E                     __npowers_:
   260                           	opt stack 0
   261  00619E  00                 	db	0
   262  00619F  80                 	db	128
   263  0061A0  3F                 	db	63
   264  0061A1  CD                 	db	205
   265  0061A2  CC                 	db	204
   266  0061A3  3D                 	db	61
   267  0061A4  D7                 	db	215
   268  0061A5  23                 	db	35
   269  0061A6  3C                 	db	60
   270  0061A7  12                 	db	18
   271  0061A8  83                 	db	131
   272  0061A9  3A                 	db	58
   273  0061AA  B7                 	db	183
   274  0061AB  D1                 	db	209
   275  0061AC  38                 	db	56
   276  0061AD  C6                 	db	198
   277  0061AE  27                 	db	39
   278  0061AF  37                 	db	55
   279  0061B0  38                 	db	56
   280  0061B1  86                 	db	134
   281  0061B2  35                 	db	53
   282  0061B3  C0                 	db	192
   283  0061B4  D6                 	db	214
   284  0061B5  33                 	db	51
   285  0061B6  CC                 	db	204
   286  0061B7  2B                 	db	43
   287  0061B8  32                 	db	50
   288  0061B9  70                 	db	112
   289  0061BA  89                 	db	137
   290  0061BB  30                 	db	48
   291  0061BC  E7                 	db	231
   292  0061BD  DB                 	db	219
   293  0061BE  2E                 	db	46
   294  0061BF  E5                 	db	229
   295  0061C0  3C                 	db	60
   296  0061C1  1E                 	db	30
   297  0061C2  42                 	db	66
   298  0061C3  A2                 	db	162
   299  0061C4  0D                 	db	13
   300  0061C5                     __end_of__npowers_:
   301                           	opt stack 0
   302  0061C5                     mensagem_inicial@F4136:
   303                           	opt stack 0
   304  0061C5  20                 	db	32
   305  0061C6  31                 	db	49
   306  0061C7  38                 	db	56
   307  0061C8  2F                 	db	47
   308  0061C9  30                 	db	48
   309  0061CA  31                 	db	49
   310  0061CB  2F                 	db	47
   311  0061CC  32                 	db	50
   312  0061CD  30                 	db	48
   313  0061CE  32                 	db	50
   314  0061CF  32                 	db	50
   315  0061D0  20                 	db	32
   316  0061D1  20                 	db	32
   317  0061D2  20                 	db	32
   318  0061D3  00                 	db	0
   319  0061D4  00                 	db	0
   320  0061D5  00                 	db	0
   321  0061D6                     __end_ofmensagem_inicial@F4136:
   322                           	opt stack 0
   323  0061D6                     mensagem_inicial@F4134:
   324                           	opt stack 0
   325  0061D6  53                 	db	83
   326  0061D7  44                 	db	68
   327  0061D8  43                 	db	67
   328  0061D9  61                 	db	97
   329  0061DA  72                 	db	114
   330  0061DB  64                 	db	100
   331  0061DC  20                 	db	32
   332  0061DD  49                 	db	73
   333  0061DE  6E                 	db	110
   334  0061DF  69                 	db	105
   335  0061E0  74                 	db	116
   336  0061E1  20                 	db	32
   337  0061E2  20                 	db	32
   338  0061E3  20                 	db	32
   339  0061E4  00                 	db	0
   340  0061E5  00                 	db	0
   341  0061E6  00                 	db	0
   342  0061E7                     __end_ofmensagem_inicial@F4134:
   343                           	opt stack 0
   344  0000                     _RCSTA	set	4011
   345  0000                     _TXSTA	set	4012
   346  0000                     _RCREG	set	4014
   347  0000                     _RCSTAbits	set	4011
   348  0000                     _TXREG	set	4013
   349  0000                     _SPBRG	set	4015
   350  0000                     _PR2	set	4043
   351  0000                     _TMR2	set	4044
   352  0000                     _T2CON	set	4042
   353  0000                     _OSCCONbits	set	4051
   354  0000                     _TRISE	set	3990
   355  0000                     _TRISC	set	3988
   356  0000                     _TRISA	set	3986
   357  0000                     _TRISD	set	3989
   358  0000                     _LATB	set	3978
   359  0000                     _TRISB	set	3987
   360  0000                     _TMR0L	set	4054
   361  0000                     _TMR0H	set	4055
   362  0000                     _PIE1	set	3997
   363  0000                     _INTCON3	set	4080
   364  0000                     _INTCON2	set	4081
   365  0000                     _INTCON	set	4082
   366  0000                     _SPPCFG	set	3939
   367  0000                     _SPPCON	set	3941
   368  0000                     _T0CON	set	4053
   369  0000                     _PORTDbits	set	3971
   370  0000                     _TRISDbits	set	3989
   371  0000                     _LATCbits	set	3979
   372  0000                     _SSPBUF	set	4041
   373  0000                     _SSPCON1bits	set	4038
   374  0000                     _SSPSTATbits	set	4039
   375  0000                     _SSPCON1	set	4038
   376  0000                     _SSPSTAT	set	4039
   377  0000                     _TRISCbits	set	3988
   378  0000                     _PORTBbits	set	3969
   379  0000                     _TRISBbits	set	3987
   380  0000                     _T0CONbits	set	4053
   381  0000                     _LATBbits	set	3978
   382  0000                     _ADCON1	set	4033
   383  0000                     _PCL	set	4089
   384  0000                     _PCLATH	set	4090
   385  0000                     _INTCONbits	set	4082
   386  0000                     _PIR1bits	set	3998
   387  0000                     _PIE1bits	set	3997
   388  0000                     _RCIF	set	31989
   389  0000                     _TRMT	set	32097
   390  0000                     _TXEN	set	32101
   391  0000                     _CREN	set	32092
   392  0000                     _SPEN	set	32095
   393  0000                     _SYNC	set	32100
   394  0000                     _BRGH	set	32098
   395  0000                     _TMR2IF	set	31985
   396  0000                     _INT0IE	set	32660
   397  0000                     _INT0IF	set	32657
   398  0000                     _T0IF	set	32658
   399  0000                     _TMR0IF	set	32658
   400  0061E7                     STR_13:
   401  0061E7  53                 	db	83	;'S'
   402  0061E8  50                 	db	80	;'P'
   403  0061E9  49                 	db	73	;'I'
   404  0061EA  20                 	db	32
   405  0061EB  63                 	db	99	;'c'
   406  0061EC  6F                 	db	111	;'o'
   407  0061ED  6E                 	db	110	;'n'
   408  0061EE  66                 	db	102	;'f'
   409  0061EF  69                 	db	105	;'i'
   410  0061F0  67                 	db	103	;'g'
   411  0061F1  75                 	db	117	;'u'
   412  0061F2  72                 	db	114	;'r'
   413  0061F3  61                 	db	97	;'a'
   414  0061F4  64                 	db	100	;'d'
   415  0061F5  61                 	db	97	;'a'
   416  0061F6  21                 	db	33
   417  0061F7  00                 	db	0
   418  0061F8                     STR_15:
   419  0061F8  49                 	db	73	;'I'
   420  0061F9  6E                 	db	110	;'n'
   421  0061FA  73                 	db	115	;'s'
   422  0061FB  69                 	db	105	;'i'
   423  0061FC  72                 	db	114	;'r'
   424  0061FD  61                 	db	97	;'a'
   425  0061FE  20                 	db	32
   426  0061FF  6F                 	db	111	;'o'
   427  006200  20                 	db	32
   428  006201  43                 	db	67	;'C'
   429  006202  61                 	db	97	;'a'
   430  006203  72                 	db	114	;'r'
   431  006204  74                 	db	116	;'t'
   432  006205  61                 	db	97	;'a'
   433  006206  6F                 	db	111	;'o'
   434  006207  00                 	db	0
   435  006208                     STR_16:
   436  006208  43                 	db	67	;'C'
   437  006209  61                 	db	97	;'a'
   438  00620A  72                 	db	114	;'r'
   439  00620B  74                 	db	116	;'t'
   440  00620C  61                 	db	97	;'a'
   441  00620D  6F                 	db	111	;'o'
   442  00620E  20                 	db	32
   443  00620F  49                 	db	73	;'I'
   444  006210  6E                 	db	110	;'n'
   445  006211  73                 	db	115	;'s'
   446  006212  65                 	db	101	;'e'
   447  006213  72                 	db	114	;'r'
   448  006214  69                 	db	105	;'i'
   449  006215  64                 	db	100	;'d'
   450  006216  6F                 	db	111	;'o'
   451  006217  00                 	db	0
   452  006218                     STR_20:
   453  006218  22                 	db	34
   454  006219  2A                 	db	42
   455  00621A  2B                 	db	43
   456  00621B  2C                 	db	44
   457  00621C  3A                 	db	58	;':'
   458  00621D  3B                 	db	59	;';'
   459  00621E  3C                 	db	60	;'<'
   460  00621F  3D                 	db	61	;'='
   461  006220  3E                 	db	62	;'>'
   462  006221  3F                 	db	63	;'?'
   463  006222  5B                 	db	91	;'['
   464  006223  5D                 	db	93	;']'
   465  006224  7C                 	db	124
   466  006225  7F                 	db	127
   467  006226  00                 	db	0
   468  006227                     STR_18:
   469  006227  4D                 	db	77	;'M'
   470  006228  4D                 	db	77	;'M'
   471  006229  43                 	db	67	;'C'
   472  00622A  20                 	db	32
   473  00622B  56                 	db	86	;'V'
   474  00622C  65                 	db	101	;'e'
   475  00622D  72                 	db	114	;'r'
   476  00622E  2E                 	db	46
   477  00622F  20                 	db	32
   478  006230  33                 	db	51	;'3'
   479  006231  00                 	db	0
   480  006232                     STR_14:
   481  006232  53                 	db	83	;'S'
   482  006233  65                 	db	101	;'e'
   483  006234  6D                 	db	109	;'m'
   484  006235  20                 	db	32
   485  006236  43                 	db	67	;'C'
   486  006237  61                 	db	97	;'a'
   487  006238  72                 	db	114	;'r'
   488  006239  74                 	db	116	;'t'
   489  00623A  61                 	db	97	;'a'
   490  00623B  6F                 	db	111	;'o'
   491  00623C  00                 	db	0
   492  00623D                     STR_12:
   493  00623D  45                 	db	69	;'E'
   494  00623E  73                 	db	115	;'s'
   495  00623F  63                 	db	99	;'c'
   496  006240  72                 	db	114	;'r'
   497  006241  69                 	db	105	;'i'
   498  006242  74                 	db	116	;'t'
   499  006243  61                 	db	97	;'a'
   500  006244  20                 	db	32
   501  006245  4F                 	db	79	;'O'
   502  006246  4B                 	db	75	;'K'
   503  006247  00                 	db	0
   504  006248                     STR_17:
   505  006248  53                 	db	83	;'S'
   506  006249  44                 	db	68	;'D'
   507  00624A  20                 	db	32
   508  00624B  56                 	db	86	;'V'
   509  00624C  45                 	db	69	;'E'
   510  00624D  52                 	db	82	;'R'
   511  00624E  2E                 	db	46
   512  00624F  20                 	db	32
   513  006250  31                 	db	49	;'1'
   514  006251  00                 	db	0
   515  006252  25                 	db	37
   516  006253  64                 	db	100	;'d'
   517  006254  3A                 	db	58	;':'
   518  006255  25                 	db	37
   519  006256  64                 	db	100	;'d'
   520  006257  3A                 	db	58	;':'
   521  006258  25                 	db	37
   522  006259  64                 	db	100	;'d'
   523  00625A  00                 	db	0
   524  00625B                     STR_11:
   525  00625B  66                 	db	102	;'f'
   526  00625C  65                 	db	101	;'e'
   527  00625D  6C                 	db	108	;'l'
   528  00625E  69                 	db	105	;'i'
   529  00625F  70                 	db	112	;'p'
   530  006260  65                 	db	101	;'e'
   531  006261  21                 	db	33
   532  006262  00                 	db	0
   533  006263  48                 	db	72	;'H'
   534  006264  6F                 	db	111	;'o'
   535  006265  72                 	db	114	;'r'
   536  006266  61                 	db	97	;'a'
   537  006267  3A                 	db	58	;':'
   538  006268  00                 	db	0
   539  006269  44                 	db	68	;'D'
   540  00626A  61                 	db	97	;'a'
   541  00626B  74                 	db	116	;'t'
   542  00626C  61                 	db	97	;'a'
   543  00626D  3A                 	db	58	;':'
   544  00626E  00                 	db	0
   545  00626F                     STR_3:
   546  00626F  25                 	db	37
   547  006270  2E                 	db	46
   548  006271  30                 	db	48	;'0'
   549  006272  37                 	db	55	;'7'
   550  006273  66                 	db	102	;'f'
   551  006274  00                 	db	0
   552  006275  4C                 	db	76	;'L'
   553  006276  6F                 	db	111	;'o'
   554  006277  6E                 	db	110	;'n'
   555  006278  3A                 	db	58	;':'
   556  006279  00                 	db	0
   557  00627A                     STR_19:
   558  00627A  0D                 	db	13
   559  00627B  0A                 	db	10
   560  00627C  00                 	db	0
   561  00627D                     STR_6:
   562  00627D  7C                 	db	124
   563  00627E  00                 	db	0
   564  00627F  00                 	db	0	; dummy byte at the end
   565  0000                     
   566                           ; #config settings
   567                           
   568                           	psect	cinit
   569  004F1A                     __pcinit:
   570                           	opt stack 0
   571  004F1A                     start_initialization:
   572                           	opt stack 0
   573  004F1A                     __initialization:
   574                           	opt stack 0
   575                           
   576                           ; Initialize objects allocated to BANK1 (39 bytes)
   577                           ; load TBLPTR registers with __pidataBANK1
   578  004F1A  0E50               	movlw	low __pidataBANK1
   579  004F1C  6EF6               	movwf	tblptrl,c
   580  004F1E  0E56               	movlw	high __pidataBANK1
   581  004F20  6EF7               	movwf	tblptrh,c
   582  004F22  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   583  004F24  6EF8               	movwf	tblptru,c
   584  004F26  EE01  F0A8         	lfsr	0,__pdataBANK1
   585  004F2A  EE10 F027          	lfsr	1,39
   586  004F2E                     copy_data0:
   587  004F2E  0009               	tblrd		*+
   588  004F30  CFF5 FFEE          	movff	tablat,postinc0
   589  004F34  50E5               	movf	postdec1,w,c
   590  004F36  50E1               	movf	fsr1l,w,c
   591  004F38  E1FA               	bnz	copy_data0
   592                           
   593                           ; Clear objects allocated to BIGRAM (558 bytes)
   594  004F3A  EE02  F0AD         	lfsr	0,__pbssBIGRAM
   595  004F3E  EE12 F02E          	lfsr	1,558
   596  004F42                     clear_0:
   597  004F42  6AEE               	clrf	postinc0,c
   598  004F44  50E5               	movf	postdec1,w,c
   599  004F46  50E1               	movf	fsr1l,w,c
   600  004F48  E1FC               	bnz	clear_0
   601  004F4A  50E2               	movf	fsr1h,w,c
   602  004F4C  E1FA               	bnz	clear_0
   603                           
   604                           ; Clear objects allocated to BANK2 (70 bytes)
   605  004F4E  EE02  F067         	lfsr	0,__pbssBANK2
   606  004F52  0E46               	movlw	70
   607  004F54                     clear_1:
   608  004F54  6AEE               	clrf	postinc0,c
   609  004F56  06E8               	decf	wreg,f,c
   610  004F58  E1FD               	bnz	clear_1
   611                           
   612                           ; Clear objects allocated to BANK1 (168 bytes)
   613  004F5A  EE01  F000         	lfsr	0,__pbssBANK1
   614  004F5E  0EA8               	movlw	168
   615  004F60                     clear_2:
   616  004F60  6AEE               	clrf	postinc0,c
   617  004F62  06E8               	decf	wreg,f,c
   618  004F64  E1FD               	bnz	clear_2
   619                           
   620                           ; Clear objects allocated to BANK0 (25 bytes)
   621  004F66  EE00  F0E7         	lfsr	0,__pbssBANK0
   622  004F6A  0E19               	movlw	25
   623  004F6C                     clear_3:
   624  004F6C  6AEE               	clrf	postinc0,c
   625  004F6E  06E8               	decf	wreg,f,c
   626  004F70  E1FD               	bnz	clear_3
   627                           
   628                           ; Clear objects allocated to COMRAM (24 bytes)
   629  004F72  EE00  F02E         	lfsr	0,__pbssCOMRAM
   630  004F76  0E18               	movlw	24
   631  004F78                     clear_4:
   632  004F78  6AEE               	clrf	postinc0,c
   633  004F7A  06E8               	decf	wreg,f,c
   634  004F7C  E1FD               	bnz	clear_4
   635  004F7E                     end_of_initialization:
   636                           	opt stack 0
   637  004F7E                     __end_of__initialization:
   638                           	opt stack 0
   639  004F7E  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   640  004F80  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   641  004F82  0E00               	movlw	low (__Lmediumconst shr (0+16))
   642  004F84  6EF8               	movwf	tblptru,c
   643  004F86  0100               	movlb	0
   644  004F88  EF9F  F02A         	goto	_main	;jump to C main() function
   645                           tblptru	equ	0xFF8
   646                           tblptrh	equ	0xFF7
   647                           tblptrl	equ	0xFF6
   648                           tablat	equ	0xFF5
   649                           postinc0	equ	0xFEE
   650                           wreg	equ	0xFE8
   651                           postdec1	equ	0xFE5
   652                           fsr1h	equ	0xFE2
   653                           fsr1l	equ	0xFE1
   654                           
   655                           	psect	bssCOMRAM
   656  00002E                     __pbssCOMRAM:
   657                           	opt stack 0
   658  00002E                     _rmc_code:
   659                           	opt stack 0
   660  00002E                     	ds	3
   661  000031                     _gga_code:
   662                           	opt stack 0
   663  000031                     	ds	3
   664  000034                     _rmc_index:
   665                           	opt stack 0
   666  000034                     	ds	2
   667  000036                     _gga_index:
   668                           	opt stack 0
   669  000036                     	ds	2
   670  000038                     _timeout_tarefa:
   671                           	opt stack 0
   672  000038                     	ds	2
   673  00003A                     timer_dois@flag:
   674                           	opt stack 0
   675  00003A                     	ds	1
   676  00003B                     _estado:
   677                           	opt stack 0
   678  00003B                     	ds	1
   679  00003C                     _dado:
   680                           	opt stack 0
   681  00003C                     	ds	1
   682  00003D                     _is_it_rmc_string:
   683                           	opt stack 0
   684  00003D                     	ds	1
   685  00003E                     _is_it_gga_string:
   686                           	opt stack 0
   687  00003E                     	ds	1
   688  00003F                     _comma_counter_rmc:
   689                           	opt stack 0
   690  00003F                     	ds	1
   691  000040                     _comma_counter_gga:
   692                           	opt stack 0
   693  000040                     	ds	1
   694  000041                     _E_W:
   695                           	opt stack 0
   696  000041                     	ds	1
   697  000042                     _n_s:
   698                           	opt stack 0
   699  000042                     	ds	1
   700  000043                     _tarefa_em_execucao:
   701                           	opt stack 0
   702  000043                     	ds	1
   703  000044                     _sinaliza_int_timer:
   704                           	opt stack 0
   705  000044                     	ds	1
   706  000045                     _data_uart_recebe:
   707                           	opt stack 0
   708  000045                     	ds	1
   709                           tblptru	equ	0xFF8
   710                           tblptrh	equ	0xFF7
   711                           tblptrl	equ	0xFF6
   712                           tablat	equ	0xFF5
   713                           postinc0	equ	0xFEE
   714                           wreg	equ	0xFE8
   715                           postdec1	equ	0xFE5
   716                           fsr1h	equ	0xFE2
   717                           fsr1l	equ	0xFE1
   718                           
   719                           	psect	bssBANK0
   720  0000E7                     __pbssBANK0:
   721                           	opt stack 0
   722  0000E7                     _tempo_tarefa:
   723                           	opt stack 0
   724  0000E7                     	ds	4
   725  0000EB                     _tempo_backup:
   726                           	opt stack 0
   727  0000EB                     	ds	4
   728  0000EF                     _p_tarefas:
   729                           	opt stack 0
   730  0000EF                     	ds	4
   731  0000F3                     _Fsid:
   732                           	opt stack 0
   733  0000F3                     	ds	2
   734  0000F5                     _FatFs:
   735                           	opt stack 0
   736  0000F5                     	ds	2
   737  0000F7                     _data_buff:
   738                           	opt stack 0
   739  0000F7                     	ds	2
   740  0000F9                     _dado_buffer:
   741                           	opt stack 0
   742  0000F9                     	ds	7
   743                           tblptru	equ	0xFF8
   744                           tblptrh	equ	0xFF7
   745                           tblptrl	equ	0xFF6
   746                           tablat	equ	0xFF5
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           postdec1	equ	0xFE5
   750                           fsr1h	equ	0xFE2
   751                           fsr1l	equ	0xFE1
   752                           
   753                           	psect	bssBANK1
   754  000100                     __pbssBANK1:
   755                           	opt stack 0
   756  000100                     _gga_buffer:
   757                           	opt stack 0
   758  000100                     	ds	80
   759  000150                     _gga_pointers:
   760                           	opt stack 0
   761  000150                     	ds	20
   762  000164                     _rmc_pointers:
   763                           	opt stack 0
   764  000164                     	ds	12
   765  000170                     _f_time:
   766                           	opt stack 0
   767  000170                     	ds	9
   768  000179                     _fil:
   769                           	opt stack 0
   770  000179                     	ds	32
   771  000199                     _data_buffer:
   772                           	opt stack 0
   773  000199                     	ds	15
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           postdec1	equ	0xFE5
   781                           fsr1h	equ	0xFE2
   782                           fsr1l	equ	0xFE1
   783                           
   784                           	psect	dataBANK1
   785  0001A8                     __pdataBANK1:
   786                           	opt stack 0
   787  0001A8                     _buff:
   788                           	opt stack 0
   789  0001A8                     	ds	10
   790  0001B2                     escreve_inteiro_uart@F3956:
   791                           	opt stack 0
   792  0001B2                     	ds	7
   793  0001B9                     escreve_inteiro_lcd@F3966:
   794                           	opt stack 0
   795  0001B9                     	ds	7
   796  0001C0                     _filename:
   797                           	opt stack 0
   798  0001C0                     	ds	15
   799                           tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           postinc0	equ	0xFEE
   804                           wreg	equ	0xFE8
   805                           postdec1	equ	0xFE5
   806                           fsr1h	equ	0xFE2
   807                           fsr1l	equ	0xFE1
   808                           
   809                           	psect	bssBANK2
   810  000267                     __pbssBANK2:
   811                           	opt stack 0
   812  000267                     _rmc_buffer:
   813                           	opt stack 0
   814  000267                     	ds	70
   815                           tblptru	equ	0xFF8
   816                           tblptrh	equ	0xFF7
   817                           tblptrl	equ	0xFF6
   818                           tablat	equ	0xFF5
   819                           postinc0	equ	0xFEE
   820                           wreg	equ	0xFE8
   821                           postdec1	equ	0xFE5
   822                           fsr1h	equ	0xFE2
   823                           fsr1l	equ	0xFE1
   824                           
   825                           	psect	bssBIGRAM
   826  0002AD                     __pbssBIGRAM:
   827                           	opt stack 0
   828  0002AD                     _fs:
   829                           	opt stack 0
   830  0002AD                     	ds	558
   831                           tblptru	equ	0xFF8
   832                           tblptrh	equ	0xFF7
   833                           tblptrl	equ	0xFF6
   834                           tablat	equ	0xFF5
   835                           postinc0	equ	0xFEE
   836                           wreg	equ	0xFE8
   837                           postdec1	equ	0xFE5
   838                           fsr1h	equ	0xFE2
   839                           fsr1l	equ	0xFE1
   840                           
   841                           	psect	cstackBANK2
   842  000200                     __pcstackBANK2:
   843                           	opt stack 0
   844  000200                     find_volume@br:
   845                           	opt stack 0
   846                           
   847                           ; 16 bytes @ 0x0
   848  000200                     	ds	16
   849  000210                     _find_volume$2372:
   850                           	opt stack 0
   851                           
   852                           ; 4 bytes @ 0x10
   853  000210                     	ds	4
   854  000214                     _find_volume$2373:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x14
   858  000214                     	ds	2
   859  000216                     find_volume@szbfat:
   860                           	opt stack 0
   861                           
   862                           ; 4 bytes @ 0x16
   863  000216                     	ds	4
   864  00021A                     find_volume@pt:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0x1A
   868  00021A                     	ds	2
   869  00021C                     find_volume@sysect:
   870                           	opt stack 0
   871                           
   872                           ; 4 bytes @ 0x1C
   873  00021C                     	ds	4
   874  000220                     find_volume@vol:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x20
   878  000220                     	ds	2
   879  000222                     find_volume@nrsv:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x22
   883  000222                     	ds	2
   884  000224                     find_volume@tsect:
   885                           	opt stack 0
   886                           
   887                           ; 4 bytes @ 0x24
   888  000224                     	ds	4
   889  000228                     find_volume@nclst:
   890                           	opt stack 0
   891                           
   892                           ; 4 bytes @ 0x28
   893  000228                     	ds	4
   894  00022C                     find_volume@stat:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x2C
   898  00022C                     	ds	1
   899  00022D                     find_volume@fasize:
   900                           	opt stack 0
   901                           
   902                           ; 4 bytes @ 0x2D
   903  00022D                     	ds	4
   904  000231                     find_volume@bsect:
   905                           	opt stack 0
   906                           
   907                           ; 4 bytes @ 0x31
   908  000231                     	ds	4
   909  000235                     find_volume@i:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x35
   913  000235                     	ds	2
   914  000237                     find_volume@fmt:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x37
   918  000237                     	ds	1
   919  000238                     find_volume@fs:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x38
   923  000238                     	ds	2
   924  00023A                     f_open@sfn:
   925                           	opt stack 0
   926                           
   927                           ; 12 bytes @ 0x3A
   928  00023A                     	ds	12
   929  000246                     f_open@cl:
   930                           	opt stack 0
   931                           
   932                           ; 4 bytes @ 0x46
   933  000246                     	ds	4
   934  00024A                     f_open@dw:
   935                           	opt stack 0
   936                           
   937                           ; 4 bytes @ 0x4A
   938  00024A                     	ds	4
   939  00024E                     f_open@res:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x4E
   943  00024E                     	ds	1
   944  00024F                     f_open@dir:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x4F
   948  00024F                     	ds	2
   949  000251                     f_open@dj:
   950                           	opt stack 0
   951                           
   952                           ; 22 bytes @ 0x51
   953  000251                     	ds	22
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           postinc0	equ	0xFEE
   959                           wreg	equ	0xFE8
   960                           postdec1	equ	0xFE5
   961                           fsr1h	equ	0xFE2
   962                           fsr1l	equ	0xFE1
   963                           
   964                           	psect	cstackBANK1
   965  0001CF                     __pcstackBANK1:
   966                           	opt stack 0
   967  0001CF                     f_write@res:
   968                           	opt stack 0
   969  0001CF                     dir_register@dp:
   970                           	opt stack 0
   971  0001CF                     follow_path@dir:
   972                           	opt stack 0
   973  0001CF                     f_lseek@ifptr:
   974                           	opt stack 0
   975                           
   976                           ; 4 bytes @ 0x0
   977  0001CF                     	ds	1
   978  0001D0                     f_write@wbuff:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x1
   982  0001D0                     	ds	1
   983  0001D1                     follow_path@ns:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x2
   987  0001D1                     	ds	1
   988  0001D2                     follow_path@res:
   989                           	opt stack 0
   990  0001D2                     f_write@csect:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x3
   994  0001D2                     	ds	1
   995  0001D3                     f_lseek@res:
   996                           	opt stack 0
   997  0001D3                     f_open@fp:
   998                           	opt stack 0
   999  0001D3                     f_write@cc:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x4
  1003  0001D3                     	ds	1
  1004  0001D4                     f_lseek@nsect:
  1005                           	opt stack 0
  1006                           
  1007                           ; 4 bytes @ 0x5
  1008  0001D4                     	ds	1
  1009  0001D5                     f_open@path:
  1010                           	opt stack 0
  1011  0001D5                     f_write@sect:
  1012                           	opt stack 0
  1013                           
  1014                           ; 4 bytes @ 0x6
  1015  0001D5                     	ds	2
  1016  0001D7                     f_open@mode:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x8
  1020  0001D7                     	ds	1
  1021  0001D8                     ??_f_open:
  1022  0001D8                     f_lseek@bcs:
  1023                           	opt stack 0
  1024                           
  1025                           ; 4 bytes @ 0x9
  1026  0001D8                     	ds	1
  1027  0001D9                     f_write@clst:
  1028                           	opt stack 0
  1029                           
  1030                           ; 4 bytes @ 0xA
  1031  0001D9                     	ds	3
  1032  0001DC                     f_lseek@clst:
  1033                           	opt stack 0
  1034                           
  1035                           ; 4 bytes @ 0xD
  1036  0001DC                     	ds	1
  1037  0001DD                     f_write@wcnt:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0xE
  1041  0001DD                     	ds	3
  1042  0001E0                     open_append@fp:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x11
  1046  0001E0                     	ds	2
  1047  0001E2                     open_append@path:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x13
  1051  0001E2                     	ds	2
  1052  0001E4                     open_append@fr:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x15
  1056  0001E4                     	ds	1
  1057  0001E5                     SDCard@i:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x16
  1061  0001E5                     	ds	2
  1062  0001E7                     SDCard@bw:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x18
  1066  0001E7                     	ds	2
  1067                           tblptru	equ	0xFF8
  1068                           tblptrh	equ	0xFF7
  1069                           tblptrl	equ	0xFF6
  1070                           tablat	equ	0xFF5
  1071                           postinc0	equ	0xFEE
  1072                           wreg	equ	0xFE8
  1073                           postdec1	equ	0xFE5
  1074                           fsr1h	equ	0xFE2
  1075                           fsr1l	equ	0xFE1
  1076                           
  1077                           	psect	cstackBANK0
  1078  000060                     __pcstackBANK0:
  1079                           	opt stack 0
  1080  000060                     ??_sdc_disk_read:
  1081  000060                     ??_sdc_disk_write:
  1082  000060                     ??_clust2sect:
  1083  000060                     _create_name$2268:
  1084                           	opt stack 0
  1085  000060                     itoa@buf:
  1086                           	opt stack 0
  1087  000060                     mensagem_inicial@msg_linha_um:
  1088                           	opt stack 0
  1089                           
  1090                           ; 17 bytes @ 0x0
  1091  000060                     	ds	2
  1092  000062                     create_name@si:
  1093                           	opt stack 0
  1094  000062                     itoa@val:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x2
  1098  000062                     	ds	2
  1099  000064                     sdc_disk_read@ptr:
  1100                           	opt stack 0
  1101  000064                     create_name@b:
  1102                           	opt stack 0
  1103  000064                     sdc_disk_write@i:
  1104                           	opt stack 0
  1105  000064                     itoa@base:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x4
  1109  000064                     	ds	1
  1110  000065                     create_name@ni:
  1111                           	opt stack 0
  1112  000065                     sdc_disk_read@start_add:
  1113                           	opt stack 0
  1114                           
  1115                           ; 4 bytes @ 0x5
  1116  000065                     	ds	1
  1117  000066                     sdc_disk_write@count1:
  1118                           	opt stack 0
  1119  000066                     escreve_inteiro_lcd@texto:
  1120                           	opt stack 0
  1121                           
  1122                           ; 7 bytes @ 0x6
  1123  000066                     	ds	1
  1124  000067                     create_name@d:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x7
  1128  000067                     	ds	1
  1129  000068                     sdc_disk_write@res:
  1130                           	opt stack 0
  1131  000068                     create_name@p:
  1132                           	opt stack 0
  1133                           
  1134                           ; 2 bytes @ 0x8
  1135  000068                     	ds	1
  1136  000069                     sdc_disk_read@length:
  1137                           	opt stack 0
  1138  000069                     sdc_disk_write@j:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x9
  1142  000069                     	ds	1
  1143  00006A                     create_name@sfn:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0xA
  1147  00006A                     	ds	1
  1148  00006B                     sdc_disk_read@buff:
  1149                           	opt stack 0
  1150  00006B                     sdc_disk_write@buff:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0xB
  1154  00006B                     	ds	1
  1155  00006C                     disk_write@buff:
  1156                           	opt stack 0
  1157  00006C                     create_name@i:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0xC
  1161  00006C                     	ds	1
  1162  00006D                     ??_sdc_disk_initialize:
  1163  00006D                     disk_read@buff:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0xD
  1167  00006D                     	ds	1
  1168  00006E                     create_name@c:
  1169                           	opt stack 0
  1170  00006E                     sdc_disk_initialize@i:
  1171                           	opt stack 0
  1172  00006E                     disk_write@sector:
  1173                           	opt stack 0
  1174                           
  1175                           ; 4 bytes @ 0xE
  1176  00006E                     	ds	1
  1177  00006F                     disk_read@sector:
  1178                           	opt stack 0
  1179                           
  1180                           ; 4 bytes @ 0xF
  1181  00006F                     	ds	1
  1182  000070                     sdc_disk_initialize@stat:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x10
  1186  000070                     	ds	1
  1187  000071                     sdc_disk_initialize@count1:
  1188                           	opt stack 0
  1189  000071                     mensagem_inicial@msg_dois:
  1190                           	opt stack 0
  1191                           
  1192                           ; 17 bytes @ 0x11
  1193  000071                     	ds	1
  1194  000072                     disk_write@count:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x12
  1198  000072                     	ds	1
  1199  000073                     disk_read@count:
  1200                           	opt stack 0
  1201  000073                     disk_write@pdrv:
  1202                           	opt stack 0
  1203  000073                     sdc_disk_initialize@crc_number:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x13
  1207  000073                     	ds	1
  1208  000074                     ??_disk_read:
  1209  000074                     disk_write@result:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x14
  1213  000074                     	ds	1
  1214  000075                     sdc_disk_initialize@buff_i:
  1215                           	opt stack 0
  1216                           
  1217                           ; 1 bytes @ 0x15
  1218  000075                     	ds	1
  1219  000076                     disk_read@pdrv:
  1220                           	opt stack 0
  1221  000076                     disk_write@res:
  1222                           	opt stack 0
  1223  000076                     sdc_disk_initialize@ocr:
  1224                           	opt stack 0
  1225                           
  1226                           ; 1 bytes @ 0x16
  1227  000076                     	ds	1
  1228  000077                     disk_read@result:
  1229                           	opt stack 0
  1230  000077                     sdc_disk_initialize@count2:
  1231                           	opt stack 0
  1232  000077                     sync_window@fs:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x17
  1236  000077                     	ds	2
  1237  000079                     ??_sync_window:
  1238  000079                     disk_read@res:
  1239                           	opt stack 0
  1240  000079                     sdc_disk_initialize@buff:
  1241                           	opt stack 0
  1242                           
  1243                           ; 1 bytes @ 0x19
  1244  000079                     	ds	1
  1245  00007A                     disk_initialize@pdrv:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0x1A
  1249  00007A                     	ds	1
  1250  00007B                     disk_initialize@stat:
  1251                           	opt stack 0
  1252                           
  1253                           ; 1 bytes @ 0x1B
  1254  00007B                     	ds	10
  1255  000085                     sync_window@res:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x25
  1259  000085                     	ds	1
  1260  000086                     sync_window@nf:
  1261                           	opt stack 0
  1262                           
  1263                           ; 2 bytes @ 0x26
  1264  000086                     	ds	2
  1265  000088                     sync_window@wsect:
  1266                           	opt stack 0
  1267                           
  1268                           ; 4 bytes @ 0x28
  1269  000088                     	ds	4
  1270  00008C                     move_window@fs:
  1271                           	opt stack 0
  1272  00008C                     sync_fs@fs:
  1273                           	opt stack 0
  1274                           
  1275                           ; 2 bytes @ 0x2C
  1276  00008C                     	ds	2
  1277  00008E                     ??_sync_fs:
  1278  00008E                     move_window@sector:
  1279                           	opt stack 0
  1280                           
  1281                           ; 4 bytes @ 0x2E
  1282  00008E                     	ds	4
  1283  000092                     
  1284                           ; 1 bytes @ 0x32
  1285  000092                     	ds	4
  1286  000096                     move_window@res:
  1287                           	opt stack 0
  1288  000096                     sync_fs@res:
  1289                           	opt stack 0
  1290                           
  1291                           ; 1 bytes @ 0x36
  1292  000096                     	ds	1
  1293  000097                     ?_get_fat:
  1294                           	opt stack 0
  1295  000097                     get_fat@fs:
  1296                           	opt stack 0
  1297  000097                     put_fat@fs:
  1298                           	opt stack 0
  1299  000097                     check_fs@fs:
  1300                           	opt stack 0
  1301  000097                     f_sync@fp:
  1302                           	opt stack 0
  1303                           
  1304                           ; 2 bytes @ 0x37
  1305  000097                     	ds	2
  1306  000099                     get_fat@clst:
  1307                           	opt stack 0
  1308  000099                     put_fat@clst:
  1309                           	opt stack 0
  1310  000099                     check_fs@sect:
  1311                           	opt stack 0
  1312  000099                     f_sync@tm:
  1313                           	opt stack 0
  1314                           
  1315                           ; 4 bytes @ 0x39
  1316  000099                     	ds	4
  1317  00009D                     ??_get_fat:
  1318  00009D                     ??_check_fs:
  1319  00009D                     f_sync@res:
  1320                           	opt stack 0
  1321  00009D                     put_fat@val:
  1322                           	opt stack 0
  1323                           
  1324                           ; 4 bytes @ 0x3D
  1325  00009D                     	ds	1
  1326  00009E                     f_sync@dir:
  1327                           	opt stack 0
  1328                           
  1329                           ; 2 bytes @ 0x3E
  1330  00009E                     	ds	2
  1331  0000A0                     f_close@fp:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x40
  1335  0000A0                     	ds	1
  1336  0000A1                     ??_put_fat:
  1337  0000A1                     find_volume@rfs:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x41
  1341  0000A1                     	ds	1
  1342  0000A2                     f_close@res:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x42
  1346  0000A2                     	ds	1
  1347  0000A3                     find_volume@path:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x43
  1351  0000A3                     	ds	2
  1352  0000A5                     find_volume@wmode:
  1353                           	opt stack 0
  1354  0000A5                     _get_fat$2018:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x45
  1358  0000A5                     	ds	1
  1359  0000A6                     ??_find_volume:
  1360                           
  1361                           ; 1 bytes @ 0x46
  1362  0000A6                     	ds	1
  1363  0000A7                     get_fat@wc:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x47
  1367  0000A7                     	ds	2
  1368  0000A9                     get_fat@p:
  1369                           	opt stack 0
  1370  0000A9                     _put_fat$2044:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x49
  1374  0000A9                     	ds	2
  1375  0000AB                     _put_fat$2045:
  1376                           	opt stack 0
  1377  0000AB                     get_fat@val:
  1378                           	opt stack 0
  1379                           
  1380                           ; 4 bytes @ 0x4B
  1381  0000AB                     	ds	2
  1382  0000AD                     put_fat@bc:
  1383                           	opt stack 0
  1384                           
  1385                           ; 2 bytes @ 0x4D
  1386  0000AD                     	ds	1
  1387  0000AE                     f_mount@fs:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x4E
  1391  0000AE                     	ds	1
  1392  0000AF                     put_fat@res:
  1393                           	opt stack 0
  1394  0000AF                     get_fat@bc:
  1395                           	opt stack 0
  1396                           
  1397                           ; 2 bytes @ 0x4F
  1398  0000AF                     	ds	1
  1399  0000B0                     put_fat@p:
  1400                           	opt stack 0
  1401  0000B0                     f_mount@path:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x50
  1405  0000B0                     	ds	1
  1406  0000B1                     dir_sdi@dp:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x51
  1410  0000B1                     	ds	1
  1411  0000B2                     ?_create_chain:
  1412                           	opt stack 0
  1413  0000B2                     f_mount@opt:
  1414                           	opt stack 0
  1415  0000B2                     remove_chain@fs:
  1416                           	opt stack 0
  1417  0000B2                     create_chain@fs:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x52
  1421  0000B2                     	ds	1
  1422  0000B3                     f_mount@res:
  1423                           	opt stack 0
  1424  0000B3                     dir_sdi@idx:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x53
  1428  0000B3                     	ds	1
  1429  0000B4                     f_mount@cfs:
  1430                           	opt stack 0
  1431  0000B4                     remove_chain@clst:
  1432                           	opt stack 0
  1433  0000B4                     create_chain@clst:
  1434                           	opt stack 0
  1435                           
  1436                           ; 4 bytes @ 0x54
  1437  0000B4                     	ds	1
  1438  0000B5                     ??_dir_sdi:
  1439                           
  1440                           ; 1 bytes @ 0x55
  1441  0000B5                     	ds	1
  1442  0000B6                     f_mount@rp:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x56
  1446  0000B6                     	ds	2
  1447  0000B8                     f_mount@vol:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x58
  1451  0000B8                     	ds	4
  1452  0000BC                     remove_chain@res:
  1453                           	opt stack 0
  1454  0000BC                     create_chain@res:
  1455                           	opt stack 0
  1456  0000BC                     dir_sdi@ic:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x5C
  1460  0000BC                     	ds	1
  1461  0000BD                     remove_chain@nxt:
  1462                           	opt stack 0
  1463  0000BD                     create_chain@scl:
  1464                           	opt stack 0
  1465                           
  1466                           ; 4 bytes @ 0x5D
  1467  0000BD                     	ds	1
  1468  0000BE                     dir_sdi@sect:
  1469                           	opt stack 0
  1470                           
  1471                           ; 4 bytes @ 0x5E
  1472  0000BE                     	ds	3
  1473  0000C1                     create_chain@ncl:
  1474                           	opt stack 0
  1475                           
  1476                           ; 4 bytes @ 0x61
  1477  0000C1                     	ds	1
  1478  0000C2                     dir_sdi@clst:
  1479                           	opt stack 0
  1480                           
  1481                           ; 4 bytes @ 0x62
  1482  0000C2                     	ds	3
  1483  0000C5                     create_chain@cs:
  1484                           	opt stack 0
  1485                           
  1486                           ; 4 bytes @ 0x65
  1487  0000C5                     	ds	4
  1488  0000C9                     dir_next@dp:
  1489                           	opt stack 0
  1490  0000C9                     f_write@fp:
  1491                           	opt stack 0
  1492  0000C9                     f_lseek@fp:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x69
  1496  0000C9                     	ds	2
  1497  0000CB                     dir_next@stretch:
  1498                           	opt stack 0
  1499  0000CB                     f_write@buff:
  1500                           	opt stack 0
  1501  0000CB                     f_lseek@ofs:
  1502                           	opt stack 0
  1503                           
  1504                           ; 4 bytes @ 0x6B
  1505  0000CB                     	ds	2
  1506  0000CD                     ??_dir_next:
  1507  0000CD                     f_write@btw:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x6D
  1511  0000CD                     	ds	2
  1512  0000CF                     ??_f_lseek:
  1513  0000CF                     f_write@bw:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x6F
  1517  0000CF                     	ds	2
  1518  0000D1                     ??_f_write:
  1519                           
  1520                           ; 1 bytes @ 0x71
  1521  0000D1                     	ds	3
  1522  0000D4                     dir_next@c:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x74
  1526  0000D4                     	ds	2
  1527  0000D6                     dir_next@i:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x76
  1531  0000D6                     	ds	2
  1532  0000D8                     dir_next@clst:
  1533                           	opt stack 0
  1534                           
  1535                           ; 4 bytes @ 0x78
  1536  0000D8                     	ds	4
  1537  0000DC                     dir_alloc@dp:
  1538                           	opt stack 0
  1539  0000DC                     dir_find@dp:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x7C
  1543  0000DC                     	ds	2
  1544  0000DE                     dir_find@c:
  1545                           	opt stack 0
  1546  0000DE                     dir_alloc@nent:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x7E
  1550  0000DE                     	ds	1
  1551  0000DF                     dir_find@dir:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x7F
  1555  0000DF                     	ds	1
  1556  0000E0                     ??_dir_alloc:
  1557                           
  1558                           ; 1 bytes @ 0x80
  1559  0000E0                     	ds	1
  1560  0000E1                     dir_find@res:
  1561                           	opt stack 0
  1562                           
  1563                           ; 1 bytes @ 0x81
  1564  0000E1                     	ds	1
  1565  0000E2                     follow_path@dp:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0x82
  1569  0000E2                     	ds	1
  1570  0000E3                     dir_alloc@n:
  1571                           	opt stack 0
  1572                           
  1573                           ; 2 bytes @ 0x83
  1574  0000E3                     	ds	1
  1575  0000E4                     follow_path@path:
  1576                           	opt stack 0
  1577                           
  1578                           ; 2 bytes @ 0x84
  1579  0000E4                     	ds	1
  1580  0000E5                     dir_alloc@res:
  1581                           	opt stack 0
  1582                           
  1583                           ; 1 bytes @ 0x85
  1584  0000E5                     	ds	1
  1585  0000E6                     ??_follow_path:
  1586  0000E6                     dir_register@res:
  1587                           	opt stack 0
  1588                           
  1589                           ; 1 bytes @ 0x86
  1590  0000E6                     	ds	1
  1591                           tblptru	equ	0xFF8
  1592                           tblptrh	equ	0xFF7
  1593                           tblptrl	equ	0xFF6
  1594                           tablat	equ	0xFF5
  1595                           postinc0	equ	0xFEE
  1596                           wreg	equ	0xFE8
  1597                           postdec1	equ	0xFE5
  1598                           fsr1h	equ	0xFE2
  1599                           fsr1l	equ	0xFE1
  1600                           
  1601                           	psect	cstackCOMRAM
  1602  000001                     __pcstackCOMRAM:
  1603                           	opt stack 0
  1604  000001                     i2write_timer_zero@timer0:
  1605                           	opt stack 0
  1606                           
  1607                           ; 2 bytes @ 0x0
  1608  000001                     	ds	2
  1609  000003                     i2write_timer_zero@timer:
  1610                           	opt stack 0
  1611                           
  1612                           ; 2 bytes @ 0x2
  1613  000003                     	ds	2
  1614  000005                     ??_isr:
  1615                           
  1616                           ; 1 bytes @ 0x4
  1617  000005                     	ds	20
  1618  000019                     isr@cont:
  1619                           	opt stack 0
  1620                           
  1621                           ; 1 bytes @ 0x18
  1622  000019                     	ds	1
  1623  00001A                     ??_dummy_clocks:
  1624  00001A                     ?_mem_cmp:
  1625                           	opt stack 0
  1626  00001A                     ?_chk_chr:
  1627                           	opt stack 0
  1628  00001A                     ?_get_ldnumber:
  1629                           	opt stack 0
  1630  00001A                     ?___lwdiv:
  1631                           	opt stack 0
  1632  00001A                     ?___lwmod:
  1633                           	opt stack 0
  1634  00001A                     ?_ld_clust:
  1635                           	opt stack 0
  1636  00001A                     ?___lmul:
  1637                           	opt stack 0
  1638  00001A                     ?___lldiv:
  1639                           	opt stack 0
  1640  00001A                     response@buff:
  1641                           	opt stack 0
  1642  00001A                     WriteSPI_@TempVar:
  1643                           	opt stack 0
  1644  00001A                     disk_ioctl@cmd:
  1645                           	opt stack 0
  1646  00001A                     sdc_disk_status@stat:
  1647                           	opt stack 0
  1648  00001A                     delay@contador_ext:
  1649                           	opt stack 0
  1650  00001A                     write_timer_zero@timer0:
  1651                           	opt stack 0
  1652  00001A                     mem_cpy@dst:
  1653                           	opt stack 0
  1654  00001A                     mem_set@dst:
  1655                           	opt stack 0
  1656  00001A                     mem_cmp@dst:
  1657                           	opt stack 0
  1658  00001A                     chk_chr@str:
  1659                           	opt stack 0
  1660  00001A                     ld_clust@fs:
  1661                           	opt stack 0
  1662  00001A                     st_clust@dir:
  1663                           	opt stack 0
  1664  00001A                     get_ldnumber@path:
  1665                           	opt stack 0
  1666  00001A                     ___lwdiv@dividend:
  1667                           	opt stack 0
  1668  00001A                     ___lwmod@dividend:
  1669                           	opt stack 0
  1670  00001A                     wait_ready@timeout:
  1671                           	opt stack 0
  1672  00001A                     ___lmul@multiplier:
  1673                           	opt stack 0
  1674  00001A                     ___lldiv@dividend:
  1675                           	opt stack 0
  1676                           
  1677                           ; 4 bytes @ 0x19
  1678  00001A                     	ds	1
  1679  00001B                     WriteSPI_@dado:
  1680                           	opt stack 0
  1681  00001B                     sdc_disk_status@pdrv:
  1682                           	opt stack 0
  1683  00001B                     delay@contador_int:
  1684                           	opt stack 0
  1685  00001B                     disk_ioctl@buff:
  1686                           	opt stack 0
  1687                           
  1688                           ; 2 bytes @ 0x1A
  1689  00001B                     	ds	1
  1690  00001C                     ??_disk_status:
  1691  00001C                     ??_get_ldnumber:
  1692  00001C                     escalonador@cont:
  1693                           	opt stack 0
  1694  00001C                     dummy_clocks@n:
  1695                           	opt stack 0
  1696  00001C                     escreve_cmd_lcd@comando:
  1697                           	opt stack 0
  1698  00001C                     endereco_cursor_lcd@endereco:
  1699                           	opt stack 0
  1700  00001C                     escreve_caractere_lcd@data:
  1701                           	opt stack 0
  1702  00001C                     write_timer_zero@timer:
  1703                           	opt stack 0
  1704  00001C                     mem_cpy@src:
  1705                           	opt stack 0
  1706  00001C                     mem_set@val:
  1707                           	opt stack 0
  1708  00001C                     mem_cmp@src:
  1709                           	opt stack 0
  1710  00001C                     chk_chr@chr:
  1711                           	opt stack 0
  1712  00001C                     ld_clust@dir:
  1713                           	opt stack 0
  1714  00001C                     ___lwdiv@divisor:
  1715                           	opt stack 0
  1716  00001C                     ___lwmod@divisor:
  1717                           	opt stack 0
  1718  00001C                     st_clust@cl:
  1719                           	opt stack 0
  1720                           
  1721                           ; 4 bytes @ 0x1B
  1722  00001C                     	ds	1
  1723  00001D                     ??_init_lcd:
  1724  00001D                     disk_ioctl@pdrv:
  1725                           	opt stack 0
  1726  00001D                     posicao_cursor_lcd@coluna:
  1727                           	opt stack 0
  1728  00001D                     dummy_clocks@i:
  1729                           	opt stack 0
  1730  00001D                     disk_status@result:
  1731                           	opt stack 0
  1732  00001D                     escreve_frase_ram_lcd@buffer:
  1733                           	opt stack 0
  1734                           
  1735                           ; 2 bytes @ 0x1C
  1736  00001D                     	ds	1
  1737  00001E                     ??_chk_chr:
  1738  00001E                     ??_ld_clust:
  1739  00001E                     wait_ready@res:
  1740                           	opt stack 0
  1741  00001E                     disk_ioctl@res:
  1742                           	opt stack 0
  1743  00001E                     posicao_cursor_lcd@linha:
  1744                           	opt stack 0
  1745  00001E                     ___lwdiv@counter:
  1746                           	opt stack 0
  1747  00001E                     ___lwmod@counter:
  1748                           	opt stack 0
  1749  00001E                     mem_cpy@cnt:
  1750                           	opt stack 0
  1751  00001E                     mem_set@cnt:
  1752                           	opt stack 0
  1753  00001E                     mem_cmp@cnt:
  1754                           	opt stack 0
  1755  00001E                     _get_ldnumber$2292:
  1756                           	opt stack 0
  1757  00001E                     ___lmul@multiplicand:
  1758                           	opt stack 0
  1759  00001E                     ___lldiv@divisor:
  1760                           	opt stack 0
  1761                           
  1762                           ; 4 bytes @ 0x1D
  1763  00001E                     	ds	1
  1764  00001F                     disk_status@pdrv:
  1765                           	opt stack 0
  1766  00001F                     posicao_cursor_lcd@endereco:
  1767                           	opt stack 0
  1768  00001F                     ___lwdiv@quotient:
  1769                           	opt stack 0
  1770  00001F                     command@arg:
  1771                           	opt stack 0
  1772                           
  1773                           ; 4 bytes @ 0x1E
  1774  00001F                     	ds	1
  1775  000020                     ??_mensagem_inicial:
  1776  000020                     ??_mem_cpy:
  1777  000020                     ??_mem_cmp:
  1778  000020                     inicializa_SPI@bus_mode:
  1779                           	opt stack 0
  1780  000020                     disk_status@stat:
  1781                           	opt stack 0
  1782  000020                     mem_set@d:
  1783                           	opt stack 0
  1784  000020                     get_ldnumber@tp:
  1785                           	opt stack 0
  1786                           
  1787                           ; 2 bytes @ 0x1F
  1788  000020                     	ds	1
  1789  000021                     inicializa_SPI@smp_phase:
  1790                           	opt stack 0
  1791  000021                     validate@obj:
  1792                           	opt stack 0
  1793  000021                     utoa@buf:
  1794                           	opt stack 0
  1795                           
  1796                           ; 2 bytes @ 0x20
  1797  000021                     	ds	1
  1798  000022                     mem_cpy@d:
  1799                           	opt stack 0
  1800  000022                     create_name@dp:
  1801                           	opt stack 0
  1802  000022                     get_ldnumber@vol:
  1803                           	opt stack 0
  1804  000022                     ___lmul@product:
  1805                           	opt stack 0
  1806  000022                     ___lldiv@quotient:
  1807                           	opt stack 0
  1808                           
  1809                           ; 4 bytes @ 0x21
  1810  000022                     	ds	1
  1811  000023                     ??_validate:
  1812  000023                     command@CRC:
  1813                           	opt stack 0
  1814  000023                     mem_cmp@d:
  1815                           	opt stack 0
  1816  000023                     utoa@val:
  1817                           	opt stack 0
  1818                           
  1819                           ; 2 bytes @ 0x22
  1820  000023                     	ds	1
  1821  000024                     command@CMD:
  1822                           	opt stack 0
  1823  000024                     mem_cpy@s:
  1824                           	opt stack 0
  1825  000024                     create_name@path:
  1826                           	opt stack 0
  1827  000024                     get_ldnumber@i:
  1828                           	opt stack 0
  1829  000024                     ld_clust@cl:
  1830                           	opt stack 0
  1831                           
  1832                           ; 4 bytes @ 0x23
  1833  000024                     	ds	1
  1834  000025                     command@argument:
  1835                           	opt stack 0
  1836  000025                     mem_cmp@s:
  1837                           	opt stack 0
  1838  000025                     utoa@base:
  1839                           	opt stack 0
  1840                           
  1841                           ; 2 bytes @ 0x24
  1842  000025                     	ds	1
  1843  000026                     ??_create_name:
  1844  000026                     ?_clust2sect:
  1845                           	opt stack 0
  1846  000026                     ___lldiv@counter:
  1847                           	opt stack 0
  1848  000026                     sdc_reset@i:
  1849                           	opt stack 0
  1850  000026                     sdc_disk_read@p_buff:
  1851                           	opt stack 0
  1852  000026                     sdc_disk_write@p_buff:
  1853                           	opt stack 0
  1854  000026                     clust2sect@fs:
  1855                           	opt stack 0
  1856  000026                     get_ldnumber@tt:
  1857                           	opt stack 0
  1858                           
  1859                           ; 2 bytes @ 0x25
  1860  000026                     	ds	1
  1861  000027                     mem_cmp@r:
  1862                           	opt stack 0
  1863  000027                     validate@fil:
  1864                           	opt stack 0
  1865  000027                     utoa@v:
  1866                           	opt stack 0
  1867                           
  1868                           ; 2 bytes @ 0x26
  1869  000027                     	ds	1
  1870  000028                     sdc_reset@count_nosd:
  1871                           	opt stack 0
  1872  000028                     sdc_disk_read@sector:
  1873                           	opt stack 0
  1874  000028                     sdc_disk_write@sector:
  1875                           	opt stack 0
  1876  000028                     clust2sect@clst:
  1877                           	opt stack 0
  1878                           
  1879                           ; 4 bytes @ 0x27
  1880  000028                     	ds	1
  1881  000029                     utoa@c:
  1882                           	opt stack 0
  1883                           
  1884                           ; 1 bytes @ 0x28
  1885  000029                     	ds	1
  1886  00002A                     sdc_reset@count:
  1887                           	opt stack 0
  1888  00002A                     itoa@cp:
  1889                           	opt stack 0
  1890                           
  1891                           ; 2 bytes @ 0x29
  1892  00002A                     	ds	2
  1893  00002C                     sdc_reset@buff:
  1894                           	opt stack 0
  1895  00002C                     sdc_disk_read@count:
  1896                           	opt stack 0
  1897  00002C                     sdc_disk_write@count:
  1898                           	opt stack 0
  1899  00002C                     escreve_inteiro_lcd@valor:
  1900                           	opt stack 0
  1901                           
  1902                           ; 2 bytes @ 0x2B
  1903  00002C                     	ds	1
  1904  00002D                     ??_disk_write:
  1905                           
  1906                           ; 1 bytes @ 0x2C
  1907  00002D                     	ds	1
  1908  00002E                     tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           postinc0	equ	0xFEE
  1913                           wreg	equ	0xFE8
  1914                           postdec1	equ	0xFE5
  1915                           fsr1h	equ	0xFE2
  1916                           fsr1l	equ	0xFE1
  1917                           
  1918                           ; 1 bytes @ 0x2D
  1919 ;;
  1920 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1921 ;;
  1922 ;; *************** function _main *****************
  1923 ;; Defined at:
  1924 ;;		line 218 in file "main.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;		None
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;		None
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      void 
  1931 ;; Registers used:
  1932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1938 ;;      Params:         0       0       0       0       0       0       0       0       0
  1939 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1940 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1941 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1942 ;;Total ram usage:        0 bytes
  1943 ;; Hardware stack levels required when called:   17
  1944 ;; This function calls:
  1945 ;;		_SDCard
  1946 ;;		_escalonador
  1947 ;;		_inicializa_SPI
  1948 ;;		_inicializa_tarefas
  1949 ;;		_init_hardware
  1950 ;;		_init_lcd
  1951 ;;		_mensagem_inicial
  1952 ;; This function is called by:
  1953 ;;		Startup code after reset
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           	psect	text0
  1958  00553E                     __ptext0:
  1959                           	opt stack 0
  1960  00553E                     _main:
  1961                           	opt stack 14
  1962                           
  1963                           ;main.c: 220: init_hardware();
  1964                           
  1965                           ;incstack = 0
  1966  00553E  EC67  F02B         	call	_init_hardware	;wreg free
  1967                           
  1968                           ;main.c: 222: init_lcd();
  1969  005542  EC71  F025         	call	_init_lcd	;wreg free
  1970                           
  1971                           ;main.c: 225: mensagem_inicial();
  1972  005546  EC14  F027         	call	_mensagem_inicial	;wreg free
  1973                           
  1974                           ;main.c: 226: inicializa_tarefas();
  1975  00554A  EC00  F02B         	call	_inicializa_tarefas	;wreg free
  1976                           
  1977                           ;main.c: 227: inicializa_SPI(0,3,1);
  1978  00554E  0E03               	movlw	3
  1979  005550  6E20               	movwf	inicializa_SPI@bus_mode,c
  1980  005552  0E01               	movlw	1
  1981  005554  6E21               	movwf	inicializa_SPI@smp_phase,c
  1982  005556  0E00               	movlw	0
  1983  005558  ECE7  F029         	call	_inicializa_SPI
  1984                           
  1985                           ;main.c: 228: ADCON1 = 0X0F;
  1986  00555C  0E0F               	movlw	15
  1987  00555E  6EC1               	movwf	4033,c	;volatile
  1988                           
  1989                           ;main.c: 230: SDCard();
  1990  005560  EC19  F024         	call	_SDCard	;wreg free
  1991  005564                     
  1992                           ;main.c: 232: {
  1993                           ;main.c: 234: if ((sinaliza_int_timer == 1) && (2))
  1994  005564  0444               	decf	_sinaliza_int_timer,w,c
  1995  005566  A4D8               	btfss	status,2,c
  1996  005568  D7FD               	goto	l83
  1997                           
  1998                           ;main.c: 235: {
  1999                           ;main.c: 236: sinaliza_int_timer = 0;
  2000  00556A  0E00               	movlw	0
  2001  00556C  6E44               	movwf	_sinaliza_int_timer,c
  2002                           
  2003                           ;main.c: 237: escalonador();
  2004  00556E  EC51  F027         	call	_escalonador	;wreg free
  2005  005572  D7F8               	goto	l83
  2006  005574                     __end_of_main:
  2007                           	opt stack 0
  2008                           tblptru	equ	0xFF8
  2009                           tblptrh	equ	0xFF7
  2010                           tblptrl	equ	0xFF6
  2011                           tablat	equ	0xFF5
  2012                           postinc0	equ	0xFEE
  2013                           wreg	equ	0xFE8
  2014                           postdec1	equ	0xFE5
  2015                           fsr1h	equ	0xFE2
  2016                           fsr1l	equ	0xFE1
  2017                           status	equ	0xFD8
  2018                           
  2019 ;; *************** function _mensagem_inicial *****************
  2020 ;; Defined at:
  2021 ;;		line 249 in file "main.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;		None
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  2026 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2036 ;;      Params:         0       0       0       0       0       0       0       0       0
  2037 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2038 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2039 ;;      Totals:         2      34       0       0       0       0       0       0       0
  2040 ;;Total ram usage:       36 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; Hardware stack levels required when called:    5
  2043 ;; This function calls:
  2044 ;;		_escreve_cmd_lcd
  2045 ;;		_escreve_frase_ram_lcd
  2046 ;;		_posicao_cursor_lcd
  2047 ;; This function is called by:
  2048 ;;		_main
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           	psect	text1
  2053  004E28                     __ptext1:
  2054                           	opt stack 0
  2055  004E28                     _mensagem_inicial:
  2056                           	opt stack 25
  2057                           
  2058                           ;main.c: 251: const unsigned char msg_linha_um[17] = "SDCard Init   ";
  2059                           
  2060                           ;incstack = 0
  2061  004E28  0ED6               	movlw	low mensagem_inicial@F4134
  2062  004E2A  6EF6               	movwf	tblptrl,c
  2063  004E2C                     	if	1	;There is more than 1 active tblptr byte
  2064  004E2C  0E61               	movlw	high mensagem_inicial@F4134
  2065  004E2E  6EF7               	movwf	tblptrh,c
  2066  004E30                     	endif
  2067  004E30                     	if	0	;There are less than 3 active tblptr bytes
  2068  004E30                     	endif
  2069  004E30  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  2070  004E34  0E10               	movlw	16
  2071  004E36                     u16050:
  2072  004E36  0009               	tblrd		*+
  2073  004E38  CFF5 FFDE          	movff	tablat,postinc2
  2074  004E3C  06E8               	decf	wreg,f,c
  2075  004E3E  E2FB               	bc	u16050
  2076                           
  2077                           ;main.c: 252: const unsigned char msg_dois[17] = " 18/01/2022   ";
  2078  004E40  0EC5               	movlw	low mensagem_inicial@F4136
  2079  004E42  6EF6               	movwf	tblptrl,c
  2080  004E44                     	if	1	;There is more than 1 active tblptr byte
  2081  004E44  0E61               	movlw	high mensagem_inicial@F4136
  2082  004E46  6EF7               	movwf	tblptrh,c
  2083  004E48                     	endif
  2084  004E48                     	if	0	;There are less than 3 active tblptr bytes
  2085  004E48                     	endif
  2086  004E48  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  2087  004E4C  0E10               	movlw	16
  2088  004E4E                     u16060:
  2089  004E4E  0009               	tblrd		*+
  2090  004E50  CFF5 FFDE          	movff	tablat,postinc2
  2091  004E54  06E8               	decf	wreg,f,c
  2092  004E56  E2FB               	bc	u16060
  2093                           
  2094                           ;main.c: 254: posicao_cursor_lcd(1,0);
  2095  004E58  0E00               	movlw	0
  2096  004E5A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  2097  004E5C  0E01               	movlw	1
  2098  004E5E  EC37  F028         	call	_posicao_cursor_lcd
  2099                           
  2100                           ;main.c: 255: escreve_frase_ram_lcd(msg_linha_um);
  2101  004E62  0E60               	movlw	low mensagem_inicial@msg_linha_um
  2102  004E64  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  2103  004E66  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2104  004E68  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2105  004E6A  EC57  F029         	call	_escreve_frase_ram_lcd	;wreg free
  2106                           
  2107                           ;main.c: 257: posicao_cursor_lcd(2,0);
  2108  004E6E  0E00               	movlw	0
  2109  004E70  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  2110  004E72  0E02               	movlw	2
  2111  004E74  EC37  F028         	call	_posicao_cursor_lcd
  2112                           
  2113                           ;main.c: 258: escreve_frase_ram_lcd(msg_dois);
  2114  004E78  0E71               	movlw	low mensagem_inicial@msg_dois
  2115  004E7A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  2116  004E7C  0E00               	movlw	high mensagem_inicial@msg_dois
  2117  004E7E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  2118  004E80  EC57  F029         	call	_escreve_frase_ram_lcd	;wreg free
  2119                           
  2120                           ;main.c: 259: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2121  004E84  0E3D               	movlw	61
  2122  004E86  6E21               	movwf	(??_mensagem_inicial+1)& (0+255),c
  2123  004E88  0EE1               	movlw	225
  2124  004E8A  6E20               	movwf	??_mensagem_inicial& (0+255),c
  2125  004E8C  0E40               	movlw	64
  2126  004E8E                     u17207:
  2127  004E8E  2EE8               	decfsz	wreg,f,c
  2128  004E90  D7FE               	bra	u17207
  2129  004E92  2E20               	decfsz	??_mensagem_inicial& (0+255),f,c
  2130  004E94  D7FC               	bra	u17207
  2131  004E96  2E21               	decfsz	(??_mensagem_inicial+1)& (0+255),f,c
  2132  004E98  D7FA               	bra	u17207
  2133                           
  2134                           ;main.c: 260: escreve_cmd_lcd(0b00000001);
  2135  004E9A  0E01               	movlw	1
  2136  004E9C  EC0A  F026         	call	_escreve_cmd_lcd
  2137  004EA0  0012               	return		;funcret
  2138  004EA2                     __end_of_mensagem_inicial:
  2139                           	opt stack 0
  2140                           tblptru	equ	0xFF8
  2141                           tblptrh	equ	0xFF7
  2142                           tblptrl	equ	0xFF6
  2143                           tablat	equ	0xFF5
  2144                           postinc0	equ	0xFEE
  2145                           wreg	equ	0xFE8
  2146                           postdec1	equ	0xFE5
  2147                           fsr1h	equ	0xFE2
  2148                           fsr1l	equ	0xFE1
  2149                           postinc2	equ	0xFDE
  2150                           status	equ	0xFD8
  2151                           
  2152 ;; *************** function _init_lcd *****************
  2153 ;; Defined at:
  2154 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;		None
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1    wreg      void 
  2161 ;; Registers used:
  2162 ;;		wreg, status,2, status,0, cstack
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2168 ;;      Params:         0       0       0       0       0       0       0       0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2170 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2171 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2172 ;;Total ram usage:        1 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    4
  2175 ;; This function calls:
  2176 ;;		_delay
  2177 ;;		_escreve_cmd_lcd
  2178 ;; This function is called by:
  2179 ;;		_main
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           	psect	text2
  2184  004AE2                     __ptext2:
  2185                           	opt stack 0
  2186  004AE2                     _init_lcd:
  2187                           	opt stack 26
  2188                           
  2189                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2190                           
  2191                           ;incstack = 0
  2192  004AE2  9495               	bcf	3989,2,c	;volatile
  2193                           
  2194                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2195  004AE4  9295               	bcf	3989,1,c	;volatile
  2196                           
  2197                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2198  004AE6  9095               	bcf	3989,0,c	;volatile
  2199                           
  2200                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2201  004AE8  9895               	bcf	3989,4,c	;volatile
  2202                           
  2203                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2204  004AEA  9A95               	bcf	3989,5,c	;volatile
  2205                           
  2206                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2207  004AEC  9C95               	bcf	3989,6,c	;volatile
  2208                           
  2209                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2210  004AEE  9E95               	bcf	3989,7,c	;volatile
  2211                           
  2212                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2213  004AF0  9483               	bcf	3971,2,c	;volatile
  2214                           
  2215                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2216  004AF2  9283               	bcf	3971,1,c	;volatile
  2217                           
  2218                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2219  004AF4  9083               	bcf	3971,0,c	;volatile
  2220                           
  2221                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2222  004AF6  9E83               	bcf	3971,7,c	;volatile
  2223                           
  2224                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2225  004AF8  9C83               	bcf	3971,6,c	;volatile
  2226                           
  2227                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2228  004AFA  8A83               	bsf	3971,5,c	;volatile
  2229                           
  2230                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2231  004AFC  8883               	bsf	3971,4,c	;volatile
  2232                           
  2233                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2234  004AFE  0EEA               	movlw	234
  2235  004B00  6E1D               	movwf	??_init_lcd& (0+255),c
  2236  004B02  0EC3               	movlw	195
  2237  004B04                     u17217:
  2238  004B04  2EE8               	decfsz	wreg,f,c
  2239  004B06  D7FE               	bra	u17217
  2240  004B08  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2241  004B0A  D7FC               	bra	u17217
  2242  004B0C  F000               	nop	
  2243                           
  2244                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2245  004B0E  8083               	bsf	3971,0,c	;volatile
  2246                           
  2247                           ;display_lcd.c: 108: delay();
  2248  004B10  EC3C  F02B         	call	_delay	;wreg free
  2249                           
  2250                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2251  004B14  9083               	bcf	3971,0,c	;volatile
  2252                           
  2253                           ;display_lcd.c: 110: delay();
  2254  004B16  EC3C  F02B         	call	_delay	;wreg free
  2255                           
  2256                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2257  004B1A  0E4E               	movlw	78
  2258  004B1C  6E1D               	movwf	??_init_lcd& (0+255),c
  2259  004B1E  0EEB               	movlw	235
  2260  004B20                     u17227:
  2261  004B20  2EE8               	decfsz	wreg,f,c
  2262  004B22  D7FE               	bra	u17227
  2263  004B24  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2264  004B26  D7FC               	bra	u17227
  2265  004B28  F000               	nop	
  2266                           
  2267                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2268  004B2A  8083               	bsf	3971,0,c	;volatile
  2269                           
  2270                           ;display_lcd.c: 119: delay();
  2271  004B2C  EC3C  F02B         	call	_delay	;wreg free
  2272                           
  2273                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2274  004B30  9083               	bcf	3971,0,c	;volatile
  2275                           
  2276                           ;display_lcd.c: 121: delay();
  2277  004B32  EC3C  F02B         	call	_delay	;wreg free
  2278                           
  2279                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2280  004B36  0E4E               	movlw	78
  2281  004B38  6E1D               	movwf	??_init_lcd& (0+255),c
  2282  004B3A  0EEB               	movlw	235
  2283  004B3C                     u17237:
  2284  004B3C  2EE8               	decfsz	wreg,f,c
  2285  004B3E  D7FE               	bra	u17237
  2286  004B40  2E1D               	decfsz	??_init_lcd& (0+255),f,c
  2287  004B42  D7FC               	bra	u17237
  2288  004B44  F000               	nop	
  2289                           
  2290                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2291  004B46  8083               	bsf	3971,0,c	;volatile
  2292                           
  2293                           ;display_lcd.c: 130: delay();
  2294  004B48  EC3C  F02B         	call	_delay	;wreg free
  2295                           
  2296                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2297  004B4C  9083               	bcf	3971,0,c	;volatile
  2298                           
  2299                           ;display_lcd.c: 132: delay();
  2300  004B4E  EC3C  F02B         	call	_delay	;wreg free
  2301                           
  2302                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2303  004B52  9E83               	bcf	3971,7,c	;volatile
  2304                           
  2305                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2306  004B54  9C83               	bcf	3971,6,c	;volatile
  2307                           
  2308                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2309  004B56  8A83               	bsf	3971,5,c	;volatile
  2310                           
  2311                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2312  004B58  9883               	bcf	3971,4,c	;volatile
  2313                           
  2314                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2315  004B5A  8083               	bsf	3971,0,c	;volatile
  2316                           
  2317                           ;display_lcd.c: 143: delay();
  2318  004B5C  EC3C  F02B         	call	_delay	;wreg free
  2319                           
  2320                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2321  004B60  9083               	bcf	3971,0,c	;volatile
  2322                           
  2323                           ;display_lcd.c: 145: delay();
  2324  004B62  EC3C  F02B         	call	_delay	;wreg free
  2325                           
  2326                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2327  004B66  0E28               	movlw	40
  2328  004B68  EC0A  F026         	call	_escreve_cmd_lcd
  2329                           
  2330                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2331  004B6C  0E06               	movlw	6
  2332  004B6E  EC0A  F026         	call	_escreve_cmd_lcd
  2333                           
  2334                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2335  004B72  0E0E               	movlw	14
  2336  004B74  EC0A  F026         	call	_escreve_cmd_lcd
  2337                           
  2338                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2339  004B78  0E01               	movlw	1
  2340  004B7A  EC0A  F026         	call	_escreve_cmd_lcd
  2341  004B7E  0012               	return		;funcret
  2342  004B80                     __end_of_init_lcd:
  2343                           	opt stack 0
  2344                           tblptru	equ	0xFF8
  2345                           tblptrh	equ	0xFF7
  2346                           tblptrl	equ	0xFF6
  2347                           tablat	equ	0xFF5
  2348                           postinc0	equ	0xFEE
  2349                           wreg	equ	0xFE8
  2350                           postdec1	equ	0xFE5
  2351                           fsr1h	equ	0xFE2
  2352                           fsr1l	equ	0xFE1
  2353                           postinc2	equ	0xFDE
  2354                           status	equ	0xFD8
  2355                           
  2356 ;; *************** function _init_hardware *****************
  2357 ;; Defined at:
  2358 ;;		line 55 in file "bibliotecas/hardware.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;		None
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;		None
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      void 
  2365 ;; Registers used:
  2366 ;;		wreg, status,2, cstack
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2372 ;;      Params:         0       0       0       0       0       0       0       0       0
  2373 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2374 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2375 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2376 ;;Total ram usage:        0 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; Hardware stack levels required when called:    4
  2379 ;; This function calls:
  2380 ;;		_config_timer_dois
  2381 ;;		_config_timer_zero
  2382 ;;		_init_interrupt
  2383 ;;		_init_oscilador
  2384 ;;		_init_ports
  2385 ;; This function is called by:
  2386 ;;		_main
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text3
  2391  0056CE                     __ptext3:
  2392                           	opt stack 0
  2393  0056CE                     _init_hardware:
  2394                           	opt stack 26
  2395                           
  2396                           ;hardware.c: 58: init_oscilador();
  2397                           
  2398                           ;incstack = 0
  2399  0056CE  ECC1  F02B         	call	_init_oscilador	;wreg free
  2400                           
  2401                           ;hardware.c: 61: init_ports();
  2402  0056D2  EC5B  F02B         	call	_init_ports	;wreg free
  2403                           
  2404                           ;hardware.c: 64: config_timer_zero();
  2405  0056D6  EC4E  F02B         	call	_config_timer_zero	;wreg free
  2406                           
  2407                           ;hardware.c: 67: config_timer_dois();
  2408  0056DA  ECA9  F02B         	call	_config_timer_dois	;wreg free
  2409                           
  2410                           ;hardware.c: 70: init_interrupt();
  2411  0056DE  EC7C  F02B         	call	_init_interrupt	;wreg free
  2412  0056E2  0012               	return		;funcret
  2413  0056E4                     __end_of_init_hardware:
  2414                           	opt stack 0
  2415                           tblptru	equ	0xFF8
  2416                           tblptrh	equ	0xFF7
  2417                           tblptrl	equ	0xFF6
  2418                           tablat	equ	0xFF5
  2419                           postinc0	equ	0xFEE
  2420                           wreg	equ	0xFE8
  2421                           postdec1	equ	0xFE5
  2422                           fsr1h	equ	0xFE2
  2423                           fsr1l	equ	0xFE1
  2424                           postinc2	equ	0xFDE
  2425                           status	equ	0xFD8
  2426                           
  2427 ;; *************** function _init_ports *****************
  2428 ;; Defined at:
  2429 ;;		line 154 in file "bibliotecas/hardware.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;		None
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;		None
  2434 ;; Return value:  Size  Location     Type
  2435 ;;                  1    wreg      void 
  2436 ;; Registers used:
  2437 ;;		wreg, status,2
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2443 ;;      Params:         0       0       0       0       0       0       0       0       0
  2444 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2445 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2446 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2447 ;;Total ram usage:        0 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    2
  2450 ;; This function calls:
  2451 ;;		Nothing
  2452 ;; This function is called by:
  2453 ;;		_init_hardware
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           	psect	text4
  2458  0056B6                     __ptext4:
  2459                           	opt stack 0
  2460  0056B6                     _init_ports:
  2461                           	opt stack 27
  2462                           
  2463                           ;hardware.c: 156: TRISB = 0b00100001;
  2464                           
  2465                           ;incstack = 0
  2466  0056B6  0E21               	movlw	33
  2467  0056B8  6E93               	movwf	3987,c	;volatile
  2468                           
  2469                           ;hardware.c: 157: LATB = 0xFF;
  2470  0056BA  688A               	setf	3978,c	;volatile
  2471                           
  2472                           ;hardware.c: 158: TRISD = 0x00;
  2473  0056BC  0E00               	movlw	0
  2474  0056BE  6E95               	movwf	3989,c	;volatile
  2475                           
  2476                           ;hardware.c: 159: TRISA = 0b00000111;
  2477  0056C0  0E07               	movlw	7
  2478  0056C2  6E92               	movwf	3986,c	;volatile
  2479                           
  2480                           ;hardware.c: 160: TRISC = 0x01111111;
  2481  0056C4  0E11               	movlw	17
  2482  0056C6  6E94               	movwf	3988,c	;volatile
  2483                           
  2484                           ;hardware.c: 161: TRISE = 0b00000011;
  2485  0056C8  0E03               	movlw	3
  2486  0056CA  6E96               	movwf	3990,c	;volatile
  2487  0056CC  0012               	return		;funcret
  2488  0056CE                     __end_of_init_ports:
  2489                           	opt stack 0
  2490                           tblptru	equ	0xFF8
  2491                           tblptrh	equ	0xFF7
  2492                           tblptrl	equ	0xFF6
  2493                           tablat	equ	0xFF5
  2494                           postinc0	equ	0xFEE
  2495                           wreg	equ	0xFE8
  2496                           postdec1	equ	0xFE5
  2497                           fsr1h	equ	0xFE2
  2498                           fsr1l	equ	0xFE1
  2499                           postinc2	equ	0xFDE
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function _init_oscilador *****************
  2503 ;; Defined at:
  2504 ;;		line 171 in file "bibliotecas/hardware.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;		None
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		None
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2518 ;;      Params:         0       0       0       0       0       0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2520 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2521 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2522 ;;Total ram usage:        0 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    2
  2525 ;; This function calls:
  2526 ;;		Nothing
  2527 ;; This function is called by:
  2528 ;;		_init_hardware
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text5
  2533  005782                     __ptext5:
  2534                           	opt stack 0
  2535  005782                     _init_oscilador:
  2536                           	opt stack 27
  2537                           
  2538                           ;hardware.c: 174: OSCCONbits.IRCF0 = 1;
  2539                           
  2540                           ;incstack = 0
  2541  005782  88D3               	bsf	4051,4,c	;volatile
  2542                           
  2543                           ;hardware.c: 175: OSCCONbits.IRCF1 = 1;
  2544  005784  8AD3               	bsf	4051,5,c	;volatile
  2545                           
  2546                           ;hardware.c: 176: OSCCONbits.IRCF2 = 1;
  2547  005786  8CD3               	bsf	4051,6,c	;volatile
  2548  005788  0012               	return		;funcret
  2549  00578A                     __end_of_init_oscilador:
  2550                           	opt stack 0
  2551                           tblptru	equ	0xFF8
  2552                           tblptrh	equ	0xFF7
  2553                           tblptrl	equ	0xFF6
  2554                           tablat	equ	0xFF5
  2555                           postinc0	equ	0xFEE
  2556                           wreg	equ	0xFE8
  2557                           postdec1	equ	0xFE5
  2558                           fsr1h	equ	0xFE2
  2559                           fsr1l	equ	0xFE1
  2560                           postinc2	equ	0xFDE
  2561                           status	equ	0xFD8
  2562                           
  2563 ;; *************** function _init_interrupt *****************
  2564 ;; Defined at:
  2565 ;;		line 98 in file "bibliotecas/hardware.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;		None
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;		None
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  1    wreg      void 
  2572 ;; Registers used:
  2573 ;;		wreg, status,2
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2579 ;;      Params:         0       0       0       0       0       0       0       0       0
  2580 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2581 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2582 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2583 ;;Total ram usage:        0 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    2
  2586 ;; This function calls:
  2587 ;;		Nothing
  2588 ;; This function is called by:
  2589 ;;		_init_hardware
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           	psect	text6
  2594  0056F8                     __ptext6:
  2595                           	opt stack 0
  2596  0056F8                     _init_interrupt:
  2597                           	opt stack 27
  2598                           
  2599                           ;hardware.c: 100: INTCON = 0b10110000;
  2600                           
  2601                           ;incstack = 0
  2602  0056F8  0EB0               	movlw	176
  2603  0056FA  6EF2               	movwf	intcon,c	;volatile
  2604                           
  2605                           ;hardware.c: 101: INTCON2 = 0b00000000;
  2606  0056FC  0E00               	movlw	0
  2607  0056FE  6EF1               	movwf	intcon2,c	;volatile
  2608                           
  2609                           ;hardware.c: 102: INTCON3 = 0b00000000;
  2610  005700  0E00               	movlw	0
  2611  005702  6EF0               	movwf	intcon3,c	;volatile
  2612                           
  2613                           ;hardware.c: 104: PIE1 = 0b00001000;
  2614  005704  0E08               	movlw	8
  2615  005706  6E9D               	movwf	3997,c	;volatile
  2616  005708  0012               	return		;funcret
  2617  00570A                     __end_of_init_interrupt:
  2618                           	opt stack 0
  2619                           tblptru	equ	0xFF8
  2620                           tblptrh	equ	0xFF7
  2621                           tblptrl	equ	0xFF6
  2622                           tablat	equ	0xFF5
  2623                           intcon	equ	0xFF2
  2624                           intcon2	equ	0xFF1
  2625                           intcon3	equ	0xFF0
  2626                           postinc0	equ	0xFEE
  2627                           wreg	equ	0xFE8
  2628                           postdec1	equ	0xFE5
  2629                           fsr1h	equ	0xFE2
  2630                           fsr1l	equ	0xFE1
  2631                           postinc2	equ	0xFDE
  2632                           status	equ	0xFD8
  2633                           
  2634 ;; *************** function _config_timer_zero *****************
  2635 ;; Defined at:
  2636 ;;		line 83 in file "bibliotecas/hardware.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;		None
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;		None
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg, status,2, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2650 ;;      Params:         0       0       0       0       0       0       0       0       0
  2651 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2652 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2653 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2654 ;;Total ram usage:        0 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    3
  2657 ;; This function calls:
  2658 ;;		_write_timer_zero
  2659 ;; This function is called by:
  2660 ;;		_init_hardware
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           	psect	text7
  2665  00569C                     __ptext7:
  2666                           	opt stack 0
  2667  00569C                     _config_timer_zero:
  2668                           	opt stack 26
  2669                           
  2670                           ;hardware.c: 85: T0CON = 0b11000011;
  2671                           
  2672                           ;incstack = 0
  2673  00569C  0EC3               	movlw	195
  2674  00569E  6ED5               	movwf	4053,c	;volatile
  2675                           
  2676                           ;hardware.c: 86: SPPCON = 0b00000000;
  2677  0056A0  0E00               	movlw	0
  2678  0056A2  6E65               	movwf	3941,c	;volatile
  2679                           
  2680                           ;hardware.c: 87: SPPCFG = 0b00000000;
  2681  0056A4  0E00               	movlw	0
  2682  0056A6  6E63               	movwf	3939,c	;volatile
  2683                           
  2684                           ;hardware.c: 88: write_timer_zero(0x0083);
  2685  0056A8  0E00               	movlw	0
  2686  0056AA  6E1B               	movwf	write_timer_zero@timer0+1,c
  2687  0056AC  0E83               	movlw	131
  2688  0056AE  6E1A               	movwf	write_timer_zero@timer0,c
  2689  0056B0  EC85  F02B         	call	_write_timer_zero	;wreg free
  2690  0056B4  0012               	return		;funcret
  2691  0056B6                     __end_of_config_timer_zero:
  2692                           	opt stack 0
  2693                           tblptru	equ	0xFF8
  2694                           tblptrh	equ	0xFF7
  2695                           tblptrl	equ	0xFF6
  2696                           tablat	equ	0xFF5
  2697                           intcon	equ	0xFF2
  2698                           intcon2	equ	0xFF1
  2699                           intcon3	equ	0xFF0
  2700                           postinc0	equ	0xFEE
  2701                           wreg	equ	0xFE8
  2702                           postdec1	equ	0xFE5
  2703                           fsr1h	equ	0xFE2
  2704                           fsr1l	equ	0xFE1
  2705                           postinc2	equ	0xFDE
  2706                           status	equ	0xFD8
  2707                           
  2708 ;; *************** function _write_timer_zero *****************
  2709 ;; Defined at:
  2710 ;;		line 138 in file "bibliotecas/hardware.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;  timer0          2   25[COMRAM] unsigned int 
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;  timer           2   27[COMRAM] struct Timers
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  1    wreg      void 
  2717 ;; Registers used:
  2718 ;;		None
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2724 ;;      Params:         2       0       0       0       0       0       0       0       0
  2725 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2726 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2727 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2728 ;;Total ram usage:        4 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    2
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_config_timer_zero
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text8
  2739  00570A                     __ptext8:
  2740                           	opt stack 0
  2741  00570A                     _write_timer_zero:
  2742                           	opt stack 26
  2743                           
  2744                           ;hardware.c: 140: union Timers timer;
  2745                           ;hardware.c: 142: timer.lt = timer0;
  2746                           
  2747                           ;incstack = 0
  2748  00570A  C01A  F01C         	movff	write_timer_zero@timer0,write_timer_zero@timer
  2749  00570E  C01B  F01D         	movff	write_timer_zero@timer0+1,write_timer_zero@timer+1
  2750                           
  2751                           ;hardware.c: 144: TMR0H = timer.bt[1];
  2752  005712  C01D  FFD7         	movff	write_timer_zero@timer+1,4055	;volatile
  2753                           
  2754                           ;hardware.c: 145: TMR0L = timer.bt[0];
  2755  005716  C01C  FFD6         	movff	write_timer_zero@timer,4054	;volatile
  2756  00571A  0012               	return		;funcret
  2757  00571C                     __end_of_write_timer_zero:
  2758                           	opt stack 0
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           intcon	equ	0xFF2
  2764                           intcon2	equ	0xFF1
  2765                           intcon3	equ	0xFF0
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           postdec1	equ	0xFE5
  2769                           fsr1h	equ	0xFE2
  2770                           fsr1l	equ	0xFE1
  2771                           postinc2	equ	0xFDE
  2772                           status	equ	0xFD8
  2773                           
  2774 ;; *************** function _config_timer_dois *****************
  2775 ;; Defined at:
  2776 ;;		line 200 in file "bibliotecas/hardware.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;		None
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;		None
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, status,2
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2790 ;;      Params:         0       0       0       0       0       0       0       0       0
  2791 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2793 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2794 ;;Total ram usage:        0 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    2
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_init_hardware
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text9
  2805  005752                     __ptext9:
  2806                           	opt stack 0
  2807  005752                     _config_timer_dois:
  2808                           	opt stack 27
  2809                           
  2810                           ;hardware.c: 202: T2CON = 0b00000100;
  2811                           
  2812                           ;incstack = 0
  2813  005752  0E04               	movlw	4
  2814  005754  6ECA               	movwf	4042,c	;volatile
  2815                           
  2816                           ;hardware.c: 203: TMR2 = 0;
  2817  005756  0E00               	movlw	0
  2818  005758  6ECC               	movwf	4044,c	;volatile
  2819                           
  2820                           ;hardware.c: 204: PR2 = 0x01;
  2821  00575A  0E01               	movlw	1
  2822  00575C  6ECB               	movwf	4043,c	;volatile
  2823  00575E  0012               	return		;funcret
  2824  005760                     __end_of_config_timer_dois:
  2825                           	opt stack 0
  2826                           tblptru	equ	0xFF8
  2827                           tblptrh	equ	0xFF7
  2828                           tblptrl	equ	0xFF6
  2829                           tablat	equ	0xFF5
  2830                           intcon	equ	0xFF2
  2831                           intcon2	equ	0xFF1
  2832                           intcon3	equ	0xFF0
  2833                           postinc0	equ	0xFEE
  2834                           wreg	equ	0xFE8
  2835                           postdec1	equ	0xFE5
  2836                           fsr1h	equ	0xFE2
  2837                           fsr1l	equ	0xFE1
  2838                           postinc2	equ	0xFDE
  2839                           status	equ	0xFD8
  2840                           
  2841 ;; *************** function _inicializa_tarefas *****************
  2842 ;; Defined at:
  2843 ;;		line 168 in file "main.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;		None
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;		None
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg, status,2
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2857 ;;      Params:         0       0       0       0       0       0       0       0       0
  2858 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2859 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2860 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2861 ;;Total ram usage:        0 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    2
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_main
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           	psect	text10
  2872  005600                     __ptext10:
  2873                           	opt stack 0
  2874  005600                     _inicializa_tarefas:
  2875                           	opt stack 28
  2876                           
  2877                           ;main.c: 175: tempo_backup[0] = 5000;
  2878                           
  2879                           ;incstack = 0
  2880  005600  0E13               	movlw	19
  2881  005602  0100               	movlb	0	; () banked
  2882  005604  6FEC               	movwf	(_tempo_backup+1)& (0+255),b
  2883  005606  0E88               	movlw	136
  2884  005608  6FEB               	movwf	_tempo_backup& (0+255),b
  2885                           
  2886                           ;main.c: 176: tempo_backup[1] = 5000;
  2887  00560A  0E13               	movlw	19
  2888  00560C  6FEE               	movwf	(_tempo_backup+3)& (0+255),b
  2889  00560E  0E88               	movlw	136
  2890  005610  6FED               	movwf	(_tempo_backup+2)& (0+255),b
  2891                           
  2892                           ;main.c: 181: tempo_tarefa[0] = 5000;
  2893  005612  0E13               	movlw	19
  2894  005614  6FE8               	movwf	(_tempo_tarefa+1)& (0+255),b
  2895  005616  0E88               	movlw	136
  2896  005618  6FE7               	movwf	_tempo_tarefa& (0+255),b
  2897                           
  2898                           ;main.c: 182: tempo_tarefa[1] = 5000;
  2899  00561A  0E13               	movlw	19
  2900  00561C  6FEA               	movwf	(_tempo_tarefa+3)& (0+255),b
  2901  00561E  0E88               	movlw	136
  2902  005620  6FE9               	movwf	(_tempo_tarefa+2)& (0+255),b
  2903                           
  2904                           ;main.c: 186: tarefa_em_execucao = 0;
  2905  005622  0E00               	movlw	0
  2906  005624  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  2907                           
  2908                           ; BSR set to: 0
  2909  005626  0012               	return		;funcret
  2910  005628                     __end_of_inicializa_tarefas:
  2911                           	opt stack 0
  2912                           tblptru	equ	0xFF8
  2913                           tblptrh	equ	0xFF7
  2914                           tblptrl	equ	0xFF6
  2915                           tablat	equ	0xFF5
  2916                           intcon	equ	0xFF2
  2917                           intcon2	equ	0xFF1
  2918                           intcon3	equ	0xFF0
  2919                           postinc0	equ	0xFEE
  2920                           wreg	equ	0xFE8
  2921                           postdec1	equ	0xFE5
  2922                           fsr1h	equ	0xFE2
  2923                           fsr1l	equ	0xFE1
  2924                           postinc2	equ	0xFDE
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function _inicializa_SPI *****************
  2928 ;; Defined at:
  2929 ;;		line 49 in file "bibliotecas/SPI.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  sync_mode       1    wreg     unsigned char 
  2932 ;;  bus_mode        1   31[COMRAM] unsigned char 
  2933 ;;  smp_phase       1   32[COMRAM] unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  sync_mode       1    0[COMRAM] unsigned char 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2945 ;;      Params:         2       0       0       0       0       0       0       0       0
  2946 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2947 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2948 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2949 ;;Total ram usage:        2 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    5
  2952 ;; This function calls:
  2953 ;;		_escreve_cmd_lcd
  2954 ;;		_escreve_frase_ram_lcd
  2955 ;;		_posicao_cursor_lcd
  2956 ;; This function is called by:
  2957 ;;		_main
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text11
  2962  0053CE                     __ptext11:
  2963                           	opt stack 0
  2964  0053CE                     _inicializa_SPI:
  2965                           	opt stack 25
  2966                           
  2967                           ;SPI.c: 51: TRISBbits.RB1 = 0;
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;incstack = 0
  2971  0053CE  9293               	bcf	3987,1,c	;volatile
  2972                           
  2973                           ;SPI.c: 52: TRISBbits.RB4 = 0;
  2974  0053D0  9893               	bcf	3987,4,c	;volatile
  2975                           
  2976                           ;SPI.c: 53: TRISBbits.RB0 = 1;
  2977  0053D2  8093               	bsf	3987,0,c	;volatile
  2978                           
  2979                           ;SPI.c: 54: TRISCbits.RC7 = 0;
  2980  0053D4  9E94               	bcf	3988,7,c	;volatile
  2981                           
  2982                           ;SPI.c: 56: LATBbits.LATB4 = 1;
  2983  0053D6  888A               	bsf	3978,4,c	;volatile
  2984                           
  2985                           ;SPI.c: 57: SSPSTAT &= 0x3F;
  2986  0053D8  0E3F               	movlw	63
  2987  0053DA  16C7               	andwf	4039,f,c	;volatile
  2988                           
  2989                           ;SPI.c: 58: SSPCON1 = 0x00;
  2990  0053DC  0E00               	movlw	0
  2991  0053DE  6EC6               	movwf	4038,c	;volatile
  2992                           
  2993                           ;SPI.c: 95: SSPSTATbits.SMP = 0;
  2994  0053E0  9EC7               	bcf	4039,7,c	;volatile
  2995                           
  2996                           ;SPI.c: 96: SSPSTATbits.CKE = 1;
  2997  0053E2  8CC7               	bsf	4039,6,c	;volatile
  2998                           
  2999                           ;SPI.c: 97: SSPCON1bits.CKP = 0;
  3000  0053E4  98C6               	bcf	4038,4,c	;volatile
  3001                           
  3002                           ;SPI.c: 99: SSPCON1 = 0b00000011;
  3003  0053E6  0E03               	movlw	3
  3004  0053E8  6EC6               	movwf	4038,c	;volatile
  3005                           
  3006                           ;SPI.c: 102: LATBbits.LATB4 = 1;
  3007  0053EA  888A               	bsf	3978,4,c	;volatile
  3008                           
  3009                           ;SPI.c: 105: SSPCON1bits.SSPEN = 1;
  3010  0053EC  8AC6               	bsf	4038,5,c	;volatile
  3011                           
  3012                           ;SPI.c: 106: posicao_cursor_lcd(1,1);
  3013  0053EE  0E01               	movlw	1
  3014  0053F0  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3015  0053F2  0E01               	movlw	1
  3016  0053F4  EC37  F028         	call	_posicao_cursor_lcd
  3017                           
  3018                           ;SPI.c: 107: escreve_frase_ram_lcd("SPI configurada!");
  3019  0053F8  0EE7               	movlw	low STR_13
  3020  0053FA  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3021  0053FC  0E61               	movlw	high STR_13
  3022  0053FE  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3023  005400  EC57  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3024                           
  3025                           ;SPI.c: 108: escreve_cmd_lcd(0b00000001);
  3026  005404  0E01               	movlw	1
  3027  005406  EC0A  F026         	call	_escreve_cmd_lcd
  3028  00540A  0012               	return		;funcret
  3029  00540C                     __end_of_inicializa_SPI:
  3030                           	opt stack 0
  3031                           tblptru	equ	0xFF8
  3032                           tblptrh	equ	0xFF7
  3033                           tblptrl	equ	0xFF6
  3034                           tablat	equ	0xFF5
  3035                           intcon	equ	0xFF2
  3036                           intcon2	equ	0xFF1
  3037                           intcon3	equ	0xFF0
  3038                           postinc0	equ	0xFEE
  3039                           wreg	equ	0xFE8
  3040                           postdec1	equ	0xFE5
  3041                           fsr1h	equ	0xFE2
  3042                           fsr1l	equ	0xFE1
  3043                           postinc2	equ	0xFDE
  3044                           status	equ	0xFD8
  3045                           
  3046 ;; *************** function _escreve_cmd_lcd *****************
  3047 ;; Defined at:
  3048 ;;		line 162 in file "bibliotecas/display_lcd.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;  comando         1    wreg     unsigned char 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;  comando         1   27[COMRAM] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      void 
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, status,0, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3062 ;;      Params:         0       0       0       0       0       0       0       0       0
  3063 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3065 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3066 ;;Total ram usage:        1 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    3
  3069 ;; This function calls:
  3070 ;;		_delay
  3071 ;; This function is called by:
  3072 ;;		_mensagem_inicial
  3073 ;;		_inicializa_SPI
  3074 ;;		_init_lcd
  3075 ;;		_gps
  3076 ;;		_cria_caractere_lcd
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           	psect	text12
  3081  004C14                     __ptext12:
  3082                           	opt stack 0
  3083  004C14                     _escreve_cmd_lcd:
  3084                           	opt stack 26
  3085                           
  3086                           ;incstack = 0
  3087                           ;escreve_cmd_lcd@comando stored from wreg
  3088  004C14  6E1C               	movwf	escreve_cmd_lcd@comando,c
  3089                           
  3090                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  3091  004C16  9483               	bcf	3971,2,c	;volatile
  3092                           
  3093                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  3094  004C18  9283               	bcf	3971,1,c	;volatile
  3095                           
  3096                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  3097  004C1A  9083               	bcf	3971,0,c	;volatile
  3098                           
  3099                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  3100  004C1C  A81C               	btfss	escreve_cmd_lcd@comando,4,c
  3101  004C1E  D002               	goto	l545
  3102  004C20  8883               	bsf	3971,4,c	;volatile
  3103  004C22  D001               	goto	l546
  3104  004C24                     l545:
  3105                           
  3106                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  3107  004C24  9883               	bcf	3971,4,c	;volatile
  3108  004C26                     l546:
  3109                           
  3110                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  3111  004C26  AA1C               	btfss	escreve_cmd_lcd@comando,5,c
  3112  004C28  D002               	goto	l547
  3113  004C2A  8A83               	bsf	3971,5,c	;volatile
  3114  004C2C  D001               	goto	l548
  3115  004C2E                     l547:
  3116                           
  3117                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  3118  004C2E  9A83               	bcf	3971,5,c	;volatile
  3119  004C30                     l548:
  3120                           
  3121                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  3122  004C30  AC1C               	btfss	escreve_cmd_lcd@comando,6,c
  3123  004C32  D002               	goto	l549
  3124  004C34  8C83               	bsf	3971,6,c	;volatile
  3125  004C36  D001               	goto	l550
  3126  004C38                     l549:
  3127                           
  3128                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  3129  004C38  9C83               	bcf	3971,6,c	;volatile
  3130  004C3A                     l550:
  3131                           
  3132                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  3133  004C3A  AE1C               	btfss	escreve_cmd_lcd@comando,7,c
  3134  004C3C  D002               	goto	l551
  3135  004C3E  8E83               	bsf	3971,7,c	;volatile
  3136  004C40  D001               	goto	l552
  3137  004C42                     l551:
  3138                           
  3139                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  3140  004C42  9E83               	bcf	3971,7,c	;volatile
  3141  004C44                     l552:
  3142                           
  3143                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  3144  004C44  8083               	bsf	3971,0,c	;volatile
  3145                           
  3146                           ;display_lcd.c: 181: delay();
  3147  004C46  EC3C  F02B         	call	_delay	;wreg free
  3148                           
  3149                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  3150  004C4A  9083               	bcf	3971,0,c	;volatile
  3151                           
  3152                           ;display_lcd.c: 183: delay();
  3153  004C4C  EC3C  F02B         	call	_delay	;wreg free
  3154                           
  3155                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  3156  004C50  A01C               	btfss	escreve_cmd_lcd@comando,0,c
  3157  004C52  D002               	goto	l553
  3158  004C54  8883               	bsf	3971,4,c	;volatile
  3159  004C56  D001               	goto	l554
  3160  004C58                     l553:
  3161                           
  3162                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  3163  004C58  9883               	bcf	3971,4,c	;volatile
  3164  004C5A                     l554:
  3165                           
  3166                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  3167  004C5A  A21C               	btfss	escreve_cmd_lcd@comando,1,c
  3168  004C5C  D002               	goto	l555
  3169  004C5E  8A83               	bsf	3971,5,c	;volatile
  3170  004C60  D001               	goto	l556
  3171  004C62                     l555:
  3172                           
  3173                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  3174  004C62  9A83               	bcf	3971,5,c	;volatile
  3175  004C64                     l556:
  3176                           
  3177                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  3178  004C64  A41C               	btfss	escreve_cmd_lcd@comando,2,c
  3179  004C66  D002               	goto	l557
  3180  004C68  8C83               	bsf	3971,6,c	;volatile
  3181  004C6A  D001               	goto	l558
  3182  004C6C                     l557:
  3183                           
  3184                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  3185  004C6C  9C83               	bcf	3971,6,c	;volatile
  3186  004C6E                     l558:
  3187                           
  3188                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  3189  004C6E  A61C               	btfss	escreve_cmd_lcd@comando,3,c
  3190  004C70  D002               	goto	l559
  3191  004C72  8E83               	bsf	3971,7,c	;volatile
  3192  004C74  D001               	goto	l560
  3193  004C76                     l559:
  3194                           
  3195                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  3196  004C76  9E83               	bcf	3971,7,c	;volatile
  3197  004C78                     l560:
  3198                           
  3199                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  3200  004C78  8083               	bsf	3971,0,c	;volatile
  3201                           
  3202                           ;display_lcd.c: 197: delay();
  3203  004C7A  EC3C  F02B         	call	_delay	;wreg free
  3204                           
  3205                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  3206  004C7E  9083               	bcf	3971,0,c	;volatile
  3207                           
  3208                           ;display_lcd.c: 199: delay();
  3209  004C80  EC3C  F02B         	call	_delay	;wreg free
  3210                           
  3211                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  3212  004C84  041C               	decf	escreve_cmd_lcd@comando,w,c
  3213  004C86  B4D8               	btfsc	status,2,c
  3214  004C88  D008               	goto	u15680
  3215  004C8A  0E02               	movlw	2
  3216  004C8C  181C               	xorwf	escreve_cmd_lcd@comando,w,c
  3217  004C8E  B4D8               	btfsc	status,2,c
  3218  004C90  D004               	goto	u15680
  3219  004C92  0E03               	movlw	3
  3220  004C94  181C               	xorwf	escreve_cmd_lcd@comando,w,c
  3221  004C96  A4D8               	btfss	status,2,c
  3222  004C98  0012               	return	
  3223  004C9A                     u15680:
  3224                           
  3225                           ;display_lcd.c: 205: { delay(); }
  3226  004C9A  EC3C  F02B         	call	_delay	;wreg free
  3227  004C9E  0012               	return	
  3228  004CA0                     __end_of_escreve_cmd_lcd:
  3229                           	opt stack 0
  3230                           tblptru	equ	0xFF8
  3231                           tblptrh	equ	0xFF7
  3232                           tblptrl	equ	0xFF6
  3233                           tablat	equ	0xFF5
  3234                           intcon	equ	0xFF2
  3235                           intcon2	equ	0xFF1
  3236                           intcon3	equ	0xFF0
  3237                           postinc0	equ	0xFEE
  3238                           wreg	equ	0xFE8
  3239                           postdec1	equ	0xFE5
  3240                           fsr1h	equ	0xFE2
  3241                           fsr1l	equ	0xFE1
  3242                           postinc2	equ	0xFDE
  3243                           status	equ	0xFD8
  3244                           
  3245 ;; *************** function _escalonador *****************
  3246 ;; Defined at:
  3247 ;;		line 197 in file "main.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;		None
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  cont            1   27[COMRAM] unsigned char 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  1    wreg      void 
  3254 ;; Registers used:
  3255 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3261 ;;      Params:         0       0       0       0       0       0       0       0       0
  3262 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3263 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3264 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3265 ;;Total ram usage:        3 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    2
  3268 ;; This function calls:
  3269 ;;		Nothing
  3270 ;; This function is called by:
  3271 ;;		_main
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           	psect	text13
  3276  004EA2                     __ptext13:
  3277                           	opt stack 0
  3278  004EA2                     _escalonador:
  3279                           	opt stack 28
  3280                           
  3281                           ;main.c: 199: unsigned char cont;
  3282                           ;main.c: 200: for(cont = 0; cont<2;cont++)
  3283                           
  3284                           ;incstack = 0
  3285  004EA2  0E00               	movlw	0
  3286  004EA4  6E1C               	movwf	escalonador@cont,c
  3287  004EA6                     l8001:
  3288  004EA6  0E01               	movlw	1
  3289  004EA8  641C               	cpfsgt	escalonador@cont,c
  3290  004EAA  D001               	goto	l75
  3291  004EAC  0012               	return	
  3292  004EAE                     l75:
  3293                           
  3294                           ;main.c: 201: {
  3295                           ;main.c: 202: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3296  004EAE  501C               	movf	escalonador@cont,w,c
  3297  004EB0  0D02               	mullw	2
  3298  004EB2  0EEF               	movlw	low _p_tarefas
  3299  004EB4  24F3               	addwf	prodl,w,c
  3300  004EB6  6ED9               	movwf	fsr2l,c
  3301  004EB8  0E00               	movlw	high _p_tarefas
  3302  004EBA  20F4               	addwfc	prodh,w,c
  3303  004EBC  6EDA               	movwf	fsr2h,c
  3304  004EBE  50DE               	movf	postinc2,w,c
  3305  004EC0  10DE               	iorwf	postinc2,w,c
  3306  004EC2  B4D8               	btfsc	status,2,c
  3307  004EC4  D028               	goto	l77
  3308  004EC6  501C               	movf	escalonador@cont,w,c
  3309  004EC8  0D02               	mullw	2
  3310  004ECA  0EE7               	movlw	low _tempo_tarefa
  3311  004ECC  24F3               	addwf	prodl,w,c
  3312  004ECE  6ED9               	movwf	fsr2l,c
  3313  004ED0  0E00               	movlw	high _tempo_tarefa
  3314  004ED2  20F4               	addwfc	prodh,w,c
  3315  004ED4  6EDA               	movwf	fsr2h,c
  3316  004ED6  50DE               	movf	postinc2,w,c
  3317  004ED8  10DE               	iorwf	postinc2,w,c
  3318  004EDA  A4D8               	btfss	status,2,c
  3319  004EDC  D01C               	goto	l77
  3320                           
  3321                           ;main.c: 203: {
  3322                           ;main.c: 204: tarefa_em_execucao = 1;
  3323  004EDE  0E01               	movlw	1
  3324  004EE0  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3325                           
  3326                           ;main.c: 206: p_tarefas[cont]();
  3327  004EE2  0EFD               	movlw	253
  3328  004EE4  6E39               	movwf	_timeout_tarefa+1,c
  3329  004EE6  0EE8               	movlw	232
  3330  004EE8  6E38               	movwf	_timeout_tarefa,c
  3331                           
  3332                           ;main.c: 207: tarefa_em_execucao = 0;
  3333  004EEA  0E00               	movlw	0
  3334  004EEC  6E43               	movwf	_tarefa_em_execucao,c	;volatile
  3335                           
  3336                           ;main.c: 208: tempo_tarefa[cont] = tempo_backup[cont];
  3337  004EEE  501C               	movf	escalonador@cont,w,c
  3338  004EF0  0D02               	mullw	2
  3339  004EF2  0EEB               	movlw	low _tempo_backup
  3340  004EF4  24F3               	addwf	prodl,w,c
  3341  004EF6  6ED9               	movwf	fsr2l,c
  3342  004EF8  0E00               	movlw	high _tempo_backup
  3343  004EFA  20F4               	addwfc	prodh,w,c
  3344  004EFC  6EDA               	movwf	fsr2h,c
  3345  004EFE  501C               	movf	escalonador@cont,w,c
  3346  004F00  0D02               	mullw	2
  3347  004F02  0EE7               	movlw	low _tempo_tarefa
  3348  004F04  24F3               	addwf	prodl,w,c
  3349  004F06  6EE1               	movwf	fsr1l,c
  3350  004F08  0E00               	movlw	high _tempo_tarefa
  3351  004F0A  20F4               	addwfc	prodh,w,c
  3352  004F0C  6EE2               	movwf	fsr1h,c
  3353  004F0E  CFDE FFE6          	movff	postinc2,postinc1
  3354  004F12  CFDD FFE5          	movff	postdec2,postdec1
  3355  004F16                     l77:
  3356  004F16  2A1C               	incf	escalonador@cont,f,c
  3357  004F18  D7C6               	goto	l8001
  3358  004F1A                     __end_of_escalonador:
  3359                           	opt stack 0
  3360                           tblptru	equ	0xFF8
  3361                           tblptrh	equ	0xFF7
  3362                           tblptrl	equ	0xFF6
  3363                           tablat	equ	0xFF5
  3364                           prodh	equ	0xFF4
  3365                           prodl	equ	0xFF3
  3366                           intcon	equ	0xFF2
  3367                           intcon2	equ	0xFF1
  3368                           intcon3	equ	0xFF0
  3369                           postinc0	equ	0xFEE
  3370                           wreg	equ	0xFE8
  3371                           postinc1	equ	0xFE6
  3372                           postdec1	equ	0xFE5
  3373                           fsr1h	equ	0xFE2
  3374                           fsr1l	equ	0xFE1
  3375                           postinc2	equ	0xFDE
  3376                           postdec2	equ	0xFDD
  3377                           fsr2h	equ	0xFDA
  3378                           fsr2l	equ	0xFD9
  3379                           status	equ	0xFD8
  3380                           
  3381 ;; *************** function _SDCard *****************
  3382 ;; Defined at:
  3383 ;;		line 175 in file "bibliotecas/SDCard.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;		None
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;  bw              2   24[BANK1 ] unsigned short 
  3388 ;;  i               2   22[BANK1 ] int 
  3389 ;;  br              2    0        unsigned int 
  3390 ;;  FResult         1    0        enum E3966
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3400 ;;      Params:         0       0       0       0       0       0       0       0       0
  3401 ;;      Locals:         0       0       4       0       0       0       0       0       0
  3402 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3403 ;;      Totals:         0       0       4       0       0       0       0       0       0
  3404 ;;Total ram usage:        4 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:   16
  3407 ;; This function calls:
  3408 ;;		_escreve_frase_ram_lcd
  3409 ;;		_f_close
  3410 ;;		_f_mount
  3411 ;;		_f_open
  3412 ;;		_f_write
  3413 ;;		_open_append
  3414 ;;		_posicao_cursor_lcd
  3415 ;;		_proceed
  3416 ;; This function is called by:
  3417 ;;		_main
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           	psect	text14
  3422  004832                     __ptext14:
  3423                           	opt stack 0
  3424  004832                     _SDCard:
  3425                           	opt stack 14
  3426                           
  3427                           ;SDCard.c: 177: T0CONbits.TMR0ON = 0;
  3428                           
  3429                           ;incstack = 0
  3430  004832  9ED5               	bcf	4053,7,c	;volatile
  3431                           
  3432                           ;SDCard.c: 180: FRESULT FResult;
  3433                           ;SDCard.c: 182: WORD bw;
  3434                           ;SDCard.c: 183: UINT br;
  3435                           ;SDCard.c: 184: int i = 0;
  3436  004834  0E00               	movlw	0
  3437  004836  0101               	movlb	1	; () banked
  3438  004838  6FE6               	movwf	(SDCard@i+1)& (0+255),b
  3439  00483A  0E00               	movlw	0
  3440  00483C  6FE5               	movwf	SDCard@i& (0+255),b
  3441                           
  3442                           ; BSR set to: 1
  3443                           ;SDCard.c: 188: proceed();
  3444  00483E  ECB6  F02B         	call	_proceed	;wreg free
  3445                           
  3446                           ;SDCard.c: 190: if (f_mount(&fs, "", 1) == FR_OK) {
  3447  004842  0EAD               	movlw	low _fs
  3448  004844  0100               	movlb	0	; () banked
  3449  004846  6FAE               	movwf	f_mount@fs& (0+255),b
  3450  004848  0E02               	movlw	high _fs
  3451  00484A  6FAF               	movwf	(f_mount@fs+1)& (0+255),b
  3452  00484C  0E7C               	movlw	low (STR_19+2)
  3453  00484E  6FB0               	movwf	f_mount@path& (0+255),b
  3454  004850  0E62               	movlw	high (STR_19+2)
  3455  004852  6FB1               	movwf	(f_mount@path+1)& (0+255),b
  3456  004854  0E01               	movlw	1
  3457  004856  6FB2               	movwf	f_mount@opt& (0+255),b
  3458  004858  ECBF  F023         	call	_f_mount	;wreg free
  3459  00485C  0900               	iorlw	0
  3460  00485E  A4D8               	btfss	status,2,c
  3461  004860  0012               	return	
  3462                           
  3463                           ;SDCard.c: 192: if (f_open(&fil, filename, 0x10 | 0x01 | 0x02) == FR_OK) {
  3464  004862  0E79               	movlw	low _fil
  3465  004864  0101               	movlb	1	; () banked
  3466  004866  6FD3               	movwf	f_open@fp& (0+255),b
  3467  004868  0E01               	movlw	high _fil
  3468  00486A  6FD4               	movwf	(f_open@fp+1)& (0+255),b
  3469  00486C  0EC0               	movlw	low _filename
  3470  00486E  6FD5               	movwf	f_open@path& (0+255),b
  3471  004870  0E01               	movlw	high _filename
  3472  004872  6FD6               	movwf	(f_open@path+1)& (0+255),b
  3473  004874  0E13               	movlw	19
  3474  004876  6FD7               	movwf	f_open@mode& (0+255),b
  3475  004878  ECF4  F010         	call	_f_open	;wreg free
  3476  00487C  0900               	iorlw	0
  3477  00487E  A4D8               	btfss	status,2,c
  3478  004880  0012               	return	
  3479                           
  3480                           ;SDCard.c: 197: open_append(&fil, filename);
  3481  004882  0E79               	movlw	low _fil
  3482  004884  0101               	movlb	1	; () banked
  3483  004886  6FE0               	movwf	open_append@fp& (0+255),b
  3484  004888  0E01               	movlw	high _fil
  3485  00488A  6FE1               	movwf	(open_append@fp+1)& (0+255),b
  3486  00488C  0EC0               	movlw	low _filename
  3487  00488E  6FE2               	movwf	open_append@path& (0+255),b
  3488  004890  0E01               	movlw	high _filename
  3489  004892  6FE3               	movwf	(open_append@path+1)& (0+255),b
  3490  004894  ECA4  F028         	call	_open_append	;wreg free
  3491                           
  3492                           ;SDCard.c: 198: f_write(&fil, "felipe!", 20, &bw);
  3493  004898  0E79               	movlw	low _fil
  3494  00489A  0100               	movlb	0	; () banked
  3495  00489C  6FC9               	movwf	f_write@fp& (0+255),b
  3496  00489E  0E01               	movlw	high _fil
  3497  0048A0  6FCA               	movwf	(f_write@fp+1)& (0+255),b
  3498  0048A2  0E5B               	movlw	low STR_11
  3499  0048A4  6FCB               	movwf	f_write@buff& (0+255),b
  3500  0048A6  0E62               	movlw	high STR_11
  3501  0048A8  6FCC               	movwf	(f_write@buff+1)& (0+255),b
  3502  0048AA  0E00               	movlw	0
  3503  0048AC  6FCE               	movwf	(f_write@btw+1)& (0+255),b
  3504  0048AE  0E14               	movlw	20
  3505  0048B0  6FCD               	movwf	f_write@btw& (0+255),b
  3506  0048B2  0EE7               	movlw	low SDCard@bw
  3507  0048B4  6FCF               	movwf	f_write@bw& (0+255),b
  3508  0048B6  0E01               	movlw	high SDCard@bw
  3509  0048B8  6FD0               	movwf	(f_write@bw+1)& (0+255),b
  3510  0048BA  EC82  F005         	call	_f_write	;wreg free
  3511                           
  3512                           ;SDCard.c: 201: f_close(&fil);
  3513  0048BE  0E79               	movlw	low _fil
  3514  0048C0  0100               	movlb	0	; () banked
  3515  0048C2  6FA0               	movwf	f_close@fp& (0+255),b
  3516  0048C4  0E01               	movlw	high _fil
  3517  0048C6  6FA1               	movwf	(f_close@fp+1)& (0+255),b
  3518  0048C8  EC06  F02A         	call	_f_close	;wreg free
  3519                           
  3520                           ;SDCard.c: 202: posicao_cursor_lcd(1,0);
  3521  0048CC  0E00               	movlw	0
  3522  0048CE  6E1D               	movwf	posicao_cursor_lcd@coluna,c
  3523  0048D0  0E01               	movlw	1
  3524  0048D2  EC37  F028         	call	_posicao_cursor_lcd
  3525                           
  3526                           ;SDCard.c: 203: escreve_frase_ram_lcd("Escrita OK");
  3527  0048D6  0E3D               	movlw	low STR_12
  3528  0048D8  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
  3529  0048DA  0E62               	movlw	high STR_12
  3530  0048DC  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
  3531  0048DE  EC57  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3532  0048E2  0012               	return	
  3533  0048E4                     __end_of_SDCard:
  3534                           	opt stack 0
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           prodh	equ	0xFF4
  3540                           prodl	equ	0xFF3
  3541                           intcon	equ	0xFF2
  3542                           intcon2	equ	0xFF1
  3543                           intcon3	equ	0xFF0
  3544                           postinc0	equ	0xFEE
  3545                           wreg	equ	0xFE8
  3546                           postinc1	equ	0xFE6
  3547                           postdec1	equ	0xFE5
  3548                           fsr1h	equ	0xFE2
  3549                           fsr1l	equ	0xFE1
  3550                           postinc2	equ	0xFDE
  3551                           postdec2	equ	0xFDD
  3552                           fsr2h	equ	0xFDA
  3553                           fsr2l	equ	0xFD9
  3554                           status	equ	0xFD8
  3555                           
  3556 ;; *************** function _open_append *****************
  3557 ;; Defined at:
  3558 ;;		line 238 in file "bibliotecas/SDCard.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;  fp              2   17[BANK1 ] PTR struct .
  3561 ;;		 -> fil(32), 
  3562 ;;  path            2   19[BANK1 ] PTR const unsigned char 
  3563 ;;		 -> filename(15), 
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;  fr              1   21[BANK1 ] enum E3966
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      enum E3966
  3568 ;; Registers used:
  3569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3575 ;;      Params:         0       0       4       0       0       0       0       0       0
  3576 ;;      Locals:         0       0       1       0       0       0       0       0       0
  3577 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3578 ;;      Totals:         0       0       5       0       0       0       0       0       0
  3579 ;;Total ram usage:        5 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:   15
  3582 ;; This function calls:
  3583 ;;		_f_close
  3584 ;;		_f_lseek
  3585 ;;		_f_open
  3586 ;; This function is called by:
  3587 ;;		_SDCard
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	text15
  3592  005148                     __ptext15:
  3593                           	opt stack 0
  3594  005148                     _open_append:
  3595                           	opt stack 14
  3596                           
  3597                           ;SDCard.c: 243: FRESULT fr;
  3598                           ;SDCard.c: 246: fr = f_open(fp, path, 0x02 | 0x10 );
  3599                           
  3600                           ;incstack = 0
  3601  005148  C1E0  F1D3         	movff	open_append@fp,f_open@fp
  3602  00514C  C1E1  F1D4         	movff	open_append@fp+1,f_open@fp+1
  3603  005150  C1E2  F1D5         	movff	open_append@path,f_open@path
  3604  005154  C1E3  F1D6         	movff	open_append@path+1,f_open@path+1
  3605  005158  0E12               	movlw	18
  3606  00515A  0101               	movlb	1	; () banked
  3607  00515C  6FD7               	movwf	f_open@mode& (0+255),b
  3608  00515E  ECF4  F010         	call	_f_open	;wreg free
  3609  005162  0101               	movlb	1	; () banked
  3610  005164  6FE4               	movwf	open_append@fr& (0+255),b
  3611                           
  3612                           ; BSR set to: 1
  3613                           ;SDCard.c: 247: if (fr == FR_OK) {
  3614  005166  51E4               	movf	open_append@fr& (0+255),w,b
  3615  005168  A4D8               	btfss	status,2,c
  3616  00516A  0012               	return	
  3617                           
  3618                           ; BSR set to: 1
  3619                           ;SDCard.c: 249: fr = f_lseek(fp, ((fp)->fsize));
  3620  00516C  C1E0  F0C9         	movff	open_append@fp,f_lseek@fp
  3621  005170  C1E1  F0CA         	movff	open_append@fp+1,f_lseek@fp+1
  3622  005174  EE20 F00A          	lfsr	2,10
  3623  005178  51E0               	movf	open_append@fp& (0+255),w,b
  3624  00517A  26D9               	addwf	fsr2l,f,c
  3625  00517C  51E1               	movf	(open_append@fp+1)& (0+255),w,b
  3626  00517E  22DA               	addwfc	fsr2h,f,c
  3627  005180  CFDE F0CB          	movff	postinc2,f_lseek@ofs
  3628  005184  CFDE F0CC          	movff	postinc2,f_lseek@ofs+1
  3629  005188  CFDE F0CD          	movff	postinc2,f_lseek@ofs+2
  3630  00518C  CFDE F0CE          	movff	postinc2,f_lseek@ofs+3
  3631  005190  EC7E  F009         	call	_f_lseek	;wreg free
  3632  005194  0101               	movlb	1	; () banked
  3633  005196  6FE4               	movwf	open_append@fr& (0+255),b
  3634                           
  3635                           ; BSR set to: 1
  3636                           ;SDCard.c: 250: if (fr != FR_OK)
  3637  005198  51E4               	movf	open_append@fr& (0+255),w,b
  3638  00519A  B4D8               	btfsc	status,2,c
  3639  00519C  0012               	return	
  3640                           
  3641                           ; BSR set to: 1
  3642                           ;SDCard.c: 251: f_close(fp);
  3643  00519E  C1E0  F0A0         	movff	open_append@fp,f_close@fp
  3644  0051A2  C1E1  F0A1         	movff	open_append@fp+1,f_close@fp+1
  3645  0051A6  EC06  F02A         	call	_f_close	;wreg free
  3646  0051AA  0012               	return	
  3647  0051AC                     __end_of_open_append:
  3648                           	opt stack 0
  3649                           tblptru	equ	0xFF8
  3650                           tblptrh	equ	0xFF7
  3651                           tblptrl	equ	0xFF6
  3652                           tablat	equ	0xFF5
  3653                           prodh	equ	0xFF4
  3654                           prodl	equ	0xFF3
  3655                           intcon	equ	0xFF2
  3656                           intcon2	equ	0xFF1
  3657                           intcon3	equ	0xFF0
  3658                           postinc0	equ	0xFEE
  3659                           wreg	equ	0xFE8
  3660                           postinc1	equ	0xFE6
  3661                           postdec1	equ	0xFE5
  3662                           fsr1h	equ	0xFE2
  3663                           fsr1l	equ	0xFE1
  3664                           postinc2	equ	0xFDE
  3665                           postdec2	equ	0xFDD
  3666                           fsr2h	equ	0xFDA
  3667                           fsr2l	equ	0xFD9
  3668                           status	equ	0xFD8
  3669                           
  3670 ;; *************** function _f_open *****************
  3671 ;; Defined at:
  3672 ;;		line 2460 in file "bibliotecas/ff.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;  fp              2    4[BANK1 ] PTR struct .
  3675 ;;		 -> fil(32), 
  3676 ;;  path            2    6[BANK1 ] PTR const unsigned char 
  3677 ;;		 -> filename(15), STR_10(1), 
  3678 ;;  mode            1    8[BANK1 ] unsigned char 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  dj             22   81[BANK2 ] struct .
  3681 ;;  sfn            12   58[BANK2 ] unsigned char [12]
  3682 ;;  dw              4   74[BANK2 ] unsigned long 
  3683 ;;  cl              4   70[BANK2 ] unsigned long 
  3684 ;;  dir             2   79[BANK2 ] PTR unsigned char 
  3685 ;;		 -> NULL(0), fs(558), 
  3686 ;;  res             1   78[BANK2 ] enum E75
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      enum E3966
  3689 ;; Registers used:
  3690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3696 ;;      Params:         0       0       5       0       0       0       0       0       0
  3697 ;;      Locals:         0       0       0      45       0       0       0       0       0
  3698 ;;      Temps:          0       0       4       0       0       0       0       0       0
  3699 ;;      Totals:         0       0       9      45       0       0       0       0       0
  3700 ;;Total ram usage:       54 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:   14
  3703 ;; This function calls:
  3704 ;;		_dir_register
  3705 ;;		_find_volume
  3706 ;;		_follow_path
  3707 ;;		_ld_clust
  3708 ;;		_move_window
  3709 ;;		_remove_chain
  3710 ;;		_st_clust
  3711 ;; This function is called by:
  3712 ;;		_SDCard
  3713 ;;		_open_append
  3714 ;; This function uses a non-reentrant model
  3715 ;;
  3716                           
  3717                           	psect	text16
  3718  0021E8                     __ptext16:
  3719                           	opt stack 0
  3720  0021E8                     _f_open:
  3721                           	opt stack 14
  3722                           
  3723                           ;ff.c: 2466: FRESULT res;
  3724                           ;ff.c: 2467: DIR_E dj;
  3725                           ;ff.c: 2468: BYTE *dir;
  3726                           ;ff.c: 2469: BYTE sfn[12];
  3727                           ;ff.c: 2471: DWORD dw, cl;
  3728                           ;ff.c: 2475: if (!fp) return FR_INVALID_OBJECT;
  3729                           
  3730                           ;incstack = 0
  3731  0021E8  0101               	movlb	1	; () banked
  3732  0021EA  51D3               	movf	f_open@fp& (0+255),w,b
  3733  0021EC  11D4               	iorwf	(f_open@fp+1)& (0+255),w,b
  3734  0021EE  A4D8               	btfss	status,2,c
  3735  0021F0  D002               	goto	l1240
  3736                           
  3737                           ; BSR set to: 1
  3738  0021F2  0E09               	movlw	9
  3739                           
  3740                           ; BSR set to: 1
  3741  0021F4  0012               	return	
  3742  0021F6                     l1240:
  3743                           
  3744                           ; BSR set to: 1
  3745                           ;ff.c: 2476: fp->fs = 0;
  3746                           
  3747                           ; BSR set to: 1
  3748  0021F6  C1D3  FFD9         	movff	f_open@fp,fsr2l
  3749  0021FA  C1D4  FFDA         	movff	f_open@fp+1,fsr2h
  3750  0021FE  0E00               	movlw	0
  3751  002200  6EDE               	movwf	postinc2,c
  3752  002202  0E00               	movlw	0
  3753  002204  6EDD               	movwf	postdec2,c
  3754                           
  3755                           ; BSR set to: 1
  3756                           ;ff.c: 2479: dj.fs = FatFs[0];
  3757  002206  C0F5  F251         	movff	_FatFs,f_open@dj
  3758  00220A  C0F6  F252         	movff	_FatFs+1,f_open@dj+1
  3759                           
  3760                           ; BSR set to: 1
  3761                           ;ff.c: 2484: mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  3762  00220E  0E1F               	movlw	31
  3763  002210  17D7               	andwf	f_open@mode& (0+255),f,b
  3764                           
  3765                           ; BSR set to: 1
  3766                           ;ff.c: 2485: res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  3767  002212  0E51               	movlw	low f_open@dj
  3768  002214  0100               	movlb	0	; () banked
  3769  002216  6FA1               	movwf	find_volume@rfs& (0+255),b
  3770  002218  0E02               	movlw	high f_open@dj
  3771  00221A  6FA2               	movwf	(find_volume@rfs+1)& (0+255),b
  3772  00221C  0ED5               	movlw	low f_open@path
  3773  00221E  6FA3               	movwf	find_volume@path& (0+255),b
  3774  002220  0E01               	movlw	high f_open@path
  3775  002222  6FA4               	movwf	(find_volume@path+1)& (0+255),b
  3776  002224  0101               	movlb	1	; () banked
  3777  002226  51D7               	movf	f_open@mode& (0+255),w,b
  3778  002228  0BFE               	andlw	254
  3779  00222A  0100               	movlb	0	; () banked
  3780  00222C  6FA5               	movwf	find_volume@wmode& (0+255),b
  3781  00222E  EC09  F000         	call	_find_volume	;wreg free
  3782  002232  0102               	movlb	2	; () banked
  3783  002234  6F4E               	movwf	f_open@res& (0+255),b
  3784                           
  3785                           ; BSR set to: 2
  3786                           ;ff.c: 2490: if (res == FR_OK) {
  3787  002236  514E               	movf	f_open@res& (0+255),w,b
  3788  002238  A4D8               	btfss	status,2,c
  3789  00223A  D1C9               	goto	l1262
  3790                           
  3791                           ; BSR set to: 2
  3792                           ;ff.c: 2491: (dj).fn = sfn;
  3793  00223C  0E3A               	movlw	low f_open@sfn
  3794  00223E  6F65               	movwf	(f_open@dj+20)& (0+255),b
  3795  002240  0E02               	movlw	high f_open@sfn
  3796  002242  6F66               	movwf	(f_open@dj+21)& (0+255),b
  3797                           
  3798                           ; BSR set to: 2
  3799                           ;ff.c: 2492: res = follow_path(&dj, path);
  3800  002244  0E51               	movlw	low f_open@dj
  3801  002246  0100               	movlb	0	; () banked
  3802  002248  6FE2               	movwf	follow_path@dp& (0+255),b
  3803  00224A  0E02               	movlw	high f_open@dj
  3804  00224C  6FE3               	movwf	(follow_path@dp+1)& (0+255),b
  3805  00224E  C1D5  F0E4         	movff	f_open@path,follow_path@path
  3806  002252  C1D6  F0E5         	movff	f_open@path+1,follow_path@path+1
  3807  002256  ECA5  F01B         	call	_follow_path	;wreg free
  3808  00225A  0102               	movlb	2	; () banked
  3809  00225C  6F4E               	movwf	f_open@res& (0+255),b
  3810                           
  3811                           ; BSR set to: 2
  3812                           ;ff.c: 2493: dir = dj.dir;
  3813  00225E  C263  F24F         	movff	f_open@dj+18,f_open@dir
  3814  002262  C264  F250         	movff	f_open@dj+19,f_open@dir+1
  3815                           
  3816                           ; BSR set to: 2
  3817                           ;ff.c: 2495: if (res == FR_OK) {
  3818  002266  514E               	movf	f_open@res& (0+255),w,b
  3819  002268  A4D8               	btfss	status,2,c
  3820  00226A  D006               	goto	l1244
  3821                           
  3822                           ; BSR set to: 2
  3823                           ;ff.c: 2496: if (!dir)
  3824  00226C  514F               	movf	f_open@dir& (0+255),w,b
  3825  00226E  1150               	iorwf	(f_open@dir+1)& (0+255),w,b
  3826  002270  A4D8               	btfss	status,2,c
  3827  002272  D002               	goto	l1244
  3828                           
  3829                           ; BSR set to: 2
  3830                           ;ff.c: 2497: res = FR_INVALID_NAME;
  3831  002274  0E06               	movlw	6
  3832  002276  6F4E               	movwf	f_open@res& (0+255),b
  3833  002278                     l1244:
  3834                           
  3835                           ; BSR set to: 2
  3836                           ;ff.c: 2502: }
  3837                           ;ff.c: 2504: if (mode & (0x08 | 0x10 | 0x04)) {
  3838                           
  3839                           ; BSR set to: 2
  3840                           
  3841                           ; BSR set to: 2
  3842  002278  C1D7  F1D8         	movff	f_open@mode,??_f_open
  3843  00227C  0E1C               	movlw	28
  3844  00227E  0101               	movlb	1	; () banked
  3845  002280  17D8               	andwf	??_f_open& (0+255),f,b
  3846  002282  B4D8               	btfsc	status,2,c
  3847  002284  D0ED               	goto	l1245
  3848                           
  3849                           ; BSR set to: 1
  3850                           ;ff.c: 2505: if (res != FR_OK) {
  3851  002286  0102               	movlb	2	; () banked
  3852  002288  514E               	movf	f_open@res& (0+255),w,b
  3853  00228A  B4D8               	btfsc	status,2,c
  3854  00228C  D014               	goto	l1246
  3855                           
  3856                           ; BSR set to: 2
  3857                           ;ff.c: 2506: if (res == FR_NO_FILE)
  3858  00228E  0E04               	movlw	4
  3859  002290  194E               	xorwf	f_open@res& (0+255),w,b
  3860  002292  A4D8               	btfss	status,2,c
  3861  002294  D009               	goto	l1247
  3862                           
  3863                           ; BSR set to: 2
  3864                           ;ff.c: 2510: res = dir_register(&dj);
  3865  002296  0E51               	movlw	low f_open@dj
  3866  002298  0101               	movlb	1	; () banked
  3867  00229A  6FCF               	movwf	dir_register@dp& (0+255),b
  3868  00229C  0E02               	movlw	high f_open@dj
  3869  00229E  6FD0               	movwf	(dir_register@dp+1)& (0+255),b
  3870  0022A0  EC35  F022         	call	_dir_register	;wreg free
  3871  0022A4  0102               	movlb	2	; () banked
  3872  0022A6  6F4E               	movwf	f_open@res& (0+255),b
  3873  0022A8                     l1247:
  3874                           
  3875                           ; BSR set to: 2
  3876                           ;ff.c: 2512: mode |= 0x08;
  3877                           
  3878                           ; BSR set to: 2
  3879  0022A8  0101               	movlb	1	; () banked
  3880  0022AA  87D7               	bsf	f_open@mode& (0+255),3,b
  3881                           
  3882                           ; BSR set to: 1
  3883                           ;ff.c: 2513: dir = dj.dir;
  3884  0022AC  C263  F24F         	movff	f_open@dj+18,f_open@dir
  3885  0022B0  C264  F250         	movff	f_open@dj+19,f_open@dir+1
  3886                           
  3887                           ;ff.c: 2514: }
  3888  0022B4  D015               	goto	l1251
  3889  0022B6                     l1246:
  3890                           
  3891                           ;ff.c: 2515: else {
  3892                           ;ff.c: 2516: if (dir[11] & (0x01 | 0x10)) {
  3893                           
  3894                           ; BSR set to: 1
  3895  0022B6  0102               	movlb	2	; () banked
  3896  0022B8  EE20 F00B          	lfsr	2,11
  3897  0022BC  514F               	movf	f_open@dir& (0+255),w,b
  3898  0022BE  26D9               	addwf	fsr2l,f,c
  3899  0022C0  5150               	movf	(f_open@dir+1)& (0+255),w,b
  3900  0022C2  22DA               	addwfc	fsr2h,f,c
  3901  0022C4  50DF               	movf	indf2,w,c
  3902  0022C6  0101               	movlb	1	; () banked
  3903  0022C8  6FD8               	movwf	??_f_open& (0+255),b
  3904  0022CA  0E11               	movlw	17
  3905  0022CC  17D8               	andwf	??_f_open& (0+255),f,b
  3906  0022CE  B4D8               	btfsc	status,2,c
  3907  0022D0  D002               	goto	l1249
  3908                           
  3909                           ; BSR set to: 1
  3910                           ;ff.c: 2517: res = FR_DENIED;
  3911  0022D2  0E07               	movlw	7
  3912  0022D4  D003               	goto	L1
  3913  0022D6                     l1249:
  3914                           
  3915                           ; BSR set to: 1
  3916                           ;ff.c: 2519: if (mode & 0x04)
  3917  0022D6  A5D7               	btfss	f_open@mode& (0+255),2,b
  3918  0022D8  D003               	goto	l1251
  3919                           
  3920                           ; BSR set to: 1
  3921                           ;ff.c: 2520: res = FR_EXIST;
  3922  0022DA  0E08               	movlw	8
  3923  0022DC                     L1:
  3924  0022DC  0102               	movlb	2	; () banked
  3925  0022DE  6F4E               	movwf	f_open@res& (0+255),b
  3926  0022E0                     l1251:
  3927                           
  3928                           ;ff.c: 2521: }
  3929                           ;ff.c: 2522: }
  3930                           ;ff.c: 2523: if (res == FR_OK && (mode & 0x08)) {
  3931                           
  3932                           ; BSR set to: 2
  3933                           
  3934                           ; BSR set to: 2
  3935  0022E0  0102               	movlb	2	; () banked
  3936  0022E2  514E               	movf	f_open@res& (0+255),w,b
  3937  0022E4  A4D8               	btfss	status,2,c
  3938  0022E6  D0D8               	goto	l1259
  3939                           
  3940                           ; BSR set to: 2
  3941  0022E8  0101               	movlb	1	; () banked
  3942  0022EA  A7D7               	btfss	f_open@mode& (0+255),3,b
  3943  0022EC  D0D5               	goto	l1259
  3944                           
  3945                           ; BSR set to: 1
  3946                           ;ff.c: 2524: dw = ((DWORD)(2015 - 1980) << 25 | (DWORD)1 << 21 | (DWORD)1 << 16);
  3947  0022EE  0E00               	movlw	0
  3948  0022F0  0102               	movlb	2	; () banked
  3949  0022F2  6F4A               	movwf	f_open@dw& (0+255),b
  3950  0022F4  0E00               	movlw	0
  3951  0022F6  6F4B               	movwf	(f_open@dw+1)& (0+255),b
  3952  0022F8  0E21               	movlw	33
  3953  0022FA  6F4C               	movwf	(f_open@dw+2)& (0+255),b
  3954  0022FC  0E46               	movlw	70
  3955  0022FE  6F4D               	movwf	(f_open@dw+3)& (0+255),b
  3956                           
  3957                           ; BSR set to: 2
  3958                           ;ff.c: 2525: *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  3959  002300  EE20 F00E          	lfsr	2,14
  3960  002304  514F               	movf	f_open@dir& (0+255),w,b
  3961  002306  26D9               	addwf	fsr2l,f,c
  3962  002308  5150               	movf	(f_open@dir+1)& (0+255),w,b
  3963  00230A  22DA               	addwfc	fsr2h,f,c
  3964  00230C  C24A  FFDE         	movff	f_open@dw,postinc2
  3965  002310  C24B  FFDE         	movff	f_open@dw+1,postinc2
  3966  002314  C24C  FFDE         	movff	f_open@dw+2,postinc2
  3967  002318  C24D  FFDE         	movff	f_open@dw+3,postinc2
  3968                           
  3969                           ; BSR set to: 2
  3970                           ;ff.c: 2526: *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  3971  00231C  EE20 F016          	lfsr	2,22
  3972  002320  514F               	movf	f_open@dir& (0+255),w,b
  3973  002322  26D9               	addwf	fsr2l,f,c
  3974  002324  5150               	movf	(f_open@dir+1)& (0+255),w,b
  3975  002326  22DA               	addwfc	fsr2h,f,c
  3976  002328  C24A  FFDE         	movff	f_open@dw,postinc2
  3977  00232C  C24B  FFDE         	movff	f_open@dw+1,postinc2
  3978  002330  C24C  FFDE         	movff	f_open@dw+2,postinc2
  3979  002334  C24D  FFDE         	movff	f_open@dw+3,postinc2
  3980                           
  3981                           ; BSR set to: 2
  3982                           ;ff.c: 2527: dir[11] = 0;
  3983  002338  EE20 F00B          	lfsr	2,11
  3984  00233C  514F               	movf	f_open@dir& (0+255),w,b
  3985  00233E  26D9               	addwf	fsr2l,f,c
  3986  002340  5150               	movf	(f_open@dir+1)& (0+255),w,b
  3987  002342  22DA               	addwfc	fsr2h,f,c
  3988  002344  0E00               	movlw	0
  3989  002346  6EDF               	movwf	indf2,c
  3990                           
  3991                           ; BSR set to: 2
  3992                           ;ff.c: 2528: *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  3993  002348  EE20 F01C          	lfsr	2,28
  3994  00234C  514F               	movf	f_open@dir& (0+255),w,b
  3995  00234E  26D9               	addwf	fsr2l,f,c
  3996  002350  5150               	movf	(f_open@dir+1)& (0+255),w,b
  3997  002352  22DA               	addwfc	fsr2h,f,c
  3998  002354  6ADE               	clrf	postinc2,c
  3999  002356  6ADE               	clrf	postinc2,c
  4000  002358  6ADE               	clrf	postinc2,c
  4001  00235A  6ADD               	clrf	postdec2,c
  4002                           
  4003                           ; BSR set to: 2
  4004                           ;ff.c: 2529: cl = ld_clust(dj.fs, dir);
  4005  00235C  C251  F01A         	movff	f_open@dj,ld_clust@fs
  4006  002360  C252  F01B         	movff	f_open@dj+1,ld_clust@fs+1
  4007  002364  C24F  F01C         	movff	f_open@dir,ld_clust@dir
  4008  002368  C250  F01D         	movff	f_open@dir+1,ld_clust@dir+1
  4009  00236C  ECD5  F026         	call	_ld_clust	;wreg free
  4010  002370  C01A  F246         	movff	?_ld_clust,f_open@cl
  4011  002374  C01B  F247         	movff	?_ld_clust+1,f_open@cl+1
  4012  002378  C01C  F248         	movff	?_ld_clust+2,f_open@cl+2
  4013  00237C  C01D  F249         	movff	?_ld_clust+3,f_open@cl+3
  4014                           
  4015                           ;ff.c: 2530: st_clust(dir, 0);
  4016  002380  C24F  F01A         	movff	f_open@dir,st_clust@dir
  4017  002384  C250  F01B         	movff	f_open@dir+1,st_clust@dir+1
  4018  002388  0E00               	movlw	0
  4019  00238A  6E1C               	movwf	st_clust@cl,c
  4020  00238C  0E00               	movlw	0
  4021  00238E  6E1D               	movwf	st_clust@cl+1,c
  4022  002390  0E00               	movlw	0
  4023  002392  6E1E               	movwf	st_clust@cl+2,c
  4024  002394  0E00               	movlw	0
  4025  002396  6E1F               	movwf	st_clust@cl+3,c
  4026  002398  ECEB  F02A         	call	_st_clust	;wreg free
  4027                           
  4028                           ;ff.c: 2531: dj.fs->wflag = 1;
  4029  00239C  0102               	movlb	2	; () banked
  4030  00239E  EE20 F004          	lfsr	2,4
  4031  0023A2  5151               	movf	f_open@dj& (0+255),w,b
  4032  0023A4  26D9               	addwf	fsr2l,f,c
  4033  0023A6  5152               	movf	(f_open@dj+1)& (0+255),w,b
  4034  0023A8  22DA               	addwfc	fsr2h,f,c
  4035  0023AA  0E01               	movlw	1
  4036  0023AC  6EDF               	movwf	indf2,c
  4037                           
  4038                           ; BSR set to: 2
  4039                           ;ff.c: 2532: if (cl) {
  4040  0023AE  5146               	movf	f_open@cl& (0+255),w,b
  4041  0023B0  1147               	iorwf	(f_open@cl+1)& (0+255),w,b
  4042  0023B2  1148               	iorwf	(f_open@cl+2)& (0+255),w,b
  4043  0023B4  1149               	iorwf	(f_open@cl+3)& (0+255),w,b
  4044  0023B6  B4D8               	btfsc	status,2,c
  4045  0023B8  D06F               	goto	l1259
  4046                           
  4047                           ; BSR set to: 2
  4048                           ;ff.c: 2533: dw = dj.fs->winsect;
  4049  0023BA  EE20 F02A          	lfsr	2,42
  4050  0023BE  5151               	movf	f_open@dj& (0+255),w,b
  4051  0023C0  26D9               	addwf	fsr2l,f,c
  4052  0023C2  5152               	movf	(f_open@dj+1)& (0+255),w,b
  4053  0023C4  22DA               	addwfc	fsr2h,f,c
  4054  0023C6  CFDE F24A          	movff	postinc2,f_open@dw
  4055  0023CA  CFDE F24B          	movff	postinc2,f_open@dw+1
  4056  0023CE  CFDE F24C          	movff	postinc2,f_open@dw+2
  4057  0023D2  CFDE F24D          	movff	postinc2,f_open@dw+3
  4058                           
  4059                           ; BSR set to: 2
  4060                           ;ff.c: 2534: res = remove_chain(dj.fs, cl);
  4061  0023D6  C251  F0B2         	movff	f_open@dj,remove_chain@fs
  4062  0023DA  C252  F0B3         	movff	f_open@dj+1,remove_chain@fs+1
  4063  0023DE  C246  F0B4         	movff	f_open@cl,remove_chain@clst
  4064  0023E2  C247  F0B5         	movff	f_open@cl+1,remove_chain@clst+1
  4065  0023E6  C248  F0B6         	movff	f_open@cl+2,remove_chain@clst+2
  4066  0023EA  C249  F0B7         	movff	f_open@cl+3,remove_chain@clst+3
  4067  0023EE  EC78  F01E         	call	_remove_chain	;wreg free
  4068  0023F2  0102               	movlb	2	; () banked
  4069  0023F4  6F4E               	movwf	f_open@res& (0+255),b
  4070                           
  4071                           ; BSR set to: 2
  4072                           ;ff.c: 2535: if (res == FR_OK) {
  4073  0023F6  514E               	movf	f_open@res& (0+255),w,b
  4074  0023F8  A4D8               	btfss	status,2,c
  4075  0023FA  D04E               	goto	l1259
  4076                           
  4077                           ; BSR set to: 2
  4078                           ;ff.c: 2536: dj.fs->last_clust = cl - 1;
  4079  0023FC  0EFF               	movlw	255
  4080  0023FE  2546               	addwf	f_open@cl& (0+255),w,b
  4081  002400  0101               	movlb	1	; () banked
  4082  002402  6FD8               	movwf	??_f_open& (0+255),b
  4083  002404  0EFF               	movlw	255
  4084  002406  0102               	movlb	2	; () banked
  4085  002408  2147               	addwfc	(f_open@cl+1)& (0+255),w,b
  4086  00240A  0101               	movlb	1	; () banked
  4087  00240C  6FD9               	movwf	(??_f_open+1)& (0+255),b
  4088  00240E  0EFF               	movlw	255
  4089  002410  0102               	movlb	2	; () banked
  4090  002412  2148               	addwfc	(f_open@cl+2)& (0+255),w,b
  4091  002414  0101               	movlb	1	; () banked
  4092  002416  6FDA               	movwf	(??_f_open+2)& (0+255),b
  4093  002418  0EFF               	movlw	255
  4094  00241A  0102               	movlb	2	; () banked
  4095  00241C  2149               	addwfc	(f_open@cl+3)& (0+255),w,b
  4096  00241E  0101               	movlb	1	; () banked
  4097  002420  6FDB               	movwf	(??_f_open+3)& (0+255),b
  4098  002422  0102               	movlb	2	; () banked
  4099  002424  EE20 F00A          	lfsr	2,10
  4100  002428  5151               	movf	f_open@dj& (0+255),w,b
  4101  00242A  26D9               	addwf	fsr2l,f,c
  4102  00242C  5152               	movf	(f_open@dj+1)& (0+255),w,b
  4103  00242E  22DA               	addwfc	fsr2h,f,c
  4104  002430  C1D8  FFDE         	movff	??_f_open,postinc2
  4105  002434  C1D9  FFDE         	movff	??_f_open+1,postinc2
  4106  002438  C1DA  FFDE         	movff	??_f_open+2,postinc2
  4107  00243C  C1DB  FFDE         	movff	??_f_open+3,postinc2
  4108                           
  4109                           ; BSR set to: 2
  4110                           ;ff.c: 2537: res = move_window(dj.fs, dw);
  4111  002440  C251  F08C         	movff	f_open@dj,move_window@fs
  4112  002444  C252  F08D         	movff	f_open@dj+1,move_window@fs+1
  4113  002448  C24A  F08E         	movff	f_open@dw,move_window@sector
  4114  00244C  C24B  F08F         	movff	f_open@dw+1,move_window@sector+1
  4115  002450  C24C  F090         	movff	f_open@dw+2,move_window@sector+2
  4116  002454  C24D  F091         	movff	f_open@dw+3,move_window@sector+3
  4117  002458  ECCA  F024         	call	_move_window	;wreg free
  4118  00245C  0102               	movlb	2	; () banked
  4119  00245E  D01B               	goto	L3
  4120  002460                     l1245:
  4121                           
  4122                           ;ff.c: 2542: else {
  4123                           ;ff.c: 2543: if (res == FR_OK) {
  4124                           
  4125                           ; BSR set to: 2
  4126  002460  0102               	movlb	2	; () banked
  4127  002462  514E               	movf	f_open@res& (0+255),w,b
  4128  002464  A4D8               	btfss	status,2,c
  4129  002466  D018               	goto	l1259
  4130                           
  4131                           ; BSR set to: 2
  4132                           ;ff.c: 2544: if (dir[11] & 0x10) {
  4133  002468  EE20 F00B          	lfsr	2,11
  4134  00246C  514F               	movf	f_open@dir& (0+255),w,b
  4135  00246E  26D9               	addwf	fsr2l,f,c
  4136  002470  5150               	movf	(f_open@dir+1)& (0+255),w,b
  4137  002472  22DA               	addwfc	fsr2h,f,c
  4138  002474  A8DF               	btfss	indf2,4,c
  4139  002476  D002               	goto	l1257
  4140                           
  4141                           ; BSR set to: 2
  4142                           ;ff.c: 2545: res = FR_NO_FILE;
  4143  002478  0E04               	movlw	4
  4144  00247A  D00D               	goto	L3
  4145  00247C                     l1257:
  4146                           
  4147                           ; BSR set to: 2
  4148                           ;ff.c: 2547: if ((mode & 0x02) && (dir[11] & 0x01))
  4149  00247C  0101               	movlb	1	; () banked
  4150  00247E  A3D7               	btfss	f_open@mode& (0+255),1,b
  4151  002480  D00B               	goto	l1259
  4152                           
  4153                           ; BSR set to: 1
  4154  002482  0102               	movlb	2	; () banked
  4155  002484  EE20 F00B          	lfsr	2,11
  4156  002488  514F               	movf	f_open@dir& (0+255),w,b
  4157  00248A  26D9               	addwf	fsr2l,f,c
  4158  00248C  5150               	movf	(f_open@dir+1)& (0+255),w,b
  4159  00248E  22DA               	addwfc	fsr2h,f,c
  4160  002490  A0DF               	btfss	indf2,0,c
  4161  002492  D002               	goto	l1259
  4162                           
  4163                           ; BSR set to: 2
  4164                           ;ff.c: 2548: res = FR_DENIED;
  4165  002494  0E07               	movlw	7
  4166  002496                     L3:
  4167  002496  6F4E               	movwf	f_open@res& (0+255),b
  4168  002498                     l1259:
  4169                           
  4170                           ;ff.c: 2549: }
  4171                           ;ff.c: 2550: }
  4172                           ;ff.c: 2551: }
  4173                           ;ff.c: 2552: if (res == FR_OK) {
  4174                           
  4175                           ; BSR set to: 2
  4176                           
  4177                           ; BSR set to: 2
  4178                           
  4179                           ; BSR set to: 2
  4180  002498  0102               	movlb	2	; () banked
  4181  00249A  514E               	movf	f_open@res& (0+255),w,b
  4182  00249C  A4D8               	btfss	status,2,c
  4183  00249E  D023               	goto	l1260
  4184                           
  4185                           ; BSR set to: 2
  4186                           ;ff.c: 2553: if (mode & 0x08)
  4187  0024A0  0101               	movlb	1	; () banked
  4188  0024A2  B7D7               	btfsc	f_open@mode& (0+255),3,b
  4189                           
  4190                           ; BSR set to: 1
  4191                           ;ff.c: 2554: mode |= 0x20;
  4192  0024A4  8BD7               	bsf	f_open@mode& (0+255),5,b
  4193                           
  4194                           ; BSR set to: 1
  4195                           ;ff.c: 2555: fp->dir_sect = dj.fs->winsect;
  4196                           
  4197                           ; BSR set to: 1
  4198  0024A6  0102               	movlb	2	; () banked
  4199  0024A8  EE20 F02A          	lfsr	2,42
  4200  0024AC  5151               	movf	f_open@dj& (0+255),w,b
  4201  0024AE  26D9               	addwf	fsr2l,f,c
  4202  0024B0  5152               	movf	(f_open@dj+1)& (0+255),w,b
  4203  0024B2  22DA               	addwfc	fsr2h,f,c
  4204  0024B4  0101               	movlb	1	; () banked
  4205  0024B6  EE10 F01A          	lfsr	1,26
  4206  0024BA  51D3               	movf	f_open@fp& (0+255),w,b
  4207  0024BC  26E1               	addwf	fsr1l,f,c
  4208  0024BE  51D4               	movf	(f_open@fp+1)& (0+255),w,b
  4209  0024C0  22E2               	addwfc	fsr1h,f,c
  4210  0024C2  CFDE FFE6          	movff	postinc2,postinc1
  4211  0024C6  CFDE FFE6          	movff	postinc2,postinc1
  4212  0024CA  CFDE FFE6          	movff	postinc2,postinc1
  4213  0024CE  CFDE FFE6          	movff	postinc2,postinc1
  4214                           
  4215                           ; BSR set to: 1
  4216                           ;ff.c: 2556: fp->dir_ptr = dir;
  4217  0024D2  EE20 F01E          	lfsr	2,30
  4218  0024D6  51D3               	movf	f_open@fp& (0+255),w,b
  4219  0024D8  26D9               	addwf	fsr2l,f,c
  4220  0024DA  51D4               	movf	(f_open@fp+1)& (0+255),w,b
  4221  0024DC  22DA               	addwfc	fsr2h,f,c
  4222  0024DE  C24F  FFDE         	movff	f_open@dir,postinc2
  4223  0024E2  C250  FFDD         	movff	f_open@dir+1,postdec2
  4224  0024E6                     l1260:
  4225                           
  4226                           ;ff.c: 2561: }
  4227                           ;ff.c: 2574: ;
  4228                           ;ff.c: 2576: if (res == FR_OK) {
  4229                           
  4230                           ; BSR set to: 1
  4231  0024E6  0102               	movlb	2	; () banked
  4232  0024E8  514E               	movf	f_open@res& (0+255),w,b
  4233  0024EA  A4D8               	btfss	status,2,c
  4234  0024EC  D070               	goto	l1262
  4235                           
  4236                           ; BSR set to: 2
  4237                           ;ff.c: 2577: fp->flag = mode;
  4238  0024EE  0101               	movlb	1	; () banked
  4239  0024F0  EE20 F004          	lfsr	2,4
  4240  0024F4  51D3               	movf	f_open@fp& (0+255),w,b
  4241  0024F6  26D9               	addwf	fsr2l,f,c
  4242  0024F8  51D4               	movf	(f_open@fp+1)& (0+255),w,b
  4243  0024FA  22DA               	addwfc	fsr2h,f,c
  4244  0024FC  C1D7  FFDF         	movff	f_open@mode,indf2
  4245                           
  4246                           ;ff.c: 2578: fp->err = 0;
  4247  002500  EE20 F005          	lfsr	2,5
  4248  002504  51D3               	movf	f_open@fp& (0+255),w,b
  4249  002506  26D9               	addwf	fsr2l,f,c
  4250  002508  51D4               	movf	(f_open@fp+1)& (0+255),w,b
  4251  00250A  22DA               	addwfc	fsr2h,f,c
  4252  00250C  0E00               	movlw	0
  4253  00250E  6EDF               	movwf	indf2,c
  4254                           
  4255                           ; BSR set to: 1
  4256                           ;ff.c: 2579: fp->sclust = ld_clust(dj.fs, dir);
  4257  002510  C251  F01A         	movff	f_open@dj,ld_clust@fs
  4258  002514  C252  F01B         	movff	f_open@dj+1,ld_clust@fs+1
  4259  002518  C24F  F01C         	movff	f_open@dir,ld_clust@dir
  4260  00251C  C250  F01D         	movff	f_open@dir+1,ld_clust@dir+1
  4261  002520  ECD5  F026         	call	_ld_clust	;wreg free
  4262  002524  0101               	movlb	1	; () banked
  4263  002526  EE20 F00E          	lfsr	2,14
  4264  00252A  51D3               	movf	f_open@fp& (0+255),w,b
  4265  00252C  26D9               	addwf	fsr2l,f,c
  4266  00252E  51D4               	movf	(f_open@fp+1)& (0+255),w,b
  4267  002530  22DA               	addwfc	fsr2h,f,c
  4268  002532  C01A  FFDE         	movff	?_ld_clust,postinc2
  4269  002536  C01B  FFDE         	movff	?_ld_clust+1,postinc2
  4270  00253A  C01C  FFDE         	movff	?_ld_clust+2,postinc2
  4271  00253E  C01D  FFDE         	movff	?_ld_clust+3,postinc2
  4272                           
  4273                           ; BSR set to: 1
  4274                           ;ff.c: 2580: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  4275  002542  0102               	movlb	2	; () banked
  4276  002544  EE20 F01C          	lfsr	2,28
  4277  002548  514F               	movf	f_open@dir& (0+255),w,b
  4278  00254A  26D9               	addwf	fsr2l,f,c
  4279  00254C  5150               	movf	(f_open@dir+1)& (0+255),w,b
  4280  00254E  22DA               	addwfc	fsr2h,f,c
  4281  002550  0101               	movlb	1	; () banked
  4282  002552  EE10 F00A          	lfsr	1,10
  4283  002556  51D3               	movf	f_open@fp& (0+255),w,b
  4284  002558  26E1               	addwf	fsr1l,f,c
  4285  00255A  51D4               	movf	(f_open@fp+1)& (0+255),w,b
  4286  00255C  22E2               	addwfc	fsr1h,f,c
  4287  00255E  CFDE FFE6          	movff	postinc2,postinc1
  4288  002562  CFDE FFE6          	movff	postinc2,postinc1
  4289  002566  CFDE FFE6          	movff	postinc2,postinc1
  4290  00256A  CFDE FFE6          	movff	postinc2,postinc1
  4291                           
  4292                           ; BSR set to: 1
  4293                           ;ff.c: 2581: fp->fptr = 0;
  4294  00256E  EE20 F006          	lfsr	2,6
  4295  002572  51D3               	movf	f_open@fp& (0+255),w,b
  4296  002574  26D9               	addwf	fsr2l,f,c
  4297  002576  51D4               	movf	(f_open@fp+1)& (0+255),w,b
  4298  002578  22DA               	addwfc	fsr2h,f,c
  4299  00257A  6ADE               	clrf	postinc2,c
  4300  00257C  6ADE               	clrf	postinc2,c
  4301  00257E  6ADE               	clrf	postinc2,c
  4302  002580  6ADD               	clrf	postdec2,c
  4303                           
  4304                           ; BSR set to: 1
  4305                           ;ff.c: 2582: fp->dsect = 0;
  4306  002582  EE20 F016          	lfsr	2,22
  4307  002586  51D3               	movf	f_open@fp& (0+255),w,b
  4308  002588  26D9               	addwf	fsr2l,f,c
  4309  00258A  51D4               	movf	(f_open@fp+1)& (0+255),w,b
  4310  00258C  22DA               	addwfc	fsr2h,f,c
  4311  00258E  6ADE               	clrf	postinc2,c
  4312  002590  6ADE               	clrf	postinc2,c
  4313  002592  6ADE               	clrf	postinc2,c
  4314  002594  6ADD               	clrf	postdec2,c
  4315                           
  4316                           ; BSR set to: 1
  4317                           ;ff.c: 2586: fp->fs = dj.fs;
  4318  002596  C1D3  FFD9         	movff	f_open@fp,fsr2l
  4319  00259A  C1D4  FFDA         	movff	f_open@fp+1,fsr2h
  4320  00259E  C251  FFDE         	movff	f_open@dj,postinc2
  4321  0025A2  C252  FFDD         	movff	f_open@dj+1,postdec2
  4322                           
  4323                           ; BSR set to: 1
  4324                           ;ff.c: 2587: fp->id = fp->fs->id;
  4325  0025A6  C1D3  FFD9         	movff	f_open@fp,fsr2l
  4326  0025AA  C1D4  FFDA         	movff	f_open@fp+1,fsr2h
  4327  0025AE  EE10 F006          	lfsr	1,6
  4328  0025B2  50DE               	movf	postinc2,w,c
  4329  0025B4  26E1               	addwf	fsr1l,f,c
  4330  0025B6  50DD               	movf	postdec2,w,c
  4331  0025B8  22E2               	addwfc	fsr1h,f,c
  4332  0025BA  EE20 F002          	lfsr	2,2
  4333  0025BE  51D3               	movf	f_open@fp& (0+255),w,b
  4334  0025C0  26D9               	addwf	fsr2l,f,c
  4335  0025C2  51D4               	movf	(f_open@fp+1)& (0+255),w,b
  4336  0025C4  22DA               	addwfc	fsr2h,f,c
  4337  0025C6  CFE6 FFDE          	movff	postinc1,postinc2
  4338  0025CA  CFE5 FFDD          	movff	postdec1,postdec2
  4339  0025CE                     l1262:
  4340                           
  4341                           ;ff.c: 2588: }
  4342                           ;ff.c: 2589: }
  4343                           ;ff.c: 2591: return res;
  4344                           
  4345                           ; BSR set to: 1
  4346                           
  4347                           ; BSR set to: 1
  4348  0025CE  0102               	movlb	2	; () banked
  4349  0025D0  514E               	movf	f_open@res& (0+255),w,b
  4350  0025D2  0012               	return	
  4351  0025D4                     __end_of_f_open:
  4352                           	opt stack 0
  4353                           tblptru	equ	0xFF8
  4354                           tblptrh	equ	0xFF7
  4355                           tblptrl	equ	0xFF6
  4356                           tablat	equ	0xFF5
  4357                           prodh	equ	0xFF4
  4358                           prodl	equ	0xFF3
  4359                           intcon	equ	0xFF2
  4360                           intcon2	equ	0xFF1
  4361                           intcon3	equ	0xFF0
  4362                           postinc0	equ	0xFEE
  4363                           wreg	equ	0xFE8
  4364                           postinc1	equ	0xFE6
  4365                           postdec1	equ	0xFE5
  4366                           fsr1h	equ	0xFE2
  4367                           fsr1l	equ	0xFE1
  4368                           indf2	equ	0xFDF
  4369                           postinc2	equ	0xFDE
  4370                           postdec2	equ	0xFDD
  4371                           fsr2h	equ	0xFDA
  4372                           fsr2l	equ	0xFD9
  4373                           status	equ	0xFD8
  4374                           
  4375 ;; *************** function _remove_chain *****************
  4376 ;; Defined at:
  4377 ;;		line 937 in file "bibliotecas/ff.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  fs              2   82[BANK0 ] PTR struct .
  4380 ;;		 -> NULL(0), fs(558), 
  4381 ;;  clst            4   84[BANK0 ] unsigned long 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  nxt             4   93[BANK0 ] unsigned long 
  4384 ;;  res             1   92[BANK0 ] enum E75
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      enum E75
  4387 ;; Registers used:
  4388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4394 ;;      Params:         0       6       0       0       0       0       0       0       0
  4395 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4396 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4397 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4398 ;;Total ram usage:       15 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:   10
  4401 ;; This function calls:
  4402 ;;		_get_fat
  4403 ;;		_put_fat
  4404 ;; This function is called by:
  4405 ;;		_f_open
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           	psect	text17
  4410  003CF0                     __ptext17:
  4411                           	opt stack 0
  4412  003CF0                     _remove_chain:
  4413                           	opt stack 17
  4414                           
  4415                           ;ff.c: 942: FRESULT res;
  4416                           ;ff.c: 943: DWORD nxt;
  4417                           ;ff.c: 948: if (clst < 2 || clst >= fs->n_fatent) {
  4418                           
  4419                           ;incstack = 0
  4420  003CF0  0100               	movlb	0	; () banked
  4421  003CF2  51B7               	movf	(remove_chain@clst+3)& (0+255),w,b
  4422  003CF4  11B6               	iorwf	(remove_chain@clst+2)& (0+255),w,b
  4423  003CF6  11B5               	iorwf	(remove_chain@clst+1)& (0+255),w,b
  4424  003CF8  E104               	bnz	u14390
  4425  003CFA  0E02               	movlw	2
  4426  003CFC  5DB4               	subwf	remove_chain@clst& (0+255),w,b
  4427  003CFE  A0D8               	btfss	status,0,c
  4428  003D00  D036               	goto	u14420
  4429  003D02                     u14390:
  4430                           
  4431                           ; BSR set to: 0
  4432  003D02  EE20 F012          	lfsr	2,18
  4433  003D06  51B2               	movf	remove_chain@fs& (0+255),w,b
  4434  003D08  26D9               	addwf	fsr2l,f,c
  4435  003D0A  51B3               	movf	(remove_chain@fs+1)& (0+255),w,b
  4436  003D0C  22DA               	addwfc	fsr2h,f,c
  4437  003D0E  50DE               	movf	postinc2,w,c
  4438  003D10  5DB4               	subwf	remove_chain@clst& (0+255),w,b
  4439  003D12  50DE               	movf	postinc2,w,c
  4440  003D14  59B5               	subwfb	(remove_chain@clst+1)& (0+255),w,b
  4441  003D16  50DE               	movf	postinc2,w,c
  4442  003D18  59B6               	subwfb	(remove_chain@clst+2)& (0+255),w,b
  4443  003D1A  50DE               	movf	postinc2,w,c
  4444  003D1C  59B7               	subwfb	(remove_chain@clst+3)& (0+255),w,b
  4445  003D1E  B0D8               	btfsc	status,0,c
  4446                           
  4447                           ; BSR set to: 0
  4448  003D20  D026               	goto	u14420
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;ff.c: 952: res = FR_OK;
  4452                           
  4453                           ; BSR set to: 0
  4454                           
  4455                           ;ff.c: 951: } else {
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;ff.c: 949: res = FR_INT_ERR;
  4459  003D22  0E00               	movlw	0
  4460  003D24  6FBC               	movwf	remove_chain@res& (0+255),b
  4461                           
  4462                           ;ff.c: 953: while (clst < fs->n_fatent) {
  4463  003D26  D076               	goto	l966
  4464  003D28                     
  4465                           ; BSR set to: 0
  4466                           ;ff.c: 954: nxt = get_fat(fs, clst);
  4467                           
  4468                           ; BSR set to: 0
  4469  003D28  C0B2  F097         	movff	remove_chain@fs,get_fat@fs
  4470  003D2C  C0B3  F098         	movff	remove_chain@fs+1,get_fat@fs+1
  4471  003D30  C0B4  F099         	movff	remove_chain@clst,get_fat@clst
  4472  003D34  C0B5  F09A         	movff	remove_chain@clst+1,get_fat@clst+1
  4473  003D38  C0B6  F09B         	movff	remove_chain@clst+2,get_fat@clst+2
  4474  003D3C  C0B7  F09C         	movff	remove_chain@clst+3,get_fat@clst+3
  4475  003D40  ECEA  F012         	call	_get_fat	;wreg free
  4476  003D44  C097  F0BD         	movff	?_get_fat,remove_chain@nxt
  4477  003D48  C098  F0BE         	movff	?_get_fat+1,remove_chain@nxt+1
  4478  003D4C  C099  F0BF         	movff	?_get_fat+2,remove_chain@nxt+2
  4479  003D50  C09A  F0C0         	movff	?_get_fat+3,remove_chain@nxt+3
  4480                           
  4481                           ;ff.c: 955: if (nxt == 0) break;
  4482  003D54  0100               	movlb	0	; () banked
  4483  003D56  51BD               	movf	remove_chain@nxt& (0+255),w,b
  4484  003D58  11BE               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  4485  003D5A  11BF               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  4486  003D5C  11C0               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  4487  003D5E  B4D8               	btfsc	status,2,c
  4488  003D60  D069               	goto	u14460
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;ff.c: 956: if (nxt == 1) { res = FR_INT_ERR; break; }
  4492                           
  4493                           ; BSR set to: 0
  4494                           
  4495                           ; BSR set to: 0
  4496  003D62  05BD               	decf	remove_chain@nxt& (0+255),w,b
  4497  003D64  11BE               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  4498  003D66  11BF               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  4499  003D68  11C0               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  4500  003D6A  A4D8               	btfss	status,2,c
  4501  003D6C  D002               	goto	l970
  4502  003D6E                     u14420:
  4503                           
  4504                           ; BSR set to: 0
  4505  003D6E  0E02               	movlw	2
  4506  003D70  D00A               	goto	L4
  4507  003D72                     l970:
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;ff.c: 957: if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  4511                           
  4512                           ; BSR set to: 0
  4513  003D72  29BD               	incf	remove_chain@nxt& (0+255),w,b
  4514  003D74  E10A               	bnz	l11295
  4515  003D76  29BE               	incf	(remove_chain@nxt+1)& (0+255),w,b
  4516  003D78  E108               	bnz	l11295
  4517  003D7A  29BF               	incf	(remove_chain@nxt+2)& (0+255),w,b
  4518  003D7C  E106               	bnz	l11295
  4519  003D7E  29C0               	incf	(remove_chain@nxt+3)& (0+255),w,b
  4520  003D80  A4D8               	btfss	status,2,c
  4521  003D82  D003               	goto	l971
  4522                           
  4523                           ; BSR set to: 0
  4524  003D84  0E01               	movlw	1
  4525  003D86                     L4:
  4526  003D86  6FBC               	movwf	remove_chain@res& (0+255),b
  4527  003D88  D055               	goto	u14460
  4528  003D8A                     l971:
  4529  003D8A                     l11295:
  4530                           
  4531                           ; BSR set to: 0
  4532                           ;ff.c: 958: res = put_fat(fs, clst, 0);
  4533  003D8A  C0B2  F097         	movff	remove_chain@fs,put_fat@fs
  4534  003D8E  C0B3  F098         	movff	remove_chain@fs+1,put_fat@fs+1
  4535  003D92  C0B4  F099         	movff	remove_chain@clst,put_fat@clst
  4536  003D96  C0B5  F09A         	movff	remove_chain@clst+1,put_fat@clst+1
  4537  003D9A  C0B6  F09B         	movff	remove_chain@clst+2,put_fat@clst+2
  4538  003D9E  C0B7  F09C         	movff	remove_chain@clst+3,put_fat@clst+3
  4539  003DA2  0E00               	movlw	0
  4540  003DA4  6F9D               	movwf	put_fat@val& (0+255),b
  4541  003DA6  0E00               	movlw	0
  4542  003DA8  6F9E               	movwf	(put_fat@val+1)& (0+255),b
  4543  003DAA  0E00               	movlw	0
  4544  003DAC  6F9F               	movwf	(put_fat@val+2)& (0+255),b
  4545  003DAE  0E00               	movlw	0
  4546  003DB0  6FA0               	movwf	(put_fat@val+3)& (0+255),b
  4547  003DB2  ECF0  F00E         	call	_put_fat	;wreg free
  4548  003DB6  0100               	movlb	0	; () banked
  4549  003DB8  6FBC               	movwf	remove_chain@res& (0+255),b
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;ff.c: 959: if (res != FR_OK) break;
  4553  003DBA  51BC               	movf	remove_chain@res& (0+255),w,b
  4554  003DBC  A4D8               	btfss	status,2,c
  4555  003DBE  D03A               	goto	u14460
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;ff.c: 960: if (fs->free_clust != 0xFFFFFFFF) {
  4559                           
  4560                           ; BSR set to: 0
  4561                           
  4562                           ; BSR set to: 0
  4563  003DC0  EE20 F00E          	lfsr	2,14
  4564  003DC4  51B2               	movf	remove_chain@fs& (0+255),w,b
  4565  003DC6  26D9               	addwf	fsr2l,f,c
  4566  003DC8  51B3               	movf	(remove_chain@fs+1)& (0+255),w,b
  4567  003DCA  22DA               	addwfc	fsr2h,f,c
  4568  003DCC  28DE               	incf	postinc2,w,c
  4569  003DCE  E107               	bnz	u14450
  4570  003DD0  28DE               	incf	postinc2,w,c
  4571  003DD2  E105               	bnz	u14450
  4572  003DD4  28DE               	incf	postinc2,w,c
  4573  003DD6  E103               	bnz	u14450
  4574  003DD8  28DE               	incf	postinc2,w,c
  4575  003DDA  B4D8               	btfsc	status,2,c
  4576  003DDC  D013               	goto	l973
  4577  003DDE                     u14450:
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;ff.c: 961: fs->free_clust++;
  4581  003DDE  EE20 F00E          	lfsr	2,14
  4582  003DE2  51B2               	movf	remove_chain@fs& (0+255),w,b
  4583  003DE4  26D9               	addwf	fsr2l,f,c
  4584  003DE6  51B3               	movf	(remove_chain@fs+1)& (0+255),w,b
  4585  003DE8  22DA               	addwfc	fsr2h,f,c
  4586  003DEA  2ADE               	incf	postinc2,f,c
  4587  003DEC  0E00               	movlw	0
  4588  003DEE  22DE               	addwfc	postinc2,f,c
  4589  003DF0  22DE               	addwfc	postinc2,f,c
  4590  003DF2  22DE               	addwfc	postinc2,f,c
  4591                           
  4592                           ;ff.c: 962: fs->fsi_flag |= 1;
  4593  003DF4  EE20 F005          	lfsr	2,5
  4594  003DF8  51B2               	movf	remove_chain@fs& (0+255),w,b
  4595  003DFA  26D9               	addwf	fsr2l,f,c
  4596  003DFC  51B3               	movf	(remove_chain@fs+1)& (0+255),w,b
  4597  003DFE  22DA               	addwfc	fsr2h,f,c
  4598  003E00  0E00               	movlw	0
  4599  003E02  80DB               	bsf	plusw2,0,c
  4600  003E04                     l973:
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;ff.c: 963: }
  4604                           ;ff.c: 974: clst = nxt;
  4605                           
  4606                           ; BSR set to: 0
  4607  003E04  C0BD  F0B4         	movff	remove_chain@nxt,remove_chain@clst
  4608  003E08  C0BE  F0B5         	movff	remove_chain@nxt+1,remove_chain@clst+1
  4609  003E0C  C0BF  F0B6         	movff	remove_chain@nxt+2,remove_chain@clst+2
  4610  003E10  C0C0  F0B7         	movff	remove_chain@nxt+3,remove_chain@clst+3
  4611  003E14                     l966:
  4612                           
  4613                           ; BSR set to: 0
  4614  003E14  EE20 F012          	lfsr	2,18
  4615  003E18  51B2               	movf	remove_chain@fs& (0+255),w,b
  4616  003E1A  26D9               	addwf	fsr2l,f,c
  4617  003E1C  51B3               	movf	(remove_chain@fs+1)& (0+255),w,b
  4618  003E1E  22DA               	addwfc	fsr2h,f,c
  4619  003E20  50DE               	movf	postinc2,w,c
  4620  003E22  5DB4               	subwf	remove_chain@clst& (0+255),w,b
  4621  003E24  50DE               	movf	postinc2,w,c
  4622  003E26  59B5               	subwfb	(remove_chain@clst+1)& (0+255),w,b
  4623  003E28  50DE               	movf	postinc2,w,c
  4624  003E2A  59B6               	subwfb	(remove_chain@clst+2)& (0+255),w,b
  4625  003E2C  50DE               	movf	postinc2,w,c
  4626  003E2E  59B7               	subwfb	(remove_chain@clst+3)& (0+255),w,b
  4627  003E30  A0D8               	btfss	status,0,c
  4628  003E32  D77A               	goto	l967
  4629  003E34                     u14460:
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;ff.c: 975: }
  4633                           ;ff.c: 976: }
  4634                           ;ff.c: 978: return res;
  4635                           
  4636                           ; BSR set to: 0
  4637                           
  4638                           ; BSR set to: 0
  4639  003E34  51BC               	movf	remove_chain@res& (0+255),w,b
  4640  003E36  0012               	return	
  4641  003E38                     __end_of_remove_chain:
  4642                           	opt stack 0
  4643                           tblptru	equ	0xFF8
  4644                           tblptrh	equ	0xFF7
  4645                           tblptrl	equ	0xFF6
  4646                           tablat	equ	0xFF5
  4647                           prodh	equ	0xFF4
  4648                           prodl	equ	0xFF3
  4649                           intcon	equ	0xFF2
  4650                           intcon2	equ	0xFF1
  4651                           intcon3	equ	0xFF0
  4652                           postinc0	equ	0xFEE
  4653                           wreg	equ	0xFE8
  4654                           postinc1	equ	0xFE6
  4655                           postdec1	equ	0xFE5
  4656                           fsr1h	equ	0xFE2
  4657                           fsr1l	equ	0xFE1
  4658                           indf2	equ	0xFDF
  4659                           postinc2	equ	0xFDE
  4660                           postdec2	equ	0xFDD
  4661                           plusw2	equ	0xFDB
  4662                           fsr2h	equ	0xFDA
  4663                           fsr2l	equ	0xFD9
  4664                           status	equ	0xFD8
  4665                           
  4666 ;; *************** function _follow_path *****************
  4667 ;; Defined at:
  4668 ;;		line 2052 in file "bibliotecas/ff.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;  dp              2  130[BANK0 ] PTR struct .
  4671 ;;		 -> f_open@dj(22), 
  4672 ;;  path            2  132[BANK0 ] PTR const unsigned char 
  4673 ;;		 -> filename(15), STR_10(1), 
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;  dir             2    0[BANK1 ] PTR unsigned char 
  4676 ;;		 -> NULL(0), fs(558), 
  4677 ;;  res             1    3[BANK1 ] enum E75
  4678 ;;  ns              1    2[BANK1 ] unsigned char 
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  1    wreg      enum E75
  4681 ;; Registers used:
  4682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4688 ;;      Params:         0       4       0       0       0       0       0       0       0
  4689 ;;      Locals:         0       0       4       0       0       0       0       0       0
  4690 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4691 ;;      Totals:         0       5       4       0       0       0       0       0       0
  4692 ;;Total ram usage:        9 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:   13
  4695 ;; This function calls:
  4696 ;;		_create_name
  4697 ;;		_dir_find
  4698 ;;		_dir_sdi
  4699 ;;		_ld_clust
  4700 ;; This function is called by:
  4701 ;;		_f_open
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           	psect	text18
  4706  00374A                     __ptext18:
  4707                           	opt stack 0
  4708  00374A                     _follow_path:
  4709                           	opt stack 14
  4710                           
  4711                           ;ff.c: 2057: FRESULT res;
  4712                           ;ff.c: 2058: BYTE *dir, ns;
  4713                           ;ff.c: 2068: if (*path == '/' || *path == '\\')
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;incstack = 0
  4717  00374A  C0E4  FFF6         	movff	follow_path@path,tblptrl
  4718  00374E  C0E5  FFF7         	movff	follow_path@path+1,tblptrh
  4719  003752  6AF8               	clrf	tblptru,c
  4720  003754  0E07               	movlw	(high __ramtop+-1)
  4721  003756  64F7               	cpfsgt	tblptrh,c
  4722  003758  D003               	bra	u14497
  4723  00375A  0008               	tblrd		*
  4724  00375C  50F5               	movf	tablat,w,c
  4725  00375E  D005               	bra	u14490
  4726  003760                     u14497:
  4727  003760  CFF6 FFE9          	movff	tblptrl,fsr0l
  4728  003764  CFF7 FFEA          	movff	tblptrh,fsr0h
  4729  003768  50EF               	movf	indf0,w,c
  4730  00376A                     u14490:
  4731  00376A  0A2F               	xorlw	47
  4732  00376C  B4D8               	btfsc	status,2,c
  4733  00376E  D013               	goto	u14520
  4734  003770  C0E4  FFF6         	movff	follow_path@path,tblptrl
  4735  003774  C0E5  FFF7         	movff	follow_path@path+1,tblptrh
  4736  003778  6AF8               	clrf	tblptru,c
  4737  00377A  0E07               	movlw	(high __ramtop+-1)
  4738  00377C  64F7               	cpfsgt	tblptrh,c
  4739  00377E  D003               	bra	u14517
  4740  003780  0008               	tblrd		*
  4741  003782  50F5               	movf	tablat,w,c
  4742  003784  D005               	bra	u14510
  4743  003786                     u14517:
  4744  003786  CFF6 FFE9          	movff	tblptrl,fsr0l
  4745  00378A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4746  00378E  50EF               	movf	indf0,w,c
  4747  003790                     u14510:
  4748  003790  0A5C               	xorlw	92
  4749  003792  A4D8               	btfss	status,2,c
  4750  003794  D003               	goto	l1125
  4751  003796                     u14520:
  4752                           
  4753                           ;ff.c: 2069: path++;
  4754  003796  0100               	movlb	0	; () banked
  4755  003798  4BE4               	infsnz	follow_path@path& (0+255),f,b
  4756  00379A  2BE5               	incf	(follow_path@path+1)& (0+255),f,b
  4757  00379C                     l1125:
  4758                           
  4759                           ;ff.c: 2070: dp->sclust = 0;
  4760                           
  4761                           ; BSR set to: 0
  4762  00379C  0100               	movlb	0	; () banked
  4763  00379E  EE20 F006          	lfsr	2,6
  4764  0037A2  51E2               	movf	follow_path@dp& (0+255),w,b
  4765  0037A4  26D9               	addwf	fsr2l,f,c
  4766  0037A6  51E3               	movf	(follow_path@dp+1)& (0+255),w,b
  4767  0037A8  22DA               	addwfc	fsr2h,f,c
  4768  0037AA  6ADE               	clrf	postinc2,c
  4769  0037AC  6ADE               	clrf	postinc2,c
  4770  0037AE  6ADE               	clrf	postinc2,c
  4771  0037B0  6ADD               	clrf	postdec2,c
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;ff.c: 2073: if ((UINT)*path < ' ') {
  4775  0037B2  C0E4  FFF6         	movff	follow_path@path,tblptrl
  4776  0037B6  C0E5  FFF7         	movff	follow_path@path+1,tblptrh
  4777  0037BA  6AF8               	clrf	tblptru,c
  4778  0037BC  0E07               	movlw	(high __ramtop+-1)
  4779  0037BE  64F7               	cpfsgt	tblptrh,c
  4780  0037C0  D003               	bra	u14537
  4781  0037C2  0008               	tblrd		*
  4782  0037C4  50F5               	movf	tablat,w,c
  4783  0037C6  D005               	bra	u14530
  4784  0037C8                     u14537:
  4785  0037C8  CFF6 FFE9          	movff	tblptrl,fsr0l
  4786  0037CC  CFF7 FFEA          	movff	tblptrh,fsr0h
  4787  0037D0  50EF               	movf	indf0,w,c
  4788  0037D2                     u14530:
  4789  0037D2  0100               	movlb	0	; () banked
  4790  0037D4  6FE6               	movwf	??_follow_path& (0+255),b
  4791  0037D6  0E20               	movlw	32
  4792  0037D8  61E6               	cpfslt	??_follow_path& (0+255),b
  4793  0037DA  D018               	goto	l1128
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;ff.c: 2074: res = dir_sdi(dp, 0);
  4797  0037DC  C0E2  F0B1         	movff	follow_path@dp,dir_sdi@dp
  4798  0037E0  C0E3  F0B2         	movff	follow_path@dp+1,dir_sdi@dp+1
  4799  0037E4  0E00               	movlw	0
  4800  0037E6  6FB4               	movwf	(dir_sdi@idx+1)& (0+255),b
  4801  0037E8  0E00               	movlw	0
  4802  0037EA  6FB3               	movwf	dir_sdi@idx& (0+255),b
  4803  0037EC  EC5B  F019         	call	_dir_sdi	;wreg free
  4804  0037F0  0101               	movlb	1	; () banked
  4805  0037F2  6FD2               	movwf	follow_path@res& (0+255),b
  4806                           
  4807                           ; BSR set to: 1
  4808                           ;ff.c: 2075: dp->dir = 0;
  4809  0037F4  0100               	movlb	0	; () banked
  4810  0037F6  EE20 F012          	lfsr	2,18
  4811  0037FA  51E2               	movf	follow_path@dp& (0+255),w,b
  4812  0037FC  26D9               	addwf	fsr2l,f,c
  4813  0037FE  51E3               	movf	(follow_path@dp+1)& (0+255),w,b
  4814  003800  22DA               	addwfc	fsr2h,f,c
  4815  003802  0E00               	movlw	0
  4816  003804  6EDE               	movwf	postinc2,c
  4817  003806  0E00               	movlw	0
  4818  003808  6EDD               	movwf	postdec2,c
  4819                           
  4820                           ;ff.c: 2076: } else {
  4821  00380A  D068               	goto	l1132
  4822  00380C                     l1128:
  4823                           
  4824                           ;ff.c: 2078: res = create_name(dp, &path);
  4825                           
  4826                           ; BSR set to: 0
  4827                           
  4828                           ;ff.c: 2077: for (;;) {
  4829                           
  4830                           ; BSR set to: 0
  4831  00380C  C0E2  F022         	movff	follow_path@dp,create_name@dp
  4832  003810  C0E3  F023         	movff	follow_path@dp+1,create_name@dp+1
  4833  003814  0EE4               	movlw	low follow_path@path
  4834  003816  6E24               	movwf	create_name@path,c
  4835  003818  0E00               	movlw	high follow_path@path
  4836  00381A  6E25               	movwf	create_name@path+1,c
  4837  00381C  ECE6  F017         	call	_create_name	;wreg free
  4838  003820  0101               	movlb	1	; () banked
  4839  003822  6FD2               	movwf	follow_path@res& (0+255),b
  4840                           
  4841                           ; BSR set to: 1
  4842                           ;ff.c: 2079: if (res != FR_OK) break;
  4843  003824  51D2               	movf	follow_path@res& (0+255),w,b
  4844  003826  A4D8               	btfss	status,2,c
  4845  003828  D059               	goto	l1132
  4846                           
  4847                           ; BSR set to: 1
  4848                           ;ff.c: 2080: res = dir_find(dp);
  4849                           
  4850                           ; BSR set to: 1
  4851                           
  4852                           ; BSR set to: 1
  4853  00382A  C0E2  F0DC         	movff	follow_path@dp,dir_find@dp
  4854  00382E  C0E3  F0DD         	movff	follow_path@dp+1,dir_find@dp+1
  4855  003832  ECBD  F021         	call	_dir_find	;wreg free
  4856  003836  0101               	movlb	1	; () banked
  4857  003838  6FD2               	movwf	follow_path@res& (0+255),b
  4858                           
  4859                           ; BSR set to: 1
  4860                           ;ff.c: 2081: ns = dp->fn[11];
  4861  00383A  0100               	movlb	0	; () banked
  4862  00383C  EE20 F014          	lfsr	2,20
  4863  003840  51E2               	movf	follow_path@dp& (0+255),w,b
  4864  003842  26D9               	addwf	fsr2l,f,c
  4865  003844  51E3               	movf	(follow_path@dp+1)& (0+255),w,b
  4866  003846  22DA               	addwfc	fsr2h,f,c
  4867  003848  EE10 F00B          	lfsr	1,11
  4868  00384C  50DE               	movf	postinc2,w,c
  4869  00384E  26E1               	addwf	fsr1l,f,c
  4870  003850  50DD               	movf	postdec2,w,c
  4871  003852  22E2               	addwfc	fsr1h,f,c
  4872  003854  50E7               	movf	indf1,w,c
  4873  003856  0101               	movlb	1	; () banked
  4874  003858  6FD1               	movwf	follow_path@ns& (0+255),b
  4875                           
  4876                           ; BSR set to: 1
  4877                           ;ff.c: 2082: if (res != FR_OK) {
  4878  00385A  51D2               	movf	follow_path@res& (0+255),w,b
  4879  00385C  B4D8               	btfsc	status,2,c
  4880  00385E  D008               	goto	l1133
  4881                           
  4882                           ; BSR set to: 1
  4883                           ;ff.c: 2083: if (res == FR_NO_FILE) {
  4884  003860  0E04               	movlw	4
  4885  003862  19D2               	xorwf	follow_path@res& (0+255),w,b
  4886  003864  B4D8               	btfsc	status,2,c
  4887                           
  4888                           ; BSR set to: 1
  4889                           ;ff.c: 2089: if (!(ns & 0x04)) res = FR_NO_PATH;
  4890                           
  4891                           ;ff.c: 2088: } else {
  4892                           
  4893                           ; BSR set to: 1
  4894                           ;ff.c: 2087: res = FR_OK;
  4895                           
  4896                           ; BSR set to: 1
  4897                           
  4898                           ; BSR set to: 1
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;ff.c: 2086: if (!(ns & 0x04)) continue;
  4902                           
  4903                           ; BSR set to: 1
  4904                           ;ff.c: 2085: dp->sclust = 0; dp->dir = 0;
  4905                           
  4906                           ; BSR set to: 1
  4907                           
  4908                           ; BSR set to: 1
  4909                           ;ff.c: 2084: if (0 && (ns & 0x20)) {
  4910  003866  B5D1               	btfsc	follow_path@ns& (0+255),2,b
  4911  003868  D039               	goto	l1132
  4912  00386A  D018               	goto	u14620
  4913  00386C                     L5:
  4914  00386C  6FD2               	movwf	follow_path@res& (0+255),b
  4915                           
  4916                           ; BSR set to: 1
  4917                           ;ff.c: 2090: }
  4918                           ;ff.c: 2091: }
  4919                           ;ff.c: 2092: break;
  4920                           
  4921                           ; BSR set to: 1
  4922                           
  4923                           ; BSR set to: 1
  4924  00386E  D036               	goto	l1132
  4925  003870                     l1133:
  4926                           
  4927                           ; BSR set to: 1
  4928                           ;ff.c: 2093: }
  4929                           ;ff.c: 2094: if (ns & 0x04) break;
  4930  003870  B5D1               	btfsc	follow_path@ns& (0+255),2,b
  4931  003872  D034               	goto	l1132
  4932                           
  4933                           ; BSR set to: 1
  4934                           ;ff.c: 2095: dir = dp->dir;
  4935                           
  4936                           ; BSR set to: 1
  4937                           
  4938                           ; BSR set to: 1
  4939  003874  0100               	movlb	0	; () banked
  4940  003876  EE20 F012          	lfsr	2,18
  4941  00387A  51E2               	movf	follow_path@dp& (0+255),w,b
  4942  00387C  26D9               	addwf	fsr2l,f,c
  4943  00387E  51E3               	movf	(follow_path@dp+1)& (0+255),w,b
  4944  003880  22DA               	addwfc	fsr2h,f,c
  4945  003882  CFDE F1CF          	movff	postinc2,follow_path@dir
  4946  003886  CFDD F1D0          	movff	postdec2,follow_path@dir+1
  4947                           
  4948                           ;ff.c: 2096: if (!(dir[11] & 0x10)) {
  4949  00388A  0101               	movlb	1	; () banked
  4950  00388C  EE20 F00B          	lfsr	2,11
  4951  003890  51CF               	movf	follow_path@dir& (0+255),w,b
  4952  003892  26D9               	addwf	fsr2l,f,c
  4953  003894  51D0               	movf	(follow_path@dir+1)& (0+255),w,b
  4954  003896  22DA               	addwfc	fsr2h,f,c
  4955  003898  B8DF               	btfsc	indf2,4,c
  4956  00389A  D002               	goto	l1141
  4957  00389C                     u14620:
  4958                           
  4959                           ; BSR set to: 1
  4960                           ;ff.c: 2097: res = FR_NO_PATH; break;
  4961  00389C  0E05               	movlw	5
  4962  00389E  D7E6               	goto	L5
  4963  0038A0                     l1141:
  4964                           
  4965                           ; BSR set to: 1
  4966                           ;ff.c: 2098: }
  4967                           ;ff.c: 2099: dp->sclust = ld_clust(dp->fs, dir);
  4968                           
  4969                           ; BSR set to: 1
  4970  0038A0  C0E2  FFD9         	movff	follow_path@dp,fsr2l
  4971  0038A4  C0E3  FFDA         	movff	follow_path@dp+1,fsr2h
  4972  0038A8  CFDE F01A          	movff	postinc2,ld_clust@fs
  4973  0038AC  CFDD F01B          	movff	postdec2,ld_clust@fs+1
  4974  0038B0  C1CF  F01C         	movff	follow_path@dir,ld_clust@dir
  4975  0038B4  C1D0  F01D         	movff	follow_path@dir+1,ld_clust@dir+1
  4976  0038B8  ECD5  F026         	call	_ld_clust	;wreg free
  4977  0038BC  0100               	movlb	0	; () banked
  4978  0038BE  EE20 F006          	lfsr	2,6
  4979  0038C2  51E2               	movf	follow_path@dp& (0+255),w,b
  4980  0038C4  26D9               	addwf	fsr2l,f,c
  4981  0038C6  51E3               	movf	(follow_path@dp+1)& (0+255),w,b
  4982  0038C8  22DA               	addwfc	fsr2h,f,c
  4983  0038CA  C01A  FFDE         	movff	?_ld_clust,postinc2
  4984  0038CE  C01B  FFDE         	movff	?_ld_clust+1,postinc2
  4985  0038D2  C01C  FFDE         	movff	?_ld_clust+2,postinc2
  4986  0038D6  C01D  FFDE         	movff	?_ld_clust+3,postinc2
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;ff.c: 2100: }
  4990  0038DA  D798               	goto	l1128
  4991  0038DC                     l1132:
  4992                           
  4993                           ;ff.c: 2101: }
  4994                           ;ff.c: 2103: return res;
  4995                           
  4996                           ; BSR set to: 0
  4997                           
  4998                           ; BSR set to: 0
  4999  0038DC  0101               	movlb	1	; () banked
  5000  0038DE  51D2               	movf	follow_path@res& (0+255),w,b
  5001  0038E0  0012               	return	
  5002  0038E2                     __end_of_follow_path:
  5003                           	opt stack 0
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           intcon2	equ	0xFF1
  5012                           intcon3	equ	0xFF0
  5013                           indf0	equ	0xFEF
  5014                           postinc0	equ	0xFEE
  5015                           fsr0h	equ	0xFEA
  5016                           fsr0l	equ	0xFE9
  5017                           wreg	equ	0xFE8
  5018                           indf1	equ	0xFE7
  5019                           postinc1	equ	0xFE6
  5020                           postdec1	equ	0xFE5
  5021                           fsr1h	equ	0xFE2
  5022                           fsr1l	equ	0xFE1
  5023                           indf2	equ	0xFDF
  5024                           postinc2	equ	0xFDE
  5025                           postdec2	equ	0xFDD
  5026                           plusw2	equ	0xFDB
  5027                           fsr2h	equ	0xFDA
  5028                           fsr2l	equ	0xFD9
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function _ld_clust *****************
  5032 ;; Defined at:
  5033 ;;		line 1235 in file "bibliotecas/ff.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  fs              2   25[COMRAM] PTR struct .
  5036 ;;		 -> NULL(0), fs(558), 
  5037 ;;  dir             2   27[COMRAM] PTR const unsigned char 
  5038 ;;		 -> NULL(0), fs(558), 
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;  cl              4   35[COMRAM] unsigned long 
  5041 ;; Return value:  Size  Location     Type
  5042 ;;                  4   25[COMRAM] unsigned long 
  5043 ;; Registers used:
  5044 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5045 ;; Tracked objects:
  5046 ;;		On entry : 0/0
  5047 ;;		On exit  : 0/0
  5048 ;;		Unchanged: 0/0
  5049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5050 ;;      Params:         4       0       0       0       0       0       0       0       0
  5051 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5052 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5053 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5054 ;;Total ram usage:       14 bytes
  5055 ;; Hardware stack levels used:    1
  5056 ;; Hardware stack levels required when called:    2
  5057 ;; This function calls:
  5058 ;;		Nothing
  5059 ;; This function is called by:
  5060 ;;		_follow_path
  5061 ;;		_f_open
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text19
  5066  004DAA                     __ptext19:
  5067                           	opt stack 0
  5068  004DAA                     _ld_clust:
  5069                           	opt stack 25
  5070                           
  5071                           ;ff.c: 1240: DWORD cl;
  5072                           ;ff.c: 1242: cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  5073                           
  5074                           ; BSR set to: 1
  5075                           ;incstack = 0
  5076  004DAA  0E1A               	movlw	26
  5077  004DAC  241C               	addwf	ld_clust@dir,w,c
  5078  004DAE  6ED9               	movwf	fsr2l,c
  5079  004DB0  0E00               	movlw	0
  5080  004DB2  201D               	addwfc	ld_clust@dir+1,w,c
  5081  004DB4  6EDA               	movwf	fsr2h,c
  5082  004DB6  CFDE F01E          	movff	postinc2,??_ld_clust
  5083  004DBA  CFDD F01F          	movff	postdec2,??_ld_clust+1
  5084  004DBE  C01E  F024         	movff	??_ld_clust,ld_clust@cl
  5085  004DC2  C01F  F025         	movff	??_ld_clust+1,ld_clust@cl+1
  5086  004DC6  6A26               	clrf	ld_clust@cl+2,c
  5087  004DC8  6A27               	clrf	ld_clust@cl+3,c
  5088                           
  5089                           ;ff.c: 1243: if (fs->fs_type == 3)
  5090  004DCA  C01A  FFD9         	movff	ld_clust@fs,fsr2l
  5091  004DCE  C01B  FFDA         	movff	ld_clust@fs+1,fsr2h
  5092  004DD2  0E03               	movlw	3
  5093  004DD4  18DE               	xorwf	postinc2,w,c
  5094  004DD6  A4D8               	btfss	status,2,c
  5095  004DD8  D01E               	goto	l1059
  5096                           
  5097                           ;ff.c: 1244: cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  5098  004DDA  0E14               	movlw	20
  5099  004DDC  241C               	addwf	ld_clust@dir,w,c
  5100  004DDE  6ED9               	movwf	fsr2l,c
  5101  004DE0  0E00               	movlw	0
  5102  004DE2  201D               	addwfc	ld_clust@dir+1,w,c
  5103  004DE4  6EDA               	movwf	fsr2h,c
  5104  004DE6  CFDE F01E          	movff	postinc2,??_ld_clust
  5105  004DEA  CFDD F01F          	movff	postdec2,??_ld_clust+1
  5106  004DEE  501E               	movf	??_ld_clust,w,c
  5107  004DF0  6E20               	movwf	(??_ld_clust+2)& (0+255),c
  5108  004DF2  501F               	movf	??_ld_clust+1,w,c
  5109  004DF4  6E21               	movwf	(??_ld_clust+3)& (0+255),c
  5110  004DF6  6A22               	clrf	(??_ld_clust+4)& (0+255),c
  5111  004DF8  6A23               	clrf	(??_ld_clust+5)& (0+255),c
  5112  004DFA  C021  F023         	movff	??_ld_clust+3,??_ld_clust+5
  5113  004DFE  C020  F022         	movff	??_ld_clust+2,??_ld_clust+4
  5114  004E02  6A21               	clrf	??_ld_clust+3,c
  5115  004E04  6A20               	clrf	??_ld_clust+2,c
  5116  004E06  5020               	movf	??_ld_clust+2,w,c
  5117  004E08  1224               	iorwf	ld_clust@cl,f,c
  5118  004E0A  5021               	movf	??_ld_clust+3,w,c
  5119  004E0C  1225               	iorwf	ld_clust@cl+1,f,c
  5120  004E0E  5022               	movf	??_ld_clust+4,w,c
  5121  004E10  1226               	iorwf	ld_clust@cl+2,f,c
  5122  004E12  5023               	movf	??_ld_clust+5,w,c
  5123  004E14  1227               	iorwf	ld_clust@cl+3,f,c
  5124  004E16                     l1059:
  5125                           
  5126                           ;ff.c: 1246: return cl;
  5127  004E16  C024  F01A         	movff	ld_clust@cl,?_ld_clust
  5128  004E1A  C025  F01B         	movff	ld_clust@cl+1,?_ld_clust+1
  5129  004E1E  C026  F01C         	movff	ld_clust@cl+2,?_ld_clust+2
  5130  004E22  C027  F01D         	movff	ld_clust@cl+3,?_ld_clust+3
  5131  004E26  0012               	return	
  5132  004E28                     __end_of_ld_clust:
  5133                           	opt stack 0
  5134                           tblptru	equ	0xFF8
  5135                           tblptrh	equ	0xFF7
  5136                           tblptrl	equ	0xFF6
  5137                           tablat	equ	0xFF5
  5138                           prodh	equ	0xFF4
  5139                           prodl	equ	0xFF3
  5140                           intcon	equ	0xFF2
  5141                           intcon2	equ	0xFF1
  5142                           intcon3	equ	0xFF0
  5143                           indf0	equ	0xFEF
  5144                           postinc0	equ	0xFEE
  5145                           fsr0h	equ	0xFEA
  5146                           fsr0l	equ	0xFE9
  5147                           wreg	equ	0xFE8
  5148                           indf1	equ	0xFE7
  5149                           postinc1	equ	0xFE6
  5150                           postdec1	equ	0xFE5
  5151                           fsr1h	equ	0xFE2
  5152                           fsr1l	equ	0xFE1
  5153                           indf2	equ	0xFDF
  5154                           postinc2	equ	0xFDE
  5155                           postdec2	equ	0xFDD
  5156                           plusw2	equ	0xFDB
  5157                           fsr2h	equ	0xFDA
  5158                           fsr2l	equ	0xFD9
  5159                           status	equ	0xFD8
  5160                           
  5161 ;; *************** function _dir_find *****************
  5162 ;; Defined at:
  5163 ;;		line 1458 in file "bibliotecas/ff.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;  dp              2  124[BANK0 ] PTR struct .
  5166 ;;		 -> f_open@dj(22), 
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;  dir             2  127[BANK0 ] PTR unsigned char 
  5169 ;;		 -> NULL(0), fs(558), 
  5170 ;;  res             1  129[BANK0 ] enum E75
  5171 ;;  c               1  126[BANK0 ] unsigned char 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  1    wreg      enum E75
  5174 ;; Registers used:
  5175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5181 ;;      Params:         0       2       0       0       0       0       0       0       0
  5182 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5183 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5184 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5185 ;;Total ram usage:        6 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:   12
  5188 ;; This function calls:
  5189 ;;		_dir_next
  5190 ;;		_dir_sdi
  5191 ;;		_mem_cmp
  5192 ;;		_move_window
  5193 ;; This function is called by:
  5194 ;;		_follow_path
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           	psect	text20
  5199  00437A                     __ptext20:
  5200                           	opt stack 0
  5201  00437A                     _dir_find:
  5202                           	opt stack 14
  5203                           
  5204                           ;ff.c: 1462: FRESULT res;
  5205                           ;ff.c: 1463: BYTE c, *dir;
  5206                           ;ff.c: 1468: res = dir_sdi(dp, 0);
  5207                           
  5208                           ;incstack = 0
  5209  00437A  C0DC  F0B1         	movff	dir_find@dp,dir_sdi@dp
  5210  00437E  C0DD  F0B2         	movff	dir_find@dp+1,dir_sdi@dp+1
  5211  004382  0E00               	movlw	0
  5212  004384  0100               	movlb	0	; () banked
  5213  004386  6FB4               	movwf	(dir_sdi@idx+1)& (0+255),b
  5214  004388  0E00               	movlw	0
  5215  00438A  6FB3               	movwf	dir_sdi@idx& (0+255),b
  5216  00438C  EC5B  F019         	call	_dir_sdi	;wreg free
  5217  004390  0100               	movlb	0	; () banked
  5218  004392  6FE1               	movwf	dir_find@res& (0+255),b
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;ff.c: 1469: if (res != FR_OK) return res;
  5222  004394  51E1               	movf	dir_find@res& (0+255),w,b
  5223  004396  B4D8               	btfsc	status,2,c
  5224  004398  D002               	goto	l1066
  5225                           
  5226                           ; BSR set to: 0
  5227  00439A  51E1               	movf	dir_find@res& (0+255),w,b
  5228                           
  5229                           ; BSR set to: 0
  5230  00439C  0012               	return	
  5231  00439E                     l1066:
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;ff.c: 1475: res = move_window(dp->fs, dp->sect);
  5235                           
  5236                           ; BSR set to: 0
  5237                           
  5238                           ;ff.c: 1474: do {
  5239                           
  5240                           ; BSR set to: 0
  5241  00439E  C0DC  FFD9         	movff	dir_find@dp,fsr2l
  5242  0043A2  C0DD  FFDA         	movff	dir_find@dp+1,fsr2h
  5243  0043A6  CFDE F08C          	movff	postinc2,move_window@fs
  5244  0043AA  CFDD F08D          	movff	postdec2,move_window@fs+1
  5245  0043AE  EE20 F00E          	lfsr	2,14
  5246  0043B2  51DC               	movf	dir_find@dp& (0+255),w,b
  5247  0043B4  26D9               	addwf	fsr2l,f,c
  5248  0043B6  51DD               	movf	(dir_find@dp+1)& (0+255),w,b
  5249  0043B8  22DA               	addwfc	fsr2h,f,c
  5250  0043BA  CFDE F08E          	movff	postinc2,move_window@sector
  5251  0043BE  CFDE F08F          	movff	postinc2,move_window@sector+1
  5252  0043C2  CFDE F090          	movff	postinc2,move_window@sector+2
  5253  0043C6  CFDE F091          	movff	postinc2,move_window@sector+3
  5254  0043CA  ECCA  F024         	call	_move_window	;wreg free
  5255  0043CE  0100               	movlb	0	; () banked
  5256  0043D0  6FE1               	movwf	dir_find@res& (0+255),b
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;ff.c: 1476: if (res != FR_OK) break;
  5260  0043D2  51E1               	movf	dir_find@res& (0+255),w,b
  5261  0043D4  A4D8               	btfss	status,2,c
  5262  0043D6  D046               	goto	u13810
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;ff.c: 1477: dir = dp->dir;
  5266                           
  5267                           ; BSR set to: 0
  5268                           
  5269                           ; BSR set to: 0
  5270  0043D8  EE20 F012          	lfsr	2,18
  5271  0043DC  51DC               	movf	dir_find@dp& (0+255),w,b
  5272  0043DE  26D9               	addwf	fsr2l,f,c
  5273  0043E0  51DD               	movf	(dir_find@dp+1)& (0+255),w,b
  5274  0043E2  22DA               	addwfc	fsr2h,f,c
  5275  0043E4  CFDE F0DF          	movff	postinc2,dir_find@dir
  5276  0043E8  CFDD F0E0          	movff	postdec2,dir_find@dir+1
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;ff.c: 1478: c = dir[0];
  5280  0043EC  C0DF  FFD9         	movff	dir_find@dir,fsr2l
  5281  0043F0  C0E0  FFDA         	movff	dir_find@dir+1,fsr2h
  5282  0043F4  50DF               	movf	indf2,w,c
  5283  0043F6  6FDE               	movwf	dir_find@c& (0+255),b
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;ff.c: 1479: if (c == 0) { res = FR_NO_FILE; break; }
  5287  0043F8  51DE               	movf	dir_find@c& (0+255),w,b
  5288  0043FA  A4D8               	btfss	status,2,c
  5289  0043FC  D003               	goto	l1071
  5290                           
  5291                           ; BSR set to: 0
  5292  0043FE  0E04               	movlw	4
  5293  004400  6FE1               	movwf	dir_find@res& (0+255),b
  5294  004402  D030               	goto	u13810
  5295  004404                     l1071:
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;ff.c: 1502: if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  5299                           
  5300                           ; BSR set to: 0
  5301  004404  EE20 F00B          	lfsr	2,11
  5302  004408  51DF               	movf	dir_find@dir& (0+255),w,b
  5303  00440A  26D9               	addwf	fsr2l,f,c
  5304  00440C  51E0               	movf	(dir_find@dir+1)& (0+255),w,b
  5305  00440E  22DA               	addwfc	fsr2h,f,c
  5306  004410  B6DF               	btfsc	indf2,3,c
  5307  004412  D018               	goto	l1072
  5308                           
  5309                           ; BSR set to: 0
  5310  004414  C0DF  F01A         	movff	dir_find@dir,mem_cmp@dst
  5311  004418  C0E0  F01B         	movff	dir_find@dir+1,mem_cmp@dst+1
  5312  00441C  EE20 F014          	lfsr	2,20
  5313  004420  51DC               	movf	dir_find@dp& (0+255),w,b
  5314  004422  26D9               	addwf	fsr2l,f,c
  5315  004424  51DD               	movf	(dir_find@dp+1)& (0+255),w,b
  5316  004426  22DA               	addwfc	fsr2h,f,c
  5317  004428  CFDE F01C          	movff	postinc2,mem_cmp@src
  5318  00442C  CFDD F01D          	movff	postdec2,mem_cmp@src+1
  5319  004430  0E00               	movlw	0
  5320  004432  6E1F               	movwf	mem_cmp@cnt+1,c
  5321  004434  0E0B               	movlw	11
  5322  004436  6E1E               	movwf	mem_cmp@cnt,c
  5323  004438  ECFF  F027         	call	_mem_cmp	;wreg free
  5324  00443C  501A               	movf	?_mem_cmp,w,c
  5325  00443E  101B               	iorwf	?_mem_cmp+1,w,c
  5326  004440  B4D8               	btfsc	status,2,c
  5327  004442  D010               	goto	u13810
  5328  004444                     l1072:
  5329                           
  5330                           ;ff.c: 1505: res = dir_next(dp, 0);
  5331  004444  C0DC  F0C9         	movff	dir_find@dp,dir_next@dp
  5332  004448  C0DD  F0CA         	movff	dir_find@dp+1,dir_next@dp+1
  5333  00444C  0E00               	movlw	0
  5334  00444E  0100               	movlb	0	; () banked
  5335  004450  6FCC               	movwf	(dir_next@stretch+1)& (0+255),b
  5336  004452  0E00               	movlw	0
  5337  004454  6FCB               	movwf	dir_next@stretch& (0+255),b
  5338  004456  ECE2  F00C         	call	_dir_next	;wreg free
  5339  00445A  0100               	movlb	0	; () banked
  5340  00445C  6FE1               	movwf	dir_find@res& (0+255),b
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;ff.c: 1506: } while (res == FR_OK);
  5344  00445E  51E1               	movf	dir_find@res& (0+255),w,b
  5345  004460  B4D8               	btfsc	status,2,c
  5346  004462  D79D               	goto	l1066
  5347  004464                     u13810:
  5348                           
  5349                           ;ff.c: 1508: return res;
  5350                           
  5351                           ; BSR set to: 0
  5352  004464  0100               	movlb	0	; () banked
  5353  004466  51E1               	movf	dir_find@res& (0+255),w,b
  5354  004468  0012               	return	
  5355  00446A                     __end_of_dir_find:
  5356                           	opt stack 0
  5357                           tblptru	equ	0xFF8
  5358                           tblptrh	equ	0xFF7
  5359                           tblptrl	equ	0xFF6
  5360                           tablat	equ	0xFF5
  5361                           prodh	equ	0xFF4
  5362                           prodl	equ	0xFF3
  5363                           intcon	equ	0xFF2
  5364                           intcon2	equ	0xFF1
  5365                           intcon3	equ	0xFF0
  5366                           indf0	equ	0xFEF
  5367                           postinc0	equ	0xFEE
  5368                           fsr0h	equ	0xFEA
  5369                           fsr0l	equ	0xFE9
  5370                           wreg	equ	0xFE8
  5371                           indf1	equ	0xFE7
  5372                           postinc1	equ	0xFE6
  5373                           postdec1	equ	0xFE5
  5374                           fsr1h	equ	0xFE2
  5375                           fsr1l	equ	0xFE1
  5376                           indf2	equ	0xFDF
  5377                           postinc2	equ	0xFDE
  5378                           postdec2	equ	0xFDD
  5379                           plusw2	equ	0xFDB
  5380                           fsr2h	equ	0xFDA
  5381                           fsr2l	equ	0xFD9
  5382                           status	equ	0xFD8
  5383                           
  5384 ;; *************** function _mem_cmp *****************
  5385 ;; Defined at:
  5386 ;;		line 533 in file "bibliotecas/ff.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  dst             2   25[COMRAM] PTR const void 
  5389 ;;		 -> NULL(0), fs(558), 
  5390 ;;  src             2   27[COMRAM] PTR const void 
  5391 ;;		 -> f_open@sfn(12), 
  5392 ;;  cnt             2   29[COMRAM] unsigned int 
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;  r               2   38[COMRAM] int 
  5395 ;;  s               2   36[COMRAM] PTR const unsigned char 
  5396 ;;		 -> f_open@sfn(12), 
  5397 ;;  d               2   34[COMRAM] PTR const unsigned char 
  5398 ;;		 -> NULL(0), fs(558), 
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  2   25[COMRAM] int 
  5401 ;; Registers used:
  5402 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5408 ;;      Params:         6       0       0       0       0       0       0       0       0
  5409 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5410 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5411 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5412 ;;Total ram usage:       15 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:    2
  5415 ;; This function calls:
  5416 ;;		Nothing
  5417 ;; This function is called by:
  5418 ;;		_dir_find
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           	psect	text21
  5423  004FFE                     __ptext21:
  5424                           	opt stack 0
  5425  004FFE                     _mem_cmp:
  5426                           	opt stack 23
  5427                           
  5428                           ;ff.c: 534: const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  5429                           
  5430                           ; BSR set to: 0
  5431                           ;incstack = 0
  5432  004FFE  C01A  F023         	movff	mem_cmp@dst,mem_cmp@d
  5433  005002  C01B  F024         	movff	mem_cmp@dst+1,mem_cmp@d+1
  5434  005006  C01C  F025         	movff	mem_cmp@src,mem_cmp@s
  5435  00500A  C01D  F026         	movff	mem_cmp@src+1,mem_cmp@s+1
  5436                           
  5437                           ;ff.c: 535: int r = 0;
  5438  00500E  0E00               	movlw	0
  5439  005010  6E28               	movwf	mem_cmp@r+1,c
  5440  005012  0E00               	movlw	0
  5441  005014  6E27               	movwf	mem_cmp@r,c
  5442  005016  061E               	decf	mem_cmp@cnt,f,c
  5443  005018  A0D8               	btfss	status,0,c
  5444  00501A  061F               	decf	mem_cmp@cnt+1,f,c
  5445  00501C  281E               	incf	mem_cmp@cnt,w,c
  5446  00501E  E103               	bnz	u13250
  5447  005020  281F               	incf	mem_cmp@cnt+1,w,c
  5448  005022  B4D8               	btfsc	status,2,c
  5449  005024  D01F               	goto	u13260
  5450  005026                     u13250:
  5451  005026  C025  FFD9         	movff	mem_cmp@s,fsr2l
  5452  00502A  C026  FFDA         	movff	mem_cmp@s+1,fsr2h
  5453  00502E  4A25               	infsnz	mem_cmp@s,f,c
  5454  005030  2A26               	incf	mem_cmp@s+1,f,c
  5455  005032  50DF               	movf	indf2,w,c
  5456  005034  6E20               	movwf	??_mem_cmp& (0+255),c
  5457  005036  6A21               	clrf	(??_mem_cmp+1)& (0+255),c
  5458  005038  1E20               	comf	??_mem_cmp,f,c
  5459  00503A  1E21               	comf	??_mem_cmp+1,f,c
  5460  00503C  4A20               	infsnz	??_mem_cmp,f,c
  5461  00503E  2A21               	incf	??_mem_cmp+1,f,c
  5462  005040  C023  FFD9         	movff	mem_cmp@d,fsr2l
  5463  005044  C024  FFDA         	movff	mem_cmp@d+1,fsr2h
  5464  005048  4A23               	infsnz	mem_cmp@d,f,c
  5465  00504A  2A24               	incf	mem_cmp@d+1,f,c
  5466  00504C  50DF               	movf	indf2,w,c
  5467  00504E  6E22               	movwf	(??_mem_cmp+2)& (0+255),c
  5468  005050  5022               	movf	??_mem_cmp+2,w,c
  5469  005052  2420               	addwf	??_mem_cmp,w,c
  5470  005054  6E27               	movwf	mem_cmp@r,c
  5471  005056  0E00               	movlw	0
  5472  005058  2021               	addwfc	??_mem_cmp+1,w,c
  5473  00505A  6E28               	movwf	mem_cmp@r+1,c
  5474  00505C  5027               	movf	mem_cmp@r,w,c
  5475  00505E  1028               	iorwf	mem_cmp@r+1,w,c
  5476  005060  B4D8               	btfsc	status,2,c
  5477  005062  D7D9               	goto	l876
  5478  005064                     u13260:
  5479                           
  5480                           ;ff.c: 538: return r;
  5481  005064  C027  F01A         	movff	mem_cmp@r,?_mem_cmp
  5482  005068  C028  F01B         	movff	mem_cmp@r+1,?_mem_cmp+1
  5483  00506C  0012               	return		;funcret
  5484  00506E                     __end_of_mem_cmp:
  5485                           	opt stack 0
  5486                           tblptru	equ	0xFF8
  5487                           tblptrh	equ	0xFF7
  5488                           tblptrl	equ	0xFF6
  5489                           tablat	equ	0xFF5
  5490                           prodh	equ	0xFF4
  5491                           prodl	equ	0xFF3
  5492                           intcon	equ	0xFF2
  5493                           intcon2	equ	0xFF1
  5494                           intcon3	equ	0xFF0
  5495                           indf0	equ	0xFEF
  5496                           postinc0	equ	0xFEE
  5497                           fsr0h	equ	0xFEA
  5498                           fsr0l	equ	0xFE9
  5499                           wreg	equ	0xFE8
  5500                           indf1	equ	0xFE7
  5501                           postinc1	equ	0xFE6
  5502                           postdec1	equ	0xFE5
  5503                           fsr1h	equ	0xFE2
  5504                           fsr1l	equ	0xFE1
  5505                           indf2	equ	0xFDF
  5506                           postinc2	equ	0xFDE
  5507                           postdec2	equ	0xFDD
  5508                           plusw2	equ	0xFDB
  5509                           fsr2h	equ	0xFDA
  5510                           fsr2l	equ	0xFD9
  5511                           status	equ	0xFD8
  5512                           
  5513 ;; *************** function _create_name *****************
  5514 ;; Defined at:
  5515 ;;		line 1843 in file "bibliotecas/ff.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;  dp              2   33[COMRAM] PTR struct .
  5518 ;;		 -> f_open@dj(22), 
  5519 ;;  path            2   35[COMRAM] PTR PTR const unsigned c
  5520 ;;		 -> follow_path@path(2), 
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;  i               2   12[BANK0 ] unsigned int 
  5523 ;;  sfn             2   10[BANK0 ] PTR unsigned char 
  5524 ;;		 -> f_open@sfn(12), 
  5525 ;;  p               2    8[BANK0 ] PTR const unsigned char 
  5526 ;;		 -> filename(15), STR_10(1), 
  5527 ;;  ni              2    5[BANK0 ] unsigned int 
  5528 ;;  si              2    2[BANK0 ] unsigned int 
  5529 ;;  c               1   14[BANK0 ] unsigned char 
  5530 ;;  d               1    7[BANK0 ] unsigned char 
  5531 ;;  b               1    4[BANK0 ] unsigned char 
  5532 ;; Return value:  Size  Location     Type
  5533 ;;                  1    wreg      enum E75
  5534 ;; Registers used:
  5535 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5536 ;; Tracked objects:
  5537 ;;		On entry : 0/0
  5538 ;;		On exit  : 0/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5541 ;;      Params:         4       0       0       0       0       0       0       0       0
  5542 ;;      Locals:         0      15       0       0       0       0       0       0       0
  5543 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5544 ;;      Totals:         8      15       0       0       0       0       0       0       0
  5545 ;;Total ram usage:       23 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; Hardware stack levels required when called:    3
  5548 ;; This function calls:
  5549 ;;		_chk_chr
  5550 ;;		_mem_set
  5551 ;; This function is called by:
  5552 ;;		_follow_path
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           	psect	text22
  5557  002FCC                     __ptext22:
  5558                           	opt stack 0
  5559  002FCC                     _create_name:
  5560                           	opt stack 23
  5561                           
  5562                           ;ff.c: 1969: BYTE b, c, d, *sfn;
  5563                           ;ff.c: 1970: UINT ni, si, i;
  5564                           ;ff.c: 1971: const char *p;
  5565                           ;ff.c: 1974: for (p = *path; *p == '/' || *p == '\\'; p++) ;
  5566                           
  5567                           ;incstack = 0
  5568  002FCC  C024  FFD9         	movff	create_name@path,fsr2l
  5569  002FD0  C025  FFDA         	movff	create_name@path+1,fsr2h
  5570  002FD4  CFDE F068          	movff	postinc2,create_name@p
  5571  002FD8  CFDD F069          	movff	postdec2,create_name@p+1
  5572  002FDC  D003               	goto	l1080
  5573  002FDE  0100               	movlb	0	; () banked
  5574  002FE0  4B68               	infsnz	create_name@p& (0+255),f,b
  5575  002FE2  2B69               	incf	(create_name@p+1)& (0+255),f,b
  5576  002FE4                     l1080:
  5577                           
  5578                           ; BSR set to: 0
  5579  002FE4  C068  FFF6         	movff	create_name@p,tblptrl
  5580  002FE8  C069  FFF7         	movff	create_name@p+1,tblptrh
  5581  002FEC  6AF8               	clrf	tblptru,c
  5582  002FEE  0E07               	movlw	(high __ramtop+-1)
  5583  002FF0  64F7               	cpfsgt	tblptrh,c
  5584  002FF2  D003               	bra	u13827
  5585  002FF4  0008               	tblrd		*
  5586  002FF6  50F5               	movf	tablat,w,c
  5587  002FF8  D005               	bra	u13820
  5588  002FFA                     u13827:
  5589  002FFA  CFF6 FFE9          	movff	tblptrl,fsr0l
  5590  002FFE  CFF7 FFEA          	movff	tblptrh,fsr0h
  5591  003002  50EF               	movf	indf0,w,c
  5592  003004                     u13820:
  5593  003004  0A2F               	xorlw	47
  5594  003006  B4D8               	btfsc	status,2,c
  5595  003008  D7EA               	goto	l1081
  5596  00300A  C068  FFF6         	movff	create_name@p,tblptrl
  5597  00300E  C069  FFF7         	movff	create_name@p+1,tblptrh
  5598  003012  6AF8               	clrf	tblptru,c
  5599  003014  0E07               	movlw	(high __ramtop+-1)
  5600  003016  64F7               	cpfsgt	tblptrh,c
  5601  003018  D003               	bra	u13847
  5602  00301A  0008               	tblrd		*
  5603  00301C  50F5               	movf	tablat,w,c
  5604  00301E  D005               	bra	u13840
  5605  003020                     u13847:
  5606  003020  CFF6 FFE9          	movff	tblptrl,fsr0l
  5607  003024  CFF7 FFEA          	movff	tblptrh,fsr0h
  5608  003028  50EF               	movf	indf0,w,c
  5609  00302A                     u13840:
  5610  00302A  0A5C               	xorlw	92
  5611  00302C  B4D8               	btfsc	status,2,c
  5612  00302E  D7D7               	goto	l1081
  5613                           
  5614                           ;ff.c: 1975: sfn = dp->fn;
  5615  003030  EE20 F014          	lfsr	2,20
  5616  003034  5022               	movf	create_name@dp,w,c
  5617  003036  26D9               	addwf	fsr2l,f,c
  5618  003038  5023               	movf	create_name@dp+1,w,c
  5619  00303A  22DA               	addwfc	fsr2h,f,c
  5620  00303C  CFDE F06A          	movff	postinc2,create_name@sfn
  5621  003040  CFDD F06B          	movff	postdec2,create_name@sfn+1
  5622                           
  5623                           ;ff.c: 1976: mem_set(sfn, ' ', 11);
  5624  003044  C06A  F01A         	movff	create_name@sfn,mem_set@dst
  5625  003048  C06B  F01B         	movff	create_name@sfn+1,mem_set@dst+1
  5626  00304C  0E00               	movlw	0
  5627  00304E  6E1D               	movwf	mem_set@val+1,c
  5628  003050  0E20               	movlw	32
  5629  003052  6E1C               	movwf	mem_set@val,c
  5630  003054  0E00               	movlw	0
  5631  003056  6E1F               	movwf	mem_set@cnt+1,c
  5632  003058  0E0B               	movlw	11
  5633  00305A  6E1E               	movwf	mem_set@cnt,c
  5634  00305C  ECD5  F02A         	call	_mem_set	;wreg free
  5635                           
  5636                           ;ff.c: 1977: si = i = b = 0; ni = 8;
  5637  003060  0E00               	movlw	0
  5638  003062  0100               	movlb	0	; () banked
  5639  003064  6F64               	movwf	create_name@b& (0+255),b
  5640  003066  C064  F06C         	movff	create_name@b,create_name@i
  5641  00306A  6B6D               	clrf	(create_name@i+1)& (0+255),b
  5642  00306C  C06C  F062         	movff	create_name@i,create_name@si
  5643  003070  C06D  F063         	movff	create_name@i+1,create_name@si+1
  5644                           
  5645                           ; BSR set to: 0
  5646  003074  0E00               	movlw	0
  5647  003076  6F66               	movwf	(create_name@ni+1)& (0+255),b
  5648  003078  0E08               	movlw	8
  5649  00307A  6F65               	movwf	create_name@ni& (0+255),b
  5650  00307C                     
  5651                           ; BSR set to: 0
  5652                           ;ff.c: 1992: c = (BYTE)p[si++];
  5653                           
  5654                           ; BSR set to: 0
  5655  00307C  5162               	movf	create_name@si& (0+255),w,b
  5656  00307E  2568               	addwf	create_name@p& (0+255),w,b
  5657  003080  6E26               	movwf	??_create_name& (0+255),c
  5658  003082  5163               	movf	(create_name@si+1)& (0+255),w,b
  5659  003084  2169               	addwfc	(create_name@p+1)& (0+255),w,b
  5660  003086  6E27               	movwf	(??_create_name+1)& (0+255),c
  5661  003088  C026  FFF6         	movff	??_create_name,tblptrl
  5662  00308C  C027  FFF7         	movff	??_create_name+1,tblptrh
  5663  003090  6AF8               	clrf	tblptru,c
  5664  003092  0E07               	movlw	(high __ramtop+-1)
  5665  003094  64F7               	cpfsgt	tblptrh,c
  5666  003096  D003               	bra	u13867
  5667  003098  0008               	tblrd		*
  5668  00309A  50F5               	movf	tablat,w,c
  5669  00309C  D005               	bra	u13860
  5670  00309E                     u13867:
  5671  00309E  CFF6 FFE9          	movff	tblptrl,fsr0l
  5672  0030A2  CFF7 FFEA          	movff	tblptrh,fsr0h
  5673  0030A6  50EF               	movf	indf0,w,c
  5674  0030A8                     u13860:
  5675  0030A8  0100               	movlb	0	; () banked
  5676  0030AA  6F6E               	movwf	create_name@c& (0+255),b
  5677                           
  5678                           ; BSR set to: 0
  5679  0030AC  4B62               	infsnz	create_name@si& (0+255),f,b
  5680  0030AE  2B63               	incf	(create_name@si+1)& (0+255),f,b
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;ff.c: 1993: if (c <= ' ' || c == '/' || c == '\\') break;
  5684  0030B0  0E20               	movlw	32
  5685  0030B2  656E               	cpfsgt	create_name@c& (0+255),b
  5686  0030B4  D0B4               	goto	l1087
  5687                           
  5688                           ; BSR set to: 0
  5689  0030B6  0E2F               	movlw	47
  5690  0030B8  196E               	xorwf	create_name@c& (0+255),w,b
  5691  0030BA  B4D8               	btfsc	status,2,c
  5692  0030BC  D0B0               	goto	l1087
  5693                           
  5694                           ; BSR set to: 0
  5695  0030BE  0E5C               	movlw	92
  5696  0030C0  196E               	xorwf	create_name@c& (0+255),w,b
  5697  0030C2  B4D8               	btfsc	status,2,c
  5698  0030C4  D0AC               	goto	l1087
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;ff.c: 1994: if (c == '.' || i >= ni) {
  5702                           
  5703                           ; BSR set to: 0
  5704                           
  5705                           ; BSR set to: 0
  5706  0030C6  0E2E               	movlw	46
  5707  0030C8  196E               	xorwf	create_name@c& (0+255),w,b
  5708  0030CA  B4D8               	btfsc	status,2,c
  5709  0030CC  D006               	goto	u13910
  5710                           
  5711                           ; BSR set to: 0
  5712  0030CE  5165               	movf	create_name@ni& (0+255),w,b
  5713  0030D0  5D6C               	subwf	create_name@i& (0+255),w,b
  5714  0030D2  5166               	movf	(create_name@ni+1)& (0+255),w,b
  5715  0030D4  596D               	subwfb	(create_name@i+1)& (0+255),w,b
  5716  0030D6  A0D8               	btfss	status,0,c
  5717  0030D8  D018               	goto	l1088
  5718  0030DA                     u13910:
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;ff.c: 1995: if (ni != 8 || c != '.') return FR_INVALID_NAME;
  5722                           
  5723                           ; BSR set to: 0
  5724  0030DA  0E08               	movlw	8
  5725  0030DC  1965               	xorwf	create_name@ni& (0+255),w,b
  5726  0030DE  1166               	iorwf	(create_name@ni+1)& (0+255),w,b
  5727  0030E0  A4D8               	btfss	status,2,c
  5728  0030E2  D004               	goto	u13930
  5729                           
  5730                           ; BSR set to: 0
  5731  0030E4  0E2E               	movlw	46
  5732  0030E6  196E               	xorwf	create_name@c& (0+255),w,b
  5733  0030E8  B4D8               	btfsc	status,2,c
  5734  0030EA  D002               	goto	l1091
  5735  0030EC                     u13930:
  5736                           
  5737                           ; BSR set to: 0
  5738                           
  5739                           ; BSR set to: 0
  5740  0030EC  0E06               	movlw	6
  5741                           
  5742                           ; BSR set to: 0
  5743  0030EE  0012               	return	
  5744  0030F0                     l1091:
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;ff.c: 1996: i = 8; ni = 11;
  5748                           
  5749                           ; BSR set to: 0
  5750  0030F0  0E00               	movlw	0
  5751  0030F2  6F6D               	movwf	(create_name@i+1)& (0+255),b
  5752  0030F4  0E08               	movlw	8
  5753  0030F6  6F6C               	movwf	create_name@i& (0+255),b
  5754  0030F8  0E00               	movlw	0
  5755  0030FA  6F66               	movwf	(create_name@ni+1)& (0+255),b
  5756  0030FC  0E0B               	movlw	11
  5757  0030FE  6F65               	movwf	create_name@ni& (0+255),b
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;ff.c: 1997: b <<= 2; continue;
  5761  003100  90D8               	bcf	status,0,c
  5762  003102  3764               	rlcf	create_name@b& (0+255),f,b
  5763  003104  90D8               	bcf	status,0,c
  5764  003106  3764               	rlcf	create_name@b& (0+255),f,b
  5765  003108  D7B9               	goto	l1083
  5766  00310A                     l1088:
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;ff.c: 1998: }
  5770                           ;ff.c: 1999: if (c >= 0x80) {
  5771                           
  5772                           ; BSR set to: 0
  5773  00310A  0E7F               	movlw	127
  5774  00310C  656E               	cpfsgt	create_name@c& (0+255),b
  5775  00310E  D002               	goto	l1096
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;ff.c: 2000: b |= 3;
  5779  003110  0E03               	movlw	3
  5780  003112  1364               	iorwf	create_name@b& (0+255),f,b
  5781  003114                     l1096:
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;ff.c: 2008: }
  5785                           ;ff.c: 2009: if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (BYT
      +                          E)(c) <= 0xFC))) {
  5786  003114  0E80               	movlw	128
  5787  003116  656E               	cpfsgt	create_name@c& (0+255),b
  5788  003118  D003               	goto	u13960
  5789                           
  5790                           ; BSR set to: 0
  5791  00311A  0E9F               	movlw	159
  5792  00311C  656E               	cpfsgt	create_name@c& (0+255),b
  5793  00311E  D006               	goto	u13980
  5794  003120                     u13960:
  5795                           
  5796                           ; BSR set to: 0
  5797                           
  5798                           ; BSR set to: 0
  5799  003120  0EDF               	movlw	223
  5800  003122  656E               	cpfsgt	create_name@c& (0+255),b
  5801  003124  D050               	goto	l1097
  5802                           
  5803                           ; BSR set to: 0
  5804  003126  0EFD               	movlw	253
  5805  003128  616E               	cpfslt	create_name@c& (0+255),b
  5806  00312A  D04D               	goto	l1097
  5807  00312C                     u13980:
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;ff.c: 2010: d = (BYTE)p[si++];
  5811                           
  5812                           ; BSR set to: 0
  5813  00312C  5162               	movf	create_name@si& (0+255),w,b
  5814  00312E  2568               	addwf	create_name@p& (0+255),w,b
  5815  003130  6E26               	movwf	??_create_name& (0+255),c
  5816  003132  5163               	movf	(create_name@si+1)& (0+255),w,b
  5817  003134  2169               	addwfc	(create_name@p+1)& (0+255),w,b
  5818  003136  6E27               	movwf	(??_create_name+1)& (0+255),c
  5819  003138  C026  FFF6         	movff	??_create_name,tblptrl
  5820  00313C  C027  FFF7         	movff	??_create_name+1,tblptrh
  5821  003140  6AF8               	clrf	tblptru,c
  5822  003142  0E07               	movlw	(high __ramtop+-1)
  5823  003144  64F7               	cpfsgt	tblptrh,c
  5824  003146  D003               	bra	u13997
  5825  003148  0008               	tblrd		*
  5826  00314A  50F5               	movf	tablat,w,c
  5827  00314C  D005               	bra	u13990
  5828  00314E                     u13997:
  5829  00314E  CFF6 FFE9          	movff	tblptrl,fsr0l
  5830  003152  CFF7 FFEA          	movff	tblptrh,fsr0h
  5831  003156  50EF               	movf	indf0,w,c
  5832  003158                     u13990:
  5833  003158  0100               	movlb	0	; () banked
  5834  00315A  6F67               	movwf	create_name@d& (0+255),b
  5835                           
  5836                           ; BSR set to: 0
  5837  00315C  4B62               	infsnz	create_name@si& (0+255),f,b
  5838  00315E  2B63               	incf	(create_name@si+1)& (0+255),f,b
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;ff.c: 2011: if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && (BY
      +                          TE)(d) <= 0xFC)) || i >= ni - 1)
  5842  003160  0E3F               	movlw	63
  5843  003162  6567               	cpfsgt	create_name@d& (0+255),b
  5844  003164  D003               	goto	u14010
  5845                           
  5846                           ; BSR set to: 0
  5847  003166  0E7E               	movlw	126
  5848  003168  6567               	cpfsgt	create_name@d& (0+255),b
  5849  00316A  D006               	goto	u14030
  5850  00316C                     u14010:
  5851                           
  5852                           ; BSR set to: 0
  5853                           
  5854                           ; BSR set to: 0
  5855  00316C  0E7F               	movlw	127
  5856  00316E  6567               	cpfsgt	create_name@d& (0+255),b
  5857  003170  D015               	goto	u14040
  5858                           
  5859                           ; BSR set to: 0
  5860  003172  0EFD               	movlw	253
  5861  003174  6167               	cpfslt	create_name@d& (0+255),b
  5862  003176  D012               	goto	u14040
  5863  003178                     u14030:
  5864                           
  5865                           ; BSR set to: 0
  5866                           
  5867                           ; BSR set to: 0
  5868  003178  0EFF               	movlw	255
  5869  00317A  6E26               	movwf	??_create_name& (0+255),c
  5870  00317C  0EFF               	movlw	255
  5871  00317E  6E27               	movwf	(??_create_name+1)& (0+255),c
  5872  003180  C065  F028         	movff	create_name@ni,??_create_name+2
  5873  003184  C066  F029         	movff	create_name@ni+1,??_create_name+3
  5874  003188  5026               	movf	??_create_name,w,c
  5875  00318A  2628               	addwf	??_create_name+2,f,c
  5876  00318C  5027               	movf	??_create_name+1,w,c
  5877  00318E  2229               	addwfc	??_create_name+3,f,c
  5878  003190  5028               	movf	??_create_name+2,w,c
  5879  003192  5D6C               	subwf	create_name@i& (0+255),w,b
  5880  003194  5029               	movf	??_create_name+3,w,c
  5881  003196  596D               	subwfb	(create_name@i+1)& (0+255),w,b
  5882  003198  A0D8               	btfss	status,0,c
  5883  00319A  D002               	goto	l1102
  5884  00319C                     u14040:
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;ff.c: 2012: return FR_INVALID_NAME;
  5888                           
  5889                           ; BSR set to: 0
  5890  00319C  0E06               	movlw	6
  5891                           
  5892                           ; BSR set to: 0
  5893  00319E  0012               	return	
  5894  0031A0                     l1102:
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;ff.c: 2013: sfn[i++] = c;
  5898                           
  5899                           ; BSR set to: 0
  5900  0031A0  516C               	movf	create_name@i& (0+255),w,b
  5901  0031A2  256A               	addwf	create_name@sfn& (0+255),w,b
  5902  0031A4  6ED9               	movwf	fsr2l,c
  5903  0031A6  516D               	movf	(create_name@i+1)& (0+255),w,b
  5904  0031A8  216B               	addwfc	(create_name@sfn+1)& (0+255),w,b
  5905  0031AA  6EDA               	movwf	fsr2h,c
  5906  0031AC  C06E  FFDF         	movff	create_name@c,indf2
  5907                           
  5908                           ; BSR set to: 0
  5909  0031B0  4B6C               	infsnz	create_name@i& (0+255),f,b
  5910  0031B2  2B6D               	incf	(create_name@i+1)& (0+255),f,b
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;ff.c: 2014: sfn[i++] = d;
  5914  0031B4  516C               	movf	create_name@i& (0+255),w,b
  5915  0031B6  256A               	addwf	create_name@sfn& (0+255),w,b
  5916  0031B8  6ED9               	movwf	fsr2l,c
  5917  0031BA  516D               	movf	(create_name@i+1)& (0+255),w,b
  5918  0031BC  216B               	addwfc	(create_name@sfn+1)& (0+255),w,b
  5919  0031BE  6EDA               	movwf	fsr2h,c
  5920  0031C0  C067  FFDF         	movff	create_name@d,indf2
  5921  0031C4  D029               	goto	l11121
  5922  0031C6                     l1097:
  5923                           
  5924                           ; BSR set to: 0
  5925                           ;ff.c: 2016: if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  5926                           
  5927                           ; BSR set to: 0
  5928  0031C6  0E18               	movlw	low STR_20
  5929  0031C8  6E1A               	movwf	chk_chr@str,c
  5930  0031CA  0E62               	movlw	high STR_20
  5931  0031CC  6E1B               	movwf	chk_chr@str+1,c
  5932  0031CE  C06E  F01C         	movff	create_name@c,chk_chr@chr
  5933  0031D2  6A1D               	clrf	chk_chr@chr+1,c
  5934  0031D4  EC80  F029         	call	_chk_chr	;wreg free
  5935  0031D8  501A               	movf	?_chk_chr,w,c
  5936  0031DA  101B               	iorwf	?_chk_chr+1,w,c
  5937  0031DC  B4D8               	btfsc	status,2,c
  5938  0031DE  D002               	goto	l1110
  5939                           
  5940                           ;ff.c: 2017: return FR_INVALID_NAME;
  5941  0031E0  0E06               	movlw	6
  5942  0031E2  0012               	return	
  5943  0031E4                     l1110:
  5944                           
  5945                           ;ff.c: 2018: if ((((c)>='A')&&((c)<='Z'))) {
  5946  0031E4  0E40               	movlw	64
  5947  0031E6  0100               	movlb	0	; () banked
  5948  0031E8  656E               	cpfsgt	create_name@c& (0+255),b
  5949  0031EA  D005               	goto	l1111
  5950                           
  5951                           ; BSR set to: 0
  5952  0031EC  0E5B               	movlw	91
  5953  0031EE  616E               	cpfslt	create_name@c& (0+255),b
  5954  0031F0  D002               	goto	l1111
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;ff.c: 2019: b |= 2;
  5958  0031F2  8364               	bsf	create_name@b& (0+255),1,b
  5959                           
  5960                           ;ff.c: 2020: } else {
  5961  0031F4  D009               	goto	l1113
  5962  0031F6                     l1111:
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;ff.c: 2021: if ((((c)>='a')&&((c)<='z'))) {
  5966                           
  5967                           ; BSR set to: 0
  5968  0031F6  0E60               	movlw	96
  5969  0031F8  656E               	cpfsgt	create_name@c& (0+255),b
  5970  0031FA  D006               	goto	l1113
  5971                           
  5972                           ; BSR set to: 0
  5973  0031FC  0E7B               	movlw	123
  5974  0031FE  616E               	cpfslt	create_name@c& (0+255),b
  5975  003200  D003               	goto	l1113
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;ff.c: 2022: b |= 1; c -= 0x20;
  5979  003202  8164               	bsf	create_name@b& (0+255),0,b
  5980                           
  5981                           ; BSR set to: 0
  5982  003204  0E20               	movlw	32
  5983  003206  5F6E               	subwf	create_name@c& (0+255),f,b
  5984  003208                     l1113:
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;ff.c: 2023: }
  5988                           ;ff.c: 2024: }
  5989                           ;ff.c: 2025: sfn[i++] = c;
  5990                           
  5991                           ; BSR set to: 0
  5992                           
  5993                           ; BSR set to: 0
  5994  003208  516C               	movf	create_name@i& (0+255),w,b
  5995  00320A  256A               	addwf	create_name@sfn& (0+255),w,b
  5996  00320C  6ED9               	movwf	fsr2l,c
  5997  00320E  516D               	movf	(create_name@i+1)& (0+255),w,b
  5998  003210  216B               	addwfc	(create_name@sfn+1)& (0+255),w,b
  5999  003212  6EDA               	movwf	fsr2h,c
  6000  003214  C06E  FFDF         	movff	create_name@c,indf2
  6001  003218                     l11121:
  6002                           
  6003                           ; BSR set to: 0
  6004  003218  4B6C               	infsnz	create_name@i& (0+255),f,b
  6005  00321A  2B6D               	incf	(create_name@i+1)& (0+255),f,b
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;ff.c: 2026: }
  6009                           ;ff.c: 2027: }
  6010                           
  6011                           ; BSR set to: 0
  6012  00321C  D72F               	goto	l1083
  6013  00321E                     l1087:
  6014                           
  6015                           ; BSR set to: 0
  6016                           ;ff.c: 2028: *path = &p[si];
  6017                           
  6018                           ; BSR set to: 0
  6019  00321E  5162               	movf	create_name@si& (0+255),w,b
  6020  003220  2568               	addwf	create_name@p& (0+255),w,b
  6021  003222  6E26               	movwf	??_create_name& (0+255),c
  6022  003224  5163               	movf	(create_name@si+1)& (0+255),w,b
  6023  003226  2169               	addwfc	(create_name@p+1)& (0+255),w,b
  6024  003228  6E27               	movwf	(??_create_name+1)& (0+255),c
  6025  00322A  C024  FFD9         	movff	create_name@path,fsr2l
  6026  00322E  C025  FFDA         	movff	create_name@path+1,fsr2h
  6027  003232  C026  FFDE         	movff	??_create_name,postinc2
  6028  003236  C027  FFDD         	movff	??_create_name+1,postdec2
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;ff.c: 2029: c = (c <= ' ') ? 0x04 : 0;
  6032  00323A  0E20               	movlw	32
  6033  00323C  656E               	cpfsgt	create_name@c& (0+255),b
  6034  00323E  D004               	goto	l1115
  6035                           
  6036                           ; BSR set to: 0
  6037  003240  0E00               	movlw	0
  6038  003242  6F61               	movwf	(_create_name$2268+1)& (0+255),b
  6039  003244  0E00               	movlw	0
  6040  003246  D003               	goto	L6
  6041  003248                     l1115:
  6042                           
  6043                           ; BSR set to: 0
  6044                           
  6045                           ; BSR set to: 0
  6046  003248  0E00               	movlw	0
  6047  00324A  6F61               	movwf	(_create_name$2268+1)& (0+255),b
  6048  00324C  0E04               	movlw	4
  6049  00324E                     L6:
  6050  00324E  6F60               	movwf	_create_name$2268& (0+255),b
  6051                           
  6052                           ; BSR set to: 0
  6053                           
  6054                           ; BSR set to: 0
  6055  003250  C060  F06E         	movff	_create_name$2268,create_name@c
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;ff.c: 2031: if (!i) return FR_INVALID_NAME;
  6059  003254  516C               	movf	create_name@i& (0+255),w,b
  6060  003256  116D               	iorwf	(create_name@i+1)& (0+255),w,b
  6061  003258  A4D8               	btfss	status,2,c
  6062  00325A  D002               	goto	l1118
  6063                           
  6064                           ; BSR set to: 0
  6065  00325C  0E06               	movlw	6
  6066                           
  6067                           ; BSR set to: 0
  6068  00325E  0012               	return	
  6069  003260                     l1118:
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;ff.c: 2032: if (sfn[0] == 0xE5) sfn[0] = 0x05;
  6073                           
  6074                           ; BSR set to: 0
  6075  003260  C06A  FFD9         	movff	create_name@sfn,fsr2l
  6076  003264  C06B  FFDA         	movff	create_name@sfn+1,fsr2h
  6077  003268  0EE5               	movlw	229
  6078  00326A  18DE               	xorwf	postinc2,w,c
  6079  00326C  A4D8               	btfss	status,2,c
  6080  00326E  D006               	goto	l1119
  6081                           
  6082                           ; BSR set to: 0
  6083  003270  C06A  FFD9         	movff	create_name@sfn,fsr2l
  6084  003274  C06B  FFDA         	movff	create_name@sfn+1,fsr2h
  6085  003278  0E05               	movlw	5
  6086  00327A  6EDF               	movwf	indf2,c
  6087  00327C                     l1119:
  6088                           
  6089                           ; BSR set to: 0
  6090                           ;ff.c: 2034: if (ni == 8) b <<= 2;
  6091                           
  6092                           ; BSR set to: 0
  6093  00327C  0E08               	movlw	8
  6094  00327E  1965               	xorwf	create_name@ni& (0+255),w,b
  6095  003280  1166               	iorwf	(create_name@ni+1)& (0+255),w,b
  6096  003282  A4D8               	btfss	status,2,c
  6097  003284  D004               	goto	l1120
  6098                           
  6099                           ; BSR set to: 0
  6100  003286  90D8               	bcf	status,0,c
  6101  003288  3764               	rlcf	create_name@b& (0+255),f,b
  6102  00328A  90D8               	bcf	status,0,c
  6103  00328C  3764               	rlcf	create_name@b& (0+255),f,b
  6104  00328E                     l1120:
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;ff.c: 2035: if ((b & 0x03) == 0x01) c |= 0x10;
  6108  00328E  5164               	movf	create_name@b& (0+255),w,b
  6109  003290  0B03               	andlw	3
  6110  003292  06E8               	decf	wreg,f,c
  6111  003294  B4D8               	btfsc	status,2,c
  6112                           
  6113                           ; BSR set to: 0
  6114  003296  896E               	bsf	create_name@c& (0+255),4,b
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;ff.c: 2036: if ((b & 0x0C) == 0x04) c |= 0x08;
  6118                           
  6119                           ; BSR set to: 0
  6120  003298  5164               	movf	create_name@b& (0+255),w,b
  6121  00329A  0B0C               	andlw	12
  6122  00329C  0A04               	xorlw	4
  6123  00329E  B4D8               	btfsc	status,2,c
  6124                           
  6125                           ; BSR set to: 0
  6126  0032A0  876E               	bsf	create_name@c& (0+255),3,b
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;ff.c: 2038: sfn[11] = c;
  6130                           
  6131                           ; BSR set to: 0
  6132  0032A2  EE20 F00B          	lfsr	2,11
  6133  0032A6  516A               	movf	create_name@sfn& (0+255),w,b
  6134  0032A8  26D9               	addwf	fsr2l,f,c
  6135  0032AA  516B               	movf	(create_name@sfn+1)& (0+255),w,b
  6136  0032AC  22DA               	addwfc	fsr2h,f,c
  6137  0032AE  C06E  FFDF         	movff	create_name@c,indf2
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;ff.c: 2040: return FR_OK;
  6141  0032B2  0E00               	movlw	0
  6142  0032B4  0012               	return	
  6143  0032B6                     __end_of_create_name:
  6144                           	opt stack 0
  6145                           tblptru	equ	0xFF8
  6146                           tblptrh	equ	0xFF7
  6147                           tblptrl	equ	0xFF6
  6148                           tablat	equ	0xFF5
  6149                           prodh	equ	0xFF4
  6150                           prodl	equ	0xFF3
  6151                           intcon	equ	0xFF2
  6152                           intcon2	equ	0xFF1
  6153                           intcon3	equ	0xFF0
  6154                           indf0	equ	0xFEF
  6155                           postinc0	equ	0xFEE
  6156                           fsr0h	equ	0xFEA
  6157                           fsr0l	equ	0xFE9
  6158                           wreg	equ	0xFE8
  6159                           indf1	equ	0xFE7
  6160                           postinc1	equ	0xFE6
  6161                           postdec1	equ	0xFE5
  6162                           fsr1h	equ	0xFE2
  6163                           fsr1l	equ	0xFE1
  6164                           indf2	equ	0xFDF
  6165                           postinc2	equ	0xFDE
  6166                           postdec2	equ	0xFDD
  6167                           plusw2	equ	0xFDB
  6168                           fsr2h	equ	0xFDA
  6169                           fsr2l	equ	0xFD9
  6170                           status	equ	0xFD8
  6171                           
  6172 ;; *************** function _chk_chr *****************
  6173 ;; Defined at:
  6174 ;;		line 543 in file "bibliotecas/ff.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;  str             2   25[COMRAM] PTR const unsigned char 
  6177 ;;		 -> STR_20(15), 
  6178 ;;  chr             2   27[COMRAM] int 
  6179 ;; Auto vars:     Size  Location     Type
  6180 ;;		None
  6181 ;; Return value:  Size  Location     Type
  6182 ;;                  2   25[COMRAM] int 
  6183 ;; Registers used:
  6184 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  6185 ;; Tracked objects:
  6186 ;;		On entry : 0/0
  6187 ;;		On exit  : 0/0
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6190 ;;      Params:         4       0       0       0       0       0       0       0       0
  6191 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6192 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6193 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6194 ;;Total ram usage:        6 bytes
  6195 ;; Hardware stack levels used:    1
  6196 ;; Hardware stack levels required when called:    2
  6197 ;; This function calls:
  6198 ;;		Nothing
  6199 ;; This function is called by:
  6200 ;;		_create_name
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           	psect	text23
  6205  005300                     __ptext23:
  6206                           	opt stack 0
  6207  005300                     _chk_chr:
  6208                           	opt stack 23
  6209                           
  6210                           ;ff.c: 544: while (*str && *str != chr) str++;
  6211                           
  6212                           ;incstack = 0
  6213  005300  D002               	goto	l883
  6214  005302                     l10691:
  6215  005302  4A1A               	infsnz	chk_chr@str,f,c
  6216  005304  2A1B               	incf	chk_chr@str+1,f,c
  6217  005306                     l883:
  6218  005306  C01A  FFF6         	movff	chk_chr@str,tblptrl
  6219  00530A  C01B  FFF7         	movff	chk_chr@str+1,tblptrh
  6220  00530E                     	if	0	;tblptru may be non-zero
  6221  00530E                     	endif
  6222  00530E                     	if	0	;tblptru may be non-zero
  6223  00530E                     	endif
  6224  00530E  0008               	tblrd		*
  6225  005310  50F5               	movf	tablat,w,c
  6226  005312  0900               	iorlw	0
  6227  005314  B4D8               	btfsc	status,2,c
  6228  005316  D00F               	goto	u13280
  6229  005318  C01A  FFF6         	movff	chk_chr@str,tblptrl
  6230  00531C  C01B  FFF7         	movff	chk_chr@str+1,tblptrh
  6231  005320                     	if	0	;tblptru may be non-zero
  6232  005320                     	endif
  6233  005320                     	if	0	;tblptru may be non-zero
  6234  005320                     	endif
  6235  005320  0008               	tblrd		*
  6236  005322  50F5               	movf	tablat,w,c
  6237  005324  6E1E               	movwf	??_chk_chr& (0+255),c
  6238  005326  6A1F               	clrf	(??_chk_chr+1)& (0+255),c
  6239  005328  501C               	movf	chk_chr@chr,w,c
  6240  00532A  181E               	xorwf	??_chk_chr,w,c
  6241  00532C  E1EA               	bnz	l10691
  6242  00532E  501D               	movf	chk_chr@chr+1,w,c
  6243  005330  181F               	xorwf	??_chk_chr+1,w,c
  6244  005332  A4D8               	btfss	status,2,c
  6245  005334  D7E6               	goto	l884
  6246  005336                     u13280:
  6247                           
  6248                           ;ff.c: 545: return *str;
  6249  005336  C01A  FFF6         	movff	chk_chr@str,tblptrl
  6250  00533A  C01B  FFF7         	movff	chk_chr@str+1,tblptrh
  6251  00533E                     	if	0	;tblptru may be non-zero
  6252  00533E                     	endif
  6253  00533E                     	if	0	;tblptru may be non-zero
  6254  00533E                     	endif
  6255  00533E  0008               	tblrd		*
  6256  005340  50F5               	movf	tablat,w,c
  6257  005342  6E1A               	movwf	?_chk_chr,c
  6258  005344  6A1B               	clrf	?_chk_chr+1,c
  6259  005346  0012               	return	
  6260  005348                     __end_of_chk_chr:
  6261                           	opt stack 0
  6262                           tblptru	equ	0xFF8
  6263                           tblptrh	equ	0xFF7
  6264                           tblptrl	equ	0xFF6
  6265                           tablat	equ	0xFF5
  6266                           prodh	equ	0xFF4
  6267                           prodl	equ	0xFF3
  6268                           intcon	equ	0xFF2
  6269                           intcon2	equ	0xFF1
  6270                           intcon3	equ	0xFF0
  6271                           indf0	equ	0xFEF
  6272                           postinc0	equ	0xFEE
  6273                           fsr0h	equ	0xFEA
  6274                           fsr0l	equ	0xFE9
  6275                           wreg	equ	0xFE8
  6276                           indf1	equ	0xFE7
  6277                           postinc1	equ	0xFE6
  6278                           postdec1	equ	0xFE5
  6279                           fsr1h	equ	0xFE2
  6280                           fsr1l	equ	0xFE1
  6281                           indf2	equ	0xFDF
  6282                           postinc2	equ	0xFDE
  6283                           postdec2	equ	0xFDD
  6284                           plusw2	equ	0xFDB
  6285                           fsr2h	equ	0xFDA
  6286                           fsr2l	equ	0xFD9
  6287                           status	equ	0xFD8
  6288                           
  6289 ;; *************** function _dir_register *****************
  6290 ;; Defined at:
  6291 ;;		line 1578 in file "bibliotecas/ff.c"
  6292 ;; Parameters:    Size  Location     Type
  6293 ;;  dp              2    0[BANK1 ] PTR struct .
  6294 ;;		 -> f_open@dj(22), 
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;  res             1  134[BANK0 ] enum E75
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  1    wreg      enum E75
  6299 ;; Registers used:
  6300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6306 ;;      Params:         0       0       2       0       0       0       0       0       0
  6307 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6308 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6309 ;;      Totals:         0       1       2       0       0       0       0       0       0
  6310 ;;Total ram usage:        3 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:   13
  6313 ;; This function calls:
  6314 ;;		_dir_alloc
  6315 ;;		_mem_cpy
  6316 ;;		_mem_set
  6317 ;;		_move_window
  6318 ;; This function is called by:
  6319 ;;		_f_open
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322                           
  6323                           	psect	text24
  6324  00446A                     __ptext24:
  6325                           	opt stack 0
  6326  00446A                     _dir_register:
  6327                           	opt stack 14
  6328                           
  6329                           ;ff.c: 1582: FRESULT res;
  6330                           ;ff.c: 1629: res = dir_alloc(dp, 1);
  6331                           
  6332                           ;incstack = 0
  6333  00446A  C1CF  F0DC         	movff	dir_register@dp,dir_alloc@dp
  6334  00446E  C1D0  F0DD         	movff	dir_register@dp+1,dir_alloc@dp+1
  6335  004472  0E00               	movlw	0
  6336  004474  0100               	movlb	0	; () banked
  6337  004476  6FDF               	movwf	(dir_alloc@nent+1)& (0+255),b
  6338  004478  0E01               	movlw	1
  6339  00447A  6FDE               	movwf	dir_alloc@nent& (0+255),b
  6340  00447C  EC44  F021         	call	_dir_alloc	;wreg free
  6341  004480  0100               	movlb	0	; () banked
  6342  004482  6FE6               	movwf	dir_register@res& (0+255),b
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;ff.c: 1632: if (res == FR_OK) {
  6346  004484  51E6               	movf	dir_register@res& (0+255),w,b
  6347  004486  A4D8               	btfss	status,2,c
  6348  004488  D05A               	goto	l1076
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;ff.c: 1633: res = move_window(dp->fs, dp->sect);
  6352  00448A  C1CF  FFD9         	movff	dir_register@dp,fsr2l
  6353  00448E  C1D0  FFDA         	movff	dir_register@dp+1,fsr2h
  6354  004492  CFDE F08C          	movff	postinc2,move_window@fs
  6355  004496  CFDD F08D          	movff	postdec2,move_window@fs+1
  6356  00449A  0101               	movlb	1	; () banked
  6357  00449C  EE20 F00E          	lfsr	2,14
  6358  0044A0  51CF               	movf	dir_register@dp& (0+255),w,b
  6359  0044A2  26D9               	addwf	fsr2l,f,c
  6360  0044A4  51D0               	movf	(dir_register@dp+1)& (0+255),w,b
  6361  0044A6  22DA               	addwfc	fsr2h,f,c
  6362  0044A8  CFDE F08E          	movff	postinc2,move_window@sector
  6363  0044AC  CFDE F08F          	movff	postinc2,move_window@sector+1
  6364  0044B0  CFDE F090          	movff	postinc2,move_window@sector+2
  6365  0044B4  CFDE F091          	movff	postinc2,move_window@sector+3
  6366  0044B8  ECCA  F024         	call	_move_window	;wreg free
  6367  0044BC  0100               	movlb	0	; () banked
  6368  0044BE  6FE6               	movwf	dir_register@res& (0+255),b
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;ff.c: 1634: if (res == FR_OK) {
  6372  0044C0  51E6               	movf	dir_register@res& (0+255),w,b
  6373  0044C2  A4D8               	btfss	status,2,c
  6374  0044C4  D03C               	goto	l1076
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;ff.c: 1635: mem_set(dp->dir, 0, 32);
  6378  0044C6  0101               	movlb	1	; () banked
  6379  0044C8  EE20 F012          	lfsr	2,18
  6380  0044CC  51CF               	movf	dir_register@dp& (0+255),w,b
  6381  0044CE  26D9               	addwf	fsr2l,f,c
  6382  0044D0  51D0               	movf	(dir_register@dp+1)& (0+255),w,b
  6383  0044D2  22DA               	addwfc	fsr2h,f,c
  6384  0044D4  CFDE F01A          	movff	postinc2,mem_set@dst
  6385  0044D8  CFDD F01B          	movff	postdec2,mem_set@dst+1
  6386  0044DC  0E00               	movlw	0
  6387  0044DE  6E1D               	movwf	mem_set@val+1,c
  6388  0044E0  0E00               	movlw	0
  6389  0044E2  6E1C               	movwf	mem_set@val,c
  6390  0044E4  0E00               	movlw	0
  6391  0044E6  6E1F               	movwf	mem_set@cnt+1,c
  6392  0044E8  0E20               	movlw	32
  6393  0044EA  6E1E               	movwf	mem_set@cnt,c
  6394  0044EC  ECD5  F02A         	call	_mem_set	;wreg free
  6395                           
  6396                           ;ff.c: 1636: mem_cpy(dp->dir, dp->fn, 11);
  6397  0044F0  0101               	movlb	1	; () banked
  6398  0044F2  EE20 F012          	lfsr	2,18
  6399  0044F6  51CF               	movf	dir_register@dp& (0+255),w,b
  6400  0044F8  26D9               	addwf	fsr2l,f,c
  6401  0044FA  51D0               	movf	(dir_register@dp+1)& (0+255),w,b
  6402  0044FC  22DA               	addwfc	fsr2h,f,c
  6403  0044FE  CFDE F01A          	movff	postinc2,mem_cpy@dst
  6404  004502  CFDD F01B          	movff	postdec2,mem_cpy@dst+1
  6405  004506  EE20 F014          	lfsr	2,20
  6406  00450A  51CF               	movf	dir_register@dp& (0+255),w,b
  6407  00450C  26D9               	addwf	fsr2l,f,c
  6408  00450E  51D0               	movf	(dir_register@dp+1)& (0+255),w,b
  6409  004510  22DA               	addwfc	fsr2h,f,c
  6410  004512  CFDE F01C          	movff	postinc2,mem_cpy@src
  6411  004516  CFDD F01D          	movff	postdec2,mem_cpy@src+1
  6412  00451A  0E00               	movlw	0
  6413  00451C  6E1F               	movwf	mem_cpy@cnt+1,c
  6414  00451E  0E0B               	movlw	11
  6415  004520  6E1E               	movwf	mem_cpy@cnt,c
  6416  004522  EC62  F023         	call	_mem_cpy	;wreg free
  6417                           
  6418                           ;ff.c: 1640: dp->fs->wflag = 1;
  6419  004526  C1CF  FFD9         	movff	dir_register@dp,fsr2l
  6420  00452A  C1D0  FFDA         	movff	dir_register@dp+1,fsr2h
  6421  00452E  EE10 F004          	lfsr	1,4
  6422  004532  50DE               	movf	postinc2,w,c
  6423  004534  26E1               	addwf	fsr1l,f,c
  6424  004536  50DD               	movf	postdec2,w,c
  6425  004538  22E2               	addwfc	fsr1h,f,c
  6426  00453A  0E01               	movlw	1
  6427  00453C  6EE7               	movwf	indf1,c
  6428  00453E                     l1076:
  6429                           
  6430                           ;ff.c: 1641: }
  6431                           ;ff.c: 1642: }
  6432                           ;ff.c: 1644: return res;
  6433  00453E  0100               	movlb	0	; () banked
  6434  004540  51E6               	movf	dir_register@res& (0+255),w,b
  6435  004542  0012               	return	
  6436  004544                     __end_of_dir_register:
  6437                           	opt stack 0
  6438                           tblptru	equ	0xFF8
  6439                           tblptrh	equ	0xFF7
  6440                           tblptrl	equ	0xFF6
  6441                           tablat	equ	0xFF5
  6442                           prodh	equ	0xFF4
  6443                           prodl	equ	0xFF3
  6444                           intcon	equ	0xFF2
  6445                           intcon2	equ	0xFF1
  6446                           intcon3	equ	0xFF0
  6447                           indf0	equ	0xFEF
  6448                           postinc0	equ	0xFEE
  6449                           fsr0h	equ	0xFEA
  6450                           fsr0l	equ	0xFE9
  6451                           wreg	equ	0xFE8
  6452                           indf1	equ	0xFE7
  6453                           postinc1	equ	0xFE6
  6454                           postdec1	equ	0xFE5
  6455                           fsr1h	equ	0xFE2
  6456                           fsr1l	equ	0xFE1
  6457                           indf2	equ	0xFDF
  6458                           postinc2	equ	0xFDE
  6459                           postdec2	equ	0xFDD
  6460                           plusw2	equ	0xFDB
  6461                           fsr2h	equ	0xFDA
  6462                           fsr2l	equ	0xFD9
  6463                           status	equ	0xFD8
  6464                           
  6465 ;; *************** function _dir_alloc *****************
  6466 ;; Defined at:
  6467 ;;		line 1199 in file "bibliotecas/ff.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;  dp              2  124[BANK0 ] PTR struct .
  6470 ;;		 -> f_open@dj(22), 
  6471 ;;  nent            2  126[BANK0 ] unsigned int 
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;  n               2  131[BANK0 ] unsigned int 
  6474 ;;  res             1  133[BANK0 ] enum E75
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  1    wreg      enum E75
  6477 ;; Registers used:
  6478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6484 ;;      Params:         0       4       0       0       0       0       0       0       0
  6485 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6486 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6487 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6488 ;;Total ram usage:       10 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:   12
  6491 ;; This function calls:
  6492 ;;		_dir_next
  6493 ;;		_dir_sdi
  6494 ;;		_move_window
  6495 ;; This function is called by:
  6496 ;;		_dir_register
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text25
  6501  004288                     __ptext25:
  6502                           	opt stack 0
  6503  004288                     _dir_alloc:
  6504                           	opt stack 14
  6505                           
  6506                           ;ff.c: 1204: FRESULT res;
  6507                           ;ff.c: 1205: UINT n;
  6508                           ;ff.c: 1208: res = dir_sdi(dp, 0);
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;incstack = 0
  6512  004288  C0DC  F0B1         	movff	dir_alloc@dp,dir_sdi@dp
  6513  00428C  C0DD  F0B2         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  6514  004290  0E00               	movlw	0
  6515  004292  0100               	movlb	0	; () banked
  6516  004294  6FB4               	movwf	(dir_sdi@idx+1)& (0+255),b
  6517  004296  0E00               	movlw	0
  6518  004298  6FB3               	movwf	dir_sdi@idx& (0+255),b
  6519  00429A  EC5B  F019         	call	_dir_sdi	;wreg free
  6520  00429E  0100               	movlb	0	; () banked
  6521  0042A0  6FE5               	movwf	dir_alloc@res& (0+255),b
  6522                           
  6523                           ; BSR set to: 0
  6524                           ;ff.c: 1209: if (res == FR_OK) {
  6525  0042A2  51E5               	movf	dir_alloc@res& (0+255),w,b
  6526  0042A4  A4D8               	btfss	status,2,c
  6527  0042A6  D061               	goto	u13730
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;ff.c: 1210: n = 0;
  6531  0042A8  0E00               	movlw	0
  6532  0042AA  6FE4               	movwf	(dir_alloc@n+1)& (0+255),b
  6533  0042AC  0E00               	movlw	0
  6534  0042AE  6FE3               	movwf	dir_alloc@n& (0+255),b
  6535  0042B0                     
  6536                           ; BSR set to: 0
  6537                           ;ff.c: 1212: res = move_window(dp->fs, dp->sect);
  6538                           
  6539                           ; BSR set to: 0
  6540  0042B0  C0DC  FFD9         	movff	dir_alloc@dp,fsr2l
  6541  0042B4  C0DD  FFDA         	movff	dir_alloc@dp+1,fsr2h
  6542  0042B8  CFDE F08C          	movff	postinc2,move_window@fs
  6543  0042BC  CFDD F08D          	movff	postdec2,move_window@fs+1
  6544  0042C0  EE20 F00E          	lfsr	2,14
  6545  0042C4  51DC               	movf	dir_alloc@dp& (0+255),w,b
  6546  0042C6  26D9               	addwf	fsr2l,f,c
  6547  0042C8  51DD               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6548  0042CA  22DA               	addwfc	fsr2h,f,c
  6549  0042CC  CFDE F08E          	movff	postinc2,move_window@sector
  6550  0042D0  CFDE F08F          	movff	postinc2,move_window@sector+1
  6551  0042D4  CFDE F090          	movff	postinc2,move_window@sector+2
  6552  0042D8  CFDE F091          	movff	postinc2,move_window@sector+3
  6553  0042DC  ECCA  F024         	call	_move_window	;wreg free
  6554  0042E0  0100               	movlb	0	; () banked
  6555  0042E2  6FE5               	movwf	dir_alloc@res& (0+255),b
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;ff.c: 1213: if (res != FR_OK) break;
  6559  0042E4  51E5               	movf	dir_alloc@res& (0+255),w,b
  6560  0042E6  A4D8               	btfss	status,2,c
  6561  0042E8  D040               	goto	u13730
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;ff.c: 1214: if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  6565                           
  6566                           ; BSR set to: 0
  6567                           
  6568                           ; BSR set to: 0
  6569  0042EA  EE20 F012          	lfsr	2,18
  6570  0042EE  51DC               	movf	dir_alloc@dp& (0+255),w,b
  6571  0042F0  26D9               	addwf	fsr2l,f,c
  6572  0042F2  51DD               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6573  0042F4  22DA               	addwfc	fsr2h,f,c
  6574  0042F6  CFDE F0E0          	movff	postinc2,??_dir_alloc
  6575  0042FA  CFDD F0E1          	movff	postdec2,??_dir_alloc+1
  6576  0042FE  C0E0  FFD9         	movff	??_dir_alloc,fsr2l
  6577  004302  C0E1  FFDA         	movff	??_dir_alloc+1,fsr2h
  6578  004306  0EE5               	movlw	229
  6579  004308  18DE               	xorwf	postinc2,w,c
  6580  00430A  B4D8               	btfsc	status,2,c
  6581  00430C  D011               	goto	u13710
  6582                           
  6583                           ; BSR set to: 0
  6584  00430E  EE20 F012          	lfsr	2,18
  6585  004312  51DC               	movf	dir_alloc@dp& (0+255),w,b
  6586  004314  26D9               	addwf	fsr2l,f,c
  6587  004316  51DD               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6588  004318  22DA               	addwfc	fsr2h,f,c
  6589  00431A  CFDE F0E0          	movff	postinc2,??_dir_alloc
  6590  00431E  CFDD F0E1          	movff	postdec2,??_dir_alloc+1
  6591  004322  C0E0  FFD9         	movff	??_dir_alloc,fsr2l
  6592  004326  C0E1  FFDA         	movff	??_dir_alloc+1,fsr2h
  6593  00432A  50DF               	movf	indf2,w,c
  6594  00432C  A4D8               	btfss	status,2,c
  6595  00432E  D00A               	goto	l1050
  6596  004330                     u13710:
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;ff.c: 1215: if (++n == nent) break;
  6600                           
  6601                           ; BSR set to: 0
  6602  004330  4BE3               	infsnz	dir_alloc@n& (0+255),f,b
  6603  004332  2BE4               	incf	(dir_alloc@n+1)& (0+255),f,b
  6604  004334  51DE               	movf	dir_alloc@nent& (0+255),w,b
  6605  004336  19E3               	xorwf	dir_alloc@n& (0+255),w,b
  6606  004338  E109               	bnz	l10967
  6607  00433A  51DF               	movf	(dir_alloc@nent+1)& (0+255),w,b
  6608  00433C  19E4               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  6609  00433E  B4D8               	btfsc	status,2,c
  6610  004340  D014               	goto	u13730
  6611  004342  D004               	goto	l1054
  6612  004344                     l1050:
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;ff.c: 1217: n = 0;
  6616                           
  6617                           ; BSR set to: 0
  6618  004344  0E00               	movlw	0
  6619  004346  6FE4               	movwf	(dir_alloc@n+1)& (0+255),b
  6620  004348  0E00               	movlw	0
  6621  00434A  6FE3               	movwf	dir_alloc@n& (0+255),b
  6622  00434C                     l1054:
  6623  00434C                     l10967:
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;ff.c: 1218: }
  6627                           ;ff.c: 1219: res = dir_next(dp, 1);
  6628  00434C  C0DC  F0C9         	movff	dir_alloc@dp,dir_next@dp
  6629  004350  C0DD  F0CA         	movff	dir_alloc@dp+1,dir_next@dp+1
  6630  004354  0E00               	movlw	0
  6631  004356  6FCC               	movwf	(dir_next@stretch+1)& (0+255),b
  6632  004358  0E01               	movlw	1
  6633  00435A  6FCB               	movwf	dir_next@stretch& (0+255),b
  6634  00435C  ECE2  F00C         	call	_dir_next	;wreg free
  6635  004360  0100               	movlb	0	; () banked
  6636  004362  6FE5               	movwf	dir_alloc@res& (0+255),b
  6637                           
  6638                           ; BSR set to: 0
  6639                           ;ff.c: 1220: } while (res == FR_OK);
  6640  004364  51E5               	movf	dir_alloc@res& (0+255),w,b
  6641  004366  B4D8               	btfsc	status,2,c
  6642  004368  D7A3               	goto	l1047
  6643  00436A                     u13730:
  6644                           
  6645                           ; BSR set to: 0
  6646                           ;ff.c: 1221: }
  6647                           ;ff.c: 1222: if (res == FR_NO_FILE) res = FR_DENIED;
  6648                           
  6649                           ; BSR set to: 0
  6650                           
  6651                           ; BSR set to: 0
  6652  00436A  0E04               	movlw	4
  6653  00436C  19E5               	xorwf	dir_alloc@res& (0+255),w,b
  6654  00436E  A4D8               	btfss	status,2,c
  6655  004370  D002               	goto	l1055
  6656                           
  6657                           ; BSR set to: 0
  6658  004372  0E07               	movlw	7
  6659  004374  6FE5               	movwf	dir_alloc@res& (0+255),b
  6660  004376                     l1055:
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;ff.c: 1223: return res;
  6664  004376  51E5               	movf	dir_alloc@res& (0+255),w,b
  6665  004378  0012               	return	
  6666  00437A                     __end_of_dir_alloc:
  6667                           	opt stack 0
  6668                           tblptru	equ	0xFF8
  6669                           tblptrh	equ	0xFF7
  6670                           tblptrl	equ	0xFF6
  6671                           tablat	equ	0xFF5
  6672                           prodh	equ	0xFF4
  6673                           prodl	equ	0xFF3
  6674                           intcon	equ	0xFF2
  6675                           intcon2	equ	0xFF1
  6676                           intcon3	equ	0xFF0
  6677                           indf0	equ	0xFEF
  6678                           postinc0	equ	0xFEE
  6679                           fsr0h	equ	0xFEA
  6680                           fsr0l	equ	0xFE9
  6681                           wreg	equ	0xFE8
  6682                           indf1	equ	0xFE7
  6683                           postinc1	equ	0xFE6
  6684                           postdec1	equ	0xFE5
  6685                           fsr1h	equ	0xFE2
  6686                           fsr1l	equ	0xFE1
  6687                           indf2	equ	0xFDF
  6688                           postinc2	equ	0xFDE
  6689                           postdec2	equ	0xFDD
  6690                           plusw2	equ	0xFDB
  6691                           fsr2h	equ	0xFDA
  6692                           fsr2l	equ	0xFD9
  6693                           status	equ	0xFD8
  6694                           
  6695 ;; *************** function _dir_sdi *****************
  6696 ;; Defined at:
  6697 ;;		line 1080 in file "bibliotecas/ff.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;  dp              2   81[BANK0 ] PTR struct .
  6700 ;;		 -> f_open@dj(22), 
  6701 ;;  idx             2   83[BANK0 ] unsigned int 
  6702 ;; Auto vars:     Size  Location     Type
  6703 ;;  clst            4   98[BANK0 ] unsigned long 
  6704 ;;  sect            4   94[BANK0 ] unsigned long 
  6705 ;;  ic              2   92[BANK0 ] unsigned int 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;                  1    wreg      enum E75
  6708 ;; Registers used:
  6709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6715 ;;      Params:         0       4       0       0       0       0       0       0       0
  6716 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6717 ;;      Temps:          0       7       0       0       0       0       0       0       0
  6718 ;;      Totals:         0      21       0       0       0       0       0       0       0
  6719 ;;Total ram usage:       21 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:   10
  6722 ;; This function calls:
  6723 ;;		_clust2sect
  6724 ;;		_get_fat
  6725 ;; This function is called by:
  6726 ;;		_dir_alloc
  6727 ;;		_dir_find
  6728 ;;		_follow_path
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           	psect	text26
  6733  0032B6                     __ptext26:
  6734                           	opt stack 0
  6735  0032B6                     _dir_sdi:
  6736                           	opt stack 16
  6737                           
  6738                           ;ff.c: 1085: DWORD clst, sect;
  6739                           ;ff.c: 1086: UINT ic;
  6740                           ;ff.c: 1089: dp->index = (WORD)idx;
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;incstack = 0
  6744  0032B6  0100               	movlb	0	; () banked
  6745  0032B8  EE20 F004          	lfsr	2,4
  6746  0032BC  51B1               	movf	dir_sdi@dp& (0+255),w,b
  6747  0032BE  26D9               	addwf	fsr2l,f,c
  6748  0032C0  51B2               	movf	(dir_sdi@dp+1)& (0+255),w,b
  6749  0032C2  22DA               	addwfc	fsr2h,f,c
  6750  0032C4  C0B3  FFDE         	movff	dir_sdi@idx,postinc2
  6751  0032C8  C0B4  FFDD         	movff	dir_sdi@idx+1,postdec2
  6752                           
  6753                           ;ff.c: 1090: clst = dp->sclust;
  6754  0032CC  EE20 F006          	lfsr	2,6
  6755  0032D0  51B1               	movf	dir_sdi@dp& (0+255),w,b
  6756  0032D2  26D9               	addwf	fsr2l,f,c
  6757  0032D4  51B2               	movf	(dir_sdi@dp+1)& (0+255),w,b
  6758  0032D6  22DA               	addwfc	fsr2h,f,c
  6759  0032D8  CFDE F0C2          	movff	postinc2,dir_sdi@clst
  6760  0032DC  CFDE F0C3          	movff	postinc2,dir_sdi@clst+1
  6761  0032E0  CFDE F0C4          	movff	postinc2,dir_sdi@clst+2
  6762  0032E4  CFDE F0C5          	movff	postinc2,dir_sdi@clst+3
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;ff.c: 1091: if (clst == 1 || clst >= dp->fs->n_fatent)
  6766  0032E8  05C2               	decf	dir_sdi@clst& (0+255),w,b
  6767  0032EA  11C3               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6768  0032EC  11C4               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6769  0032EE  11C5               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6770  0032F0  B4D8               	btfsc	status,2,c
  6771  0032F2  D014               	goto	u13300
  6772                           
  6773                           ; BSR set to: 0
  6774  0032F4  C0B1  FFD9         	movff	dir_sdi@dp,fsr2l
  6775  0032F8  C0B2  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6776  0032FC  EE10 F012          	lfsr	1,18
  6777  003300  50DE               	movf	postinc2,w,c
  6778  003302  26E1               	addwf	fsr1l,f,c
  6779  003304  50DD               	movf	postdec2,w,c
  6780  003306  22E2               	addwfc	fsr1h,f,c
  6781  003308  50E6               	movf	postinc1,w,c
  6782  00330A  5DC2               	subwf	dir_sdi@clst& (0+255),w,b
  6783  00330C  50E6               	movf	postinc1,w,c
  6784  00330E  59C3               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  6785  003310  50E6               	movf	postinc1,w,c
  6786  003312  59C4               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  6787  003314  50E6               	movf	postinc1,w,c
  6788  003316  59C5               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  6789  003318  A0D8               	btfss	status,0,c
  6790  00331A  D002               	goto	l1005
  6791  00331C                     u13300:
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;ff.c: 1092: return FR_INT_ERR;
  6795                           
  6796                           ; BSR set to: 0
  6797  00331C  0E02               	movlw	2
  6798                           
  6799                           ; BSR set to: 0
  6800  00331E  0012               	return	
  6801  003320                     l1005:
  6802                           
  6803                           ; BSR set to: 0
  6804                           ;ff.c: 1093: if (!clst && dp->fs->fs_type == 3)
  6805                           
  6806                           ; BSR set to: 0
  6807  003320  51C2               	movf	dir_sdi@clst& (0+255),w,b
  6808  003322  11C3               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6809  003324  11C4               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6810  003326  11C5               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6811  003328  A4D8               	btfss	status,2,c
  6812  00332A  D022               	goto	l1009
  6813                           
  6814                           ; BSR set to: 0
  6815  00332C  C0B1  FFD9         	movff	dir_sdi@dp,fsr2l
  6816  003330  C0B2  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6817  003334  CFDE F0B5          	movff	postinc2,??_dir_sdi
  6818  003338  CFDD F0B6          	movff	postdec2,??_dir_sdi+1
  6819  00333C  C0B5  FFD9         	movff	??_dir_sdi,fsr2l
  6820  003340  C0B6  FFDA         	movff	??_dir_sdi+1,fsr2h
  6821  003344  0E03               	movlw	3
  6822  003346  18DE               	xorwf	postinc2,w,c
  6823  003348  A4D8               	btfss	status,2,c
  6824  00334A  D012               	goto	l1009
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;ff.c: 1094: clst = dp->fs->dirbase;
  6828  00334C  C0B1  FFD9         	movff	dir_sdi@dp,fsr2l
  6829  003350  C0B2  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6830  003354  EE10 F022          	lfsr	1,34
  6831  003358  50DE               	movf	postinc2,w,c
  6832  00335A  26E1               	addwf	fsr1l,f,c
  6833  00335C  50DD               	movf	postdec2,w,c
  6834  00335E  22E2               	addwfc	fsr1h,f,c
  6835  003360  CFE6 F0C2          	movff	postinc1,dir_sdi@clst
  6836  003364  CFE6 F0C3          	movff	postinc1,dir_sdi@clst+1
  6837  003368  CFE6 F0C4          	movff	postinc1,dir_sdi@clst+2
  6838  00336C  CFE6 F0C5          	movff	postinc1,dir_sdi@clst+3
  6839  003370                     l1009:
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;ff.c: 1096: if (clst == 0) {
  6843                           
  6844                           ; BSR set to: 0
  6845  003370  51C2               	movf	dir_sdi@clst& (0+255),w,b
  6846  003372  11C3               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6847  003374  11C4               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6848  003376  11C5               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6849  003378  A4D8               	btfss	status,2,c
  6850  00337A  D025               	goto	l1010
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;ff.c: 1097: if (idx >= dp->fs->n_rootdir)
  6854  00337C  C0B1  FFD9         	movff	dir_sdi@dp,fsr2l
  6855  003380  C0B2  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6856  003384  EE10 F008          	lfsr	1,8
  6857  003388  50DE               	movf	postinc2,w,c
  6858  00338A  26E1               	addwf	fsr1l,f,c
  6859  00338C  50DD               	movf	postdec2,w,c
  6860  00338E  22E2               	addwfc	fsr1h,f,c
  6861  003390  50E6               	movf	postinc1,w,c
  6862  003392  5DB3               	subwf	dir_sdi@idx& (0+255),w,b
  6863  003394  50E6               	movf	postinc1,w,c
  6864  003396  59B4               	subwfb	(dir_sdi@idx+1)& (0+255),w,b
  6865  003398  A0D8               	btfss	status,0,c
  6866  00339A  D002               	goto	l1011
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;ff.c: 1098: return FR_INT_ERR;
  6870  00339C  0E02               	movlw	2
  6871                           
  6872                           ; BSR set to: 0
  6873  00339E  0012               	return	
  6874  0033A0                     l1011:
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;ff.c: 1099: sect = dp->fs->dirbase;
  6878                           
  6879                           ; BSR set to: 0
  6880  0033A0  C0B1  FFD9         	movff	dir_sdi@dp,fsr2l
  6881  0033A4  C0B2  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6882  0033A8  EE10 F022          	lfsr	1,34
  6883  0033AC  50DE               	movf	postinc2,w,c
  6884  0033AE  26E1               	addwf	fsr1l,f,c
  6885  0033B0  50DD               	movf	postdec2,w,c
  6886  0033B2  22E2               	addwfc	fsr1h,f,c
  6887  0033B4  CFE6 F0BE          	movff	postinc1,dir_sdi@sect
  6888  0033B8  CFE6 F0BF          	movff	postinc1,dir_sdi@sect+1
  6889  0033BC  CFE6 F0C0          	movff	postinc1,dir_sdi@sect+2
  6890  0033C0  CFE6 F0C1          	movff	postinc1,dir_sdi@sect+3
  6891                           
  6892                           ;ff.c: 1100: }
  6893  0033C4  D07B               	goto	l1012
  6894  0033C6                     l1010:
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;ff.c: 1101: else {
  6898                           ;ff.c: 1102: ic = ((UINT)512) / 32 * dp->fs->csize;
  6899                           
  6900                           ; BSR set to: 0
  6901  0033C6  C0B1  FFD9         	movff	dir_sdi@dp,fsr2l
  6902  0033CA  C0B2  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6903  0033CE  EE10 F002          	lfsr	1,2
  6904  0033D2  50DE               	movf	postinc2,w,c
  6905  0033D4  26E1               	addwf	fsr1l,f,c
  6906  0033D6  50DD               	movf	postdec2,w,c
  6907  0033D8  22E2               	addwfc	fsr1h,f,c
  6908  0033DA  50E7               	movf	indf1,w,c
  6909  0033DC  6FB5               	movwf	??_dir_sdi& (0+255),b
  6910  0033DE  51B5               	movf	??_dir_sdi& (0+255),w,b
  6911  0033E0  0D10               	mullw	16
  6912  0033E2  CFF3 F0BC          	movff	prodl,dir_sdi@ic
  6913  0033E6  CFF4 F0BD          	movff	prodh,dir_sdi@ic+1
  6914                           
  6915                           ;ff.c: 1103: while (idx >= ic) {
  6916  0033EA  D048               	goto	l1013
  6917  0033EC                     
  6918                           ; BSR set to: 0
  6919                           ;ff.c: 1104: clst = get_fat(dp->fs, clst);
  6920                           
  6921                           ; BSR set to: 0
  6922  0033EC  C0B1  FFD9         	movff	dir_sdi@dp,fsr2l
  6923  0033F0  C0B2  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6924  0033F4  CFDE F097          	movff	postinc2,get_fat@fs
  6925  0033F8  CFDD F098          	movff	postdec2,get_fat@fs+1
  6926  0033FC  C0C2  F099         	movff	dir_sdi@clst,get_fat@clst
  6927  003400  C0C3  F09A         	movff	dir_sdi@clst+1,get_fat@clst+1
  6928  003404  C0C4  F09B         	movff	dir_sdi@clst+2,get_fat@clst+2
  6929  003408  C0C5  F09C         	movff	dir_sdi@clst+3,get_fat@clst+3
  6930  00340C  ECEA  F012         	call	_get_fat	;wreg free
  6931  003410  C097  F0C2         	movff	?_get_fat,dir_sdi@clst
  6932  003414  C098  F0C3         	movff	?_get_fat+1,dir_sdi@clst+1
  6933  003418  C099  F0C4         	movff	?_get_fat+2,dir_sdi@clst+2
  6934  00341C  C09A  F0C5         	movff	?_get_fat+3,dir_sdi@clst+3
  6935                           
  6936                           ;ff.c: 1105: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6937  003420  0100               	movlb	0	; () banked
  6938  003422  29C2               	incf	dir_sdi@clst& (0+255),w,b
  6939  003424  E109               	bnz	l10737
  6940  003426  29C3               	incf	(dir_sdi@clst+1)& (0+255),w,b
  6941  003428  E107               	bnz	l10737
  6942  00342A  29C4               	incf	(dir_sdi@clst+2)& (0+255),w,b
  6943  00342C  E105               	bnz	l10737
  6944  00342E  29C5               	incf	(dir_sdi@clst+3)& (0+255),w,b
  6945  003430  A4D8               	btfss	status,2,c
  6946  003432  D002               	goto	l1015
  6947                           
  6948                           ; BSR set to: 0
  6949  003434  0E01               	movlw	1
  6950                           
  6951                           ; BSR set to: 0
  6952  003436  0012               	return	
  6953  003438                     l1015:
  6954  003438                     l10737:
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;ff.c: 1106: if (clst < 2 || clst >= dp->fs->n_fatent)
  6958  003438  51C5               	movf	(dir_sdi@clst+3)& (0+255),w,b
  6959  00343A  11C4               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6960  00343C  11C3               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6961  00343E  E104               	bnz	u13360
  6962  003440  0E02               	movlw	2
  6963  003442  5DC2               	subwf	dir_sdi@clst& (0+255),w,b
  6964  003444  A0D8               	btfss	status,0,c
  6965  003446  D014               	goto	u13370
  6966  003448                     u13360:
  6967                           
  6968                           ; BSR set to: 0
  6969  003448  C0B1  FFD9         	movff	dir_sdi@dp,fsr2l
  6970  00344C  C0B2  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6971  003450  EE10 F012          	lfsr	1,18
  6972  003454  50DE               	movf	postinc2,w,c
  6973  003456  26E1               	addwf	fsr1l,f,c
  6974  003458  50DD               	movf	postdec2,w,c
  6975  00345A  22E2               	addwfc	fsr1h,f,c
  6976  00345C  50E6               	movf	postinc1,w,c
  6977  00345E  5DC2               	subwf	dir_sdi@clst& (0+255),w,b
  6978  003460  50E6               	movf	postinc1,w,c
  6979  003462  59C3               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  6980  003464  50E6               	movf	postinc1,w,c
  6981  003466  59C4               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  6982  003468  50E6               	movf	postinc1,w,c
  6983  00346A  59C5               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  6984  00346C  A0D8               	btfss	status,0,c
  6985  00346E  D002               	goto	l1016
  6986  003470                     u13370:
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;ff.c: 1107: return FR_INT_ERR;
  6990                           
  6991                           ; BSR set to: 0
  6992  003470  0E02               	movlw	2
  6993                           
  6994                           ; BSR set to: 0
  6995  003472  0012               	return	
  6996  003474                     l1016:
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;ff.c: 1108: idx -= ic;
  7000                           
  7001                           ; BSR set to: 0
  7002  003474  51BC               	movf	dir_sdi@ic& (0+255),w,b
  7003  003476  5FB3               	subwf	dir_sdi@idx& (0+255),f,b
  7004  003478  51BD               	movf	(dir_sdi@ic+1)& (0+255),w,b
  7005  00347A  5BB4               	subwfb	(dir_sdi@idx+1)& (0+255),f,b
  7006  00347C                     l1013:
  7007                           
  7008                           ; BSR set to: 0
  7009  00347C  51BC               	movf	dir_sdi@ic& (0+255),w,b
  7010  00347E  5DB3               	subwf	dir_sdi@idx& (0+255),w,b
  7011  003480  51BD               	movf	(dir_sdi@ic+1)& (0+255),w,b
  7012  003482  59B4               	subwfb	(dir_sdi@idx+1)& (0+255),w,b
  7013  003484  B0D8               	btfsc	status,0,c
  7014  003486  D7B2               	goto	l1014
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;ff.c: 1109: }
  7018                           ;ff.c: 1110: sect = clust2sect(dp->fs, clst);
  7019                           
  7020                           ; BSR set to: 0
  7021  003488  C0B1  FFD9         	movff	dir_sdi@dp,fsr2l
  7022  00348C  C0B2  FFDA         	movff	dir_sdi@dp+1,fsr2h
  7023  003490  CFDE F026          	movff	postinc2,clust2sect@fs
  7024  003494  CFDD F027          	movff	postdec2,clust2sect@fs+1
  7025  003498  C0C2  F028         	movff	dir_sdi@clst,clust2sect@clst
  7026  00349C  C0C3  F029         	movff	dir_sdi@clst+1,clust2sect@clst+1
  7027  0034A0  C0C4  F02A         	movff	dir_sdi@clst+2,clust2sect@clst+2
  7028  0034A4  C0C5  F02B         	movff	dir_sdi@clst+3,clust2sect@clst+3
  7029  0034A8  EC03  F023         	call	_clust2sect	;wreg free
  7030  0034AC  C026  F0BE         	movff	?_clust2sect,dir_sdi@sect
  7031  0034B0  C027  F0BF         	movff	?_clust2sect+1,dir_sdi@sect+1
  7032  0034B4  C028  F0C0         	movff	?_clust2sect+2,dir_sdi@sect+2
  7033  0034B8  C029  F0C1         	movff	?_clust2sect+3,dir_sdi@sect+3
  7034  0034BC                     l1012:
  7035                           
  7036                           ;ff.c: 1111: }
  7037                           ;ff.c: 1112: dp->clust = clst;
  7038  0034BC  0100               	movlb	0	; () banked
  7039  0034BE  EE20 F00A          	lfsr	2,10
  7040  0034C2  51B1               	movf	dir_sdi@dp& (0+255),w,b
  7041  0034C4  26D9               	addwf	fsr2l,f,c
  7042  0034C6  51B2               	movf	(dir_sdi@dp+1)& (0+255),w,b
  7043  0034C8  22DA               	addwfc	fsr2h,f,c
  7044  0034CA  C0C2  FFDE         	movff	dir_sdi@clst,postinc2
  7045  0034CE  C0C3  FFDE         	movff	dir_sdi@clst+1,postinc2
  7046  0034D2  C0C4  FFDE         	movff	dir_sdi@clst+2,postinc2
  7047  0034D6  C0C5  FFDE         	movff	dir_sdi@clst+3,postinc2
  7048                           
  7049                           ; BSR set to: 0
  7050                           ;ff.c: 1113: if (!sect) return FR_INT_ERR;
  7051  0034DA  51BE               	movf	dir_sdi@sect& (0+255),w,b
  7052  0034DC  11BF               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  7053  0034DE  11C0               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  7054  0034E0  11C1               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  7055  0034E2  A4D8               	btfss	status,2,c
  7056  0034E4  D002               	goto	l1020
  7057                           
  7058                           ; BSR set to: 0
  7059  0034E6  0E02               	movlw	2
  7060                           
  7061                           ; BSR set to: 0
  7062  0034E8  0012               	return	
  7063  0034EA                     l1020:
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;ff.c: 1114: dp->sect = sect + idx / (((UINT)512) / 32);
  7067                           
  7068                           ; BSR set to: 0
  7069  0034EA  C0B3  F0B5         	movff	dir_sdi@idx,??_dir_sdi
  7070  0034EE  C0B4  F0B6         	movff	dir_sdi@idx+1,??_dir_sdi+1
  7071  0034F2  0E04               	movlw	4
  7072  0034F4  6FB7               	movwf	(??_dir_sdi+2)& (0+255),b
  7073  0034F6                     u13405:
  7074  0034F6  90D8               	bcf	status,0,c
  7075  0034F8  33B6               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  7076  0034FA  33B5               	rrcf	??_dir_sdi& (0+255),f,b
  7077  0034FC  2FB7               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  7078  0034FE  D7FB               	goto	u13405
  7079  003500  51B5               	movf	??_dir_sdi& (0+255),w,b
  7080  003502  25BE               	addwf	dir_sdi@sect& (0+255),w,b
  7081  003504  6FB8               	movwf	(??_dir_sdi+3)& (0+255),b
  7082  003506  51B6               	movf	(??_dir_sdi+1)& (0+255),w,b
  7083  003508  21BF               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  7084  00350A  6FB9               	movwf	(??_dir_sdi+4)& (0+255),b
  7085  00350C  0E00               	movlw	0
  7086  00350E  21C0               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  7087  003510  6FBA               	movwf	(??_dir_sdi+5)& (0+255),b
  7088  003512  0E00               	movlw	0
  7089  003514  21C1               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  7090  003516  6FBB               	movwf	(??_dir_sdi+6)& (0+255),b
  7091  003518  EE20 F00E          	lfsr	2,14
  7092  00351C  51B1               	movf	dir_sdi@dp& (0+255),w,b
  7093  00351E  26D9               	addwf	fsr2l,f,c
  7094  003520  51B2               	movf	(dir_sdi@dp+1)& (0+255),w,b
  7095  003522  22DA               	addwfc	fsr2h,f,c
  7096  003524  C0B8  FFDE         	movff	??_dir_sdi+3,postinc2
  7097  003528  C0B9  FFDE         	movff	??_dir_sdi+4,postinc2
  7098  00352C  C0BA  FFDE         	movff	??_dir_sdi+5,postinc2
  7099  003530  C0BB  FFDE         	movff	??_dir_sdi+6,postinc2
  7100                           
  7101                           ;ff.c: 1115: dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  7102  003534  0E0F               	movlw	15
  7103  003536  15B3               	andwf	dir_sdi@idx& (0+255),w,b
  7104  003538  6FB5               	movwf	??_dir_sdi& (0+255),b
  7105  00353A  0E00               	movlw	0
  7106  00353C  15B4               	andwf	(dir_sdi@idx+1)& (0+255),w,b
  7107  00353E  6FB6               	movwf	(??_dir_sdi+1)& (0+255),b
  7108  003540  0E05               	movlw	5
  7109  003542                     u13415:
  7110  003542  90D8               	bcf	status,0,c
  7111  003544  37B5               	rlcf	??_dir_sdi& (0+255),f,b
  7112  003546  37B6               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  7113  003548  2EE8               	decfsz	wreg,f,c
  7114  00354A  D7FB               	goto	u13415
  7115  00354C  0E2E               	movlw	46
  7116  00354E  27B5               	addwf	??_dir_sdi& (0+255),f,b
  7117  003550  0E00               	movlw	0
  7118  003552  23B6               	addwfc	(??_dir_sdi+1)& (0+255),f,b
  7119  003554  C0B1  FFD9         	movff	dir_sdi@dp,fsr2l
  7120  003558  C0B2  FFDA         	movff	dir_sdi@dp+1,fsr2h
  7121  00355C  CFDE F0B7          	movff	postinc2,??_dir_sdi+2
  7122  003560  CFDD F0B8          	movff	postdec2,??_dir_sdi+3
  7123  003564  51B5               	movf	??_dir_sdi& (0+255),w,b
  7124  003566  27B7               	addwf	(??_dir_sdi+2)& (0+255),f,b
  7125  003568  51B6               	movf	(??_dir_sdi+1)& (0+255),w,b
  7126  00356A  23B8               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  7127  00356C  EE20 F012          	lfsr	2,18
  7128  003570  51B1               	movf	dir_sdi@dp& (0+255),w,b
  7129  003572  26D9               	addwf	fsr2l,f,c
  7130  003574  51B2               	movf	(dir_sdi@dp+1)& (0+255),w,b
  7131  003576  22DA               	addwfc	fsr2h,f,c
  7132  003578  C0B7  FFDE         	movff	??_dir_sdi+2,postinc2
  7133  00357C  C0B8  FFDD         	movff	??_dir_sdi+3,postdec2
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;ff.c: 1117: return FR_OK;
  7137  003580  0E00               	movlw	0
  7138  003582  0012               	return	
  7139  003584                     __end_of_dir_sdi:
  7140                           	opt stack 0
  7141                           tblptru	equ	0xFF8
  7142                           tblptrh	equ	0xFF7
  7143                           tblptrl	equ	0xFF6
  7144                           tablat	equ	0xFF5
  7145                           prodh	equ	0xFF4
  7146                           prodl	equ	0xFF3
  7147                           intcon	equ	0xFF2
  7148                           intcon2	equ	0xFF1
  7149                           intcon3	equ	0xFF0
  7150                           indf0	equ	0xFEF
  7151                           postinc0	equ	0xFEE
  7152                           fsr0h	equ	0xFEA
  7153                           fsr0l	equ	0xFE9
  7154                           wreg	equ	0xFE8
  7155                           indf1	equ	0xFE7
  7156                           postinc1	equ	0xFE6
  7157                           postdec1	equ	0xFE5
  7158                           fsr1h	equ	0xFE2
  7159                           fsr1l	equ	0xFE1
  7160                           indf2	equ	0xFDF
  7161                           postinc2	equ	0xFDE
  7162                           postdec2	equ	0xFDD
  7163                           plusw2	equ	0xFDB
  7164                           fsr2h	equ	0xFDA
  7165                           fsr2l	equ	0xFD9
  7166                           status	equ	0xFD8
  7167                           
  7168 ;; *************** function _dir_next *****************
  7169 ;; Defined at:
  7170 ;;		line 1128 in file "bibliotecas/ff.c"
  7171 ;; Parameters:    Size  Location     Type
  7172 ;;  dp              2  105[BANK0 ] PTR struct .
  7173 ;;		 -> f_open@dj(22), 
  7174 ;;  stretch         2  107[BANK0 ] int 
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;  clst            4  120[BANK0 ] unsigned long 
  7177 ;;  i               2  118[BANK0 ] unsigned int 
  7178 ;;  c               2  116[BANK0 ] unsigned int 
  7179 ;; Return value:  Size  Location     Type
  7180 ;;                  1    wreg      enum E75
  7181 ;; Registers used:
  7182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7188 ;;      Params:         0       4       0       0       0       0       0       0       0
  7189 ;;      Locals:         0       8       0       0       0       0       0       0       0
  7190 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7191 ;;      Totals:         0      19       0       0       0       0       0       0       0
  7192 ;;Total ram usage:       19 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:   11
  7195 ;; This function calls:
  7196 ;;		_clust2sect
  7197 ;;		_create_chain
  7198 ;;		_get_fat
  7199 ;;		_mem_set
  7200 ;;		_sync_window
  7201 ;; This function is called by:
  7202 ;;		_dir_alloc
  7203 ;;		_dir_find
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           	psect	text27
  7208  0019C4                     __ptext27:
  7209                           	opt stack 0
  7210  0019C4                     _dir_next:
  7211                           	opt stack 14
  7212                           
  7213                           ;ff.c: 1133: DWORD clst;
  7214                           ;ff.c: 1134: UINT i;
  7215                           ;ff.c: 1136: UINT c;
  7216                           ;ff.c: 1140: i = dp->index + 1;
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;incstack = 0
  7220  0019C4  0100               	movlb	0	; () banked
  7221  0019C6  EE20 F004          	lfsr	2,4
  7222  0019CA  51C9               	movf	dir_next@dp& (0+255),w,b
  7223  0019CC  26D9               	addwf	fsr2l,f,c
  7224  0019CE  51CA               	movf	(dir_next@dp+1)& (0+255),w,b
  7225  0019D0  22DA               	addwfc	fsr2h,f,c
  7226  0019D2  CFDE F0CD          	movff	postinc2,??_dir_next
  7227  0019D6  CFDD F0CE          	movff	postdec2,??_dir_next+1
  7228  0019DA  0E01               	movlw	1
  7229  0019DC  25CD               	addwf	??_dir_next& (0+255),w,b
  7230  0019DE  6FD6               	movwf	dir_next@i& (0+255),b
  7231  0019E0  0E00               	movlw	0
  7232  0019E2  21CE               	addwfc	(??_dir_next+1)& (0+255),w,b
  7233  0019E4  6FD7               	movwf	(dir_next@i+1)& (0+255),b
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;ff.c: 1141: if (!(i & 0xFFFF) || !dp->sect)
  7237  0019E6  51D6               	movf	dir_next@i& (0+255),w,b
  7238  0019E8  11D7               	iorwf	(dir_next@i+1)& (0+255),w,b
  7239  0019EA  B4D8               	btfsc	status,2,c
  7240  0019EC  D00C               	goto	u13430
  7241                           
  7242                           ; BSR set to: 0
  7243  0019EE  EE20 F00E          	lfsr	2,14
  7244  0019F2  51C9               	movf	dir_next@dp& (0+255),w,b
  7245  0019F4  26D9               	addwf	fsr2l,f,c
  7246  0019F6  51CA               	movf	(dir_next@dp+1)& (0+255),w,b
  7247  0019F8  22DA               	addwfc	fsr2h,f,c
  7248  0019FA  50DE               	movf	postinc2,w,c
  7249  0019FC  10DE               	iorwf	postinc2,w,c
  7250  0019FE  10DE               	iorwf	postinc2,w,c
  7251  001A00  10DE               	iorwf	postinc2,w,c
  7252  001A02  A4D8               	btfss	status,2,c
  7253  001A04  D002               	goto	l1023
  7254  001A06                     u13430:
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;ff.c: 1142: return FR_NO_FILE;
  7258                           
  7259                           ; BSR set to: 0
  7260  001A06  0E04               	movlw	4
  7261                           
  7262                           ; BSR set to: 0
  7263  001A08  0012               	return	
  7264  001A0A                     l1023:
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;ff.c: 1144: if (!(i % (((UINT)512) / 32))) {
  7268                           
  7269                           ; BSR set to: 0
  7270  001A0A  0E0F               	movlw	15
  7271  001A0C  15D6               	andwf	dir_next@i& (0+255),w,b
  7272  001A0E  6FCD               	movwf	??_dir_next& (0+255),b
  7273  001A10  0E00               	movlw	0
  7274  001A12  15D7               	andwf	(dir_next@i+1)& (0+255),w,b
  7275  001A14  6FCE               	movwf	(??_dir_next+1)& (0+255),b
  7276  001A16  51CD               	movf	??_dir_next& (0+255),w,b
  7277  001A18  11CE               	iorwf	(??_dir_next+1)& (0+255),w,b
  7278  001A1A  A4D8               	btfss	status,2,c
  7279  001A1C  D1AF               	goto	l1031
  7280                           
  7281                           ; BSR set to: 0
  7282                           ;ff.c: 1145: dp->sect++;
  7283  001A1E  EE20 F00E          	lfsr	2,14
  7284  001A22  51C9               	movf	dir_next@dp& (0+255),w,b
  7285  001A24  26D9               	addwf	fsr2l,f,c
  7286  001A26  51CA               	movf	(dir_next@dp+1)& (0+255),w,b
  7287  001A28  22DA               	addwfc	fsr2h,f,c
  7288  001A2A  2ADE               	incf	postinc2,f,c
  7289  001A2C  0E00               	movlw	0
  7290  001A2E  22DE               	addwfc	postinc2,f,c
  7291  001A30  22DE               	addwfc	postinc2,f,c
  7292  001A32  22DE               	addwfc	postinc2,f,c
  7293                           
  7294                           ;ff.c: 1147: if (!dp->clust) {
  7295  001A34  EE20 F00A          	lfsr	2,10
  7296  001A38  51C9               	movf	dir_next@dp& (0+255),w,b
  7297  001A3A  26D9               	addwf	fsr2l,f,c
  7298  001A3C  51CA               	movf	(dir_next@dp+1)& (0+255),w,b
  7299  001A3E  22DA               	addwfc	fsr2h,f,c
  7300  001A40  50DE               	movf	postinc2,w,c
  7301  001A42  10DE               	iorwf	postinc2,w,c
  7302  001A44  10DE               	iorwf	postinc2,w,c
  7303  001A46  10DE               	iorwf	postinc2,w,c
  7304  001A48  A4D8               	btfss	status,2,c
  7305  001A4A  D012               	goto	l1028
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;ff.c: 1148: if (i >= dp->fs->n_rootdir)
  7309  001A4C  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7310  001A50  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7311  001A54  EE10 F008          	lfsr	1,8
  7312  001A58  50DE               	movf	postinc2,w,c
  7313  001A5A  26E1               	addwf	fsr1l,f,c
  7314  001A5C  50DD               	movf	postdec2,w,c
  7315  001A5E  22E2               	addwfc	fsr1h,f,c
  7316  001A60  50E6               	movf	postinc1,w,c
  7317  001A62  5DD6               	subwf	dir_next@i& (0+255),w,b
  7318  001A64  50E6               	movf	postinc1,w,c
  7319  001A66  59D7               	subwfb	(dir_next@i+1)& (0+255),w,b
  7320  001A68  A0D8               	btfss	status,0,c
  7321  001A6A  D188               	goto	l1031
  7322                           
  7323                           ; BSR set to: 0
  7324                           ;ff.c: 1149: return FR_NO_FILE;
  7325  001A6C  0E04               	movlw	4
  7326                           
  7327                           ; BSR set to: 0
  7328  001A6E  0012               	return	
  7329  001A70                     l1028:
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;ff.c: 1151: else {
  7333                           ;ff.c: 1152: if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  7334                           
  7335                           ; BSR set to: 0
  7336  001A70  C0D6  F0CD         	movff	dir_next@i,??_dir_next
  7337  001A74  C0D7  F0CE         	movff	dir_next@i+1,??_dir_next+1
  7338  001A78  0E04               	movlw	4
  7339  001A7A  6FCF               	movwf	(??_dir_next+2)& (0+255),b
  7340  001A7C                     u13475:
  7341  001A7C  90D8               	bcf	status,0,c
  7342  001A7E  33CE               	rrcf	(??_dir_next+1)& (0+255),f,b
  7343  001A80  33CD               	rrcf	??_dir_next& (0+255),f,b
  7344  001A82  2FCF               	decfsz	(??_dir_next+2)& (0+255),f,b
  7345  001A84  D7FB               	goto	u13475
  7346  001A86  0EFF               	movlw	255
  7347  001A88  6FD0               	movwf	(??_dir_next+3)& (0+255),b
  7348  001A8A  0EFF               	movlw	255
  7349  001A8C  6FD1               	movwf	(??_dir_next+4)& (0+255),b
  7350  001A8E  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7351  001A92  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7352  001A96  EE10 F002          	lfsr	1,2
  7353  001A9A  50DE               	movf	postinc2,w,c
  7354  001A9C  26E1               	addwf	fsr1l,f,c
  7355  001A9E  50DD               	movf	postdec2,w,c
  7356  001AA0  22E2               	addwfc	fsr1h,f,c
  7357  001AA2  50E7               	movf	indf1,w,c
  7358  001AA4  6FD2               	movwf	(??_dir_next+5)& (0+255),b
  7359  001AA6  6BD3               	clrf	(??_dir_next+6)& (0+255),b
  7360  001AA8  51D0               	movf	(??_dir_next+3)& (0+255),w,b
  7361  001AAA  27D2               	addwf	(??_dir_next+5)& (0+255),f,b
  7362  001AAC  51D1               	movf	(??_dir_next+4)& (0+255),w,b
  7363  001AAE  23D3               	addwfc	(??_dir_next+6)& (0+255),f,b
  7364  001AB0  51CD               	movf	??_dir_next& (0+255),w,b
  7365  001AB2  17D2               	andwf	(??_dir_next+5)& (0+255),f,b
  7366  001AB4  51CE               	movf	(??_dir_next+1)& (0+255),w,b
  7367  001AB6  17D3               	andwf	(??_dir_next+6)& (0+255),f,b
  7368  001AB8  51D2               	movf	(??_dir_next+5)& (0+255),w,b
  7369  001ABA  11D3               	iorwf	(??_dir_next+6)& (0+255),w,b
  7370  001ABC  A4D8               	btfss	status,2,c
  7371  001ABE  D15E               	goto	l1031
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;ff.c: 1153: clst = get_fat(dp->fs, dp->clust);
  7375  001AC0  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7376  001AC4  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7377  001AC8  CFDE F097          	movff	postinc2,get_fat@fs
  7378  001ACC  CFDD F098          	movff	postdec2,get_fat@fs+1
  7379  001AD0  EE20 F00A          	lfsr	2,10
  7380  001AD4  51C9               	movf	dir_next@dp& (0+255),w,b
  7381  001AD6  26D9               	addwf	fsr2l,f,c
  7382  001AD8  51CA               	movf	(dir_next@dp+1)& (0+255),w,b
  7383  001ADA  22DA               	addwfc	fsr2h,f,c
  7384  001ADC  CFDE F099          	movff	postinc2,get_fat@clst
  7385  001AE0  CFDE F09A          	movff	postinc2,get_fat@clst+1
  7386  001AE4  CFDE F09B          	movff	postinc2,get_fat@clst+2
  7387  001AE8  CFDE F09C          	movff	postinc2,get_fat@clst+3
  7388  001AEC  ECEA  F012         	call	_get_fat	;wreg free
  7389  001AF0  C097  F0D8         	movff	?_get_fat,dir_next@clst
  7390  001AF4  C098  F0D9         	movff	?_get_fat+1,dir_next@clst+1
  7391  001AF8  C099  F0DA         	movff	?_get_fat+2,dir_next@clst+2
  7392  001AFC  C09A  F0DB         	movff	?_get_fat+3,dir_next@clst+3
  7393                           
  7394                           ;ff.c: 1154: if (clst <= 1) return FR_INT_ERR;
  7395  001B00  0100               	movlb	0	; () banked
  7396  001B02  51DB               	movf	(dir_next@clst+3)& (0+255),w,b
  7397  001B04  11DA               	iorwf	(dir_next@clst+2)& (0+255),w,b
  7398  001B06  11D9               	iorwf	(dir_next@clst+1)& (0+255),w,b
  7399  001B08  E106               	bnz	l10793
  7400  001B0A  0E02               	movlw	2
  7401  001B0C  5DD8               	subwf	dir_next@clst& (0+255),w,b
  7402  001B0E  B0D8               	btfsc	status,0,c
  7403  001B10  D002               	goto	l1032
  7404                           
  7405                           ; BSR set to: 0
  7406  001B12  0E02               	movlw	2
  7407                           
  7408                           ; BSR set to: 0
  7409  001B14  0012               	return	
  7410  001B16                     l1032:
  7411  001B16                     l10793:
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;ff.c: 1155: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  7415  001B16  29D8               	incf	dir_next@clst& (0+255),w,b
  7416  001B18  E109               	bnz	l10799
  7417  001B1A  29D9               	incf	(dir_next@clst+1)& (0+255),w,b
  7418  001B1C  E107               	bnz	l10799
  7419  001B1E  29DA               	incf	(dir_next@clst+2)& (0+255),w,b
  7420  001B20  E105               	bnz	l10799
  7421  001B22  29DB               	incf	(dir_next@clst+3)& (0+255),w,b
  7422  001B24  A4D8               	btfss	status,2,c
  7423  001B26  D002               	goto	l1033
  7424                           
  7425                           ; BSR set to: 0
  7426  001B28  0E01               	movlw	1
  7427                           
  7428                           ; BSR set to: 0
  7429  001B2A  0012               	return	
  7430  001B2C                     l1033:
  7431  001B2C                     l10799:
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;ff.c: 1156: if (clst >= dp->fs->n_fatent) {
  7435  001B2C  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7436  001B30  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7437  001B34  EE10 F012          	lfsr	1,18
  7438  001B38  50DE               	movf	postinc2,w,c
  7439  001B3A  26E1               	addwf	fsr1l,f,c
  7440  001B3C  50DD               	movf	postdec2,w,c
  7441  001B3E  22E2               	addwfc	fsr1h,f,c
  7442  001B40  50E6               	movf	postinc1,w,c
  7443  001B42  5DD8               	subwf	dir_next@clst& (0+255),w,b
  7444  001B44  50E6               	movf	postinc1,w,c
  7445  001B46  59D9               	subwfb	(dir_next@clst+1)& (0+255),w,b
  7446  001B48  50E6               	movf	postinc1,w,c
  7447  001B4A  59DA               	subwfb	(dir_next@clst+2)& (0+255),w,b
  7448  001B4C  50E6               	movf	postinc1,w,c
  7449  001B4E  59DB               	subwfb	(dir_next@clst+3)& (0+255),w,b
  7450  001B50  A0D8               	btfss	status,0,c
  7451  001B52  D0E5               	goto	l1034
  7452                           
  7453                           ; BSR set to: 0
  7454                           ;ff.c: 1158: if (!stretch) return FR_NO_FILE;
  7455  001B54  51CB               	movf	dir_next@stretch& (0+255),w,b
  7456  001B56  11CC               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  7457  001B58  A4D8               	btfss	status,2,c
  7458  001B5A  D002               	goto	l1035
  7459                           
  7460                           ; BSR set to: 0
  7461  001B5C  0E04               	movlw	4
  7462                           
  7463                           ; BSR set to: 0
  7464  001B5E  0012               	return	
  7465  001B60                     l1035:
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;ff.c: 1159: clst = create_chain(dp->fs, dp->clust);
  7469                           
  7470                           ; BSR set to: 0
  7471  001B60  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7472  001B64  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7473  001B68  CFDE F0B2          	movff	postinc2,create_chain@fs
  7474  001B6C  CFDD F0B3          	movff	postdec2,create_chain@fs+1
  7475  001B70  EE20 F00A          	lfsr	2,10
  7476  001B74  51C9               	movf	dir_next@dp& (0+255),w,b
  7477  001B76  26D9               	addwf	fsr2l,f,c
  7478  001B78  51CA               	movf	(dir_next@dp+1)& (0+255),w,b
  7479  001B7A  22DA               	addwfc	fsr2h,f,c
  7480  001B7C  CFDE F0B4          	movff	postinc2,create_chain@clst
  7481  001B80  CFDE F0B5          	movff	postinc2,create_chain@clst+1
  7482  001B84  CFDE F0B6          	movff	postinc2,create_chain@clst+2
  7483  001B88  CFDE F0B7          	movff	postinc2,create_chain@clst+3
  7484  001B8C  EC4D  F016         	call	_create_chain	;wreg free
  7485  001B90  C0B2  F0D8         	movff	?_create_chain,dir_next@clst
  7486  001B94  C0B3  F0D9         	movff	?_create_chain+1,dir_next@clst+1
  7487  001B98  C0B4  F0DA         	movff	?_create_chain+2,dir_next@clst+2
  7488  001B9C  C0B5  F0DB         	movff	?_create_chain+3,dir_next@clst+3
  7489                           
  7490                           ;ff.c: 1160: if (clst == 0) return FR_DENIED;
  7491  001BA0  0100               	movlb	0	; () banked
  7492  001BA2  51D8               	movf	dir_next@clst& (0+255),w,b
  7493  001BA4  11D9               	iorwf	(dir_next@clst+1)& (0+255),w,b
  7494  001BA6  11DA               	iorwf	(dir_next@clst+2)& (0+255),w,b
  7495  001BA8  11DB               	iorwf	(dir_next@clst+3)& (0+255),w,b
  7496  001BAA  A4D8               	btfss	status,2,c
  7497  001BAC  D002               	goto	l1036
  7498                           
  7499                           ; BSR set to: 0
  7500  001BAE  0E07               	movlw	7
  7501                           
  7502                           ; BSR set to: 0
  7503  001BB0  0012               	return	
  7504  001BB2                     l1036:
  7505                           
  7506                           ; BSR set to: 0
  7507                           ;ff.c: 1161: if (clst == 1) return FR_INT_ERR;
  7508                           
  7509                           ; BSR set to: 0
  7510  001BB2  05D8               	decf	dir_next@clst& (0+255),w,b
  7511  001BB4  11D9               	iorwf	(dir_next@clst+1)& (0+255),w,b
  7512  001BB6  11DA               	iorwf	(dir_next@clst+2)& (0+255),w,b
  7513  001BB8  11DB               	iorwf	(dir_next@clst+3)& (0+255),w,b
  7514  001BBA  A4D8               	btfss	status,2,c
  7515  001BBC  D002               	goto	l1037
  7516                           
  7517                           ; BSR set to: 0
  7518  001BBE  0E02               	movlw	2
  7519                           
  7520                           ; BSR set to: 0
  7521  001BC0  0012               	return	
  7522  001BC2                     l1037:
  7523                           
  7524                           ; BSR set to: 0
  7525                           ;ff.c: 1162: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  7526                           
  7527                           ; BSR set to: 0
  7528  001BC2  29D8               	incf	dir_next@clst& (0+255),w,b
  7529  001BC4  E109               	bnz	l10827
  7530  001BC6  29D9               	incf	(dir_next@clst+1)& (0+255),w,b
  7531  001BC8  E107               	bnz	l10827
  7532  001BCA  29DA               	incf	(dir_next@clst+2)& (0+255),w,b
  7533  001BCC  E105               	bnz	l10827
  7534  001BCE  29DB               	incf	(dir_next@clst+3)& (0+255),w,b
  7535  001BD0  A4D8               	btfss	status,2,c
  7536  001BD2  D002               	goto	l1038
  7537                           
  7538                           ; BSR set to: 0
  7539  001BD4  0E01               	movlw	1
  7540                           
  7541                           ; BSR set to: 0
  7542  001BD6  0012               	return	
  7543  001BD8                     l1038:
  7544  001BD8                     l10827:
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;ff.c: 1164: if (sync_window(dp->fs)) return FR_DISK_ERR;
  7548  001BD8  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7549  001BDC  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7550  001BE0  CFDE F077          	movff	postinc2,sync_window@fs
  7551  001BE4  CFDD F078          	movff	postdec2,sync_window@fs+1
  7552  001BE8  EC71  F01C         	call	_sync_window	;wreg free
  7553  001BEC  0900               	iorlw	0
  7554  001BEE  B4D8               	btfsc	status,2,c
  7555  001BF0  D002               	goto	l1039
  7556  001BF2  0E01               	movlw	1
  7557  001BF4  0012               	return	
  7558  001BF6                     l1039:
  7559                           
  7560                           ;ff.c: 1165: mem_set(dp->fs->win, 0, ((UINT)512));
  7561  001BF6  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7562  001BFA  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7563  001BFE  CFDE F0CD          	movff	postinc2,??_dir_next
  7564  001C02  CFDD F0CE          	movff	postdec2,??_dir_next+1
  7565  001C06  0E2E               	movlw	46
  7566  001C08  0100               	movlb	0	; () banked
  7567  001C0A  25CD               	addwf	??_dir_next& (0+255),w,b
  7568  001C0C  6E1A               	movwf	mem_set@dst,c
  7569  001C0E  0E00               	movlw	0
  7570  001C10  21CE               	addwfc	(??_dir_next+1)& (0+255),w,b
  7571  001C12  6E1B               	movwf	mem_set@dst+1,c
  7572  001C14  0E00               	movlw	0
  7573  001C16  6E1D               	movwf	mem_set@val+1,c
  7574  001C18  0E00               	movlw	0
  7575  001C1A  6E1C               	movwf	mem_set@val,c
  7576  001C1C  0E02               	movlw	2
  7577  001C1E  6E1F               	movwf	mem_set@cnt+1,c
  7578  001C20  0E00               	movlw	0
  7579  001C22  6E1E               	movwf	mem_set@cnt,c
  7580  001C24  ECD5  F02A         	call	_mem_set	;wreg free
  7581                           
  7582                           ;ff.c: 1166: dp->fs->winsect = clust2sect(dp->fs, clst);
  7583  001C28  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7584  001C2C  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7585  001C30  CFDE F026          	movff	postinc2,clust2sect@fs
  7586  001C34  CFDD F027          	movff	postdec2,clust2sect@fs+1
  7587  001C38  C0D8  F028         	movff	dir_next@clst,clust2sect@clst
  7588  001C3C  C0D9  F029         	movff	dir_next@clst+1,clust2sect@clst+1
  7589  001C40  C0DA  F02A         	movff	dir_next@clst+2,clust2sect@clst+2
  7590  001C44  C0DB  F02B         	movff	dir_next@clst+3,clust2sect@clst+3
  7591  001C48  EC03  F023         	call	_clust2sect	;wreg free
  7592  001C4C  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7593  001C50  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7594  001C54  EE10 F02A          	lfsr	1,42
  7595  001C58  50DE               	movf	postinc2,w,c
  7596  001C5A  26E1               	addwf	fsr1l,f,c
  7597  001C5C  50DD               	movf	postdec2,w,c
  7598  001C5E  22E2               	addwfc	fsr1h,f,c
  7599  001C60  C026  FFE6         	movff	?_clust2sect,postinc1
  7600  001C64  C027  FFE6         	movff	?_clust2sect+1,postinc1
  7601  001C68  C028  FFE6         	movff	?_clust2sect+2,postinc1
  7602  001C6C  C029  FFE6         	movff	?_clust2sect+3,postinc1
  7603                           
  7604                           ;ff.c: 1167: for (c = 0; c < dp->fs->csize; c++) {
  7605  001C70  0E00               	movlw	0
  7606  001C72  0100               	movlb	0	; () banked
  7607  001C74  6FD5               	movwf	(dir_next@c+1)& (0+255),b
  7608  001C76  0E00               	movlw	0
  7609  001C78  6FD4               	movwf	dir_next@c& (0+255),b
  7610  001C7A  D02D               	goto	l1040
  7611  001C7C                     
  7612                           ; BSR set to: 0
  7613                           ;ff.c: 1168: dp->fs->wflag = 1;
  7614                           
  7615                           ; BSR set to: 0
  7616  001C7C  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7617  001C80  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7618  001C84  EE10 F004          	lfsr	1,4
  7619  001C88  50DE               	movf	postinc2,w,c
  7620  001C8A  26E1               	addwf	fsr1l,f,c
  7621  001C8C  50DD               	movf	postdec2,w,c
  7622  001C8E  22E2               	addwfc	fsr1h,f,c
  7623  001C90  0E01               	movlw	1
  7624  001C92  6EE7               	movwf	indf1,c
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;ff.c: 1169: if (sync_window(dp->fs)) return FR_DISK_ERR;
  7628  001C94  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7629  001C98  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7630  001C9C  CFDE F077          	movff	postinc2,sync_window@fs
  7631  001CA0  CFDD F078          	movff	postdec2,sync_window@fs+1
  7632  001CA4  EC71  F01C         	call	_sync_window	;wreg free
  7633  001CA8  0900               	iorlw	0
  7634  001CAA  B4D8               	btfsc	status,2,c
  7635  001CAC  D002               	goto	l1042
  7636  001CAE  0E01               	movlw	1
  7637  001CB0  0012               	return	
  7638  001CB2                     l1042:
  7639                           
  7640                           ;ff.c: 1170: dp->fs->winsect++;
  7641  001CB2  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7642  001CB6  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7643  001CBA  EE10 F02A          	lfsr	1,42
  7644  001CBE  50DE               	movf	postinc2,w,c
  7645  001CC0  26E1               	addwf	fsr1l,f,c
  7646  001CC2  50DD               	movf	postdec2,w,c
  7647  001CC4  22E2               	addwfc	fsr1h,f,c
  7648  001CC6  2AE6               	incf	postinc1,f,c
  7649  001CC8  0E00               	movlw	0
  7650  001CCA  22E6               	addwfc	postinc1,f,c
  7651  001CCC  22E6               	addwfc	postinc1,f,c
  7652  001CCE  22E6               	addwfc	postinc1,f,c
  7653  001CD0  0100               	movlb	0	; () banked
  7654  001CD2  4BD4               	infsnz	dir_next@c& (0+255),f,b
  7655  001CD4  2BD5               	incf	(dir_next@c+1)& (0+255),f,b
  7656  001CD6                     l1040:
  7657                           
  7658                           ; BSR set to: 0
  7659                           
  7660                           ; BSR set to: 0
  7661  001CD6  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7662  001CDA  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7663  001CDE  EE10 F002          	lfsr	1,2
  7664  001CE2  50DE               	movf	postinc2,w,c
  7665  001CE4  26E1               	addwf	fsr1l,f,c
  7666  001CE6  50DD               	movf	postdec2,w,c
  7667  001CE8  22E2               	addwfc	fsr1h,f,c
  7668  001CEA  50E7               	movf	indf1,w,c
  7669  001CEC  6FCD               	movwf	??_dir_next& (0+255),b
  7670  001CEE  6BCE               	clrf	(??_dir_next+1)& (0+255),b
  7671  001CF0  51CD               	movf	??_dir_next& (0+255),w,b
  7672  001CF2  5DD4               	subwf	dir_next@c& (0+255),w,b
  7673  001CF4  51CE               	movf	(??_dir_next+1)& (0+255),w,b
  7674  001CF6  59D5               	subwfb	(dir_next@c+1)& (0+255),w,b
  7675  001CF8  A0D8               	btfss	status,0,c
  7676  001CFA  D7C0               	goto	l1041
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;ff.c: 1171: }
  7680                           ;ff.c: 1172: dp->fs->winsect -= c;
  7681                           
  7682                           ; BSR set to: 0
  7683  001CFC  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7684  001D00  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7685  001D04  EE10 F02A          	lfsr	1,42
  7686  001D08  50DE               	movf	postinc2,w,c
  7687  001D0A  26E1               	addwf	fsr1l,f,c
  7688  001D0C  50DD               	movf	postdec2,w,c
  7689  001D0E  22E2               	addwfc	fsr1h,f,c
  7690  001D10  51D4               	movf	dir_next@c& (0+255),w,b
  7691  001D12  5EE6               	subwf	postinc1,f,c
  7692  001D14  51D5               	movf	(dir_next@c+1)& (0+255),w,b
  7693  001D16  5AE6               	subwfb	postinc1,f,c
  7694  001D18  0E00               	movlw	0
  7695  001D1A  5AE6               	subwfb	postinc1,f,c
  7696  001D1C  5AE6               	subwfb	postinc1,f,c
  7697  001D1E                     l1034:
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;ff.c: 1177: }
  7701                           ;ff.c: 1178: dp->clust = clst;
  7702                           
  7703                           ; BSR set to: 0
  7704  001D1E  EE20 F00A          	lfsr	2,10
  7705  001D22  51C9               	movf	dir_next@dp& (0+255),w,b
  7706  001D24  26D9               	addwf	fsr2l,f,c
  7707  001D26  51CA               	movf	(dir_next@dp+1)& (0+255),w,b
  7708  001D28  22DA               	addwfc	fsr2h,f,c
  7709  001D2A  C0D8  FFDE         	movff	dir_next@clst,postinc2
  7710  001D2E  C0D9  FFDE         	movff	dir_next@clst+1,postinc2
  7711  001D32  C0DA  FFDE         	movff	dir_next@clst+2,postinc2
  7712  001D36  C0DB  FFDE         	movff	dir_next@clst+3,postinc2
  7713                           
  7714                           ; BSR set to: 0
  7715                           ;ff.c: 1179: dp->sect = clust2sect(dp->fs, clst);
  7716  001D3A  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7717  001D3E  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7718  001D42  CFDE F026          	movff	postinc2,clust2sect@fs
  7719  001D46  CFDD F027          	movff	postdec2,clust2sect@fs+1
  7720  001D4A  C0D8  F028         	movff	dir_next@clst,clust2sect@clst
  7721  001D4E  C0D9  F029         	movff	dir_next@clst+1,clust2sect@clst+1
  7722  001D52  C0DA  F02A         	movff	dir_next@clst+2,clust2sect@clst+2
  7723  001D56  C0DB  F02B         	movff	dir_next@clst+3,clust2sect@clst+3
  7724  001D5A  EC03  F023         	call	_clust2sect	;wreg free
  7725  001D5E  0100               	movlb	0	; () banked
  7726  001D60  EE20 F00E          	lfsr	2,14
  7727  001D64  51C9               	movf	dir_next@dp& (0+255),w,b
  7728  001D66  26D9               	addwf	fsr2l,f,c
  7729  001D68  51CA               	movf	(dir_next@dp+1)& (0+255),w,b
  7730  001D6A  22DA               	addwfc	fsr2h,f,c
  7731  001D6C  C026  FFDE         	movff	?_clust2sect,postinc2
  7732  001D70  C027  FFDE         	movff	?_clust2sect+1,postinc2
  7733  001D74  C028  FFDE         	movff	?_clust2sect+2,postinc2
  7734  001D78  C029  FFDE         	movff	?_clust2sect+3,postinc2
  7735  001D7C                     l1031:
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;ff.c: 1180: }
  7739                           ;ff.c: 1181: }
  7740                           ;ff.c: 1182: }
  7741                           ;ff.c: 1184: dp->index = (WORD)i;
  7742                           
  7743                           ; BSR set to: 0
  7744                           
  7745                           ; BSR set to: 0
  7746                           
  7747                           ; BSR set to: 0
  7748  001D7C  EE20 F004          	lfsr	2,4
  7749  001D80  51C9               	movf	dir_next@dp& (0+255),w,b
  7750  001D82  26D9               	addwf	fsr2l,f,c
  7751  001D84  51CA               	movf	(dir_next@dp+1)& (0+255),w,b
  7752  001D86  22DA               	addwfc	fsr2h,f,c
  7753  001D88  C0D6  FFDE         	movff	dir_next@i,postinc2
  7754  001D8C  C0D7  FFDD         	movff	dir_next@i+1,postdec2
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;ff.c: 1185: dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  7758  001D90  0E0F               	movlw	15
  7759  001D92  15D6               	andwf	dir_next@i& (0+255),w,b
  7760  001D94  6FCD               	movwf	??_dir_next& (0+255),b
  7761  001D96  0E00               	movlw	0
  7762  001D98  15D7               	andwf	(dir_next@i+1)& (0+255),w,b
  7763  001D9A  6FCE               	movwf	(??_dir_next+1)& (0+255),b
  7764  001D9C  0E05               	movlw	5
  7765  001D9E                     u13595:
  7766  001D9E  90D8               	bcf	status,0,c
  7767  001DA0  37CD               	rlcf	??_dir_next& (0+255),f,b
  7768  001DA2  37CE               	rlcf	(??_dir_next+1)& (0+255),f,b
  7769  001DA4  2EE8               	decfsz	wreg,f,c
  7770  001DA6  D7FB               	goto	u13595
  7771  001DA8  0E2E               	movlw	46
  7772  001DAA  27CD               	addwf	??_dir_next& (0+255),f,b
  7773  001DAC  0E00               	movlw	0
  7774  001DAE  23CE               	addwfc	(??_dir_next+1)& (0+255),f,b
  7775  001DB0  C0C9  FFD9         	movff	dir_next@dp,fsr2l
  7776  001DB4  C0CA  FFDA         	movff	dir_next@dp+1,fsr2h
  7777  001DB8  CFDE F0CF          	movff	postinc2,??_dir_next+2
  7778  001DBC  CFDD F0D0          	movff	postdec2,??_dir_next+3
  7779  001DC0  51CD               	movf	??_dir_next& (0+255),w,b
  7780  001DC2  27CF               	addwf	(??_dir_next+2)& (0+255),f,b
  7781  001DC4  51CE               	movf	(??_dir_next+1)& (0+255),w,b
  7782  001DC6  23D0               	addwfc	(??_dir_next+3)& (0+255),f,b
  7783  001DC8  EE20 F012          	lfsr	2,18
  7784  001DCC  51C9               	movf	dir_next@dp& (0+255),w,b
  7785  001DCE  26D9               	addwf	fsr2l,f,c
  7786  001DD0  51CA               	movf	(dir_next@dp+1)& (0+255),w,b
  7787  001DD2  22DA               	addwfc	fsr2h,f,c
  7788  001DD4  C0CF  FFDE         	movff	??_dir_next+2,postinc2
  7789  001DD8  C0D0  FFDD         	movff	??_dir_next+3,postdec2
  7790                           
  7791                           ; BSR set to: 0
  7792                           ;ff.c: 1187: return FR_OK;
  7793  001DDC  0E00               	movlw	0
  7794  001DDE  0012               	return	
  7795  001DE0                     __end_of_dir_next:
  7796                           	opt stack 0
  7797                           tblptru	equ	0xFF8
  7798                           tblptrh	equ	0xFF7
  7799                           tblptrl	equ	0xFF6
  7800                           tablat	equ	0xFF5
  7801                           prodh	equ	0xFF4
  7802                           prodl	equ	0xFF3
  7803                           intcon	equ	0xFF2
  7804                           intcon2	equ	0xFF1
  7805                           intcon3	equ	0xFF0
  7806                           indf0	equ	0xFEF
  7807                           postinc0	equ	0xFEE
  7808                           fsr0h	equ	0xFEA
  7809                           fsr0l	equ	0xFE9
  7810                           wreg	equ	0xFE8
  7811                           indf1	equ	0xFE7
  7812                           postinc1	equ	0xFE6
  7813                           postdec1	equ	0xFE5
  7814                           fsr1h	equ	0xFE2
  7815                           fsr1l	equ	0xFE1
  7816                           indf2	equ	0xFDF
  7817                           postinc2	equ	0xFDE
  7818                           postdec2	equ	0xFDD
  7819                           plusw2	equ	0xFDB
  7820                           fsr2h	equ	0xFDA
  7821                           fsr2l	equ	0xFD9
  7822                           status	equ	0xFD8
  7823                           
  7824 ;; *************** function _f_lseek *****************
  7825 ;; Defined at:
  7826 ;;		line 3044 in file "bibliotecas/ff.c"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;  fp              2  105[BANK0 ] PTR struct .
  7829 ;;		 -> fil(32), 
  7830 ;;  ofs             4  107[BANK0 ] unsigned long 
  7831 ;; Auto vars:     Size  Location     Type
  7832 ;;  clst            4   13[BANK1 ] unsigned long 
  7833 ;;  bcs             4    9[BANK1 ] unsigned long 
  7834 ;;  nsect           4    5[BANK1 ] unsigned long 
  7835 ;;  ifptr           4    0[BANK1 ] unsigned long 
  7836 ;;  res             1    4[BANK1 ] enum E75
  7837 ;; Return value:  Size  Location     Type
  7838 ;;                  1    wreg      enum E3966
  7839 ;; Registers used:
  7840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7841 ;; Tracked objects:
  7842 ;;		On entry : 0/0
  7843 ;;		On exit  : 0/0
  7844 ;;		Unchanged: 0/0
  7845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7846 ;;      Params:         0       6       0       0       0       0       0       0       0
  7847 ;;      Locals:         0       0      17       0       0       0       0       0       0
  7848 ;;      Temps:          0      12       0       0       0       0       0       0       0
  7849 ;;      Totals:         0      18      17       0       0       0       0       0       0
  7850 ;;Total ram usage:       35 bytes
  7851 ;; Hardware stack levels used:    1
  7852 ;; Hardware stack levels required when called:   11
  7853 ;; This function calls:
  7854 ;;		___lldiv
  7855 ;;		_clust2sect
  7856 ;;		_create_chain
  7857 ;;		_get_fat
  7858 ;;		_validate
  7859 ;; This function is called by:
  7860 ;;		_open_append
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text28
  7865  0012FC                     __ptext28:
  7866                           	opt stack 0
  7867  0012FC                     _f_lseek:
  7868                           	opt stack 17
  7869                           
  7870                           ;ff.c: 3049: FRESULT res;
  7871                           ;ff.c: 3050: DWORD clst, bcs, nsect, ifptr;
  7872                           ;ff.c: 3056: res = validate(fp);
  7873                           
  7874                           ;incstack = 0
  7875  0012FC  C0C9  F021         	movff	f_lseek@fp,validate@obj
  7876  001300  C0CA  F022         	movff	f_lseek@fp+1,validate@obj+1
  7877  001304  ECC0  F025         	call	_validate	;wreg free
  7878  001308  0101               	movlb	1	; () banked
  7879  00130A  6FD3               	movwf	f_lseek@res& (0+255),b
  7880                           
  7881                           ; BSR set to: 1
  7882                           ;ff.c: 3057: if (res != FR_OK) return res;
  7883  00130C  51D3               	movf	f_lseek@res& (0+255),w,b
  7884  00130E  B4D8               	btfsc	status,2,c
  7885  001310  D002               	goto	l1331
  7886                           
  7887                           ; BSR set to: 1
  7888  001312  51D3               	movf	f_lseek@res& (0+255),w,b
  7889                           
  7890                           ; BSR set to: 1
  7891  001314  0012               	return	
  7892  001316                     l1331:
  7893                           
  7894                           ; BSR set to: 1
  7895                           ;ff.c: 3058: if (fp->err)
  7896                           
  7897                           ; BSR set to: 1
  7898  001316  0100               	movlb	0	; () banked
  7899  001318  EE20 F005          	lfsr	2,5
  7900  00131C  51C9               	movf	f_lseek@fp& (0+255),w,b
  7901  00131E  26D9               	addwf	fsr2l,f,c
  7902  001320  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  7903  001322  22DA               	addwfc	fsr2h,f,c
  7904  001324  50DF               	movf	indf2,w,c
  7905  001326  B4D8               	btfsc	status,2,c
  7906  001328  D008               	goto	l1333
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;ff.c: 3059: return (FRESULT)fp->err;
  7910  00132A  EE20 F005          	lfsr	2,5
  7911  00132E  51C9               	movf	f_lseek@fp& (0+255),w,b
  7912  001330  26D9               	addwf	fsr2l,f,c
  7913  001332  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  7914  001334  22DA               	addwfc	fsr2h,f,c
  7915  001336  50DF               	movf	indf2,w,c
  7916                           
  7917                           ; BSR set to: 0
  7918  001338  0012               	return	
  7919  00133A                     l1333:
  7920                           
  7921                           ; BSR set to: 0
  7922                           ;ff.c: 3117: {
  7923                           ;ff.c: 3118: if (ofs > fp->fsize
  7924                           ;ff.c: 3120: && !(fp->flag & 0x02)
  7925                           ;ff.c: 3122: ) ofs = fp->fsize;
  7926                           
  7927                           ; BSR set to: 0
  7928  00133A  EE20 F00A          	lfsr	2,10
  7929  00133E  51C9               	movf	f_lseek@fp& (0+255),w,b
  7930  001340  26D9               	addwf	fsr2l,f,c
  7931  001342  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  7932  001344  22DA               	addwfc	fsr2h,f,c
  7933  001346  51CB               	movf	f_lseek@ofs& (0+255),w,b
  7934  001348  5CDE               	subwf	postinc2,w,c
  7935  00134A  51CC               	movf	(f_lseek@ofs+1)& (0+255),w,b
  7936  00134C  58DE               	subwfb	postinc2,w,c
  7937  00134E  51CD               	movf	(f_lseek@ofs+2)& (0+255),w,b
  7938  001350  58DE               	subwfb	postinc2,w,c
  7939  001352  51CE               	movf	(f_lseek@ofs+3)& (0+255),w,b
  7940  001354  58DE               	subwfb	postinc2,w,c
  7941  001356  B0D8               	btfsc	status,0,c
  7942  001358  D016               	goto	l1334
  7943                           
  7944                           ; BSR set to: 0
  7945  00135A  EE20 F004          	lfsr	2,4
  7946  00135E  51C9               	movf	f_lseek@fp& (0+255),w,b
  7947  001360  26D9               	addwf	fsr2l,f,c
  7948  001362  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  7949  001364  22DA               	addwfc	fsr2h,f,c
  7950  001366  B2DF               	btfsc	indf2,1,c
  7951  001368  D00E               	goto	l1334
  7952                           
  7953                           ; BSR set to: 0
  7954  00136A  EE20 F00A          	lfsr	2,10
  7955  00136E  51C9               	movf	f_lseek@fp& (0+255),w,b
  7956  001370  26D9               	addwf	fsr2l,f,c
  7957  001372  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  7958  001374  22DA               	addwfc	fsr2h,f,c
  7959  001376  CFDE F0CB          	movff	postinc2,f_lseek@ofs
  7960  00137A  CFDE F0CC          	movff	postinc2,f_lseek@ofs+1
  7961  00137E  CFDE F0CD          	movff	postinc2,f_lseek@ofs+2
  7962  001382  CFDE F0CE          	movff	postinc2,f_lseek@ofs+3
  7963  001386                     l1334:
  7964                           
  7965                           ; BSR set to: 0
  7966                           ;ff.c: 3124: ifptr = fp->fptr;
  7967  001386  EE20 F006          	lfsr	2,6
  7968  00138A  51C9               	movf	f_lseek@fp& (0+255),w,b
  7969  00138C  26D9               	addwf	fsr2l,f,c
  7970  00138E  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  7971  001390  22DA               	addwfc	fsr2h,f,c
  7972  001392  CFDE F1CF          	movff	postinc2,f_lseek@ifptr
  7973  001396  CFDE F1D0          	movff	postinc2,f_lseek@ifptr+1
  7974  00139A  CFDE F1D1          	movff	postinc2,f_lseek@ifptr+2
  7975  00139E  CFDE F1D2          	movff	postinc2,f_lseek@ifptr+3
  7976                           
  7977                           ;ff.c: 3125: fp->fptr = nsect = 0;
  7978  0013A2  0E00               	movlw	0
  7979  0013A4  0101               	movlb	1	; () banked
  7980  0013A6  6FD4               	movwf	f_lseek@nsect& (0+255),b
  7981  0013A8  0E00               	movlw	0
  7982  0013AA  6FD5               	movwf	(f_lseek@nsect+1)& (0+255),b
  7983  0013AC  0E00               	movlw	0
  7984  0013AE  6FD6               	movwf	(f_lseek@nsect+2)& (0+255),b
  7985  0013B0  0E00               	movlw	0
  7986  0013B2  6FD7               	movwf	(f_lseek@nsect+3)& (0+255),b
  7987  0013B4  0100               	movlb	0	; () banked
  7988  0013B6  EE20 F006          	lfsr	2,6
  7989  0013BA  51C9               	movf	f_lseek@fp& (0+255),w,b
  7990  0013BC  26D9               	addwf	fsr2l,f,c
  7991  0013BE  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  7992  0013C0  22DA               	addwfc	fsr2h,f,c
  7993  0013C2  C1D4  FFDE         	movff	f_lseek@nsect,postinc2
  7994  0013C6  C1D5  FFDE         	movff	f_lseek@nsect+1,postinc2
  7995  0013CA  C1D6  FFDE         	movff	f_lseek@nsect+2,postinc2
  7996  0013CE  C1D7  FFDE         	movff	f_lseek@nsect+3,postinc2
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;ff.c: 3126: if (ofs) {
  8000  0013D2  51CB               	movf	f_lseek@ofs& (0+255),w,b
  8001  0013D4  11CC               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  8002  0013D6  11CD               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  8003  0013D8  11CE               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  8004  0013DA  B4D8               	btfsc	status,2,c
  8005  0013DC  D281               	goto	l1352
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;ff.c: 3127: bcs = (DWORD)fp->fs->csize * ((UINT)512);
  8009  0013DE  C0C9  FFD9         	movff	f_lseek@fp,fsr2l
  8010  0013E2  C0CA  FFDA         	movff	f_lseek@fp+1,fsr2h
  8011  0013E6  EE10 F002          	lfsr	1,2
  8012  0013EA  50DE               	movf	postinc2,w,c
  8013  0013EC  26E1               	addwf	fsr1l,f,c
  8014  0013EE  50DD               	movf	postdec2,w,c
  8015  0013F0  22E2               	addwfc	fsr1h,f,c
  8016  0013F2  50E7               	movf	indf1,w,c
  8017  0013F4  6FCF               	movwf	??_f_lseek& (0+255),b
  8018  0013F6  C0CF  F0D0         	movff	??_f_lseek,??_f_lseek+1
  8019  0013FA  6BD1               	clrf	(??_f_lseek+2)& (0+255),b
  8020  0013FC  6BD2               	clrf	(??_f_lseek+3)& (0+255),b
  8021  0013FE  6BD3               	clrf	(??_f_lseek+4)& (0+255),b
  8022  001400  0E09               	movlw	9
  8023  001402                     u15395:
  8024  001402  90D8               	bcf	status,0,c
  8025  001404  37D0               	rlcf	(??_f_lseek+1)& (0+255),f,b
  8026  001406  37D1               	rlcf	(??_f_lseek+2)& (0+255),f,b
  8027  001408  37D2               	rlcf	(??_f_lseek+3)& (0+255),f,b
  8028  00140A  37D3               	rlcf	(??_f_lseek+4)& (0+255),f,b
  8029  00140C  2EE8               	decfsz	wreg,f,c
  8030  00140E  D7F9               	goto	u15395
  8031  001410  C0D0  F1D8         	movff	??_f_lseek+1,f_lseek@bcs
  8032  001414  C0D1  F1D9         	movff	??_f_lseek+2,f_lseek@bcs+1
  8033  001418  C0D2  F1DA         	movff	??_f_lseek+3,f_lseek@bcs+2
  8034  00141C  C0D3  F1DB         	movff	??_f_lseek+4,f_lseek@bcs+3
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;ff.c: 3128: if (ifptr > 0 &&
  8038                           ;ff.c: 3129: (ofs - 1) / bcs >= (ifptr - 1) / bcs) {
  8039  001420  0101               	movlb	1	; () banked
  8040  001422  51CF               	movf	f_lseek@ifptr& (0+255),w,b
  8041  001424  11D0               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  8042  001426  11D1               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  8043  001428  11D2               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  8044  00142A  B4D8               	btfsc	status,2,c
  8045  00142C  D0A4               	goto	l1336
  8046                           
  8047                           ; BSR set to: 1
  8048  00142E  0EFF               	movlw	255
  8049  001430  0100               	movlb	0	; () banked
  8050  001432  25CB               	addwf	f_lseek@ofs& (0+255),w,b
  8051  001434  6E1A               	movwf	___lldiv@dividend,c
  8052  001436  0EFF               	movlw	255
  8053  001438  21CC               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  8054  00143A  6E1B               	movwf	___lldiv@dividend+1,c
  8055  00143C  0EFF               	movlw	255
  8056  00143E  21CD               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  8057  001440  6E1C               	movwf	___lldiv@dividend+2,c
  8058  001442  0EFF               	movlw	255
  8059  001444  21CE               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  8060  001446  6E1D               	movwf	___lldiv@dividend+3,c
  8061  001448  C1D8  F01E         	movff	f_lseek@bcs,___lldiv@divisor
  8062  00144C  C1D9  F01F         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8063  001450  C1DA  F020         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8064  001454  C1DB  F021         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8065  001458  EC94  F026         	call	___lldiv	;wreg free
  8066  00145C  C01A  F0CF         	movff	?___lldiv,??_f_lseek
  8067  001460  C01B  F0D0         	movff	?___lldiv+1,??_f_lseek+1
  8068  001464  C01C  F0D1         	movff	?___lldiv+2,??_f_lseek+2
  8069  001468  C01D  F0D2         	movff	?___lldiv+3,??_f_lseek+3
  8070  00146C  0EFF               	movlw	255
  8071  00146E  0101               	movlb	1	; () banked
  8072  001470  25CF               	addwf	f_lseek@ifptr& (0+255),w,b
  8073  001472  6E1A               	movwf	___lldiv@dividend,c
  8074  001474  0EFF               	movlw	255
  8075  001476  21D0               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8076  001478  6E1B               	movwf	___lldiv@dividend+1,c
  8077  00147A  0EFF               	movlw	255
  8078  00147C  21D1               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8079  00147E  6E1C               	movwf	___lldiv@dividend+2,c
  8080  001480  0EFF               	movlw	255
  8081  001482  21D2               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8082  001484  6E1D               	movwf	___lldiv@dividend+3,c
  8083  001486  C1D8  F01E         	movff	f_lseek@bcs,___lldiv@divisor
  8084  00148A  C1D9  F01F         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8085  00148E  C1DA  F020         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8086  001492  C1DB  F021         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8087  001496  EC94  F026         	call	___lldiv	;wreg free
  8088  00149A  501A               	movf	?___lldiv,w,c
  8089  00149C  0100               	movlb	0	; () banked
  8090  00149E  5DCF               	subwf	??_f_lseek& (0+255),w,b
  8091  0014A0  501B               	movf	?___lldiv+1,w,c
  8092  0014A2  59D0               	subwfb	(??_f_lseek+1)& (0+255),w,b
  8093  0014A4  501C               	movf	?___lldiv+2,w,c
  8094  0014A6  59D1               	subwfb	(??_f_lseek+2)& (0+255),w,b
  8095  0014A8  501D               	movf	?___lldiv+3,w,c
  8096  0014AA  59D2               	subwfb	(??_f_lseek+3)& (0+255),w,b
  8097  0014AC  A0D8               	btfss	status,0,c
  8098  0014AE  D063               	goto	l1336
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;ff.c: 3130: fp->fptr = (ifptr - 1) & ~(bcs - 1);
  8102  0014B0  0EFF               	movlw	255
  8103  0014B2  0101               	movlb	1	; () banked
  8104  0014B4  25D8               	addwf	f_lseek@bcs& (0+255),w,b
  8105  0014B6  0100               	movlb	0	; () banked
  8106  0014B8  6FCF               	movwf	??_f_lseek& (0+255),b
  8107  0014BA  0EFF               	movlw	255
  8108  0014BC  0101               	movlb	1	; () banked
  8109  0014BE  21D9               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  8110  0014C0  0100               	movlb	0	; () banked
  8111  0014C2  6FD0               	movwf	(??_f_lseek+1)& (0+255),b
  8112  0014C4  0EFF               	movlw	255
  8113  0014C6  0101               	movlb	1	; () banked
  8114  0014C8  21DA               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  8115  0014CA  0100               	movlb	0	; () banked
  8116  0014CC  6FD1               	movwf	(??_f_lseek+2)& (0+255),b
  8117  0014CE  0EFF               	movlw	255
  8118  0014D0  0101               	movlb	1	; () banked
  8119  0014D2  21DB               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  8120  0014D4  0100               	movlb	0	; () banked
  8121  0014D6  6FD2               	movwf	(??_f_lseek+3)& (0+255),b
  8122  0014D8  1FCF               	comf	??_f_lseek& (0+255),f,b
  8123  0014DA  1FD0               	comf	(??_f_lseek+1)& (0+255),f,b
  8124  0014DC  1FD1               	comf	(??_f_lseek+2)& (0+255),f,b
  8125  0014DE  1FD2               	comf	(??_f_lseek+3)& (0+255),f,b
  8126  0014E0  0EFF               	movlw	255
  8127  0014E2  0101               	movlb	1	; () banked
  8128  0014E4  25CF               	addwf	f_lseek@ifptr& (0+255),w,b
  8129  0014E6  0100               	movlb	0	; () banked
  8130  0014E8  6FD3               	movwf	(??_f_lseek+4)& (0+255),b
  8131  0014EA  0EFF               	movlw	255
  8132  0014EC  0101               	movlb	1	; () banked
  8133  0014EE  21D0               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8134  0014F0  0100               	movlb	0	; () banked
  8135  0014F2  6FD4               	movwf	(??_f_lseek+5)& (0+255),b
  8136  0014F4  0EFF               	movlw	255
  8137  0014F6  0101               	movlb	1	; () banked
  8138  0014F8  21D1               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8139  0014FA  0100               	movlb	0	; () banked
  8140  0014FC  6FD5               	movwf	(??_f_lseek+6)& (0+255),b
  8141  0014FE  0EFF               	movlw	255
  8142  001500  0101               	movlb	1	; () banked
  8143  001502  21D2               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8144  001504  0100               	movlb	0	; () banked
  8145  001506  6FD6               	movwf	(??_f_lseek+7)& (0+255),b
  8146  001508  51CF               	movf	??_f_lseek& (0+255),w,b
  8147  00150A  15D3               	andwf	(??_f_lseek+4)& (0+255),w,b
  8148  00150C  6FD7               	movwf	(??_f_lseek+8)& (0+255),b
  8149  00150E  51D0               	movf	(??_f_lseek+1)& (0+255),w,b
  8150  001510  15D4               	andwf	(??_f_lseek+5)& (0+255),w,b
  8151  001512  6FD8               	movwf	(??_f_lseek+9)& (0+255),b
  8152  001514  51D1               	movf	(??_f_lseek+2)& (0+255),w,b
  8153  001516  15D5               	andwf	(??_f_lseek+6)& (0+255),w,b
  8154  001518  6FD9               	movwf	(??_f_lseek+10)& (0+255),b
  8155  00151A  51D2               	movf	(??_f_lseek+3)& (0+255),w,b
  8156  00151C  15D6               	andwf	(??_f_lseek+7)& (0+255),w,b
  8157  00151E  6FDA               	movwf	(??_f_lseek+11)& (0+255),b
  8158  001520  EE20 F006          	lfsr	2,6
  8159  001524  51C9               	movf	f_lseek@fp& (0+255),w,b
  8160  001526  26D9               	addwf	fsr2l,f,c
  8161  001528  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8162  00152A  22DA               	addwfc	fsr2h,f,c
  8163  00152C  C0D7  FFDE         	movff	??_f_lseek+8,postinc2
  8164  001530  C0D8  FFDE         	movff	??_f_lseek+9,postinc2
  8165  001534  C0D9  FFDE         	movff	??_f_lseek+10,postinc2
  8166  001538  C0DA  FFDE         	movff	??_f_lseek+11,postinc2
  8167                           
  8168                           ;ff.c: 3131: ofs -= fp->fptr;
  8169  00153C  EE20 F006          	lfsr	2,6
  8170  001540  51C9               	movf	f_lseek@fp& (0+255),w,b
  8171  001542  26D9               	addwf	fsr2l,f,c
  8172  001544  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8173  001546  22DA               	addwfc	fsr2h,f,c
  8174  001548  50DE               	movf	postinc2,w,c
  8175  00154A  5FCB               	subwf	f_lseek@ofs& (0+255),f,b
  8176  00154C  50DE               	movf	postinc2,w,c
  8177  00154E  5BCC               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8178  001550  50DE               	movf	postinc2,w,c
  8179  001552  5BCD               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8180  001554  50DD               	movf	postdec2,w,c
  8181  001556  5BCE               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8182                           
  8183                           ;ff.c: 3132: clst = fp->clust;
  8184  001558  EE20 F012          	lfsr	2,18
  8185  00155C  51C9               	movf	f_lseek@fp& (0+255),w,b
  8186  00155E  26D9               	addwf	fsr2l,f,c
  8187  001560  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8188  001562  22DA               	addwfc	fsr2h,f,c
  8189  001564  CFDE F1DC          	movff	postinc2,f_lseek@clst
  8190  001568  CFDE F1DD          	movff	postinc2,f_lseek@clst+1
  8191  00156C  CFDE F1DE          	movff	postinc2,f_lseek@clst+2
  8192  001570  CFDE F1DF          	movff	postinc2,f_lseek@clst+3
  8193                           
  8194                           ;ff.c: 3133: } else {
  8195  001574  D076               	goto	l1337
  8196  001576                     l1336:
  8197                           
  8198                           ;ff.c: 3134: clst = fp->sclust;
  8199                           
  8200                           ; BSR set to: 0
  8201  001576  0100               	movlb	0	; () banked
  8202  001578  EE20 F00E          	lfsr	2,14
  8203  00157C  51C9               	movf	f_lseek@fp& (0+255),w,b
  8204  00157E  26D9               	addwf	fsr2l,f,c
  8205  001580  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8206  001582  22DA               	addwfc	fsr2h,f,c
  8207  001584  CFDE F1DC          	movff	postinc2,f_lseek@clst
  8208  001588  CFDE F1DD          	movff	postinc2,f_lseek@clst+1
  8209  00158C  CFDE F1DE          	movff	postinc2,f_lseek@clst+2
  8210  001590  CFDE F1DF          	movff	postinc2,f_lseek@clst+3
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;ff.c: 3136: if (clst == 0) {
  8214  001594  0101               	movlb	1	; () banked
  8215  001596  51DC               	movf	f_lseek@clst& (0+255),w,b
  8216  001598  11DD               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8217  00159A  11DE               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8218  00159C  11DF               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8219  00159E  A4D8               	btfss	status,2,c
  8220  0015A0  D051               	goto	l1338
  8221                           
  8222                           ; BSR set to: 1
  8223                           ;ff.c: 3137: clst = create_chain(fp->fs, 0);
  8224  0015A2  C0C9  FFD9         	movff	f_lseek@fp,fsr2l
  8225  0015A6  C0CA  FFDA         	movff	f_lseek@fp+1,fsr2h
  8226  0015AA  CFDE F0B2          	movff	postinc2,create_chain@fs
  8227  0015AE  CFDD F0B3          	movff	postdec2,create_chain@fs+1
  8228  0015B2  0E00               	movlw	0
  8229  0015B4  0100               	movlb	0	; () banked
  8230  0015B6  6FB4               	movwf	create_chain@clst& (0+255),b
  8231  0015B8  0E00               	movlw	0
  8232  0015BA  6FB5               	movwf	(create_chain@clst+1)& (0+255),b
  8233  0015BC  0E00               	movlw	0
  8234  0015BE  6FB6               	movwf	(create_chain@clst+2)& (0+255),b
  8235  0015C0  0E00               	movlw	0
  8236  0015C2  6FB7               	movwf	(create_chain@clst+3)& (0+255),b
  8237  0015C4  EC4D  F016         	call	_create_chain	;wreg free
  8238  0015C8  C0B2  F1DC         	movff	?_create_chain,f_lseek@clst
  8239  0015CC  C0B3  F1DD         	movff	?_create_chain+1,f_lseek@clst+1
  8240  0015D0  C0B4  F1DE         	movff	?_create_chain+2,f_lseek@clst+2
  8241  0015D4  C0B5  F1DF         	movff	?_create_chain+3,f_lseek@clst+3
  8242                           
  8243                           ;ff.c: 3138: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8244  0015D8  0101               	movlb	1	; () banked
  8245  0015DA  05DC               	decf	f_lseek@clst& (0+255),w,b
  8246  0015DC  11DD               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8247  0015DE  11DE               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8248  0015E0  11DF               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8249  0015E2  A4D8               	btfss	status,2,c
  8250  0015E4  D00B               	goto	l1339
  8251                           
  8252                           ; BSR set to: 1
  8253  0015E6  0100               	movlb	0	; () banked
  8254  0015E8  EE20 F005          	lfsr	2,5
  8255  0015EC  51C9               	movf	f_lseek@fp& (0+255),w,b
  8256  0015EE  26D9               	addwf	fsr2l,f,c
  8257  0015F0  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8258  0015F2  22DA               	addwfc	fsr2h,f,c
  8259  0015F4  0E02               	movlw	2
  8260  0015F6  6EDF               	movwf	indf2,c
  8261                           
  8262                           ; BSR set to: 0
  8263  0015F8  0E02               	movlw	2
  8264                           
  8265                           ; BSR set to: 0
  8266  0015FA  0012               	return	
  8267  0015FC                     l1339:
  8268                           
  8269                           ;ff.c: 3139: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
  8270                           
  8271                           ; BSR set to: 0
  8272  0015FC  0101               	movlb	1	; () banked
  8273  0015FE  29DC               	incf	f_lseek@clst& (0+255),w,b
  8274  001600  E112               	bnz	l11855
  8275  001602  29DD               	incf	(f_lseek@clst+1)& (0+255),w,b
  8276  001604  E110               	bnz	l11855
  8277  001606  29DE               	incf	(f_lseek@clst+2)& (0+255),w,b
  8278  001608  E10E               	bnz	l11855
  8279  00160A  29DF               	incf	(f_lseek@clst+3)& (0+255),w,b
  8280  00160C  A4D8               	btfss	status,2,c
  8281  00160E  D00B               	goto	l1340
  8282                           
  8283                           ; BSR set to: 1
  8284  001610  0100               	movlb	0	; () banked
  8285  001612  EE20 F005          	lfsr	2,5
  8286  001616  51C9               	movf	f_lseek@fp& (0+255),w,b
  8287  001618  26D9               	addwf	fsr2l,f,c
  8288  00161A  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8289  00161C  22DA               	addwfc	fsr2h,f,c
  8290  00161E  0E01               	movlw	1
  8291  001620  6EDF               	movwf	indf2,c
  8292                           
  8293                           ; BSR set to: 0
  8294  001622  0E01               	movlw	1
  8295                           
  8296                           ; BSR set to: 0
  8297  001624  0012               	return	
  8298  001626                     l1340:
  8299  001626                     l11855:
  8300                           
  8301                           ;ff.c: 3140: fp->sclust = clst;
  8302  001626  0100               	movlb	0	; () banked
  8303  001628  EE20 F00E          	lfsr	2,14
  8304  00162C  51C9               	movf	f_lseek@fp& (0+255),w,b
  8305  00162E  26D9               	addwf	fsr2l,f,c
  8306  001630  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8307  001632  22DA               	addwfc	fsr2h,f,c
  8308  001634  C1DC  FFDE         	movff	f_lseek@clst,postinc2
  8309  001638  C1DD  FFDE         	movff	f_lseek@clst+1,postinc2
  8310  00163C  C1DE  FFDE         	movff	f_lseek@clst+2,postinc2
  8311  001640  C1DF  FFDE         	movff	f_lseek@clst+3,postinc2
  8312  001644                     l1338:
  8313                           
  8314                           ;ff.c: 3141: }
  8315                           ;ff.c: 3143: fp->clust = clst;
  8316  001644  0100               	movlb	0	; () banked
  8317  001646  EE20 F012          	lfsr	2,18
  8318  00164A  51C9               	movf	f_lseek@fp& (0+255),w,b
  8319  00164C  26D9               	addwf	fsr2l,f,c
  8320  00164E  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8321  001650  22DA               	addwfc	fsr2h,f,c
  8322  001652  C1DC  FFDE         	movff	f_lseek@clst,postinc2
  8323  001656  C1DD  FFDE         	movff	f_lseek@clst+1,postinc2
  8324  00165A  C1DE  FFDE         	movff	f_lseek@clst+2,postinc2
  8325  00165E  C1DF  FFDE         	movff	f_lseek@clst+3,postinc2
  8326  001662                     l1337:
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;ff.c: 3144: }
  8330                           ;ff.c: 3145: if (clst != 0) {
  8331                           
  8332                           ; BSR set to: 0
  8333  001662  0101               	movlb	1	; () banked
  8334  001664  51DC               	movf	f_lseek@clst& (0+255),w,b
  8335  001666  11DD               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8336  001668  11DE               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8337  00166A  11DF               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8338  00166C  A4D8               	btfss	status,2,c
  8339  00166E  D0B8               	goto	l1342
  8340  001670  D137               	goto	l1352
  8341  001672                     
  8342                           ; BSR set to: 1
  8343                           ;ff.c: 3148: if (fp->flag & 0x02) {
  8344                           
  8345                           ; BSR set to: 1
  8346  001672  0100               	movlb	0	; () banked
  8347  001674  EE20 F004          	lfsr	2,4
  8348  001678  51C9               	movf	f_lseek@fp& (0+255),w,b
  8349  00167A  26D9               	addwf	fsr2l,f,c
  8350  00167C  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8351  00167E  22DA               	addwfc	fsr2h,f,c
  8352  001680  A2DF               	btfss	indf2,1,c
  8353  001682  D02A               	goto	l1344
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;ff.c: 3149: clst = create_chain(fp->fs, clst);
  8357  001684  C0C9  FFD9         	movff	f_lseek@fp,fsr2l
  8358  001688  C0CA  FFDA         	movff	f_lseek@fp+1,fsr2h
  8359  00168C  CFDE F0B2          	movff	postinc2,create_chain@fs
  8360  001690  CFDD F0B3          	movff	postdec2,create_chain@fs+1
  8361  001694  C1DC  F0B4         	movff	f_lseek@clst,create_chain@clst
  8362  001698  C1DD  F0B5         	movff	f_lseek@clst+1,create_chain@clst+1
  8363  00169C  C1DE  F0B6         	movff	f_lseek@clst+2,create_chain@clst+2
  8364  0016A0  C1DF  F0B7         	movff	f_lseek@clst+3,create_chain@clst+3
  8365  0016A4  EC4D  F016         	call	_create_chain	;wreg free
  8366  0016A8  C0B2  F1DC         	movff	?_create_chain,f_lseek@clst
  8367  0016AC  C0B3  F1DD         	movff	?_create_chain+1,f_lseek@clst+1
  8368  0016B0  C0B4  F1DE         	movff	?_create_chain+2,f_lseek@clst+2
  8369  0016B4  C0B5  F1DF         	movff	?_create_chain+3,f_lseek@clst+3
  8370                           
  8371                           ;ff.c: 3150: if (clst == 0) {
  8372  0016B8  0101               	movlb	1	; () banked
  8373  0016BA  51DC               	movf	f_lseek@clst& (0+255),w,b
  8374  0016BC  11DD               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8375  0016BE  11DE               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8376  0016C0  11DF               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8377  0016C2  A4D8               	btfss	status,2,c
  8378  0016C4  D023               	goto	l1347
  8379                           
  8380                           ; BSR set to: 1
  8381                           ;ff.c: 3151: ofs = bcs; break;
  8382  0016C6  C1D8  F0CB         	movff	f_lseek@bcs,f_lseek@ofs
  8383  0016CA  C1D9  F0CC         	movff	f_lseek@bcs+1,f_lseek@ofs+1
  8384  0016CE  C1DA  F0CD         	movff	f_lseek@bcs+2,f_lseek@ofs+2
  8385  0016D2  C1DB  F0CE         	movff	f_lseek@bcs+3,f_lseek@ofs+3
  8386  0016D6  D096               	goto	u15510
  8387  0016D8                     l1344:
  8388                           
  8389                           ;ff.c: 3155: clst = get_fat(fp->fs, clst);
  8390                           
  8391                           ; BSR set to: 1
  8392  0016D8  C0C9  FFD9         	movff	f_lseek@fp,fsr2l
  8393  0016DC  C0CA  FFDA         	movff	f_lseek@fp+1,fsr2h
  8394  0016E0  CFDE F097          	movff	postinc2,get_fat@fs
  8395  0016E4  CFDD F098          	movff	postdec2,get_fat@fs+1
  8396  0016E8  C1DC  F099         	movff	f_lseek@clst,get_fat@clst
  8397  0016EC  C1DD  F09A         	movff	f_lseek@clst+1,get_fat@clst+1
  8398  0016F0  C1DE  F09B         	movff	f_lseek@clst+2,get_fat@clst+2
  8399  0016F4  C1DF  F09C         	movff	f_lseek@clst+3,get_fat@clst+3
  8400  0016F8  ECEA  F012         	call	_get_fat	;wreg free
  8401  0016FC  C097  F1DC         	movff	?_get_fat,f_lseek@clst
  8402  001700  C098  F1DD         	movff	?_get_fat+1,f_lseek@clst+1
  8403  001704  C099  F1DE         	movff	?_get_fat+2,f_lseek@clst+2
  8404  001708  C09A  F1DF         	movff	?_get_fat+3,f_lseek@clst+3
  8405  00170C                     l1347:
  8406                           
  8407                           ;ff.c: 3156: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
  8408  00170C  0101               	movlb	1	; () banked
  8409  00170E  29DC               	incf	f_lseek@clst& (0+255),w,b
  8410  001710  E112               	bnz	l11879
  8411  001712  29DD               	incf	(f_lseek@clst+1)& (0+255),w,b
  8412  001714  E110               	bnz	l11879
  8413  001716  29DE               	incf	(f_lseek@clst+2)& (0+255),w,b
  8414  001718  E10E               	bnz	l11879
  8415  00171A  29DF               	incf	(f_lseek@clst+3)& (0+255),w,b
  8416  00171C  A4D8               	btfss	status,2,c
  8417  00171E  D00B               	goto	l1348
  8418                           
  8419                           ; BSR set to: 1
  8420  001720  0100               	movlb	0	; () banked
  8421  001722  EE20 F005          	lfsr	2,5
  8422  001726  51C9               	movf	f_lseek@fp& (0+255),w,b
  8423  001728  26D9               	addwf	fsr2l,f,c
  8424  00172A  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8425  00172C  22DA               	addwfc	fsr2h,f,c
  8426  00172E  0E01               	movlw	1
  8427  001730  6EDF               	movwf	indf2,c
  8428                           
  8429                           ; BSR set to: 0
  8430  001732  0E01               	movlw	1
  8431                           
  8432                           ; BSR set to: 0
  8433  001734  0012               	return	
  8434  001736                     l1348:
  8435  001736                     l11879:
  8436                           
  8437                           ;ff.c: 3157: if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_ERR); 
      +                          return FR_INT_ERR; };
  8438  001736  0101               	movlb	1	; () banked
  8439  001738  51DF               	movf	(f_lseek@clst+3)& (0+255),w,b
  8440  00173A  11DE               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8441  00173C  11DD               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8442  00173E  E104               	bnz	u15490
  8443  001740  0E02               	movlw	2
  8444  001742  5DDC               	subwf	f_lseek@clst& (0+255),w,b
  8445  001744  A0D8               	btfss	status,0,c
  8446  001746  D014               	goto	u15500
  8447  001748                     u15490:
  8448                           
  8449                           ; BSR set to: 1
  8450  001748  C0C9  FFD9         	movff	f_lseek@fp,fsr2l
  8451  00174C  C0CA  FFDA         	movff	f_lseek@fp+1,fsr2h
  8452  001750  EE10 F012          	lfsr	1,18
  8453  001754  50DE               	movf	postinc2,w,c
  8454  001756  26E1               	addwf	fsr1l,f,c
  8455  001758  50DD               	movf	postdec2,w,c
  8456  00175A  22E2               	addwfc	fsr1h,f,c
  8457  00175C  50E6               	movf	postinc1,w,c
  8458  00175E  5DDC               	subwf	f_lseek@clst& (0+255),w,b
  8459  001760  50E6               	movf	postinc1,w,c
  8460  001762  59DD               	subwfb	(f_lseek@clst+1)& (0+255),w,b
  8461  001764  50E6               	movf	postinc1,w,c
  8462  001766  59DE               	subwfb	(f_lseek@clst+2)& (0+255),w,b
  8463  001768  50E6               	movf	postinc1,w,c
  8464  00176A  59DF               	subwfb	(f_lseek@clst+3)& (0+255),w,b
  8465  00176C  A0D8               	btfss	status,0,c
  8466  00176E  D00B               	goto	l1349
  8467  001770                     u15500:
  8468                           
  8469                           ; BSR set to: 1
  8470                           
  8471                           ; BSR set to: 1
  8472  001770  0100               	movlb	0	; () banked
  8473  001772  EE20 F005          	lfsr	2,5
  8474  001776  51C9               	movf	f_lseek@fp& (0+255),w,b
  8475  001778  26D9               	addwf	fsr2l,f,c
  8476  00177A  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8477  00177C  22DA               	addwfc	fsr2h,f,c
  8478  00177E  0E02               	movlw	2
  8479  001780  6EDF               	movwf	indf2,c
  8480                           
  8481                           ; BSR set to: 0
  8482  001782  0E02               	movlw	2
  8483                           
  8484                           ; BSR set to: 0
  8485  001784  0012               	return	
  8486  001786                     l1349:
  8487                           
  8488                           ;ff.c: 3158: fp->clust = clst;
  8489                           
  8490                           ; BSR set to: 0
  8491  001786  0100               	movlb	0	; () banked
  8492  001788  EE20 F012          	lfsr	2,18
  8493  00178C  51C9               	movf	f_lseek@fp& (0+255),w,b
  8494  00178E  26D9               	addwf	fsr2l,f,c
  8495  001790  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8496  001792  22DA               	addwfc	fsr2h,f,c
  8497  001794  C1DC  FFDE         	movff	f_lseek@clst,postinc2
  8498  001798  C1DD  FFDE         	movff	f_lseek@clst+1,postinc2
  8499  00179C  C1DE  FFDE         	movff	f_lseek@clst+2,postinc2
  8500  0017A0  C1DF  FFDE         	movff	f_lseek@clst+3,postinc2
  8501                           
  8502                           ;ff.c: 3159: fp->fptr += bcs;
  8503  0017A4  EE20 F006          	lfsr	2,6
  8504  0017A8  51C9               	movf	f_lseek@fp& (0+255),w,b
  8505  0017AA  26D9               	addwf	fsr2l,f,c
  8506  0017AC  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8507  0017AE  22DA               	addwfc	fsr2h,f,c
  8508  0017B0  0101               	movlb	1	; () banked
  8509  0017B2  51D8               	movf	f_lseek@bcs& (0+255),w,b
  8510  0017B4  26DE               	addwf	postinc2,f,c
  8511  0017B6  51D9               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8512  0017B8  22DE               	addwfc	postinc2,f,c
  8513  0017BA  51DA               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8514  0017BC  22DE               	addwfc	postinc2,f,c
  8515  0017BE  51DB               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8516  0017C0  22DE               	addwfc	postinc2,f,c
  8517                           
  8518                           ; BSR set to: 1
  8519                           ;ff.c: 3160: ofs -= bcs;
  8520  0017C2  51D8               	movf	f_lseek@bcs& (0+255),w,b
  8521  0017C4  0100               	movlb	0	; () banked
  8522  0017C6  5FCB               	subwf	f_lseek@ofs& (0+255),f,b
  8523  0017C8  0101               	movlb	1	; () banked
  8524  0017CA  51D9               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8525  0017CC  0100               	movlb	0	; () banked
  8526  0017CE  5BCC               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8527  0017D0  0101               	movlb	1	; () banked
  8528  0017D2  51DA               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8529  0017D4  0100               	movlb	0	; () banked
  8530  0017D6  5BCD               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8531  0017D8  0101               	movlb	1	; () banked
  8532  0017DA  51DB               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8533  0017DC  0100               	movlb	0	; () banked
  8534  0017DE  5BCE               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8535  0017E0                     l1342:
  8536                           
  8537                           ; BSR set to: 0
  8538  0017E0  0100               	movlb	0	; () banked
  8539  0017E2  51CB               	movf	f_lseek@ofs& (0+255),w,b
  8540  0017E4  0101               	movlb	1	; () banked
  8541  0017E6  5DD8               	subwf	f_lseek@bcs& (0+255),w,b
  8542  0017E8  0100               	movlb	0	; () banked
  8543  0017EA  51CC               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8544  0017EC  0101               	movlb	1	; () banked
  8545  0017EE  59D9               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
  8546  0017F0  0100               	movlb	0	; () banked
  8547  0017F2  51CD               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8548  0017F4  0101               	movlb	1	; () banked
  8549  0017F6  59DA               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
  8550  0017F8  0100               	movlb	0	; () banked
  8551  0017FA  51CE               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8552  0017FC  0101               	movlb	1	; () banked
  8553  0017FE  59DB               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
  8554  001800  A0D8               	btfss	status,0,c
  8555  001802  D737               	goto	l1343
  8556  001804                     u15510:
  8557                           
  8558                           ; BSR set to: 1
  8559                           ;ff.c: 3161: }
  8560                           ;ff.c: 3162: fp->fptr += ofs;
  8561                           
  8562                           ; BSR set to: 1
  8563  001804  0100               	movlb	0	; () banked
  8564  001806  EE20 F006          	lfsr	2,6
  8565  00180A  51C9               	movf	f_lseek@fp& (0+255),w,b
  8566  00180C  26D9               	addwf	fsr2l,f,c
  8567  00180E  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8568  001810  22DA               	addwfc	fsr2h,f,c
  8569  001812  51CB               	movf	f_lseek@ofs& (0+255),w,b
  8570  001814  26DE               	addwf	postinc2,f,c
  8571  001816  51CC               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8572  001818  22DE               	addwfc	postinc2,f,c
  8573  00181A  51CD               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8574  00181C  22DE               	addwfc	postinc2,f,c
  8575  00181E  51CE               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8576  001820  22DE               	addwfc	postinc2,f,c
  8577                           
  8578                           ; BSR set to: 0
  8579                           ;ff.c: 3163: if (ofs % ((UINT)512)) {
  8580  001822  0EFF               	movlw	255
  8581  001824  15CB               	andwf	f_lseek@ofs& (0+255),w,b
  8582  001826  6FCF               	movwf	??_f_lseek& (0+255),b
  8583  001828  0E01               	movlw	1
  8584  00182A  15CC               	andwf	(f_lseek@ofs+1)& (0+255),w,b
  8585  00182C  6FD0               	movwf	(??_f_lseek+1)& (0+255),b
  8586  00182E  0E00               	movlw	0
  8587  001830  15CD               	andwf	(f_lseek@ofs+2)& (0+255),w,b
  8588  001832  6FD1               	movwf	(??_f_lseek+2)& (0+255),b
  8589  001834  0E00               	movlw	0
  8590  001836  15CE               	andwf	(f_lseek@ofs+3)& (0+255),w,b
  8591  001838  6FD2               	movwf	(??_f_lseek+3)& (0+255),b
  8592  00183A  51CF               	movf	??_f_lseek& (0+255),w,b
  8593  00183C  11D0               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8594  00183E  11D1               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8595  001840  11D2               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8596  001842  B4D8               	btfsc	status,2,c
  8597  001844  D04D               	goto	l1352
  8598                           
  8599                           ; BSR set to: 0
  8600                           ;ff.c: 3164: nsect = clust2sect(fp->fs, clst);
  8601  001846  C0C9  FFD9         	movff	f_lseek@fp,fsr2l
  8602  00184A  C0CA  FFDA         	movff	f_lseek@fp+1,fsr2h
  8603  00184E  CFDE F026          	movff	postinc2,clust2sect@fs
  8604  001852  CFDD F027          	movff	postdec2,clust2sect@fs+1
  8605  001856  C1DC  F028         	movff	f_lseek@clst,clust2sect@clst
  8606  00185A  C1DD  F029         	movff	f_lseek@clst+1,clust2sect@clst+1
  8607  00185E  C1DE  F02A         	movff	f_lseek@clst+2,clust2sect@clst+2
  8608  001862  C1DF  F02B         	movff	f_lseek@clst+3,clust2sect@clst+3
  8609  001866  EC03  F023         	call	_clust2sect	;wreg free
  8610  00186A  C026  F1D4         	movff	?_clust2sect,f_lseek@nsect
  8611  00186E  C027  F1D5         	movff	?_clust2sect+1,f_lseek@nsect+1
  8612  001872  C028  F1D6         	movff	?_clust2sect+2,f_lseek@nsect+2
  8613  001876  C029  F1D7         	movff	?_clust2sect+3,f_lseek@nsect+3
  8614                           
  8615                           ;ff.c: 3165: if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8616  00187A  0101               	movlb	1	; () banked
  8617  00187C  51D4               	movf	f_lseek@nsect& (0+255),w,b
  8618  00187E  11D5               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
  8619  001880  11D6               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
  8620  001882  11D7               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
  8621  001884  A4D8               	btfss	status,2,c
  8622  001886  D00B               	goto	l1353
  8623                           
  8624                           ; BSR set to: 1
  8625  001888  0100               	movlb	0	; () banked
  8626  00188A  EE20 F005          	lfsr	2,5
  8627  00188E  51C9               	movf	f_lseek@fp& (0+255),w,b
  8628  001890  26D9               	addwf	fsr2l,f,c
  8629  001892  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8630  001894  22DA               	addwfc	fsr2h,f,c
  8631  001896  0E02               	movlw	2
  8632  001898  6EDF               	movwf	indf2,c
  8633                           
  8634                           ; BSR set to: 0
  8635  00189A  0E02               	movlw	2
  8636                           
  8637                           ; BSR set to: 0
  8638  00189C  0012               	return	
  8639  00189E                     l1353:
  8640                           
  8641                           ;ff.c: 3166: nsect += ofs / ((UINT)512);
  8642                           
  8643                           ; BSR set to: 0
  8644  00189E  C0CB  F0CF         	movff	f_lseek@ofs,??_f_lseek
  8645  0018A2  C0CC  F0D0         	movff	f_lseek@ofs+1,??_f_lseek+1
  8646  0018A6  C0CD  F0D1         	movff	f_lseek@ofs+2,??_f_lseek+2
  8647  0018AA  C0CE  F0D2         	movff	f_lseek@ofs+3,??_f_lseek+3
  8648  0018AE  0E0A               	movlw	10
  8649  0018B0  D006               	goto	u15540
  8650  0018B2                     u15545:
  8651  0018B2  0100               	movlb	0	; () banked
  8652  0018B4  90D8               	bcf	status,0,c
  8653  0018B6  33D2               	rrcf	(??_f_lseek+3)& (0+255),f,b
  8654  0018B8  33D1               	rrcf	(??_f_lseek+2)& (0+255),f,b
  8655  0018BA  33D0               	rrcf	(??_f_lseek+1)& (0+255),f,b
  8656  0018BC  33CF               	rrcf	??_f_lseek& (0+255),f,b
  8657  0018BE                     u15540:
  8658  0018BE  2EE8               	decfsz	wreg,f,c
  8659  0018C0  D7F8               	goto	u15545
  8660  0018C2  51CF               	movf	??_f_lseek& (0+255),w,b
  8661  0018C4  0101               	movlb	1	; () banked
  8662  0018C6  27D4               	addwf	f_lseek@nsect& (0+255),f,b
  8663  0018C8  0100               	movlb	0	; () banked
  8664  0018CA  51D0               	movf	(??_f_lseek+1)& (0+255),w,b
  8665  0018CC  0101               	movlb	1	; () banked
  8666  0018CE  23D5               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
  8667  0018D0  0100               	movlb	0	; () banked
  8668  0018D2  51D1               	movf	(??_f_lseek+2)& (0+255),w,b
  8669  0018D4  0101               	movlb	1	; () banked
  8670  0018D6  23D6               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
  8671  0018D8  0100               	movlb	0	; () banked
  8672  0018DA  51D2               	movf	(??_f_lseek+3)& (0+255),w,b
  8673  0018DC  0101               	movlb	1	; () banked
  8674  0018DE  23D7               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
  8675  0018E0                     l1352:
  8676                           
  8677                           ;ff.c: 3167: }
  8678                           ;ff.c: 3168: }
  8679                           ;ff.c: 3169: }
  8680                           ;ff.c: 3170: if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
  8681                           
  8682                           ; BSR set to: 1
  8683                           
  8684                           ; BSR set to: 1
  8685                           
  8686                           ; BSR set to: 1
  8687  0018E0  0100               	movlb	0	; () banked
  8688  0018E2  EE20 F006          	lfsr	2,6
  8689  0018E6  51C9               	movf	f_lseek@fp& (0+255),w,b
  8690  0018E8  26D9               	addwf	fsr2l,f,c
  8691  0018EA  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8692  0018EC  22DA               	addwfc	fsr2h,f,c
  8693  0018EE  0EFF               	movlw	255
  8694  0018F0  14DE               	andwf	postinc2,w,c
  8695  0018F2  6FCF               	movwf	??_f_lseek& (0+255),b
  8696  0018F4  0E01               	movlw	1
  8697  0018F6  14DE               	andwf	postinc2,w,c
  8698  0018F8  6FD0               	movwf	(??_f_lseek+1)& (0+255),b
  8699  0018FA  0E00               	movlw	0
  8700  0018FC  14DE               	andwf	postinc2,w,c
  8701  0018FE  6FD1               	movwf	(??_f_lseek+2)& (0+255),b
  8702  001900  0E00               	movlw	0
  8703  001902  14DE               	andwf	postinc2,w,c
  8704  001904  6FD2               	movwf	(??_f_lseek+3)& (0+255),b
  8705  001906  51CF               	movf	??_f_lseek& (0+255),w,b
  8706  001908  11D0               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8707  00190A  11D1               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8708  00190C  11D2               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8709  00190E  B4D8               	btfsc	status,2,c
  8710  001910  D023               	goto	l1354
  8711                           
  8712                           ; BSR set to: 0
  8713  001912  EE20 F016          	lfsr	2,22
  8714  001916  51C9               	movf	f_lseek@fp& (0+255),w,b
  8715  001918  26D9               	addwf	fsr2l,f,c
  8716  00191A  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8717  00191C  22DA               	addwfc	fsr2h,f,c
  8718  00191E  0101               	movlb	1	; () banked
  8719  001920  51D4               	movf	f_lseek@nsect& (0+255),w,b
  8720  001922  18DE               	xorwf	postinc2,w,c
  8721  001924  E10A               	bnz	u15560
  8722  001926  51D5               	movf	(f_lseek@nsect+1)& (0+255),w,b
  8723  001928  18DE               	xorwf	postinc2,w,c
  8724  00192A  E107               	bnz	u15560
  8725  00192C  51D6               	movf	(f_lseek@nsect+2)& (0+255),w,b
  8726  00192E  18DE               	xorwf	postinc2,w,c
  8727  001930  E104               	bnz	u15560
  8728  001932  51D7               	movf	(f_lseek@nsect+3)& (0+255),w,b
  8729  001934  18DE               	xorwf	postinc2,w,c
  8730  001936  B4D8               	btfsc	status,2,c
  8731  001938  D00F               	goto	l1354
  8732  00193A                     u15560:
  8733                           
  8734                           ; BSR set to: 1
  8735                           ;ff.c: 3182: fp->dsect = nsect;
  8736  00193A  0100               	movlb	0	; () banked
  8737  00193C  EE20 F016          	lfsr	2,22
  8738  001940  51C9               	movf	f_lseek@fp& (0+255),w,b
  8739  001942  26D9               	addwf	fsr2l,f,c
  8740  001944  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8741  001946  22DA               	addwfc	fsr2h,f,c
  8742  001948  C1D4  FFDE         	movff	f_lseek@nsect,postinc2
  8743  00194C  C1D5  FFDE         	movff	f_lseek@nsect+1,postinc2
  8744  001950  C1D6  FFDE         	movff	f_lseek@nsect+2,postinc2
  8745  001954  C1D7  FFDE         	movff	f_lseek@nsect+3,postinc2
  8746  001958                     l1354:
  8747                           
  8748                           ;ff.c: 3183: }
  8749                           ;ff.c: 3185: if (fp->fptr > fp->fsize) {
  8750                           
  8751                           ; BSR set to: 0
  8752  001958  0100               	movlb	0	; () banked
  8753  00195A  EE20 F006          	lfsr	2,6
  8754  00195E  51C9               	movf	f_lseek@fp& (0+255),w,b
  8755  001960  26D9               	addwf	fsr2l,f,c
  8756  001962  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8757  001964  22DA               	addwfc	fsr2h,f,c
  8758  001966  EE10 F00A          	lfsr	1,10
  8759  00196A  51C9               	movf	f_lseek@fp& (0+255),w,b
  8760  00196C  26E1               	addwf	fsr1l,f,c
  8761  00196E  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8762  001970  22E2               	addwfc	fsr1h,f,c
  8763  001972  50DE               	movf	postinc2,w,c
  8764  001974  5CE6               	subwf	postinc1,w,c
  8765  001976  50DE               	movf	postinc2,w,c
  8766  001978  58E6               	subwfb	postinc1,w,c
  8767  00197A  50DE               	movf	postinc2,w,c
  8768  00197C  58E6               	subwfb	postinc1,w,c
  8769  00197E  50DE               	movf	postinc2,w,c
  8770  001980  58E6               	subwfb	postinc1,w,c
  8771  001982  B0D8               	btfsc	status,0,c
  8772  001984  D01C               	goto	l1355
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;ff.c: 3186: fp->fsize = fp->fptr;
  8776  001986  EE20 F006          	lfsr	2,6
  8777  00198A  51C9               	movf	f_lseek@fp& (0+255),w,b
  8778  00198C  26D9               	addwf	fsr2l,f,c
  8779  00198E  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8780  001990  22DA               	addwfc	fsr2h,f,c
  8781  001992  EE10 F00A          	lfsr	1,10
  8782  001996  51C9               	movf	f_lseek@fp& (0+255),w,b
  8783  001998  26E1               	addwf	fsr1l,f,c
  8784  00199A  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8785  00199C  22E2               	addwfc	fsr1h,f,c
  8786  00199E  CFDE FFE6          	movff	postinc2,postinc1
  8787  0019A2  CFDE FFE6          	movff	postinc2,postinc1
  8788  0019A6  CFDE FFE6          	movff	postinc2,postinc1
  8789  0019AA  CFDE FFE6          	movff	postinc2,postinc1
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;ff.c: 3187: fp->flag |= 0x20;
  8793  0019AE  EE20 F004          	lfsr	2,4
  8794  0019B2  51C9               	movf	f_lseek@fp& (0+255),w,b
  8795  0019B4  26D9               	addwf	fsr2l,f,c
  8796  0019B6  51CA               	movf	(f_lseek@fp+1)& (0+255),w,b
  8797  0019B8  22DA               	addwfc	fsr2h,f,c
  8798  0019BA  0E00               	movlw	0
  8799  0019BC  8ADB               	bsf	plusw2,5,c
  8800  0019BE                     l1355:
  8801                           
  8802                           ; BSR set to: 0
  8803                           ;ff.c: 3188: }
  8804                           ;ff.c: 3190: }
  8805                           ;ff.c: 3192: return res;
  8806                           
  8807                           ; BSR set to: 0
  8808  0019BE  0101               	movlb	1	; () banked
  8809  0019C0  51D3               	movf	f_lseek@res& (0+255),w,b
  8810  0019C2  0012               	return	
  8811  0019C4                     __end_of_f_lseek:
  8812                           	opt stack 0
  8813                           tblptru	equ	0xFF8
  8814                           tblptrh	equ	0xFF7
  8815                           tblptrl	equ	0xFF6
  8816                           tablat	equ	0xFF5
  8817                           prodh	equ	0xFF4
  8818                           prodl	equ	0xFF3
  8819                           intcon	equ	0xFF2
  8820                           intcon2	equ	0xFF1
  8821                           intcon3	equ	0xFF0
  8822                           indf0	equ	0xFEF
  8823                           postinc0	equ	0xFEE
  8824                           fsr0h	equ	0xFEA
  8825                           fsr0l	equ	0xFE9
  8826                           wreg	equ	0xFE8
  8827                           indf1	equ	0xFE7
  8828                           postinc1	equ	0xFE6
  8829                           postdec1	equ	0xFE5
  8830                           fsr1h	equ	0xFE2
  8831                           fsr1l	equ	0xFE1
  8832                           indf2	equ	0xFDF
  8833                           postinc2	equ	0xFDE
  8834                           postdec2	equ	0xFDD
  8835                           plusw2	equ	0xFDB
  8836                           fsr2h	equ	0xFDA
  8837                           fsr2l	equ	0xFD9
  8838                           status	equ	0xFD8
  8839                           
  8840 ;; *************** function _f_close *****************
  8841 ;; Defined at:
  8842 ;;		line 2872 in file "bibliotecas/ff.c"
  8843 ;; Parameters:    Size  Location     Type
  8844 ;;  fp              2   64[BANK0 ] PTR struct .
  8845 ;;		 -> fil(32), 
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;  res             1   66[BANK0 ] enum E75
  8848 ;; Return value:  Size  Location     Type
  8849 ;;                  1    wreg      enum E3966
  8850 ;; Registers used:
  8851 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8852 ;; Tracked objects:
  8853 ;;		On entry : 0/0
  8854 ;;		On exit  : 0/0
  8855 ;;		Unchanged: 0/0
  8856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8857 ;;      Params:         0       2       0       0       0       0       0       0       0
  8858 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8859 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8860 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8861 ;;Total ram usage:        3 bytes
  8862 ;; Hardware stack levels used:    1
  8863 ;; Hardware stack levels required when called:   10
  8864 ;; This function calls:
  8865 ;;		_f_sync
  8866 ;;		_validate
  8867 ;; This function is called by:
  8868 ;;		_SDCard
  8869 ;;		_open_append
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           	psect	text29
  8874  00540C                     __ptext29:
  8875                           	opt stack 0
  8876  00540C                     _f_close:
  8877                           	opt stack 18
  8878                           
  8879                           ;ff.c: 2876: FRESULT res;
  8880                           ;ff.c: 2880: res = f_sync(fp);
  8881                           
  8882                           ;incstack = 0
  8883  00540C  C0A0  F097         	movff	f_close@fp,f_sync@fp
  8884  005410  C0A1  F098         	movff	f_close@fp+1,f_sync@fp+1
  8885  005414  EC26  F01D         	call	_f_sync	;wreg free
  8886  005418  0100               	movlb	0	; () banked
  8887  00541A  6FA2               	movwf	f_close@res& (0+255),b
  8888                           
  8889                           ; BSR set to: 0
  8890                           ;ff.c: 2881: if (res == FR_OK)
  8891  00541C  51A2               	movf	f_close@res& (0+255),w,b
  8892  00541E  A4D8               	btfss	status,2,c
  8893  005420  0012               	return	
  8894                           
  8895                           ; BSR set to: 0
  8896                           ;ff.c: 2883: {
  8897                           ;ff.c: 2884: res = validate(fp);
  8898  005422  C0A0  F021         	movff	f_close@fp,validate@obj
  8899  005426  C0A1  F022         	movff	f_close@fp+1,validate@obj+1
  8900  00542A  ECC0  F025         	call	_validate	;wreg free
  8901  00542E  0100               	movlb	0	; () banked
  8902  005430  6FA2               	movwf	f_close@res& (0+255),b
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;ff.c: 2885: if (res == FR_OK) {
  8906  005432  51A2               	movf	f_close@res& (0+255),w,b
  8907  005434  A4D8               	btfss	status,2,c
  8908  005436  0012               	return	
  8909                           
  8910                           ; BSR set to: 0
  8911                           ;ff.c: 2893: fp->fs = 0;
  8912  005438  C0A0  FFD9         	movff	f_close@fp,fsr2l
  8913  00543C  C0A1  FFDA         	movff	f_close@fp+1,fsr2h
  8914  005440  0E00               	movlw	0
  8915  005442  6EDE               	movwf	postinc2,c
  8916  005444  0E00               	movlw	0
  8917  005446  6EDD               	movwf	postdec2,c
  8918                           
  8919                           ; BSR set to: 0
  8920                           
  8921                           ; BSR set to: 0
  8922  005448  0012               	return	
  8923  00544A                     __end_of_f_close:
  8924                           	opt stack 0
  8925                           tblptru	equ	0xFF8
  8926                           tblptrh	equ	0xFF7
  8927                           tblptrl	equ	0xFF6
  8928                           tablat	equ	0xFF5
  8929                           prodh	equ	0xFF4
  8930                           prodl	equ	0xFF3
  8931                           intcon	equ	0xFF2
  8932                           intcon2	equ	0xFF1
  8933                           intcon3	equ	0xFF0
  8934                           indf0	equ	0xFEF
  8935                           postinc0	equ	0xFEE
  8936                           fsr0h	equ	0xFEA
  8937                           fsr0l	equ	0xFE9
  8938                           wreg	equ	0xFE8
  8939                           indf1	equ	0xFE7
  8940                           postinc1	equ	0xFE6
  8941                           postdec1	equ	0xFE5
  8942                           fsr1h	equ	0xFE2
  8943                           fsr1l	equ	0xFE1
  8944                           indf2	equ	0xFDF
  8945                           postinc2	equ	0xFDE
  8946                           postdec2	equ	0xFDD
  8947                           plusw2	equ	0xFDB
  8948                           fsr2h	equ	0xFDA
  8949                           fsr2l	equ	0xFD9
  8950                           status	equ	0xFD8
  8951                           
  8952 ;; *************** function _f_sync *****************
  8953 ;; Defined at:
  8954 ;;		line 2824 in file "bibliotecas/ff.c"
  8955 ;; Parameters:    Size  Location     Type
  8956 ;;  fp              2   55[BANK0 ] PTR struct .
  8957 ;;		 -> fil(32), 
  8958 ;; Auto vars:     Size  Location     Type
  8959 ;;  tm              4   57[BANK0 ] unsigned long 
  8960 ;;  dir             2   62[BANK0 ] PTR unsigned char 
  8961 ;;		 -> NULL(0), fs(558), 
  8962 ;;  res             1   61[BANK0 ] enum E75
  8963 ;; Return value:  Size  Location     Type
  8964 ;;                  1    wreg      enum E75
  8965 ;; Registers used:
  8966 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8972 ;;      Params:         0       2       0       0       0       0       0       0       0
  8973 ;;      Locals:         0       7       0       0       0       0       0       0       0
  8974 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8975 ;;      Totals:         0       9       0       0       0       0       0       0       0
  8976 ;;Total ram usage:        9 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:    9
  8979 ;; This function calls:
  8980 ;;		_move_window
  8981 ;;		_st_clust
  8982 ;;		_sync_fs
  8983 ;;		_validate
  8984 ;; This function is called by:
  8985 ;;		_f_close
  8986 ;; This function uses a non-reentrant model
  8987 ;;
  8988                           
  8989                           	psect	text30
  8990  003A4C                     __ptext30:
  8991                           	opt stack 0
  8992  003A4C                     _f_sync:
  8993                           	opt stack 18
  8994                           
  8995                           ;ff.c: 2828: FRESULT res;
  8996                           ;ff.c: 2829: DWORD tm;
  8997                           ;ff.c: 2830: BYTE *dir;
  8998                           ;ff.c: 2833: res = validate(fp);
  8999                           
  9000                           ; BSR set to: 0
  9001                           ;incstack = 0
  9002  003A4C  C097  F021         	movff	f_sync@fp,validate@obj
  9003  003A50  C098  F022         	movff	f_sync@fp+1,validate@obj+1
  9004  003A54  ECC0  F025         	call	_validate	;wreg free
  9005  003A58  0100               	movlb	0	; () banked
  9006  003A5A  6F9D               	movwf	f_sync@res& (0+255),b
  9007                           
  9008                           ; BSR set to: 0
  9009                           ;ff.c: 2834: if (res == FR_OK) {
  9010  003A5C  519D               	movf	f_sync@res& (0+255),w,b
  9011  003A5E  A4D8               	btfss	status,2,c
  9012  003A60  D0A0               	goto	l1322
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;ff.c: 2835: if (fp->flag & 0x20) {
  9016  003A62  EE20 F004          	lfsr	2,4
  9017  003A66  5197               	movf	f_sync@fp& (0+255),w,b
  9018  003A68  26D9               	addwf	fsr2l,f,c
  9019  003A6A  5198               	movf	(f_sync@fp+1)& (0+255),w,b
  9020  003A6C  22DA               	addwfc	fsr2h,f,c
  9021  003A6E  AADF               	btfss	indf2,5,c
  9022  003A70  D098               	goto	l1322
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;ff.c: 2844: res = move_window(fp->fs, fp->dir_sect);
  9026  003A72  C097  FFD9         	movff	f_sync@fp,fsr2l
  9027  003A76  C098  FFDA         	movff	f_sync@fp+1,fsr2h
  9028  003A7A  CFDE F08C          	movff	postinc2,move_window@fs
  9029  003A7E  CFDD F08D          	movff	postdec2,move_window@fs+1
  9030  003A82  EE20 F01A          	lfsr	2,26
  9031  003A86  5197               	movf	f_sync@fp& (0+255),w,b
  9032  003A88  26D9               	addwf	fsr2l,f,c
  9033  003A8A  5198               	movf	(f_sync@fp+1)& (0+255),w,b
  9034  003A8C  22DA               	addwfc	fsr2h,f,c
  9035  003A8E  CFDE F08E          	movff	postinc2,move_window@sector
  9036  003A92  CFDE F08F          	movff	postinc2,move_window@sector+1
  9037  003A96  CFDE F090          	movff	postinc2,move_window@sector+2
  9038  003A9A  CFDE F091          	movff	postinc2,move_window@sector+3
  9039  003A9E  ECCA  F024         	call	_move_window	;wreg free
  9040  003AA2  0100               	movlb	0	; () banked
  9041  003AA4  6F9D               	movwf	f_sync@res& (0+255),b
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;ff.c: 2845: if (res == FR_OK) {
  9045  003AA6  519D               	movf	f_sync@res& (0+255),w,b
  9046  003AA8  A4D8               	btfss	status,2,c
  9047  003AAA  D07B               	goto	l1322
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;ff.c: 2846: dir = fp->dir_ptr;
  9051  003AAC  EE20 F01E          	lfsr	2,30
  9052  003AB0  5197               	movf	f_sync@fp& (0+255),w,b
  9053  003AB2  26D9               	addwf	fsr2l,f,c
  9054  003AB4  5198               	movf	(f_sync@fp+1)& (0+255),w,b
  9055  003AB6  22DA               	addwfc	fsr2h,f,c
  9056  003AB8  CFDE F09E          	movff	postinc2,f_sync@dir
  9057  003ABC  CFDD F09F          	movff	postdec2,f_sync@dir+1
  9058                           
  9059                           ;ff.c: 2847: dir[11] |= 0x20;
  9060  003AC0  EE20 F00B          	lfsr	2,11
  9061  003AC4  519E               	movf	f_sync@dir& (0+255),w,b
  9062  003AC6  26D9               	addwf	fsr2l,f,c
  9063  003AC8  519F               	movf	(f_sync@dir+1)& (0+255),w,b
  9064  003ACA  22DA               	addwfc	fsr2h,f,c
  9065  003ACC  0E00               	movlw	0
  9066  003ACE  8ADB               	bsf	plusw2,5,c
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;ff.c: 2848: *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
  9070  003AD0  EE20 F00A          	lfsr	2,10
  9071  003AD4  5197               	movf	f_sync@fp& (0+255),w,b
  9072  003AD6  26D9               	addwf	fsr2l,f,c
  9073  003AD8  5198               	movf	(f_sync@fp+1)& (0+255),w,b
  9074  003ADA  22DA               	addwfc	fsr2h,f,c
  9075  003ADC  EE10 F01C          	lfsr	1,28
  9076  003AE0  519E               	movf	f_sync@dir& (0+255),w,b
  9077  003AE2  26E1               	addwf	fsr1l,f,c
  9078  003AE4  519F               	movf	(f_sync@dir+1)& (0+255),w,b
  9079  003AE6  22E2               	addwfc	fsr1h,f,c
  9080  003AE8  CFDE FFE6          	movff	postinc2,postinc1
  9081  003AEC  CFDE FFE6          	movff	postinc2,postinc1
  9082  003AF0  CFDE FFE6          	movff	postinc2,postinc1
  9083  003AF4  CFDE FFE6          	movff	postinc2,postinc1
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;ff.c: 2849: st_clust(dir, fp->sclust);
  9087  003AF8  C09E  F01A         	movff	f_sync@dir,st_clust@dir
  9088  003AFC  C09F  F01B         	movff	f_sync@dir+1,st_clust@dir+1
  9089  003B00  EE20 F00E          	lfsr	2,14
  9090  003B04  5197               	movf	f_sync@fp& (0+255),w,b
  9091  003B06  26D9               	addwf	fsr2l,f,c
  9092  003B08  5198               	movf	(f_sync@fp+1)& (0+255),w,b
  9093  003B0A  22DA               	addwfc	fsr2h,f,c
  9094  003B0C  CFDE F01C          	movff	postinc2,st_clust@cl
  9095  003B10  CFDE F01D          	movff	postinc2,st_clust@cl+1
  9096  003B14  CFDE F01E          	movff	postinc2,st_clust@cl+2
  9097  003B18  CFDE F01F          	movff	postinc2,st_clust@cl+3
  9098  003B1C  ECEB  F02A         	call	_st_clust	;wreg free
  9099                           
  9100                           ;ff.c: 2850: tm = ((DWORD)(2015 - 1980) << 25 | (DWORD)1 << 21 | (DWORD)1 << 16);
  9101  003B20  0E00               	movlw	0
  9102  003B22  0100               	movlb	0	; () banked
  9103  003B24  6F99               	movwf	f_sync@tm& (0+255),b
  9104  003B26  0E00               	movlw	0
  9105  003B28  6F9A               	movwf	(f_sync@tm+1)& (0+255),b
  9106  003B2A  0E21               	movlw	33
  9107  003B2C  6F9B               	movwf	(f_sync@tm+2)& (0+255),b
  9108  003B2E  0E46               	movlw	70
  9109  003B30  6F9C               	movwf	(f_sync@tm+3)& (0+255),b
  9110                           
  9111                           ; BSR set to: 0
  9112                           ;ff.c: 2851: *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
  9113  003B32  EE20 F016          	lfsr	2,22
  9114  003B36  519E               	movf	f_sync@dir& (0+255),w,b
  9115  003B38  26D9               	addwf	fsr2l,f,c
  9116  003B3A  519F               	movf	(f_sync@dir+1)& (0+255),w,b
  9117  003B3C  22DA               	addwfc	fsr2h,f,c
  9118  003B3E  C099  FFDE         	movff	f_sync@tm,postinc2
  9119  003B42  C09A  FFDE         	movff	f_sync@tm+1,postinc2
  9120  003B46  C09B  FFDE         	movff	f_sync@tm+2,postinc2
  9121  003B4A  C09C  FFDE         	movff	f_sync@tm+3,postinc2
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;ff.c: 2852: *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
  9125  003B4E  EE20 F012          	lfsr	2,18
  9126  003B52  519E               	movf	f_sync@dir& (0+255),w,b
  9127  003B54  26D9               	addwf	fsr2l,f,c
  9128  003B56  519F               	movf	(f_sync@dir+1)& (0+255),w,b
  9129  003B58  22DA               	addwfc	fsr2h,f,c
  9130  003B5A  0E00               	movlw	0
  9131  003B5C  6EDE               	movwf	postinc2,c
  9132  003B5E  0E00               	movlw	0
  9133  003B60  6EDD               	movwf	postdec2,c
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;ff.c: 2853: fp->flag &= ~0x20;
  9137  003B62  EE20 F004          	lfsr	2,4
  9138  003B66  5197               	movf	f_sync@fp& (0+255),w,b
  9139  003B68  26D9               	addwf	fsr2l,f,c
  9140  003B6A  5198               	movf	(f_sync@fp+1)& (0+255),w,b
  9141  003B6C  22DA               	addwfc	fsr2h,f,c
  9142  003B6E  0EDF               	movlw	223
  9143  003B70  16DF               	andwf	indf2,f,c
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;ff.c: 2854: fp->fs->wflag = 1;
  9147  003B72  C097  FFD9         	movff	f_sync@fp,fsr2l
  9148  003B76  C098  FFDA         	movff	f_sync@fp+1,fsr2h
  9149  003B7A  EE10 F004          	lfsr	1,4
  9150  003B7E  50DE               	movf	postinc2,w,c
  9151  003B80  26E1               	addwf	fsr1l,f,c
  9152  003B82  50DD               	movf	postdec2,w,c
  9153  003B84  22E2               	addwfc	fsr1h,f,c
  9154  003B86  0E01               	movlw	1
  9155  003B88  6EE7               	movwf	indf1,c
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;ff.c: 2855: res = sync_fs(fp->fs);
  9159  003B8A  C097  FFD9         	movff	f_sync@fp,fsr2l
  9160  003B8E  C098  FFDA         	movff	f_sync@fp+1,fsr2h
  9161  003B92  CFDE F08C          	movff	postinc2,sync_fs@fs
  9162  003B96  CFDD F08D          	movff	postdec2,sync_fs@fs+1
  9163  003B9A  ECC2  F01A         	call	_sync_fs	;wreg free
  9164  003B9E  0100               	movlb	0	; () banked
  9165  003BA0  6F9D               	movwf	f_sync@res& (0+255),b
  9166  003BA2                     l1322:
  9167                           
  9168                           ; BSR set to: 0
  9169                           ;ff.c: 2856: }
  9170                           ;ff.c: 2857: }
  9171                           ;ff.c: 2858: }
  9172                           ;ff.c: 2860: return res;
  9173                           
  9174                           ; BSR set to: 0
  9175                           
  9176                           ; BSR set to: 0
  9177                           
  9178                           ; BSR set to: 0
  9179  003BA2  519D               	movf	f_sync@res& (0+255),w,b
  9180  003BA4  0012               	return	
  9181  003BA6                     __end_of_f_sync:
  9182                           	opt stack 0
  9183                           tblptru	equ	0xFF8
  9184                           tblptrh	equ	0xFF7
  9185                           tblptrl	equ	0xFF6
  9186                           tablat	equ	0xFF5
  9187                           prodh	equ	0xFF4
  9188                           prodl	equ	0xFF3
  9189                           intcon	equ	0xFF2
  9190                           intcon2	equ	0xFF1
  9191                           intcon3	equ	0xFF0
  9192                           indf0	equ	0xFEF
  9193                           postinc0	equ	0xFEE
  9194                           fsr0h	equ	0xFEA
  9195                           fsr0l	equ	0xFE9
  9196                           wreg	equ	0xFE8
  9197                           indf1	equ	0xFE7
  9198                           postinc1	equ	0xFE6
  9199                           postdec1	equ	0xFE5
  9200                           fsr1h	equ	0xFE2
  9201                           fsr1l	equ	0xFE1
  9202                           indf2	equ	0xFDF
  9203                           postinc2	equ	0xFDE
  9204                           postdec2	equ	0xFDD
  9205                           plusw2	equ	0xFDB
  9206                           fsr2h	equ	0xFDA
  9207                           fsr2l	equ	0xFD9
  9208                           status	equ	0xFD8
  9209                           
  9210 ;; *************** function _sync_fs *****************
  9211 ;; Defined at:
  9212 ;;		line 760 in file "bibliotecas/ff.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;  fs              2   44[BANK0 ] PTR struct .
  9215 ;;		 -> NULL(0), fs(558), 
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;  res             1   54[BANK0 ] enum E75
  9218 ;; Return value:  Size  Location     Type
  9219 ;;                  1    wreg      enum E75
  9220 ;; Registers used:
  9221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9222 ;; Tracked objects:
  9223 ;;		On entry : 0/0
  9224 ;;		On exit  : 0/0
  9225 ;;		Unchanged: 0/0
  9226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9227 ;;      Params:         0       2       0       0       0       0       0       0       0
  9228 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9229 ;;      Temps:          0       8       0       0       0       0       0       0       0
  9230 ;;      Totals:         0      11       0       0       0       0       0       0       0
  9231 ;;Total ram usage:       11 bytes
  9232 ;; Hardware stack levels used:    1
  9233 ;; Hardware stack levels required when called:    8
  9234 ;; This function calls:
  9235 ;;		_disk_ioctl
  9236 ;;		_disk_write
  9237 ;;		_mem_set
  9238 ;;		_sync_window
  9239 ;; This function is called by:
  9240 ;;		_f_sync
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244                           	psect	text31
  9245  003584                     __ptext31:
  9246                           	opt stack 0
  9247  003584                     _sync_fs:
  9248                           	opt stack 18
  9249                           
  9250                           ;ff.c: 764: FRESULT res;
  9251                           ;ff.c: 767: res = sync_window(fs);
  9252                           
  9253                           ; BSR set to: 0
  9254                           ;incstack = 0
  9255  003584  C08C  F077         	movff	sync_fs@fs,sync_window@fs
  9256  003588  C08D  F078         	movff	sync_fs@fs+1,sync_window@fs+1
  9257  00358C  EC71  F01C         	call	_sync_window	;wreg free
  9258  003590  0100               	movlb	0	; () banked
  9259  003592  6F96               	movwf	sync_fs@res& (0+255),b
  9260                           
  9261                           ; BSR set to: 0
  9262                           ;ff.c: 768: if (res == FR_OK) {
  9263  003594  5196               	movf	sync_fs@res& (0+255),w,b
  9264  003596  A4D8               	btfss	status,2,c
  9265  003598  D0D5               	goto	l908
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;ff.c: 770: if (fs->fs_type == 3 && fs->fsi_flag == 1) {
  9269  00359A  C08C  FFD9         	movff	sync_fs@fs,fsr2l
  9270  00359E  C08D  FFDA         	movff	sync_fs@fs+1,fsr2h
  9271  0035A2  0E03               	movlw	3
  9272  0035A4  18DE               	xorwf	postinc2,w,c
  9273  0035A6  A4D8               	btfss	status,2,c
  9274  0035A8  D0B8               	goto	l907
  9275                           
  9276                           ; BSR set to: 0
  9277  0035AA  EE20 F005          	lfsr	2,5
  9278  0035AE  518C               	movf	sync_fs@fs& (0+255),w,b
  9279  0035B0  26D9               	addwf	fsr2l,f,c
  9280  0035B2  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9281  0035B4  22DA               	addwfc	fsr2h,f,c
  9282  0035B6  04DE               	decf	postinc2,w,c
  9283  0035B8  A4D8               	btfss	status,2,c
  9284  0035BA  D0AF               	goto	l907
  9285                           
  9286                           ; BSR set to: 0
  9287                           ;ff.c: 772: mem_set(fs->win, 0, ((UINT)512));
  9288  0035BC  0E2E               	movlw	46
  9289  0035BE  258C               	addwf	sync_fs@fs& (0+255),w,b
  9290  0035C0  6E1A               	movwf	mem_set@dst,c
  9291  0035C2  0E00               	movlw	0
  9292  0035C4  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
  9293  0035C6  6E1B               	movwf	mem_set@dst+1,c
  9294  0035C8  0E00               	movlw	0
  9295  0035CA  6E1D               	movwf	mem_set@val+1,c
  9296  0035CC  0E00               	movlw	0
  9297  0035CE  6E1C               	movwf	mem_set@val,c
  9298  0035D0  0E02               	movlw	2
  9299  0035D2  6E1F               	movwf	mem_set@cnt+1,c
  9300  0035D4  0E00               	movlw	0
  9301  0035D6  6E1E               	movwf	mem_set@cnt,c
  9302  0035D8  ECD5  F02A         	call	_mem_set	;wreg free
  9303                           
  9304                           ;ff.c: 773: *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
  9305  0035DC  0100               	movlb	0	; () banked
  9306  0035DE  EE22 F02C          	lfsr	2,556
  9307  0035E2  518C               	movf	sync_fs@fs& (0+255),w,b
  9308  0035E4  26D9               	addwf	fsr2l,f,c
  9309  0035E6  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9310  0035E8  22DA               	addwfc	fsr2h,f,c
  9311  0035EA  0E55               	movlw	85
  9312  0035EC  6EDE               	movwf	postinc2,c
  9313  0035EE  0EAA               	movlw	170
  9314  0035F0  6EDD               	movwf	postdec2,c
  9315                           
  9316                           ; BSR set to: 0
  9317                           ;ff.c: 774: *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
  9318  0035F2  EE20 F02E          	lfsr	2,46
  9319  0035F6  518C               	movf	sync_fs@fs& (0+255),w,b
  9320  0035F8  26D9               	addwf	fsr2l,f,c
  9321  0035FA  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9322  0035FC  22DA               	addwfc	fsr2h,f,c
  9323  0035FE  0E52               	movlw	82
  9324  003600  6EDE               	movwf	postinc2,c
  9325  003602  0E52               	movlw	82
  9326  003604  6EDE               	movwf	postinc2,c
  9327  003606  0E61               	movlw	97
  9328  003608  6EDE               	movwf	postinc2,c
  9329  00360A  0E41               	movlw	65
  9330  00360C  6EDD               	movwf	postdec2,c
  9331                           
  9332                           ; BSR set to: 0
  9333                           ;ff.c: 775: *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
  9334  00360E  EE22 F012          	lfsr	2,530
  9335  003612  518C               	movf	sync_fs@fs& (0+255),w,b
  9336  003614  26D9               	addwf	fsr2l,f,c
  9337  003616  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9338  003618  22DA               	addwfc	fsr2h,f,c
  9339  00361A  0E72               	movlw	114
  9340  00361C  6EDE               	movwf	postinc2,c
  9341  00361E  0E72               	movlw	114
  9342  003620  6EDE               	movwf	postinc2,c
  9343  003622  0E41               	movlw	65
  9344  003624  6EDE               	movwf	postinc2,c
  9345  003626  0E61               	movlw	97
  9346  003628  6EDD               	movwf	postdec2,c
  9347                           
  9348                           ; BSR set to: 0
  9349                           ;ff.c: 776: *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
  9350  00362A  EE20 F00E          	lfsr	2,14
  9351  00362E  518C               	movf	sync_fs@fs& (0+255),w,b
  9352  003630  26D9               	addwf	fsr2l,f,c
  9353  003632  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9354  003634  22DA               	addwfc	fsr2h,f,c
  9355  003636  EE12 F016          	lfsr	1,534
  9356  00363A  518C               	movf	sync_fs@fs& (0+255),w,b
  9357  00363C  26E1               	addwf	fsr1l,f,c
  9358  00363E  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9359  003640  22E2               	addwfc	fsr1h,f,c
  9360  003642  CFDE FFE6          	movff	postinc2,postinc1
  9361  003646  CFDE FFE6          	movff	postinc2,postinc1
  9362  00364A  CFDE FFE6          	movff	postinc2,postinc1
  9363  00364E  CFDE FFE6          	movff	postinc2,postinc1
  9364                           
  9365                           ; BSR set to: 0
  9366                           ;ff.c: 777: *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
  9367  003652  EE20 F00A          	lfsr	2,10
  9368  003656  518C               	movf	sync_fs@fs& (0+255),w,b
  9369  003658  26D9               	addwf	fsr2l,f,c
  9370  00365A  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9371  00365C  22DA               	addwfc	fsr2h,f,c
  9372  00365E  EE12 F01A          	lfsr	1,538
  9373  003662  518C               	movf	sync_fs@fs& (0+255),w,b
  9374  003664  26E1               	addwf	fsr1l,f,c
  9375  003666  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9376  003668  22E2               	addwfc	fsr1h,f,c
  9377  00366A  CFDE FFE6          	movff	postinc2,postinc1
  9378  00366E  CFDE FFE6          	movff	postinc2,postinc1
  9379  003672  CFDE FFE6          	movff	postinc2,postinc1
  9380  003676  CFDE FFE6          	movff	postinc2,postinc1
  9381                           
  9382                           ; BSR set to: 0
  9383                           ;ff.c: 779: fs->winsect = fs->volbase + 1;
  9384  00367A  EE20 F01A          	lfsr	2,26
  9385  00367E  518C               	movf	sync_fs@fs& (0+255),w,b
  9386  003680  26D9               	addwf	fsr2l,f,c
  9387  003682  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9388  003684  22DA               	addwfc	fsr2h,f,c
  9389  003686  CFDE F08E          	movff	postinc2,??_sync_fs
  9390  00368A  CFDE F08F          	movff	postinc2,??_sync_fs+1
  9391  00368E  CFDE F090          	movff	postinc2,??_sync_fs+2
  9392  003692  CFDE F091          	movff	postinc2,??_sync_fs+3
  9393  003696  0E01               	movlw	1
  9394  003698  258E               	addwf	??_sync_fs& (0+255),w,b
  9395  00369A  6F92               	movwf	(??_sync_fs+4)& (0+255),b
  9396  00369C  0E00               	movlw	0
  9397  00369E  218F               	addwfc	(??_sync_fs+1)& (0+255),w,b
  9398  0036A0  6F93               	movwf	(??_sync_fs+5)& (0+255),b
  9399  0036A2  0E00               	movlw	0
  9400  0036A4  2190               	addwfc	(??_sync_fs+2)& (0+255),w,b
  9401  0036A6  6F94               	movwf	(??_sync_fs+6)& (0+255),b
  9402  0036A8  0E00               	movlw	0
  9403  0036AA  2191               	addwfc	(??_sync_fs+3)& (0+255),w,b
  9404  0036AC  6F95               	movwf	(??_sync_fs+7)& (0+255),b
  9405  0036AE  EE20 F02A          	lfsr	2,42
  9406  0036B2  518C               	movf	sync_fs@fs& (0+255),w,b
  9407  0036B4  26D9               	addwf	fsr2l,f,c
  9408  0036B6  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9409  0036B8  22DA               	addwfc	fsr2h,f,c
  9410  0036BA  C092  FFDE         	movff	??_sync_fs+4,postinc2
  9411  0036BE  C093  FFDE         	movff	??_sync_fs+5,postinc2
  9412  0036C2  C094  FFDE         	movff	??_sync_fs+6,postinc2
  9413  0036C6  C095  FFDE         	movff	??_sync_fs+7,postinc2
  9414                           
  9415                           ; BSR set to: 0
  9416                           ;ff.c: 780: disk_write(fs->drv, fs->win, fs->winsect, 1);
  9417  0036CA  0E2E               	movlw	46
  9418  0036CC  258C               	addwf	sync_fs@fs& (0+255),w,b
  9419  0036CE  6F6C               	movwf	disk_write@buff& (0+255),b
  9420  0036D0  0E00               	movlw	0
  9421  0036D2  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
  9422  0036D4  6F6D               	movwf	(disk_write@buff+1)& (0+255),b
  9423  0036D6  EE20 F02A          	lfsr	2,42
  9424  0036DA  518C               	movf	sync_fs@fs& (0+255),w,b
  9425  0036DC  26D9               	addwf	fsr2l,f,c
  9426  0036DE  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9427  0036E0  22DA               	addwfc	fsr2h,f,c
  9428  0036E2  CFDE F06E          	movff	postinc2,disk_write@sector
  9429  0036E6  CFDE F06F          	movff	postinc2,disk_write@sector+1
  9430  0036EA  CFDE F070          	movff	postinc2,disk_write@sector+2
  9431  0036EE  CFDE F071          	movff	postinc2,disk_write@sector+3
  9432  0036F2  0E01               	movlw	1
  9433  0036F4  6F72               	movwf	disk_write@count& (0+255),b
  9434  0036F6  EE20 F001          	lfsr	2,1
  9435  0036FA  518C               	movf	sync_fs@fs& (0+255),w,b
  9436  0036FC  26D9               	addwf	fsr2l,f,c
  9437  0036FE  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9438  003700  22DA               	addwfc	fsr2h,f,c
  9439  003702  50DF               	movf	indf2,w,c
  9440  003704  EC50  F026         	call	_disk_write
  9441                           
  9442                           ;ff.c: 781: fs->fsi_flag = 0;
  9443  003708  0100               	movlb	0	; () banked
  9444  00370A  EE20 F005          	lfsr	2,5
  9445  00370E  518C               	movf	sync_fs@fs& (0+255),w,b
  9446  003710  26D9               	addwf	fsr2l,f,c
  9447  003712  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9448  003714  22DA               	addwfc	fsr2h,f,c
  9449  003716  0E00               	movlw	0
  9450  003718  6EDF               	movwf	indf2,c
  9451  00371A                     l907:
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;ff.c: 782: }
  9455                           ;ff.c: 784: if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
  9456                           
  9457                           ; BSR set to: 0
  9458  00371A  0E00               	movlw	0
  9459  00371C  6E1A               	movwf	disk_ioctl@cmd,c
  9460  00371E  0E00               	movlw	0
  9461  003720  6E1B               	movwf	disk_ioctl@buff,c
  9462  003722  0E00               	movlw	0
  9463  003724  6E1C               	movwf	disk_ioctl@buff+1,c
  9464  003726  EE20 F001          	lfsr	2,1
  9465  00372A  518C               	movf	sync_fs@fs& (0+255),w,b
  9466  00372C  26D9               	addwf	fsr2l,f,c
  9467  00372E  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
  9468  003730  22DA               	addwfc	fsr2h,f,c
  9469  003732  50DF               	movf	indf2,w,c
  9470  003734  EC14  F02B         	call	_disk_ioctl
  9471  003738  0900               	iorlw	0
  9472  00373A  B4D8               	btfsc	status,2,c
  9473  00373C  D003               	goto	l908
  9474                           
  9475                           ;ff.c: 785: res = FR_DISK_ERR;
  9476  00373E  0E01               	movlw	1
  9477  003740  0100               	movlb	0	; () banked
  9478  003742  6F96               	movwf	sync_fs@res& (0+255),b
  9479  003744                     l908:
  9480                           
  9481                           ;ff.c: 786: }
  9482                           ;ff.c: 788: return res;
  9483                           
  9484                           ; BSR set to: 0
  9485  003744  0100               	movlb	0	; () banked
  9486  003746  5196               	movf	sync_fs@res& (0+255),w,b
  9487  003748  0012               	return	
  9488  00374A                     __end_of_sync_fs:
  9489                           	opt stack 0
  9490                           tblptru	equ	0xFF8
  9491                           tblptrh	equ	0xFF7
  9492                           tblptrl	equ	0xFF6
  9493                           tablat	equ	0xFF5
  9494                           prodh	equ	0xFF4
  9495                           prodl	equ	0xFF3
  9496                           intcon	equ	0xFF2
  9497                           intcon2	equ	0xFF1
  9498                           intcon3	equ	0xFF0
  9499                           indf0	equ	0xFEF
  9500                           postinc0	equ	0xFEE
  9501                           fsr0h	equ	0xFEA
  9502                           fsr0l	equ	0xFE9
  9503                           wreg	equ	0xFE8
  9504                           indf1	equ	0xFE7
  9505                           postinc1	equ	0xFE6
  9506                           postdec1	equ	0xFE5
  9507                           fsr1h	equ	0xFE2
  9508                           fsr1l	equ	0xFE1
  9509                           indf2	equ	0xFDF
  9510                           postinc2	equ	0xFDE
  9511                           postdec2	equ	0xFDD
  9512                           plusw2	equ	0xFDB
  9513                           fsr2h	equ	0xFDA
  9514                           fsr2l	equ	0xFD9
  9515                           status	equ	0xFD8
  9516                           
  9517 ;; *************** function _mem_set *****************
  9518 ;; Defined at:
  9519 ;;		line 524 in file "bibliotecas/ff.c"
  9520 ;; Parameters:    Size  Location     Type
  9521 ;;  dst             2   25[COMRAM] PTR void 
  9522 ;;		 -> f_open@sfn(12), NULL(0), fs(558), 
  9523 ;;  val             2   27[COMRAM] int 
  9524 ;;  cnt             2   29[COMRAM] unsigned int 
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;  d               2   31[COMRAM] PTR unsigned char 
  9527 ;;		 -> f_open@sfn(12), NULL(0), fs(558), 
  9528 ;; Return value:  Size  Location     Type
  9529 ;;                  1    wreg      void 
  9530 ;; Registers used:
  9531 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9532 ;; Tracked objects:
  9533 ;;		On entry : 0/0
  9534 ;;		On exit  : 0/0
  9535 ;;		Unchanged: 0/0
  9536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9537 ;;      Params:         6       0       0       0       0       0       0       0       0
  9538 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9539 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9540 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9541 ;;Total ram usage:        8 bytes
  9542 ;; Hardware stack levels used:    1
  9543 ;; Hardware stack levels required when called:    2
  9544 ;; This function calls:
  9545 ;;		Nothing
  9546 ;; This function is called by:
  9547 ;;		_sync_fs
  9548 ;;		_dir_next
  9549 ;;		_dir_register
  9550 ;;		_create_name
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           	psect	text32
  9555  0055AA                     __ptext32:
  9556                           	opt stack 0
  9557  0055AA                     _mem_set:
  9558                           	opt stack 22
  9559                           
  9560                           ;ff.c: 525: BYTE *d = (BYTE*)dst;
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;incstack = 0
  9564  0055AA  C01A  F020         	movff	mem_set@dst,mem_set@d
  9565  0055AE  C01B  F021         	movff	mem_set@dst+1,mem_set@d+1
  9566                           
  9567                           ;ff.c: 527: while (cnt--)
  9568  0055B2  D008               	goto	l869
  9569  0055B4                     l10387:
  9570                           
  9571                           ;ff.c: 528: *d++ = (BYTE)val;
  9572  0055B4  C020  FFD9         	movff	mem_set@d,fsr2l
  9573  0055B8  C021  FFDA         	movff	mem_set@d+1,fsr2h
  9574  0055BC  C01C  FFDF         	movff	mem_set@val,indf2
  9575  0055C0  4A20               	infsnz	mem_set@d,f,c
  9576  0055C2  2A21               	incf	mem_set@d+1,f,c
  9577  0055C4                     l869:
  9578  0055C4  061E               	decf	mem_set@cnt,f,c
  9579  0055C6  A0D8               	btfss	status,0,c
  9580  0055C8  061F               	decf	mem_set@cnt+1,f,c
  9581  0055CA  281E               	incf	mem_set@cnt,w,c
  9582  0055CC  E1F3               	bnz	l10387
  9583  0055CE  281F               	incf	mem_set@cnt+1,w,c
  9584  0055D0  B4D8               	btfsc	status,2,c
  9585  0055D2  0012               	return	
  9586  0055D4  D7EF               	goto	l870
  9587  0055D6                     __end_of_mem_set:
  9588                           	opt stack 0
  9589                           tblptru	equ	0xFF8
  9590                           tblptrh	equ	0xFF7
  9591                           tblptrl	equ	0xFF6
  9592                           tablat	equ	0xFF5
  9593                           prodh	equ	0xFF4
  9594                           prodl	equ	0xFF3
  9595                           intcon	equ	0xFF2
  9596                           intcon2	equ	0xFF1
  9597                           intcon3	equ	0xFF0
  9598                           indf0	equ	0xFEF
  9599                           postinc0	equ	0xFEE
  9600                           fsr0h	equ	0xFEA
  9601                           fsr0l	equ	0xFE9
  9602                           wreg	equ	0xFE8
  9603                           indf1	equ	0xFE7
  9604                           postinc1	equ	0xFE6
  9605                           postdec1	equ	0xFE5
  9606                           fsr1h	equ	0xFE2
  9607                           fsr1l	equ	0xFE1
  9608                           indf2	equ	0xFDF
  9609                           postinc2	equ	0xFDE
  9610                           postdec2	equ	0xFDD
  9611                           plusw2	equ	0xFDB
  9612                           fsr2h	equ	0xFDA
  9613                           fsr2l	equ	0xFD9
  9614                           status	equ	0xFD8
  9615                           
  9616 ;; *************** function _disk_ioctl *****************
  9617 ;; Defined at:
  9618 ;;		line 248 in file "bibliotecas/diskio.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;  pdrv            1    wreg     unsigned char 
  9621 ;;  cmd             1   25[COMRAM] unsigned char 
  9622 ;;  buff            2   26[COMRAM] PTR void 
  9623 ;;		 -> NULL(0), 
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;  pdrv            1   28[COMRAM] unsigned char 
  9626 ;;  result          2    0        int 
  9627 ;;  res             1   29[COMRAM] enum E25
  9628 ;; Return value:  Size  Location     Type
  9629 ;;                  1    wreg      enum E25
  9630 ;; Registers used:
  9631 ;;		wreg, status,2, status,0
  9632 ;; Tracked objects:
  9633 ;;		On entry : 0/0
  9634 ;;		On exit  : 0/0
  9635 ;;		Unchanged: 0/0
  9636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9637 ;;      Params:         3       0       0       0       0       0       0       0       0
  9638 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9639 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9640 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9641 ;;Total ram usage:        5 bytes
  9642 ;; Hardware stack levels used:    1
  9643 ;; Hardware stack levels required when called:    2
  9644 ;; This function calls:
  9645 ;;		Nothing
  9646 ;; This function is called by:
  9647 ;;		_sync_fs
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           	psect	text33
  9652  005628                     __ptext33:
  9653                           	opt stack 0
  9654  005628                     _disk_ioctl:
  9655                           	opt stack 23
  9656                           
  9657                           ;incstack = 0
  9658                           ;disk_ioctl@pdrv stored from wreg
  9659  005628  6E1D               	movwf	disk_ioctl@pdrv,c
  9660                           
  9661                           ;diskio.c: 254: DRESULT res;
  9662                           ;diskio.c: 255: int result;
  9663                           ;diskio.c: 257: switch (pdrv) {
  9664  00562A  D006               	goto	l428
  9665  00562C                     l429:
  9666                           
  9667                           ;diskio.c: 262: return res;
  9668  00562C  501E               	movf	disk_ioctl@res,w,c
  9669  00562E  0012               	return	
  9670  005630                     l431:
  9671                           
  9672                           ;diskio.c: 268: return res;
  9673  005630  501E               	movf	disk_ioctl@res,w,c
  9674  005632  0012               	return	
  9675  005634                     l432:
  9676                           
  9677                           ;diskio.c: 274: return res;
  9678  005634  501E               	movf	disk_ioctl@res,w,c
  9679  005636  0012               	return	
  9680  005638                     l428:
  9681  005638  501D               	movf	disk_ioctl@pdrv,w,c
  9682                           
  9683                           ; Switch size 1, requested type "space"
  9684                           ; Number of cases is 3, Range of values is 0 to 2
  9685                           ; switch strategies available:
  9686                           ; Name         Instructions Cycles
  9687                           ; simple_byte           10     6 (average)
  9688                           ;	Chosen strategy is simple_byte
  9689  00563A  0A00               	xorlw	0	; case 0
  9690  00563C  B4D8               	btfsc	status,2,c
  9691  00563E  D7F6               	goto	l429
  9692  005640  0A01               	xorlw	1	; case 1
  9693  005642  B4D8               	btfsc	status,2,c
  9694  005644  D7F5               	goto	l431
  9695  005646  0A03               	xorlw	3	; case 2
  9696  005648  B4D8               	btfsc	status,2,c
  9697  00564A  D7F4               	goto	l432
  9698                           
  9699                           ;diskio.c: 277: return RES_PARERR;
  9700  00564C  0E04               	movlw	4
  9701  00564E  0012               	return	
  9702  005650                     __end_of_disk_ioctl:
  9703                           	opt stack 0
  9704                           tblptru	equ	0xFF8
  9705                           tblptrh	equ	0xFF7
  9706                           tblptrl	equ	0xFF6
  9707                           tablat	equ	0xFF5
  9708                           prodh	equ	0xFF4
  9709                           prodl	equ	0xFF3
  9710                           intcon	equ	0xFF2
  9711                           intcon2	equ	0xFF1
  9712                           intcon3	equ	0xFF0
  9713                           indf0	equ	0xFEF
  9714                           postinc0	equ	0xFEE
  9715                           fsr0h	equ	0xFEA
  9716                           fsr0l	equ	0xFE9
  9717                           wreg	equ	0xFE8
  9718                           indf1	equ	0xFE7
  9719                           postinc1	equ	0xFE6
  9720                           postdec1	equ	0xFE5
  9721                           fsr1h	equ	0xFE2
  9722                           fsr1l	equ	0xFE1
  9723                           indf2	equ	0xFDF
  9724                           postinc2	equ	0xFDE
  9725                           postdec2	equ	0xFDD
  9726                           plusw2	equ	0xFDB
  9727                           fsr2h	equ	0xFDA
  9728                           fsr2l	equ	0xFD9
  9729                           status	equ	0xFD8
  9730                           
  9731 ;; *************** function _st_clust *****************
  9732 ;; Defined at:
  9733 ;;		line 1252 in file "bibliotecas/ff.c"
  9734 ;; Parameters:    Size  Location     Type
  9735 ;;  dir             2   25[COMRAM] PTR unsigned char 
  9736 ;;		 -> NULL(0), fs(558), 
  9737 ;;  cl              4   27[COMRAM] unsigned long 
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;		None
  9740 ;; Return value:  Size  Location     Type
  9741 ;;                  1    wreg      void 
  9742 ;; Registers used:
  9743 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9744 ;; Tracked objects:
  9745 ;;		On entry : 0/0
  9746 ;;		On exit  : 0/0
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9749 ;;      Params:         6       0       0       0       0       0       0       0       0
  9750 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9751 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9752 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9753 ;;Total ram usage:        6 bytes
  9754 ;; Hardware stack levels used:    1
  9755 ;; Hardware stack levels required when called:    2
  9756 ;; This function calls:
  9757 ;;		Nothing
  9758 ;; This function is called by:
  9759 ;;		_f_open
  9760 ;;		_f_sync
  9761 ;; This function uses a non-reentrant model
  9762 ;;
  9763                           
  9764                           	psect	text34
  9765  0055D6                     __ptext34:
  9766                           	opt stack 0
  9767  0055D6                     _st_clust:
  9768                           	opt stack 25
  9769                           
  9770                           ;ff.c: 1257: *(WORD*)(BYTE*)(dir + 26)=(WORD)(cl);
  9771                           
  9772                           ;incstack = 0
  9773  0055D6  EE20 F01A          	lfsr	2,26
  9774  0055DA  501A               	movf	st_clust@dir,w,c
  9775  0055DC  26D9               	addwf	fsr2l,f,c
  9776  0055DE  501B               	movf	st_clust@dir+1,w,c
  9777  0055E0  22DA               	addwfc	fsr2h,f,c
  9778  0055E2  C01C  FFDE         	movff	st_clust@cl,postinc2
  9779  0055E6  C01D  FFDD         	movff	st_clust@cl+1,postdec2
  9780                           
  9781                           ;ff.c: 1258: *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
  9782  0055EA  EE20 F014          	lfsr	2,20
  9783  0055EE  501A               	movf	st_clust@dir,w,c
  9784  0055F0  26D9               	addwf	fsr2l,f,c
  9785  0055F2  501B               	movf	st_clust@dir+1,w,c
  9786  0055F4  22DA               	addwfc	fsr2h,f,c
  9787  0055F6  C01E  FFDE         	movff	st_clust@cl+2,postinc2
  9788  0055FA  C01F  FFDD         	movff	st_clust@cl+3,postdec2
  9789  0055FE  0012               	return		;funcret
  9790  005600                     __end_of_st_clust:
  9791                           	opt stack 0
  9792                           tblptru	equ	0xFF8
  9793                           tblptrh	equ	0xFF7
  9794                           tblptrl	equ	0xFF6
  9795                           tablat	equ	0xFF5
  9796                           prodh	equ	0xFF4
  9797                           prodl	equ	0xFF3
  9798                           intcon	equ	0xFF2
  9799                           intcon2	equ	0xFF1
  9800                           intcon3	equ	0xFF0
  9801                           indf0	equ	0xFEF
  9802                           postinc0	equ	0xFEE
  9803                           fsr0h	equ	0xFEA
  9804                           fsr0l	equ	0xFE9
  9805                           wreg	equ	0xFE8
  9806                           indf1	equ	0xFE7
  9807                           postinc1	equ	0xFE6
  9808                           postdec1	equ	0xFE5
  9809                           fsr1h	equ	0xFE2
  9810                           fsr1l	equ	0xFE1
  9811                           indf2	equ	0xFDF
  9812                           postinc2	equ	0xFDE
  9813                           postdec2	equ	0xFDD
  9814                           plusw2	equ	0xFDB
  9815                           fsr2h	equ	0xFDA
  9816                           fsr2l	equ	0xFD9
  9817                           status	equ	0xFD8
  9818                           
  9819 ;; *************** function _f_write *****************
  9820 ;; Defined at:
  9821 ;;		line 2702 in file "bibliotecas/ff.c"
  9822 ;; Parameters:    Size  Location     Type
  9823 ;;  fp              2  105[BANK0 ] PTR struct .
  9824 ;;		 -> fil(32), 
  9825 ;;  buff            2  107[BANK0 ] PTR const void 
  9826 ;;		 -> STR_11(8), 
  9827 ;;  btw             2  109[BANK0 ] unsigned int 
  9828 ;;  bw              2  111[BANK0 ] PTR unsigned int 
  9829 ;;		 -> SDCard@bw(2), 
  9830 ;; Auto vars:     Size  Location     Type
  9831 ;;  clst            4   10[BANK1 ] unsigned long 
  9832 ;;  sect            4    6[BANK1 ] unsigned long 
  9833 ;;  wcnt            2   14[BANK1 ] unsigned int 
  9834 ;;  cc              2    4[BANK1 ] unsigned int 
  9835 ;;  wbuff           2    1[BANK1 ] PTR const unsigned char 
  9836 ;;		 -> STR_11(8), 
  9837 ;;  csect           1    3[BANK1 ] unsigned char 
  9838 ;;  res             1    0[BANK1 ] enum E75
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  1    wreg      enum E3966
  9841 ;; Registers used:
  9842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9848 ;;      Params:         0       8       0       0       0       0       0       0       0
  9849 ;;      Locals:         0       0      16       0       0       0       0       0       0
  9850 ;;      Temps:          0      16       0       0       0       0       0       0       0
  9851 ;;      Totals:         0      24      16       0       0       0       0       0       0
  9852 ;;Total ram usage:       40 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:   11
  9855 ;; This function calls:
  9856 ;;		_clust2sect
  9857 ;;		_create_chain
  9858 ;;		_disk_write
  9859 ;;		_mem_cpy
  9860 ;;		_move_window
  9861 ;;		_sync_window
  9862 ;;		_validate
  9863 ;; This function is called by:
  9864 ;;		_SDCard
  9865 ;; This function uses a non-reentrant model
  9866 ;;
  9867                           
  9868                           	psect	text35
  9869  000B04                     __ptext35:
  9870                           	opt stack 0
  9871  000B04                     _f_write:
  9872                           	opt stack 18
  9873                           
  9874                           ;ff.c: 2709: FRESULT res;
  9875                           ;ff.c: 2710: DWORD clst, sect;
  9876                           ;ff.c: 2711: UINT wcnt, cc;
  9877                           ;ff.c: 2712: const BYTE *wbuff = (const BYTE*)buff;
  9878                           
  9879                           ;incstack = 0
  9880  000B04  C0CB  F1D0         	movff	f_write@buff,f_write@wbuff
  9881  000B08  C0CC  F1D1         	movff	f_write@buff+1,f_write@wbuff+1
  9882                           
  9883                           ;ff.c: 2713: BYTE csect;
  9884                           ;ff.c: 2716: *bw = 0;
  9885  000B0C  C0CF  FFD9         	movff	f_write@bw,fsr2l
  9886  000B10  C0D0  FFDA         	movff	f_write@bw+1,fsr2h
  9887  000B14  0E00               	movlw	0
  9888  000B16  6EDE               	movwf	postinc2,c
  9889  000B18  0E00               	movlw	0
  9890  000B1A  6EDD               	movwf	postdec2,c
  9891                           
  9892                           ;ff.c: 2718: res = validate(fp);
  9893  000B1C  C0C9  F021         	movff	f_write@fp,validate@obj
  9894  000B20  C0CA  F022         	movff	f_write@fp+1,validate@obj+1
  9895  000B24  ECC0  F025         	call	_validate	;wreg free
  9896  000B28  0101               	movlb	1	; () banked
  9897  000B2A  6FCF               	movwf	f_write@res& (0+255),b
  9898                           
  9899                           ; BSR set to: 1
  9900                           ;ff.c: 2719: if (res != FR_OK) return res;
  9901  000B2C  51CF               	movf	f_write@res& (0+255),w,b
  9902  000B2E  A4D8               	btfss	status,2,c
  9903  000B30  0012               	return	
  9904                           
  9905                           ; BSR set to: 1
  9906                           ;ff.c: 2720: if (fp->err)
  9907                           
  9908                           ; BSR set to: 1
  9909                           
  9910                           ; BSR set to: 1
  9911                           ;	Return value of _f_write is never used
  9912  000B32  0100               	movlb	0	; () banked
  9913  000B34  EE20 F005          	lfsr	2,5
  9914  000B38  51C9               	movf	f_write@fp& (0+255),w,b
  9915  000B3A  26D9               	addwf	fsr2l,f,c
  9916  000B3C  51CA               	movf	(f_write@fp+1)& (0+255),w,b
  9917  000B3E  22DA               	addwfc	fsr2h,f,c
  9918  000B40  50DF               	movf	indf2,w,c
  9919  000B42  A4D8               	btfss	status,2,c
  9920  000B44  0012               	return	
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;ff.c: 2722: if (!(fp->flag & 0x02))
  9924                           
  9925                           ; BSR set to: 0
  9926                           
  9927                           ; BSR set to: 0
  9928                           ;ff.c: 2721: return (FRESULT)fp->err;
  9929                           ;	Return value of _f_write is never used
  9930  000B46  EE20 F004          	lfsr	2,4
  9931  000B4A  51C9               	movf	f_write@fp& (0+255),w,b
  9932  000B4C  26D9               	addwf	fsr2l,f,c
  9933  000B4E  51CA               	movf	(f_write@fp+1)& (0+255),w,b
  9934  000B50  22DA               	addwfc	fsr2h,f,c
  9935  000B52  A2DF               	btfss	indf2,1,c
  9936  000B54  0012               	return	
  9937                           
  9938                           ; BSR set to: 0
  9939                           ;ff.c: 2724: if (fp->fptr + btw < fp->fptr) btw = 0;
  9940                           
  9941                           ; BSR set to: 0
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;ff.c: 2723: return FR_DENIED;
  9945                           ;	Return value of _f_write is never used
  9946  000B56  EE20 F006          	lfsr	2,6
  9947  000B5A  51C9               	movf	f_write@fp& (0+255),w,b
  9948  000B5C  26D9               	addwf	fsr2l,f,c
  9949  000B5E  51CA               	movf	(f_write@fp+1)& (0+255),w,b
  9950  000B60  22DA               	addwfc	fsr2h,f,c
  9951  000B62  EE10 F006          	lfsr	1,6
  9952  000B66  51C9               	movf	f_write@fp& (0+255),w,b
  9953  000B68  26E1               	addwf	fsr1l,f,c
  9954  000B6A  51CA               	movf	(f_write@fp+1)& (0+255),w,b
  9955  000B6C  22E2               	addwfc	fsr1h,f,c
  9956  000B6E  CFE6 F0D5          	movff	postinc1,??_f_write+4
  9957  000B72  CFE6 F0D6          	movff	postinc1,??_f_write+5
  9958  000B76  CFE6 F0D7          	movff	postinc1,??_f_write+6
  9959  000B7A  CFE6 F0D8          	movff	postinc1,??_f_write+7
  9960  000B7E  51CD               	movf	f_write@btw& (0+255),w,b
  9961  000B80  25D5               	addwf	(??_f_write+4)& (0+255),w,b
  9962  000B82  6FD9               	movwf	(??_f_write+8)& (0+255),b
  9963  000B84  51CE               	movf	(f_write@btw+1)& (0+255),w,b
  9964  000B86  21D6               	addwfc	(??_f_write+5)& (0+255),w,b
  9965  000B88  6FDA               	movwf	(??_f_write+9)& (0+255),b
  9966  000B8A  0E00               	movlw	0
  9967  000B8C  21D7               	addwfc	(??_f_write+6)& (0+255),w,b
  9968  000B8E  6FDB               	movwf	(??_f_write+10)& (0+255),b
  9969  000B90  0E00               	movlw	0
  9970  000B92  21D8               	addwfc	(??_f_write+7)& (0+255),w,b
  9971  000B94  6FDC               	movwf	(??_f_write+11)& (0+255),b
  9972  000B96  50DE               	movf	postinc2,w,c
  9973  000B98  5DD9               	subwf	(??_f_write+8)& (0+255),w,b
  9974  000B9A  50DE               	movf	postinc2,w,c
  9975  000B9C  59DA               	subwfb	(??_f_write+9)& (0+255),w,b
  9976  000B9E  50DE               	movf	postinc2,w,c
  9977  000BA0  59DB               	subwfb	(??_f_write+10)& (0+255),w,b
  9978  000BA2  50DE               	movf	postinc2,w,c
  9979  000BA4  59DC               	subwfb	(??_f_write+11)& (0+255),w,b
  9980  000BA6  B0D8               	btfsc	status,0,c
  9981  000BA8  D371               	goto	l1294
  9982                           
  9983                           ; BSR set to: 0
  9984  000BAA  0E00               	movlw	0
  9985  000BAC  6FCE               	movwf	(f_write@btw+1)& (0+255),b
  9986  000BAE  0E00               	movlw	0
  9987  000BB0  6FCD               	movwf	f_write@btw& (0+255),b
  9988                           
  9989                           ; BSR set to: 0
  9990                           ;ff.c: 2726: for ( ; btw;
  9991                           ;ff.c: 2727: wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  9992  000BB2  D36C               	goto	l1294
  9993  000BB4                     
  9994                           ; BSR set to: 0
  9995                           ;ff.c: 2728: if ((fp->fptr % ((UINT)512)) == 0) {
  9996                           
  9997                           ; BSR set to: 0
  9998  000BB4  EE20 F006          	lfsr	2,6
  9999  000BB8  51C9               	movf	f_write@fp& (0+255),w,b
 10000  000BBA  26D9               	addwf	fsr2l,f,c
 10001  000BBC  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10002  000BBE  22DA               	addwfc	fsr2h,f,c
 10003  000BC0  0EFF               	movlw	255
 10004  000BC2  14DE               	andwf	postinc2,w,c
 10005  000BC4  6FD1               	movwf	??_f_write& (0+255),b
 10006  000BC6  0E01               	movlw	1
 10007  000BC8  14DE               	andwf	postinc2,w,c
 10008  000BCA  6FD2               	movwf	(??_f_write+1)& (0+255),b
 10009  000BCC  0E00               	movlw	0
 10010  000BCE  14DE               	andwf	postinc2,w,c
 10011  000BD0  6FD3               	movwf	(??_f_write+2)& (0+255),b
 10012  000BD2  0E00               	movlw	0
 10013  000BD4  14DE               	andwf	postinc2,w,c
 10014  000BD6  6FD4               	movwf	(??_f_write+3)& (0+255),b
 10015  000BD8  51D1               	movf	??_f_write& (0+255),w,b
 10016  000BDA  11D2               	iorwf	(??_f_write+1)& (0+255),w,b
 10017  000BDC  11D3               	iorwf	(??_f_write+2)& (0+255),w,b
 10018  000BDE  11D4               	iorwf	(??_f_write+3)& (0+255),w,b
 10019  000BE0  A4D8               	btfss	status,2,c
 10020  000BE2  D2A5               	goto	l1296
 10021                           
 10022                           ; BSR set to: 0
 10023                           ;ff.c: 2729: csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
 10024  000BE4  EE20 F006          	lfsr	2,6
 10025  000BE8  51C9               	movf	f_write@fp& (0+255),w,b
 10026  000BEA  26D9               	addwf	fsr2l,f,c
 10027  000BEC  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10028  000BEE  22DA               	addwfc	fsr2h,f,c
 10029  000BF0  CFDE F0D1          	movff	postinc2,??_f_write
 10030  000BF4  CFDE F0D2          	movff	postinc2,??_f_write+1
 10031  000BF8  CFDE F0D3          	movff	postinc2,??_f_write+2
 10032  000BFC  CFDE F0D4          	movff	postinc2,??_f_write+3
 10033  000C00  0E0A               	movlw	10
 10034  000C02  D005               	goto	u15810
 10035  000C04                     u15815:
 10036  000C04  90D8               	bcf	status,0,c
 10037  000C06  33D4               	rrcf	(??_f_write+3)& (0+255),f,b
 10038  000C08  33D3               	rrcf	(??_f_write+2)& (0+255),f,b
 10039  000C0A  33D2               	rrcf	(??_f_write+1)& (0+255),f,b
 10040  000C0C  33D1               	rrcf	??_f_write& (0+255),f,b
 10041  000C0E                     u15810:
 10042  000C0E  2EE8               	decfsz	wreg,f,c
 10043  000C10  D7F9               	goto	u15815
 10044  000C12  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10045  000C16  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10046  000C1A  EE10 F002          	lfsr	1,2
 10047  000C1E  50DE               	movf	postinc2,w,c
 10048  000C20  26E1               	addwf	fsr1l,f,c
 10049  000C22  50DD               	movf	postdec2,w,c
 10050  000C24  22E2               	addwfc	fsr1h,f,c
 10051  000C26  50E7               	movf	indf1,w,c
 10052  000C28  6FD5               	movwf	(??_f_write+4)& (0+255),b
 10053  000C2A  05D5               	decf	(??_f_write+4)& (0+255),w,b
 10054  000C2C  15D1               	andwf	??_f_write& (0+255),w,b
 10055  000C2E  0101               	movlb	1	; () banked
 10056  000C30  6FD2               	movwf	f_write@csect& (0+255),b
 10057                           
 10058                           ; BSR set to: 1
 10059                           ;ff.c: 2730: if (!csect) {
 10060  000C32  51D2               	movf	f_write@csect& (0+255),w,b
 10061  000C34  A4D8               	btfss	status,2,c
 10062  000C36  D0AB               	goto	l1305
 10063                           
 10064                           ; BSR set to: 1
 10065                           ;ff.c: 2731: if (fp->fptr == 0) {
 10066  000C38  0100               	movlb	0	; () banked
 10067  000C3A  EE20 F006          	lfsr	2,6
 10068  000C3E  51C9               	movf	f_write@fp& (0+255),w,b
 10069  000C40  26D9               	addwf	fsr2l,f,c
 10070  000C42  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10071  000C44  22DA               	addwfc	fsr2h,f,c
 10072  000C46  50DE               	movf	postinc2,w,c
 10073  000C48  10DE               	iorwf	postinc2,w,c
 10074  000C4A  10DE               	iorwf	postinc2,w,c
 10075  000C4C  10DE               	iorwf	postinc2,w,c
 10076  000C4E  A4D8               	btfss	status,2,c
 10077  000C50  D029               	goto	l1298
 10078                           
 10079                           ; BSR set to: 0
 10080                           ;ff.c: 2732: clst = fp->sclust;
 10081  000C52  EE20 F00E          	lfsr	2,14
 10082  000C56  51C9               	movf	f_write@fp& (0+255),w,b
 10083  000C58  26D9               	addwf	fsr2l,f,c
 10084  000C5A  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10085  000C5C  22DA               	addwfc	fsr2h,f,c
 10086  000C5E  CFDE F1D9          	movff	postinc2,f_write@clst
 10087  000C62  CFDE F1DA          	movff	postinc2,f_write@clst+1
 10088  000C66  CFDE F1DB          	movff	postinc2,f_write@clst+2
 10089  000C6A  CFDE F1DC          	movff	postinc2,f_write@clst+3
 10090                           
 10091                           ; BSR set to: 0
 10092                           ;ff.c: 2733: if (clst == 0)
 10093  000C6E  0101               	movlb	1	; () banked
 10094  000C70  51D9               	movf	f_write@clst& (0+255),w,b
 10095  000C72  11DA               	iorwf	(f_write@clst+1)& (0+255),w,b
 10096  000C74  11DB               	iorwf	(f_write@clst+2)& (0+255),w,b
 10097  000C76  11DC               	iorwf	(f_write@clst+3)& (0+255),w,b
 10098  000C78  A4D8               	btfss	status,2,c
 10099  000C7A  D035               	goto	l1300
 10100                           
 10101                           ; BSR set to: 1
 10102                           ;ff.c: 2734: clst = create_chain(fp->fs, 0);
 10103  000C7C  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10104  000C80  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10105  000C84  CFDE F0B2          	movff	postinc2,create_chain@fs
 10106  000C88  CFDD F0B3          	movff	postdec2,create_chain@fs+1
 10107  000C8C  0E00               	movlw	0
 10108  000C8E  0100               	movlb	0	; () banked
 10109  000C90  6FB4               	movwf	create_chain@clst& (0+255),b
 10110  000C92  0E00               	movlw	0
 10111  000C94  6FB5               	movwf	(create_chain@clst+1)& (0+255),b
 10112  000C96  0E00               	movlw	0
 10113  000C98  6FB6               	movwf	(create_chain@clst+2)& (0+255),b
 10114  000C9A  0E00               	movlw	0
 10115  000C9C  6FB7               	movwf	(create_chain@clst+3)& (0+255),b
 10116  000C9E  EC4D  F016         	call	_create_chain	;wreg free
 10117  000CA2  D019               	goto	L7
 10118  000CA4                     l1298:
 10119                           
 10120                           ;ff.c: 2741: clst = create_chain(fp->fs, fp->clust);
 10121  000CA4  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10122  000CA8  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10123  000CAC  CFDE F0B2          	movff	postinc2,create_chain@fs
 10124  000CB0  CFDD F0B3          	movff	postdec2,create_chain@fs+1
 10125  000CB4  0100               	movlb	0	; () banked
 10126  000CB6  EE20 F012          	lfsr	2,18
 10127  000CBA  51C9               	movf	f_write@fp& (0+255),w,b
 10128  000CBC  26D9               	addwf	fsr2l,f,c
 10129  000CBE  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10130  000CC0  22DA               	addwfc	fsr2h,f,c
 10131  000CC2  CFDE F0B4          	movff	postinc2,create_chain@clst
 10132  000CC6  CFDE F0B5          	movff	postinc2,create_chain@clst+1
 10133  000CCA  CFDE F0B6          	movff	postinc2,create_chain@clst+2
 10134  000CCE  CFDE F0B7          	movff	postinc2,create_chain@clst+3
 10135  000CD2  EC4D  F016         	call	_create_chain	;wreg free
 10136  000CD6                     L7:
 10137  000CD6  C0B2  F1D9         	movff	?_create_chain,f_write@clst
 10138  000CDA  C0B3  F1DA         	movff	?_create_chain+1,f_write@clst+1
 10139  000CDE  C0B4  F1DB         	movff	?_create_chain+2,f_write@clst+2
 10140  000CE2  C0B5  F1DC         	movff	?_create_chain+3,f_write@clst+3
 10141  000CE6                     l1300:
 10142                           
 10143                           ;ff.c: 2742: }
 10144                           ;ff.c: 2743: if (clst == 0) break;
 10145  000CE6  0101               	movlb	1	; () banked
 10146  000CE8  51D9               	movf	f_write@clst& (0+255),w,b
 10147  000CEA  11DA               	iorwf	(f_write@clst+1)& (0+255),w,b
 10148  000CEC  11DB               	iorwf	(f_write@clst+2)& (0+255),w,b
 10149  000CEE  11DC               	iorwf	(f_write@clst+3)& (0+255),w,b
 10150  000CF0  B4D8               	btfsc	status,2,c
 10151  000CF2  D2D0               	goto	u16030
 10152                           
 10153                           ; BSR set to: 1
 10154                           ;ff.c: 2744: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10155                           
 10156                           ; BSR set to: 1
 10157                           
 10158                           ; BSR set to: 1
 10159  000CF4  05D9               	decf	f_write@clst& (0+255),w,b
 10160  000CF6  11DA               	iorwf	(f_write@clst+1)& (0+255),w,b
 10161  000CF8  11DB               	iorwf	(f_write@clst+2)& (0+255),w,b
 10162  000CFA  11DC               	iorwf	(f_write@clst+3)& (0+255),w,b
 10163  000CFC  A4D8               	btfss	status,2,c
 10164  000CFE  D00A               	goto	l1303
 10165                           
 10166                           ; BSR set to: 1
 10167  000D00  0100               	movlb	0	; () banked
 10168  000D02  EE20 F005          	lfsr	2,5
 10169  000D06  51C9               	movf	f_write@fp& (0+255),w,b
 10170  000D08  26D9               	addwf	fsr2l,f,c
 10171  000D0A  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10172  000D0C  22DA               	addwfc	fsr2h,f,c
 10173  000D0E  0E02               	movlw	2
 10174  000D10  6EDF               	movwf	indf2,c
 10175                           
 10176                           ; BSR set to: 0
 10177                           ;	Return value of _f_write is never used
 10178  000D12  0012               	return	
 10179  000D14                     l1303:
 10180                           
 10181                           ;ff.c: 2745: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
 10182                           
 10183                           ; BSR set to: 0
 10184  000D14  0101               	movlb	1	; () banked
 10185  000D16  29D9               	incf	f_write@clst& (0+255),w,b
 10186  000D18  E111               	bnz	l12073
 10187  000D1A  29DA               	incf	(f_write@clst+1)& (0+255),w,b
 10188  000D1C  E10F               	bnz	l12073
 10189  000D1E  29DB               	incf	(f_write@clst+2)& (0+255),w,b
 10190  000D20  E10D               	bnz	l12073
 10191  000D22  29DC               	incf	(f_write@clst+3)& (0+255),w,b
 10192  000D24  A4D8               	btfss	status,2,c
 10193  000D26  D00A               	goto	l1304
 10194                           
 10195                           ; BSR set to: 1
 10196  000D28  0100               	movlb	0	; () banked
 10197  000D2A  EE20 F005          	lfsr	2,5
 10198  000D2E  51C9               	movf	f_write@fp& (0+255),w,b
 10199  000D30  26D9               	addwf	fsr2l,f,c
 10200  000D32  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10201  000D34  22DA               	addwfc	fsr2h,f,c
 10202  000D36  0E01               	movlw	1
 10203  000D38  6EDF               	movwf	indf2,c
 10204                           
 10205                           ; BSR set to: 0
 10206                           ;	Return value of _f_write is never used
 10207  000D3A  0012               	return	
 10208  000D3C                     l1304:
 10209  000D3C                     l12073:
 10210                           
 10211                           ;ff.c: 2746: fp->clust = clst;
 10212  000D3C  0100               	movlb	0	; () banked
 10213  000D3E  EE20 F012          	lfsr	2,18
 10214  000D42  51C9               	movf	f_write@fp& (0+255),w,b
 10215  000D44  26D9               	addwf	fsr2l,f,c
 10216  000D46  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10217  000D48  22DA               	addwfc	fsr2h,f,c
 10218  000D4A  C1D9  FFDE         	movff	f_write@clst,postinc2
 10219  000D4E  C1DA  FFDE         	movff	f_write@clst+1,postinc2
 10220  000D52  C1DB  FFDE         	movff	f_write@clst+2,postinc2
 10221  000D56  C1DC  FFDE         	movff	f_write@clst+3,postinc2
 10222                           
 10223                           ;ff.c: 2747: if (fp->sclust == 0) fp->sclust = clst;
 10224  000D5A  EE20 F00E          	lfsr	2,14
 10225  000D5E  51C9               	movf	f_write@fp& (0+255),w,b
 10226  000D60  26D9               	addwf	fsr2l,f,c
 10227  000D62  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10228  000D64  22DA               	addwfc	fsr2h,f,c
 10229  000D66  50DE               	movf	postinc2,w,c
 10230  000D68  10DE               	iorwf	postinc2,w,c
 10231  000D6A  10DE               	iorwf	postinc2,w,c
 10232  000D6C  10DE               	iorwf	postinc2,w,c
 10233  000D6E  A4D8               	btfss	status,2,c
 10234  000D70  D00E               	goto	l1305
 10235                           
 10236                           ; BSR set to: 0
 10237  000D72  EE20 F00E          	lfsr	2,14
 10238  000D76  51C9               	movf	f_write@fp& (0+255),w,b
 10239  000D78  26D9               	addwf	fsr2l,f,c
 10240  000D7A  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10241  000D7C  22DA               	addwfc	fsr2h,f,c
 10242  000D7E  C1D9  FFDE         	movff	f_write@clst,postinc2
 10243  000D82  C1DA  FFDE         	movff	f_write@clst+1,postinc2
 10244  000D86  C1DB  FFDE         	movff	f_write@clst+2,postinc2
 10245  000D8A  C1DC  FFDE         	movff	f_write@clst+3,postinc2
 10246  000D8E                     l1305:
 10247                           
 10248                           ;ff.c: 2748: }
 10249                           ;ff.c: 2750: if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
 10250                           
 10251                           ; BSR set to: 0
 10252                           
 10253                           ; BSR set to: 0
 10254  000D8E  0100               	movlb	0	; () banked
 10255  000D90  EE20 F016          	lfsr	2,22
 10256  000D94  51C9               	movf	f_write@fp& (0+255),w,b
 10257  000D96  26D9               	addwf	fsr2l,f,c
 10258  000D98  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10259  000D9A  22DA               	addwfc	fsr2h,f,c
 10260  000D9C  C0C9  FFE1         	movff	f_write@fp,fsr1l
 10261  000DA0  C0CA  FFE2         	movff	f_write@fp+1,fsr1h
 10262  000DA4  EE00 F02A          	lfsr	0,42
 10263  000DA8  50E6               	movf	postinc1,w,c
 10264  000DAA  26E9               	addwf	fsr0l,f,c
 10265  000DAC  50E5               	movf	postdec1,w,c
 10266  000DAE  22EA               	addwfc	fsr0h,f,c
 10267  000DB0  50DE               	movf	postinc2,w,c
 10268  000DB2  18EE               	xorwf	postinc0,w,c
 10269  000DB4  E121               	bnz	l12085
 10270  000DB6  50DE               	movf	postinc2,w,c
 10271  000DB8  18EE               	xorwf	postinc0,w,c
 10272  000DBA  E11E               	bnz	l12085
 10273  000DBC  50DE               	movf	postinc2,w,c
 10274  000DBE  18EE               	xorwf	postinc0,w,c
 10275  000DC0  E11B               	bnz	l12085
 10276  000DC2  50DE               	movf	postinc2,w,c
 10277  000DC4  18EE               	xorwf	postinc0,w,c
 10278  000DC6  A4D8               	btfss	status,2,c
 10279  000DC8  D017               	goto	l1306
 10280                           
 10281                           ; BSR set to: 0
 10282  000DCA  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10283  000DCE  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10284  000DD2  CFDE F077          	movff	postinc2,sync_window@fs
 10285  000DD6  CFDD F078          	movff	postdec2,sync_window@fs+1
 10286  000DDA  EC71  F01C         	call	_sync_window	;wreg free
 10287  000DDE  0900               	iorlw	0
 10288  000DE0  B4D8               	btfsc	status,2,c
 10289  000DE2  D00A               	goto	l1306
 10290                           
 10291                           ;ff.c: 2751: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
 10292  000DE4  0100               	movlb	0	; () banked
 10293  000DE6  EE20 F005          	lfsr	2,5
 10294  000DEA  51C9               	movf	f_write@fp& (0+255),w,b
 10295  000DEC  26D9               	addwf	fsr2l,f,c
 10296  000DEE  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10297  000DF0  22DA               	addwfc	fsr2h,f,c
 10298  000DF2  0E01               	movlw	1
 10299  000DF4  6EDF               	movwf	indf2,c
 10300                           
 10301                           ; BSR set to: 0
 10302                           ;	Return value of _f_write is never used
 10303  000DF6  0012               	return	
 10304  000DF8                     l1306:
 10305  000DF8                     l12085:
 10306                           
 10307                           ;ff.c: 2759: sect = clust2sect(fp->fs, fp->clust);
 10308  000DF8  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10309  000DFC  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10310  000E00  CFDE F026          	movff	postinc2,clust2sect@fs
 10311  000E04  CFDD F027          	movff	postdec2,clust2sect@fs+1
 10312  000E08  0100               	movlb	0	; () banked
 10313  000E0A  EE20 F012          	lfsr	2,18
 10314  000E0E  51C9               	movf	f_write@fp& (0+255),w,b
 10315  000E10  26D9               	addwf	fsr2l,f,c
 10316  000E12  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10317  000E14  22DA               	addwfc	fsr2h,f,c
 10318  000E16  CFDE F028          	movff	postinc2,clust2sect@clst
 10319  000E1A  CFDE F029          	movff	postinc2,clust2sect@clst+1
 10320  000E1E  CFDE F02A          	movff	postinc2,clust2sect@clst+2
 10321  000E22  CFDE F02B          	movff	postinc2,clust2sect@clst+3
 10322  000E26  EC03  F023         	call	_clust2sect	;wreg free
 10323  000E2A  C026  F1D5         	movff	?_clust2sect,f_write@sect
 10324  000E2E  C027  F1D6         	movff	?_clust2sect+1,f_write@sect+1
 10325  000E32  C028  F1D7         	movff	?_clust2sect+2,f_write@sect+2
 10326  000E36  C029  F1D8         	movff	?_clust2sect+3,f_write@sect+3
 10327                           
 10328                           ;ff.c: 2760: if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10329  000E3A  0101               	movlb	1	; () banked
 10330  000E3C  51D5               	movf	f_write@sect& (0+255),w,b
 10331  000E3E  11D6               	iorwf	(f_write@sect+1)& (0+255),w,b
 10332  000E40  11D7               	iorwf	(f_write@sect+2)& (0+255),w,b
 10333  000E42  11D8               	iorwf	(f_write@sect+3)& (0+255),w,b
 10334  000E44  A4D8               	btfss	status,2,c
 10335  000E46  D00A               	goto	l1307
 10336                           
 10337                           ; BSR set to: 1
 10338  000E48  0100               	movlb	0	; () banked
 10339  000E4A  EE20 F005          	lfsr	2,5
 10340  000E4E  51C9               	movf	f_write@fp& (0+255),w,b
 10341  000E50  26D9               	addwf	fsr2l,f,c
 10342  000E52  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10343  000E54  22DA               	addwfc	fsr2h,f,c
 10344  000E56  0E02               	movlw	2
 10345  000E58  6EDF               	movwf	indf2,c
 10346                           
 10347                           ; BSR set to: 0
 10348                           ;	Return value of _f_write is never used
 10349  000E5A  0012               	return	
 10350  000E5C                     l1307:
 10351                           
 10352                           ;ff.c: 2761: sect += csect;
 10353                           
 10354                           ; BSR set to: 0
 10355  000E5C  0101               	movlb	1	; () banked
 10356  000E5E  51D2               	movf	f_write@csect& (0+255),w,b
 10357  000E60  27D5               	addwf	f_write@sect& (0+255),f,b
 10358  000E62  0E00               	movlw	0
 10359  000E64  23D6               	addwfc	(f_write@sect+1)& (0+255),f,b
 10360  000E66  23D7               	addwfc	(f_write@sect+2)& (0+255),f,b
 10361  000E68  23D8               	addwfc	(f_write@sect+3)& (0+255),f,b
 10362                           
 10363                           ;ff.c: 2762: cc = btw / ((UINT)512);
 10364  000E6A  C0CD  F0D1         	movff	f_write@btw,??_f_write
 10365  000E6E  C0CE  F0D2         	movff	f_write@btw+1,??_f_write+1
 10366  000E72  0E09               	movlw	9
 10367  000E74  0100               	movlb	0	; () banked
 10368  000E76  6FD3               	movwf	(??_f_write+2)& (0+255),b
 10369  000E78                     u15925:
 10370  000E78  90D8               	bcf	status,0,c
 10371  000E7A  33D2               	rrcf	(??_f_write+1)& (0+255),f,b
 10372  000E7C  33D1               	rrcf	??_f_write& (0+255),f,b
 10373  000E7E  2FD3               	decfsz	(??_f_write+2)& (0+255),f,b
 10374  000E80  D7FB               	goto	u15925
 10375  000E82  C0D1  F1D3         	movff	??_f_write,f_write@cc
 10376  000E86  C0D2  F1D4         	movff	??_f_write+1,f_write@cc+1
 10377                           
 10378                           ;ff.c: 2763: if (cc) {
 10379  000E8A  0101               	movlb	1	; () banked
 10380  000E8C  51D3               	movf	f_write@cc& (0+255),w,b
 10381  000E8E  11D4               	iorwf	(f_write@cc+1)& (0+255),w,b
 10382  000E90  B4D8               	btfsc	status,2,c
 10383  000E92  D0FE               	goto	l1308
 10384                           
 10385                           ; BSR set to: 1
 10386                           ;ff.c: 2764: if (csect + cc > fp->fs->csize)
 10387  000E94  51D2               	movf	f_write@csect& (0+255),w,b
 10388  000E96  25D3               	addwf	f_write@cc& (0+255),w,b
 10389  000E98  0100               	movlb	0	; () banked
 10390  000E9A  6FD1               	movwf	??_f_write& (0+255),b
 10391  000E9C  0E00               	movlw	0
 10392  000E9E  0101               	movlb	1	; () banked
 10393  000EA0  21D4               	addwfc	(f_write@cc+1)& (0+255),w,b
 10394  000EA2  0100               	movlb	0	; () banked
 10395  000EA4  6FD2               	movwf	(??_f_write+1)& (0+255),b
 10396  000EA6  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10397  000EAA  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10398  000EAE  EE10 F002          	lfsr	1,2
 10399  000EB2  50DE               	movf	postinc2,w,c
 10400  000EB4  26E1               	addwf	fsr1l,f,c
 10401  000EB6  50DD               	movf	postdec2,w,c
 10402  000EB8  22E2               	addwfc	fsr1h,f,c
 10403  000EBA  50E7               	movf	indf1,w,c
 10404  000EBC  6FD3               	movwf	(??_f_write+2)& (0+255),b
 10405  000EBE  6BD4               	clrf	(??_f_write+3)& (0+255),b
 10406  000EC0  51D1               	movf	??_f_write& (0+255),w,b
 10407  000EC2  5DD3               	subwf	(??_f_write+2)& (0+255),w,b
 10408  000EC4  51D2               	movf	(??_f_write+1)& (0+255),w,b
 10409  000EC6  59D4               	subwfb	(??_f_write+3)& (0+255),w,b
 10410  000EC8  B0D8               	btfsc	status,0,c
 10411  000ECA  D01E               	goto	l1309
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;ff.c: 2765: cc = fp->fs->csize - csect;
 10415  000ECC  0101               	movlb	1	; () banked
 10416  000ECE  51D2               	movf	f_write@csect& (0+255),w,b
 10417  000ED0  0100               	movlb	0	; () banked
 10418  000ED2  6FD1               	movwf	??_f_write& (0+255),b
 10419  000ED4  6BD2               	clrf	(??_f_write+1)& (0+255),b
 10420  000ED6  1FD1               	comf	??_f_write& (0+255),f,b
 10421  000ED8  1FD2               	comf	(??_f_write+1)& (0+255),f,b
 10422  000EDA  4BD1               	infsnz	??_f_write& (0+255),f,b
 10423  000EDC  2BD2               	incf	(??_f_write+1)& (0+255),f,b
 10424  000EDE  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10425  000EE2  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10426  000EE6  EE10 F002          	lfsr	1,2
 10427  000EEA  50DE               	movf	postinc2,w,c
 10428  000EEC  26E1               	addwf	fsr1l,f,c
 10429  000EEE  50DD               	movf	postdec2,w,c
 10430  000EF0  22E2               	addwfc	fsr1h,f,c
 10431  000EF2  50E7               	movf	indf1,w,c
 10432  000EF4  6FD3               	movwf	(??_f_write+2)& (0+255),b
 10433  000EF6  51D3               	movf	(??_f_write+2)& (0+255),w,b
 10434  000EF8  25D1               	addwf	??_f_write& (0+255),w,b
 10435  000EFA  0101               	movlb	1	; () banked
 10436  000EFC  6FD3               	movwf	f_write@cc& (0+255),b
 10437  000EFE  0E00               	movlw	0
 10438  000F00  0100               	movlb	0	; () banked
 10439  000F02  21D2               	addwfc	(??_f_write+1)& (0+255),w,b
 10440  000F04  0101               	movlb	1	; () banked
 10441  000F06  6FD4               	movwf	(f_write@cc+1)& (0+255),b
 10442  000F08                     l1309:
 10443                           
 10444                           ;ff.c: 2766: if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 10445                           
 10446                           ; BSR set to: 1
 10447  000F08  C1D0  F06C         	movff	f_write@wbuff,disk_write@buff
 10448  000F0C  C1D1  F06D         	movff	f_write@wbuff+1,disk_write@buff+1
 10449  000F10  C1D5  F06E         	movff	f_write@sect,disk_write@sector
 10450  000F14  C1D6  F06F         	movff	f_write@sect+1,disk_write@sector+1
 10451  000F18  C1D7  F070         	movff	f_write@sect+2,disk_write@sector+2
 10452  000F1C  C1D8  F071         	movff	f_write@sect+3,disk_write@sector+3
 10453  000F20  C1D3  F072         	movff	f_write@cc,disk_write@count
 10454  000F24  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10455  000F28  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10456  000F2C  EE10 F001          	lfsr	1,1
 10457  000F30  50DE               	movf	postinc2,w,c
 10458  000F32  26E1               	addwf	fsr1l,f,c
 10459  000F34  50DD               	movf	postdec2,w,c
 10460  000F36  22E2               	addwfc	fsr1h,f,c
 10461  000F38  50E7               	movf	indf1,w,c
 10462  000F3A  EC50  F026         	call	_disk_write
 10463  000F3E  0900               	iorlw	0
 10464  000F40  B4D8               	btfsc	status,2,c
 10465  000F42  D00A               	goto	l1310
 10466                           
 10467                           ;ff.c: 2767: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
 10468  000F44  0100               	movlb	0	; () banked
 10469  000F46  EE20 F005          	lfsr	2,5
 10470  000F4A  51C9               	movf	f_write@fp& (0+255),w,b
 10471  000F4C  26D9               	addwf	fsr2l,f,c
 10472  000F4E  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10473  000F50  22DA               	addwfc	fsr2h,f,c
 10474  000F52  0E01               	movlw	1
 10475  000F54  6EDF               	movwf	indf2,c
 10476                           
 10477                           ; BSR set to: 0
 10478                           ;	Return value of _f_write is never used
 10479  000F56  0012               	return	
 10480  000F58                     l1310:
 10481                           
 10482                           ;ff.c: 2770: if (fp->fs->winsect - sect < cc) {
 10483                           
 10484                           ; BSR set to: 0
 10485  000F58  0101               	movlb	1	; () banked
 10486  000F5A  51D3               	movf	f_write@cc& (0+255),w,b
 10487  000F5C  0100               	movlb	0	; () banked
 10488  000F5E  6FD1               	movwf	??_f_write& (0+255),b
 10489  000F60  0101               	movlb	1	; () banked
 10490  000F62  51D4               	movf	(f_write@cc+1)& (0+255),w,b
 10491  000F64  0100               	movlb	0	; () banked
 10492  000F66  6FD2               	movwf	(??_f_write+1)& (0+255),b
 10493  000F68  6BD3               	clrf	(??_f_write+2)& (0+255),b
 10494  000F6A  6BD4               	clrf	(??_f_write+3)& (0+255),b
 10495  000F6C  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10496  000F70  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10497  000F74  EE10 F02A          	lfsr	1,42
 10498  000F78  50DE               	movf	postinc2,w,c
 10499  000F7A  26E1               	addwf	fsr1l,f,c
 10500  000F7C  50DD               	movf	postdec2,w,c
 10501  000F7E  22E2               	addwfc	fsr1h,f,c
 10502  000F80  CFE6 F0D5          	movff	postinc1,??_f_write+4
 10503  000F84  CFE6 F0D6          	movff	postinc1,??_f_write+5
 10504  000F88  CFE6 F0D7          	movff	postinc1,??_f_write+6
 10505  000F8C  CFE6 F0D8          	movff	postinc1,??_f_write+7
 10506  000F90  C1D5  F0D9         	movff	f_write@sect,??_f_write+8
 10507  000F94  C1D6  F0DA         	movff	f_write@sect+1,??_f_write+9
 10508  000F98  C1D7  F0DB         	movff	f_write@sect+2,??_f_write+10
 10509  000F9C  C1D8  F0DC         	movff	f_write@sect+3,??_f_write+11
 10510  000FA0  1FD9               	comf	(??_f_write+8)& (0+255),f,b
 10511  000FA2  1FDA               	comf	(??_f_write+9)& (0+255),f,b
 10512  000FA4  1FDB               	comf	(??_f_write+10)& (0+255),f,b
 10513  000FA6  1FDC               	comf	(??_f_write+11)& (0+255),f,b
 10514  000FA8  2BD9               	incf	(??_f_write+8)& (0+255),f,b
 10515  000FAA  0E00               	movlw	0
 10516  000FAC  23DA               	addwfc	(??_f_write+9)& (0+255),f,b
 10517  000FAE  23DB               	addwfc	(??_f_write+10)& (0+255),f,b
 10518  000FB0  23DC               	addwfc	(??_f_write+11)& (0+255),f,b
 10519  000FB2  51D5               	movf	(??_f_write+4)& (0+255),w,b
 10520  000FB4  25D9               	addwf	(??_f_write+8)& (0+255),w,b
 10521  000FB6  6FDD               	movwf	(??_f_write+12)& (0+255),b
 10522  000FB8  51D6               	movf	(??_f_write+5)& (0+255),w,b
 10523  000FBA  21DA               	addwfc	(??_f_write+9)& (0+255),w,b
 10524  000FBC  6FDE               	movwf	(??_f_write+13)& (0+255),b
 10525  000FBE  51D7               	movf	(??_f_write+6)& (0+255),w,b
 10526  000FC0  21DB               	addwfc	(??_f_write+10)& (0+255),w,b
 10527  000FC2  6FDF               	movwf	(??_f_write+14)& (0+255),b
 10528  000FC4  51D8               	movf	(??_f_write+7)& (0+255),w,b
 10529  000FC6  21DC               	addwfc	(??_f_write+11)& (0+255),w,b
 10530  000FC8  6FE0               	movwf	(??_f_write+15)& (0+255),b
 10531  000FCA  51D1               	movf	??_f_write& (0+255),w,b
 10532  000FCC  5DDD               	subwf	(??_f_write+12)& (0+255),w,b
 10533  000FCE  51D2               	movf	(??_f_write+1)& (0+255),w,b
 10534  000FD0  59DE               	subwfb	(??_f_write+13)& (0+255),w,b
 10535  000FD2  51D3               	movf	(??_f_write+2)& (0+255),w,b
 10536  000FD4  59DF               	subwfb	(??_f_write+14)& (0+255),w,b
 10537  000FD6  51D4               	movf	(??_f_write+3)& (0+255),w,b
 10538  000FD8  59E0               	subwfb	(??_f_write+15)& (0+255),w,b
 10539  000FDA  B0D8               	btfsc	status,0,c
 10540  000FDC  D049               	goto	l1311
 10541                           
 10542                           ; BSR set to: 0
 10543                           ;ff.c: 2771: mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)), ((UI
      +                          NT)512));
 10544  000FDE  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10545  000FE2  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10546  000FE6  CFDE F0D1          	movff	postinc2,??_f_write
 10547  000FEA  CFDD F0D2          	movff	postdec2,??_f_write+1
 10548  000FEE  0E2E               	movlw	46
 10549  000FF0  25D1               	addwf	??_f_write& (0+255),w,b
 10550  000FF2  6E1A               	movwf	mem_cpy@dst,c
 10551  000FF4  0E00               	movlw	0
 10552  000FF6  21D2               	addwfc	(??_f_write+1)& (0+255),w,b
 10553  000FF8  6E1B               	movwf	mem_cpy@dst+1,c
 10554  000FFA  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10555  000FFE  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10556  001002  EE10 F02A          	lfsr	1,42
 10557  001006  50DE               	movf	postinc2,w,c
 10558  001008  26E1               	addwf	fsr1l,f,c
 10559  00100A  50DD               	movf	postdec2,w,c
 10560  00100C  22E2               	addwfc	fsr1h,f,c
 10561  00100E  CFE6 F0D3          	movff	postinc1,??_f_write+2
 10562  001012  CFE5 F0D4          	movff	postdec1,??_f_write+3
 10563  001016  C1D5  F0D5         	movff	f_write@sect,??_f_write+4
 10564  00101A  C1D6  F0D6         	movff	f_write@sect+1,??_f_write+5
 10565  00101E  1FD5               	comf	(??_f_write+4)& (0+255),f,b
 10566  001020  1FD6               	comf	(??_f_write+5)& (0+255),f,b
 10567  001022  4BD5               	infsnz	(??_f_write+4)& (0+255),f,b
 10568  001024  2BD6               	incf	(??_f_write+5)& (0+255),f,b
 10569  001026  51D3               	movf	(??_f_write+2)& (0+255),w,b
 10570  001028  27D5               	addwf	(??_f_write+4)& (0+255),f,b
 10571  00102A  51D4               	movf	(??_f_write+3)& (0+255),w,b
 10572  00102C  23D6               	addwfc	(??_f_write+5)& (0+255),f,b
 10573  00102E  0E09               	movlw	9
 10574  001030                     u15975:
 10575  001030  90D8               	bcf	status,0,c
 10576  001032  37D5               	rlcf	(??_f_write+4)& (0+255),f,b
 10577  001034  37D6               	rlcf	(??_f_write+5)& (0+255),f,b
 10578  001036  2EE8               	decfsz	wreg,f,c
 10579  001038  D7FB               	goto	u15975
 10580  00103A  51D5               	movf	(??_f_write+4)& (0+255),w,b
 10581  00103C  0101               	movlb	1	; () banked
 10582  00103E  25D0               	addwf	f_write@wbuff& (0+255),w,b
 10583  001040  6E1C               	movwf	mem_cpy@src,c
 10584  001042  0100               	movlb	0	; () banked
 10585  001044  51D6               	movf	(??_f_write+5)& (0+255),w,b
 10586  001046  0101               	movlb	1	; () banked
 10587  001048  21D1               	addwfc	(f_write@wbuff+1)& (0+255),w,b
 10588  00104A  6E1D               	movwf	mem_cpy@src+1,c
 10589  00104C  0E02               	movlw	2
 10590  00104E  6E1F               	movwf	mem_cpy@cnt+1,c
 10591  001050  0E00               	movlw	0
 10592  001052  6E1E               	movwf	mem_cpy@cnt,c
 10593  001054  EC62  F023         	call	_mem_cpy	;wreg free
 10594                           
 10595                           ;ff.c: 2772: fp->fs->wflag = 0;
 10596  001058  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10597  00105C  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10598  001060  EE10 F004          	lfsr	1,4
 10599  001064  50DE               	movf	postinc2,w,c
 10600  001066  26E1               	addwf	fsr1l,f,c
 10601  001068  50DD               	movf	postdec2,w,c
 10602  00106A  22E2               	addwfc	fsr1h,f,c
 10603  00106C  0E00               	movlw	0
 10604  00106E  6EE7               	movwf	indf1,c
 10605  001070                     l1311:
 10606                           
 10607                           ;ff.c: 2773: }
 10608                           ;ff.c: 2781: wcnt = ((UINT)512) * cc;
 10609  001070  C1D3  F0D1         	movff	f_write@cc,??_f_write
 10610  001074  C1D4  F0D2         	movff	f_write@cc+1,??_f_write+1
 10611  001078  0E09               	movlw	9
 10612  00107A                     u15985:
 10613  00107A  90D8               	bcf	status,0,c
 10614  00107C  0100               	movlb	0	; () banked
 10615  00107E  37D1               	rlcf	??_f_write& (0+255),f,b
 10616  001080  37D2               	rlcf	(??_f_write+1)& (0+255),f,b
 10617  001082  2EE8               	decfsz	wreg,f,c
 10618  001084  D7FA               	goto	u15985
 10619  001086  C0D1  F1DD         	movff	??_f_write,f_write@wcnt
 10620  00108A  C0D2  F1DE         	movff	??_f_write+1,f_write@wcnt+1
 10621                           
 10622                           ;ff.c: 2782: continue;
 10623  00108E  D0DB               	goto	l1312
 10624  001090                     l1308:
 10625                           
 10626                           ;ff.c: 2783: }
 10627                           ;ff.c: 2785: if (fp->fptr >= fp->fsize) {
 10628                           
 10629                           ; BSR set to: 0
 10630  001090  0100               	movlb	0	; () banked
 10631  001092  EE20 F00A          	lfsr	2,10
 10632  001096  51C9               	movf	f_write@fp& (0+255),w,b
 10633  001098  26D9               	addwf	fsr2l,f,c
 10634  00109A  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10635  00109C  22DA               	addwfc	fsr2h,f,c
 10636  00109E  EE10 F006          	lfsr	1,6
 10637  0010A2  51C9               	movf	f_write@fp& (0+255),w,b
 10638  0010A4  26E1               	addwf	fsr1l,f,c
 10639  0010A6  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10640  0010A8  22E2               	addwfc	fsr1h,f,c
 10641  0010AA  50DE               	movf	postinc2,w,c
 10642  0010AC  5CE6               	subwf	postinc1,w,c
 10643  0010AE  50DE               	movf	postinc2,w,c
 10644  0010B0  58E6               	subwfb	postinc1,w,c
 10645  0010B2  50DE               	movf	postinc2,w,c
 10646  0010B4  58E6               	subwfb	postinc1,w,c
 10647  0010B6  50DE               	movf	postinc2,w,c
 10648  0010B8  58E6               	subwfb	postinc1,w,c
 10649  0010BA  A0D8               	btfss	status,0,c
 10650  0010BC  D029               	goto	l1313
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;ff.c: 2786: if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ER
      +                          R; };
 10654  0010BE  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10655  0010C2  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10656  0010C6  CFDE F077          	movff	postinc2,sync_window@fs
 10657  0010CA  CFDD F078          	movff	postdec2,sync_window@fs+1
 10658  0010CE  EC71  F01C         	call	_sync_window	;wreg free
 10659  0010D2  0900               	iorlw	0
 10660  0010D4  B4D8               	btfsc	status,2,c
 10661  0010D6  D00A               	goto	l1314
 10662  0010D8  0100               	movlb	0	; () banked
 10663  0010DA  EE20 F005          	lfsr	2,5
 10664  0010DE  51C9               	movf	f_write@fp& (0+255),w,b
 10665  0010E0  26D9               	addwf	fsr2l,f,c
 10666  0010E2  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10667  0010E4  22DA               	addwfc	fsr2h,f,c
 10668  0010E6  0E01               	movlw	1
 10669  0010E8  6EDF               	movwf	indf2,c
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;	Return value of _f_write is never used
 10673  0010EA  0012               	return	
 10674  0010EC                     l1314:
 10675                           
 10676                           ;ff.c: 2787: fp->fs->winsect = sect;
 10677                           
 10678                           ; BSR set to: 0
 10679  0010EC  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10680  0010F0  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10681  0010F4  EE10 F02A          	lfsr	1,42
 10682  0010F8  50DE               	movf	postinc2,w,c
 10683  0010FA  26E1               	addwf	fsr1l,f,c
 10684  0010FC  50DD               	movf	postdec2,w,c
 10685  0010FE  22E2               	addwfc	fsr1h,f,c
 10686  001100  C1D5  FFE6         	movff	f_write@sect,postinc1
 10687  001104  C1D6  FFE6         	movff	f_write@sect+1,postinc1
 10688  001108  C1D7  FFE6         	movff	f_write@sect+2,postinc1
 10689  00110C  C1D8  FFE6         	movff	f_write@sect+3,postinc1
 10690  001110                     l1313:
 10691                           
 10692                           ;ff.c: 2788: }
 10693                           ;ff.c: 2796: fp->dsect = sect;
 10694  001110  0100               	movlb	0	; () banked
 10695  001112  EE20 F016          	lfsr	2,22
 10696  001116  51C9               	movf	f_write@fp& (0+255),w,b
 10697  001118  26D9               	addwf	fsr2l,f,c
 10698  00111A  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10699  00111C  22DA               	addwfc	fsr2h,f,c
 10700  00111E  C1D5  FFDE         	movff	f_write@sect,postinc2
 10701  001122  C1D6  FFDE         	movff	f_write@sect+1,postinc2
 10702  001126  C1D7  FFDE         	movff	f_write@sect+2,postinc2
 10703  00112A  C1D8  FFDE         	movff	f_write@sect+3,postinc2
 10704  00112E                     l1296:
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;ff.c: 2797: }
 10708                           ;ff.c: 2798: wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
 10709                           
 10710                           ; BSR set to: 0
 10711  00112E  0EFF               	movlw	255
 10712  001130  6FD1               	movwf	??_f_write& (0+255),b
 10713  001132  0E01               	movlw	1
 10714  001134  6FD2               	movwf	(??_f_write+1)& (0+255),b
 10715  001136  EE20 F006          	lfsr	2,6
 10716  00113A  51C9               	movf	f_write@fp& (0+255),w,b
 10717  00113C  26D9               	addwf	fsr2l,f,c
 10718  00113E  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10719  001140  22DA               	addwfc	fsr2h,f,c
 10720  001142  CFDE F0D3          	movff	postinc2,??_f_write+2
 10721  001146  CFDD F0D4          	movff	postdec2,??_f_write+3
 10722  00114A  51D1               	movf	??_f_write& (0+255),w,b
 10723  00114C  17D3               	andwf	(??_f_write+2)& (0+255),f,b
 10724  00114E  51D2               	movf	(??_f_write+1)& (0+255),w,b
 10725  001150  17D4               	andwf	(??_f_write+3)& (0+255),f,b
 10726  001152  1FD3               	comf	(??_f_write+2)& (0+255),f,b
 10727  001154  1FD4               	comf	(??_f_write+3)& (0+255),f,b
 10728  001156  4BD3               	infsnz	(??_f_write+2)& (0+255),f,b
 10729  001158  2BD4               	incf	(??_f_write+3)& (0+255),f,b
 10730  00115A  0E00               	movlw	0
 10731  00115C  25D3               	addwf	(??_f_write+2)& (0+255),w,b
 10732  00115E  0101               	movlb	1	; () banked
 10733  001160  6FDD               	movwf	f_write@wcnt& (0+255),b
 10734  001162  0E02               	movlw	2
 10735  001164  0100               	movlb	0	; () banked
 10736  001166  21D4               	addwfc	(??_f_write+3)& (0+255),w,b
 10737  001168  0101               	movlb	1	; () banked
 10738  00116A  6FDE               	movwf	(f_write@wcnt+1)& (0+255),b
 10739                           
 10740                           ; BSR set to: 1
 10741                           ;ff.c: 2799: if (wcnt > btw) wcnt = btw;
 10742  00116C  51DD               	movf	f_write@wcnt& (0+255),w,b
 10743  00116E  0100               	movlb	0	; () banked
 10744  001170  5DCD               	subwf	f_write@btw& (0+255),w,b
 10745  001172  0101               	movlb	1	; () banked
 10746  001174  51DE               	movf	(f_write@wcnt+1)& (0+255),w,b
 10747  001176  0100               	movlb	0	; () banked
 10748  001178  59CE               	subwfb	(f_write@btw+1)& (0+255),w,b
 10749  00117A  B0D8               	btfsc	status,0,c
 10750  00117C  D004               	goto	l1315
 10751                           
 10752                           ; BSR set to: 0
 10753  00117E  C0CD  F1DD         	movff	f_write@btw,f_write@wcnt
 10754  001182  C0CE  F1DE         	movff	f_write@btw+1,f_write@wcnt+1
 10755  001186                     l1315:
 10756                           
 10757                           ; BSR set to: 0
 10758                           ;ff.c: 2801: if (move_window(fp->fs, fp->dsect) != FR_OK)
 10759                           
 10760                           ; BSR set to: 0
 10761  001186  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10762  00118A  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10763  00118E  CFDE F08C          	movff	postinc2,move_window@fs
 10764  001192  CFDD F08D          	movff	postdec2,move_window@fs+1
 10765  001196  EE20 F016          	lfsr	2,22
 10766  00119A  51C9               	movf	f_write@fp& (0+255),w,b
 10767  00119C  26D9               	addwf	fsr2l,f,c
 10768  00119E  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10769  0011A0  22DA               	addwfc	fsr2h,f,c
 10770  0011A2  CFDE F08E          	movff	postinc2,move_window@sector
 10771  0011A6  CFDE F08F          	movff	postinc2,move_window@sector+1
 10772  0011AA  CFDE F090          	movff	postinc2,move_window@sector+2
 10773  0011AE  CFDE F091          	movff	postinc2,move_window@sector+3
 10774  0011B2  ECCA  F024         	call	_move_window	;wreg free
 10775  0011B6  0900               	iorlw	0
 10776  0011B8  B4D8               	btfsc	status,2,c
 10777  0011BA  D00A               	goto	l1316
 10778                           
 10779                           ;ff.c: 2802: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
 10780  0011BC  0100               	movlb	0	; () banked
 10781  0011BE  EE20 F005          	lfsr	2,5
 10782  0011C2  51C9               	movf	f_write@fp& (0+255),w,b
 10783  0011C4  26D9               	addwf	fsr2l,f,c
 10784  0011C6  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10785  0011C8  22DA               	addwfc	fsr2h,f,c
 10786  0011CA  0E01               	movlw	1
 10787  0011CC  6EDF               	movwf	indf2,c
 10788                           
 10789                           ; BSR set to: 0
 10790                           ;	Return value of _f_write is never used
 10791  0011CE  0012               	return	
 10792  0011D0                     l1316:
 10793                           
 10794                           ;ff.c: 2803: mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
 10795                           
 10796                           ; BSR set to: 0
 10797  0011D0  0EFF               	movlw	255
 10798  0011D2  0100               	movlb	0	; () banked
 10799  0011D4  6FD1               	movwf	??_f_write& (0+255),b
 10800  0011D6  0E01               	movlw	1
 10801  0011D8  6FD2               	movwf	(??_f_write+1)& (0+255),b
 10802  0011DA  EE20 F006          	lfsr	2,6
 10803  0011DE  51C9               	movf	f_write@fp& (0+255),w,b
 10804  0011E0  26D9               	addwf	fsr2l,f,c
 10805  0011E2  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10806  0011E4  22DA               	addwfc	fsr2h,f,c
 10807  0011E6  CFDE F0D3          	movff	postinc2,??_f_write+2
 10808  0011EA  CFDD F0D4          	movff	postdec2,??_f_write+3
 10809  0011EE  51D1               	movf	??_f_write& (0+255),w,b
 10810  0011F0  17D3               	andwf	(??_f_write+2)& (0+255),f,b
 10811  0011F2  51D2               	movf	(??_f_write+1)& (0+255),w,b
 10812  0011F4  17D4               	andwf	(??_f_write+3)& (0+255),f,b
 10813  0011F6  0E2E               	movlw	46
 10814  0011F8  27D3               	addwf	(??_f_write+2)& (0+255),f,b
 10815  0011FA  0E00               	movlw	0
 10816  0011FC  23D4               	addwfc	(??_f_write+3)& (0+255),f,b
 10817  0011FE  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10818  001202  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10819  001206  CFDE F0D5          	movff	postinc2,??_f_write+4
 10820  00120A  CFDD F0D6          	movff	postdec2,??_f_write+5
 10821  00120E  51D3               	movf	(??_f_write+2)& (0+255),w,b
 10822  001210  25D5               	addwf	(??_f_write+4)& (0+255),w,b
 10823  001212  6E1A               	movwf	mem_cpy@dst,c
 10824  001214  51D4               	movf	(??_f_write+3)& (0+255),w,b
 10825  001216  21D6               	addwfc	(??_f_write+5)& (0+255),w,b
 10826  001218  6E1B               	movwf	mem_cpy@dst+1,c
 10827  00121A  C1D0  F01C         	movff	f_write@wbuff,mem_cpy@src
 10828  00121E  C1D1  F01D         	movff	f_write@wbuff+1,mem_cpy@src+1
 10829  001222  C1DD  F01E         	movff	f_write@wcnt,mem_cpy@cnt
 10830  001226  C1DE  F01F         	movff	f_write@wcnt+1,mem_cpy@cnt+1
 10831  00122A  EC62  F023         	call	_mem_cpy	;wreg free
 10832                           
 10833                           ;ff.c: 2804: fp->fs->wflag = 1;
 10834  00122E  C0C9  FFD9         	movff	f_write@fp,fsr2l
 10835  001232  C0CA  FFDA         	movff	f_write@fp+1,fsr2h
 10836  001236  EE10 F004          	lfsr	1,4
 10837  00123A  50DE               	movf	postinc2,w,c
 10838  00123C  26E1               	addwf	fsr1l,f,c
 10839  00123E  50DD               	movf	postdec2,w,c
 10840  001240  22E2               	addwfc	fsr1h,f,c
 10841  001242  0E01               	movlw	1
 10842  001244  6EE7               	movwf	indf1,c
 10843  001246                     l1312:
 10844  001246  0101               	movlb	1	; () banked
 10845  001248  51DD               	movf	f_write@wcnt& (0+255),w,b
 10846  00124A  27D0               	addwf	f_write@wbuff& (0+255),f,b
 10847  00124C  51DE               	movf	(f_write@wcnt+1)& (0+255),w,b
 10848  00124E  23D1               	addwfc	(f_write@wbuff+1)& (0+255),f,b
 10849                           
 10850                           ; BSR set to: 1
 10851  001250  0100               	movlb	0	; () banked
 10852  001252  EE20 F006          	lfsr	2,6
 10853  001256  51C9               	movf	f_write@fp& (0+255),w,b
 10854  001258  26D9               	addwf	fsr2l,f,c
 10855  00125A  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10856  00125C  22DA               	addwfc	fsr2h,f,c
 10857  00125E  0101               	movlb	1	; () banked
 10858  001260  51DD               	movf	f_write@wcnt& (0+255),w,b
 10859  001262  26DE               	addwf	postinc2,f,c
 10860  001264  51DE               	movf	(f_write@wcnt+1)& (0+255),w,b
 10861  001266  22DE               	addwfc	postinc2,f,c
 10862  001268  0E00               	movlw	0
 10863  00126A  22DE               	addwfc	postinc2,f,c
 10864  00126C  22DE               	addwfc	postinc2,f,c
 10865                           
 10866                           ; BSR set to: 1
 10867  00126E  C0CF  FFD9         	movff	f_write@bw,fsr2l
 10868  001272  C0D0  FFDA         	movff	f_write@bw+1,fsr2h
 10869  001276  51DD               	movf	f_write@wcnt& (0+255),w,b
 10870  001278  26DE               	addwf	postinc2,f,c
 10871  00127A  51DE               	movf	(f_write@wcnt+1)& (0+255),w,b
 10872  00127C  22DD               	addwfc	postdec2,f,c
 10873                           
 10874                           ; BSR set to: 1
 10875  00127E  51DD               	movf	f_write@wcnt& (0+255),w,b
 10876  001280  0100               	movlb	0	; () banked
 10877  001282  5FCD               	subwf	f_write@btw& (0+255),f,b
 10878  001284  0101               	movlb	1	; () banked
 10879  001286  51DE               	movf	(f_write@wcnt+1)& (0+255),w,b
 10880  001288  0100               	movlb	0	; () banked
 10881  00128A  5BCE               	subwfb	(f_write@btw+1)& (0+255),f,b
 10882  00128C                     l1294:
 10883                           
 10884                           ; BSR set to: 0
 10885                           
 10886                           ; BSR set to: 0
 10887  00128C  51CD               	movf	f_write@btw& (0+255),w,b
 10888  00128E  11CE               	iorwf	(f_write@btw+1)& (0+255),w,b
 10889  001290  A4D8               	btfss	status,2,c
 10890  001292  D490               	goto	l1295
 10891  001294                     u16030:
 10892                           
 10893                           ;ff.c: 2809: }
 10894                           ;ff.c: 2811: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
 10895                           
 10896                           ; BSR set to: 0
 10897  001294  0100               	movlb	0	; () banked
 10898  001296  EE20 F006          	lfsr	2,6
 10899  00129A  51C9               	movf	f_write@fp& (0+255),w,b
 10900  00129C  26D9               	addwf	fsr2l,f,c
 10901  00129E  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10902  0012A0  22DA               	addwfc	fsr2h,f,c
 10903  0012A2  EE10 F00A          	lfsr	1,10
 10904  0012A6  51C9               	movf	f_write@fp& (0+255),w,b
 10905  0012A8  26E1               	addwf	fsr1l,f,c
 10906  0012AA  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10907  0012AC  22E2               	addwfc	fsr1h,f,c
 10908  0012AE  50DE               	movf	postinc2,w,c
 10909  0012B0  5CE6               	subwf	postinc1,w,c
 10910  0012B2  50DE               	movf	postinc2,w,c
 10911  0012B4  58E6               	subwfb	postinc1,w,c
 10912  0012B6  50DE               	movf	postinc2,w,c
 10913  0012B8  58E6               	subwfb	postinc1,w,c
 10914  0012BA  50DE               	movf	postinc2,w,c
 10915  0012BC  58E6               	subwfb	postinc1,w,c
 10916  0012BE  B0D8               	btfsc	status,0,c
 10917  0012C0  D014               	goto	l1317
 10918                           
 10919                           ; BSR set to: 0
 10920  0012C2  EE20 F006          	lfsr	2,6
 10921  0012C6  51C9               	movf	f_write@fp& (0+255),w,b
 10922  0012C8  26D9               	addwf	fsr2l,f,c
 10923  0012CA  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10924  0012CC  22DA               	addwfc	fsr2h,f,c
 10925  0012CE  EE10 F00A          	lfsr	1,10
 10926  0012D2  51C9               	movf	f_write@fp& (0+255),w,b
 10927  0012D4  26E1               	addwf	fsr1l,f,c
 10928  0012D6  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10929  0012D8  22E2               	addwfc	fsr1h,f,c
 10930  0012DA  CFDE FFE6          	movff	postinc2,postinc1
 10931  0012DE  CFDE FFE6          	movff	postinc2,postinc1
 10932  0012E2  CFDE FFE6          	movff	postinc2,postinc1
 10933  0012E6  CFDE FFE6          	movff	postinc2,postinc1
 10934  0012EA                     l1317:
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;ff.c: 2812: fp->flag |= 0x20;
 10938                           
 10939                           ; BSR set to: 0
 10940  0012EA  EE20 F004          	lfsr	2,4
 10941  0012EE  51C9               	movf	f_write@fp& (0+255),w,b
 10942  0012F0  26D9               	addwf	fsr2l,f,c
 10943  0012F2  51CA               	movf	(f_write@fp+1)& (0+255),w,b
 10944  0012F4  22DA               	addwfc	fsr2h,f,c
 10945  0012F6  0E00               	movlw	0
 10946  0012F8  8ADB               	bsf	plusw2,5,c
 10947  0012FA  0012               	return	
 10948  0012FC                     __end_of_f_write:
 10949                           	opt stack 0
 10950                           tblptru	equ	0xFF8
 10951                           tblptrh	equ	0xFF7
 10952                           tblptrl	equ	0xFF6
 10953                           tablat	equ	0xFF5
 10954                           prodh	equ	0xFF4
 10955                           prodl	equ	0xFF3
 10956                           intcon	equ	0xFF2
 10957                           intcon2	equ	0xFF1
 10958                           intcon3	equ	0xFF0
 10959                           indf0	equ	0xFEF
 10960                           postinc0	equ	0xFEE
 10961                           fsr0h	equ	0xFEA
 10962                           fsr0l	equ	0xFE9
 10963                           wreg	equ	0xFE8
 10964                           indf1	equ	0xFE7
 10965                           postinc1	equ	0xFE6
 10966                           postdec1	equ	0xFE5
 10967                           fsr1h	equ	0xFE2
 10968                           fsr1l	equ	0xFE1
 10969                           indf2	equ	0xFDF
 10970                           postinc2	equ	0xFDE
 10971                           postdec2	equ	0xFDD
 10972                           plusw2	equ	0xFDB
 10973                           fsr2h	equ	0xFDA
 10974                           fsr2l	equ	0xFD9
 10975                           status	equ	0xFD8
 10976                           
 10977 ;; *************** function _validate *****************
 10978 ;; Defined at:
 10979 ;;		line 2372 in file "bibliotecas/ff.c"
 10980 ;; Parameters:    Size  Location     Type
 10981 ;;  obj             2   32[COMRAM] PTR void 
 10982 ;;		 -> fil(32), 
 10983 ;; Auto vars:     Size  Location     Type
 10984 ;;  fil             2   38[COMRAM] PTR struct .
 10985 ;;		 -> fil(32), 
 10986 ;; Return value:  Size  Location     Type
 10987 ;;                  1    wreg      enum E75
 10988 ;; Registers used:
 10989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10995 ;;      Params:         2       0       0       0       0       0       0       0       0
 10996 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10997 ;;      Temps:          4       0       0       0       0       0       0       0       0
 10998 ;;      Totals:         8       0       0       0       0       0       0       0       0
 10999 ;;Total ram usage:        8 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    4
 11002 ;; This function calls:
 11003 ;;		_disk_status
 11004 ;; This function is called by:
 11005 ;;		_f_write
 11006 ;;		_f_sync
 11007 ;;		_f_close
 11008 ;;		_f_lseek
 11009 ;;		_f_read
 11010 ;; This function uses a non-reentrant model
 11011 ;;
 11012                           
 11013                           	psect	text36
 11014  004B80                     __ptext36:
 11015                           	opt stack 0
 11016  004B80                     _validate:
 11017                           	opt stack 23
 11018                           
 11019                           ;ff.c: 2376: FIL *fil = (FIL*)obj;
 11020                           
 11021                           ;incstack = 0
 11022  004B80  C021  F027         	movff	validate@obj,validate@fil
 11023  004B84  C022  F028         	movff	validate@obj+1,validate@fil+1
 11024                           
 11025                           ;ff.c: 2379: if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (dis
      +                          k_status(fil->fs->drv) & 0x01))
 11026  004B88  5027               	movf	validate@fil,w,c
 11027  004B8A  1028               	iorwf	validate@fil+1,w,c
 11028  004B8C  B4D8               	btfsc	status,2,c
 11029  004B8E  D03E               	goto	u14350
 11030  004B90  C027  FFD9         	movff	validate@fil,fsr2l
 11031  004B94  C028  FFDA         	movff	validate@fil+1,fsr2h
 11032  004B98  50DE               	movf	postinc2,w,c
 11033  004B9A  10DE               	iorwf	postinc2,w,c
 11034  004B9C  B4D8               	btfsc	status,2,c
 11035  004B9E  D036               	goto	u14350
 11036  004BA0  C027  FFD9         	movff	validate@fil,fsr2l
 11037  004BA4  C028  FFDA         	movff	validate@fil+1,fsr2h
 11038  004BA8  CFDE F023          	movff	postinc2,??_validate
 11039  004BAC  CFDD F024          	movff	postdec2,??_validate+1
 11040  004BB0  C023  FFD9         	movff	??_validate,fsr2l
 11041  004BB4  C024  FFDA         	movff	??_validate+1,fsr2h
 11042  004BB8  50DF               	movf	indf2,w,c
 11043  004BBA  B4D8               	btfsc	status,2,c
 11044  004BBC  D027               	goto	u14350
 11045  004BBE  EE20 F002          	lfsr	2,2
 11046  004BC2  5027               	movf	validate@fil,w,c
 11047  004BC4  26D9               	addwf	fsr2l,f,c
 11048  004BC6  5028               	movf	validate@fil+1,w,c
 11049  004BC8  22DA               	addwfc	fsr2h,f,c
 11050  004BCA  C027  FFE1         	movff	validate@fil,fsr1l
 11051  004BCE  C028  FFE2         	movff	validate@fil+1,fsr1h
 11052  004BD2  EE00 F006          	lfsr	0,6
 11053  004BD6  50E6               	movf	postinc1,w,c
 11054  004BD8  26E9               	addwf	fsr0l,f,c
 11055  004BDA  50E5               	movf	postdec1,w,c
 11056  004BDC  22EA               	addwfc	fsr0h,f,c
 11057  004BDE  50DE               	movf	postinc2,w,c
 11058  004BE0  18EE               	xorwf	postinc0,w,c
 11059  004BE2  E114               	bnz	l11243
 11060  004BE4  50DE               	movf	postinc2,w,c
 11061  004BE6  18EE               	xorwf	postinc0,w,c
 11062  004BE8  A4D8               	btfss	status,2,c
 11063  004BEA  D010               	goto	u14350
 11064  004BEC  C027  FFD9         	movff	validate@fil,fsr2l
 11065  004BF0  C028  FFDA         	movff	validate@fil+1,fsr2h
 11066  004BF4  EE10 F001          	lfsr	1,1
 11067  004BF8  50DE               	movf	postinc2,w,c
 11068  004BFA  26E1               	addwf	fsr1l,f,c
 11069  004BFC  50DD               	movf	postdec2,w,c
 11070  004BFE  22E2               	addwfc	fsr1h,f,c
 11071  004C00  50E7               	movf	indf1,w,c
 11072  004C02  EC25  F02A         	call	_disk_status
 11073  004C06  6E23               	movwf	??_validate& (0+255),c
 11074  004C08  A023               	btfss	??_validate,0,c
 11075  004C0A  D002               	goto	l1222
 11076  004C0C                     u14350:
 11077  004C0C                     l11243:
 11078                           
 11079                           ;ff.c: 2380: return FR_INVALID_OBJECT;
 11080  004C0C  0E09               	movlw	9
 11081  004C0E  0012               	return	
 11082  004C10                     l1222:
 11083                           
 11084                           ;ff.c: 2382: ;
 11085                           ;ff.c: 2384: return FR_OK;
 11086  004C10  0E00               	movlw	0
 11087  004C12  0012               	return	
 11088  004C14                     __end_of_validate:
 11089                           	opt stack 0
 11090                           tblptru	equ	0xFF8
 11091                           tblptrh	equ	0xFF7
 11092                           tblptrl	equ	0xFF6
 11093                           tablat	equ	0xFF5
 11094                           prodh	equ	0xFF4
 11095                           prodl	equ	0xFF3
 11096                           intcon	equ	0xFF2
 11097                           intcon2	equ	0xFF1
 11098                           intcon3	equ	0xFF0
 11099                           indf0	equ	0xFEF
 11100                           postinc0	equ	0xFEE
 11101                           fsr0h	equ	0xFEA
 11102                           fsr0l	equ	0xFE9
 11103                           wreg	equ	0xFE8
 11104                           indf1	equ	0xFE7
 11105                           postinc1	equ	0xFE6
 11106                           postdec1	equ	0xFE5
 11107                           fsr1h	equ	0xFE2
 11108                           fsr1l	equ	0xFE1
 11109                           indf2	equ	0xFDF
 11110                           postinc2	equ	0xFDE
 11111                           postdec2	equ	0xFDD
 11112                           plusw2	equ	0xFDB
 11113                           fsr2h	equ	0xFDA
 11114                           fsr2l	equ	0xFD9
 11115                           status	equ	0xFD8
 11116                           
 11117 ;; *************** function _mem_cpy *****************
 11118 ;; Defined at:
 11119 ;;		line 507 in file "bibliotecas/ff.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;  dst             2   25[COMRAM] PTR void 
 11122 ;;		 -> fs.win(512), NULL(0), fs(558), 
 11123 ;;  src             2   27[COMRAM] PTR const void 
 11124 ;;		 -> f_open@sfn(12), NULL(0), STR_11(8), fs(558), 
 11125 ;;  cnt             2   29[COMRAM] unsigned int 
 11126 ;; Auto vars:     Size  Location     Type
 11127 ;;  s               2   35[COMRAM] PTR const unsigned char 
 11128 ;;		 -> f_open@sfn(12), NULL(0), STR_11(8), fs(558), 
 11129 ;;  d               2   33[COMRAM] PTR unsigned char 
 11130 ;;		 -> fs.win(512), NULL(0), fs(558), 
 11131 ;; Return value:  Size  Location     Type
 11132 ;;                  1    wreg      void 
 11133 ;; Registers used:
 11134 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11135 ;; Tracked objects:
 11136 ;;		On entry : 0/0
 11137 ;;		On exit  : 0/0
 11138 ;;		Unchanged: 0/0
 11139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11140 ;;      Params:         6       0       0       0       0       0       0       0       0
 11141 ;;      Locals:         4       0       0       0       0       0       0       0       0
 11142 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11143 ;;      Totals:        12       0       0       0       0       0       0       0       0
 11144 ;;Total ram usage:       12 bytes
 11145 ;; Hardware stack levels used:    1
 11146 ;; Hardware stack levels required when called:    2
 11147 ;; This function calls:
 11148 ;;		Nothing
 11149 ;; This function is called by:
 11150 ;;		_dir_register
 11151 ;;		_f_write
 11152 ;;		_f_read
 11153 ;; This function uses a non-reentrant model
 11154 ;;
 11155                           
 11156                           	psect	text37
 11157  0046C4                     __ptext37:
 11158                           	opt stack 0
 11159  0046C4                     _mem_cpy:
 11160                           	opt stack 24
 11161                           
 11162                           ;ff.c: 508: BYTE *d = (BYTE*)dst;
 11163                           
 11164                           ;incstack = 0
 11165  0046C4  C01A  F022         	movff	mem_cpy@dst,mem_cpy@d
 11166  0046C8  C01B  F023         	movff	mem_cpy@dst+1,mem_cpy@d+1
 11167                           
 11168                           ;ff.c: 509: const BYTE *s = (const BYTE*)src;
 11169  0046CC  C01C  F024         	movff	mem_cpy@src,mem_cpy@s
 11170  0046D0  C01D  F025         	movff	mem_cpy@src+1,mem_cpy@s+1
 11171                           
 11172                           ;ff.c: 512: while (cnt >= sizeof (int)) {
 11173  0046D4  D02B               	goto	l860
 11174  0046D6                     l10895:
 11175                           
 11176                           ;ff.c: 513: *(int*)d = *(int*)s;
 11177  0046D6  C024  FFF6         	movff	mem_cpy@s,tblptrl
 11178  0046DA  C025  FFF7         	movff	mem_cpy@s+1,tblptrh
 11179  0046DE  6AF8               	clrf	tblptru,c
 11180  0046E0  0E07               	movlw	(high __ramtop+-1)
 11181  0046E2  64F7               	cpfsgt	tblptrh,c
 11182  0046E4  D007               	bra	u13607
 11183  0046E6  0009               	tblrd		*+
 11184  0046E8  CFF5 F020          	movff	tablat,??_mem_cpy
 11185  0046EC  0009               	tblrd		*+
 11186  0046EE  CFF5 F021          	movff	tablat,??_mem_cpy+1
 11187  0046F2  D008               	bra	u13600
 11188  0046F4                     u13607:
 11189  0046F4  CFF6 FFE9          	movff	tblptrl,fsr0l
 11190  0046F8  CFF7 FFEA          	movff	tblptrh,fsr0h
 11191  0046FC  CFEE F020          	movff	postinc0,??_mem_cpy
 11192  004700  CFEE F021          	movff	postinc0,??_mem_cpy+1
 11193  004704                     u13600:
 11194  004704  C022  FFD9         	movff	mem_cpy@d,fsr2l
 11195  004708  C023  FFDA         	movff	mem_cpy@d+1,fsr2h
 11196  00470C  C020  FFDE         	movff	??_mem_cpy,postinc2
 11197  004710  C021  FFDD         	movff	??_mem_cpy+1,postdec2
 11198                           
 11199                           ;ff.c: 514: d += sizeof (int); s += sizeof (int);
 11200  004714  0E02               	movlw	2
 11201  004716  2622               	addwf	mem_cpy@d,f,c
 11202  004718  0E00               	movlw	0
 11203  00471A  2223               	addwfc	mem_cpy@d+1,f,c
 11204  00471C  0E02               	movlw	2
 11205  00471E  2624               	addwf	mem_cpy@s,f,c
 11206  004720  0E00               	movlw	0
 11207  004722  2225               	addwfc	mem_cpy@s+1,f,c
 11208                           
 11209                           ;ff.c: 515: cnt -= sizeof (int);
 11210  004724  0E02               	movlw	2
 11211  004726  5E1E               	subwf	mem_cpy@cnt,f,c
 11212  004728  0E00               	movlw	0
 11213  00472A  5A1F               	subwfb	mem_cpy@cnt+1,f,c
 11214  00472C                     l860:
 11215  00472C  501F               	movf	mem_cpy@cnt+1,w,c
 11216  00472E  E1D3               	bnz	l10895
 11217  004730  0E02               	movlw	2
 11218  004732  5C1E               	subwf	mem_cpy@cnt,w,c
 11219  004734  A0D8               	btfss	status,0,c
 11220  004736  D01A               	goto	l863
 11221  004738  D7CE               	goto	l861
 11222  00473A                     l10905:
 11223                           
 11224                           ;ff.c: 519: *d++ = *s++;
 11225  00473A  C024  FFF6         	movff	mem_cpy@s,tblptrl
 11226  00473E  C025  FFF7         	movff	mem_cpy@s+1,tblptrh
 11227  004742  6AF8               	clrf	tblptru,c
 11228  004744  C022  FFD9         	movff	mem_cpy@d,fsr2l
 11229  004748  C023  FFDA         	movff	mem_cpy@d+1,fsr2h
 11230  00474C  0E07               	movlw	(high __ramtop+-1)
 11231  00474E  64F7               	cpfsgt	tblptrh,c
 11232  004750  D003               	bra	u13627
 11233  004752  0008               	tblrd		*
 11234  004754  50F5               	movf	tablat,w,c
 11235  004756  D005               	bra	u13620
 11236  004758                     u13627:
 11237  004758  CFF6 FFE9          	movff	tblptrl,fsr0l
 11238  00475C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11239  004760  50EF               	movf	indf0,w,c
 11240  004762                     u13620:
 11241  004762  6EDF               	movwf	indf2,c
 11242  004764  4A24               	infsnz	mem_cpy@s,f,c
 11243  004766  2A25               	incf	mem_cpy@s+1,f,c
 11244  004768  4A22               	infsnz	mem_cpy@d,f,c
 11245  00476A  2A23               	incf	mem_cpy@d+1,f,c
 11246  00476C                     l863:
 11247  00476C  061E               	decf	mem_cpy@cnt,f,c
 11248  00476E  A0D8               	btfss	status,0,c
 11249  004770  061F               	decf	mem_cpy@cnt+1,f,c
 11250  004772  281E               	incf	mem_cpy@cnt,w,c
 11251  004774  E1E2               	bnz	l10905
 11252  004776  281F               	incf	mem_cpy@cnt+1,w,c
 11253  004778  B4D8               	btfsc	status,2,c
 11254  00477A  0012               	return	
 11255  00477C  D7DE               	goto	l864
 11256  00477E                     __end_of_mem_cpy:
 11257                           	opt stack 0
 11258                           tblptru	equ	0xFF8
 11259                           tblptrh	equ	0xFF7
 11260                           tblptrl	equ	0xFF6
 11261                           tablat	equ	0xFF5
 11262                           prodh	equ	0xFF4
 11263                           prodl	equ	0xFF3
 11264                           intcon	equ	0xFF2
 11265                           intcon2	equ	0xFF1
 11266                           intcon3	equ	0xFF0
 11267                           indf0	equ	0xFEF
 11268                           postinc0	equ	0xFEE
 11269                           fsr0h	equ	0xFEA
 11270                           fsr0l	equ	0xFE9
 11271                           wreg	equ	0xFE8
 11272                           indf1	equ	0xFE7
 11273                           postinc1	equ	0xFE6
 11274                           postdec1	equ	0xFE5
 11275                           fsr1h	equ	0xFE2
 11276                           fsr1l	equ	0xFE1
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           plusw2	equ	0xFDB
 11281                           fsr2h	equ	0xFDA
 11282                           fsr2l	equ	0xFD9
 11283                           status	equ	0xFD8
 11284                           
 11285 ;; *************** function _create_chain *****************
 11286 ;; Defined at:
 11287 ;;		line 990 in file "bibliotecas/ff.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;  fs              2   82[BANK0 ] PTR struct .
 11290 ;;		 -> NULL(0), fs(558), 
 11291 ;;  clst            4   84[BANK0 ] unsigned long 
 11292 ;; Auto vars:     Size  Location     Type
 11293 ;;  cs              4  101[BANK0 ] unsigned long 
 11294 ;;  ncl             4   97[BANK0 ] unsigned long 
 11295 ;;  scl             4   93[BANK0 ] unsigned long 
 11296 ;;  res             1   92[BANK0 ] enum E75
 11297 ;; Return value:  Size  Location     Type
 11298 ;;                  4   82[BANK0 ] unsigned long 
 11299 ;; Registers used:
 11300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11301 ;; Tracked objects:
 11302 ;;		On entry : 0/0
 11303 ;;		On exit  : 0/0
 11304 ;;		Unchanged: 0/0
 11305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11306 ;;      Params:         0       6       0       0       0       0       0       0       0
 11307 ;;      Locals:         0      13       0       0       0       0       0       0       0
 11308 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11309 ;;      Totals:         0      23       0       0       0       0       0       0       0
 11310 ;;Total ram usage:       23 bytes
 11311 ;; Hardware stack levels used:    1
 11312 ;; Hardware stack levels required when called:   10
 11313 ;; This function calls:
 11314 ;;		_get_fat
 11315 ;;		_put_fat
 11316 ;; This function is called by:
 11317 ;;		_dir_next
 11318 ;;		_f_write
 11319 ;;		_f_lseek
 11320 ;; This function uses a non-reentrant model
 11321 ;;
 11322                           
 11323                           	psect	text38
 11324  002C9A                     __ptext38:
 11325                           	opt stack 0
 11326  002C9A                     _create_chain:
 11327                           	opt stack 14
 11328                           
 11329                           ;ff.c: 995: DWORD cs, ncl, scl;
 11330                           ;ff.c: 996: FRESULT res;
 11331                           ;ff.c: 999: if (clst == 0) {
 11332                           
 11333                           ;incstack = 0
 11334  002C9A  0100               	movlb	0	; () banked
 11335  002C9C  51B4               	movf	create_chain@clst& (0+255),w,b
 11336  002C9E  11B5               	iorwf	(create_chain@clst+1)& (0+255),w,b
 11337  002CA0  11B6               	iorwf	(create_chain@clst+2)& (0+255),w,b
 11338  002CA2  11B7               	iorwf	(create_chain@clst+3)& (0+255),w,b
 11339  002CA4  A4D8               	btfss	status,2,c
 11340  002CA6  D02D               	goto	l977
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;ff.c: 1000: scl = fs->last_clust;
 11344  002CA8  EE20 F00A          	lfsr	2,10
 11345  002CAC  51B2               	movf	create_chain@fs& (0+255),w,b
 11346  002CAE  26D9               	addwf	fsr2l,f,c
 11347  002CB0  51B3               	movf	(create_chain@fs+1)& (0+255),w,b
 11348  002CB2  22DA               	addwfc	fsr2h,f,c
 11349  002CB4  CFDE F0BD          	movff	postinc2,create_chain@scl
 11350  002CB8  CFDE F0BE          	movff	postinc2,create_chain@scl+1
 11351  002CBC  CFDE F0BF          	movff	postinc2,create_chain@scl+2
 11352  002CC0  CFDE F0C0          	movff	postinc2,create_chain@scl+3
 11353                           
 11354                           ; BSR set to: 0
 11355                           ;ff.c: 1001: if (!scl || scl >= fs->n_fatent) scl = 1;
 11356  002CC4  51BD               	movf	create_chain@scl& (0+255),w,b
 11357  002CC6  11BE               	iorwf	(create_chain@scl+1)& (0+255),w,b
 11358  002CC8  11BF               	iorwf	(create_chain@scl+2)& (0+255),w,b
 11359  002CCA  11C0               	iorwf	(create_chain@scl+3)& (0+255),w,b
 11360  002CCC  B4D8               	btfsc	status,2,c
 11361  002CCE  D010               	goto	u12870
 11362                           
 11363                           ; BSR set to: 0
 11364  002CD0  EE20 F012          	lfsr	2,18
 11365  002CD4  51B2               	movf	create_chain@fs& (0+255),w,b
 11366  002CD6  26D9               	addwf	fsr2l,f,c
 11367  002CD8  51B3               	movf	(create_chain@fs+1)& (0+255),w,b
 11368  002CDA  22DA               	addwfc	fsr2h,f,c
 11369  002CDC  50DE               	movf	postinc2,w,c
 11370  002CDE  5DBD               	subwf	create_chain@scl& (0+255),w,b
 11371  002CE0  50DE               	movf	postinc2,w,c
 11372  002CE2  59BE               	subwfb	(create_chain@scl+1)& (0+255),w,b
 11373  002CE4  50DE               	movf	postinc2,w,c
 11374  002CE6  59BF               	subwfb	(create_chain@scl+2)& (0+255),w,b
 11375  002CE8  50DE               	movf	postinc2,w,c
 11376  002CEA  59C0               	subwfb	(create_chain@scl+3)& (0+255),w,b
 11377  002CEC  A0D8               	btfss	status,0,c
 11378  002CEE  D064               	goto	l981
 11379  002CF0                     u12870:
 11380                           
 11381                           ; BSR set to: 0
 11382                           
 11383                           ; BSR set to: 0
 11384  002CF0  0E01               	movlw	1
 11385  002CF2  6FBD               	movwf	create_chain@scl& (0+255),b
 11386  002CF4  0E00               	movlw	0
 11387  002CF6  6FBE               	movwf	(create_chain@scl+1)& (0+255),b
 11388  002CF8  0E00               	movlw	0
 11389  002CFA  6FBF               	movwf	(create_chain@scl+2)& (0+255),b
 11390  002CFC  0E00               	movlw	0
 11391  002CFE  6FC0               	movwf	(create_chain@scl+3)& (0+255),b
 11392                           
 11393                           ; BSR set to: 0
 11394                           ;ff.c: 1002: }
 11395  002D00  D05B               	goto	l981
 11396  002D02                     l977:
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;ff.c: 1003: else {
 11400                           ;ff.c: 1004: cs = get_fat(fs, clst);
 11401                           
 11402                           ; BSR set to: 0
 11403  002D02  C0B2  F097         	movff	create_chain@fs,get_fat@fs
 11404  002D06  C0B3  F098         	movff	create_chain@fs+1,get_fat@fs+1
 11405  002D0A  C0B4  F099         	movff	create_chain@clst,get_fat@clst
 11406  002D0E  C0B5  F09A         	movff	create_chain@clst+1,get_fat@clst+1
 11407  002D12  C0B6  F09B         	movff	create_chain@clst+2,get_fat@clst+2
 11408  002D16  C0B7  F09C         	movff	create_chain@clst+3,get_fat@clst+3
 11409  002D1A  ECEA  F012         	call	_get_fat	;wreg free
 11410  002D1E  C097  F0C5         	movff	?_get_fat,create_chain@cs
 11411  002D22  C098  F0C6         	movff	?_get_fat+1,create_chain@cs+1
 11412  002D26  C099  F0C7         	movff	?_get_fat+2,create_chain@cs+2
 11413  002D2A  C09A  F0C8         	movff	?_get_fat+3,create_chain@cs+3
 11414                           
 11415                           ;ff.c: 1005: if (cs < 2) return 1;
 11416  002D2E  0100               	movlb	0	; () banked
 11417  002D30  51C8               	movf	(create_chain@cs+3)& (0+255),w,b
 11418  002D32  11C7               	iorwf	(create_chain@cs+2)& (0+255),w,b
 11419  002D34  11C6               	iorwf	(create_chain@cs+1)& (0+255),w,b
 11420  002D36  E10D               	bnz	l10423
 11421  002D38  0E02               	movlw	2
 11422  002D3A  5DC5               	subwf	create_chain@cs& (0+255),w,b
 11423  002D3C  B0D8               	btfsc	status,0,c
 11424  002D3E  D009               	goto	l982
 11425                           
 11426                           ; BSR set to: 0
 11427  002D40  0E01               	movlw	1
 11428  002D42  6FB2               	movwf	?_create_chain& (0+255),b
 11429  002D44  0E00               	movlw	0
 11430  002D46  6FB3               	movwf	(?_create_chain+1)& (0+255),b
 11431  002D48  0E00               	movlw	0
 11432  002D4A  6FB4               	movwf	(?_create_chain+2)& (0+255),b
 11433  002D4C  0E00               	movlw	0
 11434  002D4E  6FB5               	movwf	(?_create_chain+3)& (0+255),b
 11435                           
 11436                           ; BSR set to: 0
 11437  002D50  0012               	return	
 11438  002D52                     l982:
 11439  002D52                     l10423:
 11440                           
 11441                           ; BSR set to: 0
 11442                           ;ff.c: 1006: if (cs == 0xFFFFFFFF) return cs;
 11443  002D52  29C5               	incf	create_chain@cs& (0+255),w,b
 11444  002D54  E110               	bnz	l10427
 11445  002D56  29C6               	incf	(create_chain@cs+1)& (0+255),w,b
 11446  002D58  E10E               	bnz	l10427
 11447  002D5A  29C7               	incf	(create_chain@cs+2)& (0+255),w,b
 11448  002D5C  E10C               	bnz	l10427
 11449  002D5E  29C8               	incf	(create_chain@cs+3)& (0+255),w,b
 11450  002D60  A4D8               	btfss	status,2,c
 11451  002D62  D009               	goto	l984
 11452                           
 11453                           ; BSR set to: 0
 11454  002D64  C0C5  F0B2         	movff	create_chain@cs,?_create_chain
 11455  002D68  C0C6  F0B3         	movff	create_chain@cs+1,?_create_chain+1
 11456  002D6C  C0C7  F0B4         	movff	create_chain@cs+2,?_create_chain+2
 11457  002D70  C0C8  F0B5         	movff	create_chain@cs+3,?_create_chain+3
 11458  002D74  0012               	return	
 11459  002D76                     l984:
 11460  002D76                     l10427:
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;ff.c: 1007: if (cs < fs->n_fatent) return cs;
 11464  002D76  EE20 F012          	lfsr	2,18
 11465  002D7A  51B2               	movf	create_chain@fs& (0+255),w,b
 11466  002D7C  26D9               	addwf	fsr2l,f,c
 11467  002D7E  51B3               	movf	(create_chain@fs+1)& (0+255),w,b
 11468  002D80  22DA               	addwfc	fsr2h,f,c
 11469  002D82  50DE               	movf	postinc2,w,c
 11470  002D84  5DC5               	subwf	create_chain@cs& (0+255),w,b
 11471  002D86  50DE               	movf	postinc2,w,c
 11472  002D88  59C6               	subwfb	(create_chain@cs+1)& (0+255),w,b
 11473  002D8A  50DE               	movf	postinc2,w,c
 11474  002D8C  59C7               	subwfb	(create_chain@cs+2)& (0+255),w,b
 11475  002D8E  50DE               	movf	postinc2,w,c
 11476  002D90  59C8               	subwfb	(create_chain@cs+3)& (0+255),w,b
 11477  002D92  B0D8               	btfsc	status,0,c
 11478  002D94  D009               	goto	l985
 11479                           
 11480                           ; BSR set to: 0
 11481  002D96  C0C5  F0B2         	movff	create_chain@cs,?_create_chain
 11482  002D9A  C0C6  F0B3         	movff	create_chain@cs+1,?_create_chain+1
 11483  002D9E  C0C7  F0B4         	movff	create_chain@cs+2,?_create_chain+2
 11484  002DA2  C0C8  F0B5         	movff	create_chain@cs+3,?_create_chain+3
 11485  002DA6  0012               	return	
 11486  002DA8                     l985:
 11487                           
 11488                           ; BSR set to: 0
 11489                           ;ff.c: 1008: scl = clst;
 11490  002DA8  C0B4  F0BD         	movff	create_chain@clst,create_chain@scl
 11491  002DAC  C0B5  F0BE         	movff	create_chain@clst+1,create_chain@scl+1
 11492  002DB0  C0B6  F0BF         	movff	create_chain@clst+2,create_chain@scl+2
 11493  002DB4  C0B7  F0C0         	movff	create_chain@clst+3,create_chain@scl+3
 11494  002DB8                     l981:
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;ff.c: 1009: }
 11498                           ;ff.c: 1011: ncl = scl;
 11499  002DB8  C0BD  F0C1         	movff	create_chain@scl,create_chain@ncl
 11500  002DBC  C0BE  F0C2         	movff	create_chain@scl+1,create_chain@ncl+1
 11501  002DC0  C0BF  F0C3         	movff	create_chain@scl+2,create_chain@ncl+2
 11502  002DC4  C0C0  F0C4         	movff	create_chain@scl+3,create_chain@ncl+3
 11503  002DC8                     l10431:
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;ff.c: 1013: ncl++;
 11507  002DC8  0E01               	movlw	1
 11508  002DCA  27C1               	addwf	create_chain@ncl& (0+255),f,b
 11509  002DCC  0E00               	movlw	0
 11510  002DCE  23C2               	addwfc	(create_chain@ncl+1)& (0+255),f,b
 11511  002DD0  23C3               	addwfc	(create_chain@ncl+2)& (0+255),f,b
 11512  002DD2  23C4               	addwfc	(create_chain@ncl+3)& (0+255),f,b
 11513                           
 11514                           ; BSR set to: 0
 11515                           ;ff.c: 1014: if (ncl >= fs->n_fatent) {
 11516  002DD4  EE20 F012          	lfsr	2,18
 11517  002DD8  51B2               	movf	create_chain@fs& (0+255),w,b
 11518  002DDA  26D9               	addwf	fsr2l,f,c
 11519  002DDC  51B3               	movf	(create_chain@fs+1)& (0+255),w,b
 11520  002DDE  22DA               	addwfc	fsr2h,f,c
 11521  002DE0  50DE               	movf	postinc2,w,c
 11522  002DE2  5DC1               	subwf	create_chain@ncl& (0+255),w,b
 11523  002DE4  50DE               	movf	postinc2,w,c
 11524  002DE6  59C2               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 11525  002DE8  50DE               	movf	postinc2,w,c
 11526  002DEA  59C3               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 11527  002DEC  50DE               	movf	postinc2,w,c
 11528  002DEE  59C4               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 11529  002DF0  A0D8               	btfss	status,0,c
 11530  002DF2  D01B               	goto	l988
 11531                           
 11532                           ; BSR set to: 0
 11533                           ;ff.c: 1015: ncl = 2;
 11534  002DF4  0E02               	movlw	2
 11535  002DF6  6FC1               	movwf	create_chain@ncl& (0+255),b
 11536  002DF8  0E00               	movlw	0
 11537  002DFA  6FC2               	movwf	(create_chain@ncl+1)& (0+255),b
 11538  002DFC  0E00               	movlw	0
 11539  002DFE  6FC3               	movwf	(create_chain@ncl+2)& (0+255),b
 11540  002E00  0E00               	movlw	0
 11541  002E02  6FC4               	movwf	(create_chain@ncl+3)& (0+255),b
 11542                           
 11543                           ; BSR set to: 0
 11544                           ;ff.c: 1016: if (ncl > scl) return 0;
 11545  002E04  51C1               	movf	create_chain@ncl& (0+255),w,b
 11546  002E06  5DBD               	subwf	create_chain@scl& (0+255),w,b
 11547  002E08  51C2               	movf	(create_chain@ncl+1)& (0+255),w,b
 11548  002E0A  59BE               	subwfb	(create_chain@scl+1)& (0+255),w,b
 11549  002E0C  51C3               	movf	(create_chain@ncl+2)& (0+255),w,b
 11550  002E0E  59BF               	subwfb	(create_chain@scl+2)& (0+255),w,b
 11551  002E10  51C4               	movf	(create_chain@ncl+3)& (0+255),w,b
 11552  002E12  59C0               	subwfb	(create_chain@scl+3)& (0+255),w,b
 11553  002E14  B0D8               	btfsc	status,0,c
 11554  002E16  D009               	goto	l988
 11555                           
 11556                           ; BSR set to: 0
 11557  002E18  0E00               	movlw	0
 11558  002E1A  6FB2               	movwf	?_create_chain& (0+255),b
 11559  002E1C  0E00               	movlw	0
 11560  002E1E  6FB3               	movwf	(?_create_chain+1)& (0+255),b
 11561  002E20  0E00               	movlw	0
 11562  002E22  6FB4               	movwf	(?_create_chain+2)& (0+255),b
 11563  002E24  0E00               	movlw	0
 11564  002E26  6FB5               	movwf	(?_create_chain+3)& (0+255),b
 11565                           
 11566                           ; BSR set to: 0
 11567  002E28  0012               	return	
 11568  002E2A                     l988:
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;ff.c: 1017: }
 11572                           ;ff.c: 1018: cs = get_fat(fs, ncl);
 11573                           
 11574                           ; BSR set to: 0
 11575                           
 11576                           ; BSR set to: 0
 11577  002E2A  C0B2  F097         	movff	create_chain@fs,get_fat@fs
 11578  002E2E  C0B3  F098         	movff	create_chain@fs+1,get_fat@fs+1
 11579  002E32  C0C1  F099         	movff	create_chain@ncl,get_fat@clst
 11580  002E36  C0C2  F09A         	movff	create_chain@ncl+1,get_fat@clst+1
 11581  002E3A  C0C3  F09B         	movff	create_chain@ncl+2,get_fat@clst+2
 11582  002E3E  C0C4  F09C         	movff	create_chain@ncl+3,get_fat@clst+3
 11583  002E42  ECEA  F012         	call	_get_fat	;wreg free
 11584  002E46  C097  F0C5         	movff	?_get_fat,create_chain@cs
 11585  002E4A  C098  F0C6         	movff	?_get_fat+1,create_chain@cs+1
 11586  002E4E  C099  F0C7         	movff	?_get_fat+2,create_chain@cs+2
 11587  002E52  C09A  F0C8         	movff	?_get_fat+3,create_chain@cs+3
 11588                           
 11589                           ;ff.c: 1019: if (cs == 0) break;
 11590  002E56  0100               	movlb	0	; () banked
 11591  002E58  51C5               	movf	create_chain@cs& (0+255),w,b
 11592  002E5A  11C6               	iorwf	(create_chain@cs+1)& (0+255),w,b
 11593  002E5C  11C7               	iorwf	(create_chain@cs+2)& (0+255),w,b
 11594  002E5E  11C8               	iorwf	(create_chain@cs+3)& (0+255),w,b
 11595  002E60  B4D8               	btfsc	status,2,c
 11596  002E62  D02E               	goto	l990
 11597                           
 11598                           ; BSR set to: 0
 11599                           ;ff.c: 1020: if (cs == 0xFFFFFFFF || cs == 1)
 11600                           
 11601                           ; BSR set to: 0
 11602                           
 11603                           ; BSR set to: 0
 11604  002E64  29C5               	incf	create_chain@cs& (0+255),w,b
 11605  002E66  E107               	bnz	u12940
 11606  002E68  29C6               	incf	(create_chain@cs+1)& (0+255),w,b
 11607  002E6A  E105               	bnz	u12940
 11608  002E6C  29C7               	incf	(create_chain@cs+2)& (0+255),w,b
 11609  002E6E  E103               	bnz	u12940
 11610  002E70  29C8               	incf	(create_chain@cs+3)& (0+255),w,b
 11611  002E72  B4D8               	btfsc	status,2,c
 11612  002E74  D006               	goto	u12950
 11613  002E76                     u12940:
 11614                           
 11615                           ; BSR set to: 0
 11616  002E76  05C5               	decf	create_chain@cs& (0+255),w,b
 11617  002E78  11C6               	iorwf	(create_chain@cs+1)& (0+255),w,b
 11618  002E7A  11C7               	iorwf	(create_chain@cs+2)& (0+255),w,b
 11619  002E7C  11C8               	iorwf	(create_chain@cs+3)& (0+255),w,b
 11620  002E7E  A4D8               	btfss	status,2,c
 11621  002E80  D009               	goto	l991
 11622  002E82                     u12950:
 11623                           
 11624                           ; BSR set to: 0
 11625                           ;ff.c: 1021: return cs;
 11626  002E82  C0C5  F0B2         	movff	create_chain@cs,?_create_chain
 11627  002E86  C0C6  F0B3         	movff	create_chain@cs+1,?_create_chain+1
 11628  002E8A  C0C7  F0B4         	movff	create_chain@cs+2,?_create_chain+2
 11629  002E8E  C0C8  F0B5         	movff	create_chain@cs+3,?_create_chain+3
 11630  002E92  0012               	return	
 11631  002E94                     l991:
 11632                           
 11633                           ; BSR set to: 0
 11634                           ;ff.c: 1022: if (ncl == scl) return 0;
 11635                           
 11636                           ; BSR set to: 0
 11637  002E94  51BD               	movf	create_chain@scl& (0+255),w,b
 11638  002E96  19C1               	xorwf	create_chain@ncl& (0+255),w,b
 11639  002E98  E197               	bnz	l10431
 11640  002E9A  51BE               	movf	(create_chain@scl+1)& (0+255),w,b
 11641  002E9C  19C2               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 11642  002E9E  E194               	bnz	l10431
 11643  002EA0  51BF               	movf	(create_chain@scl+2)& (0+255),w,b
 11644  002EA2  19C3               	xorwf	(create_chain@ncl+2)& (0+255),w,b
 11645  002EA4  E191               	bnz	l10431
 11646  002EA6  51C0               	movf	(create_chain@scl+3)& (0+255),w,b
 11647  002EA8  19C4               	xorwf	(create_chain@ncl+3)& (0+255),w,b
 11648  002EAA  A4D8               	btfss	status,2,c
 11649  002EAC  D78D               	goto	l986
 11650                           
 11651                           ; BSR set to: 0
 11652  002EAE  0E00               	movlw	0
 11653  002EB0  6FB2               	movwf	?_create_chain& (0+255),b
 11654  002EB2  0E00               	movlw	0
 11655  002EB4  6FB3               	movwf	(?_create_chain+1)& (0+255),b
 11656  002EB6  0E00               	movlw	0
 11657  002EB8  6FB4               	movwf	(?_create_chain+2)& (0+255),b
 11658  002EBA  0E00               	movlw	0
 11659  002EBC  6FB5               	movwf	(?_create_chain+3)& (0+255),b
 11660                           
 11661                           ; BSR set to: 0
 11662  002EBE  0012               	return	
 11663  002EC0                     l990:
 11664                           
 11665                           ; BSR set to: 0
 11666                           ;ff.c: 1025: res = put_fat(fs, ncl, 0x0FFFFFFF);
 11667                           
 11668                           ; BSR set to: 0
 11669  002EC0  C0B2  F097         	movff	create_chain@fs,put_fat@fs
 11670  002EC4  C0B3  F098         	movff	create_chain@fs+1,put_fat@fs+1
 11671  002EC8  C0C1  F099         	movff	create_chain@ncl,put_fat@clst
 11672  002ECC  C0C2  F09A         	movff	create_chain@ncl+1,put_fat@clst+1
 11673  002ED0  C0C3  F09B         	movff	create_chain@ncl+2,put_fat@clst+2
 11674  002ED4  C0C4  F09C         	movff	create_chain@ncl+3,put_fat@clst+3
 11675  002ED8  0EFF               	movlw	255
 11676  002EDA  6F9D               	movwf	put_fat@val& (0+255),b
 11677  002EDC  0EFF               	movlw	255
 11678  002EDE  6F9E               	movwf	(put_fat@val+1)& (0+255),b
 11679  002EE0  0EFF               	movlw	255
 11680  002EE2  6F9F               	movwf	(put_fat@val+2)& (0+255),b
 11681  002EE4  0E0F               	movlw	15
 11682  002EE6  6FA0               	movwf	(put_fat@val+3)& (0+255),b
 11683  002EE8  ECF0  F00E         	call	_put_fat	;wreg free
 11684  002EEC  0100               	movlb	0	; () banked
 11685  002EEE  6FBC               	movwf	create_chain@res& (0+255),b
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;ff.c: 1026: if (res == FR_OK && clst != 0) {
 11689  002EF0  51BC               	movf	create_chain@res& (0+255),w,b
 11690  002EF2  A4D8               	btfss	status,2,c
 11691  002EF4  D01E               	goto	l995
 11692                           
 11693                           ; BSR set to: 0
 11694  002EF6  51B4               	movf	create_chain@clst& (0+255),w,b
 11695  002EF8  11B5               	iorwf	(create_chain@clst+1)& (0+255),w,b
 11696  002EFA  11B6               	iorwf	(create_chain@clst+2)& (0+255),w,b
 11697  002EFC  11B7               	iorwf	(create_chain@clst+3)& (0+255),w,b
 11698  002EFE  B4D8               	btfsc	status,2,c
 11699  002F00  D018               	goto	l995
 11700                           
 11701                           ; BSR set to: 0
 11702                           ;ff.c: 1027: res = put_fat(fs, clst, ncl);
 11703  002F02  C0B2  F097         	movff	create_chain@fs,put_fat@fs
 11704  002F06  C0B3  F098         	movff	create_chain@fs+1,put_fat@fs+1
 11705  002F0A  C0B4  F099         	movff	create_chain@clst,put_fat@clst
 11706  002F0E  C0B5  F09A         	movff	create_chain@clst+1,put_fat@clst+1
 11707  002F12  C0B6  F09B         	movff	create_chain@clst+2,put_fat@clst+2
 11708  002F16  C0B7  F09C         	movff	create_chain@clst+3,put_fat@clst+3
 11709  002F1A  C0C1  F09D         	movff	create_chain@ncl,put_fat@val
 11710  002F1E  C0C2  F09E         	movff	create_chain@ncl+1,put_fat@val+1
 11711  002F22  C0C3  F09F         	movff	create_chain@ncl+2,put_fat@val+2
 11712  002F26  C0C4  F0A0         	movff	create_chain@ncl+3,put_fat@val+3
 11713  002F2A  ECF0  F00E         	call	_put_fat	;wreg free
 11714  002F2E  0100               	movlb	0	; () banked
 11715  002F30  6FBC               	movwf	create_chain@res& (0+255),b
 11716  002F32                     l995:
 11717                           
 11718                           ; BSR set to: 0
 11719                           ;ff.c: 1028: }
 11720                           ;ff.c: 1029: if (res == FR_OK) {
 11721                           
 11722                           ; BSR set to: 0
 11723  002F32  51BC               	movf	create_chain@res& (0+255),w,b
 11724  002F34  A4D8               	btfss	status,2,c
 11725  002F36  D031               	goto	l996
 11726                           
 11727                           ; BSR set to: 0
 11728                           ;ff.c: 1030: fs->last_clust = ncl;
 11729  002F38  EE20 F00A          	lfsr	2,10
 11730  002F3C  51B2               	movf	create_chain@fs& (0+255),w,b
 11731  002F3E  26D9               	addwf	fsr2l,f,c
 11732  002F40  51B3               	movf	(create_chain@fs+1)& (0+255),w,b
 11733  002F42  22DA               	addwfc	fsr2h,f,c
 11734  002F44  C0C1  FFDE         	movff	create_chain@ncl,postinc2
 11735  002F48  C0C2  FFDE         	movff	create_chain@ncl+1,postinc2
 11736  002F4C  C0C3  FFDE         	movff	create_chain@ncl+2,postinc2
 11737  002F50  C0C4  FFDE         	movff	create_chain@ncl+3,postinc2
 11738                           
 11739                           ;ff.c: 1031: if (fs->free_clust != 0xFFFFFFFF) {
 11740  002F54  EE20 F00E          	lfsr	2,14
 11741  002F58  51B2               	movf	create_chain@fs& (0+255),w,b
 11742  002F5A  26D9               	addwf	fsr2l,f,c
 11743  002F5C  51B3               	movf	(create_chain@fs+1)& (0+255),w,b
 11744  002F5E  22DA               	addwfc	fsr2h,f,c
 11745  002F60  28DE               	incf	postinc2,w,c
 11746  002F62  E107               	bnz	u13000
 11747  002F64  28DE               	incf	postinc2,w,c
 11748  002F66  E105               	bnz	u13000
 11749  002F68  28DE               	incf	postinc2,w,c
 11750  002F6A  E103               	bnz	u13000
 11751  002F6C  28DE               	incf	postinc2,w,c
 11752  002F6E  B4D8               	btfsc	status,2,c
 11753  002F70  D024               	goto	l1002
 11754  002F72                     u13000:
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;ff.c: 1032: fs->free_clust--;
 11758  002F72  EE20 F00E          	lfsr	2,14
 11759  002F76  51B2               	movf	create_chain@fs& (0+255),w,b
 11760  002F78  26D9               	addwf	fsr2l,f,c
 11761  002F7A  51B3               	movf	(create_chain@fs+1)& (0+255),w,b
 11762  002F7C  22DA               	addwfc	fsr2h,f,c
 11763  002F7E  06DE               	decf	postinc2,f,c
 11764  002F80  0E00               	movlw	0
 11765  002F82  5ADE               	subwfb	postinc2,f,c
 11766  002F84  5ADE               	subwfb	postinc2,f,c
 11767  002F86  5ADE               	subwfb	postinc2,f,c
 11768                           
 11769                           ;ff.c: 1033: fs->fsi_flag |= 1;
 11770  002F88  EE20 F005          	lfsr	2,5
 11771  002F8C  51B2               	movf	create_chain@fs& (0+255),w,b
 11772  002F8E  26D9               	addwf	fsr2l,f,c
 11773  002F90  51B3               	movf	(create_chain@fs+1)& (0+255),w,b
 11774  002F92  22DA               	addwfc	fsr2h,f,c
 11775  002F94  0E00               	movlw	0
 11776  002F96  80DB               	bsf	plusw2,0,c
 11777                           
 11778                           ; BSR set to: 0
 11779                           ;ff.c: 1034: }
 11780                           ;ff.c: 1035: } else {
 11781  002F98  D010               	goto	l1002
 11782  002F9A                     l996:
 11783                           
 11784                           ; BSR set to: 0
 11785                           ;ff.c: 1036: ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 11786                           
 11787                           ; BSR set to: 0
 11788  002F9A  05BC               	decf	create_chain@res& (0+255),w,b
 11789  002F9C  B4D8               	btfsc	status,2,c
 11790  002F9E  D009               	goto	l1000
 11791                           
 11792                           ; BSR set to: 0
 11793  002FA0  0E01               	movlw	1
 11794  002FA2  6FC1               	movwf	create_chain@ncl& (0+255),b
 11795  002FA4  0E00               	movlw	0
 11796  002FA6  6FC2               	movwf	(create_chain@ncl+1)& (0+255),b
 11797  002FA8  0E00               	movlw	0
 11798  002FAA  6FC3               	movwf	(create_chain@ncl+2)& (0+255),b
 11799  002FAC  0E00               	movlw	0
 11800  002FAE  6FC4               	movwf	(create_chain@ncl+3)& (0+255),b
 11801  002FB0  D004               	goto	l1002
 11802  002FB2                     l1000:
 11803                           
 11804                           ; BSR set to: 0
 11805  002FB2  69C1               	setf	create_chain@ncl& (0+255),b
 11806  002FB4  69C2               	setf	(create_chain@ncl+1)& (0+255),b
 11807  002FB6  69C3               	setf	(create_chain@ncl+2)& (0+255),b
 11808  002FB8  69C4               	setf	(create_chain@ncl+3)& (0+255),b
 11809  002FBA                     l1002:
 11810                           
 11811                           ; BSR set to: 0
 11812                           ;ff.c: 1037: }
 11813                           ;ff.c: 1039: return ncl;
 11814                           
 11815                           ; BSR set to: 0
 11816  002FBA  C0C1  F0B2         	movff	create_chain@ncl,?_create_chain
 11817  002FBE  C0C2  F0B3         	movff	create_chain@ncl+1,?_create_chain+1
 11818  002FC2  C0C3  F0B4         	movff	create_chain@ncl+2,?_create_chain+2
 11819  002FC6  C0C4  F0B5         	movff	create_chain@ncl+3,?_create_chain+3
 11820                           
 11821                           ; BSR set to: 0
 11822  002FCA  0012               	return		;funcret
 11823  002FCC                     __end_of_create_chain:
 11824                           	opt stack 0
 11825                           tblptru	equ	0xFF8
 11826                           tblptrh	equ	0xFF7
 11827                           tblptrl	equ	0xFF6
 11828                           tablat	equ	0xFF5
 11829                           prodh	equ	0xFF4
 11830                           prodl	equ	0xFF3
 11831                           intcon	equ	0xFF2
 11832                           intcon2	equ	0xFF1
 11833                           intcon3	equ	0xFF0
 11834                           indf0	equ	0xFEF
 11835                           postinc0	equ	0xFEE
 11836                           fsr0h	equ	0xFEA
 11837                           fsr0l	equ	0xFE9
 11838                           wreg	equ	0xFE8
 11839                           indf1	equ	0xFE7
 11840                           postinc1	equ	0xFE6
 11841                           postdec1	equ	0xFE5
 11842                           fsr1h	equ	0xFE2
 11843                           fsr1l	equ	0xFE1
 11844                           indf2	equ	0xFDF
 11845                           postinc2	equ	0xFDE
 11846                           postdec2	equ	0xFDD
 11847                           plusw2	equ	0xFDB
 11848                           fsr2h	equ	0xFDA
 11849                           fsr2l	equ	0xFD9
 11850                           status	equ	0xFD8
 11851                           
 11852 ;; *************** function _put_fat *****************
 11853 ;; Defined at:
 11854 ;;		line 873 in file "bibliotecas/ff.c"
 11855 ;; Parameters:    Size  Location     Type
 11856 ;;  fs              2   55[BANK0 ] PTR struct .
 11857 ;;		 -> NULL(0), fs(558), 
 11858 ;;  clst            4   57[BANK0 ] unsigned long 
 11859 ;;  val             4   61[BANK0 ] unsigned long 
 11860 ;; Auto vars:     Size  Location     Type
 11861 ;;  p               2   80[BANK0 ] PTR unsigned char 
 11862 ;;		 -> fs.win(512), NULL(0), fs(558), 
 11863 ;;  bc              2   77[BANK0 ] unsigned int 
 11864 ;;  res             1   79[BANK0 ] enum E75
 11865 ;; Return value:  Size  Location     Type
 11866 ;;                  1    wreg      enum E75
 11867 ;; Registers used:
 11868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11869 ;; Tracked objects:
 11870 ;;		On entry : 0/0
 11871 ;;		On exit  : 0/0
 11872 ;;		Unchanged: 0/0
 11873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11874 ;;      Params:         0      10       0       0       0       0       0       0       0
 11875 ;;      Locals:         0       9       0       0       0       0       0       0       0
 11876 ;;      Temps:          0       8       0       0       0       0       0       0       0
 11877 ;;      Totals:         0      27       0       0       0       0       0       0       0
 11878 ;;Total ram usage:       27 bytes
 11879 ;; Hardware stack levels used:    1
 11880 ;; Hardware stack levels required when called:    9
 11881 ;; This function calls:
 11882 ;;		_move_window
 11883 ;; This function is called by:
 11884 ;;		_remove_chain
 11885 ;;		_create_chain
 11886 ;; This function uses a non-reentrant model
 11887 ;;
 11888                           
 11889                           	psect	text39
 11890  001DE0                     __ptext39:
 11891                           	opt stack 0
 11892  001DE0                     _put_fat:
 11893                           	opt stack 17
 11894                           
 11895                           ;ff.c: 879: UINT bc;
 11896                           ;ff.c: 880: BYTE *p;
 11897                           ;ff.c: 881: FRESULT res;
 11898                           ;ff.c: 884: if (clst < 2 || clst >= fs->n_fatent) {
 11899                           
 11900                           ; BSR set to: 0
 11901                           ;incstack = 0
 11902  001DE0  0100               	movlb	0	; () banked
 11903  001DE2  519C               	movf	(put_fat@clst+3)& (0+255),w,b
 11904  001DE4  119B               	iorwf	(put_fat@clst+2)& (0+255),w,b
 11905  001DE6  119A               	iorwf	(put_fat@clst+1)& (0+255),w,b
 11906  001DE8  E104               	bnz	u12640
 11907  001DEA  0E02               	movlw	2
 11908  001DEC  5D99               	subwf	put_fat@clst& (0+255),w,b
 11909  001DEE  A0D8               	btfss	status,0,c
 11910  001DF0  D1E7               	goto	l958
 11911  001DF2                     u12640:
 11912                           
 11913                           ; BSR set to: 0
 11914  001DF2  EE20 F012          	lfsr	2,18
 11915  001DF6  5197               	movf	put_fat@fs& (0+255),w,b
 11916  001DF8  26D9               	addwf	fsr2l,f,c
 11917  001DFA  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 11918  001DFC  22DA               	addwfc	fsr2h,f,c
 11919  001DFE  50DE               	movf	postinc2,w,c
 11920  001E00  5D99               	subwf	put_fat@clst& (0+255),w,b
 11921  001E02  50DE               	movf	postinc2,w,c
 11922  001E04  599A               	subwfb	(put_fat@clst+1)& (0+255),w,b
 11923  001E06  50DE               	movf	postinc2,w,c
 11924  001E08  599B               	subwfb	(put_fat@clst+2)& (0+255),w,b
 11925  001E0A  50DE               	movf	postinc2,w,c
 11926  001E0C  599C               	subwfb	(put_fat@clst+3)& (0+255),w,b
 11927  001E0E  A0D8               	btfss	status,0,c
 11928  001E10  D1DA               	goto	l941
 11929                           
 11930                           ; BSR set to: 0
 11931  001E12  D1D6               	goto	l958
 11932  001E14                     l942:
 11933                           
 11934                           ; BSR set to: 0
 11935                           ;ff.c: 890: bc = (UINT)clst; bc += bc / 2;
 11936  001E14  C099  F0AD         	movff	put_fat@clst,put_fat@bc
 11937  001E18  C09A  F0AE         	movff	put_fat@clst+1,put_fat@bc+1
 11938                           
 11939                           ; BSR set to: 0
 11940  001E1C  90D8               	bcf	status,0,c
 11941  001E1E  31AE               	rrcf	(put_fat@bc+1)& (0+255),w,b
 11942  001E20  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 11943  001E22  31AD               	rrcf	put_fat@bc& (0+255),w,b
 11944  001E24  6FA1               	movwf	??_put_fat& (0+255),b
 11945  001E26  51A1               	movf	??_put_fat& (0+255),w,b
 11946  001E28  27AD               	addwf	put_fat@bc& (0+255),f,b
 11947  001E2A  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 11948  001E2C  23AE               	addwfc	(put_fat@bc+1)& (0+255),f,b
 11949                           
 11950                           ; BSR set to: 0
 11951                           ;ff.c: 891: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11952  001E2E  C097  F08C         	movff	put_fat@fs,move_window@fs
 11953  001E32  C098  F08D         	movff	put_fat@fs+1,move_window@fs+1
 11954  001E36  EE20 F01E          	lfsr	2,30
 11955  001E3A  5197               	movf	put_fat@fs& (0+255),w,b
 11956  001E3C  26D9               	addwf	fsr2l,f,c
 11957  001E3E  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 11958  001E40  22DA               	addwfc	fsr2h,f,c
 11959  001E42  CFDE F0A1          	movff	postinc2,??_put_fat
 11960  001E46  CFDE F0A2          	movff	postinc2,??_put_fat+1
 11961  001E4A  CFDE F0A3          	movff	postinc2,??_put_fat+2
 11962  001E4E  CFDE F0A4          	movff	postinc2,??_put_fat+3
 11963  001E52  C0AD  F0A5         	movff	put_fat@bc,??_put_fat+4
 11964  001E56  C0AE  F0A6         	movff	put_fat@bc+1,??_put_fat+5
 11965  001E5A  0E09               	movlw	9
 11966  001E5C  6FA7               	movwf	(??_put_fat+6)& (0+255),b
 11967  001E5E                     u12665:
 11968  001E5E  90D8               	bcf	status,0,c
 11969  001E60  33A6               	rrcf	(??_put_fat+5)& (0+255),f,b
 11970  001E62  33A5               	rrcf	(??_put_fat+4)& (0+255),f,b
 11971  001E64  2FA7               	decfsz	(??_put_fat+6)& (0+255),f,b
 11972  001E66  D7FB               	goto	u12665
 11973  001E68  51A5               	movf	(??_put_fat+4)& (0+255),w,b
 11974  001E6A  25A1               	addwf	??_put_fat& (0+255),w,b
 11975  001E6C  6F8E               	movwf	move_window@sector& (0+255),b
 11976  001E6E  51A6               	movf	(??_put_fat+5)& (0+255),w,b
 11977  001E70  21A2               	addwfc	(??_put_fat+1)& (0+255),w,b
 11978  001E72  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 11979  001E74  0E00               	movlw	0
 11980  001E76  21A3               	addwfc	(??_put_fat+2)& (0+255),w,b
 11981  001E78  6F90               	movwf	(move_window@sector+2)& (0+255),b
 11982  001E7A  0E00               	movlw	0
 11983  001E7C  21A4               	addwfc	(??_put_fat+3)& (0+255),w,b
 11984  001E7E  6F91               	movwf	(move_window@sector+3)& (0+255),b
 11985  001E80  ECCA  F024         	call	_move_window	;wreg free
 11986  001E84  0100               	movlb	0	; () banked
 11987  001E86  6FAF               	movwf	put_fat@res& (0+255),b
 11988                           
 11989                           ; BSR set to: 0
 11990                           ;ff.c: 892: if (res != FR_OK) break;
 11991  001E88  51AF               	movf	put_fat@res& (0+255),w,b
 11992  001E8A  A4D8               	btfss	status,2,c
 11993  001E8C  D1AB               	goto	l944
 11994                           
 11995                           ; BSR set to: 0
 11996                           ;ff.c: 893: p = &fs->win[bc++ % ((UINT)512)];
 11997                           
 11998                           ; BSR set to: 0
 11999                           
 12000                           ; BSR set to: 0
 12001  001E8E  0EFF               	movlw	255
 12002  001E90  6FA1               	movwf	??_put_fat& (0+255),b
 12003  001E92  0E01               	movlw	1
 12004  001E94  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 12005  001E96  C0AD  F0A3         	movff	put_fat@bc,??_put_fat+2
 12006  001E9A  C0AE  F0A4         	movff	put_fat@bc+1,??_put_fat+3
 12007  001E9E  51A1               	movf	??_put_fat& (0+255),w,b
 12008  001EA0  17A3               	andwf	(??_put_fat+2)& (0+255),f,b
 12009  001EA2  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 12010  001EA4  17A4               	andwf	(??_put_fat+3)& (0+255),f,b
 12011  001EA6  0E2E               	movlw	46
 12012  001EA8  27A3               	addwf	(??_put_fat+2)& (0+255),f,b
 12013  001EAA  0E00               	movlw	0
 12014  001EAC  23A4               	addwfc	(??_put_fat+3)& (0+255),f,b
 12015  001EAE  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 12016  001EB0  2597               	addwf	put_fat@fs& (0+255),w,b
 12017  001EB2  6FB0               	movwf	put_fat@p& (0+255),b
 12018  001EB4  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 12019  001EB6  2198               	addwfc	(put_fat@fs+1)& (0+255),w,b
 12020  001EB8  6FB1               	movwf	(put_fat@p+1)& (0+255),b
 12021                           
 12022                           ; BSR set to: 0
 12023  001EBA  4BAD               	infsnz	put_fat@bc& (0+255),f,b
 12024  001EBC  2BAE               	incf	(put_fat@bc+1)& (0+255),f,b
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;ff.c: 894: *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 12028  001EBE  B199               	btfsc	put_fat@clst& (0+255),0,b
 12029  001EC0  D004               	goto	l946
 12030                           
 12031                           ; BSR set to: 0
 12032  001EC2  C09D  F0A9         	movff	put_fat@val,_put_fat$2044
 12033  001EC6  6BAA               	clrf	(_put_fat$2044+1)& (0+255),b
 12034  001EC8  D01A               	goto	l948
 12035  001ECA                     l946:
 12036                           
 12037                           ; BSR set to: 0
 12038                           
 12039                           ; BSR set to: 0
 12040  001ECA  519D               	movf	put_fat@val& (0+255),w,b
 12041  001ECC  6FA1               	movwf	??_put_fat& (0+255),b
 12042  001ECE  6BA2               	clrf	(??_put_fat+1)& (0+255),b
 12043  001ED0  3BA1               	swapf	??_put_fat& (0+255),f,b
 12044  001ED2  3BA2               	swapf	(??_put_fat+1)& (0+255),f,b
 12045  001ED4  0EF0               	movlw	240
 12046  001ED6  17A2               	andwf	(??_put_fat+1)& (0+255),f,b
 12047  001ED8  51A1               	movf	??_put_fat& (0+255),w,b
 12048  001EDA  0B0F               	andlw	15
 12049  001EDC  13A2               	iorwf	(??_put_fat+1)& (0+255),f,b
 12050  001EDE  0EF0               	movlw	240
 12051  001EE0  17A1               	andwf	??_put_fat& (0+255),f,b
 12052  001EE2  C0B0  FFD9         	movff	put_fat@p,fsr2l
 12053  001EE6  C0B1  FFDA         	movff	put_fat@p+1,fsr2h
 12054  001EEA  50DF               	movf	indf2,w,c
 12055  001EEC  0B0F               	andlw	15
 12056  001EEE  6FA3               	movwf	(??_put_fat+2)& (0+255),b
 12057  001EF0  6BA4               	clrf	(??_put_fat+3)& (0+255),b
 12058  001EF2  51A1               	movf	??_put_fat& (0+255),w,b
 12059  001EF4  11A3               	iorwf	(??_put_fat+2)& (0+255),w,b
 12060  001EF6  6FA9               	movwf	_put_fat$2044& (0+255),b
 12061  001EF8  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 12062  001EFA  11A4               	iorwf	(??_put_fat+3)& (0+255),w,b
 12063  001EFC  6FAA               	movwf	(_put_fat$2044+1)& (0+255),b
 12064  001EFE                     l948:
 12065                           
 12066                           ; BSR set to: 0
 12067                           
 12068                           ; BSR set to: 0
 12069  001EFE  C0B0  FFD9         	movff	put_fat@p,fsr2l
 12070  001F02  C0B1  FFDA         	movff	put_fat@p+1,fsr2h
 12071  001F06  C0A9  FFDF         	movff	_put_fat$2044,indf2
 12072                           
 12073                           ; BSR set to: 0
 12074                           ;ff.c: 895: fs->wflag = 1;
 12075  001F0A  EE20 F004          	lfsr	2,4
 12076  001F0E  5197               	movf	put_fat@fs& (0+255),w,b
 12077  001F10  26D9               	addwf	fsr2l,f,c
 12078  001F12  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 12079  001F14  22DA               	addwfc	fsr2h,f,c
 12080  001F16  0E01               	movlw	1
 12081  001F18  6EDF               	movwf	indf2,c
 12082                           
 12083                           ; BSR set to: 0
 12084                           ;ff.c: 896: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 12085  001F1A  C097  F08C         	movff	put_fat@fs,move_window@fs
 12086  001F1E  C098  F08D         	movff	put_fat@fs+1,move_window@fs+1
 12087  001F22  EE20 F01E          	lfsr	2,30
 12088  001F26  5197               	movf	put_fat@fs& (0+255),w,b
 12089  001F28  26D9               	addwf	fsr2l,f,c
 12090  001F2A  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 12091  001F2C  22DA               	addwfc	fsr2h,f,c
 12092  001F2E  CFDE F0A1          	movff	postinc2,??_put_fat
 12093  001F32  CFDE F0A2          	movff	postinc2,??_put_fat+1
 12094  001F36  CFDE F0A3          	movff	postinc2,??_put_fat+2
 12095  001F3A  CFDE F0A4          	movff	postinc2,??_put_fat+3
 12096  001F3E  C0AD  F0A5         	movff	put_fat@bc,??_put_fat+4
 12097  001F42  C0AE  F0A6         	movff	put_fat@bc+1,??_put_fat+5
 12098  001F46  0E09               	movlw	9
 12099  001F48  6FA7               	movwf	(??_put_fat+6)& (0+255),b
 12100  001F4A                     u12695:
 12101  001F4A  90D8               	bcf	status,0,c
 12102  001F4C  33A6               	rrcf	(??_put_fat+5)& (0+255),f,b
 12103  001F4E  33A5               	rrcf	(??_put_fat+4)& (0+255),f,b
 12104  001F50  2FA7               	decfsz	(??_put_fat+6)& (0+255),f,b
 12105  001F52  D7FB               	goto	u12695
 12106  001F54  51A5               	movf	(??_put_fat+4)& (0+255),w,b
 12107  001F56  25A1               	addwf	??_put_fat& (0+255),w,b
 12108  001F58  6F8E               	movwf	move_window@sector& (0+255),b
 12109  001F5A  51A6               	movf	(??_put_fat+5)& (0+255),w,b
 12110  001F5C  21A2               	addwfc	(??_put_fat+1)& (0+255),w,b
 12111  001F5E  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 12112  001F60  0E00               	movlw	0
 12113  001F62  21A3               	addwfc	(??_put_fat+2)& (0+255),w,b
 12114  001F64  6F90               	movwf	(move_window@sector+2)& (0+255),b
 12115  001F66  0E00               	movlw	0
 12116  001F68  21A4               	addwfc	(??_put_fat+3)& (0+255),w,b
 12117  001F6A  6F91               	movwf	(move_window@sector+3)& (0+255),b
 12118  001F6C  ECCA  F024         	call	_move_window	;wreg free
 12119  001F70  0100               	movlb	0	; () banked
 12120  001F72  6FAF               	movwf	put_fat@res& (0+255),b
 12121                           
 12122                           ; BSR set to: 0
 12123                           ;ff.c: 897: if (res != FR_OK) break;
 12124  001F74  51AF               	movf	put_fat@res& (0+255),w,b
 12125  001F76  A4D8               	btfss	status,2,c
 12126  001F78  D135               	goto	l944
 12127                           
 12128                           ; BSR set to: 0
 12129                           ;ff.c: 898: p = &fs->win[bc % ((UINT)512)];
 12130                           
 12131                           ; BSR set to: 0
 12132                           
 12133                           ; BSR set to: 0
 12134  001F7A  0EFF               	movlw	255
 12135  001F7C  6FA1               	movwf	??_put_fat& (0+255),b
 12136  001F7E  0E01               	movlw	1
 12137  001F80  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 12138  001F82  C0AD  F0A3         	movff	put_fat@bc,??_put_fat+2
 12139  001F86  C0AE  F0A4         	movff	put_fat@bc+1,??_put_fat+3
 12140  001F8A  51A1               	movf	??_put_fat& (0+255),w,b
 12141  001F8C  17A3               	andwf	(??_put_fat+2)& (0+255),f,b
 12142  001F8E  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 12143  001F90  17A4               	andwf	(??_put_fat+3)& (0+255),f,b
 12144  001F92  0E2E               	movlw	46
 12145  001F94  27A3               	addwf	(??_put_fat+2)& (0+255),f,b
 12146  001F96  0E00               	movlw	0
 12147  001F98  23A4               	addwfc	(??_put_fat+3)& (0+255),f,b
 12148  001F9A  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 12149  001F9C  2597               	addwf	put_fat@fs& (0+255),w,b
 12150  001F9E  6FB0               	movwf	put_fat@p& (0+255),b
 12151  001FA0  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 12152  001FA2  2198               	addwfc	(put_fat@fs+1)& (0+255),w,b
 12153  001FA4  6FB1               	movwf	(put_fat@p+1)& (0+255),b
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;ff.c: 899: *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F
      +                          ));
 12157  001FA6  B199               	btfsc	put_fat@clst& (0+255),0,b
 12158  001FA8  D01B               	goto	l951
 12159                           
 12160                           ; BSR set to: 0
 12161  001FAA  C09D  F0A1         	movff	put_fat@val,??_put_fat
 12162  001FAE  C09E  F0A2         	movff	put_fat@val+1,??_put_fat+1
 12163  001FB2  C09F  F0A3         	movff	put_fat@val+2,??_put_fat+2
 12164  001FB6  C0A0  F0A4         	movff	put_fat@val+3,??_put_fat+3
 12165  001FBA  C0A2  F0A1         	movff	??_put_fat+1,??_put_fat
 12166  001FBE  C0A3  F0A2         	movff	??_put_fat+2,??_put_fat+1
 12167  001FC2  C0A4  F0A3         	movff	??_put_fat+3,??_put_fat+2
 12168  001FC6  6BA4               	clrf	(??_put_fat+3)& (0+255),b
 12169  001FC8  0E0F               	movlw	15
 12170  001FCA  17A1               	andwf	??_put_fat& (0+255),f,b
 12171  001FCC  C0B0  FFD9         	movff	put_fat@p,fsr2l
 12172  001FD0  C0B1  FFDA         	movff	put_fat@p+1,fsr2h
 12173  001FD4  50DF               	movf	indf2,w,c
 12174  001FD6  0BF0               	andlw	240
 12175  001FD8  11A1               	iorwf	??_put_fat& (0+255),w,b
 12176  001FDA  6FA5               	movwf	(??_put_fat+4)& (0+255),b
 12177  001FDC  51A5               	movf	(??_put_fat+4)& (0+255),w,b
 12178  001FDE  D012               	goto	L8
 12179  001FE0                     l951:
 12180                           
 12181                           ; BSR set to: 0
 12182                           
 12183                           ; BSR set to: 0
 12184  001FE0  C09D  F0A1         	movff	put_fat@val,??_put_fat
 12185  001FE4  C09E  F0A2         	movff	put_fat@val+1,??_put_fat+1
 12186  001FE8  C09F  F0A3         	movff	put_fat@val+2,??_put_fat+2
 12187  001FEC  C0A0  F0A4         	movff	put_fat@val+3,??_put_fat+3
 12188  001FF0  0E05               	movlw	5
 12189  001FF2  D005               	goto	u12720
 12190  001FF4                     u12725:
 12191  001FF4  90D8               	bcf	status,0,c
 12192  001FF6  33A4               	rrcf	(??_put_fat+3)& (0+255),f,b
 12193  001FF8  33A3               	rrcf	(??_put_fat+2)& (0+255),f,b
 12194  001FFA  33A2               	rrcf	(??_put_fat+1)& (0+255),f,b
 12195  001FFC  33A1               	rrcf	??_put_fat& (0+255),f,b
 12196  001FFE                     u12720:
 12197  001FFE  2EE8               	decfsz	wreg,f,c
 12198  002000  D7F9               	goto	u12725
 12199  002002  51A1               	movf	??_put_fat& (0+255),w,b
 12200  002004                     L8:
 12201  002004  6FAB               	movwf	_put_fat$2045& (0+255),b
 12202  002006  6BAC               	clrf	(_put_fat$2045+1)& (0+255),b
 12203                           
 12204                           ; BSR set to: 0
 12205                           
 12206                           ; BSR set to: 0
 12207  002008  C0B0  FFD9         	movff	put_fat@p,fsr2l
 12208  00200C  C0B1  FFDA         	movff	put_fat@p+1,fsr2h
 12209  002010  C0AB  FFDF         	movff	_put_fat$2045,indf2
 12210  002014  D0CC               	goto	l10323
 12211  002016                     
 12212                           ; BSR set to: 0
 12213                           ;ff.c: 904: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 12214                           
 12215                           ; BSR set to: 0
 12216  002016  C097  F08C         	movff	put_fat@fs,move_window@fs
 12217  00201A  C098  F08D         	movff	put_fat@fs+1,move_window@fs+1
 12218  00201E  EE20 F01E          	lfsr	2,30
 12219  002022  5197               	movf	put_fat@fs& (0+255),w,b
 12220  002024  26D9               	addwf	fsr2l,f,c
 12221  002026  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 12222  002028  22DA               	addwfc	fsr2h,f,c
 12223  00202A  CFDE F0A1          	movff	postinc2,??_put_fat
 12224  00202E  CFDE F0A2          	movff	postinc2,??_put_fat+1
 12225  002032  CFDE F0A3          	movff	postinc2,??_put_fat+2
 12226  002036  CFDE F0A4          	movff	postinc2,??_put_fat+3
 12227  00203A  C099  F0A5         	movff	put_fat@clst,??_put_fat+4
 12228  00203E  C09A  F0A6         	movff	put_fat@clst+1,??_put_fat+5
 12229  002042  C09B  F0A7         	movff	put_fat@clst+2,??_put_fat+6
 12230  002046  C09C  F0A8         	movff	put_fat@clst+3,??_put_fat+7
 12231  00204A  C0A6  F0A5         	movff	??_put_fat+5,??_put_fat+4
 12232  00204E  C0A7  F0A6         	movff	??_put_fat+6,??_put_fat+5
 12233  002052  C0A8  F0A7         	movff	??_put_fat+7,??_put_fat+6
 12234  002056  6BA8               	clrf	(??_put_fat+7)& (0+255),b
 12235  002058  51A1               	movf	??_put_fat& (0+255),w,b
 12236  00205A  25A5               	addwf	(??_put_fat+4)& (0+255),w,b
 12237  00205C  6F8E               	movwf	move_window@sector& (0+255),b
 12238  00205E  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 12239  002060  21A6               	addwfc	(??_put_fat+5)& (0+255),w,b
 12240  002062  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 12241  002064  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 12242  002066  21A7               	addwfc	(??_put_fat+6)& (0+255),w,b
 12243  002068  6F90               	movwf	(move_window@sector+2)& (0+255),b
 12244  00206A  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 12245  00206C  21A8               	addwfc	(??_put_fat+7)& (0+255),w,b
 12246  00206E  6F91               	movwf	(move_window@sector+3)& (0+255),b
 12247  002070  ECCA  F024         	call	_move_window	;wreg free
 12248  002074  0100               	movlb	0	; () banked
 12249  002076  6FAF               	movwf	put_fat@res& (0+255),b
 12250                           
 12251                           ; BSR set to: 0
 12252                           ;ff.c: 905: if (res != FR_OK) break;
 12253  002078  51AF               	movf	put_fat@res& (0+255),w,b
 12254  00207A  A4D8               	btfss	status,2,c
 12255  00207C  D0B3               	goto	l944
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;ff.c: 906: p = &fs->win[clst * 2 % ((UINT)512)];
 12259                           
 12260                           ; BSR set to: 0
 12261                           
 12262                           ; BSR set to: 0
 12263  00207E  0EFF               	movlw	255
 12264  002080  6FA1               	movwf	??_put_fat& (0+255),b
 12265  002082  0E01               	movlw	1
 12266  002084  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 12267  002086  C099  F0A3         	movff	put_fat@clst,??_put_fat+2
 12268  00208A  C09A  F0A4         	movff	put_fat@clst+1,??_put_fat+3
 12269  00208E  90D8               	bcf	status,0,c
 12270  002090  37A3               	rlcf	(??_put_fat+2)& (0+255),f,b
 12271  002092  37A4               	rlcf	(??_put_fat+3)& (0+255),f,b
 12272  002094  51A1               	movf	??_put_fat& (0+255),w,b
 12273  002096  17A3               	andwf	(??_put_fat+2)& (0+255),f,b
 12274  002098  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 12275  00209A  17A4               	andwf	(??_put_fat+3)& (0+255),f,b
 12276  00209C  0E2E               	movlw	46
 12277  00209E  27A3               	addwf	(??_put_fat+2)& (0+255),f,b
 12278  0020A0  0E00               	movlw	0
 12279  0020A2  23A4               	addwfc	(??_put_fat+3)& (0+255),f,b
 12280  0020A4  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 12281  0020A6  2597               	addwf	put_fat@fs& (0+255),w,b
 12282  0020A8  6FB0               	movwf	put_fat@p& (0+255),b
 12283  0020AA  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 12284  0020AC  2198               	addwfc	(put_fat@fs+1)& (0+255),w,b
 12285  0020AE  6FB1               	movwf	(put_fat@p+1)& (0+255),b
 12286                           
 12287                           ; BSR set to: 0
 12288                           ;ff.c: 907: *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
 12289  0020B0  C0B0  FFD9         	movff	put_fat@p,fsr2l
 12290  0020B4  C0B1  FFDA         	movff	put_fat@p+1,fsr2h
 12291  0020B8  C09D  FFDE         	movff	put_fat@val,postinc2
 12292  0020BC  C09E  FFDD         	movff	put_fat@val+1,postdec2
 12293  0020C0  D076               	goto	l10323
 12294  0020C2                     
 12295                           ; BSR set to: 0
 12296                           ;ff.c: 912: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 12297                           
 12298                           ; BSR set to: 0
 12299  0020C2  C097  F08C         	movff	put_fat@fs,move_window@fs
 12300  0020C6  C098  F08D         	movff	put_fat@fs+1,move_window@fs+1
 12301  0020CA  EE20 F01E          	lfsr	2,30
 12302  0020CE  5197               	movf	put_fat@fs& (0+255),w,b
 12303  0020D0  26D9               	addwf	fsr2l,f,c
 12304  0020D2  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 12305  0020D4  22DA               	addwfc	fsr2h,f,c
 12306  0020D6  CFDE F0A1          	movff	postinc2,??_put_fat
 12307  0020DA  CFDE F0A2          	movff	postinc2,??_put_fat+1
 12308  0020DE  CFDE F0A3          	movff	postinc2,??_put_fat+2
 12309  0020E2  CFDE F0A4          	movff	postinc2,??_put_fat+3
 12310  0020E6  C099  F0A5         	movff	put_fat@clst,??_put_fat+4
 12311  0020EA  C09A  F0A6         	movff	put_fat@clst+1,??_put_fat+5
 12312  0020EE  C09B  F0A7         	movff	put_fat@clst+2,??_put_fat+6
 12313  0020F2  C09C  F0A8         	movff	put_fat@clst+3,??_put_fat+7
 12314  0020F6  0E08               	movlw	8
 12315  0020F8  D005               	goto	u12740
 12316  0020FA                     u12745:
 12317  0020FA  90D8               	bcf	status,0,c
 12318  0020FC  33A8               	rrcf	(??_put_fat+7)& (0+255),f,b
 12319  0020FE  33A7               	rrcf	(??_put_fat+6)& (0+255),f,b
 12320  002100  33A6               	rrcf	(??_put_fat+5)& (0+255),f,b
 12321  002102  33A5               	rrcf	(??_put_fat+4)& (0+255),f,b
 12322  002104                     u12740:
 12323  002104  2EE8               	decfsz	wreg,f,c
 12324  002106  D7F9               	goto	u12745
 12325  002108  51A1               	movf	??_put_fat& (0+255),w,b
 12326  00210A  25A5               	addwf	(??_put_fat+4)& (0+255),w,b
 12327  00210C  6F8E               	movwf	move_window@sector& (0+255),b
 12328  00210E  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 12329  002110  21A6               	addwfc	(??_put_fat+5)& (0+255),w,b
 12330  002112  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 12331  002114  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 12332  002116  21A7               	addwfc	(??_put_fat+6)& (0+255),w,b
 12333  002118  6F90               	movwf	(move_window@sector+2)& (0+255),b
 12334  00211A  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 12335  00211C  21A8               	addwfc	(??_put_fat+7)& (0+255),w,b
 12336  00211E  6F91               	movwf	(move_window@sector+3)& (0+255),b
 12337  002120  ECCA  F024         	call	_move_window	;wreg free
 12338  002124  0100               	movlb	0	; () banked
 12339  002126  6FAF               	movwf	put_fat@res& (0+255),b
 12340                           
 12341                           ; BSR set to: 0
 12342                           ;ff.c: 913: if (res != FR_OK) break;
 12343  002128  51AF               	movf	put_fat@res& (0+255),w,b
 12344  00212A  A4D8               	btfss	status,2,c
 12345  00212C  D05B               	goto	l944
 12346                           
 12347                           ; BSR set to: 0
 12348                           ;ff.c: 914: p = &fs->win[clst * 4 % ((UINT)512)];
 12349                           
 12350                           ; BSR set to: 0
 12351                           
 12352                           ; BSR set to: 0
 12353  00212E  0EFF               	movlw	255
 12354  002130  6FA1               	movwf	??_put_fat& (0+255),b
 12355  002132  0E01               	movlw	1
 12356  002134  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 12357  002136  C099  F0A3         	movff	put_fat@clst,??_put_fat+2
 12358  00213A  C09A  F0A4         	movff	put_fat@clst+1,??_put_fat+3
 12359  00213E  90D8               	bcf	status,0,c
 12360  002140  37A3               	rlcf	(??_put_fat+2)& (0+255),f,b
 12361  002142  37A4               	rlcf	(??_put_fat+3)& (0+255),f,b
 12362  002144  90D8               	bcf	status,0,c
 12363  002146  37A3               	rlcf	(??_put_fat+2)& (0+255),f,b
 12364  002148  37A4               	rlcf	(??_put_fat+3)& (0+255),f,b
 12365  00214A  51A1               	movf	??_put_fat& (0+255),w,b
 12366  00214C  17A3               	andwf	(??_put_fat+2)& (0+255),f,b
 12367  00214E  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 12368  002150  17A4               	andwf	(??_put_fat+3)& (0+255),f,b
 12369  002152  0E2E               	movlw	46
 12370  002154  27A3               	addwf	(??_put_fat+2)& (0+255),f,b
 12371  002156  0E00               	movlw	0
 12372  002158  23A4               	addwfc	(??_put_fat+3)& (0+255),f,b
 12373  00215A  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 12374  00215C  2597               	addwf	put_fat@fs& (0+255),w,b
 12375  00215E  6FB0               	movwf	put_fat@p& (0+255),b
 12376  002160  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 12377  002162  2198               	addwfc	(put_fat@fs+1)& (0+255),w,b
 12378  002164  6FB1               	movwf	(put_fat@p+1)& (0+255),b
 12379                           
 12380                           ; BSR set to: 0
 12381                           ;ff.c: 915: val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
 12382  002166  C0B0  FFD9         	movff	put_fat@p,fsr2l
 12383  00216A  C0B1  FFDA         	movff	put_fat@p+1,fsr2h
 12384  00216E  0E00               	movlw	0
 12385  002170  14DE               	andwf	postinc2,w,c
 12386  002172  6FA1               	movwf	??_put_fat& (0+255),b
 12387  002174  0E00               	movlw	0
 12388  002176  14DE               	andwf	postinc2,w,c
 12389  002178  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 12390  00217A  0E00               	movlw	0
 12391  00217C  14DE               	andwf	postinc2,w,c
 12392  00217E  6FA3               	movwf	(??_put_fat+2)& (0+255),b
 12393  002180  0EF0               	movlw	240
 12394  002182  14DE               	andwf	postinc2,w,c
 12395  002184  6FA4               	movwf	(??_put_fat+3)& (0+255),b
 12396  002186  51A1               	movf	??_put_fat& (0+255),w,b
 12397  002188  139D               	iorwf	put_fat@val& (0+255),f,b
 12398  00218A  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 12399  00218C  139E               	iorwf	(put_fat@val+1)& (0+255),f,b
 12400  00218E  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 12401  002190  139F               	iorwf	(put_fat@val+2)& (0+255),f,b
 12402  002192  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 12403  002194  13A0               	iorwf	(put_fat@val+3)& (0+255),f,b
 12404                           
 12405                           ;ff.c: 916: *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 12406  002196  C0B0  FFD9         	movff	put_fat@p,fsr2l
 12407  00219A  C0B1  FFDA         	movff	put_fat@p+1,fsr2h
 12408  00219E  C09D  FFDE         	movff	put_fat@val,postinc2
 12409  0021A2  C09E  FFDE         	movff	put_fat@val+1,postinc2
 12410  0021A6  C09F  FFDE         	movff	put_fat@val+2,postinc2
 12411  0021AA  C0A0  FFDE         	movff	put_fat@val+3,postinc2
 12412  0021AE                     l10323:
 12413                           
 12414                           ; BSR set to: 0
 12415                           ;ff.c: 917: fs->wflag = 1;
 12416  0021AE  EE20 F004          	lfsr	2,4
 12417  0021B2  5197               	movf	put_fat@fs& (0+255),w,b
 12418  0021B4  26D9               	addwf	fsr2l,f,c
 12419  0021B6  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 12420  0021B8  22DA               	addwfc	fsr2h,f,c
 12421  0021BA  0E01               	movlw	1
 12422  0021BC  6EDF               	movwf	indf2,c
 12423                           
 12424                           ;ff.c: 918: break;
 12425  0021BE  D012               	goto	l944
 12426  0021C0                     l958:
 12427                           
 12428                           ; BSR set to: 0
 12429                           ;ff.c: 921: res = FR_INT_ERR;
 12430                           
 12431                           ; BSR set to: 0
 12432  0021C0  0E02               	movlw	2
 12433  0021C2  6FAF               	movwf	put_fat@res& (0+255),b
 12434                           
 12435                           ;ff.c: 922: }
 12436  0021C4  D00F               	goto	l944
 12437  0021C6                     l941:
 12438                           
 12439                           ; BSR set to: 0
 12440                           
 12441                           ; BSR set to: 0
 12442  0021C6  C097  FFD9         	movff	put_fat@fs,fsr2l
 12443  0021CA  C098  FFDA         	movff	put_fat@fs+1,fsr2h
 12444  0021CE  50DF               	movf	indf2,w,c
 12445                           
 12446                           ; Switch size 1, requested type "space"
 12447                           ; Number of cases is 3, Range of values is 1 to 3
 12448                           ; switch strategies available:
 12449                           ; Name         Instructions Cycles
 12450                           ; simple_byte           10     6 (average)
 12451                           ;	Chosen strategy is simple_byte
 12452  0021D0  0A01               	xorlw	1	; case 1
 12453  0021D2  B4D8               	btfsc	status,2,c
 12454  0021D4  D61F               	goto	l942
 12455  0021D6  0A03               	xorlw	3	; case 2
 12456  0021D8  B4D8               	btfsc	status,2,c
 12457  0021DA  D71D               	goto	l954
 12458  0021DC  0A01               	xorlw	1	; case 3
 12459  0021DE  B4D8               	btfsc	status,2,c
 12460  0021E0  D770               	goto	l956
 12461  0021E2  D7EE               	goto	l958
 12462  0021E4                     l944:
 12463                           
 12464                           ; BSR set to: 0
 12465                           ;ff.c: 923: }
 12466                           ;ff.c: 925: return res;
 12467                           
 12468                           ; BSR set to: 0
 12469                           
 12470                           ; BSR set to: 0
 12471  0021E4  51AF               	movf	put_fat@res& (0+255),w,b
 12472  0021E6  0012               	return	
 12473  0021E8                     __end_of_put_fat:
 12474                           	opt stack 0
 12475                           tblptru	equ	0xFF8
 12476                           tblptrh	equ	0xFF7
 12477                           tblptrl	equ	0xFF6
 12478                           tablat	equ	0xFF5
 12479                           prodh	equ	0xFF4
 12480                           prodl	equ	0xFF3
 12481                           intcon	equ	0xFF2
 12482                           intcon2	equ	0xFF1
 12483                           intcon3	equ	0xFF0
 12484                           indf0	equ	0xFEF
 12485                           postinc0	equ	0xFEE
 12486                           fsr0h	equ	0xFEA
 12487                           fsr0l	equ	0xFE9
 12488                           wreg	equ	0xFE8
 12489                           indf1	equ	0xFE7
 12490                           postinc1	equ	0xFE6
 12491                           postdec1	equ	0xFE5
 12492                           fsr1h	equ	0xFE2
 12493                           fsr1l	equ	0xFE1
 12494                           indf2	equ	0xFDF
 12495                           postinc2	equ	0xFDE
 12496                           postdec2	equ	0xFDD
 12497                           plusw2	equ	0xFDB
 12498                           fsr2h	equ	0xFDA
 12499                           fsr2l	equ	0xFD9
 12500                           status	equ	0xFD8
 12501                           
 12502 ;; *************** function _get_fat *****************
 12503 ;; Defined at:
 12504 ;;		line 818 in file "bibliotecas/ff.c"
 12505 ;; Parameters:    Size  Location     Type
 12506 ;;  fs              2   55[BANK0 ] PTR struct .
 12507 ;;		 -> NULL(0), fs(558), 
 12508 ;;  clst            4   57[BANK0 ] unsigned long 
 12509 ;; Auto vars:     Size  Location     Type
 12510 ;;  val             4   75[BANK0 ] unsigned long 
 12511 ;;  bc              2   79[BANK0 ] unsigned int 
 12512 ;;  p               2   73[BANK0 ] PTR unsigned char 
 12513 ;;		 -> fs.win(512), NULL(0), fs(558), 
 12514 ;;  wc              2   71[BANK0 ] unsigned int 
 12515 ;; Return value:  Size  Location     Type
 12516 ;;                  4   55[BANK0 ] unsigned long 
 12517 ;; Registers used:
 12518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12519 ;; Tracked objects:
 12520 ;;		On entry : 0/0
 12521 ;;		On exit  : 0/0
 12522 ;;		Unchanged: 0/0
 12523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12524 ;;      Params:         0       6       0       0       0       0       0       0       0
 12525 ;;      Locals:         0      12       0       0       0       0       0       0       0
 12526 ;;      Temps:          0       8       0       0       0       0       0       0       0
 12527 ;;      Totals:         0      26       0       0       0       0       0       0       0
 12528 ;;Total ram usage:       26 bytes
 12529 ;; Hardware stack levels used:    1
 12530 ;; Hardware stack levels required when called:    9
 12531 ;; This function calls:
 12532 ;;		_move_window
 12533 ;; This function is called by:
 12534 ;;		_remove_chain
 12535 ;;		_create_chain
 12536 ;;		_dir_sdi
 12537 ;;		_dir_next
 12538 ;;		_f_lseek
 12539 ;;		_f_read
 12540 ;; This function uses a non-reentrant model
 12541 ;;
 12542                           
 12543                           	psect	text40
 12544  0025D4                     __ptext40:
 12545                           	opt stack 0
 12546  0025D4                     _get_fat:
 12547                           	opt stack 17
 12548                           
 12549                           ;ff.c: 823: UINT wc, bc;
 12550                           ;ff.c: 824: BYTE *p;
 12551                           ;ff.c: 825: DWORD val;
 12552                           ;ff.c: 828: if (clst < 2 || clst >= fs->n_fatent) {
 12553                           
 12554                           ; BSR set to: 0
 12555                           ;incstack = 0
 12556  0025D4  0100               	movlb	0	; () banked
 12557  0025D6  519C               	movf	(get_fat@clst+3)& (0+255),w,b
 12558  0025D8  119B               	iorwf	(get_fat@clst+2)& (0+255),w,b
 12559  0025DA  119A               	iorwf	(get_fat@clst+1)& (0+255),w,b
 12560  0025DC  E104               	bnz	u12530
 12561  0025DE  0E02               	movlw	2
 12562  0025E0  5D99               	subwf	get_fat@clst& (0+255),w,b
 12563  0025E2  A0D8               	btfss	status,0,c
 12564  0025E4  D195               	goto	l933
 12565  0025E6                     u12530:
 12566                           
 12567                           ; BSR set to: 0
 12568  0025E6  EE20 F012          	lfsr	2,18
 12569  0025EA  5197               	movf	get_fat@fs& (0+255),w,b
 12570  0025EC  26D9               	addwf	fsr2l,f,c
 12571  0025EE  5198               	movf	(get_fat@fs+1)& (0+255),w,b
 12572  0025F0  22DA               	addwfc	fsr2h,f,c
 12573  0025F2  50DE               	movf	postinc2,w,c
 12574  0025F4  5D99               	subwf	get_fat@clst& (0+255),w,b
 12575  0025F6  50DE               	movf	postinc2,w,c
 12576  0025F8  599A               	subwfb	(get_fat@clst+1)& (0+255),w,b
 12577  0025FA  50DE               	movf	postinc2,w,c
 12578  0025FC  599B               	subwfb	(get_fat@clst+2)& (0+255),w,b
 12579  0025FE  50DE               	movf	postinc2,w,c
 12580  002600  599C               	subwfb	(get_fat@clst+3)& (0+255),w,b
 12581  002602  B0D8               	btfsc	status,0,c
 12582                           
 12583                           ; BSR set to: 0
 12584  002604  D185               	goto	l933
 12585                           
 12586                           ; BSR set to: 0
 12587                           ;ff.c: 832: val = 0xFFFFFFFF;
 12588                           
 12589                           ;ff.c: 831: } else {
 12590                           
 12591                           ; BSR set to: 0
 12592                           ;ff.c: 829: val = 1;
 12593  002606  69AB               	setf	get_fat@val& (0+255),b
 12594  002608  69AC               	setf	(get_fat@val+1)& (0+255),b
 12595  00260A  69AD               	setf	(get_fat@val+2)& (0+255),b
 12596  00260C  69AE               	setf	(get_fat@val+3)& (0+255),b
 12597                           
 12598                           ;ff.c: 834: switch (fs->fs_type) {
 12599  00260E  D189               	goto	l920
 12600  002610                     l921:
 12601                           
 12602                           ; BSR set to: 0
 12603                           ;ff.c: 836: bc = (UINT)clst; bc += bc / 2;
 12604  002610  C099  F0AF         	movff	get_fat@clst,get_fat@bc
 12605  002614  C09A  F0B0         	movff	get_fat@clst+1,get_fat@bc+1
 12606                           
 12607                           ; BSR set to: 0
 12608  002618  90D8               	bcf	status,0,c
 12609  00261A  31B0               	rrcf	(get_fat@bc+1)& (0+255),w,b
 12610  00261C  6F9E               	movwf	(??_get_fat+1)& (0+255),b
 12611  00261E  31AF               	rrcf	get_fat@bc& (0+255),w,b
 12612  002620  6F9D               	movwf	??_get_fat& (0+255),b
 12613  002622  519D               	movf	??_get_fat& (0+255),w,b
 12614  002624  27AF               	addwf	get_fat@bc& (0+255),f,b
 12615  002626  519E               	movf	(??_get_fat+1)& (0+255),w,b
 12616  002628  23B0               	addwfc	(get_fat@bc+1)& (0+255),f,b
 12617                           
 12618                           ; BSR set to: 0
 12619                           ;ff.c: 837: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 12620  00262A  C097  F08C         	movff	get_fat@fs,move_window@fs
 12621  00262E  C098  F08D         	movff	get_fat@fs+1,move_window@fs+1
 12622  002632  EE20 F01E          	lfsr	2,30
 12623  002636  5197               	movf	get_fat@fs& (0+255),w,b
 12624  002638  26D9               	addwf	fsr2l,f,c
 12625  00263A  5198               	movf	(get_fat@fs+1)& (0+255),w,b
 12626  00263C  22DA               	addwfc	fsr2h,f,c
 12627  00263E  CFDE F09D          	movff	postinc2,??_get_fat
 12628  002642  CFDE F09E          	movff	postinc2,??_get_fat+1
 12629  002646  CFDE F09F          	movff	postinc2,??_get_fat+2
 12630  00264A  CFDE F0A0          	movff	postinc2,??_get_fat+3
 12631  00264E  C0AF  F0A1         	movff	get_fat@bc,??_get_fat+4
 12632  002652  C0B0  F0A2         	movff	get_fat@bc+1,??_get_fat+5
 12633  002656  0E09               	movlw	9
 12634  002658  6FA3               	movwf	(??_get_fat+6)& (0+255),b
 12635  00265A                     u12555:
 12636  00265A  90D8               	bcf	status,0,c
 12637  00265C  33A2               	rrcf	(??_get_fat+5)& (0+255),f,b
 12638  00265E  33A1               	rrcf	(??_get_fat+4)& (0+255),f,b
 12639  002660  2FA3               	decfsz	(??_get_fat+6)& (0+255),f,b
 12640  002662  D7FB               	goto	u12555
 12641  002664  51A1               	movf	(??_get_fat+4)& (0+255),w,b
 12642  002666  259D               	addwf	??_get_fat& (0+255),w,b
 12643  002668  6F8E               	movwf	move_window@sector& (0+255),b
 12644  00266A  51A2               	movf	(??_get_fat+5)& (0+255),w,b
 12645  00266C  219E               	addwfc	(??_get_fat+1)& (0+255),w,b
 12646  00266E  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 12647  002670  0E00               	movlw	0
 12648  002672  219F               	addwfc	(??_get_fat+2)& (0+255),w,b
 12649  002674  6F90               	movwf	(move_window@sector+2)& (0+255),b
 12650  002676  0E00               	movlw	0
 12651  002678  21A0               	addwfc	(??_get_fat+3)& (0+255),w,b
 12652  00267A  6F91               	movwf	(move_window@sector+3)& (0+255),b
 12653  00267C  ECCA  F024         	call	_move_window	;wreg free
 12654  002680  0900               	iorlw	0
 12655  002682  A4D8               	btfss	status,2,c
 12656  002684  D15D               	goto	l923
 12657                           
 12658                           ;ff.c: 838: wc = fs->win[bc++ % ((UINT)512)];
 12659  002686  0EFF               	movlw	255
 12660  002688  0100               	movlb	0	; () banked
 12661  00268A  6F9D               	movwf	??_get_fat& (0+255),b
 12662  00268C  0E01               	movlw	1
 12663  00268E  6F9E               	movwf	(??_get_fat+1)& (0+255),b
 12664  002690  C0AF  F09F         	movff	get_fat@bc,??_get_fat+2
 12665  002694  C0B0  F0A0         	movff	get_fat@bc+1,??_get_fat+3
 12666  002698  519D               	movf	??_get_fat& (0+255),w,b
 12667  00269A  179F               	andwf	(??_get_fat+2)& (0+255),f,b
 12668  00269C  519E               	movf	(??_get_fat+1)& (0+255),w,b
 12669  00269E  17A0               	andwf	(??_get_fat+3)& (0+255),f,b
 12670  0026A0  0E2E               	movlw	46
 12671  0026A2  279F               	addwf	(??_get_fat+2)& (0+255),f,b
 12672  0026A4  0E00               	movlw	0
 12673  0026A6  23A0               	addwfc	(??_get_fat+3)& (0+255),f,b
 12674  0026A8  519F               	movf	(??_get_fat+2)& (0+255),w,b
 12675  0026AA  2597               	addwf	get_fat@fs& (0+255),w,b
 12676  0026AC  6ED9               	movwf	fsr2l,c
 12677  0026AE  51A0               	movf	(??_get_fat+3)& (0+255),w,b
 12678  0026B0  2198               	addwfc	(get_fat@fs+1)& (0+255),w,b
 12679  0026B2  6EDA               	movwf	fsr2h,c
 12680  0026B4  50DF               	movf	indf2,w,c
 12681  0026B6  6FA1               	movwf	(??_get_fat+4)& (0+255),b
 12682  0026B8  51A1               	movf	(??_get_fat+4)& (0+255),w,b
 12683  0026BA  6FA7               	movwf	get_fat@wc& (0+255),b
 12684  0026BC  6BA8               	clrf	(get_fat@wc+1)& (0+255),b
 12685                           
 12686                           ; BSR set to: 0
 12687  0026BE  4BAF               	infsnz	get_fat@bc& (0+255),f,b
 12688  0026C0  2BB0               	incf	(get_fat@bc+1)& (0+255),f,b
 12689                           
 12690                           ; BSR set to: 0
 12691                           ;ff.c: 839: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 12692  0026C2  C097  F08C         	movff	get_fat@fs,move_window@fs
 12693  0026C6  C098  F08D         	movff	get_fat@fs+1,move_window@fs+1
 12694  0026CA  EE20 F01E          	lfsr	2,30
 12695  0026CE  5197               	movf	get_fat@fs& (0+255),w,b
 12696  0026D0  26D9               	addwf	fsr2l,f,c
 12697  0026D2  5198               	movf	(get_fat@fs+1)& (0+255),w,b
 12698  0026D4  22DA               	addwfc	fsr2h,f,c
 12699  0026D6  CFDE F09D          	movff	postinc2,??_get_fat
 12700  0026DA  CFDE F09E          	movff	postinc2,??_get_fat+1
 12701  0026DE  CFDE F09F          	movff	postinc2,??_get_fat+2
 12702  0026E2  CFDE F0A0          	movff	postinc2,??_get_fat+3
 12703  0026E6  C0AF  F0A1         	movff	get_fat@bc,??_get_fat+4
 12704  0026EA  C0B0  F0A2         	movff	get_fat@bc+1,??_get_fat+5
 12705  0026EE  0E09               	movlw	9
 12706  0026F0  6FA3               	movwf	(??_get_fat+6)& (0+255),b
 12707  0026F2                     u12575:
 12708  0026F2  90D8               	bcf	status,0,c
 12709  0026F4  33A2               	rrcf	(??_get_fat+5)& (0+255),f,b
 12710  0026F6  33A1               	rrcf	(??_get_fat+4)& (0+255),f,b
 12711  0026F8  2FA3               	decfsz	(??_get_fat+6)& (0+255),f,b
 12712  0026FA  D7FB               	goto	u12575
 12713  0026FC  51A1               	movf	(??_get_fat+4)& (0+255),w,b
 12714  0026FE  259D               	addwf	??_get_fat& (0+255),w,b
 12715  002700  6F8E               	movwf	move_window@sector& (0+255),b
 12716  002702  51A2               	movf	(??_get_fat+5)& (0+255),w,b
 12717  002704  219E               	addwfc	(??_get_fat+1)& (0+255),w,b
 12718  002706  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 12719  002708  0E00               	movlw	0
 12720  00270A  219F               	addwfc	(??_get_fat+2)& (0+255),w,b
 12721  00270C  6F90               	movwf	(move_window@sector+2)& (0+255),b
 12722  00270E  0E00               	movlw	0
 12723  002710  21A0               	addwfc	(??_get_fat+3)& (0+255),w,b
 12724  002712  6F91               	movwf	(move_window@sector+3)& (0+255),b
 12725  002714  ECCA  F024         	call	_move_window	;wreg free
 12726  002718  0900               	iorlw	0
 12727  00271A  A4D8               	btfss	status,2,c
 12728  00271C  D111               	goto	l923
 12729                           
 12730                           ;ff.c: 840: wc |= fs->win[bc % ((UINT)512)] << 8;
 12731  00271E  0EFF               	movlw	255
 12732  002720  0100               	movlb	0	; () banked
 12733  002722  6F9D               	movwf	??_get_fat& (0+255),b
 12734  002724  0E01               	movlw	1
 12735  002726  6F9E               	movwf	(??_get_fat+1)& (0+255),b
 12736  002728  C0AF  F09F         	movff	get_fat@bc,??_get_fat+2
 12737  00272C  C0B0  F0A0         	movff	get_fat@bc+1,??_get_fat+3
 12738  002730  519D               	movf	??_get_fat& (0+255),w,b
 12739  002732  179F               	andwf	(??_get_fat+2)& (0+255),f,b
 12740  002734  519E               	movf	(??_get_fat+1)& (0+255),w,b
 12741  002736  17A0               	andwf	(??_get_fat+3)& (0+255),f,b
 12742  002738  0E2E               	movlw	46
 12743  00273A  279F               	addwf	(??_get_fat+2)& (0+255),f,b
 12744  00273C  0E00               	movlw	0
 12745  00273E  23A0               	addwfc	(??_get_fat+3)& (0+255),f,b
 12746  002740  519F               	movf	(??_get_fat+2)& (0+255),w,b
 12747  002742  2597               	addwf	get_fat@fs& (0+255),w,b
 12748  002744  6ED9               	movwf	fsr2l,c
 12749  002746  51A0               	movf	(??_get_fat+3)& (0+255),w,b
 12750  002748  2198               	addwfc	(get_fat@fs+1)& (0+255),w,b
 12751  00274A  6EDA               	movwf	fsr2h,c
 12752  00274C  50DF               	movf	indf2,w,c
 12753  00274E  6FA1               	movwf	(??_get_fat+4)& (0+255),b
 12754  002750  51A1               	movf	(??_get_fat+4)& (0+255),w,b
 12755  002752  6FA3               	movwf	(??_get_fat+6)& (0+255),b
 12756  002754  6BA2               	clrf	(??_get_fat+5)& (0+255),b
 12757  002756  51A2               	movf	(??_get_fat+5)& (0+255),w,b
 12758  002758  13A7               	iorwf	get_fat@wc& (0+255),f,b
 12759  00275A  51A3               	movf	(??_get_fat+6)& (0+255),w,b
 12760  00275C  13A8               	iorwf	(get_fat@wc+1)& (0+255),f,b
 12761                           
 12762                           ; BSR set to: 0
 12763                           ;ff.c: 841: val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 12764  00275E  B199               	btfsc	get_fat@clst& (0+255),0,b
 12765  002760  D007               	goto	l926
 12766                           
 12767                           ; BSR set to: 0
 12768  002762  0EFF               	movlw	255
 12769  002764  15A7               	andwf	get_fat@wc& (0+255),w,b
 12770  002766  6FA5               	movwf	_get_fat$2018& (0+255),b
 12771  002768  0E0F               	movlw	15
 12772  00276A  15A8               	andwf	(get_fat@wc+1)& (0+255),w,b
 12773  00276C  6FA6               	movwf	(_get_fat$2018+1)& (0+255),b
 12774  00276E  D00F               	goto	l928
 12775  002770                     l926:
 12776                           
 12777                           ; BSR set to: 0
 12778                           
 12779                           ; BSR set to: 0
 12780  002770  C0A7  F09D         	movff	get_fat@wc,??_get_fat
 12781  002774  C0A8  F09E         	movff	get_fat@wc+1,??_get_fat+1
 12782  002778  0E04               	movlw	4
 12783  00277A  6F9F               	movwf	(??_get_fat+2)& (0+255),b
 12784  00277C                     u12605:
 12785  00277C  90D8               	bcf	status,0,c
 12786  00277E  339E               	rrcf	(??_get_fat+1)& (0+255),f,b
 12787  002780  339D               	rrcf	??_get_fat& (0+255),f,b
 12788  002782  2F9F               	decfsz	(??_get_fat+2)& (0+255),f,b
 12789  002784  D7FB               	goto	u12605
 12790  002786  C09D  F0A5         	movff	??_get_fat,_get_fat$2018
 12791  00278A  C09E  F0A6         	movff	??_get_fat+1,_get_fat$2018+1
 12792  00278E                     l928:
 12793                           
 12794                           ; BSR set to: 0
 12795                           
 12796                           ; BSR set to: 0
 12797  00278E  C0A5  F0AB         	movff	_get_fat$2018,get_fat@val
 12798  002792  C0A6  F0AC         	movff	_get_fat$2018+1,get_fat@val+1
 12799  002796  D058               	goto	L11
 12800  002798                     
 12801                           ; BSR set to: 0
 12802                           ;ff.c: 845: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) brea
      +                          k;
 12803                           
 12804                           ; BSR set to: 0
 12805  002798  C097  F08C         	movff	get_fat@fs,move_window@fs
 12806  00279C  C098  F08D         	movff	get_fat@fs+1,move_window@fs+1
 12807  0027A0  EE20 F01E          	lfsr	2,30
 12808  0027A4  5197               	movf	get_fat@fs& (0+255),w,b
 12809  0027A6  26D9               	addwf	fsr2l,f,c
 12810  0027A8  5198               	movf	(get_fat@fs+1)& (0+255),w,b
 12811  0027AA  22DA               	addwfc	fsr2h,f,c
 12812  0027AC  CFDE F09D          	movff	postinc2,??_get_fat
 12813  0027B0  CFDE F09E          	movff	postinc2,??_get_fat+1
 12814  0027B4  CFDE F09F          	movff	postinc2,??_get_fat+2
 12815  0027B8  CFDE F0A0          	movff	postinc2,??_get_fat+3
 12816  0027BC  C099  F0A1         	movff	get_fat@clst,??_get_fat+4
 12817  0027C0  C09A  F0A2         	movff	get_fat@clst+1,??_get_fat+5
 12818  0027C4  C09B  F0A3         	movff	get_fat@clst+2,??_get_fat+6
 12819  0027C8  C09C  F0A4         	movff	get_fat@clst+3,??_get_fat+7
 12820  0027CC  C0A2  F0A1         	movff	??_get_fat+5,??_get_fat+4
 12821  0027D0  C0A3  F0A2         	movff	??_get_fat+6,??_get_fat+5
 12822  0027D4  C0A4  F0A3         	movff	??_get_fat+7,??_get_fat+6
 12823  0027D8  6BA4               	clrf	(??_get_fat+7)& (0+255),b
 12824  0027DA  519D               	movf	??_get_fat& (0+255),w,b
 12825  0027DC  25A1               	addwf	(??_get_fat+4)& (0+255),w,b
 12826  0027DE  6F8E               	movwf	move_window@sector& (0+255),b
 12827  0027E0  519E               	movf	(??_get_fat+1)& (0+255),w,b
 12828  0027E2  21A2               	addwfc	(??_get_fat+5)& (0+255),w,b
 12829  0027E4  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 12830  0027E6  519F               	movf	(??_get_fat+2)& (0+255),w,b
 12831  0027E8  21A3               	addwfc	(??_get_fat+6)& (0+255),w,b
 12832  0027EA  6F90               	movwf	(move_window@sector+2)& (0+255),b
 12833  0027EC  51A0               	movf	(??_get_fat+3)& (0+255),w,b
 12834  0027EE  21A4               	addwfc	(??_get_fat+7)& (0+255),w,b
 12835  0027F0  6F91               	movwf	(move_window@sector+3)& (0+255),b
 12836  0027F2  ECCA  F024         	call	_move_window	;wreg free
 12837  0027F6  0900               	iorlw	0
 12838  0027F8  A4D8               	btfss	status,2,c
 12839  0027FA  D0A2               	goto	l923
 12840                           
 12841                           ;ff.c: 846: p = &fs->win[clst * 2 % ((UINT)512)];
 12842  0027FC  0EFF               	movlw	255
 12843  0027FE  0100               	movlb	0	; () banked
 12844  002800  6F9D               	movwf	??_get_fat& (0+255),b
 12845  002802  0E01               	movlw	1
 12846  002804  6F9E               	movwf	(??_get_fat+1)& (0+255),b
 12847  002806  C099  F09F         	movff	get_fat@clst,??_get_fat+2
 12848  00280A  C09A  F0A0         	movff	get_fat@clst+1,??_get_fat+3
 12849  00280E  90D8               	bcf	status,0,c
 12850  002810  379F               	rlcf	(??_get_fat+2)& (0+255),f,b
 12851  002812  37A0               	rlcf	(??_get_fat+3)& (0+255),f,b
 12852  002814  519D               	movf	??_get_fat& (0+255),w,b
 12853  002816  179F               	andwf	(??_get_fat+2)& (0+255),f,b
 12854  002818  519E               	movf	(??_get_fat+1)& (0+255),w,b
 12855  00281A  17A0               	andwf	(??_get_fat+3)& (0+255),f,b
 12856  00281C  0E2E               	movlw	46
 12857  00281E  279F               	addwf	(??_get_fat+2)& (0+255),f,b
 12858  002820  0E00               	movlw	0
 12859  002822  23A0               	addwfc	(??_get_fat+3)& (0+255),f,b
 12860  002824  519F               	movf	(??_get_fat+2)& (0+255),w,b
 12861  002826  2597               	addwf	get_fat@fs& (0+255),w,b
 12862  002828  6FA9               	movwf	get_fat@p& (0+255),b
 12863  00282A  51A0               	movf	(??_get_fat+3)& (0+255),w,b
 12864  00282C  2198               	addwfc	(get_fat@fs+1)& (0+255),w,b
 12865  00282E  6FAA               	movwf	(get_fat@p+1)& (0+255),b
 12866                           
 12867                           ; BSR set to: 0
 12868                           ;ff.c: 847: val = (WORD)(*(WORD*)(BYTE*)(p));
 12869  002830  C0A9  FFD9         	movff	get_fat@p,fsr2l
 12870  002834  C0AA  FFDA         	movff	get_fat@p+1,fsr2h
 12871  002838  CFDE F09D          	movff	postinc2,??_get_fat
 12872  00283C  CFDD F09E          	movff	postdec2,??_get_fat+1
 12873  002840  C09D  F0AB         	movff	??_get_fat,get_fat@val
 12874  002844  C09E  F0AC         	movff	??_get_fat+1,get_fat@val+1
 12875  002848                     L11:
 12876  002848  6BAD               	clrf	(get_fat@val+2)& (0+255),b
 12877  00284A  6BAE               	clrf	(get_fat@val+3)& (0+255),b
 12878                           
 12879                           ;ff.c: 848: break;
 12880  00284C  D079               	goto	l923
 12881  00284E                     
 12882                           ; BSR set to: 0
 12883                           ;ff.c: 851: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) brea
      +                          k;
 12884                           
 12885                           ; BSR set to: 0
 12886  00284E  C097  F08C         	movff	get_fat@fs,move_window@fs
 12887  002852  C098  F08D         	movff	get_fat@fs+1,move_window@fs+1
 12888  002856  EE20 F01E          	lfsr	2,30
 12889  00285A  5197               	movf	get_fat@fs& (0+255),w,b
 12890  00285C  26D9               	addwf	fsr2l,f,c
 12891  00285E  5198               	movf	(get_fat@fs+1)& (0+255),w,b
 12892  002860  22DA               	addwfc	fsr2h,f,c
 12893  002862  CFDE F09D          	movff	postinc2,??_get_fat
 12894  002866  CFDE F09E          	movff	postinc2,??_get_fat+1
 12895  00286A  CFDE F09F          	movff	postinc2,??_get_fat+2
 12896  00286E  CFDE F0A0          	movff	postinc2,??_get_fat+3
 12897  002872  C099  F0A1         	movff	get_fat@clst,??_get_fat+4
 12898  002876  C09A  F0A2         	movff	get_fat@clst+1,??_get_fat+5
 12899  00287A  C09B  F0A3         	movff	get_fat@clst+2,??_get_fat+6
 12900  00287E  C09C  F0A4         	movff	get_fat@clst+3,??_get_fat+7
 12901  002882  0E08               	movlw	8
 12902  002884  D005               	goto	u12620
 12903  002886                     u12625:
 12904  002886  90D8               	bcf	status,0,c
 12905  002888  33A4               	rrcf	(??_get_fat+7)& (0+255),f,b
 12906  00288A  33A3               	rrcf	(??_get_fat+6)& (0+255),f,b
 12907  00288C  33A2               	rrcf	(??_get_fat+5)& (0+255),f,b
 12908  00288E  33A1               	rrcf	(??_get_fat+4)& (0+255),f,b
 12909  002890                     u12620:
 12910  002890  2EE8               	decfsz	wreg,f,c
 12911  002892  D7F9               	goto	u12625
 12912  002894  519D               	movf	??_get_fat& (0+255),w,b
 12913  002896  25A1               	addwf	(??_get_fat+4)& (0+255),w,b
 12914  002898  6F8E               	movwf	move_window@sector& (0+255),b
 12915  00289A  519E               	movf	(??_get_fat+1)& (0+255),w,b
 12916  00289C  21A2               	addwfc	(??_get_fat+5)& (0+255),w,b
 12917  00289E  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 12918  0028A0  519F               	movf	(??_get_fat+2)& (0+255),w,b
 12919  0028A2  21A3               	addwfc	(??_get_fat+6)& (0+255),w,b
 12920  0028A4  6F90               	movwf	(move_window@sector+2)& (0+255),b
 12921  0028A6  51A0               	movf	(??_get_fat+3)& (0+255),w,b
 12922  0028A8  21A4               	addwfc	(??_get_fat+7)& (0+255),w,b
 12923  0028AA  6F91               	movwf	(move_window@sector+3)& (0+255),b
 12924  0028AC  ECCA  F024         	call	_move_window	;wreg free
 12925  0028B0  0900               	iorlw	0
 12926  0028B2  A4D8               	btfss	status,2,c
 12927  0028B4  D045               	goto	l923
 12928                           
 12929                           ;ff.c: 852: p = &fs->win[clst * 4 % ((UINT)512)];
 12930  0028B6  0EFF               	movlw	255
 12931  0028B8  0100               	movlb	0	; () banked
 12932  0028BA  6F9D               	movwf	??_get_fat& (0+255),b
 12933  0028BC  0E01               	movlw	1
 12934  0028BE  6F9E               	movwf	(??_get_fat+1)& (0+255),b
 12935  0028C0  C099  F09F         	movff	get_fat@clst,??_get_fat+2
 12936  0028C4  C09A  F0A0         	movff	get_fat@clst+1,??_get_fat+3
 12937  0028C8  90D8               	bcf	status,0,c
 12938  0028CA  379F               	rlcf	(??_get_fat+2)& (0+255),f,b
 12939  0028CC  37A0               	rlcf	(??_get_fat+3)& (0+255),f,b
 12940  0028CE  90D8               	bcf	status,0,c
 12941  0028D0  379F               	rlcf	(??_get_fat+2)& (0+255),f,b
 12942  0028D2  37A0               	rlcf	(??_get_fat+3)& (0+255),f,b
 12943  0028D4  519D               	movf	??_get_fat& (0+255),w,b
 12944  0028D6  179F               	andwf	(??_get_fat+2)& (0+255),f,b
 12945  0028D8  519E               	movf	(??_get_fat+1)& (0+255),w,b
 12946  0028DA  17A0               	andwf	(??_get_fat+3)& (0+255),f,b
 12947  0028DC  0E2E               	movlw	46
 12948  0028DE  279F               	addwf	(??_get_fat+2)& (0+255),f,b
 12949  0028E0  0E00               	movlw	0
 12950  0028E2  23A0               	addwfc	(??_get_fat+3)& (0+255),f,b
 12951  0028E4  519F               	movf	(??_get_fat+2)& (0+255),w,b
 12952  0028E6  2597               	addwf	get_fat@fs& (0+255),w,b
 12953  0028E8  6FA9               	movwf	get_fat@p& (0+255),b
 12954  0028EA  51A0               	movf	(??_get_fat+3)& (0+255),w,b
 12955  0028EC  2198               	addwfc	(get_fat@fs+1)& (0+255),w,b
 12956  0028EE  6FAA               	movwf	(get_fat@p+1)& (0+255),b
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;ff.c: 853: val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 12960  0028F0  C0A9  FFD9         	movff	get_fat@p,fsr2l
 12961  0028F4  C0AA  FFDA         	movff	get_fat@p+1,fsr2h
 12962  0028F8  0EFF               	movlw	255
 12963  0028FA  14DE               	andwf	postinc2,w,c
 12964  0028FC  6FAB               	movwf	get_fat@val& (0+255),b
 12965  0028FE  0EFF               	movlw	255
 12966  002900  14DE               	andwf	postinc2,w,c
 12967  002902  6FAC               	movwf	(get_fat@val+1)& (0+255),b
 12968  002904  0EFF               	movlw	255
 12969  002906  14DE               	andwf	postinc2,w,c
 12970  002908  6FAD               	movwf	(get_fat@val+2)& (0+255),b
 12971  00290A  0E0F               	movlw	15
 12972  00290C  14DE               	andwf	postinc2,w,c
 12973  00290E  D007               	goto	L12
 12974  002910                     l933:
 12975                           
 12976                           ; BSR set to: 0
 12977                           ;ff.c: 857: val = 1;
 12978                           
 12979                           ; BSR set to: 0
 12980  002910  0E01               	movlw	1
 12981  002912  6FAB               	movwf	get_fat@val& (0+255),b
 12982  002914  0E00               	movlw	0
 12983  002916  6FAC               	movwf	(get_fat@val+1)& (0+255),b
 12984  002918  0E00               	movlw	0
 12985  00291A  6FAD               	movwf	(get_fat@val+2)& (0+255),b
 12986  00291C  0E00               	movlw	0
 12987  00291E                     L12:
 12988  00291E  6FAE               	movwf	(get_fat@val+3)& (0+255),b
 12989                           
 12990                           ;ff.c: 858: }
 12991  002920  D00F               	goto	l923
 12992  002922                     l920:
 12993                           
 12994                           ; BSR set to: 0
 12995                           
 12996                           ; BSR set to: 0
 12997  002922  C097  FFD9         	movff	get_fat@fs,fsr2l
 12998  002926  C098  FFDA         	movff	get_fat@fs+1,fsr2h
 12999  00292A  50DF               	movf	indf2,w,c
 13000                           
 13001                           ; Switch size 1, requested type "space"
 13002                           ; Number of cases is 3, Range of values is 1 to 3
 13003                           ; switch strategies available:
 13004                           ; Name         Instructions Cycles
 13005                           ; simple_byte           10     6 (average)
 13006                           ;	Chosen strategy is simple_byte
 13007  00292C  0A01               	xorlw	1	; case 1
 13008  00292E  B4D8               	btfsc	status,2,c
 13009  002930  D66F               	goto	l921
 13010  002932  0A03               	xorlw	3	; case 2
 13011  002934  B4D8               	btfsc	status,2,c
 13012  002936  D730               	goto	l929
 13013  002938  0A01               	xorlw	1	; case 3
 13014  00293A  B4D8               	btfsc	status,2,c
 13015  00293C  D788               	goto	l931
 13016  00293E  D7E8               	goto	l933
 13017  002940                     l923:
 13018                           
 13019                           ;ff.c: 859: }
 13020                           ;ff.c: 861: return val;
 13021                           
 13022                           ; BSR set to: 0
 13023  002940  C0AB  F097         	movff	get_fat@val,?_get_fat
 13024  002944  C0AC  F098         	movff	get_fat@val+1,?_get_fat+1
 13025  002948  C0AD  F099         	movff	get_fat@val+2,?_get_fat+2
 13026  00294C  C0AE  F09A         	movff	get_fat@val+3,?_get_fat+3
 13027  002950  0012               	return		;funcret
 13028  002952                     __end_of_get_fat:
 13029                           	opt stack 0
 13030                           tblptru	equ	0xFF8
 13031                           tblptrh	equ	0xFF7
 13032                           tblptrl	equ	0xFF6
 13033                           tablat	equ	0xFF5
 13034                           prodh	equ	0xFF4
 13035                           prodl	equ	0xFF3
 13036                           intcon	equ	0xFF2
 13037                           intcon2	equ	0xFF1
 13038                           intcon3	equ	0xFF0
 13039                           indf0	equ	0xFEF
 13040                           postinc0	equ	0xFEE
 13041                           fsr0h	equ	0xFEA
 13042                           fsr0l	equ	0xFE9
 13043                           wreg	equ	0xFE8
 13044                           indf1	equ	0xFE7
 13045                           postinc1	equ	0xFE6
 13046                           postdec1	equ	0xFE5
 13047                           fsr1h	equ	0xFE2
 13048                           fsr1l	equ	0xFE1
 13049                           indf2	equ	0xFDF
 13050                           postinc2	equ	0xFDE
 13051                           postdec2	equ	0xFDD
 13052                           plusw2	equ	0xFDB
 13053                           fsr2h	equ	0xFDA
 13054                           fsr2l	equ	0xFD9
 13055                           status	equ	0xFD8
 13056                           
 13057 ;; *************** function _clust2sect *****************
 13058 ;; Defined at:
 13059 ;;		line 800 in file "bibliotecas/ff.c"
 13060 ;; Parameters:    Size  Location     Type
 13061 ;;  fs              2   37[COMRAM] PTR struct .
 13062 ;;		 -> NULL(0), fs(558), 
 13063 ;;  clst            4   39[COMRAM] unsigned long 
 13064 ;; Auto vars:     Size  Location     Type
 13065 ;;		None
 13066 ;; Return value:  Size  Location     Type
 13067 ;;                  4   37[COMRAM] unsigned long 
 13068 ;; Registers used:
 13069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13070 ;; Tracked objects:
 13071 ;;		On entry : 0/0
 13072 ;;		On exit  : 0/0
 13073 ;;		Unchanged: 0/0
 13074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13075 ;;      Params:         6       0       0       0       0       0       0       0       0
 13076 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13077 ;;      Temps:          0       5       0       0       0       0       0       0       0
 13078 ;;      Totals:         6       5       0       0       0       0       0       0       0
 13079 ;;Total ram usage:       11 bytes
 13080 ;; Hardware stack levels used:    1
 13081 ;; Hardware stack levels required when called:    3
 13082 ;; This function calls:
 13083 ;;		___lmul
 13084 ;; This function is called by:
 13085 ;;		_dir_sdi
 13086 ;;		_dir_next
 13087 ;;		_f_write
 13088 ;;		_f_lseek
 13089 ;;		_f_read
 13090 ;; This function uses a non-reentrant model
 13091 ;;
 13092                           
 13093                           	psect	text41
 13094  004606                     __ptext41:
 13095                           	opt stack 0
 13096  004606                     _clust2sect:
 13097                           	opt stack 22
 13098                           
 13099                           ;ff.c: 805: clst -= 2;
 13100                           
 13101                           ;incstack = 0
 13102  004606  0E02               	movlw	2
 13103  004608  5E28               	subwf	clust2sect@clst,f,c
 13104  00460A  0E00               	movlw	0
 13105  00460C  5A29               	subwfb	clust2sect@clst+1,f,c
 13106  00460E  5A2A               	subwfb	clust2sect@clst+2,f,c
 13107  004610  5A2B               	subwfb	clust2sect@clst+3,f,c
 13108                           
 13109                           ;ff.c: 806: if (clst >= fs->n_fatent - 2) return 0;
 13110  004612  EE20 F012          	lfsr	2,18
 13111  004616  5026               	movf	clust2sect@fs,w,c
 13112  004618  26D9               	addwf	fsr2l,f,c
 13113  00461A  5027               	movf	clust2sect@fs+1,w,c
 13114  00461C  22DA               	addwfc	fsr2h,f,c
 13115  00461E  0EFE               	movlw	254
 13116  004620  24DE               	addwf	postinc2,w,c
 13117  004622  0100               	movlb	0	; () banked
 13118  004624  6F60               	movwf	??_clust2sect& (0+255),b
 13119  004626  0EFF               	movlw	255
 13120  004628  20DE               	addwfc	postinc2,w,c
 13121  00462A  6F61               	movwf	(??_clust2sect+1)& (0+255),b
 13122  00462C  0EFF               	movlw	255
 13123  00462E  20DE               	addwfc	postinc2,w,c
 13124  004630  6F62               	movwf	(??_clust2sect+2)& (0+255),b
 13125  004632  0EFF               	movlw	255
 13126  004634  20DE               	addwfc	postinc2,w,c
 13127  004636  6F63               	movwf	(??_clust2sect+3)& (0+255),b
 13128  004638  5160               	movf	??_clust2sect& (0+255),w,b
 13129  00463A  5C28               	subwf	clust2sect@clst,w,c
 13130  00463C  5161               	movf	(??_clust2sect+1)& (0+255),w,b
 13131  00463E  5829               	subwfb	clust2sect@clst+1,w,c
 13132  004640  5162               	movf	(??_clust2sect+2)& (0+255),w,b
 13133  004642  582A               	subwfb	clust2sect@clst+2,w,c
 13134  004644  5163               	movf	(??_clust2sect+3)& (0+255),w,b
 13135  004646  582B               	subwfb	clust2sect@clst+3,w,c
 13136  004648  A0D8               	btfss	status,0,c
 13137  00464A  D009               	goto	l912
 13138                           
 13139                           ; BSR set to: 0
 13140  00464C  0E00               	movlw	0
 13141  00464E  6E26               	movwf	?_clust2sect,c
 13142  004650  0E00               	movlw	0
 13143  004652  6E27               	movwf	?_clust2sect+1,c
 13144  004654  0E00               	movlw	0
 13145  004656  6E28               	movwf	?_clust2sect+2,c
 13146  004658  0E00               	movlw	0
 13147  00465A  6E29               	movwf	?_clust2sect+3,c
 13148                           
 13149                           ; BSR set to: 0
 13150  00465C  0012               	return	
 13151  00465E                     l912:
 13152                           
 13153                           ; BSR set to: 0
 13154                           ;ff.c: 807: return clst * fs->csize + fs->database;
 13155                           
 13156                           ; BSR set to: 0
 13157  00465E  EE20 F026          	lfsr	2,38
 13158  004662  5026               	movf	clust2sect@fs,w,c
 13159  004664  26D9               	addwf	fsr2l,f,c
 13160  004666  5027               	movf	clust2sect@fs+1,w,c
 13161  004668  22DA               	addwfc	fsr2h,f,c
 13162  00466A  CFDE F060          	movff	postinc2,??_clust2sect
 13163  00466E  CFDE F061          	movff	postinc2,??_clust2sect+1
 13164  004672  CFDE F062          	movff	postinc2,??_clust2sect+2
 13165  004676  CFDE F063          	movff	postinc2,??_clust2sect+3
 13166  00467A  EE20 F002          	lfsr	2,2
 13167  00467E  5026               	movf	clust2sect@fs,w,c
 13168  004680  26D9               	addwf	fsr2l,f,c
 13169  004682  5027               	movf	clust2sect@fs+1,w,c
 13170  004684  22DA               	addwfc	fsr2h,f,c
 13171  004686  50DF               	movf	indf2,w,c
 13172  004688  6F64               	movwf	(??_clust2sect+4)& (0+255),b
 13173  00468A  5164               	movf	(??_clust2sect+4)& (0+255),w,b
 13174  00468C  6E1A               	movwf	___lmul@multiplier,c
 13175  00468E  6A1B               	clrf	___lmul@multiplier+1,c
 13176  004690  6A1C               	clrf	___lmul@multiplier+2,c
 13177  004692  6A1D               	clrf	___lmul@multiplier+3,c
 13178  004694  C028  F01E         	movff	clust2sect@clst,___lmul@multiplicand
 13179  004698  C029  F01F         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 13180  00469C  C02A  F020         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 13181  0046A0  C02B  F021         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 13182  0046A4  EC03  F029         	call	___lmul	;wreg free
 13183  0046A8  0100               	movlb	0	; () banked
 13184  0046AA  5160               	movf	??_clust2sect& (0+255),w,b
 13185  0046AC  241A               	addwf	?___lmul,w,c
 13186  0046AE  6E26               	movwf	?_clust2sect,c
 13187  0046B0  5161               	movf	(??_clust2sect+1)& (0+255),w,b
 13188  0046B2  201B               	addwfc	?___lmul+1,w,c
 13189  0046B4  6E27               	movwf	?_clust2sect+1,c
 13190  0046B6  5162               	movf	(??_clust2sect+2)& (0+255),w,b
 13191  0046B8  201C               	addwfc	?___lmul+2,w,c
 13192  0046BA  6E28               	movwf	?_clust2sect+2,c
 13193  0046BC  5163               	movf	(??_clust2sect+3)& (0+255),w,b
 13194  0046BE  201D               	addwfc	?___lmul+3,w,c
 13195  0046C0  6E29               	movwf	?_clust2sect+3,c
 13196  0046C2  0012               	return	
 13197  0046C4                     __end_of_clust2sect:
 13198                           	opt stack 0
 13199                           tblptru	equ	0xFF8
 13200                           tblptrh	equ	0xFF7
 13201                           tblptrl	equ	0xFF6
 13202                           tablat	equ	0xFF5
 13203                           prodh	equ	0xFF4
 13204                           prodl	equ	0xFF3
 13205                           intcon	equ	0xFF2
 13206                           intcon2	equ	0xFF1
 13207                           intcon3	equ	0xFF0
 13208                           indf0	equ	0xFEF
 13209                           postinc0	equ	0xFEE
 13210                           fsr0h	equ	0xFEA
 13211                           fsr0l	equ	0xFE9
 13212                           wreg	equ	0xFE8
 13213                           indf1	equ	0xFE7
 13214                           postinc1	equ	0xFE6
 13215                           postdec1	equ	0xFE5
 13216                           fsr1h	equ	0xFE2
 13217                           fsr1l	equ	0xFE1
 13218                           indf2	equ	0xFDF
 13219                           postinc2	equ	0xFDE
 13220                           postdec2	equ	0xFDD
 13221                           plusw2	equ	0xFDB
 13222                           fsr2h	equ	0xFDA
 13223                           fsr2l	equ	0xFD9
 13224                           status	equ	0xFD8
 13225                           
 13226 ;; *************** function _f_mount *****************
 13227 ;; Defined at:
 13228 ;;		line 2402 in file "bibliotecas/ff.c"
 13229 ;; Parameters:    Size  Location     Type
 13230 ;;  fs              2   78[BANK0 ] PTR struct .
 13231 ;;		 -> NULL(0), fs(558), 
 13232 ;;  path            2   80[BANK0 ] PTR const unsigned char 
 13233 ;;		 -> filename(15), STR_10(1), 
 13234 ;;  opt             1   82[BANK0 ] unsigned char 
 13235 ;; Auto vars:     Size  Location     Type
 13236 ;;  vol             2   88[BANK0 ] int 
 13237 ;;  rp              2   86[BANK0 ] PTR const unsigned char 
 13238 ;;		 -> filename(15), STR_10(1), 
 13239 ;;  cfs             2   84[BANK0 ] PTR struct .
 13240 ;;		 -> NULL(0), fs(558), 
 13241 ;;  res             1   83[BANK0 ] enum E75
 13242 ;; Return value:  Size  Location     Type
 13243 ;;                  1    wreg      enum E3966
 13244 ;; Registers used:
 13245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13246 ;; Tracked objects:
 13247 ;;		On entry : 0/0
 13248 ;;		On exit  : 0/0
 13249 ;;		Unchanged: 0/0
 13250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13251 ;;      Params:         0       5       0       0       0       0       0       0       0
 13252 ;;      Locals:         0       7       0       0       0       0       0       0       0
 13253 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13254 ;;      Totals:         0      12       0       0       0       0       0       0       0
 13255 ;;Total ram usage:       12 bytes
 13256 ;; Hardware stack levels used:    1
 13257 ;; Hardware stack levels required when called:   11
 13258 ;; This function calls:
 13259 ;;		_find_volume
 13260 ;;		_get_ldnumber
 13261 ;; This function is called by:
 13262 ;;		_SDCard
 13263 ;; This function uses a non-reentrant model
 13264 ;;
 13265                           
 13266                           	psect	text42
 13267  00477E                     __ptext42:
 13268                           	opt stack 0
 13269  00477E                     _f_mount:
 13270                           	opt stack 18
 13271                           
 13272                           ;ff.c: 2408: FATFS *cfs;
 13273                           ;ff.c: 2409: int vol;
 13274                           ;ff.c: 2410: FRESULT res;
 13275                           ;ff.c: 2411: const TCHAR *rp = path;
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;incstack = 0
 13279  00477E  C0B0  F0B6         	movff	f_mount@path,f_mount@rp
 13280  004782  C0B1  F0B7         	movff	f_mount@path+1,f_mount@rp+1
 13281                           
 13282                           ;ff.c: 2414: vol = get_ldnumber(&rp);
 13283  004786  0EB6               	movlw	low f_mount@rp
 13284  004788  6E1A               	movwf	get_ldnumber@path,c
 13285  00478A  0E00               	movlw	high f_mount@rp
 13286  00478C  6E1B               	movwf	get_ldnumber@path+1,c
 13287  00478E  ECD3  F01D         	call	_get_ldnumber	;wreg free
 13288  004792  C01A  F0B8         	movff	?_get_ldnumber,f_mount@vol
 13289  004796  C01B  F0B9         	movff	?_get_ldnumber+1,f_mount@vol+1
 13290                           
 13291                           ;ff.c: 2415: if (vol < 0) return FR_INVALID_DRIVE;
 13292  00479A  0100               	movlb	0	; () banked
 13293  00479C  AFB9               	btfss	(f_mount@vol+1)& (0+255),7,b
 13294  00479E  D002               	goto	l1228
 13295                           
 13296                           ; BSR set to: 0
 13297  0047A0  0E0B               	movlw	11
 13298                           
 13299                           ; BSR set to: 0
 13300  0047A2  0012               	return	
 13301  0047A4                     l1228:
 13302                           
 13303                           ; BSR set to: 0
 13304                           ;ff.c: 2416: cfs = FatFs[vol];
 13305                           
 13306                           ; BSR set to: 0
 13307  0047A4  90D8               	bcf	status,0,c
 13308  0047A6  35B8               	rlcf	f_mount@vol& (0+255),w,b
 13309  0047A8  6ED9               	movwf	fsr2l,c
 13310  0047AA  35B9               	rlcf	(f_mount@vol+1)& (0+255),w,b
 13311  0047AC  6EDA               	movwf	fsr2h,c
 13312  0047AE  0EF5               	movlw	low _FatFs
 13313  0047B0  26D9               	addwf	fsr2l,f,c
 13314  0047B2  0E00               	movlw	high _FatFs
 13315  0047B4  22DA               	addwfc	fsr2h,f,c
 13316  0047B6  CFDE F0B4          	movff	postinc2,f_mount@cfs
 13317  0047BA  CFDD F0B5          	movff	postdec2,f_mount@cfs+1
 13318                           
 13319                           ; BSR set to: 0
 13320                           ;ff.c: 2418: if (cfs) {
 13321  0047BE  51B4               	movf	f_mount@cfs& (0+255),w,b
 13322  0047C0  11B5               	iorwf	(f_mount@cfs+1)& (0+255),w,b
 13323  0047C2  B4D8               	btfsc	status,2,c
 13324  0047C4  D006               	goto	l1230
 13325                           
 13326                           ; BSR set to: 0
 13327                           ;ff.c: 2425: cfs->fs_type = 0;
 13328  0047C6  C0B4  FFD9         	movff	f_mount@cfs,fsr2l
 13329  0047CA  C0B5  FFDA         	movff	f_mount@cfs+1,fsr2h
 13330  0047CE  0E00               	movlw	0
 13331  0047D0  6EDF               	movwf	indf2,c
 13332  0047D2                     l1230:
 13333                           
 13334                           ; BSR set to: 0
 13335                           ;ff.c: 2426: }
 13336                           ;ff.c: 2428: if (fs) {
 13337                           
 13338                           ; BSR set to: 0
 13339  0047D2  51AE               	movf	f_mount@fs& (0+255),w,b
 13340  0047D4  11AF               	iorwf	(f_mount@fs+1)& (0+255),w,b
 13341  0047D6  B4D8               	btfsc	status,2,c
 13342  0047D8  D006               	goto	l1231
 13343                           
 13344                           ; BSR set to: 0
 13345                           ;ff.c: 2429: fs->fs_type = 0;
 13346  0047DA  C0AE  FFD9         	movff	f_mount@fs,fsr2l
 13347  0047DE  C0AF  FFDA         	movff	f_mount@fs+1,fsr2h
 13348  0047E2  0E00               	movlw	0
 13349  0047E4  6EDF               	movwf	indf2,c
 13350  0047E6                     l1231:
 13351                           
 13352                           ; BSR set to: 0
 13353                           ;ff.c: 2433: }
 13354                           ;ff.c: 2434: FatFs[vol] = fs;
 13355                           
 13356                           ; BSR set to: 0
 13357  0047E6  90D8               	bcf	status,0,c
 13358  0047E8  35B8               	rlcf	f_mount@vol& (0+255),w,b
 13359  0047EA  6ED9               	movwf	fsr2l,c
 13360  0047EC  35B9               	rlcf	(f_mount@vol+1)& (0+255),w,b
 13361  0047EE  6EDA               	movwf	fsr2h,c
 13362  0047F0  0EF5               	movlw	low _FatFs
 13363  0047F2  26D9               	addwf	fsr2l,f,c
 13364  0047F4  0E00               	movlw	high _FatFs
 13365  0047F6  22DA               	addwfc	fsr2h,f,c
 13366  0047F8  C0AE  FFDE         	movff	f_mount@fs,postinc2
 13367  0047FC  C0AF  FFDD         	movff	f_mount@fs+1,postdec2
 13368                           
 13369                           ; BSR set to: 0
 13370                           ;ff.c: 2436: if (!fs || opt != 1) return FR_OK;
 13371  004800  51AE               	movf	f_mount@fs& (0+255),w,b
 13372  004802  11AF               	iorwf	(f_mount@fs+1)& (0+255),w,b
 13373  004804  B4D8               	btfsc	status,2,c
 13374  004806  D003               	goto	u15730
 13375                           
 13376                           ; BSR set to: 0
 13377  004808  05B2               	decf	f_mount@opt& (0+255),w,b
 13378  00480A  B4D8               	btfsc	status,2,c
 13379  00480C  D002               	goto	l1232
 13380  00480E                     u15730:
 13381                           
 13382                           ; BSR set to: 0
 13383                           
 13384                           ; BSR set to: 0
 13385  00480E  0E00               	movlw	0
 13386                           
 13387                           ; BSR set to: 0
 13388  004810  0012               	return	
 13389  004812                     l1232:
 13390                           
 13391                           ; BSR set to: 0
 13392                           ;ff.c: 2438: res = find_volume(&fs, &path, 0);
 13393                           
 13394                           ; BSR set to: 0
 13395  004812  0EAE               	movlw	low f_mount@fs
 13396  004814  6FA1               	movwf	find_volume@rfs& (0+255),b
 13397  004816  0E00               	movlw	high f_mount@fs
 13398  004818  6FA2               	movwf	(find_volume@rfs+1)& (0+255),b
 13399  00481A  0EB0               	movlw	low f_mount@path
 13400  00481C  6FA3               	movwf	find_volume@path& (0+255),b
 13401  00481E  0E00               	movlw	high f_mount@path
 13402  004820  6FA4               	movwf	(find_volume@path+1)& (0+255),b
 13403  004822  0E00               	movlw	0
 13404  004824  6FA5               	movwf	find_volume@wmode& (0+255),b
 13405  004826  EC09  F000         	call	_find_volume	;wreg free
 13406  00482A  0100               	movlb	0	; () banked
 13407  00482C  6FB3               	movwf	f_mount@res& (0+255),b
 13408                           
 13409                           ; BSR set to: 0
 13410                           ;ff.c: 2439: return res;
 13411  00482E  51B3               	movf	f_mount@res& (0+255),w,b
 13412  004830  0012               	return	
 13413  004832                     __end_of_f_mount:
 13414                           	opt stack 0
 13415                           tblptru	equ	0xFF8
 13416                           tblptrh	equ	0xFF7
 13417                           tblptrl	equ	0xFF6
 13418                           tablat	equ	0xFF5
 13419                           prodh	equ	0xFF4
 13420                           prodl	equ	0xFF3
 13421                           intcon	equ	0xFF2
 13422                           intcon2	equ	0xFF1
 13423                           intcon3	equ	0xFF0
 13424                           indf0	equ	0xFEF
 13425                           postinc0	equ	0xFEE
 13426                           fsr0h	equ	0xFEA
 13427                           fsr0l	equ	0xFE9
 13428                           wreg	equ	0xFE8
 13429                           indf1	equ	0xFE7
 13430                           postinc1	equ	0xFE6
 13431                           postdec1	equ	0xFE5
 13432                           fsr1h	equ	0xFE2
 13433                           fsr1l	equ	0xFE1
 13434                           indf2	equ	0xFDF
 13435                           postinc2	equ	0xFDE
 13436                           postdec2	equ	0xFDD
 13437                           plusw2	equ	0xFDB
 13438                           fsr2h	equ	0xFDA
 13439                           fsr2l	equ	0xFD9
 13440                           status	equ	0xFD8
 13441                           
 13442 ;; *************** function _find_volume *****************
 13443 ;; Defined at:
 13444 ;;		line 2203 in file "bibliotecas/ff.c"
 13445 ;; Parameters:    Size  Location     Type
 13446 ;;  rfs             2   65[BANK0 ] PTR PTR struct .
 13447 ;;		 -> f_open@dj(22), f_mount@fs(2), 
 13448 ;;  path            2   67[BANK0 ] PTR PTR const unsigned c
 13449 ;;		 -> f_open@path(2), f_mount@path(2), 
 13450 ;;  wmode           1   69[BANK0 ] unsigned char 
 13451 ;; Auto vars:     Size  Location     Type
 13452 ;;  br             16    0[BANK2 ] unsigned long [4]
 13453 ;;  bsect           4   49[BANK2 ] unsigned long 
 13454 ;;  fasize          4   45[BANK2 ] unsigned long 
 13455 ;;  nclst           4   40[BANK2 ] unsigned long 
 13456 ;;  tsect           4   36[BANK2 ] unsigned long 
 13457 ;;  sysect          4   28[BANK2 ] unsigned long 
 13458 ;;  szbfat          4   22[BANK2 ] unsigned long 
 13459 ;;  fs              2   56[BANK2 ] PTR struct .
 13460 ;;		 -> NULL(0), fs(558), 
 13461 ;;  i               2   53[BANK2 ] unsigned int 
 13462 ;;  nrsv            2   34[BANK2 ] unsigned short 
 13463 ;;  vol             2   32[BANK2 ] int 
 13464 ;;  pt              2   26[BANK2 ] PTR unsigned char 
 13465 ;;		 -> fs.win(512), NULL(0), fs(558), 
 13466 ;;  fmt             1   55[BANK2 ] unsigned char 
 13467 ;;  stat            1   44[BANK2 ] unsigned char 
 13468 ;; Return value:  Size  Location     Type
 13469 ;;                  1    wreg      enum E75
 13470 ;; Registers used:
 13471 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13472 ;; Tracked objects:
 13473 ;;		On entry : 0/0
 13474 ;;		On exit  : 0/0
 13475 ;;		Unchanged: 0/0
 13476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13477 ;;      Params:         0       5       0       0       0       0       0       0       0
 13478 ;;      Locals:         0       0       0      58       0       0       0       0       0
 13479 ;;      Temps:          0       8       0       0       0       0       0       0       0
 13480 ;;      Totals:         0      13       0      58       0       0       0       0       0
 13481 ;;Total ram usage:       71 bytes
 13482 ;; Hardware stack levels used:    1
 13483 ;; Hardware stack levels required when called:   10
 13484 ;; This function calls:
 13485 ;;		___lldiv
 13486 ;;		___lmul
 13487 ;;		_check_fs
 13488 ;;		_disk_initialize
 13489 ;;		_disk_status
 13490 ;;		_get_ldnumber
 13491 ;;		_move_window
 13492 ;; This function is called by:
 13493 ;;		_f_mount
 13494 ;;		_f_open
 13495 ;; This function uses a non-reentrant model
 13496 ;;
 13497                           
 13498                           	psect	text43
 13499  000012                     __ptext43:
 13500                           	opt stack 0
 13501  000012                     _find_volume:
 13502                           	opt stack 17
 13503                           
 13504                           ;ff.c: 2209: BYTE fmt, *pt;
 13505                           ;ff.c: 2210: int vol;
 13506                           ;ff.c: 2211: DSTATUS stat;
 13507                           ;ff.c: 2212: DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
 13508                           ;ff.c: 2213: WORD nrsv;
 13509                           ;ff.c: 2214: FATFS *fs;
 13510                           ;ff.c: 2215: UINT i;
 13511                           ;ff.c: 2219: *rfs = 0;
 13512                           
 13513                           ; BSR set to: 0
 13514                           ;incstack = 0
 13515  000012  C0A1  FFD9         	movff	find_volume@rfs,fsr2l
 13516  000016  C0A2  FFDA         	movff	find_volume@rfs+1,fsr2h
 13517  00001A  0E00               	movlw	0
 13518  00001C  6EDE               	movwf	postinc2,c
 13519  00001E  0E00               	movlw	0
 13520  000020  6EDD               	movwf	postdec2,c
 13521                           
 13522                           ;ff.c: 2220: vol = get_ldnumber(path);
 13523  000022  C0A3  F01A         	movff	find_volume@path,get_ldnumber@path
 13524  000026  C0A4  F01B         	movff	find_volume@path+1,get_ldnumber@path+1
 13525  00002A  ECD3  F01D         	call	_get_ldnumber	;wreg free
 13526  00002E  C01A  F220         	movff	?_get_ldnumber,find_volume@vol
 13527  000032  C01B  F221         	movff	?_get_ldnumber+1,find_volume@vol+1
 13528                           
 13529                           ;ff.c: 2221: if (vol < 0) return FR_INVALID_DRIVE;
 13530  000036  0102               	movlb	2	; () banked
 13531  000038  AF21               	btfss	(find_volume@vol+1)& (0+255),7,b
 13532  00003A  D002               	goto	l1168
 13533                           
 13534                           ; BSR set to: 2
 13535  00003C  0E0B               	movlw	11
 13536                           
 13537                           ; BSR set to: 2
 13538  00003E  0012               	return	
 13539  000040                     l1168:
 13540                           
 13541                           ; BSR set to: 2
 13542                           ;ff.c: 2224: fs = FatFs[vol];
 13543                           
 13544                           ; BSR set to: 2
 13545  000040  90D8               	bcf	status,0,c
 13546  000042  3520               	rlcf	find_volume@vol& (0+255),w,b
 13547  000044  6ED9               	movwf	fsr2l,c
 13548  000046  3521               	rlcf	(find_volume@vol+1)& (0+255),w,b
 13549  000048  6EDA               	movwf	fsr2h,c
 13550  00004A  0EF5               	movlw	low _FatFs
 13551  00004C  26D9               	addwf	fsr2l,f,c
 13552  00004E  0E00               	movlw	high _FatFs
 13553  000050  22DA               	addwfc	fsr2h,f,c
 13554  000052  CFDE F238          	movff	postinc2,find_volume@fs
 13555  000056  CFDD F239          	movff	postdec2,find_volume@fs+1
 13556                           
 13557                           ; BSR set to: 2
 13558                           ;ff.c: 2225: if (!fs) return FR_NOT_ENABLED;
 13559  00005A  5138               	movf	find_volume@fs& (0+255),w,b
 13560  00005C  1139               	iorwf	(find_volume@fs+1)& (0+255),w,b
 13561  00005E  A4D8               	btfss	status,2,c
 13562  000060  D002               	goto	l1170
 13563                           
 13564                           ; BSR set to: 2
 13565  000062  0E0C               	movlw	12
 13566                           
 13567                           ; BSR set to: 2
 13568  000064  0012               	return	
 13569  000066                     l1170:
 13570                           
 13571                           ; BSR set to: 2
 13572                           ;ff.c: 2227: ;
 13573                           ;ff.c: 2228: *rfs = fs;
 13574                           
 13575                           ; BSR set to: 2
 13576  000066  C0A1  FFD9         	movff	find_volume@rfs,fsr2l
 13577  00006A  C0A2  FFDA         	movff	find_volume@rfs+1,fsr2h
 13578  00006E  C238  FFDE         	movff	find_volume@fs,postinc2
 13579  000072  C239  FFDD         	movff	find_volume@fs+1,postdec2
 13580                           
 13581                           ; BSR set to: 2
 13582                           ;ff.c: 2230: if (fs->fs_type) {
 13583  000076  C238  FFD9         	movff	find_volume@fs,fsr2l
 13584  00007A  C239  FFDA         	movff	find_volume@fs+1,fsr2h
 13585  00007E  50DF               	movf	indf2,w,c
 13586  000080  B4D8               	btfsc	status,2,c
 13587  000082  D018               	goto	l1172
 13588                           
 13589                           ; BSR set to: 2
 13590                           ;ff.c: 2231: stat = disk_status(fs->drv);
 13591  000084  EE20 F001          	lfsr	2,1
 13592  000088  5138               	movf	find_volume@fs& (0+255),w,b
 13593  00008A  26D9               	addwf	fsr2l,f,c
 13594  00008C  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 13595  00008E  22DA               	addwfc	fsr2h,f,c
 13596  000090  50DF               	movf	indf2,w,c
 13597  000092  EC25  F02A         	call	_disk_status
 13598  000096  0102               	movlb	2	; () banked
 13599  000098  6F2C               	movwf	find_volume@stat& (0+255),b
 13600                           
 13601                           ; BSR set to: 2
 13602                           ;ff.c: 2233: if (!0 && wmode && (stat & 0x04))
 13603  00009A  B12C               	btfsc	find_volume@stat& (0+255),0,b
 13604  00009C  D00B               	goto	l1172
 13605                           
 13606                           ; BSR set to: 2
 13607  00009E  0100               	movlb	0	; () banked
 13608  0000A0  51A5               	movf	find_volume@wmode& (0+255),w,b
 13609  0000A2  B4D8               	btfsc	status,2,c
 13610  0000A4  D005               	goto	l1173
 13611                           
 13612                           ; BSR set to: 0
 13613  0000A6  0102               	movlb	2	; () banked
 13614  0000A8  A52C               	btfss	find_volume@stat& (0+255),2,b
 13615  0000AA  D002               	goto	l1173
 13616                           
 13617                           ; BSR set to: 2
 13618                           ;ff.c: 2234: return FR_WRITE_PROTECTED;
 13619  0000AC  0E0A               	movlw	10
 13620                           
 13621                           ; BSR set to: 2
 13622  0000AE  0012               	return	
 13623  0000B0                     l1173:
 13624                           
 13625                           ;ff.c: 2235: return FR_OK;
 13626                           
 13627                           ; BSR set to: 2
 13628  0000B0  0E00               	movlw	0
 13629  0000B2  0012               	return	
 13630  0000B4                     l1172:
 13631                           
 13632                           ;ff.c: 2236: }
 13633                           ;ff.c: 2237: }
 13634                           ;ff.c: 2242: fs->fs_type = 0;
 13635  0000B4  C238  FFD9         	movff	find_volume@fs,fsr2l
 13636  0000B8  C239  FFDA         	movff	find_volume@fs+1,fsr2h
 13637  0000BC  0E00               	movlw	0
 13638  0000BE  6EDF               	movwf	indf2,c
 13639                           
 13640                           ;ff.c: 2243: fs->drv = (BYTE)(vol);
 13641  0000C0  0102               	movlb	2	; () banked
 13642  0000C2  EE20 F001          	lfsr	2,1
 13643  0000C6  5138               	movf	find_volume@fs& (0+255),w,b
 13644  0000C8  26D9               	addwf	fsr2l,f,c
 13645  0000CA  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 13646  0000CC  22DA               	addwfc	fsr2h,f,c
 13647  0000CE  C220  FFDF         	movff	find_volume@vol,indf2
 13648                           
 13649                           ; BSR set to: 2
 13650                           ;ff.c: 2244: stat = disk_initialize(fs->drv);
 13651  0000D2  EE20 F001          	lfsr	2,1
 13652  0000D6  5138               	movf	find_volume@fs& (0+255),w,b
 13653  0000D8  26D9               	addwf	fsr2l,f,c
 13654  0000DA  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 13655  0000DC  22DA               	addwfc	fsr2h,f,c
 13656  0000DE  50DF               	movf	indf2,w,c
 13657  0000E0  EC63  F02A         	call	_disk_initialize
 13658  0000E4  0102               	movlb	2	; () banked
 13659  0000E6  6F2C               	movwf	find_volume@stat& (0+255),b
 13660                           
 13661                           ; BSR set to: 2
 13662                           ;ff.c: 2245: if (stat & 0x01)
 13663  0000E8  A12C               	btfss	find_volume@stat& (0+255),0,b
 13664  0000EA  D002               	goto	l1174
 13665                           
 13666                           ; BSR set to: 2
 13667                           ;ff.c: 2246: return FR_NOT_READY;
 13668  0000EC  0E03               	movlw	3
 13669                           
 13670                           ; BSR set to: 2
 13671  0000EE  0012               	return	
 13672  0000F0                     l1174:
 13673                           
 13674                           ; BSR set to: 2
 13675                           
 13676                           ; BSR set to: 2
 13677  0000F0  0100               	movlb	0	; () banked
 13678  0000F2  51A5               	movf	find_volume@wmode& (0+255),w,b
 13679  0000F4  B4D8               	btfsc	status,2,c
 13680  0000F6  D005               	goto	l1175
 13681                           
 13682                           ; BSR set to: 0
 13683  0000F8  0102               	movlb	2	; () banked
 13684  0000FA  A52C               	btfss	find_volume@stat& (0+255),2,b
 13685  0000FC  D002               	goto	l1175
 13686                           
 13687                           ; BSR set to: 2
 13688                           ;ff.c: 2248: return FR_WRITE_PROTECTED;
 13689  0000FE  0E0A               	movlw	10
 13690                           
 13691                           ; BSR set to: 2
 13692  000100  0012               	return	
 13693  000102                     l1175:
 13694                           
 13695                           ;ff.c: 2254: bsect = 0;
 13696                           
 13697                           ; BSR set to: 2
 13698  000102  0E00               	movlw	0
 13699  000104  0102               	movlb	2	; () banked
 13700  000106  6F31               	movwf	find_volume@bsect& (0+255),b
 13701  000108  0E00               	movlw	0
 13702  00010A  6F32               	movwf	(find_volume@bsect+1)& (0+255),b
 13703  00010C  0E00               	movlw	0
 13704  00010E  6F33               	movwf	(find_volume@bsect+2)& (0+255),b
 13705  000110  0E00               	movlw	0
 13706  000112  6F34               	movwf	(find_volume@bsect+3)& (0+255),b
 13707                           
 13708                           ; BSR set to: 2
 13709                           ;ff.c: 2255: fmt = check_fs(fs, bsect);
 13710  000114  C238  F097         	movff	find_volume@fs,check_fs@fs
 13711  000118  C239  F098         	movff	find_volume@fs+1,check_fs@fs+1
 13712  00011C  C231  F099         	movff	find_volume@bsect,check_fs@sect
 13713  000120  C232  F09A         	movff	find_volume@bsect+1,check_fs@sect+1
 13714  000124  C233  F09B         	movff	find_volume@bsect+2,check_fs@sect+2
 13715  000128  C234  F09C         	movff	find_volume@bsect+3,check_fs@sect+3
 13716  00012C  ECCA  F020         	call	_check_fs	;wreg free
 13717  000130  0102               	movlb	2	; () banked
 13718  000132  6F37               	movwf	find_volume@fmt& (0+255),b
 13719                           
 13720                           ; BSR set to: 2
 13721                           ;ff.c: 2256: if (fmt == 1 || (!fmt && (0))) {
 13722  000134  0537               	decf	find_volume@fmt& (0+255),w,b
 13723  000136  A4D8               	btfss	status,2,c
 13724  000138  D0BB               	goto	u14790
 13725                           
 13726                           ; BSR set to: 2
 13727                           ;ff.c: 2257: for (i = 0; i < 4; i++) {
 13728                           
 13729                           ; BSR set to: 2
 13730                           
 13731                           ; BSR set to: 2
 13732                           
 13733                           ; BSR set to: 2
 13734  00013A  0E00               	movlw	0
 13735  00013C  6F36               	movwf	(find_volume@i+1)& (0+255),b
 13736  00013E  0E00               	movlw	0
 13737  000140  6F35               	movwf	find_volume@i& (0+255),b
 13738  000142                     l11453:
 13739                           
 13740                           ; BSR set to: 2
 13741  000142  5136               	movf	(find_volume@i+1)& (0+255),w,b
 13742  000144  E162               	bnz	l11469
 13743  000146  0E04               	movlw	4
 13744  000148  5D35               	subwf	find_volume@i& (0+255),w,b
 13745  00014A  B0D8               	btfsc	status,0,c
 13746  00014C  D05E               	goto	u14750
 13747                           
 13748                           ; BSR set to: 2
 13749                           ;ff.c: 2258: pt = fs->win + 446 + i * 16;
 13750                           
 13751                           ; BSR set to: 2
 13752                           
 13753                           ; BSR set to: 2
 13754  00014E  0EEC               	movlw	236
 13755  000150  0100               	movlb	0	; () banked
 13756  000152  6FA6               	movwf	??_find_volume& (0+255),b
 13757  000154  0E01               	movlw	1
 13758  000156  6FA7               	movwf	(??_find_volume+1)& (0+255),b
 13759  000158  C235  F0A8         	movff	find_volume@i,??_find_volume+2
 13760  00015C  C236  F0A9         	movff	find_volume@i+1,??_find_volume+3
 13761  000160  3BA8               	swapf	(??_find_volume+2)& (0+255),f,b
 13762  000162  3BA9               	swapf	(??_find_volume+3)& (0+255),f,b
 13763  000164  0EF0               	movlw	240
 13764  000166  17A9               	andwf	(??_find_volume+3)& (0+255),f,b
 13765  000168  51A8               	movf	(??_find_volume+2)& (0+255),w,b
 13766  00016A  0B0F               	andlw	15
 13767  00016C  13A9               	iorwf	(??_find_volume+3)& (0+255),f,b
 13768  00016E  0EF0               	movlw	240
 13769  000170  17A8               	andwf	(??_find_volume+2)& (0+255),f,b
 13770  000172  51A6               	movf	??_find_volume& (0+255),w,b
 13771  000174  27A8               	addwf	(??_find_volume+2)& (0+255),f,b
 13772  000176  51A7               	movf	(??_find_volume+1)& (0+255),w,b
 13773  000178  23A9               	addwfc	(??_find_volume+3)& (0+255),f,b
 13774  00017A  51A8               	movf	(??_find_volume+2)& (0+255),w,b
 13775  00017C  0102               	movlb	2	; () banked
 13776  00017E  2538               	addwf	find_volume@fs& (0+255),w,b
 13777  000180  6F1A               	movwf	find_volume@pt& (0+255),b
 13778  000182  0100               	movlb	0	; () banked
 13779  000184  51A9               	movf	(??_find_volume+3)& (0+255),w,b
 13780  000186  0102               	movlb	2	; () banked
 13781  000188  2139               	addwfc	(find_volume@fs+1)& (0+255),w,b
 13782  00018A  6F1B               	movwf	(find_volume@pt+1)& (0+255),b
 13783                           
 13784                           ; BSR set to: 2
 13785                           ;ff.c: 2259: br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
 13786  00018C  EE20 F004          	lfsr	2,4
 13787  000190  511A               	movf	find_volume@pt& (0+255),w,b
 13788  000192  26D9               	addwf	fsr2l,f,c
 13789  000194  511B               	movf	(find_volume@pt+1)& (0+255),w,b
 13790  000196  22DA               	addwfc	fsr2h,f,c
 13791  000198  50DF               	movf	indf2,w,c
 13792  00019A  A4D8               	btfss	status,2,c
 13793  00019C  D009               	goto	l1182
 13794                           
 13795                           ; BSR set to: 2
 13796  00019E  0E00               	movlw	0
 13797  0001A0  6F10               	movwf	_find_volume$2372& (0+255),b
 13798  0001A2  0E00               	movlw	0
 13799  0001A4  6F11               	movwf	(_find_volume$2372+1)& (0+255),b
 13800  0001A6  0E00               	movlw	0
 13801  0001A8  6F12               	movwf	(_find_volume$2372+2)& (0+255),b
 13802  0001AA  0E00               	movlw	0
 13803  0001AC  6F13               	movwf	(_find_volume$2372+3)& (0+255),b
 13804  0001AE  D00E               	goto	l1184
 13805  0001B0                     l1182:
 13806                           
 13807                           ; BSR set to: 2
 13808                           
 13809                           ; BSR set to: 2
 13810  0001B0  EE20 F008          	lfsr	2,8
 13811  0001B4  511A               	movf	find_volume@pt& (0+255),w,b
 13812  0001B6  26D9               	addwf	fsr2l,f,c
 13813  0001B8  511B               	movf	(find_volume@pt+1)& (0+255),w,b
 13814  0001BA  22DA               	addwfc	fsr2h,f,c
 13815  0001BC  CFDE F210          	movff	postinc2,_find_volume$2372
 13816  0001C0  CFDE F211          	movff	postinc2,_find_volume$2372+1
 13817  0001C4  CFDE F212          	movff	postinc2,_find_volume$2372+2
 13818  0001C8  CFDE F213          	movff	postinc2,_find_volume$2372+3
 13819  0001CC                     l1184:
 13820                           
 13821                           ; BSR set to: 2
 13822  0001CC  0E00               	movlw	low find_volume@br
 13823  0001CE  0100               	movlb	0	; () banked
 13824  0001D0  6FA6               	movwf	??_find_volume& (0+255),b
 13825  0001D2  0E02               	movlw	high find_volume@br
 13826  0001D4  6FA7               	movwf	(??_find_volume+1)& (0+255),b
 13827  0001D6  90D8               	bcf	status,0,c
 13828  0001D8  0102               	movlb	2	; () banked
 13829  0001DA  3535               	rlcf	find_volume@i& (0+255),w,b
 13830  0001DC  6ED9               	movwf	fsr2l,c
 13831  0001DE  3536               	rlcf	(find_volume@i+1)& (0+255),w,b
 13832  0001E0  6EDA               	movwf	fsr2h,c
 13833  0001E2  90D8               	bcf	status,0,c
 13834  0001E4  36D9               	rlcf	fsr2l,f,c
 13835  0001E6  36DA               	rlcf	fsr2h,f,c
 13836  0001E8  0100               	movlb	0	; () banked
 13837  0001EA  51A6               	movf	??_find_volume& (0+255),w,b
 13838  0001EC  26D9               	addwf	fsr2l,f,c
 13839  0001EE  51A7               	movf	(??_find_volume+1)& (0+255),w,b
 13840  0001F0  22DA               	addwfc	fsr2h,f,c
 13841  0001F2  C210  FFDE         	movff	_find_volume$2372,postinc2
 13842  0001F6  C211  FFDE         	movff	_find_volume$2372+1,postinc2
 13843  0001FA  C212  FFDE         	movff	_find_volume$2372+2,postinc2
 13844  0001FE  C213  FFDE         	movff	_find_volume$2372+3,postinc2
 13845                           
 13846                           ; BSR set to: 0
 13847  000202  0102               	movlb	2	; () banked
 13848  000204  4B35               	infsnz	find_volume@i& (0+255),f,b
 13849  000206  2B36               	incf	(find_volume@i+1)& (0+255),f,b
 13850  000208  D79C               	goto	l11453
 13851  00020A                     u14750:
 13852  00020A                     l11469:
 13853                           
 13854                           ; BSR set to: 2
 13855                           ;ff.c: 2260: }
 13856                           ;ff.c: 2261: i = 0;
 13857  00020A  0E00               	movlw	0
 13858  00020C  6F36               	movwf	(find_volume@i+1)& (0+255),b
 13859  00020E  0E00               	movlw	0
 13860  000210  6F35               	movwf	find_volume@i& (0+255),b
 13861                           
 13862                           ; BSR set to: 2
 13863                           ;ff.c: 2262: if (i) i--;
 13864  000212  5135               	movf	find_volume@i& (0+255),w,b
 13865  000214  1136               	iorwf	(find_volume@i+1)& (0+255),w,b
 13866  000216  B4D8               	btfsc	status,2,c
 13867  000218  D003               	goto	l1185
 13868                           
 13869                           ; BSR set to: 2
 13870  00021A  0735               	decf	find_volume@i& (0+255),f,b
 13871  00021C  A0D8               	btfss	status,0,c
 13872  00021E  0736               	decf	(find_volume@i+1)& (0+255),f,b
 13873  000220                     l1185:
 13874                           
 13875                           ; BSR set to: 2
 13876                           ;ff.c: 2264: bsect = br[i];
 13877                           
 13878                           ; BSR set to: 2
 13879                           
 13880                           ;ff.c: 2263: do {
 13881                           
 13882                           ; BSR set to: 2
 13883  000220  0E00               	movlw	low find_volume@br
 13884  000222  0100               	movlb	0	; () banked
 13885  000224  6FA6               	movwf	??_find_volume& (0+255),b
 13886  000226  0E02               	movlw	high find_volume@br
 13887  000228  6FA7               	movwf	(??_find_volume+1)& (0+255),b
 13888  00022A  90D8               	bcf	status,0,c
 13889  00022C  0102               	movlb	2	; () banked
 13890  00022E  3535               	rlcf	find_volume@i& (0+255),w,b
 13891  000230  6ED9               	movwf	fsr2l,c
 13892  000232  3536               	rlcf	(find_volume@i+1)& (0+255),w,b
 13893  000234  6EDA               	movwf	fsr2h,c
 13894  000236  90D8               	bcf	status,0,c
 13895  000238  36D9               	rlcf	fsr2l,f,c
 13896  00023A  36DA               	rlcf	fsr2h,f,c
 13897  00023C  0100               	movlb	0	; () banked
 13898  00023E  51A6               	movf	??_find_volume& (0+255),w,b
 13899  000240  26D9               	addwf	fsr2l,f,c
 13900  000242  51A7               	movf	(??_find_volume+1)& (0+255),w,b
 13901  000244  22DA               	addwfc	fsr2h,f,c
 13902  000246  CFDE F231          	movff	postinc2,find_volume@bsect
 13903  00024A  CFDE F232          	movff	postinc2,find_volume@bsect+1
 13904  00024E  CFDE F233          	movff	postinc2,find_volume@bsect+2
 13905  000252  CFDE F234          	movff	postinc2,find_volume@bsect+3
 13906                           
 13907                           ; BSR set to: 0
 13908                           ;ff.c: 2265: fmt = bsect ? check_fs(fs, bsect) : 2;
 13909  000256  0102               	movlb	2	; () banked
 13910  000258  5131               	movf	find_volume@bsect& (0+255),w,b
 13911  00025A  1132               	iorwf	(find_volume@bsect+1)& (0+255),w,b
 13912  00025C  1133               	iorwf	(find_volume@bsect+2)& (0+255),w,b
 13913  00025E  1134               	iorwf	(find_volume@bsect+3)& (0+255),w,b
 13914  000260  A4D8               	btfss	status,2,c
 13915  000262  D005               	goto	l1188
 13916                           
 13917                           ; BSR set to: 2
 13918  000264  0E00               	movlw	0
 13919  000266  6F15               	movwf	(_find_volume$2373+1)& (0+255),b
 13920  000268  0E02               	movlw	2
 13921  00026A  6F14               	movwf	_find_volume$2373& (0+255),b
 13922  00026C  D014               	goto	l1190
 13923  00026E                     l1188:
 13924                           
 13925                           ; BSR set to: 2
 13926                           
 13927                           ; BSR set to: 2
 13928  00026E  C238  F097         	movff	find_volume@fs,check_fs@fs
 13929  000272  C239  F098         	movff	find_volume@fs+1,check_fs@fs+1
 13930  000276  C231  F099         	movff	find_volume@bsect,check_fs@sect
 13931  00027A  C232  F09A         	movff	find_volume@bsect+1,check_fs@sect+1
 13932  00027E  C233  F09B         	movff	find_volume@bsect+2,check_fs@sect+2
 13933  000282  C234  F09C         	movff	find_volume@bsect+3,check_fs@sect+3
 13934  000286  ECCA  F020         	call	_check_fs	;wreg free
 13935  00028A  0100               	movlb	0	; () banked
 13936  00028C  6FA6               	movwf	??_find_volume& (0+255),b
 13937  00028E  51A6               	movf	??_find_volume& (0+255),w,b
 13938  000290  0102               	movlb	2	; () banked
 13939  000292  6F14               	movwf	_find_volume$2373& (0+255),b
 13940  000294  6B15               	clrf	(_find_volume$2373+1)& (0+255),b
 13941  000296                     l1190:
 13942                           
 13943                           ; BSR set to: 2
 13944                           ;ff.c: 2266: } while (!0 && fmt && ++i < 4);
 13945                           
 13946                           ; BSR set to: 2
 13947  000296  C214  F237         	movff	_find_volume$2373,find_volume@fmt
 13948                           
 13949                           ; BSR set to: 2
 13950  00029A  5137               	movf	find_volume@fmt& (0+255),w,b
 13951  00029C  B4D8               	btfsc	status,2,c
 13952  00029E  D008               	goto	u14790
 13953                           
 13954                           ; BSR set to: 2
 13955  0002A0  4B35               	infsnz	find_volume@i& (0+255),f,b
 13956  0002A2  2B36               	incf	(find_volume@i+1)& (0+255),f,b
 13957  0002A4  5136               	movf	(find_volume@i+1)& (0+255),w,b
 13958  0002A6  E104               	bnz	l11489
 13959  0002A8  0E04               	movlw	4
 13960  0002AA  5D35               	subwf	find_volume@i& (0+255),w,b
 13961  0002AC  A0D8               	btfss	status,0,c
 13962  0002AE  D7B8               	goto	l1185
 13963  0002B0                     u14790:
 13964  0002B0                     l11489:
 13965                           
 13966                           ; BSR set to: 2
 13967                           ;ff.c: 2267: }
 13968                           ;ff.c: 2268: if (fmt == 3) return FR_DISK_ERR;
 13969  0002B0  0E03               	movlw	3
 13970  0002B2  1937               	xorwf	find_volume@fmt& (0+255),w,b
 13971  0002B4  A4D8               	btfss	status,2,c
 13972  0002B6  D002               	goto	l1194
 13973                           
 13974                           ; BSR set to: 2
 13975  0002B8  0E01               	movlw	1
 13976                           
 13977                           ; BSR set to: 2
 13978  0002BA  0012               	return	
 13979  0002BC                     l1194:
 13980                           
 13981                           ; BSR set to: 2
 13982                           ;ff.c: 2269: if (fmt) return FR_NO_FILESYSTEM;
 13983                           
 13984                           ; BSR set to: 2
 13985  0002BC  5137               	movf	find_volume@fmt& (0+255),w,b
 13986  0002BE  B4D8               	btfsc	status,2,c
 13987  0002C0  D002               	goto	l1195
 13988                           
 13989                           ; BSR set to: 2
 13990  0002C2  0E0D               	movlw	13
 13991                           
 13992                           ; BSR set to: 2
 13993  0002C4  0012               	return	
 13994  0002C6                     l1195:
 13995                           
 13996                           ; BSR set to: 2
 13997                           ;ff.c: 2273: if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
 13998                           
 13999                           ; BSR set to: 2
 14000  0002C6  EE20 F039          	lfsr	2,57
 14001  0002CA  5138               	movf	find_volume@fs& (0+255),w,b
 14002  0002CC  26D9               	addwf	fsr2l,f,c
 14003  0002CE  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14004  0002D0  22DA               	addwfc	fsr2h,f,c
 14005  0002D2  50DE               	movf	postinc2,w,c
 14006  0002D4  E104               	bnz	u14820
 14007  0002D6  0E02               	movlw	2
 14008  0002D8  18DE               	xorwf	postinc2,w,c
 14009  0002DA  B4D8               	btfsc	status,2,c
 14010  0002DC  D002               	goto	l1196
 14011  0002DE                     u14820:
 14012                           
 14013                           ; BSR set to: 2
 14014                           ;ff.c: 2274: return FR_NO_FILESYSTEM;
 14015  0002DE  0E0D               	movlw	13
 14016                           
 14017                           ; BSR set to: 2
 14018  0002E0  0012               	return	
 14019  0002E2                     l1196:
 14020                           
 14021                           ; BSR set to: 2
 14022                           ;ff.c: 2276: fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
 14023                           
 14024                           ; BSR set to: 2
 14025  0002E2  EE20 F044          	lfsr	2,68
 14026  0002E6  5138               	movf	find_volume@fs& (0+255),w,b
 14027  0002E8  26D9               	addwf	fsr2l,f,c
 14028  0002EA  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14029  0002EC  22DA               	addwfc	fsr2h,f,c
 14030  0002EE  CFDE F0A6          	movff	postinc2,??_find_volume
 14031  0002F2  CFDD F0A7          	movff	postdec2,??_find_volume+1
 14032  0002F6  C0A6  F22D         	movff	??_find_volume,find_volume@fasize
 14033  0002FA  C0A7  F22E         	movff	??_find_volume+1,find_volume@fasize+1
 14034  0002FE  6B2F               	clrf	(find_volume@fasize+2)& (0+255),b
 14035  000300  6B30               	clrf	(find_volume@fasize+3)& (0+255),b
 14036                           
 14037                           ; BSR set to: 2
 14038                           ;ff.c: 2277: if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
 14039  000302  512D               	movf	find_volume@fasize& (0+255),w,b
 14040  000304  112E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
 14041  000306  112F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
 14042  000308  1130               	iorwf	(find_volume@fasize+3)& (0+255),w,b
 14043  00030A  A4D8               	btfss	status,2,c
 14044  00030C  D00E               	goto	l1197
 14045                           
 14046                           ; BSR set to: 2
 14047  00030E  EE20 F052          	lfsr	2,82
 14048  000312  5138               	movf	find_volume@fs& (0+255),w,b
 14049  000314  26D9               	addwf	fsr2l,f,c
 14050  000316  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14051  000318  22DA               	addwfc	fsr2h,f,c
 14052  00031A  CFDE F22D          	movff	postinc2,find_volume@fasize
 14053  00031E  CFDE F22E          	movff	postinc2,find_volume@fasize+1
 14054  000322  CFDE F22F          	movff	postinc2,find_volume@fasize+2
 14055  000326  CFDE F230          	movff	postinc2,find_volume@fasize+3
 14056  00032A                     l1197:
 14057                           
 14058                           ; BSR set to: 2
 14059                           ;ff.c: 2278: fs->fsize = fasize;
 14060  00032A  EE20 F016          	lfsr	2,22
 14061  00032E  5138               	movf	find_volume@fs& (0+255),w,b
 14062  000330  26D9               	addwf	fsr2l,f,c
 14063  000332  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14064  000334  22DA               	addwfc	fsr2h,f,c
 14065  000336  C22D  FFDE         	movff	find_volume@fasize,postinc2
 14066  00033A  C22E  FFDE         	movff	find_volume@fasize+1,postinc2
 14067  00033E  C22F  FFDE         	movff	find_volume@fasize+2,postinc2
 14068  000342  C230  FFDE         	movff	find_volume@fasize+3,postinc2
 14069                           
 14070                           ; BSR set to: 2
 14071                           ;ff.c: 2280: fs->n_fats = fs->win[16];
 14072  000346  EE20 F03E          	lfsr	2,62
 14073  00034A  5138               	movf	find_volume@fs& (0+255),w,b
 14074  00034C  26D9               	addwf	fsr2l,f,c
 14075  00034E  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14076  000350  22DA               	addwfc	fsr2h,f,c
 14077  000352  EE10 F003          	lfsr	1,3
 14078  000356  5138               	movf	find_volume@fs& (0+255),w,b
 14079  000358  26E1               	addwf	fsr1l,f,c
 14080  00035A  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14081  00035C  22E2               	addwfc	fsr1h,f,c
 14082  00035E  CFDF FFE7          	movff	indf2,indf1
 14083                           
 14084                           ; BSR set to: 2
 14085                           ;ff.c: 2281: if (fs->n_fats != 1 && fs->n_fats != 2)
 14086  000362  EE20 F003          	lfsr	2,3
 14087  000366  5138               	movf	find_volume@fs& (0+255),w,b
 14088  000368  26D9               	addwf	fsr2l,f,c
 14089  00036A  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14090  00036C  22DA               	addwfc	fsr2h,f,c
 14091  00036E  04DE               	decf	postinc2,w,c
 14092  000370  B4D8               	btfsc	status,2,c
 14093  000372  D00C               	goto	l1198
 14094                           
 14095                           ; BSR set to: 2
 14096  000374  EE20 F003          	lfsr	2,3
 14097  000378  5138               	movf	find_volume@fs& (0+255),w,b
 14098  00037A  26D9               	addwf	fsr2l,f,c
 14099  00037C  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14100  00037E  22DA               	addwfc	fsr2h,f,c
 14101  000380  0E02               	movlw	2
 14102  000382  18DE               	xorwf	postinc2,w,c
 14103  000384  B4D8               	btfsc	status,2,c
 14104  000386  D002               	goto	l1198
 14105                           
 14106                           ; BSR set to: 2
 14107                           ;ff.c: 2282: return FR_NO_FILESYSTEM;
 14108  000388  0E0D               	movlw	13
 14109                           
 14110                           ; BSR set to: 2
 14111  00038A  0012               	return	
 14112  00038C                     l1198:
 14113                           
 14114                           ; BSR set to: 2
 14115                           ;ff.c: 2283: fasize *= fs->n_fats;
 14116                           
 14117                           ; BSR set to: 2
 14118  00038C  C22D  F01A         	movff	find_volume@fasize,___lmul@multiplier
 14119  000390  C22E  F01B         	movff	find_volume@fasize+1,___lmul@multiplier+1
 14120  000394  C22F  F01C         	movff	find_volume@fasize+2,___lmul@multiplier+2
 14121  000398  C230  F01D         	movff	find_volume@fasize+3,___lmul@multiplier+3
 14122  00039C  EE20 F003          	lfsr	2,3
 14123  0003A0  5138               	movf	find_volume@fs& (0+255),w,b
 14124  0003A2  26D9               	addwf	fsr2l,f,c
 14125  0003A4  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14126  0003A6  22DA               	addwfc	fsr2h,f,c
 14127  0003A8  50DF               	movf	indf2,w,c
 14128  0003AA  0100               	movlb	0	; () banked
 14129  0003AC  6FA6               	movwf	??_find_volume& (0+255),b
 14130  0003AE  51A6               	movf	??_find_volume& (0+255),w,b
 14131  0003B0  6E1E               	movwf	___lmul@multiplicand,c
 14132  0003B2  6A1F               	clrf	___lmul@multiplicand+1,c
 14133  0003B4  6A20               	clrf	___lmul@multiplicand+2,c
 14134  0003B6  6A21               	clrf	___lmul@multiplicand+3,c
 14135  0003B8  EC03  F029         	call	___lmul	;wreg free
 14136  0003BC  C01A  F22D         	movff	?___lmul,find_volume@fasize
 14137  0003C0  C01B  F22E         	movff	?___lmul+1,find_volume@fasize+1
 14138  0003C4  C01C  F22F         	movff	?___lmul+2,find_volume@fasize+2
 14139  0003C8  C01D  F230         	movff	?___lmul+3,find_volume@fasize+3
 14140                           
 14141                           ;ff.c: 2285: fs->csize = fs->win[13];
 14142  0003CC  0102               	movlb	2	; () banked
 14143  0003CE  EE20 F03B          	lfsr	2,59
 14144  0003D2  5138               	movf	find_volume@fs& (0+255),w,b
 14145  0003D4  26D9               	addwf	fsr2l,f,c
 14146  0003D6  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14147  0003D8  22DA               	addwfc	fsr2h,f,c
 14148  0003DA  EE10 F002          	lfsr	1,2
 14149  0003DE  5138               	movf	find_volume@fs& (0+255),w,b
 14150  0003E0  26E1               	addwf	fsr1l,f,c
 14151  0003E2  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14152  0003E4  22E2               	addwfc	fsr1h,f,c
 14153  0003E6  CFDF FFE7          	movff	indf2,indf1
 14154                           
 14155                           ; BSR set to: 2
 14156                           ;ff.c: 2286: if (!fs->csize || (fs->csize & (fs->csize - 1)))
 14157  0003EA  EE20 F002          	lfsr	2,2
 14158  0003EE  5138               	movf	find_volume@fs& (0+255),w,b
 14159  0003F0  26D9               	addwf	fsr2l,f,c
 14160  0003F2  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14161  0003F4  22DA               	addwfc	fsr2h,f,c
 14162  0003F6  50DF               	movf	indf2,w,c
 14163  0003F8  B4D8               	btfsc	status,2,c
 14164  0003FA  D026               	goto	u14870
 14165                           
 14166                           ; BSR set to: 2
 14167  0003FC  0EFF               	movlw	255
 14168  0003FE  0100               	movlb	0	; () banked
 14169  000400  6FA6               	movwf	??_find_volume& (0+255),b
 14170  000402  0EFF               	movlw	255
 14171  000404  6FA7               	movwf	(??_find_volume+1)& (0+255),b
 14172  000406  0102               	movlb	2	; () banked
 14173  000408  EE20 F002          	lfsr	2,2
 14174  00040C  5138               	movf	find_volume@fs& (0+255),w,b
 14175  00040E  26D9               	addwf	fsr2l,f,c
 14176  000410  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14177  000412  22DA               	addwfc	fsr2h,f,c
 14178  000414  50DF               	movf	indf2,w,c
 14179  000416  0100               	movlb	0	; () banked
 14180  000418  6FA8               	movwf	(??_find_volume+2)& (0+255),b
 14181  00041A  6BA9               	clrf	(??_find_volume+3)& (0+255),b
 14182  00041C  51A6               	movf	??_find_volume& (0+255),w,b
 14183  00041E  27A8               	addwf	(??_find_volume+2)& (0+255),f,b
 14184  000420  51A7               	movf	(??_find_volume+1)& (0+255),w,b
 14185  000422  23A9               	addwfc	(??_find_volume+3)& (0+255),f,b
 14186  000424  0102               	movlb	2	; () banked
 14187  000426  EE20 F002          	lfsr	2,2
 14188  00042A  5138               	movf	find_volume@fs& (0+255),w,b
 14189  00042C  26D9               	addwf	fsr2l,f,c
 14190  00042E  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14191  000430  22DA               	addwfc	fsr2h,f,c
 14192  000432  50DF               	movf	indf2,w,c
 14193  000434  0100               	movlb	0	; () banked
 14194  000436  6FAA               	movwf	(??_find_volume+4)& (0+255),b
 14195  000438  51AA               	movf	(??_find_volume+4)& (0+255),w,b
 14196  00043A  17A8               	andwf	(??_find_volume+2)& (0+255),f,b
 14197  00043C  0E00               	movlw	0
 14198  00043E  17A9               	andwf	(??_find_volume+3)& (0+255),f,b
 14199  000440  51A8               	movf	(??_find_volume+2)& (0+255),w,b
 14200  000442  11A9               	iorwf	(??_find_volume+3)& (0+255),w,b
 14201  000444  B4D8               	btfsc	status,2,c
 14202  000446  D002               	goto	l1199
 14203  000448                     u14870:
 14204                           
 14205                           ;ff.c: 2287: return FR_NO_FILESYSTEM;
 14206                           
 14207                           ; BSR set to: 0
 14208  000448  0E0D               	movlw	13
 14209  00044A  0012               	return	
 14210  00044C                     l1199:
 14211                           
 14212                           ;ff.c: 2289: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
 14213  00044C  0102               	movlb	2	; () banked
 14214  00044E  EE20 F03F          	lfsr	2,63
 14215  000452  5138               	movf	find_volume@fs& (0+255),w,b
 14216  000454  26D9               	addwf	fsr2l,f,c
 14217  000456  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14218  000458  22DA               	addwfc	fsr2h,f,c
 14219  00045A  EE10 F008          	lfsr	1,8
 14220  00045E  5138               	movf	find_volume@fs& (0+255),w,b
 14221  000460  26E1               	addwf	fsr1l,f,c
 14222  000462  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14223  000464  22E2               	addwfc	fsr1h,f,c
 14224  000466  CFDE FFE6          	movff	postinc2,postinc1
 14225  00046A  CFDD FFE5          	movff	postdec2,postdec1
 14226                           
 14227                           ; BSR set to: 2
 14228                           ;ff.c: 2290: if (fs->n_rootdir % (((UINT)512) / 32))
 14229  00046E  EE20 F008          	lfsr	2,8
 14230  000472  5138               	movf	find_volume@fs& (0+255),w,b
 14231  000474  26D9               	addwf	fsr2l,f,c
 14232  000476  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14233  000478  22DA               	addwfc	fsr2h,f,c
 14234  00047A  CFDE F0A6          	movff	postinc2,??_find_volume
 14235  00047E  CFDD F0A7          	movff	postdec2,??_find_volume+1
 14236  000482  0E0F               	movlw	15
 14237  000484  0100               	movlb	0	; () banked
 14238  000486  17A6               	andwf	??_find_volume& (0+255),f,b
 14239  000488  0E00               	movlw	0
 14240  00048A  17A7               	andwf	(??_find_volume+1)& (0+255),f,b
 14241  00048C  51A6               	movf	??_find_volume& (0+255),w,b
 14242  00048E  11A7               	iorwf	(??_find_volume+1)& (0+255),w,b
 14243  000490  B4D8               	btfsc	status,2,c
 14244  000492  D002               	goto	l1202
 14245                           
 14246                           ; BSR set to: 0
 14247                           ;ff.c: 2291: return FR_NO_FILESYSTEM;
 14248  000494  0E0D               	movlw	13
 14249                           
 14250                           ; BSR set to: 0
 14251  000496  0012               	return	
 14252  000498                     l1202:
 14253                           
 14254                           ; BSR set to: 0
 14255                           ;ff.c: 2293: tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
 14256                           
 14257                           ; BSR set to: 0
 14258  000498  0102               	movlb	2	; () banked
 14259  00049A  EE20 F041          	lfsr	2,65
 14260  00049E  5138               	movf	find_volume@fs& (0+255),w,b
 14261  0004A0  26D9               	addwf	fsr2l,f,c
 14262  0004A2  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14263  0004A4  22DA               	addwfc	fsr2h,f,c
 14264  0004A6  CFDE F0A6          	movff	postinc2,??_find_volume
 14265  0004AA  CFDD F0A7          	movff	postdec2,??_find_volume+1
 14266  0004AE  C0A6  F224         	movff	??_find_volume,find_volume@tsect
 14267  0004B2  C0A7  F225         	movff	??_find_volume+1,find_volume@tsect+1
 14268  0004B6  6B26               	clrf	(find_volume@tsect+2)& (0+255),b
 14269  0004B8  6B27               	clrf	(find_volume@tsect+3)& (0+255),b
 14270                           
 14271                           ; BSR set to: 2
 14272                           ;ff.c: 2294: if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
 14273  0004BA  5124               	movf	find_volume@tsect& (0+255),w,b
 14274  0004BC  1125               	iorwf	(find_volume@tsect+1)& (0+255),w,b
 14275  0004BE  1126               	iorwf	(find_volume@tsect+2)& (0+255),w,b
 14276  0004C0  1127               	iorwf	(find_volume@tsect+3)& (0+255),w,b
 14277  0004C2  A4D8               	btfss	status,2,c
 14278  0004C4  D00E               	goto	l1203
 14279                           
 14280                           ; BSR set to: 2
 14281  0004C6  EE20 F04E          	lfsr	2,78
 14282  0004CA  5138               	movf	find_volume@fs& (0+255),w,b
 14283  0004CC  26D9               	addwf	fsr2l,f,c
 14284  0004CE  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14285  0004D0  22DA               	addwfc	fsr2h,f,c
 14286  0004D2  CFDE F224          	movff	postinc2,find_volume@tsect
 14287  0004D6  CFDE F225          	movff	postinc2,find_volume@tsect+1
 14288  0004DA  CFDE F226          	movff	postinc2,find_volume@tsect+2
 14289  0004DE  CFDE F227          	movff	postinc2,find_volume@tsect+3
 14290  0004E2                     l1203:
 14291                           
 14292                           ; BSR set to: 2
 14293                           ;ff.c: 2296: nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
 14294  0004E2  EE20 F03C          	lfsr	2,60
 14295  0004E6  5138               	movf	find_volume@fs& (0+255),w,b
 14296  0004E8  26D9               	addwf	fsr2l,f,c
 14297  0004EA  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14298  0004EC  22DA               	addwfc	fsr2h,f,c
 14299  0004EE  CFDE F222          	movff	postinc2,find_volume@nrsv
 14300  0004F2  CFDD F223          	movff	postdec2,find_volume@nrsv+1
 14301                           
 14302                           ; BSR set to: 2
 14303                           ;ff.c: 2297: if (!nrsv) return FR_NO_FILESYSTEM;
 14304  0004F6  5122               	movf	find_volume@nrsv& (0+255),w,b
 14305  0004F8  1123               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
 14306  0004FA  A4D8               	btfss	status,2,c
 14307  0004FC  D002               	goto	l1204
 14308                           
 14309                           ; BSR set to: 2
 14310  0004FE  0E0D               	movlw	13
 14311                           
 14312                           ; BSR set to: 2
 14313  000500  0012               	return	
 14314  000502                     l1204:
 14315                           
 14316                           ; BSR set to: 2
 14317                           ;ff.c: 2300: sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
 14318                           
 14319                           ; BSR set to: 2
 14320  000502  EE20 F008          	lfsr	2,8
 14321  000506  5138               	movf	find_volume@fs& (0+255),w,b
 14322  000508  26D9               	addwf	fsr2l,f,c
 14323  00050A  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14324  00050C  22DA               	addwfc	fsr2h,f,c
 14325  00050E  CFDE F0A6          	movff	postinc2,??_find_volume
 14326  000512  CFDD F0A7          	movff	postdec2,??_find_volume+1
 14327  000516  0E04               	movlw	4
 14328  000518  0100               	movlb	0	; () banked
 14329  00051A  6FA8               	movwf	(??_find_volume+2)& (0+255),b
 14330  00051C                     u14915:
 14331  00051C  90D8               	bcf	status,0,c
 14332  00051E  33A7               	rrcf	(??_find_volume+1)& (0+255),f,b
 14333  000520  33A6               	rrcf	??_find_volume& (0+255),f,b
 14334  000522  2FA8               	decfsz	(??_find_volume+2)& (0+255),f,b
 14335  000524  D7FB               	goto	u14915
 14336  000526  0102               	movlb	2	; () banked
 14337  000528  5122               	movf	find_volume@nrsv& (0+255),w,b
 14338  00052A  0100               	movlb	0	; () banked
 14339  00052C  25A6               	addwf	??_find_volume& (0+255),w,b
 14340  00052E  6FA9               	movwf	(??_find_volume+3)& (0+255),b
 14341  000530  0102               	movlb	2	; () banked
 14342  000532  5123               	movf	(find_volume@nrsv+1)& (0+255),w,b
 14343  000534  0100               	movlb	0	; () banked
 14344  000536  21A7               	addwfc	(??_find_volume+1)& (0+255),w,b
 14345  000538  6FAA               	movwf	(??_find_volume+4)& (0+255),b
 14346  00053A  6BAB               	clrf	(??_find_volume+5)& (0+255),b
 14347  00053C  B0D8               	btfsc	status,0,c
 14348  00053E  2BAB               	incf	(??_find_volume+5)& (0+255),f,b
 14349  000540  6BAC               	clrf	(??_find_volume+6)& (0+255),b
 14350  000542  0102               	movlb	2	; () banked
 14351  000544  512D               	movf	find_volume@fasize& (0+255),w,b
 14352  000546  0100               	movlb	0	; () banked
 14353  000548  25A9               	addwf	(??_find_volume+3)& (0+255),w,b
 14354  00054A  0102               	movlb	2	; () banked
 14355  00054C  6F1C               	movwf	find_volume@sysect& (0+255),b
 14356  00054E  512E               	movf	(find_volume@fasize+1)& (0+255),w,b
 14357  000550  0100               	movlb	0	; () banked
 14358  000552  21AA               	addwfc	(??_find_volume+4)& (0+255),w,b
 14359  000554  0102               	movlb	2	; () banked
 14360  000556  6F1D               	movwf	(find_volume@sysect+1)& (0+255),b
 14361  000558  512F               	movf	(find_volume@fasize+2)& (0+255),w,b
 14362  00055A  0100               	movlb	0	; () banked
 14363  00055C  21AB               	addwfc	(??_find_volume+5)& (0+255),w,b
 14364  00055E  0102               	movlb	2	; () banked
 14365  000560  6F1E               	movwf	(find_volume@sysect+2)& (0+255),b
 14366  000562  5130               	movf	(find_volume@fasize+3)& (0+255),w,b
 14367  000564  0100               	movlb	0	; () banked
 14368  000566  21AC               	addwfc	(??_find_volume+6)& (0+255),w,b
 14369  000568  0102               	movlb	2	; () banked
 14370  00056A  6F1F               	movwf	(find_volume@sysect+3)& (0+255),b
 14371                           
 14372                           ; BSR set to: 2
 14373                           ;ff.c: 2301: if (tsect < sysect) return FR_NO_FILESYSTEM;
 14374  00056C  511C               	movf	find_volume@sysect& (0+255),w,b
 14375  00056E  5D24               	subwf	find_volume@tsect& (0+255),w,b
 14376  000570  511D               	movf	(find_volume@sysect+1)& (0+255),w,b
 14377  000572  5925               	subwfb	(find_volume@tsect+1)& (0+255),w,b
 14378  000574  511E               	movf	(find_volume@sysect+2)& (0+255),w,b
 14379  000576  5926               	subwfb	(find_volume@tsect+2)& (0+255),w,b
 14380  000578  511F               	movf	(find_volume@sysect+3)& (0+255),w,b
 14381  00057A  5927               	subwfb	(find_volume@tsect+3)& (0+255),w,b
 14382  00057C  B0D8               	btfsc	status,0,c
 14383  00057E  D002               	goto	l1205
 14384                           
 14385                           ; BSR set to: 2
 14386  000580  0E0D               	movlw	13
 14387                           
 14388                           ; BSR set to: 2
 14389  000582  0012               	return	
 14390  000584                     l1205:
 14391                           
 14392                           ; BSR set to: 2
 14393                           ;ff.c: 2302: nclst = (tsect - sysect) / fs->csize;
 14394                           
 14395                           ; BSR set to: 2
 14396  000584  C21C  F0A6         	movff	find_volume@sysect,??_find_volume
 14397  000588  C21D  F0A7         	movff	find_volume@sysect+1,??_find_volume+1
 14398  00058C  C21E  F0A8         	movff	find_volume@sysect+2,??_find_volume+2
 14399  000590  C21F  F0A9         	movff	find_volume@sysect+3,??_find_volume+3
 14400  000594  0100               	movlb	0	; () banked
 14401  000596  1FA6               	comf	??_find_volume& (0+255),f,b
 14402  000598  1FA7               	comf	(??_find_volume+1)& (0+255),f,b
 14403  00059A  1FA8               	comf	(??_find_volume+2)& (0+255),f,b
 14404  00059C  1FA9               	comf	(??_find_volume+3)& (0+255),f,b
 14405  00059E  2BA6               	incf	??_find_volume& (0+255),f,b
 14406  0005A0  0E00               	movlw	0
 14407  0005A2  23A7               	addwfc	(??_find_volume+1)& (0+255),f,b
 14408  0005A4  23A8               	addwfc	(??_find_volume+2)& (0+255),f,b
 14409  0005A6  23A9               	addwfc	(??_find_volume+3)& (0+255),f,b
 14410  0005A8  0102               	movlb	2	; () banked
 14411  0005AA  5124               	movf	find_volume@tsect& (0+255),w,b
 14412  0005AC  0100               	movlb	0	; () banked
 14413  0005AE  25A6               	addwf	??_find_volume& (0+255),w,b
 14414  0005B0  6E1A               	movwf	___lldiv@dividend,c
 14415  0005B2  0102               	movlb	2	; () banked
 14416  0005B4  5125               	movf	(find_volume@tsect+1)& (0+255),w,b
 14417  0005B6  0100               	movlb	0	; () banked
 14418  0005B8  21A7               	addwfc	(??_find_volume+1)& (0+255),w,b
 14419  0005BA  6E1B               	movwf	___lldiv@dividend+1,c
 14420  0005BC  0102               	movlb	2	; () banked
 14421  0005BE  5126               	movf	(find_volume@tsect+2)& (0+255),w,b
 14422  0005C0  0100               	movlb	0	; () banked
 14423  0005C2  21A8               	addwfc	(??_find_volume+2)& (0+255),w,b
 14424  0005C4  6E1C               	movwf	___lldiv@dividend+2,c
 14425  0005C6  0102               	movlb	2	; () banked
 14426  0005C8  5127               	movf	(find_volume@tsect+3)& (0+255),w,b
 14427  0005CA  0100               	movlb	0	; () banked
 14428  0005CC  21A9               	addwfc	(??_find_volume+3)& (0+255),w,b
 14429  0005CE  6E1D               	movwf	___lldiv@dividend+3,c
 14430  0005D0  0102               	movlb	2	; () banked
 14431  0005D2  EE20 F002          	lfsr	2,2
 14432  0005D6  5138               	movf	find_volume@fs& (0+255),w,b
 14433  0005D8  26D9               	addwf	fsr2l,f,c
 14434  0005DA  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14435  0005DC  22DA               	addwfc	fsr2h,f,c
 14436  0005DE  50DF               	movf	indf2,w,c
 14437  0005E0  0100               	movlb	0	; () banked
 14438  0005E2  6FAA               	movwf	(??_find_volume+4)& (0+255),b
 14439  0005E4  51AA               	movf	(??_find_volume+4)& (0+255),w,b
 14440  0005E6  6E1E               	movwf	___lldiv@divisor,c
 14441  0005E8  6A1F               	clrf	___lldiv@divisor+1,c
 14442  0005EA  6A20               	clrf	___lldiv@divisor+2,c
 14443  0005EC  6A21               	clrf	___lldiv@divisor+3,c
 14444  0005EE  EC94  F026         	call	___lldiv	;wreg free
 14445  0005F2  C01A  F228         	movff	?___lldiv,find_volume@nclst
 14446  0005F6  C01B  F229         	movff	?___lldiv+1,find_volume@nclst+1
 14447  0005FA  C01C  F22A         	movff	?___lldiv+2,find_volume@nclst+2
 14448  0005FE  C01D  F22B         	movff	?___lldiv+3,find_volume@nclst+3
 14449                           
 14450                           ;ff.c: 2303: if (!nclst) return FR_NO_FILESYSTEM;
 14451  000602  0102               	movlb	2	; () banked
 14452  000604  5128               	movf	find_volume@nclst& (0+255),w,b
 14453  000606  1129               	iorwf	(find_volume@nclst+1)& (0+255),w,b
 14454  000608  112A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
 14455  00060A  112B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
 14456  00060C  A4D8               	btfss	status,2,c
 14457  00060E  D002               	goto	l1206
 14458                           
 14459                           ; BSR set to: 2
 14460  000610  0E0D               	movlw	13
 14461                           
 14462                           ; BSR set to: 2
 14463  000612  0012               	return	
 14464  000614                     l1206:
 14465                           
 14466                           ; BSR set to: 2
 14467                           ;ff.c: 2304: fmt = 1;
 14468                           
 14469                           ; BSR set to: 2
 14470  000614  0E01               	movlw	1
 14471  000616  6F37               	movwf	find_volume@fmt& (0+255),b
 14472                           
 14473                           ; BSR set to: 2
 14474                           ;ff.c: 2305: if (nclst >= 4086U) fmt = 2;
 14475  000618  512B               	movf	(find_volume@nclst+3)& (0+255),w,b
 14476  00061A  112A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
 14477  00061C  E106               	bnz	u14940
 14478  00061E  0EF6               	movlw	246
 14479  000620  5D28               	subwf	find_volume@nclst& (0+255),w,b
 14480  000622  0E0F               	movlw	15
 14481  000624  5929               	subwfb	(find_volume@nclst+1)& (0+255),w,b
 14482  000626  A0D8               	btfss	status,0,c
 14483  000628  D002               	goto	l1207
 14484  00062A                     u14940:
 14485                           
 14486                           ; BSR set to: 2
 14487  00062A  0E02               	movlw	2
 14488  00062C  6F37               	movwf	find_volume@fmt& (0+255),b
 14489  00062E                     l1207:
 14490                           
 14491                           ; BSR set to: 2
 14492                           ;ff.c: 2306: if (nclst >= 65526U) fmt = 3;
 14493                           
 14494                           ; BSR set to: 2
 14495  00062E  512B               	movf	(find_volume@nclst+3)& (0+255),w,b
 14496  000630  112A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
 14497  000632  E106               	bnz	u14950
 14498  000634  0EF6               	movlw	246
 14499  000636  5D28               	subwf	find_volume@nclst& (0+255),w,b
 14500  000638  0EFF               	movlw	255
 14501  00063A  5929               	subwfb	(find_volume@nclst+1)& (0+255),w,b
 14502  00063C  A0D8               	btfss	status,0,c
 14503  00063E  D002               	goto	l1208
 14504  000640                     u14950:
 14505                           
 14506                           ; BSR set to: 2
 14507  000640  0E03               	movlw	3
 14508  000642  6F37               	movwf	find_volume@fmt& (0+255),b
 14509  000644                     l1208:
 14510                           
 14511                           ; BSR set to: 2
 14512                           ;ff.c: 2309: fs->n_fatent = nclst + 2;
 14513                           
 14514                           ; BSR set to: 2
 14515  000644  0E02               	movlw	2
 14516  000646  2528               	addwf	find_volume@nclst& (0+255),w,b
 14517  000648  0100               	movlb	0	; () banked
 14518  00064A  6FA6               	movwf	??_find_volume& (0+255),b
 14519  00064C  0E00               	movlw	0
 14520  00064E  0102               	movlb	2	; () banked
 14521  000650  2129               	addwfc	(find_volume@nclst+1)& (0+255),w,b
 14522  000652  0100               	movlb	0	; () banked
 14523  000654  6FA7               	movwf	(??_find_volume+1)& (0+255),b
 14524  000656  0E00               	movlw	0
 14525  000658  0102               	movlb	2	; () banked
 14526  00065A  212A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
 14527  00065C  0100               	movlb	0	; () banked
 14528  00065E  6FA8               	movwf	(??_find_volume+2)& (0+255),b
 14529  000660  0E00               	movlw	0
 14530  000662  0102               	movlb	2	; () banked
 14531  000664  212B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
 14532  000666  0100               	movlb	0	; () banked
 14533  000668  6FA9               	movwf	(??_find_volume+3)& (0+255),b
 14534  00066A  0102               	movlb	2	; () banked
 14535  00066C  EE20 F012          	lfsr	2,18
 14536  000670  5138               	movf	find_volume@fs& (0+255),w,b
 14537  000672  26D9               	addwf	fsr2l,f,c
 14538  000674  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14539  000676  22DA               	addwfc	fsr2h,f,c
 14540  000678  C0A6  FFDE         	movff	??_find_volume,postinc2
 14541  00067C  C0A7  FFDE         	movff	??_find_volume+1,postinc2
 14542  000680  C0A8  FFDE         	movff	??_find_volume+2,postinc2
 14543  000684  C0A9  FFDE         	movff	??_find_volume+3,postinc2
 14544                           
 14545                           ; BSR set to: 2
 14546                           ;ff.c: 2310: fs->volbase = bsect;
 14547  000688  EE20 F01A          	lfsr	2,26
 14548  00068C  5138               	movf	find_volume@fs& (0+255),w,b
 14549  00068E  26D9               	addwf	fsr2l,f,c
 14550  000690  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14551  000692  22DA               	addwfc	fsr2h,f,c
 14552  000694  C231  FFDE         	movff	find_volume@bsect,postinc2
 14553  000698  C232  FFDE         	movff	find_volume@bsect+1,postinc2
 14554  00069C  C233  FFDE         	movff	find_volume@bsect+2,postinc2
 14555  0006A0  C234  FFDE         	movff	find_volume@bsect+3,postinc2
 14556                           
 14557                           ; BSR set to: 2
 14558                           ;ff.c: 2311: fs->fatbase = bsect + nrsv;
 14559  0006A4  5122               	movf	find_volume@nrsv& (0+255),w,b
 14560  0006A6  2531               	addwf	find_volume@bsect& (0+255),w,b
 14561  0006A8  0100               	movlb	0	; () banked
 14562  0006AA  6FA6               	movwf	??_find_volume& (0+255),b
 14563  0006AC  0102               	movlb	2	; () banked
 14564  0006AE  5123               	movf	(find_volume@nrsv+1)& (0+255),w,b
 14565  0006B0  2132               	addwfc	(find_volume@bsect+1)& (0+255),w,b
 14566  0006B2  0100               	movlb	0	; () banked
 14567  0006B4  6FA7               	movwf	(??_find_volume+1)& (0+255),b
 14568  0006B6  0E00               	movlw	0
 14569  0006B8  0102               	movlb	2	; () banked
 14570  0006BA  2133               	addwfc	(find_volume@bsect+2)& (0+255),w,b
 14571  0006BC  0100               	movlb	0	; () banked
 14572  0006BE  6FA8               	movwf	(??_find_volume+2)& (0+255),b
 14573  0006C0  0E00               	movlw	0
 14574  0006C2  0102               	movlb	2	; () banked
 14575  0006C4  2134               	addwfc	(find_volume@bsect+3)& (0+255),w,b
 14576  0006C6  0100               	movlb	0	; () banked
 14577  0006C8  6FA9               	movwf	(??_find_volume+3)& (0+255),b
 14578  0006CA  0102               	movlb	2	; () banked
 14579  0006CC  EE20 F01E          	lfsr	2,30
 14580  0006D0  5138               	movf	find_volume@fs& (0+255),w,b
 14581  0006D2  26D9               	addwf	fsr2l,f,c
 14582  0006D4  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14583  0006D6  22DA               	addwfc	fsr2h,f,c
 14584  0006D8  C0A6  FFDE         	movff	??_find_volume,postinc2
 14585  0006DC  C0A7  FFDE         	movff	??_find_volume+1,postinc2
 14586  0006E0  C0A8  FFDE         	movff	??_find_volume+2,postinc2
 14587  0006E4  C0A9  FFDE         	movff	??_find_volume+3,postinc2
 14588                           
 14589                           ; BSR set to: 2
 14590                           ;ff.c: 2312: fs->database = bsect + sysect;
 14591  0006E8  511C               	movf	find_volume@sysect& (0+255),w,b
 14592  0006EA  2531               	addwf	find_volume@bsect& (0+255),w,b
 14593  0006EC  0100               	movlb	0	; () banked
 14594  0006EE  6FA6               	movwf	??_find_volume& (0+255),b
 14595  0006F0  0102               	movlb	2	; () banked
 14596  0006F2  511D               	movf	(find_volume@sysect+1)& (0+255),w,b
 14597  0006F4  2132               	addwfc	(find_volume@bsect+1)& (0+255),w,b
 14598  0006F6  0100               	movlb	0	; () banked
 14599  0006F8  6FA7               	movwf	(??_find_volume+1)& (0+255),b
 14600  0006FA  0102               	movlb	2	; () banked
 14601  0006FC  511E               	movf	(find_volume@sysect+2)& (0+255),w,b
 14602  0006FE  2133               	addwfc	(find_volume@bsect+2)& (0+255),w,b
 14603  000700  0100               	movlb	0	; () banked
 14604  000702  6FA8               	movwf	(??_find_volume+2)& (0+255),b
 14605  000704  0102               	movlb	2	; () banked
 14606  000706  511F               	movf	(find_volume@sysect+3)& (0+255),w,b
 14607  000708  2134               	addwfc	(find_volume@bsect+3)& (0+255),w,b
 14608  00070A  0100               	movlb	0	; () banked
 14609  00070C  6FA9               	movwf	(??_find_volume+3)& (0+255),b
 14610  00070E  0102               	movlb	2	; () banked
 14611  000710  EE20 F026          	lfsr	2,38
 14612  000714  5138               	movf	find_volume@fs& (0+255),w,b
 14613  000716  26D9               	addwf	fsr2l,f,c
 14614  000718  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14615  00071A  22DA               	addwfc	fsr2h,f,c
 14616  00071C  C0A6  FFDE         	movff	??_find_volume,postinc2
 14617  000720  C0A7  FFDE         	movff	??_find_volume+1,postinc2
 14618  000724  C0A8  FFDE         	movff	??_find_volume+2,postinc2
 14619  000728  C0A9  FFDE         	movff	??_find_volume+3,postinc2
 14620                           
 14621                           ; BSR set to: 2
 14622                           ;ff.c: 2313: if (fmt == 3) {
 14623  00072C  0E03               	movlw	3
 14624  00072E  1937               	xorwf	find_volume@fmt& (0+255),w,b
 14625  000730  A4D8               	btfss	status,2,c
 14626  000732  D040               	goto	l1209
 14627                           
 14628                           ; BSR set to: 2
 14629                           ;ff.c: 2314: if (fs->n_rootdir) return FR_NO_FILESYSTEM;
 14630  000734  EE20 F008          	lfsr	2,8
 14631  000738  5138               	movf	find_volume@fs& (0+255),w,b
 14632  00073A  26D9               	addwf	fsr2l,f,c
 14633  00073C  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14634  00073E  22DA               	addwfc	fsr2h,f,c
 14635  000740  50DE               	movf	postinc2,w,c
 14636  000742  10DE               	iorwf	postinc2,w,c
 14637  000744  B4D8               	btfsc	status,2,c
 14638  000746  D002               	goto	l1210
 14639                           
 14640                           ; BSR set to: 2
 14641  000748  0E0D               	movlw	13
 14642                           
 14643                           ; BSR set to: 2
 14644  00074A  0012               	return	
 14645  00074C                     l1210:
 14646                           
 14647                           ; BSR set to: 2
 14648                           ;ff.c: 2315: fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
 14649                           
 14650                           ; BSR set to: 2
 14651  00074C  EE20 F05A          	lfsr	2,90
 14652  000750  5138               	movf	find_volume@fs& (0+255),w,b
 14653  000752  26D9               	addwf	fsr2l,f,c
 14654  000754  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14655  000756  22DA               	addwfc	fsr2h,f,c
 14656  000758  EE10 F022          	lfsr	1,34
 14657  00075C  5138               	movf	find_volume@fs& (0+255),w,b
 14658  00075E  26E1               	addwf	fsr1l,f,c
 14659  000760  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14660  000762  22E2               	addwfc	fsr1h,f,c
 14661  000764  CFDE FFE6          	movff	postinc2,postinc1
 14662  000768  CFDE FFE6          	movff	postinc2,postinc1
 14663  00076C  CFDE FFE6          	movff	postinc2,postinc1
 14664  000770  CFDE FFE6          	movff	postinc2,postinc1
 14665                           
 14666                           ; BSR set to: 2
 14667                           ;ff.c: 2316: szbfat = fs->n_fatent * 4;
 14668  000774  EE20 F012          	lfsr	2,18
 14669  000778  5138               	movf	find_volume@fs& (0+255),w,b
 14670  00077A  26D9               	addwf	fsr2l,f,c
 14671  00077C  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14672  00077E  22DA               	addwfc	fsr2h,f,c
 14673  000780  CFDE F0A6          	movff	postinc2,??_find_volume
 14674  000784  CFDE F0A7          	movff	postinc2,??_find_volume+1
 14675  000788  CFDE F0A8          	movff	postinc2,??_find_volume+2
 14676  00078C  CFDE F0A9          	movff	postinc2,??_find_volume+3
 14677  000790  0E02               	movlw	2
 14678  000792                     u14985:
 14679  000792  90D8               	bcf	status,0,c
 14680  000794  0100               	movlb	0	; () banked
 14681  000796  37A6               	rlcf	??_find_volume& (0+255),f,b
 14682  000798  37A7               	rlcf	(??_find_volume+1)& (0+255),f,b
 14683  00079A  37A8               	rlcf	(??_find_volume+2)& (0+255),f,b
 14684  00079C  37A9               	rlcf	(??_find_volume+3)& (0+255),f,b
 14685  00079E  2EE8               	decfsz	wreg,f,c
 14686  0007A0  D7F8               	goto	u14985
 14687  0007A2  C0A6  F216         	movff	??_find_volume,find_volume@szbfat
 14688  0007A6  C0A7  F217         	movff	??_find_volume+1,find_volume@szbfat+1
 14689  0007AA  C0A8  F218         	movff	??_find_volume+2,find_volume@szbfat+2
 14690  0007AE  C0A9  F219         	movff	??_find_volume+3,find_volume@szbfat+3
 14691                           
 14692                           ;ff.c: 2317: } else {
 14693  0007B2  D0AC               	goto	l1216
 14694  0007B4                     l1209:
 14695                           
 14696                           ;ff.c: 2318: if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
 14697                           
 14698                           ; BSR set to: 0
 14699  0007B4  0102               	movlb	2	; () banked
 14700  0007B6  EE20 F008          	lfsr	2,8
 14701  0007BA  5138               	movf	find_volume@fs& (0+255),w,b
 14702  0007BC  26D9               	addwf	fsr2l,f,c
 14703  0007BE  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14704  0007C0  22DA               	addwfc	fsr2h,f,c
 14705  0007C2  50DE               	movf	postinc2,w,c
 14706  0007C4  10DE               	iorwf	postinc2,w,c
 14707  0007C6  A4D8               	btfss	status,2,c
 14708  0007C8  D002               	goto	l1212
 14709                           
 14710                           ; BSR set to: 2
 14711  0007CA  0E0D               	movlw	13
 14712                           
 14713                           ; BSR set to: 2
 14714  0007CC  0012               	return	
 14715  0007CE                     l1212:
 14716                           
 14717                           ; BSR set to: 2
 14718                           ;ff.c: 2319: fs->dirbase = fs->fatbase + fasize;
 14719                           
 14720                           ; BSR set to: 2
 14721  0007CE  EE20 F01E          	lfsr	2,30
 14722  0007D2  5138               	movf	find_volume@fs& (0+255),w,b
 14723  0007D4  26D9               	addwf	fsr2l,f,c
 14724  0007D6  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14725  0007D8  22DA               	addwfc	fsr2h,f,c
 14726  0007DA  CFDE F0A6          	movff	postinc2,??_find_volume
 14727  0007DE  CFDE F0A7          	movff	postinc2,??_find_volume+1
 14728  0007E2  CFDE F0A8          	movff	postinc2,??_find_volume+2
 14729  0007E6  CFDE F0A9          	movff	postinc2,??_find_volume+3
 14730  0007EA  512D               	movf	find_volume@fasize& (0+255),w,b
 14731  0007EC  0100               	movlb	0	; () banked
 14732  0007EE  25A6               	addwf	??_find_volume& (0+255),w,b
 14733  0007F0  6FAA               	movwf	(??_find_volume+4)& (0+255),b
 14734  0007F2  0102               	movlb	2	; () banked
 14735  0007F4  512E               	movf	(find_volume@fasize+1)& (0+255),w,b
 14736  0007F6  0100               	movlb	0	; () banked
 14737  0007F8  21A7               	addwfc	(??_find_volume+1)& (0+255),w,b
 14738  0007FA  6FAB               	movwf	(??_find_volume+5)& (0+255),b
 14739  0007FC  0102               	movlb	2	; () banked
 14740  0007FE  512F               	movf	(find_volume@fasize+2)& (0+255),w,b
 14741  000800  0100               	movlb	0	; () banked
 14742  000802  21A8               	addwfc	(??_find_volume+2)& (0+255),w,b
 14743  000804  6FAC               	movwf	(??_find_volume+6)& (0+255),b
 14744  000806  0102               	movlb	2	; () banked
 14745  000808  5130               	movf	(find_volume@fasize+3)& (0+255),w,b
 14746  00080A  0100               	movlb	0	; () banked
 14747  00080C  21A9               	addwfc	(??_find_volume+3)& (0+255),w,b
 14748  00080E  6FAD               	movwf	(??_find_volume+7)& (0+255),b
 14749  000810  0102               	movlb	2	; () banked
 14750  000812  EE20 F022          	lfsr	2,34
 14751  000816  5138               	movf	find_volume@fs& (0+255),w,b
 14752  000818  26D9               	addwf	fsr2l,f,c
 14753  00081A  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14754  00081C  22DA               	addwfc	fsr2h,f,c
 14755  00081E  C0AA  FFDE         	movff	??_find_volume+4,postinc2
 14756  000822  C0AB  FFDE         	movff	??_find_volume+5,postinc2
 14757  000826  C0AC  FFDE         	movff	??_find_volume+6,postinc2
 14758  00082A  C0AD  FFDE         	movff	??_find_volume+7,postinc2
 14759                           
 14760                           ; BSR set to: 2
 14761                           ;ff.c: 2320: szbfat = (fmt == 2) ?
 14762                           ;ff.c: 2321: fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 14763  00082E  0E02               	movlw	2
 14764  000830  1937               	xorwf	find_volume@fmt& (0+255),w,b
 14765  000832  B4D8               	btfsc	status,2,c
 14766  000834  D04C               	goto	l1214
 14767                           
 14768                           ; BSR set to: 2
 14769  000836  EE20 F012          	lfsr	2,18
 14770  00083A  5138               	movf	find_volume@fs& (0+255),w,b
 14771  00083C  26D9               	addwf	fsr2l,f,c
 14772  00083E  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14773  000840  22DA               	addwfc	fsr2h,f,c
 14774  000842  CFDE F0A6          	movff	postinc2,??_find_volume
 14775  000846  CFDE F0A7          	movff	postinc2,??_find_volume+1
 14776  00084A  CFDE F0A8          	movff	postinc2,??_find_volume+2
 14777  00084E  CFDE F0A9          	movff	postinc2,??_find_volume+3
 14778  000852  0E01               	movlw	1
 14779  000854  0100               	movlb	0	; () banked
 14780  000856  15A6               	andwf	??_find_volume& (0+255),w,b
 14781  000858  6FAA               	movwf	(??_find_volume+4)& (0+255),b
 14782  00085A  0E00               	movlw	0
 14783  00085C  15A7               	andwf	(??_find_volume+1)& (0+255),w,b
 14784  00085E  6FAB               	movwf	(??_find_volume+5)& (0+255),b
 14785  000860  0E00               	movlw	0
 14786  000862  15A8               	andwf	(??_find_volume+2)& (0+255),w,b
 14787  000864  6FAC               	movwf	(??_find_volume+6)& (0+255),b
 14788  000866  0E00               	movlw	0
 14789  000868  15A9               	andwf	(??_find_volume+3)& (0+255),w,b
 14790  00086A  6FAD               	movwf	(??_find_volume+7)& (0+255),b
 14791  00086C  0102               	movlb	2	; () banked
 14792  00086E  EE20 F012          	lfsr	2,18
 14793  000872  5138               	movf	find_volume@fs& (0+255),w,b
 14794  000874  26D9               	addwf	fsr2l,f,c
 14795  000876  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14796  000878  22DA               	addwfc	fsr2h,f,c
 14797  00087A  CFDE F01A          	movff	postinc2,___lmul@multiplier
 14798  00087E  CFDE F01B          	movff	postinc2,___lmul@multiplier+1
 14799  000882  CFDE F01C          	movff	postinc2,___lmul@multiplier+2
 14800  000886  CFDE F01D          	movff	postinc2,___lmul@multiplier+3
 14801  00088A  0E03               	movlw	3
 14802  00088C  6E1E               	movwf	___lmul@multiplicand,c
 14803  00088E  0E00               	movlw	0
 14804  000890  6E1F               	movwf	___lmul@multiplicand+1,c
 14805  000892  0E00               	movlw	0
 14806  000894  6E20               	movwf	___lmul@multiplicand+2,c
 14807  000896  0E00               	movlw	0
 14808  000898  6E21               	movwf	___lmul@multiplicand+3,c
 14809  00089A  EC03  F029         	call	___lmul	;wreg free
 14810  00089E  90D8               	bcf	status,0,c
 14811  0008A0  321D               	rrcf	?___lmul+3,f,c
 14812  0008A2  321C               	rrcf	?___lmul+2,f,c
 14813  0008A4  321B               	rrcf	?___lmul+1,f,c
 14814  0008A6  321A               	rrcf	?___lmul,f,c
 14815  0008A8  0100               	movlb	0	; () banked
 14816  0008AA  51AA               	movf	(??_find_volume+4)& (0+255),w,b
 14817  0008AC  241A               	addwf	?___lmul,w,c
 14818  0008AE  0102               	movlb	2	; () banked
 14819  0008B0  6F16               	movwf	find_volume@szbfat& (0+255),b
 14820  0008B2  0100               	movlb	0	; () banked
 14821  0008B4  51AB               	movf	(??_find_volume+5)& (0+255),w,b
 14822  0008B6  201B               	addwfc	?___lmul+1,w,c
 14823  0008B8  0102               	movlb	2	; () banked
 14824  0008BA  6F17               	movwf	(find_volume@szbfat+1)& (0+255),b
 14825  0008BC  0100               	movlb	0	; () banked
 14826  0008BE  51AC               	movf	(??_find_volume+6)& (0+255),w,b
 14827  0008C0  201C               	addwfc	?___lmul+2,w,c
 14828  0008C2  0102               	movlb	2	; () banked
 14829  0008C4  6F18               	movwf	(find_volume@szbfat+2)& (0+255),b
 14830  0008C6  0100               	movlb	0	; () banked
 14831  0008C8  51AD               	movf	(??_find_volume+7)& (0+255),w,b
 14832  0008CA  201D               	addwfc	?___lmul+3,w,c
 14833  0008CC  D01D               	goto	L13
 14834  0008CE                     l1214:
 14835                           
 14836                           ; BSR set to: 2
 14837                           
 14838                           ; BSR set to: 2
 14839  0008CE  EE20 F012          	lfsr	2,18
 14840  0008D2  5138               	movf	find_volume@fs& (0+255),w,b
 14841  0008D4  26D9               	addwf	fsr2l,f,c
 14842  0008D6  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14843  0008D8  22DA               	addwfc	fsr2h,f,c
 14844  0008DA  CFDE F0A6          	movff	postinc2,??_find_volume
 14845  0008DE  CFDE F0A7          	movff	postinc2,??_find_volume+1
 14846  0008E2  CFDE F0A8          	movff	postinc2,??_find_volume+2
 14847  0008E6  CFDE F0A9          	movff	postinc2,??_find_volume+3
 14848  0008EA  90D8               	bcf	status,0,c
 14849  0008EC  0100               	movlb	0	; () banked
 14850  0008EE  35A6               	rlcf	??_find_volume& (0+255),w,b
 14851  0008F0  0102               	movlb	2	; () banked
 14852  0008F2  6F16               	movwf	find_volume@szbfat& (0+255),b
 14853  0008F4  0100               	movlb	0	; () banked
 14854  0008F6  35A7               	rlcf	(??_find_volume+1)& (0+255),w,b
 14855  0008F8  0102               	movlb	2	; () banked
 14856  0008FA  6F17               	movwf	(find_volume@szbfat+1)& (0+255),b
 14857  0008FC  0100               	movlb	0	; () banked
 14858  0008FE  35A8               	rlcf	(??_find_volume+2)& (0+255),w,b
 14859  000900  0102               	movlb	2	; () banked
 14860  000902  6F18               	movwf	(find_volume@szbfat+2)& (0+255),b
 14861  000904  0100               	movlb	0	; () banked
 14862  000906  35A9               	rlcf	(??_find_volume+3)& (0+255),w,b
 14863  000908                     L13:
 14864  000908  0102               	movlb	2	; () banked
 14865  00090A  6F19               	movwf	(find_volume@szbfat+3)& (0+255),b
 14866  00090C                     l1216:
 14867                           
 14868                           ;ff.c: 2322: }
 14869                           ;ff.c: 2323: if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
 14870                           
 14871                           ; BSR set to: 2
 14872  00090C  0EFF               	movlw	255
 14873  00090E  0102               	movlb	2	; () banked
 14874  000910  2516               	addwf	find_volume@szbfat& (0+255),w,b
 14875  000912  0100               	movlb	0	; () banked
 14876  000914  6FA6               	movwf	??_find_volume& (0+255),b
 14877  000916  0E01               	movlw	1
 14878  000918  0102               	movlb	2	; () banked
 14879  00091A  2117               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
 14880  00091C  0100               	movlb	0	; () banked
 14881  00091E  6FA7               	movwf	(??_find_volume+1)& (0+255),b
 14882  000920  0E00               	movlw	0
 14883  000922  0102               	movlb	2	; () banked
 14884  000924  2118               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
 14885  000926  0100               	movlb	0	; () banked
 14886  000928  6FA8               	movwf	(??_find_volume+2)& (0+255),b
 14887  00092A  0E00               	movlw	0
 14888  00092C  0102               	movlb	2	; () banked
 14889  00092E  2119               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
 14890  000930  0100               	movlb	0	; () banked
 14891  000932  6FA9               	movwf	(??_find_volume+3)& (0+255),b
 14892  000934  0E0A               	movlw	10
 14893  000936  D005               	goto	u15010
 14894  000938                     u15015:
 14895  000938  90D8               	bcf	status,0,c
 14896  00093A  33A9               	rrcf	(??_find_volume+3)& (0+255),f,b
 14897  00093C  33A8               	rrcf	(??_find_volume+2)& (0+255),f,b
 14898  00093E  33A7               	rrcf	(??_find_volume+1)& (0+255),f,b
 14899  000940  33A6               	rrcf	??_find_volume& (0+255),f,b
 14900  000942                     u15010:
 14901  000942  2EE8               	decfsz	wreg,f,c
 14902  000944  D7F9               	goto	u15015
 14903  000946  0102               	movlb	2	; () banked
 14904  000948  EE20 F016          	lfsr	2,22
 14905  00094C  5138               	movf	find_volume@fs& (0+255),w,b
 14906  00094E  26D9               	addwf	fsr2l,f,c
 14907  000950  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14908  000952  22DA               	addwfc	fsr2h,f,c
 14909  000954  0100               	movlb	0	; () banked
 14910  000956  51A6               	movf	??_find_volume& (0+255),w,b
 14911  000958  5CDE               	subwf	postinc2,w,c
 14912  00095A  51A7               	movf	(??_find_volume+1)& (0+255),w,b
 14913  00095C  58DE               	subwfb	postinc2,w,c
 14914  00095E  51A8               	movf	(??_find_volume+2)& (0+255),w,b
 14915  000960  58DE               	subwfb	postinc2,w,c
 14916  000962  51A9               	movf	(??_find_volume+3)& (0+255),w,b
 14917  000964  58DE               	subwfb	postinc2,w,c
 14918  000966  B0D8               	btfsc	status,0,c
 14919  000968  D002               	goto	l1217
 14920                           
 14921                           ; BSR set to: 0
 14922                           ;ff.c: 2324: return FR_NO_FILESYSTEM;
 14923  00096A  0E0D               	movlw	13
 14924                           
 14925                           ; BSR set to: 0
 14926  00096C  0012               	return	
 14927  00096E                     l1217:
 14928                           
 14929                           ; BSR set to: 0
 14930                           ;ff.c: 2328: fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 14931                           
 14932                           ; BSR set to: 0
 14933  00096E  0102               	movlb	2	; () banked
 14934  000970  EE20 F00E          	lfsr	2,14
 14935  000974  5138               	movf	find_volume@fs& (0+255),w,b
 14936  000976  26D9               	addwf	fsr2l,f,c
 14937  000978  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14938  00097A  22DA               	addwfc	fsr2h,f,c
 14939  00097C  0EFF               	movlw	255
 14940  00097E  6EDE               	movwf	postinc2,c
 14941  000980  0EFF               	movlw	255
 14942  000982  6EDE               	movwf	postinc2,c
 14943  000984  0EFF               	movlw	255
 14944  000986  6EDE               	movwf	postinc2,c
 14945  000988  0EFF               	movlw	255
 14946  00098A  6EDD               	movwf	postdec2,c
 14947  00098C  52DD               	movf	postdec2,f,c
 14948  00098E  52DD               	movf	postdec2,f,c
 14949  000990  EE10 F00A          	lfsr	1,10
 14950  000994  5138               	movf	find_volume@fs& (0+255),w,b
 14951  000996  26E1               	addwf	fsr1l,f,c
 14952  000998  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14953  00099A  22E2               	addwfc	fsr1h,f,c
 14954  00099C  CFDE FFE6          	movff	postinc2,postinc1
 14955  0009A0  CFDE FFE6          	movff	postinc2,postinc1
 14956  0009A4  CFDE FFE6          	movff	postinc2,postinc1
 14957  0009A8  CFDE FFE6          	movff	postinc2,postinc1
 14958                           
 14959                           ; BSR set to: 2
 14960                           ;ff.c: 2331: fs->fsi_flag = 0x80;
 14961  0009AC  EE20 F005          	lfsr	2,5
 14962  0009B0  5138               	movf	find_volume@fs& (0+255),w,b
 14963  0009B2  26D9               	addwf	fsr2l,f,c
 14964  0009B4  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14965  0009B6  22DA               	addwfc	fsr2h,f,c
 14966  0009B8  0E80               	movlw	128
 14967  0009BA  6EDF               	movwf	indf2,c
 14968                           
 14969                           ; BSR set to: 2
 14970                           ;ff.c: 2333: if (fmt == 3
 14971                           ;ff.c: 2334: && (WORD)(*(WORD*)(BYTE*)(fs->win + 48)) == 1
 14972                           ;ff.c: 2335: && move_window(fs, bsect + 1) == FR_OK)
 14973  0009BC  0E03               	movlw	3
 14974  0009BE  1937               	xorwf	find_volume@fmt& (0+255),w,b
 14975  0009C0  A4D8               	btfss	status,2,c
 14976  0009C2  D08A               	goto	l1219
 14977                           
 14978                           ; BSR set to: 2
 14979  0009C4  EE20 F05E          	lfsr	2,94
 14980  0009C8  5138               	movf	find_volume@fs& (0+255),w,b
 14981  0009CA  26D9               	addwf	fsr2l,f,c
 14982  0009CC  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 14983  0009CE  22DA               	addwfc	fsr2h,f,c
 14984  0009D0  04DE               	decf	postinc2,w,c
 14985  0009D2  10DE               	iorwf	postinc2,w,c
 14986  0009D4  A4D8               	btfss	status,2,c
 14987  0009D6  D080               	goto	l1219
 14988                           
 14989                           ; BSR set to: 2
 14990  0009D8  C238  F08C         	movff	find_volume@fs,move_window@fs
 14991  0009DC  C239  F08D         	movff	find_volume@fs+1,move_window@fs+1
 14992  0009E0  0E01               	movlw	1
 14993  0009E2  2531               	addwf	find_volume@bsect& (0+255),w,b
 14994  0009E4  0100               	movlb	0	; () banked
 14995  0009E6  6F8E               	movwf	move_window@sector& (0+255),b
 14996  0009E8  0E00               	movlw	0
 14997  0009EA  0102               	movlb	2	; () banked
 14998  0009EC  2132               	addwfc	(find_volume@bsect+1)& (0+255),w,b
 14999  0009EE  0100               	movlb	0	; () banked
 15000  0009F0  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 15001  0009F2  0E00               	movlw	0
 15002  0009F4  0102               	movlb	2	; () banked
 15003  0009F6  2133               	addwfc	(find_volume@bsect+2)& (0+255),w,b
 15004  0009F8  0100               	movlb	0	; () banked
 15005  0009FA  6F90               	movwf	(move_window@sector+2)& (0+255),b
 15006  0009FC  0E00               	movlw	0
 15007  0009FE  0102               	movlb	2	; () banked
 15008  000A00  2134               	addwfc	(find_volume@bsect+3)& (0+255),w,b
 15009  000A02  0100               	movlb	0	; () banked
 15010  000A04  6F91               	movwf	(move_window@sector+3)& (0+255),b
 15011  000A06  ECCA  F024         	call	_move_window	;wreg free
 15012  000A0A  0900               	iorlw	0
 15013  000A0C  A4D8               	btfss	status,2,c
 15014  000A0E  D064               	goto	l1219
 15015                           
 15016                           ;ff.c: 2336: {
 15017                           ;ff.c: 2337: fs->fsi_flag = 0;
 15018  000A10  0102               	movlb	2	; () banked
 15019  000A12  EE20 F005          	lfsr	2,5
 15020  000A16  5138               	movf	find_volume@fs& (0+255),w,b
 15021  000A18  26D9               	addwf	fsr2l,f,c
 15022  000A1A  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 15023  000A1C  22DA               	addwfc	fsr2h,f,c
 15024  000A1E  0E00               	movlw	0
 15025  000A20  6EDF               	movwf	indf2,c
 15026                           
 15027                           ;ff.c: 2338: if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
 15028                           ;ff.c: 2339: && (DWORD)(*(DWORD*)(BYTE*)(fs->win + 0)) == 0x41615252
 15029                           ;ff.c: 2340: && (DWORD)(*(DWORD*)(BYTE*)(fs->win + 484)) == 0x61417272)
 15030  000A22  EE22 F02C          	lfsr	2,556
 15031  000A26  5138               	movf	find_volume@fs& (0+255),w,b
 15032  000A28  26D9               	addwf	fsr2l,f,c
 15033  000A2A  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 15034  000A2C  22DA               	addwfc	fsr2h,f,c
 15035  000A2E  0E55               	movlw	85
 15036  000A30  18DE               	xorwf	postinc2,w,c
 15037  000A32  E152               	bnz	l11637
 15038  000A34  0EAA               	movlw	170
 15039  000A36  18DE               	xorwf	postinc2,w,c
 15040  000A38  A4D8               	btfss	status,2,c
 15041  000A3A  D04E               	goto	l1219
 15042                           
 15043                           ; BSR set to: 2
 15044  000A3C  EE20 F02E          	lfsr	2,46
 15045  000A40  5138               	movf	find_volume@fs& (0+255),w,b
 15046  000A42  26D9               	addwf	fsr2l,f,c
 15047  000A44  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 15048  000A46  22DA               	addwfc	fsr2h,f,c
 15049  000A48  0E52               	movlw	82
 15050  000A4A  18DE               	xorwf	postinc2,w,c
 15051  000A4C  E145               	bnz	l11637
 15052  000A4E  0E52               	movlw	82
 15053  000A50  18DE               	xorwf	postinc2,w,c
 15054  000A52  E142               	bnz	l11637
 15055  000A54  0E61               	movlw	97
 15056  000A56  18DE               	xorwf	postinc2,w,c
 15057  000A58  E13F               	bnz	l11637
 15058  000A5A  0E41               	movlw	65
 15059  000A5C  18DE               	xorwf	postinc2,w,c
 15060  000A5E  A4D8               	btfss	status,2,c
 15061  000A60  D03B               	goto	l1219
 15062                           
 15063                           ; BSR set to: 2
 15064  000A62  EE22 F012          	lfsr	2,530
 15065  000A66  5138               	movf	find_volume@fs& (0+255),w,b
 15066  000A68  26D9               	addwf	fsr2l,f,c
 15067  000A6A  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 15068  000A6C  22DA               	addwfc	fsr2h,f,c
 15069  000A6E  0E72               	movlw	114
 15070  000A70  18DE               	xorwf	postinc2,w,c
 15071  000A72  E132               	bnz	l11637
 15072  000A74  0E72               	movlw	114
 15073  000A76  18DE               	xorwf	postinc2,w,c
 15074  000A78  E12F               	bnz	l11637
 15075  000A7A  0E41               	movlw	65
 15076  000A7C  18DE               	xorwf	postinc2,w,c
 15077  000A7E  E12C               	bnz	l11637
 15078  000A80  0E61               	movlw	97
 15079  000A82  18DE               	xorwf	postinc2,w,c
 15080  000A84  A4D8               	btfss	status,2,c
 15081  000A86  D028               	goto	l1219
 15082                           
 15083                           ; BSR set to: 2
 15084                           ;ff.c: 2341: {
 15085                           ;ff.c: 2343: fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488));
 15086  000A88  EE22 F016          	lfsr	2,534
 15087  000A8C  5138               	movf	find_volume@fs& (0+255),w,b
 15088  000A8E  26D9               	addwf	fsr2l,f,c
 15089  000A90  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 15090  000A92  22DA               	addwfc	fsr2h,f,c
 15091  000A94  EE10 F00E          	lfsr	1,14
 15092  000A98  5138               	movf	find_volume@fs& (0+255),w,b
 15093  000A9A  26E1               	addwf	fsr1l,f,c
 15094  000A9C  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 15095  000A9E  22E2               	addwfc	fsr1h,f,c
 15096  000AA0  CFDE FFE6          	movff	postinc2,postinc1
 15097  000AA4  CFDE FFE6          	movff	postinc2,postinc1
 15098  000AA8  CFDE FFE6          	movff	postinc2,postinc1
 15099  000AAC  CFDE FFE6          	movff	postinc2,postinc1
 15100                           
 15101                           ;ff.c: 2346: fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
 15102  000AB0  EE22 F01A          	lfsr	2,538
 15103  000AB4  5138               	movf	find_volume@fs& (0+255),w,b
 15104  000AB6  26D9               	addwf	fsr2l,f,c
 15105  000AB8  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 15106  000ABA  22DA               	addwfc	fsr2h,f,c
 15107  000ABC  EE10 F00A          	lfsr	1,10
 15108  000AC0  5138               	movf	find_volume@fs& (0+255),w,b
 15109  000AC2  26E1               	addwf	fsr1l,f,c
 15110  000AC4  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 15111  000AC6  22E2               	addwfc	fsr1h,f,c
 15112  000AC8  CFDE FFE6          	movff	postinc2,postinc1
 15113  000ACC  CFDE FFE6          	movff	postinc2,postinc1
 15114  000AD0  CFDE FFE6          	movff	postinc2,postinc1
 15115  000AD4  CFDE FFE6          	movff	postinc2,postinc1
 15116  000AD8                     l1219:
 15117  000AD8                     l11637:
 15118                           
 15119                           ;ff.c: 2348: }
 15120                           ;ff.c: 2349: }
 15121                           ;ff.c: 2352: fs->fs_type = fmt;
 15122  000AD8  C238  FFD9         	movff	find_volume@fs,fsr2l
 15123  000ADC  C239  FFDA         	movff	find_volume@fs+1,fsr2h
 15124  000AE0  C237  FFDF         	movff	find_volume@fmt,indf2
 15125                           
 15126                           ;ff.c: 2353: fs->id = ++Fsid;
 15127  000AE4  0100               	movlb	0	; () banked
 15128  000AE6  4BF3               	infsnz	_Fsid& (0+255),f,b
 15129  000AE8  2BF4               	incf	(_Fsid+1)& (0+255),f,b
 15130  000AEA  0102               	movlb	2	; () banked
 15131  000AEC  EE20 F006          	lfsr	2,6
 15132  000AF0  5138               	movf	find_volume@fs& (0+255),w,b
 15133  000AF2  26D9               	addwf	fsr2l,f,c
 15134  000AF4  5139               	movf	(find_volume@fs+1)& (0+255),w,b
 15135  000AF6  22DA               	addwfc	fsr2h,f,c
 15136  000AF8  C0F3  FFDE         	movff	_Fsid,postinc2
 15137  000AFC  C0F4  FFDD         	movff	_Fsid+1,postdec2
 15138                           
 15139                           ; BSR set to: 2
 15140                           ;ff.c: 2361: return FR_OK;
 15141  000B00  0E00               	movlw	0
 15142  000B02  0012               	return	
 15143  000B04                     __end_of_find_volume:
 15144                           	opt stack 0
 15145                           tblptru	equ	0xFF8
 15146                           tblptrh	equ	0xFF7
 15147                           tblptrl	equ	0xFF6
 15148                           tablat	equ	0xFF5
 15149                           prodh	equ	0xFF4
 15150                           prodl	equ	0xFF3
 15151                           intcon	equ	0xFF2
 15152                           intcon2	equ	0xFF1
 15153                           intcon3	equ	0xFF0
 15154                           indf0	equ	0xFEF
 15155                           postinc0	equ	0xFEE
 15156                           fsr0h	equ	0xFEA
 15157                           fsr0l	equ	0xFE9
 15158                           wreg	equ	0xFE8
 15159                           indf1	equ	0xFE7
 15160                           postinc1	equ	0xFE6
 15161                           postdec1	equ	0xFE5
 15162                           fsr1h	equ	0xFE2
 15163                           fsr1l	equ	0xFE1
 15164                           indf2	equ	0xFDF
 15165                           postinc2	equ	0xFDE
 15166                           postdec2	equ	0xFDD
 15167                           plusw2	equ	0xFDB
 15168                           fsr2h	equ	0xFDA
 15169                           fsr2l	equ	0xFD9
 15170                           status	equ	0xFD8
 15171                           
 15172 ;; *************** function _get_ldnumber *****************
 15173 ;; Defined at:
 15174 ;;		line 2114 in file "bibliotecas/ff.c"
 15175 ;; Parameters:    Size  Location     Type
 15176 ;;  path            2   25[COMRAM] PTR PTR const unsigned c
 15177 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
 15178 ;; Auto vars:     Size  Location     Type
 15179 ;;  tt              2   37[COMRAM] PTR const unsigned char 
 15180 ;;		 -> filename(15), STR_10(1), 
 15181 ;;  i               2   35[COMRAM] unsigned int 
 15182 ;;  vol             2   33[COMRAM] int 
 15183 ;;  tp              2   31[COMRAM] PTR const unsigned char 
 15184 ;;		 -> filename(15), STR_10(1), 
 15185 ;; Return value:  Size  Location     Type
 15186 ;;                  2   25[COMRAM] int 
 15187 ;; Registers used:
 15188 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15189 ;; Tracked objects:
 15190 ;;		On entry : 0/0
 15191 ;;		On exit  : 0/0
 15192 ;;		Unchanged: 0/0
 15193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15194 ;;      Params:         2       0       0       0       0       0       0       0       0
 15195 ;;      Locals:        10       0       0       0       0       0       0       0       0
 15196 ;;      Temps:          2       0       0       0       0       0       0       0       0
 15197 ;;      Totals:        14       0       0       0       0       0       0       0       0
 15198 ;;Total ram usage:       14 bytes
 15199 ;; Hardware stack levels used:    1
 15200 ;; Hardware stack levels required when called:    2
 15201 ;; This function calls:
 15202 ;;		Nothing
 15203 ;; This function is called by:
 15204 ;;		_find_volume
 15205 ;;		_f_mount
 15206 ;; This function uses a non-reentrant model
 15207 ;;
 15208                           
 15209                           	psect	text44
 15210  003BA6                     __ptext44:
 15211                           	opt stack 0
 15212  003BA6                     _get_ldnumber:
 15213                           	opt stack 24
 15214                           
 15215                           ;ff.c: 2118: const TCHAR *tp, *tt;
 15216                           ;ff.c: 2119: UINT i;
 15217                           ;ff.c: 2120: int vol = -1;
 15218                           
 15219                           ;incstack = 0
 15220  003BA6  6822               	setf	get_ldnumber@vol,c
 15221  003BA8  6823               	setf	get_ldnumber@vol+1,c
 15222                           
 15223                           ;ff.c: 2129: if (*path) {
 15224  003BAA  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 15225  003BAE  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 15226  003BB2  50DE               	movf	postinc2,w,c
 15227  003BB4  10DE               	iorwf	postinc2,w,c
 15228  003BB6  B4D8               	btfsc	status,2,c
 15229  003BB8  D096               	goto	l1145
 15230                           
 15231                           ;ff.c: 2130: for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
 15232  003BBA  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 15233  003BBE  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 15234  003BC2  CFDE F026          	movff	postinc2,get_ldnumber@tt
 15235  003BC6  CFDD F027          	movff	postdec2,get_ldnumber@tt+1
 15236  003BCA  D002               	goto	l1146
 15237  003BCC  4A26               	infsnz	get_ldnumber@tt,f,c
 15238  003BCE  2A27               	incf	get_ldnumber@tt+1,f,c
 15239  003BD0                     l1146:
 15240  003BD0  0E00               	movlw	0
 15241  003BD2  6E1F               	movwf	_get_ldnumber$2292+1,c
 15242  003BD4  0E21               	movlw	33
 15243  003BD6  6E1E               	movwf	_get_ldnumber$2292,c
 15244  003BD8  C026  FFF6         	movff	get_ldnumber@tt,tblptrl
 15245  003BDC  C027  FFF7         	movff	get_ldnumber@tt+1,tblptrh
 15246  003BE0  6AF8               	clrf	tblptru,c
 15247  003BE2  0E07               	movlw	(high __ramtop+-1)
 15248  003BE4  64F7               	cpfsgt	tblptrh,c
 15249  003BE6  D003               	bra	u14177
 15250  003BE8  0008               	tblrd		*
 15251  003BEA  50F5               	movf	tablat,w,c
 15252  003BEC  D005               	bra	u14170
 15253  003BEE                     u14177:
 15254  003BEE  CFF6 FFE9          	movff	tblptrl,fsr0l
 15255  003BF2  CFF7 FFEA          	movff	tblptrh,fsr0h
 15256  003BF6  50EF               	movf	indf0,w,c
 15257  003BF8                     u14170:
 15258  003BF8  6E1C               	movwf	??_get_ldnumber& (0+255),c
 15259  003BFA  6A1D               	clrf	(??_get_ldnumber+1)& (0+255),c
 15260  003BFC  501E               	movf	_get_ldnumber$2292,w,c
 15261  003BFE  5C1C               	subwf	??_get_ldnumber,w,c
 15262  003C00  501F               	movf	_get_ldnumber$2292+1,w,c
 15263  003C02  581D               	subwfb	??_get_ldnumber+1,w,c
 15264  003C04  A0D8               	btfss	status,0,c
 15265  003C06  D013               	goto	u14200
 15266  003C08  C026  FFF6         	movff	get_ldnumber@tt,tblptrl
 15267  003C0C  C027  FFF7         	movff	get_ldnumber@tt+1,tblptrh
 15268  003C10  6AF8               	clrf	tblptru,c
 15269  003C12  0E07               	movlw	(high __ramtop+-1)
 15270  003C14  64F7               	cpfsgt	tblptrh,c
 15271  003C16  D003               	bra	u14197
 15272  003C18  0008               	tblrd		*
 15273  003C1A  50F5               	movf	tablat,w,c
 15274  003C1C  D005               	bra	u14190
 15275  003C1E                     u14197:
 15276  003C1E  CFF6 FFE9          	movff	tblptrl,fsr0l
 15277  003C22  CFF7 FFEA          	movff	tblptrh,fsr0h
 15278  003C26  50EF               	movf	indf0,w,c
 15279  003C28                     u14190:
 15280  003C28  0A3A               	xorlw	58
 15281  003C2A  A4D8               	btfss	status,2,c
 15282  003C2C  D7CF               	goto	l1147
 15283  003C2E                     u14200:
 15284                           
 15285                           ;ff.c: 2131: if (*tt == ':') {
 15286  003C2E  C026  FFF6         	movff	get_ldnumber@tt,tblptrl
 15287  003C32  C027  FFF7         	movff	get_ldnumber@tt+1,tblptrh
 15288  003C36  6AF8               	clrf	tblptru,c
 15289  003C38  0E07               	movlw	(high __ramtop+-1)
 15290  003C3A  64F7               	cpfsgt	tblptrh,c
 15291  003C3C  D003               	bra	u14217
 15292  003C3E  0008               	tblrd		*
 15293  003C40  50F5               	movf	tablat,w,c
 15294  003C42  D005               	bra	u14210
 15295  003C44                     u14217:
 15296  003C44  CFF6 FFE9          	movff	tblptrl,fsr0l
 15297  003C48  CFF7 FFEA          	movff	tblptrh,fsr0h
 15298  003C4C  50EF               	movf	indf0,w,c
 15299  003C4E                     u14210:
 15300  003C4E  0A3A               	xorlw	58
 15301  003C50  A4D8               	btfss	status,2,c
 15302  003C52  D045               	goto	l1155
 15303                           
 15304                           ;ff.c: 2132: tp = *path;
 15305  003C54  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 15306  003C58  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 15307  003C5C  CFDE F020          	movff	postinc2,get_ldnumber@tp
 15308  003C60  CFDD F021          	movff	postdec2,get_ldnumber@tp+1
 15309                           
 15310                           ;ff.c: 2133: i = *tp++ - '0';
 15311  003C64  C020  FFF6         	movff	get_ldnumber@tp,tblptrl
 15312  003C68  C021  FFF7         	movff	get_ldnumber@tp+1,tblptrh
 15313  003C6C  6AF8               	clrf	tblptru,c
 15314  003C6E  0E07               	movlw	(high __ramtop+-1)
 15315  003C70  64F7               	cpfsgt	tblptrh,c
 15316  003C72  D003               	bra	u14237
 15317  003C74  0008               	tblrd		*
 15318  003C76  50F5               	movf	tablat,w,c
 15319  003C78  D005               	bra	u14230
 15320  003C7A                     u14237:
 15321  003C7A  CFF6 FFE9          	movff	tblptrl,fsr0l
 15322  003C7E  CFF7 FFEA          	movff	tblptrh,fsr0h
 15323  003C82  50EF               	movf	indf0,w,c
 15324  003C84                     u14230:
 15325  003C84  6E1C               	movwf	??_get_ldnumber& (0+255),c
 15326  003C86  0ED0               	movlw	208
 15327  003C88  241C               	addwf	??_get_ldnumber,w,c
 15328  003C8A  6E24               	movwf	get_ldnumber@i,c
 15329  003C8C  6A25               	clrf	get_ldnumber@i+1,c
 15330  003C8E  0EFF               	movlw	255
 15331  003C90  2225               	addwfc	get_ldnumber@i+1,f,c
 15332  003C92  4A20               	infsnz	get_ldnumber@tp,f,c
 15333  003C94  2A21               	incf	get_ldnumber@tp+1,f,c
 15334                           
 15335                           ;ff.c: 2134: if (i < 10 && tp == tt) {
 15336  003C96  5025               	movf	get_ldnumber@i+1,w,c
 15337  003C98  E11D               	bnz	l11193
 15338  003C9A  0E0A               	movlw	10
 15339  003C9C  5C24               	subwf	get_ldnumber@i,w,c
 15340  003C9E  B0D8               	btfsc	status,0,c
 15341  003CA0  D019               	goto	l1157
 15342  003CA2  5026               	movf	get_ldnumber@tt,w,c
 15343  003CA4  1820               	xorwf	get_ldnumber@tp,w,c
 15344  003CA6  E116               	bnz	l11193
 15345  003CA8  5027               	movf	get_ldnumber@tt+1,w,c
 15346  003CAA  1821               	xorwf	get_ldnumber@tp+1,w,c
 15347  003CAC  A4D8               	btfss	status,2,c
 15348  003CAE  D012               	goto	l1157
 15349                           
 15350                           ;ff.c: 2135: if (i < 1) {
 15351  003CB0  5024               	movf	get_ldnumber@i,w,c
 15352  003CB2  1025               	iorwf	get_ldnumber@i+1,w,c
 15353  003CB4  A4D8               	btfss	status,2,c
 15354  003CB6  D00E               	goto	l1157
 15355                           
 15356                           ;ff.c: 2136: vol = (int)i;
 15357  003CB8  C024  F022         	movff	get_ldnumber@i,get_ldnumber@vol
 15358  003CBC  C025  F023         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
 15359                           
 15360                           ;ff.c: 2137: *path = ++tt;
 15361  003CC0  4A26               	infsnz	get_ldnumber@tt,f,c
 15362  003CC2  2A27               	incf	get_ldnumber@tt+1,f,c
 15363  003CC4  C01A  FFD9         	movff	get_ldnumber@path,fsr2l
 15364  003CC8  C01B  FFDA         	movff	get_ldnumber@path+1,fsr2h
 15365  003CCC  C026  FFDE         	movff	get_ldnumber@tt,postinc2
 15366  003CD0  C027  FFDD         	movff	get_ldnumber@tt+1,postdec2
 15367  003CD4                     l1157:
 15368  003CD4                     l11193:
 15369                           
 15370                           ;ff.c: 2138: }
 15371                           ;ff.c: 2139: }
 15372                           ;ff.c: 2156: return vol;
 15373  003CD4  C022  F01A         	movff	get_ldnumber@vol,?_get_ldnumber
 15374  003CD8  C023  F01B         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
 15375  003CDC  0012               	return	
 15376  003CDE                     l1155:
 15377                           
 15378                           ;ff.c: 2157: }
 15379                           ;ff.c: 2161: vol = 0;
 15380  003CDE  0E00               	movlw	0
 15381  003CE0  6E23               	movwf	get_ldnumber@vol+1,c
 15382  003CE2  0E00               	movlw	0
 15383  003CE4  6E22               	movwf	get_ldnumber@vol,c
 15384  003CE6                     l1145:
 15385                           
 15386                           ;ff.c: 2163: }
 15387                           ;ff.c: 2164: return vol;
 15388  003CE6  C022  F01A         	movff	get_ldnumber@vol,?_get_ldnumber
 15389  003CEA  C023  F01B         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
 15390  003CEE  0012               	return	
 15391  003CF0                     __end_of_get_ldnumber:
 15392                           	opt stack 0
 15393                           tblptru	equ	0xFF8
 15394                           tblptrh	equ	0xFF7
 15395                           tblptrl	equ	0xFF6
 15396                           tablat	equ	0xFF5
 15397                           prodh	equ	0xFF4
 15398                           prodl	equ	0xFF3
 15399                           intcon	equ	0xFF2
 15400                           intcon2	equ	0xFF1
 15401                           intcon3	equ	0xFF0
 15402                           indf0	equ	0xFEF
 15403                           postinc0	equ	0xFEE
 15404                           fsr0h	equ	0xFEA
 15405                           fsr0l	equ	0xFE9
 15406                           wreg	equ	0xFE8
 15407                           indf1	equ	0xFE7
 15408                           postinc1	equ	0xFE6
 15409                           postdec1	equ	0xFE5
 15410                           fsr1h	equ	0xFE2
 15411                           fsr1l	equ	0xFE1
 15412                           indf2	equ	0xFDF
 15413                           postinc2	equ	0xFDE
 15414                           postdec2	equ	0xFDD
 15415                           plusw2	equ	0xFDB
 15416                           fsr2h	equ	0xFDA
 15417                           fsr2l	equ	0xFD9
 15418                           status	equ	0xFD8
 15419                           
 15420 ;; *************** function _disk_status *****************
 15421 ;; Defined at:
 15422 ;;		line 71 in file "bibliotecas/diskio.c"
 15423 ;; Parameters:    Size  Location     Type
 15424 ;;  pdrv            1    wreg     unsigned char 
 15425 ;; Auto vars:     Size  Location     Type
 15426 ;;  pdrv            1   30[COMRAM] unsigned char 
 15427 ;;  result          2   28[COMRAM] int 
 15428 ;;  stat            1   31[COMRAM] unsigned char 
 15429 ;; Return value:  Size  Location     Type
 15430 ;;                  1    wreg      unsigned char 
 15431 ;; Registers used:
 15432 ;;		wreg, status,2, status,0, cstack
 15433 ;; Tracked objects:
 15434 ;;		On entry : 0/0
 15435 ;;		On exit  : 0/0
 15436 ;;		Unchanged: 0/0
 15437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15438 ;;      Params:         0       0       0       0       0       0       0       0       0
 15439 ;;      Locals:         4       0       0       0       0       0       0       0       0
 15440 ;;      Temps:          1       0       0       0       0       0       0       0       0
 15441 ;;      Totals:         5       0       0       0       0       0       0       0       0
 15442 ;;Total ram usage:        5 bytes
 15443 ;; Hardware stack levels used:    1
 15444 ;; Hardware stack levels required when called:    3
 15445 ;; This function calls:
 15446 ;;		_sdc_disk_status
 15447 ;; This function is called by:
 15448 ;;		_find_volume
 15449 ;;		_validate
 15450 ;; This function uses a non-reentrant model
 15451 ;;
 15452                           
 15453                           	psect	text45
 15454  00544A                     __ptext45:
 15455                           	opt stack 0
 15456  00544A                     _disk_status:
 15457                           	opt stack 23
 15458                           
 15459                           ;incstack = 0
 15460                           ;disk_status@pdrv stored from wreg
 15461  00544A  6E1F               	movwf	disk_status@pdrv,c
 15462                           
 15463                           ;diskio.c: 75: DSTATUS stat;
 15464                           ;diskio.c: 76: int result;
 15465                           ;diskio.c: 78: switch (pdrv) {
 15466  00544C  D011               	goto	l396
 15467  00544E                     
 15468                           ;diskio.c: 80: stat = sdc_disk_status(pdrv);
 15469  00544E  501F               	movf	disk_status@pdrv,w,c
 15470  005450  EC72  F02B         	call	_sdc_disk_status
 15471  005454  6E20               	movwf	disk_status@stat,c
 15472                           
 15473                           ;diskio.c: 84: return stat;
 15474  005456  5020               	movf	disk_status@stat,w,c
 15475  005458  0012               	return	
 15476  00545A                     
 15477                           ;diskio.c: 87: result = sdc_disk_status(pdrv);
 15478  00545A  501F               	movf	disk_status@pdrv,w,c
 15479  00545C  EC72  F02B         	call	_sdc_disk_status
 15480  005460  6E1C               	movwf	??_disk_status& (0+255),c
 15481  005462  501C               	movf	??_disk_status,w,c
 15482  005464  6E1D               	movwf	disk_status@result,c
 15483  005466  6A1E               	clrf	disk_status@result+1,c
 15484                           
 15485                           ;diskio.c: 91: return stat;
 15486  005468  5020               	movf	disk_status@stat,w,c
 15487  00546A  0012               	return	
 15488  00546C                     
 15489                           ;diskio.c: 98: return stat;
 15490  00546C  5020               	movf	disk_status@stat,w,c
 15491  00546E  0012               	return	
 15492  005470                     l396:
 15493  005470  501F               	movf	disk_status@pdrv,w,c
 15494                           
 15495                           ; Switch size 1, requested type "space"
 15496                           ; Number of cases is 3, Range of values is 0 to 2
 15497                           ; switch strategies available:
 15498                           ; Name         Instructions Cycles
 15499                           ; simple_byte           10     6 (average)
 15500                           ;	Chosen strategy is simple_byte
 15501  005472  0A00               	xorlw	0	; case 0
 15502  005474  B4D8               	btfsc	status,2,c
 15503  005476  D7EB               	goto	l397
 15504  005478  0A01               	xorlw	1	; case 1
 15505  00547A  B4D8               	btfsc	status,2,c
 15506  00547C  D7EE               	goto	l399
 15507  00547E  0A03               	xorlw	3	; case 2
 15508  005480  B4D8               	btfsc	status,2,c
 15509  005482  D7F4               	goto	l400
 15510                           
 15511                           ;diskio.c: 100: return 0x01;
 15512  005484  0E01               	movlw	1
 15513  005486  0012               	return	
 15514  005488                     __end_of_disk_status:
 15515                           	opt stack 0
 15516                           tblptru	equ	0xFF8
 15517                           tblptrh	equ	0xFF7
 15518                           tblptrl	equ	0xFF6
 15519                           tablat	equ	0xFF5
 15520                           prodh	equ	0xFF4
 15521                           prodl	equ	0xFF3
 15522                           intcon	equ	0xFF2
 15523                           intcon2	equ	0xFF1
 15524                           intcon3	equ	0xFF0
 15525                           indf0	equ	0xFEF
 15526                           postinc0	equ	0xFEE
 15527                           fsr0h	equ	0xFEA
 15528                           fsr0l	equ	0xFE9
 15529                           wreg	equ	0xFE8
 15530                           indf1	equ	0xFE7
 15531                           postinc1	equ	0xFE6
 15532                           postdec1	equ	0xFE5
 15533                           fsr1h	equ	0xFE2
 15534                           fsr1l	equ	0xFE1
 15535                           indf2	equ	0xFDF
 15536                           postinc2	equ	0xFDE
 15537                           postdec2	equ	0xFDD
 15538                           plusw2	equ	0xFDB
 15539                           fsr2h	equ	0xFDA
 15540                           fsr2l	equ	0xFD9
 15541                           status	equ	0xFD8
 15542                           
 15543 ;; *************** function _sdc_disk_status *****************
 15544 ;; Defined at:
 15545 ;;		line 660 in file "bibliotecas/diskio.c"
 15546 ;; Parameters:    Size  Location     Type
 15547 ;;  pdrv            1    wreg     unsigned char 
 15548 ;; Auto vars:     Size  Location     Type
 15549 ;;  pdrv            1   26[COMRAM] unsigned char 
 15550 ;;  stat            1   25[COMRAM] unsigned char 
 15551 ;;  cont            1    0        unsigned char 
 15552 ;;  buff            1    0        unsigned char 
 15553 ;; Return value:  Size  Location     Type
 15554 ;;                  1    wreg      unsigned char 
 15555 ;; Registers used:
 15556 ;;		wreg, status,2
 15557 ;; Tracked objects:
 15558 ;;		On entry : 0/0
 15559 ;;		On exit  : 0/0
 15560 ;;		Unchanged: 0/0
 15561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15562 ;;      Params:         0       0       0       0       0       0       0       0       0
 15563 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15564 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15565 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15566 ;;Total ram usage:        2 bytes
 15567 ;; Hardware stack levels used:    1
 15568 ;; Hardware stack levels required when called:    2
 15569 ;; This function calls:
 15570 ;;		Nothing
 15571 ;; This function is called by:
 15572 ;;		_disk_status
 15573 ;; This function uses a non-reentrant model
 15574 ;;
 15575                           
 15576                           	psect	text46
 15577  0056E4                     __ptext46:
 15578                           	opt stack 0
 15579  0056E4                     _sdc_disk_status:
 15580                           	opt stack 23
 15581                           
 15582                           ;incstack = 0
 15583                           ;sdc_disk_status@pdrv stored from wreg
 15584  0056E4  6E1B               	movwf	sdc_disk_status@pdrv,c
 15585                           
 15586                           ;diskio.c: 662: DSTATUS stat = 0;
 15587  0056E6  0E00               	movlw	0
 15588  0056E8  6E1A               	movwf	sdc_disk_status@stat,c
 15589                           
 15590                           ;diskio.c: 663: unsigned char buff, cont;
 15591                           ;diskio.c: 665: if (pdrv != 0) return 0x01;
 15592  0056EA  501B               	movf	sdc_disk_status@pdrv,w,c
 15593  0056EC  B4D8               	btfsc	status,2,c
 15594  0056EE  D002               	goto	l515
 15595  0056F0  0E01               	movlw	1
 15596  0056F2  0012               	return	
 15597  0056F4                     l515:
 15598                           
 15599                           ;diskio.c: 667: return FR_OK;
 15600  0056F4  0E00               	movlw	0
 15601  0056F6  0012               	return	
 15602  0056F8                     __end_of_sdc_disk_status:
 15603                           	opt stack 0
 15604                           tblptru	equ	0xFF8
 15605                           tblptrh	equ	0xFF7
 15606                           tblptrl	equ	0xFF6
 15607                           tablat	equ	0xFF5
 15608                           prodh	equ	0xFF4
 15609                           prodl	equ	0xFF3
 15610                           intcon	equ	0xFF2
 15611                           intcon2	equ	0xFF1
 15612                           intcon3	equ	0xFF0
 15613                           indf0	equ	0xFEF
 15614                           postinc0	equ	0xFEE
 15615                           fsr0h	equ	0xFEA
 15616                           fsr0l	equ	0xFE9
 15617                           wreg	equ	0xFE8
 15618                           indf1	equ	0xFE7
 15619                           postinc1	equ	0xFE6
 15620                           postdec1	equ	0xFE5
 15621                           fsr1h	equ	0xFE2
 15622                           fsr1l	equ	0xFE1
 15623                           indf2	equ	0xFDF
 15624                           postinc2	equ	0xFDE
 15625                           postdec2	equ	0xFDD
 15626                           plusw2	equ	0xFDB
 15627                           fsr2h	equ	0xFDA
 15628                           fsr2l	equ	0xFD9
 15629                           status	equ	0xFD8
 15630                           
 15631 ;; *************** function _disk_initialize *****************
 15632 ;; Defined at:
 15633 ;;		line 109 in file "bibliotecas/diskio.c"
 15634 ;; Parameters:    Size  Location     Type
 15635 ;;  pdrv            1    wreg     unsigned char 
 15636 ;; Auto vars:     Size  Location     Type
 15637 ;;  pdrv            1   26[BANK0 ] unsigned char 
 15638 ;;  result          2    0        int 
 15639 ;;  stat            1   27[BANK0 ] unsigned char 
 15640 ;; Return value:  Size  Location     Type
 15641 ;;                  1    wreg      unsigned char 
 15642 ;; Registers used:
 15643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15644 ;; Tracked objects:
 15645 ;;		On entry : 0/0
 15646 ;;		On exit  : 0/0
 15647 ;;		Unchanged: 0/0
 15648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15649 ;;      Params:         0       0       0       0       0       0       0       0       0
 15650 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15651 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15652 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15653 ;;Total ram usage:        2 bytes
 15654 ;; Hardware stack levels used:    1
 15655 ;; Hardware stack levels required when called:    7
 15656 ;; This function calls:
 15657 ;;		_sdc_disk_initialize
 15658 ;; This function is called by:
 15659 ;;		_find_volume
 15660 ;; This function uses a non-reentrant model
 15661 ;;
 15662                           
 15663                           	psect	text47
 15664  0054C6                     __ptext47:
 15665                           	opt stack 0
 15666  0054C6                     _disk_initialize:
 15667                           	opt stack 19
 15668                           
 15669                           ;incstack = 0
 15670                           ;disk_initialize@pdrv stored from wreg
 15671  0054C6  0100               	movlb	0	; () banked
 15672  0054C8  6F7A               	movwf	disk_initialize@pdrv& (0+255),b
 15673                           
 15674                           ;diskio.c: 113: DSTATUS stat;
 15675                           ;diskio.c: 114: int result;
 15676                           ;diskio.c: 116: switch (pdrv) {
 15677  0054CA  D00E               	goto	l404
 15678  0054CC                     
 15679                           ;diskio.c: 118: stat = sdc_disk_initialize();
 15680  0054CC  ECA9  F014         	call	_sdc_disk_initialize	;wreg free
 15681  0054D0  0100               	movlb	0	; () banked
 15682  0054D2  6F7B               	movwf	disk_initialize@stat& (0+255),b
 15683                           
 15684                           ; BSR set to: 0
 15685                           ;diskio.c: 122: return stat;
 15686  0054D4  517B               	movf	disk_initialize@stat& (0+255),w,b
 15687                           
 15688                           ; BSR set to: 0
 15689  0054D6  0012               	return	
 15690  0054D8                     
 15691                           ; BSR set to: 0
 15692                           ;diskio.c: 125: stat = sdc_disk_initialize();
 15693                           
 15694                           ; BSR set to: 0
 15695  0054D8  ECA9  F014         	call	_sdc_disk_initialize	;wreg free
 15696  0054DC  0100               	movlb	0	; () banked
 15697  0054DE  6F7B               	movwf	disk_initialize@stat& (0+255),b
 15698                           
 15699                           ; BSR set to: 0
 15700                           ;diskio.c: 129: return stat;
 15701  0054E0  517B               	movf	disk_initialize@stat& (0+255),w,b
 15702                           
 15703                           ; BSR set to: 0
 15704  0054E2  0012               	return	
 15705  0054E4                     
 15706                           ; BSR set to: 0
 15707                           ;diskio.c: 136: return stat;
 15708                           
 15709                           ; BSR set to: 0
 15710  0054E4  517B               	movf	disk_initialize@stat& (0+255),w,b
 15711                           
 15712                           ; BSR set to: 0
 15713  0054E6  0012               	return	
 15714  0054E8                     l404:
 15715                           
 15716                           ; BSR set to: 0
 15717  0054E8  0100               	movlb	0	; () banked
 15718  0054EA  517A               	movf	disk_initialize@pdrv& (0+255),w,b
 15719                           
 15720                           ; Switch size 1, requested type "space"
 15721                           ; Number of cases is 3, Range of values is 0 to 2
 15722                           ; switch strategies available:
 15723                           ; Name         Instructions Cycles
 15724                           ; simple_byte           10     6 (average)
 15725                           ;	Chosen strategy is simple_byte
 15726  0054EC  0A00               	xorlw	0	; case 0
 15727  0054EE  B4D8               	btfsc	status,2,c
 15728  0054F0  D7ED               	goto	l405
 15729  0054F2  0A01               	xorlw	1	; case 1
 15730  0054F4  B4D8               	btfsc	status,2,c
 15731  0054F6  D7F0               	goto	l407
 15732  0054F8  0A03               	xorlw	3	; case 2
 15733  0054FA  B4D8               	btfsc	status,2,c
 15734  0054FC  D7F3               	goto	l408
 15735                           
 15736                           ; BSR set to: 0
 15737                           ;diskio.c: 138: return 0x01;
 15738                           
 15739                           ; BSR set to: 0
 15740  0054FE  0E01               	movlw	1
 15741  005500  0012               	return	
 15742  005502                     __end_of_disk_initialize:
 15743                           	opt stack 0
 15744                           tblptru	equ	0xFF8
 15745                           tblptrh	equ	0xFF7
 15746                           tblptrl	equ	0xFF6
 15747                           tablat	equ	0xFF5
 15748                           prodh	equ	0xFF4
 15749                           prodl	equ	0xFF3
 15750                           intcon	equ	0xFF2
 15751                           intcon2	equ	0xFF1
 15752                           intcon3	equ	0xFF0
 15753                           indf0	equ	0xFEF
 15754                           postinc0	equ	0xFEE
 15755                           fsr0h	equ	0xFEA
 15756                           fsr0l	equ	0xFE9
 15757                           wreg	equ	0xFE8
 15758                           indf1	equ	0xFE7
 15759                           postinc1	equ	0xFE6
 15760                           postdec1	equ	0xFE5
 15761                           fsr1h	equ	0xFE2
 15762                           fsr1l	equ	0xFE1
 15763                           indf2	equ	0xFDF
 15764                           postinc2	equ	0xFDE
 15765                           postdec2	equ	0xFDD
 15766                           plusw2	equ	0xFDB
 15767                           fsr2h	equ	0xFDA
 15768                           fsr2l	equ	0xFD9
 15769                           status	equ	0xFD8
 15770                           
 15771 ;; *************** function _sdc_disk_initialize *****************
 15772 ;; Defined at:
 15773 ;;		line 339 in file "bibliotecas/diskio.c"
 15774 ;; Parameters:    Size  Location     Type
 15775 ;;		None
 15776 ;; Auto vars:     Size  Location     Type
 15777 ;;  count2          2   23[BANK0 ] int 
 15778 ;;  crc_number      2   19[BANK0 ] int 
 15779 ;;  count1          2   17[BANK0 ] int 
 15780 ;;  i               2   14[BANK0 ] int 
 15781 ;;  buff            1   25[BANK0 ] unsigned char 
 15782 ;;  ocr             1   22[BANK0 ] unsigned char 
 15783 ;;  buff_i          1   21[BANK0 ] unsigned char 
 15784 ;;  stat            1   16[BANK0 ] unsigned char 
 15785 ;; Return value:  Size  Location     Type
 15786 ;;                  1    wreg      unsigned char 
 15787 ;; Registers used:
 15788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15789 ;; Tracked objects:
 15790 ;;		On entry : 0/0
 15791 ;;		On exit  : 0/0
 15792 ;;		Unchanged: 0/0
 15793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15794 ;;      Params:         0       0       0       0       0       0       0       0       0
 15795 ;;      Locals:         0      12       0       0       0       0       0       0       0
 15796 ;;      Temps:          0       1       0       0       0       0       0       0       0
 15797 ;;      Totals:         0      13       0       0       0       0       0       0       0
 15798 ;;Total ram usage:       13 bytes
 15799 ;; Hardware stack levels used:    1
 15800 ;; Hardware stack levels required when called:    6
 15801 ;; This function calls:
 15802 ;;		_command
 15803 ;;		_dummy_clocks
 15804 ;;		_escreve_frase_ram_lcd
 15805 ;;		_escreve_inteiro_lcd
 15806 ;;		_posicao_cursor_lcd
 15807 ;;		_proceed
 15808 ;;		_response
 15809 ;;		_sdc_reset
 15810 ;; This function is called by:
 15811 ;;		_disk_initialize
 15812 ;; This function uses a non-reentrant model
 15813 ;;
 15814                           
 15815                           	psect	text48
 15816  002952                     __ptext48:
 15817                           	opt stack 0
 15818  002952                     _sdc_disk_initialize:
 15819                           	opt stack 19
 15820                           
 15821                           ;diskio.c: 341: BYTE ocr;
 15822                           ;diskio.c: 342: DSTATUS stat;
 15823                           ;diskio.c: 343: int i = 0, count1 = 0, count2 = 0;
 15824                           
 15825                           ; BSR set to: 0
 15826                           ;incstack = 0
 15827  002952  0E00               	movlw	0
 15828  002954  0100               	movlb	0	; () banked
 15829  002956  6F6F               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 15830  002958  0E00               	movlw	0
 15831  00295A  6F6E               	movwf	sdc_disk_initialize@i& (0+255),b
 15832  00295C  0E00               	movlw	0
 15833  00295E  6F72               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 15834  002960  0E00               	movlw	0
 15835  002962  6F71               	movwf	sdc_disk_initialize@count1& (0+255),b
 15836  002964  0E00               	movlw	0
 15837  002966  6F78               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 15838  002968  0E00               	movlw	0
 15839  00296A  6F77               	movwf	sdc_disk_initialize@count2& (0+255),b
 15840                           
 15841                           ;diskio.c: 344: BYTE buff = 0;
 15842  00296C  0E00               	movlw	0
 15843  00296E  6F79               	movwf	sdc_disk_initialize@buff& (0+255),b
 15844                           
 15845                           ; BSR set to: 0
 15846                           ;diskio.c: 345: BYTE buff_i;
 15847                           ;diskio.c: 346: int crc_number;
 15848                           ;diskio.c: 347: _delay((unsigned long)((1)*(48000000/4000.0)));
 15849  002970  0E10               	movlw	16
 15850  002972  0100               	movlb	0	; () banked
 15851  002974  6F6D               	movwf	??_sdc_disk_initialize& (0+255),b
 15852  002976  0E94               	movlw	148
 15853  002978                     u17247:
 15854  002978  2EE8               	decfsz	wreg,f,c
 15855  00297A  D7FE               	bra	u17247
 15856  00297C  2F6D               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 15857  00297E  D7FC               	bra	u17247
 15858  002980  F000               	nop	
 15859                           
 15860                           ;diskio.c: 348: dummy_clocks(100);
 15861  002982  0E64               	movlw	100
 15862  002984  EC81  F02A         	call	_dummy_clocks
 15863                           
 15864                           ;diskio.c: 351: sdc_reset();
 15865  002988  EC72  F024         	call	_sdc_reset	;wreg free
 15866                           
 15867                           ;diskio.c: 352: command(0X48, 0x000001AA, 0x87);
 15868  00298C  0EAA               	movlw	170
 15869  00298E  6E1F               	movwf	command@arg,c
 15870  002990  0E01               	movlw	1
 15871  002992  6E20               	movwf	command@arg+1,c
 15872  002994  0E00               	movlw	0
 15873  002996  6E21               	movwf	command@arg+2,c
 15874  002998  0E00               	movlw	0
 15875  00299A  6E22               	movwf	command@arg+3,c
 15876  00299C  0E87               	movlw	135
 15877  00299E  6E23               	movwf	command@CRC,c
 15878  0029A0  0E48               	movlw	72
 15879  0029A2  ECD6  F028         	call	_command
 15880                           
 15881                           ;diskio.c: 353: proceed();
 15882  0029A6  ECB6  F02B         	call	_proceed	;wreg free
 15883  0029AA                     
 15884                           ;diskio.c: 355: buff_i = response();
 15885  0029AA  ECB0  F02B         	call	_response	;wreg free
 15886  0029AE  0100               	movlb	0	; () banked
 15887  0029B0  6F75               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 15888                           
 15889                           ; BSR set to: 0
 15890                           ;diskio.c: 358: if(buff_i == 1)
 15891  0029B2  0575               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 15892  0029B4  A4D8               	btfss	status,2,c
 15893  0029B6  D004               	goto	l448
 15894                           
 15895                           ; BSR set to: 0
 15896                           ;diskio.c: 359: {
 15897                           ;diskio.c: 360: crc_number = buff_i<<8;
 15898  0029B8  5175               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 15899  0029BA  6F74               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 15900  0029BC  6B73               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 15901                           
 15902                           ;diskio.c: 361: }
 15903  0029BE  D006               	goto	l450
 15904  0029C0                     l448:
 15905                           
 15906                           ; BSR set to: 0
 15907                           ;diskio.c: 362: else if(buff_i==0xAA)
 15908                           
 15909                           ; BSR set to: 0
 15910  0029C0  0EAA               	movlw	170
 15911  0029C2  1975               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 15912  0029C4  A4D8               	btfss	status,2,c
 15913  0029C6  D002               	goto	l450
 15914                           
 15915                           ; BSR set to: 0
 15916                           ;diskio.c: 363: {
 15917                           ;diskio.c: 364: crc_number |= buff_i;
 15918  0029C8  5175               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 15919  0029CA  1373               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 15920  0029CC                     l450:
 15921                           
 15922                           ; BSR set to: 0
 15923                           ;diskio.c: 365: }
 15924                           ;diskio.c: 366: count1++;
 15925                           
 15926                           ; BSR set to: 0
 15927                           
 15928                           ; BSR set to: 0
 15929  0029CC  4B71               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 15930  0029CE  2B72               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 15931                           
 15932                           ; BSR set to: 0
 15933                           ;diskio.c: 367: }while(crc_number != 0x1AA && count1<1000);
 15934  0029D0  0EAA               	movlw	170
 15935  0029D2  1973               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 15936  0029D4  E103               	bnz	u13040
 15937  0029D6  0574               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 15938  0029D8  B4D8               	btfsc	status,2,c
 15939  0029DA  D008               	goto	u13050
 15940  0029DC                     u13040:
 15941                           
 15942                           ; BSR set to: 0
 15943  0029DC  BF72               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 15944  0029DE  D7E5               	goto	l447
 15945  0029E0  0EE8               	movlw	232
 15946  0029E2  5D71               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 15947  0029E4  0E03               	movlw	3
 15948  0029E6  5972               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 15949  0029E8  A0D8               	btfss	status,0,c
 15950  0029EA  D7DF               	goto	l447
 15951  0029EC                     u13050:
 15952                           
 15953                           ; BSR set to: 0
 15954                           ;diskio.c: 372: if (crc_number == 0x1AA)
 15955                           
 15956                           ; BSR set to: 0
 15957                           
 15958                           ; BSR set to: 0
 15959  0029EC  0EAA               	movlw	170
 15960  0029EE  1973               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 15961  0029F0  E102               	bnz	u13061
 15962  0029F2  0574               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 15963  0029F4  A4D8               	btfss	status,2,c
 15964  0029F6                     u13061:
 15965  0029F6  D0B8               	goto	l454
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;diskio.c: 373: {
 15969                           ;diskio.c: 374: count1 = 0;
 15970  0029F8  0E00               	movlw	0
 15971  0029FA  6F72               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 15972  0029FC  0E00               	movlw	0
 15973  0029FE  6F71               	movwf	sdc_disk_initialize@count1& (0+255),b
 15974  002A00                     l455:
 15975                           
 15976                           ; BSR set to: 0
 15977                           ;diskio.c: 376: count2 = 0;
 15978  002A00  0E00               	movlw	0
 15979  002A02  6F78               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 15980  002A04  0E00               	movlw	0
 15981  002A06  6F77               	movwf	sdc_disk_initialize@count2& (0+255),b
 15982                           
 15983                           ; BSR set to: 0
 15984                           ;diskio.c: 377: buff = 0XFF;
 15985  002A08  6979               	setf	sdc_disk_initialize@buff& (0+255),b
 15986  002A0A                     
 15987                           ; BSR set to: 0
 15988                           ;diskio.c: 392: dummy_clocks(10);
 15989                           
 15990                           ; BSR set to: 0
 15991  002A0A  0E0A               	movlw	10
 15992  002A0C  EC81  F02A         	call	_dummy_clocks
 15993                           
 15994                           ;diskio.c: 393: command(0X77, 0X00000000, 0X00);
 15995  002A10  0E00               	movlw	0
 15996  002A12  6E1F               	movwf	command@arg,c
 15997  002A14  0E00               	movlw	0
 15998  002A16  6E20               	movwf	command@arg+1,c
 15999  002A18  0E00               	movlw	0
 16000  002A1A  6E21               	movwf	command@arg+2,c
 16001  002A1C  0E00               	movlw	0
 16002  002A1E  6E22               	movwf	command@arg+3,c
 16003  002A20  0E00               	movlw	0
 16004  002A22  6E23               	movwf	command@CRC,c
 16005  002A24  0E77               	movlw	119
 16006  002A26  ECD6  F028         	call	_command
 16007                           
 16008                           ;diskio.c: 394: buff = 0XFF;
 16009  002A2A  0100               	movlb	0	; () banked
 16010  002A2C  6979               	setf	sdc_disk_initialize@buff& (0+255),b
 16011                           
 16012                           ; BSR set to: 0
 16013                           ;diskio.c: 396: proceed();
 16014  002A2E  ECB6  F02B         	call	_proceed	;wreg free
 16015  002A32                     
 16016                           ;diskio.c: 398: buff = response();
 16017  002A32  ECB0  F02B         	call	_response	;wreg free
 16018  002A36  0100               	movlb	0	; () banked
 16019  002A38  6F79               	movwf	sdc_disk_initialize@buff& (0+255),b
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;diskio.c: 399: count2++;
 16023  002A3A  4B77               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16024  002A3C  2B78               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16025                           
 16026                           ;diskio.c: 400: }while((buff!=0X01)&&(count2<10));
 16027  002A3E  0579               	decf	sdc_disk_initialize@buff& (0+255),w,b
 16028  002A40  B4D8               	btfsc	status,2,c
 16029  002A42  D008               	goto	u13080
 16030                           
 16031                           ; BSR set to: 0
 16032  002A44  BF78               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16033  002A46  D7F5               	goto	l457
 16034  002A48  5178               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16035  002A4A  E104               	bnz	l10551
 16036  002A4C  0E0A               	movlw	10
 16037  002A4E  5D77               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16038  002A50  A0D8               	btfss	status,0,c
 16039  002A52  D7EF               	goto	l457
 16040  002A54                     u13080:
 16041  002A54                     l10551:
 16042                           
 16043                           ; BSR set to: 0
 16044                           ;diskio.c: 401: count2 = 0;
 16045  002A54  0E00               	movlw	0
 16046  002A56  6F78               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 16047  002A58  0E00               	movlw	0
 16048  002A5A  6F77               	movwf	sdc_disk_initialize@count2& (0+255),b
 16049                           
 16050                           ; BSR set to: 0
 16051                           ;diskio.c: 405: dummy_clocks(10);
 16052  002A5C  0E0A               	movlw	10
 16053  002A5E  EC81  F02A         	call	_dummy_clocks
 16054                           
 16055                           ;diskio.c: 406: command(0X69, 1UL << 30, 0x00);
 16056  002A62  0E00               	movlw	0
 16057  002A64  6E1F               	movwf	command@arg,c
 16058  002A66  0E00               	movlw	0
 16059  002A68  6E20               	movwf	command@arg+1,c
 16060  002A6A  0E00               	movlw	0
 16061  002A6C  6E21               	movwf	command@arg+2,c
 16062  002A6E  0E40               	movlw	64
 16063  002A70  6E22               	movwf	command@arg+3,c
 16064  002A72  0E00               	movlw	0
 16065  002A74  6E23               	movwf	command@CRC,c
 16066  002A76  0E69               	movlw	105
 16067  002A78  ECD6  F028         	call	_command
 16068                           
 16069                           ;diskio.c: 407: proceed();
 16070  002A7C  ECB6  F02B         	call	_proceed	;wreg free
 16071                           
 16072                           ;diskio.c: 408: buff = response();
 16073  002A80  ECB0  F02B         	call	_response	;wreg free
 16074  002A84  0100               	movlb	0	; () banked
 16075  002A86  6F79               	movwf	sdc_disk_initialize@buff& (0+255),b
 16076                           
 16077                           ; BSR set to: 0
 16078                           ;diskio.c: 409: count2++;
 16079  002A88  4B77               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16080  002A8A  2B78               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16081                           
 16082                           ; BSR set to: 0
 16083                           ;diskio.c: 412: }while(buff!=0X00);
 16084  002A8C  5179               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16085  002A8E  A4D8               	btfss	status,2,c
 16086  002A90  D7BC               	goto	l456
 16087                           
 16088                           ; BSR set to: 0
 16089                           ;diskio.c: 414: buff = 0xFF;
 16090  002A92  6979               	setf	sdc_disk_initialize@buff& (0+255),b
 16091                           
 16092                           ; BSR set to: 0
 16093                           ;diskio.c: 417: dummy_clocks(10);
 16094  002A94  0E0A               	movlw	10
 16095  002A96  EC81  F02A         	call	_dummy_clocks
 16096                           
 16097                           ;diskio.c: 418: command(0X7A, 0X00000000, 0XFF);
 16098  002A9A  0E00               	movlw	0
 16099  002A9C  6E1F               	movwf	command@arg,c
 16100  002A9E  0E00               	movlw	0
 16101  002AA0  6E20               	movwf	command@arg+1,c
 16102  002AA2  0E00               	movlw	0
 16103  002AA4  6E21               	movwf	command@arg+2,c
 16104  002AA6  0E00               	movlw	0
 16105  002AA8  6E22               	movwf	command@arg+3,c
 16106  002AAA  0EFF               	movlw	255
 16107  002AAC  6E23               	movwf	command@CRC,c
 16108  002AAE  0E7A               	movlw	122
 16109  002AB0  ECD6  F028         	call	_command
 16110                           
 16111                           ;diskio.c: 419: proceed();
 16112  002AB4  ECB6  F02B         	call	_proceed	;wreg free
 16113  002AB8                     
 16114                           ;diskio.c: 421: buff = response();
 16115  002AB8  ECB0  F02B         	call	_response	;wreg free
 16116  002ABC  0100               	movlb	0	; () banked
 16117  002ABE  6F79               	movwf	sdc_disk_initialize@buff& (0+255),b
 16118                           
 16119                           ; BSR set to: 0
 16120                           ;diskio.c: 422: ocr = (buff << 1) & 0b10000000;
 16121  002AC0  5179               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16122  002AC2  2579               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 16123  002AC4  0B80               	andlw	128
 16124  002AC6  6F76               	movwf	sdc_disk_initialize@ocr& (0+255),b
 16125                           
 16126                           ; BSR set to: 0
 16127                           ;diskio.c: 423: posicao_cursor_lcd(2,0);
 16128  002AC8  0E00               	movlw	0
 16129  002ACA  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16130  002ACC  0E02               	movlw	2
 16131  002ACE  EC37  F028         	call	_posicao_cursor_lcd
 16132                           
 16133                           ;diskio.c: 424: escreve_inteiro_lcd(ocr);
 16134  002AD2  C076  F02C         	movff	sdc_disk_initialize@ocr,escreve_inteiro_lcd@valor
 16135  002AD6  6A2D               	clrf	escreve_inteiro_lcd@valor+1,c
 16136  002AD8  EC44  F02A         	call	_escreve_inteiro_lcd	;wreg free
 16137                           
 16138                           ;diskio.c: 425: count2++;
 16139  002ADC  0100               	movlb	0	; () banked
 16140  002ADE  4B77               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16141  002AE0  2B78               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16142                           
 16143                           ; BSR set to: 0
 16144                           ;diskio.c: 426: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 16145  002AE2  5176               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 16146  002AE4  B4D8               	btfsc	status,2,c
 16147  002AE6  D00B               	goto	u13120
 16148                           
 16149                           ; BSR set to: 0
 16150  002AE8  0576               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 16151  002AEA  B4D8               	btfsc	status,2,c
 16152  002AEC  D008               	goto	u13120
 16153                           
 16154                           ; BSR set to: 0
 16155  002AEE  BF78               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16156  002AF0  D7E3               	goto	l462
 16157  002AF2  5178               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16158  002AF4  E104               	bnz	l10585
 16159  002AF6  0E0A               	movlw	10
 16160  002AF8  5D77               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16161  002AFA  A0D8               	btfss	status,0,c
 16162  002AFC  D7DD               	goto	l462
 16163  002AFE                     u13120:
 16164  002AFE                     l10585:
 16165                           
 16166                           ; BSR set to: 0
 16167                           ;diskio.c: 427: }while(ocr != 0X00 && ocr !=0x01);
 16168  002AFE  5176               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 16169  002B00  B4D8               	btfsc	status,2,c
 16170  002B02  D003               	goto	u13140
 16171                           
 16172                           ; BSR set to: 0
 16173  002B04  0576               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 16174  002B06  A4D8               	btfss	status,2,c
 16175  002B08  D77B               	goto	l455
 16176  002B0A                     u13140:
 16177                           
 16178                           ; BSR set to: 0
 16179                           ;diskio.c: 432: count1 = 0;
 16180                           
 16181                           ; BSR set to: 0
 16182                           
 16183                           ; BSR set to: 0
 16184  002B0A  0E00               	movlw	0
 16185  002B0C  6F72               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 16186  002B0E  0E00               	movlw	0
 16187  002B10  6F71               	movwf	sdc_disk_initialize@count1& (0+255),b
 16188                           
 16189                           ; BSR set to: 0
 16190                           ;diskio.c: 434: _delay((unsigned long)((1)*(48000000/4000.0)));
 16191  002B12  0E10               	movlw	16
 16192  002B14  0100               	movlb	0	; () banked
 16193  002B16  6F6D               	movwf	??_sdc_disk_initialize& (0+255),b
 16194  002B18  0E94               	movlw	148
 16195  002B1A                     u17257:
 16196  002B1A  2EE8               	decfsz	wreg,f,c
 16197  002B1C  D7FE               	bra	u17257
 16198  002B1E  2F6D               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 16199  002B20  D7FC               	bra	u17257
 16200  002B22  F000               	nop	
 16201                           
 16202                           ;diskio.c: 435: stat = 0X00;
 16203  002B24  0E00               	movlw	0
 16204  002B26  0100               	movlb	0	; () banked
 16205  002B28  6F70               	movwf	sdc_disk_initialize@stat& (0+255),b
 16206                           
 16207                           ; BSR set to: 0
 16208                           ;diskio.c: 437: if(!ocr)
 16209  002B2A  5176               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 16210  002B2C  A4D8               	btfss	status,2,c
 16211  002B2E  D0B3               	goto	u13240
 16212                           
 16213                           ; BSR set to: 0
 16214                           ;diskio.c: 438: {
 16215                           ;diskio.c: 440: dummy_clocks(10);
 16216  002B30  0E0A               	movlw	10
 16217  002B32  EC81  F02A         	call	_dummy_clocks
 16218                           
 16219                           ;diskio.c: 441: command(0X50,0X00000200,0XFF);
 16220  002B36  0E00               	movlw	0
 16221  002B38  6E1F               	movwf	command@arg,c
 16222  002B3A  0E02               	movlw	2
 16223  002B3C  6E20               	movwf	command@arg+1,c
 16224  002B3E  0E00               	movlw	0
 16225  002B40  6E21               	movwf	command@arg+2,c
 16226  002B42  0E00               	movlw	0
 16227  002B44  6E22               	movwf	command@arg+3,c
 16228  002B46  0EFF               	movlw	255
 16229  002B48  6E23               	movwf	command@CRC,c
 16230  002B4A  0E50               	movlw	80
 16231  002B4C  ECD6  F028         	call	_command
 16232                           
 16233                           ;diskio.c: 442: proceed();
 16234  002B50  ECB6  F02B         	call	_proceed	;wreg free
 16235                           
 16236                           ;diskio.c: 444: buff = 0xFF;
 16237  002B54  0100               	movlb	0	; () banked
 16238  002B56  6979               	setf	sdc_disk_initialize@buff& (0+255),b
 16239  002B58                     
 16240                           ; BSR set to: 0
 16241                           ;diskio.c: 446: buff = response();
 16242                           
 16243                           ; BSR set to: 0
 16244  002B58  ECB0  F02B         	call	_response	;wreg free
 16245  002B5C  0100               	movlb	0	; () banked
 16246  002B5E  6F79               	movwf	sdc_disk_initialize@buff& (0+255),b
 16247                           
 16248                           ; BSR set to: 0
 16249                           ;diskio.c: 447: }while(buff!=0X00);
 16250  002B60  5179               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16251  002B62  B4D8               	btfsc	status,2,c
 16252  002B64  D098               	goto	u13240
 16253  002B66  D7F8               	goto	l470
 16254  002B68                     l454:
 16255                           
 16256                           ; BSR set to: 0
 16257                           ;diskio.c: 452: else
 16258                           ;diskio.c: 453: {
 16259                           ;diskio.c: 455: count2 = 0;
 16260                           
 16261                           ; BSR set to: 0
 16262  002B68  0E00               	movlw	0
 16263  002B6A  6F78               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 16264  002B6C  0E00               	movlw	0
 16265  002B6E  6F77               	movwf	sdc_disk_initialize@count2& (0+255),b
 16266                           
 16267                           ; BSR set to: 0
 16268                           ;diskio.c: 456: buff = 0XFF;
 16269  002B70  6979               	setf	sdc_disk_initialize@buff& (0+255),b
 16270                           
 16271                           ; BSR set to: 0
 16272                           ;diskio.c: 457: dummy_clocks(1);
 16273  002B72  0E01               	movlw	1
 16274  002B74  EC81  F02A         	call	_dummy_clocks
 16275                           
 16276                           ;diskio.c: 458: command(0X69, 0X00000000, 0XFF);
 16277  002B78  0E00               	movlw	0
 16278  002B7A  6E1F               	movwf	command@arg,c
 16279  002B7C  0E00               	movlw	0
 16280  002B7E  6E20               	movwf	command@arg+1,c
 16281  002B80  0E00               	movlw	0
 16282  002B82  6E21               	movwf	command@arg+2,c
 16283  002B84  0E00               	movlw	0
 16284  002B86  6E22               	movwf	command@arg+3,c
 16285  002B88  0EFF               	movlw	255
 16286  002B8A  6E23               	movwf	command@CRC,c
 16287  002B8C  0E69               	movlw	105
 16288  002B8E  ECD6  F028         	call	_command
 16289                           
 16290                           ;diskio.c: 459: proceed();
 16291  002B92  ECB6  F02B         	call	_proceed	;wreg free
 16292  002B96                     
 16293                           ;diskio.c: 461: buff = response();
 16294  002B96  ECB0  F02B         	call	_response	;wreg free
 16295  002B9A  0100               	movlb	0	; () banked
 16296  002B9C  6F79               	movwf	sdc_disk_initialize@buff& (0+255),b
 16297                           
 16298                           ; BSR set to: 0
 16299                           ;diskio.c: 462: count2++;
 16300  002B9E  4B77               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16301  002BA0  2B78               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16302                           
 16303                           ; BSR set to: 0
 16304                           ;diskio.c: 463: if(buff==0x00)
 16305  002BA2  5179               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16306  002BA4  A4D8               	btfss	status,2,c
 16307  002BA6  D00B               	goto	l474
 16308                           
 16309                           ; BSR set to: 0
 16310                           ;diskio.c: 464: {
 16311                           ;diskio.c: 465: posicao_cursor_lcd(1,0);
 16312  002BA8  0E00               	movlw	0
 16313  002BAA  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16314  002BAC  0E01               	movlw	1
 16315  002BAE  EC37  F028         	call	_posicao_cursor_lcd
 16316                           
 16317                           ;diskio.c: 466: escreve_frase_ram_lcd("SD VER. 1");
 16318  002BB2  0E48               	movlw	low STR_17
 16319  002BB4  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16320  002BB6  0E62               	movlw	high STR_17
 16321  002BB8  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16322  002BBA  EC57  F029         	call	_escreve_frase_ram_lcd	;wreg free
 16323  002BBE                     l474:
 16324                           
 16325                           ;diskio.c: 467: }
 16326                           ;diskio.c: 468: _delay((unsigned long)((1)*(48000000/4000.0)));
 16327  002BBE  0E10               	movlw	16
 16328  002BC0  0100               	movlb	0	; () banked
 16329  002BC2  6F6D               	movwf	??_sdc_disk_initialize& (0+255),b
 16330  002BC4  0E94               	movlw	148
 16331  002BC6                     u17267:
 16332  002BC6  2EE8               	decfsz	wreg,f,c
 16333  002BC8  D7FE               	bra	u17267
 16334  002BCA  2F6D               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 16335  002BCC  D7FC               	bra	u17267
 16336  002BCE  F000               	nop	
 16337                           
 16338                           ;diskio.c: 469: }while(buff!=0X00 && count2<10000);
 16339  002BD0  0100               	movlb	0	; () banked
 16340  002BD2  5179               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16341  002BD4  B4D8               	btfsc	status,2,c
 16342  002BD6  D008               	goto	u13190
 16343                           
 16344                           ; BSR set to: 0
 16345  002BD8  BF78               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16346  002BDA  D7DD               	goto	l473
 16347  002BDC  0E10               	movlw	16
 16348  002BDE  5D77               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16349  002BE0  0E27               	movlw	39
 16350  002BE2  5978               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16351  002BE4  A0D8               	btfss	status,0,c
 16352  002BE6  D7D7               	goto	l473
 16353  002BE8                     u13190:
 16354                           
 16355                           ; BSR set to: 0
 16356                           ;diskio.c: 471: buff = 0xFF;
 16357                           
 16358                           ; BSR set to: 0
 16359  002BE8  6979               	setf	sdc_disk_initialize@buff& (0+255),b
 16360                           
 16361                           ; BSR set to: 0
 16362                           ;diskio.c: 472: if(count2==10)
 16363  002BEA  0E0A               	movlw	10
 16364  002BEC  1977               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 16365  002BEE  1178               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16366  002BF0  A4D8               	btfss	status,2,c
 16367  002BF2  D036               	goto	u13230
 16368                           
 16369                           ; BSR set to: 0
 16370                           ;diskio.c: 473: {
 16371                           ;diskio.c: 474: count2 = 0;
 16372  002BF4  0E00               	movlw	0
 16373  002BF6  6F78               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 16374  002BF8  0E00               	movlw	0
 16375  002BFA  6F77               	movwf	sdc_disk_initialize@count2& (0+255),b
 16376                           
 16377                           ; BSR set to: 0
 16378                           ;diskio.c: 475: dummy_clocks(10);
 16379  002BFC  0E0A               	movlw	10
 16380  002BFE  EC81  F02A         	call	_dummy_clocks
 16381                           
 16382                           ;diskio.c: 476: command(0X41, 0X00000000, 0XFF);
 16383  002C02  0E00               	movlw	0
 16384  002C04  6E1F               	movwf	command@arg,c
 16385  002C06  0E00               	movlw	0
 16386  002C08  6E20               	movwf	command@arg+1,c
 16387  002C0A  0E00               	movlw	0
 16388  002C0C  6E21               	movwf	command@arg+2,c
 16389  002C0E  0E00               	movlw	0
 16390  002C10  6E22               	movwf	command@arg+3,c
 16391  002C12  0EFF               	movlw	255
 16392  002C14  6E23               	movwf	command@CRC,c
 16393  002C16  0E41               	movlw	65
 16394  002C18  ECD6  F028         	call	_command
 16395                           
 16396                           ;diskio.c: 477: proceed();
 16397  002C1C  ECB6  F02B         	call	_proceed	;wreg free
 16398  002C20                     
 16399                           ;diskio.c: 479: buff = response();
 16400  002C20  ECB0  F02B         	call	_response	;wreg free
 16401  002C24  0100               	movlb	0	; () banked
 16402  002C26  6F79               	movwf	sdc_disk_initialize@buff& (0+255),b
 16403                           
 16404                           ; BSR set to: 0
 16405                           ;diskio.c: 480: count2++;
 16406  002C28  4B77               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16407  002C2A  2B78               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16408                           
 16409                           ; BSR set to: 0
 16410                           ;diskio.c: 481: if(buff==0x00)
 16411  002C2C  5179               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16412  002C2E  A4D8               	btfss	status,2,c
 16413  002C30  D00B               	goto	l480
 16414                           
 16415                           ; BSR set to: 0
 16416                           ;diskio.c: 482: {
 16417                           ;diskio.c: 483: posicao_cursor_lcd(1,0);
 16418  002C32  0E00               	movlw	0
 16419  002C34  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16420  002C36  0E01               	movlw	1
 16421  002C38  EC37  F028         	call	_posicao_cursor_lcd
 16422                           
 16423                           ;diskio.c: 484: escreve_frase_ram_lcd("MMC Ver. 3");
 16424  002C3C  0E27               	movlw	low STR_18
 16425  002C3E  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16426  002C40  0E62               	movlw	high STR_18
 16427  002C42  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16428  002C44  EC57  F029         	call	_escreve_frase_ram_lcd	;wreg free
 16429  002C48                     l480:
 16430                           
 16431                           ;diskio.c: 485: }
 16432                           ;diskio.c: 487: }while(buff!=0X00 && count2<10000);
 16433  002C48  0100               	movlb	0	; () banked
 16434  002C4A  5179               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16435  002C4C  B4D8               	btfsc	status,2,c
 16436  002C4E  D008               	goto	u13230
 16437                           
 16438                           ; BSR set to: 0
 16439  002C50  BF78               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16440  002C52  D7E6               	goto	l479
 16441  002C54  0E10               	movlw	16
 16442  002C56  5D77               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16443  002C58  0E27               	movlw	39
 16444  002C5A  5978               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16445  002C5C  A0D8               	btfss	status,0,c
 16446  002C5E  D7E0               	goto	l479
 16447  002C60                     u13230:
 16448                           
 16449                           ; BSR set to: 0
 16450                           ;diskio.c: 488: }
 16451                           ;diskio.c: 491: dummy_clocks(10);
 16452                           
 16453                           ; BSR set to: 0
 16454                           
 16455                           ; BSR set to: 0
 16456                           
 16457                           ; BSR set to: 0
 16458  002C60  0E0A               	movlw	10
 16459  002C62  EC81  F02A         	call	_dummy_clocks
 16460                           
 16461                           ;diskio.c: 492: command(0X50,0X00000200,0XFF);
 16462  002C66  0E00               	movlw	0
 16463  002C68  6E1F               	movwf	command@arg,c
 16464  002C6A  0E02               	movlw	2
 16465  002C6C  6E20               	movwf	command@arg+1,c
 16466  002C6E  0E00               	movlw	0
 16467  002C70  6E21               	movwf	command@arg+2,c
 16468  002C72  0E00               	movlw	0
 16469  002C74  6E22               	movwf	command@arg+3,c
 16470  002C76  0EFF               	movlw	255
 16471  002C78  6E23               	movwf	command@CRC,c
 16472  002C7A  0E50               	movlw	80
 16473  002C7C  ECD6  F028         	call	_command
 16474                           
 16475                           ;diskio.c: 493: proceed();
 16476  002C80  ECB6  F02B         	call	_proceed	;wreg free
 16477                           
 16478                           ;diskio.c: 495: buff = 0xFF;
 16479  002C84  0100               	movlb	0	; () banked
 16480  002C86  6979               	setf	sdc_disk_initialize@buff& (0+255),b
 16481  002C88                     
 16482                           ; BSR set to: 0
 16483                           ;diskio.c: 497: buff = response();
 16484                           
 16485                           ; BSR set to: 0
 16486  002C88  ECB0  F02B         	call	_response	;wreg free
 16487  002C8C  0100               	movlb	0	; () banked
 16488  002C8E  6F79               	movwf	sdc_disk_initialize@buff& (0+255),b
 16489                           
 16490                           ; BSR set to: 0
 16491                           ;diskio.c: 498: }while(buff!=0X00);
 16492  002C90  5179               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16493  002C92  A4D8               	btfss	status,2,c
 16494  002C94  D7F9               	goto	l484
 16495  002C96                     u13240:
 16496                           
 16497                           ; BSR set to: 0
 16498                           ;diskio.c: 500: }
 16499                           ;diskio.c: 504: return stat;
 16500                           
 16501                           ; BSR set to: 0
 16502                           
 16503                           ; BSR set to: 0
 16504  002C96  5170               	movf	sdc_disk_initialize@stat& (0+255),w,b
 16505  002C98  0012               	return	
 16506  002C9A                     __end_of_sdc_disk_initialize:
 16507                           	opt stack 0
 16508                           tblptru	equ	0xFF8
 16509                           tblptrh	equ	0xFF7
 16510                           tblptrl	equ	0xFF6
 16511                           tablat	equ	0xFF5
 16512                           prodh	equ	0xFF4
 16513                           prodl	equ	0xFF3
 16514                           intcon	equ	0xFF2
 16515                           intcon2	equ	0xFF1
 16516                           intcon3	equ	0xFF0
 16517                           indf0	equ	0xFEF
 16518                           postinc0	equ	0xFEE
 16519                           fsr0h	equ	0xFEA
 16520                           fsr0l	equ	0xFE9
 16521                           wreg	equ	0xFE8
 16522                           indf1	equ	0xFE7
 16523                           postinc1	equ	0xFE6
 16524                           postdec1	equ	0xFE5
 16525                           fsr1h	equ	0xFE2
 16526                           fsr1l	equ	0xFE1
 16527                           indf2	equ	0xFDF
 16528                           postinc2	equ	0xFDE
 16529                           postdec2	equ	0xFDD
 16530                           plusw2	equ	0xFDB
 16531                           fsr2h	equ	0xFDA
 16532                           fsr2l	equ	0xFD9
 16533                           status	equ	0xFD8
 16534                           
 16535 ;; *************** function _sdc_reset *****************
 16536 ;; Defined at:
 16537 ;;		line 288 in file "bibliotecas/diskio.c"
 16538 ;; Parameters:    Size  Location     Type
 16539 ;;		None
 16540 ;; Auto vars:     Size  Location     Type
 16541 ;;  teste          10    0        unsigned char [10]
 16542 ;;  count           2   41[COMRAM] int 
 16543 ;;  count_nosd      2   39[COMRAM] int 
 16544 ;;  i               2   37[COMRAM] int 
 16545 ;;  receive         2    0        unsigned int 
 16546 ;;  buff            1   43[COMRAM] unsigned char 
 16547 ;;  stat            1    0        unsigned char 
 16548 ;; Return value:  Size  Location     Type
 16549 ;;                  1    wreg      void 
 16550 ;; Registers used:
 16551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16552 ;; Tracked objects:
 16553 ;;		On entry : 0/0
 16554 ;;		On exit  : 0/0
 16555 ;;		Unchanged: 0/0
 16556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16557 ;;      Params:         0       0       0       0       0       0       0       0       0
 16558 ;;      Locals:         7       0       0       0       0       0       0       0       0
 16559 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16560 ;;      Totals:         7       0       0       0       0       0       0       0       0
 16561 ;;Total ram usage:        7 bytes
 16562 ;; Hardware stack levels used:    1
 16563 ;; Hardware stack levels required when called:    5
 16564 ;; This function calls:
 16565 ;;		_command
 16566 ;;		_escreve_frase_ram_lcd
 16567 ;;		_posicao_cursor_lcd
 16568 ;;		_proceed
 16569 ;;		_response
 16570 ;; This function is called by:
 16571 ;;		_sdc_disk_initialize
 16572 ;; This function uses a non-reentrant model
 16573 ;;
 16574                           
 16575                           	psect	text49
 16576  0048E4                     __ptext49:
 16577                           	opt stack 0
 16578  0048E4                     _sdc_reset:
 16579                           	opt stack 19
 16580                           
 16581                           ;diskio.c: 290: int i = 0, count = 0, count_nosd = 0;
 16582                           
 16583                           ; BSR set to: 0
 16584                           ;incstack = 0
 16585  0048E4  0E00               	movlw	0
 16586  0048E6  6E27               	movwf	sdc_reset@i+1,c
 16587  0048E8  0E00               	movlw	0
 16588  0048EA  6E26               	movwf	sdc_reset@i,c
 16589  0048EC  0E00               	movlw	0
 16590  0048EE  6E2B               	movwf	sdc_reset@count+1,c
 16591  0048F0  0E00               	movlw	0
 16592  0048F2  6E2A               	movwf	sdc_reset@count,c
 16593  0048F4  0E00               	movlw	0
 16594  0048F6  6E29               	movwf	sdc_reset@count_nosd+1,c
 16595  0048F8  0E00               	movlw	0
 16596  0048FA  6E28               	movwf	sdc_reset@count_nosd,c
 16597  0048FC                     
 16598                           ;diskio.c: 301: command(0X40, 0X00000000, 0X95);
 16599  0048FC  0E00               	movlw	0
 16600  0048FE  6E1F               	movwf	command@arg,c
 16601  004900  0E00               	movlw	0
 16602  004902  6E20               	movwf	command@arg+1,c
 16603  004904  0E00               	movlw	0
 16604  004906  6E21               	movwf	command@arg+2,c
 16605  004908  0E00               	movlw	0
 16606  00490A  6E22               	movwf	command@arg+3,c
 16607  00490C  0E95               	movlw	149
 16608  00490E  6E23               	movwf	command@CRC,c
 16609  004910  0E40               	movlw	64
 16610  004912  ECD6  F028         	call	_command
 16611                           
 16612                           ;diskio.c: 302: proceed();
 16613  004916  ECB6  F02B         	call	_proceed	;wreg free
 16614  00491A                     
 16615                           ;diskio.c: 305: buff = response();
 16616  00491A  ECB0  F02B         	call	_response	;wreg free
 16617  00491E  6E2C               	movwf	sdc_reset@buff,c
 16618                           
 16619                           ;diskio.c: 306: count++;
 16620  004920  4A2A               	infsnz	sdc_reset@count,f,c
 16621  004922  2A2B               	incf	sdc_reset@count+1,f,c
 16622                           
 16623                           ;diskio.c: 309: }while(buff!=0X01 && count<10);
 16624  004924  042C               	decf	sdc_reset@buff,w,c
 16625  004926  B4D8               	btfsc	status,2,c
 16626  004928  D008               	goto	u12800
 16627  00492A  BE2B               	btfsc	sdc_reset@count+1,7,c
 16628  00492C  D7F6               	goto	l437
 16629  00492E  502B               	movf	sdc_reset@count+1,w,c
 16630  004930  E104               	bnz	l10369
 16631  004932  0E0A               	movlw	10
 16632  004934  5C2A               	subwf	sdc_reset@count,w,c
 16633  004936  A0D8               	btfss	status,0,c
 16634  004938  D7F0               	goto	l437
 16635  00493A                     u12800:
 16636  00493A                     l10369:
 16637                           
 16638                           ;diskio.c: 311: count = 0;
 16639  00493A  0E00               	movlw	0
 16640  00493C  6E2B               	movwf	sdc_reset@count+1,c
 16641  00493E  0E00               	movlw	0
 16642  004940  6E2A               	movwf	sdc_reset@count,c
 16643                           
 16644                           ;diskio.c: 312: if(buff != 0x01)
 16645  004942  042C               	decf	sdc_reset@buff,w,c
 16646  004944  B4D8               	btfsc	status,2,c
 16647  004946  D017               	goto	l441
 16648                           
 16649                           ;diskio.c: 313: {
 16650                           ;diskio.c: 314: posicao_cursor_lcd(1,0);
 16651  004948  0E00               	movlw	0
 16652  00494A  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16653  00494C  0E01               	movlw	1
 16654  00494E  EC37  F028         	call	_posicao_cursor_lcd
 16655                           
 16656                           ;diskio.c: 315: escreve_frase_ram_lcd("Sem Cartao");
 16657  004952  0E32               	movlw	low STR_14
 16658  004954  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16659  004956  0E62               	movlw	high STR_14
 16660  004958  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16661  00495A  EC57  F029         	call	_escreve_frase_ram_lcd	;wreg free
 16662                           
 16663                           ;diskio.c: 316: posicao_cursor_lcd(2,0);
 16664  00495E  0E00               	movlw	0
 16665  004960  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16666  004962  0E02               	movlw	2
 16667  004964  EC37  F028         	call	_posicao_cursor_lcd
 16668                           
 16669                           ;diskio.c: 317: escreve_frase_ram_lcd("Insira o Cartao");
 16670  004968  0EF8               	movlw	low STR_15
 16671  00496A  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16672  00496C  0E61               	movlw	high STR_15
 16673  00496E  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16674  004970  EC57  F029         	call	_escreve_frase_ram_lcd	;wreg free
 16675                           
 16676                           ;diskio.c: 318: }
 16677  004974  D00B               	goto	l442
 16678  004976                     l441:
 16679                           
 16680                           ;diskio.c: 319: else
 16681                           ;diskio.c: 320: {
 16682                           ;diskio.c: 321: posicao_cursor_lcd(1,0);
 16683  004976  0E00               	movlw	0
 16684  004978  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 16685  00497A  0E01               	movlw	1
 16686  00497C  EC37  F028         	call	_posicao_cursor_lcd
 16687                           
 16688                           ;diskio.c: 322: escreve_frase_ram_lcd("Cartao Inserido");
 16689  004980  0E08               	movlw	low STR_16
 16690  004982  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 16691  004984  0E62               	movlw	high STR_16
 16692  004986  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 16693  004988  EC57  F029         	call	_escreve_frase_ram_lcd	;wreg free
 16694  00498C                     l442:
 16695                           
 16696                           ;diskio.c: 323: }
 16697                           ;diskio.c: 325: }while(buff!=0X01);
 16698  00498C  042C               	decf	sdc_reset@buff,w,c
 16699  00498E  B4D8               	btfsc	status,2,c
 16700  004990  0012               	return	
 16701  004992  D7B4               	goto	l436
 16702  004994                     __end_of_sdc_reset:
 16703                           	opt stack 0
 16704                           tblptru	equ	0xFF8
 16705                           tblptrh	equ	0xFF7
 16706                           tblptrl	equ	0xFF6
 16707                           tablat	equ	0xFF5
 16708                           prodh	equ	0xFF4
 16709                           prodl	equ	0xFF3
 16710                           intcon	equ	0xFF2
 16711                           intcon2	equ	0xFF1
 16712                           intcon3	equ	0xFF0
 16713                           indf0	equ	0xFEF
 16714                           postinc0	equ	0xFEE
 16715                           fsr0h	equ	0xFEA
 16716                           fsr0l	equ	0xFE9
 16717                           wreg	equ	0xFE8
 16718                           indf1	equ	0xFE7
 16719                           postinc1	equ	0xFE6
 16720                           postdec1	equ	0xFE5
 16721                           fsr1h	equ	0xFE2
 16722                           fsr1l	equ	0xFE1
 16723                           indf2	equ	0xFDF
 16724                           postinc2	equ	0xFDE
 16725                           postdec2	equ	0xFDD
 16726                           plusw2	equ	0xFDB
 16727                           fsr2h	equ	0xFDA
 16728                           fsr2l	equ	0xFD9
 16729                           status	equ	0xFD8
 16730                           
 16731 ;; *************** function _check_fs *****************
 16732 ;; Defined at:
 16733 ;;		line 2175 in file "bibliotecas/ff.c"
 16734 ;; Parameters:    Size  Location     Type
 16735 ;;  fs              2   55[BANK0 ] PTR struct .
 16736 ;;		 -> NULL(0), fs(558), 
 16737 ;;  sect            4   57[BANK0 ] unsigned long 
 16738 ;; Auto vars:     Size  Location     Type
 16739 ;;		None
 16740 ;; Return value:  Size  Location     Type
 16741 ;;                  1    wreg      unsigned char 
 16742 ;; Registers used:
 16743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16744 ;; Tracked objects:
 16745 ;;		On entry : 0/0
 16746 ;;		On exit  : 0/0
 16747 ;;		Unchanged: 0/0
 16748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16749 ;;      Params:         0       6       0       0       0       0       0       0       0
 16750 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16751 ;;      Temps:          0       4       0       0       0       0       0       0       0
 16752 ;;      Totals:         0      10       0       0       0       0       0       0       0
 16753 ;;Total ram usage:       10 bytes
 16754 ;; Hardware stack levels used:    1
 16755 ;; Hardware stack levels required when called:    9
 16756 ;; This function calls:
 16757 ;;		_move_window
 16758 ;; This function is called by:
 16759 ;;		_find_volume
 16760 ;; This function uses a non-reentrant model
 16761 ;;
 16762                           
 16763                           	psect	text50
 16764  004194                     __ptext50:
 16765                           	opt stack 0
 16766  004194                     _check_fs:
 16767                           	opt stack 17
 16768                           
 16769                           ;ff.c: 2180: fs->wflag = 0; fs->winsect = 0xFFFFFFFF;
 16770                           
 16771                           ;incstack = 0
 16772  004194  0100               	movlb	0	; () banked
 16773  004196  EE20 F004          	lfsr	2,4
 16774  00419A  5197               	movf	check_fs@fs& (0+255),w,b
 16775  00419C  26D9               	addwf	fsr2l,f,c
 16776  00419E  5198               	movf	(check_fs@fs+1)& (0+255),w,b
 16777  0041A0  22DA               	addwfc	fsr2h,f,c
 16778  0041A2  0E00               	movlw	0
 16779  0041A4  6EDF               	movwf	indf2,c
 16780  0041A6  EE20 F02A          	lfsr	2,42
 16781  0041AA  5197               	movf	check_fs@fs& (0+255),w,b
 16782  0041AC  26D9               	addwf	fsr2l,f,c
 16783  0041AE  5198               	movf	(check_fs@fs+1)& (0+255),w,b
 16784  0041B0  22DA               	addwfc	fsr2h,f,c
 16785  0041B2  0EFF               	movlw	255
 16786  0041B4  6EDE               	movwf	postinc2,c
 16787  0041B6  0EFF               	movlw	255
 16788  0041B8  6EDE               	movwf	postinc2,c
 16789  0041BA  0EFF               	movlw	255
 16790  0041BC  6EDE               	movwf	postinc2,c
 16791  0041BE  0EFF               	movlw	255
 16792  0041C0  6EDD               	movwf	postdec2,c
 16793                           
 16794                           ; BSR set to: 0
 16795                           ;ff.c: 2181: if (move_window(fs, sect) != FR_OK)
 16796  0041C2  C097  F08C         	movff	check_fs@fs,move_window@fs
 16797  0041C6  C098  F08D         	movff	check_fs@fs+1,move_window@fs+1
 16798  0041CA  C099  F08E         	movff	check_fs@sect,move_window@sector
 16799  0041CE  C09A  F08F         	movff	check_fs@sect+1,move_window@sector+1
 16800  0041D2  C09B  F090         	movff	check_fs@sect+2,move_window@sector+2
 16801  0041D6  C09C  F091         	movff	check_fs@sect+3,move_window@sector+3
 16802  0041DA  ECCA  F024         	call	_move_window	;wreg free
 16803  0041DE  0900               	iorlw	0
 16804  0041E0  B4D8               	btfsc	status,2,c
 16805  0041E2  D002               	goto	l1161
 16806                           
 16807                           ;ff.c: 2182: return 3;
 16808  0041E4  0E03               	movlw	3
 16809  0041E6  0012               	return	
 16810  0041E8                     l1161:
 16811                           
 16812                           ;ff.c: 2184: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 16813  0041E8  0100               	movlb	0	; () banked
 16814  0041EA  EE22 F02C          	lfsr	2,556
 16815  0041EE  5197               	movf	check_fs@fs& (0+255),w,b
 16816  0041F0  26D9               	addwf	fsr2l,f,c
 16817  0041F2  5198               	movf	(check_fs@fs+1)& (0+255),w,b
 16818  0041F4  22DA               	addwfc	fsr2h,f,c
 16819  0041F6  0E55               	movlw	85
 16820  0041F8  18DE               	xorwf	postinc2,w,c
 16821  0041FA  E104               	bnz	u14280
 16822  0041FC  0EAA               	movlw	170
 16823  0041FE  18DE               	xorwf	postinc2,w,c
 16824  004200  B4D8               	btfsc	status,2,c
 16825  004202  D002               	goto	l1163
 16826  004204                     u14280:
 16827                           
 16828                           ; BSR set to: 0
 16829                           ;ff.c: 2185: return 2;
 16830  004204  0E02               	movlw	2
 16831                           
 16832                           ; BSR set to: 0
 16833  004206  0012               	return	
 16834  004208                     l1163:
 16835                           
 16836                           ; BSR set to: 0
 16837                           ;ff.c: 2187: if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
 16838                           
 16839                           ; BSR set to: 0
 16840  004208  EE20 F064          	lfsr	2,100
 16841  00420C  5197               	movf	check_fs@fs& (0+255),w,b
 16842  00420E  26D9               	addwf	fsr2l,f,c
 16843  004210  5198               	movf	(check_fs@fs+1)& (0+255),w,b
 16844  004212  22DA               	addwfc	fsr2h,f,c
 16845  004214  0EFF               	movlw	255
 16846  004216  14DE               	andwf	postinc2,w,c
 16847  004218  6F9D               	movwf	??_check_fs& (0+255),b
 16848  00421A  0EFF               	movlw	255
 16849  00421C  14DE               	andwf	postinc2,w,c
 16850  00421E  6F9E               	movwf	(??_check_fs+1)& (0+255),b
 16851  004220  0EFF               	movlw	255
 16852  004222  14DE               	andwf	postinc2,w,c
 16853  004224  6F9F               	movwf	(??_check_fs+2)& (0+255),b
 16854  004226  0E00               	movlw	0
 16855  004228  14DE               	andwf	postinc2,w,c
 16856  00422A  6FA0               	movwf	(??_check_fs+3)& (0+255),b
 16857  00422C  0E46               	movlw	70
 16858  00422E  199D               	xorwf	??_check_fs& (0+255),w,b
 16859  004230  E10A               	bnz	l11223
 16860  004232  0E41               	movlw	65
 16861  004234  199E               	xorwf	(??_check_fs+1)& (0+255),w,b
 16862  004236  E107               	bnz	l11223
 16863  004238  0E54               	movlw	84
 16864  00423A  199F               	xorwf	(??_check_fs+2)& (0+255),w,b
 16865  00423C  11A0               	iorwf	(??_check_fs+3)& (0+255),w,b
 16866  00423E  A4D8               	btfss	status,2,c
 16867  004240  D002               	goto	l1164
 16868                           
 16869                           ; BSR set to: 0
 16870                           ;ff.c: 2188: return 0;
 16871  004242  0E00               	movlw	0
 16872                           
 16873                           ; BSR set to: 0
 16874  004244  0012               	return	
 16875  004246                     l1164:
 16876  004246                     l11223:
 16877                           
 16878                           ; BSR set to: 0
 16879                           ;ff.c: 2189: if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
 16880  004246  EE20 F080          	lfsr	2,128
 16881  00424A  5197               	movf	check_fs@fs& (0+255),w,b
 16882  00424C  26D9               	addwf	fsr2l,f,c
 16883  00424E  5198               	movf	(check_fs@fs+1)& (0+255),w,b
 16884  004250  22DA               	addwfc	fsr2h,f,c
 16885  004252  0EFF               	movlw	255
 16886  004254  14DE               	andwf	postinc2,w,c
 16887  004256  6F9D               	movwf	??_check_fs& (0+255),b
 16888  004258  0EFF               	movlw	255
 16889  00425A  14DE               	andwf	postinc2,w,c
 16890  00425C  6F9E               	movwf	(??_check_fs+1)& (0+255),b
 16891  00425E  0EFF               	movlw	255
 16892  004260  14DE               	andwf	postinc2,w,c
 16893  004262  6F9F               	movwf	(??_check_fs+2)& (0+255),b
 16894  004264  0E00               	movlw	0
 16895  004266  14DE               	andwf	postinc2,w,c
 16896  004268  6FA0               	movwf	(??_check_fs+3)& (0+255),b
 16897  00426A  0E46               	movlw	70
 16898  00426C  199D               	xorwf	??_check_fs& (0+255),w,b
 16899  00426E  E10A               	bnz	l11229
 16900  004270  0E41               	movlw	65
 16901  004272  199E               	xorwf	(??_check_fs+1)& (0+255),w,b
 16902  004274  E107               	bnz	l11229
 16903  004276  0E54               	movlw	84
 16904  004278  199F               	xorwf	(??_check_fs+2)& (0+255),w,b
 16905  00427A  11A0               	iorwf	(??_check_fs+3)& (0+255),w,b
 16906  00427C  A4D8               	btfss	status,2,c
 16907  00427E  D002               	goto	l1165
 16908                           
 16909                           ; BSR set to: 0
 16910                           ;ff.c: 2190: return 0;
 16911  004280  0E00               	movlw	0
 16912                           
 16913                           ; BSR set to: 0
 16914  004282  0012               	return	
 16915  004284                     l1165:
 16916  004284                     l11229:
 16917                           
 16918                           ; BSR set to: 0
 16919                           ;ff.c: 2192: return 1;
 16920  004284  0E01               	movlw	1
 16921  004286  0012               	return	
 16922  004288                     __end_of_check_fs:
 16923                           	opt stack 0
 16924                           tblptru	equ	0xFF8
 16925                           tblptrh	equ	0xFF7
 16926                           tblptrl	equ	0xFF6
 16927                           tablat	equ	0xFF5
 16928                           prodh	equ	0xFF4
 16929                           prodl	equ	0xFF3
 16930                           intcon	equ	0xFF2
 16931                           intcon2	equ	0xFF1
 16932                           intcon3	equ	0xFF0
 16933                           indf0	equ	0xFEF
 16934                           postinc0	equ	0xFEE
 16935                           fsr0h	equ	0xFEA
 16936                           fsr0l	equ	0xFE9
 16937                           wreg	equ	0xFE8
 16938                           indf1	equ	0xFE7
 16939                           postinc1	equ	0xFE6
 16940                           postdec1	equ	0xFE5
 16941                           fsr1h	equ	0xFE2
 16942                           fsr1l	equ	0xFE1
 16943                           indf2	equ	0xFDF
 16944                           postinc2	equ	0xFDE
 16945                           postdec2	equ	0xFDD
 16946                           plusw2	equ	0xFDB
 16947                           fsr2h	equ	0xFDA
 16948                           fsr2l	equ	0xFD9
 16949                           status	equ	0xFD8
 16950                           
 16951 ;; *************** function _move_window *****************
 16952 ;; Defined at:
 16953 ;;		line 729 in file "bibliotecas/ff.c"
 16954 ;; Parameters:    Size  Location     Type
 16955 ;;  fs              2   44[BANK0 ] PTR struct .
 16956 ;;		 -> NULL(0), fs(558), 
 16957 ;;  sector          4   46[BANK0 ] unsigned long 
 16958 ;; Auto vars:     Size  Location     Type
 16959 ;;  res             1   54[BANK0 ] enum E75
 16960 ;; Return value:  Size  Location     Type
 16961 ;;                  1    wreg      enum E75
 16962 ;; Registers used:
 16963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16964 ;; Tracked objects:
 16965 ;;		On entry : 0/0
 16966 ;;		On exit  : 0/0
 16967 ;;		Unchanged: 0/0
 16968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16969 ;;      Params:         0       6       0       0       0       0       0       0       0
 16970 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16971 ;;      Temps:          0       4       0       0       0       0       0       0       0
 16972 ;;      Totals:         0      11       0       0       0       0       0       0       0
 16973 ;;Total ram usage:       11 bytes
 16974 ;; Hardware stack levels used:    1
 16975 ;; Hardware stack levels required when called:    8
 16976 ;; This function calls:
 16977 ;;		_disk_read
 16978 ;;		_sync_window
 16979 ;; This function is called by:
 16980 ;;		_get_fat
 16981 ;;		_put_fat
 16982 ;;		_dir_alloc
 16983 ;;		_dir_find
 16984 ;;		_dir_register
 16985 ;;		_check_fs
 16986 ;;		_find_volume
 16987 ;;		_f_open
 16988 ;;		_f_write
 16989 ;;		_f_sync
 16990 ;;		_f_read
 16991 ;; This function uses a non-reentrant model
 16992 ;;
 16993                           
 16994                           	psect	text51
 16995  004994                     __ptext51:
 16996                           	opt stack 0
 16997  004994                     _move_window:
 16998                           	opt stack 17
 16999                           
 17000                           ;ff.c: 734: FRESULT res = FR_OK;
 17001                           
 17002                           ;incstack = 0
 17003  004994  0E00               	movlw	0
 17004  004996  0100               	movlb	0	; () banked
 17005  004998  6F96               	movwf	move_window@res& (0+255),b
 17006                           
 17007                           ; BSR set to: 0
 17008                           ;ff.c: 737: if (sector != fs->winsect) {
 17009  00499A  EE20 F02A          	lfsr	2,42
 17010  00499E  518C               	movf	move_window@fs& (0+255),w,b
 17011  0049A0  26D9               	addwf	fsr2l,f,c
 17012  0049A2  518D               	movf	(move_window@fs+1)& (0+255),w,b
 17013  0049A4  22DA               	addwfc	fsr2h,f,c
 17014  0049A6  518E               	movf	move_window@sector& (0+255),w,b
 17015  0049A8  18DE               	xorwf	postinc2,w,c
 17016  0049AA  E10A               	bnz	u12500
 17017  0049AC  518F               	movf	(move_window@sector+1)& (0+255),w,b
 17018  0049AE  18DE               	xorwf	postinc2,w,c
 17019  0049B0  E107               	bnz	u12500
 17020  0049B2  5190               	movf	(move_window@sector+2)& (0+255),w,b
 17021  0049B4  18DE               	xorwf	postinc2,w,c
 17022  0049B6  E104               	bnz	u12500
 17023  0049B8  5191               	movf	(move_window@sector+3)& (0+255),w,b
 17024  0049BA  18DE               	xorwf	postinc2,w,c
 17025  0049BC  B4D8               	btfsc	status,2,c
 17026  0049BE  D03D               	goto	l901
 17027  0049C0                     u12500:
 17028                           
 17029                           ; BSR set to: 0
 17030                           ;ff.c: 739: res = sync_window(fs);
 17031  0049C0  C08C  F077         	movff	move_window@fs,sync_window@fs
 17032  0049C4  C08D  F078         	movff	move_window@fs+1,sync_window@fs+1
 17033  0049C8  EC71  F01C         	call	_sync_window	;wreg free
 17034  0049CC  0100               	movlb	0	; () banked
 17035  0049CE  6F96               	movwf	move_window@res& (0+255),b
 17036                           
 17037                           ; BSR set to: 0
 17038                           ;ff.c: 741: if (res == FR_OK) {
 17039  0049D0  5196               	movf	move_window@res& (0+255),w,b
 17040  0049D2  A4D8               	btfss	status,2,c
 17041  0049D4  D032               	goto	l901
 17042                           
 17043                           ; BSR set to: 0
 17044                           ;ff.c: 742: if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 17045  0049D6  0E2E               	movlw	46
 17046  0049D8  258C               	addwf	move_window@fs& (0+255),w,b
 17047  0049DA  6F6D               	movwf	disk_read@buff& (0+255),b
 17048  0049DC  0E00               	movlw	0
 17049  0049DE  218D               	addwfc	(move_window@fs+1)& (0+255),w,b
 17050  0049E0  6F6E               	movwf	(disk_read@buff+1)& (0+255),b
 17051  0049E2  C08E  F06F         	movff	move_window@sector,disk_read@sector
 17052  0049E6  C08F  F070         	movff	move_window@sector+1,disk_read@sector+1
 17053  0049EA  C090  F071         	movff	move_window@sector+2,disk_read@sector+2
 17054  0049EE  C091  F072         	movff	move_window@sector+3,disk_read@sector+3
 17055  0049F2  0E01               	movlw	1
 17056  0049F4  6F73               	movwf	disk_read@count& (0+255),b
 17057  0049F6  EE20 F001          	lfsr	2,1
 17058  0049FA  518C               	movf	move_window@fs& (0+255),w,b
 17059  0049FC  26D9               	addwf	fsr2l,f,c
 17060  0049FE  518D               	movf	(move_window@fs+1)& (0+255),w,b
 17061  004A00  22DA               	addwfc	fsr2h,f,c
 17062  004A02  50DF               	movf	indf2,w,c
 17063  004A04  ECA2  F022         	call	_disk_read
 17064  004A08  0900               	iorlw	0
 17065  004A0A  B4D8               	btfsc	status,2,c
 17066  004A0C  D007               	goto	l902
 17067                           
 17068                           ;ff.c: 743: sector = 0xFFFFFFFF;
 17069  004A0E  0100               	movlb	0	; () banked
 17070  004A10  698E               	setf	move_window@sector& (0+255),b
 17071  004A12  698F               	setf	(move_window@sector+1)& (0+255),b
 17072  004A14  6990               	setf	(move_window@sector+2)& (0+255),b
 17073  004A16  6991               	setf	(move_window@sector+3)& (0+255),b
 17074                           
 17075                           ; BSR set to: 0
 17076                           ;ff.c: 744: res = FR_DISK_ERR;
 17077  004A18  0E01               	movlw	1
 17078  004A1A  6F96               	movwf	move_window@res& (0+255),b
 17079  004A1C                     l902:
 17080                           
 17081                           ;ff.c: 745: }
 17082                           ;ff.c: 746: fs->winsect = sector;
 17083                           
 17084                           ; BSR set to: 0
 17085  004A1C  0100               	movlb	0	; () banked
 17086  004A1E  EE20 F02A          	lfsr	2,42
 17087  004A22  518C               	movf	move_window@fs& (0+255),w,b
 17088  004A24  26D9               	addwf	fsr2l,f,c
 17089  004A26  518D               	movf	(move_window@fs+1)& (0+255),w,b
 17090  004A28  22DA               	addwfc	fsr2h,f,c
 17091  004A2A  C08E  FFDE         	movff	move_window@sector,postinc2
 17092  004A2E  C08F  FFDE         	movff	move_window@sector+1,postinc2
 17093  004A32  C090  FFDE         	movff	move_window@sector+2,postinc2
 17094  004A36  C091  FFDE         	movff	move_window@sector+3,postinc2
 17095  004A3A                     l901:
 17096                           
 17097                           ; BSR set to: 0
 17098                           ;ff.c: 747: }
 17099                           ;ff.c: 748: }
 17100                           ;ff.c: 749: return res;
 17101                           
 17102                           ; BSR set to: 0
 17103                           
 17104                           ; BSR set to: 0
 17105  004A3A  5196               	movf	move_window@res& (0+255),w,b
 17106  004A3C  0012               	return	
 17107  004A3E                     __end_of_move_window:
 17108                           	opt stack 0
 17109                           tblptru	equ	0xFF8
 17110                           tblptrh	equ	0xFF7
 17111                           tblptrl	equ	0xFF6
 17112                           tablat	equ	0xFF5
 17113                           prodh	equ	0xFF4
 17114                           prodl	equ	0xFF3
 17115                           intcon	equ	0xFF2
 17116                           intcon2	equ	0xFF1
 17117                           intcon3	equ	0xFF0
 17118                           indf0	equ	0xFEF
 17119                           postinc0	equ	0xFEE
 17120                           fsr0h	equ	0xFEA
 17121                           fsr0l	equ	0xFE9
 17122                           wreg	equ	0xFE8
 17123                           indf1	equ	0xFE7
 17124                           postinc1	equ	0xFE6
 17125                           postdec1	equ	0xFE5
 17126                           fsr1h	equ	0xFE2
 17127                           fsr1l	equ	0xFE1
 17128                           indf2	equ	0xFDF
 17129                           postinc2	equ	0xFDE
 17130                           postdec2	equ	0xFDD
 17131                           plusw2	equ	0xFDB
 17132                           fsr2h	equ	0xFDA
 17133                           fsr2l	equ	0xFD9
 17134                           status	equ	0xFD8
 17135                           
 17136 ;; *************** function _sync_window *****************
 17137 ;; Defined at:
 17138 ;;		line 700 in file "bibliotecas/ff.c"
 17139 ;; Parameters:    Size  Location     Type
 17140 ;;  fs              2   23[BANK0 ] PTR struct .
 17141 ;;		 -> NULL(0), fs(558), 
 17142 ;; Auto vars:     Size  Location     Type
 17143 ;;  wsect           4   40[BANK0 ] unsigned long 
 17144 ;;  nf              2   38[BANK0 ] unsigned int 
 17145 ;;  res             1   37[BANK0 ] enum E75
 17146 ;; Return value:  Size  Location     Type
 17147 ;;                  1    wreg      enum E75
 17148 ;; Registers used:
 17149 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17150 ;; Tracked objects:
 17151 ;;		On entry : 0/0
 17152 ;;		On exit  : 0/0
 17153 ;;		Unchanged: 0/0
 17154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17155 ;;      Params:         0       2       0       0       0       0       0       0       0
 17156 ;;      Locals:         0       7       0       0       0       0       0       0       0
 17157 ;;      Temps:          0      12       0       0       0       0       0       0       0
 17158 ;;      Totals:         0      21       0       0       0       0       0       0       0
 17159 ;;Total ram usage:       21 bytes
 17160 ;; Hardware stack levels used:    1
 17161 ;; Hardware stack levels required when called:    7
 17162 ;; This function calls:
 17163 ;;		_disk_write
 17164 ;; This function is called by:
 17165 ;;		_move_window
 17166 ;;		_sync_fs
 17167 ;;		_dir_next
 17168 ;;		_f_write
 17169 ;; This function uses a non-reentrant model
 17170 ;;
 17171                           
 17172                           	psect	text52
 17173  0038E2                     __ptext52:
 17174                           	opt stack 0
 17175  0038E2                     _sync_window:
 17176                           	opt stack 17
 17177                           
 17178                           ;ff.c: 704: DWORD wsect;
 17179                           ;ff.c: 705: UINT nf;
 17180                           ;ff.c: 706: FRESULT res = FR_OK;
 17181                           
 17182                           ; BSR set to: 0
 17183                           ;incstack = 0
 17184  0038E2  0E00               	movlw	0
 17185  0038E4  0100               	movlb	0	; () banked
 17186  0038E6  6F85               	movwf	sync_window@res& (0+255),b
 17187                           
 17188                           ; BSR set to: 0
 17189                           ;ff.c: 709: if (fs->wflag) {
 17190  0038E8  EE20 F004          	lfsr	2,4
 17191  0038EC  5177               	movf	sync_window@fs& (0+255),w,b
 17192  0038EE  26D9               	addwf	fsr2l,f,c
 17193  0038F0  5178               	movf	(sync_window@fs+1)& (0+255),w,b
 17194  0038F2  22DA               	addwfc	fsr2h,f,c
 17195  0038F4  50DF               	movf	indf2,w,c
 17196  0038F6  B4D8               	btfsc	status,2,c
 17197  0038F8  D0A7               	goto	u12490
 17198                           
 17199                           ; BSR set to: 0
 17200                           ;ff.c: 710: wsect = fs->winsect;
 17201  0038FA  EE20 F02A          	lfsr	2,42
 17202  0038FE  5177               	movf	sync_window@fs& (0+255),w,b
 17203  003900  26D9               	addwf	fsr2l,f,c
 17204  003902  5178               	movf	(sync_window@fs+1)& (0+255),w,b
 17205  003904  22DA               	addwfc	fsr2h,f,c
 17206  003906  CFDE F088          	movff	postinc2,sync_window@wsect
 17207  00390A  CFDE F089          	movff	postinc2,sync_window@wsect+1
 17208  00390E  CFDE F08A          	movff	postinc2,sync_window@wsect+2
 17209  003912  CFDE F08B          	movff	postinc2,sync_window@wsect+3
 17210                           
 17211                           ; BSR set to: 0
 17212                           ;ff.c: 711: if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 17213  003916  0E2E               	movlw	46
 17214  003918  2577               	addwf	sync_window@fs& (0+255),w,b
 17215  00391A  6F6C               	movwf	disk_write@buff& (0+255),b
 17216  00391C  0E00               	movlw	0
 17217  00391E  2178               	addwfc	(sync_window@fs+1)& (0+255),w,b
 17218  003920  6F6D               	movwf	(disk_write@buff+1)& (0+255),b
 17219  003922  C088  F06E         	movff	sync_window@wsect,disk_write@sector
 17220  003926  C089  F06F         	movff	sync_window@wsect+1,disk_write@sector+1
 17221  00392A  C08A  F070         	movff	sync_window@wsect+2,disk_write@sector+2
 17222  00392E  C08B  F071         	movff	sync_window@wsect+3,disk_write@sector+3
 17223  003932  0E01               	movlw	1
 17224  003934  6F72               	movwf	disk_write@count& (0+255),b
 17225  003936  EE20 F001          	lfsr	2,1
 17226  00393A  5177               	movf	sync_window@fs& (0+255),w,b
 17227  00393C  26D9               	addwf	fsr2l,f,c
 17228  00393E  5178               	movf	(sync_window@fs+1)& (0+255),w,b
 17229  003940  22DA               	addwfc	fsr2h,f,c
 17230  003942  50DF               	movf	indf2,w,c
 17231  003944  EC50  F026         	call	_disk_write
 17232  003948  0900               	iorlw	0
 17233  00394A  B4D8               	btfsc	status,2,c
 17234  00394C  D004               	goto	l892
 17235                           
 17236                           ;ff.c: 712: res = FR_DISK_ERR;
 17237  00394E  0E01               	movlw	1
 17238  003950  0100               	movlb	0	; () banked
 17239  003952  6F85               	movwf	sync_window@res& (0+255),b
 17240                           
 17241                           ;ff.c: 713: } else {
 17242  003954  D079               	goto	u12490
 17243  003956                     l892:
 17244                           
 17245                           ;ff.c: 714: fs->wflag = 0;
 17246                           
 17247                           ; BSR set to: 0
 17248  003956  0100               	movlb	0	; () banked
 17249  003958  EE20 F004          	lfsr	2,4
 17250  00395C  5177               	movf	sync_window@fs& (0+255),w,b
 17251  00395E  26D9               	addwf	fsr2l,f,c
 17252  003960  5178               	movf	(sync_window@fs+1)& (0+255),w,b
 17253  003962  22DA               	addwfc	fsr2h,f,c
 17254  003964  0E00               	movlw	0
 17255  003966  6EDF               	movwf	indf2,c
 17256                           
 17257                           ; BSR set to: 0
 17258                           ;ff.c: 715: if (wsect - fs->fatbase < fs->fsize) {
 17259  003968  EE20 F016          	lfsr	2,22
 17260  00396C  5177               	movf	sync_window@fs& (0+255),w,b
 17261  00396E  26D9               	addwf	fsr2l,f,c
 17262  003970  5178               	movf	(sync_window@fs+1)& (0+255),w,b
 17263  003972  22DA               	addwfc	fsr2h,f,c
 17264  003974  EE10 F01E          	lfsr	1,30
 17265  003978  5177               	movf	sync_window@fs& (0+255),w,b
 17266  00397A  26E1               	addwf	fsr1l,f,c
 17267  00397C  5178               	movf	(sync_window@fs+1)& (0+255),w,b
 17268  00397E  22E2               	addwfc	fsr1h,f,c
 17269  003980  CFE6 F07D          	movff	postinc1,??_sync_window+4
 17270  003984  CFE6 F07E          	movff	postinc1,??_sync_window+5
 17271  003988  CFE6 F07F          	movff	postinc1,??_sync_window+6
 17272  00398C  CFE6 F080          	movff	postinc1,??_sync_window+7
 17273  003990  1F7D               	comf	(??_sync_window+4)& (0+255),f,b
 17274  003992  1F7E               	comf	(??_sync_window+5)& (0+255),f,b
 17275  003994  1F7F               	comf	(??_sync_window+6)& (0+255),f,b
 17276  003996  1F80               	comf	(??_sync_window+7)& (0+255),f,b
 17277  003998  2B7D               	incf	(??_sync_window+4)& (0+255),f,b
 17278  00399A  0E00               	movlw	0
 17279  00399C  237E               	addwfc	(??_sync_window+5)& (0+255),f,b
 17280  00399E  237F               	addwfc	(??_sync_window+6)& (0+255),f,b
 17281  0039A0  2380               	addwfc	(??_sync_window+7)& (0+255),f,b
 17282  0039A2  5188               	movf	sync_window@wsect& (0+255),w,b
 17283  0039A4  257D               	addwf	(??_sync_window+4)& (0+255),w,b
 17284  0039A6  6F81               	movwf	(??_sync_window+8)& (0+255),b
 17285  0039A8  5189               	movf	(sync_window@wsect+1)& (0+255),w,b
 17286  0039AA  217E               	addwfc	(??_sync_window+5)& (0+255),w,b
 17287  0039AC  6F82               	movwf	(??_sync_window+9)& (0+255),b
 17288  0039AE  518A               	movf	(sync_window@wsect+2)& (0+255),w,b
 17289  0039B0  217F               	addwfc	(??_sync_window+6)& (0+255),w,b
 17290  0039B2  6F83               	movwf	(??_sync_window+10)& (0+255),b
 17291  0039B4  518B               	movf	(sync_window@wsect+3)& (0+255),w,b
 17292  0039B6  2180               	addwfc	(??_sync_window+7)& (0+255),w,b
 17293  0039B8  6F84               	movwf	(??_sync_window+11)& (0+255),b
 17294  0039BA  50DE               	movf	postinc2,w,c
 17295  0039BC  5D81               	subwf	(??_sync_window+8)& (0+255),w,b
 17296  0039BE  50DE               	movf	postinc2,w,c
 17297  0039C0  5982               	subwfb	(??_sync_window+9)& (0+255),w,b
 17298  0039C2  50DE               	movf	postinc2,w,c
 17299  0039C4  5983               	subwfb	(??_sync_window+10)& (0+255),w,b
 17300  0039C6  50DE               	movf	postinc2,w,c
 17301  0039C8  5984               	subwfb	(??_sync_window+11)& (0+255),w,b
 17302  0039CA  B0D8               	btfsc	status,0,c
 17303  0039CC  D03D               	goto	u12490
 17304                           
 17305                           ; BSR set to: 0
 17306                           ;ff.c: 716: for (nf = fs->n_fats; nf >= 2; nf--) {
 17307  0039CE  EE20 F003          	lfsr	2,3
 17308  0039D2  5177               	movf	sync_window@fs& (0+255),w,b
 17309  0039D4  26D9               	addwf	fsr2l,f,c
 17310  0039D6  5178               	movf	(sync_window@fs+1)& (0+255),w,b
 17311  0039D8  22DA               	addwfc	fsr2h,f,c
 17312  0039DA  50DF               	movf	indf2,w,c
 17313  0039DC  6F79               	movwf	??_sync_window& (0+255),b
 17314  0039DE  5179               	movf	??_sync_window& (0+255),w,b
 17315  0039E0  6F86               	movwf	sync_window@nf& (0+255),b
 17316  0039E2  6B87               	clrf	(sync_window@nf+1)& (0+255),b
 17317  0039E4                     l10173:
 17318                           
 17319                           ; BSR set to: 0
 17320  0039E4  5187               	movf	(sync_window@nf+1)& (0+255),w,b
 17321  0039E6  E104               	bnz	l10177
 17322  0039E8  0E02               	movlw	2
 17323  0039EA  5D86               	subwf	sync_window@nf& (0+255),w,b
 17324  0039EC  A0D8               	btfss	status,0,c
 17325  0039EE  D02C               	goto	u12490
 17326  0039F0                     l10177:
 17327                           
 17328                           ; BSR set to: 0
 17329                           ;ff.c: 717: wsect += fs->fsize;
 17330  0039F0  EE20 F016          	lfsr	2,22
 17331  0039F4  5177               	movf	sync_window@fs& (0+255),w,b
 17332  0039F6  26D9               	addwf	fsr2l,f,c
 17333  0039F8  5178               	movf	(sync_window@fs+1)& (0+255),w,b
 17334  0039FA  22DA               	addwfc	fsr2h,f,c
 17335  0039FC  50DE               	movf	postinc2,w,c
 17336  0039FE  2788               	addwf	sync_window@wsect& (0+255),f,b
 17337  003A00  50DE               	movf	postinc2,w,c
 17338  003A02  2389               	addwfc	(sync_window@wsect+1)& (0+255),f,b
 17339  003A04  50DE               	movf	postinc2,w,c
 17340  003A06  238A               	addwfc	(sync_window@wsect+2)& (0+255),f,b
 17341  003A08  50DD               	movf	postdec2,w,c
 17342  003A0A  238B               	addwfc	(sync_window@wsect+3)& (0+255),f,b
 17343                           
 17344                           ; BSR set to: 0
 17345                           ;ff.c: 718: disk_write(fs->drv, fs->win, wsect, 1);
 17346  003A0C  0E2E               	movlw	46
 17347  003A0E  2577               	addwf	sync_window@fs& (0+255),w,b
 17348  003A10  6F6C               	movwf	disk_write@buff& (0+255),b
 17349  003A12  0E00               	movlw	0
 17350  003A14  2178               	addwfc	(sync_window@fs+1)& (0+255),w,b
 17351  003A16  6F6D               	movwf	(disk_write@buff+1)& (0+255),b
 17352  003A18  C088  F06E         	movff	sync_window@wsect,disk_write@sector
 17353  003A1C  C089  F06F         	movff	sync_window@wsect+1,disk_write@sector+1
 17354  003A20  C08A  F070         	movff	sync_window@wsect+2,disk_write@sector+2
 17355  003A24  C08B  F071         	movff	sync_window@wsect+3,disk_write@sector+3
 17356  003A28  0E01               	movlw	1
 17357  003A2A  6F72               	movwf	disk_write@count& (0+255),b
 17358  003A2C  EE20 F001          	lfsr	2,1
 17359  003A30  5177               	movf	sync_window@fs& (0+255),w,b
 17360  003A32  26D9               	addwf	fsr2l,f,c
 17361  003A34  5178               	movf	(sync_window@fs+1)& (0+255),w,b
 17362  003A36  22DA               	addwfc	fsr2h,f,c
 17363  003A38  50DF               	movf	indf2,w,c
 17364  003A3A  EC50  F026         	call	_disk_write
 17365  003A3E  0100               	movlb	0	; () banked
 17366  003A40  0786               	decf	sync_window@nf& (0+255),f,b
 17367  003A42  A0D8               	btfss	status,0,c
 17368  003A44  0787               	decf	(sync_window@nf+1)& (0+255),f,b
 17369  003A46  D7CE               	goto	l10173
 17370  003A48                     u12490:
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;ff.c: 719: }
 17374                           ;ff.c: 720: }
 17375                           ;ff.c: 721: }
 17376                           ;ff.c: 722: }
 17377                           ;ff.c: 723: return res;
 17378                           
 17379                           ; BSR set to: 0
 17380                           
 17381                           ; BSR set to: 0
 17382                           
 17383                           ; BSR set to: 0
 17384                           
 17385                           ; BSR set to: 0
 17386  003A48  5185               	movf	sync_window@res& (0+255),w,b
 17387  003A4A  0012               	return	
 17388  003A4C                     __end_of_sync_window:
 17389                           	opt stack 0
 17390                           tblptru	equ	0xFF8
 17391                           tblptrh	equ	0xFF7
 17392                           tblptrl	equ	0xFF6
 17393                           tablat	equ	0xFF5
 17394                           prodh	equ	0xFF4
 17395                           prodl	equ	0xFF3
 17396                           intcon	equ	0xFF2
 17397                           intcon2	equ	0xFF1
 17398                           intcon3	equ	0xFF0
 17399                           indf0	equ	0xFEF
 17400                           postinc0	equ	0xFEE
 17401                           fsr0h	equ	0xFEA
 17402                           fsr0l	equ	0xFE9
 17403                           wreg	equ	0xFE8
 17404                           indf1	equ	0xFE7
 17405                           postinc1	equ	0xFE6
 17406                           postdec1	equ	0xFE5
 17407                           fsr1h	equ	0xFE2
 17408                           fsr1l	equ	0xFE1
 17409                           indf2	equ	0xFDF
 17410                           postinc2	equ	0xFDE
 17411                           postdec2	equ	0xFDD
 17412                           plusw2	equ	0xFDB
 17413                           fsr2h	equ	0xFDA
 17414                           fsr2l	equ	0xFD9
 17415                           status	equ	0xFD8
 17416                           
 17417 ;; *************** function _disk_write *****************
 17418 ;; Defined at:
 17419 ;;		line 200 in file "bibliotecas/diskio.c"
 17420 ;; Parameters:    Size  Location     Type
 17421 ;;  pdrv            1    wreg     unsigned char 
 17422 ;;  buff            2   12[BANK0 ] PTR const unsigned char 
 17423 ;;		 -> fs.win(512), NULL(0), STR_11(8), fs(558), 
 17424 ;;  sector          4   14[BANK0 ] unsigned long 
 17425 ;;  count           1   18[BANK0 ] unsigned char 
 17426 ;; Auto vars:     Size  Location     Type
 17427 ;;  pdrv            1   19[BANK0 ] unsigned char 
 17428 ;;  result          2   20[BANK0 ] int 
 17429 ;;  res             1   22[BANK0 ] enum E25
 17430 ;; Return value:  Size  Location     Type
 17431 ;;                  1    wreg      enum E25
 17432 ;; Registers used:
 17433 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17434 ;; Tracked objects:
 17435 ;;		On entry : 0/0
 17436 ;;		On exit  : 0/0
 17437 ;;		Unchanged: 0/0
 17438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17439 ;;      Params:         0       7       0       0       0       0       0       0       0
 17440 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17441 ;;      Temps:          1       0       0       0       0       0       0       0       0
 17442 ;;      Totals:         1      11       0       0       0       0       0       0       0
 17443 ;;Total ram usage:       12 bytes
 17444 ;; Hardware stack levels used:    1
 17445 ;; Hardware stack levels required when called:    6
 17446 ;; This function calls:
 17447 ;;		_sdc_disk_write
 17448 ;; This function is called by:
 17449 ;;		_sync_window
 17450 ;;		_sync_fs
 17451 ;;		_f_write
 17452 ;; This function uses a non-reentrant model
 17453 ;;
 17454                           
 17455                           	psect	text53
 17456  004CA0                     __ptext53:
 17457                           	opt stack 0
 17458  004CA0                     _disk_write:
 17459                           	opt stack 17
 17460                           
 17461                           ; BSR set to: 0
 17462                           ;incstack = 0
 17463                           ;disk_write@pdrv stored from wreg
 17464  004CA0  0100               	movlb	0	; () banked
 17465  004CA2  6F73               	movwf	disk_write@pdrv& (0+255),b
 17466                           
 17467                           ;diskio.c: 207: DRESULT res;
 17468                           ;diskio.c: 208: int result;
 17469                           ;diskio.c: 210: switch (pdrv) {
 17470  004CA4  D034               	goto	l420
 17471  004CA6                     
 17472                           ;diskio.c: 213: result = sdc_disk_write(buff, sector, count);
 17473  004CA6  C06C  F026         	movff	disk_write@buff,sdc_disk_write@p_buff
 17474  004CAA  C06D  F027         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 17475  004CAE  C06E  F028         	movff	disk_write@sector,sdc_disk_write@sector
 17476  004CB2  C06F  F029         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 17477  004CB6  C070  F02A         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 17478  004CBA  C071  F02B         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 17479  004CBE  C072  F02C         	movff	disk_write@count,sdc_disk_write@count
 17480  004CC2  EC4B  F020         	call	_sdc_disk_write	;wreg free
 17481  004CC6  6E2D               	movwf	??_disk_write& (0+255),c
 17482  004CC8  502D               	movf	??_disk_write,w,c
 17483  004CCA  0100               	movlb	0	; () banked
 17484  004CCC  6F74               	movwf	disk_write@result& (0+255),b
 17485  004CCE  6B75               	clrf	(disk_write@result+1)& (0+255),b
 17486                           
 17487                           ; BSR set to: 0
 17488                           ;diskio.c: 215: res = result;
 17489  004CD0  C074  F076         	movff	disk_write@result,disk_write@res
 17490                           
 17491                           ; BSR set to: 0
 17492                           ;diskio.c: 218: return res;
 17493  004CD4  5176               	movf	disk_write@res& (0+255),w,b
 17494                           
 17495                           ; BSR set to: 0
 17496  004CD6  0012               	return	
 17497  004CD8                     
 17498                           ; BSR set to: 0
 17499                           ;diskio.c: 223: result = sdc_disk_write(buff, sector, count);
 17500                           
 17501                           ; BSR set to: 0
 17502  004CD8  C06C  F026         	movff	disk_write@buff,sdc_disk_write@p_buff
 17503  004CDC  C06D  F027         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 17504  004CE0  C06E  F028         	movff	disk_write@sector,sdc_disk_write@sector
 17505  004CE4  C06F  F029         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 17506  004CE8  C070  F02A         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 17507  004CEC  C071  F02B         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 17508  004CF0  C072  F02C         	movff	disk_write@count,sdc_disk_write@count
 17509  004CF4  EC4B  F020         	call	_sdc_disk_write	;wreg free
 17510  004CF8  6E2D               	movwf	??_disk_write& (0+255),c
 17511  004CFA  502D               	movf	??_disk_write,w,c
 17512  004CFC  0100               	movlb	0	; () banked
 17513  004CFE  6F74               	movwf	disk_write@result& (0+255),b
 17514  004D00  6B75               	clrf	(disk_write@result+1)& (0+255),b
 17515                           
 17516                           ; BSR set to: 0
 17517                           ;diskio.c: 224: res = result;
 17518  004D02  C074  F076         	movff	disk_write@result,disk_write@res
 17519                           
 17520                           ; BSR set to: 0
 17521                           ;diskio.c: 227: return res;
 17522  004D06  5176               	movf	disk_write@res& (0+255),w,b
 17523                           
 17524                           ; BSR set to: 0
 17525  004D08  0012               	return	
 17526  004D0A                     
 17527                           ; BSR set to: 0
 17528                           ;diskio.c: 236: return res;
 17529                           
 17530                           ; BSR set to: 0
 17531  004D0A  5176               	movf	disk_write@res& (0+255),w,b
 17532                           
 17533                           ; BSR set to: 0
 17534  004D0C  0012               	return	
 17535  004D0E                     l420:
 17536                           
 17537                           ; BSR set to: 0
 17538  004D0E  0100               	movlb	0	; () banked
 17539  004D10  5173               	movf	disk_write@pdrv& (0+255),w,b
 17540                           
 17541                           ; Switch size 1, requested type "space"
 17542                           ; Number of cases is 3, Range of values is 0 to 2
 17543                           ; switch strategies available:
 17544                           ; Name         Instructions Cycles
 17545                           ; simple_byte           10     6 (average)
 17546                           ;	Chosen strategy is simple_byte
 17547  004D12  0A00               	xorlw	0	; case 0
 17548  004D14  B4D8               	btfsc	status,2,c
 17549  004D16  D7C7               	goto	l421
 17550  004D18  0A01               	xorlw	1	; case 1
 17551  004D1A  B4D8               	btfsc	status,2,c
 17552  004D1C  D7DD               	goto	l423
 17553  004D1E  0A03               	xorlw	3	; case 2
 17554  004D20  B4D8               	btfsc	status,2,c
 17555  004D22  D7F3               	goto	l424
 17556                           
 17557                           ; BSR set to: 0
 17558                           ;diskio.c: 239: return RES_PARERR;
 17559                           
 17560                           ; BSR set to: 0
 17561  004D24  0E04               	movlw	4
 17562  004D26  0012               	return	
 17563  004D28                     __end_of_disk_write:
 17564                           	opt stack 0
 17565                           tblptru	equ	0xFF8
 17566                           tblptrh	equ	0xFF7
 17567                           tblptrl	equ	0xFF6
 17568                           tablat	equ	0xFF5
 17569                           prodh	equ	0xFF4
 17570                           prodl	equ	0xFF3
 17571                           intcon	equ	0xFF2
 17572                           intcon2	equ	0xFF1
 17573                           intcon3	equ	0xFF0
 17574                           indf0	equ	0xFEF
 17575                           postinc0	equ	0xFEE
 17576                           fsr0h	equ	0xFEA
 17577                           fsr0l	equ	0xFE9
 17578                           wreg	equ	0xFE8
 17579                           indf1	equ	0xFE7
 17580                           postinc1	equ	0xFE6
 17581                           postdec1	equ	0xFE5
 17582                           fsr1h	equ	0xFE2
 17583                           fsr1l	equ	0xFE1
 17584                           indf2	equ	0xFDF
 17585                           postinc2	equ	0xFDE
 17586                           postdec2	equ	0xFDD
 17587                           plusw2	equ	0xFDB
 17588                           fsr2h	equ	0xFDA
 17589                           fsr2l	equ	0xFD9
 17590                           status	equ	0xFD8
 17591                           
 17592 ;; *************** function _sdc_disk_write *****************
 17593 ;; Defined at:
 17594 ;;		line 608 in file "bibliotecas/diskio.c"
 17595 ;; Parameters:    Size  Location     Type
 17596 ;;  p_buff          2   37[COMRAM] PTR const unsigned char 
 17597 ;;		 -> fs.win(512), NULL(0), STR_11(8), fs(558), 
 17598 ;;  sector          4   39[COMRAM] unsigned long 
 17599 ;;  count           1   43[COMRAM] unsigned char 
 17600 ;; Auto vars:     Size  Location     Type
 17601 ;;  j               2    9[BANK0 ] int 
 17602 ;;  count1          2    6[BANK0 ] int 
 17603 ;;  i               2    4[BANK0 ] int 
 17604 ;;  buff            1   11[BANK0 ] unsigned char 
 17605 ;;  res             1    8[BANK0 ] enum E25
 17606 ;; Return value:  Size  Location     Type
 17607 ;;                  1    wreg      enum E25
 17608 ;; Registers used:
 17609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17610 ;; Tracked objects:
 17611 ;;		On entry : 0/0
 17612 ;;		On exit  : 0/0
 17613 ;;		Unchanged: 0/0
 17614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17615 ;;      Params:         7       0       0       0       0       0       0       0       0
 17616 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17617 ;;      Temps:          0       4       0       0       0       0       0       0       0
 17618 ;;      Totals:         7      12       0       0       0       0       0       0       0
 17619 ;;Total ram usage:       19 bytes
 17620 ;; Hardware stack levels used:    1
 17621 ;; Hardware stack levels required when called:    5
 17622 ;; This function calls:
 17623 ;;		_ReadSPI_
 17624 ;;		_WriteSPI_
 17625 ;;		_command
 17626 ;;		_dummy_clocks
 17627 ;;		_proceed
 17628 ;;		_response
 17629 ;; This function is called by:
 17630 ;;		_disk_write
 17631 ;; This function uses a non-reentrant model
 17632 ;;
 17633                           
 17634                           	psect	text54
 17635  004096                     __ptext54:
 17636                           	opt stack 0
 17637  004096                     _sdc_disk_write:
 17638                           	opt stack 17
 17639                           
 17640                           ;diskio.c: 610: DRESULT res;
 17641                           ;diskio.c: 611: unsigned char buff;
 17642                           ;diskio.c: 612: int i=0,j, count1 = 0;
 17643                           
 17644                           ; BSR set to: 0
 17645                           ;incstack = 0
 17646  004096  0E00               	movlw	0
 17647  004098  0100               	movlb	0	; () banked
 17648  00409A  6F65               	movwf	(sdc_disk_write@i+1)& (0+255),b
 17649  00409C  0E00               	movlw	0
 17650  00409E  6F64               	movwf	sdc_disk_write@i& (0+255),b
 17651  0040A0  0E00               	movlw	0
 17652  0040A2  6F67               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 17653  0040A4  0E00               	movlw	0
 17654  0040A6  6F66               	movwf	sdc_disk_write@count1& (0+255),b
 17655                           
 17656                           ; BSR set to: 0
 17657                           ;diskio.c: 613: LATCbits.LATC7 = 0;
 17658  0040A8  9E8B               	bcf	3979,7,c	;volatile
 17659                           
 17660                           ; BSR set to: 0
 17661                           ;diskio.c: 614: LATBbits.LATB4 = 0;
 17662  0040AA  988A               	bcf	3978,4,c	;volatile
 17663                           
 17664                           ; BSR set to: 0
 17665                           ;diskio.c: 615: dummy_clocks(10);
 17666  0040AC  0E0A               	movlw	10
 17667  0040AE  EC81  F02A         	call	_dummy_clocks
 17668                           
 17669                           ;diskio.c: 616: command(0X58, sector*512, 0X00);
 17670  0040B2  C028  F060         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17671  0040B6  C029  F061         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17672  0040BA  C02A  F062         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17673  0040BE  C02B  F063         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17674  0040C2  0E09               	movlw	9
 17675  0040C4                     u12225:
 17676  0040C4  90D8               	bcf	status,0,c
 17677  0040C6  0100               	movlb	0	; () banked
 17678  0040C8  3760               	rlcf	??_sdc_disk_write& (0+255),f,b
 17679  0040CA  3761               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 17680  0040CC  3762               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 17681  0040CE  3763               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 17682  0040D0  2EE8               	decfsz	wreg,f,c
 17683  0040D2  D7F8               	goto	u12225
 17684  0040D4  C060  F01F         	movff	??_sdc_disk_write,command@arg
 17685  0040D8  C061  F020         	movff	??_sdc_disk_write+1,command@arg+1
 17686  0040DC  C062  F021         	movff	??_sdc_disk_write+2,command@arg+2
 17687  0040E0  C063  F022         	movff	??_sdc_disk_write+3,command@arg+3
 17688  0040E4  0E00               	movlw	0
 17689  0040E6  6E23               	movwf	command@CRC,c
 17690  0040E8  0E58               	movlw	88
 17691  0040EA  ECD6  F028         	call	_command
 17692                           
 17693                           ;diskio.c: 617: proceed();
 17694  0040EE  ECB6  F02B         	call	_proceed	;wreg free
 17695  0040F2                     
 17696                           ;diskio.c: 619: buff = response();
 17697  0040F2  ECB0  F02B         	call	_response	;wreg free
 17698  0040F6  0100               	movlb	0	; () banked
 17699  0040F8  6F6B               	movwf	sdc_disk_write@buff& (0+255),b
 17700                           
 17701                           ; BSR set to: 0
 17702                           ;diskio.c: 620: }while(buff!=0X00);
 17703  0040FA  516B               	movf	sdc_disk_write@buff& (0+255),w,b
 17704  0040FC  A4D8               	btfss	status,2,c
 17705  0040FE  D7F9               	goto	l506
 17706                           
 17707                           ; BSR set to: 0
 17708                           ;diskio.c: 622: LATBbits.LATB4 = 0;
 17709  004100  988A               	bcf	3978,4,c	;volatile
 17710                           
 17711                           ;diskio.c: 623: LATCbits.LATC7 = 0;
 17712  004102  9E8B               	bcf	3979,7,c	;volatile
 17713                           
 17714                           ; BSR set to: 0
 17715                           ;diskio.c: 624: dummy_clocks(1);
 17716  004104  0E01               	movlw	1
 17717  004106  EC81  F02A         	call	_dummy_clocks
 17718                           
 17719                           ;diskio.c: 625: WriteSPI_(0XFE);
 17720  00410A  0EFE               	movlw	254
 17721  00410C  EC8E  F02B         	call	_WriteSPI_
 17722                           
 17723                           ;diskio.c: 627: for(j=0;j<512;j++)
 17724  004110  0E00               	movlw	0
 17725  004112  0100               	movlb	0	; () banked
 17726  004114  6F6A               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17727  004116  0E00               	movlw	0
 17728  004118  6F69               	movwf	sdc_disk_write@j& (0+255),b
 17729  00411A                     l9923:
 17730                           
 17731                           ; BSR set to: 0
 17732  00411A  BF6A               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17733  00411C  D004               	goto	l508
 17734  00411E  0E02               	movlw	2
 17735  004120  5D6A               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17736  004122  B0D8               	btfsc	status,0,c
 17737  004124  D018               	goto	u12260
 17738  004126                     l508:
 17739                           
 17740                           ; BSR set to: 0
 17741                           ;diskio.c: 628: {
 17742                           ;diskio.c: 630: WriteSPI_(*p_buff);
 17743                           
 17744                           ; BSR set to: 0
 17745  004126  C026  FFF6         	movff	sdc_disk_write@p_buff,tblptrl
 17746  00412A  C027  FFF7         	movff	sdc_disk_write@p_buff+1,tblptrh
 17747  00412E  6AF8               	clrf	tblptru,c
 17748  004130  0E07               	movlw	(high __ramtop+-1)
 17749  004132  64F7               	cpfsgt	tblptrh,c
 17750  004134  D003               	bra	u12257
 17751  004136  0008               	tblrd		*
 17752  004138  50F5               	movf	tablat,w,c
 17753  00413A  D005               	bra	u12250
 17754  00413C                     u12257:
 17755  00413C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17756  004140  CFF7 FFEA          	movff	tblptrh,fsr0h
 17757  004144  50EF               	movf	indf0,w,c
 17758  004146                     u12250:
 17759  004146  EC8E  F02B         	call	_WriteSPI_
 17760                           
 17761                           ;diskio.c: 631: p_buff++;
 17762  00414A  4A26               	infsnz	sdc_disk_write@p_buff,f,c
 17763  00414C  2A27               	incf	sdc_disk_write@p_buff+1,f,c
 17764  00414E  0100               	movlb	0	; () banked
 17765  004150  4B69               	infsnz	sdc_disk_write@j& (0+255),f,b
 17766  004152  2B6A               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17767  004154  D7E2               	goto	l9923
 17768  004156                     u12260:
 17769                           
 17770                           ; BSR set to: 0
 17771                           ;diskio.c: 634: }
 17772                           ;diskio.c: 636: ReadSPI_();
 17773                           
 17774                           ; BSR set to: 0
 17775  004156  ECBC  F02B         	call	_ReadSPI_	;wreg free
 17776                           
 17777                           ;diskio.c: 637: ReadSPI_();
 17778  00415A  ECBC  F02B         	call	_ReadSPI_	;wreg free
 17779                           
 17780                           ;diskio.c: 639: dummy_clocks(10);
 17781  00415E  0E0A               	movlw	10
 17782  004160  EC81  F02A         	call	_dummy_clocks
 17783                           
 17784                           ;diskio.c: 640: command(0X4D,0X00000000,0X00);
 17785  004164  0E00               	movlw	0
 17786  004166  6E1F               	movwf	command@arg,c
 17787  004168  0E00               	movlw	0
 17788  00416A  6E20               	movwf	command@arg+1,c
 17789  00416C  0E00               	movlw	0
 17790  00416E  6E21               	movwf	command@arg+2,c
 17791  004170  0E00               	movlw	0
 17792  004172  6E22               	movwf	command@arg+3,c
 17793  004174  0E00               	movlw	0
 17794  004176  6E23               	movwf	command@CRC,c
 17795  004178  0E4D               	movlw	77
 17796  00417A  ECD6  F028         	call	_command
 17797                           
 17798                           ;diskio.c: 641: proceed();
 17799  00417E  ECB6  F02B         	call	_proceed	;wreg free
 17800  004182                     
 17801                           ;diskio.c: 643: buff = response();
 17802  004182  ECB0  F02B         	call	_response	;wreg free
 17803  004186  0100               	movlb	0	; () banked
 17804  004188  6F6B               	movwf	sdc_disk_write@buff& (0+255),b
 17805                           
 17806                           ; BSR set to: 0
 17807                           ;diskio.c: 644: }while(buff!=0X00 );
 17808  00418A  516B               	movf	sdc_disk_write@buff& (0+255),w,b
 17809  00418C  A4D8               	btfss	status,2,c
 17810  00418E  D7F9               	goto	l510
 17811                           
 17812                           ; BSR set to: 0
 17813                           ;diskio.c: 649: return res;
 17814                           
 17815                           ; BSR set to: 0
 17816  004190  5168               	movf	sdc_disk_write@res& (0+255),w,b
 17817  004192  0012               	return	
 17818  004194                     __end_of_sdc_disk_write:
 17819                           	opt stack 0
 17820                           tblptru	equ	0xFF8
 17821                           tblptrh	equ	0xFF7
 17822                           tblptrl	equ	0xFF6
 17823                           tablat	equ	0xFF5
 17824                           prodh	equ	0xFF4
 17825                           prodl	equ	0xFF3
 17826                           intcon	equ	0xFF2
 17827                           intcon2	equ	0xFF1
 17828                           intcon3	equ	0xFF0
 17829                           indf0	equ	0xFEF
 17830                           postinc0	equ	0xFEE
 17831                           fsr0h	equ	0xFEA
 17832                           fsr0l	equ	0xFE9
 17833                           wreg	equ	0xFE8
 17834                           indf1	equ	0xFE7
 17835                           postinc1	equ	0xFE6
 17836                           postdec1	equ	0xFE5
 17837                           fsr1h	equ	0xFE2
 17838                           fsr1l	equ	0xFE1
 17839                           indf2	equ	0xFDF
 17840                           postinc2	equ	0xFDE
 17841                           postdec2	equ	0xFDD
 17842                           plusw2	equ	0xFDB
 17843                           fsr2h	equ	0xFDA
 17844                           fsr2l	equ	0xFD9
 17845                           status	equ	0xFD8
 17846                           
 17847 ;; *************** function _disk_read *****************
 17848 ;; Defined at:
 17849 ;;		line 147 in file "bibliotecas/diskio.c"
 17850 ;; Parameters:    Size  Location     Type
 17851 ;;  pdrv            1    wreg     unsigned char 
 17852 ;;  buff            2   13[BANK0 ] PTR unsigned char 
 17853 ;;		 -> NULL(0), fs(558), 
 17854 ;;  sector          4   15[BANK0 ] unsigned long 
 17855 ;;  count           1   19[BANK0 ] unsigned char 
 17856 ;; Auto vars:     Size  Location     Type
 17857 ;;  pdrv            1   22[BANK0 ] unsigned char 
 17858 ;;  result          2   23[BANK0 ] int 
 17859 ;;  res             1   25[BANK0 ] enum E25
 17860 ;; Return value:  Size  Location     Type
 17861 ;;                  1    wreg      enum E25
 17862 ;; Registers used:
 17863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17864 ;; Tracked objects:
 17865 ;;		On entry : 0/0
 17866 ;;		On exit  : 0/0
 17867 ;;		Unchanged: 0/0
 17868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17869 ;;      Params:         0       7       0       0       0       0       0       0       0
 17870 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17871 ;;      Temps:          0       2       0       0       0       0       0       0       0
 17872 ;;      Totals:         0      13       0       0       0       0       0       0       0
 17873 ;;Total ram usage:       13 bytes
 17874 ;; Hardware stack levels used:    1
 17875 ;; Hardware stack levels required when called:    6
 17876 ;; This function calls:
 17877 ;;		_escreve_inteiro_lcd
 17878 ;;		_posicao_cursor_lcd
 17879 ;;		_sdc_disk_read
 17880 ;; This function is called by:
 17881 ;;		_move_window
 17882 ;;		_f_read
 17883 ;; This function uses a non-reentrant model
 17884 ;;
 17885                           
 17886                           	psect	text55
 17887  004544                     __ptext55:
 17888                           	opt stack 0
 17889  004544                     _disk_read:
 17890                           	opt stack 18
 17891                           
 17892                           ; BSR set to: 0
 17893                           ;incstack = 0
 17894                           ;disk_read@pdrv stored from wreg
 17895  004544  0100               	movlb	0	; () banked
 17896  004546  6F76               	movwf	disk_read@pdrv& (0+255),b
 17897                           
 17898                           ;diskio.c: 154: DRESULT res;
 17899                           ;diskio.c: 155: int result;
 17900                           ;diskio.c: 157: switch (pdrv) {
 17901  004548  D051               	goto	l412
 17902  00454A                     
 17903                           ;diskio.c: 161: result = sdc_disk_read(buff, sector, count);
 17904  00454A  C06D  F026         	movff	disk_read@buff,sdc_disk_read@p_buff
 17905  00454E  C06E  F027         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 17906  004552  C06F  F028         	movff	disk_read@sector,sdc_disk_read@sector
 17907  004556  C070  F029         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 17908  00455A  C071  F02A         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 17909  00455E  C072  F02B         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 17910  004562  C073  F02C         	movff	disk_read@count,sdc_disk_read@count
 17911  004566  EC1C  F01F         	call	_sdc_disk_read	;wreg free
 17912  00456A  0100               	movlb	0	; () banked
 17913  00456C  6F74               	movwf	??_disk_read& (0+255),b
 17914  00456E  5174               	movf	??_disk_read& (0+255),w,b
 17915  004570  6F77               	movwf	disk_read@result& (0+255),b
 17916  004572  6B78               	clrf	(disk_read@result+1)& (0+255),b
 17917                           
 17918                           ; BSR set to: 0
 17919                           ;diskio.c: 165: res = result;
 17920  004574  C077  F079         	movff	disk_read@result,disk_read@res
 17921                           
 17922                           ; BSR set to: 0
 17923                           ;diskio.c: 167: return res;
 17924  004578  5179               	movf	disk_read@res& (0+255),w,b
 17925                           
 17926                           ; BSR set to: 0
 17927  00457A  0012               	return	
 17928  00457C                     
 17929                           ; BSR set to: 0
 17930                           ;diskio.c: 172: result = sdc_disk_read(buff, sector, count);
 17931                           
 17932                           ; BSR set to: 0
 17933  00457C  C06D  F026         	movff	disk_read@buff,sdc_disk_read@p_buff
 17934  004580  C06E  F027         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 17935  004584  C06F  F028         	movff	disk_read@sector,sdc_disk_read@sector
 17936  004588  C070  F029         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 17937  00458C  C071  F02A         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 17938  004590  C072  F02B         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 17939  004594  C073  F02C         	movff	disk_read@count,sdc_disk_read@count
 17940  004598  EC1C  F01F         	call	_sdc_disk_read	;wreg free
 17941  00459C  0100               	movlb	0	; () banked
 17942  00459E  6F74               	movwf	??_disk_read& (0+255),b
 17943  0045A0  5174               	movf	??_disk_read& (0+255),w,b
 17944  0045A2  6F77               	movwf	disk_read@result& (0+255),b
 17945  0045A4  6B78               	clrf	(disk_read@result+1)& (0+255),b
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;diskio.c: 173: posicao_cursor_lcd(1,0);
 17949  0045A6  0E00               	movlw	0
 17950  0045A8  6E1D               	movwf	posicao_cursor_lcd@coluna,c
 17951  0045AA  0E01               	movlw	1
 17952  0045AC  EC37  F028         	call	_posicao_cursor_lcd
 17953                           
 17954                           ;diskio.c: 174: escreve_inteiro_lcd(result);
 17955  0045B0  C077  F02C         	movff	disk_read@result,escreve_inteiro_lcd@valor
 17956  0045B4  C078  F02D         	movff	disk_read@result+1,escreve_inteiro_lcd@valor+1
 17957  0045B8  EC44  F02A         	call	_escreve_inteiro_lcd	;wreg free
 17958                           
 17959                           ;diskio.c: 175: _delay((unsigned long)((2000)*(48000000/4000.0)));
 17960  0045BC  0E7A               	movlw	122
 17961  0045BE  0100               	movlb	0	; () banked
 17962  0045C0  6F75               	movwf	(??_disk_read+1)& (0+255),b
 17963  0045C2  0EC1               	movlw	193
 17964  0045C4  6F74               	movwf	??_disk_read& (0+255),b
 17965  0045C6  0E81               	movlw	129
 17966  0045C8                     u17277:
 17967  0045C8  2EE8               	decfsz	wreg,f,c
 17968  0045CA  D7FE               	bra	u17277
 17969  0045CC  2F74               	decfsz	??_disk_read& (0+255),f,b
 17970  0045CE  D7FC               	bra	u17277
 17971  0045D0  2F75               	decfsz	(??_disk_read+1)& (0+255),f,b
 17972  0045D2  D7FA               	bra	u17277
 17973  0045D4  D000               	nop2	
 17974                           
 17975                           ;diskio.c: 176: res = result;
 17976  0045D6  C077  F079         	movff	disk_read@result,disk_read@res
 17977                           
 17978                           ;diskio.c: 178: buff = data_buff;
 17979  0045DA  C0F7  F06D         	movff	_data_buff,disk_read@buff
 17980  0045DE  C0F8  F06E         	movff	_data_buff+1,disk_read@buff+1
 17981                           
 17982                           ;diskio.c: 179: return res;
 17983  0045E2  0100               	movlb	0	; () banked
 17984  0045E4  5179               	movf	disk_read@res& (0+255),w,b
 17985                           
 17986                           ; BSR set to: 0
 17987  0045E6  0012               	return	
 17988  0045E8                     
 17989                           ; BSR set to: 0
 17990                           ;diskio.c: 188: return res;
 17991                           
 17992                           ; BSR set to: 0
 17993  0045E8  5179               	movf	disk_read@res& (0+255),w,b
 17994                           
 17995                           ; BSR set to: 0
 17996  0045EA  0012               	return	
 17997  0045EC                     l412:
 17998                           
 17999                           ; BSR set to: 0
 18000  0045EC  0100               	movlb	0	; () banked
 18001  0045EE  5176               	movf	disk_read@pdrv& (0+255),w,b
 18002                           
 18003                           ; Switch size 1, requested type "space"
 18004                           ; Number of cases is 3, Range of values is 0 to 2
 18005                           ; switch strategies available:
 18006                           ; Name         Instructions Cycles
 18007                           ; simple_byte           10     6 (average)
 18008                           ;	Chosen strategy is simple_byte
 18009  0045F0  0A00               	xorlw	0	; case 0
 18010  0045F2  B4D8               	btfsc	status,2,c
 18011  0045F4  D7AA               	goto	l413
 18012  0045F6  0A01               	xorlw	1	; case 1
 18013  0045F8  B4D8               	btfsc	status,2,c
 18014  0045FA  D7C0               	goto	l415
 18015  0045FC  0A03               	xorlw	3	; case 2
 18016  0045FE  B4D8               	btfsc	status,2,c
 18017  004600  D7F3               	goto	l416
 18018                           
 18019                           ; BSR set to: 0
 18020                           ;diskio.c: 191: return RES_PARERR;
 18021                           
 18022                           ; BSR set to: 0
 18023  004602  0E04               	movlw	4
 18024  004604  0012               	return	
 18025  004606                     __end_of_disk_read:
 18026                           	opt stack 0
 18027                           tblptru	equ	0xFF8
 18028                           tblptrh	equ	0xFF7
 18029                           tblptrl	equ	0xFF6
 18030                           tablat	equ	0xFF5
 18031                           prodh	equ	0xFF4
 18032                           prodl	equ	0xFF3
 18033                           intcon	equ	0xFF2
 18034                           intcon2	equ	0xFF1
 18035                           intcon3	equ	0xFF0
 18036                           indf0	equ	0xFEF
 18037                           postinc0	equ	0xFEE
 18038                           fsr0h	equ	0xFEA
 18039                           fsr0l	equ	0xFE9
 18040                           wreg	equ	0xFE8
 18041                           indf1	equ	0xFE7
 18042                           postinc1	equ	0xFE6
 18043                           postdec1	equ	0xFE5
 18044                           fsr1h	equ	0xFE2
 18045                           fsr1l	equ	0xFE1
 18046                           indf2	equ	0xFDF
 18047                           postinc2	equ	0xFDE
 18048                           postdec2	equ	0xFDD
 18049                           plusw2	equ	0xFDB
 18050                           fsr2h	equ	0xFDA
 18051                           fsr2l	equ	0xFD9
 18052                           status	equ	0xFD8
 18053                           
 18054 ;; *************** function _sdc_disk_read *****************
 18055 ;; Defined at:
 18056 ;;		line 518 in file "bibliotecas/diskio.c"
 18057 ;; Parameters:    Size  Location     Type
 18058 ;;  p_buff          2   37[COMRAM] PTR unsigned char 
 18059 ;;		 -> NULL(0), fs(558), 
 18060 ;;  sector          4   39[COMRAM] unsigned long 
 18061 ;;  count           1   43[COMRAM] unsigned char 
 18062 ;; Auto vars:     Size  Location     Type
 18063 ;;  start_add       4    5[BANK0 ] unsigned long 
 18064 ;;  length          2    9[BANK0 ] int 
 18065 ;;  count1          2    0        int 
 18066 ;;  i               2    0        int 
 18067 ;;  buff            1   11[BANK0 ] unsigned char 
 18068 ;;  ptr             1    4[BANK0 ] unsigned char 
 18069 ;;  res             1    0        enum E25
 18070 ;; Return value:  Size  Location     Type
 18071 ;;                  1    wreg      enum E25
 18072 ;; Registers used:
 18073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18074 ;; Tracked objects:
 18075 ;;		On entry : 0/0
 18076 ;;		On exit  : 0/0
 18077 ;;		Unchanged: 0/0
 18078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18079 ;;      Params:         7       0       0       0       0       0       0       0       0
 18080 ;;      Locals:         0       8       0       0       0       0       0       0       0
 18081 ;;      Temps:          0       4       0       0       0       0       0       0       0
 18082 ;;      Totals:         7      12       0       0       0       0       0       0       0
 18083 ;;Total ram usage:       19 bytes
 18084 ;; Hardware stack levels used:    1
 18085 ;; Hardware stack levels required when called:    5
 18086 ;; This function calls:
 18087 ;;		_command
 18088 ;;		_dummy_clocks
 18089 ;;		_proceed
 18090 ;;		_response
 18091 ;; This function is called by:
 18092 ;;		_disk_read
 18093 ;; This function uses a non-reentrant model
 18094 ;;
 18095                           
 18096                           	psect	text56
 18097  003E38                     __ptext56:
 18098                           	opt stack 0
 18099  003E38                     _sdc_disk_read:
 18100                           	opt stack 18
 18101                           
 18102                           ;diskio.c: 525: DRESULT res;
 18103                           ;diskio.c: 526: unsigned char ptr=0X00, buff;
 18104                           
 18105                           ; BSR set to: 0
 18106                           ;incstack = 0
 18107  003E38  0E00               	movlw	0
 18108  003E3A  0100               	movlb	0	; () banked
 18109  003E3C  6F64               	movwf	sdc_disk_read@ptr& (0+255),b
 18110                           
 18111                           ; BSR set to: 0
 18112                           ;diskio.c: 527: unsigned long int start_add;
 18113                           ;diskio.c: 529: int length,i, count1;
 18114                           ;diskio.c: 530: dummy_clocks(10);
 18115  003E3E  0E0A               	movlw	10
 18116  003E40  EC81  F02A         	call	_dummy_clocks
 18117                           
 18118                           ;diskio.c: 531: start_add = sector*512;
 18119  003E44  C028  F060         	movff	sdc_disk_read@sector,??_sdc_disk_read
 18120  003E48  C029  F061         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 18121  003E4C  C02A  F062         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 18122  003E50  C02B  F063         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 18123  003E54  0E09               	movlw	9
 18124  003E56                     u12375:
 18125  003E56  90D8               	bcf	status,0,c
 18126  003E58  0100               	movlb	0	; () banked
 18127  003E5A  3760               	rlcf	??_sdc_disk_read& (0+255),f,b
 18128  003E5C  3761               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 18129  003E5E  3762               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 18130  003E60  3763               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 18131  003E62  2EE8               	decfsz	wreg,f,c
 18132  003E64  D7F8               	goto	u12375
 18133  003E66  C060  F065         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 18134  003E6A  C061  F066         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 18135  003E6E  C062  F067         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 18136  003E72  C063  F068         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 18137                           
 18138                           ; BSR set to: 0
 18139                           ;diskio.c: 538: if(sector != 1)
 18140  003E76  0428               	decf	sdc_disk_read@sector,w,c
 18141  003E78  1029               	iorwf	sdc_disk_read@sector+1,w,c
 18142  003E7A  102A               	iorwf	sdc_disk_read@sector+2,w,c
 18143  003E7C  102B               	iorwf	sdc_disk_read@sector+3,w,c
 18144  003E7E  B4D8               	btfsc	status,2,c
 18145  003E80  D01C               	goto	l489
 18146                           
 18147                           ; BSR set to: 0
 18148                           ;diskio.c: 539: {
 18149                           ;diskio.c: 540: dummy_clocks(10);
 18150  003E82  0E0A               	movlw	10
 18151  003E84  EC81  F02A         	call	_dummy_clocks
 18152                           
 18153                           ;diskio.c: 541: command(0X52,start_add ,0X00);
 18154  003E88  C065  F01F         	movff	sdc_disk_read@start_add,command@arg
 18155  003E8C  C066  F020         	movff	sdc_disk_read@start_add+1,command@arg+1
 18156  003E90  C067  F021         	movff	sdc_disk_read@start_add+2,command@arg+2
 18157  003E94  C068  F022         	movff	sdc_disk_read@start_add+3,command@arg+3
 18158  003E98  0E00               	movlw	0
 18159  003E9A  6E23               	movwf	command@CRC,c
 18160  003E9C  0E52               	movlw	82
 18161  003E9E  ECD6  F028         	call	_command
 18162                           
 18163                           ;diskio.c: 542: proceed();
 18164  003EA2  ECB6  F02B         	call	_proceed	;wreg free
 18165  003EA6                     
 18166                           ;diskio.c: 544: buff = response();
 18167  003EA6  ECB0  F02B         	call	_response	;wreg free
 18168  003EAA  0100               	movlb	0	; () banked
 18169  003EAC  6F6B               	movwf	sdc_disk_read@buff& (0+255),b
 18170                           
 18171                           ; BSR set to: 0
 18172                           ;diskio.c: 545: }while(buff!=0X00);
 18173  003EAE  516B               	movf	sdc_disk_read@buff& (0+255),w,b
 18174  003EB0  A4D8               	btfss	status,2,c
 18175  003EB2  D7F9               	goto	l490
 18176                           
 18177                           ; BSR set to: 0
 18178                           ;diskio.c: 546: proceed();
 18179                           
 18180                           ; BSR set to: 0
 18181  003EB4  ECB6  F02B         	call	_proceed	;wreg free
 18182                           
 18183                           ;diskio.c: 547: }
 18184  003EB8  D020               	goto	l495
 18185  003EBA                     l489:
 18186                           
 18187                           ;diskio.c: 548: else
 18188                           ;diskio.c: 549: {
 18189                           ;diskio.c: 550: dummy_clocks(10);
 18190  003EBA  0E0A               	movlw	10
 18191  003EBC  EC81  F02A         	call	_dummy_clocks
 18192                           
 18193                           ;diskio.c: 551: command(0X51,sector ,0X00);
 18194  003EC0  C028  F01F         	movff	sdc_disk_read@sector,command@arg
 18195  003EC4  C029  F020         	movff	sdc_disk_read@sector+1,command@arg+1
 18196  003EC8  C02A  F021         	movff	sdc_disk_read@sector+2,command@arg+2
 18197  003ECC  C02B  F022         	movff	sdc_disk_read@sector+3,command@arg+3
 18198  003ED0  0E00               	movlw	0
 18199  003ED2  6E23               	movwf	command@CRC,c
 18200  003ED4  0E51               	movlw	81
 18201  003ED6  ECD6  F028         	call	_command
 18202                           
 18203                           ;diskio.c: 552: proceed();
 18204  003EDA  ECB6  F02B         	call	_proceed	;wreg free
 18205  003EDE                     
 18206                           ;diskio.c: 554: buff = response();
 18207  003EDE  ECB0  F02B         	call	_response	;wreg free
 18208  003EE2  0100               	movlb	0	; () banked
 18209  003EE4  6F6B               	movwf	sdc_disk_read@buff& (0+255),b
 18210                           
 18211                           ; BSR set to: 0
 18212                           ;diskio.c: 555: }while(buff!=0X00);
 18213  003EE6  516B               	movf	sdc_disk_read@buff& (0+255),w,b
 18214  003EE8  A4D8               	btfss	status,2,c
 18215  003EEA  D7F9               	goto	l493
 18216                           
 18217                           ; BSR set to: 0
 18218                           ;diskio.c: 556: proceed();
 18219                           
 18220                           ; BSR set to: 0
 18221  003EEC  ECB6  F02B         	call	_proceed	;wreg free
 18222                           
 18223                           ;diskio.c: 557: }
 18224                           ;diskio.c: 561: while(buff!=0xFE)
 18225  003EF0  D004               	goto	l495
 18226  003EF2                     
 18227                           ;diskio.c: 562: {
 18228                           ;diskio.c: 563: buff = response();
 18229  003EF2  ECB0  F02B         	call	_response	;wreg free
 18230  003EF6  0100               	movlb	0	; () banked
 18231  003EF8  6F6B               	movwf	sdc_disk_read@buff& (0+255),b
 18232  003EFA                     l495:
 18233                           
 18234                           ; BSR set to: 0
 18235  003EFA  0EFE               	movlw	254
 18236  003EFC  0100               	movlb	0	; () banked
 18237  003EFE  196B               	xorwf	sdc_disk_read@buff& (0+255),w,b
 18238  003F00  A4D8               	btfss	status,2,c
 18239  003F02  D7F7               	goto	l496
 18240                           
 18241                           ; BSR set to: 0
 18242                           ;diskio.c: 567: }
 18243                           ;diskio.c: 569: length = 0;
 18244                           
 18245                           ; BSR set to: 0
 18246  003F04  0E00               	movlw	0
 18247  003F06  6F6A               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18248  003F08  0E00               	movlw	0
 18249  003F0A  6F69               	movwf	sdc_disk_read@length& (0+255),b
 18250                           
 18251                           ;diskio.c: 570: while ( length < 512 )
 18252  003F0C  D00C               	goto	l498
 18253  003F0E                     
 18254                           ; BSR set to: 0
 18255                           ;diskio.c: 571: {
 18256                           ;diskio.c: 572: p_buff[length] = response();
 18257                           
 18258                           ; BSR set to: 0
 18259  003F0E  5169               	movf	sdc_disk_read@length& (0+255),w,b
 18260  003F10  2426               	addwf	sdc_disk_read@p_buff,w,c
 18261  003F12  6ED9               	movwf	fsr2l,c
 18262  003F14  516A               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 18263  003F16  2027               	addwfc	sdc_disk_read@p_buff+1,w,c
 18264  003F18  6EDA               	movwf	fsr2h,c
 18265  003F1A  ECB0  F02B         	call	_response	;wreg free
 18266  003F1E  6EDF               	movwf	indf2,c
 18267                           
 18268                           ;diskio.c: 573: length++;
 18269  003F20  0100               	movlb	0	; () banked
 18270  003F22  4B69               	infsnz	sdc_disk_read@length& (0+255),f,b
 18271  003F24  2B6A               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 18272  003F26                     l498:
 18273                           
 18274                           ; BSR set to: 0
 18275                           
 18276                           ; BSR set to: 0
 18277  003F26  BF6A               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 18278  003F28  D7F2               	goto	l499
 18279  003F2A  0E02               	movlw	2
 18280  003F2C  5D6A               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 18281  003F2E  A0D8               	btfss	status,0,c
 18282  003F30  D7EE               	goto	l499
 18283                           
 18284                           ; BSR set to: 0
 18285                           ;diskio.c: 574: }
 18286                           ;diskio.c: 577: length = 0;
 18287                           
 18288                           ; BSR set to: 0
 18289  003F32  0E00               	movlw	0
 18290  003F34  6F6A               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18291  003F36  0E00               	movlw	0
 18292  003F38  6F69               	movwf	sdc_disk_read@length& (0+255),b
 18293                           
 18294                           ; BSR set to: 0
 18295                           ;diskio.c: 578: dummy_clocks(10);
 18296  003F3A  0E0A               	movlw	10
 18297  003F3C  EC81  F02A         	call	_dummy_clocks
 18298                           
 18299                           ;diskio.c: 580: command(0X4C,0X00000000,0X00);
 18300  003F40  0E00               	movlw	0
 18301  003F42  6E1F               	movwf	command@arg,c
 18302  003F44  0E00               	movlw	0
 18303  003F46  6E20               	movwf	command@arg+1,c
 18304  003F48  0E00               	movlw	0
 18305  003F4A  6E21               	movwf	command@arg+2,c
 18306  003F4C  0E00               	movlw	0
 18307  003F4E  6E22               	movwf	command@arg+3,c
 18308  003F50  0E00               	movlw	0
 18309  003F52  6E23               	movwf	command@CRC,c
 18310  003F54  0E4C               	movlw	76
 18311  003F56  ECD6  F028         	call	_command
 18312                           
 18313                           ;diskio.c: 581: proceed();
 18314  003F5A  ECB6  F02B         	call	_proceed	;wreg free
 18315  003F5E                     
 18316                           ;diskio.c: 583: buff = response();
 18317  003F5E  ECB0  F02B         	call	_response	;wreg free
 18318  003F62  0100               	movlb	0	; () banked
 18319  003F64  6F6B               	movwf	sdc_disk_read@buff& (0+255),b
 18320                           
 18321                           ; BSR set to: 0
 18322                           ;diskio.c: 584: }while(buff!=0xFF);
 18323  003F66  296B               	incf	sdc_disk_read@buff& (0+255),w,b
 18324  003F68  A4D8               	btfss	status,2,c
 18325  003F6A  D7F9               	goto	l501
 18326                           
 18327                           ; BSR set to: 0
 18328                           ;diskio.c: 586: length = 0;
 18329                           
 18330                           ; BSR set to: 0
 18331  003F6C  0E00               	movlw	0
 18332  003F6E  6F6A               	movwf	(sdc_disk_read@length+1)& (0+255),b
 18333  003F70  0E00               	movlw	0
 18334  003F72  6F69               	movwf	sdc_disk_read@length& (0+255),b
 18335                           
 18336                           ; BSR set to: 0
 18337                           ;diskio.c: 595: return RES_OK;
 18338  003F74  0E00               	movlw	0
 18339  003F76  0012               	return	
 18340  003F78                     __end_of_sdc_disk_read:
 18341                           	opt stack 0
 18342                           tblptru	equ	0xFF8
 18343                           tblptrh	equ	0xFF7
 18344                           tblptrl	equ	0xFF6
 18345                           tablat	equ	0xFF5
 18346                           prodh	equ	0xFF4
 18347                           prodl	equ	0xFF3
 18348                           intcon	equ	0xFF2
 18349                           intcon2	equ	0xFF1
 18350                           intcon3	equ	0xFF0
 18351                           indf0	equ	0xFEF
 18352                           postinc0	equ	0xFEE
 18353                           fsr0h	equ	0xFEA
 18354                           fsr0l	equ	0xFE9
 18355                           wreg	equ	0xFE8
 18356                           indf1	equ	0xFE7
 18357                           postinc1	equ	0xFE6
 18358                           postdec1	equ	0xFE5
 18359                           fsr1h	equ	0xFE2
 18360                           fsr1l	equ	0xFE1
 18361                           indf2	equ	0xFDF
 18362                           postinc2	equ	0xFDE
 18363                           postdec2	equ	0xFDD
 18364                           plusw2	equ	0xFDB
 18365                           fsr2h	equ	0xFDA
 18366                           fsr2l	equ	0xFD9
 18367                           status	equ	0xFD8
 18368                           
 18369 ;; *************** function _response *****************
 18370 ;; Defined at:
 18371 ;;		line 63 in file "bibliotecas/SDCard.c"
 18372 ;; Parameters:    Size  Location     Type
 18373 ;;		None
 18374 ;; Auto vars:     Size  Location     Type
 18375 ;;  buff            1   25[COMRAM] unsigned char 
 18376 ;; Return value:  Size  Location     Type
 18377 ;;                  1    wreg      unsigned char 
 18378 ;; Registers used:
 18379 ;;		wreg, status,2, cstack
 18380 ;; Tracked objects:
 18381 ;;		On entry : 0/0
 18382 ;;		On exit  : 0/0
 18383 ;;		Unchanged: 0/0
 18384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18385 ;;      Params:         0       0       0       0       0       0       0       0       0
 18386 ;;      Locals:         1       0       0       0       0       0       0       0       0
 18387 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18388 ;;      Totals:         1       0       0       0       0       0       0       0       0
 18389 ;;Total ram usage:        1 bytes
 18390 ;; Hardware stack levels used:    1
 18391 ;; Hardware stack levels required when called:    3
 18392 ;; This function calls:
 18393 ;;		_ReadSPI_
 18394 ;; This function is called by:
 18395 ;;		_sdc_reset
 18396 ;;		_sdc_disk_initialize
 18397 ;;		_sdc_disk_read
 18398 ;;		_sdc_disk_write
 18399 ;; This function uses a non-reentrant model
 18400 ;;
 18401                           
 18402                           	psect	text57
 18403  005760                     __ptext57:
 18404                           	opt stack 0
 18405  005760                     _response:
 18406                           	opt stack 18
 18407                           
 18408                           ;SDCard.c: 65: unsigned char buff;
 18409                           ;SDCard.c: 66: LATBbits.LATB4 = 0;
 18410                           
 18411                           ; BSR set to: 0
 18412                           ;incstack = 0
 18413  005760  988A               	bcf	3978,4,c	;volatile
 18414                           
 18415                           ;SDCard.c: 67: buff= ReadSPI_();
 18416  005762  ECBC  F02B         	call	_ReadSPI_	;wreg free
 18417  005766  6E1A               	movwf	response@buff,c
 18418                           
 18419                           ;SDCard.c: 68: return buff;
 18420  005768  501A               	movf	response@buff,w,c
 18421  00576A  0012               	return	
 18422  00576C                     __end_of_response:
 18423                           	opt stack 0
 18424                           tblptru	equ	0xFF8
 18425                           tblptrh	equ	0xFF7
 18426                           tblptrl	equ	0xFF6
 18427                           tablat	equ	0xFF5
 18428                           prodh	equ	0xFF4
 18429                           prodl	equ	0xFF3
 18430                           intcon	equ	0xFF2
 18431                           intcon2	equ	0xFF1
 18432                           intcon3	equ	0xFF0
 18433                           indf0	equ	0xFEF
 18434                           postinc0	equ	0xFEE
 18435                           fsr0h	equ	0xFEA
 18436                           fsr0l	equ	0xFE9
 18437                           wreg	equ	0xFE8
 18438                           indf1	equ	0xFE7
 18439                           postinc1	equ	0xFE6
 18440                           postdec1	equ	0xFE5
 18441                           fsr1h	equ	0xFE2
 18442                           fsr1l	equ	0xFE1
 18443                           indf2	equ	0xFDF
 18444                           postinc2	equ	0xFDE
 18445                           postdec2	equ	0xFDD
 18446                           plusw2	equ	0xFDB
 18447                           fsr2h	equ	0xFDA
 18448                           fsr2l	equ	0xFD9
 18449                           status	equ	0xFD8
 18450                           
 18451 ;; *************** function _proceed *****************
 18452 ;; Defined at:
 18453 ;;		line 100 in file "bibliotecas/SDCard.c"
 18454 ;; Parameters:    Size  Location     Type
 18455 ;;		None
 18456 ;; Auto vars:     Size  Location     Type
 18457 ;;		None
 18458 ;; Return value:  Size  Location     Type
 18459 ;;                  1    wreg      void 
 18460 ;; Registers used:
 18461 ;;		wreg, cstack
 18462 ;; Tracked objects:
 18463 ;;		On entry : 0/0
 18464 ;;		On exit  : 0/0
 18465 ;;		Unchanged: 0/0
 18466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18467 ;;      Params:         0       0       0       0       0       0       0       0       0
 18468 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18469 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18470 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18471 ;;Total ram usage:        0 bytes
 18472 ;; Hardware stack levels used:    1
 18473 ;; Hardware stack levels required when called:    3
 18474 ;; This function calls:
 18475 ;;		_WriteSPI_
 18476 ;; This function is called by:
 18477 ;;		_SDCard
 18478 ;;		_sdc_reset
 18479 ;;		_sdc_disk_initialize
 18480 ;;		_sdc_disk_read
 18481 ;;		_sdc_disk_write
 18482 ;; This function uses a non-reentrant model
 18483 ;;
 18484                           
 18485                           	psect	text58
 18486  00576C                     __ptext58:
 18487                           	opt stack 0
 18488  00576C                     _proceed:
 18489                           	opt stack 26
 18490                           
 18491                           ;SDCard.c: 102: LATBbits.LATB4 = 0;
 18492                           
 18493                           ;incstack = 0
 18494  00576C  988A               	bcf	3978,4,c	;volatile
 18495                           
 18496                           ;SDCard.c: 103: WriteSPI_(0xFF);
 18497  00576E  0EFF               	movlw	255
 18498  005770  EC8E  F02B         	call	_WriteSPI_
 18499                           
 18500                           ;SDCard.c: 104: LATBbits.LATB4 = 1;
 18501  005774  888A               	bsf	3978,4,c	;volatile
 18502  005776  0012               	return		;funcret
 18503  005778                     __end_of_proceed:
 18504                           	opt stack 0
 18505                           tblptru	equ	0xFF8
 18506                           tblptrh	equ	0xFF7
 18507                           tblptrl	equ	0xFF6
 18508                           tablat	equ	0xFF5
 18509                           prodh	equ	0xFF4
 18510                           prodl	equ	0xFF3
 18511                           intcon	equ	0xFF2
 18512                           intcon2	equ	0xFF1
 18513                           intcon3	equ	0xFF0
 18514                           indf0	equ	0xFEF
 18515                           postinc0	equ	0xFEE
 18516                           fsr0h	equ	0xFEA
 18517                           fsr0l	equ	0xFE9
 18518                           wreg	equ	0xFE8
 18519                           indf1	equ	0xFE7
 18520                           postinc1	equ	0xFE6
 18521                           postdec1	equ	0xFE5
 18522                           fsr1h	equ	0xFE2
 18523                           fsr1l	equ	0xFE1
 18524                           indf2	equ	0xFDF
 18525                           postinc2	equ	0xFDE
 18526                           postdec2	equ	0xFDD
 18527                           plusw2	equ	0xFDB
 18528                           fsr2h	equ	0xFDA
 18529                           fsr2l	equ	0xFD9
 18530                           status	equ	0xFD8
 18531                           
 18532 ;; *************** function _command *****************
 18533 ;; Defined at:
 18534 ;;		line 130 in file "bibliotecas/SDCard.c"
 18535 ;; Parameters:    Size  Location     Type
 18536 ;;  CMD             1    wreg     unsigned char 
 18537 ;;  arg             4   30[COMRAM] unsigned long 
 18538 ;;  CRC             1   34[COMRAM] unsigned char 
 18539 ;; Auto vars:     Size  Location     Type
 18540 ;;  CMD             1   35[COMRAM] unsigned char 
 18541 ;;  argument        1   36[COMRAM] unsigned char 
 18542 ;; Return value:  Size  Location     Type
 18543 ;;                  1    wreg      void 
 18544 ;; Registers used:
 18545 ;;		wreg, status,2, status,0, cstack
 18546 ;; Tracked objects:
 18547 ;;		On entry : 0/0
 18548 ;;		On exit  : 0/0
 18549 ;;		Unchanged: 0/0
 18550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18551 ;;      Params:         5       0       0       0       0       0       0       0       0
 18552 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18553 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18554 ;;      Totals:         7       0       0       0       0       0       0       0       0
 18555 ;;Total ram usage:        7 bytes
 18556 ;; Hardware stack levels used:    1
 18557 ;; Hardware stack levels required when called:    4
 18558 ;; This function calls:
 18559 ;;		_WriteSPI_
 18560 ;;		_dummy_clocks
 18561 ;;		_wait_ready
 18562 ;; This function is called by:
 18563 ;;		_sdc_reset
 18564 ;;		_sdc_disk_initialize
 18565 ;;		_sdc_disk_read
 18566 ;;		_sdc_disk_write
 18567 ;; This function uses a non-reentrant model
 18568 ;;
 18569                           
 18570                           	psect	text59
 18571  0051AC                     __ptext59:
 18572                           	opt stack 0
 18573  0051AC                     _command:
 18574                           	opt stack 17
 18575                           
 18576                           ;incstack = 0
 18577                           ;command@CMD stored from wreg
 18578  0051AC  6E24               	movwf	command@CMD,c
 18579                           
 18580                           ;SDCard.c: 132: unsigned char argument;
 18581                           ;SDCard.c: 134: if (wait_ready() != 0xFF)
 18582  0051AE  ECBA  F02A         	call	_wait_ready	;wreg free
 18583  0051B2  0AFF               	xorlw	255
 18584  0051B4  A4D8               	btfss	status,2,c
 18585  0051B6  D004               	goto	l270
 18586  0051B8  D008               	goto	u12070
 18587  0051BA                     
 18588                           ;SDCard.c: 137: {
 18589                           ;SDCard.c: 138: dummy_clocks(10);
 18590  0051BA  0E0A               	movlw	10
 18591  0051BC  EC81  F02A         	call	_dummy_clocks
 18592  0051C0                     l270:
 18593  0051C0  ECBA  F02A         	call	_wait_ready	;wreg free
 18594  0051C4  0AFF               	xorlw	255
 18595  0051C6  A4D8               	btfss	status,2,c
 18596  0051C8  D7F8               	goto	l271
 18597  0051CA                     u12070:
 18598                           
 18599                           ;SDCard.c: 139: }
 18600                           ;SDCard.c: 140: }
 18601                           ;SDCard.c: 142: WriteSPI_(0xFF);
 18602  0051CA  0EFF               	movlw	255
 18603  0051CC  EC8E  F02B         	call	_WriteSPI_
 18604                           
 18605                           ;SDCard.c: 143: WriteSPI_(CMD);
 18606  0051D0  5024               	movf	command@CMD,w,c
 18607  0051D2  EC8E  F02B         	call	_WriteSPI_
 18608                           
 18609                           ;SDCard.c: 144: argument = arg>>24;
 18610  0051D6  C022  F025         	movff	command@arg+3,command@argument
 18611                           
 18612                           ;SDCard.c: 145: WriteSPI_(argument);
 18613  0051DA  5025               	movf	command@argument,w,c
 18614  0051DC  EC8E  F02B         	call	_WriteSPI_
 18615                           
 18616                           ;SDCard.c: 146: argument = arg>>16;
 18617  0051E0  C021  F025         	movff	command@arg+2,command@argument
 18618                           
 18619                           ;SDCard.c: 147: WriteSPI_(argument);
 18620  0051E4  5025               	movf	command@argument,w,c
 18621  0051E6  EC8E  F02B         	call	_WriteSPI_
 18622                           
 18623                           ;SDCard.c: 148: argument = arg>>8;
 18624  0051EA  C020  F025         	movff	command@arg+1,command@argument
 18625                           
 18626                           ;SDCard.c: 149: WriteSPI_(argument);
 18627  0051EE  5025               	movf	command@argument,w,c
 18628  0051F0  EC8E  F02B         	call	_WriteSPI_
 18629                           
 18630                           ;SDCard.c: 150: argument = arg;
 18631  0051F4  C01F  F025         	movff	command@arg,command@argument
 18632                           
 18633                           ;SDCard.c: 151: WriteSPI_(argument);
 18634  0051F8  5025               	movf	command@argument,w,c
 18635  0051FA  EC8E  F02B         	call	_WriteSPI_
 18636                           
 18637                           ;SDCard.c: 152: WriteSPI_(CRC);
 18638  0051FE  5023               	movf	command@CRC,w,c
 18639  005200  EC8E  F02B         	call	_WriteSPI_
 18640  005204  0012               	return		;funcret
 18641  005206                     __end_of_command:
 18642                           	opt stack 0
 18643                           tblptru	equ	0xFF8
 18644                           tblptrh	equ	0xFF7
 18645                           tblptrl	equ	0xFF6
 18646                           tablat	equ	0xFF5
 18647                           prodh	equ	0xFF4
 18648                           prodl	equ	0xFF3
 18649                           intcon	equ	0xFF2
 18650                           intcon2	equ	0xFF1
 18651                           intcon3	equ	0xFF0
 18652                           indf0	equ	0xFEF
 18653                           postinc0	equ	0xFEE
 18654                           fsr0h	equ	0xFEA
 18655                           fsr0l	equ	0xFE9
 18656                           wreg	equ	0xFE8
 18657                           indf1	equ	0xFE7
 18658                           postinc1	equ	0xFE6
 18659                           postdec1	equ	0xFE5
 18660                           fsr1h	equ	0xFE2
 18661                           fsr1l	equ	0xFE1
 18662                           indf2	equ	0xFDF
 18663                           postinc2	equ	0xFDE
 18664                           postdec2	equ	0xFDD
 18665                           plusw2	equ	0xFDB
 18666                           fsr2h	equ	0xFDA
 18667                           fsr2l	equ	0xFD9
 18668                           status	equ	0xFD8
 18669                           
 18670 ;; *************** function _wait_ready *****************
 18671 ;; Defined at:
 18672 ;;		line 111 in file "bibliotecas/SDCard.c"
 18673 ;; Parameters:    Size  Location     Type
 18674 ;;		None
 18675 ;; Auto vars:     Size  Location     Type
 18676 ;;  msg            10    0        unsigned char [10]
 18677 ;;  timeout         4   25[COMRAM] unsigned long 
 18678 ;;  res             1   29[COMRAM] unsigned char 
 18679 ;; Return value:  Size  Location     Type
 18680 ;;                  1    wreg      unsigned char 
 18681 ;; Registers used:
 18682 ;;		wreg, status,2, status,0, cstack
 18683 ;; Tracked objects:
 18684 ;;		On entry : 0/0
 18685 ;;		On exit  : 0/0
 18686 ;;		Unchanged: 0/0
 18687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18688 ;;      Params:         0       0       0       0       0       0       0       0       0
 18689 ;;      Locals:         5       0       0       0       0       0       0       0       0
 18690 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18691 ;;      Totals:         5       0       0       0       0       0       0       0       0
 18692 ;;Total ram usage:        5 bytes
 18693 ;; Hardware stack levels used:    1
 18694 ;; Hardware stack levels required when called:    3
 18695 ;; This function calls:
 18696 ;;		_ReadSPI_
 18697 ;; This function is called by:
 18698 ;;		_command
 18699 ;; This function uses a non-reentrant model
 18700 ;;
 18701                           
 18702                           	psect	text60
 18703  005574                     __ptext60:
 18704                           	opt stack 0
 18705  005574                     _wait_ready:
 18706                           	opt stack 17
 18707                           
 18708                           ;SDCard.c: 113: BYTE res;
 18709                           ;SDCard.c: 114: DWORD timeout = 0x7FFF;
 18710                           
 18711                           ;incstack = 0
 18712  005574  0EFF               	movlw	255
 18713  005576  6E1A               	movwf	wait_ready@timeout,c
 18714  005578  0E7F               	movlw	127
 18715  00557A  6E1B               	movwf	wait_ready@timeout+1,c
 18716  00557C  0E00               	movlw	0
 18717  00557E  6E1C               	movwf	wait_ready@timeout+2,c
 18718  005580  0E00               	movlw	0
 18719  005582  6E1D               	movwf	wait_ready@timeout+3,c
 18720  005584                     
 18721                           ;SDCard.c: 118: res = ReadSPI_();
 18722  005584  ECBC  F02B         	call	_ReadSPI_	;wreg free
 18723  005588  6E1E               	movwf	wait_ready@res,c
 18724                           
 18725                           ;SDCard.c: 119: while ((res != 0xFF) && (--timeout));
 18726  00558A  281E               	incf	wait_ready@res,w,c
 18727  00558C  B4D8               	btfsc	status,2,c
 18728  00558E  D00B               	goto	u11950
 18729  005590  061A               	decf	wait_ready@timeout,f,c
 18730  005592  0E00               	movlw	0
 18731  005594  5A1B               	subwfb	wait_ready@timeout+1,f,c
 18732  005596  5A1C               	subwfb	wait_ready@timeout+2,f,c
 18733  005598  5A1D               	subwfb	wait_ready@timeout+3,f,c
 18734  00559A  501A               	movf	wait_ready@timeout,w,c
 18735  00559C  101B               	iorwf	wait_ready@timeout+1,w,c
 18736  00559E  101C               	iorwf	wait_ready@timeout+2,w,c
 18737  0055A0  101D               	iorwf	wait_ready@timeout+3,w,c
 18738  0055A2  A4D8               	btfss	status,2,c
 18739  0055A4  D7EF               	goto	l262
 18740  0055A6                     u11950:
 18741                           
 18742                           ;SDCard.c: 121: return res;
 18743  0055A6  501E               	movf	wait_ready@res,w,c
 18744  0055A8  0012               	return	
 18745  0055AA                     __end_of_wait_ready:
 18746                           	opt stack 0
 18747                           tblptru	equ	0xFF8
 18748                           tblptrh	equ	0xFF7
 18749                           tblptrl	equ	0xFF6
 18750                           tablat	equ	0xFF5
 18751                           prodh	equ	0xFF4
 18752                           prodl	equ	0xFF3
 18753                           intcon	equ	0xFF2
 18754                           intcon2	equ	0xFF1
 18755                           intcon3	equ	0xFF0
 18756                           indf0	equ	0xFEF
 18757                           postinc0	equ	0xFEE
 18758                           fsr0h	equ	0xFEA
 18759                           fsr0l	equ	0xFE9
 18760                           wreg	equ	0xFE8
 18761                           indf1	equ	0xFE7
 18762                           postinc1	equ	0xFE6
 18763                           postdec1	equ	0xFE5
 18764                           fsr1h	equ	0xFE2
 18765                           fsr1l	equ	0xFE1
 18766                           indf2	equ	0xFDF
 18767                           postinc2	equ	0xFDE
 18768                           postdec2	equ	0xFDD
 18769                           plusw2	equ	0xFDB
 18770                           fsr2h	equ	0xFDA
 18771                           fsr2l	equ	0xFD9
 18772                           status	equ	0xFD8
 18773                           
 18774 ;; *************** function _dummy_clocks *****************
 18775 ;; Defined at:
 18776 ;;		line 79 in file "bibliotecas/SDCard.c"
 18777 ;; Parameters:    Size  Location     Type
 18778 ;;  n               1    wreg     unsigned char 
 18779 ;; Auto vars:     Size  Location     Type
 18780 ;;  n               1   27[COMRAM] unsigned char 
 18781 ;;  i               2   28[COMRAM] unsigned int 
 18782 ;; Return value:  Size  Location     Type
 18783 ;;                  1    wreg      void 
 18784 ;; Registers used:
 18785 ;;		wreg, status,2, status,0, cstack
 18786 ;; Tracked objects:
 18787 ;;		On entry : 0/0
 18788 ;;		On exit  : 0/0
 18789 ;;		Unchanged: 0/0
 18790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18791 ;;      Params:         0       0       0       0       0       0       0       0       0
 18792 ;;      Locals:         3       0       0       0       0       0       0       0       0
 18793 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18794 ;;      Totals:         5       0       0       0       0       0       0       0       0
 18795 ;;Total ram usage:        5 bytes
 18796 ;; Hardware stack levels used:    1
 18797 ;; Hardware stack levels required when called:    3
 18798 ;; This function calls:
 18799 ;;		_ReadSPI_
 18800 ;; This function is called by:
 18801 ;;		_command
 18802 ;;		_sdc_disk_initialize
 18803 ;;		_sdc_disk_read
 18804 ;;		_sdc_disk_write
 18805 ;; This function uses a non-reentrant model
 18806 ;;
 18807                           
 18808                           	psect	text61
 18809  005502                     __ptext61:
 18810                           	opt stack 0
 18811  005502                     _dummy_clocks:
 18812                           	opt stack 18
 18813                           
 18814                           ;incstack = 0
 18815                           ;dummy_clocks@n stored from wreg
 18816  005502  6E1C               	movwf	dummy_clocks@n,c
 18817                           
 18818                           ;SDCard.c: 81: unsigned int i;
 18819                           ;SDCard.c: 82: _delay((unsigned long)((1)*(48000000/4000.0)));
 18820  005504  0E10               	movlw	16
 18821  005506  6E1A               	movwf	??_dummy_clocks& (0+255),c
 18822  005508  0E94               	movlw	148
 18823  00550A                     u17287:
 18824  00550A  2EE8               	decfsz	wreg,f,c
 18825  00550C  D7FE               	bra	u17287
 18826  00550E  2E1A               	decfsz	??_dummy_clocks& (0+255),f,c
 18827  005510  D7FC               	bra	u17287
 18828  005512  D000               	nop2	
 18829                           
 18830                           ;SDCard.c: 84: for(i=0;i<n;i++)
 18831  005514  0E00               	movlw	0
 18832  005516  6E1E               	movwf	dummy_clocks@i+1,c
 18833  005518  0E00               	movlw	0
 18834  00551A  6E1D               	movwf	dummy_clocks@i,c
 18835  00551C  D006               	goto	l253
 18836  00551E                     l254:
 18837                           
 18838                           ;SDCard.c: 85: {
 18839                           ;SDCard.c: 86: LATBbits.LATB4 = 1;
 18840  00551E  888A               	bsf	3978,4,c	;volatile
 18841                           
 18842                           ;SDCard.c: 87: ReadSPI_();
 18843  005520  ECBC  F02B         	call	_ReadSPI_	;wreg free
 18844                           
 18845                           ;SDCard.c: 88: LATBbits.LATB4 = 0;
 18846  005524  988A               	bcf	3978,4,c	;volatile
 18847  005526  4A1D               	infsnz	dummy_clocks@i,f,c
 18848  005528  2A1E               	incf	dummy_clocks@i+1,f,c
 18849  00552A                     l253:
 18850  00552A  501C               	movf	dummy_clocks@n,w,c
 18851  00552C  6E1A               	movwf	??_dummy_clocks& (0+255),c
 18852  00552E  6A1B               	clrf	(??_dummy_clocks+1)& (0+255),c
 18853  005530  501A               	movf	??_dummy_clocks,w,c
 18854  005532  5C1D               	subwf	dummy_clocks@i,w,c
 18855  005534  501B               	movf	??_dummy_clocks+1,w,c
 18856  005536  581E               	subwfb	dummy_clocks@i+1,w,c
 18857  005538  B0D8               	btfsc	status,0,c
 18858  00553A  0012               	return	
 18859  00553C  D7F0               	goto	l254
 18860  00553E                     __end_of_dummy_clocks:
 18861                           	opt stack 0
 18862                           tblptru	equ	0xFF8
 18863                           tblptrh	equ	0xFF7
 18864                           tblptrl	equ	0xFF6
 18865                           tablat	equ	0xFF5
 18866                           prodh	equ	0xFF4
 18867                           prodl	equ	0xFF3
 18868                           intcon	equ	0xFF2
 18869                           intcon2	equ	0xFF1
 18870                           intcon3	equ	0xFF0
 18871                           indf0	equ	0xFEF
 18872                           postinc0	equ	0xFEE
 18873                           fsr0h	equ	0xFEA
 18874                           fsr0l	equ	0xFE9
 18875                           wreg	equ	0xFE8
 18876                           indf1	equ	0xFE7
 18877                           postinc1	equ	0xFE6
 18878                           postdec1	equ	0xFE5
 18879                           fsr1h	equ	0xFE2
 18880                           fsr1l	equ	0xFE1
 18881                           indf2	equ	0xFDF
 18882                           postinc2	equ	0xFDE
 18883                           postdec2	equ	0xFDD
 18884                           plusw2	equ	0xFDB
 18885                           fsr2h	equ	0xFDA
 18886                           fsr2l	equ	0xFD9
 18887                           status	equ	0xFD8
 18888                           
 18889 ;; *************** function _ReadSPI_ *****************
 18890 ;; Defined at:
 18891 ;;		line 119 in file "bibliotecas/SPI.c"
 18892 ;; Parameters:    Size  Location     Type
 18893 ;;		None
 18894 ;; Auto vars:     Size  Location     Type
 18895 ;;		None
 18896 ;; Return value:  Size  Location     Type
 18897 ;;                  1    wreg      unsigned char 
 18898 ;; Registers used:
 18899 ;;		wreg, status,2
 18900 ;; Tracked objects:
 18901 ;;		On entry : 0/0
 18902 ;;		On exit  : 0/0
 18903 ;;		Unchanged: 0/0
 18904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18905 ;;      Params:         0       0       0       0       0       0       0       0       0
 18906 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18907 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18908 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18909 ;;Total ram usage:        0 bytes
 18910 ;; Hardware stack levels used:    1
 18911 ;; Hardware stack levels required when called:    2
 18912 ;; This function calls:
 18913 ;;		Nothing
 18914 ;; This function is called by:
 18915 ;;		_response
 18916 ;;		_dummy_clocks
 18917 ;;		_wait_ready
 18918 ;;		_sdc_disk_write
 18919 ;; This function uses a non-reentrant model
 18920 ;;
 18921                           
 18922                           	psect	text62
 18923  005778                     __ptext62:
 18924                           	opt stack 0
 18925  005778                     _ReadSPI_:
 18926                           	opt stack 18
 18927                           
 18928                           ;SPI.c: 126: SSPBUF = 0xFF;
 18929                           
 18930                           ;incstack = 0
 18931  005778  68C9               	setf	4041,c	;volatile
 18932  00577A  A0C7               	btfss	4039,0,c	;volatile
 18933  00577C  D7FE               	goto	l351
 18934                           
 18935                           ;SPI.c: 129: return (SSPBUF);
 18936  00577E  50C9               	movf	4041,w,c	;volatile
 18937  005780  0012               	return	
 18938  005782                     __end_of_ReadSPI_:
 18939                           	opt stack 0
 18940                           tblptru	equ	0xFF8
 18941                           tblptrh	equ	0xFF7
 18942                           tblptrl	equ	0xFF6
 18943                           tablat	equ	0xFF5
 18944                           prodh	equ	0xFF4
 18945                           prodl	equ	0xFF3
 18946                           intcon	equ	0xFF2
 18947                           intcon2	equ	0xFF1
 18948                           intcon3	equ	0xFF0
 18949                           indf0	equ	0xFEF
 18950                           postinc0	equ	0xFEE
 18951                           fsr0h	equ	0xFEA
 18952                           fsr0l	equ	0xFE9
 18953                           wreg	equ	0xFE8
 18954                           indf1	equ	0xFE7
 18955                           postinc1	equ	0xFE6
 18956                           postdec1	equ	0xFE5
 18957                           fsr1h	equ	0xFE2
 18958                           fsr1l	equ	0xFE1
 18959                           indf2	equ	0xFDF
 18960                           postinc2	equ	0xFDE
 18961                           postdec2	equ	0xFDD
 18962                           plusw2	equ	0xFDB
 18963                           fsr2h	equ	0xFDA
 18964                           fsr2l	equ	0xFD9
 18965                           status	equ	0xFD8
 18966                           
 18967 ;; *************** function _WriteSPI_ *****************
 18968 ;; Defined at:
 18969 ;;		line 139 in file "bibliotecas/SPI.c"
 18970 ;; Parameters:    Size  Location     Type
 18971 ;;  dado            1    wreg     unsigned char 
 18972 ;; Auto vars:     Size  Location     Type
 18973 ;;  dado            1   26[COMRAM] unsigned char 
 18974 ;;  TempVar         1   25[COMRAM] unsigned char 
 18975 ;; Return value:  Size  Location     Type
 18976 ;;                  1    wreg      void 
 18977 ;; Registers used:
 18978 ;;		wreg
 18979 ;; Tracked objects:
 18980 ;;		On entry : 0/0
 18981 ;;		On exit  : 0/0
 18982 ;;		Unchanged: 0/0
 18983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18984 ;;      Params:         0       0       0       0       0       0       0       0       0
 18985 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18986 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18987 ;;      Totals:         2       0       0       0       0       0       0       0       0
 18988 ;;Total ram usage:        2 bytes
 18989 ;; Hardware stack levels used:    1
 18990 ;; Hardware stack levels required when called:    2
 18991 ;; This function calls:
 18992 ;;		Nothing
 18993 ;; This function is called by:
 18994 ;;		_proceed
 18995 ;;		_command
 18996 ;;		_sdc_disk_write
 18997 ;; This function uses a non-reentrant model
 18998 ;;
 18999                           
 19000                           	psect	text63
 19001  00571C                     __ptext63:
 19002                           	opt stack 0
 19003  00571C                     _WriteSPI_:
 19004                           	opt stack 26
 19005                           
 19006                           ;incstack = 0
 19007                           ;WriteSPI_@dado stored from wreg
 19008  00571C  6E1B               	movwf	WriteSPI_@dado,c
 19009                           
 19010                           ;SPI.c: 141: unsigned char TempVar;
 19011                           ;SPI.c: 142: TempVar = SSPBUF;
 19012  00571E  CFC9 F01A          	movff	4041,WriteSPI_@TempVar	;volatile
 19013                           
 19014                           ;SPI.c: 143: PIR1bits.SSPIF = 0;
 19015  005722  969E               	bcf	3998,3,c	;volatile
 19016                           
 19017                           ;SPI.c: 150: SSPBUF = dado;
 19018  005724  C01B  FFC9         	movff	WriteSPI_@dado,4041	;volatile
 19019  005728  B69E               	btfsc	3998,3,c	;volatile
 19020  00572A  0012               	return	
 19021  00572C  D7FD               	goto	l357
 19022  00572E                     __end_of_WriteSPI_:
 19023                           	opt stack 0
 19024                           tblptru	equ	0xFF8
 19025                           tblptrh	equ	0xFF7
 19026                           tblptrl	equ	0xFF6
 19027                           tablat	equ	0xFF5
 19028                           prodh	equ	0xFF4
 19029                           prodl	equ	0xFF3
 19030                           intcon	equ	0xFF2
 19031                           intcon2	equ	0xFF1
 19032                           intcon3	equ	0xFF0
 19033                           indf0	equ	0xFEF
 19034                           postinc0	equ	0xFEE
 19035                           fsr0h	equ	0xFEA
 19036                           fsr0l	equ	0xFE9
 19037                           wreg	equ	0xFE8
 19038                           indf1	equ	0xFE7
 19039                           postinc1	equ	0xFE6
 19040                           postdec1	equ	0xFE5
 19041                           fsr1h	equ	0xFE2
 19042                           fsr1l	equ	0xFE1
 19043                           indf2	equ	0xFDF
 19044                           postinc2	equ	0xFDE
 19045                           postdec2	equ	0xFDD
 19046                           plusw2	equ	0xFDB
 19047                           fsr2h	equ	0xFDA
 19048                           fsr2l	equ	0xFD9
 19049                           status	equ	0xFD8
 19050                           
 19051 ;; *************** function _posicao_cursor_lcd *****************
 19052 ;; Defined at:
 19053 ;;		line 271 in file "bibliotecas/display_lcd.c"
 19054 ;; Parameters:    Size  Location     Type
 19055 ;;  linha           1    wreg     unsigned char 
 19056 ;;  coluna          1   28[COMRAM] unsigned char 
 19057 ;; Auto vars:     Size  Location     Type
 19058 ;;  linha           1   29[COMRAM] unsigned char 
 19059 ;;  endereco        1   30[COMRAM] unsigned char 
 19060 ;; Return value:  Size  Location     Type
 19061 ;;                  1    wreg      void 
 19062 ;; Registers used:
 19063 ;;		wreg, status,2, status,0, cstack
 19064 ;; Tracked objects:
 19065 ;;		On entry : 0/0
 19066 ;;		On exit  : 0/0
 19067 ;;		Unchanged: 0/0
 19068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19069 ;;      Params:         1       0       0       0       0       0       0       0       0
 19070 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19071 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19072 ;;      Totals:         3       0       0       0       0       0       0       0       0
 19073 ;;Total ram usage:        3 bytes
 19074 ;; Hardware stack levels used:    1
 19075 ;; Hardware stack levels required when called:    4
 19076 ;; This function calls:
 19077 ;;		_endereco_cursor_lcd
 19078 ;; This function is called by:
 19079 ;;		_mensagem_inicial
 19080 ;;		_SDCard
 19081 ;;		_inicializa_SPI
 19082 ;;		_disk_read
 19083 ;;		_sdc_reset
 19084 ;;		_sdc_disk_initialize
 19085 ;;		_gps
 19086 ;; This function uses a non-reentrant model
 19087 ;;
 19088                           
 19089                           	psect	text64
 19090  00506E                     __ptext64:
 19091                           	opt stack 0
 19092  00506E                     _posicao_cursor_lcd:
 19093                           	opt stack 25
 19094                           
 19095                           ;incstack = 0
 19096                           ;posicao_cursor_lcd@linha stored from wreg
 19097  00506E  6E1E               	movwf	posicao_cursor_lcd@linha,c
 19098                           
 19099                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 19100  005070  0E00               	movlw	0
 19101  005072  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 19102                           
 19103                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 19104  005074  0E11               	movlw	17
 19105  005076  601D               	cpfslt	posicao_cursor_lcd@coluna,c
 19106  005078  D02F               	goto	l584
 19107  00507A  D01E               	goto	l585
 19108  00507C                     l586:
 19109                           
 19110                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 19111  00507C  C01D  F01F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 19112                           
 19113                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 19114  005080  501F               	movf	posicao_cursor_lcd@endereco,w,c
 19115  005082  EC6F  F028         	call	_endereco_cursor_lcd
 19116                           
 19117                           ;display_lcd.c: 284: break;
 19118  005086  D026               	goto	l587
 19119  005088                     
 19120                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 19121  005088  501D               	movf	posicao_cursor_lcd@coluna,w,c
 19122  00508A  0F40               	addlw	64
 19123  00508C  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 19124                           
 19125                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 19126  00508E  501F               	movf	posicao_cursor_lcd@endereco,w,c
 19127  005090  EC6F  F028         	call	_endereco_cursor_lcd
 19128                           
 19129                           ;display_lcd.c: 289: break;
 19130  005094  D01F               	goto	l587
 19131  005096                     
 19132                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 19133  005096  501D               	movf	posicao_cursor_lcd@coluna,w,c
 19134  005098  0F14               	addlw	20
 19135  00509A  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 19136                           
 19137                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 19138  00509C  501F               	movf	posicao_cursor_lcd@endereco,w,c
 19139  00509E  EC6F  F028         	call	_endereco_cursor_lcd
 19140                           
 19141                           ;display_lcd.c: 294: break;
 19142  0050A2  D018               	goto	l587
 19143  0050A4                     
 19144                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 19145  0050A4  501D               	movf	posicao_cursor_lcd@coluna,w,c
 19146  0050A6  0F54               	addlw	84
 19147  0050A8  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 19148                           
 19149                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 19150  0050AA  501F               	movf	posicao_cursor_lcd@endereco,w,c
 19151  0050AC  EC6F  F028         	call	_endereco_cursor_lcd
 19152                           
 19153                           ;display_lcd.c: 299: break;
 19154  0050B0  D011               	goto	l587
 19155  0050B2                     
 19156                           ;display_lcd.c: 302: endereco = 0x00U;
 19157  0050B2  0E00               	movlw	0
 19158  0050B4  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 19159                           
 19160                           ;display_lcd.c: 304: }
 19161                           
 19162                           ;display_lcd.c: 303: break;
 19163  0050B6  D00E               	goto	l587
 19164  0050B8                     l585:
 19165  0050B8  501E               	movf	posicao_cursor_lcd@linha,w,c
 19166                           
 19167                           ; Switch size 1, requested type "space"
 19168                           ; Number of cases is 4, Range of values is 1 to 4
 19169                           ; switch strategies available:
 19170                           ; Name         Instructions Cycles
 19171                           ; simple_byte           13     7 (average)
 19172                           ;	Chosen strategy is simple_byte
 19173  0050BA  0A01               	xorlw	1	; case 1
 19174  0050BC  B4D8               	btfsc	status,2,c
 19175  0050BE  D7DE               	goto	l586
 19176  0050C0  0A03               	xorlw	3	; case 2
 19177  0050C2  B4D8               	btfsc	status,2,c
 19178  0050C4  D7E1               	goto	l588
 19179  0050C6  0A01               	xorlw	1	; case 3
 19180  0050C8  B4D8               	btfsc	status,2,c
 19181  0050CA  D7E5               	goto	l589
 19182  0050CC  0A07               	xorlw	7	; case 4
 19183  0050CE  B4D8               	btfsc	status,2,c
 19184  0050D0  D7E9               	goto	l590
 19185  0050D2  D7EF               	goto	l591
 19186  0050D4                     l587:
 19187                           
 19188                           ;display_lcd.c: 306: coluna++;
 19189  0050D4  2A1D               	incf	posicao_cursor_lcd@coluna,f,c
 19190                           
 19191                           ;display_lcd.c: 307: }
 19192  0050D6  0012               	return	
 19193  0050D8                     l584:
 19194                           
 19195                           ;display_lcd.c: 308: else
 19196                           ;display_lcd.c: 309: {
 19197                           ;display_lcd.c: 310: endereco = 0x00U;
 19198  0050D8  0E00               	movlw	0
 19199  0050DA  6E1F               	movwf	posicao_cursor_lcd@endereco,c
 19200  0050DC  0012               	return	
 19201  0050DE                     __end_of_posicao_cursor_lcd:
 19202                           	opt stack 0
 19203                           tblptru	equ	0xFF8
 19204                           tblptrh	equ	0xFF7
 19205                           tblptrl	equ	0xFF6
 19206                           tablat	equ	0xFF5
 19207                           prodh	equ	0xFF4
 19208                           prodl	equ	0xFF3
 19209                           intcon	equ	0xFF2
 19210                           intcon2	equ	0xFF1
 19211                           intcon3	equ	0xFF0
 19212                           indf0	equ	0xFEF
 19213                           postinc0	equ	0xFEE
 19214                           fsr0h	equ	0xFEA
 19215                           fsr0l	equ	0xFE9
 19216                           wreg	equ	0xFE8
 19217                           indf1	equ	0xFE7
 19218                           postinc1	equ	0xFE6
 19219                           postdec1	equ	0xFE5
 19220                           fsr1h	equ	0xFE2
 19221                           fsr1l	equ	0xFE1
 19222                           indf2	equ	0xFDF
 19223                           postinc2	equ	0xFDE
 19224                           postdec2	equ	0xFDD
 19225                           plusw2	equ	0xFDB
 19226                           fsr2h	equ	0xFDA
 19227                           fsr2l	equ	0xFD9
 19228                           status	equ	0xFD8
 19229                           
 19230 ;; *************** function _endereco_cursor_lcd *****************
 19231 ;; Defined at:
 19232 ;;		line 218 in file "bibliotecas/display_lcd.c"
 19233 ;; Parameters:    Size  Location     Type
 19234 ;;  endereco        1    wreg     unsigned char 
 19235 ;; Auto vars:     Size  Location     Type
 19236 ;;  endereco        1   27[COMRAM] unsigned char 
 19237 ;; Return value:  Size  Location     Type
 19238 ;;                  1    wreg      void 
 19239 ;; Registers used:
 19240 ;;		wreg, status,2, status,0, cstack
 19241 ;; Tracked objects:
 19242 ;;		On entry : 0/0
 19243 ;;		On exit  : 0/0
 19244 ;;		Unchanged: 0/0
 19245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19246 ;;      Params:         0       0       0       0       0       0       0       0       0
 19247 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19248 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19249 ;;      Totals:         1       0       0       0       0       0       0       0       0
 19250 ;;Total ram usage:        1 bytes
 19251 ;; Hardware stack levels used:    1
 19252 ;; Hardware stack levels required when called:    3
 19253 ;; This function calls:
 19254 ;;		_delay
 19255 ;; This function is called by:
 19256 ;;		_posicao_cursor_lcd
 19257 ;;		_cria_caractere_lcd
 19258 ;; This function uses a non-reentrant model
 19259 ;;
 19260                           
 19261                           	psect	text65
 19262  0050DE                     __ptext65:
 19263                           	opt stack 0
 19264  0050DE                     _endereco_cursor_lcd:
 19265                           	opt stack 25
 19266                           
 19267                           ;incstack = 0
 19268                           ;endereco_cursor_lcd@endereco stored from wreg
 19269  0050DE  6E1C               	movwf	endereco_cursor_lcd@endereco,c
 19270                           
 19271                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 19272  0050E0  9483               	bcf	3971,2,c	;volatile
 19273                           
 19274                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 19275  0050E2  9283               	bcf	3971,1,c	;volatile
 19276                           
 19277                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 19278  0050E4  9083               	bcf	3971,0,c	;volatile
 19279                           
 19280                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 19281  0050E6  8E83               	bsf	3971,7,c	;volatile
 19282                           
 19283                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 19284  0050E8  A81C               	btfss	endereco_cursor_lcd@endereco,4,c
 19285  0050EA  D002               	goto	l567
 19286  0050EC  8883               	bsf	3971,4,c	;volatile
 19287  0050EE  D001               	goto	l568
 19288  0050F0                     l567:
 19289                           
 19290                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 19291  0050F0  9883               	bcf	3971,4,c	;volatile
 19292  0050F2                     l568:
 19293                           
 19294                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 19295  0050F2  AA1C               	btfss	endereco_cursor_lcd@endereco,5,c
 19296  0050F4  D002               	goto	l569
 19297  0050F6  8A83               	bsf	3971,5,c	;volatile
 19298  0050F8  D001               	goto	l570
 19299  0050FA                     l569:
 19300                           
 19301                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 19302  0050FA  9A83               	bcf	3971,5,c	;volatile
 19303  0050FC                     l570:
 19304                           
 19305                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 19306  0050FC  AC1C               	btfss	endereco_cursor_lcd@endereco,6,c
 19307  0050FE  D002               	goto	l571
 19308  005100  8C83               	bsf	3971,6,c	;volatile
 19309  005102  D001               	goto	l572
 19310  005104                     l571:
 19311                           
 19312                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 19313  005104  9C83               	bcf	3971,6,c	;volatile
 19314  005106                     l572:
 19315                           
 19316                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 19317  005106  8083               	bsf	3971,0,c	;volatile
 19318                           
 19319                           ;display_lcd.c: 236: delay();
 19320  005108  EC3C  F02B         	call	_delay	;wreg free
 19321                           
 19322                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 19323  00510C  9083               	bcf	3971,0,c	;volatile
 19324                           
 19325                           ;display_lcd.c: 238: delay();
 19326  00510E  EC3C  F02B         	call	_delay	;wreg free
 19327                           
 19328                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 19329  005112  A01C               	btfss	endereco_cursor_lcd@endereco,0,c
 19330  005114  D002               	goto	l573
 19331  005116  8883               	bsf	3971,4,c	;volatile
 19332  005118  D001               	goto	l574
 19333  00511A                     l573:
 19334                           
 19335                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 19336  00511A  9883               	bcf	3971,4,c	;volatile
 19337  00511C                     l574:
 19338                           
 19339                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 19340  00511C  A21C               	btfss	endereco_cursor_lcd@endereco,1,c
 19341  00511E  D002               	goto	l575
 19342  005120  8A83               	bsf	3971,5,c	;volatile
 19343  005122  D001               	goto	l576
 19344  005124                     l575:
 19345                           
 19346                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 19347  005124  9A83               	bcf	3971,5,c	;volatile
 19348  005126                     l576:
 19349                           
 19350                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 19351  005126  A41C               	btfss	endereco_cursor_lcd@endereco,2,c
 19352  005128  D002               	goto	l577
 19353  00512A  8C83               	bsf	3971,6,c	;volatile
 19354  00512C  D001               	goto	l578
 19355  00512E                     l577:
 19356                           
 19357                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 19358  00512E  9C83               	bcf	3971,6,c	;volatile
 19359  005130                     l578:
 19360                           
 19361                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 19362  005130  A61C               	btfss	endereco_cursor_lcd@endereco,3,c
 19363  005132  D002               	goto	l579
 19364  005134  8E83               	bsf	3971,7,c	;volatile
 19365  005136  D001               	goto	l580
 19366  005138                     l579:
 19367                           
 19368                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 19369  005138  9E83               	bcf	3971,7,c	;volatile
 19370  00513A                     l580:
 19371                           
 19372                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 19373  00513A  8083               	bsf	3971,0,c	;volatile
 19374                           
 19375                           ;display_lcd.c: 252: delay();
 19376  00513C  EC3C  F02B         	call	_delay	;wreg free
 19377                           
 19378                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 19379  005140  9083               	bcf	3971,0,c	;volatile
 19380                           
 19381                           ;display_lcd.c: 254: delay();
 19382  005142  EC3C  F02B         	call	_delay	;wreg free
 19383  005146  0012               	return		;funcret
 19384  005148                     __end_of_endereco_cursor_lcd:
 19385                           	opt stack 0
 19386                           tblptru	equ	0xFF8
 19387                           tblptrh	equ	0xFF7
 19388                           tblptrl	equ	0xFF6
 19389                           tablat	equ	0xFF5
 19390                           prodh	equ	0xFF4
 19391                           prodl	equ	0xFF3
 19392                           intcon	equ	0xFF2
 19393                           intcon2	equ	0xFF1
 19394                           intcon3	equ	0xFF0
 19395                           indf0	equ	0xFEF
 19396                           postinc0	equ	0xFEE
 19397                           fsr0h	equ	0xFEA
 19398                           fsr0l	equ	0xFE9
 19399                           wreg	equ	0xFE8
 19400                           indf1	equ	0xFE7
 19401                           postinc1	equ	0xFE6
 19402                           postdec1	equ	0xFE5
 19403                           fsr1h	equ	0xFE2
 19404                           fsr1l	equ	0xFE1
 19405                           indf2	equ	0xFDF
 19406                           postinc2	equ	0xFDE
 19407                           postdec2	equ	0xFDD
 19408                           plusw2	equ	0xFDB
 19409                           fsr2h	equ	0xFDA
 19410                           fsr2l	equ	0xFD9
 19411                           status	equ	0xFD8
 19412                           
 19413 ;; *************** function _escreve_inteiro_lcd *****************
 19414 ;; Defined at:
 19415 ;;		line 376 in file "bibliotecas/display_lcd.c"
 19416 ;; Parameters:    Size  Location     Type
 19417 ;;  valor           2   43[COMRAM] int 
 19418 ;; Auto vars:     Size  Location     Type
 19419 ;;  texto           7    6[BANK0 ] unsigned char [7]
 19420 ;; Return value:  Size  Location     Type
 19421 ;;                  1    wreg      void 
 19422 ;; Registers used:
 19423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19424 ;; Tracked objects:
 19425 ;;		On entry : 0/0
 19426 ;;		On exit  : 0/0
 19427 ;;		Unchanged: 0/0
 19428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19429 ;;      Params:         2       0       0       0       0       0       0       0       0
 19430 ;;      Locals:         0       7       0       0       0       0       0       0       0
 19431 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19432 ;;      Totals:         2       7       0       0       0       0       0       0       0
 19433 ;;Total ram usage:        9 bytes
 19434 ;; Hardware stack levels used:    1
 19435 ;; Hardware stack levels required when called:    5
 19436 ;; This function calls:
 19437 ;;		_escreve_frase_ram_lcd
 19438 ;;		_itoa
 19439 ;; This function is called by:
 19440 ;;		_disk_read
 19441 ;;		_sdc_disk_initialize
 19442 ;;		_escreve_float_lcd
 19443 ;; This function uses a non-reentrant model
 19444 ;;
 19445                           
 19446                           	psect	text66
 19447  005488                     __ptext66:
 19448                           	opt stack 0
 19449  005488                     _escreve_inteiro_lcd:
 19450                           	opt stack 18
 19451                           
 19452                           ;display_lcd.c: 378: char texto[7] = "000000";
 19453                           
 19454                           ;incstack = 0
 19455  005488  EE21  F0B9         	lfsr	2,escreve_inteiro_lcd@F3966
 19456  00548C  EE10  F066         	lfsr	1,escreve_inteiro_lcd@texto
 19457  005490  0E06               	movlw	6
 19458  005492                     u12441:
 19459  005492  CFDB FFE3          	movff	plusw2,plusw1
 19460  005496  06E8               	decf	wreg,f,c
 19461  005498  E2FC               	bc	u12441
 19462                           
 19463                           ;display_lcd.c: 379: itoa(texto,valor, 10);
 19464  00549A  0E66               	movlw	low escreve_inteiro_lcd@texto
 19465  00549C  0100               	movlb	0	; () banked
 19466  00549E  6F60               	movwf	itoa@buf& (0+255),b
 19467  0054A0  0E00               	movlw	high escreve_inteiro_lcd@texto
 19468  0054A2  6F61               	movwf	(itoa@buf+1)& (0+255),b
 19469  0054A4  C02C  F062         	movff	escreve_inteiro_lcd@valor,itoa@val
 19470  0054A8  C02D  F063         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
 19471  0054AC  0E00               	movlw	0
 19472  0054AE  6F65               	movwf	(itoa@base+1)& (0+255),b
 19473  0054B0  0E0A               	movlw	10
 19474  0054B2  6F64               	movwf	itoa@base& (0+255),b
 19475  0054B4  ECA4  F029         	call	_itoa	;wreg free
 19476                           
 19477                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
 19478  0054B8  0E66               	movlw	low escreve_inteiro_lcd@texto
 19479  0054BA  6E1D               	movwf	escreve_frase_ram_lcd@buffer,c
 19480  0054BC  0E00               	movlw	high escreve_inteiro_lcd@texto
 19481  0054BE  6E1E               	movwf	escreve_frase_ram_lcd@buffer+1,c
 19482  0054C0  EC57  F029         	call	_escreve_frase_ram_lcd	;wreg free
 19483  0054C4  0012               	return		;funcret
 19484  0054C6                     __end_of_escreve_inteiro_lcd:
 19485                           	opt stack 0
 19486                           tblptru	equ	0xFF8
 19487                           tblptrh	equ	0xFF7
 19488                           tblptrl	equ	0xFF6
 19489                           tablat	equ	0xFF5
 19490                           prodh	equ	0xFF4
 19491                           prodl	equ	0xFF3
 19492                           intcon	equ	0xFF2
 19493                           intcon2	equ	0xFF1
 19494                           intcon3	equ	0xFF0
 19495                           indf0	equ	0xFEF
 19496                           postinc0	equ	0xFEE
 19497                           fsr0h	equ	0xFEA
 19498                           fsr0l	equ	0xFE9
 19499                           wreg	equ	0xFE8
 19500                           indf1	equ	0xFE7
 19501                           postinc1	equ	0xFE6
 19502                           postdec1	equ	0xFE5
 19503                           plusw1	equ	0xFE3
 19504                           fsr1h	equ	0xFE2
 19505                           fsr1l	equ	0xFE1
 19506                           indf2	equ	0xFDF
 19507                           postinc2	equ	0xFDE
 19508                           postdec2	equ	0xFDD
 19509                           plusw2	equ	0xFDB
 19510                           fsr2h	equ	0xFDA
 19511                           fsr2l	equ	0xFD9
 19512                           status	equ	0xFD8
 19513                           
 19514 ;; *************** function _itoa *****************
 19515 ;; Defined at:
 19516 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 19517 ;; Parameters:    Size  Location     Type
 19518 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 19519 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 19520 ;;  val             2    2[BANK0 ] int 
 19521 ;;  base            2    4[BANK0 ] int 
 19522 ;; Auto vars:     Size  Location     Type
 19523 ;;  cp              2   41[COMRAM] PTR unsigned char 
 19524 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 19525 ;; Return value:  Size  Location     Type
 19526 ;;                  2    0[BANK0 ] PTR unsigned char 
 19527 ;; Registers used:
 19528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19529 ;; Tracked objects:
 19530 ;;		On entry : 0/0
 19531 ;;		On exit  : 0/0
 19532 ;;		Unchanged: 0/0
 19533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19534 ;;      Params:         0       6       0       0       0       0       0       0       0
 19535 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19536 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19537 ;;      Totals:         2       6       0       0       0       0       0       0       0
 19538 ;;Total ram usage:        8 bytes
 19539 ;; Hardware stack levels used:    1
 19540 ;; Hardware stack levels required when called:    4
 19541 ;; This function calls:
 19542 ;;		_utoa
 19543 ;; This function is called by:
 19544 ;;		_escreve_inteiro_lcd
 19545 ;;		_escreve_inteiro_uart
 19546 ;; This function uses a non-reentrant model
 19547 ;;
 19548                           
 19549                           	psect	text67
 19550  005348                     __ptext67:
 19551                           	opt stack 0
 19552  005348                     _itoa:
 19553                           	opt stack 18
 19554                           
 19555                           ;incstack = 0
 19556  005348  C060  F02A         	movff	itoa@buf,itoa@cp
 19557  00534C  C061  F02B         	movff	itoa@buf+1,itoa@cp+1
 19558  005350  0100               	movlb	0	; () banked
 19559  005352  AF63               	btfss	(itoa@val+1)& (0+255),7,b
 19560  005354  D00C               	goto	l1911
 19561                           
 19562                           ; BSR set to: 0
 19563  005356  C060  FFD9         	movff	itoa@buf,fsr2l
 19564  00535A  C061  FFDA         	movff	itoa@buf+1,fsr2h
 19565  00535E  0E2D               	movlw	45
 19566  005360  6EDF               	movwf	indf2,c
 19567                           
 19568                           ; BSR set to: 0
 19569  005362  4B60               	infsnz	itoa@buf& (0+255),f,b
 19570  005364  2B61               	incf	(itoa@buf+1)& (0+255),f,b
 19571                           
 19572                           ; BSR set to: 0
 19573  005366  6D62               	negf	itoa@val& (0+255),b
 19574  005368  1F63               	comf	(itoa@val+1)& (0+255),f,b
 19575  00536A  B0D8               	btfsc	status,0,c
 19576  00536C  2B63               	incf	(itoa@val+1)& (0+255),f,b
 19577  00536E                     l1911:
 19578                           
 19579                           ; BSR set to: 0
 19580                           
 19581                           ; BSR set to: 0
 19582  00536E  C060  F021         	movff	itoa@buf,utoa@buf
 19583  005372  C061  F022         	movff	itoa@buf+1,utoa@buf+1
 19584  005376  C062  F023         	movff	itoa@val,utoa@val
 19585  00537A  C063  F024         	movff	itoa@val+1,utoa@val+1
 19586  00537E  C064  F025         	movff	itoa@base,utoa@base
 19587  005382  C065  F026         	movff	itoa@base+1,utoa@base+1
 19588  005386  EC1F  F025         	call	_utoa	;wreg free
 19589  00538A  0012               	return	
 19590  00538C                     __end_of_itoa:
 19591                           	opt stack 0
 19592                           tblptru	equ	0xFF8
 19593                           tblptrh	equ	0xFF7
 19594                           tblptrl	equ	0xFF6
 19595                           tablat	equ	0xFF5
 19596                           prodh	equ	0xFF4
 19597                           prodl	equ	0xFF3
 19598                           intcon	equ	0xFF2
 19599                           intcon2	equ	0xFF1
 19600                           intcon3	equ	0xFF0
 19601                           indf0	equ	0xFEF
 19602                           postinc0	equ	0xFEE
 19603                           fsr0h	equ	0xFEA
 19604                           fsr0l	equ	0xFE9
 19605                           wreg	equ	0xFE8
 19606                           indf1	equ	0xFE7
 19607                           postinc1	equ	0xFE6
 19608                           postdec1	equ	0xFE5
 19609                           plusw1	equ	0xFE3
 19610                           fsr1h	equ	0xFE2
 19611                           fsr1l	equ	0xFE1
 19612                           indf2	equ	0xFDF
 19613                           postinc2	equ	0xFDE
 19614                           postdec2	equ	0xFDD
 19615                           plusw2	equ	0xFDB
 19616                           fsr2h	equ	0xFDA
 19617                           fsr2l	equ	0xFD9
 19618                           status	equ	0xFD8
 19619                           
 19620 ;; *************** function _utoa *****************
 19621 ;; Defined at:
 19622 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
 19623 ;; Parameters:    Size  Location     Type
 19624 ;;  buf             2   32[COMRAM] PTR unsigned char 
 19625 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
 19626 ;;  val             2   34[COMRAM] unsigned int 
 19627 ;;  base            2   36[COMRAM] int 
 19628 ;; Auto vars:     Size  Location     Type
 19629 ;;  v               2   38[COMRAM] unsigned int 
 19630 ;;  c               1   40[COMRAM] unsigned char 
 19631 ;; Return value:  Size  Location     Type
 19632 ;;                  2   32[COMRAM] PTR unsigned char 
 19633 ;; Registers used:
 19634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19635 ;; Tracked objects:
 19636 ;;		On entry : 0/0
 19637 ;;		On exit  : 0/0
 19638 ;;		Unchanged: 0/0
 19639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19640 ;;      Params:         6       0       0       0       0       0       0       0       0
 19641 ;;      Locals:         3       0       0       0       0       0       0       0       0
 19642 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19643 ;;      Totals:         9       0       0       0       0       0       0       0       0
 19644 ;;Total ram usage:        9 bytes
 19645 ;; Hardware stack levels used:    1
 19646 ;; Hardware stack levels required when called:    3
 19647 ;; This function calls:
 19648 ;;		___lwdiv
 19649 ;;		___lwmod
 19650 ;; This function is called by:
 19651 ;;		_itoa
 19652 ;; This function uses a non-reentrant model
 19653 ;;
 19654                           
 19655                           	psect	text68
 19656  004A3E                     __ptext68:
 19657                           	opt stack 0
 19658  004A3E                     _utoa:
 19659                           	opt stack 18
 19660                           
 19661                           ;incstack = 0
 19662  004A3E  C023  F027         	movff	utoa@val,utoa@v
 19663  004A42  C024  F028         	movff	utoa@val+1,utoa@v+1
 19664  004A46  C027  F01A         	movff	utoa@v,___lwdiv@dividend
 19665  004A4A  C028  F01B         	movff	utoa@v+1,___lwdiv@dividend+1
 19666  004A4E  C025  F01C         	movff	utoa@base,___lwdiv@divisor
 19667  004A52  C026  F01D         	movff	utoa@base+1,___lwdiv@divisor+1
 19668  004A56  EC2E  F029         	call	___lwdiv	;wreg free
 19669  004A5A  C01A  F027         	movff	?___lwdiv,utoa@v
 19670  004A5E  C01B  F028         	movff	?___lwdiv+1,utoa@v+1
 19671  004A62  4A21               	infsnz	utoa@buf,f,c
 19672  004A64  2A22               	incf	utoa@buf+1,f,c
 19673  004A66  5027               	movf	utoa@v,w,c
 19674  004A68  1028               	iorwf	utoa@v+1,w,c
 19675  004A6A  A4D8               	btfss	status,2,c
 19676  004A6C  D7EC               	goto	l1915
 19677  004A6E  C021  FFD9         	movff	utoa@buf,fsr2l
 19678  004A72  C022  FFDA         	movff	utoa@buf+1,fsr2h
 19679  004A76  0E00               	movlw	0
 19680  004A78  6EDF               	movwf	indf2,c
 19681  004A7A  0621               	decf	utoa@buf,f,c
 19682  004A7C  A0D8               	btfss	status,0,c
 19683  004A7E  0622               	decf	utoa@buf+1,f,c
 19684  004A80  C023  F01A         	movff	utoa@val,___lwmod@dividend
 19685  004A84  C024  F01B         	movff	utoa@val+1,___lwmod@dividend+1
 19686  004A88  C025  F01C         	movff	utoa@base,___lwmod@divisor
 19687  004A8C  C026  F01D         	movff	utoa@base+1,___lwmod@divisor+1
 19688  004A90  ECC6  F029         	call	___lwmod	;wreg free
 19689  004A94  501A               	movf	?___lwmod,w,c
 19690  004A96  6E29               	movwf	utoa@c,c
 19691  004A98  C023  F01A         	movff	utoa@val,___lwdiv@dividend
 19692  004A9C  C024  F01B         	movff	utoa@val+1,___lwdiv@dividend+1
 19693  004AA0  C025  F01C         	movff	utoa@base,___lwdiv@divisor
 19694  004AA4  C026  F01D         	movff	utoa@base+1,___lwdiv@divisor+1
 19695  004AA8  EC2E  F029         	call	___lwdiv	;wreg free
 19696  004AAC  C01A  F023         	movff	?___lwdiv,utoa@val
 19697  004AB0  C01B  F024         	movff	?___lwdiv+1,utoa@val+1
 19698  004AB4  0E09               	movlw	9
 19699  004AB6  6429               	cpfsgt	utoa@c,c
 19700  004AB8  D002               	goto	l1918
 19701  004ABA  0E07               	movlw	7
 19702  004ABC  2629               	addwf	utoa@c,f,c
 19703  004ABE                     l1918:
 19704  004ABE  0E30               	movlw	48
 19705  004AC0  2629               	addwf	utoa@c,f,c
 19706  004AC2  C021  FFD9         	movff	utoa@buf,fsr2l
 19707  004AC6  C022  FFDA         	movff	utoa@buf+1,fsr2h
 19708  004ACA  C029  FFDF         	movff	utoa@c,indf2
 19709  004ACE  0621               	decf	utoa@buf,f,c
 19710  004AD0  A0D8               	btfss	status,0,c
 19711  004AD2  0622               	decf	utoa@buf+1,f,c
 19712  004AD4  5023               	movf	utoa@val,w,c
 19713  004AD6  1024               	iorwf	utoa@val+1,w,c
 19714  004AD8  A4D8               	btfss	status,2,c
 19715  004ADA  D7D2               	goto	l1917
 19716                           
 19717                           ;	Return value of _utoa is never used
 19718  004ADC  4A21               	infsnz	utoa@buf,f,c
 19719  004ADE  2A22               	incf	utoa@buf+1,f,c
 19720  004AE0  0012               	return	
 19721  004AE2                     __end_of_utoa:
 19722                           	opt stack 0
 19723                           tblptru	equ	0xFF8
 19724                           tblptrh	equ	0xFF7
 19725                           tblptrl	equ	0xFF6
 19726                           tablat	equ	0xFF5
 19727                           prodh	equ	0xFF4
 19728                           prodl	equ	0xFF3
 19729                           intcon	equ	0xFF2
 19730                           intcon2	equ	0xFF1
 19731                           intcon3	equ	0xFF0
 19732                           indf0	equ	0xFEF
 19733                           postinc0	equ	0xFEE
 19734                           fsr0h	equ	0xFEA
 19735                           fsr0l	equ	0xFE9
 19736                           wreg	equ	0xFE8
 19737                           indf1	equ	0xFE7
 19738                           postinc1	equ	0xFE6
 19739                           postdec1	equ	0xFE5
 19740                           plusw1	equ	0xFE3
 19741                           fsr1h	equ	0xFE2
 19742                           fsr1l	equ	0xFE1
 19743                           indf2	equ	0xFDF
 19744                           postinc2	equ	0xFDE
 19745                           postdec2	equ	0xFDD
 19746                           plusw2	equ	0xFDB
 19747                           fsr2h	equ	0xFDA
 19748                           fsr2l	equ	0xFD9
 19749                           status	equ	0xFD8
 19750                           
 19751 ;; *************** function ___lwmod *****************
 19752 ;; Defined at:
 19753 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 19754 ;; Parameters:    Size  Location     Type
 19755 ;;  dividend        2   25[COMRAM] unsigned int 
 19756 ;;  divisor         2   27[COMRAM] unsigned int 
 19757 ;; Auto vars:     Size  Location     Type
 19758 ;;  counter         1   29[COMRAM] unsigned char 
 19759 ;; Return value:  Size  Location     Type
 19760 ;;                  2   25[COMRAM] unsigned int 
 19761 ;; Registers used:
 19762 ;;		wreg, status,2, status,0
 19763 ;; Tracked objects:
 19764 ;;		On entry : 0/0
 19765 ;;		On exit  : 0/0
 19766 ;;		Unchanged: 0/0
 19767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19768 ;;      Params:         4       0       0       0       0       0       0       0       0
 19769 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19770 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19771 ;;      Totals:         5       0       0       0       0       0       0       0       0
 19772 ;;Total ram usage:        5 bytes
 19773 ;; Hardware stack levels used:    1
 19774 ;; Hardware stack levels required when called:    2
 19775 ;; This function calls:
 19776 ;;		Nothing
 19777 ;; This function is called by:
 19778 ;;		_utoa
 19779 ;;		_converte_inteiro_matriz
 19780 ;; This function uses a non-reentrant model
 19781 ;;
 19782                           
 19783                           	psect	text69
 19784  00538C                     __ptext69:
 19785                           	opt stack 0
 19786  00538C                     ___lwmod:
 19787                           	opt stack 18
 19788                           
 19789                           ;incstack = 0
 19790  00538C  501C               	movf	___lwmod@divisor,w,c
 19791  00538E  101D               	iorwf	___lwmod@divisor+1,w,c
 19792  005390  B4D8               	btfsc	status,2,c
 19793  005392  D018               	goto	l2013
 19794  005394  0E01               	movlw	1
 19795  005396  6E1E               	movwf	___lwmod@counter,c
 19796  005398  D004               	goto	l2008
 19797  00539A  90D8               	bcf	status,0,c
 19798  00539C  361C               	rlcf	___lwmod@divisor,f,c
 19799  00539E  361D               	rlcf	___lwmod@divisor+1,f,c
 19800  0053A0  2A1E               	incf	___lwmod@counter,f,c
 19801  0053A2                     l2008:
 19802  0053A2  AE1D               	btfss	___lwmod@divisor+1,7,c
 19803  0053A4  D7FA               	goto	l2009
 19804  0053A6                     u12040:
 19805  0053A6  501C               	movf	___lwmod@divisor,w,c
 19806  0053A8  5C1A               	subwf	___lwmod@dividend,w,c
 19807  0053AA  501D               	movf	___lwmod@divisor+1,w,c
 19808  0053AC  581B               	subwfb	___lwmod@dividend+1,w,c
 19809  0053AE  A0D8               	btfss	status,0,c
 19810  0053B0  D004               	goto	l2012
 19811  0053B2  501C               	movf	___lwmod@divisor,w,c
 19812  0053B4  5E1A               	subwf	___lwmod@dividend,f,c
 19813  0053B6  501D               	movf	___lwmod@divisor+1,w,c
 19814  0053B8  5A1B               	subwfb	___lwmod@dividend+1,f,c
 19815  0053BA                     l2012:
 19816  0053BA  90D8               	bcf	status,0,c
 19817  0053BC  321D               	rrcf	___lwmod@divisor+1,f,c
 19818  0053BE  321C               	rrcf	___lwmod@divisor,f,c
 19819  0053C0  2E1E               	decfsz	___lwmod@counter,f,c
 19820  0053C2  D7F1               	goto	u12040
 19821  0053C4                     l2013:
 19822  0053C4  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 19823  0053C8  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 19824  0053CC  0012               	return		;funcret
 19825  0053CE                     __end_of___lwmod:
 19826                           	opt stack 0
 19827                           tblptru	equ	0xFF8
 19828                           tblptrh	equ	0xFF7
 19829                           tblptrl	equ	0xFF6
 19830                           tablat	equ	0xFF5
 19831                           prodh	equ	0xFF4
 19832                           prodl	equ	0xFF3
 19833                           intcon	equ	0xFF2
 19834                           intcon2	equ	0xFF1
 19835                           intcon3	equ	0xFF0
 19836                           indf0	equ	0xFEF
 19837                           postinc0	equ	0xFEE
 19838                           fsr0h	equ	0xFEA
 19839                           fsr0l	equ	0xFE9
 19840                           wreg	equ	0xFE8
 19841                           indf1	equ	0xFE7
 19842                           postinc1	equ	0xFE6
 19843                           postdec1	equ	0xFE5
 19844                           plusw1	equ	0xFE3
 19845                           fsr1h	equ	0xFE2
 19846                           fsr1l	equ	0xFE1
 19847                           indf2	equ	0xFDF
 19848                           postinc2	equ	0xFDE
 19849                           postdec2	equ	0xFDD
 19850                           plusw2	equ	0xFDB
 19851                           fsr2h	equ	0xFDA
 19852                           fsr2l	equ	0xFD9
 19853                           status	equ	0xFD8
 19854                           
 19855 ;; *************** function ___lwdiv *****************
 19856 ;; Defined at:
 19857 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 19858 ;; Parameters:    Size  Location     Type
 19859 ;;  dividend        2   25[COMRAM] unsigned int 
 19860 ;;  divisor         2   27[COMRAM] unsigned int 
 19861 ;; Auto vars:     Size  Location     Type
 19862 ;;  quotient        2   30[COMRAM] unsigned int 
 19863 ;;  counter         1   29[COMRAM] unsigned char 
 19864 ;; Return value:  Size  Location     Type
 19865 ;;                  2   25[COMRAM] unsigned int 
 19866 ;; Registers used:
 19867 ;;		wreg, status,2, status,0
 19868 ;; Tracked objects:
 19869 ;;		On entry : 0/0
 19870 ;;		On exit  : 0/0
 19871 ;;		Unchanged: 0/0
 19872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19873 ;;      Params:         4       0       0       0       0       0       0       0       0
 19874 ;;      Locals:         3       0       0       0       0       0       0       0       0
 19875 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19876 ;;      Totals:         7       0       0       0       0       0       0       0       0
 19877 ;;Total ram usage:        7 bytes
 19878 ;; Hardware stack levels used:    1
 19879 ;; Hardware stack levels required when called:    2
 19880 ;; This function calls:
 19881 ;;		Nothing
 19882 ;; This function is called by:
 19883 ;;		_utoa
 19884 ;;		_converte_inteiro_matriz
 19885 ;; This function uses a non-reentrant model
 19886 ;;
 19887                           
 19888                           	psect	text70
 19889  00525C                     __ptext70:
 19890                           	opt stack 0
 19891  00525C                     ___lwdiv:
 19892                           	opt stack 18
 19893                           
 19894                           ;incstack = 0
 19895  00525C  0E00               	movlw	0
 19896  00525E  6E20               	movwf	___lwdiv@quotient+1,c
 19897  005260  0E00               	movlw	0
 19898  005262  6E1F               	movwf	___lwdiv@quotient,c
 19899  005264  501C               	movf	___lwdiv@divisor,w,c
 19900  005266  101D               	iorwf	___lwdiv@divisor+1,w,c
 19901  005268  B4D8               	btfsc	status,2,c
 19902  00526A  D01C               	goto	l2003
 19903  00526C  0E01               	movlw	1
 19904  00526E  6E1E               	movwf	___lwdiv@counter,c
 19905  005270  D004               	goto	l1998
 19906  005272  90D8               	bcf	status,0,c
 19907  005274  361C               	rlcf	___lwdiv@divisor,f,c
 19908  005276  361D               	rlcf	___lwdiv@divisor+1,f,c
 19909  005278  2A1E               	incf	___lwdiv@counter,f,c
 19910  00527A                     l1998:
 19911  00527A  AE1D               	btfss	___lwdiv@divisor+1,7,c
 19912  00527C  D7FA               	goto	l1999
 19913  00527E                     u12010:
 19914  00527E  90D8               	bcf	status,0,c
 19915  005280  361F               	rlcf	___lwdiv@quotient,f,c
 19916  005282  3620               	rlcf	___lwdiv@quotient+1,f,c
 19917  005284  501C               	movf	___lwdiv@divisor,w,c
 19918  005286  5C1A               	subwf	___lwdiv@dividend,w,c
 19919  005288  501D               	movf	___lwdiv@divisor+1,w,c
 19920  00528A  581B               	subwfb	___lwdiv@dividend+1,w,c
 19921  00528C  A0D8               	btfss	status,0,c
 19922  00528E  D005               	goto	l2002
 19923  005290  501C               	movf	___lwdiv@divisor,w,c
 19924  005292  5E1A               	subwf	___lwdiv@dividend,f,c
 19925  005294  501D               	movf	___lwdiv@divisor+1,w,c
 19926  005296  5A1B               	subwfb	___lwdiv@dividend+1,f,c
 19927  005298  801F               	bsf	___lwdiv@quotient,0,c
 19928  00529A                     l2002:
 19929  00529A  90D8               	bcf	status,0,c
 19930  00529C  321D               	rrcf	___lwdiv@divisor+1,f,c
 19931  00529E  321C               	rrcf	___lwdiv@divisor,f,c
 19932  0052A0  2E1E               	decfsz	___lwdiv@counter,f,c
 19933  0052A2  D7ED               	goto	u12010
 19934  0052A4                     l2003:
 19935  0052A4  C01F  F01A         	movff	___lwdiv@quotient,?___lwdiv
 19936  0052A8  C020  F01B         	movff	___lwdiv@quotient+1,?___lwdiv+1
 19937  0052AC  0012               	return		;funcret
 19938  0052AE                     __end_of___lwdiv:
 19939                           	opt stack 0
 19940                           tblptru	equ	0xFF8
 19941                           tblptrh	equ	0xFF7
 19942                           tblptrl	equ	0xFF6
 19943                           tablat	equ	0xFF5
 19944                           prodh	equ	0xFF4
 19945                           prodl	equ	0xFF3
 19946                           intcon	equ	0xFF2
 19947                           intcon2	equ	0xFF1
 19948                           intcon3	equ	0xFF0
 19949                           indf0	equ	0xFEF
 19950                           postinc0	equ	0xFEE
 19951                           fsr0h	equ	0xFEA
 19952                           fsr0l	equ	0xFE9
 19953                           wreg	equ	0xFE8
 19954                           indf1	equ	0xFE7
 19955                           postinc1	equ	0xFE6
 19956                           postdec1	equ	0xFE5
 19957                           plusw1	equ	0xFE3
 19958                           fsr1h	equ	0xFE2
 19959                           fsr1l	equ	0xFE1
 19960                           indf2	equ	0xFDF
 19961                           postinc2	equ	0xFDE
 19962                           postdec2	equ	0xFDD
 19963                           plusw2	equ	0xFDB
 19964                           fsr2h	equ	0xFDA
 19965                           fsr2l	equ	0xFD9
 19966                           status	equ	0xFD8
 19967                           
 19968 ;; *************** function _escreve_frase_ram_lcd *****************
 19969 ;; Defined at:
 19970 ;;		line 445 in file "bibliotecas/display_lcd.c"
 19971 ;; Parameters:    Size  Location     Type
 19972 ;;  buffer          2   28[COMRAM] PTR unsigned char 
 19973 ;;		 -> escreve_inteiro_lcd@texto(7), STR_18(11), STR_17(10), STR_16(16), 
 19974 ;;		 -> STR_15(16), STR_14(11), STR_13(17), STR_12(11), 
 19975 ;;		 -> STR_5(5), gps@gps_buffer(15), dado_buffer(7), STR_2(6), 
 19976 ;;		 -> data_buffer(15), STR_1(6), mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 19977 ;; Auto vars:     Size  Location     Type
 19978 ;;		None
 19979 ;; Return value:  Size  Location     Type
 19980 ;;                  1    wreg      void 
 19981 ;; Registers used:
 19982 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19983 ;; Tracked objects:
 19984 ;;		On entry : 0/0
 19985 ;;		On exit  : 0/0
 19986 ;;		Unchanged: 0/0
 19987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19988 ;;      Params:         2       0       0       0       0       0       0       0       0
 19989 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19990 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19991 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19992 ;;Total ram usage:        2 bytes
 19993 ;; Hardware stack levels used:    1
 19994 ;; Hardware stack levels required when called:    4
 19995 ;; This function calls:
 19996 ;;		_escreve_caractere_lcd
 19997 ;; This function is called by:
 19998 ;;		_mensagem_inicial
 19999 ;;		_SDCard
 20000 ;;		_inicializa_SPI
 20001 ;;		_sdc_reset
 20002 ;;		_sdc_disk_initialize
 20003 ;;		_escreve_inteiro_lcd
 20004 ;;		_gps
 20005 ;; This function uses a non-reentrant model
 20006 ;;
 20007                           
 20008                           	psect	text71
 20009  0052AE                     __ptext71:
 20010                           	opt stack 0
 20011  0052AE                     _escreve_frase_ram_lcd:
 20012                           	opt stack 25
 20013                           
 20014                           ;display_lcd.c: 447: while(*buffer)
 20015                           
 20016                           ;incstack = 0
 20017  0052AE  D014               	goto	l629
 20018  0052B0                     
 20019                           ;display_lcd.c: 448: {
 20020                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 20021  0052B0  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 20022  0052B4  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 20023  0052B8  6AF8               	clrf	tblptru,c
 20024  0052BA  0E07               	movlw	(high __ramtop+-1)
 20025  0052BC  64F7               	cpfsgt	tblptrh,c
 20026  0052BE  D003               	bra	u12197
 20027  0052C0  0008               	tblrd		*
 20028  0052C2  50F5               	movf	tablat,w,c
 20029  0052C4  D005               	bra	u12190
 20030  0052C6                     u12197:
 20031  0052C6  CFF6 FFE9          	movff	tblptrl,fsr0l
 20032  0052CA  CFF7 FFEA          	movff	tblptrh,fsr0h
 20033  0052CE  50EF               	movf	indf0,w,c
 20034  0052D0                     u12190:
 20035  0052D0  ECC6  F027         	call	_escreve_caractere_lcd
 20036                           
 20037                           ;display_lcd.c: 450: buffer++;
 20038  0052D4  4A1D               	infsnz	escreve_frase_ram_lcd@buffer,f,c
 20039  0052D6  2A1E               	incf	escreve_frase_ram_lcd@buffer+1,f,c
 20040  0052D8                     l629:
 20041  0052D8  C01D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 20042  0052DC  C01E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 20043  0052E0  6AF8               	clrf	tblptru,c
 20044  0052E2  0E07               	movlw	(high __ramtop+-1)
 20045  0052E4  64F7               	cpfsgt	tblptrh,c
 20046  0052E6  D003               	bra	u12207
 20047  0052E8  0008               	tblrd		*
 20048  0052EA  50F5               	movf	tablat,w,c
 20049  0052EC  D005               	bra	u12200
 20050  0052EE                     u12207:
 20051  0052EE  CFF6 FFE9          	movff	tblptrl,fsr0l
 20052  0052F2  CFF7 FFEA          	movff	tblptrh,fsr0h
 20053  0052F6  50EF               	movf	indf0,w,c
 20054  0052F8                     u12200:
 20055  0052F8  0900               	iorlw	0
 20056  0052FA  B4D8               	btfsc	status,2,c
 20057  0052FC  0012               	return	
 20058  0052FE  D7D8               	goto	l630
 20059  005300                     __end_of_escreve_frase_ram_lcd:
 20060                           	opt stack 0
 20061                           tblptru	equ	0xFF8
 20062                           tblptrh	equ	0xFF7
 20063                           tblptrl	equ	0xFF6
 20064                           tablat	equ	0xFF5
 20065                           prodh	equ	0xFF4
 20066                           prodl	equ	0xFF3
 20067                           intcon	equ	0xFF2
 20068                           intcon2	equ	0xFF1
 20069                           intcon3	equ	0xFF0
 20070                           indf0	equ	0xFEF
 20071                           postinc0	equ	0xFEE
 20072                           fsr0h	equ	0xFEA
 20073                           fsr0l	equ	0xFE9
 20074                           wreg	equ	0xFE8
 20075                           indf1	equ	0xFE7
 20076                           postinc1	equ	0xFE6
 20077                           postdec1	equ	0xFE5
 20078                           plusw1	equ	0xFE3
 20079                           fsr1h	equ	0xFE2
 20080                           fsr1l	equ	0xFE1
 20081                           indf2	equ	0xFDF
 20082                           postinc2	equ	0xFDE
 20083                           postdec2	equ	0xFDD
 20084                           plusw2	equ	0xFDB
 20085                           fsr2h	equ	0xFDA
 20086                           fsr2l	equ	0xFD9
 20087                           status	equ	0xFD8
 20088                           
 20089 ;; *************** function _escreve_caractere_lcd *****************
 20090 ;; Defined at:
 20091 ;;		line 323 in file "bibliotecas/display_lcd.c"
 20092 ;; Parameters:    Size  Location     Type
 20093 ;;  data            1    wreg     unsigned char 
 20094 ;; Auto vars:     Size  Location     Type
 20095 ;;  data            1   27[COMRAM] unsigned char 
 20096 ;; Return value:  Size  Location     Type
 20097 ;;                  1    wreg      void 
 20098 ;; Registers used:
 20099 ;;		wreg, status,2, status,0, cstack
 20100 ;; Tracked objects:
 20101 ;;		On entry : 0/0
 20102 ;;		On exit  : 0/0
 20103 ;;		Unchanged: 0/0
 20104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20105 ;;      Params:         0       0       0       0       0       0       0       0       0
 20106 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20107 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20108 ;;      Totals:         1       0       0       0       0       0       0       0       0
 20109 ;;Total ram usage:        1 bytes
 20110 ;; Hardware stack levels used:    1
 20111 ;; Hardware stack levels required when called:    3
 20112 ;; This function calls:
 20113 ;;		_delay
 20114 ;; This function is called by:
 20115 ;;		_escreve_frase_ram_lcd
 20116 ;;		_escreve_float_lcd
 20117 ;;		_escreve_frase_lcd
 20118 ;;		_cria_caractere_lcd
 20119 ;; This function uses a non-reentrant model
 20120 ;;
 20121                           
 20122                           	psect	text72
 20123  004F8C                     __ptext72:
 20124                           	opt stack 0
 20125  004F8C                     _escreve_caractere_lcd:
 20126                           	opt stack 25
 20127                           
 20128                           ;incstack = 0
 20129                           ;escreve_caractere_lcd@data stored from wreg
 20130  004F8C  6E1C               	movwf	escreve_caractere_lcd@data,c
 20131                           
 20132                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 20133  004F8E  9483               	bcf	3971,2,c	;volatile
 20134                           
 20135                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 20136  004F90  8283               	bsf	3971,1,c	;volatile
 20137                           
 20138                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 20139  004F92  9083               	bcf	3971,0,c	;volatile
 20140                           
 20141                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 20142  004F94  A81C               	btfss	escreve_caractere_lcd@data,4,c
 20143  004F96  D002               	goto	l596
 20144  004F98  8883               	bsf	3971,4,c	;volatile
 20145  004F9A  D001               	goto	l597
 20146  004F9C                     l596:
 20147                           
 20148                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 20149  004F9C  9883               	bcf	3971,4,c	;volatile
 20150  004F9E                     l597:
 20151                           
 20152                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 20153  004F9E  AA1C               	btfss	escreve_caractere_lcd@data,5,c
 20154  004FA0  D002               	goto	l598
 20155  004FA2  8A83               	bsf	3971,5,c	;volatile
 20156  004FA4  D001               	goto	l599
 20157  004FA6                     l598:
 20158                           
 20159                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 20160  004FA6  9A83               	bcf	3971,5,c	;volatile
 20161  004FA8                     l599:
 20162                           
 20163                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 20164  004FA8  AC1C               	btfss	escreve_caractere_lcd@data,6,c
 20165  004FAA  D002               	goto	l600
 20166  004FAC  8C83               	bsf	3971,6,c	;volatile
 20167  004FAE  D001               	goto	l601
 20168  004FB0                     l600:
 20169                           
 20170                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 20171  004FB0  9C83               	bcf	3971,6,c	;volatile
 20172  004FB2                     l601:
 20173                           
 20174                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 20175  004FB2  AE1C               	btfss	escreve_caractere_lcd@data,7,c
 20176  004FB4  D002               	goto	l602
 20177  004FB6  8E83               	bsf	3971,7,c	;volatile
 20178  004FB8  D001               	goto	l603
 20179  004FBA                     l602:
 20180                           
 20181                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 20182  004FBA  9E83               	bcf	3971,7,c	;volatile
 20183  004FBC                     l603:
 20184                           
 20185                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 20186  004FBC  8083               	bsf	3971,0,c	;volatile
 20187                           
 20188                           ;display_lcd.c: 342: delay();
 20189  004FBE  EC3C  F02B         	call	_delay	;wreg free
 20190                           
 20191                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 20192  004FC2  9083               	bcf	3971,0,c	;volatile
 20193                           
 20194                           ;display_lcd.c: 344: delay();
 20195  004FC4  EC3C  F02B         	call	_delay	;wreg free
 20196                           
 20197                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 20198  004FC8  A01C               	btfss	escreve_caractere_lcd@data,0,c
 20199  004FCA  D002               	goto	l604
 20200  004FCC  8883               	bsf	3971,4,c	;volatile
 20201  004FCE  D001               	goto	l605
 20202  004FD0                     l604:
 20203                           
 20204                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 20205  004FD0  9883               	bcf	3971,4,c	;volatile
 20206  004FD2                     l605:
 20207                           
 20208                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 20209  004FD2  A21C               	btfss	escreve_caractere_lcd@data,1,c
 20210  004FD4  D002               	goto	l606
 20211  004FD6  8A83               	bsf	3971,5,c	;volatile
 20212  004FD8  D001               	goto	l607
 20213  004FDA                     l606:
 20214                           
 20215                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 20216  004FDA  9A83               	bcf	3971,5,c	;volatile
 20217  004FDC                     l607:
 20218                           
 20219                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 20220  004FDC  A41C               	btfss	escreve_caractere_lcd@data,2,c
 20221  004FDE  D002               	goto	l608
 20222  004FE0  8C83               	bsf	3971,6,c	;volatile
 20223  004FE2  D001               	goto	l609
 20224  004FE4                     l608:
 20225                           
 20226                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 20227  004FE4  9C83               	bcf	3971,6,c	;volatile
 20228  004FE6                     l609:
 20229                           
 20230                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 20231  004FE6  A61C               	btfss	escreve_caractere_lcd@data,3,c
 20232  004FE8  D002               	goto	l610
 20233  004FEA  8E83               	bsf	3971,7,c	;volatile
 20234  004FEC  D001               	goto	l611
 20235  004FEE                     l610:
 20236                           
 20237                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 20238  004FEE  9E83               	bcf	3971,7,c	;volatile
 20239  004FF0                     l611:
 20240                           
 20241                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 20242  004FF0  8083               	bsf	3971,0,c	;volatile
 20243                           
 20244                           ;display_lcd.c: 359: delay();
 20245  004FF2  EC3C  F02B         	call	_delay	;wreg free
 20246                           
 20247                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 20248  004FF6  9083               	bcf	3971,0,c	;volatile
 20249                           
 20250                           ;display_lcd.c: 361: delay();
 20251  004FF8  EC3C  F02B         	call	_delay	;wreg free
 20252  004FFC  0012               	return		;funcret
 20253  004FFE                     __end_of_escreve_caractere_lcd:
 20254                           	opt stack 0
 20255                           tblptru	equ	0xFF8
 20256                           tblptrh	equ	0xFF7
 20257                           tblptrl	equ	0xFF6
 20258                           tablat	equ	0xFF5
 20259                           prodh	equ	0xFF4
 20260                           prodl	equ	0xFF3
 20261                           intcon	equ	0xFF2
 20262                           intcon2	equ	0xFF1
 20263                           intcon3	equ	0xFF0
 20264                           indf0	equ	0xFEF
 20265                           postinc0	equ	0xFEE
 20266                           fsr0h	equ	0xFEA
 20267                           fsr0l	equ	0xFE9
 20268                           wreg	equ	0xFE8
 20269                           indf1	equ	0xFE7
 20270                           postinc1	equ	0xFE6
 20271                           postdec1	equ	0xFE5
 20272                           plusw1	equ	0xFE3
 20273                           fsr1h	equ	0xFE2
 20274                           fsr1l	equ	0xFE1
 20275                           indf2	equ	0xFDF
 20276                           postinc2	equ	0xFDE
 20277                           postdec2	equ	0xFDD
 20278                           plusw2	equ	0xFDB
 20279                           fsr2h	equ	0xFDA
 20280                           fsr2l	equ	0xFD9
 20281                           status	equ	0xFD8
 20282                           
 20283 ;; *************** function _delay *****************
 20284 ;; Defined at:
 20285 ;;		line 45 in file "bibliotecas/display_lcd.c"
 20286 ;; Parameters:    Size  Location     Type
 20287 ;;		None
 20288 ;; Auto vars:     Size  Location     Type
 20289 ;;  contador_int    1   26[COMRAM] unsigned char 
 20290 ;;  contador_ext    1   25[COMRAM] unsigned char 
 20291 ;; Return value:  Size  Location     Type
 20292 ;;                  1    wreg      void 
 20293 ;; Registers used:
 20294 ;;		wreg, status,2, status,0
 20295 ;; Tracked objects:
 20296 ;;		On entry : 0/0
 20297 ;;		On exit  : 0/0
 20298 ;;		Unchanged: 0/0
 20299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20300 ;;      Params:         0       0       0       0       0       0       0       0       0
 20301 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20302 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20303 ;;      Totals:         2       0       0       0       0       0       0       0       0
 20304 ;;Total ram usage:        2 bytes
 20305 ;; Hardware stack levels used:    1
 20306 ;; Hardware stack levels required when called:    2
 20307 ;; This function calls:
 20308 ;;		Nothing
 20309 ;; This function is called by:
 20310 ;;		_init_lcd
 20311 ;;		_escreve_cmd_lcd
 20312 ;;		_endereco_cursor_lcd
 20313 ;;		_escreve_caractere_lcd
 20314 ;; This function uses a non-reentrant model
 20315 ;;
 20316                           
 20317                           	psect	text73
 20318  005678                     __ptext73:
 20319                           	opt stack 0
 20320  005678                     _delay:
 20321                           	opt stack 25
 20322                           
 20323                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 20324                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 20325                           
 20326                           ;incstack = 0
 20327  005678  0E00               	movlw	0
 20328  00567A  6E1A               	movwf	delay@contador_ext,c
 20329  00567C                     l9729:
 20330  00567C  0E63               	movlw	99
 20331  00567E  641A               	cpfsgt	delay@contador_ext,c
 20332  005680  D001               	goto	l535
 20333  005682  0012               	return	
 20334  005684                     l535:
 20335                           
 20336                           ;display_lcd.c: 50: {
 20337                           ;display_lcd.c: 51: __nop();
 20338  005684  F000               	nop	
 20339                           
 20340                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 20341  005686  0E00               	movlw	0
 20342  005688  6E1B               	movwf	delay@contador_int,c
 20343  00568A                     l9735:
 20344  00568A  0E31               	movlw	49
 20345  00568C  641B               	cpfsgt	delay@contador_int,c
 20346  00568E  D001               	goto	l537
 20347  005690  D003               	goto	u11980
 20348  005692                     l537:
 20349                           
 20350                           ;display_lcd.c: 53: {
 20351                           ;display_lcd.c: 54: __nop();
 20352  005692  F000               	nop	
 20353  005694  2A1B               	incf	delay@contador_int,f,c
 20354  005696  D7F9               	goto	l9735
 20355  005698                     u11980:
 20356  005698  2A1A               	incf	delay@contador_ext,f,c
 20357  00569A  D7F0               	goto	l9729
 20358  00569C                     __end_of_delay:
 20359                           	opt stack 0
 20360                           tblptru	equ	0xFF8
 20361                           tblptrh	equ	0xFF7
 20362                           tblptrl	equ	0xFF6
 20363                           tablat	equ	0xFF5
 20364                           prodh	equ	0xFF4
 20365                           prodl	equ	0xFF3
 20366                           intcon	equ	0xFF2
 20367                           intcon2	equ	0xFF1
 20368                           intcon3	equ	0xFF0
 20369                           indf0	equ	0xFEF
 20370                           postinc0	equ	0xFEE
 20371                           fsr0h	equ	0xFEA
 20372                           fsr0l	equ	0xFE9
 20373                           wreg	equ	0xFE8
 20374                           indf1	equ	0xFE7
 20375                           postinc1	equ	0xFE6
 20376                           postdec1	equ	0xFE5
 20377                           plusw1	equ	0xFE3
 20378                           fsr1h	equ	0xFE2
 20379                           fsr1l	equ	0xFE1
 20380                           indf2	equ	0xFDF
 20381                           postinc2	equ	0xFDE
 20382                           postdec2	equ	0xFDD
 20383                           plusw2	equ	0xFDB
 20384                           fsr2h	equ	0xFDA
 20385                           fsr2l	equ	0xFD9
 20386                           status	equ	0xFD8
 20387                           
 20388 ;; *************** function ___lmul *****************
 20389 ;; Defined at:
 20390 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 20391 ;; Parameters:    Size  Location     Type
 20392 ;;  multiplier      4   25[COMRAM] unsigned long 
 20393 ;;  multiplicand    4   29[COMRAM] unsigned long 
 20394 ;; Auto vars:     Size  Location     Type
 20395 ;;  product         4   33[COMRAM] unsigned long 
 20396 ;; Return value:  Size  Location     Type
 20397 ;;                  4   25[COMRAM] unsigned long 
 20398 ;; Registers used:
 20399 ;;		wreg, status,2, status,0
 20400 ;; Tracked objects:
 20401 ;;		On entry : 0/0
 20402 ;;		On exit  : 0/0
 20403 ;;		Unchanged: 0/0
 20404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20405 ;;      Params:         8       0       0       0       0       0       0       0       0
 20406 ;;      Locals:         4       0       0       0       0       0       0       0       0
 20407 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20408 ;;      Totals:        12       0       0       0       0       0       0       0       0
 20409 ;;Total ram usage:       12 bytes
 20410 ;; Hardware stack levels used:    1
 20411 ;; Hardware stack levels required when called:    2
 20412 ;; This function calls:
 20413 ;;		Nothing
 20414 ;; This function is called by:
 20415 ;;		_clust2sect
 20416 ;;		_find_volume
 20417 ;;		_strtod
 20418 ;;		_atol
 20419 ;; This function uses a non-reentrant model
 20420 ;;
 20421                           
 20422                           	psect	text74
 20423  005206                     __ptext74:
 20424                           	opt stack 0
 20425  005206                     ___lmul:
 20426                           	opt stack 22
 20427                           
 20428                           ;incstack = 0
 20429  005206  0E00               	movlw	0
 20430  005208  6E22               	movwf	___lmul@product,c
 20431  00520A  0E00               	movlw	0
 20432  00520C  6E23               	movwf	___lmul@product+1,c
 20433  00520E  0E00               	movlw	0
 20434  005210  6E24               	movwf	___lmul@product+2,c
 20435  005212  0E00               	movlw	0
 20436  005214  6E25               	movwf	___lmul@product+3,c
 20437  005216  A01A               	btfss	___lmul@multiplier,0,c
 20438  005218  D008               	goto	l1470
 20439  00521A  501E               	movf	___lmul@multiplicand,w,c
 20440  00521C  2622               	addwf	___lmul@product,f,c
 20441  00521E  501F               	movf	___lmul@multiplicand+1,w,c
 20442  005220  2223               	addwfc	___lmul@product+1,f,c
 20443  005222  5020               	movf	___lmul@multiplicand+2,w,c
 20444  005224  2224               	addwfc	___lmul@product+2,f,c
 20445  005226  5021               	movf	___lmul@multiplicand+3,w,c
 20446  005228  2225               	addwfc	___lmul@product+3,f,c
 20447  00522A                     l1470:
 20448  00522A  90D8               	bcf	status,0,c
 20449  00522C  361E               	rlcf	___lmul@multiplicand,f,c
 20450  00522E  361F               	rlcf	___lmul@multiplicand+1,f,c
 20451  005230  3620               	rlcf	___lmul@multiplicand+2,f,c
 20452  005232  3621               	rlcf	___lmul@multiplicand+3,f,c
 20453  005234  90D8               	bcf	status,0,c
 20454  005236  321D               	rrcf	___lmul@multiplier+3,f,c
 20455  005238  321C               	rrcf	___lmul@multiplier+2,f,c
 20456  00523A  321B               	rrcf	___lmul@multiplier+1,f,c
 20457  00523C  321A               	rrcf	___lmul@multiplier,f,c
 20458  00523E  501A               	movf	___lmul@multiplier,w,c
 20459  005240  101B               	iorwf	___lmul@multiplier+1,w,c
 20460  005242  101C               	iorwf	___lmul@multiplier+2,w,c
 20461  005244  101D               	iorwf	___lmul@multiplier+3,w,c
 20462  005246  A4D8               	btfss	status,2,c
 20463  005248  D7E6               	goto	l1469
 20464  00524A  C022  F01A         	movff	___lmul@product,?___lmul
 20465  00524E  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 20466  005252  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 20467  005256  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 20468  00525A  0012               	return		;funcret
 20469  00525C                     __end_of___lmul:
 20470                           	opt stack 0
 20471                           tblptru	equ	0xFF8
 20472                           tblptrh	equ	0xFF7
 20473                           tblptrl	equ	0xFF6
 20474                           tablat	equ	0xFF5
 20475                           prodh	equ	0xFF4
 20476                           prodl	equ	0xFF3
 20477                           intcon	equ	0xFF2
 20478                           intcon2	equ	0xFF1
 20479                           intcon3	equ	0xFF0
 20480                           indf0	equ	0xFEF
 20481                           postinc0	equ	0xFEE
 20482                           fsr0h	equ	0xFEA
 20483                           fsr0l	equ	0xFE9
 20484                           wreg	equ	0xFE8
 20485                           indf1	equ	0xFE7
 20486                           postinc1	equ	0xFE6
 20487                           postdec1	equ	0xFE5
 20488                           plusw1	equ	0xFE3
 20489                           fsr1h	equ	0xFE2
 20490                           fsr1l	equ	0xFE1
 20491                           indf2	equ	0xFDF
 20492                           postinc2	equ	0xFDE
 20493                           postdec2	equ	0xFDD
 20494                           plusw2	equ	0xFDB
 20495                           fsr2h	equ	0xFDA
 20496                           fsr2l	equ	0xFD9
 20497                           status	equ	0xFD8
 20498                           
 20499 ;; *************** function ___lldiv *****************
 20500 ;; Defined at:
 20501 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 20502 ;; Parameters:    Size  Location     Type
 20503 ;;  dividend        4   25[COMRAM] unsigned long 
 20504 ;;  divisor         4   29[COMRAM] unsigned long 
 20505 ;; Auto vars:     Size  Location     Type
 20506 ;;  quotient        4   33[COMRAM] unsigned long 
 20507 ;;  counter         1   37[COMRAM] unsigned char 
 20508 ;; Return value:  Size  Location     Type
 20509 ;;                  4   25[COMRAM] unsigned long 
 20510 ;; Registers used:
 20511 ;;		wreg, status,2, status,0
 20512 ;; Tracked objects:
 20513 ;;		On entry : 0/0
 20514 ;;		On exit  : 0/0
 20515 ;;		Unchanged: 0/0
 20516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20517 ;;      Params:         8       0       0       0       0       0       0       0       0
 20518 ;;      Locals:         5       0       0       0       0       0       0       0       0
 20519 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20520 ;;      Totals:        13       0       0       0       0       0       0       0       0
 20521 ;;Total ram usage:       13 bytes
 20522 ;; Hardware stack levels used:    1
 20523 ;; Hardware stack levels required when called:    2
 20524 ;; This function calls:
 20525 ;;		Nothing
 20526 ;; This function is called by:
 20527 ;;		_find_volume
 20528 ;;		_f_lseek
 20529 ;;		_convert_time_to_utc
 20530 ;;		_sprintf
 20531 ;; This function uses a non-reentrant model
 20532 ;;
 20533                           
 20534                           	psect	text75
 20535  004D28                     __ptext75:
 20536                           	opt stack 0
 20537  004D28                     ___lldiv:
 20538                           	opt stack 24
 20539                           
 20540                           ;incstack = 0
 20541  004D28  0E00               	movlw	0
 20542  004D2A  6E22               	movwf	___lldiv@quotient,c
 20543  004D2C  0E00               	movlw	0
 20544  004D2E  6E23               	movwf	___lldiv@quotient+1,c
 20545  004D30  0E00               	movlw	0
 20546  004D32  6E24               	movwf	___lldiv@quotient+2,c
 20547  004D34  0E00               	movlw	0
 20548  004D36  6E25               	movwf	___lldiv@quotient+3,c
 20549  004D38  501E               	movf	___lldiv@divisor,w,c
 20550  004D3A  101F               	iorwf	___lldiv@divisor+1,w,c
 20551  004D3C  1020               	iorwf	___lldiv@divisor+2,w,c
 20552  004D3E  1021               	iorwf	___lldiv@divisor+3,w,c
 20553  004D40  B4D8               	btfsc	status,2,c
 20554  004D42  D02A               	goto	l1950
 20555  004D44  0E01               	movlw	1
 20556  004D46  6E26               	movwf	___lldiv@counter,c
 20557  004D48  D006               	goto	l1945
 20558  004D4A  90D8               	bcf	status,0,c
 20559  004D4C  361E               	rlcf	___lldiv@divisor,f,c
 20560  004D4E  361F               	rlcf	___lldiv@divisor+1,f,c
 20561  004D50  3620               	rlcf	___lldiv@divisor+2,f,c
 20562  004D52  3621               	rlcf	___lldiv@divisor+3,f,c
 20563  004D54  2A26               	incf	___lldiv@counter,f,c
 20564  004D56                     l1945:
 20565  004D56  AE21               	btfss	___lldiv@divisor+3,7,c
 20566  004D58  D7F8               	goto	l1946
 20567  004D5A                     u14370:
 20568  004D5A  90D8               	bcf	status,0,c
 20569  004D5C  3622               	rlcf	___lldiv@quotient,f,c
 20570  004D5E  3623               	rlcf	___lldiv@quotient+1,f,c
 20571  004D60  3624               	rlcf	___lldiv@quotient+2,f,c
 20572  004D62  3625               	rlcf	___lldiv@quotient+3,f,c
 20573  004D64  501E               	movf	___lldiv@divisor,w,c
 20574  004D66  5C1A               	subwf	___lldiv@dividend,w,c
 20575  004D68  501F               	movf	___lldiv@divisor+1,w,c
 20576  004D6A  581B               	subwfb	___lldiv@dividend+1,w,c
 20577  004D6C  5020               	movf	___lldiv@divisor+2,w,c
 20578  004D6E  581C               	subwfb	___lldiv@dividend+2,w,c
 20579  004D70  5021               	movf	___lldiv@divisor+3,w,c
 20580  004D72  581D               	subwfb	___lldiv@dividend+3,w,c
 20581  004D74  A0D8               	btfss	status,0,c
 20582  004D76  D009               	goto	l1949
 20583  004D78  501E               	movf	___lldiv@divisor,w,c
 20584  004D7A  5E1A               	subwf	___lldiv@dividend,f,c
 20585  004D7C  501F               	movf	___lldiv@divisor+1,w,c
 20586  004D7E  5A1B               	subwfb	___lldiv@dividend+1,f,c
 20587  004D80  5020               	movf	___lldiv@divisor+2,w,c
 20588  004D82  5A1C               	subwfb	___lldiv@dividend+2,f,c
 20589  004D84  5021               	movf	___lldiv@divisor+3,w,c
 20590  004D86  5A1D               	subwfb	___lldiv@dividend+3,f,c
 20591  004D88  8022               	bsf	___lldiv@quotient,0,c
 20592  004D8A                     l1949:
 20593  004D8A  90D8               	bcf	status,0,c
 20594  004D8C  3221               	rrcf	___lldiv@divisor+3,f,c
 20595  004D8E  3220               	rrcf	___lldiv@divisor+2,f,c
 20596  004D90  321F               	rrcf	___lldiv@divisor+1,f,c
 20597  004D92  321E               	rrcf	___lldiv@divisor,f,c
 20598  004D94  2E26               	decfsz	___lldiv@counter,f,c
 20599  004D96  D7E1               	goto	u14370
 20600  004D98                     l1950:
 20601  004D98  C022  F01A         	movff	___lldiv@quotient,?___lldiv
 20602  004D9C  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
 20603  004DA0  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
 20604  004DA4  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
 20605  004DA8  0012               	return		;funcret
 20606  004DAA                     __end_of___lldiv:
 20607                           	opt stack 0
 20608                           tblptru	equ	0xFF8
 20609                           tblptrh	equ	0xFF7
 20610                           tblptrl	equ	0xFF6
 20611                           tablat	equ	0xFF5
 20612                           prodh	equ	0xFF4
 20613                           prodl	equ	0xFF3
 20614                           intcon	equ	0xFF2
 20615                           intcon2	equ	0xFF1
 20616                           intcon3	equ	0xFF0
 20617                           indf0	equ	0xFEF
 20618                           postinc0	equ	0xFEE
 20619                           fsr0h	equ	0xFEA
 20620                           fsr0l	equ	0xFE9
 20621                           wreg	equ	0xFE8
 20622                           indf1	equ	0xFE7
 20623                           postinc1	equ	0xFE6
 20624                           postdec1	equ	0xFE5
 20625                           plusw1	equ	0xFE3
 20626                           fsr1h	equ	0xFE2
 20627                           fsr1l	equ	0xFE1
 20628                           indf2	equ	0xFDF
 20629                           postinc2	equ	0xFDE
 20630                           postdec2	equ	0xFDD
 20631                           plusw2	equ	0xFDB
 20632                           fsr2h	equ	0xFDA
 20633                           fsr2l	equ	0xFD9
 20634                           status	equ	0xFD8
 20635                           
 20636 ;; *************** function _isr *****************
 20637 ;; Defined at:
 20638 ;;		line 107 in file "main.c"
 20639 ;; Parameters:    Size  Location     Type
 20640 ;;		None
 20641 ;; Auto vars:     Size  Location     Type
 20642 ;;  cont            1   24[COMRAM] unsigned char 
 20643 ;; Return value:  Size  Location     Type
 20644 ;;                  1    wreg      void 
 20645 ;; Registers used:
 20646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20647 ;; Tracked objects:
 20648 ;;		On entry : 0/0
 20649 ;;		On exit  : 0/0
 20650 ;;		Unchanged: 0/0
 20651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20652 ;;      Params:         0       0       0       0       0       0       0       0       0
 20653 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20654 ;;      Temps:         20       0       0       0       0       0       0       0       0
 20655 ;;      Totals:        21       0       0       0       0       0       0       0       0
 20656 ;;Total ram usage:       21 bytes
 20657 ;; Hardware stack levels used:    1
 20658 ;; Hardware stack levels required when called:    1
 20659 ;; This function calls:
 20660 ;;		_recebe_dado_uart
 20661 ;;		i2_write_timer_zero
 20662 ;; This function is called by:
 20663 ;;		Interrupt level 2
 20664 ;; This function uses a non-reentrant model
 20665 ;;
 20666                           
 20667                           	psect	intcode
 20668  000008                     __pintcode:
 20669                           	opt stack 0
 20670  000008                     _isr:
 20671                           	opt stack 14
 20672                           
 20673                           ;incstack = 0
 20674  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20675  00000A  EDBC  F01F         	call	int_func,f	;refresh shadow registers
 20676                           tblptru	equ	0xFF8
 20677                           tblptrh	equ	0xFF7
 20678                           tblptrl	equ	0xFF6
 20679                           tablat	equ	0xFF5
 20680                           prodh	equ	0xFF4
 20681                           prodl	equ	0xFF3
 20682                           intcon	equ	0xFF2
 20683                           intcon2	equ	0xFF1
 20684                           intcon3	equ	0xFF0
 20685                           indf0	equ	0xFEF
 20686                           postinc0	equ	0xFEE
 20687                           fsr0h	equ	0xFEA
 20688                           fsr0l	equ	0xFE9
 20689                           wreg	equ	0xFE8
 20690                           indf1	equ	0xFE7
 20691                           postinc1	equ	0xFE6
 20692                           postdec1	equ	0xFE5
 20693                           plusw1	equ	0xFE3
 20694                           fsr1h	equ	0xFE2
 20695                           fsr1l	equ	0xFE1
 20696                           indf2	equ	0xFDF
 20697                           postinc2	equ	0xFDE
 20698                           postdec2	equ	0xFDD
 20699                           plusw2	equ	0xFDB
 20700                           fsr2h	equ	0xFDA
 20701                           fsr2l	equ	0xFD9
 20702                           status	equ	0xFD8
 20703                           
 20704                           	psect	intcode_body
 20705  003F78                     __pintcode_body:
 20706                           	opt stack 14
 20707  003F78                     int_func:
 20708                           	opt stack 14
 20709  003F78  0006               	pop		; remove dummy address from shadow register refresh
 20710  003F7A  CFFA F007          	movff	pclath,??_isr+2
 20711  003F7E  CFFB F008          	movff	pclatu,??_isr+3
 20712  003F82  CFE9 F009          	movff	fsr0l,??_isr+4
 20713  003F86  CFEA F00A          	movff	fsr0h,??_isr+5
 20714  003F8A  CFE1 F00B          	movff	fsr1l,??_isr+6
 20715  003F8E  CFE2 F00C          	movff	fsr1h,??_isr+7
 20716  003F92  CFD9 F00D          	movff	fsr2l,??_isr+8
 20717  003F96  CFDA F00E          	movff	fsr2h,??_isr+9
 20718  003F9A  CFF3 F00F          	movff	prodl,??_isr+10
 20719  003F9E  CFF4 F010          	movff	prodh,??_isr+11
 20720  003FA2  CFF6 F011          	movff	tblptrl,??_isr+12
 20721  003FA6  CFF7 F012          	movff	tblptrh,??_isr+13
 20722  003FAA  CFF8 F013          	movff	tblptru,??_isr+14
 20723  003FAE  CFF5 F014          	movff	tablat,??_isr+15
 20724  003FB2  C046  F015         	movff	btemp,??_isr+16
 20725  003FB6  C047  F016         	movff	btemp+1,??_isr+17
 20726  003FBA  C048  F017         	movff	btemp+2,??_isr+18
 20727  003FBE  C049  F018         	movff	btemp+3,??_isr+19
 20728                           
 20729                           ;main.c: 109: unsigned char cont;
 20730                           ;main.c: 112: if (PIE1bits.RCIE && PIR1bits.RCIF)
 20731  003FC2  BA9D               	btfsc	3997,5,c	;volatile
 20732  003FC4  AA9E               	btfss	3998,5,c	;volatile
 20733  003FC6  D004               	goto	i2l61
 20734                           
 20735                           ;main.c: 113: {
 20736                           ;main.c: 114: data_uart_recebe = recebe_dado_uart();
 20737  003FC8  ECA0  F02B         	call	_recebe_dado_uart	;wreg free
 20738  003FCC  6E45               	movwf	_data_uart_recebe,c
 20739                           
 20740                           ;main.c: 115: PIR1bits.RCIF = 0;
 20741  003FCE  9A9E               	bcf	3998,5,c	;volatile
 20742  003FD0                     i2l61:
 20743                           
 20744                           ;main.c: 120: }
 20745                           ;main.c: 123: unsigned char cont;
 20746                           ;main.c: 125: if (TMR0IF && T0IF)
 20747  003FD0  B4F2               	btfsc	intcon,2,c	;volatile
 20748  003FD2  A4F2               	btfss	intcon,2,c	;volatile
 20749  003FD4  D036               	goto	i2l62
 20750                           
 20751                           ;main.c: 126: {
 20752                           ;main.c: 127: INTCONbits.TMR0IF = 0;
 20753  003FD6  94F2               	bcf	intcon,2,c	;volatile
 20754                           
 20755                           ;main.c: 128: sinaliza_int_timer = 1;
 20756  003FD8  0E01               	movlw	1
 20757  003FDA  6E44               	movwf	_sinaliza_int_timer,c
 20758                           
 20759                           ;main.c: 130: for(cont= 0; cont<2;cont++)
 20760  003FDC  0E00               	movlw	0
 20761  003FDE  6E19               	movwf	isr@cont,c
 20762  003FE0                     i2l8493:
 20763  003FE0  0E01               	movlw	1
 20764  003FE2  6419               	cpfsgt	isr@cont,c
 20765  003FE4  D001               	goto	i2l63
 20766  003FE6  D019               	goto	i2u1020_40
 20767  003FE8                     i2l63:
 20768                           
 20769                           ;main.c: 131: {
 20770                           ;main.c: 132: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 20771  003FE8  5019               	movf	isr@cont,w,c
 20772  003FEA  0D02               	mullw	2
 20773  003FEC  0EE7               	movlw	low _tempo_tarefa
 20774  003FEE  24F3               	addwf	prodl,w,c
 20775  003FF0  6ED9               	movwf	fsr2l,c
 20776  003FF2  0E00               	movlw	high _tempo_tarefa
 20777  003FF4  20F4               	addwfc	prodh,w,c
 20778  003FF6  6EDA               	movwf	fsr2h,c
 20779  003FF8  50DE               	movf	postinc2,w,c
 20780  003FFA  10DE               	iorwf	postinc2,w,c
 20781  003FFC  B4D8               	btfsc	status,2,c
 20782  003FFE  D00B               	goto	i2l65
 20783  004000  5019               	movf	isr@cont,w,c
 20784  004002  0D02               	mullw	2
 20785  004004  0EE7               	movlw	low _tempo_tarefa
 20786  004006  24F3               	addwf	prodl,w,c
 20787  004008  6ED9               	movwf	fsr2l,c
 20788  00400A  0E00               	movlw	high _tempo_tarefa
 20789  00400C  20F4               	addwfc	prodh,w,c
 20790  00400E  6EDA               	movwf	fsr2h,c
 20791  004010  06DE               	decf	postinc2,f,c
 20792  004012  0E00               	movlw	0
 20793  004014  5ADD               	subwfb	postdec2,f,c
 20794  004016                     i2l65:
 20795  004016  2A19               	incf	isr@cont,f,c
 20796  004018  D7E3               	goto	i2l8493
 20797  00401A                     i2u1020_40:
 20798                           
 20799                           ;main.c: 133: }
 20800                           ;main.c: 136: if(tarefa_em_execucao == 1)
 20801  00401A  0443               	decf	_tarefa_em_execucao,w,c	;volatile
 20802  00401C  A4D8               	btfss	status,2,c
 20803  00401E  D00B               	goto	i2l67
 20804                           
 20805                           ;main.c: 137: {
 20806                           ;main.c: 138: timeout_tarefa--;
 20807  004020  0638               	decf	_timeout_tarefa,f,c
 20808  004022  A0D8               	btfss	status,0,c
 20809  004024  0639               	decf	_timeout_tarefa+1,f,c
 20810                           
 20811                           ;main.c: 139: if(!timeout_tarefa)
 20812  004026  5038               	movf	_timeout_tarefa,w,c
 20813  004028  1039               	iorwf	_timeout_tarefa+1,w,c
 20814  00402A  A4D8               	btfss	status,2,c
 20815  00402C  D004               	goto	i2l67
 20816                           
 20817                           ;main.c: 140: {
 20818                           ;main.c: 142: PCLATH = 0;
 20819  00402E  0E00               	movlw	0
 20820  004030  6EFA               	movwf	pclath,c	;volatile
 20821                           
 20822                           ;main.c: 143: PCL = 0;
 20823  004032  0E00               	movlw	0
 20824  004034  6EF9               	movwf	pcl,c	;volatile
 20825  004036                     i2l67:
 20826                           
 20827                           ;main.c: 144: }
 20828                           ;main.c: 145: }
 20829                           ;main.c: 148: write_timer_zero(0x0083);
 20830  004036  0E00               	movlw	0
 20831  004038  6E02               	movwf	i2write_timer_zero@timer0+1,c
 20832  00403A  0E83               	movlw	131
 20833  00403C  6E01               	movwf	i2write_timer_zero@timer0,c
 20834  00403E  EC97  F02B         	call	i2_write_timer_zero	;wreg free
 20835  004042                     i2l62:
 20836                           
 20837                           ;main.c: 150: }
 20838                           ;main.c: 152: if (INT0IF && INT0IE)
 20839  004042  B2F2               	btfsc	intcon,1,c	;volatile
 20840  004044  A8F2               	btfss	intcon,4,c	;volatile
 20841  004046  D001               	goto	i2l68
 20842                           
 20843                           ;main.c: 153: {
 20844                           ;main.c: 154: INT0IF = 0;
 20845  004048  92F2               	bcf	intcon,1,c	;volatile
 20846  00404A                     i2l68:
 20847  00404A  C018  F049         	movff	??_isr+19,btemp+3
 20848  00404E  C017  F048         	movff	??_isr+18,btemp+2
 20849  004052  C016  F047         	movff	??_isr+17,btemp+1
 20850  004056  C015  F046         	movff	??_isr+16,btemp
 20851  00405A  C014  FFF5         	movff	??_isr+15,tablat
 20852  00405E  C013  FFF8         	movff	??_isr+14,tblptru
 20853  004062  C012  FFF7         	movff	??_isr+13,tblptrh
 20854  004066  C011  FFF6         	movff	??_isr+12,tblptrl
 20855  00406A  C010  FFF4         	movff	??_isr+11,prodh
 20856  00406E  C00F  FFF3         	movff	??_isr+10,prodl
 20857  004072  C00E  FFDA         	movff	??_isr+9,fsr2h
 20858  004076  C00D  FFD9         	movff	??_isr+8,fsr2l
 20859  00407A  C00C  FFE2         	movff	??_isr+7,fsr1h
 20860  00407E  C00B  FFE1         	movff	??_isr+6,fsr1l
 20861  004082  C00A  FFEA         	movff	??_isr+5,fsr0h
 20862  004086  C009  FFE9         	movff	??_isr+4,fsr0l
 20863  00408A  C008  FFFB         	movff	??_isr+3,pclatu
 20864  00408E  C007  FFFA         	movff	??_isr+2,pclath
 20865  004092  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20866  004094  0011               	retfie		f
 20867  004096                     __end_of_isr:
 20868                           	opt stack 0
 20869                           pclatu	equ	0xFFB
 20870                           pclath	equ	0xFFA
 20871                           pcl	equ	0xFF9
 20872                           tblptru	equ	0xFF8
 20873                           tblptrh	equ	0xFF7
 20874                           tblptrl	equ	0xFF6
 20875                           tablat	equ	0xFF5
 20876                           prodh	equ	0xFF4
 20877                           prodl	equ	0xFF3
 20878                           intcon	equ	0xFF2
 20879                           intcon2	equ	0xFF1
 20880                           intcon3	equ	0xFF0
 20881                           indf0	equ	0xFEF
 20882                           postinc0	equ	0xFEE
 20883                           fsr0h	equ	0xFEA
 20884                           fsr0l	equ	0xFE9
 20885                           wreg	equ	0xFE8
 20886                           indf1	equ	0xFE7
 20887                           postinc1	equ	0xFE6
 20888                           postdec1	equ	0xFE5
 20889                           plusw1	equ	0xFE3
 20890                           fsr1h	equ	0xFE2
 20891                           fsr1l	equ	0xFE1
 20892                           indf2	equ	0xFDF
 20893                           postinc2	equ	0xFDE
 20894                           postdec2	equ	0xFDD
 20895                           plusw2	equ	0xFDB
 20896                           fsr2h	equ	0xFDA
 20897                           fsr2l	equ	0xFD9
 20898                           status	equ	0xFD8
 20899                           
 20900 ;; *************** function i2_write_timer_zero *****************
 20901 ;; Defined at:
 20902 ;;		line 138 in file "bibliotecas/hardware.c"
 20903 ;; Parameters:    Size  Location     Type
 20904 ;;  timer0          2    0[COMRAM] unsigned int 
 20905 ;; Auto vars:     Size  Location     Type
 20906 ;;  write_timer_    2    2[COMRAM] struct Timers
 20907 ;; Return value:  Size  Location     Type
 20908 ;;                  1    wreg      void 
 20909 ;; Registers used:
 20910 ;;		None
 20911 ;; Tracked objects:
 20912 ;;		On entry : 0/0
 20913 ;;		On exit  : 0/0
 20914 ;;		Unchanged: 0/0
 20915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20916 ;;      Params:         2       0       0       0       0       0       0       0       0
 20917 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20918 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20919 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20920 ;;Total ram usage:        4 bytes
 20921 ;; Hardware stack levels used:    1
 20922 ;; This function calls:
 20923 ;;		Nothing
 20924 ;; This function is called by:
 20925 ;;		_isr
 20926 ;; This function uses a non-reentrant model
 20927 ;;
 20928                           
 20929                           	psect	text77
 20930  00572E                     __ptext77:
 20931                           	opt stack 0
 20932  00572E                     i2_write_timer_zero:
 20933                           	opt stack 14
 20934                           
 20935                           ;hardware.c: 140: union Timers timer;
 20936                           ;hardware.c: 142: timer.lt = timer0;
 20937                           
 20938                           ;incstack = 0
 20939  00572E  C001  F003         	movff	i2write_timer_zero@timer0,i2write_timer_zero@timer
 20940  005732  C002  F004         	movff	i2write_timer_zero@timer0+1,i2write_timer_zero@timer+1
 20941                           
 20942                           ;hardware.c: 144: TMR0H = timer.bt[1];
 20943  005736  C004  FFD7         	movff	i2write_timer_zero@timer+1,4055	;volatile
 20944                           
 20945                           ;hardware.c: 145: TMR0L = timer.bt[0];
 20946  00573A  C003  FFD6         	movff	i2write_timer_zero@timer,4054	;volatile
 20947  00573E  0012               	return		;funcret
 20948  005740                     __end_ofi2_write_timer_zero:
 20949                           	opt stack 0
 20950                           pclatu	equ	0xFFB
 20951                           pclath	equ	0xFFA
 20952                           pcl	equ	0xFF9
 20953                           tblptru	equ	0xFF8
 20954                           tblptrh	equ	0xFF7
 20955                           tblptrl	equ	0xFF6
 20956                           tablat	equ	0xFF5
 20957                           prodh	equ	0xFF4
 20958                           prodl	equ	0xFF3
 20959                           intcon	equ	0xFF2
 20960                           intcon2	equ	0xFF1
 20961                           intcon3	equ	0xFF0
 20962                           indf0	equ	0xFEF
 20963                           postinc0	equ	0xFEE
 20964                           fsr0h	equ	0xFEA
 20965                           fsr0l	equ	0xFE9
 20966                           wreg	equ	0xFE8
 20967                           indf1	equ	0xFE7
 20968                           postinc1	equ	0xFE6
 20969                           postdec1	equ	0xFE5
 20970                           plusw1	equ	0xFE3
 20971                           fsr1h	equ	0xFE2
 20972                           fsr1l	equ	0xFE1
 20973                           indf2	equ	0xFDF
 20974                           postinc2	equ	0xFDE
 20975                           postdec2	equ	0xFDD
 20976                           plusw2	equ	0xFDB
 20977                           fsr2h	equ	0xFDA
 20978                           fsr2l	equ	0xFD9
 20979                           status	equ	0xFD8
 20980                           
 20981 ;; *************** function _recebe_dado_uart *****************
 20982 ;; Defined at:
 20983 ;;		line 138 in file "bibliotecas/uart.c"
 20984 ;; Parameters:    Size  Location     Type
 20985 ;;		None
 20986 ;; Auto vars:     Size  Location     Type
 20987 ;;		None
 20988 ;; Return value:  Size  Location     Type
 20989 ;;                  1    wreg      unsigned char 
 20990 ;; Registers used:
 20991 ;;		wreg, status,2
 20992 ;; Tracked objects:
 20993 ;;		On entry : 0/0
 20994 ;;		On exit  : 0/0
 20995 ;;		Unchanged: 0/0
 20996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20997 ;;      Params:         0       0       0       0       0       0       0       0       0
 20998 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20999 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21000 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21001 ;;Total ram usage:        0 bytes
 21002 ;; Hardware stack levels used:    1
 21003 ;; This function calls:
 21004 ;;		Nothing
 21005 ;; This function is called by:
 21006 ;;		_isr
 21007 ;;		_recebe_string_uart
 21008 ;; This function uses a non-reentrant model
 21009 ;;
 21010                           
 21011                           	psect	text78
 21012  005740                     __ptext78:
 21013                           	opt stack 0
 21014  005740                     _recebe_dado_uart:
 21015                           	opt stack 14
 21016                           
 21017                           ;uart.c: 140: while(RCIF==0);
 21018                           
 21019                           ;incstack = 0
 21020  005740  AA9E               	btfss	3998,5,c	;volatile
 21021  005742  D7FE               	goto	_recebe_dado_uart
 21022                           
 21023                           ;uart.c: 141: if(RCSTAbits.OERR)
 21024  005744  A2AB               	btfss	4011,1,c	;volatile
 21025  005746  D003               	goto	i2l824
 21026                           
 21027                           ;uart.c: 142: {
 21028                           ;uart.c: 143: CREN = 0;
 21029  005748  98AB               	bcf	4011,4,c	;volatile
 21030                           
 21031                           ;uart.c: 144: __nop();
 21032  00574A  F000               	nop	
 21033                           
 21034                           ;uart.c: 145: CREN=1;
 21035  00574C  88AB               	bsf	4011,4,c	;volatile
 21036  00574E                     i2l824:
 21037                           
 21038                           ;uart.c: 146: }
 21039                           ;uart.c: 147: return(RCREG);
 21040  00574E  50AE               	movf	4014,w,c	;volatile
 21041  005750  0012               	return	
 21042  005752                     __end_of_recebe_dado_uart:
 21043                           	opt stack 0
 21044                           pclatu	equ	0xFFB
 21045                           pclath	equ	0xFFA
 21046                           pcl	equ	0xFF9
 21047                           tblptru	equ	0xFF8
 21048                           tblptrh	equ	0xFF7
 21049                           tblptrl	equ	0xFF6
 21050                           tablat	equ	0xFF5
 21051                           prodh	equ	0xFF4
 21052                           prodl	equ	0xFF3
 21053                           intcon	equ	0xFF2
 21054                           intcon2	equ	0xFF1
 21055                           intcon3	equ	0xFF0
 21056                           indf0	equ	0xFEF
 21057                           postinc0	equ	0xFEE
 21058                           fsr0h	equ	0xFEA
 21059                           fsr0l	equ	0xFE9
 21060                           wreg	equ	0xFE8
 21061                           indf1	equ	0xFE7
 21062                           postinc1	equ	0xFE6
 21063                           postdec1	equ	0xFE5
 21064                           plusw1	equ	0xFE3
 21065                           fsr1h	equ	0xFE2
 21066                           fsr1l	equ	0xFE1
 21067                           indf2	equ	0xFDF
 21068                           postinc2	equ	0xFDE
 21069                           postdec2	equ	0xFDD
 21070                           plusw2	equ	0xFDB
 21071                           fsr2h	equ	0xFDA
 21072                           fsr2l	equ	0xFD9
 21073                           status	equ	0xFD8
 21074                           pclatu	equ	0xFFB
 21075                           pclath	equ	0xFFA
 21076                           pcl	equ	0xFF9
 21077                           tblptru	equ	0xFF8
 21078                           tblptrh	equ	0xFF7
 21079                           tblptrl	equ	0xFF6
 21080                           tablat	equ	0xFF5
 21081                           prodh	equ	0xFF4
 21082                           prodl	equ	0xFF3
 21083                           intcon	equ	0xFF2
 21084                           intcon2	equ	0xFF1
 21085                           intcon3	equ	0xFF0
 21086                           indf0	equ	0xFEF
 21087                           postinc0	equ	0xFEE
 21088                           fsr0h	equ	0xFEA
 21089                           fsr0l	equ	0xFE9
 21090                           wreg	equ	0xFE8
 21091                           indf1	equ	0xFE7
 21092                           postinc1	equ	0xFE6
 21093                           postdec1	equ	0xFE5
 21094                           plusw1	equ	0xFE3
 21095                           fsr1h	equ	0xFE2
 21096                           fsr1l	equ	0xFE1
 21097                           indf2	equ	0xFDF
 21098                           postinc2	equ	0xFDE
 21099                           postdec2	equ	0xFDD
 21100                           plusw2	equ	0xFDB
 21101                           fsr2h	equ	0xFDA
 21102                           fsr2l	equ	0xFD9
 21103                           status	equ	0xFD8
 21104                           
 21105                           	psect	rparam
 21106  0000                     pclatu	equ	0xFFB
 21107                           pclath	equ	0xFFA
 21108                           pcl	equ	0xFF9
 21109                           tblptru	equ	0xFF8
 21110                           tblptrh	equ	0xFF7
 21111                           tblptrl	equ	0xFF6
 21112                           tablat	equ	0xFF5
 21113                           prodh	equ	0xFF4
 21114                           prodl	equ	0xFF3
 21115                           intcon	equ	0xFF2
 21116                           intcon2	equ	0xFF1
 21117                           intcon3	equ	0xFF0
 21118                           indf0	equ	0xFEF
 21119                           postinc0	equ	0xFEE
 21120                           fsr0h	equ	0xFEA
 21121                           fsr0l	equ	0xFE9
 21122                           wreg	equ	0xFE8
 21123                           indf1	equ	0xFE7
 21124                           postinc1	equ	0xFE6
 21125                           postdec1	equ	0xFE5
 21126                           plusw1	equ	0xFE3
 21127                           fsr1h	equ	0xFE2
 21128                           fsr1l	equ	0xFE1
 21129                           indf2	equ	0xFDF
 21130                           postinc2	equ	0xFDE
 21131                           postdec2	equ	0xFDD
 21132                           plusw2	equ	0xFDB
 21133                           fsr2h	equ	0xFDA
 21134                           fsr2l	equ	0xFD9
 21135                           status	equ	0xFD8
 21136                           
 21137                           	psect	temp
 21138  000046                     btemp:
 21139                           	opt stack 0
 21140  000046                     	ds	1
 21141  0000                     int$flags	set	btemp
 21142  0000                     wtemp6	set	btemp+1
 21143                           pclatu	equ	0xFFB
 21144                           pclath	equ	0xFFA
 21145                           pcl	equ	0xFF9
 21146                           tblptru	equ	0xFF8
 21147                           tblptrh	equ	0xFF7
 21148                           tblptrl	equ	0xFF6
 21149                           tablat	equ	0xFF5
 21150                           prodh	equ	0xFF4
 21151                           prodl	equ	0xFF3
 21152                           intcon	equ	0xFF2
 21153                           intcon2	equ	0xFF1
 21154                           intcon3	equ	0xFF0
 21155                           indf0	equ	0xFEF
 21156                           postinc0	equ	0xFEE
 21157                           fsr0h	equ	0xFEA
 21158                           fsr0l	equ	0xFE9
 21159                           wreg	equ	0xFE8
 21160                           indf1	equ	0xFE7
 21161                           postinc1	equ	0xFE6
 21162                           postdec1	equ	0xFE5
 21163                           plusw1	equ	0xFE3
 21164                           fsr1h	equ	0xFE2
 21165                           fsr1l	equ	0xFE1
 21166                           indf2	equ	0xFDF
 21167                           postinc2	equ	0xFDE
 21168                           postdec2	equ	0xFDD
 21169                           plusw2	equ	0xFDB
 21170                           fsr2h	equ	0xFDA
 21171                           fsr2l	equ	0xFD9
 21172                           status	equ	0xFD8


Data Sizes:
    Strings     152
    Constant    152
    Data        39
    BSS         845
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      69
    BANK0           160    135     160
    BANK1           256     26     233
    BANK2           256    103     173
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> fil(BANK1[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> fil(BANK1[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> fil(BANK1[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> fil(BANK1[32]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> SDCard@bw(BANK1[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 8
		 -> STR_11(CODE[8]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[8]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), STR_10(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> fil(BANK1[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK2[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), STR_10(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), STR_10(CODE[1]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> fil(BANK1[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> fil(BANK1[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[558]), 

    FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK1[2]), f_mount@path(BANK0[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK2[22]), f_mount@fs(BANK0[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), STR_10(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), STR_10(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK1[2]), f_mount@path(BANK0[2]), f_mount@rp(BANK0[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK2[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK2[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), STR_10(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK2[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK2[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK2[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), STR_10(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK2[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK2[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK2[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK2[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK2[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK2[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK2[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK2[22]), 

    S1846$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK2[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK2[12]), 

    S1846$dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    S1846$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK2[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[558]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[558]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_20(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK2[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK2[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK2[12]), NULL(NULL[0]), fs(BIGRAM[558]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK2[12]), NULL(NULL[0]), fs(BIGRAM[558]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK2[12]), NULL(NULL[0]), STR_11(CODE[8]), fs(BIGRAM[558]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK2[12]), NULL(NULL[0]), STR_11(CODE[8]), fs(BIGRAM[558]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[558]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[558]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 17
		 -> escreve_inteiro_lcd@texto(BANK0[7]), STR_18(CODE[11]), STR_17(CODE[10]), STR_16(CODE[16]), 
		 -> STR_15(CODE[16]), STR_14(CODE[11]), STR_13(CODE[17]), STR_12(CODE[11]), 
		 -> STR_5(CODE[5]), gps@gps_buffer(COMRAM[15]), dado_buffer(BANK0[7]), STR_2(CODE[6]), 
		 -> data_buffer(BANK1[15]), STR_1(CODE[6]), mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), STR_11(CODE[8]), fs(BIGRAM[558]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), STR_11(CODE[8]), fs(BIGRAM[558]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    open_append@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    open_append@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    open_append@path	PTR const unsigned char  size(2) Largest target is 15
		 -> filename(BANK1[15]), 

    open_append@fp	PTR struct . size(2) Largest target is 34
		 -> fil(BANK1[32]), 

    S485$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    S485$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), fs(BIGRAM[558]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    sp__memset	PTR void  size(2) Largest target is 15
		 -> gps@gps_buffer(COMRAM[15]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _inicializa_SPI->_posicao_cursor_lcd
    _escreve_cmd_lcd->_delay
    _create_name->_mem_set
    _sync_fs->_disk_write
    _f_write->_disk_write
    _validate->_disk_status
    _clust2sect->___lmul
    _disk_status->_sdc_disk_status
    _sdc_disk_initialize->_escreve_inteiro_lcd
    _sdc_reset->_command
    _sync_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_escreve_inteiro_lcd
    _sdc_disk_read->_command
    _proceed->_WriteSPI_
    _command->_dummy_clocks
    _command->_wait_ready
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _f_open->_dir_register
    _f_open->_follow_path
    _remove_chain->_put_fat
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_lseek->_create_chain
    _f_close->_f_sync
    _f_sync->_move_window
    _f_sync->_sync_fs
    _sync_fs->_sync_window
    _f_write->_create_chain
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_escreve_inteiro_lcd
    _check_fs->_move_window
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_sdc_disk_write
    _disk_read->_escreve_inteiro_lcd
    _escreve_inteiro_lcd->_itoa

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_SDCard
    _SDCard->_open_append
    _open_append->_f_lseek
    _f_open->_follow_path

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _SDCard->_f_open
    _open_append->_f_open
    _f_open->_find_volume
    _f_mount->_find_volume

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1380354
                             _SDCard
                        _escalonador
                     _inicializa_SPI
                 _inicializa_tarefas
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    4663
                                             31 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             28 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     195
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     195
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     4     2      2     195
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_SPI                                       3     1      2    4763
                                             31 COMRAM     2     0      2
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0     134
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SDCard                                               7     7      0 1369986
                                             22 BANK1      4     4      0
              _escreve_frase_ram_lcd
                            _f_close
                            _f_mount
                             _f_open
                            _f_write
                        _open_append
                 _posicao_cursor_lcd
                            _proceed
 ---------------------------------------------------------------------------------
 (2) _open_append                                          5     1      4  638371
                                             17 BANK1      5     1      4
                            _f_close
                            _f_lseek
                             _f_open
 ---------------------------------------------------------------------------------
 (3) _f_open                                              54    49      5  509970
                                              4 BANK1      9     4      5
                                             58 BANK2     45    45      0
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (4) _remove_chain                                        15     9      6   52547
                                             82 BANK0     15     9      6
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (4) _follow_path                                          9     5      4  180392
                                            130 BANK0      5     1      4
                                              0 BANK1      4     4      0
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (4) _ld_clust                                            14    10      4     670
                                             25 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (5) _dir_find                                             6     4      2  145643
                                            124 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (6) _mem_cmp                                             15     9      6     468
                                             25 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (5) _create_name                                         23    19      4    3483
                                             33 COMRAM     8     4      4
                                              0 BANK0     15    15      0
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (6) _chk_chr                                              6     2      4     307
                                             25 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dir_register                                         3     1      2  171930
                                            134 BANK0      1     1      0
                                              0 BANK1      2     0      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _dir_alloc                                           10     6      4  145203
                                            124 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _dir_sdi                                             21    17      4   29605
                                             81 BANK0     21    17      4
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (6) _dir_next                                            19    15      4   91505
                                            105 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (3) _f_lseek                                             35    29      6   86956
                                            105 BANK0     18    12      6
                                              0 BANK1     17    17      0
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_close                                              3     1      2   41035
                                             64 BANK0      3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (4) _f_sync                                               9     7      2   39791
                                             55 BANK0      9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (5) _sync_fs                                             11     9      2   14225
                                             44 BANK0     11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (7) _mem_set                                              8     2      6    1210
                                             25 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_ioctl                                           7     4      3     304
                                             25 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (4) _st_clust                                             6     0      6     484
                                             25 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _f_write                                             40    32      8   97441
                                            105 BANK0     24    16      8
                                              0 BANK1     16    16      0
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (4) _validate                                             8     6      2     896
                                             32 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (5) _mem_cpy                                             12     6      6    1619
                                             25 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (7) _create_chain                                        23    17      6   54026
                                             82 BANK0     23    17      6
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (5) _put_fat                                             27    17     10   25968
                                             55 BANK0     27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _get_fat                                             26    20      6   25820
                                             55 BANK0     26    20      6
                        _move_window
 ---------------------------------------------------------------------------------
 (6) _clust2sect                                          11     5      6    2170
                                             37 COMRAM     6     0      6
                                              0 BANK0      5     5      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _f_mount                                             12     7      5   78983
                                             78 BANK0     12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (4) _find_volume                                         71    66      5   77457
                                             65 BANK0     13     8      5
                                              0 BANK2     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _get_ldnumber                                        14    12      2     737
                                             25 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (5) _disk_status                                          5     5      0     226
                                             27 COMRAM     5     5      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_status                                      4     4      0      34
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _disk_initialize                                      4     4      0   22052
                                             26 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (6) _sdc_disk_initialize                                 13    13      0   21922
                                             13 BANK0     13    13      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (7) _sdc_reset                                           20    20      0    7359
                                             37 COMRAM     7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (5) _check_fs                                            10     4      6   24069
                                             55 BANK0     10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (6) _move_window                                         11     5      6   23492
                                             44 BANK0     11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (7) _sync_window                                         21    19      2    6540
                                             23 BANK0     21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (8) _disk_write                                          12     5      7    5455
                                             44 COMRAM     1     1      0
                                             12 BANK0     11     4      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (9) _sdc_disk_write                                      19    12      7    3991
                                             37 COMRAM     7     0      7
                                              0 BANK0     12    12      0
                           _ReadSPI_
                          _WriteSPI_
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (7) _disk_read                                           13     6      7   13570
                                             13 BANK0     13     6      7
                _escreve_inteiro_lcd
                 _posicao_cursor_lcd
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (8) _sdc_disk_read                                       24    17      7    4090
                                             37 COMRAM     7     0      7
                                              0 BANK0     12    12      0
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (10) _response                                            1     1      0      34
                                             25 COMRAM     1     1      0
                           _ReadSPI_
 ---------------------------------------------------------------------------------
 (2) _proceed                                              0     0      0      34
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (10) _command                                             7     2      5    3043
                                             30 COMRAM     7     2      5
                          _WriteSPI_
                       _dummy_clocks
                         _wait_ready
 ---------------------------------------------------------------------------------
 (11) _wait_ready                                         15    15      0      99
                                             25 COMRAM     5     5      0
                           _ReadSPI_
 ---------------------------------------------------------------------------------
 (10) _dummy_clocks                                        5     5      0      68
                                             25 COMRAM     5     5      0
                           _ReadSPI_
 ---------------------------------------------------------------------------------
 (11) _ReadSPI_                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _WriteSPI_                                            2     2      0      34
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    2217
                                             28 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (8) _escreve_inteiro_lcd                                  9     7      2    6305
                                             43 COMRAM     2     0      2
                                              6 BANK0      7     7      0
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (9) _itoa                                                 8     2      6    3936
                                             41 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                               _utoa
 ---------------------------------------------------------------------------------
 (10) _utoa                                                9     3      6    3163
                                             32 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4    1132
                                             25 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) ___lwdiv                                             7     3      4    1321
                                             25 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    1889
                                             28 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             27 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     932
                                             25 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    1525
                                             25 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                21    21      0     183
                                              4 COMRAM    21    21      0
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SDCard
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _f_close
       _f_sync
         _move_window
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _WriteSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
           _sync_window
             _disk_write
               _sdc_disk_write
                 _ReadSPI_
                 _WriteSPI_
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
         _st_clust
         _sync_fs
           _disk_ioctl
           _disk_write
             _sdc_disk_write
               _ReadSPI_
               _WriteSPI_
               _command
                 _WriteSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
           _mem_set
           _sync_window
             _disk_write
               _sdc_disk_write
                 _ReadSPI_
                 _WriteSPI_
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
         _validate
           _disk_status
             _sdc_disk_status
       _validate
         _disk_status
           _sdc_disk_status
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
         _disk_initialize
           _sdc_disk_initialize
             _command
               _WriteSPI_
               _dummy_clocks
                 _ReadSPI_
               _wait_ready
                 _ReadSPI_
             _dummy_clocks
               _ReadSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _ReadSPI_
             _sdc_reset
               _command
                 _WriteSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _wait_ready
                   _ReadSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
         _disk_status
           _sdc_disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _WriteSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
           _sync_window
             _disk_write
               _sdc_disk_write
                 _ReadSPI_
                 _WriteSPI_
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
       _get_ldnumber
     _f_open
       _dir_register
         _dir_alloc
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _ReadSPI_
                         _WriteSPI_
                         _command
                           _WriteSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _wait_ready
                             _ReadSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _proceed
                           _WriteSPI_
                         _response
                           _ReadSPI_
               _put_fat
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _ReadSPI_
                         _WriteSPI_
                         _command
                           _WriteSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _wait_ready
                             _ReadSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _proceed
                           _WriteSPI_
                         _response
                           _ReadSPI_
             _get_fat
               _move_window
                 _disk_read
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _sdc_disk_read
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _ReadSPI_
                       _WriteSPI_
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
             _mem_set
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _sdc_disk_read
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _ReadSPI_
                       _WriteSPI_
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _WriteSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
           _sync_window
             _disk_write
               _sdc_disk_write
                 _ReadSPI_
                 _WriteSPI_
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
         _disk_initialize
           _sdc_disk_initialize
             _command
               _WriteSPI_
               _dummy_clocks
                 _ReadSPI_
               _wait_ready
                 _ReadSPI_
             _dummy_clocks
               _ReadSPI_
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _proceed
               _WriteSPI_
             _response
               _ReadSPI_
             _sdc_reset
               _command
                 _WriteSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _wait_ready
                   _ReadSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
         _disk_status
           _sdc_disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _WriteSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
           _sync_window
             _disk_write
               _sdc_disk_write
                 _ReadSPI_
                 _WriteSPI_
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
       _follow_path
         _create_name
           _chk_chr
           _mem_set
         _dir_find
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _ReadSPI_
                         _WriteSPI_
                         _command
                           _WriteSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _wait_ready
                             _ReadSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _proceed
                           _WriteSPI_
                         _response
                           _ReadSPI_
               _put_fat
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _ReadSPI_
                         _WriteSPI_
                         _command
                           _WriteSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _wait_ready
                             _ReadSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _proceed
                           _WriteSPI_
                         _response
                           _ReadSPI_
             _get_fat
               _move_window
                 _disk_read
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _sdc_disk_read
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _ReadSPI_
                       _WriteSPI_
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
             _mem_set
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _sdc_disk_read
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _ReadSPI_
                       _WriteSPI_
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
           _mem_cmp
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _ReadSPI_
                     _WriteSPI_
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
         _ld_clust
       _ld_clust
       _move_window
         _disk_read
           _escreve_inteiro_lcd
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _sdc_disk_read
             _command
               _WriteSPI_
               _dummy_clocks
                 _ReadSPI_
               _wait_ready
                 _ReadSPI_
             _dummy_clocks
               _ReadSPI_
             _proceed
               _WriteSPI_
             _response
               _ReadSPI_
         _sync_window
           _disk_write
             _sdc_disk_write
               _ReadSPI_
               _WriteSPI_
               _command
                 _WriteSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
       _remove_chain
         _get_fat
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
         _put_fat
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
       _st_clust
     _f_write
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
         _put_fat
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
       _disk_write
         _sdc_disk_write
           _ReadSPI_
           _WriteSPI_
           _command
             _WriteSPI_
             _dummy_clocks
               _ReadSPI_
             _wait_ready
               _ReadSPI_
           _dummy_clocks
             _ReadSPI_
           _proceed
             _WriteSPI_
           _response
             _ReadSPI_
       _mem_cpy
       _move_window
         _disk_read
           _escreve_inteiro_lcd
             _escreve_frase_ram_lcd
               _escreve_caractere_lcd
                 _delay
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _posicao_cursor_lcd
             _endereco_cursor_lcd
               _delay
           _sdc_disk_read
             _command
               _WriteSPI_
               _dummy_clocks
                 _ReadSPI_
               _wait_ready
                 _ReadSPI_
             _dummy_clocks
               _ReadSPI_
             _proceed
               _WriteSPI_
             _response
               _ReadSPI_
         _sync_window
           _disk_write
             _sdc_disk_write
               _ReadSPI_
               _WriteSPI_
               _command
                 _WriteSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
       _sync_window
         _disk_write
           _sdc_disk_write
             _ReadSPI_
             _WriteSPI_
             _command
               _WriteSPI_
               _dummy_clocks
                 _ReadSPI_
               _wait_ready
                 _ReadSPI_
             _dummy_clocks
               _ReadSPI_
             _proceed
               _WriteSPI_
             _response
               _ReadSPI_
       _validate
         _disk_status
           _sdc_disk_status
     _open_append
       _f_close
         _f_sync
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
           _st_clust
           _sync_fs
             _disk_ioctl
             _disk_write
               _sdc_disk_write
                 _ReadSPI_
                 _WriteSPI_
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _mem_set
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
           _validate
             _disk_status
               _sdc_disk_status
         _validate
           _disk_status
             _sdc_disk_status
       _f_lseek
         ___lldiv
         _clust2sect
           ___lmul
         _create_chain
           _get_fat
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _ReadSPI_
                     _WriteSPI_
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
           _put_fat
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _ReadSPI_
                     _WriteSPI_
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
         _get_fat
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
         _validate
           _disk_status
             _sdc_disk_status
       _f_open
         _dir_register
           _dir_alloc
             _dir_next
               _clust2sect
                 ___lmul
               _create_chain
                 _get_fat
                   _move_window
                     _disk_read
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _sdc_disk_read
                         _command
                           _WriteSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _wait_ready
                             _ReadSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _proceed
                           _WriteSPI_
                         _response
                           _ReadSPI_
                     _sync_window
                       _disk_write
                         _sdc_disk_write
                           _ReadSPI_
                           _WriteSPI_
                           _command
                             _WriteSPI_
                             _dummy_clocks
                               _ReadSPI_
                             _wait_ready
                               _ReadSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _proceed
                             _WriteSPI_
                           _response
                             _ReadSPI_
                 _put_fat
                   _move_window
                     _disk_read
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _sdc_disk_read
                         _command
                           _WriteSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _wait_ready
                             _ReadSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _proceed
                           _WriteSPI_
                         _response
                           _ReadSPI_
                     _sync_window
                       _disk_write
                         _sdc_disk_write
                           _ReadSPI_
                           _WriteSPI_
                           _command
                             _WriteSPI_
                             _dummy_clocks
                               _ReadSPI_
                             _wait_ready
                               _ReadSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _proceed
                             _WriteSPI_
                           _response
                             _ReadSPI_
               _get_fat
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _ReadSPI_
                         _WriteSPI_
                         _command
                           _WriteSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _wait_ready
                             _ReadSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _proceed
                           _WriteSPI_
                         _response
                           _ReadSPI_
               _mem_set
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _ReadSPI_
                     _WriteSPI_
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
             _dir_sdi
               _clust2sect
                 ___lmul
               _get_fat
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _ReadSPI_
                         _WriteSPI_
                         _command
                           _WriteSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _wait_ready
                             _ReadSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _proceed
                           _WriteSPI_
                         _response
                           _ReadSPI_
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _ReadSPI_
                     _WriteSPI_
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
           _mem_cpy
           _mem_set
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
         _find_volume
           ___lldiv
           ___lmul
           _check_fs
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _ReadSPI_
                     _WriteSPI_
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
           _disk_initialize
             _sdc_disk_initialize
               _command
                 _WriteSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
               _sdc_reset
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
           _disk_status
             _sdc_disk_status
           _get_ldnumber
           _move_window
             _disk_read
               _escreve_inteiro_lcd
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
               _sdc_disk_read
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
             _sync_window
               _disk_write
                 _sdc_disk_write
                   _ReadSPI_
                   _WriteSPI_
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
         _follow_path
           _create_name
             _chk_chr
             _mem_set
           _dir_find
             _dir_next
               _clust2sect
                 ___lmul
               _create_chain
                 _get_fat
                   _move_window
                     _disk_read
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _sdc_disk_read
                         _command
                           _WriteSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _wait_ready
                             _ReadSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _proceed
                           _WriteSPI_
                         _response
                           _ReadSPI_
                     _sync_window
                       _disk_write
                         _sdc_disk_write
                           _ReadSPI_
                           _WriteSPI_
                           _command
                             _WriteSPI_
                             _dummy_clocks
                               _ReadSPI_
                             _wait_ready
                               _ReadSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _proceed
                             _WriteSPI_
                           _response
                             _ReadSPI_
                 _put_fat
                   _move_window
                     _disk_read
                       _escreve_inteiro_lcd
                         _escreve_frase_ram_lcd
                           _escreve_caractere_lcd
                             _delay
                         _itoa
                           _utoa
                             ___lwdiv
                             ___lwmod
                       _posicao_cursor_lcd
                         _endereco_cursor_lcd
                           _delay
                       _sdc_disk_read
                         _command
                           _WriteSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _wait_ready
                             _ReadSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _proceed
                           _WriteSPI_
                         _response
                           _ReadSPI_
                     _sync_window
                       _disk_write
                         _sdc_disk_write
                           _ReadSPI_
                           _WriteSPI_
                           _command
                             _WriteSPI_
                             _dummy_clocks
                               _ReadSPI_
                             _wait_ready
                               _ReadSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _proceed
                             _WriteSPI_
                           _response
                             _ReadSPI_
               _get_fat
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _ReadSPI_
                         _WriteSPI_
                         _command
                           _WriteSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _wait_ready
                             _ReadSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _proceed
                           _WriteSPI_
                         _response
                           _ReadSPI_
               _mem_set
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _ReadSPI_
                     _WriteSPI_
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
             _dir_sdi
               _clust2sect
                 ___lmul
               _get_fat
                 _move_window
                   _disk_read
                     _escreve_inteiro_lcd
                       _escreve_frase_ram_lcd
                         _escreve_caractere_lcd
                           _delay
                       _itoa
                         _utoa
                           ___lwdiv
                           ___lwmod
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _sdc_disk_read
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
                   _sync_window
                     _disk_write
                       _sdc_disk_write
                         _ReadSPI_
                         _WriteSPI_
                         _command
                           _WriteSPI_
                           _dummy_clocks
                             _ReadSPI_
                           _wait_ready
                             _ReadSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _proceed
                           _WriteSPI_
                         _response
                           _ReadSPI_
             _mem_cmp
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _ReadSPI_
                     _WriteSPI_
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _escreve_inteiro_lcd
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _itoa
                       _utoa
                         ___lwdiv
                         ___lwmod
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _sdc_disk_read
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
                 _sync_window
                   _disk_write
                     _sdc_disk_write
                       _ReadSPI_
                       _WriteSPI_
                       _command
                         _WriteSPI_
                         _dummy_clocks
                           _ReadSPI_
                         _wait_ready
                           _ReadSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _proceed
                         _WriteSPI_
                       _response
                         _ReadSPI_
           _ld_clust
         _ld_clust
         _move_window
           _disk_read
             _escreve_inteiro_lcd
               _escreve_frase_ram_lcd
                 _escreve_caractere_lcd
                   _delay
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _posicao_cursor_lcd
               _endereco_cursor_lcd
                 _delay
             _sdc_disk_read
               _command
                 _WriteSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _wait_ready
                   _ReadSPI_
               _dummy_clocks
                 _ReadSPI_
               _proceed
                 _WriteSPI_
               _response
                 _ReadSPI_
           _sync_window
             _disk_write
               _sdc_disk_write
                 _ReadSPI_
                 _WriteSPI_
                 _command
                   _WriteSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _wait_ready
                     _ReadSPI_
                 _dummy_clocks
                   _ReadSPI_
                 _proceed
                   _WriteSPI_
                 _response
                   _ReadSPI_
         _remove_chain
           _get_fat
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _ReadSPI_
                     _WriteSPI_
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
           _put_fat
             _move_window
               _disk_read
                 _escreve_inteiro_lcd
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _sdc_disk_read
                   _command
                     _WriteSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _wait_ready
                       _ReadSPI_
                   _dummy_clocks
                     _ReadSPI_
                   _proceed
                     _WriteSPI_
                   _response
                     _ReadSPI_
               _sync_window
                 _disk_write
                   _sdc_disk_write
                     _ReadSPI_
                     _WriteSPI_
                     _command
                       _WriteSPI_
                       _dummy_clocks
                         _ReadSPI_
                       _wait_ready
                         _ReadSPI_
                     _dummy_clocks
                       _ReadSPI_
                     _proceed
                       _WriteSPI_
                     _response
                       _ReadSPI_
         _st_clust
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay
     _proceed
       _WriteSPI_
   _escalonador
   _inicializa_SPI
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay
   _inicializa_tarefas
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     67      AD       9       67.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1A      E9       7       91.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     87      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27B      20        0.0%
DATA                 0      0     4A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 08 01:09:24 2022

      __end_of_mensagem_inicial 4EA2                     get_fat@clst 0099                    create_name@b 0064  
                  create_name@c 006E                    create_name@d 0067                    create_name@i 006C  
                  create_name@p 0068                     _SSPSTATbits 000FC7                get_ldnumber@path 001A  
              ??_init_interrupt 001A                              l75 4EAE                              l83 5564  
                            l77 4F16    __size_of_escreve_inteiro_lcd 003E                              _fs 02AD  
                ??_dir_register 002E                disk_write@sector 006E                    ?_escalonador 0001  
                 create_name@dp 0022                   create_name@ni 0065                   create_name@si 0062  
                create_chain@cs 00C5                  create_chain@fs 00B2                disk_write@result 0074  
                           l400 546C                             l412 45EC                             l420 4D0E  
                           l404 54E8                             l253 552A                             l501 3F5E  
                           l413 454A                             l421 4CA6                             l405 54CC  
                           l254 551E                             l262 5584                             l270 51C0  
                           l510 4182                             l351 577A                             l271 51BA  
                           l415 457C                             l423 4CD8                             l407 54D8  
                           l431 5630                             l600 4FB0                             l416 45E8  
                           l424 4D0A                             l408 54E4                             l432 5634  
                           l601 4FB2                             l441 4976                             l610 4FEE  
                           l602 4FBA                             l506 40F2                             l442 498C  
                           l450 29CC                             l611 4FF0                             l603 4FBC  
                           l515 56F4                             l604 4FD0                             l508 4126  
                           l436 48FC                             l428 5638                             l605 4FD2  
                           l357 5728                             l437 491A                             l429 562C  
                           l606 4FDA                             l630 52B0                             l454 2B68  
                           l470 2B58                             l462 2AB8                             l550 4C3A  
                           l535 5684                             l607 4FDC                             l455 2A00  
                           l447 29AA                             l551 4C42                             l608 4FE4  
                           l480 2C48                             l456 2A0A                             l448 29C0  
                           l560 4C78                             l552 4C44                             l537 5692  
                           l609 4FE6                             l473 2B96                             l457 2A32  
                           l553 4C58                             l545 4C24                             l570 50FC  
                           l490 3EA6                             l474 2BBE                             l554 4C5A  
                           l546 4C26                             l571 5104                             l555 4C62  
                           l547 4C2E                             l580 513A                             l572 5106  
                           l484 2C88                             l396 5470                             l556 4C64  
                           l548 4C30                             l629 52D8                             l573 511A  
                           l493 3EDE                             l901 4A3A                             l397 544E  
                           l557 4C6C                             l549 4C38                             l574 511C  
                           l590 50A4                             l902 4A1C                             l558 4C6E  
                           l575 5124                             l567 50F0                             l591 50B2  
                           l495 3EFA                             l479 2C20                             l399 545A  
                           l559 4C76                             l576 5126                             l568 50F2  
                           l584 50D8                             l496 3EF2                             l912 465E  
                           l920 2922                             l577 512E                             l569 50FA  
                           l585 50B8                             l489 3EBA                             l921 2610  
                           l578 5130                             l586 507C                             l498 3F26  
                           l579 5138                             l587 50D4                             l499 3F0E  
                           l923 2940                             l931 284E                             l907 371A  
                           l596 4F9C                             l588 5088                             l860 472C  
                           l908 3744                             l597 4F9E                             l589 5096  
                           l933 2910                             l941 21C6                             l861 46D6  
                           l598 4FA6                             l926 2770                             l942 1E14  
                           l870 55B4                             l599 4FA8                             l951 1FE0  
                           l863 476C                             l928 278E                             l944 21E4  
                           l864 473A                             l929 2798                             l954 2016  
                           l946 1ECA                             l970 3D72                             l883 5306  
                           l971 3D8A                             l892 3956                             l956 20C2  
                           l948 1EFE                             l884 5302                             l876 5016  
                           l981 2DB8                             l869 55C4                             l973 3E04  
                           l958 21C0                             l990 2EC0                             l982 2D52  
                           l966 3E14                             l991 2E94                             l967 3D28  
                           l984 2D76                             l985 2DA8                             l977 2D02  
                           l986 2DC8                             l995 2F32                             l996 2F9A  
                           l988 2E2A                             _PCL 000FF9                             _PR2 000FCB  
                           _E_W 0041                             _fil 0179                ??_init_oscilador 001A  
                           _n_s 0042                             _isr 0008                    disk_read@res 0079  
                           prod 000FF3                  ??_create_chain 00B8                             wreg 000FE8  
     __size_of_write_timer_zero 0012                  create_name@sfn 006A                 create_chain@ncl 00C1  
               create_chain@scl 00BD                 create_chain@res 00BC                     ld_clust@dir 001C  
       ??_escreve_frase_ram_lcd 001F                            l1000 2FB2                            l1002 2FBA  
                          l1010 33C6                            l1011 33A0                            l1020 34EA  
                          l1012 34BC                            l1013 347C                            l1005 3320  
                          l1014 33EC                            l1110 31E4                            l1102 31A0  
                          l1031 1D7C                            l1023 1A0A                            l1015 3438  
                          l1111 31F6                            l1040 1CD6                            l1032 1B16  
                          l1016 3474                            l1120 328E                            l1041 1C7C  
                          l1033 1B2C                            l1009 3370                            l1113 3208  
                          l2002 529A                            l1210 074C                            l1202 0498  
                          l1034 1D1E                            l1042 1CB2                            l1050 4344  
                          l2003 52A4                            l1203 04E2                            l1035 1B60  
                          l1115 3248                            l2012 53BA                            l1212 07CE  
                          l1204 0502                            l1300 0CE6                            l1036 1BB2  
                          l1028 1A70                            l1132 38DC                            l2013 53C4  
                          l1205 0584                            l1037 1BC2                            l1141 38A0  
                          l1133 3870                            l1125 379C                            l1214 08CE  
                          l1206 0614                            l1230 47D2                            l1222 4C10  
                          l1310 0F58                            l1038 1BD8                            l1054 434C  
                          l1118 3260                            l1207 062E                            l1231 47E6  
                          l1311 1070                            l1303 0D14                            l1039 1BF6  
                          l1055 4376                            l1047 42B0                            l1119 327C  
                          l1071 4404                            l2008 53A2                            l1216 090C  
                          l1208 0644                            l1232 4812                            l1312 1246  
                          l1304 0D3C                            l1080 2FE4                            l1072 4444  
                          l1128 380C                            l1240 21F6                            l2009 539A  
                          l1161 41E8                            l1145 3CE6                            l1217 096E  
                          l1209 07B4                            l1313 1110                            l1305 0D8E  
                          l1081 2FDE                            l1146 3BD0                            l1170 0066  
                          l1314 10EC                            l1306 0DF8                            l1322 3BA2  
                          l1066 439E                            l1163 4208                            l1155 3CDE  
                          l1147 3BCC                            l1219 0AD8                            l1315 1186  
                          l1307 0E5C                            l1331 1316                            l1091 30F0  
                          l1083 307C                            l1059 4E16                            l1251 22E0  
                          l1164 4246                            l1172 00B4                            l1228 47A4  
                          l1316 11D0                            l1308 1090                            l1340 1626  
                          l1076 453E                            l1260 24E6                            l1244 2278  
                          l1165 4284                            l1157 3CD4                            l1173 00B0  
                          l1317 12EA                            l1309 0F08                            l1333 133A  
                          l1245 2460                            l1190 0296                            l1182 01B0  
                          l1174 00F0                            l1342 17E0                            l1334 1386  
                          l1262 25CE                            l1246 22B6                            l1175 0102  
                          l1343 1672                            l1087 321E                            l1247 22A8  
                          l1184 01CC                            l1168 0040                            l1352 18E0  
                          l1344 16D8                            l1336 1576                            l1096 3114  
                          l1088 310A                            l1185 0220                            l1353 189E  
                          l1337 1662                            l1097 31C6                            l1257 247C  
                          l1249 22D6                            l1194 02BC                            l1354 1958  
                          l1338 1644                            l1195 02C6                            l1355 19BE  
                          l1347 170C                            l1339 15FC                            l1259 2498  
                          l1196 02E2                            l1188 026E                            l1348 1736  
                          l1197 032A                            l1349 1786                            l1470 522A  
                          l1198 038C                            l1294 128C                            l1199 044C  
                          l1295 0BB4                            l1296 112E                            l1298 0CA4  
                          l1469 5216                            l1911 536E                            l1915 4A46  
                          l1917 4A80                            l1950 4D98                            l1918 4ABE  
                          l1945 4D56                            l1946 4D4A                            l1949 4D8A  
                          l8001 4EA6                            l1998 527A                            l1999 5272  
                          ?_isr 0001                            l9735 568A                            l9729 567C  
         _escreve_caractere_lcd 4F8C                            l9923 411A                            STR_1 6263  
                          STR_2 6269                            STR_3 626F                            STR_5 6275  
                          STR_6 627D                            STR_9 6252                  timer_dois@flag 003A  
                          _BRGH 007D62                            _T0IF 007F92                            _CREN 007D5C  
                          _LATB 000F8A                            _PIE1 000F9D                            _RCIF 007CF5  
                          i2l61 3FD0                            i2l62 4042                            i2l63 3FE8  
                          i2l65 4016                            i2l67 4036                            i2l68 404A  
                          _TMR2 000FCC                            _SPEN 007D5F                            _TRMT 007D61  
                          _TXEN 007D65                            _SYNC 007D64                            _Fsid 00F3  
                          _dado 003C                            _buff 01A8                            _main 553E  
                  find_volume@i 0235                            _itoa 5348                            fsr0h 000FEA  
                          fsr1h 000FE2                            indf0 000FEF                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf1 000FE7                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            btemp 0046  
                          _utoa 4A3E                   disk_ioctl@cmd 001A                   disk_read@buff 006D  
                 disk_ioctl@res 001E                   disk_read@pdrv 0076                            prodh 000FF4  
                          prodl 000FF3                  ??_get_ldnumber 001C                            start 000E  
     sdc_disk_initialize@buff_i 0075                    ?_follow_path 00E2                    ___param_bank 000000  
     sdc_disk_initialize@count1 0071       sdc_disk_initialize@count2 0077                 create_name@path 0024  
              create_chain@clst 00B4                           ??_isr 0005                     _sync_window 38E2  
                         l11121 3218                           l10323 21AE                           l10173 39E4  
                         l11223 4246                           l10431 2DC8                           l10423 2D52  
                         l10177 39F0                           l10427 2D76                           l11243 4C0C  
                         l11229 4284                           l10551 2A54                           l10369 493A  
                         l11193 3CD4                           l12073 0D3C                           l10387 55B4  
                         l11453 0142                           l12085 0DF8                           l11295 3D8A  
                         l10585 2AFE                           l10905 473A                           l10737 3438  
                         l10827 1BD8                           l10691 5302                           l11637 0AD8  
                         l11469 020A                           l11489 02B0                           l10793 1B16  
                         l10895 46D6                           l11855 1626                           l10799 1B2C  
                         l10967 434C                           l11879 1736                           ?_main 0001  
                         ?_itoa 0060                           STR_10 627C                           STR_11 625B  
                         STR_12 623D                           STR_20 6218                           STR_13 61E7  
                         STR_14 6232                           STR_15 61F8                           STR_16 6208  
                         STR_17 6248                           STR_18 6227                           STR_19 627A  
               __end_of___lldiv 4DAA                           ?_utoa 0021                           u12010 527E  
                         u12200 52F8                           u12040 53A6                           u13000 2F72  
                         _T0CON 000FD5                           u12070 51CA                           u12207 52EE  
                         u13120 2AFE                           u13040 29DC                           u12225 40C4  
                         u12250 4146                           u13050 29EC                           u14010 316C  
                         u12260 4156                           u12500 49C0                           u13140 2B0A  
                         u13300 331C                           u13061 29F6                           u12190 52D0  
                         u13230 2C60                           u14030 3178                           u13240 2C96  
                         u13080 2A54                           u14200 3C2E                           u14040 319C  
                         _T2CON 000FCA                           u12441 5492                           u12257 413C  
                         u14210 3C4E                           u15010 0942                           u12530 25E6  
                         u13250 5026                           u12620 2890                           u13260 5064  
                         u12197 52C6                           u12605 277C                           u13405 34F6  
                         u13190 2BE8                           u14230 3C84                           u13430 1A06  
                         u12375 3E56                           u15015 0938                           u13415 3542  
                         u12800 493A                           u12720 1FFE                           u12640 1DF2  
                         u13600 4704                           u13360 3448                           u13280 5336  
                         u14217 3C44                           u12625 2886                           u12490 3A48  
                         u14170 3BF8                           u13370 3470                           u12555 265A  
                         u12740 2104                           u13620 4762                           u14420 3D6E  
                         u14237 3C7A                           u12725 1FF4                           u11950 55A6  
                         u14190 3C28                           u14350 4C0C                           u16030 1294  
                         u13710 4330                           u14510 3790                           u12575 26F2  
                         u13607 46F4                           u14280 4204                           u14520 3796  
                         u14177 3BEE                           u12745 20FA                           u12665 1E5E  
                         u14370 4D5A                           u13730 436A                           u13810 4464  
                         u14530 37D2                           u14450 3DDE                           u16050 4E36  
                         u13627 4758                           u13475 1A7C                           u11980 5698  
                         u12940 2E76                           u15500 1770                           u13820 3004  
                         u14620 389C                           u14460 3E34                           u16060 4E4E  
                         u14197 3C1E                           u14517 3786                           u12950 2E82  
                         u12870 2CF0                           u15510 1804                           u13910 30DA  
                         u14390 3D02                           u12695 1F4A                           u13840 302A  
                         u14537 37C8                           u13930 30EC                           u14490 376A  
                         u13595 1D9E                           u13827 2FFA                           u14820 02DE  
                         u15540 18BE                           u13860 30A8                           u14750 020A  
                         u13847 3020                           u17207 4E8E                           u15560 193A  
                         u13960 3120                           u15545 18B2                           u14497 3760  
                         u17217 4B04                           u15730 480E                           u15810 0C0E  
                         u15490 1748                           u14915 051C                           u15395 1402  
                         u13867 309E                           u17227 4B20                           u14940 062A  
                         u13980 312C                           u17237 4B3C                           u14950 0640  
                         u14870 0448                           u14790 02B0                           u13990 3158  
                         u17247 2978                           u15815 0C04                           u15680 4C9A  
                         u17257 2B1A                           u17267 2BC6                           u17277 45C8  
                         u15925 0E78                           u13997 314E                           u17287 550A  
                         u14985 0792                 __end_of___lwdiv 52AE                           u15975 1030  
                         u15985 107A                 __end_of___lwmod 53CE                           i2l824 574E  
                         _RCREG 000FAE                           _RCSTA 000FAB                           _TMR0H 000FD7  
                         _TMR0L 000FD6                           _SPBRG 000FAF                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96                 __end_of_f_close 544A                           _TXREG 000FAD  
                         _TXSTA 000FAC                           _FatFs 00F5                 __end_of_chk_chr 5348  
               __end_of_f_lseek 19C4             ___lmul@multiplicand 001E      __size_of_config_timer_dois 000E  
               __end_of_f_mount 4832                 __end_of_dir_sdi 3584                 __end_of_f_write 12FC  
    __size_of_config_timer_zero 001A                 __end_of_get_fat 2952                 __end_of_command 5206  
                         _delay 5678                 __end_of_mem_cmp 506E                 __end_of_mem_cpy 477E  
               __end_of_dpowers 6177                 __end_of_mem_set 55D6                   find_volume@br 0200  
                 find_volume@fs 0238                   find_volume@pt 021A        __size_of_escreve_cmd_lcd 008C  
                disk_ioctl@buff 001B                           pclath 000FFA                  disk_read@count 0073  
                         tablat 000FF5                  disk_ioctl@pdrv 001D                 __end_of_proceed 5778  
                         plusw1 000FE3                           plusw2 000FDB                 __end_of_put_fat 21E8  
                         utoa@c 0029                           utoa@v 0027                           status 000FD8  
                         wtemp6 0047                 __end_of_sync_fs 374A                   get_ldnumber@i 0024  
                 disk_write@res 0076                 __initialization 4F1A             disk_initialize@pdrv 007A  
           disk_initialize@stat 007B                    __end_of_main 5574                    clust2sect@fs 0026  
                  __end_of_itoa 538C                    __end_of_utoa 4AE2              _inicializa_tarefas 5600  
               escalonador@cont 001C                __end_of_ReadSPI_ 5782                   sdc_reset@buff 002C  
                        ??_main 002E                          ??_itoa 002A                          ??_utoa 0027  
                 __activetblptr 000002             ?_inicializa_tarefas 0001                ??_sdc_disk_write 0060  
                        ?_delay 0001          ?_escreve_caractere_lcd 0001                          _ADCON1 000FC1  
                  ?_open_append 01E0                          _INT0IE 007F94                          _INT0IF 007F91  
                 ?_dummy_clocks 0001                          _PCLATH 000FFA                          _INTCON 000FF2  
                        i2l8493 3FE0         __size_of_inicializa_SPI 003E                          _TMR0IF 007F92  
                        _TMR2IF 007CF1                          _SDCard 4832        __end_of_recebe_dado_uart 5752  
                        _SPPCFG 000F63                          _SPPCON 000F65                _is_it_gga_string 003E  
                        _SSPBUF 000FC9            __end_of_dir_register 4544        __size_of_sdc_disk_status 0014  
              __end_of_check_fs 4288            ??_inicializa_tarefas 001A            __size_of_create_name 02EA  
      __size_of_disk_initialize 003C      __end_of_posicao_cursor_lcd 50DE                __end_of_dir_find 446A  
              __end_of_dir_next 1DE0                    ?_move_window 008C            __end_of_create_chain 2FCC  
        __size_of_init_hardware 0016                __end_of__powers_ 619E                __end_of_ld_clust 4E28  
                        ___lmul 5206            __size_of_find_volume 0AF2            __size_of_disk_status 003E  
                     ??___lldiv 0022                          _f_open 21E8                          _f_time 0170  
                     ??___lwdiv 001E                          _f_sync 3A4C                       ??___lwmod 001E  
                        _estado 003B                __end_of_init_lcd 4B80                       ??_f_close 002E  
                find_volume@fmt 0237                          clear_0 4F42                          clear_1 4F54  
                        clear_2 4F60                          clear_3 4F6C                          clear_4 4F78  
                find_volume@rfs 00A1                       ??_chk_chr 001E                  find_volume@vol 0220  
                     ??_f_lseek 00CF                       ??_f_mount 002E                       ??_dir_sdi 00B5  
                     ??_f_write 00D1                       ??_get_fat 009D             _sdc_disk_initialize 2952  
                     ??_command 0024                       ??_mem_cmp 0020                       ??_mem_cpy 0020  
                     ??_mem_set 0020                          itoa@cp 002A                __end_of_validate 4C14  
          __size_of_escalonador 0078            __end_of_get_ldnumber 3CF0                __end_of_response 576C  
                  __mediumconst 614E           write_timer_zero@timer 001C                 disk_read@sector 006F  
               disk_read@result 0077                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                __end_of_st_clust 5600                       ??_proceed 001C  
              _write_timer_zero 570A                       ??_put_fat 00A1       escreve_caractere_lcd@data 001C  
                     ??_sync_fs 008E                  ??_dummy_clocks 001A             _escreve_inteiro_lcd 5488  
               sdc_disk_write@i 0064                 sdc_disk_write@j 0069                      __accesstop 0060  
       __end_of__initialization 4F7E            ?_sdc_disk_initialize 0001                  disk_write@buff 006C  
                get_ldnumber@tp 0020                  get_ldnumber@tt 0026              __size_of_WriteSPI_ 0012  
                disk_write@pdrv 0073                   ___rparam_used 000001               ??_escreve_cmd_lcd 001C  
                __pcstackCOMRAM 0001     __end_of_endereco_cursor_lcd 5148                    __pidataBANK1 5650  
             ?_mensagem_inicial 0001                   __end_of_delay 569C            __size_of_follow_path 0198  
          ?_escreve_inteiro_lcd 002C              ??_mensagem_inicial 0020              _tarefa_em_execucao 0043  
    __end_ofi2_write_timer_zero 5740              __size_of_dir_alloc 00F2                 open_append@path 01E2  
        __size_of_sdc_disk_read 0140                   _init_hardware 56CE              __size_of_disk_read 00C2  
                       ??_delay 001A                  sdc_reset@count 002A                _is_it_rmc_string 003D  
  mensagem_inicial@msg_linha_um 0060                      __pbssBANK0 00E7                      __pbssBANK1 0100  
                    __pbssBANK2 0267  __size_of_escreve_frase_ram_lcd 0052                       ?_ReadSPI_ 0001  
 __end_of_escreve_frase_ram_lcd 5300           ??_sdc_disk_initialize 006D                         ?_SDCard 0001  
              _find_volume$2372 0210                _find_volume$2373 0214       escreve_inteiro_uart@F3956 01B2  
                    _gga_buffer 0100              __size_of_sdc_reset 00B0                         SDCard@i 01E5  
                       ?___lmul 001A               ??_sdc_disk_status 001A           mensagem_inicial@F4134 61D6  
         mensagem_inicial@F4136 61C5           ??_escreve_inteiro_lcd 002E                         ?_f_open 01D3  
                       ?_f_sync 0097               ??_disk_initialize 002E                    ?_sync_window 0077  
                ___lmul@product 0022                    _gga_pointers 0150               __end_of_WriteSPI_ 572E  
                       _INTCON2 000FF1                         _INTCON3 000FF0                  ?_init_hardware 0001  
                     ?_check_fs 0097                      _disk_ioctl 5628                  follow_path@dir 01CF  
                follow_path@res 01D2                      _disk_write 4CA0                  remove_chain@fs 00B2  
                     ?_dir_find 00DC                       ?_dir_next 00C9                         _SSPCON1 000FC6  
         __size_of_dir_register 00DA                       ?_ld_clust 001A                         _SSPSTAT 000FC7  
                    _clust2sect 4606                sync_window@wsect 0088                  _inicializa_SPI 53CE  
                    ??_ReadSPI_ 001A                   ?_remove_chain 00B2           __size_of_create_chain 0332  
                     ?_init_lcd 0001                 __size_of_SDCard 00B2            __size_of_open_append 0064  
                 _sdc_disk_read 3E38               __end_of_dir_alloc 437A               __end_of__npowers_ 61C5  
                       __Hparam 0000                         __Lparam 0000                       ?_validate 0021  
             __end_of_disk_read 4606                       ?_response 0001                      f_close@res 00A2  
               __size_of___lmul 0056                       ?_st_clust 001A                         ___lldiv 4D28  
          __size_of_move_window 00AA                      check_fs@fs 0097                         ___lwdiv 525C  
                       ___lwmod 538C                 __size_of_f_open 03EC                 __size_of_f_sync 015A  
          __end_of_dummy_clocks 553E                         _f_close 540C           __size_of_get_ldnumber 014A  
                       __pcinit 4F1A                         _chk_chr 5300                    _get_fat$2018 00A5  
                       _f_lseek 12FC                      _init_ports 56B6                         __ramtop 0800  
                       _f_mount 477E                         __ptext0 553E                         __ptext1 4E28  
                       __ptext2 4AE2                         __ptext3 56CE                         __ptext4 56B6  
                       __ptext5 5782                         __ptext6 56F8                         __ptext7 569C  
                       __ptext8 570A                         __ptext9 5752                         _dir_sdi 32B6  
                   validate@fil 0027                         _f_write 0B04                     validate@obj 0021  
                       _get_fat 25D4                         _command 51AC                       _T0CONbits 000FD5  
                    chk_chr@chr 001C                    _dir_register 446A                      chk_chr@str 001A  
                       _mem_cmp 4FFE         i2write_timer_zero@timer 0003                         _mem_cpy 46C4  
   endereco_cursor_lcd@endereco 001C                         _dpowers 614F                         _mem_set 55AA  
                  __size_of_isr 408E         ??_escreve_caractere_lcd 001C                      ??_check_fs 009D  
               find_volume@path 00A3                 find_volume@nrsv 0222                 find_volume@stat 022C  
                  _create_chain 2C9A                         _proceed 576C         __size_of_init_interrupt 0012  
             __end_of_sdc_reset 4994                      ??_dir_find 002E                         _put_fat 1DE0  
                    ??_dir_next 00CD          __end_of_inicializa_SPI 540C                      f_lseek@bcs 01D8  
                    ??_ld_clust 001E                         _sync_fs 3584                      f_lseek@ofs 00CB  
                __pintcode_body 3F78                      f_lseek@res 01D3            end_of_initialization 4F7E  
                    f_open@mode 01D7                      f_open@path 01D5                  ??_remove_chain 00B8  
                       isr@cont 0019         __size_of_init_oscilador 0008                         itoa@buf 0060  
                       itoa@val 0062            sdc_disk_initialize@i 006E                   __Lmediumconst 614E  
                    ??_init_lcd 001D                         int_func 3F78                      _rmc_buffer 0267  
             ?_recebe_dado_uart 0001                       i2u1020_40 401A                 disk_status@pdrv 001F  
               disk_status@stat 0020                  ?_sdc_disk_read 0026          write_timer_zero@timer0 001A  
               ___lldiv@divisor 001E                      f_mount@cfs 00B4                      f_mount@res 00B3  
                    f_mount@opt 00B2              ??_recebe_dado_uart 0001                sdc_disk_read@ptr 0064  
                    f_mount@vol 00B8                 ___lldiv@counter 0026                    _get_ldnumber 3BA6  
                    ??_validate 0023                      ??_response 001A                       _RCSTAbits 000FAB  
      __end_of_write_timer_zero 571C                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc1 000FE6                         postinc2 000FDE  
                    ??_st_clust 0020                  move_window@res 0096                         utoa@buf 0021  
                       utoa@val 0023                      _wait_ready 5574                      dir_alloc@n 00E3  
              remove_chain@clst 00B4                      dir_find@dp 00DC                       _PORTBbits 000F81  
                     _PORTDbits 000F83                 ??_init_hardware 001E              _posicao_cursor_lcd 506E  
                    dir_sdi@idx 00B3                      dir_next@dp 00C9                     ?_disk_ioctl 001A  
                    f_write@btw 00CD                      f_write@res 01CF                       _TRISBbits 000F93  
                   ?_disk_write 006C                       _TRISCbits 000F94                       _TRISDbits 000F95  
               _escreve_cmd_lcd 4C14                      get_fat@val 00AB             ?_posicao_cursor_lcd 001D  
               get_ldnumber@vol 0022                 ?_inicializa_SPI 0020                 disk_write@count 0072  
              WriteSPI_@TempVar 001A                     ?_clust2sect 0026                      command@CMD 0024  
                    command@CRC 0023                   ??_create_name 0026                      command@arg 001F  
                    ld_clust@cl 0024                      ld_clust@fs 001A     __size_of_inicializa_tarefas 0028  
                __end_of_SDCard 48E4                   ??_find_volume 00A6                   ??_disk_status 001C  
               command@argument 0025            ??_posicao_cursor_lcd 001E                  __end_of___lmul 525C  
                   st_clust@dir 001A                  __end_of_f_open 25D4                   ??_escalonador 001A  
                   ?_init_ports 0001                  __end_of_f_sync 3BA6                  clust2sect@clst 0028  
          __size_of_sync_window 016A             start_initialization 4F1A                   WriteSPI_@dado 001B  
                   __end_of_isr 4096       __size_of_mensagem_inicial 007A                   open_append@fp 01E0  
                 open_append@fr 01E4                      mem_cmp@cnt 001E                      mem_cmp@dst 001A  
                    mem_cmp@src 001C                      mem_cpy@cnt 001E                     put_fat@clst 0099  
                    mem_cpy@dst 001A                      mem_cpy@src 001C                 _sdc_disk_status 56E4  
               ??_sdc_disk_read 0060                        ??_SDCard 002E              i2_write_timer_zero 572E  
               _disk_initialize 54C6                      mem_set@cnt 001E                      mem_set@dst 001A  
                    mem_set@val 001C               __size_of_ReadSPI_ 000A         __size_of_sdc_disk_write 00FE  
              _data_uart_recebe 0045               wait_ready@timeout 001A                     _dado_buffer 00F9  
         __size_of_dummy_clocks 003C                   ??_follow_path 00E6             __size_of_disk_ioctl 0028  
           __end_of_create_name 32B6             ?i2_write_timer_zero 0001             __size_of_disk_write 0088  
                      ??___lmul 0022                        ??_f_open 01D8                        ??_f_sync 002E  
                   ?_wait_ready 0001                     __pdataBANK1 01A8             __end_of_find_volume 0B04  
           __end_of_disk_status 5488             __size_of_clust2sect 00BE          sdc_disk_read@start_add 0065  
          __end_of_remove_chain 3E38         sdc_disk_initialize@buff 0079         __end_of_escreve_cmd_lcd 4CA0  
       sdc_disk_initialize@stat 0070    __size_of_endereco_cursor_lcd 006A                     __pbssBIGRAM 02AD  
                   __pbssCOMRAM 002E                   __pcstackBANK0 0060                   __pcstackBANK1 01CF  
                 __pcstackBANK2 0200                  _init_interrupt 56F8            ??i2_write_timer_zero 0003  
           __end_of_escalonador 4F1A                       _WriteSPI_ 571C     __end_of_sdc_disk_initialize 2C9A  
                   _data_buffer 0199               __size_of_check_fs 00F4                    check_fs@sect 0099  
                    sdc_reset@i 0026               __size_of_dir_find 00F0                    _dummy_clocks 5502  
                _init_oscilador 5782               __size_of_dir_next 041C               __size_of_ld_clust 007E  
           __size_of_init_ports 0018           _escreve_frase_ram_lcd 52AE                       _data_buff 00F7  
   __end_of_escreve_inteiro_lcd 54C6               __size_of_init_lcd 009E                ___lwdiv@dividend 001A  
             delay@contador_int 001B               delay@contador_ext 001A                       _gga_index 0036  
                     __pintcode 0008                   __pmediumconst 614E                        SDCard@bw 01E7  
                     _dir_alloc 4288                        ?___lldiv 001A               __size_of_validate 0094  
                     __npowers_ 619E                        ?___lwdiv 001A                        ?___lwmod 001A  
             __size_of_response 000C                        ?_f_close 00A0                       _disk_read 4544  
                      ?_chk_chr 001A                   follow_path@dp 00E2              _sinaliza_int_timer 0044  
                      ?_f_lseek 00C9                   follow_path@ns 01D1               __size_of_st_clust 002A  
           __end_of_follow_path 38E2                        ?_f_mount 00AE                        ?_dir_sdi 00B1  
                      ?_f_write 00C9                        ?_get_fat 0097                        ?_command 001F  
                      ?_mem_cmp 001A                        ?_mem_cpy 001A          __end_of_init_interrupt 570A  
                      ?_mem_set 001A             sdc_disk_read@p_buff 0026             sdc_disk_read@length 0069  
           sdc_disk_read@sector 0028         __end_of_sdc_disk_status 56F8  __size_of_escreve_caractere_lcd 0072  
                    ?_WriteSPI_ 0001   __end_of_escreve_caractere_lcd 4FFE                        ?_proceed 0001  
                     f_close@fp 00A0                        ?_put_fat 0097                ___lwdiv@quotient 001F  
                __size_of_delay 0024         __end_of_disk_initialize 5502          __end_of_init_oscilador 578A  
                      ?_sync_fs 008C                       _p_tarefas 00EF                   ??_open_append 002E  
             find_volume@fasize 022D                       _sdc_reset 48E4             __size_of_wait_ready 0036  
                   _create_name 2FCC                        _LATBbits 000F8A                       f_lseek@fp 00C9  
                      _LATCbits 000F8B               find_volume@szbfat 0216                       f_open@dir 024F  
                     f_open@res 024E                       f_open@sfn 023A               find_volume@sysect 021C  
                      _PIE1bits 000F9D                       _rmc_index 0034                     _find_volume 0012  
                   _disk_status 544A                   ??_move_window 0092                       f_mount@fs 00AE  
                     f_mount@rp 00B6                 follow_path@path 00E4                        _PIR1bits 000F9E  
                 move_window@fs 008C               ?_write_timer_zero 001A                       dir_find@c 00DE  
                    ?_dir_alloc 00DC                 remove_chain@res 00BC                 remove_chain@nxt 00BD  
                     f_sync@dir 009E                       f_sync@res 009D                       dir_sdi@ic 00BC  
                     dir_sdi@dp 00B1        posicao_cursor_lcd@coluna 001D                       dir_next@c 00D4  
                     dir_next@i 00D6                      ?_disk_read 006D              ??_write_timer_zero 001C  
                     f_write@cc 01D3      posicao_cursor_lcd@endereco 001F                       f_write@bw 00CF  
                     f_write@fp 00C9                       get_fat@bc 00AF                       get_fat@fs 0097  
     __size_of_recebe_dado_uart 0012                       get_fat@wc 00A7                     _escalonador 4EA2  
              ?_escreve_cmd_lcd 0001     escreve_frase_ram_lcd@buffer 001D                ??_inicializa_SPI 0022  
               ?_init_interrupt 0001                    ??_disk_ioctl 001D                    ??_disk_write 002D  
                  f_lseek@ifptr 01CF                _mensagem_inicial 4E28                    f_lseek@nsect 01D4  
                    st_clust@cl 001C                 ?_init_oscilador 0001                    ??_clust2sect 0060  
             ___lmul@multiplier 001A                       copy_data0 4F2E                      ?_sdc_reset 0001  
                      _ReadSPI_ 5778             sdc_reset@count_nosd 0028          ?_escreve_frase_ram_lcd 001D  
                    put_fat@res 00AF                      put_fat@val 009D               move_window@sector 008E  
                _sdc_disk_write 4096                 dir_next@stretch 00CB        escreve_inteiro_lcd@F3966 01B9  
           __end_of_open_append 51AC                        __Hrparam 0000                        __Lrparam 0000  
                   _follow_path 374A              __end_of_disk_ioctl 5650           __size_of_remove_chain 0148  
            __end_of_disk_write 4D28          sdc_disk_initialize@ocr 0076                __size_of___lldiv 0082  
              __size_of___lwdiv 0052                __size_of___lwmod 0042                    ??_init_ports 001A  
           __end_of_move_window 4A3E              __end_of_clust2sect 46C4        escreve_inteiro_lcd@valor 002C  
              __size_of_f_close 003E        escreve_inteiro_lcd@texto 0066                __size_of_chk_chr 0048  
              __size_of_f_lseek 06C8                __size_of_f_mount 00B4                __size_of_dir_sdi 02CE  
              __size_of_f_write 07F8                __size_of_get_fat 037E               disk_status@result 001D  
              __size_of_command 005A           __end_of_init_hardware 56E4                        _check_fs 4194  
             _get_ldnumber$2292 001E                __size_of_mem_cmp 0070                __size_of_mem_cpy 00BA  
              __size_of_mem_set 002C                        _gga_code 0031                 ___lwdiv@divisor 001C  
                   ??_WriteSPI_ 001A                ?_sdc_disk_status 0001                 dir_register@res 00E6  
               ___lwdiv@counter 001E                        __ptext10 5600                        __ptext11 53CE  
                      __ptext20 437A                        __ptext12 4C14                        __ptext21 4FFE  
                      __ptext13 4EA2                        __ptext30 3A4C                        __ptext22 2FCC  
                      __ptext14 4832                        __ptext31 3584                        __ptext23 5300  
                      __ptext15 5148                        __ptext40 25D4                        __ptext32 55AA  
                      __ptext24 446A                        __ptext16 21E8                        __ptext41 4606  
                      __ptext33 5628                        __ptext25 4288                        __ptext17 3CF0  
                      __ptext50 4194                        __ptext42 477E                        __ptext34 55D6  
                      __ptext26 32B6                        __ptext18 374A                        __ptext51 4994  
                      __ptext43 0012                        __ptext35 0B04                        __ptext27 19C4  
                      __ptext19 4DAA                        __ptext60 5574                        __ptext52 38E2  
                      __ptext44 3BA6                        __ptext36 4B80                        __ptext28 12FC  
                      __ptext61 5502                        __ptext53 4CA0                        __ptext45 544A  
                      __ptext37 46C4                        __ptext29 540C                        __ptext70 525C  
                      __ptext62 5778                        __ptext54 4096                        __ptext46 56E4  
                      __ptext38 2C9A                        __ptext71 52AE                        __ptext63 571C  
                      __ptext55 4544                        __ptext47 54C6                        __ptext39 1DE0  
                      __ptext72 4F8C                        __ptext64 506E                        __ptext56 3E38  
                      __ptext48 2952                        __ptext73 5678                        __ptext65 50DE  
                      __ptext57 5760                        __ptext49 48E4                        __ptext74 5206  
                      __ptext66 5488                        __ptext58 576C                        __ptext75 4D28  
                      __ptext67 5348                        __ptext59 51AC                        __ptext68 4A3E  
                      _dir_find 437A                        __ptext77 572E                        __ptext69 538C  
                      __ptext78 5740                        _dir_next 19C4                        __powers_ 6177  
              __size_of_proceed 000C                        _filename 01C0                   dir_alloc@nent 00DE  
              ?_disk_initialize 0001                        _ld_clust 4DAA                __size_of_put_fat 0408  
                sync_window@res 0085                  _timeout_tarefa 0038                    _rmc_pointers 0164  
              __size_of_sync_fs 01C6              sdc_disk_read@count 002C      __end_of_inicializa_tarefas 5628  
      i2write_timer_zero@timer0 0001          __end_of_sdc_disk_write 4194                        _init_lcd 4AE2  
                 __size_of_main 0036                      sync_fs@res 0096                    _remove_chain 3CF0  
                 __size_of_itoa 0044                   __size_of_utoa 00A4                find_volume@bsect 0231  
           _endereco_cursor_lcd 50DE              __end_of_init_ports 56CE                find_volume@nclst 0228  
              find_volume@tsect 0224                find_volume@wmode 00A5               _comma_counter_gga 0040  
                 dummy_clocks@i 001D                        f_open@dj 0251                        f_open@cl 0246  
                 dummy_clocks@n 001C                        f_open@fp 01D3                        f_open@dw 024A  
             _comma_counter_rmc 003F                        _rmc_code 002E                        _validate 4B80  
                      _response 5760                        f_sync@fp 0097                        f_sync@tm 0099  
   __size_of_posicao_cursor_lcd 0070                        int$flags 0046                     ??_dir_alloc 00E0  
       posicao_cursor_lcd@linha 001E                        _st_clust 55D6         inicializa_SPI@smp_phase 0021  
                      get_fat@p 00A9                    ??_wait_ready 001A                   ??_sync_window 0079  
                   ??_disk_read 0074                     f_lseek@clst 01DC            ?_endereco_cursor_lcd 0001  
                      mem_cmp@d 0023                        mem_cmp@r 0027                        mem_cmp@s 0025  
                    _INTCONbits 000FF2                       put_fat@bc 00AD                        mem_cpy@d 0022  
                     put_fat@fs 0097                        mem_cpy@s 0024         inicializa_SPI@sync_mode 0001  
                      mem_set@d 0020                        itoa@base 0064               _config_timer_dois 5752  
                  _tempo_backup 00EB               _config_timer_zero 569C          inicializa_SPI@bus_mode 0020  
                 wait_ready@res 001E                        intlevel2 0000                     _open_append 5148  
            ?_config_timer_dois 0001        mensagem_inicial@msg_dois 0071                     ??_sdc_reset 0026  
            ?_config_timer_zero 0001                    _tempo_tarefa 00E7                  dir_register@dp 01CF  
               ?_sdc_disk_write 0026                ___lwmod@dividend 001A              __end_of_wait_ready 55AA  
              ___lldiv@dividend 001A                    dir_alloc@res 00E5                   sync_window@fs 0077  
                 sync_window@nf 0086               sdc_disk_read@buff 006B           __end_of_sdc_disk_read 3F78  
           sdc_disk_status@pdrv 001B                     f_mount@path 00B0             sdc_disk_status@stat 001A  
                     sync_fs@fs 008C             ??_config_timer_dois 001A                      _OSCCONbits 000FD3  
           ??_config_timer_zero 001E                     _move_window 4994                        put_fat@p 00B0  
          sdc_disk_write@count1 0066            sdc_disk_write@p_buff 0026                _recebe_dado_uart 5740  
                      utoa@base 0025            sdc_disk_write@sector 0028           ??_endereco_cursor_lcd 001C  
                 ?_dir_register 01CF                    response@buff 001A                     dir_alloc@dp 00DC  
              ___lldiv@quotient 0022                 ___lwmod@divisor 001C                 ___lwmod@counter 001E  
                   dir_find@dir 00DF             __end_of_sync_window 3A4C                     dir_find@res 00E1  
     __end_of_config_timer_dois 5760                   ?_create_chain 00B2       __end_of_config_timer_zero 56B6  
   __size_ofi2_write_timer_zero 0012                     _SSPCON1bits 000FC6                    dir_next@clst 00D8  
              _create_name$2268 0060          escreve_cmd_lcd@comando 001C             sdc_disk_write@count 002C  
 sdc_disk_initialize@crc_number 0073                     dir_sdi@clst 00C2                     dir_sdi@sect 00BE  
                  ?_create_name 0022              sdc_disk_write@buff 006B    __size_of_sdc_disk_initialize 0348  
                  f_write@csect 01D2                    f_write@wbuff 01D0                    _put_fat$2044 00A9  
                  _put_fat$2045 00AB                     f_write@buff 00CB                     f_write@clst 01D9  
             sdc_disk_write@res 0068                     f_write@sect 01D5                    ?_find_volume 00A1  
                   f_write@wcnt 01DD                   ?_get_ldnumber 001A                    ?_disk_status 0001  
 __end_ofmensagem_inicial@F4134 61E7   __end_ofmensagem_inicial@F4136 61D6  
